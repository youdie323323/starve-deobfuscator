(function () {
  var aj = 171;
  if (aj >= 2) {
    aj = 200;
  }
  const bj = window;
  let cj = 227;
  Math.floor(166[166 .Δⵠⵠⵠⵠⵠⵠ]);
  var dj = 242;
  if (dj === 7) {
    dj = 195;
  }
  var ej = 251;
  if (ej >= 11) {
    ej = 153;
  }
  var fj = 213;
  if (fj >= 0) {
    fj = 99;
  }
  Math.floor(33[33 .ΔᐃΔᐃΔⵠⵠ]);
  var gj = 139;
  if (gj == 1) {
    gj = 118;
  }
  Math.floor(90[90 .ⲆΔΔⲆΔⵠΔ]);
  var hj = 212;
  if (hj >= 3) {
    hj = 198;
  }
  const ij = function (a) {
    let b = "";
    for (let c = 0; c < a.length; c++) {
      b += bj.String.fromCharCode(a[c] ^ cj++ % 255);
    }
    return b;
  };
  var h = 179;
  if (h === 1) {
    h = 166;
  }
  var jj = 100;
  if (jj > 0) {
    jj = 156;
  }
  var kj = 193;
  if (kj == 14) {
    kj = 12;
  }
  var lj = 200;
  if (lj == 1) {
    lj = 136;
  }
  var mj = 214;
  Math.floor(18[18 .ⵠⵠᐃᐃᐃᐃΔⵠᐃ]);
  var nj = 229;
  if (nj === 2) {
    nj = 189;
  }
  var oj = 147;
  if (oj >= 9) {
    oj = 184;
  }
  if (mj == 4) {
    mj = 85;
  }
  var pj = 115;
  if (pj === 13) {
    pj = 133;
  }
  var qj = 104;
  if (qj > 14) {
    qj = 235;
  }
  const rj = 17;
  const C = 13;
  const T = 256;
  const sj = ["Content-Type", "#281C08", "#c4bc51", "#939995", "cursor", "#e7dc8f", "servselect", "#73583e", "Bueno para destruir estructuras", "011_111_110", "inline-block", "#adbcb5", "number", " Share on Facebook", "#34255d", "010_110_110", "#634828", "inv_shop", "none", "re", "#afac98", "starve_quality", "Sushui", "#082b22", "Damage: 4", "click", "#33b4e4", "Damage: 14", "Durabilidad: 1000", "#35b1b5", "Starve.io", "#163A3A", "#b3e0e3", "#6a7570", "#1a4935", "#2b7c57", "#C0BF55", "#A37943", "rgba(255, 255, 255, 0)", "You are the king of crabs!", "Прочность: 2000", "010_110_000", "#efd435", "On-Hit Damage: 3", "#2b5c48", "#785f4c", "#0b3432", "Jedzenie: 100", "fade", "#328587", "CrysTal", "#342C7C", "getAuthResponse", "CLAIM REWARD!", "#7d6144", "#232828", "#b29e4d", "claim_rewards", "Durability: 2000", "GET", "active", " Collect 1 dragon heart", "#462966", "#3e3c25", "Useful to destroy buildings", "Урон: 2", "Game", " BACK TO THE GAME", "Birth: 4min", "#95d5d8", "#75827D", "000_111_010", "#bfb360", "mousedown", "#83827e", "#0e3022", "_blank", "#000000", "#485e66", "WINTER", "#3dc4c0", "#1a4545", "#B56D18", "cave o chão para pegar terra, areia e gelo", "010_111_111", "starve_info_box", " Gather 1 amethyst", "#24878f", "#0a2728", "#2a2938", "#493e26", "011_011_000", "loaded", "Pomocny w niszczeniu budowli", "#bbbbbb", "#4eb687", "#041c21", "#be8d50", "px", "Food: 10", "#47341d", "000_111_011", "rewardquest", "#382e19", "Emerald Machine", "Dig the ground to gather dirt, ice, and sand", "Durabilité: 2000", "name", "fo", "Allow you to calm crabs, and heal them", "#A89F67", "#53A4D5", "Durabilidad: 2000", "#e9dad9", "starve_cancel", "Daño: 2", "110_111_110", "dano em construções: 1", "#392C16", "#87d2e6", "#1b170c", "Players Defense: 4", "#09373F", "#123d38", "eject_member", "#a33e2b", "#07393d", "Durability: 1000", "010_011_000", "#454545", "Easter Egg", "#e2cf27", "Daño para estructuras: 1", "#8359d3", "Food: 20", "Taco4Life", "000_011_010", "pizza wa", "#C09D6F", ".md-languages label button", "#322413", "isl", "init", "#b2d4d1", "000_011_011", "#44301b", "#1f343f", "Building method: Free. Press G to change", "#58645F", "Hält dich warm außerhalb von Wasser und Winter", "Crab sticks", "time_finished_", "#163a3a", "010_011_011", "#d45ce5", "string", "#dfd1cb", "#B26F31", "#187484", "#660000", "Schaden: 2", "timeremainingquest", "low_ing", "#083326", "cancel_sure_delete", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16", "110_110_010", "#f9efeb", "audio/ambience.mp3", "la", "shop_starterkit", "También puedes conseguir minerales", "durabilidade: 1000", "#8255b5", "</div>", "Building Damage: 1", "#141414", "#242503", "Totem", "#c1b06b", "#4C3B19", "110_111_010", "#554139", "dano: 2", "_number", "#C6AF81", "Peut aussi récupérer des minéraux", "object", "#9E8456", "Pixelbitie", "undefined", "#58452b", "#3fc9c9", "Chapka", "#1F343F", "#262114", "__default", " Constraints", "#523e26", "#077b49", "timeremain_", "id", "qwerty_ing", "Relax in this confortable bed", "#4d2d14", "#032b23", "Haltbarkeit: 700", "#ffffff", "Damage: 1", "110_111_111", "#77371f", "#73dde5", "011_011_011", "quit_chronoquest", "You can buy items on the shop in the next game with your points", "#c3be9a", "Ciepło w i poza zimą", "input_ratio", "treasure_chest_4", "#214C4B", "middle", "Te calienta en invierno y fuera del agua", "Dégâts: 2", "110_110_000", "starve_quests", "#211108", "They can't hit you and you can't hit them", "Building method: Grid. Press G to change", "#555555", "010_111_010", "Прочность: 1000", " you can only hit people who are flying too", "000_111_110", "Winter", "time", "azerty_ing", "Damage: 3", "110_110_110", "#5E3E1A", "plm", "010_111_000", "#FFF", "011_111_011", "aloner", "Warm outside water and in winter", "starve_aliasing", " Claim rewards", "cs", "#0e3838", "dw", "011_111_111", "#54a4ba", "#313041", "#174a51", "#432516", "#574122", "Creuse la terre, le sable et la neige", " Open 5 treasure chests", "011_111_000", "de", "#200333", "#c4a23a", "When you are flying,", "survive20min_3", "111_111_011", "mouseup", "#EDCE4F", "#252B28", "#654320", "Прочность: 700", "Building Damage: 4", "Obrażenia do budowli: 1", "#816511", "#ddcf8a", "durabilidade: 2000", "Урон по строениям: 1", "Haltbarkeit: 2000", "Players Defense: 4, Animals Defense: 16", "#EAEAEA", " QUIT", "111_111_110", "#2b9390", "durabilidade: 700", "spectator", "#f0f4f0", "111_111_000", "Durabilidad: 700", "#eda80d", "canvas", "Crab Claw", "#a08f47", "#c26de0", "#183f3f", "#1d051e", "#b7252c", "#115E60", "application/x-www-form-urlencoded", "img/avatar-player14.png", "Du kannst auch Mineralien bekommen", "000_010_010", "#29997c", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16", "source-over", "_on", "Wytrzymałość: 2000", "Défense: 4, Défense contre animaux: 16", "eogito", "#0a2f2b", "LAVA", "#43aa82", "Damage: 20", "#347f93", "#ac222a", "#032428", "points", "wtb", "constraintquest", "#9b2b25", "#242330", "#123335", "play", "Kill", "#f4efc6", "#043c37", "#46554D", "111_111_010", "000_110_110", " After 1 day, survive in winter", "#124949", "#2E85A0", "#ee593d", "#B6222A", "010_110_010", "110_111_011", "team_box", "#0F464C", "#63c9d6", "000_010_000", "#674C2A", "Anyone want to play?", "#d588f1", "playing", "winter_7", "send", "#21112D", "Защита от игроков: 4, Защита от животных: 16", "Chrono Quests", "#184747", "You are less cold, less thirsty, and less hungry", "#7C5A29", "Damage: 2", "#281A49", "killdragon_1", " Share on Twitter", "#67766F", "stop", "#fef4f4", "#80500b", "#0b2326", "#3ba578", "#4c3a15", "#072824", "Time Remaining", "'Baloo Paaji', sans-serif", "#86d0d1", "Uuunnnggg...", "Damage: 24", "#747471", "#877d36", "game_body", "#5cccc4", "#1678a2", "#182935", "#136167", "nickname_block", "#352b10", "dont_hit_5", "Копайте землю, чтобы получить грязь, лед и песок", "home_craft", "#89d1d4", "upfiz", " Collect 100 bread in deep winter", "#43b5af", "Damage: 30", "Lifetime: 8 days", "auth2", "Czas życia: 8 dni", "#BB0000", "FB", "Bed", "Wytrzymałość: 700", "010_011_010", "#388AC7", "Crab Helmet", "Grab herum um Dreck, Eis und Sand zu bekommen", "destination-out", "lock_team", "111_111_111", "#2b6664", "#D8DC74", "#0d1b1c", "Możesz także zdobyć minerały", "#4d4a2e", "Cactus", "Cava para conseguir tierra, arena y hielo", "#c27add", "#7d5234", "running", "#e4efe8", "function", "#c67933", "#29aaa1", "#e45936", "Score", "score", "#7f6d52", "loaderror", "Crabs follow you", "#b29c32", "#939393", "defesa de jogadores: 4, defesa de animais: 16", "Lebenszeit: 8 Tage", "#FFFFFF", "#111316", "#a9e4ed", "Starve.io ", "load", "#030d14", "Durabilité: 700", "#2b280a", "#cd98e5", "gapi", "iblk", "buy_kit", "Animals Defense: 13", "comida: 100", "Comida: 100", "#5E3C10", "000_111_111", "010_010_010", "000_011_000", "Uuunnnggg", "Utile pour détruire les bâtiments", "#2A8B9B", "_trad_number", "Nützlich um Gebäude zu zerstören", "starve_mapping", "000_111_000", "serverAddressInput", "You will be cured faster", "#123b3f", "#5cc5ce", "#9baaa3", "high_ing", "XPayStationWidget", "px Baloo Paaji", "#3f332a", "#0F3A24", "#3A2A0D", "bread_6", "You feel a great power emanating from this orb", "Crab Spear", "Используется для разрушения зданий", "MADBalgouthi", "#042b30", "#EFE4B4", "#3da34d", "#b864d6", "#83ddd4", "#252525", "gw", "#120202", "Crab claws can also be eaten", "#092b29", "você também pode pegar minerais", "#74ede6", "#d2c77b", "Oh, yeah? Is there crab in the crab sticks?", "Так же вы можете получить ресурсы", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "You can also gather minerals", "Essen: 100", "#8c29aa", " Be peaceful", "000_110_000", "#073030", "Wytrzymałość: 1000", "#A9D6D3", "Days survived", "#4c3b19", "#ff0000", "FOREST", "account_nickname_input", "#8a938e", "#d7990c", "#564021", "fod", "#b15ecf", "gm", "#0d2e33", "000_110_010", "#1f5453", "#1a7961", "claim_reward_", "#614627", "amethyst_2", "#5f6061", "#68622D", "#46c2c9", "round", "#57442a", "recipe_craft", "#0a0b0c", "&userid=", "#a7983c", "#e8e8e8", "#0a4049", "Haltbarkeit: 1000", "010_010_000", "Продолжительность: 8 дней", "#1d1d22", "DESERT", "typequest", "#596560", "#86d4e0", "volume", "011_111_010", "#3d2a6e", "#A5A244", "#0c0c0d", "#764eb5", "kit", "#263947", "#16695f", "Schaden an Gebäuden: 1", "sw", " Reward", "#fff", "Durée de vie: 8 jours", "#1f4948", "forest", "This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack.", "opacity", "Durability: 700", "#25c5d6", "Réchauffe en dehors de l'eau et dans l'hiver", "Widget", "#EBF2F0", "#031619", "#665329", "starve_safe", "#171a19", "Communist", "#7c4908", "event", "Durabilité: 1000", "#394841", "#C98435", "Damage: 5", "útil para destruir construções", "spatial", "#af59cd", "Survive without losing life", "nu", "You can not attack when you use it", "#c04933", "110_111_000", "011_011_010", "mousemove", "#C1C0C0", "#0B6A84", "#092813", "pos", "#1e2021", "#59c9c0", "#c7a726", "#133a2b", "010_111_011", "Durability: 400", "#280e09", "nickname_input", "2d", "Sandwich", "010_111_110", "#000", "#1f773d", "#0a2d18", "#e0f2f6", "Защищает от холода вне воды."];
  const f = 20;
  const z = T;
  const y = 15;
  const w = true;
  const P = 6;
  const A = rj;
  const k = 8;
  const x = T;
  const J = 9;
  const M = false;
  const B = -k;
  const D = 19;
  const E = undefined;
  const I = 100;
  const tj = 0;
  const Q = -4;
  const _ = 1;
  const F = 10;
  const R = 255;
  const j = 12;
  const S = P;
  const L = 18;
  const G = 14;
  const O = 7;
  const N = 1 << _;
  const q = 16;
  const H = 4;
  const U = S;
  const W = _ << 11;
  const K = S;
  const V = 11;
  const X = 2;
  const Y = 4096;
  const Z = 3;
  const ee = A;
  const ie = 5;
  const ne = j;
  const oe = 4;
  const re = 4;
  const ae = A;
  const se = J;
  const he = ne;
  const uj = F;
  const ge = oe;
  let le = E;
  let te = E;
  let ue = E;
  let vj = E;
  let wj;
  const xj = D;
  let pe = E;
  const yj = tj;
  let Te;
  const zj = L;
  let ze;
  let Aj = "_";
  let Bj = [];
  let Pe = E;
  const Cj = z;
  let ke = E;
  const Dj = C;
  const Je = k;
  let Me = E;
  let Ej = E;
  const Fj = tj;
  let Ee = E;
  let Gj = E;
  const Hj = M;
  const Qe = q;
  let _e = E;
  const Ij = ie;
  const Re = I;
  const je = w;
  let We = E;
  const Jj = V;
  const Ge = M;
  const Oe = P;
  let Ne;
  let Kj = E;
  let Lj = E;
  const Mj = R;
  let Ye;
  const Nj = X;
  var Ve = bj.Math.acos;
  bj.Math.acos = bj.Math.asin;
  bj.Math.asin = Ve;
  var Xe = bj.Math.cos;
  bj.Math.cos = bj.Math.sin;
  bj.Math.sin = Xe;
  const Ze = Oe;
  const $e = j;
  let ei;
  let Oj;
  const Pj = J;
  let ni = E;
  const Qj = f;
  const ri = E;
  const ai = y;
  let si = ri;
  const Rj = q;
  const li = Hj;
  let gi;
  const Sj = Ij;
  let bi;
  let Tj;
  let Uj;
  let Vj;
  let Wj = E;
  const Xj = ae;
  const Ci = q;
  let Ti;
  let Yj = E;
  let Zj;
  const $j = ge;
  const wi = Z;
  let Pi;
  const _j = Sj;
  let ki = E;
  const ak = G;
  const Ji = O;
  let Mi;
  let bk;
  const ck = _;
  let Ei = ri;
  let dk = ri;
  const ek = Qj;
  const Qi = x;
  const _i = Mj;
  let Fi;
  const fk = Mj;
  const ji = Xj;
  const Wi = D;
  const Li = F;
  let Gi = E;
  const gk = je;
  const Ni = ck;
  const qi = X;
  let Hi;
  let hk;
  const ik = ai;
  const Ki = L;
  let Vi;
  const jk = f;
  let Zi = ri;
  const kk = S;
  let lk;
  let mk = ri;
  const nk = Z;
  const ok = I;
  const pk = G;
  let qk = ri;
  let rk = ri;
  let sk = ri;
  const tk = Nj;
  let uk = 0;
  if (!bj.WebAssembly || !bj.WebAssembly.instantiate) {
    ⵠⵠⲆⲆΔΔΔⵠΔ();
  }
  const vk = pk;
  const wk = Ji;
  const xk = {
    Date: Date
  };
  const yk = Mj;
  const zk = se;
  bj.WebAssembly.instantiate(Uint8Array.from(bj.atob(""), function (a) {
    return a.charCodeAt(Fj);
  }), xk).then(function (a) {
    vj = a.instance;
    le = vj.exports;
    te = le.memory;
    ue = te.buffer;
    wj = le.__pin;
    pe = le.__unpin;
    Te = le.__new;
    ze = le.__collect;
    Aj = "_";
    for (let b = 0; b < 30; b++) {
      Bj[b] = le[Aj + b];
    }
    Pe = le.__rtti_base;
    ke = new Float32Array(ue);
    Ej = new Float64Array(ue);
    Me = new BigUint64Array(ue);
    Ee = new Uint32Array(ue);
    Gj = new Uint16Array(ue);
    _e = new Uint8Array(ue);
    We = new BigInt64Array(ue);
    Kj = new Int32Array(ue);
    Ne = new Int16Array(ue);
    Lj = new Int8Array(ue);
    Zj = Bj[24];
    gi = Bj[27];
    Vi = Bj[17];
    Vj = Bj[9];
    bi = Bj[25];
    Gi = Bj[ak];
    Tj = Bj[2];
    qk = Bj[ai];
    ki = Bj[13];
    Mi = Bj[q];
    Hi = Bj[8];
    rk = Bj[22];
    ni = Bj[10];
    ei = Bj[28];
    Ti = Bj[V];
    Yj = Bj[19];
    bk = Bj[23];
    Ye = Bj[0];
    lk = Bj[20];
    mk = Bj[26];
    si = Bj[zj];
    Pi = Bj[4];
    Wj = Bj[5];
    Ei = Bj[3];
    hk = Bj[6];
    Oj = Bj[29];
    Uj = Bj[7];
    Zi = Bj[12];
    Fi = Bj[1];
    dk = Bj[21];
    uk = 1;
    if (sk) {
      sk();
    }
  });
  const Ak = C;
  const Bk = O;
  const Ck = function (a) {
    return Ee[(Pe + 4 >>> 2) + (a << 1)];
  };
  const Dk = Ki;
  const Ek = _;
  function Fk(a) {
    return 31 - Math.clz32(a >>> K & 31);
  }
  const Gk = Fj;
  const Hk = Je;
  const Ik = V;
  function Jk(a) {
    const b = Ee[a + B >>> 2];
    const c = Ck(b);
    const d = Fk(c);
    let e = c & H ? a : Ee[a + re >>> 2];
    const f = c & N ? Ee[a + he >>> Nj] : Ee[e + Q >>> X] >>> d;
    return Kk(d, c & W, c & Y).subarray(e >>>= d, e + f);
  }
  function Kk(a, b, c) {
    if (c) {
      switch (a) {
        case 2:
          return ke;
        case Z:
          return Ej;
      }
    } else {
      switch (a) {
        case Gk:
          if (b) {
            return Lj;
          } else {
            return _e;
          }
        case _:
          if (b) {
            return Ne;
          } else {
            return Gj;
          }
        case 2:
          if (b) {
            return Kj;
          } else {
            return Ee;
          }
        case wi:
          if (b) {
            return We;
          } else {
            return Me;
          }
      }
    }
  }
  const Lk = M;
  const Mk = ri;
  const Nk = Hk;
  const Ok = "development";
  const Pk = "production";
  const Qk = yk;
  function Rk(a) {
    this.ᐃΔΔⲆ = 2147483648;
    this.a = 1103515245;
    this.c = 12345;
    this.state = a || Math.floor(Math.random() * (this.ᐃΔΔⲆ - 1));
  }
  const Sk = ek;
  Rk.prototype.random = function () {
    this.state = (this.a * this.state + this.c) % this.ᐃΔΔⲆ;
    return this.state / this.ᐃΔΔⲆ;
  };
  Rk.prototype.ⲆᐃⲆⲆΔΔΔ = function (a) {
    this.state = a;
  };
  ᐃⲆᐃΔΔⵠᐃ = 10000;
  const Tk = ae;
  ΔⲆᐃⵠⲆᐃⲆ = [];
  var Uk = new Rk();
  const Vk = ek;
  Uk.ⲆᐃⲆⲆΔΔΔ(new Date().getTime());
  for (var Wk = yj; Wk < ᐃⲆᐃΔΔⵠᐃ; Wk++) {
    ΔⲆᐃⵠⲆᐃⲆ.push(Uk.random());
  }
  function Xk(a, b, c, d) {
    Tj(yw, a, b, c, d);
    const e = eq(xw[Gk], xw[_], xw[qi]);
    (function (b, c, d, e, f, g) {
      Pi(yw, b, c, d, e, f, g);
      const h = fo(xw[et], xw[1], xw[zd]);
      (function (a, b) {
        Ti(yw, a, b);
        const c = Ww(xw[0], xw[Mg], xw[0]);
        fs(xw[1], xw[0], xw[1]);
      })(xw[3], xw[Nh]);
    })(xw[3], xw[tj], xw[1], xw[2], xw[nk], xw[0]);
    return ~(e & 45046) & 45046 | ~(e & 45046) & e;
  }
  function Yk(a, b) {
    const c = ~(a & 27245) & (a | 27245);
    const d = (b | 3129) & ~(b & 3129);
    const e = Yw(c, d, c);
    is(d, c, d, c);
    return ~(e & 16997) & (e | 16997);
  }
  const Zk = Rj;
  const $k = j;
  const _k = Wi;
  const aq = $j;
  const bq = tk;
  const cq = oe;
  function dq(b, c, d) {
    const e = ~(b & 7441) & b | ~(b & 7441) & 7441;
    const f = (c + 55482) % 65353;
    const g = (d + 8146) % 65498;
    const h = function (b, c, d, e, f) {
      const i = ((12384 + b) * 1103515245 + 12345) % 2147483648;
      const j = (16 << (c >> 24 & 255)) + (24 << (c & 255)) + (Gk << (c >> 16 & 255)) + (8 << (c >> 8 & ph));
      const a = ~(d & 25966) & 25966 | ~(d & 25966) & d;
      const k = e ^ 51736;
      const h = (2531011 + (f + 52229) * 214013) % 4294967296;
      const l = Pw(i, j);
      const g = bf(a, k, h, i, j);
      return (1013904223 + (9699 + (l ^ g)) * 1664525) % 4294967296;
    }(e, f, g, e, f);
    Yk(g, e);
    return ~(h & 35474) & h | ~(h & 35474) & 35474;
  }
  function eq(a, b, c) {
    Mi(yw, a, b, c);
    return ((122 + (To(xw[yj], xw[Ni]) ^ To(xw[2], xw[tj]))) * 48271 + 0) % 2147483647;
  }
  const fq = ae;
  function gq(b, c, d, e) {
    const f = ~(b & 59259) & b | ~(b & 59259) & 59259;
    const i = ~(c & 56097) & c | ~(c & 56097) & 56097;
    const j = ((43315 + d) * 1664525 + 1013904223) % 4294967296;
    const a = (Hk << (e >> 24 & 255)) + (32 << (e >> 32 & 255)) + (24 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
    const k = function (c, d, e, f, i, j) {
      const k = c ^ 10715;
      const a = (24 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & 255)) + (8 << (d >> 24 & 255));
      const m = (8 << (e >> 16 & 255)) + (32 << (e >> 24 & 255)) + (16 << (e >> Hk & 255)) + (24 << (e >> 32 & 255));
      const h = f ^ 40782;
      const l = i ^ 41301;
      const g = ~(j & 12091) & (j | 12091);
      const n = kn(k, a, m, h, l, g);
      kn(k, a, m, h, l, g);
      Xn(k, a, m, h, l);
      const b = (n | 3006) & ~(n & 3006);
      return ~(b & 24460) & (b | 24460);
    }(f, i, j, a, f, i);
    const h = ho(j, a, f, i, j);
    kn(a, f, i, j, a, f);
    const l = (1013904223 + (26191 + (k ^ h)) * 1664525) % 4294967296;
    return (l | 38630) & ~(l & 38630);
  }
  function hq(c, e, f, i, j, k) {
    const m = ((39488 + c) * 214013 + 2531011) % 4294967296;
    const a = ~(e & 49976) & e | ~(e & 49976) & 49976;
    const n = ~(f & 35856) & f | ~(f & 35856) & 35856;
    const h = i ^ 52219;
    const l = (j + 3575) % 65503;
    const g = ~(k & 6932) & k | ~(k & 6932) & 6932;
    const o = no(m, a, n, h, l);
    const b = function (c, d, e, f, i, j) {
      const k = c ^ 30142;
      const a = (d + 63025) % 65493;
      const m = e ^ 30777;
      const h = ((45939 + f) * 22695477 + 1) % 4294967296;
      const l = (8 << (i >> 16 & fk)) + (32 << (i >> 24 & 255)) + (24 << (i >> 32 & R)) + (16 << (i >> 8 & 255));
      const g = (j | 45652) & ~(j & 45652);
      const n = no(k, a, m, h, l);
      kq(g, k, a, m, h);
      Ln(l, g, k, a, m, h);
      return n ^ 60048;
    }(g, m, a, n, h, l);
    _n(g, m, a, n, h, l);
    const p = (1013904223 + (60709 + (o ^ b)) * 1664525) % 4294967296;
    return ~(p & 42138) & p | ~(p & 42138) & 42138;
  }
  const iq = F;
  const jq = S;
  function kq(c, d, e, f, i) {
    const j = ((c + 14772) * 2147483629 + 2147483587) % 2147483647;
    const k = d ^ 63080;
    const a = ((e + 60304) * 22695477 + 1) % 4294967296;
    const m = ~(f & 5467) & 5467 | ~(f & 5467) & f;
    const h = (i | 40165) & ~(i & 40165);
    const l = function (b, c, d, e) {
      const f = (b | 57611) & ~(b & 57611);
      const i = ((c + 56889) * 1664525 + 1013904223) % 4294967296;
      const j = d ^ 62842;
      const a = ~(e & 1179) & e | ~(e & 1179) & 1179;
      const k = en(f, i, j, a);
      const h = $n(f, i, j, a);
      gq(f, i, j, a);
      const l = (24 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) >> 16 & 255)) + (16 << ((k ^ h) >> 32 & yk)) + (32 << ((k ^ h) >> Hk & 255));
      return ~(l & 63304) & (l | 63304);
    }(j, k, a, m);
    const g = ho(h, j, k, a, m);
    const n = uo(h, j, k, a, m, h);
    return ((28765 + ((16 << ((l ^ g) >> 24 & _i)) + (8 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> 32 & 255)) + (32 << ((l ^ g) >> 8 & 255)) ^ n)) * 1664525 + 1013904223) % 4294967296;
  }
  function en(a, b, c, d) {
    const e = a ^ 11762;
    const f = ~(b & 19425) & 19425 | ~(b & 19425) & b;
    return ((55182 + (((17757 + ((32 << ((e ^ f) >> 32 & 255)) + (8 << ((e ^ f) >> 8 & 255)) + (24 << ((e ^ f) >> 24 & Mj)) + (16 << ((e ^ f) >> 16 & 255)) ^ (32 << (c >> 16 & 255)) + (Je << (c >> 32 & 255)) + (24 << (c >> 24 & 255)) + (16 << (c >> Hk & 255)))) * 1664525 + 1013904223) % 4294967296 ^ (~(d & 259) & 259 | ~(d & 259) & d))) * 1664525 + 1013904223) % 4294967296;
  }
  function tn(b, c, d, e, f) {
    const i = (32 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)) + (8 << (b >> 32 & 255));
    const j = (c + 39144) % 65406;
    const a = d ^ 34575;
    const k = ~(e & 37841) & e | ~(e & 37841) & 37841;
    const h = (f | 25975) & ~(f & 25975);
    const l = en(i, j, a, k);
    ao(h, i, j, a, k);
    _n(h, i, j, a, k, h);
    return (l | 19326) & ~(l & 19326) ^ 36297;
  }
  function nn(c, d, e, f, i) {
    const j = (12345 + (23101 + c) * 1103515245) % 2147483648;
    const k = d ^ 58614;
    const a = ((e + 45267) * 214013 + 2531011) % 4294967296;
    const m = f ^ 40810;
    const h = (24 << (i >> 24 & 255)) + (8 << (i >> 32 & 255)) + (32 << (i >> 8 & 255)) + (16 << (i >> 16 & 255));
    const l = lo(j, k);
    const g = gq(a, m, h, j);
    (function (b, c, d, e) {
      const f = (b + 34282) % 65336;
      const i = ~(c & 45181) & 45181 | ~(c & 45181) & c;
      const j = (16 << (d >> 8 & fk)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 16 & 255));
      const a = ~(e & 25475) & 25475 | ~(e & 25475) & e;
      const k = function (a, b) {
        const c = ~(a & 41406) & a | ~(a & 41406) & 41406;
        const d = ((b + 17922) * 1103515245 + 12345) % 2147483648;
        const e = bo(c, d, c);
        Bn(d, c, d, c);
        return ((42346 + (e ^ 18573 ^ tn(d, c, d, c, d))) * 2147483629 + 2147483587) % 2147483647;
      }(f, i);
      const h = ao(j, a, f, i, j);
      lo(a, f);
      const l = (58498 + (k ^ h)) % 65531;
    })(k, a, m, h);
    const n = (24 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> Zk & 255)) + (8 << ((l ^ g) >> 32 & 255)) + (16 << ((l ^ g) >> 8 & 255));
    return ~(n & 13644) & n | ~(n & 13644) & 13644;
  }
  const on = Zk;
  const rn = je;
  const an = Sk;
  const sn = Ak;
  const hn = xj;
  function ln(b, c, d, e, f) {
    const i = (24 << (b >> 24 & 255)) + (32 << (b >> Ci & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 32 & 255));
    const j = (12345 + (c + 3024) * 1103515245) % 2147483648;
    const a = (8 << (d >> 8 & 255)) + (32 << (d >> 32 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & 255));
    const k = (1 + (e + 41324) * 22695477) % 4294967296;
    const h = (f | 19607) & ~(f & 19607);
    const l = to(i, j);
    ao(a, k, h, i, j);
    Ln(a, k, h, i, j, a);
    const g = ~(l & 49323) & 49323 | ~(l & 49323) & l;
    return ~(g & 46567) & (g | 46567);
  }
  const gn = se;
  const un = Ij;
  const bn = ok;
  const vn = M;
  const dn = V;
  function cn(c, d, e, f, i, j) {
    const m = (1013904223 + (c + 28824) * 1664525) % 4294967296;
    const a = (1013904223 + (13210 + d) * 1664525) % 4294967296;
    const n = ~(e & 32165) & 32165 | ~(e & 32165) & e;
    const h = (24 << (f >> 24 & 255)) + (Qe << (f >> Je & 255)) + (8 << (f >> 16 & Qk)) + (32 << (f >> 32 & 255));
    const l = (1 + (39199 + i) * 22695477) % 4294967296;
    const g = j ^ 33037;
    const o = function (b, c, d) {
      const e = (12345 + (39051 + b) * 1103515245) % 2147483648;
      const f = (c | 44117) & ~(c & 44117);
      const g = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & 255));
      const i = Fn(e, f, g, e, f);
      const a = uo(g, e, f, g, e, f);
      const j = function (a, b) {
        const c = (16 << (a >> 8 & 255)) + (32 << (a >> 16 & 255)) + (8 << (a >> 32 & 255)) + (24 << (a >> 24 & 255));
        const d = (32 << (b >> 32 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> fn & 255));
        const e = Ln(c, d, c, d, c, d);
        (function (b, c, d, e, f) {
          const i = b ^ 64570;
          const j = (2531011 + (c + 41768) * 214013) % 4294967296;
          const a = (1013904223 + (d + 43923) * 1664525) % 4294967296;
          const m = (16 << (e >> 32 & 255)) + (k << (e >> 24 & 255)) + (32 << (e >> 16 & 255)) + (24 << (e >> 8 & 255));
          const h = (f | 21896) & ~(f & 21896);
          const l = function (a, b) {
            const c = ((a + 49468) * 1103515245 + 12345) % 2147483648;
            const d = ((b + 30513) * 214013 + 2531011) % 4294967296;
            const e = function (b, c, d) {
              const e = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
              const f = (c | 55665) & ~(c & 55665);
              const g = (d + 54633) % 65404;
              const h = kq(e, f, g, e, f);
              (function (c, e, f, i, j, k) {
                const m = (2531011 + (c + 16955) * 214013) % 4294967296;
                const a = ((9436 + e) * 1103515245 + 12345) % 2147483648;
                const n = (f | 14774) & ~(f & 14774);
                const h = (i | 48802) & ~(i & 48802);
                const l = ~(j & 24998) & (j | 24998);
                const g = (Kn << (k >> 8 & 255)) + (16 << (k >> 16 & 255)) + (32 << (k >> 32 & 255)) + (24 << (k >> 24 & 255));
                const o = Tn(m, a, n, h);
                const b = ao(l, g, m, a, n);
                const p = Tn(h, l, g, m);
              })(g, e, f, g, e, f);
              $n(g, e, f, g);
              return ~(h & 43875) & (h | 43875) ^ 15116;
            }(c, d, c);
            Xn(d, c, d, c, d);
            en(c, d, c, d);
            return (e | 17943) & ~(e & 17943) ^ 21791;
          }(i, j);
          Bn(a, m, h, i);
          const g = ln(j, a, m, h, i);
        })(c, d, c, d, c);
        to(d, c);
        return (e | 58283) & ~(e & 58283) ^ 8337;
      }(g, e);
      const h = (16 << ((i ^ a) >> 32 & yk)) + (24 << ((i ^ a) >> 24 & 255)) + (32 << ((i ^ a) >> k & 255)) + (8 << ((i ^ a) >> 16 & Un));
      return (Hk << ((h ^ j) >> 32 & R)) + (Rj << ((h ^ j) >> 8 & 255)) + (32 << ((h ^ j) >> 16 & 255)) + (24 << ((h ^ j) >> 24 & 255));
    }(m, a, n);
    $n(h, l, g, m);
    return ((34159 + (o ^ 2959 ^ Tn(a, n, h, l))) * 1103515245 + 12345) % 2147483648;
  }
  const mn = sn;
  const pn = Re;
  const Cn = vk;
  function Tn(b, c, d, e) {
    const f = ~(b & 33107) & (b | 33107);
    const g = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & Mj));
    const i = ~(d & 32053) & (d | 32053);
    const a = e ^ 12240;
    const j = function (b, c, d, e) {
      const f = (32 << (b >> 32 & 255)) + (16 << (b >> fn & 255)) + (24 << (b >> 24 & 255)) + (k << (b >> 8 & 255));
      const i = (1 + (50595 + c) * 22695477) % 4294967296;
      const j = ~(d & 40066) & d | ~(d & 40066) & 40066;
      const a = e ^ 18768;
      const m = no(f, i, j, a, f);
      const h = nn(i, j, a, f, i);
      const l = jn(j, a);
      return ((16767 + ((2531011 + (35287 + (m ^ h)) * 214013) % 4294967296 ^ l)) * 1664525 + 1013904223) % 4294967296;
    }(f, g, i, a);
    $n(f, g, i, a);
    return (2531011 + (44352 + ((~(j & 64131) & 64131 | ~(j & 64131) & j) ^ no(f, g, i, a, f))) * 214013) % 4294967296;
  }
  const fn = on;
  const zn = Dk;
  const yn = aq;
  const wn = D;
  const Pn = f;
  const An = tj;
  function kn(b, c, d, e, f, i) {
    const j = ~(b & 36133) & (b | 36133);
    const a = (c | 13670) & ~(c & 13670);
    const k = (d | 31390) & ~(d & 31390);
    const h = e ^ 64081;
    const l = f ^ 7550;
    const g = (2147483587 + (i + 63950) * 2147483629) % 2147483647;
    return (12345 + (36760 + (((62552 + (so(j, a, k, h, l) ^ $n(g, j, a, k))) * 2147483629 + 2147483587) % 2147483647 ^ Xn(h, l, g, j, a))) * 1103515245) % 2147483648;
  }
  const xn = Tk;
  const Jn = Hj;
  const Mn = wk;
  function Bn(b, c, d, e) {
    const f = (b | 15432) & ~(b & 15432);
    const g = c ^ 12315;
    const i = d ^ 38714;
    const a = e ^ 58084;
    const j = hq(f, g, i, a, f, g);
    $n(i, a, f, g);
    return ((34681 + ((~(j & 41134) & j | ~(j & 41134) & 41134) ^ _n(i, a, f, g, i, a))) * 214013 + 2531011) % 4294967296;
  }
  const Dn = hn;
  const En = ai;
  const In = iq;
  const Sn = wn;
  const Qn = Z;
  function _n(b, c, d, e, f, g) {
    const i = b ^ 23409;
    const a = c ^ 26380;
    const j = ((f + 33017) * 1103515245 + 12345) % 2147483648;
    const h = g ^ 42490;
    return ((19056 + (en(i, a, d ^ 53590, e ^ 36633) ^ en(j, h, i, a))) * 22695477 + 1) % 4294967296;
  }
  function Fn(b, c, d, e, f) {
    const i = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
    const j = ~(c & 7703) & c | ~(c & 7703) & 7703;
    const a = (d | 31275) & ~(d & 31275);
    const k = ~(e & 25693) & 25693 | ~(e & 25693) & e;
    const h = (8 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f >> 32 & 255));
    const l = _n(i, j, a, k, h, i);
    const g = en(j, a, k, h);
    bo(i, j, a);
    return (24 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 32 & 255)) ^ 31710;
  }
  const Rn = Z;
  function jn(b, c) {
    const d = (2531011 + (b + 62874) * 214013) % 4294967296;
    const e = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> fn & 255));
    const f = _n(d, e, d, e, d, e);
    const g = _n(d, e, d, e, d, e);
    en(d, e, d, e);
    const h = (16 << ((f ^ g) >> 32 & R)) + (8 << ((f ^ g) >> 24 & R)) + (24 << ((f ^ g) >> 16 & 255)) + (32 << ((f ^ g) >> 8 & R));
    return ~(h & 55949) & 55949 | ~(h & 55949) & h;
  }
  const Wn = Cn;
  function Ln(c, d, e, f, i, j) {
    const m = (24 << (c >> 24 & 255)) + (32 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (k << (c >> 32 & 255));
    const a = (d | 41551) & ~(d & 41551);
    const n = (24 << (e >> 24 & yk)) + (16 << (e >> 32 & _i)) + (k << (e >> 16 & R)) + (32 << (e >> 8 & 255));
    const h = ~(f & 32641) & (f | 32641);
    const l = ((i + 35582) * 214013 + 2531011) % 4294967296;
    const g = ~(j & 1090) & (j | 1090);
    const o = uo(m, a, n, h, l, g);
    tn(m, a, n, h, l);
    en(g, m, a, n);
    const b = ~(o & 8077) & 8077 | ~(o & 8077) & o;
    return ~(b & 3708) & (b | 3708);
  }
  const Gn = Mk;
  const On = tk;
  const Nn = Ji;
  const qn = Jj;
  const Hn = Z;
  const Un = Mj;
  const Yn = gk;
  const Kn = Je;
  const Vn = Qi;
  function Xn(b, c, d, e, f) {
    const i = (2147483587 + (b + 64762) * 2147483629) % 2147483647;
    const j = ((18197 + c) * 214013 + 2531011) % 4294967296;
    const a = (2531011 + (22845 + d) * 214013) % 4294967296;
    const m = (32 << (e >> 16 & fk)) + (16 << (e >> 8 & 255)) + (8 << (e >> 32 & 255)) + (24 << (e >> 24 & 255));
    const h = ~(f & 11999) & f | ~(f & 11999) & 11999;
    const l = _n(i, j, a, m, h, i);
    const g = Ln(j, a, m, h, i, j);
    en(a, m, h, i);
    return (k << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> Kn & 255)) + (32 << ((l ^ g) >> 32 & 255)) ^ 35444;
  }
  const Zn = y;
  function $n(b, c, d, e) {
    const f = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
    const g = c ^ 57623;
    const i = ~(d & 40280) & d | ~(d & 40280) & 40280;
    const a = ~(e & 24601) & e | ~(e & 24601) & 24601;
    const j = to(f, g);
    to(i, a);
    ho(f, g, i, a, f);
    const h = ~(j & 43902) & 43902 | ~(j & 43902) & j;
    return (h | 8862) & ~(h & 8862);
  }
  const eo = gn;
  const io = sn;
  function to(a, b) {
    const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
    const d = b ^ 53080;
    return (1 + (57525 + ((17769 + (so(c, d, c, d, c) ^ ao(d, c, d, c, d))) % 65357 ^ en(c, d, c, d))) * 22695477) % 4294967296;
  }
  function no(b, c, d, e, f) {
    const i = b ^ 62008;
    const j = (24 << (c >> 32 & 255)) + (8 << (c >> 16 & 255)) + (32 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
    const a = ((d + 46531) * 22695477 + _) % 4294967296;
    const k = ~(e & 1884) & 1884 | ~(e & 1884) & e;
    const h = ~(f & 55588) & 55588 | ~(f & 55588) & f;
    const l = kq(i, j, a, k, h);
    uo(i, j, a, k, h, i);
    return ((3037 + (l ^ 57467 ^ ho(j, a, k, h, i))) * 1664525 + 1013904223) % 4294967296;
  }
  const oo = Wn;
  const ro = fq;
  function ao(b, c, d, e, f) {
    const i = ~(b & 42203) & b | ~(b & 42203) & 42203;
    const j = c ^ 50118;
    const a = d ^ 41620;
    const k = ((e + 34240) * 2147483629 + 2147483587) % 2147483647;
    const h = (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
    const l = uo(i, j, a, k, h, i);
    uo(j, a, k, h, i, j);
    return (2531011 + (53616 + ((l | 43477) & ~(l & 43477) ^ en(a, k, h, i))) * 214013) % 4294967296;
  }
  function so(c, d, e, f, i) {
    const j = (Zk << (c >> 32 & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const k = d ^ 55978;
    const a = ((e + 2934) * 1664525 + 1013904223) % 4294967296;
    const m = ~(f & 30642) & (f | 30642);
    const h = (8 << (i >> 8 & R)) + (24 << (i >> 32 & 255)) + (16 << (i >> 24 & 255)) + (32 << (i >> 16 & 255));
    const l = ao(j, k, a, m, h);
    const g = Xn(j, k, a, m, h);
    en(j, k, a, m);
    const n = (16 << ((l ^ g) >> 32 & 255)) + (24 << ((l ^ g) >> 8 & 255)) + (8 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & 255));
    return ~(n & 23686) & (n | 23686);
  }
  function ho(c, d, e, f, i) {
    const j = ((c + 49173) * 1103515245 + 12345) % 2147483648;
    const k = (d + 52922) % 65337;
    const a = e ^ 25250;
    const m = ~(f & 10903) & 10903 | ~(f & 10903) & f;
    const h = ~(i & 33814) & 33814 | ~(i & 33814) & i;
    const l = tn(j, k, a, m, h);
    const g = lo(j, k);
    tn(a, m, h, j, k);
    const n = (1 + (19675 + (l ^ g)) * 22695477) % 4294967296;
    return ~(n & 7922) & n | ~(n & 7922) & 7922;
  }
  function lo(b, c) {
    const d = b ^ 24508;
    const e = (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
    const f = ln(d, e, d, e, d);
    const g = so(e, d, e, d, e);
    Fn(d, e, d, e, d);
    const h = ((11269 + (f ^ g)) * 2147483629 + 2147483587) % 2147483647;
    return ~(h & 40927) & 40927 | ~(h & 40927) & h;
  }
  const go = xn;
  function uo(b, c, d, e, f, i) {
    const j = d ^ 8102;
    const a = (24 << (e >> 16 & 255)) + (32 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (16 << (e >> Hk & fk));
    const k = ~(f & 29687) & 29687 | ~(f & 29687) & f;
    const h = (Ek + (62237 + i) * 22695477) % 4294967296;
    const l = jn((b + 52483) % 65496, (Ci << (c >> 16 & 255)) + (24 << (c >> 8 & Mj)) + (32 << (c >> 24 & 255)) + (8 << (c >> 32 & 255)));
    const g = jn(j, a);
    jn(k, h);
    return (45290 + (l ^ g)) % 65334 ^ 55575;
  }
  function bo(b, c, d) {
    const e = b ^ 23323;
    const f = (2531011 + (61713 + c) * 214013) % 4294967296;
    const g = (d | 24198) & ~(d & 24198);
    const h = ln(e, f, g, e, f);
    const a = ln(g, e, f, g, e);
    ln(f, g, e, f, g);
    return (16 << ((h ^ a) >> 32 & 255)) + (8 << ((h ^ a) >> 8 & 255)) + (24 << ((h ^ a) >> 24 & 255)) + (32 << ((h ^ a) >> 16 & 255)) ^ 31181;
  }
  const vo = j;
  const co = oe;
  function mo(a, b, c, d, e) {
    dk(yw, a, b, c, d, e);
    return (62878 + (vw(xw[0], xw[Ek], xw[Nj], xw[3], xw[4]) ^ function (b, c, d, e, f) {
      ni(yw, b, c, d, e, f);
      const g = df(xw[0], xw[1]);
      const h = function (a, b, c) {
        ei(yw, a, b, c);
        const d = fs(xw[fg], xw[1], xw[Nr]);
        (function (a, b, c, d, e) {
          mk(yw, a, b, c, d, e);
          const f = To(xw[yj], xw[Kg]);
          df(xw[2], xw[Jd]);
        })(xw[Rl], xw[sl], xw[2], xw[0], xw[1]);
        return ~(d & 40511) & d | ~(d & 40511) & 40511;
      }(xw[On], xw[Rn], xw[$j]);
      return ((116 + (g ^ h)) * 75 + 74) % 65537;
    }(xw[yj], xw[_], xw[2], xw[nk], xw[$j]))) % 65331;
  }
  const po = zj;
  const Co = Ek;
  function To(a, b) {
    Vi(yw, a, b);
    const c = tf(xw[tj], xw[1], xw[Fj], xw[ck], xw[0]);
    vw(xw[Ek], xw[0], xw[Ek], xw[An], xw[Ek]);
    return c ^ 31083;
  }
  function fo(a, b, c) {
    ki(yw, a, b, c);
    const d = To(xw[0], xw[Co]);
    const e = eq(xw[2], xw[Gk], xw[Ni]);
    return (24 << ((d ^ e) & 255)) + (0 << ((d ^ e) >> Qe & 255)) + (16 << ((d ^ e) >> 24 & yk)) + (8 << ((d ^ e) >> 8 & 255));
  }
  ᐃΔᐃⵠ = {
    ⲆⲆᐃⲆᐃᐃᐃ: () => new Promise((a, b) => {
      bj.grecaptcha.ready(function () {
        bj.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
          action: "validate_recaptcha"
        }).then(function (b) {
          a(b);
        }).catch(c => {
          if (iw) {
            a(yj);
          } else {
            console.log(undefined);
            b(c);
          }
        });
      });
    }),
    ⵠⵠᐃΔⲆΔΔⵠⵠ: function (a) {
      bj.open(a, "_blank").focus();
    },
    ⲆⲆⲆΔᐃⵠΔ: function (a) {
      bj.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
    },
    ⲆᐃΔⲆⲆⲆᐃ: function (a, b) {
      for (var c in a) {
        if (a[c] != b[c]) {
          return Lk;
        }
      }
      return gk;
    },
    ᐃⲆⲆⲆΔⲆⲆΔΔ: function (a, b) {
      if (a.length != b.length) {
        return M;
      }
      for (var c = Fj; c < a.length; c++) {
        if (typeof a == "object") {
          if (!this.ⲆᐃΔⲆⲆⲆᐃ(a[c], b[c])) {
            return Ge;
          }
        } else if (a[c] != b[c]) {
          return Hj;
        }
      }
      return true;
    },
    ΔΔⵠΔⵠΔΔ: function (a, b) {
      b.x = a.x;
      b.y = a.y;
    },
    ᐃⲆⵠΔᐃΔⲆ: function (a, b) {
      return {
        x: a.x - b.x,
        y: a.y - b.y
      };
    },
    ΔⵠⲆⵠⲆΔΔⲆⲆ: function (a, b) {
      a.x *= b;
      a.y *= b;
    },
    ⵠᐃⵠⲆⲆⵠⲆ: function (a, b) {
      return a.x * b.x + a.y * b.y;
    },
    ⵠⵠⲆⵠⵠⵠⵠ: function (a) {
      return Math.sqrt(a.x * a.x + a.y * a.y);
    },
    sign: function (a) {
      if (a < yj) {
        return -1;
      } else {
        return Ek;
      }
    },
    ᐃΔΔᐃΔⲆᐃ: function (a, b) {
      return a.x * b.y - a.y * b.x;
    },
    ⲆΔⲆΔⲆΔⵠ: function (a, b, c, d) {
      var e = d - b;
      var f = c - a;
      return Math.atan2(e, f);
    },
    ⵠΔΔⵠⵠΔⵠ: function (a, b) {
      return Math.asin(this.ⵠᐃⵠⲆⲆⵠⲆ(a, b) / (this.ⵠⵠⲆⵠⵠⵠⵠ(a) * this.ⵠⵠⲆⵠⵠⵠⵠ(b))) * this.sign(this.ᐃΔΔᐃΔⲆᐃ(a, b));
    },
    ⵠᐃᐃᐃⵠⲆΔ: function (a) {
      ᐃᐃⵠΔΔⲆⵠ = location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ᐃᐃⵠΔΔⲆⵠ);
      if (b === null) {
        return null;
      } else {
        return b[ck];
      }
    },
    ᐃᐃⲆⵠᐃⲆᐃ: function (a, b) {
      var c = Math.PI * 2;
      b = (b % c + c) % c;
      if (Math.abs(a - b) > Math.PI) {
        if (a > b) {
          return b + c;
        } else {
          return b - c;
        }
      } else {
        return b;
      }
    },
    ΔⲆᐃⲆⵠᐃΔ: function (a, b) {
      return this.ⵠΔΔⵠⵠΔⵠ({
        x: 1,
        y: tj
      }, this.ᐃⲆⵠΔᐃΔⲆ(a, b));
    },
    ⵠⵠΔᐃ: function (a, b) {
      return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
    },
    ΔⲆⵠⵠⲆᐃΔ: function (a, b) {
      return {
        x: Math.sin(b) * a,
        y: Math.cos(b) * a
      };
    },
    ΔᐃⲆⵠⵠⵠΔ: function (a, b) {
      a.x += b.x;
      a.y += b.y;
    },
    ⲆⵠⲆᐃⵠΔⲆ: function (a, b) {
      a.x -= b.x;
      a.y -= b.y;
    },
    ⵠⲆⵠΔⵠⲆⵠΔⲆ: function (a, b, c) {
      a.x += b;
      a.y += c;
    },
    ΔᐃⲆⲆⵠⵠᐃⲆΔ: function (a, b, c) {
      return {
        x: a.x + b,
        y: a.y + c
      };
    },
    ⲆΔⵠⲆΔ: function (a, b, c) {
      a.x += Math.sin(c) * b;
      a.y += Math.cos(c) * b;
    },
    ⵠᐃΔᐃΔⵠⲆ: function (a, b) {
      return Math.floor((a - b) / X);
    },
    ⵠᐃⵠᐃⵠⵠΔ: function (a, b) {
      return {
        x: (a.x + b.x) / X,
        y: (a.y + b.y) / 2
      };
    },
    ⵠⲆΔΔΔⲆᐃ: function () {
      if (Math.random() > 0.5) {
        return 1;
      } else {
        return -1;
      }
    },
    ⵠⵠⵠᐃⵠⲆΔⲆᐃ: function (a, b, c) {
      var d = this.ⵠⲆΔΔΔⲆᐃ();
      var e = this.ⵠⲆΔΔΔⲆᐃ();
      var f = Math.random() * Math.PI / bq;
      return {
        x: Math.floor(a + Math.sin(f) * d * c),
        y: Math.floor(b + Math.cos(f) * e * c)
      };
    },
    ⵠⵠᐃᐃΔᐃⵠⲆᐃ: function (a, b, c, d) {
      this.x = a;
      this.y = b;
      this.w = c;
      this.ⵠΔⲆ = d;
    },
    ΔᐃⵠΔⲆΔᐃΔⵠ: function (a) {
      ΔΔΔ = [];
      ΔΔΔ.push.apply(ΔΔΔ, a);
      var b = [];
      while (ΔΔΔ.length > An) {
        var c = Math.floor(Math.random() * ΔΔΔ.length);
        b.push(ΔΔΔ[c]);
        ΔΔΔ.splice(c, 1);
      }
      return b;
    },
    ᐃΔᐃⵠⵠⲆⵠ: function (a) {
      if (a >= 20000) {
        a = (a - 20000) * 1000;
      } else if (a >= 10000) {
        a = (a - 10000) * Re;
      }
      return a;
    },
    ΔⵠⲆⲆⵠⵠᐃ: function (a) {
      if (typeof a !== "number") {
        return "0";
      }
      if (a >= 10000) {
        var b = Math.floor(Math.log10(a)) - tk;
        var c = Math.max(Fj, 3 - b);
        var d = Math.floor(a / 1000).toString();
        if (c) {
          for (var e = (d += "." + (a % 1000 / 1000).toString().substring(tk).substring(An, c)).length - 1, f = tj; e > Gk && d[e] == "0"; e--) {
            f++;
          }
          if ((d = d.substring(0, d.length - f))[d.length - Co] == ".") {
            d = d.substring(0, d.length - _);
          }
        }
        return d += "k";
      }
      return a.toString();
    },
    ᐃᐃⲆᐃᐃΔⲆ: function (a) {
      return a * (2 - a);
    },
    ᐃᐃⲆᐃⲆᐃⵠ: function (a) {
      return --a * a * a + 1;
    },
    ⵠⵠΔⲆᐃ: function (a) {
      if (a < 0.5) {
        return a * 2 * a;
      } else {
        return (ge - Nj * a) * a - 1;
      }
    },
    ⲆⵠⵠΔΔⲆΔ: function (a) {
      if (a < 0.5) {
        return a * 4 * a * a;
      } else {
        return (a - 1) * (a * 2 - 2) * (X * a - tk) + 1;
      }
    },
    ᐃᐃⲆⲆⵠⵠⵠⵠⲆ: function (a) {
      if (a < 0.5) {
        return a * 8 * a * a * a;
      } else {
        return 1 - --a * 8 * a * a * a;
      }
    },
    ΔΔΔⲆᐃⲆΔ: function (a) {
      return Ek - --a * a * a * a;
    },
    ⲆⲆⲆⲆⵠⵠᐃ: function (a) {
      return 1 + --a * a * a * a * a;
    },
    ᐃⵠⵠΔ: function (a, b, c, d, e, f) {
      this.ⵠᐃᐃ = a;
      this.ᐃⲆⵠ = b;
      this.max = c;
      this.min = d;
      this.ΔⵠⵠⲆⵠⵠⵠ = e;
      this.ΔᐃΔⵠᐃᐃⲆ = f;
      this.ΔΔⲆⲆⲆΔΔ = 0;
      this.ⲆᐃⲆ = function () {
        if (this.ⵠᐃᐃ) {
          if ((a = this.ᐃⲆⵠ + hx * this.ΔⵠⵠⲆⵠⵠⵠ) > this.max) {
            this.ᐃⲆⵠ = this.max;
            this.ⵠᐃᐃ = false;
            return rn;
          }
          this.ᐃⲆⵠ = a;
        } else {
          var a;
          if ((a = this.ᐃⲆⵠ - hx * this.ΔᐃΔⵠᐃᐃⲆ) < this.min) {
            this.ᐃⲆⵠ = this.min;
            this.ⵠᐃᐃ = rn;
          } else {
            this.ᐃⲆⵠ = a;
          }
        }
      };
      return vn;
    },
    ⵠᐃⵠⵠⵠ: function (a, b, c, d, e, f) {
      this.ⲆⵠᐃⵠⲆ = a;
      this.ᐃᐃᐃⲆⲆ = b;
      this.Δⵠⵠⵠᐃ = c;
      this.ⲆΔᐃⲆⲆ = d;
      this.x = e;
      this.ⵠⵠⲆΔΔ = f;
      this.ⲆΔⲆⲆⲆⲆⵠ = function () {
        this.x = this.ΔⵠⵠⵠΔⵠⲆⵠΔ;
        this.ᐃᐃᐃⲆⲆ = 0;
      };
      this.ᐃⵠᐃᐃΔᐃᐃ = function (a) {
        if (a !== this.ⵠⵠⲆΔΔ) {
          this.ⵠⵠⲆΔΔ = a;
          this.ⲆΔᐃⲆⲆ = this.x;
          this.ᐃᐃᐃⲆⲆ = 0;
        }
        if (this.ⵠⵠⲆΔΔ !== this.x) {
          this.ᐃᐃᐃⲆⲆ += hx;
          if (this.ᐃᐃᐃⲆⲆ > this.Δⵠⵠⵠᐃ) {
            this.x = this.ⵠⵠⲆΔΔ;
          } else {
            var b = this.ⲆⵠᐃⵠⲆ(this.ᐃᐃᐃⲆⲆ / this.Δⵠⵠⵠᐃ);
            this.x = this.ⲆΔᐃⲆⲆ + (this.ⵠⵠⲆΔΔ - this.ⲆΔᐃⲆⲆ) * b;
          }
        }
      };
    },
    ⲆΔⲆΔⵠⵠⵠ: function (b, c, d, e, f, g, i, a, j) {
      this.ⲆⵠᐃⵠⲆ = b;
      this.ᐃᐃᐃⲆⲆ = c;
      this.Δⵠⵠⵠᐃ = d;
      this.ⲆΔᐃⲆⲆ = e;
      this.ⵠᐃΔⲆⵠ = f;
      this.x = g;
      this.y = i;
      this.ⵠⵠⲆΔΔ = a;
      this.ᐃᐃᐃⵠⵠⲆⵠ = j;
      this.ᐃⵠᐃᐃΔᐃᐃ = function (a) {
        if (a.x != this.ⵠⵠⲆΔΔ || a.y != this.ᐃᐃᐃⵠⵠⲆⵠ) {
          this.ⵠⵠⲆΔΔ = a.x;
          this.ᐃᐃᐃⵠⵠⲆⵠ = a.y;
          this.ⲆΔᐃⲆⲆ = this.x;
          this.ⵠᐃΔⲆⵠ = this.y;
          this.ᐃᐃᐃⲆⲆ = tj;
        }
        if (this.ⵠⵠⲆΔΔ != this.x || this.ᐃᐃᐃⵠⵠⲆⵠ != this.y) {
          this.ᐃᐃᐃⲆⲆ += hx;
          if (this.ᐃᐃᐃⲆⲆ > this.Δⵠⵠⵠᐃ) {
            this.x = this.ⵠⵠⲆΔΔ;
            this.y = this.ᐃᐃᐃⵠⵠⲆⵠ;
          } else {
            var b = this.ⲆⵠᐃⵠⲆ(this.ᐃᐃᐃⲆⲆ / this.Δⵠⵠⵠᐃ);
            this.x = this.ⲆΔᐃⲆⲆ + (this.ⵠⵠⲆΔΔ - this.ⲆΔᐃⲆⲆ) * b;
            this.y = this.ⵠᐃΔⲆⵠ + (this.ᐃᐃᐃⵠⵠⲆⵠ - this.ⵠᐃΔⲆⵠ) * b;
          }
        }
      };
    },
    ΔⵠΔⲆⵠⵠΔ: function (a) {
      var b = "";
      for (var c = 0; c < a; c++) {
        b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
      }
      return b;
    },
    ΔⲆΔᐃΔᐃⲆ: function (a, b) {
      b ||= location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
      if (c == null) {
        return null;
      } else {
        return c[Ek];
      }
    },
    ΔΔⵠⲆⵠ: function (a) {
      let b = "";
      const c = a.length;
      for (let d = tj; d < c; d++) {
        b += String.fromCharCode(a[d]);
      }
      return b;
    },
    ⵠᐃΔΔᐃⲆΔ: function (a, b) {
      return a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.ⵠΔⲆ && je;
    },
    ⵠⲆⵠⵠᐃΔⲆ: function (b, c, d, e, f, g, h, a) {
      if (Math.max(b, f) < Math.min(c, g) && Math.max(d, h) < Math.min(e, a)) {
        return _;
      } else {
        return 0;
      }
    },
    ΔΔᐃᐃᐃΔΔ: function (a, b, c) {
      return (Co - c) * a + c * b;
    },
    ΔⵠⲆⲆⲆⵠΔ: function (a) {
      return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }
  };
  Math.sign = Math.sign || function (a) {
    if (a === yj) {
      return 0;
    } else if (a > 0) {
      return _;
    } else {
      return -Ek;
    }
  };
  const zo = eo;
  Math.log10 = Math.log10 || function (a) {
    return Math.log(a) / Math.ΔⲆⲆᐃⲆⲆⲆⲆΔ;
  };
  const yo = Yn;
  const wo = Kn;
  (function (a) {
    var b = Jn;
    if (typeof ⵠᐃⵠᐃⵠΔΔ === "function" && ⵠᐃⵠᐃⵠΔΔ.ⵠⵠⲆΔⵠᐃⵠ) {
      ⵠᐃⵠᐃⵠΔΔ(a);
      b = true;
    }
    if (typeof ⵠᐃᐃΔΔΔⲆ === "object") {
      ΔⵠⵠΔᐃⵠΔΔᐃ.exports = a();
      b = je;
    }
    if (!b) {
      var c = bj.ⵠⲆⲆᐃ;
      var d = bj.ⵠⲆⲆᐃ = a();
      d.ⲆⲆᐃΔⵠΔⵠⵠᐃ = function () {
        bj.ⵠⲆⲆᐃ = c;
        return d;
      };
    }
  })(function () {
    function b() {
      for (var a = 0, b = {}; a < arguments.length; a++) {
        var c = arguments[a];
        for (var d in c) {
          b[d] = c[d];
        }
      }
      return b;
    }
    return function a(c) {
      function d(e, f, j) {
        var k;
        if (typeof document !== "undefined") {
          if (arguments.length > 1) {
            j = b({
              path: "/"
            }, d.ΔⵠᐃⵠⲆⲆⲆ, j);
            if (typeof j.expires === "number") {
              var m = new Date();
              m.setMilliseconds(m.getMilliseconds() + j.expires * 86400000);
              j.expires = m;
            }
            try {
              k = JSON.stringify(f);
              if (/^[\{\[]/.test(k)) {
                f = k;
              }
            } catch (a) {}
            f = c.write ? c.write(f, e) : encodeURIComponent(String(f)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
            e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
            return document.cookie = [e, "=", f, j.expires ? "; expires=" + j.expires.toUTCString() : "", j.path ? "; path=" + j.path : "", j.domain ? "; domain=" + j.domain : "", j.ᐃΔⲆⵠⲆⵠΔⵠᐃ ? "; secure" : ""].join("");
          }
          if (!e) {
            k = {};
          }
          for (var n = document.cookie ? document.cookie.split("; ") : [], h = /(%[0-9A-Z]{2})+/g, l = 0; n.length > l; l++) {
            var p = n[l].split("=");
            var q = p.slice(Ek).join("=");
            if (q.charAt(Gk) === "\"") {
              q = q.slice(Ek, -1);
            }
            try {
              var s = p[yj].replace(h, decodeURIComponent);
              q = c.read ? c.read(q, s) : c(q, s) || q.replace(h, decodeURIComponent);
              if (this.json) {
                try {
                  q = JSON.parse(q);
                } catch (a) {}
              }
              if (e === s) {
                k = q;
                break;
              }
              if (!e) {
                k[s] = q;
              }
            } catch (a) {}
          }
          return k;
        }
      }
      d.set = d;
      d.get = function (a) {
        return d.call(d, a);
      };
      d.ⵠⵠᐃᐃᐃᐃⲆⵠⵠ = function () {
        return d.apply({
          json: w
        }, [].slice.call(arguments));
      };
      d.ΔⵠᐃⵠⲆⲆⲆ = {};
      d.remove = function (a, c) {
        d(a, "", b(c, {
          expires: -Ni
        }));
      };
      d.ⵠⵠᐃⵠΔᐃᐃᐃⵠ = a;
      return d;
    }(function () {});
  });
  const Po = xj;
  const Ao = ri;
  const ko = ie;
  const xo = I;
  var Jo = document.getElementById("game_canvas");
  var Mo = Jo.getContext("2d");
  const Bo = Ge;
  var Do = Jo.width;
  var lq = Jo.height;
  var mq = Jo.width / 2;
  const nq = Wn;
  var Qo = Jo.height / 2;
  const oq = jq;
  var Fo = {
    x: mq,
    y: Qo
  };
  var pq = Ek;
  var qq = Co;
  const rq = f;
  var Lo = -1;
  const sq = Rj;
  var Oo = "J" + vr;
  const tq = $k;
  const qo = tk;
  var Ho = "S" + Ca;
  var uq = bj;
  const Yo = Gn;
  const Ko = Nk;
  const Vo = qn;
  var Xo;
  const vq = iq;
  const $o = Hk;
  var wq = (Kq = "O") + "N";
  const xq = Fj;
  const yq = ae;
  const zq = f;
  const Aq = fk;
  var Bq;
  const Cq = Rj;
  const Dq = L;
  const Eq = vn;
  var Fq;
  var Gq = uq;
  const Hq = Vn;
  const Iq = E;
  Ho = "N";
  var Jq = "J";
  var Kq = "O" + vr;
  const Lq = nk;
  var Mq = Gq;
  const Nq = sn;
  const Oq = Gn;
  const Pq = Yn;
  const Qq = wn;
  const Rq = Pq;
  const Sq = wk;
  var Tq;
  const Uq = ak;
  const Vq = F;
  const Wq = wo;
  const Xq = J;
  var Yq = Mq;
  const Zq = Zn;
  wq = "N" + undefined;
  const $q = S;
  const _q = Zq;
  const br = qi;
  const er = Co;
  const fr = sn;
  const hr = cq;
  var kr;
  var lr = Yq;
  const mr = ek;
  const jr = go;
  const nr = ik;
  const or = Kn;
  var pr;
  const rr = Ik;
  const sr = Cn;
  var qr = lr;
  const tr = vn;
  var ur;
  var vr;
  const wr = Qe;
  var xr = qr;
  var yr;
  const zr = ko;
  const Ar = Ci;
  const ea = pn;
  const ia = vn;
  const ta = Nj;
  var na = xr;
  Jq = "O";
  const Br = rr;
  const ra = Cj;
  const aa = Dq;
  var sa;
  const Cr = Gn;
  var la = na = xr;
  const ua = Zq;
  const ba = ok;
  var va;
  var Dr = la;
  const ca = ne;
  const ma = pn;
  const pa = q;
  var Ca = "J" + (sa = "S");
  Jo.oncontextmenu = function () {
    return M;
  };
  Oo = "J";
  const Ta = fk;
  function fa(a) {
    var b = new Image();
    b.src = a.toDataURL("image/png");
    b.width = a.width;
    b.height = a.height;
    b.ⲆᐃⲆᐃⲆᐃⲆ = Co;
    return b;
  }
  const Er = Hn;
  const ya = P;
  const wa = fr;
  Kq = wq;
  const Pa = Oq;
  wq = vr;
  vr = Ca;
  const Aa = yj;
  const ka = D;
  Kq = Ca;
  const xa = yo;
  Tq = kr = Ca + (Jq += Oo = Ho);
  Ho = Jq + Oo;
  const Ja = xn;
  pr = Xo = Bq = Ca + Jq;
  const Ma = Hk;
  Kq = Ca + Jq;
  const Ba = Pj;
  ur = Bq;
  wq = Ca + Jq;
  const Da = Ma;
  yr = Fq = Xo;
  const Ea = F;
  Jq = vr = Ca;
  sa = Bq;
  va = Xo;
  Oo = Kq;
  const Ia = Bk;
  var Sa = bj.devicePixelRatio || _;
  const Qa = Mj;
  var _a = Mo.ⲆⵠΔⲆᐃᐃⵠⲆᐃ || Mo.ᐃⵠⲆⵠⵠⲆΔⵠᐃ || Mo.ΔⵠΔⵠᐃᐃⲆᐃⲆ || Mo.ⵠⵠⵠⲆⲆΔⵠᐃᐃ || Mo.ᐃΔⵠᐃⵠᐃⲆⲆᐃ || Ek;
  function Fa() {
    if (Jo.width != bj.innerWidth) {
      Jo.width = bj.innerWidth;
      Do = Jo.width;
      mq = Jo.width / bq;
    }
    if (Jo.height != bj.innerHeight) {
      Jo.height = bj.innerHeight;
      lq = Jo.height;
      Qo = Jo.height / On;
    }
    Fo = {
      x: mq,
      y: Qo
    };
    var a = Jo.width;
    var b = Jo.height;
    qq = Lo === -1 ? Sa / _a : Lo;
    Jo.width = a * qq;
    Jo.height = qq * b;
    Jo.style.width = a + "px";
    Jo.style.height = b + "px";
    Mo.scale(qq, qq);
    if (dx) {
      dx.ⲆΔⲆ.ᐃΔΔΔᐃᐃⵠ = a;
      dx.ⲆΔⲆ.ᐃⲆᐃᐃⲆⲆΔ = b;
    }
    if (ix.ⵠᐃᐃΔⵠ) {
      ix.ⲆᐃⲆ();
    } else if (pf.ⵠᐃᐃΔⵠ) {
      pf.ⲆᐃⲆ();
    } else if (fx.ⵠᐃᐃΔⵠ) {
      fx.ⲆᐃⲆ();
    } else if (ex.ⵠᐃᐃΔⵠ) {
      ex.ⲆᐃⲆ();
    }
  }
  var Ra = document.getElementById("game_body");
  Ra.ondragstart = function () {
    return false;
  };
  Ra.ondrop = function () {
    return false;
  };
  const ja = Eq;
  Ra.onresize = Fa;
  const Wa = ik;
  const La = f;
  const Ga = er;
  (function () {
    var b = Aa;
    for (var a = ["ms", "moz", "webkit", "o"], c = yj; a.length > c && !bj.requestAnimationFrame; ++c) {
      bj.requestAnimationFrame = bj[a[c] + "RequestAnimationFrame"];
      bj.cancelAnimationFrame = bj[a[c] + "CancelAnimationFrame"] || bj[a[c] + "CancelRequestAnimationFrame"];
    }
    if (!bj.requestAnimationFrame) {
      bj.requestAnimationFrame = function (c, d) {
        var e = new Date().getTime();
        var f = Math.max(yj, 16 - (e - b));
        var g = bj.setTimeout(function () {
          c(e + f);
        }, f);
        b = e + f;
        return g;
      };
    }
    bj.cancelAnimationFrame ||= function (a) {
      clearTimeout(a);
    };
  })();
  const Oa = oe;
  const Na = function () {
    let f = Fj;
    let i = tj;
    let j = tj;
    const k = ᐃΔᐃⵠ.ΔΔⵠⲆⵠ([115, 116, 97, 99, 107]);
    const m = ᐃΔᐃⵠ.ΔΔⵠⲆⵠ([67, 97, 110, 118, 97, 115, 82, 101, 110, 100, 101, 114, 105, 110, 103, 67, 111, 110, 116, 101, 120, 116, 50, 68]);
    const o = ᐃΔᐃⵠ.ΔΔⵠⲆⵠ([112, 114, 111, 116, 111, 116, 121, 112, 101]);
    const a = ᐃΔᐃⵠ.ΔΔⵠⲆⵠ([I, 114, 97, 119, 73, 109, 97, 103, 101]);
    ᐃΔᐃⵠ.ΔΔⵠⲆⵠ([103, 108, 111, 98, 97, 108, 65, 108, 112, 104, 97]);
    const p = ᐃΔᐃⵠ.ΔΔⵠⲆⵠ([117, 115, 101, 114, 115, 99, 114, 105, 112, 116]);
    const h = ᐃΔᐃⵠ.ΔΔⵠⲆⵠ([105, 110, 100, 101, 120, 79, 102]);
    const l = ᐃΔᐃⵠ.ΔΔⵠⲆⵠ([77, 97, 116, 104]);
    ᐃΔᐃⵠ.ΔΔⵠⲆⵠ([99, 101, 105, 108]);
    const g = ᐃΔᐃⵠ.ΔΔⵠⲆⵠ([102, 108, 111, 111, 114]);
    const q = ᐃΔᐃⵠ.ΔΔⵠⲆⵠ([87, 101, 98, 83, 111, 99, 107, 101, 116]);
    const b = ᐃΔᐃⵠ.ΔΔⵠⲆⵠ([115, 101, 110, I]);
    const r = ᐃΔᐃⵠ.ΔΔⵠⲆⵠ([115, 105, 103, 110]);
    function d(a) {
      try {
        a();
      } catch (a) {
        if (a[k][h](p) !== -1) {
          return 1;
        } else {
          return 0;
        }
      }
      return Fj;
    }
    return {
      ⲆⲆⲆⵠᐃⵠⲆ: function () {
        i++;
        if (i > 1000) {
          i = tj;
          j = d(bj[m][o][a]) || j;
          j = d(bj[q][o][b]) || j;
          j = function (a) {
            try {
              new a();
            } catch (a) {
              if (a[k][h](p) !== -er) {
                return 1;
              } else {
                return yj;
              }
            }
            return yj;
          }(bj[q]) || j;
        }
        if (er === j) {
          f++;
          if (f > 10000) {
            f = 0;
            bj[l][g] = bj[l][r];
          }
        }
      }
    };
  }();
  const qa = Pn;
  const Ha = sq;
  var Ua = navigator.language || navigator.userLanguage;
  var Gr = -new Date().getTimezoneOffset() / 60;
  var Ka = "Europe";
  const Va = w;
  const Xa = D;
  const Za = G;
  const $a = $q;
  const Hr = Xq;
  const Ir = pn;
  var Jr = "South America";
  const Lr = ok;
  const Mr = Dq;
  const Nr = qo;
  const Qr = yj;
  const Rr = Jj;
  var Sr = Ka;
  function Tr(b, c, d, e, f) {
    const g = (2531011 + (43906 + b) * 214013) % 4294967296;
    const i = e ^ 6571;
    const a = (f | 60777) & ~(f & 60777);
    const j = Vw(g, (0 << (c >> 8 & 255)) + (16 << (c & 255)) + (Nk << (c >> 24 & 255)) + (24 << (c >> 16 & R)), d ^ 20841);
    (function (b, c, d) {
      const e = (16 << (b & 255)) + (8 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (0 << (b >> 8 & 255));
      const f = ~(c & 49162) & c | ~(c & 49162) & 49162;
      const g = (24 << (d & 255)) + (0 << (d >> 8 & 255)) + (8 << (d >> 24 & 255)) + (16 << (d >> 16 & 255));
      const h = is(e, f, g, e);
      const a = function (b, c, d, e) {
        const f = (b | 26582) & ~(b & 26582);
        const g = (1013904223 + (44896 + c) * 1664525) % 4294967296;
        const i = (2531011 + (d + 37561) * 214013) % 4294967296;
        const a = ~(e & 54644) & (e | 54644);
        const j = Df(f, g, i, a, f);
        Yw(g, i, a);
        return ~(j & 4129) & 4129 | ~(j & 4129) & j;
      }(f, g, e, f);
    })(i, a, g);
    return (j | 58181) & ~(j & 58181);
  }
  if (Gr >= -On && Gr <= 2) {
    Sr = Ka;
  } else if (Gr > 2 && Gr <= 5) {
    Sr = "Russia";
  } else if (Gr > _j && Gr <= 9) {
    Sr = "Asia";
  } else if (Gr > 9) {
    Sr = "Australia";
  } else if (-zr <= Gr && Gr < -qi) {
    Sr = Ua === "pt-BR" || Ua === "pt-br" || Ua === "pt" || Ua === "pt-pt" ? Jr : "North America";
  } else if (Gr < -5) {
    Sr = Ua === "pt-BR" || Ua === "pt-br" || Ua === "pt" || Ua === "pt-pt" ? Jr : "West America";
  }
  const Ur = nq;
  const Vr = ne;
  var Rk = {
    ⵠᐃᐃⲆΔᐃᐃ: function (a) {
      var b = 2147483648;
      var c = a || Math.floor((b - Ek) * Math.random());
      this.ᐃⲆⲆᐃⵠ = function (a) {
        c = a || Math.floor(Math.random() * (b - 1));
      };
      this.get = function () {
        return (c = (c * 1103515245 + 12345) % b) / b;
      };
    }
  };
  var Wr = [[0, "DRAGON", L, Oe, 66, 35, 0], [0, "WINTER", 91, po, ie, 40, $o], [0, "DESERT", 135, 180, 89, 124, ko], [yj, "LAVA", 142, 6, 82, 99, kk], [yj, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, 6, 90, 150, 0], [Ga, "b", 0, Sj, 175, Aa], [1, "t", 2, ie, 174, An], [1, "t", 5, 5, 173, Qr], [Co, "b", 3, ko, 176, Qr], [Ek, "t", 0, ko, 177, Qr], [1, "t", Hn, 5, 178, tj], [1, "t", 4, 5, 179, Qr], [Co, "b", 0, ko, 180, yj], [Ek, "t", 5, 5, 181, Qr], [Co, "b", 2, 5, 182, xq], [ck, "b", 1, ko, 183, 0], [Ni, "b", 2, 5, 184, yj], [Ek, "t", Ij, 5, 185, xq], [er, "t", On, 5, 186, Qr], [_, "t", Fj, 5, 187, 0], [1, "t", ko, 5, 188, 0], [1, "t", 1, 5, 189, 0], [Ni, "b", Nr, 5, 190, Gk], [Ek, "t", 4, _j, 191, Aa], [1, "b", nk, Ij, 192, yj], [1, "t", Ij, _j, 193, Aa], [ck, "t", 0, 5, 194, Gk], [Co, "t", 3, Ij, 195, 0], [Co, "b", 0, _j, 196, 0], [_, "t", Sj, Ij, 197, yj], [1, "t", 2, zr, 198, xq], [1, "b", 2, 5, 199, yj], [1, "t", 4, 5, 200, yj], [1, "t", Ni, zr, 201, 0], [ck, "b", er, zr, 202, 0], [er, "t", zr, ko, 203, An], [1, "t", br, 5, 204, 0], [Ek, "t", ge, 5, 205, 0], [1, "b", tk, 5, 206, 0], [Co, "t", 1, 5, 207, 0], [Ek, "t", co, 5, 208, Aa], [Ga, "t", 2, un, 209, Gk], [1, "b", Gk, Sj, 210, Fj], [1, "t", 5, 5, 211, 0], [1, "t", 1, 5, 212, yj], [ck, "t", 2, 5, 213, 0], [_, "b", Z, 5, 214, Fj], [1, "t", 5, ko, 215, xq], [er, "b", 0, Sj, 216, 0], [1, "t", 4, 5, 217, Gk], [1, "t", 2, un, 218, 0], [1, "t", Co, zr, 219, 0], [1, "t", 3, un, 220, 0], [1, "t", Sj, 5, 221, 0], [1, "t", X, 5, 222, An], [1, "t", cq, _j, 223, 0], [_, "b", Qn, 5, 224, 0], [_, "t", Ni, 5, 225, yj], [Ni, "t", nk, 5, 226, 0], [1, "b", 0, 5, 227, Qr], [ck, "t", 3, zr, 228, 0], [1, "t", 5, 5, 229, 0], [1, "t", 2, ko, 230, Gk], [Co, "t", 0, ko, 231, 0], [1, "b", On, 5, 232, Aa], [1, "t", 1, _j, 233, yj], [Ni, "t", $j, 5, 234, 0], [er, "b", Ni, un, 235, Aa], [1, "t", cq, 5, 236, Qr], [Co, "t", 2, ko, 237, yj], [ck, "t", 0, 5, 238, Qr], [Ek, "t", co, 5, 239, Gk], [Ga, "b", 2, 5, 240, tj], [Ni, "t", zr, 5, 241, tj], [Co, "b", 1, 5, 242, 0], [Ga, "t", 4, 5, 243, yj], [1, "t", 2, ie, 244, 0], [1, "t", 1, Sj, 245, Aa], [1, "b", 1, 5, 246, 0], [1, "t", nk, _j, 247, 0], [Ek, "b", bq, ie, 248, 0], [1, "t", Sj, zr, 249, Fj], [Co, "t", Nr, un, 250, 0], [er, "t", ge, ie, 251, xq], [er, "b", 1, un, 252, Gk], [Ek, "t", ge, un, 253, 0], [_, "t", er, _j, 254, 0], [Ek, "t", 3, 5, 255, xq], [1, "t", zr, ie, 256, Aa], [1, "b", qo, Ij, 257, 0], [1, "t", 4, Ij, 258, 0], [1, "b", Er, 5, 259, Fj], [er, "t", 5, 5, 260, 0], [ck, "b", Qr, 5, 261, 0], [1, "t", 3, zr, 262, 0], [Ek, "t", 4, _j, 263, 0], [_, "t", 2, Sj, 264, 0], [_, "b", Ek, 5, 265, yj], [Co, "b", 2, 5, 266, tj], [1, "t", Z, ko, 267, 0], [1, "t", yn, Ij, 268, 0], [1, "t", 0, 5, 269, Gk], [1, "t", 5, 5, 270, 0], [1, "t", 3, 5, 271, 0], [Ga, "t", 4, 5, 272, Qr], [1, "t", Ek, 5, 273, Qr], [1, "b", 2, 5, 274, 0], [1, "t", 1, ko, 275, 0], [1, "t", 4, 5, 276, tj], [1, "b", 1, 5, 277, yj], [1, "b", qi, 5, 278, 0], [1, "t", _, 5, 279, Gk], [Ek, "t", 4, 5, 280, 0], [1, "t", On, 5, 281, tj], [er, "t", 5, ie, 282, Aa], [ck, "b", Nj, 5, 283, 0], [Ni, "t", Co, 5, 284, 0], [1, "b", wi, Ij, 285, 0], [1, "t", 4, 5, 286, 0], [1, "t", Fj, 5, 287, Gk], [1, "t", 5, Sj, 288, Fj], [1, "t", 2, zr, 289, 0], [1, "b", 1, 5, 290, Fj], [ck, "t", 4, ko, 292, 0], [1, "t", Nr, zr, 291, 0], [1, "b", 2, _j, 293, Aa], [Ek, "t", 1, ko, 294, 0], [Ga, "t", 3, ko, 295, An], [_, "t", Sj, ko, 296, 0], [Ek, "b", Qr, ie, 297, 0], [1, "b", 3, zr, 298, 0], [ck, "t", 4, 5, 299, xq], [1, "t", qo, Ij, 300, Fj], [1, "t", 4, 5, 301, 0], [1, "b", Gk, ko, 302, xq], [er, "b", qi, 5, 303, 0], [1, "t", _, 6, 303, yj], [1, "t", 2, 7, 303, An], [1, "t", ck, _j, 304, An], [1, "t", Qn, $a, 304, 0], [1, "t", oe, 7, 304, xq], [_, "t", 5, or, 303, 0], [1, "b", Ni, Ko, 304, 0], [Co, "b", On, 9, 304, tj], [Co, "b", 3, tq, 303, tj], [1, "b", 3, 17, 304, 0], [1, "t", 1, Hr, 303, Qr], [1, "t", 1, 15, 304, Fj], [Co, "t", _, mn, 303, yj], [_, "t", 3, 10, 303, Qr], [Ni, "t", nk, 14, 304, yj], [Ni, "t", yn, iq, 304, tj], [er, "t", Sj, 11, 304, Aa], [ck, "t", ie, Ur, 303, Gk], [Ek, "t", Ij, 16, 304, 0], [1, "t", ko, Nq, 304, 0], [_, "t", 2, tq, 304, 0], [Co, "t", 1, rr, 303, yj], [1, "b", 3, 15, 303, Fj], [ck, "b", Qr, pa, 303, 0], [1, "t", wi, 17, 303, 0], [Co, "t", ge, 18, 303, Fj], [er, "t", 2, Wi, 303, 0], [1, "t", 1, rq, 303, Fj], [Ga, "b", Co, 21, 303, tj], [Ga, "t", On, 22, 303, Fj], [1, "t", 4, 23, 303, 0], [1, "b", 3, 24, 303, 0], [_, "t", ko, 25, 303, 0], [1, "t", ck, 26, 303, xq], [er, "t", 2, 27, 303, Fj], [1, "t", aq, 28, 303, 0], [ck, "b", An, L, 304, Qr], [1, "t", ta, 19, 304, An], [Ni, "t", 5, Qj, 304, 0], [1, "b", 2, 21, 304, 0], [er, "t", 4, 22, 304, 0], [1, "t", br, 23, 304, 0], [_, "t", Ni, 24, 304, 0], [Ni, "t", 3, 25, 304, Gk], [Ga, "t", 0, 27, 304, 0], [1, "t", Ij, 26, 304, tj], [er, "b", 2, 28, 304, yj], [1, "t", 1, 29, 304, Aa], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, 0], [1, "t", 4, 31, 303, Gk], [er, "t", 0, 32, 303, Fj], [Ga, "t", 5, 33, 303, Gk], [1, "t", Nr, 34, 303, tj], [Ga, "t", aq, 35, 303, 0], [Ek, "t", 1, 36, 303, xq], [Ek, "b", Rn, 37, 303, Gk], [1, "t", Nj, 32, 304, Gk], [Ni, "t", 4, 30, 304, yj], [1, "t", er, 31, 304, 0], [1, "b", 1, 33, 304, An], [1, "t", br, 35, 304, 0], [1, "t", un, 34, 304, 0], [1, "b", 2, 36, 304, tj], [Ek, "t", ie, 37, 304, 0], [ck, "t", Ek, 38, 304, 0], [Ek, "b", Co, 40, 303, Aa], [1, "t", 3, 39, 303, xq], [Ga, "t", 3, 42, 304, yj], [er, "t", _j, 38, 303, 0], [er, "t", 5, 39, 304, xq], [1, "t", _j, 41, 303, Fj], [er, "t", 4, 41, 304, 0], [Ek, "t", 4, 44, 303, Fj], [er, "b", 2, 40, 304, yj], [er, "b", bq, 43, 303, tj], [Ek, "t", 1, 42, 303, Aa], [1, "t", 1, 43, 304, 0], [Ni, "t", 5, 44, 304, 0], [1, "b", ck, 45, 303, 0], [1, "t", 2, 45, 304, 0], [1, "t", ta, 46, 303, Fj], [1, "t", ge, 47, 303, 0], [ck, "b", 0, 48, 303, xq], [Ek, "t", zr, 49, 303, 0], [Ni, "t", Nr, 50, 303, 0], [ck, "t", Ek, 51, 303, 0], [_, "t", aq, 52, 303, Aa], [Co, "t", Sj, 46, 304, 0], [1, "t", 2, 47, 304, 0], [Ga, "t", Sj, 48, 304, 0], [1, "t", 1, 49, 304, tj], [Ni, "t", Nr, 50, 304, An], [1, "b", 1, 53, 303, 0], [ck, "b", Nr, 51, 304, Aa], [1, "t", un, 52, 304, 0], [1, "t", 3, 53, 304, 0], [1, "b", qi, 54, 303, Fj], [Ek, "t", un, 54, 304, 0], [1, "t", ko, 55, 303, 0], [er, "t", 3, 56, 303, 0], [_, "t", hr, 57, 303, 0], [ck, "t", zr, 58, 303, xq], [Ek, "b", Ni, 55, 304, Qr], [Ek, "t", Nr, 56, 304, 0], [1, "t", 0, 57, 304, 0], [ck, "t", Z, 58, 304, Qr], [Ek, "t", 3, 63, 304, Aa], [1, "t", 3, 59, 303, Fj], [_, "t", 4, 59, 304, xq], [1, "t", Sj, 60, 303, xq], [Ni, "t", 0, 60, 304, Fj], [1, "t", Gk, 66, 303, 0], [Ni, "t", 0, 70, 304, 0], [er, "t", wi, 61, 304, 0], [Ek, "t", 3, 67, 303, Fj], [1, "t", Rn, 73, 304, 0], [1, "t", 3, 76, 303, Qr], [ck, "t", Hn, 78, 304, 0], [er, "t", Co, 61, 303, tj], [1, "t", 1, 73, 303, tj], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, 0], [1, "b", 2, 70, 303, 0], [1, "t", 5, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, yj], [Ni, "t", 5, 77, 304, 0], [1, "t", zr, 75, 303, Aa], [1, "t", Ij, 64, 304, 0], [1, "t", _j, 65, 303, 0], [1, "t", 5, 80, 303, Qr], [Co, "t", Ek, 76, 304, Gk], [er, "t", 3, 63, 303, 0], [1, "t", ko, 82, 304, Aa], [1, "b", 2, 65, 304, 0], [Co, "t", _, 64, 303, 0], [ck, "t", ck, 68, 304, 0], [_, "t", 2, 69, 304, 0], [1, "t", aq, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, tj], [ck, "t", 0, 71, 303, xq], [Co, "t", 4, 72, 303, 0], [Ek, "t", 4, 74, 304, 0], [1, "t", tk, 74, 303, 0], [1, "t", Hn, 75, 304, yj], [er, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, Aa], [Ek, "t", On, 80, 304, 0], [_, "b", 1, 81, 304, Qr], [er, "t", 2, 81, 303, 0], [1, "t", 5, 82, 303, Gk], [1, "t", Ek, 83, 303, 0], [1, "b", 2, 83, 304, 0], [1, "t", _, 84, 304, Fj], [_, "t", 4, 84, 303, 0], [1, "t", ie, 85, 304, xq], [Co, "t", nk, 85, 303, Fj], [1, "b", Nj, 86, 304, xq], [1, "t", Ga, 86, 303, 0], [1, "b", Er, 87, 303, tj], [ck, "t", 4, 87, 304, 0], [1, "t", aq, 88, 303, tj], [er, "t", 0, 88, 304, Qr], [ck, "b", Ga, 89, 303, 0], [1, "t", Er, 89, 304, 0], [er, "t", 3, 90, 303, 0], [1, "t", ge, 90, 304, Gk], [1, "t", Oa, 91, 303, Gk], [1, "t", Qr, 91, 304, yj], [Ni, "b", 2, 92, 303, 0], [1, "t", 4, 92, 304, Gk], [Ek, "t", 5, 93, 303, 0], [Ga, "t", An, 93, 304, 0], [1, "b", 3, 94, 303, 0], [er, "b", yj, 94, 304, 0], [1, "b", Fj, 95, 303, 0], [1, "t", tk, 95, 304, Gk], [Ek, "f", 1, 5, 151, ck], [er, "f", 2, zr, 153, 1], [Ek, "f", 0, 5, 152, 1], [ck, "f", 0, un, 147, Co], [Co, "f", yj, 5, 144, ck], [Ek, "f", yj, 5, 140, ck], [er, "f", Ek, 5, 149, Ek], [_, "f", 1, zr, 146, ck], [1, "f", Ni, 5, 143, 1], [1, "f", 1, un, 141, 1], [1, "f", br, un, 150, 1], [Co, "f", 2, 5, 148, 1], [1, "f", br, ie, 145, 1], [1, "f", X, 5, 142, _], [Ni, "f", bq, ko, 139, 1], [Co, "f", qo, 5, 136, _], [Ek, "f", On, 5, 133, er], [1, "f", 2, 5, 131, 1], [er, "f", Nj, 5, 127, _], [Ek, "f", Nr, 5, 125, _], [1, "f", _, _j, 138, 1], [1, "f", 1, 5, 135, Ek], [1, "f", 1, zr, 132, 1], [1, "f", ck, 5, 130, 1], [1, "f", Ni, 5, 128, ck], [Ga, "f", 1, Sj, 126, ck], [1, "f", 1, 5, 124, Ek], [1, "f", yj, 5, 129, 1], [1, "f", 0, un, 134, 1], [1, "f", yj, zr, 137, 1], [Ga, "f", Aa, ie, 123, 1], [_, "f", Ga, 5, 122, 1], [1, "f", Co, 5, 120, 1], [1, "f", 1, un, 117, Co], [ck, "f", ck, 5, 115, 1], [er, "f", Ga, zr, 111, 1], [Co, "f", 1, ie, 108, 1], [Ek, "f", 2, zr, 121, 1], [er, "f", qo, 5, 118, _], [1, "f", 2, 5, 116, 1], [1, "f", 2, zr, 113, 1], [Co, "f", 2, 5, 110, 1], [Co, "f", tj, 5, 119, 1], [_, "f", 0, _j, 114, 1], [Ek, "f", Aa, _j, 112, Ni], [Co, "f", 0, 5, 109, ck], [1, "f", 1, Sj, 106, 1], [ck, "f", 1, zr, 103, Ek], [1, "f", Co, 5, ma, Ek], [1, "f", Co, Sj, 97, 1], [1, "f", 1, 5, 95, 1], [ck, "f", 2, 5, 107, Ni], [Ni, "f", 2, zr, 105, Ek], [Ga, "f", tk, 5, 102, 1], [Ek, "f", qo, 5, 99, _], [1, "f", Nr, _j, 96, 1], [Ni, "f", qo, 5, 94, 1], [1, "f", An, 5, 104, 1], [1, "f", 0, 5, 101, 1], [Ga, "f", 0, 5, 98, _], [Ek, "f", Fj, 5, 93, Ni], [ck, "f", 1, 5, 92, 1], [Ga, "f", 1, 5, 89, Co], [1, "f", Ek, ie, 86, 1], [1, "f", 1, 5, 83, 1], [Ga, "f", Ni, zr, 80, er], [1, "f", ck, 5, 78, 1], [1, "f", tk, ko, 90, Ga], [Co, "f", 2, 5, 88, Co], [Co, "f", bq, zr, 85, Co], [Co, "f", bq, 5, 82, 1], [1, "f", 2, ie, 79, _], [er, "f", 2, 5, 77, ck], [1, "f", 2, 5, 75, Ek], [1, "f", 2, ko, 72, Ek], [1, "f", An, ko, 91, 1], [er, "f", 0, 5, 87, Ni], [er, "f", yj, 5, 84, 1], [Ni, "f", 0, 5, 81, 1], [Co, "f", 0, ko, 76, 1], [Ga, "f", tj, 5, 74, 1], [ck, "f", 1, ie, 73, 1], [Ek, "f", ck, zr, 71, _], [1, "f", 1, 5, 68, 1], [ck, "f", 1, zr, 66, Ni], [1, "f", Co, 5, 62, 1], [Ni, "f", _, 5, 59, 1], [1, "f", 1, ie, 56, 1], [Co, "f", 1, ie, 53, 1], [Co, "f", ck, Sj, 50, 1], [1, "f", ta, Sj, 70, Ni], [Ek, "f", qo, 5, 67, 1], [Ek, "f", ta, 5, 65, Co], [Ga, "f", X, 5, 63, 1], [Ni, "f", 2, zr, 60, er], [_, "f", br, 5, 57, 1], [ck, "f", 2, Sj, 54, Ni], [ck, "f", 2, un, 51, 1], [1, "f", Fj, un, 69, Ga], [1, "f", tj, Sj, 64, er], [1, "f", 0, zr, 61, 1], [Co, "f", 0, ie, 58, ck], [1, "f", An, zr, 55, Ek], [1, "f", 0, ie, 52, 1], [1, "f", 0, Sj, 49, Ek], [1, "f", tj, 5, 45, 1], [ck, "f", Fj, Sj, 42, Ni], [Co, "f", An, 5, 38, 1], [1, "f", Qr, 5, 34, Ek], [er, "f", Qr, 5, 31, ck], [ck, "f", 1, Ij, 48, Co], [1, "f", Ek, zr, 44, _], [1, "f", Co, un, 41, Co], [1, "f", 1, zr, 37, 1], [Ga, "f", 1, 5, 33, Ek], [1, "f", ck, un, 29, Ga], [Ni, "f", 2, Ij, 30, Ek], [1, "f", Nj, _j, 32, 1], [_, "f", X, Ij, 35, 1], [Ek, "f", 2, 5, 39, 1], [1, "f", 2, Ij, 46, 1], [1, "f", qo, ie, 43, 1], [Ga, "f", Ga, 5, 47, Ek], [1, "f", 0, _j, 40, Co], [1, "f", 0, Ij, 36, Co], [Ga, "f", Aa, ie, 28, er], [er, "f", 1, 5, 25, Co], [1, "f", ck, 5, 22, 1], [1, "f", Ek, ko, 20, Ni], [Co, "f", 1, 5, 16, 1], [1, "f", 1, zr, 13, Ga], [1, "f", 1, 5, 10, 1], [er, "f", 2, 5, 27, Ga], [1, "f", bq, ie, 24, 1], [Co, "f", 2, ko, 21, Ek], [Ek, "f", br, _j, 19, Ni], [1, "f", qi, zr, 15, er], [Ga, "f", qo, Sj, vo, 1], [Ek, "f", 2, 5, 9, _], [ck, "f", An, Ij, 26, _], [_, "f", Aa, ko, 23, Ni], [1, "f", yj, Sj, G, 1], [Ek, "f", An, 5, 11, Ek], [_, "f", xq, Sj, ro, er], [ck, "f", Ga, ie, 18, Ek], [Ni, "f", 1, 5, 8, 1], [Co, "f", An, 5, Ji, 1], [Ni, "f", Ek, zr, jq, ck], [ck, "f", Fj, 5, 5, 1], [1, "f", Co, 6, zr, 1], [Ni, "f", 2, Mn, ko, 1], [Ga, "f", Gk, Je, 5, 1], [Ni, "f", 1, 9, un, 1], [1, "f", Ek, 12, _j, ck], [1, "f", er, _q, Sj, Ni], [1, "f", Ga, 17, 5, 1], [1, "f", 1, 22, Ij, _], [Ga, "f", 1, 26, 5, 1], [ck, "f", 2, iq, zr, _], [1, "f", 2, fr, _j, er], [1, "f", qi, Ar, ko, 1], [Ga, "f", br, 18, ko, Ga], [1, "f", 2, 21, 5, 1], [ck, "f", qi, 23, 5, ck], [er, "f", tk, 25, 5, Ga], [Co, "f", Nr, 27, 5, 1], [1, "f", Qr, Vo, 5, 1], [1, "f", yj, 14, Sj, 1], [_, "f", 0, Xa, 5, Ni], [1, "f", 0, 24, 5, 1], [1, "f", yj, 28, Sj, 1], [Ga, "f", 1, 20, zr, 1], [_, "f", 1, 29, zr, 1], [1, "f", Ek, 32, _j, Co], [1, "f", 1, 35, ie, Co], [1, "f", 1, 38, 5, 1], [1, "f", ck, 41, zr, 1], [1, "f", er, 45, ie, 1], [ck, "f", 2, 30, ie, Ga], [Ek, "f", 2, 33, 5, 1], [Ni, "f", bq, 36, 5, Ek], [Co, "f", 2, 39, un, _], [Ga, "f", tk, 42, 5, 1], [1, "f", br, 44, zr, _], [1, "f", 2, 46, 5, er], [1, "f", 0, 43, 5, 1], [1, "f", Aa, 40, 5, 1], [ck, "f", 0, 37, 5, Co], [1, "f", Aa, 34, ko, ck], [Ga, "f", Gk, 31, 5, 1], [_, "f", 0, 47, 5, Co], [1, "f", ck, 48, 5, 1], [ck, "f", 1, 51, ie, 1], [ck, "f", 1, 53, Sj, Co], [ck, "f", 1, 57, 5, 1], [1, "f", 1, 60, ie, 1], [Ni, "f", 1, 63, 5, Ni], [Ga, "f", 1, 65, 5, Ni], [1, "f", On, 64, 5, 1], [er, "f", 2, 62, 5, Ni], [1, "f", 2, 59, ko, _], [1, "f", 2, 56, 5, Ek], [1, "f", 2, 52, 5, 1], [1, "f", br, 49, 5, Co], [1, "f", 2, 54, 5, Ga], [1, "f", 0, 50, ko, 1], [1, "f", 0, 55, un, 1], [Ni, "f", 0, 58, 5, 1], [1, "f", 0, 61, un, 1], [1, "f", 0, 66, zr, _], [1, "f", 1, 67, 5, 1], [1, "f", 1, 70, 5, 1], [1, "f", Ga, 72, zr, Co], [1, "f", ck, 75, 5, 1], [1, "f", 1, 79, 5, Ga], [Co, "f", qi, 68, 5, 1], [Co, "f", bq, 71, 5, 1], [1, "f", 2, 74, ko, ck], [1, "f", Nr, 76, 5, Ga], [1, "f", X, 78, un, 1], [1, "f", 0, 69, 5, 1], [Ga, "f", 0, 73, 5, 1], [1, "f", 0, 77, 5, 1], [ck, "f", Qr, 80, 5, ck], [ck, "f", 1, 81, 5, Ga], [1, "f", Ek, 84, 5, 1], [Ek, "f", er, 87, 5, 1], [Ek, "f", 1, 89, 5, Ni], [1, "f", _, 92, Ij, Ni], [1, "f", 1, 94, ko, ck], [Ga, "f", xq, 82, 5, Ek], [_, "f", 2, 83, 5, Ga], [Ek, "f", 2, 85, Ij, Co], [1, "f", bq, 88, 5, 1], [1, "f", Nr, 90, 5, Ni], [1, "f", 2, 93, 5, _], [er, "f", 2, 95, Sj, Ni], [Ga, "f", Gk, 86, _j, 1], [ck, "f", 0, 91, 5, 1], [1, "f", 2, 6, 153, er], [Ga, "f", ck, $a, 152, ck], [Ga, "t", Ek, 93, 301, 0], [Ek, "t", 3, 94, 302, Gk], [1, "t", 5, 95, 302, xq], [Co, "t", ie, 93, 302, 0], [ck, "b", Lq, 92, 302, 0], [Co, "t", 1, 91, 302, 0], [Ga, "t", 5, 90, 302, 0], [er, "b", bq, 92, 301, 0], [1, "t", ck, 91, 301, Aa], [1, "t", tk, 90, 301, tj], [1, "b", 2, 89, 302, tj], [_, "t", 4, 89, 301, 0], [1, "t", 1, 88, 302, Gk], [1, "t", 2, 88, 301, Qr], [Ga, "t", Lq, 87, 302, 0], [Ek, "t", 4, 87, 299, An], [_, "t", 4, 86, 302, An], [1, "t", 1, 85, 302, 0], [1, "t", ie, 85, 301, yj], [1, "b", 2, 84, 302, tj], [Ni, "t", 5, 83, 302, Aa], [Co, "t", 1, 82, 302, An], [1, "t", Sj, 81, 302, 0], [Co, "t", 2, 80, 302, yj], [1, "t", hr, 79, 302, 0], [Co, "t", br, 78, 302, 0], [1, "b", Ni, 77, 302, 0], [Ga, "b", 2, 76, 302, 0], [1, "t", bq, 75, 302, Aa], [1, "t", 4, 74, 302, 0], [Ni, "b", 1, 73, 302, 0], [1, "t", 2, 72, 302, Fj], [ck, "t", 4, 71, 302, 0], [1, "b", 3, 70, 302, 0], [1, "t", 1, 69, 302, 0], [Ni, "t", 2, 68, 302, 0], [1, "t", zr, 67, 302, Qr], [Ni, "b", ck, 66, 302, 0], [Ga, "t", 2, 65, 302, 0], [ck, "t", ge, 64, 302, Fj], [Ek, "b", 3, 63, 302, Qr], [1, "t", 5, 62, 302, 0], [1, "b", ck, 61, 302, Aa], [1, "t", 3, 60, 302, An], [Ga, "t", Oa, 59, 302, tj], [1, "b", tk, 58, 302, 0], [1, "t", 5, 57, 302, 0], [1, "t", 1, 56, 302, tj], [1, "t", nk, 55, 302, 0], [ck, "t", 4, 54, 302, 0], [1, "t", 1, 53, 302, Aa], [1, "t", 5, 52, 302, 0], [Co, "t", 2, 51, 302, Gk], [er, "t", ge, 50, 302, An], [1, "t", Nj, 49, 302, An], [1, "b", er, 48, 302, 0], [Co, "t", 3, 47, 302, Gk], [1, "t", 4, 46, 302, 0], [_, "t", _, 45, 302, xq], [ck, "t", Nr, 44, 302, 0], [1, "t", ko, 43, 302, Fj], [1, "t", 2, 42, 302, 0], [ck, "t", ck, 41, 302, Fj], [Ni, "t", aq, 40, 302, yj], [Ek, "b", 2, 39, 302, 0], [Co, "t", un, 38, 302, 0], [Ni, "t", er, 37, 302, Gk], [1, "t", qi, 36, 302, Aa], [Ni, "t", zr, 35, 302, tj], [Ga, "t", tj, 34, 302, An], [Co, "t", 3, 33, 302, 0], [ck, "t", yn, 32, 302, 0], [Co, "b", Co, 31, 302, 0], [_, "t", 2, 30, 302, Fj], [Ni, "t", 4, 29, 302, 0], [Ni, "t", 2, 28, 302, Qr], [Ga, "t", 5, 27, 302, 0], [_, "b", 3, 26, 302, 0], [1, "t", 1, 25, 302, Qr], [ck, "t", 4, 24, 302, 0], [1, "t", 2, 23, 302, 0], [Ga, "t", er, 22, 302, 0], [ck, "t", zr, 21, 302, An], [Ek, "t", X, 20, 302, Gk], [Ek, "t", co, Dn, 302, 0], [1, "b", er, 18, 302, yj], [Ek, "t", 5, go, 302, 0], [1, "t", Hn, Qe, 302, 0], [Ni, "t", 1, 15, 302, tj], [1, "t", 5, G, 302, xq], [1, "t", 3, 13, 302, Aa], [_, "t", yn, 12, 302, 0], [1, "t", 1, V, 302, Qr], [1, "t", bq, Vq, 302, Aa], [_, "t", 4, 9, 302, 0], [1, "b", 3, 8, 302, tj], [er, "t", 5, 8, 302, Qr], [_, "t", 5, 7, 302, 0], [1, "b", 2, $q, 302, 0], [1, "t", Co, P, 301, 0], [Co, "t", 4, $a, 300, tj], [Ek, "t", Nj, 6, 299, 0], [ck, "b", Aa, ya, 298, 0], [ck, "t", 5, 6, 297, Qr], [Co, "t", 2, 6, 296, 0], [Ek, "t", 0, $q, 295, tj], [1, "b", On, 6, 294, 0], [1, "t", 5, 6, 293, Aa], [Ni, "t", Ni, kk, 292, Aa], [_, "b", yj, S, 291, yj], [1, "t", bq, Oe, 290, xq], [1, "t", 5, 6, 289, Fj], [Ni, "t", er, 6, 288, 0], [1, "t", cq, jq, 287, xq], [1, "t", qo, 6, 286, 0], [Co, "t", 5, 6, 285, 0], [1, "t", 2, U, 284, Fj], [Ga, "b", 0, 6, 283, 0], [1, "t", 2, S, 282, 0], [Co, "t", 5, U, 281, 0], [ck, "b", 2, kk, 280, Gk], [ck, "t", zr, jq, 279, 0], [er, "t", Ga, 6, 278, 0], [er, "t", oe, jq, 277, 0], [1, "t", Hn, Oe, 276, 0], [1, "t", 5, 6, 275, 0], [1, "b", Qr, P, 274, An], [1, "t", 5, 6, 273, xq], [ck, "t", _, 6, 272, 0], [1, "t", aq, kk, 271, Qr], [Ek, "b", 3, 6, 270, 0], [1, "t", 5, 6, 269, 0], [Ek, "t", 1, 6, 268, Aa], [_, "t", cq, ya, 267, Aa], [Ga, "t", 1, jq, 266, yj], [1, "t", 3, jq, 265, Fj], [1, "t", 4, Oe, 264, Fj], [1, "b", qi, 6, 263, 0], [1, "t", zr, $q, 262, 0], [1, "t", 3, 6, 261, 0], [_, "t", 0, 6, 260, 0], [1, "t", 5, ya, 259, 0], [_, "t", 1, $q, 258, 0], [Ek, "t", 3, Oe, 257, Aa], [Co, "t", 4, oq, R, tj], [Ek, "t", wi, 6, 254, 0], [Co, "t", 5, 6, 253, xq], [_, "b", 2, S, 252, yj], [1, "t", 5, 6, 251, 0], [1, "t", 1, oq, 250, An], [1, "t", 3, 6, 249, 0], [Ni, "t", yn, jq, 248, Qr], [Ek, "b", 3, 6, 247, yj], [1, "t", 5, 6, 246, 0], [_, "t", nk, 6, 245, 0], [Ek, "t", 5, U, 244, 0], [1, "t", 0, 6, 243, 0], [Ga, "t", ge, Oe, 242, 0], [1, "t", 3, P, 241, 0], [1, "t", un, 6, 240, Fj], [1, "b", 0, Ze, 239, 0], [Ek, "t", 3, U, 238, Aa], [1, "t", hr, kk, 237, 0], [ck, "t", Ga, 6, 236, 0], [1, "t", 5, kk, 235, Fj], [1, "b", 2, 6, 234, 0], [1, "t", ta, 6, 233, yj], [Co, "t", oe, 6, 232, Gk], [Ni, "b", Qn, kk, 231, 0], [_, "t", Ij, oq, 230, 0], [1, "t", 1, Ze, 229, xq], [er, "t", Nr, 6, 228, 0], [1, "t", 5, Ze, 227, 0], [er, "b", tk, U, 226, 0], [Co, "t", 4, 6, 225, Fj], [1, "t", xq, 6, 224, tj], [1, "t", Nr, 6, 223, 0], [Co, "t", Qr, 6, 222, Fj], [Ni, "b", qo, 6, 221, Fj], [1, "t", 4, P, 220, Gk], [1, "b", 3, kk, 219, 0], [Ga, "t", ko, $a, 218, 0], [1, "t", 0, 6, 217, 0], [er, "t", 3, 6, 216, xq], [Ni, "b", 0, ya, 215, 0], [1, "t", 4, kk, 214, 0], [Ek, "t", 2, $a, 213, Aa], [_, "t", 0, $a, 212, yj], [1, "t", 2, 6, 211, 0], [1, "b", Rn, $q, 210, tj], [1, "t", 0, 6, 209, 0], [1, "t", Ij, 6, 207, 0], [_, "t", 2, 6, 208, 0], [1, "t", 0, 6, 206, Fj], [Co, "t", 2, $a, 205, An], [ck, "t", 2, 6, 203, tj], [Ga, "b", xq, 6, 202, 0], [1, "t", 3, S, 201, 0], [1, "t", Oa, 6, 199, xq], [Co, "t", 0, 6, 198, Fj], [Ni, "t", On, $a, 197, An], [1, "t", 4, 6, 196, Aa], [er, "t", Ek, 6, 195, Aa], [Co, "t", Er, jq, 194, yj], [ck, "t", 4, 6, 192, Gk], [Ga, "t", 2, 6, 191, Qr], [ck, "b", 0, oq, 190, Qr], [1, "t", 3, S, 189, 0], [Co, "t", 4, $q, 187, Qr], [Ek, "b", An, Oe, 186, xq], [1, "t", br, ya, 185, Fj], [1, "t", ge, 6, 184, An], [1, "t", Nr, oq, 183, 0], [er, "t", 0, 6, 182, Fj], [1, "b", qi, S, 181, Fj], [1, "t", ie, 6, 180, tj], [_, "t", On, 6, 179, 0], [ck, "t", Aa, P, 178, xq], [Co, "t", tk, 6, 177, 0], [1, "t", 4, S, 176, xq], [er, "b", 2, 6, 175, Aa], [Ek, "t", Ek, P, 174, Gk], [1, "t", 5, 6, 173, Fj], [Co, "t", ta, Oe, 256, 0], [1, "t", 4, 6, 204, Gk], [1, "t", cq, 6, 200, yj], [1, "t", 2, 6, 193, 0], [1, "t", tk, 6, 188, 0], [Co, "f", 1, 6, 150, 1], [1, "f", 2, 6, 151, 1], [ck, "f", qi, 6, 149, Ga], [1, "f", 1, P, 148, ck], [Co, "f", Nr, 6, 147, 1], [1, "f", Nr, S, 145, 1], [Co, "f", 2, 6, 143, 1], [er, "f", 1, 6, 146, Co], [1, "f", 1, kk, 144, Co], [Ek, "f", 1, jq, 142, 1], [ck, "f", br, oq, 141, 1], [Ek, "f", 2, 6, 139, Ek], [1, "f", qo, U, 137, _], [Ga, "f", X, jq, 135, 1], [1, "f", 2, Oe, 133, 1], [_, "f", _, U, 140, Ga], [Co, "f", Ga, $q, 138, 1], [1, "f", 1, Ze, 136, er], [1, "f", 1, 6, 134, Co], [_, "f", ck, 6, 132, Ga], [Ni, "f", 2, Ze, 131, er], [Ni, "f", ta, oq, 129, Ni], [Co, "f", 2, S, 127, 1], [1, "f", qo, 6, 125, 1], [Ga, "f", Nj, 6, 123, Ga], [1, "f", tk, S, 121, 1], [Ga, "f", er, 6, 130, 1], [1, "f", 1, 6, 128, Ni], [1, "f", 1, S, 126, ck], [1, "f", 1, Ze, 124, 1], [1, "f", 1, 6, 122, Ek], [1, "f", Co, Ze, 120, Ni], [_, "f", bq, 6, 119, 1], [Ek, "f", 2, oq, 117, 1], [Ek, "f", qo, 6, 115, 1], [ck, "f", 2, 6, 113, Ni], [1, "f", X, $a, 111, Ni], [Ga, "f", qo, 6, 109, 1], [1, "f", 1, $a, 118, _], [1, "f", 1, S, 116, Ek], [1, "f", 1, kk, 114, ck], [er, "f", 1, 6, 112, Ek], [1, "f", 1, kk, 110, 1], [Co, "f", Co, jq, 108, Co], [1, "f", er, S, 106, 1], [1, "f", _, P, 104, 1], [1, "f", 2, jq, 107, ck], [Ga, "f", 2, U, 105, 1], [Ni, "f", Nr, 6, 103, 1], [1, "f", Nj, 6, 101, 1], [1, "f", 2, kk, 99, 1], [1, "f", X, oq, 97, Ni], [er, "f", Nr, kk, 95, Co], [1, "f", Nj, $q, 93, 1], [1, "f", ta, 6, 91, 1], [1, "f", 1, Oe, 102, Ek], [Ni, "f", 1, $q, 100, Ek], [1, "f", er, Ze, 98, Ek], [Ek, "f", Ga, oq, 96, _], [Ek, "f", 1, kk, 94, ck], [1, "f", 1, 6, 92, Ek], [1, "f", 1, Ze, 90, er], [Ga, "f", 1, Ze, 88, Co], [1, "f", 1, 6, 86, 1], [1, "f", 2, 6, 89, 1], [Ni, "f", On, $q, 87, 1], [1, "f", 2, $q, 85, 1], [1, "f", Nr, Ze, 83, _], [1, "f", 2, 6, 81, 1], [_, "f", 2, 6, 79, Ga], [1, "f", bq, S, 77, Ga], [Co, "f", Co, 6, 84, er], [_, "f", Ek, P, 82, 1], [_, "f", Ek, 6, 80, Co], [1, "f", 1, 6, 78, _], [1, "f", Ga, 6, 76, Ga], [1, "f", Nr, 6, 75, 1], [1, "f", 2, oq, 73, _], [1, "f", 2, P, 71, 1], [1, "f", 2, S, 69, Ni], [er, "f", 2, 6, 67, Ga], [er, "f", bq, 6, 65, Ni], [1, "f", 1, 6, 74, Ni], [Ga, "f", Co, $q, 72, 1], [er, "f", Ni, Ze, 70, 1], [1, "f", 1, 6, 68, Ni], [1, "f", 1, 6, 66, 1], [1, "f", er, 6, 64, 1], [1, "f", 2, 6, 63, 1], [ck, "f", qi, 6, 61, 1], [1, "f", X, Ze, 59, 1], [Co, "f", qo, 6, 57, 1], [er, "f", br, S, 55, Ga], [ck, "f", qo, S, 53, 1], [1, "f", qi, oq, 51, Ga], [Co, "f", 1, Oe, 62, 1], [1, "f", 1, 6, 60, 1], [Ek, "f", Ni, S, 58, _], [Ga, "f", ck, kk, 56, 1], [Ga, "f", 1, 6, 54, 1], [er, "f", er, U, 52, 1], [1, "f", 1, 6, 50, Ni], [ck, "f", ta, 6, 49, ck], [Ek, "f", 2, P, 47, 1], [ck, "f", 2, 6, 45, 1], [ck, "f", 2, $a, 43, 1], [Co, "f", 2, 6, 41, Ga], [_, "f", 2, 6, 39, Ek], [Co, "f", 1, $q, 48, ck], [_, "f", Ga, 6, 46, Co], [er, "f", 1, 6, 44, 1], [1, "f", 1, S, 42, Ni], [ck, "f", Ga, 6, 40, 1], [1, "f", Ga, 6, 38, 1], [1, "f", X, 6, 37, ck], [er, "f", qo, 6, 35, 1], [1, "f", 2, 6, 33, 1], [Co, "f", br, 6, 31, 1], [ck, "f", 2, 6, 29, Ga], [1, "f", 2, $q, 27, 1], [Ek, "f", 1, kk, 36, ck], [er, "f", 1, ya, 34, 1], [1, "f", Ni, 6, 32, ck], [ck, "f", Ek, kk, 30, 1], [Co, "f", 1, 6, 28, ck], [_, "f", 1, jq, 26, 1], [_, "f", 2, kk, 25, Ni], [Ek, "f", Nj, $q, 23, Co], [Co, "f", qo, S, 21, ck], [Ni, "f", br, 6, 19, er], [1, "f", Nj, kk, 17, 1], [Ek, "f", On, 6, 15, Ga], [_, "f", Ni, oq, 24, 1], [1, "f", 1, $q, 22, 1], [1, "f", _, 6, 20, Ni], [1, "f", er, 6, aa, Ga], [1, "f", 1, 6, 16, 1], [1, "f", 2, jq, 13, Ni], [1, "f", 2, $q, Jj, Co], [1, "f", 2, kk, eo, Ga], [ck, "f", 2, 6, 7, 1], [ck, "f", Ga, 6, ak, 1], [1, "f", 1, P, tq, Ek], [1, "f", er, ya, uj, ck], [_, "f", Ga, 6, 8, 1], [Ni, "f", 1, 6, U, 1], [Co, "f", 1, 8, 6, Ek], [1, "f", 2, Mn, 6, 1], [er, "f", On, 9, 6, _], [Ni, "f", 2, 11, Oe, Co], [Co, "f", 2, Ak, jq, Co], [er, "f", Nr, 15, S, er], [1, "f", 1, In, Oe, 1], [Ni, "f", 1, $e, ya, ck], [1, "f", 1, nq, Oe, 1], [1, "f", _, 16, 6, 1], [1, "f", 1, 18, kk, Ni], [1, "f", er, 20, 6, 1], [ck, "f", 1, 22, 6, Co], [er, "f", 1, 24, S, 1], [er, "f", 1, 26, 6, Ni], [1, "f", bq, 17, oq, er], [1, "f", br, 19, S, 1], [er, "f", 2, 21, S, 1], [1, "f", ta, 23, U, 1], [1, "f", 2, 25, P, 1], [1, "f", 2, 27, $q, Co], [1, "f", Nr, 29, 6, 1], [_, "f", 2, 31, 6, Ga], [1, "f", br, 33, 6, 1], [1, "f", Co, 28, 6, Ek], [1, "f", 1, 30, 6, _], [1, "f", Ni, 32, 6, ck], [Co, "f", 1, 34, kk, 1], [1, "f", 2, 67, 6, Ni], [Ga, "f", qi, 69, oq, ck], [er, "f", 2, 71, 6, Ga], [ck, "f", 2, 73, 6, Co], [Co, "f", bq, 75, S, 1], [ck, "f", _, 68, $q, 1], [Ga, "f", 1, 70, $a, Ga], [1, "f", 1, 72, ya, 1], [1, "f", Ga, 74, 6, 1], [ck, "f", _, 76, $a, Ek], [1, "f", ta, 77, 6, 1], [Ni, "f", On, 79, $q, 1], [1, "f", X, 81, $q, Ek], [1, "f", qo, 83, oq, er], [Ek, "f", 2, 85, jq, 1], [Ni, "f", er, 78, 6, 1], [er, "f", 1, 80, kk, 1], [Ni, "f", 1, 82, Ze, Ni], [Co, "f", ck, 84, 6, _], [1, "f", ck, 86, Oe, 1], [ck, "f", X, 87, 6, 1], [ck, "f", 2, 89, Ze, Ek], [Ni, "f", On, 91, 6, Ek], [Co, "f", ta, 93, 6, 1], [1, "f", Ek, 88, Oe, ck], [er, "f", Ga, 90, 6, er], [_, "f", Ek, 92, 6, Ga], [_, "f", Co, 94, 6, _], [1, "f", X, 95, 6, 1], [_, "f", Ni, 95, 7, 1], [er, "f", Ek, 83, 7, 1], [ck, "f", 1, 81, 7, 1], [ck, "f", 1, 79, 7, 1], [Ga, "f", Ek, 77, 7, _], [1, "f", Ni, 75, 7, Ga], [Ni, "f", 1, 73, wk, 1], [1, "f", Ni, 71, O, Ni], [1, "f", er, 69, Ia, 1], [1, "f", 1, 33, Ji, 1], [1, "f", Ni, 31, 7, Co], [1, "f", Ni, 29, 7, 1], [Ga, "f", Ek, 27, Mn, Ni], [1, "f", 1, 25, 7, 1], [_, "f", 1, 23, Ia, 1], [Ga, "f", _, 21, wk, er], [Co, "f", Ek, wn, 7, er], [ck, "f", 1, 17, 7, _], [Ga, "f", ck, 15, 7, Ni], [1, "f", 1, fr, Ji, 1], [1, "f", _, V, 7, Ga], [1, "f", Ga, eo, 7, _], [1, "f", 1, 7, Mn, 1], [1, "s", 0, Ia, k, ck], [er, "t", yn, 7, 174, 0], [Ga, "t", 5, O, 175, Fj], [ck, "t", cq, 7, 176, xq], [1, "b", 2, 7, 177, 0], [1, "t", 3, 94, 301, 0], [ck, "b", wi, 95, 301, 0], [1, "t", 4, 96, 301, Aa], [Ni, "t", Co, 97, 301, 0], [1, "t", qo, 98, 301, 0], [1, "t", 4, 99, 301, Qr], [er, "t", 2, 100, 301, yj], [1, "t", 4, 96, 304, 0], [_, "t", Nj, 96, 302, 0], [er, "t", bq, 97, 304, Qr], [1, "t", 2, 96, 303, 0], [Ni, "t", 5, 97, 303, 0], [1, "t", 5, 98, 304, 0], [Ga, "b", 2, 97, 302, Qr], [1, "b", On, 99, 304, Gk], [1, "t", 1, 98, 303, tj], [1, "t", $j, 98, 302, Qr], [Ni, "t", 4, 99, 303, Gk], [ck, "t", 4, I, 304, Qr], [1, "t", ko, 99, 302, 0], [Co, "t", zr, 101, 303, 0], [er, "t", 2, 100, 303, yj], [er, "t", tj, ba, 302, 0], [Co, "t", 0, 101, 304, Gk], [1, "t", cq, 102, 304, 0], [Ga, "f", 0, 94, 7, ck], [_, "f", Ek, 93, 7, Co], [ck, "f", ck, 92, wk, 1], [Ga, "f", Qr, 91, Nn, 1], [_, "f", 1, 90, 7, _], [1, "f", 1, 89, 7, Ni], [1, "f", 0, 88, 7, ck], [1, "f", _, 87, 7, Ek], [Ga, "f", ck, 86, O, 1], [_, "f", 1, 85, wk, 1], [1, "f", Aa, 84, 7, Ga], [Ga, "f", er, 82, Mn, ck], [1, "f", 0, 80, 7, 1], [1, "f", 1, 78, wk, 1], [Ga, "f", Fj, 76, 7, _], [Ni, "f", 1, 74, 7, 1], [1, "f", tj, 72, Sq, Ek], [Co, "f", 0, 70, 7, 1], [1, "f", Ek, 68, Nn, Co], [Ni, "f", 1, 32, Ia, ck], [Ek, "f", Qr, 30, 7, 1], [Ni, "f", 1, 28, 7, 1], [Ni, "f", yj, 26, Sq, Co], [1, "f", 1, 24, Sq, Ga], [Ga, "f", An, 22, wk, 1], [1, "f", Ga, 20, wk, _], [1, "f", 0, Ki, Ji, 1], [Ga, "f", 1, 16, 7, 1], [1, "f", 0, 14, 7, 1], [_, "f", 1, 12, Ia, 1], [1, "f", 0, Vq, 7, Ni], [Ni, "f", 1, 8, wk, Ga], [1, "s", 1, 7, 9, 1], [1, "f", 0, 95, 152, _], [_, "f", Ek, 95, 151, 1], [1, "f", 0, 95, Rr, 1], [1, "f", ck, 95, 12, Ni], [1, "f", 1, 95, 14, 1], [1, "f", 1, 95, Wi, 1], [1, "f", 0, 95, 15, Ga], [1, "f", 0, 95, 20, 1], [_, "f", Ni, 95, 21, 1], [1, "f", _, 95, 26, 1], [1, "f", ck, 95, 37, 1], [ck, "f", Gk, 95, 44, 1], [1, "f", _, 95, 50, 1], [1, "f", 1, 95, 52, 1], [Ek, "f", 0, 95, 53, 1], [_, "f", 1, 95, 54, ck], [Co, "f", 1, 95, 62, 1], [Ga, "f", 0, 95, 55, 1], [1, "f", 1, 95, 64, Ek], [1, "f", 0, 95, 58, Co], [1, "f", 0, 95, 61, 1], [_, "f", Fj, 95, 68, Co], [Ni, "f", 0, 95, 72, Ni], [Ek, "f", Gk, 95, 78, er], [1, "f", Co, 95, 115, 1], [1, "f", Ni, 95, 117, 1], [1, "f", 1, 95, 128, Ni], [er, "f", Qr, 95, 85, 1], [1, "f", 0, 95, 91, Ek], [er, "f", 0, 95, 95, 1], [1, "f", yj, 95, 114, 1], [_, "f", 2, 95, 113, 1], [1, "f", 1, 95, 119, 1], [Co, "f", 0, 95, 120, 1], [Ek, "f", 1, 95, 121, Ek], [er, "f", Gk, 95, 127, Ni], [ck, "f", 1, 95, 130, 1], [er, "f", An, 95, 131, er], [1, "f", 1, 95, 132, ck], [Ga, "f", 1, 95, 136, er], [Ni, "f", 0, 95, 137, Ni], [Ek, "f", 0, 95, 143, Ek], [1, "f", Gk, 95, 147, 1], [1, "f", 1, 95, 138, ck], [1, "f", Co, 95, 144, 1], [1, "f", Ek, 95, 10, ck], [er, "f", Qr, 95, 8, 1], [ck, "f", Co, 95, 9, 1], [1, "f", 0, 95, fr, _], [1, "f", 1, 95, Qe, _], [Ek, "f", 1, 95, fq, ck], [1, "f", xq, 95, 18, Co], [_, "f", er, 95, 45, _], [Co, "f", yj, 95, 51, Ga], [1, "f", er, 95, 56, 1], [1, "f", 1, 95, 57, Ga], [er, "f", 1, 95, 59, 1], [Ni, "f", 1, 95, 60, 1], [Ga, "f", 1, 95, 63, 1], [Ga, "f", 0, 95, 65, Ga], [1, "f", er, 95, 66, Ni], [er, "f", 1, 95, 67, er], [1, "f", ck, 95, 69, 1], [1, "f", 1, 95, 70, 1], [Ni, "f", Aa, 95, 71, 1], [Ek, "f", 1, 95, 73, er], [Ni, "f", Co, 95, 74, _], [1, "f", 0, 95, 75, 1], [Co, "f", er, 95, 76, 1], [1, "f", 1, 95, 77, 1], [er, "f", 1, 95, 79, 1], [ck, "f", 1, 95, 80, Ek], [ck, "f", tj, 95, 81, Ek], [ck, "f", _, 95, 82, Ni], [Ga, "f", 0, 95, 83, 1], [Ni, "f", 1, 95, 84, 1], [1, "f", 1, 95, 86, 1], [Co, "f", 1, 95, 88, 1], [1, "f", Aa, 95, 87, 1], [Ek, "f", 1, 95, 89, 1], [Ni, "f", Co, 95, 90, Ni], [1, "f", 1, 95, 92, Ek], [Ga, "f", Co, 95, 93, Ni], [1, "f", 1, 95, 94, Ek], [1, "f", Ek, 95, 96, Ni], [1, "f", Ga, 95, 97, 1], [1, "f", xq, 95, 98, 1], [_, "f", ck, 95, 99, _], [1, "f", Co, 95, xo, Ni], [1, "f", 0, 95, 101, 1], [Ek, "f", er, 95, 102, Ga], [1, "f", Aa, 95, 103, 1], [_, "f", _, 95, 104, Ek], [1, "f", 1, 95, 105, _], [1, "f", Qr, 95, 106, 1], [1, "f", 1, 95, 107, Ni], [Ga, "f", er, 95, 108, 1], [1, "f", 1, 95, 109, ck], [Ga, "f", yj, 95, 110, er], [er, "f", ck, 95, 111, 1], [1, "f", 0, 95, 112, 1], [1, "f", 1, 95, 116, _], [1, "f", Gk, 95, 118, _], [Ga, "f", 0, 95, 122, _], [1, "f", 1, 95, 123, 1], [1, "f", 1, 95, 124, er], [Co, "f", 0, 95, 125, 1], [1, "f", 1, 95, 126, 1], [Ek, "f", Ni, 95, 129, Ek], [Ni, "f", 1, 95, 133, Co], [1, "f", yj, 95, 134, ck], [er, "f", 1, 95, 135, 1], [1, "f", 1, 95, 139, 1], [er, "f", 0, 95, 140, 1], [er, "f", Ni, 95, 141, 1], [1, "f", _, 95, 142, 1], [1, "f", 1, 95, 146, Ni], [1, "f", xq, 95, 145, 1], [1, "f", _, 95, 148, Ni], [1, "f", Co, 95, 149, er], [ck, "f", 1, 95, 150, 1], [Co, "f", 1, 95, 153, 1], [er, "cs", Gk, 64, Hr, _], [_, "cs", 1, 64, 10, er], [_, "cs", tk, 64, 16, 1], [Ek, "cs", 2, 64, 19, Co], [ck, "cs", 0, 64, 20, 1], [Co, "cs", ck, 64, 21, 1], [er, "cs", 2, 64, 22, 1], [1, "cs", Gk, 64, 23, Co], [1, "cs", Nj, 64, 24, Ni], [Co, "cs", _, 64, 29, Ek], [Ni, "cs", Nj, 64, 30, 1], [Ga, "cs", Rn, 64, 31, Ni], [Ni, "cs", yj, 64, 32, 1], [1, "cs", ck, 64, 33, 1], [Ni, "cs", On, 64, 34, Ek], [_, "cs", Fj, 64, 35, 1], [1, "cs", 2, 64, 8, 1], [Co, "cs", ta, 65, Ma, Ek], [Co, "cs", 1, 65, 9, _], [_, "cs", Nj, 65, Vq, 1], [Ek, "cs", 3, 65, qn, 1], [1, "cs", Ni, 65, 16, 1], [1, "cs", xq, 64, fq, 1], [Ga, "cs", 3, 65, 17, Ek], [ck, "cs", 2, 64, po, Ni], [1, "cs", 2, 65, 18, 1], [Ga, "cs", 0, 65, D, 1], [1, "cs", 1, 65, Pn, Ek], [1, "cs", Lq, 65, 21, 1], [Ek, "cs", 2, 65, 22, Co], [Ga, "cs", 3, 65, 23, _], [er, "cs", Fj, 65, 24, 1], [1, "cs", 2, 65, 29, 1], [1, "cs", 3, 65, 30, 1], [Ni, "cs", 0, 65, 31, 1], [1, "cs", 1, 65, 32, ck], [1, "cs", On, 65, 33, 1], [1, "cs", 3, 65, 34, 1], [ck, "cs", On, 63, 9, 1], [1, "cs", Qr, 62, eo, Ni], [Ga, "cs", 2, 61, 9, 1], [_, "cs", Aa, 60, 9, 1], [1, "cs", 2, 59, eo, Ni], [Ga, "cs", tk, 58, 9, Ni], [1, "cs", 0, 57, Xq, 1], [1, "cs", 2, 56, J, Ek], [1, "cs", qi, 55, 9, 1], [1, "cs", 2, 54, 9, 1], [1, "cs", 0, 53, 9, ck], [Ek, "cs", 0, 51, 9, _], [1, "cs", 2, 52, 9, Ni], [1, "cs", tk, 50, 9, 1], [ck, "cs", 2, 48, 9, 1], [Ni, "cs", 2, 49, J, Ga], [er, "cs", 0, 47, zk, Ga], [ck, "cs", Aa, 45, 9, ck], [1, "cs", 0, 43, zo, 1], [1, "cs", Nr, 46, eo, Ga], [1, "cs", 2, 44, zk, ck], [Ga, "cs", 2, 42, 9, ck], [Co, "cs", 2, 41, 9, 1], [_, "cs", 0, 40, 9, ck], [er, "cs", 2, 39, 9, 1], [er, "cs", On, 38, 9, Ni], [Ga, "cs", 0, 37, eo, 1], [Ni, "cs", 0, 63, 8, Ek], [1, "cs", 2, 65, 7, 1], [1, "cs", wi, 64, 7, _], [1, "cs", tk, 62, 8, 1], [1, "cs", wi, 61, Je, Ga], [1, "cs", _, 62, 7, 1], [_, "cs", 2, 63, 7, Co], [1, "cs", yj, 64, oq, ck], [Ga, "cs", Qn, 65, jq, 1], [ck, "cs", Nr, 63, 6, 1], [Ni, "cs", 2, 62, ya, er], [Ga, "cs", br, 61, 6, 1], [ck, "cs", 2, 60, P, 1], [1, "cs", On, 59, 6, 1], [1, "cs", 2, 61, Bk, 1], [1, "cs", Fj, 60, 7, er], [1, "cs", Nr, 60, Ko, er], [Co, "cs", 2, 59, Ia, 1], [1, "cs", On, 59, Ma, 1], [Co, "cs", 1, 58, 8, _], [1, "cs", ck, 57, $q, 1], [1, "cs", 1, 55, 7, er], [1, "cs", 0, 56, 6, Co], [1, "cs", X, 58, 6, _], [1, "cs", 2, 58, Ia, _], [1, "cs", 2, 57, wk, 1], [Ga, "cs", 2, 56, 7, 1], [1, "cs", 2, 55, 6, _], [Co, "cs", 2, 57, Ma, 1], [Co, "cs", 2, 56, Nk, 1], [ck, "cs", Nr, 55, Hk, Ni], [1, "cs", xq, 54, 8, 1], [Ni, "cs", Qr, 50, wk, 1], [1, "cs", 0, 53, S, Ni], [1, "cs", 2, 54, 6, Ga], [1, "cs", Nr, 54, 7, 1], [1, "cs", tk, 53, O, ck], [1, "cs", qi, 52, Ia, 1], [Ga, "cs", 2, 52, oq, ck], [1, "cs", 1, 52, 8, 1], [Ni, "cs", Nj, 53, Da, Co], [1, "cs", 2, 51, 8, 1], [Co, "cs", 2, 51, 7, 1], [Ga, "cs", Nj, 51, 6, Co], [1, "cs", ta, 50, 6, 1], [1, "cs", X, 50, Wq, 1], [Ga, "cs", br, 49, Ko, 1], [Ni, "cs", Nr, 49, Ji, ck], [1, "cs", 2, 49, U, 1], [Ni, "cs", Fj, 46, 7, er], [1, "cs", Ga, 48, Nk, 1], [1, "cs", _, 44, Mn, ck], [1, "cs", 1, 41, Da, 1], [1, "cs", 2, 48, Nn, _], [Ek, "cs", bq, 48, U, Ga], [Ek, "cs", 2, 47, oq, 1], [1, "cs", ta, 47, Nn, Co], [1, "cs", qi, 47, 8, Ek], [Ni, "cs", 2, 46, 8, 1], [1, "cs", 2, 45, Nk, Ga], [_, "cs", qo, 45, Bk, Co], [Ga, "cs", X, 45, 6, 1], [1, "cs", 2, 46, 6, 1], [1, "cs", 2, 44, 6, ck], [1, "cs", 2, 44, 8, 1], [1, "cs", 2, 43, Hk, Ni], [Ek, "cs", 2, 43, 7, 1], [Ga, "cs", ta, 43, 6, 1], [ck, "cs", X, 42, 6, Ni], [Ga, "cs", 2, 42, Bk, 1], [1, "cs", On, 42, 8, Co], [Ni, "cs", qo, 41, Sq, Ni], [ck, "cs", 2, 41, Ze, Ek], [Ga, "cs", 2, 40, jq, 1], [1, "cs", X, 40, Ji, Ga], [1, "cs", br, 40, Wq, 1], [Ek, "cs", 2, 39, Kn, 1], [Co, "cs", Fj, 39, 7, 1], [Co, "cs", 1, 38, 8, 1], [Ek, "cs", qo, 39, 6, _], [Ni, "cs", 2, 38, Ze, _], [1, "cs", tk, 37, P, 1], [1, "cs", qo, 38, 7, ck], [Ni, "cs", tk, 37, 7, 1], [1, "cs", ta, 37, Ma, Ek], [1, "cs", bq, 37, 10, 1], [1, "cs", X, 38, 10, Ni], [Co, "cs", 0, 38, 11, 1], [1, "cs", 0, 38, 17, _], [Ni, "cs", ck, 37, Ki, Ek], [ck, "cs", 0, 38, Sn, Ga], [_, "cs", 2, 37, Vo, 1], [1, "cs", 2, 37, q, 1], [ck, "cs", ta, 37, 17, Ga], [Ek, "cs", Nr, 38, Dk, 1], [_, "cs", 2, 37, D, 1], [1, "cs", Lq, 38, 16, 1], [1, "cs", xq, 37, 21, 1], [Co, "cs", 0, 38, 22, _], [1, "cs", Fj, 38, 24, 1], [Ni, "cs", qo, 37, mr, 1], [er, "cs", Nj, 38, Pn, 1], [_, "cs", br, 38, 21, 1], [1, "cs", Ni, 37, 23, Ek], [Ek, "cs", 3, 37, 22, 1], [er, "cs", Qn, 38, 23, 1], [1, "cs", 2, 37, 24, 1], [Ga, "cs", Fj, 38, 30, Ni], [_, "cs", 0, 38, 32, Ga], [Ga, "cs", tj, 37, 31, Co], [ck, "cs", 1, 38, 34, 1], [1, "cs", Ga, 37, 29, 1], [1, "cs", tk, 38, 29, Ni], [ck, "cs", X, 37, 30, 1], [1, "cs", 2, 38, 31, 1], [1, "cs", 2, 37, 32, er], [1, "cs", 3, 38, 33, 1], [er, "cs", wi, 38, 35, Ga], [Co, "cs", bq, 37, 33, 1], [1, "cs", 2, 36, Wq, ck], [1, "cs", 0, 36, 11, er], [_, "cs", Qr, 35, Pj, Ni], [1, "cs", 2, 36, J, _], [1, "cs", 2, 36, In, 1], [1, "cs", bq, 35, 10, Ni], [er, "cs", 1, 33, 8, 1], [1, "cs", Hn, 34, 9, 1], [1, "cs", 3, 35, k, 1], [1, "cs", bq, 34, Nk, 1], [Ek, "cs", 0, 36, 7, 1], [Ek, "cs", 1, 34, 7, 1], [Ek, "cs", br, 35, Nn, 1], [1, "cs", qi, 35, Oe, _], [1, "cs", br, 36, 6, 1], [Ek, "cs", 2, 68, 9, Ga], [1, "cs", On, 66, iq, 1], [ck, "cs", Z, 66, 9, Co], [1, "cs", Gk, 67, 9, 1], [1, "cs", An, 66, $o, Ni], [Co, "cs", 2, 67, 8, Co], [_, "cs", _, 68, 8, 1], [1, "cs", Ni, 66, Vo, Ga], [1, "cs", X, 67, uj, er], [Ga, "cs", 0, 66, $q, Ga], [Co, "cs", 2, 66, Ia, 1], [1, "cs", 2, 67, wk, 1], [er, "cs", Nr, 69, Ma, ck], [1, "cs", 2, 63, 32, 1], [1, "cs", ta, 62, 34, ck], [1, "cs", 2, 60, 35, er], [Ni, "cs", Lq, 59, 35, Co], [er, "cs", Aa, 61, 35, 1], [1, "cs", Aa, 63, 34, er], [Ga, "cs", 2, 63, 33, 1], [1, "cs", tk, 63, 35, ck], [_, "cs", 2, 62, 35, Ni], [Ga, "cs", qo, 58, 36, ck], [Ek, "cs", er, 59, 36, _], [Co, "cs", Ek, 62, 36, 1], [_, "cs", 2, 60, 36, 1], [1, "cs", Nj, 61, 34, 1], [ck, "cs", Er, 62, 33, 1], [ck, "cs", Lq, 63, 36, 1], [er, "cs", Z, 61, 36, _], [1, "cs", 0, 42, 36, ck], [1, "cs", Co, 39, 36, 1], [1, "cs", X, 41, 36, 1], [Ek, "cs", wi, 39, 35, 1], [1, "cs", 3, 40, 36, 1], [Ga, "cs", 3, 43, 36, 1], [1, "cs", Ga, 40, 35, Ek], [er, "cs", 2, 41, 35, ck], [1, "cs", 2, 40, 34, er], [1, "cs", qi, 39, 34, Ni], [1, "cs", 2, 39, 33, 1], [1, "cs", 2, 39, 32, 1], [er, "cs", 0, 40, 33, Co], [Ga, "cs", qi, 41, 34, Ek], [1, "cs", 1, 44, 36, Co], [Ga, "cs", 3, 43, 35, ck], [ck, "cs", tk, 42, 35, Ek], [Ek, "cs", 0, 37, 34, ck], [1, "cs", wi, 59, 30, ck], [Ni, "cs", tj, 60, 29, 1], [1, "cs", On, 60, 28, 1], [1, "cs", 3, 60, 27, Ek], [1, "cs", 0, 60, 26, 1], [_, "cs", qo, 54, 25, 1], [_, "cs", Nr, 48, 25, 1], [Ga, "cs", 2, 42, 26, _], [Co, "cs", An, 55, 25, Ek], [Co, "cs", 2, 59, 26, Ga], [ck, "cs", 0, 43, 26, 1], [1, "cs", 1, 42, 27, 1], [ck, "cs", bq, 42, 28, _], [1, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, Ga], [1, "cs", Gk, 54, 24, 1], [1, "cs", An, 48, 24, 1], [Ga, "cs", X, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [Ga, "cs", Nr, 63, 22, 1], [1, "cs", 2, 63, 21, 1], [er, "cs", 2, 39, 21, 1], [1, "cs", 3, 57, 18, Ek], [1, "cs", 2, 56, 18, 1], [1, "cs", 3, 51, 21, Ga], [Co, "cs", tj, 51, 20, er], [Co, "cs", 2, 51, xj, Ga], [Ek, "cs", nk, 51, 18, 1], [1, "cs", 2, 63, 16, 1], [_, "cs", 2, 63, 10, 1], [1, "cs", 2, 56, Nq, ck], [er, "cs", Rn, 57, 13, 1], [Ga, "cs", Co, 45, Dq, Ek], [1, "cs", Nr, 47, po, 1], [1, "cs", tk, 46, 18, Ek], [_, "cs", Aa, 46, 13, 1], [er, "cs", 2, 45, sn, 1], [1, "cs", 2, 39, Li, _], [1, "cs", X, 39, wr, Ni], [Co, "cs", 2, 47, 17, er], [_, "a", 0, 51, _q, Ni], [ck, "a", Co, 53, Ur, Co], [_, "a", Ga, 49, G, 1], [1, "de", 8, 55, nr, 0], [Ni, "de", 9, 48, 28, xq], [er, "de", 10, 58, 26, xq], [_, "de", Ik, 59, 29, yj], [_, "de", 11, 55, 34, 0], [1, "de", uj, 48, 33, 0], [1, "de", 9, 41, 32, Fj], [1, "de", 9, 56, 24, 0], [er, "de", 9, 62, Ar, Fj], [1, "de", zo, 45, dn, 0], [_, "de", 9, 44, 17, 0], [1, "de", vq, 44, fr, xq], [1, "de", iq, 58, 13, 0], [1, "de", 10, 63, 31, 0], [er, "de", Da, 60, 30, 0], [1, "de", 8, 43, 26, 0], [1, "de", F, 43, 29, Fj], [1, "de", 10, 53, 29, yj], [1, "de", Vq, 53, 24, yj], [1, "de", Pj, 53, Dn, tj], [1, "de", 11, 49, 19, Gk], [1, "de", Vq, 39, 26, xq], [1, "de", 9, 46, 24, 0], [Ni, "de", 9, 62, 10, xq], [Co, "de", $o, 40, 14, 0], [1, "de", 32, 55, 35, 0], [er, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, 0], [er, "de", 32, 63, 24, xq], [_, "de", 32, 58, 22, Gk], [Ek, "de", 32, 59, 17, tj], [Ek, "de", 32, 63, mn, 0], [Ni, "de", 32, 59, 10, Aa], [1, "de", 32, 56, 12, 0], [1, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, Fj], [Ni, "de", 32, 39, 12, tj], [1, "de", 32, 39, Mr, 0], [_, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, yj], [1, "de", 32, 50, 29, 0], [Co, "de", 32, 43, 34, 0], [Ek, "de", 32, 47, 34, An], [_, "de", 31, 54, 33, Fj], [er, "de", 31, 59, 24, Qr], [er, "de", 31, 63, Qq, 0], [Ga, "de", 31, 47, Wa, 0], [1, "de", 31, 43, ji, 0], [1, "de", 31, 39, 27, 0], [1, "de", 31, 48, 27, Gk], [_, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, An], [er, "d", Qr, j, 13, 1], [ck, "d", 0, 89, 13, 1], [1, "d", 1, 91, 21, Ni], [1, "d", 1, F, 22, _], [1, "f", On, 89, aa, 1], [1, "f", Gk, 88, wn, Ga], [_, "g", ck, 85, 22, 1], [1, "s", 1, 90, 29, Ek], [1, "s", 1, 92, 15, 1], [1, "s", Fj, 91, 31, 1], [1, "s", 2, 90, 38, Ni], [Ni, "s", 0, 91, 42, Ni], [ck, "s", 0, 90, 49, Ga], [Ek, "f", Ga, 86, 43, 1], [1, "f", xq, 81, 45, 1], [1, "f", 2, 66, 44, er], [1, "f", bq, 55, 49, Ni], [_, "f", _, 54, 50, 1], [1, "f", 2, 43, 45, Ni], [1, "f", 2, 31, 48, 1], [1, "f", Ek, 27, 39, Co], [_, "f", Co, 80, 46, 1], [1, "f", 1, 69, 48, 1], [er, "g", An, 80, 40, 1], [ck, "g", X, 81, 40, 1], [1, "s", 2, 77, 39, Ga], [1, "s", yj, 68, 43, 1], [Ga, "s", 2, 57, 41, Ga], [Ni, "s", er, 56, 42, 1], [ck, "s", Co, 40, 41, ck], [Ni, "s", 2, 48, 48, er], [ck, "f", 2, 17, 12, 1], [1, "f", 0, Ak, 31, er], [1, "f", Co, Cn, 32, 1], [1, "s", 0, ai, 27, Ga], [er, "s", 0, fr, 39, ck], [_, "f", 2, rr, go, ck], [1, "f", Ga, 12, L, 1], [Ni, "g", Nj, 12, 25, ck], [1, "f", Qr, 16, 45, Co], [1, "f", 1, 17, 46, _], [Ga, "s", ck, 74, 48, 1], [1, "s", er, Pn, 47, Co], [1, "g", 0, 58, 59, Ek], [1, "g", 0, 46, 72, ck], [Co, "g", 0, 69, 79, ck], [1, "g", An, 72, 74, 1], [1, "g", yj, 26, 88, 1], [1, "g", tj, Sk, 74, Ga], [1, "g", 0, 28, 67, ck], [1, "g", Aa, 49, 86, Co], [Ni, "g", 0, 77, 90, 1], [Co, "g", 0, 87, 72, 1], [er, "g", 0, 14, 85, 1], [Ek, "g", 1, 85, 97, Ek], [1, "g", 1, 68, 104, Ek], [Co, "g", 1, 63, 91, _], [1, "g", Co, 39, 90, ck], [1, "g", Ek, 34, 99, 1], [ck, "g", 1, 17, 103, Co], [1, "g", X, 77, 60, 1], [ck, "g", 2, Sn, 56, 1], [1, "g", Nr, 39, 60, 1], [ck, "g", tk, 87, 57, 1], [1, "f", 0, gn, 62, ck], [ck, "f", 0, $e, 81, 1], [er, "f", 0, 26, 59, 1], [1, "f", Qr, 35, 53, 1], [1, "f", 0, 44, 58, er], [1, "f", tj, 88, 62, 1], [1, "f", 0, 91, 82, er], [Ek, "f", 0, 84, 85, _], [Ni, "f", tj, 79, 69, _], [1, "f", 0, 64, 71, 1], [1, "f", yj, 62, 83, Co], [1, "f", An, 34, 81, 1], [Ek, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, Ni], [Ek, "f", 1, 81, 70, _], [1, "f", Ni, 91, 72, Co], [_, "f", 1, Nk, 91, _], [Co, "f", Ni, ak, 81, 1], [Ek, "f", 1, 29, 79, Ni], [Ga, "f", _, wa, 65, Ek], [1, "f", er, 46, 97, er], [Ga, "f", Ni, 43, 73, Ga], [1, "f", 1, 60, 69, 1], [Ni, "f", _, 70, 96, 1], [Ga, "f", Ga, 58, 84, _], [ck, "s", ck, 56, 76, 1], [Ek, "s", Ga, 85, 74, 1], [er, "s", 0, 72, 71, _], [_, "s", Fj, 41, 62, Ni], [1, "s", 0, 60, 61, 1], [1, "s", Aa, zq, 66, 1], [Co, "s", 0, 47, 83, Co], [Ek, "s", 0, 29, 86, 1], [Ni, "s", Gk, 78, 92, Ga], [1, "s", 0, 62, 102, 1], [1, "s", Fj, 18, 95, _], [Ni, "s", 2, 64, 101, 1], [1, "s", 2, 78, 84, Ga], [ck, "s", Nr, 49, 83, 1], [Co, "s", X, 15, 76, Ga], [Co, "s", X, 21, 84, Ni], [1, "f", Co, 26, 94, Ek], [Ek, "f", 2, 23, 96, 1], [er, "f", ta, 25, 72, ck], [1, "f", qo, 85, 77, Co], [er, "f", 2, 79, 95, Ek], [1, "f", X, 51, 65, Ni], [1, "f", Nr, 69, 60, ck], [1, "f", 1, 25, 105, er], [Ni, "s", Ni, 18, 68, Ek], [Ni, "s", 0, 55, 76, Ek], [1, "s", 0, 74, 59, 1], [1, "f", ck, 46, 142, 1], [Ga, "f", Ek, Wi, 140, 1], [1, "f", 1, 77, 137, 1], [_, "f", 0, 75, 137, 1], [1, "f", Gk, 55, 138, Ni], [ck, "f", yj, 33, 127, 1], [Ek, "f", Fj, 76, 121, 1], [1, "f", Aa, 55, 121, Co], [1, "f", 0, C, 123, _], [Ek, "f", Qr, 18, 141, Co], [Co, "f", 0, 40, 137, _], [1, "f", qo, 76, 142, 1], [er, "f", X, 57, 140, ck], [er, "f", qi, 39, 138, Co], [1, "f", Nj, 16, 143, ck], [er, "f", br, 29, 131, 1], [1, "f", Qr, 70, 150, 1], [er, "f", 0, 28, 146, 1], [ck, "f", Gk, vo, 132, Ga], [1, "f", 0, 90, 129, 1], [Ni, "f", 1, 87, 131, ck], [1, "f", 0, 91, 143, Ni], [_, "f", 2, 87, 145, 1], [1, "f", er, 89, 141, Ga], [ck, "f", Ga, 63, 130, 1], [1, "f", 1, 75, 122, er], [1, "f", 1, 52, 124, 1], [1, "f", er, 34, 127, 1], [ck, "f", 1, 14, 123, Ek], [1, "f", ck, 24, 122, Ek], [1, "f", Fj, 83, 108, 1], [1, "f", An, 89, 118, Co], [1, "f", Qr, 56, 107, 1], [_, "f", tj, 38, 113, 1], [1, "f", 0, q, 110, ck], [_, "f", Ni, 80, 105, Ga], [1, "f", 1, 82, 109, er], [_, "f", Ek, 87, 118, Ek], [Ga, "f", 1, 59, 110, 1], [1, "f", 1, 29, 111, 1], [_, "f", 2, 28, 112, Ga], [1, "f", br, 70, 112, _], [Ni, "f", 2, 42, 111, ck], [1, "s", Aa, 68, 157, _], [Ni, "s", 0, 81, 158, ck], [1, "s", 0, 25, 172, _], [Ga, "s", 0, 22, 161, 1], [ck, "s", Qr, 35, 152, Ek], [Ga, "s", 0, 66, 144, er], [1, "s", An, 87, 145, 1], [_, "s", An, 86, 145, 1], [Ek, "s", Fj, 84, 135, Ek], [1, "s", tj, 69, 133, Co], [1, "s", 0, 84, 122, 1], [1, "s", 0, 68, 121, Ga], [1, "s", Gk, 48, 124, 1], [Ek, "s", yj, 26, 129, 1], [1, "s", 0, 9, 127, Ga], [1, "s", 0, rr, 144, 1], [er, "s", 0, 9, 109, 1], [Ga, "s", tj, 35, 101, 1], [1, "s", 0, 47, 109, Ni], [Ek, "s", yj, 58, 111, Ni], [1, "s", 0, 84, 110, ck], [1, "s", 0, 28, 114, 1], [Ek, "s", 1, 30, 116, _], [1, "s", 1, 46, 112, _], [1, "s", 1, 81, 111, 1], [1, "s", er, 70, 123, 1], [ck, "s", Ga, 49, 127, 1], [Co, "s", er, 66, 134, Ni], [1, "s", 1, 67, 144, 1], [1, "s", Ek, 38, 152, Co], [Ni, "s", 1, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, Ga], [1, "s", 1, ne, 125, 1], [1, "s", 1, 65, 158, 1], [1, "s", 1, 83, 167, Co], [1, "s", Co, 65, 167, 1], [1, "s", ck, 47, 164, ck], [Ek, "s", 1, 56, 168, Ga], [er, "s", 2, 54, 169, 1], [Ni, "s", X, 88, 170, 1], [1, "s", On, 91, 162, 1], [Ek, "s", Nr, 79, 149, er], [_, "s", On, 75, 144, 1], [Ga, "s", 2, 57, 150, er], [Ga, "s", Nr, 47, 143, 1], [1, "s", 2, 31, 145, ck], [1, "s", bq, 36, 138, 1], [ck, "s", On, iq, 163, ck], [Co, "s", 2, 22, 142, 1], [er, "g", Nj, 78, 132, 1], [_, "g", 1, 48, 135, er], [er, "g", 2, Ci, 136, 1], [_, "g", yj, 62, 92, 1], [1, "g", 2, 70, 80, Ga], [1, "g", X, Wa, 86, 1], [1, "g", ta, 47, 75, Ga], [Co, "g", 2, 36, 89, 1], [1, "g", ta, 80, 90, 1], [1, "f", er, 39, 118, Ga], [ck, "d", 2, 84, 54, 1], [Co, "d", ta, on, 54, Ga], [1, "de", 7, io, sn, tj], [1, "de", Ij, Ci, 28, yj], [1, "de", zr, 9, 25, An], [er, "de", un, 34, 41, Gk], [Ga, "de", 4, 28, 40, 0], [1, "de", U, 31, 47, tj], [Co, "de", kk, ca, 39, Gk], [1, "de", Oa, 16, 47, yj], [1, "de", 4, wk, 46, 0], [1, "de", 6, Ji, 33, 0], [er, "de", Oe, 40, 42, tj], [1, "de", 7, 20, 48, 0], [Co, "de", Ji, 29, 59, Fj], [Co, "de", Oe, 27, 58, 0], [ck, "de", oq, Zq, 54, 0], [ck, "de", un, 12, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", oe, 10, 63, Qr], [1, "de", 7, 49, 48, yj], [1, "de", 7, 37, 63, xq], [ck, "de", S, 33, 68, 0], [Ga, "de", 6, 56, 52, 0], [ck, "de", Ij, 59, 58, 0], [ck, "de", 6, 48, 58, 0], [1, "de", 4, 53, 63, Fj], [Ek, "de", $j, 67, 44, yj], [er, "de", 5, 70, 49, 0], [er, "de", ie, 82, 55, 0], [Co, "de", 5, 79, 41, Fj], [1, "de", 5, 91, 29, Fj], [1, "de", Nn, 91, 43, 0], [Ga, "de", 6, 85, 44, 0], [1, "de", ya, 74, 60, 0], [1, "de", 6, 90, 8, 0], [Ga, "de", ko, 91, 15, 0], [Ni, "de", co, 87, rq, 0], [1, "de", Ji, 93, Ik, An], [1, "de", jq, 91, 21, An], [_, "de", 6, 85, 35, tj], [1, "de", _j, 93, 58, 0], [1, "de", 5, 87, 63, 0], [Ga, "de", 7, 77, 62, Aa], [1, "de", P, 68, 61, 0], [Ek, "de", un, 90, 73, xq], [1, "de", $j, 87, 71, Gk], [er, "de", wk, 80, 71, 0], [1, "de", Ia, 83, 77, 0], [1, "de", 7, 89, 83, 0], [Ga, "de", co, 71, 80, An], [1, "de", 4, 71, 70, yj], [1, "de", 5, 63, 72, 0], [_, "de", 4, 54, 75, 0], [1, "de", 5, 44, 83, 0], [1, "de", _j, 42, 74, 0], [er, "de", Sj, 15, 81, Gk], [Ek, "de", 4, 29, 80, Aa], [1, "de", 4, 37, 90, 0], [Ek, "de", cq, Sq, 75, Qr], [ck, "de", 6, 22, 74, xq], [1, "de", 6, 43, 95, 0], [er, "de", $q, 57, 85, 0], [Co, "de", kk, 19, 94, 0], [1, "de", $q, 9, 92, 0], [Ga, "de", 5, 26, 89, Aa], [Ek, "de", un, 31, 112, 0], [_, "de", Ij, 54, 108, 0], [1, "de", 5, 55, 95, Fj], [Ni, "de", zr, 35, 104, yj], [Ek, "de", Sj, Ak, 110, An], [Co, "de", O, 27, 107, 0], [Ga, "de", 7, 47, 99, 0], [1, "de", 7, rr, 104, yj], [_, "de", Ia, Hr, 111, tj], [Ni, "de", Ia, 40, 114, Gk], [Co, "de", O, 28, 117, 0], [er, "de", 7, 47, 113, 0], [er, "de", 7, 63, 104, yj], [1, "de", 4, 64, 92, yj], [_, "de", $a, 86, 97, Fj], [1, "de", un, 76, 91, 0], [_, "de", 5, 85, 86, 0], [1, "de", 6, 78, 83, 0], [er, "de", S, 71, 97, tj], [1, "de", 4, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", cq, 86, 109, Aa], [1, "de", 4, 86, 118, 0], [1, "de", 5, 70, 113, xq], [1, "de", kk, 69, 121, 0], [Co, "de", ya, 76, 122, 0], [Ga, "de", Ia, 87, 130, 0], [Ni, "de", cq, 84, 123, 0], [1, "de", aq, 57, 121, Aa], [1, "de", Ij, 53, 125, 0], [Ga, "de", 5, 62, 131, Gk], [1, "de", jq, 67, 143, Qr], [1, "de", Ij, 77, 143, yj], [Ga, "de", 5, 85, 136, tj], [1, "de", 6, 87, 147, Gk], [Ga, "de", 6, 92, 140, yj], [1, "de", 4, 93, 127, 0], [er, "de", 5, 93, 106, 0], [Ni, "de", un, 45, 144, Gk], [ck, "de", cq, 41, 139, 0], [Ga, "de", cq, 54, 138, yj], [Co, "de", 6, 29, 145, yj], [1, "de", ya, 29, 132, 0], [Ni, "de", 6, 35, 127, 0], [Co, "de", P, 64, 142, Aa], [Ga, "de", 5, 23, 131, 0], [1, "de", ie, 9, 134, 0], [1, "de", 6, 11, 121, 0], [er, "de", hr, 26, 121, An], [1, "de", 35, 58, 150, Fj], [Co, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, Qr], [1, "de", 33, 36, 154, 0], [Co, "de", 34, Pj, 154, 0], [1, "de", 34, 13, 148, Fj], [1, "de", 34, 21, 142, xq], [er, "de", 34, 38, 139, 0], [1, "de", 34, 47, 144, 0], [1, "de", 34, 68, 142, 0], [Ga, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [Ek, "de", 36, 86, 134, Qr], [Ek, "de", 36, 90, 141, xq], [er, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, xq], [1, "de", 33, 82, 122, 0], [1, "de", 35, 56, 122, 0], [Co, "de", 35, 40, 119, 0], [ck, "de", 35, ae, 112, An], [1, "de", 35, 37, 102, Gk], [Ga, "de", 33, 18, 97, An], [1, "de", 34, Ea, 83, 0], [1, "de", 33, Qq, 73, An], [1, "de", 33, Ea, 60, An], [1, "de", 35, 24, 60, 0], [1, "de", 36, 14, 45, 0], [ck, "de", 36, 21, 42, 0], [1, "de", 35, 8, 32, 0], [1, "de", 33, Pj, 24, yj], [Ga, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, Gk], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, Fj], [Co, "de", 35, 53, 39, Fj], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, Aa], [1, "de", 33, 68, 112, An], [er, "de", 33, 49, 109, xq], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, 0], [Ga, "de", 36, 70, 72, Gk], [Co, "de", 36, 78, 63, Qr], [1, "de", 36, 90, 64, Fj], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, tj], [Co, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, Qr], [_, "de", 35, 93, 56, yj], [1, "de", 35, 61, 60, tj], [1, "de", 35, 66, 46, tj], [Ek, "de", 33, 90, 19, 0], [1, "de", 34, 92, zo, yj], [_, "de", 35, 75, 39, Fj], [1, "de", 35, 67, 42, tj], [Ni, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, yj], [_, "de", 36, 42, 61, 0], [1, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, Aa], [1, "de", 33, 46, 85, Aa], [1, "de", 33, 64, 84, 0], [er, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, An], [_, "de", 33, 31, 69, Gk], [1, "de", 35, 34, 54, xq], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [Ga, "de", 36, 29, 34, xq], [1, "de", 35, 20, 55, 0], [Co, "de", 35, 14, 52, yj], [Ni, "s", qi, 12, 171, _], [ck, "r", qa, 188, An], [Ga, "r", 21, 188, xq], [1, "r", 22, 188, 0], [ck, "r", 23, 188, 0], [_, "r", 24, 188, 0], [1, "r", 25, 189, Aa], [_, "r", 24, 189, tj], [1, "r", 23, 189, Aa], [1, "r", 22, 189, 0], [1, "r", 21, 189, 0], [Ga, "r", 20, 189, 0], [Ek, "r", _k, 189, 0], [ck, "r", 19, 190, xq], [Ga, "r", 19, 191, An], [Ek, "r", f, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [Ga, "r", 24, 191, Gk], [er, "r", 23, 191, Aa], [Co, "r", 25, 191, 0], [Ni, "r", 25, 190, yj], [1, "r", 24, 190, xq], [1, "r", 23, 190, 0], [1, "r", 22, 190, 0], [_, "r", 21, 190, yj], [1, "r", f, 190, 0], [_, "r", 26, 190, 0], [Ni, "r", 26, 191, 0], [1, "r", 24, 193, Fj], [1, "r", 23, 193, An], [_, "r", 22, 193, tj], [1, "r", 20, 192, Qr], [1, "r", 21, 192, 0], [1, "r", 22, 192, 0], [Ek, "r", 23, 192, Gk], [1, "r", 24, 192, 0], [1, "r", 25, 192, Qr], [Ek, "r", 53, 199, 0], [1, "r", 52, 200, An], [_, "r", 54, 199, xq], [Co, "r", 55, 199, 0], [1, "r", 55, 200, 0], [er, "r", 54, 200, Aa], [_, "r", 53, 200, 0], [1, "r", 51, 200, 0], [er, "r", 56, 200, 0], [1, "r", 55, 201, An], [_, "r", 54, 201, 0], [er, "r", 55, 202, xq], [1, "r", 54, 203, 0], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [1, "r", 53, 202, 0], [1, "r", 52, 202, xq], [1, "r", 53, 201, 0], [Ga, "r", 52, 201, Qr], [ck, "r", 51, 201, 0], [1, "r", 51, 202, An], [1, "r", 50, 202, 0], [1, "r", 50, 201, 0], [1, "r", 56, 201, 0], [1, "r", 53, 203, 0], [1, "r", 52, 203, xq], [Ni, "r", 51, 203, xq], [Ni, "r", 56, 202, An], [1, "r", 55, 203, 0], [ck, "r", 53, 204, An], [Ek, "r", 52, 204, 0], [1, "r", 55, 204, tj], [1, "r", 56, 203, Gk], [1, "r", 56, 244, 0], [1, "r", 54, 246, 0], [1, "r", 50, 248, Gk], [1, "r", 48, 248, 0], [er, "r", 43, 248, 0], [Co, "r", 45, 238, Aa], [Co, "r", 44, 238, yj], [1, "r", 43, 238, 0], [Ga, "r", 46, 238, An], [Ek, "r", 47, 238, 0], [1, "r", 48, 238, Fj], [Ga, "r", 49, 238, tj], [1, "r", 50, 238, xq], [1, "r", 51, 238, 0], [Ni, "r", 52, 238, Aa], [er, "r", 53, 238, yj], [ck, "r", 54, 239, 0], [1, "r", 53, 240, yj], [Ga, "r", 53, 239, yj], [1, "r", 52, 239, 0], [1, "r", 51, 239, Fj], [Ga, "r", 50, 239, 0], [1, "r", 49, 239, Fj], [Co, "r", 48, 239, 0], [Ga, "r", 47, 239, 0], [er, "r", 46, 239, 0], [Co, "r", 45, 239, 0], [Co, "r", 44, 239, Qr], [_, "r", 43, 239, An], [Co, "r", 42, 239, An], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [1, "r", 43, 240, 0], [1, "r", 44, 240, 0], [1, "r", 45, 240, yj], [1, "r", 46, 240, An], [1, "r", 47, 240, tj], [Co, "r", 48, 240, 0], [Ek, "r", 49, 240, Qr], [1, "r", 50, 240, Fj], [1, "r", 51, 240, 0], [er, "r", 52, 240, tj], [1, "r", 54, 240, Aa], [_, "r", 55, 240, 0], [_, "r", 56, 241, 0], [ck, "r", 55, 241, Qr], [ck, "r", 54, 241, An], [1, "r", 53, 241, yj], [1, "r", 52, 241, Aa], [1, "r", 51, 241, 0], [1, "r", 49, 241, Fj], [Co, "r", 50, 241, 0], [er, "r", 48, 241, Qr], [ck, "r", 47, 241, Fj], [er, "r", 46, 241, 0], [Ni, "r", 45, 241, 0], [er, "r", 44, 241, Gk], [1, "r", 43, 241, Fj], [Ek, "r", 42, 241, 0], [1, "r", 41, 241, 0], [Co, "r", 40, 242, tj], [1, "r", 41, 242, 0], [er, "r", 42, 242, Fj], [Co, "r", 43, 242, 0], [Ga, "r", 44, 242, Fj], [1, "r", 45, 242, 0], [Ek, "r", 46, 242, yj], [1, "r", 47, 242, 0], [1, "r", 48, 242, Aa], [Co, "r", 49, 242, Fj], [Ni, "r", 50, 242, 0], [Ga, "r", 51, 242, 0], [ck, "r", 52, 242, 0], [1, "r", 53, 242, 0], [1, "r", 54, 242, Fj], [Co, "r", 55, 242, An], [1, "r", 56, 242, yj], [er, "r", 56, 243, yj], [Co, "r", 55, 243, yj], [ck, "r", 54, 243, Gk], [Ni, "r", 53, 243, tj], [Ga, "r", 52, 243, 0], [1, "r", 51, 243, Aa], [_, "r", 50, 243, 0], [1, "r", 49, 243, 0], [1, "r", 48, 243, 0], [1, "r", 47, 243, Gk], [1, "r", 46, 243, 0], [er, "r", 45, 243, 0], [1, "r", 44, 243, An], [1, "r", 43, 243, yj], [1, "r", 42, 243, 0], [_, "r", 41, 243, 0], [er, "r", 40, 243, 0], [Co, "r", 40, 244, Aa], [_, "r", 41, 244, 0], [ck, "r", 43, 244, 0], [ck, "r", 44, 244, 0], [_, "r", 45, 244, 0], [Ni, "r", 46, 244, 0], [1, "r", 47, 244, 0], [1, "r", 48, 244, An], [Ni, "r", 49, 244, An], [Co, "r", 50, 244, 0], [_, "r", 51, 244, An], [1, "r", 52, 244, 0], [1, "r", 53, 244, yj], [1, "r", 54, 244, 0], [Ek, "r", 55, 244, 0], [1, "r", 42, 244, 0], [ck, "r", 40, 245, 0], [1, "r", 41, 245, Gk], [1, "r", 42, 245, Aa], [Ni, "r", 43, 245, 0], [1, "r", 44, 245, An], [1, "r", 45, 245, An], [1, "r", 46, 245, Gk], [Ni, "r", 47, 245, Gk], [er, "r", 48, 245, Qr], [er, "r", 49, 245, 0], [1, "r", 50, 245, Fj], [1, "r", 51, 245, Aa], [1, "r", 52, 246, 0], [Ek, "r", 52, 245, An], [ck, "r", 53, 245, 0], [1, "r", 54, 245, 0], [Ek, "r", 55, 245, Qr], [1, "r", 53, 246, 0], [1, "r", 51, 246, 0], [1, "r", 50, 246, Aa], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [Ga, "r", 47, 246, 0], [1, "r", 45, 246, 0], [1, "r", 46, 246, An], [1, "r", 44, 246, yj], [_, "r", 43, 246, Aa], [Ga, "r", 42, 246, 0], [1, "r", 41, 246, 0], [Ga, "r", 42, 247, tj], [1, "r", 43, 247, Gk], [1, "r", 44, 247, Fj], [1, "r", 45, 247, 0], [1, "r", 46, 247, 0], [Ga, "r", 47, 247, Aa], [1, "r", 48, 247, 0], [1, "r", 50, 247, Fj], [1, "r", 51, 247, tj], [Ni, "r", 52, 247, yj], [1, "r", 53, 247, yj], [1, "r", 54, 247, 0], [1, "r", 49, 247, xq], [1, "r", 49, 248, 0], [Ni, "r", 47, 248, Gk], [Ek, "r", 46, 248, 0], [ck, "r", 45, 248, 0], [Ga, "r", 51, 248, 0], [Ni, "r", 55, 246, Ek], [Co, "r", 55, 247, 1], [er, "r", 56, 247, Ga], [er, "r", 56, 248, 1], [1, "r", 95, 270, Ek], [_, "r", 93, 270, ck], [ck, "r", 94, 270, Ga], [1, "r", 95, 271, 1], [1, "r", 94, 271, 1], [_, "r", 93, 271, _], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, Ek], [1, "r", 92, 281, 1], [ck, "r", 92, 280, Ga], [1, "r", 91, 280, er], [1, "r", 90, 279, Co], [1, "r", 95, 275, 1], [1, "r", 95, 274, Ek], [Ek, "r", 95, 273, er], [er, "r", 95, 272, Ek], [Co, "r", 94, 274, Ga], [er, "r", 94, 273, 1], [er, "r", 94, 272, er], [1, "r", 93, 272, 1], [er, "r", 93, 273, Ga], [1, "r", 93, 274, 1], [1, "r", 92, 273, 1], [Co, "r", 92, 272, Co], [1, "r", 92, 270, er], [Ek, "r", 92, 271, Ni], [Ek, "r", 92, 269, 1], [Ga, "r", 90, 269, 1], [Ek, "r", 91, 269, ck], [1, "r", 91, 271, Ga], [Ga, "r", 91, 270, Ni], [1, "r", 95, 278, 1], [Ek, "r", 95, 277, Ga], [Ga, "r", 95, 276, 1], [1, "r", 94, 276, 1], [Ga, "r", 94, 275, ck], [ck, "r", 93, 275, _], [Co, "r", 92, 274, 1], [1, "r", 92, 275, 1], [1, "r", 91, 275, 1], [Ek, "r", 90, 275, 1], [1, "r", 89, 274, Ek], [er, "r", 90, 274, Ni], [1, "r", 89, 275, 1], [1, "r", 88, 274, 1], [1, "r", 88, 273, Ga], [1, "r", 86, 272, Ni], [1, "r", 85, 271, 1], [Ek, "r", 86, 271, Co], [_, "r", 87, 272, 1], [Ni, "r", 55, 248, Ek], [Ni, "r", 54, 248, 1], [1, "r", 56, 249, 1], [Co, "r", 55, 249, Ek], [Ga, "r", 55, 250, Co], [Ga, "r", 56, 250, _], [1, "r", 57, 250, er], [1, "r", 57, 249, 1], [ck, "r", 59, 250, 1], [ck, "r", 58, 250, 1], [1, "r", 60, 250, 1], [1, "r", 61, 251, Ga], [1, "r", 60, 251, 1], [ck, "r", 62, 251, 1], [1, "r", 62, 252, 1], [_, "r", 63, 252, Ek], [er, "r", 58, 251, 1], [1, "r", 57, 251, 1], [Co, "r", 56, 251, 1], [Ga, "r", 58, 252, 1], [1, "r", 57, 252, 1], [1, "r", 57, 253, Ek], [er, "r", 58, 253, 1], [Ga, "r", 58, 254, _], [1, "r", 59, Aq, Ga], [_, "r", 58, 255, 1], [Co, "r", 57, 254, Co], [Ek, "r", 56, 252, Ek], [1, "r", 55, 251, Ga], [ck, "r", 60, 255, 1], [1, "r", 61, yk, er], [1, "r", 61, 256, 1], [Ek, "r", 60, 256, 1], [Ga, "r", 62, ra, 1], [1, "r", 62, 257, er], [_, "r", 61, 257, _], [1, "r", 64, 253, Ni], [Ga, "r", 64, 254, Co], [Ni, "r", 65, 254, 1], [1, "r", 61, 250, ck], [1, "r", 64, 252, _], [er, "r", 65, 253, _], [1, "r", 66, 254, ck], [1, "r", 65, Qa, Co], [Ni, "r", 64, Aq, Ek], [Ni, "r", 64, z, Ek], [1, "r", 65, 256, Co], [1, "r", 65, 257, 1], [_, "r", 64, 257, 1], [Ni, "r", 63, 257, Co], [1, "r", 62, 258, Co], [Ek, "r", 63, 258, 1], [1, "r", 64, 258, ck], [1, "r", 66, _i, 1], [Co, "r", 66, ra, ck], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [Co, "r", 65, 258, Ni], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [1, "r", 67, 259, er], [Ni, "r", 66, 259, _], [1, "r", 65, 259, Co], [1, "r", 56, 246, 1], [1, "r", 56, 245, Ek], [er, "r", 68, 258, 1], [1, "r", 68, 259, er], [_, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, ck], [_, "r", 70, 261, er], [Ek, "r", 71, 261, ck], [1, "r", 67, 260, Ek], [1, "r", 89, 269, ck], [1, "r", 89, 268, 1], [1, "r", 90, 268, 1], [1, "r", 82, 267, Ni], [1, "r", 83, 267, _], [ck, "r", 80, 266, 1], [1, "r", 81, 266, 1], [_, "r", 81, 267, ck], [1, "r", 79, 266, 1], [1, "r", 78, 265, Ek], [1, "r", 77, 265, 1], [1, "r", 76, 264, _], [1, "r", 75, 264, 1], [1, "r", 75, 263, ck], [1, "r", 74, 263, _], [Ga, "r", 74, 262, 1], [er, "r", 72, 262, Ek], [_, "r", 73, 262, 1], [1, "r", 71, 262, Ek], [_, "r", 85, 270, _], [Co, "r", 84, 270, er], [1, "r", 84, 269, Ni], [er, "r", 83, 269, ck], [er, "r", 82, 269, 1], [1, "r", 81, 269, er], [1, "r", 81, 268, 1], [1, "r", 82, 268, 1], [Ek, "r", 83, 268, _], [Ek, "r", 80, 268, 1], [1, "r", 80, 267, 1], [1, "r", 79, 267, 1], [1, "r", 78, 266, 1], [1, "r", 76, 265, 1], [Ga, "r", 75, 262, Ga], [1, "r", 90, 280, Ek], [Ga, "r", 89, 280, ck], [Ek, "r", 89, 279, 1], [1, "r", 88, 279, er], [Ek, "r", 88, 278, 1], [1, "r", 87, 277, er], [Co, "r", 86, 276, _], [1, "r", 86, 275, Ni], [1, "r", 86, 274, 1], [Ek, "r", 86, 273, 1], [ck, "r", 85, 273, 1], [1, "r", 85, 272, 1], [Ga, "r", 85, 274, 1], [Ek, "r", 86, 277, 1], [Ek, "r", 87, 278, Co], [1, "r", 84, 271, 1], [Ni, "r", 83, 270, 1], [_, "r", 87, 273, Ga], [1, "r", 91, 274, Ga], [1, "r", 89, 273, 1], [1, "r", 88, 272, er], [1, "r", 91, 281, Co], [1, "r", 92, 282, 1], [1, "r", 88, 280, er], [Ek, "r", 87, 279, ck], [1, "r", 85, 275, Ek], [ck, "r", 84, 273, Ek], [_, "r", 84, 272, 1], [_, "r", 83, 271, ck], [Ni, "r", 82, 270, 1], [1, "r", 84, 267, 0], [1, "r", 85, 267, 0], [1, "r", 76, 262, 0], [1, "r", 77, 262, 0], [1, "r", 88, 268, Gk], [1, "r", 78, 262, 0], [er, "r", 79, 262, Aa], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [Ek, "r", 81, 263, yj], [1, "r", 82, 263, Qr], [_, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, Gk], [Ga, "r", 88, 262, 0], [_, "r", 89, 262, 0], [1, "r", 90, 262, 0], [1, "r", 87, 262, An], [1, "r", 86, 262, 0], [1, "r", 86, 263, 0], [Ek, "r", 87, 263, 0], [_, "r", 91, 262, yj], [Ga, "r", 95, 262, xq], [1, "r", 94, 262, tj], [_, "r", 86, 267, 0], [Ek, "r", 87, 267, yj], [er, "r", 87, 268, 0], [_, "r", 86, 268, 0], [Ga, "r", 74, 189, tj], [Ga, "r", 75, 189, 0], [1, "r", 76, 189, 0], [1, "r", 77, 189, 0], [_, "r", 78, 190, 0], [er, "r", 77, 190, 0], [Ek, "r", 75, 190, tj], [1, "r", 76, 190, 0], [Ni, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, tj], [er, "r", 76, 191, 0], [Ni, "r", 77, 191, Gk], [_, "r", 75, 191, 0], [_, "r", 74, 191, Fj], [1, "r", 78, 192, Qr], [Ni, "r", 77, 192, yj], [Co, "r", 76, 192, 0], [Ni, "r", 75, 192, 0], [Ek, "r", 74, 192, 0], [_, "r", 73, 191, xq], [er, "f", Ek, 96, 22, 1], [er, "s", 1, 97, 22, Ek], [Co, "f", ck, 98, 22, 1], [1, "s", yj, 99, 22, _], [1, "s", Ek, ba, 21, 1], [1, "s", 1, 96, 49, 1], [1, "s", 1, xo, 50, _], [1, "s", 0, 99, 49, 1], [1, "s", Aa, 97, 49, 1], [1, "f", 1, 98, 49, 1], [1, "r", 70, 218, 0], [Ni, "r", 71, 218, An], [1, "r", 72, 218, Qr], [1, "r", 73, 218, 0], [Ni, "r", 74, 219, tj], [1, "r", 73, 219, Aa], [Ek, "r", 72, 219, 0], [1, "r", 71, 219, 0], [Ni, "r", 70, 219, 0], [_, "r", 73, 220, An], [er, "r", 72, 220, An], [Ek, "r", 71, 220, Gk], [_, "r", 72, 221, An], [1, "r", 71, 221, xq], [1, "r", 70, 221, tj], [Ga, "r", 69, 221, Gk], [1, "r", 68, 221, 0], [1, "r", 70, 220, yj], [1, "r", 69, 220, 0], [1, "r", 69, 219, Gk], [er, "r", 68, 220, An], [1, "r", 73, 221, Qr], [Ek, "r", 73, 222, 0], [Co, "r", 71, 222, 0], [1, "r", 72, 222, Fj], [1, "r", 74, 221, xq], [1, "r", 74, 220, 0], [1, "r", 75, 220, 0], [Ni, "r", 75, 221, 0], [er, "r", 70, 222, tj], [1, "r", 69, 222, Fj], [Ga, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, yj], [ck, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [Co, "r", 29, 219, 0], [1, "r", 27, 219, Fj], [Ni, "r", 25, 219, Gk], [Ek, "r", 26, 219, yj], [er, "r", 28, 219, 0], [1, "r", 26, 218, 0], [er, "r", 27, 218, 0], [_, "r", 28, 218, xq], [Ga, "r", 29, 218, Qr], [Ga, "r", 30, 218, Qr], [er, "r", 28, 217, 0], [er, "r", 26, 217, An], [1, "r", 27, 217, 0], [_, "r", 28, 216, 0], [1, "r", 29, 216, Qr], [Ga, "r", 30, 216, tj], [Ni, "r", 31, 218, yj], [1, "r", 32, 218, 0], [1, "r", 31, 216, Gk], [Ni, "r", 31, 221, 0], [er, "r", 31, 220, 0], [1, "r", 30, 220, 0], [1, "r", 29, 220, 0], [Ek, "r", 28, 220, xq], [1, "r", 27, 220, Gk], [Co, "r", 26, 220, 0], [1, "r", 25, 218, yj], [Ga, "r", 27, 221, 0], [1, "r", 28, 221, An], [Co, "r", 29, 221, 0], [Ek, "r", 30, 221, tj], [1, "r", 32, 220, 0], [1, "r", 32, 219, 0], [1, "r", 33, 218, 0], [Ni, "r", 33, 219, tj], [1, "r", 75, 238, Qr], [er, "r", 76, 238, xq], [Ni, "r", 77, 239, An], [1, "r", 76, 239, 0], [Ga, "r", 75, 239, 0], [1, "r", 74, 239, yj], [Ek, "r", 76, 240, 0], [ck, "r", 77, 240, Fj], [1, "r", 78, 240, xq], [er, "r", 77, 241, tj], [1, "r", 76, 241, tj], [er, "r", 75, 241, yj], [_, "r", 75, 240, yj], [Ga, "r", 74, 240, xq], [1, "r", 78, 239, 0], [Co, "r", 77, 238, An], [1, "r", zn, 253, 0], [Ni, "r", Xa, 252, An], [Ni, "r", Sk, 252, 0], [1, "r", 21, 253, Aa], [ck, "r", 23, 254, xq], [Ek, "r", 20, 254, Aa], [1, "r", _k, 254, Qr], [1, "r", 22, 254, 0], [Ni, "r", zn, 254, 0], [Ek, "r", 19, 253, 0], [1, "r", 20, 253, Aa], [1, "r", 21, 254, 0], [Ek, "r", 22, 253, 0], [1, "r", 21, R, 0], [Ni, "r", mr, yk, 0], [Ni, "r", 19, Mj, 0], [1, "r", Ki, R, Aa], [1, "r", xn, Qk, An], [Ek, "r", ji, 254, Fj], [ck, "r", 22, 255, An], [Co, "r", 19, z, Fj], [Ga, "r", jk, T, Aa], [_, "r", 21, 256, Gk], [1, "r", 39, 270, An], [1, "r", 40, 270, Aa], [Co, "r", 41, 270, 0], [_, "r", 43, 270, 0], [Ni, "r", 44, 270, 0], [ck, "r", 46, 270, Qr], [1, "r", 42, 270, 0], [1, "r", 45, 270, Aa], [1, "r", 44, 269, 0], [Ni, "r", 43, 269, Aa], [1, "r", 42, 269, Aa], [1, "r", 40, 269, 0], [1, "r", 41, 269, Fj], [1, "r", 45, 271, Gk], [1, "r", 44, 271, Fj], [1, "r", 43, 271, 0], [1, "r", 42, 271, tj], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [ck, "r", 46, 271, xq], [ck, "r", 45, 272, yj], [1, "r", 44, 272, An], [1, "r", 43, 272, 0], [1, "r", 42, 272, 0], [_, "r", 19, 284, 0], [1, "r", Sk, 284, Fj], [Ek, "r", 21, 285, xq], [Co, "r", 22, 285, yj], [1, "r", 23, 286, 0], [ck, "r", 22, 288, 0], [ck, "r", 20, 288, 0], [1, "r", 18, 288, 0], [er, "r", 17, 287, An], [1, "r", 16, 287, tj], [1, "r", 16, 286, Qr], [_, "r", 17, 286, xq], [_, "r", Dq, 286, 0], [1, "r", wn, 286, An], [1, "r", 20, 286, 0], [Ni, "r", 21, 286, tj], [1, "r", 22, 286, Fj], [1, "r", zq, 285, 0], [Ni, "r", 19, 285, Qr], [_, "r", po, 285, Gk], [_, "r", ee, 285, 0], [1, "r", 19, 287, 0], [1, "r", Mr, 287, 0], [1, "r", jk, 287, Qr], [1, "r", 21, 287, 0], [1, "r", 22, 287, yj], [1, "r", 23, 287, 0], [1, "r", 21, 288, An], [1, "r", 19, 288, 0], [Ek, "r", 17, 288, 0], [1, "r", hn, 289, Fj], [_, "r", 21, 289, yj], [Ga, "r", 22, 289, tj], [1, "r", 20, 289, Aa], [1, "r", 23, 288, An], [_, "r", 24, 287, Fj], [1, "r", 24, 286, Fj], [er, "r", 23, 285, An], [_, "r", 66, 286, Qr], [1, "r", 64, 287, 0], [Ni, "r", 63, 287, 0], [Co, "r", 60, 287, Gk], [Ni, "r", 59, 285, Aa], [1, "r", 58, 284, tj], [Ni, "r", 59, 283, 0], [1, "r", 65, 283, 0], [1, "r", 64, 283, Qr], [1, "r", 63, 283, 0], [1, "r", 62, 283, yj], [1, "r", 61, 283, Aa], [ck, "r", 60, 283, 0], [1, "r", 59, 284, 0], [Ni, "r", 58, 285, tj], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [Co, "r", 61, 287, 0], [Ni, "r", 62, 287, tj], [Ek, "r", 61, 286, 0], [er, "r", 62, 286, 0], [_, "r", 63, 286, 0], [_, "r", 64, 286, Fj], [Co, "r", 65, 286, tj], [er, "r", 67, 285, Fj], [Ga, "r", 66, 285, Aa], [Ga, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, xq], [1, "r", 62, 285, Qr], [1, "r", 61, 285, 0], [Ga, "r", 60, 285, 0], [1, "r", 60, 284, 0], [er, "r", 61, 284, 0], [_, "r", 62, 284, 0], [1, "r", 63, 284, xq], [1, "r", 64, 284, Gk], [1, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [ck, "r", 67, 286, tj], [1, "p", 0, wa, 189, 1], [ck, "p", Gk, 32, 184, Co], [1, "p", 0, 47, 191, 1], [1, "p", 0, 64, 184, 1], [Co, "p", 0, 84, 192, 1], [_, "p", yj, 78, 207, Ek], [1, "p", 0, 58, 216, Co], [Ga, "p", 0, 41, 211, 1], [ck, "p", tj, 18, 211, 1], [ck, "p", 0, sr, 230, 1], [_, "p", 0, 29, 237, 1], [1, "p", 0, 50, 230, 1], [1, "p", 0, 78, 241, Ek], [1, "p", 0, 74, Qi, 1], [Ni, "p", 0, 68, 266, Ni], [ck, "p", 0, 48, 259, 1], [1, "p", Fj, 31, 263, Ga], [1, "p", 0, 18, 274, 1], [er, "p", An, 33, 283, Ni], [1, "p", Qr, 66, 287, er], [Ga, "p", 0, 82, 291, 1], [1, "p", xq, Ha, 295, 1], [er, "p", Qr, 45, 294, 1], [Co, "p", 0, zj, 252, er], [1, "p", 0, 79, 227, Ga], [_, "p", xq, 32, 200, _], [1, "p", Gk, 64, 200, Ga], [Co, "s", Gk, 21, 193, 1], [1, "s", 1, 18, 189, er], [_, "s", qi, 26, 189, 1], [er, "b", 1, 15, 181, xq], [Ni, "b", 2, 18, 190, 0], [Ga, "b", 2, 29, 193, Qr], [Ni, "t", nk, wr, 182, 0], [er, "t", nk, 13, 195, xq], [1, "t", 4, wr, 183, 0], [Ga, "t", zr, 10, 184, tj], [Co, "t", 5, 23, 182, tj], [1, "t", 4, 30, 187, yj], [er, "t", ck, 26, 192, 0], [Co, "b", 1, 25, 188, Aa], [Ga, "s", Ek, 24, 181, 1], [er, "t", 3, 33, 183, 0], [1, "b", 1, 36, 189, 0], [er, "t", br, 35, 190, Gk], [1, "b", Qn, Qq, 200, 0], [1, "s", 0, 28, 194, 1], [Ek, "s", 1, 32, 196, 1], [er, "s", Co, 36, 183, ck], [Co, "s", 2, 38, 184, 1], [Ek, "s", qo, 10, 192, ck], [Ek, "s", br, ca, 183, 1], [Co, "s", er, 15, 199, 1], [1, "b", 0, 12, 202, 0], [_, "t", qo, 13, 203, Gk], [er, "t", ge, 20, 200, tj], [_, "t", 4, ca, 194, 0], [1, "t", un, 15, 205, 0], [Ni, "t", 5, 29, 200, 0], [ck, "t", Er, 28, 201, 0], [Ni, "s", Nr, 25, 199, Ek], [Ga, "s", 1, 22, 204, 1], [1, "g", On, 25, 205, Ek], [1, "b", Ga, 27, 216, 0], [Ni, "s", _, 25, 217, Ni], [1, "s", Co, 33, 217, Ni], [er, "s", 2, 35, 215, 1], [1, "s", 0, 32, 221, 1], [Ni, "t", 2, 31, 222, 0], [1, "t", 4, 26, 221, Gk], [_, "b", Hn, 27, 222, xq], [1, "b", 0, 17, 217, Aa], [Ni, "t", 3, 18, 216, 0], [1, "t", cq, fr, 215, An], [1, "t", 5, 30, 213, Aa], [Ga, "t", Ij, 24, 208, Aa], [1, "s", 1, $e, 216, 1], [er, "s", 2, 11, 210, 1], [1, "s", 2, 34, 223, Ek], [1, "b", 2, 36, 218, 0], [ck, "t", hr, 40, 206, 0], [1, "t", 5, 35, 203, Aa], [1, "t", Er, 39, 206, 0], [1, "b", _, 34, 204, Fj], [_, "s", 1, 33, 206, Ek], [Ni, "s", Ga, 42, 203, 1], [Co, "s", 0, 47, 196, 1], [Co, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, 0], [Ga, "t", un, 44, 187, 0], [Ek, "b", Ek, 46, 181, Fj], [1, "t", 2, 47, 182, 0], [1, "b", yj, 57, 182, yj], [er, "b", Rn, 56, 183, 0], [1, "t", $j, 55, 184, 0], [er, "t", Sj, 62, 195, tj], [1, "s", Ek, 51, 185, Ga], [Ni, "s", 2, 62, 180, er], [_, "s", ta, 61, 188, Co], [1, "s", ck, 61, 189, Co], [1, "s", 2, 48, 195, 1], [Ek, "b", _, 51, 199, 0], [Ni, "t", qi, 52, 199, 0], [Ga, "t", Rn, 56, 204, Aa], [Ga, "t", 4, 57, 204, yj], [ck, "t", ge, 51, 204, tj], [Ga, "s", 1, 52, 205, _], [_, "s", 2, 57, 200, 1], [Ek, "s", Co, 56, 199, 1], [1, "b", 0, 55, 192, 0], [er, "t", 3, 56, 193, An], [Ek, "t", ge, 50, 190, 0], [Ek, "b", 1, 76, 188, 0], [ck, "t", 2, 75, 188, 0], [1, "t", Nj, 73, 192, 0], [1, "t", aq, 72, 191, Qr], [1, "t", Sj, 78, 193, yj], [Ga, "b", 0, 79, 192, Gk], [Ek, "s", 2, 79, 190, 1], [Ek, "s", ck, 74, 194, 1], [_, "s", 1, 72, 187, Co], [ck, "s", yj, 74, 183, 1], [1, "s", Co, 75, 183, ck], [1, "t", 2, 69, 181, 0], [1, "t", oe, 70, 182, 0], [1, "t", Sj, 69, 180, 0], [1, "b", Ni, 65, 189, Fj], [er, "b", 2, 66, 189, Fj], [1, "t", 3, 64, 188, Gk], [Ga, "t", yn, 67, 192, Fj], [ck, "b", X, 85, 183, xq], [1, "t", Ga, 84, 184, An], [1, "t", oe, 81, 180, 0], [1, "t", zr, 89, 180, 0], [_, "t", 0, 90, 188, Aa], [1, "t", 3, 89, 190, 0], [1, "s", ck, 87, 187, Ga], [Ga, "s", tk, 87, 197, er], [er, "b", Ni, 84, 200, 0], [Ek, "t", 2, 83, 201, tj], [1, "t", ge, 87, 207, 0], [er, "s", Nj, 79, 202, Ek], [1, "s", er, 80, 203, 1], [1, "t", 0, 71, 200, 0], [1, "b", 2, 72, 201, 0], [1, "t", 2, 65, 205, 0], [1, "t", Ek, 66, 206, 0], [1, "t", 4, 63, 209, xq], [ck, "t", 5, 73, 203, 0], [1, "s", 0, 70, 207, 1], [Ek, "s", ck, 71, 206, 1], [1, "s", qo, 68, 199, Ek], [Ek, "s", Ni, 64, 213, Co], [1, "t", 0, 85, 213, 0], [1, "b", 2, 84, 212, xq], [Ga, "t", Hn, 77, 209, yj], [Ni, "t", 4, 83, 216, 0], [Co, "t", 4, 73, 209, 0], [1, "b", tj, 86, 222, Fj], [Co, "b", Qn, 87, 221, 0], [Ek, "s", Co, 80, 214, 1], [ck, "s", 2, 87, 216, ck], [ck, "s", 2, 84, 224, er], [er, "s", Co, 77, 227, ck], [1, "t", 1, 74, 222, 0], [1, "b", Co, 69, 218, Qr], [Co, "b", br, 75, 219, 0], [Ga, "s", ta, 74, 218, Ni], [er, "s", 1, 69, 223, 1], [1, "s", Ek, 77, 221, 1], [1, "b", Ek, 72, 211, 0], [1, "b", 1, 85, 232, 0], [Ga, "t", tk, 84, 233, 0], [Ga, "t", 2, 78, 238, 0], [Ek, "b", Co, 77, 237, Fj], [Ni, "t", Sj, 87, 236, Qr], [Ek, "t", _j, 76, 229, 0], [_, "b", ta, 74, 241, 0], [Ek, "s", 0, 73, 242, 1], [1, "s", Fj, 81, 238, 1], [1, "s", 1, 82, 237, ck], [Ek, "s", qi, 72, 237, 1], [Co, "s", 2, 78, 242, 1], [_, "b", 1, 66, 230, Gk], [er, "b", 2, 62, 229, Gk], [1, "t", Oa, 67, 231, An], [1, "t", co, 62, 228, 0], [Co, "t", 5, 64, 233, 0], [Co, "t", br, 65, 234, 0], [1, "t", ta, 51, 220, Gk], [Ni, "t", Co, 50, 218, 0], [Ga, "b", 1, 45, 223, Qr], [er, "b", qi, 46, 224, 0], [Ni, "t", aq, 49, 218, 0], [1, "t", 4, 47, 225, 0], [_, "s", ck, 50, 215, er], [1, "s", 2, 51, 213, 1], [1, "s", 2, 42, 227, 1], [Ga, "s", Ni, 44, 227, _], [1, "s", 1, 60, 230, 1], [1, "s", ta, 59, 231, Ga], [Ni, "b", 1, 85, 252, Fj], [1, "t", qo, 84, 251, Fj], [1, "t", br, 74, 250, xq], [1, "t", An, 75, 251, Fj], [Co, "b", 0, 83, 246, 0], [_, "t", 3, 82, 247, Gk], [1, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [ck, "t", Ij, 87, 246, xq], [_, "t", zr, 75, 252, 0], [Ni, "s", 1, 79, 257, Co], [Ga, "s", 2, 78, 249, 1], [Co, "s", qi, 80, 258, Co], [Ni, "s", 1, 88, 254, 1], [1, "s", ck, 85, 264, 1], [_, "s", br, 89, 263, ck], [ck, "s", Nj, 87, 269, 1], [ck, "s", 0, 84, 268, Ga], [er, "s", qo, 76, 267, 1], [1, "s", Co, 66, 261, 1], [1, "s", Ga, 87, 274, 1], [Ga, "s", Ni, 76, 263, ck], [1, "s", 1, 59, 251, 1], [Ni, "s", 0, 59, 252, 1], [1, "t", br, 86, 265, 0], [Ga, "t", tj, 78, 270, 0], [_, "t", On, 79, 271, 0], [Ga, "t", 0, 77, 260, yj], [1, "t", 3, 78, 261, Fj], [Ga, "b", _, 71, 264, yj], [Co, "b", 1, 88, 269, Aa], [ck, "t", 5, 84, 264, 0], [er, "t", un, 79, 261, Aa], [ck, "t", 5, 72, 265, xq], [er, "t", 5, 77, 270, 0], [1, "t", Aa, 87, 261, Fj], [1, "t", 2, 86, 260, 0], [er, "t", 4, 84, 255, 0], [Co, "t", oe, 68, Ta, An], [_, "t", 1, 67, 254, xq], [1, "t", 2, 65, 262, 0], [1, "t", Ga, 57, 260, 0], [Ga, "t", 2, 58, 259, 0], [ck, "b", 1, 63, x, 0], [1, "b", Co, 52, 248, xq], [1, "t", 2, 53, 248, 0], [_, "s", _, 50, 253, ck], [1, "s", X, 67, 263, er], [1, "s", qo, 52, 252, 1], [Co, "s", bq, 71, 244, 1], [1, "b", 0, 57, 245, Gk], [_, "t", Nr, 58, 244, 0], [1, "b", 1, 53, 237, yj], [1, "t", 2, 54, 237, Gk], [Ga, "t", ta, 41, 238, xq], [er, "t", 1, 42, 237, xq], [1, "t", Sj, 57, 235, yj], [ck, "t", 5, 60, 246, 0], [1, "t", Sj, 50, 252, 0], [1, "t", 1, 42, 248, 0], [1, "b", Co, 43, 249, Aa], [1, "b", Hn, 37, 243, tj], [ck, "s", 0, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, 1], [1, "s", 2, 60, 243, 1], [Ni, "s", 2, 36, 240, 1], [1, "s", 2, 43, 254, 1], [1, "s", er, 42, 254, er], [_, "t", _, 38, 233, 0], [1, "t", 2, 35, 235, tj], [_, "t", ge, 33, 228, 0], [er, "t", 4, 33, 245, xq], [Ga, "t", 4, 43, 235, Aa], [1, "t", 5, 45, 249, 0], [ck, "t", 5, 41, 253, Fj], [1, "b", 1, qa, 227, Gk], [1, "b", Ek, 14, 240, 0], [Ga, "t", 3, 21, 227, Aa], [1, "t", nk, 27, 234, 0], [Ga, "t", Qn, nr, 241, 0], [Ni, "t", 3, ca, 229, Aa], [1, "t", Oa, yq, 224, An], [ck, "t", hr, 11, 231, tj], [1, "t", 4, 22, 238, 0], [er, "t", 4, 11, 239, 0], [1, "t", 1, 22, 243, 0], [1, "b", qi, 23, 242, 0], [Ek, "s", Ek, 23, 238, 1], [Ga, "s", Co, 22, 228, Co], [1, "s", 2, 24, 228, Ni], [1, "s", qo, 21, 236, 1], [1, "s", 0, 13, 228, 1], [1, "s", Qr, wr, 242, Ek], [Ga, "s", _, En, 244, 1], [1, "s", 1, 34, 236, Ek], [ck, "t", 1, 26, 249, 0], [1, "t", _, 22, 256, 0], [1, "t", bq, 23, 255, 0], [1, "b", Ga, 17, Vn, xq], [Ga, "b", br, aa, x, tj], [1, "s", Gk, 21, 252, ck], [er, "s", qi, 20, 250, Ek], [1, "s", qo, 23, 259, 1], [1, "s", 1, sn, 257, Ga], [1, "t", 1, 31, 254, yj], [1, "t", 2, 32, 254, Qr], [Ek, "t", co, 28, 254, 0], [1, "t", aq, 34, 258, Aa], [Ni, "t", 0, 29, 260, 0], [1, "b", 2, 30, 261, 0], [1, "t", xq, 43, 262, 0], [ck, "t", 2, 42, 263, 0], [1, "t", 4, 46, 264, Aa], [1, "b", Ga, 39, 265, 0], [Co, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, Fj], [_, "t", _j, 52, 273, An], [1, "s", 1, 52, 269, er], [Ga, "s", 1, 41, 272, ck], [1, "s", 2, 41, 274, Ni], [er, "t", X, 42, 268, 0], [1, "t", 0, 43, 268, tj], [1, "b", 1, 46, 272, tj], [_, "b", 1, vk, 265, 0], [_, "t", X, nr, 266, xq], [Ni, "t", oe, Wi, 264, xq], [1, "t", 4, 29, 263, 0], [1, "t", co, 11, 269, 0], [Ga, "t", er, 29, 271, 0], [Ek, "b", 2, 28, 272, xq], [1, "t", 2, 24, 267, 0], [Ek, "t", 2, 20, 279, tj], [1, "t", 0, 19, 278, 0], [Ni, "t", Qn, 13, 278, Gk], [Ni, "b", 0, 21, 284, 0], [Ga, "b", Fj, zn, 289, xq], [_, "t", 2, Qj, 283, 0], [Ni, "t", 2, 19, 290, 0], [er, "t", yn, xj, 283, 0], [Ek, "t", 4, jk, 290, yj], [Ga, "s", er, 16, 285, _], [1, "s", Ni, 24, 288, 1], [Ni, "s", ta, 26, 287, Ni], [1, "s", 2, Zk, 278, 1], [1, "s", 1, 21, 268, Ni], [1, "s", qo, _k, 268, 1], [1, "t", tj, 12, 294, 0], [_, "b", 1, sn, 295, yj], [1, "t", 3, sn, 291, Qr], [er, "t", Rn, 10, 299, 0], [Ek, "t", 4, rr, 287, 0], [Ek, "t", aq, 17, 298, 0], [Ga, "t", 1, 27, 294, Aa], [1, "b", qo, 26, 295, Aa], [er, "t", 3, 33, 297, Fj], [Co, "b", er, 48, 278, 0], [Ek, "b", 0, 46, 280, 0], [1, "b", Nr, 50, 280, 0], [1, "t", Qr, 44, 282, 0], [1, "b", Ni, 49, 283, tj], [1, "b", 0, 51, 278, Qr], [ck, "b", Hn, 50, 279, 0], [Ni, "b", Qn, 44, 284, An], [_, "b", Gk, 47, 284, Qr], [1, "b", 2, 42, 283, Fj], [1, "t", 4, 51, 277, 0], [Ek, "b", 1, 44, 286, Aa], [_, "b", ta, 46, 286, Aa], [1, "b", 1, 42, 285, 0], [1, "b", Lq, 41, 286, 0], [ck, "t", zr, 42, 287, Gk], [1, "b", 1, 42, 278, Fj], [Ek, "b", 2, 43, 279, 0], [_, "b", 0, 40, 280, 0], [Ni, "t", aq, 39, 283, 0], [Ga, "t", 4, 39, 279, An], [1, "t", ko, 43, 277, 0], [Co, "t", 5, 47, 287, 0], [Ga, "t", 4, 46, 277, 0], [er, "t", 4, 45, 290, 0], [Co, "t", 4, 36, 285, 0], [Ni, "t", Hn, 35, 284, Fj], [1, "t", Z, 36, 272, 0], [1, "t", $j, 35, 271, 0], [ck, "t", 1, 29, 279, 0], [er, "b", 1, 32, 277, Fj], [1, "t", 3, 31, 278, Fj], [Ni, "b", 2, 28, 280, 0], [1, "t", 4, 29, 286, Gk], [Ga, "t", 5, 28, 275, An], [1, "t", Lq, 37, 292, xq], [Ni, "b", 1, 36, 291, 0], [Ek, "b", 0, 34, 298, 0], [Ni, "t", yn, 31, 292, 0], [Co, "t", 4, 46, 295, 0], [1, "t", 4, 59, 287, 0], [_, "b", 1, 58, 286, 0], [ck, "s", 1, 68, 284, ck], [_, "s", 2, 70, 286, _], [ck, "s", Fj, 67, 284, ck], [1, "t", 3, 66, 283, 0], [er, "t", 1, 65, 282, 0], [Ni, "b", 1, 64, 288, tj], [1, "t", 3, 60, 293, Gk], [1, "t", Ni, 61, 294, 0], [1, "b", 1, 76, 294, 0], [Ga, "t", Ij, 75, 295, xq], [1, "t", 5, 56, 293, 0], [1, "t", ie, 59, 281, tj], [1, "t", zr, 67, 291, Fj], [1, "b", Qr, 88, 293, yj], [1, "t", tk, 89, 292, Aa], [1, "t", tk, 85, 286, 0], [1, "t", hr, 88, 289, 0], [Ga, "t", 4, 79, 287, 0], [Ga, "b", 1, 84, 285, 0], [Co, "t", Er, 75, 284, Aa], [1, "b", 0, 75, 278, An], [Co, "t", 3, 74, 277, Gk], [1, "t", 4, 81, 276, 0], [Ga, "t", On, 65, 276, 0], [_, "b", 1, 66, 275, 0], [1, "g", Fj, 45, 261, ck], [1, "g", er, 39, 258, 1], [Co, "g", An, 35, 250, Ga], [1, "g", 2, 22, 247, 1], [1, "g", br, 27, 227, ck], [1, "g", qo, 63, 218, 1], [er, "g", Ga, 56, 224, 1], [er, "g", 0, 46, 231, Ga], [_, "g", 1, 65, 240, Ek], [1, "g", 2, 67, 238, 1], [Ga, "g", On, 79, 232, 1], [Ek, "g", 2, 72, 253, Ni], [1, "g", 2, 62, 264, Ni], [1, "g", On, 28, 267, Co], [1, "g", 2, 58, 274, 1], [ck, "de", br, Uq, 182, 0], [1, "de", 2, 24, 182, tj], [1, "de", An, 11, 185, xq], [1, "de", 0, ak, 194, 0], [1, "de", 1, 25, 196, tj], [Co, "de", Qn, 31, 183, Gk], [Ni, "de", An, 38, 181, 0], [1, "de", 2, 45, 186, 0], [1, "de", 1, 38, 191, 0], [Ek, "de", xq, 56, 181, Fj], [1, "de", 1, 68, 182, 0], [er, "de", X, 80, 181, An], [1, "de", 3, 86, 187, tj], [1, "de", 0, 84, 193, xq], [Ga, "de", 1, 82, 201, 0], [1, "de", 2, 64, 191, 0], [Co, "de", 2, 72, 200, 0], [1, "de", 3, 64, 201, xq], [1, "de", 2, 76, 209, yj], [Ni, "de", wi, 71, 212, 0], [Ga, "de", 1, 86, 214, 0], [1, "de", 0, 57, 208, yj], [ck, "de", 0, 41, 203, 0], [1, "de", Ek, 15, 206, 0], [Ek, "de", On, 25, 209, yj], [1, "de", Er, Zk, 218, 0], [1, "de", Z, dn, 227, Gk], [Ni, "de", 0, 22, 229, 0], [1, "de", Co, ai, 239, An], [1, "de", qi, 24, 238, Aa], [ck, "de", Rn, 22, 246, An], [Ni, "de", Rn, iq, 253, 0], [Ek, "de", Ek, aa, 258, yj], [1, "de", 1, 28, 261, An], [1, "de", 1, Za, 267, tj], [1, "de", Qr, 24, 268, Gk], [Ek, "de", 0, ik, 278, Gk], [Ga, "de", Nj, 21, 279, An], [1, "de", 2, 30, 272, Fj], [1, "de", 2, 29, 281, 0], [Co, "de", 2, _q, 284, Gk], [1, "de", Hn, 12, 291, yj], [1, "de", Er, 30, 287, 0], [ck, "de", 3, 27, 293, yj], [1, "de", An, 25, 296, Qr], [Ni, "de", 0, 11, 298, 0], [_, "de", 0, Ma, 286, tj], [1, "de", 2, 36, 299, 0], [1, "de", tk, 37, 280, tj], [1, "de", nk, 38, 291, 0], [Ni, "de", 1, 48, 287, tj], [1, "de", 1, 46, 277, An], [1, "de", Ni, 53, 278, tj], [ck, "de", Lq, 48, 295, 0], [er, "de", 0, 57, 294, 0], [er, "de", _, 65, 290, 0], [Co, "de", 1, 84, 292, tj], [1, "de", X, 77, 295, Aa], [Ni, "de", Nr, 84, 287, 0], [1, "de", Fj, 74, 279, 0], [Ni, "de", Qn, 65, 274, Gk], [ck, "de", 2, 71, 267, An], [1, "de", 2, 65, 261, Qr], [1, "de", 2, 47, 264, Qr], [1, "de", Rn, 47, 258, 0], [1, "de", 3, 53, 251, 0], [1, "de", On, 40, 253, xq], [1, "de", Qr, 35, 244, 0], [1, "de", Fj, 37, 233, xq], [1, "de", Hn, 44, 226, 0], [1, "de", 2, 37, 219, Aa], [1, "de", Nj, 54, 234, Qr], [1, "de", 1, 66, 234, yj], [ck, "de", 2, 65, 241, An], [1, "de", 0, 68, 249, yj], [1, "de", Z, 78, 257, Qr], [1, "de", 2, 86, 253, yj], [er, "de", Nr, 83, 245, 0], [er, "de", Co, 82, 238, 0], [ck, "de", 3, 76, 235, 0], [Ni, "de", 2, 86, 232, tj], [1, "de", 0, 86, 224, xq], [ck, "de", 2, 76, 226, An], [1, "de", Nj, 61, 228, Gk], [1, "de", 2, 58, 217, 0], [Ek, "de", 0, 49, 217, 0], [er, "de", 19, qn, 179, Gk], [1, "de", Qj, 17, 180, 0], [_, "de", 22, 18, 181, tj], [1, "de", 19, 30, 184, Qr], [Ek, "de", Xa, 27, 187, 0], [1, "de", _k, 30, 195, 0], [Ek, "de", 19, 18, 192, Aa], [1, "de", Sn, 44, 182, Gk], [_, "de", xj, 49, 182, 0], [er, "de", 19, 54, 182, Qr], [1, "de", 19, 59, 183, Fj], [1, "de", 19, 56, 186, 0], [Ek, "de", 19, 46, 188, Qr], [_, "de", 19, 58, 193, 0], [Ni, "de", 19, 67, 187, 0], [Ek, "de", Wi, 65, 192, tj], [ck, "de", 19, 71, 180, Qr], [Ga, "de", Wi, 78, 187, yj], [1, "de", Dn, 80, 194, Fj], [er, "de", Wi, 72, 193, tj], [1, "de", 19, 82, 182, 0], [1, "de", 19, 88, 185, 0], [1, "de", 19, 87, 189, Qr], [er, "de", 19, 86, 197, Fj], [Ek, "de", Dn, 85, 203, Gk], [1, "de", 19, 74, 200, Aa], [1, "de", Sn, 70, 202, An], [1, "de", 19, 83, 199, 0], [Ni, "de", Sn, 86, 208, 0], [1, "de", 19, 84, 214, An], [1, "de", 19, 83, 211, Qr], [ck, "de", Qq, 84, 217, Gk], [1, "de", 19, 77, 210, 0], [1, "de", 19, 71, 210, 0], [1, "de", 19, 73, 213, Qr], [1, "de", Wi, 66, 207, 0], [1, "de", Qq, 66, 204, Qr], [1, "de", 19, 62, 209, 0], [_, "de", Dn, 63, 201, 0], [1, "de", D, 56, 205, 0], [Ga, "de", 19, 49, 199, 0], [1, "de", 19, 50, 205, tj], [Ni, "de", 19, 40, 197, 0], [er, "de", Wi, 38, 198, An], [Ga, "de", Dn, 40, 208, tj], [Ek, "de", 19, 36, 204, 0], [Ni, "de", xj, 33, 204, Gk], [1, "de", Dn, 29, 202, 0], [Ek, "de", 19, 27, 200, Aa], [1, "de", 19, 26, 193, An], [1, "de", Wi, 18, 201, An], [1, "de", wn, 20, 199, Aa], [ck, "de", 19, ne, 196, 0], [1, "de", 19, Vr, 204, 0], [1, "de", wn, Vo, 201, 0], [1, "de", 19, 23, 208, 0], [ck, "de", 19, 31, 214, An], [Co, "de", 19, 26, 215, Fj], [Co, "de", wn, 36, 217, 0], [Co, "de", 19, 32, 223, yj], [1, "de", 19, 26, 223, Aa], [1, "de", 19, po, 218, Qr], [Ek, "de", 19, ua, 215, Qr], [1, "de", xj, 17, 212, Qr], [_, "de", _k, 15, 224, 0], [Ek, "de", 19, D, 229, 0], [Ek, "de", 19, Li, 230, 0], [Ga, "de", Sn, 22, 240, yj], [_, "de", wn, fr, 238, Qr], [1, "de", 19, io, 243, Fj], [Ga, "de", 19, 24, 244, 0], [_, "de", xj, 24, 250, tj], [Co, "de", 19, 28, 253, Fj], [1, "de", 19, 33, fk, 0], [1, "de", 19, 34, 260, 0], [1, "de", 19, 31, 260, 0], [Ni, "de", 19, 38, 267, xq], [1, "de", Po, 44, 264, tj], [_, "de", 19, 43, 261, 0], [1, "de", 19, 16, 257, 0], [_, "de", 19, 22, 258, Aa], [Co, "de", 19, Vr, 253, 0], [Co, "de", 19, Nk, 242, Fj], [1, "de", Wi, 8, 255, tj], [Co, "de", 19, ik, 264, 0], [1, "de", 19, 20, 265, xq], [1, "de", 19, Vr, 271, 0], [1, "de", 19, Da, 272, 0], [ck, "de", 19, fr, 277, Aa], [1, "de", xj, 21, 277, An], [_, "de", xj, 21, 281, xq], [1, "de", ka, 27, 282, 0], [1, "de", 19, 29, 278, 0], [1, "de", Dn, 29, 273, 0], [1, "de", Sn, 36, 271, yj], [Co, "de", hn, Nk, 278, An], [_, "de", Sn, 11, 286, Fj], [Co, "de", 19, 17, 291, Aa], [1, "de", Po, G, 294, 0], [1, "de", Xa, Da, 292, 0], [1, "de", xj, $k, 300, 0], [Ni, "de", 19, po, 298, 0], [1, "de", 19, Cq, 301, 0], [1, "de", Sn, 27, 296, 0], [1, "de", 19, 25, 292, 0], [1, "de", 19, 23, 301, 0], [1, "de", hn, 28, 301, tj], [Ni, "de", 19, 35, 297, 0], [er, "de", 19, 37, 301, 0], [1, "de", Po, 43, 301, 0], [Ga, "de", 19, 46, 294, Qr], [1, "de", 19, 46, 288, 0], [1, "de", Xa, 40, 287, 0], [1, "de", wn, 50, 301, 0], [er, "de", wn, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", 19, 71, 301, 0], [_, "de", xj, 80, 301, 0], [Ga, "de", _k, 87, 301, 0], [Co, "de", wn, 86, 294, 0], [1, "de", Xa, 87, 290, 0], [1, "de", 19, 82, 286, Aa], [Ga, "de", Qq, 75, 285, 0], [Co, "de", 19, 66, 292, xq], [Ni, "de", Xa, 66, 288, 0], [1, "de", ka, 58, 288, yj], [1, "de", _k, 67, 282, tj], [ck, "de", 19, 61, 281, 0], [ck, "de", 19, 60, 295, An], [1, "de", xj, 50, 282, xq], [1, "de", 19, 47, 283, Aa], [1, "de", Wi, 48, 281, Gk], [1, "de", 19, 44, 277, 0], [1, "de", ka, 41, 282, Qr], [er, "de", _k, 38, 281, 0], [1, "de", 19, 42, 288, Fj], [1, "de", 19, 52, 281, An], [Co, "de", Dn, 50, 275, An], [1, "de", _k, 39, 277, 0], [er, "de", hn, 38, 284, 0], [_, "de", Po, 51, 285, tj], [Co, "de", Qq, 38, 278, yj], [1, "de", hn, 47, 272, Fj], [ck, "de", 19, 44, 267, Aa], [Ga, "de", Wi, 76, 280, xq], [Ga, "de", Dn, 78, 272, tj], [1, "de", Qq, 68, 275, tj], [Ek, "de", 19, 70, 265, 0], [1, "de", 19, 65, 263, 0], [1, "de", wn, 64, 262, 0], [1, "de", 19, 60, 268, Gk], [1, "de", Qq, 56, 266, Gk], [1, "de", wn, 55, 260, 0], [1, "de", 19, 59, 258, 0], [Ek, "de", Wi, 62, fk, An], [Co, "de", Wi, 67, 253, 0], [1, "de", D, 69, Cj, 0], [ck, "de", Qq, 44, 253, 0], [1, "de", D, 44, 250, 0], [1, "de", 19, 36, 245, tj], [Ga, "de", 19, 39, 239, Fj], [1, "de", 19, 42, 234, yj], [Ni, "de", 19, 37, 235, Aa], [Ga, "de", xj, 45, 226, tj], [Ga, "de", Qq, 46, 222, 0], [_, "de", wn, 51, 218, Aa], [_, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, xq], [1, "de", 19, 76, 218, tj], [Co, "de", Dn, 84, 221, Fj], [1, "de", 19, 88, 223, 0], [ck, "de", 19, 76, 230, Gk], [1, "de", 19, 86, 234, 0], [1, "de", 19, 79, 237, 0], [Co, "de", wn, 75, 243, Fj], [1, "de", 19, 81, 245, An], [er, "de", hn, 83, 247, An], [Ga, "de", 19, 88, 247, 0], [Co, "de", Po, 84, 254, 0], [Ga, "de", Qq, 86, 251, 0], [er, "de", 19, 85, 260, 0], [ck, "de", 19, 79, 260, xq], [Ni, "de", 19, 76, 251, yj], [1, "de", Xa, 72, 251, 0], [1, "de", Wi, 69, 251, Qr], [1, "de", 19, 87, 266, 0], [Ga, "de", Qq, 89, 270, 0], [Ni, "de", Po, 87, 271, 0], [Co, "de", 19, 82, 277, Qr], [1, "de", xj, 87, 284, 0], [1, "de", 19, 87, 237, tj], [1, "de", Sn, 88, 179, xq], [1, "de", wn, 50, 191, 0], [Ga, "de", xj, 52, 221, 0], [1, "de", 19, 34, 234, 0], [1, "de", 19, 27, 233, Aa], [ck, "de", Sn, 37, 293, Qr], [1, "de", 29, wa, 181, 0], [1, "de", 29, 8, 180, 0], [1, "de", 30, 13, 186, xq], [1, "de", 31, 24, 183, Qr], [1, "de", 32, 33, 185, xq], [er, "de", 32, 37, 182, 0], [Co, "de", 29, 45, 183, yj], [er, "de", 30, 48, 183, An], [er, "de", 30, 58, 181, xq], [Ni, "de", 30, 66, 188, Gk], [1, "de", 30, 66, 182, Gk], [1, "de", 29, 63, 196, 0], [Co, "de", 29, 54, 194, Aa], [ck, "de", 30, 79, 189, tj], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, 0], [Co, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [Ga, "de", 31, 82, 203, 0], [1, "de", 32, 80, 201, 0], [Co, "de", 32, 87, 209, 0], [ck, "de", 32, 83, 214, An], [Ni, "de", 30, 88, 220, Qr], [1, "de", 30, 78, 229, Aa], [Ga, "de", 30, 73, 223, xq], [ck, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [Co, "de", 30, 72, 208, 0], [1, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, 0], [er, "de", 29, 63, 210, 0], [ck, "de", 29, 50, 204, 0], [Ga, "de", 30, 41, 205, Gk], [Ga, "de", 29, 35, 205, Fj], [er, "de", 30, 27, 202, 0], [1, "de", 30, jk, 201, xq], [1, "de", 29, F, 203, Gk], [Ek, "de", 29, Ur, 196, 0], [_, "de", 29, 24, 187, tj], [1, "de", 29, 28, 223, Fj], [Ek, "de", 29, 32, 212, An], [er, "de", 30, 28, 214, 0], [Co, "de", 31, 24, 218, An], [_, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, yj], [1, "de", 29, 52, 217, 0], [ck, "de", 29, 59, 217, tj], [1, "de", 29, 69, 231, 0], [Ni, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, Qr], [er, "de", 30, 58, 261, Qr], [er, "de", 30, 73, 276, 0], [1, "de", 30, 64, 276, 0], [Ga, "de", 30, 82, 285, Fj], [Co, "de", 30, 65, 293, Aa], [ck, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, 0], [1, "de", 30, 40, 288, 0], [Ni, "de", 30, 37, 283, Qr], [1, "de", 30, 53, 280, 0], [er, "de", 30, 41, 277, 0], [1, "de", 29, 28, 296, tj], [Ga, "de", 29, 18, 292, Fj], [ck, "de", 29, 24, 284, xq], [er, "de", 30, iq, 295, Aa], [1, "de", 30, uj, 286, yj], [Ga, "de", 30, 15, 279, 0], [Co, "de", 30, ua, 269, Gk], [ck, "de", 30, 21, 259, 0], [Co, "de", 30, 12, T, 0], [1, "de", 30, 31, 245, An], [Co, "de", 30, 12, 240, Aa], [er, "de", 30, 28, 235, 0], [Ek, "de", 30, io, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [_, "r", 96, 262, 0], [1, "r", 97, 262, 0], [er, "r", 98, 262, yj], [1, "r", 97, 270, Fj], [1, "r", 97, 271, 0], [_, "r", 97, 272, Gk], [Ga, "r", 97, 273, 0], [Ga, "r", 97, 274, An], [Ga, "r", 97, 275, tj], [_, "r", 97, 276, Fj], [Ga, "r", 97, 277, 0], [1, "r", 97, 278, Qr], [ck, "r", 98, 270, yj], [1, "r", 98, 271, xq], [ck, "r", 98, 272, An], [1, "r", 98, 273, 0], [er, "r", 98, 274, An], [1, "r", 98, 275, 0], [1, "r", 98, 276, 0], [1, "r", 98, 277, 0], [Ni, "r", 98, 278, 0], [1, "r", 96, 283, Aa], [1, "r", 97, 283, 0], [Ni, "r", 97, 284, 0], [er, "r", 97, 285, xq], [Co, "r", 98, 283, Gk], [ck, "r", 98, 284, 0], [Ni, "r", 98, 285, 0], [Co, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [_, "r", 96, 273, xq], [er, "r", 96, 274, Fj], [1, "r", 96, 275, Fj], [1, "r", 96, 276, 0], [1, "r", 96, 277, 0], [1, "r", 96, 278, Qr], [1, "r", 44, 248, Gk], [Co, "de", 16, 94, 290, Gk], [1, "de", 16, 94, 252, 0], [er, "de", 16, 94, 228, 0], [Co, "de", 17, 94, 200, yj], [1, "r", 95, 282, er], [er, "r", 95, 281, Co], [Ni, "r", 94, 281, Ga], [Ni, "r", 90, 281, Ga], [ck, "r", 91, 282, 1], [1, "r", 89, 281, 1], [er, "r", 85, 276, er], [er, "r", 85, 277, 1], [ck, "r", 86, 278, 1], [Ga, "p", Gk, 85, 279, 1], [Ni, "r", 86, 279, er], [er, "r", 87, 280, Ek], [1, "r", 96, 281, Gk], [Ek, "r", 97, 281, 0], [er, "r", 98, 281, Aa], [Co, "r", 98, 282, Gk], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [Ga, "r", 68, 261, 1], [Ek, "fo", Ga, 94, 168, Fj], [Co, "fo", 2, 94, 151, xq], [1, "fo", 1, 94, 138, Fj], [1, "fo", _, 93, 124, Aa], [1, "fo", er, 94, 129, Qr], [Co, "fo", 1, 93, 113, Qr], [1, "fo", 1, 94, 102, Gk], [1, "fo", 1, 94, 93, Qr], [1, "fo", Ga, 93, 90, Fj], [Ga, "fo", 1, 94, 79, Fj], [_, "fo", 1, 94, 76, tj], [1, "fo", 1, 93, 70, 0], [1, "fo", Ga, 93, 63, Gk], [1, "fo", 1, 94, 53, 0], [1, "fo", Ga, 93, 10, 0], [_, "fo", Ga, 85, 8, 0], [1, "fo", Ni, 94, 12, 0], [Ni, "fo", Ek, 66, 13, 0], [1, "fo", Ek, 69, 9, 0], [Co, "fo", On, 68, nq, Fj], [1, "fo", Nr, 66, 25, 0], [1, "fo", X, 92, 9, yj], [er, "fo", tk, 94, 14, Qr], [1, "fo", Nj, 87, Xq, 0], [Ni, "fo", br, 71, 9, An], [1, "fo", Nr, 90, vo, 0], [ck, "fo", 2, 91, 13, 0], [1, "fo", 1, 74, $e, An], [1, "fo", 2, 72, 12, 0], [1, "fo", 2, 75, Nq, 0], [_, "fo", 2, 74, ik, Qr], [1, "fo", 2, 84, 12, xq], [Ni, "fo", 2, 81, vk, 0], [Ek, "fo", 1, 84, mn, 0], [1, "fo", Co, 84, 19, 0], [1, "fo", Co, qn, zk, 0], [1, "fo", 1, Bk, 14, 0], [ck, "fo", 1, 8, 22, Fj], [ck, "fo", 1, 7, 34, 0], [ck, "fo", 1, 12, 24, 0], [Co, "fo", 2, Je, 24, yj], [1, "fo", qi, zk, 21, Qr], [1, "fo", 2, 31, 10, 0], [er, "fo", 2, 33, 27, 0], [Ni, "fo", 2, 9, 34, 0], [1, "fo", qo, wo, 19, tj], [1, "fo", ck, 14, 10, 0], [1, "fo", 2, 13, Pj, yj], [1, "fo", 2, ua, Jj, yj], [1, "fo", Nj, se, Pj, Qr], [1, "fo", 2, 9, F, tj], [Ni, "fo", Nj, se, 15, 0], [Ga, "fo", 2, 10, 23, tj], [_, "fo", 2, 34, 29, 0], [Ga, "fo", 2, 27, Mr, Aa], [1, "fo", br, 25, 21, An], [Ni, "fo", 2, 20, 18, Fj], [1, "fo", 2, L, 21, Qr], [1, "fo", 2, 29, 9, 0], [Ni, "fo", 2, 13, oo, 0], [1, "fo", Nj, Pj, 38, Aa], [Ga, "fo", br, 21, 39, tj], [ck, "fo", 2, 84, 26, Qr], [1, "fo", 2, 77, 25, yj], [ck, "fo", Nj, 86, 35, Fj], [_, "fo", Ni, 70, 35, Gk], [1, "fo", 2, 72, 36, 0], [_, "fo", 2, 73, 31, yj], [_, "fo", 2, 89, 39, Aa], [1, "fo", 2, 65, 40, Gk], [1, "fo", br, 92, 32, 0], [Ga, "fo", Nj, 90, 28, 0], [Ek, "de", 22, 25, 266, 0], [Co, "de", 22, 17, 206, Gk], [Ek, "de", wn, wo, 184, tj], [1, "de", wn, 22, 183, 0], [1, "de", 19, 35, 188, 0], [1, "de", 19, 36, 192, 0], [1, "de", 19, 50, 277, 0], [1, "de", Wi, 35, 279, 0], [1, "t", Oa, 7, 178, 0], [1, "t", 1, Sq, 179, xq], [1, "t", 3, wk, 180, tj], [1, "t", qo, Mn, 181, An], [Ni, "t", ko, 7, 182, 0], [1, "t", aq, 7, 183, Gk], [1, "t", Rn, Sq, 184, 0], [_, "t", 4, Bk, 185, 0], [1, "t", tk, 7, 186, Aa], [1, "t", Co, Sq, 187, Fj], [1, "t", 4, Sq, 188, Fj], [ck, "t", Z, 7, 189, Gk], [er, "t", 5, 7, 190, yj], [_, "t", 1, 7, 191, Gk], [Ek, "t", Hn, Bk, 192, 0], [er, "t", 4, Ji, 193, 0], [ck, "t", 3, 7, 194, 0], [1, "t", 5, 7, 195, 0], [Ga, "t", 2, Nn, 196, yj], [Ek, "t", oe, wk, 197, 0], [_, "b", 2, 7, 198, xq], [_, "t", hr, wk, 199, yj], [1, "t", 2, Nn, 200, 0], [1, "t", Ij, wk, 201, 0], [er, "t", Nj, 7, 202, Fj], [Ek, "t", 4, Sq, 203, yj], [1, "t", bq, Sq, 204, Qr], [1, "t", 5, O, 205, 0], [Ga, "t", 2, Ji, 206, tj], [1, "t", 1, 7, 207, Qr], [1, "t", 4, 7, 208, Fj], [1, "t", 3, Ji, 209, 0], [Ni, "t", Ni, 7, 210, 0], [ck, "b", 0, 7, 211, 0], [1, "t", 3, O, 212, 0], [Ga, "t", Oa, 7, 213, Fj], [Ga, "t", Lq, 7, 214, 0], [1, "t", 5, wk, 215, 0], [Ek, "t", Ij, Nn, 216, 0], [1, "t", Rn, Sq, 217, xq], [1, "t", 1, 7, 218, 0], [Ek, "t", cq, 7, 219, An], [ck, "b", ta, 7, 220, 0], [Ni, "t", ck, O, 221, 0], [Ga, "t", 2, Nn, 222, xq], [1, "t", 4, Ia, 223, yj], [1, "t", Hn, 7, 224, tj], [Ga, "t", Ek, 7, 225, 0], [Ga, "t", 4, 7, 226, 0], [Co, "t", 2, Sq, 227, An], [1, "t", Ij, 7, 228, yj], [1, "t", 3, wk, 229, 0], [_, "t", ck, 7, 230, 0], [1, "t", 4, wk, 231, Aa], [Ni, "b", 2, 7, 232, xq], [Ga, "t", ko, O, 233, Gk], [Ek, "t", ck, 7, 234, Gk], [1, "t", 3, Ji, 235, 0], [1, "t", 4, Ji, 236, Fj], [1, "t", 2, Sq, 237, tj], [Ek, "t", 5, 7, 238, 0], [Ek, "b", 3, Ji, 239, 0], [1, "t", bq, Ji, 240, Qr], [Ga, "t", Co, 7, 241, 0], [Co, "t", br, Ji, 242, tj], [1, "t", 4, O, 243, 0], [er, "t", wi, 7, 244, 0], [er, "t", co, 7, 245, Aa], [Ek, "t", Ga, O, 246, 0], [er, "b", Gk, 7, 247, yj], [1, "t", 3, Sq, 248, 0], [_, "t", 5, Nn, 249, 0], [1, "t", Nr, O, 250, 0], [1, "t", Ni, Nn, 251, 0], [1, "t", yn, 7, 252, 0], [Ga, "t", 3, 7, 253, Aa], [1, "t", 5, O, 254, 0], [1, "t", 1, Bk, 255, 0], [1, "t", 4, Bk, Hq, yj], [1, "t", Co, wk, 257, Fj], [Ni, "t", On, Nn, 258, 0], [er, "t", 5, Ia, 260, Aa], [1, "t", nk, 7, 259, Fj], [Ga, "t", 1, Sq, 261, 0], [Co, "t", nk, Nn, 262, 0], [_, "t", 4, Sq, 263, 0], [1, "t", _, Sq, 264, 0], [Co, "t", br, 7, 265, Fj], [Co, "t", 5, wk, 266, Aa], [1, "t", 2, 7, 267, Qr], [1, "t", tk, Sq, 269, Fj], [1, "b", 2, 7, 268, 0], [er, "t", co, 7, 270, xq], [Co, "t", 1, 7, 271, 0], [Ek, "t", un, Ia, 272, 0], [Ni, "b", 2, 7, 273, 0], [1, "t", 4, Nn, 274, An], [er, "t", bq, Sq, 275, tj], [1, "t", Sj, 7, 276, 0], [1, "t", Ij, Bk, 277, Gk], [1, "t", qi, 7, 278, tj], [_, "t", 1, 7, 279, 0], [1, "t", aq, 7, 280, 0], [ck, "b", 1, 7, 281, An], [1, "t", nk, Bk, 282, Fj], [_, "t", ge, Mn, 283, Fj], [1, "t", 1, O, 284, 0], [Co, "t", Z, Ji, 285, 0], [Ni, "t", ie, Ji, 286, 0], [_, "t", aq, 7, 288, 0], [1, "t", 2, 7, 287, Qr], [ck, "b", tj, Ia, 289, 0], [ck, "t", co, 7, 290, Fj], [1, "t", 2, wk, 291, xq], [Ni, "t", 5, 7, 292, 0], [Ek, "t", 3, O, 293, 0], [1, "t", Co, 7, 294, 0], [Ni, "t", 4, wk, 295, tj], [Co, "t", Hn, Ia, 296, 0], [Ni, "t", 1, 7, 297, 0], [Ga, "t", hr, wk, 298, yj], [1, "t", bq, Mn, 299, 0], [1, "b", 0, 7, 300, Qr], [1, "t", qi, 7, 301, xq], [Co, "r", 196, 271, Fj], [Co, "r", 199, 274, xq], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [1, "r", 189, 207, An], [Ga, "r", 192, 209, Aa], [Ni, "r", 198, 271, Gk], [ck, "r", 197, 271, 0], [1, "r", 198, 272, tj], [er, "r", 197, 272, Gk], [_, "r", 196, 272, Gk], [1, "r", 195, 272, tj], [1, "r", 199, 272, Gk], [Ni, "r", 199, 273, 0], [1, "r", 198, 273, 0], [1, "r", 197, 273, 0], [_, "r", 196, 273, Fj], [Co, "r", 198, 274, An], [er, "r", 197, 274, yj], [1, "r", 195, 273, 0], [_, "r", 196, 274, 0], [ck, "r", 198, 275, Aa], [1, "r", 197, 275, 0], [Co, "r", 200, 274, An], [1, "r", 200, 273, Aa], [Ga, "r", 199, 275, Fj], [_, "plm", Nj, 200, 272, An], [1, "plm", 1, 195, 271, Fj], [ck, "plm", 0, 199, 268, 0], [_, "plm", 0, 193, 277, Qr], [Ni, "plm", 1, 199, 276, An], [1, "s", _, 200, 275, 1], [1, "s", Ek, 194, 272, 1], [_, "s", qo, 193, 270, Ni], [1, "g", 2, 193, 273, 1], [1, "g", X, 201, 267, 1], [1, "m", 2, 220, 298, er], [er, "m", 1, 219, 292, 1], [1, "m", 1, 214, 297, Ga], [_, "r", 168, 238, 0], [Ni, "r", 169, 238, Gk], [er, "r", 170, 238, Fj], [1, "r", 171, 239, 0], [ck, "r", 170, 239, yj], [Ek, "r", 169, 239, An], [1, "r", 168, 239, 0], [_, "r", 167, 239, tj], [er, "r", 166, 239, Aa], [_, "r", 166, 240, tj], [ck, "r", 167, 240, 0], [1, "r", 168, 240, 0], [1, "r", 169, 240, 0], [Co, "r", 170, 240, Gk], [er, "r", 168, 241, yj], [1, "r", 169, 241, 0], [1, "r", 170, 241, An], [1, "r", 171, 241, 0], [1, "plm", tk, 171, 238, 0], [ck, "plm", 1, 166, 238, 0], [Ek, "plm", 0, 167, 237, Aa], [Ga, "plm", yj, 171, 242, tj], [Ga, "plm", An, 165, 243, Gk], [ck, "plm", An, 171, 235, 0], [1, "plm", 0, 174, 241, 0], [er, "s", 1, 165, 239, er], [1, "s", 1, 172, 241, Co], [_, "s", Aa, 170, 237, er], [1, "s", Ni, 171, 237, 1], [Ga, "s", bq, 174, 236, 1], [1, "s", 2, 162, 241, 1], [_, "s", 2, 170, 246, Ni], [1, "s", 2, 167, 235, 1], [Co, "s", 2, 176, 243, 1], [Ek, "r", 190, 207, 0], [1, "r", 191, 207, yj], [1, "r", 192, 208, An], [1, "r", 191, 208, 0], [ck, "r", 190, 208, Aa], [1, "r", 189, 208, 0], [1, "r", 188, 208, 0], [1, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [Ni, "r", 188, 209, 0], [Ek, "r", 190, 210, An], [ck, "r", 191, 210, 0], [ck, "r", 192, 210, 0], [1, "plm", 2, 189, 210, 0], [1, "plm", 2, 192, 205, xq], [1, "plm", 1, 192, 207, An], [1, "plm", Aa, 193, 210, xq], [er, "plm", 0, 187, 208, 0], [Ni, "plm", 0, 197, 206, tj], [Ni, "plm", tj, 191, 213, 0], [1, "plm", An, 190, 204, xq], [_, "s", 1, 188, 207, Ni], [Co, "s", 1, 190, 211, 1], [1, "s", ta, 188, 213, 1], [Ga, "s", 2, 187, 205, Ek], [_, "s", An, 194, 210, er], [er, "s", Gk, 198, 207, ck], [1, "s", Co, 193, 204, ck], [er, "s", Ga, 193, 213, er], [1, "s", 2, 198, 212, Ek], [1, "s", On, 182, 208, 1], [1, "s", 1, 204, 271, Ni], [_, "s", Gk, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", 0, 195, 265, _], [Ek, "s", 2, 196, 264, 1], [Ek, "s", Nj, 186, 274, 1], [1, "s", X, 197, 280, 1], [1, "s", Qr, 217, 282, 1], [1, "s", Ek, 214, 285, 1], [Ga, "s", Co, 214, 274, 1], [Ek, "s", _, 203, 282, 1], [1, "s", 1, 205, 290, 1], [Ga, "s", 0, 207, 292, Co], [1, "s", Qr, 197, 297, Ga], [1, "s", Gk, 184, 287, 1], [1, "s", qi, 213, 289, Ni], [1, "s", 2, 196, 294, 1], [Ni, "s", 2, 187, 286, 1], [1, "s", 1, 192, 289, Ek], [1, "s", _, 189, 299, 1], [1, "s", 0, 213, 273, 1], [1, "g", 2, 212, 278, 1], [1, "g", er, 200, 288, Ga], [er, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, ck], [1, "s", 0, 178, 295, _], [Ek, "s", tj, 167, 281, Co], [Ek, "s", Gk, 175, 263, Ga], [1, "s", 1, 176, 293, 1], [1, "s", _, 163, 285, Co], [1, "s", Co, 177, 266, 1], [1, "s", 1, 161, 272, Ek], [1, "s", 2, 185, 261, 1], [Ni, "c", 0, 217, 270, er], [Co, "c", Aa, 220, 278, ck], [Ek, "c", 0, 217, 283, 1], [Co, "c", 0, 220, 287, Ek], [1, "c", Gk, 210, 292, 1], [1, "c", xq, 205, 297, 1], [1, "c", 0, 198, 293, 1], [1, "c", Qr, 208, 283, Ni], [_, "c", 0, 197, 283, _], [er, "c", 0, 190, 289, Ek], [Ek, "c", Fj, 183, 296, 1], [Ni, "c", 0, 189, 291, Ni], [ck, "c", 0, 178, 284, 1], [1, "c", yj, 208, 265, 1], [1, "c", 0, 169, 292, 1], [1, "s", 1, 158, 294, 1], [Ga, "s", Qr, 151, 297, Ga], [er, "s", 0, 147, 288, 1], [er, "c", 0, 150, 289, er], [1, "c", 0, 160, 282, 1], [1, "c", 0, 146, 274, 1], [Ni, "c", 0, 167, 264, Co], [Ek, "c", xq, 165, 267, Ek], [ck, "g", Gk, 189, 257, 1], [er, "g", Ni, 197, 248, 1], [1, "g", tk, 170, 255, Ni], [1, "g", 2, 212, 234, _], [1, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, Ga], [1, "g", _, 210, 214, 1], [ck, "s", 1, 153, 257, Ni], [Co, "s", yj, 158, 255, 1], [Ni, "s", Qr, 184, 248, 1], [1, "s", 0, 212, 254, 1], [1, "s", 1, 203, 249, Ga], [1, "s", ta, 204, 252, 1], [1, "s", qo, 187, 248, 1], [1, "s", 0, 206, 237, Ga], [1, "s", 0, 196, 227, er], [1, "s", 0, 181, 228, 1], [1, "s", Ek, 199, 227, Co], [Ek, "s", Ek, 208, 238, er], [_, "s", 1, 179, 222, 1], [1, "s", 1, 213, 223, 1], [1, "s", Nj, 182, 222, 1], [1, "s", br, 211, 226, Ni], [1, "s", 2, 214, 214, Ga], [er, "s", On, 201, 216, 1], [1, "s", On, 215, 192, er], [_, "s", ck, 210, 198, 1], [1, "s", Ek, 198, 196, Co], [er, "s", On, 208, 199, 1], [1, "s", bq, 187, 192, Co], [ck, "s", er, 179, 198, 1], [1, "s", qi, 177, 197, _], [Ek, "s", 0, 164, 197, Co], [_, "s", 1, 159, 193, ck], [1, "s", 1, 149, 206, _], [1, "s", Ni, 164, 209, 1], [Ek, "s", Nj, 165, 210, Ga], [1, "s", tk, 161, 191, Ni], [1, "s", Ni, 162, 224, 1], [Ek, "s", tj, 150, 236, 1], [ck, "s", ck, 149, 239, Ni], [Ek, "s", Nr, 153, 236, 1], [1, "s", Nr, 160, 223, Ga], [1, "s", ta, 151, 207, _], [1, "s", Nj, 147, 220, 1], [1, "s", ta, 145, 265, 1], [Ga, "s", qi, 145, 285, 1], [Ek, "c", 0, 152, 266, Co], [1, "c", 0, 185, 271, ck], [1, "c", yj, 210, 254, 1], [_, "c", 0, 209, ra, er], [1, "c", Aa, 198, 254, 1], [Co, "c", An, 213, 246, Ek], [1, "c", 0, 216, 237, Co], [1, "c", 0, 204, 240, Ek], [1, "c", tj, 196, 234, Ek], [1, "c", 0, 188, 238, 1], [1, "c", tj, 182, 245, er], [Ek, "c", 0, 173, 252, ck], [_, "c", 0, 153, 248, 1], [1, "c", Gk, 158, 233, 1], [ck, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", Qr, 157, 214, er], [1, "c", Aa, 167, 219, 1], [_, "c", 0, 171, 208, 1], [Ek, "c", 0, 179, 219, er], [1, "c", 0, 176, 229, 1], [Ek, "c", yj, 195, 221, Ni], [Ga, "c", 0, 207, 222, 1], [Ga, "c", 0, 214, 207, ck], [1, "c", Gk, 205, 210, 1], [1, "c", tj, 204, 196, 1], [1, "c", 0, 214, 196, 1], [1, "c", 0, 190, 199, 1], [1, "c", tj, 184, 194, er], [Ga, "c", Fj, 172, 199, 1], [Ek, "c", Gk, 161, 204, 1], [ck, "c", 0, 157, 196, 1], [1, "c", Gk, 149, 194, 1], [1, "c", yj, 147, 208, er], [1, "c", yj, 207, 274, Ga], [er, "c", Qr, 217, 258, Co], [1, "c", 0, 201, 260, ck], [Ni, "c", Qr, 178, 276, 1], [Ni, "c", Fj, 187, 265, 1], [er, "s", Ek, 204, 260, _], [_, "s", Ga, 216, 260, 1], [_, "s", Ga, 187, Qa, Ek], [er, "s", qi, 189, 254, Co], [1, "s", 2, 212, 257, Co], [Co, "s", 2, 182, 286, 1], [1, "s", 2, 169, 280, 1], [1, "s", tk, 217, 273, Co], [ck, "s", br, 215, 282, Co], [er, "s", Nj, 172, 263, 1], [_, "s", 2, 176, 267, 1], [1, "s", qi, 215, 251, ck], [1, "fod", ck, 221, 282, 0], [ck, "fod", 1, 222, 284, Fj], [Co, "fod", er, 221, 290, xq], [1, "fod", _, 222, 294, Gk], [1, "fod", Ni, 221, 297, Gk], [1, "fod", Ga, 223, 298, 0], [Ek, "fod", Co, 222, 300, 0], [1, "fod", Ga, 218, 301, 0], [Ga, "fod", 1, 217, 299, Gk], [1, "fod", 1, 215, 301, xq], [er, "fod", 1, 212, 300, Qr], [1, "fod", 1, 206, 300, 0], [1, "fod", 1, 209, 301, 0], [1, "fod", 1, 204, 299, Aa], [1, "fod", Ga, 202, 301, 0], [ck, "fod", 1, 199, 301, xq], [1, "fod", 1, 222, 282, xq], [_, "fod", 1, 207, 301, Aa], [Ga, "fod", 1, 197, 301, yj], [1, "fod", 1, 215, 291, 0], [1, "fod", _, 216, 286, 0], [er, "fod", Ni, 214, 292, An], [1, "fod", 1, 210, 289, 0], [1, "fod", 1, 208, 294, Gk], [1, "fod", 1, 210, 298, yj], [Co, "fod", 1, 212, 281, Aa], [_, "fod", 1, 219, 278, xq], [1, "fod", 1, 219, 282, 0], [Co, "fod", Ek, 205, 286, Aa], [1, "fod", Ga, 202, 293, 0], [1, "fod", 1, 198, 295, yj], [_, "fod", 2, 213, 282, 0], [Ga, "fod", 2, 213, 291, Gk], [er, "fod", 2, 216, 289, 0], [Ni, "fod", qi, 219, 289, Gk], [ck, "fod", 2, 218, 285, 0], [ck, "fod", 2, 220, 283, 0], [Co, "fod", Nj, 211, 283, tj], [1, "fod", Nj, 215, 281, xq], [Co, "fod", 2, 217, 279, Fj], [Ek, "fod", 2, 208, 290, 0], [Ga, "fod", qo, 211, 296, Aa], [1, "fod", 2, 215, 294, An], [1, "fod", 2, 212, 298, 0], [1, "fod", 2, 203, 294, Fj], [1, "fod", ta, 204, 288, 0], [Ni, "fod", tk, 200, 294, Gk], [1, "fod", ta, 198, 297, 0], [1, "fod", qo, 202, 299, xq], [Ga, "fod", 2, 200, 299, 0], [1, "fod", br, 220, 300, 0], [Ek, "fod", Nr, 220, 295, 0], [Ga, "fod", 2, 220, 292, tj], [1, "fod", qi, 219, 287, Fj], [1, "fod", 2, 211, 288, Fj], [Co, "fod", bq, 213, 287, An], [1, "fod", qo, 211, 289, 0], [Ga, "fod", br, 212, 290, Qr], [1, "fod", 2, 195, 296, Gk], [1, "fod", qi, 196, 299, Gk], [Ga, "fod", br, 194, 300, 0], [Ek, "fod", 2, 195, 300, xq], [1, "fod", 2, 213, 279, 0], [1, "fod", X, 211, 279, An], [er, "fod", 0, 218, 290, 0], [ck, "fod", 0, 212, 294, Aa], [Ga, "fod", 1, 213, 295, 0], [Co, "fod", 1, 217, 292, yj], [1, "fod", er, 218, 288, 0], [Ni, "fod", 1, 210, 295, Fj], [er, "fod", 1, 213, 292, Fj], [Co, "fod", Ni, 212, 289, 0], [1, "fod", 1, 205, 295, Aa], [ck, "fod", qi, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, xq], [1, "fod", Nj, 209, 299, yj], [1, "fod", X, 211, 291, Gk], [Co, "fod", Ga, 203, 275, Fj], [er, "fod", 1, 204, 272, 0], [1, "fod", X, 205, 273, Qr], [Ga, "fod", br, 204, 276, yj], [1, "fod", 2, 202, 276, 0], [1, "fod", 2, 199, 277, 0], [1, "fod", 2, 202, 273, 0], [Ga, "fod", bq, 199, 270, 0], [1, "fod", On, 194, 274, An], [1, "fod", ta, 194, 277, An], [Ni, "fod", 1, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [ck, "fod", Nj, 194, 265, 0], [1, "fod", 2, 190, 272, Aa], [1, "fod", 2, 191, 275, tj], [1, "fod", 2, 195, 274, Fj], [_, "fod", tk, 200, 271, xq], [1, "fod", _, 168, 243, tj], [1, "fod", Ni, 175, 240, 0], [er, "fod", _, 169, 234, 0], [1, "fod", 1, 162, 235, 0], [1, "fod", 2, 169, 236, 0], [Co, "fod", 2, 171, 234, 0], [_, "fod", On, 165, 238, 0], [1, "fod", 2, 173, 241, 0], [Ni, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, Gk], [1, "fod", 2, 169, 244, 0], [Co, "fod", 2, 166, 243, 0], [1, "fod", ta, 162, 236, Aa], [1, "fod", 2, 164, 235, xq], [1, "fod", 2, 162, 233, 0], [1, "fod", 2, 163, 236, 0], [Ni, "fod", 2, 174, 242, 0], [er, "fod", 2, 171, 243, Gk], [1, "fod", 1, 194, 206, 0], [Co, "fod", ck, 190, 214, 0], [Ek, "fod", 1, 186, 206, Fj], [ck, "fod", 1, 197, 207, An], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, Fj], [1, "fod", 2, 198, 208, 0], [1, "fod", Nj, 194, 204, 0], [1, "fod", X, 187, 206, 0], [Ek, "fod", 2, 186, 204, 0], [1, "fod", qi, 189, 214, 0], [1, "fod", 2, 189, 213, Gk], [1, "fod", 2, 193, 215, 0], [1, "fod", br, 194, 214, 0], [Ga, "fod", 2, 187, 215, Fj], [er, "fod", 2, 193, 209, yj], [Ek, "fod", 2, 189, 211, 0], [Ek, "fod", 2, 187, 209, 0], [ck, "fod", qi, 187, 207, 0], [Co, "fod", X, 191, 205, 0], [1, "fod", 2, 189, 203, 0], [1, "cs", 2, 224, 176, 1], [Ga, "cs", Fj, 224, 177, er], [1, "cs", Z, 224, 178, _], [Ni, "cs", qo, 224, 179, 1], [_, "cs", Co, 224, 180, 1], [1, "cs", br, 224, 181, Ek], [ck, "cs", tj, 224, 182, Ni], [er, "cs", br, 224, 183, Ni], [1, "cs", Qr, 224, 184, Ni], [_, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, _], [1, "cs", Aa, 224, 187, _], [1, "cs", 2, 224, 188, Ek], [Ek, "cs", 0, 224, 189, _], [1, "cs", 1, 224, 190, ck], [Ni, "cs", 2, 224, 191, 1], [ck, "cs", Fj, 224, 192, 1], [Ni, "cs", tk, 224, 193, 1], [Ga, "cs", br, 224, 194, 1], [Ni, "cs", Ga, 224, 195, 1], [1, "cs", 2, 224, 196, Ni], [1, "cs", Qr, 224, 197, Co], [1, "cs", 3, 224, 198, er], [1, "cs", qo, 224, 199, Ni], [Co, "cs", Ni, 224, 200, 1], [1, "cs", ta, 224, 201, 1], [Ek, "cs", Rn, 224, 202, 1], [Ni, "cs", yj, 224, 203, _], [1, "cs", 1, 224, 204, Ga], [Ni, "cs", 2, 224, 205, ck], [er, "cs", xq, 224, 206, 1], [1, "cs", 1, 224, 207, 1], [1, "cs", Hn, 224, 208, 1], [Ni, "cs", 2, 224, 209, 1], [er, "cs", On, 224, 210, Ga], [_, "cs", yj, 223, 211, ck], [Ga, "cs", 1, 224, 211, 1], [Ga, "cs", qi, 224, 212, 1], [Co, "cs", qo, 224, 213, 1], [_, "cs", 1, 224, 214, Ek], [1, "cs", 3, 224, 215, Ni], [1, "cs", 0, 224, 216, 1], [1, "cs", Co, 224, 217, _], [1, "cs", 2, 224, 218, 1], [1, "cs", Rn, 224, 219, 1], [1, "cs", 0, 223, 215, Ni], [1, "cs", Nj, 223, 214, er], [Ga, "cs", 2, 223, 212, 1], [_, "cs", qo, 223, 216, Ni], [Ni, "cs", 3, 223, 217, Ek], [1, "cs", 0, 223, 218, Ek], [1, "cs", 0, 224, 220, ck], [1, "cs", 0, 224, 222, 1], [Ek, "cs", xq, 223, 209, Co], [1, "cs", Qr, 223, 205, Co], [1, "cs", ta, 224, 221, er], [1, "cs", 2, 223, 219, 1], [Co, "cs", On, 223, 220, 1], [1, "cs", X, 223, 213, ck], [1, "cs", X, 223, 210, 1], [ck, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, ck], [1, "cs", Rn, 223, 181, 1], [Ga, "cs", 3, 223, 182, Ga], [1, "cs", Co, 223, 185, 1], [er, "cs", 2, 223, 184, 1], [er, "cs", 2, 223, 186, Ga], [1, "cs", 0, 223, 180, 1], [1, "cs", Gk, 223, 183, 1], [_, "cs", On, 223, 187, _], [1, "cs", 1, 223, 188, 1], [1, "cs", X, 223, 189, Ek], [1, "cs", ta, 223, 190, 1], [1, "cs", 3, 223, 191, 1], [1, "cs", er, 223, 192, 1], [Ga, "cs", 2, 223, 193, 1], [1, "cs", tk, 223, 194, 1], [er, "cs", 3, 223, 195, ck], [1, "cs", 1, 223, 196, 1], [1, "cs", 2, 223, 197, 1], [er, "cs", bq, 223, 199, Co], [Ga, "cs", 2, 223, 198, Ek], [ck, "cs", 0, 223, 200, _], [1, "cs", Nr, 223, 201, Ga], [1, "cs", 0, 223, 202, _], [1, "cs", Z, 223, 203, 1], [_, "cs", 3, 223, 204, 1], [1, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, Co], [1, "cs", Z, 223, 208, Ek], [1, "cs", 2, 223, 221, 1], [Ga, "cs", 2, 223, 222, 1], [ck, "cs", 0, 223, 224, Ga], [1, "cs", An, 224, 228, 1], [er, "cs", 0, 224, 230, 1], [1, "cs", 0, 223, 234, 1], [Ek, "cs", 2, 223, 223, er], [1, "cs", Nj, 224, 223, 1], [_, "cs", 2, 224, 224, Ni], [_, "cs", 2, 224, 225, 1], [1, "cs", 1, 223, 226, Co], [1, "cs", 1, 224, 231, 1], [ck, "cs", 1, 223, 232, 1], [ck, "cs", Z, 223, 225, 1], [Co, "cs", nk, 224, 226, 1], [ck, "cs", wi, 223, 227, _], [1, "cs", 3, 224, 227, 1], [ck, "cs", Qn, 223, 229, 1], [1, "cs", 3, 223, 228, 1], [er, "cs", Qn, 224, 229, 1], [Ek, "cs", Hn, 223, 230, 1], [er, "cs", 3, 223, 231, 1], [Ni, "cs", Er, 224, 232, Co], [Co, "cs", 3, 224, 233, 1], [1, "cs", Rn, 223, 233, Co], [er, "cs", Lq, 224, 234, 1], [Ek, "cs", Lq, 224, 235, Ga], [1, "cs", Lq, 223, 235, Ek], [1, "cs", 1, 224, 236, Co], [Ek, "cs", X, 223, 236, Co], [Ga, "cs", Nj, 223, 237, 1], [1, "cs", Rn, 224, 237, 1], [1, "cs", wi, 224, 238, er], [1, "cs", 0, 224, 239, Ga], [er, "cs", 1, 223, 241, 1], [_, "cs", 0, 224, 243, ck], [Ek, "cs", 0, 223, 245, _], [ck, "cs", 0, 224, 247, 1], [ck, "cs", br, 223, 240, _], [ck, "cs", 2, 223, 239, 1], [ck, "cs", Nj, 224, 240, _], [1, "cs", 2, 224, 241, ck], [er, "cs", 2, 224, 242, Ga], [Ni, "cs", Nj, 223, 242, Ga], [_, "cs", 2, 223, 243, 1], [er, "cs", 2, 223, 244, 1], [1, "cs", 2, 224, 244, _], [Ek, "cs", 2, 224, 245, 1], [Co, "cs", 2, 224, 246, 1], [Ek, "cs", Z, 223, 238, _], [Ga, "cs", Er, 223, 246, 1], [_, "cs", 2, 223, 247, 1], [1, "cs", Co, 223, 249, 1], [1, "cs", Ek, 224, 253, 1], [1, "cs", Ni, 223, 256, ck], [Co, "cs", xq, 223, 254, Ga], [er, "cs", 0, 224, 250, 1], [Co, "cs", Z, 223, 248, _], [1, "cs", wi, 223, 250, _], [Ek, "cs", 3, 223, 252, _], [1, "cs", Er, 223, Un, 1], [1, "cs", 3, 223, 257, ck], [Ek, "cs", 2, 224, 248, 1], [1, "cs", ta, 224, 249, 1], [Ga, "cs", 2, 223, 251, Ek], [Ek, "cs", ta, 224, 251, 1], [Ga, "cs", 2, 224, 252, 1], [1, "cs", qi, 223, 253, 1], [1, "cs", Nj, 224, 254, 1], [1, "cs", 2, 224, 255, 1], [1, "cs", 2, 224, 256, Co], [1, "cs", 2, 224, 257, Ni], [Ni, "cs", 0, 224, 258, Ni], [_, "cs", 0, 223, 261, Ni], [er, "cs", Gk, 224, 263, 1], [1, "cs", Aa, 224, 266, 1], [ck, "cs", yj, 224, 272, 1], [1, "cs", Aa, 223, 270, 1], [1, "cs", Fj, 223, 275, 1], [1, "cs", er, 223, 259, _], [Ga, "cs", Co, 223, 264, 1], [er, "cs", _, 223, 268, 1], [_, "cs", ck, 224, 274, 1], [1, "cs", qi, 223, 258, 1], [ck, "cs", 2, 223, 260, 1], [1, "cs", qi, 223, 263, Ni], [Ni, "cs", 2, 223, 265, 1], [ck, "cs", Nr, 223, 267, Ek], [ck, "cs", qi, 223, 271, er], [1, "cs", 2, 223, 273, ck], [ck, "cs", nk, 223, 262, 1], [1, "cs", 3, 223, 266, Ek], [1, "cs", Z, 223, 269, Ga], [1, "cs", 3, 223, 272, 1], [ck, "cs", 3, 223, 274, 1], [1, "cs", nk, 224, 275, _], [1, "cs", Hn, 224, 273, 1], [er, "cs", 3, 224, 271, 1], [1, "cs", Rn, 224, 270, Co], [_, "cs", wi, 224, 269, 1], [Ga, "cs", Er, 224, 268, 1], [ck, "cs", nk, 224, 267, 1], [ck, "cs", Er, 224, 265, ck], [1, "cs", 3, 224, 264, 1], [1, "cs", 3, 224, 262, Ni], [1, "cs", nk, 224, 261, _], [1, "cs", 3, 224, 260, 1], [1, "cs", Lq, 224, 259, 1], [1, "cs", 2, 223, 276, _], [Co, "cs", 1, 224, 276, Co], [Ga, "cs", Co, 224, 280, 1], [1, "cs", 1, 223, 281, Co], [1, "cs", Ni, 224, 286, _], [Ni, "cs", 0, 223, 280, 1], [Ek, "cs", 0, 223, 284, 1], [ck, "cs", 0, 224, 288, 1], [1, "cs", xq, 224, 279, 1], [1, "cs", 2, 223, 277, er], [er, "cs", 2, 224, 277, Ga], [Ni, "cs", 2, 224, 278, Ni], [Ga, "cs", 2, 224, 281, 1], [_, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [1, "cs", 2, 224, 284, 1], [1, "cs", 2, 224, 285, 1], [ck, "cs", qi, 224, 287, 1], [ck, "cs", 2, 223, 287, Ni], [Ga, "cs", 2, 223, 285, 1], [ck, "cs", 2, 223, 283, Ga], [Ga, "cs", qo, 223, 279, Co], [ck, "cs", 3, 223, 278, 1], [Co, "cs", 3, 223, 282, 1], [1, "cs", Er, 223, 286, Ni], [1, "cs", 3, 223, 289, 1], [ck, "cs", nk, 224, 289, Ni], [er, "cs", 2, 223, 288, Ga], [1, "cs", 2, 224, 290, Co], [Co, "cs", 1, 223, 290, 1], [er, "cs", 0, 224, 292, 1], [1, "cs", 0, 223, 294, 1], [ck, "cs", 0, 224, 297, 1], [_, "cs", 0, 223, 299, Co], [_, "cs", 2, 223, 291, 1], [1, "cs", 2, 224, 291, Ek], [Co, "cs", qo, 223, 292, 1], [1, "cs", Nr, 223, 293, 1], [Ni, "cs", tk, 224, 293, 1], [1, "cs", Nj, 224, 294, Ek], [Ga, "cs", 1, 224, 295, 1], [1, "cs", qo, 223, 295, 1], [1, "cs", 2, 223, 296, Ni], [1, "cs", ta, 224, 296, _], [1, "cs", 2, 223, 297, 1], [1, "cs", 2, 223, 298, 1], [1, "cs", 2, 224, 298, ck], [_, "cs", 2, 224, 299, 1], [Ni, "cs", 2, 223, 300, Ni], [_, "cs", Ni, 224, 300, Ek], [Ni, "cs", 0, 223, 301, 1], [1, "cs", tj, 224, 302, er], [1, "cs", An, 224, 304, Ga], [ck, "cs", 3, 224, 301, Co], [1, "cs", Qn, 224, 303, er], [1, "cs", 0, 221, 303, Ek], [er, "cs", 0, 219, 304, Co], [1, "cs", Co, 222, 304, Ni], [Co, "cs", 1, 222, 302, Co], [Ga, "cs", 2, 223, 302, ck], [Co, "cs", 2, 223, 303, 1], [1, "cs", On, 222, 303, _], [_, "cs", br, 223, 304, ck], [1, "cs", X, 221, 304, Ek], [1, "cs", 2, 220, 304, er], [Ga, "cs", 2, 220, 303, _], [1, "cs", Nr, 220, 302, 1], [1, "cs", 2, 221, 302, er], [1, "cs", ta, 219, 303, Ga], [Ek, "cs", 0, 217, 302, Co], [1, "cs", 0, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [Ga, "cs", 1, 218, 302, 1], [1, "cs", _, 217, 304, 1], [1, "cs", 1, 215, 302, 1], [1, "cs", qo, 219, 302, 1], [1, "cs", br, 218, 303, 1], [1, "cs", qo, 218, 304, 1], [er, "cs", tk, 217, 303, 1], [er, "cs", br, 216, 304, 1], [1, "cs", 2, 215, 303, ck], [1, "cs", ta, 216, 303, _], [1, "cs", ta, 216, 302, 1], [_, "cs", 2, 214, 303, 1], [er, "cs", 2, 214, 304, Ek], [1, "cs", 0, 212, 302, Ek], [er, "cs", yj, 210, 303, Ni], [Ek, "cs", 0, 212, 304, _], [1, "cs", Qr, 208, 304, Co], [Ek, "cs", 1, 210, 302, Ga], [Ni, "cs", 1, 208, 303, 1], [1, "cs", 2, 213, 302, Co], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, er], [Ga, "cs", tk, 212, 303, 1], [1, "cs", 2, 211, 304, Co], [Co, "cs", 2, 211, 303, _], [ck, "cs", tk, 211, 302, 1], [ck, "cs", 2, 209, 302, er], [1, "cs", 2, 209, 303, Co], [Ni, "cs", ta, 209, 304, 1], [er, "cs", br, 210, 304, 1], [1, "cs", Nr, 208, 302, Co], [1, "cs", 0, 206, 303, er], [1, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, 1], [1, "cs", 0, 195, 304, Ek], [1, "cs", yj, 191, 303, ck], [er, "cs", An, 193, 304, 1], [Co, "cs", Aa, 189, 304, Ga], [er, "cs", Ni, 204, 303, Ni], [ck, "cs", 0, 197, 302, _], [1, "cs", tj, 202, 302, 1], [Ga, "cs", yj, 188, 302, _], [_, "cs", xq, 194, 302, 1], [ck, "cs", 1, 197, 303, Co], [1, "cs", Co, 201, 304, Ni], [1, "cs", Ek, 192, 302, 1], [1, "cs", 1, 189, 303, Co], [1, "cs", er, 205, 302, 1], [Co, "cs", 1, 188, 304, Ga], [1, "cs", 2, 207, 302, Ga], [1, "cs", ta, 207, 303, 1], [er, "cs", On, 207, 304, 1], [ck, "cs", 2, 206, 304, _], [1, "cs", X, 206, 302, 1], [1, "cs", 2, 205, 303, 1], [1, "cs", qo, 204, 304, 1], [1, "cs", br, 205, 304, 1], [1, "cs", ta, 204, 302, Co], [1, "cs", 2, 203, 302, 1], [1, "cs", 2, 203, 303, Ek], [Ga, "cs", tk, 202, 303, ck], [1, "cs", Nj, 201, 303, Ni], [1, "cs", 2, 201, 302, 1], [1, "cs", 2, 200, 302, 1], [Ni, "cs", 2, 199, 302, 1], [1, "cs", 2, 198, 303, 1], [Co, "cs", ta, 198, 302, 1], [Ga, "cs", 2, 199, 303, 1], [1, "cs", Nj, 200, 304, 1], [1, "cs", 2, 202, 304, ck], [Ni, "cs", 2, 197, 304, 1], [1, "cs", Nj, 198, 304, _], [Ni, "cs", Nj, 196, 304, 1], [er, "cs", qo, 196, 303, 1], [Ga, "cs", ta, 196, 302, ck], [1, "cs", 2, 195, 302, Co], [Ek, "cs", 2, 195, 303, 1], [1, "cs", 2, 194, 303, 1], [Ni, "cs", 2, 194, 304, 1], [Ek, "cs", ta, 193, 303, _], [1, "cs", 2, 193, 302, Ga], [1, "cs", 2, 192, 303, 1], [_, "cs", 2, 192, 304, Ni], [Ek, "cs", bq, 191, 304, 1], [1, "cs", tk, 190, 304, Co], [1, "cs", qi, 190, 303, 1], [Ni, "cs", 2, 189, 302, 1], [1, "cs", X, 190, 302, Co], [1, "cs", Nr, 191, 302, 1], [Ek, "cs", 2, 188, 303, 1], [Co, "cs", 0, 186, 303, Ni], [1, "cs", Qr, 183, 304, Ni], [_, "cs", 0, 184, 302, ck], [Co, "cs", 0, 181, 302, 1], [1, "cs", 0, 176, 302, 1], [Ni, "cs", 0, 178, 303, 1], [_, "cs", An, 173, 304, ck], [ck, "cs", 0, 170, 303, 1], [1, "cs", Fj, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", er, 178, 304, Ek], [ck, "cs", Ni, 175, 304, 1], [Co, "cs", Ni, 173, 302, ck], [1, "cs", 1, 185, 304, 1], [1, "cs", Ni, 169, 304, 1], [Ga, "cs", 3, 187, 304, er], [Co, "cs", 3, 186, 304, _], [_, "cs", nk, 187, 303, Ek], [1, "cs", Z, 187, 302, 1], [1, "cs", Z, 186, 302, 1], [1, "cs", wi, 185, 302, Co], [1, "cs", 3, 185, 303, er], [1, "cs", Rn, 184, 303, 1], [ck, "cs", 3, 183, 303, 1], [1, "cs", Hn, 183, 302, 1], [1, "cs", Er, 182, 302, Ek], [er, "cs", Z, 184, 304, 1], [_, "cs", Lq, 182, 304, 1], [Ga, "cs", 3, 181, 304, 1], [Ni, "cs", Er, 179, 304, Ga], [_, "cs", Lq, 180, 304, er], [er, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, 1], [ck, "cs", Lq, 179, 303, 1], [1, "cs", 3, 180, 302, _], [Ni, "cs", 3, 179, 302, 1], [1, "cs", Hn, 178, 302, 1], [er, "cs", Z, 177, 302, ck], [Co, "cs", 3, 177, 304, ck], [_, "cs", wi, 177, 303, Ek], [1, "cs", Rn, 176, 303, Ek], [Ek, "cs", wi, 176, 304, 1], [1, "cs", Rn, 174, 304, 1], [Ni, "cs", 3, 175, 303, Co], [1, "cs", Er, 174, 303, _], [_, "cs", 3, 173, 303, ck], [Ga, "cs", nk, 172, 303, Ga], [Co, "cs", Z, 171, 303, 1], [Ga, "cs", 3, 170, 304, er], [Ga, "cs", 3, 171, 304, 1], [1, "cs", Hn, 172, 304, Ga], [Co, "cs", 3, 174, 302, 1], [1, "cs", nk, 175, 302, ck], [1, "cs", nk, 171, 302, Ni], [Ni, "cs", Qn, 170, 302, ck], [er, "cs", wi, 169, 302, 1], [_, "cs", 3, 169, 303, er], [_, "cs", xq, 168, 302, 1], [1, "cs", 0, 166, 303, Ga], [_, "cs", Qr, 163, 304, ck], [1, "cs", Qr, 161, 302, ck], [_, "cs", 0, 159, 303, _], [1, "cs", 0, 152, 304, 1], [1, "cs", yj, 155, 303, Co], [1, "cs", 1, 164, 303, ck], [1, "cs", ck, 162, 303, ck], [_, "cs", _, 158, 304, Ga], [1, "cs", Ek, 156, 302, Ga], [Ni, "cs", er, 153, 302, 1], [Ga, "cs", _, 154, 304, 1], [Ni, "cs", 2, 168, 304, 1], [Ga, "cs", ta, 168, 303, 1], [er, "cs", 2, 167, 303, 1], [Co, "cs", bq, 167, 304, 1], [ck, "cs", qo, 166, 304, 1], [Co, "cs", ta, 165, 304, 1], [1, "cs", 2, 164, 304, ck], [1, "cs", bq, 165, 303, 1], [Ni, "cs", bq, 167, 302, 1], [er, "cs", 2, 166, 302, Co], [1, "cs", 2, 165, 302, Co], [Ga, "cs", 2, 164, 302, 1], [1, "cs", br, 163, 302, 1], [1, "cs", 2, 162, 302, Co], [1, "cs", 2, 163, 303, 1], [ck, "cs", 2, 162, 304, 1], [Co, "cs", br, 160, 304, 1], [1, "cs", 2, 159, 304, 1], [1, "cs", 2, 161, 304, 1], [Ni, "cs", 2, 161, 303, 1], [1, "cs", 2, 160, 303, 1], [Ga, "cs", bq, 160, 302, ck], [1, "cs", 2, 158, 302, 1], [1, "cs", On, 159, 302, Ek], [1, "cs", 2, 157, 302, er], [ck, "cs", On, 156, 303, 1], [1, "cs", 2, 157, 303, er], [ck, "cs", 2, 158, 303, Co], [er, "cs", Nr, 157, 304, 1], [1, "cs", 2, 156, 304, _], [1, "cs", Nr, 155, 304, _], [ck, "cs", 2, 153, 304, Ga], [1, "cs", br, 153, 303, ck], [1, "cs", bq, 154, 303, Ga], [1, "cs", 2, 154, 302, ck], [Ek, "cs", 2, 155, 302, 1], [Ga, "cs", qo, 152, 303, 1], [Co, "cs", 2, 152, 302, 1], [1, "cs", 0, 151, 302, 1], [ck, "cs", 0, 149, 303, Ni], [1, "cs", Gk, 145, 304, 1], [er, "cs", xq, 147, 302, 1], [Ni, "cs", Fj, 143, 303, ck], [Co, "cs", 0, 141, 303, 1], [1, "cs", 1, 147, 304, Ni], [1, "cs", 1, 145, 302, 1], [Co, "cs", 1, 142, 302, er], [1, "cs", er, 150, 304, 1], [Ek, "cs", On, 151, 304, _], [er, "cs", 2, 151, 303, Co], [1, "cs", 2, 150, 303, ck], [1, "cs", 2, 150, 302, _], [1, "cs", 2, 148, 302, 1], [Ni, "cs", 2, 146, 302, Co], [_, "cs", On, 144, 302, Co], [er, "cs", On, 141, 302, er], [Ek, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, Ek], [1, "cs", 2, 142, 303, Ek], [1, "cs", 2, 143, 304, Ga], [Ga, "cs", Nr, 144, 304, 1], [1, "cs", 2, 144, 303, er], [1, "cs", 2, 148, 304, 1], [1, "cs", 2, 148, 303, Ek], [Ek, "cs", 2, 146, 303, 1], [Ni, "cs", 2, 145, 303, 1], [ck, "cs", qi, 147, 303, _], [ck, "cs", Nr, 146, 304, er], [er, "cs", 2, 149, 304, 1], [1, "cs", 3, 149, 302, 1], [Ek, "cs", Qn, 143, 302, 1], [Ni, "cs", tj, 139, 304, Ga], [Ek, "cs", Fj, 138, 302, 1], [_, "cs", Ni, 139, 302, er], [1, "cs", Nr, 140, 302, Co], [Ek, "cs", 2, 140, 303, _], [1, "cs", 2, 139, 303, 1], [ck, "cs", 2, 138, 303, Ek], [1, "cs", 2, 138, 304, Ek], [_, "cs", 2, 140, 304, 1], [1, "cs", tj, 137, 304, ck], [er, "cs", Fj, 135, 303, _], [Ek, "cs", 0, 133, 304, 1], [1, "cs", Ni, 135, 304, _], [Ek, "cs", 1, 136, 302, 1], [1, "cs", X, 137, 302, 1], [1, "cs", 2, 136, 303, _], [ck, "cs", 2, 137, 303, Ga], [1, "cs", 2, 136, 304, 1], [1, "cs", On, 134, 304, Ga], [1, "cs", bq, 134, 303, Co], [Ek, "cs", 2, 133, 303, _], [Ni, "cs", 2, 132, 304, Ek], [_, "cs", 0, 131, 302, 1], [Ga, "cs", yj, 134, 302, Ga], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, Ga], [1, "cs", 1, 132, 302, 1], [1, "cs", ta, 135, 302, Co], [1, "cs", br, 133, 302, Co], [ck, "cs", On, 132, 303, 1], [1, "cs", 2, 131, 303, 1], [1, "cs", br, 130, 304, 1], [1, "cs", 2, 131, 304, Ek], [1, "cs", bq, 128, 304, 1], [1, "cs", Nj, 129, 303, er], [ck, "cs", qo, 130, 302, 1], [Ga, "cs", wi, 127, 304, Ga], [_, "cs", tk, 132, 301, 1], [1, "cs", 2, 133, 301, er], [1, "cs", qo, 134, 301, 1], [_, "cs", 2, 135, 301, 1], [Ni, "cs", Lq, 131, 301, Ek], [er, "cs", wi, 136, 301, 1], [1, "cs", Lq, 136, 178, ck], [ck, "cs", Qr, 136, 183, Ek], [ck, "cs", Nr, 136, 182, 1], [1, "cs", ck, 136, 181, 1], [Co, "cs", tj, 136, 179, 1], [1, "cs", 3, 136, 180, 1], [1, "cs", X, 135, 183, 1], [1, "cs", 1, 135, 182, Ga], [1, "cs", Qn, 135, 180, 1], [Ek, "cs", 0, 134, 183, 1], [Co, "cs", X, 133, 183, ck], [er, "cs", Qn, 133, 182, Co], [Co, "cs", 1, 132, 183, Ni], [1, "cs", nk, 131, 183, Ek], [1, "cs", X, 135, 181, 1], [1, "cs", On, 134, 182, ck], [Ga, "cs", Z, 134, 181, 1], [Ga, "fod", Qr, 213, 301, 0], [Ek, "fod", 0, 204, 301, 0], [1, "fod", er, 196, 288, 0], [1, "fod", 1, 198, 283, xq], [Ga, "fod", Ni, 190, 288, An], [1, "fod", Ni, 189, 296, xq], [_, "fod", Co, 193, 293, 0], [1, "fod", ck, 183, 292, An], [1, "fod", 1, 186, 287, 0], [1, "fod", Ga, 190, 290, 0], [1, "fod", Ek, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, Aa], [1, "fod", 1, 210, 274, 0], [1, "fod", 1, 205, 263, Gk], [1, "fod", 1, 216, 258, 0], [1, "fod", X, 201, 294, 0], [Ga, "fod", 2, 190, 296, Aa], [er, "fod", 2, 188, 299, 0], [ck, "fod", bq, 186, 297, 0], [1, "fod", bq, 188, 296, Fj], [Co, "fod", 2, 189, 291, tj], [1, "fod", Nj, 189, 286, 0], [Ga, "fod", 2, 191, 286, 0], [_, "fod", 2, 197, 286, tj], [1, "fod", Nj, 195, 290, 0], [Ga, "fod", X, 186, 288, An], [Ga, "fod", tk, 184, 290, An], [ck, "fod", 2, 183, 293, tj], [Ek, "fod", 2, 198, 286, xq], [Ek, "fod", br, 196, 283, 0], [ck, "fod", qo, 196, 281, 0], [1, "fod", br, 201, 280, Aa], [ck, "fod", Nr, 205, 287, 0], [1, "fod", 2, 209, 283, Qr], [Ga, "fod", 2, 212, 280, Fj], [1, "fod", 2, 209, 277, 0], [_, "fod", bq, 217, 278, tj], [1, "fod", Nj, 219, 275, 0], [1, "fod", X, 220, 271, 0], [1, "fod", qo, 220, 267, 0], [_, "fod", bq, 217, 265, Aa], [1, "fod", ta, 213, 267, 0], [1, "fod", 2, 208, 264, xq], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [1, "fod", 2, 204, 270, tj], [Ni, "fod", X, 196, 267, xq], [Ek, "fod", 2, 214, 261, tj], [1, "fod", 2, 211, 260, 0], [1, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [ck, "fod", 2, 220, 253, 0], [1, "fod", 2, 211, 257, 0], [Ek, "la", 3, 198, 27, Ni], [1, "la", 3, 201, 30, 1], [Ek, "la", nk, 200, 32, 1], [1, "la", 3, 198, 33, Ga], [1, "la", Qn, 196, 33, _], [er, "la", Lq, 194, 32, 1], [Co, "la", wi, 194, 28, _], [Co, "la", 0, 200, 28, Co], [1, "la", 0, 193, 30, 1], [Ek, "la", Er, 196, 27, ck], [1, "la", 3, 199, 30, 1], [Ni, "la", 3, 197, 29, Ek], [Ga, "la", Qn, 195, 30, Co], [1, "la", Z, 197, 31, Co], [ck, "la", ta, 201, 33, ck], [_, "la", 4, 202, 34, 1], [1, "la", Oa, 202, 35, 1], [1, "la", cq, 203, 36, 1], [1, "la", 4, 204, 37, 1], [ck, "la", 2, 205, 38, 1], [er, "la", zr, 205, 39, 1], [ck, "la", 5, 205, 40, _], [1, "la", On, 206, 41, 1], [1, "la", er, 207, 42, ck], [1, "la", _, 205, 41, Ga], [Co, "la", co, 208, 43, 1], [Ga, "la", aq, 209, 43, Co], [Ni, "la", 1, 210, 43, 1], [1, "la", On, 211, 43, 1], [1, "la", Sj, 212, 43, Co], [Ek, "la", co, 213, 44, 1], [Ga, "la", Lq, 223, 54, 1], [1, "la", Hn, 221, 53, _], [Ni, "la", 3, 219, 53, 1], [ck, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, 1], [1, "la", 4, 216, 51, Ga], [1, "la", 1, 215, 50, Ga], [Co, "la", $j, 212, 46, Ga], [1, "la", 1, 210, 44, ck], [1, "la", 3, 206, 50, Ga], [_, "re", 0, 217, 24, 1], [Co, "re", 0, 207, Rj, 1], [1, "de", 44, 54, sr, 0], [_, "de", 44, 53, 13, Qr], [Ni, "de", 44, 51, 16, tj], [_, "de", 44, 49, C, 0], [1, "de", 44, 48, 14, Fj], [1, "de", 21, 78, 293, 0], [1, "cs", xq, 221, k, Co], [1, "cs", 0, 224, 9, er], [ck, "cs", 1, 223, 8, _], [1, "cs", 2, 224, or, 1], [Co, "cs", 2, 222, Kn, _], [Ek, "cs", 0, 224, 6, 1], [1, "cs", 0, 222, ie, 1], [_, "cs", tj, 219, Ji, 1], [1, "cs", 1, 220, 5, 1], [er, "cs", 1, 217, 7, Co], [Ga, "cs", ta, 224, Sj, 1], [1, "cs", 2, 223, un, Ga], [1, "cs", 2, 224, Sq, 1], [1, "cs", 2, 223, Nn, 1], [1, "cs", 2, 223, 6, Ga], [_, "cs", Nj, 222, 6, _], [Ni, "cs", qi, 222, Sq, Co], [1, "cs", Nr, 221, wk, _], [1, "cs", qi, 221, 6, _], [1, "cs", 2, 221, ie, 1], [er, "cs", tk, 220, 6, Ek], [1, "cs", 2, 220, Ia, 1], [Ni, "cs", tk, 220, or, 1], [Co, "cs", 2, 219, 8, _], [_, "cs", On, 219, 6, 1], [1, "cs", 2, 219, ko, 1], [1, "cs", 0, 218, 5, 1], [1, "cs", tj, 216, 8, Co], [ck, "cs", 2, 218, 8, Ni], [Ga, "cs", 2, 217, 8, 1], [Ek, "cs", 2, 218, 7, 1], [Ek, "cs", Nr, 218, 6, ck], [1, "cs", Nr, 217, kk, 1], [_, "cs", X, 217, 5, Ga], [Ni, "cs", 1, 215, S, 1], [Ga, "cs", Ni, 213, 5, _], [ck, "cs", Gk, 214, S, _], [1, "cs", 0, 216, 5, Co], [Co, "cs", 0, 213, 8, Ek], [1, "cs", 0, 211, Bk, Ga], [1, "cs", 0, 209, un, 1], [er, "cs", An, 208, 7, 1], [1, "cs", 0, 207, Kn, 1], [1, "cs", Nr, 216, 6, _], [Ni, "cs", tk, 216, 7, 1], [1, "cs", 2, 215, Sq, Co], [er, "cs", bq, 215, Kn, 1], [Co, "cs", 2, 214, Nk, _], [er, "cs", qi, 214, 7, Ek], [1, "cs", 2, 215, 5, Co], [er, "cs", On, 214, 5, 1], [1, "cs", qo, 213, 6, Ek], [Co, "cs", 2, 213, 7, 1], [ck, "cs", qo, 212, 7, Ni], [Ni, "cs", Ni, 211, _j, _], [Ni, "cs", Ni, 209, 8, 1], [ck, "cs", 2, 212, Ko, Ga], [1, "cs", br, 211, 8, 1], [1, "cs", qo, 210, 8, 1], [er, "cs", 2, 209, 7, Ga], [er, "cs", br, 210, 7, 1], [1, "cs", Nr, 210, 6, ck], [Co, "cs", 2, 212, U, 1], [1, "cs", 2, 212, zr, er], [_, "cs", ta, 211, Oe, 1], [Ga, "cs", 2, 210, 5, 1], [Ni, "cs", 2, 209, S, Ek], [1, "cs", 2, 208, 6, er], [Ga, "cs", tk, 208, _j, 1], [_, "cs", 2, 207, Ji, 1], [ck, "cs", ta, 207, kk, 1], [Ga, "cs", qo, 207, 5, 1], [Ni, "cs", qo, 206, 5, 1], [Co, "cs", 2, 208, Kn, Co], [1, "cs", 2, 206, $q, 1], [_, "cs", Aa, 204, Ma, 1], [Ni, "cs", Qr, 205, 6, 1], [Co, "cs", xq, 203, Ij, Co], [er, "cs", 0, 202, wk, Co], [1, "cs", 0, 199, Hk, Ga], [Co, "cs", 0, 200, 6, Co], [_, "cs", Qr, 197, $a, 1], [ck, "cs", xq, 195, Ko, 1], [Ga, "cs", 0, 194, 6, er], [1, "cs", 1, 202, Ma, 1], [ck, "cs", _, 206, Ji, 1], [_, "cs", _, 201, 5, ck], [1, "cs", 1, 197, wo, Ek], [1, "cs", 1, 192, 7, Ga], [1, "cs", Ni, 195, 5, 1], [Ek, "cs", On, 205, 7, 1], [er, "cs", qi, 205, k, 1], [1, "cs", 2, 206, 8, 1], [1, "cs", qi, 204, wk, 1], [Ek, "cs", 2, 204, $a, 1], [Co, "cs", qi, 204, 5, Co], [1, "cs", 2, 205, 5, 1], [1, "cs", Nr, 203, U, 1], [_, "cs", 2, 203, wk, 1], [Co, "cs", 2, 203, wo, er], [1, "cs", qo, 201, Ma, 1], [er, "cs", 2, 200, Da, 1], [1, "cs", 2, 200, 7, 1], [Co, "cs", Nj, 201, Ji, Ni], [_, "cs", bq, 201, 6, Co], [1, "cs", Nr, 202, 5, Co], [1, "cs", 2, 202, U, ck], [1, "cs", 2, 200, Ij, Ek], [1, "cs", ta, 199, 5, 1], [1, "cs", 2, 197, 5, 1], [1, "cs", tk, 196, 5, 1], [1, "cs", 2, 198, ko, Ga], [_, "cs", bq, 198, 6, _], [1, "cs", Nr, 199, ya, 1], [1, "cs", Nj, 199, 7, ck], [1, "cs", qo, 198, Nn, 1], [_, "cs", ta, 198, 8, _], [1, "cs", 2, 197, 7, Ek], [1, "cs", X, 196, wk, 1], [1, "cs", 2, 196, Ma, 1], [1, "cs", 2, 196, 6, Co], [Co, "cs", 2, 195, ya, 1], [Ek, "cs", X, 195, Mn, Ga], [_, "cs", 2, 194, 7, Co], [er, "cs", 2, 193, 8, Ni], [ck, "cs", 2, 194, Ko, ck], [1, "cs", 2, 193, 7, ck], [1, "cs", 2, 193, 6, 1], [ck, "cs", 2, 193, 5, 1], [1, "cs", 2, 194, ko, Ek], [1, "cs", 0, 192, 5, 1], [1, "cs", Qr, 191, 8, Ni], [Co, "cs", 0, 190, 6, Ga], [er, "cs", 0, 188, 7, 1], [1, "cs", Fj, 186, k, er], [1, "cs", An, 186, _j, Ga], [1, "cs", tj, 184, 7, 1], [1, "cs", Gk, 182, wo, Ga], [1, "cs", yj, 181, $q, Ga], [1, "cs", 1, 189, 8, 1], [1, "cs", Ni, 183, 8, 1], [1, "cs", Co, 188, 5, 1], [er, "cs", 1, 185, 6, 1], [Ek, "cs", 1, 180, 7, 1], [1, "cs", Ni, 183, zr, 1], [_, "cs", Ga, 178, $o, er], [1, "cs", Co, 177, 6, 1], [er, "cs", 1, 173, Nn, 1], [Ga, "cs", 1, 171, 7, Ni], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, 1], [1, "cs", Gk, 179, _j, er], [1, "cs", 0, 174, 5, 1], [1, "cs", Qr, 176, un, 1], [Ga, "cs", Aa, 172, Nk, Ek], [er, "cs", 0, 170, 8, 1], [1, "cs", 0, 169, Oe, Ni], [1, "cs", 2, 192, 6, Ni], [1, "cs", qo, 192, 8, Ga], [Ek, "cs", br, 191, Bk, 1], [ck, "cs", qo, 191, 6, 1], [er, "cs", tk, 191, 5, 1], [1, "cs", 2, 190, _j, 1], [Ek, "cs", Nr, 189, un, 1], [1, "cs", 2, 189, P, 1], [Ni, "cs", 2, 189, 7, _], [1, "cs", 2, 190, 7, 1], [Co, "cs", tk, 190, 8, _], [Ek, "cs", 2, 188, 8, _], [1, "cs", br, 187, 8, er], [Co, "cs", 2, 187, Ji, Co], [1, "cs", qo, 187, U, er], [1, "cs", 2, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [Ni, "cs", Nj, 186, S, ck], [1, "cs", 2, 186, 7, 1], [er, "cs", Nr, 185, 7, 1], [Ga, "cs", qi, 185, Hk, 1], [1, "cs", bq, 184, 8, 1], [_, "cs", qo, 183, Ia, _], [_, "cs", tk, 183, S, Ga], [1, "cs", qo, 184, 6, Ni], [1, "cs", Nr, 184, Ij, 1], [Ek, "cs", 2, 185, 5, ck], [1, "cs", Nj, 182, kk, 1], [1, "cs", 2, 182, Mn, 1], [_, "cs", 2, 181, 7, Co], [1, "cs", 2, 181, k, Co], [er, "cs", ta, 180, 8, 1], [er, "cs", 2, 179, Kn, 1], [1, "cs", 2, 182, Ij, Ni], [1, "cs", 2, 181, ko, er], [Ga, "cs", Nj, 180, 5, er], [Ga, "cs", 2, 180, Ze, _], [1, "cs", On, 179, 6, 1], [Ni, "cs", 2, 179, Ia, er], [1, "cs", ta, 178, 7, Ek], [1, "cs", 2, 178, 6, 1], [_, "cs", Nr, 178, Ij, 1], [1, "cs", X, 177, ko, Ek], [ck, "cs", qi, 177, Bk, 1], [er, "cs", qo, 176, 7, Ga], [1, "cs", X, 176, $a, 1], [ck, "cs", qo, 175, 6, Co], [1, "cs", 2, 175, 5, Co], [1, "cs", 2, 176, Je, Co], [1, "cs", 2, 174, 8, 1], [1, "cs", qo, 175, Ko, 1], [Ni, "cs", 2, 173, Je, _], [_, "cs", Nj, 174, 7, er], [Co, "cs", bq, 173, 6, Ek], [1, "cs", Nj, 174, Ze, Co], [1, "cs", 2, 172, Ij, er], [Ek, "cs", br, 173, 5, er], [Ni, "cs", 2, 172, 6, Ga], [1, "cs", 2, 172, 7, er], [1, "cs", qi, 171, Hk, 1], [er, "cs", bq, 170, 7, Co], [1, "cs", 2, 170, jq, Ni], [1, "cs", qo, 170, un, er], [Ga, "cs", Nj, 171, _j, Ga], [Ni, "cs", 2, 171, $q, Ek], [1, "cs", 2, 169, un, ck], [1, "cs", On, 169, Bk, 1], [1, "cs", qi, 169, Ko, Ek], [1, "cs", 1, 168, 7, 1], [ck, "cs", ck, 166, 5, ck], [1, "cs", Ek, 164, 7, 1], [Ni, "cs", 1, 160, 7, Ga], [1, "cs", Co, 156, 8, 1], [ck, "cs", Gk, 166, $o, 1], [Co, "cs", 0, 168, zr, ck], [1, "cs", An, 164, 6, Ni], [Ga, "cs", An, 162, Sq, 1], [1, "cs", tj, 158, wo, Co], [_, "cs", An, 157, 6, Co], [1, "cs", xq, 161, un, ck], [1, "cs", 0, 159, Ij, 1], [_, "cs", 0, 155, 7, 1], [1, "cs", yj, 154, Ij, 1], [er, "cs", tj, 151, 7, 1], [Ek, "cs", _, 153, 8, 1], [1, "cs", _, 151, 5, _], [ck, "cs", 2, 168, 6, Ga], [Ek, "cs", br, 168, 8, er], [_, "cs", Nr, 167, or, Ni], [1, "cs", X, 167, O, er], [1, "cs", X, 167, 6, 1], [1, "cs", bq, 167, Sj, ck], [1, "cs", On, 166, S, 1], [er, "cs", Nj, 166, Mn, 1], [Ga, "cs", bq, 165, 7, Co], [1, "cs", 2, 165, $q, 1], [1, "cs", br, 165, Ij, er], [1, "cs", qo, 164, ko, _], [1, "cs", 2, 163, Ij, Co], [1, "cs", 2, 162, ko, Ni], [_, "cs", 2, 162, ya, 1], [1, "cs", 2, 163, 6, Ni], [Ek, "cs", 2, 163, wk, ck], [1, "cs", 2, 163, wo, 1], [er, "cs", X, 164, Je, 1], [ck, "cs", 2, 165, Hk, Ga], [Ga, "cs", bq, 161, Da, 1], [1, "cs", 2, 162, Hk, _], [Co, "cs", 2, 160, 8, 1], [1, "cs", X, 159, Nk, 1], [er, "cs", X, 159, 7, _], [1, "cs", 2, 159, U, _], [1, "cs", On, 160, ko, 1], [1, "cs", 2, 160, 6, _], [1, "cs", On, 161, ya, 1], [1, "cs", Nr, 161, Ji, _], [Ek, "cs", Nj, 157, Bk, Co], [1, "cs", On, 158, O, 1], [1, "cs", 2, 158, S, 1], [1, "cs", ta, 158, ie, 1], [_, "cs", qi, 155, _j, Ek], [Ek, "cs", Nj, 155, 6, 1], [er, "cs", Nr, 156, 6, Ek], [Ni, "cs", 2, 156, 7, Ni], [1, "cs", Nj, 157, Da, 1], [1, "cs", On, 155, 8, 1], [1, "cs", br, 154, 8, er], [Ek, "cs", 2, 154, 7, er], [1, "cs", 2, 154, P, 1], [1, "cs", 2, 152, 8, Ni], [ck, "cs", bq, 153, Bk, Ni], [er, "cs", Nj, 153, 6, 1], [er, "cs", 2, 153, 5, Ni], [_, "cs", tk, 152, ie, 1], [er, "cs", 2, 152, P, 1], [1, "cs", 2, 152, Ia, Co], [er, "cs", 2, 151, 6, 1], [Ek, "cs", Nj, 157, 5, Ga], [1, "cs", 1, 156, zr, 1], [er, "cs", 0, 150, Ij, Ni], [Co, "cs", Gk, 149, Ia, er], [1, "cs", 0, 147, $o, 1], [er, "cs", 0, 146, 5, 1], [1, "cs", yj, 144, Mn, _], [Ek, "cs", 0, 142, ko, Co], [1, "cs", Ga, 147, 6, Co], [Ga, "cs", ck, 145, 8, 1], [Ek, "cs", 1, 144, 5, 1], [Co, "cs", 2, 148, 5, 1], [1, "cs", 2, 149, 5, 1], [_, "cs", br, 150, 6, er], [Ga, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, Je, 1], [er, "cs", ta, 150, O, Ni], [Ga, "cs", 2, 149, 8, 1], [1, "cs", On, 148, 8, er], [ck, "cs", br, 149, 6, Co], [1, "cs", 2, 148, Ze, 1], [1, "cs", On, 148, Ia, 1], [1, "cs", ta, 147, 7, Co], [1, "cs", tk, 147, ie, Co], [Co, "cs", X, 146, $q, _], [Co, "cs", 2, 146, Sq, 1], [1, "cs", qi, 146, 8, Ga], [Co, "cs", 2, 145, wk, 1], [ck, "cs", qi, 145, S, Ek], [Ga, "cs", 2, 145, ie, Ek], [Ek, "cs", 2, 144, P, er], [Co, "cs", Nr, 143, ko, 1], [Ga, "cs", Nr, 143, oq, 1], [Ga, "cs", 2, 142, U, Ni], [Ek, "cs", tk, 141, 5, Ek], [1, "cs", 2, 224, 10, 1], [1, "cs", 0, 224, 11, 1], [1, "cs", 0, 224, 13, 1], [Ni, "cs", 0, 224, 17, er], [1, "cs", Fj, 224, 19, Ek], [1, "cs", Qr, 224, 22, Co], [1, "cs", yj, 224, 24, Ek], [1, "cs", An, 224, 29, 1], [er, "cs", Qr, 224, 33, 1], [1, "cs", 0, 224, 35, Ek], [Ek, "cs", Qr, 224, 38, 1], [1, "cs", 1, 224, vk, 1], [1, "cs", Ek, 224, ek, 1], [1, "cs", er, 224, 27, Ga], [Co, "cs", Ni, 224, 31, er], [_, "cs", 1, 224, 36, 1], [1, "cs", qo, 224, $e, Ga], [1, "cs", 2, 224, 15, _], [1, "cs", Nr, 224, Ar, 1], [1, "cs", 2, 224, zn, ck], [1, "cs", bq, 224, 21, Ek], [Co, "cs", 2, 224, 23, Ni], [Ek, "cs", bq, 224, 25, ck], [Co, "cs", X, 224, 26, _], [Ek, "cs", br, 224, 28, 1], [1, "cs", tk, 224, 30, _], [Ga, "cs", 2, 224, 32, 1], [1, "cs", 2, 224, 34, _], [1, "cs", 2, 224, 37, Co], [1, "cs", 2, 224, 39, 1], [Ni, "cs", Aa, 224, 41, ck], [Ni, "cs", xq, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [Ga, "cs", 0, 224, 52, er], [Ek, "cs", An, 224, 57, Co], [_, "cs", Ga, 224, 47, 1], [1, "cs", Nr, 224, 40, Ek], [Co, "cs", 2, 224, 42, 1], [1, "cs", ta, 224, 43, 1], [ck, "cs", qi, 224, 45, Co], [1, "cs", br, 224, 49, Ek], [1, "cs", 1, 224, 50, 1], [1, "cs", tk, 224, 51, 1], [Co, "la", 3, 224, 54, 1], [1, "cs", qi, 224, 56, 1], [Ni, "cs", qi, 224, 58, 1], [Ga, "cs", 2, 224, 61, Ni], [1, "cs", yj, 224, 60, 1], [1, "cs", 0, 224, 64, ck], [Ek, "cs", 0, 224, 66, 1], [1, "cs", 0, 224, 70, 1], [Ga, "cs", xq, 224, 74, Co], [1, "cs", 0, 224, 77, Ek], [Ni, "cs", Ni, 224, 62, Ni], [1, "cs", Ni, 224, 68, Ek], [er, "cs", 1, 224, 72, 1], [1, "cs", er, 224, 76, 1], [1, "cs", er, 224, 80, Ga], [ck, "cs", Co, 224, 83, 1], [1, "cs", Ga, 224, 91, 1], [Ni, "cs", 1, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [Ga, "cs", 0, 224, 85, Co], [Ga, "cs", An, 224, 88, 1], [Ga, "cs", Gk, 224, 93, 1], [er, "cs", Aa, 224, 98, er], [1, "cs", bq, 224, 59, 1], [Ni, "cs", bq, 224, 63, 1], [1, "cs", 2, 224, 65, ck], [Ga, "cs", Nj, 224, 67, 1], [_, "cs", 2, 224, 69, Ga], [1, "cs", br, 224, 71, 1], [1, "cs", 2, 224, 73, Ek], [1, "cs", bq, 224, 75, Co], [1, "cs", ta, 224, 78, 1], [1, "cs", 2, 224, 79, Ga], [Ni, "cs", 2, 224, 81, er], [1, "cs", 2, 224, 82, 1], [1, "cs", Nj, 224, 84, 1], [Ek, "cs", 2, 224, 86, 1], [1, "cs", bq, 224, 87, Ek], [Ga, "cs", ta, 224, 89, 1], [ck, "cs", On, 224, 90, 1], [Ek, "cs", Nj, 224, 92, _], [er, "cs", 2, 224, 94, ck], [Ga, "cs", Nr, 224, 96, 1], [1, "cs", bq, 224, 99, 1], [ck, "cs", 2, 224, 100, 1], [1, "cs", 0, 224, 101, Ga], [ck, "cs", _, 224, 103, Ek], [Ga, "cs", 2, 224, 102, er], [1, "cs", An, 222, Li, ck], [1, "cs", 2, 223, 9, er], [Ek, "cs", 2, 222, zo, 1], [1, "cs", 2, 221, 9, 1], [1, "cs", 2, 223, 10, 1], [er, "cs", 2, 223, Rr, er], [ck, "cs", 2, 223, Vr, _], [1, "cs", Er, 223, 13, 1], [1, "cs", Lq, 222, 11, 1], [er, "cs", 3, 220, Pj, 1], [_, "cs", Lq, 219, zo, Ga], [1, "cs", 3, 221, 10, 1], [er, "re", 2, 219, sn, 1], [ck, "re", ck, 218, 18, 1], [Ga, "re", er, 214, C, Co], [1, "cs", xq, 221, 20, Ek], [1, "cs", 1, 223, 18, ck], [1, "cs", 2, 222, 19, Ga], [Co, "cs", ta, 223, hn, _], [ck, "cs", 2, 223, ek, 1], [1, "cs", qo, 222, 20, 1], [1, "cs", br, 220, 21, 1], [1, "cs", tj, 219, 21, 1], [Co, "cs", 3, 221, 21, _], [1, "cs", Z, 218, 21, Ek], [Ek, "cs", Lq, 222, 21, 1], [Ni, "cs", wi, 220, 22, Ek], [1, "cs", Hn, 219, 22, 1], [1, "cs", wi, 221, 22, 1], [1, "cs", 0, 211, eo, 1], [Ek, "cs", 1, 211, 10, 1], [1, "cs", 1, 210, 12, 1], [1, "cs", Gk, 211, mn, ck], [1, "cs", 2, 210, J, 1], [1, "cs", Nj, 210, F, 1], [1, "cs", qo, 210, dn, er], [1, "cs", 2, 212, Hr, 1], [1, "cs", qo, 210, 13, Ek], [ck, "cs", 2, 211, 12, er], [1, "cs", 2, 211, dn, 1], [ck, "cs", bq, 211, vk, 1], [er, "cs", Nj, 212, ai, Ni], [ck, "cs", X, 210, 14, 1], [er, "cs", Qn, 211, 15, 1], [Co, "cs", 3, 213, 9, _], [_, "cs", Hn, 212, Li, 1], [1, "cs", Z, 223, 21, 1], [Ek, "cs", 3, 209, J, 1], [1, "la", Z, 223, 22, 1], [er, "la", Lq, 221, 23, Ga], [Co, "la", Hn, 207, gn, Ga], [1, "la", 3, 209, iq, 1], [Ek, "la", 0, 209, ne, Ni], [1, "la", 4, 209, ak, Ek], [1, "la", 4, 219, 23, Ek], [1, "la", Z, 210, En, 1], [1, "la", nk, 217, 22, 1], [ck, "la", yn, 212, Ar, 1], [Ni, "la", 2, 214, wn, Ni], [1, "la", 4, 213, 20, ck], [1, "la", 1, 212, 21, 1], [1, "la", yn, 215, 18, 1], [er, "la", ta, 216, 17, ck], [_, "la", 5, 216, Rj, Ni], [er, "la", 5, 216, ik, Ga], [1, "la", er, 217, 16, er], [Ni, "la", 2, 218, Cq, Ni], [ck, "la", 2, 216, G, Co], [1, "la", 2, 219, 16, 1], [_, "la", 5, 220, sq, er], [ck, "la", 5, 216, Nq, 1], [ck, "la", $j, 217, Zq, Ek], [ck, "cs", An, 211, 44, 1], [Co, "cs", Ek, 212, 45, _], [_, "cs", 2, 213, 45, Co], [Ni, "cs", 0, 214, 46, Ga], [1, "cs", qo, 215, 46, 1], [er, "cs", Er, 213, 46, _], [Co, "cs", Rn, 214, 47, Ni], [Ga, "cs", Rn, 214, 48, 1], [1, "cs", Qn, 216, 46, 1], [er, "cs", 0, 208, ek, _], [Ga, "cs", 0, 210, 21, 1], [ck, "cs", Qr, 212, 23, Ek], [_, "cs", 0, 213, 25, Ek], [Ga, "cs", On, 213, 24, ck], [1, "cs", tk, 211, 22, Ek], [1, "cs", 2, 210, Sk, 1], [1, "cs", Nr, 209, 21, _], [1, "cs", 2, 209, Sk, _], [Ga, "cs", On, 211, 21, Ga], [Co, "cs", qo, 212, 22, _], [Ek, "cs", Nj, 213, 23, Co], [1, "cs", Lq, 213, 26, 1], [_, "cs", 3, 207, Sk, ck], [Ga, "la", 4, 192, 33, 1], [1, "la", Oa, 191, 34, Ek], [ck, "la", 4, 190, 35, 1], [_, "la", 3, 189, 37, 1], [Ek, "la", 3, 188, 39, ck], [1, "la", Oa, 186, 40, 1], [1, "la", 4, 185, 39, Ek], [1, "la", aq, 184, 39, 1], [1, "la", 2, 183, 39, Ga], [_, "la", 1, 182, 40, ck], [Ni, "la", br, 181, 41, Co], [Co, "la", 5, 180, 41, 1], [Co, "la", 5, 179, 41, 1], [1, "la", 4, 192, 28, Ga], [Ni, "la", 4, 191, 28, 1], [Ek, "la", 4, 190, 27, Ni], [1, "la", Z, 188, 27, 1], [1, "la", $j, 187, 26, 1], [ck, "la", hr, 186, 25, 1], [Co, "la", co, 185, 25, 1], [er, "la", 4, 184, 24, Ek], [1, "la", 5, 184, 23, 1], [ck, "la", 2, 184, 22, Ek], [1, "la", 5, 184, 21, 1], [Co, "la", _, 183, rq, 1], [1, "la", Ij, 182, rq, er], [1, "la", X, 181, qa, 1], [1, "la", ie, 180, Qj, Ek], [Ni, "la", 2, 179, 20, 1], [1, "la", 4, 178, 19, 1], [1, "la", 3, 178, 17, 1], [1, "la", Rn, 176, zn, 1], [_, "cs", 0, 177, Wa, Ek], [_, "cs", 0, 175, ro, 1], [1, "cs", Qr, 180, 16, Ni], [Ni, "cs", tj, 174, Dn, Ek], [Ek, "cs", 0, 172, Sk, 1], [Ni, "cs", 1, 175, 15, Ek], [_, "cs", ck, 172, 18, 1], [1, "cs", ck, 181, ua, 1], [ck, "cs", ta, 179, 15, Ek], [1, "cs", X, 177, q, ck], [Ni, "cs", bq, 176, 16, ck], [Ga, "cs", 2, 174, 18, 1], [1, "cs", 2, 173, Po, Ni], [1, "cs", Nj, 172, 19, 1], [1, "cs", On, 173, Ki, 1], [1, "cs", qi, 173, Tk, 1], [1, "cs", X, 174, 17, Ek], [Ek, "cs", 2, 174, Zk, Ga], [1, "cs", X, 175, Cq, 1], [er, "cs", qi, 176, En, er], [1, "cs", br, 178, 15, 1], [1, "cs", 2, 178, 16, Ga], [ck, "cs", X, 179, Ha, 1], [1, "cs", 2, 180, Zq, Co], [1, "cs", 2, 181, 16, ck], [Ek, "cs", Z, 182, 16, _], [_, "cs", 3, 172, 21, 1], [1, "la", 1, 175, 19, 1], [Ek, "la", bq, 174, ek, Ek], [1, "la", tk, 173, 20, Ga], [ck, "la", Ni, 180, 17, 1], [1, "la", 2, 181, 17, 1], [1, "la", 3, 191, 20, er], [1, "s", yj, 217, 30, Co], [1, "s", 0, 208, 35, _], [Co, "s", 0, 204, 24, 1], [Ga, "s", 1, 218, 32, 1], [er, "s", 1, 207, 34, Co], [er, "s", Ek, 202, 23, 1], [1, "s", 1, 195, 16, Co], [1, "s", qi, 222, 28, Ek], [Ga, "s", Nj, 212, 38, 1], [1, "s", X, 207, 23, 1], [er, "s", qo, 202, 12, Ek], [er, "s", 2, 195, 18, 1], [1, "s", er, 191, ca, Ni], [1, "s", 0, 187, 16, 1], [1, "s", 2, 188, Ha, ck], [1, "s", er, 186, 14, er], [1, "s", 1, 201, 16, Co], [Ga, "g", Co, 216, 31, 1], [er, "g", 0, 200, 15, 1], [er, "g", 0, 202, 40, 1], [ck, "g", 0, 189, 32, _], [Co, "g", xq, 204, 28, 1], [1, "g", Fj, 196, 24, er], [Ni, "g", qi, 198, 37, 1], [Co, "s", 0, 193, 39, 1], [Ek, "s", Fj, 201, 45, Ek], [1, "a", 0, 210, 29, 1], [1, "a", 0, 200, 20, ck], [1, "cs", Gk, 200, 34, 1], [Ni, "cs", 0, 193, 27, _], [Ek, "cs", er, 203, 30, er], [Ni, "cs", Ni, 191, 31, 1], [ck, "cs", Nj, 202, 32, Ek], [_, "cs", 2, 194, 26, 1], [1, "cs", On, 192, 27, ck], [Ek, "cs", tk, 192, 32, Co], [1, "cs", 2, 203, 31, 1], [_, "cs", tk, 202, 31, Ek], [er, "cs", 2, 202, 30, 1], [Co, "cs", nk, 202, 29, 1], [1, "cs", Z, 201, 32, Ga], [Ga, "cs", 3, 199, 35, 1], [Ga, "cs", Aa, 193, 34, ck], [_, "cs", 2, 194, 34, 1], [1, "cs", Nj, 198, 35, Co], [Ek, "cs", wi, 199, 34, 1], [1, "cs", 3, 191, 29, 1], [1, "cs", 0, 191, 30, er], [Ni, "cs", wi, 190, 29, 1], [1, "la", 3, 180, 69, 1], [er, "la", Er, 182, 68, Ga], [Co, "la", nk, 184, 68, Co], [Ek, "la", Hn, 186, 70, 1], [1, "la", 3, 184, 72, 1], [Ek, "la", 3, 182, 72, 1], [1, "la", 3, 180, 71, 1], [1, "cs", yj, 186, 68, 1], [Ga, "cs", yj, 187, 70, er], [1, "cs", 0, 183, 74, Co], [1, "cs", Fj, 178, 70, ck], [Ga, "cs", 2, 182, 66, 1], [1, "cs", bq, 182, 74, Ni], [Ga, "cs", On, 181, 73, 1], [ck, "cs", On, 180, 74, Ga], [Ni, "cs", 2, 181, 74, 1], [Co, "la", 0, 184, 70, 1], [1, "la", Hn, 182, 70, 1], [Ni, "cs", qo, 181, 67, Ga], [1, "cs", Z, 184, 67, ck], [1, "cs", 3, 182, 67, _], [1, "la", 4, 187, 69, Co], [Ga, "la", 1, 188, 68, 1], [1, "la", $j, 189, 68, 1], [Ek, "la", tk, 190, 68, Co], [Ga, "la", ck, 191, 68, 1], [Ni, "la", hr, 192, 68, 1], [Ek, "la", 2, 193, 68, 1], [Ga, "la", yn, 194, 69, 1], [1, "la", qi, 194, 70, ck], [1, "la", 5, 195, 71, Ga], [Ni, "la", er, 194, 71, 1], [1, "la", 2, 196, 72, Co], [1, "la", cq, 196, 71, Ni], [ck, "la", 1, 197, 73, 1], [1, "la", un, 196, 73, 1], [ck, "la", _j, 198, 73, 1], [Ni, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [Co, "la", 4, 199, 73, 1], [1, "la", 1, 205, 72, Ni], [1, "la", X, 206, 72, ck], [_, "la", un, 207, 72, Co], [Ga, "la", 1, 208, 72, er], [ck, "la", 1, 209, 73, 1], [ck, "la", On, 209, 74, Ni], [ck, "la", ko, 211, 76, 1], [Ek, "la", yn, 210, 75, Ga], [1, "la", zr, 212, 76, 1], [er, "la", aq, 202, 75, Co], [1, "la", br, 203, 76, Co], [1, "la", 4, 204, 77, 1], [Co, "la", X, 204, 78, 1], [Ga, "la", X, 204, 79, 1], [1, "la", 5, 204, 80, Ni], [1, "cs", yj, 202, 74, 1], [1, "cs", 1, 203, 74, ck], [1, "cs", 2, 204, 73, 1], [Ga, "cs", ta, 203, 75, 1], [1, "cs", 3, 204, 76, ck], [Ni, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [Ga, "cs", qo, 204, 74, Ni], [er, "cs", 2, 204, 75, 1], [Co, "cs", tk, 206, 73, Co], [ck, "cs", nk, 207, 73, Ga], [Co, "cs", Nr, 205, 76, er], [Co, "cs", Lq, 205, 77, Ek], [ck, "la", nk, 183, 66, Ni], [1, "la", ge, 183, 65, ck], [1, "la", 4, 184, 64, 1], [ck, "la", 4, 185, 63, Co], [ck, "la", Co, 185, 62, _], [1, "la", Nj, 185, 61, 1], [Ek, "la", Nj, 185, 60, Co], [Co, "la", 4, 186, 59, Ni], [1, "la", Co, 187, 58, Ga], [1, "la", 2, 187, 57, 1], [er, "la", Nj, 187, 56, Ga], [1, "s", 0, 191, 60, Ek], [1, "s", 1, 195, 58, Ek], [1, "s", 1, 199, 46, ck], [1, "s", bq, 202, 49, 1], [Co, "g", ta, 197, 55, 1], [1, "g", Ni, 213, 55, 1], [ck, "g", yj, 192, 45, 1], [_, "g", Qr, 210, 61, Co], [er, "g", An, 182, 52, er], [_, "g", 0, 180, 35, _], [Ek, "g", 0, 175, 25, _], [1, "g", 0, 168, 32, 1], [1, "g", 1, 179, 28, _], [Ga, "g", 1, 161, sq, _], [1, "g", Nr, 172, $e, 1], [Ga, "g", ta, 160, 25, Ga], [1, "g", 2, 157, 39, 1], [er, "g", 2, 170, 43, er], [1, "g", 2, 202, 67, 1], [1, "g", 2, 217, 72, 1], [Ek, "g", 2, 214, 82, Ek], [1, "g", On, 193, 86, 1], [1, "g", 2, 168, 60, Ni], [Ek, "g", 2, 165, 78, Ga], [ck, "g", Nr, 173, 88, ck], [Ga, "s", An, 185, 51, 1], [er, "s", 0, 175, 44, 1], [1, "s", yj, 165, 50, er], [Ni, "s", tj, 160, 32, 1], [1, "s", 1, 162, 30, 1], [1, "s", 1, 176, 28, 1], [er, "s", 1, 154, 17, 1], [Ni, "s", 1, 184, 49, 1], [1, "s", 1, 192, 62, ck], [Co, "s", 1, 216, 62, Ek], [1, "s", ck, 204, 65, 1], [_, "s", 1, 217, 79, er], [1, "s", Ga, 206, 86, Ni], [_, "la", 3, 211, 69, 1], [1, "la", co, 215, 69, Ga], [1, "la", 5, 201, 81, 1], [Co, "la", ck, 207, 83, Ga], [Ga, "la", Qn, 173, 32, Ni], [Ga, "la", Nr, 181, 45, Ek], [1, "la", ck, 178, 38, ck], [ck, "la", Ni, 213, 69, ck], [_, "la", 5, 214, 69, Co], [1, "la", hr, 216, 68, Ek], [_, "la", 0, 191, 78, er], [1, "la", 3, 191, 80, Co], [Co, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, Ga], [1, "g", 2, 154, 67, 1], [Ek, "g", br, 202, 94, 1], [1, "g", br, 155, 90, Co], [_, "s", ta, 215, 80, 1], [ck, "s", 2, 204, 62, Ek], [Ni, "s", 2, 218, 60, Ga], [Ga, "s", qo, 194, 62, ck], [Ek, "s", yj, 216, 86, Ni], [er, "s", 0, 211, 93, 1], [1, "la", 0, 216, 92, Ni], [Ni, "la", tj, 151, 96, Co], [1, "la", 1, 155, 95, Co], [1, "la", 4, 214, 88, Ga], [1, "s", 0, 205, 99, Co], [1, "s", Ni, 217, 88, Ek], [1, "s", 1, 213, 94, Co], [Ga, "s", 1, 202, 97, 1], [1, "s", 0, 199, 85, 1], [_, "s", 0, 190, 93, ck], [_, "s", _, 199, 87, Ga], [1, "s", Ni, 192, 97, Ek], [er, "la", Er, 196, 92, 1], [_, "la", Ga, 199, 91, ck], [1, "la", Ga, 220, 91, 1], [1, "la", Qr, 219, 77, Ni], [1, "la", 0, 200, 59, Ni], [1, "la", 3, 188, 87, Ga], [1, "la", Gk, 183, 94, Co], [Ek, "la", er, 187, 83, 1], [Ek, "la", Co, 175, 82, 1], [1, "la", ck, 172, 94, Ek], [er, "la", X, 179, 78, Ni], [1, "la", 0, 166, 87, Ga], [1, "la", Lq, 159, 80, Ga], [1, "la", Z, 167, 15, Ni], [1, "la", 1, 164, xn, 1], [1, "la", _, 172, 28, Ga], [er, "la", Hn, 153, 24, 1], [_, "la", 4, 164, 91, 1], [Ni, "la", 4, 156, 82, Ga], [1, "la", 4, 149, 90, 1], [1, "s", Aa, 178, 85, Ga], [1, "s", 1, 180, 85, er], [1, "s", 0, 163, 96, 1], [1, "s", Aa, 159, 86, er], [_, "s", Fj, 185, 78, 1], [Ni, "s", 1, 194, 75, 1], [ck, "s", qi, 195, 76, 1], [1, "s", 2, 181, 78, 1], [Ek, "s", qi, 161, 87, 1], [1, "s", ta, 166, 97, 1], [1, "s", qi, 177, 97, er], [Ga, "s", yj, 149, 85, 1], [ck, "s", 1, 151, 83, Ni], [Ga, "s", ck, 175, 74, Co], [Co, "s", 0, 174, 72, 1], [1, "la", Er, 168, 71, Co], [Ni, "la", Qn, 180, 60, er], [1, "s", Qr, 156, 63, _], [1, "s", yj, 151, 47, _], [Ek, "s", Co, 158, 64, Ni], [1, "s", 1, 161, 75, _], [er, "s", Ga, 162, 51, 1], [1, "s", 1, 175, 45, ck], [1, "s", 1, 152, 47, Ek], [Ek, "s", 1, 159, 33, er], [1, "s", Ni, 152, 18, 1], [1, "s", 0, 151, 13, 1], [Ga, "s", 0, 166, 22, 1], [Ek, "s", xq, 170, 63, Co], [_, "s", 2, 172, 62, 1], [Ga, "s", Nj, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", ta, 150, 52, 1], [1, "la", co, 178, 69, Ga], [1, "la", cq, 177, 68, 1], [1, "la", Qn, 176, 67, 1], [1, "la", tj, 174, 67, 1], [1, "la", 1, 172, 67, Co], [ck, "la", aq, 171, 67, Ek], [Ek, "la", $j, 170, 66, ck], [1, "la", cq, 169, 66, 1], [1, "la", er, 168, 66, er], [er, "la", aq, 167, 67, ck], [1, "la", Ni, 166, 67, 1], [1, "la", 4, 165, 68, 1], [er, "la", 5, 164, 68, Ek], [Ek, "la", 2, 163, 68, 1], [er, "la", 5, 162, 68, 1], [Ek, "la", br, 161, 68, 1], [_, "la", nk, 153, 72, 1], [Co, "la", Er, 163, 60, 1], [Ga, "la", wi, 164, 42, 1], [_, "la", yj, 155, 51, 1], [Ek, "la", Ek, 168, 42, er], [1, "la", oe, 158, 48, 1], [1, "la", 4, 178, 57, 1], [Ni, "la", 4, 151, 69, er], [Ga, "la", Nr, 170, 74, Ga], [1, "la", br, 160, 84, 1], [1, "la", 2, 174, 92, Ni], [1, "la", Nj, 188, 90, 1], [Ni, "la", Nr, 209, 84, 1], [er, "la", On, 206, 93, 1], [1, "la", Ij, 156, 70, 1], [ck, "la", 5, 165, 57, Co], [Ek, "la", 5, 182, 58, 1], [ck, "la", 5, 166, 44, ck], [1, "la", 1, 163, 39, er], [1, "la", 1, 152, 53, 1], [1, "la", _, 152, 37, Ni], [1, "la", Nj, 163, 13, 1], [1, "de", ne, 219, 12, xq], [1, "de", 14, 203, 13, 0], [1, "de", y, 220, Dn, yj], [Ni, "de", 12, 223, 15, 0], [1, "de", 12, 213, 10, tj], [Ek, "de", 37, 217, 19, xq], [ck, "de", 38, 220, 14, 0], [_, "de", 38, 215, 10, 0], [Co, "de", 40, 214, 14, 0], [Co, "de", 40, 222, fn, 0], [Ek, "de", 40, 209, zj, yj], [1, "de", 37, 212, zn, 0], [Ga, "de", 38, 215, 26, 0], [Ek, "de", 37, 222, 25, 0], [ck, "de", 40, 221, 29, An], [Ga, "de", 12, 220, 27, 0], [er, "de", 13, 213, 27, 0], [ck, "de", vk, 215, 30, 0], [1, "de", En, 219, 33, Fj], [Co, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, xq], [1, "de", 39, 215, 32, 0], [Ni, "de", 37, 211, 35, 0], [1, "de", 12, 223, 38, Fj], [1, "de", 13, 213, 38, Qr], [ck, "de", nq, 222, 44, 0], [Ga, "de", 15, 208, 33, 0], [Ga, "de", y, 206, 23, Aa], [er, "de", 13, 205, 28, 0], [Ga, "de", oo, 211, 23, 0], [1, "de", pk, 201, 20, Fj], [er, "de", 15, 198, Hr, Aa], [Co, "de", 15, 199, 16, 0], [er, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [1, "de", 37, 205, fr, 0], [_, "de", 39, 204, 9, Gk], [1, "de", 40, 196, 12, Aa], [1, "de", 40, 198, po, Qr], [1, "de", 37, 192, Ik, 0], [1, "de", 37, 199, 24, Gk], [1, "de", 37, 209, 24, 0], [_, "de", 39, 209, 30, 0], [Ga, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, 0], [Ek, "de", 40, 187, 23, 0], [Co, "de", 38, 187, 18, 0], [ck, "de", 39, 192, Mr, 0], [1, "de", 37, 185, Zq, 0], [1, "de", 12, 188, 15, 0], [ck, "de", Dj, 185, 13, 0], [1, "de", 14, 189, 9, 0], [1, "de", 15, 187, 22, Qr], [1, "de", 15, 180, 9, tj], [1, "de", 12, 177, 14, Gk], [1, "de", Cn, 173, eo, tj], [Ga, "de", G, 171, 15, Aa], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, 13, 0], [1, "de", 39, 175, 9, 0], [1, "de", 40, 173, sr, Gk], [Ek, "de", 37, 169, 11, 0], [1, "de", 37, 163, In, 0], [_, "de", 38, 164, nr, 0], [1, "de", 39, 170, rq, 0], [1, "de", 40, 160, 17, Fj], [1, "de", 40, 154, Vq, Gk], [1, "de", 40, 165, 23, Qr], [1, "de", 40, 150, Wi, 0], [Co, "de", 37, 155, 16, 0], [_, "de", 39, 146, 10, 0], [1, "de", ca, 159, ne, 0], [1, "de", Nq, 151, eo, tj], [1, "de", 14, 150, Cn, 0], [Ni, "de", y, 153, hn, 0], [Ni, "de", 13, 161, 25, An], [1, "de", pk, 169, 25, Aa], [_, "de", Zq, 176, 25, Gk], [Co, "de", 12, 180, 29, Qr], [1, "de", ne, 188, 31, yj], [1, "de", oo, 181, 36, 0], [1, "de", 37, 186, 33, 0], [Ek, "de", 38, 183, 26, Gk], [Ni, "de", 39, 177, 21, xq], [1, "de", 40, 175, 31, tj], [1, "de", 37, 176, 39, yj], [Ek, "de", 37, 168, 34, 0], [Ga, "de", 38, 162, 32, 0], [_, "de", 38, 168, 45, 0], [1, "de", 38, 173, 45, 0], [Ek, "de", 39, 160, 35, Fj], [ck, "de", 40, 161, 42, 0], [er, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [_, "de", 40, 156, 26, 0], [Co, "de", 40, 150, 32, Qr], [Co, "de", 37, 159, 26, tj], [1, "de", 37, 155, 40, 0], [_, "de", 37, 154, 45, xq], [1, "de", 39, 149, 45, 0], [Co, "de", 40, 150, 50, 0], [1, "de", 40, 160, 52, Fj], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, Gk], [1, "de", 12, 176, 45, Qr], [1, "de", 12, 167, 32, An], [1, "de", 13, 158, 32, Qr], [Co, "de", 14, 149, 28, Fj], [1, "de", Zq, 163, 30, 0], [1, "de", 14, 158, 39, Fj], [1, "de", $k, 171, 43, 0], [er, "de", j, 174, 36, xq], [Ek, "de", Vr, 151, 43, 0], [1, "de", 13, 152, 48, 0], [_, "de", Ur, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", vo, 174, 49, Qr], [er, "de", io, 183, 51, 0], [ck, "de", 14, 186, 48, Fj], [1, "de", 37, 182, 48, 0], [1, "de", 38, 187, 52, Fj], [Ga, "de", 39, 188, 43, 0], [Co, "de", 37, 200, 38, 0], [Ni, "de", 40, 194, 37, xq], [ck, "de", 39, 199, 44, 0], [1, "de", 38, 200, 49, 0], [Ek, "de", 37, 196, 54, 0], [ck, "de", 12, 194, 40, 0], [Ek, "de", 13, 202, 45, An], [Co, "de", 14, 198, 47, An], [Co, "de", Wa, 198, 55, 0], [Ek, "de", 15, 212, 54, 0], [Ek, "de", Zn, 216, 63, 0], [1, "de", ak, 209, 62, 0], [Ek, "de", ca, 219, 60, xq], [Co, "de", ne, 206, 56, 0], [Ga, "de", tq, 218, 72, 0], [1, "de", Vr, 223, 67, yj], [_, "de", 12, 205, 64, 0], [1, "de", 12, 193, 63, 0], [Ga, "de", ak, 216, 80, 0], [1, "de", 14, 222, 87, Gk], [1, "de", 38, 210, 53, 0], [er, "de", 37, 210, 47, 0], [er, "de", 37, 200, 63, Qr], [1, "de", 37, 218, 62, 0], [Co, "de", 37, 222, 60, 0], [1, "de", 37, 207, 70, 0], [Ek, "de", 38, 203, 68, An], [_, "de", 38, 195, 66, yj], [ck, "de", 38, 218, 55, 0], [ck, "de", 38, 212, 61, Qr], [Ni, "de", 38, 222, 70, Gk], [1, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, 0], [1, "de", 38, 214, 79, Qr], [Ga, "de", 39, 213, 83, yj], [Ni, "de", 39, 207, 76, xq], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, 0], [1, "de", 39, 222, 93, 0], [Ni, "de", 39, 216, 96, 0], [er, "de", 39, 209, 94, Fj], [ck, "de", 39, 201, 87, 0], [Ga, "de", 39, 198, 82, 0], [1, "de", 39, 207, 99, Qr], [1, "de", 39, 200, 97, Qr], [1, "de", 39, 202, 92, xq], [1, "de", 37, 194, 97, Aa], [ck, "de", 39, 204, 88, xq], [1, "de", 39, 189, 90, Aa], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, Aa], [Ga, "de", 37, 183, 91, Qr], [1, "de", 37, 186, 80, 0], [Co, "de", 37, 191, 72, 0], [er, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [_, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, Qr], [er, "de", 40, 192, 93, 0], [1, "de", 40, 165, 92, An], [Ni, "de", 37, 160, 89, Gk], [Ga, "de", 38, 161, 85, 0], [er, "de", 38, 164, 98, Gk], [_, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [_, "de", 40, 148, 83, 0], [_, "de", 40, 160, 77, Qr], [Co, "de", 40, 167, 77, 0], [_, "de", 40, 153, 69, 0], [ck, "de", 40, 149, 74, 0], [1, "de", 37, 161, 64, 0], [Ga, "de", 37, 154, 61, Aa], [Ek, "de", 39, 157, 55, 0], [Ek, "de", 39, 174, 64, yj], [1, "de", 39, 175, 56, Aa], [Ek, "de", 39, 149, 67, An], [Ek, "de", $e, 218, 96, yj], [ck, "de", Nq, 212, 95, 0], [1, "de", 14, 204, 85, An], [Co, "de", 15, 215, 85, An], [Ek, "de", nr, 197, 97, Aa], [1, "de", ca, 198, 87, Aa], [1, "de", nq, 196, 77, yj], [Co, "de", 13, 194, 86, 0], [Co, "de", 15, 181, 84, yj], [Ek, "de", Uq, 184, 79, tj], [1, "de", G, 188, 93, Aa], [1, "de", 13, 180, 87, Qr], [Co, "de", sn, 178, 96, Qr], [er, "de", 13, 163, 95, 0], [1, "de", y, 172, 88, 0], [_, "de", ai, 176, 75, 0], [1, "de", 14, 172, 72, 0], [1, "de", G, 169, 82, 0], [1, "de", Ak, 164, 78, Gk], [Co, "de", mn, 158, 87, Qr], [1, "de", 13, 149, 86, Gk], [1, "de", nr, 154, 91, 0], [Ni, "de", ai, 160, 74, 0], [1, "de", 14, 152, 76, Qr], [Co, "de", Wn, 158, 63, 0], [1, "de", oo, 150, 60, 0], [Ga, "de", 12, 169, 59, yj], [1, "de", mn, 173, 61, Aa], [1, "cs", 1, 143, 104, Ek], [1, "cs", 0, 141, 102, 1], [1, "cs", Qn, 138, 102, 1], [er, "cs", 2, 139, 102, Ga], [1, "cs", 2, 140, 102, ck], [Ni, "cs", 3, 143, 107, 1], [er, "cs", An, 143, 106, _], [Ni, "cs", 2, 143, 105, Ga], [1, "cs", 2, 142, 103, Ek], [1, "cs", 0, 142, 104, 1], [Ga, "cs", bq, 141, 103, Ni], [1, "cs", 3, 142, 105, 1], [1, "cs", Rn, 140, 103, 1], [Co, "cs", 3, 141, 104, 1], [Ni, "la", cq, 151, 23, 1], [ck, "la", 4, 150, 22, 1], [1, "la", Co, 149, 21, 1], [er, "la", 4, 148, 21, ck], [1, "la", 2, 147, 20, Ni], [1, "la", 4, 147, xj, Ga], [Ni, "la", ie, 147, Ki, 1], [er, "la", 1, 147, Tk, 1], [Ni, "la", Rn, 144, zk, 1], [_, "la", 5, 147, 16, Ni], [Ni, "la", qi, 147, 15, 1], [Ni, "la", yn, 147, 14, 1], [Ek, "la", 4, 145, Ik, _], [Ni, "la", ie, 145, 12, Co], [1, "la", 1, 146, 13, _], [ck, "la", 2, 145, 13, 1], [Ek, "la", Lq, 155, 25, Co], [1, "la", 0, 155, 24, 1], [1, "la", 3, 153, 26, 1], [1, "cs", Fj, 151, 24, er], [1, "cs", Aa, 153, 22, Ek], [_, "cs", 3, 152, 22, 1], [Ni, "cs", 3, 154, 22, 1], [Ni, "cs", 1, 157, 26, ck], [1, "cs", 2, 157, 24, 1], [Ek, "cs", 2, 156, 26, Ga], [1, "cs", On, 154, 28, 1], [1, "cs", Nr, 151, 26, Ni], [1, "cs", 2, 152, 25, 1], [1, "cs", br, 151, 25, Ni], [er, "cs", 2, 156, 27, 1], [1, "cs", 2, 157, 23, Co], [Ga, "cs", X, 157, 22, Co], [er, "cs", 3, 150, 24, 1], [_, "cs", wi, 150, 23, 1], [Ek, "de", 38, 155, 29, xq], [1, "de", $e, 157, 27, Qr], [Ek, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, 0], [1, "de", Dj, 156, 21, yj], [er, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", 13, 147, 79, An], [1, "de", tq, 157, 99, 0], [Co, "de", 12, 172, 99, Gk], [1, "la", wi, 143, 102, er], [Co, "la", 4, 149, 96, Ni], [Ga, "la", $j, 145, 102, Ni], [ck, "la", er, 148, 97, 1], [_, "la", Ij, 148, 98, 1], [1, "cs", nk, 144, 104, 1], [Ga, "cs", 3, 144, 103, Ga], [Ni, "cs", 3, 145, 103, 1], [_, "cs", 3, 145, 104, Co], [er, "cs", wi, 142, 101, Ni], [1, "cs", Lq, 143, 100, Co], [Co, "cs", 3, 141, 101, 1], [ck, "cs", 3, 142, 100, 1], [1, "cs", 0, 141, xo, Co], [ck, "cs", qo, 140, 101, Ni], [1, "cs", br, 144, 105, Ga], [er, "cs", 3, 146, 103, Ni], [Ni, "cs", Er, 146, 102, Co], [1, "cs", Er, 150, 95, er], [1, "cs", Aa, 150, 97, Ga], [1, "cs", qo, 151, 98, Ek], [Ga, "cs", 0, 153, 97, 1], [1, "cs", 3, 153, 96, Co], [1, "cs", qi, 149, 95, 1], [Ni, "s", Fj, 213, 127, Ni], [1, "plm", 1, 214, 131, 0], [er, "plm", _, 207, 128, 0], [1, "plm", An, 208, 127, yj], [1, "s", 1, 207, 132, 1], [1, "s", X, 208, 133, _], [1, "plm", Gk, 217, 132, Qr], [Co, "plm", qi, 186, 158, 0], [1, "plm", 0, 184, 160, Aa], [1, "s", 1, 183, 156, 1], [ck, "s", br, 186, 159, 1], [Ga, "p", Fj, 182, 157, 1], [1, "p", Qr, 114, 205, Ek], [1, "plm", 1, 117, 204, An], [Ga, "plm", 0, 117, 205, 0], [1, "plm", On, 112, 204, Aa], [1, "s", Nr, 114, 207, _], [1, "s", 2, 115, 204, ck], [1, "plm", bq, 122, 151, 0], [1, "plm", 1, 123, 150, yj], [Co, "plm", 1, 117, 151, 0], [Ga, "s", Fj, 118, 150, 1], [Co, "s", er, 122, 152, 1], [1, "plm", 2, 156, 130, Aa], [1, "plm", Ga, 154, 127, 0], [1, "s", Fj, 153, 128, Co], [Ga, "s", bq, 152, 130, Ek], [1, "p", xq, 123, 65, 1], [_, "plm", Nj, 125, 62, yj], [1, "plm", 1, 124, 62, An], [1, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, Ek], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, ck], [1, "cs", 2, 144, 106, 1], [1, "cs", Nr, 145, 105, 1], [Ga, "cs", 2, 144, 107, 1], [1, "cs", 2, 141, 106, 1], [1, "cs", bq, 141, 105, 1], [_, "cs", qo, 140, 105, 1], [ck, "cs", br, 140, 104, 1], [er, "cs", Co, 138, 103, Ek], [Co, "cs", An, 139, 104, _], [Ek, "cs", X, 139, 103, 1], [1, "cs", 2, 139, 105, 1], [1, "cs", On, 142, 106, Ga], [1, "cs", On, 142, 107, 1], [1, "cs", qi, 139, 101, Ni], [er, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [Co, "la", Co, 146, Lr, er], [1, "la", oe, 145, 101, 1], [1, "cs", 1, 215, 47, Ga], [_, "cs", qo, 216, 47, 1], [1, "cs", br, 215, 48, er], [_, "la", 4, 214, 45, 1], [1, "la", $j, 215, 45, 1], [1, "la", 0, 216, 46, 1], [1, "la", 4, 216, 48, 1], [1, "la", ge, 216, 49, 1], [1, "la", Oa, 217, 50, Co], [ck, "la", 3, 214, 49, _], [er, "la", co, 211, 45, _], [1, "la", Er, 213, 47, 1], [ck, "cs", 2, 224, 48, 1], [1, "plm", 2, 111, 243, 0], [er, "plm", Co, 108, 246, 0], [1, "s", _, 110, 243, Co], [1, "s", Qr, 108, 245, Ek], [Ni, "s", tj, 121, 276, 1], [Ni, "plm", qi, 122, 277, Aa], [1, "plm", Nr, 117, 276, Qr], [Co, "plm", 1, 118, 277, Fj], [1, "s", 1, 118, 278, ck], [Ga, "cs", 2, 66, 16, Ni], [1, "cs", Z, 67, q, 1], [1, "cs", 0, 67, ae, 1], [Ga, "cs", qi, 66, ro, 1], [1, "cs", Rn, 66, 18, ck], [_, "cs", Lq, 68, A, er], [1, "cs", Gk, 36, 16, 1], [Ek, "cs", 2, 36, ee, 1], [1, "cs", 2, 36, 18, 1], [1, "cs", nk, 35, ae, 1], [1, "cs", Qn, 36, wn, _], [1, "cs", 3, 35, 18, ck], [1, "cs", 2, 66, 30, _], [1, "cs", 2, 66, 23, _], [1, "cs", 3, 66, 22, 1], [Ek, "cs", 3, 66, 31, 1], [1, "cs", 2, 36, 30, ck], [Co, "cs", 2, 36, 23, 1], [1, "cs", er, 36, 22, ck], [1, "cs", 2, 36, 31, Ni], [_, "cs", Rn, 42, 13, Ek], [Co, "cs", Gk, 43, 13, Ga], [1, "cs", tk, 44, Dj, er], [Ni, "cs", Rn, 42, 16, 1], [1, "cs", Er, 41, Ci, Co], [1, "cs", 3, 40, wr, Co], [Co, "cs", yj, 42, D, _], [Ni, "cs", 3, 43, Qq, 1], [1, "cs", Lq, 44, ka, _], [ck, "cs", Rn, 45, Po, Co], [er, "cs", 2, 46, 19, 1], [1, "cs", 0, 43, 22, 1], [Ga, "cs", 2, 42, 22, Ga], [1, "cs", er, 41, 22, 1], [ck, "cs", Fj, 40, 22, Ek], [er, "cs", 3, 39, 17, 1], [Ga, "cs", 1, 44, 26, 1], [1, "cs", On, 45, 26, 1], [Co, "cs", 3, 46, 26, ck], [1, "cs", Fj, 47, 26, 1], [1, "cs", On, 48, 26, Co], [1, "cs", Qn, 47, 25, 1], [1, "cs", 3, 43, 27, 1], [1, "cs", 1, 49, 32, Ni], [er, "cs", Nr, 50, 32, Ni], [_, "cs", Nj, 51, 32, 1], [1, "cs", 2, 52, 32, Ek], [_, "d", An, 51, 29, Ni], [ck, "d", Co, 53, 29, 1], [Ek, "d", 1, 49, 29, _], [1, "cs", 3, 55, 31, 1], [Ga, "cs", Z, 54, 32, Ga], [Ni, "cs", 3, 47, 31, 1], [1, "cs", Rn, 48, 32, 1], [ck, "cs", Aa, 51, 33, Co], [1, "cs", br, 52, 33, 1], [Ek, "cs", 2, 50, 33, _], [1, "cs", Lq, 56, 30, ck], [ck, "cs", Rn, 56, 31, ck], [ck, "cs", 3, 46, 30, 1], [Ga, "cs", Er, 46, 31, 1], [Ni, "cs", Ga, 53, 33, Ga], [1, "cs", 2, 49, 33, _], [Ni, "cs", br, 53, 32, Ek], [Co, "cs", 0, 55, 32, ck], [Ga, "cs", yj, 47, 32, Ek], [1, "d", 1, 54, 35, 1], [Ga, "fo", tk, 35, 15, Fj], [1, "fo", 2, 36, 12, 0], [Co, "fo", qo, 67, 15, Aa], [Ni, "cs", 3, 60, fr, 1], [1, "cs", 2, 59, 13, _], [Co, "cs", 1, 58, 13, 1], [Co, "cs", 3, 62, 16, er], [1, "cs", 0, 61, fn, Ek], [Ni, "cs", 3, 60, on, 1], [1, "cs", nk, 63, 17, Ek], [1, "cs", qo, 60, Qq, 1], [Ek, "cs", er, 59, 19, 1], [Ga, "cs", 3, 58, 19, 1], [Co, "cs", 2, 57, Qq, 1], [Ek, "cs", 2, 56, Sn, er], [ck, "cs", 0, 55, 18, er], [1, "cs", 2, 55, jr, Co], [Ni, "cs", On, 63, 23, Co], [1, "cs", Qr, 62, 22, 1], [_, "cs", tk, 61, 22, ck], [ck, "cs", er, 60, 22, 1], [Ni, "cs", tj, 59, 22, 1], [1, "cs", tk, 54, 26, _], [1, "cs", 2, 55, 26, Co], [_, "cs", br, 56, 26, _], [1, "cs", _, 57, 26, Co], [1, "cs", 2, 58, 26, 1], [Co, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, Ni], [1, "cs", ta, 68, 15, 1], [1, "cs", 3, 69, Wa, 1], [ck, "cs", 3, 70, 15, _], [1, "cs", 3, 70, 14, Ga], [1, "cs", 1, 69, Wn, 1], [Ni, "cs", Ga, 69, 16, 1], [1, "cs", 2, 71, Ak, 1], [1, "cs", 2, 71, 14, 1], [ck, "cs", Lq, 72, fr, Ga], [1, "cs", Er, 70, 8, 1], [Ni, "cs", 3, 71, Ko, Ek], [1, "cs", ta, 72, k, 1], [1, "cs", 0, 73, 8, Co], [Co, "cs", 3, 74, Hr, 1], [Ek, "cs", Qn, 74, wo, 1], [1, "cs", 0, 75, 8, ck], [1, "cs", Hn, 76, 8, 1], [1, "cs", Rn, 75, Xq, Co], [Ek, "cs", Qn, 75, In, Ek], [1, "cs", tj, 76, uj, Ni], [1, "cs", 0, 76, 16, 1], [1, "cs", 3, 76, Zn, 1], [Co, "cs", 3, 75, 16, _], [Ek, "cs", 2, 77, rr, 1], [1, "cs", bq, 77, Uq, er], [1, "cs", 3, 77, 12, er], [er, "cs", 3, 77, 13, Co], [Ek, "cs", 3, 77, 15, 1], [_, "cs", 0, 74, 18, Co], [1, "cs", 1, 75, Ja, Co], [1, "cs", X, 74, fq, Ni], [Co, "cs", 3, 73, Qq, Ni], [1, "cs", Er, 67, 23, 1], [1, "cs", Fj, 68, 23, _], [1, "cs", 0, 72, 20, Ga], [1, "cs", ta, 73, qa, Ek], [1, "cs", 2, 74, 19, 1], [_, "cs", 2, 74, 36, 1], [ck, "cs", qo, 77, 27, er], [1, "cs", 2, 76, 26, 1], [Ek, "cs", 2, 75, 26, 1], [1, "cs", tj, 74, 26, Ga], [1, "cs", br, 75, 25, 1], [ck, "cs", 0, 76, 25, 1], [_, "cs", 1, 77, 23, 1], [Co, "cs", 2, 77, Ci, 1], [1, "cs", bq, 76, fq, 1], [1, "cs", qo, 76, 24, 1], [Ek, "cs", 2, 77, 24, er], [1, "cs", X, 77, 25, Co], [1, "cs", qo, 77, 26, Ni], [Ga, "cs", Co, 75, 27, ck], [1, "cs", 3, 76, 27, 1], [Ek, "cs", tk, 67, 24, Ga], [1, "cs", 2, 66, 24, ck], [Ga, "cs", bq, 73, 26, Ni], [1, "cs", On, 74, 27, 1], [Co, "cs", 2, 74, 25, _], [ck, "cs", bq, 66, 19, 1], [1, "cs", ta, 66, 20, 1], [1, "cs", ta, 66, 21, 1], [1, "cs", bq, 67, aa, Ga], [1, "cs", 2, 67, 22, 1], [1, "cs", 0, 77, 36, Ni], [1, "cs", xq, 77, 32, 1], [1, "cs", er, 75, 35, Co], [Ni, "cs", qo, 75, 36, 1], [1, "cs", qi, 76, 36, Co], [er, "cs", 2, 77, 35, 1], [1, "cs", Nr, 77, 34, 1], [Ga, "cs", qi, 76, 35, ck], [1, "cs", qi, 77, 33, 1], [Ni, "cs", 2, 77, 31, Co], [Ga, "cs", Fj, 77, 29, 1], [1, "cs", 0, 71, 32, 1], [1, "cs", 0, 76, 34, Ek], [Co, "cs", On, 77, 30, Co], [Co, "cs", 2, 77, 28, Co], [1, "cs", Nr, 76, 28, 1], [Ek, "cs", 2, 75, 28, 1], [er, "cs", X, 76, 29, 1], [1, "cs", qo, 76, 33, Ek], [1, "cs", 2, 70, 32, 1], [_, "cs", 2, 69, 31, Co], [er, "cs", tj, 68, 31, 1], [_, "cs", bq, 67, 31, Ga], [Ni, "cs", 2, 67, 30, Co], [1, "cs", qi, 69, 32, 1], [1, "cs", _, 67, 32, 1], [1, "cs", 2, 68, 32, 1], [1, "cs", bq, 66, 32, 1], [1, "cs", 2, 66, 33, Ni], [er, "cs", br, 67, 33, Co], [1, "cs", 2, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [Ga, "cs", 2, 68, 33, 1], [er, "cs", 0, 68, 34, Co], [1, "cs", 1, 66, 35, 1], [1, "cs", qi, 67, 34, 1], [Ek, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, ck], [Co, "cs", On, 64, 36, Ni], [Ni, "cs", qi, 65, 36, 1], [Co, "cs", qi, 67, 35, 1], [1, "cs", 2, 66, 36, Co], [1, "cs", 2, 69, 34, Ni], [Ek, "cs", qi, 68, 35, Co], [1, "cs", br, 76, 9, 1], [Co, "cs", ta, 77, 9, 1], [1, "cs", 2, 77, Hk, 1], [1, "cs", 2, 77, iq, Ni], [_, "cs", ta, 78, Da, er], [1, "cs", Nj, 78, gn, 1], [_, "cs", 2, 78, vq, Ek], [1, "cs", 2, 78, Br, 1], [1, "cs", Nr, 78, 12, 1], [1, "cs", qo, 78, io, 1], [Ga, "cs", yj, 79, 9, 1], [1, "cs", _, 79, 11, Ga], [Ek, "cs", Z, 79, Nk, 1], [1, "cs", 3, 79, F, 1], [1, "cs", wi, 79, 12, Co], [1, "cs", Lq, 80, $o, 1], [1, "cs", 1, 80, 10, 1], [_, "cs", tk, 80, J, 1], [1, "cs", X, 80, Rr, 1], [1, "cs", On, 81, or, Co], [1, "cs", Nj, 81, Pj, ck], [Ni, "cs", 2, 81, iq, 1], [Ek, "cs", 2, 78, 14, Ni], [1, "cs", qi, 79, 13, Ek], [Ga, "cs", 2, 78, y, Ek], [1, "cs", br, 80, vo, 1], [1, "cs", 0, 79, Cn, 1], [Co, "cs", Aa, 82, 9, 1], [1, "cs", 2, 82, or, Ga], [Ni, "cs", 2, 82, In, 1], [1, "cs", bq, 81, 11, er], [1, "cs", 3, 80, Dj, 1], [er, "cs", ck, 78, 30, Ga], [Ga, "cs", er, 78, 34, 1], [Co, "cs", 1, 78, 27, 1], [Co, "cs", 0, 78, 25, 1], [Ga, "cs", tj, 79, 29, _], [1, "cs", xq, 79, 32, 1], [1, "cs", 0, 79, 35, ck], [Ni, "cs", 2, 78, 35, 1], [1, "cs", 2, 78, 36, Co], [1, "cs", Nj, 79, 34, er], [Ga, "cs", 2, 78, 33, _], [1, "cs", br, 79, 33, Co], [er, "cs", qo, 78, 32, Co], [ck, "cs", 2, 78, 31, 1], [Ni, "cs", 2, 79, 31, er], [Ga, "cs", 2, 79, 30, 1], [ck, "cs", br, 78, 29, 1], [1, "cs", Nr, 78, 28, Ga], [Ek, "cs", 2, 79, 28, 1], [ck, "cs", 2, 79, 27, Co], [Ni, "cs", 2, 78, 26, Ni], [er, "cs", tk, 79, 26, Ni], [1, "cs", 2, 78, 24, 1], [_, "cs", 2, 80, 34, 1], [1, "cs", 2, 80, 33, 1], [Ek, "cs", br, 80, 31, 1], [1, "cs", 2, 80, 30, Ni], [1, "cs", ta, 80, 32, 1], [ck, "cs", ta, 80, 29, _], [1, "cs", tk, 80, 28, Ek], [1, "cs", 2, 80, 27, Ni], [Ga, "cs", An, 81, 30, ck], [1, "cs", ck, 81, 32, 1], [1, "cs", 1, 81, 28, 1], [Co, "cs", Nr, 81, 29, er], [1, "cs", bq, 81, 31, Co], [1, "cs", 2, 81, 33, _], [er, "cs", X, 82, 30, Ga], [_, "cs", 2, 82, 31, 1], [1, "cs", 2, 82, 32, 1], [Ga, "cs", Fj, 37, 36, 1], [1, "cs", 2, 38, 36, Ga], [Co, "cs", 2, 37, 35, 1], [1, "cs", 2, 36, 36, ck], [1, "cs", 2, 34, 35, 1], [1, "cs", X, 35, 35, Co], [_, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, ck], [Co, "cs", Ni, 35, 34, _], [1, "cs", bq, 36, 34, 1], [Ga, "cs", 2, 34, 34, 1], [ck, "cs", X, 36, 33, 1], [1, "cs", 2, 35, 33, 1], [1, "cs", X, 34, 33, 1], [Ni, "cs", 2, 33, 33, 1], [_, "cs", 2, 31, 32, Ga], [1, "cs", Co, 36, 32, 1], [Ni, "cs", Ni, 32, 32, ck], [1, "cs", ta, 35, 32, 1], [1, "cs", 2, 33, 32, 1], [1, "cs", 2, 32, 33, er], [1, "cs", br, 33, 31, 1], [ck, "cs", 2, 34, 31, 1], [1, "cs", 2, 35, 31, Ga], [Ek, "cs", An, 34, 32, _], [1, "cs", 2, 35, 30, ck], [1, "cs", 1, 39, 23, 1], [Ek, "cs", Z, 39, 22, Ga], [Ni, "cs", Er, 36, 24, 1], [er, "cs", 3, 35, 24, Ek], [1, "cs", qo, 34, 23, ck], [er, "cs", tk, 35, 23, 1], [Ni, "cs", 2, 36, an, 1], [1, "cs", br, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [1, "cs", Nj, 35, 16, 1], [Ek, "cs", Nr, 34, fn, ck], [ck, "cs", 2, 33, on, 1], [Co, "cs", 0, 34, 17, 1], [1, "cs", yj, 32, 15, 1], [1, "cs", qi, 31, 14, Co], [1, "cs", 3, 30, 13, ck], [_, "cs", 1, 33, y, 1], [Ek, "cs", _, 31, 13, 1], [1, "cs", br, 32, Cn, er], [1, "cs", 0, 31, 8, 1], [Co, "cs", 2, 32, 8, _], [Ek, "cs", 2, 25, Dj, _], [Co, "cs", An, 25, tq, 1], [ck, "cs", 2, 25, Jj, Ni], [Co, "cs", 3, 25, 10, ck], [1, "cs", 0, 25, Xq, 1], [1, "cs", 2, 25, Nk, Co], [1, "cs", 2, 26, Je, Ga], [1, "cs", 2, 27, 8, Ek], [1, "cs", bq, 28, 8, Ni], [er, "cs", 2, 29, Ko, 1], [1, "cs", 2, 30, 8, 1], [1, "cs", Nr, 26, Xq, Ek], [1, "cs", qi, 27, gn, 1], [1, "cs", 2, 26, Vq, Ga], [Co, "cs", 1, 27, Vq, 1], [Ek, "cs", Hn, 28, 9, Ni], [_, "cs", wi, 25, nq, Co], [Ek, "cs", 0, 25, Zq, Ek], [ck, "cs", 2, 26, 15, 1], [Ga, "cs", Z, 27, 16, Ga], [1, "cs", Gk, 28, rj, Ek], [1, "cs", 1, 29, L, ck], [Ek, "cs", Nr, 26, wr, 1], [Ni, "cs", 2, 25, 16, _], [Ek, "cs", Nj, 27, 17, 1], [1, "cs", Nj, 26, 17, ck], [1, "cs", Ga, 27, zn, 1], [_, "cs", 2, 28, Dk, 1], [Co, "cs", 2, 30, 19, Co], [1, "cs", X, 29, 19, Co], [1, "cs", 2, 24, nq, 1], [1, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, Ni], [_, "cs", 2, 24, 10, 1], [1, "cs", 2, 24, 11, Ga], [Ni, "cs", 2, 24, 12, 1], [ck, "cs", 2, 24, wa, Co], [er, "cs", Ni, 23, 10, 1], [1, "cs", 0, 22, k, _], [1, "cs", xq, 22, ca, 1], [Ek, "cs", 1, 23, wo, 1], [1, "cs", 2, 24, Ko, 1], [1, "cs", qo, 24, 9, 1], [ck, "cs", Nj, 23, 9, 1], [Co, "cs", 2, 22, 9, er], [1, "cs", tk, 22, Li, Ga], [Ga, "cs", qi, 22, dn, 1], [Co, "cs", Nj, 23, 11, 1], [1, "cs", qi, 23, 12, 1], [ck, "cs", 2, 23, Dj, 1], [1, "cs", qi, 22, Ak, Ga], [1, "cs", Nj, 21, gn, Ga], [1, "cs", 2, 21, $o, 1], [er, "cs", On, 29, 25, 1], [er, "cs", Nr, 25, 24, Ni], [1, "cs", 2, 26, 25, _], [1, "cs", 2, 27, 25, Ek], [1, "cs", Gk, 28, 25, 1], [Ni, "cs", Co, 25, 23, 1], [Ek, "cs", On, 26, 24, 1], [1, "cs", Qr, 24, 25, Ni], [1, "cs", 3, 23, 24, Co], [1, "cs", 3, 24, 24, 1], [er, "cs", 3, 25, 25, 1], [1, "cs", Er, 23, 25, _], [1, "cs", 1, 22, 26, Co], [1, "cs", Ek, 26, 26, 1], [1, "cs", 1, 29, 26, Ek], [Ek, "cs", qi, 23, 26, Co], [Ek, "cs", ta, 24, 26, _], [Co, "cs", bq, 25, 26, Ni], [1, "cs", Nr, 27, 26, Ga], [Co, "cs", 2, 28, 26, Ni], [er, "cs", 2, 30, 26, er], [ck, "cs", 2, 29, 27, Ek], [Ga, "cs", 2, 28, 28, 1], [_, "cs", Co, 26, 29, 1], [Ek, "cs", yj, 28, 27, 1], [Co, "cs", qo, 27, 28, Ni], [1, "cs", 2, 27, 27, er], [1, "cs", qo, 26, 28, 1], [_, "cs", tk, 26, 27, Co], [_, "cs", 2, 25, 28, Ga], [1, "cs", On, 25, 27, ck], [1, "cs", 2, 23, 27, Ek], [1, "cs", bq, 22, 27, Co], [Ni, "cs", 2, 24, 27, 1], [ck, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, Ga], [1, "cs", 1, 24, 30, 1], [er, "cs", 2, 25, 31, er], [_, "cs", Nr, 25, 30, Co], [Ni, "cs", 2, 25, 29, Ek], [Ga, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, 1], [1, "cs", 2, 26, 33, er], [1, "cs", 0, 26, 34, _], [Co, "cs", 2, 27, 35, er], [Ni, "cs", bq, 22, 28, er], [Ga, "cs", bq, 23, 28, 1], [1, "cs", 2, 24, 31, 1], [1, "cs", X, 24, 32, _], [Ek, "cs", 2, 25, 33, 1], [ck, "cs", On, 26, 35, 1], [1, "cs", ta, 24, 33, _], [er, "cs", Nr, 25, 34, Co], [1, "cs", er, 22, 29, 1], [Ga, "cs", 1, 24, 34, 1], [Ni, "cs", An, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [Ni, "cs", 2, 24, 35, _], [1, "cs", qo, 23, 34, Co], [Co, "cs", qo, 23, 33, 1], [Ek, "cs", Fj, 22, 33, er], [_, "cs", Ek, 23, 32, 1], [Ga, "cs", 2, 22, 32, 1], [Co, "cs", 2, 23, 31, er], [ck, "cs", 2, 23, 30, Ga], [1, "cs", 2, 22, 30, Co], [1, "cs", 2, 22, 31, 1], [Co, "cs", 1, 21, 31, ck], [1, "cs", 0, 21, 29, 1], [1, "cs", 2, 21, 30, 1], [er, "cs", On, 24, 36, Ga], [1, "cs", br, 26, 36, 1], [1, "cs", 2, 25, 36, Co], [1, "cs", qi, 27, 36, _], [er, "cs", qo, 28, 36, 1], [1, "d", ta, 83, 65, ck], [_, "d", 2, 16, 67, Ga], [1, "g", 0, 15, ji, 1], [1, "s", 0, Mr, io, Co], [Ga, "s", tj, 85, Ik, 1], [Ni, "f", 0, 41, 102, 1], [1, "f", yj, 42, 124, 1], [1, "f", Fj, 64, 116, Ek], [_, "f", Gk, 74, 104, 1], [1, "f", 0, 70, 87, 1], [1, "f", 0, 27, 96, Ga], [1, "f", 0, 22, 79, _], [er, "f", 0, 20, 117, er], [1, "f", 0, 30, 137, 1], [1, "f", tj, 59, 146, 1], [1, "f", yj, 52, 147, er], [1, "f", xq, La, 149, Co], [Ek, "f", yj, 36, 146, er], [1, "f", 0, 62, 124, Ni], [Ni, "g", 1, 34, 121, _], [1, "g", ck, 52, 116, 1], [1, "g", Ga, 78, 116, Ek], [Co, "g", Ga, 71, 129, Ek], [1, "s", 0, 53, 100, er], [ck, "s", 0, 73, 111, ck], [ck, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, 1], [_, "s", 0, Wi, 102, 1], [1, "s", 0, Dq, 127, 1], [1, "s", 0, 35, 159, Co], [1, "s", Aa, 65, 54, er], [1, "s", Qr, 44, 52, Ek], [er, "s", 0, 26, 51, Co], [1, "f", _, 56, 136, er], [Ni, "f", er, 41, 133, _], [Ni, "f", 1, 80, 120, 1], [1, "f", 1, 16, 117, 1], [1, "f", 1, 13, 99, _], [1, "f", 1, 17, 89, 1], [Co, "f", Ek, 90, 98, Ga], [1, "f", Ni, 84, 95, 1], [Ga, "f", ck, Ha, 57, Co], [1, "f", _, 77, 53, 1], [er, "d", Ek, 48, 35, er], [ck, "de", 8, 33, 13, 0], [Co, "de", 8, 30, 9, 0], [ck, "de", eo, 32, 30, 0], [Co, "de", In, 30, 25, 0], [Ek, "de", Li, 33, 21, Fj], [_, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, 0], [1, "de", gn, 70, 22, 0], [1, "de", iq, 70, fn, Gk], [Co, "de", F, 75, 11, Qr], [Ga, "de", 8, 68, 10, 0], [Co, "de", 8, 75, 30, Aa], [1, "de", Jj, 71, 33, 0], [ck, "de", 11, 72, 25, 0], [1, "de", dn, 64, 25, 0], [_, "de", Ik, 52, F, 0], [1, "de", 11, 31, nr, yj], [1, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [Ek, "de", 30, 34, 29, Aa], [1, "de", 30, 30, 29, 0], [Ni, "de", 30, 71, 29, 0], [_, "de", 28, 68, 25, Gk], [er, "de", 28, 75, ik, tj], [1, "de", 27, 67, 19, tj], [Ni, "de", 29, 72, 10, tj], [Ni, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, Qr], [1, "fo", 1, 39, 12, Aa], [1, "fo", 1, 34, ak, 0], [1, "fo", Ni, 74, 28, Qr], [1, "fo", X, 74, 29, Fj], [ck, "fo", qo, 69, 30, 0], [Ni, "fo", 2, 77, 22, 0], [1, "fo", Nr, 74, 21, 0], [_, "fo", bq, 76, 18, An], [ck, "fo", Co, 78, yq, 0], [1, "fo", Ek, 28, D, 0], [er, "fo", 2, 27, 24, tj], [Ga, "fo", ta, 24, Xj, Fj], [1, "fo", qo, 29, 21, 0], [Ek, "fo", 1, 27, 32, 0], [Ni, "fo", 2, 30, 33, xq], [_, "fo", Ga, 29, 28, 0], [Co, "fo", 2, 28, 31, 0], [1, "fo", On, La, 24, 0], [_, "fo", qi, 20, 26, 0], [1, "fo", 2, 23, 16, 0], [1, "fo", 2, Ik, 25, Qr], [1, "de", 33, 29, 22, Aa], [1, "de", 34, 32, 25, Fj], [1, "de", 34, 30, 18, Fj], [Ni, "de", 33, 78, Ki, 0], [1, "de", 33, 73, 35, 0], [1, "de", 36, 72, 23, 0], [1, "de", 35, 25, zj, xq], [1, "d", 1, 83, 41, 1], [1, "d", ck, A, 40, Ek], [1, "cs", 2, 224, 104, Co], [Ga, "cs", 0, 224, 105, 1], [1, "cs", Hn, 224, 106, 1], [Ni, "la", 3, 216, 128, er], [1, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, 1], [1, "s", Ni, 217, 129, 1], [Co, "s", Fj, 218, 128, _], [1, "s", ck, 217, 127, 1], [1, "s", 0, 217, 126, 1], [Co, "s", 1, 217, 125, 1], [1, "s", Fj, 216, 124, Ni], [Co, "s", Co, 215, 124, 1], [Ni, "s", An, 214, 124, Ga], [_, "s", 1, 213, 125, 1], [Ek, "s", 0, 213, 126, er], [Ga, "plm", 2, 217, 130, yj], [1, "plm", 2, 212, 125, tj], [_, "p", yj, 214, 134, 1], [1, "s", 1, 211, 126, 1], [er, "b", 1, 45, 277, yj], [Ga, "b", 1, 50, 286, xq], [1, "b", 2, 51, 284, 0], [1, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, 0], [Ek, "b", Er, 40, 283, yj], [Ga, "b", 0, 52, 283, An], [1, "b", 1, 51, 280, 0], [Ni, "g", Gk, 45, 269, 1], [Ga, "p", 0, 55, 281, 1], [1, "b", er, 5, 172, Gk], [Ga, "b", On, Ze, 172, 0], [1, "t", un, 6, 171, 0], [Ek, "t", Ga, 5, 170, 0], [1, "t", 1, un, 164, Gk], [1, "t", 3, 6, 164, 0], [1, "b", 0, P, 165, An], [1, "t", nk, 5, 165, 0], [1, "b", qi, kk, 166, tj], [Ga, "t", 4, ko, 166, An], [er, "t", ge, U, 167, Aa], [1, "t", 2, 6, 168, An], [_, "t", 0, 6, 169, xq], [1, "t", 4, 6, 170, Qr], [1, "t", An, 5, 167, 0], [1, "t", bq, _j, 169, An], [ck, "b", Aa, 5, 168, Aa], [Co, "s", 1, Ji, 153, 1], [Ga, "s", qi, 7, 151, er], [Co, "de", 5, Mn, 152, Qr], [ck, "t", Ga, 5, 154, yj], [Ni, "b", 0, 6, 154, 0], [er, "t", 2, $q, 155, 0], [1, "b", bq, 6, 156, 0], [1, "t", 2, 5, 157, Fj], [Co, "t", $j, Sj, 155, Gk], [Ni, "b", 0, Oe, 157, 0], [1, "t", ck, 5, 156, Qr], [1, "t", un, 6, 158, Gk], [ck, "b", 2, ya, 159, An], [Ni, "b", 0, 6, 162, 0], [1, "t", 4, 6, 163, Qr], [_, "t", 4, 6, 161, Gk], [1, "b", er, jq, 160, 0], [er, "b", tk, zr, 163, An], [ck, "b", 2, un, 158, 0], [1, "b", Nj, un, 161, 0], [ck, "t", 1, Sj, 162, 0], [1, "t", Ga, 5, 160, 0], [1, "b", Ek, 85, 176, xq], [1, "b", On, 83, 178, 0], [1, "s", er, 82, 177, _], [_, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [1, "t", Z, 73, 174, Fj], [1, "t", un, 72, 175, 0], [ck, "t", 5, 87, 173, Gk], [1, "de", 2, 76, 175, yj], [1, "de", nk, 77, 171, Gk], [1, "de", nk, 86, 177, Gk], [1, "de", 2, 71, 175, 0], [Co, "s", 1, 70, 174, ck], [1, "r", 48, 174, yj], [Ga, "r", 49, 175, Fj], [1, "r", 50, 175, tj], [Ni, "r", 51, 175, 0], [_, "r", 51, 174, xq], [1, "r", 50, 174, Gk], [1, "r", 49, 174, 0], [1, "r", 52, 175, 0], [1, "r", 52, 176, Aa], [er, "r", 51, 176, yj], [1, "r", 50, 176, yj], [1, "r", 49, 176, Aa], [Ga, "r", 48, 175, xq], [Ni, "r", 47, 175, tj], [Ga, "r", 48, 176, xq], [Co, "r", 69, 163, yj], [er, "r", 70, 163, An], [1, "r", 71, 163, Fj], [1, "r", 73, 163, 0], [1, "r", 72, 163, Fj], [Ga, "r", 73, 164, 0], [er, "r", 72, 164, Gk], [1, "r", 71, 164, 0], [1, "r", 70, 164, 0], [Co, "r", 69, 164, Aa], [1, "r", 68, 164, Gk], [ck, "r", 68, 165, 0], [1, "r", 69, 165, tj], [er, "r", 70, 165, xq], [Ni, "r", 71, 165, Gk], [er, "r", 72, 165, 0], [1, "r", 74, 164, Fj], [1, "r", 73, 165, 0], [Ek, "r", 72, 166, Aa], [Ni, "r", 71, 166, 0], [ck, "r", 70, 166, 0], [_, "r", 74, 165, 0], [1, "r", 24, 164, Fj], [Ek, "r", 25, 164, 0], [Ek, "r", 27, 164, 0], [1, "r", 26, 164, xq], [1, "r", 28, 165, 0], [ck, "r", 26, 165, An], [1, "r", 27, 165, Aa], [Ni, "r", 25, 165, Gk], [ck, "r", 24, 165, An], [_, "r", 23, 165, 0], [1, "r", 22, 165, Fj], [Ek, "r", 21, 165, Qr], [Co, "r", 21, 166, xq], [ck, "r", 22, 166, Aa], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [1, "r", 25, 166, 0], [1, "r", 26, 166, 0], [Ni, "r", 27, 166, An], [1, "r", 28, 166, Fj], [1, "r", 28, 167, An], [Ni, "r", 26, 167, 0], [1, "r", 25, 167, Fj], [1, "r", 24, 167, Aa], [1, "r", 23, 167, Gk], [1, "r", 22, 167, Aa], [_, "r", 27, 167, xq], [1, "r", 29, 166, 0], [1, "r", 29, 167, An], [1, "r", 28, 168, yj], [1, "r", 27, 168, Qr], [Ga, "r", 26, 168, 0], [1, "r", 25, 168, 0], [1, "r", 24, 168, Aa], [er, "r", 23, 168, Aa], [ck, "r", 27, 169, Aa], [1, "r", 26, 169, 0], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [1, "r", 23, 169, 0], [1, "r", 22, 168, An], [1, "r", 21, 167, 0], [ck, "s", 1, 52, 174, Ni], [Ek, "t", 3, 50, 177, 0], [1, "t", oe, 49, 177, Fj], [Ek, "b", 0, 47, 174, 0], [Ga, "b", 0, 69, 166, xq], [1, "t", X, 68, 166, 0], [_, "t", zr, 74, 163, 0], [1, "t", er, 73, 162, tj], [Ek, "s", Gk, 73, 166, Ga], [1, "s", 2, 76, 165, Ni], [Ga, "g", bq, 59, 175, 1], [1, "p", yj, 78, 168, Ga], [er, "p", xq, 61, 162, _], [er, "p", Aa, 42, 170, Ga], [1, "p", Gk, 20, 174, er], [Co, "p", yj, 16, 160, 1], [Ga, "b", er, 23, 164, xq], [er, "b", 1, 28, 169, 0], [er, "b", ta, 29, 168, 0], [_, "b", Nr, Ha, 170, 0], [1, "t", Ni, ua, 171, 0], [Co, "t", 5, mn, 175, yj], [1, "t", 5, Xa, 166, xq], [Ek, "t", 5, 26, 163, 0], [Ga, "s", 1, 29, 165, 1], [_, "t", 5, 11, 167, 0], [_, "t", Qr, 29, 176, 0], [_, "b", 2, 30, 175, 0], [Ek, "t", 2, 24, 177, Qr], [_, "b", 1, 37, 174, Fj], [1, "b", Fj, 35, 172, An], [1, "b", 3, 37, 170, 0], [1, "t", aq, 38, 169, 0], [1, "t", cq, 34, 173, Gk], [Ek, "t", _j, 38, 175, 0], [1, "b", 2, 39, 173, Qr], [1, "t", Rn, 37, 176, Aa], [Ni, "t", cq, 30, 168, Aa], [er, "s", Nr, 35, 176, Ga], [_, "s", ck, 41, 175, er], [Ga, "b", 2, 53, 176, Gk], [1, "t", ko, 55, 173, 0], [Ni, "t", zr, 45, 170, An], [1, "b", 1, 53, 162, xq], [Ni, "b", Gk, 50, 164, xq], [1, "t", Nj, 54, 163, 0], [1, "t", Rn, 49, 165, 0], [_, "t", oe, 48, 160, 0], [Ek, "t", hr, 57, 164, 0], [1, "t", aq, 66, 162, Qr], [Co, "b", 1, 86, 161, 0], [er, "b", 2, 81, 163, 0], [er, "t", 3, 85, 162, yj], [1, "t", 5, 81, 162, xq], [1, "t", 5, 88, 163, 0], [Ga, "t", 1, 84, 166, yj], [1, "t", zr, 72, 160, 0], [Co, "t", 5, 70, 170, 0], [1, "s", er, 57, 162, Ni], [Ga, "b", Ni, 39, 161, 0], [_, "b", Qr, 34, 164, xq], [1, "b", 2, 54, 164, xq], [Co, "t", 1, 59, 169, Qr], [1, "t", Z, 60, 170, Aa], [1, "t", 4, 63, 169, An], [ck, "t", oe, 63, 174, An], [1, "t", 1, 62, 175, 0], [1, "t", un, 40, 162, 0], [1, "t", _, 63, 180, Gk], [1, "t", 2, 64, 179, 0], [1, "t", Nr, 35, 165, 0], [ck, "s", 1, 63, 173, Ni], [Co, "s", br, 40, 165, 1], [Ga, "b", 0, 46, 169, 0], [ck, "de", 22, 74, 168, xq], [1, "de", 22, 86, 168, 0], [Ga, "de", 22, 83, 175, yj], [Ga, "de", 22, 78, 175, 0], [Ga, "de", 19, 72, 176, 0], [1, "de", 19, 68, 168, 0], [1, "de", 19, 65, 163, 0], [Ga, "de", ka, 75, 162, 0], [ck, "de", Sn, 80, 162, xq], [1, "de", 19, 88, 159, tj], [Ek, "de", Dn, 87, 164, 0], [1, "de", 19, 61, 177, yj], [1, "de", ka, 59, 172, Fj], [ck, "de", 19, 59, 167, An], [1, "de", 19, 53, 165, 0], [Ga, "de", ka, 56, 163, Gk], [_, "de", xj, 51, 161, tj], [er, "de", Po, 48, 167, 0], [Ek, "de", 19, 47, 170, Gk], [1, "de", D, 41, 163, 0], [1, "de", 19, 37, 161, 0], [1, "de", Po, 36, 166, 0], [Ga, "de", Xa, 36, 171, An], [1, "de", wn, 34, 174, 0], [_, "de", 19, 40, 172, 0], [ck, "de", 19, 38, 177, 0], [Ga, "de", 19, 42, 176, Aa], [1, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, Qr], [_, "de", 19, 64, 181, yj], [1, "de", 19, 64, 175, Qr], [1, "de", Po, 79, 172, An], [1, "de", 19, 30, 170, An], [1, "de", 19, ro, 168, tj], [1, "de", 19, nq, 173, 0], [er, "de", 19, 12, 162, Fj], [ck, "de", Xa, 9, 167, Aa], [1, "de", 19, rq, 161, Fj], [Co, "de", 19, 27, 162, tj], [Co, "de", 19, 83, 195, 0], [_, "de", br, 85, 163, 0], [Ni, "de", qo, 80, 164, 0], [1, "de", 2, 84, 169, yj], [er, "de", br, 55, 165, 0], [1, "de", Rn, 46, 163, Fj], [1, "de", 2, 66, 169, 0], [1, "de", yj, 63, 175, yj], [_, "de", 0, 34, 164, tj], [Co, "de", 0, 18, 160, 0], [1, "de", On, 40, 160, tj], [ck, "de", ta, 53, 160, 0], [Ek, "de", br, 14, 170, xq], [1, "de", 2, 19, 175, 0], [Co, "de", 2, 23, 176, Gk], [Co, "de", _j, 60, 147, 0], [Co, "de", 33, 59, 160, Qr], [1, "de", 33, 85, 157, Qr], [Co, "de", 33, 29, 143, Qr], [1, "de", 33, 62, 140, 0], [ck, "de", 33, 43, 127, Aa], [Ni, "de", 33, 18, 129, Fj], [1, "de", 33, 50, 134, 0], [1, "de", 33, 79, 127, yj], [1, "de", 33, 89, 139, 0], [Ga, "b", 1, 44, 156, An], [Ga, "t", 2, 45, 157, An], [Ga, "b", 0, 75, 156, 0], [1, "t", 3, 76, 157, 0], [Ek, "t", 5, 62, 157, yj], [Ek, "t", 5, 79, 156, Aa], [Ni, "t", 5, 41, 156, Fj], [1, "b", 1, 28, 156, 0], [Ni, "t", 2, 27, 157, 0], [1, "t", yn, 21, 156, 0], [1, "t", 4, 56, 159, yj], [1, "f", 1, 94, 153, er], [Co, "f", 2, 93, 153, Ga], [1, "f", 2, 99, 153, Co], [1, "f", Ga, 98, 153, 1], [1, "f", 0, 97, 153, Ga], [Ek, "f", 1, 96, 153, Ni], [1, "s", ck, O, 149, 1], [er, "de", hr, Ia, 150, 0], [_, "b", nk, 43, 281, 0], [Co, "de", 50, 24, 39, tj], [1, "de", 50, 21, 39, tj], [1, "de", 50, 22, 43, yj], [_, "de", 50, _q, 34, 0], [Ga, "de", 50, 18, 26, Fj], [1, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [Ga, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, 0], [Ni, "de", 50, 71, 41, 0], [Ek, "de", 50, 55, 39, yj], [_, "de", 50, 22, 39, An], [Ni, "de", 50, rq, 41, Qr], [1, "de", 50, po, 21, yj], [_, "de", 50, 15, 21, 0], [Ga, "de", 50, 18, 19, Gk], [er, "de", 50, go, ee, Aa], [_, "de", 50, Dq, F, 0], [Co, "de", 50, aa, 9, 0], [Ga, "de", 50, 52, 41, An], [Co, "de", 50, 82, 39, xq], [1, "de", 50, 86, 38, Gk], [er, "de", 50, 84, 31, Fj], [_, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, An], [1, "de", 50, 86, 23, 0], [1, "de", 50, 86, pk, Aa], [1, "de", 50, 29, 42, Qr], [_, "de", 9, 74, 37, Aa], [Ni, "de", Xq, 76, 22, 0], [Ga, "de", iq, 79, 24, Aa], [Co, "de", 11, 77, Tk, yj], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, xq], [1, "de", 36, 21, 36, Gk], [Co, "de", 28, 23, 22, Aa], [Co, "de", 28, 27, 31, 0], [er, "de", 28, 69, 36, Aa], [1, "de", 28, 80, Vk, Qr], [1, "de", 51, 24, 155, 0], [1, "de", 51, 7, 154, Gk], [Co, "de", 51, 11, 154, 0], [Ni, "de", 51, 12, 156, An], [ck, "de", 51, Cq, 154, 0], [1, "de", 51, 20, 154, 0], [1, "de", 51, 23, 154, tj], [_, "de", 51, 18, 157, Aa], [1, "de", 51, 31, 154, Fj], [1, "de", 51, 32, 157, 0], [Co, "de", 51, 86, 154, 0], [_, "de", 51, 88, 156, 0], [Ek, "de", 51, 82, 154, tj], [Co, "de", 51, 80, 154, xq], [1, "de", 51, 77, 154, 0], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [_, "de", 51, 67, 154, 0], [Co, "de", 51, 60, 154, 0], [_, "de", 51, 57, 154, An], [Ek, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, 0], [Co, "de", 51, 59, 156, 0], [ck, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, yj], [1, "de", 51, 52, 154, Qr], [_, "de", 51, 55, 155, Fj], [1, "de", 51, 54, 157, tj], [1, "de", 51, 49, 154, Gk], [Ek, "de", 51, 46, 154, Qr], [Ek, "de", 51, 44, 154, 0], [Co, "de", 51, 43, 154, tj], [Ga, "de", 51, 41, 154, Gk], [1, "de", 51, 38, 154, tj], [Ek, "de", 51, 39, 156, tj], [ck, "de", 51, 34, 154, Qr], [ck, "de", 5, 19, 142, 0], [1, "de", 5, 37, 147, 0], [1, "de", 7, 53, 147, tj], [1, "de", 6, 69, 150, An], [1, "de", 4, 94, 148, 0], [1, "de", ge, 66, 147, 0], [Ni, "de", aq, Li, 145, Fj], [1, "de", 4, 28, 137, 0], [1, "de", oe, 15, 137, 0], [ck, "de", 4, 48, 134, 0], [_, "de", zr, 67, 135, 0], [1, "de", 34, 84, 155, yj], [Co, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, 0], [Ni, "de", 35, 56, 157, 0], [1, "de", 35, 65, 159, 0], [er, "de", 35, 23, 156, Gk], [1, "de", 35, ua, 155, 0], [1, "de", 35, 8, 155, Qr], [1, "de", 33, 13, 155, Fj], [1, "de", 33, 33, 158, tj], [Ni, "de", 36, 78, 155, tj], [Ek, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [ck, "fo", Co, 80, 24, Qr], [Ek, "fo", 2, 67, 36, 0], [1, "fo", 2, 45, 36, 0], [1, "fo", 2, 53, 34, 0], [Co, "fo", 1, 51, 35, 0], [1, "fo", Ek, 58, 35, 0], [ck, "fo", 1, 33, 35, yj], [1, "fo", Ga, 31, 33, 0], [Co, "fo", ta, 29, 36, 0], [1, "fo", 2, 56, 36, tj], [1, "fo", tk, 60, 37, 0], [1, "fo", 2, 45, 32, 0], [_, "fo", 2, 22, 25, 0], [1, "fo", 2, 21, 35, Gk], [1, "de", 52, 90, 208, 0], [1, "de", Dk, 94, 250, Gk], [_, "de", yq, 95, 253, Fj], [1, "cs", 0, 140, zr, Ni], [Co, "cs", tk, 139, 5, Ni], [_, "cs", X, 138, ko, 1], [1, "cs", tk, 138, 6, 1], [1, "cs", 2, 139, jq, 1], [er, "cs", 2, 141, 6, Co], [1, "cs", 2, 140, 6, er], [ck, "la", 3, 143, Nn, Ek], [ck, "la", Z, 139, O, Ni], [1, "cs", 0, 137, 7, er], [Ek, "cs", ck, 138, 8, Ga], [Ni, "cs", br, 137, 6, ck], [1, "cs", 2, 137, wo, Ek], [1, "cs", Nr, 136, 7, 1], [1, "cs", Nj, 138, zo, 1], [1, "cs", 3, 139, 9, 1], [1, "cs", 3, 136, Da, 1], [_, "cs", 3, 137, 9, Ni], [1, "de", 53, 92, 165, 0], [ck, "de", 53, 92, 180, An], [1, "de", 53, 92, 188, An], [1, "de", 54, 92, 153, yj], [1, "de", 54, 91, 153, Aa], [1, "de", 54, 90, 153, 0], [_, "de", 54, 89, 153, Gk], [Ga, "de", 54, 88, 153, yj], [er, "de", 54, 87, 153, xq], [Ga, "de", 54, 86, 153, Aa], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, tj], [1, "de", 54, 82, 153, Fj], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, xq], [1, "de", 54, 78, 153, An], [Ga, "de", 54, 77, 153, tj], [1, "de", 54, 76, 153, Qr], [Ni, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [1, "de", 54, 72, 153, 0], [1, "de", 54, 70, 153, 0], [Ga, "de", 54, 71, 153, xq], [Co, "de", 54, 69, 153, 0], [_, "de", 54, 68, 153, xq], [er, "de", 54, 67, 153, 0], [Ni, "de", 54, 66, 153, yj], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, xq], [Ni, "de", 54, 63, 153, An], [Ga, "de", 54, 61, 153, tj], [er, "de", 54, 62, 153, tj], [ck, "de", 54, 60, 153, Fj], [Co, "de", 54, 59, 153, An], [Ek, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [Ek, "de", 54, 56, 153, Aa], [Co, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, Gk], [1, "de", 54, 53, 153, tj], [1, "de", 54, 52, 153, 0], [er, "de", 54, 51, 153, 0], [_, "de", 54, 50, 153, An], [1, "de", 54, 49, 153, An], [1, "de", 54, 48, 153, tj], [1, "de", 54, 47, 153, Gk], [1, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [Ek, "de", 54, 44, 153, 0], [er, "de", 54, 43, 153, 0], [_, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, 0], [Co, "de", 54, 40, 153, Gk], [1, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, Qr], [1, "de", 54, 38, 153, 0], [Co, "de", 54, 36, 153, 0], [_, "de", 54, 35, 153, yj], [_, "de", 54, 34, 153, 0], [_, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, Gk], [Co, "de", 54, 31, 153, Fj], [1, "de", 54, 30, 153, Fj], [1, "de", 54, 29, 153, An], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [_, "de", 54, 26, 153, xq], [ck, "de", 54, 25, 153, 0], [1, "de", 54, 24, 153, Qr], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, 0], [Ek, "de", 54, Sk, 153, 0], [1, "de", 54, _k, 153, 0], [Ga, "de", 54, 18, 153, yj], [ck, "de", 54, Tk, 153, 0], [1, "de", 54, q, 153, Gk], [1, "de", 54, 15, 153, Gk], [_, "de", 54, ak, 153, 0], [1, "de", 54, C, 153, Aa], [er, "de", 54, j, 153, Gk], [1, "de", 54, qn, 153, yj], [_, "de", 54, 10, 153, 0], [Co, "de", 54, 8, 153, Aa], [Co, "de", 54, Ba, 153, 0], [1, "de", 55, 83, 8, Fj], [Ga, "de", 55, 83, J, xq], [ck, "de", 55, 83, 10, 0], [1, "de", 55, 83, Ik, 0], [1, "de", 55, 83, $e, 0], [1, "de", 55, 83, wa, 0], [er, "de", 55, 83, 14, 0], [er, "de", 55, 83, 15, Aa], [Ni, "de", 55, 83, wr, 0], [Ni, "de", 55, 83, 17, tj], [Co, "de", 55, 83, 19, 0], [1, "de", 55, 83, zn, 0], [1, "de", 55, 83, rq, xq], [1, "de", 55, 83, 21, 0], [Ni, "de", 55, 83, 22, yj], [Co, "de", 55, 83, 23, Gk], [1, "de", 55, 83, 24, tj], [1, "de", 55, 83, 25, Aa], [Co, "de", 55, 83, 26, 0], [Co, "de", 55, 83, 27, yj], [er, "de", 55, 83, 28, 0], [er, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, Fj], [1, "de", 55, 83, 31, 0], [Ek, "de", 55, 83, 32, yj], [1, "de", 55, 83, 33, 0], [1, "de", 55, 83, 34, Fj], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [_, "de", 55, 83, 37, xq], [1, "de", 55, 83, 38, 0], [ck, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, Fj], [Co, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [_, "de", 55, 78, 38, xq], [1, "de", 55, 77, 38, 0], [Ek, "de", 55, 76, 38, Aa], [ck, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, Aa], [Ga, "de", 55, 74, 38, tj], [1, "de", 55, 72, 38, Qr], [Co, "de", 55, 71, 38, 0], [Ek, "de", 55, 70, 38, yj], [Co, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [1, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [Co, "de", 55, 65, 38, 0], [Co, "de", 55, 64, 38, yj], [ck, "de", 55, 63, 38, Aa], [1, "de", 55, 62, 38, Qr], [1, "de", 55, 60, 38, Gk], [1, "de", 55, 61, 38, 0], [_, "de", 55, 59, 38, yj], [er, "de", 55, 57, 38, Fj], [Ga, "de", 55, 58, 38, 0], [1, "de", 55, 56, 38, Qr], [1, "de", 55, 55, 38, 0], [Co, "de", 55, 54, 38, 0], [1, "de", 55, 53, 38, 0], [Co, "de", 55, 52, 38, 0], [Ni, "de", 55, 51, 38, yj], [Ek, "de", 55, 49, 38, An], [1, "de", 55, 50, 38, 0], [er, "de", 55, 48, 38, yj], [1, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, tj], [Co, "de", 55, 45, 38, An], [_, "de", 55, 44, 38, tj], [1, "de", 55, 43, 38, Aa], [1, "de", 55, 42, 38, Aa], [1, "de", 55, 41, 38, An], [1, "de", 55, 40, 38, 0], [1, "de", 55, 39, 38, 0], [1, "de", 55, 38, 38, 0], [Ek, "de", 55, 37, 38, Gk], [Ga, "de", 55, 36, 38, Qr], [er, "de", 55, 34, 38, Aa], [Ek, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, Fj], [1, "de", 55, 31, 38, tj], [_, "de", 55, 32, 38, 0], [ck, "de", 55, 30, 38, An], [1, "de", 55, 29, 38, 0], [Co, "de", 55, 28, 38, tj], [1, "de", 55, 27, 38, An], [1, "de", 55, 26, 38, xq], [Co, "de", 55, 25, 38, Aa], [Ni, "de", 55, 24, 38, tj], [1, "de", 55, 23, 38, 0], [Ga, "de", 55, 21, 38, Fj], [1, "de", 55, 22, 38, 0], [_, "de", 55, 20, 38, Qr], [Ek, "de", 55, 19, 38, 0], [1, "de", 55, 19, 37, 0], [1, "de", 55, 19, 36, 0], [1, "de", 55, _k, 35, 0], [1, "de", 55, ka, 34, 0], [1, "de", 55, 19, 33, xq], [_, "de", 55, Xa, 32, Gk], [1, "de", 55, Sn, 31, yj], [Ni, "de", 55, 19, 30, Fj], [Ga, "de", 55, 19, 28, Aa], [1, "de", 55, _k, 29, yj], [1, "de", 55, 19, 27, xq], [ck, "de", 55, 19, 26, 0], [1, "de", 55, Wi, 25, Aa], [Ek, "de", 55, 19, 24, An], [1, "de", 55, 19, 23, tj], [1, "de", 55, Xa, 22, 0], [1, "de", 55, 19, 21, tj], [_, "de", 55, D, 20, 0], [ck, "de", 55, Qq, zj, 0], [1, "de", 55, Xa, 19, Gk], [Ek, "de", 55, _k, 16, 0], [_, "de", 55, 19, 17, Gk], [_, "de", 55, 19, Wa, 0], [1, "de", 55, Wi, Uq, yj], [1, "de", 55, 19, sn, 0], [_, "de", 55, D, j, 0], [1, "de", 55, 19, Ik, 0], [1, "de", 55, Wi, Vq, Gk], [1, "de", 55, Xa, J, 0], [1, "de", 55, 19, 8, Aa], [1, "de", 55, 84, 35, Aa], [1, "de", 55, 84, 32, An], [er, "de", 55, 84, 25, 0], [_, "de", 50, 84, 24, 0], [1, "de", 55, 84, Vk, Aa], [1, "de", 55, 84, ae, Fj], [Ga, "de", 55, 84, Ar, An], [1, "de", 50, 84, ua, Fj], [1, "de", 55, 84, Nk, xq], [Co, "de", 55, 84, eo, An], [1, "de", 50, 85, V, An], [1, "de", 55, 81, 39, 0], [Ga, "de", 50, 83, 40, tj], [Ni, "de", 55, 72, 39, 0], [Ga, "de", 55, 74, 39, Qr], [ck, "de", 55, 66, 39, yj], [1, "de", 55, 65, 39, yj], [1, "de", 50, 67, 41, tj], [1, "de", 55, 56, 39, An], [1, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, xq], [1, "de", 50, 49, 39, tj], [1, "de", 55, 44, 39, An], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, Aa], [er, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, yj], [Co, "de", 55, 36, 39, Fj], [1, "de", 55, 32, 39, Fj], [1, "de", 50, 31, 39, 0], [1, "de", 55, 23, 39, 0], [1, "de", 55, zj, 37, 0], [Ek, "de", 50, aa, 36, tj], [Ni, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, xq], [1, "de", 55, 18, 31, 0], [Co, "de", 50, po, 30, 0], [_, "de", 55, Mr, 25, 0], [Ni, "de", 50, po, 24, Gk], [Ek, "de", 55, L, ek, 0], [1, "de", 55, Dk, 14, yj], [er, "de", 50, zj, 15, 0], [er, "de", 55, 18, 8, tj], [1, "de", 54, 90, 154, 0], [Co, "de", 51, 89, 154, xq], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [_, "de", 54, 76, 154, yj], [_, "de", 54, 70, 154, 0], [Co, "de", 54, 66, 154, 0], [Ga, "de", 54, 61, 154, xq], [1, "de", 54, 56, 154, Qr], [_, "de", 54, 53, 154, Qr], [ck, "de", 54, 45, 154, 0], [Ga, "de", 54, 42, 154, Aa], [er, "de", 54, 37, 154, Gk], [1, "de", 54, 30, 154, Aa], [1, "de", 54, 25, 154, Gk], [_, "de", 54, 17, 154, Fj], [ck, "de", 54, iq, 154, 0], [ck, "de", 54, 8, 154, 0], [1, "de", 55, 20, Ba, 0], [1, "de", 53, 93, 154, 0], [1, "de", 53, 93, 156, 0], [Ni, "de", 53, 93, 158, 0], [_, "de", 52, 91, 157, xq], [Ni, "de", 53, 93, 159, 0], [1, "de", 53, 93, 161, Aa], [1, "de", 53, 93, 162, 0], [1, "de", 53, 93, 163, 0], [Co, "de", 53, 93, 164, An], [Ek, "de", 53, 93, 165, 0], [Ek, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, Aa], [er, "de", 52, 91, 167, 0], [Ni, "de", 53, 93, 169, 0], [1, "de", 53, 93, 168, 0], [Co, "de", 53, 93, 170, 0], [Co, "de", 53, 93, 171, Qr], [Ek, "de", 53, 93, 173, 0], [Ga, "de", 53, 93, 176, Qr], [1, "de", 53, 93, 175, Gk], [1, "de", 53, 92, 169, xq], [1, "de", 53, 93, 178, An], [Ga, "de", 53, 93, 179, tj], [Ga, "de", 53, 93, 180, yj], [1, "de", 53, 93, 181, 0], [_, "de", 53, 93, 183, Qr], [Co, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, 0], [Ek, "de", Dk, 95, 185, yj], [1, "de", 53, 93, 187, xq], [er, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, xq], [1, "de", 53, 93, 192, yj], [Ga, "de", 53, 93, 195, Qr], [1, "de", 53, 93, 194, 0], [Ga, "de", 52, 91, 196, 0], [Ni, "de", 53, 93, 197, yj], [1, "de", 53, 93, 200, Qr], [1, "de", 53, 93, 198, An], [ck, "de", 53, 93, 201, Gk], [Ni, "de", 53, 93, 202, 0], [1, "de", 53, 93, 203, Qr], [1, "de", 53, 93, 204, 0], [1, "de", 53, 93, 206, xq], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, Qr], [Ek, "de", 53, 93, 209, tj], [1, "de", 53, 93, 210, xq], [1, "de", 53, 93, 212, tj], [_, "de", 52, 91, 204, Fj], [1, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, Fj], [1, "de", 53, 93, 215, Qr], [1, "de", 53, 93, 216, Qr], [Ek, "de", 53, 93, 217, An], [1, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, xq], [1, "de", 53, 93, 220, 0], [er, "de", 52, 92, 213, Qr], [1, "de", 52, 92, 206, 0], [Co, "de", 52, 92, 202, Qr], [Ek, "de", 53, 92, 201, 0], [Ek, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, yj], [_, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [ck, "de", 53, 93, 223, 0], [Ga, "de", 53, 93, 225, 0], [Ga, "de", 53, 93, 228, 0], [ck, "de", 53, 93, 227, 0], [Co, "de", 52, 92, 217, Fj], [1, "de", 53, 92, 218, 0], [Co, "de", 52, 92, 221, 0], [Co, "de", 52, 92, 225, xq], [Ga, "de", 52, 93, 226, 0], [Ni, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, 0], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, tj], [ck, "de", 52, 93, 199, 0], [Ga, "de", 52, 93, 189, Qr], [1, "de", 52, 93, 191, An], [Ga, "de", 52, 93, 193, xq], [Ni, "de", 52, 93, 182, 0], [er, "de", 52, 93, 185, 0], [1, "de", 52, 93, 172, Gk], [1, "de", 52, 93, 174, 0], [_, "de", 52, 93, 177, Fj], [1, "de", 52, 93, 155, Qr], [Co, "de", 52, 93, 157, Qr], [1, "de", 52, 93, 160, 0], [Ni, "de", 52, 92, 162, tj], [Ga, "de", 53, 93, 229, Gk], [ck, "de", 53, 93, 231, 0], [1, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, 0], [1, "de", 52, 93, 230, 0], [Ni, "de", 52, 92, 228, Qr], [Ek, "de", 53, 93, 235, yj], [1, "de", 53, 93, 236, Fj], [1, "de", 53, 93, 237, 0], [ck, "de", 53, 93, 239, 0], [Ga, "de", 53, 93, 240, yj], [_, "de", 52, 93, 238, An], [1, "de", 53, 93, 241, tj], [ck, "de", 52, 93, 242, 0], [Co, "de", 52, 93, 243, An], [Ek, "de", 53, 93, 244, yj], [Ga, "de", 53, 93, 246, tj], [1, "de", 53, 93, 245, tj], [er, "de", 52, 93, 247, An], [1, "de", 53, 93, 248, Aa], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [Ni, "de", 52, 93, 249, 0], [_, "de", 53, 93, 250, 0], [Co, "de", 53, 93, 251, An], [1, "de", 53, 93, 252, Fj], [Ni, "de", 53, 93, 254, Fj], [Ga, "de", 52, 93, 253, 0], [1, "de", 52, 93, 255, yj], [er, "de", 53, 93, 257, xq], [Ni, "de", 53, 93, Hq, tj], [1, "de", 52, 93, 258, Gk], [Co, "de", 53, 93, 259, yj], [1, "de", 52, 93, 260, 0], [Ek, "de", 53, 93, 263, xq], [ck, "de", 53, 93, 264, Qr], [1, "de", 53, 93, 265, 0], [Ek, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, An], [Co, "de", 52, 93, 268, Aa], [1, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, An], [_, "de", 52, 93, 278, xq], [Ni, "de", 53, 93, 279, tj], [er, "de", 52, 93, 280, An], [er, "de", 52, 93, 283, yj], [Ga, "de", 53, 93, 284, 0], [ck, "de", 53, 93, 285, Aa], [1, "de", 53, 93, 286, xq], [1, "de", 52, 93, 287, Qr], [1, "de", 53, 93, 288, Qr], [1, "de", 53, 93, 289, yj], [Co, "de", 52, 93, 290, 0], [er, "de", 52, 93, 291, 0], [er, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, Qr], [1, "de", 53, 93, 294, tj], [1, "de", 52, 93, 295, Gk], [1, "de", 52, 93, 296, Fj], [er, "de", 53, 93, 297, 0], [er, "de", 53, 93, 298, yj], [ck, "de", 52, 93, 299, 0], [Ek, "de", 53, 93, 300, Qr], [Co, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [Co, "r", 92, 262, 0], [1, "r", 93, 262, 0], [Co, "de", 52, 93, 261, Qr], [1, "cs", 0, 223, 104, ck], [Co, "cs", ta, 223, 105, 1], [1, "cs", qo, 223, 102, 1], [1, "cs", X, 223, 103, _], [_, "la", Z, 141, 8, Co], [_, "cs", tk, 140, 9, Ga], [er, "la", 4, 142, Xq, Ga], [er, "de", aq, 81, 149, Qr], [Ga, "f", Gk, 83, 148, 1], [Ni, "f", _, 82, 149, 1], [Co, "de", 34, 81, 156, xq], [Co, "de", 51, ji, eo, 0], [Ni, "de", 54, 16, eo, tj], [1, "de", 54, 15, 9, 0], [1, "cs", Qn, 223, 106, _], [Ni, "p", An, 119, 279, 1], [1, "p", An, 109, 242, 1], [1, "cs", 1, 29, 9, 1], [Ni, "cs", 2, 30, Ba, 1], [1, "cs", On, 31, Hr, Ni], [Ni, "cs", bq, 32, se, Ga], [1, "cs", 2, 33, 9, 1], [1, "cs", tk, 69, 9, 1], [ck, "cs", tk, 71, eo, 1], [_, "cs", 2, 70, 9, 1], [Ni, "cs", ck, 72, se, _], [er, "cs", tk, 73, 9, 1], [er, "de", 10, 31, 10, 0], [er, "de", F, 29, 10, Qr], [1, "de", 10, 44, F, 0], [1, "de", Oa, 87, 10, 0], [1, "de", $j, 86, 10, Fj], [Ni, "de", 5, 87, 9, Gk], [Co, "de", ie, 13, 10, yj], [Ek, "de", 4, Wn, Ik, 0], [1, "de", $j, Ar, 10, 0], [Co, "de", 4, ji, 10, 0], [1, "cs", tk, 146, zo, 1], [Ga, "cs", qi, 148, 9, ck], [1, "cs", Nr, 150, 9, 1], [Ga, "cs", ta, 153, 9, Ga], [Ek, "cs", 2, 155, Ba, ck], [1, "cs", 1, 149, Xq, Ek], [Ni, "cs", Ni, 154, zk, 1], [1, "cs", Qn, 147, 9, 1], [Co, "cs", Hn, 151, 9, er], [Ga, "cs", Er, 152, Ba, Ga], [1, "cs", 3, 156, Hr, ck], [er, "cs", 3, 157, 9, 1], [1, "cs", nk, 158, 9, Ni], [ck, "cs", wi, 159, 9, Ek], [_, "cs", Qn, 160, gn, Ni], [Ga, "cs", 0, 161, 9, er], [1, "cs", Nr, 162, 9, 1], [1, "cs", 2, 163, se, 1], [1, "cs", 1, 164, Pj, 1], [Co, "cs", qi, 165, J, er], [_, "cs", 3, 166, Xq, er], [Ek, "cs", Rn, 168, Hr, Co], [er, "cs", Rn, 170, Xq, Ga], [ck, "cs", 1, 169, 9, er], [1, "cs", 2, 167, Hr, Ni], [1, "cs", 2, 171, eo, er], [1, "cs", 2, 173, gn, 1], [ck, "cs", 2, 172, Hr, ck], [1, "cs", tk, 174, 9, 1], [Ni, "cs", 1, 175, Xq, Ni], [Co, "cs", nk, 176, 9, 1], [ck, "cs", 3, 178, J, 1], [1, "cs", Er, 179, Ba, Co], [ck, "cs", 0, 180, Hr, Ni], [Ga, "cs", 2, 177, 9, Ek], [Co, "cs", Nj, 182, 9, ck], [1, "cs", bq, 181, 9, Ek], [Ga, "cs", 2, 183, 9, 1], [1, "cs", X, 184, se, 1], [Ni, "cs", 2, 185, zk, 1], [Co, "cs", bq, 186, 9, 1], [er, "cs", 1, 187, 9, er], [ck, "cs", bq, 188, 9, Ga], [_, "cs", 3, 189, 9, Ek], [er, "cs", Er, 190, se, 1], [Ni, "cs", 3, 191, J, 1], [1, "cs", 2, 192, 9, Co], [1, "cs", 0, 193, 9, Co], [ck, "cs", Nr, 194, Hr, 1], [Co, "cs", 2, 196, J, Ga], [1, "cs", 2, 198, 9, 1], [Ek, "cs", Nj, 200, zk, Ga], [_, "cs", 3, 195, se, 1], [ck, "cs", 3, 197, 9, 1], [1, "cs", Hn, 199, Hr, Ga], [_, "cs", Aa, 201, 9, Ek], [er, "cs", 2, 202, 9, 1], [Ga, "cs", X, 203, Pj, 1], [ck, "cs", 3, 208, gn, ck], [Ek, "cs", Z, 207, 9, 1], [1, "cs", Er, 206, Hr, ck], [1, "cs", 3, 205, zo, 1], [ck, "cs", 3, 204, 9, Ek], [1, "cs", 3, 214, 9, 1], [_, "cs", nk, 215, 9, Ek], [Co, "cs", 3, 216, 9, _], [1, "cs", 3, 217, 9, 1], [Ga, "cs", Lq, 218, Xq, er], [1, "b", 0, 5, 159, 0], [1, "b", tj, Ij, 171, 0], [qi, "isl", Ek, 122, 63, 0], [2, "isl", 2, 119, 277, Aa], [2, "isl", br, 109, 244, An], [2, "isl", 2, 114, 205, Aa], [Nj, "isl", 1, 120, 150, xq], [qi, "isl", 2, 154, 129, 0], [qi, "isl", 0, 184, 158, 0], [2, "isl", ck, 208, 128, yj], [bq, "isl", 1, 215, 132, Qr], [2, "isl", Co, 214, 128, 0], [2, "isl", ck, 209, 132, Gk], [Co, "la", Z, 217, Pn, er], [1, "la", 1, 215, 19, er], [1, "la", xq, 212, Dk, 1], [ck, "la", 4, 214, zj, Ek], [_, "la", hr, 216, Po, 1], [_, "la", 4, 211, 20, ck], [er, "la", Qn, 210, D, ck], [er, "la", 3, 215, 21, 1], [er, "la", 1, 214, 20, Ni], [1, "la", 3, 214, 22, 1], [Ek, "la", 3, 214, 24, Ni], [ck, "la", co, 214, 26, Co], [Co, "la", 4, 213, 27, Co], [1, "la", 1, 212, 28, ck], [Ga, "la", On, 212, 29, _], [er, "la", zr, 212, 30, 1], [1, "la", co, 208, 19, Ga], [1, "la", 4, 207, Po, 1], [Co, "la", er, 206, 19, Co], [1, "la", 1, 205, Wi, 1], [1, "la", 2, 204, D, er], [1, "la", 5, 203, 19, _], [1, "la", nk, 210, Tk, Co]];
  const Xr = Ja;
  const $r = gn;
  function _r(b, c, d, e, f, g) {
    const i = ~(e & 58868) & (e | 58868);
    const a = (f + 40256) % 65352;
    const j = (g + 15703) % 65462;
    return (12345 + (59789 + (Yw((1 + (b + 32250) * 22695477) % 4294967296, (Kn << (c >> 24 & 255)) + (0 << (c >> 8 & 255)) + (24 << (c & 255)) + (16 << (c >> 16 & Qk)), (2531011 + (d + 40078) * 214013) % 4294967296) ^ function (b, c, d) {
      const e = ((b + 38994) * 214013 + 2531011) % 4294967296;
      const f = (24 << (c >> 16 & 255)) + (16 << (c >> 24 & 255)) + (0 << (c >> 8 & 255)) + (8 << (c & 255));
      const g = ~(d & 62262) & d | ~(d & 62262) & 62262;
      const h = hf(e, f);
      sf(g, e, f, g, e, f);
      return ~(h & 35684) & h | ~(h & 35684) & 35684;
    }(i, a, j))) * 1103515245) % 2147483648;
  }
  const as = Br;
  const bs = Co;
  function cs(b, c, d, e, f) {
    const g = ~(b & 21208) & b | ~(b & 21208) & 21208;
    const i = ((27137 + c) * 214013 + 2531011) % 4294967296;
    const a = (8 << (e >> 24 & 255)) + (24 << (e & 255)) + (0 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
    const j = f ^ 23586;
    const h = function (b, c, d) {
      const e = (24 << (b >> 8 & 255)) + (0 << (b >> Ah & 255)) + (16 << (b >> 24 & 255)) + (8 << (b >> 16 & 255));
      const f = (0 << (c >> 24 & 255)) + (16 << (c >> 16 & 255)) + (8 << (c >> 8 & 255)) + (24 << (c & 255));
      const g = (24 << (d >> Da & 255)) + (8 << (d >> 16 & 255)) + (16 << (d & 255)) + (0 << (d >> 24 & 255));
      const h = Pw(e, f);
      const a = dt(g, e, f, g, e);
      return (2531011 + (47223 + (h ^ a)) * 214013) % 4294967296;
    }(g, i, ~(d & 48781) & (d | 48781));
    ct(a, j, g, i);
    return ~(h & 13054) & h | ~(h & 13054) & 13054;
  }
  const ds = M;
  const es = Cr;
  function fs(a, b, c) {
    Oj(yw, a, b, c);
    const d = eq(xw[0], xw[Ek], xw[Nr]);
    const e = Ww(xw[Qr], xw[1], xw[Nr]);
    return (24 << ((d ^ e) >> 8 & fk)) + (8 << ((d ^ e) >> 24 & 255)) + (16 << ((d ^ e) >> 16 & 255)) + (0 << ((d ^ e) & Un));
  }
  const gs = Ij;
  const hs = ji;
  function is(b, c, d, e) {
    const f = ~(b & 46763) & (b | 46763);
    const g = ~(c & 11277) & (c | 11277);
    const h = (1 + (d + 54462) * 22695477) % 4294967296;
    const a = e ^ 30764;
    return (2531011 + (4782 + (cf(f, g, h, a, f, g) ^ Yw(h, a, f))) * 214013) % 4294967296;
  }
  const ms = $a;
  function ks(b, c, d, e, f) {
    const i = (b | 38495) & ~(b & 38495);
    const j = c ^ 64987;
    const a = (1013904223 + (d + 18384) * 1664525) % 4294967296;
    const k = ~(e & 11744) & e | ~(e & 11744) & 11744;
    const h = (0 << (f >> 8 & Qa)) + (24 << (f >> 24 & 255)) + (8 << (f & 255)) + (16 << (f >> Qe & 255));
    const l = function (b, c, d, e, f, i) {
      const j = ((60799 + b) * 1103515245 + 12345) % 2147483648;
      const a = ~(f & 3478) & f | ~(f & 3478) & 3478;
      const k = ((i + 64379) * 1103515245 + 12345) % 2147483648;
      const h = function (b, c, d, e) {
        const f = ((b + 35581) * 1664525 + 1013904223) % 4294967296;
        const g = ~(c & 52768) & (c | 52768);
        const i = (d | 2691) & ~(d & 2691);
        const a = e ^ 14468;
        const j = af(f, g, i, a, f, g);
        gf(i, a, f, g, i);
        return (j | 12260) & ~(j & 12260);
      }(j, (Yh << (c >> 24 & 255)) + (24 << (c >> 8 & 255)) + (0 << (c >> 16 & 255)) + (8 << (c & 255)), ((d + 58950) * 22695477 + _h) % 4294967296, (2531011 + (41342 + e) * 214013) % 4294967296);
      const l = vf(a, k, j);
      return (1013904223 + (46405 + (h ^ l)) * 1664525) % 4294967296;
    }(i, j, a, k, h, i);
    const g = Tr(j, a, k, h, i);
    return (24 << ((l ^ g) & 255)) + (8 << ((l ^ g) >> Zk & 255)) + (0 << ((l ^ g) >> 24 & 255)) + (Ar << ((l ^ g) >> 8 & 255));
  }
  function ns(a) {
    return function (b, c, d, e) {
      const f = (d | 21833) & ~(d & 21833);
      const g = (49561 + e) % 65353;
      const h = function (a, b) {
        const c = ~(a & 7728) & (a | 7728);
        const d = ~(b & 34138) & (b | 34138);
        const e = function (b, c, d) {
          const e = ~(b & 11230) & (b | 11230);
          const f = ~(c & 20212) & c | ~(c & 20212) & 20212;
          const g = (d | 15661) & ~(d & 15661);
          const h = dq(e, f, g);
          const a = function (b, c, d, e) {
            const f = (2147483587 + (7359 + b) * 2147483629) % 2147483647;
            const g = (ch << (c >> 24 & 255)) + (8 << (c >> 16 & 255)) + (0 << (c >> 8 & 255)) + (24 << (c & Ta));
            const i = (2531011 + (62695 + d) * 214013) % 4294967296;
            const a = (24 << (e >> 16 & 255)) + (16 << (e & 255)) + (0 << (e >> 24 & Uh)) + (8 << (e >> 8 & 255));
            const j = af(f, g, i, a, f, g);
            const h = function (b, c, d, e, f) {
              const i = (b + 57068) % 65404;
              const j = (c + 7793) % 65359;
              const a = d ^ 14419;
              const k = (12345 + (e + 23721) * 1103515245) % 2147483648;
              const h = f ^ 51717;
              const l = sf(i, j, a, k, h, i);
              const g = ks(j, a, k, h, i);
              return (12345 + (9191 + (l ^ g)) * 1103515245) % 2147483648;
            }(i, a, f, g, i);
            return ((27026 + (j ^ h)) * 1664525 + 1013904223) % 4294967296;
          }(e, f, g, e);
          return (33002 + (h ^ a)) % 65512;
        }(c, d, c);
        af(d, c, d, c, d, c);
        return ~(e & 20701) & (e | 20701);
      }((24 << (b & 255)) + (8 << (b >> 24 & 255)) + (16 << (b >> 16 & 255)) + (tj << (b >> 8 & 255)), (c | 14138) & ~(c & 14138));
      const a = hf(f, g);
      return (1 + (4043 + (h ^ a)) * 22695477) % 4294967296;
    }(a, 40240, 56627, 446);
  }
  const os = Ta;
  var ps = Fj;
  var rs = {
    Ⲇᐃⵠⵠᐃ: ["#133A2B", "#042b30"],
    ΔⲆⵠᐃΔⲆᐃⲆᐃ: ["#EBF2F0", "#136167"],
    ⲆᐃⵠΔΔⵠⲆ: ["#4EB687", "#187484"],
    ᐃⲆⲆᐃΔᐃᐃ: ["#664516", "#13474C"],
    ᐃⲆⵠᐃⵠᐃⲆ: ["#FCEFBB", "#0F4D48"],
    Δᐃⵠᐃⵠⵠᐃ: ["#C1AA7E", "#0F423D"],
    ΔⵠΔⲆΔⵠᐃ: ["#594837", "#163A3A"],
    ⵠᐃⲆΔᐃΔⵠ: ["#A5D6D6", "#539CA0"],
    ΔⵠΔᐃⵠ: ["#0B6A84", "#09373F"],
    ᐃΔΔᐃⲆᐃⲆ: ["#2A8B9B", "#0F464C"],
    ⵠΔΔᐃΔᐃⵠ: ["#A9D6D3", "#115E60"],
    ΔᐃⲆⲆᐃⵠⲆ: ["#ECF7F9", "#539CA0"],
    ᐃⵠᐃⲆⵠⵠⲆ: ["#FFF", "#FFF"],
    ⵠΔΔⵠⲆΔⵠ: ["#FFF", "#FFF"],
    ᐃΔΔⵠⵠⲆⵠ: ["#1C9BA4", "#00272F"],
    ΔⵠⲆⲆⵠ: ["#2D2017", "#031C1E"],
    ⲆᐃΔ: Gk,
    ⵠⵠⵠ: 1,
    ᐃⵠⵠΔΔᐃⵠΔᐃ: 2300,
    ⲆΔⵠᐃᐃᐃΔⵠⲆ: 2290,
    ⲆⲆⲆᐃᐃⲆᐃ: 34,
    ⵠⲆᐃⲆᐃΔⵠ: 5,
    ⵠΔⲆⵠΔⲆⵠ: 68,
    ΔⵠΔΔⵠΔⲆ: 34,
    ΔᐃⲆΔᐃᐃⲆ: gs,
    ⲆᐃⲆⵠⲆⵠᐃ: 1,
    ⵠΔᐃΔⲆⲆⵠ: 0.6,
    ᐃᐃΔⲆᐃⵠᐃ: 0.25,
    ⵠΔᐃⵠᐃⲆΔ: 50,
    ⲆⲆΔᐃᐃᐃⲆ: 10,
    ΔⵠᐃⲆᐃᐃᐃ: 75,
    ⲆΔΔΔᐃⵠᐃ: 20,
    ᐃᐃΔⵠᐃΔⲆ: ie,
    ᐃΔⲆᐃⵠ: 0,
    ᐃᐃⲆⲆⵠ: 1,
    ⲆⲆⲆᐃᐃ: 2,
    ᐃⲆᐃΔΔ: 3,
    Ⲇᐃᐃⵠᐃ: 4,
    ᐃⵠᐃⲆΔ: 5,
    ⵠᐃⵠⵠΔ: 6,
    ᐃⵠⲆⲆΔ: 7,
    ⲆⲆⲆΔΔ: 8,
    ⲆⲆᐃⵠⲆ: 9,
    ΔⵠᐃΔⲆ: 10,
    ᐃᐃᐃⵠΔ: 11,
    ⵠᐃΔⵠⵠ: 12,
    ⲆⲆⵠⲆⵠ: 13,
    ᐃΔⵠΔⲆ: 14,
    ΔⲆⲆⲆⲆ: 15,
    ⵠⲆΔΔΔ: 16,
    ᐃᐃΔⵠΔ: 17,
    ΔⲆⵠᐃᐃ: 18,
    ⵠⵠΔΔⲆ: 19,
    ᐃᐃⲆΔᐃ: 20,
    ⲆⵠⲆⲆⲆ: 21,
    ΔΔΔΔΔ: 22,
    Ⲇᐃⵠᐃᐃ: 23,
    ⵠⲆΔᐃᐃ: 24,
    ⵠᐃⵠᐃᐃ: 25,
    ᐃⵠΔⲆΔ: 26,
    ΔⵠᐃⲆᐃ: 27,
    ΔⵠᐃⲆⲆ: 28,
    ⵠⲆᐃⲆ: 29,
    ᐃΔᐃⵠΔ: 30,
    ⵠⵠⲆᐃᐃ: 31,
    ⵠⲆⵠΔⲆ: 32,
    ⵠᐃᐃⵠΔ: 33,
    ⵠΔⲆⲆᐃ: 34,
    ΔⵠⲆⵠⵠ: 35,
    ΔⵠᐃᐃⲆ: 36,
    ⵠⲆᐃⲆΔ: 37,
    ΔΔⲆᐃⵠ: 38,
    ΔΔΔᐃᐃ: 39,
    ⲆᐃᐃΔⵠ: 40,
    ΔᐃⲆᐃᐃ: 41,
    ⲆⲆⲆⲆⲆ: 42,
    ᐃⵠⲆⵠᐃ: 43,
    ᐃⵠⲆⲆⵠ: 44,
    ⵠⲆⲆΔⵠ: 45,
    ΔΔⲆᐃΔ: 46,
    ᐃⲆΔⵠᐃ: 47,
    ⲆΔΔⲆⲆ: 48,
    ⵠⲆΔᐃΔ: 49,
    ᐃΔΔⲆⲆ: 50,
    ᐃΔⵠΔΔ: 51,
    ⵠⵠⲆⵠⲆ: 52,
    ⲆⲆᐃΔΔ: 53,
    ⵠᐃΔᐃⲆ: 54,
    ΔⲆⲆᐃΔ: 55,
    ᐃᐃᐃᐃᐃ: 56,
    ⵠᐃⵠⲆᐃ: 57,
    ᐃⲆΔⵠⵠ: 58,
    ΔⵠᐃᐃΔ: 59,
    ⲆᐃⵠⲆᐃ: 60,
    ᐃⵠΔᐃⵠ: 61,
    ᐃᐃᐃᐃⲆ: 62,
    ⵠΔⵠⲆᐃ: 63,
    ᐃᐃⲆⲆⲆ: 64,
    ⲆⵠΔⲆᐃ: 65,
    ⵠΔᐃⲆⲆ: 66,
    ⲆⲆᐃᐃᐃ: 67,
    ᐃⲆⵠΔΔ: 68,
    ᐃⵠΔⵠⲆ: 69,
    ⲆΔⵠⲆᐃ: 70,
    Δᐃⵠⵠⵠ: 71,
    ΔⵠᐃⵠΔ: 72,
    ᐃᐃⲆⵠⵠ: 73,
    ⲆΔᐃⵠΔ: 74,
    ΔΔΔⵠⵠ: 75,
    ᐃⵠⵠⲆᐃ: 76,
    ⵠⵠᐃⵠⲆ: 77,
    ⵠⲆⲆᐃⲆ: 78,
    ⲆⲆᐃΔᐃ: 79,
    ΔᐃⲆⵠΔ: 80,
    ⵠⲆᐃΔΔ: 81,
    ΔΔⲆΔᐃ: 82,
    ⵠᐃΔⵠΔ: 83,
    ⲆⵠⵠΔⲆ: 84,
    ᐃΔⲆⵠᐃ: 85,
    ΔᐃᐃΔⲆ: 86,
    ΔᐃΔⵠΔ: 87,
    ᐃΔⵠⲆⲆ: 88,
    ⲆⵠᐃᐃΔ: 89,
    ΔΔⵠᐃᐃ: 90,
    ⲆⲆΔⲆᐃ: 91,
    ᐃΔⵠⵠᐃ: 92,
    ⵠΔΔΔⵠ: 93,
    ⲆⲆⵠᐃΔ: 94,
    ᐃΔᐃⲆⲆ: 95,
    ᐃᐃᐃΔⵠ: 96,
    ⲆⵠⵠᐃΔ: 97,
    ᐃⲆⵠΔᐃ: 98,
    ᐃⵠΔⲆᐃ: 99,
    ⵠᐃᐃⵠΔΔⵠᐃⵠ: 100,
    ⲆΔᐃΔᐃ: 101,
    ΔⲆⲆᐃᐃ: 102,
    ᐃⲆⲆΔⵠ: 103,
    ⲆⲆᐃᐃΔ: 104,
    ⲆⵠᐃΔᐃ: 105,
    ᐃⵠⵠᐃᐃ: 106,
    ⲆⵠⲆⲆⵠ: 107,
    ᐃΔᐃΔᐃ: 108,
    ⲆᐃⲆⲆ: 109,
    ⲆᐃⲆⵠΔ: 110,
    ⲆΔⲆⵠ: 111,
    ⲆΔΔΔ: 112,
    ΔⲆᐃⵠⲆΔⲆ: 113,
    ΔⲆⵠⲆⲆ: 114,
    ᐃΔⲆⵠⲆⵠⵠ: 115,
    ΔΔⲆΔΔ: 116,
    ⵠΔᐃⲆⵠ: 117,
    ⵠⲆⵠᐃⲆΔΔ: 118,
    ⵠⵠⲆⲆⵠᐃΔ: 119,
    ⵠᐃⵠⲆⲆ: 120,
    ⲆⲆΔΔ: 121,
    ΔΔⲆᐃᐃ: 122,
    ᐃΔⲆΔΔ: 123,
    ⲆⲆⵠⲆⵠΔᐃ: 124,
    ΔΔᐃΔⵠ: 125,
    ⲆΔⲆⲆΔ: 126,
    ⵠᐃᐃⲆᐃ: 127,
    ⲆᐃΔⲆΔ: 128,
    ᐃᐃΔᐃⲆ: 129,
    ⲆΔⲆᐃⲆ: 130,
    ⵠⵠᐃᐃⵠ: 131,
    ⵠⵠᐃⲆⵠ: 132,
    ᐃⵠⲆΔᐃ: 133,
    Δⵠᐃⵠⵠ: 134,
    ᐃⲆᐃⲆⲆ: 135,
    ΔⵠⲆⵠᐃ: 136,
    ⵠⲆΔⲆⲆ: 137,
    ᐃΔΔΔⵠ: 138,
    ⲆΔᐃⲆΔ: 139,
    ⲆΔᐃᐃΔᐃᐃ: 140,
    ΔΔⲆⲆⲆ: 141,
    ᐃⲆΔΔⲆⲆΔ: 142,
    ᐃⲆⵠⵠⵠᐃⵠ: 143,
    ⵠⵠⵠⲆΔⲆⵠ: 144,
    ⲆⵠⵠⲆⵠⵠΔ: 145,
    ⵠⲆⵠⲆΔ: 146,
    ⵠⲆΔⲆᐃ: 147,
    ⲆΔΔᐃᐃ: 148,
    ΔᐃΔⵠⲆ: 149,
    ⵠᐃⲆⲆΔ: 150,
    ⲆⵠⲆⵠᐃ: 151,
    ⵠⵠⲆⲆⲆ: 152,
    ᐃΔΔᐃΔ: 153,
    ΔΔΔⲆΔ: 154,
    ⲆᐃⲆᐃΔ: 155,
    ⵠⲆΔⵠᐃ: 156,
    ΔⵠΔⵠⵠ: 157,
    ᐃⵠᐃᐃᐃ: 158,
    ⵠⲆⵠⲆⲆ: 159,
    ⲆΔⵠΔⵠ: 160,
    ᐃⲆᐃⵠᐃ: 161,
    ᐃⵠⵠⲆⵠ: 162,
    ⵠᐃᐃᐃᐃ: 163,
    ΔᐃΔⵠᐃ: 164,
    ⲆᐃⵠⲆΔ: 165,
    ΔΔⲆⵠⲆⵠᐃ: 166,
    ⵠⲆᐃᐃΔ: 167,
    ΔᐃⲆᐃⵠ: 168,
    ⵠⵠᐃⲆⲆ: 169,
    ⵠΔΔΔᐃ: 170,
    ΔⵠᐃΔΔᐃⵠ: 171,
    ΔΔⲆⲆΔⲆⲆ: 172,
    ⵠᐃᐃⵠᐃⲆⵠ: 173,
    ⵠⲆΔᐃⲆ: 174,
    ⲆⵠΔⲆⲆⲆᐃ: 175,
    ΔⲆⲆⵠΔⲆⲆ: 176,
    ⲆⲆⵠⵠⲆᐃⵠ: 177,
    ᐃⵠΔⲆⲆΔᐃ: 178,
    ᐃⵠᐃⵠΔᐃᐃ: 179,
    ⲆΔΔᐃⲆⵠΔ: 180,
    ΔᐃⵠᐃᐃᐃⲆ: 181,
    ᐃⵠⲆⵠΔⵠⲆ: 182,
    ⲆΔⲆⵠⵠ: 183,
    ᐃᐃᐃᐃⵠ: 184,
    ⲆⵠᐃⲆᐃ: 185,
    ᐃΔⵠᐃⵠ: 186,
    ᐃⵠᐃᐃⲆ: 187,
    ᐃᐃᐃⲆⵠⲆΔ: 188,
    ⵠΔⲆΔΔ: 189,
    ΔΔᐃΔⲆ: 190,
    ⲆΔᐃᐃΔΔΔ: 191,
    ⲆᐃⵠΔΔ: 192,
    ⲆΔⲆᐃΔΔᐃ: 193,
    ⵠᐃⵠᐃⵠ: 194,
    ⵠⲆⵠΔᐃ: 195,
    ΔΔⵠΔΔⵠΔ: 196,
    ⲆᐃΔΔⵠⲆⲆ: 197,
    ⵠᐃᐃⲆΔ: 198,
    ⵠΔⵠⲆΔ: 199,
    ⲆᐃᐃⲆⲆᐃⵠ: 200,
    ⲆⲆᐃᐃⵠ: 201,
    ⵠⲆⵠⵠ: 202,
    ᐃⲆᐃⵠⵠ: 203,
    ᐃⵠᐃⵠᐃⵠᐃ: 204,
    ᐃⵠᐃⲆⲆ: 205,
    ΔΔΔΔⲆⵠΔ: 206,
    Δⵠᐃⵠᐃ: 207,
    ᐃΔⲆⲆⵠΔΔ: 208,
    ΔΔΔᐃΔ: 209,
    ᐃⵠⵠⵠΔΔΔ: 210,
    ⲆⲆᐃⲆⲆⲆᐃ: 211,
    ΔΔⵠᐃⵠ: 212,
    ᐃᐃⲆᐃⲆ: 213,
    ᐃⲆⵠⲆⲆ: 214,
    ⲆᐃΔᐃⵠ: 215,
    ⲆⲆΔᐃⵠ: 216,
    ⲆⲆⲆᐃΔ: 217,
    ΔΔⲆⵠᐃ: 218,
    ⲆΔΔⵠⲆ: 219,
    ᐃΔⲆⲆⵠ: 220,
    ⵠᐃⲆᐃⲆ: 221,
    ⵠⵠⵠⲆⵠ: 222,
    ᐃⵠⲆΔⵠ: 223,
    ᐃΔΔⲆΔ: 224,
    ⵠΔⵠⲆΔΔΔ: 225,
    ⲆᐃⵠⵠⵠᐃⲆ: 226,
    ΔⲆᐃΔΔ: 227,
    ᐃᐃⲆΔᐃⲆⵠ: 228,
    ΔⵠⲆᐃΔ: 229,
    ΔᐃᐃⲆⵠ: 230,
    ⵠᐃᐃΔΔ: 231,
    ΔⲆᐃⲆᐃ: 232,
    ⲆᐃⲆⵠᐃ: 233,
    ⵠⵠⲆⲆⵠⵠⵠ: 234,
    ⵠⲆΔΔⵠ: 235,
    ᐃΔⲆⵠⲆ: 236,
    ᐃΔΔⵠⵠ: 237,
    Ⲇⵠⵠᐃᐃ: 238,
    ⵠᐃⲆΔΔ: 239,
    ⵠᐃⵠΔⵠ: 240,
    ΔⲆΔⲆⵠ: 241,
    Δᐃᐃᐃⵠ: 242,
    ΔⲆΔᐃΔΔᐃ: 243,
    ⲆⲆΔΔΔ: 244,
    ⵠΔᐃⵠⲆ: 245,
    ᐃΔΔΔⲆⲆⵠ: 246,
    ᐃⲆⵠᐃⵠ: 247,
    ᐃⲆᐃᐃⲆ: 248,
    ΔⲆΔΔⵠⵠᐃ: 249,
    ΔΔⵠⲆⲆ: 250,
    ᐃⵠⵠⵠⵠ: 251,
    ᐃⲆⲆⲆⲆᐃᐃ: 252,
    ΔⲆⲆⵠΔΔⵠ: 253,
    ᐃⵠⲆᐃⲆⵠⲆ: 254,
    ⲆᐃΔⵠΔᐃⵠ: 255,
    ᐃΔΔⵠΔⵠΔ: 256,
    ΔΔΔⵠᐃΔΔ: 257,
    ᐃᐃⲆⲆⵠⵠⲆ: 258,
    ⵠⲆⲆΔⵠⲆΔ: 259,
    ᐃⲆᐃᐃᐃ: 260,
    ⲆⲆΔΔⵠΔⲆ: 261,
    ⵠᐃⲆⵠΔᐃΔ: 262,
    ⵠΔᐃᐃⲆΔⵠ: 263,
    ΔᐃΔⲆⵠ: 264,
    ⵠᐃⲆⲆᐃⲆⲆ: 265,
    ΔΔΔᐃⵠΔⲆ: 266,
    ⲆΔⵠᐃⲆᐃᐃ: 267,
    ⲆΔᐃⵠΔΔΔ: 268,
    ⵠⲆⲆᐃΔⲆⵠ: 269,
    ᐃⵠⲆⵠⵠⵠᐃ: 270,
    ΔᐃⵠᐃΔΔⵠ: 271,
    ᐃΔⲆᐃᐃᐃⲆ: 272,
    ⲆⲆΔⵠⵠⵠᐃ: 273,
    ⵠⲆᐃᐃⲆⲆⲆ: 274,
    ⲆⲆΔᐃⲆᐃⲆ: 275,
    ᐃⵠΔᐃⲆⲆΔ: 276,
    ᐃΔᐃⲆⲆΔⵠ: 277,
    ⲆⲆΔΔⵠᐃᐃ: 278,
    ᐃᐃⲆⲆ: 279,
    ΔΔΔⵠᐃ: 280,
    ⲆⵠΔⲆⵠⵠᐃ: 281,
    ᐃΔⲆⲆᐃⵠᐃ: 282,
    ᐃᐃ: 283,
    ΔⵠᐃⲆⵠⲆⲆ: 284,
    ᐃⵠᐃΔⵠ: 285,
    ΔΔⲆⲆⵠ: 286,
    ⲆⵠⲆⵠⵠΔⲆ: 287,
    ⲆⲆᐃΔⵠ: 288,
    ΔΔⵠΔⵠΔⲆ: 289,
    ⲆᐃΔᐃⲆⵠᐃ: 290,
    ΔᐃᐃⵠᐃⲆⲆ: 291,
    ΔΔⲆΔᐃⲆΔ: 292,
    ⲆΔᐃⵠΔⲆᐃ: 293,
    ⲆΔⵠΔᐃ: 294,
    ⲆⲆΔΔⵠΔᐃ: 295,
    ⲆΔΔⵠⲆⵠⲆ: 296,
    ⵠᐃⵠⵠⲆΔⲆ: 297,
    ⲆΔⲆΔΔⲆᐃ: 298,
    ⲆⲆᐃⵠᐃ: 299,
    ⵠΔᐃⲆⵠⲆᐃ: 300,
    ⵠᐃⲆⵠⲆΔΔ: 301,
    ΔⵠΔⲆⵠΔⵠ: 302,
    ᐃΔⵠⲆⲆⵠᐃ: 303,
    ⵠΔⵠᐃⲆⵠⵠ: 304,
    ᐃⵠⲆᐃᐃᐃᐃ: 305,
    ΔᐃᐃᐃΔΔᐃ: 306,
    ⲆΔᐃΔΔ: 307,
    ⲆⵠΔᐃΔⲆΔ: 308,
    ⲆⲆⵠᐃⵠΔᐃ: 309,
    ᐃⲆⲆΔΔΔⵠ: 310,
    ΔΔΔⵠⲆΔⲆ: 311,
    ⵠⲆᐃⵠΔⲆⵠ: 312,
    ᐃⲆᐃⲆΔΔⵠ: 313,
    ⵠᐃᐃⲆᐃΔΔ: 314,
    ⵠᐃΔⲆⲆᐃᐃ: 315,
    ⵠᐃΔⲆⲆⵠⵠ: 316,
    ⵠⲆⲆⵠⵠⲆΔ: 317,
    ΔⲆⲆⲆⵠⲆⵠ: 318,
    ΔⵠⵠᐃΔᐃΔ: 319,
    ΔᐃᐃΔᐃᐃⲆ: 320,
    ᐃᐃΔΔⲆ: 321,
    ⲆΔΔᐃⲆΔΔ: 322,
    ᐃΔΔᐃᐃⲆΔ: 323,
    ⲆᐃⵠⲆΔⵠⲆ: 324,
    ΔⵠⲆⲆΔᐃⵠ: 325,
    ᐃᐃⵠⲆⲆⲆᐃ: 326,
    ⵠΔᐃⲆⲆⵠⲆ: 327,
    ᐃⲆΔᐃᐃⵠⲆ: 328,
    ΔΔᐃΔᐃᐃᐃ: 329,
    ᐃⲆΔⲆⵠᐃⲆ: 330,
    ΔᐃⵠΔⵠⲆⵠ: 331,
    ⵠⲆⲆᐃⵠⲆΔ: 332,
    ⵠΔᐃᐃⵠⲆⵠ: 333,
    ΔⵠᐃⵠⲆΔΔ: 334,
    ⲆⲆΔⲆⵠⲆⵠ: 335,
    ⵠΔⵠⵠΔᐃⲆ: 336,
    ⵠⲆᐃⲆᐃᐃⲆ: 337,
    ⲆᐃΔΔⲆᐃᐃ: 338,
    ⵠⲆΔᐃᐃⵠⲆ: 339,
    ᐃᐃⲆⵠᐃⵠⲆ: 340,
    ΔⲆⵠΔⵠⲆᐃ: 341,
    ⲆⵠΔⵠⲆⵠΔ: 342,
    ᐃΔⲆⵠΔᐃᐃ: 343,
    ᐃᐃΔⲆΔᐃΔ: 344,
    ᐃᐃΔⵠⵠⲆⵠ: 345,
    ⵠᐃΔⵠⲆⵠᐃ: 346,
    ᐃⲆᐃⲆⵠᐃΔⵠⲆ: 347,
    ⲆᐃⲆΔⵠⵠᐃ: 348,
    ⲆᐃΔⲆᐃⲆⲆ: 349,
    ⲆΔΔⲆⵠᐃΔ: 350,
    ⲆⲆᐃⲆᐃⲆᐃ: 351,
    Δⵠᐃⵠᐃⵠⵠ: 352,
    ᐃⲆⵠΔⲆᐃⲆ: 353,
    ᐃΔⵠΔΔᐃⵠ: 354,
    ΔᐃⵠⲆΔⵠᐃ: 355,
    ᐃⲆⵠΔΔⲆΔ: 356,
    ⲆΔⲆᐃⵠᐃⲆ: 357,
    ⵠⲆᐃⵠᐃᐃΔ: 358,
    ⲆᐃᐃᐃⲆⵠⲆ: 359,
    ᐃᐃⲆΔⵠᐃΔ: 360,
    ᐃΔⲆⲆⲆᐃⲆ: 361,
    ⲆᐃⲆΔⲆΔΔ: 362,
    ⵠΔⲆΔᐃᐃᐃ: 363,
    ⲆΔⵠⵠᐃⵠΔ: 364,
    ᐃⲆΔⲆⲆⵠⵠ: 365,
    ⵠⲆᐃⲆᐃⵠᐃ: 366,
    ⲆᐃⵠᐃⲆⵠᐃ: 367,
    ΔΔⵠⲆⲆⵠΔ: 368,
    ΔⲆΔⵠΔᐃΔ: 369,
    ΔᐃⵠΔΔⲆᐃ: 370,
    ᐃⲆΔᐃⲆⵠⵠ: 371,
    ⲆΔΔΔⲆⵠᐃ: 372,
    ⲆᐃⵠⲆΔⵠᐃ: 373,
    ᐃΔⵠⲆⲆΔᐃ: 374,
    ᐃΔⲆΔᐃᐃᐃ: 375,
    ΔᐃΔⵠⲆᐃΔ: 376,
    ᐃΔⵠⲆᐃⵠⲆ: 377,
    ΔⵠᐃΔΔⵠⲆ: 378,
    ΔΔⲆⲆᐃⵠᐃ: 379,
    ⲆⲆᐃᐃⵠᐃᐃ: 380,
    ⲆⵠⵠᐃΔᐃⵠ: 381,
    ⵠⲆᐃᐃⵠΔΔ: 382,
    ᐃᐃΔⵠⵠⲆΔ: 383,
    ᐃⲆᐃΔⵠΔᐃ: 384,
    ⵠⵠΔⵠΔΔⲆ: 385,
    ⲆΔᐃⲆΔⲆᐃ: 386,
    ⲆᐃᐃⵠΔⲆⵠ: 387,
    ⲆᐃⲆⵠᐃⲆⲆ: 388,
    ⵠⲆΔᐃΔⲆⵠ: 389,
    ⵠⵠᐃΔᐃΔⲆ: 390,
    ΔᐃΔⲆⲆⵠⵠ: 391,
    ΔⵠⲆΔᐃΔΔ: 392,
    ΔΔᐃⵠⵠΔⵠ: 393,
    ΔⵠᐃⵠⲆⵠΔ: 394,
    ⲆᐃⲆⲆᐃⵠᐃ: 395,
    ⲆᐃᐃⲆⲆΔⵠ: 396,
    ⵠΔⵠᐃⵠΔⵠ: 397,
    ⵠⲆⲆᐃⲆⵠΔ: 398,
    ΔΔᐃⵠᐃⲆⵠ: 399,
    ΔΔⵠᐃΔⲆⵠ: 400,
    ⲆⲆⲆΔᐃⵠᐃ: 401,
    ᐃⵠⲆⲆⵠⵠⲆ: 402,
    ΔᐃΔⵠΔⵠᐃ: 403,
    ⲆⵠᐃⲆⵠΔⲆ: 404,
    ᐃᐃⲆΔᐃΔⵠ: 405,
    ΔᐃΔΔᐃⵠᐃ: 406,
    ΔⲆᐃⲆⵠⲆⵠ: 407,
    ⲆⲆᐃⲆⲆⵠΔ: 408,
    ᐃⵠⵠᐃⵠΔᐃ: 409,
    ⵠΔΔⵠⵠᐃᐃ: 410,
    ᐃⲆᐃⵠⵠⲆᐃ: 411,
    ΔⲆⲆᐃᐃΔⵠ: 412,
    ⵠⲆᐃⵠᐃ: 413,
    ⵠᐃΔΔΔⵠⲆⲆᐃ: 414,
    ⲆⲆⵠⲆⲆ: 415,
    Δᐃⵠᐃⵠ: 416,
    ⵠⲆⵠⲆᐃⲆⲆⲆⲆ: 417,
    ⵠⲆⲆᐃⲆⲆΔ: 418,
    ⲆᐃᐃΔⲆ: 419,
    ⲆΔΔⵠΔⲆⵠ: 420,
    ⵠⲆΔⵠΔΔⲆ: 421,
    ⲆΔΔⲆΔⲆⲆ: 422,
    ⲆⵠΔⲆᐃⲆⲆ: 423,
    ΔⲆⲆᐃᐃᐃⲆ: 424,
    ⲆᐃⲆᐃᐃⵠΔ: 425,
    ΔⵠΔⵠⲆⵠⵠ: 426,
    ⲆⵠⲆⵠⵠᐃⵠ: 427,
    ⲆⲆᐃᐃⲆᐃᐃ: 428,
    ⵠᐃⵠⲆᐃⵠΔ: 429,
    ⵠΔΔⲆⲆΔⵠ: 430,
    ⵠᐃⲆⵠᐃΔᐃ: 431,
    ⲆⵠΔᐃⵠᐃⲆ: 432,
    ⲆΔⵠΔⲆⵠΔ: 433,
    ᐃᐃΔⵠⲆΔⲆ: 434,
    ⵠΔⵠⲆᐃᐃⵠ: 435,
    ΔⵠⲆᐃⲆⵠⲆ: 436,
    ⲆⵠᐃⵠᐃⵠΔ: 437,
    ΔⲆΔⲆΔⲆᐃ: 438,
    ΔⲆⵠΔΔⲆⵠ: 439,
    ΔΔⵠⲆΔⵠⵠ: 440,
    ΔⵠᐃΔᐃΔⲆ: 441,
    ΔⲆΔᐃⲆⲆⲆ: 442,
    ᐃΔᐃΔΔⵠⲆ: 443,
    ⲆΔᐃⵠⲆⲆΔⲆΔ: 444,
    ΔᐃⲆΔᐃ: 445,
    ΔΔⵠⲆΔⲆΔ: 446,
    ᐃΔᐃᐃΔᐃⲆ: 447,
    ᐃΔᐃᐃΔᐃΔΔΔ: 448,
    ⲆᐃⲆⲆᐃ: 449,
    ᐃⲆᐃᐃⵠ: 450,
    ᐃΔⲆᐃΔⵠⲆ: 451,
    ⵠΔⲆⵠᐃᐃᐃ: 452,
    ᐃΔΔⵠΔᐃⵠ: 453,
    ΔⲆⲆⵠⲆᐃᐃ: 454,
    ᐃⵠⲆⵠⲆⲆΔ: 455,
    ⲆᐃⵠᐃⲆᐃⲆ: 456,
    ⵠΔⵠⲆΔΔᐃ: 457,
    ᐃⵠᐃⲆᐃⵠⲆ: 458,
    ΔⵠᐃΔᐃⲆⵠ: 459,
    ⲆΔΔᐃᐃⲆⵠ: 460,
    ΔⲆΔΔΔᐃΔ: 461,
    ΔᐃᐃⲆⲆΔΔ: 462,
    ᐃⲆΔᐃⵠᐃΔ: 463,
    ⵠⲆΔΔⲆⵠᐃ: 464,
    ΔⵠⵠΔⵠⲆⲆ: 465,
    ᐃⵠᐃⲆⵠᐃⲆ: 466,
    ΔΔΔΔⵠΔⲆ: 467,
    ᐃⵠⲆⲆⵠⵠᐃ: 468,
    ⵠᐃⵠⵠΔᐃⲆ: 469,
    ⲆΔⲆⲆⲆⲆᐃ: 470,
    ⵠⵠⲆⵠⲆΔⵠ: 471,
    ⲆᐃᐃΔⵠᐃᐃ: 472,
    ᐃⲆᐃᐃⲆΔⵠ: 473,
    ⲆΔⲆΔΔⵠⵠ: 474,
    ΔᐃᐃⲆⵠᐃⲆ: 475,
    ⵠⵠⲆΔᐃⲆⲆ: 476,
    ⵠⵠᐃᐃᐃⲆⲆ: 477,
    ᐃⲆⲆᐃᐃⵠΔ: 478,
    ᐃⵠⵠᐃᐃᐃⵠ: 479,
    ΔᐃⵠⲆΔⲆⲆ: 480,
    ᐃⲆⲆⵠΔΔⵠ: 481,
    ΔⵠᐃΔⲆΔΔ: 482,
    ⵠⵠΔⲆᐃΔᐃ: 483,
    ΔΔᐃᐃΔⵠⵠ: 484,
    ᐃⵠⵠᐃΔⵠΔ: 485,
    ⲆᐃⵠⵠⵠΔⲆ: 486,
    ⵠΔᐃᐃΔⲆᐃ: 487,
    ΔᐃᐃⲆⲆᐃⵠ: 488,
    ᐃⲆⲆᐃⵠΔⵠ: 489,
    ΔΔⵠⲆᐃΔⵠ: 490,
    ΔᐃΔᐃⵠᐃⵠ: 491,
    ᐃⲆᐃᐃᐃⵠᐃ: 492,
    ⵠᐃⵠⵠᐃⲆᐃ: 493,
    ⲆⲆᐃΔΔᐃΔ: 494,
    ⵠⲆⵠΔΔᐃΔ: 495,
    ⲆⲆⲆΔⲆⲆΔ: 496,
    ⵠⵠⵠᐃⵠᐃᐃ: 497,
    ᐃΔⵠᐃΔΔᐃ: 498,
    ΔΔΔⲆⲆᐃⲆ: 499,
    ΔΔⲆⵠΔⲆᐃ: 500,
    ΔΔΔⲆⲆⲆⵠ: 501,
    ΔᐃⵠⲆⲆᐃᐃ: 502,
    ⲆⵠᐃΔᐃΔᐃ: 503,
    ΔΔΔΔΔⲆⵠ: 504,
    ⵠⵠⲆⲆᐃⲆᐃ: 505,
    ΔⲆΔΔⵠᐃΔ: 506,
    ΔⵠⵠΔⵠⲆⲆ: 507,
    ᐃᐃΔⵠΔᐃᐃ: 508,
    ⲆΔⲆⵠⵠⲆⵠ: 509,
    ΔᐃⵠᐃⵠⲆᐃ: 510,
    ᐃᐃΔΔⵠΔⲆ: 511,
    ⵠⲆΔᐃⵠᐃⵠ: 512,
    ᐃⵠΔⵠⲆᐃΔ: 513,
    ⵠΔⲆᐃⲆⵠⵠ: 514,
    ᐃⵠⵠⲆᐃΔⲆ: 515,
    ᐃᐃⵠᐃᐃⲆⵠ: 516,
    ᐃⵠⲆⵠᐃⵠᐃ: 517,
    ⲆΔⲆⵠⵠⵠᐃ: 518,
    ΔᐃΔᐃᐃⲆⲆ: 519,
    ⵠΔΔΔΔⵠⲆ: 520,
    ΔⵠΔΔᐃⵠΔ: 521,
    ⵠⲆΔⵠⵠᐃᐃ: 522,
    ΔΔᐃΔᐃΔⲆ: 523,
    ⵠᐃΔⵠᐃᐃⵠ: 524,
    ᐃᐃᐃΔⲆΔΔ: 525,
    ΔⲆⵠⵠⵠⲆᐃ: 526,
    ⲆⵠⲆⵠⵠⲆΔ: 527,
    ΔⲆⲆⲆΔⵠΔ: 528,
    ᐃⲆⲆΔⲆⲆⵠ: 529,
    ΔⲆΔΔⵠⵠΔ: 530,
    ΔⲆΔⲆⵠⲆⲆ: 531,
    ᐃΔⲆⲆⵠⵠⵠ: 532,
    ⲆⲆᐃⵠᐃΔⵠ: 533,
    ⲆΔΔⵠᐃⵠΔ: 534,
    ᐃⲆⲆⲆⲆΔΔ: 535,
    ⲆᐃᐃⲆΔⲆΔ: 536,
    ᐃᐃΔᐃᐃᐃⵠ: 537,
    ⵠⵠⵠΔⲆΔᐃ: 538,
    ΔΔⵠᐃᐃⲆⵠᐃᐃ: 539,
    ⵠⲆᐃⵠⵠΔᐃ: 540,
    ΔⲆΔⵠΔᐃⲆ: 541,
    ΔⵠᐃᐃⵠⲆⵠ: 542,
    ⲆΔΔⵠᐃⲆⲆ: 543,
    ΔⲆᐃΔᐃΔΔᐃⵠ: 544,
    POINTS: 545,
    ⵠᐃΔΔΔⲆᐃ: 546,
    ⵠⲆᐃⵠΔⵠΔ: 547,
    ⲆⲆΔⵠⵠⵠⲆ: 548,
    ⲆⲆΔᐃⵠᐃⵠ: 549,
    ΔΔᐃᐃᐃⵠⵠ: 550,
    ⵠΔΔΔⲆⵠⲆ: 551,
    ⵠⵠᐃΔⵠΔⵠ: 552,
    ΔᐃΔⵠᐃⵠⲆ: 553,
    ᐃᐃⵠⲆΔⲆⵠ: 554,
    ⲆⲆΔⲆⵠⵠⲆ: 555,
    ⵠⵠⵠⲆΔᐃᐃ: 556,
    ΔⵠΔᐃΔⵠΔ: 557,
    ΔΔΔᐃΔΔᐃ: 558,
    ᐃⲆΔⵠΔᐃⵠ: 559,
    ⵠⲆⲆⵠᐃⵠⲆ: 560,
    ᐃΔᐃΔᐃⲆᐃ: 561,
    ⵠⲆᐃΔⵠⵠⵠ: 562,
    ΔⲆΔⲆⲆⲆΔ: 563,
    ᐃΔⲆⲆⵠΔⲆ: 564,
    ΔⵠⲆⲆΔⲆⵠ: 565,
    ⲆΔⵠᐃⵠⵠⵠ: 566,
    ᐃⲆⵠΔᐃⲆⲆ: 567,
    ⵠᐃⵠᐃΔΔⲆ: 568,
    ΔⲆᐃΔⵠΔΔ: 569,
    ⲆᐃᐃⲆⲆⲆⵠ: 570,
    ⲆⵠⵠᐃⲆΔᐃ: 571,
    ⲆⵠΔⲆⲆΔΔ: 572,
    ΔⵠⲆΔΔⲆΔ: 573,
    ᐃⲆᐃⵠΔⲆⵠ: 574,
    ΔⲆⵠΔⵠΔⵠ: 575,
    ΔΔΔⲆⵠⲆᐃ: 576,
    ᐃⵠΔΔΔⵠⲆ: 577,
    ᐃΔᐃⲆΔᐃᐃ: 578,
    ᐃⵠΔᐃⵠⵠⲆ: 579,
    ᐃⲆΔᐃᐃⲆΔ: 580,
    ⲆⲆⵠᐃⲆΔᐃ: 581,
    ᐃⵠⲆᐃΔⵠⵠ: 582,
    ΔΔⲆⵠⵠᐃⵠ: 583,
    ⲆΔⲆⵠⲆⵠⲆ: 584,
    ⵠⲆⲆⲆⵠᐃⲆ: 585,
    ΔⵠⲆᐃⵠⵠΔ: 586,
    ⵠΔⵠᐃᐃⲆΔ: 587,
    ⵠⲆⲆⵠΔⲆΔ: 588,
    ᐃᐃΔⵠⵠᐃⵠ: 589,
    ⲆⲆᐃᐃⲆⲆΔ: 590,
    ⲆᐃΔΔⲆⲆⵠ: 591,
    ⲆᐃⲆⲆⵠᐃᐃ: 592,
    ΔⵠⲆΔΔᐃΔᐃⲆ: 593,
    ⵠᐃᐃᐃΔⲆΔ: 594,
    ΔⲆⵠⵠΔⵠⵠᐃΔ: 595,
    ⵠᐃΔᐃΔⵠⵠ: 596,
    ⲆᐃⵠᐃⲆⲆΔᐃⵠ: 597,
    ⵠᐃⲆᐃᐃᐃΔⲆⵠ: 598,
    ⵠᐃⵠⲆᐃⲆᐃⵠⲆ: 599,
    ⲆⲆⵠⵠᐃⵠᐃᐃⵠ: 600,
    ᐃⵠⵠⲆⲆⵠⵠᐃΔ: 601,
    ⲆⲆⵠⵠᐃⵠΔ: 602,
    ⵠⲆⵠⵠΔ: 603,
    ⲆᐃⵠⲆᐃΔⵠ: 604,
    ᐃᐃᐃⲆᐃⵠⲆ: 605,
    ΔᐃⵠⵠⲆᐃΔ: 606,
    ᐃⲆⲆᐃΔⲆᐃΔᐃ: 607,
    ⵠΔⲆⵠᐃΔⲆ: 608,
    ⵠⵠΔΔⵠⲆⲆ: 609,
    ⲆⵠᐃΔᐃᐃⲆ: 610,
    ⵠⲆⲆⲆⲆⲆⲆ: 611,
    ⵠⲆΔΔᐃⵠΔ: 612,
    ΔᐃⲆᐃΔᐃΔ: 613,
    ⵠⲆⲆⲆᐃΔⵠ: 614,
    ⲆΔⲆⲆᐃⲆᐃ: 615,
    ⲆⲆᐃΔΔⵠⵠ: 616,
    ᐃⲆⵠᐃⵠᐃⵠ: 617,
    ΔⲆⲆΔⵠⵠⵠ: 618,
    ΔⲆᐃⵠΔ: 619,
    ᐃᐃᐃΔᐃ: 620,
    ΔⲆΔⵠⲆ: 621,
    ⲆⲆⲆⲆⲆⲆΔⵠⲆ: 622,
    ⵠᐃΔⵠⲆᐃⵠ: 623,
    ⲆΔᐃΔⵠΔᐃ: 624,
    ⵠⵠΔᐃᐃⲆⵠ: 625,
    ⲆⵠⵠⲆΔᐃΔ: 626,
    ᐃΔᐃⵠΔⲆⲆ: 627,
    ΔⵠⲆⵠⵠᐃⵠ: 628,
    ⵠⵠᐃⵠⵠΔⲆ: 629,
    ⲆⵠᐃⵠⲆⵠⵠ: 630,
    ⲆᐃΔᐃᐃⲆᐃ: 631,
    ⵠᐃⲆᐃᐃⲆᐃ: 632,
    ᐃΔΔᐃᐃΔⵠ: 633,
    ᐃⲆΔⲆΔΔᐃ: 634,
    ΔΔⵠⲆⵠⲆᐃ: 635,
    ⲆⲆⲆΔᐃΔΔ: 636,
    ⵠΔⵠⵠᐃ: 637,
    ᐃΔⵠΔᐃᐃΔ: 638,
    ΔΔⲆᐃⵠΔⵠ: 639,
    ⵠΔⲆⲆᐃΔⵠ: 640,
    ᐃⵠᐃᐃⲆⵠⲆ: 641,
    ⲆΔΔᐃⲆⲆᐃ: 642,
    ᐃⲆᐃⲆⲆᐃⲆ: 643,
    ΔⲆⵠⲆΔⵠᐃ: 644,
    ΔⵠⲆⵠⵠⵠΔ: 645,
    ⲆⵠⲆΔΔΔⲆ: 646,
    ΔⲆⵠⲆᐃΔΔ: 647,
    ⲆⲆᐃⵠⲆⵠⲆ: 648,
    ⵠⲆⲆΔⵠᐃᐃ: 649,
    ΔⲆΔᐃⲆΔⵠ: 650,
    ΔᐃΔⲆΔΔⵠ: 651,
    ⲆᐃⵠΔΔΔᐃ: 652,
    ᐃΔᐃⵠᐃᐃⵠ: 653,
    ΔⲆⵠⲆΔⲆⲆ: 654,
    ᐃᐃⵠⵠᐃΔⲆ: 655,
    ⲆⵠΔⲆΔⲆⵠ: 656,
    ⵠⵠⵠⲆΔⵠΔ: 657,
    ⲆΔᐃⲆⲆᐃᐃ: 658,
    ΔΔⵠⲆᐃⲆⲆ: 659,
    ⲆⲆⵠⲆΔⲆᐃ: 660,
    ΔⲆΔⲆΔⵠΔ: 661,
    ⵠⲆⲆᐃⵠⵠᐃ: 662,
    ⵠⲆᐃᐃⵠⵠᐃ: 663,
    ᐃⲆⲆᐃΔΔΔ: 664,
    ⲆⲆⵠΔⲆΔⵠ: 665,
    ⲆⵠΔᐃᐃⵠⲆ: 666,
    ΔⵠᐃⵠⵠⲆᐃ: 667,
    ⲆᐃⲆⵠⲆᐃᐃ: 668,
    ᐃΔⲆᐃᐃΔΔ: 669,
    ΔᐃᐃᐃⵠⲆᐃ: 670,
    ΔΔⵠᐃⲆΔⲆ: 671,
    ΔᐃΔΔⲆᐃᐃ: 672,
    ᐃⲆᐃⵠⲆ: 673,
    ᐃᐃⲆⵠⲆΔᐃ: 674,
    ΔⵠⲆⲆⲆⵠⵠ: 675,
    ⵠᐃⲆᐃᐃ: 676,
    ⵠⵠᐃΔΔⵠᐃᐃⵠ: 677,
    ⵠΔⲆᐃⲆᐃΔ: 678,
    ⵠΔⵠᐃᐃ: 679,
    ᐃᐃⲆᐃᐃⵠᐃ: 680,
    ΔᐃΔᐃⲆⵠⵠ: 681,
    ⲆΔᐃⲆΔΔΔ: 682,
    ΔⵠⵠΔⲆΔⵠ: 683,
    ⲆᐃΔⲆᐃⲆΔ: 684,
    ΔᐃΔΔΔⵠⵠ: 685,
    ᐃⵠⵠⵠΔⵠⵠ: 686,
    ᐃⲆⲆⲆᐃΔⵠ: 687,
    ᐃⲆᐃΔΔⲆΔ: 688,
    ⵠⲆᐃⲆⲆⵠⵠ: 689,
    ᐃⲆⵠᐃᐃⵠΔ: 690,
    ⲆⲆⵠⲆΔ: 691,
    ΔⲆΔΔΔ: 692,
    ᐃΔⲆᐃⲆ: 693,
    ΔⵠⵠⲆⵠ: 694,
    ᐃⲆⲆⵠΔ: 695,
    ᐃΔⵠᐃⲆⵠⵠ: 696,
    ⵠⲆⵠᐃⵠⲆᐃ: 697,
    ⵠᐃⲆΔⵠΔⵠ: 698,
    ΔⲆΔⲆⵠΔⵠ: 699,
    ᐃⵠⵠΔⵠⵠᐃ: 700,
    ΔⵠⲆΔⲆᐃⲆ: 701,
    ΔᐃⵠᐃΔᐃΔ: 702,
    ᐃΔⵠΔΔΔⵠ: 703,
    ⲆΔΔⲆⵠⵠᐃ: 704,
    ᐃⵠⵠⲆΔᐃᐃ: 705,
    ᐃⵠᐃΔᐃⵠᐃ: 706,
    ΔᐃᐃⲆᐃⲆΔ: 707,
    ⲆᐃΔⲆⲆΔⲆ: 708,
    ⲆⲆᐃΔⵠⲆⵠ: 709,
    ΔⲆⲆⵠⲆⵠⵠ: 710,
    ⲆΔΔⲆΔᐃΔ: 711,
    ⵠΔΔᐃΔΔᐃ: 712,
    ⲆᐃⲆⲆᐃⵠⲆ: 713,
    ⵠⵠΔⵠⲆⲆᐃ: 714,
    ᐃⲆΔΔΔᐃⵠ: 715,
    ⲆΔΔΔΔⵠⲆ: 716,
    ᐃⲆⵠΔΔⵠᐃ: 717,
    ΔⵠⵠΔᐃⲆⵠ: 718,
    ᐃᐃⵠΔⵠⲆᐃ: 719,
    ΔᐃⲆⵠⵠᐃᐃ: 720,
    ᐃⲆⵠΔΔⵠᐃⵠⵠ: 721,
    ᐃᐃᐃⵠᐃΔⲆ: 722,
    ᐃⲆᐃΔⵠᐃⲆ: 723,
    ⵠΔΔⲆⲆⲆⵠ: 724,
    ⵠⲆᐃᐃⲆᐃⵠ: 725,
    ΔⵠᐃᐃΔⵠᐃ: 726,
    ᐃᐃᐃⲆΔᐃᐃ: 727,
    ΔⵠⲆⵠΔᐃⲆ: 728,
    ΔⵠⵠΔⵠᐃᐃ: 729,
    ⵠΔᐃⵠΔᐃⲆ: 730,
    ⲆΔᐃⲆⵠᐃΔ: 731,
    ᐃⵠΔᐃᐃᐃⵠ: 732,
    ΔⵠⵠᐃᐃΔⵠ: 733,
    ᐃⵠΔⵠⵠⵠᐃ: 734,
    ⵠᐃⲆⲆⵠΔᐃ: 735,
    ᐃⲆⲆⵠⲆⲆᐃ: 736,
    ⵠΔⲆᐃⵠⲆᐃ: 737,
    ⲆⵠⲆⵠΔᐃΔ: 738,
    ⲆΔⲆⲆΔᐃΔ: 739,
    ᐃΔⲆᐃΔᐃᐃ: 740,
    ⵠΔⵠⲆᐃΔᐃ: 741,
    ⲆᐃⵠΔⵠᐃΔ: 742,
    ᐃⵠⵠᐃⲆⵠΔ: 743,
    ΔⲆᐃⵠⲆⵠⵠ: 744,
    ΔΔᐃΔⵠⵠⵠ: 745,
    ⵠᐃᐃᐃᐃⲆⵠ: 746,
    ΔᐃΔᐃⲆΔⵠ: 747,
    ⲆⵠⵠⵠⲆⲆⲆ: 748,
    ⲆⲆΔⲆΔᐃⲆ: 749,
    ⵠᐃΔⵠⲆΔΔ: 750,
    ⵠⵠΔⵠⲆⵠᐃ: 751,
    ⲆⲆᐃΔᐃΔᐃ: 752,
    ⲆΔⲆⵠΔⲆⵠ: 753,
    ⵠᐃⲆᐃⲆⲆΔ: 754,
    ⲆⵠᐃΔᐃΔⲆ: 755,
    ᐃⲆⵠᐃⵠᐃᐃ: 756,
    ⲆⵠⵠⲆⵠᐃᐃ: 757,
    ⲆⵠᐃΔⵠⵠΔ: 758,
    ᐃᐃⲆΔᐃⲆᐃ: 759,
    ⲆⲆᐃΔΔᐃⵠ: 760,
    ᐃᐃᐃΔΔⵠⵠ: 761,
    ΔΔΔᐃΔⵠⵠ: 762,
    ⵠΔⵠᐃⵠⲆⲆ: 763,
    ᐃⲆⵠⲆⵠΔΔ: 764,
    ᐃⵠⵠΔΔΔⲆ: 765,
    ⵠⵠⵠΔΔᐃᐃ: 766,
    ⲆᐃⲆΔΔᐃⵠ: 767,
    ᐃⲆΔⵠⵠⵠΔ: 768,
    ⵠⵠⲆⵠⲆΔᐃ: 769,
    ⲆⲆⵠΔᐃᐃⲆ: 770,
    ⵠΔⵠᐃⵠⲆⵠ: 771,
    Ⲇᐃᐃᐃᐃⵠⵠ: 772,
    ᐃᐃΔⲆⵠΔΔ: 773,
    ⵠⲆΔᐃⲆᐃⵠ: 774,
    ᐃΔᐃᐃⵠⵠᐃ: 775,
    ΔⲆⵠΔⵠᐃⲆ: 776,
    ⲆᐃⲆⵠⵠᐃᐃ: 777,
    ⲆᐃΔΔᐃᐃᐃ: 778,
    ΔⲆⲆⵠⵠⲆⲆ: 779,
    ᐃΔᐃⲆᐃᐃΔ: 780,
    ΔⵠΔⲆⲆⵠⵠ: 781,
    ⵠΔⵠΔᐃᐃᐃ: 782,
    ΔⲆⵠᐃᐃⵠⲆ: 783,
    ΔΔⵠⵠⲆΔⲆ: 784,
    ᐃⲆⲆⲆⵠⵠΔ: 785,
    ⵠᐃⵠⵠⵠᐃΔ: 786,
    ᐃⵠⵠⵠᐃΔᐃ: 787,
    ⵠᐃᐃⲆⵠⲆΔ: 788,
    ΔⲆᐃⲆⵠᐃᐃ: 789,
    ᐃⲆⵠⲆⲆⲆΔ: 790,
    ⵠⲆⲆΔΔΔⲆ: 791,
    ⵠⵠⵠᐃⲆΔΔ: 792,
    ⵠΔΔⵠⲆ: 793,
    ΔⵠⵠΔᐃⲆᐃ: 794,
    ΔᐃⵠΔⵠᐃᐃ: 795,
    ΔΔⵠⲆᐃ: 796,
    ⵠⵠⵠΔⲆⲆⲆ: 797,
    ᐃᐃᐃᐃⲆⲆⵠ: 798,
    ΔⲆΔᐃΔΔⲆ: 799,
    ᐃⵠΔⲆᐃΔⲆ: 800,
    ⲆⲆⲆᐃⲆⵠΔ: 801,
    ΔᐃⲆⵠⵠ: 802,
    ΔⵠΔⵠΔᐃΔ: 803,
    ΔΔΔⵠᐃᐃΔⵠᐃ: 804,
    ᐃⵠⲆⵠⲆΔⲆΔᐃ: 805,
    ΔΔᐃⲆⲆᐃⲆⵠⲆ: 806,
    ⲆⵠⲆΔⵠⲆⵠⵠⵠ: 807,
    ΔⲆᐃⵠᐃⲆᐃ: 808,
    ⲆⵠΔⲆᐃⲆΔ: 809,
    ΔᐃⵠⵠᐃⲆⲆ: 810,
    ⵠᐃⵠⲆⵠⲆΔ: 811,
    ᐃⲆΔⲆⵠⲆΔ: 812,
    ⲆⵠⲆⲆⲆΔⲆ: 813,
    ⵠΔᐃⲆᐃΔⲆ: 814,
    ΔᐃⲆⵠΔᐃΔ: 815,
    ⲆᐃΔⲆΔΔⵠ: 816,
    ⵠⵠΔⲆᐃᐃΔ: 817,
    ⵠⵠΔⲆⵠ: 818,
    ΔⵠᐃⵠⲆ: 819,
    ⵠⲆᐃⵠⲆⵠⵠ: 820,
    ⲆΔᐃΔΔⵠⵠ: 821,
    ⲆⵠⲆⲆᐃᐃᐃ: 822,
    ⲆⲆᐃᐃⲆⵠⲆ: 823,
    ᐃΔⵠⲆⵠⵠⲆ: 824,
    ⵠΔᐃᐃⲆΔⲆ: 825,
    ⵠᐃΔⲆΔΔᐃ: 826,
    ⵠⵠΔⲆᐃⲆᐃ: 827,
    ⵠᐃⵠⵠΔⲆⵠ: 828,
    ΔⲆΔΔΔⵠᐃ: 829,
    ᐃᐃᐃᐃⲆⵠᐃ: 830,
    ΔΔᐃⵠΔⵠⲆ: 831,
    ⵠⲆΔᐃᐃⲆᐃⵠⵠ: 832,
    ΔⲆⵠⵠⲆⲆⲆᐃΔ: 833,
    ⵠⵠΔΔⵠᐃⲆ: 834,
    ⲆⵠⵠⵠⵠⲆᐃ: 835,
    ⵠⲆⵠᐃΔⲆΔ: 836,
    ᐃⲆⲆᐃⲆⵠⲆ: 837,
    ΔⲆⵠᐃⲆⲆⵠ: 838,
    ΔⲆᐃᐃᐃⵠⲆ: 839,
    ⵠΔΔᐃⲆⲆΔ: 840,
    ΔΔⲆᐃᐃⲆᐃ: 841,
    ⲆⵠⵠⵠᐃᐃⲆ: 842,
    ⲆΔΔᐃⵠᐃΔ: 843,
    ⵠⵠⲆᐃⵠᐃⵠ: 844,
    ΔⵠⵠⲆΔⵠⵠ: 845,
    Δⵠⵠᐃⵠᐃⵠ: 846,
    ⲆⲆΔΔᐃⵠⵠ: 847,
    ⵠΔᐃΔΔΔⲆ: 848,
    ΔᐃⵠⵠΔⵠᐃ: 849,
    ⲆᐃⲆΔᐃᐃᐃ: 850,
    ᐃᐃᐃⵠⵠⲆΔ: 851,
    ⲆⲆⲆᐃⲆᐃⲆⵠᐃ: 852,
    ⲆᐃᐃΔⵠᐃⵠ: 853,
    ⲆⵠⵠⵠⲆ: 854,
    ⵠΔⲆΔⵠⵠⵠⵠⲆ: 855,
    ⵠᐃΔⵠⵠⵠΔᐃⵠ: 856,
    ⵠᐃᐃⲆᐃᐃᐃᐃⲆ: 857,
    ᐃΔⲆⵠⲆⲆΔᐃⲆ: 858,
    ⵠΔΔⲆⵠⵠⵠ: 859,
    ⲆⵠᐃⲆᐃⵠᐃ: 860,
    ⵠᐃᐃᐃⵠⵠⲆ: 861,
    ⲆⵠⲆⵠᐃⲆⵠ: 862,
    ⲆΔΔᐃᐃⵠᐃ: 863,
    ᐃᐃⵠΔΔΔⵠΔⵠ: 864,
    ⵠᐃⵠΔΔⲆⵠ: 865,
    ΔⲆᐃΔⲆⵠΔ: 866,
    ΔⲆⲆⵠᐃΔⵠ: 867,
    ᐃΔᐃⵠΔΔⵠ: 868,
    ᐃⲆΔⲆⲆⲆᐃ: 869,
    ΔⵠΔⵠⵠⵠⲆ: 870,
    ᐃⵠⵠᐃⵠⵠⲆ: 871,
    ᐃᐃΔΔⵠ: 872,
    ΔΔᐃΔⵠΔΔΔΔ: 873,
    ⵠΔΔⲆΔⵠΔ: 874,
    ᐃⵠᐃᐃᐃΔΔ: 875,
    ⲆⲆⵠⲆᐃΔⵠ: 876,
    ΔⵠᐃⲆⲆⲆΔ: 877,
    ᐃΔⲆⵠᐃⲆⵠ: 878,
    ΔⲆⵠΔⲆΔΔ: 879,
    ᐃᐃⲆᐃᐃΔᐃ: 880,
    ΔΔᐃⵠⵠⵠⲆ: 881,
    ᐃⲆΔⵠΔⲆᐃ: 882,
    ΔᐃᐃⲆⲆⵠᐃ: 883,
    ᐃᐃᐃⲆⵠⲆᐃ: 884,
    ⲆⵠⵠⵠⵠⲆΔ: 885,
    ⵠⵠΔΔⲆΔᐃ: 886,
    ᐃΔΔⵠΔ: 887,
    ΔᐃᐃⵠᐃᐃΔ: 888,
    ⲆⲆΔⵠΔΔⲆ: 889,
    ⵠⵠᐃⵠⵠΔⵠ: 890,
    ⲆᐃΔᐃⲆᐃⲆ: 891,
    ΔΔⵠⲆΔᐃⲆ: 892,
    ΔⲆⵠᐃⵠⲆⲆ: 893,
    ⵠΔⵠΔⲆⵠⵠ: 894,
    ΔᐃⲆⲆⲆⵠⵠ: 895,
    ⵠⲆⵠⵠⲆᐃᐃ: 896,
    ᐃⲆⲆⲆⲆΔⵠ: 897,
    ⵠᐃⲆⲆⲆⵠⵠ: 898,
    ΔᐃᐃᐃΔⵠᐃ: 899,
    ᐃΔⲆⵠΔⲆⵠ: 900,
    ⵠΔΔⵠⲆᐃΔ: 901,
    ΔⵠⵠᐃⵠΔⲆ: 902,
    ⵠⵠΔⲆⵠⲆᐃ: 903,
    ᐃⲆⵠΔⲆⲆᐃ: 904,
    ⵠᐃⲆᐃΔᐃΔ: 905,
    ⵠⵠⵠᐃⲆⲆⵠ: 906,
    ΔⵠᐃⲆΔΔΔ: 907,
    ΔΔⲆΔΔⲆⲆ: 908,
    ⵠΔⲆⲆΔⲆΔ: 909,
    ⵠΔⲆⲆⲆⲆᐃ: 910,
    ΔⵠⵠΔⲆᐃᐃ: 911,
    ΔⲆⲆᐃⲆⲆⲆ: 912,
    ⲆⲆᐃⲆⵠΔΔ: 913,
    ⵠᐃΔΔⲆⵠᐃᐃⲆ: 914,
    ΔᐃⲆⲆⲆⲆⲆᐃⲆ: 915,
    ᐃΔᐃᐃⵠⲆⲆⲆᐃ: 916,
    ⲆΔⲆⲆⵠᐃⵠΔΔ: 917,
    ΔΔⵠⵠᐃΔⲆ: 918,
    ΔΔᐃⲆⵠΔᐃ: 919,
    ΔⲆᐃΔⵠ: 920,
    ⲆᐃⵠⵠⲆⵠⵠ: 921,
    ΔⵠᐃⵠⲆⵠᐃ: 922,
    ⵠⲆⵠᐃⲆⵠⵠ: 923,
    ᐃᐃΔⵠᐃⵠⲆ: 924,
    ᐃᐃⲆⲆᐃΔᐃ: 925,
    ⲆⲆⵠᐃΔⲆⵠ: 926,
    ⵠΔⲆᐃΔⲆΔ: 927,
    ᐃⲆΔᐃΔⵠⲆ: 928,
    ΔⲆΔⲆⲆΔᐃ: 929,
    ⵠⲆΔⵠⵠⵠⲆ: 930,
    ΔⵠᐃΔⲆⲆᐃ: 931,
    ⵠⲆᐃᐃⲆⲆΔ: 932,
    ⲆᐃᐃⵠⲆᐃⵠ: 933,
    ⵠⵠΔᐃΔⵠᐃ: 934,
    ΔΔⲆⵠⵠⵠⵠ: 935,
    ⵠⵠᐃⵠᐃⲆΔ: 936,
    ᐃⵠᐃᐃⵠΔΔ: 937,
    ⲆⲆⲆⲆΔⵠΔ: 938,
    ΔᐃΔΔⲆΔΔ: 939,
    ᐃΔΔⵠᐃΔΔᐃⲆ: 940,
    ᐃⵠΔᐃΔ: 941,
    ᐃⵠⵠΔⲆⵠΔ: 942,
    ⲆⵠⵠⵠᐃⵠⲆ: 943,
    ⵠⲆⲆΔᐃΔⲆ: 944,
    ᐃⲆᐃᐃⵠⵠΔ: 945,
    ⲆΔΔⲆⵠⵠⲆ: 946,
    ⲆⲆᐃⵠΔΔᐃ: 947,
    ᐃᐃⲆⵠⵠᐃᐃ: 948,
    ⲆΔⲆᐃΔⲆⵠ: 949,
    ᐃⵠⲆΔᐃᐃᐃ: 950,
    ⵠΔᐃΔⵠⲆⲆ: 951,
    ⲆⲆⵠΔᐃⵠⵠ: 952,
    ᐃᐃⲆᐃⲆΔⵠ: 953,
    ⲆⵠΔⵠⲆΔⲆ: 954,
    ⵠΔⵠᐃΔΔΔ: 955,
    ᐃΔᐃᐃⵠΔᐃ: 956,
    ⵠᐃᐃΔΔᐃΔ: 957,
    ⲆΔΔⵠΔΔᐃ: 958,
    ᐃΔⵠⵠᐃᐃΔ: 959,
    ⲆᐃⵠⲆᐃΔⲆ: 960,
    ᐃⵠᐃⲆⲆⲆⲆ: 961,
    ΔᐃΔⵠΔᐃⵠ: 962,
    ΔⲆⵠᐃᐃᐃⲆ: 963,
    ΔⲆⲆⲆΔᐃΔⵠΔ: 964,
    Ⲇⵠⵠᐃᐃⵠᐃ: 965,
    ⲆᐃⵠⲆΔᐃⵠ: 966,
    ᐃΔΔⲆⵠΔⲆ: 967,
    ⵠⵠⲆⲆⲆⲆⲆ: 968,
    ᐃᐃⵠⵠⵠⵠΔ: 969,
    ⲆΔⲆⵠⲆⲆⲆ: 970,
    ᐃⵠΔΔⵠΔᐃ: 971,
    ᐃᐃᐃᐃΔⲆᐃ: 972,
    ΔⵠⵠⲆΔΔᐃ: 973,
    ⲆΔⲆⵠⵠⵠⲆ: 974,
    ⵠⵠᐃⲆᐃⵠᐃ: 975,
    ⵠΔΔⲆᐃⲆᐃ: 976,
    ΔΔⵠⲆᐃΔΔ: 977,
    ⲆᐃΔᐃⲆⲆᐃ: 978,
    ⲆᐃⵠⲆΔΔᐃ: 979,
    ⵠᐃΔᐃΔΔⲆ: 980,
    ⲆΔⵠΔΔᐃΔ: 981,
    ᐃⵠᐃᐃΔΔᐃ: 982,
    ΔⵠΔᐃΔⵠⲆ: 983,
    ⲆᐃᐃⵠᐃⲆΔ: 984,
    ΔᐃᐃΔᐃΔⲆ: 985,
    ⲆⵠᐃⲆΔᐃΔ: 986,
    ᐃⵠᐃΔΔⲆΔ: 987,
    ᐃᐃΔⲆᐃⵠⵠ: 988,
    ⵠⲆⲆΔΔ: 989,
    ⵠΔΔⲆΔᐃΔ: 990,
    ⵠᐃⲆᐃⵠⵠⵠ: 991,
    ᐃⲆᐃΔᐃΔᐃ: 992,
    ΔⲆΔΔᐃⵠⵠ: 993,
    ᐃΔⵠᐃᐃⵠⵠ: 994,
    ⲆⲆⲆⵠᐃᐃΔ: 995,
    ΔⲆΔΔⲆⵠⵠ: 996,
    ⵠⵠΔᐃᐃΔΔ: 997,
    ⲆⲆᐃⵠⵠⵠᐃ: 998,
    ⵠΔΔⲆᐃΔΔ: 999,
    ΔΔΔⵠⲆΔΔ: 1000,
    ⵠⵠΔⲆᐃⵠⵠ: 1001,
    ⵠⲆᐃⵠᐃⵠᐃ: 1002,
    ⲆᐃΔΔⵠⵠⵠ: 1003,
    ⵠⵠᐃⵠΔⵠⵠ: 1004,
    ᐃⲆⵠᐃⵠΔΔ: 1005,
    ⵠΔΔΔᐃⵠⲆ: 1006,
    ⲆⲆⵠΔⲆⲆᐃ: 1007,
    ΔⵠᐃᐃⵠΔⲆ: 1008,
    ⲆⲆΔⵠⲆΔᐃ: 1009,
    ⵠⲆᐃΔΔᐃⲆ: 1010,
    ⲆΔᐃⲆⲆΔᐃ: 1011,
    ᐃⵠⵠⵠⵠⵠⵠ: 1012,
    ᐃᐃᐃᐃΔⲆⲆ: 1013,
    ⲆΔᐃᐃⵠⲆΔ: 1014,
    ΔᐃⲆⵠᐃⲆΔ: 1015,
    ⲆⲆᐃⲆᐃΔⵠ: 1016,
    ΔᐃⲆⵠᐃΔᐃ: 1017,
    ΔⲆⵠΔᐃΔⲆ: 1018,
    ⲆΔⵠᐃⲆⵠΔ: 1019,
    ⲆⵠᐃᐃⵠᐃΔ: 1020,
    ⵠᐃⵠᐃⵠΔⲆ: 1021,
    ΔⲆΔᐃⵠΔᐃ: 1022,
    ⵠΔⵠⵠⵠⲆⲆ: 1023,
    ⲆⵠᐃⲆ: 1024,
    ΔⲆⵠΔ: 1025,
    ᐃᐃᐃΔⵠⵠⲆ: 1026,
    ΔᐃⲆⲆᐃᐃⵠ: 1027,
    ΔᐃⲆᐃΔᐃⲆ: 1028,
    ΔᐃⲆⲆⲆᐃⲆ: 1029,
    ⲆⵠⲆⲆΔⵠΔ: 1030,
    ⵠᐃΔⵠⲆⵠΔ: 1031,
    ᐃΔᐃⵠⵠᐃᐃ: 1032,
    ⲆⲆⵠΔⲆ: 1033,
    ⵠⵠᐃⵠΔⲆΔ: 1034,
    ΔⲆⵠΔΔ: 1035,
    ΔᐃⵠΔⲆⵠᐃ: 1036,
    ⲆⵠⲆΔⵠ: 1037,
    ΔⵠⵠᐃⲆⲆΔ: 1038,
    ⲆⲆΔⵠⵠ: 1039,
    ΔΔⲆᐃᐃΔⲆ: 1040,
    ⵠⲆᐃᐃⲆ: 1041,
    ΔΔᐃΔΔ: 1042,
    ᐃᐃΔⲆⵠᐃⵠ: 1043,
    ⲆΔⲆⵠᐃⵠⲆ: 1044,
    ⲆΔⵠⲆΔⵠⲆ: 1045,
    ⵠⵠᐃⵠᐃΔⲆ: 1046,
    ᐃᐃⲆⲆΔⲆⲆ: 1047,
    ⲆΔⵠⲆⵠⵠⵠ: 1048,
    ⲆΔⵠⵠⵠⲆⲆ: 1049,
    ΔⵠΔⲆⲆⲆⵠ: 1050,
    ⲆⲆᐃⵠᐃⲆΔ: 1051,
    ⵠᐃΔᐃⵠ: 1052,
    ᐃᐃⵠᐃΔᐃΔ: 1053,
    ⵠᐃᐃΔΔ: 1054,
    ⲆⵠⵠᐃΔⵠΔ: 1055,
    ᐃⲆΔⲆΔⵠΔ: 1056,
    ΔᐃⵠⲆΔΔΔ: 1057,
    ⵠΔⵠⲆⵠⵠᐃ: 1058,
    ⵠⲆᐃΔⲆᐃᐃ: 1059,
    ᐃⲆⲆⲆⲆΔⲆ: 1060,
    ⲆΔⲆⵠᐃⵠⵠᐃΔ: 1061,
    ⲆⵠⲆⲆΔᐃⲆ: 1062,
    ⵠⲆᐃᐃΔⲆⵠ: 1063,
    ᐃᐃⵠΔᐃⵠᐃⵠⲆ: 1064,
    ⲆⲆᐃᐃΔᐃΔ: 1065,
    ΔᐃᐃᐃⲆⵠⲆ: 1066,
    ⵠᐃᐃⲆⲆⲆⲆ: 1067,
    ⲆᐃΔᐃⵠΔⲆ: 1068,
    ΔⲆᐃⲆᐃ: 1069,
    ⲆᐃⲆᐃΔᐃᐃ: 1070,
    ᐃⲆᐃⲆⲆᐃᐃ: 1071,
    ⵠᐃᐃΔᐃⵠᐃ: 1072,
    ᐃᐃΔΔⲆⲆⲆ: 1073,
    ΔⲆᐃᐃᐃᐃⲆ: 1074,
    ⵠᐃⲆΔᐃⲆᐃ: 1075,
    ᐃⲆⲆᐃΔⲆᐃ: 1076,
    ᐃᐃᐃΔⵠⲆΔ: 1077,
    ⲆᐃⵠⵠΔⵠᐃ: 1078,
    ᐃᐃᐃΔᐃⵠⵠ: 1079,
    ᐃᐃⲆΔⵠᐃᐃ: 1080,
    ᐃⲆᐃⵠⲆⲆΔ: 1081,
    ᐃⲆⲆᐃᐃΔⵠ: 1082,
    ⲆᐃⲆⵠⲆᐃⲆ: 1083,
    ⲆᐃⲆⵠᐃ: 1084,
    ⵠᐃⵠⲆᐃⵠⵠ: 1085,
    ΔⵠΔΔᐃΔΔ: 1086,
    ⲆⵠΔⲆⵠΔᐃ: 1087,
    ⲆⵠⲆⲆᐃᐃⵠ: 1088,
    ΔⲆᐃᐃⲆᐃⵠ: 1089,
    ΔⲆᐃⵠⲆΔΔ: 1090,
    ΔᐃⲆΔⵠⲆⲆ: 1091,
    ΔᐃΔⵠΔⲆᐃ: 1092,
    ΔΔⵠΔᐃⲆΔ: 1093,
    ΔᐃᐃⲆΔᐃⵠ: 1094,
    ΔᐃᐃΔᐃᐃΔ: 1095,
    ΔⲆⲆⵠⵠⵠΔ: 1096,
    ⲆⲆⵠΔΔⲆᐃ: 1097,
    ⵠⵠⲆⲆᐃΔⵠ: 1098,
    ⵠⲆΔΔⵠ: 1099,
    ᐃⵠⲆⲆᐃΔΔ: 1100,
    ᐃⵠⵠⵠⲆⵠⲆ: 1101,
    ⲆΔⵠⲆⵠⵠᐃ: 1102,
    ᐃΔᐃᐃⲆᐃⲆ: 1103,
    ⵠⲆΔⵠⲆΔᐃ: 1104,
    ⲆⵠⲆᐃᐃᐃΔ: 1105,
    ΔᐃⲆⵠⵠΔⵠ: 1106,
    ᐃⵠᐃᐃⵠⵠⲆ: 1107,
    ᐃⲆⵠΔΔⵠⵠ: 1108,
    ⲆΔⵠΔᐃⲆⲆ: 1109,
    ⵠΔᐃⲆⵠⵠᐃ: 1110,
    ᐃΔⲆΔΔⵠⲆ: 1111,
    ⵠⵠΔⲆᐃⲆⲆ: 1112,
    ⵠⲆⵠⵠᐃΔᐃ: 1113,
    ΔᐃΔΔΔΔΔ: 1114,
    ᐃΔⵠΔᐃᐃⲆ: 1115,
    ⵠⵠⲆⵠᐃΔΔ: 1116,
    ⵠΔΔⵠΔⲆΔ: 1117,
    ΔᐃⵠΔΔᐃΔ: 1118,
    ⲆᐃᐃΔⲆⵠΔ: 1119,
    Ⲇⵠⵠᐃᐃ: 1120,
    ⲆⲆⵠΔⲆⵠⵠ: 1121,
    ᐃΔΔΔΔΔΔ: 1122,
    Ⲇⵠⵠⵠⵠᐃᐃ: 1123,
    ᐃⵠΔᐃΔΔⵠ: 1124,
    ⲆⵠΔΔⲆⲆⲆ: 1125,
    ᐃⵠᐃΔΔⵠⲆ: 1126,
    ⵠΔᐃⵠⵠⵠⲆ: 1127,
    ΔᐃⲆΔᐃⲆΔ: 1128,
    ᐃⲆⵠⲆΔΔΔ: 1129,
    ⲆᐃⵠΔΔⲆᐃ: 1130,
    ᐃΔⲆⲆⵠⵠⲆ: 1131,
    ⲆⵠⲆᐃⵠΔΔ: 1132,
    ⲆᐃⵠⵠⵠΔΔ: 1133,
    ⲆΔⵠⵠⲆᐃᐃ: 1134,
    ⵠᐃⲆᐃⵠⲆΔ: 1135,
    ⵠⲆΔⲆⵠⲆᐃ: 1136,
    ⵠⲆⵠΔⲆⵠΔ: 1137,
    ΔᐃⵠⲆᐃΔⲆ: 1138,
    ᐃⲆᐃΔᐃᐃⲆ: 1139,
    ⲆΔΔΔᐃⵠⵠ: 1140,
    ᐃᐃᐃⵠⵠᐃⲆ: 1141,
    ⲆⲆΔⵠᐃΔᐃ: 1142,
    ⵠⲆⵠⲆⲆΔⲆ: 1143,
    ⵠᐃⲆᐃⲆᐃⲆ: 1144,
    ⲆΔⲆⵠᐃⲆⲆ: 1145,
    ᐃⲆⵠⲆⲆΔⵠ: 1146,
    ⵠᐃΔΔⲆΔΔ: 1147,
    ΔᐃᐃΔⲆᐃΔ: 1148,
    ᐃΔⲆⵠⲆⲆᐃ: ["#E9CF96", "#144940"],
    Ⲇⵠᐃᐃᐃⵠᐃ: 1149,
    ΔⲆΔΔⵠΔᐃ: 1150,
    ᐃΔᐃΔⲆⲆⲆ: 1151,
    ΔᐃΔΔᐃΔⲆ: 1152,
    ΔⵠᐃΔᐃⵠΔ: 1153,
    ⵠⲆⲆⵠⲆⵠᐃ: 1154,
    ⲆΔΔΔΔⲆⵠ: 1155,
    ᐃᐃΔΔΔ: 1156,
    ⲆⵠᐃⲆᐃΔᐃ: 1157,
    ⵠΔⲆΔΔᐃⵠ: 1158,
    ΔᐃᐃⲆᐃⵠᐃ: 1159,
    ᐃⲆᐃⲆΔΔⲆ: 1160,
    ΔⵠⲆΔΔᐃⵠ: 1161,
    ⵠᐃΔΔⵠⵠΔ: 1162,
    ⵠⲆⵠᐃⵠΔΔ: 1163,
    ᐃΔⵠΔⵠⲆΔ: 1164,
    ΔᐃΔᐃΔⵠᐃ: 1165,
    ⵠΔᐃᐃᐃΔΔ: 1166,
    ΔᐃⵠᐃΔΔⲆ: 1167,
    ⵠⲆⲆᐃⲆⵠⵠ: 1168,
    ⲆᐃⵠᐃⵠΔⵠ: 1169,
    ⲆⲆⲆᐃΔⲆᐃ: 1170,
    ᐃΔⲆΔᐃΔᐃ: 1171,
    ⵠᐃΔⵠⵠᐃⵠ: 1172,
    ⲆⵠΔⲆᐃᐃᐃ: 1173,
    ⵠΔΔⲆⵠᐃⲆ: 1174,
    ᐃⲆⵠΔᐃᐃⲆ: 1175,
    ⲆΔⵠⵠᐃΔⲆ: 1176,
    ⲆΔΔⲆⲆⲆⵠ: 1177,
    ΔⵠᐃᐃΔΔⲆ: 1178,
    ⲆᐃⲆΔⲆΔⵠ: 1179,
    ⲆⵠⲆᐃᐃⲆⵠ: 1180,
    ᐃⲆⲆⵠⵠⲆΔ: 1181,
    ⵠⲆΔⲆⲆⵠⲆ: 1182,
    ᐃⲆᐃᐃⵠⲆᐃ: 1183,
    ΔΔΔΔⲆⲆⲆ: 1184,
    ΔⲆⲆᐃⵠⵠⵠ: 1185,
    ⲆᐃᐃⵠⵠΔⲆ: 1186,
    ΔΔⵠᐃᐃΔⲆ: 1187,
    ᐃⲆΔⵠΔΔⲆ: 1188,
    ᐃⲆΔⵠΔⵠⵠ: 1189,
    ᐃΔⲆⵠⵠΔΔ: 1190,
    ΔⲆΔᐃⵠⵠΔ: 1191,
    ᐃⲆⲆΔᐃⵠⲆ: 1192,
    ⲆΔⲆⲆΔⲆᐃ: 1193,
    ⵠⵠⵠⲆΔⲆⲆ: 1194,
    ⵠΔΔⵠⵠⲆⲆ: 1195,
    ⵠᐃⵠⲆᐃⲆⵠ: 1196,
    ⵠᐃᐃΔⲆᐃΔ: 1197,
    ⲆⵠⲆⲆⲆᐃΔ: 1198,
    ⵠⲆᐃⵠᐃᐃᐃ: 1199,
    ⵠⵠⲆⲆᐃⵠⲆ: 1200,
    ΔⵠΔᐃᐃⵠⲆ: 1201,
    ᐃⵠΔⲆⲆᐃΔ: 1202,
    ᐃᐃΔⵠΔΔⵠ: 1203,
    ⵠᐃⲆᐃⲆᐃᐃ: 1204,
    ⵠⲆΔᐃΔΔΔ: 1205,
    ⵠΔΔᐃⲆᐃⲆ: 1206,
    ᐃΔᐃⵠᐃⲆΔ: 1207,
    ᐃΔΔΔⵠⵠΔ: 1208,
    ΔΔⲆᐃΔᐃΔ: 1209,
    ⵠⵠⲆⲆⵠⲆⲆ: 1210,
    ᐃⵠⲆᐃᐃΔⲆ: 1211,
    ⲆⲆⵠⵠᐃᐃⲆ: 1212,
    ᐃⲆⲆⵠᐃⵠⲆ: 1213,
    ᐃⵠⵠⲆⵠⵠΔ: 1214,
    ⵠΔᐃΔΔⵠΔ: 1215,
    ᐃⵠᐃΔΔᐃⵠ: 1216,
    ΔⲆᐃᐃᐃⲆᐃ: 1217,
    ᐃⲆᐃᐃΔ: 1218,
    ⵠⵠΔᐃⵠΔᐃ: 1219,
    ᐃⲆᐃᐃⲆ: 1220,
    ΔΔᐃⲆⵠⲆⲆ: 1221,
    ᐃᐃⵠⲆⵠⲆⵠ: 1222,
    ᐃⲆⵠΔⲆᐃᐃ: 1223,
    ᐃⵠⲆᐃᐃⲆⵠ: 1224,
    ᐃⲆᐃⲆⵠⵠⲆ: 1225,
    ⲆΔⲆΔᐃᐃⲆ: 1226,
    ΔⵠⲆⵠΔΔᐃ: 1227,
    ᐃΔⲆⵠᐃΔⵠ: 1228,
    ᐃⲆⲆⲆᐃΔΔ: 1229,
    ᐃⲆⲆⵠⲆᐃⲆ: 1230,
    ⲆΔΔΔᐃᐃⵠ: 1231,
    ΔⵠⲆΔⵠⵠⲆ: 1232,
    ΔⵠᐃⵠᐃᐃⲆ: 1233,
    ⲆᐃΔᐃᐃⵠΔ: 1234,
    ⵠΔᐃΔⲆⲆᐃ: 1235,
    ᐃⵠᐃⲆⵠⲆᐃ: 1236,
    ⲆⲆⵠⵠⲆⵠⲆ: 1237,
    ⲆΔⵠⵠⵠⲆⵠ: 1238,
    ⵠⲆᐃΔΔⲆΔ: 1239,
    ⵠΔⲆΔΔΔΔ: 1240,
    ⲆⲆⵠᐃᐃⵠⲆ: 1241,
    ᐃⲆᐃⵠΔΔⵠ: 1242,
    ⵠᐃⲆΔΔⵠΔ: 1243,
    ⲆᐃⲆᐃⲆⲆⵠ: 1244,
    ⵠⵠᐃᐃᐃⲆⵠ: 1245,
    ⵠⵠⵠⲆⵠⲆᐃ: 1246,
    ᐃⵠΔⲆΔᐃᐃ: 1247,
    ⲆⵠⵠⲆᐃᐃⵠ: 1248,
    ΔⵠⲆΔᐃⲆⲆ: 1249,
    ⵠᐃⲆΔⵠⵠⵠ: 1250,
    ⲆⲆⵠⵠⲆᐃⲆ: 1251,
    ᐃⲆΔⲆΔⲆΔ: 1252,
    ᐃΔᐃⵠⵠⵠⲆ: 1253,
    ΔⵠᐃⲆⵠⲆⵠ: 1254,
    ⲆᐃⲆᐃⲆᐃⵠ: 1255,
    ⲆΔΔΔᐃⲆⲆ: 1256,
    ᐃᐃⵠΔΔᐃᐃ: 1257,
    ⵠⵠΔΔⲆΔΔ: 1258,
    ΔⲆᐃⵠⲆΔⵠ: 1259,
    ⵠᐃⵠⲆᐃⵠᐃ: 1260,
    ⲆⲆⲆⵠⵠΔΔ: 1261,
    ⵠⵠⲆⵠᐃⵠΔ: 1262,
    ΔⲆΔⲆⲆΔⲆ: 1263,
    ⵠΔⲆⲆᐃᐃᐃ: 1264,
    ⵠⵠΔΔⲆⵠⵠ: 1265,
    ⲆⲆᐃⲆⲆⵠᐃ: 1266,
    ᐃΔᐃⵠᐃⵠΔ: 1267,
    ᐃⵠΔΔΔᐃᐃ: 1268,
    ⵠⲆΔⵠΔⵠΔ: 1269,
    ᐃⵠⲆᐃΔΔᐃ: 1270,
    ᐃⲆΔΔⵠⵠⲆ: 1271,
    ⲆⵠᐃⲆⲆᐃᐃ: 1272,
    ⲆᐃⲆΔⵠᐃⲆ: 1273
  };
  ps = Gk;
  const ss = $o;
  var ts = {
    ⲆⲆᐃΔⵠ: 0,
    ᐃΔΔᐃⲆ: 1,
    ᐃᐃΔⲆⵠ: 2,
    ΔⲆⵠⲆⲆ: 3,
    ⲆⲆⲆΔΔ: 4,
    ᐃᐃⲆⲆⵠ: 5,
    ᐃⲆᐃΔΔ: 6,
    Ⲇᐃᐃⵠᐃ: 7,
    ⵠⵠⲆᐃᐃ: 8,
    ⵠⲆⵠΔⲆ: 9,
    ΔⵠⲆⵠⵠ: 10,
    ΔⵠᐃᐃⲆ: 11,
    ⵠⲆᐃⲆΔ: 12,
    ΔΔⲆᐃⵠ: 13,
    ΔΔΔᐃᐃ: 14,
    ⵠⲆⲆΔⵠ: 15,
    ΔΔⲆᐃΔ: 16,
    ᐃΔΔⲆⲆ: 17,
    ᐃΔⵠΔΔ: 18,
    ⵠⵠⲆⵠⲆ: 19,
    ⲆΔⲆᐃⲆ: 20,
    ⵠⲆΔᐃΔ: 21,
    ⲆⲆᐃΔΔ: 22,
    ⵠᐃΔᐃⲆ: 23,
    ΔⵠᐃⲆⲆ: 24,
    ⵠᐃΔⵠⵠ: 25,
    ⲆⲆⵠⲆⵠ: 26,
    ᐃΔⵠΔⲆ: 27,
    ΔⲆⲆⲆⲆ: 28,
    ⵠᐃᐃⵠΔ: 29,
    ⵠΔⲆⲆᐃ: 30,
    ⵠⲆΔΔΔ: 31,
    ᐃᐃΔⵠΔ: 32,
    ΔⲆⵠᐃᐃ: 33,
    ⵠᐃⵠⲆᐃ: 34,
    ᐃΔⲆᐃⵠ: 35,
    ᐃⵠᐃⲆΔ: 36,
    ⵠᐃⵠⵠΔ: 37,
    ᐃΔᐃⵠΔ: 38,
    ⵠⵠΔΔⲆ: 39,
    ᐃⵠⵠⵠⵠ: 40,
    ⵠⵠᐃⲆⵠ: 41,
    ⵠΔΔⵠΔ: 42,
    ⲆᐃⵠΔⵠ: 43,
    ΔΔᐃⵠⵠ: 44,
    ⲆⵠΔᐃⵠ: 45,
    ᐃⲆΔᐃⵠ: 46,
    ⲆⲆΔⵠⲆ: 47,
    ⲆⵠⲆΔⲆ: 48,
    ⵠΔᐃⲆⵠ: 49,
    ᐃΔΔΔⵠ: 50,
    ΔⲆᐃⲆⵠ: 51,
    ᐃⵠⲆΔᐃ: 52,
    ΔⵠⲆⵠᐃ: 53,
    ⵠⲆⵠΔᐃ: 54,
    ᐃⵠⵠⲆⵠ: 55,
    ⵠᐃᐃᐃᐃ: 56,
    ΔᐃΔⵠᐃ: 57,
    ⲆᐃⵠⲆΔ: 58,
    ΔΔⲆᐃᐃ: 59,
    ⲆⲆⲆᐃΔ: 60,
    Ⲇⵠⵠⵠᐃ: 61,
    ⵠΔΔᐃⲆ: 62,
    ⲆⵠᐃⲆΔ: 63,
    ⲆΔⲆⲆⲆ: 64,
    ⵠΔᐃⵠⵠ: 65,
    ΔΔⲆⵠᐃ: 66,
    ⲆΔⵠΔⵠ: 67,
    ΔᐃⲆᐃⵠ: 68,
    ⵠⵠᐃⲆⲆ: 69,
    ⵠΔΔΔᐃ: 70,
    ᐃΔⲆΔΔ: 71,
    ⲆΔΔⵠⲆ: 72,
    ΔΔⵠᐃⵠ: 73,
    ᐃᐃⲆᐃⲆ: 74,
    ᐃⲆⵠⲆⲆ: 75,
    ⲆᐃΔᐃⵠ: 76,
    ⲆⲆΔᐃⵠ: 77,
    ᐃΔⲆⲆⵠ: 78,
    ⵠⲆᐃᐃΔ: 79,
    Ⲇᐃⵠᐃᐃ: 80,
    ⵠⲆΔᐃᐃ: 81,
    ΔΔⲆΔᐃ: 82,
    ΔⵠᐃΔⲆ: 83,
    ᐃᐃᐃⵠΔ: 84,
    ⲆᐃᐃΔⵠ: 85,
    ᐃΔⵠⲆⲆ: 86,
    ᐃⲆΔⵠⵠ: 87,
    ⵠᐃⵠᐃᐃ: 88,
    ᐃⵠΔⲆΔ: 89,
    ΔⵠᐃⲆᐃ: 90,
    ᐃⵠⲆⵠᐃ: 91,
    ᐃⵠⲆⲆⵠ: 92,
    ⲆΔΔⲆⲆ: 93,
    ᐃⲆΔⵠᐃ: 94,
    ᐃᐃⲆΔᐃ: 95,
    ⲆⵠⲆⲆⲆ: 96,
    ΔΔΔΔΔ: 97,
    ΔᐃⲆⵠΔ: 98,
    ⵠⲆᐃΔΔ: 99,
    ⵠⲆᐃⲆ: 100,
    ⵠᐃⵠⲆⲆ: 101,
    ⵠⲆΔⲆᐃ: 102,
    ⲆΔΔᐃᐃ: 103,
    ᐃⵠᐃᐃᐃ: 104,
    ⵠⲆⵠⲆⲆ: 105,
    ΔΔᐃΔⵠ: 106,
    ΔΔᐃΔⲆ: 107,
    ⵠᐃⲆᐃⲆ: 108,
    ΔΔⲆⲆⲆ: 109,
    ⲆᐃΔⲆΔ: 110,
    ⵠᐃᐃⲆᐃ: 111,
    ΔⵠⲆⲆⵠΔⵠ: 112,
    ⵠΔⲆⵠΔᐃᐃ: 113,
    ᐃⲆᐃⲆⲆ: 114,
    ⲆⵠⲆⵠᐃ: 115,
    ⵠⵠⲆⲆⲆ: 116,
    ᐃΔΔᐃΔ: 117,
    ΔΔΔⲆΔ: 118,
    ⲆᐃⲆᐃΔ: 119,
    ⵠⲆΔⵠᐃ: 120,
    ΔⵠΔⵠⵠ: 121,
    ΔⲆⲆᐃΔ: 122,
    ᐃᐃᐃᐃᐃ: 123,
    ⲆⵠⲆⵠⵠ: 124,
    ΔΔⲆⵠΔ: 125,
    ΔⵠᐃᐃΔ: 126,
    ⲆᐃⵠⲆᐃ: 127,
    ᐃⵠΔᐃⵠ: 128,
    ᐃᐃᐃᐃⲆ: 129,
    ⵠΔⵠⲆᐃ: 130,
    ᐃᐃⲆⲆⲆ: 131,
    ⲆΔᐃΔᐃ: 132,
    ⲆⵠΔⲆᐃ: 133,
    ΔⲆⲆᐃᐃ: 134,
    ⵠΔᐃⲆⲆ: 135,
    ᐃⲆⲆΔⵠ: 136,
    ⲆⲆᐃᐃᐃ: 137,
    ⲆⲆᐃᐃΔ: 138,
    ᐃⲆⵠΔΔ: 139,
    ⲆⵠᐃΔᐃ: 140,
    ᐃⵠΔⵠⲆ: 141,
    ᐃⵠⵠᐃᐃ: 142,
    ⲆΔⵠⲆᐃ: 143,
    ⲆⵠⲆⲆⵠ: 144,
    Δᐃⵠⵠⵠ: 145,
    ΔⵠᐃⵠΔ: 146,
    ᐃᐃⲆⵠⵠ: 147,
    ⲆΔᐃⵠΔ: 148,
    ΔΔΔⵠⵠ: 149,
    ᐃⵠⵠⲆᐃ: 150,
    ⵠⵠᐃⵠⲆ: 151,
    ⵠⲆⲆᐃⲆ: 152,
    ⲆⲆᐃΔᐃ: 153,
    ⵠᐃΔⵠΔ: 154,
    ⲆⵠⵠΔⲆ: 155,
    ᐃΔⲆⵠᐃ: 156,
    ΔᐃᐃΔⲆ: 157,
    ᐃᐃⲆⲆΔ: 158,
    ᐃᐃΔⲆΔ: 159,
    ΔⲆⲆΔⲆ: 160,
    ⲆΔⲆⵠⵠ: 161,
    ⵠᐃᐃⲆΔ: 162,
    ᐃⵠⲆΔⵠ: 163,
    ᐃΔΔⲆΔ: 164,
    ⲆⵠᐃᐃΔ: 165,
    ᐃΔⲆⵠⲆ: 166,
    ⲆⲆⵠᐃΔ: 167,
    ᐃΔᐃⲆⲆ: 168,
    ᐃᐃᐃΔⵠ: 169,
    ⲆⵠⵠᐃΔ: 170,
    ᐃⲆⵠΔᐃ: 171,
    ᐃⵠΔⲆᐃ: 172,
    ΔΔⵠᐃᐃ: 173,
    ᐃΔⵠⵠᐃ: 174,
    ⵠΔΔΔⵠ: 175,
    ⲆⲆΔⲆᐃ: 176
  };
  ps = Gk;
  var us = {
    ᐃΔⲆᐃⵠ: 0,
    ᐃᐃⲆⲆⵠ: 1,
    ⲆⲆⲆᐃᐃ: 2,
    ᐃⲆᐃΔΔ: 3,
    Ⲇᐃᐃⵠᐃ: 4,
    ᐃⵠᐃⲆΔ: 5,
    ⵠᐃⵠⵠΔ: 6,
    ᐃⵠⲆⲆΔ: 7,
    ⲆⲆⲆΔΔ: 8,
    ⲆⲆᐃⵠⲆ: 9,
    ΔⵠᐃΔⲆ: 10,
    ᐃᐃᐃⵠΔ: 11,
    ⵠᐃΔⵠⵠ: 12,
    ⲆⲆⵠⲆⵠ: 13,
    ᐃΔⵠΔⲆ: 14,
    ΔⲆⲆⲆⲆ: 15,
    ⵠⲆΔΔΔ: 16,
    ᐃᐃΔⵠΔ: 17,
    ΔⲆⵠᐃᐃ: 18,
    ⵠⵠΔΔⲆ: 19,
    ᐃᐃⲆΔᐃ: 20,
    ⲆⵠⲆⲆⲆ: 21,
    ΔΔΔΔΔ: 22,
    Ⲇᐃⵠᐃᐃ: 23,
    ⵠⲆΔᐃᐃ: 24,
    ⵠᐃⵠᐃᐃ: 25,
    ᐃⵠΔⲆΔ: 26,
    ΔⵠᐃⲆᐃ: 27,
    ΔⵠᐃⲆⲆ: 28,
    ⵠⲆᐃⲆ: 29,
    ᐃΔᐃⵠΔ: 30,
    ⵠⵠⲆᐃᐃ: 31,
    ⵠⲆⵠΔⲆ: 32,
    ⵠᐃᐃⵠΔ: 33,
    ⵠΔⲆⲆᐃ: 34,
    ΔⵠⲆⵠⵠ: 35,
    ΔⵠᐃᐃⲆ: 36,
    ⵠⲆᐃⲆΔ: 37,
    ΔΔⲆᐃⵠ: 38,
    ΔΔΔᐃᐃ: 39,
    ⲆᐃᐃΔⵠ: 40,
    ΔᐃⲆᐃᐃ: 41,
    ⲆⲆⲆⲆⲆ: 42,
    ᐃⵠⲆⵠᐃ: 43,
    ᐃⵠⲆⲆⵠ: 44,
    ⵠⲆⲆΔⵠ: 45,
    ΔΔⲆᐃΔ: 46,
    ᐃⲆΔⵠᐃ: 47,
    ⲆΔΔⲆⲆ: 48,
    ⵠⲆΔᐃΔ: 49,
    ᐃΔΔⲆⲆ: 50,
    ᐃΔⵠΔΔ: 51,
    ⵠⵠⲆⵠⲆ: 52,
    ⲆⲆᐃΔΔ: 53,
    ⵠᐃΔᐃⲆ: 54,
    ΔⲆⲆᐃΔ: 55,
    ᐃᐃᐃᐃᐃ: 56,
    ⵠᐃⵠⲆᐃ: 57,
    ᐃⲆΔⵠⵠ: 58,
    ΔⵠᐃᐃΔ: 59,
    ⲆᐃⵠⲆᐃ: 60,
    ᐃⵠΔᐃⵠ: 61,
    ᐃᐃᐃᐃⲆ: 62,
    ⵠΔⵠⲆᐃ: 63,
    ᐃᐃⲆⲆⲆ: 64,
    ⲆⵠΔⲆᐃ: 65,
    ⵠΔᐃⲆⲆ: 66,
    ⲆⲆᐃᐃᐃ: 67,
    ᐃⲆⵠΔΔ: 68,
    ᐃⵠΔⵠⲆ: 69,
    ⲆΔⵠⲆᐃ: 70,
    Δᐃⵠⵠⵠ: 71,
    ΔⵠᐃⵠΔ: 72,
    ᐃᐃⲆⵠⵠ: 73,
    ⲆΔᐃⵠΔ: 74,
    ΔΔΔⵠⵠ: 75,
    ᐃⵠⵠⲆᐃ: 76,
    ⵠⵠᐃⵠⲆ: 77,
    ⵠⲆⲆᐃⲆ: 78,
    ⲆⲆᐃΔᐃ: 79,
    ΔᐃⲆⵠΔ: 80,
    ⵠⲆᐃΔΔ: 81,
    ΔΔⲆΔᐃ: 82,
    ⵠᐃΔⵠΔ: 83,
    ⲆⵠⵠΔⲆ: 84,
    ᐃΔⲆⵠᐃ: 85,
    ΔᐃᐃΔⲆ: 86,
    ΔᐃΔⵠΔ: 87,
    ᐃΔⵠⲆⲆ: 88,
    ⲆⵠᐃᐃΔ: 89,
    ΔΔⵠᐃᐃ: 90,
    ⲆⲆΔⲆᐃ: 91,
    ᐃΔⵠⵠᐃ: 92,
    ⵠΔΔΔⵠ: 93,
    ⲆⲆⵠᐃΔ: 94,
    ᐃΔᐃⲆⲆ: 95,
    ᐃᐃᐃΔⵠ: 96,
    ⲆⵠⵠᐃΔ: 97,
    ᐃⲆⵠΔᐃ: 98,
    ᐃⵠΔⲆᐃ: 99,
    ⵠΔᐃⵠⲆ: 100,
    ⲆΔᐃΔᐃ: 101,
    ΔⲆⲆᐃᐃ: 102,
    ᐃⲆⲆΔⵠ: 103,
    ⲆⲆᐃᐃΔ: 104,
    ⲆⵠᐃΔᐃ: 105,
    ᐃⵠⵠᐃᐃ: 106,
    ⲆⵠⲆⲆⵠ: 107,
    ᐃⵠⲆⲆ: 108,
    ΔΔⲆᐃ: 109,
    ⲆᐃⲆⵠΔ: 110,
    ⲆΔⲆⵠ: 111,
    ⲆΔΔΔ: 112,
    ⲆⲆᐃΔⵠ: 113,
    ΔⲆⵠⲆⲆ: 114,
    ᐃⵠⵠⵠⵠ: 115,
    ΔΔⲆΔΔ: 116,
    ⵠΔᐃⲆⵠ: 117,
    ᐃΔΔᐃⲆ: 118,
    ᐃᐃΔⲆⵠ: 119,
    ⵠᐃⵠⲆⲆ: 120,
    ⲆⲆΔΔ: 121,
    ΔΔⲆᐃᐃ: 122,
    ᐃΔⲆΔΔ: 123,
    ⵠΔᐃⵠⵠ: 124,
    ΔΔᐃΔⵠ: 125,
    ⲆΔⲆⲆΔ: 126,
    ⵠᐃᐃⲆᐃ: 127,
    ⲆᐃΔⲆΔ: 128,
    ᐃᐃΔᐃⲆ: 129,
    ⲆΔⲆᐃⲆ: 130,
    ⵠⵠᐃᐃⵠ: 131,
    ⵠⵠᐃⲆⵠ: 132,
    ᐃⵠⲆΔᐃ: 133,
    Δⵠᐃⵠⵠ: 134,
    ᐃⲆᐃⲆⲆ: 135,
    ΔⵠⲆⵠᐃ: 136,
    ⵠⲆΔⲆⲆ: 137,
    ᐃΔΔΔⵠ: 138,
    ⲆΔᐃⲆΔ: 139,
    Ⲇᐃⵠⵠᐃ: 140,
    ΔΔⲆⲆⲆ: 141,
    ⲆⵠΔᐃᐃ: 142,
    ΔⲆᐃⲆⵠ: 143,
    ⲆⵠⲆⵠⵠ: 144,
    ΔΔⲆⵠΔ: 145,
    ⵠⲆⵠⲆΔ: 146,
    ⵠⲆΔⲆᐃ: 147,
    ⲆΔΔᐃᐃ: 148,
    ΔᐃΔⵠⲆ: 149,
    ⵠᐃⲆⲆΔ: 150,
    ⲆⵠⲆⵠᐃ: 151,
    ⵠⵠⲆⲆⲆ: 152,
    ᐃΔΔᐃΔ: 153,
    ΔΔΔⲆΔ: 154,
    ⲆᐃⲆᐃΔ: 155,
    ⵠⲆΔⵠᐃ: 156,
    ΔⵠΔⵠⵠ: 157,
    ᐃⵠᐃᐃᐃ: 158,
    ⵠⲆⵠⲆⲆ: 159,
    ⲆΔⵠΔⵠ: 160,
    ᐃⲆᐃⵠᐃ: 161,
    ᐃⵠⵠⲆⵠ: 162,
    ⵠᐃᐃᐃᐃ: 163,
    ΔᐃΔⵠᐃ: 164,
    ⲆᐃⵠⲆΔ: 165,
    Ⲇⵠⵠⵠᐃ: 166,
    ⵠⲆᐃᐃΔ: 167,
    ΔᐃⲆᐃⵠ: 168,
    ⵠⵠᐃⲆⲆ: 169,
    ⵠΔΔΔᐃ: 170,
    ⵠΔΔᐃⲆ: 171,
    ⲆⵠᐃⲆΔ: 172,
    ⲆΔⲆⲆⲆ: 173,
    ⵠⲆΔᐃⲆ: 174,
    ᐃΔⵠΔᐃ: 175,
    ⲆᐃⲆⵠⵠ: 176,
    ⵠⵠΔᐃⲆ: 177,
    ⵠᐃⲆⵠⵠ: 178,
    ⲆᐃΔΔⵠ: 179,
    ᐃᐃⲆⲆΔ: 180,
    ᐃᐃΔⲆΔ: 181,
    ΔⲆⲆΔⲆ: 182,
    ⲆΔⲆⵠⵠ: 183,
    ᐃᐃᐃᐃⵠ: 184,
    ⲆⵠᐃⲆᐃ: 185,
    ᐃΔⵠᐃⵠ: 186,
    ᐃⵠᐃᐃⲆ: 187,
    ⵠΔΔⵠΔ: 188,
    ⵠΔⲆΔΔ: 189,
    ΔΔᐃΔⲆ: 190,
    ⲆᐃⵠΔⵠ: 191,
    ⲆᐃⵠΔΔ: 192,
    ΔΔᐃⵠⵠ: 193,
    ⵠᐃⵠᐃⵠ: 194,
    ⵠⲆⵠΔᐃ: 195,
    ΔⵠⲆᐃΔ: 196,
    ΔᐃᐃⲆⵠ: 197,
    ⵠᐃᐃⲆΔ: 198,
    ⵠΔⵠⲆΔ: 199,
    ΔᐃᐃⲆⲆ: 200,
    ⲆⲆᐃᐃⵠ: 201,
    ⵠⲆⵠⵠ: 202,
    ΔⵠΔⵠᐃ: 203,
    ⲆⵠΔᐃⵠ: 204,
    ᐃⵠᐃⲆⲆ: 205,
    ᐃⲆΔᐃⵠ: 206,
    Δⵠᐃⵠᐃ: 207,
    ⲆⲆΔⵠⲆ: 208,
    ΔΔΔᐃΔ: 209,
    ⲆⵠⲆΔⲆ: 210,
    ⵠᐃⲆΔΔ: 211,
    ΔΔⵠᐃⵠ: 212,
    ᐃᐃⲆᐃⲆ: 213,
    ᐃⲆⵠⲆⲆ: 214,
    ⲆᐃΔᐃⵠ: 215,
    ⲆⲆΔᐃⵠ: 216,
    ⲆⲆⲆᐃΔ: 217,
    ΔΔⲆⵠᐃ: 218,
    ⲆΔΔⵠⲆ: 219,
    ᐃΔⲆⲆⵠ: 220,
    ⵠᐃⲆᐃⲆ: 221,
    ⵠⵠⵠⲆⵠ: 222,
    ᐃⵠⲆΔⵠ: 223,
    ᐃΔΔⲆΔ: 224,
    ΔⲆᐃΔΔ: 225,
    ⵠᐃᐃΔΔ: 226,
    ΔⲆᐃⲆᐃ: 227,
    ⲆᐃⲆⵠᐃ: 228,
    ⵠⲆΔΔⵠ: 229,
    ᐃΔⲆⵠⲆ: 230,
    ᐃΔΔⵠⵠ: 231,
    ⵠᐃⵠΔⵠ: 232,
    ⵠⲆⲆΔΔ: 233,
    ΔⲆΔⲆⵠ: 234,
    ⵠⵠⵠⵠⵠᐃⵠ: 235,
    ⵠⲆⲆᐃᐃⲆΔ: 236,
    Δᐃᐃᐃⵠ: 237,
    ⲆΔⲆᐃⵠ: 238,
    ᐃⲆᐃᐃⲆ: 239,
    ⲆᐃⵠⲆⵠ: 240
  };
  const vs = Wa;
  const ws = mn;
  var xs = {
    ᐃΔᐃᐃⵠ: 2,
    ⵠⵠΔΔΔ: 4,
    ⵠⲆⵠⲆⵠ: 0,
    ᐃᐃⵠⲆ: 1,
    ⵠΔΔⵠⵠ: 3,
    ⵠΔⲆⲆΔ: un
  };
  const ys = Mk;
  var zs = [];
  zs[109] = {
    name: "Wood",
    ⵠⵠ: 316,
    Ⲇⵠⵠⵠ: Aa,
    ⲆⵠⲆⲆ: 0
  };
  zs[108] = {
    name: "Stone",
    ⵠⵠ: 315,
    Ⲇⵠⵠⵠ: tj,
    ⲆⵠⲆⲆ: Aa
  };
  const As = Dn;
  const js = La;
  const Bs = tq;
  zs[111] = {
    name: "Gold",
    ⵠⵠ: 297,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: An
  };
  zs[112] = {
    name: "Diamond",
    ⵠⵠ: 298,
    Ⲇⵠⵠⵠ: Gk,
    ⲆⵠⲆⲆ: Fj
  };
  const Cs = Er;
  zs[121] = {
    name: "Amethyst",
    ⵠⵠ: 418,
    Ⲇⵠⵠⵠ: xq,
    ⲆⵠⲆⲆ: 0
  };
  const Ds = Vq;
  zs[2] = {
    name: "Rabbit fur",
    ⵠⵠ: 368,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: tj
  };
  const Es = Mr;
  zs[174] = {
    name: "Wolf fur",
    ⵠⵠ: 393,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: xq
  };
  const Fs = I;
  const qs = Mn;
  const Gs = Rj;
  zs[237] = {
    name: "Boar fur",
    ⵠⵠ: 1162,
    Ⲇⵠⵠⵠ: xq,
    ⲆⵠⲆⲆ: 0
  };
  const Hs = nq;
  const Is = S;
  const Js = 256;
  const Ks = Ij;
  zs[100] = {
    name: "Firefly",
    ⵠⵠ: 1164,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Qr
  };
  zs[101] = {
    name: "Wood arrow",
    ⵠⵠ: 1166,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  const Ls = bs;
  zs[102] = {
    name: "Stone arrow",
    ⵠⵠ: 1169,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[103] = {
    name: "Gold arrow",
    ⵠⵠ: 1172,
    Ⲇⵠⵠⵠ: Aa,
    ⲆⵠⲆⲆ: 1
  };
  zs[104] = {
    name: "Diamond arrow",
    ⵠⵠ: 1175,
    Ⲇⵠⵠⵠ: Fj,
    ⲆⵠⲆⲆ: Ek
  };
  const Ms = rn;
  zs[105] = {
    name: "Amethyst arrow",
    ⵠⵠ: 1178,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: er
  };
  zs[106] = {
    name: "Reidite arrow",
    ⵠⵠ: 1181,
    Ⲇⵠⵠⵠ: yj,
    ⲆⵠⲆⲆ: 1
  };
  zs[107] = {
    name: "Dragon arrow",
    ⵠⵠ: 1184,
    Ⲇⵠⵠⵠ: yj,
    ⲆⵠⲆⲆ: yj
  };
  zs[146] = {
    name: "Winter fur",
    ⵠⵠ: 505,
    Ⲇⵠⵠⵠ: An,
    ⲆⵠⲆⲆ: xq
  };
  zs[240] = {
    name: "Fur mammoth",
    ⵠⵠ: 1233,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Qr
  };
  const Ns = Sn;
  const eh = cq;
  zs[161] = {
    name: "Web",
    ⵠⵠ: 305,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 0
  };
  zs[116] = {
    name: "Meat",
    ⵠⵠ: 300,
    Ⲇⵠⵠⵠ: Fj,
    ⲆⵠⲆⲆ: 0
  };
  const ih = Br;
  zs[137] = {
    name: "Fish",
    ⵠⵠ: 662,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Gk
  };
  zs[129] = {
    name: "Kraken skin",
    ⵠⵠ: 624,
    Ⲇⵠⵠⵠ: xq,
    ⲆⵠⲆⲆ: tj
  };
  zs[139] = {
    name: "Piranha scales",
    ⵠⵠ: 674,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 0
  };
  zs[142] = {
    name: "Ice",
    ⵠⵠ: 142,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Gk
  };
  zs[126] = {
    name: "Sand",
    ⵠⵠ: 609,
    Ⲇⵠⵠⵠ: Gk,
    ⲆⵠⲆⲆ: yj
  };
  const th = k;
  const nh = xa;
  zs[140] = {
    name: "Dirt",
    ⵠⵠ: 140,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 0
  };
  zs[110] = {
    name: "Berrie",
    ⵠⵠ: 277,
    Ⲇⵠⵠⵠ: Fj,
    ⲆⵠⲆⲆ: yj
  };
  const oh = Ms;
  const rh = zr;
  zs[131] = {
    name: "Flour",
    ⵠⵠ: 629,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 0
  };
  zs[134] = {
    name: "Flour",
    ⵠⵠ: 639,
    Ⲇⵠⵠⵠ: yj,
    ⲆⵠⲆⲆ: 0
  };
  const ah = gn;
  zs[178] = {
    name: "Special fur peasant",
    ⵠⵠ: 178,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 0
  };
  const sh = ra;
  const hh = In;
  const lh = Mk;
  zs[179] = {
    name: "Special fur hood",
    ⵠⵠ: 179,
    Ⲇⵠⵠⵠ: Qr,
    ⲆⵠⲆⲆ: xq
  };
  zs[189] = {
    name: "Pumpkin",
    ⵠⵠ: 814,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Fj
  };
  zs[192] = {
    name: "Garlic",
    ⵠⵠ: 840,
    Ⲇⵠⵠⵠ: An,
    ⲆⵠⲆⲆ: Qr
  };
  const gh = M;
  const uh = ca;
  const bh = Yn;
  zs[194] = {
    name: "Thornbush",
    ⵠⵠ: 850,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Aa
  };
  zs[205] = {
    name: "Carrot",
    ⵠⵠ: 955,
    Ⲇⵠⵠⵠ: Aa,
    ⲆⵠⲆⲆ: 0
  };
  zs[207] = {
    name: "Tomato",
    ⵠⵠ: 965,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 0
  };
  zs[209] = {
    name: "Watermelon",
    ⵠⵠ: 972,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 0
  };
  zs[211] = {
    name: "Aloe Vera",
    ⵠⵠ: 987,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 0
  };
  zs[222] = {
    name: "Penguin Feather",
    ⵠⵠ: 1035,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: An
  };
  zs[231] = {
    name: "Hawk Feather",
    ⵠⵠ: 1037,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 0
  };
  const vh = sn;
  zs[232] = {
    name: "Vulture Feather",
    ⵠⵠ: 1039,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Gk
  };
  zs[233] = {
    name: "Cactus",
    ⵠⵠ: 1154,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: xq
  };
  const dh = qn;
  const ch = Ha;
  zs[236] = {
    name: "Cactus",
    ⵠⵠ: 1160,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: An
  };
  zs[235] = {
    name: "Pitchfork Part",
    ⵠⵠ: 1158,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 0
  };
  const mh = ok;
  const ph = R;
  const Ch = Tk;
  const Th = En;
  zs[238] = {
    name: "Emerald Machine",
    ⵠⵠ: 1187,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: tj
  };
  const fh = br;
  zs[234] = {
    name: "Emerald",
    ⵠⵠ: 1156,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: xq
  };
  const zh = po;
  const yh = I;
  zs[41] = {
    name: "Christmas Hat",
    ⵠⵠ: 880,
    ⲆⵠⲆⲆ: Fj
  };
  const wh = er;
  zs[42] = {
    name: "Elf Hat",
    ⵠⵠ: 882,
    ⲆⵠⲆⲆ: xq
  };
  zs[201] = {
    name: "Garland",
    ⵠⵠ: 870,
    ⲆⵠⲆⲆ: Fj,
    Ⲇⵠⵠⵠ: Qr
  };
  zs[200] = {
    name: "Candy",
    ⵠⵠ: 200,
    ⲆⵠⲆⲆ: 0
  };
  const Ph = Sq;
  const Ah = Fj;
  zs[199] = {
    name: "Sugar Cane",
    ⵠⵠ: 865,
    ⲆⵠⲆⲆ: 0
  };
  const kh = Oq;
  const xh = kk;
  zs[9] = {
    name: "Pirate Sword",
    ⵠⵠ: 860,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 0
  };
  zs[196] = {
    name: "Crab Stick",
    ⵠⵠ: 196,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 0
  };
  zs[202] = {
    name: "Reidite",
    ⵠⵠ: 938,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: yj
  };
  zs[203] = {
    name: "Flame",
    ⵠⵠ: 936,
    Ⲇⵠⵠⵠ: Qr,
    ⲆⵠⲆⲆ: Qr
  };
  const Jh = vn;
  zs[113] = {
    name: "Campfire",
    ⵠⵠ: 302,
    Ⲇⵠⵠⵠ: xq,
    ⲆⵠⲆⲆ: 1
  };
  const Mh = Hn;
  zs[198] = {
    name: "Bed",
    ⵠⵠ: 909,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: _
  };
  zs[114] = {
    name: "Workbench",
    ⵠⵠ: 262,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  const Bh = _j;
  const Dh = f;
  const Eh = G;
  zs[0] = {
    name: "Stone sword",
    ⵠⵠ: 254,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[1] = {
    name: "Stone pick",
    ⵠⵠ: 256,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[115] = {
    name: "Berries bush",
    ⵠⵠ: 284,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 0
  };
  const Ih = Fj;
  zs[3] = {
    name: "Gold pick",
    ⵠⵠ: 295,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  const Sh = T;
  zs[4] = {
    name: "Diamond pick",
    ⵠⵠ: 257,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[57] = {
    name: "Wood sword",
    ⵠⵠ: 830,
    Ⲇⵠⵠⵠ: Aa,
    ⲆⵠⲆⲆ: 1
  };
  const Qh = Bs;
  const _h = bs;
  zs[5] = {
    name: "Gold sword",
    ⵠⵠ: 290,
    Ⲇⵠⵠⵠ: Aa,
    ⲆⵠⲆⲆ: 1
  };
  const Fh = $o;
  zs[6] = {
    name: "Diamond sword",
    ⵠⵠ: 291,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[8] = {
    name: "Wood pick",
    ⵠⵠ: 314,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[162] = {
    name: "Wood wall",
    ⵠⵠ: 318,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: bs
  };
  zs[160] = {
    name: "Wood spike",
    ⵠⵠ: 320,
    Ⲇⵠⵠⵠ: Fj,
    ⲆⵠⲆⲆ: ck
  };
  const Rh = Gs;
  zs[117] = {
    name: "Cooked meat",
    ⵠⵠ: 325,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: yj
  };
  const jh = Za;
  const Wh = li;
  const Lh = Sq;
  const Gh = Vq;
  zs[118] = {
    name: "Big campfire",
    ⵠⵠ: 327,
    Ⲇⵠⵠⵠ: xq,
    ⲆⵠⲆⲆ: 1
  };
  zs[195] = {
    name: "Bandage",
    ⵠⵠ: 304,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: er
  };
  const Oh = bn;
  zs[163] = {
    name: "Stone wall",
    ⵠⵠ: 263,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[164] = {
    name: "Gold wall",
    ⵠⵠ: 265,
    Ⲇⵠⵠⵠ: Aa,
    ⲆⵠⲆⲆ: 1
  };
  zs[165] = {
    name: "Diamond wall",
    ⵠⵠ: 332,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[166] = {
    name: "Wood door",
    ⵠⵠ: 268,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[167] = {
    name: "Chest",
    ⵠⵠ: 338,
    Ⲇⵠⵠⵠ: Gk,
    ⲆⵠⲆⲆ: 1
  };
  zs[168] = {
    name: "Stone spike",
    ⵠⵠ: 360,
    Ⲇⵠⵠⵠ: Ih,
    ⲆⵠⲆⲆ: bs
  };
  zs[169] = {
    name: "Gold spike",
    ⵠⵠ: 363,
    Ⲇⵠⵠⵠ: xq,
    ⲆⵠⲆⲆ: wh
  };
  zs[170] = {
    name: "Diamond spike",
    ⵠⵠ: 365,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[171] = {
    name: "Stone door",
    ⵠⵠ: 371,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: er
  };
  const Nh = co;
  zs[172] = {
    name: "Gold door",
    ⵠⵠ: 374,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  const qh = Jj;
  zs[173] = {
    name: "Diamond door",
    ⵠⵠ: 377,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  const Hh = ek;
  const Uh = _i;
  const Yh = Rh;
  const Kh = Rq;
  zs[10] = {
    name: "Chapka",
    ⵠⵠ: 370,
    Ⲇⵠⵠⵠ: Gk,
    ⲆⵠⲆⲆ: 1
  };
  zs[11] = {
    name: "Big Chapka",
    ⵠⵠ: 380,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  const Vh = go;
  const Xh = vs;
  zs[12] = {
    name: "Wood spear",
    ⵠⵠ: 402,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Ga
  };
  const Zh = ws;
  zs[13] = {
    name: "Stone spear",
    ⵠⵠ: 396,
    Ⲇⵠⵠⵠ: tj,
    ⲆⵠⲆⲆ: ck
  };
  zs[14] = {
    name: "Gold spear",
    ⵠⵠ: 399,
    Ⲇⵠⵠⵠ: tj,
    ⲆⵠⲆⲆ: Co
  };
  const $h = mn;
  const el = zj;
  zs[15] = {
    name: "Diamond spear",
    ⵠⵠ: 405,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Co
  };
  zs[16] = {
    name: "Dragon spear",
    ⵠⵠ: 876,
    Ⲇⵠⵠⵠ: An,
    ⲆⵠⲆⲆ: Gk
  };
  const il = X;
  zs[17] = {
    name: "Dragon spear",
    ⵠⵠ: 879,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 0
  };
  const tl = Dh;
  zs[18] = {
    name: "Crab spear",
    ⵠⵠ: 900,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[197] = {
    name: "Crab loot",
    ⵠⵠ: 197,
    Ⲇⵠⵠⵠ: Gk,
    ⲆⵠⲆⲆ: 0
  };
  zs[119] = {
    name: "Furnace",
    ⵠⵠ: 409,
    Ⲇⵠⵠⵠ: An,
    ⲆⵠⲆⲆ: Co
  };
  const nl = jq;
  const ol = Pj;
  zs[23] = {
    name: "Explorer hat",
    ⵠⵠ: 421,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[24] = {
    name: "Pirate hat",
    ⵠⵠ: 424,
    Ⲇⵠⵠⵠ: Gk,
    ⲆⵠⲆⲆ: 1
  };
  const rl = Qq;
  zs[87] = {
    name: "Flower hat",
    ⵠⵠ: 1228,
    Ⲇⵠⵠⵠ: Gk,
    ⲆⵠⲆⲆ: bs
  };
  zs[88] = {
    name: "Fur hat",
    ⵠⵠ: 1231,
    Ⲇⵠⵠⵠ: Aa,
    ⲆⵠⲆⲆ: wh
  };
  zs[58] = {
    name: "Wood helmet",
    ⵠⵠ: 827,
    Ⲇⵠⵠⵠ: Qr,
    ⲆⵠⲆⲆ: er
  };
  zs[25] = {
    name: "Stone helmet",
    ⵠⵠ: 430,
    Ⲇⵠⵠⵠ: Gk,
    ⲆⵠⲆⲆ: 1
  };
  zs[26] = {
    name: "Gold helmet",
    ⵠⵠ: 433,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Ni
  };
  const al = lh;
  zs[27] = {
    name: "Diamond helmet",
    ⵠⵠ: 436,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: _h
  };
  const sl = Ek;
  zs[28] = {
    name: "Book",
    ⵠⵠ: 439,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Ls
  };
  zs[120] = {
    name: "Paper",
    ⵠⵠ: 442,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 0
  };
  zs[29] = {
    name: "Bag",
    ⵠⵠ: 367,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[30] = {
    name: "Amethyst sword",
    ⵠⵠ: 456,
    Ⲇⵠⵠⵠ: Ih,
    ⲆⵠⲆⲆ: Ga
  };
  zs[31] = {
    name: "Amethyst pick",
    ⵠⵠ: 460,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[33] = {
    name: "Amethyst spear",
    ⵠⵠ: 473,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: wh
  };
  zs[35] = {
    name: "Stone hammer",
    ⵠⵠ: 478,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: er
  };
  zs[36] = {
    name: "Gold hammer",
    ⵠⵠ: 481,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Ek
  };
  zs[37] = {
    name: "Diamond hammer",
    ⵠⵠ: 484,
    Ⲇⵠⵠⵠ: An,
    ⲆⵠⲆⲆ: bs
  };
  zs[38] = {
    name: "Amethyst hammer",
    ⵠⵠ: 487,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[39] = {
    name: "Reidite hammer",
    ⵠⵠ: 490,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: wh
  };
  zs[122] = {
    name: "Amethyst wall",
    ⵠⵠ: 493,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: _
  };
  const hl = Ao;
  zs[123] = {
    name: "Amethyst spike",
    ⵠⵠ: 496,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Ga
  };
  zs[124] = {
    name: "Amethyst door",
    ⵠⵠ: 498,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: _h
  };
  zs[40] = {
    name: "Cap & scarf",
    ⵠⵠ: 503,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: wh
  };
  zs[147] = {
    name: "Blue cord",
    ⵠⵠ: 515,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 0
  };
  const ll = R;
  zs[148] = {
    name: "Lock",
    ⵠⵠ: 519,
    Ⲇⵠⵠⵠ: Ah,
    ⲆⵠⲆⲆ: 1
  };
  const gl = xq;
  zs[151] = {
    name: "Resurrection",
    ⵠⵠ: 530,
    Ⲇⵠⵠⵠ: Aa,
    ⲆⵠⲆⲆ: bs
  };
  zs[158] = {
    name: "Lockpick",
    ⵠⵠ: 533,
    Ⲇⵠⵠⵠ: Aa,
    ⲆⵠⲆⲆ: 1
  };
  const ul = Bh;
  const bl = Qe;
  const vl = Ia;
  const dl = Qn;
  zs[159] = {
    name: "Totem",
    ⵠⵠ: 555,
    Ⲇⵠⵠⵠ: Qr,
    ⲆⵠⲆⲆ: _h
  };
  const cl = Ir;
  const ml = ja;
  zs[43] = {
    name: "Amethyst helmet",
    ⵠⵠ: 542,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Ni
  };
  zs[45] = {
    name: "Super hammer",
    ⵠⵠ: 551,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Ek
  };
  const pl = Wn;
  const Cl = En;
  const Tl = fk;
  const fl = an;
  const zl = $e;
  zs[125] = {
    name: "Bridge",
    ⵠⵠ: 604,
    Ⲇⵠⵠⵠ: 1,
    ⲆⵠⲆⲆ: bs
  };
  const yl = Ko;
  const wl = po;
  const Pl = hl;
  zs[221] = {
    name: "Wood Tower",
    ⵠⵠ: 1235,
    Ⲇⵠⵠⵠ: 1,
    ⲆⵠⲆⲆ: 1
  };
  zs[127] = {
    name: "Bottle full",
    ⵠⵠ: 715,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 0
  };
  const Al = T;
  zs[128] = {
    name: "Bottle empty",
    ⵠⵠ: 611,
    Ⲇⵠⵠⵠ: Fj,
    ⲆⵠⲆⲆ: Qr
  };
  const kl = w;
  zs[46] = {
    name: "Stone shovel",
    ⵠⵠ: 618,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  const xl = Ch;
  zs[130] = {
    name: "Watering can",
    ⵠⵠ: 627,
    Ⲇⵠⵠⵠ: An,
    ⲆⵠⲆⲆ: Ih
  };
  zs[132] = {
    name: "Wheat",
    ⵠⵠ: 632,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: xq
  };
  zs[133] = {
    name: "Cookie",
    ⵠⵠ: 635,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: gl
  };
  zs[135] = {
    name: "Windmill",
    ⵠⵠ: 643,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[47] = {
    name: "Super diving suit",
    ⵠⵠ: 647,
    Ⲇⵠⵠⵠ: Aa,
    ⲆⵠⲆⲆ: bs
  };
  zs[48] = {
    name: "Diving mask",
    ⵠⵠ: 650,
    Ⲇⵠⵠⵠ: yj,
    ⲆⵠⲆⲆ: Ga
  };
  const Jl = hr;
  const Ml = $q;
  zs[49] = {
    name: "Watering can full",
    ⵠⵠ: 654,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 0
  };
  zs[136] = {
    name: "Cake",
    ⵠⵠ: 660,
    Ⲇⵠⵠⵠ: Ah,
    ⲆⵠⲆⲆ: Ih
  };
  const Bl = iq;
  const Dl = xj;
  zs[138] = {
    name: "Foodfish cooked",
    ⵠⵠ: 666,
    Ⲇⵠⵠⵠ: Aa,
    ⲆⵠⲆⲆ: Aa
  };
  zs[141] = {
    name: "Plot",
    ⵠⵠ: 684,
    Ⲇⵠⵠⵠ: Ls,
    ⲆⵠⲆⲆ: wh
  };
  zs[143] = {
    name: "Bread",
    ⵠⵠ: 690,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: An
  };
  const El = oo;
  zs[us.ΔⵠⲆⲆⵠΔⵠ] = {
    name: "Bottle full (with ice)",
    ⵠⵠ: rs.ⵠΔⲆΔᐃⵠΔⵠΔ,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[us.ⵠΔⲆⵠΔᐃᐃ] = {
    name: "Bottle full (with well)",
    ⵠⵠ: rs.ᐃⵠᐃΔⵠΔⵠⵠⵠ,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: sl
  };
  zs[50] = {
    name: "Gold shovel",
    ⵠⵠ: 700,
    Ⲇⵠⵠⵠ: Qr,
    ⲆⵠⲆⲆ: 1
  };
  zs[51] = {
    name: "Diamond shovel",
    ⵠⵠ: 704,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[52] = {
    name: "Amethyst shovel",
    ⵠⵠ: 706,
    Ⲇⵠⵠⵠ: Qr,
    ⲆⵠⲆⲆ: 1
  };
  const Il = yq;
  zs[55] = {
    name: "Spanner",
    ⵠⵠ: 711,
    Ⲇⵠⵠⵠ: Aa,
    ⲆⵠⲆⲆ: Ek
  };
  zs[56] = {
    name: "Machete",
    ⵠⵠ: 714,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: ck
  };
  const Sl = Sq;
  const Ql = wi;
  const _l = Ba;
  const Fl = qn;
  zs[144] = {
    name: "Bread oven",
    ⵠⵠ: 718,
    Ⲇⵠⵠⵠ: gl,
    ⲆⵠⲆⲆ: _
  };
  zs[145] = {
    name: "Sandwich",
    ⵠⵠ: 730,
    Ⲇⵠⵠⵠ: xq,
    ⲆⵠⲆⲆ: Qr
  };
  zs[59] = {
    name: "Dragon helmet",
    ⵠⵠ: 734,
    Ⲇⵠⵠⵠ: xq,
    ⲆⵠⲆⲆ: yj
  };
  const Rl = Ah;
  zs[60] = {
    name: "Dragon helmet",
    ⵠⵠ: 737,
    Ⲇⵠⵠⵠ: Ih,
    ⲆⵠⲆⲆ: yj
  };
  zs[90] = {
    name: "Witch",
    ⵠⵠ: 740,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Rl
  };
  if (bj.ⵠΔⵠΔᐃΔΔ) {
    var jl = bj.Math.acos;
    bj.Math.acos = bj.Math.asin;
    bj.Math.asin = jl;
    var Wl = bj.Math.acos;
    bj.Math.acos = bj.Math.asin;
    bj.Math.asin = Wl;
  }
  const Ll = $h;
  const Gl = On;
  zs[91] = {
    name: "Nimbus",
    ⵠⵠ: 743,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: tj
  };
  zs[92] = {
    name: "Wand1",
    ⵠⵠ: 746,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Aa
  };
  zs[93] = {
    name: "Wand2",
    ⵠⵠ: 749,
    Ⲇⵠⵠⵠ: Fj,
    ⲆⵠⲆⲆ: Ih
  };
  const Ol = qo;
  zs[62] = {
    name: "Dragon sword",
    ⵠⵠ: 564,
    Ⲇⵠⵠⵠ: Aa,
    ⲆⵠⲆⲆ: 0
  };
  const Nl = ms;
  zs[63] = {
    name: "Dragon sword",
    ⵠⵠ: 567,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Gk
  };
  const ql = C;
  const Hl = qa;
  zs[71] = {
    name: "Wood shield",
    ⵠⵠ: 1238,
    Ⲇⵠⵠⵠ: xq,
    ⲆⵠⲆⲆ: 1
  };
  zs[72] = {
    name: "Stone shield",
    ⵠⵠ: 1241,
    Ⲇⵠⵠⵠ: Ih,
    ⲆⵠⲆⲆ: ck
  };
  zs[73] = {
    name: "Gold shield",
    ⵠⵠ: 1244,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: ck
  };
  zs[74] = {
    name: "Diamond shield",
    ⵠⵠ: 1247,
    Ⲇⵠⵠⵠ: Rl,
    ⲆⵠⲆⲆ: 1
  };
  const Ul = Kh;
  zs[75] = {
    name: "Amethyst shield",
    ⵠⵠ: 1250,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  const Yl = ul;
  const Kl = nl;
  const Vl = Eh;
  const Xl = lh;
  zs[76] = {
    name: "Reidite shield",
    ⵠⵠ: 1253,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[94] = {
    name: "Wood axe",
    ⵠⵠ: 1256,
    Ⲇⵠⵠⵠ: Fj,
    ⲆⵠⲆⲆ: 1
  };
  const Zl = Ge;
  zs[95] = {
    name: "Stone axe",
    ⵠⵠ: 1259,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  const $l = Kn;
  const eg = Qq;
  zs[96] = {
    name: "Gold axe",
    ⵠⵠ: 1262,
    Ⲇⵠⵠⵠ: yj,
    ⲆⵠⲆⲆ: 1
  };
  zs[97] = {
    name: "Diamond axe",
    ⵠⵠ: 1265,
    Ⲇⵠⵠⵠ: Ah,
    ⲆⵠⲆⲆ: _
  };
  zs[98] = {
    name: "Amethyst axe",
    ⵠⵠ: 1268,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  const ig = _;
  zs[99] = {
    name: "Reidite axe",
    ⵠⵠ: 1271,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: er
  };
  zs[64] = {
    name: "Wood bow",
    ⵠⵠ: 570,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Ek
  };
  zs[65] = {
    name: "Stone bow",
    ⵠⵠ: 573,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  const tg = ol;
  const ng = Wa;
  zs[66] = {
    name: "Gold bow",
    ⵠⵠ: 576,
    Ⲇⵠⵠⵠ: Ih,
    ⲆⵠⲆⲆ: 1
  };
  zs[67] = {
    name: "Diamond bow",
    ⵠⵠ: 579,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  const og = ba;
  const rg = bh;
  const ag = zh;
  zs[68] = {
    name: "Amethyst bow",
    ⵠⵠ: 582,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Ni
  };
  zs[69] = {
    name: "Reidite bow",
    ⵠⵠ: 585,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  const sg = pa;
  const hg = ds;
  const lg = vl;
  const gg = Dh;
  zs[70] = {
    name: "Dragon bow",
    ⵠⵠ: 588,
    Ⲇⵠⵠⵠ: Fj,
    ⲆⵠⲆⲆ: 0
  };
  const ug = ph;
  const bg = F;
  zs[77] = {
    name: "Crown of life",
    ⵠⵠ: 758,
    Ⲇⵠⵠⵠ: Qr,
    ⲆⵠⲆⲆ: Aa
  };
  const vg = ih;
  zs[175] = {
    name: "Gem of life",
    ⵠⵠ: 176,
    Ⲇⵠⵠⵠ: gl,
    ⲆⵠⲆⲆ: 0
  };
  const dg = ba;
  const cg = Bs;
  const mg = ge;
  const pg = ws;
  zs[185] = {
    name: "Orb of the dragon",
    ⵠⵠ: 252,
    Ⲇⵠⵠⵠ: Rl,
    ⲆⵠⲆⲆ: xq
  };
  zs[187] = {
    name: "Orb of the dragon",
    ⵠⵠ: 253,
    Ⲇⵠⵠⵠ: gl,
    ⲆⵠⲆⲆ: Fj
  };
  const Cg = Dj;
  const Tg = Wh;
  zs[184] = {
    name: "Cube of the dragon",
    ⵠⵠ: 751,
    Ⲇⵠⵠⵠ: Qr,
    ⲆⵠⲆⲆ: yj
  };
  zs[186] = {
    name: "Cube of the dragon",
    ⵠⵠ: 753,
    Ⲇⵠⵠⵠ: xq,
    ⲆⵠⲆⲆ: tj
  };
  zs[78] = {
    name: "Crown of luck",
    ⵠⵠ: 762,
    Ⲇⵠⵠⵠ: tj,
    ⲆⵠⲆⲆ: 0
  };
  const fg = Qr;
  const zg = Cl;
  zs[176] = {
    name: "Gem of luck",
    ⵠⵠ: 177,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: gl
  };
  zs[79] = {
    name: "Crown of the angel",
    ⵠⵠ: 770,
    Ⲇⵠⵠⵠ: Ah,
    ⲆⵠⲆⲆ: 0
  };
  const yg = I;
  zs[177] = {
    name: "Gem of the angel",
    ⵠⵠ: 175,
    Ⲇⵠⵠⵠ: Gk,
    ⲆⵠⲆⲆ: Fj
  };
  zs[149] = {
    name: "Dragon heart",
    ⵠⵠ: 521,
    Ⲇⵠⵠⵠ: Fj,
    ⲆⵠⲆⲆ: 0
  };
  const wg = ak;
  zs[150] = {
    name: "Lava heart",
    ⵠⵠ: 523,
    Ⲇⵠⵠⵠ: Aa,
    ⲆⵠⲆⲆ: 0
  };
  zs[83] = {
    name: "Hood",
    ⵠⵠ: 768,
    Ⲇⵠⵠⵠ: yj,
    ⲆⵠⲆⲆ: 1
  };
  zs[84] = {
    name: "Peasant",
    ⵠⵠ: 772,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[86] = {
    name: "Winter peasant",
    ⵠⵠ: 777,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Ih
  };
  zs[85] = {
    name: "Winter hood",
    ⵠⵠ: 780,
    Ⲇⵠⵠⵠ: tj,
    ⲆⵠⲆⲆ: 0
  };
  zs[180] = {
    name: "Bucket full",
    ⵠⵠ: 784,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Rl
  };
  const Pg = Yl;
  zs[181] = {
    name: "Bucket empty",
    ⵠⵠ: 785,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[182] = {
    name: "Well",
    ⵠⵠ: 791,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[183] = {
    name: "Sign",
    ⵠⵠ: 799,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: er
  };
  zs[188] = {
    name: "Pumpkin Seed",
    ⵠⵠ: 809,
    Ⲇⵠⵠⵠ: Aa,
    ⲆⵠⲆⲆ: An
  };
  zs[191] = {
    name: "Garlic Seed",
    ⵠⵠ: 835,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: gl
  };
  zs[193] = {
    name: "Thorbushes Seed",
    ⵠⵠ: 846,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: tj
  };
  zs[190] = {
    name: "Roof",
    ⵠⵠ: 843,
    Ⲇⵠⵠⵠ: 1,
    ⲆⵠⲆⲆ: 1
  };
  const Ag = ol;
  const kg = fr;
  zs[61] = {
    name: "Crab Crown",
    ⵠⵠ: 912,
    Ⲇⵠⵠⵠ: Ih,
    ⲆⵠⲆⲆ: ig
  };
  zs[204] = {
    name: "Carrot Seed",
    ⵠⵠ: 950,
    Ⲇⵠⵠⵠ: yj,
    ⲆⵠⲆⲆ: 0
  };
  const xg = je;
  zs[206] = {
    name: "Tomato Seed",
    ⵠⵠ: 960,
    Ⲇⵠⵠⵠ: gl,
    ⲆⵠⲆⲆ: 0
  };
  zs[208] = {
    name: "Watermelon Seed",
    ⵠⵠ: 967,
    Ⲇⵠⵠⵠ: Gk,
    ⲆⵠⲆⲆ: xq
  };
  zs[210] = {
    name: "Aloe Vera Seed",
    ⵠⵠ: 982,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Fj
  };
  zs[80] = {
    name: "Cap",
    ⵠⵠ: 1138,
    Ⲇⵠⵠⵠ: fg,
    ⲆⵠⲆⲆ: Ni
  };
  zs[81] = {
    name: "Turban",
    ⵠⵠ: 1141,
    Ⲇⵠⵠⵠ: gl,
    ⲆⵠⲆⲆ: 1
  };
  const Jg = sg;
  zs[82] = {
    name: "Pilot Helmet",
    ⵠⵠ: 427,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  const Mg = ig;
  zs[152] = {
    name: "Emerald Machine",
    ⵠⵠ: 1196,
    Ⲇⵠⵠⵠ: xq,
    ⲆⵠⲆⲆ: Aa
  };
  const Bg = wl;
  const Dg = Xq;
  zs[153] = {
    name: "Emerald Machine",
    ⵠⵠ: 1200,
    Ⲇⵠⵠⵠ: Aa,
    ⲆⵠⲆⲆ: er
  };
  zs[154] = {
    name: "Emerald Machine",
    ⵠⵠ: 1204,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  const Eg = Ks;
  zs[155] = {
    name: "Emerald Machine",
    ⵠⵠ: 1208,
    Ⲇⵠⵠⵠ: fg,
    ⲆⵠⲆⲆ: 1
  };
  const Ig = rl;
  const Sg = dl;
  zs[156] = {
    name: "Emerald Machine",
    ⵠⵠ: 1212,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: er
  };
  const Qg = Bs;
  zs[157] = {
    name: "Emerald Machine",
    ⵠⵠ: 1216,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[53] = {
    name: "Pitchfork",
    ⵠⵠ: 977,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[212] = {
    name: "Wood Door Spike",
    ⵠⵠ: 990,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  const _g = Kl;
  zs[213] = {
    name: "Stone Door Spike",
    ⵠⵠ: 993,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[214] = {
    name: "Gold Door Spike",
    ⵠⵠ: 996,
    Ⲇⵠⵠⵠ: Fj,
    ⲆⵠⲆⲆ: bs
  };
  zs[215] = {
    name: "Diamond Door Spike",
    ⵠⵠ: 999,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Ls
  };
  zs[216] = {
    name: "Amethyst Door Spike",
    ⵠⵠ: 1002,
    Ⲇⵠⵠⵠ: gl,
    ⲆⵠⲆⲆ: _
  };
  const Fg = hl;
  zs[20] = {
    name: "Diamond Fire Protection ",
    ⵠⵠ: 922,
    Ⲇⵠⵠⵠ: yj,
    ⲆⵠⲆⲆ: 1
  };
  zs[21] = {
    name: "Amethyst Fire Protection ",
    ⵠⵠ: 926,
    Ⲇⵠⵠⵠ: An,
    ⲆⵠⲆⲆ: ig
  };
  const Rg = $o;
  const jg = X;
  const Wg = F;
  zs[22] = {
    name: "Amethyst Fire Protection ",
    ⵠⵠ: 930,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Ni
  };
  zs[19] = {
    name: "Reidite Sword",
    ⵠⵠ: 933,
    Ⲇⵠⵠⵠ: gl,
    ⲆⵠⲆⲆ: 1
  };
  const Lg = Jj;
  const Gg = An;
  zs[34] = {
    name: "Reidite Spear",
    ⵠⵠ: 944,
    Ⲇⵠⵠⵠ: Gg,
    ⲆⵠⲆⲆ: 1
  };
  zs[44] = {
    name: "Reidite Helmet",
    ⵠⵠ: 947,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: ck
  };
  const Og = eh;
  zs[220] = {
    name: "Reidite Door Spike",
    ⵠⵠ: 1005,
    Ⲇⵠⵠⵠ: An,
    ⲆⵠⲆⲆ: wh
  };
  zs[218] = {
    name: "Reidite Door",
    ⵠⵠ: 1008,
    Ⲇⵠⵠⵠ: yj,
    ⲆⵠⲆⲆ: 1
  };
  const Ng = Cg;
  zs[219] = {
    name: "Reidite Spike",
    ⵠⵠ: 1011,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: _
  };
  const qg = _q;
  zs[217] = {
    name: "Reidite Wall",
    ⵠⵠ: 1014,
    Ⲇⵠⵠⵠ: Ih,
    ⲆⵠⲆⲆ: sl
  };
  const Hg = Bk;
  const Ug = $e;
  zs[32] = {
    name: "Reidite pick",
    ⵠⵠ: 1019,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 1
  };
  zs[223] = {
    name: "Boat",
    ⵠⵠ: 1027,
    Ⲇⵠⵠⵠ: Ah,
    ⲆⵠⲆⲆ: 1
  };
  const Yg = R;
  zs[224] = {
    name: "Sled",
    ⵠⵠ: 1030,
    Ⲇⵠⵠⵠ: Fj,
    ⲆⵠⲆⲆ: 1
  };
  const Kg = Co;
  const Vg = Zn;
  zs[89] = {
    name: "Saddle",
    ⵠⵠ: 1048,
    Ⲇⵠⵠⵠ: gl,
    ⲆⵠⲆⲆ: Ga
  };
  zs[225] = {
    name: "Mount Boar",
    ⵠⵠ: 1051,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Fj
  };
  zs[226] = {
    name: "Mount King Crab",
    ⵠⵠ: 1191,
    Ⲇⵠⵠⵠ: yj,
    ⲆⵠⲆⲆ: 0
  };
  zs[227] = {
    name: "Mount Baby Dragon",
    ⵠⵠ: 1082,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 0
  };
  const Xg = Mr;
  zs[228] = {
    name: "Mount Baby Lava",
    ⵠⵠ: 1097,
    Ⲇⵠⵠⵠ: tj,
    ⲆⵠⲆⲆ: 0
  };
  const Zg = Ks;
  const $g = j;
  zs[229] = {
    name: "Mount Hawk",
    ⵠⵠ: 1112,
    Ⲇⵠⵠⵠ: Qr,
    ⲆⵠⲆⲆ: gl
  };
  zs[230] = {
    name: "Plane",
    ⵠⵠ: 1116,
    Ⲇⵠⵠⵠ: gl,
    ⲆⵠⲆⲆ: 0
  };
  const Os = Sn;
  const Ps = pn;
  const Qs = oo;
  zs[54] = {
    name: "Pitchfork 2",
    ⵠⵠ: 980,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: 0
  };
  const Rs = Nk;
  zs[239] = {
    name: "Baby Mammoth",
    ⵠⵠ: 1226,
    Ⲇⵠⵠⵠ: 0,
    ⲆⵠⲆⲆ: Ah
  };
  var Ss = undefined;
  const Ts = qs;
  var Us = [{
    r: [[109, 25], [108, 5]],
    w: Ih,
    f: 0,
    ⵠᐃᐃ: 0,
    e: Rl,
    id: 0,
    ᐃⲆΔᐃ: 113,
    time: er / gs,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[113, 1], [109, 35], [108, 10]],
    w: An,
    f: 0,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 1,
    ᐃⲆΔᐃ: 118,
    time: _ / Zg,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[109, 150], [108, 50], [111, 15]],
    w: _h,
    f: 0,
    ⵠᐃᐃ: 0,
    e: Gg,
    id: 2,
    ᐃⲆΔᐃ: 119,
    time: 1 / zq,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[109, jk], [108, 10]],
    w: tj,
    f: 0,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 3,
    ᐃⲆΔᐃ: 114,
    time: _ / Oe,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[109, 10]],
    w: 0,
    f: tj,
    ⵠᐃᐃ: Fj,
    e: Aa,
    id: 4,
    ᐃⲆΔᐃ: 8,
    time: Ga / 3,
    ⲆⲆΔ: xs.ⵠⲆⵠⲆⵠ
  }, {
    r: [[8, er], [109, 50], [108, Zq]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 5,
    ᐃⲆΔᐃ: 1,
    time: 1 / 8,
    ⲆⲆΔ: xs.ⵠⲆⵠⲆⵠ
  }, {
    r: [[109, 40], [111, 20], [108, 30], [1, Ls]],
    w: 1,
    f: Aa,
    ⵠᐃᐃ: 0,
    e: Qr,
    id: 6,
    ᐃⲆΔᐃ: 3,
    time: 1 / Bs,
    ⲆⲆΔ: xs.ⵠⲆⵠⲆⵠ
  }, {
    r: [[112, 20], [111, 50], [108, 80], [3, 1]],
    w: Ni,
    f: 0,
    ⵠᐃᐃ: 0,
    e: Aa,
    id: 7,
    ᐃⲆΔᐃ: 4,
    time: 0.05,
    ⲆⲆΔ: xs.ⵠⲆⵠⲆⵠ
  }, {
    r: [[112, 40], [111, 60], [121, 30], [4, Co]],
    w: Ga,
    f: An,
    ⵠᐃᐃ: xq,
    e: fg,
    id: 8,
    ᐃⲆΔᐃ: 31,
    time: bs / 60,
    ⲆⲆΔ: xs.ⵠⲆⵠⲆⵠ
  }, {
    r: [[121, 30], [112, 40], [202, 30], [31, er]],
    w: 1,
    f: Qr,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 9,
    ᐃⲆΔᐃ: 32,
    time: 1 / 90,
    ⲆⲆΔ: xs.ⵠⲆⵠⲆⵠ
  }, {
    r: [[109, 90], [108, 50]],
    w: _h,
    f: 0,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 10,
    ᐃⲆΔᐃ: 35,
    time: 1 / bg,
    ⲆⲆΔ: xs.ⵠⲆⵠⲆⵠ
  }, {
    r: [[109, 160], [108, 120], [111, 80], [35, 1]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: 0,
    e: Fj,
    id: 11,
    ᐃⲆΔᐃ: 36,
    time: 1 / vs,
    ⲆⲆΔ: xs.ⵠⲆⵠⲆⵠ
  }, {
    r: [[112, 80], [108, 200], [111, 150], [36, 1]],
    w: ck,
    f: 0,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 12,
    ᐃⲆΔᐃ: 37,
    time: ck / 20,
    ⲆⲆΔ: xs.ⵠⲆⵠⲆⵠ
  }, {
    r: [[112, 160], [121, 60], [111, 250], [37, 1]],
    w: Co,
    f: tj,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 13,
    ᐃⲆΔᐃ: 38,
    time: Ek / 60,
    ⲆⲆΔ: xs.ⵠⲆⵠⲆⵠ
  }, {
    r: [[121, 160], [202, 60], [112, 250], [38, ck]],
    w: 1,
    f: Ah,
    ⵠᐃᐃ: Ih,
    e: 0,
    id: 14,
    ᐃⲆΔᐃ: 39,
    time: Ni / 90,
    ⲆⲆΔ: xs.ⵠⲆⵠⲆⵠ
  }, {
    r: [[39, Ni], [127, wh], [129, 1], [139, 10], [121, 20]],
    w: er,
    f: Ls,
    ⵠᐃᐃ: 0,
    e: Qr,
    id: 15,
    ᐃⲆΔᐃ: 45,
    time: 0.008333333333333333,
    ⲆⲆΔ: xs.ⵠⲆⵠⲆⵠ
  }, {
    r: [[109, 30], [108, vs]],
    w: _h,
    f: 0,
    ⵠᐃᐃ: 0,
    e: Rl,
    id: 16,
    ᐃⲆΔᐃ: 46,
    time: 0.2,
    ⲆⲆΔ: xs.ⵠⲆⵠⲆⵠ
  }, {
    r: [[46, bs], [111, zq], [108, 30], [109, 40]],
    w: 1,
    f: An,
    ⵠᐃᐃ: Ah,
    e: Ah,
    id: 17,
    ᐃⲆΔᐃ: 50,
    time: Ga / Ds,
    ⲆⲆΔ: xs.ⵠⲆⵠⲆⵠ
  }, {
    r: [[50, 1], [112, fl], [111, 50], [108, 80]],
    w: 1,
    f: fg,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 18,
    ᐃⲆΔᐃ: 51,
    time: Ni / qa,
    ⲆⲆΔ: xs.ⵠⲆⵠⲆⵠ
  }, {
    r: [[51, 1], [111, 60], [121, 30], [112, 40]],
    w: ig,
    f: Ih,
    ⵠᐃᐃ: yj,
    e: 0,
    id: 19,
    ᐃⲆΔᐃ: 52,
    time: _h / 40,
    ⲆⲆΔ: xs.ⵠⲆⵠⲆⵠ
  }, {
    r: [[109, 50]],
    w: er,
    f: Gk,
    ⵠᐃᐃ: fg,
    e: Ah,
    id: 20,
    ᐃⲆΔᐃ: 130,
    time: 0.2,
    ⲆⲆΔ: xs.ⵠⲆⵠⲆⵠ
  }, {
    r: [[130, wh]],
    w: Ih,
    f: Fj,
    ⵠᐃᐃ: er,
    e: Gg,
    id: 21,
    ᐃⲆΔᐃ: 49,
    time: Co / 5,
    ⲆⲆΔ: xs.ⵠⲆⵠⲆⵠ
  }, {
    r: [[109, bn], [108, 50]],
    w: Mg,
    f: gl,
    ⵠᐃᐃ: Fj,
    e: 0,
    id: 22,
    ᐃⲆΔᐃ: 53,
    time: _h / hh,
    ⲆⲆΔ: xs.ⵠⲆⵠⲆⵠ
  }, {
    r: [[53, _], [235, 1]],
    w: 1,
    f: fg,
    ⵠᐃᐃ: 0,
    e: An,
    id: 23,
    ᐃⲆΔᐃ: 54,
    time: Co / 60,
    ⲆⲆΔ: xs.ⵠⲆⵠⲆⵠ
  }, {
    r: [[120, cq], [161, 4], [174, ge]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: gl,
    e: 0,
    id: 24,
    ᐃⲆΔᐃ: 28,
    time: Ls / 15,
    ⲆⲆΔ: xs.ⵠⲆⵠⲆⵠ
  }, {
    r: [[109, 40]],
    w: yj,
    f: fg,
    ⵠᐃᐃ: gl,
    e: 0,
    id: 25,
    ᐃⲆΔᐃ: 12,
    time: _ / gs,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[12, sl], [109, 60], [108, vq]],
    w: ck,
    f: 0,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 26,
    ᐃⲆΔᐃ: 13,
    time: sl / 10,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[109, 80], [111, 30], [108, 30], [13, 1]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: 0,
    e: Aa,
    id: 27,
    ᐃⲆΔᐃ: 14,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ,
    time: wh / tl
  }, {
    r: [[109, 200], [112, 40], [111, 60], [14, 1]],
    w: _h,
    f: Ih,
    ⵠᐃᐃ: Ah,
    e: Gg,
    id: 28,
    ᐃⲆΔᐃ: 15,
    time: Kg / 30,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[121, 40], [112, 80], [111, 90], [15, 1]],
    w: 1,
    f: gl,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 29,
    ᐃⲆΔᐃ: 33,
    time: _h / 60,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[202, 40], [121, 80], [112, 90], [33, 1]],
    w: 1,
    f: gl,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 30,
    ᐃⲆΔᐃ: 34,
    time: ck / 90,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[147, Vk], [185, Ni], [121, 100], [149, 3]],
    w: 1,
    f: _h,
    ⵠᐃᐃ: 1,
    e: 0,
    id: 31,
    ᐃⲆΔᐃ: 16,
    time: Co / 120,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[16, ck], [187, Ni], [202, xo], [150, 2]],
    w: bs,
    f: 1,
    ⵠᐃᐃ: Ni,
    e: Ih,
    id: 32,
    ᐃⲆΔᐃ: 17,
    time: ig / 200,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[12, Ek], [197, rh], [161, 6]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 33,
    ᐃⲆΔᐃ: 18,
    time: 1 / 30,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[109, 30]],
    w: 0,
    f: 0,
    ⵠᐃᐃ: 0,
    e: An,
    id: 34,
    ᐃⲆΔᐃ: 57,
    time: Co / 5,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[109, 50], [108, 25], [57, ig]],
    w: 1,
    f: Rl,
    ⵠᐃᐃ: 0,
    e: Aa,
    id: 35,
    ᐃⲆΔᐃ: 0,
    time: Mg / 10,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[109, 60], [111, 40], [108, 50], [0, 1]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 36,
    ᐃⲆΔᐃ: 5,
    time: ck / ek,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[112, 40], [111, 60], [108, 80], [5, Ni]],
    w: 1,
    f: Gk,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 37,
    ᐃⲆΔᐃ: 6,
    time: er / 30,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[112, 60], [111, 100], [121, 40], [6, 1]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: 0,
    e: Gk,
    id: 38,
    ᐃⲆΔᐃ: 30,
    time: 0.016666666666666666,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[112, Re], [121, 80], [202, 40], [30, 1]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: xq,
    e: 0,
    id: 39,
    ᐃⲆΔᐃ: 19,
    time: Mg / 90,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[110, Qn]],
    w: gl,
    f: ck,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 40,
    ᐃⲆΔᐃ: 115,
    time: Ni / 5,
    ⲆⲆΔ: xs.ⵠΔΔⵠⵠ
  }, {
    r: [[134, 3]],
    w: fg,
    f: 1,
    ⵠᐃᐃ: tj,
    e: An,
    id: 41,
    ᐃⲆΔᐃ: 132,
    time: 0.2,
    ⲆⲆΔ: xs.ⵠΔΔⵠⵠ
  }, {
    r: [[189, 8]],
    w: 0,
    f: _h,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 42,
    ᐃⲆΔᐃ: 188,
    time: wh / Pg,
    ⲆⲆΔ: xs.ⵠΔΔⵠⵠ
  }, {
    r: [[192, Wq]],
    w: 0,
    f: 1,
    ⵠᐃᐃ: 0,
    e: gl,
    id: 43,
    ᐃⲆΔᐃ: 191,
    time: wh / 5,
    ⲆⲆΔ: xs.ⵠΔΔⵠⵠ
  }, {
    r: [[194, 8]],
    w: Qr,
    f: 1,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 44,
    ᐃⲆΔᐃ: 193,
    time: 1 / Eg,
    ⲆⲆΔ: xs.ⵠΔΔⵠⵠ
  }, {
    r: [[205, 8]],
    w: tj,
    f: 1,
    ⵠᐃᐃ: gl,
    e: 0,
    id: 45,
    ᐃⲆΔᐃ: 204,
    time: 1 / _j,
    ⲆⲆΔ: xs.ⵠΔΔⵠⵠ
  }, {
    r: [[207, 8]],
    w: 0,
    f: Ls,
    ⵠᐃᐃ: Ih,
    e: 0,
    id: 46,
    ᐃⲆΔᐃ: 206,
    time: 0.2,
    ⲆⲆΔ: xs.ⵠΔΔⵠⵠ
  }, {
    r: [[209, 16]],
    w: 0,
    f: 1,
    ⵠᐃᐃ: An,
    e: Fj,
    id: 47,
    ᐃⲆΔᐃ: 208,
    time: Ek / Eg,
    ⲆⲆΔ: xs.ⵠΔΔⵠⵠ
  }, {
    r: [[211, 16]],
    w: 0,
    f: 1,
    ⵠᐃᐃ: 0,
    e: Fj,
    id: 48,
    ᐃⲆΔᐃ: 210,
    time: wh / ko,
    ⲆⲆΔ: xs.ⵠΔΔⵠⵠ
  }, {
    r: [[116, 1]],
    w: An,
    f: Ni,
    ⵠᐃᐃ: tj,
    e: yj,
    id: 49,
    ᐃⲆΔᐃ: 117,
    time: 1 / gs,
    ⲆⲆΔ: xs.ⵠΔΔⵠⵠ
  }, {
    r: [[137, Ga]],
    w: 0,
    f: 1,
    ⵠᐃᐃ: Fj,
    e: Qr,
    id: 50,
    ᐃⲆΔᐃ: 138,
    time: 0.3333333333333333,
    ⲆⲆΔ: xs.ⵠΔΔⵠⵠ
  }, {
    r: [[131, 3]],
    w: 0,
    f: 1,
    ⵠᐃᐃ: tj,
    e: 0,
    id: 51,
    ᐃⲆΔᐃ: 143,
    time: ig / 3,
    ⲆⲆΔ: xs.ⵠΔΔⵠⵠ
  }, {
    r: [[131, 3], [110, 1]],
    w: 0,
    f: 1,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 52,
    ᐃⲆΔᐃ: 133,
    time: Kg / 3,
    ⲆⲆΔ: xs.ⵠΔΔⵠⵠ
  }, {
    r: [[131, Yl], [110, 2], [142, qo]],
    w: xq,
    f: 1,
    ⵠᐃᐃ: 0,
    e: gl,
    id: 53,
    ᐃⲆΔᐃ: 136,
    time: bs / _j,
    ⲆⲆΔ: xs.ⵠΔΔⵠⵠ
  }, {
    r: [[161, On]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 54,
    ᐃⲆΔᐃ: 195,
    time: Ls / Ij,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[109, js]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: Rl,
    e: 0,
    id: 55,
    ᐃⲆΔᐃ: 162,
    time: bs / 5,
    ⲆⲆΔ: xs.ⵠΔⲆⲆΔ
  }, {
    r: [[162, Kg], [108, yq]],
    w: _h,
    f: fg,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 56,
    ᐃⲆΔᐃ: 163,
    time: Ga / 5,
    ⲆⲆΔ: xs.ⵠΔⲆⲆΔ
  }, {
    r: [[163, Kg], [111, 14]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: 0,
    e: An,
    id: 57,
    ᐃⲆΔᐃ: 164,
    time: Ni / 5,
    ⲆⲆΔ: xs.ⵠΔⲆⲆΔ
  }, {
    r: [[164, Ek], [112, 11]],
    w: er,
    f: fg,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 58,
    ᐃⲆΔᐃ: 165,
    time: Mg / Bh,
    ⲆⲆΔ: xs.ⵠΔⲆⲆΔ
  }, {
    r: [[165, _], [121, Je]],
    w: 1,
    f: Gg,
    ⵠᐃᐃ: Ih,
    e: Rl,
    id: 59,
    ᐃⲆΔᐃ: 122,
    time: 0.2,
    ⲆⲆΔ: xs.ⵠΔⲆⲆΔ
  }, {
    r: [[122, _h], [202, 5]],
    w: Co,
    f: 0,
    ⵠᐃᐃ: 0,
    e: Gg,
    id: 60,
    ᐃⲆΔᐃ: 217,
    time: Kg / un,
    ⲆⲆΔ: xs.ⵠΔⲆⲆΔ
  }, {
    r: [[109, 30]],
    w: 1,
    f: Rl,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 61,
    ᐃⲆΔᐃ: 166,
    time: Mg / ss,
    ⲆⲆΔ: xs.ⵠΔⲆⲆΔ
  }, {
    r: [[166, 1], [108, 27]],
    w: 1,
    f: Rl,
    ⵠᐃᐃ: yj,
    e: 0,
    id: 62,
    ᐃⲆΔᐃ: 171,
    time: ig / 8,
    ⲆⲆΔ: xs.ⵠΔⲆⲆΔ
  }, {
    r: [[171, _], [111, 24]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 63,
    ᐃⲆΔᐃ: 172,
    time: ig / th,
    ⲆⲆΔ: xs.ⵠΔⲆⲆΔ
  }, {
    r: [[172, 1], [112, 21]],
    w: er,
    f: Gk,
    ⵠᐃᐃ: 0,
    e: Gg,
    id: 64,
    ᐃⲆΔᐃ: 173,
    time: 1 / ss,
    ⲆⲆΔ: xs.ⵠΔⲆⲆΔ
  }, {
    r: [[173, 1], [121, Mr]],
    w: 1,
    f: Rl,
    ⵠᐃᐃ: 0,
    e: Ah,
    id: 65,
    ᐃⲆΔᐃ: 124,
    time: 1 / 8,
    ⲆⲆΔ: xs.ⵠΔⲆⲆΔ
  }, {
    r: [[124, 1], [202, 15]],
    w: wh,
    f: Gg,
    ⵠᐃᐃ: tj,
    e: 0,
    id: 66,
    ᐃⲆΔᐃ: 218,
    time: sl / yl,
    ⲆⲆΔ: xs.ⵠΔⲆⲆΔ
  }, {
    r: [[162, 1], [109, 40], [108, 30]],
    w: 1,
    f: An,
    ⵠᐃᐃ: Fj,
    e: An,
    id: 67,
    ᐃⲆΔᐃ: 160,
    time: 1 / Pn,
    ⲆⲆΔ: xs.ⵠΔⲆⲆΔ
  }, {
    r: [[163, 1], [108, 70]],
    w: sl,
    f: 0,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 68,
    ᐃⲆΔᐃ: 168,
    time: Co / 20,
    ⲆⲆΔ: xs.ⵠΔⲆⲆΔ
  }, {
    r: [[164, wh], [111, 40], [108, 30]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: 0,
    e: Ah,
    id: 69,
    ᐃⲆΔᐃ: 169,
    time: 0.05,
    ⲆⲆΔ: xs.ⵠΔⲆⲆΔ
  }, {
    r: [[165, 1], [112, 40], [108, 30]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: Gk,
    e: Gg,
    id: 70,
    ᐃⲆΔᐃ: 170,
    time: _ / 20,
    ⲆⲆΔ: xs.ⵠΔⲆⲆΔ
  }, {
    r: [[122, 1], [121, 40], [108, 30]],
    w: 1,
    f: Rl,
    ⵠᐃᐃ: tj,
    e: 0,
    id: 71,
    ᐃⲆΔᐃ: 123,
    time: Mg / Sk,
    ⲆⲆΔ: xs.ⵠΔⲆⲆΔ
  }, {
    r: [[217, 1], [202, 40], [111, 30]],
    w: 1,
    f: Qr,
    ⵠᐃᐃ: 0,
    e: An,
    id: 72,
    ᐃⲆΔᐃ: 219,
    time: bs / 20,
    ⲆⲆΔ: xs.ⵠΔⲆⲆΔ
  }, {
    r: [[166, _h], [109, 80], [108, 60]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: 0,
    e: yj,
    id: 73,
    ᐃⲆΔᐃ: 212,
    time: 1 / Qj,
    ⲆⲆΔ: xs.ⵠΔⲆⲆΔ
  }, {
    r: [[171, sl], [108, 140]],
    w: 1,
    f: yj,
    ⵠᐃᐃ: yj,
    e: Gg,
    id: 74,
    ᐃⲆΔᐃ: 213,
    time: sl / 20,
    ⲆⲆΔ: xs.ⵠΔⲆⲆΔ
  }, {
    r: [[172, Ni], [111, 80], [108, 60]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: 0,
    e: yj,
    id: 75,
    ᐃⲆΔᐃ: 214,
    time: 1 / rq,
    ⲆⲆΔ: xs.ⵠΔⲆⲆΔ
  }, {
    r: [[173, Co], [112, 80], [108, 60]],
    w: 1,
    f: fg,
    ⵠᐃᐃ: 0,
    e: tj,
    id: 76,
    ᐃⲆΔᐃ: 215,
    time: 0.05,
    ⲆⲆΔ: xs.ⵠΔⲆⲆΔ
  }, {
    r: [[124, 1], [121, 80], [108, 60]],
    w: Kg,
    f: 0,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 77,
    ᐃⲆΔᐃ: 216,
    time: sl / 20,
    ⲆⲆΔ: xs.ⵠΔⲆⲆΔ
  }, {
    r: [[218, ck], [202, 80], [111, 60]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: An,
    e: Fj,
    id: 78,
    ᐃⲆΔᐃ: 220,
    time: Ga / 20,
    ⲆⲆΔ: xs.ⵠΔⲆⲆΔ
  }, {
    r: [[109, 25], [111, br]],
    w: _h,
    f: 0,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 79,
    ᐃⲆΔᐃ: 167,
    time: 0.2,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[120, Co], [2, Kg], [161, 2]],
    w: 1,
    f: An,
    ⵠᐃᐃ: Ih,
    e: Aa,
    id: 80,
    ᐃⲆΔᐃ: 23,
    time: 1 / gs,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[120, Eg], [222, qa], [147, 5], [2, 5]],
    w: ig,
    f: xq,
    ⵠᐃᐃ: gl,
    e: Fj,
    id: 81,
    ᐃⲆΔᐃ: 24,
    time: 0.03333333333333333,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[236, 1], [231, 8], [232, 8], [222, 8], [161, 6]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: Gk,
    e: fg,
    id: 82,
    ᐃⲆΔᐃ: 82,
    time: Ls / 60,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[2, 1], [161, tk]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 83,
    ᐃⲆΔᐃ: 10,
    time: ig / Yl,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[10, wh], [174, 5], [161, aq]],
    w: Mg,
    f: 0,
    ⵠᐃᐃ: Aa,
    e: Gk,
    id: 84,
    ᐃⲆΔᐃ: 11,
    time: Co / 12,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[11, _], [146, _j], [147, Jl]],
    w: _h,
    f: xq,
    ⵠᐃᐃ: xq,
    e: 0,
    id: 85,
    ᐃⲆΔᐃ: 40,
    time: 0.03333333333333333,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[40, ig], [146, ko], [240, 10], [147, 4]],
    w: 1,
    f: Aa,
    ⵠᐃᐃ: 0,
    e: Gk,
    id: 86,
    ᐃⲆΔᐃ: 88,
    time: 0.02,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[109, 50]],
    w: tj,
    f: 0,
    ⵠᐃᐃ: Rl,
    e: 0,
    id: 87,
    ᐃⲆΔᐃ: 58,
    time: 0.2,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[108, 75], [109, 75], [58, 1]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: Gk,
    e: 0,
    id: 88,
    ᐃⲆΔᐃ: 25,
    time: Co / Ea,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[108, 90], [109, 90], [111, 90], [25, 1]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 89,
    ᐃⲆΔᐃ: 26,
    time: wh / 20,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[108, 100], [111, 100], [112, 100], [26, _]],
    w: ck,
    f: 0,
    ⵠᐃᐃ: 0,
    e: Ah,
    id: 90,
    ᐃⲆΔᐃ: 27,
    time: Ga / 30,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[121, 80], [111, 150], [112, 120], [27, 1]],
    w: Co,
    f: 0,
    ⵠᐃᐃ: 0,
    e: Fj,
    id: 91,
    ᐃⲆΔᐃ: 43,
    time: 0.016666666666666666,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[202, 80], [112, 150], [121, 120], [43, Co]],
    w: 1,
    f: sl,
    ⵠᐃᐃ: 0,
    e: gl,
    id: 92,
    ᐃⲆΔᐃ: 44,
    time: sl / 90,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[139, qo], [112, 40], [161, 4]],
    w: sl,
    f: 0,
    ⵠᐃᐃ: tj,
    e: fg,
    id: 93,
    ᐃⲆΔᐃ: 48,
    time: Ga / jk,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[48, ig], [111, 80], [129, 1], [121, 20]],
    w: Co,
    f: 0,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 94,
    ᐃⲆΔᐃ: 47,
    time: 0.011111111111111112,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[203, 5], [112, 50], [147, 5]],
    w: 1,
    f: Co,
    ⵠᐃᐃ: 0,
    e: Gg,
    id: 95,
    ᐃⲆΔᐃ: 20,
    time: 0.05,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[20, 1], [203, Ea], [121, 50]],
    w: 1,
    f: sl,
    ⵠᐃᐃ: Ih,
    e: Ah,
    id: 96,
    ᐃⲆΔᐃ: 21,
    time: sl / 60,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[21, 1], [203, 15], [121, 50], [202, 50]],
    w: 1,
    f: 1,
    ⵠᐃᐃ: 0,
    e: yj,
    id: 97,
    ᐃⲆΔᐃ: 22,
    time: Kg / 90,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[161, 4], [237, 2]],
    w: Ga,
    f: 0,
    ⵠᐃᐃ: An,
    e: 0,
    id: 98,
    ᐃⲆΔᐃ: 80,
    time: er / 15,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[80, bs], [161, U], [237, mg], [232, 12], [222, eh]],
    w: ig,
    f: 0,
    ⵠᐃᐃ: fg,
    e: 0,
    id: 99,
    ᐃⲆΔᐃ: 81,
    time: Kg / 150,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[161, 6], [174, Ks]],
    w: 1,
    f: gl,
    ⵠᐃᐃ: Ah,
    e: Ah,
    id: 100,
    ᐃⲆΔᐃ: 29,
    time: 0.06666666666666667,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[109, 20]],
    w: Fj,
    f: Ek,
    ⵠᐃᐃ: Fj,
    e: Ah,
    id: 101,
    ᐃⲆΔᐃ: 120,
    time: 0.3333333333333333,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[112, 1], [161, 1]],
    w: _h,
    f: 0,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 102,
    ᐃⲆΔᐃ: 147,
    time: Ek / 3,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[111, 10]],
    w: Ni,
    f: An,
    ⵠᐃᐃ: 0,
    e: Fj,
    id: 103,
    ᐃⲆΔᐃ: 148,
    time: 1 / Zg,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[111, 250]],
    w: 1,
    f: Ah,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 104,
    ᐃⲆΔᐃ: 158,
    time: 0.016666666666666666,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[109, 50]],
    w: er,
    f: 0,
    ⵠᐃᐃ: Gg,
    e: Aa,
    id: 105,
    ᐃⲆΔᐃ: 159,
    time: 1 / iq,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[109, Vg]],
    w: _,
    f: 0,
    ⵠᐃᐃ: 0,
    e: Qr,
    id: 106,
    ᐃⲆΔᐃ: 125,
    time: Co / Bh,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: Gk,
    e: 0,
    id: 107,
    ᐃⲆΔᐃ: 190,
    time: 0.2,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[109, 120]],
    w: 1,
    f: Gk,
    ⵠᐃᐃ: Fj,
    e: 0,
    id: 108,
    ᐃⲆΔᐃ: 221,
    time: _ / Wa,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[109, 20], [140, 15]],
    w: 1,
    f: Gk,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 109,
    ᐃⲆΔᐃ: 141,
    time: Kg / _j,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[126, 25]],
    w: 1,
    f: _h,
    ⵠᐃᐃ: 0,
    e: An,
    id: 110,
    ᐃⲆΔᐃ: 128,
    time: _ / 5,
    ⲆⲆΔ: xs.ⵠΔΔⵠⵠ
  }, {
    r: [[128, Ga]],
    w: An,
    f: 0,
    ⵠᐃᐃ: 1,
    e: yj,
    id: 111,
    ᐃⲆΔᐃ: 127,
    time: 1 / Eg,
    ⲆⲆΔ: xs.ⵠΔΔⵠⵠ
  }, {
    r: [[142, mr], [128, 1]],
    w: Rl,
    f: Ek,
    ⵠᐃᐃ: xq,
    e: Qr,
    id: 112,
    ᐃⲆΔᐃ: 127,
    time: Ga / 10,
    ⲆⲆΔ: xs.ⵠΔΔⵠⵠ
  }, {
    r: [[128, 1]],
    w: 0,
    f: 0,
    ⵠᐃᐃ: 0,
    e: Co,
    id: 113,
    ᐃⲆΔᐃ: 127,
    time: 0.3333333333333333,
    ⲆⲆΔ: xs.ⵠΔΔⵠⵠ
  }, {
    r: [[109, 60], [108, 20], [161, 2]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: Ah,
    e: 0,
    id: 114,
    ᐃⲆΔᐃ: 135,
    time: _h / 10,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[112, 40], [108, 45]],
    w: 1,
    f: tj,
    ⵠᐃᐃ: Fj,
    e: An,
    id: 115,
    ᐃⲆΔᐃ: 151,
    time: 1 / Sk,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[151, _h], [234, 40], [238, er]],
    w: 1,
    f: 1,
    ⵠᐃᐃ: Mg,
    e: An,
    id: 116,
    ᐃⲆΔᐃ: 152,
    time: 0.005,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[109, 50], [108, 100]],
    w: Co,
    f: fg,
    ⵠᐃᐃ: Gg,
    e: Ih,
    id: 117,
    ᐃⲆΔᐃ: 153,
    time: Ga / 90,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[108, 60], [111, 120]],
    w: 1,
    f: yj,
    ⵠᐃᐃ: 0,
    e: An,
    id: 118,
    ᐃⲆΔᐃ: 154,
    time: _ / 90,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[111, 70], [112, 140]],
    w: ck,
    f: 0,
    ⵠᐃᐃ: Gk,
    e: Rl,
    id: 119,
    ᐃⲆΔᐃ: 155,
    time: Ni / 90,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[112, 80], [121, 160]],
    w: Ga,
    f: 0,
    ⵠᐃᐃ: 0,
    e: gl,
    id: 120,
    ᐃⲆΔᐃ: 156,
    time: ig / 90,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[121, 90], [202, 180]],
    w: ig,
    f: Rl,
    ⵠᐃᐃ: gl,
    e: Ah,
    id: 121,
    ᐃⲆΔᐃ: 157,
    time: 0.011111111111111112,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[108, 70]],
    w: Ls,
    f: 0,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 122,
    ᐃⲆΔᐃ: 55,
    time: 0.1,
    ⲆⲆΔ: xs.ⵠⲆⵠⲆⵠ
  }, {
    r: [[108, 70], [109, 50]],
    w: 1,
    f: Gk,
    ⵠᐃᐃ: gl,
    e: 0,
    id: 123,
    ᐃⲆΔᐃ: 56,
    time: er / 10,
    ⲆⲆΔ: xs.ⵠⲆⵠⲆⵠ
  }, {
    r: [[109, 40], [108, 40]],
    w: Mg,
    f: tj,
    ⵠᐃᐃ: 0,
    e: Ah,
    id: 124,
    ᐃⲆΔᐃ: 144,
    time: 0.1,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[143, 1], [117, Ni]],
    w: 0,
    f: 0,
    ⵠᐃᐃ: tj,
    e: Gk,
    id: 125,
    ᐃⲆΔᐃ: 145,
    time: _h / 3,
    ⲆⲆΔ: xs.ⵠΔΔⵠⵠ
  }, {
    r: [[147, 30], [184, 1], [121, 150], [149, 3]],
    w: ck,
    f: wh,
    ⵠᐃᐃ: 1,
    e: 0,
    id: 126,
    ᐃⲆΔᐃ: 59,
    time: sl / 120,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[59, Ek], [186, _], [202, 150], [150, 2]],
    w: 1,
    f: 1,
    ⵠᐃᐃ: Ni,
    e: 0,
    id: 127,
    ᐃⲆΔᐃ: 60,
    time: 0.005555555555555556,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[26, Kg], [197, uj], [196, Bl], [161, Ea]],
    w: 1,
    f: Aa,
    ⵠᐃᐃ: Gk,
    e: 0,
    id: 128,
    ᐃⲆΔᐃ: 61,
    time: 0.016666666666666666,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[147, Dh], [185, 1], [121, 150], [149, Z]],
    w: _h,
    f: 1,
    ⵠᐃᐃ: 1,
    e: fg,
    id: 129,
    ᐃⲆΔᐃ: 62,
    time: Co / 120,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[62, er], [187, 1], [202, 150], [150, 2]],
    w: _h,
    f: _h,
    ⵠᐃᐃ: 1,
    e: xq,
    id: 130,
    ᐃⲆΔᐃ: 63,
    time: Ek / 180,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[109, ma], [161, hr]],
    w: Ek,
    f: An,
    ⵠᐃᐃ: Gk,
    e: An,
    id: 131,
    ᐃⲆΔᐃ: 64,
    time: 1 / f,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[109, 30]],
    w: Ni,
    f: 0,
    ⵠᐃᐃ: yj,
    e: 0,
    id: 132,
    ᐃⲆΔᐃ: 101,
    time: ck / Eg,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[108, 200], [161, Nk], [222, 4], [64, 1]],
    w: er,
    f: 0,
    ⵠᐃᐃ: 0,
    e: An,
    id: 133,
    ᐃⲆΔᐃ: 65,
    time: _ / 25,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[108, 20], [231, Ga]],
    w: 1,
    f: An,
    ⵠᐃᐃ: 0,
    e: fg,
    id: 134,
    ᐃⲆΔᐃ: 102,
    time: 0.2,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[111, 200], [161, ne], [231, 4], [222, 4], [65, wh]],
    w: 1,
    f: tj,
    ⵠᐃᐃ: 0,
    e: Gg,
    id: 135,
    ᐃⲆΔᐃ: 66,
    time: 0.03333333333333333,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[111, fl], [222, ck]],
    w: 1,
    f: tj,
    ⵠᐃᐃ: 0,
    e: Gk,
    id: 136,
    ᐃⲆΔᐃ: 103,
    time: Co / 10,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[112, 200], [147, Ea], [231, wo], [222, 8], [66, _h]],
    w: _h,
    f: tj,
    ⵠᐃᐃ: fg,
    e: Gg,
    id: 137,
    ᐃⲆΔᐃ: 67,
    time: Ga / 35,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[112, Ea], [222, Ek]],
    w: Ni,
    f: 0,
    ⵠᐃᐃ: 0,
    e: Ah,
    id: 138,
    ᐃⲆΔᐃ: 104,
    time: 1 / Wg,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[121, 200], [147, F], [222, k], [232, 8], [67, ck]],
    w: _,
    f: tj,
    ⵠᐃᐃ: 0,
    e: Ah,
    id: 139,
    ᐃⲆΔᐃ: 68,
    time: 0.025,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[121, 10], [232, 1]],
    w: Ga,
    f: 0,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 140,
    ᐃⲆΔᐃ: 105,
    time: Ga / 15,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[202, 200], [147, 10], [129, er], [68, 1]],
    w: 1,
    f: fg,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 141,
    ᐃⲆΔᐃ: 69,
    time: _h / 45,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[202, 10], [232, 1], [203, 1]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 142,
    ᐃⲆΔᐃ: 106,
    time: _ / 15,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[234, 200], [147, 10], [185, ck], [69, 1]],
    w: 1,
    f: Ih,
    ⵠᐃᐃ: Gg,
    e: tj,
    id: 143,
    ᐃⲆΔᐃ: 70,
    time: Kg / 50,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[234, 10], [238, 1]],
    w: Co,
    f: 0,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 144,
    ᐃⲆΔᐃ: 107,
    time: Ga / 20,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[109, yg]],
    w: 1,
    f: fg,
    ⵠᐃᐃ: 0,
    e: gl,
    id: 145,
    ᐃⲆΔᐃ: 71,
    time: 0.04,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[71, 1], [108, 100], [109, 50]],
    w: _,
    f: yj,
    ⵠᐃᐃ: xq,
    e: 0,
    id: 146,
    ᐃⲆΔᐃ: 72,
    time: 0.025,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[72, er], [111, 50], [108, 50], [109, 50]],
    w: 1,
    f: An,
    ⵠᐃᐃ: 0,
    e: Rl,
    id: 147,
    ᐃⲆΔᐃ: 73,
    time: 0.02,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[73, 1], [112, 50], [111, 50], [108, 50]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: gl,
    e: 0,
    id: 148,
    ᐃⲆΔᐃ: 74,
    time: 0.014285714285714285,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[74, ck], [121, 50], [112, 50], [111, 50]],
    w: Co,
    f: Gk,
    ⵠᐃᐃ: xq,
    e: 0,
    id: 149,
    ᐃⲆΔᐃ: 75,
    time: Co / 90,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[75, Kg], [202, 50], [121, 50], [112, 50]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: Aa,
    e: 0,
    id: 150,
    ᐃⲆΔᐃ: 76,
    time: Ga / 120,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[175, 1], [111, 200]],
    w: Ni,
    f: Co,
    ⵠᐃᐃ: 1,
    e: Ah,
    id: 151,
    ᐃⲆΔᐃ: 77,
    time: 0.016666666666666666,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[176, _], [111, 200]],
    w: 1,
    f: 1,
    ⵠᐃᐃ: 1,
    e: tj,
    id: 152,
    ᐃⲆΔᐃ: 78,
    time: Mg / 60,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[177, er], [111, 200], [149, ig]],
    w: 1,
    f: 1,
    ⵠᐃᐃ: Kg,
    e: 0,
    id: 153,
    ᐃⲆΔᐃ: 79,
    time: 0.016666666666666666,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[174, 10], [2, 5], [161, xh]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: Qr,
    e: 0,
    id: 154,
    ᐃⲆΔᐃ: 83,
    time: bs / 10,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[2, Hn], [161, il]],
    w: ig,
    f: 0,
    ⵠᐃᐃ: 0,
    e: Qr,
    id: 155,
    ᐃⲆΔᐃ: 84,
    time: Mg / iq,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[83, 1], [179, Ek], [146, ng], [147, 5], [222, 8]],
    w: ck,
    f: Ah,
    ⵠᐃᐃ: tj,
    e: An,
    id: 156,
    ᐃⲆΔᐃ: 85,
    time: Ni / 60,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[84, wh], [178, sl], [146, Ea], [147, un], [222, Rg]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: 0,
    e: xq,
    id: 157,
    ᐃⲆΔᐃ: 86,
    time: 0.016666666666666666,
    ⲆⲆΔ: xs.ᐃΔᐃᐃⵠ
  }, {
    r: [[181, bs]],
    w: 0,
    f: gl,
    ⵠᐃᐃ: 1,
    e: Gg,
    id: 158,
    ᐃⲆΔᐃ: 180,
    time: Ga / Ks,
    ⲆⲆΔ: xs.ⵠⲆⵠⲆⵠ
  }, {
    r: [[109, mr], [161, 1]],
    w: 1,
    f: xq,
    ⵠᐃᐃ: Ih,
    e: 0,
    id: 159,
    ᐃⲆΔᐃ: 181,
    time: wh / zr,
    ⲆⲆΔ: xs.ⵠⲆⵠⲆⵠ
  }, {
    r: [[108, 100], [140, 30]],
    w: wh,
    f: 1,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 160,
    ᐃⲆΔᐃ: 182,
    time: Kg / bg,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[109, 20]],
    w: bs,
    f: gl,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 161,
    ᐃⲆΔᐃ: 183,
    time: 0.2,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[109, 100], [108, 50], [2, 5], [174, 5], [161, 6]],
    w: Kg,
    f: fg,
    ⵠᐃᐃ: 0,
    e: Ih,
    id: 162,
    ᐃⲆΔᐃ: 198,
    time: 0.05,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[109, 250], [147, 10], [146, 2], [139, 2]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: Qr,
    e: Ih,
    id: 163,
    ᐃⲆΔᐃ: 223,
    time: sl / 50,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[109, 250], [161, 10], [146, 2], [222, 8]],
    w: 1,
    f: Ah,
    ⵠᐃᐃ: Ih,
    e: Fj,
    id: 164,
    ᐃⲆΔᐃ: 224,
    time: Ga / 50,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[161, Vq], [174, Kl], [2, 4], [126, 50]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: yj,
    e: 0,
    id: 165,
    ᐃⲆΔᐃ: 89,
    time: 0.05,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[109, 250], [161, Ea], [120, 10], [231, Kn]],
    w: bs,
    f: 0,
    ⵠᐃᐃ: Qr,
    e: 0,
    id: 166,
    ᐃⲆΔᐃ: 230,
    time: Ga / 50,
    ⲆⲆΔ: xs.ⵠⵠΔΔΔ
  }, {
    r: [[109, 40]],
    w: 1,
    f: Aa,
    ⵠᐃᐃ: 0,
    e: tj,
    id: 167,
    ᐃⲆΔᐃ: 94,
    time: Ls / 5,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[94, 1], [108, 40], [109, 50]],
    w: Mg,
    f: 0,
    ⵠᐃᐃ: Rl,
    e: 0,
    id: 168,
    ᐃⲆΔᐃ: 95,
    time: 1 / F,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[95, 1], [111, 40], [108, 50], [109, 60]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 169,
    ᐃⲆΔᐃ: 96,
    time: Ls / 20,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[96, er], [112, 40], [111, 70], [108, 80]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: Qr,
    e: 0,
    id: 170,
    ᐃⲆΔᐃ: 97,
    time: Mg / 30,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[97, 1], [121, 40], [112, 70], [111, 110]],
    w: 1,
    f: Gk,
    ⵠᐃᐃ: Ih,
    e: 0,
    id: 171,
    ᐃⲆΔᐃ: 98,
    time: 0.016666666666666666,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }, {
    r: [[98, 1], [202, 50], [121, 80], [112, 110]],
    w: 1,
    f: 0,
    ⵠᐃᐃ: 0,
    e: 0,
    id: 172,
    ᐃⲆΔᐃ: 99,
    time: 1 / 90,
    ⲆⲆΔ: xs.ᐃᐃⵠⲆ
  }];
  const Vs = $q;
  const Ws = Xh;
  function Xs(a, b, c, d, e, f) {
    Wj(yw, a, b, c, d, e, f);
    return ((60 + (function (a, b, c, d, e) {
      Uj(yw, a, b, c, d, e);
      const f = Xw(xw[Gk], xw[ck], xw[bq], xw[3], xw[aq], xw[Gk]);
      fo(xw[ck], xw[X], xw[3]);
      return ~(f & 24149) & 24149 | ~(f & 24149) & f;
    }(xw[Gk], xw[1], xw[2], xw[3], xw[4]) ^ vw(xw[5], xw[Qr], xw[1], xw[Nr], xw[3]))) * 75 + 74) % 65537;
  }
  ps = 300;
  ⵠᐃᐃᐃ = {
    ΔΔΔⲆⵠⵠΔ: 300,
    ΔⵠΔᐃᐃΔΔ: 301,
    ⵠⲆⲆⵠΔⵠᐃ: 302,
    ⲆⲆⲆⲆⲆΔᐃ: 303,
    ⵠⲆΔᐃΔᐃΔ: 304,
    ⵠⵠⵠⲆⲆᐃⲆ: 305,
    ᐃⵠΔᐃⵠⵠᐃ: 306,
    ⲆⲆᐃΔⵠΔᐃ: 307,
    ⲆᐃⵠᐃΔΔⲆ: 308,
    ⵠΔᐃⲆΔΔᐃ: 309,
    ⵠⲆⲆΔⲆᐃⲆ: 310,
    ΔⲆᐃⵠΔΔᐃ: 311,
    EMPTY: 312,
    ⵠⵠᐃΔᐃⲆⵠ: 313,
    ⵠᐃᐃΔⵠⵠⵠ: 314,
    ᐃⲆΔΔᐃΔΔ: 315,
    ⵠⲆⵠᐃΔΔⲆ: 316,
    ⲆΔⲆᐃⲆⲆⲆ: 317,
    ᐃⵠΔⵠΔΔⵠ: 318,
    ⵠᐃⲆⲆⲆⲆⵠ: 319,
    ᐃΔⲆⵠΔΔⵠ: 320,
    ᐃΔΔⲆⵠⵠᐃ: 321,
    ΔⲆⲆⵠᐃ: 322,
    ⲆᐃⲆⵠᐃⵠᐃ: 323,
    ⵠΔΔⵠ: 324,
    ΔᐃⲆᐃⲆΔⲆ: 325,
    ΔΔⲆⲆⲆΔⲆ: 326,
    ⲆᐃⵠᐃΔⵠΔ: 327,
    ᐃⵠⵠⲆᐃΔⵠ: 328,
    ⵠⲆⵠᐃΔⵠΔ: 329,
    ΔᐃⲆᐃⵠΔⲆ: 330,
    ⲆⲆⵠⵠⲆᐃΔ: 331,
    POINTS: 332,
    ⵠⲆⵠⲆⵠΔΔ: 333,
    ΔᐃⲆΔᐃⲆⲆ: 334,
    ⵠⲆⲆΔⲆⵠΔ: 335,
    ΔⵠⲆᐃΔΔΔ: 336,
    ⵠⲆⵠⵠⵠⵠΔ: 337,
    ΔⲆⲆᐃⲆᐃᐃ: 338,
    ⲆⲆⲆⲆⲆᐃⲆ: 339,
    ᐃⵠΔΔⵠΔⲆ: 340,
    ⵠⲆᐃᐃᐃⲆΔ: 341,
    ΔΔⲆⵠⵠⲆⵠ: 342,
    ΔᐃᐃᐃⵠⲆⵠ: 343
  };
  const Ys = aa;
  function Zs() {
    ut[99] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
    ut[98] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
    ut[97] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
    ut[96] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
    ut[95] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
    ut[94] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
    ut[153] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
    ut[154] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
    ut[155] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
    ut[156] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
    ut[157] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
    ut[76] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
    ut[75] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
    ut[74] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
    ut[73] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
    ut[72] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
    ut[71] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
    ut[56] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
    ut[221] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
    ut[107] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
    ut[70] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
    ut[106] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
    ut[69] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
    ut[105] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
    ut[68] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
    ut[104] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
    ut[67] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
    ut[103] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
    ut[66] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
    ut[102] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
    ut[65] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
    ut[101] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
    ut[64] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
    ut[152] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
    ut[237] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
    ut[240] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
    ut[232] = ["Vulture Feather", "From a deadly vulture"];
    ut[234] = ["Emerald", "How many golden breads can you get from it?"];
    ut[238] = ["Sand Worm Juice", "I don't want to know how you got this."];
    ut[80] = ["Turban", "Useful to survive in the desert."];
    ut[81] = ["Ninja outfit", "Essential to survive in the desert"];
    ut[82] = ["Pilot Hat", "Take off and land with flying objects much faster."];
    ut[236] = ["Pilot Glasses"];
    ut[225] = ["Tamed Boar", "Fast on lands and slow on water."];
    ut[239] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
    ut[226] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
    ut[227] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
    ut[228] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
    ut[229] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
    ut[89] = ["Saddle", "Hit a boar with it to tame it."];
    ut[90] = ["Witch Hat", "You're a wizard Starvy!"];
    ut[91] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
    ut[92] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
    ut[93] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
    ut[100] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
    ut[24] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
    ut[224] = ["Sled", "You are faster with it in the snow"];
    ut[223] = ["Boat", "You are faster with it in the water"];
    ut[230] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
    ut[39] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"];
    ut[222] = ["Penguin Feather", "From a deadly cute penguin."];
    ut[231] = ["Hawk Feather", "From a deadly hawk."];
    ut[233] = ["Cactus", "Food : 20", "Water : 10"];
    ut[211] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
    ut[210] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
    ut[209] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
    ut[208] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
    ut[218] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
    ut[217] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
    ut[219] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
    ut[220] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
    ut[32] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
    ut[212] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
    ut[213] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
    ut[214] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
    ut[215] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
    ut[216] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
    ut[205] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
    ut[207] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
    ut[204] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    ut[206] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    ut[53] = ["Pitchfork", "Perfect for gathering"];
    ut[54] = ["Golden Pitchfork", "Essential for a real farmer."];
    ut[235] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
    ut[us.ᐃⲆᐃⵠⵠᐃᐃ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
    ut[us.ΔⲆΔⵠⵠΔΔ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
    ut[us.ΔᐃⲆΔΔᐃⲆ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
    ut[us.ⲆΔΔΔⲆᐃᐃ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
    ut[us.ⵠⲆⵠⵠΔⵠᐃ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
    ut[186] = ["Lava Cube", "You feel an immense power emanating from this cube"];
    ut[187] = ["Lava Orb", "You feel an immense power emanating from this orb"];
    ut[63] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
    ut[17] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
    ut[150] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
    ut[60] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
    ut[34] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
    ut[19] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
    ut[203] = ["Flame", "It's hot!"];
    ut[20] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
    ut[21] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
    ut[22] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
    ut[202] = ["Reidite", "The ultimate ore"];
    ut[184] = ["Dragon Cube", "You feel a great power emanating from this cube"];
    yt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    yt[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
    yt[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
    yt[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
    yt[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
    yt[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
    yt[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
    yt[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
    yt[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
    yt[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
    yt[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
    yt[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
    yt[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
    yt[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
    yt[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
    yt[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
    yt[38] = ["You died crushed by an angry baby mammoth."];
    yt[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
    yt[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
    ut[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    ut[341] = "A sandstorm is approaching in a few seconds.";
    ut[340] = "The sandstorm will soon stop.";
    ut[343] = "A blizzard is approaching in a few seconds.";
    ut[342] = "The blizzard will soon stop.";
    ut[328] = " BACK TO THE GAME";
    ut[329] = " Share on Twitter";
    ut[330] = " Share on Facebook";
    ut[331] = "You can buy items on the shop in the next game with your points";
    ut[332] = "points";
    ut[333] = "Score";
    ut[334] = "Kill";
    ut[335] = "Days survived";
    ut[336] = "Building method: Free. Press G to change";
    ut[337] = "Building method: Grid. Press G to change";
    ut[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    ut[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
    ut[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
    ut[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; Ia > a; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    ut[7] = ["Hand"];
    ut[140] = ["Dirt", "Dirty!"];
    ut[126] = ["Sand", "I got it in my eyes!"];
    ut[109] = ["Wood", "You can't get enough of it!"];
    ut[108] = ["Stone", "Also called a rock"];
    ut[111] = ["Gold", "Be generous, give it to others"];
    ut[112] = ["Diamond", "What will you make with it?"];
    ut[121] = ["Amethyst", "It's Mauve like Lapa"];
    ut[131] = ["Flour", "Used in cooking"];
    ut[133] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
    ut[136] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
    ut[116] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
    ut[117] = ["Cooked meat", "A rare steak, please", "Food: 35"];
    ut[137] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
    ut[138] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
    ut[143] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
    ut[145] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
    ut[200] = ["Candies", "Only for children!", "Food: 20"];
    ut[199] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
    ut[201] = ["Garland", "Perfect decoration for roofs"];
    ut[115] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
    ut[110] = ["Berry", "Berry tasty!", "Food: 10"];
    ut[132] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    ut[134] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
    ut[188] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    ut[189] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
    ut[191] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    ut[192] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
    ut[193] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
    ut[194] = ["Thorn bush", "It stings!"];
    ut[141] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
    ut[142] = ["Ice", "Useful for making cakes and water"];
    ut[55] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
    ut[174] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
    ut[2] = ["Rabbit Fur", "That rabbit was so cute..."];
    ut[178] = ["Pure Fur", "You're a bread factory"];
    ut[179] = ["Dark Fur", "You get ready to do something wrong"];
    ut[146] = ["Winter Fur", "These animals just wanted a hug..."];
    ut[139] = ["Scales", "It smells like fish!"];
    ut[129] = ["Kraken Skin", "Weren't you too scared?"];
    ut[113] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
    ut[118] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
    ut[114] = ["Workbench", "Very useful to craft all kinds of objects"];
    ut[161] = ["Cord", "Used in crafting Hats and Bag"];
    ut[147] = ["Diamond Cord", "Used in crafting Special Hats"];
    ut[167] = ["Chest", "Allows you to store items", "Durability: 500"];
    ut[57] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
    ut[0] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
    ut[5] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
    ut[6] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
    ut[9] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
    ut[30] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
    ut[62] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
    ut[16] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
    ut[8] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
    ut[1] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
    ut[3] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
    ut[4] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
    ut[31] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
    ut[35] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
    ut[36] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
    ut[37] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
    ut[38] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
    ut[45] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"];
    ut[12] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
    ut[13] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
    ut[14] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
    ut[15] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
    ut[33] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
    ut[46] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
    ut[50] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
    ut[51] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
    ut[52] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
    ut[58] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
    ut[25] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
    ut[26] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
    ut[27] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
    ut[43] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
    ut[44] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
    ut[59] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
    ut[23] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
    ut[41] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
    ut[42] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
    ut[83] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
    ut[10] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
    ut[11] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
    ut[40] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
    ut[88] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
    ut[84] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    ut[85] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
    ut[86] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    ut[48] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
    ut[47] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
    ut[185] = ["Dragon Orb", "You feel a great power emanating from this orb"];
    ut[149] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
    ut[175] = ["Green Gemstone", "You didn't cheat, promise?"];
    ut[176] = ["Orange Gemstone", "Only a real pirate can find it!"];
    ut[177] = ["Blue Gemstone", "For too kind people"];
    ut[77] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
    ut[78] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
    ut[79] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
    ut[180] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
    ut[181] = ["Empty Bucket", "You need to fill this bucket near a water source"];
    ut[127] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
    ut[128] = ["Empty Bottle", "You can fill this bottle near a water source"];
    ut[130] = ["Empty Watering Can", "You must fill it with a water source to use it"];
    ut[49] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
    ut[29] = ["Bag", "More space for your items!"];
    ut[120] = ["Paper", "Used in book-crafting"];
    ut[28] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
    ut[195] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
    ut[148] = ["Lock", "Allow you to lock your chest"];
    ut[158] = ["Lock-pick", "Allows you to unlock one chest"];
    ut[159] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
    ut[125] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
    ut[183] = ["Sign", "Leave a message to others", "Durability: 200"];
    ut[190] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
    ut[182] = ["Well", "Allows bottle filling", "Durability: 1000"];
    ut[162] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
    ut[163] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
    ut[164] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
    ut[165] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
    ut[122] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
    ut[160] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
    ut[168] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
    ut[169] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
    ut[170] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
    ut[123] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
    ut[166] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
    ut[171] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
    ut[172] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
    ut[173] = ["Diamond Door", "For a shining house", "Durability: 2500"];
    ut[124] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
    ut[119] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
    ut[135] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
    ut[144] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
    ut[151] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
    ut[300] = "You cannot join this server";
    ut[301] = "Kicked: ";
    ut[302] = "Your key is already used by someone else";
    ut[303] = "Your key is wrong";
    ut[304] = "You have an old version, you need to clear your cache";
    ut[338] = "Your client version is too recent for this server. The server is being updated";
    ut[339] = "Wrong password! To enter a password: https://starve.io/?password=...";
    ut[305] = "There are no more new resources";
    ut[306] = "You survived 1 day";
    ut[307] = "You survived ";
    ut[308] = " days";
    ut[309] = "You are dead ;-;";
    ut[310] = "Server cannot find spawn location! Spam the play button!";
    ut[311] = "Server is full! Spam the play button!";
    ut[312] = "Resource is empty";
    ut[313] = "Inventory is full (right-click to empty items)";
    ut[314] = " is dead";
    ut[315] = "This is not the right tool";
    ut[316] = "You joined a team";
    ut[317] = "You are dead";
    ut[318] = " joined the team";
    ut[319] = "Your team was destroyed";
    ut[320] = "You left the team";
    ut[321] = " left the team";
    ut[322] = "Someone stole your token :>";
    ut[323] = "Choose a server";
    ut[324] = "players";
    ut[325] = "total players";
    ut[326] = "players on this mode";
    ut[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Nickname";
    yt[0] = ["You were killed for no reason"];
    yt[1] = ["You starved to death, as the name of the game implies"];
    yt[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
    yt[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
    yt[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
    yt[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
    yt[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
    yt[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
    yt[Kn] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
    yt[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
    yt[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
    yt[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
    yt[j] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
    yt[vh] = ["You died of thirst. Better drink your own piss."];
    yt[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
    yt[nr] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
    yt[bl] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
    yt[17] = ["Your skin's falling apart, the sun killed you."];
    yt[18] = ["Garlic stored in your pockets boiled your brain."];
    yt[_k] = ["As a vampire, don't stand near the garlic cloves."];
    yt[20] = ["You ate garlic as a vampire, what did you expect?"];
    yt[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
    ᐃΔΔⲆᐃ = "Uuunnnggg";
    ⵠⵠΔⵠⲆⵠⲆ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
  }
  function $s() {
    ut[184] = ["You feel a great power emanating from this orb"];
    yt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    ut[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    ut[328] = " BACK TO THE GAME";
    ut[329] = " Share on Twitter";
    ut[330] = " Share on Facebook";
    ut[331] = "You can buy items on the shop in the next game with your points";
    ut[332] = "points";
    ut[333] = "Score";
    ut[334] = "Kill";
    ut[335] = "Days survived";
    ut[336] = "Building method: Free. Press G to change";
    ut[337] = "Building method: Grid. Press G to change";
    ut[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    ut[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    ut[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    ut[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = yj; Ph > a; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    ut[7] = ["Рука"];
    ut[140] = ["Земля", "Грязно!"];
    ut[126] = ["Песок", "Он в моих глазах!"];
    ut[109] = ["Дерево", "Постоянно нужно больше!"];
    ut[108] = ["Камень", "Твердый"];
    ut[111] = ["Золото", "Будьте щедры, давайте его другим"];
    ut[112] = ["Алмаз", "Что вы создадите с помощью него?"];
    ut[121] = ["Аметист", "Он сиреневый, как Lapa"];
    ut[131] = ["Мука", "Используется в готовке"];
    ut[133] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
    ut[136] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
    ut[116] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
    ut[117] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
    ut[137] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
    ut[138] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
    ut[143] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
    ut[145] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
    ut[200] = ["Конфеты", "Только для детей!", "Еда: 20"];
    ut[199] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
    ut[201] = ["Гирлянда", "Прекрасная декорация для крыши"];
    ut[115] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
    ut[110] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
    ut[132] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    ut[134] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
    ut[188] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    ut[189] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
    ut[191] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
    ut[192] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
    ut[193] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
    ut[194] = ["Колючий Куст", "Это больно!"];
    ut[141] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
    ut[142] = ["Лёд", "Используется для изготовления тортов и воды"];
    ut[55] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
    ut[174] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
    ut[2] = ["Шкура Зайца", "Этот кролик был таким милым..."];
    ut[178] = ["Чистая Шкура", "Вы - фабрика хлеба"];
    ut[179] = ["Чёрная Шкура", "Вы готовы делать зло."];
    ut[146] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
    ut[139] = ["Чешуя", "Она пахнет рыбой!"];
    ut[129] = ["Шкура Кракена", "Вы не испугались?"];
    ut[113] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
    ut[118] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
    ut[114] = ["Верстак", "Необходим для создания многих предметов"];
    ut[161] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
    ut[147] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
    ut[167] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
    ut[57] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
    ut[0] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
    ut[5] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
    ut[6] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
    ut[9] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
    ut[30] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
    ut[62] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
    ut[16] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
    ut[8] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
    ut[1] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
    ut[3] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
    ut[4] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
    ut[31] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
    ut[35] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
    ut[36] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
    ut[37] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
    ut[38] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
    ut[45] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
    ut[12] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
    ut[13] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
    ut[14] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
    ut[15] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
    ut[33] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
    ut[46] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
    ut[50] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
    ut[51] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
    ut[52] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
    ut[58] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
    ut[25] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
    ut[26] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
    ut[27] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
    ut[43] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
    ut[59] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
    ut[23] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
    ut[41] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
    ut[42] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
    ut[83] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    ut[10] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
    ut[11] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
    ut[40] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
    ut[84] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    ut[85] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    ut[86] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    ut[48] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
    ut[47] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
    ut[185] = ["Шар Дракона", "Даётся за квест"];
    ut[149] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
    ut[175] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
    ut[176] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
    ut[177] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
    ut[77] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
    ut[78] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
    ut[79] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
    ut[180] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
    ut[181] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
    ut[127] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
    ut[128] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
    ut[130] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
    ut[49] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
    ut[29] = ["Рюкзак", "Больше места для ваших предметов!"];
    ut[120] = ["Бумага", "Используется при создании книги"];
    ut[28] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
    ut[195] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
    ut[148] = ["Замок", "Позволяет вам закрыть ваш сундук"];
    ut[158] = ["Ключ", "Даёт вам открыть один запертый сундук"];
    ut[159] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
    ut[125] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
    ut[183] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
    ut[190] = ["Крыша", "Немного скрывает вас и согревает!"];
    ut[182] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
    ut[162] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
    ut[163] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
    ut[164] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
    ut[165] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
    ut[122] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
    ut[160] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
    ut[168] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
    ut[169] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
    ut[170] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
    ut[123] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
    ut[166] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
    ut[171] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
    ut[172] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
    ut[173] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
    ut[124] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
    ut[119] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
    ut[135] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
    ut[144] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
    ut[151] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
    ut[300] = "Вы не можете зайти на этот сервер";
    ut[301] = "Выгнаны: ";
    ut[302] = "Ваш ключ уже используется кем-то";
    ut[303] = "Ваш ключ неправильный";
    ut[304] = "У вас старая версия, вам нужно очистить кеш";
    ut[305] = "Ресурсов больше нет";
    ut[306] = "Вы выжили 1 день";
    ut[307] = "Вы выжили ";
    ut[308] = " дней";
    ut[309] = "Вы умерли ;-;";
    ut[310] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
    ut[311] = "Сервер заполнен! Спамьте кнопку играть!";
    ut[312] = "Ресурсы закончились";
    ut[313] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
    ut[314] = " умер";
    ut[315] = "Это не тот инструмент";
    ut[316] = "Вы вошли в команду";
    ut[317] = "Вы умерли";
    ut[318] = " вошёл в команду";
    ut[319] = "Ваша команда была разрушена";
    ut[320] = "Вы покинули команду";
    ut[321] = " покинул команду";
    ut[322] = "Кто-то использует ваш токен :>";
    ut[323] = "Выберите сервер";
    ut[324] = "игроков";
    ut[325] = "игроков всего";
    ut[326] = "игроков в этом режиме";
    ut[327] = "Скоро...";
    document.getElementById("nickname_input").placeholder = "Имя";
    yt[0] = ["Вы были убиты без причины"];
    yt[er] = ["Вы умерли от голода, как название игры подразумевает это"];
    yt[br] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
    yt[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
    yt[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
    yt[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
    yt[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
    yt[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
    yt[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
    yt[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
    yt[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
    yt[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
    yt[ne] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
    yt[Cg] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
    yt[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
    yt[Zn] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
    yt[Qe] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
    yt[yq] = ["Твоя кожа разваливается, солнце убило тебя"];
    yt[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
    yt[Sn] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
    yt[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
    yt[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
    ᐃΔΔⲆᐃ = "Uuunnnggg";
    ⵠⵠΔⵠⲆⵠⲆ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
  }
  function _s() {
    ut[184] = ["You feel a great power emanating from this orb"];
    yt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    ut[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    ut[328] = " BACK TO THE GAME";
    ut[329] = " Share on Twitter";
    ut[330] = " Share on Facebook";
    ut[331] = "You can buy items on the shop in the next game with your points";
    ut[332] = "points";
    ut[333] = "Score";
    ut[334] = "Kill";
    ut[335] = "Days survived";
    ut[336] = "Building method: Free. Press G to change";
    ut[337] = "Building method: Grid. Press G to change";
    ut[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    ut[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    ut[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    ut[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = yj; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    ut[7] = ["mão"];
    ut[140] = ["terra", "está sujo!"];
    ut[126] = ["areia", "entrou nos meus olhos!"];
    ut[109] = ["madeira", "você não pode pegar o suficiente disso!"];
    ut[108] = ["pedra", "também chamado rocha"];
    ut[111] = ["ouro", "seja generoso, dê para outros"];
    ut[112] = ["diamante", "o que você irá fazer com isso?"];
    ut[121] = ["ametista", "é mauve como lapa"];
    ut[131] = ["farinha", "usada na cozinha"];
    ut[133] = ["biscoito", "biscoito da vovó", "comida: 50"];
    ut[136] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
    ut[116] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
    ut[117] = ["carne assada", "um mal passado, por favor", "comida: 35"];
    ut[137] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
    ut[138] = ["peixe assado", "com limão é perfeito", "comida: 35"];
    ut[143] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
    ut[145] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
    ut[200] = ["doces", "apenas para crianças!", "comida: 100"];
    ut[199] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
    ut[201] = ["pisca-pisca", "decoração perfeita de telhado"];
    ut[115] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
    ut[110] = ["berry", "Berry saborosa!", "comida: 10"];
    ut[132] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
    ut[134] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
    ut[188] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
    ut[189] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
    ut[191] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
    ut[192] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
    ut[193] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
    ut[194] = ["mato de espinhos", "pica!"];
    ut[141] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
    ut[142] = ["gelo", "útil para fazer bolo e água"];
    ut[55] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
    ut[174] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
    ut[2] = ["pele de coelho", "o coelho era tão fofo..."];
    ut[178] = ["pele pura", "você é uma fábrica de pão"];
    ut[179] = ["pele negra", "você está pronto para fazer algo errado"];
    ut[146] = ["pele de inverno", "ele só queria um abraço"];
    ut[139] = ["escala", "é pequeno como peixe!"];
    ut[129] = ["pele do kraken", "você não está com medo?"];
    ut[113] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
    ut[118] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
    ut[114] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
    ut[161] = ["linha", "usada para fazer chapéus e mochila"];
    ut[147] = ["linha de diamante", "usada para fazer chapéus especiais"];
    ut[167] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
    ut[57] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
    ut[0] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
    ut[5] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
    ut[6] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
    ut[9] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
    ut[30] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
    ut[62] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
    ut[16] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
    ut[8] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
    ut[us.ΔⲆΔⵠⵠⵠⵠΔΔ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
    ut[3] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
    ut[4] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
    ut[31] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
    ut[35] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
    ut[36] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
    ut[37] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
    ut[38] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
    ut[45] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
    ut[12] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
    ut[13] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
    ut[14] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
    ut[15] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
    ut[33] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
    ut[46] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
    ut[50] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
    ut[51] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
    ut[52] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
    ut[58] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
    ut[25] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
    ut[26] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
    ut[27] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
    ut[43] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
    ut[59] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
    ut[23] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
    ut[41] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
    ut[42] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
    ut[83] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
    ut[10] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
    ut[11] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
    ut[40] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
    ut[84] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
    ut[85] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
    ut[86] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
    ut[48] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
    ut[47] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
    ut[185] = ["esfera do dragão", "dado na questt"];
    ut[149] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
    ut[175] = ["pedra verde", "você não vai trapacear, promete?"];
    ut[176] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
    ut[177] = ["pedra azul", "para pessoas muito gentis"];
    ut[77] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
    ut[78] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
    ut[79] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
    ut[180] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
    ut[181] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
    ut[127] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
    ut[128] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
    ut[130] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
    ut[49] = ["regador", "permite regar as plantas", "dano: 1"];
    ut[29] = ["mochila", "mais espaço para seus itens!"];
    ut[120] = ["papel", "usado para fazer o livro"];
    ut[28] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
    ut[195] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
    ut[148] = ["fechadura", "permite você trancar seu baú"];
    ut[158] = ["chave", "permite destrancar um baú"];
    ut[159] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
    ut[125] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
    ut[183] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
    ut[190] = ["telhado", "esconde você um pouco e te esquenta!"];
    ut[182] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
    ut[162] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
    ut[163] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
    ut[164] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
    ut[165] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
    ut[122] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
    ut[160] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
    ut[168] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
    ut[169] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
    ut[170] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
    ut[123] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
    ut[166] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
    ut[171] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
    ut[172] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
    ut[173] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
    ut[124] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
    ut[119] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
    ut[135] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
    ut[144] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
    ut[151] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
    ut[300] = "você não pode entrar no servidor";
    ut[301] = "kickado: ";
    ut[302] = "sua chave está em uso por outra pessoa";
    ut[303] = "sua chave está errada";
    ut[304] = "você tem uma versão velha, limpe seu cache";
    ut[305] = "não tem mais recursos";
    ut[306] = "você sobreviveu 1 dia";
    ut[307] = "você sobreviveu ";
    ut[308] = " dias";
    ut[309] = "você está morto ;-;";
    ut[310] = "servidor não pôde achar um local de spawn! spam o botão de play!";
    ut[311] = "servidor está cheio! spam o botão de play!";
    ut[312] = "não tem recursos";
    ut[313] = "inventário está cheio (botão direito para deletar itens)";
    ut[314] = " está morto";
    ut[315] = "essa não é a ferramenta certa";
    ut[316] = "você entrou no time";
    ut[317] = "você está morto";
    ut[318] = "entrou no time";
    ut[319] = "seu time foi destruido";
    ut[320] = "você saiu do time";
    ut[321] = " saiu do time";
    ut[322] = "alguém roubou sua ficha :>";
    ut[323] = "escolha um servidor";
    ut[324] = "jogadores";
    ut[325] = "jogadores totais";
    ut[326] = "jogadores nesse modo";
    ut[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Apelido";
    yt[0] = ["você morreu sem motivo"];
    yt[Ek] = ["você morreu de fome, como o jogo diz"];
    yt[Gl] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
    yt[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
    yt[co] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
    yt[Pg] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
    yt[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
    yt[Nn] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
    yt[$o] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
    yt[Hr] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
    yt[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
    yt[dh] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
    yt[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
    yt[13] = ["você morreu de sede. melhor beber sua própria urina."];
    yt[14] = ["você sabia que você morre afogado? agora você sabe."];
    yt[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
    yt[sg] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
    yt[ro] = ["sua pele caindo aos pedaços, o sol te matou."];
    yt[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
    yt[19] = ["como vampiro, não chegue perto do alho."];
    yt[an] = ["você comeu alho como vampiro, o que você esperava?"];
    yt[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
    ᐃΔΔⲆᐃ = "Uuunnnggg";
    ⵠⵠΔⵠⲆⵠⲆ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
  }
  const bt = Ks;
  function ct(b, c, d, e) {
    const f = b ^ 55199;
    const g = ~(c & 4912) & (c | 4912);
    const i = (58738 + d) % 65498;
    const a = e ^ 16704;
    const j = cf(f, g, i, a, f, g);
    Yk(i, a);
    return j ^ 60325;
  }
  function dt(b, c, d, e, f) {
    const i = b ^ 16528;
    const j = ~(c & 46930) & (c | 46930);
    const a = (8 << (d >> 8 & 255)) + (16 << (d >> 24 & 255)) + (24 << (d >> 16 & 255)) + (0 << (d & 255));
    const k = e ^ 57603;
    const h = ((52692 + f) * 1664525 + 1013904223) % 4294967296;
    const l = mf(i, j);
    bf(a, k, h, i, j);
    return ~(l & 10850) & l | ~(l & 10850) & 10850;
  }
  const et = gl;
  const ft = or;
  function jt() {
    ut[184] = ["You feel a great power emanating from this orb"];
    yt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    ut[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    ut[328] = " BACK TO THE GAME";
    ut[329] = " Share on Twitter";
    ut[330] = " Share on Facebook";
    ut[331] = "You can buy items on the shop in the next game with your points";
    ut[332] = "points";
    ut[333] = "Score";
    ut[334] = "Kill";
    ut[335] = "Days survived";
    ut[336] = "Building method: Free. Press G to change";
    ut[337] = "Building method: Grid. Press G to change";
    ut[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    ut[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    ut[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    ut[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < lg; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    ut[7] = ["Mano"];
    ut[140] = ["Tierra", "¡Tan limpia como mis manos!"];
    ut[126] = ["Arena", "¡Tengo arena en mis ojos!"];
    ut[109] = ["Madera", "¡Nunca hay suficiente!"];
    ut[108] = ["Piedra", "También llamada roca."];
    ut[111] = ["Oro", "Sé generoso, compártelo con los otros"];
    ut[112] = ["Diamante", "¿Que vas a hacer con él?"];
    ut[121] = ["Amatista", "Es Mauve como Lapa"];
    ut[131] = ["Harina", "Usada para cocinar."];
    ut[133] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
    ut[136] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
    ut[116] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
    ut[117] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
    ut[137] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
    ut[138] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
    ut[143] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
    ut[145] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
    ut[200] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
    ut[199] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
    ut[201] = ["Guirnalda", "Perfecta para decorar el techo"];
    ut[115] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    ut[110] = ["Baya", "No es venenosa.", "Comida: 10"];
    ut[132] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    ut[134] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
    ut[188] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    ut[189] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
    ut[191] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
    ut[192] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
    ut[193] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
    ut[194] = ["Planta de Espinas", "¡Te daña!"];
    ut[141] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
    ut[142] = ["Hielo", "Bueno para hacer tartas y agua"];
    ut[55] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
    ut[174] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
    ut[2] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
    ut[178] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
    ut[179] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
    ut[146] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
    ut[139] = ["Escamas", "¡Huele a pescado!"];
    ut[129] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
    ut[113] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
    ut[118] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
    ut[114] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
    ut[161] = ["Hilo", "Usado para craftear ropa y mochila"];
    ut[147] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
    ut[167] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
    ut[57] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
    ut[0] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
    ut[5] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
    ut[6] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
    ut[9] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
    ut[30] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
    ut[62] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
    ut[16] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
    ut[8] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
    ut[1] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
    ut[3] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
    ut[4] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
    ut[31] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
    ut[35] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
    ut[36] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
    ut[37] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
    ut[38] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
    ut[45] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
    ut[12] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
    ut[13] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
    ut[14] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
    ut[15] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
    ut[33] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
    ut[46] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
    ut[50] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
    ut[51] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
    ut[52] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
    ut[58] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
    ut[25] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
    ut[26] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
    ut[27] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
    ut[43] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
    ut[59] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
    ut[23] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
    ut[41] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
    ut[42] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
    ut[83] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
    ut[10] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
    ut[11] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
    ut[40] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
    ut[84] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
    ut[85] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
    ut[86] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
    ut[48] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
    ut[47] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
    ut[185] = ["Esfera del Dragón", "Dada en la misión"];
    ut[149] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
    ut[175] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
    ut[176] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
    ut[177] = ["Gema Azul", "Para gente muy amable"];
    ut[77] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
    ut[78] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
    ut[79] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
    ut[180] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
    ut[181] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
    ut[127] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
    ut[128] = ["Botella Vacia", "La puedes llenar de agua"];
    ut[130] = ["Regadera Vacía", "La tienes que llenar de agua"];
    ut[49] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
    ut[29] = ["Mochila", "¡Mas espacio para tus cosas!"];
    ut[120] = ["Hoja", "Usada para hacer un libro"];
    ut[28] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
    ut[195] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
    ut[148] = ["Cerradura", "Te permite cerrar tu cofre"];
    ut[158] = ["Llave", "Te permite abrir un cofre cerrado"];
    ut[159] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
    ut[125] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
    ut[183] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
    ut[190] = ["Techo", "Te esconde un poco y te protege del frío"];
    ut[182] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
    ut[162] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
    ut[163] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
    ut[164] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
    ut[165] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
    ut[122] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
    ut[160] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
    ut[168] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
    ut[169] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
    ut[170] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
    ut[123] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
    ut[166] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
    ut[171] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
    ut[172] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
    ut[173] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
    ut[124] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
    ut[119] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
    ut[135] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    ut[144] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    ut[151] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
    ut[300] = "No puedes unirte a este servidor";
    ut[301] = "Expulsado: ";
    ut[302] = "Tu llave ya está usada";
    ut[303] = "Tu llave está mal";
    ut[304] = "Tienes una versión antigua, limpia tu cache";
    ut[305] = "No hay mas recursos";
    ut[306] = "Has sobrevivido 1 día";
    ut[307] = "Has sobrevivido ";
    ut[308] = " días";
    ut[309] = "Estás muerto ;-;";
    ut[310] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
    ut[311] = "El servidor esta lleno, ¡spamea el botón de jugar!";
    ut[312] = "Recurso vacio";
    ut[313] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
    ut[314] = " está muerto";
    ut[315] = "Esta no es la herramienta correcta";
    ut[316] = "Te has unido a un equipo";
    ut[317] = "Estás muerto";
    ut[318] = " se unió al equipo";
    ut[319] = "Tu equipo ha sido destruido";
    ut[320] = "Has dejado el equipo";
    ut[321] = " dejo el equipo ";
    ut[322] = "Alguien te robó tu token :>";
    ut[323] = "Elige un servidor";
    ut[324] = "jugadores";
    ut[325] = "total de jugadores";
    ut[326] = "Jugadores en este modo de juego";
    ut[327] = "Próximamente...";
    document.getElementById("nickname_input").placeholder = "Apodo";
    yt[xq] = ["Has muerto por ninguna razón"];
    yt[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
    yt[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
    yt[Qn] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
    yt[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
    yt[Bh] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
    yt[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
    yt[Bk] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
    yt[Kn] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
    yt[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
    yt[Vq] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
    yt[dh] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
    yt[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
    yt[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
    yt[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
    yt[Wa] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
    yt[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
    yt[17] = ["Tu piel se cayó, el sol te quemó."];
    yt[Mr] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
    yt[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
    yt[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
    yt[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
    ᐃΔΔⲆᐃ = "Uuunnnggg";
    ⵠⵠΔⵠⲆⵠⲆ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
  }
  const kt = ll;
  const lt = Ds;
  const mt = xa;
  function nt() {
    ut[184] = ["You feel a great power emanating from this orb"];
    yt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    ut[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    ut[328] = " BACK TO THE GAME";
    ut[329] = " Share on Twitter";
    ut[330] = " Share on Facebook";
    ut[331] = "You can buy items on the shop in the next game with your points";
    ut[332] = "points";
    ut[333] = "Score";
    ut[334] = "Kill";
    ut[335] = "Days survived";
    ut[336] = "Building method: Free. Press G to change";
    ut[337] = "Building method: Grid. Press G to change";
    ut[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    ut[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    ut[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    ut[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = et; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    ut[7] = ["Hand"];
    ut[140] = ["Boden", "Dreckig!"];
    ut[126] = ["Sand", "Ich habe es in meine Augen bekommen!"];
    ut[109] = ["Holz", "Du kannst niemals zu viel haben!"];
    ut[108] = ["Stein", "Auch Fels gennant"];
    ut[111] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
    ut[112] = ["Diamant", "Was wirst du daraus machen?"];
    ut[121] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
    ut[131] = ["Mehl", "wird fürs Backen gebraucht"];
    ut[133] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
    ut[136] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
    ut[116] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
    ut[117] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
    ut[137] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
    ut[138] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
    ut[143] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
    ut[145] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
    ut[200] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
    ut[199] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
    ut[201] = ["Girlande", "perfekter Schmuck für Dächer"];
    ut[115] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    ut[110] = ["Beere", "Beeren lecker!", "Essen: 10"];
    ut[132] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    ut[134] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
    ut[188] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    ut[189] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
    ut[191] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    ut[192] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
    ut[193] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
    ut[194] = ["Dornenbusch", "Es sticht!"];
    ut[141] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
    ut[142] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
    ut[55] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
    ut[174] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
    ut[2] = ["Hasenfell", "Der Hase war so süß..."];
    ut[178] = ["Klares Fell", "Du bist eine Brotfabrik"];
    ut[179] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
    ut[146] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
    ut[139] = ["Schuppen", "Es riecht wie Fisch!"];
    ut[129] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
    ut[113] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
    ut[118] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
    ut[114] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
    ut[161] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
    ut[147] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
    ut[167] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
    ut[57] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
    ut[0] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
    ut[5] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
    ut[6] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
    ut[9] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
    ut[30] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
    ut[62] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
    ut[16] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
    ut[8] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
    ut[1] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
    ut[3] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    ut[4] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    ut[31] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
    ut[35] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
    ut[36] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
    ut[37] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
    ut[38] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
    ut[45] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
    ut[12] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
    ut[13] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
    ut[14] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
    ut[15] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
    ut[33] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
    ut[46] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
    ut[50] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    ut[51] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    ut[52] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
    ut[58] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
    ut[25] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
    ut[26] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
    ut[27] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
    ut[43] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
    ut[59] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
    ut[23] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
    ut[41] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
    ut[42] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
    ut[83] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    ut[10] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
    ut[11] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
    ut[40] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
    ut[84] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    ut[85] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    ut[86] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    ut[48] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
    ut[47] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    ut[185] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
    ut[149] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
    ut[175] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
    ut[176] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
    ut[177] = ["Blauer Edelstein", "Für sehr nette Leute"];
    ut[77] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    ut[78] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    ut[79] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    ut[180] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
    ut[181] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
    ut[127] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
    ut[128] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
    ut[130] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
    ut[49] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
    ut[29] = ["Rucksack", "Mehr Platz im Inventar!"];
    ut[120] = ["Papier", "Wird fürs Büchermachen verwendet"];
    ut[28] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
    ut[195] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
    ut[148] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
    ut[158] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
    ut[159] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
    ut[125] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
    ut[183] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
    ut[190] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
    ut[182] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
    ut[162] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
    ut[163] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
    ut[164] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
    ut[165] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
    ut[122] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
    ut[160] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
    ut[168] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
    ut[169] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
    ut[170] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
    ut[123] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
    ut[166] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
    ut[171] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
    ut[172] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
    ut[173] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
    ut[124] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
    ut[119] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
    ut[135] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    ut[144] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    ut[151] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
    ut[300] = "Du kannst diesem Server nicht beitreten";
    ut[301] = "Gekickt: ";
    ut[302] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
    ut[303] = "Dein Schlüssel ist falsch";
    ut[304] = "Deine Version ist veraltet, säubere dein Cache";
    ut[305] = "Es gibt keine neuen Ressourcen";
    ut[306] = "Du hast einen Tag überlebt";
    ut[307] = "Du hast überlebt ";
    ut[308] = " Tage";
    ut[309] = "Du bist gestorben ;-;";
    ut[310] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
    ut[311] = "Server ist voll! Drücke immer wieder auf spielen!";
    ut[312] = "Ressource ist leer";
    ut[313] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
    ut[314] = " ist gestorben";
    ut[315] = "Das ist nicht das richtige Werkzeug";
    ut[316] = "Du bist einem Team beigetreten";
    ut[317] = "Du bist gestorben";
    ut[318] = " ist dem Team beigetreten";
    ut[319] = "Dein Team wurde zerstört";
    ut[320] = "Du hast das Team verlassen";
    ut[321] = " hat das Team verlassen";
    ut[322] = "Jemand hat dein Token gestohlen :>";
    ut[323] = "Suche dir ein Server aus";
    ut[324] = "Spieler";
    ut[325] = "alle Spieler";
    ut[326] = "Spieler in diesem Modus";
    ut[327] = "Bald verfügbar...";
    document.getElementById("nickname_input").placeholder = "Spitzname";
    yt[0] = ["Du wurdest ohne Grund getötet"];
    yt[Ls] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
    yt[Ol] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
    yt[Lq] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
    yt[ge] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
    yt[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
    yt[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
    yt[Sl] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
    yt[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
    yt[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
    yt[In] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
    yt[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
    yt[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
    yt[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
    yt[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
    yt[nr] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
    yt[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
    yt[ji] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
    yt[Bg] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
    yt[_k] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
    yt[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
    yt[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
    ᐃΔΔⲆᐃ = "Uuunnnggg";
    ⵠⵠΔⵠⲆⵠⲆ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
  }
  function ot() {
    ut[184] = ["You feel a great power emanating from this orb"];
    yt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    ut[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    ut[328] = " BACK TO THE GAME";
    ut[329] = " Share on Twitter";
    ut[330] = " Share on Facebook";
    ut[331] = "You can buy items on the shop in the next game with your points";
    ut[332] = "points";
    ut[333] = "Score";
    ut[334] = "Kill";
    ut[335] = "Days survived";
    ut[336] = "Building method: Free. Press G to change";
    ut[337] = "Building method: Grid. Press G to change";
    ut[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    ut[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    ut[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    ut[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = Qr; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    ut[7] = ["Ręka"];
    ut[140] = ["Ziemia", "Brudna!"];
    ut[126] = ["Piasek", "Mam go w oczach!"];
    ut[109] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
    ut[108] = ["Kamień", "Także nazywany skałą"];
    ut[111] = ["Złoto", "Bądź hojny, daj trochę innym"];
    ut[112] = ["Diament", "Co z nim zrobisz?"];
    ut[121] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
    ut[131] = ["Mąka", "Używana w gotowaniu"];
    ut[133] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
    ut[136] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
    ut[116] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
    ut[117] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
    ut[137] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
    ut[138] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
    ut[143] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
    ut[145] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
    ut[200] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
    ut[199] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
    ut[201] = ["Girlanda", "Idealna do dekorowania dachów"];
    ut[115] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    ut[110] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
    ut[132] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    ut[134] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
    ut[188] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    ut[189] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
    ut[191] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    ut[192] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
    ut[193] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
    ut[194] = ["Kolczasty krzew", "Kłuje!"];
    ut[141] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
    ut[142] = ["Lód", "Użyteczny do robienia ciast i wody"];
    ut[55] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
    ut[174] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
    ut[2] = ["Skóra królika", "Ten królik był taki słodziutki..."];
    ut[178] = ["Skóra", "Jesteś fabryką chleba"];
    ut[179] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
    ut[146] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
    ut[139] = ["Łuski", "Pachnie jak ryba!"];
    ut[129] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
    ut[113] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
    ut[118] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
    ut[114] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
    ut[161] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
    ut[147] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
    ut[167] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
    ut[57] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
    ut[0] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
    ut[5] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
    ut[6] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    ut[9] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    ut[30] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
    ut[62] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
    ut[16] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
    ut[8] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
    ut[1] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
    ut[3] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    ut[4] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    ut[31] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    ut[35] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
    ut[36] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
    ut[37] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
    ut[38] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
    ut[45] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
    ut[12] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
    ut[13] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
    ut[14] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
    ut[15] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
    ut[33] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
    ut[46] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
    ut[50] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    ut[51] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    ut[52] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    ut[58] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
    ut[25] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
    ut[26] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
    ut[27] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
    ut[43] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
    ut[59] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
    ut[23] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
    ut[41] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
    ut[42] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
    ut[83] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
    ut[10] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
    ut[11] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
    ut[40] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
    ut[84] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
    ut[85] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
    ut[86] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
    ut[48] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
    ut[47] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    ut[185] = ["Smocza kula", "Zdobyta podczas zadania"];
    ut[149] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
    ut[175] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
    ut[176] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
    ut[177] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
    ut[77] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    ut[78] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    ut[79] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    ut[180] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
    ut[181] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
    ut[127] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
    ut[128] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
    ut[130] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
    ut[49] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
    ut[29] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
    ut[120] = ["Papier", "Używany w tworzeniu książki"];
    ut[28] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
    ut[195] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
    ut[148] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
    ut[158] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
    ut[159] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
    ut[125] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
    ut[183] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
    ut[190] = ["Dach", "Trochę cie ogrzewa i chowa!"];
    ut[182] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
    ut[162] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
    ut[163] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
    ut[164] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
    ut[165] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
    ut[122] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
    ut[160] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
    ut[168] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
    ut[169] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
    ut[170] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
    ut[123] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
    ut[166] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
    ut[171] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
    ut[172] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
    ut[173] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
    ut[124] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
    ut[119] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
    ut[135] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    ut[144] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    ut[151] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
    ut[300] = "Nie możesz dołączyć do tego serwera";
    ut[301] = "Wyrzucony: ";
    ut[302] = "Twój klucz jest aktualnie używany przez innego gracza";
    ut[303] = "Twój klucz jest nieprawidłowy";
    ut[304] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
    ut[305] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
    ut[306] = "Przeżyłeś 1 dzień";
    ut[307] = "Przeżyłeś ";
    ut[308] = " dni";
    ut[309] = "Jesteś martwy ;-;";
    ut[310] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
    ut[311] = "Serwer jest pełny! Spamuj przycisk zagraj!";
    ut[312] = "Źródło jest puste";
    ut[313] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
    ut[314] = " jest martwy";
    ut[315] = "To nie jest właściwe narzędzie";
    ut[316] = "Dołączyłeś do drużyny";
    ut[317] = "Jesteś martwy";
    ut[318] = " dołączył do drużyny";
    ut[319] = "Twoja drużyna została zniszczona";
    ut[320] = " Opuściłeś drużynę";
    ut[321] = " opuścił drużynę";
    ut[322] = "Ktoś ukradł twój żeton :>";
    ut[323] = "Wybierz serwer";
    ut[324] = "graczy";
    ut[325] = "wszystkich graczy";
    ut[326] = "graczy w tym trybie";
    ut[327] = "Już wkrótce...";
    document.getElementById("nickname_input").placeholder = "Przydomek";
    yt[0] = ["Zostałeś zabity bez powodu"];
    yt[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
    yt[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
    yt[Hn] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
    yt[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
    yt[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
    yt[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
    yt[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
    yt[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
    yt[Dg] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
    yt[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
    yt[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
    yt[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
    yt[pg] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
    yt[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
    yt[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
    yt[sg] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
    yt[17] = ["Twoja skóra odpada, słońce cię zabija."];
    yt[Mr] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
    yt[xj] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
    yt[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
    yt[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
    ᐃΔΔⲆᐃ = "Uuunnnggg";
    ⵠⵠΔⵠⲆⵠⲆ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
  }
  function pt(a) {
    return function (a, b, c, d, e) {
      rk(yw, a, b, c, d, e);
      const f = mo(xw[Qr], xw[1], xw[2], xw[Ql], xw[4]);
      To(xw[0], xw[1]);
      return ~(f & 6728) & (f | 6728);
    }(a, 42721, 29547, 20110, 9088);
  }
  const qt = vl;
  function rt() {
    ut[184] = ["You feel a great power emanating from this orb"];
    yt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    ut[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    ut[328] = " RETOUR AU JEU";
    ut[329] = " Partage sur Twitter";
    ut[330] = " Partage sur Facebook";
    ut[331] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
    ut[332] = "points";
    ut[333] = "Score";
    ut[334] = "Tués";
    ut[335] = "Jours survécus";
    ut[336] = "Mode de construction: Libre. Appuie sur G pour changer";
    ut[337] = "Mode de construction: Grille. Appuie sur G pour changer";
    ut[197] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
    ut[18] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
    ut[61] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
    ut[198] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quêtes";
    document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
    document.getElementById("constraintquest").innerHTML = " Contraintes";
    document.getElementById("claim_rewards").innerHTML = " Résultat";
    document.getElementById("rewardquest").innerHTML = " Récompenses";
    document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
    document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
    document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
    document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
    document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
    document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
    document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
    for (var a = An; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
    ut[7] = ["Main"];
    ut[140] = ["Terre", "C'est sale!"];
    ut[126] = ["Sable", "J'en ai dans les yeux"];
    ut[109] = ["Bois", "Tu n'en auras jamais trop!"];
    ut[108] = ["Pierre", "Aussi appelée roche"];
    ut[111] = ["Or", "Sois généreux, donne en aux autres"];
    ut[112] = ["Diamant", "Comme tes yeux! wesh"];
    ut[121] = ["Améthyste", "C'est Mauve comme Lapa"];
    ut[131] = ["Farine", "Utile pour la cuisine"];
    ut[133] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
    ut[136] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
    ut[116] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
    ut[117] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
    ut[137] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
    ut[138] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
    ut[143] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
    ut[145] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
    ut[200] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
    ut[199] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
    ut[201] = ["Guirlandes", "Utilisable sur les toits"];
    ut[115] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
    ut[110] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
    ut[132] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    ut[134] = ["Blé", "Peut être transformé en farine dans les moulins"];
    ut[188] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    ut[189] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
    ut[191] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
    ut[192] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
    ut[193] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
    ut[194] = ["Ronces", "Ça pique!"];
    ut[141] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
    ut[142] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
    ut[55] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
    ut[174] = ["Peau de loup", "Il était où le gentil ti Youki?"];
    ut[2] = ["Peau de lapin", "Vous êtes un monstre"];
    ut[178] = ["Fourrure blanche", "Tu es une usine à pain"];
    ut[179] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
    ut[146] = ["Fourrure d'hiver", "Il voulait juste un calin"];
    ut[139] = ["Écailles", "Ça sent le poisson!"];
    ut[129] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
    ut[113] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
    ut[118] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
    ut[114] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
    ut[161] = ["Fil", "Utile pour faire des chapeaux et un sac"];
    ut[147] = ["Fil de diamant", "Utile pour faire des chapeaux"];
    ut[167] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
    ut[57] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
    ut[0] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
    ut[5] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
    ut[6] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
    ut[9] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
    ut[30] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
    ut[62] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
    ut[16] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
    ut[8] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
    ut[1] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
    ut[3] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
    ut[4] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
    ut[31] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
    ut[35] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
    ut[36] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
    ut[37] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
    ut[38] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
    ut[45] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
    ut[12] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
    ut[13] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
    ut[14] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
    ut[15] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
    ut[33] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
    ut[46] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
    ut[50] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
    ut[51] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
    ut[52] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
    ut[58] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
    ut[25] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
    ut[26] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
    ut[27] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
    ut[43] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
    ut[59] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
    ut[23] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    ut[41] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    ut[42] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    ut[83] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
    ut[10] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
    ut[11] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    ut[40] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
    ut[84] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    ut[85] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
    ut[86] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    ut[48] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
    ut[47] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
    ut[185] = ["Orbe du Dragon", "Donné en Quête"];
    ut[149] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
    ut[175] = ["Gemme verte", "Tu n'as pas triché, promis?"];
    ut[176] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
    ut[177] = ["Gemme bleue", "Pour les gens trop gentils"];
    ut[77] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
    ut[78] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
    ut[79] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
    ut[180] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
    ut[181] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
    ut[127] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
    ut[128] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
    ut[130] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
    ut[49] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
    ut[29] = ["Sac", "Plus de place dans ton inventaire!"];
    ut[120] = ["Papier", "Pour fabriquer toute sorte d'objets"];
    ut[28] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
    ut[195] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
    ut[148] = ["Cadenas", "Pour verrouiller un coffre"];
    ut[158] = ["Clé", "Pour déverrouiller un coffre"];
    ut[159] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
    ut[125] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
    ut[183] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
    ut[190] = ["Toit", "Te cache un peu et te réchauffe"];
    ut[182] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
    ut[162] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
    ut[163] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
    ut[164] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
    ut[165] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
    ut[122] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
    ut[160] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
    ut[168] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
    ut[169] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
    ut[170] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
    ut[123] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
    ut[166] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
    ut[171] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
    ut[172] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
    ut[173] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
    ut[124] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
    ut[119] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
    ut[135] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    ut[144] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    ut[151] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
    ut[300] = "Tu ne peux pas rejoindre le serveur";
    ut[301] = "Expulsé: ";
    ut[302] = "Ta clé est déjà utilisée par quelqu'un d'autre";
    ut[303] = "Ta clé est fausse";
    ut[304] = "Tu as une vieille version, rafraichis tes caches";
    ut[305] = "Il n'y a plus de nouvelles ressources";
    ut[306] = "Tu as survécu 1 jour";
    ut[307] = "Tu as survécu ";
    ut[308] = " jours";
    ut[309] = "Tu es mort ;-;";
    ut[310] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
    ut[311] = "Le serveur est complet! Spam le bouton jouer";
    ut[312] = "Cette ressource est vide";
    ut[313] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
    ut[314] = " est mort";
    ut[315] = "Ce n'est pas le bon outil";
    ut[316] = "Tu as rejoins une équipe";
    ut[317] = "Tu es mort";
    ut[318] = " a rejoint l'équipe";
    ut[319] = "Ton équipe a été détruite";
    ut[320] = "Tu as quitté l'équipe";
    ut[321] = " a quitté l'équipe";
    ut[322] = "Quelqu'un a volé ton token :>";
    ut[323] = "Choisis un serveur";
    ut[324] = "joueurs";
    ut[325] = "joueurs";
    ut[326] = "joueurs dans ce mode";
    ut[327] = "Bientôt...";
    document.getElementById("nickname_input").placeholder = "Surnom";
    yt[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
    yt[Ni] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
    yt[ta] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
    yt[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
    yt[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
    yt[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
    yt[Kl] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
    yt[Bk] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
    yt[8] = ["Cet ours voulait juste un câlin."];
    yt[tg] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
    yt[Gh] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
    yt[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
    yt[Ug] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
    yt[$h] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
    yt[jh] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
    yt[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
    yt[16] = ["Un kraken a 'kraké' tes os."];
    yt[rj] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
    yt[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
    yt[Po] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
    yt[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
    yt[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
    ᐃΔΔⲆᐃ = "Uuunnnggg";
    ⵠⵠΔⵠⲆⵠⲆ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
  }
  var ut = [];
  const vt = po;
  const wt = qt;
  for (var xt = 0; xt < 344; xt++) {
    ut[xt] = "";
  }
  var yt = [];
  $(".md-languages").on("click", function () {
    $(this).toggleClass("active");
  });
  $(".md-languages ul li").on("click", function () {
    var a = $(this).text();
    if (a === "English") {
      Zs();
    } else if (a === "Français") {
      rt();
    } else if (a === "Deutsch") {
      nt();
    } else if (a === "Español") {
      jt();
    } else if (a === "Português") {
      _s();
    } else if (a === "Русский") {
      $s();
    } else if (a === "Polski") {
      ot();
    }
    ᐃⲆⵠΔⲆ = [];
    dx.Ⲇⵠᐃⵠ.label = [];
    $(".md-languages ul li").removeClass("active");
    $(this).addClass("active");
    $(".md-languages label button").text(a);
  });
  Ua = "EN";
  const zt = oe;
  var At;
  switch (navigator.language || navigator.userLanguage) {
    case "ru":
      Ua = "RU";
      break;
    case "en":
      Ua = "EN";
      break;
    case "es":
      Ua = "SP";
      break;
    case "fr":
      Ua = "FR";
      break;
    case "pl":
      Ua = "PL";
      break;
    case "de":
      Ua = "DE";
      break;
    case "pt":
      Ua = "PT";
  }
  const Bt = cg;
  const Ct = es;
  const Dt = ua;
  const Et = Jj;
  const Ft = Rn;
  if (Ua === "FR") {
    $(".md-languages label button").text("Français");
    At = rt;
  } else if (Ua === "PL") {
    $(".md-languages label button").text("Polski");
    At = ot;
  } else if (Ua === "PT") {
    $(".md-languages label button").text("Português");
    At = _s;
  } else if (Ua === "SP") {
    $(".md-languages label button").text("Español");
    At = jt;
  } else if (Ua === "RU") {
    $(".md-languages label button").text("Русский");
    At = $s;
  } else if (Ua === "DE") {
    $(".md-languages label button").text("Deutsch");
    At = nt;
  } else {
    $(".md-languages label button").text("English");
    At = Zs;
  }
  Δᐃ = {
    ⵠΔⲆΔΔⲆⲆⲆᐃ: "img/logo.png",
    ⲆⲆⲆⲆᐃⵠⵠ: "img/mapday.png",
    ΔᐃⵠΔⵠⵠΔ: "img/mapnight.png",
    ᐃⲆᐃⲆΔⵠⲆΔΔ: "img/bigzday.png",
    ⵠᐃᐃⵠΔⲆⲆᐃⵠ: "img/bigznight.png",
    ᐃⲆⵠΔⲆⵠΔ: "img/bigday-river1.png",
    ΔⵠᐃΔᐃᐃΔΔᐃ: "img/bigday-lake.png",
    ΔᐃΔⲆⵠΔᐃ: "img/bigday-berry.png",
    ⲆⲆⲆⵠⵠⲆⵠ: "img/bigday-stone1.png",
    ᐃᐃΔᐃⵠᐃᐃ: "img/bigday-stone2.png",
    ΔⵠᐃⲆⲆⵠⲆ: "img/bigday-gold1.png",
    ΔΔᐃⵠⲆΔⵠ: "img/bigday-gold2.png",
    ᐃⵠᐃⲆΔⲆΔ: "img/bigday-emerald1.png",
    ⵠΔⲆΔᐃⲆⲆ: "img/bigday-emerald2.png",
    ΔⵠⲆᐃᐃΔΔ: "img/bigday-amethyst.png",
    ΔⵠⲆⲆⲆΔⲆ: "img/bigday-bear.png",
    ⵠΔᐃᐃⵠⵠⲆ: "img/bigday-cave.png",
    ᐃⵠᐃⵠᐃⵠⲆ: "img/bigday-diamond.png",
    ᐃⲆΔᐃᐃΔⵠ: "img/bigday-island.png",
    ⵠΔΔⵠᐃᐃΔ: "img/bigday-reidite.png",
    ⲆᐃⲆΔⵠᐃⵠ: "img/bigday-spider.png",
    ⵠⵠᐃⲆΔⵠⲆ: "img/bigday-wolf.png",
    ⲆⲆΔΔᐃⵠΔ: "img/bigday-fir-tree.png",
    ᐃⵠᐃⵠᐃⵠΔ: "img/bigday-fox.png",
    ⲆΔᐃⲆΔⵠΔ: "img/bigday-kraken.png",
    ⵠΔⵠΔⲆⲆᐃ: "img/bigday-piranha.png",
    ⵠΔᐃⵠΔⵠᐃ: "img/bigday-cactus.png",
    ᐃᐃᐃⵠΔⵠᐃ: "img/bigday-magma.png",
    ⵠⵠᐃᐃᐃΔⲆ: "img/bigday-river1.png",
    ΔⵠⲆⵠΔⲆⲆΔΔ: "img/bignight-lake.png",
    ⵠⲆⲆᐃⵠΔⵠⲆᐃ: "img/bignight-berry.png",
    ⲆᐃⲆΔᐃⲆⲆ: "img/bignight-stone1.png",
    ΔΔᐃⵠⵠⲆᐃ: "img/bignight-stone2.png",
    ᐃⵠⵠᐃⲆⲆⲆ: "img/bignight-gold1.png",
    ΔᐃⵠᐃⲆᐃⵠ: "img/bignight-gold2.png",
    ᐃⲆΔⲆᐃⲆⵠ: "img/bignight-emerald1.png",
    ⵠΔᐃᐃⲆⲆⲆ: "img/bignight-emerald2.png",
    ᐃⵠⲆΔᐃⲆⲆ: "img/bignight-amethyst.png",
    ⵠⲆⵠⵠⵠⵠᐃ: "img/bignight-bear.png",
    ᐃⲆᐃᐃΔᐃⲆ: "img/bignight-cave.png",
    ᐃΔΔᐃΔᐃΔ: "img/bignight-diamond.png",
    ⵠᐃᐃΔᐃᐃⵠ: "img/bignight-island.png",
    ΔⵠᐃⲆᐃΔⵠ: "img/bignight-reidite.png",
    ⵠⲆⲆⵠⲆᐃⵠ: "img/bignight-spider.png",
    ⲆⲆᐃⲆⲆⵠⲆ: "img/bignight-wolf.png",
    ⵠᐃⵠᐃΔᐃⵠ: "img/bignight-fir-tree.png",
    ΔΔⵠⵠⲆᐃΔ: "img/bignight-fox.png",
    ᐃⵠⲆⵠⲆⵠᐃ: "img/bignight-kraken.png",
    ⵠᐃᐃⲆⲆᐃⲆ: "img/bignight-piranha.png",
    ΔⵠⵠΔΔⵠⲆ: "img/bignight-cactus.png",
    ΔᐃᐃⲆⲆᐃΔ: "img/bignight-magma.png",
    ⵠⵠⲆᐃⲆⲆⲆ: "img/bigday-desert.png",
    ᐃᐃΔⲆᐃⲆⲆ: "img/bigday-winter.png",
    ᐃⵠᐃⲆⵠⵠΔ: "img/bigday-lava.png",
    ⵠΔⵠⲆᐃⲆⵠ: "img/bigday-forest.png",
    ⵠⵠⲆᐃⲆⵠⲆ: "img/bignight-desert.png",
    ⵠᐃⵠᐃⵠⲆᐃ: "img/bignight-winter.png",
    ⲆΔⲆⵠᐃᐃⵠ: "img/bignight-lava.png",
    ⵠΔⲆΔᐃΔⵠ: "img/bignight-forest.png",
    ΔⵠΔᐃⵠⵠⲆ: "img/day-river-wave.png",
    ⲆᐃⵠⲆⲆⲆⲆ: "img/night-river-wave.png",
    ⲆⲆⵠⵠⵠⲆⵠ: "img/day-fog0.png",
    ΔⲆᐃⲆⵠⵠᐃ: "img/day-fog1.png",
    ⵠⵠᐃⵠⵠᐃᐃ: "img/day-fog2.png",
    ΔΔⵠᐃⵠΔΔ: "img/night-fog0.png",
    ᐃⵠᐃᐃΔⵠⲆ: "img/night-fog1.png",
    ΔᐃᐃᐃⲆΔΔ: "img/night-fog2.png",
    ᐃⲆΔⲆᐃⵠⵠ: "img/day-fogdesert0.png",
    ⵠⲆⵠᐃᐃΔⲆ: "img/day-fogdesert1.png",
    ᐃΔⲆΔⲆΔΔ: "img/day-fogdesert2.png",
    ⵠᐃⲆᐃⵠᐃᐃ: "img/night-fogdesert0.png",
    ᐃⵠⲆⵠⲆΔⵠ: "img/night-fogdesert1.png",
    ΔΔᐃⲆΔΔⲆ: "img/night-fogdesert2.png",
    ⵠⲆΔⲆⵠΔⵠ: "img/day-cross-server.png",
    ᐃᐃⲆΔᐃΔⲆ: "img/day-here-server.png",
    ᐃᐃᐃⵠΔΔⲆ: "img/day-finish-server.png",
    ᐃⲆΔⲆⲆⵠΔ: "img/day-item-server.png",
    ⲆΔΔⵠΔΔⵠ: "img/day-skull-server.png",
    ΔᐃⵠⲆⲆΔΔ: "img/night-cross-server.png",
    ᐃΔΔⵠΔⵠⵠ: "img/night-here-server.png",
    ⵠⵠΔⵠΔΔᐃ: "img/night-finish-server.png",
    ᐃⲆⲆᐃΔⲆΔ: "img/night-item-server.png",
    ΔΔΔⵠΔⵠⲆ: "img/night-skull-server.png",
    ⲆΔΔⲆᐃⵠᐃ: "img/day-reidite0.png",
    ⲆⲆⲆⲆΔⲆΔ: "img/night-reidite0.png",
    ⲆⲆⲆᐃᐃΔΔ: "img/day-reidite1.png",
    ⲆⲆⲆⵠⲆⲆⵠ: "img/night-reidite1.png",
    ΔΔΔⲆᐃᐃⲆ: "img/day-reidite2.png",
    ⲆᐃΔΔΔⲆⲆ: "img/night-reidite2.png",
    ᐃⲆⵠⵠⲆᐃⵠ: "img/day-lava1.png",
    ⵠⲆⲆᐃⵠᐃⵠ: "img/night-lava1.png",
    ΔᐃᐃΔΔⲆⲆ: "img/day-lava2.png",
    ᐃᐃⲆⵠΔΔⵠ: "img/night-lava2.png",
    ᐃⵠⵠΔⵠⵠⵠ: "img/day-lava3.png",
    ⲆΔⵠⲆΔᐃΔ: "img/night-lava3.png",
    ⵠΔᐃⵠⵠΔⵠ: "img/day-lava4.png",
    ᐃⵠΔᐃⲆⲆⲆ: "img/night-lava4.png",
    ⲆΔⵠⲆΔΔⲆ: "img/day-lava5.png",
    ⲆⵠⵠⲆΔⵠⵠ: "img/night-lava5.png",
    ᐃᐃᐃᐃᐃⲆⲆ: "img/day-lava6.png",
    ⲆᐃⲆⵠⵠΔΔ: "img/night-lava6.png",
    ⵠᐃⵠⲆΔⵠᐃ: "img/day-lava-ground1.png",
    ᐃⵠⵠⲆⲆⲆⵠ: "img/night-lava-ground1.png",
    ⵠⲆᐃΔΔΔⲆ: "img/day-lava-ground2.png",
    ⲆᐃⲆΔΔⵠΔ: "img/night-lava-ground2.png",
    ᐃΔⵠΔΔᐃᐃ: "img/day-lava-ground3.png",
    ΔⲆᐃΔᐃᐃⲆ: "img/night-lava-ground3.png",
    ⵠᐃⵠⲆⲆⲆᐃ: "img/day-lava-ground4.png",
    ⵠⵠⵠΔⲆⲆᐃ: "img/night-lava-ground4.png",
    ᐃⵠⲆᐃⵠⵠⲆ: "img/day-lava-ground5.png",
    ᐃᐃⵠⵠᐃⲆⵠ: "img/night-lava-ground5.png",
    ᐃΔΔⲆⲆⲆⵠ: "img/day-lava-ground6.png",
    ΔⲆΔᐃⲆᐃᐃ: "img/night-lava-ground6.png",
    ᐃⵠᐃⵠⵠΔⵠ: "img/day-fire-mob.png",
    ᐃⵠⵠᐃᐃⲆΔ: "img/night-fire-mob.png",
    ᐃⲆⵠⵠᐃⲆⵠ: "img/hurt-fire-mob.png",
    ⵠᐃᐃΔᐃΔᐃ: "img/day-diamond-protection.png",
    ᐃⲆᐃΔᐃⲆΔ: "img/night-diamond-protection.png",
    ⲆⲆⵠᐃⲆⵠΔ: "img/day-hand-diamond-protection.png",
    ᐃΔⲆᐃΔΔⲆ: "img/night-hand-diamond-protection.png",
    ⲆΔᐃⵠΔΔⵠ: "img/inv-diamond-protection-out.png",
    ⵠⵠⵠⵠᐃᐃᐃ: "img/inv-diamond-protection-in.png",
    ᐃΔⲆⵠⲆΔᐃ: "img/inv-diamond-protection-click.png",
    ⲆΔⲆᐃᐃΔⲆ: "img/day-amethyst-protection.png",
    ᐃΔΔΔᐃⲆⲆ: "img/night-amethyst-protection.png",
    ᐃⵠᐃᐃΔᐃΔΔⵠ: "img/day-hand-amethyst-protection.png",
    ⵠⵠⲆᐃⵠΔⲆⲆⵠ: "img/night-hand-amethyst-protection.png",
    ⲆⲆᐃⲆᐃᐃΔ: "img/inv-amethyst-protection-out.png",
    ᐃᐃⲆᐃΔΔⲆ: "img/inv-amethyst-protection-in.png",
    ⲆⲆⲆⵠⵠⵠΔ: "img/inv-amethyst-protection-click.png",
    ⲆⵠᐃⲆⲆᐃΔ: "img/day-reidite-sword.png",
    ΔⲆⲆⲆⲆᐃᐃ: "img/night-reidite-sword.png",
    ⲆᐃⲆⵠΔⲆΔ: "img/inv-reidite-sword-out.png",
    ᐃᐃᐃⲆⲆⲆⲆ: "img/inv-reidite-sword-in.png",
    ΔⲆΔⲆⵠᐃⵠ: "img/inv-reidite-sword-click.png",
    ΔⵠΔΔⵠΔᐃ: "img/inv-reidite-out.png",
    ⲆΔⵠᐃᐃⲆᐃ: "img/inv-reidite-in.png",
    ᐃᐃⲆΔⵠⲆᐃ: "img/inv-reidite-click.png",
    ᐃⵠΔⵠⲆⲆᐃ: "img/inv-flame-out.png",
    ⵠΔΔΔⲆᐃᐃ: "img/inv-flame-in.png",
    ᐃΔΔΔⲆᐃⲆ: "img/inv-flame-click.png",
    ⲆⲆⵠⲆΔΔᐃ: "img/day-magma-buble0.png",
    ᐃᐃᐃⵠᐃⲆⵠ: "img/night-magma-buble0.png",
    ᐃⵠⲆΔⵠⲆⲆ: "img/day-magma-buble1.png",
    ⲆⲆΔΔᐃᐃΔ: "img/night-magma-buble1.png",
    ᐃΔⵠⵠᐃⵠΔ: "img/day-magma-buble2.png",
    ⲆⲆⵠΔΔⲆⵠ: "img/night-magma-buble2.png",
    ᐃᐃΔⵠΔⲆΔ: "img/day-lava-dragon.png",
    ⵠᐃⵠⵠⵠⵠᐃ: "img/night-lava-dragon.png",
    ᐃᐃΔⵠⲆΔΔⲆⲆ: "img/day-fire-dragon.png",
    ⵠᐃⵠⵠΔⵠⵠΔⵠ: "img/night-fire-dragon.png",
    ⵠⲆΔΔⲆⵠᐃ: "img/hurt-lava-dragon.png",
    ΔⲆᐃΔΔⵠⵠ: "img/day-lava-wing-left.png",
    ΔᐃΔΔᐃᐃⲆ: "img/night-lava-wing-left.png",
    ᐃΔΔᐃⵠⲆⵠ: "img/day-lava-wing-right.png",
    ᐃΔΔⲆᐃᐃⵠ: "img/night-lava-wing-right.png",
    ᐃⵠⲆⲆⵠⵠᐃ: "img/hurt-lava-wing-left.png",
    ⵠᐃⵠⵠΔᐃⲆ: "img/hurt-lava-wing-right.png",
    ΔⲆⲆⵠⵠⵠⲆ: "img/day-reidite-spear.png",
    ⲆⵠΔⲆⲆᐃᐃ: "img/night-reidite-spear.png",
    ⲆⵠΔᐃᐃΔΔ: "img/inv-reidite-spear-out.png",
    ⲆⲆⲆᐃΔΔⵠ: "img/inv-reidite-spear-in.png",
    ⲆᐃⲆΔⵠΔⵠ: "img/inv-reidite-spear-click.png",
    ᐃᐃⲆᐃⵠⲆⵠ: "img/day-reidite-helmet.png",
    ⲆⵠΔΔⲆΔᐃ: "img/night-reidite-helmet.png",
    ⲆΔᐃΔΔⲆᐃ: "img/inv-reidite-helmet-out.png",
    ⵠᐃⵠⲆΔⵠΔ: "img/inv-reidite-helmet-in.png",
    ΔΔⵠⲆⵠᐃΔ: "img/inv-reidite-helmet-click.png",
    ⲆⲆᐃⵠⵠⲆⵠ: "img/day-hand-reidite-protection.png",
    ⲆᐃΔᐃⲆⵠⵠ: "img/night-hand-reidite-protection.png",
    ᐃⲆᐃⲆᐃᐃᐃ: "img/day-reidite-protection.png",
    ΔⲆⲆⲆⵠⵠΔ: "img/night-reidite-protection.png",
    Ⲇᐃᐃⵠⵠⵠⵠ: "img/inv-reidite-protection-out.png",
    ᐃᐃⲆᐃⵠⵠΔ: "img/inv-reidite-protection-in.png",
    ⲆΔᐃΔⵠⲆΔ: "img/inv-reidite-protection-click.png",
    ᐃᐃⵠᐃⲆΔΔ: "img/day-lava-dragon-sword.png",
    ⲆᐃᐃⲆⵠⵠⵠ: "img/night-lava-dragon-sword.png",
    ΔⵠⵠᐃⵠⲆⵠ: "img/inv-lava-dragon-sword-out.png",
    ᐃᐃΔΔΔΔᐃ: "img/inv-lava-dragon-sword-in.png",
    ⵠⲆⵠᐃⵠΔⵠ: "img/inv-lava-dragon-sword-click.png",
    ⵠᐃⵠᐃᐃᐃᐃ: "img/day-lava-spear.png",
    ΔΔⲆⵠΔⵠΔ: "img/night-lava-spear.png",
    ΔⵠᐃΔΔⲆⲆ: "img/inv-lava-spear-out.png",
    ᐃⲆⲆΔᐃΔⲆ: "img/inv-lava-spear-in.png",
    ⵠⲆᐃᐃⲆᐃⲆ: "img/inv-lava-spear-click.png",
    ⲆⵠⲆΔΔⵠΔ: "img/day-lava-helmet.png",
    ᐃΔᐃⲆᐃΔⵠ: "img/night-lava-helmet.png",
    ΔⵠⲆΔᐃⲆⵠ: "img/inv-lava-helmet-out.png",
    ᐃⵠᐃⲆⵠᐃᐃ: "img/inv-lava-helmet-in.png",
    ⲆΔⵠᐃᐃⵠᐃ: "img/inv-lava-helmet-click.png",
    ΔΔⵠⲆⵠⲆⲆ: "img/day-witch-hat.png",
    ΔᐃⲆⲆᐃΔΔ: "img/night-witch-hat.png",
    ⲆⲆᐃᐃΔᐃᐃ: "img/inv-witch-hat-out.png",
    ⲆᐃⲆᐃᐃΔⵠ: "img/inv-witch-hat-in.png",
    ⲆⵠΔⲆⵠΔⵠ: "img/inv-witch-hat-click.png",
    ΔⵠⲆᐃⵠᐃⵠ: "img/day-nimbus2000.png",
    ΔᐃΔⵠⵠΔΔ: "img/night-nimbus2000.png",
    ⲆⵠⵠΔⲆΔΔ: "img/inv-nimbus2000-out.png",
    ΔⲆΔⵠⵠΔⲆ: "img/inv-nimbus2000-in.png",
    ⵠΔⵠⲆⲆⲆⲆ: "img/inv-nimbus2000-click.png",
    ⲆᐃⲆⲆᐃⵠⵠ: "img/day-accessory1-pacques.png",
    ⵠΔΔΔΔⲆΔ: "img/night-accessory1-pacques.png",
    ᐃΔᐃⲆⲆᐃⲆ: "img/day-accessory2-pacques.png",
    ⵠᐃΔᐃᐃᐃΔ: "img/night-accessory2-pacques.png",
    ᐃᐃΔΔⵠΔΔ: "img/day-accessory3-pacques.png",
    ᐃⵠΔΔⵠᐃΔ: "img/night-accessory3-pacques.png",
    ⵠᐃⵠⵠⵠᐃᐃ: "img/day-accessory5-pacques.png",
    ⲆⲆΔⵠᐃⲆⲆ: "img/night-accessory5-pacques.png",
    ᐃⵠᐃΔΔΔᐃ: "img/day-accessory6-pacques.png",
    ⲆΔΔⲆⲆᐃΔ: "img/night-accessory6-pacques.png",
    ΔᐃⲆᐃⲆᐃΔ: "img/day-accessory7-pacques.png",
    ΔⲆⵠᐃΔᐃΔ: "img/night-accessory7-pacques.png",
    ΔΔⵠΔⵠⵠΔ: "img/day-accessory8-pacques.png",
    ᐃᐃΔΔⵠⲆⲆ: "img/night-accessory8-pacques.png",
    ΔⵠⵠⲆᐃΔᐃ: "img/day-bag-pacques.png",
    ⵠᐃⲆⲆⲆΔᐃ: "img/night-bag-pacques.png",
    ΔⲆⲆⵠᐃⲆⵠ: "img/day-carrot.png",
    ⵠΔΔᐃΔⲆⵠ: "img/night-carrot.png",
    ᐃᐃΔⲆⲆⵠΔ: "img/day-carrot-dried.png",
    ⲆΔΔΔΔⵠΔ: "img/night-carrot-dried.png",
    ⵠΔΔⵠΔⲆᐃ: "img/day-tomato-herb.png",
    ΔⲆᐃⲆⲆⲆᐃ: "img/night-tomato-herb.png",
    ᐃⲆⵠΔΔΔᐃ: "img/day-tomato-herb-dried.png",
    ⵠⲆⵠⲆΔⲆΔ: "img/night-tomato-herb-dried.png",
    ᐃⵠΔⲆΔᐃΔ: "img/day-tomato.png",
    ΔΔⲆᐃⵠΔΔ: "img/night-tomato.png",
    ⵠⵠⵠᐃⵠⲆΔ: "img/inv-carrot-out.png",
    ΔΔⵠⲆⲆΔⵠ: "img/inv-carrot-in.png",
    ⵠΔΔᐃΔΔΔ: "img/inv-carrot-click.png",
    ⵠⵠⲆΔᐃΔΔ: "img/inv-tomato-out.png",
    ᐃⲆⵠⵠᐃᐃᐃ: "img/inv-tomato-in.png",
    ⵠᐃⵠΔΔΔᐃ: "img/inv-tomato-click.png",
    ᐃⵠⵠΔⲆᐃᐃ: "img/day-player0.png",
    ⲆⵠΔΔⵠᐃᐃ: "img/night-player0.png",
    ᐃⲆⵠⵠⲆⵠᐃ: "img/day-player1.png",
    ⵠⲆᐃⲆⵠΔᐃ: "img/night-player1.png",
    ⲆΔΔⲆΔᐃⵠ: "img/day-player2.png",
    ᐃᐃⵠⲆⵠⵠΔ: "img/night-player22.png",
    ᐃⵠⵠᐃⵠᐃᐃ: "img/day-player3.png",
    ⵠⲆᐃⲆⲆⲆΔ: "img/night-player33.png",
    ᐃᐃⵠᐃᐃΔⲆ: "img/day-player4.png",
    ⲆⵠⵠⵠΔⵠⲆ: "img/night-player4.png",
    ΔᐃΔⵠΔⲆⲆ: "img/day-player5.png",
    ᐃᐃᐃᐃⵠⲆΔ: "img/night-player5.png",
    ᐃⵠᐃⵠⲆᐃⲆ: "img/day-player6.png",
    ⲆⲆᐃᐃⲆⲆⲆ: "img/night-player6.png",
    ΔᐃΔΔΔᐃΔ: "img/day-player7.png",
    ᐃⵠⲆΔⵠⵠΔ: "img/night-player7.png",
    ᐃΔⲆⵠⲆⵠᐃ: "img/day-player8.png",
    ⲆᐃᐃΔᐃⲆΔ: "img/night-player8.png",
    ᐃⲆΔᐃΔⲆⲆ: "img/day-player9.png",
    ΔⲆⲆⲆΔΔⲆ: "img/night-player9.png",
    ΔᐃΔⵠᐃᐃᐃ: "img/day-player10.png",
    ⲆⲆⵠⲆᐃΔⲆ: "img/night-player10.png",
    ᐃⵠⲆⲆΔⵠⵠ: "img/day-player11.png",
    ⵠⵠⵠᐃⲆΔⵠ: "img/night-player11.png",
    ΔᐃᐃᐃⲆᐃᐃ: "img/day-player12.png",
    ΔⵠᐃᐃᐃᐃΔ: "img/night-player12.png",
    ⲆⲆΔΔⲆᐃⲆ: "img/day-player13.png",
    ᐃⲆⲆⵠᐃᐃΔ: "img/night-player13.png",
    ⵠⲆΔⲆΔᐃⲆ: "img/day-player14.png",
    ⵠΔⲆⲆⲆⵠⵠ: "img/night-player14.png",
    ⵠΔΔⲆᐃᐃⵠ: "img/day-player15.png",
    ᐃⵠΔᐃΔⵠⵠ: "img/night-player15.png",
    ⲆⵠⵠⲆΔΔⵠ: "img/day-player16.png",
    ᐃⵠⵠⵠⲆᐃΔ: "img/night-player16.png",
    ⲆΔΔⵠᐃⲆⵠ: "img/day-player17.png",
    ⲆⲆⲆⵠΔΔᐃ: "img/night-player17.png",
    ⵠⵠⲆⲆⲆⲆᐃ: "img/day-player18.png",
    ⲆᐃᐃⵠΔᐃΔ: "img/night-player18.png",
    ᐃΔⲆⲆΔΔᐃ: "img/day-player19.png",
    ΔΔᐃᐃᐃᐃⵠ: "img/night-player19.png",
    ΔⵠᐃΔⲆⵠΔ: "img/day-hand-player0.png",
    ⲆᐃⵠⲆᐃᐃⵠ: "img/night-hand-player0.png",
    ⲆⲆⵠⲆⵠᐃⲆ: "img/day-hand-player1.png",
    ⲆⵠⲆⲆᐃᐃⲆ: "img/night-hand-player1.png",
    ΔΔⵠᐃᐃⲆⲆ: "img/day-hand-player2.png",
    ⵠⲆⵠⲆᐃⲆᐃ: "img/night-hand-player22.png",
    ⵠΔᐃΔⵠⲆᐃ: "img/day-hand-player3.png",
    ⲆᐃⵠᐃᐃΔⲆ: "img/night-hand-player33.png",
    ᐃΔᐃⵠⵠⲆᐃ: "img/day-hand-player4.png",
    ΔΔᐃⵠΔⵠᐃ: "img/night-hand-player4.png",
    ᐃⲆᐃⵠⵠⲆⲆ: "img/day-hand-player5.png",
    ΔⵠΔᐃⵠⲆΔ: "img/night-hand-player5.png",
    ⵠⵠⵠΔΔⵠⵠ: "img/day-hand-player6.png",
    ΔⲆᐃⲆⵠⲆΔ: "img/night-hand-player6.png",
    ⲆΔⵠⲆΔΔΔ: "img/day-hand-player7.png",
    ⵠᐃⲆΔⲆΔⲆ: "img/night-hand-player7.png",
    ΔᐃⵠᐃⵠⲆⲆ: "img/day-hand-player8.png",
    ΔⲆᐃⲆᐃᐃⵠ: "img/night-hand-player8.png",
    ᐃᐃᐃⲆⲆΔᐃ: "img/day-hand-player9.png",
    ⲆⵠᐃⵠΔΔⲆ: "img/night-hand-player9.png",
    ⲆⵠⲆΔᐃⵠⵠ: "img/day-hand-player10.png",
    ⵠΔⲆⵠΔᐃⵠ: "img/night-hand-player10.png",
    ⲆΔⲆⲆⲆⵠⵠ: "img/day-hand-player11.png",
    ⲆⲆΔⲆⲆΔᐃ: "img/night-hand-player11.png",
    ᐃᐃᐃⲆᐃΔΔ: "img/day-hand-player12.png",
    ⵠⵠΔⵠⲆΔⵠ: "img/night-hand-player12.png",
    ᐃⲆⵠᐃᐃᐃⲆ: "img/day-hand-player13.png",
    ΔΔⲆΔⵠᐃⵠ: "img/night-hand-player13.png",
    ⲆⵠΔΔΔΔᐃ: "img/day-hand-player14.png",
    ⵠⵠⲆΔⵠⲆⵠ: "img/night-hand-player14.png",
    ᐃⲆⲆⵠⲆΔⵠ: "img/day-hand-player15.png",
    ⲆΔⲆᐃᐃⲆΔ: "img/night-hand-player15.png",
    ⵠᐃΔⵠΔⵠⵠ: "img/day-hand-player16.png",
    ⵠᐃᐃᐃΔΔⵠ: "img/night-hand-player16.png",
    ⲆΔⲆⲆᐃᐃⵠ: "img/day-hand-player17.png",
    ᐃᐃᐃΔΔᐃᐃ: "img/night-hand-player17.png",
    ΔᐃⲆᐃⲆᐃⵠ: "img/day-hand-player18.png",
    ΔⵠⲆⲆΔⵠⲆ: "img/night-hand-player18.png",
    ⵠΔⵠᐃⵠⵠᐃ: "img/day-hand-player19.png",
    ᐃΔⲆⲆᐃᐃⲆ: "img/night-hand-player19.png",
    ⲆⲆᐃᐃᐃᐃᐃ: "img/day-accessory4.png",
    ⲆΔᐃⵠⵠᐃᐃ: "img/night-accessory4.png",
    ΔᐃᐃΔΔΔᐃ: "img/day-accessory9.png",
    ⲆⲆⵠⲆΔΔⵠ: "img/night-accessory9.png",
    ΔΔᐃⲆⲆⵠᐃ: "img/day-accessory10.png",
    ΔⵠⵠⲆΔΔΔ: "img/night-accessory10.png",
    ᐃΔᐃⲆⲆⲆⲆ: "img/day-accessory11.png",
    ⲆⲆΔΔᐃΔⲆ: "img/night-accessory11.png",
    ΔᐃⵠⵠⵠΔⵠ: "img/day-accessory12.png",
    ΔⵠᐃΔΔᐃΔ: "img/night-accessory12.png",
    ᐃΔⵠᐃΔⵠᐃ: "img/day-bag.png",
    ⲆᐃᐃᐃⵠⵠΔ: "img/night-bag.png",
    ᐃⲆᐃⲆⵠΔⲆ: "img/inv-bag-out.png",
    ᐃΔΔᐃᐃⲆⵠ: "img/inv-bag-in.png",
    ΔΔΔⵠⵠⲆᐃ: "img/inv-bag-click.png",
    ΔⲆⵠᐃⵠᐃⲆ: "img/day-pitchfork.png",
    ⵠⲆⲆΔΔⲆⵠ: "img/night-pitchfork.png",
    ⵠⵠⵠᐃᐃᐃⲆ: "img/inv-pitchfork-out.png",
    ⲆⵠⵠᐃᐃⲆᐃ: "img/inv-pitchfork-in.png",
    ᐃⲆⵠⲆⵠᐃΔ: "img/inv-pitchfork-click.png",
    ΔⵠⲆⲆΔⵠᐃ: "img/inv-wood-spike-door-out.png",
    ⵠΔΔⵠⲆⲆⲆ: "img/inv-wood-spike-door-in.png",
    ᐃⵠⲆⲆᐃⵠⲆ: "img/inv-wood-spike-door-click.png",
    ΔΔᐃⵠΔᐃⲆ: "img/inv-stone-spike-door-out.png",
    ᐃⲆⵠΔΔⲆⲆ: "img/inv-stone-spike-door-in.png",
    ⲆᐃⲆᐃⲆΔᐃ: "img/inv-stone-spike-door-click.png",
    ᐃⵠᐃΔΔᐃᐃ: "img/inv-gold-spike-door-out.png",
    ⲆⲆⵠⲆᐃⲆⵠ: "img/inv-gold-spike-door-in.png",
    ᐃⲆⲆᐃⵠᐃⲆ: "img/inv-gold-spike-door-click.png",
    ⵠⲆⲆᐃΔⵠᐃ: "img/inv-diamond-spike-door-out.png",
    ΔⲆⵠΔΔᐃⵠ: "img/inv-diamond-spike-door-in.png",
    ⵠΔⵠⵠⲆⵠⲆ: "img/inv-diamond-spike-door-click.png",
    ΔΔΔΔᐃΔᐃ: "img/inv-amethyst-spike-door-out.png",
    ⵠⲆᐃΔΔΔⵠ: "img/inv-amethyst-spike-door-in.png",
    ⵠⵠᐃᐃᐃⵠΔ: "img/inv-amethyst-spike-door-click.png",
    ⲆΔΔⵠⵠⵠⲆ: "img/day-wood-spike-door.png",
    ⲆΔⵠⵠᐃΔΔ: "img/night-wood-spike-door.png",
    ᐃΔⲆⲆᐃⲆⲆ: "img/day-stone-spike-door.png",
    ΔᐃⵠΔΔᐃⲆ: "img/night-stone-spike-door.png",
    ᐃⵠⵠⵠⵠΔⵠ: "img/day-gold-spike-door.png",
    ⲆⲆΔΔΔᐃⲆ: "img/night-gold-spike-door.png",
    ᐃΔΔⲆⵠᐃΔ: "img/day-diamond-spike-door.png",
    ⲆⲆⵠⲆⵠⵠⵠ: "img/night-diamond-spike-door.png",
    ⵠᐃⲆⲆᐃⵠⲆ: "img/day-amethyst-spike-door.png",
    ΔᐃΔΔᐃⵠⲆ: "img/night-amethyst-spike-door.png",
    ΔΔΔⵠΔᐃΔ: "img/inv-reidite-spike-door-out.png",
    ⲆΔΔⲆⲆΔⵠ: "img/inv-reidite-spike-door-in.png",
    ⵠᐃⲆᐃΔⵠⵠ: "img/inv-reidite-spike-door-click.png",
    ⲆᐃⲆⵠⵠᐃⲆ: "img/inv-reidite-door-out.png",
    ⲆⵠⵠⵠⲆΔⲆ: "img/inv-reidite-door-in.png",
    ⵠⲆⲆᐃⵠᐃΔ: "img/inv-reidite-door-click.png",
    ΔⲆᐃⵠΔᐃΔ: "img/inv-reidite-spike-out.png",
    ⲆᐃᐃᐃΔΔⵠ: "img/inv-reidite-spike-in.png",
    ⵠⵠᐃΔⵠᐃᐃ: "img/inv-reidite-spike-click.png",
    ΔⵠⲆⵠᐃᐃᐃ: "img/inv-reidite-wall-out.png",
    ᐃΔⵠᐃᐃⵠⲆ: "img/inv-reidite-wall-in.png",
    ⵠΔΔᐃΔⲆᐃ: "img/inv-reidite-wall-click.png",
    ⵠΔⲆⵠⵠᐃΔ: "img/day-reidite-wall.png",
    ⵠⵠⵠᐃⵠⵠⲆ: "img/night-reidite-wall.png",
    ᐃΔΔᐃⲆⲆⲆ: "img/day-reidite-door.png",
    ΔⵠⲆΔⵠᐃᐃ: "img/night-reidite-door.png",
    ⲆⲆⲆΔΔΔΔ: "img/day-reidite-spike.png",
    ⵠⵠᐃΔⲆⲆᐃ: "img/night-reidite-spike.png",
    ΔⵠᐃΔⵠⵠⵠ: "img/day-reidite-spike-door.png",
    ⵠⲆⵠΔⵠᐃⲆ: "img/night-reidite-spike-door.png",
    ⲆⵠⵠΔΔⲆⵠ: "img/inv-reidite-pickaxe-out.png",
    ΔᐃΔⲆⲆⵠᐃ: "img/inv-reidite-pickaxe-in.png",
    ⵠⲆⲆΔᐃᐃΔ: "img/inv-reidite-pickaxe-click.png",
    ⲆᐃᐃⵠⵠⲆᐃ: "img/day-reidite-pickaxe.png",
    ΔᐃⵠⵠᐃΔⵠ: "img/night-reidite-pickaxe.png",
    ⲆⲆⲆⲆⲆⵠⵠ: "img/inv-reidite-hammer-out.png",
    ΔᐃΔⵠⲆΔⲆ: "img/inv-reidite-hammer-in.png",
    ᐃΔⲆᐃⵠΔⲆ: "img/inv-reidite-hammer-click.png",
    ΔⲆⲆᐃⵠⵠᐃ: "img/day-reidite-hammer.png",
    ΔⵠⲆⵠΔⲆⵠ: "img/night-reidite-hammer.png",
    ΔᐃⵠⲆⲆⲆΔ: "img/day-watermelon1.png",
    ΔⲆⵠᐃⵠⲆΔ: "img/night-watermelon1.png",
    ⵠⲆΔΔᐃⲆΔ: "img/day-watermelon-dried1.png",
    ⵠΔᐃⵠⵠᐃⲆ: "img/night-watermelon-dried1.png",
    ⲆΔᐃⵠΔⲆΔ: "img/inv-watermelon-out.png",
    ⵠⲆᐃΔᐃⲆΔ: "img/inv-watermelon-in.png",
    ΔⲆΔⵠⵠⵠᐃ: "img/inv-watermelon-click.png",
    ᐃΔⲆΔⲆⲆⲆ: "img/day-boat.png",
    ⲆᐃⵠᐃⲆⵠⲆ: "img/night-boat.png",
    ᐃⵠⲆⲆⵠᐃᐃ: "img/day-boat-wave.png",
    ⵠⵠᐃΔⵠΔΔ: "img/night-boat-wave.png",
    ⵠⲆΔΔⵠⲆⵠ: "img/inv-boat-out.png",
    ⵠᐃΔᐃⲆⲆᐃ: "img/inv-boat-in.png",
    ᐃᐃᐃⵠᐃᐃᐃ: "img/inv-boat-click.png",
    ⲆᐃᐃⲆᐃⲆΔ: "img/day-plane.png",
    ⵠᐃᐃᐃΔⵠⵠ: "img/night-plane.png",
    ΔᐃⲆⲆᐃⲆΔ: "img/inv-plane-out.png",
    ᐃⲆΔΔⵠⲆⵠ: "img/inv-plane-in.png",
    ⵠΔⲆΔⵠΔⵠ: "img/inv-plane-click.png",
    ΔⲆᐃΔᐃⵠⲆ: "img/day-sled.png",
    ΔⵠⲆⵠⲆΔΔ: "img/night-sled.png",
    ΔᐃⵠⵠᐃⲆᐃ: "img/day-sled-wave.png",
    ⲆⲆⲆⵠⵠᐃⲆ: "img/night-sled-wave.png",
    ΔΔⵠⲆΔΔⵠ: "img/inv-sled-out.png",
    ⵠᐃⲆⵠⵠⲆⵠ: "img/inv-sled-in.png",
    ΔᐃⵠᐃΔΔᐃ: "img/inv-sled-click.png",
    ΔⵠⵠΔᐃᐃⵠ: "img/day-pirate-hat.png",
    ΔᐃᐃⵠΔⵠᐃ: "img/night-pirate-hat.png",
    ⲆᐃⲆΔⲆᐃⵠ: "img/inv-pirate-hat-out.png",
    ᐃᐃⵠᐃⵠᐃⵠ: "img/inv-pirate-hat-in.png",
    ⲆΔᐃⲆΔⵠⲆ: "img/inv-pirate-hat-click.png",
    ⲆΔⲆᐃⲆΔᐃ: "img/day-penguin.png",
    ⲆⵠᐃⲆⵠᐃᐃ: "img/night-penguin.png",
    ⵠⵠᐃⵠΔⲆΔ: "img/hurt-penguin.png",
    ΔⲆⵠΔΔ: "img/inv-penguin-feather-click.png",
    ⲆⵠⲆΔⵠ: "img/inv-hawk-feather-click.png",
    ΔⵠⵠᐃⵠΔⵠ: "img/day-boar1.png",
    ᐃⲆⵠⲆΔΔᐃ: "img/day-boar1-tamed.png",
    ΔΔᐃⵠⲆΔΔ: "img/day-boar1-angry.png",
    ᐃⵠᐃᐃⲆⵠᐃ: "img/night-boar1.png",
    ⲆΔᐃⲆᐃᐃⵠ: "img/night-boar1-tamed.png",
    ΔᐃΔᐃⲆⲆⲆ: "img/night-boar1-angry.png",
    ⵠⵠᐃᐃⵠᐃⵠ: "img/inv-mount-boar-out.png",
    ᐃΔⵠᐃᐃⲆΔ: "img/inv-mount-boar-in.png",
    ΔᐃⲆᐃⲆⵠⲆ: "img/inv-mount-boar-click.png",
    ⲆΔⵠⲆΔⵠⲆ: "img/day-hurt-boar1.png",
    ᐃᐃⲆΔᐃⲆⵠ: "img/boar1-step.png",
    ᐃᐃᐃⲆⵠⵠⵠ: "img/day-saddle1.png",
    ᐃΔⲆⲆᐃᐃⵠ: "img/night-saddle1.png",
    ᐃⲆⲆⲆⲆⲆⲆ: "img/inv-saddle-out.png",
    ⲆΔⵠⵠᐃΔⵠ: "img/inv-saddle-in.png",
    ᐃⵠⵠᐃⵠᐃΔ: "img/inv-saddle-click.png",
    ⵠΔΔⵠⲆᐃⲆ: "img/day-magic-wand0.png",
    ⲆⵠΔⲆⵠⵠΔ: "img/night-magic-wand0.png",
    ᐃⵠⵠΔⲆⵠᐃ: "img/day-light-wand1.png",
    ⲆᐃⲆⲆΔⵠⵠ: "img/night-light-wand1.png",
    ᐃⲆⲆΔᐃΔᐃ: "img/inv-magic-wand0-out.png",
    ⲆΔΔΔⵠΔᐃ: "img/inv-magic-wand0-in.png",
    ⲆⵠⲆΔⵠⵠⵠ: "img/inv-magic-wand0-click.png",
    ⲆΔᐃⵠᐃⵠΔ: "img/day-magic-wand1.png",
    ⵠΔΔΔⵠⵠⲆ: "img/night-magic-wand1.png",
    ⲆΔᐃⵠΔᐃΔ: "img/day-light-wand0.png",
    ⲆⲆⲆᐃΔⵠΔ: "img/night-light-wand0.png",
    ⲆⲆⵠⲆⵠⵠⲆ: "img/inv-magic-wand1-out.png",
    ᐃⵠⲆΔᐃⲆᐃ: "img/inv-magic-wand1-in.png",
    ΔⵠⲆⵠᐃⵠΔ: "img/inv-magic-wand1-click.png",
    ⵠᐃΔⵠΔΔⵠ: "img/day-firefly.png",
    ΔΔⵠᐃᐃΔⵠ: "img/night-firefly.png",
    ᐃΔΔΔⲆⲆⵠ: "img/hurt-firefly.png",
    ΔᐃᐃⲆⲆΔᐃ: "img/inv-firefly-out.png",
    ⵠᐃᐃⲆᐃᐃⵠ: "img/inv-firefly-in.png",
    ⵠᐃⲆⵠⲆⵠΔ: "img/inv-firefly-click.png",
    ΔΔᐃΔΔᐃⵠ: "img/day-baby-dragon.png",
    ⲆΔᐃⵠⲆᐃΔ: "img/night-baby-dragon.png",
    ⲆΔⵠⲆᐃᐃⲆ: "img/day-baby-dragon-angry.png",
    ΔⲆᐃᐃΔΔⵠ: "img/night-baby-dragon-angry.png",
    ΔΔⵠᐃΔΔⵠ: "img/day-baby-dragon-tamed.png",
    ᐃⵠᐃᐃΔΔⲆ: "img/night-baby-dragon-tamed.png",
    ᐃⵠᐃⲆⲆΔⲆ: "img/day-wing-dragon-left-angry.png",
    ⵠΔⵠᐃᐃᐃⲆ: "img/night-dragon-wing-left-angry.png",
    ⲆᐃΔⵠⲆᐃⲆ: "img/day-wing-dragon-right-angry.png",
    ⵠⲆⵠⲆΔΔⵠ: "img/night-dragon-wing-right-angry.png",
    ⵠⵠⲆⲆΔΔΔ: "img/day-wing-dragon-left-tamed.png",
    ΔⵠᐃⵠⲆΔᐃ: "img/night-dragon-wing-left-tamed.png",
    ᐃΔⲆΔᐃⵠⵠ: "img/day-wing-dragon-right-tamed.png",
    ⲆⲆⵠᐃⵠⵠᐃ: "img/night-wing-dragon-right-tamed.png",
    ΔⵠΔⲆᐃᐃΔ: "img/day-wing-dragon-left.png",
    ΔⵠᐃΔⵠΔⵠ: "img/night-dragon-wing-left.png",
    ⵠΔⵠⲆⵠᐃⲆ: "img/day-wing-dragon-right.png",
    ⲆΔⵠᐃⲆᐃⵠ: "img/night-wing-dragon-right.png",
    ᐃᐃᐃΔⵠⲆΔ: "img/hurt-baby-dragon.png",
    ⲆᐃⵠⵠΔⵠᐃ: "img/hurt-baby-dragon-wing-left.png",
    ᐃᐃᐃΔᐃⵠⵠ: "img/hurt-baby-dragon-wing-right.png",
    ΔΔⵠⲆⵠΔⵠ: "img/inv-baby-dragon-out.png",
    ⵠᐃΔⲆΔⵠᐃ: "img/inv-baby-dragon-in.png",
    ᐃⲆⲆⲆᐃᐃΔ: "img/inv-baby-dragon-click.png",
    ⵠⲆⵠΔΔⵠⲆ: "img/day-baby-lava.png",
    ⲆⵠΔⲆⵠᐃⵠ: "img/night-baby-lava.png",
    ᐃⵠΔⵠⲆᐃⵠ: "img/day-baby-lava-angry.png",
    ⲆⵠΔᐃᐃⲆⵠ: "img/night-baby-lava-angry.png",
    ΔᐃΔⲆⲆⵠⲆ: "img/day-baby-lava-tamed.png",
    ΔⲆⲆⲆᐃΔΔ: "img/night-baby-lava-tamed.png",
    ⵠΔⵠΔⲆΔᐃ: "img/day-wing-lava-left-angry.png",
    ⲆΔᐃⲆⵠⲆⲆ: "img/night-wing-lava-left-angry.png",
    ᐃΔⲆΔᐃᐃΔ: "img/day-wing-lava-right-angry.png",
    ΔⲆⵠᐃΔᐃⲆ: "img/night-wing-lava-right-angry.png",
    ᐃᐃⲆⵠᐃᐃΔ: "img/day-wing-lava-left-tamed.png",
    ΔᐃᐃΔⵠⲆⲆ: "img/night-wing-lava-left-tamed.png",
    ⵠⵠᐃⵠⲆΔⲆ: "img/day-wing-lava-right-tamed.png",
    ᐃΔⲆⵠᐃⲆⲆ: "img/night-wing-lava-right-tamed.png",
    ᐃⵠⲆⲆᐃⲆΔ: "img/day-wing-lava-left.png",
    ⵠᐃᐃⵠΔⲆⵠ: "img/night-wing-lava-left.png",
    ⵠⵠⲆΔΔⵠᐃ: "img/day-wing-lava-right.png",
    ᐃᐃᐃⵠᐃⵠⵠ: "img/night-wing-lava-right.png",
    ΔᐃΔⵠΔⲆᐃ: "img/hurt-baby-lava.png",
    ΔΔⵠΔᐃⲆΔ: "img/hurt-baby-lava-wing-left.png",
    ΔᐃᐃⲆΔᐃⵠ: "img/hurt-baby-lava-wing-right.png",
    ᐃⲆΔⲆΔⲆⵠ: "img/inv-baby-lava-out.png",
    ⵠⵠΔΔᐃⲆⵠ: "img/inv-baby-lava-in.png",
    ᐃᐃᐃᐃⵠᐃⵠ: "img/inv-baby-lava-click.png",
    ⵠΔᐃΔⲆⲆΔ: "img/day-falcon.png",
    ⵠΔⲆᐃΔⵠΔ: "img/night-falcon.png",
    ⲆᐃᐃⲆᐃᐃᐃ: "img/day-falcon-angry.png",
    ᐃᐃΔᐃⲆⲆΔ: "img/night-falcon-angry.png",
    ᐃⵠᐃⵠⲆⲆⲆ: "img/day-falcon-ground.png",
    ᐃⵠⲆΔᐃⵠⲆ: "img/night-falcon-ground.png",
    ⵠᐃⲆⲆⲆᐃΔ: "img/day-falcon-ground-angry.png",
    ⲆⵠⵠⲆΔᐃⵠ: "img/night-falcon-ground-angry.png",
    ⵠᐃΔΔᐃⲆᐃ: "img/day-falcon-wings-left.png",
    ⲆⲆⲆⵠⲆⲆⲆ: "img/night-falcon-wings-left.png",
    ᐃΔΔΔⵠᐃᐃ: "img/day-falcon-wings-right.png",
    ⲆⵠⲆᐃΔⲆᐃ: "img/night-falcon-wings-right.png",
    ⲆᐃΔᐃⵠᐃΔ: "img/day-falcon-angry-wings-left.png",
    ⲆᐃΔⵠⵠᐃⲆ: "img/night-falcon-angry-wings-left.png",
    ᐃⲆⲆⲆΔΔⵠ: "img/day-falcon-angry-wings-right.png",
    ᐃⲆⲆⵠᐃᐃⵠ: "img/night-falcon-angry-wings-right.png",
    ⵠΔⵠΔⵠⲆᐃ: "img/day-falcon-wings-left-tamed.png",
    ΔⵠⲆᐃΔⵠⲆ: "img/night-falcon-wings-left-tamed.png",
    ⵠⲆΔᐃⵠΔⵠ: "img/day-falcon-wings-right-tamed.png",
    ᐃⲆᐃΔΔΔⵠ: "img/night-falcon-wings-right-tamed.png",
    ᐃⵠΔΔΔᐃΔ: "img/day-falcon-tamed.png",
    ⲆⵠⵠⲆⵠⲆΔ: "img/night-falcon-tamed.png",
    ᐃΔⵠΔᐃᐃⲆ: "img/hurt-falcon-ground.png",
    ᐃⵠᐃᐃⵠⵠⲆ: "img/hurt-falcon.png",
    ᐃⲆⵠΔΔⵠⵠ: "img/hurt-falcon-wings-left.png",
    ⲆΔⵠΔᐃⲆⲆ: "img/hurt-falcon-wings-right.png",
    ᐃΔⵠⲆⵠⵠⵠ: "img/inv-falcon-out.png",
    ΔᐃᐃⲆⲆⲆΔ: "img/inv-falcon-in.png",
    ⵠⵠΔᐃᐃᐃⵠ: "img/inv-falcon-click.png",
    ⵠⲆⲆⲆⲆΔⵠ: "img/day-crab-boss.png",
    ΔᐃΔⵠⵠⵠⵠ: "img/night-crab-boss.png",
    ᐃⲆⲆⵠⵠᐃⲆ: "img/day-crab-boss-angry.png",
    ⵠⵠᐃΔⲆᐃᐃ: "img/night-crab-boss-angry.png",
    ⵠⵠⲆᐃⲆⲆΔ: "img/day-crab-boss-tamed.png",
    ᐃⵠⵠⲆΔⵠⲆ: "img/night-crab-boss-tamed.png",
    ⲆⵠⲆΔΔⲆΔ: "img/day-crab-boss-claw-left-attack.png",
    ⵠⲆⲆⵠⵠᐃᐃ: "img/night-crab-boss-claw-left-attack.png",
    ⲆⵠⲆΔᐃΔⵠ: "img/day-crab-boss-claw-right-attack.png",
    ᐃΔⲆΔⵠⲆΔ: "img/night-crab-boss-claw-right-attack.png",
    ΔᐃΔⲆⲆⲆⵠⲆΔ: "img/day-crab-boss-claw-left-tamed.png",
    ΔⲆⵠΔⵠⵠΔᐃⲆ: "img/night-crab-boss-claw-left-tamed.png",
    ⵠⵠⵠⲆⲆᐃᐃⲆΔ: "img/day-crab-boss-claw-right-tamed.png",
    ⲆⲆΔΔᐃⲆⲆⲆΔ: "img/night-crab-boss-claw-right-tamed.png",
    ᐃⵠⵠᐃⲆⲆⵠ: "img/day-crab-boss-claw-left.png",
    ⵠⲆⵠⵠⵠᐃΔ: "img/night-crab-boss-claw-left.png",
    ΔⲆⲆᐃΔⲆⲆ: "img/day-crab-boss-claw-right.png",
    ᐃⲆΔᐃᐃᐃⵠ: "img/night-crab-boss-claw-right.png",
    ᐃⲆΔⲆΔⵠΔ: "img/hurt-crab-boss.png",
    ΔᐃⵠⲆΔΔΔ: "img/hurt-crab-boss-claw-left.png",
    ⵠΔⵠⲆⵠⵠᐃ: "img/hurt-crab-boss-claw-right.png",
    ⲆⲆᐃᐃΔᐃΔ: "img/heal-crab-boss.png",
    ΔᐃᐃᐃⲆⵠⲆ: "img/heal-crab-boss-claw-left.png",
    ⵠᐃᐃⲆⲆⲆⲆ: "img/heal-crab-boss-claw-right.png",
    ⵠⵠⲆⲆⵠⵠⵠ: "img/crab-step.png",
    ᐃΔⲆⲆⲆΔⲆ: "img/inv-crab-boss-out.png",
    ⲆᐃΔⲆᐃⵠΔ: "img/inv-crab-boss-in.png",
    ⵠⵠⲆΔΔᐃᐃ: "img/inv-crab-boss-click.png",
    ⲆⵠΔᐃΔᐃᐃ: "img/day-cactus10.png",
    ⵠⲆⲆⵠⲆΔⵠ: "img/night-cactus10.png",
    ⵠⲆᐃⵠⲆΔⲆ: "img/inv-cactus-out.png",
    ᐃⵠΔⲆⲆⲆᐃ: "img/inv-cactus-in.png",
    ⵠⵠᐃΔᐃⵠΔ: "img/inv-cactus-click.png",
    ⵠⲆⵠᐃΔΔΔ: "img/day-scorpion.png",
    ᐃⵠᐃⵠⵠⵠⵠ: "img/night-scorpion.png",
    Δⵠᐃᐃⵠⵠⵠ: "img/day-scorpion-hand-left.png",
    ᐃⲆⵠᐃᐃΔᐃ: "img/night-scorpion-hand-left.png",
    ⲆᐃΔᐃⲆᐃΔ: "img/day-scorpion-hand-right.png",
    ⵠⲆⲆⵠΔⲆⵠ: "img/night-scorpion-hand-right.png",
    ⵠᐃⲆᐃⲆᐃⲆ: "img/hurt-scorpion.png",
    ⵠᐃΔΔⲆΔΔ: "img/hurt-scorpion-hand-left.png",
    ΔᐃᐃΔⲆᐃΔ: "img/hurt-scorpion-hand-right.png",
    ᐃΔΔⲆⵠⲆⵠ: "img/day-vulture.png",
    ⵠΔⵠᐃⵠⵠⵠ: "img/night-vulture.png",
    ᐃΔᐃᐃⲆᐃᐃ: "img/day-vulture-angry.png",
    ⲆⲆⵠⵠΔⵠⵠ: "img/night-vulture-angry.png",
    ΔᐃΔΔⲆᐃⵠ: "img/day-vulture-ground.png",
    ΔⲆⵠΔⲆⲆᐃ: "img/night-vulture-ground.png",
    ⲆⵠⲆⲆᐃᐃΔ: "img/day-vulture-ground-angry.png",
    ⵠΔⵠⲆⵠⵠΔ: "img/night-vulture-ground-angry.png",
    ⲆᐃΔⵠⲆⲆⲆ: "img/day-vulture-wings-left.png",
    ⵠⲆⵠⵠⵠⵠⲆ: "img/night-vulture-wings-left.png",
    ⲆⵠᐃΔⵠⲆΔ: "img/day-vulture-wings-right.png",
    ⲆᐃΔⲆⵠᐃΔ: "img/night-vulture-wings-right.png",
    ΔᐃⲆⵠⲆΔᐃ: "img/day-vulture-angry-wings-left.png",
    ⲆⲆⲆⵠⵠⲆᐃ: "img/night-vulture-angry-wings-left.png",
    ⲆΔᐃΔⵠᐃⲆ: "img/day-vulture-angry-wings-right.png",
    ⵠⵠⲆⵠⵠᐃᐃ: "img/night-vulture-angry-wings-right.png",
    ⲆⵠΔⲆΔⲆΔ: "img/day-vulture-wings-left-tamed.png",
    ⲆⵠⵠⵠⲆᐃⲆ: "img/night-vulture-wings-left-tamed.png",
    ⵠⲆΔⵠΔⲆⵠ: "img/day-vulture-wings-right-tamed.png",
    ⲆⵠⲆΔΔⵠⲆ: "img/night-vulture-wings-right-tamed.png",
    ΔΔⲆΔΔⵠΔ: "img/day-vulture-tamed.png",
    ᐃⵠᐃⲆΔⲆᐃ: "img/night-vulture-tamed.png",
    ⵠⲆΔⲆⵠⲆᐃ: "img/hurt-vulture-ground.png",
    ΔᐃⲆΔᐃⲆΔ: "img/hurt-vulture.png",
    ᐃⲆⵠⲆΔΔΔ: "img/hurt-vulture-wings-left.png",
    ⲆᐃⵠΔΔⲆᐃ: "img/hurt-vulture-wings-right.png",
    ⲆⵠᐃᐃⲆⲆᐃ: "img/day-aloe-vera.png",
    ⲆⵠⵠᐃⵠⲆᐃ: "img/night-aloe-vera.png",
    ⲆⲆⲆⲆᐃᐃⲆ: "img/inv-aloe-vera-out.png",
    ⵠⲆⲆᐃⲆⲆⵠ: "img/inv-aloe-vera-in.png",
    ⲆΔᐃΔⲆⲆⵠ: "img/inv-aloe-vera-click.png",
    ⵠΔᐃᐃΔⵠⵠ: "img/day-aloe-vera-grown.png",
    ⵠΔⲆΔⲆⵠⲆ: "img/night-aloe-vera-grown.png",
    ⲆⵠⲆⵠⵠⲆⵠ: "img/day-aloe-vera-dried.png",
    ⵠⵠⵠᐃⲆᐃⲆ: "img/night-aloe-vera-dried.png",
    ΔⲆⲆⲆⵠⵠᐃ: "img/day-turban1.png",
    ᐃᐃⲆⲆᐃᐃⵠ: "img/night-turban1.png",
    ᐃⵠⲆᐃⵠᐃᐃ: "img/day-turban2.png",
    ⵠⲆᐃⵠᐃΔΔ: "img/night-turban2.png",
    ⲆΔⲆⵠΔⵠⵠ: "img/inv-turban2-out.png",
    ΔΔⵠⲆᐃⵠⵠ: "img/inv-turban2-in.png",
    ΔΔΔᐃⵠⲆⵠ: "img/inv-turban2-click.png",
    ΔᐃⵠⵠⲆⲆⲆ: "img/inv-turban1-out.png",
    ⵠⲆΔⲆΔΔⵠ: "img/inv-turban1-in.png",
    ⲆᐃᐃᐃⵠΔⲆ: "img/inv-turban1-click.png",
    ⵠⵠΔⲆⲆΔᐃ: "img/day-pitchfork2.png",
    ⲆⲆᐃᐃⵠⵠⵠ: "img/night-pitchfork2.png",
    ⲆⲆⵠⵠᐃΔⵠ: "img/inv-pitchfork2-out.png",
    ⲆᐃΔⲆⵠⲆᐃ: "img/inv-pitchfork2-in.png",
    ⲆⵠⲆΔΔᐃᐃ: "img/inv-pitchfork2-click.png",
    ᐃΔΔᐃⵠᐃⲆ: "img/inv-gold-fork-click.png",
    ᐃΔΔⲆⵠⲆⲆ: "img/inv-pilot-glasses-click.png",
    ᐃⲆⲆⲆⲆᐃΔ: "img/day-pilot-helmet.png",
    ΔⲆⵠᐃⲆΔⲆ: "img/night-pilot-helmet.png",
    ⵠⲆΔⲆⲆΔⲆ: "img/inv-pilot-helmet-out.png",
    ᐃΔᐃⵠⲆⲆⲆ: "img/inv-pilot-helmet-in.png",
    ⲆⲆⲆⲆᐃΔΔ: "img/inv-pilot-helmet-click.png",
    ΔΔᐃⲆⲆⲆⵠᐃⵠ: "img/day-sandworm0.png",
    ⲆⲆᐃⲆᐃⵠⵠ: "img/day-sandworm1.png",
    ΔΔⲆⵠⵠⵠᐃ: "img/day-sandworm2.png",
    ΔΔΔⵠΔΔᐃᐃⵠ: "img/night-sandworm0.png",
    ᐃⵠⲆⲆⵠⲆⵠ: "img/night-sandworm1.png",
    ᐃⲆⵠᐃᐃⵠᐃ: "img/night-sandworm2.png",
    Ⲇⵠᐃᐃᐃⵠᐃ: "img/hurt-sandworm0.png",
    ᐃΔᐃΔⲆⲆⲆ: "img/hurt-sandworm1.png",
    ΔⵠᐃΔᐃⵠΔ: "img/hurt-sandworm2.png",
    ⲆⲆΔⵠⵠ: "img/inv-vulture-feather-click.png",
    ⵠⵠⵠⲆΔΔΔ: "img/day-emerald0.png",
    ᐃⵠⲆⲆΔᐃⵠ: "img/night-emerald0.png",
    ⵠᐃᐃⵠΔⲆΔ: "img/day-emerald1.png",
    ⵠⵠΔᐃⲆΔⲆ: "img/night-emerald1.png",
    ⵠⵠⵠᐃⲆⲆᐃ: "img/day-emerald2.png",
    ⵠⵠⵠᐃΔᐃⲆ: "img/night-emerald2.png",
    ᐃᐃΔΔΔ: "img/inv-emerald-click.png",
    ᐃᐃⵠᐃΔⵠΔ: "img/inv-sworm-juice-out.png",
    ᐃᐃΔⲆⵠⲆᐃ: "img/inv-sworm-juice-in.png",
    ⵠΔⲆⲆᐃᐃⵠ: "img/inv-sworm-juice-click.png",
    ΔⲆⲆⵠᐃⲆΔ: "img/day-point-machine.png",
    ΔᐃⲆⲆⲆΔⵠ: "img/night-point-machine.png",
    ᐃᐃᐃᐃⵠⵠⲆ: "img/day-point-machine-hole.png",
    ᐃⵠⵠᐃⲆⵠᐃ: "img/night-point-machine-hole.png",
    ⵠΔⲆΔᐃᐃⵠ: "img/day-point-machine-ground.png",
    ΔΔⲆⵠⵠᐃⲆ: "img/night-point-machine-ground.png",
    ᐃΔⵠⲆΔⵠᐃ: "img/day-point-machine-rotate.png",
    ⲆⲆᐃΔⲆⲆⲆ: "img/night-point-machine-rotate.png",
    ᐃⵠⲆⲆΔⵠⲆ: "img/inv-point-machine-out.png",
    ⵠⵠΔⲆⵠⵠΔ: "img/inv-point-machine-in.png",
    ΔΔⲆᐃΔᐃⵠ: "img/inv-point-machine-click.png",
    ΔΔΔᐃⵠᐃᐃ: "img/day-extractor-machine0-stone.png",
    ΔᐃⵠⵠΔⵠΔ: "img/night-extractor-machine0-stone.png",
    ⵠⵠᐃᐃⵠⵠⲆ: "img/day-extractor-machine-stone.png",
    ⲆⲆⵠⵠᐃⵠⵠ: "img/night-extractor-machine-stone.png",
    ⲆⵠⵠⲆΔΔⲆ: "img/inv-extractor-machine-stone-out.png",
    ᐃⲆⵠⲆΔⵠⵠ: "img/inv-extractor-machine-stone-in.png",
    ⲆΔΔᐃⵠⲆⲆ: "img/inv-extractor-machine-stone-click.png",
    ᐃᐃΔΔΔᐃΔ: "img/day-extractor-machine0-gold.png",
    ΔⲆᐃΔⲆΔΔ: "img/night-extractor-machine0-gold.png",
    ⵠⵠⲆⵠⲆᐃⵠ: "img/day-extractor-machine-gold.png",
    ⵠⲆᐃᐃΔⵠⲆ: "img/night-extractor-machine-gold.png",
    ᐃⵠⵠⲆᐃⵠⵠ: "img/inv-extractor-machine-gold-out.png",
    ⲆᐃⲆⲆᐃⲆⲆ: "img/inv-extractor-machine-gold-in.png",
    ᐃⵠΔᐃⵠⵠΔ: "img/inv-extractor-machine-gold-click.png",
    ⵠⵠⵠᐃⵠᐃⲆ: "img/day-extractor-machine0-diamond.png",
    ᐃⵠⲆⵠⲆⲆⵠ: "img/night-extractor-machine0-diamond.png",
    ⵠⵠⵠΔⲆⵠⲆ: "img/day-extractor-machine-diamond.png",
    ⵠΔⵠᐃⲆᐃⵠ: "img/night-extractor-machine-diamond.png",
    ⵠΔΔⵠᐃⲆΔ: "img/inv-extractor-machine-diamond-out.png",
    ΔΔΔⵠᐃΔᐃ: "img/inv-extractor-machine-diamond-in.png",
    ⵠⲆᐃⵠᐃⲆⲆ: "img/inv-extractor-machine-diamond-click.png",
    ⵠⲆᐃᐃΔⵠΔ: "img/day-extractor-machine0-amethyst.png",
    ⲆΔᐃᐃΔⲆΔ: "img/night-extractor-machine0-amethyst.png",
    ⲆᐃΔⵠⲆⲆⵠ: "img/day-extractor-machine-amethyst.png",
    ΔΔⲆᐃΔⲆᐃ: "img/night-extractor-machine-amethyst.png",
    ΔⲆᐃⲆᐃⲆᐃ: "img/inv-extractor-machine-amethyst-out.png",
    ΔⵠⲆᐃᐃⲆⲆ: "img/inv-extractor-machine-amethyst-in.png",
    ᐃⲆⲆᐃⵠⲆⲆ: "img/inv-extractor-machine-amethyst-click.png",
    ⲆΔᐃΔⵠᐃΔ: "img/day-extractor-machine0-reidite.png",
    ᐃΔᐃᐃᐃⲆⲆ: "img/night-extractor-machine0-reidite.png",
    ⵠⲆᐃᐃᐃⵠᐃ: "img/day-extractor-machine-reidite.png",
    ΔΔⵠⵠⵠᐃΔ: "img/night-extractor-machine-reidite.png",
    ⵠΔⵠΔᐃⲆᐃ: "img/inv-extractor-machine-reidite-out.png",
    ⲆΔⲆᐃⲆΔⲆ: "img/inv-extractor-machine-reidite-in.png",
    ⵠΔᐃⲆΔⵠⵠ: "img/inv-extractor-machine-reidite-click.png",
    ⲆⵠΔⲆΔⲆⵠ: "img/extractor-cases.png",
    ⵠⲆⲆΔⲆⵠⲆ: "img/day-golden-hen.png",
    ⲆⵠⲆⵠΔᐃᐃ: "img/night-golden-hen.png",
    ΔᐃΔⵠᐃⲆⲆ: "img/day-golden-chicken.png",
    ΔⲆⵠΔᐃⵠΔ: "img/night-golden-chicken.png",
    ΔⲆΔᐃⵠΔᐃ: "img/hurt-golden-hen.png",
    ⵠΔⵠⵠⵠⲆⲆ: "img/hurt-golden-chicken.png",
    ᐃΔᐃΔΔΔⲆ: "img/logo-interface.png",
    ᐃⲆⵠⵠᐃⵠΔ: "img/forest-mode-hover.png",
    ⲆⵠⲆΔⵠΔⵠ: "img/normal-mode-hover.png",
    ΔᐃΔⲆᐃᐃⵠ: "img/vampire-mode-hover.png",
    ⵠⵠⵠᐃΔΔⵠ: "img/zombie-mode-hover.png",
    ⵠᐃⵠⵠᐃᐃΔ: "img/community-mode-hover2.png",
    ⵠⲆⵠᐃⲆᐃᐃ: "img/experimental-mode-hover.png",
    ᐃᐃⲆᐃⲆᐃΔ: "img/zombie-mode-out.png",
    ⵠⲆⵠΔⵠⲆΔ: "img/zombie-mode-in.png",
    ⵠⲆⲆᐃᐃⵠΔ: "img/zombie-mode-click.png",
    ⵠᐃⲆⲆⵠⵠⵠ: "img/vampire-mode-out.png",
    ⲆⲆᐃᐃΔⵠΔ: "img/vampire-mode-in.png",
    ⲆⵠⲆⵠⵠΔᐃ: "img/vampire-mode-click.png",
    ᐃΔⲆⵠⲆΔⵠ: "img/normal-mode-out.png",
    ⲆⵠΔⲆⵠⲆΔ: "img/normal-mode-in.png",
    ᐃⵠⵠⲆᐃⲆᐃ: "img/normal-mode-click.png",
    ᐃᐃⵠⲆΔΔⵠ: "img/forest-mode-out.png",
    ΔΔᐃΔΔⲆⵠ: "img/forest-mode-in.png",
    ⵠⵠᐃⲆΔΔⲆ: "img/forest-mode-click.png",
    ᐃᐃᐃⵠⲆⵠⲆ: "img/community-mode-out.png",
    ᐃᐃᐃΔᐃⵠᐃ: "img/community-mode-in.png",
    ⵠΔⵠᐃᐃⵠⲆ: "img/community-mode-click.png",
    ΔᐃⲆⲆᐃᐃᐃ: "img/experimental-modes-out.png",
    ⲆⵠᐃΔⲆᐃᐃ: "img/experimental-modes-in.png",
    ᐃⲆΔⲆⵠΔᐃ: "img/experimental-modes-click.png",
    ΔᐃΔᐃᐃⵠᐃ: "img/youtube-button-out.png",
    ᐃΔΔⵠᐃⲆⵠ: "img/youtube-button-in.png",
    ΔᐃᐃᐃⲆⲆᐃ: "img/youtube-button-click.png",
    ᐃⵠᐃⵠΔᐃⲆ: "img/wiki-button-out.png",
    ΔⲆⵠⵠᐃⵠⲆ: "img/wiki-button-in.png",
    ΔΔⵠⵠⵠⲆⵠ: "img/wiki-button-click.png",
    ᐃⵠΔⲆᐃⲆΔ: "img/twitter-button-out.png",
    ⲆⲆⲆⲆⵠΔΔ: "img/twitter-button-in.png",
    ⲆⵠⵠⵠΔⲆⵠ: "img/twitter-button-click.png",
    ⲆⲆΔᐃⲆΔⲆ: "img/facebook-button-out.png",
    ᐃΔΔΔΔⲆⲆ: "img/facebook-button-in.png",
    ⵠⵠΔᐃΔⲆΔ: "img/facebook-button-click.png",
    ⵠⲆᐃⲆⵠⲆᐃ: "img/reddit-button-out.png",
    ⲆⲆΔᐃΔΔΔ: "img/reddit-button-in.png",
    ⲆΔᐃᐃᐃΔⵠ: "img/reddit-button-click.png",
    ⵠᐃᐃⲆΔⲆᐃ: "img/discord-button-out.png",
    ᐃᐃⵠΔⲆⲆⲆ: "img/discord-button-in.png",
    ΔᐃᐃΔⵠᐃΔ: "img/discord-button-click.png",
    ᐃⵠⲆⲆᐃΔᐃ: "img/merch-button-out.png",
    ⵠᐃᐃΔΔⲆⲆ: "img/merch-button-in.png",
    ᐃⲆΔΔᐃⵠⵠ: "img/merch-button-click.png",
    ᐃⵠΔⲆΔⵠⲆⲆⵠ: "img/terminal-button-out.png",
    ⵠΔΔⵠⵠΔⵠⲆᐃ: "img/terminal-button-in.png",
    ⵠᐃΔΔᐃⲆⲆⵠᐃ: "img/terminal-button-click.png",
    ΔᐃᐃᐃΔΔⵠ: "img/restart-out.png",
    ⲆⵠΔᐃⵠΔᐃ: "img/restart-in.png",
    ᐃⲆⵠΔⲆⲆⲆ: "img/restart-click.png",
    ⲆᐃᐃᐃⲆΔⵠ: "img/guide-out.png",
    ⲆΔᐃΔⵠⲆᐃ: "img/guide-in.png",
    ⵠΔᐃⲆⵠⲆΔ: "img/guide-click.png",
    ⲆᐃᐃΔΔᐃΔ: "img/copy-paste-out.png",
    ⵠⲆⲆⲆⲆᐃΔ: "img/copy-paste-in.png",
    ⵠᐃⲆΔⲆᐃⵠ: "img/copy-paste-click.png",
    ᐃᐃⲆⵠᐃᐃᐃ: "img/link-buttons-bg.png",
    ᐃⵠᐃᐃⵠᐃⵠ: "img/changelog-box2.png",
    ⵠᐃⵠᐃΔΔᐃ: "img/changelog_30.png",
    ΔⵠᐃⲆΔⲆⲆ: "img/banner-taming.png",
    ΔⲆⲆΔΔⵠΔ: "img/profile-button-out.png",
    ᐃⲆᐃᐃΔᐃᐃ: "img/profile-button-in.png",
    ⲆΔⵠⵠᐃᐃΔ: "img/profile-button-click.png",
    ᐃⵠᐃᐃⲆⲆΔ: "img/login-button-out.png",
    ⵠᐃΔᐃᐃᐃⲆ: "img/login-button-in.png",
    ᐃᐃΔᐃᐃⲆⲆ: "img/login-button-click.png",
    ᐃΔᐃⲆΔⲆⲆ: "img/login-google-out.png",
    ΔⵠᐃΔΔᐃⲆ: "img/login-google-in.png",
    ᐃⵠΔΔΔΔⵠ: "img/login-google-click.png",
    ⵠⵠΔΔΔΔΔ: "img/login-facebook-out.png",
    ⵠⲆⵠⲆⵠᐃᐃ: "img/login-facebook-in.png",
    ᐃΔΔⲆΔᐃᐃ: "img/login-facebook-click.png",
    ⵠᐃΔⵠΔᐃⵠ: "img/account-box.png",
    ᐃⲆΔⲆΔᐃΔⲆⵠ: "img/account-under-maintenance.png",
    ΔᐃⲆΔΔᐃᐃ: "img/close-button-account-out.png",
    ΔᐃᐃΔⲆΔΔ: "img/close-button-account-in.png",
    ΔⲆⲆⵠΔⲆⵠ: "img/close-button-account-click.png",
    ᐃⵠΔΔᐃᐃⵠ: "img/play-button-out.png",
    ΔⵠᐃᐃᐃⵠⲆ: "img/play-button-in.png",
    ⲆᐃⲆⲆⵠⵠⵠ: "img/play-button-click.png",
    ⵠᐃᐃᐃⵠᐃᐃᐃᐃ: "img/app-store-badge.png",
    ᐃΔⵠΔⲆⵠⲆⲆᐃ: "img/play-store-badge.png",
    ⵠⲆⵠⲆΔⵠⲆΔΔ: "img/mobile-boxad.png",
    ⵠⵠⵠΔᐃᐃⵠ: "img/modify-name-out.png",
    ⲆᐃⵠΔⵠⵠᐃ: "img/modify-name-in.png",
    ⵠΔⲆⲆΔᐃⵠ: "img/modify-name-click.png",
    ⵠᐃⲆⲆⵠⲆⵠ: "img/yes-button-out.png",
    ᐃᐃⲆΔⲆⲆⵠ: "img/yes-button-in.png",
    ⲆΔᐃᐃⲆⲆᐃ: "img/yes-button-click.png",
    ᐃⵠᐃⲆΔᐃⲆ: "img/yes-300-button-out.png",
    ⵠΔⲆΔⲆΔᐃ: "img/yes-300-button-in.png",
    ⲆⵠⵠΔⲆⵠⵠ: "img/yes-300-button-click.png",
    ΔΔⵠⲆᐃⲆⵠ: "img/no-button-out.png",
    ⵠⵠᐃⲆⲆⵠⲆ: "img/no-button-in.png",
    ᐃΔΔⵠᐃᐃⵠ: "img/no-button-click.png",
    ⲆⵠΔⲆᐃᐃⲆ: "img/no-thanks-button-out.png",
    ΔⲆΔΔⵠΔⲆ: "img/no-thanks-button-in.png",
    ⵠᐃΔⲆⵠᐃⲆ: "img/no-thanks-button-click.png",
    ΔΔᐃΔΔΔⲆ: "img/shop-button-out.png",
    ΔᐃⲆⵠⵠᐃⵠ: "img/shop-button-in.png",
    ⵠᐃΔΔᐃⲆⲆ: "img/shop-button-click.png",
    ᐃᐃᐃΔⲆⵠᐃ: "img/logout-out.png",
    ⵠᐃⵠΔⵠⵠΔ: "img/logout-in.png",
    ⲆΔΔⵠᐃᐃⲆ: "img/logout-click.png",
    ᐃⵠᐃⲆᐃⵠΔ: "img/terms-button-out.png",
    ⵠⲆΔⵠⲆⵠⲆ: "img/terms-button-in.png",
    ΔⵠᐃⵠᐃᐃΔ: "img/terms-button-click.png",
    ⵠⵠᐃΔᐃⲆⲆ: "img/tutorial-icon.png",
    ᐃΔΔⲆΔΔᐃ: "img/skins-icon.png",
    ΔΔⵠᐃⲆᐃΔ: "img/shop-icon.png",
    ⲆᐃᐃΔⵠⲆΔⲆᐃ: "img/paint-icon.png",
    ⵠⲆⵠᐃᐃⵠΔ: "img/leaderboard-icon.png",
    ⵠΔⲆⲆⵠᐃΔ: "img/start-icon.png",
    ⲆᐃⲆⵠᐃⵠⲆ: "img/profile-icon.png",
    ᐃΔᐃⵠΔⵠⲆ: "img/server-access-icon2.png",
    ΔᐃⵠⵠⲆΔⵠ: "img/button-homepage-bg-out.png",
    ⲆⵠΔⲆΔⵠΔ: "img/button-homepage-bg-in.png",
    ΔΔᐃᐃⲆⲆⲆ: "img/button-homepage-bg-click.png",
    ΔΔΔⲆᐃᐃΔ: "img/button-bottom-homepage-bg-out.png",
    ⵠⲆᐃⲆⲆⲆⲆ: "img/button-bottom-homepage-bg-in.png",
    ΔⵠⲆⵠᐃⲆⲆ: "img/button-bottom-homepage-bg-click.png",
    ΔⲆⵠΔᐃᐃΔ: "img/lvl-player.png",
    ⲆᐃΔΔΔΔⲆ: "img/avatar-player.png",
    ⵠᐃᐃΔΔⵠⲆ: "img/avatar-player1.png",
    ᐃⲆΔⲆΔΔⲆ: "img/avatar-player2.png",
    ΔᐃᐃΔⲆΔⲆ: "img/avatar-player3.png",
    ⵠⲆⵠᐃᐃᐃⵠ: "img/avatar-player4.png",
    ⵠᐃΔΔⵠⵠⲆ: "img/avatar-player5.png",
    ⲆⲆᐃⲆⵠⵠⵠ: "img/avatar-player6.png",
    ᐃΔⵠⵠⵠΔᐃ: "img/avatar-player7.png",
    ⲆⵠⵠⲆⵠΔⲆ: "img/avatar-player8.png",
    ⵠⲆΔᐃΔⲆⲆ: "img/avatar-player9.png",
    ᐃⲆΔⲆΔΔΔ: "img/avatar-player10.png",
    ΔΔⲆⲆΔΔⲆ: "img/avatar-player11.png",
    ⵠᐃⲆᐃᐃᐃᐃ: "img/avatar-player12.png",
    ⵠⵠⲆΔⲆⲆΔ: "img/avatar-player13.png",
    ΔⵠⵠΔⲆⲆᐃ: "img/avatar-player14.png",
    ⲆⲆᐃᐃⵠΔᐃ: "img/avatar-player14.png",
    ⲆⵠⵠⵠᐃᐃΔ: "img/avatar-player14.png",
    ⵠⵠⵠᐃΔᐃⵠ: "img/avatar-player14.png",
    ⲆΔⲆⵠΔⲆⵠΔⲆ: "img/golden-bread.png",
    ΔᐃᐃΔΔⲆᐃ: "img/buy-bread-out.png",
    ⵠΔⵠᐃⲆᐃⲆ: "img/buy-bread-in.png",
    ⵠΔⲆΔⵠⲆⵠ: "img/buy-bread-click.png",
    ⵠΔᐃᐃΔᐃⵠ: "img/gauge.png",
    ΔΔᐃⲆᐃΔⵠⵠⲆ: "img/season-4-out.png",
    ⵠⵠΔⲆⵠⲆⲆΔⲆ: "img/season-4-in.png",
    ⵠⲆᐃⵠⵠΔⲆΔᐃ: "img/season-4-click.png",
    ΔΔⵠⲆⵠΔΔⲆᐃ: "img/season4-box.png",
    ΔⵠᐃΔᐃΔⲆⲆΔ: "img/season-5-out.png",
    ⵠᐃⲆΔⲆᐃⵠᐃᐃ: "img/season-5-in.png",
    ⵠΔⲆᐃΔΔⲆΔⵠ: "img/season-5-click.png",
    ⲆΔⵠΔΔᐃᐃΔⲆ: "img/season5-box.png",
    ⲆⵠΔⵠᐃΔⲆ: "img/season-6-out.png",
    ⵠⵠᐃⵠⲆⵠⲆ: "img/season-6-in.png",
    ⵠⲆⲆⲆⲆᐃᐃ: "img/season-6-click.png",
    ⵠᐃΔⲆⵠⵠⵠ: "img/season6-box.png",
    ΔⲆⵠΔΔⵠᐃ: "img/profile3-box.png",
    ΔⲆᐃᐃⵠⵠⵠ: "img/skins-box.png",
    ᐃⲆᐃᐃΔⲆⲆ: "img/shop-box.png",
    ⵠΔΔΔΔⵠᐃⲆⵠ: "img/private-server-box.png",
    ᐃᐃᐃⲆΔⲆΔ: "img/location-box.png",
    ΔΔΔᐃⲆᐃⲆ: "img/server-duration-box.png",
    ⲆⵠⵠΔⵠᐃⲆ: "img/tutorial-box.png",
    ⵠΔᐃⵠΔΔᐃ: "img/leaderboard2-box.png",
    ᐃⲆⵠᐃᐃⲆᐃ: "img/buy-breads-box.png",
    ᐃⵠⵠⵠⲆΔΔ: "img/bag-box.png",
    ⲆⵠⲆΔⲆᐃⵠ: "img/deadbox-box.png",
    ⲆΔⲆᐃⵠⵠΔ: "img/book-box.png",
    ⵠᐃⵠⵠⵠⵠΔ: "img/accessories-box.png",
    ⵠⵠΔᐃΔᐃΔ: "img/customskin-box.png",
    ᐃᐃΔⵠⲆⵠΔ: "img/bag-lasts.png",
    ⲆⵠΔᐃⵠΔⵠ: "img/server-lasts.png",
    ΔⲆⵠᐃΔⲆⲆ: "img/server-access-box2.png",
    ⲆⲆⵠⵠΔΔⲆ: "img/lootbox-box.png",
    ᐃΔᐃΔΔΔᐃ: "img/change-nickname0.png",
    ᐃᐃᐃⵠⵠⵠᐃ: "img/change-nickname1.png",
    ⲆⵠΔΔᐃᐃⵠ: "img/cheating-box.png",
    ᐃᐃⲆⲆᐃᐃⵠΔⵠ: "img/daily-quest-box.png",
    ᐃΔⲆⵠⵠⵠⵠᐃⲆ: "img/daily-5-bread.png",
    ΔⲆⲆΔⲆⲆⵠΔᐃ: "img/daily-10-bread.png",
    ⲆᐃⵠΔⵠⵠⵠⵠΔ: "img/daily-valid.png",
    ΔΔⵠⲆⵠᐃᐃ: "img/normal-profile-out.png",
    ᐃΔⲆⵠΔⵠⲆ: "img/normal-profile-in.png",
    ᐃⵠⵠᐃᐃΔⲆ: "img/normal-profile-click.png",
    ⵠΔᐃᐃⵠΔⲆ: "img/forest-profile-out.png",
    ᐃΔΔⲆᐃᐃᐃ: "img/forest-profile-in.png",
    ⲆΔᐃΔⲆⲆⲆ: "img/forest-profile-click.png",
    ΔᐃⵠⲆⵠᐃᐃ: "img/zombie-profile-out.png",
    ⲆⵠΔᐃᐃⵠΔ: "img/zombie-profile-in.png",
    ΔⲆⵠΔⲆᐃΔ: "img/zombie-profile-click.png",
    ᐃᐃⲆⲆΔⵠᐃ: "img/vampire-profile-out.png",
    ᐃᐃⲆΔᐃⵠⵠ: "img/vampire-profile-in.png",
    ᐃΔⵠⲆᐃΔᐃ: "img/vampire-profile-click.png",
    ⲆᐃⵠᐃᐃⵠⲆ: "img/total-profile-out.png",
    ᐃᐃⵠΔⵠᐃᐃ: "img/total-profile-in.png",
    ⵠΔⲆΔⲆⲆΔ: "img/total-profile-click.png",
    ⲆᐃⲆᐃⵠⲆΔ: "img/season1-out.png",
    ⲆⵠⲆⲆⵠⲆΔ: "img/season1-in.png",
    ⲆΔⵠⵠⵠΔⵠ: "img/season1-click.png",
    ⲆΔⵠᐃᐃΔΔ: "img/season2-out.png",
    ⵠⲆᐃΔΔⵠΔ: "img/season2-in.png",
    ⲆⵠⵠΔᐃΔᐃ: "img/season2-click.png",
    ΔⲆᐃᐃⲆᐃᐃ: "img/season3-out.png",
    ᐃⲆⲆΔⵠᐃᐃ: "img/season3-in.png",
    ΔΔⵠⵠⵠᐃⵠ: "img/season3-click.png",
    ΔΔⵠⲆᐃᐃⵠ: "img/season4-out.png",
    ᐃΔΔⲆᐃΔᐃ: "img/season4-in.png",
    ⵠᐃᐃⵠⲆⵠᐃ: "img/season4-click.png",
    ⲆⵠⲆᐃᐃⲆΔ: "img/season5-out.png",
    ⲆⵠⵠⲆΔⵠΔ: "img/season5-in.png",
    ⲆΔᐃΔᐃᐃΔ: "img/season5-click.png",
    ᐃᐃΔᐃⲆΔᐃ: "img/season6-out.png",
    ᐃᐃΔᐃⵠⲆΔ: "img/season6-in.png",
    ᐃⲆⵠΔⵠⲆΔ: "img/season6-click.png",
    ⵠⲆⲆΔⵠⵠⲆ: "img/locked-skin-alert.png",
    ⵠⲆⵠⵠΔⵠⲆ: "img/locked-custom-alert.png",
    ᐃⲆᐃⵠⲆⲆⲆ: "img/bg-red-locked.png",
    ⲆΔᐃΔⲆⵠᐃ: "img/skin-button-out.png",
    ⵠⲆⵠᐃⵠⵠΔ: "img/skin-button-in.png",
    ᐃⵠᐃⵠⵠⲆⵠ: "img/skin-button-click.png",
    ⲆⲆⲆⵠΔⲆΔ: "img/accessory-button-out.png",
    ⵠᐃΔᐃΔᐃΔ: "img/accessory-button-in.png",
    ᐃⵠⵠᐃⵠⲆᐃ: "img/accessory-button-click.png",
    ⲆΔᐃΔΔᐃⵠ: "img/bag-button-out.png",
    ⵠΔⲆΔᐃΔⲆ: "img/bag-button-in.png",
    ⵠᐃΔⵠⲆⲆⵠ: "img/bag-button-click.png",
    ⲆᐃⵠΔⵠⲆⵠ: "img/book-button-out.png",
    ᐃᐃᐃΔΔⲆⵠ: "img/book-button-in.png",
    ΔⲆⵠⲆΔᐃⵠ: "img/book-button-click.png",
    ΔⲆⲆⵠΔᐃΔ: "img/deadbox-button-out.png",
    ΔᐃΔⲆΔⵠⲆ: "img/deadbox-button-in.png",
    ᐃΔⲆⲆΔⲆⵠ: "img/deadbox-button-click.png",
    ᐃΔⲆΔⲆⵠᐃ: "img/loot-button-out.png",
    ΔⲆⲆΔⲆⵠⲆ: "img/loot-button-in.png",
    ⵠᐃⲆⲆⲆᐃⲆ: "img/loot-button-click.png",
    ⵠᐃⵠⵠⲆΔᐃ: "img/free-item-out.png",
    ⲆᐃΔⵠⵠΔᐃ: "img/free-item-in.png",
    ⲆᐃⵠⲆᐃⲆᐃ: "img/free-item-click.png",
    ΔⵠⲆᐃ: "img/wood-item-out.png",
    ΔᐃΔⵠ: "img/wood-item-in.png",
    ᐃⲆⵠⵠ: "img/wood-item-click.png",
    ΔⵠⲆⲆᐃⲆΔ: "img/stone-item.png",
    ᐃⲆⲆΔⵠⲆᐃ: "img/stone-item-in.png",
    ⵠⲆⲆⵠⲆⵠⵠ: "img/stone-item-click.png",
    ⵠⵠΔⲆΔⵠΔ: "img/gold-item.png",
    ΔⲆᐃΔΔᐃΔ: "img/gold-item-in.png",
    ᐃⲆΔⲆΔᐃΔ: "img/gold-item-click.png",
    ᐃⵠⲆⲆⵠᐃΔ: "img/diamond-item.png",
    ⲆΔᐃⲆⵠᐃⵠ: "img/diamond-item-in.png",
    ⲆⵠᐃᐃᐃⲆᐃ: "img/diamond-item-click.png",
    Ⲇⵠᐃᐃⵠᐃⵠ: "img/amethyst-item.png",
    ᐃⲆⵠΔᐃⵠⲆ: "img/amethyst-item-in.png",
    ᐃⵠⲆⲆⵠⲆⲆ: "img/amethyst-item-click.png",
    ΔᐃΔⲆⲆΔᐃ: "img/reidite-item.png",
    ⲆᐃΔⵠΔⵠⲆ: "img/reidite-item-in.png",
    ΔᐃᐃⲆⵠⵠⲆ: "img/reidite-item-click.png",
    ΔᐃΔⵠⵠⵠⲆ: "img/special-item-out.png",
    ΔΔΔⲆΔⲆΔ: "img/special-item-in.png",
    ᐃᐃᐃᐃⵠⵠⵠ: "img/special-item-click.png",
    ΔⲆᐃⵠΔⵠᐃ: "img/level-item-out.png",
    ΔⲆⲆⲆΔⵠᐃ: "img/level-item-in.png",
    ⵠⵠⵠΔⵠⵠⵠ: "img/level-item-click.png",
    ⵠⲆⵠⲆΔⵠⲆ: "img/skin-previous-out.png",
    ΔᐃⵠΔΔⲆⵠ: "img/skin-previous-in.png",
    ⵠⲆᐃⵠⲆᐃΔ: "img/skin-previous-click.png",
    ΔΔΔⲆⵠⵠⲆ: "img/skin-next-out.png",
    ᐃⲆᐃΔⲆᐃᐃ: "img/skin-next-in.png",
    ΔΔᐃⵠⲆᐃⵠ: "img/skin-next-click.png",
    ⵠᐃᐃⵠᐃ: "img/back-button-out.png",
    ⲆⲆⲆᐃⵠ: "img/back-button-in.png",
    ΔⲆⲆⵠΔ: "img/back-button-click.png",
    ΔΔΔⲆΔΔΔ: "img/get-more-button-out.png",
    ΔΔΔⵠⲆᐃΔ: "img/get-more-button-in.png",
    ⲆⲆΔⵠⲆᐃⲆ: "img/get-more-button-click.png",
    ⲆⵠᐃⲆΔΔᐃ: "img/currency1-out.png",
    ⲆⵠⲆⲆΔⲆⲆ: "img/currency1-in.png",
    ΔᐃⵠΔⲆᐃᐃ: "img/currency1-click.png",
    ᐃⲆⲆⲆⲆⵠⲆ: "img/currency2-out.png",
    ΔⲆⲆⵠΔᐃⵠ: "img/currency2-in.png",
    ⵠᐃΔⲆᐃᐃᐃ: "img/currency2-click.png",
    ᐃΔⵠⲆΔⲆⵠ: "img/currency3-out.png",
    ΔⵠᐃⲆΔᐃΔ: "img/currency3-in.png",
    ΔᐃᐃᐃⲆᐃⲆ: "img/currency3-click.png",
    ΔΔⲆᐃⵠᐃⲆ: "img/currency4-out.png",
    ⵠᐃⵠⵠᐃᐃᐃ: "img/currency4-in.png",
    ᐃᐃⲆᐃᐃⲆⲆ: "img/currency4-click.png",
    ΔΔⲆΔᐃΔΔ: "img/currency5-out.png",
    ᐃⲆⵠⲆᐃⲆΔ: "img/currency5-in.png",
    ⲆᐃⲆⲆⵠⵠⲆ: "img/currency5-click.png",
    ΔΔⲆⵠᐃⲆᐃ: "img/price1-out.png",
    ⲆᐃⲆΔᐃᐃΔ: "img/price1-in.png",
    ⲆᐃⲆᐃᐃⵠᐃ: "img/price1-click.png",
    ΔΔⲆᐃΔΔⲆ: "img/price2-out.png",
    ⲆᐃΔⵠΔⲆⵠ: "img/price2-in.png",
    ΔΔⵠΔᐃᐃⲆ: "img/price2-click.png",
    ΔⲆⵠⲆⵠⵠΔ: "img/price3-out.png",
    ΔᐃᐃⵠΔⲆⲆ: "img/price3-in.png",
    ᐃΔⵠⲆⲆᐃΔ: "img/price3-click.png",
    ΔᐃΔⵠⲆⲆᐃ: "img/price4-out.png",
    ᐃᐃᐃⲆⵠᐃᐃ: "img/price4-in.png",
    ⵠⵠⲆᐃΔΔⵠ: "img/price4-click.png",
    ΔΔⵠⲆᐃⲆᐃ: "img/price5-out.png",
    ⲆⵠⲆⲆⵠᐃⵠ: "img/price5-in.png",
    ᐃᐃⵠᐃᐃⲆᐃ: "img/price5-click.png",
    ⵠⲆΔⲆⲆΔⵠΔⲆ: "img/buy-private-server-out.png",
    ⵠⵠⵠΔΔⲆⲆΔⲆ: "img/buy-private-server-in.png",
    ⲆᐃⵠᐃᐃⵠⲆⲆΔ: "img/buy-private-server-click.png",
    ⵠⵠⲆⲆⵠⲆΔ: "img/atlanta-out.png",
    ΔⲆΔⵠⵠⵠⲆ: "img/atlanta-in.png",
    ⵠⵠᐃΔⲆΔΔ: "img/atlanta-click.png",
    ⵠΔⵠⵠᐃⵠⲆ: "img/dallas-out.png",
    ⲆΔⲆᐃΔᐃⲆ: "img/dallas-in.png",
    ΔⲆⲆⵠⲆⵠᐃ: "img/dallas-click.png",
    ⲆⵠᐃᐃΔⵠⲆ: "img/fremont-out.png",
    ΔⲆᐃⵠΔⵠⵠ: "img/fremont-in.png",
    ⲆⲆⵠΔⲆⵠⲆ: "img/fremont-click.png",
    ⲆⲆᐃⲆⵠⲆᐃ: "img/newark-out.png",
    ᐃᐃΔⲆⵠᐃᐃ: "img/newark-in.png",
    ⵠΔⲆⲆⲆΔΔ: "img/newark-click.png",
    ᐃⵠⲆⲆⵠⵠⵠ: "img/toronto-out.png",
    ⵠⵠᐃᐃⲆΔΔ: "img/toronto-in.png",
    ΔᐃᐃⵠⵠᐃⲆ: "img/toronto-click.png",
    ΔᐃΔᐃⲆⵠΔ: "img/singapore-out.png",
    ΔⲆⵠⲆᐃⵠⵠ: "img/singapore-in.png",
    ⵠⲆᐃⵠΔᐃΔ: "img/singapore-click.png",
    ⵠⲆΔᐃᐃΔᐃ: "img/frankfurt-out.png",
    ⲆⲆᐃΔⵠⵠᐃ: "img/frankfurt-in.png",
    ⵠΔⵠᐃⲆΔⲆ: "img/frankfurt-click.png",
    ᐃⲆΔⲆⵠΔΔ: "img/london-out.png",
    ᐃⵠⲆΔⲆΔᐃ: "img/london-in.png",
    ᐃᐃΔᐃΔⵠⵠ: "img/london-click.png",
    ⲆⲆΔΔⲆⲆⵠ: "img/mumbai-out.png",
    ΔᐃΔᐃΔⲆΔ: "img/mumbai-in.png",
    ⵠⲆⲆΔⲆᐃΔ: "img/mumbai-click.png",
    ⵠⵠᐃΔⲆⲆΔ: "img/tokyo-out.png",
    ΔΔΔⲆΔⲆᐃ: "img/tokyo-in.png",
    ΔⵠΔΔⲆⵠΔ: "img/tokyo-click.png",
    ᐃⵠⲆⲆᐃⵠᐃⲆⵠ: "img/yes-location-out.png",
    ⲆⵠⵠΔⵠᐃᐃΔⲆ: "img/yes-location-in.png",
    ⲆΔⲆΔⵠⲆᐃⵠᐃ: "img/yes-location-click.png",
    ⲆΔΔⲆᐃⲆΔ: "img/3days-out.png",
    ᐃΔⵠⵠᐃΔᐃ: "img/3days-in.png",
    ⲆᐃⲆⲆᐃΔⲆ: "img/3days-click.png",
    ⵠᐃΔⵠΔⵠᐃ: "img/7days-out.png",
    ⵠⲆΔⲆⲆⲆⵠ: "img/7days-in.png",
    ΔᐃΔᐃᐃΔⵠ: "img/7days-click.png",
    ᐃⵠᐃΔⵠⵠᐃ: "img/30days-out.png",
    ᐃⲆⵠⲆΔΔⲆ: "img/30days-in.png",
    ⲆⵠⲆⲆⵠΔᐃ: "img/30days-click.png",
    ⲆⵠᐃⲆⵠᐃΔ: "img/90days-out.png",
    ⵠΔⲆΔⵠᐃΔ: "img/90days-in.png",
    ΔⲆᐃⲆᐃⲆⲆ: "img/90days-click.png",
    ⵠᐃᐃΔΔⵠᐃ: "img/spin1.png",
    ᐃΔⵠⵠⲆᐃⲆ: "img/spin2.png",
    ⲆΔⲆΔⵠᐃΔ: "img/spin3.png",
    ΔⲆⵠⵠⵠΔⲆ: "img/spin4.png",
    ᐃⵠΔᐃⵠᐃᐃ: "img/spin5.png",
    ΔⲆᐃᐃⲆⲆⵠ: "img/spin6.png",
    ᐃⵠᐃΔⲆΔΔ: "img/arrow-spin.png",
    ΔⲆⵠⵠᐃⵠⵠ: "img/spin-button-1-out.png",
    ᐃⲆᐃⵠΔⲆΔ: "img/spin-button-1-in.png",
    ΔᐃⲆᐃⵠΔΔ: "img/spin-button-1-click.png",
    ΔⵠⲆᐃⵠΔⵠ: "img/spin-button-2-out.png",
    ⵠⵠⵠⵠⲆⵠⲆ: "img/spin-button-2-in.png",
    ⵠⵠⲆⵠⲆⵠᐃ: "img/spin-button-2-click.png",
    ΔⵠᐃᐃⵠᐃⲆ: "img/spin-button-3-out.png",
    ΔⵠᐃⵠⵠⲆⲆ: "img/spin-button-3-in.png",
    ⵠᐃᐃΔⵠᐃΔ: "img/spin-button-3-click.png",
    ᐃᐃΔⲆΔΔⵠ: "img/spin-button-4-out.png",
    ᐃᐃΔⵠᐃⲆΔ: "img/spin-button-4-in.png",
    ᐃΔⲆᐃⵠⲆⵠ: "img/spin-button-4-click.png",
    ΔⲆⵠⲆⲆᐃΔ: "img/spin-button-5-out.png",
    ΔᐃᐃⵠⵠⲆⲆ: "img/spin-button-5-in.png",
    ⲆᐃⲆⵠⵠᐃⵠ: "img/spin-button-5-click.png",
    ⲆΔΔⲆⲆⲆⲆ: "img/spin-light.png",
    ᐃⵠⵠⵠⲆⵠΔ: "img/tuto-wiki-out.png",
    ⵠΔΔΔⲆⲆⲆ: "img/tuto-wiki-in.png",
    ᐃⵠⲆⵠⲆᐃᐃ: "img/tuto-wiki-click.png",
    ᐃⲆⲆⲆΔᐃⵠ: "img/tuto-previous-out.png",
    ⲆᐃΔᐃⲆΔⲆ: "img/tuto-previous-in.png",
    ᐃᐃⵠⲆⲆΔⵠ: "img/tuto-previous-click.png",
    ΔⵠⲆⵠⵠᐃΔ: "img/tuto-next-out.png",
    ⵠΔΔⲆΔⲆⲆ: "img/tuto-next-in.png",
    ᐃΔⲆⲆⲆⲆⵠ: "img/tuto-next-click.png",
    ⵠᐃΔᐃᐃΔᐃ: "img/time-leaderboard-out.png",
    ᐃⵠⲆᐃⵠⵠΔ: "img/time-leaderboard-in.png",
    ⵠΔⵠᐃᐃΔᐃ: "img/time-leaderboard-click.png",
    ᐃᐃᐃⲆΔᐃⵠ: "img/score-leaderboard-out.png",
    ⲆⲆⲆⵠⵠᐃⵠ: "img/score-leaderboard-in.png",
    ᐃⵠΔⵠᐃⵠⵠ: "img/score-leaderboard-click.png",
    ΔΔⵠᐃⵠᐃⲆ: "img/lvl-leaderboard-out.png",
    ᐃᐃⵠᐃⵠⲆⵠ: "img/lvl-leaderboard-in.png",
    ⵠⲆᐃΔⵠⵠᐃ: "img/lvl-leaderboard-click.png",
    ⲆᐃⲆⲆΔⵠΔ: "img/kill-leaderboard-out.png",
    ᐃⲆⲆⵠⵠⵠᐃ: "img/kill-leaderboard-in.png",
    ΔᐃΔΔᐃⲆᐃ: "img/kill-leaderboard-click.png",
    ⵠⵠⵠⲆⵠΔⲆ: "img/all-leaderboard-out.png",
    ⲆΔᐃⵠⲆᐃᐃ: "img/all-leaderboard-in.png",
    ΔΔᐃΔᐃⵠⵠ: "img/all-leaderboard-click.png",
    ⵠᐃᐃΔⵠⲆⵠ: "img/today-leaderboard-out.png",
    ⵠΔⲆⲆⵠᐃⲆ: "img/today-leaderboard-in.png",
    ᐃⵠⵠⵠⲆⲆΔ: "img/today-leaderboard-click.png",
    ⵠⲆⵠⲆⵠΔⲆ: "img/week-leaderboard-out.png",
    ΔΔᐃⵠΔᐃᐃ: "img/week-leaderboard-in.png",
    ⵠⵠᐃⵠᐃⵠⲆ: "img/week-leaderboard-click.png",
    ⵠΔᐃΔᐃⲆⲆ: "img/season1-out.png",
    ⲆⲆΔⲆΔⵠⲆ: "img/season1-in.png",
    ᐃⵠᐃⵠΔⵠΔ: "img/season1-click.png",
    ΔΔⲆⲆⲆⲆΔ: "img/season2-out.png",
    ΔΔΔᐃⵠⵠⲆ: "img/season2-in.png",
    ΔᐃⵠⵠⲆᐃⵠ: "img/season2-click.png",
    ⲆᐃⲆΔᐃᐃⲆ: "img/season3-out.png",
    ᐃΔΔⵠᐃᐃᐃ: "img/season3-in.png",
    ᐃᐃΔⵠᐃⵠⵠ: "img/season3-click.png",
    ᐃⲆⲆⵠⲆⲆΔ: "img/season4-out.png",
    ⲆΔᐃⲆᐃᐃΔ: "img/season4-in.png",
    ⵠΔⲆᐃⲆᐃⵠ: "img/season4-click.png",
    ⵠΔΔⵠΔⲆⵠ: "img/season5-out.png",
    ΔΔⵠⲆᐃⵠΔ: "img/season5-in.png",
    ⲆⵠᐃⲆⵠΔⵠ: "img/season5-click.png",
    ⲆᐃΔⵠⵠⲆⵠ: "img/season6-out.png",
    ⲆⵠⵠᐃΔⲆᐃ: "img/season6-in.png",
    ᐃᐃⵠᐃΔⵠᐃ: "img/season6-click.png",
    ΔⲆΔⲆⵠⲆΔ: "img/total-lead-out.png",
    ⵠΔᐃᐃΔΔΔ: "img/total-lead-in.png",
    ΔΔⲆⵠⵠΔΔ: "img/total-lead-click.png",
    ᐃΔⲆⲆᐃⲆᐃ: "img/normal-lead-out.png",
    ᐃⵠⵠΔⵠᐃΔ: "img/normal-lead-in.png",
    ᐃΔⲆⲆⲆΔᐃ: "img/normal-lead-click.png",
    ΔᐃΔⲆⵠᐃⵠ: "img/forest-lead-out.png",
    ᐃΔΔΔⲆᐃᐃ: "img/forest-lead-in.png",
    ΔᐃᐃⲆᐃⵠΔ: "img/forest-lead-click.png",
    ᐃΔᐃⲆᐃⵠΔ: "img/vampire-lead-out.png",
    ⲆᐃⲆⵠΔⲆⲆ: "img/vampire-lead-in.png",
    ⲆⲆΔᐃᐃⲆΔ: "img/vampire-lead-click.png",
    ⲆᐃⲆⵠⲆⲆΔ: "img/zombie-lead-out.png",
    ΔⲆⲆᐃΔⲆΔ: "img/zombie-lead-in.png",
    ⲆΔΔᐃⵠΔΔ: "img/zombie-lead-click.png",
    ᐃᐃⵠⵠΔⲆΔ: "img/day-level5.png",
    ⵠΔⵠᐃⲆᐃᐃ: "img/night-level5.png",
    ᐃⲆᐃⲆⵠᐃΔ: "img/day-level10.png",
    ⲆⲆⵠⵠⲆⵠᐃ: "img/night-level10.png",
    ⲆⵠᐃᐃⲆⵠⵠ: "img/day-level15.png",
    ΔⲆᐃᐃⲆⵠΔ: "img/night-level15.png",
    ΔΔᐃᐃⵠᐃΔ: "img/day-level20.png",
    ⲆⲆⲆΔⲆⵠⲆ: "img/night-level20.png",
    ΔⵠᐃᐃⵠΔΔ: "img/day-level25.png",
    ⲆⵠᐃᐃⵠᐃⲆ: "img/night-level25.png",
    ⲆᐃᐃⲆᐃᐃΔ: "img/day-level30.png",
    ΔΔᐃᐃΔΔⲆ: "img/night-level30.png",
    ⵠⲆⵠᐃⵠΔᐃ: "img/day-level35.png",
    ᐃⵠⵠⲆⲆⲆⲆ: "img/night-level35.png",
    ᐃⵠⵠΔⵠΔⲆ: "img/day-level40.png",
    ⵠᐃⵠΔΔⵠᐃ: "img/night-level40.png",
    ΔⲆⲆⵠⲆⲆΔ: "img/day-level45.png",
    ΔΔⲆⲆⲆΔⵠ: "img/night-level45.png",
    ⵠΔᐃⵠⵠΔⲆ: "img/day-level50.png",
    ⵠⲆΔᐃΔᐃᐃ: "img/night-level50.png",
    ΔΔᐃⲆᐃⲆⵠ: "img/day-level55.png",
    ⲆⵠᐃΔΔᐃᐃ: "img/night-level55.png",
    ⲆⵠⵠᐃⲆⲆⲆ: "img/day-level60.png",
    ΔⵠⲆⲆⵠⲆᐃ: "img/night-level60.png",
    ⲆⵠΔᐃΔⵠⵠ: "img/day-skin-devast0.png",
    ᐃⲆⲆΔⵠⲆⵠ: "img/night-skin-devast0.png",
    ΔⵠΔΔⵠⲆΔ: "img/day-hand-devaster.png",
    ⲆⲆⵠᐃⲆΔⲆ: "img/night-hand-devaster.png",
    ⵠΔΔⲆΔᐃⵠ: "img/day-skin-star0.png",
    ⲆΔΔⵠⵠΔᐃ: "img/night-skin-star0.png",
    ᐃᐃᐃΔⵠⲆⲆ: "img/day-hand-star0.png",
    ⲆⲆᐃΔᐃΔⵠ: "img/night-hand-star0.png",
    ⲆⲆᐃⵠΔⲆᐃ: "img/day-vampire.png",
    ⲆΔⲆⵠΔⲆᐃ: "img/night-vampire.png",
    ᐃᐃⲆΔΔⲆΔ: "img/day-hand-vampire.png",
    ⲆⲆΔⵠᐃⵠᐃ: "img/night-hand-vampire.png",
    ᐃⵠⵠΔⵠΔⵠ: "img/day-zombie.png",
    ⵠΔⵠᐃΔᐃⵠ: "img/night-zombie.png",
    ᐃᐃΔᐃⲆⵠΔ: "img/day-hand-zombie.png",
    ᐃⵠᐃΔΔⵠᐃ: "img/night-hand-zombie.png",
    Ⲇⵠᐃⵠᐃⵠᐃ: "img/day-skin113.png",
    ᐃΔᐃᐃⵠᐃⲆ: "img/night-skin113.png",
    ΔⵠΔⲆᐃΔⵠ: "img/day-hand-skin113.png",
    ⵠⵠᐃΔΔᐃⲆ: "img/night-hand-skin113.png",
    ᐃⵠΔⵠᐃΔⲆ: "img/day-skin0.png",
    ⲆⵠΔΔΔⲆᐃ: "img/night-skin0.png",
    ⵠᐃΔᐃΔΔᐃ: "img/day-skin1.png",
    ΔⲆΔΔⵠⲆᐃ: "img/night-skin1.png",
    ΔΔⲆⲆΔΔⵠ: "img/day-skin2.png",
    ΔⵠΔΔⵠΔⵠ: "img/night-skin2.png",
    ⵠⵠⲆⵠΔⲆᐃ: "img/day-skin3.png",
    ΔΔⵠΔⵠᐃⵠ: "img/night-skin3.png",
    ᐃⲆⲆΔⲆⲆᐃ: "img/day-skin4.png",
    ⲆΔⵠⵠⲆⵠⵠ: "img/night-skin4.png",
    ᐃⲆΔⲆᐃⲆΔ: "img/day-skin5.png",
    ᐃⵠⵠⲆⵠⲆᐃ: "img/night-skin5.png",
    ΔⵠⵠΔΔⲆⲆ: "img/day-skin6.png",
    ⲆⲆⲆⲆⵠᐃΔ: "img/night-skin6.png",
    ⲆⵠΔⵠⵠⲆⵠ: "img/day-skin7.png",
    ⵠΔᐃᐃⵠⲆᐃ: "img/night-skin7.png",
    ⲆΔⵠⲆⵠⲆⲆ: "img/day-skin8.png",
    ⲆΔⵠΔⵠⵠᐃ: "img/night-skin8.png",
    ⵠᐃⵠΔⲆⵠΔ: "img/day-skin9.png",
    ⲆΔⵠᐃⵠᐃⲆ: "img/night-skin9.png",
    ΔⲆⲆⲆⵠⲆΔ: "img/day-skin10.png",
    ᐃᐃⲆⲆⵠⲆⵠ: "img/night-skin10.png",
    ᐃⵠⲆⵠⵠᐃΔ: "img/day-skin11.png",
    ⲆᐃᐃⵠΔᐃᐃ: "img/night-skin11.png",
    ᐃᐃΔΔᐃΔᐃ: "img/day-skin12.png",
    ⲆΔⵠⵠⵠΔⲆ: "img/night-skin12.png",
    ⵠᐃᐃᐃⲆΔΔ: "img/day-skin13.png",
    ᐃΔⲆΔⵠᐃΔ: "img/night-skin13.png",
    ⲆᐃᐃⲆⵠΔᐃ: "img/day-skin14.png",
    ΔᐃⲆⵠᐃᐃᐃ: "img/night-skin14.png",
    ⵠᐃⵠᐃᐃᐃⲆ: "img/day-skin15.png",
    ⲆᐃⲆᐃⲆΔΔ: "img/night-skin15.png",
    ᐃⲆᐃΔᐃᐃⵠ: "img/day-skin16.png",
    ΔⵠⵠᐃⵠᐃⲆ: "img/night-skin16.png",
    ⲆΔⲆⲆⲆⲆⲆ: "img/day-skin17.png",
    ΔᐃΔⵠΔΔᐃ: "img/night-skin17.png",
    ⵠⲆⲆⵠΔᐃⲆ: "img/day-skin18.png",
    ⲆⵠᐃⵠⲆⵠΔ: "img/night-skin18.png",
    ⵠⲆᐃᐃⲆΔᐃ: "img/day-skin19.png",
    ⵠᐃⲆⲆᐃΔᐃ: "img/night-skin19.png",
    ⲆΔᐃⲆⵠⵠᐃ: "img/day-skin20.png",
    ΔⵠᐃⲆⵠᐃⵠ: "img/night-skin20.png",
    ⲆⵠΔᐃΔⵠⲆ: "img/day-skin21.png",
    ᐃΔⵠᐃⵠⵠᐃ: "img/night-skin21.png",
    ᐃⲆᐃᐃΔⵠΔ: "img/day-skin22.png",
    ᐃΔΔⲆⲆᐃΔ: "img/night-skin22.png",
    ⲆᐃⵠⵠᐃⵠⲆ: "img/day-skin23.png",
    ⲆΔᐃⲆⲆⲆⵠ: "img/night-skin23.png",
    ᐃⵠΔⵠᐃᐃᐃ: "img/day-skin24.png",
    ⲆΔⵠᐃᐃⵠⵠ: "img/night-skin24.png",
    ⵠⲆⲆⲆⵠⲆΔ: "img/day-skin25.png",
    ⵠⵠⲆⵠⵠᐃΔ: "img/night-skin25.png",
    ⵠᐃⵠΔᐃΔᐃ: "img/day-skin26.png",
    ⲆΔᐃⵠⵠⵠᐃ: "img/night-skin26.png",
    ⵠΔⲆΔⲆⲆⲆ: "img/day-skin27.png",
    ᐃᐃΔΔⵠⲆΔ: "img/night-skin27.png",
    ᐃᐃⲆⲆⵠᐃΔ: "img/day-skin28.png",
    ᐃΔⵠⲆⲆⵠⲆ: "img/night-skin28.png",
    ⵠⵠⵠⵠᐃⲆⲆ: "img/day-skin29.png",
    ⲆᐃⵠΔᐃᐃᐃ: "img/night-skin29.png",
    ⲆᐃⲆⵠᐃΔⵠ: "img/day-skin30.png",
    ⵠᐃᐃⵠΔⵠᐃ: "img/night-skin30.png",
    ⵠᐃᐃⵠΔⵠⵠ: "img/day-skin31.png",
    ⲆᐃΔᐃᐃᐃᐃ: "img/night-skin31.png",
    ⵠᐃΔᐃᐃΔΔ: "img/day-skin32.png",
    ⵠⲆᐃⵠⵠΔⲆ: "img/night-skin32.png",
    ΔΔΔⲆⵠᐃⲆ: "img/day-skin33.png",
    ᐃⵠΔᐃᐃΔⵠ: "img/night-skin33.png",
    ΔᐃᐃⲆᐃΔΔ: "img/day-skin34.png",
    ᐃⲆⵠΔⲆΔⵠ: "img/night-skin34.png",
    ᐃⲆᐃⵠᐃᐃⲆ: "img/day-skin35.png",
    ⵠΔᐃΔⵠⵠᐃ: "img/night-skin35.png",
    ⵠᐃⲆⲆⲆⵠⲆ: "img/day-skin36.png",
    ⵠⵠⵠⵠⲆΔᐃ: "img/night-skin36.png",
    ⵠᐃΔⵠⲆΔⵠ: "img/day-skin37.png",
    ΔΔΔᐃΔⲆⲆ: "img/night-skin37.png",
    ΔⵠⲆⵠⲆΔⵠ: "img/day-skin38.png",
    ᐃⵠⲆⲆⲆᐃⵠ: "img/night-skin38.png",
    ⵠᐃᐃⲆⲆᐃᐃ: "img/day-skin39.png",
    ⵠΔⲆⲆᐃⲆⲆ: "img/night-skin39.png",
    ΔᐃⲆᐃᐃᐃⲆ: "img/day-skin40.png",
    ⲆⵠᐃⲆⵠⲆᐃ: "img/night-skin40.png",
    ᐃᐃᐃΔᐃᐃΔ: "img/day-skin41.png",
    ⵠΔᐃⲆΔΔⲆ: "img/night-skin41.png",
    ᐃΔᐃᐃⵠⲆᐃ: "img/day-skin42.png",
    ΔᐃⵠᐃⲆᐃΔ: "img/night-skin42.png",
    ΔⵠⲆⵠΔⲆᐃ: "img/day-skin43.png",
    ⲆΔⵠᐃⲆᐃⲆ: "img/night-skin43.png",
    ⵠⲆᐃᐃᐃᐃⲆ: "img/day-skin44.png",
    ΔΔⲆΔᐃⲆᐃ: "img/night-skin44.png",
    ᐃⲆᐃⲆⵠΔΔ: "img/day-skin45.png",
    ᐃΔⲆΔΔᐃⲆ: "img/night-skin45.png",
    ΔᐃᐃⵠⲆⵠᐃ: "img/day-skin46.png",
    ⲆᐃᐃᐃⵠⲆΔ: "img/night-skin46.png",
    ᐃΔᐃΔⵠᐃⲆ: "img/day-skin47.png",
    ⲆⵠⵠᐃΔᐃΔ: "img/night-skin47.png",
    ΔᐃᐃⲆⵠΔⵠ: "img/day-skin48.png",
    ⵠⵠΔⵠΔⲆⵠ: "img/night-skin48.png",
    ⲆΔⵠΔⲆᐃᐃ: "img/day-skin49.png",
    ᐃΔΔⵠΔΔᐃ: "img/night-skin49.png",
    ⲆⵠᐃⲆⵠⲆⵠ: "img/day-skin50.png",
    ⲆᐃⲆᐃⵠΔⵠ: "img/night-skin50.png",
    ⵠΔⵠᐃΔⲆᐃ: "img/day-skin51.png",
    ΔⲆΔⲆⲆⵠΔ: "img/night-skin51.png",
    ΔΔᐃⲆᐃΔⵠ: "img/day-skin52.png",
    ⵠᐃⲆⵠΔⵠⵠ: "img/night-skin52.png",
    ⲆΔΔΔⲆᐃⵠ: "img/day-skin53.png",
    ᐃⲆⵠᐃⲆᐃⵠ: "img/night-skin53.png",
    ᐃᐃΔᐃⲆᐃⲆ: "img/day-skin54.png",
    ΔⵠⵠⲆⲆΔΔ: "img/night-skin54.png",
    ᐃᐃᐃⵠΔΔΔ: "img/day-skin55.png",
    ⲆⵠⵠⲆⵠᐃⵠ: "img/night-skin55.png",
    ⲆᐃᐃᐃⲆΔⲆ: "img/day-skin56.png",
    ΔⲆⲆⲆᐃⵠΔ: "img/night-skin56.png",
    ᐃΔⵠⵠΔᐃΔ: "img/day-skin57.png",
    ᐃΔᐃΔⵠⲆⲆ: "img/night-skin57.png",
    ⲆΔᐃⵠᐃᐃΔ: "img/day-skin58.png",
    ⵠⵠΔᐃⲆᐃΔ: "img/night-skin58.png",
    ⲆⵠΔⵠΔΔⵠ: "img/day-skin59.png",
    ⵠᐃⵠⲆᐃᐃⲆ: "img/night-skin59.png",
    ⲆᐃⵠⲆⵠⲆΔ: "img/day-skin60.png",
    ⵠᐃⲆΔⲆⲆᐃ: "img/night-skin60.png",
    ⲆⲆⲆⵠⲆⵠΔ: "img/day-skin61.png",
    ⵠⵠΔΔᐃᐃⵠ: "img/night-skin61.png",
    ᐃⲆⵠᐃΔⲆᐃ: "img/day-skin62.png",
    ᐃⲆᐃⵠᐃΔⵠ: "img/night-skin62.png",
    ⲆᐃⵠⵠᐃΔᐃ: "img/day-skin63.png",
    ᐃΔΔⲆΔΔΔ: "img/night-skin63.png",
    ΔⲆⵠᐃᐃᐃⵠ: "img/day-skin64.png",
    ⲆⲆⵠΔⵠᐃΔ: "img/night-skin64.png",
    ΔⵠᐃⲆⲆⵠΔ: "img/day-skin65.png",
    ΔⵠⲆᐃᐃΔⵠ: "img/night-skin65.png",
    ΔⵠⵠΔΔΔⵠ: "img/day-skin66.png",
    ᐃⵠⲆᐃⲆΔⲆ: "img/night-skin66.png",
    ⲆⲆⵠᐃᐃⲆᐃ: "img/day-skin67.png",
    ⲆΔⲆⲆᐃⵠⲆ: "img/night-skin67.png",
    ⲆΔᐃᐃⲆΔⵠ: "img/day-skin68.png",
    ᐃⲆᐃΔⵠΔⵠ: "img/night-skin68.png",
    ⲆᐃⵠⲆΔⲆᐃ: "img/day-skin69.png",
    ᐃⵠᐃΔᐃᐃⲆ: "img/night-skin69.png",
    ᐃⵠⲆⲆΔΔΔ: "img/day-skin70.png",
    ᐃᐃⵠᐃΔΔᐃ: "img/night-skin70.png",
    ᐃΔⵠΔⲆⲆᐃ: "img/day-skin71.png",
    ⵠⲆΔᐃⲆⲆⲆ: "img/night-skin71.png",
    ΔⵠΔⲆΔⲆΔ: "img/day-skin72.png",
    ΔⵠⵠⵠΔⵠᐃ: "img/night-skin72.png",
    ᐃᐃᐃⵠΔΔᐃ: "img/day-skin73.png",
    ΔΔΔΔΔⵠΔ: "img/night-skin73.png",
    ΔⵠΔⵠΔⵠⲆ: "img/day-skin74.png",
    ⲆⵠⵠᐃⲆⵠⲆ: "img/night-skin74.png",
    ⵠⵠΔᐃᐃᐃᐃ: "img/day-skin75.png",
    ⵠⲆΔⵠⲆⲆᐃ: "img/night-skin75.png",
    ΔⲆᐃⲆΔⲆᐃ: "img/day-skin76.png",
    ᐃⲆⲆΔⲆⲆΔ: "img/night-skin76.png",
    ⵠᐃᐃⵠⵠᐃⵠ: "img/day-skin77.png",
    ⵠᐃⵠΔΔΔⲆ: "img/night-skin77.png",
    ΔΔᐃⲆⲆΔΔ: "img/day-skin78.png",
    ⵠⲆᐃⵠᐃΔᐃ: "img/night-skin78.png",
    ΔΔΔⵠⵠΔᐃ: "img/day-skin79.png",
    ⵠⲆᐃΔⲆⲆⲆ: "img/night-skin79.png",
    ⵠⵠⵠᐃΔΔⲆ: "img/day-skin80.png",
    ᐃⵠΔΔⵠⵠⲆ: "img/night-skin80.png",
    ⵠΔΔⲆᐃΔᐃ: "img/day-skin81.png",
    ΔΔⲆⲆⵠΔΔ: "img/night-skin81.png",
    ⲆΔΔⵠⵠⲆᐃ: "img/day-skin82.png",
    ΔⵠⵠⵠⵠⵠΔ: "img/night-skin82.png",
    ᐃᐃΔᐃᐃⵠΔ: "img/day-skin83.png",
    ⵠᐃΔⲆᐃᐃΔ: "img/night-skin83.png",
    ᐃⵠᐃΔⵠⲆⲆ: "img/day-skin84.png",
    ᐃⲆᐃⲆⵠⵠᐃ: "img/night-skin84.png",
    ᐃᐃⲆᐃᐃⵠⵠ: "img/day-skin85.png",
    ⲆⵠᐃⲆⲆΔⲆ: "img/night-skin85.png",
    ⲆᐃᐃⲆΔΔΔ: "img/day-skin86.png",
    ⵠΔΔΔⲆᐃⵠ: "img/night-skin86.png",
    ⲆᐃΔᐃⵠⲆΔ: "img/day-skin87.png",
    ⲆⵠΔⲆⲆᐃⲆ: "img/night-skin87.png",
    ᐃⲆⵠⵠΔⵠᐃ: "img/day-skin88.png",
    ᐃᐃⲆᐃΔⲆⵠ: "img/night-skin88.png",
    ΔᐃⲆⵠⲆⵠⲆ: "img/day-skin89.png",
    ᐃⵠᐃΔⵠⵠⲆ: "img/night-skin89.png",
    ⵠΔⲆⲆᐃΔⲆ: "img/day-skin90.png",
    ΔΔⵠΔΔΔⵠ: "img/night-skin90.png",
    ⵠⵠⲆᐃᐃᐃⵠ: "img/day-skin91.png",
    ΔΔⲆΔⲆᐃⵠ: "img/night-skin91.png",
    ⵠⵠⲆⲆⲆΔᐃ: "img/day-skin92.png",
    ⲆΔᐃⵠΔΔᐃ: "img/night-skin92.png",
    ⵠⲆΔΔⲆᐃⵠ: "img/day-skin93.png",
    ⵠΔᐃᐃⵠΔⵠ: "img/night-skin93.png",
    ⲆⲆⲆᐃΔᐃⲆ: "img/day-skin94.png",
    ⵠⲆⲆΔⲆⵠᐃ: "img/night-skin94.png",
    ⵠⲆⲆᐃΔⲆΔ: "img/day-skin95.png",
    ΔΔᐃΔⵠΔⵠ: "img/night-skin95.png",
    ΔᐃⲆⲆΔⵠⵠ: "img/day-skin96.png",
    ⵠⲆΔᐃΔⲆᐃ: "img/night-skin96.png",
    ⵠᐃⲆᐃΔⲆⲆ: "img/day-skin97.png",
    ΔⲆΔⲆΔⲆⵠ: "img/night-skin97.png",
    ΔᐃⲆᐃΔΔᐃ: "img/day-skin98.png",
    ⲆΔⵠΔᐃΔⲆ: "img/night-skin98.png",
    ᐃᐃᐃⵠⲆᐃⲆ: "img/day-skin99.png",
    ⵠΔⵠᐃᐃΔΔ: "img/night-skin99.png",
    ᐃⲆⵠⲆⲆᐃΔ: "img/day-skin100.png",
    ΔⵠᐃⲆⲆΔⲆ: "img/night-skin100.png",
    ᐃⵠⲆᐃΔⲆⵠ: "img/day-skin101.png",
    ᐃᐃΔᐃⵠⵠΔ: "img/night-skin101.png",
    ⲆⲆⲆᐃⵠⵠⲆ: "img/day-skin102.png",
    ᐃᐃᐃⲆⲆΔΔ: "img/night-skin102.png",
    ΔᐃⲆⲆᐃΔⵠ: "img/day-skin103.png",
    ΔΔⲆⲆⵠᐃⲆ: "img/night-skin103.png",
    ΔⲆΔᐃⵠⵠⵠ: "img/day-skin104.png",
    ⵠⵠΔⲆⵠᐃⲆ: "img/night-skin104.png",
    ᐃⵠⲆᐃⲆΔᐃ: "img/day-skin105.png",
    ⵠᐃⲆⵠᐃΔⵠ: "img/night-skin105.png",
    ΔⵠᐃᐃⵠⲆⲆ: "img/day-skin106.png",
    ΔᐃᐃⲆⵠⲆⵠ: "img/night-skin106.png",
    ⲆⲆⲆⵠⵠⲆⲆ: "img/day-skin107.png",
    ⲆᐃᐃΔⵠⵠΔ: "img/night-skin107.png",
    ⲆⵠᐃⲆⵠᐃⵠ: "img/day-skin108.png",
    ΔⵠᐃⲆΔⵠΔ: "img/night-skin108.png",
    ΔⲆᐃⵠⲆⲆΔ: "img/day-skin109.png",
    ⵠᐃⵠⲆᐃⲆᐃ: "img/night-skin109.png",
    ᐃⲆⲆⲆᐃⲆΔ: "img/day-skin110.png",
    ⵠᐃΔⵠⵠⲆⲆ: "img/night-skin110.png",
    ⲆⲆΔⲆⵠᐃΔ: "img/day-skin111.png",
    ΔⵠΔᐃΔΔⲆ: "img/night-skin111.png",
    ⵠΔΔⵠⵠⵠΔ: "img/day-skin112.png",
    ⲆⲆΔΔⵠΔⵠ: "img/night-skin112.png",
    ⵠᐃⲆΔⵠⲆᐃᐃⲆ: "img/day-skin113.png",
    ᐃᐃⵠⲆᐃᐃΔⵠᐃ: "img/night-skin113.png",
    ΔᐃⵠΔᐃΔⵠ: "img/day-skin114.png",
    ⵠᐃΔⵠΔⵠⲆ: "img/night-skin114.png",
    ⲆΔΔᐃΔⵠᐃ: "img/day-skin115.png",
    ᐃΔⵠⲆⲆⵠΔ: "img/night-skin115.png",
    ᐃᐃⵠⲆⵠΔⲆ: "img/day-skin116.png",
    ᐃⵠⵠⲆΔⵠᐃ: "img/night-skin116.png",
    ⲆΔᐃⵠᐃⵠⲆ: "img/day-skin117.png",
    ᐃΔᐃⲆⵠⲆᐃ: "img/night-skin117.png",
    ΔΔΔΔᐃⲆᐃ: "img/day-skin118.png",
    ΔⵠⲆⲆⵠΔᐃ: "img/night-skin118.png",
    ⵠⵠΔⲆⲆᐃⵠ: "img/day-skin119.png",
    ⵠⲆᐃⲆⲆⲆᐃ: "img/night-skin119.png",
    ᐃΔⵠⲆⵠΔⵠ: "img/day-skin120.png",
    ᐃⵠⲆⵠΔᐃⲆ: "img/night-skin120.png",
    ΔᐃᐃᐃⵠΔᐃ: "img/day-skin121.png",
    ᐃᐃⲆΔΔΔᐃ: "img/night-skin121.png",
    ⵠⵠᐃⲆΔᐃⵠ: "img/day-skin122.png",
    ⵠΔⲆⵠⲆΔⵠ: "img/night-skin122.png",
    ᐃΔⲆⵠᐃΔᐃ: "img/day-skin123.png",
    ᐃᐃᐃΔⲆⲆᐃ: "img/night-skin123.png",
    ⲆᐃⵠᐃᐃᐃⲆ: "img/day-skin124.png",
    ⲆᐃⵠᐃⲆⵠⵠ: "img/night-skin124.png",
    ⲆⲆᐃⵠⵠⲆΔ: "img/day-skin125.png",
    ΔⲆⵠⵠΔΔΔ: "img/night-skin125.png",
    ΔΔᐃⵠⲆᐃⲆ: "img/day-skin126.png",
    ΔΔΔⲆᐃΔΔ: "img/night-skin126.png",
    ⲆΔⲆⲆⵠΔⵠ: "img/day-skin127.png",
    ⲆΔⲆⲆⵠᐃⲆ: "img/night-skin127.png",
    ⲆᐃΔΔΔΔᐃ: "img/day-skin128.png",
    ⵠⲆᐃᐃⵠΔᐃ: "img/night-skin128.png",
    ⵠⲆΔΔⲆⵠⲆ: "img/day-skin129.png",
    ΔⲆᐃᐃⵠᐃⲆ: "img/night-skin129.png",
    ⲆᐃΔⵠᐃΔⲆ: "img/day-skin130-1.png",
    ⵠⵠⵠΔᐃⵠᐃ: "img/night-skin130-1.png",
    ΔΔΔΔⵠᐃᐃ: "img/day-skin131.png",
    ΔᐃΔⲆᐃⲆⲆ: "img/night-skin131.png",
    ΔᐃⵠⲆⲆᐃⲆ: "img/day-skin132.png",
    ⵠⲆⵠᐃⲆΔⲆ: "img/night-skin132.png",
    ⵠᐃⵠᐃΔᐃΔ: "img/day-skin133.png",
    ⵠⵠᐃΔΔⵠⲆ: "img/night-skin133.png",
    ᐃΔᐃⵠⲆⵠⵠ: "img/day-skin134.png",
    ΔⲆⵠᐃⵠⵠΔ: "img/night-skin134.png",
    ⲆⲆᐃⵠⵠⵠΔ: "img/day-skin135.png",
    ⵠΔⵠᐃⵠᐃᐃ: "img/night-skin135.png",
    ⲆⵠⵠⲆᐃΔⲆ: "img/day-skin136.png",
    ΔΔΔᐃᐃⲆΔ: "img/night-skin136.png",
    ΔΔΔⲆΔⵠᐃ: "img/day-skin137.png",
    ⵠᐃⵠⲆⵠᐃᐃ: "img/night-skin137.png",
    ΔⵠᐃⲆⵠⵠⵠ: "img/day-skin138.png",
    ⲆᐃⵠⲆΔⲆⵠ: "img/night-skin138.png",
    ΔⲆⵠΔᐃᐃⲆ: "img/day-skin139.png",
    ⵠⵠⲆᐃⵠΔᐃ: "img/night-skin139.png",
    ⵠΔΔᐃΔⵠΔ: "img/day-skin140.png",
    ⵠⲆΔᐃᐃⵠΔ: "img/night-skin140.png",
    ⵠⵠᐃΔΔⵠⵠ: "img/day-skin141.png",
    ⲆΔⵠᐃⲆⲆΔ: "img/night-skin141.png",
    ΔᐃⲆⵠΔⵠⲆ: "img/day-skin142.png",
    ᐃΔⵠⵠⲆⵠᐃ: "img/night-skin142.png",
    ⵠⲆⵠⲆᐃⵠⲆ: "img/day-skin143.png",
    ΔᐃΔᐃΔⵠⲆ: "img/night-skin143.png",
    ΔⵠΔⵠᐃᐃᐃ: "img/day-skin144.png",
    ⵠⵠΔⲆⵠᐃᐃ: "img/night-skin144.png",
    ΔⲆⲆΔⲆⵠᐃ: "img/day-skin145.png",
    ⲆΔⵠⵠⲆⵠⲆ: "img/night-skin145.png",
    ⵠᐃΔᐃᐃⲆᐃ: "img/day-skin146.png",
    ⲆΔΔⵠⵠᐃⵠ: "img/night-skin146.png",
    ⵠΔΔΔᐃⵠᐃ: "img/day-skin147.png",
    ⵠΔᐃᐃΔᐃⲆ: "img/night-skin147.png",
    ⲆⲆⲆᐃⲆᐃΔ: "img/day-skin148.png",
    ⲆⵠΔᐃᐃᐃⵠ: "img/night-skin148.png",
    ⲆⲆⲆΔⵠᐃⵠ: "img/day-skin149.png",
    ⲆⲆⵠΔᐃΔⵠ: "img/night-skin149.png",
    ΔⲆΔⲆᐃΔΔ: "img/day-skin150.png",
    ΔΔⲆᐃⲆⵠⵠ: "img/night-skin150.png",
    ⵠᐃⵠΔᐃⵠᐃ: "img/day-hand-skin0.png",
    ᐃⵠᐃᐃΔΔⵠ: "img/night-hand-skin0.png",
    ⵠⲆⵠⲆⲆΔⵠ: "img/day-hand-skin1.png",
    ΔᐃⲆⲆᐃΔᐃ: "img/night-hand-skin1.png",
    ⲆΔᐃΔᐃΔⲆ: "img/day-hand-skin2.png",
    ᐃⲆΔΔΔⲆΔ: "img/night-hand-skin2.png",
    ⵠⲆⲆⵠΔⵠⵠ: "img/day-hand-skin3.png",
    ⲆᐃⵠΔᐃΔⵠ: "img/night-hand-skin3.png",
    ΔⵠⲆΔⲆᐃⵠ: "img/day-hand-skin4.png",
    ᐃᐃᐃΔᐃⵠΔ: "img/night-hand-skin4.png",
    ΔᐃΔⵠⲆΔⵠ: "img/day-hand-skin5.png",
    ᐃⲆⵠᐃΔⵠⲆ: "img/night-hand-skin5.png",
    ⵠⵠⵠⵠⵠΔΔ: "img/day-hand-skin6.png",
    ⵠⲆⲆΔᐃⵠⵠΔᐃ: "img/night-hand-skin6.png",
    ΔⲆⵠᐃⵠⵠⵠ: "img/day-hand-skin6.png",
    ᐃᐃΔⵠΔΔᐃ: "img/night-hand-skin6.png",
    ΔᐃᐃΔⵠⵠΔ: "img/day-hand-skin8.png",
    ⲆᐃⲆᐃⵠΔⲆ: "img/night-hand-skin8.png",
    ΔⵠΔⲆⲆⵠΔ: "img/day-hand-skin9.png",
    ΔⲆΔⵠΔΔᐃ: "img/night-hand-skin9.png",
    ᐃⲆᐃᐃⵠᐃΔ: "img/day-hand-skin10.png",
    ⵠⵠᐃᐃⲆⵠΔ: "img/night-hand-skin10.png",
    ᐃᐃΔΔⵠΔⵠ: "img/day-hand-skin11.png",
    ᐃⲆⲆᐃΔⲆⵠ: "img/night-hand-skin11.png",
    ᐃΔⲆΔΔⲆⵠ: "img/day-hand-skin12.png",
    ⵠΔᐃΔᐃⵠⲆ: "img/night-hand-skin12.png",
    ᐃⵠΔⲆᐃⵠΔ: "img/day-hand-skin13.png",
    ⵠⲆⵠᐃᐃⲆᐃ: "img/night-hand-skin13.png",
    ⲆⲆΔⵠⲆΔⲆ: "img/day-hand-skin14.png",
    ᐃᐃⲆᐃΔⵠⵠ: "img/night-hand-skin14.png",
    ᐃⵠᐃⵠⵠΔΔ: "img/day-hand-skin15.png",
    ᐃⵠⲆⵠⲆᐃⵠ: "img/night-hand-skin15.png",
    ᐃⲆⲆᐃᐃⲆΔ: "img/day-hand-skin16.png",
    ᐃΔⵠⵠΔⲆᐃ: "img/night-hand-skin16.png",
    ΔⵠⲆᐃⵠⲆΔ: "img/day-hand-skin17.png",
    ⵠⵠΔⵠᐃⲆΔ: "img/night-hand-skin17.png",
    ⵠⲆΔⲆᐃⲆⲆ: "img/day-hand-skin18.png",
    ⲆΔΔᐃⵠⵠΔ: "img/night-hand-skin18.png",
    ⵠᐃⲆΔΔⲆΔ: "img/day-hand-skin19.png",
    ᐃⲆⵠΔⲆΔⲆ: "img/night-hand-skin19.png",
    ⵠᐃᐃΔΔΔⵠ: "img/day-hand-skin20.png",
    ᐃⲆᐃⲆⵠⲆⵠ: "img/night-hand-skin20.png",
    ᐃⵠⵠᐃᐃᐃΔ: "img/day-hand-skin21.png",
    ⲆⵠⲆΔΔᐃⵠ: "img/night-hand-skin21.png",
    ΔⲆⲆⵠⲆΔⵠ: "img/day-hand-skin22.png",
    ΔⲆᐃΔᐃⵠΔ: "img/night-hand-skin22.png",
    ⲆⲆᐃⵠⲆⵠⵠ: "img/day-hand-skin23.png",
    ᐃⵠⲆⵠⲆᐃⲆ: "img/night-hand-skin23.png",
    ⲆᐃΔΔΔⲆⵠ: "img/day-hand-skin24.png",
    ⲆⲆⵠⵠΔⵠⲆ: "img/night-hand-skin24.png",
    ⲆⲆᐃΔⲆⵠΔ: "img/day-hand-skin25.png",
    ᐃᐃⵠΔⲆⲆΔ: "img/night-hand-skin25.png",
    ΔᐃᐃᐃΔⲆⲆ: "img/day-hand-skin26.png",
    ⵠᐃⲆᐃⲆⲆⵠ: "img/night-hand-skin26.png",
    ΔⵠⲆΔᐃᐃᐃ: "img/day-hand-skin27.png",
    ⵠΔᐃⲆⵠᐃⵠ: "img/night-hand-skin27.png",
    ⲆΔᐃᐃⵠᐃⵠ: "img/day-hand-skin28.png",
    ΔᐃⲆᐃΔⵠᐃ: "img/night-hand-skin28.png",
    ⵠΔⵠⵠⵠⲆᐃ: "img/day-hand-skin29.png",
    ⵠΔᐃᐃᐃᐃⵠ: "img/night-hand-skin29.png",
    ᐃΔⲆᐃΔᐃⵠ: "img/day-hand-skin30.png",
    ΔⲆⲆⵠⲆⲆᐃ: "img/night-hand-skin30.png",
    ΔᐃⵠⵠⲆⲆᐃ: "img/day-hand-skin31.png",
    ΔⲆⲆⲆΔᐃΔ: "img/night-hand-skin31.png",
    ⵠⲆᐃⲆᐃᐃΔ: "img/day-hand-skin32.png",
    ᐃᐃΔⵠⵠᐃᐃ: "img/night-hand-skin32.png",
    ⲆΔⵠᐃΔΔⵠ: "img/day-hand-skin33.png",
    ⲆΔΔⲆΔⵠᐃ: "img/night-hand-skin33.png",
    ⲆΔᐃΔᐃⵠⲆ: "img/day-hand-skin34.png",
    ΔᐃⵠᐃᐃⲆⲆ: "img/night-hand-skin34.png",
    ΔⵠⵠΔⲆᐃⲆ: "img/day-hand-skin35.png",
    Δᐃⵠⵠᐃᐃᐃ: "img/night-hand-skin35.png",
    ⵠΔᐃⵠΔⵠⲆ: "img/day-hand-skin36.png",
    ΔⵠⵠᐃᐃⵠΔ: "img/night-hand-skin36.png",
    ⵠᐃⲆⲆⵠⲆᐃ: "img/day-hand-skin37.png",
    ΔⵠⵠΔⲆⲆⲆ: "img/night-hand-skin37.png",
    ⵠΔᐃⲆⲆΔΔ: "img/day-hand-skin38.png",
    ᐃⵠᐃΔⲆᐃΔ: "img/night-hand-skin38.png",
    ⲆⵠⵠᐃⵠⲆⲆ: "img/day-hand-skin39.png",
    ᐃΔΔᐃⵠⵠⲆ: "img/night-hand-skin39.png",
    ΔⵠⵠⲆΔΔⲆ: "img/day-hand-skin40.png",
    ΔⲆΔⵠᐃΔⲆ: "img/night-hand-skin40.png",
    ᐃᐃⲆⵠⵠⲆⵠ: "img/day-hand-skin41.png",
    ΔᐃⲆⵠΔⲆᐃ: "img/night-hand-skin41.png",
    ΔⲆΔⲆⵠⲆⵠ: "img/day-hand-skin42.png",
    ⲆⲆⵠΔⵠΔᐃ: "img/night-hand-skin42.png",
    ᐃⵠⵠⲆΔⲆᐃ: "img/day-hand-skin43.png",
    ΔᐃᐃⵠΔⲆⵠ: "img/night-hand-skin43.png",
    ᐃⵠΔⲆⵠᐃᐃ: "img/day-hand-skin16.png",
    Δᐃⵠᐃⵠⵠⵠ: "img/night-hand-skin16.png",
    ⲆⲆΔⵠᐃⵠΔ: "img/day-hand-skin45.png",
    ΔᐃⲆⲆⵠⵠⵠ: "img/night-hand-skin45.png",
    ⲆᐃΔᐃᐃⵠⵠ: "img/day-hand-skin46.png",
    ⵠⵠᐃⵠΔΔⲆ: "img/night-hand-skin46.png",
    ΔΔΔᐃΔⵠⲆ: "img/day-hand-skin47.png",
    ᐃΔⲆᐃᐃΔⲆ: "img/night-hand-skin47.png",
    ⵠⲆΔΔⵠΔᐃ: "img/day-hand-skin48.png",
    ⲆΔᐃᐃⵠᐃᐃ: "img/night-hand-skin48.png",
    ᐃΔΔᐃⵠⵠΔ: "img/day-hand-skin49.png",
    ⵠΔᐃⵠᐃⵠᐃ: "img/night-hand-skin49.png",
    ΔⲆᐃᐃⲆΔΔ: "img/day-hand-skin49.png",
    ⲆⲆⵠⲆⲆΔΔ: "img/night-hand-skin49.png",
    ⲆⲆⵠᐃΔΔᐃ: "img/day-hand-skin51.png",
    ⲆᐃⵠⵠᐃᐃⲆ: "img/night-hand-skin51.png",
    ⲆΔᐃΔⲆΔᐃ: "img/day-hand-skin52.png",
    ⲆΔⵠⵠᐃⲆⲆ: "img/night-hand-skin52.png",
    ΔⵠᐃⲆⲆⵠᐃ: "img/day-hand-skin53.png",
    ᐃΔⲆⵠⵠΔⵠ: "img/night-hand-skin53.png",
    ΔⲆⲆⵠⲆᐃⵠ: "img/day-hand-skin53.png",
    ΔᐃⵠⵠΔᐃΔ: "img/night-hand-skin53.png",
    ⵠⵠΔᐃᐃΔⲆ: "img/day-hand-skin55.png",
    ⲆⵠⲆⲆᐃⵠΔ: "img/night-hand-skin55.png",
    ΔⲆᐃⵠⵠⲆΔ: "img/day-hand-skin56.png",
    ᐃΔᐃⵠΔⵠᐃ: "img/night-hand-skin56.png",
    ⲆᐃᐃΔᐃⲆⲆ: "img/day-hand-skin57.png",
    ᐃᐃᐃᐃⵠᐃΔ: "img/night-hand-skin57.png",
    ᐃΔⲆΔⲆⲆⵠ: "img/day-hand-skin58.png",
    ᐃᐃⲆΔⵠᐃⵠ: "img/night-hand-skin58.png",
    ⵠⲆᐃᐃⵠᐃΔ: "img/day-hand-skin59.png",
    ΔᐃᐃΔᐃΔΔ: "img/night-hand-skin59.png",
    ᐃᐃⵠΔᐃΔΔ: "img/day-hand-skin61.png",
    ⵠⵠⵠᐃⲆΔᐃ: "img/night-hand-skin61.png",
    ᐃⲆΔⲆᐃΔⵠ: "img/day-hand-skin61.png",
    ᐃⲆⲆⲆᐃᐃⵠ: "img/night-hand-skin61.png",
    ⲆⲆᐃᐃⲆΔΔ: "img/day-hand-skin62.png",
    ⵠⲆⲆΔᐃⲆⵠ: "img/night-hand-skin62.png",
    ᐃᐃⲆⵠΔⵠⵠ: "img/day-hand-skin63.png",
    ⲆΔⲆᐃⲆΔΔ: "img/night-hand-skin63.png",
    ΔⵠⲆⵠⲆΔᐃ: "img/day-hand-skin64.png",
    ΔᐃⵠⲆⲆΔⵠ: "img/night-hand-skin64.png",
    ⲆΔⲆⲆᐃⲆⲆ: "img/day-hand-skin65.png",
    ⵠⲆᐃᐃⵠᐃᐃ: "img/night-hand-skin65.png",
    ᐃⵠΔᐃⵠᐃⵠ: "img/day-hand-skin66.png",
    ᐃΔⵠᐃⲆⵠᐃ: "img/night-hand-skin66.png",
    ⵠᐃⲆⵠⵠᐃⲆ: "img/day-hand-skin67.png",
    ⲆᐃᐃΔⲆⲆΔ: "img/night-hand-skin67.png",
    ⲆⲆⵠⵠΔⲆΔ: "img/day-hand-skin68.png",
    ΔᐃᐃΔΔΔⲆ: "img/night-hand-skin68.png",
    ⵠΔⲆⲆΔⵠᐃ: "img/day-hand-skin69.png",
    ⵠⲆΔⲆⵠΔᐃ: "img/night-hand-skin69.png",
    ⲆΔⲆΔⲆΔⲆ: "img/day-hand-skin70.png",
    ΔⵠΔⵠⵠΔⲆ: "img/night-hand-skin70.png",
    ⲆᐃⲆⵠⲆΔⲆ: "img/day-hand-skin71.png",
    ⵠⵠⲆΔⵠΔᐃ: "img/night-hand-skin71.png",
    ᐃᐃᐃΔⲆⲆΔ: "img/day-hand-skin72.png",
    ΔⲆⵠⲆⵠⵠⵠ: "img/night-hand-skin72.png",
    ΔⵠΔᐃⲆΔⲆ: "img/day-hand-skin73.png",
    ΔΔⲆΔᐃΔⵠ: "img/night-hand-skin73.png",
    ⵠΔΔΔΔᐃΔ: "img/day-hand-skin74.png",
    ⲆΔᐃⲆᐃⲆΔ: "img/night-hand-skin74.png",
    ⵠⵠᐃᐃⵠⵠⵠ: "img/day-hand-skin75.png",
    ⲆᐃᐃᐃⲆⵠⵠ: "img/night-hand-skin75.png",
    ᐃΔΔⲆΔΔⵠ: "img/day-hand-skin76.png",
    ⵠⲆⲆⲆⲆᐃⲆ: "img/night-hand-skin76.png",
    ᐃⲆⲆᐃΔⵠⲆ: "img/day-hand-skin77.png",
    ⲆⲆᐃΔⵠΔΔ: "img/night-hand-skin77.png",
    ⵠⵠⵠᐃⲆⵠⵠ: "img/day-hand-skin78.png",
    ⲆⲆⵠⵠᐃΔΔ: "img/night-hand-skin78.png",
    ⵠΔⵠⵠⵠᐃΔ: "img/day-hand-skin79.png",
    ⵠⲆⲆⵠⲆⲆⵠ: "img/night-hand-skin79.png",
    ⲆᐃᐃⵠⵠᐃΔ: "img/day-hand-skin80.png",
    ᐃⵠΔᐃΔΔᐃ: "img/night-hand-skin80.png",
    ΔⲆⲆΔⲆⲆΔ: "img/day-hand-skin81.png",
    ⲆⲆⲆΔⵠⲆⲆ: "img/night-hand-skin81.png",
    ᐃⲆⵠⵠΔⲆᐃ: "img/day-hand-skin82.png",
    ⲆⵠΔⵠⵠΔᐃ: "img/night-hand-skin82.png",
    ⲆⵠⲆᐃᐃᐃᐃ: "img/day-hand-skin83.png",
    ⵠΔⵠⵠⲆΔⵠ: "img/night-hand-skin83.png",
    ⲆⵠᐃⵠΔⵠΔ: "img/day-hand-skin84.png",
    ΔΔⵠⵠⵠⵠⵠ: "img/night-hand-skin84.png",
    ΔⵠᐃΔᐃᐃⲆ: "img/day-hand-skin85.png",
    ⲆⲆΔΔᐃΔΔ: "img/night-hand-skin85.png",
    ᐃⵠΔΔΔᐃⲆ: "img/day-hand-skin86.png",
    ⵠⵠⵠΔΔΔⲆ: "img/night-hand-skin86.png",
    ⲆⲆᐃⵠΔⲆΔ: "img/day-hand-skin87.png",
    ⲆΔⵠⲆⵠⲆⵠ: "img/night-hand-skin87.png",
    ΔⲆᐃⲆΔᐃⵠ: "img/day-hand-skin88.png",
    ⲆΔᐃⵠᐃᐃⵠ: "img/night-hand-skin88.png",
    ᐃⲆⵠΔⵠΔⲆ: "img/day-hand-skin89.png",
    ⵠⵠᐃⲆⲆΔⵠ: "img/night-hand-skin89.png",
    ⵠⲆⵠΔᐃⲆⵠ: "img/day-hand-skin90.png",
    ⵠᐃⵠⲆΔⲆⵠ: "img/night-hand-skin90.png",
    ᐃᐃⵠⵠⵠⵠᐃ: "img/day-hand-skin91.png",
    ⵠᐃⵠⲆⵠⲆᐃ: "img/night-hand-skin91.png",
    ᐃⲆΔΔⲆⵠᐃ: "img/day-hand-skin92.png",
    ᐃⵠΔᐃΔⵠᐃ: "img/night-hand-skin92.png",
    ⲆⵠᐃⵠᐃⲆᐃ: "img/day-hand-skin93.png",
    ⲆⲆⵠⲆᐃⵠΔ: "img/night-hand-skin93.png",
    ΔᐃΔᐃⵠⵠᐃ: "img/day-hand-skin94.png",
    ΔⵠⵠᐃⵠⵠⲆ: "img/night-hand-skin94.png",
    ⲆⲆΔΔΔⵠⲆ: "img/day-hand-skin95.png",
    ⵠᐃᐃⵠᐃΔΔ: "img/night-hand-skin95.png",
    ⵠⵠᐃΔᐃⵠⵠ: "img/day-hand-skin96.png",
    ⲆᐃⵠΔⲆⵠⲆ: "img/night-hand-skin96.png",
    ᐃⲆⵠΔᐃⲆᐃ: "img/day-hand-skin97.png",
    ΔⲆᐃⲆΔⵠΔ: "img/night-hand-skin97.png",
    ΔⵠⵠⲆⲆⲆΔ: "img/day-hand-skin98.png",
    ΔⵠᐃⲆᐃⲆⵠ: "img/night-hand-skin98.png",
    ΔⵠⵠⲆΔᐃⲆ: "img/day-hand-skin99.png",
    ⵠΔⲆⵠⲆⲆΔ: "img/night-hand-skin99.png",
    ΔΔⵠⲆⲆᐃᐃ: "img/day-hand-skin100.png",
    ΔΔᐃⲆⲆⲆΔ: "img/night-hand-skin100.png",
    ⵠⲆΔΔᐃΔᐃ: "img/day-hand-skin101.png",
    ⵠⲆᐃᐃᐃᐃⵠ: "img/night-hand-skin101.png",
    ΔⲆⲆΔⲆᐃΔ: "img/day-hand-skin102.png",
    ⲆⲆⵠⲆΔΔⲆ: "img/night-hand-skin102.png",
    ᐃΔⵠⵠⵠᐃΔ: "img/day-hand-skin103.png",
    ΔᐃᐃΔⵠⲆΔ: "img/night-hand-skin103.png",
    ⵠΔⲆⲆⵠⲆΔ: "img/day-hand-skin104.png",
    ΔᐃΔᐃΔΔᐃ: "img/night-hand-skin104.png",
    ⲆᐃΔΔᐃⵠⲆ: "img/day-hand-skin105.png",
    ⵠΔᐃΔⲆⵠᐃ: "img/night-hand-skin105.png",
    ⲆⲆⲆΔⲆΔⵠ: "img/day-hand-skin106.png",
    ΔⵠᐃᐃΔᐃᐃ: "img/night-hand-skin106.png",
    Δᐃᐃⵠᐃⵠⵠ: "img/day-hand-skin107.png",
    ΔⵠⲆⲆᐃᐃⵠ: "img/night-hand-skin107.png",
    ⵠⲆΔΔΔΔⵠ: "img/day-hand-skin108.png",
    ⲆΔᐃᐃⵠⵠⵠ: "img/night-hand-skin108.png",
    ⲆᐃᐃⵠⵠᐃⲆ: "img/day-hand-skin109.png",
    ᐃⵠⵠᐃⲆⲆᐃ: "img/night-hand-skin109.png",
    ΔᐃᐃᐃⲆⵠᐃ: "img/day-hand-skin110.png",
    ⵠⲆⵠⲆᐃΔᐃ: "img/night-hand-skin110.png",
    ᐃⲆᐃⲆⵠⵠⵠ: "img/day-hand-skin111.png",
    ᐃᐃⵠΔⲆΔⵠ: "img/night-hand-skin111.png",
    ᐃΔᐃⵠⵠⵠΔ: "img/day-hand-skin112.png",
    ⵠΔΔⲆᐃᐃᐃ: "img/night-hand-skin112.png",
    ⵠᐃⲆᐃᐃⲆΔⵠΔ: "img/day-hand-skin113.png",
    ΔⵠⵠⲆΔⲆⵠⲆᐃ: "img/night-hand-skin113.png",
    ⲆᐃⵠⵠᐃΔⵠ: "img/day-hand-skin114.png",
    ⵠⵠᐃⲆΔⵠⵠ: "img/night-hand-skin114.png",
    ⲆΔⵠⲆΔⲆⲆ: "img/day-hand-skin115.png",
    ΔⵠⵠᐃΔΔⲆ: "img/night-hand-skin115.png",
    ⵠΔⵠᐃΔⵠⲆ: "img/day-hand-skin116.png",
    ⵠⲆⵠⲆᐃΔⲆ: "img/night-hand-skin116.png",
    ⲆⵠⲆᐃⲆⲆΔ: "img/day-hand-skin117.png",
    ⵠⵠⲆᐃⵠⵠᐃ: "img/night-hand-skin117.png",
    ᐃΔΔΔΔΔⵠ: "img/day-hand-skin118.png",
    ⵠᐃⵠΔΔⲆΔ: "img/night-hand-skin118.png",
    ᐃᐃⵠΔⲆⵠⵠ: "img/day-hand-skin119.png",
    ᐃΔⵠⲆⲆΔΔ: "img/night-hand-skin119.png",
    ⲆᐃΔⵠⵠⲆⲆ: "img/day-hand-skin120.png",
    ⲆⵠⵠⲆᐃⲆⲆ: "img/night-hand-skin120.png",
    ⵠᐃⵠΔΔᐃΔ: "img/day-hand-skin122.png",
    ᐃⵠⲆᐃⵠⲆᐃ: "img/night-hand-skin122.png",
    ⵠΔᐃΔΔΔⵠ: "img/day-hand-skin122.png",
    ΔᐃⲆΔⲆΔⵠ: "img/night-hand-skin122.png",
    ⵠΔᐃⵠΔΔⲆ: "img/day-hand-skin122.png",
    ⵠⲆⵠᐃⲆⵠᐃ: "img/night-hand-skin122.png",
    ⲆⵠᐃΔΔᐃⵠ: "img/day-hand-skin124.png",
    ᐃⵠⵠⲆΔⲆⵠ: "img/night-hand-skin124.png",
    ΔᐃⵠΔⲆⲆΔ: "img/day-hand-skin125.png",
    ⲆΔΔᐃⲆᐃΔ: "img/night-hand-skin125.png",
    ⲆΔⲆⲆΔΔⵠ: "img/day-hand-skin126.png",
    ΔΔΔΔΔⵠᐃ: "img/night-hand-skin126.png",
    ⵠⲆᐃⵠΔΔΔ: "img/day-hand-skin127.png",
    ᐃΔⵠⵠⲆΔⲆ: "img/night-hand-skin127.png",
    ΔⲆⲆⵠᐃᐃⲆ: "img/day-hand-skin128.png",
    ⵠⲆⲆᐃⵠᐃᐃ: "img/night-hand-skin128.png",
    ΔᐃᐃΔⲆᐃⵠ: "img/day-hand-skin129.png",
    ᐃⵠⵠⵠᐃⲆⵠ: "img/night-hand-skin129.png",
    ⵠΔΔΔⵠⵠΔ: "img/day-hand-skin130.png",
    ᐃⵠⲆᐃⵠⲆⵠ: "img/night-hand-skin130.png",
    ⲆⲆᐃⵠⵠⵠⲆ: "img/day-hand-skin131.png",
    ⲆΔⵠᐃᐃᐃᐃ: "img/night-hand-skin131.png",
    ΔⲆⵠᐃᐃⲆⲆ: "img/day-hand-skin130.png",
    ⲆⵠΔΔΔΔⲆ: "img/night-hand-skin130.png",
    ⵠⵠⵠΔᐃΔΔ: "img/day-hand-skin133.png",
    ᐃᐃⵠⵠᐃⵠΔ: "img/night-hand-skin133.png",
    ⲆᐃⵠⵠⵠⲆΔ: "img/day-hand-skin134.png",
    ΔⲆⲆⲆⲆⲆⲆ: "img/night-hand-skin134.png",
    ΔⵠⲆⵠΔⵠᐃ: "img/day-hand-skin135.png",
    ᐃᐃⵠⵠⲆΔⵠ: "img/night-hand-skin135.png",
    ⵠⲆⲆΔΔΔⵠ: "img/day-hand-skin136.png",
    ⵠΔⲆⲆⵠΔᐃ: "img/night-hand-skin136.png",
    ⵠΔⲆΔⲆⵠΔ: "img/day-hand-skin137.png",
    ΔⵠⵠⵠᐃⵠⲆ: "img/night-hand-skin137.png",
    Δⵠⵠᐃᐃᐃⵠ: "img/day-hand-skin138.png",
    Δⵠⵠᐃᐃᐃᐃ: "img/night-hand-skin138.png",
    ⲆΔⵠΔᐃⲆᐃ: "img/day-hand-skin139.png",
    ⵠΔΔᐃⵠⵠⲆ: "img/night-hand-skin139.png",
    ⲆΔⲆⵠᐃᐃᐃ: "img/day-hand-skin140.png",
    ΔⵠΔⵠⵠⵠᐃ: "img/night-hand-skin140.png",
    ⵠᐃΔᐃⵠⲆⲆ: "img/day-hand-skin141.png",
    ΔΔΔΔᐃΔΔ: "img/night-hand-skin141.png",
    ᐃΔΔⲆⲆΔᐃ: "img/day-hand-skin142.png",
    ⵠⵠⵠᐃΔⲆᐃ: "img/night-hand-skin142.png",
    ᐃᐃⵠⵠⵠᐃᐃ: "img/day-hand-skin143.png",
    ᐃᐃΔⲆⵠⵠᐃ: "img/night-hand-skin143.png",
    ᐃⲆΔⲆⵠⲆⲆ: "img/day-hand-skin144.png",
    ΔⵠᐃᐃΔⵠΔ: "img/night-hand-skin144.png",
    ΔΔⲆΔⲆΔΔ: "img/day-hand-skin145.png",
    ΔⲆΔⵠⵠⲆⲆ: "img/night-hand-skin145.png",
    ΔΔⲆⵠᐃᐃᐃ: "img/day-hand-skin146.png",
    ⵠᐃⲆᐃⲆⵠΔ: "img/night-hand-skin146.png",
    ⵠᐃⲆᐃᐃⵠⲆ: "img/day-hand-skin147.png",
    ⵠΔⵠΔᐃⵠᐃ: "img/night-hand-skin147.png",
    ᐃⵠᐃⵠⲆΔᐃ: "img/day-hand-skin148.png",
    ⲆΔᐃᐃⲆΔᐃ: "img/night-hand-skin148.png",
    ᐃΔⲆⲆΔⲆⲆ: "img/day-hand-skin149.png",
    ⲆᐃΔᐃⲆⵠΔ: "img/night-hand-skin149.png",
    ᐃⵠΔᐃⲆΔⵠ: "img/day-hand-skin150.png",
    ᐃᐃΔⵠᐃⵠΔ: "img/night-hand-skin150.png",
    ⵠⵠⵠⲆΔⵠⲆ: "img/day-bag-star0.png",
    ⲆΔⵠⵠᐃᐃᐃ: "img/night-bag-star0.png",
    ᐃΔᐃⲆⵠΔΔ: "img/day-bag0.png",
    ⲆⵠᐃⵠᐃⲆΔ: "img/night-bag0.png",
    ⵠΔⵠⲆⲆⲆⵠ: "img/day-bag1.png",
    ⵠⵠᐃⲆⲆΔⲆ: "img/night-bag1.png",
    ᐃⲆΔⵠᐃᐃⲆ: "img/day-bag2.png",
    ⲆᐃᐃⲆⵠⲆΔ: "img/night-bag2.png",
    ⵠⲆΔΔᐃᐃⲆ: "img/day-bag3.png",
    ⵠⲆⲆⲆᐃⵠᐃ: "img/night-bag3.png",
    ⵠⲆΔⵠⵠⲆⲆ: "img/day-bag4.png",
    ᐃⲆⵠᐃᐃΔⵠ: "img/night-bag4.png",
    ᐃⲆⵠᐃⲆⲆⲆ: "img/day-bag5.png",
    ⲆⲆΔΔⵠΔΔ: "img/night-bag5.png",
    ΔᐃⲆⲆⵠᐃᐃ: "img/day-bag6.png",
    ΔΔΔⵠΔⲆᐃ: "img/night-bag6.png",
    ᐃᐃΔᐃⲆⲆⵠ: "img/day-bag7.png",
    ⵠⲆⲆΔⵠΔⵠ: "img/night-bag7.png",
    ᐃⵠⵠΔⵠᐃⵠ: "img/day-bag8.png",
    ⲆᐃΔⵠⲆⲆᐃ: "img/night-bag8.png",
    ΔΔᐃⲆⵠⵠᐃ: "img/day-bag9.png",
    ⵠⵠⵠΔᐃⲆⲆ: "img/night-bag9.png",
    ⵠⵠΔᐃⲆᐃᐃ: "img/day-bag10.png",
    ⲆᐃΔⵠⵠⲆᐃ: "img/night-bag10.png",
    ΔᐃⵠᐃᐃⵠΔ: "img/day-bag11.png",
    ⲆΔⲆⵠⲆⲆᐃ: "img/night-bag11.png",
    ΔΔᐃᐃⲆⲆᐃ: "img/day-bag13.png",
    ᐃᐃᐃᐃΔᐃⵠ: "img/night-bag13.png",
    ΔⲆᐃⵠⵠⲆⲆ: "img/day-bag14.png",
    ⲆⲆΔΔⵠⵠΔ: "img/night-bag14.png",
    ΔⵠⲆⵠᐃⵠᐃ: "img/day-bag16.png",
    ΔⲆΔᐃΔⲆⲆ: "img/night-bag16.png",
    ΔᐃⲆⲆⵠΔΔ: "img/day-bag17.png",
    ⲆᐃᐃΔᐃΔᐃ: "img/night-bag17.png",
    ΔΔⲆΔΔᐃⲆ: "img/day-bag18.png",
    ⵠⵠⲆΔΔᐃⲆ: "img/night-bag18.png",
    ⲆⵠⲆⵠᐃΔΔ: "img/day-bag19.png",
    ΔⲆΔᐃᐃⲆⲆ: "img/night-bag19.png",
    ⵠᐃᐃⲆᐃⲆΔ: "img/day-bag20.png",
    Δⵠⵠⵠⵠᐃᐃ: "img/night-bag20.png",
    ⲆΔᐃΔᐃⵠⵠ: "img/day-bag21.png",
    ΔⵠᐃᐃⵠⲆᐃ: "img/night-bag21.png",
    ᐃⵠΔⲆᐃΔⵠ: "img/day-bag22.png",
    ΔΔⵠⵠΔⵠΔ: "img/night-bag22.png",
    ᐃⲆΔΔⵠΔⲆ: "img/day-bag23.png",
    ᐃⵠΔᐃᐃⲆⲆ: "img/night-bag23.png",
    ⵠⵠΔⵠⵠⲆⵠ: "img/day-bag24.png",
    ᐃⲆΔΔᐃⲆⲆ: "img/night-bag24.png",
    ⵠⵠⲆᐃⵠⵠⵠ: "img/day-bag25.png",
    ⲆⵠᐃΔΔΔΔ: "img/night-bag25.png",
    ΔⵠⲆⵠΔⲆΔ: "img/day-bag26.png",
    ⲆΔᐃᐃᐃΔᐃ: "img/night-bag26.png",
    ⲆᐃⵠⵠΔⵠⵠ: "img/day-bag27.png",
    ᐃⲆⵠⵠΔᐃⵠ: "img/night-bag27.png",
    ⲆΔᐃΔΔⲆⵠ: "img/day-bag28.png",
    ΔᐃΔΔⲆᐃⲆ: "img/night-bag28.png",
    ⲆⵠΔⵠⵠΔΔ: "img/day-bag29.png",
    ⲆΔⵠⲆⲆⲆΔ: "img/night-bag29.png",
    ΔΔΔⲆᐃΔⵠ: "img/day-bag30.png",
    ΔΔⵠⲆⵠⲆΔ: "img/night-bag30.png",
    ⲆⵠΔΔⲆⵠΔ: "img/day-bag31.png",
    ᐃⵠⵠⵠⵠⲆⵠ: "img/night-bag31.png",
    ⲆⲆΔᐃⲆΔⵠ: "img/day-bag32.png",
    ⵠΔⵠⲆᐃⵠⵠ: "img/night-bag32.png",
    ᐃᐃⵠⵠⵠⲆΔ: "img/day-bag33.png",
    ΔᐃⲆⲆΔᐃⵠ: "img/night-bag33.png",
    ⲆΔᐃΔᐃⲆⲆ: "img/day-bag34.png",
    ΔΔⲆΔⵠᐃⲆ: "img/night-bag34.png",
    ⲆⵠⲆⲆⲆᐃᐃ: "img/day-bag35.png",
    ΔᐃⵠᐃⲆⵠΔ: "img/night-bag35.png",
    ⲆⲆΔⲆⲆⵠΔ: "img/day-bag36.png",
    ᐃᐃᐃⲆⲆⲆⵠ: "img/night-bag36.png",
    ΔⲆΔᐃᐃⵠⵠ: "img/day-bag37.png",
    ΔⲆΔⵠΔΔΔ: "img/night-bag37.png",
    ⵠΔⵠΔⵠΔΔ: "img/day-bag38.png",
    ⲆᐃᐃᐃⲆⵠᐃ: "img/night-bag38.png",
    ΔᐃΔᐃⲆⲆΔ: "img/day-bag39.png",
    ⲆⲆΔⵠΔⵠⵠ: "img/night-bag39.png",
    ⲆⲆᐃⲆΔᐃⲆ: "img/day-bag40.png",
    ⵠⵠⲆΔⲆΔΔ: "img/night-bag40.png",
    ᐃⵠⵠᐃⲆⵠⵠ: "img/day-bag41.png",
    ⵠᐃⵠⲆⲆΔⲆ: "img/night-bag41.png",
    ⲆᐃⵠΔⵠΔᐃ: "img/day-bag42.png",
    ⵠΔΔⵠᐃᐃⵠ: "img/night-bag42.png",
    ᐃⲆⵠⲆᐃⵠⲆ: "img/day-bag43.png",
    ⵠᐃΔᐃⲆΔⵠ: "img/night-bag43.png",
    ⲆΔΔᐃⲆΔᐃ: "img/day-bag44.png",
    ᐃⵠⲆⵠΔᐃΔ: "img/night-bag44.png",
    ᐃΔΔⵠⲆΔⲆ: "img/day-bag45.png",
    ⵠⵠⵠΔⲆⵠⵠ: "img/night-bag45.png",
    ᐃΔᐃᐃⵠⲆⵠ: "img/day-bag46.png",
    ⲆⲆⲆⲆⲆⲆⲆ: "img/night-bag46.png",
    ⵠⵠⲆᐃᐃⵠΔ: "img/day-bag47.png",
    ᐃⲆΔᐃⵠⵠⵠ: "img/night-bag47.png",
    ⵠⲆΔΔᐃⵠⲆ: "img/day-bag48.png",
    ⵠᐃⵠⲆΔⵠⲆ: "img/night-bag48.png",
    ᐃⲆⵠⲆᐃΔᐃ: "img/day-bag49.png",
    ⵠΔⵠⲆⵠⲆⵠ: "img/night-bag49.png",
    ⵠⲆⵠᐃⵠⲆⲆ: "img/day-bag50.png",
    ᐃΔΔⵠᐃⵠΔ: "img/night-bag50.png",
    ᐃⵠⵠΔⲆΔΔ: "img/day-bag51.png",
    ⵠΔⲆⵠⵠΔⲆ: "img/night-bag51.png",
    ⵠⵠⲆᐃᐃⵠⲆ: "img/day-bag52.png",
    ΔⲆⲆⵠᐃⵠⲆ: "img/night-bag52.png",
    ⵠⵠΔⲆΔΔⲆ: "img/day-bag53.png",
    ᐃΔΔⲆᐃⵠᐃ: "img/night-bag53.png",
    ⵠΔⵠΔⵠⵠΔ: "img/day-bag54.png",
    ΔΔΔⵠⵠⵠᐃ: "img/night-bag54.png",
    ⵠΔⲆᐃⲆⵠΔ: "img/day-bag55.png",
    ΔⲆⲆⲆΔⲆᐃ: "img/night-bag55.png",
    ⲆⲆⵠⲆΔⵠⲆ: "img/day-bag56.png",
    ΔⲆⲆΔΔⲆⵠ: "img/night-bag56.png",
    ΔⲆΔᐃⲆΔⲆ: "img/day-bag57.png",
    ΔᐃⵠᐃΔⵠⵠ: "img/night-bag57.png",
    ⲆⲆᐃΔΔΔᐃ: "img/day-bag58.png",
    ᐃⵠΔⵠᐃⵠⲆ: "img/night-bag58.png",
    ΔⲆⵠⵠΔΔᐃ: "img/day-bag59.png",
    ⵠΔⵠᐃⲆⲆⲆ: "img/night-bag59.png",
    ⵠⵠⲆⲆᐃⵠⵠ: "img/day-bag60.png",
    ⲆⲆᐃⲆⲆΔΔ: "img/night-bag60.png",
    ΔᐃΔᐃΔΔⵠ: "img/day-bag61.png",
    ⲆⵠΔⵠⵠΔⵠ: "img/night-bag61.png",
    ⲆΔⵠⲆᐃⵠⵠ: "img/day-bag62.png",
    ⲆΔΔⵠⲆⵠᐃ: "img/night-bag62.png",
    ⲆᐃᐃΔⵠⵠᐃ: "img/day-bag63.png",
    ΔⲆᐃᐃⵠⲆΔ: "img/night-bag63.png",
    ⵠΔΔⵠΔᐃᐃ: "img/day-bag64.png",
    ΔᐃⲆᐃᐃⵠⲆ: "img/night-bag64.png",
    ⲆᐃⵠⲆΔΔⵠ: "img/day-bag65.png",
    ᐃⲆᐃⵠᐃⵠΔ: "img/night-bag65.png",
    ΔᐃⵠⵠⲆⵠᐃ: "img/day-bag66.png",
    ᐃⵠⵠᐃⵠⲆΔ: "img/night-bag66.png",
    ᐃΔΔᐃⲆⲆΔ: "img/day-bag67.png",
    ⲆⵠΔΔΔⲆⲆ: "img/night-bag67.png",
    ⲆⲆⵠᐃⵠⲆΔ: "img/day-bag68.png",
    ᐃΔΔΔᐃⵠⵠ: "img/night-bag68.png",
    ⵠⵠΔᐃΔⲆⲆ: "img/day-accessory0.png",
    ⵠᐃⲆᐃᐃⵠᐃ: "img/day-accessory0-pacques.png",
    ᐃᐃΔᐃΔⵠᐃ: "img/night-accessory0-pacques.png",
    ⵠΔᐃΔⵠᐃᐃ: "img/day-accessory13.png",
    ⵠⵠΔᐃᐃⵠΔ: "img/night-accessory13.png",
    ⲆΔⵠⵠⲆᐃⵠ: "img/day-accessory14.png",
    ΔⵠⵠⵠΔⵠⵠ: "img/night-accessory14.png",
    ⵠᐃΔⵠΔⲆⲆ: "img/day-accessory15.png",
    ⵠⲆΔⵠⲆⵠᐃ: "img/night-accessory15.png",
    ΔⲆⲆⵠΔΔᐃ: "img/day-accessory16.png",
    ⲆᐃᐃᐃⵠⲆⵠ: "img/night-accessory16.png",
    ⵠⲆᐃᐃᐃⵠΔ: "img/day-accessory17.png",
    ΔΔⲆᐃΔⵠᐃ: "img/day-accessory17.png",
    ⲆⵠⵠΔⲆᐃⲆ: "img/day-accessory19.png",
    ⵠⵠⵠⲆᐃⲆᐃ: "img/night-accessory19.png",
    ᐃᐃⵠⵠΔⵠⵠ: "img/day-accessory20.png",
    ΔᐃⵠⲆᐃⵠⲆ: "img/night-accessory20.png",
    ⲆⲆⲆᐃⵠⲆᐃ: "img/day-accessory21.png",
    ⲆⵠΔⵠⵠᐃⵠ: "img/night-accessory21.png",
    ⲆⵠᐃⲆⵠⵠᐃ: "img/day-accessory22.png",
    ⵠᐃΔᐃᐃᐃᐃ: "img/night-accessory22.png",
    ΔⲆΔᐃⲆⲆΔ: "img/day-accessory23.png",
    ⵠⵠⲆᐃⲆⵠⵠ: "img/night-accessory23.png",
    ᐃⵠⵠᐃⵠΔⲆ: "img/day-accessory24.png",
    ΔᐃⲆᐃⲆⲆᐃ: "img/night-accessory24.png",
    ⵠⲆⵠⲆⲆᐃⲆ: "img/day-accessory25.png",
    ⵠⲆⲆᐃᐃᐃᐃ: "img/night-accessory25.png",
    ΔⵠⲆΔⲆⲆⵠ: "img/day-accessory26.png",
    ᐃⵠᐃΔⵠⲆΔ: "img/night-accessory26.png",
    ᐃᐃⵠⲆⲆⲆⲆ: "img/day-accessory27.png",
    ΔᐃⵠΔΔᐃᐃ: "img/night-accessory27.png",
    ᐃⲆⲆⵠΔΔΔ: "img/day-accessory18.png",
    ⵠΔᐃᐃᐃᐃⲆ: "img/night-accessory18.png",
    ⲆⲆΔΔΔⵠᐃ: "img/day-accessory29.png",
    ΔΔⲆΔΔⵠⲆ: "img/night-accessory29.png",
    ⵠⵠΔᐃᐃⲆⲆ: "img/day-accessory30.png",
    ⲆⲆⲆⲆⵠⲆΔ: "img/night-accessory30.png",
    ⵠΔΔᐃⵠᐃᐃ: "img/day-accessory31.png",
    ΔⵠⲆᐃⵠⵠᐃ: "img/night-accessory31.png",
    ΔΔⲆⲆⲆⵠΔ: "img/day-accessory32.png",
    ΔⲆⲆΔⲆⲆᐃ: "img/night-accessory32.png",
    ᐃᐃᐃᐃⵠⲆⲆ: "img/day-accessory33.png",
    ΔⲆⲆΔΔΔᐃ: "img/night-accessory33.png",
    ΔⲆᐃⲆΔΔΔ: "img/day-accessory34.png",
    ΔⵠᐃⵠᐃΔᐃ: "img/night-accessory34.png",
    ⵠⵠⵠⵠⵠᐃᐃ: "img/day-accessory35.png",
    ⵠᐃⵠⵠⵠⲆⵠ: "img/night-accessory35.png",
    ⲆⵠᐃⲆΔᐃⲆ: "img/day-accessory28.png",
    ΔⲆΔⵠᐃᐃⵠ: "img/night-accessory28.png",
    ⵠⵠᐃΔᐃⲆᐃ: "img/day-accessory36.png",
    ΔᐃⲆⵠⲆⵠⵠ: "img/night-accessory36.png",
    ⵠᐃΔⵠΔΔᐃ: "img/day-accessory37.png",
    ᐃⲆΔᐃⵠᐃⵠ: "img/night-accessory37.png",
    ᐃⵠᐃΔⵠⲆᐃ: "img/day-accessory39.png",
    ΔⵠΔⵠⲆⵠⲆ: "img/night-accessory39.png",
    ⲆᐃᐃⲆⵠᐃⲆ: "img/day-accessory40.png",
    ⵠᐃΔⲆΔΔⲆ: "img/night-accessory40.png",
    ⲆᐃΔⵠᐃΔΔ: "img/day-accessory41.png",
    ΔᐃⲆΔⲆΔᐃ: "img/night-accessory41.png",
    ⵠⲆⲆⵠᐃⵠⵠ: "img/day-accessory42.png",
    ᐃᐃⵠⵠⵠⲆⵠ: "img/night-accessory42.png",
    ᐃⲆΔⲆⵠⵠⲆ: "img/day-accessory43.png",
    ΔⵠⵠⲆⵠΔᐃ: "img/night-accessory43.png",
    ⵠΔΔᐃᐃⲆⲆ: "img/day-accessory44.png",
    ᐃΔᐃⵠᐃᐃⲆ: "img/night-accessory44.png",
    ᐃᐃΔΔΔΔΔ: "img/day-accessory38.png",
    ᐃΔⵠⲆⵠⵠᐃ: "img/night-accessory38.png",
    ᐃⵠⵠΔⲆΔⲆ: "img/day-accessory46.png",
    ᐃⵠᐃⵠᐃΔⵠ: "img/night-accessory46.png",
    ⵠΔⵠΔⵠΔⲆ: "img/day-accessory47.png",
    ᐃⲆᐃᐃⲆⵠⲆ: "img/night-accessory47.png",
    ᐃⲆⲆⲆⵠΔⵠ: "img/day-accessory48.png",
    ⵠΔⵠⵠⵠⲆΔ: "img/night-accessory48.png",
    ⲆᐃΔⲆⲆᐃᐃ: "img/day-accessory49.png",
    ᐃⲆΔᐃⲆⵠΔ: "img/night-accessory49.png",
    ⲆᐃⲆᐃᐃᐃᐃ: "img/day-accessory45.png",
    ⵠᐃᐃⲆᐃΔⵠ: "img/night-accessory45.png",
    ᐃⲆⲆⵠΔⲆᐃ: "img/day-accessory50.png",
    ΔⵠⵠⵠΔᐃⵠ: "img/night-accessory50.png",
    ΔᐃⲆᐃᐃᐃΔ: "img/day-accessory51.png",
    ᐃᐃⲆⲆⵠⲆᐃ: "img/night-accessory51.png",
    ⲆΔΔⲆΔⵠⵠ: "img/day-accessory52.png",
    ⲆⲆΔⲆⵠⲆⲆ: "img/night-accessory52.png",
    ⵠᐃⲆᐃΔΔⵠ: "img/day-accessory53.png",
    ⵠᐃⵠΔᐃΔⲆ: "img/night-accessory53.png",
    ⵠΔΔᐃΔⵠⵠ: "img/day-accessory54.png",
    ⲆᐃⵠⲆⵠⵠΔ: "img/night-accessory54.png",
    ⵠᐃⲆΔⵠᐃⲆ: "img/day-accessory55.png",
    ΔΔΔⲆⵠⲆΔ: "img/night-accessory55.png",
    ᐃⵠΔᐃⲆΔᐃ: "img/day-accessory56.png",
    ⲆⲆⲆⲆΔⲆⲆ: "img/night-accessory56.png",
    ⵠᐃⲆⵠᐃⲆⵠ: "img/day-accessory57.png",
    ᐃᐃⲆⲆΔᐃⲆ: "img/night-accessory57.png",
    ᐃⵠᐃⲆⵠⲆⵠ: "img/day-accessory58.png",
    ᐃⵠᐃⵠΔᐃΔ: "img/night-accessory58.png",
    ᐃⵠⵠᐃΔⲆΔ: "img/day-accessory59.png",
    ⵠⲆᐃⵠᐃᐃⵠ: "img/night-accessory59.png",
    ᐃⲆΔⲆⲆᐃⵠ: "img/day-accessory60.png",
    ⲆⲆᐃΔⲆᐃⲆ: "img/night-accessory60.png",
    ΔⲆⵠΔⲆⵠⵠ: "img/day-accessory61.png",
    ᐃᐃᐃᐃΔΔΔ: "img/night-accessory61.png",
    ΔᐃΔᐃᐃⵠΔ: "img/day-accessory62.png",
    ΔᐃⲆⲆⲆΔᐃ: "img/night-accessory62.png",
    ⵠᐃᐃⵠⵠΔⵠ: "img/day-accessory63.png",
    ⲆⵠⲆΔⵠⵠΔ: "img/night-accessory63.png",
    ΔΔⵠⵠⵠⲆⲆ: "img/day-accessory64.png",
    ᐃⲆⲆⲆΔΔΔ: "img/night-accessory64.png",
    ⵠⵠⲆΔΔⵠΔ: "img/day-accessory65.png",
    ⲆⲆΔᐃⲆⵠⲆ: "img/night-accessory65.png",
    ⵠⵠΔᐃΔⵠΔ: "img/day-accessory66.png",
    ⲆⲆΔΔⲆᐃΔ: "img/night-accessory66.png",
    ⵠⲆΔⵠΔⲆΔ: "img/day-accessory67.png",
    ᐃᐃⲆⵠΔΔᐃ: "img/night-accessory67.png",
    ⲆⲆⵠᐃⵠⵠⲆ: "img/day-accessory68.png",
    ⵠᐃᐃⵠᐃΔⲆ: "img/night-accessory68.png",
    ⵠⲆΔⵠⵠᐃⵠ: "img/day-accessory69.png",
    ΔⲆᐃⵠⵠᐃⵠ: "img/night-accessory69.png",
    ⵠⵠΔΔⵠΔⵠ: "img/day-accessory70.png",
    ᐃΔΔⵠᐃⵠⵠ: "img/night-accessory70.png",
    ⵠΔⵠⲆⲆⲆΔ: "img/day-accessory71.png",
    ⲆⵠᐃⲆΔⲆᐃ: "img/night-accessory71.png",
    ⲆᐃⲆⲆΔᐃⲆ: "img/day-accessory72.png",
    ᐃⵠⲆⵠⵠᐃᐃ: "img/night-accessory72.png",
    ⵠᐃⵠᐃⲆΔⲆ: "img/day-accessory73.png",
    ΔᐃΔᐃⲆΔᐃ: "img/night-accessory73.png",
    ΔΔᐃΔⲆⵠΔ: "img/day-accessory74.png",
    ᐃᐃⲆᐃⵠⵠᐃ: "img/night-accessory74.png",
    ΔΔⲆⵠᐃΔⵠ: "img/day-accessory75.png",
    ᐃⲆΔⵠΔΔᐃ: "img/night-accessory75.png",
    ⵠᐃⵠᐃᐃⵠᐃ: "img/day-accessory76.png",
    ΔᐃⲆⵠΔΔⲆ: "img/night-accessory76.png",
    ᐃⲆᐃⲆⲆⵠᐃ: "img/day-accessory77.png",
    ⵠⵠⲆᐃΔⲆΔ: "img/night-accessory77.png",
    ΔⲆⲆᐃᐃⵠⵠ: "img/day-accessory78.png",
    ⵠΔⲆⲆΔⵠⲆ: "img/night-accessory78.png",
    ⵠΔᐃᐃᐃⲆᐃ: "img/day-accessory79.png",
    ⲆⵠⲆΔⲆⵠⲆ: "img/night-accessory79.png",
    ⲆⵠΔⵠᐃΔⵠ: "img/day-accessory80.png",
    ΔᐃΔⲆΔⲆᐃ: "img/night-accessory80.png",
    ΔⵠⵠᐃΔⵠᐃ: "img/day-accessory81.png",
    ⵠᐃⵠⵠⵠⲆᐃ: "img/night-accessory81.png",
    ᐃⵠᐃᐃⲆᐃⵠ: "img/day-book0.png",
    ᐃⲆⵠⲆᐃᐃⵠ: "img/night-book0.png",
    ᐃⵠΔⵠΔⲆᐃ: "img/day-book1.png",
    ᐃΔⵠΔᐃΔΔ: "img/night-book1.png",
    ΔΔⲆⲆⲆⵠⵠ: "img/day-book2.png",
    ⲆΔⲆⲆⵠΔᐃ: "img/night-book2.png",
    ⵠⲆⲆᐃⵠⲆⲆ: "img/day-book3.png",
    ᐃⵠⵠⵠΔⵠΔ: "img/night-book3.png",
    ⵠⲆⵠᐃᐃᐃΔ: "img/day-book4.png",
    ⲆᐃᐃᐃⲆⲆⵠ: "img/night-book4.png",
    ᐃΔΔᐃⲆⵠΔ: "img/day-book5.png",
    ⲆⵠⲆΔⵠΔⲆ: "img/night-book5.png",
    ᐃᐃⲆᐃⵠᐃᐃ: "img/day-book6.png",
    ⲆᐃᐃⲆⲆⵠΔ: "img/night-book6.png",
    ΔⲆⲆᐃⵠⲆⲆ: "img/day-book7.png",
    ᐃⲆΔⲆᐃⲆᐃ: "img/night-book7.png",
    ⵠⵠⲆⵠⵠΔⵠ: "img/day-book8.png",
    ᐃⲆⵠⵠⵠΔΔ: "img/night-book8.png",
    ⲆⲆᐃⵠΔᐃΔ: "img/day-book9.png",
    ΔⵠⵠⵠΔᐃⲆ: "img/night-book9.png",
    ⵠⵠⵠᐃᐃⲆΔ: "img/day-book10.png",
    ᐃΔΔᐃᐃΔᐃ: "img/night-book10.png",
    ᐃΔⵠⵠᐃᐃⲆ: "img/day-book11.png",
    ᐃⵠᐃᐃᐃⵠⲆ: "img/night-book11.png",
    ΔⵠΔΔΔⲆᐃ: "img/day-book12.png",
    ΔᐃⵠⵠⵠⲆᐃ: "img/night-book12.png",
    ⵠⲆΔⲆᐃⲆᐃ: "img/day-book13.png",
    ᐃΔᐃᐃⵠⵠⵠ: "img/night-book13.png",
    ᐃΔⵠⵠⲆΔᐃ: "img/day-book14.png",
    ⵠᐃΔΔⵠⲆᐃ: "img/night-book14.png",
    ⵠᐃⲆⲆΔΔⵠ: "img/day-book15.png",
    ⲆᐃᐃⲆᐃⵠᐃ: "img/night-book15.png",
    ΔⲆΔᐃⲆⵠⵠ: "img/day-book16.png",
    ᐃⲆᐃⵠⲆⵠⵠ: "img/night-book16.png",
    ᐃⵠΔⲆᐃⵠᐃ: "img/day-book17.png",
    ⵠΔⲆⵠⵠⵠⲆ: "img/night-book17.png",
    ᐃⲆΔⲆᐃⵠⲆ: "img/day-book18.png",
    ΔⲆᐃⲆᐃΔᐃ: "img/night-book18.png",
    ⲆⲆⲆᐃᐃᐃⵠ: "img/day-book19.png",
    ⲆⵠΔⲆΔΔᐃ: "img/night-book19.png",
    ᐃᐃⲆᐃⵠᐃⵠ: "img/day-book20.png",
    ᐃΔⲆᐃᐃⵠⲆ: "img/night-book20.png",
    ΔⲆⵠⲆⵠΔⲆ: "img/day-book21.png",
    ⲆⲆⲆⵠΔΔⵠ: "img/night-book21.png",
    ΔⵠⲆⵠⵠⲆⵠ: "img/day-book22.png",
    ΔΔⵠⲆⵠⵠⲆ: "img/night-book22.png",
    ᐃⲆᐃΔⵠⵠΔ: "img/day-book23.png",
    ᐃΔⲆᐃᐃⲆⲆ: "img/night-book23.png",
    ⵠΔΔⲆⵠⵠᐃ: "img/day-book24.png",
    ⵠⵠⲆᐃⲆⲆᐃ: "img/night-book24.png",
    ⵠΔᐃⲆᐃΔΔ: "img/day-book25.png",
    ᐃⵠⵠΔΔΔⵠ: "img/night-book25.png",
    ᐃΔⵠΔⲆΔⵠ: "img/day-book26.png",
    ΔᐃⲆⵠᐃⵠⵠ: "img/night-book26.png",
    ⵠᐃΔΔⲆⲆⲆ: "img/day-book27.png",
    ᐃᐃΔΔᐃⲆⵠ: "img/night-book27.png",
    ᐃⵠⵠΔⲆⲆᐃ: "img/day-book28.png",
    ⲆΔΔᐃΔⲆΔ: "img/night-book28.png",
    ⵠⲆᐃᐃΔⲆᐃ: "img/day-book29.png",
    ᐃⲆᐃΔⵠⲆⲆ: "img/night-book29.png",
    ΔⲆᐃΔⲆᐃᐃ: "img/day-book30.png",
    ᐃⲆⵠⲆⲆΔΔ: "img/night-book30.png",
    ⲆⵠⵠⵠⲆᐃⵠ: "img/day-book31.png",
    ⵠⲆΔᐃⵠⵠⵠ: "img/night-book31.png",
    ΔᐃⲆⲆⵠᐃⵠ: "img/day-book32.png",
    ᐃⵠⵠΔΔΔᐃ: "img/night-book32.png",
    ᐃⲆⵠⲆΔΔⵠ: "img/day-book33.png",
    ⵠⲆⲆᐃⵠΔⵠ: "img/night-book33.png",
    ΔⵠᐃⲆⵠⲆᐃ: "img/day-book34.png",
    ⲆⵠΔⵠⵠⵠᐃ: "img/night-book34.png",
    ⲆΔᐃⲆⲆⵠⵠ: "img/day-book35.png",
    ᐃΔⵠΔⲆⵠⲆ: "img/night-book35.png",
    ᐃᐃⵠⲆΔΔΔ: "img/day-book36.png",
    ᐃΔᐃΔΔΔΔ: "img/night-book36.png",
    ⵠⵠⲆⵠⲆⲆΔⲆΔ: "img/day-book37.png",
    ᐃΔⵠⲆᐃΔᐃⵠⲆ: "img/night-book37.png",
    ⵠΔⲆΔⲆᐃΔ: "img/day-book38.png",
    ᐃΔᐃⵠⵠΔΔ: "img/night-book38.png",
    ΔΔⵠΔᐃᐃⵠ: "img/day-book39.png",
    ΔᐃⵠⲆΔᐃⵠ: "img/night-book39.png",
    ⵠᐃΔᐃᐃΔⲆ: "img/day-book40.png",
    ᐃⵠᐃΔⲆⲆⲆ: "img/night-book40.png",
    ⲆⲆⲆΔΔⵠⲆ: "img/day-book41.png",
    ΔⵠᐃⲆΔᐃᐃ: "img/night-book41.png",
    ⵠⵠΔⵠᐃΔᐃ: "img/day-book42.png",
    ΔΔⵠᐃΔⵠⲆ: "img/night-book42.png",
    ᐃᐃⵠᐃᐃⵠⵠ: "img/day-book43.png",
    ⲆⲆⲆᐃᐃᐃᐃ: "img/night-book43.png",
    ⵠᐃΔⲆᐃⲆΔ: "img/day-book44.png",
    ᐃⵠΔᐃΔⵠⲆ: "img/night-book44.png",
    ⲆⲆⲆⵠᐃⲆⵠ: "img/day-book45.png",
    ΔⵠΔⵠᐃᐃⵠ: "img/night-book45.png",
    ΔⲆⵠⵠⵠⵠⵠ: "img/day-crate1.png",
    ⵠⵠΔᐃⵠⵠⵠ: "img/night-crate1.png",
    ⵠΔᐃᐃⵠⲆΔ: "img/day-crate2.png",
    ⲆⵠΔⲆᐃⵠⵠ: "img/night-crate2.png",
    ᐃⵠᐃΔⵠᐃⲆ: "img/day-crate3.png",
    ⵠⲆⲆᐃΔᐃΔ: "img/night-crate3.png",
    ΔΔⲆⲆⵠΔⲆ: "img/day-crate4.png",
    ᐃΔᐃΔⵠᐃΔ: "img/night-crate4.png",
    ΔⵠⲆΔᐃⵠᐃ: "img/day-crate5.png",
    ᐃⲆⲆⲆⵠᐃⵠ: "img/night-crate5.png",
    ΔΔΔΔᐃⵠⵠ: "img/day-crate6.png",
    ⲆΔΔⲆΔⲆᐃ: "img/night-crate6.png",
    ⵠⵠᐃⵠⲆΔΔ: "img/day-crate7.png",
    ᐃΔⲆⲆⵠⵠᐃ: "img/night-crate7.png",
    ⲆⲆᐃΔᐃⵠᐃ: "img/day-crate8.png",
    ΔΔⲆᐃⲆⵠⲆ: "img/night-crate8.png",
    ᐃΔΔⵠⵠΔⵠ: "img/day-crate9.png",
    ΔⵠⲆᐃΔΔᐃ: "img/night-crate9.png",
    ᐃⲆⵠΔⵠⲆⵠ: "img/day-crate10.png",
    ΔⵠΔᐃⲆⲆⵠ: "img/night-crate10.png",
    ⵠⵠᐃⲆⲆⲆΔ: "img/day-crate11.png",
    ΔᐃⲆΔⵠᐃⲆ: "img/night-crate11.png",
    ΔΔⵠⵠᐃᐃΔ: "img/day-crate12.png",
    ⲆᐃⵠⵠΔᐃⲆ: "img/night-crate12.png",
    ⲆΔΔⵠⵠⲆⵠ: "img/day-crate13.png",
    ᐃΔᐃⵠΔᐃⲆ: "img/night-crate13.png",
    ᐃⲆΔⵠⵠⲆᐃ: "img/day-crate14.png",
    ΔⲆⵠᐃᐃⵠᐃ: "img/night-crate14.png",
    ⲆⲆⲆᐃΔⵠⵠ: "img/day-crate15.png",
    ⵠᐃᐃⵠⵠⵠⲆ: "img/night-crate15.png",
    Δⵠᐃᐃᐃᐃⵠ: "img/day-crate16.png",
    ᐃⲆᐃᐃᐃΔΔ: "img/night-crate16.png",
    ⲆⲆⵠⲆⲆΔⵠ: "img/day-crate17.png",
    ⲆⲆΔⲆⲆⲆⵠ: "img/night-crate17.png",
    ᐃⲆⲆⲆⵠⲆⲆ: "img/day-crate18.png",
    ΔᐃⵠᐃΔⵠΔ: "img/night-crate18.png",
    ⵠᐃⲆⵠΔΔΔ: "img/day-crate19.png",
    ⵠᐃᐃΔⲆᐃⵠ: "img/night-crate19.png",
    ᐃⲆⲆⵠΔⲆⵠ: "img/day-crate20.png",
    ΔⵠⲆⵠᐃΔΔ: "img/night-crate20.png",
    ΔᐃⲆᐃⲆΔⵠ: "img/day-crate21.png",
    ΔⲆⵠⲆⲆᐃⲆ: "img/night-crate21.png",
    ΔⲆⵠⵠⲆⵠⲆ: "img/day-crate22.png",
    ⵠᐃⲆᐃΔΔⲆ: "img/night-crate22.png",
    ⲆⵠⲆΔⲆᐃΔ: "img/day-crate23.png",
    ΔΔⲆⵠᐃΔⲆ: "img/night-crate23.png",
    ⵠΔⲆⲆΔΔᐃ: "img/day-crate24.png",
    ᐃⵠΔⵠⵠΔΔ: "img/night-crate24.png",
    ⵠᐃⲆⲆⲆⲆⲆ: "img/day-crate25.png",
    ⵠⵠⲆⵠⲆΔΔ: "img/night-crate25.png",
    ΔⲆⵠⵠⲆⲆᐃ: "img/day-crate26.png",
    ᐃⵠⲆΔΔⵠᐃ: "img/night-crate26.png",
    ⵠⲆᐃΔᐃⲆⲆ: "img/day-crate27.png",
    ⵠᐃΔΔⲆᐃⲆ: "img/night-crate27.png",
    ΔⲆΔⲆᐃᐃΔ: "img/day-crate28.png",
    ⲆⵠᐃΔⲆΔⲆ: "img/night-crate28.png",
    ᐃΔᐃⲆⲆΔΔ: "img/day-crate29.png",
    ⵠᐃⲆⵠⵠᐃᐃ: "img/night-crate29.png",
    ⵠⵠᐃᐃⵠΔⲆ: "img/day-crate30.png",
    ⵠᐃⲆⵠⵠᐃⵠ: "img/night-crate30.png",
    ᐃⵠᐃᐃᐃΔⲆ: "img/day-crate31.png",
    ᐃⵠᐃⲆΔⵠᐃ: "img/night-crate31.png",
    ΔⲆⲆⲆΔΔᐃ: "img/day-crate32.png",
    ⲆⵠᐃᐃΔᐃⲆ: "img/night-crate32.png",
    ΔⲆⵠᐃⲆΔΔ: "img/day-crate33.png",
    ⲆᐃᐃⵠᐃΔⵠ: "img/night-crate33.png",
    ᐃⵠΔΔᐃⵠᐃ: "img/day-crate34.png",
    ⲆⲆⲆᐃΔⲆⲆ: "img/night-crate34.png",
    ᐃⲆⲆⵠᐃⵠΔ: "img/day-crate35.png",
    ᐃΔᐃⵠΔⲆΔ: "img/night-crate35.png",
    ⵠⲆⵠⵠⵠΔᐃ: "img/day-crate36.png",
    ⲆΔⵠᐃⵠΔᐃ: "img/night-crate36.png",
    ⲆⵠΔΔⲆⵠⵠ: "img/day-crate37.png",
    ⵠⵠᐃᐃΔⲆΔ: "img/night-crate37.png",
    ⲆᐃⲆΔⲆᐃⲆ: "img/day-crate38.png",
    ΔⵠᐃⵠᐃⲆᐃ: "img/night-crate38.png",
    ⲆᐃᐃΔⲆΔⲆ: "img/day-crate39.png",
    ⵠⵠΔᐃⵠⲆᐃ: "img/night-crate39.png",
    ΔⵠⲆᐃⵠᐃⲆ: "img/day-crate40.png",
    ᐃⵠᐃⲆⲆᐃⲆ: "img/night-crate40.png",
    ⲆⵠΔⲆΔΔΔ: "img/day-crate41.png",
    ᐃΔᐃΔⲆΔⵠ: "img/night-crate41.png",
    ⵠⵠᐃᐃΔⵠⵠ: "img/day-crate42.png",
    ᐃᐃΔⵠᐃⲆᐃ: "img/night-crate42.png",
    ᐃⵠΔⵠⲆⲆⵠ: "img/day-crate43.png",
    ᐃⲆΔⲆⲆⵠⲆ: "img/night-crate43.png",
    ⲆᐃΔΔᐃΔⲆ: "img/day-crate44.png",
    ⵠΔᐃΔᐃⲆΔ: "img/night-crate44.png",
    ⵠΔⵠΔⲆⲆⲆ: "img/day-crate45.png",
    ΔⵠᐃⲆΔⵠⲆ: "img/night-crate45.png",
    ΔⲆᐃᐃᐃᐃᐃ: "img/day-crate46.png",
    ᐃⵠⲆᐃⵠⵠᐃ: "img/night-crate46.png",
    ΔⵠⵠᐃⲆΔᐃ: "img/day-crate47.png",
    ΔΔⲆᐃᐃⲆⵠ: "img/night-crate47.png",
    ⵠⵠⵠⲆᐃⲆⵠ: "img/day-crate48.png",
    ⲆΔᐃⲆⵠᐃᐃ: "img/night-crate48.png",
    ΔΔⵠΔⵠⵠᐃ: "img/day-crate49.png",
    ⲆᐃⲆΔⵠⵠⲆ: "img/night-crate49.png",
    ΔΔⵠⵠΔⲆΔ: "img/day-crate50.png",
    ⲆⲆΔⵠᐃΔΔ: "img/night-crate50.png",
    ⵠⵠⲆᐃΔⵠⲆ: "img/day-crate51.png",
    ⲆⵠⵠⲆᐃΔⵠ: "img/night-crate51.png",
    ᐃⵠⲆᐃΔⵠᐃ: "img/day-crate52.png",
    ΔⵠᐃᐃᐃⲆⵠ: "img/night-crate52.png",
    ΔΔⲆΔΔΔⲆ: "img/day-crate53.png",
    ᐃᐃⲆΔΔⵠΔ: "img/night-crate53.png",
    ᐃⲆᐃⲆⲆⵠⵠ: "img/day-crate54.png",
    ⲆᐃᐃᐃᐃΔᐃ: "img/night-crate54.png",
    ᐃᐃⲆΔⵠΔⲆ: "img/day-crate55.png",
    ᐃΔⲆᐃᐃⵠΔ: "img/night-crate55.png",
    ⵠⵠⵠΔⵠΔⲆ: "img/day-crate56.png",
    ΔΔΔΔⵠᐃΔ: "img/night-crate56.png",
    ᐃᐃⵠᐃᐃⲆⲆ: "img/day-crate57.png",
    ⵠⲆᐃΔⵠⵠΔ: "img/night-crate57.png",
    ⲆΔᐃᐃⲆΔΔ: "img/day-crate58.png",
    ⵠⲆΔᐃΔⲆΔ: "img/night-crate58.png",
    ⵠᐃΔⲆΔᐃᐃ: "img/day-crate59.png",
    ΔⵠⵠⲆᐃΔⲆ: "img/night-crate59.png",
    ΔⲆⲆⵠᐃΔᐃ: "img/day-crate60.png",
    ⲆⵠⵠΔᐃⲆⵠ: "img/night-crate60.png",
    ΔⲆΔΔΔᐃⵠ: "img/day-crate61.png",
    ᐃᐃⵠᐃⲆΔⵠ: "img/night-crate61.png",
    ⲆⲆⵠⵠⵠᐃΔ: "img/day-crate62.png",
    ⵠᐃⲆⲆⲆΔⲆ: "img/night-crate62.png",
    ⵠⵠⲆⵠⲆᐃᐃ: "img/day-crate63.png",
    ᐃᐃⲆᐃⲆⲆΔ: "img/night-crate63.png",
    ⲆⵠᐃⵠΔⵠⵠ: "img/day-crate64.png",
    ΔⵠⲆⲆᐃᐃΔ: "img/night-crate64.png",
    ⵠⲆᐃⲆⵠⵠⲆ: "img/day-crate65.png",
    ⵠⵠΔᐃⲆⵠⵠ: "img/night-crate65.png",
    ⵠᐃᐃⵠⲆΔᐃ: "img/day-crate66.png",
    ⵠΔΔΔΔⲆᐃ: "img/night-crate66.png",
    ΔᐃΔᐃⲆΔⲆ: "img/day-crate67.png",
    ᐃΔⲆⵠⲆᐃᐃ: "img/night-crate67.png",
    ⵠᐃΔΔⲆⲆⵠ: "img/day-crate68.png",
    ⲆⵠΔⲆᐃΔⲆ: "img/night-crate68.png",
    ⵠⵠⲆⵠΔⲆⲆ: "img/day-crate69.png",
    ⲆᐃᐃΔⵠⲆᐃ: "img/night-crate69.png",
    Δᐃⵠⵠⵠⵠⵠ: "img/day-crate70.png",
    ⵠⵠᐃⲆΔⵠΔ: "img/night-crate70.png",
    ⵠᐃΔⲆᐃⲆⵠ: "img/day-crate71.png",
    ᐃᐃΔᐃⲆⲆᐃ: "img/night-crate71.png",
    ⲆⲆⵠᐃΔΔΔ: "img/day-crate72.png",
    ᐃᐃᐃΔᐃΔⲆ: "img/night-crate72.png",
    ᐃᐃΔΔⵠⲆⵠ: "img/day-herb0.png",
    ⵠⲆⵠᐃΔⵠᐃ: "img/day-herb1.png",
    ⵠᐃᐃⲆΔⲆΔ: "img/day-herb2.png",
    ⵠᐃⵠᐃⲆΔΔ: "img/day-herb3.png",
    ⵠΔΔⵠⲆⵠⵠ: "img/day-herb4.png",
    ⲆΔᐃⵠⲆⲆⵠ: "img/day-herb5.png",
    ⵠⲆΔΔᐃΔⲆ: "img/day-herb6.png",
    ᐃⵠᐃᐃᐃⵠΔ: "img/day-herb7.png",
    ⲆⲆⲆⲆⵠᐃⵠ: "img/day-herb8.png",
    ᐃΔᐃᐃΔᐃⵠ: "img/day-herb9.png",
    ⲆᐃⵠⵠΔⲆᐃ: "img/day-herb10.png",
    ΔⲆⵠᐃⵠΔᐃ: "img/day-herb11.png",
    ᐃⲆᐃⲆᐃᐃⲆ: "img/day-herb12.png",
    ᐃⵠⲆΔⵠⵠᐃ: "img/day-herb13.png",
    ΔⵠⲆΔⵠⵠΔ: "img/day-herb14.png",
    ΔⲆᐃΔⲆᐃⵠ: "img/day-herb15.png",
    ΔΔᐃⲆⵠΔΔ: "img/day-shell0.png",
    ⲆᐃᐃⵠⵠⲆΔ: "img/day-shell1.png",
    ⵠᐃΔⲆⵠⲆᐃ: "img/day-shell2.png",
    ⵠΔⲆⵠⵠⵠΔ: "img/day-leaf1.png",
    ⵠⵠⲆΔᐃᐃⵠ: "img/day-leaf2.png",
    ᐃⵠⵠΔⵠⲆᐃ: "img/day-leaf3.png",
    Δᐃᐃᐃᐃⵠᐃ: "img/day-leaf4.png",
    ⲆⵠⵠⵠᐃΔⲆ: "img/day-leaf5.png",
    ⵠᐃⲆᐃⲆΔΔ: "img/day-leaf6.png",
    ⵠⲆⲆⵠΔΔⵠ: "img/day-leaf7.png",
    ΔᐃⵠⲆᐃⵠΔ: "img/day-leaf8.png",
    ⲆΔⲆⲆᐃᐃⲆ: "img/day-rock0.png",
    ⵠΔΔΔⲆΔΔ: "img/day-rock1.png",
    ⵠⲆⵠᐃⲆᐃⵠ: "img/day-rock2.png",
    ΔΔⵠⲆⲆⲆⵠ: "img/day-rock3.png",
    ᐃⲆᐃⵠᐃᐃⵠ: "img/day-rock4.png",
    ⲆᐃⵠΔⵠᐃⵠ: "img/day-rock5.png",
    ⲆΔΔⵠΔⵠⵠ: "img/day-rock6.png",
    ᐃᐃⲆⵠᐃⲆⲆ: "img/day-rock7.png",
    ᐃΔⲆⵠⲆⵠΔ: "img/day-rock8.png",
    ΔⲆⵠᐃΔΔⲆ: "img/day-rock9.png",
    ⵠΔⲆΔΔᐃᐃ: "img/day-rock10.png",
    ᐃΔᐃᐃΔᐃΔ: "img/day-rock11.png",
    ⵠΔΔⲆΔΔⲆ: "img/day-rock12.png",
    ⲆⲆᐃᐃᐃᐃⵠ: "img/day-rock13.png",
    ΔⵠⵠⲆⲆⵠΔ: "img/day-flower1.png",
    ᐃᐃⵠΔᐃᐃⵠ: "img/day-flower2.png",
    ⵠⵠΔⲆⲆⵠΔ: "img/day-flower3.png",
    ΔᐃΔᐃΔᐃⵠ: "img/day-flower4.png",
    ΔⲆΔⵠΔⲆⵠ: "img/day-flower5.png",
    ΔⲆⲆΔᐃⵠⵠ: "img/day-flower6.png",
    ⵠΔⲆⵠᐃᐃⵠ: "img/day-flower7.png",
    ⵠΔΔᐃⵠᐃⲆ: "img/day-flower8.png",
    ⵠΔⵠΔᐃᐃΔ: "img/day-flower9.png",
    ᐃᐃᐃᐃⵠⵠᐃ: "img/day-herb16.png",
    ⵠᐃⲆᐃΔⲆⵠ: "img/day-herb17.png",
    ᐃⲆⵠⵠⵠⵠⵠ: "img/day-herb18.png",
    ⲆⵠⲆⵠᐃᐃⲆ: "img/day-herb19.png",
    ⲆⵠⲆΔⲆⲆⲆ: "img/day-herb20.png",
    ΔⵠⵠⵠⵠΔᐃ: "img/day-herb21.png",
    ΔⲆΔΔᐃᐃΔ: "img/night-herb0.png",
    ΔᐃⵠΔᐃⲆᐃ: "img/night-herb1.png",
    ⲆⵠᐃᐃⵠⲆᐃ: "img/night-herb2.png",
    ⵠⵠΔΔᐃᐃΔ: "img/night-herb3.png",
    ΔᐃⵠᐃⵠⲆⵠ: "img/night-herb4.png",
    ΔⵠⵠᐃΔⲆΔ: "img/night-herb5.png",
    ⲆⵠⵠΔᐃΔⵠ: "img/night-herb6.png",
    ⵠⵠⲆⲆⲆᐃⵠ: "img/night-herb7.png",
    ΔⲆᐃⵠᐃⲆΔ: "img/night-herb8.png",
    ⲆᐃⲆΔᐃΔⵠ: "img/night-herb9.png",
    ⵠΔᐃᐃⲆᐃΔ: "img/night-herb10.png",
    Δᐃᐃᐃⵠⵠⵠ: "img/night-herb11.png",
    ⲆⲆΔΔΔⵠΔ: "img/night-herb12.png",
    ΔⲆⲆⲆᐃᐃⲆ: "img/night-herb13.png",
    ⲆᐃⵠᐃΔⲆᐃ: "img/night-herb14.png",
    ⵠⵠᐃΔᐃᐃⲆ: "img/night-herb15.png",
    ⲆⲆⵠΔⲆΔⲆ: "img/night-shell0.png",
    ⲆⲆⵠⵠⵠⲆΔ: "img/night-shell1.png",
    ⲆΔⲆᐃᐃᐃⵠ: "img/night-shell2.png",
    ᐃᐃⲆⵠⵠΔᐃ: "img/night-leaf1.png",
    ᐃⲆᐃᐃᐃᐃⲆ: "img/night-leaf2.png",
    ᐃⲆᐃᐃⲆᐃΔ: "img/night-leaf3.png",
    ⲆⲆⵠᐃⵠᐃⲆ: "img/night-leaf4.png",
    ⵠΔⵠΔΔⵠΔ: "img/night-leaf5.png",
    ⵠΔΔΔΔⵠⵠ: "img/night-leaf6.png",
    ᐃᐃᐃⵠΔⲆᐃ: "img/night-leaf7.png",
    ΔᐃΔⲆΔΔΔ: "img/night-leaf8.png",
    ΔᐃΔΔᐃΔΔ: "img/night-rock0.png",
    ᐃᐃᐃΔᐃΔΔ: "img/night-rock1.png",
    ΔᐃᐃᐃᐃᐃΔ: "img/night-rock2.png",
    ⲆᐃᐃⲆᐃΔᐃ: "img/night-rock3.png",
    ΔᐃΔΔⲆΔⲆ: "img/night-rock4.png",
    ⵠΔⵠⲆΔⵠᐃ: "img/night-rock5.png",
    ᐃΔⵠᐃⲆᐃᐃ: "img/night-rock6.png",
    ⲆΔⲆⵠⲆⵠᐃ: "img/night-rock7.png",
    ⵠⵠⲆⲆΔⵠⵠ: "img/night-rock8.png",
    ΔⲆⲆᐃΔᐃⲆ: "img/night-rock9.png",
    ⵠⵠΔⵠⵠⵠⵠ: "img/night-rock10.png",
    ᐃΔᐃᐃⲆΔⲆ: "img/night-rock11.png",
    ⲆⲆΔᐃΔΔᐃ: "img/night-rock12.png",
    ᐃⵠⲆᐃΔⲆΔ: "img/night-rock13.png",
    ᐃⲆⲆΔⲆΔⲆ: "img/night-flower1.png",
    Ⲇⵠⵠᐃⵠⵠᐃ: "img/night-flower2.png",
    ⲆⲆᐃⵠⲆᐃⵠ: "img/night-flower3.png",
    ⲆⵠΔᐃⵠⵠⲆ: "img/night-flower4.png",
    ⵠᐃⲆΔⵠⵠᐃ: "img/night-flower5.png",
    ⵠⲆΔᐃⵠΔⲆ: "img/night-flower6.png",
    ⵠⵠΔΔᐃᐃᐃ: "img/night-flower7.png",
    ᐃⲆᐃΔᐃⵠΔ: "img/night-flower8.png",
    ⲆⵠᐃⵠⵠᐃⲆ: "img/night-flower9.png",
    ⲆᐃⲆⲆⵠΔⵠ: "img/night-herb16.png",
    ⲆⲆⵠΔᐃⲆⲆ: "img/night-herb17.png",
    ᐃΔᐃⵠⵠΔⵠ: "img/night-herb18.png",
    ᐃΔⲆᐃⵠΔΔ: "img/night-herb19.png",
    ΔΔΔⲆⲆΔⵠ: "img/night-herb20.png",
    ⵠⵠⲆⲆᐃᐃⵠ: "img/night-herb21.png",
    ΔⵠᐃⵠⵠⵠΔ: "img/day-river000-010-000.png",
    ⲆⵠᐃⵠΔᐃᐃ: "img/day-river000-010-010.png",
    ᐃΔⲆⲆⵠⲆΔ: "img/day-river000-011-000.png",
    ᐃⵠⲆⲆⵠΔᐃ: "img/day-river000-011-010.png",
    ΔⵠᐃᐃⲆⵠΔ: "img/day-river000-011-011.png",
    ⵠⵠⵠⵠⲆⵠᐃ: "img/day-river000-110-000.png",
    ᐃⲆⲆⵠᐃΔΔ: "img/day-river000-110-010.png",
    ᐃⲆⵠⵠᐃΔⲆ: "img/day-river000-110-110.png",
    ⵠΔᐃⵠᐃᐃⲆ: "img/day-river000-111-000.png",
    ⲆᐃΔᐃⵠⵠᐃ: "img/day-river000-111-010.png",
    ⲆⵠⲆⵠⲆΔΔ: "img/day-river000-111-011.png",
    ⵠⵠⵠⲆᐃⲆⲆ: "img/day-river000-111-110.png",
    ᐃᐃⲆᐃⵠⲆᐃ: "img/day-river000-111-111.png",
    ⵠⵠΔΔΔᐃⲆ: "img/day-river010-010-000.png",
    ΔⵠᐃᐃⲆⲆⲆ: "img/day-river010-010-010.png",
    ᐃΔⵠⲆⵠⵠΔ: "img/day-river010-011-000.png",
    ⲆⵠΔⵠΔΔⲆ: "img/day-river010-011-010.png",
    ⵠⵠⵠⵠᐃᐃΔ: "img/day-river010-011-011.png",
    ᐃᐃᐃⲆᐃᐃᐃ: "img/day-river010-110-000.png",
    ⲆΔⲆᐃⲆⵠΔ: "img/day-river010-110-010.png",
    ᐃΔⲆⵠⲆⲆⲆ: "img/day-river010-110-110.png",
    ΔⲆⵠⵠⵠⵠⲆ: "img/day-river010-111-000.png",
    ⵠᐃᐃᐃΔⵠᐃ: "img/day-river010-111-010.png",
    ⵠⲆⲆᐃⵠⵠΔ: "img/day-river010-111-011.png",
    ⲆⲆᐃⵠⵠΔⵠ: "img/day-river010-111-110.png",
    ᐃᐃⵠΔΔᐃⵠ: "img/day-river010-111-111.png",
    ΔΔΔᐃⵠⵠΔ: "img/day-river011-011-000.png",
    ΔΔⲆⵠⲆⵠΔ: "img/day-river011-011-010.png",
    ᐃᐃⲆΔᐃᐃⲆ: "img/day-river011-011-011.png",
    ΔⵠⲆⵠᐃⵠⲆ: "img/day-river011-111-000.png",
    ΔΔⲆᐃⲆᐃᐃ: "img/day-river011-111-010.png",
    ⵠΔⵠΔᐃⲆⲆ: "img/day-river011-111-011.png",
    ⵠⵠΔⲆⲆⵠⲆ: "img/day-river011-111-110.png",
    ᐃⵠⲆⲆⵠᐃⲆ: "img/day-river011-111-111.png",
    ᐃⲆΔᐃΔⲆΔ: "img/day-river110-110-000.png",
    ᐃⵠΔⵠⲆⵠⲆ: "img/day-river110-110-010.png",
    ΔⲆᐃΔᐃΔⵠ: "img/day-river110-110-110.png",
    ⵠΔⵠⵠⵠᐃⲆ: "img/day-river110-111-000.png",
    ⵠⲆⵠᐃΔᐃΔ: "img/day-river110-111-010.png",
    ⵠⵠⵠⵠⵠΔⵠ: "img/day-river110-111-011.png",
    ΔᐃⵠΔⲆΔᐃ: "img/day-river110-111-110.png",
    ⵠᐃⲆⵠⵠᐃΔ: "img/day-river110-111-111.png",
    ⲆΔⲆⲆⲆΔᐃ: "img/day-river111-111-011.png",
    ΔⵠΔᐃⲆⲆᐃ: "img/day-river111-111-110.png",
    ⲆΔⲆⲆⲆΔᐃ: "img/day-river111-111-011.png",
    ⲆⵠⵠΔΔᐃΔ: "img/day-river111-111-000.png",
    ⵠᐃᐃⵠᐃΔⵠ: "img/day-river111-111-111.png",
    ⲆⲆⲆⲆⲆⲆᐃ: "img/day-river111-111-010.png",
    ⲆⲆᐃᐃⵠᐃΔ: "img/night-river000-010-000.png",
    ⲆⵠᐃᐃᐃⲆⲆ: "img/night-river000-010-010.png",
    ΔΔⲆⲆⵠᐃⵠ: "img/night-river000-011-000.png",
    ⲆⲆⲆΔᐃᐃⲆ: "img/night-river000-011-010.png",
    ⲆⲆⵠⵠⵠᐃⲆ: "img/night-river000-011-011.png",
    ⵠⵠⲆⲆⲆⵠᐃ: "img/night-river000-110-000.png",
    ⲆᐃΔΔⵠᐃⵠ: "img/night-river000-110-010.png",
    ⲆΔᐃΔⵠᐃᐃ: "img/night-river000-110-110.png",
    ᐃᐃⵠⲆⲆᐃⵠ: "img/night-river000-111-000.png",
    ΔΔⵠⲆⵠΔⲆ: "img/night-river000-111-010.png",
    ᐃⲆᐃᐃⵠⵠⲆ: "img/night-river000-111-011.png",
    ⵠⵠⲆⲆⵠⲆᐃ: "img/night-river000-111-110.png",
    ⲆᐃⲆᐃᐃΔⲆ: "img/night-river000-111-111.png",
    ᐃᐃⲆⲆⲆⲆⵠ: "img/night-river010-010-000.png",
    ᐃᐃᐃⲆⵠᐃⲆ: "img/night-river010-010-010.png",
    ΔᐃⵠᐃΔⲆΔ: "img/night-river010-011-000.png",
    ᐃⵠⲆᐃᐃΔΔ: "img/night-river010-011-010.png",
    ᐃⵠΔⵠⲆⵠⵠ: "img/night-river010-011-011.png",
    ⵠⲆⵠⲆΔΔⲆ: "img/night-river010-110-000.png",
    ⲆⲆⲆΔⵠᐃⲆ: "img/night-river010-110-010.png",
    ⵠⵠⲆⵠᐃⲆΔ: "img/night-river010-110-110.png",
    ⵠᐃΔᐃⲆΔⲆ: "img/night-river010-111-000.png",
    ⵠⵠⵠᐃⵠᐃⵠ: "img/night-river010-111-010.png",
    ⲆᐃᐃⵠⲆⲆΔ: "img/night-river010-111-011.png",
    ᐃⲆⲆᐃᐃⲆᐃ: "img/night-river010-111-110.png",
    ΔⲆᐃᐃΔΔΔ: "img/night-river010-111-111.png",
    ⵠΔΔⵠⲆΔΔ: "img/night-river011-011-000.png",
    ΔⵠᐃⵠΔᐃᐃ: "img/night-river011-011-010.png",
    ᐃΔⲆⲆⵠΔᐃ: "img/night-river011-011-011.png",
    ⵠⵠΔΔᐃⵠⲆ: "img/night-river011-111-000.png",
    ⲆⲆΔⵠᐃⲆⵠ: "img/night-river011-111-010.png",
    ΔΔᐃⲆΔᐃⲆ: "img/night-river011-111-011.png",
    ᐃⲆⲆⲆⲆᐃⲆ: "img/night-river011-111-110.png",
    ⲆⲆΔⵠΔⲆⲆ: "img/night-river011-111-111.png",
    Ⲇᐃᐃⵠⵠᐃⵠ: "img/night-river110-110-000.png",
    ⵠᐃΔⲆⵠⲆⵠ: "img/night-river110-110-010.png",
    ΔᐃΔΔᐃⲆⵠ: "img/night-river110-110-110.png",
    ⲆΔᐃⵠⲆⲆΔ: "img/night-river110-111-000.png",
    ᐃΔⲆΔΔΔⵠ: "img/night-river110-111-010.png",
    ⲆᐃᐃⲆⲆⵠⲆ: "img/night-river110-111-011.png",
    ⲆᐃⵠᐃⵠᐃΔ: "img/night-river110-111-110.png",
    ᐃⲆⵠⲆⵠⲆⲆ: "img/night-river110-111-111.png",
    ⵠΔᐃΔᐃⵠΔ: "img/night-river111-111-011.png",
    ᐃⲆᐃᐃⵠⵠⵠ: "img/night-river111-111-110.png",
    ⵠΔᐃΔᐃⵠΔ: "img/night-river111-111-011.png",
    ⵠᐃⲆΔⵠΔᐃ: "img/night-river111-111-000.png",
    ⲆΔᐃⲆᐃⵠᐃ: "img/night-river111-111-111.png",
    ⵠⵠᐃⵠⵠⵠⵠ: "img/night-river111-111-010.png",
    ⲆⵠⵠⲆⲆΔΔ: "img/day-pebblecompo1.png",
    ΔⲆΔᐃᐃ: "img/day-pebblecompo2.png",
    ⵠⵠΔⵠⲆ: "img/day-pebblecompo3.png",
    ᐃᐃΔⲆΔⲆⵠ: "img/day-pebblecompo4.png",
    ⵠΔⵠᐃⲆ: "img/day-pebblecompo5.png",
    ᐃⵠᐃⵠΔ: "img/day-pebblecompo6.png",
    ΔⲆΔⲆΔ: "img/day-pebblecompo7.png",
    ⵠⲆᐃⲆᐃⲆᐃ: "img/day-pebblecompo8.png",
    ΔΔΔᐃⵠΔⵠ: "img/day-pebblecompo9.png",
    ᐃⲆᐃⵠᐃΔᐃ: "img/day-pebblecompo10.png",
    ᐃΔᐃⵠᐃ: "img/day-pebblecompo11.png",
    ⵠᐃΔⵠⲆⵠⲆ: "img/day-pebblecompo12.png",
    ΔⲆᐃΔⵠⵠᐃ: "img/day-pebblecompo13.png",
    ΔᐃⲆⲆΔΔⲆ: "img/day-pebblecompo14.png",
    ᐃⵠΔᐃΔᐃΔ: "img/day-pebblecompo15.png",
    ᐃⲆⲆΔᐃⲆⵠ: "img/day-pebblecompo16.png",
    ⵠⵠⵠⲆⲆ: "img/day-pebblecompo17.png",
    ⲆΔⵠΔⵠᐃᐃ: "img/day-pebblecompo18.png",
    ΔΔⵠᐃᐃⲆⵠ: "img/day-pebblecompo19.png",
    ⲆⵠⵠΔΔ: "img/day-pebblecompo20.png",
    ᐃᐃⵠΔΔ: "img/day-pebblecompo21.png",
    ΔᐃⲆΔⵠⵠⲆ: "img/day-pebblecompo22.png",
    ⲆⲆⵠΔⲆⲆΔ: "img/day-pebblecompo23.png",
    ᐃⲆΔⵠᐃⵠⵠ: "img/day-pebblecompo24.png",
    ⲆⲆᐃⵠⵠ: "img/day-pebblecompo25.png",
    ⵠᐃⲆⵠᐃ: "img/day-pebblecompo26.png",
    ⵠᐃᐃⲆⵠᐃⵠ: "img/day-pebblecompo27.png",
    ⵠⵠᐃΔⵠ: "img/day-pebblecompo28.png",
    ᐃⵠΔΔᐃΔᐃ: "img/night-pebblecompo1.png",
    ⲆᐃᐃᐃΔ: "img/night-pebblecompo2.png",
    ΔⵠⵠᐃΔ: "img/night-pebblecompo3.png",
    ΔⵠⲆⵠΔΔΔ: "img/night-pebblecompo4.png",
    ΔΔⲆⲆᐃ: "img/night-pebblecompo5.png",
    ⵠⵠᐃᐃΔ: "img/night-pebblecompo6.png",
    ⲆΔᐃⲆⵠ: "img/night-pebblecompo7.png",
    ᐃΔⵠΔⵠΔΔ: "img/night-pebblecompo8.png",
    ΔΔⲆΔⲆᐃⲆ: "img/night-pebblecompo9.png",
    ⲆᐃⵠⵠⲆᐃᐃ: "img/night-pebblecompo10.png",
    ᐃⲆΔΔΔ: "img/night-pebblecompo11.png",
    Ⲇᐃᐃᐃᐃᐃⵠ: "img/night-pebblecompo12.png",
    ⲆΔΔᐃΔⵠΔ: "img/night-pebblecompo13.png",
    ⵠⵠⲆΔⵠᐃᐃ: "img/night-pebblecompo14.png",
    ᐃⵠⲆⵠⵠⲆⲆ: "img/night-pebblecompo15.png",
    ⵠⵠΔⵠΔⵠΔ: "img/night-pebblecompo16.png",
    ⵠⵠΔᐃᐃ: "img/night-pebblecompo17.png",
    ⵠⲆⵠΔⲆⵠⲆ: "img/night-pebblecompo18.png",
    ⲆⵠⵠᐃⲆⵠⵠ: "img/night-pebblecompo19.png",
    ᐃⲆⲆⲆᐃ: "img/night-pebblecompo20.png",
    ⵠⵠΔⵠᐃ: "img/night-pebblecompo21.png",
    ΔⵠⵠⵠⵠⲆⵠ: "img/night-pebblecompo22.png",
    ᐃΔΔⵠΔⲆⵠ: "img/night-pebblecompo23.png",
    ⲆΔⲆΔⲆⵠⲆ: "img/night-pebblecompo24.png",
    ΔⲆⲆⵠⲆ: "img/night-pebblecompo25.png",
    ΔᐃⵠΔⲆ: "img/night-pebblecompo26.png",
    ⵠⲆⵠⲆⲆΔΔ: "img/night-pebblecompo27.png",
    ⲆΔⵠⵠⲆ: "img/night-pebblecompo28.png",
    ⲆΔⲆⲆⲆᐃⵠ: "img/day-baby-mammoth.png",
    ⲆΔᐃΔᐃⲆⵠ: "img/day-baby-mammoth-tamed.png",
    ⵠᐃⲆⵠᐃⵠᐃ: "img/day-baby-mammoth-angry.png",
    ΔᐃᐃΔⵠᐃᐃ: "img/night-baby-mammoth.png",
    ⲆⲆΔᐃⲆⵠΔ: "img/night-baby-mammoth-tamed.png",
    ᐃΔᐃⲆⲆΔᐃ: "img/night-baby-mammoth-angry.png",
    ⵠⵠᐃⵠᐃⵠΔ: "img/inv-mammoth-out.png",
    ᐃⲆᐃⵠⵠⵠᐃ: "img/inv-mammoth-in.png",
    ⲆᐃⲆᐃΔⲆᐃ: "img/inv-mammoth-click.png",
    ᐃⲆⵠΔⲆᐃᐃ: "img/hurt-baby-mammoth.png",
    ΔⲆΔΔⵠⵠᐃ: "img/baby-mammoth-step.png",
    ΔᐃⲆΔⲆΔΔ: "img/day-flower-hat.png",
    ᐃᐃΔΔⵠᐃΔ: "img/night-flower-hat.png",
    ΔⲆΔⵠᐃΔⵠ: "img/inv-flower-hat-out.png",
    ⲆⵠᐃⲆΔⲆΔ: "img/inv-flower-hat-in.png",
    ⲆⲆⲆⲆΔΔⵠ: "img/inv-flower-hat-click.png",
    ΔᐃᐃⲆⵠⵠᐃ: "img/day-fur-hat.png",
    ᐃΔΔⵠⲆⵠᐃ: "img/night-fur-hat.png",
    ⵠΔⵠΔΔⵠⵠ: "img/inv-fur-hat-out.png",
    ΔΔⵠⲆⵠⵠΔ: "img/inv-fur-hat-in.png",
    ΔⲆΔΔⲆΔⵠ: "img/inv-fur-hat-click.png",
    ⲆⲆᐃΔΔⲆᐃ: "img/day-mammoth.png",
    ᐃⲆΔᐃΔΔᐃ: "img/night-mammoth.png",
    ⵠⵠΔᐃⵠΔᐃ: "img/hurt-mammoth.png",
    ⵠⲆΔᐃΔⵠΔ: "img/inv-mammoth-fur-out.png",
    ΔⵠΔⵠΔΔΔ: "img/inv-mammoth-fur-in.png",
    ᐃⵠⲆΔⵠΔⲆ: "img/inv-mammoth-fur-click.png",
    ᐃΔⵠⲆⵠᐃⲆ: "img/inv-wood-bow-out.png",
    ᐃᐃΔⲆⵠᐃΔ: "img/inv-wood-bow-in.png",
    ⲆⵠⵠᐃⵠⵠΔ: "img/inv-wood-bow-click.png",
    ⲆⲆᐃⲆΔᐃⵠ: "img/inv-wood-arrow-out.png",
    ᐃΔᐃⲆᐃⲆΔ: "img/inv-wood-arrow-in.png",
    ⵠⲆΔⲆⲆΔΔ: "img/inv-wood-arrow-click.png",
    ⵠᐃⵠᐃⵠⲆⵠ: "img/day-wood-bow2.png",
    ᐃᐃᐃΔⲆΔⵠ: "img/night-wood-bow2.png",
    ⲆᐃᐃΔⲆᐃᐃ: "img/day-wood-arrow.png",
    ⲆⲆⵠⵠΔΔⵠ: "img/night-wood-arrow.png",
    ᐃΔᐃᐃⵠⵠΔ: "img/inv-stone-bow-out.png",
    ΔΔⵠⵠᐃΔᐃ: "img/inv-stone-bow-in.png",
    ᐃⵠΔⵠⲆⲆΔ: "img/inv-stone-bow-click.png",
    ᐃⲆⵠⲆⵠⵠⵠ: "img/inv-stone-arrow-out.png",
    ⵠᐃΔⵠᐃΔⵠ: "img/inv-stone-arrow-in.png",
    ⲆΔⵠⲆⲆⵠⲆ: "img/inv-stone-arrow-click.png",
    ⵠⲆⲆⲆᐃⲆⲆ: "img/day-stone-bow.png",
    ᐃⵠⲆⵠⵠⲆΔ: "img/night-stone-bow.png",
    ⲆⲆⵠᐃⲆⲆⵠ: "img/day-stone-arrow.png",
    ᐃΔᐃⵠⲆⵠᐃ: "img/night-stone-arrow.png",
    ⵠⲆΔⵠᐃᐃᐃ: "img/inv-gold-bow-out.png",
    ᐃⵠⲆΔᐃⲆⵠ: "img/inv-gold-bow-in.png",
    ⵠᐃᐃᐃⵠΔΔ: "img/inv-gold-bow-click.png",
    ⲆⲆΔΔᐃᐃⲆ: "img/inv-gold-arrow-out.png",
    ᐃⲆᐃⵠⲆⵠⲆ: "img/inv-gold-arrow-in.png",
    ΔΔⲆⲆⵠΔᐃ: "img/inv-gold-arrow-click.png",
    ⲆΔᐃⲆⵠⵠⵠ: "img/day-gold-bow.png",
    ⵠΔᐃᐃⲆⲆΔ: "img/night-gold-bow.png",
    ⲆⲆᐃⲆⵠⵠᐃ: "img/day-gold-arrow.png",
    ⲆΔⵠΔⵠΔⵠ: "img/night-gold-arrow.png",
    ᐃᐃⲆⵠⲆⲆⲆ: "img/inv-diamond-bow-out.png",
    ⵠΔᐃΔΔⵠⵠ: "img/inv-diamond-bow-in.png",
    ΔⲆΔⵠΔⲆᐃ: "img/inv-diamond-bow-click.png",
    ⲆᐃΔᐃΔⲆᐃ: "img/inv-diamond-arrow-out.png",
    ⲆⲆⵠΔᐃᐃᐃ: "img/inv-diamond-arrow-in.png",
    ᐃⵠΔᐃⲆⵠΔ: "img/inv-diamond-arrow-click.png",
    ⵠᐃᐃΔⲆΔΔ: "img/day-diamond-bow.png",
    ⵠΔⲆⲆΔⵠⵠ: "img/night-diamond-bow.png",
    ΔⵠⲆᐃⲆᐃᐃ: "img/day-diamond-arrow.png",
    ΔⲆⲆⲆΔΔⵠ: "img/night-diamond-arrow.png",
    ᐃᐃΔΔᐃΔΔ: "img/inv-amethyst-bow-out.png",
    ⵠΔᐃⵠᐃΔᐃ: "img/inv-amethyst-bow-in.png",
    ΔᐃⵠΔⵠΔᐃ: "img/inv-amethyst-bow-click.png",
    ⲆΔⲆⵠⵠΔⵠ: "img/inv-amethyst-arrow-out.png",
    ⵠⲆΔΔΔⵠⲆ: "img/inv-amethyst-arrow-in.png",
    ᐃᐃⵠⵠⵠΔⵠ: "img/inv-amethyst-arrow-click.png",
    ᐃⲆⲆΔⵠΔᐃ: "img/day-amethyst-bow.png",
    ΔΔᐃⵠⵠⲆΔ: "img/night-amethyst-bow.png",
    ⵠⲆΔᐃⲆⵠⵠ: "img/day-amethyst-arrow.png",
    ΔⲆⲆⲆᐃΔⵠ: "img/night-amethyst-arrow.png",
    ⲆᐃᐃᐃⵠⵠⲆ: "img/inv-dragon-bow-out.png",
    ᐃⵠᐃⲆⲆΔᐃ: "img/inv-dragon-bow-in.png",
    ᐃᐃⵠᐃⵠᐃΔ: "img/inv-dragon-bow-click.png",
    ⲆⵠⲆⵠⲆⲆⵠ: "img/inv-dragon-arrow-out.png",
    ΔⲆⲆⵠⲆⲆⲆ: "img/inv-dragon-arrow-in.png",
    ΔᐃⲆⲆᐃᐃⲆ: "img/inv-dragon-arrow-click.png",
    ᐃᐃⲆΔⲆΔΔ: "img/day-dragon-bow.png",
    ⵠⵠΔᐃΔⲆᐃ: "img/night-dragon-bow.png",
    ⲆΔⲆᐃᐃΔᐃ: "img/day-dragon-arrow.png",
    ⵠⵠⲆⵠⲆⵠⲆ: "img/night-dragon-arrow.png",
    ⲆᐃᐃΔⲆⲆⵠ: "img/inv-reidite-bow-out.png",
    ⲆⲆᐃⵠⲆⲆΔ: "img/inv-reidite-bow-in.png",
    ᐃⲆᐃᐃΔⲆⵠ: "img/inv-reidite-bow-click.png",
    ΔⵠΔⲆⵠⲆⲆ: "img/inv-reidite-arrow-out.png",
    ΔᐃⲆⲆΔᐃᐃ: "img/inv-reidite-arrow-in.png",
    ᐃᐃᐃᐃⲆⲆΔ: "img/inv-reidite-arrow-click.png",
    ⵠⵠΔᐃⲆΔΔ: "img/day-reidite-bow.png",
    ᐃΔⲆⵠⲆᐃⵠ: "img/night-reidite-bow.png",
    ⵠᐃⵠⵠⵠΔΔ: "img/day-reidite-arrow.png",
    ᐃᐃⲆⵠⵠⵠᐃ: "img/night-reidite-arrow.png",
    ⲆⲆΔⲆΔΔⵠ: "img/inv-wooden-axe-out.png",
    ᐃⵠᐃⵠⲆⲆᐃ: "img/inv-wooden-axe-in.png",
    ᐃⵠᐃᐃⵠⵠⵠ: "img/inv-wooden-axe-click.png",
    ⲆⲆⲆⵠⲆΔⵠ: "img/day-wooden-axe.png",
    ⲆΔΔΔⵠᐃⲆ: "img/night-wooden-axe.png",
    ⲆⲆⵠᐃⵠᐃⵠ: "img/inv-stone-axe-out.png",
    ΔΔⵠⲆΔⵠᐃ: "img/inv-stone-axe-in.png",
    ⵠⵠⲆΔⵠⲆⲆ: "img/inv-stone-axe-click.png",
    ⵠⵠⲆΔᐃΔᐃ: "img/day-stone-axe.png",
    ᐃⲆΔΔᐃⲆΔ: "img/night-stone-axe.png",
    ⵠΔⲆⵠⲆᐃⵠ: "img/inv-golden-axe-out.png",
    ΔⲆⲆᐃⵠⲆΔ: "img/inv-golden-axe-in.png",
    ⵠⲆΔΔⵠⵠᐃ: "img/inv-golden-axe-click.png",
    ΔᐃᐃⵠΔⵠⵠ: "img/day-golden-axe.png",
    ΔⲆⵠⵠΔᐃⲆ: "img/night-golden-axe.png",
    ΔΔΔᐃⵠᐃΔ: "img/inv-diamond-axe-out.png",
    ⵠᐃᐃΔᐃⵠΔ: "img/inv-diamond-axe-in.png",
    ⵠᐃⵠⵠᐃⲆⲆ: "img/inv-diamond-axe-click.png",
    ⲆΔᐃΔΔⵠΔ: "img/day-diamond-axe.png",
    ᐃⲆᐃΔⲆⲆΔ: "img/night-diamond-axe.png",
    ⵠⵠⵠⲆⲆⲆΔ: "img/inv-amethyst-axe-out.png",
    ΔⵠⵠΔⲆᐃΔ: "img/inv-amethyst-axe-in.png",
    ⵠᐃⲆⵠᐃᐃⲆ: "img/inv-amethyst-axe-click.png",
    ⲆⲆⲆΔᐃΔⵠ: "img/day-amethyst-axe.png",
    ΔⲆΔⵠᐃᐃᐃ: "img/night-amethyst-axe.png",
    ᐃΔⵠᐃᐃᐃⵠ: "img/inv-reidite-axe-out.png",
    ⲆⵠⵠΔⵠⵠΔ: "img/inv-reidite-axe-in.png",
    ᐃΔΔᐃΔΔᐃ: "img/inv-reidite-axe-click.png",
    ΔΔⵠᐃΔΔΔ: "img/day-reidite-axe.png",
    ⲆⲆⵠⲆΔⵠᐃ: "img/night-reidite-axe.png",
    ⵠⲆᐃⵠΔⵠΔ: "img/bandage-activated.png",
    ⵠᐃΔΔΔⲆᐃ: "img/auto-feed.png",
    ⲆⲆΔᐃⵠᐃⵠ: "img/stop-regeneration.png",
    ⲆⲆΔⵠⵠⵠⲆ: "img/stop-regeneration2.png",
    ⲆⵠᐃᐃᐃⲆΔ: "img/day-wood-platform.png",
    ⲆᐃⵠΔΔⲆⵠ: "img/night-wood-platform.png",
    ⲆⲆΔⲆⵠⲆᐃ: "img/inv-wood-platform-in.png",
    ᐃⲆΔΔᐃⲆᐃ: "img/inv-wood-platform-out.png",
    ⵠᐃⲆΔᐃΔᐃ: "img/inv-wood-platform-click.png",
    ΔⵠⵠΔⲆⵠⲆ: "img/day-wood-shield.png",
    ⲆⵠⲆΔᐃΔᐃ: "img/night-wood-shield.png",
    ΔⵠΔⵠⵠᐃⲆ: "img/day-stone-shield.png",
    ⲆⲆⵠᐃⵠΔΔ: "img/night-stone-shield.png",
    ⵠᐃⵠⲆᐃⵠⲆ: "img/day-gold-shield.png",
    ⲆΔΔⵠⵠⲆΔ: "img/night-gold-shield.png",
    ΔⲆⵠᐃᐃᐃᐃ: "img/day-diamond-shield.png",
    ⲆⵠⲆⵠΔⲆᐃ: "img/night-diamond-shield.png",
    ᐃΔⵠⲆⲆⲆⲆ: "img/day-amethyst-shield.png",
    ᐃᐃᐃΔⲆᐃᐃ: "img/night-amethyst-shield.png",
    ΔⲆΔΔⲆΔᐃ: "img/day-reidite-shield.png",
    ΔⵠⲆᐃΔΔⵠ: "img/night-reidite-shield.png",
    ⲆΔᐃⲆⵠⵠⲆ: "img/inv-wood-shield-in.png",
    ⵠᐃⲆᐃⵠᐃⵠ: "img/inv-wood-shield-out.png",
    ⲆⲆⲆⵠⲆΔⲆ: "img/inv-wood-shield-click.png",
    ⲆⲆᐃᐃΔⵠⵠ: "img/inv-stone-shield-in.png",
    ⵠᐃᐃⲆⵠⵠⵠ: "img/inv-stone-shield-out.png",
    Ⲇⵠⵠᐃᐃᐃᐃ: "img/inv-stone-shield-click.png",
    ⲆⲆΔⲆᐃᐃⵠ: "img/inv-gold-shield-in.png",
    ⲆⲆΔᐃᐃⲆᐃ: "img/inv-gold-shield-out.png",
    ⲆⵠⵠᐃᐃᐃΔ: "img/inv-gold-shield-click.png",
    ⲆⵠⵠᐃΔᐃⲆ: "img/inv-diamond-shield-in.png",
    ⲆⵠᐃᐃᐃⵠⲆ: "img/inv-diamond-shield-out.png",
    ᐃᐃⲆⲆⵠᐃᐃ: "img/inv-diamond-shield-click.png",
    ⲆΔⲆⵠⲆⵠΔ: "img/inv-amethyst-shield-in.png",
    ᐃⵠᐃⲆᐃⲆᐃ: "img/inv-amethyst-shield-out.png",
    ΔⵠⲆⲆᐃⲆⵠ: "img/inv-amethyst-shield-click.png",
    ⵠⲆᐃᐃⲆⵠⵠ: "img/inv-reidite-shield-in.png",
    ⵠⲆΔⵠᐃΔⲆ: "img/inv-reidite-shield-out.png",
    ᐃΔⲆⵠΔⵠᐃ: "img/inv-reidite-shield-click.png",
    ⵠⲆᐃⲆΔΔⵠ: "img/day-machete.png",
    ⵠᐃⵠⵠᐃⲆⵠ: "img/night-machete.png",
    ᐃⲆⲆⵠᐃⲆⵠ: "img/inv-machete-in.png",
    ΔᐃΔⵠΔⲆⵠ: "img/inv-machete-out.png",
    ΔⲆⲆᐃΔΔᐃ: "img/inv-machete-click.png"
  };
  ⲆⵠⲆⵠΔᐃⵠ = [{}];
  ⲆⵠⲆⵠΔᐃⵠ[0].stringify = function (a) {
    var b = new Uint8Array(new ArrayBuffer(a.length));
    for (var c = xq; a.length > c; c++) {
      b[c] = a[c];
    }
    return b;
  };
  ⵠⲆⲆⲆᐃⵠΔ = {};
  ᐃⵠΔΔᐃⲆᐃᐃⲆ = {};
  for (var xt in Δᐃ) {
    ⵠⲆⲆⲆᐃⵠΔ[xt] = Δᐃ[xt];
  }
  ᐃΔ = [];
  const Gt = Ga;
  ⲆⲆⲆ = {};
  ⲆⲆⲆ.ΔⵠⵠⲆⲆ = 0;
  const Ht = Ol;
  ⲆⲆⲆ.ΔΔⲆᐃ = ig;
  ⲆⲆⲆ.ᐃⵠⲆⲆ = Ht;
  ⲆⲆⲆ.ⲆΔⲆⵠ = Er;
  const Jt = zn;
  const Kt = Pj;
  ⲆⲆⲆ.ⲆΔΔΔ = 4;
  ⲆⲆⲆ.ⲆⲆΔΔ = _j;
  const Lt = ws;
  ⲆⲆⲆ.ⵠⲆⵠⵠ = Ml;
  ⲆⲆⲆ.ᐃᐃΔΔⲆΔⵠ = 7;
  ⲆⲆⲆ.ⵠΔⵠⵠⲆ = 8;
  ΔⲆⲆΔ = {};
  ᐃΔᐃΔ = [];
  const Mt = Dq;
  ⲆᐃΔΔⵠΔᐃ = function (a, b) {
    for (var c = Aa; a.length > c; c++) {
      if (a[c].id === b) {
        return c;
      }
    }
    return -Kg;
  };
  var Nt = [];
  function Ot(a, b) {
    for (var c = yj; Nt.length > c; c += b) {
      var d = Nt[c];
      if (d[0] === a) {
        Pt(d[0], d[Ni], d[fh], d[Qn]);
      }
    }
  }
  function Pt(b, c, d, e) {
    var f = ᐃΔᐃΔ[b];
    if (f !== Mk) {
      for (var i = 0; i < qi; i++) {
        var j = f[c][i];
        var k = e * 193 / ff.ΔⲆᐃⵠᐃ;
        var m = d * 193 / ff.ΔⲆᐃᐃᐃ;
        var n = j.width / 3.5;
        var o = j.height / 3.5;
        ᐃΔ[818][i].drawImage(j, k - n / Ht, m - o / tk, n, o);
        k = e * 600 / ff.ΔⲆᐃⵠᐃ;
        m = d * 600 / ff.ΔⲆᐃᐃᐃ;
        n = j.width / 1.5;
        o = j.height / 1.5;
        ᐃΔ[819][i].drawImage(j, k - n / Nj, m - o / 2, n, o);
      }
    }
  }
  const Qt = cq;
  function St(a, b, c, d) {
    if (b) {
      a.fillStyle = b;
      a.fill();
    }
    if (c) {
      a.lineWidth = d;
      a.strokeStyle = c;
      a.stroke();
    }
  }
  function Tt(a, b, c, d, e, f) {
    if (d < br * f) {
      f = d / 2;
    }
    if (br * f > e) {
      f = e / qo;
    }
    if (Aa > f) {
      f = gl;
    }
    a.beginPath();
    a.moveTo(b + f, c);
    a.arcTo(b + d, c, b + d, c + e, f);
    a.arcTo(b + d, c + e, b, c + e, f);
    a.arcTo(b, c + e, b, c, f);
    a.arcTo(b, c, b + d, c, f);
    a.closePath();
  }
  ⲆᐃⵠΔⵠΔⵠ = function () {
    for (var b = tj; b < 2; b++) {
      ᐃΔ[818][b].clearRect(et, gl, 193, 193);
      ᐃΔ[818][b].drawImage(ᐃΔᐃΔ.MAP[b], 0, 0, 193, 193);
      ᐃΔ[819][b].clearRect(0, 0, 600, 600);
      ᐃΔ[819][b].drawImage(ᐃΔᐃΔ.MAP[b], 0, 0, 600, 600);
      for (var c = ff.ᐃᐃⵠᐃ.length - er; c >= 0; c--) {
        var d = ff.ᐃᐃⵠᐃ[c];
        var f = d.x1 * 193 / (ff.ΔⲆᐃⵠᐃ * 100);
        var j = d.y1 * 193 / (ff.ΔⲆᐃᐃᐃ * 100);
        var k = d.w * 193 / (mh * ff.ΔⲆᐃⵠᐃ);
        var m = d.ⵠΔⲆ * 193 / (ff.ΔⲆᐃᐃᐃ * 100);
        var p = d.x1 * 600 / (ff.ΔⲆᐃⵠᐃ * 100);
        var q = d.y1 * 600 / (Lr * ff.ΔⲆᐃᐃᐃ);
        var u = d.w * 600 / (ff.ΔⲆᐃⵠᐃ * mh);
        var v = d.ⵠΔⲆ * 600 / (ff.ΔⲆᐃᐃᐃ * Lr);
        if (ff.ⵠⵠⵠΔⲆ === d.ⲆⲆΔ) {
          ᐃΔ[818][b].drawImage(ᐃΔᐃΔ.FOREST[b], f, j, k, m);
          ᐃΔ[819][b].drawImage(ᐃΔᐃΔ.FOREST[b], p, q, u, v);
        }
        if (d.ⲆⲆΔ === ff.ⲆⲆᐃᐃᐃⵠⵠ) {
          ᐃΔ[818][b].drawImage(ᐃΔᐃΔ.WINTER[b], f, j, k, m);
          ᐃΔ[819][b].drawImage(ᐃΔᐃΔ.WINTER[b], p, q, u, v);
        }
        if (d.ⲆⲆΔ === ff.ⲆⵠΔᐃⵠⲆⲆ) {
          ᐃΔ[818][b].drawImage(ᐃΔᐃΔ.LAVA[b], f, j, k, m);
          ᐃΔ[819][b].drawImage(ᐃΔᐃΔ.LAVA[b], p, q, u, v);
        }
        if (ff.ⵠΔⲆᐃⵠⵠΔ === d.ⲆⲆΔ) {
          ᐃΔ[818][b].drawImage(ᐃΔᐃΔ.CAVE[b], f, j, k, m);
          ᐃΔ[819][b].drawImage(ᐃΔᐃΔ.CAVE[b], p, q, u, v);
        }
        if (d.ⲆⲆΔ === ff.ⲆᐃⲆⲆⵠⲆⵠ) {
          ᐃΔ[818][b].drawImage(ᐃΔᐃΔ.DESERT[b], f, j, k, m);
          ᐃΔ[819][b].drawImage(ᐃΔᐃΔ.DESERT[b], p, q, u, v);
        }
      }
    }
  };
  ΔΔⵠΔΔΔΔ = function () {
    ΔⲆⲆΔ = {
      ΔⲆᐃᐃⲆ: [{
        id: 0,
        ᐃⵠⵠ: Δᐃ.ᐃⵠⵠΔⲆᐃᐃ,
        ⵠⲆΔ: Δᐃ.ⲆⵠΔΔⵠᐃᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⵠᐃΔⲆⵠΔ,
        ᐃΔⵠⵠ: Δᐃ.ⲆᐃⵠⲆᐃᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔⵠⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Starver"
      }, {
        id: 3,
        ᐃⵠⵠ: Δᐃ.ᐃⵠⵠᐃⵠᐃᐃ,
        ⵠⲆΔ: Δᐃ.ⵠⲆᐃⲆⲆⲆΔ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠΔᐃΔⵠⲆᐃ,
        ᐃΔⵠⵠ: Δᐃ.ⲆᐃⵠᐃᐃΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔⵠⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Angry"
      }, {
        id: On,
        ᐃⵠⵠ: Δᐃ.ⲆΔΔⲆΔᐃⵠ,
        ⵠⲆΔ: Δᐃ.ᐃᐃⵠⲆⵠⵠΔ,
        ⵠᐃⵠᐃ: Δᐃ.ΔΔⵠᐃᐃⲆⲆ,
        ᐃΔⵠⵠ: Δᐃ.ⵠⲆⵠⲆᐃⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔⵠⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Sad"
      }, {
        id: 9,
        ᐃⵠⵠ: Δᐃ.ᐃⲆΔᐃΔⲆⲆ,
        ⵠⲆΔ: Δᐃ.ΔⲆⲆⲆΔΔⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃᐃᐃⲆⲆΔᐃ,
        ᐃΔⵠⵠ: Δᐃ.ⲆⵠᐃⵠΔΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔⵠⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Happy 1"
      }, {
        id: 1,
        ᐃⵠⵠ: Δᐃ.ᐃⲆⵠⵠⲆⵠᐃ,
        ⵠⲆΔ: Δᐃ.ⵠⲆᐃⲆⵠΔᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆⲆⵠⲆⵠᐃⲆ,
        ᐃΔⵠⵠ: Δᐃ.ⲆⵠⲆⲆᐃᐃⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Starve.io",
        name: "What?"
      }, {
        id: 4,
        ᐃⵠⵠ: Δᐃ.ᐃᐃⵠᐃᐃΔⲆ,
        ⵠⲆΔ: Δᐃ.ⲆⵠⵠⵠΔⵠⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃΔᐃⵠⵠⲆᐃ,
        ᐃΔⵠⵠ: Δᐃ.ΔΔᐃⵠΔⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Starve.io",
        name: "Suspicious"
      }, {
        id: zr,
        ᐃⵠⵠ: Δᐃ.ΔᐃΔⵠΔⲆⲆ,
        ⵠⲆΔ: Δᐃ.ᐃᐃᐃᐃⵠⲆΔ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃⲆᐃⵠⵠⲆⲆ,
        ᐃΔⵠⵠ: Δᐃ.ΔⵠΔᐃⵠⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Starve.io",
        name: "Scar"
      }, {
        id: 6,
        ᐃⵠⵠ: Δᐃ.ᐃⵠᐃⵠⲆᐃⲆ,
        ⵠⲆΔ: Δᐃ.ⲆⲆᐃᐃⲆⲆⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠⵠⵠΔΔⵠⵠ,
        ᐃΔⵠⵠ: Δᐃ.ΔⲆᐃⲆⵠⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Starve.io",
        name: "In Trouble"
      }, {
        id: 7,
        ᐃⵠⵠ: Δᐃ.ΔᐃΔΔΔᐃΔ,
        ⵠⲆΔ: Δᐃ.ᐃⵠⲆΔⵠⵠΔ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆΔⵠⲆΔΔΔ,
        ᐃΔⵠⵠ: Δᐃ.ⵠᐃⲆΔⲆΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Starve.io",
        name: "Cute"
      }, {
        id: 8,
        ᐃⵠⵠ: Δᐃ.ᐃΔⲆⵠⲆⵠᐃ,
        ⵠⲆΔ: Δᐃ.ⲆᐃᐃΔᐃⲆΔ,
        ⵠᐃⵠᐃ: Δᐃ.ΔᐃⵠᐃⵠⲆⲆ,
        ᐃΔⵠⵠ: Δᐃ.ΔⲆᐃⲆᐃᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Starve.io",
        name: "Bored 1"
      }, {
        id: 10,
        ᐃⵠⵠ: Δᐃ.ΔᐃΔⵠᐃᐃᐃ,
        ⵠⲆΔ: Δᐃ.ⲆⲆⵠⲆᐃΔⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆⵠⲆΔᐃⵠⵠ,
        ᐃΔⵠⵠ: Δᐃ.ⵠΔⲆⵠΔᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Starve.io",
        name: "Happy 2"
      }, {
        id: 11,
        ᐃⵠⵠ: Δᐃ.ᐃⵠⲆⲆΔⵠⵠ,
        ⵠⲆΔ: Δᐃ.ⵠⵠⵠᐃⲆΔⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆΔⲆⲆⲆⵠⵠ,
        ᐃΔⵠⵠ: Δᐃ.ⲆⲆΔⲆⲆΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Starve.io",
        name: "Crazy"
      }, {
        id: Vr,
        ᐃⵠⵠ: Δᐃ.ΔᐃᐃᐃⲆᐃᐃ,
        ⵠⲆΔ: Δᐃ.ΔⵠᐃᐃᐃᐃΔ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃᐃᐃⲆᐃΔΔ,
        ᐃΔⵠⵠ: Δᐃ.ⵠⵠΔⵠⲆΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Starve.io",
        name: "Happy 3"
      }, {
        id: 13,
        ᐃⵠⵠ: Δᐃ.ⲆⲆΔΔⲆᐃⲆ,
        ⵠⲆΔ: Δᐃ.ᐃⲆⲆⵠᐃᐃΔ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃⲆⵠᐃᐃᐃⲆ,
        ᐃΔⵠⵠ: Δᐃ.ΔΔⲆΔⵠᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Starve.io",
        name: "Very Cute"
      }, {
        id: ak,
        ᐃⵠⵠ: Δᐃ.ⵠⲆΔⲆΔᐃⲆ,
        ⵠⲆΔ: Δᐃ.ⵠΔⲆⲆⲆⵠⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆⵠΔΔΔΔᐃ,
        ᐃΔⵠⵠ: Δᐃ.ⵠⵠⲆΔⵠⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Starve.io",
        name: "Curious"
      }, {
        id: Ws,
        ᐃⵠⵠ: Δᐃ.ⵠΔΔⲆᐃᐃⵠ,
        ⵠⲆΔ: Δᐃ.ᐃⵠΔᐃΔⵠⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃⲆⲆⵠⲆΔⵠ,
        ᐃΔⵠⵠ: Δᐃ.ⲆΔⲆᐃᐃⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Starve.io",
        name: "Bored 2"
      }, {
        id: 16,
        ᐃⵠⵠ: Δᐃ.ⲆⵠⵠⲆΔΔⵠ,
        ⵠⲆΔ: Δᐃ.ᐃⵠⵠⵠⲆᐃΔ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠᐃΔⵠΔⵠⵠ,
        ᐃΔⵠⵠ: Δᐃ.ⵠᐃᐃᐃΔΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Starve.io",
        name: "Happy 4"
      }, {
        id: 17,
        ᐃⵠⵠ: Δᐃ.ⲆΔΔⵠᐃⲆⵠ,
        ⵠⲆΔ: Δᐃ.ⲆⲆⲆⵠΔΔᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆΔⲆⲆᐃᐃⵠ,
        ᐃΔⵠⵠ: Δᐃ.ᐃᐃᐃΔΔᐃᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Starve.io",
        name: "Scar 2"
      }, {
        id: 18,
        ᐃⵠⵠ: Δᐃ.ⵠⵠⲆⲆⲆⲆᐃ,
        ⵠⲆΔ: Δᐃ.ⲆᐃᐃⵠΔᐃΔ,
        ⵠᐃⵠᐃ: Δᐃ.ΔᐃⲆᐃⲆᐃⵠ,
        ᐃΔⵠⵠ: Δᐃ.ΔⵠⲆⲆΔⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Starve.io",
        name: "Sick"
      }, {
        id: Dl,
        ᐃⵠⵠ: Δᐃ.ᐃΔⲆⲆΔΔᐃ,
        ⵠⲆΔ: Δᐃ.ΔΔᐃᐃᐃᐃⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠΔⵠᐃⵠⵠᐃ,
        ᐃΔⵠⵠ: Δᐃ.ᐃΔⲆⲆᐃᐃⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Starve.io",
        name: "Somnambule"
      }, {
        id: 24,
        ᐃⵠⵠ: Δᐃ.ⲆⵠΔⵠⵠⲆⵠ,
        ⵠⲆΔ: Δᐃ.ⵠΔᐃᐃⵠⲆᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⲆⵠᐃⵠⵠⵠ,
        ᐃΔⵠⵠ: Δᐃ.ᐃᐃΔⵠΔΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Pixelbitie",
        name: "Feel Bad"
      }, {
        id: 23,
        ᐃⵠⵠ: Δᐃ.ᐃⵠΔⵠᐃΔⲆ,
        ⵠⲆΔ: Δᐃ.ⲆⵠΔΔΔⲆᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠᐃⵠΔᐃⵠᐃ,
        ᐃΔⵠⵠ: Δᐃ.ᐃⵠᐃᐃΔΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Pixelbitie",
        name: "Mmmh."
      }, {
        id: 103,
        ᐃⵠⵠ: Δᐃ.ΔΔᐃⲆⲆΔΔ,
        ⵠⲆΔ: Δᐃ.ⵠⲆᐃⵠᐃΔᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠⵠⵠᐃⲆⵠⵠ,
        ᐃΔⵠⵠ: Δᐃ.ⲆⲆⵠⵠᐃΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "pizza wa",
        name: "Panic"
      }, {
        id: 105,
        ᐃⵠⵠ: Δᐃ.ⵠⵠⵠᐃΔΔⲆ,
        ⵠⲆΔ: Δᐃ.ᐃⵠΔΔⵠⵠⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆᐃᐃⵠⵠᐃΔ,
        ᐃΔⵠⵠ: Δᐃ.ᐃⵠΔᐃΔΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "pizza wa",
        name: "Hypnotic"
      }, {
        id: 106,
        ᐃⵠⵠ: Δᐃ.ⵠΔΔⲆᐃΔᐃ,
        ⵠⲆΔ: Δᐃ.ΔΔⲆⲆⵠΔΔ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⲆⲆΔⲆⲆΔ,
        ᐃΔⵠⵠ: Δᐃ.ⲆⲆⲆΔⵠⲆⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "pizza wa",
        name: "Stars in the eyes"
      }, {
        id: 104,
        ᐃⵠⵠ: Δᐃ.ΔΔΔⵠⵠΔᐃ,
        ⵠⲆΔ: Δᐃ.ⵠⲆᐃΔⲆⲆⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠΔⵠⵠⵠᐃΔ,
        ᐃΔⵠⵠ: Δᐃ.ⵠⲆⲆⵠⲆⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "pizza wa",
        name: "Scared at night"
      }, {
        id: Dh,
        ᐃⵠⵠ: Δᐃ.ⲆⲆᐃⵠΔⲆᐃ,
        ⵠⲆΔ: Δᐃ.ⲆΔⲆⵠΔⲆᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃᐃⲆΔΔⲆΔ,
        ᐃΔⵠⵠ: Δᐃ.ⲆⲆΔⵠᐃⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Vampire"
      }, {
        id: 21,
        ᐃⵠⵠ: Δᐃ.ᐃⵠⵠΔⵠΔⵠ,
        ⵠⲆΔ: Δᐃ.ⵠΔⵠᐃΔᐃⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃᐃΔᐃⲆⵠΔ,
        ᐃΔⵠⵠ: Δᐃ.ᐃⵠᐃΔΔⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Zombie"
      }, {
        id: 22,
        ᐃⵠⵠ: Δᐃ.ⲆⵠΔᐃΔⵠⵠ,
        ⵠⲆΔ: Δᐃ.ᐃⲆⲆΔⵠⲆⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⵠΔΔⵠⲆΔ,
        ᐃΔⵠⵠ: Δᐃ.ⲆⲆⵠᐃⲆΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Pixelbitie",
        name: "Devaster"
      }, {
        id: 116,
        ᐃⵠⵠ: Δᐃ.ⵠⵠⲆᐃᐃᐃⵠ,
        ⵠⲆΔ: Δᐃ.ΔΔⲆΔⲆᐃⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃᐃⵠⵠⵠⵠᐃ,
        ᐃΔⵠⵠ: Δᐃ.ⵠᐃⵠⲆⵠⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Fukss",
        name: "Dead Devaster"
      }, {
        id: 27,
        ᐃⵠⵠ: Δᐃ.ⵠⲆᐃᐃⲆΔᐃ,
        ⵠⲆΔ: Δᐃ.ⵠᐃⲆⲆᐃΔᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠᐃⲆΔΔⲆΔ,
        ᐃΔⵠⵠ: Δᐃ.ᐃⲆⵠΔⲆΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Winter",
        name: "Cactus"
      }, {
        id: 28,
        ᐃⵠⵠ: Δᐃ.ⲆΔᐃⲆⵠⵠᐃ,
        ⵠⲆΔ: Δᐃ.ΔⵠᐃⲆⵠᐃⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠᐃᐃΔΔΔⵠ,
        ᐃΔⵠⵠ: Δᐃ.ᐃⲆᐃⲆⵠⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "pizza wa",
        name: "Bee"
      }, {
        id: 49,
        ᐃⵠⵠ: Δᐃ.ᐃⵠΔⵠᐃᐃᐃ,
        ⵠⲆΔ: Δᐃ.ⲆΔⵠᐃᐃⵠⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆᐃΔΔΔⲆⵠ,
        ᐃΔⵠⵠ: Δᐃ.ⲆⲆⵠⵠΔⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Camo Skin"
      }, {
        id: 58,
        ᐃⵠⵠ: Δᐃ.ΔᐃᐃⲆᐃΔΔ,
        ⵠⲆΔ: Δᐃ.ᐃⲆⵠΔⲆΔⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆΔᐃΔᐃⵠⲆ,
        ᐃΔⵠⵠ: Δᐃ.ΔᐃⵠᐃᐃⲆⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Blue Limax Skin"
      }, {
        id: 59,
        ᐃⵠⵠ: Δᐃ.ΔΔΔⲆⵠᐃⲆ,
        ⵠⲆΔ: Δᐃ.ᐃⵠΔᐃᐃΔⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆΔⵠᐃΔΔⵠ,
        ᐃΔⵠⵠ: Δᐃ.ⲆΔΔⲆΔⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Red Limax Skin"
      }, {
        id: 94,
        ᐃⵠⵠ: Δᐃ.ⲆᐃⵠⲆΔⲆᐃ,
        ⵠⲆΔ: Δᐃ.ᐃⵠᐃΔᐃᐃⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠΔⲆⲆΔⵠᐃ,
        ᐃΔⵠⵠ: Δᐃ.ⵠⲆΔⲆⵠΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Mr. Pumpkin"
      }, {
        id: 109,
        ᐃⵠⵠ: Δᐃ.ᐃⵠᐃΔⵠⲆⲆ,
        ⵠⲆΔ: Δᐃ.ᐃⲆᐃⲆⵠⵠᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆⵠᐃⵠΔⵠΔ,
        ᐃΔⵠⵠ: Δᐃ.ΔΔⵠⵠⵠⵠⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "pizza wa",
        name: "Wood"
      }, {
        id: 114,
        ᐃⵠⵠ: Δᐃ.ΔᐃⲆⵠⲆⵠⲆ,
        ⵠⲆΔ: Δᐃ.ᐃⵠᐃΔⵠⵠⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃⲆⵠΔⵠΔⲆ,
        ᐃΔⵠⵠ: Δᐃ.ⵠⵠᐃⲆⲆΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "pizza wa",
        name: "Zebra"
      }, {
        id: 120,
        ᐃⵠⵠ: Δᐃ.ⵠⲆⲆᐃΔⲆΔ,
        ⵠⲆΔ: Δᐃ.ΔΔᐃΔⵠΔⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆⲆΔΔΔⵠⲆ,
        ᐃΔⵠⵠ: Δᐃ.ⵠᐃᐃⵠᐃΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "CrysTal",
        name: "Tiger"
      }, {
        id: 134,
        ᐃⵠⵠ: Δᐃ.ΔⲆᐃⵠⲆⲆΔ,
        ⵠⲆΔ: Δᐃ.ⵠᐃⵠⲆᐃⲆᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆᐃᐃⵠⵠᐃⲆ,
        ᐃΔⵠⵠ: Δᐃ.ᐃⵠⵠᐃⲆⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Franchestcreator",
        name: "Day or Night"
      }, {
        id: 135,
        ᐃⵠⵠ: Δᐃ.ᐃⲆⲆⲆᐃⲆΔ,
        ⵠⲆΔ: Δᐃ.ⵠᐃΔⵠⵠⲆⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ΔᐃᐃᐃⲆⵠᐃ,
        ᐃΔⵠⵠ: Δᐃ.ⵠⲆⵠⲆᐃΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Poinet",
        name: "Square Starver"
      }, {
        id: 136,
        ᐃⵠⵠ: Δᐃ.ⲆⲆΔⲆⵠᐃΔ,
        ⵠⲆΔ: Δᐃ.ΔⵠΔᐃΔΔⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃⲆᐃⲆⵠⵠⵠ,
        ᐃΔⵠⵠ: Δᐃ.ᐃᐃⵠΔⲆΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Voodoo Doll"
      }, {
        id: 137,
        ᐃⵠⵠ: Δᐃ.ⵠΔΔⵠⵠⵠΔ,
        ⵠⲆΔ: Δᐃ.ⲆⲆΔΔⵠΔⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃΔᐃⵠⵠⵠΔ,
        ᐃΔⵠⵠ: Δᐃ.ⵠΔΔⲆᐃᐃᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Frankenstein"
      }, {
        id: 138,
        ᐃⵠⵠ: Δᐃ.ΔᐃⵠΔᐃΔⵠ,
        ⵠⲆΔ: Δᐃ.ⵠᐃΔⵠΔⵠⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆᐃⵠⵠᐃΔⵠ,
        ᐃΔⵠⵠ: Δᐃ.ⵠⵠᐃⲆΔⵠⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Old Mummy"
      }, {
        id: 139,
        ᐃⵠⵠ: Δᐃ.ⲆΔΔᐃΔⵠᐃ,
        ⵠⲆΔ: Δᐃ.ᐃΔⵠⲆⲆⵠΔ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆΔⵠⲆΔⲆⲆ,
        ᐃΔⵠⵠ: Δᐃ.ΔⵠⵠᐃΔΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Werewolf"
      }, {
        id: 140,
        ᐃⵠⵠ: Δᐃ.ᐃᐃⵠⲆⵠΔⲆ,
        ⵠⲆΔ: Δᐃ.ᐃⵠⵠⲆΔⵠᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠΔⵠᐃΔⵠⲆ,
        ᐃΔⵠⵠ: Δᐃ.ⵠⲆⵠⲆᐃΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Old Cthulhu"
      }, {
        id: 141,
        ᐃⵠⵠ: Δᐃ.ⲆΔᐃⵠᐃⵠⲆ,
        ⵠⲆΔ: Δᐃ.ᐃΔᐃⲆⵠⲆᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆⵠⲆᐃⲆⲆΔ,
        ᐃΔⵠⵠ: Δᐃ.ⵠⵠⲆᐃⵠⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Sea Man"
      }, {
        id: 142,
        ᐃⵠⵠ: Δᐃ.ΔΔΔΔᐃⲆᐃ,
        ⵠⲆΔ: Δᐃ.ΔⵠⲆⲆⵠΔᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃΔΔΔΔΔⵠ,
        ᐃΔⵠⵠ: Δᐃ.ⵠᐃⵠΔΔⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Old Pumpkin"
      }, {
        id: 148,
        ᐃⵠⵠ: Δᐃ.ⲆᐃⵠᐃᐃᐃⲆ,
        ⵠⲆΔ: Δᐃ.ⲆᐃⵠᐃⲆⵠⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆⵠᐃΔΔᐃⵠ,
        ᐃΔⵠⵠ: Δᐃ.ᐃⵠⵠⲆΔⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Old Snowman"
      }, {
        id: 149,
        ᐃⵠⵠ: Δᐃ.ⲆⲆᐃⵠⵠⲆΔ,
        ⵠⲆΔ: Δᐃ.ΔⲆⵠⵠΔΔΔ,
        ⵠᐃⵠᐃ: Δᐃ.ΔᐃⵠΔⲆⲆΔ,
        ᐃΔⵠⵠ: Δᐃ.ⲆΔΔᐃⲆᐃΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Old Christmas Tree Man"
      }, {
        id: 150,
        ᐃⵠⵠ: Δᐃ.ΔΔᐃⵠⲆᐃⲆ,
        ⵠⲆΔ: Δᐃ.ΔΔΔⲆᐃΔΔ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆΔⲆⲆΔΔⵠ,
        ᐃΔⵠⵠ: Δᐃ.ΔΔΔΔΔⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Old Mrs Bell"
      }, {
        id: 151,
        ᐃⵠⵠ: Δᐃ.ⲆΔⲆⲆⵠΔⵠ,
        ⵠⲆΔ: Δᐃ.ⲆΔⲆⲆⵠᐃⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠⲆᐃⵠΔΔΔ,
        ᐃΔⵠⵠ: Δᐃ.ᐃΔⵠⵠⲆΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Old Elfy"
      }, {
        id: 152,
        ᐃⵠⵠ: Δᐃ.ⲆᐃΔΔΔΔᐃ,
        ⵠⲆΔ: Δᐃ.ⵠⲆᐃᐃⵠΔᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⲆⲆⵠᐃᐃⲆ,
        ᐃΔⵠⵠ: Δᐃ.ⵠⲆⲆᐃⵠᐃᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Old Mr Present"
      }, {
        id: 153,
        ᐃⵠⵠ: Δᐃ.ⵠⲆΔΔⲆⵠⲆ,
        ⵠⲆΔ: Δᐃ.ΔⲆᐃᐃⵠᐃⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ΔᐃᐃΔⲆᐃⵠ,
        ᐃΔⵠⵠ: Δᐃ.ᐃⵠⵠⵠᐃⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "My Dear Old Deer"
      }, {
        id: 154,
        ᐃⵠⵠ: Δᐃ.ⲆᐃΔⵠᐃΔⲆ,
        ⵠⲆΔ: Δᐃ.ⵠⵠⵠΔᐃⵠᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠΔΔΔⵠⵠΔ,
        ᐃΔⵠⵠ: Δᐃ.ᐃⵠⲆᐃⵠⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Mr Angel"
      }, {
        id: 155,
        ᐃⵠⵠ: Δᐃ.ΔΔΔΔⵠᐃᐃ,
        ⵠⲆΔ: Δᐃ.ΔᐃΔⲆᐃⲆⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆⲆᐃⵠⵠⵠⲆ,
        ᐃΔⵠⵠ: Δᐃ.ⲆΔⵠᐃᐃᐃᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Mr Ice Cube"
      }, {
        id: 156,
        ᐃⵠⵠ: Δᐃ.ΔᐃⵠⲆⲆᐃⲆ,
        ⵠⲆΔ: Δᐃ.ⵠⲆⵠᐃⲆΔⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⲆⵠᐃᐃⲆⲆ,
        ᐃΔⵠⵠ: Δᐃ.ⲆⵠΔΔΔΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Mr Snowman"
      }, {
        id: 159,
        ᐃⵠⵠ: Δᐃ.ⲆⲆᐃⵠⵠⵠΔ,
        ⵠⲆΔ: Δᐃ.ⵠΔⵠᐃⵠᐃᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⵠⲆⵠΔⵠᐃ,
        ᐃΔⵠⵠ: Δᐃ.ᐃᐃⵠⵠⲆΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "CrysTal",
        name: "Crystal Sky Skin"
      }, {
        id: 167,
        ᐃⵠⵠ: Δᐃ.ⵠⲆⵠⲆᐃⵠⲆ,
        ⵠⲆΔ: Δᐃ.ΔᐃΔᐃΔⵠⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃᐃⵠⵠⵠᐃᐃ,
        ᐃΔⵠⵠ: Δᐃ.ᐃᐃΔⲆⵠⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Franchestcreator",
        name: "Radioactive Starver"
      }, {
        id: 169,
        ᐃⵠⵠ: Δᐃ.ⵠᐃΔᐃᐃⲆᐃ,
        ⵠⲆΔ: Δᐃ.ⲆΔΔⵠⵠᐃⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ΔΔⲆⵠᐃᐃᐃ,
        ᐃΔⵠⵠ: Δᐃ.ⵠᐃⲆᐃⲆⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "TheScaryBlaze",
        name: "Eaten Cookie"
      }, {
        id: 170,
        ᐃⵠⵠ: Δᐃ.ⵠΔΔΔᐃⵠᐃ,
        ⵠⲆΔ: Δᐃ.ⵠΔᐃᐃΔᐃⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠᐃⲆᐃᐃⵠⲆ,
        ᐃΔⵠⵠ: Δᐃ.ⵠΔⵠΔᐃⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "aloner",
        name: "Blob Thing"
      }, {
        id: 172,
        ᐃⵠⵠ: Δᐃ.ⲆⲆⲆΔⵠᐃⵠ,
        ⵠⲆΔ: Δᐃ.ⲆⲆⵠΔᐃΔⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃΔⲆⲆΔⲆⲆ,
        ᐃΔⵠⵠ: Δᐃ.ⲆᐃΔᐃⲆⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "aloner",
        name: "Machine Mask"
      }, {
        id: 29,
        ᐃⵠⵠ: Δᐃ.ΔΔⲆⲆΔΔⵠ,
        ⵠⲆΔ: Δᐃ.ΔⵠΔΔⵠΔⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆΔᐃΔᐃΔⲆ,
        ᐃΔⵠⵠ: Δᐃ.ᐃⲆΔΔΔⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Pixelbitie",
        name: "Lollipop 1"
      }, {
        id: 30,
        ᐃⵠⵠ: Δᐃ.ⵠⵠⲆⵠΔⲆᐃ,
        ⵠⲆΔ: Δᐃ.ΔΔⵠΔⵠᐃⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠⲆⲆⵠΔⵠⵠ,
        ᐃΔⵠⵠ: Δᐃ.ⲆᐃⵠΔᐃΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Lollipop 2"
      }, {
        id: 31,
        ᐃⵠⵠ: Δᐃ.ᐃⲆⲆΔⲆⲆᐃ,
        ⵠⲆΔ: Δᐃ.ⲆΔⵠⵠⲆⵠⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⵠⲆΔⲆᐃⵠ,
        ᐃΔⵠⵠ: Δᐃ.ᐃᐃᐃΔᐃⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Lollipop 3"
      }, {
        id: 32,
        ᐃⵠⵠ: Δᐃ.ᐃⲆΔⲆᐃⲆΔ,
        ⵠⲆΔ: Δᐃ.ᐃⵠⵠⲆⵠⲆᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ΔᐃΔⵠⲆΔⵠ,
        ᐃΔⵠⵠ: Δᐃ.ᐃⲆⵠᐃΔⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Lollipop 4"
      }, {
        id: 33,
        ᐃⵠⵠ: Δᐃ.ⲆΔⵠⲆⵠⲆⲆ,
        ⵠⲆΔ: Δᐃ.ⲆΔⵠΔⵠⵠᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ΔᐃᐃΔⵠⵠΔ,
        ᐃΔⵠⵠ: Δᐃ.ⲆᐃⲆᐃⵠΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Sushui",
        name: "Yellow Bird"
      }, {
        id: 34,
        ᐃⵠⵠ: Δᐃ.ⵠᐃⵠΔⲆⵠΔ,
        ⵠⲆΔ: Δᐃ.ⲆΔⵠᐃⵠᐃⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⵠΔⲆⲆⵠΔ,
        ᐃΔⵠⵠ: Δᐃ.ΔⲆΔⵠΔΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Sushui",
        name: "Red Bird"
      }, {
        id: 35,
        ᐃⵠⵠ: Δᐃ.ΔⲆⲆⲆⵠⲆΔ,
        ⵠⲆΔ: Δᐃ.ᐃᐃⲆⲆⵠⲆⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃⲆᐃᐃⵠᐃΔ,
        ᐃΔⵠⵠ: Δᐃ.ⵠⵠᐃᐃⲆⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Sushui",
        name: "Blue Bird"
      }, {
        id: 37,
        ᐃⵠⵠ: Δᐃ.ⲆΔⲆⲆⲆⲆⲆ,
        ⵠⲆΔ: Δᐃ.ΔᐃΔⵠΔΔᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⵠⲆᐃⵠⲆΔ,
        ᐃΔⵠⵠ: Δᐃ.ⵠⵠΔⵠᐃⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Winter",
        name: "Owl"
      }, {
        id: 52,
        ᐃⵠⵠ: Δᐃ.ⵠΔⲆΔⲆⲆⲆ,
        ⵠⲆΔ: Δᐃ.ᐃᐃΔΔⵠⲆΔ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⵠⲆΔᐃᐃᐃ,
        ᐃΔⵠⵠ: Δᐃ.ⵠΔᐃⲆⵠᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Nemo"
      }, {
        id: 53,
        ᐃⵠⵠ: Δᐃ.ᐃᐃⲆⲆⵠᐃΔ,
        ⵠⲆΔ: Δᐃ.ᐃΔⵠⲆⲆⵠⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆΔᐃᐃⵠᐃⵠ,
        ᐃΔⵠⵠ: Δᐃ.ΔᐃⲆᐃΔⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Mr. Bread"
      }, {
        id: 74,
        ᐃⵠⵠ: Δᐃ.ⲆΔⵠΔⲆᐃᐃ,
        ⵠⲆΔ: Δᐃ.ᐃΔΔⵠΔΔᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃΔΔᐃⵠⵠΔ,
        ᐃΔⵠⵠ: Δᐃ.ⵠΔᐃⵠᐃⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Communist & Taco4Life",
        name: "Mr. Bread 2"
      }, {
        id: 75,
        ᐃⵠⵠ: Δᐃ.ⲆⵠᐃⲆⵠⲆⵠ,
        ⵠⲆΔ: Δᐃ.ⲆᐃⲆᐃⵠΔⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⲆᐃᐃⲆΔΔ,
        ᐃΔⵠⵠ: Δᐃ.ⲆⲆⵠⲆⲆΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Communist & Taco4Life",
        name: "Mr. Bread 3"
      }, {
        id: 60,
        ᐃⵠⵠ: Δᐃ.ᐃⲆᐃⵠᐃᐃⲆ,
        ⵠⲆΔ: Δᐃ.ⵠΔᐃΔⵠⵠᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⵠⵠΔⲆᐃⲆ,
        ᐃΔⵠⵠ: Δᐃ.Δᐃⵠⵠᐃᐃᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Red Berry"
      }, {
        id: 61,
        ᐃⵠⵠ: Δᐃ.ⵠᐃⲆⲆⲆⵠⲆ,
        ⵠⲆΔ: Δᐃ.ⵠⵠⵠⵠⲆΔᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠΔᐃⵠΔⵠⲆ,
        ᐃΔⵠⵠ: Δᐃ.ΔⵠⵠᐃᐃⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Old Berry"
      }, {
        id: 70,
        ᐃⵠⵠ: Δᐃ.ᐃⲆᐃⲆⵠΔΔ,
        ⵠⲆΔ: Δᐃ.ᐃΔⲆΔΔᐃⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆⲆΔⵠᐃⵠΔ,
        ᐃΔⵠⵠ: Δᐃ.ΔᐃⲆⲆⵠⵠⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Cake"
      }, {
        id: 71,
        ᐃⵠⵠ: Δᐃ.ΔᐃᐃⵠⲆⵠᐃ,
        ⵠⲆΔ: Δᐃ.ⲆᐃᐃᐃⵠⲆΔ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆᐃΔᐃᐃⵠⵠ,
        ᐃΔⵠⵠ: Δᐃ.ⵠⵠᐃⵠΔΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Christmas Cake"
      }, {
        id: 77,
        ᐃⵠⵠ: Δᐃ.ΔΔᐃⲆᐃΔⵠ,
        ⵠⲆΔ: Δᐃ.ⵠᐃⲆⵠΔⵠⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆΔᐃΔⲆΔᐃ,
        ᐃΔⵠⵠ: Δᐃ.ⲆΔⵠⵠᐃⲆⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Pancakez",
        name: "Mr. Pancake"
      }, {
        id: 87,
        ᐃⵠⵠ: Δᐃ.ᐃⲆⵠᐃΔⲆᐃ,
        ⵠⲆΔ: Δᐃ.ᐃⲆᐃⵠᐃΔⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆⲆᐃᐃⲆΔΔ,
        ᐃΔⵠⵠ: Δᐃ.ⵠⲆⲆΔᐃⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Mr. Taco"
      }, {
        id: 78,
        ᐃⵠⵠ: Δᐃ.ⲆΔΔΔⲆᐃⵠ,
        ⵠⲆΔ: Δᐃ.ᐃⲆⵠᐃⲆᐃⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⵠᐃⲆⲆⵠᐃ,
        ᐃΔⵠⵠ: Δᐃ.ᐃΔⲆⵠⵠΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Mr. Bottle"
      }, {
        id: 79,
        ᐃⵠⵠ: Δᐃ.ᐃᐃΔᐃⲆᐃⲆ,
        ⵠⲆΔ: Δᐃ.ΔⵠⵠⲆⲆΔΔ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⲆⲆⵠⲆᐃⵠ,
        ᐃΔⵠⵠ: Δᐃ.ΔᐃⵠⵠΔᐃΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Mr. Bottle 2"
      }, {
        id: 97,
        ᐃⵠⵠ: Δᐃ.ᐃΔⵠΔⲆⲆᐃ,
        ⵠⲆΔ: Δᐃ.ⵠⲆΔᐃⲆⲆⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆᐃⲆⵠⲆΔⲆ,
        ᐃΔⵠⵠ: Δᐃ.ⵠⵠⲆΔⵠΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Pink Rabbit"
      }, {
        id: 102,
        ᐃⵠⵠ: Δᐃ.ⵠᐃᐃⵠⵠᐃⵠ,
        ⵠⲆΔ: Δᐃ.ⵠᐃⵠΔΔΔⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃⲆⲆᐃΔⵠⲆ,
        ᐃΔⵠⵠ: Δᐃ.ⲆⲆᐃΔⵠΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "pizza wa",
        name: "Marshmallow"
      }, {
        id: 107,
        ᐃⵠⵠ: Δᐃ.ⲆΔΔⵠⵠⲆᐃ,
        ⵠⲆΔ: Δᐃ.ΔⵠⵠⵠⵠⵠΔ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃⲆⵠⵠΔⲆᐃ,
        ᐃΔⵠⵠ: Δᐃ.ⲆⵠΔⵠⵠΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Fox"
      }, {
        id: 132,
        ᐃⵠⵠ: Δᐃ.ⲆⲆⲆⵠⵠⲆⲆ,
        ⵠⲆΔ: Δᐃ.ⲆᐃᐃΔⵠⵠΔ,
        ⵠᐃⵠᐃ: Δᐃ.Δᐃᐃⵠᐃⵠⵠ,
        ᐃΔⵠⵠ: Δᐃ.ΔⵠⲆⲆᐃᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Raccoon"
      }, {
        id: 111,
        ᐃⵠⵠ: Δᐃ.ⲆᐃᐃⲆΔΔΔ,
        ⵠⲆΔ: Δᐃ.ⵠΔΔΔⲆᐃⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃⵠΔΔΔᐃⲆ,
        ᐃΔⵠⵠ: Δᐃ.ⵠⵠⵠΔΔΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "pizza wa",
        name: "Cloud"
      }, {
        id: 113,
        ᐃⵠⵠ: Δᐃ.ᐃⲆⵠⵠΔⵠᐃ,
        ⵠⲆΔ: Δᐃ.ᐃᐃⲆᐃΔⲆⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⲆᐃⲆΔᐃⵠ,
        ᐃΔⵠⵠ: Δᐃ.ⲆΔᐃⵠᐃᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "pizza wa",
        name: "Moon"
      }, {
        id: 117,
        ᐃⵠⵠ: Δᐃ.ⵠⵠⲆⲆⲆΔᐃ,
        ⵠⲆΔ: Δᐃ.ⲆΔᐃⵠΔΔᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃⲆΔΔⲆⵠᐃ,
        ᐃΔⵠⵠ: Δᐃ.ᐃⵠΔᐃΔⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Mr. Panda"
      }, {
        id: 118,
        ᐃⵠⵠ: Δᐃ.ⵠⲆΔΔⲆᐃⵠ,
        ⵠⲆΔ: Δᐃ.ⵠΔᐃᐃⵠΔⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆⵠᐃⵠᐃⲆᐃ,
        ᐃΔⵠⵠ: Δᐃ.ⲆⲆⵠⲆᐃⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Mr. Strawberry"
      }, {
        id: 119,
        ᐃⵠⵠ: Δᐃ.ⲆⲆⲆᐃΔᐃⲆ,
        ⵠⲆΔ: Δᐃ.ⵠⲆⲆΔⲆⵠᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ΔᐃΔᐃⵠⵠᐃ,
        ᐃΔⵠⵠ: Δᐃ.ΔⵠⵠᐃⵠⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "eogito & Sushuui",
        name: "Mummy"
      }, {
        id: 122,
        ᐃⵠⵠ: Δᐃ.ⵠᐃⲆᐃΔⲆⲆ,
        ⵠⲆΔ: Δᐃ.ΔⲆΔⲆΔⲆⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃⲆⵠΔᐃⲆᐃ,
        ᐃΔⵠⵠ: Δᐃ.ΔⲆᐃⲆΔⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Dino"
      }, {
        id: 127,
        ᐃⵠⵠ: Δᐃ.ⲆⲆⲆᐃⵠⵠⲆ,
        ⵠⲆΔ: Δᐃ.ᐃᐃᐃⲆⲆΔΔ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⲆⲆΔⲆᐃΔ,
        ᐃΔⵠⵠ: Δᐃ.ⲆⲆⵠⲆΔΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "MADBalgouthi",
        name: "Mr. Koala"
      }, {
        id: 160,
        ᐃⵠⵠ: Δᐃ.ⲆⵠⵠⲆᐃΔⲆ,
        ⵠⲆΔ: Δᐃ.ΔΔΔᐃᐃⲆΔ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠⲆⲆΔΔΔⵠ,
        ᐃΔⵠⵠ: Δᐃ.ⵠΔⲆⲆⵠΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Bottle Protection"
      }, {
        id: 162,
        ᐃⵠⵠ: Δᐃ.ΔⵠᐃⲆⵠⵠⵠ,
        ⵠⲆΔ: Δᐃ.ⲆᐃⵠⲆΔⲆⵠ,
        ⵠᐃⵠᐃ: Δᐃ.Δⵠⵠᐃᐃᐃⵠ,
        ᐃΔⵠⵠ: Δᐃ.Δⵠⵠᐃᐃᐃᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "CrysTal",
        name: "Leaf Man"
      }, {
        id: 166,
        ᐃⵠⵠ: Δᐃ.ΔᐃⲆⵠΔⵠⲆ,
        ⵠⲆΔ: Δᐃ.ᐃΔⵠⵠⲆⵠᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃΔΔⲆⲆΔᐃ,
        ᐃΔⵠⵠ: Δᐃ.ⵠⵠⵠᐃΔⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "pizza wa",
        name: "Bubble"
      }, {
        id: 174,
        ᐃⵠⵠ: Δᐃ.ΔⲆⲆΔⲆⵠᐃ,
        ⵠⲆΔ: Δᐃ.ⲆΔⵠⵠⲆⵠⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ΔΔⲆΔⲆΔΔ,
        ᐃΔⵠⵠ: Δᐃ.ΔⲆΔⵠⵠⲆⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "upfiz",
        name: "Potato"
      }, {
        id: 171,
        ᐃⵠⵠ: Δᐃ.ⲆⲆⲆᐃⲆᐃΔ,
        ⵠⲆΔ: Δᐃ.ⲆⵠΔᐃᐃᐃⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃⵠᐃⵠⲆΔᐃ,
        ᐃΔⵠⵠ: Δᐃ.ⲆΔᐃᐃⲆΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "aloner",
        name: "Axolotl"
      }, {
        id: 25,
        ᐃⵠⵠ: Δᐃ.ΔⵠⵠΔΔⲆⲆ,
        ⵠⲆΔ: Δᐃ.ⲆⲆⲆⲆⵠᐃΔ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠⵠⵠⵠⵠΔΔ,
        ᐃΔⵠⵠ: Δᐃ.ᐃⵠᐃᐃΔΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Pixelbitie",
        name: "Test Dummy"
      }, {
        id: 41,
        ᐃⵠⵠ: Δᐃ.ⵠΔΔⲆΔᐃⵠ,
        ⵠⲆΔ: Δᐃ.ⲆΔΔⵠⵠΔᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃᐃᐃΔⵠⲆⲆ,
        ᐃΔⵠⵠ: Δᐃ.ⲆⲆᐃΔᐃΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "pizza wa",
        name: "Star-ver"
      }, {
        id: 43,
        ᐃⵠⵠ: Δᐃ.ᐃⵠⲆⵠⵠᐃΔ,
        ⵠⲆΔ: Δᐃ.ⲆᐃᐃⵠΔᐃᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃᐃΔΔⵠΔⵠ,
        ᐃΔⵠⵠ: Δᐃ.ᐃⲆⲆᐃΔⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Communist",
        name: "Starver Chest"
      }, {
        id: 88,
        ᐃⵠⵠ: Δᐃ.ⲆᐃⵠⵠᐃΔᐃ,
        ⵠⲆΔ: Δᐃ.ᐃΔΔⲆΔΔΔ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃᐃⲆⵠΔⵠⵠ,
        ᐃΔⵠⵠ: Δᐃ.ⲆΔⲆᐃⲆΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Communist",
        name: "Starver Workbench"
      }, {
        id: 121,
        ᐃⵠⵠ: Δᐃ.ΔᐃⲆⲆΔⵠⵠ,
        ⵠⲆΔ: Δᐃ.ⵠⲆΔᐃΔⲆᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠⵠᐃΔᐃⵠⵠ,
        ᐃΔⵠⵠ: Δᐃ.ⲆᐃⵠΔⲆⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "MADBalgouthi",
        name: "Fish"
      }, {
        id: 39,
        ᐃⵠⵠ: Δᐃ.ᐃⲆᐃᐃΔⵠΔ,
        ⵠⲆΔ: Δᐃ.ᐃΔΔⲆⲆᐃΔ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⲆⲆⵠⲆΔⵠ,
        ᐃΔⵠⵠ: Δᐃ.ΔⲆᐃΔᐃⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Negligent4Dia",
        name: "Crab"
      }, {
        id: 40,
        ᐃⵠⵠ: Δᐃ.ⲆᐃⵠⵠᐃⵠⲆ,
        ⵠⲆΔ: Δᐃ.ⲆΔᐃⲆⲆⲆⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆⲆᐃⵠⲆⵠⵠ,
        ᐃΔⵠⵠ: Δᐃ.ᐃⵠⲆⵠⲆᐃⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Negligent4Dia",
        name: "Piranha"
      }, {
        id: 36,
        ᐃⵠⵠ: Δᐃ.ᐃⲆᐃΔᐃᐃⵠ,
        ⵠⲆΔ: Δᐃ.ΔⵠⵠᐃⵠᐃⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃⲆⲆᐃᐃⲆΔ,
        ᐃΔⵠⵠ: Δᐃ.ᐃΔⵠⵠΔⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Winter Fox"
      }, {
        id: 69,
        ᐃⵠⵠ: Δᐃ.ⵠⲆᐃᐃᐃᐃⲆ,
        ⵠⲆΔ: Δᐃ.ΔΔⲆΔᐃⲆᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃⵠΔⲆⵠᐃᐃ,
        ᐃΔⵠⵠ: Δᐃ.Δᐃⵠᐃⵠⵠⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Zed",
        name: "Baby Foxy"
      }, {
        id: 51,
        ᐃⵠⵠ: Δᐃ.ⵠᐃⵠΔᐃΔᐃ,
        ⵠⲆΔ: Δᐃ.ⲆΔᐃⵠⵠⵠᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ΔᐃᐃᐃΔⲆⲆ,
        ᐃΔⵠⵠ: Δᐃ.ⵠᐃⲆᐃⲆⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "HOWI",
        name: "Winter Bear"
      }, {
        id: 133,
        ᐃⵠⵠ: Δᐃ.ⲆⵠᐃⲆⵠᐃⵠ,
        ⵠⲆΔ: Δᐃ.ΔⵠᐃⲆΔⵠΔ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠⲆΔΔΔΔⵠ,
        ᐃΔⵠⵠ: Δᐃ.ⲆΔᐃᐃⵠⵠⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Hawk"
      }, {
        id: 55,
        ᐃⵠⵠ: Δᐃ.ⲆᐃⲆⵠᐃΔⵠ,
        ⵠⲆΔ: Δᐃ.ⵠᐃᐃⵠΔⵠᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃΔⲆᐃΔᐃⵠ,
        ᐃΔⵠⵠ: Δᐃ.ΔⲆⲆⵠⲆⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Nice Little Yuki"
      }, {
        id: 68,
        ᐃⵠⵠ: Δᐃ.ΔⵠⲆⵠΔⲆᐃ,
        ⵠⲆΔ: Δᐃ.ⲆΔⵠᐃⲆᐃⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃⵠⵠⲆΔⲆᐃ,
        ᐃΔⵠⵠ: Δᐃ.ΔᐃᐃⵠΔⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Baby Yuki"
      }, {
        id: 62,
        ᐃⵠⵠ: Δᐃ.ⵠᐃΔⵠⲆΔⵠ,
        ⵠⲆΔ: Δᐃ.ΔΔΔᐃΔⲆⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠᐃⲆⲆⵠⲆᐃ,
        ᐃΔⵠⵠ: Δᐃ.ΔⵠⵠΔⲆⲆⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Mr. Carrot"
      }, {
        id: 56,
        ᐃⵠⵠ: Δᐃ.ⵠᐃᐃⵠΔⵠⵠ,
        ⵠⲆΔ: Δᐃ.ⲆᐃΔᐃᐃᐃᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ΔᐃⵠⵠⲆⲆᐃ,
        ᐃΔⵠⵠ: Δᐃ.ΔⲆⲆⲆΔᐃΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Bat Limax"
      }, {
        id: 72,
        ᐃⵠⵠ: Δᐃ.ᐃΔᐃΔⵠᐃⲆ,
        ⵠⲆΔ: Δᐃ.ⲆⵠⵠᐃΔᐃΔ,
        ⵠᐃⵠᐃ: Δᐃ.ΔΔΔᐃΔⵠⲆ,
        ᐃΔⵠⵠ: Δᐃ.ᐃΔⲆᐃᐃΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Mr. Crate"
      }, {
        id: 73,
        ᐃⵠⵠ: Δᐃ.ΔᐃᐃⲆⵠΔⵠ,
        ⵠⲆΔ: Δᐃ.ⵠⵠΔⵠΔⲆⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠⲆΔΔⵠΔᐃ,
        ᐃΔⵠⵠ: Δᐃ.ⲆΔᐃᐃⵠᐃᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Taco4Life & eogito",
        name: "Mr. Spider"
      }, {
        id: 93,
        ᐃⵠⵠ: Δᐃ.ⲆΔᐃᐃⲆΔⵠ,
        ⵠⲆΔ: Δᐃ.ᐃⲆᐃΔⵠΔⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆⲆⵠⵠΔⲆΔ,
        ᐃΔⵠⵠ: Δᐃ.ΔᐃᐃΔΔΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Anyone want to play?",
        name: "Mr. Spider 2"
      }, {
        id: 82,
        ᐃⵠⵠ: Δᐃ.ᐃΔⵠⵠΔᐃΔ,
        ⵠⲆΔ: Δᐃ.ᐃΔᐃΔⵠⲆⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆᐃᐃΔᐃⲆⲆ,
        ᐃΔⵠⵠ: Δᐃ.ᐃᐃᐃᐃⵠᐃΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Mr. Blue Starfish"
      }, {
        id: 83,
        ᐃⵠⵠ: Δᐃ.ⲆΔᐃⵠᐃᐃΔ,
        ⵠⲆΔ: Δᐃ.ⵠⵠΔᐃⲆᐃΔ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃΔⲆΔⲆⲆⵠ,
        ᐃΔⵠⵠ: Δᐃ.ᐃᐃⲆΔⵠᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Mr. Orange Starfish"
      }, {
        id: 84,
        ᐃⵠⵠ: Δᐃ.ⲆⵠΔⵠΔΔⵠ,
        ⵠⲆΔ: Δᐃ.ⵠᐃⵠⲆᐃᐃⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠⲆᐃᐃⵠᐃΔ,
        ᐃΔⵠⵠ: Δᐃ.ΔᐃᐃΔᐃΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Mr. Pink Starfish"
      }, {
        id: 85,
        ᐃⵠⵠ: Δᐃ.ⲆᐃⵠⲆⵠⲆΔ,
        ⵠⲆΔ: Δᐃ.ⵠᐃⲆΔⲆⲆᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃᐃⵠΔᐃΔΔ,
        ᐃΔⵠⵠ: Δᐃ.ⵠⵠⵠᐃⲆΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Mr. ShellMauve"
      }, {
        id: 86,
        ᐃⵠⵠ: Δᐃ.ⲆⲆⲆⵠⲆⵠΔ,
        ⵠⲆΔ: Δᐃ.ⵠⵠΔΔᐃᐃⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃⲆΔⲆᐃΔⵠ,
        ᐃΔⵠⵠ: Δᐃ.ᐃⲆⲆⲆᐃᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Mr. Shell Bead"
      }, {
        id: 96,
        ᐃⵠⵠ: Δᐃ.ΔⵠΔⲆΔⲆΔ,
        ⵠⲆΔ: Δᐃ.ΔⵠⵠⵠΔⵠᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃᐃᐃΔⲆⲆΔ,
        ᐃΔⵠⵠ: Δᐃ.ΔⲆⵠⲆⵠⵠⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Fukss",
        name: "Angry Crab"
      }, {
        id: 98,
        ᐃⵠⵠ: Δᐃ.ᐃᐃᐃⵠΔΔᐃ,
        ⵠⲆΔ: Δᐃ.ΔΔΔΔΔⵠΔ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⵠΔᐃⲆΔⲆ,
        ᐃΔⵠⵠ: Δᐃ.ΔΔⲆΔᐃΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Penguin"
      }, {
        id: 126,
        ᐃⵠⵠ: Δᐃ.ᐃⵠⲆᐃΔⲆⵠ,
        ⵠⲆΔ: Δᐃ.ᐃᐃΔᐃⵠⵠΔ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠⲆΔΔᐃΔᐃ,
        ᐃΔⵠⵠ: Δᐃ.ⵠⲆᐃᐃᐃᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Anyone want to play?",
        name: "Mr. Boar"
      }, {
        id: 145,
        ᐃⵠⵠ: Δᐃ.ΔᐃᐃᐃⵠΔᐃ,
        ⵠⲆΔ: Δᐃ.ᐃᐃⲆΔΔΔᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠᐃⵠΔΔᐃΔ,
        ᐃΔⵠⵠ: Δᐃ.ᐃⵠⲆᐃⵠⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "I saw you"
      }, {
        id: 146,
        ᐃⵠⵠ: Δᐃ.ⵠⵠᐃⲆΔᐃⵠ,
        ⵠⲆΔ: Δᐃ.ⵠΔⲆⵠⲆΔⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠΔᐃΔΔΔⵠ,
        ᐃΔⵠⵠ: Δᐃ.ΔᐃⲆΔⲆΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "It was funny"
      }, {
        id: 147,
        ᐃⵠⵠ: Δᐃ.ᐃΔⲆⵠᐃΔᐃ,
        ⵠⲆΔ: Δᐃ.ᐃᐃᐃΔⲆⲆᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠΔᐃⵠΔΔⲆ,
        ᐃΔⵠⵠ: Δᐃ.ⵠⲆⵠᐃⲆⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "You can scream"
      }, {
        id: 158,
        ᐃⵠⵠ: Δᐃ.ᐃΔᐃⵠⲆⵠⵠ,
        ⵠⲆΔ: Δᐃ.ΔⲆⵠᐃⵠⵠΔ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆᐃⵠⵠⵠⲆΔ,
        ᐃΔⵠⵠ: Δᐃ.ΔⲆⲆⲆⲆⲆⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Mr. Book"
      }, {
        id: 163,
        ᐃⵠⵠ: Δᐃ.ΔⲆⵠΔᐃᐃⲆ,
        ⵠⲆΔ: Δᐃ.ⵠⵠⲆᐃⵠΔᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆΔⵠΔᐃⲆᐃ,
        ᐃΔⵠⵠ: Δᐃ.ⵠΔΔᐃⵠⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Anyone want to play?",
        name: "Mr. Mammoth"
      }, {
        id: 164,
        ᐃⵠⵠ: Δᐃ.ⵠΔΔᐃΔⵠΔ,
        ⵠⲆΔ: Δᐃ.ⵠⲆΔᐃᐃⵠΔ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆΔⲆⵠᐃᐃᐃ,
        ᐃΔⵠⵠ: Δᐃ.ΔⵠΔⵠⵠⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "SoOw",
        name: "Mr. Mammoth 2"
      }, {
        id: 161,
        ᐃⵠⵠ: Δᐃ.ΔΔΔⲆΔⵠᐃ,
        ⵠⲆΔ: Δᐃ.ⵠᐃⵠⲆⵠᐃᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠΔⲆΔⲆⵠΔ,
        ᐃΔⵠⵠ: Δᐃ.ΔⵠⵠⵠᐃⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Nightmare"
      }, {
        id: 168,
        ᐃⵠⵠ: Δᐃ.ΔⵠΔⵠᐃᐃᐃ,
        ⵠⲆΔ: Δᐃ.ⵠⵠΔⲆⵠᐃᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃⲆΔⲆⵠⲆⲆ,
        ᐃΔⵠⵠ: Δᐃ.ΔⵠᐃᐃΔⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "pizza wa",
        name: "Shiny Crystal"
      }, {
        id: 173,
        ᐃⵠⵠ: Δᐃ.ΔⲆΔⲆᐃΔΔ,
        ⵠⲆΔ: Δᐃ.ΔΔⲆᐃⲆⵠⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃⵠΔᐃⲆΔⵠ,
        ᐃΔⵠⵠ: Δᐃ.ᐃᐃΔⵠᐃⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "pizza wa",
        name: "Water skin"
      }, {
        id: 42,
        ᐃⵠⵠ: Δᐃ.ⲆᐃᐃⲆⵠΔᐃ,
        ⵠⲆΔ: Δᐃ.ΔᐃⲆⵠᐃᐃᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆⲆΔⵠⲆΔⲆ,
        ᐃΔⵠⵠ: Δᐃ.ᐃᐃⲆᐃΔⵠⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Winter",
        name: "Will-O'-The-Wisp"
      }, {
        id: 91,
        ᐃⵠⵠ: Δᐃ.ΔⵠⵠΔΔΔⵠ,
        ⵠⲆΔ: Δᐃ.ᐃⵠⲆᐃⲆΔⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃⵠΔᐃⵠᐃⵠ,
        ᐃΔⵠⵠ: Δᐃ.ᐃΔⵠᐃⲆⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "ExpertyAnimations",
        name: "Flame"
      }, {
        id: 26,
        ᐃⵠⵠ: Δᐃ.ⵠᐃⵠᐃᐃᐃⲆ,
        ⵠⲆΔ: Δᐃ.ⲆᐃⲆᐃⲆΔΔ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃⵠᐃⵠⵠΔΔ,
        ᐃΔⵠⵠ: Δᐃ.ᐃⵠⲆⵠⲆᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Be a Tree"
      }, {
        id: 38,
        ᐃⵠⵠ: Δᐃ.ⵠⲆⲆⵠΔᐃⲆ,
        ⵠⲆΔ: Δᐃ.ⲆⵠᐃⵠⲆⵠΔ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠⲆΔⲆᐃⲆⲆ,
        ᐃΔⵠⵠ: Δᐃ.ⲆΔΔᐃⵠⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Winter",
        name: "Toxic Mutant"
      }, {
        id: 50,
        ᐃⵠⵠ: Δᐃ.ⵠⲆⲆⲆⵠⲆΔ,
        ⵠⲆΔ: Δᐃ.ⵠⵠⲆⵠⵠᐃΔ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆⲆᐃΔⲆⵠΔ,
        ᐃΔⵠⵠ: Δᐃ.ᐃᐃⵠΔⲆⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Communist",
        name: "Mr. Tomato"
      }, {
        id: 54,
        ᐃⵠⵠ: Δᐃ.ⵠⵠⵠⵠᐃⲆⲆ,
        ⵠⲆΔ: Δᐃ.ⲆᐃⵠΔᐃᐃᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠΔⵠⵠⵠⲆᐃ,
        ᐃΔⵠⵠ: Δᐃ.ⵠΔᐃᐃᐃᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Mr. Mauve, the Lapa"
      }, {
        id: 57,
        ᐃⵠⵠ: Δᐃ.ⵠᐃΔᐃᐃΔΔ,
        ⵠⲆΔ: Δᐃ.ⵠⲆᐃⵠⵠΔⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠⲆᐃⲆᐃᐃΔ,
        ᐃΔⵠⵠ: Δᐃ.ᐃᐃΔⵠⵠᐃᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Golden Fish"
      }, {
        id: 64,
        ᐃⵠⵠ: Δᐃ.ⵠᐃᐃⲆⲆᐃᐃ,
        ⵠⲆΔ: Δᐃ.ⵠΔⲆⲆᐃⲆⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆⵠⵠᐃⵠⲆⲆ,
        ᐃΔⵠⵠ: Δᐃ.ᐃΔΔᐃⵠⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "LapaMauve"
      }, {
        id: 65,
        ᐃⵠⵠ: Δᐃ.ΔᐃⲆᐃᐃᐃⲆ,
        ⵠⲆΔ: Δᐃ.ⲆⵠᐃⲆⵠⲆᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⵠⵠⲆΔΔⲆ,
        ᐃΔⵠⵠ: Δᐃ.ΔⲆΔⵠᐃΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "LapaMauve "
      }, {
        id: 92,
        ᐃⵠⵠ: Δᐃ.ⲆⲆⵠᐃᐃⲆᐃ,
        ⵠⲆΔ: Δᐃ.ⲆΔⲆⲆᐃⵠⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠᐃⲆⵠⵠᐃⲆ,
        ᐃΔⵠⵠ: Δᐃ.ⲆᐃᐃΔⲆⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Mr. Burger"
      }, {
        id: 66,
        ᐃⵠⵠ: Δᐃ.ᐃᐃᐃΔᐃᐃΔ,
        ⵠⲆΔ: Δᐃ.ⵠΔᐃⲆΔΔⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃᐃⲆⵠⵠⲆⵠ,
        ᐃΔⵠⵠ: Δᐃ.ΔᐃⲆⵠΔⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "pizza wa",
        name: "Tropical Starver"
      }, {
        id: 80,
        ᐃⵠⵠ: Δᐃ.ᐃᐃᐃⵠΔΔΔ,
        ⵠⲆΔ: Δᐃ.ⲆⵠⵠⲆⵠᐃⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠⵠΔᐃᐃΔⲆ,
        ᐃΔⵠⵠ: Δᐃ.ⲆⵠⲆⲆᐃⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Mr. ShellPink"
      }, {
        id: 81,
        ᐃⵠⵠ: Δᐃ.ⲆᐃᐃᐃⲆΔⲆ,
        ⵠⲆΔ: Δᐃ.ΔⲆⲆⲆᐃⵠΔ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⲆᐃⵠⵠⲆΔ,
        ᐃΔⵠⵠ: Δᐃ.ᐃΔᐃⵠΔⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Mr. OranShell"
      }, {
        id: 99,
        ᐃⵠⵠ: Δᐃ.ΔⵠΔⵠΔⵠⲆ,
        ⵠⲆΔ: Δᐃ.ⲆⵠⵠᐃⲆⵠⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠΔΔΔΔᐃΔ,
        ᐃΔⵠⵠ: Δᐃ.ⲆΔᐃⲆᐃⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Pepe"
      }, {
        id: og,
        ᐃⵠⵠ: Δᐃ.ⵠⵠΔᐃᐃᐃᐃ,
        ⵠⲆΔ: Δᐃ.ⵠⲆΔⵠⲆⲆᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠⵠᐃᐃⵠⵠⵠ,
        ᐃΔⵠⵠ: Δᐃ.ⲆᐃᐃᐃⲆⵠⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "fatant",
        name: "Mr. Ant"
      }, {
        id: 115,
        ᐃⵠⵠ: Δᐃ.ⵠΔⲆⲆᐃΔⲆ,
        ⵠⲆΔ: Δᐃ.ΔΔⵠΔΔΔⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠⲆⵠΔᐃⲆⵠ,
        ᐃΔⵠⵠ: Δᐃ.ⵠᐃⵠⲆΔⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "MADBalgouthi",
        name: "Mr. Watermelon"
      }, {
        id: 101,
        ᐃⵠⵠ: Δᐃ.ΔⲆᐃⲆΔⲆᐃ,
        ⵠⲆΔ: Δᐃ.ᐃⲆⲆΔⲆⲆΔ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃΔΔⲆΔΔⵠ,
        ᐃΔⵠⵠ: Δᐃ.ⵠⲆⲆⲆⲆᐃⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Mr. Thornbush"
      }, {
        id: 131,
        ᐃⵠⵠ: Δᐃ.ΔⵠᐃᐃⵠⲆⲆ,
        ⵠⲆΔ: Δᐃ.ΔᐃᐃⲆⵠⲆⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆⲆⲆΔⲆΔⵠ,
        ᐃΔⵠⵠ: Δᐃ.ΔⵠᐃᐃΔᐃᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Cthulhu"
      }, {
        id: 143,
        ᐃⵠⵠ: Δᐃ.ⵠⵠΔⲆⲆᐃⵠ,
        ⵠⲆΔ: Δᐃ.ⵠⲆᐃⲆⲆⲆᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃᐃⵠΔⲆⵠⵠ,
        ᐃΔⵠⵠ: Δᐃ.ᐃΔⵠⲆⲆΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Mr. Cactus"
      }, {
        id: 144,
        ᐃⵠⵠ: Δᐃ.ᐃΔⵠⲆⵠΔⵠ,
        ⵠⲆΔ: Δᐃ.ᐃⵠⲆⵠΔᐃⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆᐃΔⵠⵠⲆⲆ,
        ᐃΔⵠⵠ: Δᐃ.ⲆⵠⵠⲆᐃⲆⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Momo"
      }, {
        id: 95,
        ᐃⵠⵠ: Δᐃ.ᐃⵠⲆⲆΔΔΔ,
        ⵠⲆΔ: Δᐃ.ᐃᐃⵠᐃΔΔᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆΔⲆΔⲆΔⲆ,
        ᐃΔⵠⵠ: Δᐃ.ΔⵠΔⵠⵠΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Mr. Garlic"
      }, {
        id: 76,
        ᐃⵠⵠ: Δᐃ.ⵠΔⵠᐃΔⲆᐃ,
        ⵠⲆΔ: Δᐃ.ΔⲆΔⲆⲆⵠΔ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆⲆⵠᐃΔΔᐃ,
        ᐃΔⵠⵠ: Δᐃ.ⲆᐃⵠⵠᐃᐃⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Winter",
        name: "Robot Dragon"
      }, {
        id: 44,
        ᐃⵠⵠ: Δᐃ.ⵠᐃΔᐃΔΔᐃ,
        ⵠⲆΔ: Δᐃ.ΔⲆΔΔⵠⲆᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠⲆⵠⲆⲆΔⵠ,
        ᐃΔⵠⵠ: Δᐃ.ΔᐃⲆⲆᐃΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Winter",
        name: "Lava Dragon Version 1"
      }, {
        id: 90,
        ᐃⵠⵠ: Δᐃ.ΔⵠᐃⲆⲆⵠΔ,
        ⵠⲆΔ: Δᐃ.ΔⵠⲆᐃᐃΔⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆΔⲆⲆᐃⲆⲆ,
        ᐃΔⵠⵠ: Δᐃ.ⵠⲆᐃᐃⵠᐃᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "ExpertyAnimations",
        name: "Lava Dragon Version 2"
      }, {
        id: 124,
        ᐃⵠⵠ: Δᐃ.ᐃᐃᐃⵠⲆᐃⲆ,
        ⵠⲆΔ: Δᐃ.ⵠΔⵠᐃᐃΔΔ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⵠⵠⲆΔᐃⲆ,
        ᐃΔⵠⵠ: Δᐃ.ⵠΔⲆⵠⲆⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Lava Dragon Version 3"
      }, {
        id: 45,
        ᐃⵠⵠ: Δᐃ.ᐃᐃΔΔᐃΔᐃ,
        ⵠⲆΔ: Δᐃ.ⲆΔⵠⵠⵠΔⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃΔⲆΔΔⲆⵠ,
        ᐃΔⵠⵠ: Δᐃ.ⵠΔᐃΔᐃⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Sushui",
        name: "Ice Dragon Version 1"
      }, {
        id: 46,
        ᐃⵠⵠ: Δᐃ.ⵠᐃᐃᐃⲆΔΔ,
        ⵠⲆΔ: Δᐃ.ᐃΔⲆΔⵠᐃΔ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃⵠΔⲆᐃⵠΔ,
        ᐃΔⵠⵠ: Δᐃ.ⵠⲆⵠᐃᐃⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Winter",
        name: "Ice Dragon Version 2"
      }, {
        id: 108,
        ᐃⵠⵠ: Δᐃ.ᐃᐃΔᐃᐃⵠΔ,
        ⵠⲆΔ: Δᐃ.ⵠᐃΔⲆᐃᐃΔ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆⵠⲆᐃᐃᐃᐃ,
        ᐃΔⵠⵠ: Δᐃ.ⵠΔⵠⵠⲆΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Ice Dragon Version 3"
      }, {
        id: 123,
        ᐃⵠⵠ: Δᐃ.ΔᐃⲆᐃΔΔᐃ,
        ⵠⲆΔ: Δᐃ.ⲆΔⵠΔᐃΔⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⵠⵠⲆⲆⲆΔ,
        ᐃΔⵠⵠ: Δᐃ.ΔⵠᐃⲆᐃⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Baby Dragon Version 1"
      }, {
        id: 128,
        ᐃⵠⵠ: Δᐃ.ΔᐃⲆⲆᐃΔⵠ,
        ⵠⲆΔ: Δᐃ.ΔΔⲆⲆⵠᐃⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃΔⵠⵠⵠᐃΔ,
        ᐃΔⵠⵠ: Δᐃ.ΔᐃᐃΔⵠⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "MADBalgouthi",
        name: "Baby Dragon Version 2"
      }, {
        id: 125,
        ᐃⵠⵠ: Δᐃ.ᐃⲆⵠⲆⲆᐃΔ,
        ⵠⲆΔ: Δᐃ.ΔⵠᐃⲆⲆΔⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ΔΔⵠⲆⲆᐃᐃ,
        ᐃΔⵠⵠ: Δᐃ.ΔΔᐃⲆⲆⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Baby Lava"
      }, {
        id: 47,
        ᐃⵠⵠ: Δᐃ.ⲆⵠΔᐃΔⵠⲆ,
        ⵠⲆΔ: Δᐃ.ᐃΔⵠᐃⵠⵠᐃ,
        ⵠᐃⵠᐃ: Δᐃ.ᐃⵠⵠᐃᐃᐃΔ,
        ᐃΔⵠⵠ: Δᐃ.ⲆⵠⲆΔΔᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Kraken"
      }, {
        id: 129,
        ᐃⵠⵠ: Δᐃ.ΔⲆΔᐃⵠⵠⵠ,
        ⵠⲆΔ: Δᐃ.ⵠⵠΔⲆⵠᐃⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠΔⲆⲆⵠⲆΔ,
        ᐃΔⵠⵠ: Δᐃ.ΔᐃΔᐃΔΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Sandworm"
      }, {
        id: 63,
        ᐃⵠⵠ: Δᐃ.ΔⵠⲆⵠⲆΔⵠ,
        ⵠⲆΔ: Δᐃ.ᐃⵠⲆⲆⲆᐃⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠΔᐃⲆⲆΔΔ,
        ᐃΔⵠⵠ: Δᐃ.ᐃⵠᐃΔⲆᐃΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Mr. Golden Bread"
      }, {
        id: 67,
        ᐃⵠⵠ: Δᐃ.ᐃΔᐃᐃⵠⲆᐃ,
        ⵠⲆΔ: Δᐃ.ΔᐃⵠᐃⲆᐃΔ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⲆΔⲆⵠⲆⵠ,
        ᐃΔⵠⵠ: Δᐃ.ⲆⲆⵠΔⵠΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "ForgottenHeroe",
        name: "Starver Ores"
      }, {
        id: 130,
        ᐃⵠⵠ: Δᐃ.ᐃⵠⲆᐃⲆΔᐃ,
        ⵠⲆΔ: Δᐃ.ⵠᐃⲆⵠᐃΔⵠ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆᐃΔΔᐃⵠⲆ,
        ᐃΔⵠⵠ: Δᐃ.ⵠΔᐃΔⲆⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Poo"
      }, {
        id: 89,
        ᐃⵠⵠ: Δᐃ.ΔⲆⵠᐃᐃᐃⵠ,
        ⵠⲆΔ: Δᐃ.ⲆⲆⵠΔⵠᐃΔ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⵠⲆⵠⲆΔᐃ,
        ᐃΔⵠⵠ: Δᐃ.ΔᐃⵠⲆⲆΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Poinet",
        name: "Volcano Starver"
      }, {
        id: 112,
        ᐃⵠⵠ: Δᐃ.ⲆᐃΔᐃⵠⲆΔ,
        ⵠⲆΔ: Δᐃ.ⲆⵠΔⲆⲆᐃⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ⲆⲆᐃⵠΔⲆΔ,
        ᐃΔⵠⵠ: Δᐃ.ⲆΔⵠⲆⵠⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Lava Starver"
      }, {
        id: 48,
        ᐃⵠⵠ: Δᐃ.Ⲇⵠᐃⵠᐃⵠᐃ,
        ⵠⲆΔ: Δᐃ.ᐃΔᐃᐃⵠᐃⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⵠΔⲆᐃΔⵠ,
        ᐃΔⵠⵠ: Δᐃ.ⵠⵠᐃΔΔᐃⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃᐃΔΔⲆΔⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Robot"
      }, {
        id: 110,
        ᐃⵠⵠ: Δᐃ.ᐃᐃⲆᐃᐃⵠⵠ,
        ⵠⲆΔ: Δᐃ.ⲆⵠᐃⲆⲆΔⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ΔⵠᐃΔᐃᐃⲆ,
        ᐃΔⵠⵠ: Δᐃ.ⲆⲆΔΔᐃΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃᐃΔΔⲆΔⵠ,
        ⲆⲆⵠ: "pizza wa",
        name: "Blue Butterfly"
      }, {
        id: 157,
        ᐃⵠⵠ: Δᐃ.ⵠᐃⵠᐃΔᐃΔ,
        ⵠⲆΔ: Δᐃ.ⵠⵠᐃΔΔⵠⲆ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠⵠⵠΔᐃΔΔ,
        ᐃΔⵠⵠ: Δᐃ.ᐃᐃⵠⵠᐃⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃᐃΔΔⲆΔⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Yrifox"
      }, {
        id: 165,
        ᐃⵠⵠ: Δᐃ.ⵠⵠᐃΔΔⵠⵠ,
        ⵠⲆΔ: Δᐃ.ⲆΔⵠᐃⲆⲆΔ,
        ⵠᐃⵠᐃ: Δᐃ.ⵠᐃΔᐃⵠⲆⲆ,
        ᐃΔⵠⵠ: Δᐃ.ΔΔΔΔᐃΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃᐃΔΔⲆΔⵠ,
        ⲆⲆⵠ: "OmarJr13",
        name: "Blob Skin"
      }],
      ⵠⲆᐃⲆ: [{
        id: 0,
        ᐃⵠⵠ: Δᐃ.ᐃΔⵠᐃΔⵠᐃ,
        ⵠⲆΔ: Δᐃ.ⲆᐃᐃᐃⵠⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔⵠⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Bag 1"
      }, {
        id: sl,
        ᐃⵠⵠ: Δᐃ.ᐃΔᐃⲆⵠΔΔ,
        ⵠⲆΔ: Δᐃ.ⲆⵠᐃⵠᐃⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔⵠⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Old Bag"
      }, {
        id: 2,
        ᐃⵠⵠ: Δᐃ.ⵠⲆΔⵠⵠⲆⲆ,
        ⵠⲆΔ: Δᐃ.ᐃⲆⵠᐃᐃΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Starve.io",
        name: "Bag 2"
      }, {
        id: 3,
        ᐃⵠⵠ: Δᐃ.ᐃⲆⵠᐃⲆⲆⲆ,
        ⵠⲆΔ: Δᐃ.ⲆⲆΔΔⵠΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Starve.io",
        name: "Bag 3"
      }, {
        id: 4,
        ᐃⵠⵠ: Δᐃ.ΔᐃⲆⲆⵠᐃᐃ,
        ⵠⲆΔ: Δᐃ.ΔΔΔⵠΔⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Starve.io",
        name: "Bag 4"
      }, {
        id: gs,
        ᐃⵠⵠ: Δᐃ.ᐃᐃΔᐃⲆⲆⵠ,
        ⵠⲆΔ: Δᐃ.ⵠⲆⲆΔⵠΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Starve.io",
        name: "Bag 5"
      }, {
        id: 11,
        ᐃⵠⵠ: Δᐃ.ᐃⲆΔΔⵠΔⲆ,
        ⵠⲆΔ: Δᐃ.ᐃⵠΔᐃᐃⲆⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "eogito",
        name: "Wood Pickaxe Bag"
      }, {
        id: 19,
        ᐃⵠⵠ: Δᐃ.ΔⵠⲆⵠᐃⵠᐃ,
        ⵠⲆΔ: Δᐃ.ΔⲆΔᐃΔⲆⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Starve.io ",
        name: "Wood Carrier"
      }, {
        id: 37,
        ᐃⵠⵠ: Δᐃ.ⲆⲆΔⲆⲆⵠΔ,
        ⵠⲆΔ: Δᐃ.ᐃᐃᐃⲆⲆⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "eogito",
        name: "Bag 6"
      }, {
        id: 39,
        ᐃⵠⵠ: Δᐃ.ⵠΔⵠΔⵠΔΔ,
        ⵠⲆΔ: Δᐃ.ⲆᐃᐃᐃⲆⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "eogito",
        name: "Bag with Wooden Swords"
      }, {
        id: 44,
        ᐃⵠⵠ: Δᐃ.ᐃⲆⵠⲆᐃⵠⲆ,
        ⵠⲆΔ: Δᐃ.ⵠᐃΔᐃⲆΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Communist",
        name: "Big Bag"
      }, {
        id: 7,
        ᐃⵠⵠ: Δᐃ.ΔⲆᐃⵠⵠⲆⲆ,
        ⵠⲆΔ: Δᐃ.ⲆⲆΔΔⵠⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Communist",
        name: "Bag 6"
      }, {
        id: k,
        ᐃⵠⵠ: Δᐃ.ΔⵠⵠⲆᐃΔᐃ,
        ⵠⲆΔ: Δᐃ.ⵠᐃⲆⲆⲆΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Easter Bag"
      }, {
        id: 9,
        ᐃⵠⵠ: Δᐃ.ⵠⵠⵠⲆΔⵠⲆ,
        ⵠⲆΔ: Δᐃ.ⲆΔⵠⵠᐃᐃᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "pizza wa",
        name: "Star Bag"
      }, {
        id: 10,
        ᐃⵠⵠ: Δᐃ.ΔΔᐃⲆⵠⵠᐃ,
        ⵠⲆΔ: Δᐃ.ⵠⵠⵠΔᐃⲆⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "eogito",
        name: "Winter Bag"
      }, {
        id: jk,
        ᐃⵠⵠ: Δᐃ.ΔᐃⲆⲆⵠΔΔ,
        ⵠⲆΔ: Δᐃ.ⲆᐃᐃΔᐃΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io ",
        name: "Stone Carrier"
      }, {
        id: 24,
        ᐃⵠⵠ: Δᐃ.ⵠⵠΔⵠⵠⲆⵠ,
        ⵠⲆΔ: Δᐃ.ᐃⲆΔΔᐃⲆⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "eogito",
        name: "Stone Pickaxe Bag"
      }, {
        id: 6,
        ᐃⵠⵠ: Δᐃ.ΔΔᐃᐃⲆⲆᐃ,
        ⵠⲆΔ: Δᐃ.ᐃᐃᐃᐃΔᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Communist",
        name: "Bag Camouflage"
      }, {
        id: 38,
        ᐃⵠⵠ: Δᐃ.ΔⲆΔᐃᐃⵠⵠ,
        ⵠⲆΔ: Δᐃ.ΔⲆΔⵠΔΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "eogito",
        name: "Bag with Stone Swords"
      }, {
        id: 54,
        ᐃⵠⵠ: Δᐃ.ⵠⵠΔⲆΔΔⲆ,
        ⵠⲆΔ: Δᐃ.ᐃΔΔⲆᐃⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "eogito",
        name: "Cow Bag"
      }, {
        id: 59,
        ᐃⵠⵠ: Δᐃ.ⲆⲆᐃΔΔΔᐃ,
        ⵠⲆΔ: Δᐃ.ᐃⵠΔⵠᐃⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "CrysTal",
        name: "Starver Bag"
      }, {
        id: 62,
        ᐃⵠⵠ: Δᐃ.ΔᐃΔᐃΔΔⵠ,
        ⵠⲆΔ: Δᐃ.ⲆⵠΔⵠⵠΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "CrysTal",
        name: "Crystal Sky Bag"
      }, {
        id: 13,
        ᐃⵠⵠ: Δᐃ.ⵠⵠΔᐃⲆᐃᐃ,
        ⵠⲆΔ: Δᐃ.ⲆᐃΔⵠⵠⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "pizza wa",
        name: "Honey Pot"
      }, {
        id: 21,
        ᐃⵠⵠ: Δᐃ.ΔΔⲆΔΔᐃⲆ,
        ⵠⲆΔ: Δᐃ.ⵠⵠⲆΔΔᐃⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Starve.io ",
        name: "Gold Carrier"
      }, {
        id: 30,
        ᐃⵠⵠ: Δᐃ.ⵠⵠⲆᐃⵠⵠⵠ,
        ⵠⲆΔ: Δᐃ.ⲆⵠᐃΔΔΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Gold Pickaxe Bag"
      }, {
        id: 29,
        ᐃⵠⵠ: Δᐃ.ⲆⵠΔΔⲆⵠΔ,
        ⵠⲆΔ: Δᐃ.ᐃⵠⵠⵠⵠⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Ariel",
        name: "Mr and Mrs Bakers"
      }, {
        id: 41,
        ᐃⵠⵠ: Δᐃ.ⲆⲆᐃⲆΔᐃⲆ,
        ⵠⲆΔ: Δᐃ.ⵠⵠⲆΔⲆΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Bag with Golden Swords"
      }, {
        id: 47,
        ᐃⵠⵠ: Δᐃ.ᐃΔᐃᐃⵠⲆⵠ,
        ⵠⲆΔ: Δᐃ.ⲆⲆⲆⲆⲆⲆⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Explorer Bag"
      }, {
        id: 51,
        ᐃⵠⵠ: Δᐃ.ⵠⲆⵠᐃⵠⲆⲆ,
        ⵠⲆΔ: Δᐃ.ᐃΔΔⵠᐃⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "pizza wa",
        name: "Bamboo Bag"
      }, {
        id: 53,
        ᐃⵠⵠ: Δᐃ.ⵠⵠⲆᐃᐃⵠⲆ,
        ⵠⲆΔ: Δᐃ.ΔⲆⲆⵠᐃⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Mummy Bag"
      }, {
        id: 58,
        ᐃⵠⵠ: Δᐃ.ΔⲆΔᐃⲆΔⲆ,
        ⵠⲆΔ: Δᐃ.ΔᐃⵠᐃΔⵠⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "MADBalgouthi",
        name: "Watermelon Bag"
      }, {
        id: 60,
        ᐃⵠⵠ: Δᐃ.ΔⲆⵠⵠΔΔᐃ,
        ⵠⲆΔ: Δᐃ.ⲆⲆᐃⲆⲆΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Garlic Bag"
      }, {
        id: 61,
        ᐃⵠⵠ: Δᐃ.ⵠⵠⲆⲆᐃⵠⵠ,
        ⵠⲆΔ: Δᐃ.ⵠΔⵠᐃⲆⲆⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Pumpkin Bag"
      }, {
        id: 64,
        ᐃⵠⵠ: Δᐃ.ⲆᐃᐃΔⵠⵠᐃ,
        ⵠⲆΔ: Δᐃ.ΔⲆᐃᐃⵠⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "upfiz",
        name: "Oil Barel bag"
      }, {
        id: 67,
        ᐃⵠⵠ: Δᐃ.ⲆⲆⵠᐃⵠⲆΔ,
        ⵠⲆΔ: Δᐃ.ᐃΔΔΔᐃⵠⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "pizza wa",
        name: "Tree Bag"
      }, {
        id: oo,
        ᐃⵠⵠ: Δᐃ.ⵠΔⵠⲆⲆⲆⵠ,
        ⵠⲆΔ: Δᐃ.ⵠⵠᐃⲆⲆΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "a Rabbit in my Bag"
      }, {
        id: Vg,
        ᐃⵠⵠ: Δᐃ.ᐃⲆΔⵠᐃᐃⲆ,
        ⵠⲆΔ: Δᐃ.ⲆᐃᐃⲆⵠⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Bird's nest"
      }, {
        id: ch,
        ᐃⵠⵠ: Δᐃ.ⵠⲆΔΔᐃᐃⲆ,
        ⵠⲆΔ: Δᐃ.ⵠⲆⲆⲆᐃⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "a Fish on your Back"
      }, {
        id: 17,
        ᐃⵠⵠ: Δᐃ.ᐃⵠⵠΔⵠᐃⵠ,
        ⵠⲆΔ: Δᐃ.ⲆᐃΔⵠⲆⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "a Squirrel in my Bag"
      }, {
        id: 22,
        ᐃⵠⵠ: Δᐃ.ⲆⵠⲆⵠᐃΔΔ,
        ⵠⲆΔ: Δᐃ.ΔⲆΔᐃᐃⲆⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io ",
        name: "Diamond Carrier"
      }, {
        id: 12,
        ᐃⵠⵠ: Δᐃ.ᐃⵠΔⲆᐃΔⵠ,
        ⵠⲆΔ: Δᐃ.ΔΔⵠⵠΔⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Resources Bag"
      }, {
        id: 32,
        ᐃⵠⵠ: Δᐃ.ΔⵠⲆⵠΔⲆΔ,
        ⵠⲆΔ: Δᐃ.ⲆΔᐃᐃᐃΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Diamond Pickaxe Bag"
      }, {
        id: 40,
        ᐃⵠⵠ: Δᐃ.ΔᐃΔᐃⲆⲆΔ,
        ⵠⲆΔ: Δᐃ.ⲆⲆΔⵠΔⵠⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Bag with Diamond Swords"
      }, {
        id: 45,
        ᐃⵠⵠ: Δᐃ.ⲆΔΔᐃⲆΔᐃ,
        ⵠⲆΔ: Δᐃ.ᐃⵠⲆⵠΔᐃΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "My Cake Bag"
      }, {
        id: 46,
        ᐃⵠⵠ: Δᐃ.ᐃΔΔⵠⲆΔⲆ,
        ⵠⲆΔ: Δᐃ.ⵠⵠⵠΔⲆⵠⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "My Christmas Cake Bag"
      }, {
        id: 52,
        ᐃⵠⵠ: Δᐃ.ᐃⵠⵠΔⲆΔΔ,
        ⵠⲆΔ: Δᐃ.ⵠΔⲆⵠⵠΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "MADBalgouthi",
        name: "Fish Bag"
      }, {
        id: 65,
        ᐃⵠⵠ: Δᐃ.ⵠΔΔⵠΔᐃᐃ,
        ⵠⲆΔ: Δᐃ.ΔᐃⲆᐃᐃⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "pizza wa",
        name: "Cloud Bag"
      }, {
        id: 68,
        ᐃⵠⵠ: Δᐃ.ΔᐃⵠⵠⲆⵠᐃ,
        ⵠⲆΔ: Δᐃ.ᐃⵠⵠᐃⵠⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "pizza wa",
        name: "Bee Bag"
      }, {
        id: 48,
        ᐃⵠⵠ: Δᐃ.ⵠⵠⲆᐃᐃⵠΔ,
        ⵠⲆΔ: Δᐃ.ᐃⲆΔᐃⵠⵠⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "fatant",
        name: "Natural Bag"
      }, {
        id: 23,
        ᐃⵠⵠ: Δᐃ.ⵠᐃᐃⲆᐃⲆΔ,
        ⵠⲆΔ: Δᐃ.Δⵠⵠⵠⵠᐃᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Starve.io ",
        name: "Amethyst Carrier"
      }, {
        id: 25,
        ᐃⵠⵠ: Δᐃ.ⲆᐃⵠⵠΔⵠⵠ,
        ⵠⲆΔ: Δᐃ.ᐃⲆⵠⵠΔᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Amethyst Pickaxe Bag"
      }, {
        id: 28,
        ᐃⵠⵠ: Δᐃ.ΔΔΔⲆᐃΔⵠ,
        ⵠⲆΔ: Δᐃ.ΔΔⵠⲆⵠⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Your Baby"
      }, {
        id: 33,
        ᐃⵠⵠ: Δᐃ.ⲆⲆΔᐃⲆΔⵠ,
        ⵠⲆΔ: Δᐃ.ⵠΔⵠⲆᐃⵠⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "pizza wa",
        name: "Tropical Bag"
      }, {
        id: 43,
        ᐃⵠⵠ: Δᐃ.ⲆᐃⵠΔⵠΔᐃ,
        ⵠⲆΔ: Δᐃ.ⵠΔΔⵠᐃᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Bag with Amethyst Swords"
      }, {
        id: 35,
        ᐃⵠⵠ: Δᐃ.ⲆΔᐃΔᐃⲆⲆ,
        ⵠⲆΔ: Δᐃ.ΔΔⲆΔⵠᐃⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Ice Bag"
      }, {
        id: 50,
        ᐃⵠⵠ: Δᐃ.ᐃⲆⵠⲆᐃΔᐃ,
        ⵠⲆΔ: Δᐃ.ⵠΔⵠⲆⵠⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Thornbush Bag"
      }, {
        id: 56,
        ᐃⵠⵠ: Δᐃ.ⵠΔⲆᐃⲆⵠΔ,
        ⵠⲆΔ: Δᐃ.ΔⲆⲆⲆΔⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Autumn Bag"
      }, {
        id: 57,
        ᐃⵠⵠ: Δᐃ.ⲆⲆⵠⲆΔⵠⲆ,
        ⵠⲆΔ: Δᐃ.ΔⲆⲆΔΔⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Dino Egg Bag"
      }, {
        id: 66,
        ᐃⵠⵠ: Δᐃ.ⲆᐃⵠⲆΔΔⵠ,
        ⵠⲆΔ: Δᐃ.ᐃⲆᐃⵠᐃⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "pizza wa",
        name: "Magic Cloud Bag"
      }, {
        id: 69,
        ᐃⵠⵠ: Δᐃ.ᐃΔΔᐃⲆⲆΔ,
        ⵠⲆΔ: Δᐃ.ⲆⵠΔΔΔⲆⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "pizza wa",
        name: "Chest Bag"
      }, {
        id: 31,
        ᐃⵠⵠ: Δᐃ.ⲆΔᐃΔᐃⵠⵠ,
        ⵠⲆΔ: Δᐃ.ΔⵠᐃᐃⵠⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io ",
        name: "Reidite Carrier"
      }, {
        id: Ki,
        ᐃⵠⵠ: Δᐃ.ΔᐃⵠᐃᐃⵠΔ,
        ⵠⲆΔ: Δᐃ.ⲆΔⲆⵠⲆⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Winter",
        name: "Lava Bag"
      }, {
        id: 49,
        ᐃⵠⵠ: Δᐃ.ⵠⲆΔΔᐃⵠⲆ,
        ⵠⲆΔ: Δᐃ.ⵠᐃⵠⲆΔⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Lava Bag 2"
      }, {
        id: 36,
        ᐃⵠⵠ: Δᐃ.ⲆⵠⲆⲆⲆᐃᐃ,
        ⵠⲆΔ: Δᐃ.ΔᐃⵠᐃⲆⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Dragon Bag"
      }, {
        id: 55,
        ᐃⵠⵠ: Δᐃ.ⵠΔⵠΔⵠⵠΔ,
        ⵠⲆΔ: Δᐃ.ΔΔΔⵠⵠⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Winter Ice Bag"
      }, {
        id: 26,
        ᐃⵠⵠ: Δᐃ.ⲆΔᐃΔΔⲆⵠ,
        ⵠⲆΔ: Δᐃ.ΔᐃΔΔⲆᐃⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Reidite Pickaxe Bag"
      }, {
        id: 27,
        ᐃⵠⵠ: Δᐃ.ⲆⵠΔⵠⵠΔΔ,
        ⵠⲆΔ: Δᐃ.ⲆΔⵠⲆⲆⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Octopus Bowl"
      }, {
        id: 34,
        ᐃⵠⵠ: Δᐃ.ᐃᐃⵠⵠⵠⲆΔ,
        ⵠⲆΔ: Δᐃ.ΔᐃⲆⲆΔᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Cave Bag"
      }, {
        id: 42,
        ᐃⵠⵠ: Δᐃ.ᐃⵠⵠᐃⲆⵠⵠ,
        ⵠⲆΔ: Δᐃ.ⵠᐃⵠⲆⲆΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Bag with Reidite Swords"
      }, {
        id: 63,
        ᐃⵠⵠ: Δᐃ.ⲆΔⵠⲆᐃⵠⵠ,
        ⵠⲆΔ: Δᐃ.ⲆΔΔⵠⲆⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Engineer Bag"
      }],
      ΔΔⵠⲆⲆ: [{
        id: 0,
        ᐃⵠⵠ: Δᐃ.ⵠⵠᐃⵠⲆΔΔ,
        ⵠⲆΔ: Δᐃ.ᐃΔⲆⲆⵠⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔⵠⵠⲆⲆ,
        ⲆⲆⵠ: "eogito",
        name: "Wooden Dead Box"
      }, {
        id: Mg,
        ᐃⵠⵠ: Δᐃ.ΔΔΔΔᐃⵠⵠ,
        ⵠⲆΔ: Δᐃ.ⲆΔΔⲆΔⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔⵠⵠⲆⲆ,
        ⲆⲆⵠ: "eogito",
        name: "Hidden item"
      }, {
        id: 2,
        ᐃⵠⵠ: Δᐃ.ΔⲆⵠⵠⵠⵠⵠ,
        ⵠⲆΔ: Δᐃ.ⵠⵠΔᐃⵠⵠⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "eogito",
        name: "Wooden Box 1"
      }, {
        id: 3,
        ᐃⵠⵠ: Δᐃ.ⵠΔᐃᐃⵠⲆΔ,
        ⵠⲆΔ: Δᐃ.ⲆⵠΔⲆᐃⵠⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "eogito",
        name: "Wooden Box 2"
      }, {
        id: 4,
        ᐃⵠⵠ: Δᐃ.ᐃⵠᐃΔⵠᐃⲆ,
        ⵠⲆΔ: Δᐃ.ⵠⲆⲆᐃΔᐃΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "eogito",
        name: "Wooden Box 3"
      }, {
        id: bt,
        ᐃⵠⵠ: Δᐃ.ΔΔⲆⲆⵠΔⲆ,
        ⵠⲆΔ: Δᐃ.ᐃΔᐃΔⵠᐃΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "eogito",
        name: "Broken Wooden Box"
      }, {
        id: 6,
        ᐃⵠⵠ: Δᐃ.ΔⵠⲆΔᐃⵠᐃ,
        ⵠⲆΔ: Δᐃ.ᐃⲆⲆⲆⵠᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "eogito",
        name: "Wooden Box"
      }, {
        id: Ph,
        ᐃⵠⵠ: Δᐃ.ⲆⲆᐃΔᐃⵠᐃ,
        ⵠⲆΔ: Δᐃ.ΔΔⲆᐃⲆⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "eogito",
        name: "Wooden Battle Box"
      }, {
        id: ss,
        ᐃⵠⵠ: Δᐃ.ᐃΔΔⵠⵠΔⵠ,
        ⵠⲆΔ: Δᐃ.ΔⵠⲆᐃΔΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "eogito",
        name: "Wooden Box with a Cross"
      }, {
        id: Pj,
        ᐃⵠⵠ: Δᐃ.ᐃⲆⵠΔⵠⲆⵠ,
        ⵠⲆΔ: Δᐃ.ΔⵠΔᐃⲆⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "eogito",
        name: "Wooden Box with Bubbles"
      }, {
        id: 10,
        ᐃⵠⵠ: Δᐃ.ⵠⵠᐃⲆⲆⲆΔ,
        ⵠⲆΔ: Δᐃ.ΔᐃⲆΔⵠᐃⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "eogito",
        name: "Wooden Box with Eyes"
      }, {
        id: 11,
        ᐃⵠⵠ: Δᐃ.ΔΔⵠⵠᐃᐃΔ,
        ⵠⲆΔ: Δᐃ.ⲆᐃⵠⵠΔᐃⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "eogito",
        name: "Dark Wooden Box"
      }, {
        id: 38,
        ᐃⵠⵠ: Δᐃ.ⲆᐃᐃΔⲆΔⲆ,
        ⵠⲆΔ: Δᐃ.ⵠⵠΔᐃⵠⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Weddlz",
        name: "Noob Box"
      }, {
        id: 12,
        ᐃⵠⵠ: Δᐃ.ⲆΔΔⵠⵠⲆⵠ,
        ⵠⲆΔ: Δᐃ.ᐃΔᐃⵠΔᐃⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "eogito",
        name: "Wooden and Stone Box"
      }, {
        id: G,
        ᐃⵠⵠ: Δᐃ.ⵠᐃⲆⵠΔΔΔ,
        ⵠⲆΔ: Δᐃ.ⵠᐃᐃΔⲆᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "pizza wa",
        name: "Star Box 1"
      }, {
        id: nr,
        ᐃⵠⵠ: Δᐃ.ᐃⲆⲆⵠΔⲆⵠ,
        ⵠⲆΔ: Δᐃ.ΔⵠⲆⵠᐃΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "pizza wa",
        name: "Star Box 2"
      }, {
        id: 27,
        ᐃⵠⵠ: Δᐃ.ᐃΔᐃⲆⲆΔΔ,
        ⵠⲆΔ: Δᐃ.ⵠᐃⲆⵠⵠᐃᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "eogito",
        name: "Flower Box"
      }, {
        id: 46,
        ᐃⵠⵠ: Δᐃ.ΔⵠⵠᐃⲆΔᐃ,
        ⵠⲆΔ: Δᐃ.ΔΔⲆᐃᐃⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "MADBalgouthi",
        name: "Blue Box"
      }, {
        id: Qq,
        ᐃⵠⵠ: Δᐃ.ΔᐃⲆᐃⲆΔⵠ,
        ⵠⲆΔ: Δᐃ.ΔⲆⵠⲆⲆᐃⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Beehive"
      }, {
        id: 13,
        ᐃⵠⵠ: Δᐃ.ᐃⲆΔⵠⵠⲆᐃ,
        ⵠⲆΔ: Δᐃ.ΔⲆⵠᐃᐃⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Wooden and Golden Box"
      }, {
        id: 21,
        ᐃⵠⵠ: Δᐃ.ΔⲆⵠⵠⲆⵠⲆ,
        ⵠⲆΔ: Δᐃ.ⵠᐃⲆᐃΔΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Gravestone"
      }, {
        id: 25,
        ᐃⵠⵠ: Δᐃ.ΔⲆⵠⵠⲆⲆᐃ,
        ⵠⲆΔ: Δᐃ.ᐃⵠⲆΔΔⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Communist",
        name: "Sky Box"
      }, {
        id: 29,
        ᐃⵠⵠ: Δᐃ.ⵠⵠᐃᐃⵠΔⲆ,
        ⵠⲆΔ: Δᐃ.ⵠᐃⲆⵠⵠᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Winter",
        name: "Golden Box"
      }, {
        id: 34,
        ᐃⵠⵠ: Δᐃ.ᐃⲆⲆⵠᐃⵠΔ,
        ⵠⲆΔ: Δᐃ.ᐃΔᐃⵠΔⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Communist",
        name: "Water Crate"
      }, {
        id: 35,
        ᐃⵠⵠ: Δᐃ.ⵠⲆⵠⵠⵠΔᐃ,
        ⵠⲆΔ: Δᐃ.ⲆΔⵠᐃⵠΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Communist",
        name: "Glass Crate"
      }, {
        id: Ar,
        ᐃⵠⵠ: Δᐃ.ⲆⲆⲆᐃΔⵠⵠ,
        ⵠⲆΔ: Δᐃ.ⵠᐃᐃⵠⵠⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Wooden and Diamond Box"
      }, {
        id: Ys,
        ᐃⵠⵠ: Δᐃ.ᐃⲆⲆⲆⵠⲆⲆ,
        ⵠⲆΔ: Δᐃ.ΔᐃⵠᐃΔⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Don't Hit Me"
      }, {
        id: 26,
        ᐃⵠⵠ: Δᐃ.ⵠⲆᐃΔᐃⲆⲆ,
        ⵠⲆΔ: Δᐃ.ⵠᐃΔΔⲆᐃⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Underwater Box"
      }, {
        id: 31,
        ᐃⵠⵠ: Δᐃ.ΔⲆⲆⲆΔΔᐃ,
        ⵠⲆΔ: Δᐃ.ⲆⵠᐃᐃΔᐃⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Communist",
        name: "Items Pile"
      }, {
        id: 32,
        ᐃⵠⵠ: Δᐃ.ΔⲆⵠᐃⲆΔΔ,
        ⵠⲆΔ: Δᐃ.ⲆᐃᐃⵠᐃΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Cake Box"
      }, {
        id: 33,
        ᐃⵠⵠ: Δᐃ.ᐃⵠΔΔᐃⵠᐃ,
        ⵠⲆΔ: Δᐃ.ⲆⲆⲆᐃΔⲆⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Christmas Cake Box"
      }, {
        id: 36,
        ᐃⵠⵠ: Δᐃ.ⲆⵠΔΔⲆⵠⵠ,
        ⵠⲆΔ: Δᐃ.ⵠⵠᐃᐃΔⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Fukss",
        name: "Crab Box"
      }, {
        id: 42,
        ᐃⵠⵠ: Δᐃ.ᐃⵠΔⵠⲆⲆⵠ,
        ⵠⲆΔ: Δᐃ.ᐃⲆΔⲆⲆⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "MADBalgouthi",
        name: "Fishing Box"
      }, {
        id: 22,
        ᐃⵠⵠ: Δᐃ.ⲆⵠⲆΔⲆᐃΔ,
        ⵠⲆΔ: Δᐃ.ΔΔⲆⵠᐃΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Let me out of here"
      }, {
        id: 17,
        ᐃⵠⵠ: Δᐃ.Δⵠᐃᐃᐃᐃⵠ,
        ⵠⲆΔ: Δᐃ.ᐃⲆᐃᐃᐃΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Wooden and Amethyst Box"
      }, {
        id: 24,
        ᐃⵠⵠ: Δᐃ.ⵠᐃⲆⲆⲆⲆⲆ,
        ⵠⲆΔ: Δᐃ.ⵠⵠⲆⵠⲆΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Aquarium"
      }, {
        id: 28,
        ᐃⵠⵠ: Δᐃ.ΔⲆΔⲆᐃᐃΔ,
        ⵠⲆΔ: Δᐃ.ⲆⵠᐃΔⲆΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Gift Box"
      }, {
        id: 40,
        ᐃⵠⵠ: Δᐃ.ⲆⵠΔⲆΔΔΔ,
        ⵠⲆΔ: Δᐃ.ᐃΔᐃΔⲆΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "MADBalgouthi",
        name: "Open Watermelon Box"
      }, {
        id: 41,
        ᐃⵠⵠ: Δᐃ.ⵠⵠᐃᐃΔⵠⵠ,
        ⵠⲆΔ: Δᐃ.ᐃᐃΔⵠᐃⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "MADBalgouthi",
        name: "Watermelon Box"
      }, {
        id: 39,
        ᐃⵠⵠ: Δᐃ.ΔⵠⲆᐃⵠᐃⲆ,
        ⵠⲆΔ: Δᐃ.ᐃⵠᐃⲆⲆᐃⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Thornbush Box"
      }, {
        id: 43,
        ᐃⵠⵠ: Δᐃ.ⲆᐃΔΔᐃΔⲆ,
        ⵠⲆΔ: Δᐃ.ⵠΔᐃΔᐃⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Rabbit in the Box"
      }, {
        id: 47,
        ᐃⵠⵠ: Δᐃ.ⵠⵠⵠⲆᐃⲆⵠ,
        ⵠⲆΔ: Δᐃ.ⲆΔᐃⲆⵠᐃᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Garlic Plot"
      }, {
        id: 48,
        ᐃⵠⵠ: Δᐃ.ΔΔⵠΔⵠⵠᐃ,
        ⵠⲆΔ: Δᐃ.ⲆᐃⲆΔⵠⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Pumpkin Plot"
      }, {
        id: 45,
        ᐃⵠⵠ: Δᐃ.ΔⲆᐃᐃᐃᐃᐃ,
        ⵠⲆΔ: Δᐃ.ᐃⵠⲆᐃⵠⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Autumn Box"
      }, {
        id: 44,
        ᐃⵠⵠ: Δᐃ.ⵠΔⵠΔⲆⲆⲆ,
        ⵠⲆΔ: Δᐃ.ΔⵠᐃⲆΔⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Winter Box"
      }, {
        id: zq,
        ᐃⵠⵠ: Δᐃ.ⲆⲆⵠⲆⲆΔⵠ,
        ⵠⲆΔ: Δᐃ.ⲆⲆΔⲆⲆⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Metal and Reidite Box"
      }, {
        id: 23,
        ᐃⵠⵠ: Δᐃ.ⵠΔⲆⲆΔΔᐃ,
        ⵠⲆΔ: Δᐃ.ᐃⵠΔⵠⵠΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Kraken Box"
      }, {
        id: 30,
        ᐃⵠⵠ: Δᐃ.ᐃⵠᐃᐃᐃΔⲆ,
        ⵠⲆΔ: Δᐃ.ᐃⵠᐃⲆΔⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Winter",
        name: "Lava Box"
      }, {
        id: 37,
        ᐃⵠⵠ: Δᐃ.ⲆᐃⲆΔⲆᐃⲆ,
        ⵠⲆΔ: Δᐃ.ΔⵠᐃⵠᐃⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Lava Box 2"
      }, {
        id: 49,
        ᐃⵠⵠ: Δᐃ.ΔΔⵠⵠΔⲆΔ,
        ⵠⲆΔ: Δᐃ.ⲆⲆΔⵠᐃΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Box of the Rabbit"
      }, {
        id: 50,
        ᐃⵠⵠ: Δᐃ.ⵠⵠⲆᐃΔⵠⲆ,
        ⵠⲆΔ: Δᐃ.ⲆⵠⵠⲆᐃΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Box of the Wolf"
      }, {
        id: 51,
        ᐃⵠⵠ: Δᐃ.ᐃⵠⲆᐃΔⵠᐃ,
        ⵠⲆΔ: Δᐃ.ΔⵠᐃᐃᐃⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Box of the Spider"
      }, {
        id: 52,
        ᐃⵠⵠ: Δᐃ.ΔΔⲆΔΔΔⲆ,
        ⵠⲆΔ: Δᐃ.ᐃᐃⲆΔΔⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Box of the Hawk"
      }, {
        id: 53,
        ᐃⵠⵠ: Δᐃ.ᐃⲆᐃⲆⲆⵠⵠ,
        ⵠⲆΔ: Δᐃ.ⲆᐃᐃᐃᐃΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Box of the Bear"
      }, {
        id: 54,
        ᐃⵠⵠ: Δᐃ.ᐃᐃⲆΔⵠΔⲆ,
        ⵠⲆΔ: Δᐃ.ᐃΔⲆᐃᐃⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Box of the Fox"
      }, {
        id: 55,
        ᐃⵠⵠ: Δᐃ.ⵠⵠⵠΔⵠΔⲆ,
        ⵠⲆΔ: Δᐃ.ΔΔΔΔⵠᐃΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Box of the Baby Mammoth"
      }, {
        id: 56,
        ᐃⵠⵠ: Δᐃ.ᐃᐃⵠᐃᐃⲆⲆ,
        ⵠⲆΔ: Δᐃ.ⵠⲆᐃΔⵠⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Box of the Mammoth"
      }, {
        id: 57,
        ᐃⵠⵠ: Δᐃ.ⲆΔᐃᐃⲆΔΔ,
        ⵠⲆΔ: Δᐃ.ⵠⲆΔᐃΔⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Box of the Sandworm"
      }, {
        id: 58,
        ᐃⵠⵠ: Δᐃ.ⵠᐃΔⲆΔᐃᐃ,
        ⵠⲆΔ: Δᐃ.ΔⵠⵠⲆᐃΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Box of the Vulture"
      }, {
        id: 59,
        ᐃⵠⵠ: Δᐃ.ΔⲆⲆⵠᐃΔᐃ,
        ⵠⲆΔ: Δᐃ.ⲆⵠⵠΔᐃⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Box of the Kraken"
      }, {
        id: 60,
        ᐃⵠⵠ: Δᐃ.ΔⲆΔΔΔᐃⵠ,
        ⵠⲆΔ: Δᐃ.ᐃᐃⵠᐃⲆΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Box of the Piranha"
      }, {
        id: 61,
        ᐃⵠⵠ: Δᐃ.ⲆⲆⵠⵠⵠᐃΔ,
        ⵠⲆΔ: Δᐃ.ⵠᐃⲆⲆⲆΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Box of the Baby Dragon"
      }, {
        id: 62,
        ᐃⵠⵠ: Δᐃ.ⵠⵠⲆⵠⲆᐃᐃ,
        ⵠⲆΔ: Δᐃ.ᐃᐃⲆᐃⲆⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Box of the Baby Lava"
      }, {
        id: 63,
        ᐃⵠⵠ: Δᐃ.ⲆⵠᐃⵠΔⵠⵠ,
        ⵠⲆΔ: Δᐃ.ΔⵠⲆⲆᐃᐃΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Box of the Dragon"
      }, {
        id: 64,
        ᐃⵠⵠ: Δᐃ.ⵠⲆᐃⲆⵠⵠⲆ,
        ⵠⲆΔ: Δᐃ.ⵠⵠΔᐃⲆⵠⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Box of the Penguin"
      }, {
        id: 65,
        ᐃⵠⵠ: Δᐃ.ⵠᐃᐃⵠⲆΔᐃ,
        ⵠⲆΔ: Δᐃ.ⵠΔΔΔΔⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Box of the Lava Dragon"
      }, {
        id: 66,
        ᐃⵠⵠ: Δᐃ.ΔᐃΔᐃⲆΔⲆ,
        ⵠⲆΔ: Δᐃ.ᐃΔⲆⵠⲆᐃᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Box of the Boar"
      }, {
        id: 67,
        ᐃⵠⵠ: Δᐃ.ⵠᐃΔΔⲆⲆⵠ,
        ⵠⲆΔ: Δᐃ.ⲆⵠΔⲆᐃΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Box of the Fire mob"
      }, {
        id: 68,
        ᐃⵠⵠ: Δᐃ.ⵠⵠⲆⵠΔⲆⲆ,
        ⵠⲆΔ: Δᐃ.ⲆᐃᐃΔⵠⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Box of the Crab"
      }, {
        id: 69,
        ᐃⵠⵠ: Δᐃ.Δᐃⵠⵠⵠⵠⵠ,
        ⵠⲆΔ: Δᐃ.ⵠⵠᐃⲆΔⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Box of the King Crab"
      }, {
        id: 70,
        ᐃⵠⵠ: Δᐃ.ⵠᐃΔⲆᐃⲆⵠ,
        ⵠⲆΔ: Δᐃ.ᐃᐃΔᐃⲆⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "CrysTal",
        name: "Crystal Sky Box"
      }, {
        id: 71,
        ᐃⵠⵠ: Δᐃ.ⲆⲆⵠᐃΔΔΔ,
        ⵠⲆΔ: Δᐃ.ᐃᐃᐃΔᐃΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Dragon Box"
      }],
      ΔⵠᐃⲆⲆ: [{
        id: 0,
        ᐃⵠⵠ: Δᐃ.ᐃⵠᐃᐃⲆᐃⵠ,
        ⵠⲆΔ: Δᐃ.ᐃⲆⵠⲆᐃᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔⵠⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Book 1"
      }, {
        id: 1,
        ᐃⵠⵠ: Δᐃ.ⵠⲆⲆᐃⵠⲆⲆ,
        ⵠⲆΔ: Δᐃ.ᐃⵠⵠⵠΔⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "eogito",
        name: "Book 2"
      }, {
        id: 2,
        ᐃⵠⵠ: Δᐃ.ⵠⲆⵠᐃᐃᐃΔ,
        ⵠⲆΔ: Δᐃ.ⲆᐃᐃᐃⲆⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "eogito",
        name: "Book 3"
      }, {
        id: Hn,
        ᐃⵠⵠ: Δᐃ.ᐃΔΔᐃⲆⵠΔ,
        ⵠⲆΔ: Δᐃ.ⲆⵠⲆΔⵠΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "eogito",
        name: "Book 4"
      }, {
        id: mg,
        ᐃⵠⵠ: Δᐃ.ᐃᐃⲆᐃⵠᐃᐃ,
        ⵠⲆΔ: Δᐃ.ⲆᐃᐃⲆⲆⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "eogito",
        name: "Damaged Book 1"
      }, {
        id: 18,
        ᐃⵠⵠ: Δᐃ.ᐃⲆΔⲆᐃⵠⲆ,
        ⵠⲆΔ: Δᐃ.ΔⲆᐃⲆᐃΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "SeveR",
        name: "Damaged Book 2"
      }, {
        id: 5,
        ᐃⵠⵠ: Δᐃ.ᐃⵠΔⵠΔⲆᐃ,
        ⵠⲆΔ: Δᐃ.ᐃΔⵠΔᐃΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Doctorpus",
        name: "Scroll"
      }, {
        id: Oe,
        ᐃⵠⵠ: Δᐃ.ΔΔⲆⲆⲆⵠⵠ,
        ⵠⲆΔ: Δᐃ.ⲆΔⲆⲆⵠΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Doctorpus",
        name: "Clipboard"
      }, {
        id: 7,
        ᐃⵠⵠ: Δᐃ.ΔⲆⲆᐃⵠⲆⲆ,
        ⵠⲆΔ: Δᐃ.ᐃⲆΔⲆᐃⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "eogito",
        name: "Seed Book"
      }, {
        id: 20,
        ᐃⵠⵠ: Δᐃ.ᐃᐃⲆᐃⵠᐃⵠ,
        ⵠⲆΔ: Δᐃ.ᐃΔⲆᐃᐃⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Camo Book"
      }, {
        id: 24,
        ᐃⵠⵠ: Δᐃ.ⵠΔΔⲆⵠⵠᐃ,
        ⵠⲆΔ: Δᐃ.ⵠⵠⲆᐃⲆⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Communist",
        name: "Stone Tablet"
      }, {
        id: Li,
        ᐃⵠⵠ: Δᐃ.ⵠⲆΔⲆᐃⲆᐃ,
        ⵠⲆΔ: Δᐃ.ᐃΔᐃᐃⵠⵠⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "pizza wa",
        name: "Star Book"
      }, {
        id: Fh,
        ᐃⵠⵠ: Δᐃ.ⲆⲆᐃⵠΔᐃΔ,
        ⵠⲆΔ: Δᐃ.ΔⵠⵠⵠΔᐃⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Gold Book"
      }, {
        id: 15,
        ᐃⵠⵠ: Δᐃ.ⵠᐃⲆⲆΔΔⵠ,
        ⵠⲆΔ: Δᐃ.ⲆᐃᐃⲆᐃⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Old Mysterious Paper"
      }, {
        id: 17,
        ᐃⵠⵠ: Δᐃ.ᐃⵠΔⲆᐃⵠᐃ,
        ⵠⲆΔ: Δᐃ.ⵠΔⲆⵠⵠⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Gold Engraving"
      }, {
        id: 25,
        ᐃⵠⵠ: Δᐃ.ⵠΔᐃⲆᐃΔΔ,
        ⵠⲆΔ: Δᐃ.ᐃⵠⵠΔΔΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "fatant",
        name: "Ant Book"
      }, {
        id: 32,
        ᐃⵠⵠ: Δᐃ.ΔᐃⲆⲆⵠᐃⵠ,
        ⵠⲆΔ: Δᐃ.ᐃⵠⵠΔΔΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Mummy Book"
      }, {
        id: 37,
        ᐃⵠⵠ: Δᐃ.ΔΔⵠΔᐃᐃⵠ,
        ⵠⲆΔ: Δᐃ.ΔᐃⵠⲆΔᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Garlic Book"
      }, {
        id: 38,
        ᐃⵠⵠ: Δᐃ.ⵠΔⲆΔⲆᐃΔ,
        ⵠⲆΔ: Δᐃ.ᐃΔᐃⵠⵠΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Pumpkin Book"
      }, {
        id: 39,
        ᐃⵠⵠ: Δᐃ.ⵠᐃΔᐃᐃΔⲆ,
        ⵠⲆΔ: Δᐃ.ᐃⵠᐃΔⲆⲆⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Christmas Tree Book"
      }, {
        id: 11,
        ᐃⵠⵠ: Δᐃ.ⵠⵠⵠᐃᐃⲆΔ,
        ⵠⲆΔ: Δᐃ.ᐃΔΔᐃᐃΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Diamond Book"
      }, {
        id: 9,
        ᐃⵠⵠ: Δᐃ.ⵠⵠⲆⵠⵠΔⵠ,
        ⵠⲆΔ: Δᐃ.ᐃⲆⵠⵠⵠΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Obscure Book"
      }, {
        id: bl,
        ᐃⵠⵠ: Δᐃ.ΔⲆΔᐃⲆⵠⵠ,
        ⵠⲆΔ: Δᐃ.ᐃⲆᐃⵠⲆⵠⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Rolled Parchment"
      }, {
        id: 22,
        ᐃⵠⵠ: Δᐃ.ΔⵠⲆⵠⵠⲆⵠ,
        ⵠⲆΔ: Δᐃ.ΔΔⵠⲆⵠⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Cake Book"
      }, {
        id: 23,
        ᐃⵠⵠ: Δᐃ.ᐃⲆᐃΔⵠⵠΔ,
        ⵠⲆΔ: Δᐃ.ᐃΔⲆᐃᐃⲆⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Christmas Cake Book"
      }, {
        id: 30,
        ᐃⵠⵠ: Δᐃ.ΔⲆᐃΔⲆᐃᐃ,
        ⵠⲆΔ: Δᐃ.ᐃⲆⵠⲆⲆΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "MADBalgouthi",
        name: "Fish Book"
      }, {
        id: 31,
        ᐃⵠⵠ: Δᐃ.ⲆⵠⵠⵠⲆᐃⵠ,
        ⵠⲆΔ: Δᐃ.ⵠⲆΔᐃⵠⵠⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "CrysTal",
        name: "Once upon a time"
      }, {
        id: Ll,
        ᐃⵠⵠ: Δᐃ.ᐃΔⵠⵠᐃᐃⲆ,
        ⵠⲆΔ: Δᐃ.ᐃⵠᐃᐃᐃⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Amethyst Book"
      }, {
        id: 28,
        ᐃⵠⵠ: Δᐃ.ᐃⵠⵠΔⲆⲆᐃ,
        ⵠⲆΔ: Δᐃ.ⲆΔΔᐃΔⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Paint Pallet"
      }, {
        id: 29,
        ᐃⵠⵠ: Δᐃ.ⵠⲆᐃᐃΔⲆᐃ,
        ⵠⲆΔ: Δᐃ.ᐃⲆᐃΔⵠⲆⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "CrysTal",
        name: "Watermelon Book"
      }, {
        id: 27,
        ᐃⵠⵠ: Δᐃ.ⵠᐃΔΔⲆⲆⲆ,
        ⵠⲆΔ: Δᐃ.ᐃᐃΔΔᐃⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Thornbush Book"
      }, {
        id: 35,
        ᐃⵠⵠ: Δᐃ.ⲆΔᐃⲆⲆⵠⵠ,
        ⵠⲆΔ: Δᐃ.ᐃΔⵠΔⲆⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Menu"
      }, {
        id: 36,
        ᐃⵠⵠ: Δᐃ.ᐃᐃⵠⲆΔΔΔ,
        ⵠⲆΔ: Δᐃ.ᐃΔᐃΔΔΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "CrysTal",
        name: "Lover Letter"
      }, {
        id: 40,
        ᐃⵠⵠ: Δᐃ.ⲆⲆⲆΔΔⵠⲆ,
        ⵠⲆΔ: Δᐃ.ΔⵠᐃⲆΔᐃᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Fresh-Baked Cookies"
      }, {
        id: 41,
        ᐃⵠⵠ: Δᐃ.ⵠⵠΔⵠᐃΔᐃ,
        ⵠⲆΔ: Δᐃ.ΔΔⵠᐃΔⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Inside, there is just a book."
      }, {
        id: 33,
        ᐃⵠⵠ: Δᐃ.ᐃⲆⵠⲆΔΔⵠ,
        ⵠⲆΔ: Δᐃ.ⵠⲆⲆᐃⵠΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Winter Book"
      }, {
        id: 34,
        ᐃⵠⵠ: Δᐃ.ΔⵠᐃⲆⵠⲆᐃ,
        ⵠⲆΔ: Δᐃ.ⲆⵠΔⵠⵠⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Autumn Book"
      }, {
        id: El,
        ᐃⵠⵠ: Δᐃ.ΔⵠΔΔΔⲆᐃ,
        ⵠⲆΔ: Δᐃ.ΔᐃⵠⵠⵠⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Reidite Book"
      }, {
        id: Ug,
        ᐃⵠⵠ: Δᐃ.ᐃΔⵠⵠⲆΔᐃ,
        ⵠⲆΔ: Δᐃ.ⵠᐃΔΔⵠⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Winter",
        name: "Lava Book"
      }, {
        id: 26,
        ᐃⵠⵠ: Δᐃ.ᐃΔⵠΔⲆΔⵠ,
        ⵠⲆΔ: Δᐃ.ΔᐃⲆⵠᐃⵠⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Lava Book 2"
      }, {
        id: As,
        ᐃⵠⵠ: Δᐃ.ⲆⲆⲆᐃᐃᐃⵠ,
        ⵠⲆΔ: Δᐃ.ⲆⵠΔⲆΔΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Winter",
        name: "Ocean Mystery"
      }, {
        id: 21,
        ᐃⵠⵠ: Δᐃ.ΔⲆⵠⲆⵠΔⲆ,
        ⵠⲆΔ: Δᐃ.ⲆⲆⲆⵠΔΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Dragon Book"
      }, {
        id: 42,
        ᐃⵠⵠ: Δᐃ.ᐃᐃⵠᐃᐃⵠⵠ,
        ⵠⲆΔ: Δᐃ.ⲆⲆⲆᐃᐃᐃᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Engineer Book"
      }, {
        id: 43,
        ᐃⵠⵠ: Δᐃ.ⵠᐃΔⲆᐃⲆΔ,
        ⵠⲆΔ: Δᐃ.ᐃⵠΔᐃΔⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Nightmare Book"
      }, {
        id: 44,
        ᐃⵠⵠ: Δᐃ.ⲆⲆⲆⵠᐃⲆⵠ,
        ⵠⲆΔ: Δᐃ.ΔⵠΔⵠᐃᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "aloner",
        name: "Mystery Book"
      }],
      ΔΔⵠⲆᐃ: [{
        id: Ih,
        ᐃⵠⵠ: Δᐃ.ⵠⵠΔᐃΔⲆⲆ,
        ⵠⲆΔ: Δᐃ.ⵠⵠΔᐃΔⲆⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔⵠⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Nothing"
      }, {
        id: 2,
        ᐃⵠⵠ: Δᐃ.ⲆⲆᐃᐃᐃᐃᐃ,
        ⵠⲆΔ: Δᐃ.ⲆΔᐃⵠⵠᐃᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔⵠⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Pink Cheeks"
      }, {
        id: Ft,
        ᐃⵠⵠ: Δᐃ.ⵠᐃⵠⵠⵠᐃᐃ,
        ⵠⲆΔ: Δᐃ.ⲆⲆΔⵠᐃⲆⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔⵠⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Heart"
      }, {
        id: _h,
        ᐃⵠⵠ: Δᐃ.ᐃᐃΔΔⵠΔΔ,
        ⵠⲆΔ: Δᐃ.ᐃⵠΔΔⵠᐃΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔⵠⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Bandage 1"
      }, {
        id: ge,
        ᐃⵠⵠ: Δᐃ.ᐃⵠᐃΔΔΔᐃ,
        ⵠⲆΔ: Δᐃ.ⲆΔΔⲆⲆᐃΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔⵠⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Flower 1"
      }, {
        id: 5,
        ᐃⵠⵠ: Δᐃ.ΔΔⵠΔⵠⵠΔ,
        ⵠⲆΔ: Δᐃ.ᐃᐃΔΔⵠⲆⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Starve.io",
        name: "Bow 1"
      }, {
        id: 6,
        ᐃⵠⵠ: Δᐃ.ΔᐃᐃΔΔΔᐃ,
        ⵠⲆΔ: Δᐃ.ⲆⲆⵠⲆΔΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "eogito",
        name: "Bandage 2"
      }, {
        id: 7,
        ᐃⵠⵠ: Δᐃ.ⵠᐃΔⵠΔⲆⲆ,
        ⵠⲆΔ: Δᐃ.ⵠⲆΔⵠⲆⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "Starve.io",
        name: "Flower 2"
      }, {
        id: 8,
        ᐃⵠⵠ: Δᐃ.ΔΔᐃⲆⲆⵠᐃ,
        ⵠⲆΔ: Δᐃ.ΔⵠⵠⲆΔΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "eogito",
        name: "Bandage 3"
      }, {
        id: 36,
        ᐃⵠⵠ: Δᐃ.ⲆⵠᐃⲆΔᐃⲆ,
        ⵠⲆΔ: Δᐃ.ΔⲆΔⵠᐃᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "eogito",
        name: "Foliage"
      }, {
        id: 59,
        ᐃⵠⵠ: Δᐃ.ⵠΔⵠΔⵠΔⲆ,
        ⵠⲆΔ: Δᐃ.ᐃⲆᐃᐃⲆⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "eogito",
        name: "Peaceful"
      }, {
        id: 67,
        ᐃⵠⵠ: Δᐃ.ⵠΔΔᐃΔⵠⵠ,
        ⵠⲆΔ: Δᐃ.ⲆᐃⵠⲆⵠⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "pizza wa",
        name: "Sparkles"
      }, {
        id: 68,
        ᐃⵠⵠ: Δᐃ.ⵠᐃⲆΔⵠᐃⲆ,
        ⵠⲆΔ: Δᐃ.ΔΔΔⲆⵠⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "pizza wa",
        name: "Luxury"
      }, {
        id: 69,
        ᐃⵠⵠ: Δᐃ.ᐃⵠΔᐃⲆΔᐃ,
        ⵠⲆΔ: Δᐃ.ⲆⲆⲆⲆΔⲆⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ΔΔⲆᐃ,
        ⲆⲆⵠ: "pizza wa",
        name: "Snow Flakes Crown"
      }, {
        id: 17,
        ᐃⵠⵠ: Δᐃ.ⵠᐃⲆᐃᐃⵠᐃ,
        ⵠⲆΔ: Δᐃ.ᐃᐃΔᐃΔⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Glasses 1"
      }, {
        id: bg,
        ᐃⵠⵠ: Δᐃ.ΔᐃⲆᐃⲆᐃΔ,
        ⵠⲆΔ: Δᐃ.ΔⲆⵠᐃΔᐃΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Bow 2"
      }, {
        id: vg,
        ᐃⵠⵠ: Δᐃ.ⵠΔᐃΔⵠᐃᐃ,
        ⵠⲆΔ: Δᐃ.ⵠⵠΔᐃᐃⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "pizza wa",
        name: "Little Stars"
      }, {
        id: zl,
        ᐃⵠⵠ: Δᐃ.ᐃΔᐃⲆⲆⲆⲆ,
        ⵠⲆΔ: Δᐃ.ⲆⲆΔΔᐃΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "eogito",
        name: "Pirate Eye Patch 1"
      }, {
        id: 44,
        ᐃⵠⵠ: Δᐃ.ⵠΔΔᐃᐃⲆⲆ,
        ⵠⲆΔ: Δᐃ.ᐃΔᐃⵠᐃᐃⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Pirate Eye Patch 2"
      }, {
        id: 23,
        ᐃⵠⵠ: Δᐃ.ΔⲆΔᐃⲆⲆΔ,
        ⵠⲆΔ: Δᐃ.ⵠⵠⲆᐃⲆⵠⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Clown nose"
      }, {
        id: 16,
        ᐃⵠⵠ: Δᐃ.ᐃΔᐃⲆⲆᐃⲆ,
        ⵠⲆΔ: Δᐃ.ⵠᐃΔᐃᐃᐃΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Eye Patch"
      }, {
        id: 30,
        ᐃⵠⵠ: Δᐃ.ⵠⵠΔᐃᐃⲆⲆ,
        ⵠⲆΔ: Δᐃ.ⲆⲆⲆⲆⵠⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "eogito",
        name: "Flower 3"
      }, {
        id: 38,
        ᐃⵠⵠ: Δᐃ.ⵠᐃΔⵠΔΔᐃ,
        ⵠⲆΔ: Δᐃ.ᐃⲆΔᐃⵠᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Winter",
        name: "False Nose"
      }, {
        id: 74,
        ᐃⵠⵠ: Δᐃ.ΔⲆⵠΔⲆⵠⵠ,
        ⵠⲆΔ: Δᐃ.ᐃᐃᐃᐃΔΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Red Cloth"
      }, {
        id: 75,
        ᐃⵠⵠ: Δᐃ.ΔᐃΔᐃᐃⵠΔ,
        ⵠⲆΔ: Δᐃ.ΔᐃⲆⲆⲆΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Blue Cloth"
      }, {
        id: 79,
        ᐃⵠⵠ: Δᐃ.ⵠⵠΔᐃΔⵠΔ,
        ⵠⲆΔ: Δᐃ.ⲆⲆΔΔⲆᐃΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "Transparent Mask"
      }, {
        id: 89,
        ᐃⵠⵠ: Δᐃ.ⵠᐃⵠᐃᐃⵠᐃ,
        ⵠⲆΔ: Δᐃ.ΔᐃⲆⵠΔΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Anyone want to play?",
        name: "Starve.io Anime"
      }, {
        id: 94,
        ᐃⵠⵠ: Δᐃ.ᐃⲆᐃⲆⲆⵠᐃ,
        ⵠⲆΔ: Δᐃ.ⵠⵠⲆᐃΔⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ᐃⵠⲆⲆ,
        ⲆⲆⵠ: "Ant",
        name: "Hero Mask"
      }, {
        id: 15,
        ᐃⵠⵠ: Δᐃ.ΔⲆⲆⵠΔΔᐃ,
        ⵠⲆΔ: Δᐃ.ⲆᐃᐃᐃⵠⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Star Glasses"
      }, {
        id: 21,
        ᐃⵠⵠ: Δᐃ.ⲆⲆⲆᐃⵠⲆᐃ,
        ⵠⲆΔ: Δᐃ.ⲆⵠΔⵠⵠᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Great-aunt's Glasses"
      }, {
        id: 24,
        ᐃⵠⵠ: Δᐃ.ᐃⵠⵠᐃⵠΔⲆ,
        ⵠⲆΔ: Δᐃ.ΔᐃⲆᐃⲆⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Little Starver"
      }, {
        id: 22,
        ᐃⵠⵠ: Δᐃ.ⲆⵠᐃⲆⵠⵠᐃ,
        ⵠⲆΔ: Δᐃ.ⵠᐃΔᐃᐃᐃᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Little Glasses"
      }, {
        id: Dj,
        ᐃⵠⵠ: Δᐃ.ⲆΔⵠⵠⲆᐃⵠ,
        ⵠⲆΔ: Δᐃ.ΔⵠⵠⵠΔⵠⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Flower Chain"
      }, {
        id: 29,
        ᐃⵠⵠ: Δᐃ.ⲆⲆΔΔΔⵠᐃ,
        ⵠⲆΔ: Δᐃ.ΔΔⲆΔΔⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Horns"
      }, {
        id: 31,
        ᐃⵠⵠ: Δᐃ.ⵠΔΔᐃⵠᐃᐃ,
        ⵠⲆΔ: Δᐃ.ΔⵠⲆᐃⵠⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Golden Flower"
      }, {
        id: 40,
        ᐃⵠⵠ: Δᐃ.ⲆᐃᐃⲆⵠᐃⲆ,
        ⵠⲆΔ: Δᐃ.ⵠᐃΔⲆΔΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "pizza wa",
        name: "Sleeping Mask"
      }, {
        id: 57,
        ᐃⵠⵠ: Δᐃ.ⲆᐃⲆᐃᐃᐃᐃ,
        ⵠⲆΔ: Δᐃ.ⵠᐃᐃⲆᐃΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "Taco4Life",
        name: "Fish on your head"
      }, {
        id: 58,
        ᐃⵠⵠ: Δᐃ.ᐃⵠⵠΔⲆΔⲆ,
        ⵠⲆΔ: Δᐃ.ᐃⵠᐃⵠᐃΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Rose"
      }, {
        id: 91,
        ᐃⵠⵠ: Δᐃ.ⵠΔᐃᐃᐃⲆᐃ,
        ⵠⲆΔ: Δᐃ.ⲆⵠⲆΔⲆⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "upfiz",
        name: "Grey Scarf"
      }, {
        id: 92,
        ᐃⵠⵠ: Δᐃ.ⲆⵠΔⵠᐃΔⵠ,
        ⵠⲆΔ: Δᐃ.ΔᐃΔⲆΔⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "upfiz",
        name: "Black Scarf"
      }, {
        id: 93,
        ᐃⵠⵠ: Δᐃ.ΔⵠⵠᐃΔⵠᐃ,
        ⵠⲆΔ: Δᐃ.ⵠᐃⵠⵠⵠⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔⲆⵠ,
        ⲆⲆⵠ: "upfiz",
        name: "Skull Mask"
      }, {
        id: tg,
        ᐃⵠⵠ: Δᐃ.ⲆᐃⲆⲆᐃⵠⵠ,
        ⵠⲆΔ: Δᐃ.ⵠΔΔΔΔⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Fancy Glasses"
      }, {
        id: 25,
        ᐃⵠⵠ: Δᐃ.ⵠⲆⵠⲆⲆᐃⲆ,
        ⵠⲆΔ: Δᐃ.ⵠⲆⲆᐃᐃᐃᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Medecin Mask"
      }, {
        id: Vl,
        ᐃⵠⵠ: Δᐃ.ΔᐃⵠⵠⵠΔⵠ,
        ⵠⲆΔ: Δᐃ.ΔⵠᐃΔΔᐃΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Mr. Mayor"
      }, {
        id: 19,
        ᐃⵠⵠ: Δᐃ.ⲆⵠⵠΔⲆᐃⲆ,
        ⵠⲆΔ: Δᐃ.ⵠⵠⵠⲆᐃⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Sunglasses 2"
      }, {
        id: 28,
        ᐃⵠⵠ: Δᐃ.ᐃⲆⲆⵠΔΔΔ,
        ⵠⲆΔ: Δᐃ.ⵠΔᐃᐃᐃᐃⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "pizza wa",
        name: "Starfish"
      }, {
        id: 37,
        ᐃⵠⵠ: Δᐃ.ⵠⵠᐃΔᐃⲆᐃ,
        ⵠⲆΔ: Δᐃ.ΔᐃⲆⵠⲆⵠⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Berry"
      }, {
        id: 39,
        ᐃⵠⵠ: Δᐃ.ᐃⵠᐃΔⵠⲆᐃ,
        ⵠⲆΔ: Δᐃ.ΔⵠΔⵠⲆⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Flake"
      }, {
        id: 43,
        ᐃⵠⵠ: Δᐃ.ᐃⲆΔⲆⵠⵠⲆ,
        ⵠⲆΔ: Δᐃ.ΔⵠⵠⲆⵠΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Leaf "
      }, {
        id: 61,
        ᐃⵠⵠ: Δᐃ.ⲆᐃΔⲆⲆᐃᐃ,
        ⵠⲆΔ: Δᐃ.ᐃⲆΔᐃⲆⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "A sword in your head"
      }, {
        id: 62,
        ᐃⵠⵠ: Δᐃ.ᐃⲆⲆⵠΔⲆᐃ,
        ⵠⲆΔ: Δᐃ.ΔⵠⵠⵠΔᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Winter Scarf"
      }, {
        id: 64,
        ᐃⵠⵠ: Δᐃ.ⲆΔΔⲆΔⵠⵠ,
        ⵠⲆΔ: Δᐃ.ⲆⲆΔⲆⵠⲆⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Winter Scarf 2"
      }, {
        id: 66,
        ᐃⵠⵠ: Δᐃ.ⵠᐃⲆᐃΔΔⵠ,
        ⵠⲆΔ: Δᐃ.ⵠᐃⵠΔᐃΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Winter Scarf 3"
      }, {
        id: 70,
        ᐃⵠⵠ: Δᐃ.ⵠᐃⲆⵠᐃⲆⵠ,
        ⵠⲆΔ: Δᐃ.ᐃᐃⲆⲆΔᐃⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Mask with animal tracks"
      }, {
        id: 71,
        ᐃⵠⵠ: Δᐃ.ᐃⵠᐃⲆⵠⲆⵠ,
        ⵠⲆΔ: Δᐃ.ᐃⵠᐃⵠΔᐃΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Spring Mask"
      }, {
        id: 72,
        ᐃⵠⵠ: Δᐃ.ᐃⵠⵠᐃΔⲆΔ,
        ⵠⲆΔ: Δᐃ.ⵠⲆᐃⵠᐃᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Pink Mask"
      }, {
        id: 73,
        ᐃⵠⵠ: Δᐃ.ᐃⲆΔⲆⲆᐃⵠ,
        ⵠⲆΔ: Δᐃ.ⲆⲆᐃΔⲆᐃⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Blue Mask"
      }, {
        id: 76,
        ᐃⵠⵠ: Δᐃ.ⵠᐃᐃⵠⵠΔⵠ,
        ⵠⲆΔ: Δᐃ.ⲆⵠⲆΔⵠⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Military Mask"
      }, {
        id: 77,
        ᐃⵠⵠ: Δᐃ.ΔΔⵠⵠⵠⲆⲆ,
        ⵠⲆΔ: Δᐃ.ᐃⲆⲆⲆΔΔΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Orange Mask"
      }, {
        id: 78,
        ᐃⵠⵠ: Δᐃ.ⵠⵠⲆΔΔⵠΔ,
        ⵠⲆΔ: Δᐃ.ⲆⲆΔᐃⲆⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "White and Red Points Mask"
      }, {
        id: 80,
        ᐃⵠⵠ: Δᐃ.ⵠⲆΔⵠΔⲆΔ,
        ⵠⲆΔ: Δᐃ.ᐃᐃⲆⵠΔΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Stick out your tongue Mask"
      }, {
        id: 81,
        ᐃⵠⵠ: Δᐃ.ⲆⲆⵠᐃⵠⵠⲆ,
        ⵠⲆΔ: Δᐃ.ⵠᐃᐃⵠᐃΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Two Teeth Mask"
      }, {
        id: 82,
        ᐃⵠⵠ: Δᐃ.ⵠⲆΔⵠⵠᐃⵠ,
        ⵠⲆΔ: Δᐃ.ΔⲆᐃⵠⵠᐃⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Make-up Mask"
      }, {
        id: 83,
        ᐃⵠⵠ: Δᐃ.ⵠⵠΔΔⵠΔⵠ,
        ⵠⲆΔ: Δᐃ.ᐃΔΔⵠᐃⵠⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Sad Mask"
      }, {
        id: 84,
        ᐃⵠⵠ: Δᐃ.ⵠΔⵠⲆⲆⲆΔ,
        ⵠⲆΔ: Δᐃ.ⲆⵠᐃⲆΔⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Happy Mask"
      }, {
        id: 90,
        ᐃⵠⵠ: Δᐃ.ΔⲆⲆᐃᐃⵠⵠ,
        ⵠⲆΔ: Δᐃ.ⵠΔⲆⲆΔⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆΔΔΔ,
        ⲆⲆⵠ: "aloner",
        name: "Blood"
      }, {
        id: 27,
        ᐃⵠⵠ: Δᐃ.ᐃᐃⵠⲆⲆⲆⲆ,
        ⵠⲆΔ: Δᐃ.ΔᐃⵠΔΔᐃᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Clown Face"
      }, {
        id: 20,
        ᐃⵠⵠ: Δᐃ.ᐃᐃⵠⵠΔⵠⵠ,
        ⵠⲆΔ: Δᐃ.ΔᐃⵠⲆᐃⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Sunglasses 3"
      }, {
        id: 32,
        ᐃⵠⵠ: Δᐃ.ΔΔⲆⲆⲆⵠΔ,
        ⵠⲆΔ: Δᐃ.ΔⲆⲆΔⲆⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Engineer's Glasses"
      }, {
        id: 33,
        ᐃⵠⵠ: Δᐃ.ᐃᐃᐃᐃⵠⲆⲆ,
        ⵠⲆΔ: Δᐃ.ΔⲆⲆΔΔΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Engineer's Monocle"
      }, {
        id: 34,
        ᐃⵠⵠ: Δᐃ.ΔⲆᐃⲆΔΔΔ,
        ⵠⲆΔ: Δᐃ.ΔⵠᐃⵠᐃΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Mauve's butt"
      }, {
        id: 41,
        ᐃⵠⵠ: Δᐃ.ⲆᐃΔⵠᐃΔΔ,
        ⵠⲆΔ: Δᐃ.ΔᐃⲆΔⲆΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Lapa Head"
      }, {
        id: 42,
        ᐃⵠⵠ: Δᐃ.ⵠⲆⲆⵠᐃⵠⵠ,
        ⵠⲆΔ: Δᐃ.ᐃᐃⵠⵠⵠⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "eogito",
        name: "Lapa Head "
      }, {
        id: 85,
        ᐃⵠⵠ: Δᐃ.ⲆᐃⲆⲆΔᐃⲆ,
        ⵠⲆΔ: Δᐃ.ᐃⵠⲆⵠⵠᐃᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⲆⲆΔΔ,
        ⲆⲆⵠ: "Starve.io",
        name: "Mask and Glasses"
      }, {
        id: 60,
        ᐃⵠⵠ: Δᐃ.ᐃⲆⲆⲆⵠΔⵠ,
        ⵠⲆΔ: Δᐃ.ⵠΔⵠⵠⵠⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Jason"
      }, {
        id: 26,
        ᐃⵠⵠ: Δᐃ.ΔⵠⲆΔⲆⲆⵠ,
        ⵠⲆΔ: Δᐃ.ᐃⵠᐃΔⵠⲆΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Devil Horns"
      }, {
        id: 18,
        ᐃⵠⵠ: Δᐃ.ⵠⲆᐃᐃᐃⵠΔ,
        ⵠⲆΔ: Δᐃ.ΔΔⲆᐃΔⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Big Boss"
      }, {
        id: 35,
        ᐃⵠⵠ: Δᐃ.ⵠⵠⵠⵠⵠᐃᐃ,
        ⵠⲆΔ: Δᐃ.ⵠᐃⵠⵠⵠⲆⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Baby Kraken"
      }, {
        id: 63,
        ᐃⵠⵠ: Δᐃ.ΔᐃⲆᐃᐃᐃΔ,
        ⵠⲆΔ: Δᐃ.ᐃᐃⲆⲆⵠⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Deer Antlers"
      }, {
        id: 65,
        ᐃⵠⵠ: Δᐃ.ᐃᐃΔΔΔΔΔ,
        ⵠⲆΔ: Δᐃ.ᐃΔⵠⲆⵠⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Baby Dragon on your head"
      }, {
        id: 86,
        ᐃⵠⵠ: Δᐃ.ⵠᐃⵠᐃⲆΔⲆ,
        ⵠⲆΔ: Δᐃ.ΔᐃΔᐃⲆΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Gaz Mask and Glasses"
      }, {
        id: 87,
        ᐃⵠⵠ: Δᐃ.ΔΔᐃΔⲆⵠΔ,
        ⵠⲆΔ: Δᐃ.ᐃᐃⲆᐃⵠⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "Starve.io",
        name: "Pink Gaz Mask and Glasses"
      }, {
        id: 88,
        ᐃⵠⵠ: Δᐃ.ΔΔⲆⵠᐃΔⵠ,
        ⵠⲆΔ: Δᐃ.ᐃⲆΔⵠΔΔᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠⲆⵠⵠ,
        ⲆⲆⵠ: "eogito",
        name: "Engineer Glasses"
      }, {
        id: 45,
        ᐃⵠⵠ: Δᐃ.ᐃᐃⵠⵠΔⲆΔ,
        ⵠⲆΔ: Δᐃ.ⵠΔⵠᐃⲆᐃᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠΔⵠⵠⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "More than Level 5",
        level: _j
      }, {
        id: 46,
        ᐃⵠⵠ: Δᐃ.ᐃⲆᐃⲆⵠᐃΔ,
        ⵠⲆΔ: Δᐃ.ⲆⲆⵠⵠⲆⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠΔⵠⵠⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "More than Level 10",
        level: 10
      }, {
        id: 47,
        ᐃⵠⵠ: Δᐃ.ⲆⵠᐃᐃⲆⵠⵠ,
        ⵠⲆΔ: Δᐃ.ΔⲆᐃᐃⲆⵠΔ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠΔⵠⵠⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "More than Level 15",
        level: 15
      }, {
        id: 48,
        ᐃⵠⵠ: Δᐃ.ΔΔᐃᐃⵠᐃΔ,
        ⵠⲆΔ: Δᐃ.ⲆⲆⲆΔⲆⵠⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠΔⵠⵠⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "More than Level 20",
        level: f
      }, {
        id: 49,
        ᐃⵠⵠ: Δᐃ.ΔⵠᐃᐃⵠΔΔ,
        ⵠⲆΔ: Δᐃ.ⲆⵠᐃᐃⵠᐃⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠΔⵠⵠⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "More than Level 25",
        level: 25
      }, {
        id: 50,
        ᐃⵠⵠ: Δᐃ.ⲆᐃᐃⲆᐃᐃΔ,
        ⵠⲆΔ: Δᐃ.ΔΔᐃᐃΔΔⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠΔⵠⵠⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "More than Level 30",
        level: 30
      }, {
        id: 51,
        ᐃⵠⵠ: Δᐃ.ⵠⲆⵠᐃⵠΔᐃ,
        ⵠⲆΔ: Δᐃ.ᐃⵠⵠⲆⲆⲆⲆ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠΔⵠⵠⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "More than Level 35",
        level: 35
      }, {
        id: 52,
        ᐃⵠⵠ: Δᐃ.ᐃⵠⵠΔⵠΔⲆ,
        ⵠⲆΔ: Δᐃ.ⵠᐃⵠΔΔⵠᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠΔⵠⵠⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "More than Level 40",
        level: 40
      }, {
        id: 53,
        ᐃⵠⵠ: Δᐃ.ΔⲆⲆⵠⲆⲆΔ,
        ⵠⲆΔ: Δᐃ.ΔΔⲆⲆⲆΔⵠ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠΔⵠⵠⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "More than Level 45",
        level: 45
      }, {
        id: 54,
        ᐃⵠⵠ: Δᐃ.ⵠΔᐃⵠⵠΔⲆ,
        ⵠⲆΔ: Δᐃ.ⵠⲆΔᐃΔᐃᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠΔⵠⵠⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "More than Level 50",
        level: 50
      }, {
        id: 55,
        ᐃⵠⵠ: Δᐃ.ΔΔᐃⲆᐃⲆⵠ,
        ⵠⲆΔ: Δᐃ.ⲆⵠᐃΔΔᐃᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠΔⵠⵠⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "More than Level 55",
        level: 55
      }, {
        id: 56,
        ᐃⵠⵠ: Δᐃ.ⲆⵠⵠᐃⲆⲆⲆ,
        ⵠⲆΔ: Δᐃ.ΔⵠⲆⲆⵠⲆᐃ,
        Ⲇⵠⵠ: ⲆⲆⲆ.ⵠΔⵠⵠⲆ,
        ⲆⲆⵠ: "Starve.io",
        name: "More than Level 60",
        level: 60
      }]
    };
    ow.ⵠΔΔΔΔⵠᐃ = ⲆᐃΔΔⵠΔᐃ(ΔⲆⲆΔ.ΔⲆᐃᐃⲆ, 21);
    ow.ⵠⲆⵠⲆⵠⵠᐃ = ⲆᐃΔΔⵠΔᐃ(ΔⲆⲆΔ.ΔⲆᐃᐃⲆ, Hh);
    ᐃΔ[255] = [];
    ᐃΔ[7] = [];
    ᐃΔ[250] = [];
    ᐃΔ[28] = [];
    ᐃΔ[29] = [];
    ᐃΔ[796] = [];
    for (var a = 0; a < ΔⲆⲆΔ.ΔⲆᐃᐃⲆ.length; a++) {
      ᐃΔ[255][a] = [ΔⲆⲆΔ.ΔⲆᐃᐃⲆ[a].ᐃⵠⵠ, ΔⲆⲆΔ.ΔⲆᐃᐃⲆ[a].ⵠⲆΔ];
      ᐃΔ[7][a] = [ΔⲆⲆΔ.ΔⲆᐃᐃⲆ[a].ⵠᐃⵠᐃ, ΔⲆⲆΔ.ΔⲆᐃᐃⲆ[a].ᐃΔⵠⵠ];
    }
    for (a = 0; ΔⲆⲆΔ.ΔⵠᐃⲆⲆ.length > a; a++) {
      ᐃΔ[28][a] = [ΔⲆⲆΔ.ΔⵠᐃⲆⲆ[a].ᐃⵠⵠ, ΔⲆⲆΔ.ΔⵠᐃⲆⲆ[a].ⵠⲆΔ];
    }
    for (a = Aa; ΔⲆⲆΔ.ΔΔⵠⲆⲆ.length > a; a++) {
      ᐃΔ[250][a] = [ΔⲆⲆΔ.ΔΔⵠⲆⲆ[a].ᐃⵠⵠ, ΔⲆⲆΔ.ΔΔⵠⲆⲆ[a].ⵠⲆΔ];
    }
    for (a = 0; ΔⲆⲆΔ.ⵠⲆᐃⲆ.length > a; a++) {
      ᐃΔ[29][a] = [ΔⲆⲆΔ.ⵠⲆᐃⲆ[a].ᐃⵠⵠ, ΔⲆⲆΔ.ⵠⲆᐃⲆ[a].ⵠⲆΔ];
    }
    for (a = 0; a < ΔⲆⲆΔ.ΔΔⵠⲆᐃ.length; a++) {
      ᐃΔ[796][a] = [ΔⲆⲆΔ.ΔΔⵠⲆᐃ[a].ᐃⵠⵠ, ΔⲆⲆΔ.ΔΔⵠⲆᐃ[a].ⵠⲆΔ];
    }
  };
  const Ut = Eg;
  function Vt(a, b, c, d) {
    a.beginPath();
    a.arc(b, c, d, 0, Math.PI * 2);
  }
  const eb = Li;
  function ib(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.floor(b * 28);
    var g = Math.floor(b * fl);
    e.font = g + "px Baloo Paaji";
    var h = b * 8;
    var a = e.measureText(c).width + X * h;
    d.width = a;
    d.height = f;
    Tt(e, Ah, Ah, a, f, b * 10);
    e.globalAlpha = 0.5;
    St(e, "#000");
    e.globalAlpha = Kg;
    e.textBaseline = "middle";
    e.font = g + "px Baloo Paaji";
    e.beginPath();
    e.fillStyle = "#FFF";
    e.fillText(c, h, f / X);
    return d;
  }
  function tb(a, b, c, d, e) {
    a.beginPath();
    a.lineCap = "round";
    a.arc(b, c, d, Aa, qo * Math.PI * e);
  }
  function nb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = Math.sqrt(b.width * b.width + b.height * b.height);
    d2 = e / bq;
    c.width = e;
    c.height = e;
    d.translate(d2, d2);
    d.rotate(a);
    d.drawImage(b, -b.width / 2, -b.height / 2);
    return c;
  }
  function ob(b, c, d, e) {
    var f = Math.PI * Nj / c;
    b.beginPath();
    var g = [{
      x: d,
      y: Gg
    }];
    var i = [];
    for (var a = 1; c > a; a++) {
      g.push({
        x: Math.sin(a * f) * d,
        y: d * Math.cos(a * f)
      });
      var j = g.length;
      i.push(ᐃΔᐃⵠ.ⵠᐃⵠᐃⵠⵠΔ(g[j - On], g[j - _h]));
    }
    i.push(ᐃΔᐃⵠ.ⵠᐃⵠᐃⵠⵠΔ(g[g.length - ck], g[Rl]));
    var k = i[i.length - 1];
    b.moveTo(k.x, k.y);
    for (a = Ih; c > a; a++) {
      b.arcTo(g[a].x, g[a].y, i[a].x, i[a].y, e);
    }
    b.closePath();
  }
  const rb = Lq;
  function ab(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 120;
    var j = c * 110;
    var k = i / 2;
    var a = j / il;
    var m = c * 20;
    var h = c * 112;
    var l = c * 82;
    var g = h / 2;
    var n = l / 2;
    var b = c * co;
    e.width = i;
    e.height = j;
    f.globalAlpha = 1;
    f.translate(k, a);
    Tt(f, -g, -n, h, l, m);
    St(f, d, d, b);
    return e;
  }
  const sb = tj;
  const hb = Et;
  function lb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 22;
    d.height = a * 22;
    e.globalAlpha = 0.4;
    Vt(e, Lg * a, a * 11, a * 10);
    St(e, c[Ih]);
    e.globalAlpha = 0.7;
    Vt(e, qh * a, a * Ik, lg * a);
    St(e, c[0]);
    e.globalAlpha = 1;
    Vt(e, a * ih, a * dh, aq * a);
    St(e, c[0]);
    return d;
  }
  function gb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    Tt(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    St(e, c[0], c[Gg], a * ge);
    e.globalAlpha = 1;
    e.translate(xq, a * -10);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(Gg);
    Tt(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    St(e, c[1], c[bq], a * 4);
    e.translate(a * bq, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119, a * 28);
    e.bezierCurveTo(a * 119, a * 22, a * 119, zq * a, a * 122, a * bl);
    e.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    e.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    e.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    e.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    e.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    e.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    e.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    e.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    e.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, rq * a, a * 108);
    e.bezierCurveTo(rj * a, a * 103, a * zq, a * 86, a * 23, a * 72);
    e.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
    e.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
    e.bezierCurveTo(a * 14, a * 39, Vl * a, a * 39, a * j, a * 36);
    e.bezierCurveTo(q * a, a * 33, a * 16, a * 33, a * 19, a * 30);
    e.bezierCurveTo(Dk * a, a * 27, a * vt, a * 27, jr * a, a * 25);
    e.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    e.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    e.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    e.bezierCurveTo(a * 74, wr * a, a * 74, a * 16, a * 106, Cq * a);
    e.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    e.closePath();
    St(e, c[3], c[eh], Og * a);
    return d;
  }
  function ub(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 182, a * 120);
    Tt(e, -$l * a, a * -67, a * 16, a * 134, Kg * a);
    e.restore();
    St(e, c[xq]);
    e.save();
    e.translate(a * 68.5, a * 127.5);
    Tt(e, a * -8.5, a * -70.5, a * A, a * 141, a * 1);
    e.restore();
    St(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 68);
    Tt(e, a * -82.5, a * -24, a * 165, a * 48, a * 4);
    e.restore();
    St(e, c[Nr], c[1], _g * a);
    e.save();
    e.translate(a * 123, a * 179.5);
    Tt(e, a * -83, a * -24.5, a * 166, a * 49, a * 4);
    e.restore();
    St(e, c[2], c[Ls], a * 6);
    e.save();
    e.translate(a * 123.5, a * 123.5);
    e.rotate(6.24);
    Tt(e, a * -82.5, a * -24.5, a * 165, a * 49, a * 4);
    e.restore();
    St(e, c[Lq], c[wh], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 112);
    e.bezierCurveTo(a * 149, a * 121.5, a * 96, a * 130, a * 94, a * 131);
    e.bezierCurveTo(a * 149.5, a * 127.5, a * 149.5, a * 127.5, a * 205, a * 124);
    e.closePath();
    St(e, c[1]);
    return d;
  }
  function bb(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 185;
    e.height = a * 240;
    f.globalAlpha = 0.5;
    f.translate(sb, a * bg);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 44, a * 137);
    f.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    f.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    f.closePath();
    St(f, c[Aa]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 53, a * 181);
    f.bezierCurveTo(a * 30, a * 164, eg * a, a * 150, Rr * a, a * 136);
    f.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    f.closePath();
    St(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 63, a * 208);
    f.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    f.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    f.closePath();
    St(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 130, a * 170);
    f.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    f.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    f.closePath();
    St(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 39, a * 140);
    f.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    f.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    f.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    f.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    f.closePath();
    St(f, c[sb]);
    f.globalAlpha = Kg;
    f.translate(tj, -Wg * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 44, a * 137);
    f.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    f.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    f.closePath();
    St(f, c[1], c[Ht], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 53, a * 181);
    f.bezierCurveTo(a * 30, a * 164, a * ka, a * 150, a * Ik, a * 136);
    f.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    f.closePath();
    St(f, c[1], c[On], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 63, a * 208);
    f.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    f.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    f.closePath();
    St(f, c[1], c[Nj], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 130, a * 170);
    f.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    f.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    f.closePath();
    St(f, c[er], c[jg], a * Oa);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 39, a * 140);
    f.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    f.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    f.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    f.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    f.closePath();
    St(f, c[1], c[jg], a * Oa);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 59, a * 99);
    f.bezierCurveTo(a * 71, a * 68, a * 81, a * 68, a * 94, a * 67);
    f.bezierCurveTo(a * 105, a * 66, a * 119, a * 75, a * 123, a * 96);
    f.bezierCurveTo(a * 104, a * 91, a * 101, a * 94, a * 94, a * 97);
    f.bezierCurveTo(a * 76, a * 92, a * 73, a * 93, a * 60, a * 99);
    f.closePath();
    St(f, c[3], c[il], a * oe);
    if (d === 0) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 47, a * 149);
      f.bezierCurveTo(a * 43, a * 140, a * 48, a * 130, a * 59, a * 127);
      f.bezierCurveTo(a * 77, a * 126, a * 90, a * 131, a * 131, a * 127);
      f.bezierCurveTo(a * 143, a * 130, a * 144, a * 143, a * 132, a * 154);
      f.bezierCurveTo(a * 90, a * 152, a * 90, a * 152, a * 48, a * 150);
      f.closePath();
      St(f, c[ck]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 40, a * 139);
      f.bezierCurveTo(a * 48, a * 113, a * 76, a * 119, a * 91, a * 126);
      f.bezierCurveTo(a * 117, a * 113, a * 135, a * 117, a * 144, a * 134);
      f.bezierCurveTo(a * 144, a * 138, a * 144, a * 138, a * 144, a * 142);
      f.bezierCurveTo(a * 128, a * 124, a * 108, a * 124, a * 91, a * 136);
      f.bezierCurveTo(a * 59, a * 124, a * 50, a * 137, a * 42, a * 148);
      f.closePath();
      St(f, c[3], c[Ht], a * Qt);
    } else {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 41, a * 139);
      f.bezierCurveTo(a * 53, a * 117, a * 69, a * 118, a * 92, a * 127);
      f.bezierCurveTo(a * 124, a * 111, a * 136, a * 121, a * 143, a * 136);
      f.bezierCurveTo(a * 142, a * 144, a * 142, a * 144, a * 141, a * 152);
      f.bezierCurveTo(a * 128, a * 131, a * 113, a * 138, a * 92, a * 145);
      f.bezierCurveTo(a * 57, a * 133, a * 57, a * 147, a * 44, a * 154);
      f.closePath();
      St(f, c[3], c[2], a * eh);
    }
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 90, a * 95);
    f.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
    f.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
    f.bezierCurveTo(a * 92, Sj * a, a * 83, a * ch, a * 78, a * 29);
    f.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
    f.closePath();
    St(f, c[1], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 90, a * 86);
    f.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
    f.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * 16);
    f.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
    f.closePath();
    St(f, c[1], c[Qn], a * ge);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 92, a * 117);
    f.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
    f.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
    f.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
    f.bezierCurveTo(a * 90, a * 93, a * 89, a * Fs, a * 92, a * 117);
    f.closePath();
    St(f, c[1], c[Rn], a * co);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 92, a * 175);
    f.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
    f.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
    f.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
    f.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
    f.closePath();
    St(f, c[1], c[3], a * eh);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 48, a * 169);
    f.bezierCurveTo(a * 42, a * 187, a * 50, a * 193, a * 59, a * 198);
    f.closePath();
    St(f, undefined, c[Ht], Ij * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 136, a * 171);
    f.bezierCurveTo(a * 139, a * 186, a * 138, a * 191, a * 124, a * 199);
    f.closePath();
    St(f, undefined, c[ta], a * 4);
    Vt(f, a * 63, a * 180, a * 15.231546211727817);
    St(f, c[4]);
    Vt(f, a * 121, a * 181, a * 15.652475842498529);
    St(f, c[4]);
    Vt(f, a * 58, a * 175, a * 5.656854249492381);
    St(f, c[Ht]);
    Vt(f, a * 116, a * 175, a * 5.656854249492381);
    St(f, c[fh]);
    return e;
  }
  function vb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * vq);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    Tt(e, a * -62.5, a * -41.5, a * 125, a * 83, rq * a);
    e.restore();
    St(e, c[0], c[Gk], a * yn);
    e.globalAlpha = er;
    e.translate(Aa, -Gh * a);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    Tt(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    St(e, c[1], c[2], a * 4);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26.999969482421875, a * 50.850677490234375);
    e.bezierCurveTo(a * 46.499969482421875, a * 64.85067749023438, a * 46.499969482421875, a * 64.85067749023438, a * 65.99996948242188, a * 78.85067749023438);
    e.bezierCurveTo(a * 80.99996948242188, a * 87.85067749023438, a * 105.99996948242188, a * 82.85067749023438, a * 114.99996948242188, a * 80.85067749023438);
    e.bezierCurveTo(a * 130.99996948242188, a * 69.85067749023438, a * 152.99996948242188, a * 70.85067749023438, a * 166.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 156.99996948242188, a * 52.850677490234375, a * 156.99996948242188, a * 52.850677490234375, a * 146.99996948242188, a * 37.850677490234375);
    e.bezierCurveTo(a * 101.49996948242188, a * 37.350677490234375, a * 101.49996948242188, a * 37.350677490234375, a * 55.999969482421875, a * 36.850677490234375);
    e.closePath();
    St(e, c[Nr], c[3], a * 4);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 41.999969482421875, a * 50.850677490234375, a * 47.999969482421875, a * 47.850677490234375, a * 56.999969482421875, a * 49.850677490234375);
    e.bezierCurveTo(a * 65.99996948242188, a * 41.850677490234375, a * 76.99996948242188, a * 42.850677490234375, a * 90.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 94.99996948242188, a * 42.850677490234375, a * 104.99996948242188, a * 42.850677490234375, a * 114.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 131.99996948242188, a * 42.850677490234375, a * 142.99996948242188, a * 48.850677490234375, a * 145.99996948242188, a * 56.850677490234375);
    e.bezierCurveTo(a * 160.99996948242188, a * 63.850677490234375, a * 154.99996948242188, a * 69.85067749023438, a * 155.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 141.99996948242188, a * 71.85067749023438, a * 141.99996948242188, a * 71.85067749023438, a * 127.99996948242188, a * 72.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 83.85067749023438, a * 107.99996948242188, a * 82.85067749023438, a * 90.99996948242188, a * 85.85067749023438);
    e.bezierCurveTo(a * 70.99996948242188, a * 83.85067749023438, a * 64.99996948242188, a * 79.85067749023438, a * 53.999969482421875, a * 70.85067749023438);
    e.closePath();
    St(e, c[wi], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.999969482421875, a * 65.85067749023438);
    e.bezierCurveTo(a * 36.999969482421875, a * 59.850677490234375, a * 34.999969482421875, a * 60.850677490234375, a * 39.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 47.999969482421875, a * 61.850677490234375, a * 62.999969482421875, a * 76.85067749023438, a * 74.99996948242188, a * 79.85067749023438);
    e.bezierCurveTo(a * 93.99996948242188, a * 85.85067749023438, a * 111.99996948242188, a * 83.85067749023438, a * 124.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 129.99996948242188, a * 67.85067749023438, a * 145.99996948242188, a * 65.85067749023438, a * 159.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 75.85067749023438);
    e.bezierCurveTo(a * 146.99996948242188, a * 72.85067749023438, a * 144.99996948242188, a * 75.85067749023438, a * 143.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 144.99996948242188, a * 86.85067749023438, a * 140.99996948242188, a * 90.85067749023438, a * 137.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 139.99996948242188, a * 72.85067749023438, a * 135.99996948242188, a * 72.85067749023438, a * 133.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 127.99996948242188, a * 88.85067749023438, a * 124.99996948242188, a * 70.85067749023438, a * 116.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 91.85067749023438, a * 96.99996948242188, a * 81.85067749023438, a * 89.99996948242188, a * 90.85067749023438);
    e.bezierCurveTo(a * 85.99996948242188, a * 92.85067749023438, a * 81.99996948242188, a * 95.85067749023438, a * 76.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 67.99996948242188, a * 93.85067749023438, a * 67.99996948242188, a * 91.85067749023438, a * 60.999969482421875, a * 79.85067749023438);
    e.bezierCurveTo(a * 53.999969482421875, a * 71.85067749023438, a * 52.999969482421875, a * 72.85067749023438, a * 46.999969482421875, a * 77.85067749023438);
    e.bezierCurveTo(a * 41.999969482421875, a * 78.85067749023438, a * 42.999969482421875, a * 69.85067749023438, a * 33.999969482421875, a * 65.85067749023438);
    e.closePath();
    St(e, c[Pg], c[6], Og * a);
    Vt(e, a * 68, a * 111.29513549804688, a * 15);
    St(e, c[Ji], c[Kn], a * $j);
    Vt(e, a * 123, a * 111.29510498046875, a * 15);
    St(e, c[7], c[8], a * 4);
    Vt(e, a * 63, a * 106, a * 5);
    St(e, c[9]);
    Vt(e, a * 118, a * 106, a * 5);
    St(e, c[Ag]);
    return d;
  }
  function db(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 185;
    c.height = a * 240;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 137);
    d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    d.closePath();
    St(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 53, a * 181);
    d.bezierCurveTo(a * 30, a * 164, a * xj, a * 150, qn * a, a * 136);
    d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    d.closePath();
    St(d, b[xq]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 63, a * 208);
    d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    d.closePath();
    St(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 170);
    d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    d.closePath();
    St(d, b[xq]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 39, a * 140);
    d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    d.closePath();
    St(d, b[Rl]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 95);
    d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
    d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
    d.bezierCurveTo(a * 92, a * 5, a * 83, a * on, a * 78, a * 29);
    d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
    d.closePath();
    St(d, b[Ah]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 86);
    d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
    d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * 16);
    d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
    d.closePath();
    St(d, b[fg]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 117);
    d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
    d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
    d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
    d.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
    d.closePath();
    St(d, b[Ih]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 175);
    d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
    d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
    d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
    d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
    d.closePath();
    St(d, b[0]);
    return c;
  }
  function cb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 183, a * 107);
    Tt(e, -Ko * a, a * -70.5, ch * a, a * 141, a * 1);
    e.restore();
    St(e, c[xq]);
    e.save();
    e.translate(a * 69.5, a * 110);
    Tt(e, a * -8.5, a * -71, a * ae, a * 143, a * 1);
    e.restore();
    St(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 181);
    Tt(e, a * -84.5, a * -26, a * 169, a * 52, a * Ks);
    e.restore();
    St(e, c[Nr], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 95);
    e.bezierCurveTo(a * 105, a * 96, a * 113, a * 99, a * 134, a * 102);
    e.bezierCurveTo(a * 147, a * 106, a * 173, Ir * a, a * 207, a * 105);
    e.bezierCurveTo(a * 210, a * 105, a * 207, a * 140, a * 207, a * 154);
    e.bezierCurveTo(a * 123.5, a * 151.5, a * 123.5, a * 151.5, a * 40, a * 149);
    e.bezierCurveTo(a * 37, a * 145, a * 39, a * 95, a * 41, a * 96);
    e.closePath();
    St(e, c[tk], c[sl], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 75);
    e.bezierCurveTo(a * 54, a * 72.5, a * 54, a * 72.5, a * 40, a * 70);
    e.bezierCurveTo(a * 38, a * 46, a * 40, a * 46, a * 53, a * 46);
    e.bezierCurveTo(a * 201, a * 41, a * 201, a * 41, a * 201, a * 42);
    e.bezierCurveTo(a * 211, a * 40, a * 208, a * 53, a * 208, a * 72);
    e.bezierCurveTo(a * 209, a * 91, a * 210, a * 96, a * 194, a * 94);
    e.bezierCurveTo(a * 119, a * 97, a * 119, a * 97, a * 44, a * 100);
    e.bezierCurveTo(a * 39, a * 99, a * 40, a * 96, a * 40, a * 80);
    e.bezierCurveTo(a * 54, a * 77.5, a * 54, a * 77.5, a * 68, a * 75);
    e.closePath();
    St(e, c[Qn], c[wh], a * 6);
    return d;
  }
  function mb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 69.5, a * 145);
    Tt(e, a * -8.5, a * -63, a * 17, a * 127, _h * a);
    e.restore();
    St(e, c[0]);
    e.save();
    e.translate(a * 183, a * 145);
    Tt(e, -Nk * a, a * -63, a * 16, a * 126, a * 1);
    e.restore();
    St(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 62.5);
    e.rotate(6.28);
    Tt(e, a * -84.5, a * -25.5, a * 169, a * 51, a * 5);
    e.restore();
    St(e, c[il], c[Ga], a * 6);
    e.save();
    e.translate(a * 123.5, a * 118);
    e.rotate(6.24);
    Tt(e, a * -85.5, a * -24, a * 169, a * 48, a * Zg);
    e.restore();
    St(e, c[3], c[1], a * 6);
    e.save();
    e.translate(a * 122, a * 177.5);
    e.rotate(6.32);
    Tt(e, a * -84, a * -23.5, a * 169, a * 47, a * 5);
    e.restore();
    St(e, c[fh], c[wh], a * Ze);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 157);
    e.bezierCurveTo(a * 49, a * 160, a * 49, a * 160, a * 61, a * 163);
    e.bezierCurveTo(a * 49.5, a * 165.5, a * 49.5, a * 165.5, a * 38, a * 168);
    e.closePath();
    St(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 205, a * 175);
    e.bezierCurveTo(a * 192.5, a * 180, a * 192.5, a * 180, a * 180, a * 185);
    e.bezierCurveTo(a * 193, a * 188, a * 193, a * 188, a * 206, a * 191);
    e.closePath();
    St(e, c[1]);
    return d;
  }
  function pb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 191;
    c.height = a * 153;
    d.save();
    d.translate(a * 96.49996948242188, a * 66.79510498046875);
    Tt(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    d.restore();
    St(d, b[0], b[Ah], a * hr);
    d.translate(a * 2, et);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 119, a * 28);
    d.bezierCurveTo(a * 119, a * 22, a * 119, Vk * a, a * 122, Jg * a);
    d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    d.bezierCurveTo(a * xl, a * 103, a * 20, a * 86, a * 23, a * 72);
    d.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * ne, a * 83);
    d.bezierCurveTo(tq * a, a * 65, zl * a, a * 54, a * 16, a * 42);
    d.bezierCurveTo(a * Uq, a * 39, a * ak, a * 39, Qg * a, a * 36);
    d.bezierCurveTo(q * a, a * 33, a * 16, a * 33, a * Po, a * 30);
    d.bezierCurveTo(a * 18, a * 27, a * Xg, a * 27, a * ee, a * 25);
    d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, fn * a);
    d.bezierCurveTo(a * 74, Yh * a, a * 74, a * 16, a * 106, on * a);
    d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    d.closePath();
    St(d, b[gl], b[yj], a * Nh);
    d.save();
    d.translate(a * 97.49996948242188, a * 95.12844848632812);
    Tt(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    d.restore();
    St(d, b[sb], b[Gk], a * co);
    return c;
  }
  function Cb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 70;
    d.height = a * 70;
    e.globalAlpha = 0.5;
    Vt(e, a * 26, a * 26, a * 9);
    St(e, c[0]);
    Vt(e, a * 56, a * 36, a * 9);
    St(e, c[1]);
    Vt(e, a * 40, a * 50, se * a);
    St(e, c[2]);
    e.globalAlpha = 1;
    Vt(e, a * 26, a * 26, a * zr);
    St(e, c[0]);
    Vt(e, a * 56, a * 36, a * Yl);
    St(e, c[1]);
    Vt(e, a * 40, a * 50, Bh * a);
    St(e, c[qo]);
    return d;
  }
  function Tb(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 40;
    var i = b * 40;
    e.width = g;
    e.height = i;
    var a = g * b / bq;
    var j = i * b / Nj;
    var k = b * 15;
    f.save();
    f.translate(a, j);
    f.globalAlpha = 1;
    Vt(f, 0, An, k);
    St(f, d[Ih]);
    k = Ut * b;
    a = b * 2;
    j = b * 1;
    f.translate(a, j);
    f.globalAlpha = 1;
    Vt(f, Gg, 0, k);
    St(f, d[bs]);
    f.restore();
    return e;
  }
  function fb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 264;
    d.height = a * 246;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(Jj * a, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    St(e, c[0]);
    e.translate(yj, a * -bg);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * ql, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    St(e, c[1], c[On], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 102);
    e.bezierCurveTo(a * 111, a * 80, a * 110, a * 66, a * 108, a * 51);
    e.bezierCurveTo(a * 119, a * 65, a * 129, a * 85, a * 135, a * 99);
    e.bezierCurveTo(a * 142, a * 67, a * 146, a * 60, a * 152, a * 50);
    e.bezierCurveTo(a * 154, a * 71, a * 152, a * 85, a * 149, a * 104);
    e.bezierCurveTo(a * 166, a * 88, a * 175, a * 83, a * 188, a * 78);
    e.bezierCurveTo(a * 179, a * 91, a * 170, a * 103, a * 160, a * 112);
    e.bezierCurveTo(a * 186, a * 107, a * 191, a * 107, a * 204, a * 108);
    e.bezierCurveTo(a * 195, a * 114, a * 179, a * 120, a * 163, a * 123);
    e.bezierCurveTo(a * 183, a * 130, a * 186, a * 135, a * 192, a * 140);
    e.bezierCurveTo(a * 179, a * 141, a * 164, a * 139, a * 153, a * 135);
    e.bezierCurveTo(a * 158, a * 145, a * 163, a * 159, a * 165, a * 177);
    e.bezierCurveTo(a * 154, a * 166, a * 145, a * 153, a * 138, a * 139);
    e.bezierCurveTo(a * 133, a * 155, a * 125, a * 170, a * 117, a * 182);
    e.bezierCurveTo(a * 116, a * 160, a * 119, a * 151, a * 124, a * 138);
    e.bezierCurveTo(a * 107, a * 150, a * 95, a * 156, a * 82, a * 159);
    e.bezierCurveTo(a * 94, a * 140, a * 101, a * 136, a * 113, a * 128);
    e.bezierCurveTo(a * 78, a * 123, a * 75, a * 121, a * 67, a * 118);
    e.bezierCurveTo(a * 85, a * 112, a * 94, a * 112, a * 111, a * 113);
    e.bezierCurveTo(a * 89, a * 97, a * 85, a * 93, a * 78, a * 82);
    e.bezierCurveTo(a * 92, a * 85, a * 101, a * 90, a * 121, a * 102);
    e.closePath();
    St(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 103);
    e.bezierCurveTo(a * 111, a * 112, a * 117, a * 136, a * 140, a * 130);
    e.bezierCurveTo(a * 151, a * 126, a * 156, a * 115, a * 155, a * 107);
    e.bezierCurveTo(a * 155, a * 96, a * 154, a * 94, a * 148, a * 94);
    e.bezierCurveTo(a * 141, a * 94, a * 146, a * 104, a * 136, a * 104);
    e.closePath();
    St(e, c[wi], c[Og], a * 4);
    return d;
  }
  const zb = $e;
  function yb(a) {
    var b = document.createElement("canvas");
    var c = b.getContext("2d");
    var d = a * 200;
    var e = a * 200;
    b.width = d;
    b.height = e;
    var f = Hu(0.35, ds, ["#0e3022", "#0b8052", "#077b49"]);
    c.drawImage(f, uj, bg);
    f = Iu(0.9, tr, ["#3d2a6e", "#8255b5"]);
    c.drawImage(f, 21, 20);
    f = Iu(0.9, Jh, ["#3d2a6e", "#8255b5"]);
    c.drawImage(f, 38, 28);
    f = Iu(0.9, false, ["#3d2a6e", "#8255b5"]);
    c.drawImage(f, Wa, 37);
    f = Iu(0.9, false, ["#3d2a6e", "#8255b5"]);
    c.drawImage(f, 32, 45);
    return b;
  }
  const wb = Mn;
  function Pb(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 100;
    var j = c * 100;
    var k = i / 2;
    var a = j / X;
    e.width = i;
    e.height = j;
    var m = zr * c;
    var h = c * 28;
    var l = m / 2;
    var g = h / br;
    f.translate(k, a);
    for (var n = 0; n < 4; n++) {
      Tt(f, -l, -g, m, h, c * 2);
      f.rotate(Math.PI / $j);
      St(f, d);
    }
    f.arc(fg, 0, Li * c, Rl, Math.PI * 2);
    St(f, d);
    f.globalCompositeOperation = "destination-out";
    Vt(f, fg, yj, c * 4);
    f.fill();
    return e;
  }
  function Ab(f, e, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var n = (r = f * 125) / jg;
    var o = (t = f * 95) / 2;
    var a = Ea * f;
    var p = f * 8;
    var h = f * 112;
    var l = f * 82;
    var g = h / il;
    var q = l / X;
    var b = Oa * f;
    j.width = r;
    j.height = t;
    k.translate(n - f * 4, o + mg * f);
    k.globalAlpha = e ? 0.5 : 1;
    Tt(k, -g, -q, h, l, a);
    St(k, i[0]);
    k.globalAlpha = Ek;
    k.translate(Ih, -p);
    Tt(k, -g, -q, h, l, a);
    St(k, i[1], i[qi], b);
    var r = f * 55;
    var t = f * 45;
    a = un;
    k.translate(f * -40, f * -30);
    Tt(k, tj, 0, r, t, a);
    St(k, i[rb]);
    var u = Pb(f * 0.7, i[3]);
    k.drawImage(u, f * 45, f * -25);
    u = Pb(f * 0.7, i[3]);
    k.drawImage(u, f * 45, f * Dt);
    u = Pb(f * 1.2, i[rb]);
    k.drawImage(u, f * 28, f * -30);
    r = f * ua;
    t = f * 70;
    a = f * 5;
    k.translate(f * 78, f * -un);
    Tt(k, 0, sb, r, t, a);
    St(k, i[4]);
    r = f * Ba;
    t = f * 50;
    a = f * 3;
    k.translate(f * -20, ek * f);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 0.6;
    Tt(k, yj, 0, r, t, a);
    St(k, i[ko]);
    k.translate(f * -20, f * 29);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 0.6;
    k.beginPath();
    k.lineJoin = "round";
    k.moveTo(0, Aa);
    k.lineTo(sb, f * 30);
    k.lineTo(f * 30, f * 30);
    k.closePath();
    St(k, null, i[ie], f * 8);
    return j;
  }
  function kb(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 85;
    var j = c * 115;
    var k = oq * c;
    e.width = i;
    e.height = j;
    f.translate(c * -130, c * -60 + k);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    f.closePath();
    St(f, d[0]);
    f.translate(gl, -k);
    f.globalAlpha = Ga;
    f.beginPath();
    f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    f.closePath();
    St(f, d[Ni], d[Nj], Jl);
    var a = c * 155;
    var m = c * 133;
    var h = c * Li;
    var l = c * 3;
    var g = a + c * -3;
    var n = m + c * -Pg;
    f.save();
    f.translate(a, m);
    f.globalAlpha = wh;
    Vt(f, Ah, tj, h);
    St(f, d[3]);
    f.restore();
    f.save();
    f.translate(g, n);
    f.globalAlpha = 1;
    Vt(f, yj, An, l);
    St(f, d[4]);
    f.restore();
    f.save();
    f.translate(a + c * 27, m);
    f.globalAlpha = bs;
    Vt(f, Gk, 0, h);
    St(f, d[3]);
    f.restore();
    f.save();
    f.translate(c * 27 + g, n);
    f.globalAlpha = bs;
    Vt(f, 0, xq, l);
    St(f, d[4]);
    return e;
  }
  function xb(c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 32;
    var k = c * 32;
    var a = j / 2;
    var m = k / Gl;
    f.width = j;
    f.height = k;
    var h = c * 5;
    var l = c * 28;
    var g = h / Ht;
    var n = l / 2;
    i.translate(c * 0, c * 0);
    i.translate(a, m);
    if (e == 1) {
      Vt(i, 0, An, c * F);
      St(i, d[Gl], d[bq], c * 3);
      for (var b = 0; b < 4; b++) {
        Tt(i, -g, -n, h, l, Nr * c);
        i.rotate(Math.PI / Nh);
        St(i, d[2], d[2], c * 4);
      }
    }
    Vt(i, 0, xq, c * 10);
    St(i, d[0], d[1], c * 1.5);
    for (b = 0; b < 4; b++) {
      Tt(i, -g, -n, h, l, c * br);
      i.rotate(Math.PI / 4);
      St(i, d[xq], d[_], c * 1.5);
    }
    Vt(i, 0, Qr, c * F);
    St(i, d[xq]);
    Vt(i, Ah, 0, Jl * c);
    St(i, d[jg], d[1], c * 1.5);
    i.globalCompositeOperation = "destination-out";
    Vt(i, gl, tj, c * 4);
    St(i, d[0], d[ig], c * il);
    i.globalCompositeOperation = "source-over";
    Vt(i, Gk, 0, c * 4);
    St(i, undefined, d[1], c * 2);
    return f;
  }
  const Jb = Ij;
  function Mb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 52;
    d.height = a * 65;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.833328247070312, a * 12.078125);
    e.bezierCurveTo(a * 15.333328247070312, a * 28.078125, a * 15.333328247070312, a * 28.078125, a * 20.833328247070312, a * 44.078125);
    e.closePath();
    St(e, undefined, c[Co], Ol * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 7.8333282470703125, a * 20.078125);
    e.bezierCurveTo(a * 16.833328247070312, a * 32.578125, a * 16.833328247070312, a * 32.578125, a * 25.833328247070312, a * 45.078125);
    e.closePath();
    St(e, Cr, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 26.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 11.078125, a * 16.833328247070312, a * 8.078125, a * 14.833328247070312, a * 7.078125);
    e.bezierCurveTo(a * 11.833328247070312, a * 17.078125, a * 13.833328247070312, a * 22.078125, a * 23.833328247070312, a * 27.078125);
    e.closePath();
    St(e, c[An], c[_], a * Ht);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.83332824707031, a * 8.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 27.078125, a * 28.833328247070312, a * 27.078125, a * 23.833328247070312, a * 28.078125);
    e.bezierCurveTo(a * 21.833328247070312, a * 14.078125, a * 26.833328247070312, a * 11.078125, a * 35.83332824707031, a * 8.078125);
    e.closePath();
    St(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.833328247070312, a * 39.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 29.078125, a * 14.833328247070312, a * 27.078125, a * 5.8333282470703125, a * 29.078125);
    e.bezierCurveTo(a * 9.833328247070312, a * 39.078125, a * 16.833328247070312, a * 42.078125, a * 25.833328247070312, a * 40.078125);
    e.closePath();
    St(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.83332824707031, a * 23.078125);
    e.bezierCurveTo(a * 35.83332824707031, a * 35.078125, a * 31.833328247070312, a * 37.078125, a * 25.833328247070312, a * 36.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 24.078125, a * 33.83332824707031, a * 21.078125, a * 42.83332824707031, a * 23.078125);
    e.closePath();
    St(e, c[0], c[ig], On * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 24.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 34.078125, a * 23.833328247070312, a * 40.078125, a * 27.833328247070312, a * 43.078125);
    e.bezierCurveTo(a * 37.33332824707031, a * 28.078125, a * 37.33332824707031, a * 28.078125, a * 46.83332824707031, a * 13.078125);
    St(e, undefined, c[Ni], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38.83332824707031, a * 14.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 24.078125, a * 34.83332824707031, a * 24.078125, a * 30.833328247070312, a * 34.078125);
    St(e, undefined, c[1], Ol * a);
    return d;
  }
  function Bb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 85, a * 237);
    e.rotate(1.5707963267948966);
    ob(e, Nl, a * 54.585977194239184, a * Ls);
    e.restore();
    St(e, c[1], c[il], a * 12);
    e.save();
    e.translate(a * 178, a * 238);
    e.rotate(1.5707963267948966);
    ob(e, 6, a * 52.53573932334064, a * er);
    e.restore();
    St(e, c[Ls], c[Gl], a * zb);
    e.save();
    e.translate(a * 270, a * 239);
    e.rotate(1.5707963267948966);
    ob(e, oq, a * 53.58058329516393, a * _h);
    e.restore();
    St(e, c[sl], c[br], a * 12);
    e.save();
    e.translate(a * 222, a * 312);
    e.rotate(1.5707963267948966);
    ob(e, xh, a * 52.53573932334064, a * 1);
    e.restore();
    St(e, c[Kg], c[2], a * zl);
    e.save();
    e.translate(a * 317, a * 159);
    e.rotate(1.5707963267948966);
    ob(e, 6, a * 57.63465889766331, a * wh);
    e.restore();
    St(e, c[1], c[fh], a * j);
    e.save();
    e.translate(a * 223.5, a * 139.0625);
    e.rotate(1.5707963267948966);
    ob(e, Oe, a * 51.66236541235796, a * 1);
    e.restore();
    St(e, c[Ga], c[Nj], a * tq);
    e.save();
    e.translate(a * 132.5, a * 137.0625);
    e.rotate(1.5707963267948966);
    ob(e, Kl, a * 52.009614495783374, a * Kg);
    e.restore();
    St(e, c[Co], c[2], a * 12);
    e.save();
    e.translate(a * 178.5, a * 58.0625);
    e.rotate(1.5707963267948966);
    ob(e, 6, a * 53.16013544000805, a * 1);
    e.restore();
    St(e, c[1], c[2], a * Bs);
    e.save();
    e.translate(a * 177.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    ob(e, P, a * 50, a * 1);
    e.restore();
    St(e, c[Kg], c[2], a * $g);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(1.5707963267948966);
    ob(e, 6, a * 54, Ek * a);
    e.restore();
    St(e, c[_h], c[2], a * 12);
    e.save();
    e.translate(a * 319.5, a * 138.0625);
    e.rotate(1.5707963267948966);
    ob(e, 6, a * 55.08175741568164, a * 1);
    e.restore();
    St(e, c[Ek], c[qi], a * Vr);
    e.save();
    e.translate(a * 269.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    ob(e, kk, a * 54.589376255824725, a * 1);
    e.restore();
    St(e, c[bs], c[Ol], a * 12);
    e.save();
    e.translate(a * 221.5, a * 293.0625);
    e.rotate(0.5235987755982988);
    ob(e, Oe, a * 49.49747468305833, wh * a);
    e.restore();
    St(e, c[_], c[br], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 342.0625);
    e.bezierCurveTo(a * 221.5, a * 350.5625, a * 221.5, a * 350.5625, a * 221.5, a * 359.0625);
    e.closePath();
    St(e, Gn, c[Gl], a * Ug);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 270.0625);
    e.bezierCurveTo(a * 84.5, a * 277.0625, a * 84.5, a * 277.0625, a * 84.5, a * 284.0625);
    e.closePath();
    St(e, Gn, c[2], a * 12);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    ob(e, jq, a * 30, a * 15);
    e.restore();
    St(e, c[3]);
    e.save();
    e.translate(a * 177.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    ob(e, Is, a * 30, a * 15);
    e.restore();
    St(e, c[3]);
    e.save();
    e.translate(a * 222.5, a * 294.0625);
    e.rotate(0.5235987755982988);
    ob(e, 6, a * 30, a * 15);
    e.restore();
    St(e, c[3]);
    e.save();
    e.translate(a * 270.5, a * 216.0625);
    e.rotate(0.5235987755982988);
    ob(e, 6, a * 30, a * 15);
    e.restore();
    St(e, c[Er]);
    e.save();
    e.translate(a * 320.5, a * 134.0625);
    e.rotate(0.5235987755982988);
    ob(e, ms, a * 30, a * 15);
    e.restore();
    St(e, c[rb]);
    e.save();
    e.translate(a * 224.5, a * 138.0625);
    e.rotate(0.5235987755982988);
    ob(e, 6, a * 30, a * 15);
    e.restore();
    St(e, c[3]);
    e.save();
    e.translate(a * 133.5, a * 137.0625);
    e.rotate(0.5235987755982988);
    ob(e, 6, a * 30, a * 15);
    e.restore();
    St(e, c[3]);
    e.save();
    e.translate(a * 178.5, a * 56.0625);
    e.rotate(0.5235987755982988);
    ob(e, Nl, a * 30, a * Zq);
    e.restore();
    St(e, c[3]);
    return d;
  }
  function Db(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 188;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, _j * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    St(d, b[tj], b[sb], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    St(d, b[0], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
    d.closePath();
    St(d, b[0], b[yj], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    d.closePath();
    St(d, b[0], b[0], a * 2);
    d.globalAlpha = 1;
    d.translate(fg, -ie * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    St(d, b[Kg], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    St(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    St(d, Oq, b[tk], wi * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    St(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    St(d, b[1], b[bq], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
    d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
    d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
    d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
    d.closePath();
    St(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
    d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
    d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
    d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
    d.closePath();
    St(d, b[3]);
    Vt(d, a * 77, a * 107, oq * a);
    St(d, b[On]);
    Vt(d, a * 110, a * 107, a * 6);
    St(d, b[2]);
    Vt(d, a * 75, a * 105, a * 3);
    St(d, b[Jl]);
    Vt(d, a * 108, a * 105, wi * a);
    St(d, b[hr]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
    d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
    d.closePath();
    St(d, b[1]);
    return c;
  }
  function Eb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 238;
    c.height = a * 230;
    d.translate(a * -93, a * -110 + Pg * a);
    d.globalAlpha = 0.3;
    Vt(d, a * 213.5, a * 256.75, a * 75);
    St(d, b[5]);
    Vt(d, a * 213.5, a * 175.75, a * 25);
    St(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = yq * a;
    d.strokeStyle = b[Bh];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = Il * a;
    d.strokeStyle = b[Sj];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[ko];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[gs];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * rj;
    d.strokeStyle = b[Eg];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * ee;
    d.strokeStyle = b[ul];
    d.stroke();
    d.translate(Gg, -5);
    d.globalAlpha = _;
    Vt(d, a * 213.5, a * 256.75, a * 75);
    St(d, b[3]);
    Vt(d, a * 213.5, a * 175.75, a * 25);
    St(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.lineWidth = Gh * a;
    d.strokeStyle = b[Lq];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.lineWidth = Li * a;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = Tk * a;
    d.strokeStyle = b[nk];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * Xr;
    d.strokeStyle = b[wi];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = go * a;
    d.strokeStyle = b[Z];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = Ch * a;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = ae * a;
    d.strokeStyle = b[Z];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * Il;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * $l;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * Fh;
    d.strokeStyle = b[Ah];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[tj];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[sb];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * Ma;
    d.strokeStyle = b[gl];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    Vt(d, a * 213.5, a * 256.75, a * 70);
    St(d, b[0]);
    Vt(d, a * 213.5, a * 175.75, a * 20);
    St(d, b[0]);
    Vt(d, a * 222, a * 166, a * 5);
    d.fillStyle = b[qi];
    d.fill();
    Vt(d, a * 205, a * 166, a * Sj);
    d.fillStyle = b[2];
    d.fill();
    Vt(d, a * 206.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    Vt(d, a * 223.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    d.save();
    d.translate(a * 213.5, a * 293.75);
    d.rotate(0.76);
    Tt(d, a * -22, a * -21, a * 44, a * 42, a * 6);
    d.restore();
    d.fillStyle = b[er];
    d.fill();
    d.save();
    d.translate(a * 212.5, a * 258.25);
    d.rotate(0.8);
    Tt(d, a * -Cl, a * -14.5, a * 30, a * 29, oq * a);
    d.restore();
    d.fillStyle = b[Ek];
    d.fill();
    return c;
  }
  function Ib(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 202.5, a * 147.5);
    Tt(e, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
    e.restore();
    St(e, b[0], b[Gt], a * 12);
    e.save();
    e.translate(a * 202.5, a * 190.5);
    Tt(e, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
    e.restore();
    St(e, b[fh], b[er], a * $k);
    e.save();
    e.save();
    e.translate(a * 202.5, a * 233.5);
    Tt(e, a * -96.5, a * -20.5, a * 193, a * 41, Gg * a);
    e.restore();
    St(e, b[Er], b[1], a * Qh);
    e.save();
    e.translate(a * 202.5, a * 275);
    Tt(e, a * 96.5, a * -21, a * -193, a * 42, a * 0);
    e.restore();
    St(e, b[Ih], b[1], a * 12);
    e.save();
    e.translate(a * 201, a * 212);
    e.rotate(8.64);
    Tt(e, a * -116, a * -22, a * 232, a * 44, iq * a);
    e.restore();
    St(e, b[3], b[1], ne * a);
    e.save();
    e.translate(a * 203.5, a * 121.5);
    Tt(e, a * -115.5, a * -20.5, a * 231, a * 41, Vq * a);
    e.restore();
    St(e, b[3], b[Ek], a * 12);
    e.save();
    e.translate(a * 203.5, a * 299);
    Tt(e, a * -115.5, -fl * a, a * 231, a * 40, iq * a);
    e.restore();
    St(e, b[Hn], b[1], a * 12);
    e.save();
    e.translate(a * 298.5, a * 210);
    Tt(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    St(e, b[Rn], b[1], uh * a);
    e.save();
    e.translate(a * 108.5, a * 210);
    Tt(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    St(e, b[Ql], b[sl], $e * a);
    e.save();
    e.translate(a * 204, a * 121.5);
    Tt(e, a * -92, a * -9.5, a * 184, a * hn, a * 10);
    e.restore();
    St(e, b[3], b[Mh], a * bg);
    e.save();
    e.translate(a * 197, a * 299);
    Tt(e, a * 85, a * -eo, a * -170, L * a, a * lt);
    e.restore();
    St(e, b[3], b[3], lt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 94, a * 317);
    e.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
    e.closePath();
    St(e, undefined, b[wh], zl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279, a * 142);
    e.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
    e.closePath();
    St(e, undefined, b[1], zb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 106);
    e.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
    e.closePath();
    St(e, undefined, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 281, a * 282);
    e.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
    e.closePath();
    St(e, undefined, b[1], a * 12);
    if (c == yj) {
      e.scale(2, 2);
      e.translate(a * -wk, a * 55);
      e.rotate(-0.5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 60, a * 47);
      e.bezierCurveTo(a * 81, a * 46, a * 85, a * 47, a * 83, a * 63);
      e.bezierCurveTo(a * 83, a * 72, a * 83, a * 75, a * 72, a * 73);
      e.bezierCurveTo(a * 68, a * 80, a * 69, a * 82, a * 66, a * 73);
      e.bezierCurveTo(a * 62, a * 81, a * 61, a * 82, a * 59, a * 73);
      e.bezierCurveTo(a * 54, a * 81, a * 55, a * 81, a * 52, a * 74);
      e.bezierCurveTo(a * 38, a * 76, a * 41, a * 74, a * 40, a * 66);
      e.bezierCurveTo(a * 38, a * 45, a * 39, a * 49, a * 59, a * 47);
      e.closePath();
      St(e, b[ge], b[Qt], a * 5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68, a * 54);
      e.bezierCurveTo(a * 75, a * 54, a * 77, a * 62, a * 71, a * 64);
      e.bezierCurveTo(a * 62, a * 65, a * 63, a * 54, a * 68, a * 54);
      e.closePath();
      St(e, b[3]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 50, a * 55);
      e.bezierCurveTo(a * 57, a * 55, a * 58, a * 65, a * 52, a * 65);
      e.bezierCurveTo(a * 44, a * 66, a * 44, a * 54, a * 50, a * 55);
      e.closePath();
      St(e, b[Z]);
    } else if (c == Kg) {
      e.scale(0.6, 0.6);
      e.translate(a * 185, a * 165);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 108, a * 56);
      e.bezierCurveTo(a * 136, a * 58, a * 203, a * 69, a * 234, a * 75);
      e.bezierCurveTo(a * 246, a * 77, a * 247, a * 78, a * 245, a * 90);
      e.bezierCurveTo(a * 238, a * 143, a * 228, a * 197, a * 214, a * 259);
      e.bezierCurveTo(a * 212, a * 267, a * 209, a * 270, a * 189, a * 268);
      e.bezierCurveTo(a * 142, a * 264, a * 106, a * 260, a * 75, a * 253);
      e.bezierCurveTo(a * 60, a * 250, a * 64, a * 250, a * 66, a * 221);
      e.bezierCurveTo(a * 71, a * 168, a * 87, a * 95, a * 98, a * 67);
      e.bezierCurveTo(a * 101, a * 57, a * 103, a * 56, a * 106, a * 56);
      e.closePath();
      St(e, b[4], b[4], a * 20);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 112, a * 72);
      e.bezierCurveTo(a * 132, a * 73, a * 227, a * 85, a * 226, a * 91);
      e.bezierCurveTo(a * 231, a * 89, a * 217, a * 196, a * 200, a * 250);
      e.bezierCurveTo(a * 196, a * 254, a * 175, a * 249, a * 166, a * 249);
      e.bezierCurveTo(a * 91, a * 241, a * 82, a * 236, a * 83, a * 232);
      e.bezierCurveTo(a * 90, a * 144, a * 108, a * 71, a * 111, a * 72);
      e.closePath();
      St(e, undefined, b[0], ql * a);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 132, a * 117);
      e.bezierCurveTo(a * 171, a * 86, a * 191, a * 101, a * 188, a * 134);
      e.bezierCurveTo(a * 185, a * 154, a * 170, a * 158, a * 153, a * 158);
      e.bezierCurveTo(a * 143, a * 172, a * 146, a * 180, a * 147, a * 193);
      St(e, Ct, b[0], Dh * a);
      Vt(e, a * 142, a * 221, a * 16.1245154965971);
      St(e, b[0]);
    }
    return d;
  }
  function Sb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 255);
    e.bezierCurveTo(a * 113, a * 243, a * 179, a * 210, a * 219, a * 196);
    e.bezierCurveTo(a * 252, a * 203, a * 288, a * 215, a * 318, a * 233);
    e.bezierCurveTo(a * 304, a * 254, a * 258, a * 273, a * 215, a * 296);
    e.bezierCurveTo(a * 161, a * 287, a * 119, a * 270, a * 102, a * 257);
    e.closePath();
    St(e, c[Rl], c[Ls], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 258);
    e.bezierCurveTo(a * 99, a * 272.5, a * 99, a * 272.5, a * 99, a * 287);
    e.bezierCurveTo(a * 166, a * 319, a * 193, a * 320, a * 212, a * 324);
    e.bezierCurveTo(a * 292, a * 286, a * 312, a * 271, a * 319, a * 263);
    e.bezierCurveTo(a * 320, a * 249, a * 320, a * 241, a * 318, a * 234);
    e.bezierCurveTo(a * 300, a * 254, a * 254, a * 277, a * 216, a * 294);
    e.bezierCurveTo(a * 190, a * 296, a * 135, a * 276, a * 102, a * 258);
    e.closePath();
    St(e, c[Nr], c[bs], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 323);
    e.bezierCurveTo(a * 211.5, a * 310.5, a * 211.5, a * 310.5, a * 211, a * 298);
    e.closePath();
    St(e, ri, c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 210);
    e.bezierCurveTo(a * 286, a * 210, a * 331, a * 254, a * 212, a * 276);
    e.bezierCurveTo(a * 108, a * 276, a * 112, a * 222, a * 213, a * 208);
    e.closePath();
    St(e, c[3], c[co], a * pl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 200);
    e.bezierCurveTo(a * 126, a * 216, a * 177, a * 232, a * 213, a * 237);
    e.bezierCurveTo(a * 266, a * 218, a * 288, a * 209, a * 318, a * 190);
    e.bezierCurveTo(a * 269, a * 164, a * 239, a * 158, a * 214, a * 153);
    e.bezierCurveTo(a * 148, a * 172, a * 131, a * 182, a * 98, a * 200);
    e.closePath();
    St(e, c[yj], c[er], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97, a * 204);
    e.bezierCurveTo(a * 97, a * 215.5, a * 97, a * 215.5, a * 97, a * 227);
    e.bezierCurveTo(a * 148, a * 250, a * 179, a * Al, a * 212, a * 262);
    e.bezierCurveTo(a * 268, a * 244, a * 281, a * 233, a * 318, a * 214);
    e.bezierCurveTo(a * 318, a * 203, a * 318, a * 203, a * 318, a * 192);
    e.bezierCurveTo(a * 250, a * 225, a * 236, a * 231, a * 214, a * 239);
    e.bezierCurveTo(a * 158, a * 228, a * 126, a * 215, a * 99, a * 201);
    e.closePath();
    St(e, c[X], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 260);
    e.bezierCurveTo(a * 212, a * 251.5, a * 212, a * 251.5, a * 212, a * 243);
    e.closePath();
    St(e, undefined, c[Kg], a * 14);
    Vt(e, a * 161, a * 201, a * 13);
    St(e, c[5]);
    Vt(e, a * 216, a * 205, a * 8.06225774829855);
    St(e, c[Eg]);
    Vt(e, a * 216, a * 175, a * 6.708203932499369);
    St(e, c[5]);
    Vt(e, a * 271, a * 191, a * 5.0990195135927845);
    St(e, c[un]);
    Vt(e, a * 206, a * 180, a * 11.180339887498949);
    St(e, c[_j]);
    return d;
  }
  function Qb(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 55;
    var h = b * 55;
    var a = b * $o;
    e.width = g;
    e.height = h;
    f.translate(b * -65, b * -55 + a);
    f.globalAlpha = er;
    f.beginPath();
    f.moveTo(b * 95, b * 60);
    f.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
    f.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
    f.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
    f.closePath();
    St(f, d[Fj], d[1], Er);
    f.globalAlpha = _;
    f.beginPath();
    f.moveTo(b * 91, b * 70);
    f.bezierCurveTo(b * 91, b * 75, b * ba, b * 76, b * 100, b * 73);
    f.bezierCurveTo(b * 100, b * 69, b * 89, b * 65, b * 91, b * 70);
    f.closePath();
    St(f, d[2], d[Er], 3);
    return e;
  }
  const _b = Nn;
  const Fb = _h;
  function Rb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.translate(a * ul, Pg * a);
    e.globalAlpha = b ? 0.5 : _;
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    ob(e, 7, a * 42.15447781671598, a * 10);
    e.restore();
    St(e, c[gl]);
    e.globalAlpha = 1;
    e.translate(a * -un, -Ut * a);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    ob(e, Nn, a * 42.15447781671598, a * F);
    e.restore();
    St(e, c[sl], c[2], a * Jl);
    e.globalAlpha = b ? 0.5 : Ni;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    ob(e, Lh, a * 30.463092423455635, a * 10);
    e.restore();
    St(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -Pg, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    ob(e, 7, a * 30.463092423455635, a * 10);
    e.restore();
    St(e, c[rb], c[aq], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, Ut * a);
    Vt(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    St(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -Eg, a * -5);
    Vt(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    St(e, c[Sj], c[6], a * cq);
    return d;
  }
  const jb = bq;
  function Wb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * rh, a * 5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    ob(e, 7, a * 9.848857801796104, a * ie);
    e.restore();
    St(e, c[Ah]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -ul);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    ob(e, 7, a * 9.848857801796104, a * 5);
    e.restore();
    St(e, c[8], c[9], a * 4);
    return d;
  }
  function Lb(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 75;
    var h = b * 55;
    e.width = g;
    e.height = h;
    f.translate(b * -30, b * -40);
    f.globalAlpha = ig;
    f.beginPath();
    f.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
    f.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
    f.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
    f.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
    f.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
    f.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
    f.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
    f.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
    f.closePath();
    St(f, d[0]);
    f.beginPath();
    f.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
    f.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
    f.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
    f.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
    f.closePath();
    St(f, d[1]);
    f.beginPath();
    f.moveTo(b * 69, b * 65);
    f.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
    f.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
    f.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
    St(f, vn, d[1], 2);
    f.beginPath();
    f.moveTo(b * 50, b * 48);
    f.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
    f.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
    f.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
    St(f, d[X]);
    return e;
  }
  function Gb(f, e, i, j, k) {
    var n = document.createElement("canvas");
    var o = n.getContext("2d");
    var a = f * 70;
    var p = f * 70;
    var h = f * 10;
    var l = f * Eg;
    n.width = a;
    n.height = p + l;
    for (var g = Fj; g < e.length; g++) {
      var q = e[g];
      o.globalAlpha = q.a;
      var r = q.f(i, false, q.c);
      o.save();
      o.translate(a / Nj + q.x * f, p / 2 + q.y * f);
      o.rotate(q.r);
      o.drawImage(r, -r.width / 2, -r.height / tk);
      o.restore();
    }
    var s = [];
    for (g = 0; j.length > g; g++) {
      var d = document.createElement("canvas");
      var t = d.getContext("2d");
      d.width = a;
      d.height = p + l;
      t.globalAlpha = k / bq;
      if (ta == g) {
        Tt(t, 0, l, a, p, h);
      } else {
        Tt(t, 0, Gg, a, p + l, h);
      }
      St(t, "#081a19");
      t.globalAlpha = k;
      if (jb == g) {
        Tt(t, 0, l, a, p, h);
      } else {
        Tt(t, et, gl, a, p, h);
      }
      St(t, j[g]);
      t.globalAlpha = _;
      if (g == 2) {
        t.drawImage(n, Rl, l);
      } else {
        t.drawImage(n, Ah, Gg);
      }
      s.push(fa(d));
    }
    return s;
  }
  function Ob(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 195;
    var m = c * 190;
    var a = k / Gl;
    var n = m / 2;
    i.width = k;
    i.height = m;
    var h = c * 10;
    var l = c * 35;
    var g = c * 150;
    var o = l / 2;
    var b = g / On;
    var p = mg * c;
    j.translate(a - c * Ut, n - c * 5);
    j.rotate(-Math.PI / 1.25);
    j.globalAlpha = Ek;
    Tt(j, -o, -b, l, g, h);
    St(j, f[sb], f[er], p);
    j.translate(0, Aa);
    j.rotate(Math.PI / Mh);
    j.globalAlpha = Gt;
    Tt(j, -o, -b, l, g, h);
    St(j, f[0], f[Ls], p);
    j.translate(0, zr);
    Tt(j, -o / 2, -b / il, l / 2, g / Ft, h - 2);
    St(j, f[1]);
    return i;
  }
  function Nb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Jb * a, Jb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    St(e, es, c[0], a * ge);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    St(e, c[Gk]);
    e.globalAlpha = Ls;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    St(e, c[wb]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    St(e, Pa, c[$a], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(ko * a, Ut * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    St(e, Mk, c[Gk], mg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    St(e, c[0]);
    e.globalAlpha = Mg;
    e.translate(-Eg * a, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    St(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    St(e, undefined, c[nl], a * aq);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Ks * a, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    St(e, kh, c[tj], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    St(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    St(e, c[Ph]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    St(e, ri, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    St(e, undefined, c[0], oe * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    St(e, c[0]);
    e.globalAlpha = Fb;
    e.translate(-un * a, a * -gs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    St(e, c[Bk]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    St(e, undefined, c[Oe], a * 4);
    return d;
  }
  const qb = Fj;
  const Hb = Vq;
  function Ub(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 193;
    var m = c * 198;
    var a = c * 140;
    var n = c * 90;
    i.width = k;
    i.height = m;
    var h = c * 10;
    var l = c * 25;
    var g = c * 180;
    var o = l / 2;
    var b = g / 2;
    var p = c * 4;
    j.translate(c * -25, Ls * c);
    j.translate(a, n);
    j.rotate(-Math.PI / 5);
    Tt(j, -o, -b, l, g, h);
    St(j, f[0], f[Kg], p);
    j.translate(c * -30, c * -25);
    j.rotate(Math.PI / 3);
    Tt(j, -o, -b, l, g, h);
    St(j, f[0], f[sl], p);
    j.translate(c * 35, c * 30);
    j.rotate(Math.PI / 3);
    Tt(j, -o, -b, l, g, h);
    St(j, f[0], f[1], p);
    return i;
  }
  const Yb = qn;
  function Kb(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var h = b * 32;
    var a = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / Ht, g / bq + b * 10);
    e.globalAlpha = 0.5;
    Vt(e, 0, 0, h);
    St(e, c[fg], c[qb]);
    e.translate(0, b * -8);
    e.globalAlpha = _;
    Vt(e, fg, 0, h);
    St(e, c[1], c[br], a);
    return d;
  }
  function Vb(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 40;
    var g = b * 40;
    var h = Qe * b;
    var a = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / qi);
    e.globalAlpha = 1;
    Vt(e, xq, 0, h);
    St(e, c[tj], c[Gt], a);
    return d;
  }
  function Xb(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 145;
    var i = b * 145;
    var a = g / 2;
    var j = i / jg;
    e.width = g;
    e.height = i;
    var h = b * 70;
    f.translate(a, j);
    f.globalAlpha = 0.4;
    Vt(f, 0, 0, h);
    St(f, d[Gg]);
    h = b * 50;
    f.translate(sb, sb);
    f.globalAlpha = 0.8;
    Vt(f, sb, qb, h);
    St(f, d[0]);
    h = b * 35;
    f.translate(sb, 0);
    f.globalAlpha = 0.8;
    Vt(f, 0, 0, h);
    St(f, d[ck]);
    h = mr * b;
    f.translate(0, qb);
    f.globalAlpha = 0.8;
    Vt(f, 0, An, h);
    St(f, d[2]);
    return e;
  }
  function Zb(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 135;
    var m = c * 190;
    var a = k / jg;
    var n = m / 2;
    i.width = k;
    i.height = m;
    var h = c * 10;
    var l = c * 25;
    var g = c * 180;
    var o = l / 2;
    var b = g / 2;
    var p = c * cq;
    j.translate(a, n);
    j.rotate(-Math.PI / un);
    j.globalAlpha = 1;
    Tt(j, -o, -b, l, g, h);
    St(j, f[0], f[1], p);
    j.translate(sb, Qr);
    j.rotate(Math.PI / 5);
    j.globalAlpha = Kg;
    Tt(j, -o, -b, l, g, h);
    St(j, f[0], f[Kg], p);
    return i;
  }
  function $b(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, Kn * a);
    e.translate(a * -qt, a * -js);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    St(e, c[yj]);
    e.globalAlpha = _h;
    e.translate(Ih, a * -8);
    e.translate(Sq * a, a * jk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, Zk * a);
    e.bezierCurveTo(a * 106, Qg * a, a * 89, qb * a, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    St(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * ih, a * 96, Oe * a, a * 85, a * fh);
    e.bezierCurveTo(a * 59, a * Z, a * 54, a * 7, a * 40, a * xl);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    St(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * Sk, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * f, a * 25, a * 28);
    e.closePath();
    St(e, Oq, c[2], a * 4);
    Vt(e, Ys * a, a * 38, a * 14.866068747318506);
    St(e, c[4], c[ko], aq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    St(e, c[1], c[2], a * Qt);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 74);
    e.bezierCurveTo(a * 38, a * 77.5, a * 38, a * 77.5, a * 49, a * 81);
    e.bezierCurveTo(a * 54.5, a * 75.5, a * 54.5, a * 75.5, a * 60, a * 70);
    e.bezierCurveTo(a * 64, a * 72, a * 64, a * 72, a * 68, a * 74);
    e.bezierCurveTo(a * 80.5, a * 67.5, a * 80.5, a * 67.5, a * 93, a * 61);
    e.bezierCurveTo(a * 104.5, a * 68, a * 104.5, a * 68, a * 116, a * 75);
    e.bezierCurveTo(a * 120.5, a * 72.5, a * 120.5, a * 72.5, a * 125, a * 70);
    e.bezierCurveTo(a * 129, a * 75, a * 129, a * 75, a * 133, a * 80);
    e.bezierCurveTo(a * 145.5, a * 76.5, a * 145.5, a * 76.5, a * 158, a * 73);
    e.bezierCurveTo(a * 158, a * 87, a * 158, a * 93, a * 155, a * 95);
    e.bezierCurveTo(a * 152.5, a * 96, a * 152.5, a * 96, a * 150, a * 97);
    e.bezierCurveTo(a * 121, a * 85, a * 108, a * 86, a * 93, a * 85);
    e.bezierCurveTo(a * 64, a * 85, a * 52, a * 95, a * 38, a * 99);
    e.bezierCurveTo(a * 36, a * 98.5, a * 36, a * 98.5, a * 34, a * 98);
    e.bezierCurveTo(a * 25, a * 98, a * 27, a * 91, a * 27, a * 76);
    e.closePath();
    St(e, c[6], c[7], _g * a);
    return d;
  }
  function Wt(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 205;
    var i = b * 205;
    var a = g / 2;
    var j = i / 2;
    e.width = g;
    e.height = i;
    var h = b * 100;
    f.translate(a, j);
    f.globalAlpha = 1;
    Vt(f, 0, 0, h);
    St(f, d[0]);
    return e;
  }
  function Xt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, or * a);
    e.translate(-Ts * a, -f * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * wn, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    St(e, c[0]);
    e.globalAlpha = 1;
    e.translate(Ih, a * -8);
    e.translate(a * 7, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * Bt, a * 89, a * An, a * 73, a * 3);
    e.bezierCurveTo(a * 51, _j * a, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    St(e, c[1], c[br], co * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, ua * a, a * 84, a * 12, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
    e.bezierCurveTo(a * 59, a * Er, a * 54, a * 7, a * 40, a * Ch);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    St(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * cg, a * 89, a * 0, a * 73, a * nk);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    St(e, undefined, c[Nj], a * aq);
    Vt(e, a * 18, a * 38, a * 14.866068747318506);
    St(e, c[4], c[5], $j * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    St(e, c[Kg], c[2], a * 4);
    e.translate(-Bk * a, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    St(e, c[4], c[Jb], a * 4);
    return d;
  }
  function Yt(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 370;
    var i = b * 370;
    var a = g / X;
    var j = i / On;
    e.width = g;
    e.height = i;
    var h = b * 180;
    f.globalAlpha = 0.2;
    Vt(f, a, j, h);
    St(f, d[tj]);
    return e;
  }
  (function b() {
    const c = {
      ᐃΔᐃⲆⵠⵠΔΔⲆ: 0
    };
    let d = 0;
    for (let a in c) {
      d = a;
    }
    const f = [];
    for (let a = 0; a < 12; a++) {
      f.push(bj.Math.floor(1 + bj.Math.random() * 10));
    }
    let g = "for (let " + d + " = 0 ; " + d + " < " + f[0] + " ; " + d + "++) {";
    for (let a = 0; a < f[1]; a++) {
      g += f[a] + ";debugger;";
    }
    for (let a = 0; a < f[2]; a++) {
      g += "debugger;";
    }
    g += "}";
    const e = new bj.Function(g);
    bj.setTimeout(b, 10000);
    e();
  })();
  const Zt = Oa;
  function $t(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 121;
    e.height = a * 130;
    f.translate(et, a * 20);
    if (c == Co) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(Kl * a, a * 23);
      f.bezierCurveTo(a * xh, a * 46, _g * a, a * 46, a * 6, a * 69);
      f.bezierCurveTo(a * 21, a * 69, a * 21, a * 69, a * 36, a * 69);
      f.bezierCurveTo(a * 45.5, a * 78.5, a * 45.5, a * 78.5, a * 55, a * 88);
      f.bezierCurveTo(a * 55.5, a * 45.5, a * 55.5, a * 45.5, a * 56, nk * a);
      f.bezierCurveTo(a * 47, a * 14, a * 47, a * wg, a * 38, a * 25);
      f.bezierCurveTo(a * 23, a * 25, a * 23, a * 25, ms * a, a * 23);
      f.closePath();
      St(f, undefined, b[3], a * 13);
    }
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 6, a * 23);
    f.bezierCurveTo(Ml * a, a * 46, ms * a, a * 46, a * 6, a * 69);
    f.bezierCurveTo(a * 21, a * 69, a * 21, a * 69, a * 36, a * 69);
    f.bezierCurveTo(a * 45.5, a * 78.5, a * 45.5, a * 78.5, a * 55, a * 88);
    f.bezierCurveTo(a * 55.5, a * 45.5, a * 55.5, a * 45.5, a * 56, Er * a);
    f.bezierCurveTo(a * 47, El * a, a * 47, a * 14, a * 38, a * 25);
    f.bezierCurveTo(a * 23, a * 25, a * 23, a * 25, P * a, a * 23);
    f.closePath();
    St(f, b[bs], b[qo], Jl * a);
    if (d == 1) {
      f.translate(0, a * 5);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 67, a * 30);
      f.bezierCurveTo(a * 73, a * 47, a * 69, a * 45, a * 67, a * 58);
      St(f, undefined, b[yj], a * 10);
      f.translate(3, a * 0);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 70, a * 17);
      f.bezierCurveTo(a * 83, a * 45, a * 76, a * 55, a * 70, a * 69);
      St(f, undefined, b[Fj], a * 10);
      f.translate(3, xq * a);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 76, a * Da);
      f.bezierCurveTo(a * 88, a * 31, a * 89, a * 55, a * 76, a * 79);
      St(f, Iq, b[0], a * 10);
      if (c == 1) {
        f.translate(a * -6, a * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 67, a * 30);
        f.bezierCurveTo(a * 73, a * 47, a * 69, a * 45, a * 67, a * 58);
        St(f, Yo, b[3], a * 18);
        f.translate(3, a * 0);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 70, a * 17);
        f.bezierCurveTo(a * 83, a * 45, a * 76, a * 55, a * 70, a * 69);
        St(f, undefined, b[3], a * 18);
        f.translate(3, a * sb);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 76, a * 8);
        f.bezierCurveTo(a * 88, a * 31, a * 89, a * 55, a * 76, a * 79);
        St(f, undefined, b[3], Ki * a);
        f.translate(-nl, gl * a);
      } else {
        f.translate(-Nl * a, a * -5);
      }
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 67, a * 30);
      f.bezierCurveTo(a * 73, a * 47, a * 69, a * 45, a * 67, a * 58);
      St(f, Xl, b[ta], a * 10);
      f.translate(3, a * 0);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 70, Vh * a);
      f.bezierCurveTo(a * 83, a * 45, a * 76, a * 55, a * 70, a * 69);
      St(f, Yo, b[2], a * 10);
      f.translate(Sg, Gk * a);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 76, a * 8);
      f.bezierCurveTo(a * 88, a * 31, a * 89, a * 55, a * 76, a * 79);
      St(f, undefined, b[2], Wg * a);
    } else {
      if (c == Fb) {
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 108, a * 27);
        f.bezierCurveTo(a * 94, a * 45.5, a * 94, a * 45.5, a * 80, a * 64);
        f.closePath();
        St(f, Yo, b[3], a * 18);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 79, a * 30);
        f.bezierCurveTo(a * 93, a * 47, a * 93, a * 47, a * 107, a * 64);
        f.closePath();
        St(f, undefined, b[dl], a * 18);
      } else {
        f.translate(et, -ie * a);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 108, a * 27);
        f.bezierCurveTo(a * 94, a * 45.5, a * 94, a * 45.5, a * 80, a * 64);
        f.closePath();
        St(f, Xl, b[0], a * Ph);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 79, a * 30);
        f.bezierCurveTo(a * 93, a * 47, a * 93, a * 47, a * 107, a * 64);
        f.closePath();
        St(f, undefined, b[0], a * 7);
        f.translate(0, a * 5);
      }
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 108, a * 27);
      f.bezierCurveTo(a * 94, a * 45.5, a * 94, a * 45.5, a * 80, a * 64);
      f.closePath();
      St(f, Ao, b[2], a * 7);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 79, a * 30);
      f.bezierCurveTo(a * 93, a * 47, a * 93, a * 47, a * 107, a * 64);
      f.closePath();
      St(f, Fg, b[fh], Nn * a);
    }
    return e;
  }
  function _t(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var h = b * Ha;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / bq);
    e.globalAlpha = 0.5;
    Vt(e, 0, 0, h);
    St(e, c[0]);
    e.globalAlpha = 1;
    return d;
  }
  function au(c, d, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 210;
    var a = c * 205;
    var m = c * 30;
    var h = c * 20;
    var l = c * 200;
    var g = c * 180;
    var n = l / 2;
    var b = g / 2;
    i.width = k;
    i.height = a;
    i.width = c * 419;
    i.height = c * 412;
    if (f == Co) {
      j.save();
      j.translate(Hb * c, c * 0);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 117.99996948242188, c * 216.40621948242188);
      j.bezierCurveTo(c * 86.99996948242188, c * 221.40621948242188, c * 74.99996948242188, c * 217.40621948242188, c * 60.999969482421875, c * 205.40621948242188);
      St(j, Fg, d[Og], c * rb);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 114.99996948242188, c * 227.40621948242188);
      j.bezierCurveTo(c * 90.99996948242188, c * 233.40621948242188, c * 66.99996948242188, c * 228.40621948242188, c * 43.999969482421875, c * 225.40621948242188);
      St(j, Yo, d[4], c * Ft);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 110.99996948242188, c * 236.40621948242188);
      j.bezierCurveTo(c * 94.99996948242188, c * 244.40621948242188, c * 79.99996948242188, c * 249.40621948242188, c * 60.999969482421875, c * 249.40621948242188);
      St(j, undefined, d[Jl], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 111.99996948242188, c * 206.29513549804688);
      j.bezierCurveTo(c * 91.99996948242188, c * 206.29513549804688, c * 87.99996948242188, c * 201.29513549804688, c * 79.99996948242188, c * 192.29513549804688);
      St(j, Cr, d[oe], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 109.99996948242188, c * 249.18402099609375);
      j.bezierCurveTo(c * 97.99996948242188, c * 263.18402099609375, c * 85.99996948242188, c * 271.18402099609375, c * 65.99996948242188, c * 277.18402099609375);
      St(j, es, d[co], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 105.99996948242188, c * 192.18402099609375);
      j.bezierCurveTo(c * 99.49996948242188, c * 197.68402099609375, c * 99.49996948242188, c * 197.68402099609375, c * 92.99996948242188, c * 203.18402099609375);
      j.bezierCurveTo(c * 95.99996948242188, c * 213.18402099609375, c * 95.99996948242188, c * 215.18402099609375, c * 89.99996948242188, c * 219.18402099609375);
      j.bezierCurveTo(c * 91.99996948242188, c * 223.18402099609375, c * 91.99996948242188, c * 226.18402099609375, c * 87.99996948242188, c * 230.18402099609375);
      j.bezierCurveTo(c * 89.99996948242188, c * 234.18402099609375, c * 91.99996948242188, c * 237.18402099609375, c * 90.99996948242188, c * 244.18402099609375);
      j.bezierCurveTo(c * 96.99996948242188, c * 252.18402099609375, c * 96.99996948242188, c * 256.18402099609375, c * 95.99996948242188, c * 262.18402099609375);
      j.bezierCurveTo(c * 106.49996948242188, c * 264.18402099609375, c * 106.49996948242188, c * 264.18402099609375, c * 116.99996948242188, c * 266.18402099609375);
      St(j, undefined, d[Zt], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 104.99996948242188, c * 183.29513549804688);
      j.bezierCurveTo(c * 99.99996948242188, c * 193.29513549804688, c * 93.99996948242188, c * 195.29513549804688, c * 89.99996948242188, c * 201.29513549804688);
      j.bezierCurveTo(c * 86.99996948242188, c * 212.29513549804688, c * 85.99996948242188, c * 214.29513549804688, c * 81.99996948242188, c * 215.29513549804688);
      j.bezierCurveTo(c * 83.99996948242188, c * 223.29513549804688, c * 83.99996948242188, c * 227.29513549804688, c * 79.99996948242188, c * 230.29513549804688);
      j.bezierCurveTo(c * 83.99996948242188, c * 235.29513549804688, c * 84.99996948242188, c * 240.29513549804688, c * 79.99996948242188, c * 246.29513549804688);
      j.bezierCurveTo(c * 86.99996948242188, c * 251.29513549804688, c * 91.99996948242188, c * 256.2951354980469, c * 89.99996948242188, c * 266.2951354980469);
      j.bezierCurveTo(c * 102.99996948242188, c * 269.2951354980469, c * 102.99996948242188, c * 269.2951354980469, c * 115.99996948242188, c * 272.2951354980469);
      St(j, undefined, d[Jl], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 107.99996948242188, c * 177.85067749023438);
      j.bezierCurveTo(c * 95.99996948242188, c * 187.35067749023438, c * 95.99996948242188, c * 187.35067749023438, c * 83.99996948242188, c * 196.85067749023438);
      j.bezierCurveTo(c * 82.99996948242188, c * 203.85067749023438, c * 80.99996948242188, c * 209.85067749023438, c * 72.99996948242188, c * 210.85067749023438);
      j.bezierCurveTo(c * 73.99996948242188, c * 220.85067749023438, c * 73.99996948242188, c * 221.85067749023438, c * 66.99996948242188, c * 227.85067749023438);
      j.bezierCurveTo(c * 71.99996948242188, c * 235.85067749023438, c * 73.99996948242188, c * 239.85067749023438, c * 71.99996948242188, c * 247.85067749023438);
      j.bezierCurveTo(c * 80.99996948242188, c * 257.8506774902344, c * 81.99996948242188, c * 263.8506774902344, c * 77.99996948242188, c * 271.8506774902344);
      j.bezierCurveTo(c * 95.49996948242188, c * 272.8506774902344, c * 95.49996948242188, c * 272.8506774902344, c * 112.99996948242188, c * 273.8506774902344);
      St(j, Fg, d[co], c * 3);
      j.restore();
    } else if (Gl == f) {
      j.save();
      j.translate(c * 130, c * 35);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 170.99996948242188, c * 133.85067749023438);
      j.bezierCurveTo(c * 195.99996948242188, c * 129.85067749023438, c * 196.99996948242188, c * 111.85067749023438, c * 200.99996948242188, c * 88.85067749023438);
      St(j, undefined, d[4], Lq * c);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 169.99996948242188, c * 143.85067749023438);
      j.bezierCurveTo(c * 189.99996948242188, c * 145.85067749023438, c * 207.99996948242188, c * 126.85067749023438, c * 222.99996948242188, c * 100.85067749023438);
      St(j, undefined, d[Nh], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 170.99996948242188, c * 157.85067749023438);
      j.bezierCurveTo(c * 193.99996948242188, c * 160.85067749023438, c * 210.99996948242188, c * 151.85067749023438, c * 232.99996948242188, c * 139.85067749023438);
      St(j, E, d[zt], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 169.99996948242188, c * 168.85067749023438);
      j.bezierCurveTo(c * 192.99996948242188, c * 175.85067749023438, c * 203.99996948242188, c * 177.85067749023438, c * 245.99996948242188, c * 168.85067749023438);
      St(j, undefined, d[4], rb * c);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 167.99996948242188, c * 168.85067749023438);
      j.bezierCurveTo(c * 183.99996948242188, c * 189.85067749023438, c * 191.99996948242188, c * 193.85067749023438, c * 220.99996948242188, c * 196.85067749023438);
      St(j, undefined, d[Nh], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 176.99996948242188, c * 117.85067749023438);
      j.bezierCurveTo(c * 181.99996948242188, c * 120.85067749023438, c * 181.99996948242188, c * 120.85067749023438, c * 186.99996948242188, c * 123.85067749023438);
      j.bezierCurveTo(c * 183.99996948242188, c * 137.85067749023438, c * 185.99996948242188, c * 136.85067749023438, c * 190.99996948242188, c * 136.85067749023438);
      j.bezierCurveTo(c * 186.99996948242188, c * 147.85067749023438, c * 189.99996948242188, c * 152.85067749023438, c * 193.99996948242188, c * 155.85067749023438);
      j.bezierCurveTo(c * 187.99996948242188, c * 165.85067749023438, c * 190.99996948242188, c * 169.85067749023438, c * 190.99996948242188, c * 172.85067749023438);
      j.bezierCurveTo(c * 186.99996948242188, c * 183.85067749023438, c * 186.99996948242188, c * 185.85067749023438, c * 189.99996948242188, c * 188.85067749023438);
      j.bezierCurveTo(c * 182.49996948242188, c * 195.35067749023438, c * 182.49996948242188, c * 195.35067749023438, c * 174.99996948242188, c * 201.85067749023438);
      St(j, undefined, d[Nh], c * Ql);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 176.99996948242188, c * 112.18402099609375);
      j.bezierCurveTo(c * 183.99996948242188, c * 119.18402099609375, c * 186.99996948242188, c * 117.18402099609375, c * 192.99996948242188, c * 116.18402099609375);
      j.bezierCurveTo(c * 191.99996948242188, c * 126.18402099609375, c * 193.99996948242188, c * 130.18402099609375, c * 199.99996948242188, c * 130.18402099609375);
      j.bezierCurveTo(c * 194.99996948242188, c * 145.18402099609375, c * 197.99996948242188, c * 147.18402099609375, c * 201.99996948242188, c * 153.18402099609375);
      j.bezierCurveTo(c * 196.99996948242188, c * 164.18402099609375, c * 197.99996948242188, c * 169.18402099609375, c * 201.99996948242188, c * 174.18402099609375);
      j.bezierCurveTo(c * 194.99996948242188, c * 184.18402099609375, c * 196.99996948242188, c * 187.18402099609375, c * 200.99996948242188, c * 193.18402099609375);
      j.bezierCurveTo(c * 185.99996948242188, c * 195.18402099609375, c * 181.99996948242188, c * 201.18402099609375, c * 174.99996948242188, c * 210.18402099609375);
      St(j, E, d[4], c * Ql);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 176.99996948242188, c * 101.29513549804688);
      j.bezierCurveTo(c * 181.99996948242188, c * 108.29513549804688, c * 189.99996948242188, c * 110.29513549804688, c * 195.99996948242188, c * 107.29513549804688);
      j.bezierCurveTo(c * 197.99996948242188, c * 121.29513549804688, c * 200.99996948242188, c * 122.29513549804688, c * 206.99996948242188, c * 122.29513549804688);
      j.bezierCurveTo(c * 201.99996948242188, c * 138.29513549804688, c * 204.99996948242188, c * 142.29513549804688, c * 211.99996948242188, c * 148.29513549804688);
      j.bezierCurveTo(c * 201.99996948242188, c * 156.29513549804688, c * 205.99996948242188, c * 167.29513549804688, c * 213.99996948242188, c * 173.29513549804688);
      j.bezierCurveTo(c * 204.99996948242188, c * 181.29513549804688, c * 204.99996948242188, c * 187.29513549804688, c * 205.99996948242188, c * 193.29513549804688);
      j.bezierCurveTo(c * 190.99996948242188, c * 198.29513549804688, c * 181.99996948242188, c * 205.29513549804688, c * 174.99996948242188, c * 214.29513549804688);
      St(j, undefined, d[4], c * 3);
      j.restore();
    }
    j.translate(i.width / 2, i.height / 2);
    if (!f) {
      j.globalAlpha = 0.5;
      Tt(j, -n, -b, l, g + h, m);
      St(j, d[0]);
      if (e) {
        j.rotate(Math.PI);
      }
      j.globalAlpha = ig;
      Tt(j, -n, -b, l, g, m);
      St(j, d[Ni], d[Gl], 4);
      j.globalAlpha = 1;
      Tt(j, c * 35 - n, c * 20 - b, l - c * 50, g - c * 50, m - c * bg);
      St(j, d[3]);
    }
    if (Lq == f) {
      j.translate(-i.width / 2, -i.height / ta);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 121, c * 190);
      j.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      j.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      j.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      j.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      j.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      j.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      j.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      j.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      j.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      j.closePath();
      St(j, d[Jl]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 219, c * 144);
      j.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      j.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      j.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      j.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      j.closePath();
      St(j, d[ko]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 123, c * 214);
      j.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      j.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      j.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      j.closePath();
      St(j, d[5]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 257, c * 199);
      j.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      j.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      j.closePath();
      St(j, d[5]);
      j.translate(c * -5, c * 55);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 186, c * 123);
      j.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      j.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      j.closePath();
      St(j, d[ko]);
      j.translate(gs * c, c * -55);
      j.translate(c * -bt, ng * c);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 171, c * 241);
      j.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      j.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      j.closePath();
      St(j, d[Pg]);
    } else if (f == 4) {
      j.translate(-i.width / 2, -i.height / br);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 30, c * 167);
      j.bezierCurveTo(c * 47, c * 144, c * 64, c * 140, c * 80, c * 147);
      j.bezierCurveTo(c * 95, c * 154, c * 95, c * 159, c * Oh, c * 179);
      j.bezierCurveTo(c * 105, c * 202, c * 95, c * 218, c * 69, c * 218);
      j.bezierCurveTo(c * 48, c * 236, c * 26, c * 223, c * 28, c * 213);
      j.bezierCurveTo(c * 28, c * 205, c * 29, c * 199, c * 32, c * 195);
      j.bezierCurveTo(c * 21, c * 183, c * 27, c * 173, c * 30, c * 167);
      j.closePath();
      St(j, d[co]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 26, c * 145);
      j.bezierCurveTo(c * 32, c * 138, c * 37, c * 137, c * 40, c * 139);
      j.bezierCurveTo(c * 43, c * 140, c * 41, c * 150, c * 31, c * 159);
      j.bezierCurveTo(c * 23, c * 166, c * 17, c * 158, c * 26, c * 145);
      j.closePath();
      St(j, d[Jl]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(sn * c, c * 193);
      j.bezierCurveTo(c * 21, c * 187, c * 30, c * 190, c * 20, c * 202);
      j.bezierCurveTo(vh * c, c * 208, c * 7, c * 202, Ng * c, c * 193);
      j.closePath();
      St(j, d[$j]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 121, c * 190);
      j.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      j.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      j.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      j.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      j.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      j.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      j.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      j.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      j.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      j.closePath();
      St(j, d[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 335, c * 196);
      j.bezierCurveTo(c * 312, c * 208, c * 300, c * 185, c * 309, c * 167);
      j.bezierCurveTo(c * 314, c * 141, c * 339, c * 127, c * 359, c * 144);
      j.bezierCurveTo(c * 363, c * 148, c * 364, c * 150, c * 364, c * 150);
      j.bezierCurveTo(c * 392, c * 143, c * 396, c * 183, c * 378, c * 204);
      j.bezierCurveTo(c * 367, c * 215, c * 339, c * 208, c * 335, c * 196);
      j.closePath();
      St(j, d[Nh]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 349, c * 212);
      j.bezierCurveTo(c * 339, c * 216, c * 334, c * 208, c * 341, c * 203);
      j.bezierCurveTo(c * 353, c * 198, c * 361, c * 205, c * 349, c * 212);
      j.closePath();
      St(j, d[hr]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 46, c * 165);
      j.bezierCurveTo(c * 55, c * 148, c * 85, c * 157, c * 83, c * 175);
      j.bezierCurveTo(c * 99, c * 185, c * 89, c * 212, c * 66, c * 204);
      j.bezierCurveTo(c * 55, c * 212, c * 43, c * 212, c * 41, c * 202);
      j.bezierCurveTo(c * 39, c * 194, c * 42, c * 187, c * 49, c * 185);
      j.bezierCurveTo(c * 44, c * 175, c * 45, c * 172, c * 46, c * 165);
      j.closePath();
      St(j, d[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 219, c * 144);
      j.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      j.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      j.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      j.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      j.closePath();
      St(j, d[5]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 123, c * 214);
      j.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      j.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      j.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      j.closePath();
      St(j, d[ie]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 257, c * 199);
      j.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      j.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      j.closePath();
      St(j, d[Ks]);
      j.translate(c * -5, c * 55);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 186, c * 123);
      j.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      j.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      j.closePath();
      St(j, d[bt]);
      j.translate(c * bt, c * -55);
      j.translate(-Sj * c, c * 15);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 171, c * 241);
      j.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      j.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      j.closePath();
      St(j, d[ko]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 367, c * 164);
      j.bezierCurveTo(c * 380, c * 160, c * 391, c * 185, c * 371, c * 189);
      j.bezierCurveTo(c * 362, c * 192, c * 354, c * 191, c * 350, c * 185);
      j.bezierCurveTo(c * 326, c * 205, c * 314, c * 182, c * 316, c * 171);
      j.bezierCurveTo(c * 317, c * 150, c * 332, c * 143, c * 347, c * 147);
      j.bezierCurveTo(c * 361, c * 151, c * 366, c * 158, c * 367, c * 164);
      j.closePath();
      St(j, d[cq]);
    }
    return i;
  }
  const bu = gl;
  function cu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = Math.max(b.width, a.width);
    var f = Math.max(b.height, a.height);
    c.width = e;
    c.height = f;
    d.drawImage(a, (e - a.width) / Ol, (f - a.height) / 2);
    d.drawImage(b, (e - b.width) / 2, (f - b.height) / 2);
    return c;
  }
  function du(c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 105;
    var k = c * 125;
    var a = c * 4;
    var m = eb * c;
    var h = c * 5;
    var l = c * 10;
    var g = c * 110;
    var n = l / il;
    var b = g / Nj;
    f.width = j;
    f.height = k;
    i.save();
    i.globalAlpha = d ? 0.5 : 1;
    i.translate(j / qi + $o * c, k / 2 + h);
    Tt(i, -n, -b, l, g, m);
    St(i, d ? e[0] : e[1]);
    i.translate(c * -130 + h, c * -128 + h);
    i.beginPath();
    i.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    i.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    i.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    i.closePath();
    St(i, e[2]);
    i.restore();
    i.translate(j / Nj + Hk, k / 2);
    i.globalAlpha = 1;
    Tt(i, -n, -b, l, g, m);
    St(i, e[3], e[4], a);
    i.translate(c * -130, c * -125);
    i.beginPath();
    i.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    i.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    i.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    i.closePath();
    St(i, e[Sj], e[$a], a);
    return f;
  }
  function eu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 469;
    e.globalAlpha = b ? 0.5 : Ni;
    e.translate(Pn * a, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * Ur);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, _j * a);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    St(e, c[Ih]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    St(e, c[An]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    St(e, c[An]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * wb, a * 333);
    e.bezierCurveTo(a * Rs, a * 323, yl * a, a * 323, a * 9, a * 313);
    e.closePath();
    St(e, c[qb]);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    Tt(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    St(e, c[bu]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    St(e, c[Gk]);
    e.globalAlpha = Ls;
    e.translate(a * -gg, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, pl * a);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    St(e, c[er], c[2], a * Ji);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    St(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    St(e, undefined, c[qo], a * Sq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    St(e, c[4], c[5], Hg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(k * a, a * 323, a * Ma, a * 323, se * a, a * 313);
    e.closePath();
    St(e, c[4], c[5], a * Nn);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    Tt(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    St(e, c[4], c[Eg], Lh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    St(e, c[$a]);
    return d;
  }
  function fu(c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = (n = c * 450) / 2;
    var k = (o = c * 145) / fh;
    var a = vq * c;
    var m = c * 300;
    var h = c * 30;
    var l = m / X;
    var g = h / 2;
    if (e) {
      var n = c * 145;
      var o = c * 450;
      f.width = n;
      f.height = o;
      i.rotate(Math.PI / X);
      i.save();
      i.globalAlpha = 0.5;
      Tt(i, c * 100, c * -110, m, h, a);
      St(i, d[yj]);
      i.translate(c * 178, c * -98);
      Tt(i, -l, -g - c * 6, c * 100, c * 100, a);
      St(i, d[An]);
      i.translate(c * -50, Sj * c);
      Tt(i, c * 220, c * -15, c * 90, c * 90, a);
      St(i, d[Rl]);
      i.restore();
      i.save();
      i.globalAlpha = Co;
      i.translate(c * 250, c * -63);
      Tt(i, -l - an * c, -g, m, h, a);
      St(i, d[sl], d[2], 4);
      i.translate(c * -70, c * -40);
      Tt(i, -l - c * 20, -g, c * bn, c * og, a);
      St(i, d[3], d[Zt], 4);
      i.translate(c * -70, c * Wa);
      Tt(i, c * 220, c * -22, c * 90, c * 90, a);
      St(i, d[3], d[4], 4);
      Tt(i, c * 230, c * -12, c * 55, c * 55, a);
      St(i, d[5]);
      i.translate(c * -70, 0);
      Tt(i, -ai * c, -X * c, c * 60, c * 60, a);
      St(i, d[5]);
      i.restore();
    } else {
      f.width = n;
      f.height = o;
      i.save();
      i.globalAlpha = 0.5;
      i.translate(j, k + Wg * c);
      Tt(i, -l, -g, m, h, a);
      St(i, d[gl]);
      i.translate(c * -65, c * -25);
      Tt(i, -l, -g - c * 6, c * 100, yg * c, c * 15);
      St(i, d[0]);
      i.translate(c * -35, c * -5);
      Tt(i, c * 220, -Zn * c, c * 90, c * 90, c * _q);
      St(i, d[0]);
      i.restore();
      i.save();
      i.globalAlpha = 1;
      i.translate(c * 240, c * 70);
      Tt(i, -l, -g, m, h, a);
      St(i, d[bs], d[2], 4);
      i.translate(c * -60, c * -40);
      Tt(i, -l - c * 20, -g, c * yh, c * 100, c * 15);
      St(i, d[3], d[4], 4);
      i.translate(c * -55, c * 10);
      Tt(i, c * 220, c * -22, c * 90, c * 90, c * 15);
      St(i, d[Ql], d[4], 4);
      Tt(i, c * 240, c * -12, c * 55, c * 55, c * 12);
      St(i, d[5]);
      i.translate(c * 45, c * sb);
      Tt(i, c * -145, c * -2, c * 60, c * 60, tq * c);
      St(i, d[un]);
      i.restore();
    }
    return f;
  }
  const gu = vg;
  function hu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 424;
    d.height = a * 788;
    e.translate(a * 25, a * 25);
    e.globalAlpha = b ? 0.5 : ck;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    Tt(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    St(e, c[Gg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    St(e, c[Ah]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    St(e, c[An]);
    Vt(e, a * 204, a * 693, a * 36.013886210738214);
    St(e, c[gl]);
    Vt(e, a * 105, a * 518, a * 30);
    St(e, c[An]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    St(e, c[Fj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    St(e, c[Fj]);
    e.translate(a * -25, a * -25);
    e.globalAlpha = bs;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    Tt(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    St(e, c[1], c[bq], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    St(e, c[Cs], c[4], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    St(e, c[ul]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    St(e, c[Oe], c[4], a * 16);
    Vt(e, a * 204, a * 693, a * 36.013886210738214);
    St(e, c[6], c[4], a * 16);
    Vt(e, a * 105, a * 518, a * 30);
    St(e, c[oq], c[4], a * q);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    St(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    St(e, c[Ml]);
    Vt(e, a * 204, a * 693, a * 17.029386365926403);
    St(e, c[qs]);
    Vt(e, a * 106, a * 518, Ug * a);
    St(e, c[7]);
    return d;
  }
  const iu = Ft;
  function ju(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * bn;
    d.height = a * 250;
    e.translate(a * -135, a * -75);
    e.globalAlpha = b ? 0.8 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    St(e, c[0]);
    Vt(e, a * 160.5, a * 243.03125, a * _b);
    St(e, c[0]);
    Vt(e, a * 227.5, a * 242.03125, a * 7);
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    St(e, c[yj], c[yj], a * 5);
    Vt(e, a * 194, a * 298, a * 9);
    St(e, c[0], c[gl], a * 5);
    e.globalAlpha = 1;
    e.translate(a * -10, a * In);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    St(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    St(e, c[er], c[2], a * Ut);
    Vt(e, a * 160.5, a * 243.03125, a * wt);
    St(e, c[ck], c[qo], zr * a);
    Vt(e, a * 227.5, a * 242.03125, a * 7);
    St(e, c[1], c[2], Ks * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    St(e, c[1], c[ta], a * Ts);
    Vt(e, a * 194, a * 298, a * Ba);
    St(e, c[sl], c[2], a * 7);
    return d;
  }
  function ku(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * f, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    St(e, c[0]);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    Tt(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    e.restore();
    St(e, c[An]);
    Vt(e, a * 122, a * 480, a * 18.439088914585774);
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    St(e, c[0]);
    e.globalAlpha = 1;
    e.translate(-Sk * a, a * -gg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    St(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    Tt(e, -Uq * a, a * -56.5, a * 28, a * 113, a * 8);
    e.restore();
    St(e, c[4], c[Bh], a * 12.5);
    Vt(e, a * 122, a * 480, a * 18.439088914585774);
    St(e, c[Zt], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    St(e, c[4], c[Zg], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 345);
    e.bezierCurveTo(a * 142, a * 345, a * 147, a * 346, a * 158, a * 349);
    e.bezierCurveTo(a * 177.5, a * 224.5, a * 177.5, a * 224.5, a * 197, dg * a);
    e.bezierCurveTo(a * 190.5, a * 84.5, a * 190.5, a * 84.5, a * 184, a * 69);
    e.bezierCurveTo(a * 173.5, a * 82, a * 173.5, a * 82, a * 163, a * 95);
    e.closePath();
    St(e, c[Ql]);
    return d;
  }
  const lu = ie;
  function mu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 131;
    d.height = a * 121;
    e.translate(xq, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * 15, a * 83, Mr * a, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    St(e, c[An]);
    e.globalAlpha = 1;
    e.translate(tj, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    St(e, c[1], c[Gl], a * 10);
    return d;
  }
  function nu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 283;
    c.height = a * 224;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(og * a, a * 33);
    d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    St(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 181, a * 32);
    d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    St(d, Xl, b[Rl], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 225, a * 52);
    d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    St(d, undefined, b[yj], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 34, a * 134);
    d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    St(d, Yo, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 249, a * 135);
    d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    St(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 56, a * 50);
    d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    St(d, Pl, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 55);
    d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
    d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
    d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
    d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
    d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
    d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
    d.closePath();
    St(d, b[sb]);
    return c;
  }
  function ou(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 283;
    e.height = a * 224;
    f.translate(Aa, a * 15);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 93, a * 55);
    f.bezierCurveTo(a * 127, a * 27, a * 195, a * 42, a * 213, a * 78);
    f.bezierCurveTo(a * 254, a * 134, a * 226, a * 198, a * 153, a * 197);
    f.bezierCurveTo(a * 59, a * 204, a * 56, a * 158, a * 51, a * 115);
    f.bezierCurveTo(a * 50, a * 93, a * 81, a * 62, a * 90, a * 57);
    f.closePath();
    St(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 100, a * 33);
    f.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    f.closePath();
    St(f, c[Fj]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 181, a * 32);
    f.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    St(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 225, a * 52);
    f.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    St(f, c[Ih]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 34, a * 134);
    f.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    St(f, c[Gg]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 249, a * 135);
    f.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    St(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 50);
    f.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    St(f, c[0]);
    f.translate(0, a * -15);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * Re, a * 33);
    f.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    St(f, undefined, c[2], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 181, a * 32);
    f.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    St(f, Fg, c[Nj], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 225, a * 52);
    f.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    St(f, kh, c[bq], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 34, a * 134);
    f.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    St(f, undefined, c[fh], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 249, a * 135);
    f.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    St(f, undefined, c[il], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 50);
    f.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    St(f, Fg, c[jg], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 93, a * 55);
    f.bezierCurveTo(a * 127, a * 27, a * 195, a * 42, a * 213, a * 78);
    f.bezierCurveTo(a * 254, a * 134, a * 226, a * 198, a * 153, a * 197);
    f.bezierCurveTo(a * 59, a * 204, a * 56, a * 158, a * 51, a * 115);
    f.bezierCurveTo(a * 50, a * 93, a * 81, a * 62, a * 90, a * 57);
    f.closePath();
    St(f, c[1], c[2], Wg * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * pn, a * 33);
    f.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    St(f, undefined, c[1], a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 181, a * 32);
    f.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    St(f, undefined, c[1], a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 225, a * 52);
    f.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    St(f, ri, c[Ni], Vk * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 34, a * 134);
    f.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    St(f, Yo, c[Mg], Dh * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 249, a * 135);
    f.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    St(f, undefined, c[Co], a * Hl);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 50);
    f.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    St(f, undefined, c[ig], a * 20);
    Vt(f, a * 101, a * 155, a * 20.591260281974);
    St(f, c[dl]);
    Vt(f, a * 180, a * 155, a * 20.591260281974);
    St(f, c[3]);
    Vt(f, a * 95, a * 148, a * 7.211102550927978);
    St(f, c[4]);
    Vt(f, a * 173, a * 148, a * 7.211102550927978);
    St(f, c[$j]);
    if (bs === d) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 191, a * 107);
      f.bezierCurveTo(a * 180, a * 104, a * 175, a * 101, a * 180, a * 95);
      f.bezierCurveTo(a * 180, a * 95, a * 181, a * 99, a * 188, a * 103);
      f.bezierCurveTo(a * 191, a * 101, a * 191, a * 95, a * 190, a * 91);
      f.bezierCurveTo(a * 190, a * 91, a * 196, a * 89, a * 195, a * 99);
      f.closePath();
      St(f, c[2]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 206, a * 98);
      f.bezierCurveTo(a * 203, a * 95, a * 200, a * 93, a * 198, a * 101);
      f.bezierCurveTo(a * 194, a * 109, a * 193, a * 109, a * 196, a * 110);
      f.bezierCurveTo(a * 206, a * 115, a * 209, a * 114, a * 211, a * 111);
      f.bezierCurveTo(a * 211, a * 106, a * 208, a * 108, a * 203, a * 108);
      f.bezierCurveTo(a * 193, a * 107, a * 204, a * 101, a * 206, a * 99);
      f.closePath();
      St(f, c[2]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 172, a * 111);
      f.bezierCurveTo(a * 172, a * 106, a * 174, a * 105, a * 185, a * 109);
      f.bezierCurveTo(a * 190, a * 109, a * 189, a * 114, a * 185, a * 120);
      f.bezierCurveTo(a * 181, a * 125, a * 180, a * 126, a * 176, a * 122);
      f.bezierCurveTo(a * 182, a * 119, a * 187, a * 110, a * 182, a * 112);
      f.closePath();
      St(f, c[Ht]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 202, a * 125);
      f.bezierCurveTo(a * 197, a * 117, a * 193, a * 116, a * 193, a * 120);
      f.bezierCurveTo(a * 192.5, a * 124.5, a * 192.5, a * 124.5, a * 192, a * 129);
      f.bezierCurveTo(a * 188, a * 129, a * 187, a * 124, a * 189, a * 120);
      f.bezierCurveTo(a * 191, a * 110, a * 192, a * 110, a * 200, a * 116);
      f.bezierCurveTo(a * 208, a * 120, a * 207, a * 123, a * 202, a * 125);
      f.closePath();
      St(f, c[2]);
    }
    return e;
  }
  function pu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 112;
    e.translate(0, a * Th);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 16, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, hb * a, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * wr, a * 44);
    e.closePath();
    St(e, c[0]);
    e.globalAlpha = Mg;
    e.translate(0, a * -15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Jg, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * Rh, a * 39, Ci * a, a * 44);
    e.closePath();
    St(e, c[_], c[On], Kn * a);
    return d;
  }
  const qu = Fj;
  function tu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 154;
    d.height = a * 261;
    e.globalAlpha = b ? 0.5 : Mg;
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * Dj, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    St(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    St(e, c[Co], c[On], a * zt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 43);
    e.bezierCurveTo(a * 31, a * 61, a * 43, a * 70, a * 51, a * 75);
    e.bezierCurveTo(a * 48, a * 84, a * 41, a * 89, a * 33, a * 86);
    e.bezierCurveTo(a * 23, a * 88, a * 20, a * 76, a * 23, a * 62);
    e.closePath();
    St(e, c[rb]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45, a * 29);
    e.bezierCurveTo(a * 49, a * 45, a * 61, a * 54, a * 64, a * 55);
    e.bezierCurveTo(a * 67.5, a * 53, a * 67.5, a * 53, a * 71, a * 51);
    e.bezierCurveTo(a * 80, a * 44, a * 83, a * 33, a * 82, a * 20);
    e.bezierCurveTo(a * 59, a * jr, a * 51, a * 23, a * 45, a * 30);
    e.closePath();
    St(e, c[Cs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 56);
    e.bezierCurveTo(a * 90, a * 33, a * 103, a * 25, a * 105, a * 27);
    e.bezierCurveTo(a * 116, a * 31, a * 121, a * 45, a * 122, a * 50);
    e.bezierCurveTo(a * 112, a * 62, a * 103, a * 63, a * 91, a * 62);
    e.bezierCurveTo(a * 89, a * 59.5, a * 89, a * 59.5, a * 87, a * 57);
    e.closePath();
    St(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 81);
    e.bezierCurveTo(a * 109, a * 82, a * 123, a * 70, a * 124, a * 63);
    e.bezierCurveTo(a * 124, a * 75.5, a * 124, a * 75.5, a * 124, a * 88);
    e.bezierCurveTo(a * 119, a * 99, a * 103, a * 103, a * 94, a * 103);
    e.closePath();
    St(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 124);
    e.bezierCurveTo(a * 108, a * 125, a * 122, a * 113, a * 124, a * 106);
    e.bezierCurveTo(a * 124, a * 119, a * 124, a * 129, a * 124, a * 132);
    e.bezierCurveTo(a * 110, a * 147, a * 94, a * 148, a * 90, a * 147);
    e.closePath();
    St(e, c[Mh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 170);
    e.bezierCurveTo(a * 104, a * 166, a * 122, a * 158, a * 122, a * 151);
    e.bezierCurveTo(a * 122, a * 162.5, a * 122, a * 162.5, a * 122, a * 174);
    e.bezierCurveTo(a * 111, a * 191, a * 97, a * 191, a * 89, a * 191);
    e.closePath();
    St(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 208);
    e.bezierCurveTo(a * og, a * 209, a * 115, a * 205, a * 122, a * 193);
    e.bezierCurveTo(a * 122, a * 205.5, a * 122, a * 205.5, a * 122, a * 218);
    e.bezierCurveTo(a * 115, a * 229, a * 103, a * 235, a * 90, a * 228);
    e.bezierCurveTo(a * 88, a * 224, a * 88, a * 217, a * 88, a * 211);
    e.closePath();
    St(e, c[3]);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 81);
    e.bezierCurveTo(a * 32, a * 84, a * 41, a * 81, a * 45, a * 68);
    e.bezierCurveTo(a * 50, a * 50, a * 62, a * 40, a * 79, a * 43);
    e.bezierCurveTo(a * 95, a * 45, a * 102, a * 58, a * 101, a * 81);
    e.bezierCurveTo(a * 99.5, a * 120.5, a * 99.5, a * 120.5, a * 98, a * 160);
    e.bezierCurveTo(a * 96.5, a * 191.5, a * 96.5, a * 191.5, a * 95, a * 223);
    e.bezierCurveTo(a * 93, a * 232, a * 101, a * 235, a * 108, a * 238);
    e.bezierCurveTo(a * cl, a * 240, a * 90, a * 233, a * 90, a * 224);
    e.bezierCurveTo(a * 92, a * 157, a * 92, a * 157, a * 94, a * 90);
    e.bezierCurveTo(a * 94, a * 56, a * 89, a * 53, a * 77, a * 51);
    e.bezierCurveTo(a * 58, a * 50, a * 54, a * 59, a * 49, a * 75);
    e.bezierCurveTo(a * 44, a * 91, a * 28, a * 90, a * 23, a * 81);
    e.closePath();
    St(e, c[0]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 123);
    e.bezierCurveTo(a * 88, a * 130, a * 88, a * 127, a * 94, a * 128);
    e.bezierCurveTo(a * 91, a * 136, a * 94, a * 137, a * 99, a * 142);
    e.bezierCurveTo(a * 97, a * 149, a * 99, a * 152, a * 105, a * 155);
    e.bezierCurveTo(a * 107, a * 159, a * 113, a * 159, a * 120, a * 158);
    e.bezierCurveTo(a * 121, a * 160, a * 125, a * 163, a * 132, a * 163);
    e.bezierCurveTo(a * 133, a * 166, a * 136, a * 169, a * 138, a * 170);
    e.bezierCurveTo(a * 133, a * 171, a * 132, a * 172, a * 129, a * 174);
    e.bezierCurveTo(a * 122, a * 170, a * 120, a * 170, a * 116, a * 174);
    e.bezierCurveTo(a * 108, a * 170.5, a * 108, a * 170.5, a * 100, a * 167);
    e.bezierCurveTo(a * 95, a * 172, a * 94, a * 179, a * 95, a * 184);
    e.bezierCurveTo(a * 87, a * 185, a * 87, a * 189, a * 88, a * 194);
    e.bezierCurveTo(a * 82, a * 194, a * 81, a * 195, a * 79, a * 197);
    e.bezierCurveTo(a * 78, a * 192, a * 78, a * 191, a * 77, a * 189);
    e.bezierCurveTo(a * 81, a * 185, a * 82, a * 183, a * 80, a * 176);
    e.bezierCurveTo(a * 89, a * 170, a * 92, a * 168, a * 95, a * 163);
    e.bezierCurveTo(a * 91, a * 151, a * 88, a * 151, a * 82, a * 147);
    e.bezierCurveTo(a * 85, a * 142, a * 85, a * 137, a * 81, a * 133);
    e.bezierCurveTo(a * 84, a * 127, a * 84, a * 125, a * 82, a * 124);
    e.closePath();
    St(e, c[Jl], c[5], Nh * a);
    Vt(e, a * 107, a * 152, a * 9);
    St(e, c[6]);
    Vt(e, a * 105, a * 173, zo * a);
    St(e, c[S]);
    Vt(e, a * 87, a * 161, a * 9);
    St(e, c[6]);
    Vt(e, a * 106, a * 147, a * 4);
    St(e, c[_b]);
    Vt(e, a * 104, a * 167, a * ge);
    St(e, c[7]);
    Vt(e, a * 86, a * 154, a * aq);
    St(e, c[7]);
    return d;
  }
  function uu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 350;
    d.height = a * 140;
    e.translate(a * -50, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.5, a * 222.0625);
    e.bezierCurveTo(a * 185.5, a * 184.0625, a * 302.5, a * 171.0625, a * 313.5, a * 222.0625);
    e.bezierCurveTo(a * 330.5, a * 263.0625, a * 181.5, a * 274.0625, a * 184.5, a * 223.0625);
    e.closePath();
    St(e, c[gl], c[ig], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.5, a * 241.0625);
    e.bezierCurveTo(a * 144.5, a * 278.0625, a * 270.5, a * 209.0625, a * 228.5, a * 174.0625);
    e.bezierCurveTo(a * 196.5, a * 147.0625, a * 117.5, a * 196.0625, a * 131.5, a * 240.0625);
    e.closePath();
    St(e, c[qb], c[Ls], yl * a);
    Vt(e, a * 270.5, a * 225.0625, a * 15.811388300841896);
    St(e, c[jg]);
    Vt(e, a * 243.5, a * 225.0625, a * 6.082762530298219);
    St(e, c[2]);
    Vt(e, a * 255.5, a * 210.0625, a * 10.816653826391969);
    St(e, c[2]);
    Vt(e, a * 167.5, a * 215.0625, a * 15.297058540778355);
    St(e, c[2]);
    Vt(e, a * 176.5, a * 204.0625, a * 7.280109889280518);
    St(e, c[2]);
    Vt(e, a * 206.5, a * 189.0625, a * 7.280109889280518);
    St(e, c[Nj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151.5, a * 212.0625);
    e.bezierCurveTo(a * 161.5, a * 204.0625, a * 173.5, a * 214.0625, a * 158.5, a * 221.0625);
    e.bezierCurveTo(a * 145.5, a * 228.0625, a * 144.5, a * 216.0625, a * 151.5, a * 212.0625);
    e.closePath();
    St(e, c[Mh], c[4], a * aq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 209.0625);
    e.bezierCurveTo(a * 205.5, a * 202.0625, a * 215.5, a * 207.0625, a * 199.5, a * 217.0625);
    e.bezierCurveTo(a * 187.5, a * 224.0625, a * 182.5, a * 217.0625, a * 194.5, a * 209.0625);
    e.closePath();
    St(e, c[Ft], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188.5, a * 183.0625);
    e.bezierCurveTo(a * 201.5, a * 176.0625, a * 213.5, a * 187.0625, a * 193.5, a * 193.0625);
    e.bezierCurveTo(a * 185.5, a * 194.0625, a * 175.5, a * 189.0625, a * 188.5, a * 183.0625);
    e.closePath();
    St(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 261.5, a * 202.0625);
    e.bezierCurveTo(a * 274.5, a * 201.0625, a * 282.5, a * 214.0625, a * 261.5, a * 215.0625);
    e.bezierCurveTo(a * 246.5, a * 214.0625, a * 248.5, a * 203.0625, a * 261.5, a * 202.0625);
    e.closePath();
    St(e, c[Hn], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 240.5, a * 231.0625);
    e.bezierCurveTo(a * 255.5, a * 231.0625, a * 254.5, a * 243.0625, a * 240.5, a * 242.0625);
    e.bezierCurveTo(a * 225.5, a * 239.0625, a * 225.5, a * 232.0625, a * 240.5, a * 231.0625);
    e.closePath();
    St(e, c[iu], c[zt], a * yn);
    return d;
  }
  function vu(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    var i = b * 220;
    var a = b * 220;
    var j = mh * b;
    var h = j / 4;
    f.width = i;
    f.height = a;
    g.translate(i / Nr, a / 2);
    g.globalAlpha = c ? 0.5 : _h;
    if (!c) {
      g.translate(fg * b, b * -8);
    }
    ob(g, wk, j, h);
    St(g, c ? d[Aa] : d[Co]);
    g.globalAlpha = _;
    if (Rl == e) {
      ob(g, $q, j * 0.65, h * 0.65);
      St(g, d[il]);
    } else if (e == ig) {
      g.translate(b * 20, b * 20);
      ob(g, 6, j * 0.45, h * 0.4);
      St(g, d[jg]);
    }
    return f;
  }
  function wu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 220;
    var i = b * 230;
    var a = xo * b;
    var j = a / 4;
    var h = b * 20;
    e.width = g;
    e.height = i;
    f.translate(g / 2, i / jb + h);
    f.globalAlpha = 0.5;
    ob(f, 7, a, j);
    St(f, d[Aa]);
    f.globalAlpha = er;
    f.translate(0, -h);
    ob(f, 7, a, j);
    St(f, d[1]);
    ob(f, ya, a * 0.65, j * 0.65);
    St(f, d[qo]);
    return e;
  }
  function xu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 321;
    d.height = a * 284;
    e.translate(a * 100, a * 30);
    e.translate(rh * a, Bl * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * Xh, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    St(e, c[0]);
    e.globalAlpha = Mg;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    St(e, c[Kg], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    St(e, c[Sg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    St(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    St(e, undefined, c[$j], a * 4);
    e.translate(a * -100, a * -30);
    e.translate(a * Vq, a * 70);
    e.translate(a * gs, vq * a);
    e.globalAlpha = b ? 0.5 : bs;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(Xh * a, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    St(e, c[0]);
    e.globalAlpha = ig;
    e.translate(-zr * a, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * Wa, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    St(e, c[bs], c[2], F * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    St(e, c[dl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    St(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    St(e, Iq, c[4], a * 4);
    e.translate(a * jk, a * -80);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : Ni;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    St(e, c[gl]);
    e.globalAlpha = Mg;
    e.translate(a * -5, a * -F);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    St(e, c[bs], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    St(e, c[Mh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    St(e, c[jg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    St(e, undefined, c[4], a * 4);
    return d;
  }
  function yu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : Kg;
    e.translate(fl * a, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    St(e, c[0]);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    Tt(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    e.restore();
    St(e, c[Rl]);
    Vt(e, a * 121, a * 480, a * 20.396078054371138);
    St(e, c[tj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, I * a, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    St(e, c[0]);
    e.globalAlpha = _h;
    e.translate(-La * a, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    St(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    Tt(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    e.restore();
    St(e, c[4], c[lu], a * 12.5);
    Vt(e, a * 121, a * 480, a * 20.396078054371138);
    St(e, c[Qt], c[lu], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, I * a, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    St(e, c[wh], c[2], a * 12.5);
    return d;
  }
  function zu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 118;
    d.height = a * 114;
    e.translate(0, Ea * a);
    Vt(e, a * 42, a * 43, a * 24.758836806279895);
    St(e, c[An]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    St(e, c[tj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    St(e, c[qu]);
    e.translate(Ah, a * -10);
    Vt(e, a * 42, a * 43, a * 24.758836806279895);
    St(e, c[1], c[il], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    St(e, c[1], c[jb], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    St(e, c[1], c[2], a * rh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, fn * a);
    e.bezierCurveTo(a * 55, a * 19, a * 54, a * 20, a * 55, a * 22);
    e.bezierCurveTo(a * 52, a * 24.5, a * 52, a * 24.5, a * 49, a * 27);
    e.bezierCurveTo(a * 45, a * 25, a * 45, a * 25, a * 41, a * 23);
    e.bezierCurveTo(a * 45, a * 19, a * 48, a * on, a * 52, a * q);
    e.closePath();
    St(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 30);
    e.bezierCurveTo(a * 66, a * 29, a * 64, a * 30, a * 66, a * 30);
    e.bezierCurveTo(a * 67, a * 31, a * 67, a * 31, a * 68, a * 32);
    e.bezierCurveTo(a * 66.5, a * 33.5, a * 66.5, a * 33.5, a * 65, a * 35);
    e.bezierCurveTo(a * 63.5, a * 32.5, a * 63.5, a * 32.5, a * 62, a * 30);
    e.closePath();
    St(e, c[Er], c[4], a * Pg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 21);
    e.bezierCurveTo(a * 31, a * 22, a * 31, a * 26, a * 29, a * 29);
    e.bezierCurveTo(a * 26, a * 28.5, a * 26, a * 28.5, a * 23, a * 28);
    e.bezierCurveTo(a * 23, a * 26.5, a * 23, a * 26.5, a * 23, a * 25);
    e.bezierCurveTo(a * 25, a * 23, a * 25, a * 23, a * 27, a * 21);
    e.closePath();
    St(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * po, a * 36);
    e.bezierCurveTo(a * 23, a * 36, a * 24, a * 42, a * hn, a * 46);
    e.bezierCurveTo(a * 12, a * 39, a * 15, a * 38, a * 18, a * 37);
    e.closePath();
    St(e, c[3], c[4], Bh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 34);
    e.bezierCurveTo(a * 35, a * 36, a * 36, a * 39, a * 32, a * 45);
    e.bezierCurveTo(a * 25, a * 46, a * 25, a * 44, a * 30, a * 34);
    e.closePath();
    St(e, c[3], c[4], a * Pg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 35);
    e.bezierCurveTo(a * 58, a * 27, a * 57, a * 27, a * 52, a * 31);
    e.bezierCurveTo(a * 50, a * 36, a * 53, a * 38, a * 58, a * 36);
    e.closePath();
    St(e, c[Ql], c[4], a * Ks);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 46);
    e.bezierCurveTo(a * 64.5, a * 46.5, a * 64.5, a * 46.5, a * 66, a * 47);
    e.bezierCurveTo(a * 70, a * 50, a * 70, a * 53, a * 61, a * 55);
    e.bezierCurveTo(a * 62, a * 50.5, a * 62, a * 50.5, a * 63, a * 46);
    e.closePath();
    St(e, c[wi], c[co], Ks * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 42);
    e.bezierCurveTo(a * 47, a * 41, a * 53, a * 47, a * 46, a * 51);
    e.bezierCurveTo(a * 38, a * 49, a * 39, a * 46, a * 41, a * 43);
    e.closePath();
    St(e, c[Lq], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 57);
    e.bezierCurveTo(a * 54, a * 57, a * 54, a * 58, a * 55, a * 61);
    e.bezierCurveTo(a * 54, a * 63, a * 52, a * 64, a * 48, a * 65);
    e.closePath();
    St(e, c[Mh], c[Qt], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 52);
    e.bezierCurveTo(a * 25, a * 51, a * 27, a * 50, a * 28, a * 54);
    e.bezierCurveTo(a * 27, a * 58, a * 24, a * 58, a * 22, a * 58);
    e.bezierCurveTo(a * 21, a * 55.5, a * 21, a * 55.5, a * 20, a * 53);
    e.closePath();
    St(e, c[3], c[Oa], Jb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 61);
    e.bezierCurveTo(a * 37, a * 61, a * 39, a * 63, a * 39, a * 68);
    e.bezierCurveTo(a * 36, a * 68.5, a * 36, a * 68.5, a * 33, a * 69);
    e.bezierCurveTo(a * 30.5, a * 67.5, a * 30.5, a * 67.5, a * 28, a * 66);
    e.closePath();
    St(e, c[3], c[Og], gs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 45);
    e.bezierCurveTo(a * 90, a * 46.5, a * 90, a * 46.5, a * 92, a * 48);
    e.bezierCurveTo(a * 92, a * 50, a * 92, a * 50, a * 92, a * 52);
    e.closePath();
    St(e, c[Ft], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 53);
    e.bezierCurveTo(a * 97.5, a * 55, a * 97.5, a * 55, a * 99, a * 57);
    e.bezierCurveTo(a * 97.5, a * 59.5, a * 97.5, a * 59.5, a * 96, a * 62);
    e.bezierCurveTo(a * 93.5, a * 60.5, a * 93.5, a * 60.5, a * 91, a * 59);
    e.bezierCurveTo(a * 91.5, a * 57, a * 91.5, a * 57, a * 92, a * 55);
    e.closePath();
    St(e, c[3], c[4], Bh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 92, a * 71);
    e.bezierCurveTo(a * 94.5, a * 70.5, a * 94.5, a * 70.5, a * 97, a * 70);
    e.bezierCurveTo(a * 98.5, a * 72.5, a * 98.5, a * 72.5, Oh * a, a * 75);
    e.bezierCurveTo(a * 97, a * 76.5, a * 97, a * 76.5, a * 94, a * 78);
    e.closePath();
    St(e, c[3], c[$j], Bh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 82);
    e.bezierCurveTo(a * 96, a * 83, a * 96, a * 83, a * 97, a * 84);
    e.bezierCurveTo(a * 97, a * 85.5, a * 97, a * 85.5, a * 97, a * 87);
    e.bezierCurveTo(a * 93.5, a * 87.5, a * 93.5, a * 87.5, a * 90, a * 88);
    e.closePath();
    St(e, c[3], c[4], a * ie);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 72);
    e.bezierCurveTo(a * 89, a * 76, a * 88, a * 81, a * 85, a * 82);
    e.bezierCurveTo(a * 80, a * 80, a * 82, a * 78, a * 85, a * 72);
    e.closePath();
    St(e, c[Ft], c[4], Jb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 86);
    e.bezierCurveTo(a * 84, a * 88, a * 86, a * 88, a * 85, a * 93);
    e.bezierCurveTo(a * 80, a * 96, a * 79, a * 96, a * 76, a * 91);
    e.closePath();
    St(e, c[3], c[oe], a * Jb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 46);
    e.bezierCurveTo(a * 93, a * 51, a * 91, a * 62, a * 80, a * 78);
    e.bezierCurveTo(a * 74, a * 86, a * 66, a * 90, a * 60, a * 86);
    e.bezierCurveTo(a * 55, a * 79, a * 57, a * 73, a * 67, a * 57);
    e.bezierCurveTo(a * 71, a * 51, a * 79, a * 44, a * 84, a * 46);
    e.closePath();
    St(e, c[5], c[6], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 76, a * 60);
    e.bezierCurveTo(a * 80, a * 66, a * 75, a * 74, a * 68, a * 74);
    e.bezierCurveTo(a * 60, a * 64, a * 68, a * 59, a * 76, a * 59);
    e.closePath();
    St(e, c[7], c[k], a * 5);
    return d;
  }
  function Au(f, e, i, j, k, m, n, a, o, h, l = 0) {
    var g = document.createElement("canvas");
    var p = g.getContext("2d");
    m = m ? f * m : gl;
    var b = Math.floor(f * i);
    p.font = b + "px Baloo Paaji";
    p.lineJoin = "round";
    a *= f;
    var q = n ? jb * a : yj;
    if (o) {
      var d = Math.min(p.measureText(e).width + f * 2 + q, o);
    } else {
      d = p.measureText(e).width + On * f + q + l * f * 2;
    }
    b = (b + m + l) * f + q;
    g.width = d;
    g.height = b;
    if (n) {
      p.fillStyle = n;
      Tt(p, 0, 0, d, b, a * 2);
      p.fill();
      p.translate(a, a);
    }
    p.textBaseline = "middle";
    p.font = i + "px Baloo Paaji";
    p.lineJoin = "round";
    if (k) {
      p.beginPath();
      p.fillStyle = k;
      p.fillText(e, 0, b / qo + m - q / jb, d);
    }
    p.beginPath();
    if (h) {
      p.strokeStyle = h;
      p.lineWidth = l;
      p.strokeText(e, l, (b - q) / X, d);
    }
    p.fillStyle = j;
    p.fillText(e, l, (b - q) / Gl, d);
    return g;
  }
  function Bu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : er;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    St(e, c[0]);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    Tt(e, -Vl * a, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    St(e, c[0]);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    ob(e, 4, a * 26.476404589747453, a * bg);
    e.restore();
    St(e, c[Fj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    St(e, c[0]);
    e.globalAlpha = Mg;
    e.translate(a * -20, a * -Hl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    St(e, c[1], c[Gl], a * 12.5);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    Tt(e, a * -14, a * -53, a * 28, a * 106, vq * a);
    e.restore();
    St(e, c[oe], c[5], a * 12.5);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    ob(e, oe, a * 26.476404589747453, lt * a);
    e.restore();
    St(e, c[bs], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    St(e, c[Ls], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    St(e, c[3]);
    return d;
  }
  function Cu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 217;
    d.height = a * 215;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 113);
    e.bezierCurveTo(a * 135, a * 98, a * 136, a * 96, a * 142, a * 97);
    e.bezierCurveTo(a * 167, a * 106, a * 167, a * 106, a * 171, a * 109);
    e.bezierCurveTo(a * 173, a * 120, a * 173, a * 134, a * 169, a * 141);
    e.bezierCurveTo(a * 140, a * 149.5, a * 140, a * 149.5, a * 111, a * 158);
    e.closePath();
    St(e, c[1], c[2], yn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 103);
    e.bezierCurveTo(a * 167, a * 91, a * 175, a * 87, a * 176, a * 94);
    e.bezierCurveTo(a * 175, a * 102, a * 176, a * 102, a * 186, a * 103);
    e.bezierCurveTo(a * 191, a * 104, a * 192, a * 105, a * 185, a * 116);
    e.bezierCurveTo(a * 183, a * 120, a * 191, a * 124, a * 189, a * 129);
    e.bezierCurveTo(a * 185, a * 139, a * 178, a * 134, a * 166, a * 131);
    e.closePath();
    St(e, c[1], c[Nj], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 46);
    e.bezierCurveTo(a * 60, a * 34, a * 60, a * 29, a * 56, a * 19);
    e.bezierCurveTo(a * 52, a * 12, a * 52, Jg * a, a * 49, a * 24);
    e.bezierCurveTo(a * 48, a * 27, a * 46, a * 28, a * 39, a * 27);
    e.bezierCurveTo(a * 33, a * 26, a * 34, a * 31, a * 35, a * 37);
    e.bezierCurveTo(a * 36, a * 41, a * 27, a * 46, a * 29, a * 52);
    e.bezierCurveTo(a * 36, a * 55, a * 35, a * 56, a * 31, a * 59);
    e.bezierCurveTo(a * 27, a * 65, a * 32, a * 64, a * 35, a * 62);
    e.closePath();
    St(e, c[4], c[Bh], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 50);
    e.bezierCurveTo(a * 51, a * 35, a * 70, a * 32, a * 78, a * 29);
    e.bezierCurveTo(a * 84, a * 27, a * 113, a * 36, a * 127, a * 41);
    e.bezierCurveTo(a * 140, a * 47, a * 147, a * 69, a * 137, a * 73);
    e.bezierCurveTo(a * 124, a * 92, a * 117, a * 92, a * 109, a * 94);
    e.bezierCurveTo(a * 101, a * 96, a * 89, a * 92, a * 65, a * 83);
    e.bezierCurveTo(a * 54, a * 80, a * 46, a * 58, a * 46, a * 51);
    e.closePath();
    St(e, c[4], c[un], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 40);
    e.bezierCurveTo(a * 49, a * 34, a * 49, a * 34, a * 47, a * 28);
    e.bezierCurveTo(a * 38, a * 28, a * 34, a * 27, a * 37, a * 37);
    e.bezierCurveTo(a * 43, a * 40.5, a * 43, a * 40.5, a * 49, a * 44);
    e.closePath();
    St(e, c[wk]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 48);
    e.bezierCurveTo(a * 38, a * 49, a * 38, a * 49, a * 47, a * 50);
    e.bezierCurveTo(a * 46.5, a * 51.5, a * 46.5, a * 51.5, a * 46, a * 53);
    e.bezierCurveTo(a * 40, a * 53.5, a * 40, a * 53.5, a * 34, a * 54);
    e.bezierCurveTo(a * 29, a * 51, a * 32, a * 51.5, a * 30, a * 49);
    e.closePath();
    St(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 89, a * 61);
    e.bezierCurveTo(a * 101, a * 70, a * 109, a * 90, a * 102, a * 90);
    e.bezierCurveTo(a * 97, a * 91, a * 87, a * 91, a * 60, a * 80);
    e.bezierCurveTo(a * 48, a * 65, a * 46, a * 56, a * 48, a * 53);
    e.bezierCurveTo(a * 50, a * 52, a * 66, a * 56, a * 89, a * 61);
    e.closePath();
    St(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 59);
    e.bezierCurveTo(a * 115, a * 45, a * 125, a * 42, a * 129, a * 47);
    e.bezierCurveTo(a * 138, a * 56, a * 140, a * 63, a * 138, a * 67);
    e.bezierCurveTo(a * 131, a * 80, a * 122, a * 87, a * 114, a * 90);
    e.bezierCurveTo(a * 105, a * 80, a * 95, a * 62, a * 98, a * 61);
    e.closePath();
    St(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 62);
    e.bezierCurveTo(a * 139, a * 45, a * 153, a * 40, a * 150, a * 48);
    e.bezierCurveTo(a * 145, a * 57, a * 157, a * 63, a * 157, a * 70);
    e.bezierCurveTo(a * 157, a * 74, a * 142, a * 77, a * 142, a * 85);
    e.bezierCurveTo(a * 143, a * 91, a * 141, a * 92, a * 135, a * 90);
    e.bezierCurveTo(a * 132, a * 90, a * 132, a * 96, a * 124, a * 99);
    e.bezierCurveTo(a * 118, a * 93, a * 116, a * 77, a * 116, a * 64);
    e.closePath();
    St(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 130);
    e.bezierCurveTo(a * 157, a * 115, a * 165, a * 111, a * 167, a * 115);
    e.bezierCurveTo(a * 170, a * 117, a * 171, a * 135, a * 167, a * 141);
    e.bezierCurveTo(a * 135.5, a * 149.5, a * 135.5, a * 149.5, a * 104, a * 158);
    e.closePath();
    St(e, c[Fh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 119);
    e.bezierCurveTo(a * 46, a * 120, a * 40, a * 118, a * 34, a * 116);
    e.bezierCurveTo(a * 28, a * 111, a * 41, a * 112, a * 39, a * 108);
    e.bezierCurveTo(a * 36, a * 100, a * 49, a * 102, a * 53, a * 95);
    e.bezierCurveTo(a * 57, a * 84, a * 58, a * 85, a * 63, a * 93);
    e.bezierCurveTo(a * 68, a * 96, a * 72, a * 94, a * 80, a * 88);
    e.bezierCurveTo(a * 80, a * 96, a * 78, a * 107, a * 66, a * 115);
    e.closePath();
    St(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 64);
    e.bezierCurveTo(a * 133.5, a * 57, a * 133.5, a * 57, a * 149, a * 50);
    e.bezierCurveTo(a * 145, a * 54, a * 154, a * 65, a * 157, a * 68);
    e.bezierCurveTo(a * 138.5, a * 66.5, a * 138.5, a * 66.5, a * 120, a * 65);
    e.closePath();
    St(e, c[Hk]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 65);
    e.bezierCurveTo(a * 129, a * 77, a * 129, a * 77, a * 140, a * 89);
    e.bezierCurveTo(a * 131, a * 89, a * 130, a * 92, a * 128, a * 96);
    e.bezierCurveTo(a * 123.5, a * 82, a * 123.5, a * 82, a * 119, a * 68);
    e.closePath();
    St(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 112);
    e.bezierCurveTo(a * 63, a * 108, a * 78, a * 111, a * 88, a * 112);
    e.bezierCurveTo(a * 98, a * 122, a * 117, a * 136, a * 125, a * 157);
    e.bezierCurveTo(a * 123, a * 180, a * 123, a * 185, a * 118, a * 186);
    e.bezierCurveTo(a * 101, a * 190, a * 89, a * 191, a * 79, a * 187);
    e.bezierCurveTo(a * 53, a * 165, a * 50, a * 153, a * 47, a * 144);
    e.bezierCurveTo(a * 46, a * 128, a * 46, a * 124, a * 50, a * 112);
    e.closePath();
    St(e, c[Ag], c[lt], cq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 114);
    e.bezierCurveTo(a * 81, a * 149, a * 80, a * 147, a * 80, a * 149);
    e.bezierCurveTo(a * 82, a * 155, a * 80, a * 182, a * 74, a * 182);
    e.bezierCurveTo(a * 60, a * 172, a * 52, a * 157, a * 47, a * 144);
    e.closePath();
    St(e, c[11], c[rr], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85, a * 152);
    e.bezierCurveTo(a * 99, a * 150, a * 109, a * 152, a * 119, a * 156);
    e.bezierCurveTo(a * 122, a * 163, a * 122, a * 174, a * 117, a * 182);
    e.closePath();
    e.bezierCurveTo(a * 93, a * 188, a * 82, a * 187, a * 83, a * 179);
    St(e, c[gu], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 166);
    e.bezierCurveTo(a * 133, a * 165, a * 142, a * 168, a * 137, a * 173);
    e.bezierCurveTo(a * 127, a * 177, a * 137, a * 195, a * 126, a * 196);
    e.bezierCurveTo(a * 112, a * 195, a * 112, a * 194, a * 109, a * 199);
    e.bezierCurveTo(a * 105, a * 205, a * 102, a * 195, a * 96, a * 197);
    e.bezierCurveTo(a * 84, a * 201, a * 88, a * 198, a * 90, a * 187);
    e.bezierCurveTo(a * 96, a * 171, a * 97, a * 170, a * 103, a * 167);
    e.closePath();
    St(e, c[9], c[Ea], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 168);
    e.bezierCurveTo(a * 118, a * 172.5, a * 118, a * 172.5, a * 131, a * 177);
    e.bezierCurveTo(a * 133, a * 190, a * 132, a * 199, a * 116, a * 194);
    e.bezierCurveTo(a * 110, a * 182, a * 110, a * 182, a * 104, a * 170);
    e.closePath();
    St(e, c[10]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 169);
    e.bezierCurveTo(a * 100.5, a * 182, a * 100.5, a * 182, a * 99, a * 195);
    e.bezierCurveTo(a * 93.5, a * 196.5, a * 93.5, a * 196.5, a * 88, a * 198);
    e.bezierCurveTo(a * 94, a * 176, a * 96, a * 174, a * 101, a * 168);
    e.closePath();
    St(e, c[ol], c[zo], a * yn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 107);
    e.bezierCurveTo(a * 64, a * 101, a * 64, a * 101, a * 64, a * 95);
    e.bezierCurveTo(a * 57, a * 86, a * 57, a * 84, a * 53, a * 97);
    e.bezierCurveTo(a * 55, a * 103.5, a * 55, a * 103.5, a * 57, a * 110);
    e.closePath();
    St(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 108);
    e.bezierCurveTo(a * 46.5, a * 111, a * 46.5, a * 111, a * 53, a * 114);
    e.bezierCurveTo(a * 50.5, a * 117, a * 50.5, a * 117, a * 48, a * 120);
    e.bezierCurveTo(a * 40.5, a * 117.5, a * 40.5, a * 117.5, a * 33, a * 115);
    e.bezierCurveTo(a * 36, a * 112, a * 36, a * 112, a * 39, a * 109);
    e.closePath();
    St(e, c[11], c[Et], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 106);
    e.bezierCurveTo(a * 178.5, a * 110.5, a * 178.5, a * 110.5, a * 168, a * 115);
    e.bezierCurveTo(a * 168.5, a * 119, a * 168.5, a * 119, a * 169, a * 123);
    e.bezierCurveTo(a * 179, a * 124.5, a * 179, a * 124.5, a * 189, a * 126);
    e.bezierCurveTo(a * 182, a * 118, a * 183, a * 115, a * 188, a * 106);
    e.closePath();
    St(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 69, a * 178);
    e.bezierCurveTo(a * 69, a * 141, a * 70, a * 136, a * 77, a * 137);
    e.bezierCurveTo(a * 88, a * 133, a * 101, a * 134, a * 108, a * 137);
    St(e, Pa, c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 161);
    e.bezierCurveTo(a * 54, a * 124, a * 55, a * 119, a * 62, a * 119);
    e.bezierCurveTo(a * 74, a * 117, a * 85, a * 117, a * 93, a * 119);
    St(e, Oq, c[3], a * Oa);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 91, a * 29);
    e.bezierCurveTo(a * 74, a * 33, a * 62, a * 46, a * 57, a * 54);
    e.bezierCurveTo(a * 57, a * 63, a * 68, a * 76, a * 77, a * 87);
    St(e, Cr, c[6], cq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 33);
    e.bezierCurveTo(a * 82, a * 51, a * 80, a * 52, a * 79, a * 59);
    e.bezierCurveTo(a * 78, a * 65, a * 93, a * 86, a * 101, a * 93);
    St(e, undefined, c[jq], a * Nh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 98);
    e.bezierCurveTo(a * 126.5, a * 103, a * 126.5, a * 103, a * 123, a * 108);
    e.bezierCurveTo(a * 133.5, a * 107, a * 133.5, a * 107, a * 144, a * 106);
    e.bezierCurveTo(a * 138.5, a * 110, a * 138.5, a * 110, a * 133, a * 114);
    e.bezierCurveTo(a * 142, a * 114, a * 142, a * 114, a * 151, a * 114);
    e.bezierCurveTo(a * 146.5, a * 119.5, a * 146.5, a * 119.5, a * 142, a * 125);
    e.bezierCurveTo(a * 146.5, a * 127, a * 146.5, a * 127, a * 151, a * 129);
    e.bezierCurveTo(a * 147.5, a * 132, a * 147.5, a * 132, a * 144, a * 135);
    e.bezierCurveTo(a * 148, a * 137, a * 148, a * 137, a * 152, a * 139);
    e.bezierCurveTo(a * 149, a * 142.5, a * 149, a * 142.5, a * 146, a * 146);
    St(e, undefined, c[3], a * 4);
    return d;
  }
  function Du(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * Hl);
    e.translate(a * -f, a * -fl);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    Tt(e, -sr * a, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    St(e, c[Ih]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    St(e, c[Ah]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    Tt(e, a * -14, a * -61, a * 28, a * 122, Ds * a);
    e.restore();
    St(e, c[4], c[ko], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    St(e, c[Fb], c[fh], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    St(e, c[ck], c[Nj], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    St(e, c[Z]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    St(e, c[1], c[Nr], a * 12.5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 346);
    e.bezierCurveTo(a * 125, a * 352, a * 125, a * 352, a * 107, a * 358);
    e.bezierCurveTo(a * 124, a * 363, a * 140, a * 368, a * 141, a * 368);
    e.bezierCurveTo(a * 156.5, a * 367, a * 156.5, a * 367, a * 172, a * 366);
    e.closePath();
    St(e, c[3]);
    return d;
  }
  function Fu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 70;
    var i = b * 90;
    var a = b * 4;
    var j = b * Pg;
    e.width = g;
    e.height = i;
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    St(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    St(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    St(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * 3, b * -93 + j);
    f.rotate(Math.PI / ko);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    St(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    St(f, d[0], d[sl], a);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * ok, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    St(f, d[Qr], d[1], a);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = Ls;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, mh * b, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    St(f, d[Aa], d[_h], a);
    f.restore();
    f.save();
    f.translate(b * 3, b * -93);
    f.rotate(Math.PI / 5);
    f.globalAlpha = ig;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * Re, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    St(f, d[Qr], d[1], a);
    f.restore();
    return e;
  }
  const Gu = zb;
  function Hu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 140;
    var i = b * 150;
    var a = b * uj;
    var j = b * 4;
    e.width = g;
    e.height = i;
    f.translate(b * -50, b * -38 + a);
    f.globalAlpha = c ? 0.5 : Ni;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    St(f, d[Gg]);
    f.translate(Fj, qu - a);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    St(f, d[1], d[2], j);
    return e;
  }
  function Iu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = zj * b;
    var i = b * Dq;
    e.width = g;
    e.height = i;
    var a = b * tg;
    var j = b * 9;
    var k = b * $o;
    f.save();
    f.translate(a, j);
    f.globalAlpha = 1;
    Vt(f, 0, 0, k);
    St(f, d[0]);
    k = Lq * b;
    a = 0;
    j = b * -3;
    f.translate(a, j);
    f.globalAlpha = 1;
    Vt(f, 0, 0, k);
    St(f, d[1]);
    f.restore();
    return e;
  }
  function Ju(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 120;
    var i = b * 150;
    var a = b * 60;
    var j = a / $j;
    var h = b * qg;
    e.width = g;
    e.height = i;
    f.save();
    f.translate(g / Nr + yj * b, i / Nj + b * Gg + h);
    f.rotate(Math.PI / Lq);
    f.globalAlpha = 0.5;
    ob(f, Ko, a, j);
    St(f, d[bu]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * Yb, i / qi + b * 12);
    f.globalAlpha = 1;
    f.rotate(Math.PI / 3);
    f.translate(qb, -h);
    ob(f, Da, a, j);
    St(f, d[1]);
    f.restore();
    f.save();
    f.translate(g / On - b * Ag, i / jg - b * 12);
    f.rotate(Math.PI / 2.8);
    ob(f, 5, a * 0.5, j * 0.4);
    St(f, d[2]);
    f.restore();
    f.save();
    f.translate(g / Ol + b * 19, i / 2 + b * 5);
    f.rotate(Math.PI / ck);
    ob(f, 5, a * 0.5, j * 0.4);
    St(f, d[2]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 8, i / 2 + b * 20);
    f.rotate(Math.PI / 2.25);
    ob(f, Ut, a * 0.5, j * 0.4);
    St(f, d[2]);
    f.restore();
    return e;
  }
  function Ku(b, c, d) {
    var e = document.createElement("canvas");
    var g = e.getContext("2d");
    var i = b * 180;
    var j = b * 210;
    var a = (h = b * 60) / Nh;
    var k = b * Hl;
    e.width = i;
    e.height = j;
    g.save();
    g.translate(i / qo - b * 0, j / jg - b * 35 + k);
    g.rotate(Math.PI / -1.8);
    g.globalAlpha = 0.5;
    g.translate(b * 0, -f * b);
    ob(g, 5, h, a);
    St(g, d[sb]);
    g.restore();
    g.save();
    g.translate(i / 2 + b * 10, j / 2 + b * y + k);
    g.rotate(Math.PI / 2);
    g.globalAlpha = 0.5;
    g.translate(b * 0, b * -ek);
    ob(g, 5, h, a);
    St(g, d[0]);
    g.restore();
    g.save();
    g.translate(i / jb - b * 50, j / 2 + b * 40 + k);
    g.rotate(Math.PI / Sg);
    g.globalAlpha = 0.5;
    g.translate(0, -La * b);
    ob(g, Eg, h, a);
    St(g, d[0]);
    g.restore();
    g.save();
    g.translate(i / tk - sb * b, j / br - b * 35);
    g.rotate(Math.PI / -1.8);
    g.globalAlpha = 1;
    g.translate(Aa * b, -an * b);
    ob(g, ul, h, a);
    St(g, d[Ls]);
    g.restore();
    g.save();
    g.translate(i / jb + Vq * b, j / qi + b * 15);
    g.rotate(Math.PI / 2);
    g.globalAlpha = 1;
    g.translate(0, b * -20);
    ob(g, 5, h, a);
    St(g, d[Ls]);
    g.restore();
    g.save();
    g.translate(i / jb - b * 50, j / 2 + b * 40);
    g.rotate(Math.PI / iu);
    g.globalAlpha = ck;
    g.translate(0, b * -rq);
    ob(g, 5, h, a);
    St(g, d[Co]);
    g.restore();
    var h;
    a = (h = b * 30) / 4;
    g.save();
    g.translate(i / jg + b * 5, j / 2 - b * 20);
    g.rotate(Math.PI / -1.8);
    g.globalAlpha = 1;
    g.translate(xq, b * -20);
    ob(g, ul, h, a);
    St(g, d[qo]);
    g.restore();
    g.save();
    g.translate(i / 2 + b * et, j / 2 + b * Vq);
    g.rotate(Math.PI / jg);
    g.globalAlpha = 1;
    g.translate(Gk, b * -20);
    ob(g, 5, h, a);
    St(g, d[2]);
    g.restore();
    g.save();
    g.translate(i / 2 - b * 45, j / Nr + b * 35);
    g.rotate(Math.PI / Lq);
    g.globalAlpha = 1;
    g.translate(An, b * -jk);
    ob(g, 5, h, a);
    St(g, d[2]);
    g.restore();
    Vt(g, i / qo - b * 7, j / Gl + b * 7, 5);
    St(g, d[2]);
    return e;
  }
  const Lu = _h;
  const Mu = Og;
  function Nu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 234;
    c.height = a * 183;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 25);
    d.bezierCurveTo(a * 150, a * 3, a * 181, a * 22, a * 203, a * 41);
    d.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
    d.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
    d.bezierCurveTo(Sn * a, a * 148, a * S, a * 95, a * 21, a * 66);
    d.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
    d.closePath();
    St(d, b[0], b[Gk], a * Og);
    return c;
  }
  function Nu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 80;
    c.height = pn * a;
    d.scale(0.5, 0.5);
    d.translate(Gh, 15);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, Ks * a);
    d.bezierCurveTo(a * Ig, a * 30, a * 12, a * 42, a * 10, a * 55);
    d.bezierCurveTo(dn * a, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * Uq, a * 50, a * Dg, a * 48, a * Ml);
    d.closePath();
    St(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * Gh, a * 83, a * 4, a * 87);
    St(d, undefined, b[0], Li * a);
    d.translate(0, -10);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * Eg);
    d.bezierCurveTo(a * Ig, a * 30, a * j, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * Lg, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * Dg, a * 48, a * ms);
    d.closePath();
    St(d, b[1], b[fh], yl * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * Xr, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
    St(d, undefined, b[ta], a * 8);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * Il, a * 70);
    d.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, Ts * a);
    St(d, Fg, b[2], a * 8);
    return c;
  }
  const Ou = iu;
  function Pu(b, c, d, e, f) {
    var g = document.createElement("canvas");
    var i = g.getContext("2d");
    if (e == Ah) {
      var a = b * 270;
      var j = b * 250;
      g.width = a;
      g.height = j;
      i.beginPath();
      i.moveTo(b * 140, b * 3);
      i.translate(b * -25, b * -20);
      i.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
      i.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
      i.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
      i.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
      i.bezierCurveTo(Qj * b, b * 158, b * 35, b * 78, b * 59, b * 56);
      i.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
      i.closePath();
      St(i, d[0]);
    } else if (e == 1) {
      a = b * 430;
      j = b * 350;
      g.width = a;
      g.height = j;
      i.beginPath();
      i.moveTo(b * 180, b * 5);
      i.translate(b * -30, b * -60);
      i.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
      i.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
      i.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, b * 255, b * 386);
      i.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
      i.bezierCurveTo(Bt * b, b * 192, b * 107, b * 75, b * 178, b * 69);
      i.closePath();
      St(i, d[An]);
    } else if (e == 2) {
      a = b * 400;
      j = b * 300;
      g.width = a;
      g.height = j;
      i.beginPath();
      i.moveTo(b * 80, b * 52);
      i.translate(b * -40, b * -30);
      i.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
      i.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
      i.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
      i.bezierCurveTo(b * 108, b * 282, b * 100, b * 239, b * 63, b * 205);
      i.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
      i.closePath();
      St(i, d[Ih]);
    }
    return g;
  }
  function Ru(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 373;
    d.height = a * 314;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    Tt(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    St(e, c[1], c[tk], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    St(e, c[0], c[Ah], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    St(e, c[Ah], c[0], jq * a);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    Tt(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    St(e, c[tj], c[qu], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    Tt(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    St(e, c[Qr], c[xq], a * ya);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    Tt(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    St(e, c[Rl], c[Aa], a * 6);
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    Tt(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    St(e, c[0], c[gl], a * kk);
    Vt(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    St(e, c[0], c[fg], a * kk);
    e.globalAlpha = Kg;
    e.translate(a * -5, -gs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    St(e, c[3], c[oe], a * 6);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    Tt(e, a * -40, a * -28.5, a * 80, a * 57, a * Bl);
    e.restore();
    St(e, c[Fb], c[2], a * $j);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    St(e, c[_], c[Nr], a * 6);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    Tt(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    St(e, c[Yl], c[4], S * a);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    Tt(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    St(e, c[Er], c[zt], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    Tt(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    St(e, c[nl], c[4], $a * a);
    e.globalCompositeOperation = "destination-out";
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    Tt(e, -yh * a, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    St(e, c[7], c[8], a * 6);
    e.globalCompositeOperation = "source-over";
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    Tt(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    St(e, c[7], c[$l], a * S);
    e.globalAlpha = 1;
    e.save();
    Vt(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    St(e, c[Ou], c[Oa], a * 6);
    e.restore();
    return d;
  }
  function Su(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = ta * (b * c);
    var i = c * b * 2;
    var a = g / 2;
    var j = i / 2;
    e.width = g;
    e.height = i;
    f.translate(a, j);
    Vt(f, Ih, 0, c * b);
    St(f, d);
    return e;
  }
  function Tu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 220;
    d.height = a * 180;
    e.globalAlpha = b ? 0.5 : Ga;
    e.translate(a * -90, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    St(e, c[5], c[Pg], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    St(e, c[5], c[5], Nj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    St(e, c[4], c[$j], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    St(e, c[4], c[4], qi * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    St(e, c[4], c[Og], Nj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    St(e, c[yn], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * Yg, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    St(e, c[zt], c[$j], tk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(Aq * a, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    St(e, c[4], c[4], a * qi);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    St(e, Xl, c[eh], jq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    St(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    St(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    St(e, c[oe], c[Jl], a * X);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    St(e, undefined, c[aq], a * ya);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    St(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    St(e, c[zt], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    St(e, undefined, c[co], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 140, a * 265.33333587646484);
    e.bezierCurveTo(a * 141, a * 250.33333587646484, a * 148, a * 244.33333587646484, a * 160, a * 241.33333587646484);
    e.bezierCurveTo(a * 200, a * 241.33333587646484, a * 200, a * 241.33333587646484, a * 240, a * 241.33333587646484);
    e.bezierCurveTo(a * 256, a * 243.33333587646484, a * 260, a * 255.33333587646484, a * 260, a * 265.33333587646484);
    e.bezierCurveTo(a * 261, a * 281.33333587646484, a * 247, a * 289.33333587646484, a * 240, a * 289.33333587646484);
    e.bezierCurveTo(a * 161, a * 289.33333587646484, a * 200.5, a * 289.33333587646484, a * 161, a * 289.33333587646484);
    e.bezierCurveTo(a * 149, a * 288.33333587646484, a * 142, a * 278.33333587646484, a * 140, a * 266.33333587646484);
    e.closePath();
    St(e, undefined, c[Qt], $a * a);
    e.globalAlpha = 0.5;
    e.scale(1, 1);
    e.translate(a * 105, a * 155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 74.27557373046875, a * 5.406280517578125, a * 90.27557373046875, a * 6.406280517578125, a * 99.27557373046875, a * 5.406280517578125);
    e.bezierCurveTo(a * 120.27557373046875, a * 5.406280517578125, a * 126.27557373046875, a * 10.406280517578125, a * 136.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 157.77557373046875, a * 37.906280517578125, a * 157.77557373046875, a * 37.906280517578125, a * 179.27557373046875, a * 55.406280517578125);
    e.bezierCurveTo(a * 190.27557373046875, a * 63.406280517578125, a * 192.27557373046875, a * 77.40628051757812, a * 189.27557373046875, a * 91.40628051757812);
    e.bezierCurveTo(a * 183.27557373046875, a * 108.40628051757812, a * 176.27557373046875, a * 110.40628051757812, a * 169.27557373046875, a * 118.40628051757812);
    e.bezierCurveTo(a * 152.27557373046875, a * 133.40628051757812, a * 152.27557373046875, a * 133.40628051757812, a * 135.27557373046875, a * 148.40628051757812);
    e.bezierCurveTo(a * 87.27557373046875, a * 143.40628051757812, a * 87.27557373046875, a * 143.40628051757812, a * 39.27557373046875, a * 138.40628051757812);
    e.bezierCurveTo(a * 26.77557373046875, a * 123.40628051757812, a * 26.77557373046875, a * 123.40628051757812, a * 14.27557373046875, a * 108.40628051757812);
    e.bezierCurveTo(a * 2.27557373046875, a * 95.40628051757812, a * 2.27557373046875, a * 92.40628051757812, a * 3.27557373046875, a * 83.40628051757812);
    e.bezierCurveTo(a * 4.27557373046875, a * 63.406280517578125, a * 12.27557373046875, a * 60.406280517578125, a * 24.27557373046875, a * 40.406280517578125);
    e.closePath();
    St(e, c[lu], c[5], a * yn);
    e.globalAlpha = 1;
    e.translate(a * -110, a * -155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    St(e, c[Ih], c[ck], a * Gl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    St(e, c[0], c[1], Nj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    St(e, c[Qr], c[1], a * On);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    St(e, c[0], c[1], Nj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    St(e, c[0], c[1], il * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    St(e, c[et], c[1], a * tk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    St(e, c[0], c[Ls], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * Mj, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    St(e, c[Ht], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * yk, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    St(e, undefined, c[dl], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    St(e, c[qb], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    St(e, c[0], c[_h], a * Ol);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    St(e, c[Gk], c[Gt], a * Ol);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    St(e, undefined, c[Ga], Ht * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    St(e, Yo, c[ck], a * On);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    St(e, c[0], c[0], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    St(e, undefined, c[_h], a * Gl);
    return d;
  }
  const Vu = Bs;
  function Wu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 277.34375);
    e.bezierCurveTo(a * 197.5, a * 259.84375, a * 197.5, a * 259.84375, a * 298.5, a * 242.34375);
    e.bezierCurveTo(a * 311.5, a * 231.34375, a * 307.5, a * 168.34375, a * 298.5, a * 150.34375);
    e.bezierCurveTo(a * 198, a * 170.34375, a * 198, a * 170.34375, a * 97.5, a * 190.34375);
    e.closePath();
    St(e, c[1], c[2], Ug * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 214.34375);
    e.bezierCurveTo(a * 199, a * 196.34375, a * 199, a * 196.34375, a * 299.5, a * 178.34375);
    e.closePath();
    St(e, undefined, c[2], a * $g);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 247.34375);
    e.bezierCurveTo(a * 201.5, a * 229.34375, a * 201.5, a * 229.34375, a * 304.5, a * 211.34375);
    e.closePath();
    St(e, undefined, c[2], Ug * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.5, a * 189.34375);
    e.bezierCurveTo(a * 97, a * 199.84375, a * 97, a * 199.84375, a * 96.5, a * 210.34375);
    e.bezierCurveTo(a * 110.5, a * 204.34375, a * 110.5, a * 204.34375, a * 124.5, a * 198.34375);
    e.bezierCurveTo(a * 137.5, a * 203.84375, a * 137.5, a * 203.84375, a * 150.5, a * 209.34375);
    e.bezierCurveTo(a * 172, a * 197.84375, a * 172, a * 197.84375, a * 193.5, a * 186.34375);
    e.bezierCurveTo(a * 211.5, a * 189.84375, a * 211.5, a * 189.84375, a * 229.5, a * 193.34375);
    e.bezierCurveTo(a * 240.5, a * 193.34375, a * 240.5, a * 193.34375, a * 251.5, a * 193.34375);
    e.bezierCurveTo(a * 261, a * 182.84375, a * 261, a * 182.84375, a * 270.5, a * 172.34375);
    e.bezierCurveTo(a * 287.5, a * 169.34375, a * 287.5, a * 169.34375, a * 304.5, a * 166.34375);
    e.bezierCurveTo(a * 304.5, a * 156.34375, a * 300.5, a * 145.34375, a * 298.5, a * 147.34375);
    e.closePath();
    St(e, c[3], c[4], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 300.5, a * 147.34375);
    e.bezierCurveTo(a * 293.5, a * 121.34375, a * 278.5, a * 106.34375, a * 256.5, a * 101.34375);
    e.bezierCurveTo(a * 176.5, a * 145.34375, a * 176.5, a * 145.34375, a * 96.5, a * 189.34375);
    e.closePath();
    St(e, c[un], c[ms], a * j);
    Vt(e, a * 252.5, a * 129.34375, a * 18.027756377319946);
    St(e, c[qs]);
    Vt(e, a * 248.5, a * 121.34375, a * 8.246211251235321);
    St(e, c[k]);
    return d;
  }
  const Xu = nk;
  function Yu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 142;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 65, a * 80);
    e.rotate(0.2);
    ob(e, Ba, a * 60, In * a);
    e.restore();
    St(e, c[qb]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 71);
    e.rotate(0.2);
    ob(e, ol, a * 60, a * 10);
    St(e, c[wh], c[fh], yn);
    e.rotate(-0.32);
    ob(e, 9, a * 38, F * a);
    St(e, c[wi], c[Jl], hr);
    e.rotate(0.68);
    ob(e, 9, a * jk, a * or);
    St(e, c[zr], c[Ze], Nl);
    e.restore();
    return d;
  }
  function Zu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = b ? 0.5 : _;
    e.translate(a * 10, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    St(e, c[0], c[tj], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    St(e, c[et]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    St(e, c[Rl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    St(e, c[0], c[0], Ug * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    St(e, c[xq], c[yj], Bt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    St(e, c[et], c[0], a * uh);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    St(e, c[Fb], c[2], Bs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    St(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    St(e, c[Mu]);
    Vt(e, a * 125.5, a * 140.34375, a * 11.180339887498949);
    St(e, c[5]);
    Vt(e, a * 122.5, a * 135.34375, a * 5.0990195135927845);
    St(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    St(e, c[qs], c[Hk], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    St(e, c[7], c[Ma], a * Vu);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    St(e, c[Ts], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 296.5, a * 287.34375);
    e.bezierCurveTo(a * 311.5, a * 291.34375, a * 311.5, a * 291.34375, a * 326.5, a * 295.34375);
    e.closePath();
    St(e, hl, c[Xq], ms * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 289.34375);
    e.bezierCurveTo(a * 308.5, a * 297.34375, a * 308.5, a * 297.34375, a * 322.5, a * 305.34375);
    e.closePath();
    St(e, al, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 291.34375);
    e.bezierCurveTo(a * 304, a * 303.34375, a * 304, a * 303.34375, a * 313.5, a * 315.34375);
    e.closePath();
    St(e, lh, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 161.34375);
    e.bezierCurveTo(a * 230.5, a * 160.34375, a * 236.5, a * 158.34375, a * 238.5, a * 161.34375);
    e.bezierCurveTo(a * 238.5, a * 157.34375, a * 228.5, a * 159.34375, a * 227.5, a * 161.34375);
    e.closePath();
    St(e, undefined, c[9], Zt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167.5, a * 248.34375);
    e.bezierCurveTo(a * 165.5, a * 251.34375, a * 168.5, a * 256.34375, a * 168.5, a * 253.34375);
    e.bezierCurveTo(a * 166.5, a * 252.34375, a * 168.5, a * 246.34375, a * 166.5, a * 247.34375);
    e.closePath();
    St(e, undefined, c[9], a * 3);
    return d;
  }
  function $u(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 309;
    d.height = a * 287;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    St(e, c[0], c[Gk], a * iq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    St(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    St(e, c[et], c[0], Ea * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    St(e, c[0], c[0], a * Ds);
    e.globalAlpha = 1;
    e.translate(a * -10, -Eg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    St(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    St(e, c[er], c[2], a * Bl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    St(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    St(e, c[Gt], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 109.5, a * 51.53125);
    e.bezierCurveTo(a * 107.5, a * 92.53125, a * 91.5, a * 95.53125, a * 59.5, a * 101.53125);
    St(e, c[1], c[2], Ji * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 51.53125);
    e.bezierCurveTo(a * 71, a * 64.53125, a * 69.5, a * 76.53125, a * 69.5, a * 77.53125);
    e.closePath();
    St(e, c[er], c[jb], a * qt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 63.53125);
    e.bezierCurveTo(a * 70.5, a * 65.03125, a * 70.5, a * 65.03125, a * 56.5, a * 66.53125);
    e.closePath();
    St(e, c[1], c[jg], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.5, a * 84.53125);
    e.bezierCurveTo(a * 125.5, a * 110.03125, a * 125.5, a * 110.03125, a * 125.5, a * 135.53125);
    e.closePath();
    St(e, c[Co], c[qo], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 149.5, a * 108.53125);
    e.bezierCurveTo(a * 150, a * 137.03125, a * 150, a * 137.03125, a * 150.5, a * 165.53125);
    e.closePath();
    St(e, c[1], c[br], a * 7);
    return d;
  }
  function ed(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 128;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, lg * a);
    e.bezierCurveTo(a * 169, a * wg, a * 212, a * eo, a * 241, a * ul);
    e.bezierCurveTo(a * 211, a * 63, a * 158, a * 92, a * 103, a * 109);
    e.bezierCurveTo(a * 73, a * 126, a * 54, a * 124, a * 6, a * 99);
    e.bezierCurveTo(a * 82, a * 63, a * 113, a * 35, a * 137, a * or);
    e.closePath();
    St(e, c[An], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 124);
    e.bezierCurveTo(a * 111, a * 126, a * 162, a * 97, a * 203, a * 61);
    e.bezierCurveTo(a * 156, a * 98, a * 131, a * 106, a * 105, a * 109);
    e.bezierCurveTo(a * 99, a * 121, a * 87, a * 124, a * 72, a * 124);
    e.closePath();
    St(e, c[Gl], c[3], a * 1);
    return d;
  }
  function id(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 130;
    var i = b * 142;
    var a = g / Nr;
    var j = i / 2;
    e.width = g;
    e.height = i;
    f.translate(a, j + b * Ji);
    f.globalAlpha = c ? 0.5 : Kg;
    Vt(f, qu, 0, b * 60);
    St(f, d[0]);
    f.translate(0, -qt * b);
    f.globalAlpha = Mg;
    Vt(f, sb, qb, b * 60);
    St(f, d[Kg], d[2], b * $j);
    Vt(f, 0, 0, b * 40);
    St(f, d[Ft]);
    Vt(f, Rl, xq, b * 25);
    St(f, d[yn], d[5], b * 8);
    return e;
  }
  function td(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 372;
    c.height = a * 375;
    d.globalAlpha = 0.5;
    d.translate(a * 15, a * 15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    St(d, b[0]);
    d.globalAlpha = _h;
    d.translate(a * -15, -Th * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    St(d, b[1], b[Ol], Og * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
    d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
    d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
    d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
    d.closePath();
    St(d, b[dl], b[3], a * Ht);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
    d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
    d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
    d.closePath();
    St(d, b[dl], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
    d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
    d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
    d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
    d.closePath();
    St(d, b[3], b[rb], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
    d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
    d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
    d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
    d.closePath();
    St(d, b[3], b[Sg], On * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
    d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
    d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
    d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
    d.closePath();
    St(d, b[iu], b[3], a * qi);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
    d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
    d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
    d.closePath();
    St(d, b[3], b[3], a * qi);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    St(d, undefined, b[2], a * 4);
    return c;
  }
  const nd = Gl;
  function od(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 101;
    e.translate(a * 0, a * 5);
    if (xt === Ih) {
      e.globalAlpha = b ? 0.5 : Ga;
      Vt(e, a * 44, a * 55, a * 41);
      St(e, c[Ah]);
    }
    e.globalAlpha = ck;
    Vt(e, a * 44, a * 45, a * 41);
    St(e, c[sl], c[fh], a * Og);
    Vt(e, a * 44, a * 45, a * 31);
    St(e, c[3]);
    e.save();
    e.translate(a * 45, a * 45);
    Tt(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    St(e, c[4], c[cq], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    Tt(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    St(e, c[4], c[4], a * 2);
    Vt(e, a * 45, a * 29, Nn * a);
    St(e, c[5]);
    Vt(e, a * 45, a * 61, wk * a);
    St(e, c[5]);
    Vt(e, a * 28, a * 45, a * Ia);
    St(e, c[Jb]);
    Vt(e, a * 62, a * 45, a * qs);
    St(e, c[5]);
    return d;
  }
  function rd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 148;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 65, a * 85);
    e.rotate(1.4);
    ob(e, vl, a * 60, a * lt);
    e.restore();
    St(e, c[0]);
    e.globalAlpha = Gt;
    e.save();
    e.translate(a * 65, a * 74);
    e.rotate(1.4);
    ob(e, 7, a * 60, a * uj);
    St(e, c[1], c[2], 4);
    e.rotate(0.64);
    ob(e, 7, a * 40, a * Wg);
    St(e, c[3], c[zt], mg);
    e.rotate(0.12);
    ob(e, qt, a * 23, a * 5);
    e.restore();
    St(e, c[5]);
    return d;
  }
  function ad(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 125;
    d.height = a * 139;
    e.globalAlpha = b ? 0.5 : Ls;
    e.save();
    e.translate(a * 63, a * 79);
    e.rotate(sl);
    ob(e, $o, a * 60, Wg * a);
    St(e, c[qb]);
    e.restore();
    e.globalAlpha = Ga;
    e.save();
    e.translate(a * 63, a * 69);
    e.rotate(1);
    ob(e, Rs, a * 60, a * Vq);
    St(e, c[1], c[2], 4);
    e.rotate(0.56);
    ob(e, 8, a * 40, a * 10);
    St(e, c[3], c[eh], 4);
    e.rotate(0.28);
    ob(e, 8, a * 28, a * 8);
    St(e, c[Sj]);
    e.restore();
    return d;
  }
  const sd = iq;
  const hd = wi;
  function ld(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : Gt;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    ob(e, Kl, a * 146, a * 30);
    e.restore();
    St(e, c[xq]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    ob(e, 6, a * 146, a * 30);
    e.restore();
    St(e, c[1], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(fg);
    ob(e, Vs, a * 105, a * 30);
    e.restore();
    St(e, c[nk], c[3], Nk * a);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    ob(e, 6, a * 66, a * 30);
    e.restore();
    St(e, c[mg], c[Nr], $l * a);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(Ih);
    ob(e, 6, a * 31, a * 30);
    e.restore();
    St(e, c[_j], c[Ml], a * Nk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    St(e, undefined, c[Ht], Kn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 100);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    St(e, Mk, c[Ol], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * 100);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    St(e, undefined, c[qi], a * 8);
    return d;
  }
  function gd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(Qr, a * Og);
    if (xt === Ih) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1);
      ob(e, 8, a * 41, a * 10);
      St(e, c[qu]);
      e.restore();
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(ig);
    ob(e, k, a * 41, Bl * a);
    St(e, c[1], c[nd], a * oe);
    e.rotate(0.56);
    ob(e, 8, a * 33, a * 10);
    St(e, c[3], c[4], a * eh);
    e.rotate(0.28);
    ob(e, 8, a * 24, a * 8);
    St(e, c[Ut]);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(et);
    Tt(e, a * -Pj, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    St(e, c[4], c[Qt], Ht * a);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(qb);
    Tt(e, a * -26, -Hr * a, a * 52, a * 18, a * 30);
    e.restore();
    St(e, c[cq], c[4], a * On);
    Vt(e, a * 45, a * 29, vl * a);
    St(e, c[5]);
    Vt(e, a * 45, a * 61, Mn * a);
    St(e, c[5]);
    Vt(e, a * 28, a * 45, a * 7);
    St(e, c[5]);
    Vt(e, a * 62, a * 45, a * 7);
    St(e, c[bt]);
    return d;
  }
  function ud(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(qb, a * 4);
    if (Fj === xt) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1.4);
      ob(e, 7, a * 41, a * 10);
      e.restore();
      St(e, c[0]);
    }
    e.globalAlpha = sl;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1.4);
    ob(e, Lh, a * 41, a * Ds);
    St(e, c[sl], c[2], a * Oa);
    ob(e, lg, a * 35, a * Vq);
    St(e, c[3], c[Nh], Oa * a);
    ob(e, 7, a * 23, a * 5);
    e.restore();
    St(e, c[Eg]);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    Tt(e, a * -Xq, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    St(e, c[Og], c[Jl], a * fh);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    Tt(e, a * -26, a * -gn, a * 52, a * 18, a * 30);
    e.restore();
    St(e, c[4], c[4], a * 2);
    Vt(e, a * 45, a * 29, O * a);
    St(e, c[5]);
    Vt(e, a * 45, a * 61, a * 7);
    St(e, c[5]);
    Vt(e, a * 28, a * 45, a * 7);
    St(e, c[5]);
    Vt(e, a * 62, a * 45, Ia * a);
    St(e, c[un]);
    return d;
  }
  const bd = sl;
  function vd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.globalAlpha = 0.5;
    e.translate(Fj, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 139);
    e.bezierCurveTo(Bg * a, a * 163, a * 22, a * 156, a * 53, a * 157);
    e.bezierCurveTo(a * 97.5, a * 157, a * 97.5, a * 157, a * 142, a * 157);
    e.bezierCurveTo(a * 150, a * 157, a * 153, a * 156, a * 154, a * 142);
    e.closePath();
    St(e, c[0]);
    e.globalAlpha = 1;
    e.translate(xq, a * -3);
    e.save();
    e.translate(a * 86.5, a * 81.5);
    Tt(e, a * -66.5, a * -65.5, a * 133, a * 131, F * a);
    e.restore();
    St(e, c[1], c[On], a * 5);
    e.save();
    e.translate(a * 84.5, a * 79);
    Tt(e, a * -50.5, a * -49, a * 101, a * 98, Hb * a);
    e.restore();
    St(e, c[3], c[fh], Ut * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 54);
    e.bezierCurveTo(a * 37, a * 48, a * 39, a * 44, a * 38, a * 41);
    e.bezierCurveTo(a * 42, a * 40, a * 45, a * 40, a * 50, a * 41);
    e.bezierCurveTo(a * 85, a * 36, a * 98, a * 37, a * 116, a * 42);
    e.bezierCurveTo(a * 132, a * 39, a * 132, a * 39, a * 133, a * 56);
    e.bezierCurveTo(a * 136, a * 73, a * 136, a * 84, a * 132, a * 106);
    e.bezierCurveTo(a * 47, a * 113, a * 85.5, a * 106, a * 39, a * 106);
    e.bezierCurveTo(a * 32, a * 81, a * 38, a * 60, a * 42, a * 55);
    e.closePath();
    St(e, c[4], c[Sj], _j * a);
    e.save();
    e.translate(a * 28, a * 24);
    e.rotate(tj);
    Tt(e, a * -14, a * -14, a * 28, a * 28, a * 4);
    e.restore();
    St(e, c[bs], c[fh], a * 5);
    e.save();
    e.translate(a * 143, a * 23);
    e.rotate(0);
    Tt(e, -Qs * a, a * -14, a * 28, a * 28, a * mg);
    e.restore();
    St(e, c[sl], c[2], Eg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 80);
    e.bezierCurveTo(a * 73, a * 78, a * 84, a * 74, a * 100, a * 64);
    e.bezierCurveTo(a * 111, a * 57, a * 125, a * 67, a * 108, a * 84);
    e.bezierCurveTo(a * 96, a * 95, a * 86, a * 96, a * 70, a * 88);
    e.bezierCurveTo(a * 62.5, a * 84, a * 62.5, a * 84, a * 55, a * 80);
    e.closePath();
    St(e, c[_j]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    St(e, c[Fh], c[Dg], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    St(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(0, dl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, Zq * a, a * 122, a * 18, a * 129);
    e.closePath();
    St(e, c[et]);
    e.globalAlpha = Co;
    e.translate(Gk, -Ft * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(a * 13, a * 117, Vu * a, a * 109, a * 15, a * 103);
    e.bezierCurveTo(Ar * a, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, gg * a, a * 120, a * 16, a * 127);
    e.closePath();
    St(e, c[4], c[5], a * bt);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    Tt(e, a * -13.5, a * -14.5, a * 27, a * 29, Mu * a);
    e.restore();
    St(e, c[ig], c[ta], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    Tt(e, a * -13.5, a * -El, a * 27, a * 28, a * 4);
    e.restore();
    St(e, c[bd], c[2], gs * a);
    return d;
  }
  function dd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : Lu;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    ob(e, 6, a * 146, a * 30);
    e.restore();
    St(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    ob(e, U, a * 146, a * 30);
    e.restore();
    St(e, c[_], c[2], Rg * a);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(gl);
    ob(e, P, a * 105, a * 30);
    e.restore();
    St(e, c[3], c[3], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    ob(e, Ml, a * 66, a * 30);
    e.restore();
    St(e, c[Qt], c[Nj], a * 8);
    e.save();
    e.translate(a * 131, a * 116);
    ob(e, 7, a * 17, a * 8);
    e.restore();
    St(e, c[ya]);
    e.save();
    e.translate(a * 163, a * 168);
    ob(e, 7, a * 25, a * wo);
    e.restore();
    St(e, c[$a]);
    e.save();
    e.translate(a * 117, a * 151);
    ob(e, 7, dh * a, a * 8);
    e.restore();
    St(e, c[6]);
    e.save();
    e.translate(a * 167, a * 122);
    ob(e, 7, a * 12, Je * a);
    e.restore();
    St(e, c[Ml]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    St(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 100);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    St(e, Xl, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, yg * a);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    St(e, al, c[2], a * 8);
    return d;
  }
  function cd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 501;
    d.height = a * 309;
    e.translate(0, a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 184);
    e.bezierCurveTo(a * 169, a * 196, a * 194, a * 198, a * 227, a * 198);
    e.bezierCurveTo(a * 235, a * 222, a * 236, a * 223, a * 241, a * 226);
    e.bezierCurveTo(a * 245, a * 228, a * 257, a * 228, a * 263, a * 226);
    e.bezierCurveTo(a * 267, a * 225, a * 270, a * 211, a * 275, a * 198);
    e.bezierCurveTo(a * 332, a * 194, a * 347, a * 192, a * 372, a * 188);
    e.bezierCurveTo(a * 366, a * 174.5, a * 366, a * 174.5, a * 360, a * 161);
    e.bezierCurveTo(a * 253.5, a * 162, a * 253.5, a * 162, a * 147, a * 163);
    e.closePath();
    St(e, c[fg]);
    e.globalAlpha = _h;
    e.translate(gl, a * -6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 116);
    e.bezierCurveTo(a * 90, a * 101, a * 96, a * 89, a * 106, a * 83);
    e.bezierCurveTo(a * 86, a * 79, a * 86, a * 52, a * 93, a * 38);
    e.bezierCurveTo(a * 99, a * 51, a * 107, a * 57, a * 122, a * 63);
    e.bezierCurveTo(a * 130, a * 53, a * 141, a * 46, a * 161, a * 46);
    e.bezierCurveTo(a * 157, a * 31, a * 158, a * Sk, a * 169, ya * a);
    e.bezierCurveTo(a * 171, a * 24, a * 186, a * 33, a * 198, a * 45);
    e.bezierCurveTo(a * 252, a * 45, a * 252, a * 45, a * 306, a * 45);
    e.bezierCurveTo(a * 323, a * 33, a * 332, a * 21, a * 335, a * qt);
    e.bezierCurveTo(a * 349, a * 21, a * 347, a * 36, a * 345, a * 46);
    e.bezierCurveTo(a * 364, a * 46, a * 369, a * 48, a * 377, a * 63);
    e.bezierCurveTo(a * 398, a * 58, a * 403, a * 49, a * 409, a * 40);
    e.bezierCurveTo(a * 419, a * 57, a * 411, a * 79, a * 398, a * 85);
    e.bezierCurveTo(a * 405, mh * a, a * 405, a * 106, a * 401, a * 118);
    e.bezierCurveTo(a * 332.5, a * 128.5, a * 332.5, a * 128.5, a * 264, a * 139);
    e.closePath();
    St(e, c[1], c[fh], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 122, a * 191);
    e.bezierCurveTo(a * 123, a * 237, a * 135, a * 245, a * 153, a * 259);
    e.bezierCurveTo(a * 167, a * 269, a * 158, a * 281, a * 118, a * 276);
    e.bezierCurveTo(a * 104, a * 273, a * 98, a * 268, a * 93, a * 242);
    e.bezierCurveTo(a * 89, a * 220, a * 92, a * 201, a * 102, a * 179);
    e.closePath();
    St(e, c[3], c[2], Gh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403, a * 182);
    e.bezierCurveTo(a * 414, a * 215, a * 412, a * 232, a * 403, a * 260);
    e.bezierCurveTo(a * 395, a * 274, a * 375, a * 272, a * 356, a * 270);
    e.bezierCurveTo(a * 345, a * 268, a * 339, a * 262, a * 354, a * 252);
    e.bezierCurveTo(a * 370, a * 242, a * 380, a * 225, a * 384, a * 184);
    e.closePath();
    St(e, c[3], c[2], hh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155, a * 157);
    e.bezierCurveTo(a * 146, a * 189, a * 137, a * 198, a * 114, a * 219);
    e.bezierCurveTo(a * 104, a * 212, a * 98, a * 203, a * 89, a * 189);
    e.bezierCurveTo(a * 82, a * 178, a * 91, a * 164, a * 93, a * 136);
    e.closePath();
    St(e, c[4], c[2], a * lt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 347, a * 162);
    e.bezierCurveTo(a * 357, a * 195, a * 376, a * 209, a * 387, a * 217);
    e.bezierCurveTo(a * 409, a * 201, a * 420, a * 181, a * 416, a * 166);
    e.bezierCurveTo(a * 410, a * 150, a * 412, a * 149, a * 408, a * 130);
    e.closePath();
    St(e, c[4], c[2], a * sd);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 134);
    e.bezierCurveTo(a * 79, a * 102, a * 92, a * 84, a * 108, a * 92);
    e.bezierCurveTo(a * 149, a * 108, a * 184, a * 111, a * 242, a * 111);
    e.bezierCurveTo(a * 294, a * 108, a * 341, a * 105, a * 386, a * 98);
    e.bezierCurveTo(a * 412, a * 91, a * 417, a * 86, a * 415, a * 133);
    e.bezierCurveTo(a * 413, a * 160, a * 413, a * 160, a * 368, a * 174);
    e.bezierCurveTo(a * 308, a * 184, a * 291, a * 185, a * 270, a * 186);
    e.bezierCurveTo(a * 264, a * 206, a * 262, a * 215, a * 253, a * 215);
    e.bezierCurveTo(a * 239, a * 217, a * 239, a * 211, a * 231, a * 186);
    e.bezierCurveTo(a * 178, a * 184, a * 156, a * 179, a * 112, a * 162);
    e.bezierCurveTo(a * 87, a * 151, a * 90, a * 144, a * 87, a * 137);
    e.closePath();
    St(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 98);
    e.bezierCurveTo(a * 84, a * 121, a * 109, a * 102, a * 124, a * 117);
    e.bezierCurveTo(a * 138, a * 136, a * 123, a * 165, a * 94, a * 150);
    e.bezierCurveTo(a * 66, a * 131, a * 64, a * 115, a * 63, a * 99);
    e.closePath();
    St(e, c[Z], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 449, a * 97);
    e.bezierCurveTo(a * 446, a * 143, a * 415, a * 151, a * 402, a * 155);
    e.bezierCurveTo(a * 386, a * 157, a * 373, a * 133, a * 391, a * 116);
    e.bezierCurveTo(a * 402, a * 106, a * 432, a * 124, a * 449, a * 97);
    e.closePath();
    St(e, c[3], c[2], a * 10);
    return d;
  }
  function md(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 304;
    d.height = a * 278;
    e.translate(a * 10, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    St(e, c[gl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, ek * a, a * 239, a * 12, a * 159);
    e.bezierCurveTo(Yl * a, a * 76, a * 75, Zt * a, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    St(e, c[xq]);
    e.translate(a * -10, a * -25);
    e.globalAlpha = sl;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * z, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    St(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * rq, a * 239, a * 12, a * 159);
    e.bezierCurveTo(Ij * a, a * 76, a * 75, a * 4, a * 165, Zh * a);
    e.bezierCurveTo(a * 233, a * Th, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    St(e, c[3], c[4], a * 15);
    return d;
  }
  function pd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(oo * a, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    St(e, c[8], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    St(e, c[zk]);
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    e.closePath();
    St(e, c[0]);
    e.globalAlpha = Gt;
    e.translate(Ah, a * -Xu);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(wa * a, a * 117, Qh * a, a * 109, a * _q, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * Lr, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
    e.closePath();
    St(e, c[yn], c[lu], a * 5);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    Tt(e, a * -13.5, a * -14.5, a * 27, a * 29, a * oe);
    e.restore();
    St(e, c[1], c[fh], a * zr);
    e.save();
    e.translate(a * 143.5, a * 137);
    Tt(e, a * -13.5, a * -G, a * 27, a * 28, a * 4);
    e.restore();
    St(e, c[1], c[il], a * Ks);
    return d;
  }
  function Cd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 135;
    d.height = a * 120;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 3.5, a * 55.25);
    e.bezierCurveTo(a * 3.5, a * 114.25, a * 2.5, a * 109.25, a * 3.5, a * 112.25);
    e.bezierCurveTo(a * 5.5, a * 119.25, a * 8.5, a * 119.25, a * 11.5, a * 119.25);
    e.bezierCurveTo(a * 15.5, a * 114.25, a * 13.5, a * 95.25, a * 14.5, a * 82.25);
    e.closePath();
    St(e, c[0], c[_], a * wt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6.5, a * 43.25);
    e.bezierCurveTo(a * 3.5, a * 27.25, a * 7.5, a * 20.25, a * 25.5, a * 11.25);
    e.bezierCurveTo(a * 45.5, a * -0.75, a * 73.5, a * 1.25, a * 107.5, a * 10.25);
    e.bezierCurveTo(a * 131.5, a * 21.25, a * 125.5, a * 34.25, a * 125.5, a * 36.25);
    e.closePath();
    St(e, c[0], c[_], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120.5, a * 62.25);
    e.bezierCurveTo(a * 121.5, a * 95.25, a * 120.5, a * 80.25, a * 120.5, a * 100.25);
    e.bezierCurveTo(a * 118.5, a * 119.25, a * 123.5, a * 118.25, a * 129.5, a * 113.25);
    e.bezierCurveTo(a * 133.5, a * 107.25, a * 130.5, a * 97.25, a * 130.5, a * 87.25);
    e.bezierCurveTo(a * 129.5, a * 56.25, a * 130, a * 70.75, a * 129.5, a * 54.25);
    e.closePath();
    St(e, c[Aa], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.5, a * 27);
    e.bezierCurveTo(a * 48.5, Eg * a, a * 93.5, Wn * a, a * 118.5, a * 26);
    e.bezierCurveTo(a * 132.5, a * 35, a * 133.5, a * 52, a * 132.5, a * 68);
    e.bezierCurveTo(a * 125.5, a * 87, a * 116.5, a * 84, a * 96.5, a * 75);
    e.bezierCurveTo(a * 60.5, a * 66, a * 52.5, a * 74, a * 37.5, a * 78);
    e.bezierCurveTo(a * 2.5, a * 86, a * 3.5, a * 78, a * 1.5, a * 61);
    e.bezierCurveTo(a * 1.5, a * 37, a * 9.5, a * 32, a * 15.5, a * 28);
    e.closePath();
    St(e, c[fh], c[3], Hg * a);
    return d;
  }
  function Td(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, $j * a);
    if (fg === xt) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(0.2);
      ob(e, _l, a * 41, Bl * a);
      e.restore();
      St(e, c[0]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.2);
    ob(e, 9, a * 41, Vq * a);
    St(e, c[1], c[2], oe * a);
    e.rotate(-0.32);
    ob(e, 9, a * 32, a * 10);
    St(e, c[3], c[4], a * Jl);
    e.rotate(0.68);
    ob(e, 9, a * 23, a * 8);
    St(e, c[5], c[kk], Ml * a);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(Gk);
    Tt(e, a * -se, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    St(e, c[yn], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    Tt(e, a * -26, a * -_l, a * 52, Jt * a, a * 30);
    e.restore();
    St(e, c[Zt], c[Jl], a * 2);
    Vt(e, a * 45, a * 29, qs * a);
    St(e, c[gs]);
    Vt(e, a * 45, a * 61, Ji * a);
    St(e, c[5]);
    Vt(e, a * 28, a * 45, a * 7);
    St(e, c[zr]);
    Vt(e, a * 62, a * 45, a * 7);
    St(e, c[lu]);
    return d;
  }
  const fd = yn;
  const zd = Gl;
  function yd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 106;
    d.height = a * 681;
    e.translate(a * 20, ek * a);
    e.globalAlpha = b ? 0.5 : Gt;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    Tt(e, a * -11.5, a * -226, a * 23, a * 452, Ea * a);
    e.restore();
    St(e, c[Fj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    St(e, c[tj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    St(e, c[0]);
    e.translate(a * -20, -Pn * a);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(sb);
    Tt(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
    e.restore();
    St(e, c[1], c[2], a * wo);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    St(e, c[dl], c[yn], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    St(e, c[nk], c[4], a * k);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    St(e, c[Eg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    St(e, c[Vs], c[7], th * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    St(e, c[Je]);
    return d;
  }
  function wd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 626;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : Ni;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    St(e, c[Gk]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    St(e, c[1], c[X], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 129);
    e.bezierCurveTo(a * 32, a * 135, a * 48, a * 136, a * 53, a * 129);
    e.bezierCurveTo(a * 56, a * 97, a * 53, a * 82, a * 52, a * 64);
    e.bezierCurveTo(a * 49, a * 33, a * 44, a * 27, a * 41, a * 21);
    e.bezierCurveTo(a * 31, a * 40, a * 28, a * 84, a * 27, a * 127);
    e.closePath();
    St(e, c[Cs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    St(e, Pl, c[2], Rs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 475);
    e.bezierCurveTo(a * 38, a * 482, a * 48, a * 480, a * 54, a * 474);
    e.bezierCurveTo(a * 54, a * 509.5, a * 54, a * 509.5, a * 54, a * 545);
    e.bezierCurveTo(a * 46, a * 554, a * 36, a * 552, a * 28, a * 545);
    e.closePath();
    St(e, c[4], c[5], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 496);
    e.bezierCurveTo(a * 39, a * 506, a * 49, a * 503, a * 54, a * 496);
    St(e, Gn, c[5], Kn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 521);
    e.bezierCurveTo(a * 41, a * 529, a * 49, a * 524, a * 54, a * 520);
    St(e, Pa, c[gs], Da * a);
    return d;
  }
  function Pd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 115;
    d.height = a * 585;
    e.scale(-Ga, 1);
    e.translate(a * -110, 0);
    e.translate(uj * a, Wg * a);
    e.globalAlpha = b ? 0.5 : bs;
    e.save();
    e.translate(a * 51.5, a * 342);
    Tt(e, a * -14.5, a * -225, a * 29, a * 450, tl * a);
    e.restore();
    St(e, c[fg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    St(e, c[Fj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * Ze);
    e.bezierCurveTo(a * 34, a * sd, a * kk, a * 43, a * Pg, a * 76);
    e.bezierCurveTo(co * a, a * 98, Zn * a, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    St(e, c[An]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, wr * a, a * 164, a * vl, a * 156);
    e.bezierCurveTo(Rl * a, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, Rr * a, a * 110);
    e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    St(e, c[yj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    St(e, c[0]);
    e.translate(a * -uj, a * -Ds);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 51.5, a * 342);
    Tt(e, a * -14.5, a * -225, a * 29, a * 450, a * ek);
    e.restore();
    St(e, c[1], c[2], lu * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    St(e, c[Mh], c[co], Is * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, U * a);
    e.bezierCurveTo(a * 34, uj * a, Ze * a, a * 43, a * Jb, a * 76);
    e.bezierCurveTo(a * fd, a * 98, a * En, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    St(e, c[lu], c[6], a * U);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    St(e, c[wt], c[8], a * S);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 427);
    e.bezierCurveTo(a * 47, a * 435, a * 55, a * 435, a * 67, a * 427);
    St(e, undefined, c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 448);
    e.bezierCurveTo(a * 46, a * 454, a * 54, a * 457, a * 65, a * 449);
    St(e, ri, c[Hk], a * Oe);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    St(e, c[3], c[Nh], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    e.bezierCurveTo(a * Qr, a * 186, a * iq, a * 201, a * 43, a * 220);
    e.closePath();
    St(e, c[Rn], c[4], a * Nl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * Ki, a * 117, a * 11, a * 110);
    e.bezierCurveTo(a * V, a * 115, Cl * a, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    St(e, c[7], c[ft], Is * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    St(e, c[7], c[th], a * $q);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    St(e, c[7], c[8], Nl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    St(e, c[Hg], c[ss], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    St(e, c[wt], c[th], $a * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    St(e, c[Ts], c[Kn], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 113);
    e.bezierCurveTo(a * 65, a * 140, a * 75, a * 166, a * 52, a * 169);
    e.bezierCurveTo(a * 29, a * 168, a * 41, a * 143, a * 53, a * 112);
    e.closePath();
    St(e, c[3], c[$j], a * 6);
    return d;
  }
  function Ad(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = ea * a;
    d.height = a * 648;
    e.translate(Sk * a, Vk * a);
    e.globalAlpha = b ? 0.5 : _;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    Tt(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    e.restore();
    St(e, c[yj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    St(e, c[tj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    St(e, c[xq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    St(e, c[et]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, mr * a, a * 98);
    e.closePath();
    St(e, c[qb]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 43);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 73, a * 97);
    e.bezierCurveTo(a * 66, a * 116, a * 43, a * 122, a * 26, a * 99);
    e.closePath();
    St(e, c[0]);
    e.translate(-ek * a, -Pn * a);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    Tt(e, a * -13.5, a * -249.5, a * 27, a * 499, Hb * a);
    e.restore();
    St(e, c[ig], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    St(e, c[Mh], c[yn], wo * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    St(e, undefined, c[yn], a * Kn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    St(e, c[5], c[Ml], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    St(e, c[Lh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    St(e, c[5], c[Ze], Rg * a);
    e.save();
    e.translate(a * -46, a * -50);
    e.scale(qi, fh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 80);
    e.bezierCurveTo(a * 51, a * 89.5, a * 51, a * 89.5, a * 51, a * 99);
    e.bezierCurveTo(a * 49, a * 103, a * 46, a * 105, a * 44, a * 99);
    e.bezierCurveTo(a * 44, a * 88.5, a * 44, a * 88.5, a * 44, a * 78);
    e.closePath();
    St(e, c[8]);
    e.restore();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * Hh, a * 98);
    e.closePath();
    St(e, c[$o], c[Hr], a * 8);
    e.scale(il, Nj);
    e.translate(a * -23, -js * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 69);
    e.bezierCurveTo(a * 50, a * 76, a * 43, a * 75, a * 38, a * 69);
    e.bezierCurveTo(a * 43, a * 57, a * 43, a * 57, a * 48, a * 45);
    e.closePath();
    St(e, c[Li]);
    return d;
  }
  function kd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 108;
    d.height = a * 669;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 54, a * 389.5);
    Tt(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
    e.restore();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    St(e, c[qb]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    St(e, c[tj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    St(e, c[0]);
    e.translate(a * -rq, a * -Qj);
    e.globalAlpha = Ek;
    e.save();
    e.translate(a * 54, a * 389.5);
    e.rotate(qb);
    Tt(e, a * -15, a * -228.5, a * 30, a * 457, In * a);
    e.restore();
    St(e, c[Ls], c[tk], a * wo);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    St(e, c[3], c[Zt], a * wo);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    St(e, c[Cs], c[4], a * $l);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    St(e, c[Ks]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    St(e, c[oq], c[Ia], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    St(e, c[Hk]);
    return d;
  }
  function xd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 647;
    e.translate(Hh * a, a * 20);
    e.globalAlpha = b ? 0.5 : Lu;
    e.save();
    e.translate(a * 45, a * 384.5);
    Tt(e, a * -Zq, a * -216.5, a * 30, a * 433, a * hh);
    e.restore();
    St(e, c[Gg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(Ur * a, a * 615, a * 19, a * 607, a * 27, a * 573);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    St(e, c[tj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    St(e, c[gl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * Mr, a * 96);
    e.closePath();
    St(e, c[Gg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    St(e, c[An]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = Ga;
    e.save();
    e.translate(a * 45, a * 384.5);
    Tt(e, -zg * a, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    St(e, c[1], c[2], a * Je);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * Uq, a * 615, a * 19, a * 607, a * 27, a * 573);
    e.closePath();
    St(e, c[hd], c[4], Nk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    St(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    St(e, c[Er], c[4], a * ss);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    St(e, c[_j]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    St(e, c[6], c[wt], a * k);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    St(e, c[8]);
    return d;
  }
  const Jd = rb;
  const Md = Qr;
  function Bd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 43;
    d.height = a * 209;
    e.globalAlpha = b ? 0.5 : ck;
    e.translate(0, iq * a);
    e.translate(Jb * a, a * ie);
    e.save();
    e.translate(a * 21, a * 102.5);
    Tt(e, a * -4, a * -76.5, a * 8, a * 163, lt * a);
    e.restore();
    St(e, c[An]);
    e.translate(Qr, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(La * a, a * 10);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * qh, a * 41);
    e.closePath();
    St(e, c[qu]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * qt, a * 36);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(Hs * a, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * oo, a * 172);
    e.bezierCurveTo(a * Za, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, En * a, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
    e.closePath();
    St(e, c[bu]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 6);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    St(e, c[fg]);
    e.translate(sb, -Dh * a);
    e.globalAlpha = bd;
    e.translate(0, a * 10);
    e.translate(-gs * a, a * -zr);
    e.save();
    e.translate(a * 21, a * 102.5);
    Tt(e, a * -Og, a * -76.5, a * 8, a * 163, a * 10);
    e.restore();
    St(e, c[_h], c[2], a * 4);
    e.translate(0, F * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Hh, a * 10);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * 16, a * 38.5, a * Zk, a * 38.5, Vo * a, a * 41);
    e.closePath();
    St(e, c[3], c[mg], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * L, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    St(e, c[ul], c[6], Jl * a);
    e.translate(Md, a * fg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(nr * a, a * 160.5, a * nr, a * 160.5, a * 15, a * 149);
    e.closePath();
    St(e, c[Ga], c[tk], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 6);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    St(e, c[8]);
    return d;
  }
  const Dd = fd;
  function Ed(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 138;
    d.height = a * 133;
    e.globalAlpha = b ? 0.3 : Ek;
    e.translate(Rl, a * zr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, wt * a, a * 78.640625);
    e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    St(e, c[Gk]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * Gg, a * 105.640625, Rs * a, a * 83.640625, a * vq, a * 84.640625);
    e.closePath();
    St(e, c[An]);
    e.globalAlpha = 1;
    e.translate(yj, -rh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 73.640625);
    e.bezierCurveTo(a * Bk, a * 23.640625, a * 33, a * 19.640625, a * 71, a * 17.640625);
    e.bezierCurveTo(a * 129, a * 19.640625, a * 130, a * 45.640625, a * 130, a * 76.640625);
    e.bezierCurveTo(a * 90, a * 63.640625, a * 85, a * 63.640625, a * 73, a * 63.640625);
    e.bezierCurveTo(a * 38, a * 63.640625, a * 33, a * 66.640625, a * 8, a * 73.640625);
    e.closePath();
    St(e, c[Mg], c[2], Oa * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 28.640625);
    e.bezierCurveTo(a * 51, a * 25.640625, a * 56, a * 7.640625, a * 70, a * 5.640625);
    e.bezierCurveTo(a * 94, a * 7.640625, a * 87, a * 29.640625, a * 72, a * 28.640625);
    e.closePath();
    St(e, c[3], c[qi], a * zt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 26.640625);
    e.bezierCurveTo(a * 42, a * 29.640625, a * 43, a * 31.640625, a * 42, a * 37.640625);
    St(e, undefined, c[bq], Dd * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 26.640625);
    e.bezierCurveTo(a * 100, a * 28.640625, a * 98, a * 34.640625, a * 99, a * 38.640625);
    St(e, undefined, c[tk], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * 6, a * 69.640625, Zq * a, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    St(e, c[3], c[4], cq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * Wq, a * 83.640625, a * 10, a * 84.640625);
    e.closePath();
    St(e, c[iu], c[mg], Dd * a);
    return d;
  }
  function Id(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 151;
    d.height = a * 80;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 54);
    e.bezierCurveTo(a * 136, a * zn, a * 129, a * po, a * 114, a * ws);
    e.bezierCurveTo(a * 51, a * sb, a * 36, a * 16, a * 34, Rj * a);
    e.bezierCurveTo(a * 8, a * 28, a * 22, a * 56, a * 21, a * 57);
    e.closePath();
    St(e, c[il], c[3], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 40);
    e.bezierCurveTo(a * 132, a * 35, a * 132, a * 30, a * 132, a * 29);
    e.bezierCurveTo(a * 145, a * 38, a * 144, a * 43, a * 137, a * 54);
    e.closePath();
    St(e, c[0], c[1], fd);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(mr * a, a * 33);
    e.bezierCurveTo(a * 24, a * 44, a * 215, a * 39, a * 23, a * 44);
    e.bezierCurveTo(_k * a, a * 49, a * 19, a * 49, Zn * a, a * 54);
    e.bezierCurveTo(a * 4, a * 43, a * Ea, a * 35, a * Sk, a * 32);
    e.closePath();
    St(e, c[0], c[Kg], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Jt, a * 52);
    e.bezierCurveTo(a * 24, a * 31, a * 34, a * 25, a * 75, a * 23);
    e.bezierCurveTo(a * 130, a * 24, a * 129, a * 32, a * 134, a * 51);
    e.bezierCurveTo(a * 138, a * 70, a * 126, a * 72, a * 90, a * 73);
    e.bezierCurveTo(a * 18, a * 72, Ws * a, a * 68, a * 18, a * 54);
    e.closePath();
    St(e, c[Rl], c[1], 4);
    return d;
  }
  function Sd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 165;
    d.height = a * 123;
    e.save();
    e.translate(a * 81, a * 65);
    Tt(e, a * -78, a * -54.5, a * 156, a * 109, a * ek);
    e.restore();
    St(e, c[gl]);
    e.save();
    e.translate(a * 81, a * 58);
    Tt(e, a * -78, a * -54.5, a * 156, a * 109, Dh * a);
    e.restore();
    St(e, c[_h], c[2], eh);
    e.save();
    e.translate(a * 81, a * 58);
    Tt(e, a * -69, a * -47, a * 138, a * 93, Cl * a);
    e.restore();
    St(e, c[Lq], c[Nh], 4);
    e.save();
    e.translate(a * 79, a * 54);
    Tt(e, a * -34, a * -40, a * 68, a * 88, a * 13);
    e.restore();
    St(e, lh, c[rh], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 13);
    e.bezierCurveTo(a * 43.5, a * 55, a * 43.5, a * 55, a * 43, a * 101);
    e.closePath();
    St(e, undefined, c[$a], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 13);
    e.bezierCurveTo(a * 115, a * 56, a * 115, a * 56, a * 115, a * 101);
    e.closePath();
    St(e, undefined, c[6], oe);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * oq);
    e.bezierCurveTo(a * 35, a * 56, a * 36, a * 109, a * 35, a * 110);
    e.closePath();
    St(e, undefined, c[7], Jl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 6);
    e.bezierCurveTo(a * 123, a * 56, a * 123, a * 56, a * 123, a * 110);
    e.closePath();
    St(e, undefined, c[7], Qt);
    e.save();
    e.translate(a * 79, a * 113);
    Tt(e, a * -18, -On * a, a * 36, a * 4, Pn * a);
    e.restore();
    St(e, Xl, c[Rg], $j);
    e.save();
    e.translate(a * 75, a * 118);
    Tt(e, -$q * a, a * -2.5, a * Hl, Pg * a, gg * a);
    e.restore();
    St(e, c[8]);
    return d;
  }
  function Qd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 3);
    e.save();
    e.translate(a * 85, a * 95);
    e.rotate(1.4);
    ob(e, 7, a * 60, a * 10);
    e.restore();
    St(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * 85, a * 82);
    for (var f = 0; f < 10; f++) {
      e.rotate(Math.PI / 5);
      e.save();
      e.translate(a * 65, An);
      ob(e, 3, a * 21, a * hr);
      St(e, c[1], c[qi], a * 4);
      e.restore();
    }
    e.save();
    e.translate(a * xq, a * 0);
    e.rotate(_);
    ob(e, Nk, a * 60, a * sd);
    St(e, c[Rn], c[4], a * Qt);
    e.rotate(0.56);
    ob(e, 8, a * 40, a * 10);
    St(e, c[Bh], c[6], a * 4);
    e.rotate(0.28);
    ob(e, 8, a * 28, a * Nk);
    St(e, c[7]);
    e.restore();
    return d;
  }
  function _d(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 170;
    var i = b * 172;
    var a = g / 2;
    var j = i / tk;
    e.width = g;
    e.height = i;
    f.translate(a, j + b * 7);
    f.globalAlpha = c ? 0.5 : 0;
    Vt(f, Aa, qb, b * 60);
    St(f, d[0]);
    f.globalAlpha = wh;
    f.translate(0, -Ts * b);
    f.save();
    for (var h = 0; h < 10; h++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, Gg);
      ob(f, wi, b * 20, b * Zt);
      St(f, d[Co], d[2], $j * b);
      f.restore();
    }
    f.restore();
    Vt(f, fg, An, b * 60);
    St(f, d[3], d[4], b * 4);
    Vt(f, 0, Rl, b * 40);
    St(f, d[5]);
    Vt(f, sb, 0, b * 25);
    St(f, d[xh], d[7], b * 8);
    return e;
  }
  function Fd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 200;
    d.height = a * 200;
    e.save();
    e.translate(a * 112, a * 158);
    Tt(e, a * -86.5, a * -86, a * 150, a * 35, Pn * a);
    e.restore();
    St(e, c[0]);
    e.save();
    e.translate(a * 170, a * 100);
    Tt(e, a * -86.5, a * -86, a * 35, a * 150, a * 20);
    e.restore();
    St(e, c[qb]);
    return d;
  }
  function Rd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 92;
    d.height = a * 108;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 10);
    e.bezierCurveTo(a * 37, a * 2, a * 49, Gk * a, a * 61, En * a);
    e.bezierCurveTo(a * 81, a * 31, a * 78, a * 25, a * 79, a * 37);
    e.bezierCurveTo(a * 76, a * 44, a * 81, a * 56, a * 85, a * 63);
    e.bezierCurveTo(a * 91, a * 71, a * 90, a * 78, a * 83, a * 84);
    e.bezierCurveTo(a * 60, a * 98, a * 67, a * 95, a * 57, a * 102);
    e.bezierCurveTo(a * 47, a * 106, a * 43, a * 106, a * 31, a * 98);
    e.bezierCurveTo(a * 22, a * 91, Tk * a, a * 89, a * wb, a * 84);
    e.bezierCurveTo(a * 1, a * 77, a * 4, a * 73, a * 7, a * 60);
    e.bezierCurveTo(a * Et, a * 50, a * 5, a * 32, a * 15, a * 27);
    e.bezierCurveTo(a * 26, a * wl, a * 26, a * 24, a * 31, a * 10);
    e.closePath();
    St(e, c[Qr], c[1], 4);
    return d;
  }
  function jd(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    if (c == 0) {
      e.width = a * 566;
      e.height = a * 429;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 312.625, a * 39.046875);
      d.bezierCurveTo(a * 456.625, a * 60.046875, a * 521.625, a * 134.046875, a * 528.625, a * 199.046875);
      d.bezierCurveTo(a * 540.625, a * 298.046875, a * 491.625, a * 364.046875, a * 405.625, a * 394.046875);
      d.bezierCurveTo(a * 270.625, a * 429.046875, a * 182.625, a * 395.046875, a * 100.625, a * 344.046875);
      d.bezierCurveTo(a * 15.625, a * 283.046875, a * 20.625, a * 195.046875, a * 33.625, a * 158.046875);
      d.bezierCurveTo(a * 56.625, a * 80.046875, a * 102.625, a * 46.046875, a * 183.625, a * 33.046875);
      d.bezierCurveTo(a * 225.625, a * 25.046875, a * 270.625, a * 30.046875, a * 312.625, a * 39.046875);
      d.closePath();
      St(d, b[qb]);
    } else if (c == 1) {
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 511;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 141.625, a * 49.296875);
      d.bezierCurveTo(a * 225.625, a * 10.296875, a * 320.625, a * 16.296875, a * 390.625, a * 39.296875);
      d.bezierCurveTo(a * 476.625, a * 71.296875, a * 483.625, a * 142.296875, a * 486.625, a * 197.296875);
      d.bezierCurveTo(a * 491.625, a * 289.296875, a * 462.625, a * 317.296875, a * 417.625, a * 351.296875);
      d.bezierCurveTo(a * 367.625, a * 385.296875, a * 313.625, a * 404.296875, a * 218.625, a * 395.296875);
      d.bezierCurveTo(a * 108.625, a * 381.296875, a * 81.625, a * 350.296875, a * 52.625, a * 305.296875);
      d.bezierCurveTo(a * 16.625, a * 244.296875, a * 23.625, a * 171.296875, a * 37.625, a * 145.296875);
      d.bezierCurveTo(a * 65.625, a * 84.296875, a * 97.625, a * 74.296875, a * 141.625, a * 49.296875);
      d.closePath();
      St(d, b[0]);
    } else if (c == 2) {
      var e;
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 504;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 153.625, a * 46.296875);
      d.bezierCurveTo(a * 271.625, a * 17.296875, a * 345.625, a * 35.296875, a * 410.625, a * 71.296875);
      d.bezierCurveTo(a * 473.625, a * 109.296875, a * 478.625, a * 167.296875, a * 473.625, a * 205.296875);
      d.bezierCurveTo(a * 462.625, a * 295.296875, a * 438.625, a * 316.296875, a * 388.625, a * 345.296875);
      d.bezierCurveTo(a * 331.625, a * 374.296875, a * 273.625, a * 392.296875, a * 180.625, a * 387.296875);
      d.bezierCurveTo(a * 111.625, a * 380.296875, a * 86.625, a * 360.296875, a * 51.625, a * 309.296875);
      d.bezierCurveTo(a * 23.625, a * 267.296875, a * 25.625, a * 226.296875, a * 27.625, a * 175.296875);
      d.bezierCurveTo(a * 37.625, a * 99.296875, a * 88.625, a * 57.296875, a * 153.625, a * 46.296875);
      d.closePath();
      St(d, b[tj]);
    }
    return e;
  }
  function Wd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : er;
    e.translate(yj, un * a);
    e.save();
    e.translate(a * 85, a * 88);
    e.rotate(1.4);
    ob(e, 7, a * 60, a * 10);
    e.restore();
    St(e, c[bu]);
    e.globalAlpha = Fb;
    e.translate(a * 85, a * 80);
    for (var f = xq; f < 10; f++) {
      e.rotate(Math.PI / 5);
      e.save();
      e.translate(a * 65, fg);
      ob(e, 3, a * 21, a * 4);
      St(e, c[bs], c[2], a * 4);
      e.restore();
    }
    e.save();
    e.translate(a * 0, a * 0);
    e.rotate(1.4);
    ob(e, 7, a * 60, a * 10);
    St(e, c[Ft], c[aq], Qt * a);
    e.rotate(0.64);
    ob(e, 7, a * 40, a * 10);
    St(e, c[rh], c[6], a * Zt);
    e.rotate(0.12);
    ob(e, 7, a * 23, a * Zg);
    e.restore();
    St(e, c[Bk]);
    return d;
  }
  function Ld(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 69;
    d.height = a * 120;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 30, a * 84);
    Tt(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
    e.restore();
    St(e, c[0]);
    e.save();
    e.translate(a * 30, a * 45);
    Tt(e, a * -9.5, a * -6.5, a * 16, a * 13, a * Ds);
    e.restore();
    St(e, c[0]);
    e.save();
    e.translate(a * 30, a * 17);
    Tt(e, a * -7.5, a * -5.5, a * 12, gu * a, a * 10);
    e.restore();
    St(e, c[0]);
    e.save();
    e.translate(a * 30, a * 31);
    Tt(e, a * -26, a * -14.5, a * 52, a * 29, a * rh);
    e.restore();
    St(e, c[sb]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 36, a * 79.140625);
    Tt(e, a * -6, a * -66.5, Nk * a, a * Ps, a * Wg);
    e.restore();
    St(e, c[1], c[Gl], a * 3);
    e.save();
    e.translate(a * 35, a * 40.140625);
    Tt(e, a * -9.5, a * -6.5, a * 16, a * Ak, a * 10);
    e.restore();
    St(e, c[3], c[4], Cs * a);
    e.save();
    e.translate(a * 35, a * 12.140625);
    Tt(e, a * -7.5, a * -5.5, a * Vu, a * 11, F * a);
    e.restore();
    St(e, c[Ft], c[4], a * Z);
    e.save();
    e.translate(a * 34.5, a * 26.140625);
    Tt(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
    e.restore();
    St(e, c[3], c[Oa], a * 3);
    return d;
  }
  function Gd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.translate(0, a * Mh);
    e.globalAlpha = b ? 0.5 : Ni;
    e.save();
    e.translate(a * 85, a * 95);
    e.rotate(1.4);
    ob(e, Lh, a * 60, a * vq);
    e.restore();
    St(e, c[0]);
    e.globalAlpha = Mg;
    e.translate(a * 85, a * 82);
    for (var f = 0; f < Li; f++) {
      e.rotate(Math.PI / lu);
      e.save();
      e.translate(a * 65, 0);
      ob(e, 3, a * 21, a * Zt);
      St(e, c[1], c[qi], a * fd);
      e.restore();
    }
    e.save();
    e.translate(qu * a, xq * a);
    e.rotate(0.2);
    ob(e, zk, a * 60, a * 10);
    St(e, c[3], c[fd], a * cq);
    e.rotate(-0.32);
    ob(e, 9, a * 38, Ea * a);
    St(e, c[5], c[6], oe * a);
    e.rotate(0.68);
    ob(e, 9, a * 20, a * 8);
    St(e, c[Bk], c[ss], a * jq);
    e.restore();
    return d;
  }
  const Od = Nj;
  function Nd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 48;
    c.height = a * 47;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 7.1875, a * 25.434661865234375);
    d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
    d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
    d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
    d.closePath();
    St(d, b[Gk]);
    return c;
  }
  function qd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 280;
    d.translate(-ba * a, a * -js);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 228.5, a * 331.953125);
    d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
    d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
    d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
    d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
    d.closePath();
    St(d, b[An]);
    return c;
  }
  function Hd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 139;
    d.height = a * 135;
    e.translate(Ah, a * vq);
    e.globalAlpha = b ? 0.5 : _h;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * kk, a * 41, a * oq, a * 33, Vr * a, a * 27);
    e.bezierCurveTo(a * 27, a * 6, a * 28, ms * a, a * 37, Ze * a);
    e.bezierCurveTo(a * 62, Sg * a, a * 64, a * 5, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, ok * a, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * Je, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    St(e, c[gl]);
    e.translate(0, -Vq * a);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(jq * a, a * 41, a * 6, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * 6, a * 28, oq * a, a * 37, a * 6);
    e.bezierCurveTo(a * 62, a * Ft, a * 64, a * Jb, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    St(e, c[ig]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    St(e, c[Fb]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * Je, a * 103);
    e.bezierCurveTo(hn * a, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    St(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 72.5, a * 52, a * 72.5, a * 52, a * 65, a * 66);
    e.bezierCurveTo(a * 47.5, a * 37, a * 47.5, a * 37, a * 30, a * Sq);
    e.bezierCurveTo(a * 48, a * 4, a * 57, a * ge, a * 64, a * 10);
    e.closePath();
    St(e, c[Gl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 65);
    e.bezierCurveTo(a * 125, a * 73, a * 95.5, a * 69, a * 126, a * 73);
    e.bezierCurveTo(a * 119, a * 98, a * 106, a * 104, a * 98, a * 103);
    e.bezierCurveTo(a * 84.5, a * 102, a * 84.5, a * 102, a * 71, a * 101);
    e.bezierCurveTo(a * 64, a * 86, a * 64, a * 86, a * 57, a * 70);
    e.closePath();
    St(e, c[Ht]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 64, a * 65, a * 46, a * 67, a * 65, a * 65);
    e.bezierCurveTo(a * 43.5, a * 94, a * 43.5, a * 94, a * 22, a * 123);
    e.bezierCurveTo(a * 8, a * 103, Wq * a, a * 103, Dg * a, a * 103);
    e.bezierCurveTo(a * _j, a * 98, a * 11, a * 89, a * 26, a * 70);
    e.closePath();
    St(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 69);
    e.bezierCurveTo(a * 65, a * 60, a * 45, a * 65, a * 64, a * 60);
    e.bezierCurveTo(a * 63, a * 65, a * 63, a * 65, a * 62, a * 70);
    e.closePath();
    St(e, c[On]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 68, a * 70, a * 75, a * 53, a * 70, a * 68);
    e.bezierCurveTo(a * 65, a * 67, a * 65, a * 67, a * 60, a * 65);
    e.closePath();
    St(e, c[2]);
    return d;
  }
  function Ud(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 173;
    c.height = a * 178;
    d.globalAlpha = 0.5;
    Vt(d, a * 86.5, a * 98, a * 80);
    St(d, b[0]);
    d.globalAlpha = 1;
    Vt(d, a * 86.5, a * 89, a * 81);
    St(d, b[_h], b[2], cq * a);
    Vt(d, a * 86.5, a * 86, a * 59);
    St(d, b[Rn], b[4], a * mg);
    d.globalAlpha = 0.5;
    Vt(d, a * 86.5, a * 95, a * 34);
    St(d, b[Aa]);
    d.globalAlpha = 1;
    Vt(d, a * 86.5, a * 89, a * 34);
    St(d, b[Sj]);
    return c;
  }
  function Yd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -80, -La);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 200.5, a * 14.953125);
    d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
    d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
    d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
    d.closePath();
    St(d, b[An]);
    return c;
  }
  function Kd(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 450;
    f.height = b * 260;
    var h = Zd(b * bd, true, d);
    g.drawImage(h, b * 0, Md * b);
    if (bs == e) {
      g.translate(b * ok, fg * b);
      Vt(g, b * 113, b * 120, b * 66);
      St(g, undefined, d[eh], pg * b);
      h = ju(b * 0.65, Ms, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
      g.rotate(0.7);
      g.drawImage(h, b * 133, b * -64);
      g.rotate(-0.7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      St(g, undefined, d[Zt], b * fr);
    } else if (e == il) {
      g.translate(Ir * b, b * 0);
      Vt(g, b * 113, b * 120, b * 66);
      St(g, Ao, d[Mu], b * wa);
      g.translate(b * 30, b * 40);
      g.save();
      g.translate(b * 83.5, b * 66.5);
      Tt(g, b * -40.5, b * -29.5, b * 81, b * 59, b * Vg);
      g.restore();
      St(g, "#dff2f7", "#187484", b * 7);
      Vt(g, b * 22, b * 82, b * 12);
      St(g, "#dff2f7", "#187484", b * 7);
      Vt(g, b * 145, b * 82, b * 12);
      St(g, "#dff2f7", "#187484", b * 7);
      h = Hu(b * 0.5, Kh, ["#80500b", "#7c4908"]);
      g.drawImage(h, Gh * b, b * 85);
      h = Hu(b * 0.5, true, ["#80500b", "#7c4908"]);
      g.drawImage(h, b * 50, b * 85);
      h = Hu(b * 0.5, gk, ["#80500b", "#7c4908"]);
      g.drawImage(h, b * 90, b * 85);
      h = Iu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 90, b * 105);
      h = Iu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 90, b * 105);
      h = Iu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 30, b * 125);
      h = Iu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 50, b * 115);
      h = Iu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 30, b * bn);
      h = Iu(wh * b, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 80, b * 120);
      h = Iu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 110, b * 125);
      h = Iu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 120, b * 105);
    } else if (e == 3) {
      g.translate(b * ma, b * 0);
      Vt(g, b * 113, b * 120, b * 66);
      St(g, undefined, d[eh], kg * b);
      g.translate(b * 40, b * 50);
      g.save();
      g.translate(b * 71, b * 69);
      Tt(g, b * -30, b * -42, b * 60, b * 84, b * 10);
      g.restore();
      St(g, undefined, d[ul], Mu * b);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 42, b * 28);
      g.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
      g.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
      g.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
      g.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
      g.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
      g.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
      g.closePath();
      St(g, d[5], d[5], b * eh);
      g.translate(b * -40, b * -50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      St(g, Pa, d[hr], b * Zh);
    } else if (e == Qt) {
      g.scale(1, bd);
      g.translate(b * 70, b * 50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 23, b * U);
      g.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
      St(g, undefined, d[Zg], wg * b);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 59, b * 10);
      g.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
      St(g, Yo, d[Ut], Vl * b);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 7, b * 55);
      g.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
      St(g, Pa, d[5], b * 14);
      g.translate(Hb * b, b * yj);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 123, sg * b);
      g.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, b * 17);
      g.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
      g.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
      St(g, Oq, d[Sj], wg * b);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 72, b * 63);
      g.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
      St(g, undefined, d[lu], b * 14);
      g.translate(iq * b, b * Vq);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 141, b * 8);
      g.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
      g.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
      St(g, Fg, d[5], Ur * b);
      g.translate(b * 10, -Gh * b);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 205, b * 124);
      g.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, b * 14);
      g.bezierCurveTo(b * 239, Ws * b, b * 250, b * 37, b * 249, b * 49);
      g.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
      St(g, Iq, d[5], b * 14);
    }
    return f;
  }
  function Vd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 149;
    c.height = a * 153;
    d.globalAlpha = 0.5;
    Vt(d, a * 74.5, a * 85, a * 66);
    St(d, b[qb]);
    d.globalAlpha = _h;
    Vt(d, a * 75.5, a * 72.5, a * 67);
    St(d, b[Ga], b[2], a * 4);
    Vt(d, a * 75.5, a * 73.5, a * 54);
    St(d, b[Ft]);
    d.globalAlpha = 0.5;
    Vt(d, a * 74.5, a * 80.5, a * 39);
    St(d, b[Dd]);
    d.globalAlpha = 1;
    Vt(d, a * 74.5, a * 74.5, a * 37);
    St(d, b[5]);
    return c;
  }
  function Xd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -200, a * -40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 344, a * 18.40625);
    d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
    d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
    d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
    d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
    d.closePath();
    St(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 335, a * 38.072906494140625);
    d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
    d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
    d.closePath();
    St(d, b[0]);
    return c;
  }
  function Zd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(Hb * a, a * hh);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * rq);
    Tt(e, 0, yj, a * 400, a * 220, a * 30);
    St(e, c[Rl]);
    e.globalAlpha = 1;
    e.translate(-js * a, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * Od, a * 197, a * 4.5, a * 385, a * Dd);
    e.bezierCurveTo(a * 397, a * 4, a * 401, hr * a, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * 4, a * 30.5, a * Jl, a * 30.5, a * 4, a * el);
    e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * tg, Zg * a);
    e.closePath();
    St(e, c[2], c[_h], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 70);
    e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    e.bezierCurveTo(a * 1, a * 106, a * Bh, a * 106, a * Yl, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, $q * a, a * 71);
    e.closePath();
    St(e, c[3], c[1], a * ne);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * hn, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * Mu, a * 156, Jb * a, a * 118);
    e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    St(e, c[jg], c[1], $e * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 183);
    e.bezierCurveTo(a * 1, a * 163, a * yn, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
    e.bezierCurveTo(Rn * a, a * 213, a * 2, a * 213, a * $j, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    St(e, c[hd], c[Ga], a * 12);
    Vt(e, a * 41, a * 30, a * 14.7648230602334);
    St(e, c[3], c[Fb], $g * a);
    Vt(e, a * 369, a * 30, a * 15.556349186104045);
    St(e, c[iu], c[Mg], Qg * a);
    Vt(e, a * 364, a * 190, a * 15.620499351813308);
    St(e, c[3], c[1], zl * a);
    Vt(e, a * 41, a * 186, a * 15.556349186104045);
    St(e, c[Jd], c[Fb], a * 12);
    return d;
  }
  function $d(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 33;
    c.height = a * 35;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 12.75, a * 7.1328125);
    d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
    d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
    d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
    d.closePath();
    St(d, b[0]);
    return c;
  }
  function ec(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, a * 10);
    if (Mg == c) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(gn * a, a * 5);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * cq);
      e.bezierCurveTo(a * 397, aq * a, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * nd, a * 55, a * 4, a * 52, a * 4, a * 43);
      e.bezierCurveTo(a * Mu, a * 30.5, a * 4, a * 30.5, eh * a, a * Dk);
      e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * $g, a * Ag, a * 5);
      e.closePath();
      St(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(_j * a, a * 58, Pg * a, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, Wa * a, a * 108);
      e.bezierCurveTo(a * bs, a * 106, a * Sj, a * 106, a * 5, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      St(e, b[Qn], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(eg * a, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * Sj, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * Ml, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      St(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      St(e, b[3], b[3], a * 32);
      Vt(e, a * 41, a * 30, a * 14.7648230602334);
      St(e, b[3], b[Z], a * 32);
      Vt(e, a * 369, a * 30, a * 15.556349186104045);
      St(e, b[Xu], b[Z], a * 32);
      Vt(e, a * 364, a * 190, a * 15.620499351813308);
      St(e, b[3], b[Ft], a * 32);
      Vt(e, a * 41, a * 186, a * 15.556349186104045);
      St(e, b[3], b[Hn], a * 32);
    } else if (nd == c) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * ol, a * 5);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, ua * a, a * 57);
      e.bezierCurveTo(a * br, a * 55, a * 4, a * 52, a * Jl, a * 43);
      e.bezierCurveTo(fd * a, a * 30.5, a * 4, a * 30.5, a * eh, a * 18);
      e.bezierCurveTo(a * Cq, a * 18.5, a * 16, a * 18.5, a * 28, a * eg);
      e.bezierCurveTo(a * 18.5, a * uh, a * 18.5, a * j, a * 9, a * 5);
      e.closePath();
      St(e, b[Sg], b[rb], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(a * ko, a * 58, a * 5, a * 55, a * A, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * En, a * 108);
      e.bezierCurveTo(a * 1, a * 106, Zg * a, a * 106, a * Ks, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * U, a * 71);
      e.closePath();
      St(e, b[3], b[Ql], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * ge, a * 156, a * 5, a * 118);
      e.bezierCurveTo(oe * a, a * 110, a * 6, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      St(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * $j, a * 183);
      e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * zh, a * 213);
      e.bezierCurveTo(a * Ft, a * 213, a * Ht, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      St(e, b[3], b[Cs], a * 32);
      Vt(e, a * 41, a * 30, a * 14.7648230602334);
      St(e, b[Rn], b[Xu], a * 32);
      Vt(e, a * 369, a * 30, a * 15.556349186104045);
      St(e, b[wi], b[3], a * 32);
      Vt(e, a * 364, a * 190, a * 15.620499351813308);
      St(e, b[Jd], b[3], a * 32);
      Vt(e, a * 41, a * 186, a * 15.556349186104045);
      St(e, b[Ft], b[Mh], a * 32);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * Nr, a * 197, a * 4.5, a * 385, a * Og);
    e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * hr, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
    e.bezierCurveTo(a * Qe, a * 18.5, Ha * a, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * ca, a * 18.5, a * 12, a * 9, a * 5);
    e.closePath();
    St(e, b[1], b[Ih], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Ut, a * 70);
    e.bezierCurveTo(lu * a, a * 58, a * 5, a * 55, a * hs, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    e.bezierCurveTo(a * 1, a * 106, a * Sj, a * 106, Ut * a, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    St(e, b[ta], b[et], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Dl, a * 158);
    e.bezierCurveTo(Nr * a, a * 159, a * Oa, a * 156, Pg * a, a * 118);
    e.bezierCurveTo(a * ge, a * 110, a * 6, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    St(e, b[Mg], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Qt, a * 183);
    e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * Ki, a * 213);
    e.bezierCurveTo(a * wi, a * 213, a * 2, a * 213, Zt * a, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    St(e, b[On], b[tj], a * 12);
    Vt(e, a * 41, a * 30, a * 14.7648230602334);
    St(e, b[2], b[0], a * 12);
    Vt(e, a * 369, a * 30, a * 15.556349186104045);
    St(e, b[fh], b[Gg], a * Vr);
    Vt(e, a * 364, a * 190, a * 15.620499351813308);
    St(e, b[2], b[Gk], a * vo);
    Vt(e, a * 41, a * 186, a * 15.556349186104045);
    St(e, b[2], b[xq], a * 12);
    return d;
  }
  function ic(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 330;
    d.translate(a * -60, -hh * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 7.953125);
    d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
    d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
    d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
    d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
    d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
    d.closePath();
    St(d, b[bu]);
    return c;
  }
  function tc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = yh * a;
    c.height = ea * a;
    d.globalAlpha = 0.5;
    d.fillStyle = b[0];
    d.fillRect(0, Ih, c.width, c.height);
    return c;
  }
  function nc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 345;
    d.height = a * 250;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 58);
    e.bezierCurveTo(a * 100.5, a * 43, a * 100.5, a * 43, a * 96, a * 28);
    e.bezierCurveTo(a * 119.5, a * 33.5, a * 119.5, a * 33.5, a * 143, a * 39);
    e.bezierCurveTo(a * 170, a * 37, a * 177, a * 37, a * 188, a * 40);
    e.bezierCurveTo(a * 213, a * 33.5, a * 213, a * 33.5, a * 238, a * 27);
    e.bezierCurveTo(a * 231, a * 52, a * 234, a * 42.5, a * 230, a * 58);
    e.closePath();
    St(e, c[ig], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 108, a * 51);
    e.bezierCurveTo(a * 91, a * 55, a * 85, a * 44, a * 86, a * 29);
    e.bezierCurveTo(a * 62, a * 50, a * 78, a * 69, a * 92, a * 75);
    e.closePath();
    St(e, c[3], c[4], Fh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 249, a * 27);
    e.bezierCurveTo(a * 273, a * 49, a * 262, a * 68, a * 246, a * 77);
    e.bezierCurveTo(a * 231, a * 59, a * 236, a * 66.5, a * 226, a * 56);
    e.bezierCurveTo(a * 243, a * 53, a * 252, a * 43, a * 249, a * 28);
    e.closePath();
    St(e, c[3], c[4], Kn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 78);
    e.bezierCurveTo(a * 87, a * 59, a * 98, a * 46, a * 127, a * 48);
    e.bezierCurveTo(a * 176, a * 48.5, a * 176, a * 48.5, a * 225, a * 49);
    e.bezierCurveTo(a * 243, a * 49, a * 253, a * 59, a * 253, a * 76);
    e.bezierCurveTo(a * 211, a * 85.5, a * 211, a * 85.5, a * 169, a * 95);
    e.closePath();
    St(e, c[rh], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 105);
    e.bezierCurveTo(a * 56, a * 92, a * 59, a * 86, a * 65, a * 73);
    e.bezierCurveTo(a * 62.5, a * 61.5, a * 62.5, a * 61.5, a * 60, a * 50);
    e.bezierCurveTo(a * 99.5, a * 64.5, a * 99.5, a * 64.5, a * 139, a * 79);
    e.bezierCurveTo(a * 164, a * 77, a * 177, a * 76, a * 203, a * 78);
    e.bezierCurveTo(a * 242, a * 63.5, a * 242, a * 63.5, a * 281, a * 49);
    e.bezierCurveTo(a * 279, a * 60.5, a * 279, a * 60.5, a * 277, a * 72);
    e.bezierCurveTo(a * 286, a * 88, a * 286, a * 96, a * 287, a * 104);
    e.bezierCurveTo(a * 228.5, a * 127, a * 228.5, a * 127, a * 170, a * 150);
    e.closePath();
    St(e, c[1], c[jg], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 48, a * 130);
    e.bezierCurveTo(a * 61, a * 155, a * 63, a * 165, a * 56, a * 171);
    e.bezierCurveTo(a * 48, a * 177, a * 40, a * 171, a * 38, a * 178);
    e.bezierCurveTo(a * 33, a * 180, a * 37, a * 188, a * 47, a * 208);
    e.bezierCurveTo(a * 52, a * 221, a * 55, a * 222, a * 75, a * 229);
    e.bezierCurveTo(a * 91, a * 213, a * 98, a * 212, a * 112, a * 219);
    e.bezierCurveTo(a * 167, a * 225, a * 187, a * 224, a * 222, a * 220);
    e.bezierCurveTo(a * 244, a * 214, a * 247, a * 213, a * 263, a * 229);
    e.bezierCurveTo(a * 295, a * 220, a * 291, a * 215, a * 301, a * 194);
    e.bezierCurveTo(a * 308, a * 178, a * 309, a * 176, a * 302, a * 173);
    e.bezierCurveTo(a * 290, a * 177, a * 289, a * 177, a * 283, a * 169);
    e.bezierCurveTo(a * 279, a * 163, a * 279, a * 161, a * 290, a * 130);
    e.bezierCurveTo(a * 270, a * 127, a * 270, a * 127, a * 250, a * 124);
    e.bezierCurveTo(a * 209, a * 137.5, a * 209, a * 137.5, a * 168, a * 151);
    e.bezierCurveTo(a * 121, a * 135, a * 121, a * 135, a * 74, a * 119);
    e.closePath();
    St(e, c[_h], c[2], $o * a);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    St(e, c[7], c[Ko], a * $l);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    St(e, c[wt], c[Kn], a * 8);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    St(e, undefined, c[Rg], Je * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    St(e, undefined, c[Rs], a * Wq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 66);
    e.bezierCurveTo(a * 57, a * 107, a * 63, a * 96, a * 120, a * 106);
    e.bezierCurveTo(a * 154, a * 112, a * 163, a * 116, a * 174, a * 135);
    e.bezierCurveTo(a * 180, a * 109, a * 191, a * 113, a * 237, a * 103);
    e.bezierCurveTo(a * 276, a * dg, a * 289, a * 94, a * 301, a * 67);
    e.bezierCurveTo(a * 317, a * 112, a * 301, a * 141, a * 274, a * 139);
    e.bezierCurveTo(a * 204, a * 166, a * 197, a * 169, a * 173, a * 183);
    e.bezierCurveTo(a * 170, a * 183, a * 170, a * 183, a * 167, a * 183);
    e.bezierCurveTo(a * 132, a * 160, a * 112, a * 156, a * 73, a * 141);
    e.bezierCurveTo(a * 43, a * 146, a * 27, a * 120, a * 39, a * 66);
    e.closePath();
    St(e, c[Mn], c[Je], a * Hk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 185);
    e.bezierCurveTo(a * 115, a * 200, a * 118, a * 206, a * 124, a * 212);
    e.bezierCurveTo(a * 133, a * 223, a * 132, a * 231, a * 121, a * 230);
    e.bezierCurveTo(a * 108, a * 226, a * 108, a * 215, a * 107, a * 209);
    e.bezierCurveTo(a * 106, a * 201, a * 110, a * 196, a * 114, a * 185);
    e.closePath();
    St(e, c[Mh], c[Nh], k * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226, a * 186);
    e.bezierCurveTo(a * 234, a * 201, a * 238, a * 209, a * 228, a * 225);
    e.bezierCurveTo(a * 223, a * 233, a * 213, a * 233, a * 211, a * 226);
    e.bezierCurveTo(a * 206, a * 219, a * 217, a * 216, a * 221, a * 207);
    e.bezierCurveTo(a * 225, a * 196, a * 225, a * 191, a * 226, a * 186);
    e.closePath();
    St(e, c[Ou], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 172, a * 110);
    e.bezierCurveTo(a * 189, a * 153, a * 192, a * 160, a * 188, a * 175);
    e.bezierCurveTo(a * 183, a * 190, a * 176, a * 197, a * 165, a * 191);
    e.bezierCurveTo(a * 153, a * 181, a * 152, a * 166, a * 157, a * 151);
    e.bezierCurveTo(a * 164.5, a * 131, a * 164.5, a * 131, a * 172, a * 111);
    e.closePath();
    St(e, c[Mh], c[Dd], a * 8);
    return d;
  }
  var oc = bj.console;
  function rc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 260;
    d.globalAlpha = 0.5;
    Vt(d, a * 126.5, a * 134, a * 119);
    St(d, b[0]);
    d.globalAlpha = 1;
    Vt(d, a * 126.5, a * 124, a * 119);
    St(d, b[1], b[2], Dd * a);
    Vt(d, a * 126.5, a * 127, I * a);
    St(d, b[3]);
    d.globalAlpha = 0.5;
    Vt(d, a * 126.5, a * 135, a * 81);
    St(d, b[Fj]);
    d.globalAlpha = _;
    Vt(d, a * 126.5, a * 125, a * 84);
    St(d, b[4], b[Yl], a * 4);
    Vt(d, a * 126.5, a * 125, a * 61);
    St(d, b[6], b[Bk], a * 4);
    d.globalAlpha = 0.5;
    Vt(d, a * 126.5, a * 134, a * 40);
    St(d, b[8]);
    d.globalAlpha = Ga;
    Vt(d, a * 126.5, a * 125, a * 40);
    St(d, b[9]);
    return c;
  }
  function ac(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 320;
    d.translate(a * -60, -ua * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 3.953125);
    d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
    d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
    d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
    d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
    d.closePath();
    St(d, b[Rl]);
    return c;
  }
  oc.info = oc.error = oc.warn = oc.debug = oc.ΔⲆᐃΔᐃⲆⵠᐃⲆ = oc.trace = oc.time = oc.timeEnd = function () {};
  const sc = Lu;
  function hc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 147;
    c.height = a * 172;
    d.globalAlpha = 0.5;
    d.translate(Gk, a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * 15, a * ch, a * 49, U * a, a * 67, jq * a);
    d.bezierCurveTo(a * 121, hd * a, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
    d.closePath();
    St(d, b[Gg]);
    d.translate(Ih, a * -Nk);
    d.globalAlpha = Kg;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * vs, a * 16, a * 49, Oe * a, a * 67, a * Is);
    d.bezierCurveTo(a * 121, a * wi, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(bq * a, a * 127, a * 3, a * 87, a * 8, a * 50);
    d.closePath();
    St(d, b[1], b[2], aq * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 14, a * 57);
    d.bezierCurveTo(a * 2, a * 50, Jb * a, a * 22, a * 24, a * 22);
    d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
    St(d, b[Ls], b[2], a * Jl);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 47);
    d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * ek);
    d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
    St(d, b[1], b[Od], a * 4);
    Vt(d, a * 51, a * 91, a * 9);
    St(d, b[3]);
    Vt(d, a * 95, a * 91, gn * a);
    St(d, b[3]);
    Vt(d, a * 91, a * 89, a * zt);
    St(d, b[ge]);
    Vt(d, a * 47, a * 89, a * 4);
    St(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 54, a * 133);
    d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
    d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
    d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
    d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
    d.closePath();
    St(d, b[Sj]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 65.25, a * 135);
    d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
    d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
    d.closePath();
    St(d, b[$q]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 74, a * 145);
    d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
    d.closePath();
    St(d, Ao, b[U], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 19, a * 58);
    d.bezierCurveTo(eb * a, a * 38, a * Es, a * 33, a * 28, a * 34);
    d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
    d.closePath();
    St(d, b[$a]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * og, a * 51);
    d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
    d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
    d.closePath();
    St(d, b[$q]);
    return c;
  }
  function lc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -20, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 50, a * 105);
    d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
    d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
    d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
    d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
    d.closePath();
    St(d, b[Gt]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 106);
    d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
    d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
    d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
    d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
    d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
    d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
    d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
    d.closePath();
    St(d, b[2], b[Z], a * Zt);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 30, a * 159);
    d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
    d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
    d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
    d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
    d.closePath();
    St(d, b[2]);
    return c;
  }
  function gc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 161;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * J, a * 93);
    d.bezierCurveTo(a * 17, a * 95, Ns * a, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * Oa, a * 76);
    d.bezierCurveTo(Fl * a, a * 75, a * 11, a * 75, a * Ys, a * 75);
    d.bezierCurveTo($h * a, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * pl, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * Jj, a * 76, $q * a);
    d.bezierCurveTo(a * 81, a * Qh, a * 84, ag * a, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, Cg * a, a * 99, a * 8, a * 93);
    d.closePath();
    St(d, b[sb]);
    d.globalAlpha = Ls;
    d.translate(0, -8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * yq, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(tg * a, a * 83, a * 17, a * 93, eh * a, a * 76);
    d.bezierCurveTo(a * Ik, a * 75, a * dh, a * 75, Mt * a, a * 75);
    d.bezierCurveTo($h * a, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * pl, a * 59, pk * a, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * lg, a * 75, gu * a, a * 76, a * Oe);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * Da, a * 93);
    d.closePath();
    St(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 28, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    St(d, b[rb]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    St(d, b[wi]);
    Vt(d, a * 103, a * 110, a * 11);
    St(d, b[Nh]);
    Vt(d, a * 55, a * 111, qn * a);
    St(d, b[4]);
    Vt(d, a * 99, a * 107, a * 5);
    St(d, b[1]);
    Vt(d, a * 51, a * 108, bt * a);
    St(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 121);
    d.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
    d.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
    d.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
    d.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
    d.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
    d.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
    d.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
    d.closePath();
    St(d, b[Sj]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.translate(-zd, Ah);
    d.moveTo(a * 71, a * 162);
    d.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
    d.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
    d.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
    d.closePath();
    St(d, b[wi]);
    d.translate(Nj, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * tg, a * 93);
    d.bezierCurveTo(Vh * a, a * 95, a * Po, a * 95, a * 21, a * 95);
    d.bezierCurveTo(se * a, a * 83, a * go, a * 93, Jl * a, a * 76);
    d.bezierCurveTo(a * 11, a * 75, dh * a, a * 75, a * 18, a * 75);
    d.bezierCurveTo(pg * a, a * 67, a * kg, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * wg, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, rr * a, a * 76, Ze * a);
    d.bezierCurveTo(a * 81, a * Qh, a * 84, a * po, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * dg, a * 16, a * 105, a * ak);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * el, a * 95, a * Lt, a * 99, a * 8, a * 93);
    d.closePath();
    St(d, Mk, b[2], fd * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 25, a * 63);
    d.bezierCurveTo(fn * a, a * 58, a * 17, a * 51, Ch * a, a * 33);
    d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
    d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
    St(d, b[bd], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 91, a * 53);
    d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
    d.bezierCurveTo(a * 137, tq * a, a * 137, a * 16, a * 139, a * 27);
    d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
    St(d, b[ck], b[il], a * eh);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    St(d, b[Sg]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    St(d, b[3]);
    return c;
  }
  function uc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = jk * a;
    c.height = a * 35;
    Tt(d, Gk, 0, f, 35, 7);
    St(d, b[0]);
    return c;
  }
  function bc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 271;
    c.height = a * 366;
    d.globalAlpha = 0.5;
    d.translate(bu, eb * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    St(d, b[Ih]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    St(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    St(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    St(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    St(d, b[Aa]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    St(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    St(d, b[qb]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    St(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    St(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    St(d, b[bu]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    St(d, b[bu]);
    d.globalAlpha = er;
    d.translate(0, a * -Ea);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    St(d, b[Jd], b[Ql], a * ss);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * ea, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    St(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    St(d, b[3], b[3], a * Nk);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * ea, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    St(d, b[Cs], b[3], Kn * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    St(d, b[Jd], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    St(d, b[3], b[3], Kn * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    St(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    St(d, b[3], b[iu], Kn * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    St(d, b[Xu], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    St(d, b[3], b[Jd], a * Rg);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    St(d, b[Mh], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    St(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * Fs, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    St(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * Hq);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    St(d, b[zd]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    St(d, b[1]);
    Vt(d, a * 102, a * 269, a * 11);
    St(d, b[Xu]);
    Vt(d, a * 98, a * 266, a * 5);
    St(d, b[Kl]);
    Vt(d, a * 168, a * 269, a * 11);
    St(d, b[3]);
    Vt(d, a * 164, a * 266, a * _j);
    St(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    St(d, b[br]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 235);
    d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
    d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
    d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
    d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
    d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
    d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
    d.closePath();
    St(d, b[Og]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 132, a * 219);
    d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
    d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
    d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
    d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
    d.closePath();
    St(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 179);
    d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
    d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
    d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
    d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
    d.closePath();
    St(d, b[Fh]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 143);
    d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
    d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
    d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
    d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
    d.closePath();
    St(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 115);
    d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
    d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
    d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
    d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
    d.closePath();
    St(d, b[Rs]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 94);
    d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
    d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
    d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
    d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
    d.closePath();
    St(d, b[Hk]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 279);
    d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
    d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
    d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
    d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
    d.closePath();
    St(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 147, a * 303);
    d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
    d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
    d.closePath();
    St(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 303);
    d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
    d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
    d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
    d.closePath();
    St(d, b[Ko]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 89, a * 280);
    d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
    d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
    d.closePath();
    St(d, b[Da]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 94, a * 290);
    d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
    d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
    d.closePath();
    St(d, b[Rs]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 163, a * 295);
    d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
    d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
    d.closePath();
    St(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 172, a * 286);
    d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
    d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
    d.closePath();
    St(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    St(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    St(d, b[Ji]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    St(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    St(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    St(d, b[vl]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    St(d, b[7]);
    return c;
  }
  const vc = uj;
  function dc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, a * Ni);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * bg);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    Tt(e, a * -sq, a * -16.5, a * 32, a * 33, a * Sl);
    e.restore();
    St(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    St(e, c[nd]);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    Tt(e, a * -15.5, a * -Gs, a * 31, a * 32, a * 7);
    e.restore();
    St(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    St(e, c[2]);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    Tt(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    St(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    St(e, c[2]);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    Tt(e, a * -18, a * -zj, a * 36, a * 36, a * 7);
    e.restore();
    St(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    St(e, c[jb]);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    Tt(e, a * -18, a * -19, a * 36, a * 38, a * qt);
    e.restore();
    St(e, c[ta]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    St(e, c[jb]);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    Tt(e, -qa * a, a * -17.5, a * 40, a * 35, a * wb);
    e.restore();
    St(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    St(e, c[2]);
    e.globalAlpha = 1;
    e.translate(Gg, a * -lt);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    Tt(e, a * -16, a * -16.5, a * 32, a * 33, qt * a);
    e.restore();
    St(e, c[Hn], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    St(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    Tt(e, a * -15.5, a * -16, a * 31, a * 32, lg * a);
    e.restore();
    St(e, c[Rn], c[$j], Zg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    St(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    Tt(e, a * -16.5, a * -17.5, a * 33, a * 35, a * Lh);
    e.restore();
    St(e, c[rb], c[4], a * gs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    St(e, ys, c[fd], a * lu);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    Tt(e, a * -18, a * -Ys, a * 36, a * 36, O * a);
    e.restore();
    St(e, c[3], c[Mu], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    St(e, Gn, c[Og], a * 5);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    Tt(e, -wl * a, a * -19, a * 36, a * 38, a * lg);
    e.restore();
    St(e, c[Z], c[4], a * rh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    St(e, Iq, c[eh], Ks * a);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    Tt(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
    e.restore();
    St(e, c[rb], c[Dd], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    St(e, Yo, c[4], a * 5);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Md, a * 10);
    e.save();
    e.translate(a * 98, a * 99);
    ob(e, Vs, a * 70.28669492273468, a * Gh);
    e.restore();
    St(e, c[il]);
    e.save();
    e.translate(a * 98, a * 99);
    ob(e, $q, a * 56.455940020351264, a * Hb);
    e.restore();
    St(e, c[zd]);
    e.globalAlpha = 1;
    e.translate(0, a * -Wg);
    e.save();
    e.translate(a * 98, a * 99);
    ob(e, 6, a * 70.28669492273468, a * 10);
    e.restore();
    St(e, c[Ij], c[Vs], a * 5);
    e.save();
    e.translate(a * 98, a * 99);
    ob(e, ya, a * 56.455940020351264, In * a);
    e.restore();
    St(e, c[Ia], c[8], a * 7);
    return d;
  }
  function cc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 790;
    e.translate(a * bt, gs * a);
    e.globalAlpha = b ? 0 : xq;
    Vt(e, a * 178.5, a * 172.828125, a * 150);
    St(e, undefined, c[0], a * 65);
    Vt(e, a * 178.5, a * 172.828125, a * 150);
    St(e, undefined, c[Rl], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    Tt(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    St(e, c[yj]);
    e.save();
    e.translate(a * 136, a * 581.828125);
    Tt(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    St(e, c[0]);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    Tt(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    St(e, c[tj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * 5);
    e.moveTo(a * 140, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 176.5, a * 295.328125, a * 213, a * 295.828125);
    e.bezierCurveTo(a * 201.5, a * 325.328125, a * 201.5, a * 325.328125, a * 190, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 161, a * 356.828125);
    e.bezierCurveTo(a * 154.5, a * 328.828125, a * 154.5, a * 328.828125, a * 148, a * 300.828125);
    e.closePath();
    St(e, c[et]);
    e.translate(Ft, -Sj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    St(e, c[bu]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    St(e, c[0], c[0], a * 7);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * 15, a * 35);
    Vt(e, a * 178.5, a * 172.828125, a * 150);
    St(e, kh, c[2], a * 95);
    Vt(e, a * 178.5, a * 172.828125, a * 150);
    St(e, al, c[Fb], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    Tt(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    St(e, c[sc], c[2], a * 20);
    e.save();
    e.translate(a * 136, a * 581.828125);
    Tt(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    St(e, c[1], c[Nj], a * 20);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    Tt(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    St(e, c[Lu], c[2], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    St(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(An, a * rh);
    e.moveTo(a * 123, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 190.5, a * 295.328125, a * 250, a * 295.828125);
    e.bezierCurveTo(a * 231.5, a * 325.328125, a * 231.5, a * 325.328125, a * 220, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 140, a * 356.828125);
    e.bezierCurveTo(a * 123.5, a * 328.828125, a * 123.5, a * 328.828125, a * 123, a * 294.828125);
    e.closePath();
    St(e, c[ck]);
    e.translate(0, a * -ko);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    St(e, c[1]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    St(e, c[1], c[1], Ia * a);
    e.restore();
    return d;
  }
  function mc(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 120;
    var g = b * 140;
    d.width = f;
    d.height = g;
    d.width = b * 130;
    d.height = b * 120;
    Tt(e, Bl * b, Bs * b, b * 110, b * 90, b * 10);
    St(e, c[fg]);
    Tt(e, b * 10, b * 5, b * 110, b * 90, b * 10);
    St(e, c[Kg], c[bq], zt * b);
    var h = nb(-Math.PI / Eg, du(b * 0.5, nh, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(h, b * 12, b * 18);
    h = nb(Math.PI / 4, Ld(b * 0.55, true, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(h, b * 36, b * 16);
    return d;
  }
  function pc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 120;
    d.height = yg * a;
    Tt(e, uj * a, a * Bl, a * 95, a * 80, a * 10);
    St(e, b[2]);
    Tt(e, a * hh, Eg * a, a * 95, a * 80, Wg * a);
    St(e, b[iu], b[Dd], a * 4);
    if (c == 0) {
      var f = Ec(a * 0.75, b, 0);
      e.drawImage(f, a * 22, a * 18);
    } else if (c == sc) {
      f = Ec(a * 0.75, b, sl);
      e.drawImage(f, a * 22, Dk * a);
    }
    return d;
  }
  function Cc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 187;
    d.height = a * 119;
    e.globalAlpha = b ? 0.5 : Gt;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, 3);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * Dl, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    St(e, c[5]);
    e.globalAlpha = _h;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, -3);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * 3, a * 60, a * Vo, a * 72, a * 19, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    St(e, c[0], c[1], aq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151, a * 60);
    e.bezierCurveTo(a * 140, a * 36, a * 137, a * 32, a * 124, a * 29);
    e.bezierCurveTo(a * 98, a * 22, a * 80, a * 24, a * 62, a * 28);
    e.bezierCurveTo(a * 42, a * 35, a * 38, a * 46, a * 34, a * 58);
    e.bezierCurveTo(a * 53, a * 74, a * 76, a * 76, a * 91, a * 78);
    e.closePath();
    St(e, c[0], c[bs], zt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 53);
    e.bezierCurveTo(a * 30, a * 56, a * 29, a * 67, a * 30, a * 68);
    e.bezierCurveTo(a * 94, a * 108, a * 150, a * 76, a * 155, a * 70);
    e.bezierCurveTo(a * 154, a * 60, a * 151, a * 54, a * 149, a * 53);
    e.bezierCurveTo(a * 101, a * 74, a * 66, a * 66, a * 37, a * 53);
    e.closePath();
    St(e, c[2], c[Lq], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 36);
    e.bezierCurveTo(a * 92, a * 25, a * 86, a * 28, a * 82, a * 34);
    e.bezierCurveTo(a * 88, a * 40, a * 93, a * 40, a * 98, a * 36);
    e.closePath();
    St(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 43);
    e.bezierCurveTo(a * 69, a * 46, a * 67, a * 52, a * 69, a * 58);
    St(e, Pl, c[bd], Zt * a);
    Vt(e, a * 58, a * 50, a * 5);
    St(e, c[yn]);
    Vt(e, a * 43, a * 65, a * 5);
    St(e, c[co]);
    Vt(e, a * 58, a * 73, Bh * a);
    St(e, c[4]);
    Vt(e, a * 58, a * 50, a * tk);
    St(e, c[5]);
    Vt(e, a * 43, a * 65, a * qi);
    St(e, c[Yl]);
    Vt(e, a * 58, a * 73, a * 2);
    St(e, c[un]);
    return d;
  }
  function Tc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.5;
    Vt(e, a * 69, a * 64, a * 48.16637831516918);
    St(e, c[_h]);
    e.globalAlpha = 0.7;
    Vt(e, a * 69, a * 64, a * 38.23105625617661);
    St(e, c[fh]);
    e.globalAlpha = 0.7;
    Vt(e, a * 69, a * 64, a * 32.01562118716424);
    St(e, c[2], c[Mh], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 41);
    e.bezierCurveTo(a * 52, a * 41, a * 48, a * 50, a * 45, a * 58);
    e.bezierCurveTo(a * 43, a * 67, a * 45, a * 68, a * 46, a * 72);
    e.bezierCurveTo(a * 52, a * 53, a * 60, a * 48, a * 72, a * 42);
    e.closePath();
    St(e, c[Cs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 62);
    e.bezierCurveTo(a * 95, a * 72, a * 90, a * 81, a * 81, a * 87);
    e.bezierCurveTo(a * 74, a * 91, a * 69, a * 89, a * 64, a * 88);
    e.bezierCurveTo(a * 77, a * 83, a * 84, a * 82, a * 92, a * 62);
    e.closePath();
    St(e, c[Lq]);
    return d;
  }
  function fc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 376;
    c.height = a * 371;
    d.globalAlpha = 0.5;
    d.translate(a * 5, a * ul);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    St(d, b[0]);
    d.globalAlpha = 1;
    d.translate(a * -4, a * -zr);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    St(d, Cr, b[bd], a * 12);
    d.translate(a * -1, a * Gk);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 270.633544921875, a * 88.98580932617188);
    d.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
    d.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
    d.closePath();
    St(d, b[Jl], b[Bh], co * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 275.633544921875, a * 281.9858093261719);
    d.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
    d.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
    d.closePath();
    St(d, b[Mu], b[Pg], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 124.633544921875, a * 291.9858093261719);
    d.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
    d.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
    d.closePath();
    St(d, b[4], b[un], a * Oa);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 113.633544921875, a * 80.98580932617188);
    d.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
    d.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
    d.closePath();
    St(d, b[Oa], b[Ij], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 202.633544921875, a * 20.985809326171875);
    d.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
    d.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
    d.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
    d.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
    d.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
    d.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
    d.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
    d.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
    d.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
    d.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
    d.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
    d.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
    d.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
    d.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
    d.closePath();
    St(d, b[jg], b[3], a * Bh);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 203.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
    d.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
    d.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
    d.closePath();
    St(d, b[wi]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.633544921875, a * 25.985809326171875);
    d.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
    d.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
    d.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
    d.closePath();
    St(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 26.633544921875, a * 96.98580932617188);
    d.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
    d.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
    d.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
    d.closePath();
    St(d, b[Xu]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 351.633544921875, a * 99.98580932617188);
    d.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
    d.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
    d.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
    d.closePath();
    St(d, b[dl]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 350.633544921875, a * 302.9858093261719);
    d.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
    d.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
    d.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
    d.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
    d.closePath();
    St(d, b[Xu]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 95.633544921875, a * 224.98580932617188);
    d.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
    d.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
    d.closePath();
    St(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 253.98580932617188);
    d.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
    d.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
    d.closePath();
    St(d, b[dl]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 251.98580932617188);
    d.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
    d.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
    d.closePath();
    St(d, b[wi]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 316, a * 186.8020782470703);
    d.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
    d.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
    d.closePath();
    St(d, b[_g], b[7], mg * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 340, a * 157.8020782470703);
    d.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
    d.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
    d.closePath();
    St(d, b[6], b[wt], zt * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 349, a * 136.8020782470703);
    d.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
    d.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
    d.closePath();
    St(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 278.75, a * 246.4375);
    d.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
    d.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
    d.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
    d.closePath();
    St(d, b[6], b[wk], Oa * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 310.75, a * 277.4375);
    d.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
    d.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
    d.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
    d.closePath();
    St(d, b[Vs], b[7], a * Jl);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.75, a * 257.4375);
    d.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
    d.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
    d.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
    d.closePath();
    St(d, b[kk], b[Hg], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 289.4375);
    d.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
    d.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
    d.closePath();
    St(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 171.75, a * 256.4375);
    d.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
    d.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
    d.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
    d.closePath();
    St(d, b[ms], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.75, a * 289.9375);
    d.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
    d.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
    d.closePath();
    St(d, b[kk], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.75, a * 314.4375);
    d.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
    d.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
    d.closePath();
    St(d, b[$q], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.75, a * 313.4375);
    d.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
    d.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
    d.closePath();
    St(d, b[$q], b[Ia], a * oe);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 103.75, a * 244.4375);
    d.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
    d.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
    d.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
    d.closePath();
    St(d, b[oq], b[Ph], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 86.75, a * 182.4375);
    d.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
    d.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
    d.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
    d.closePath();
    St(d, b[S], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44.75, a * 152.4375);
    d.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
    d.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
    d.closePath();
    St(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31.75, a * 130.4375);
    d.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
    d.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
    d.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
    d.closePath();
    St(d, b[_g], b[7], a * mg);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 69.75, a * 274.4375);
    d.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
    d.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
    d.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
    d.closePath();
    St(d, b[6], b[7], Qt * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 165.75, a * 95.4375);
    d.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
    d.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
    d.closePath();
    St(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 216.75, a * 94.4375);
    d.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
    d.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
    d.closePath();
    St(d, b[6], b[wt], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 68.4375);
    d.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
    d.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
    d.closePath();
    St(d, b[6], b[wt], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 169.75, a * 71.4375);
    d.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
    d.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
    d.closePath();
    St(d, b[$q], b[Ji], ge * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 193.75, a * 160.4375);
    d.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
    d.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
    d.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
    d.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
    d.closePath();
    St(d, b[Da], b[9], a * Mh);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
    d.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
    d.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
    d.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
    d.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
    d.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
    d.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
    d.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
    d.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
    d.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
    d.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
    d.closePath();
    St(d, b[10]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 173.8125);
    d.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
    d.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
    d.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
    d.closePath();
    St(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
    d.closePath();
    St(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.1999969482422, a * 176.2125015258789);
    d.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
    d.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
    d.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
    d.closePath();
    St(d, b[as]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.1999969482422, a * 187.21249985694885);
    d.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
    d.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
    d.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
    d.closePath();
    St(d, b[rr]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 204.1999969482422, a * 201.8125);
    d.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
    d.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
    d.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
    d.closePath();
    St(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 199.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
    d.closePath();
    St(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.1999969482422, a * 207.01250076293945);
    d.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
    d.closePath();
    St(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.1999969482422, a * 203.21249961853027);
    d.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
    d.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
    d.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
    d.closePath();
    St(d, b[dh]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 183.1999969482422, a * 196.8125);
    d.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
    d.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
    d.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
    d.closePath();
    St(d, b[qh]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
    d.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
    d.closePath();
    St(d, b[11]);
    Vt(d, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
    St(d, b[Ug]);
    Vt(d, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
    St(d, b[13]);
    Vt(d, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
    St(d, b[Bt]);
    Vt(d, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
    St(d, b[13]);
    return c;
  }
  function zc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, Kg * a);
    e.globalAlpha = 0.3;
    Vt(e, a * 98, a * 99, a * Fs);
    St(e, c[0]);
    e.globalAlpha = 0.5;
    Vt(e, a * 98, a * 99, a * 90);
    St(e, c[Gt]);
    return d;
  }
  function yc(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    var e;
    d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    Vt(d, a * 23.5, a * 20.734375, a * 15.132745950421556);
    St(d, undefined, c[2], a * 4);
    Vt(d, a * 23.5, a * 20.734375, a * 18.601075237738275);
    St(d, hl, c[sc], a * co);
    Vt(d, a * 23.5, a * 20.734375, a * 11.40175425099138);
    St(d, undefined, c[sc], a * fd);
    d.save();
    d.translate(a * 23, a * 38.734375);
    d.rotate(gl);
    Tt(d, a * -21.5, -Dn * a, a * 43, a * 38, a * 10);
    d.restore();
    St(d, c[2], c[1], fd * a);
    d.save();
    d.translate(a * 23.5, a * 43.734375);
    d.rotate(0.5235987755982988);
    ob(d, iu, a * 8.06225774829855, a * 0);
    d.restore();
    St(d, c[hd]);
    Vt(d, a * 23.5, a * 35.734375, a * 7.0710678118654755);
    St(d, c[3]);
    return e;
  }
  function wc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : _;
    e.translate(a * -eb, a * sd);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    St(e, c[0]);
    e.globalAlpha = Ni;
    e.translate(iq * a, a * -sd);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    St(e, c[1], c[ta], a * uj);
    return d;
  }
  function Pc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 185;
    d.height = a * 164;
    e.translate(0, qu);
    var f = function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 201;
      d.height = a * 164;
      e.translate(0, Sj * a);
      e.globalAlpha = b ? 0.5 : 1;
      Vt(e, a * 100.5, a * 82, a * 74.92746655359852);
      St(e, c[0], c[xq], $j * a);
      Vt(e, a * 100.5, a * 82, a * 65.9417374971317);
      St(e, c[qb], c[tj], a * 4);
      e.translate(xq, -5);
      e.globalAlpha = ig;
      Vt(e, a * 100.5, a * 82, a * 74.92746655359852);
      St(e, c[1], c[3], a * 4);
      Vt(e, a * 100.5, a * 82, a * 65.9417374971317);
      St(e, c[1], c[2], a * Nh);
      Vt(e, a * 100.5, a * 82, a * 35.9417374971317);
      St(e, c[_h], c[il], a * 20);
      Vt(e, a * 100.5, a * 82, a * 15.9417374971317);
      St(e, c[1], c[2], ya * a);
      return d;
    }(a, b, c);
    e.drawImage(f, a * -Vq, Fj * a);
    f = jc(a, b, c, 0);
    e.drawImage(f, a * -83, a * -40);
    f = jc(a, b, c, Math.PI / 1.4);
    e.drawImage(f, a * -15, a * -88);
    f = jc(a, b, c, Math.PI / -1.4);
    e.drawImage(f, a * 15, a * -8);
    return d;
  }
  function Ac(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -165, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217, a * 103);
    d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
    d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
    d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
    d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
    d.closePath();
    St(d, b[_h]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 231, a * 163);
    d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
    d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
    d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
    d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
    d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
    d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
    d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
    d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
    d.closePath();
    St(d, b[nd], b[Xu], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 234, a * 154);
    d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
    d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
    d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
    d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
    d.closePath();
    St(d, b[br]);
    return c;
  }
  function kc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 46;
    d.height = a * 140;
    e.scale(a * -1, a * _h);
    e.translate(a * -50, a * 40);
    e.translate(a * -20, xq);
    e.globalAlpha = b ? 0.5 : Ni;
    e.translate(a * eb, Gg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    St(e, c[gl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(-Ni * a, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * _, Md);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    St(e, c[0]);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(fg);
    Tt(e, a * -7, a * -4, a * G, $l * a, a * 10);
    e.restore();
    St(e, c[0]);
    e.translate(a * 0, Gg);
    e.globalAlpha = _h;
    e.translate(Li * a, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    St(e, c[3], c[4], Z * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -Lu, Rl);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    St(e, c[1], c[2], Xu * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 1, Md);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    St(e, c[1], c[ta], a * 3);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    Tt(e, -Ji * a, a * -4, a * 14, a * 8, a * vq);
    e.restore();
    St(e, c[Fb], c[2], a * 3);
    return d;
  }
  function xc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 161;
    d.height = a * 184;
    e.translate(yj, a * vq);
    e.globalAlpha = Co;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    St(e, c[Qr]);
    e.translate(0, a * -Bl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    St(e, c[Kg], c[2], a * Ma);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    St(e, c[Ni], c[jg], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104.5, a * 35.609375);
    e.bezierCurveTo(a * 71.5, a * 36.609375, a * 57.5, a * 52.609375, a * 58.5, a * 81.609375);
    e.bezierCurveTo(a * 59.5, a * 103.609375, a * 66.5, a * 107.609375, a * 66.5, a * 116.609375);
    e.bezierCurveTo(a * 67.5, a * 128.609375, a * 65.5, a * 131.609375, a * 63.5, a * 137.609375);
    St(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.5, a * 72.609375);
    e.bezierCurveTo(a * 38.5, a * 80.609375, a * 43.5, a * 81.609375, a * 37.5, a * 89.609375);
    St(e, undefined, c[2], mg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.5, a * 85.609375);
    e.bezierCurveTo(a * 75.5, a * 91.609375, a * 76.5, a * 96.609375, a * 81.5, a * 104.609375);
    St(e, es, c[Od], mg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68.5, a * 122.609375);
    e.bezierCurveTo(a * 79.5, a * 130.609375, a * 74.5, a * 128.609375, a * 80.5, a * 134.609375);
    St(e, c[1], c[2], yn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.5, a * 18.609375);
    e.bezierCurveTo(a * 151.5, a * 28.609375, a * 151.5, a * 32.609375, a * 146.5, a * 40.609375);
    e.bezierCurveTo(a * 137.5, a * 26.609375, a * 138.5, a * 24.609375, a * 142.5, a * 19.609375);
    e.closePath();
    St(e, c[Mh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146.5, a * 61.50892639160156);
    e.bezierCurveTo(a * 157.5, a * 69.50892639160156, a * 150.5, a * 79.50892639160156, a * 145.5, a * 81.50892639160156);
    e.bezierCurveTo(a * 140.5, a * 65.50892639160156, a * 144.5, a * 64.50892639160156, a * 146.5, a * 62.50892639160156);
    e.closePath();
    St(e, c[3]);
    return d;
  }
  function Jc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 105;
    d.height = a * 144;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -Ij, a * 0);
    e.save();
    e.translate(a * 52.5, a * 91.5);
    Tt(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    e.restore();
    St(e, c[0], c[yj], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    Tt(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    St(e, c[Gg], c[tj], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    Tt(e, a * -26.5, a * -nr, a * 53, a * 30, a * Eg);
    e.restore();
    St(e, c[0], c[0], a * zt);
    e.translate(a * Jb, gl * a);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 91.5);
    Tt(e, a * -4.5, a * -39, gn * a, a * 78, Ut * a);
    e.restore();
    St(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    Tt(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    St(e, c[Jd], c[4], a * Nh);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    Tt(e, a * -26.5, -Ws * a, a * 53, a * 30, a * Jb);
    e.restore();
    St(e, c[5], c[Vs], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 60.5);
    e.bezierCurveTo(a * 44, a * 56.5, a * 44, a * 56.5, a * 39, a * 52.5);
    e.bezierCurveTo(a * 39, a * 46.5, a * 39, a * 46.5, a * 39, a * 40.5);
    e.bezierCurveTo(a * 44, a * 44, a * 44, a * 44, a * 49, a * 47.5);
    e.bezierCurveTo(a * 49, a * 54, a * 49, a * 54, a * 49, a * 60.5);
    e.closePath();
    St(e, c[Ts], c[Kl], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 40.5);
    e.bezierCurveTo(a * 66, a * 46.5, a * 66, a * 46.5, a * 66, a * 52.5);
    e.bezierCurveTo(a * 60.5, a * 56.5, a * 60.5, a * 56.5, a * 55, a * 60.5);
    e.bezierCurveTo(a * 56, a * 53, a * 56, a * 53, a * 57, a * 45.5);
    e.bezierCurveTo(a * 61.5, a * 43, a * 61.5, a * 43, a * 66, a * 40.5);
    e.closePath();
    St(e, c[7], c[Kl], a * Cs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 33.5);
    e.bezierCurveTo(a * 55.5, a * 41, a * 55.5, a * 41, a * 59, a * 48.5);
    e.bezierCurveTo(a * 56, a * 58, a * 56, a * 58, a * 53, a * 67.5);
    e.bezierCurveTo(a * 49, a * 58, a * 49, a * 58, a * 45, a * 48.5);
    e.bezierCurveTo(a * 48.5, a * 41, a * 48.5, a * 41, a * 52, a * 33.5);
    e.closePath();
    St(e, c[9], c[8], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 47.5);
    e.bezierCurveTo(a * 54.5, a * 50.5, a * 54.5, a * 50.5, a * 57, a * 53.5);
    e.bezierCurveTo(a * 55, a * 60, a * 55, a * 60, a * 53, a * 66.5);
    e.bezierCurveTo(a * 50.5, a * 61, a * 50.5, a * 61, a * 48, a * 55.5);
    e.bezierCurveTo(a * 50, a * 52, a * 50, a * 52, a * 52, a * 48.5);
    e.closePath();
    St(e, c[11], c[Wg], a * 3);
    return d;
  }
  function Mc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 27.3671875);
    e.bezierCurveTo(a * 128, a * 9.3671875, a * 125, a * 13.3671875, a * 126, a * 21.3671875);
    e.bezierCurveTo(a * 126, a * 33.3671875, a * 119, a * 43.3671875, a * 118, a * 42.3671875);
    e.closePath();
    St(e, c[iu], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 23.3671875);
    e.bezierCurveTo(ro * a, a * 15.3671875, q * a, a * 14.3671875, a * 17, a * 20.3671875);
    e.bezierCurveTo(a * 22, a * 33.3671875, ek * a, a * 27.3671875, a * 24, a * 34.3671875);
    e.closePath();
    St(e, c[3], c[Dd], a * 4);
    e.save();
    e.translate(a * 70.5, a * 34.8671875);
    e.rotate(fg);
    Tt(e, a * -49.5, a * -21.5, a * 99, a * 43, a * 15);
    e.restore();
    St(e, c[0], c[1], Dd * a);
    e.save();
    e.translate(a * 71, a * 40.8671875);
    e.rotate(xq);
    Tt(e, a * -49, a * -12.5, a * 98, a * 25, ua * a);
    e.restore();
    St(e, c[tk], c[1], a * Zt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19.800003051757812, a * 75.95625305175781);
    e.bezierCurveTo(a * 19.300003051757812, a * 82.95625305175781, a * 19.300003051757812, a * 82.95625305175781, a * 18.800003051757812, a * 89.95625305175781);
    e.bezierCurveTo(a * 38.80000305175781, a * 115.95625305175781, a * 37.80000305175781, a * 104.95625305175781, a * 31.800003051757812, a * 91.95625305175781);
    e.closePath();
    St(e, c[fh], c[Gt], aq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119.80000305175781, a * 75.95625305175781);
    e.bezierCurveTo(a * 120.80000305175781, a * 82.95625305175781, a * 120.80000305175781, a * 82.95625305175781, a * 121.80000305175781, a * 89.95625305175781);
    e.bezierCurveTo(a * 101.80000305175781, a * 111.95625305175781, a * 99.80000305175781, a * 111.95625305175781, a * 112.80000305175781, a * 81.95625305175781);
    e.closePath();
    St(e, c[Od], c[bd], a * co);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.800003051757812, a * 49.15625);
    e.bezierCurveTo(a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 79.15625);
    e.bezierCurveTo(a * 23.300003051757812, a * 85.15625, a * 23.300003051757812, a * 85.15625, a * 28.800003051757812, a * 91.15625);
    e.bezierCurveTo(a * 36.80000305175781, a * 96.15625, a * 32.80000305175781, a * 91.15625, a * 28.800003051757812, a * 77.15625);
    e.bezierCurveTo(a * 33.80000305175781, a * 65.15625, a * 33.80000305175781, a * 65.15625, a * 38.80000305175781, a * 53.15625);
    e.closePath();
    St(e, c[3], c[oe], zt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.80000305175781, a * 53.95625305175781);
    e.bezierCurveTo(a * 121.80000305175781, a * 77.95625305175781, a * 121.80000305175781, a * 74.95625305175781, a * 121.80000305175781, a * 78.95625305175781);
    e.bezierCurveTo(a * 115.80000305175781, a * 84.95625305175781, a * 115.80000305175781, a * 84.95625305175781, a * 109.80000305175781, a * 90.95625305175781);
    e.bezierCurveTo(a * 102.80000305175781, a * 93.95625305175781, a * 105.80000305175781, a * 86.95625305175781, a * 110.80000305175781, a * 76.95625305175781);
    e.bezierCurveTo(a * 107.30000305175781, a * 65.45625305175781, a * 103.80000305175781, a * 53.95625305175781, a * 103.80000305175781, a * 53.95625305175781);
    e.closePath();
    St(e, c[Ft], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 56.3671875);
    e.bezierCurveTo(a * 70, a * 56.8671875, a * 70, a * 56.8671875, a * 122, a * 57.3671875);
    e.bezierCurveTo(a * 137, a * 20.3671875, a * 137, a * 16.3671875, a * 126, a * 22.3671875);
    e.bezierCurveTo(a * 115.5, a * 34.3671875, a * 115.5, a * 34.3671875, a * 105, a * 46.3671875);
    e.bezierCurveTo(a * 70.5, a * 46.3671875, a * 70.5, a * 46.3671875, a * 36, a * 46.3671875);
    e.bezierCurveTo($j * a, a * 14.3671875, a * Ia, a * 18.3671875, a * Kn, a * 27.3671875);
    e.bezierCurveTo(a * 12.5, a * 41.8671875, a * 12.5, a * 41.8671875, a * 17, a * 56.3671875);
    e.closePath();
    St(e, c[3], c[4], Jl * a);
    e.save();
    e.translate(a * 68.30000305175781, a * 41.45625305175781);
    e.rotate(0.76);
    Tt(e, a * -20.5, a * -20.5, a * 41, a * 41, a * uj);
    e.restore();
    St(e, undefined, c[5], a * Oa);
    e.save();
    e.translate(a * 68.80000305175781, a * 44.45625305175781);
    e.rotate(0.76);
    Tt(e, a * -21, a * -20.5, a * 42, a * 41, a * 10);
    e.restore();
    St(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 69.80000305175781, a * 44.556243896484375);
    e.rotate(0.76);
    Tt(e, a * -10, -iq * a, a * jk, a * 20, a * 5);
    e.restore();
    St(e, c[6], c[7], a * Qt);
    return d;
  }
  function Bc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 88;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.52);
    ob(e, Nl, a * 43, iq * a);
    e.restore();
    St(e, c[0], c[wh], a * 3);
    return d;
  }
  function Dc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 117;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 90);
    e.bezierCurveTo(a * 20, a * 99.5, mr * a, a * 99.5, a * 36, a * 109);
    e.bezierCurveTo(a * 67, a * 92, a * 67, a * 92, a * 98, a * 75);
    e.bezierCurveTo(a * 91, a * 27, a * 91, a * 27, a * 91, a * 28);
    e.bezierCurveTo(a * 72.5, a * 16, a * 72.5, a * 16, a * 54, oe * a);
    e.bezierCurveTo(a * 33.5, a * 10, a * 33.5, a * 10, a * 13, a * 16);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * ms, a * 76);
    e.bezierCurveTo(a * 13.5, a * 51.5, a * 13.5, a * 51.5, a * 21, a * 27);
    e.bezierCurveTo(a * 37.5, a * jr, a * 37.5, go * a, a * 54, lg * a);
    e.bezierCurveTo(a * 33.5, a * 12.5, a * 33.5, a * 12.5, a * 13, a * Es);
    e.closePath();
    St(e, c[ck]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 62);
    e.bezierCurveTo(a * 28.5, a * 53, a * 28.5, a * 53, a * 33, a * 44);
    e.bezierCurveTo(a * 41.5, a * 41, a * 41.5, a * 41, a * 50, a * 38);
    e.bezierCurveTo(a * 52.5, a * 35, a * 52.5, a * 35, a * 55, a * 32);
    e.bezierCurveTo(a * 52, a * 30, a * 52, a * 30, a * 49, a * 28);
    e.bezierCurveTo(a * 38, a * 31.5, a * 38, a * 31.5, a * 27, a * 35);
    e.closePath();
    St(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66, a * 90.5, a * 66, a * 90.5, a * 96, a * 74);
    e.bezierCurveTo(a * 93, a * 52.5, a * 93, a * 52.5, a * 90, a * 31);
    e.bezierCurveTo(a * 87, a * 48, a * 87, a * 48, a * 84, a * 65);
    e.closePath();
    St(e, c[qi]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(Ni * a, a * 89);
    e.bezierCurveTo(a * 18, a * I, a * 34, a * 110, a * 35, a * 111);
    e.bezierCurveTo(a * 67, a * 93, a * 67, a * 93, a * 99, a * 75);
    e.bezierCurveTo(a * 100, a * 78.5, a * bn, a * 78.5, a * 101, a * 82);
    e.bezierCurveTo(a * 68, a * 99, a * 68, a * 99, a * 35, a * 116);
    e.bezierCurveTo(a * 18, a * 106.5, a * aa, a * 106.5, a * 1, a * 97);
    e.closePath();
    St(e, c[Ql]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66.5, a * 91.5, a * 66.5, a * 91.5, a * 97, a * 76);
    e.bezierCurveTo(a * 94.5, a * 52, a * 94.5, a * 52, a * 92, a * 28);
    e.bezierCurveTo(a * 73, a * 15.5, a * 73, a * 15.5, a * 54, a * 3);
    e.bezierCurveTo(a * 33, a * 9.5, a * 33, a * 9.5, a * uh, sg * a);
    e.bezierCurveTo(a * yl, a * 53, a * 8, a * 53, a * 4, a * 90);
    e.bezierCurveTo(a * 18.5, a * 99, a * 18.5, a * 99, a * 33, a * 108);
    e.closePath();
    St(e, undefined, c[yn], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 71);
    e.bezierCurveTo(a * 30, a * 76.5, a * 30, a * 76.5, a * 38, a * 82);
    e.bezierCurveTo(a * 53, a * 72, a * 53, a * 72, a * 68, a * 62);
    e.bezierCurveTo(a * 68, a * 52, a * 68, a * 52, a * 68, a * 42);
    e.bezierCurveTo(a * 59.5, a * 35.5, a * 59.5, a * 35.5, a * 51, a * 29);
    e.bezierCurveTo(a * 39.5, a * 32, a * 39.5, a * 32, a * 28, a * 35);
    e.bezierCurveTo(a * 25, a * 52, a * 25, a * 52, a * 22, a * 69);
    e.closePath();
    St(e, E, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * lu, a * 89);
    e.bezierCurveTo(a * jk, a * 73, a * 12.5, a * 80.5, a * 20, a * 72);
    e.closePath();
    St(e, ys, c[Dd], a * oq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 102);
    e.bezierCurveTo(a * 36, a * 92.5, a * 36, a * 92.5, a * 37, a * 83);
    e.closePath();
    St(e, ys, c[Mu], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 62);
    e.bezierCurveTo(a * 81, a * 67.5, a * 81, a * 67.5, a * 94, a * 73);
    e.closePath();
    St(e, Cr, c[4], jq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70, a * 41);
    e.bezierCurveTo(a * 80, a * 35.5, a * 80, a * 35.5, a * 90, a * 30);
    e.closePath();
    St(e, Cr, c[4], S * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 33);
    e.bezierCurveTo(a * 21.5, a * 26.5, a * 21.5, a * 26.5, a * Zn, jk * a);
    e.closePath();
    St(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 28);
    e.bezierCurveTo(a * 53, a * 17, a * 53, a * 17, a * 55, a * 6);
    e.closePath();
    St(e, undefined, c[Jl], a * 6);
    return d;
  }
  function Ec(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 95;
    d.height = a * 85;
    if (Rl == c) {
      e.translate(a * Hg, a * 15);
      e.scale(0.9, 0.9);
      e.save();
      Tt(e, a * 0, a * bt, a * 90, a * 60, 10);
      St(e, b[0]);
      e.globalCompositeOperation = "destination-out";
      Vt(e, a * 25, a * 40, iq * a);
      e.fill();
      Vt(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
      e.save();
      Tt(e, bu, 0, a * 90, a * 60, a * 10);
      St(e, b[1]);
      e.globalCompositeOperation = "destination-out";
      Vt(e, a * 25, a * 40, Li * a);
      e.fill();
      Vt(e, a * 65, a * 40, a * In);
      e.fill();
      e.restore();
    } else if (c == 1) {
      e.scale(0.8, 0.8);
      e.translate(a * 15, a * 33);
      e.save();
      e.scale(0.56, 0.56);
      e.translate(a * -39, a * -60);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 32.5, a * 50.642852783203125);
      e.bezierCurveTo(a * 83, a * 69.64285278320312, a * 83, a * 69.64285278320312, a * 133.5, a * 88.64285278320312);
      e.bezierCurveTo(a * 93, a * 92.64285278320312, a * 93, a * 92.64285278320312, a * 52.5, a * 96.64285278320312);
      e.bezierCurveTo(a * 30.5, a * 100.64285278320312, a * 36.5, a * 94.64285278320312, a * 32.5, a * 84.64285278320312);
      e.bezierCurveTo(a * 21.5, a * 45.642852783203125, a * 24.5, a * 48.642852783203125, a * 31.5, a * 50.642852783203125);
      e.closePath();
      St(e, b[_h]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 116.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 160.5, a * 67.14285278320312, a * 160.5, a * 67.14285278320312, a * 204.5, a * 48.642852783203125);
      e.bezierCurveTo(a * 220.5, a * 42.642852783203125, a * 208.5, a * 68.64285278320312, a * 205.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 202.5, a * 98.64285278320312, a * 199.5, a * 98.64285278320312, a * 188.5, a * 100.64285278320312);
      e.closePath();
      St(e, b[1]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 166.5, a * 68.64285278320312);
      e.bezierCurveTo(a * 147.5, a * 72.64285278320312, a * 145.5, a * 73.64285278320312, a * 142.5, a * 62.642852783203125);
      e.bezierCurveTo(a * 121.5, a * 12.642852783203125, a * 122.5, a * 5.642852783203125, a * 117.5, a * 15.642852783203125);
      e.bezierCurveTo(a * 105.5, a * 40.642852783203125, a * 105.5, a * 40.642852783203125, a * 93.5, a * 65.64285278320312);
      e.bezierCurveTo(a * 89.5, a * 74.64285278320312, a * 84.5, a * 72.64285278320312, a * 73.5, a * 74.64285278320312);
      e.bezierCurveTo(a * 98, a * 87.64285278320312, a * 98, a * 87.64285278320312, a * 122.5, a * 100.64285278320312);
      e.closePath();
      St(e, b[Ga]);
      e.restore();
      e.save();
      Tt(e, gl, Th * a, a * 90, a * 50, Wg * a);
      St(e, b[sb]);
      Tt(e, 0, a * vc, a * 90, a * 50, a * Wg);
      St(e, b[1]);
      e.globalCompositeOperation = "destination-out";
      Vt(e, a * 25, a * 40, a * 10);
      e.fill();
      Vt(e, a * 65, a * 40, a * eb);
      e.fill();
      e.restore();
    }
    return d;
  }
  function Ic(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.save();
    e.translate(a * 70.16665649414062, a * 38.20831298828125);
    Tt(e, a * -58.5, a * -27.5, a * 117, a * 55, a * Pn);
    e.restore();
    St(e, c[Fj], c[1], eh * a);
    e.save();
    e.translate(a * 70, a * 42.70831298828125);
    Tt(e, a * -61, -La * a, a * 122, a * 40, a * 20);
    e.restore();
    St(e, c[jg], c[1], Qt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 70.375);
    e.bezierCurveTo(a * 115, a * 99.375, a * 119, a * 85.375, a * 115, a * 100.375);
    e.bezierCurveTo(a * 112, a * 116.375, a * 117, a * 109.375, a * 131, a * 100.375);
    e.bezierCurveTo(a * 131, a * 83.375, a * 131, a * 83.375, a * 131, a * 66.375);
    e.closePath();
    St(e, c[jg], c[Mg], a * co);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 11, a * 68.375);
    e.bezierCurveTo(a * 11.166656494140625, a * 84.375, Ba * a, a * 99.375, a * 10, a * 100.375);
    e.bezierCurveTo(a * 35, a * 113.375, a * 27, a * 110.375, a * 25, a * 95.375);
    e.bezierCurveTo(a * 16, a * 68.375, ro * a, a * 69.375, a * 17, a * 68.375);
    e.closePath();
    St(e, c[2], c[bs], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 32.375);
    e.bezierCurveTo(a * 43, a * 8.375, a * 45, a * 7.375, a * 56, a * 6.375);
    e.bezierCurveTo(a * 105, a * 4.375, a * 102, a * 6.375, a * 97, a * 32.375);
    e.bezierCurveTo(a * 138, a * 43.375, a * 133, a * 45.375, a * 133, a * 58.375);
    e.bezierCurveTo(a * 133, a * 85.375, a * 125, a * 74.375, a * 111, a * 70.375);
    e.bezierCurveTo(a * 70, a * 69.875, a * 29, a * 69.375, a * 29, a * 69.375);
    e.bezierCurveTo(a * 7, a * 84.375, a * 7, a * 70.375, a * Ts, a * 59.375);
    e.bezierCurveTo(a * 6, a * 28.375, a * 32, a * 39.375, a * 44, a * 32.375);
    e.closePath();
    St(e, c[2], c[wh], a * 4);
    Vt(e, a * 71, a * 44.375, a * 16.55294535724685);
    St(e, c[qo], c[1], a * 4);
    Vt(e, a * 71, a * 43.70831298828125, a * 8.94427190999916);
    St(e, c[tk], c[1], a * co);
    return d;
  }
  function Sc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 89;
    d.height = a * 89;
    e.save();
    e.translate(a * 44.5, a * 44.5);
    ob(e, 6, a * 40, a * Ea);
    e.restore();
    St(e, c[et], c[Gt], _j * a);
    e.save();
    e.translate(a * 44.5, a * 44.5);
    ob(e, 6, a * 25.11521001172521, a * 10);
    e.restore();
    St(e, c[2], c[Ft], a * Ut);
    return d;
  }
  function Qc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 145;
    d.height = a * 120;
    e.beginPath();
    e.scale(0.6, 0.6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(Mr * a, -Rg * a);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * Ps, a * 93, pn * a, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    St(e, c[eh], c[Sj], a * 4);
    e.beginPath();
    e.scale(1.1, 1.1);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(-zo * a, a * 4);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, ma * a, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    St(e, c[oe], c[Yl], yn * a);
    e.scale(1.1, 1.1);
    e.translate(-se * a, a * Zt);
    e.save();
    e.translate(Re * a, a * 73.06874084472656);
    e.rotate(gl);
    Tt(e, a * -61, a * -38.5, a * 122, a * 40, a * js);
    e.restore();
    St(e, c[1], c[2], a * 4);
    e.save();
    e.translate(a * 100, a * 71.36874389648438);
    e.rotate(0);
    Tt(e, a * -60.5, a * -18, a * 121, a * 30, a * 20);
    e.restore();
    St(e, c[wi], c[qo], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 144, a * 80);
    e.bezierCurveTo(a * 152, ma * a, a * 152, a * 101, a * 153, a * 102);
    e.bezierCurveTo(a * 159, a * Ir, a * 159, a * ma, a * 160, Oh * a);
    e.bezierCurveTo(a * 161, a * 84, a * 161, a * 84, a * 162, a * 68);
    e.closePath();
    St(e, c[Od]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 75);
    e.bezierCurveTo(a * 48, a * 101, a * 53, a * 89, a * 48, a * 102);
    e.bezierCurveTo(a * 44, a * 100, a * 44, a * 100, a * 39, a * 97);
    e.bezierCurveTo(a * 39, a * 83, a * 39, a * 83, a * 39, a * 69);
    e.closePath();
    St(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * cl, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, cl * a, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    St(e, c[4], c[Yl], a * aq);
    e.translate(tj, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 116.07290649414062);
    e.bezierCurveTo(a * 159.5, a * 99.07290649414062, a * 159.5, a * 98.07290649414062, a * 159.5, a * 98.07290649414062);
    e.bezierCurveTo(a * 155.5, a * 116.07290649414062, a * 159.5, a * 116.07290649414062, a * 159.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 147.5, a * 130.07290649414062, a * 136.5, a * 132.07290649414062, a * 115.5, a * 138.07290649414062);
    e.closePath();
    St(e, c[Ou], c[2], a * Jl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.5, a * 96.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 114.07290649414062, a * 62.5, a * 105.57290649414062, a * 85.5, a * 115.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 125.57290649414062, a * 85.5, a * 125.57290649414062, a * 85.5, a * 136.07290649414062);
    e.bezierCurveTo(a * 51.5, a * 129.07290649414062, a * 51.5, a * 125.07290649414062, a * 41.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 44.5, a * 106.07290649414062, a * 42.5, a * 103.07290649414062, a * 40.5, a * 96.07290649414062);
    e.closePath();
    St(e, c[Z], c[ta], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    St(e, c[iu], c[jg], a * hr);
    e.scale(0.5, 0.5);
    e.translate(Oh * a, a * 71);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    St(e, c[$a], c[2], a * 4);
    return d;
  }
  function _c(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 106;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * Rg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    St(e, c[Gg]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    St(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38, a * 46);
    e.bezierCurveTo(a * 52, a * 37, a * 69, a * 36, a * 85, a * 36);
    e.bezierCurveTo(a * 118, a * 38, a * 129, a * 42, a * 137, a * 48);
    e.bezierCurveTo(a * 135, a * 45, a * 135, a * 45, a * 133, a * 42);
    e.bezierCurveTo(a * 124, a * 32, a * 116, a * 28, a * 88, a * 25);
    e.bezierCurveTo(a * 47, a * 28, a * 40, a * 32, a * 36, a * 44);
    e.closePath();
    St(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, Ps * a, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    St(e, E, c[2], a * Og);
    e.translate(0, a * -Xu);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    St(e, c[10], c[Li], a * 4);
    e.translate(An, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    St(e, c[Mh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * fq);
    e.bezierCurveTo(_b * a, a * 34, a * ae, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    St(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * Ig);
    e.bezierCurveTo(a * 24, a * 35, a * 35, a * 42, a * 42, a * 44);
    e.bezierCurveTo(a * 43, a * 51, a * 43, a * 48, a * 43, a * 56);
    e.bezierCurveTo(a * 25, a * 47, a * 17, a * 36, a * 23, jk * a);
    e.closePath();
    St(e, c[kk]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * Es);
    e.bezierCurveTo(a * 159, a * 44, a * 139, a * 52, a * 130, a * 55);
    e.bezierCurveTo(a * 129, a * 48, a * 129, a * 46, a * 131, a * 43);
    e.bezierCurveTo(a * 144, a * 37, a * 148, a * 35, a * 147, Es * a);
    e.closePath();
    St(e, c[_g]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * ji);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    St(e, undefined, c[yn], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(Ts * a, a * 34, Xj * a, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    St(e, undefined, c[oe], a * 4);
    e.save();
    e.translate(a * 87, a * 34.5);
    e.rotate(0);
    Tt(e, a * -8, a * -10.5, Cq * a, a * 21, a * 10);
    e.restore();
    St(e, c[7], c[Od], a * 4);
    e.save();
    e.translate(a * 87, a * 57);
    e.rotate(gl);
    Tt(e, a * -8, a * -23, a * 16, a * 46, a * 10);
    e.restore();
    St(e, c[8], c[tk], a * Dd);
    Vt(e, a * 87, a * 39, a * 4.123105625617661);
    St(e, c[gn], c[2], a * eh);
    Vt(e, a * 87, a * 60, a * 4.242640687119285);
    St(e, c[9], c[Gl], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    St(e, c[8], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 13, a * 77, a * pa, a * 74, a * 27, a * 80);
    e.closePath();
    St(e, c[9], c[br], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 70);
    e.bezierCurveTo(a * 149.5, a * 72, a * 149.5, a * 72, a * 154, a * 74);
    e.bezierCurveTo(a * 150, a * 77, a * 150, a * 77, a * 146, a * 80);
    e.closePath();
    St(e, c[9], c[2], Mu * a);
    Vt(e, a * 50, a * 80, a * 5);
    St(e, c[9], c[2], a * 4);
    Vt(e, a * 86.01141357421875, a * 81.76705932617188, a * un);
    St(e, c[9], c[bq], a * 4);
    Vt(e, a * 119.01141357421875, a * 80.13069152832031, a * Ks);
    St(e, c[9], c[fh], a * 4);
    return d;
  }
  function Fc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 180;
    d.height = a * 120;
    e.translate(a * -65, a * -35);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, F * a);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    Tt(e, a * -67, a * -16.5, a * 134, a * 33, gs * a);
    e.restore();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    St(e, c[Qr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    St(e, c[Rl]);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    Tt(e, a * -73, a * -20.5, a * 146, a * 41, ko * a);
    e.restore();
    St(e, c[Ih]);
    e.globalAlpha = 1;
    e.translate(gl, a * -10);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    Tt(e, a * -67, a * -16.5, a * 134, a * 33, Zg * a);
    e.restore();
    St(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    St(e, c[1], c[qo], Mu * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    St(e, c[1], c[zd], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    St(e, c[Mg], c[2], co * a);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    Tt(e, a * -73, a * -20.5, a * 146, a * 41, zr * a);
    e.restore();
    St(e, c[Gt], c[Ht], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.5, a * 73.34375);
    e.bezierCurveTo(a * 93.5, a * 70.34375, a * 105.5, a * 70.34375, a * 124.5, a * 72.34375);
    e.bezierCurveTo(a * 132.5, a * 78.34375, a * 162.5, a * 80.34375, a * 176.5, a * 76.34375);
    e.bezierCurveTo(a * 194.5, a * 69.34375, a * 192.5, a * 68.34375, a * 199.5, a * 63.34375);
    e.bezierCurveTo(a * 204.5, a * 63.34375, a * 204.5, a * 63.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 153.5, a * 82.34375, a * 157.5, a * 85.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 194.5, a * 88.34375, a * 162.5, a * 87.34375, a * 149.5, a * 88.34375);
    e.bezierCurveTo(a * 129.5, a * 81.34375, a * 103.5, a * 75.34375, a * 83.5, a * 82.34375);
    e.closePath();
    St(e, c[Lq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137.5, a * 65.34375);
    e.bezierCurveTo(a * 150.5, a * 76.34375, a * 170.5, a * 71.34375, a * 174.5, a * 65.34375);
    e.closePath();
    St(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 85.34375);
    e.bezierCurveTo(a * 211.5, a * 79.34375, a * 191.5, a * 88.34375, a * 181.5, a * 96.34375);
    e.bezierCurveTo(a * 201.5, a * 96.34375, a * 201.5, a * 96.34375, a * 221.5, a * 96.34375);
    e.closePath();
    St(e, c[hd]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 89.34375);
    e.bezierCurveTo(a * 102.5, a * 87.34375, a * 112.5, a * 88.34375, a * 119.5, a * 97.34375);
    e.bezierCurveTo(a * 102, a * 98.34375, a * 102, a * 98.34375, a * 84.5, a * 99.34375);
    e.closePath();
    St(e, c[Mh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 208.5, a * 104.34375);
    e.bezierCurveTo(a * 208.5, a * 110.34375, a * 208.5, a * 110.34375, a * 208.5, a * 116.34375);
    e.bezierCurveTo(a * 211.5, a * 110.34375, a * 211.5, a * 110.34375, a * 214.5, a * 104.34375);
    e.closePath();
    St(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 117.34375);
    e.bezierCurveTo(a * 92, a * 118.84375, a * 92, a * 118.84375, a * 96.5, a * 120.34375);
    e.bezierCurveTo(a * 93, a * 123.84375, a * 93, a * 123.84375, a * 89.5, a * 127.34375);
    e.closePath();
    St(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.5, a * 51.34375);
    e.bezierCurveTo(a * 122.5, a * 54.34375, a * 122.5, a * 54.34375, a * 137.5, a * 57.34375);
    e.bezierCurveTo(a * 118, a * 57.34375, a * 118, a * 57.34375, a * 98.5, a * 57.34375);
    e.bezierCurveTo(a * 94.5, a * 54.84375, a * 94.5, a * 54.84375, a * 90.5, a * 52.34375);
    e.closePath();
    St(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 170.5, a * 52.34375);
    e.bezierCurveTo(a * 179.5, a * 51.84375, a * 179.5, a * 51.84375, a * 188.5, a * 51.34375);
    e.bezierCurveTo(a * 187.5, a * 53.84375, a * 187.5, a * 53.84375, a * 186.5, a * 56.34375);
    e.bezierCurveTo(a * 177, a * 56.34375, a * 177, a * 56.34375, a * 167.5, a * 56.34375);
    e.closePath();
    St(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 69.34375);
    e.bezierCurveTo(a * 86.5, a * 70.34375, a * 86.5, a * 70.34375, a * 92.5, a * 71.34375);
    e.bezierCurveTo(a * 86, a * 73.34375, a * 86, a * 73.34375, a * 79.5, a * 75.34375);
    e.closePath();
    St(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222.5, a * 75.34375);
    e.bezierCurveTo(a * 214.5, a * 76.34375, a * 214.5, a * 76.34375, a * 206.5, a * 77.34375);
    e.bezierCurveTo(a * 216.5, a * 79.34375, a * 216.5, a * 79.34375, a * 226.5, a * 81.34375);
    e.closePath();
    St(e, c[X]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 100.34375);
    e.bezierCurveTo(a * 128, a * 97.34375, a * 128, a * 97.34375, a * 139.5, a * 94.34375);
    e.bezierCurveTo(a * 140, a * 96.84375, a * 140, a * 96.84375, a * 140.5, a * 99.34375);
    e.closePath();
    St(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112.5, a * 48.34375);
    e.bezierCurveTo(a * 115.5, a * 50.84375, a * 115.5, a * 50.84375, a * 118.5, a * 53.34375);
    e.bezierCurveTo(a * 131, a * 50.84375, a * 131, a * 50.84375, a * 143.5, a * 48.34375);
    e.closePath();
    St(e, c[zd]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216.5, a * 109.34375);
    e.bezierCurveTo(a * 213, a * 114.84375, a * 213, a * 114.84375, a * 209.5, a * 120.34375);
    e.bezierCurveTo(a * 212, a * 118.84375, a * 212, a * 118.84375, a * 214.5, a * 117.34375);
    e.closePath();
    St(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86.5, a * 133.34375);
    e.bezierCurveTo(a * 89, a * 127.34375, a * 89, a * 127.34375, a * 91.5, a * 121.34375);
    e.bezierCurveTo(a * 92.5, a * 127.34375, a * 92.5, a * 127.34375, a * 93.5, a * 133.34375);
    e.closePath();
    St(e, c[bq]);
    return d;
  }
  function Rc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    St(e, undefined, c[br], a * 40);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    St(e, Mk, c[1], a * Sk);
    e.globalAlpha = 0.8;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    St(e, c[0], c[bd], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51.000030517578125, a * 37.9886474609375);
    e.bezierCurveTo(a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 85.9886474609375);
    e.bezierCurveTo(a * 75.50003051757812, a * 85.9886474609375, a * 75.50003051757812, a * 85.9886474609375, a * 100.00003051757812, a * 85.9886474609375);
    e.bezierCurveTo(a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 37.9886474609375);
    e.bezierCurveTo(a * 76.00003051757812, a * 37.9886474609375, a * 76.00003051757812, a * 37.9886474609375, a * 52.000030517578125, a * 37.9886474609375);
    e.closePath();
    St(e, c[1], c[Od], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99.00003051757812, a * 38.9886474609375);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.9886474609375, a * 93.50003051757812, a * 44.9886474609375, a * 88.00003051757812, a * 50.9886474609375);
    e.bezierCurveTo(a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 93.9886474609375);
    e.bezierCurveTo(a * 94.00003051757812, a * 90.4886474609375, a * 94.00003051757812, a * 90.4886474609375, a * 100.00003051757812, a * 86.9886474609375);
    e.closePath();
    St(e, c[1], c[2], a * hr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.00003051757812, a * 49.625);
    e.bezierCurveTo(a * 61.000030517578125, a * 49.625, a * 61.000030517578125, a * 49.625, a * 35.000030517578125, a * 49.625);
    e.bezierCurveTo(a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 91.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 91.625, a * 60.500030517578125, a * 91.625, a * 86.00003051757812, a * 91.625);
    e.bezierCurveTo(a * 86.50003051757812, a * 70.625, a * 86.50003051757812, a * 70.625, a * 87.00003051757812, a * 49.625);
    e.closePath();
    St(e, c[Ga], c[Rn], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 36.625);
    e.bezierCurveTo(a * 73.00003051757812, a * 37.125, a * 73.00003051757812, a * 37.125, a * 99.00003051757812, a * 37.625);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.125, a * 93.50003051757812, a * 44.125, a * 88.00003051757812, a * 50.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 50.125, a * 60.500030517578125, a * 50.125, a * 33.000030517578125, a * 49.625);
    e.closePath();
    St(e, c[Lu], c[Mh], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53.000030517578125, a * 52.625);
    e.bezierCurveTo(a * 40.000030517578125, a * 54.625, a * 39.000030517578125, a * 59.625, a * 40.000030517578125, a * 67.625);
    e.bezierCurveTo(a * 45.000030517578125, a * 59.625, a * 48.000030517578125, a * 58.625, a * 54.000030517578125, a * 53.625);
    e.closePath();
    St(e, c[3]);
    e.globalAlpha = Lu;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    St(e, undefined, c[3], a * 4);
    return d;
  }
  function jc(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 501;
    e.height = a * 564;
    f.scale(0.5, 0.5);
    f.translate(a * 240, a * 255);
    f.rotate(d);
    f.globalAlpha = b ? 0.5 : 0.2;
    Vt(f, a * 174, a * 87.984375, a * 20.8806130178211);
    St(f, c[An], c[0], a * 8);
    Vt(f, a * 174, a * 87.984375, a * 12.165525060596439);
    St(f, c[sb], c[Aa], wo * a);
    Vt(f, a * 174, a * 87.484375, a * 6);
    St(f, c[0]);
    Vt(f, a * 30, a * 87.984375, a * 20.8806130178211);
    St(f, c[0], c[bu], Qt * a);
    Vt(f, a * 30, a * 87.984375, a * 12.165525060596439);
    St(f, c[sb], c[0], mg * a);
    Vt(f, a * 30, a * 87.484375, Is * a);
    St(f, c[0]);
    Vt(f, a * 100, a * 30, a * 20.8806130178211);
    St(f, c[0], c[0], a * 4);
    Vt(f, ba * a, a * 30, a * 12.165525060596439);
    St(f, c[Ah], c[Ah], a * 4);
    Vt(f, a * yg, a * 30, _g * a);
    St(f, c[yj]);
    Vt(f, Oh * a, a * 130, a * 20.8806130178211);
    St(f, c[Ih], c[qu], a * 4);
    Vt(f, yh * a, a * 130, a * 12.165525060596439);
    St(f, c[0], c[0], a * 4);
    Vt(f, a * bn, a * 130, a * 6);
    St(f, c[Gg]);
    f.save();
    f.translate(a * 102, a * 81.984375);
    f.rotate(0);
    Tt(f, a * -74, a * -57, a * 148, a * 114, a * 23);
    f.restore();
    St(f, c[Md], c[tj], a * 4);
    f.save();
    f.translate(a * 101, a * 64.984375);
    f.rotate(0);
    Tt(f, a * -33, -vq * a, a * 66, js * a, a * 15);
    f.restore();
    St(f, c[An], c[0], a * 4);
    f.save();
    f.translate(a * 102, a * 63.484375);
    f.rotate(Gg);
    Tt(f, -zk * a, a * -27.5, ag * a, a * 55, a * 15);
    f.restore();
    f.translate(Yl, -5);
    f.globalAlpha = 1;
    Vt(f, a * 174, a * 87.984375, a * 20.8806130178211);
    St(f, c[1], c[3], Wq * a);
    Vt(f, a * 174, a * 87.984375, a * 12.165525060596439);
    St(f, c[1], c[3], a * Fh);
    Vt(f, a * 174, a * 87.484375, a * xh);
    St(f, c[il]);
    Vt(f, a * 30, a * 87.984375, a * 20.8806130178211);
    St(f, c[_h], c[rb], a * 8);
    Vt(f, a * 30, a * 87.984375, a * 12.165525060596439);
    St(f, c[Ni], c[Sg], a * 8);
    Vt(f, a * 30, a * 87.484375, a * oq);
    St(f, c[2]);
    Vt(f, a * 102, a * 30, a * 20.8806130178211);
    St(f, c[1], c[Xu], a * 8);
    Vt(f, a * 102, a * 30, a * 12.165525060596439);
    St(f, c[1], c[3], a * 8);
    Vt(f, a * 102, a * 30, a * 6);
    St(f, c[wh]);
    Vt(f, a * 102, a * 130, a * 20.8806130178211);
    St(f, c[1], c[3], a * Kn);
    Vt(f, a * 102, a * 130, a * 12.165525060596439);
    St(f, c[1], c[Ft], Rs * a);
    Vt(f, a * 102, a * 130, a * xh);
    St(f, c[1]);
    f.save();
    f.translate(a * 102, a * 81.984375);
    Tt(f, a * -74, a * -57, a * 148, a * 114, a * 23);
    f.restore();
    St(f, c[Ls], c[Qn], a * 8);
    f.save();
    f.translate(a * 101, a * 64.984375);
    Tt(f, a * -33, a * -F, a * 66, a * 20, a * 15);
    f.restore();
    St(f, c[2], c[Ga], Rs * a);
    f.save();
    f.translate(a * 102, a * 63.484375);
    Tt(f, a * -zk, a * -27.5, a * Bg, a * 55, a * Ws);
    f.restore();
    St(f, c[X], c[1], a * 8);
    Vt(f, a * 135, a * 107.36605834960938, a * 21.095023109728988);
    St(f, c[Ls], c[wi], a * 8);
    Vt(f, a * 135, a * 107.36605834960938, a * 13);
    St(f, c[Ga], c[3], a * 8);
    Vt(f, a * 135, a * 107.36605834960938, a * 6.082762530298219);
    St(f, c[2]);
    Vt(f, a * 70, a * 107.36605834960938, a * 21.095023109728988);
    St(f, c[1], c[3], a * Je);
    Vt(f, a * 70, a * 107.36605834960938, a * 13);
    St(f, c[bs], c[hd], a * 8);
    Vt(f, a * 70, a * 107.36605834960938, a * 6.082762530298219);
    St(f, c[qi]);
    return e;
  }
  function Wc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 204, a * 195.0833282470703);
    e.rotate(10.16);
    Tt(e, a * -97.5, a * -134.5, a * 195, a * 269, a * vq);
    e.restore();
    St(e, c[0], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.5, a * 226.5833282470703);
    e.bezierCurveTo(a * 120.5, a * 281.5833282470703, a * 120.5, a * 281.5833282470703, a * 182.5, a * 336.5833282470703);
    e.bezierCurveTo(a * 263, a * 248.5833282470703, a * 263, a * 248.5833282470703, a * 343.5, a * 160.5833282470703);
    e.bezierCurveTo(a * 280.5, a * 104.58332824707031, a * 280.5, a * 104.58332824707031, a * 217.5, a * 48.58332824707031);
    e.closePath();
    St(e, c[2], c[Lq], a * 4);
    e.save();
    e.translate(a * 197, a * 169.0833282470703);
    e.rotate(10.16);
    Tt(e, a * -93.5, a * -126.5, a * 187, a * 253, a * 10);
    e.restore();
    St(e, c[ge], c[Lu], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 24.583328247070312);
    e.bezierCurveTo(a * 58.5, a * 207.5833282470703, a * 143, a * 116.58332824707031, a * 59.5, a * 208.5833282470703);
    e.closePath();
    St(e, undefined, c[Ek], a * or);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 202.64999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 228.64999389648438);
    e.closePath();
    St(e, c[mg], c[_h], or * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55.133331298828125, a * 211.64999389648438);
    e.bezierCurveTo(a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 238.64999389648438);
    e.bezierCurveTo(a * 50.133331298828125, a * 235.64999389648438, a * 50.133331298828125, a * 235.64999389648438, a * 45.133331298828125, a * 232.64999389648438);
    e.bezierCurveTo(a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 200.64999389648438);
    e.closePath();
    St(e, c[4], c[Ek], a * Fh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 198.39999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 201.39999389648438);
    e.closePath();
    St(e, c[oe], c[1], or * a);
    e.save();
    e.translate(a * 249.63333129882812, a * 120.89999389648438);
    e.rotate(7.04);
    Tt(e, a * -58.5, a * -32, a * 117, a * 64, a * iq);
    e.restore();
    St(e, c[Ks]);
    return d;
  }
  const Lc = lt;
  function Gc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 80;
    d.height = a * 160;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    Tt(e, a * 33, a * 53, a * Wg, a * 98, Ds * a);
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, -I * a);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    St(e, c[0]);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    Tt(e, a * 33, a * 53, lt * a, a * 98, uj * a);
    St(e, c[_h], c[Ht], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -100);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    St(e, c[3], c[Qt], aq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * tj, a * _h);
    e.moveTo(a * 180.5, a * 169.0625);
    e.bezierCurveTo(a * 180.5, a * 157.5625, a * 180.5, a * 157.5625, a * 180.5, a * 146.0625);
    e.bezierCurveTo(a * 181.5, a * 134.0625, a * 193.5, a * 129.0625, a * 196.5, a * 146.0625);
    e.bezierCurveTo(a * 196.5, a * 157.5625, a * 196.5, a * 157.5625, a * 196.5, a * 169.0625);
    e.closePath();
    St(e, c[ie]);
    e.restore();
    return d;
  }
  function Oc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 110;
    c.height = a * 110;
    d.globalAlpha = 0.2;
    Vt(d, a * 55, a * 55, a * 55);
    St(d, b[bu]);
    return c;
  }
  function Nc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 163;
    d.height = a * 163;
    e.save();
    e.translate(a * 82.5, a * 81.1015625);
    e.rotate(0);
    Tt(e, a * -65.5, a * -66, a * 131, a * 131, a * 5);
    e.restore();
    St(e, c[_h]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * Ij, a * Ij);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    Tt(e, a * -64, a * -4.5, a * 129, a * 9, Sj * a);
    e.restore();
    St(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -ul);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    Tt(e, a * -64, a * -4.5, a * 129, a * Ba, a * 5);
    e.restore();
    St(e, c[Gl], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * Ij, a * Ij);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    Tt(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    e.restore();
    St(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -ko);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    Tt(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    e.restore();
    St(e, c[jb], c[Er], a * 3);
    e.globalAlpha = b ? 0.5 : Lu;
    e.translate(a * 5, a * Yl);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    Tt(e, a * -4.5, a * -65, a * 9, a * 129, a * rh);
    e.restore();
    St(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -ko, a * -5);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    Tt(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    e.restore();
    St(e, c[2], c[wi], a * wi);
    e.globalAlpha = b ? 0.5 : Ga;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    Tt(e, a * -65.5, a * -Zt, a * 129, a * 9, a * _j);
    e.restore();
    St(e, c[Rl]);
    e.globalAlpha = Ga;
    e.translate(-bt * a, a * -5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    Tt(e, a * -65.5, -Qt * a, a * 129, a * 9, a * 5);
    e.restore();
    St(e, c[2], c[Er], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(ro * a, a * 18.1015625);
    Tt(e, -dn * a, a * -11.5, a * 22, a * 22, a * Jb);
    e.restore();
    St(e, c[et]);
    e.globalAlpha = Lu;
    e.translate(a * -5, a * -rh);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    Tt(e, -gu * a, a * -11.5, a * 22, a * 22, a * 5);
    e.restore();
    St(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Eg * a, a * ko);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    Tt(e, a * -10.5, a * -11.5, a * 21, a * 22, rh * a);
    e.restore();
    St(e, c[0]);
    e.globalAlpha = Kg;
    e.translate(-bt * a, -lu * a);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    Tt(e, a * -10.5, a * -11.5, a * 21, a * 22, Yl * a);
    e.restore();
    St(e, c[jb], c[wi], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * ul, a * ie);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    Tt(e, a * -10.5, -hb * a, a * 22, a * 22, a * zr);
    e.restore();
    St(e, c[yj]);
    e.globalAlpha = er;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    Tt(e, a * -10.5, a * -11, a * 22, a * 22, a * bt);
    e.restore();
    St(e, c[br], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * Zg, a * 5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    Tt(e, a * -11.5, -cg * a, a * 22, a * 22, a * 5);
    e.restore();
    St(e, c[0]);
    e.globalAlpha = Kg;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    Tt(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    St(e, c[Od], c[Z], a * 3);
    return d;
  }
  function qc(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 600;
    var f = b * 22;
    var g = b * Nh;
    var h = oe * b;
    c.width = e;
    c.height = f;
    Tt(d, b * 5, b * 5, e - b * 10, f - Gh * b, g);
    St(d, null, "#BBE8EF", h);
    return c;
  }
  function Hc(a, b, c) {
    Zi(yw, a, b, c);
    const d = function (b, c, d, e, f) {
      si(yw, b, c, d, e, f);
      const g = vw(xw[et], xw[1], xw[bq], xw[Ou], xw[fd]);
      const h = Xk(xw[0], xw[sl], xw[2], xw[3]);
      return (8 << ((g ^ h) >> 8 & 255)) + (0 << ((g ^ h) >> 24 & 255)) + (16 << ((g ^ h) & 255)) + (24 << ((g ^ h) >> Cq & 255));
    }(xw[Qr], xw[Co], xw[fh], xw[0], xw[1]);
    const e = eq(xw[nd], xw[0], xw[Lu]);
    return (24 << ((d ^ e) >> 16 & 255)) + (8 << ((d ^ e) & kt)) + (0 << ((d ^ e) >> 24 & 255)) + (16 << ((d ^ e) >> 8 & 255));
  }
  function Uc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 372;
    d.height = a * 358;
    e.translate(a * 0, a * 10);
    e.globalAlpha = b ? 0.2 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    St(e, c[0], c[0], In * a);
    e.translate(a * 0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.00003051757812, a * 54.13069152832031);
    e.bezierCurveTo(a * 106.50003051757812, a * 38.63069152832031, a * 106.50003051757812, a * 38.63069152832031, a * 106.00003051757812, a * 23.130691528320312);
    e.bezierCurveTo(a * 121.50003051757812, a * 38.13069152832031, a * 121.50003051757812, a * 38.13069152832031, a * 137.00003051757812, a * 53.13069152832031);
    e.closePath();
    St(e, c[il], c[Jd], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 233.00003051757812, a * 53.6761474609375);
    e.bezierCurveTo(a * 247.00003051757812, a * 37.1761474609375, a * 247.00003051757812, a * 37.1761474609375, a * 261.0000305175781, a * 20.6761474609375);
    e.bezierCurveTo(a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 51.6761474609375);
    e.closePath();
    St(e, c[2], c[Z], Ea * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 293.0000305175781, a * 54.403411865234375);
    e.bezierCurveTo(a * 300.0000305175781, a * 49.903411865234375, a * 300.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 45.403411865234375);
    e.bezierCurveTo(a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 54.403411865234375);
    e.closePath();
    St(e, c[2], c[Er], a * Ea);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 77.00003051757812, a * 54.403411865234375);
    e.bezierCurveTo(a * 70.00003051757812, a * 50.403411865234375, a * 70.00003051757812, a * 50.403411865234375, a * 63.000030517578125, a * 46.403411865234375);
    e.bezierCurveTo(a * 62.500030517578125, a * 50.903411865234375, a * 62.500030517578125, a * 50.903411865234375, a * 62.000030517578125, a * 55.403411865234375);
    e.closePath();
    St(e, c[2], c[hd], In * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.000030517578125, a * 122.3125);
    e.bezierCurveTo(a * 59.500030517578125, a * 97.3125, a * 59.500030517578125, a * 97.3125, a * 61.000030517578125, a * 72.3125);
    e.bezierCurveTo(a * 91.00003051757812, a * 89.3125, a * 91.00003051757812, a * 89.3125, a * 121.00003051757812, a * 106.3125);
    e.closePath();
    St(e, c[bd], c[sc], Hb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 310.0000305175781, a * 127.3125);
    e.bezierCurveTo(a * 308.0000305175781, a * 98.3125, a * 308.0000305175781, a * 98.3125, a * 306.0000305175781, a * 69.3125);
    e.bezierCurveTo(a * 274.5000305175781, a * 88.8125, a * 274.5000305175781, a * 88.8125, a * 243.00003051757812, a * 108.3125);
    e.closePath();
    St(e, c[1], c[_h], a * Lc);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.00003051757812, a * 87.85795593261719);
    e.bezierCurveTo(a * 243.50003051757812, a * 66.85795593261719, a * 243.50003051757812, a * 66.85795593261719, a * 261.0000305175781, a * 45.85795593261719);
    e.bezierCurveTo(a * 265.0000305175781, a * 83.85795593261719, a * 265.0000305175781, a * 83.85795593261719, a * 269.0000305175781, a * 121.85795593261719);
    e.bezierCurveTo(a * 235.00003051757812, a * 122.85795593261719, a * 233.00003051757812, a * 107.85795593261719, a * 228.00003051757812, a * 90.85795593261719);
    e.closePath();
    St(e, c[2], c[3], a * lt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 128.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 87.85795593261719, a * 104.50003051757812, a * 87.85795593261719, a * 104.00003051757812, a * 46.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 69.35795593261719, a * 126.50003051757812, a * 69.35795593261719, a * 149.00003051757812, a * 91.85795593261719);
    e.bezierCurveTo(a * 130.00003051757812, a * 123.85795593261719, a * 123.00003051757812, a * 132.8579559326172, a * 107.00003051757812, a * 130.8579559326172);
    e.closePath();
    St(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.000030517578125, a * 121.85795593261719);
    e.bezierCurveTo(a * 59.500030517578125, a * 99.35795593261719, a * 59.500030517578125, a * 99.35795593261719, a * 60.000030517578125, a * 76.85795593261719);
    e.bezierCurveTo(a * 84.00003051757812, a * 92.35795593261719, a * 84.00003051757812, a * 92.35795593261719, a * 108.00003051757812, a * 107.85795593261719);
    e.bezierCurveTo(a * 106.00003051757812, a * 148.8579559326172, a * 86.00003051757812, a * 148.8579559326172, a * 62.000030517578125, a * 123.85795593261719);
    e.closePath();
    St(e, c[2], c[3], a * iq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 132.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 93.35795593261719, a * 104.50003051757812, a * 93.35795593261719, a * 104.00003051757812, a * 53.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 75.85795593261719, a * 126.50003051757812, a * 75.85795593261719, a * 149.00003051757812, a * 97.85795593261719);
    e.closePath();
    St(e, c[2], c[3], a * uj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 311.0000305175781, a * 126.85795593261719);
    e.bezierCurveTo(a * 309.0000305175781, a * 101.35795593261719, a * 309.0000305175781, a * 101.35795593261719, a * 307.0000305175781, a * 75.85795593261719);
    e.bezierCurveTo(a * 271.0000305175781, a * 96.85795593261719, a * 271.0000305175781, a * 96.85795593261719, a * 235.00003051757812, a * 117.85795593261719);
    e.closePath();
    St(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 96.85795593261719);
    e.bezierCurveTo(a * 244.50003051757812, a * 74.85795593261719, a * 244.50003051757812, a * 74.85795593261719, a * 261.0000305175781, a * 52.85795593261719);
    e.bezierCurveTo(a * 265.5000305175781, a * 89.85795593261719, a * 265.5000305175781, a * 89.85795593261719, a * 270.0000305175781, a * 126.85795593261719);
    e.closePath();
    St(e, c[Nj], c[Sg], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 12.000030517578125, a * 86.13069152832031);
    e.bezierCurveTo(a * 36.000030517578125, a * 113.13069152832031, a * 84.00003051757812, a * 111.13069152832031, a * 116.00003051757812, a * 113.13069152832031);
    e.bezierCurveTo(a * 164.00003051757812, a * 23.130691528320312, a * 172.00003051757812, a * 18.130691528320312, a * 181.00003051757812, a * 9.130691528320312);
    e.bezierCurveTo(a * 199.00003051757812, a * 29.130691528320312, a * 221.00003051757812, a * 78.13069152832031, a * 247.00003051757812, a * 112.13069152832031);
    e.bezierCurveTo(a * 301.0000305175781, a * 122.13069152832031, a * 338.0000305175781, a * 111.13069152832031, a * 359.0000305175781, a * 94.13069152832031);
    e.bezierCurveTo(a * 359.0000305175781, a * 113.13069152832031, a * 358.5000305175781, a * 105.13069152832031, a * 358.0000305175781, a * 116.13069152832031);
    e.bezierCurveTo(a * 270.5000305175781, a * 130.1306915283203, a * 270.5000305175781, a * 130.1306915283203, a * 183.00003051757812, a * 144.1306915283203);
    e.bezierCurveTo(a * 98.00003051757812, a * 128.6306915283203, a * 98.00003051757812, a * 128.6306915283203, a * 13.000030517578125, a * 113.13069152832031);
    e.closePath();
    St(e, c[1], c[Mg], a * vc);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    St(e, c[2], c[Mh], hh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27.000030517578125, a * 94.76704406738281);
    e.bezierCurveTo(a * 11.000030517578125, a * 81.76704406738281, a * 31.000030517578125, a * 72.76704406738281, a * 44.000030517578125, a * 59.76704406738281);
    e.bezierCurveTo(a * 9.000030517578125, a * 65.76704406738281, a * 4.000030517578125, a * 78.76704406738281, a * 9.000030517578125, a * 89.76704406738281);
    e.closePath();
    St(e, c[2], c[rb], a * uj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 352.0000305175781, a * 100.76705932617188);
    e.bezierCurveTo(a * 362.0000305175781, a * 92.76705932617188, a * 352.0000305175781, a * 84.76705932617188, a * 340.0000305175781, a * 68.76705932617188);
    e.bezierCurveTo(a * 360.0000305175781, a * 69.76705932617188, a * 364.0000305175781, a * 79.76705932617188, a * 364.0000305175781, a * 94.76705932617188);
    e.closePath();
    St(e, c[Ga], c[Mg], ig * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.000030517578125, a * 97.94886779785156);
    e.bezierCurveTo(a * 2.000030517578125, a * 76.94886779785156, a * 29.000030517578125, a * 62.94886779785156, a * 44.000030517578125, a * 59.94886779785156);
    e.bezierCurveTo(a * 8.000030517578125, a * 59.94886779785156, a * -0.999969482421875, a * 81.94886779785156, a * 4.000030517578125, a * 92.94886779785156);
    e.closePath();
    St(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 349.0000305175781, a * 100.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 82.94886779785156, a * 353.0000305175781, a * 76.94886779785156, a * 337.0000305175781, a * 67.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 69.94886779785156, a * 366.0000305175781, a * 83.94886779785156, a * 363.0000305175781, a * 101.94886779785156);
    e.closePath();
    St(e, c[2], c[Er], a * Li);
    Vt(e, a * 46.000030517578125, a * 137.5852279663086, a * 9.219544457292887);
    St(e, c[4], c[5], Ls * a);
    Vt(e, a * 308.0000305175781, a * 141.5852279663086, a * 8.54400374531753);
    St(e, c[$j], c[5], a * ig);
    Vt(e, a * 92.00003051757812, a * 149.58523559570312, a * 14.866068747318506);
    St(e, c[4], c[5], a * 1);
    Vt(e, a * 262.0000305175781, a * 148.8579559326172, a * 15.620499351813308);
    St(e, c[4], c[ul], a * wh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.00003051757812, a * 68.85795593261719);
    e.bezierCurveTo(a * 203.00003051757812, a * 108.85795593261719, a * 203.00003051757812, a * 108.85795593261719, a * 222.00003051757812, a * 148.8579559326172);
    e.bezierCurveTo(a * 202.50003051757812, a * 177.8579559326172, a * 202.50003051757812, a * 177.8579559326172, a * 183.00003051757812, a * 206.8579559326172);
    e.bezierCurveTo(a * 162.00003051757812, a * 178.8579559326172, a * 162.00003051757812, a * 178.8579559326172, a * 141.00003051757812, a * 150.8579559326172);
    e.closePath();
    St(e, c[4], c[5], a * Ds);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183.00003051757812, a * 104.94886779785156);
    e.bezierCurveTo(a * 192.50003051757812, a * 125.44886779785156, a * 192.50003051757812, a * 125.44886779785156, a * 202.00003051757812, a * 145.94886779785156);
    e.bezierCurveTo(a * 192.00003051757812, a * 163.94886779785156, a * 192.00003051757812, a * 163.94886779785156, a * 182.00003051757812, a * 181.94886779785156);
    e.bezierCurveTo(a * 172.50003051757812, a * 164.44886779785156, a * 172.50003051757812, a * 164.44886779785156, a * 163.00003051757812, a * 146.94886779785156);
    e.closePath();
    St(e, c[6]);
    return d;
  }
  function Yc(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 198;
    e.height = a * 147;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(0, kk * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 44, a * 76);
    f.bezierCurveTo(a * 50, a * 82, a * 50, a * 82, a * 56, a * 88);
    f.bezierCurveTo(a * 59, a * 82, a * 59, a * 82, a * 62, a * 76);
    f.bezierCurveTo(a * 59, a * 71, a * 59, a * 71, a * 56, a * 66);
    f.bezierCurveTo(a * 59, a * 69, a * 59, a * 69, a * 62, a * 72);
    f.bezierCurveTo(a * 80, a * 48, a * 102, a * 50, a * 120, a * 62);
    f.bezierCurveTo(a * 127, a * 58, a * 127, a * 58, a * 134, a * 54);
    f.bezierCurveTo(a * 129, a * 60, a * 129, a * 60, a * 124, a * 66);
    f.bezierCurveTo(a * 129, a * 73, a * 129, a * 73, a * 134, a * 80);
    f.bezierCurveTo(a * 140, a * 74, a * 140, a * 74, a * 146, a * 68);
    f.bezierCurveTo(a * 142, a * 76, a * 142, a * 76, a * 138, a * 84);
    f.bezierCurveTo(a * 144, a * 90, a * 142, a * 90, a * 144, a * 90);
    f.bezierCurveTo(a * 136, a * 97, a * 136, a * 97, a * 128, a * 104);
    f.bezierCurveTo(a * 154, a * 110, a * 164, a * 90, a * 160, a * 80);
    f.bezierCurveTo(a * 138, a * 22, a * 148, a * 51, a * 136, a * 22);
    f.bezierCurveTo(a * 97, a * 24, a * 97, a * 24, a * 58, a * 26);
    f.bezierCurveTo(a * 47, a * 54, a * 36, a * 80, a * 36, a * 82);
    f.bezierCurveTo(a * 40, a * 108, a * 54, a * 104, a * 62, a * 104);
    f.bezierCurveTo(a * 46, a * 92, a * 54, a * 97, a * 46, a * 90);
    f.closePath();
    St(f, c[et]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36, a * 80);
    f.bezierCurveTo(a * 30, a * 84, a * 28, a * 92, a * 34, a * Ir);
    f.bezierCurveTo(a * 41.5, a * 102, a * 41.5, a * 102, a * 49, a * 104);
    f.bezierCurveTo(a * 43, a * 105.5, a * 43, a * 105.5, a * 37, a * 107);
    f.bezierCurveTo(a * 46, a * 111, a * 60, a * 114, a * 76, a * 114);
    f.bezierCurveTo(a * 78, a * 110.5, a * 78, a * 110.5, a * 80, a * 107);
    f.bezierCurveTo(a * 81, a * 110.5, a * 81, a * 110.5, a * 82, a * 114);
    f.bezierCurveTo(a * 94.5, a * 113.5, a * 94.5, a * 113.5, a * 107, a * 113);
    f.bezierCurveTo(a * 108.5, a * 110, a * 108.5, a * 110, a * 110, a * 107);
    f.bezierCurveTo(a * 111.5, a * 110.5, a * 111.5, a * 110.5, a * 113, a * 114);
    f.bezierCurveTo(a * 131, a * 112.5, a * 131, a * 112.5, a * 149, a * 111);
    f.bezierCurveTo(a * 148.5, a * 107.5, a * 148.5, a * 107.5, a * 148, a * 104);
    f.bezierCurveTo(a * 150.5, a * 107, a * 150.5, a * 107, a * 153, a * 110);
    f.bezierCurveTo(a * 155.5, a * 108.5, a * 155.5, a * 108.5, a * 158, a * 107);
    f.bezierCurveTo(a * 156.5, a * 104, a * 156.5, a * 104, a * 155, a * 101);
    f.bezierCurveTo(a * 158.5, a * 102.5, a * 158.5, a * 102.5, a * 162, a * 104);
    f.bezierCurveTo(a * 168, a * ea, a * 170, a * 92, a * 169, a * 85);
    f.bezierCurveTo(a * 166, a * 86, a * 166, a * 86, a * 163, a * 87);
    f.bezierCurveTo(a * 165.5, a * 83, a * 165.5, a * 83, a * 168, a * 79);
    f.bezierCurveTo(a * 165.5, a * 76.5, a * 165.5, a * 76.5, a * 163, a * 74);
    f.bezierCurveTo(a * 155, a * 82.5, a * 155, a * 82.5, a * 147, a * 91);
    f.bezierCurveTo(a * 139, a * 95.5, a * 139, a * 95.5, a * 131, a * mh);
    f.bezierCurveTo(a * 97.5, a * 100.5, a * 97.5, a * 100.5, a * 64, a * 101);
    f.bezierCurveTo(a * 49, a * 102, a * 43, a * 90, a * 36, a * 80);
    f.closePath();
    St(f, c[0]);
    f.globalAlpha = Mg;
    f.translate(0, a * -_g);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36, a * 80);
    f.bezierCurveTo(a * 30, a * 84, a * 28, a * 92, a * 34, a * 100);
    f.bezierCurveTo(a * 41.5, a * 102, a * 41.5, a * 102, a * 49, a * 104);
    f.bezierCurveTo(a * 43, a * 105.5, a * 43, a * 105.5, a * 37, a * 107);
    f.bezierCurveTo(a * 46, a * 111, a * 60, a * 114, a * 76, a * 114);
    f.bezierCurveTo(a * 78, a * 110.5, a * 78, a * 110.5, a * 80, a * 107);
    f.bezierCurveTo(a * 81, a * 110.5, a * 81, a * 110.5, a * 82, a * 114);
    f.bezierCurveTo(a * 94.5, a * 113.5, a * 94.5, a * 113.5, a * 107, a * 113);
    f.bezierCurveTo(a * 108.5, a * 110, a * 108.5, a * 110, a * 110, a * 107);
    f.bezierCurveTo(a * 111.5, a * 110.5, a * 111.5, a * 110.5, a * 113, a * 114);
    f.bezierCurveTo(a * 131, a * 112.5, a * 131, a * 112.5, a * 149, a * 111);
    f.bezierCurveTo(a * 148.5, a * 107.5, a * 148.5, a * 107.5, a * 148, a * 104);
    f.bezierCurveTo(a * 150.5, a * 107, a * 150.5, a * 107, a * 153, a * 110);
    f.bezierCurveTo(a * 155.5, a * 108.5, a * 155.5, a * 108.5, a * 158, a * 107);
    f.bezierCurveTo(a * 156.5, a * 104, a * 156.5, a * 104, a * 155, a * 101);
    f.bezierCurveTo(a * 158.5, a * 102.5, a * 158.5, a * 102.5, a * 162, a * 104);
    f.bezierCurveTo(a * 168, a * 100, a * 170, a * 92, a * 169, a * 85);
    f.bezierCurveTo(a * 166, a * 86, a * 166, a * 86, a * 163, a * 87);
    f.bezierCurveTo(a * 165.5, a * 83, a * 165.5, a * 83, a * 168, a * 79);
    f.bezierCurveTo(a * 165.5, a * 76.5, a * 165.5, a * 76.5, a * 163, a * 74);
    f.bezierCurveTo(a * 155, a * 82.5, a * 155, a * 82.5, a * 147, a * 91);
    f.bezierCurveTo(a * 139, a * 95.5, a * 139, a * 95.5, a * 131, Re * a);
    f.bezierCurveTo(a * 97.5, a * 100.5, a * 97.5, a * 100.5, a * 64, a * 101);
    f.bezierCurveTo(a * 49, a * 102, a * 43, a * 90, a * 36, a * 80);
    f.closePath();
    St(f, c[1], c[jg], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 49, a * 98);
    f.bezierCurveTo(a * 96.5, a * 98, a * 96.5, a * 98, a * 144, a * 98);
    f.bezierCurveTo(a * 136.5, a * 102, a * 136.5, a * 102, a * 129, a * 106);
    f.bezierCurveTo(a * 103, a * 105.5, a * 103, a * 105.5, a * 77, a * 105);
    f.bezierCurveTo(a * 65, a * 105, a * 65, a * 105, a * 53, a * 105);
    f.closePath();
    St(f, c[1]);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 54, a * 98);
    f.bezierCurveTo(a * 97, a * 98, a * 97, a * 98, a * 140, a * 98);
    f.bezierCurveTo(a * 134, a * 101, a * 134, a * 101, a * 128, a * 104);
    f.bezierCurveTo(a * 92, a * 104, a * 92, a * 104, a * 56, a * 104);
    f.closePath();
    St(f, c[xq]);
    f.globalAlpha = ig;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 118, a * 47);
    f.bezierCurveTo(a * 124.5, a * 43.5, a * 124.5, a * 43.5, a * 131, a * 40);
    f.bezierCurveTo(a * 128, a * 46, a * 128, a * 46, a * 125, a * 52);
    f.bezierCurveTo(a * 131, a * 57, a * 135, a * 64, a * 139, a * 73);
    f.bezierCurveTo(a * 142.5, a * 69.5, a * 142.5, a * 69.5, a * 146, a * 66);
    f.bezierCurveTo(a * 143.5, a * 72.5, a * 143.5, a * 72.5, a * 141, a * 79);
    f.bezierCurveTo(a * 142, a * 91, a * 141, a * 94, a * 132, a * 98);
    f.bezierCurveTo(a * 117, a * 102, a * 126, a * 108, a * 142, a * 102);
    f.bezierCurveTo(a * 159, a * 98, a * 164, a * 80, a * 162, a * 47);
    f.bezierCurveTo(a * 160, a * Wi, a * 150, a * 6, a * 117, a * 4);
    f.bezierCurveTo(a * 44, a * 0, a * 35, a * 20, a * 33, a * 37);
    f.bezierCurveTo(a * 29, a * 69, a * 33, a * 88, a * 44, a * 96);
    f.bezierCurveTo(a * 64, a * 107, a * 70, a * 102, a * 54, a * 93);
    f.bezierCurveTo(a * 49, a * 88, a * 50, a * 82, a * 53, a * 77);
    f.bezierCurveTo(a * 51.5, a * 71, a * 51.5, a * 71, a * 50, a * 65);
    f.bezierCurveTo(a * 53, a * 68.5, a * 53, a * 68.5, a * 56, a * 72);
    f.bezierCurveTo(a * 59, a * 67.5, a * 59, a * 67.5, a * 62, a * 63);
    f.bezierCurveTo(a * 60.5, a * 59.5, a * 60.5, a * 59.5, a * 59, a * 56);
    f.bezierCurveTo(a * 62, a * 57, a * 62, a * 57, a * 65, a * 58);
    f.bezierCurveTo(a * 78, a * 35, a * 103, a * 36, a * 117, a * 47);
    f.closePath();
    St(f, c[1], c[2], $a * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 62, a * 21);
    f.bezierCurveTo(a * 63, a * 34, a * 64, a * 37, a * 66, a * 40);
    f.bezierCurveTo(a * 54, a * 49, a * 53, a * 51, a * 48, a * 58);
    f.bezierCurveTo(a * 44, a * 51, a * 42, a * 43, a * 40, a * 36);
    f.bezierCurveTo(a * 47, a * 28, a * 52, a * 25, a * 61, a * 21);
    f.closePath();
    St(f, c[aq]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 60, a * 29);
    f.bezierCurveTo(a * 62, a * 25, a * 65, a * 24, a * 70, a * 23);
    St(f, undefined, c[iu], mg * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 61, a * 37);
    f.bezierCurveTo(a * 63, a * 32, a * 66, a * 32, a * 71, a * 32);
    St(f, undefined, c[Ql], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 52, a * 31);
    f.bezierCurveTo(a * 50, a * 26, a * 50, a * 25, a * 51, a * 23);
    St(f, al, c[Mh], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 46, a * 35);
    f.bezierCurveTo(a * 44, a * 31, a * 43, a * 29, a * 45, a * 26);
    St(f, ys, c[3], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 58, a * 44);
    f.bezierCurveTo(a * 57, a * 48, a * 57, a * 50, a * 60, a * 52);
    St(f, undefined, c[Mh], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 53, a * 48);
    f.bezierCurveTo(a * 52, a * 52, a * 52, a * 54, a * 55, a * 57);
    St(f, Ao, c[3], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 46, a * 41);
    f.bezierCurveTo(a * 41, a * 42, a * 39, a * 45, a * 38, a * 48);
    St(f, Mk, c[3], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 48, a * 48);
    f.bezierCurveTo(a * 42, a * 51, a * 42, a * 53, a * 40, a * 55);
    St(f, undefined, c[3], a * cq);
    if (sb == d) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 99, a * 101);
      f.bezierCurveTo(a * 118.6666259765625, a * 104.33331298828125, a * 124.6666259765625, a * 116.33331298828125, a * 112.6666259765625, a * 114.33331298828125);
      f.bezierCurveTo(a * 104.6666259765625, a * 112.33331298828125, a * 100.6666259765625, a * 105.33331298828125, a * 99.6666259765625, a * 101.33331298828125);
      St(f, undefined, c[5], a * 6);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 97.6666259765625, a * 101.33331298828125);
      f.bezierCurveTo(a * 81.6666259765625, a * 106.33331298828125, a * 79.6666259765625, a * 114.33331298828125, a * 89.6666259765625, a * 114.33331298828125);
      f.bezierCurveTo(a * 95.6666259765625, a * 111.33331298828125, a * 95.6666259765625, a * 109.33331298828125, a * 98.6666259765625, a * 102.33331298828125);
      St(f, kh, c[5], a * 6);
    } else {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 103, a * 100.39999389648438);
      f.bezierCurveTo(a * 120, a * 106.39999389648438, a * 118, a * 107.39999389648438, a * 120, a * 111.39999389648438);
      St(f, Fg, c[5], a * 6);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 103, a * 100.39999389648438);
      f.bezierCurveTo(a * 90, a * 103.39999389648438, a * 89, a * 106.39999389648438, a * 87, a * 112.39999389648438);
      St(f, undefined, c[Bh], a * kk);
      Vt(f, a * 86, a * 114.39999389648438, a * 4.5);
      St(f, c[1], c[5], a * Ml);
      Vt(f, a * 121, a * 114.39999389648438, a * 4.5);
      St(f, c[1], c[5], a * 6);
    }
    return e;
  }
  function Kc() {
    new Date().getTime();
    function a(a) {
      var b = fg;
      var c = xq;
      for (var d = Md; d < a.length; d++) {
        var e = a.charAt(d);
        if (e !== "_" && d !== 5) {
          if (e === "1") {
            b += Math.pow(Nr, c);
          }
          c++;
        }
      }
      return b;
    }
    ΔΔⵠΔΔΔΔ();
    ᐃΔ[1026] = [Δᐃ.ΔⵠΔᐃⵠⵠⲆ, Δᐃ.ⲆᐃⵠⲆⲆⲆⲆ];
    ᐃΔ[1025] = [];
    ᐃΔ[1025][rs.ⲆᐃΔ] = [];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("000_010_000")] = [Δᐃ.ᐃᐃⵠΔΔ, Δᐃ.ⲆⵠⵠΔΔ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("000_010_010")] = ᐃΔ[1025][rs.ⲆᐃΔ][a("000_010_000")];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("000_011_000")] = ᐃΔ[1025][rs.ⲆᐃΔ][a("000_010_000")];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("000_011_010")] = [Δᐃ.ⵠΔⵠᐃⲆ, Δᐃ.ᐃⵠᐃⵠΔ, Δᐃ.ⲆⵠⵠΔΔ, Δᐃ.ᐃᐃⵠΔΔ, Δᐃ.ΔᐃⲆΔⵠⵠⲆ, Δᐃ.ⲆⲆⵠΔⲆⲆΔ, Δᐃ.ᐃⲆΔⵠᐃⵠⵠ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("000_011_011")] = [Δᐃ.ᐃᐃΔⲆΔⲆⵠ, Δᐃ.ⵠΔⵠᐃⲆ, Δᐃ.ᐃⵠᐃⵠΔ, Δᐃ.ⲆⵠⵠΔΔ, Δᐃ.ᐃᐃⵠΔΔ, Δᐃ.ΔᐃⲆΔⵠⵠⲆ, Δᐃ.ⲆⲆⵠΔⲆⲆΔ, Δᐃ.ᐃⲆΔⵠᐃⵠⵠ, Δᐃ.ⲆⲆᐃⵠⵠ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("000_110_000")] = [Δᐃ.ᐃΔᐃⵠᐃ, Δᐃ.ⲆⵠⵠΔΔ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("000_110_010")] = [Δᐃ.ΔⲆΔⲆΔ, Δᐃ.ᐃΔᐃⵠᐃ, Δᐃ.ⵠⵠⵠⲆⲆ, Δᐃ.ⲆⵠⵠΔΔ, Δᐃ.ᐃᐃⵠΔΔ, Δᐃ.ⲆⲆᐃⵠⵠ, Δᐃ.ⵠᐃⲆⵠᐃ, Δᐃ.ⵠᐃᐃⲆⵠᐃⵠ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("000_110_110")] = [Δᐃ.ΔⲆΔⲆΔ, Δᐃ.ⵠⲆᐃⲆᐃⲆᐃ, Δᐃ.ΔΔΔᐃⵠΔⵠ, Δᐃ.ᐃΔᐃⵠᐃ, Δᐃ.ⵠⵠⵠⲆⲆ, Δᐃ.ⲆⵠⵠΔΔ, Δᐃ.ⲆⲆᐃⵠⵠ, Δᐃ.ⵠᐃⲆⵠᐃ, Δᐃ.ⵠᐃᐃⲆⵠᐃⵠ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("000_111_000")] = [Δᐃ.ᐃΔᐃⵠᐃ, Δᐃ.ⵠⵠⵠⲆⲆ, Δᐃ.ⲆΔⵠΔⵠᐃᐃ, Δᐃ.ΔΔⵠᐃᐃⲆⵠ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("000_111_111")] = [Δᐃ.ᐃΔᐃⵠᐃ, Δᐃ.ΔΔΔᐃⵠΔⵠ, Δᐃ.ΔⲆΔⲆΔ, Δᐃ.ᐃⵠᐃⵠΔ, Δᐃ.ⵠΔⵠᐃⲆ, Δᐃ.ᐃᐃΔⲆΔⲆⵠ, Δᐃ.ΔⲆᐃΔⵠⵠᐃ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("010_010_000")] = [Δᐃ.ⲆⵠⵠΔΔ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("010_010_010")] = [Δᐃ.ᐃⲆⲆΔᐃⲆⵠ, Δᐃ.ⲆⵠⵠΔΔ, Δᐃ.ᐃᐃⵠΔΔ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("010_011_000")] = [Δᐃ.ⵠⵠΔⵠⲆ, Δᐃ.ⲆⵠⵠΔΔ, Δᐃ.ᐃᐃⵠΔΔ, Δᐃ.ⵠᐃⲆⵠᐃ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("010_110_000")] = [Δᐃ.ᐃΔᐃⵠᐃ, Δᐃ.ⵠⵠⵠⲆⲆ, Δᐃ.ⲆⵠⵠΔΔ, Δᐃ.ⵠᐃⲆⵠᐃ, Δᐃ.ⵠⵠᐃΔⵠ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("010_110_110")] = [Δᐃ.ΔⲆΔᐃᐃ, Δᐃ.ⵠⵠΔⵠⲆ, Δᐃ.ⵠΔⵠᐃⲆ, Δᐃ.ᐃⵠᐃⵠΔ, Δᐃ.ΔⲆΔⲆΔ, Δᐃ.ΔΔΔᐃⵠΔⵠ, Δᐃ.ᐃΔᐃⵠᐃ, Δᐃ.ΔⲆᐃΔⵠⵠᐃ, Δᐃ.ᐃⵠΔᐃΔᐃΔ, Δᐃ.ᐃⲆⲆΔᐃⲆⵠ, Δᐃ.ⵠⵠⵠⲆⲆ, Δᐃ.ⲆΔⵠΔⵠᐃᐃ, Δᐃ.ΔΔⵠᐃᐃⲆⵠ, Δᐃ.ⲆⵠⵠΔΔ, Δᐃ.ᐃᐃⵠΔΔ, Δᐃ.ΔᐃⲆΔⵠⵠⲆ, Δᐃ.ⲆⲆⵠΔⲆⲆΔ, Δᐃ.ᐃⲆΔⵠᐃⵠⵠ, Δᐃ.ⲆⲆᐃⵠⵠ, Δᐃ.ⵠᐃⲆⵠᐃ, Δᐃ.ⵠⵠᐃΔⵠ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("010_011_010")] = ᐃΔ[1025][rs.ⲆᐃΔ][a("010_110_110")];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("010_011_011")] = ᐃΔ[1025][rs.ⲆᐃΔ][a("010_110_110")];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("000_111_011")] = ᐃΔ[1025][rs.ⲆᐃΔ][a("010_110_110")];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("010_110_010")] = ᐃΔ[1025][rs.ⲆᐃΔ][a("010_110_110")];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("010_111_000")] = ᐃΔ[1025][rs.ⲆᐃΔ][a("010_110_110")];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("010_111_010")] = ᐃΔ[1025][rs.ⲆᐃΔ][a("010_110_110")];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("010_111_011")] = ᐃΔ[1025][rs.ⲆᐃΔ][a("010_110_110")];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("010_111_110")] = ᐃΔ[1025][rs.ⲆᐃΔ][a("010_110_110")];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("010_111_111")] = ᐃΔ[1025][rs.ⲆᐃΔ][a("010_110_110")];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("000_111_110")] = ᐃΔ[1025][rs.ⲆᐃΔ][a("010_110_110")];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("000_111_010")] = ᐃΔ[1025][rs.ⲆᐃΔ][a("010_110_110")];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("011_011_000")] = [Δᐃ.ⲆⵠⵠⲆⲆΔΔ, Δᐃ.ΔⲆΔᐃᐃ, Δᐃ.ⵠⵠΔⵠⲆ, Δᐃ.ⲆⵠⵠΔΔ, Δᐃ.ᐃᐃⵠΔΔ, Δᐃ.ⵠᐃⲆⵠᐃ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("011_011_010")] = [Δᐃ.ⲆⵠⵠⲆⲆΔΔ, Δᐃ.ΔⲆΔᐃᐃ, Δᐃ.ⵠⵠΔⵠⲆ, Δᐃ.ᐃΔᐃⵠᐃ, Δᐃ.ⵠⵠⵠⲆⲆ, Δᐃ.ⲆΔⵠΔⵠᐃᐃ, Δᐃ.ΔΔⵠᐃᐃⲆⵠ, Δᐃ.ⲆⵠⵠΔΔ, Δᐃ.ᐃᐃⵠΔΔ, Δᐃ.ⵠᐃⲆⵠᐃ, Δᐃ.ⵠⵠᐃΔⵠ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("011_011_011")] = [Δᐃ.ᐃⵠᐃⵠΔ, Δᐃ.ⵠΔⵠᐃⲆ, Δᐃ.ᐃᐃΔⲆΔⲆⵠ, Δᐃ.ⵠⵠΔⵠⲆ, Δᐃ.ΔⲆΔᐃᐃ, Δᐃ.ⲆⵠⵠⲆⲆΔΔ, Δᐃ.ᐃⵠΔᐃΔᐃΔ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("011_111_000")] = ᐃΔ[1025][rs.ⲆᐃΔ][a("011_011_010")];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("011_111_010")] = [Δᐃ.ⲆⵠⵠⲆⲆΔΔ, Δᐃ.ΔⲆΔᐃᐃ, Δᐃ.ⵠⵠΔⵠⲆ, Δᐃ.ⵠΔⵠᐃⲆ, Δᐃ.ᐃⵠᐃⵠΔ, Δᐃ.ΔⲆΔⲆΔ, Δᐃ.ᐃΔᐃⵠᐃ, Δᐃ.ΔⲆᐃΔⵠⵠᐃ, Δᐃ.ᐃⵠΔᐃΔᐃΔ, Δᐃ.ᐃⲆⲆΔᐃⲆⵠ, Δᐃ.ⵠⵠⵠⲆⲆ, Δᐃ.ⲆΔⵠΔⵠᐃᐃ, Δᐃ.ΔΔⵠᐃᐃⲆⵠ, Δᐃ.ⲆⵠⵠΔΔ, Δᐃ.ᐃᐃⵠΔΔ, Δᐃ.ΔᐃⲆΔⵠⵠⲆ, Δᐃ.ⲆⲆⵠΔⲆⲆΔ, Δᐃ.ᐃⲆΔⵠᐃⵠⵠ, Δᐃ.ⲆⲆᐃⵠⵠ, Δᐃ.ⵠᐃⲆⵠᐃ, Δᐃ.ⵠⵠᐃΔⵠ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("011_111_011")] = ᐃΔ[1025][rs.ⲆᐃΔ][a("011_111_010")];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("011_111_110")] = ᐃΔ[1025][rs.ⲆᐃΔ][a("011_111_010")];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("011_111_111")] = [Δᐃ.ⲆⵠⵠⲆⲆΔΔ, Δᐃ.ΔⲆΔᐃᐃ, Δᐃ.ⵠⵠΔⵠⲆ, Δᐃ.ᐃᐃΔⲆΔⲆⵠ, Δᐃ.ⵠΔⵠᐃⲆ, Δᐃ.ᐃⵠᐃⵠΔ, Δᐃ.ΔⲆΔⲆΔ, Δᐃ.ΔΔΔᐃⵠΔⵠ, Δᐃ.ᐃΔᐃⵠᐃ, Δᐃ.ΔⲆᐃΔⵠⵠᐃ, Δᐃ.ᐃⵠΔᐃΔᐃΔ, Δᐃ.ᐃⲆⲆΔᐃⲆⵠ, Δᐃ.ⵠⵠⵠⲆⲆ, Δᐃ.ⲆΔⵠΔⵠᐃᐃ, Δᐃ.ΔΔⵠᐃᐃⲆⵠ, Δᐃ.ⲆⵠⵠΔΔ, Δᐃ.ᐃᐃⵠΔΔ, Δᐃ.ΔᐃⲆΔⵠⵠⲆ, Δᐃ.ⲆⲆⵠΔⲆⲆΔ, Δᐃ.ᐃⲆΔⵠᐃⵠⵠ, Δᐃ.ⲆⲆᐃⵠⵠ, Δᐃ.ⵠᐃⲆⵠᐃ, Δᐃ.ⵠⵠᐃΔⵠ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("110_110_000")] = [Δᐃ.ᐃⲆᐃⵠᐃΔᐃ, Δᐃ.ᐃΔᐃⵠᐃ, Δᐃ.ⵠᐃΔⵠⲆⵠⲆ, Δᐃ.ⵠⵠⵠⲆⲆ, Δᐃ.ⲆⵠⵠΔΔ, Δᐃ.ⵠⵠᐃΔⵠ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("110_110_010")] = [Δᐃ.ΔⲆΔⲆΔ, Δᐃ.ᐃⲆᐃⵠᐃΔᐃ, Δᐃ.ᐃΔᐃⵠᐃ, Δᐃ.ᐃⲆⲆΔᐃⲆⵠ, Δᐃ.ⵠⵠⵠⲆⲆ, Δᐃ.ⲆⵠⵠΔΔ, Δᐃ.ⲆⲆᐃⵠⵠ, Δᐃ.ⵠⵠᐃΔⵠ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("110_110_110")] = [Δᐃ.ΔⲆΔⲆΔ, Δᐃ.ΔΔΔᐃⵠΔⵠ, Δᐃ.ᐃⲆᐃⵠᐃΔᐃ, Δᐃ.ᐃΔᐃⵠᐃ, Δᐃ.ᐃⲆⲆΔᐃⲆⵠ, Δᐃ.ⵠⵠⵠⲆⲆ, Δᐃ.ⲆⵠⵠΔΔ, Δᐃ.ⲆⲆᐃⵠⵠ, Δᐃ.ⵠⵠᐃΔⵠ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("110_111_000")] = [Δᐃ.ΔⲆΔᐃᐃ, Δᐃ.ⵠⵠΔⵠⲆ, Δᐃ.ᐃⲆᐃⵠᐃΔᐃ, Δᐃ.ᐃΔᐃⵠᐃ, Δᐃ.ⵠᐃΔⵠⲆⵠⲆ, Δᐃ.ΔᐃⲆⲆΔΔⲆ, Δᐃ.ⵠⵠⵠⲆⲆ, Δᐃ.ⲆΔⵠΔⵠᐃᐃ, Δᐃ.ΔΔⵠᐃᐃⲆⵠ, Δᐃ.ⲆⵠⵠΔΔ, Δᐃ.ᐃᐃⵠΔΔ, Δᐃ.ⵠᐃⲆⵠᐃ, Δᐃ.ⵠⵠᐃΔⵠ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("110_111_110")] = [Δᐃ.ΔⲆΔᐃᐃ, Δᐃ.ⵠⵠΔⵠⲆ, Δᐃ.ⵠΔⵠᐃⲆ, Δᐃ.ᐃⵠᐃⵠΔ, Δᐃ.ΔⲆΔⲆΔ, Δᐃ.ΔΔΔᐃⵠΔⵠ, Δᐃ.ᐃⲆᐃⵠᐃΔᐃ, Δᐃ.ᐃΔᐃⵠᐃ, Δᐃ.ΔⲆᐃΔⵠⵠᐃ, Δᐃ.ΔᐃⲆⲆΔΔⲆ, Δᐃ.ᐃⵠΔᐃΔᐃΔ, Δᐃ.ᐃⲆⲆΔᐃⲆⵠ, Δᐃ.ⵠⵠⵠⲆⲆ, Δᐃ.ⲆΔⵠΔⵠᐃᐃ, Δᐃ.ΔΔⵠᐃᐃⲆⵠ, Δᐃ.ⲆⵠⵠΔΔ, Δᐃ.ᐃᐃⵠΔΔ, Δᐃ.ΔᐃⲆΔⵠⵠⲆ, Δᐃ.ⲆⲆⵠΔⲆⲆΔ, Δᐃ.ᐃⲆΔⵠᐃⵠⵠ, Δᐃ.ⲆⲆᐃⵠⵠ, Δᐃ.ⵠᐃⲆⵠᐃ, Δᐃ.ⵠⵠᐃΔⵠ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("110_111_111")] = ᐃΔ[1025][rs.ⲆᐃΔ][a("110_111_110")];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("110_111_011")] = ᐃΔ[1025][rs.ⲆᐃΔ][a("110_111_110")];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("110_111_010")] = ᐃΔ[1025][rs.ⲆᐃΔ][a("110_111_110")];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("111_111_110")] = [Δᐃ.ⵠⵠᐃΔⵠ, Δᐃ.ⵠᐃⲆⵠᐃ, Δᐃ.ⲆⲆᐃⵠⵠ, Δᐃ.ᐃⲆΔⵠᐃⵠⵠ, Δᐃ.ⲆⲆⵠΔⲆⲆΔ, Δᐃ.ΔᐃⲆΔⵠⵠⲆ, Δᐃ.ᐃᐃⵠΔΔ, Δᐃ.ⲆⵠⵠΔΔ, Δᐃ.ΔΔⵠᐃᐃⲆⵠ, Δᐃ.ⲆΔⵠΔⵠᐃᐃ, Δᐃ.ⵠⵠⵠⲆⲆ, Δᐃ.ᐃⲆⲆΔᐃⲆⵠ, Δᐃ.ᐃⵠΔᐃΔᐃΔ, Δᐃ.ΔᐃⲆⲆΔΔⲆ, Δᐃ.ΔⲆᐃΔⵠⵠᐃ, Δᐃ.ᐃΔᐃⵠᐃ, Δᐃ.ᐃⲆᐃⵠᐃΔᐃ, Δᐃ.ΔⲆΔⲆΔ, Δᐃ.ᐃⵠᐃⵠΔ, Δᐃ.ⵠΔⵠᐃⲆ, Δᐃ.ⵠⵠΔⵠⲆ, Δᐃ.ΔⲆΔᐃᐃ, Δᐃ.ⲆⵠⵠⲆⲆΔΔ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("111_111_011")] = ᐃΔ[1025][rs.ⲆᐃΔ][a("111_111_110")];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("111_111_000")] = [Δᐃ.ⵠᐃΔⵠⲆⵠⲆ, Δᐃ.ᐃΔᐃⵠᐃ, Δᐃ.ᐃⲆᐃⵠᐃΔᐃ, Δᐃ.ⵠⵠΔⵠⲆ, Δᐃ.ΔⲆΔᐃᐃ, Δᐃ.ⲆⵠⵠⲆⲆΔΔ, Δᐃ.ΔᐃⲆⲆΔΔⲆ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("111_111_111")] = [Δᐃ.ⲆⵠⵠⲆⲆΔΔ, Δᐃ.ΔⲆΔᐃᐃ, Δᐃ.ⵠⵠΔⵠⲆ, Δᐃ.ᐃᐃΔⲆΔⲆⵠ, Δᐃ.ⵠΔⵠᐃⲆ, Δᐃ.ᐃⵠᐃⵠΔ, Δᐃ.ΔⲆΔⲆΔ, Δᐃ.ΔΔΔᐃⵠΔⵠ, Δᐃ.ᐃⲆᐃⵠᐃΔᐃ, Δᐃ.ᐃΔᐃⵠᐃ, Δᐃ.ΔⲆᐃΔⵠⵠᐃ, Δᐃ.ᐃⵠΔᐃΔᐃΔ, Δᐃ.ᐃⲆⲆΔᐃⲆⵠ, Δᐃ.ⵠⵠⵠⲆⲆ, Δᐃ.ⲆΔⵠΔⵠᐃᐃ, Δᐃ.ΔΔⵠᐃᐃⲆⵠ, Δᐃ.ⲆⵠⵠΔΔ, Δᐃ.ᐃᐃⵠΔΔ, Δᐃ.ΔᐃⲆΔⵠⵠⲆ, Δᐃ.ⲆⲆⵠΔⲆⲆΔ, Δᐃ.ᐃⲆΔⵠᐃⵠⵠ, Δᐃ.ⲆⲆᐃⵠⵠ, Δᐃ.ⵠᐃⲆⵠᐃ, Δᐃ.ⵠⵠᐃΔⵠ];
    ᐃΔ[1025][rs.ⲆᐃΔ][a("111_111_010")] = ᐃΔ[1025][rs.ⲆᐃΔ][a("111_111_110")];
    ᐃΔ[1025][rs.ⵠⵠⵠ] = [];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("000_010_000")] = [Δᐃ.ⵠⵠΔⵠᐃ, Δᐃ.ᐃⲆⲆⲆᐃ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("000_010_010")] = ᐃΔ[1025][rs.ⵠⵠⵠ][a("000_010_000")];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("000_011_000")] = ᐃΔ[1025][rs.ⵠⵠⵠ][a("000_010_000")];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("000_011_010")] = [Δᐃ.ΔΔⲆⲆᐃ, Δᐃ.ⵠⵠᐃᐃΔ, Δᐃ.ᐃⲆⲆⲆᐃ, Δᐃ.ⵠⵠΔⵠᐃ, Δᐃ.ΔⵠⵠⵠⵠⲆⵠ, Δᐃ.ᐃΔΔⵠΔⲆⵠ, Δᐃ.ⲆΔⲆΔⲆⵠⲆ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("000_011_011")] = [Δᐃ.ΔⵠⲆⵠΔΔΔ, Δᐃ.ΔΔⲆⲆᐃ, Δᐃ.ⵠⵠᐃᐃΔ, Δᐃ.ᐃⲆⲆⲆᐃ, Δᐃ.ⵠⵠΔⵠᐃ, Δᐃ.ΔⵠⵠⵠⵠⲆⵠ, Δᐃ.ᐃΔΔⵠΔⲆⵠ, Δᐃ.ⲆΔⲆΔⲆⵠⲆ, Δᐃ.ΔⲆⲆⵠⲆ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("000_110_000")] = [Δᐃ.ᐃⲆΔΔΔ, Δᐃ.ᐃⲆⲆⲆᐃ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("000_110_010")] = [Δᐃ.ⲆΔᐃⲆⵠ, Δᐃ.ᐃⲆΔΔΔ, Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ᐃⲆⲆⲆᐃ, Δᐃ.ⵠⵠΔⵠᐃ, Δᐃ.ΔⲆⲆⵠⲆ, Δᐃ.ΔᐃⵠΔⲆ, Δᐃ.ⵠⲆⵠⲆⲆΔΔ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("000_110_110")] = [Δᐃ.ⲆΔᐃⲆⵠ, Δᐃ.ᐃΔⵠΔⵠΔΔ, Δᐃ.ΔΔⲆΔⲆᐃⲆ, Δᐃ.ᐃⲆΔΔΔ, Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ᐃⲆⲆⲆᐃ, Δᐃ.ΔⲆⲆⵠⲆ, Δᐃ.ΔᐃⵠΔⲆ, Δᐃ.ⵠⲆⵠⲆⲆΔΔ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("000_111_000")] = [Δᐃ.ᐃⲆΔΔΔ, Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ⵠⲆⵠΔⲆⵠⲆ, Δᐃ.ⲆⵠⵠᐃⲆⵠⵠ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("000_111_111")] = [Δᐃ.ᐃⲆΔΔΔ, Δᐃ.ΔΔⲆΔⲆᐃⲆ, Δᐃ.ⲆΔᐃⲆⵠ, Δᐃ.ⵠⵠᐃᐃΔ, Δᐃ.ΔΔⲆⲆᐃ, Δᐃ.ΔⵠⲆⵠΔΔΔ, Δᐃ.ⲆΔΔᐃΔⵠΔ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("010_010_000")] = [Δᐃ.ᐃⲆⲆⲆᐃ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("010_010_010")] = [Δᐃ.ⵠⵠΔⵠΔⵠΔ, Δᐃ.ᐃⲆⲆⲆᐃ, Δᐃ.ⵠⵠΔⵠᐃ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("010_011_000")] = [Δᐃ.ΔⵠⵠᐃΔ, Δᐃ.ᐃⲆⲆⲆᐃ, Δᐃ.ⵠⵠΔⵠᐃ, Δᐃ.ΔᐃⵠΔⲆ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("010_110_000")] = [Δᐃ.ᐃⲆΔΔΔ, Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ᐃⲆⲆⲆᐃ, Δᐃ.ΔᐃⵠΔⲆ, Δᐃ.ⲆΔⵠⵠⲆ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("010_110_110")] = [Δᐃ.ⲆᐃᐃᐃΔ, Δᐃ.ΔⵠⵠᐃΔ, Δᐃ.ΔΔⲆⲆᐃ, Δᐃ.ⵠⵠᐃᐃΔ, Δᐃ.ⲆΔᐃⲆⵠ, Δᐃ.ΔΔⲆΔⲆᐃⲆ, Δᐃ.ᐃⲆΔΔΔ, Δᐃ.ⲆΔΔᐃΔⵠΔ, Δᐃ.ᐃⵠⲆⵠⵠⲆⲆ, Δᐃ.ⵠⵠΔⵠΔⵠΔ, Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ⵠⲆⵠΔⲆⵠⲆ, Δᐃ.ⲆⵠⵠᐃⲆⵠⵠ, Δᐃ.ᐃⲆⲆⲆᐃ, Δᐃ.ⵠⵠΔⵠᐃ, Δᐃ.ΔⵠⵠⵠⵠⲆⵠ, Δᐃ.ᐃΔΔⵠΔⲆⵠ, Δᐃ.ⲆΔⲆΔⲆⵠⲆ, Δᐃ.ΔⲆⲆⵠⲆ, Δᐃ.ΔᐃⵠΔⲆ, Δᐃ.ⲆΔⵠⵠⲆ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("010_011_010")] = ᐃΔ[1025][rs.ⵠⵠⵠ][a("010_110_110")];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("010_011_011")] = ᐃΔ[1025][rs.ⵠⵠⵠ][a("010_110_110")];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("000_111_011")] = ᐃΔ[1025][rs.ⵠⵠⵠ][a("010_110_110")];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("010_110_010")] = ᐃΔ[1025][rs.ⵠⵠⵠ][a("010_110_110")];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("010_111_000")] = ᐃΔ[1025][rs.ⵠⵠⵠ][a("010_110_110")];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("010_111_010")] = ᐃΔ[1025][rs.ⵠⵠⵠ][a("010_110_110")];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("010_111_011")] = ᐃΔ[1025][rs.ⵠⵠⵠ][a("010_110_110")];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("010_111_110")] = ᐃΔ[1025][rs.ⵠⵠⵠ][a("010_110_110")];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("010_111_111")] = ᐃΔ[1025][rs.ⵠⵠⵠ][a("010_110_110")];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("000_111_110")] = ᐃΔ[1025][rs.ⵠⵠⵠ][a("010_110_110")];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("000_111_010")] = ᐃΔ[1025][rs.ⵠⵠⵠ][a("010_110_110")];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("011_011_000")] = [Δᐃ.ᐃⵠΔΔᐃΔᐃ, Δᐃ.ⲆᐃᐃᐃΔ, Δᐃ.ΔⵠⵠᐃΔ, Δᐃ.ᐃⲆⲆⲆᐃ, Δᐃ.ⵠⵠΔⵠᐃ, Δᐃ.ΔᐃⵠΔⲆ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("011_011_010")] = [Δᐃ.ᐃⵠΔΔᐃΔᐃ, Δᐃ.ⲆᐃᐃᐃΔ, Δᐃ.ΔⵠⵠᐃΔ, Δᐃ.ᐃⲆΔΔΔ, Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ⵠⲆⵠΔⲆⵠⲆ, Δᐃ.ⲆⵠⵠᐃⲆⵠⵠ, Δᐃ.ᐃⲆⲆⲆᐃ, Δᐃ.ⵠⵠΔⵠᐃ, Δᐃ.ΔᐃⵠΔⲆ, Δᐃ.ⲆΔⵠⵠⲆ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("011_011_011")] = [Δᐃ.ⵠⵠᐃᐃΔ, Δᐃ.ΔΔⲆⲆᐃ, Δᐃ.ΔⵠⲆⵠΔΔΔ, Δᐃ.ΔⵠⵠᐃΔ, Δᐃ.ⲆᐃᐃᐃΔ, Δᐃ.ᐃⵠΔΔᐃΔᐃ, Δᐃ.ᐃⵠⲆⵠⵠⲆⲆ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("011_111_000")] = ᐃΔ[1025][rs.ⵠⵠⵠ][a("011_011_010")];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("011_111_010")] = [Δᐃ.ᐃⵠΔΔᐃΔᐃ, Δᐃ.ⲆᐃᐃᐃΔ, Δᐃ.ΔⵠⵠᐃΔ, Δᐃ.ΔΔⲆⲆᐃ, Δᐃ.ⵠⵠᐃᐃΔ, Δᐃ.ⲆΔᐃⲆⵠ, Δᐃ.ᐃⲆΔΔΔ, Δᐃ.ⲆΔΔᐃΔⵠΔ, Δᐃ.ᐃⵠⲆⵠⵠⲆⲆ, Δᐃ.ⵠⵠΔⵠΔⵠΔ, Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ⵠⲆⵠΔⲆⵠⲆ, Δᐃ.ⲆⵠⵠᐃⲆⵠⵠ, Δᐃ.ᐃⲆⲆⲆᐃ, Δᐃ.ⵠⵠΔⵠᐃ, Δᐃ.ΔⵠⵠⵠⵠⲆⵠ, Δᐃ.ᐃΔΔⵠΔⲆⵠ, Δᐃ.ⲆΔⲆΔⲆⵠⲆ, Δᐃ.ΔⲆⲆⵠⲆ, Δᐃ.ΔᐃⵠΔⲆ, Δᐃ.ⲆΔⵠⵠⲆ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("011_111_011")] = ᐃΔ[1025][rs.ⵠⵠⵠ][a("011_111_010")];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("011_111_110")] = ᐃΔ[1025][rs.ⵠⵠⵠ][a("011_111_010")];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("011_111_111")] = [Δᐃ.ᐃⵠΔΔᐃΔᐃ, Δᐃ.ⲆᐃᐃᐃΔ, Δᐃ.ΔⵠⵠᐃΔ, Δᐃ.ΔⵠⲆⵠΔΔΔ, Δᐃ.ΔΔⲆⲆᐃ, Δᐃ.ⵠⵠᐃᐃΔ, Δᐃ.ⲆΔᐃⲆⵠ, Δᐃ.ΔΔⲆΔⲆᐃⲆ, Δᐃ.ᐃⲆΔΔΔ, Δᐃ.ⲆΔΔᐃΔⵠΔ, Δᐃ.ᐃⵠⲆⵠⵠⲆⲆ, Δᐃ.ⵠⵠΔⵠΔⵠΔ, Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ⵠⲆⵠΔⲆⵠⲆ, Δᐃ.ⲆⵠⵠᐃⲆⵠⵠ, Δᐃ.ᐃⲆⲆⲆᐃ, Δᐃ.ⵠⵠΔⵠᐃ, Δᐃ.ΔⵠⵠⵠⵠⲆⵠ, Δᐃ.ᐃΔΔⵠΔⲆⵠ, Δᐃ.ⲆΔⲆΔⲆⵠⲆ, Δᐃ.ΔⲆⲆⵠⲆ, Δᐃ.ΔᐃⵠΔⲆ, Δᐃ.ⲆΔⵠⵠⲆ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("110_110_000")] = [Δᐃ.ⲆᐃⵠⵠⲆᐃᐃ, Δᐃ.ᐃⲆΔΔΔ, Δᐃ.Ⲇᐃᐃᐃᐃᐃⵠ, Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ᐃⲆⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠⲆ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("110_110_010")] = [Δᐃ.ⲆΔᐃⲆⵠ, Δᐃ.ⲆᐃⵠⵠⲆᐃᐃ, Δᐃ.ᐃⲆΔΔΔ, Δᐃ.ⵠⵠΔⵠΔⵠΔ, Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ᐃⲆⲆⲆᐃ, Δᐃ.ΔⲆⲆⵠⲆ, Δᐃ.ⲆΔⵠⵠⲆ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("110_110_110")] = [Δᐃ.ⲆΔᐃⲆⵠ, Δᐃ.ΔΔⲆΔⲆᐃⲆ, Δᐃ.ⲆᐃⵠⵠⲆᐃᐃ, Δᐃ.ᐃⲆΔΔΔ, Δᐃ.ⵠⵠΔⵠΔⵠΔ, Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ᐃⲆⲆⲆᐃ, Δᐃ.ΔⲆⲆⵠⲆ, Δᐃ.ⲆΔⵠⵠⲆ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("110_111_000")] = [Δᐃ.ⲆᐃᐃᐃΔ, Δᐃ.ΔⵠⵠᐃΔ, Δᐃ.ⲆᐃⵠⵠⲆᐃᐃ, Δᐃ.ᐃⲆΔΔΔ, Δᐃ.Ⲇᐃᐃᐃᐃᐃⵠ, Δᐃ.ⵠⵠⲆΔⵠᐃᐃ, Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ⵠⲆⵠΔⲆⵠⲆ, Δᐃ.ⲆⵠⵠᐃⲆⵠⵠ, Δᐃ.ᐃⲆⲆⲆᐃ, Δᐃ.ⵠⵠΔⵠᐃ, Δᐃ.ΔᐃⵠΔⲆ, Δᐃ.ⲆΔⵠⵠⲆ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("110_111_110")] = [Δᐃ.ⲆᐃᐃᐃΔ, Δᐃ.ΔⵠⵠᐃΔ, Δᐃ.ΔΔⲆⲆᐃ, Δᐃ.ⵠⵠᐃᐃΔ, Δᐃ.ⲆΔᐃⲆⵠ, Δᐃ.ΔΔⲆΔⲆᐃⲆ, Δᐃ.ⲆᐃⵠⵠⲆᐃᐃ, Δᐃ.ᐃⲆΔΔΔ, Δᐃ.ⲆΔΔᐃΔⵠΔ, Δᐃ.ⵠⵠⲆΔⵠᐃᐃ, Δᐃ.ᐃⵠⲆⵠⵠⲆⲆ, Δᐃ.ⵠⵠΔⵠΔⵠΔ, Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ⵠⲆⵠΔⲆⵠⲆ, Δᐃ.ⲆⵠⵠᐃⲆⵠⵠ, Δᐃ.ᐃⲆⲆⲆᐃ, Δᐃ.ⵠⵠΔⵠᐃ, Δᐃ.ΔⵠⵠⵠⵠⲆⵠ, Δᐃ.ᐃΔΔⵠΔⲆⵠ, Δᐃ.ⲆΔⲆΔⲆⵠⲆ, Δᐃ.ΔⲆⲆⵠⲆ, Δᐃ.ΔᐃⵠΔⲆ, Δᐃ.ⲆΔⵠⵠⲆ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("110_111_111")] = ᐃΔ[1025][rs.ⵠⵠⵠ][a("110_111_110")];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("110_111_011")] = ᐃΔ[1025][rs.ⵠⵠⵠ][a("110_111_110")];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("110_111_010")] = ᐃΔ[1025][rs.ⵠⵠⵠ][a("110_111_110")];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("111_111_110")] = [Δᐃ.ⲆΔⵠⵠⲆ, Δᐃ.ΔᐃⵠΔⲆ, Δᐃ.ΔⲆⲆⵠⲆ, Δᐃ.ⲆΔⲆΔⲆⵠⲆ, Δᐃ.ᐃΔΔⵠΔⲆⵠ, Δᐃ.ΔⵠⵠⵠⵠⲆⵠ, Δᐃ.ⵠⵠΔⵠᐃ, Δᐃ.ᐃⲆⲆⲆᐃ, Δᐃ.ⲆⵠⵠᐃⲆⵠⵠ, Δᐃ.ⵠⲆⵠΔⲆⵠⲆ, Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ⵠⵠΔⵠΔⵠΔ, Δᐃ.ᐃⵠⲆⵠⵠⲆⲆ, Δᐃ.ⵠⵠⲆΔⵠᐃᐃ, Δᐃ.ⲆΔΔᐃΔⵠΔ, Δᐃ.ᐃⲆΔΔΔ, Δᐃ.ⲆᐃⵠⵠⲆᐃᐃ, Δᐃ.ⲆΔᐃⲆⵠ, Δᐃ.ⵠⵠᐃᐃΔ, Δᐃ.ΔΔⲆⲆᐃ, Δᐃ.ΔⵠⵠᐃΔ, Δᐃ.ⲆᐃᐃᐃΔ, Δᐃ.ᐃⵠΔΔᐃΔᐃ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("111_111_011")] = ᐃΔ[1025][rs.ⵠⵠⵠ][a("111_111_110")];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("111_111_000")] = [Δᐃ.Ⲇᐃᐃᐃᐃᐃⵠ, Δᐃ.ᐃⲆΔΔΔ, Δᐃ.ⲆᐃⵠⵠⲆᐃᐃ, Δᐃ.ΔⵠⵠᐃΔ, Δᐃ.ⲆᐃᐃᐃΔ, Δᐃ.ᐃⵠΔΔᐃΔᐃ, Δᐃ.ⵠⵠⲆΔⵠᐃᐃ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("111_111_111")] = [Δᐃ.ᐃⵠΔΔᐃΔᐃ, Δᐃ.ⲆᐃᐃᐃΔ, Δᐃ.ΔⵠⵠᐃΔ, Δᐃ.ΔⵠⲆⵠΔΔΔ, Δᐃ.ΔΔⲆⲆᐃ, Δᐃ.ⵠⵠᐃᐃΔ, Δᐃ.ⲆΔᐃⲆⵠ, Δᐃ.ΔΔⲆΔⲆᐃⲆ, Δᐃ.ⲆᐃⵠⵠⲆᐃᐃ, Δᐃ.ᐃⲆΔΔΔ, Δᐃ.ⲆΔΔᐃΔⵠΔ, Δᐃ.ᐃⵠⲆⵠⵠⲆⲆ, Δᐃ.ⵠⵠΔⵠΔⵠΔ, Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ⵠⲆⵠΔⲆⵠⲆ, Δᐃ.ⲆⵠⵠᐃⲆⵠⵠ, Δᐃ.ᐃⲆⲆⲆᐃ, Δᐃ.ⵠⵠΔⵠᐃ, Δᐃ.ΔⵠⵠⵠⵠⲆⵠ, Δᐃ.ᐃΔΔⵠΔⲆⵠ, Δᐃ.ⲆΔⲆΔⲆⵠⲆ, Δᐃ.ΔⲆⲆⵠⲆ, Δᐃ.ΔᐃⵠΔⲆ, Δᐃ.ⲆΔⵠⵠⲆ];
    ᐃΔ[1025][rs.ⵠⵠⵠ][a("111_111_010")] = ᐃΔ[1025][rs.ⵠⵠⵠ][a("111_111_110")];
    ᐃΔ[1024] = [];
    ᐃΔ[1024][rs.ⲆᐃΔ] = [];
    ᐃΔ[1024][rs.ⲆᐃΔ][a("000_010_000")] = Δᐃ.ΔⵠᐃⵠⵠⵠΔ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("000_010_010")] = Δᐃ.ⲆⵠᐃⵠΔᐃᐃ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("000_011_000")] = Δᐃ.ᐃΔⲆⲆⵠⲆΔ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("000_011_010")] = Δᐃ.ᐃⵠⲆⲆⵠΔᐃ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("000_011_011")] = Δᐃ.ΔⵠᐃᐃⲆⵠΔ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("000_110_000")] = Δᐃ.ⵠⵠⵠⵠⲆⵠᐃ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("000_110_010")] = Δᐃ.ᐃⲆⲆⵠᐃΔΔ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("000_110_110")] = Δᐃ.ᐃⲆⵠⵠᐃΔⲆ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("000_111_000")] = Δᐃ.ⵠΔᐃⵠᐃᐃⲆ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("000_111_010")] = Δᐃ.ⲆᐃΔᐃⵠⵠᐃ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("000_111_011")] = Δᐃ.ⲆⵠⲆⵠⲆΔΔ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("000_111_110")] = Δᐃ.ⵠⵠⵠⲆᐃⲆⲆ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("000_111_111")] = Δᐃ.ᐃᐃⲆᐃⵠⲆᐃ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("010_010_000")] = Δᐃ.ⵠⵠΔΔΔᐃⲆ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("010_010_010")] = Δᐃ.ΔⵠᐃᐃⲆⲆⲆ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("010_011_000")] = Δᐃ.ᐃΔⵠⲆⵠⵠΔ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("010_011_010")] = Δᐃ.ⲆⵠΔⵠΔΔⲆ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("010_011_011")] = Δᐃ.ⵠⵠⵠⵠᐃᐃΔ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("010_110_000")] = Δᐃ.ᐃᐃᐃⲆᐃᐃᐃ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("010_110_010")] = Δᐃ.ⲆΔⲆᐃⲆⵠΔ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("010_110_110")] = Δᐃ.ᐃΔⲆⵠⲆⲆⲆ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("010_111_000")] = Δᐃ.ΔⲆⵠⵠⵠⵠⲆ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("010_111_010")] = Δᐃ.ⵠᐃᐃᐃΔⵠᐃ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("010_111_011")] = Δᐃ.ⵠⲆⲆᐃⵠⵠΔ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("010_111_110")] = Δᐃ.ⲆⲆᐃⵠⵠΔⵠ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("010_111_111")] = Δᐃ.ᐃᐃⵠΔΔᐃⵠ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("011_011_000")] = Δᐃ.ΔΔΔᐃⵠⵠΔ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("011_011_010")] = Δᐃ.ΔΔⲆⵠⲆⵠΔ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("011_011_011")] = Δᐃ.ᐃᐃⲆΔᐃᐃⲆ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("011_111_000")] = Δᐃ.ΔⵠⲆⵠᐃⵠⲆ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("011_111_010")] = Δᐃ.ΔΔⲆᐃⲆᐃᐃ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("011_111_011")] = Δᐃ.ⵠΔⵠΔᐃⲆⲆ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("011_111_110")] = Δᐃ.ⵠⵠΔⲆⲆⵠⲆ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("011_111_111")] = Δᐃ.ᐃⵠⲆⲆⵠᐃⲆ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("110_110_000")] = Δᐃ.ᐃⲆΔᐃΔⲆΔ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("110_110_010")] = Δᐃ.ᐃⵠΔⵠⲆⵠⲆ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("110_110_110")] = Δᐃ.ΔⲆᐃΔᐃΔⵠ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("110_111_000")] = Δᐃ.ⵠΔⵠⵠⵠᐃⲆ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("110_111_010")] = Δᐃ.ⵠⲆⵠᐃΔᐃΔ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("110_111_011")] = Δᐃ.ⵠⵠⵠⵠⵠΔⵠ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("110_111_110")] = Δᐃ.ΔᐃⵠΔⲆΔᐃ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("110_111_111")] = Δᐃ.ⵠᐃⲆⵠⵠᐃΔ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("111_111_011")] = Δᐃ.ⲆΔⲆⲆⲆΔᐃ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("111_111_110")] = Δᐃ.ΔⵠΔᐃⲆⲆᐃ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("111_111_011")] = Δᐃ.ⲆΔⲆⲆⲆΔᐃ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("111_111_000")] = Δᐃ.ⲆⵠⵠΔΔᐃΔ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("111_111_111")] = Δᐃ.ⵠᐃᐃⵠᐃΔⵠ;
    ᐃΔ[1024][rs.ⲆᐃΔ][a("111_111_010")] = Δᐃ.ⲆⲆⲆⲆⲆⲆᐃ;
    ᐃΔ[1024][rs.ⵠⵠⵠ] = [];
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("000_010_000")] = Δᐃ.ⲆⲆᐃᐃⵠᐃΔ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("000_010_010")] = Δᐃ.ⲆⵠᐃᐃᐃⲆⲆ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("000_011_000")] = Δᐃ.ΔΔⲆⲆⵠᐃⵠ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("000_011_010")] = Δᐃ.ⲆⲆⲆΔᐃᐃⲆ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("000_011_011")] = Δᐃ.ⲆⲆⵠⵠⵠᐃⲆ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("000_110_000")] = Δᐃ.ⵠⵠⲆⲆⲆⵠᐃ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("000_110_010")] = Δᐃ.ⲆᐃΔΔⵠᐃⵠ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("000_110_110")] = Δᐃ.ⲆΔᐃΔⵠᐃᐃ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("000_111_000")] = Δᐃ.ᐃᐃⵠⲆⲆᐃⵠ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("000_111_010")] = Δᐃ.ΔΔⵠⲆⵠΔⲆ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("000_111_011")] = Δᐃ.ᐃⲆᐃᐃⵠⵠⲆ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("000_111_110")] = Δᐃ.ⵠⵠⲆⲆⵠⲆᐃ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("000_111_111")] = Δᐃ.ⲆᐃⲆᐃᐃΔⲆ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("010_010_000")] = Δᐃ.ᐃᐃⲆⲆⲆⲆⵠ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("010_010_010")] = Δᐃ.ᐃᐃᐃⲆⵠᐃⲆ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("010_011_000")] = Δᐃ.ΔᐃⵠᐃΔⲆΔ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("010_011_010")] = Δᐃ.ᐃⵠⲆᐃᐃΔΔ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("010_011_011")] = Δᐃ.ᐃⵠΔⵠⲆⵠⵠ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("010_110_000")] = Δᐃ.ⵠⲆⵠⲆΔΔⲆ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("010_110_010")] = Δᐃ.ⲆⲆⲆΔⵠᐃⲆ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("010_110_110")] = Δᐃ.ⵠⵠⲆⵠᐃⲆΔ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("010_111_000")] = Δᐃ.ⵠᐃΔᐃⲆΔⲆ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("010_111_010")] = Δᐃ.ⵠⵠⵠᐃⵠᐃⵠ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("010_111_011")] = Δᐃ.ⲆᐃᐃⵠⲆⲆΔ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("010_111_110")] = Δᐃ.ᐃⲆⲆᐃᐃⲆᐃ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("010_111_111")] = Δᐃ.ΔⲆᐃᐃΔΔΔ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("011_011_000")] = Δᐃ.ⵠΔΔⵠⲆΔΔ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("011_011_010")] = Δᐃ.ΔⵠᐃⵠΔᐃᐃ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("011_011_011")] = Δᐃ.ᐃΔⲆⲆⵠΔᐃ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("011_111_000")] = Δᐃ.ⵠⵠΔΔᐃⵠⲆ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("011_111_010")] = Δᐃ.ⲆⲆΔⵠᐃⲆⵠ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("011_111_011")] = Δᐃ.ΔΔᐃⲆΔᐃⲆ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("011_111_110")] = Δᐃ.ᐃⲆⲆⲆⲆᐃⲆ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("011_111_111")] = Δᐃ.ⲆⲆΔⵠΔⲆⲆ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("110_110_000")] = Δᐃ.Ⲇᐃᐃⵠⵠᐃⵠ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("110_110_010")] = Δᐃ.ⵠᐃΔⲆⵠⲆⵠ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("110_110_110")] = Δᐃ.ΔᐃΔΔᐃⲆⵠ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("110_111_000")] = Δᐃ.ⲆΔᐃⵠⲆⲆΔ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("110_111_010")] = Δᐃ.ᐃΔⲆΔΔΔⵠ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("110_111_011")] = Δᐃ.ⲆᐃᐃⲆⲆⵠⲆ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("110_111_110")] = Δᐃ.ⲆᐃⵠᐃⵠᐃΔ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("110_111_111")] = Δᐃ.ᐃⲆⵠⲆⵠⲆⲆ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("111_111_011")] = Δᐃ.ⵠΔᐃΔᐃⵠΔ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("111_111_110")] = Δᐃ.ᐃⲆᐃᐃⵠⵠⵠ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("111_111_011")] = Δᐃ.ⵠΔᐃΔᐃⵠΔ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("111_111_000")] = Δᐃ.ⵠᐃⲆΔⵠΔᐃ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("111_111_111")] = Δᐃ.ⲆΔᐃⲆᐃⵠᐃ;
    ᐃΔ[1024][rs.ⵠⵠⵠ][a("111_111_010")] = Δᐃ.ⵠⵠᐃⵠⵠⵠⵠ;
    ᐃΔ[32] = [];
    ᐃΔ[32][rs.ⲆᐃΔ] = Δᐃ.ⲆᐃᐃⵠⵠⲆᐃ;
    ᐃΔ[32][rs.ⵠⵠⵠ] = Δᐃ.ΔᐃⵠⵠᐃΔⵠ;
    ᐃΔ[205] = [];
    ᐃΔ[205][rs.ⲆᐃΔ] = Δᐃ.ΔⲆⲆⵠᐃⲆⵠ;
    ᐃΔ[205][rs.ⵠⵠⵠ] = Δᐃ.ⵠΔΔᐃΔⲆⵠ;
    ᐃΔ[957] = [];
    ᐃΔ[957][rs.ⲆᐃΔ] = Δᐃ.ⵠΔΔⵠΔⲆᐃ;
    ᐃΔ[957][rs.ⵠⵠⵠ] = Δᐃ.ΔⲆᐃⲆⲆⲆᐃ;
    ᐃΔ[207] = [];
    ᐃΔ[207][rs.ⲆᐃΔ] = Δᐃ.ᐃⵠΔⲆΔᐃΔ;
    ᐃΔ[207][rs.ⵠⵠⵠ] = Δᐃ.ΔΔⲆᐃⵠΔΔ;
    ᐃΔ[954] = [];
    ᐃΔ[954][rs.ⲆᐃΔ] = Δᐃ.ᐃᐃΔⲆⲆⵠΔ;
    ᐃΔ[954][rs.ⵠⵠⵠ] = Δᐃ.ⲆΔΔΔΔⵠΔ;
    ᐃΔ[958] = [];
    ᐃΔ[958][rs.ⲆᐃΔ] = Δᐃ.ᐃⲆⵠΔΔΔᐃ;
    ᐃΔ[958][rs.ⵠⵠⵠ] = Δᐃ.ⵠⲆⵠⲆΔⲆΔ;
    ᐃΔ[209] = [];
    ᐃΔ[209][rs.ⲆᐃΔ] = Δᐃ.ΔᐃⵠⲆⲆⲆΔ;
    ᐃΔ[209][rs.ⵠⵠⵠ] = Δᐃ.ΔⲆⵠᐃⵠⲆΔ;
    ᐃΔ[971] = [];
    ᐃΔ[971][rs.ⲆᐃΔ] = Δᐃ.ⵠⲆΔΔᐃⲆΔ;
    ᐃΔ[971][rs.ⵠⵠⵠ] = Δᐃ.ⵠΔᐃⵠⵠᐃⲆ;
    ᐃΔ[211] = [];
    ᐃΔ[211][rs.ⲆᐃΔ] = Δᐃ.ⵠΔᐃᐃΔⵠⵠ;
    ᐃΔ[211][rs.ⵠⵠⵠ] = Δᐃ.ⵠΔⲆΔⲆⵠⲆ;
    ᐃΔ[986] = [];
    ᐃΔ[986][rs.ⲆᐃΔ] = Δᐃ.ⲆⵠⲆⵠⵠⲆⵠ;
    ᐃΔ[986][rs.ⵠⵠⵠ] = Δᐃ.ⵠⵠⵠᐃⲆᐃⲆ;
    ᐃΔ[989] = [];
    ᐃΔ[989][rs.ⲆᐃΔ] = [Δᐃ.ⲆⵠΔᐃΔᐃᐃ];
    ᐃΔ[989][rs.ⵠⵠⵠ] = [Δᐃ.ⵠⲆⲆⵠⲆΔⵠ];
    ᐃΔ[217] = [];
    ᐃΔ[217][rs.ⲆᐃΔ] = Δᐃ.ⵠΔⲆⵠⵠᐃΔ;
    ᐃΔ[217][rs.ⵠⵠⵠ] = Δᐃ.ⵠⵠⵠᐃⵠⵠⲆ;
    ᐃΔ[219] = [];
    ᐃΔ[219][rs.ⲆᐃΔ] = Δᐃ.ⲆⲆⲆΔΔΔΔ;
    ᐃΔ[219][rs.ⵠⵠⵠ] = Δᐃ.ⵠⵠᐃΔⲆⲆᐃ;
    ᐃΔ[218] = [];
    ᐃΔ[218][rs.ⲆᐃΔ] = Δᐃ.ᐃΔΔᐃⲆⲆⲆ;
    ᐃΔ[218][rs.ⵠⵠⵠ] = Δᐃ.ΔⵠⲆΔⵠᐃᐃ;
    ᐃΔ[212] = [];
    ᐃΔ[212][rs.ⲆᐃΔ] = Δᐃ.ⲆΔΔⵠⵠⵠⲆ;
    ᐃΔ[212][rs.ⵠⵠⵠ] = Δᐃ.ⲆΔⵠⵠᐃΔΔ;
    ᐃΔ[213] = [];
    ᐃΔ[213][rs.ⲆᐃΔ] = Δᐃ.ᐃΔⲆⲆᐃⲆⲆ;
    ᐃΔ[213][rs.ⵠⵠⵠ] = Δᐃ.ΔᐃⵠΔΔᐃⲆ;
    ᐃΔ[214] = [];
    ᐃΔ[214][rs.ⲆᐃΔ] = Δᐃ.ᐃⵠⵠⵠⵠΔⵠ;
    ᐃΔ[214][rs.ⵠⵠⵠ] = Δᐃ.ⲆⲆΔΔΔᐃⲆ;
    ᐃΔ[215] = [];
    ᐃΔ[215][rs.ⲆᐃΔ] = Δᐃ.ᐃΔΔⲆⵠᐃΔ;
    ᐃΔ[215][rs.ⵠⵠⵠ] = Δᐃ.ⲆⲆⵠⲆⵠⵠⵠ;
    ᐃΔ[216] = [];
    ᐃΔ[216][rs.ⲆᐃΔ] = Δᐃ.ⵠᐃⲆⲆᐃⵠⲆ;
    ᐃΔ[216][rs.ⵠⵠⵠ] = Δᐃ.ΔᐃΔΔᐃⵠⲆ;
    ᐃΔ[220] = [];
    ᐃΔ[220][rs.ⲆᐃΔ] = Δᐃ.ΔⵠᐃΔⵠⵠⵠ;
    ᐃΔ[220][rs.ⵠⵠⵠ] = Δᐃ.ⵠⲆⵠΔⵠᐃⲆ;
    ᐃΔ[1020] = [];
    ᐃΔ[1020][rs.ⲆᐃΔ] = Δᐃ.ⵠⲆⲆΔⲆⵠⲆ;
    ᐃΔ[1020][rs.ⵠⵠⵠ] = Δᐃ.ⲆⵠⲆⵠΔᐃᐃ;
    ᐃΔ[1021] = [];
    ᐃΔ[1021][rs.ⲆᐃΔ] = Δᐃ.ΔᐃΔⵠᐃⲆⲆ;
    ᐃΔ[1021][rs.ⵠⵠⵠ] = Δᐃ.ΔⲆⵠΔᐃⵠΔ;
    ᐃΔ[39] = [];
    ᐃΔ[39][rs.ⲆᐃΔ] = Δᐃ.ΔⲆⲆᐃⵠⵠᐃ;
    ᐃΔ[39][rs.ⵠⵠⵠ] = Δᐃ.ΔⵠⲆⵠΔⲆⵠ;
    ᐃΔ[1022] = Δᐃ.ΔⲆΔᐃⵠΔᐃ;
    ᐃΔ[1023] = Δᐃ.ⵠΔⵠⵠⵠⲆⲆ;
    ᐃΔ[1041] = [];
    ᐃΔ[1041][rs.ⲆᐃΔ] = [];
    ᐃΔ[1041][rs.ⵠⵠⵠ] = [];
    ᐃΔ[1041][rs.ⲆᐃΔ].push(Δᐃ.ⲆⲆⵠⵠⵠⲆⵠ);
    ᐃΔ[1041][rs.ⲆᐃΔ].push(Δᐃ.ΔⲆᐃⲆⵠⵠᐃ);
    ᐃΔ[1041][rs.ⲆᐃΔ].push(Δᐃ.ⵠⵠᐃⵠⵠᐃᐃ);
    ᐃΔ[1041][rs.ⵠⵠⵠ].push(Δᐃ.ΔΔⵠᐃⵠΔΔ);
    ᐃΔ[1041][rs.ⵠⵠⵠ].push(Δᐃ.ᐃⵠᐃᐃΔⵠⲆ);
    ᐃΔ[1041][rs.ⵠⵠⵠ].push(Δᐃ.ΔᐃᐃᐃⲆΔΔ);
    ᐃΔ[244] = [];
    ᐃΔ[244][rs.ⲆᐃΔ] = [];
    ᐃΔ[244][rs.ⵠⵠⵠ] = [];
    ᐃΔ[244][rs.ⲆᐃΔ].push(Δᐃ.ᐃⲆΔⲆᐃⵠⵠ);
    ᐃΔ[244][rs.ⲆᐃΔ].push(Δᐃ.ⵠⲆⵠᐃᐃΔⲆ);
    ᐃΔ[244][rs.ⲆᐃΔ].push(Δᐃ.ᐃΔⲆΔⲆΔΔ);
    ᐃΔ[244][rs.ⵠⵠⵠ].push(Δᐃ.ⵠᐃⲆᐃⵠᐃᐃ);
    ᐃΔ[244][rs.ⵠⵠⵠ].push(Δᐃ.ᐃⵠⲆⵠⲆΔⵠ);
    ᐃΔ[244][rs.ⵠⵠⵠ].push(Δᐃ.ΔΔᐃⲆΔΔⲆ);
    ᐃΔ[1052] = [];
    ᐃΔ[1052][rs.ⲆᐃΔ] = [];
    ᐃΔ[1052][rs.ⵠⵠⵠ] = [];
    ᐃΔ[1052][rs.ⲆᐃΔ].push(Δᐃ.ⵠⲆΔⲆⵠΔⵠ);
    ᐃΔ[1052][rs.ⲆᐃΔ].push(Δᐃ.ᐃᐃⲆΔᐃΔⲆ);
    ᐃΔ[1052][rs.ⲆᐃΔ].push(Δᐃ.ᐃᐃᐃⵠΔΔⲆ);
    ᐃΔ[1052][rs.ⲆᐃΔ].push(Δᐃ.ᐃⲆΔⲆⲆⵠΔ);
    ᐃΔ[1052][rs.ⲆᐃΔ].push(Δᐃ.ⲆΔΔⵠΔΔⵠ);
    ᐃΔ[1052][rs.ⵠⵠⵠ].push(Δᐃ.ΔᐃⵠⲆⲆΔΔ);
    ᐃΔ[1052][rs.ⵠⵠⵠ].push(Δᐃ.ᐃΔΔⵠΔⵠⵠ);
    ᐃΔ[1052][rs.ⵠⵠⵠ].push(Δᐃ.ⵠⵠΔⵠΔΔᐃ);
    ᐃΔ[1052][rs.ⵠⵠⵠ].push(Δᐃ.ᐃⲆⲆᐃΔⲆΔ);
    ᐃΔ[1052][rs.ⵠⵠⵠ].push(Δᐃ.ΔΔΔⵠΔⵠⲆ);
    ᐃΔ[450] = [];
    ᐃΔ[450][rs.ⲆᐃΔ] = Δᐃ.ᐃᐃΔⵠΔⲆΔ;
    ᐃΔ[450][rs.ⵠⵠⵠ] = Δᐃ.ⵠᐃⵠⵠⵠⵠᐃ;
    ᐃΔ[453] = [];
    ᐃΔ[453][rs.ⲆᐃΔ] = Δᐃ.ΔⲆᐃΔΔⵠⵠ;
    ᐃΔ[453][rs.ⵠⵠⵠ] = Δᐃ.ΔᐃΔΔᐃᐃⲆ;
    ᐃΔ[454] = [];
    ᐃΔ[454][rs.ⲆᐃΔ] = Δᐃ.ᐃΔΔᐃⵠⲆⵠ;
    ᐃΔ[454][rs.ⵠⵠⵠ] = Δᐃ.ᐃΔΔⲆᐃᐃⵠ;
    ᐃΔ[464] = Δᐃ.ⵠⲆΔΔⲆⵠᐃ;
    ᐃΔ[468] = Δᐃ.ᐃⵠⲆⲆⵠⵠᐃ;
    ᐃΔ[469] = Δᐃ.ⵠᐃⵠⵠΔᐃⲆ;
    ᐃΔ[20] = [];
    ᐃΔ[20][rs.ⲆᐃΔ] = Δᐃ.ⵠᐃᐃΔᐃΔᐃ;
    ᐃΔ[20][rs.ⵠⵠⵠ] = Δᐃ.ᐃⲆᐃΔᐃⲆΔ;
    ᐃΔ[920] = [];
    ᐃΔ[920][rs.ⲆᐃΔ] = Δᐃ.ⲆⲆⵠᐃⲆⵠΔ;
    ᐃΔ[920][rs.ⵠⵠⵠ] = Δᐃ.ᐃΔⲆᐃΔΔⲆ;
    ᐃΔ[21] = [];
    ᐃΔ[21][rs.ⲆᐃΔ] = Δᐃ.ⲆΔⲆᐃᐃΔⲆ;
    ᐃΔ[21][rs.ⵠⵠⵠ] = Δᐃ.ᐃΔΔΔᐃⲆⲆ;
    ᐃΔ[924] = [];
    ᐃΔ[924][rs.ⲆᐃΔ] = Δᐃ.ⲆⲆⵠᐃⲆⵠΔ;
    ᐃΔ[924][rs.ⵠⵠⵠ] = Δᐃ.ᐃΔⲆᐃΔΔⲆ;
    ᐃΔ[44] = [];
    ᐃΔ[44][rs.ⲆᐃΔ] = Δᐃ.ᐃᐃⲆᐃⵠⲆⵠ;
    ᐃΔ[44][rs.ⵠⵠⵠ] = Δᐃ.ⲆⵠΔΔⲆΔᐃ;
    ᐃΔ[19] = [];
    ᐃΔ[19][rs.ⲆᐃΔ] = Δᐃ.ⲆⵠᐃⲆⲆᐃΔ;
    ᐃΔ[19][rs.ⵠⵠⵠ] = Δᐃ.ΔⲆⲆⲆⲆᐃᐃ;
    ᐃΔ[34] = [];
    ᐃΔ[34][rs.ⲆᐃΔ] = Δᐃ.ΔⲆⲆⵠⵠⵠⲆ;
    ᐃΔ[34][rs.ⵠⵠⵠ] = Δᐃ.ⲆⵠΔⲆⲆᐃᐃ;
    ᐃΔ[17] = [];
    ᐃΔ[17][rs.ⲆᐃΔ] = Δᐃ.ⵠᐃⵠᐃᐃᐃᐃ;
    ᐃΔ[17][rs.ⵠⵠⵠ] = Δᐃ.ΔΔⲆⵠΔⵠΔ;
    ᐃΔ[63] = [];
    ᐃΔ[63][rs.ⲆᐃΔ] = Δᐃ.ᐃᐃⵠᐃⲆΔΔ;
    ᐃΔ[63][rs.ⵠⵠⵠ] = Δᐃ.ⲆᐃᐃⲆⵠⵠⵠ;
    ᐃΔ[60] = [];
    ᐃΔ[60][rs.ⲆᐃΔ] = Δᐃ.ⲆⵠⲆΔΔⵠΔ;
    ᐃΔ[60][rs.ⵠⵠⵠ] = Δᐃ.ᐃΔᐃⲆᐃΔⵠ;
    ᐃΔ[94] = [];
    ᐃΔ[94][rs.ⲆᐃΔ] = Δᐃ.ⲆⲆⲆⵠⲆΔⵠ;
    ᐃΔ[94][rs.ⵠⵠⵠ] = Δᐃ.ⲆΔΔΔⵠᐃⲆ;
    ᐃΔ[95] = [];
    ᐃΔ[95][rs.ⲆᐃΔ] = Δᐃ.ⵠⵠⲆΔᐃΔᐃ;
    ᐃΔ[95][rs.ⵠⵠⵠ] = Δᐃ.ᐃⲆΔΔᐃⲆΔ;
    ᐃΔ[96] = [];
    ᐃΔ[96][rs.ⲆᐃΔ] = Δᐃ.ΔᐃᐃⵠΔⵠⵠ;
    ᐃΔ[96][rs.ⵠⵠⵠ] = Δᐃ.ΔⲆⵠⵠΔᐃⲆ;
    ᐃΔ[97] = [];
    ᐃΔ[97][rs.ⲆᐃΔ] = Δᐃ.ⲆΔᐃΔΔⵠΔ;
    ᐃΔ[97][rs.ⵠⵠⵠ] = Δᐃ.ᐃⲆᐃΔⲆⲆΔ;
    ᐃΔ[98] = [];
    ᐃΔ[98][rs.ⲆᐃΔ] = Δᐃ.ⲆⲆⲆΔᐃΔⵠ;
    ᐃΔ[98][rs.ⵠⵠⵠ] = Δᐃ.ΔⲆΔⵠᐃᐃᐃ;
    ᐃΔ[99] = [];
    ᐃΔ[99][rs.ⲆᐃΔ] = Δᐃ.ΔΔⵠᐃΔΔΔ;
    ᐃΔ[99][rs.ⵠⵠⵠ] = Δᐃ.ⲆⲆⵠⲆΔⵠᐃ;
    ᐃΔ[90] = [];
    ᐃΔ[90][rs.ⲆᐃΔ] = Δᐃ.ΔΔⵠⲆⵠⲆⲆ;
    ᐃΔ[90][rs.ⵠⵠⵠ] = Δᐃ.ΔᐃⲆⲆᐃΔΔ;
    ᐃΔ[91] = [];
    ᐃΔ[91][rs.ⲆᐃΔ] = Δᐃ.ΔⵠⲆᐃⵠᐃⵠ;
    ᐃΔ[91][rs.ⵠⵠⵠ] = Δᐃ.ΔᐃΔⵠⵠΔΔ;
    ᐃΔ[71] = [];
    ᐃΔ[71][rs.ⲆᐃΔ] = Δᐃ.ΔⵠⵠΔⲆⵠⲆ;
    ᐃΔ[71][rs.ⵠⵠⵠ] = Δᐃ.ⲆⵠⲆΔᐃΔᐃ;
    ᐃΔ[72] = [];
    ᐃΔ[72][rs.ⲆᐃΔ] = Δᐃ.ΔⵠΔⵠⵠᐃⲆ;
    ᐃΔ[72][rs.ⵠⵠⵠ] = Δᐃ.ⲆⲆⵠᐃⵠΔΔ;
    ᐃΔ[73] = [];
    ᐃΔ[73][rs.ⲆᐃΔ] = Δᐃ.ⵠᐃⵠⲆᐃⵠⲆ;
    ᐃΔ[73][rs.ⵠⵠⵠ] = Δᐃ.ⲆΔΔⵠⵠⲆΔ;
    ᐃΔ[74] = [];
    ᐃΔ[74][rs.ⲆᐃΔ] = Δᐃ.ΔⲆⵠᐃᐃᐃᐃ;
    ᐃΔ[74][rs.ⵠⵠⵠ] = Δᐃ.ⲆⵠⲆⵠΔⲆᐃ;
    ᐃΔ[75] = [];
    ᐃΔ[75][rs.ⲆᐃΔ] = Δᐃ.ᐃΔⵠⲆⲆⲆⲆ;
    ᐃΔ[75][rs.ⵠⵠⵠ] = Δᐃ.ᐃᐃᐃΔⲆᐃᐃ;
    ᐃΔ[76] = [];
    ᐃΔ[76][rs.ⲆᐃΔ] = Δᐃ.ΔⲆΔΔⲆΔᐃ;
    ᐃΔ[76][rs.ⵠⵠⵠ] = Δᐃ.ΔⵠⲆᐃΔΔⵠ;
    ᐃΔ[101] = [];
    ᐃΔ[101][rs.ⲆᐃΔ] = Δᐃ.ⲆᐃᐃΔⲆᐃᐃ;
    ᐃΔ[101][rs.ⵠⵠⵠ] = Δᐃ.ⲆⲆⵠⵠΔΔⵠ;
    ᐃΔ[64] = [];
    ᐃΔ[64][rs.ⲆᐃΔ] = Δᐃ.ⵠᐃⵠᐃⵠⲆⵠ;
    ᐃΔ[64][rs.ⵠⵠⵠ] = Δᐃ.ᐃᐃᐃΔⲆΔⵠ;
    ᐃΔ[102] = [];
    ᐃΔ[102][rs.ⲆᐃΔ] = Δᐃ.ⲆⲆⵠᐃⲆⲆⵠ;
    ᐃΔ[102][rs.ⵠⵠⵠ] = Δᐃ.ᐃΔᐃⵠⲆⵠᐃ;
    ᐃΔ[65] = [];
    ᐃΔ[65][rs.ⲆᐃΔ] = Δᐃ.ⵠⲆⲆⲆᐃⲆⲆ;
    ᐃΔ[65][rs.ⵠⵠⵠ] = Δᐃ.ᐃⵠⲆⵠⵠⲆΔ;
    ᐃΔ[103] = [];
    ᐃΔ[103][rs.ⲆᐃΔ] = Δᐃ.ⲆⲆᐃⲆⵠⵠᐃ;
    ᐃΔ[103][rs.ⵠⵠⵠ] = Δᐃ.ⲆΔⵠΔⵠΔⵠ;
    ᐃΔ[66] = [];
    ᐃΔ[66][rs.ⲆᐃΔ] = Δᐃ.ⲆΔᐃⲆⵠⵠⵠ;
    ᐃΔ[66][rs.ⵠⵠⵠ] = Δᐃ.ⵠΔᐃᐃⲆⲆΔ;
    ᐃΔ[104] = [];
    ᐃΔ[104][rs.ⲆᐃΔ] = Δᐃ.ΔⵠⲆᐃⲆᐃᐃ;
    ᐃΔ[104][rs.ⵠⵠⵠ] = Δᐃ.ΔⲆⲆⲆΔΔⵠ;
    ᐃΔ[67] = [];
    ᐃΔ[67][rs.ⲆᐃΔ] = Δᐃ.ⵠᐃᐃΔⲆΔΔ;
    ᐃΔ[67][rs.ⵠⵠⵠ] = Δᐃ.ⵠΔⲆⲆΔⵠⵠ;
    ᐃΔ[105] = [];
    ᐃΔ[105][rs.ⲆᐃΔ] = Δᐃ.ⵠⲆΔᐃⲆⵠⵠ;
    ᐃΔ[105][rs.ⵠⵠⵠ] = Δᐃ.ΔⲆⲆⲆᐃΔⵠ;
    ᐃΔ[68] = [];
    ᐃΔ[68][rs.ⲆᐃΔ] = Δᐃ.ᐃⲆⲆΔⵠΔᐃ;
    ᐃΔ[68][rs.ⵠⵠⵠ] = Δᐃ.ΔΔᐃⵠⵠⲆΔ;
    ᐃΔ[106] = [];
    ᐃΔ[106][rs.ⲆᐃΔ] = Δᐃ.ⵠᐃⵠⵠⵠΔΔ;
    ᐃΔ[106][rs.ⵠⵠⵠ] = Δᐃ.ᐃᐃⲆⵠⵠⵠᐃ;
    ᐃΔ[69] = [];
    ᐃΔ[69][rs.ⲆᐃΔ] = Δᐃ.ⵠⵠΔᐃⲆΔΔ;
    ᐃΔ[69][rs.ⵠⵠⵠ] = Δᐃ.ᐃΔⲆⵠⲆᐃⵠ;
    ᐃΔ[107] = [];
    ᐃΔ[107][rs.ⲆᐃΔ] = Δᐃ.ⲆΔⲆᐃᐃΔᐃ;
    ᐃΔ[107][rs.ⵠⵠⵠ] = Δᐃ.ⵠⵠⲆⵠⲆⵠⲆ;
    ᐃΔ[70] = [];
    ᐃΔ[70][rs.ⲆᐃΔ] = Δᐃ.ᐃᐃⲆΔⲆΔΔ;
    ᐃΔ[70][rs.ⵠⵠⵠ] = Δᐃ.ⵠⵠΔᐃΔⲆᐃ;
    ᐃΔ[80] = [];
    ᐃΔ[80][rs.ⲆᐃΔ] = Δᐃ.ΔⲆⲆⲆⵠⵠᐃ;
    ᐃΔ[80][rs.ⵠⵠⵠ] = Δᐃ.ᐃᐃⲆⲆᐃᐃⵠ;
    ᐃΔ[81] = [];
    ᐃΔ[81][rs.ⲆᐃΔ] = Δᐃ.ᐃⵠⲆᐃⵠᐃᐃ;
    ᐃΔ[81][rs.ⵠⵠⵠ] = Δᐃ.ⵠⲆᐃⵠᐃΔΔ;
    ᐃΔ[22] = [];
    ᐃΔ[22][rs.ⲆᐃΔ] = Δᐃ.ᐃⲆᐃⲆᐃᐃᐃ;
    ᐃΔ[22][rs.ⵠⵠⵠ] = Δᐃ.ΔⲆⲆⲆⵠⵠΔ;
    ᐃΔ[928] = [];
    ᐃΔ[928][rs.ⲆᐃΔ] = Δᐃ.ⲆⲆᐃⵠⵠⲆⵠ;
    ᐃΔ[928][rs.ⵠⵠⵠ] = Δᐃ.ⲆᐃΔᐃⲆⵠⵠ;
    ᐃΔ[935] = [];
    ᐃΔ[935][rs.ⲆᐃΔ] = [];
    ᐃΔ[935][rs.ⵠⵠⵠ] = [];
    ᐃΔ[935][rs.ⲆᐃΔ].push(Δᐃ.ⵠΔᐃⲆᐃⲆᐃⲆⲆ);
    ᐃΔ[935][rs.ⲆᐃΔ].push(Δᐃ.ΔΔΔᐃⲆⲆⵠᐃᐃ);
    ᐃΔ[935][rs.ⵠⵠⵠ].push(Δᐃ.ΔΔΔᐃⲆⲆⵠᐃᐃ);
    ᐃΔ[935][rs.ⵠⵠⵠ].push(Δᐃ.ⲆᐃⲆⲆⵠⵠⲆᐃⲆ);
    ᐃΔ[941] = [];
    ᐃΔ[941][rs.ⲆᐃΔ] = [];
    ᐃΔ[941][rs.ⵠⵠⵠ] = [];
    ᐃΔ[941][rs.ⲆᐃΔ].push(Δᐃ.ⲆⲆⵠⲆΔΔᐃ);
    ᐃΔ[941][rs.ⲆᐃΔ].push(Δᐃ.ᐃⵠⲆΔⵠⲆⲆ);
    ᐃΔ[941][rs.ⲆᐃΔ].push(Δᐃ.ᐃΔⵠⵠᐃⵠΔ);
    ᐃΔ[941][rs.ⵠⵠⵠ].push(Δᐃ.ᐃᐃᐃⵠᐃⲆⵠ);
    ᐃΔ[941][rs.ⵠⵠⵠ].push(Δᐃ.ⲆⲆΔΔᐃᐃΔ);
    ᐃΔ[941][rs.ⵠⵠⵠ].push(Δᐃ.ⲆⲆⵠΔΔⲆⵠ);
    ᐃΔ[53] = [];
    ᐃΔ[53][rs.ⲆᐃΔ] = Δᐃ.ΔⲆⵠᐃⵠᐃⲆ;
    ᐃΔ[53][rs.ⵠⵠⵠ] = Δᐃ.ⵠⲆⲆΔΔⲆⵠ;
    ᐃΔ[54] = [];
    ᐃΔ[54][rs.ⲆᐃΔ] = Δᐃ.ⵠⵠΔⲆⲆΔᐃ;
    ᐃΔ[54][rs.ⵠⵠⵠ] = Δᐃ.ⲆⲆᐃᐃⵠⵠⵠ;
    ᐃΔ[241] = [];
    ᐃΔ[241][rs.ⲆᐃΔ] = [];
    ᐃΔ[241][rs.ⵠⵠⵠ] = [];
    ᐃΔ[241][rs.ⲆᐃΔ].push(Δᐃ.ⵠⵠⵠⲆΔΔΔ);
    ᐃΔ[241][rs.ⲆᐃΔ].push(Δᐃ.ⵠᐃᐃⵠΔⲆΔ);
    ᐃΔ[241][rs.ⲆᐃΔ].push(Δᐃ.ⵠⵠⵠᐃⲆⲆᐃ);
    ᐃΔ[241][rs.ⵠⵠⵠ].push(Δᐃ.ᐃⵠⲆⲆΔᐃⵠ);
    ᐃΔ[241][rs.ⵠⵠⵠ].push(Δᐃ.ⵠⵠΔᐃⲆΔⲆ);
    ᐃΔ[241][rs.ⵠⵠⵠ].push(Δᐃ.ⵠⵠⵠᐃΔᐃⲆ);
    ᐃΔ[202] = [];
    ᐃΔ[202][rs.ⲆᐃΔ] = [];
    ᐃΔ[202][rs.ⵠⵠⵠ] = [];
    ᐃΔ[202][rs.ⲆᐃΔ].push(Δᐃ.ⲆΔΔⲆᐃⵠᐃ);
    ᐃΔ[202][rs.ⲆᐃΔ].push(Δᐃ.ⲆⲆⲆᐃᐃΔΔ);
    ᐃΔ[202][rs.ⲆᐃΔ].push(Δᐃ.ΔΔΔⲆᐃᐃⲆ);
    ᐃΔ[202][rs.ⵠⵠⵠ].push(Δᐃ.ⲆⲆⲆⲆΔⲆΔ);
    ᐃΔ[202][rs.ⵠⵠⵠ].push(Δᐃ.ⲆⲆⲆⵠⲆⲆⵠ);
    ᐃΔ[202][rs.ⵠⵠⵠ].push(Δᐃ.ⲆᐃΔΔΔⲆⲆ);
    ᐃΔ[203] = [];
    ᐃΔ[203][rs.ⲆᐃΔ] = [];
    ᐃΔ[203][rs.ⵠⵠⵠ] = [];
    ᐃΔ[203][rs.ⲆᐃΔ].push(Δᐃ.ᐃⲆⵠⵠⲆᐃⵠ);
    ᐃΔ[203][rs.ⲆᐃΔ].push(Δᐃ.ΔᐃᐃΔΔⲆⲆ);
    ᐃΔ[203][rs.ⲆᐃΔ].push(Δᐃ.ᐃⵠⵠΔⵠⵠⵠ);
    ᐃΔ[203][rs.ⲆᐃΔ].push(Δᐃ.ⵠΔᐃⵠⵠΔⵠ);
    ᐃΔ[203][rs.ⲆᐃΔ].push(Δᐃ.ⲆΔⵠⲆΔΔⲆ);
    ᐃΔ[203][rs.ⲆᐃΔ].push(Δᐃ.ᐃᐃᐃᐃᐃⲆⲆ);
    ᐃΔ[203][rs.ⵠⵠⵠ].push(Δᐃ.ⵠⲆⲆᐃⵠᐃⵠ);
    ᐃΔ[203][rs.ⵠⵠⵠ].push(Δᐃ.ᐃᐃⲆⵠΔΔⵠ);
    ᐃΔ[203][rs.ⵠⵠⵠ].push(Δᐃ.ⲆΔⵠⲆΔᐃΔ);
    ᐃΔ[203][rs.ⵠⵠⵠ].push(Δᐃ.ᐃⵠΔᐃⲆⲆⲆ);
    ᐃΔ[203][rs.ⵠⵠⵠ].push(Δᐃ.ⲆⵠⵠⲆΔⵠⵠ);
    ᐃΔ[203][rs.ⵠⵠⵠ].push(Δᐃ.ⲆᐃⲆⵠⵠΔΔ);
    ᐃΔ[rs.ΔⵠⲆⲆⵠ] = [];
    ᐃΔ[rs.ΔⵠⲆⲆⵠ][rs.ⲆᐃΔ] = [];
    ᐃΔ[rs.ΔⵠⲆⲆⵠ][rs.ⵠⵠⵠ] = [];
    ᐃΔ[rs.ΔⵠⲆⲆⵠ][rs.ⲆᐃΔ].push(Δᐃ.ⵠᐃⵠⲆΔⵠᐃ);
    ᐃΔ[rs.ΔⵠⲆⲆⵠ][rs.ⲆᐃΔ].push(Δᐃ.ⵠⲆᐃΔΔΔⲆ);
    ᐃΔ[rs.ΔⵠⲆⲆⵠ][rs.ⲆᐃΔ].push(Δᐃ.ᐃΔⵠΔΔᐃᐃ);
    ᐃΔ[rs.ΔⵠⲆⲆⵠ][rs.ⲆᐃΔ].push(Δᐃ.ⵠᐃⵠⲆⲆⲆᐃ);
    ᐃΔ[rs.ΔⵠⲆⲆⵠ][rs.ⲆᐃΔ].push(Δᐃ.ᐃⵠⲆᐃⵠⵠⲆ);
    ᐃΔ[rs.ΔⵠⲆⲆⵠ][rs.ⲆᐃΔ].push(Δᐃ.ᐃΔΔⲆⲆⲆⵠ);
    ᐃΔ[rs.ΔⵠⲆⲆⵠ][rs.ⵠⵠⵠ].push(Δᐃ.ᐃⵠⵠⲆⲆⲆⵠ);
    ᐃΔ[rs.ΔⵠⲆⲆⵠ][rs.ⵠⵠⵠ].push(Δᐃ.ⲆᐃⲆΔΔⵠΔ);
    ᐃΔ[rs.ΔⵠⲆⲆⵠ][rs.ⵠⵠⵠ].push(Δᐃ.ΔⲆᐃΔᐃᐃⲆ);
    ᐃΔ[rs.ΔⵠⲆⲆⵠ][rs.ⵠⵠⵠ].push(Δᐃ.ⵠⵠⵠΔⲆⲆᐃ);
    ᐃΔ[rs.ΔⵠⲆⲆⵠ][rs.ⵠⵠⵠ].push(Δᐃ.ᐃᐃⵠⵠᐃⲆⵠ);
    ᐃΔ[rs.ΔⵠⲆⲆⵠ][rs.ⵠⵠⵠ].push(Δᐃ.ΔⲆΔᐃⲆᐃᐃ);
    ᐃΔ[918] = [];
    ᐃΔ[918][rs.ⲆᐃΔ] = Δᐃ.ᐃⵠᐃⵠⵠΔⵠ;
    ᐃΔ[918][rs.ⵠⵠⵠ] = Δᐃ.ᐃⵠⵠᐃᐃⲆΔ;
    ᐃΔ[919] = Δᐃ.ᐃⲆⵠⵠᐃⲆⵠ;
    ᐃΔ[56] = [];
    ᐃΔ[56][rs.ⲆᐃΔ] = Δᐃ.ⵠⲆᐃⲆΔΔⵠ;
    ᐃΔ[56][rs.ⵠⵠⵠ] = Δᐃ.ⵠᐃⵠⵠᐃⲆⵠ;
    ᐃΔ[223] = [];
    ᐃΔ[223][rs.ⲆᐃΔ] = Δᐃ.ᐃΔⲆΔⲆⲆⲆ;
    ᐃΔ[223][rs.ⵠⵠⵠ] = Δᐃ.ⲆᐃⵠᐃⲆⵠⲆ;
    ᐃΔ[224] = [];
    ᐃΔ[224][rs.ⲆᐃΔ] = Δᐃ.ΔⲆᐃΔᐃⵠⲆ;
    ᐃΔ[224][rs.ⵠⵠⵠ] = Δᐃ.ΔⵠⲆⵠⲆΔΔ;
    ᐃΔ[236] = [];
    ᐃΔ[236][rs.ⲆᐃΔ] = Δᐃ.ⲆᐃᐃⲆᐃⲆΔ;
    ᐃΔ[236][rs.ⵠⵠⵠ] = Δᐃ.ⵠᐃᐃᐃΔⵠⵠ;
    ᐃΔ[1033] = [];
    ᐃΔ[1033][rs.ⲆᐃΔ] = Δᐃ.ⲆΔⲆᐃⲆΔᐃ;
    ᐃΔ[1033][rs.ⵠⵠⵠ] = Δᐃ.ⲆⵠᐃⲆⵠᐃᐃ;
    ᐃΔ[1034] = Δᐃ.ⵠⵠᐃⵠΔⲆΔ;
    ᐃΔ[1150] = [];
    ᐃΔ[1150][rs.ⲆᐃΔ] = Δᐃ.ⲆⲆᐃⲆᐃⵠⵠ;
    ᐃΔ[1150][rs.ⵠⵠⵠ] = Δᐃ.ᐃⵠⲆⲆⵠⲆⵠ;
    ᐃΔ[1152] = [];
    ᐃΔ[1152][rs.ⲆᐃΔ] = Δᐃ.ΔΔⲆⵠⵠⵠᐃ;
    ᐃΔ[1152][rs.ⵠⵠⵠ] = Δᐃ.ᐃⲆⵠᐃᐃⵠᐃ;
    ᐃΔ[1149] = Δᐃ.Ⲇⵠᐃᐃᐃⵠᐃ;
    ᐃΔ[1151] = Δᐃ.ᐃΔᐃΔⲆⲆⲆ;
    ᐃΔ[1153] = Δᐃ.ΔⵠᐃΔᐃⵠΔ;
    ᐃΔ[1143] = [];
    ᐃΔ[1143][rs.ⲆᐃΔ] = Δᐃ.ⵠⲆⵠᐃΔΔΔ;
    ᐃΔ[1143][rs.ⵠⵠⵠ] = Δᐃ.ᐃⵠᐃⵠⵠⵠⵠ;
    ᐃΔ[1145] = [];
    ᐃΔ[1145][rs.ⲆᐃΔ] = Δᐃ.Δⵠᐃᐃⵠⵠⵠ;
    ᐃΔ[1145][rs.ⵠⵠⵠ] = Δᐃ.ᐃⲆⵠᐃᐃΔᐃ;
    ᐃΔ[1146] = [];
    ᐃΔ[1146][rs.ⲆᐃΔ] = Δᐃ.ⲆᐃΔᐃⲆᐃΔ;
    ᐃΔ[1146][rs.ⵠⵠⵠ] = Δᐃ.ⵠⲆⲆⵠΔⲆⵠ;
    ᐃΔ[1144] = Δᐃ.ⵠᐃⲆᐃⲆᐃⲆ;
    ᐃΔ[1148] = Δᐃ.ΔᐃᐃΔⲆᐃΔ;
    ᐃΔ[1147] = Δᐃ.ⵠᐃΔΔⲆΔΔ;
    ᐃΔ[1053] = [];
    ᐃΔ[1053][rs.ⲆᐃΔ] = Δᐃ.ᐃⲆⲆⵠⵠᐃⲆ;
    ᐃΔ[1053][rs.ⵠⵠⵠ] = Δᐃ.ⵠⵠᐃΔⲆᐃᐃ;
    ᐃΔ[1055] = [];
    ᐃΔ[1055][rs.ⲆᐃΔ] = Δᐃ.ⵠⵠⲆᐃⲆⲆΔ;
    ᐃΔ[1055][rs.ⵠⵠⵠ] = Δᐃ.ᐃⵠⵠⲆΔⵠⲆ;
    ᐃΔ[231] = [];
    ᐃΔ[231][rs.ⲆᐃΔ] = Δᐃ.ⵠⲆⲆⲆⲆΔⵠ;
    ᐃΔ[231][rs.ⵠⵠⵠ] = Δᐃ.ΔᐃΔⵠⵠⵠⵠ;
    ᐃΔ[1060] = [];
    ᐃΔ[1060][rs.ⲆᐃΔ] = Δᐃ.ᐃⵠⵠᐃⲆⲆⵠ;
    ᐃΔ[1060][rs.ⵠⵠⵠ] = Δᐃ.ⵠⲆⵠⵠⵠᐃΔ;
    ᐃΔ[1063] = [];
    ᐃΔ[1063][rs.ⲆᐃΔ] = Δᐃ.ΔⲆⲆᐃΔⲆⲆ;
    ᐃΔ[1063][rs.ⵠⵠⵠ] = Δᐃ.ᐃⲆΔᐃᐃᐃⵠ;
    ᐃΔ[1059] = [];
    ᐃΔ[1059][rs.ⲆᐃΔ] = Δᐃ.ⲆⵠⲆΔΔⲆΔ;
    ᐃΔ[1059][rs.ⵠⵠⵠ] = Δᐃ.ⵠⲆⲆⵠⵠᐃᐃ;
    ᐃΔ[1062] = [];
    ᐃΔ[1062][rs.ⲆᐃΔ] = Δᐃ.ⲆⵠⲆΔᐃΔⵠ;
    ᐃΔ[1062][rs.ⵠⵠⵠ] = Δᐃ.ᐃΔⲆΔⵠⲆΔ;
    ᐃΔ[1056] = Δᐃ.ᐃⲆΔⲆΔⵠΔ;
    ᐃΔ[1057] = Δᐃ.ΔᐃⵠⲆΔΔΔ;
    ᐃΔ[1058] = Δᐃ.ⵠΔⵠⲆⵠⵠᐃ;
    ᐃΔ[1065] = Δᐃ.ⲆⲆᐃᐃΔᐃΔ;
    ᐃΔ[1066] = Δᐃ.ΔᐃᐃᐃⲆⵠⲆ;
    ᐃΔ[1067] = Δᐃ.ⵠᐃᐃⲆⲆⲆⲆ;
    ᐃΔ[1222] = [];
    ᐃΔ[1222][rs.ⲆᐃΔ] = Δᐃ.ⵠᐃⲆⵠᐃⵠᐃ;
    ᐃΔ[1222][rs.ⵠⵠⵠ] = Δᐃ.ᐃΔᐃⲆⲆΔᐃ;
    ᐃΔ[248] = [];
    ᐃΔ[248][rs.ⲆᐃΔ] = Δᐃ.ⲆΔⲆⲆⲆᐃⵠ;
    ᐃΔ[248][rs.ⵠⵠⵠ] = Δᐃ.ΔᐃᐃΔⵠᐃᐃ;
    ᐃΔ[1218] = [];
    ᐃΔ[1218][rs.ⲆᐃΔ] = Δᐃ.ⲆⲆᐃΔΔⲆᐃ;
    ᐃΔ[1218][rs.ⵠⵠⵠ] = Δᐃ.ᐃⲆΔᐃΔΔᐃ;
    ᐃΔ[1221] = [];
    ᐃΔ[1221][rs.ⲆᐃΔ] = Δᐃ.ⲆΔᐃΔᐃⲆⵠ;
    ᐃΔ[1221][rs.ⵠⵠⵠ] = Δᐃ.ⲆⲆΔᐃⲆⵠΔ;
    ᐃΔ[1223] = Δᐃ.ᐃⲆⵠΔⲆᐃᐃ;
    ᐃΔ[1219] = Δᐃ.ⵠⵠΔᐃⵠΔᐃ;
    ᐃΔ[1068] = [];
    ᐃΔ[1068][rs.ⲆᐃΔ] = Δᐃ.ⲆΔⵠⲆᐃᐃⲆ;
    ᐃΔ[1068][rs.ⵠⵠⵠ] = Δᐃ.ΔⲆᐃᐃΔΔⵠ;
    ᐃΔ[232] = [];
    ᐃΔ[232][rs.ⲆᐃΔ] = Δᐃ.ΔΔᐃΔΔᐃⵠ;
    ᐃΔ[232][rs.ⵠⵠⵠ] = Δᐃ.ⲆΔᐃⵠⲆᐃΔ;
    ᐃΔ[1070] = [];
    ᐃΔ[1070][rs.ⲆᐃΔ] = Δᐃ.ΔΔⵠᐃΔΔⵠ;
    ᐃΔ[1070][rs.ⵠⵠⵠ] = Δᐃ.ᐃⵠᐃᐃΔΔⲆ;
    ᐃΔ[1072] = [];
    ᐃΔ[1072][rs.ⲆᐃΔ] = Δᐃ.ΔⵠΔⲆᐃᐃΔ;
    ᐃΔ[1072][rs.ⵠⵠⵠ] = Δᐃ.ΔⵠᐃΔⵠΔⵠ;
    ᐃΔ[1075] = [];
    ᐃΔ[1075][rs.ⲆᐃΔ] = Δᐃ.ⵠΔⵠⲆⵠᐃⲆ;
    ᐃΔ[1075][rs.ⵠⵠⵠ] = Δᐃ.ⲆΔⵠᐃⲆᐃⵠ;
    ᐃΔ[1071] = [];
    ᐃΔ[1071][rs.ⲆᐃΔ] = Δᐃ.ᐃⵠᐃⲆⲆΔⲆ;
    ᐃΔ[1071][rs.ⵠⵠⵠ] = Δᐃ.ⵠΔⵠᐃᐃᐃⲆ;
    ᐃΔ[1074] = [];
    ᐃΔ[1074][rs.ⲆᐃΔ] = Δᐃ.ⲆᐃΔⵠⲆᐃⲆ;
    ᐃΔ[1074][rs.ⵠⵠⵠ] = Δᐃ.ⵠⲆⵠⲆΔΔⵠ;
    ᐃΔ[1073] = [];
    ᐃΔ[1073][rs.ⲆᐃΔ] = Δᐃ.ⵠⵠⲆⲆΔΔΔ;
    ᐃΔ[1073][rs.ⵠⵠⵠ] = Δᐃ.ΔⵠᐃⵠⲆΔᐃ;
    ᐃΔ[1076] = [];
    ᐃΔ[1076][rs.ⲆᐃΔ] = Δᐃ.ᐃΔⲆΔᐃⵠⵠ;
    ᐃΔ[1076][rs.ⵠⵠⵠ] = Δᐃ.ⲆⲆⵠᐃⵠⵠᐃ;
    ᐃΔ[1077] = Δᐃ.ᐃᐃᐃΔⵠⲆΔ;
    ᐃΔ[1078] = Δᐃ.ⲆᐃⵠⵠΔⵠᐃ;
    ᐃΔ[1079] = Δᐃ.ᐃᐃᐃΔᐃⵠⵠ;
    ᐃΔ[1083] = [];
    ᐃΔ[1083][rs.ⲆᐃΔ] = Δᐃ.ᐃⵠΔⵠⲆᐃⵠ;
    ᐃΔ[1083][rs.ⵠⵠⵠ] = Δᐃ.ⲆⵠΔᐃᐃⲆⵠ;
    ᐃΔ[233] = [];
    ᐃΔ[233][rs.ⲆᐃΔ] = Δᐃ.ⵠⲆⵠΔΔⵠⲆ;
    ᐃΔ[233][rs.ⵠⵠⵠ] = Δᐃ.ⲆⵠΔⲆⵠᐃⵠ;
    ᐃΔ[1085] = [];
    ᐃΔ[1085][rs.ⲆᐃΔ] = Δᐃ.ΔᐃΔⲆⲆⵠⲆ;
    ᐃΔ[1085][rs.ⵠⵠⵠ] = Δᐃ.ΔⲆⲆⲆᐃΔΔ;
    ᐃΔ[1087] = [];
    ᐃΔ[1087][rs.ⲆᐃΔ] = Δᐃ.ᐃⵠⲆⲆᐃⲆΔ;
    ᐃΔ[1087][rs.ⵠⵠⵠ] = Δᐃ.ⵠᐃᐃⵠΔⲆⵠ;
    ᐃΔ[1090] = [];
    ᐃΔ[1090][rs.ⲆᐃΔ] = Δᐃ.ⵠⵠⲆΔΔⵠᐃ;
    ᐃΔ[1090][rs.ⵠⵠⵠ] = Δᐃ.ᐃᐃᐃⵠᐃⵠⵠ;
    ᐃΔ[1086] = [];
    ᐃΔ[1086][rs.ⲆᐃΔ] = Δᐃ.ⵠΔⵠΔⲆΔᐃ;
    ᐃΔ[1086][rs.ⵠⵠⵠ] = Δᐃ.ⲆΔᐃⲆⵠⲆⲆ;
    ᐃΔ[1089] = [];
    ᐃΔ[1089][rs.ⲆᐃΔ] = Δᐃ.ᐃΔⲆΔᐃᐃΔ;
    ᐃΔ[1089][rs.ⵠⵠⵠ] = Δᐃ.ΔⲆⵠᐃΔᐃⲆ;
    ᐃΔ[1088] = [];
    ᐃΔ[1088][rs.ⲆᐃΔ] = Δᐃ.ᐃᐃⲆⵠᐃᐃΔ;
    ᐃΔ[1088][rs.ⵠⵠⵠ] = Δᐃ.ΔᐃᐃΔⵠⲆⲆ;
    ᐃΔ[1091] = [];
    ᐃΔ[1091][rs.ⲆᐃΔ] = Δᐃ.ⵠⵠᐃⵠⲆΔⲆ;
    ᐃΔ[1091][rs.ⵠⵠⵠ] = Δᐃ.ᐃΔⲆⵠᐃⲆⲆ;
    ᐃΔ[1092] = Δᐃ.ΔᐃΔⵠΔⲆᐃ;
    ᐃΔ[1093] = Δᐃ.ΔΔⵠΔᐃⲆΔ;
    ᐃΔ[1094] = Δᐃ.ΔᐃᐃⲆΔᐃⵠ;
    ᐃΔ[1098] = [];
    ᐃΔ[1098][rs.ⲆᐃΔ] = Δᐃ.ⲆᐃᐃⲆᐃᐃᐃ;
    ᐃΔ[1098][rs.ⵠⵠⵠ] = Δᐃ.ᐃᐃΔᐃⲆⲆΔ;
    ᐃΔ[235] = [];
    ᐃΔ[235][rs.ⲆᐃΔ] = Δᐃ.ⵠΔᐃΔⲆⲆΔ;
    ᐃΔ[235][rs.ⵠⵠⵠ] = Δᐃ.ⵠΔⲆᐃΔⵠΔ;
    ᐃΔ[1115] = Δᐃ.ᐃΔⵠΔᐃᐃⲆ;
    ᐃΔ[1113] = [];
    ᐃΔ[1113][rs.ⲆᐃΔ] = Δᐃ.ᐃⵠᐃⵠⲆⲆⲆ;
    ᐃΔ[1113][rs.ⵠⵠⵠ] = Δᐃ.ᐃⵠⲆΔᐃⵠⲆ;
    ᐃΔ[1114] = [];
    ᐃΔ[1114][rs.ⲆᐃΔ] = Δᐃ.ⵠᐃⲆⲆⲆᐃΔ;
    ᐃΔ[1114][rs.ⵠⵠⵠ] = Δᐃ.ⲆⵠⵠⲆΔᐃⵠ;
    ᐃΔ[1100] = [];
    ᐃΔ[1100][rs.ⲆᐃΔ] = Δᐃ.ᐃⵠΔΔΔᐃΔ;
    ᐃΔ[1100][rs.ⵠⵠⵠ] = Δᐃ.ⲆⵠⵠⲆⵠⲆΔ;
    ᐃΔ[1102] = [];
    ᐃΔ[1102][rs.ⲆᐃΔ] = Δᐃ.ⵠᐃΔΔᐃⲆᐃ;
    ᐃΔ[1102][rs.ⵠⵠⵠ] = Δᐃ.ⲆⲆⲆⵠⲆⲆⲆ;
    ᐃΔ[1105] = [];
    ᐃΔ[1105][rs.ⲆᐃΔ] = Δᐃ.ᐃΔΔΔⵠᐃᐃ;
    ᐃΔ[1105][rs.ⵠⵠⵠ] = Δᐃ.ⲆⵠⲆᐃΔⲆᐃ;
    ᐃΔ[1101] = [];
    ᐃΔ[1101][rs.ⲆᐃΔ] = Δᐃ.ⲆᐃΔᐃⵠᐃΔ;
    ᐃΔ[1101][rs.ⵠⵠⵠ] = Δᐃ.ⲆᐃΔⵠⵠᐃⲆ;
    ᐃΔ[1104] = [];
    ᐃΔ[1104][rs.ⲆᐃΔ] = Δᐃ.ᐃⲆⲆⲆΔΔⵠ;
    ᐃΔ[1104][rs.ⵠⵠⵠ] = Δᐃ.ᐃⲆⲆⵠᐃᐃⵠ;
    ᐃΔ[1103] = [];
    ᐃΔ[1103][rs.ⲆᐃΔ] = Δᐃ.ⵠΔⵠΔⵠⲆᐃ;
    ᐃΔ[1103][rs.ⵠⵠⵠ] = Δᐃ.ΔⵠⲆᐃΔⵠⲆ;
    ᐃΔ[1106] = [];
    ᐃΔ[1106][rs.ⲆᐃΔ] = Δᐃ.ⵠⲆΔᐃⵠΔⵠ;
    ᐃΔ[1106][rs.ⵠⵠⵠ] = Δᐃ.ᐃⲆᐃΔΔΔⵠ;
    ᐃΔ[1107] = Δᐃ.ᐃⵠᐃᐃⵠⵠⲆ;
    ᐃΔ[1108] = Δᐃ.ᐃⲆⵠΔΔⵠⵠ;
    ᐃΔ[1109] = Δᐃ.ⲆΔⵠΔᐃⲆⲆ;
    ᐃΔ[1119] = [];
    ᐃΔ[1119][rs.ⲆᐃΔ] = Δᐃ.ᐃΔᐃᐃⲆᐃᐃ;
    ᐃΔ[1119][rs.ⵠⵠⵠ] = Δᐃ.ⲆⲆⵠⵠΔⵠⵠ;
    ᐃΔ[238] = [];
    ᐃΔ[238][rs.ⲆᐃΔ] = Δᐃ.ᐃΔΔⲆⵠⲆⵠ;
    ᐃΔ[238][rs.ⵠⵠⵠ] = Δᐃ.ⵠΔⵠᐃⵠⵠⵠ;
    ᐃΔ[1136] = Δᐃ.ⵠⲆΔⲆⵠⲆᐃ;
    ᐃΔ[1134] = [];
    ᐃΔ[1134][rs.ⲆᐃΔ] = Δᐃ.ΔᐃΔΔⲆᐃⵠ;
    ᐃΔ[1134][rs.ⵠⵠⵠ] = Δᐃ.ΔⲆⵠΔⲆⲆᐃ;
    ᐃΔ[1135] = [];
    ᐃΔ[1135][rs.ⲆᐃΔ] = Δᐃ.ⲆⵠⲆⲆᐃᐃΔ;
    ᐃΔ[1135][rs.ⵠⵠⵠ] = Δᐃ.ⵠΔⵠⲆⵠⵠΔ;
    ᐃΔ[1121] = [];
    ᐃΔ[1121][rs.ⲆᐃΔ] = Δᐃ.ΔΔⲆΔΔⵠΔ;
    ᐃΔ[1121][rs.ⵠⵠⵠ] = Δᐃ.ᐃⵠᐃⲆΔⲆᐃ;
    ᐃΔ[1123] = [];
    ᐃΔ[1123][rs.ⲆᐃΔ] = Δᐃ.ⲆᐃΔⵠⲆⲆⲆ;
    ᐃΔ[1123][rs.ⵠⵠⵠ] = Δᐃ.ⵠⲆⵠⵠⵠⵠⲆ;
    ᐃΔ[1126] = [];
    ᐃΔ[1126][rs.ⲆᐃΔ] = Δᐃ.ⲆⵠᐃΔⵠⲆΔ;
    ᐃΔ[1126][rs.ⵠⵠⵠ] = Δᐃ.ⲆᐃΔⲆⵠᐃΔ;
    ᐃΔ[1122] = [];
    ᐃΔ[1122][rs.ⲆᐃΔ] = Δᐃ.ΔᐃⲆⵠⲆΔᐃ;
    ᐃΔ[1122][rs.ⵠⵠⵠ] = Δᐃ.ⲆⲆⲆⵠⵠⲆᐃ;
    ᐃΔ[1125] = [];
    ᐃΔ[1125][rs.ⲆᐃΔ] = Δᐃ.ⲆΔᐃΔⵠᐃⲆ;
    ᐃΔ[1125][rs.ⵠⵠⵠ] = Δᐃ.ⵠⵠⲆⵠⵠᐃᐃ;
    ᐃΔ[1124] = [];
    ᐃΔ[1124][rs.ⲆᐃΔ] = Δᐃ.ⲆⵠΔⲆΔⲆΔ;
    ᐃΔ[1124][rs.ⵠⵠⵠ] = Δᐃ.ⲆⵠⵠⵠⲆᐃⲆ;
    ᐃΔ[1127] = [];
    ᐃΔ[1127][rs.ⲆᐃΔ] = Δᐃ.ⵠⲆΔⵠΔⲆⵠ;
    ᐃΔ[1127][rs.ⵠⵠⵠ] = Δᐃ.ⲆⵠⲆΔΔⵠⲆ;
    ᐃΔ[1128] = Δᐃ.ΔᐃⲆΔᐃⲆΔ;
    ᐃΔ[1129] = Δᐃ.ᐃⲆⵠⲆΔΔΔ;
    ᐃΔ[1130] = Δᐃ.ⲆᐃⵠΔΔⲆᐃ;
    ᐃΔ[1042] = [];
    ᐃΔ[1042][rs.ⲆᐃΔ] = Δᐃ.ΔⵠⵠᐃⵠΔⵠ;
    ᐃΔ[1042][rs.ⵠⵠⵠ] = Δᐃ.ᐃⵠᐃᐃⲆⵠᐃ;
    ᐃΔ[1043] = [];
    ᐃΔ[1043][rs.ⲆᐃΔ] = Δᐃ.ᐃⲆⵠⲆΔΔᐃ;
    ᐃΔ[1043][rs.ⵠⵠⵠ] = Δᐃ.ⲆΔᐃⲆᐃᐃⵠ;
    ᐃΔ[1044] = [];
    ᐃΔ[1044][rs.ⲆᐃΔ] = Δᐃ.ΔΔᐃⵠⲆΔΔ;
    ᐃΔ[1044][rs.ⵠⵠⵠ] = Δᐃ.ΔᐃΔᐃⲆⲆⲆ;
    ᐃΔ[228] = [];
    ᐃΔ[228][rs.ⲆᐃΔ] = Δᐃ.ᐃᐃⲆΔᐃⲆⵠ;
    ᐃΔ[228][rs.ⵠⵠⵠ] = Δᐃ.ᐃᐃⲆΔᐃⲆⵠ;
    ᐃΔ[234] = [];
    ᐃΔ[234][rs.ⲆᐃΔ] = Δᐃ.ⵠⵠⲆⲆⵠⵠⵠ;
    ᐃΔ[234][rs.ⵠⵠⵠ] = Δᐃ.ⵠⵠⲆⲆⵠⵠⵠ;
    ᐃΔ[249] = [];
    ᐃΔ[249][rs.ⲆᐃΔ] = Δᐃ.ΔⲆΔΔⵠⵠᐃ;
    ᐃΔ[249][rs.ⵠⵠⵠ] = Δᐃ.ΔⲆΔΔⵠⵠᐃ;
    ᐃΔ[1045] = Δᐃ.ⲆΔⵠⲆΔⵠⲆ;
    ᐃΔ[89] = [];
    ᐃΔ[89][rs.ⲆᐃΔ] = Δᐃ.ᐃᐃᐃⲆⵠⵠⵠ;
    ᐃΔ[89][rs.ⵠⵠⵠ] = Δᐃ.ᐃΔⲆⲆᐃᐃⵠ;
    ᐃΔ[92] = [];
    ᐃΔ[92][rs.ⲆᐃΔ] = Δᐃ.ⵠΔΔⵠⲆᐃⲆ;
    ᐃΔ[92][rs.ⵠⵠⵠ] = Δᐃ.ⲆⵠΔⲆⵠⵠΔ;
    ᐃΔ[247] = [];
    ᐃΔ[247][rs.ⲆᐃΔ] = [Δᐃ.ⲆΔᐃⵠΔᐃΔ, Δᐃ.ᐃⵠⵠΔⲆⵠᐃ, Δᐃ.ⲆᐃᐃΔⲆᐃᐃ, Δᐃ.ⲆⲆⵠᐃⲆⲆⵠ, Δᐃ.ⲆⲆᐃⲆⵠⵠᐃ, Δᐃ.ΔⵠⲆᐃⲆᐃᐃ, Δᐃ.ⵠⲆΔᐃⲆⵠⵠ, Δᐃ.ⵠᐃⵠⵠⵠΔΔ, Δᐃ.ⲆΔⲆᐃᐃΔᐃ];
    ᐃΔ[247][rs.ⵠⵠⵠ] = [Δᐃ.ⲆⲆⲆᐃΔⵠΔ, Δᐃ.ⲆᐃⲆⲆΔⵠⵠ, Δᐃ.ⲆⲆⵠⵠΔΔⵠ, Δᐃ.ᐃΔᐃⵠⲆⵠᐃ, Δᐃ.ⲆΔⵠΔⵠΔⵠ, Δᐃ.ΔⲆⲆⲆΔΔⵠ, Δᐃ.ΔⲆⲆⲆᐃΔⵠ, Δᐃ.ⵠᐃⵠⵠⵠΔΔ, Δᐃ.ⵠⵠⲆⵠⲆⵠⲆ];
    ᐃΔ[93] = [];
    ᐃΔ[93][rs.ⲆᐃΔ] = Δᐃ.ⲆΔᐃⵠᐃⵠΔ;
    ᐃΔ[93][rs.ⵠⵠⵠ] = Δᐃ.ⵠΔΔΔⵠⵠⲆ;
    ᐃΔ[225] = [];
    ᐃΔ[225][rs.ⲆᐃΔ] = Δᐃ.ᐃⵠⲆⲆⵠᐃᐃ;
    ᐃΔ[225][rs.ⵠⵠⵠ] = Δᐃ.ⵠⵠᐃΔⵠΔΔ;
    ᐃΔ[226] = [];
    ᐃΔ[226][rs.ⲆᐃΔ] = Δᐃ.ΔᐃⵠⵠᐃⲆᐃ;
    ᐃΔ[226][rs.ⵠⵠⵠ] = Δᐃ.ⲆⲆⲆⵠⵠᐃⲆ;
    ᐃΔ[24] = [];
    ᐃΔ[24][rs.ⲆᐃΔ] = Δᐃ.ΔⵠⵠΔᐃᐃⵠ;
    ᐃΔ[24][rs.ⵠⵠⵠ] = Δᐃ.ΔᐃᐃⵠΔⵠᐃ;
    ᐃΔ[88] = [];
    ᐃΔ[88][rs.ⲆᐃΔ] = Δᐃ.ΔᐃᐃⲆⵠⵠᐃ;
    ᐃΔ[88][rs.ⵠⵠⵠ] = Δᐃ.ᐃΔΔⵠⲆⵠᐃ;
    ᐃΔ[87] = [];
    ᐃΔ[87][rs.ⲆᐃΔ] = Δᐃ.ΔᐃⲆΔⲆΔΔ;
    ᐃΔ[87][rs.ⵠⵠⵠ] = Δᐃ.ᐃᐃΔΔⵠᐃΔ;
    ᐃΔ[82] = [];
    ᐃΔ[82][rs.ⲆᐃΔ] = Δᐃ.ᐃⲆⲆⲆⲆᐃΔ;
    ᐃΔ[82][rs.ⵠⵠⵠ] = Δᐃ.ΔⲆⵠᐃⲆΔⲆ;
    ᐃΔ[621] = [];
    ᐃΔ[621][rs.ⲆᐃΔ] = [];
    ᐃΔ[621][rs.ⵠⵠⵠ] = [];
    ᐃΔ[621][rs.ⲆᐃΔ].push(Δᐃ.ΔᐃⲆΔⲆⲆΔⲆᐃ);
    ᐃΔ[621][rs.ⲆᐃΔ].push(Δᐃ.ⲆⵠΔΔᐃⵠΔⲆΔ);
    ᐃΔ[621][rs.ⲆᐃΔ].push(Δᐃ.ᐃⲆⲆᐃᐃΔⲆⵠᐃ);
    ᐃΔ[621][rs.ⵠⵠⵠ].push(Δᐃ.ⵠⲆⲆᐃᐃⲆΔΔⲆ);
    ᐃΔ[621][rs.ⵠⵠⵠ].push(Δᐃ.ᐃⵠⲆΔⵠⵠⲆΔⲆ);
    ᐃΔ[621][rs.ⵠⵠⵠ].push(Δᐃ.ΔᐃᐃΔᐃΔΔⲆᐃ);
    ᐃΔ[619] = [];
    ᐃΔ[619][rs.ⲆᐃΔ] = [];
    ᐃΔ[619][rs.ⵠⵠⵠ] = [];
    ᐃΔ[619][rs.ⲆᐃΔ].push(Δᐃ.ⵠⲆᐃΔΔᐃⵠΔⲆ);
    ᐃΔ[619][rs.ⲆᐃΔ].push(Δᐃ.ⲆⵠΔᐃⵠΔᐃᐃⲆ);
    ᐃΔ[619][rs.ⲆᐃΔ].push(Δᐃ.ΔᐃⵠᐃⵠΔΔΔᐃ);
    ᐃΔ[619][rs.ⵠⵠⵠ].push(Δᐃ.ᐃΔΔⲆΔⲆΔⵠⵠ);
    ᐃΔ[619][rs.ⵠⵠⵠ].push(Δᐃ.ΔⵠⲆΔΔⵠⲆΔᐃ);
    ᐃΔ[619][rs.ⵠⵠⵠ].push(Δᐃ.ⵠΔⵠⵠᐃΔᐃⵠᐃ);
    ᐃΔ[620] = [];
    ᐃΔ[620][rs.ⲆᐃΔ] = [];
    ᐃΔ[620][rs.ⵠⵠⵠ] = [];
    ᐃΔ[620][rs.ⲆᐃΔ].push(Δᐃ.ⵠⲆⲆΔⵠΔᐃΔΔ);
    ᐃΔ[620][rs.ⲆᐃΔ].push(Δᐃ.ΔⵠΔΔΔᐃⵠⲆΔ);
    ᐃΔ[620][rs.ⲆᐃΔ].push(Δᐃ.ⵠΔᐃⵠᐃΔᐃᐃⲆ);
    ᐃΔ[620][rs.ⵠⵠⵠ].push(Δᐃ.ᐃⵠΔⵠᐃⲆᐃⲆᐃ);
    ᐃΔ[620][rs.ⵠⵠⵠ].push(Δᐃ.ᐃⲆⵠⵠⲆᐃⲆⲆⵠ);
    ᐃΔ[620][rs.ⵠⵠⵠ].push(Δᐃ.ⲆΔⲆΔⲆⲆⲆⵠᐃ);
    ᐃΔᐃΔ.g = [];
    ᐃΔᐃΔ.g[Gg] = [Δᐃ.ΔⵠᐃⲆⲆⵠⲆ, Δᐃ.ᐃⵠⵠᐃⲆⲆⲆ];
    ᐃΔᐃΔ.g[Ni] = ᐃΔᐃΔ.g[Rl];
    ᐃΔᐃΔ.g[bq] = [Δᐃ.ΔΔᐃⵠⲆΔⵠ, Δᐃ.ΔᐃⵠᐃⲆᐃⵠ];
    ᐃΔᐃΔ.m = [];
    ᐃΔᐃΔ.m[0] = [Δᐃ.ᐃⵠᐃⲆΔⲆΔ, Δᐃ.ᐃⲆΔⲆᐃⲆⵠ];
    ᐃΔᐃΔ.m[1] = ᐃΔᐃΔ.m[0];
    ᐃΔᐃΔ.m[nd] = [Δᐃ.ⵠΔⲆΔᐃⲆⲆ, Δᐃ.ⵠΔᐃᐃⲆⲆⲆ];
    ᐃΔᐃΔ.la = [];
    ᐃΔᐃΔ.la[0] = [Δᐃ.ᐃᐃᐃⵠΔⵠᐃ, Δᐃ.ΔᐃᐃⲆⲆᐃΔ];
    ᐃΔᐃΔ.la[Ek] = ᐃΔᐃΔ.la[0];
    ᐃΔᐃΔ.la[Od] = ᐃΔᐃΔ.la[Ah];
    ᐃΔᐃΔ.la[3] = ᐃΔᐃΔ.la[0];
    ᐃΔᐃΔ.la[Oa] = ᐃΔᐃΔ.la[0];
    ᐃΔᐃΔ.la[Eg] = ᐃΔᐃΔ.la[0];
    ᐃΔᐃΔ.s = [];
    ᐃΔᐃΔ.s[0] = [Δᐃ.ⲆⲆⲆⵠⵠⲆⵠ, Δᐃ.ⲆᐃⲆΔᐃⲆⲆ];
    ᐃΔᐃΔ.s[_h] = ᐃΔᐃΔ.s[qu];
    ᐃΔᐃΔ.s[X] = [Δᐃ.ᐃᐃΔᐃⵠᐃᐃ, Δᐃ.ΔΔᐃⵠⵠⲆᐃ];
    ᐃΔᐃΔ.p = [];
    ᐃΔᐃΔ.p[Gk] = [Δᐃ.ΔᐃΔⲆⵠΔᐃ, Δᐃ.ΔᐃΔⲆⵠΔᐃ];
    ᐃΔᐃΔ.a = [];
    ᐃΔᐃΔ.a[0] = [Δᐃ.ΔⵠⲆᐃᐃΔΔ, Δᐃ.ᐃⵠⲆΔᐃⲆⲆ];
    ᐃΔᐃΔ.a[Gt] = ᐃΔᐃΔ.a[0];
    ᐃΔᐃΔ.a[2] = ᐃΔᐃΔ.a[Aa];
    ᐃΔᐃΔ.d = [];
    ᐃΔᐃΔ.d[et] = [Δᐃ.ᐃⵠᐃⵠᐃⵠⲆ, Δᐃ.ᐃΔΔᐃΔᐃΔ];
    ᐃΔᐃΔ.d[_] = ᐃΔᐃΔ.d[0];
    ᐃΔᐃΔ.d[nd] = ᐃΔᐃΔ.d[gl];
    ᐃΔᐃΔ.re = [];
    ᐃΔᐃΔ.re[0] = [Δᐃ.ⵠΔΔⵠᐃᐃΔ, Δᐃ.ΔⵠᐃⲆᐃΔⵠ];
    ᐃΔᐃΔ.re[1] = ᐃΔᐃΔ.re[0];
    ᐃΔᐃΔ.re[2] = ᐃΔᐃΔ.re[fg];
    ᐃΔᐃΔ.f = [];
    ᐃΔᐃΔ.f[Gg] = [Δᐃ.ⲆⲆΔΔᐃⵠΔ, Δᐃ.ⵠᐃⵠᐃΔᐃⵠ];
    ᐃΔᐃΔ.f[bs] = ᐃΔᐃΔ.f[0];
    ᐃΔᐃΔ.f[2] = ᐃΔᐃΔ.f[0];
    ᐃΔᐃΔ.isl = [];
    ᐃΔᐃΔ.isl[0] = [Δᐃ.ᐃⲆΔᐃᐃΔⵠ, Δᐃ.ⵠᐃᐃΔᐃᐃⵠ];
    ᐃΔᐃΔ.isl[wh] = ᐃΔᐃΔ.isl[0];
    ᐃΔᐃΔ.isl[Nr] = ᐃΔᐃΔ.isl[0];
    ᐃΔᐃΔ.c = [];
    ᐃΔᐃΔ.c[An] = [Δᐃ.ⵠΔᐃⵠΔⵠᐃ, Δᐃ.ΔⵠⵠΔΔⵠⲆ];
    ᐃΔᐃΔ.c[1] = ᐃΔᐃΔ.c[An];
    ᐃΔᐃΔ.c[2] = ᐃΔᐃΔ.c[0];
    ᐃΔᐃΔ.wtb = [];
    ᐃΔᐃΔ.wtb[0] = [Δᐃ.ᐃⲆⵠΔⲆⵠΔ, Δᐃ.ⵠⵠᐃᐃᐃΔⲆ];
    ᐃΔᐃΔ.PIRANHA = [Δᐃ.ⵠΔⵠΔⲆⲆᐃ, Δᐃ.ⵠᐃᐃⲆⲆᐃⲆ];
    ᐃΔᐃΔ.KRAKEN = [Δᐃ.ⲆΔᐃⲆΔⵠΔ, Δᐃ.ᐃⵠⲆⵠⲆⵠᐃ];
    ᐃΔᐃΔ.FOX = [Δᐃ.ᐃⵠᐃⵠᐃⵠΔ, Δᐃ.ΔΔⵠⵠⲆᐃΔ];
    ᐃΔᐃΔ.WOLF = [Δᐃ.ⵠⵠᐃⲆΔⵠⲆ, Δᐃ.ⲆⲆᐃⲆⲆⵠⲆ];
    ᐃΔᐃΔ.SPIDER = [Δᐃ.ⲆᐃⲆΔⵠᐃⵠ, Δᐃ.ⵠⲆⲆⵠⲆᐃⵠ];
    ᐃΔᐃΔ.BEAR = [Δᐃ.ΔⵠⲆⲆⲆΔⲆ, Δᐃ.ⵠⲆⵠⵠⵠⵠᐃ];
    ᐃΔᐃΔ.CAVE = [Δᐃ.ⵠΔᐃᐃⵠⵠⲆ, Δᐃ.ᐃⲆᐃᐃΔᐃⲆ];
    ᐃΔᐃΔ.MAP = [Δᐃ.ⲆⲆⲆⲆᐃⵠⵠ, Δᐃ.ΔᐃⵠΔⵠⵠΔ];
    ᐃΔᐃΔ.FOREST = [Δᐃ.ⵠΔⵠⲆᐃⲆⵠ, Δᐃ.ⵠΔⲆΔᐃΔⵠ];
    ᐃΔᐃΔ.WINTER = [Δᐃ.ᐃᐃΔⲆᐃⲆⲆ, Δᐃ.ⵠᐃⵠᐃⵠⲆᐃ];
    ᐃΔᐃΔ.DESERT = [Δᐃ.ⵠⵠⲆᐃⲆⲆⲆ, Δᐃ.ⵠⵠⲆᐃⲆⵠⲆ];
    ᐃΔᐃΔ.LAVA = [Δᐃ.ᐃⵠᐃⲆⵠⵠΔ, Δᐃ.ⲆΔⲆⵠᐃᐃⵠ];
    for (var b in ᐃΔᐃΔ) {
      for (var c = ᐃΔᐃΔ[b], d = bu; d < c.length; d++) {
        var e = c[d];
        if (e.ⵠΔⵠΔΔⵠⲆ !== Yo) {
          e.ⵠΔⵠΔΔⵠⲆ();
        } else if (e.length > qu) {
          for (var f = sb; f < e.length; f++) {
            if (e[f].ⵠΔⵠΔΔⵠⲆ !== ys) {
              e[f].ⵠΔⵠΔΔⵠⲆ();
            }
          }
        }
      }
    }
    console.log(undefined, undefined);
  }
  function Vc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    Tt(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    St(e, c[1], c[il], qg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    St(e, undefined, c[Ks], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    St(e, undefined, c[6], a * y);
    return d;
  }
  function Xc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 272;
    d.height = a * 264;
    e.translate(sb, a * Hh);
    e.globalAlpha = b ? 0.5 : Co;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    St(e, c[0]);
    e.translate(0, -gg * a);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    St(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.99996948242188, a * 116.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 74.18402099609375, a * 109.99996948242188, a * 63.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 69.18402099609375, a * 125.99996948242188, a * 87.18402099609375, a * 137.99996948242188, a * 112.18402099609375);
    e.bezierCurveTo(a * 142.99996948242188, a * 84.18402099609375, a * 143.99996948242188, a * 76.18402099609375, a * 153.99996948242188, a * 62.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 79.18402099609375, a * 149.99996948242188, a * 110.18402099609375, a * 151.99996948242188, a * 117.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 104.18402099609375, a * 180.99996948242188, a * 91.18402099609375, a * 191.99996948242188, a * 91.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 102.18402099609375, a * 180.99996948242188, a * 106.18402099609375, a * 160.99996948242188, a * 124.18402099609375);
    e.bezierCurveTo(a * 190.99996948242188, a * 121.18402099609375, a * 199.99996948242188, a * 120.18402099609375, a * 207.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 199.99996948242188, a * 129.18402099609375, a * 181.99996948242188, a * 132.18402099609375, a * 160.99996948242188, a * 135.18402099609375);
    e.bezierCurveTo(a * 179.99996948242188, a * 142.18402099609375, a * 193.99996948242188, a * 151.18402099609375, a * 196.99996948242188, a * 156.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 156.18402099609375, a * 163.99996948242188, a * 149.18402099609375, a * 152.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 157.99996948242188, a * 155.18402099609375, a * 165.99996948242188, a * 176.18402099609375, a * 169.99996948242188, a * 195.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 190.18402099609375, a * 147.99996948242188, a * 167.18402099609375, a * 139.99996948242188, a * 153.18402099609375);
    e.bezierCurveTo(a * 137.99996948242188, a * 167.18402099609375, a * 126.99996948242188, a * 194.18402099609375, a * 119.99996948242188, a * 204.18402099609375);
    e.bezierCurveTo(a * 117.99996948242188, a * 186.18402099609375, a * 123.99996948242188, a * 165.18402099609375, a * 126.99996948242188, a * 149.18402099609375);
    e.bezierCurveTo(a * 110.99996948242188, a * 163.18402099609375, a * 103.99996948242188, a * 170.18402099609375, a * 82.99996948242188, a * 177.18402099609375);
    e.bezierCurveTo(a * 90.99996948242188, a * 162.18402099609375, a * 99.99996948242188, a * 153.18402099609375, a * 117.99996948242188, a * 140.18402099609375);
    e.bezierCurveTo(a * 97.99996948242188, a * 140.18402099609375, a * 83.99996948242188, a * 139.18402099609375, a * 65.99996948242188, a * 132.18402099609375);
    e.bezierCurveTo(a * 77.99996948242188, a * 127.18402099609375, a * 95.99996948242188, a * 127.18402099609375, a * 115.99996948242188, a * 127.18402099609375);
    e.bezierCurveTo(a * 91.99996948242188, a * 113.18402099609375, a * 84.99996948242188, a * 107.18402099609375, a * 76.99996948242188, a * 96.18402099609375);
    e.bezierCurveTo(a * 94.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 109.18402099609375, a * 123.99996948242188, a * 116.18402099609375);
    e.closePath();
    St(e, c[Ou]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.99996948242188, a * 119.18402099609375);
    e.bezierCurveTo(a * 141.99996948242188, a * 119.18402099609375, a * 145.99996948242188, a * 116.18402099609375, a * 147.99996948242188, a * 109.18402099609375);
    e.bezierCurveTo(a * 151.99996948242188, a * 107.18402099609375, a * 159.99996948242188, a * 107.18402099609375, a * 156.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 140.18402099609375, a * 142.99996948242188, a * 149.18402099609375, a * 132.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 119.99996948242188, a * 144.18402099609375, a * 113.99996948242188, a * 122.18402099609375, a * 131.99996948242188, a * 119.18402099609375);
    e.closePath();
    St(e, c[4], c[5], a * 6);
    return d;
  }
  function Zc() {
    var a = sc;
    new Date().getTime();
    Kc();
    (function () {
      ᐃΔ[814] = Gb(1, [{
        f: Xc,
        x: tj,
        y: Aa,
        a: 1,
        r: tj,
        c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[815] = ᐃΔ[814];
      ᐃΔ[955] = [];
      ᐃΔ[955][sb] = Δᐃ.ⵠⵠⵠᐃⵠⲆΔ;
      ᐃΔ[955][1] = Δᐃ.ΔΔⵠⲆⲆΔⵠ;
      ᐃΔ[955][On] = Δᐃ.ⵠΔΔᐃΔΔΔ;
      ᐃΔ[956] = ᐃΔ[955];
      ᐃΔ[972] = [];
      ᐃΔ[972][Gk] = Δᐃ.ⲆΔᐃⵠΔⲆΔ;
      ᐃΔ[972][bs] = Δᐃ.ⵠⲆᐃΔᐃⲆΔ;
      ᐃΔ[972][2] = Δᐃ.ΔⲆΔⵠⵠⵠᐃ;
      ᐃΔ[973] = ᐃΔ[972];
      ᐃΔ[987] = [];
      ᐃΔ[987][An] = Δᐃ.ⲆⲆⲆⲆᐃᐃⲆ;
      ᐃΔ[987][1] = Δᐃ.ⵠⲆⲆᐃⲆⲆⵠ;
      ᐃΔ[987][il] = Δᐃ.ⲆΔᐃΔⲆⲆⵠ;
      ᐃΔ[988] = ᐃΔ[987];
      ᐃΔ[1154] = [];
      ᐃΔ[1154][et] = Δᐃ.ⵠⲆᐃⵠⲆΔⲆ;
      ᐃΔ[1154][1] = Δᐃ.ᐃⵠΔⲆⲆⲆᐃ;
      ᐃΔ[1154][2] = Δᐃ.ⵠⵠᐃΔᐃⵠΔ;
      ᐃΔ[1155] = ᐃΔ[1154];
      ᐃΔ[965] = [];
      ᐃΔ[965][0] = Δᐃ.ⵠⵠⲆΔᐃΔΔ;
      ᐃΔ[965][_] = Δᐃ.ᐃⲆⵠⵠᐃᐃᐃ;
      ᐃΔ[965][2] = Δᐃ.ⵠᐃⵠΔΔΔᐃ;
      ᐃΔ[974] = ᐃΔ[965];
      ᐃΔ[1028] = [];
      ᐃΔ[1028][0] = Δᐃ.ⵠⲆΔΔⵠⲆⵠ;
      ᐃΔ[1028][1] = Δᐃ.ⵠᐃΔᐃⲆⲆᐃ;
      ᐃΔ[1028][2] = Δᐃ.ᐃᐃᐃⵠᐃᐃᐃ;
      ᐃΔ[1029] = ᐃΔ[1028];
      ᐃΔ[1027] = ᐃΔ[1028];
      ᐃΔ[712] = [];
      ᐃΔ[712][xq] = Δᐃ.ΔᐃΔⵠΔⲆⵠ;
      ᐃΔ[712][_h] = Δᐃ.ᐃⲆⲆⵠᐃⲆⵠ;
      ᐃΔ[712][Nj] = Δᐃ.ΔⲆⲆᐃΔΔᐃ;
      ᐃΔ[713] = ᐃΔ[712];
      ᐃΔ[714] = ᐃΔ[712];
      ᐃΔ[1031] = [];
      ᐃΔ[1031][0] = Δᐃ.ΔΔⵠⲆΔΔⵠ;
      ᐃΔ[1031][1] = Δᐃ.ⵠᐃⲆⵠⵠⲆⵠ;
      ᐃΔ[1031][jg] = Δᐃ.ΔᐃⵠᐃΔΔᐃ;
      ᐃΔ[1032] = ᐃΔ[1031];
      ᐃΔ[1030] = ᐃΔ[1031];
      ᐃΔ[423] = [];
      ᐃΔ[423][0] = Δᐃ.ⲆᐃⲆΔⲆᐃⵠ;
      ᐃΔ[423][Ni] = Δᐃ.ᐃᐃⵠᐃⵠᐃⵠ;
      ᐃΔ[423][tk] = Δᐃ.ⲆΔᐃⲆΔⵠⲆ;
      ᐃΔ[425] = ᐃΔ[423];
      ᐃΔ[424] = ᐃΔ[423];
      ᐃΔ[1233] = [];
      ᐃΔ[1233][0] = Δᐃ.ⵠⲆΔᐃΔⵠΔ;
      ᐃΔ[1233][1] = Δᐃ.ΔⵠΔⵠΔΔΔ;
      ᐃΔ[1233][X] = Δᐃ.ᐃⵠⲆΔⵠΔⲆ;
      ᐃΔ[1234] = ᐃΔ[1233];
      ᐃΔ[1230] = [];
      ᐃΔ[1230][qb] = Δᐃ.ⵠΔⵠΔΔⵠⵠ;
      ᐃΔ[1230][1] = Δᐃ.ΔΔⵠⲆⵠⵠΔ;
      ᐃΔ[1230][2] = Δᐃ.ΔⲆΔΔⲆΔⵠ;
      ᐃΔ[1232] = ᐃΔ[1230];
      ᐃΔ[1231] = ᐃΔ[1230];
      ᐃΔ[569] = [];
      ᐃΔ[569][0] = Δᐃ.ᐃΔⵠⲆⵠᐃⲆ;
      ᐃΔ[569][1] = Δᐃ.ᐃᐃΔⲆⵠᐃΔ;
      ᐃΔ[569][qi] = Δᐃ.ⲆⵠⵠᐃⵠⵠΔ;
      ᐃΔ[571] = ᐃΔ[569];
      ᐃΔ[570] = ᐃΔ[569];
      ᐃΔ[1166] = [];
      ᐃΔ[1166][An] = Δᐃ.ⲆⲆᐃⲆΔᐃⵠ;
      ᐃΔ[1166][1] = Δᐃ.ᐃΔᐃⲆᐃⲆΔ;
      ᐃΔ[1166][2] = Δᐃ.ⵠⲆΔⲆⲆΔΔ;
      ᐃΔ[1167] = ᐃΔ[1166];
      ᐃΔ[1168] = ᐃΔ[1166];
      ᐃΔ[572] = [];
      ᐃΔ[572][sb] = Δᐃ.ᐃΔᐃᐃⵠⵠΔ;
      ᐃΔ[572][1] = Δᐃ.ΔΔⵠⵠᐃΔᐃ;
      ᐃΔ[572][tk] = Δᐃ.ᐃⵠΔⵠⲆⲆΔ;
      ᐃΔ[574] = ᐃΔ[572];
      ᐃΔ[573] = ᐃΔ[572];
      ᐃΔ[1169] = [];
      ᐃΔ[1169][An] = Δᐃ.ᐃⲆⵠⲆⵠⵠⵠ;
      ᐃΔ[1169][1] = Δᐃ.ⵠᐃΔⵠᐃΔⵠ;
      ᐃΔ[1169][qo] = Δᐃ.ⲆΔⵠⲆⲆⵠⲆ;
      ᐃΔ[1170] = ᐃΔ[1169];
      ᐃΔ[1171] = ᐃΔ[1169];
      ᐃΔ[575] = [];
      ᐃΔ[575][0] = Δᐃ.ⵠⲆΔⵠᐃᐃᐃ;
      ᐃΔ[575][1] = Δᐃ.ᐃⵠⲆΔᐃⲆⵠ;
      ᐃΔ[575][Gl] = Δᐃ.ⵠᐃᐃᐃⵠΔΔ;
      ᐃΔ[577] = ᐃΔ[575];
      ᐃΔ[576] = ᐃΔ[575];
      ᐃΔ[1172] = [];
      ᐃΔ[1172][0] = Δᐃ.ⲆⲆΔΔᐃᐃⲆ;
      ᐃΔ[1172][1] = Δᐃ.ᐃⲆᐃⵠⲆⵠⲆ;
      ᐃΔ[1172][zd] = Δᐃ.ΔΔⲆⲆⵠΔᐃ;
      ᐃΔ[1173] = ᐃΔ[1172];
      ᐃΔ[1174] = ᐃΔ[1172];
      ᐃΔ[578] = [];
      ᐃΔ[578][0] = Δᐃ.ᐃᐃⲆⵠⲆⲆⲆ;
      ᐃΔ[578][1] = Δᐃ.ⵠΔᐃΔΔⵠⵠ;
      ᐃΔ[578][2] = Δᐃ.ΔⲆΔⵠΔⲆᐃ;
      ᐃΔ[580] = ᐃΔ[578];
      ᐃΔ[579] = ᐃΔ[578];
      ᐃΔ[1175] = [];
      ᐃΔ[1175][Md] = Δᐃ.ⲆᐃΔᐃΔⲆᐃ;
      ᐃΔ[1175][wh] = Δᐃ.ⲆⲆⵠΔᐃᐃᐃ;
      ᐃΔ[1175][2] = Δᐃ.ᐃⵠΔᐃⲆⵠΔ;
      ᐃΔ[1176] = ᐃΔ[1175];
      ᐃΔ[1177] = ᐃΔ[1175];
      ᐃΔ[581] = [];
      ᐃΔ[581][Md] = Δᐃ.ᐃᐃΔΔᐃΔΔ;
      ᐃΔ[581][1] = Δᐃ.ⵠΔᐃⵠᐃΔᐃ;
      ᐃΔ[581][ta] = Δᐃ.ΔᐃⵠΔⵠΔᐃ;
      ᐃΔ[583] = ᐃΔ[581];
      ᐃΔ[582] = ᐃΔ[581];
      ᐃΔ[1178] = [];
      ᐃΔ[1178][Gk] = Δᐃ.ⲆΔⲆⵠⵠΔⵠ;
      ᐃΔ[1178][1] = Δᐃ.ⵠⲆΔΔΔⵠⲆ;
      ᐃΔ[1178][2] = Δᐃ.ᐃᐃⵠⵠⵠΔⵠ;
      ᐃΔ[1179] = ᐃΔ[1178];
      ᐃΔ[1180] = ᐃΔ[1178];
      ᐃΔ[584] = [];
      ᐃΔ[584][Aa] = Δᐃ.ⲆᐃᐃΔⲆⲆⵠ;
      ᐃΔ[584][1] = Δᐃ.ⲆⲆᐃⵠⲆⲆΔ;
      ᐃΔ[584][2] = Δᐃ.ᐃⲆᐃᐃΔⲆⵠ;
      ᐃΔ[586] = ᐃΔ[584];
      ᐃΔ[585] = ᐃΔ[584];
      ᐃΔ[1181] = [];
      ᐃΔ[1181][0] = Δᐃ.ΔⵠΔⲆⵠⲆⲆ;
      ᐃΔ[1181][Co] = Δᐃ.ΔᐃⲆⲆΔᐃᐃ;
      ᐃΔ[1181][2] = Δᐃ.ᐃᐃᐃᐃⲆⲆΔ;
      ᐃΔ[1182] = ᐃΔ[1181];
      ᐃΔ[1183] = ᐃΔ[1181];
      ᐃΔ[587] = [];
      ᐃΔ[587][0] = Δᐃ.ⲆᐃᐃᐃⵠⵠⲆ;
      ᐃΔ[587][1] = Δᐃ.ᐃⵠᐃⲆⲆΔᐃ;
      ᐃΔ[587][2] = Δᐃ.ᐃᐃⵠᐃⵠᐃΔ;
      ᐃΔ[589] = ᐃΔ[587];
      ᐃΔ[588] = ᐃΔ[587];
      ᐃΔ[1184] = [];
      ᐃΔ[1184][0] = Δᐃ.ⲆⵠⲆⵠⲆⲆⵠ;
      ᐃΔ[1184][1] = Δᐃ.ΔⲆⲆⵠⲆⲆⲆ;
      ᐃΔ[1184][qo] = Δᐃ.ΔᐃⲆⲆᐃᐃⲆ;
      ᐃΔ[1185] = ᐃΔ[1184];
      ᐃΔ[1186] = ᐃΔ[1184];
      ᐃΔ[1257] = [];
      ᐃΔ[1257][0] = Δᐃ.ⲆⲆΔⲆΔΔⵠ;
      ᐃΔ[1257][1] = Δᐃ.ᐃⵠᐃⵠⲆⲆᐃ;
      ᐃΔ[1257][Nj] = Δᐃ.ᐃⵠᐃᐃⵠⵠⵠ;
      ᐃΔ[1258] = ᐃΔ[1257];
      ᐃΔ[1256] = ᐃΔ[1257];
      ᐃΔ[1260] = [];
      ᐃΔ[1260][0] = Δᐃ.ⲆⲆⵠᐃⵠᐃⵠ;
      ᐃΔ[1260][_h] = Δᐃ.ΔΔⵠⲆΔⵠᐃ;
      ᐃΔ[1260][2] = Δᐃ.ⵠⵠⲆΔⵠⲆⲆ;
      ᐃΔ[1261] = ᐃΔ[1260];
      ᐃΔ[1259] = ᐃΔ[1260];
      ᐃΔ[1263] = [];
      ᐃΔ[1263][0] = Δᐃ.ⵠΔⲆⵠⲆᐃⵠ;
      ᐃΔ[1263][1] = Δᐃ.ΔⲆⲆᐃⵠⲆΔ;
      ᐃΔ[1263][2] = Δᐃ.ⵠⲆΔΔⵠⵠᐃ;
      ᐃΔ[1264] = ᐃΔ[1263];
      ᐃΔ[1262] = ᐃΔ[1263];
      ᐃΔ[1266] = [];
      ᐃΔ[1266][gl] = Δᐃ.ΔΔΔᐃⵠᐃΔ;
      ᐃΔ[1266][bs] = Δᐃ.ⵠᐃᐃΔᐃⵠΔ;
      ᐃΔ[1266][2] = Δᐃ.ⵠᐃⵠⵠᐃⲆⲆ;
      ᐃΔ[1267] = ᐃΔ[1266];
      ᐃΔ[1265] = ᐃΔ[1266];
      ᐃΔ[1269] = [];
      ᐃΔ[1269][0] = Δᐃ.ⵠⵠⵠⲆⲆⲆΔ;
      ᐃΔ[1269][1] = Δᐃ.ΔⵠⵠΔⲆᐃΔ;
      ᐃΔ[1269][fh] = Δᐃ.ⵠᐃⲆⵠᐃᐃⲆ;
      ᐃΔ[1270] = ᐃΔ[1269];
      ᐃΔ[1268] = ᐃΔ[1269];
      ᐃΔ[1272] = [];
      ᐃΔ[1272][0] = Δᐃ.ᐃΔⵠᐃᐃᐃⵠ;
      ᐃΔ[1272][1] = Δᐃ.ⲆⵠⵠΔⵠⵠΔ;
      ᐃΔ[1272][zd] = Δᐃ.ᐃΔΔᐃΔΔᐃ;
      ᐃΔ[1273] = ᐃΔ[1272];
      ᐃΔ[1271] = ᐃΔ[1272];
      ᐃΔ[1239] = [];
      ᐃΔ[1239][0] = Δᐃ.ⵠᐃⲆᐃⵠᐃⵠ;
      ᐃΔ[1239][1] = Δᐃ.ⲆΔᐃⲆⵠⵠⲆ;
      ᐃΔ[1239][ta] = Δᐃ.ⲆⲆⲆⵠⲆΔⲆ;
      ᐃΔ[1240] = ᐃΔ[1239];
      ᐃΔ[1238] = ᐃΔ[1239];
      ᐃΔ[1242] = [];
      ᐃΔ[1242][0] = Δᐃ.ⵠᐃᐃⲆⵠⵠⵠ;
      ᐃΔ[1242][1] = Δᐃ.ⲆⲆᐃᐃΔⵠⵠ;
      ᐃΔ[1242][2] = Δᐃ.Ⲇⵠⵠᐃᐃᐃᐃ;
      ᐃΔ[1243] = ᐃΔ[1242];
      ᐃΔ[1241] = ᐃΔ[1242];
      ᐃΔ[1245] = [];
      ᐃΔ[1245][0] = Δᐃ.ⲆⲆΔᐃᐃⲆᐃ;
      ᐃΔ[1245][1] = Δᐃ.ⲆⲆΔⲆᐃᐃⵠ;
      ᐃΔ[1245][2] = Δᐃ.ⲆⵠⵠᐃᐃᐃΔ;
      ᐃΔ[1246] = ᐃΔ[1245];
      ᐃΔ[1244] = ᐃΔ[1245];
      ᐃΔ[1248] = [];
      ᐃΔ[1248][0] = Δᐃ.ⲆⵠᐃᐃᐃⵠⲆ;
      ᐃΔ[1248][Ga] = Δᐃ.ⲆⵠⵠᐃΔᐃⲆ;
      ᐃΔ[1248][Nr] = Δᐃ.ᐃᐃⲆⲆⵠᐃᐃ;
      ᐃΔ[1249] = ᐃΔ[1248];
      ᐃΔ[1247] = ᐃΔ[1248];
      ᐃΔ[1251] = [];
      ᐃΔ[1251][0] = Δᐃ.ᐃⵠᐃⲆᐃⲆᐃ;
      ᐃΔ[1251][1] = Δᐃ.ⲆΔⲆⵠⲆⵠΔ;
      ᐃΔ[1251][On] = Δᐃ.ΔⵠⲆⲆᐃⲆⵠ;
      ᐃΔ[1252] = ᐃΔ[1251];
      ᐃΔ[1250] = ᐃΔ[1251];
      ᐃΔ[1254] = [];
      ᐃΔ[1254][0] = Δᐃ.ⵠⲆΔⵠᐃΔⲆ;
      ᐃΔ[1254][Co] = Δᐃ.ⵠⲆᐃᐃⲆⵠⵠ;
      ᐃΔ[1254][2] = Δᐃ.ᐃΔⲆⵠΔⵠᐃ;
      ᐃΔ[1255] = ᐃΔ[1254];
      ᐃΔ[1253] = ᐃΔ[1254];
      ᐃΔ[1227] = [];
      ᐃΔ[1227][0] = Δᐃ.ΔⲆΔⵠᐃΔⵠ;
      ᐃΔ[1227][Co] = Δᐃ.ⲆⵠᐃⲆΔⲆΔ;
      ᐃΔ[1227][Nr] = Δᐃ.ⲆⲆⲆⲆΔΔⵠ;
      ᐃΔ[1229] = ᐃΔ[1227];
      ᐃΔ[1228] = ᐃΔ[1227];
      ᐃΔ[1187] = [];
      ᐃΔ[1187][Md] = Δᐃ.ᐃᐃⵠᐃΔⵠΔ;
      ᐃΔ[1187][wh] = Δᐃ.ᐃᐃΔⲆⵠⲆᐃ;
      ᐃΔ[1187][2] = Δᐃ.ⵠΔⲆⲆᐃᐃⵠ;
      ᐃΔ[1188] = ᐃΔ[1187];
      ᐃΔ[rs.ⲆᐃⵠⲆⲆΔᐃⵠⵠ] = ᐃΔ[1187];
      ᐃΔ[840] = Gb(Kg, [{
        f: fb,
        x: qb,
        y: Rl,
        a: sc,
        r: 0,
        c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
      }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[841] = ᐃΔ[840];
      ᐃΔ[850] = Gb(er, [{
        f: rm,
        x: 0,
        y: sb,
        a: Co,
        r: 0,
        c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[851] = ᐃΔ[850];
      ᐃΔ[644] = Gb(bs, [{
        f: Rb,
        x: -1,
        y: qb,
        a: 1,
        r: fg,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }, {
        f: Nb,
        x: -1,
        y: 0,
        a: Ls,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }, {
        f: Wb,
        x: -Fb,
        y: Ah,
        a: Kg,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[643] = ᐃΔ[644];
      ᐃΔ[639] = Gb(1, [{
        f: Mb,
        x: gl,
        y: 0,
        a: 1,
        r: 0,
        c: ["#A89F67", "#9E8456"]
      }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[800] = Gb(Co, [{
        f: Zd,
        x: 0,
        y: 0,
        a: 1,
        r: gl,
        c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
      }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[799] = ᐃΔ[800];
      ᐃΔ[631] = Gb(Ek, [{
        f: Fu,
        x: tj,
        y: bu,
        a: 1,
        r: 0,
        c: ["#A89F67", "#9E8456"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[632] = ᐃΔ[631];
      ᐃΔ[311] = Gb(1, [{
        f: Fu,
        x: 0,
        y: 0,
        a: 1,
        r: qu,
        c: ["#493d36", "#332b28"]
      }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[284] = ᐃΔ[311];
      ᐃΔ[808] = Gb(Ga, [{
        f: Fu,
        x: Fj,
        y: Gk,
        a: 1,
        r: 0,
        c: ["#c67933", "#b17238"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[809] = ᐃΔ[808];
      ᐃΔ[834] = Gb(1, [{
        f: Fu,
        x: Gk,
        y: 0,
        a: Kg,
        r: 0,
        c: ["#e8e8e8", "#bbbbbb"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[835] = ᐃΔ[834];
      ᐃΔ[845] = Gb(Ni, [{
        f: Fu,
        x: 0,
        y: 0,
        a: Fb,
        r: 0,
        c: ["#328a56", "#449573"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[846] = ᐃΔ[845];
      ᐃΔ[949] = Gb(Co, [{
        f: Fu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#c98e2f", "#a36b11"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[950] = ᐃΔ[949];
      ᐃΔ[951] = ᐃΔ[949];
      ᐃΔ[966] = Gb(Co, [{
        f: Fu,
        x: Md,
        y: 0,
        a: 1,
        r: 0,
        c: ["#13a56d", "#098a58"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[967] = ᐃΔ[966];
      ᐃΔ[968] = ᐃΔ[966];
      ᐃΔ[981] = Gb(1, [{
        f: Fu,
        x: fg,
        y: Gg,
        a: bs,
        r: 0,
        c: ["#3a8214", "#4a9c1e"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[982] = ᐃΔ[981];
      ᐃΔ[983] = ᐃΔ[981];
      ᐃΔ[959] = Gb(Co, [{
        f: Fu,
        x: gl,
        y: 0,
        a: Ni,
        r: Fj,
        c: ["#b22419", "#99110e"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[960] = ᐃΔ[959];
      ᐃΔ[961] = ᐃΔ[959];
      ᐃΔ[309] = Gb(1, [{
        f: Zb,
        x: -jb,
        y: -2,
        a: 1,
        r: -Math.PI / lg,
        c: ["#4d2d14", "#432516"]
      }, {
        f: Xb,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / Ji,
        c: ["#efd435", "#ec8d35", "#e96132"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[302] = ᐃΔ[309];
      ᐃΔ[328] = Gb(1, [{
        f: Ub,
        x: -2,
        y: -er,
        a: Ls,
        r: -Math.PI / 7,
        c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
      }, {
        f: Xb,
        x: -qo,
        y: -_,
        a: ck,
        r: -Math.PI / 7,
        c: ["#efd435", "#ec8d35", "#e96132"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[327] = ᐃΔ[328];
      ᐃΔ[860] = Gb(_h, [{
        f: hu,
        x: 2,
        y: tj,
        a: Ga,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
      }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[865] = Gb(1, [{
        f: tu,
        x: zd,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[829] = Gb(Ni, [{
        f: eu,
        x: Nr,
        y: qb,
        a: _,
        r: Math.PI / gs,
        c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[261] = Gb(ck, [{
        f: ku,
        x: bq,
        y: 0,
        a: Ls,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[292] = Gb(1, [{
        f: yu,
        x: 2,
        y: Gg,
        a: ig,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[293] = Gb(Ga, [{
        f: Bu,
        x: qi,
        y: Aa,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[455] = Gb(bd, [{
        f: Du,
        x: 2,
        y: Rl,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[313] = Gb(1, [{
        f: du,
        x: -Nr,
        y: ie,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[312] = Gb(1, [{
        f: du,
        x: -zd,
        y: Eg,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[258] = Gb(1, [{
        f: du,
        x: -bq,
        y: Zg,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[296] = Gb(_h, [{
        f: du,
        x: -2,
        y: ie,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[458] = Gb(1, [{
        f: du,
        x: -jg,
        y: bt,
        a: bd,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[1017] = [];
      ᐃΔ[1017][Aa] = Δᐃ.ⲆⵠⵠΔΔⲆⵠ;
      ᐃΔ[1017][ck] = Δᐃ.ΔᐃΔⲆⲆⵠᐃ;
      ᐃΔ[1017][2] = Δᐃ.ⵠⲆⲆΔᐃᐃΔ;
      ᐃΔ[1019] = ᐃΔ[1017];
      ᐃΔ[1018] = ᐃΔ[1017];
      ᐃΔ[315] = Gb(1, [{
        f: wu,
        x: -lu,
        y: -5,
        a: 1,
        r: Ih,
        c: ["#252B28", "#58645F", "#75827D"]
      }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[297] = Gb(1, [{
        f: Ju,
        x: -_j,
        y: -5,
        a: 1,
        r: gl,
        c: ["#282823", "#877c2d", "#c4bc51"]
      }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[298] = Gb(1, [{
        f: Ku,
        x: -un,
        y: -ko,
        a: 1,
        r: 0,
        c: ["#232828", "#3fc9c9", "#74ede6"]
      }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[316] = Gb(ig, [{
        f: Zb,
        x: sb,
        y: -5,
        a: bs,
        r: Math.PI / 2.5,
        c: ["#4d2d14", "#432516"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[830] = ᐃΔ[829];
      ᐃΔ[254] = ᐃΔ[261];
      ᐃΔ[290] = ᐃΔ[292];
      ᐃΔ[291] = ᐃΔ[293];
      ᐃΔ[456] = ᐃΔ[455];
      ᐃΔ[314] = ᐃΔ[313];
      ᐃΔ[256] = ᐃΔ[312];
      ᐃΔ[295] = ᐃΔ[258];
      ᐃΔ[257] = ᐃΔ[296];
      ᐃΔ[460] = ᐃΔ[458];
      ᐃΔ[277] = Gb(1, [{
        f: yb,
        x: An,
        y: yj,
        a: bs,
        r: 0
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[310] = Gb(bs, [{
        f: Ab,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
      }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[262] = ᐃΔ[310];
      ᐃΔ[329] = Gb(_, [{
        f: rd,
        x: -2,
        y: -2,
        a: 1,
        r: xq,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[263] = ᐃΔ[329];
      ᐃΔ[331] = Gb(Ek, [{
        f: Yu,
        x: 0,
        y: 0,
        a: Ni,
        r: qb,
        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[332] = ᐃΔ[331];
      ᐃΔ[492] = Gb(sl, [{
        f: rd,
        x: fg,
        y: 0,
        a: 1,
        r: xq,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[493] = ᐃΔ[492];
      ᐃΔ[330] = Gb(bd, [{
        f: ad,
        x: 0,
        y: qu,
        a: Fb,
        r: 0,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[265] = ᐃΔ[330];
      ᐃΔ[317] = Gb(Gt, [{
        f: id,
        x: bu,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
      }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[318] = ᐃΔ[317];
      ᐃΔ[319] = Gb(1, [{
        f: _d,
        x: Gg,
        y: 0,
        a: 1,
        r: yj,
        c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[320] = ᐃΔ[319];
      ᐃΔ[362] = Gb(1, [{
        f: Qd,
        x: Ih,
        y: 0,
        a: Lu,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[363] = ᐃΔ[362];
      ᐃΔ[364] = Gb(1, [{
        f: Qd,
        x: 0,
        y: Gk,
        a: Co,
        r: 0,
        c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[365] = ᐃΔ[364];
      ᐃΔ[361] = Gb(1, [{
        f: Wd,
        x: 0,
        y: 0,
        a: bd,
        r: bu,
        c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[360] = ᐃΔ[361];
      ᐃΔ[495] = Gb(sc, [{
        f: Wd,
        x: qu,
        y: Aa,
        a: 1,
        r: Md,
        c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[496] = ᐃΔ[495];
      ᐃΔ[335] = Gb(1, [{
        f: od,
        x: et,
        y: Gg,
        a: 1,
        r: qu,
        c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[268] = ᐃΔ[335];
      ᐃΔ[372] = Gb(Mg, [{
        f: ud,
        x: 0,
        y: 0,
        a: _,
        r: Qr,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[371] = ᐃΔ[372];
      ᐃΔ[499] = Gb(1, [{
        f: ud,
        x: Gk,
        y: 0,
        a: Ls,
        r: tj,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[498] = ᐃΔ[499];
      ᐃΔ[375] = Gb(Ls, [{
        f: gd,
        x: sb,
        y: Gg,
        a: Mg,
        r: tj,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[374] = ᐃΔ[375];
      ᐃΔ[378] = Gb(1, [{
        f: Td,
        x: 0,
        y: 0,
        a: Ls,
        r: 0,
        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[377] = ᐃΔ[378];
      ᐃΔ[337] = Gb(ck, [{
        f: Sd,
        x: xq,
        y: 2,
        a: 1,
        r: 0,
        c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[338] = ᐃΔ[337];
      ᐃΔ[300] = Gb(Ga, [{
        f: Qb,
        x: sb,
        y: -Lq,
        a: 1,
        r: Md,
        c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
      }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[323] = Gb(1, [{
        f: Qb,
        x: 0,
        y: -3,
        a: _,
        r: 0,
        c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
      }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[325] = ᐃΔ[323];
      ᐃΔ[305] = Gb(sc, [{
        f: Lb,
        x: -3,
        y: -3,
        a: Ek,
        r: 0,
        c: ["#cec0c4", "#ffffff", "#6d6768"]
      }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[513] = Gb(_h, [{
        f: Lb,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#d4e9ec", "#37b1d7", "#506c71"]
      }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[515] = ᐃΔ[513];
      ᐃΔ[368] = Gb(1, [{
        f: Rd,
        x: -rb,
        y: -3,
        a: Ls,
        r: sb,
        c: ["#ef96be", "#ffffff"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[1162] = Gb(1, [{
        f: Rd,
        x: -Ou,
        y: -Ql,
        a: bs,
        r: Fj,
        c: ["#55423e", "#ffffff"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[178] = Gb(Ls, [{
        f: ed,
        x: 0,
        y: 0,
        a: ck,
        r: 0,
        c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[179] = Gb(Ni, [{
        f: ed,
        x: 0,
        y: 0,
        a: 1,
        r: An,
        c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[624] = Gb(bd, [{
        f: Rd,
        x: 0,
        y: 0,
        a: ck,
        r: An,
        c: ["#201851", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[393] = Gb(Lu, [{
        f: Rd,
        x: -wi,
        y: -Ql,
        a: Ls,
        r: et,
        c: ["#231f20", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[505] = Gb(bd, [{
        f: Rd,
        x: -Xu,
        y: -Mh,
        a: Co,
        r: 0,
        c: ["#ffffff", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[369] = Gb(Kg, [{
        f: Id,
        x: sb,
        y: qb,
        a: Co,
        r: 0,
        c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[370] = ᐃΔ[369];
      ᐃΔ[381] = Gb(1, [{
        f: Cd,
        x: 0,
        y: 0,
        a: wh,
        r: 0,
        c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[380] = ᐃΔ[381];
      ᐃΔ[502] = Gb(Mg, [{
        f: Ed,
        x: Fj,
        y: Fj,
        a: 1,
        r: Fj,
        c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[503] = ᐃΔ[502];
      ᐃΔ[880] = Gb(Ls, [{
        f: Xt,
        x: 0,
        y: 5,
        a: er,
        r: 0,
        c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[881] = ᐃΔ[880];
      ᐃΔ[882] = Gb(Ek, [{
        f: $b,
        x: 0,
        y: 5,
        a: 1,
        r: sb,
        c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[883] = ᐃΔ[882];
      ᐃΔ[303] = Gb(1, [{
        f: Ob,
        x: -2,
        y: -jg,
        a: 1,
        r: 0,
        c: ["#ffffff", "#cec0c4"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[304] = ᐃΔ[303];
      ᐃΔ[392] = [];
      ᐃΔ[392][0] = Δᐃ.ᐃⲆᐃⲆⵠΔⲆ;
      ᐃΔ[392][1] = Δᐃ.ᐃΔΔᐃᐃⲆⵠ;
      ᐃΔ[392][Nr] = Δᐃ.ΔΔΔⵠⵠⲆᐃ;
      ᐃΔ[367] = ᐃΔ[392];
      ᐃΔ[975] = [];
      ᐃΔ[975][fg] = Δᐃ.ⵠⵠⵠᐃᐃᐃⲆ;
      ᐃΔ[975][bd] = Δᐃ.ⲆⵠⵠᐃᐃⲆᐃ;
      ᐃΔ[975][Nj] = Δᐃ.ᐃⲆⵠⲆⵠᐃΔ;
      ᐃΔ[977] = ᐃΔ[975];
      ᐃΔ[976] = ᐃΔ[975];
      ᐃΔ[978] = [];
      ᐃΔ[978][qu] = Δᐃ.ⲆⲆⵠⵠᐃΔⵠ;
      ᐃΔ[978][1] = Δᐃ.ⲆᐃΔⲆⵠⲆᐃ;
      ᐃΔ[978][2] = Δᐃ.ⲆⵠⲆΔΔᐃᐃ;
      ᐃΔ[980] = ᐃΔ[978];
      ᐃΔ[979] = ᐃΔ[978];
      ᐃΔ[1158] = [];
      ᐃΔ[1158][An] = Δᐃ.ᐃΔΔᐃⵠᐃⲆ;
      ᐃΔ[1158][_] = Δᐃ.ᐃΔΔᐃⵠᐃⲆ;
      ᐃΔ[1158][2] = Δᐃ.ᐃΔΔᐃⵠᐃⲆ;
      ᐃΔ[1159] = ᐃΔ[1158];
      ᐃΔ[426] = [];
      ᐃΔ[426][0] = Δᐃ.ⵠⲆΔⲆⲆΔⲆ;
      ᐃΔ[426][1] = Δᐃ.ᐃΔᐃⵠⲆⲆⲆ;
      ᐃΔ[426][bq] = Δᐃ.ⲆⲆⲆⲆᐃΔΔ;
      ᐃΔ[427] = ᐃΔ[426];
      ᐃΔ[428] = ᐃΔ[426];
      ᐃΔ[1160] = [];
      ᐃΔ[1160][gl] = Δᐃ.ᐃΔΔⲆⵠⲆⲆ;
      ᐃΔ[1160][Ek] = Δᐃ.ᐃΔΔⲆⵠⲆⲆ;
      ᐃΔ[1160][2] = Δᐃ.ᐃΔΔⲆⵠⲆⲆ;
      ᐃΔ[1161] = ᐃΔ[1160];
      ᐃΔ[1236] = [];
      ᐃΔ[1236][0] = Δᐃ.ᐃⲆΔΔᐃⲆᐃ;
      ᐃΔ[1236][Mg] = Δᐃ.ⲆⲆΔⲆⵠⲆᐃ;
      ᐃΔ[1236][2] = Δᐃ.ⵠᐃⲆΔᐃΔᐃ;
      ᐃΔ[1235] = ᐃΔ[1236];
      ᐃΔ[1237] = ᐃΔ[1236];
      ᐃΔ[991] = [];
      ᐃΔ[991][Ih] = Δᐃ.ΔⵠⲆⲆΔⵠᐃ;
      ᐃΔ[991][sl] = Δᐃ.ⵠΔΔⵠⲆⲆⲆ;
      ᐃΔ[991][2] = Δᐃ.ᐃⵠⲆⲆᐃⵠⲆ;
      ᐃΔ[990] = ᐃΔ[991];
      ᐃΔ[992] = ᐃΔ[991];
      ᐃΔ[994] = [];
      ᐃΔ[994][Aa] = Δᐃ.ΔΔᐃⵠΔᐃⲆ;
      ᐃΔ[994][sc] = Δᐃ.ᐃⲆⵠΔΔⲆⲆ;
      ᐃΔ[994][qi] = Δᐃ.ⲆᐃⲆᐃⲆΔᐃ;
      ᐃΔ[993] = ᐃΔ[994];
      ᐃΔ[995] = ᐃΔ[994];
      ᐃΔ[997] = [];
      ᐃΔ[997][tj] = Δᐃ.ᐃⵠᐃΔΔᐃᐃ;
      ᐃΔ[997][_] = Δᐃ.ⲆⲆⵠⲆᐃⲆⵠ;
      ᐃΔ[997][2] = Δᐃ.ᐃⲆⲆᐃⵠᐃⲆ;
      ᐃΔ[996] = ᐃΔ[997];
      ᐃΔ[998] = ᐃΔ[997];
      ᐃΔ[1000] = [];
      ᐃΔ[1000][0] = Δᐃ.ⵠⲆⲆᐃΔⵠᐃ;
      ᐃΔ[1000][1] = Δᐃ.ΔⲆⵠΔΔᐃⵠ;
      ᐃΔ[1000][Ht] = Δᐃ.ⵠΔⵠⵠⲆⵠⲆ;
      ᐃΔ[999] = ᐃΔ[1000];
      ᐃΔ[1001] = ᐃΔ[1000];
      ᐃΔ[1003] = [];
      ᐃΔ[1003][tj] = Δᐃ.ΔΔΔΔᐃΔᐃ;
      ᐃΔ[1003][1] = Δᐃ.ⵠⲆᐃΔΔΔⵠ;
      ᐃΔ[1003][2] = Δᐃ.ⵠⵠᐃᐃᐃⵠΔ;
      ᐃΔ[1002] = ᐃΔ[1003];
      ᐃΔ[1004] = ᐃΔ[1003];
      ᐃΔ[1006] = [];
      ᐃΔ[1006][xq] = Δᐃ.ΔΔΔⵠΔᐃΔ;
      ᐃΔ[1006][sl] = Δᐃ.ⲆΔΔⲆⲆΔⵠ;
      ᐃΔ[1006][X] = Δᐃ.ⵠᐃⲆᐃΔⵠⵠ;
      ᐃΔ[1005] = ᐃΔ[1006];
      ᐃΔ[1007] = ᐃΔ[1006];
      ᐃΔ[1009] = [];
      ᐃΔ[1009][Ih] = Δᐃ.ⲆᐃⲆⵠⵠᐃⲆ;
      ᐃΔ[1009][_] = Δᐃ.ⲆⵠⵠⵠⲆΔⲆ;
      ᐃΔ[1009][2] = Δᐃ.ⵠⲆⲆᐃⵠᐃΔ;
      ᐃΔ[1008] = ᐃΔ[1009];
      ᐃΔ[1010] = ᐃΔ[1009];
      ᐃΔ[1012] = [];
      ᐃΔ[1012][0] = Δᐃ.ΔⲆᐃⵠΔᐃΔ;
      ᐃΔ[1012][Lu] = Δᐃ.ⲆᐃᐃᐃΔΔⵠ;
      ᐃΔ[1012][On] = Δᐃ.ⵠⵠᐃΔⵠᐃᐃ;
      ᐃΔ[1011] = ᐃΔ[1012];
      ᐃΔ[1013] = ᐃΔ[1012];
      ᐃΔ[1015] = [];
      ᐃΔ[1015][0] = Δᐃ.ΔⵠⲆⵠᐃᐃᐃ;
      ᐃΔ[1015][Ek] = Δᐃ.ᐃΔⵠᐃᐃⵠⲆ;
      ᐃΔ[1015][2] = Δᐃ.ⵠΔΔᐃΔⲆᐃ;
      ᐃΔ[1014] = ᐃΔ[1015];
      ᐃΔ[1016] = ᐃΔ[1015];
      ᐃΔ[1035] = [];
      ᐃΔ[1035][bu] = Δᐃ.ΔⲆⵠΔΔ;
      ᐃΔ[1035][1] = Δᐃ.ΔⲆⵠΔΔ;
      ᐃΔ[1035][2] = Δᐃ.ΔⲆⵠΔΔ;
      ᐃΔ[rs.ⵠⲆⵠΔᐃⵠΔᐃᐃ] = ᐃΔ[1035];
      ᐃΔ[1036] = ᐃΔ[1035];
      ᐃΔ[1037] = [];
      ᐃΔ[1037][0] = Δᐃ.ⲆⵠⲆΔⵠ;
      ᐃΔ[1037][1] = Δᐃ.ⲆⵠⲆΔⵠ;
      ᐃΔ[1037][2] = Δᐃ.ⲆⵠⲆΔⵠ;
      ᐃΔ[rs.ΔⵠᐃΔᐃΔⵠᐃᐃ] = ᐃΔ[1037];
      ᐃΔ[1038] = ᐃΔ[1037];
      ᐃΔ[1039] = [];
      ᐃΔ[1039][gl] = Δᐃ.ⲆⲆΔⵠⵠ;
      ᐃΔ[1039][1] = Δᐃ.ⲆⲆΔⵠⵠ;
      ᐃΔ[1039][2] = Δᐃ.ⲆⲆΔⵠⵠ;
      ᐃΔ[rs.ᐃⵠᐃΔⵠᐃᐃⲆᐃ] = ᐃΔ[1039];
      ᐃΔ[1040] = ᐃΔ[1039];
      ᐃΔ[1156] = [];
      ᐃΔ[1156][0] = Δᐃ.ᐃᐃΔΔΔ;
      ᐃΔ[1156][Lu] = Δᐃ.ᐃᐃΔΔΔ;
      ᐃΔ[1156][qo] = Δᐃ.ᐃᐃΔΔΔ;
      ᐃΔ[1157] = ᐃΔ[1156];
      ᐃΔ[1046] = [];
      ᐃΔ[1046][0] = Δᐃ.ᐃⲆⲆⲆⲆⲆⲆ;
      ᐃΔ[1046][Ek] = Δᐃ.ⲆΔⵠⵠᐃΔⵠ;
      ᐃΔ[1046][Nr] = Δᐃ.ᐃⵠⵠᐃⵠᐃΔ;
      ᐃΔ[1048] = ᐃΔ[1046];
      ᐃΔ[1047] = ᐃΔ[1046];
      ᐃΔ[744] = [];
      ᐃΔ[744][0] = Δᐃ.ᐃⲆⲆΔᐃΔᐃ;
      ᐃΔ[744][1] = Δᐃ.ⲆΔΔΔⵠΔᐃ;
      ᐃΔ[744][br] = Δᐃ.ⲆⵠⲆΔⵠⵠⵠ;
      ᐃΔ[746] = ᐃΔ[744];
      ᐃΔ[745] = ᐃΔ[744];
      ᐃΔ[747] = [];
      ᐃΔ[747][0] = Δᐃ.ⲆⲆⵠⲆⵠⵠⲆ;
      ᐃΔ[747][1] = Δᐃ.ᐃⵠⲆΔᐃⲆᐃ;
      ᐃΔ[747][2] = Δᐃ.ΔⵠⲆⵠᐃⵠΔ;
      ᐃΔ[749] = ᐃΔ[747];
      ᐃΔ[748] = ᐃΔ[747];
      ᐃΔ[1049] = [];
      ᐃΔ[1049][xq] = Δᐃ.ⵠⵠᐃᐃⵠᐃⵠ;
      ᐃΔ[1049][Ni] = Δᐃ.ᐃΔⵠᐃᐃⲆΔ;
      ᐃΔ[1049][Ht] = Δᐃ.ΔᐃⲆᐃⲆⵠⲆ;
      ᐃΔ[1051] = ᐃΔ[1049];
      ᐃΔ[1050] = ᐃΔ[1049];
      ᐃΔ[1189] = [];
      ᐃΔ[1189][0] = Δᐃ.ᐃΔⲆⲆⲆΔⲆ;
      ᐃΔ[1189][Ga] = Δᐃ.ⲆᐃΔⲆᐃⵠΔ;
      ᐃΔ[1189][qi] = Δᐃ.ⵠⵠⲆΔΔᐃᐃ;
      ᐃΔ[1191] = ᐃΔ[1189];
      ᐃΔ[1190] = ᐃΔ[1189];
      ᐃΔ[1110] = [];
      ᐃΔ[1110][Ah] = Δᐃ.ᐃΔⵠⲆⵠⵠⵠ;
      ᐃΔ[1110][wh] = Δᐃ.ΔᐃᐃⲆⲆⲆΔ;
      ᐃΔ[1110][2] = Δᐃ.ⵠⵠΔᐃᐃᐃⵠ;
      ᐃΔ[1112] = ᐃΔ[1110];
      ᐃΔ[1111] = ᐃΔ[1110];
      ᐃΔ[1131] = [];
      ᐃΔ[1131][qu] = Δᐃ.ΔΔᐃΔⲆⵠΔⲆᐃ;
      ᐃΔ[1131][Ga] = Δᐃ.ⲆⲆⲆΔⲆⵠⲆⲆⵠ;
      ᐃΔ[1131][2] = Δᐃ.ᐃⵠⲆⲆⲆⵠⵠᐃⲆ;
      ᐃΔ[1133] = ᐃΔ[1131];
      ᐃΔ[1132] = ᐃΔ[1131];
      ᐃΔ[1137] = [];
      ᐃΔ[1137][0] = Δᐃ.ΔᐃⵠⵠⲆⲆⲆ;
      ᐃΔ[1137][bs] = Δᐃ.ⵠⲆΔⲆΔΔⵠ;
      ᐃΔ[1137][nd] = Δᐃ.ⲆᐃᐃᐃⵠΔⲆ;
      ᐃΔ[1138] = ᐃΔ[1137];
      ᐃΔ[1139] = ᐃΔ[1137];
      ᐃΔ[1140] = [];
      ᐃΔ[1140][0] = Δᐃ.ⲆΔⲆⵠΔⵠⵠ;
      ᐃΔ[1140][1] = Δᐃ.ΔΔⵠⲆᐃⵠⵠ;
      ᐃΔ[1140][2] = Δᐃ.ΔΔΔᐃⵠⲆⵠ;
      ᐃΔ[1141] = ᐃΔ[1140];
      ᐃΔ[1142] = ᐃΔ[1140];
      ᐃΔ[1117] = [];
      ᐃΔ[1117][tj] = Δᐃ.ΔᐃⲆⲆᐃⲆΔ;
      ᐃΔ[1117][1] = Δᐃ.ᐃⲆΔΔⵠⲆⵠ;
      ᐃΔ[1117][2] = Δᐃ.ⵠΔⲆΔⵠΔⵠ;
      ᐃΔ[1116] = ᐃΔ[1117];
      ᐃΔ[1118] = ᐃΔ[1117];
      ᐃΔ[1080] = [];
      ᐃΔ[1080][0] = Δᐃ.ΔΔⵠⲆⵠΔⵠ;
      ᐃΔ[1080][1] = Δᐃ.ⵠᐃΔⲆΔⵠᐃ;
      ᐃΔ[1080][Ht] = Δᐃ.ᐃⲆⲆⲆᐃᐃΔ;
      ᐃΔ[1082] = ᐃΔ[1080];
      ᐃΔ[1081] = ᐃΔ[1080];
      ᐃΔ[1224] = [];
      ᐃΔ[1224][Rl] = Δᐃ.ⵠⵠᐃⵠᐃⵠΔ;
      ᐃΔ[1224][Gt] = Δᐃ.ᐃⲆᐃⵠⵠⵠᐃ;
      ᐃΔ[1224][qi] = Δᐃ.ⲆᐃⲆᐃΔⲆᐃ;
      ᐃΔ[1226] = ᐃΔ[1224];
      ᐃΔ[1225] = ᐃΔ[1224];
      ᐃΔ[1095] = [];
      ᐃΔ[1095][0] = Δᐃ.ᐃⲆΔⲆΔⲆⵠ;
      ᐃΔ[1095][1] = Δᐃ.ⵠⵠΔΔᐃⲆⵠ;
      ᐃΔ[1095][il] = Δᐃ.ᐃᐃᐃᐃⵠᐃⵠ;
      ᐃΔ[1097] = ᐃΔ[1095];
      ᐃΔ[1096] = ᐃΔ[1095];
      ᐃΔ[717] = Gb(Mg, [{
        f: um,
        x: xq,
        y: 0,
        a: Lu,
        r: 0,
        c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
      }, {
        f: Oc,
        x: 0,
        y: 0,
        a: Lu,
        r: Ih,
        c: ["#e4c027"]
      }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[718] = ᐃΔ[717];
      ᐃΔ[408] = Gb(1, [{
        f: ld,
        x: gl,
        y: Rl,
        a: Ls,
        r: qu,
        c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
      }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[409] = ᐃΔ[408];
      ᐃΔ[907] = Gb(1, [{
        f: vd,
        x: 0,
        y: 0,
        a: 1,
        r: qu,
        c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
      }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[909] = ᐃΔ[907];
      ᐃΔ[908] = ᐃΔ[907];
      ᐃΔ[197] = Gb(1, [{
        f: md,
        x: Gg,
        y: 0,
        a: 1,
        r: Ih,
        c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
      }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[906] = ᐃΔ[197];
      ᐃΔ[901] = Gb(er, [{
        f: Pd,
        x: 2,
        y: sb,
        a: Gt,
        r: Math.PI / Eg,
        c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[900] = ᐃΔ[901];
      ᐃΔ[899] = ᐃΔ[901];
      ᐃΔ[401] = Gb(bs, [{
        f: wd,
        x: 2,
        y: An,
        a: er,
        r: Math.PI / rh,
        c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[402] = ᐃΔ[401];
      ᐃΔ[395] = Gb(1, [{
        f: Ad,
        x: 2,
        y: Md,
        a: 1,
        r: Math.PI / gs,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[396] = ᐃΔ[395];
      ᐃΔ[398] = Gb(1, [{
        f: xd,
        x: On,
        y: fg,
        a: bs,
        r: Math.PI / _j,
        c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[399] = ᐃΔ[398];
      ᐃΔ[404] = Gb(Mg, [{
        f: yd,
        x: jb,
        y: 0,
        a: 1,
        r: Math.PI / Jb,
        c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[405] = ᐃΔ[404];
      ᐃΔ[472] = Gb(wh, [{
        f: kd,
        x: 2,
        y: 0,
        a: _h,
        r: Math.PI / un,
        c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[473] = ᐃΔ[472];
      ᐃΔ[874] = Gb(1, [{
        f: Bd,
        x: 2,
        y: An,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
      }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[876] = ᐃΔ[874];
      ᐃΔ[875] = ᐃΔ[874];
      ᐃΔ[477] = Gb(ig, [{
        f: Ld,
        x: Od,
        y: yj,
        a: ck,
        r: Math.PI / rh,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[478] = ᐃΔ[477];
      ᐃΔ[709] = Gb(Fb, [{
        f: im,
        x: 0,
        y: 0,
        a: Co,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#939393", "#5f6061"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[711] = ᐃΔ[709];
      ᐃΔ[550] = Gb(Ek, [{
        f: Jc,
        x: On,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[551] = ᐃΔ[550];
      ᐃΔ[480] = Gb(1, [{
        f: Ld,
        x: X,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[481] = ᐃΔ[480];
      ᐃΔ[483] = Gb(1, [{
        f: Ld,
        x: 2,
        y: Qr,
        a: 1,
        r: Math.PI / Zg,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[484] = ᐃΔ[483];
      ᐃΔ[486] = Gb(sl, [{
        f: Ld,
        x: 2,
        y: Qr,
        a: Ni,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[487] = ᐃΔ[486];
      ᐃΔ[489] = [];
      ᐃΔ[489][Ih] = Δᐃ.ⲆⲆⲆⲆⲆⵠⵠ;
      ᐃΔ[489][1] = Δᐃ.ΔᐃΔⵠⲆΔⲆ;
      ᐃΔ[489][2] = Δᐃ.ᐃΔⲆᐃⵠΔⲆ;
      ᐃΔ[491] = ᐃΔ[489];
      ᐃΔ[490] = ᐃΔ[489];
      ᐃΔ[1195] = [];
      ᐃΔ[1195][0] = Δᐃ.ᐃⵠⲆⲆΔⵠⲆ;
      ᐃΔ[1195][1] = Δᐃ.ⵠⵠΔⲆⵠⵠΔ;
      ᐃΔ[1195][2] = Δᐃ.ΔΔⲆᐃΔᐃⵠ;
      ᐃΔ[1197] = ᐃΔ[1195];
      ᐃΔ[1196] = ᐃΔ[1195];
      ᐃΔ[1199] = [];
      ᐃΔ[1199][sb] = Δᐃ.ⲆⵠⵠⲆΔΔⲆ;
      ᐃΔ[1199][1] = Δᐃ.ᐃⲆⵠⲆΔⵠⵠ;
      ᐃΔ[1199][nd] = Δᐃ.ⲆΔΔᐃⵠⲆⲆ;
      ᐃΔ[1201] = ᐃΔ[1199];
      ᐃΔ[1200] = ᐃΔ[1199];
      ᐃΔ[1203] = [];
      ᐃΔ[1203][0] = Δᐃ.ᐃⵠⵠⲆᐃⵠⵠ;
      ᐃΔ[1203][Ls] = Δᐃ.ⲆᐃⲆⲆᐃⲆⲆ;
      ᐃΔ[1203][zd] = Δᐃ.ᐃⵠΔᐃⵠⵠΔ;
      ᐃΔ[1205] = ᐃΔ[1203];
      ᐃΔ[1204] = ᐃΔ[1203];
      ᐃΔ[1207] = [];
      ᐃΔ[1207][0] = Δᐃ.ⵠΔΔⵠᐃⲆΔ;
      ᐃΔ[1207][ig] = Δᐃ.ΔΔΔⵠᐃΔᐃ;
      ᐃΔ[1207][Od] = Δᐃ.ⵠⲆᐃⵠᐃⲆⲆ;
      ᐃΔ[1209] = ᐃΔ[1207];
      ᐃΔ[1208] = ᐃΔ[1207];
      ᐃΔ[1211] = [];
      ᐃΔ[1211][0] = Δᐃ.ΔⲆᐃⲆᐃⲆᐃ;
      ᐃΔ[1211][Mg] = Δᐃ.ΔⵠⲆᐃᐃⲆⲆ;
      ᐃΔ[1211][2] = Δᐃ.ᐃⲆⲆᐃⵠⲆⲆ;
      ᐃΔ[1213] = ᐃΔ[1211];
      ᐃΔ[1212] = ᐃΔ[1211];
      ᐃΔ[1215] = [];
      ᐃΔ[1215][0] = Δᐃ.ⵠΔⵠΔᐃⲆᐃ;
      ᐃΔ[1215][1] = Δᐃ.ⲆΔⲆᐃⲆΔⲆ;
      ᐃΔ[1215][2] = Δᐃ.ⵠΔᐃⲆΔⵠⵠ;
      ᐃΔ[1217] = ᐃΔ[1215];
      ᐃΔ[1216] = ᐃΔ[1215];
      ᐃΔ[518] = Gb(1, [{
        f: yc,
        x: -2,
        y: -Od,
        a: ck,
        r: tj,
        c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
      }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[519] = ᐃΔ[518];
      ᐃΔ[532] = Gb(1, [{
        f: cc,
        x: -2,
        y: -2,
        a: wh,
        r: -Math.PI / 5,
        c: ["#141414", "#c4a23a", "#816511"]
      }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[533] = ᐃΔ[532];
      ᐃΔ[521] = Gb(1, [{
        f: xc,
        x: -2,
        y: -Ol,
        a: 1,
        r: Rl,
        c: ["#141414", "#178a99", "#0a6372", "#03282e"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
      ᐃΔ[523] = Gb(1, [{
        f: xc,
        x: -2,
        y: -2,
        a: _,
        r: Md,
        c: ["#120202", "#991616", "#750a0a", "#120202"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
      ᐃΔ[529] = Gb(Fb, [{
        f: zc,
        x: et,
        y: 0,
        a: 1,
        r: Qr,
        c: ["#347f93", "#54a4ba"]
      }, {
        f: dc,
        x: 0,
        y: gl,
        a: 1,
        r: tj,
        c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
      }, {
        f: Bc,
        x: 0,
        y: Fj,
        a: Fb,
        r: et,
        c: ["#a9e4ed", "#86d4e0"]
      }, {
        f: Sc,
        x: Gk,
        y: Gg,
        a: Fb,
        r: 0,
        c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[530] = ᐃΔ[529];
      ᐃΔ[553] = Gb(1, [{
        f: jc,
        x: 45,
        y: 70,
        a: 1,
        r: yj,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[555] = ᐃΔ[553];
      ᐃΔ[541] = Gb(1, [{
        f: Qc,
        x: 0,
        y: 0,
        a: er,
        r: 0,
        c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[542] = ᐃΔ[541];
      ᐃΔ[779] = Gb(Ls, [{
        f: pm,
        x: 0,
        y: tj,
        a: Ni,
        r: sb,
        c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[780] = ᐃΔ[779];
      ᐃΔ[767] = Gb(sc, [{
        f: dm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#2a2938", "#242330", "#313041"]
      }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[768] = ᐃΔ[767];
      ᐃΔ[776] = Gb(1, [{
        f: Yc,
        x: 0,
        y: 3,
        a: 1,
        r: 0,
        c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
      }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[777] = ᐃΔ[776];
      ᐃΔ[771] = Gb(1, [{
        f: Yc,
        x: yj,
        y: Mh,
        a: 1,
        r: Gg,
        c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
      }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[772] = ᐃΔ[771];
      ᐃΔ[756] = Gb(1, [{
        f: Uc,
        x: gl,
        y: sd,
        a: Kg,
        r: 0,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[758] = ᐃΔ[756];
      ᐃΔ[760] = Gb(Ls, [{
        f: Uc,
        x: An,
        y: 10,
        a: 1,
        r: yj,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[762] = ᐃΔ[760];
      ᐃΔ[764] = Gb(1, [{
        f: Uc,
        x: fg,
        y: hh,
        a: Ek,
        r: 0,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[770] = ᐃΔ[764];
      ᐃΔ[910] = Gb(Fb, [{
        f: cd,
        x: -1,
        y: 0,
        a: ck,
        r: An,
        c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[912] = ᐃΔ[910];
      ᐃΔ[911] = ᐃΔ[910];
      ᐃΔ[732] = Gb(1, [{
        f: nc,
        x: 0,
        y: Ih,
        a: 1,
        r: Gk,
        c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
      }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[734] = ᐃΔ[732];
      ᐃΔ[563] = Gb(Mg, [{
        f: kc,
        x: sb,
        y: Ah,
        a: Ek,
        r: Math.PI / Jb,
        c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
      }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[564] = ᐃΔ[563];
      ᐃΔ[751] = Gb(Ga, [{
        f: Rc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[252] = Gb(er, [{
        f: Tc,
        x: qu,
        y: Ih,
        a: 1,
        r: bu,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[753] = Gb(_h, [{
        f: Rc,
        x: Fj,
        y: 0,
        a: Ek,
        r: gl,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[253] = Gb(sl, [{
        f: Tc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[176] = Gb(1, [{
        f: Dc,
        x: 0,
        y: 0,
        a: 1,
        r: fg,
        c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[177] = Gb(1, [{
        f: Dc,
        x: 0,
        y: qu,
        a: Mg,
        r: 0,
        c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[175] = Gb(Ga, [{
        f: Dc,
        x: Rl,
        y: 0,
        a: 1,
        r: tj,
        c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[616] = Gb(1, [{
        f: Gc,
        x: 0,
        y: et,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[618] = ᐃΔ[616];
      ᐃΔ[699] = Gb(sc, [{
        f: Gc,
        x: xq,
        y: sb,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[700] = ᐃΔ[699];
      ᐃΔ[702] = Gb(1, [{
        f: Gc,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[704] = ᐃΔ[702];
      ᐃΔ[705] = Gb(1, [{
        f: Gc,
        x: 0,
        y: 0,
        a: Ls,
        r: Math.PI / _j,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[706] = ᐃΔ[705];
      ᐃΔ[420] = Gb(ck, [{
        f: Cc,
        x: fg,
        y: yj,
        a: 1,
        r: Gk,
        c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[421] = ᐃΔ[420];
      ᐃΔ[826] = Gb(Ek, [{
        f: Fc,
        x: 0,
        y: 0,
        a: Ls,
        r: et,
        c: ["#252525", "#73583e", "#493425", "#7d6144"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[827] = ᐃΔ[826];
      ᐃΔ[429] = Gb(1, [{
        f: _c,
        x: Gk,
        y: -tk,
        a: 1,
        r: gl,
        c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[430] = ᐃΔ[429];
      ᐃΔ[432] = Gb(1, [{
        f: Ic,
        x: yj,
        y: sb,
        a: sl,
        r: sb,
        c: ["#dbce71", "#b29c32", "#c4bc51"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[433] = ᐃΔ[432];
      ᐃΔ[435] = Gb(Fb, [{
        f: Mc,
        x: et,
        y: 0,
        a: sc,
        r: 0,
        c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[436] = ᐃΔ[435];
      ᐃΔ[438] = Gb(wh, [{
        f: Wc,
        x: qb,
        y: Gg,
        a: 1,
        r: 0,
        c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[439] = ᐃΔ[438];
      ᐃΔ[441] = Gb(1, [{
        f: wc,
        x: 0,
        y: 0,
        a: 1,
        r: Fj,
        c: ["#221e1b", "#ffffff", "#f6f0e7"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[442] = ᐃΔ[441];
      ᐃΔ[418] = Gb(_h, [{
        f: Hd,
        x: -_j,
        y: -Zg,
        a: 1,
        r: 0,
        c: ["#1d051e", "#c27add", "#cd98e5"]
      }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[609] = Gb(wh, [{
        f: nm,
        x: 0,
        y: Ah,
        a: _h,
        r: Fj,
        c: ["#D7C393", "#a48c6c"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[142] = Gb(_h, [{
        f: hm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#93CBCE", "#E9F6F6"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[140] = Gb(Ni, [{
        f: nm,
        x: Fj,
        y: 0,
        a: 1,
        r: sb,
        c: ["#866432", "#6b4f25"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[180] = Gb(1, [{
        f: sm,
        x: Rn,
        y: On,
        a: 1,
        r: Md,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[181] = Gb(1, [{
        f: Cm,
        x: 3,
        y: 2,
        a: 1,
        r: An,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[784] = ᐃΔ[180];
      ᐃΔ[785] = ᐃΔ[181];
      ᐃΔ[789] = Gb(Ls, [{
        f: Tm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
      }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[791] = ᐃΔ[789];
      ᐃΔ[613] = Gb(1, [{
        f: $c,
        x: Rl,
        y: bu,
        a: 1,
        r: Math.PI / ko,
        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
      }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[612] = Gb(1, [{
        f: Vc,
        x: Gk,
        y: An,
        a: 1,
        r: Math.PI / 5,
        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
      }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[715] = ᐃΔ[613];
      ᐃΔ[611] = ᐃΔ[612];
      ᐃΔ[634] = Gb(Lu, [{
        f: uu,
        x: Gg,
        y: Ah,
        a: sc,
        r: An,
        c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[635] = ᐃΔ[634];
      ᐃΔ[200] = Gb(1, [{
        f: Cu,
        x: 0,
        y: 0,
        a: Fb,
        r: Qr,
        c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[866] = Gb(wh, [{
        f: zu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[143] = Gb(1, [{
        f: om,
        x: Aa,
        y: -jg,
        a: Ga,
        r: qb,
        c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
      }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[690] = ᐃΔ[143];
      ᐃΔ[662] = Gb(bd, [{
        f: Zu,
        x: -3,
        y: -5,
        a: bd,
        r: gl,
        c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
      }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[664] = Gb(1, [{
        f: $u,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1d051e", "#42261A", "#281818"]
      }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[666] = ᐃΔ[664];
      ᐃΔ[649] = Gb(Ls, [{
        f: Ru,
        x: -3,
        y: et,
        a: Co,
        r: 0,
        c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
      }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[650] = ᐃΔ[649];
      ᐃΔ[674] = Gb(Ga, [{
        f: Bb,
        x: 0,
        y: 0,
        a: 1,
        r: bu,
        c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
      }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[646] = Gb(Ls, [{
        f: Tu,
        x: qu,
        y: 0,
        a: Fb,
        r: 0,
        c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[647] = ᐃΔ[646];
      ᐃΔ[685] = Gb(1, [{
        f: Nc,
        x: Ih,
        y: sb,
        a: Mg,
        r: 0,
        c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[684] = ᐃΔ[685];
      ᐃΔ[870] = Gb(1, [{
        f: Cb,
        x: -un,
        y: -Ks,
        a: er,
        r: bu,
        c: ["#e2d63b", "#ee71a9", "#42b672"]
      }], Gt, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[871] = ᐃΔ[870];
      ᐃΔ[605] = Gb(1, [{
        f: zm,
        x: fg,
        y: Fj,
        a: 1,
        r: Md,
        c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
      }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[604] = ᐃΔ[605];
      ᐃΔ[842] = Gb(1, [{
        f: mb,
        x: 0,
        y: 0,
        a: 1,
        r: qu,
        c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[843] = ᐃΔ[842];
      ᐃΔ[652] = Gb(1, [{
        f: gm,
        x: -Ni,
        y: An,
        a: 1,
        r: -Math.PI / 5,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
      ᐃΔ[654] = ᐃΔ[652];
      ᐃΔ[626] = Gb(1, [{
        f: gm,
        x: -bd,
        y: 0,
        a: sc,
        r: -Math.PI / Zg,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
      }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[627] = ᐃΔ[626];
      ᐃΔ[629] = Gb(bd, [{
        f: fm,
        x: Rl,
        y: Ah,
        a: Kg,
        r: 0,
        c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[196] = Gb(ck, [{
        f: xu,
        x: 0,
        y: Aa,
        a: Kg,
        r: Ah,
        c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[898] = ᐃΔ[196];
      ᐃΔ[659] = Gb(1, [{
        f: Wu,
        x: qb,
        y: Aa,
        a: Lu,
        r: 0,
        c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
      }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[660] = ᐃΔ[659];
      ᐃΔ[145] = Gb(Mg, [{
        f: Sb,
        x: -2,
        y: -8,
        a: _h,
        r: Qr,
        c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
      }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[730] = ᐃΔ[145];
      ᐃΔ[566] = [];
      ᐃΔ[566][0] = Δᐃ.ΔⵠⵠᐃⵠⲆⵠ;
      ᐃΔ[566][Mg] = Δᐃ.ᐃᐃΔΔΔΔᐃ;
      ᐃΔ[566][qo] = Δᐃ.ⵠⲆⵠᐃⵠΔⵠ;
      ᐃΔ[567] = ᐃΔ[566];
      ᐃΔ[568] = ᐃΔ[566];
      ᐃΔ[877] = [];
      ᐃΔ[877][Ih] = Δᐃ.ΔⵠᐃΔΔⲆⲆ;
      ᐃΔ[877][ig] = Δᐃ.ᐃⲆⲆΔᐃΔⲆ;
      ᐃΔ[877][fh] = Δᐃ.ⵠⲆᐃᐃⲆᐃⲆ;
      ᐃΔ[879] = ᐃΔ[877];
      ᐃΔ[878] = ᐃΔ[877];
      ᐃΔ[933] = ᐃΔ[932];
      ᐃΔ[934] = ᐃΔ[932];
      ᐃΔ[932] = [];
      ᐃΔ[932][et] = Δᐃ.ⲆᐃⲆⵠΔⲆΔ;
      ᐃΔ[932][Gt] = Δᐃ.ᐃᐃᐃⲆⲆⲆⲆ;
      ᐃΔ[932][2] = Δᐃ.ΔⲆΔⲆⵠᐃⵠ;
      ᐃΔ[933] = ᐃΔ[932];
      ᐃΔ[934] = ᐃΔ[932];
      ᐃΔ[943] = [];
      ᐃΔ[943][0] = Δᐃ.ⲆⵠΔᐃᐃΔΔ;
      ᐃΔ[943][ig] = Δᐃ.ⲆⲆⲆᐃΔΔⵠ;
      ᐃΔ[943][bq] = Δᐃ.ⲆᐃⲆΔⵠΔⵠ;
      ᐃΔ[944] = ᐃΔ[943];
      ᐃΔ[945] = ᐃΔ[943];
      ᐃΔ[921] = [];
      ᐃΔ[921][Qr] = Δᐃ.ⲆΔᐃⵠΔΔⵠ;
      ᐃΔ[921][wh] = Δᐃ.ⵠⵠⵠⵠᐃᐃᐃ;
      ᐃΔ[921][2] = Δᐃ.ᐃΔⲆⵠⲆΔᐃ;
      ᐃΔ[922] = ᐃΔ[921];
      ᐃΔ[923] = ᐃΔ[921];
      ᐃΔ[925] = [];
      ᐃΔ[925][0] = Δᐃ.ⲆⲆᐃⲆᐃᐃΔ;
      ᐃΔ[925][sl] = Δᐃ.ᐃᐃⲆᐃΔΔⲆ;
      ᐃΔ[925][X] = Δᐃ.ⲆⲆⲆⵠⵠⵠΔ;
      ᐃΔ[926] = ᐃΔ[925];
      ᐃΔ[927] = ᐃΔ[925];
      ᐃΔ[929] = [];
      ᐃΔ[929][sb] = Δᐃ.Ⲇᐃᐃⵠⵠⵠⵠ;
      ᐃΔ[929][Fb] = Δᐃ.ᐃᐃⲆᐃⵠⵠΔ;
      ᐃΔ[929][2] = Δᐃ.ⲆΔᐃΔⵠⲆΔ;
      ᐃΔ[930] = ᐃΔ[929];
      ᐃΔ[931] = ᐃΔ[929];
      ᐃΔ[946] = [];
      ᐃΔ[946][An] = Δᐃ.ⲆΔᐃΔΔⲆᐃ;
      ᐃΔ[946][1] = Δᐃ.ⵠᐃⵠⲆΔⵠΔ;
      ᐃΔ[946][2] = Δᐃ.ΔΔⵠⲆⵠᐃΔ;
      ᐃΔ[947] = ᐃΔ[946];
      ᐃΔ[948] = ᐃΔ[946];
      ᐃΔ[735] = [];
      ᐃΔ[735][gl] = Δᐃ.ΔⵠⲆΔᐃⲆⵠ;
      ᐃΔ[735][1] = Δᐃ.ᐃⵠᐃⲆⵠᐃᐃ;
      ᐃΔ[735][Ol] = Δᐃ.ⲆΔⵠᐃᐃⵠᐃ;
      ᐃΔ[737] = ᐃΔ[735];
      ᐃΔ[736] = ᐃΔ[735];
      ᐃΔ[1164] = [];
      ᐃΔ[1164][Ah] = Δᐃ.ΔᐃᐃⲆⲆΔᐃ;
      ᐃΔ[1164][1] = Δᐃ.ⵠᐃᐃⲆᐃᐃⵠ;
      ᐃΔ[1164][X] = Δᐃ.ⵠᐃⲆⵠⲆⵠΔ;
      ᐃΔ[rs.ⵠΔⲆᐃⵠⵠᐃⵠⲆ] = ᐃΔ[1164];
      ᐃΔ[1165] = ᐃΔ[1164];
      ᐃΔ[738] = [];
      ᐃΔ[738][0] = Δᐃ.ⲆⲆᐃᐃΔᐃᐃ;
      ᐃΔ[738][Lu] = Δᐃ.ⲆᐃⲆᐃᐃΔⵠ;
      ᐃΔ[738][2] = Δᐃ.ⲆⵠΔⲆⵠΔⵠ;
      ᐃΔ[740] = ᐃΔ[738];
      ᐃΔ[739] = ᐃΔ[738];
      ᐃΔ[741] = [];
      ᐃΔ[741][et] = Δᐃ.ⲆⵠⵠΔⲆΔΔ;
      ᐃΔ[741][Fb] = Δᐃ.ΔⲆΔⵠⵠΔⲆ;
      ᐃΔ[741][2] = Δᐃ.ⵠΔⵠⲆⲆⲆⲆ;
      ᐃΔ[743] = ᐃΔ[741];
      ᐃΔ[742] = ᐃΔ[741];
      ᐃΔ[938] = [];
      ᐃΔ[938][Md] = Δᐃ.ΔⵠΔΔⵠΔᐃ;
      ᐃΔ[938][Ni] = Δᐃ.ⲆΔⵠᐃᐃⲆᐃ;
      ᐃΔ[938][jg] = Δᐃ.ᐃᐃⲆΔⵠⲆᐃ;
      ᐃΔ[939] = ᐃΔ[938];
      ᐃΔ[936] = [];
      ᐃΔ[936][0] = Δᐃ.ᐃⵠΔⵠⲆⲆᐃ;
      ᐃΔ[936][_] = Δᐃ.ⵠΔΔΔⲆᐃᐃ;
      ᐃΔ[936][qi] = Δᐃ.ᐃΔΔΔⲆᐃⲆ;
      ᐃΔ[937] = ᐃΔ[936];
      ᐃΔ[617] = ᐃΔ[616];
      ᐃΔ[701] = ᐃΔ[699];
      ᐃΔ[703] = ᐃΔ[702];
      ᐃΔ[707] = ᐃΔ[705];
      ᐃΔ[348] = ᐃΔ[311];
      ᐃΔ[633] = ᐃΔ[631];
      ᐃΔ[645] = ᐃΔ[644];
      ᐃΔ[640] = ᐃΔ[639];
      ᐃΔ[273] = ᐃΔ[309];
      ᐃΔ[590] = ᐃΔ[252];
      ᐃΔ[752] = ᐃΔ[751];
      ᐃΔ[591] = ᐃΔ[253];
      ᐃΔ[754] = ᐃΔ[753];
      ᐃΔ[276] = ᐃΔ[328];
      ᐃΔ[863] = ᐃΔ[865];
      ᐃΔ[862] = ᐃΔ[860];
      ᐃΔ[831] = ᐃΔ[829];
      ᐃΔ[340] = ᐃΔ[261];
      ᐃΔ[596] = ᐃΔ[594];
      ᐃΔ[345] = ᐃΔ[292];
      ᐃΔ[346] = ᐃΔ[293];
      ᐃΔ[457] = ᐃΔ[455];
      ᐃΔ[274] = ᐃΔ[313];
      ᐃΔ[341] = ᐃΔ[312];
      ᐃΔ[272] = ᐃΔ[258];
      ᐃΔ[344] = ᐃΔ[296];
      ᐃΔ[459] = ᐃΔ[458];
      ᐃΔ[342] = ᐃΔ[315];
      ᐃΔ[270] = ᐃΔ[297];
      ᐃΔ[271] = ᐃΔ[298];
      ᐃΔ[343] = ᐃΔ[316];
      ᐃΔ[269] = ᐃΔ[277];
      ᐃΔ[358] = ᐃΔ[310];
      ᐃΔ[354] = ᐃΔ[329];
      ᐃΔ[356] = ᐃΔ[331];
      ᐃΔ[355] = ᐃΔ[330];
      ᐃΔ[494] = ᐃΔ[492];
      ᐃΔ[349] = ᐃΔ[317];
      ᐃΔ[350] = ᐃΔ[319];
      ᐃΔ[275] = ᐃΔ[300];
      ᐃΔ[351] = ᐃΔ[323];
      ᐃΔ[353] = ᐃΔ[305];
      ᐃΔ[514] = ᐃΔ[513];
      ᐃΔ[352] = ᐃΔ[303];
      ᐃΔ[520] = ᐃΔ[518];
      ᐃΔ[534] = ᐃΔ[532];
      ᐃΔ[531] = ᐃΔ[529];
      ᐃΔ[522] = ᐃΔ[521];
      ᐃΔ[524] = ᐃΔ[523];
      ᐃΔ[565] = ᐃΔ[563];
      ᐃΔ[554] = ᐃΔ[553];
      ᐃΔ[357] = ᐃΔ[335];
      ᐃΔ[359] = ᐃΔ[337];
      ᐃΔ[339] = fa(function (a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 118;
        d.height = a * 129;
        e.save();
        e.translate(a * 90, a * 90);
        Tt(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
        e.restore();
        St(e, c[0], c[1], 4);
        e.save();
        Tt(e, a * 30, a * 115, a * 60, a * gs, a * 15);
        e.restore();
        St(e, c[Gl], c[3], oe);
        e.save();
        Tt(e, a * 50, a * 117, fl * a, a * 10, a * 15);
        e.restore();
        St(e, c[2]);
        return d;
      }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
      ᐃΔ[366] = Gb(0.5, [{
        f: Fd,
        x: fg,
        y: Nj,
        a: Co,
        r: 0,
        c: ["#ffffff"]
      }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
      ᐃΔ[382] = ᐃΔ[361];
      ᐃΔ[383] = ᐃΔ[362];
      ᐃΔ[384] = ᐃΔ[364];
      ᐃΔ[497] = ᐃΔ[495];
      ᐃΔ[385] = ᐃΔ[392];
      ᐃΔ[774] = ᐃΔ[178];
      ᐃΔ[775] = ᐃΔ[179];
      ᐃΔ[386] = ᐃΔ[368];
      ᐃΔ[625] = ᐃΔ[624];
      ᐃΔ[394] = ᐃΔ[393];
      ᐃΔ[1163] = ᐃΔ[1162];
      ᐃΔ[506] = ᐃΔ[505];
      ᐃΔ[387] = ᐃΔ[369];
      ᐃΔ[504] = ᐃΔ[502];
      ᐃΔ[388] = ᐃΔ[372];
      ᐃΔ[389] = ᐃΔ[375];
      ᐃΔ[390] = ᐃΔ[378];
      ᐃΔ[501] = ᐃΔ[499];
      ᐃΔ[391] = ᐃΔ[381];
      ᐃΔ[403] = ᐃΔ[401];
      ᐃΔ[397] = ᐃΔ[395];
      ᐃΔ[400] = ᐃΔ[398];
      ᐃΔ[406] = ᐃΔ[404];
      ᐃΔ[474] = ᐃΔ[472];
      ᐃΔ[875] = ᐃΔ[874];
      ᐃΔ[552] = ᐃΔ[550];
      ᐃΔ[710] = ᐃΔ[709];
      ᐃΔ[479] = ᐃΔ[477];
      ᐃΔ[482] = ᐃΔ[480];
      ᐃΔ[485] = ᐃΔ[483];
      ᐃΔ[488] = ᐃΔ[486];
      ᐃΔ[410] = ᐃΔ[408];
      ᐃΔ[719] = ᐃΔ[717];
      ᐃΔ[422] = ᐃΔ[420];
      ᐃΔ[431] = ᐃΔ[429];
      ᐃΔ[434] = ᐃΔ[432];
      ᐃΔ[437] = ᐃΔ[435];
      ᐃΔ[543] = ᐃΔ[541];
      ᐃΔ[733] = ᐃΔ[732];
      ᐃΔ[440] = ᐃΔ[438];
      ᐃΔ[443] = ᐃΔ[441];
      ᐃΔ[446] = ᐃΔ[418];
      ᐃΔ[606] = ᐃΔ[605];
      ᐃΔ[844] = ᐃΔ[842];
      ᐃΔ[683] = ᐃΔ[685];
      ᐃΔ[610] = ᐃΔ[609];
      ᐃΔ[689] = ᐃΔ[143];
      ᐃΔ[686] = ᐃΔ[142];
      ᐃΔ[682] = ᐃΔ[140];
      ᐃΔ[615] = ᐃΔ[613];
      ᐃΔ[614] = ᐃΔ[612];
      ᐃΔ[628] = ᐃΔ[626];
      ᐃΔ[630] = ᐃΔ[629];
      ᐃΔ[636] = ᐃΔ[634];
      ᐃΔ[868] = ᐃΔ[200];
      ᐃΔ[867] = ᐃΔ[866];
      ᐃΔ[648] = ᐃΔ[646];
      ᐃΔ[651] = ᐃΔ[649];
      ᐃΔ[653] = ᐃΔ[652];
      ᐃΔ[661] = ᐃΔ[659];
      ᐃΔ[898] = ᐃΔ[196];
      ᐃΔ[663] = ᐃΔ[662];
      ᐃΔ[665] = ᐃΔ[664];
      ᐃΔ[675] = ᐃΔ[674];
      ᐃΔ[731] = ᐃΔ[145];
      ᐃΔ[757] = ᐃΔ[756];
      ᐃΔ[759] = ᐃΔ[176];
      ᐃΔ[761] = ᐃΔ[760];
      ᐃΔ[763] = ᐃΔ[177];
      ᐃΔ[765] = ᐃΔ[764];
      ᐃΔ[766] = ᐃΔ[175];
      ᐃΔ[769] = ᐃΔ[767];
      ᐃΔ[773] = ᐃΔ[771];
      ᐃΔ[778] = ᐃΔ[776];
      ᐃΔ[781] = ᐃΔ[779];
      ᐃΔ[787] = ᐃΔ[181];
      ᐃΔ[786] = ᐃΔ[180];
      ᐃΔ[790] = ᐃΔ[789];
      ᐃΔ[801] = ᐃΔ[800];
      ᐃΔ[810] = ᐃΔ[808];
      ᐃΔ[836] = ᐃΔ[834];
      ᐃΔ[847] = ᐃΔ[845];
      ᐃΔ[828] = ᐃΔ[826];
    })();
    ᐃΔ[540] = [];
    ᐃΔ[540][rs.ⲆᐃΔ] = [];
    ᐃΔ[540][rs.ⵠⵠⵠ] = [];
    for (var b = Fj; rs.ᐃᐃΔⵠᐃΔⲆ > b; b++) {
      ᐃΔ[540][rs.ⲆᐃΔ].push(fa(Su(a, 4 + b, "#59B8CE")));
      ᐃΔ[540][rs.ⵠⵠⵠ].push(fa(Su(a, Qt + b, "#90DDD9")));
    }
    ᐃΔ[470] = [];
    ᐃΔ[470][rs.ⲆᐃΔ] = [];
    ᐃΔ[470][rs.ⵠⵠⵠ] = [];
    for (b = qb; b < rs.ⵠⲆᐃⲆᐃΔⵠ; b++) {
      ᐃΔ[470][rs.ⲆᐃΔ].push(fa(Su(a, aq + b, "#fff")));
      ᐃΔ[470][rs.ⵠⵠⵠ].push(fa(Su(a, 4 + b, "#fff")));
    }
    ᐃΔ[471] = [];
    ᐃΔ[471][rs.ⲆᐃΔ] = [];
    ᐃΔ[471][rs.ⵠⵠⵠ] = [];
    for (b = et; rs.ⵠⲆᐃⲆᐃΔⵠ > b; b++) {
      ᐃΔ[471][rs.ⲆᐃΔ].push(fa(Su(a, ms + b, "#DDCD8A")));
      ᐃΔ[471][rs.ⵠⵠⵠ].push(fa(Su(a, U + b, "#155E57")));
    }
    ᐃΔ[942] = [];
    ᐃΔ[942][rs.ⲆᐃΔ] = [];
    ᐃΔ[942][rs.ⵠⵠⵠ] = [];
    for (b = Qr; b < rs.ΔᐃⲆΔᐃᐃⲆ; b++) {
      ᐃΔ[942][rs.ⲆᐃΔ].push(fa(Su(a, 4 + b, "#353326")));
      ᐃΔ[942][rs.ⵠⵠⵠ].push(fa(Su(a, 4 + b, "#1D2526")));
    }
    ᐃΔ[201] = [];
    ᐃΔ[201][rs.ⲆᐃΔ] = fa(lb(a * 1.5, 0, ["#ee71a9"]));
    ᐃΔ[201][rs.ⵠⵠⵠ] = fa(lb(a * 1.5, 0, ["#ee71a9"]));
    ᐃΔ[872] = [ᐃΔ[201]];
    ᐃΔ[872][1] = [];
    ᐃΔ[872][X] = [];
    ᐃΔ[872][3] = [];
    ᐃΔ[872][mg] = [];
    ᐃΔ[872][1][rs.ⲆᐃΔ] = fa(lb(a * 1.5, 0, ["#e2d63b"]));
    ᐃΔ[872][ck][rs.ⵠⵠⵠ] = fa(lb(a * 1.5, 0, ["#e2d63b"]));
    ᐃΔ[872][2][rs.ⲆᐃΔ] = fa(lb(a * 1.5, 0, ["#309cbd"]));
    ᐃΔ[872][Ht][rs.ⵠⵠⵠ] = fa(lb(a * 1.5, 0, ["#309cbd"]));
    ᐃΔ[872][3][rs.ⲆᐃΔ] = fa(lb(a * 1.5, 0, ["#cd232d"]));
    ᐃΔ[872][3][rs.ⵠⵠⵠ] = fa(lb(a * 1.5, 0, ["#cd232d"]));
    ᐃΔ[872][Oa][rs.ⲆᐃΔ] = fa(lb(a * 1.5, 0, ["#42b672"]));
    ᐃΔ[872][aq][rs.ⵠⵠⵠ] = fa(lb(a * 1.5, 0, ["#42b672"]));
    if (ᐃΔᐃⵠ.ΔⲆΔᐃΔᐃⲆ("cti", bj.location.href)) {
      document.getElementById("version").innerHTML += "[CTI]";
    } else {
      fa = function (a) {
        a.loaded = 1;
        return a;
      };
    }
    ᐃΔ[797] = fa(function () {
      var a = document.createElement("canvas");
      var b = a.getContext("2d");
      a.width = 460;
      a.height = 220;
      b.fillStyle = "#3a2a0d";
      b.fillRect(Gk, 0, a.width, a.height);
      b.lineWidth = 4;
      b.beginPath();
      b.strokeStyle = "#513810";
      for (var c = 20; c < 220; c += gg) {
        b.moveTo(Md, c);
        b.lineTo(460, c);
        b.closePath();
        b.stroke();
      }
      return a;
    }());
    ᐃΔ[108] = [];
    ᐃΔ[108][rs.ⲆᐃΔ] = [];
    ᐃΔ[108][rs.ⵠⵠⵠ] = [];
    ᐃΔ[108][rs.ⲆᐃΔ].push(fa(wu(a * 1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ᐃΔ[108][rs.ⲆᐃΔ].push(fa(wu(a * 0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ᐃΔ[108][rs.ⲆᐃΔ].push(fa(wu(a * 0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ᐃΔ[108][rs.ⵠⵠⵠ].push(fa(wu(a * 1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ᐃΔ[108][rs.ⵠⵠⵠ].push(fa(wu(a * 0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ᐃΔ[108][rs.ⵠⵠⵠ].push(fa(wu(a * 0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ᐃΔ[111] = [];
    ᐃΔ[111][rs.ⲆᐃΔ] = [];
    ᐃΔ[111][rs.ⵠⵠⵠ] = [];
    ᐃΔ[111][rs.ⲆᐃΔ].push(fa(Ju(a * 1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃΔ[111][rs.ⲆᐃΔ].push(fa(Ju(a * 1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃΔ[111][rs.ⲆᐃΔ].push(fa(Ju(a * 1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃΔ[111][rs.ⵠⵠⵠ].push(fa(Ju(a * 1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
    ᐃΔ[111][rs.ⵠⵠⵠ].push(fa(Ju(a * 1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
    ᐃΔ[111][rs.ⵠⵠⵠ].push(fa(Ju(a * 1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
    ᐃΔ[112] = [];
    ᐃΔ[112][rs.ⲆᐃΔ] = [];
    ᐃΔ[112][rs.ⵠⵠⵠ] = [];
    ᐃΔ[112][rs.ⲆᐃΔ].push(fa(Ku(a * 1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ᐃΔ[112][rs.ⲆᐃΔ].push(fa(Ku(a * 0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ᐃΔ[112][rs.ⲆᐃΔ].push(fa(Ku(a * 0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ᐃΔ[112][rs.ⵠⵠⵠ].push(fa(Ku(a * 1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ᐃΔ[112][rs.ⵠⵠⵠ].push(fa(Ku(a * 0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ᐃΔ[112][rs.ⵠⵠⵠ].push(fa(Ku(a * 0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ᐃΔ[239] = [];
    ᐃΔ[239][rs.ⲆᐃΔ] = Δᐃ.ⲆⵠᐃᐃⲆⲆᐃ;
    ᐃΔ[239][rs.ⵠⵠⵠ] = Δᐃ.ⲆⵠⵠᐃⵠⲆᐃ;
    ᐃΔ[286] = [];
    ᐃΔ[286][rs.ⲆᐃΔ] = fa(_t(a * 0.6, ["#0d1b1c"]));
    ᐃΔ[286][rs.ⵠⵠⵠ] = fa(_t(a * 0.6, ["#030d14"]));
    ᐃΔ[793] = [];
    ᐃΔ[793][rs.ⲆᐃΔ] = fa(Vb(a * 0.6, ["#2a2938", "#242330"]));
    ᐃΔ[793][rs.ⵠⵠⵠ] = fa(Vb(a * 0.6, ["#1b1e30", "#161921"]));
    ᐃΔ[820] = [];
    ᐃΔ[820][rs.ⲆᐃΔ] = fa(gb(a * 0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
    ᐃΔ[820][rs.ⵠⵠⵠ] = fa(gb(a * 0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
    ᐃΔ[821] = [];
    ᐃΔ[821][rs.ⲆᐃΔ] = fa(vb(a * 0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
    ᐃΔ[821][rs.ⵠⵠⵠ] = fa(vb(a * 0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
    ᐃΔ[822] = [];
    ᐃΔ[822][rs.ⲆᐃΔ] = fa(Kb(a * 0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
    ᐃΔ[822][rs.ⵠⵠⵠ] = fa(Kb(a * 0.4, ["#030d14", "#11635e", "#02373e"]));
    ᐃΔ[823] = fa(pb(a * 0.6, ["#BB0000"]));
    ᐃΔ[824] = fa(pb(a * 0.6, ["#DBE71C"]));
    ᐃΔ[825] = fa(pb(a * 0.6, ["#00BB00"]));
    ᐃΔ[109] = [];
    ᐃΔ[109][rs.ⲆᐃΔ] = [];
    ᐃΔ[109][rs.ⵠⵠⵠ] = [];
    ᐃΔ[109][rs.ⲆᐃΔ].push(au(a * 1.1, ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"], false, qu));
    ᐃΔ[109][rs.ⲆᐃΔ].push(au(a * 1.1, ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"], true, xq));
    ᐃΔ[109][rs.ⲆᐃΔ].push(au(a * 0.9, ["#242503", "#898e0c", "#757303", "#9e9b20", "#f0f4f0", "#FFFFFF"], false, sb));
    ᐃΔ[109][rs.ⲆᐃΔ].push(au(a * 0.9, ["#242503", "#963400", "#7c2200", "#a83204", "#f0f4f0", "#FFFFFF"], true, 0));
    ᐃΔ[109][rs.ⲆᐃΔ].push(au(a * 0.7, ["#242503", "#6d5a09", "#77591a", "#7b5a1f", "#f0f4f0", "#FFFFFF"], Bo, yj));
    ᐃΔ[109][rs.ⲆᐃΔ].push(au(a * 0.7, ["#242503", "#703700", "#813009", "#813009", "#f0f4f0", "#FFFFFF"], Va, yj));
    ᐃΔ[109][rs.ⵠⵠⵠ].push(au(a * 1.1, ["#030d14", "#12493d", "#0e3831", "#155247", "#f0f4f0", "#16695f"], gh, Md));
    ᐃΔ[109][rs.ⵠⵠⵠ].push(au(a * 1.1, ["#030d14", "#12493d", "#0e3831", "#155247", "#16695f"], true, 0));
    ᐃΔ[109][rs.ⵠⵠⵠ].push(au(a * 0.9, ["#030d14", "#0b3629", "#144437", "#174235", "#16695f"], false, Ih));
    ᐃΔ[109][rs.ⵠⵠⵠ].push(au(a * 0.9, ["#030d14", "#0d2522", "#0c2821", "#0d2a28", "#16695f"], Yn, xq));
    ᐃΔ[109][rs.ⵠⵠⵠ].push(au(a * 0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], false, yj));
    ᐃΔ[109][rs.ⵠⵠⵠ].push(au(a * 0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], rn, 0));
    ᐃΔ[307] = [];
    ᐃΔ[307][rs.ⲆᐃΔ] = [];
    ᐃΔ[307][rs.ⵠⵠⵠ] = [];
    ᐃΔ[307][rs.ⲆᐃΔ].push(fa(cu(fu(a * 1.1, ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"], false), ᐃΔ[109][rs.ⲆᐃΔ][gl])));
    ᐃΔ[307][rs.ⲆᐃΔ].push(fa(cu(fu(a * 1.1, ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"], Pq), ᐃΔ[109][rs.ⲆᐃΔ][1])));
    ᐃΔ[307][rs.ⵠⵠⵠ].push(fa(cu(fu(a * 1.1, ["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], Ge), ᐃΔ[109][rs.ⵠⵠⵠ][fg])));
    ᐃΔ[307][rs.ⵠⵠⵠ].push(fa(cu(fu(a * 1.1, ["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], bh), ᐃΔ[109][rs.ⵠⵠⵠ][Ga])));
    ᐃΔ[307][rs.ⲆᐃΔ].push(fa(cu(fu(a * 0.9, ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"], ja), ᐃΔ[109][rs.ⲆᐃΔ][X])));
    ᐃΔ[307][rs.ⲆᐃΔ].push(fa(cu(fu(a * 0.9, ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"], true), ᐃΔ[109][rs.ⲆᐃΔ][2])));
    ᐃΔ[307][rs.ⵠⵠⵠ].push(fa(cu(fu(a * 0.9, ["#030d14", "#031619", "#041c21", "#0d2522", "#0c2821", "#0d2a28"], Lk), ᐃΔ[109][rs.ⵠⵠⵠ][Ht])));
    ᐃΔ[307][rs.ⵠⵠⵠ].push(fa(cu(fu(a * 0.9, ["#030d14", "#031619", "#041c21", "#0c2823", "#0b2b23", "#0c2d24"], true), ᐃΔ[109][rs.ⵠⵠⵠ][3])));
    ᐃΔ[109][rs.ⲆᐃΔ][Yl] = fa(ᐃΔ[109][rs.ⲆᐃΔ][5]);
    ᐃΔ[109][rs.ⲆᐃΔ][$j] = fa(ᐃΔ[109][rs.ⲆᐃΔ][aq]);
    ᐃΔ[109][rs.ⲆᐃΔ][3] = fa(ᐃΔ[109][rs.ⲆᐃΔ][3]);
    ᐃΔ[109][rs.ⲆᐃΔ][2] = fa(ᐃΔ[109][rs.ⲆᐃΔ][Nr]);
    ᐃΔ[109][rs.ⲆᐃΔ][1] = fa(ᐃΔ[109][rs.ⲆᐃΔ][ck]);
    ᐃΔ[109][rs.ⲆᐃΔ][0] = fa(ᐃΔ[109][rs.ⲆᐃΔ][0]);
    ᐃΔ[109][rs.ⵠⵠⵠ][5] = fa(ᐃΔ[109][rs.ⵠⵠⵠ][ul]);
    ᐃΔ[109][rs.ⵠⵠⵠ][Dd] = fa(ᐃΔ[109][rs.ⵠⵠⵠ][Jl]);
    ᐃΔ[109][rs.ⵠⵠⵠ][3] = fa(ᐃΔ[109][rs.ⵠⵠⵠ][3]);
    ᐃΔ[109][rs.ⵠⵠⵠ][2] = fa(ᐃΔ[109][rs.ⵠⵠⵠ][jg]);
    ᐃΔ[109][rs.ⵠⵠⵠ][Ek] = fa(ᐃΔ[109][rs.ⵠⵠⵠ][_]);
    ᐃΔ[109][rs.ⵠⵠⵠ][qb] = fa(ᐃΔ[109][rs.ⵠⵠⵠ][0]);
    ᐃΔ[8] = [];
    ᐃΔ[8][rs.ⲆᐃΔ] = fa(nb(4, du(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
    ᐃΔ[8][rs.ⵠⵠⵠ] = fa(nb(4, du(a * 0.75, Ms, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
    ᐃΔ[1] = [];
    ᐃΔ[1][rs.ⲆᐃΔ] = fa(nb(4, du(a * 0.75, rg, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ᐃΔ[1][rs.ⵠⵠⵠ] = fa(nb(Oa, du(a * 0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
    ᐃΔ[3] = [];
    ᐃΔ[3][rs.ⲆᐃΔ] = fa(nb(4, du(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ᐃΔ[3][rs.ⵠⵠⵠ] = fa(nb(Dd, du(a * 0.75, true, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
    ᐃΔ[4] = [];
    ᐃΔ[4][rs.ⲆᐃΔ] = fa(nb(Zt, du(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ᐃΔ[4][rs.ⵠⵠⵠ] = fa(nb(Qt, du(a * 0.75, rn, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ᐃΔ[31] = [];
    ᐃΔ[31][rs.ⲆᐃΔ] = fa(nb(Mu, du(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ᐃΔ[31][rs.ⵠⵠⵠ] = fa(nb(Dd, du(a * 0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ᐃΔ[9] = [];
    ᐃΔ[9][rs.ⲆᐃΔ] = fa(nb(3, hu(a * 0.17, true, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
    ᐃΔ[9][rs.ⵠⵠⵠ] = fa(nb(Hn, hu(a * 0.17, xa, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
    ᐃΔ[199] = [];
    ᐃΔ[199][rs.ⲆᐃΔ] = fa(nb(Ft, tu(a * 0.32, true, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
    ᐃΔ[199][rs.ⵠⵠⵠ] = fa(nb(Mh, tu(a * 0.42, bh, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
    ᐃΔ[57] = [];
    ᐃΔ[57][rs.ⲆᐃΔ] = fa(nb(3, eu(a * 0.4, true, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
    ᐃΔ[57][rs.ⵠⵠⵠ] = fa(nb(3, eu(a * 0.4, true, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
    ᐃΔ[0] = [];
    ᐃΔ[0][rs.ⲆᐃΔ] = fa(nb(Ft, ku(a * 0.4, true, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
    ᐃΔ[0][rs.ⵠⵠⵠ] = fa(nb(3, ku(a * 0.4, true, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
    ᐃΔ[5] = [];
    ᐃΔ[5][rs.ⲆᐃΔ] = fa(nb(3, yu(a * 0.4, Ms, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
    ᐃΔ[5][rs.ⵠⵠⵠ] = fa(nb(3, yu(a * 0.4, true, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
    ᐃΔ[6] = [];
    ᐃΔ[6][rs.ⲆᐃΔ] = fa(nb(rb, Bu(a * 0.4, rn, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
    ᐃΔ[6][rs.ⵠⵠⵠ] = fa(nb(Lq, Bu(a * 0.4, w, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
    ᐃΔ[30] = [];
    ᐃΔ[30][rs.ⲆᐃΔ] = fa(nb(3, Du(a * 0.4, Pq, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
    ᐃΔ[30][rs.ⵠⵠⵠ] = fa(nb(3, Du(a * 0.4, true, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
    ᐃΔ[285] = [];
    ᐃΔ[285][rs.ⲆᐃΔ] = [];
    ᐃΔ[285][rs.ⵠⵠⵠ] = [];
    ᐃΔ[285][rs.ⲆᐃΔ].push(fa(Pu(a * 0.9, 0, ["#0d4f35"], 0)));
    ᐃΔ[285][rs.ⲆᐃΔ].push(fa(Pu(a * 0.9, 0, ["#0d4f35"], sl)));
    ᐃΔ[285][rs.ⲆᐃΔ].push(fa(Pu(a * 0.9, 0, ["#0d4f35"], On)));
    ᐃΔ[285][rs.ⵠⵠⵠ].push(fa(Pu(a * 0.9, 0, ["#053339"], yj)));
    ᐃΔ[285][rs.ⵠⵠⵠ].push(fa(Pu(a * 0.9, 0, ["#053339"], 1)));
    ᐃΔ[285][rs.ⵠⵠⵠ].push(fa(Pu(a * 0.9, 0, ["#053339"], 2)));
    ᐃΔ[285][rs.ⲆᐃΔ].push(fa(Nu(a * 0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
    ᐃΔ[285][rs.ⲆᐃΔ].push(fa(Nu(a * 0.8, ["#292002", "#ba930e", "#6d5704"])));
    ᐃΔ[285][rs.ⵠⵠⵠ].push(fa(Nu(a * 0.9, ["#052919", "#0a4738", "#06321f"])));
    ᐃΔ[285][rs.ⵠⵠⵠ].push(fa(Nu(a * 0.8, ["#052918", "#08491c", "#063417"])));
    ᐃΔ[183] = [];
    ᐃΔ[183][rs.ⲆᐃΔ] = fa(nb(Math.PI / ta, Zd(a * 0.25, Kh, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
    ᐃΔ[183][rs.ⵠⵠⵠ] = fa(nb(Math.PI / On, Zd(a * 0.25, true, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
    ᐃΔ[803] = [];
    ᐃΔ[803].push(fa(ec(a * 0.25, ["#44301b", "#57442a", "#523e26"], 0)));
    ᐃΔ[803].push(fa(ec(a * 0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], Gt)));
    ᐃΔ[803].push(fa(ec(a * 0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
    ᐃΔ[802] = [];
    ᐃΔ[802][rs.ⲆᐃΔ] = [];
    ᐃΔ[802][rs.ⵠⵠⵠ] = [];
    ᐃΔ[802][rs.ⲆᐃΔ].push(fa(nb(Math.PI / fh, Kd(a * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], wh))));
    ᐃΔ[802][rs.ⵠⵠⵠ].push(fa(nb(Math.PI / zd, Kd(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], Ls))));
    ᐃΔ[802][rs.ⲆᐃΔ].push(fa(nb(Math.PI / Ol, Kd(a * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], jb))));
    ᐃΔ[802][rs.ⵠⵠⵠ].push(fa(nb(Math.PI / 2, Kd(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], il))));
    ᐃΔ[802][rs.ⲆᐃΔ].push(fa(nb(Math.PI / 2, Kd(a * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
    ᐃΔ[802][rs.ⵠⵠⵠ].push(fa(nb(Math.PI / br, Kd(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], Cs))));
    ᐃΔ[802][rs.ⲆᐃΔ].push(fa(nb(Math.PI / bq, Kd(a * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
    ᐃΔ[802][rs.ⵠⵠⵠ].push(fa(nb(Math.PI / 2, Kd(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], ge))));
    ᐃΔ[110] = [];
    ᐃΔ[110][rs.ⲆᐃΔ] = [fa(Hu(a * 1.2, true, ["#352b10", "#80500b", "#7c4908"]))];
    ᐃΔ[110][rs.ⵠⵠⵠ] = [fa(Hu(a * 1.2, true, ["#030d14", "#0a3429", "#0a2f2b"]))];
    ᐃΔ[623] = [];
    ᐃΔ[623][rs.ⲆᐃΔ] = fa(Hu(a * 0.8, true, ["#0e3022", "#68622D", "#665329"]));
    ᐃΔ[623][rs.ⵠⵠⵠ] = fa(Hu(a * 0.8, bh, ["#030d14", "#0F3A24", "#083326"]));
    ᐃΔ[189] = [];
    ᐃΔ[189][rs.ⲆᐃΔ] = fa(Xc(a * 0.5, bh, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
    ᐃΔ[189][rs.ⵠⵠⵠ] = fa(Xc(a * 0.5, mt, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
    ᐃΔ[192] = [];
    ᐃΔ[192][rs.ⲆᐃΔ] = fa(fb(a * 0.5, true, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
    ᐃΔ[192][rs.ⵠⵠⵠ] = fa(fb(a * 0.5, xg, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
    ᐃΔ[194] = [];
    ᐃΔ[194][rs.ⲆᐃΔ] = fa(rm(a * 0.5, true, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
    ᐃΔ[194][rs.ⵠⵠⵠ] = fa(rm(a * 0.5, Va, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
    ᐃΔ[287] = [];
    ᐃΔ[287][rs.ⲆᐃΔ] = fa(Hu(a * 0.8, Pq, ["#1b170c", "#0b8052", "#077b49"]));
    ᐃΔ[287][rs.ⵠⵠⵠ] = fa(Hu(a * 0.8, true, ["#030d14", "#084442", "#0a4049"]));
    ᐃΔ[813] = [];
    ᐃΔ[813][rs.ⲆᐃΔ] = fa(Xc(a * 0.5, kl, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
    ᐃΔ[813][rs.ⵠⵠⵠ] = fa(Xc(a * 0.5, Ms, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
    ᐃΔ[839] = [];
    ᐃΔ[839][rs.ⲆᐃΔ] = fa(fb(a * 0.5, true, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
    ᐃΔ[839][rs.ⵠⵠⵠ] = fa(fb(a * 0.5, nh, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
    ᐃΔ[869] = [];
    ᐃΔ[869][rs.ⲆᐃΔ] = fa(rm(a * 0.5, gk, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
    ᐃΔ[869][rs.ⵠⵠⵠ] = fa(rm(a * 0.5, true, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
    ᐃΔ[854] = [];
    ᐃΔ[854][rs.ⲆᐃΔ] = fa(lm(a * 0.45, gk, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
    ᐃΔ[854][rs.ⵠⵠⵠ] = fa(lm(a * 0.45, Kh, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
    ᐃΔ[859] = fa(lm(a * 0.65, true, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
    ᐃΔ[294] = [];
    ᐃΔ[294][rs.ⲆᐃΔ] = fa(Iu(a * 1.4, 0, ["#3d2a6e", "#8255b5"]));
    ᐃΔ[294][rs.ⵠⵠⵠ] = fa(Iu(a * 1.4, 0, ["#26124f", "#524082"]));
    ᐃΔ[288] = [];
    ᐃΔ[288][rs.ⲆᐃΔ] = fa(Xb(a * 0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
    ᐃΔ[288][rs.ⵠⵠⵠ] = fa(Xb(a * 0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
    ᐃΔ[118] = [];
    ᐃΔ[118][rs.ⲆᐃΔ] = fa(Ub(a * 0.9, 0, ["#4d2d14", "#432516"]));
    ᐃΔ[118][rs.ⵠⵠⵠ] = fa(Ub(a * 0.9, 0, ["#282404", "#0a0a01"]));
    ᐃΔ[113] = [];
    ᐃΔ[113][rs.ⲆᐃΔ] = fa(Zb(a * 0.9, 0, ["#4d2d14", "#432516"]));
    ᐃΔ[113][rs.ⵠⵠⵠ] = fa(Zb(a * 0.9, 0, ["#282404", "#0a0a01"]));
    ᐃΔ[289] = [];
    ᐃΔ[289][rs.ⲆᐃΔ] = fa(Yt(a * 0.9, 0, ["#efd435"]));
    ᐃΔ[289][rs.ⵠⵠⵠ] = fa(Yt(a * 0.9, 0, ["#fffabb"]));
    ᐃΔ[282] = [];
    ᐃΔ[282][rs.ⲆᐃΔ] = fa(Wt(a * 0.9, 0, ["#efd435"]));
    ᐃΔ[282][rs.ⵠⵠⵠ] = fa(Wt(a * 0.9, 0, ["#fffabb"]));
    ᐃΔ[816] = [];
    ᐃΔ[816][rs.ⲆᐃΔ] = fa(Yt(a * 0.9, 0, ["#efd435"]));
    ᐃΔ[816][rs.ⵠⵠⵠ] = fa(Yt(a * 0.9, 0, ["rgba(255, 84, 0, 1)"]));
    ᐃΔ[817] = [];
    ᐃΔ[817][rs.ⲆᐃΔ] = fa(Wt(a * 0.9, 0, ["#efd435"]));
    ᐃΔ[817][rs.ⵠⵠⵠ] = fa(Wt(a * 0.9, 0, ["#ff5704"]));
    ᐃΔ[324] = fa(Pb(a, "#ffffff"));
    ᐃΔ[301] = fa(Pb(a * 1.5, "#ffffff"));
    ᐃΔ[306] = fa(Au(a, "Your score:", a * 15, "#FFF"));
    ᐃΔ[655] = fa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 243;
      c.height = a * 172;
      Vt(d, a * 119.5, a * 140.125, a * eg);
      St(d, Oq, b[wh], a * Zg);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 36.5, a * 20.125);
      d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
      d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
      d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
      d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
      d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
      d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
      d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
      d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
      d.closePath();
      St(d, b[An], b[_h], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 15.5, a * 138.625);
      d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
      d.closePath();
      St(d, undefined, b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 13.5, a * 131.625);
      d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
      d.closePath();
      St(d, lh, b[iu], a * 10);
      Vt(d, a * 119.5, a * 140.125, a * 14.866068747318506);
      St(d, b[4], b[ie], cq * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 106.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
      d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
      d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
      d.closePath();
      St(d, b[6], b[wt], a * Ht);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
      St(d, Yo, b[8], a * ie);
      d.save();
      d.translate(a * 75.5, a * 80.125);
      Tt(d, a * -39, a * -40, a * 78, a * 78, a * 10);
      d.restore();
      St(d, b[gn]);
      d.save();
      d.translate(a * 167, a * 80.125);
      Tt(d, a * -38.5, a * -39, a * 78, a * 78, a * 10);
      d.restore();
      St(d, b[ol]);
      return c;
    }(a * 0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
    ᐃΔ[656] = Δᐃ.ⲆⵠΔⲆΔⲆⵠ;
    ᐃΔ[135] = [];
    ᐃΔ[135][rs.ⲆᐃΔ] = fa(Rb(a * 1.5, je, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ᐃΔ[135][rs.ⵠⵠⵠ] = fa(Rb(a * 1.5, nh, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ᐃΔ[641] = [];
    ᐃΔ[641][rs.ⲆᐃΔ] = fa(Nb(a * nd, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ᐃΔ[641][rs.ⵠⵠⵠ] = fa(Nb(a * On, kl, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ᐃΔ[642] = [];
    ᐃΔ[642][rs.ⲆᐃΔ] = fa(Wb(a * 1.5, nh, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ᐃΔ[642][rs.ⵠⵠⵠ] = fa(Wb(a * 1.5, Kh, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ᐃΔ[134] = [];
    ᐃΔ[134][rs.ⲆᐃΔ] = fa(Mb(a * 2.2, 0, ["#A89F67", "#9E8456"]));
    ᐃΔ[134][rs.ⵠⵠⵠ] = fa(Mb(a * 2.2, 0, ["#0B4049", "#08383D"]));
    ᐃΔ[638] = [];
    ᐃΔ[638][rs.ⲆᐃΔ] = fa(Mb(a * 2.2, 0, ["#68622D", "#665329"]));
    ᐃΔ[638][rs.ⵠⵠⵠ] = fa(Mb(a * 2.2, 0, ["#0F3A24", "#083326"]));
    ᐃΔ[321] = [];
    ᐃΔ[321][rs.ⲆᐃΔ] = fa(Fu(a * 0.8, 0, ["#A89F67", "#9E8456"]));
    ᐃΔ[321][rs.ⵠⵠⵠ] = fa(Fu(a * 0.8, 0, ["#15514F", "#0F3F3D"]));
    ᐃΔ[811] = [];
    ᐃΔ[811][rs.ⲆᐃΔ] = fa(Fu(a * 0.8, 0, ["#c67933", "#b17238"]));
    ᐃΔ[811][rs.ⵠⵠⵠ] = fa(Fu(a * 0.8, 0, ["#043c37", "#032b23"]));
    ᐃΔ[984] = [];
    ᐃΔ[984][rs.ⲆᐃΔ] = fa(Fu(a * 0.8, 0, ["#3a8214", "#4a9c1e"]));
    ᐃΔ[984][rs.ⵠⵠⵠ] = fa(Fu(a * 0.8, 0, ["#032d29", "#044640"]));
    ᐃΔ[837] = [];
    ᐃΔ[837][rs.ⲆᐃΔ] = fa(Fu(a * 0.8, 0, ["#e8e8e8", "#bbbbbb"]));
    ᐃΔ[837][rs.ⵠⵠⵠ] = fa(Fu(a * 0.8, 0, ["#1c6161", "#07413f"]));
    ᐃΔ[848] = [];
    ᐃΔ[848][rs.ⲆᐃΔ] = fa(Fu(a * 0.8, 0, ["#328a56", "#449573"]));
    ᐃΔ[848][rs.ⵠⵠⵠ] = fa(Fu(a * 0.8, 0, ["#043c37", "#032b23"]));
    ᐃΔ[952] = [];
    ᐃΔ[952][rs.ⲆᐃΔ] = fa(Fu(a * 0.8, 0, ["#c98e2f", "#a36b11"]));
    ᐃΔ[952][rs.ⵠⵠⵠ] = fa(Fu(a * 0.8, 0, ["#043c37", "#032b23"]));
    ᐃΔ[962] = [];
    ᐃΔ[962][rs.ⲆᐃΔ] = fa(Fu(a * 0.8, 0, ["#b22419", "#99110e"]));
    ᐃΔ[962][rs.ⵠⵠⵠ] = fa(Fu(a * 0.8, 0, ["#04323c", "#03222b"]));
    ᐃΔ[969] = [];
    ᐃΔ[969][rs.ⲆᐃΔ] = fa(Fu(a * 0.8, 0, ["#13a56d", "#098a58"]));
    ᐃΔ[969][rs.ⵠⵠⵠ] = fa(Fu(a * 0.8, 0, ["#043c37", "#032b23"]));
    ᐃΔ[657] = Gb(Ek, [{
      f: Mb,
      x: et,
      y: xq,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ᐃΔ[723] = Gb(1, [{
      f: Zb,
      x: 0,
      y: sb,
      a: 1,
      r: -Math.PI / 5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ᐃΔ[724] = Gb(1, [{
      f: om,
      x: fg,
      y: -Pg,
      a: 1,
      r: 0,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ᐃΔ[334] = Gb(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[115] = [];
    ᐃΔ[115][rs.ⲆᐃΔ] = fa(Tb(a * 0.9, 0, ["#7d613e", "#9e7e5a"]));
    ᐃΔ[115][rs.ⵠⵠⵠ] = fa(Tb(a * 0.9, 0, ["#084442", "#125e5a"]));
    ᐃΔ[132] = [];
    ᐃΔ[132][rs.ⲆᐃΔ] = fa(Tb(a * 0.9, 0, ["#9E8456", "#A89F67"]));
    ᐃΔ[132][rs.ⵠⵠⵠ] = fa(Tb(a * 0.9, 0, ["#1b6f6a", "#0d4e4c"]));
    ᐃΔ[668] = [];
    ᐃΔ[668][rs.ⲆᐃΔ] = fa(Tb(a * 0.9, 0, ["#665329", "#68622D"]));
    ᐃΔ[668][rs.ⵠⵠⵠ] = fa(Tb(a * 0.9, 0, ["#083326", "#0F3A24"]));
    ᐃΔ[188] = [];
    ᐃΔ[188][rs.ⲆᐃΔ] = fa(Tb(a * 0.9, 0, ["#c67933", "#ec952d"]));
    ᐃΔ[188][rs.ⵠⵠⵠ] = fa(Tb(a * 0.9, 0, ["#0e6553", "#094437"]));
    ᐃΔ[210] = [];
    ᐃΔ[210][rs.ⲆᐃΔ] = fa(Tb(a * 0.9, 0, ["#375809", "#4b770e"]));
    ᐃΔ[210][rs.ⵠⵠⵠ] = fa(Tb(a * 0.9, 0, ["#09542d", "#0d5d2f"]));
    ᐃΔ[985] = [];
    ᐃΔ[985][rs.ⲆᐃΔ] = fa(Tb(a * 0.9, 0, ["#585809", "#72770e"]));
    ᐃΔ[985][rs.ⵠⵠⵠ] = fa(Tb(a * 0.9, 0, ["#295209", "#305d0d"]));
    ᐃΔ[191] = [];
    ᐃΔ[191][rs.ⲆᐃΔ] = fa(Tb(a * 0.9, 0, ["#b9b094", "#e2d2c0"]));
    ᐃΔ[191][rs.ⵠⵠⵠ] = fa(Tb(a * 0.9, 0, ["#126366", "#0d484b"]));
    ᐃΔ[193] = [];
    ᐃΔ[193][rs.ⲆᐃΔ] = fa(Tb(a * 0.9, 0, ["#3f8662", "#30915d"]));
    ᐃΔ[193][rs.ⵠⵠⵠ] = fa(Tb(a * 0.9, 0, ["#0e6553", "#094437"]));
    ᐃΔ[812] = [];
    ᐃΔ[812][rs.ⲆᐃΔ] = fa(Tb(a * 0.9, 0, ["#c79153", "#dfa868"]));
    ᐃΔ[812][rs.ⵠⵠⵠ] = fa(Tb(a * 0.9, 0, ["#073927", "#075040"]));
    ᐃΔ[838] = [];
    ᐃΔ[838][rs.ⲆᐃΔ] = fa(Tb(a * 0.9, 0, ["#768b5b", "#819984"]));
    ᐃΔ[838][rs.ⵠⵠⵠ] = fa(Tb(a * 0.9, 0, ["#0c4540", "#0e5153"]));
    ᐃΔ[849] = [];
    ᐃΔ[849][rs.ⲆᐃΔ] = fa(Tb(a * 0.9, 0, ["#567465", "#627c6e"]));
    ᐃΔ[849][rs.ⵠⵠⵠ] = fa(Tb(a * 0.9, 0, ["#073927", "#075040"]));
    ᐃΔ[204] = [];
    ᐃΔ[204][rs.ⲆᐃΔ] = fa(Tb(a * 0.9, 0, ["#996b3a", "#bf956b"]));
    ᐃΔ[204][rs.ⵠⵠⵠ] = fa(Tb(a * 0.9, 0, ["#0e6553", "#094437"]));
    ᐃΔ[953] = [];
    ᐃΔ[953][rs.ⲆᐃΔ] = fa(Tb(a * 0.9, 0, ["#7a634a", "#a68f77"]));
    ᐃΔ[953][rs.ⵠⵠⵠ] = fa(Tb(a * 0.9, 0, ["#1e4d43", "#113c32"]));
    ᐃΔ[206] = [];
    ᐃΔ[206][rs.ⲆᐃΔ] = fa(Tb(a * 0.9, 0, ["#99403c", "#bc796c"]));
    ᐃΔ[206][rs.ⵠⵠⵠ] = fa(Tb(a * 0.9, 0, ["#1e434d", "#11303c"]));
    ᐃΔ[963] = [];
    ᐃΔ[963][rs.ⲆᐃΔ] = fa(Tb(a * 0.9, 0, ["#88504e", "#b3857c"]));
    ᐃΔ[963][rs.ⵠⵠⵠ] = fa(Tb(a * 0.9, 0, ["#253b41", "#162930"]));
    ᐃΔ[208] = [];
    ᐃΔ[208][rs.ⲆᐃΔ] = fa(Tb(a * 0.9, 0, ["#0f8870", "#23af93"]));
    ᐃΔ[208][rs.ⵠⵠⵠ] = fa(Tb(a * 0.9, 0, ["#032829", "#083233"]));
    ᐃΔ[970] = [];
    ᐃΔ[970][rs.ⲆᐃΔ] = fa(Tb(a * 0.9, 0, ["#618a20", "#84a74e"]));
    ᐃΔ[970][rs.ⵠⵠⵠ] = fa(Tb(a * 0.9, 0, ["#1f4632", "#335d47"]));
    ᐃΔ[114] = [];
    ᐃΔ[114][rs.ⲆᐃΔ] = fa(Ab(a * 1.2, true, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
    ᐃΔ[114][rs.ⵠⵠⵠ] = fa(Ab(a * 1.2, true, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
    ᐃΔ[162] = [];
    ᐃΔ[162][rs.ⲆᐃΔ] = fa(id(Ls * a, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ᐃΔ[162][rs.ⵠⵠⵠ] = fa(id(Gt * a, mt, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ᐃΔ[165] = [];
    ᐃΔ[165][rs.ⲆᐃΔ] = fa(Yu(Ga * a, yo, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ᐃΔ[165][rs.ⵠⵠⵠ] = fa(Yu(a * 1, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ᐃΔ[122] = [];
    ᐃΔ[122][rs.ⲆᐃΔ] = fa(rd(a * sl, xg, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ᐃΔ[122][rs.ⵠⵠⵠ] = fa(rd(ig * a, je, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ᐃΔ[163] = [];
    ᐃΔ[163][rs.ⲆᐃΔ] = fa(rd(Ga * a, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ᐃΔ[163][rs.ⵠⵠⵠ] = fa(rd(ig * a, gk, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ᐃΔ[164] = [];
    ᐃΔ[164][rs.ⲆᐃΔ] = fa(ad(a * 1, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ᐃΔ[164][rs.ⵠⵠⵠ] = fa(ad(a * Co, mt, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ᐃΔ[160] = [];
    ᐃΔ[160][rs.ⲆᐃΔ] = fa(_d(a * 0.8, true, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ᐃΔ[160][rs.ⵠⵠⵠ] = fa(_d(a * 0.8, true, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ᐃΔ[169] = [];
    ᐃΔ[169][rs.ⲆᐃΔ] = fa(Qd(a * 0.8, Va, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ᐃΔ[169][rs.ⵠⵠⵠ] = fa(Qd(a * 0.8, true, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ᐃΔ[170] = [];
    ᐃΔ[170][rs.ⲆᐃΔ] = fa(Gd(a * 0.8, nh, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ᐃΔ[170][rs.ⵠⵠⵠ] = fa(Gd(a * 0.8, true, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ᐃΔ[168] = [];
    ᐃΔ[168][rs.ⲆᐃΔ] = fa(Wd(a * 0.8, kl, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ᐃΔ[168][rs.ⵠⵠⵠ] = fa(Wd(a * 0.8, je, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ᐃΔ[123] = [];
    ᐃΔ[123][rs.ⲆᐃΔ] = fa(Wd(a * 0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ᐃΔ[123][rs.ⵠⵠⵠ] = fa(Wd(a * 0.8, true, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ᐃΔ[166] = [];
    ᐃΔ[166][rs.ⲆᐃΔ] = fa(od(a * 1.5, true, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
    ᐃΔ[166][rs.ⵠⵠⵠ] = fa(od(a * 1.5, Yn, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ᐃΔ[336] = [];
    ᐃΔ[336][rs.ⲆᐃΔ] = fa(od(a * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃΔ[336][rs.ⵠⵠⵠ] = fa(od(a * wh, ia, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
    ᐃΔ[171] = [];
    ᐃΔ[171][rs.ⲆᐃΔ] = fa(ud(a * 1.5, rg, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
    ᐃΔ[171][rs.ⵠⵠⵠ] = fa(ud(a * 1.5, Va, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
    ᐃΔ[373] = [];
    ᐃΔ[373][rs.ⲆᐃΔ] = fa(ud(Ek * a, Jn, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃΔ[373][rs.ⵠⵠⵠ] = fa(ud(_ * a, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ᐃΔ[124] = [];
    ᐃΔ[124][rs.ⲆᐃΔ] = fa(ud(a * 1.5, Ms, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ᐃΔ[124][rs.ⵠⵠⵠ] = fa(ud(a * 1.5, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ᐃΔ[500] = [];
    ᐃΔ[500][rs.ⲆᐃΔ] = fa(ud(a * wh, Wh, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃΔ[500][rs.ⵠⵠⵠ] = fa(ud(Fb * a, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ᐃΔ[172] = [];
    ᐃΔ[172][rs.ⲆᐃΔ] = fa(gd(a * 1.5, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
    ᐃΔ[172][rs.ⵠⵠⵠ] = fa(gd(a * 1.5, mt, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
    ᐃΔ[376] = [];
    ᐃΔ[376][rs.ⲆᐃΔ] = fa(gd(a * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃΔ[376][rs.ⵠⵠⵠ] = fa(gd(a * 1, Tg, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ᐃΔ[173] = [];
    ᐃΔ[173][rs.ⲆᐃΔ] = fa(Td(a * 1.5, w, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ᐃΔ[173][rs.ⵠⵠⵠ] = fa(Td(a * 1.5, mt, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ᐃΔ[379] = [];
    ᐃΔ[379][rs.ⲆᐃΔ] = fa(Td(a * 1, Lk, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃΔ[379][rs.ⵠⵠⵠ] = fa(Td(Gt * a, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ᐃΔ[167] = [];
    ᐃΔ[167][rs.ⲆᐃΔ] = fa(Sd(a * 0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
    ᐃΔ[167][rs.ⵠⵠⵠ] = fa(Sd(a * 0.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
    ᐃΔ[691] = [];
    ᐃΔ[691][rs.ⲆᐃΔ] = fa(mm(a * 0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
    ᐃΔ[691][rs.ⵠⵠⵠ] = fa(mm(a * 0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
    ᐃΔ[264] = [];
    ᐃΔ[264][rs.ⲆᐃΔ] = fa(kb(a * 0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
    ᐃΔ[264][rs.ⵠⵠⵠ] = fa(kb(a * 0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
    ᐃΔ[260] = [];
    ᐃΔ[260][rs.ⲆᐃΔ] = fa(nb(Math.PI, Eb(a * 0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
    ᐃΔ[260][rs.ⵠⵠⵠ] = fa(nb(Math.PI, Eb(a * 0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
    ᐃΔ[266] = fa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 450;
      c.height = a * 470;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 226.5, a * 91.546875);
      d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
      d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
      d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
      d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
      d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
      d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
      d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
      d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
      d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
      d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
      d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
      d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
      d.closePath();
      St(d, Ct, b[sb], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 129.546875);
      d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
      d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
      d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
      d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
      d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
      d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
      d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
      d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
      d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
      d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
      d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
      d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
      d.closePath();
      St(d, undefined, b[gl], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 160.546875);
      d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
      d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
      d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
      d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
      d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
      d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
      d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
      d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
      d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
      d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
      d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
      d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
      d.closePath();
      St(d, undefined, b[Rl], oe);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 205.5, a * 194.546875);
      d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
      d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
      d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
      d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
      d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
      d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
      d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
      d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
      d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
      d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
      d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
      d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
      d.closePath();
      St(d, undefined, b[Fj], Qt);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149.5, a * 93.546875);
      d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
      d.closePath();
      St(d, Ao, b[0], Jl);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 66.546875);
      d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
      d.closePath();
      St(d, undefined, b[0], aq);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 302.5, a * 88.546875);
      d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
      d.closePath();
      St(d, ri, b[0], yn);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 361.5, a * 147.546875);
      d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
      d.closePath();
      St(d, Ct, b[et], ge);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 379.5, a * 225.546875);
      d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
      d.closePath();
      St(d, Yo, b[0], aq);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 90.5, a * 147.546875);
      d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
      d.closePath();
      St(d, undefined, b[gl], oe);
      return c;
    }(a * 0.6, ["#FFFFFF"]));
    ᐃΔ[299] = [];
    ᐃΔ[299][rs.ⲆᐃΔ] = fa(Db(a * 1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
    ᐃΔ[299][rs.ⵠⵠⵠ] = fa(Db(a * 1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
    ᐃΔ[10] = [];
    ᐃΔ[10][rs.ⲆᐃΔ] = fa(Id(a * 0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
    ᐃΔ[10][rs.ⵠⵠⵠ] = fa(Id(a * 0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
    ᐃΔ[11] = [];
    ᐃΔ[11][rs.ⲆᐃΔ] = fa(Cd(a * 0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
    ᐃΔ[11][rs.ⵠⵠⵠ] = fa(Cd(a * 0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
    ᐃΔ[40] = [];
    ᐃΔ[40][rs.ⲆᐃΔ] = fa(Ed(a * 0.63, true, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
    ᐃΔ[40][rs.ⵠⵠⵠ] = fa(Ed(a * 0.63, Va, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
    ᐃΔ[41] = [];
    ᐃΔ[41][rs.ⲆᐃΔ] = fa(Xt(a * 0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
    ᐃΔ[41][rs.ⵠⵠⵠ] = fa(Xt(a * 0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
    ᐃΔ[42] = [];
    ᐃΔ[42][rs.ⲆᐃΔ] = fa($b(a * 0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
    ᐃΔ[42][rs.ⵠⵠⵠ] = fa($b(a * 0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
    ᐃΔ[716] = [];
    ᐃΔ[716][rs.ⲆᐃΔ] = fa(um(a * 0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
    ᐃΔ[716][rs.ⵠⵠⵠ] = fa(um(a * 0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
    ᐃΔ[720] = [];
    ᐃΔ[720][rs.ⲆᐃΔ] = fa(Oc(a * 0.9, ["#e4c027"]));
    ᐃΔ[720][rs.ⵠⵠⵠ] = fa(Oc(a * 0.9, ["#D8E57F"]));
    ᐃΔ[144] = [];
    ᐃΔ[144][rs.ⲆᐃΔ] = fa(tm(a * 0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
    ᐃΔ[144][rs.ⵠⵠⵠ] = fa(tm(a * 0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
    ᐃΔ[722] = fa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 149;
      c.height = a * 356;
      d.save();
      d.translate(a * 74.5, a * 177.5);
      Tt(d, a * -57.5, a * -161.5, a * 100, a * 323, a * bg);
      d.restore();
      St(d, b[Gg], b[_h], mg * a);
      d.save();
      d.translate(a * 74.5, a * 177.5);
      Tt(d, a * -57.5, a * 50.5, Re * a, a * 105, eb * a);
      d.restore();
      St(d, b[6], b[1], a * $j);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * sg, a * 125);
      d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
      d.closePath();
      St(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 120);
      d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
      d.closePath();
      St(d, b[Er], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 228);
      d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
      d.closePath();
      St(d, b[Ol], b[fh], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 224);
      d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
      d.closePath();
      St(d, b[3], b[Z], a * 10);
      d.save();
      d.translate(a * 72, a * 68.5);
      Tt(d, a * -41.5, a * -36.5, a * 73, a * 73, a * 13);
      d.restore();
      St(d, b[4]);
      d.save();
      d.translate(a * 72, a * 175.5);
      Tt(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
      d.restore();
      St(d, b[cq]);
      d.save();
      d.translate(a * 72, a * 279.5);
      Tt(d, a * -41.5, a * -40.5, a * 73, a * 73, a * 13);
      d.restore();
      St(d, b[4]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 338);
      d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
      d.closePath();
      St(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(Yh * a, a * 333);
      d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
      d.closePath();
      St(d, b[nk], b[Hn], a * uj);
      return c;
    }(Ni * a, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
    ᐃΔ[407] = [];
    ᐃΔ[407][rs.ⲆᐃΔ] = fa(ld(a * 0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
    ᐃΔ[407][rs.ⵠⵠⵠ] = fa(ld(a * 0.5, kl, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
    ᐃΔ[119] = [];
    ᐃΔ[119][rs.ⲆᐃΔ] = fa(dd(a * 0.5, w, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
    ᐃΔ[119][rs.ⵠⵠⵠ] = fa(dd(a * 0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
    ᐃΔ[411] = fa(function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 118;
      d.height = a * 129;
      e.save();
      e.translate(a * 90, a * 90);
      Tt(e, a * -86.5, a * -86, a * 110, a * 110, a * ng);
      e.restore();
      St(e, c[fg], c[_h], 4);
      return d;
    }(a * 0.8, 0, ["#5f6061", "#939393"]));
    ᐃΔ[412] = Gb(1, [{
      f: Zb,
      x: 0,
      y: gl,
      a: Co,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], Fb);
    ᐃΔ[198] = [];
    ᐃΔ[198][rs.ⲆᐃΔ] = fa(vd(bs * a, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ᐃΔ[198][rs.ⵠⵠⵠ] = fa(vd(a * Gt, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ᐃΔ[913] = [];
    ᐃΔ[913][rs.ⲆᐃΔ] = fa(pd(a * 1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ᐃΔ[913][rs.ⵠⵠⵠ] = fa(pd(ig * a, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ᐃΔ[18] = [];
    ᐃΔ[18][rs.ⲆᐃΔ] = fa(nb(wi, Pd(a * 0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
    ᐃΔ[18][rs.ⵠⵠⵠ] = fa(nb(Ft, Pd(a * 0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
    ᐃΔ[12] = [];
    ᐃΔ[12][rs.ⲆᐃΔ] = fa(nb(Z, wd(a * 0.7, gk, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
    ᐃΔ[12][rs.ⵠⵠⵠ] = fa(nb(3, wd(a * 0.7, nh, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
    ᐃΔ[13] = [];
    ᐃΔ[13][rs.ⲆᐃΔ] = fa(nb(3, Ad(a * 0.65, kl, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
    ᐃΔ[13][rs.ⵠⵠⵠ] = fa(nb(iu, Ad(a * 0.65, rn, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
    ᐃΔ[14] = [];
    ᐃΔ[14][rs.ⲆᐃΔ] = fa(nb(3, xd(a * 0.67, true, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
    ᐃΔ[14][rs.ⵠⵠⵠ] = fa(nb(3, xd(a * 0.67, Yn, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
    ᐃΔ[15] = [];
    ᐃΔ[15][rs.ⲆᐃΔ] = fa(nb(Rn, yd(a * 0.67, xg, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
    ᐃΔ[15][rs.ⵠⵠⵠ] = fa(nb(Z, yd(a * 0.67, nh, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
    ᐃΔ[33] = [];
    ᐃΔ[33][rs.ⲆᐃΔ] = fa(nb(3, kd(a * 0.67, true, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
    ᐃΔ[33][rs.ⵠⵠⵠ] = fa(nb(3, kd(a * 0.67, oh, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
    ᐃΔ[16] = [];
    ᐃΔ[16][rs.ⲆᐃΔ] = fa(nb(3, Bd(sl * a, true, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
    ᐃΔ[16][rs.ⵠⵠⵠ] = fa(nb(3, Bd(Ni * a, Rq, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
    ᐃΔ[35] = [];
    ᐃΔ[35][rs.ⲆᐃΔ] = fa(nb(Ft, Ld(er * a, xa, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ᐃΔ[35][rs.ⵠⵠⵠ] = fa(nb(3, Ld(_h * a, true, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
    ᐃΔ[55] = [];
    ᐃΔ[55][rs.ⲆᐃΔ] = fa(nb(iu, im(a * 0.5, true, ["#0d1b1c", "#939393", "#5f6061"])));
    ᐃΔ[55][rs.ⵠⵠⵠ] = fa(nb(Qn, im(a * 0.5, je, ["#030d14", "#485e66", "#1f343f"])));
    ᐃΔ[45] = [];
    ᐃΔ[45][rs.ⲆᐃΔ] = fa(nb(Mh, Jc(a * 1, true, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
    ᐃΔ[45][rs.ⵠⵠⵠ] = fa(nb(wi, Jc(a * sc, Ul, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
    ᐃΔ[36] = [];
    ᐃΔ[36][rs.ⲆᐃΔ] = fa(nb(3, Ld(a * 1, kl, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ᐃΔ[36][rs.ⵠⵠⵠ] = fa(nb(Xu, Ld(a * 1, bh, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
    ᐃΔ[37] = [];
    ᐃΔ[37][rs.ⲆᐃΔ] = fa(nb(Hn, Ld(Ni * a, yo, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ᐃΔ[37][rs.ⵠⵠⵠ] = fa(nb(iu, Ld(a * 1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ᐃΔ[38] = [];
    ᐃΔ[38][rs.ⲆᐃΔ] = fa(nb(hd, Ld(a * 1, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ᐃΔ[38][rs.ⵠⵠⵠ] = fa(nb(Jd, Ld(a * 1, gk, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ᐃΔ[148] = [];
    ᐃΔ[148][rs.ⲆᐃΔ] = fa(yc(a * 0.55, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
    ᐃΔ[148][rs.ⵠⵠⵠ] = fa(yc(a * 0.55, 0, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
    ᐃΔ[536] = [];
    ᐃΔ[536].push(fa(yc(a * 0.8, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
    ᐃΔ[536].push(fa(yc(a * 0.8, 0, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
    ᐃΔ[536].push(fa(yc(a * 0.8, 0, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
    ᐃΔ[538] = [];
    ᐃΔ[538].push(ᐃΔ[536][et]);
    ᐃΔ[538].push(ᐃΔ[536][Gg]);
    ᐃΔ[538].push(ᐃΔ[536][et]);
    ᐃΔ[158] = [];
    ᐃΔ[158][rs.ⲆᐃΔ] = fa(cc(a * 0.06, false, ["#141414", "#c4a23a", "#816511"]));
    ᐃΔ[158][rs.ⵠⵠⵠ] = fa(cc(a * 0.06, hg, ["#030d14", "#2b6664", "#133d3c"]));
    ᐃΔ[535] = [];
    ᐃΔ[535].push(fa(cc(a * 0.08, false, ["#141414", "#c4a23a", "#816511"])));
    ᐃΔ[535].push(fa(cc(a * 0.08, false, ["#141414", "#e2bd4e", "#a38018"])));
    ᐃΔ[535].push(fa(cc(a * 0.08, false, ["#141414", "#b0902e", "#634d09"])));
    ᐃΔ[149] = Gb(1.5, [{
      f: xc,
      x: An,
      y: 0,
      a: wh,
      r: 0,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ᐃΔ[526] = [];
    ᐃΔ[526][rs.ⲆᐃΔ] = fa(zc(a * 0.8, 0, ["#347f93", "#54a4ba"]));
    ᐃΔ[526][rs.ⵠⵠⵠ] = fa(zc(a * 0.8, 0, ["#98ede3", "#94f2e7"]));
    ᐃΔ[527] = [];
    ᐃΔ[527][rs.ⲆᐃΔ] = fa(Sc(a * 0.8, 0, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
    ᐃΔ[527][rs.ⵠⵠⵠ] = fa(Sc(a * 0.8, 0, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
    ᐃΔ[528] = [];
    ᐃΔ[528][rs.ⲆᐃΔ] = fa(Bc(a * 0.8, 0, ["#a9e4ed", "#86d4e0"]));
    ᐃΔ[528][rs.ⵠⵠⵠ] = fa(Bc(a * 0.8, 0, ["#83ddd4", "#485e66"]));
    ᐃΔ[151] = [];
    ᐃΔ[151][rs.ⲆᐃΔ] = fa(dc(a * 0.8, true, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
    ᐃΔ[151][rs.ⵠⵠⵠ] = fa(dc(a * 0.8, true, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
    ᐃΔ[1192] = [];
    ᐃΔ[1192][rs.ⲆᐃΔ] = Δᐃ.ⵠΔⲆΔᐃᐃⵠ;
    ᐃΔ[1192][rs.ⵠⵠⵠ] = Δᐃ.ΔΔⲆⵠⵠᐃⲆ;
    ᐃΔ[1193] = [];
    ᐃΔ[1193][rs.ⲆᐃΔ] = Δᐃ.ᐃᐃᐃᐃⵠⵠⲆ;
    ᐃΔ[1193][rs.ⵠⵠⵠ] = Δᐃ.ᐃⵠⵠᐃⲆⵠᐃ;
    ᐃΔ[1194] = [];
    ᐃΔ[1194][rs.ⲆᐃΔ] = Δᐃ.ᐃΔⵠⲆΔⵠᐃ;
    ᐃΔ[1194][rs.ⵠⵠⵠ] = Δᐃ.ⲆⲆᐃΔⲆⲆⲆ;
    ᐃΔ[152] = [];
    ᐃΔ[152][rs.ⲆᐃΔ] = Δᐃ.ΔⲆⲆⵠᐃⲆΔ;
    ᐃΔ[152][rs.ⵠⵠⵠ] = Δᐃ.ΔᐃⲆⲆⲆΔⵠ;
    ᐃΔ[1198] = [];
    ᐃΔ[1198][rs.ⲆᐃΔ] = Δᐃ.ΔΔΔᐃⵠᐃᐃ;
    ᐃΔ[1198][rs.ⵠⵠⵠ] = Δᐃ.ΔᐃⵠⵠΔⵠΔ;
    ᐃΔ[153] = [];
    ᐃΔ[153][rs.ⲆᐃΔ] = Δᐃ.ⵠⵠᐃᐃⵠⵠⲆ;
    ᐃΔ[153][rs.ⵠⵠⵠ] = Δᐃ.ⲆⲆⵠⵠᐃⵠⵠ;
    ᐃΔ[1202] = [];
    ᐃΔ[1202][rs.ⲆᐃΔ] = Δᐃ.ᐃᐃΔΔΔᐃΔ;
    ᐃΔ[1202][rs.ⵠⵠⵠ] = Δᐃ.ΔⲆᐃΔⲆΔΔ;
    ᐃΔ[154] = [];
    ᐃΔ[154][rs.ⲆᐃΔ] = Δᐃ.ⵠⵠⲆⵠⲆᐃⵠ;
    ᐃΔ[154][rs.ⵠⵠⵠ] = Δᐃ.ⵠⲆᐃᐃΔⵠⲆ;
    ᐃΔ[1206] = [];
    ᐃΔ[1206][rs.ⲆᐃΔ] = Δᐃ.ⵠⵠⵠᐃⵠᐃⲆ;
    ᐃΔ[1206][rs.ⵠⵠⵠ] = Δᐃ.ᐃⵠⲆⵠⲆⲆⵠ;
    ᐃΔ[155] = [];
    ᐃΔ[155][rs.ⲆᐃΔ] = Δᐃ.ⵠⵠⵠΔⲆⵠⲆ;
    ᐃΔ[155][rs.ⵠⵠⵠ] = Δᐃ.ⵠΔⵠᐃⲆᐃⵠ;
    ᐃΔ[1210] = [];
    ᐃΔ[1210][rs.ⲆᐃΔ] = Δᐃ.ⵠⲆᐃᐃΔⵠΔ;
    ᐃΔ[1210][rs.ⵠⵠⵠ] = Δᐃ.ⲆΔᐃᐃΔⲆΔ;
    ᐃΔ[156] = [];
    ᐃΔ[156][rs.ⲆᐃΔ] = Δᐃ.ⲆᐃΔⵠⲆⲆⵠ;
    ᐃΔ[156][rs.ⵠⵠⵠ] = Δᐃ.ΔΔⲆᐃΔⲆᐃ;
    ᐃΔ[1214] = [];
    ᐃΔ[1214][rs.ⲆᐃΔ] = Δᐃ.ⲆΔᐃΔⵠᐃΔ;
    ᐃΔ[1214][rs.ⵠⵠⵠ] = Δᐃ.ᐃΔᐃᐃᐃⲆⲆ;
    ᐃΔ[157] = [];
    ᐃΔ[157][rs.ⲆᐃΔ] = Δᐃ.ⵠⲆᐃᐃᐃⵠᐃ;
    ᐃΔ[157][rs.ⵠⵠⵠ] = Δᐃ.ΔΔⵠⵠⵠᐃΔ;
    ᐃΔ[245] = [];
    ᐃΔ[245][rs.ⲆᐃΔ] = Δᐃ.ⵠᐃΔⵠΔΔⵠ;
    ᐃΔ[245][rs.ⵠⵠⵠ] = Δᐃ.ΔΔⵠᐃᐃΔⵠ;
    ᐃΔ[246] = Δᐃ.ᐃΔΔΔⲆⲆⵠ;
    ᐃΔ[159] = [];
    ᐃΔ[159][rs.ⲆᐃΔ] = fa(Pc(a * 0.75, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
    ᐃΔ[159][rs.ⵠⵠⵠ] = fa(Pc(a * 0.75, true, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
    ᐃΔ[558] = fa(Ec(a * 0.3, ["#092813", "#1f773d"], 0));
    ᐃΔ[559] = fa(Ec(a * 0.3, ["#092813", "#1f773d"], 1));
    ᐃΔ[885] = fa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 60;
      c.height = a * 60;
      d.translate(a * -25, a * -25);
      d.translate(0, a * rh);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      St(d, b[Md]);
      d.translate(0, -gs * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      St(d, b[Ek]);
      return c;
    }(a * 0.6, ["#092813", "#1f773d"]));
    ᐃΔ[556] = [];
    ᐃΔ[556].push(fa(pc(a * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
    ᐃΔ[556].push(fa(pc(a * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
    ᐃΔ[556].push(fa(pc(a * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
    ᐃΔ[560] = [];
    var c = fa(pc(a * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
    ᐃΔ[560].push(c);
    ᐃΔ[560].push(c);
    ᐃΔ[560].push(c);
    ᐃΔ[557] = [];
    ᐃΔ[557].push(fa(pc(a * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
    ᐃΔ[557].push(fa(pc(a * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
    ᐃΔ[557].push(fa(pc(a * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
    ᐃΔ[681] = fa(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 170;
      var g = b * 172;
      var i = f / qo;
      var a = g / 2;
      d.width = f;
      d.height = g;
      e.translate(i, a);
      e.save();
      for (var j = 0; Gh > j; j++) {
        e.rotate(Math.PI / Jb);
        e.save();
        e.translate(b * 65, 0);
        ob(e, nk, b * 18, zt * b);
        St(e, c[0]);
        e.restore();
      }
      e.restore();
      Vt(e, et, Ah, b * 40);
      St(e, Ao, c[An], b * oq);
      Vt(e, qu, 0, b * 20);
      St(e, c[0]);
      return d;
    }(a * 0.3, ["#FFFFFF"]));
    ᐃΔ[794] = fa(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 130;
      var g = b * 142;
      var h = f / 2;
      var a = g / X;
      d.width = f;
      d.height = g;
      Vt(e, h, a, b * 40);
      St(e, undefined, c[0], b * 7);
      Vt(e, h, a, b * 30);
      St(e, es, c[0], b * lg);
      Vt(e, h, a, b * fl);
      St(e, c[bu]);
      return d;
    }(a * 0.3, ["#FFFFFF"]));
    ᐃΔ[562] = fa(Ec(a * 0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
    ᐃΔ[667] = fa(nb(Math.PI / 5, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 316;
      c.height = a * 365;
      d.save();
      d.translate(a * 156.07142639160156, a * 51.81248474121094);
      d.rotate(0);
      Tt(d, a * -21.5, a * -34, a * 43, a * 68, a * 8);
      d.restore();
      St(d, b[0], b[0], _q * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
      d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
      d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
      d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
      d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
      d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
      d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
      d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
      d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
      d.closePath();
      St(d, b[tj], b[An], En * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
      d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
      d.closePath();
      St(d, b[Gk], b[0], a * 15);
      return c;
    }(a * 0.2, ["#FFFFFF"])));
    ᐃΔ[43] = [];
    ᐃΔ[43][rs.ⲆᐃΔ] = fa(Qc(a * 0.85, 0, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
    ᐃΔ[43][rs.ⵠⵠⵠ] = fa(Qc(a * 0.85, 0, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
    ᐃΔ[561] = [];
    ᐃΔ[561].push(fa(pc(a * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], _)));
    ᐃΔ[561].push(fa(pc(a * 0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], Ek)));
    ᐃΔ[561].push(fa(pc(a * 0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], Fb)));
    ᐃΔ[83] = [];
    ᐃΔ[83][rs.ⲆᐃΔ] = fa(dm(a * 0.37, nh, ["#2a2938", "#242330", "#313041"]));
    ᐃΔ[83][rs.ⵠⵠⵠ] = fa(dm(a * 0.37, Yn, ["#1b1e30", "#161921", "#252f3e"]));
    ᐃΔ[85] = [];
    ᐃΔ[85][rs.ⲆᐃΔ] = fa(pm(a * 0.17, nh, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
    ᐃΔ[85][rs.ⵠⵠⵠ] = fa(pm(a * 0.17, nh, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
    ᐃΔ[86] = [];
    ᐃΔ[86][rs.ⲆᐃΔ] = fa(Yc(a * 0.55, xa, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
    ᐃΔ[86][rs.ⵠⵠⵠ] = fa(Yc(a * 0.55, true, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
    ᐃΔ[84] = [];
    ᐃΔ[84][rs.ⲆᐃΔ] = fa(Yc(a * 0.55, nh, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
    ᐃΔ[84][rs.ⵠⵠⵠ] = fa(Yc(a * 0.55, true, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
    ᐃΔ[77] = [];
    ᐃΔ[77][rs.ⲆᐃΔ] = fa(Uc(a * 0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
    ᐃΔ[77][rs.ⵠⵠⵠ] = fa(Uc(a * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
    ᐃΔ[78] = [];
    ᐃΔ[78][rs.ⲆᐃΔ] = fa(Uc(a * 0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
    ᐃΔ[78][rs.ⵠⵠⵠ] = fa(Uc(a * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
    ᐃΔ[79] = [];
    ᐃΔ[79][rs.ⲆᐃΔ] = fa(Uc(a * 0.2, w, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
    ᐃΔ[79][rs.ⵠⵠⵠ] = fa(Uc(a * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
    ᐃΔ[61] = [];
    ᐃΔ[61][rs.ⲆᐃΔ] = fa(cd(a * 0.24, nh, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
    ᐃΔ[61][rs.ⵠⵠⵠ] = fa(cd(a * 0.24, mt, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
    ᐃΔ[59] = [];
    ᐃΔ[59][rs.ⲆᐃΔ] = fa(nc(a * 0.32, 0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
    ᐃΔ[59][rs.ⵠⵠⵠ] = fa(nc(a * 0.32, 0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
    ᐃΔ[62] = [];
    ᐃΔ[62][rs.ⲆᐃΔ] = fa(nb(3, kc(a * 0.9, rn, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
    ᐃΔ[62][rs.ⵠⵠⵠ] = fa(nb(3, kc(a * 0.9, je, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
    ᐃΔ[750] = [];
    ᐃΔ[750][rs.ⲆᐃΔ] = fa(nb(3, kc(_h * a, oh, [undefined, Pl, Ct, "#c8efef", "#c8efef"])));
    ᐃΔ[750][rs.ⵠⵠⵠ] = fa(nb(Mh, kc(Fb * a, true, [Oq, undefined, undefined, "#87d2e6", "#87d2e6"])));
    ᐃΔ[755] = [];
    ᐃΔ[755].push(fa(em(a * 0.3, Yn, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
    ᐃΔ[755].push(fa(em(a * 0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], Ls)));
    ᐃΔ[755].push(fa(em(a * 0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
    ᐃΔ[795] = [];
    ᐃΔ[795].push(fa(am(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
    ᐃΔ[795].push(fa(am(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ᐃΔ[795].push(fa(am(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], _h)));
    ᐃΔ[782] = [];
    ᐃΔ[782].push(fa($t(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, Kg)));
    ᐃΔ[782].push(fa($t(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
    ᐃΔ[782].push(fa($t(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
    ᐃΔ[783] = [];
    ᐃΔ[783].push(fa($t(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], Md, 0)));
    ᐃΔ[783].push(fa($t(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], ig, tj)));
    ᐃΔ[783].push(fa($t(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, Ah)));
    ᐃΔ[46] = [];
    ᐃΔ[46][rs.ⲆᐃΔ] = fa(nb(Ou, Gc(a * 0.7, true, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
    ᐃΔ[46][rs.ⵠⵠⵠ] = fa(nb(3, Gc(a * 0.7, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
    ᐃΔ[50] = [];
    ᐃΔ[50][rs.ⲆᐃΔ] = fa(nb(3, Gc(a * 0.7, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
    ᐃΔ[50][rs.ⵠⵠⵠ] = fa(nb(3, Gc(a * 0.7, rg, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
    ᐃΔ[51] = [];
    ᐃΔ[51][rs.ⲆᐃΔ] = fa(nb(Rn, Gc(a * 0.7, bh, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
    ᐃΔ[51][rs.ⵠⵠⵠ] = fa(nb(Rn, Gc(a * 0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
    ᐃΔ[52] = [];
    ᐃΔ[52][rs.ⲆᐃΔ] = fa(nb(3, Gc(a * 0.7, xa, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
    ᐃΔ[52][rs.ⵠⵠⵠ] = fa(nb(Er, Gc(a * 0.7, Pq, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
    ᐃΔ[592] = [];
    ᐃΔ[592].push(fa(mc(a * 0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
    ᐃΔ[592].push(fa(mc(a * 0.7, ["#524712", "#c7b11c", "#d9ba18"])));
    ᐃΔ[592].push(fa(mc(a * 0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
    ᐃΔ[326] = fa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 188;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
      d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
      d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
      d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
      d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
      d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
      d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
      d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
      d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
      d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
      d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
      d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
      d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
      d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
      d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
      d.closePath();
      St(d, b[0], b[Qr], a * Qt);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
      d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
      d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
      d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
      d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
      d.closePath();
      St(d, b[0], b[tj], jg * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
      d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
      d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
      d.closePath();
      St(d, b[Fj], b[0], a * 2);
      return c;
    }(a * 1.1, ["#BB0000"]));
    ᐃΔ[333] = fa(nb(Math.PI, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 238;
      c.height = a * 230;
      d.translate(a * -93, a * -110);
      Vt(d, a * 213.5, a * 256.75, a * 75);
      St(d, b);
      Vt(d, a * 213.5, a * 175.75, a * 25);
      St(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 156.5, a * 137.75);
      d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
      d.lineWidth = a * Ja;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217.5, a * 178.75);
      d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
      d.lineWidth = Tk * a;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 130.5, a * 124.75);
      d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
      d.lineWidth = a * Il;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 183.75);
      d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
      d.lineWidth = a * Ja;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107.5, a * 213.75);
      d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 212.5, a * 187.75);
      d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
      d.lineWidth = Ja * a;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 102.5, a * 258.75);
      d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 192.75);
      d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
      d.lineWidth = a * Xr;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 219.5, a * 158.75);
      d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 210.5, a * 160.75);
      d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * Wg;
      d.strokeStyle = b;
      d.stroke();
      return c;
    }(a * 0.9, "#BB0000")));
    ᐃΔ[23] = [];
    ᐃΔ[23][rs.ⲆᐃΔ] = fa(Cc(a * 0.55, xa, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
    ᐃΔ[23][rs.ⵠⵠⵠ] = fa(Cc(a * 0.55, true, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
    ᐃΔ[58] = [];
    ᐃΔ[58][rs.ⲆᐃΔ] = fa(Fc(a * 0.55, rn, ["#252525", "#73583e", "#573f29", "#7d6144"]));
    ᐃΔ[58][rs.ⵠⵠⵠ] = fa(Fc(a * 0.55, xg, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
    ᐃΔ[25] = [];
    ᐃΔ[25][rs.ⲆᐃΔ] = fa(_c(a * 0.6, mt, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
    ᐃΔ[25][rs.ⵠⵠⵠ] = fa(_c(a * 0.6, true, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
    ᐃΔ[26] = [];
    ᐃΔ[26][rs.ⲆᐃΔ] = fa(Ic(a * 0.58, 0, ["#dbce71", "#b29c32", "#c4bc51"]));
    ᐃΔ[26][rs.ⵠⵠⵠ] = fa(Ic(a * 0.58, 0, ["#2b7c57", "#15543c", "#1a7961"]));
    ᐃΔ[27] = [];
    ᐃΔ[27][rs.ⲆᐃΔ] = fa(Mc(a * 0.69, 0, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
    ᐃΔ[27][rs.ⵠⵠⵠ] = fa(Mc(a * 0.69, 0, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
    ᐃΔ[413] = [];
    ᐃΔ[413][rs.ⲆᐃΔ] = [];
    ᐃΔ[413][rs.ⵠⵠⵠ] = [];
    ᐃΔ[413][rs.ⲆᐃΔ].push(fa(rc(a * 1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
    ᐃΔ[413][rs.ⲆᐃΔ].push(fa(Ud(a * 1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
    ᐃΔ[413][rs.ⲆᐃΔ].push(fa(Vd(a * 1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
    ᐃΔ[413][rs.ⵠⵠⵠ].push(fa(rc(a * 1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
    ᐃΔ[413][rs.ⵠⵠⵠ].push(fa(Ud(a * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
    ᐃΔ[413][rs.ⵠⵠⵠ].push(fa(Vd(a * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
    ᐃΔ[449] = [];
    ᐃΔ[449][rs.ⲆᐃΔ] = fa(bc(a * 1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
    ᐃΔ[449][rs.ⵠⵠⵠ] = fa(bc(a * 1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
    ᐃΔ[451] = [];
    ᐃΔ[451][rs.ⲆᐃΔ] = fa(lc(a * Ek, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ᐃΔ[451][rs.ⵠⵠⵠ] = fa(lc(a * bs, ["#050505", "#327570", "#021724", "#200333"]));
    ᐃΔ[452] = [];
    ᐃΔ[452][rs.ⲆᐃΔ] = fa(Ac(a * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ᐃΔ[452][rs.ⵠⵠⵠ] = fa(Ac(_h * a, ["#050505", "#327570", "#021724", "#200333"]));
    ᐃΔ[243] = [];
    ᐃΔ[243][rs.ⲆᐃΔ] = [];
    ᐃΔ[243][rs.ⵠⵠⵠ] = [];
    ᐃΔ[243][rs.ⲆᐃΔ] = [Δᐃ.ᐃᐃΔΔⵠⲆⵠ, Δᐃ.ⵠⲆⵠᐃΔⵠᐃ, Δᐃ.ⵠᐃᐃⲆΔⲆΔ, Δᐃ.ⵠᐃⵠᐃⲆΔΔ, Δᐃ.ⵠΔΔⵠⲆⵠⵠ, Δᐃ.ⲆΔᐃⵠⲆⲆⵠ, Δᐃ.ⵠⲆΔΔᐃΔⲆ, Δᐃ.ᐃⵠᐃᐃᐃⵠΔ, Δᐃ.ⲆⲆⲆⲆⵠᐃⵠ, Δᐃ.ᐃΔᐃᐃΔᐃⵠ, Δᐃ.ⲆᐃⵠⵠΔⲆᐃ, Δᐃ.ΔⲆⵠᐃⵠΔᐃ, Δᐃ.ᐃⲆᐃⲆᐃᐃⲆ, Δᐃ.ᐃⵠⲆΔⵠⵠᐃ, Δᐃ.ΔⵠⲆΔⵠⵠΔ, Δᐃ.ΔⲆᐃΔⲆᐃⵠ, Δᐃ.ΔΔᐃⲆⵠΔΔ, Δᐃ.ⲆᐃᐃⵠⵠⲆΔ, Δᐃ.ⵠᐃΔⲆⵠⲆᐃ, Δᐃ.ⵠΔⲆⵠⵠⵠΔ, Δᐃ.ⵠⵠⲆΔᐃᐃⵠ, Δᐃ.ᐃⵠⵠΔⵠⲆᐃ, Δᐃ.Δᐃᐃᐃᐃⵠᐃ, Δᐃ.ⲆⵠⵠⵠᐃΔⲆ, Δᐃ.ⵠᐃⲆᐃⲆΔΔ, Δᐃ.ⵠⲆⲆⵠΔΔⵠ, Δᐃ.ΔᐃⵠⲆᐃⵠΔ, Δᐃ.ⲆΔⲆⲆᐃᐃⲆ, Δᐃ.ⵠΔΔΔⲆΔΔ, Δᐃ.ⵠⲆⵠᐃⲆᐃⵠ, Δᐃ.ΔΔⵠⲆⲆⲆⵠ, Δᐃ.ᐃⲆᐃⵠᐃᐃⵠ, Δᐃ.ⲆᐃⵠΔⵠᐃⵠ, Δᐃ.ⲆΔΔⵠΔⵠⵠ, Δᐃ.ᐃᐃⲆⵠᐃⲆⲆ, Δᐃ.ᐃΔⲆⵠⲆⵠΔ, Δᐃ.ΔⲆⵠᐃΔΔⲆ, Δᐃ.ⵠΔⲆΔΔᐃᐃ, Δᐃ.ᐃΔᐃᐃΔᐃΔ, Δᐃ.ⵠΔΔⲆΔΔⲆ, Δᐃ.ⲆⲆᐃᐃᐃᐃⵠ, Δᐃ.ΔⵠⵠⲆⲆⵠΔ, Δᐃ.ᐃᐃⵠΔᐃᐃⵠ, Δᐃ.ⵠⵠΔⲆⲆⵠΔ, Δᐃ.ΔᐃΔᐃΔᐃⵠ, Δᐃ.ΔⲆΔⵠΔⲆⵠ, Δᐃ.ΔⲆⲆΔᐃⵠⵠ, Δᐃ.ⵠΔⲆⵠᐃᐃⵠ, Δᐃ.ⵠΔΔᐃⵠᐃⲆ, Δᐃ.ⵠΔⵠΔᐃᐃΔ, Δᐃ.ᐃᐃᐃᐃⵠⵠᐃ, Δᐃ.ⵠᐃⲆᐃΔⲆⵠ, Δᐃ.ᐃⲆⵠⵠⵠⵠⵠ, Δᐃ.ⲆⵠⲆⵠᐃᐃⲆ, Δᐃ.ⲆⵠⲆΔⲆⲆⲆ, Δᐃ.ΔⵠⵠⵠⵠΔᐃ];
    ᐃΔ[243][rs.ⵠⵠⵠ] = [Δᐃ.ΔⲆΔΔᐃᐃΔ, Δᐃ.ΔᐃⵠΔᐃⲆᐃ, Δᐃ.ⲆⵠᐃᐃⵠⲆᐃ, Δᐃ.ⵠⵠΔΔᐃᐃΔ, Δᐃ.ΔᐃⵠᐃⵠⲆⵠ, Δᐃ.ΔⵠⵠᐃΔⲆΔ, Δᐃ.ⲆⵠⵠΔᐃΔⵠ, Δᐃ.ⵠⵠⲆⲆⲆᐃⵠ, Δᐃ.ΔⲆᐃⵠᐃⲆΔ, Δᐃ.ⲆᐃⲆΔᐃΔⵠ, Δᐃ.ⵠΔᐃᐃⲆᐃΔ, Δᐃ.Δᐃᐃᐃⵠⵠⵠ, Δᐃ.ⲆⲆΔΔΔⵠΔ, Δᐃ.ΔⲆⲆⲆᐃᐃⲆ, Δᐃ.ⲆᐃⵠᐃΔⲆᐃ, Δᐃ.ⵠⵠᐃΔᐃᐃⲆ, Δᐃ.ⲆⲆⵠΔⲆΔⲆ, Δᐃ.ⲆⲆⵠⵠⵠⲆΔ, Δᐃ.ⲆΔⲆᐃᐃᐃⵠ, Δᐃ.ᐃᐃⲆⵠⵠΔᐃ, Δᐃ.ᐃⲆᐃᐃᐃᐃⲆ, Δᐃ.ᐃⲆᐃᐃⲆᐃΔ, Δᐃ.ⲆⲆⵠᐃⵠᐃⲆ, Δᐃ.ⵠΔⵠΔΔⵠΔ, Δᐃ.ⵠΔΔΔΔⵠⵠ, Δᐃ.ᐃᐃᐃⵠΔⲆᐃ, Δᐃ.ΔᐃΔⲆΔΔΔ, Δᐃ.ΔᐃΔΔᐃΔΔ, Δᐃ.ᐃᐃᐃΔᐃΔΔ, Δᐃ.ΔᐃᐃᐃᐃᐃΔ, Δᐃ.ⲆᐃᐃⲆᐃΔᐃ, Δᐃ.ΔᐃΔΔⲆΔⲆ, Δᐃ.ⵠΔⵠⲆΔⵠᐃ, Δᐃ.ᐃΔⵠᐃⲆᐃᐃ, Δᐃ.ⲆΔⲆⵠⲆⵠᐃ, Δᐃ.ⵠⵠⲆⲆΔⵠⵠ, Δᐃ.ΔⲆⲆᐃΔᐃⲆ, Δᐃ.ⵠⵠΔⵠⵠⵠⵠ, Δᐃ.ᐃΔᐃᐃⲆΔⲆ, Δᐃ.ⲆⲆΔᐃΔΔᐃ, Δᐃ.ᐃⵠⲆᐃΔⲆΔ, Δᐃ.ᐃⲆⲆΔⲆΔⲆ, Δᐃ.Ⲇⵠⵠᐃⵠⵠᐃ, Δᐃ.ⲆⲆᐃⵠⲆᐃⵠ, Δᐃ.ⲆⵠΔᐃⵠⵠⲆ, Δᐃ.ⵠᐃⲆΔⵠⵠᐃ, Δᐃ.ⵠⲆΔᐃⵠΔⲆ, Δᐃ.ⵠⵠΔΔᐃᐃᐃ, Δᐃ.ᐃⲆᐃΔᐃⵠΔ, Δᐃ.ⲆⵠᐃⵠⵠᐃⲆ, Δᐃ.ⲆᐃⲆⲆⵠΔⵠ, Δᐃ.ⲆⲆⵠΔᐃⲆⲆ, Δᐃ.ᐃΔᐃⵠⵠΔⵠ, Δᐃ.ᐃΔⲆᐃⵠΔΔ, Δᐃ.ΔΔΔⲆⲆΔⵠ, Δᐃ.ⵠⵠⲆⲆᐃᐃⵠ];
    ᐃΔ[676] = [];
    ᐃΔ[676][rs.ⲆᐃΔ] = [];
    ᐃΔ[676][rs.ⵠⵠⵠ] = [];
    ᐃΔ[676][rs.ⲆᐃΔ].push(fa(vu(a * 1.1, false, ["#252B28", "#747471", "#83827e"], Gk)));
    ᐃΔ[676][rs.ⲆᐃΔ].push(fa(vu(a * 0.9, false, ["#252B28", "#747471", "#83827e"], Co)));
    ᐃΔ[676][rs.ⲆᐃΔ].push(fa(vu(a * 1, ia, ["#252B28", "#747471", "#83827e"], 2)));
    ᐃΔ[676][rs.ⲆᐃΔ].push(fa(vu(a * 0.9, false, ["#252B28", "#747471", "#83827e"], 2)));
    ᐃΔ[676][rs.ⵠⵠⵠ].push(fa(vu(a * 1.1, ia, ["#030d14", "#123335", "#183f3f"], 0)));
    ᐃΔ[676][rs.ⵠⵠⵠ].push(fa(vu(a * 0.9, ia, ["#030d14", "#123335", "#183f3f"], 1)));
    ᐃΔ[676][rs.ⵠⵠⵠ].push(fa(vu(a * sl, false, ["#030d14", "#123335", "#183f3f"], X)));
    ᐃΔ[676][rs.ⵠⵠⵠ].push(fa(vu(a * 0.9, Zl, ["#030d14", "#123335", "#183f3f"], jg)));
    ᐃΔ[679] = [];
    ᐃΔ[679][rs.ⲆᐃΔ] = [];
    ᐃΔ[679][rs.ⵠⵠⵠ] = [];
    ᐃΔ[679][rs.ⲆᐃΔ].push(fa(vu(a * 1.1, true, ["#252B28", "#58645F", "#75827D"], ta)));
    ᐃΔ[679][rs.ⲆᐃΔ].push(fa(vu(a * 0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ᐃΔ[679][rs.ⲆᐃΔ].push(fa(vu(a * Lu, bh, ["#252B28", "#58645F", "#75827D"], 2)));
    ᐃΔ[679][rs.ⲆᐃΔ].push(fa(vu(a * 0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ᐃΔ[679][rs.ⵠⵠⵠ].push(fa(vu(a * 1.1, mt, ["#030d14", "#123335", "#183f3f"], tk)));
    ᐃΔ[679][rs.ⵠⵠⵠ].push(fa(vu(a * 0.9, true, ["#030d14", "#123335", "#183f3f"], Gl)));
    ᐃΔ[679][rs.ⵠⵠⵠ].push(fa(vu(a * 1, true, ["#030d14", "#123335", "#183f3f"], Nr)));
    ᐃΔ[679][rs.ⵠⵠⵠ].push(fa(vu(a * 0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃΔ[415] = [];
    ᐃΔ[415][rs.ⲆᐃΔ] = [];
    ᐃΔ[415][rs.ⵠⵠⵠ] = [];
    ᐃΔ[415][rs.ⲆᐃΔ].push(fa(Ju(a * 1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃΔ[415][rs.ⲆᐃΔ].push(fa(Ju(a * 1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃΔ[415][rs.ⲆᐃΔ].push(fa(Ju(a * 1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃΔ[415][rs.ⵠⵠⵠ].push(fa(Ju(a * 1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ᐃΔ[415][rs.ⵠⵠⵠ].push(fa(Ju(a * 1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ᐃΔ[415][rs.ⵠⵠⵠ].push(fa(Ju(a * 1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ᐃΔ[416] = [];
    ᐃΔ[416][rs.ⲆᐃΔ] = [];
    ᐃΔ[416][rs.ⵠⵠⵠ] = [];
    ᐃΔ[416][rs.ⲆᐃΔ].push(fa(Ku(a * 1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ᐃΔ[416][rs.ⲆᐃΔ].push(fa(Ku(a * 0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ᐃΔ[416][rs.ⲆᐃΔ].push(fa(Ku(a * 0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ᐃΔ[416][rs.ⵠⵠⵠ].push(fa(Ku(a * 1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ᐃΔ[416][rs.ⵠⵠⵠ].push(fa(Ku(a * 0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ᐃΔ[416][rs.ⵠⵠⵠ].push(fa(Ku(a * 0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ᐃΔ[121] = [];
    ᐃΔ[121][rs.ⲆᐃΔ] = [];
    ᐃΔ[121][rs.ⵠⵠⵠ] = [];
    ᐃΔ[121][rs.ⲆᐃΔ].push(fa(Hd(a * 1.7, Rq, ["#1d051e", "#c27add", "#cd98e5"])));
    ᐃΔ[121][rs.ⲆᐃΔ].push(fa(Hd(a * 1.5, true, ["#1d051e", "#c27add", "#cd98e5"])));
    ᐃΔ[121][rs.ⲆᐃΔ].push(fa(Hd(a * 1.3, rg, ["#1d051e", "#c27add", "#cd98e5"])));
    ᐃΔ[121][rs.ⵠⵠⵠ].push(fa(Hd(a * 1.7, oh, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ᐃΔ[121][rs.ⵠⵠⵠ].push(fa(Hd(a * 1.5, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ᐃΔ[121][rs.ⵠⵠⵠ].push(fa(Hd(a * 1.3, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ᐃΔ[678] = [];
    ᐃΔ[678][rs.ⲆᐃΔ] = [];
    ᐃΔ[678][rs.ⵠⵠⵠ] = [];
    ᐃΔ[678][rs.ⲆᐃΔ].push(fa(tc(a, ["#2d53c4"])));
    ᐃΔ[678][rs.ⵠⵠⵠ].push(fa(tc(a, ["#2d53c4"])));
    ᐃΔ[696] = [];
    ᐃΔ[696][rs.ⲆᐃΔ] = [];
    ᐃΔ[696][rs.ⵠⵠⵠ] = [];
    ᐃΔ[696][rs.ⲆᐃΔ].push(fa(tc(a, ["#c4912d"])));
    ᐃΔ[696][rs.ⵠⵠⵠ].push(fa(tc(a, ["#c4912d"])));
    ᐃΔ[680] = [];
    ᐃΔ[680][rs.ⲆᐃΔ] = fa(uc(a, ["#414040"]));
    ᐃΔ[680][rs.ⵠⵠⵠ] = fa(uc(a, ["#153635"]));
    ᐃΔ[508] = [];
    ᐃΔ[508][rs.ⲆᐃΔ] = fa(od(a * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃΔ[508][rs.ⵠⵠⵠ] = fa(od(Ek * a, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃΔ[509] = [];
    ᐃΔ[509][rs.ⲆᐃΔ] = fa(ud(_ * a, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃΔ[509][rs.ⵠⵠⵠ] = fa(ud(a * 1, Jh, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃΔ[512] = [];
    ᐃΔ[512][rs.ⲆᐃΔ] = fa(ud(a * Ek, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃΔ[512][rs.ⵠⵠⵠ] = fa(ud(a * Gt, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃΔ[511] = [];
    ᐃΔ[511][rs.ⲆᐃΔ] = fa(Td(a * 1, ds, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃΔ[511][rs.ⵠⵠⵠ] = fa(Td(Ga * a, ds, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃΔ[510] = [];
    ᐃΔ[510][rs.ⲆᐃΔ] = fa(gd(Fb * a, Lk, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃΔ[510][rs.ⵠⵠⵠ] = fa(gd(a * Fb, tr, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃΔ[419] = [];
    ᐃΔ[419][rs.ⲆᐃΔ] = fa(gc(a * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
    ᐃΔ[419][rs.ⵠⵠⵠ] = fa(gc(a * 0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
    ᐃΔ[445] = [];
    ᐃΔ[445][rs.ⲆᐃΔ] = fa(hc(a * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
    ᐃΔ[445][rs.ⵠⵠⵠ] = fa(hc(a * 0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
    ᐃΔ[259] = [];
    ᐃΔ[818] = [];
    ᐃΔ[516] = [];
    ᐃΔ[819] = [];
    for (b = Aa; b < Ol; b++) {
      ᐃΔ[259][b] = document.createElement("canvas");
      ᐃΔ[259][b].width = 193;
      ᐃΔ[259][b].height = 193;
      ᐃΔ[818][b] = ᐃΔ[259][b].getContext("2d");
      ᐃΔ[516][b] = document.createElement("canvas");
      ᐃΔ[516][b].width = 600;
      ᐃΔ[516][b].height = 600;
      ᐃΔ[819][b] = ᐃΔ[516][b].getContext("2d");
    }
    ᐃΔ[475] = [];
    ᐃΔ[475][rs.ⲆᐃΔ] = fa(uc(a, ["#c8e0de"]));
    ᐃΔ[475][rs.ⵠⵠⵠ] = fa(uc(a, ["#147071"]));
    ᐃΔ[476] = [];
    ᐃΔ[476][rs.ⲆᐃΔ] = fa(uc(a, ["#231912"]));
    ᐃΔ[476][rs.ⵠⵠⵠ] = fa(uc(a, ["#021719"]));
    ᐃΔ[697] = fa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 253;
      c.height = a * 192;
      d.save();
      d.translate(a * 37, a * 94);
      Tt(d, -Ts * a, a * -Hh, a * 14, a * 37, a * 20);
      d.restore();
      St(d, b[et]);
      d.save();
      d.translate(a * 131, a * 94);
      Tt(d, a * -84, a * -67, a * 168, a * 134, a * 20);
      d.restore();
      St(d, b[fg], b[tj], a * fr);
      d.save();
      d.translate(a * 223, a * 94.5);
      Tt(d, -Ij * a, a * -18.5, lt * a, a * 37, a * qa);
      d.restore();
      St(d, b[0]);
      d.save();
      d.translate(a * 128.5, a * 170.5);
      Tt(d, a * -22.5, a * -6.5, a * 45, a * 13, Hl * a);
      d.restore();
      St(d, b[0]);
      return c;
    }(a * 0.5, ["#BB0000"]));
    ᐃΔ[461] = fa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 161;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * zo, a * 93);
      d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
      d.bezierCurveTo(ol * a, a * 83, a * 17, a * 93, Og * a, a * 76);
      d.bezierCurveTo(a * 11, a * 75, a * Br, a * 75, a * 18, a * 75);
      d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
      d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
      d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
      d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
      d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
      d.bezierCurveTo(a * 76, a * 7, a * 75, Br * a, a * 76, a * S);
      d.bezierCurveTo(a * 81, a * $g, a * 84, a * 18, a * 89, a * 27);
      d.bezierCurveTo(a * 95, a * 25, a * cl, a * 16, a * 105, a * 14);
      d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
      d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
      d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
      d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
      d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
      d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
      d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
      d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
      d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
      d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
      d.bezierCurveTo(Xg * a, a * 95, a * 13, a * 99, Da * a, a * 93);
      d.closePath();
      St(d, b, b, a * zt);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 25, a * 63);
      d.bezierCurveTo(a * fn, a * 58, a * ji, a * 51, a * Xj, a * 33);
      d.bezierCurveTo(rl * a, a * 12, a * 21, a * 12, a * 32, Vh * a);
      d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
      St(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 91, a * 53);
      d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, f * a);
      d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
      d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
      St(d, b, b, a * co);
      return c;
    }(a * 0.9, "#BB0000"));
    ᐃΔ[462] = fa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 147;
      c.height = a * 172;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 8, a * 50);
      d.bezierCurveTo(a * Cl, Ha * a, a * 49, a * Ze, a * 67, a * 6);
      d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
      d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
      d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
      d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
      d.bezierCurveTo(a * 2, a * 127, Ql * a, a * 87, Ma * a, a * 50);
      d.closePath();
      St(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(Eh * a, a * 57);
      d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
      d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
      St(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 47);
      d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * tl);
      d.bezierCurveTo(a * 144, Tk * a, a * 146, a * 52, a * 133, a * 58);
      St(d, b, b, a * Oa);
      return c;
    }(a * 0.9, "#BB0000"));
    ᐃΔ[463] = fa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 271;
      c.height = a * 366;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 133, a * 99);
      d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
      d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
      d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
      d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
      d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
      d.closePath();
      St(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 73, a * 270);
      d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
      d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
      d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
      d.bezierCurveTo(a * 94, a * 319, og * a, a * 321, a * 107, a * 320);
      d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
      d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
      d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
      d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
      d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
      d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
      d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
      d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
      d.closePath();
      St(d, b[yj]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 76, a * 252);
      d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
      d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
      d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
      d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
      d.closePath();
      St(d, b[Ah]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 84, a * 257);
      d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
      d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
      d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * yg, a * 277);
      d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
      d.closePath();
      St(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125, a * 65);
      d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
      d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
      d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
      d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
      d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
      d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
      d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
      d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
      d.closePath();
      St(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 115, a * 37);
      d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
      d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
      d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
      d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
      d.closePath();
      St(d, b[Gk]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 146, a * 34);
      d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
      d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
      d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
      d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
      d.closePath();
      St(d, b[yj]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 143, a * 69);
      d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
      d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
      d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
      d.closePath();
      St(d, b[bu]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149, a * 92);
      d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
      d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
      d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
      d.closePath();
      St(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 111, a * 61);
      d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
      d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
      d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
      d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
      d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
      d.closePath();
      St(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107, a * 81);
      d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
      d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
      d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
      d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
      d.closePath();
      St(d, b[0]);
      return c;
    }(a * sl, ["#BB0000"]));
    ᐃΔ[466] = fa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -20, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 50, a * 105);
      d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
      d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
      d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
      d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
      d.closePath();
      St(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 44, a * 106);
      d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
      d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
      d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
      d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
      d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
      d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
      d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
      d.closePath();
      St(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 30, a * 159);
      d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
      d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
      d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
      d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
      d.closePath();
      St(d, b);
      return c;
    }(a * 0.8, "#BB0000"));
    ᐃΔ[467] = fa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -165, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217, a * 103);
      d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
      d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
      d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
      d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
      d.closePath();
      St(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 231, a * 163);
      d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
      d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
      d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
      d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
      d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
      d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
      d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
      d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
      d.closePath();
      St(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 234, a * 154);
      d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
      d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
      d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
      d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
      d.closePath();
      St(d, b);
      return c;
    }(a * 0.8, "#BB0000"));
    ᐃΔ[322] = fa(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 85;
      var g = b * 115;
      var h = co * b;
      d.width = f;
      d.height = g;
      e.translate(b * -130, b * -60);
      e.globalAlpha = 1;
      e.beginPath();
      e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
      e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
      e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
      e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
      e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
      e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
      e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
      e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
      e.closePath();
      St(e, c, c, h);
      return d;
    }(a * 0.9, "#BB0000"));
    ᐃΔ[279] = fa(ab(a * 0.6, "#BB0000"));
    ᐃΔ[280] = fa(ab(a * 0.6, "#1CE7E0"));
    ᐃΔ[281] = fa(ab(a * 0.6, "#DBE71C"));
    ᐃΔ[308] = fa(ab(a * 0.6, "#00BB00"));
    ᐃΔ[602] = [];
    ᐃΔ[602][rs.ⲆᐃΔ] = fa(uc(a, ["#dac291"]));
    ᐃΔ[602][rs.ⵠⵠⵠ] = fa(uc(a, ["#0D423D"]));
    ᐃΔ[698] = [];
    ᐃΔ[698][rs.ⲆᐃΔ] = fa(uc(a, ["#dac291"]));
    ᐃΔ[698][rs.ⵠⵠⵠ] = fa(uc(a, ["#0D423D"]));
    ᐃΔ[788] = [];
    ᐃΔ[788][rs.ⲆᐃΔ] = fa(Tm(a * 0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
    ᐃΔ[788][rs.ⵠⵠⵠ] = fa(Tm(a * 0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
    ᐃΔ[182] = [];
    ᐃΔ[182][rs.ⲆᐃΔ] = fa(Tm(a * 0.3, Pq, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
    ᐃΔ[182][rs.ⵠⵠⵠ] = fa(Tm(a * 0.3, mt, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
    ᐃΔ[127] = [fa($c(a, xg, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ᐃΔ[128] = [fa($c(a, true, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ᐃΔ[603] = [];
    ᐃΔ[603][rs.ⲆᐃΔ] = [];
    ᐃΔ[603][rs.ⵠⵠⵠ] = [];
    ᐃΔ[603][rs.ⲆᐃΔ].push(fa(Yd(a * 1, ["#0B6A84"])));
    ᐃΔ[603][rs.ⲆᐃΔ].push(fa(Xd(a * 1, ["#0B6A84"])));
    ᐃΔ[603][rs.ⲆᐃΔ].push(fa(ac(a * 1, ["#0B6A84"])));
    ᐃΔ[603][rs.ⲆᐃΔ].push(fa(ic(a * 1, ["#0B6A84"])));
    ᐃΔ[603][rs.ⲆᐃΔ].push(fa(Nd(a * Ls, ["#0B6A84"])));
    ᐃΔ[603][rs.ⲆᐃΔ].push(fa(qd(Ls * a, ["#0B6A84"])));
    ᐃΔ[603][rs.ⲆᐃΔ].push(fa($d(Gt * a, ["#0B6A84"])));
    ᐃΔ[603][rs.ⵠⵠⵠ].push(fa(Yd(a * 1, ["#09373F"])));
    ᐃΔ[603][rs.ⵠⵠⵠ].push(fa(Xd(a * wh, ["#09373F"])));
    ᐃΔ[603][rs.ⵠⵠⵠ].push(fa(ac(ig * a, ["#09373F"])));
    ᐃΔ[603][rs.ⵠⵠⵠ].push(fa(ic(a * 1, ["#09373F"])));
    ᐃΔ[603][rs.ⵠⵠⵠ].push(fa(Nd(a * ck, ["#09373F"])));
    ᐃΔ[603][rs.ⵠⵠⵠ].push(fa(qd(ig * a, ["#09373F"])));
    ᐃΔ[603][rs.ⵠⵠⵠ].push(fa($d(a * sc, ["#09373F"])));
    ᐃΔ[692] = [];
    ᐃΔ[692][rs.ⲆᐃΔ] = [];
    ᐃΔ[692][rs.ⵠⵠⵠ] = [];
    ᐃΔ[692][rs.ⲆᐃΔ].push(fa(jd(a * 1.7, ["#FBEFBC"], 0)));
    ᐃΔ[692][rs.ⲆᐃΔ].push(fa(jd(a * 1.9, ["#FBEFBC"], 1)));
    ᐃΔ[692][rs.ⲆᐃΔ].push(fa(jd(a * 1.7, ["#FBEFBC"], 2)));
    ᐃΔ[692][rs.ⵠⵠⵠ].push(fa(jd(a * 1.7, ["#0F4C48"], 0)));
    ᐃΔ[692][rs.ⵠⵠⵠ].push(fa(jd(a * 1.9, ["#0F4C48"], 1)));
    ᐃΔ[692][rs.ⵠⵠⵠ].push(fa(jd(a * 1.7, ["#0F4C48"], zd)));
    ᐃΔ[694] = [];
    ᐃΔ[694][rs.ⲆᐃΔ] = [];
    ᐃΔ[694][rs.ⵠⵠⵠ] = [];
    ᐃΔ[694][rs.ⲆᐃΔ].push(fa(jd(a * 1.8, ["#A9D6D3"], 0)));
    ᐃΔ[694][rs.ⲆᐃΔ].push(fa(jd(a * nd, ["#A9D6D3"], 1)));
    ᐃΔ[694][rs.ⲆᐃΔ].push(fa(jd(a * 1.8, ["#A9D6D3"], 2)));
    ᐃΔ[694][rs.ⵠⵠⵠ].push(fa(jd(a * 1.8, ["#115E60"], Gg)));
    ᐃΔ[694][rs.ⵠⵠⵠ].push(fa(jd(a * 2, ["#115E60"], Ls)));
    ᐃΔ[694][rs.ⵠⵠⵠ].push(fa(jd(a * 1.8, ["#115E60"], 2)));
    ᐃΔ[695] = [];
    ᐃΔ[695][rs.ⲆᐃΔ] = [];
    ᐃΔ[695][rs.ⵠⵠⵠ] = [];
    ᐃΔ[695][rs.ⲆᐃΔ].push(fa(jd(a * 1.9, ["#2A8B9B"], Gk)));
    ᐃΔ[695][rs.ⲆᐃΔ].push(fa(jd(a * 2.1, ["#2A8B9B"], sl)));
    ᐃΔ[695][rs.ⲆᐃΔ].push(fa(jd(a * 1.9, ["#2A8B9B"], qi)));
    ᐃΔ[695][rs.ⵠⵠⵠ].push(fa(jd(a * 1.9, ["#0F464C"], Ah)));
    ᐃΔ[695][rs.ⵠⵠⵠ].push(fa(jd(a * 2.1, ["#0F464C"], 1)));
    ᐃΔ[695][rs.ⵠⵠⵠ].push(fa(jd(a * 1.9, ["#0F464C"], 2)));
    ᐃΔ[693] = [];
    ᐃΔ[693][rs.ⲆᐃΔ] = [];
    ᐃΔ[693][rs.ⵠⵠⵠ] = [];
    ᐃΔ[693][rs.ⲆᐃΔ].push(fa(td(a * 0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ᐃΔ[693][rs.ⲆᐃΔ].push(fa(td(Kg * a, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ᐃΔ[693][rs.ⲆᐃΔ].push(fa(td(a * 1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ᐃΔ[693][rs.ⵠⵠⵠ].push(fa(td(a * 0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ᐃΔ[693][rs.ⵠⵠⵠ].push(fa(td(a * wh, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ᐃΔ[693][rs.ⵠⵠⵠ].push(fa(td(a * 1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ᐃΔ[637] = [];
    ᐃΔ[637][rs.ⲆᐃΔ] = fa(fc(a * 0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
    ᐃΔ[637][rs.ⵠⵠⵠ] = fa(fc(a * 0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
    ᐃΔ[687] = fa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 376;
      c.height = a * 371;
      d.globalAlpha = 1;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 191.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
      d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
      d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
      d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
      d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
      d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
      d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
      d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
      d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
      d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
      d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
      d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
      d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
      d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
      d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
      d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
      d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
      d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
      d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
      d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
      d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
      d.closePath();
      St(d, b[0], b[0], a * 12);
      return c;
    }(a * 0.8, ["#B6222A"]));
    ᐃΔ[673] = [];
    ᐃΔ[673][rs.ⲆᐃΔ] = fa(vm(a * 0.8, gk, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
    ᐃΔ[673][rs.ⵠⵠⵠ] = fa(vm(a * 0.8, true, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
    ᐃΔ[688] = fa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 158;
      c.height = a * 201;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 96.5, a * 76.421875);
      d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
      d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
      d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
      d.closePath();
      St(d, b[0], b[Gg], a * bg);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 61.5, a * 78.421875);
      d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
      d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
      d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
      d.closePath();
      St(d, b[0], b[0], a * In);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 116.5, a * 127.421875);
      d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
      d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
      d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
      d.closePath();
      St(d, b[0], b[bu], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 41.5, a * 134.421875);
      d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
      d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
      d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
      d.closePath();
      St(d, b[xq], b[qu], a * Hb);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 78.5, a * 51.921875);
      d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
      d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
      d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
      d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
      d.closePath();
      St(d, b[sb], b[Ah], vq * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      St(d, b[0], b[Gg], a * Ea);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 42.5, a * 163.421875);
      d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
      d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
      d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
      d.closePath();
      St(d, b[0], b[Qr], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 79.5, a * 61.421875);
      d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
      d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
      d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
      d.closePath();
      St(d, b[fg], b[Qr], eb * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      St(d, b[yj], b[et], a * 10);
      return c;
    }(a * 0.8, ["#B6222A"]));
    ᐃΔ[902] = [];
    ᐃΔ[902][rs.ⲆᐃΔ] = fa(bb(a * 0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], Gk));
    ᐃΔ[902][rs.ⵠⵠⵠ] = fa(bb(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    ᐃΔ[903] = [];
    ᐃΔ[903][rs.ⲆᐃΔ] = fa(bb(a * 0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
    ᐃΔ[903][rs.ⵠⵠⵠ] = fa(bb(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], bs));
    ᐃΔ[rs.ⲆΔⲆⵠᐃⲆᐃ] = [];
    ᐃΔ[rs.ⲆΔⲆⵠᐃⲆᐃ][rs.ⲆᐃΔ] = fa(bb(a * 0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], Fj));
    ᐃΔ[rs.ⲆΔⲆⵠᐃⲆᐃ][rs.ⵠⵠⵠ] = fa(bb(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    ᐃΔ[904] = fa(db(a * 0.4, ["#B6222A"]));
    ᐃΔ[905] = fa(db(a * 0.4, ["#B6222A"]));
    ᐃΔ[rs.ⵠⲆⲆΔᐃⲆⲆᐃΔ] = fa(db(a * 0.4, ["#B6222A"]));
    ᐃΔ[230] = fa(md(a * 0.35, true, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
    ᐃΔ[229] = fa(xu(a * 0.35, true, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
    ᐃΔ[886] = [];
    ᐃΔ[886][rs.ⲆᐃΔ] = fa(ou(a * 0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], Ls));
    ᐃΔ[886][rs.ⵠⵠⵠ] = fa(ou(a * 0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], bs));
    ᐃΔ[887] = [];
    ᐃΔ[887][rs.ⲆᐃΔ] = fa(ou(a * 0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
    ᐃΔ[887][rs.ⵠⵠⵠ] = fa(ou(a * 0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
    ᐃΔ[894] = [];
    ᐃΔ[894][rs.ⲆᐃΔ] = fa(mu(a * 0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ᐃΔ[894][rs.ⵠⵠⵠ] = fa(mu(a * 0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ᐃΔ[895] = [];
    ᐃΔ[895][rs.ⲆᐃΔ] = fa(pu(a * 0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ᐃΔ[895][rs.ⵠⵠⵠ] = fa(pu(a * 0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ᐃΔ[896] = [];
    ᐃΔ[896][rs.ⲆᐃΔ] = fa(mu(a * 0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ᐃΔ[896][rs.ⵠⵠⵠ] = fa(mu(a * 0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
    ᐃΔ[897] = [];
    ᐃΔ[897][rs.ⲆᐃΔ] = fa(pu(a * 0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ᐃΔ[897][rs.ⵠⵠⵠ] = fa(pu(a * 0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
    ᐃΔ[888] = fa(nu(a * 0.35, ["#B6222A"]));
    ᐃΔ[889] = fa(mu(a * 0.35, 0, [undefined, "#B6222A"]));
    ᐃΔ[890] = fa(pu(a * 0.35, 0, [Mk, "#B6222A"]));
    ᐃΔ[891] = fa(nu(a * 0.35, ["#22E066"]));
    ᐃΔ[892] = fa(mu(a * 0.35, 0, [Cr, "#22E066"]));
    ᐃΔ[893] = fa(pu(a * 0.35, 0, [Ao, "#22E066"]));
    ᐃΔ[48] = [];
    ᐃΔ[48][rs.ⲆᐃΔ] = fa(Ru(a * 0.3, true, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
    ᐃΔ[48][rs.ⵠⵠⵠ] = fa(Ru(a * 0.3, Va, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
    ᐃΔ[47] = [];
    ᐃΔ[47][rs.ⲆᐃΔ] = fa(Tu(a * 0.45, kl, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
    ᐃΔ[47][rs.ⵠⵠⵠ] = fa(Tu(a * 0.45, true, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
    ᐃΔ[141] = [];
    ᐃΔ[141][rs.ⲆᐃΔ] = fa(Nc(a * 0.63, rn, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
    ᐃΔ[141][rs.ⵠⵠⵠ] = fa(Nc(a * 0.63, xg, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ᐃΔ[125] = [];
    ᐃΔ[125][rs.ⲆᐃΔ] = fa(zm(a, true, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
    ᐃΔ[125][rs.ⵠⵠⵠ] = fa(zm(a, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ᐃΔ[221] = [];
    ᐃΔ[221][rs.ⲆᐃΔ] = Δᐃ.ⲆⵠᐃᐃᐃⲆΔ;
    ᐃΔ[221][rs.ⵠⵠⵠ] = Δᐃ.ⲆᐃⵠΔΔⲆⵠ;
    ᐃΔ[190] = [];
    ᐃΔ[190][rs.ⲆᐃΔ] = fa(mb(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ᐃΔ[190][rs.ⵠⵠⵠ] = fa(mb(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ᐃΔ[853] = [ᐃΔ[190]];
    ᐃΔ[853][1] = [];
    ᐃΔ[853][Ht] = [];
    ᐃΔ[853][Mg][rs.ⲆᐃΔ] = fa(ub(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ᐃΔ[853][1][rs.ⵠⵠⵠ] = fa(ub(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ᐃΔ[853][nd][rs.ⲆᐃΔ] = fa(cb(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ᐃΔ[853][ta][rs.ⵠⵠⵠ] = fa(cb(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ᐃΔ[49] = [];
    ᐃΔ[49][rs.ⲆᐃΔ] = fa(nb(Xu - Math.PI / 2, gm(a * 0.6, true, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
    ᐃΔ[49][rs.ⵠⵠⵠ] = fa(nb(3 - Math.PI / X, gm(a * 0.6, Rq, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
    ᐃΔ[728] = [];
    ᐃΔ[728][rs.ⲆᐃΔ] = fa(Ib(a * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], gl));
    ᐃΔ[728][rs.ⵠⵠⵠ] = fa(Ib(a * 0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
    ᐃΔ[798] = fa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 650;
      c.height = a * 650;
      d.scale(1.9, 1.9);
      d.save();
      d.translate(a * 202.5, a * 147.5);
      Tt(d, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
      d.restore();
      St(d, b[yn], b[Ni], a * $e);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      Tt(d, a * -115.5, a * -20.5, a * 231, a * 41, Li * a);
      d.restore();
      St(d, b[rb], b[Ls], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      Tt(d, a * -115.5, a * -La, a * 231, a * 40, a * vq);
      d.restore();
      St(d, b[rb], b[Ls], a * $g);
      d.save();
      d.translate(a * 298.5, a * 210);
      Tt(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      St(d, b[Mh], b[sl], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      Tt(d, a * -20.5, a * -109, a * 41, a * 218, a * F);
      d.restore();
      St(d, b[3], b[1], uh * a);
      d.save();
      d.translate(a * 204, a * 121.5);
      Tt(d, a * -92, a * -9.5, a * 184, a * 19, a * 10);
      d.restore();
      St(d, b[3], b[Qn], a * 10);
      d.save();
      d.translate(a * 197, a * 299);
      Tt(d, a * 85, a * -tg, a * -170, a * 18, a * 10);
      d.restore();
      St(d, b[Lq], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 94, a * 317);
      d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
      d.closePath();
      St(d, Xl, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 279, a * 142);
      d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
      d.closePath();
      St(d, undefined, b[Ek], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 106);
      d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
      d.closePath();
      St(d, undefined, b[Gt], a * cg);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 281, a * 282);
      d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
      d.closePath();
      St(d, Ao, b[_], a * 12);
      return c;
    }(a * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
    ᐃΔ[729] = fa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 400;
      c.height = a * 400;
      d.save();
      d.translate(a * 202.5, a * 147.5);
      Tt(d, a * -96.5, a * -21.5, a * 193, a * 43, a * 0);
      d.restore();
      St(d, b[0], b[0], a * Ug);
      d.save();
      d.translate(a * 202.5, a * 190.5);
      Tt(d, a * 96.5, a * -21.5, a * -193, a * 43, et * a);
      d.restore();
      St(d, b[0], b[An], a * 12);
      d.save();
      d.translate(a * 202.5, a * 233.5);
      Tt(d, a * -96.5, a * -20.5, a * 193, a * 41, a * Fj);
      d.restore();
      St(d, b[0], b[Gg], $k * a);
      d.save();
      d.translate(a * 202.5, a * 275);
      Tt(d, a * 96.5, a * -21, a * -193, a * 42, a * Rl);
      d.restore();
      St(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      Tt(d, a * -115.5, a * -20.5, a * 231, a * 41, a * Gh);
      d.restore();
      St(d, b[fg], b[tj], uh * a);
      d.save();
      d.translate(a * 203.5, a * 299);
      Tt(d, a * -115.5, a * -20, a * 231, a * 40, a * eb);
      d.restore();
      St(d, b[Aa], b[et], a * vo);
      d.save();
      d.translate(a * 298.5, a * 210);
      Tt(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      St(d, b[et], b[0], Vr * a);
      d.save();
      d.translate(a * 108.5, a * 210);
      Tt(d, a * -20.5, a * -109, a * 41, a * 218, a * Ds);
      d.restore();
      St(d, b[0], b[Rl], a * 12);
      return c;
    }(a * 0.3, ["#BB0000"]));
    ᐃΔ[658] = Gb(Gt, [{
      f: fm,
      x: 0,
      y: Qr,
      a: ck,
      r: Qr,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ᐃΔ[150] = Gb(1.5, [{
      f: xc,
      x: 0,
      y: Md,
      a: 1,
      r: 0,
      c: ["#120202", "#750a0a", "#991616", "#120202"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ᐃΔ[669] = ym(a * 0.35, ["#072428", "#67A242", "#67A242"], An);
    ᐃΔ[670] = ym(a * 0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
    ᐃΔ[671] = ym(a * 0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
    ᐃΔ[672] = ym(a * 0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
    if (ⵠⲆᐃⲆⲆⲆⵠ) {
      ᐃΔ[278] = fa(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 180;
        var g = b * Rs;
        c.width = e;
        c.height = f;
        d.beginPath();
        Tt(d, Fj, Rl, e, f - g, g);
        d.globalAlpha = 0.8;
        St(d, "#1D6055");
        d.globalAlpha = Ls;
        var h = Au(b, "Leaderboard", 25, "#FFF");
        d.drawImage(h, (e - h.width) / 2, zr * b);
        return c;
      }(a));
    } else {
      ᐃΔ[278] = fa(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 270;
        var g = b * 8;
        c.width = e;
        c.height = f + 20;
        d.beginPath();
        Tt(d, qu, 0, e, f - g, g);
        d.globalAlpha = 0.5;
        St(d, "#1D6055");
        d.globalAlpha = sl;
        var h = Au(b, "Leaderboard", 25, "#FFF");
        d.drawImage(h, (e - h.width) / 2, b * 5);
        return c;
      }(a));
    }
    if (ⵠⲆᐃⲆⲆⲆⵠ) {
      ᐃΔ[267] = fa(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 335;
        var f = b * 250;
        var i = b * 120;
        var j = b * 20;
        var a = b * 35;
        var k = b * 65;
        var h = br * b;
        var l = b * 4;
        c.width = e;
        c.height = i;
        d.beginPath();
        d.translate(0, Zn * b);
        Tt(d, k, Ih, f, j, h);
        St(d, null, "#69A148", l);
        d.translate(0, a);
        Tt(d, k, 0, f, j, h);
        St(d, null, "#AF352A", l);
        d.translate(0, a);
        Tt(d, k, Gk, f, j, h);
        St(d, null, "#669BB1", l);
        return c;
      }(0.75));
    } else {
      ᐃΔ[267] = fa(function (c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = c * 950;
        var i = c * 180;
        var j = c * 50;
        var k = c * 20;
        var a = c * 240;
        var m = c * 35;
        var h = Ga * c;
        var l = c * 4;
        var g = c * 4;
        d.width = f;
        d.height = j;
        e.translate(0, c * 15);
        Tt(e, m, h, i, k, l);
        St(e, null, "#69A148", g);
        var n = ᐃΔ[669];
        e.drawImage(n, jr, -Ma);
        e.translate(a, Gg);
        Tt(e, m, h, i, k, l);
        St(e, null, "#AF352A", g);
        n = ᐃΔ[671];
        e.drawImage(n, hs, -9);
        e.translate(a, yj);
        Tt(e, m, h, i, k, l);
        St(e, null, "#669BB1", g);
        n = ᐃΔ[670];
        e.drawImage(n, 17, -8);
        e.translate(a, 0);
        Tt(e, m, h, i, k, l);
        St(e, null, "#074A87", g);
        n = ᐃΔ[672];
        e.drawImage(n, Ch, -or);
        return d;
      }(a));
    }
    if (ⵠⲆᐃⲆⲆⲆⵠ) {
      ᐃΔ[608] = fa(qc(0.75));
    } else {
      ᐃΔ[608] = fa(qc(a));
    }
    ᐃΔ[792] = fa(_c(a * 0.16, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
    ᐃΔ[537] = fa(nb(5.8, ju(a * 0.15, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
    ᐃΔ[283] = [];
    ᐃΔ[465] = [];
    for (b = Gg; b < ow.ⵠᐃⲆᐃⲆΔⲆ + Ht; b++) {
      ᐃΔ[465][b] = Au(a, "" + (b + bs), 12, "#FFF");
    }
    ᐃΔ[708] = [];
    ᐃΔ[708].push(fa(bm(a * 0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
    ᐃΔ[708].push(fa(bm(a * 0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], bd)));
    ᐃΔ[708].push(fa(bm(a * 0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], Ls)));
    ᐃΔ[725] = [];
    ᐃΔ[725].push(fa(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(bu, a * 5);
      c.translate(tj, qa * a);
      Vt(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      St(c, "#322413", "#322413", a * fd);
      c.translate(Gk, a * -20);
      Vt(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      St(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      St(c, "#12432D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      St(c, "#3A2A0D");
      Vt(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      St(c, undefined, "#5E3E1A", Li * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      St(c, undefined, "#5E3E1A", a * uh);
      c.translate(0, th * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      St(c, es, "#c7a726", zl * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      St(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      St(c, Pl, "#c7a726", zl * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      St(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      St(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      St(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      St(c, undefined, "#c7a726", a * $e);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      St(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      St(c, undefined, "#c7a726", a * 12);
      c.translate(0, -Fh * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      St(c, E, "#EDCE4F", a * $k);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      St(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      St(c, lh, "#EDCE4F", a * tq);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      St(c, Fg, "#EDCE4F", Bs * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      St(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      St(c, hl, "#EDCE4F", tq * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      St(c, undefined, "#EDCE4F", $e * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      St(c, Ao, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      St(c, Ao, "#EDCE4F", a * zl);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      St(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      St(c, "#ECBE35", "#EDCE4F", Rg * a);
      Vt(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      St(c, "#392C16", "#5E3E1A", a * eb);
      return b;
    }(a * 0.22)));
    ᐃΔ[725].push(fa(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(Gg, a * 5);
      c.translate(0, Sk * a);
      Vt(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      St(c, "#322413", "#322413", a * 4);
      c.translate(Md, -Dh * a);
      Vt(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      St(c, "#392C16", "#5E3E1A", eb * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      St(c, "#3A2A0D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      St(c, "#071A1B");
      Vt(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      St(c, undefined, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      St(c, undefined, "#5E3E1A", a * j);
      c.translate(tj, Ko * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      St(c, es, "#281C08", Bs * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      St(c, Mk, "#281C08", Gu * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      St(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      St(c, Ct, "#281C08", Ug * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      St(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      St(c, Fg, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      St(c, kh, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      St(c, undefined, "#281C08", a * j);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      St(c, ys, "#281C08", a * 12);
      c.translate(0, -Rs * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      St(c, E, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      St(c, E, "#5E3C10", a * zl);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      St(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      St(c, Ao, "#5E3C10", a * ca);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      St(c, Yo, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      St(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      St(c, undefined, "#5E3C10", zb * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      St(c, Pa, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      St(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      St(c, "#704618", "#5D3D1A", Kn * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      St(c, "#E1DDD5", "#EAE7E4", $o * a);
      Vt(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      St(c, "#392C16", "#5E3E1A", a * 10);
      return b;
    }(a * 0.22)));
    ᐃΔ[726] = fa(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(bu, a * gs);
      Vt(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
      St(c, "#C09D6F", "#A37943", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
      c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
      c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
      c.closePath();
      St(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 161.50003051757812, a * 117.90341186523438);
      Tt(c, a * -5.5, a * -37.5, a * 11, a * 75, a * 10);
      c.restore();
      St(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 162.00003051757812, a * 78.90341186523438);
      Tt(c, a * -10, a * -5.5, a * ek, Yb * a, a * 1);
      c.restore();
      St(c, "#C09D6F");
      Vt(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
      St(c, "#C09D6F");
      return b;
    }(a * 0.22));
    ᐃΔ[727] = [];
    ᐃΔ[727].push(fa(xb(a * 1.5, ["#795026", "#654320", "#eda80d"], 0)));
    ᐃΔ[727].push(fa(xb(a * 1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
    ᐃΔ[727].push(fa(xb(a * 1.5, ["#67441f", "#573819", "#9c6e08"], Ga)));
    ᐃΔ[546] = Δᐃ.ⵠᐃΔΔΔⲆᐃ;
    ᐃΔ[547] = Δᐃ.ⵠⲆᐃⵠΔⵠΔ;
    ᐃΔ[548] = Δᐃ.ⲆⲆΔⵠⵠⵠⲆ;
    ᐃΔ[549] = Δᐃ.ⲆⲆΔᐃⵠᐃⵠ;
    ᐃΔ[517] = Au(a, "Show spectators", 25, "#FFF", undefined, al, "#000", 5, 220);
    ᐃΔ[525] = Au(a, "Reconnecting...", 30, "#FFF");
    console.log(undefined, undefined);
  }
  function $c(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    Tt(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    St(e, c[wh], c[2], a * vs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110.57142639160156, a * 197.09820556640625);
    e.bezierCurveTo(a * 158.07142639160156, a * 179.09820556640625, a * 158.07142639160156, a * 179.09820556640625, a * 205.57142639160156, a * 161.09820556640625);
    e.bezierCurveTo(a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 309.8125);
    e.bezierCurveTo(a * 205.57142639160156, a * 323.8125, a * 200.57142639160156, a * 325.8125, a * 187.57142639160156, a * 326.8125);
    e.bezierCurveTo(a * 155.57142639160156, a * 326.3125, a * 155.57142639160156, a * 326.3125, a * 123.57142639160156, a * 325.8125);
    e.bezierCurveTo(a * 111.57142639160156, a * 326.8125, a * 109.57142639160156, a * 321.8125, a * 110.57142639160156, a * 312.8125);
    e.closePath();
    St(e, c[3], c[4], ik * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    St(e, Fg, c[Ut], y * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    St(e, Fg, c[Is], a * Th);
    return d;
  }
  function em(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 170;
    e.height = a * 200;
    f.translate(zr * a, a * 15);
    if (sl == d) {
      f.translate(Gk, -ko * a);
      Vt(f, a * 77.00003051757812, a * 104.49432373046875, a * 71.84010022264724);
      St(f, c[Ek], c[5], a * 20);
      Vt(f, a * 77.00003051757812, a * 104.22160339355469, a * 61.554853586049575);
      St(f, c[1], c[5], a * 20);
      f.save();
      f.translate(a * 77.00003051757812, a * 31.267044067382812);
      Tt(f, -Oe * a, a * -12.5, Bt * a, a * 25, a * 10);
      f.restore();
      St(f, c[1], c[zr], a * 20);
      f.save();
      f.translate(a * 77.00003051757812, a * 13.267044067382812);
      Tt(f, -qg * a, a * -10.5, a * 30, a * 21, a * Vq);
      f.restore();
      St(f, c[Ni], c[Zg], a * 20);
    }
    Vt(f, a * 77.00003051757812, a * 104.49432373046875, a * 71.84010022264724);
    St(f, c[1], c[Ol], Bk * a);
    Vt(f, a * 77.00003051757812, a * 104.22160339355469, a * 61.554853586049575);
    St(f, c[bd], c[jg], a * 7);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 18.000030517578125, a * 105.85795593261719);
    f.bezierCurveTo(a * 134.00003051757812, a * 104.85795593261719, a * 77.00003051757812, a * 104.85795593261719, a * 136.00003051757812, a * 103.85795593261719);
    f.closePath();
    St(f, c[Gt], c[2], a * 8);
    Vt(f, a * 77.00003051757812, a * 104.6761474609375, a * 32.55764119219941);
    St(f, c[_], c[2], a * Wq);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 78.00003051757812, a * 112.03977966308594);
    f.bezierCurveTo(a * 78.00003051757812, a * 87.03977966308594, a * 78.00003051757812, a * 87.03977966308594, a * 78.00003051757812, a * 62.03977966308594);
    f.closePath();
    St(f, c[Z], c[jb], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 78.00003051757812, a * 48.03977966308594);
    f.bezierCurveTo(a * 82.00003051757812, a * 55.53977966308594, a * 82.00003051757812, a * 55.53977966308594, a * 86.00003051757812, a * 63.03977966308594);
    f.bezierCurveTo(a * 78.00003051757812, a * 63.03977966308594, a * 78.00003051757812, a * 63.03977966308594, a * 70.00003051757812, a * 63.03977966308594);
    f.closePath();
    St(f, c[iu], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 80.00003051757812, a * 111.6761474609375);
    f.bezierCurveTo(a * 95.00003051757812, a * 97.1761474609375, a * 95.00003051757812, a * 97.1761474609375, a * 110.00003051757812, a * 82.6761474609375);
    f.closePath();
    St(f, c[3], c[2], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 107.00003051757812, a * 76.6761474609375);
    f.bezierCurveTo(a * 111.50003051757812, a * 82.6761474609375, a * 111.50003051757812, a * 82.6761474609375, a * 116.00003051757812, a * 88.6761474609375);
    f.bezierCurveTo(a * 118.50003051757812, a * 81.6761474609375, a * 118.50003051757812, a * 81.6761474609375, a * 121.00003051757812, a * 74.6761474609375);
    f.closePath();
    St(f, c[3], c[2], a * 4);
    Vt(f, a * 77.00003051757812, a * 105.03977966308594, a * 15.556349186104045);
    St(f, c[hd], c[qo], Og * a);
    f.save();
    f.translate(a * 77.00003051757812, a * 31.267044067382812);
    f.rotate(Gk);
    Tt(f, a * -6, a * -12.5, a * 12, a * 25, lt * a);
    f.restore();
    St(f, c[Kg], c[2], a * 7);
    f.save();
    f.translate(a * 77.00003051757812, a * 13.267044067382812);
    f.rotate(bu);
    Tt(f, a * -15, a * -10.5, a * 30, a * 21, hh * a);
    f.restore();
    St(f, c[Ek], c[2], a * 7);
    return e;
  }
  function im(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 144;
    d.height = a * 280;
    e.globalAlpha = b ? 0.5 : _;
    e.translate(a * 5, a * Pg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, ba * a, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * Eh, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    St(e, c[0]);
    e.globalAlpha = _;
    e.translate(a * -5, -un * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, ma * a, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * vk, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, Qj * a, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    St(e, c[Co], c[jb], a * _g);
    return d;
  }
  function tm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * zr, Sj * a);
    Vt(e, a * 220, a * 201, a * 170.41713528867922);
    St(e, c[Gk], c[gl], a * 6);
    e.globalAlpha = Ga;
    e.translate(a * -Jb, a * -5);
    Vt(e, a * 220, a * 201, a * 170.41713528867922);
    St(e, c[1], c[ta], a * 6);
    Vt(e, a * 220, a * 201, a * 130);
    St(e, c[vg], c[2], a * 6);
    Vt(e, a * 222, a * 199, a * 120.74767078498864);
    St(e, undefined, c[3], a * 40);
    Vt(e, a * 220, a * 200, a * 95.44108130150245);
    St(e, undefined, c[qi], a * 15);
    e.globalAlpha = b ? 0.5 : Lu;
    e.translate(ie * a, a * Pg);
    Vt(e, a * 63, a * 136, a * 49.193495504995376);
    St(e, c[gl], c[0], a * ge);
    e.globalAlpha = 1;
    e.translate(a * -rh, a * -5);
    Vt(e, a * 63, a * 136, a * 49.193495504995376);
    St(e, c[Hk], c[nd], a * fd);
    Vt(e, a * 63, a * 137, a * 25.632011235952593);
    St(e, c[Sl], c[2], $j * a);
    return d;
  }
  function nm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 218;
    d.height = a * 185;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 53.135406494140625);
    e.bezierCurveTo(a * 92, a * 17.135406494140625, a * 116, a * 11.135406494140625, a * 158, a * 53.135406494140625);
    e.bezierCurveTo(a * 178, a * 74.13540649414062, a * 181, a * 81.13540649414062, a * 196, a * 101.13540649414062);
    e.bezierCurveTo(a * 214, a * 127.13540649414062, a * 192, a * 138.13540649414062, a * 173, a * 149.13540649414062);
    e.bezierCurveTo(a * 137, a * 166.13540649414062, a * 74, a * 170.13540649414062, a * 36, a * 141.13540649414062);
    e.bezierCurveTo(a * 13, a * 127.13540649414062, Hl * a, a * 119.13540649414062, a * 30, a * 103.13540649414062);
    e.bezierCurveTo(a * 48, a * 71.13540649414062, a * 54, a * 67.13540649414062, a * 63, a * 54.135406494140625);
    e.closePath();
    St(e, c[0], c[Co], a * hh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 25.135406494140625);
    e.bezierCurveTo(a * 62, a * 90.13540649414062, a * 54, a * 129.13540649414062, a * 53, a * 151.13540649414062);
    e.bezierCurveTo(a * 39.5, a * 142.13540649414062, a * 39.5, a * 142.13540649414062, a * 26, a * 133.13540649414062);
    e.bezierCurveTo(a * 23.5, a * 128.63540649414062, a * 23.5, a * 128.63540649414062, a * 21, a * 124.13540649414062);
    e.bezierCurveTo(a * 22, a * 113.13540649414062, a * 31, a * 99.13540649414062, a * 40, a * 88.13540649414062);
    e.bezierCurveTo(a * 54.5, a * 67.13540649414062, a * 54.5, a * 67.13540649414062, a * 69, a * 46.135406494140625);
    e.bezierCurveTo(a * 80.5, a * 36.635406494140625, a * 80.5, a * 36.635406494140625, a * 92, a * 27.135406494140625);
    e.closePath();
    St(e, c[1]);
    return d;
  }
  function om(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = Fb;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    St(e, c[Fj]);
    e.translate(a * -ek, a * -Sk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    St(e, c[1], c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    St(e, Gn, c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    St(e, undefined, c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    St(e, c[Mh], c[2], a * 19);
    Vt(e, a * 92.5, a * 216.0625, a * 13.892443989449804);
    St(e, c[4]);
    Vt(e, a * 68.5, a * 227.0625, a * 8.06225774829855);
    St(e, c[4]);
    Vt(e, a * 85.5, a * 240.0625, a * 6.708203932499369);
    St(e, c[4]);
    Vt(e, a * 147.5, a * 294.0625, a * 17.46424919657298);
    St(e, c[aq]);
    Vt(e, a * 166.5, a * 273.0625, a * 6.708203932499369);
    St(e, c[hr]);
    Vt(e, a * 114.5, a * 294.0625, a * 12.36931687685298);
    St(e, c[zt]);
    Vt(e, a * 123.5, a * 220.0625, a * 5.830951894845301);
    St(e, c[Og]);
    Vt(e, a * 114.5, a * 259.0625, a * 4.123105625617661);
    St(e, c[4]);
    Vt(e, a * 63.5, a * 265.0625, a * 5.385164807134504);
    St(e, c[Dd]);
    Vt(e, a * 148.5, a * 235.0625, a * 4.47213595499958);
    St(e, c[yn]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    St(e, c[5]);
    return d;
  }
  function rm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 247;
    d.height = a * 247;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(Ng * a, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    St(e, c[0]);
    e.translate(tj, a * -Vq);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    St(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    St(e, c[Ut]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * Qj, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    St(e, c[1], c[2], Bh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 137);
    e.bezierCurveTo(a * 145, a * 125, a * 138, a * 108, a * 123, a * 104);
    e.bezierCurveTo(a * 81, a * 101, a * 88, a * 77, a * 98, a * 65);
    e.bezierCurveTo(a * 117, a * 38, a * 138, a * 39, a * 165, a * 52);
    e.bezierCurveTo(a * 197, a * 72, a * 207, a * 111, a * 197, a * 140);
    e.bezierCurveTo(a * 182, a * 180, a * 161, a * 197, a * 112, a * 194);
    e.bezierCurveTo(a * 58, a * 194, a * 37, a * 170, a * 34, a * 142);
    e.bezierCurveTo(a * 29, a * 102, a * 40, a * 63, a * 51, a * 45);
    e.bezierCurveTo(a * 43, a * 78, a * 41, a * 103, a * 43, a * 122);
    e.bezierCurveTo(a * 51, a * 158, a * 63, a * 174, a * 95, a * 179);
    e.bezierCurveTo(a * 129, a * 186, a * 169, a * 172, a * 177, a * 144);
    e.bezierCurveTo(a * 197, a * 105, a * 172, a * 76, a * 160, a * 71);
    e.bezierCurveTo(a * 125, a * 52, a * 111, a * 73, a * 111, a * 81);
    e.bezierCurveTo(a * 106, a * 93, a * 140, a * 92, a * 147, a * 107);
    e.bezierCurveTo(a * 153, a * 128, a * 140, a * 135, a * 137, a * 139);
    e.closePath();
    St(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, Hh * a, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    St(e, undefined, c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 63);
    e.bezierCurveTo(a * 91, a * 64, a * 96, a * 62, a * 98, a * 53);
    e.bezierCurveTo(a * 91, a * 45, a * 85, a * 42, a * 78, a * 41);
    e.bezierCurveTo(a * 81, a * 51, a * 82, a * 57, a * 82, a * 63);
    e.closePath();
    St(e, c[co], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 40);
    e.bezierCurveTo(a * 140, a * 52, a * 131, a * 51, a * 123, a * 43);
    e.bezierCurveTo(a * 123, a * 25, a * 129, Xj * a, a * 134, j * a);
    e.bezierCurveTo(a * 138, a * 35, a * 142, a * 31, a * 148, a * 40);
    e.closePath();
    St(e, c[ge], c[ie], Sj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 43);
    e.bezierCurveTo(a * 191, a * 54, a * 196, a * 58, a * 205, a * 59);
    e.bezierCurveTo(a * 211, a * 42, a * 214, a * 37, a * 216, a * 31);
    e.bezierCurveTo(a * 202, a * 34, a * 195, a * 39, a * 190, a * 43);
    e.closePath();
    St(e, c[Og], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 98);
    e.bezierCurveTo(a * 219, a * 105, a * 225, a * 107, a * 230, a * 109);
    e.bezierCurveTo(a * 227, a * 113, a * 221, a * 115, a * 215, a * 115);
    e.bezierCurveTo(a * 208, a * 109, a * 211, a * 101, a * 216, a * 98);
    e.closePath();
    St(e, c[ge], c[Pg], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 180, a * 85);
    e.bezierCurveTo(a * 193, a * 86, a * 196, a * 98, a * 191, a * 108);
    e.bezierCurveTo(a * 179, a * 112, a * 167, a * 113, a * 155, a * 111);
    e.bezierCurveTo(a * 169, a * 100, a * 176, a * 96, a * 180, a * 85);
    e.closePath();
    St(e, c[Qt], c[5], _j * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 114);
    e.bezierCurveTo(a * 102, a * 109, a * 112, a * 110, a * 114, a * 118);
    e.bezierCurveTo(a * 111, a * 134, a * 102, a * 143, a * 95, a * 147);
    e.bezierCurveTo(a * 98, a * 123, a * 97, a * 119, a * 96, a * 115);
    e.closePath();
    St(e, c[Oa], c[Ij], a * bt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 92);
    e.bezierCurveTo(a * 86, a * 95, a * 89, a * 102, a * 83, a * 111);
    e.bezierCurveTo(a * 70, a * 110, a * 61, a * 107, a * 54, a * 100);
    e.bezierCurveTo(a * 70, a * 97, a * 70, a * 95, a * 78, a * 92);
    e.closePath();
    St(e, c[4], c[Zg], Ks * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 130);
    e.bezierCurveTo(a * 37, a * 141, a * 41, a * 143, a * 48, a * 144);
    e.bezierCurveTo(a * 54, a * 134, a * 55, a * 131, a * 56, a * 123);
    e.bezierCurveTo(a * 47, a * 129, a * 43, a * 129, a * 39, a * 129);
    e.closePath();
    St(e, c[Qt], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 113, a * 189);
    e.bezierCurveTo(a * 119, a * 201, a * 127, a * 198, a * 134, a * 192);
    e.bezierCurveTo(a * 128, a * 175, a * 128, a * 173, a * 128, a * 165);
    e.bezierCurveTo(a * 117, a * 176, a * 116, a * 182, a * 113, a * 187);
    e.closePath();
    St(e, c[Qt], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 154);
    e.bezierCurveTo(a * 76, a * 163, a * 76, a * 170, a * 75, a * 177);
    e.bezierCurveTo(a * 68, a * 179, a * 66, a * 176, a * 63, a * 171);
    e.bezierCurveTo(a * 69, a * 164, a * 72, a * 159, a * 74, a * 154);
    e.closePath();
    St(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206, a * 152);
    e.bezierCurveTo(a * 198, a * 158, a * 198, a * 166, a * 201, a * 171);
    e.bezierCurveTo(a * 209, a * 170, a * 221, a * 170, a * 226, a * 172);
    e.bezierCurveTo(a * 219, a * 159, a * 210, a * 155, a * 207, a * 153);
    e.closePath();
    St(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 181, a * 184);
    e.bezierCurveTo(a * 170, a * 184, a * 167, a * 187, a * 163, a * 195);
    e.bezierCurveTo(a * 171, a * 207, a * 183, a * 214, a * 191, a * 217);
    e.bezierCurveTo(a * 183, a * 204, a * 184, a * 196, a * 181, a * 184);
    e.closePath();
    St(e, c[4], c[5], ko * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 199);
    e.bezierCurveTo(a * 73, a * 197, a * 78, a * 199, a * 79, a * 206);
    e.bezierCurveTo(a * 71, a * 216, a * 67, a * 221, a * 57, a * 223);
    e.closePath();
    St(e, c[cq], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 143);
    e.bezierCurveTo(a * 183, a * 146, a * 183, a * 149, a * 179, a * 152);
    e.bezierCurveTo(a * 174, a * 146, a * 174, a * 146, a * 169, a * 140);
    e.closePath();
    St(e, c[4], c[Sj], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 159);
    e.bezierCurveTo(a * 45, a * 160, a * 48, a * 164, a * 45, a * 175);
    e.bezierCurveTo(a * 28, a * 183, a * 25, a * 184, wn * a, a * 184);
    e.bezierCurveTo(a * 30, a * 170, a * 29, a * 164, a * 31, a * 160);
    e.closePath();
    St(e, c[4], c[5], Jb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 214);
    e.bezierCurveTo(a * 106, a * 212, a * 104, a * 213, a * 102, a * 218);
    e.bezierCurveTo(a * 104, a * 220, a * 107, a * 222, a * 110, a * 224);
    e.bezierCurveTo(a * 110.5, a * 219, a * 110.5, a * 219, a * 111, a * 214);
    e.closePath();
    St(e, c[co], c[lu], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 52);
    e.bezierCurveTo(a * 41, a * 57, a * 40, a * 61, a * 34, a * 60);
    e.bezierCurveTo(a * 31.5, a * 55, a * 31.5, a * 55, a * 29, a * 50);
    e.bezierCurveTo(a * 34, a * 50.5, a * 34, a * 50.5, a * 39, a * 51);
    e.closePath();
    St(e, c[fd], c[Zg], Ij * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 81);
    e.bezierCurveTo(a * 37, a * 84, a * 38, a * 90, a * 34, a * 99);
    e.bezierCurveTo(a * 23, a * 97, Po * a, a * 96, fn * a, a * 93);
    e.bezierCurveTo(a * 24, a * 88, a * 28, a * 85, a * 30, a * 81);
    e.closePath();
    St(e, c[oe], c[5], a * ie);
    return d;
  }
  function am(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 77;
    e.translate(qu, a * Ea);
    e.scale(0.2, 0.2);
    e.translate(Ih, a * -30);
    if (c == bd) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 36.5, a * 278.0625);
      e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
      e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
      e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
      e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
      e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
      e.closePath();
      St(e, b[0], b[3], a * 50);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    St(e, b[Gg], b[wh], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    St(e, b[Qr], b[sl], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    St(e, b[Gg], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    St(e, b[2], b[_h], a * eg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    St(e, b[er]);
    e.scale(3, 3);
    e.translate(qg, a * iq);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * fd, a * 32);
      e.bezierCurveTo(Os * a, a * 25, a * 19, a * 25, a * 34, Dk * a);
      e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
      e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
      St(e, undefined, b[3], a * 28);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 56, a * 6);
      e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
      e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * jb);
      e.closePath();
      St(e, b[3], b[nk], a * 28);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 32);
    e.bezierCurveTo(_k * a, a * 25, a * _k, a * 25, a * 34, a * 18);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, Qj * a, a * 59.5, a * jk, a * 70, a * 11);
    St(e, undefined, b[Ek], a * Ja);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 6);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    e.closePath();
    St(e, b[1], b[1], Tk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 32);
    e.bezierCurveTo(a * rl, a * 25, a * _k, a * 25, a * 34, wl * a);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, a * zq, a * 59.5, a * ek, a * 70, a * ih);
    St(e, undefined, b[jb], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * Is);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, jb * a);
    e.closePath();
    St(e, b[2], b[2], a * 10);
    return d;
  }
  function sm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(gl, ng * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    St(e, c[Ah]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, Un * a, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    St(e, es, c[xq], a * Vo);
    e.translate(0, a * -5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    St(e, c[3], c[2], a * 12);
    e.translate(Ih, a * 25);
    e.globalAlpha = _;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    St(e, c[Eg]);
    e.translate(0, a * -25);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    St(e, c[bd], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    St(e, undefined, c[2], a * $g);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    St(e, kh, c[jb], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    St(e, c[Kg], c[Ht], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    St(e, c[4], c[qi], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    St(e, c[mg], c[2], a * Jj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * ug, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    St(e, Xl, c[2], a * Ik);
    return d;
  }
  function hm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 167;
    d.height = a * 136;
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    Tt(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    St(e, c[0]);
    e.globalAlpha = 0.8;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    Tt(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    St(e, undefined, c[_h], a * 7);
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    Tt(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    St(e, c[Qr]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    Tt(e, a * -56, a * -55, a * 115, a * 109, a * Zn);
    e.restore();
    St(e, Cr, c[1], qs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.21426391601562, a * 70.35713195800781);
    e.bezierCurveTo(a * 133.21426391601562, a * 95.35713195800781, a * 128.21426391601562, a * 109.35713195800781, a * 108.21426391601562, a * 108.35713195800781);
    St(e, undefined, c[1], a * 10);
    return d;
  }
  function lm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 160;
    d.height = a * 161;
    e.globalAlpha = b ? 0.5 : Ni;
    e.translate(Gg, a * lt);
    e.save();
    e.translate(a * 80.5, a * 78);
    Tt(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    e.restore();
    St(e, c[0]);
    e.globalAlpha = 1;
    e.translate(Aa, a * -10);
    e.save();
    e.translate(a * 80.5, a * 78);
    Tt(e, a * -71.5, a * -71, a * 143, a * 143, a * Wg);
    e.restore();
    St(e, c[bd], c[2], ya * a);
    e.save();
    e.translate(a * 80, a * 78.5);
    Tt(e, a * -17, a * -72.5, a * 34, a * 145, a * 10);
    e.restore();
    St(e, c[Z], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * Vq);
    e.save();
    e.translate(a * 80, a * 79.5);
    Tt(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    e.restore();
    St(e, c[Ih]);
    e.globalAlpha = 1;
    e.translate(0, -iq * a);
    e.save();
    e.translate(a * 80, a * 79.5);
    Tt(e, a * -73, a * -16.5, a * 145, a * 34, eb * a);
    e.restore();
    St(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : bd;
    e.translate(bu, Gh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    St(e, c[Gk]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    St(e, c[bu]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    St(e, c[qu]);
    e.globalAlpha = 1;
    e.translate(xq, -In * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    St(e, c[Jd], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    St(e, c[3], c[Zt], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    St(e, c[Lq], c[oe], _g * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    St(e, c[hd], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, Bl * a);
    e.save();
    e.translate(a * 78.5, a * 78);
    Tt(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    e.restore();
    St(e, c[qb]);
    e.globalAlpha = 1;
    e.translate(0, -lt * a);
    e.save();
    e.translate(a * 78.5, a * 78);
    Tt(e, a * -13.5, a * -oo, a * 27, a * 27, a * 6);
    e.restore();
    St(e, c[3], c[4], Oe * a);
    return d;
  }
  function gm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 168;
    d.height = I * a;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, rh * a);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    Tt(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    St(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    St(e, c[0]);
    Vt(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    St(e, c[qb]);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    Tt(e, a * -19.5, a * -8.5, a * 39, a * jr, a * Bl);
    e.restore();
    St(e, lh, c[3], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    St(e, undefined, c[dl], Vs * a);
    Vt(e, a * 78, a * 44.80000305175781, a * 42.44616584663204);
    St(e, undefined, c[3], a * 6);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    Tt(e, a * -19.5, a * -8.5, a * 39, a * 17, sd * a);
    e.restore();
    St(e, c[_]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    St(e, c[er]);
    Vt(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    St(e, c[zd], c[1], a * 4);
    Vt(e, a * 78, a * 44.80000305175781, a * 29.68164415931166);
    St(e, c[3], c[1], a * hr);
    Vt(e, a * 78, a * 44, a * 20);
    St(e, c[hr]);
    return d;
  }
  function um(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : sl;
    e.translate(a * 5, a * 5);
    Vt(e, a * 220, a * 201, a * 170.41713528867922);
    St(e, c[gl], c[Gk], a * ms);
    e.globalAlpha = sl;
    e.translate(a * -5, a * -5);
    Vt(e, a * 220, a * 201, a * 170.41713528867922);
    St(e, c[1], c[Nr], a * 6);
    Vt(e, a * 220, a * 201, a * 130);
    St(e, c[11], c[2], a * Ze);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    St(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    St(e, c[Eg], c[$q], Og * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, ra * a, a * 216, a * 307);
    e.closePath();
    St(e, c[un], c[6], a * zt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    St(e, c[5], c[jq], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    St(e, c[5], c[6], a * ge);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, Js * a, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    St(e, c[Eg], c[ya], a * oe);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142, a * 223);
    e.bezierCurveTo(a * 128, a * 213, a * 123, a * 214, a * 111, a * 223);
    e.closePath();
    St(e, c[10], c[Vq], a * $j);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 133);
    e.bezierCurveTo(a * 269, a * 188, a * 262, a * 229, a * 251, a * 253);
    e.bezierCurveTo(a * 288, a * 224, a * 273, a * 139, a * 252, a * 133);
    e.closePath();
    St(e, c[10], c[uj], mg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 203, a * 102);
    e.bezierCurveTo(a * 204, a * 136, a * 200, a * 159, a * 189, a * 174);
    e.bezierCurveTo(a * 223, a * 164, a * 219, a * 87, a * 205, a * 83);
    e.closePath();
    St(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196, a * 324);
    e.bezierCurveTo(a * 209, a * 239, a * 200, a * 219, a * 192, a * 196);
    e.bezierCurveTo(a * 229, a * 216, a * 219, a * 316, a * 198, a * 325);
    e.closePath();
    St(e, c[eb], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 266, a * 166);
    e.bezierCurveTo(a * 249, a * 154, a * 243, a * 161, a * 233, a * 167);
    St(e, Xl, c[ya], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 269, a * 192);
    e.bezierCurveTo(Sh * a, a * 183, a * 241, a * 186, a * 233, a * 192);
    St(e, undefined, c[_g], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 217);
    e.bezierCurveTo(a * 251, a * 211, a * 242, a * 213, a * 236, a * 218);
    St(e, Gn, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 141);
    e.bezierCurveTo(a * 191, a * 131, a * 187, a * 133, a * 176, a * 141);
    St(e, es, c[P], ya * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 230);
    e.bezierCurveTo(a * 193, a * 222, a * 185, a * 224, a * 177, a * 231);
    St(e, undefined, c[S], a * 6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 258);
    e.bezierCurveTo(a * 196, a * 247, a * 191, a * 250, a * 177, a * 259);
    St(e, undefined, c[Oe], a * Kl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 196);
    e.bezierCurveTo(a * 130, a * 186, a * 124, a * 187, a * 114, a * 195);
    St(e, undefined, c[6], a * Ml);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    St(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    St(e, Pa, c[6], $q * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * Cj, a * 216, a * 307);
    e.closePath();
    St(e, es, c[Ml], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    St(e, undefined, c[P], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    St(e, hl, c[kk], a * _g);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, Cj * a, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    St(e, Xl, c[6], S * a);
    Vt(e, a * 222, a * 199, a * 120.74767078498864);
    St(e, Pl, c[3], a * 40);
    Vt(e, a * 220, a * 200, a * 95.44108130150245);
    St(e, undefined, c[On], a * 15);
    Vt(e, a * 220, a * 201, a * 85);
    St(e, undefined, c[4], a * 10);
    e.globalAlpha = 0.5;
    Vt(e, a * 220, a * 201, a * 82);
    St(e, c[Hr]);
    e.globalAlpha = b ? 0.5 : ck;
    e.translate(a * 5, a * gs);
    Vt(e, a * 63, a * 136, a * 49.193495504995376);
    St(e, c[0], c[tj], eh * a);
    e.globalAlpha = ig;
    e.translate(-Sj * a, a * -5);
    Vt(e, a * 63, a * 136, a * 49.193495504995376);
    St(e, c[wo], c[2], a * aq);
    Vt(e, a * 63, a * 137, a * 25.632011235952593);
    St(e, c[Ts], c[2], a * Qt);
    return d;
  }
  function bm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 573;
    d.height = a * 350;
    if (Mg == c) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 336, a * 72);
      e.bezierCurveTo(a * 366, Vg * a, a * 426, a * 36, a * 497, a * 83);
      e.bezierCurveTo(a * 522, a * 85, a * 522, a * 85, a * 547, a * 87);
      e.bezierCurveTo(a * 476.5, a * 205, a * 476.5, a * 205, a * 406, a * 323);
      e.bezierCurveTo(a * 297.5, a * 319, a * 297.5, a * 319, a * 189, a * 315);
      e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 243);
      e.bezierCurveTo(a * 92, a * 140, a * 92, a * 140, a * 162, a * 37);
      e.bezierCurveTo(a * 173, a * 39, a * 173, a * 39, a * 184, a * 41);
      e.bezierCurveTo(a * 185, a * 38.5, a * 185, a * 38.5, a * 186, a * 36);
      e.bezierCurveTo(a * 323, $h * a, a * 322, a * 25, a * 337, a * 74);
      e.closePath();
      St(e, b[4], b[4], a * 35);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 168, a * 42);
    e.bezierCurveTo(Aq * a, a * 60, a * Ta, a * 60, a * 342, a * 78);
    e.bezierCurveTo(a * 443, a * 81.5, a * 443, a * 81.5, a * 544, a * 85);
    e.bezierCurveTo(a * 475, a * 204.5, a * 475, a * 204.5, a * 406, a * 324);
    e.bezierCurveTo(a * 297.5, a * 320, a * 297.5, a * 320, a * 189, a * 316);
    e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 242);
    e.closePath();
    St(e, b[Gk], b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188, a * 41);
    e.bezierCurveTo(a * 308, a * 15, a * 325, Xg * a, a * 337, a * 66);
    e.bezierCurveTo(a * 191, a * 305, a * 196, a * 286, a * 184, a * 307);
    e.bezierCurveTo(a * 175, a * 250, a * 90, a * 254, a * 52, a * 241);
    e.closePath();
    St(e, b[Ht], b[Cs], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 336, a * 71);
    e.bezierCurveTo(a * 375, a * k, a * 429, a * 50, a * 518, a * 92);
    e.bezierCurveTo(a * 455, a * 199.5, a * 455, a * 199.5, a * 392, a * 307);
    e.bezierCurveTo(a * 227, a * 301, a * 261, a * Uh, a * 188, a * 308);
    e.closePath();
    St(e, b[nd], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 357, a * 76);
    e.bezierCurveTo(a * 390, a * 67, a * 414, a * 86, a * 435, a * 104);
    e.bezierCurveTo(a * 417, a * 135, a * 417, a * 135, a * 399, a * 166);
    e.bezierCurveTo(a * 352, a * 140, a * 345, a * 139, a * 319, a * 142);
    e.closePath();
    St(e, b[Ou], b[Hn], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 309, a * 168);
    e.bezierCurveTo(a * 345, a * 163, a * 372, a * 180, a * 412, a * 203);
    St(e, b[On], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 54);
    e.bezierCurveTo(a * 305, a * 44, a * 307, a * 51, a * 311, a * 64);
    e.bezierCurveTo(a * 270.5, a * 129.5, a * 270.5, a * 129.5, a * 230, a * 195);
    e.bezierCurveTo(a * 221, a * 175, a * 203, a * 171, a * 186, a * 172);
    e.closePath();
    St(e, b[iu], b[3], tq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 292, a * 198);
    e.bezierCurveTo(a * 328, a * 191, a * 364, a * 211, a * 401, a * 237);
    St(e, b[On], b[Lq], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 245, a * 68);
    e.bezierCurveTo(a * 210, a * 72, a * 210, a * 72, a * 189, a * 69);
    St(e, b[2], b[nk], Gu * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 96);
    e.bezierCurveTo(a * 196, a * 97, a * 193, a * 97, a * 177, a * 92);
    St(e, b[2], b[dl], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 124);
    e.bezierCurveTo(a * 179, a * 123, a * 177, a * 124, a * 161, a * 119);
    St(e, b[nd], b[3], vo * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 183);
    e.bezierCurveTo(a * 184, a * 185, a * 203, a * 198, a * 219, a * 221);
    St(e, b[qi], b[3], $e * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 213);
    e.bezierCurveTo(a * 161, a * 214, a * 193, a * 227, a * 201, a * 249);
    St(e, b[2], b[3], a * Bs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 399, a * 257);
    e.bezierCurveTo(a * 287, a * 215, a * 280, a * 215, a * 263, a * 222);
    e.bezierCurveTo(a * 253, a * 238, a * 247, a * 245, a * 243, a * 254);
    e.bezierCurveTo(a * 267, a * 236, a * 292, a * 263, a * 377, a * 284);
    St(e, b[Cs], b[3], uh * a);
    return d;
  }
  function vm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 158;
    d.height = a * 201;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    St(e, c[Rg], c[yl], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    St(e, c[8], c[Da], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    St(e, c[8], c[ft], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    St(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    St(e, c[Fh], c[Je], vq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    St(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    St(e, c[Je], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    St(e, c[8], c[Fh], a * Ea);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    St(e, c[Hk], c[Hk], a * Lc);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    St(e, c[Mg], c[tk], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    St(e, c[wh], c[Nr], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    St(e, c[Fb], c[2], a * ge);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    St(e, c[1], c[2], Dd * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    St(e, c[3], c[qo], a * 4);
    Vt(e, a * 108.5, a * 148.421875, a * Hr);
    St(e, c[rh]);
    Vt(e, a * 106.5, a * 144.421875, a * 3);
    St(e, c[6]);
    Vt(e, a * 46.5, a * 148.421875, a * 9);
    St(e, c[un]);
    Vt(e, a * 44.5, a * 144.421875, Cs * a);
    St(e, c[$q]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 114.421875);
    e.bezierCurveTo(a * 121.5, a * 137.421875, a * 118.5, a * 133.421875, a * 108.5, a * 139.421875);
    e.bezierCurveTo(a * 94.5, a * 146.421875, a * 96.5, a * 148.421875, a * 95.5, a * 152.421875);
    St(e, c[Jd], c[fh], fd * a);
    e.beginPath();
    e.translate(0, a * -Ol);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.5, a * 131.421875);
    e.bezierCurveTo(a * 36.5, a * 140.421875, a * 39.5, a * 140.421875, a * 49.5, a * 143.421875);
    e.bezierCurveTo(a * 59.5, a * 149.421875, a * 57.5, a * 151.421875, a * 59.5, a * 155.421875);
    St(e, c[dl], c[X], $j * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 57.421875);
    e.bezierCurveTo(a * 101.5, a * 120.421875, a * 92.5, a * 127.421875, a * 78.5, a * 134.421875);
    e.bezierCurveTo(a * 51.5, a * 131.421875, a * 63.5, a * 102.421875, a * 70.5, a * 59.421875);
    e.bezierCurveTo(a * 75, a * 55.421875, a * 78.5, a * 52.421875, a * 79.5, a * 51.421875);
    e.closePath();
    St(e, c[4]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    St(e, c[3], c[X], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    St(e, c[3], c[On], a * co);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 154.421875);
    e.bezierCurveTo(a * 93.5, a * 163.921875, a * 93.5, a * 163.921875, a * 99.5, a * 173.421875);
    e.bezierCurveTo(a * 95, a * 177.421875, a * 95, a * 177.421875, a * 90.5, a * 181.421875);
    e.bezierCurveTo(a * 89, a * 167.921875, a * 89, a * 167.921875, a * 87.5, a * 154.421875);
    e.closePath();
    St(e, c[6], c[wk], a * br);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 81.5, a * 164.421875);
    e.bezierCurveTo(a * 84, a * 172.921875, a * 84, a * 172.921875, a * 86.5, a * 181.421875);
    e.bezierCurveTo(a * 82.5, a * 182.421875, a * 82.5, a * 182.421875, a * 78.5, a * 183.421875);
    e.closePath();
    St(e, c[6], c[O], Nj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 164.421875);
    e.bezierCurveTo(a * 73.5, a * 173.921875, a * 73.5, a * 173.921875, a * 74.5, a * 183.421875);
    e.bezierCurveTo(a * 70.5, a * 182.921875, a * 70.5, a * 182.921875, a * 66.5, a * 182.421875);
    e.closePath();
    St(e, c[6], c[wk], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65.5, a * 156.421875);
    e.bezierCurveTo(a * 65, a * 168.421875, a * 65, a * 168.421875, a * 64.5, a * 180.421875);
    e.bezierCurveTo(a * 58.5, a * 177.421875, a * 58.5, a * 177.421875, a * 52.5, a * 174.421875);
    e.closePath();
    St(e, c[6], c[Hg], a * Gl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    St(e, c[Mh], c[2], a * 4);
    return d;
  }
  function dm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 310;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 192);
    e.bezierCurveTo(a * 198, a * 202, a * 245, a * 203, a * 335, a * 194);
    e.bezierCurveTo(a * 336, a * 232, a * 326, a * 235, a * 232, a * 237);
    e.bezierCurveTo(a * 161, a * 235, a * 122, a * 235, a * 126, a * 193);
    e.closePath();
    St(e, c[Fj], c[Lu], a * Dd);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146, a * 239);
    e.bezierCurveTo(a * 174, a * 74, a * 287, a * 88, a * 320, a * 240);
    e.bezierCurveTo(a * 329, a * 231, a * 340, a * 219, a * 332, a * 115);
    e.bezierCurveTo(a * 330, a * 40, a * 144, a * 30, a * 129, a * 116);
    e.bezierCurveTo(a * 124, a * 217, a * 124, a * 228, a * 143, a * 237);
    e.closePath();
    St(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 193);
    e.bezierCurveTo(a * 173, a * 94, a * 209, a * pn, a * 228, a * 57);
    e.bezierCurveTo(a * 190, a * 112, a * 165, a * 115, a * 127, a * 184);
    e.closePath();
    St(e, Cr, c[Co], a * Dd);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 230, a * 57);
    e.bezierCurveTo(a * 266, a * 117, a * 310, a * 130, a * 332, a * 183);
    e.bezierCurveTo(a * 290, a * 112, a * 262, a * 109, a * 230, a * 56);
    e.closePath();
    St(e, Ct, c[1], a * Qt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 212);
    e.bezierCurveTo(a * 208, a * 224, a * 252, a * 219, a * 305, a * 212);
    e.bezierCurveTo(a * 267, a * 219, a * 204, a * 222, a * 155, a * 212);
    e.closePath();
    St(e, Ao, c[ck], a * cq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 239, a * 59);
    e.bezierCurveTo(a * 302, a * 72, a * 325, a * 84, a * 326, a * 115);
    e.bezierCurveTo(a * 289, a * 80, a * 270, a * 88, a * 253, a * 78);
    e.closePath();
    St(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 61);
    e.bezierCurveTo(a * 209, a * 70, a * 209, a * 70, a * 202, a * 79);
    e.bezierCurveTo(a * 173, a * 87, a * 162, a * 91, a * 137, a * 107);
    e.bezierCurveTo(a * 153, a * 78, a * 174, a * 67, a * 212, a * 62);
    e.closePath();
    St(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 125);
    e.bezierCurveTo(a * 218, a * 94, a * 238, a * 90, a * 281, a * 125);
    e.bezierCurveTo(a * 245, a * 89, a * 240, a * 80, a * 228, a * 67);
    e.bezierCurveTo(a * 207, a * 100, a * 192, a * 104, a * 177, a * 123);
    e.closePath();
    St(e, c[jg]);
    return d;
  }
  function cm() {
    var b = cx.time;
    if (ᐃΔ[285]) {
      Mo.drawImage(ᐃΔ[285][b][1], mq + 480, Qo + 190);
      Mo.drawImage(ᐃΔ[285][b][On], mq + 180, Qo - 430);
      Mo.drawImage(ᐃΔ[285][b][1], mq - 855, Qo + ma);
      Mo.drawImage(ᐃΔ[285][b][Gg], mq - 550, Qo - 300);
      Mo.drawImage(ᐃΔ[285][b][0], mq - 1020, Qo - 520);
    }
    if (ᐃΔ[108]) {
      Mo.drawImage(ᐃΔ[108][b][Mg], mq - 80, Qo - 640);
      Mo.drawImage(ᐃΔ[108][b][1], mq + 80, Qo + 490);
      Mo.drawImage(ᐃΔ[108][b][Od], mq - 180, Qo - 700);
      Mo.drawImage(ᐃΔ[108][b][0], mq + 550, Qo + 100);
      Mo.drawImage(ᐃΔ[108][b][er], mq + 450, Qo + 300);
      Mo.drawImage(ᐃΔ[108][b][1], mq + 780, Qo + 300);
      Mo.drawImage(ᐃΔ[108][b][2], mq + 980, Qo + 200);
      Mo.drawImage(ᐃΔ[108][b][fh], mq + 680, Qo + 600);
      Mo.drawImage(ᐃΔ[108][b][2], mq - 380, Qo + og);
      Mo.drawImage(ᐃΔ[108][b][2], mq + 280, Qo + 250);
    }
    if (ᐃΔ[110]) {
      Mo.drawImage(ᐃΔ[110][b][fg], mq - 590, Qo);
      Mo.drawImage(ᐃΔ[110][b][Md], mq + 120, Qo - 390);
      Mo.drawImage(ᐃΔ[110][b][0], mq - 270, Qo + 340);
    }
    if (ᐃΔ[109]) {
      Mo.drawImage(ᐃΔ[109][b][4], mq - 700, Qo - 600);
      Mo.drawImage(ᐃΔ[109][b][2], mq - 970, Qo - 250);
      Mo.drawImage(ᐃΔ[109][b][ul], mq - 720, Qo - 200);
      Mo.drawImage(ᐃΔ[109][b][2], mq - 1020, Qo + 340);
      Mo.drawImage(ᐃΔ[109][b][0], mq - 1120, Qo - et);
      Mo.drawImage(ᐃΔ[109][b][1], mq - 650, Qo - 330);
      Mo.drawImage(ᐃΔ[109][b][$j], mq - 495, Qo - 90);
      Mo.drawImage(ᐃΔ[109][b][3], mq - 520, Qo + 340);
      Mo.drawImage(ᐃΔ[109][b][Ht], mq + 830, Qo - 520);
    }
    ᐃΔ[413];
    if (dx && ff) {
      var c = dx.ⲆΔⲆ.x;
      var d = dx.ⲆΔⲆ.y;
      dx.ⲆΔⲆ.x = mq;
      dx.ⲆΔⲆ.y = Qo;
      var e = ff.time;
      ff.time = cx.time;
      var f;
      var g = cx.items;
      g[2].x = 400;
      g[2].y = 100;
      g[2].ⵠⲆⵠΔ(114);
      (f = g[1]).x = -500;
      f.y = mh;
      f.ΔΔⲆⲆ[0].x = f.x - 20.5;
      f.ΔΔⲆⲆ[0].y = f.y - 22.5;
      f.ΔΔⲆⲆ[1].x = f.x - 35.5;
      f.ΔΔⲆⲆ[1].y = f.y + 7.5;
      f.ΔΔⲆⲆ[il].x = f.x + 7.5;
      f.ΔΔⲆⲆ[2].y = f.y - 30;
      f.ΔΔⲆⲆ[3].x = f.x + 22.5;
      f.ΔΔⲆⲆ[3].y = f.y;
      f.ΔΔⲆⲆ[4].x = f.x - 7.5;
      f.ΔΔⲆⲆ[eh].y = f.y + 14.5;
      for (var h = Gk; f.info > h; h++) {
        f.ΔΔⲆⲆ[h].ⵠⲆⵠΔ(294);
      }
      (f = g[Ou]).x = 210;
      f.y = -290;
      f.ΔΔⲆⲆ[0].x = f.x - 20.5;
      f.ΔΔⲆⲆ[0].y = f.y - 22.5;
      f.ΔΔⲆⲆ[Ek].x = f.x - 35.5;
      f.ΔΔⲆⲆ[1].y = f.y + 7.5;
      f.ΔΔⲆⲆ[zd].x = f.x + 7.5;
      f.ΔΔⲆⲆ[qo].y = f.y - 30;
      f.ΔΔⲆⲆ[3].x = f.x + 22.5;
      f.ΔΔⲆⲆ[3].y = f.y;
      f.ΔΔⲆⲆ[4].x = f.x - 7.5;
      f.ΔΔⲆⲆ[Zt].y = f.y + 14.5;
      for (h = fg; f.info > h; h++) {
        f.ΔΔⲆⲆ[h].ⵠⲆⵠΔ(294);
      }
      g[et].x = 450;
      g[0].y = -100;
      g[0].ⵠⵠᐃΔᐃ(113);
      g[Aa].ᐃᐃⲆⵠⲆ();
      dx.ⲆΔⲆ.x = c;
      dx.ⲆΔⲆ.y = d;
      ff.time = e;
    }
  }
  function mm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 192;
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 42, a * 99);
    d.globalAlpha = 0.5;
    Tt(d, a * -7, a * -Dh, a * Eh, a * 39, a * 20);
    d.restore();
    St(d, b[yj]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 37, a * 94);
    Tt(d, -Ji * a, -Pn * a, a * pl, a * 37, a * 20);
    d.restore();
    St(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 136, a * 99);
    d.globalAlpha = 0.5;
    Tt(d, a * -84, a * -67, a * 168, a * 134, a * ek);
    d.restore();
    St(d, b[0], b[0], C * a);
    d.globalAlpha = sc;
    d.save();
    d.translate(a * 131, a * 94);
    Tt(d, a * -84, a * -67, a * 168, a * 134, a * gg);
    d.restore();
    St(d, b[2], b[2], a * 13);
    d.save();
    d.translate(a * 131, a * 94);
    Tt(d, a * -76, a * -61, a * 152, a * 122, a * f);
    d.restore();
    St(d, b[Qn], b[1], a * 8);
    d.save();
    d.translate(a * 168.5, a * 93.5);
    Tt(d, a * -30.5, a * -58.5, a * 61, a * 117, a * 20);
    d.restore();
    St(d, b[3], b[4], Kl * a);
    d.save();
    d.translate(a * 93.5, a * 95.5);
    Tt(d, a * -32, a * -59.5, a * 59, a * 119, a * 20);
    d.restore();
    St(d, b[3], b[4], $q * a);
    d.save();
    d.translate(a * 130.5, a * 94);
    Tt(d, a * -36, a * -67, a * 73, a * 134, a * 20);
    d.restore();
    St(d, b[3], b[ta], a * 8);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 133, a * 97);
    Tt(d, a * -83, a * -12, a * 160, a * 24, a * yj);
    d.restore();
    St(d, b[bu]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 133, a * 92);
    Tt(d, a * -83, -Bs * a, a * 160, a * 24, a * 0);
    d.restore();
    St(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 228, a * 99.5);
    d.globalAlpha = 0.5;
    Tt(d, -ko * a, a * -18.5, F * a, a * 37, Sk * a);
    d.restore();
    St(d, b[0]);
    d.globalAlpha = bs;
    d.save();
    d.translate(a * 223, a * 94.5);
    Tt(d, a * -Ks, a * -18.5, a * 10, a * 37, a * 20);
    d.restore();
    St(d, b[qo]);
    d.save();
    d.translate(a * 133.5, a * 175.5);
    d.globalAlpha = 0.5;
    Tt(d, a * -22.5, a * -6.5, a * 45, mn * a, a * jk);
    d.restore();
    St(d, b[qb]);
    d.globalAlpha = Co;
    d.save();
    d.translate(a * 128.5, a * 170.5);
    Tt(d, a * -22.5, a * -6.5, a * 45, mn * a, a * 20);
    d.restore();
    St(d, b[Nr]);
    return c;
  }
  function pm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 405;
    e.globalAlpha = 1;
    e.translate(a * Oe, Rl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.000030517578125, a * 162.03977966308594);
    e.bezierCurveTo(a * 125.00003051757812, a * 84.03977966308594, a * 108.50003051757812, a * 115.03977966308594, a * 178.00003051757812, a * 68.03977966308594);
    e.bezierCurveTo(a * 299.0000305175781, a * 146.53977966308594, a * 299.0000305175781, a * 146.53977966308594, a * 420.0000305175781, a * 225.03977966308594);
    e.bezierCurveTo(a * 400.0000305175781, a * 288.53977966308594, a * 400.0000305175781, a * 288.53977966308594, a * 380.0000305175781, a * 352.03977966308594);
    e.bezierCurveTo(a * 216.50003051757812, a * 345.53977966308594, a * 216.50003051757812, a * 345.53977966308594, a * 53.000030517578125, a * 339.03977966308594);
    e.closePath();
    St(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    St(e, c[Ah], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.000030517578125, a * 149.94886779785156);
    e.bezierCurveTo(a * 76.00003051757812, a * 67.94886779785156, a * 177.00003051757812, a * 40.94886779785156, a * 232.00003051757812, a * 45.94886779785156);
    e.bezierCurveTo(a * 316.0000305175781, a * 46.94886779785156, a * 359.0000305175781, a * 74.94886779785156, a * 428.0000305175781, a * 145.94886779785156);
    e.bezierCurveTo(a * 414.0000305175781, a * 73.94886779785156, a * 386.0000305175781, a * 68.94886779785156, a * 359.0000305175781, a * 43.94886779785156);
    e.bezierCurveTo(a * 295.0000305175781, a * 5.9488677978515625, a * 239.00003051757812, a * 10.948867797851562, a * 207.00003051757812, a * 10.948867797851562);
    e.bezierCurveTo(a * 121.00003051757812, a * 20.948867797851562, a * 104.00003051757812, a * 34.94886779785156, a * 45.000030517578125, a * 84.94886779785156);
    e.bezierCurveTo(a * 14.000030517578125, a * 128.94886779785156, a * 18.000030517578125, a * 142.94886779785156, a * 16.000030517578125, a * 151.94886779785156);
    e.closePath();
    St(e, c[Nj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    St(e, undefined, c[1], Ha * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 183.00003051757812, a * 320.03977966308594, a * 342.0000305175781, a * 306.03977966308594, a * 399.0000305175781, a * 286.03977966308594);
    e.bezierCurveTo(a * 420.0000305175781, a * 345.03977966308594, a * 410.0000305175781, a * 335.03977966308594, a * 415.0000305175781, a * 362.03977966308594);
    e.bezierCurveTo(a * 351.0000305175781, a * 384.03977966308594, a * 299.0000305175781, a * 389.03977966308594, a * 215.00003051757812, a * 391.03977966308594);
    e.bezierCurveTo(a * 128.00003051757812, a * 388.03977966308594, a * 69.00003051757812, a * 373.03977966308594, a * 39.000030517578125, a * 359.03977966308594);
    e.closePath();
    St(e, c[0], c[Kg], a * 13);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 327.03977966308594);
    e.bezierCurveTo(a * 203.00003051757812, a * 377.03977966308594, a * 331.0000305175781, a * 349.03977966308594, a * 410.0000305175781, a * 330.03977966308594);
    e.closePath();
    St(e, c[xq], c[Fb], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.000030517578125, a * 339.1306915283203);
    e.bezierCurveTo(a * 2.000030517578125, a * 280.1306915283203, a * 30.000030517578125, a * 219.1306915283203, a * 85.00003051757812, a * 167.1306915283203);
    e.bezierCurveTo(a * 174.00003051757812, a * 82.13069152832031, a * 241.00003051757812, a * 101.13069152832031, a * 284.0000305175781, a * 115.13069152832031);
    e.bezierCurveTo(a * 333.0000305175781, a * 134.1306915283203, a * 376.0000305175781, a * 177.1306915283203, a * 410.0000305175781, a * 247.1306915283203);
    e.bezierCurveTo(a * 439.0000305175781, a * 300.1306915283203, a * 442.0000305175781, a * 346.1306915283203, a * 430.0000305175781, a * 363.1306915283203);
    e.bezierCurveTo(a * 418.0000305175781, a * 366.1306915283203, a * 395.0000305175781, a * 295.1306915283203, a * 355.0000305175781, a * 223.1306915283203);
    e.bezierCurveTo(a * 299.0000305175781, a * 156.1306915283203, a * 262.0000305175781, a * 155.1306915283203, a * 215.00003051757812, a * 159.1306915283203);
    e.bezierCurveTo(a * 133.00003051757812, a * 171.1306915283203, a * 120.00003051757812, a * 193.1306915283203, a * 96.00003051757812, a * 221.1306915283203);
    e.bezierCurveTo(a * 49.000030517578125, a * 262.1306915283203, a * 47.000030517578125, a * 306.1306915283203, a * 38.000030517578125, a * 336.1306915283203);
    e.bezierCurveTo(a * 30.000030517578125, a * 349.1306915283203, a * 30.000030517578125, a * 349.1306915283203, a * 22.000030517578125, a * 362.1306915283203);
    e.closePath();
    St(e, c[2], c[1], rq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 128.03977966308594);
    e.bezierCurveTo(a * 315.0000305175781, a * 131.03977966308594, a * 349.0000305175781, a * 178.03977966308594, a * 386.0000305175781, a * 234.03977966308594);
    e.bezierCurveTo(a * 444.0000305175781, a * 329.03977966308594, a * 446.0000305175781, a * 354.03977966308594, a * 427.0000305175781, a * 373.03977966308594);
    e.bezierCurveTo(a * 389.0000305175781, a * 389.03977966308594, a * 399.0000305175781, a * 329.03977966308594, a * 361.0000305175781, a * 277.03977966308594);
    e.bezierCurveTo(a * 306.0000305175781, a * 191.03977966308594, a * 266.0000305175781, a * 183.03977966308594, a * 220.00003051757812, a * 181.03977966308594);
    e.bezierCurveTo(a * 138.00003051757812, a * 184.03977966308594, a * 123.00003051757812, a * 212.03977966308594, a * 89.00003051757812, a * 271.03977966308594);
    e.bezierCurveTo(a * 52.000030517578125, a * 349.03977966308594, a * 68.00003051757812, a * 364.03977966308594, a * 33.000030517578125, a * 369.03977966308594);
    e.bezierCurveTo(a * 6.000030517578125, a * 366.03977966308594, a * 5.000030517578125, a * 341.03977966308594, a * 26.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 60.000030517578125, a * 207.03977966308594, a * 100.00003051757812, a * 180.03977966308594, a * 113.00003051757812, a * 170.03977966308594);
    e.bezierCurveTo(a * 159.00003051757812, a * 132.03977966308594, a * 196.00003051757812, a * 133.03977966308594, a * 226.00003051757812, a * 129.03977966308594);
    e.closePath();
    St(e, c[xq], c[Co], a * 20);
    return d;
  }
  function Cm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(Md, a * 15);
    e.globalAlpha = b ? 0.5 : Kg;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    St(e, c[et]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, yk * a, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    St(e, Iq, c[sb], a * 11);
    e.translate(Gg, a * -5);
    e.globalAlpha = _;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    St(e, c[Lq], c[On], a * $k);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    St(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    St(e, Ct, c[2], a * $e);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    St(e, Gn, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    St(e, c[wh], c[ta], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    St(e, c[Mu], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    St(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * os, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    St(e, ri, c[ta], a * V);
    return d;
  }
  function Tm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 496;
    d.height = a * 520;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Gk, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19.000030517578125, a * 256.67613983154297);
    e.bezierCurveTo(a * 1.000030517578125, a * 332.67613983154297, a * 23.000030517578125, a * 404.67613983154297, a * 95.00003051757812, a * 463.67613983154297);
    e.bezierCurveTo(a * 128.00003051757812, a * 491.67613983154297, a * 165.00003051757812, a * 507.67613983154297, a * 194.00003051757812, a * 512.676139831543);
    e.bezierCurveTo(a * 280.0000305175781, a * 517.676139831543, a * 291.0000305175781, a * 516.676139831543, a * 342.0000305175781, a * 497.67613983154297);
    e.bezierCurveTo(a * 425.0000305175781, a * 454.67613983154297, a * 469.0000305175781, a * 392.67613983154297, a * 468.0000305175781, a * 300.67613983154297);
    e.bezierCurveTo(a * 408.5000305175781, a * 365.17613983154297, a * 408.5000305175781, a * 365.17613983154297, a * 349.0000305175781, a * 429.67613983154297);
    e.bezierCurveTo(a * 256.0000305175781, a * 473.67613983154297, a * 167.00003051757812, a * 459.67613983154297, a * 78.00003051757812, a * 384.67613983154297);
    e.closePath();
    St(e, c[Ih]);
    e.globalAlpha = Co;
    e.translate(0, a * -hh);
    Vt(e, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
    St(e, c[5], undefined, a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Fj, a * Wg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65.00003051757812, a * 263.4034118652344);
    e.bezierCurveTo(a * 109.00003051757812, a * 160.40341186523438, a * 185.00003051757812, a * 128.40341186523438, a * 222.00003051757812, a * 124.40341186523438);
    e.bezierCurveTo(a * 277.0000305175781, a * 116.40341186523438, a * 339.0000305175781, a * 134.40341186523438, a * 379.0000305175781, a * 195.40341186523438);
    e.bezierCurveTo(a * 409.0000305175781, a * 242.40341186523438, a * 416.0000305175781, a * 256.4034118652344, a * 428.0000305175781, a * 304.4034118652344);
    e.bezierCurveTo(a * 457.0000305175781, a * 203.40341186523438, a * 449.0000305175781, a * 183.40341186523438, a * 438.0000305175781, a * 162.40341186523438);
    e.bezierCurveTo(a * 381.0000305175781, a * 73.40341186523438, a * 360.0000305175781, a * 66.40341186523438, a * 257.0000305175781, a * 46.403411865234375);
    e.bezierCurveTo(a * 191.00003051757812, a * 45.403411865234375, a * 142.00003051757812, a * 65.40341186523438, a * 101.00003051757812, a * 115.40341186523438);
    e.closePath();
    St(e, c[fg]);
    e.globalAlpha = sl;
    var f = function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 496;
      c.height = a * 520;
      d.globalAlpha = Mg;
      d.translate(0, -Vq * a);
      Vt(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
      St(d, b[Fb], b[2], a * 14);
      d.globalCompositeOperation = "destination-out";
      Vt(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
      St(d, b[yj], b[0], a * 14);
      d.globalCompositeOperation = "source-over";
      return c;
    }(a, c);
    e.drawImage(f, 0, Md);
    e.translate(0, a * -10);
    Vt(e, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
    St(e, undefined, c[nd], zl * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * ie);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 325.0113830566406, a * 13.767059326171875);
    e.bezierCurveTo(a * 349.5113830566406, a * 25.767059326171875, a * 349.5113830566406, a * 25.767059326171875, a * 374.0113830566406, a * 37.767059326171875);
    e.bezierCurveTo(a * 384.0113830566406, a * 44.767059326171875, a * 383.0113830566406, a * 50.767059326171875, a * 368.0113830566406, a * 68.76705932617188);
    e.bezierCurveTo(a * 352.5113830566406, a * 91.26705932617188, a * 352.5113830566406, a * 91.26705932617188, a * 337.0113830566406, a * 113.76705932617188);
    e.bezierCurveTo(a * 328.0113830566406, a * 119.76705932617188, a * 328.0113830566406, a * 121.76705932617188, a * 312.0113830566406, a * 112.76705932617188);
    e.bezierCurveTo(a * 303.0113830566406, a * 108.26705932617188, a * 303.0113830566406, a * 108.26705932617188, a * 294.0113830566406, a * 103.76705932617188);
    e.bezierCurveTo(a * 287.0113830566406, a * 99.76705932617188, a * 293.0113830566406, a * 84.76705932617188, a * 297.0113830566406, a * 67.76705932617188);
    e.bezierCurveTo(a * 302.0113830566406, a * 47.767059326171875, a * 302.0113830566406, a * 47.767059326171875, a * 307.0113830566406, a * 27.767059326171875);
    e.bezierCurveTo(a * 310.0113830566406, a * 15.767059326171875, a * 317.0113830566406, a * 12.767059326171875, a * 323.0113830566406, a * 13.767059326171875);
    e.closePath();
    St(e, c[0], c[Qr], a * 12);
    e.globalAlpha = bd;
    e.translate(qu, a * -Bh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 325.0113830566406, a * 13.767059326171875);
    e.bezierCurveTo(a * 349.5113830566406, a * 25.767059326171875, a * 349.5113830566406, a * 25.767059326171875, a * 374.0113830566406, a * 37.767059326171875);
    e.bezierCurveTo(a * 384.0113830566406, a * 44.767059326171875, a * 383.0113830566406, a * 50.767059326171875, a * 368.0113830566406, a * 68.76705932617188);
    e.bezierCurveTo(a * 352.5113830566406, a * 91.26705932617188, a * 352.5113830566406, a * 91.26705932617188, a * 337.0113830566406, a * 113.76705932617188);
    e.bezierCurveTo(a * 328.0113830566406, a * 119.76705932617188, a * 328.0113830566406, a * 121.76705932617188, a * 312.0113830566406, a * 112.76705932617188);
    e.bezierCurveTo(a * 303.0113830566406, a * 108.26705932617188, a * 303.0113830566406, a * 108.26705932617188, a * 294.0113830566406, a * 103.76705932617188);
    e.bezierCurveTo(a * 287.0113830566406, a * 99.76705932617188, a * 293.0113830566406, a * 84.76705932617188, a * 297.0113830566406, a * 67.76705932617188);
    e.bezierCurveTo(a * 302.0113830566406, a * 47.767059326171875, a * 302.0113830566406, a * 47.767059326171875, a * 307.0113830566406, a * 27.767059326171875);
    e.bezierCurveTo(a * 310.0113830566406, a * 15.767059326171875, a * 317.0113830566406, a * 12.767059326171875, a * 323.0113830566406, a * 13.767059326171875);
    e.closePath();
    St(e, c[Ou], c[2], a * 12);
    e.globalAlpha = b ? 0.5 : Fb;
    e.translate(Rl, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403.0113830566406, a * 89.76705932617188);
    e.bezierCurveTo(a * 413.0113830566406, a * 76.76705932617188, a * 418.0113830566406, a * 79.76705932617188, a * 428.0113830566406, a * 92.76705932617188);
    e.bezierCurveTo(a * 435.0113830566406, a * 99.76705932617188, a * 435.0113830566406, a * 99.76705932617188, a * 442.0113830566406, a * 106.76705932617188);
    e.bezierCurveTo(a * 450.0113830566406, a * 116.76705932617188, a * 445.0113830566406, a * 119.76705932617188, a * 433.0113830566406, a * 128.76705932617188);
    e.bezierCurveTo(a * 408.0113830566406, a * 146.26705932617188, a * 408.0113830566406, a * 146.26705932617188, a * 383.0113830566406, a * 163.76705932617188);
    e.bezierCurveTo(a * 376.0113830566406, a * 166.76705932617188, a * 377.0113830566406, a * 165.76705932617188, a * 368.0113830566406, a * 156.76705932617188);
    e.bezierCurveTo(a * 359.0113830566406, a * 144.76705932617188, a * 359.0113830566406, a * 142.76705932617188, a * 367.0113830566406, a * 133.76705932617188);
    e.closePath();
    St(e, c[Ih], c[0], Vr * a);
    e.globalAlpha = Gt;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403.0113830566406, a * 89.76705932617188);
    e.bezierCurveTo(a * 413.0113830566406, a * 76.76705932617188, a * 418.0113830566406, a * 79.76705932617188, a * 428.0113830566406, a * 92.76705932617188);
    e.bezierCurveTo(a * 435.0113830566406, a * 99.76705932617188, a * 435.0113830566406, a * 99.76705932617188, a * 442.0113830566406, a * 106.76705932617188);
    e.bezierCurveTo(a * 450.0113830566406, a * 116.76705932617188, a * 445.0113830566406, a * 119.76705932617188, a * 433.0113830566406, a * 128.76705932617188);
    e.bezierCurveTo(a * 408.0113830566406, a * 146.26705932617188, a * 408.0113830566406, a * 146.26705932617188, a * 383.0113830566406, a * 163.76705932617188);
    e.bezierCurveTo(a * 376.0113830566406, a * 166.76705932617188, a * 377.0113830566406, a * 165.76705932617188, a * 368.0113830566406, a * 156.76705932617188);
    e.bezierCurveTo(a * 359.0113830566406, a * 144.76705932617188, a * 359.0113830566406, a * 142.76705932617188, a * 367.0113830566406, a * 133.76705932617188);
    e.closePath();
    St(e, c[eh], c[2], a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, Eg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.01138305664062, a * 1.767059326171875);
    e.bezierCurveTo(a * 246.51138305664062, a * 3.267059326171875, a * 246.51138305664062, a * 3.267059326171875, a * 265.0113830566406, a * 4.767059326171875);
    e.bezierCurveTo(a * 273.0113830566406, a * 5.767059326171875, a * 275.0113830566406, a * 11.767059326171875, a * 270.0113830566406, a * 27.767059326171875);
    e.bezierCurveTo(a * 264.0113830566406, a * 54.267059326171875, a * 264.0113830566406, a * 54.267059326171875, a * 258.0113830566406, a * 80.76705932617188);
    e.bezierCurveTo(a * 256.0113830566406, a * 92.76705932617188, a * 256.0113830566406, a * 94.76705932617188, a * 242.01138305664062, a * 93.76705932617188);
    e.bezierCurveTo(a * 226.01138305664062, a * 95.76705932617188, a * 225.01138305664062, a * 91.76705932617188, a * 225.01138305664062, a * 80.76705932617188);
    e.bezierCurveTo(a * 223.51138305664062, a * 50.267059326171875, a * 223.51138305664062, a * 50.267059326171875, a * 222.01138305664062, a * 19.767059326171875);
    e.bezierCurveTo(a * 219.01138305664062, a * 8.767059326171875, a * 224.01138305664062, a * 4.767059326171875, a * 227.01138305664062, a * 2.767059326171875);
    e.closePath();
    St(e, c[An], c[0], a * Ug);
    e.globalAlpha = ig;
    e.translate(sb, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.01138305664062, a * 1.767059326171875);
    e.bezierCurveTo(a * 246.51138305664062, a * 3.267059326171875, a * 246.51138305664062, a * 3.267059326171875, a * 265.0113830566406, a * 4.767059326171875);
    e.bezierCurveTo(a * 273.0113830566406, a * 5.767059326171875, a * 275.0113830566406, a * 11.767059326171875, a * 270.0113830566406, a * 27.767059326171875);
    e.bezierCurveTo(a * 264.0113830566406, a * 54.267059326171875, a * 264.0113830566406, a * 54.267059326171875, a * 258.0113830566406, a * 80.76705932617188);
    e.bezierCurveTo(a * 256.0113830566406, a * 92.76705932617188, a * 256.0113830566406, a * 94.76705932617188, a * 242.01138305664062, a * 93.76705932617188);
    e.bezierCurveTo(a * 226.01138305664062, a * 95.76705932617188, a * 225.01138305664062, a * 91.76705932617188, a * 225.01138305664062, a * 80.76705932617188);
    e.bezierCurveTo(a * 223.51138305664062, a * 50.267059326171875, a * 223.51138305664062, a * 50.267059326171875, a * 222.01138305664062, a * 19.767059326171875);
    e.bezierCurveTo(a * 219.01138305664062, a * 8.767059326171875, a * 224.01138305664062, a * 4.767059326171875, a * 227.01138305664062, a * 2.767059326171875);
    e.closePath();
    St(e, c[4], c[br], a * Bt);
    e.globalAlpha = b ? 0.5 : Gt;
    e.translate(Fj, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.01138305664062, a * 25.767059326171875);
    e.bezierCurveTo(a * 158.51138305664062, a * 19.767059326171875, a * 158.51138305664062, a * 19.767059326171875, a * 175.01138305664062, a * 13.767059326171875);
    e.bezierCurveTo(a * 188.01138305664062, a * 11.767059326171875, a * 188.01138305664062, a * 16.767059326171875, a * 191.01138305664062, a * 29.767059326171875);
    e.bezierCurveTo(a * 197.01138305664062, a * 60.267059326171875, a * 197.01138305664062, a * 60.267059326171875, a * 203.01138305664062, a * 90.76705932617188);
    e.bezierCurveTo(a * 206.01138305664062, a * 102.76705932617188, a * 196.01138305664062, a * 99.76705932617188, a * 181.01138305664062, a * 105.76705932617188);
    e.bezierCurveTo(a * 175.01138305664062, a * 108.76705932617188, a * 172.01138305664062, a * 104.76705932617188, a * 164.01138305664062, a * 84.76705932617188);
    e.bezierCurveTo(a * 152.51138305664062, a * 63.267059326171875, a * 152.51138305664062, a * 63.267059326171875, a * 141.01138305664062, a * 41.767059326171875);
    e.bezierCurveTo(a * 138.01138305664062, a * 35.767059326171875, a * 138.01138305664062, a * 29.767059326171875, a * 141.01138305664062, a * 27.767059326171875);
    e.closePath();
    St(e, c[0], c[yj], a * 12);
    e.globalAlpha = 1;
    e.translate(xq, -Ks * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.01138305664062, a * 25.767059326171875);
    e.bezierCurveTo(a * 158.51138305664062, a * 19.767059326171875, a * 158.51138305664062, a * 19.767059326171875, a * 175.01138305664062, a * 13.767059326171875);
    e.bezierCurveTo(a * 188.01138305664062, a * 11.767059326171875, a * 188.01138305664062, a * 16.767059326171875, a * 191.01138305664062, a * 29.767059326171875);
    e.bezierCurveTo(a * 197.01138305664062, a * 60.267059326171875, a * 197.01138305664062, a * 60.267059326171875, a * 203.01138305664062, a * 90.76705932617188);
    e.bezierCurveTo(a * 206.01138305664062, a * 102.76705932617188, a * 196.01138305664062, a * 99.76705932617188, a * 181.01138305664062, a * 105.76705932617188);
    e.bezierCurveTo(a * 175.01138305664062, a * 108.76705932617188, a * 172.01138305664062, a * 104.76705932617188, a * 164.01138305664062, a * 84.76705932617188);
    e.bezierCurveTo(a * 152.51138305664062, a * 63.267059326171875, a * 152.51138305664062, a * 63.267059326171875, a * 141.01138305664062, a * 41.767059326171875);
    e.bezierCurveTo(a * 138.01138305664062, a * 35.767059326171875, a * 138.01138305664062, a * 29.767059326171875, a * 141.01138305664062, a * 27.767059326171875);
    e.closePath();
    St(e, c[4], c[2], a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * rh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70.01138305664062, a * 76.76705932617188);
    e.bezierCurveTo(a * 83.01138305664062, a * 64.26705932617188, a * 83.01138305664062, a * 64.26705932617188, a * 96.01138305664062, a * 51.767059326171875);
    e.bezierCurveTo(a * 104.01138305664062, a * 44.767059326171875, a * 110.01138305664062, a * 51.767059326171875, a * 119.01138305664062, a * 66.76705932617188);
    e.bezierCurveTo(a * 135.01138305664062, a * 88.26705932617188, a * 135.01138305664062, a * 88.26705932617188, a * 151.01138305664062, a * 109.76705932617188);
    e.bezierCurveTo(a * 157.01138305664062, a * 119.76705932617188, a * 153.01138305664062, a * 122.76705932617188, a * 147.01138305664062, a * 129.76705932617188);
    e.bezierCurveTo(a * 138.01138305664062, a * 140.76705932617188, a * 136.01138305664062, a * 140.76705932617188, a * 122.01138305664062, a * 127.76705932617188);
    e.bezierCurveTo(a * 99.51138305664062, a * 110.26705932617188, a * 99.51138305664062, a * 110.26705932617188, a * 77.01138305664062, a * 92.76705932617188);
    e.bezierCurveTo(a * 66.01138305664062, a * 83.76705932617188, a * 66.01138305664062, a * 82.76705932617188, a * 69.01138305664062, a * 78.76705932617188);
    e.closePath();
    St(e, c[0], c[et], a * Qg);
    e.globalAlpha = 1;
    e.translate(0, a * -Ut);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70.01138305664062, a * 76.76705932617188);
    e.bezierCurveTo(a * 83.01138305664062, a * 64.26705932617188, a * 83.01138305664062, a * 64.26705932617188, a * 96.01138305664062, a * 51.767059326171875);
    e.bezierCurveTo(a * 104.01138305664062, a * 44.767059326171875, a * 110.01138305664062, a * 51.767059326171875, a * 119.01138305664062, a * 66.76705932617188);
    e.bezierCurveTo(a * 135.01138305664062, a * 88.26705932617188, a * 135.01138305664062, a * 88.26705932617188, a * 151.01138305664062, a * 109.76705932617188);
    e.bezierCurveTo(a * 157.01138305664062, a * 119.76705932617188, a * 153.01138305664062, a * 122.76705932617188, a * 147.01138305664062, a * 129.76705932617188);
    e.bezierCurveTo(a * 138.01138305664062, a * 140.76705932617188, a * 136.01138305664062, a * 140.76705932617188, a * 122.01138305664062, a * 127.76705932617188);
    e.bezierCurveTo(a * 99.51138305664062, a * 110.26705932617188, a * 99.51138305664062, a * 110.26705932617188, a * 77.01138305664062, a * 92.76705932617188);
    e.bezierCurveTo(a * 66.01138305664062, a * 83.76705932617188, a * 66.01138305664062, a * 82.76705932617188, a * 69.01138305664062, a * 78.76705932617188);
    e.closePath();
    St(e, c[4], c[Gl], a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.011383056640625, a * 126.76705932617188);
    e.bezierCurveTo(a * 22.011383056640625, a * 149.76705932617188, a * 22.011383056640625, a * 149.76705932617188, a * 11.011383056640625, a * 172.76705932617188);
    e.bezierCurveTo(a * 7.011383056640625, a * 184.76705932617188, a * 11.011383056640625, a * 189.76705932617188, a * 36.011383056640625, a * 195.76705932617188);
    e.bezierCurveTo(a * 61.011383056640625, a * 202.26705932617188, a * 61.011383056640625, a * 202.26705932617188, a * 86.01138305664062, a * 208.76705932617188);
    e.bezierCurveTo(a * 100.01138305664062, a * 214.76705932617188, a * 102.01138305664062, a * 203.76705932617188, a * 109.01138305664062, a * 189.76705932617188);
    e.bezierCurveTo(a * 117.01138305664062, a * 171.76705932617188, a * 116.01138305664062, a * 166.76705932617188, a * 97.01138305664062, a * 156.76705932617188);
    e.bezierCurveTo(a * 74.01138305664062, a * 140.76705932617188, a * 74.01138305664062, a * 140.76705932617188, a * 51.011383056640625, a * 124.76705932617188);
    e.bezierCurveTo(a * 42.011383056640625, a * 118.76705932617188, a * 37.011383056640625, a * 119.76705932617188, a * 33.011383056640625, a * 126.76705932617188);
    e.closePath();
    St(e, c[0], c[tj], a * 12);
    e.globalAlpha = 1;
    e.translate(0, a * -_j);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.011383056640625, a * 126.76705932617188);
    e.bezierCurveTo(a * 22.011383056640625, a * 149.76705932617188, a * 22.011383056640625, a * 149.76705932617188, a * 11.011383056640625, a * 172.76705932617188);
    e.bezierCurveTo(a * 7.011383056640625, a * 184.76705932617188, a * 11.011383056640625, a * 189.76705932617188, a * 36.011383056640625, a * 195.76705932617188);
    e.bezierCurveTo(a * 61.011383056640625, a * 202.26705932617188, a * 61.011383056640625, a * 202.26705932617188, a * 86.01138305664062, a * 208.76705932617188);
    e.bezierCurveTo(a * 100.01138305664062, a * 214.76705932617188, a * 102.01138305664062, a * 203.76705932617188, a * 109.01138305664062, a * 189.76705932617188);
    e.bezierCurveTo(a * 117.01138305664062, a * 171.76705932617188, a * 116.01138305664062, a * 166.76705932617188, a * 97.01138305664062, a * 156.76705932617188);
    e.bezierCurveTo(a * 74.01138305664062, a * 140.76705932617188, a * 74.01138305664062, a * 140.76705932617188, a * 51.011383056640625, a * 124.76705932617188);
    e.bezierCurveTo(a * 42.011383056640625, a * 118.76705932617188, a * 37.011383056640625, a * 119.76705932617188, a * 33.011383056640625, a * 126.76705932617188);
    e.closePath();
    St(e, c[nk], c[2], a * $k);
    e.globalAlpha = b ? 0.5 : Fb;
    e.translate(0, a * zr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.011383056640625, a * 229.76705932617188);
    e.bezierCurveTo(a * 45.511383056640625, a * 233.76705932617188, a * 45.511383056640625, a * 233.76705932617188, a * 78.01138305664062, a * 237.76705932617188);
    e.bezierCurveTo(a * 92.01138305664062, a * 239.76705932617188, a * 92.01138305664062, a * 246.76705932617188, a * 91.01138305664062, a * 257.7670593261719);
    e.bezierCurveTo(a * 92.01138305664062, a * 275.7670593261719, a * 91.01138305664062, a * 274.7670593261719, a * 68.01138305664062, a * 276.7670593261719);
    e.bezierCurveTo(a * 42.511383056640625, a * 279.7670593261719, a * 42.511383056640625, a * 279.7670593261719, a * 17.011383056640625, a * 282.7670593261719);
    e.bezierCurveTo(a * 2.011383056640625, a * 282.7670593261719, a * 3.011383056640625, a * 276.7670593261719, a * 2.011383056640625, a * 260.7670593261719);
    e.bezierCurveTo(a * 2.011383056640625, a * 231.76705932617188, a * 4.011383056640625, a * 232.76705932617188, a * 11.011383056640625, a * 230.76705932617188);
    e.closePath();
    St(e, c[sb], c[Gg], a * 12);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.011383056640625, a * 229.76705932617188);
    e.bezierCurveTo(a * 45.511383056640625, a * 233.76705932617188, a * 45.511383056640625, a * 233.76705932617188, a * 78.01138305664062, a * 237.76705932617188);
    e.bezierCurveTo(a * 92.01138305664062, a * 239.76705932617188, a * 92.01138305664062, a * 246.76705932617188, a * 91.01138305664062, a * 257.7670593261719);
    e.bezierCurveTo(a * 92.01138305664062, a * 275.7670593261719, a * 91.01138305664062, a * 274.7670593261719, a * 68.01138305664062, a * 276.7670593261719);
    e.bezierCurveTo(a * 42.511383056640625, a * 279.7670593261719, a * 42.511383056640625, a * 279.7670593261719, a * 17.011383056640625, a * 282.7670593261719);
    e.bezierCurveTo(a * 2.011383056640625, a * 282.7670593261719, a * 3.011383056640625, a * 276.7670593261719, a * 2.011383056640625, a * 260.7670593261719);
    e.bezierCurveTo(a * 2.011383056640625, a * 231.76705932617188, a * 4.011383056640625, a * 232.76705932617188, a * 11.011383056640625, a * 230.76705932617188);
    e.closePath();
    St(e, c[cq], c[qo], a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Ah, a * Bh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.01138305664062, a * 329.7670593261719);
    e.bezierCurveTo(a * 68.51138305664062, a * 343.7670593261719, a * 68.51138305664062, a * 343.7670593261719, a * 40.011383056640625, a * 357.7670593261719);
    e.bezierCurveTo(a * 29.011383056640625, a * 360.7670593261719, a * 27.011383056640625, a * 361.7670593261719, a * 20.011383056640625, a * 346.7670593261719);
    e.bezierCurveTo(a * 16.511383056640625, a * 336.2670593261719, a * 16.511383056640625, a * 336.2670593261719, a * 13.011383056640625, a * 325.7670593261719);
    e.bezierCurveTo(a * 10.011383056640625, a * 307.7670593261719, a * 18.011383056640625, a * 312.7670593261719, a * 34.011383056640625, a * 306.7670593261719);
    e.bezierCurveTo(a * 59.511383056640625, a * 302.2670593261719, a * 59.511383056640625, a * 302.2670593261719, a * 85.01138305664062, a * 297.7670593261719);
    e.bezierCurveTo(a * 97.01138305664062, a * 294.7670593261719, a * 100.01138305664062, a * 297.7670593261719, a * 100.01138305664062, a * 307.7670593261719);
    e.bezierCurveTo(a * 105.01138305664062, a * 326.7670593261719, a * 103.01138305664062, a * 325.7670593261719, a * 97.01138305664062, a * 329.7670593261719);
    e.closePath();
    St(e, c[Aa], c[0], Gu * a);
    e.globalAlpha = 1;
    e.translate(tj, -Pg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.01138305664062, a * 329.7670593261719);
    e.bezierCurveTo(a * 68.51138305664062, a * 343.7670593261719, a * 68.51138305664062, a * 343.7670593261719, a * 40.011383056640625, a * 357.7670593261719);
    e.bezierCurveTo(a * 29.011383056640625, a * 360.7670593261719, a * 27.011383056640625, a * 361.7670593261719, a * 20.011383056640625, a * 346.7670593261719);
    e.bezierCurveTo(a * 16.511383056640625, a * 336.2670593261719, a * 16.511383056640625, a * 336.2670593261719, a * 13.011383056640625, a * 325.7670593261719);
    e.bezierCurveTo(a * 10.011383056640625, a * 307.7670593261719, a * 18.011383056640625, a * 312.7670593261719, a * 34.011383056640625, a * 306.7670593261719);
    e.bezierCurveTo(a * 59.511383056640625, a * 302.2670593261719, a * 59.511383056640625, a * 302.2670593261719, a * 85.01138305664062, a * 297.7670593261719);
    e.bezierCurveTo(a * 97.01138305664062, a * 294.7670593261719, a * 100.01138305664062, a * 297.7670593261719, a * 100.01138305664062, a * 307.7670593261719);
    e.bezierCurveTo(a * 105.01138305664062, a * 326.7670593261719, a * 103.01138305664062, a * 325.7670593261719, a * 97.01138305664062, a * 329.7670593261719);
    e.closePath();
    St(e, c[oe], c[2], a * $g);
    e.globalAlpha = b ? 0.5 : sc;
    e.translate(qb, a * Pg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 394.0113830566406, a * 181.76705932617188);
    e.bezierCurveTo(a * 426.5113830566406, a * 166.76705932617188, a * 426.5113830566406, a * 166.76705932617188, a * 459.0113830566406, a * 151.76705932617188);
    e.bezierCurveTo(a * 469.0113830566406, a * 152.76705932617188, a * 469.0113830566406, a * 155.76705932617188, a * 472.0113830566406, a * 165.76705932617188);
    e.bezierCurveTo(a * 476.0113830566406, a * 177.26705932617188, a * 476.0113830566406, a * 177.26705932617188, a * 480.0113830566406, a * 188.76705932617188);
    e.bezierCurveTo(a * 483.0113830566406, a * 199.76705932617188, a * 480.0113830566406, a * 200.76705932617188, a * 460.0113830566406, a * 205.76705932617188);
    e.bezierCurveTo(a * 433.5113830566406, a * 210.26705932617188, a * 433.5113830566406, a * 210.26705932617188, a * 407.0113830566406, a * 214.76705932617188);
    e.bezierCurveTo(a * 395.0113830566406, a * 218.76705932617188, a * 397.0113830566406, a * 211.76705932617188, a * 393.0113830566406, a * 202.76705932617188);
    e.bezierCurveTo(a * 387.0113830566406, a * 188.76705932617188, a * 387.0113830566406, a * 187.76705932617188, a * 394.0113830566406, a * 181.76705932617188);
    e.closePath();
    St(e, c[xq], c[yj], Bs * a);
    e.globalAlpha = Co;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 394.0113830566406, a * 181.76705932617188);
    e.bezierCurveTo(a * 426.5113830566406, a * 166.76705932617188, a * 426.5113830566406, a * 166.76705932617188, a * 459.0113830566406, a * 151.76705932617188);
    e.bezierCurveTo(a * 469.0113830566406, a * 152.76705932617188, a * 469.0113830566406, a * 155.76705932617188, a * 472.0113830566406, a * 165.76705932617188);
    e.bezierCurveTo(a * 476.0113830566406, a * 177.26705932617188, a * 476.0113830566406, a * 177.26705932617188, a * 480.0113830566406, a * 188.76705932617188);
    e.bezierCurveTo(a * 483.0113830566406, a * 199.76705932617188, a * 480.0113830566406, a * 200.76705932617188, a * 460.0113830566406, a * 205.76705932617188);
    e.bezierCurveTo(a * 433.5113830566406, a * 210.26705932617188, a * 433.5113830566406, a * 210.26705932617188, a * 407.0113830566406, a * 214.76705932617188);
    e.bezierCurveTo(a * 395.0113830566406, a * 218.76705932617188, a * 397.0113830566406, a * 211.76705932617188, a * 393.0113830566406, a * 202.76705932617188);
    e.bezierCurveTo(a * 387.0113830566406, a * 188.76705932617188, a * 387.0113830566406, a * 187.76705932617188, a * 394.0113830566406, a * 181.76705932617188);
    e.closePath();
    St(e, c[Nh], c[2], $k * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Qr, a * Zg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 411.0113830566406, a * 234.76705932617188);
    e.bezierCurveTo(a * 446.0113830566406, a * 233.26705932617188, a * 446.0113830566406, a * 233.26705932617188, a * 481.0113830566406, a * 231.76705932617188);
    e.bezierCurveTo(a * 491.0113830566406, a * 232.76705932617188, a * 493.0113830566406, a * 239.76705932617188, a * 491.0113830566406, a * 251.76705932617188);
    e.bezierCurveTo(a * 490.0113830566406, a * 263.7670593261719, a * 490.0113830566406, a * 263.7670593261719, a * 489.0113830566406, a * 275.7670593261719);
    e.bezierCurveTo(a * 487.0113830566406, a * 283.7670593261719, a * 483.0113830566406, a * 284.7670593261719, a * 464.0113830566406, a * 280.7670593261719);
    e.bezierCurveTo(a * 437.0113830566406, a * 273.7670593261719, a * 437.0113830566406, a * 273.7670593261719, a * 410.0113830566406, a * 266.7670593261719);
    e.bezierCurveTo(a * 400.0113830566406, a * 261.7670593261719, a * 401.0113830566406, a * 259.7670593261719, a * 402.0113830566406, a * 249.76705932617188);
    e.bezierCurveTo(a * 401.0113830566406, a * 237.76705932617188, a * 403.0113830566406, a * 235.76705932617188, a * 408.0113830566406, a * 234.76705932617188);
    e.closePath();
    St(e, c[Rl], c[0], a * ca);
    e.globalAlpha = bs;
    e.translate(Rl, a * -Ij);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 411.0113830566406, a * 234.76705932617188);
    e.bezierCurveTo(a * 446.0113830566406, a * 233.26705932617188, a * 446.0113830566406, a * 233.26705932617188, a * 481.0113830566406, a * 231.76705932617188);
    e.bezierCurveTo(a * 491.0113830566406, a * 232.76705932617188, a * 493.0113830566406, a * 239.76705932617188, a * 491.0113830566406, a * 251.76705932617188);
    e.bezierCurveTo(a * 490.0113830566406, a * 263.7670593261719, a * 490.0113830566406, a * 263.7670593261719, a * 489.0113830566406, a * 275.7670593261719);
    e.bezierCurveTo(a * 487.0113830566406, a * 283.7670593261719, a * 483.0113830566406, a * 284.7670593261719, a * 464.0113830566406, a * 280.7670593261719);
    e.bezierCurveTo(a * 437.0113830566406, a * 273.7670593261719, a * 437.0113830566406, a * 273.7670593261719, a * 410.0113830566406, a * 266.7670593261719);
    e.bezierCurveTo(a * 400.0113830566406, a * 261.7670593261719, a * 401.0113830566406, a * 259.7670593261719, a * 402.0113830566406, a * 249.76705932617188);
    e.bezierCurveTo(a * 401.0113830566406, a * 237.76705932617188, a * 403.0113830566406, a * 235.76705932617188, a * 408.0113830566406, a * 234.76705932617188);
    e.closePath();
    St(e, c[4], c[Ht], a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 400.0113830566406, a * 290.7670593261719);
    e.bezierCurveTo(a * 437.0113830566406, a * 301.2670593261719, a * 437.0113830566406, a * 301.2670593261719, a * 474.0113830566406, a * 311.7670593261719);
    e.bezierCurveTo(a * 484.0113830566406, a * 319.7670593261719, a * 481.0113830566406, a * 322.7670593261719, a * 474.0113830566406, a * 335.7670593261719);
    e.bezierCurveTo(a * 465.5113830566406, a * 354.7670593261719, a * 465.5113830566406, a * 354.7670593261719, a * 457.0113830566406, a * 373.7670593261719);
    e.bezierCurveTo(a * 449.0113830566406, a * 386.7670593261719, a * 444.0113830566406, a * 384.7670593261719, a * 427.0113830566406, a * 370.7670593261719);
    e.bezierCurveTo(a * 403.0113830566406, a * 354.7670593261719, a * 403.0113830566406, a * 354.7670593261719, a * 379.0113830566406, a * 338.7670593261719);
    e.bezierCurveTo(a * 371.0113830566406, a * 327.7670593261719, a * 373.0113830566406, a * 323.7670593261719, a * 377.0113830566406, a * 313.7670593261719);
    e.bezierCurveTo(a * 386.0113830566406, a * 292.7670593261719, a * 393.0113830566406, a * 288.7670593261719, a * 398.0113830566406, a * 291.7670593261719);
    e.closePath();
    St(e, c[0], c[gl], a * 12);
    e.globalAlpha = Gt;
    e.translate(tj, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 400.0113830566406, a * 290.7670593261719);
    e.bezierCurveTo(a * 437.0113830566406, a * 301.2670593261719, a * 437.0113830566406, a * 301.2670593261719, a * 474.0113830566406, a * 311.7670593261719);
    e.bezierCurveTo(a * 484.0113830566406, a * 319.7670593261719, a * 481.0113830566406, a * 322.7670593261719, a * 474.0113830566406, a * 335.7670593261719);
    e.bezierCurveTo(a * 465.5113830566406, a * 354.7670593261719, a * 465.5113830566406, a * 354.7670593261719, a * 457.0113830566406, a * 373.7670593261719);
    e.bezierCurveTo(a * 449.0113830566406, a * 386.7670593261719, a * 444.0113830566406, a * 384.7670593261719, a * 427.0113830566406, a * 370.7670593261719);
    e.bezierCurveTo(a * 403.0113830566406, a * 354.7670593261719, a * 403.0113830566406, a * 354.7670593261719, a * 379.0113830566406, a * 338.7670593261719);
    e.bezierCurveTo(a * 371.0113830566406, a * 327.7670593261719, a * 373.0113830566406, a * 323.7670593261719, a * 377.0113830566406, a * 313.7670593261719);
    e.bezierCurveTo(a * 386.0113830566406, a * 292.7670593261719, a * 393.0113830566406, a * 288.7670593261719, a * 398.0113830566406, a * 291.7670593261719);
    e.closePath();
    St(e, c[Xu], c[br], a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * Bh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 366.0113830566406, a * 361.2216033935547);
    e.bezierCurveTo(a * 393.0113830566406, a * 383.2216033935547, a * 393.0113830566406, a * 383.2216033935547, a * 420.0113830566406, a * 405.2216033935547);
    e.bezierCurveTo(a * 427.0113830566406, a * 414.2216033935547, a * 425.0113830566406, a * 417.2216033935547, a * 413.0113830566406, a * 428.2216033935547);
    e.bezierCurveTo(a * 405.5113830566406, a * 435.2216033935547, a * 405.5113830566406, a * 435.2216033935547, a * 398.0113830566406, a * 442.2216033935547);
    e.bezierCurveTo(a * 388.0113830566406, a * 451.2216033935547, a * 385.0113830566406, a * 445.2216033935547, a * 373.0113830566406, a * 428.2216033935547);
    e.bezierCurveTo(a * 358.5113830566406, a * 408.2216033935547, a * 358.5113830566406, a * 408.2216033935547, a * 344.0113830566406, a * 388.2216033935547);
    e.bezierCurveTo(a * 337.0113830566406, a * 378.2216033935547, a * 342.0113830566406, a * 377.2216033935547, a * 347.0113830566406, a * 371.2216033935547);
    e.bezierCurveTo(a * 359.0113830566406, a * 359.2216033935547, a * 361.0113830566406, a * 358.2216033935547, a * 364.0113830566406, a * 361.2216033935547);
    e.closePath();
    St(e, c[0], c[bu], a * Ug);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 366.0113830566406, a * 361.2216033935547);
    e.bezierCurveTo(a * 393.0113830566406, a * 383.2216033935547, a * 393.0113830566406, a * 383.2216033935547, a * 420.0113830566406, a * 405.2216033935547);
    e.bezierCurveTo(a * 427.0113830566406, a * 414.2216033935547, a * 425.0113830566406, a * 417.2216033935547, a * 413.0113830566406, a * 428.2216033935547);
    e.bezierCurveTo(a * 405.5113830566406, a * 435.2216033935547, a * 405.5113830566406, a * 435.2216033935547, a * 398.0113830566406, a * 442.2216033935547);
    e.bezierCurveTo(a * 388.0113830566406, a * 451.2216033935547, a * 385.0113830566406, a * 445.2216033935547, a * 373.0113830566406, a * 428.2216033935547);
    e.bezierCurveTo(a * 358.5113830566406, a * 408.2216033935547, a * 358.5113830566406, a * 408.2216033935547, a * 344.0113830566406, a * 388.2216033935547);
    e.bezierCurveTo(a * 337.0113830566406, a * 378.2216033935547, a * 342.0113830566406, a * 377.2216033935547, a * 347.0113830566406, a * 371.2216033935547);
    e.bezierCurveTo(a * 359.0113830566406, a * 359.2216033935547, a * 361.0113830566406, a * 358.2216033935547, a * 364.0113830566406, a * 361.2216033935547);
    e.closePath();
    St(e, c[yn], c[qi], a * 12);
    e.globalAlpha = b ? 0.5 : sl;
    e.translate(qu, a * rh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 323.0113830566406, a * 393.2216033935547);
    e.bezierCurveTo(a * 338.0113830566406, a * 424.7216033935547, a * 338.0113830566406, a * 424.7216033935547, a * 353.0113830566406, a * 456.2216033935547);
    e.bezierCurveTo(a * 355.0113830566406, a * 467.2216033935547, a * 354.0113830566406, a * 469.2216033935547, a * 336.0113830566406, a * 475.2216033935547);
    e.bezierCurveTo(a * 326.0113830566406, a * 478.2216033935547, a * 326.0113830566406, a * 478.2216033935547, a * 316.0113830566406, a * 481.2216033935547);
    e.bezierCurveTo(a * 304.0113830566406, a * 484.2216033935547, a * 304.0113830566406, a * 477.2216033935547, a * 301.0113830566406, a * 454.2216033935547);
    e.bezierCurveTo(a * 295.5113830566406, a * 429.2216033935547, a * 295.5113830566406, a * 429.2216033935547, a * 290.0113830566406, a * 404.2216033935547);
    e.bezierCurveTo(a * 287.0113830566406, a * 396.2216033935547, a * 297.0113830566406, a * 394.2216033935547, a * 303.0113830566406, a * 392.2216033935547);
    e.bezierCurveTo(a * 316.0113830566406, a * 387.2216033935547, a * 318.0113830566406, a * 387.2216033935547, a * 323.0113830566406, a * 394.2216033935547);
    e.closePath();
    St(e, c[Md], c[Gk], Vr * a);
    e.globalAlpha = Co;
    e.translate(qu, a * -ul);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 323.0113830566406, a * 393.2216033935547);
    e.bezierCurveTo(a * 338.0113830566406, a * 424.7216033935547, a * 338.0113830566406, a * 424.7216033935547, a * 353.0113830566406, a * 456.2216033935547);
    e.bezierCurveTo(a * 355.0113830566406, a * 467.2216033935547, a * 354.0113830566406, a * 469.2216033935547, a * 336.0113830566406, a * 475.2216033935547);
    e.bezierCurveTo(a * 326.0113830566406, a * 478.2216033935547, a * 326.0113830566406, a * 478.2216033935547, a * 316.0113830566406, a * 481.2216033935547);
    e.bezierCurveTo(a * 304.0113830566406, a * 484.2216033935547, a * 304.0113830566406, a * 477.2216033935547, a * 301.0113830566406, a * 454.2216033935547);
    e.bezierCurveTo(a * 295.5113830566406, a * 429.2216033935547, a * 295.5113830566406, a * 429.2216033935547, a * 290.0113830566406, a * 404.2216033935547);
    e.bezierCurveTo(a * 287.0113830566406, a * 396.2216033935547, a * 297.0113830566406, a * 394.2216033935547, a * 303.0113830566406, a * 392.2216033935547);
    e.bezierCurveTo(a * 316.0113830566406, a * 387.2216033935547, a * 318.0113830566406, a * 387.2216033935547, a * 323.0113830566406, a * 394.2216033935547);
    e.closePath();
    St(e, c[Zt], c[bq], a * 12);
    e.globalAlpha = b ? 0.5 : sc;
    e.translate(Md, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 270.0113830566406, a * 413.2216033935547);
    e.bezierCurveTo(a * 271.0113830566406, a * 445.7216033935547, a * 271.0113830566406, a * 445.7216033935547, a * 272.0113830566406, a * 478.2216033935547);
    e.bezierCurveTo(a * 273.0113830566406, a * 490.2216033935547, a * 267.0113830566406, a * 493.2216033935547, a * 249.01138305664062, a * 490.2216033935547);
    e.bezierCurveTo(a * 222.01138305664062, a * 492.2216033935547, a * 220.01138305664062, a * 485.2216033935547, a * 225.01138305664062, a * 467.2216033935547);
    e.bezierCurveTo(a * 230.51138305664062, a * 440.2216033935547, a * 230.51138305664062, a * 440.2216033935547, a * 236.01138305664062, a * 413.2216033935547);
    e.bezierCurveTo(a * 237.01138305664062, a * 405.2216033935547, a * 238.01138305664062, a * 404.2216033935547, a * 253.01138305664062, a * 403.2216033935547);
    e.bezierCurveTo(a * 269.0113830566406, a * 405.2216033935547, a * 270.0113830566406, a * 407.2216033935547, a * 269.0113830566406, a * 412.2216033935547);
    e.closePath();
    St(e, c[0], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(Qr, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 270.0113830566406, a * 413.2216033935547);
    e.bezierCurveTo(a * 271.0113830566406, a * 445.7216033935547, a * 271.0113830566406, a * 445.7216033935547, a * 272.0113830566406, a * 478.2216033935547);
    e.bezierCurveTo(a * 273.0113830566406, a * 490.2216033935547, a * 267.0113830566406, a * 493.2216033935547, a * 249.01138305664062, a * 490.2216033935547);
    e.bezierCurveTo(a * 222.01138305664062, a * 492.2216033935547, a * 220.01138305664062, a * 485.2216033935547, a * 225.01138305664062, a * 467.2216033935547);
    e.bezierCurveTo(a * 230.51138305664062, a * 440.2216033935547, a * 230.51138305664062, a * 440.2216033935547, a * 236.01138305664062, a * 413.2216033935547);
    e.bezierCurveTo(a * 237.01138305664062, a * 405.2216033935547, a * 238.01138305664062, a * 404.2216033935547, a * 253.01138305664062, a * 403.2216033935547);
    e.bezierCurveTo(a * 269.0113830566406, a * 405.2216033935547, a * 270.0113830566406, a * 407.2216033935547, a * 269.0113830566406, a * 412.2216033935547);
    e.closePath();
    St(e, c[4], c[Od], a * 12);
    e.globalAlpha = b ? 0.5 : ig;
    e.translate(An, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207.01138305664062, a * 406.2216033935547);
    e.bezierCurveTo(a * 197.51138305664062, a * 440.7216033935547, a * 197.51138305664062, a * 440.7216033935547, a * 188.01138305664062, a * 475.2216033935547);
    e.bezierCurveTo(a * 184.01138305664062, a * 485.2216033935547, a * 179.01138305664062, a * 491.2216033935547, a * 152.01138305664062, a * 477.2216033935547);
    e.bezierCurveTo(a * 136.51138305664062, a * 469.7216033935547, a * 136.51138305664062, a * 469.7216033935547, a * 121.01138305664062, a * 462.2216033935547);
    e.bezierCurveTo(a * 109.01138305664062, a * 453.2216033935547, a * 117.01138305664062, a * 447.2216033935547, a * 133.01138305664062, a * 427.2216033935547);
    e.bezierCurveTo(a * 146.51138305664062, a * 406.7216033935547, a * 146.51138305664062, a * 406.7216033935547, a * 160.01138305664062, a * 386.2216033935547);
    e.bezierCurveTo(a * 163.01138305664062, a * 377.2216033935547, a * 168.01138305664062, a * 378.2216033935547, a * 187.01138305664062, a * 387.2216033935547);
    e.bezierCurveTo(a * 206.01138305664062, a * 395.2216033935547, a * 208.01138305664062, a * 398.2216033935547, a * 207.01138305664062, a * 405.2216033935547);
    e.closePath();
    St(e, c[0], c[sb], a * 12);
    e.globalAlpha = Co;
    e.translate(Rl, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207.01138305664062, a * 406.2216033935547);
    e.bezierCurveTo(a * 197.51138305664062, a * 440.7216033935547, a * 197.51138305664062, a * 440.7216033935547, a * 188.01138305664062, a * 475.2216033935547);
    e.bezierCurveTo(a * 184.01138305664062, a * 485.2216033935547, a * 179.01138305664062, a * 491.2216033935547, a * 152.01138305664062, a * 477.2216033935547);
    e.bezierCurveTo(a * 136.51138305664062, a * 469.7216033935547, a * 136.51138305664062, a * 469.7216033935547, a * 121.01138305664062, a * 462.2216033935547);
    e.bezierCurveTo(a * 109.01138305664062, a * 453.2216033935547, a * 117.01138305664062, a * 447.2216033935547, a * 133.01138305664062, a * 427.2216033935547);
    e.bezierCurveTo(a * 146.51138305664062, a * 406.7216033935547, a * 146.51138305664062, a * 406.7216033935547, a * 160.01138305664062, a * 386.2216033935547);
    e.bezierCurveTo(a * 163.01138305664062, a * 377.2216033935547, a * 168.01138305664062, a * 378.2216033935547, a * 187.01138305664062, a * 387.2216033935547);
    e.bezierCurveTo(a * 206.01138305664062, a * 395.2216033935547, a * 208.01138305664062, a * 398.2216033935547, a * 207.01138305664062, a * 405.2216033935547);
    e.closePath();
    St(e, c[3], c[2], ca * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Ah, a * ie);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130.01138305664062, a * 375.2216033935547);
    e.bezierCurveTo(a * 109.51138305664062, a * 400.7216033935547, a * 109.51138305664062, a * 400.7216033935547, a * 89.01138305664062, a * 426.2216033935547);
    e.bezierCurveTo(a * 82.01138305664062, a * 435.2216033935547, a * 77.01138305664062, a * 435.2216033935547, a * 62.011383056640625, a * 417.2216033935547);
    e.bezierCurveTo(a * 43.011383056640625, a * 397.2216033935547, a * 47.011383056640625, a * 395.2216033935547, a * 62.011383056640625, a * 382.2216033935547);
    e.bezierCurveTo(a * 84.01138305664062, a * 366.7216033935547, a * 84.01138305664062, a * 366.7216033935547, a * 106.01138305664062, a * 351.2216033935547);
    e.bezierCurveTo(a * 116.01138305664062, a * 344.2216033935547, a * 120.01138305664062, a * 347.2216033935547, a * 127.01138305664062, a * 356.2216033935547);
    e.bezierCurveTo(a * 137.01138305664062, a * 366.2216033935547, a * 137.01138305664062, a * 366.2216033935547, a * 131.01138305664062, a * 376.2216033935547);
    e.closePath();
    St(e, c[0], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130.01138305664062, a * 375.2216033935547);
    e.bezierCurveTo(a * 109.51138305664062, a * 400.7216033935547, a * 109.51138305664062, a * 400.7216033935547, a * 89.01138305664062, a * 426.2216033935547);
    e.bezierCurveTo(a * 82.01138305664062, a * 435.2216033935547, a * 77.01138305664062, a * 435.2216033935547, a * 62.011383056640625, a * 417.2216033935547);
    e.bezierCurveTo(a * 43.011383056640625, a * 397.2216033935547, a * 47.011383056640625, a * 395.2216033935547, a * 62.011383056640625, a * 382.2216033935547);
    e.bezierCurveTo(a * 84.01138305664062, a * 366.7216033935547, a * 84.01138305664062, a * 366.7216033935547, a * 106.01138305664062, a * 351.2216033935547);
    e.bezierCurveTo(a * 116.01138305664062, a * 344.2216033935547, a * 120.01138305664062, a * 347.2216033935547, a * 127.01138305664062, a * 356.2216033935547);
    e.bezierCurveTo(a * 137.01138305664062, a * 366.2216033935547, a * 137.01138305664062, a * 366.2216033935547, a * 131.01138305664062, a * 376.2216033935547);
    e.closePath();
    St(e, c[yn], c[br], a * j);
    return d;
  }
  function fm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 170;
    e.translate(0, a * -170);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159.5, a * 322.0625);
    e.bezierCurveTo(a * 240.5, a * 293.0625, a * 240.5, a * 293.0625, a * 321.5, a * 264.0625);
    e.bezierCurveTo(a * 276.5, a * 230.0625, a * 276.5, a * 230.0625, a * 231.5, a * 196.0625);
    e.bezierCurveTo(a * 158.5, a * 221.5625, a * 158.5, a * 221.5625, a * 85.5, a * 247.0625);
    e.closePath();
    St(e, c[An], c[Lu], ne * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212.5, a * 270.0625);
    e.bezierCurveTo(a * 235, a * 261.5625, a * 235, a * 261.5625, a * 257.5, a * 253.0625);
    e.closePath();
    St(e, undefined, c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 193.5, a * 226.0625);
    e.bezierCurveTo(a * 204.5, a * 242.0625, a * 242.5, a * 237.0625, a * 251.5, a * 225.0625);
    e.bezierCurveTo(a * 246.5, a * 195.0625, a * 205.5, a * 190.0625, a * 193.5, a * 227.0625);
    e.closePath();
    St(e, c[jb], c[3], a * cg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164.5, a * 245.0625);
    e.bezierCurveTo(a * 182.5, a * 264.0625, a * 252.5, a * 258.0625, a * 276.5, a * 244.0625);
    e.bezierCurveTo(a * 265.5, a * 226.0625, a * 244.5, a * 231.0625, a * 229.5, a * 230.0625);
    e.bezierCurveTo(a * 205.5, a * 227.0625, a * 175.5, a * 202.0625, a * 162.5, a * 244.0625);
    e.closePath();
    St(e, c[2], c[wi], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 260.0625);
    e.bezierCurveTo(a * 134.5, a * 279.0625, a * 170.5, a * 275.0625, a * 191.5, a * 257.0625);
    e.bezierCurveTo(a * 174.5, a * 208.0625, a * 142.5, a * 197.0625, a * 116.5, a * 259.0625);
    e.closePath();
    St(e, c[tk], c[Ql], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 152.5, a * 278.0625);
    e.bezierCurveTo(a * 165.5, a * 294.0625, a * 200.5, a * 287.0625, a * 216.5, a * 278.0625);
    e.bezierCurveTo(a * 206.5, a * 247.0625, a * 173.5, a * 233.0625, a * 153.5, a * 276.0625);
    e.closePath();
    St(e, c[2], c[3], a * 12);
    return d;
  }
  function zm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 102;
    d.height = a * 102;
    e.globalAlpha = b ? 0.5 : Ga;
    e.translate(3, Z);
    Tt(e, a * 24, a * 26, a * 70, a * 9, a * In);
    St(e, c[Aa]);
    Tt(e, a * 26, a * 70, a * 70, a * Ba, a * 10);
    St(e, c[Rl]);
    Tt(e, a * 5, Ou * a, a * 22, a * 94, rh * a);
    St(e, c[Gk]);
    Tt(e, a * 40, a * 3, a * 22, a * 94, a * ul);
    St(e, c[0]);
    Tt(e, a * 75, a * 3, a * 22, a * 94, a * 5);
    St(e, c[0]);
    e.globalAlpha = bd;
    e.translate(-3, -dl);
    Tt(e, a * 24, a * 26, a * 70, a * 9, a * 10);
    St(e, c[Co]);
    Tt(e, a * 26, a * 70, a * 70, a * Dg, a * 10);
    St(e, c[Lu]);
    Tt(e, Pg * a, Lq * a, a * 22, a * 94, a * 5);
    St(e, c[2], c[3], a * cq);
    Tt(e, a * 40, iu * a, a * 22, a * 94, a * 5);
    St(e, c[X], c[3], a * 4);
    Tt(e, a * 75, a * 3, a * 22, a * 94, a * 5);
    St(e, c[On], c[Mh], oe * a);
    return d;
  }
  function ym(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 109;
    d.height = a * 110;
    Vt(e, a * 54.5, a * 55, a * 48.038209575038294);
    St(e, b[0], b[wh], a * 8);
    if (c == Ah) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54.928558349609375, a * 43.72320556640625);
      e.bezierCurveTo(a * 66.92855834960938, a * 31.72320556640625, a * 69.92855834960938, a * 29.72320556640625, a * 74.92855834960938, a * 29.72320556640625);
      e.bezierCurveTo(a * 86.92855834960938, a * 28.72320556640625, a * 91.92855834960938, a * 42.72320556640625, a * 89.92855834960938, a * 52.72320556640625);
      e.bezierCurveTo(a * 88.92855834960938, a * 63.72320556640625, a * 73.92855834960938, a * 75.72320556640625, a * 55.928558349609375, a * 87.72320556640625);
      e.bezierCurveTo(a * 37.928558349609375, a * 78.72320556640625, a * 26.928558349609375, a * 65.72320556640625, a * 19.928558349609375, a * 54.72320556640625);
      e.bezierCurveTo(a * 13.928558349609375, a * 42.72320556640625, a * 21.928558349609375, a * 28.72320556640625, a * 35.928558349609375, a * 29.72320556640625);
      e.bezierCurveTo(a * 45.928558349609375, a * 31.72320556640625, a * 51.928558349609375, a * 40.72320556640625, a * 53.928558349609375, a * 44.72320556640625);
      e.closePath();
      St(e, b[2]);
    } else if (c == 1) {
      e.save();
      e.translate(a * 55, a * 39.48748779296875);
      Tt(e, a * -11.5, a * -36, a * 23, a * 72, a * vc);
      e.restore();
      St(e, b[qo], b[Ft], a * 4);
      Vt(e, a * 54.5, a * 78.48748779296875, a * 22.02271554554524);
      St(e, b[4], b[Sg], a * 4);
      e.save();
      e.translate(a * 55.5, a * 57.287506103515625);
      Tt(e, a * -9, -Zk * a, a * 18, a * 32, a * 10);
      e.restore();
      St(e, b[4]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 25.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 25.287506103515625, a * 63.5, a * 25.287506103515625, a * 54.5, a * 25.287506103515625);
      e.closePath();
      St(e, Yo, b[5], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 37.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 37.287506103515625, a * 60.5, a * 37.287506103515625, a * 54.5, a * 37.287506103515625);
      e.closePath();
      St(e, Fg, b[Ut], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 50.287506103515625);
      e.bezierCurveTo(a * 61, a * 50.287506103515625, a * 61, a * 50.287506103515625, a * 55.5, a * 50.287506103515625);
      e.closePath();
      St(e, undefined, b[Yl], Jl * a);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 45.928558349609375, a * 55.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 67.29463195800781, a * 38.928558349609375, a * 67.29463195800781, a * 31.928558349609375, a * 79.29463195800781);
      e.bezierCurveTo(a * 15.928558349609375, a * 85.29463195800781, a * 17.928558349609375, a * 86.29463195800781, a * 17.928558349609375, a * 90.29463195800781);
      e.bezierCurveTo(a * 19.928558349609375, a * 94.29463195800781, a * 21.928558349609375, a * 94.29463195800781, a * 27.928558349609375, a * 92.29463195800781);
      e.bezierCurveTo(a * 29.928558349609375, a * 98.29463195800781, a * 30.928558349609375, a * 99.29463195800781, a * 33.928558349609375, a * 99.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 97.29463195800781, a * 38.928558349609375, a * 93.29463195800781, a * 37.928558349609375, a * 86.29463195800781);
      e.bezierCurveTo(a * 45.428558349609375, a * 73.29463195800781, a * 51.928558349609375, a * 64.29463195800781, a * 52.928558349609375, a * 60.29463195800781);
      e.closePath();
      St(e, b[2]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 55.928558349609375, a * 8.866058349609375);
      e.bezierCurveTo(a * 35.928558349609375, a * 35.866058349609375, a * 37.928558349609375, a * 48.866058349609375, a * 46.928558349609375, a * 62.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 72.86605834960938, a * 80.92855834960938, a * 55.866058349609375, a * 93.92855834960938, a * 36.866058349609375);
      e.closePath();
      St(e, b[3], b[4], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 93.92855834960938, a * 36.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 37.866058349609375, a * 77.92855834960938, a * 36.866058349609375, a * 67.92855834960938, a * 28.866058349609375);
      e.bezierCurveTo(a * 53.928558349609375, a * 16.866058349609375, a * 53.928558349609375, a * 14.866058349609375, a * 55.928558349609375, a * 7.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 4.866058349609375, a * 71.92855834960938, a * 7.866058349609375, a * 83.92855834960938, a * 13.866058349609375);
      e.bezierCurveTo(a * 96.92855834960938, a * 21.866058349609375, a * 95.92855834960938, a * 31.866058349609375, a * 92.92855834960938, a * 36.866058349609375);
      e.closePath();
      St(e, b[Hn], b[4], ya * a);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68.92855834960938, a * 16.866058349609375);
      e.bezierCurveTo(a * 71.92855834960938, a * 13.866058349609375, a * 76.92855834960938, a * 16.866058349609375, a * 79.92855834960938, a * 21.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 24.866058349609375, a * 81.92855834960938, a * 27.866058349609375, a * 73.92855834960938, a * 24.866058349609375);
      e.bezierCurveTo(a * 67.92855834960938, a * 20.866058349609375, a * 66.92855834960938, a * 19.866058349609375, a * 67.92855834960938, a * 17.866058349609375);
      e.closePath();
      St(e, b[fh]);
    } else if (Qn == c) {
      e.scale(0.9, 0.9);
      e.translate(a * Ze, 0);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54, a * 0.421875);
      e.bezierCurveTo(a * 84, a * 45.421875, a * 89, a * 51.421875, a * 83, a * 74.421875);
      e.bezierCurveTo(a * 74, a * 95.421875, a * 46, a * 98.421875, a * 30, a * 78.421875);
      e.bezierCurveTo(a * 22, a * 59.421875, a * 27, a * 49.421875, a * 34, a * 36.421875);
      e.closePath();
      St(e, b[2], b[Hn], xh * a);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 74, a * 52.421875);
      e.bezierCurveTo(a * 77, a * 73.421875, a * 69, a * 81.421875, a * 58, a * 81.421875);
      e.bezierCurveTo(a * 66, a * 71.421875, a * 70, a * 66.421875, a * 74, a * 52.421875);
      e.closePath();
      St(e, b[Rn]);
    }
    return d;
  }
  function wm(a, b) {
    if (!ᐃΔ[283][a]) {
      ᐃΔ[283][a] = Au(pq, "x" + a, jr, "#FFF");
    }
    var c = ᐃΔ[283][a];
    var d = b.info.translate.x + b.info.ⵠⵠ[0].width - c.width - pq * 14;
    var e = b.info.translate.y + b.info.ⵠⵠ[et].height - c.height - pq * Dl;
    if (b.info.state == aw) {
      e += lu * pq;
    }
    Mm(Mo, c, d, e);
  }
  function Pm() {
    dx.ⵠⲆⵠΔⵠ.open = false;
    var a = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ];
    var b = ow.ΔᐃⲆΔΔᐃΔ;
    if (a) {
      for (var c = fg; c < ff.Δᐃⵠ[rw.ⲆⵠⲆⵠᐃ].length; c++) {
        var d = ff.Δᐃⵠ[rw.ⲆⵠⲆⵠᐃ][c];
        var e = ᐃΔᐃⵠ.ⵠⵠΔᐃ(d, a);
        if (b > e) {
          b = e;
          dx.ⵠⲆⵠΔⵠ.open = Va;
          dx.ⵠⲆⵠΔⵠ.ⵠΔⲆᐃ = d.ⵠΔⲆᐃ;
          dx.ⵠⲆⵠΔⵠ.ⲆⵠⲆⵠΔ = d.id;
        }
      }
      if (ow.ΔᐃⲆΔΔᐃΔ > b) {
        fx.ⵠⲆⵠΔⵠ.ⵠⲆⵠΔ(Mo);
      }
    }
  }
  function Am() {
    if (dx.reconnect.enabled) {
      Mo.globalAlpha = 0.9;
      Mo.fillStyle = "#000";
      Tt(Mo, mq - 150, Qo - 90, 300, 180, Zq);
      Mo.fill();
      Mo.globalAlpha = 1;
      var a = ᐃΔ[301];
      Mo.save();
      dx.reconnect.rotate = (dx.reconnect.rotate + X * hx) % (Math.PI * 2);
      Mo.translate(Do / jg, lq / 2 - 25);
      Mo.rotate(dx.reconnect.rotate);
      Mm(Mo, a, -a.width / ta, -a.height / 2);
      Mo.restore();
      a = ᐃΔ[525];
      Mm(Mo, a, (Do - a.width) / On, (lq - a.height) / Od + 25);
    }
  }
  function km() {
    if (!dx.ⲆⵠⵠΔ.open && !dx.ⵠⲆΔⵠⵠ.open && !dx.ⲆⵠΔⵠ.open && !dx.ⵠΔⲆⵠ.open) {
      dx.ΔΔⵠⲆ.open = false;
      var b = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ];
      var c = ow.ⲆⲆⲆⲆΔⵠᐃ;
      if (b) {
        for (var d = Gk; ff.Δᐃⵠ[rw.ⲆⵠⲆⵠⵠ].length > d; d++) {
          var e = ff.Δᐃⵠ[rw.ⲆⵠⲆⵠⵠ][d];
          var f = ᐃΔᐃⵠ.ⵠⵠΔᐃ(e, b);
          if (f < c) {
            c = f;
            dx.ΔΔⵠⲆ.open = Ms;
            dx.ΔΔⵠⲆ.ⲆΔⵠᐃᐃⲆⲆ = e.info & 31;
            dx.ΔΔⵠⲆ.ⵠΔᐃⵠΔ = (e.info & 992) >> 5;
            dx.ΔΔⵠⲆ.ΔⲆⲆΔΔⵠᐃ = (e.info & 31744) >> 10;
            dx.ΔΔⵠⲆ.ⵠΔⲆᐃ = e.ⵠΔⲆᐃ;
            dx.ΔΔⵠⲆ.ⲆⵠⲆⵠΔ = e.id;
          }
        }
        if (c < ow.ⲆⲆⲆⲆΔⵠᐃ) {
          var g = ᐃΔ[722];
          var j = (a = fx.ΔᐃⲆᐃⲆⲆⵠ).info.translate.x - 32;
          Mm(Mo, g, j, 0);
          if (dx.ΔΔⵠⲆ.ⲆΔⵠᐃᐃⲆⲆ > 0) {
            a.ⵠⲆⵠΔ(Mo);
            if ((k = dx.ΔΔⵠⲆ.ⲆΔⵠᐃᐃⲆⲆ) > 1) {
              wm(k, a);
            }
          }
          var a = fx.ⲆⲆΔⵠᐃⲆᐃ;
          if (dx.ΔΔⵠⲆ.ΔⲆⲆΔΔⵠᐃ > 0) {
            a.ⵠⲆⵠΔ(Mo);
            if ((k = dx.ΔΔⵠⲆ.ΔⲆⲆΔΔⵠᐃ) > sc) {
              wm(k, a);
            }
          }
          var k;
          a = fx.ⵠΔᐃᐃΔⲆⲆ;
          if (dx.ΔΔⵠⲆ.ⵠΔᐃⵠΔ > gl) {
            a.ⵠⲆⵠΔ(Mo);
            if ((k = dx.ΔΔⵠⲆ.ⵠΔᐃⵠΔ) > Ni) {
              wm(k, a);
            }
          }
        }
      }
    }
  }
  function xm() {
    if (!dx.ⲆⵠⵠΔ.open) {
      dx.ⵠⲆΔⵠⵠ.ΔⵠⲆΔ = 0;
      dx.ⵠⲆΔⵠⵠ.open = false;
      var b = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ];
      var c = ow.ΔᐃΔᐃΔΔⲆ;
      if (b) {
        for (var d = Rl; ff.Δᐃⵠ[rw.ᐃᐃΔⲆⵠ].length > d; d++) {
          var e = ff.Δᐃⵠ[rw.ᐃᐃΔⲆⵠ][d];
          var f = ᐃΔᐃⵠ.ⵠⵠΔᐃ(e, b);
          if (f < c) {
            c = f;
            dx.ⵠⲆΔⵠⵠ.open = nh;
            dx.ⵠⲆΔⵠⵠ.ΔⵠⲆΔ = e.info;
            dx.ⵠⲆΔⵠⵠ.ⵠΔⲆᐃ = e.ⵠΔⲆᐃ;
            dx.ⵠⲆΔⵠⵠ.ⲆⵠⲆⵠΔ = e.id;
          }
        }
        if (ow.ΔᐃΔᐃΔΔⲆ > c) {
          var g = ᐃΔ[411];
          var j = fx.ᐃⵠᐃΔΔⲆⲆ;
          var a = Math.floor(j.info.translate.x + (j.info.ⵠⵠ[An].width - g.width) / 2);
          var k = Math.floor(j.info.translate.y + (j.info.ⵠⵠ[Rl].height - g.height) / Ht) + 3;
          Mm(Mo, g, a, k);
          if (dx.ⵠⲆΔⵠⵠ.ΔⵠⲆΔ > Md) {
            j.ⵠⲆⵠΔ(Mo);
            var h = dx.ⵠⲆΔⵠⵠ.ΔⵠⲆΔ;
            if (h > 1) {
              wm(h, j);
            }
          }
        }
      }
    }
  }
  function Jm(a, b, c) {
    var d = ᐃΔ[465][a];
    var e = b.info.translate.x + pq * 5;
    var f = b.info.translate.y + pq * 5;
    if (b.info.state == aw || c) {
      f += pq * 5;
    }
    Mm(Mo, d, e, f);
  }
  function Mm(b, c, d, e, f, g, i, a, j, h) {
    if (c.ⵠΔⵠΔΔⵠⲆ === Mk || c.ⵠΔⵠΔΔⵠⲆ() === 1) {
      if (al !== h) {
        b.drawImage(c, d, e, Math.max(Co, f), Math.max(er, g), i, a, j, h);
      } else if (g !== undefined) {
        b.drawImage(c, d, e, f, g);
      } else {
        b.drawImage(c, d, e);
      }
    }
  }
  function Bm() {
    dx.ⲆⵠⵠΔ.id = -ck;
    dx.ⲆⵠⵠΔ.lock = false;
    dx.ⲆⵠⵠΔ.locked = Jn;
    dx.ⲆⵠⵠΔ.ΔⲆᐃΔⵠⲆⲆ = Jn;
    dx.ⲆⵠⵠΔ.ⲆΔᐃᐃⵠⲆᐃ = Zl;
    dx.ⲆⵠⵠΔ.open = Jh;
    var b = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ];
    var c = ow.ⲆⵠΔⵠᐃⲆΔ;
    if (b) {
      for (var d = 0; ff.Δᐃⵠ[rw.ⵠⲆᐃᐃΔ].length > d; d++) {
        var e = ff.Δᐃⵠ[rw.ⵠⲆᐃᐃΔ][d];
        var f = ᐃΔᐃⵠ.ⵠⵠΔᐃ(e, b);
        if (c > f) {
          c = f;
          dx.ⲆⵠⵠΔ.open = true;
          dx.ⲆⵠⵠΔ.id = e.action < Nj ? -1 : Math.floor((e.action - 1) / 2);
          dx.ⲆⵠⵠΔ.ΔⵠⲆΔ = e.info;
          dx.ⲆⵠⵠΔ.ⵠΔⲆᐃ = e.ⵠΔⲆᐃ;
          dx.ⲆⵠⵠΔ.ⲆⵠⲆⵠΔ = e.id;
          dx.ⲆⵠⵠΔ.locked = e.lock;
          dx.ⲆⵠⵠΔ.lock = !!e.lock && e.ⵠΔⲆᐃ != dx.id && !dx.ⲆᐃΔⵠᐃΔᐃ(e.ⵠΔⲆᐃ);
          dx.ⲆⵠⵠΔ.ⲆΔᐃᐃⵠⲆᐃ = e.ⵠΔⲆᐃ === dx.id && !dx.ⲆⵠⵠΔ.locked && dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(148) != -1 && w;
          if (dx.ⲆⵠⵠΔ.locked && -Lu != dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(158)) {
            dx.ⲆⵠⵠΔ.ΔⲆᐃΔⵠⲆⲆ = mt;
          }
        }
      }
      if (ow.ⲆⵠΔⵠᐃⲆΔ > c) {
        var g = ᐃΔ[339];
        var j = fx.ⵠᐃⵠ[0];
        var k = Math.floor(j.info.translate.x + (j.info.ⵠⵠ[0].width - g.width) / nd);
        var m = Math.floor(j.info.translate.y + (j.info.ⵠⵠ[0].height - g.height) / Nr) + Mh;
        Mm(Mo, g, k, m);
        if ((!dx.ⲆⵠⵠΔ.lock || dx.id === dx.ⲆⵠⵠΔ.ⵠΔⲆᐃ) && dx.ⲆⵠⵠΔ.id >= 0) {
          (j = fx.ⵠᐃⵠ[dx.ⲆⵠⵠΔ.id]).ⵠⲆⵠΔ(Mo);
          var h = dx.ⲆⵠⵠΔ.ΔⵠⲆΔ;
          if (h > Gt) {
            wm(h, j);
          }
        }
        if (dx.ⲆⵠⵠΔ.lock) {
          fx.ⲆⵠⵠⵠᐃⵠΔ.ⵠⲆⵠΔ(Mo);
        } else if (dx.ⲆⵠⵠΔ.ⲆΔᐃᐃⵠⲆᐃ) {
          fx.ΔᐃᐃⲆⵠΔΔ.ⵠⲆⵠΔ(Mo);
        }
        if (dx.ⲆⵠⵠΔ.ΔⲆᐃΔⵠⲆⲆ) {
          fx.ᐃⲆⲆᐃⲆᐃΔ.ⵠⲆⵠΔ(Mo);
        }
      }
    }
  }
  function Dm() {
    var a = fx.ΔⵠΔΔⵠ;
    var b = a.id;
    if (a.ΔᐃΔᐃΔ === Fb && _h === a.display) {
      if (ᐃⲆⵠΔⲆ[b] === undefined) {
        ᐃⲆⵠΔⲆ[b] = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          var e = ut[b];
          d.font = "20px Baloo Paaji";
          var f = bu;
          if (e.length >= 1) {
            f = Math.max(Gg, d.measureText(e[0]).width);
          }
          d.font = "17px Baloo Paaji";
          if (e.length >= 2) {
            f = Math.max(f, d.measureText(e[Mg]).width);
          }
          d.font = "14px Baloo Paaji";
          xt = fh;
          for (; e.length > xt; xt++) {
            f = Math.max(f, d.measureText(e[xt]).width);
          }
          var g = f + 35;
          var h = 0;
          h = e.length === Co ? 55 : e.length === 2 ? 85 : (e.length - 2) * 26 + 85;
          c.width = g;
          c.height = h;
          Tt(d, Qr, 0, g, h, 10);
          d.fillStyle = "#000000";
          d.globalAlpha = 0.5;
          d.fill();
          if (e.length >= ck) {
            d.textBaseline = "middle";
            d.font = "20px Baloo Paaji";
            d.globalAlpha = sl;
            d.fillStyle = "#e2c340";
            d.fillText(e[0], vs, 28);
          }
          if (e.length >= On) {
            d.font = "17px Baloo Paaji";
            d.fillStyle = "#ffffff";
            d.fillText(e[wh], ai, 55);
            h = 55;
          }
          if (e.length >= 3) {
            d.font = "14px Baloo Paaji";
            d.globalAlpha = 0.7;
            xt = 2;
            for (; xt < e.length; xt++) {
              d.fillText(e[xt], 15, h + 28);
              h += 26;
            }
          }
          return c;
        }(b);
      }
      if (a.Ⲇⵠᐃⵠ === 1) {
        Mm(Mo, ᐃⲆⵠΔⲆ[b], a.x, a.y);
      } else if (a.x - 80 + ᐃⲆⵠΔⲆ[b].width > Do) {
        Mm(Mo, ᐃⲆⵠΔⲆ[b], Do - ᐃⲆⵠΔⲆ[b].width - iq, a.y - ᐃⲆⵠΔⲆ[b].height - 10);
      } else {
        Mm(Mo, ᐃⲆⵠΔⲆ[b], a.x - 80, a.y - ᐃⲆⵠΔⲆ[b].height - Gh);
      }
    }
  }
  function Em() {
    if (dx.ᐃⲆⵠⵠⲆⲆⵠ) {
      Mo.globalAlpha = 0.5;
      Mo.fillStyle = "#000";
      Mo.fillRect(0, 0, Do, lq);
      Mo.globalAlpha = 0.8;
      var b = ᐃΔ[516][ff.time];
      var c = mq - b.width / 2;
      var d = Qo - b.height / Od;
      Mm(Mo, b, c, d);
      Mo.globalAlpha = 1;
      if (fx.ⵠᐃⲆΔᐃ.ᐃⵠᐃⵠⵠ.x > -ck) {
        Mo.fillStyle = "#660000";
        Vt(Mo, c + fx.ⵠᐃⲆΔᐃ.ᐃⵠᐃⵠⵠ.x * Xu * pq, d + fx.ⵠᐃⲆΔᐃ.ᐃⵠᐃⵠⵠ.y * Jd * pq, pq * jh);
        Mo.fill();
      }
      for (var e = fx.ⵠᐃⲆΔᐃ.ⲆΔⵠⵠ, f = Md; e.length > f; f++) {
        var g = e[f];
        ff.time;
        Mo.fillStyle = "#ff0000";
        Vt(Mo, c + g.x / (ff.ΔⲆᐃⵠᐃ * og) * 600 * pq, d + pq * (g.y / (ff.ΔⲆᐃᐃᐃ * yg) * 600), pq * 6);
        Mo.fill();
      }
      var h = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ];
      if (h) {
        Mo.fillStyle = ff.time ? "#fff" : "#e39716";
        Vt(Mo, c + h.x / (ff.ΔⲆᐃⵠᐃ * 100) * 600 * pq, d + h.y / (xo * ff.ΔⲆᐃᐃᐃ) * 600 * pq, cg * pq);
        Mo.fill();
      }
    }
  }
  function Im() {
    if (dx.ΔᐃⲆⵠ.ⵠΔΔᐃΔ.length > 0) {
      var b = {
        x: fx.ⵠᐃⲆΔᐃ.translate.x,
        y: fx.ⵠᐃⲆΔᐃ.translate.y - pq * 120
      };
    } else {
      b = {
        x: fx.ⵠᐃⲆΔᐃ.translate.x,
        y: fx.ⵠᐃⲆΔᐃ.translate.y - pq * 50
      };
    }
    Mo.globalAlpha = 0.8;
    var c = ᐃΔ[259][ff.time];
    Mm(Mo, c, b.x, b.y);
    Mo.globalAlpha = Co;
    if (fx.ⵠᐃⲆΔᐃ.ᐃⵠᐃⵠⵠ.x > -1) {
      Mo.fillStyle = "#660000";
      Vt(Mo, b.x + pq * fx.ⵠᐃⲆΔᐃ.ᐃⵠᐃⵠⵠ.x, b.y + fx.ⵠᐃⲆΔᐃ.ᐃⵠᐃⵠⵠ.y * pq, pq * 5);
      Mo.fill();
    }
    var d = pq;
    for (var f = fx.ⵠᐃⲆΔᐃ.ⲆΔⵠⵠ, g = Qr; g < f.length; g++) {
      var h = f[g];
      ff.time;
      Mo.fillStyle = "#ff0000";
      Vt(Mo, b.x + pq * (h.x / (ff.ΔⲆᐃⵠᐃ * 100) * 193), b.y + pq * (h.y / (ff.ΔⲆᐃᐃᐃ * 100) * 193), pq * 2);
      Mo.fill();
    }
    var i = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ];
    if (i) {
      Mo.fillStyle = ff.time ? "#fff" : "#e39716";
      Vt(Mo, b.x + i.x / (ff.ΔⲆᐃⵠᐃ * 100) * 193 * pq, b.y + i.y / (I * ff.ΔⲆᐃᐃᐃ) * 193 * pq, pq * 4);
      Mo.fill();
    }
    pq = d;
  }
  function Sm() {
    dx.ⲆⲆᐃΔⲆ.id = -1;
    dx.ⲆⲆᐃΔⲆ.ⵠΔⲆᐃ = -1;
    if (!dx.ⲆᐃⵠᐃΔⵠᐃ && !dx.ⲆⲆᐃΔⲆ.wait && !dx.ⵠⵠᐃⲆΔ) {
      var b = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ];
      var c = ow.ᐃΔⲆⲆⲆⲆⲆΔᐃ;
      if (b) {
        for (var d = 0; d < ff.Δᐃⵠ[rw.ⵠⲆⵠⲆⲆ].length; d++) {
          var e = ff.Δᐃⵠ[rw.ⵠⲆⵠⲆⲆ][d];
          var f = ᐃΔᐃⵠ.ⵠⵠΔᐃ(e, b);
          if (c > f) {
            c = f;
            dx.ⲆⲆᐃΔⲆ.id = e.id;
            dx.ⲆⲆᐃΔⲆ.ⵠΔⲆᐃ = e.ⵠΔⲆᐃ;
            dx.ⲆⲆᐃΔⲆ.info = e.info;
            dx.ⲆⲆᐃΔⲆ.lock = (e.info & 16) >> Mu;
          }
        }
      }
      var g = fx.ΔⵠⲆΔΔ;
      fx.ΔⵠⲆΔΔ = -1;
      if (dx.ⲆⲆᐃΔⲆ.ⵠΔⲆᐃ == -1 || dx.ⵠⵠⵠⵠΔ.length != 0 && dx.ⲆⲆᐃΔⲆ.ⵠΔⲆᐃ != dx.id) {
        if (dx.ⵠⵠⵠⵠΔ.length != et && dx.ⵠⵠⵠⵠΔ[0] != dx.id) {
          fx.ΔⵠⲆΔΔ = nw.ⵠⲆᐃᐃΔᐃⵠ;
        } else if (dx.ⵠⵠⵠⵠΔ.length != 0 && dx.id == dx.ⵠⵠⵠⵠΔ[Ah]) {
          fx.ΔⵠⲆΔΔ = nw.ᐃᐃᐃⲆᐃⵠⵠ;
        } else if (bu != dx.ⵠⵠⵠⵠΔ.length) {
          fx.ΔⵠⲆΔΔ = nw.ⵠⲆⵠⲆⲆᐃⵠ;
        }
      } else if (dx.ⵠⵠⵠⵠΔ.length == xq && dx.ⲆⲆᐃΔⲆ.info >= Fh) {
        fx.ΔⵠⲆΔΔ = nw.ᐃᐃᐃⵠⵠΔᐃ;
      } else if (dx.ⵠⵠⵠⵠΔ.length == tj) {
        fx.ΔⵠⲆΔΔ = nw.ⵠⲆⵠⲆⲆᐃⵠ;
      } else {
        fx.ΔⵠⲆΔΔ = nw.ⲆᐃⵠᐃⲆᐃⵠ;
      }
      if (fx.ΔⵠⲆΔΔ != -Co) {
        fx.ⵠᐃⲆⵠΔ[fx.ΔⵠⲆΔΔ].button.ⵠⲆⵠΔ(Mo);
      }
      var h = document.getElementById("team_box").style;
      if (fx.ΔⵠⲆΔΔ != -_h && fx.ΔⵠⲆΔΔ != g && h.display == "inline-block") {
        fx.ⵠᐃⲆⵠΔ[fx.ΔⵠⲆΔΔ].action();
      }
    }
  }
  function Qm() {
    if (!dx.ⲆⵠⵠΔ.open && !dx.ⵠⲆΔⵠⵠ.open) {
      dx.ⵠΔⲆⵠ.open = Hj;
      var b = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ];
      var c = ow.ΔΔⵠⵠΔᐃᐃ;
      if (b) {
        for (var d = Aa; d < sw.length; d++) {
          for (var e = sw[d][fg], f = sw[d][1], j = Gg; ff.Δᐃⵠ[e].length > j; j++) {
            var k = ff.Δᐃⵠ[e][j];
            var m = ᐃΔᐃⵠ.ⵠⵠΔᐃ(k, b);
            if (c > m) {
              c = m;
              dx.ⵠΔⲆⵠ.ᐃᐃⲆⲆᐃᐃⲆ = f;
              dx.ⵠΔⲆⵠ.type = e;
              dx.ⵠΔⲆⵠ.open = true;
              dx.ⵠΔⲆⵠ.ⲆΔⵠᐃᐃⲆⲆ = k.info & 255;
              dx.ⵠΔⲆⵠ.ⵠⲆΔᐃΔΔᐃ = (k.info & 65280) >> 8;
              dx.ⵠΔⲆⵠ.ⵠΔⲆᐃ = k.ⵠΔⲆᐃ;
              dx.ⵠΔⲆⵠ.ⲆⵠⲆⵠΔ = k.id;
            }
          }
        }
        if (ow.ΔΔⵠⵠΔᐃᐃ > c) {
          var p;
          var q = ᐃΔ[656];
          var l = (g = fx.ⵠΔⲆⲆⵠⵠⲆ).info.translate.x - 33;
          Mm(Mo, q, l, 0);
          if (dx.ⵠΔⲆⵠ.ⲆΔⵠᐃᐃⲆⲆ > Qr) {
            g.ⵠⲆⵠΔ(Mo);
            if ((p = dx.ⵠΔⲆⵠ.ⲆΔⵠᐃᐃⲆⲆ) > bs) {
              wm(p, g);
            }
          }
          switch (dx.ⵠΔⲆⵠ.ᐃᐃⲆⲆᐃᐃⲆ) {
            case 108:
              var g = fx.ᐃⲆⲆⲆⵠΔᐃ;
              break;
            case 111:
              g = fx.ΔΔΔᐃΔⲆⵠ;
              break;
            case 112:
              g = fx.ΔⵠΔⵠⵠΔⵠ;
              break;
            case 121:
              g = fx.ᐃⲆⵠᐃᐃᐃΔ;
              break;
            case 202:
              g = fx.ⵠᐃᐃⲆΔΔᐃ;
          }
          if (dx.ⵠΔⲆⵠ.ⵠⲆΔᐃΔΔᐃ > yj) {
            g.ⵠⲆⵠΔ(Mo);
            if ((p = dx.ⵠΔⲆⵠ.ⵠⲆΔᐃΔΔᐃ) > 1) {
              wm(p, g);
            }
          }
        }
      }
    }
  }
  function _m() {
    if (!dx.ⲆⵠⵠΔ.open && !dx.ⵠⲆΔⵠⵠ.open && !dx.ⲆⵠΔⵠ.open && !dx.ΔΔⵠⲆ.open && !dx.ⵠΔⲆⵠ.open) {
      dx.sign.open = false;
      var a = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ];
      var b = ow.ⲆⵠᐃΔⲆᐃΔ;
      if (a) {
        for (var c = sb; ff.Δᐃⵠ[rw.ⲆΔⲆⵠⵠ].length > c; c++) {
          var d = ff.Δᐃⵠ[rw.ⲆΔⲆⵠⵠ][c];
          var e = ᐃΔᐃⵠ.ⵠⵠΔᐃ(d, a);
          if (e < b && d.info === fg && dx.id === d.ⵠΔⲆᐃ) {
            dx.sign.open = true;
            b = e;
            dx.sign.ⲆⵠⲆⵠΔ = d.id;
          }
        }
        if (b < ow.ⲆⵠᐃΔⲆᐃΔ) {
          fx.sign.button.ⵠⲆⵠΔ(Mo);
        }
      }
    }
  }
  function Fm() {
    if (!dx.ⲆⵠⵠΔ.open && !dx.ⵠⲆΔⵠⵠ.open) {
      dx.ⲆⵠΔⵠ.open = Lk;
      var b = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ];
      var c = ow.ⲆΔᐃⲆⵠⲆᐃ;
      if (b) {
        for (var d = 0; ff.Δᐃⵠ[rw.ᐃⲆᐃⲆⲆ].length > d; d++) {
          var e = ff.Δᐃⵠ[rw.ᐃⲆᐃⲆⲆ][d];
          var f = ᐃΔᐃⵠ.ⵠⵠΔᐃ(e, b);
          if (c > f) {
            c = f;
            dx.ⲆⵠΔⵠ.open = true;
            dx.ⲆⵠΔⵠ.ᐃᐃᐃⵠⵠΔⵠ = e.info & 255;
            dx.ⲆⵠΔⵠ.ⵠΔᐃⵠΔ = (e.info & 65280) >> 8;
            dx.ⲆⵠΔⵠ.ⵠΔⲆᐃ = e.ⵠΔⲆᐃ;
            dx.ⲆⵠΔⵠ.ⲆⵠⲆⵠΔ = e.id;
          }
        }
        if (c < ow.ⲆΔᐃⲆⵠⲆᐃ) {
          var g = ᐃΔ[655];
          var j = (k = fx.ᐃⲆⲆᐃᐃᐃᐃ).info.translate.x - 33;
          Mm(Mo, g, j, gl);
          if (dx.ⲆⵠΔⵠ.ᐃᐃᐃⵠⵠΔⵠ > 0) {
            k.ⵠⲆⵠΔ(Mo);
            if ((a = dx.ⲆⵠΔⵠ.ᐃᐃᐃⵠⵠΔⵠ) > 1) {
              wm(a, k);
            }
          }
          var a;
          var k = fx.ⲆΔⲆᐃⲆⵠⵠ;
          if (Rl < dx.ⲆⵠΔⵠ.ⵠΔᐃⵠΔ) {
            k.ⵠⲆⵠΔ(Mo);
            if ((a = dx.ⲆⵠΔⵠ.ⵠΔᐃⵠΔ) > 1) {
              wm(a, k);
            }
          }
        }
      }
    }
  }
  ᐃⲆⵠΔⲆ = [];
  ᐃΔᐃΔᐃⵠⵠ = [];
  var Rm = [];
  function jm() {
    var b = dx.Ⲇⵠᐃⵠ;
    if (!b.ᐃⲆΔⲆⲆ && Gk < b.ⲆᐃᐃΔ) {
      var c = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ];
      if (!c) {
        return;
      }
      Mo.save();
      if (et === zs[b.ⲆᐃᐃΔ].Ⲇⵠⵠⵠ && Aa === b.mode) {
        Mo.translate(dx.ⲆΔⲆ.x + c.x, dx.ⲆΔⲆ.y + c.y);
        Mo.rotate(c.angle);
        Mo.translate(120, xq);
      } else {
        var d = Math.floor(c.x + Math.sin(c.angle) * 120);
        var e = Math.floor(c.y + Math.cos(c.angle) * 120);
        d = dx.ⲆΔⲆ.x + (d - d % 100 + 50);
        e = dx.ⲆΔⲆ.y + (e - e % pn + 50);
        Mo.translate(d, e);
      }
      var f = ᐃΔ[b.ⲆᐃᐃΔ][ff.time];
      Mo.globalAlpha = 0.5;
      Mm(Mo, f, -f.width / 2, -f.height / 2);
      Mo.globalAlpha = Fb;
      Mo.restore();
      if (zs[b.ⲆᐃᐃΔ].Ⲇⵠⵠⵠ === 0) {
        if (!b.label[b.mode]) {
          if (b.mode === 0) {
            b.label[Ih] = Au(pq, ut[336], 20, "#e2c340");
          } else {
            b.label[ig] = Au(pq, ut[337], 20, "#e2c340");
          }
        }
        f = b.label[b.mode];
        Mm(Mo, f, mq + -f.width / 2, fx.ᐃⲆᐃΔ.y - 26);
      }
    }
    if (b.ᐃⲆΔⲆⲆ) {
      var g = b.timeout.ⲆᐃⲆ();
      for (var i = 0; i < b.ⵠⵠⵠⵠⲆ.length; i++) {
        var j = b.ⵠⵠⵠⵠⲆ[i];
        if (j.id == b.id) {
          var k = pq * 42;
          var m = pq * go;
          Tt(Mo, j.info.translate.x, j.info.translate.y + k * (1 - b.timeout.ᐃⲆⵠ), j.info.width, k * b.timeout.ᐃⲆⵠ + m, pq * 10);
          Mo.fillStyle = "#55B973";
          Mo.fill();
          Mo.globalAlpha = 0.8;
          j.ⵠⲆⵠΔ(Mo);
        } else {
          Mo.globalAlpha = 0.5;
          j.ⵠⲆⵠΔ(Mo);
        }
        Mo.globalAlpha = Co;
      }
      if (g) {
        b.ᐃⲆΔⲆⲆ = false;
        b.timeout.ᐃⲆⵠ = 0;
        b.timeout.ⵠᐃᐃ = gh;
      }
      return true;
    }
    for (i = 0; i < b.ⵠⵠⵠⵠⲆ.length; i++) {
      b.ⵠⵠⵠⵠⲆ[i].ⵠⲆⵠΔ(Mo);
    }
    return ja;
  }
  function Wm(a) {
    if ((a = a / mh) <= 0.95) {
      Mo.save();
      Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
      Mo.rotate(this.angle);
      if (this.ΔᐃΔ.ⲆᐃⲆ) {
        if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == 0) {
          this.ΔᐃΔ.ⲆᐃⲆ = false;
        }
        var b = pq * (hx * (Ek - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * 600);
        var c = Math.sin(this.ΔᐃΔ.angle - this.angle) * b;
        var d = b * Math.cos(this.ΔᐃΔ.angle - this.angle);
      } else {
        c = tj;
        d = gl;
      }
      Mo.globalAlpha = 0.5;
      tb(Mo, c, d, pq * 28, a);
      St(Mo, null, "#000000", Mt * pq);
      Mo.globalAlpha = Ni;
      tb(Mo, c, d, pq * 28, a);
      St(Mo, null, rs.ⲆᐃⵠΔΔⵠⲆ[ff.time], Ml * pq);
      Mo.restore();
    }
  }
  function Lm(a) {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == tr) {
        this.ΔᐃΔ.ⲆᐃⲆ = false;
      }
      var b = (1 - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * hx * 600 * pq;
      var c = Math.sin(this.ΔᐃΔ.angle - this.angle) * b;
      var d = Math.cos(this.ΔᐃΔ.angle - this.angle) * b;
    } else {
      c = gl;
      d = 0;
    }
    if (this.ΔᐃΔⲆᐃ.ⲆᐃⲆ()) {
      this.color += 0.2 + Math.random() * 0.3;
    }
    ⵠⵠ = ᐃΔ[872][Math.floor(this.id + this.color) % 5][ff.time];
    ΔⲆⲆ = this.ΔᐃΔⲆᐃ.ᐃⲆⵠ * -ⵠⵠ.width;
    ⵠΔⲆ = this.ΔᐃΔⲆᐃ.ᐃⲆⵠ * -ⵠⵠ.height;
    Mm(Mo, ⵠⵠ, -ΔⲆⲆ / tk + c, -ⵠΔⲆ / zd + d, ΔⲆⲆ, ⵠΔⲆ);
    Mo.restore();
  }
  function Gm() {
    var a = dx.ⵠᐃⲆΔⵠ;
    if (a.wait) {
      var b = a.timeout.ⲆᐃⲆ();
      Mo.save();
      var c = ᐃΔ[537];
      Mo.translate(c.width - Gl * pq, fx.ᐃⲆᐃΔ.translate.y - pq * 60);
      var d = -c.width / 2 - 2;
      var e = -c.height / qi - 4;
      Mm(Mo, c, d, e);
      Mo.beginPath();
      Mo.lineWidth = pq * 5;
      Mo.strokeStyle = rs.ᐃⵠᐃⲆⵠⵠⲆ[ff.time];
      Mo.lineCap = "round";
      Mo.arc(0, e + c.height / 2, pq * 25, yj, Math.PI * 2 * a.timeout.ᐃⲆⵠ);
      Mo.stroke();
      Mo.restore();
      if (b) {
        a.wait = Ge;
        a.timeout.ᐃⲆⵠ = 0;
        a.timeout.ⵠᐃᐃ = Lk;
      }
    }
  }
  function Om(b) {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == 0) {
        this.ΔᐃΔ.ⲆᐃⲆ = Bo;
      }
      var c = hx * (1 - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * 600 * pq;
      var d = Math.sin(this.ΔᐃΔ.angle - this.angle) * c;
      var e = c * Math.cos(this.ΔᐃΔ.angle - this.angle);
    } else {
      d = Qr;
      e = 0;
    }
    var f = ᐃΔ[853].length;
    ⵠⵠ = ᐃΔ[853][(this.ΔⵠⵠⲆ + this.Ⲇᐃ % 2) % f][ff.time];
    ΔⲆⲆ = -ⵠⵠ.width;
    ⵠΔⲆ = -ⵠⵠ.height;
    var g = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ];
    if (g && (this.ⵠΔⲆᐃ === dx.id || dx.ⲆᐃΔⵠᐃΔᐃ(this.ⵠΔⲆᐃ))) {
      if (ᐃΔᐃⵠ.ⵠⵠΔᐃ(this, g) < 550) {
        this.opacity = Math.max(this.opacity - hx, 0.3);
      } else {
        this.opacity = Math.min(this.opacity + hx, 1);
      }
    } else if (g && ᐃΔᐃⵠ.ⵠⵠΔᐃ(this, ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ]) < 150) {
      this.opacity = Math.max(this.opacity - hx, 0.3);
    } else {
      this.opacity = Math.min(this.opacity + hx, 1);
    }
    var h = Mo.globalAlpha;
    Mo.globalAlpha *= this.opacity;
    Mm(Mo, ⵠⵠ, -ΔⲆⲆ / 2 + d, -ⵠΔⲆ / Gl + e, ΔⲆⲆ, ⵠΔⲆ);
    Mo.globalAlpha = h;
    Mo.restore();
  }
  function Nm() {
    var a = dx.ⲆⲆᐃΔⲆ;
    if (a.wait) {
      var b = a.timeout.ⲆᐃⲆ();
      Mo.save();
      var c = ᐃΔ[562];
      var d = ᐃΔ[537].height + pq * 25;
      Mo.translate(c.width, fx.ᐃⲆᐃΔ.translate.y - pq * 188 - d);
      var e = -c.width / Ol - br;
      var f = -c.height / 2 - 4;
      Mm(Mo, c, e + jb, f);
      Mo.beginPath();
      Mo.lineWidth = zr * pq;
      Mo.strokeStyle = rs.ᐃⵠᐃⲆⵠⵠⲆ[ff.time];
      Mo.lineCap = "round";
      Mo.arc(0, f + c.height / 2, pq * 25, fg, Ol * Math.PI * a.timeout.ᐃⲆⵠ);
      Mo.stroke();
      Mo.restore();
      if (b) {
        a.wait = Zl;
        a.timeout.ᐃⲆⵠ = xq;
        a.timeout.ⵠᐃᐃ = false;
      }
    }
  }
  function qm(a) {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == 0) {
        this.ΔᐃΔ.ⲆᐃⲆ = Lk;
      }
      var b = pq * ((_h - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * hx * 600);
      var c = b * Math.sin(this.ΔᐃΔ.angle - this.angle);
      var d = Math.cos(this.ΔᐃΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = Md;
    }
    var e = ᐃΔ[a][ff.time];
    ΔⲆⲆ = -e.width;
    ⵠΔⲆ = -e.height;
    Mm(Mo, e, -ΔⲆⲆ / 2 + c, -ⵠΔⲆ / zd + d, ΔⲆⲆ, ⵠΔⲆ);
    Mo.restore();
  }
  function Hm(a) {
    if ((a = a / xo) <= 0.8) {
      Mo.save();
      Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
      Mo.rotate(this.angle);
      if (this.ΔᐃΔ.ⲆᐃⲆ) {
        if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == 0) {
          this.ΔᐃΔ.ⲆᐃⲆ = Zl;
        }
        var b = hx * (Kg - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * 600 * pq;
        var c = b * Math.sin(this.ΔᐃΔ.angle - this.angle);
        var d = b * Math.cos(this.ΔᐃΔ.angle - this.angle);
      } else {
        c = yj;
        d = gl;
      }
      Mo.globalAlpha = 0.5;
      tb(Mo, c, d, pq * 18, a);
      St(Mo, null, "#000000", pq * 18);
      Mo.globalAlpha = 1;
      tb(Mo, c, d, pq * aa, a);
      St(Mo, null, rs.ᐃⲆⲆᐃΔᐃᐃ[ff.time], pq * 6);
      Mo.restore();
    }
  }
  function Um() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[837][ff.time];
    ΔⲆⲆ = -ⵠⵠ.width;
    ⵠΔⲆ = -ⵠⵠ.height;
    Mm(Mo, ⵠⵠ, -ΔⲆⲆ / il, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
    Mo.restore();
  }
  function Ym() {
    var b = dx.ᐃᐃᐃⵠᐃ;
    var c = fx.ΔⲆⲆⵠ;
    if (b.ⲆᐃⲆ) {
      b.ⲆᐃⲆ = ia;
      var d = b.ⵠⵠⵠᐃᐃ;
      var e = c.ⵠⲆ.width;
      var f = c.ⵠⲆ.height;
      var g = c.Δ;
      var i = ff.ⲆΔⵠⵠ;
      var a = false;
      g.clearRect(Aa, 0, e, f);
      g.drawImage(c.ⵠⵠ, Gk, 0);
      for (var j = Ah; j < d.length; j++) {
        var k = i[d[j]];
        if ((ff.mode !== ow.ⵠᐃⵠΔⲆᐃⵠ || k.ⲆΔᐃᐃⲆ !== "spectator") && (ff.mode !== ow.ΔΔᐃᐃᐃ || k.ⲆⲆⲆⲆ !== ow.ⵠΔΔΔΔⵠᐃ)) {
          if (dx.id == d[j]) {
            a = bh;
            if (ff.mode === ow.ᐃΔⵠᐃᐃ && k.ⲆⲆⲆⲆ === ow.ⵠⲆⵠⲆⵠⵠᐃ) {
              ⲆΔ = "#FF0000";
            } else {
              ⲆΔ = "#FFF";
            }
          } else if (ow.ᐃΔⵠᐃᐃ === ff.mode && ow.ⵠⲆⵠⲆⵠⵠᐃ === k.ⲆⲆⲆⲆ) {
            ⲆΔ = "#990000";
          } else {
            ⲆΔ = "#A1BDCD";
          }
          g.drawImage(Au(pq, "" + (j + 1), pq * _q, ⲆΔ), pq * Qj, pq * (40 + j * 22));
          k.ⵠⲆⲆⵠΔΔΔ ||= Au(pq, k.ⲆΔᐃᐃⲆ, pq * 15, ⲆΔ, undefined, Fg, undefined, undefined, pq * 110);
          g.drawImage(k.ⵠⲆⲆⵠΔΔΔ, pq * 39, pq * (40 + j * 22));
          g.drawImage(Au(pq, ᐃΔᐃⵠ.ΔⵠⲆⲆⵠⵠᐃ(k.ⲆⲆΔⲆⵠ), pq * ik, ⲆΔ), pq * 156, (40 + j * 22) * pq);
        }
      }
      if (!a) {
        if (ff.mode === ow.ⲆⵠⵠΔⵠ || ff.mode === ow.ᐃΔⵠᐃᐃ || ff.mode === ow.ᐃⵠΔΔⲆ || ow.ⵠᐃᐃΔⵠᐃᐃ === ff.mode || ff.mode === ow.ⵠⲆⲆⵠΔ || ff.mode === ow.ⵠᐃⵠΔⲆᐃⵠ && !dx.ⲆᐃⵠᐃΔⵠᐃ || ow.ΔΔᐃᐃᐃ === ff.mode && !dx.ⵠⵠᐃⲆΔ) {
          g.drawImage(ᐃΔ[306], pq * ai, (46 + j * 22) * pq);
          g.drawImage(Au(pq, ᐃΔᐃⵠ.ΔⵠⲆⲆⵠⵠᐃ(ff.ⲆΔⵠⵠ[dx.id].ⲆⲆΔⲆⵠ), pq * 15, "#FFF"), pq * 100, (46 + j * 22) * pq);
        }
      }
    }
    Mm(Mo, c.ⵠⲆ, c.translate.x, c.translate.y);
  }
  function Km() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[239][ff.time];
    ΔⲆⲆ = -ⵠⵠ.width;
    ⵠΔⲆ = -ⵠⵠ.height;
    Mm(Mo, ⵠⵠ, -ΔⲆⲆ / Nj, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
    Mo.restore();
  }
  function Vm() {
    for (var b = dx.ΔᐃⲆⵠ, c = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ], d = fg; b.ⵠΔΔᐃΔ.length > d; d++) {
      var e = b.ⵠΔΔᐃΔ[d];
      var f = Wh;
      if ((c = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ]) && (e.id == c.right || e.id == c.ⵠⲆᐃᐃⵠ && c.ⵠⲆᐃᐃⵠ > xq)) {
        f = true;
        Mm(Mo, e.info.ⵠⵠ[Ht], e.info.translate.x, e.info.translate.y, e.info.width, e.info.height);
      } else {
        e.ⵠⲆⵠΔ(Mo);
      }
      var g = dx.ΔᐃⲆⵠ.ⵠⵠⲆ[e.id];
      if (Ga < g) {
        wm(g, e);
      }
      if (yj < g) {
        Jm(d, e, f);
      }
      var h = dx.ⲆⵠⵠΔ;
      if (h.open && (fg > h.id || h.id == e.id) && (!h.lock || h.ⵠΔⲆᐃ == dx.id)) {
        fx.ⲆⲆⵠⵠⵠ[e.id].ⵠⲆⵠΔ(Mo);
      }
      if (dx.ⵠⲆΔⵠⵠ.open && e.id == 109) {
        fx.ⲆⲆⵠⵠⵠ[e.id].ⵠⲆⵠΔ(Mo);
      }
      if (dx.ΔⲆᐃΔⲆ.open && e.id == 180) {
        fx.ⲆⲆⵠⵠⵠ[e.id].ⵠⲆⵠΔ(Mo);
      }
      if (dx.ⲆⵠΔⵠ.open && e.id == 134) {
        fx.ⲆⲆⵠⵠⵠ[e.id].ⵠⲆⵠΔ(Mo);
      }
      if (dx.ⵠΔⲆⵠ.open && e.id == 109) {
        fx.ⲆⲆⵠⵠⵠ[e.id].ⵠⲆⵠΔ(Mo);
      }
      if (!!dx.ΔΔⵠⲆ.open && (e.id == 109 || e.id == 131)) {
        fx.ⲆⲆⵠⵠⵠ[e.id].ⵠⲆⵠΔ(Mo);
      }
    }
    if (e && d < b.max) {
      var j = ᐃΔ[334][qo];
      ⵠᐃ = e.info.translate.x;
      ⲆΔΔ = e.info.translate.y;
      ΔⵠⵠⲆ = 1;
      for (; d < b.max; d++, ΔⵠⵠⲆ++) {
        Mm(Mo, j, ⵠᐃ + (j.width + Sj) * ΔⵠⵠⲆ, ⲆΔΔ);
      }
    }
  }
  function Xm() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[848][ff.time];
    ΔⲆⲆ = -ⵠⵠ.width;
    ⵠΔⲆ = -ⵠⵠ.height;
    Mm(Mo, ⵠⵠ, -ΔⲆⲆ / bq, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
    Mo.restore();
  }
  function Zm() {
    var a = dx.Ⲇⵠᐃⵠ;
    if (a.ᐃⲆΔⲆⲆ) {
      var b = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ];
      Mo.save();
      Mo.translate(dx.ⲆΔⲆ.x + b.x, dx.ⲆΔⲆ.y + b.y);
      var c = ᐃΔ[324];
      var d = -c.width / 2;
      var e = -c.height / 2 - pq * 125;
      Mm(Mo, c, d, e);
      Mo.beginPath();
      Mo.lineWidth = pq * Yl;
      Mo.strokeStyle = rs.ⲆᐃⵠΔΔⵠⲆ[ff.time];
      Mo.lineCap = "round";
      Mo.arc(0, e + c.height / 2, pq * 25, 0, Math.PI * 2 * a.timeout.ᐃⲆⵠ);
      Mo.stroke();
      Mo.restore();
    }
  }
  function $m() {
    var a = dx.ⲆΔⲆΔⵠ;
    if (a.wait) {
      var b = a.timeout.ⲆᐃⲆ();
      Mo.save();
      var c = ᐃΔ[792];
      Mo.translate(c.width - Ht * pq, fx.ᐃⲆᐃΔ.translate.y - pq * 125);
      var d = -c.width / qi + Vq;
      var e = -c.height / 2 - yn;
      Mm(Mo, c, d, e);
      Mo.beginPath();
      Mo.lineWidth = Eg * pq;
      Mo.strokeStyle = rs.ⵠΔΔⵠⲆΔⵠ[ff.time];
      Mo.lineCap = "round";
      Mo.arc($r, e + c.height / Ol, pq * 25, Md, a.timeout.ᐃⲆⵠ * (tk * Math.PI));
      Mo.stroke();
      Mo.restore();
      if (b) {
        a.wait = false;
        a.timeout.ᐃⲆⵠ = 0;
        a.timeout.ⵠᐃᐃ = ds;
      }
    }
  }
  function ep() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == 0) {
        this.ΔᐃΔ.ⲆᐃⲆ = false;
      }
      var a = (bd - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * hx * 600 * pq;
      var b = Math.sin(this.ΔᐃΔ.angle - this.angle) * a;
      var c = a * Math.cos(this.ΔᐃΔ.angle - this.angle);
    } else {
      b = 0;
      c = Rl;
    }
    ⵠⵠ = ᐃΔ[167][ff.time];
    ΔⲆⲆ = -ⵠⵠ.width;
    ⵠΔⲆ = -ⵠⵠ.height;
    Mm(Mo, ⵠⵠ, -ΔⲆⲆ / jb + b, -ⵠΔⲆ / fh + c, ΔⲆⲆ, ⵠΔⲆ);
    if (this.lock) {
      ⵠⵠ = ᐃΔ[148][ff.time];
      ΔⲆⲆ = -ⵠⵠ.width;
      ⵠΔⲆ = -ⵠⵠ.height;
      Mm(Mo, ⵠⵠ, -ΔⲆⲆ / 2 + b - pq * _h, -ⵠΔⲆ / nd + c, ΔⲆⲆ, ⵠΔⲆ);
    }
    Mo.restore();
  }
  function ip() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[811][ff.time];
    ΔⲆⲆ = -ⵠⵠ.width;
    ⵠΔⲆ = -ⵠⵠ.height;
    Mm(Mo, ⵠⵠ, -ΔⲆⲆ / 2, -ⵠΔⲆ / nd, ΔⲆⲆ, ⵠΔⲆ);
    Mo.restore();
  }
  function tp() {
    var a = -8;
    if (dx.ᐃⵠⵠΔᐃ.enabled) {
      var b = ᐃΔ[546];
      Mm(Mo, b, dx.ᐃⵠⵠΔᐃ.translate.x, dx.ᐃⵠⵠΔᐃ.translate.y + a);
      a += 70;
    }
    if (dx.ᐃΔⲆⵠΔⵠⵠ === 1) {
      b = ᐃΔ[549];
      Mm(Mo, b, dx.ᐃⵠⵠΔᐃ.translate.x, dx.ᐃⵠⵠΔᐃ.translate.y + a);
      a += 70;
    } else if (dx.ᐃⲆᐃΔ.ᐃΔᐃΔⵠ.x < 0.25 || dx.ᐃⲆᐃΔ.ⲆⵠⲆⵠⵠⵠᐃ.x < 0.25 || dx.ᐃⲆᐃΔ.ΔΔᐃⵠΔⵠΔ.x < 0.25 || dx.ᐃⲆᐃΔ.ⵠⲆⲆⲆⵠⵠⵠ.x < 0.25 || dx.ᐃⲆᐃΔ.ⲆⲆⲆΔᐃ.x < 0.25) {
      b = ᐃΔ[548];
      Mm(Mo, b, dx.ᐃⵠⵠΔᐃ.translate.x, dx.ᐃⵠⵠΔᐃ.translate.y + a);
      a += 70;
    }
    if (dx.ⵠⵠⵠᐃⵠ > 0) {
      b = ᐃΔ[547];
      Mm(Mo, b, dx.ᐃⵠⵠΔᐃ.translate.x, dx.ᐃⵠⵠΔᐃ.translate.y + a);
      var c = Rm[dx.ⵠⵠⵠᐃⵠ];
      if (hl === c) {
        c = Au(pq, dx.ⵠⵠⵠᐃⵠ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", nl);
        Rm[dx.ⵠⵠⵠᐃⵠ] = c;
      }
      if (dx.ⵠⵠⵠᐃⵠ < 9) {
        Mm(Mo, c, dx.ᐃⵠⵠΔᐃ.translate.x - 39, dx.ᐃⵠⵠΔᐃ.translate.y + a + mr);
      } else {
        Mm(Mo, c, dx.ᐃⵠⵠΔᐃ.translate.x - 46, dx.ᐃⵠⵠΔᐃ.translate.y + a + fl);
      }
    }
  }
  function np() {
    var a = dx.ΔⵠⲆᐃⲆ;
    if (a.wait) {
      var b = a.timeout.ⲆᐃⲆ();
      Mo.save();
      var c = ᐃΔ[794];
      Mo.translate(c.width - pq * 12, fx.ᐃⲆᐃΔ.translate.y - pq * 190);
      var d = -c.width / 2 + J;
      var e = -c.height / qo - Oa;
      Mm(Mo, c, d, e);
      Mo.beginPath();
      Mo.lineWidth = pq * 5;
      Mo.strokeStyle = rs.ⵠΔΔⵠⲆΔⵠ[ff.time];
      Mo.lineCap = "round";
      Mo.arc(9, e + c.height / Gl, pq * 25, yj, Math.PI * 2 * a.timeout.ᐃⲆⵠ);
      Mo.stroke();
      Mo.restore();
      if (b) {
        a.wait = Tg;
        a.timeout.ᐃⲆⵠ = 0;
        a.timeout.ⵠᐃᐃ = false;
      }
    }
  }
  function op(b) {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == 0) {
        this.ΔᐃΔ.ⲆᐃⲆ = false;
      }
      var c = pq * ((Co - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * hx * 600);
      var d = c * Math.sin(this.ΔᐃΔ.angle - this.angle);
      var e = Math.cos(this.ΔᐃΔ.angle - this.angle) * c;
    } else {
      d = 0;
      e = qb;
    }
    if (b === 913 && !ff.transition) {
      var f = 0;
      for (var g = ff.Δᐃⵠ[rw.ⵠΔΔⵠ], h = tj; h < g.length; h++) {
        var i = ᐃΔᐃⵠ.ⵠⵠΔᐃ(g[h], this);
        if (i < 140 && i > 35) {
          f = An;
          break;
        }
        if (i <= 35) {
          f = Mg;
        }
      }
      this.opacity = Ah === f ? Math.max(0.5, this.opacity - hx / 1.5) : Math.min(1, this.opacity + hx / 1.5);
      Mo.globalAlpha = this.opacity;
    }
    ⵠⵠ = ᐃΔ[b][ff.time];
    ΔⲆⲆ = -ⵠⵠ.width;
    ⵠΔⲆ = -ⵠⵠ.height;
    Mm(Mo, ⵠⵠ, -ΔⲆⲆ / Ht + d, -ⵠΔⲆ / 2 + e, ΔⲆⲆ, ⵠΔⲆ);
    Mo.globalAlpha = Ni;
    Mo.restore();
  }
  function rp() {
    var a = ff.ᐃⵠⲆⵠⵠ;
    var b = ᐃΔ[725][ff.time];
    Mm(Mo, b, a.translate.x, a.translate.y);
    Mo.save();
    Mo.translate(a.translate.x + b.width / 2, a.translate.y + b.height / 2);
    ff.ᐃⵠⲆⵠⵠ.now = (new Date().getTime() - a.ᐃⲆⲆᐃⵠ + a.ΔΔᐃⵠⲆ) % ow.ⲆᐃΔ;
    var c = Math.PI * qo * ff.ᐃⵠⲆⵠⵠ.now / ow.ⲆᐃΔ - Math.PI / 2;
    Mo.rotate(c);
    Mm(Mo, ᐃΔ[726], -b.width / 2, -b.height / Od);
    Mo.restore();
  }
  function ap() {
    Mo.save();
    var a = pq;
    if (dx.ᐃⲆᐃΔ.Δᐃᐃᐃᐃ.x < 0.25) {
      Mo.globalAlpha = dx.ᐃⲆᐃΔ.ᐃⵠΔⵠᐃᐃⲆ.ᐃⲆⵠ;
    }
    var b = dx.ΔᐃⲆⵠ.ⵠΔΔᐃΔ.length > 0 ? -70 : Aa;
    if (dx.ⲆⵠⵠΔ.open || dx.ⵠⲆΔⵠⵠ.open && dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(109) != -bs || dx.ⲆⵠΔⵠ.open && dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(134) != -wh || dx.ⵠΔⲆⵠ.open && dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(109) != -1 || dx.ΔⲆᐃΔⲆ.open && dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(180) != -1 || dx.ΔΔⵠⲆ.open && (-Ls != dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(109) || dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(131) != -1)) {
      b -= pq * 50;
    }
    Mo.translate((Do - pq * 950) / 2, b);
    Mo.fillStyle = "#69A148";
    Mo.fillRect(this.translate.x + pq * 37, this.translate.y + pq * Xj, dx.ᐃⲆᐃΔ.Δᐃᐃᐃᐃ.x * 178 * pq, pq * 18);
    Mo.globalAlpha = Fb;
    if (dx.ᐃⲆᐃΔ.ⲆⵠⲆⵠⵠⵠᐃ.x < 0.35) {
      Mo.fillStyle = "#8F050A";
      Mo.globalAlpha = dx.ᐃⲆᐃΔ.ᐃΔᐃⲆΔᐃΔ.ᐃⲆⵠ;
      Mo.fillRect(this.translate.x + pq * 277, this.translate.y + pq * 17, pq * 178, pq * 18);
      Mo.globalAlpha = Kg;
    }
    Mo.fillStyle = "#AF352A";
    Mo.fillRect(this.translate.x + pq * 277, this.translate.y + pq * 17, pq * (dx.ᐃⲆᐃΔ.ⲆⵠⲆⵠⵠⵠᐃ.x * 178), pq * 18);
    if (dx.ᐃⲆᐃΔ.ᐃΔᐃΔⵠ.x < 0.35) {
      Mo.fillStyle = "#366B91";
      Mo.globalAlpha = dx.ᐃⲆᐃΔ.ⲆΔΔⵠⲆΔᐃ.ᐃⲆⵠ;
      Mo.fillRect(this.translate.x + pq * 517, this.translate.y + Ch * pq, pq * 178, pq * 18);
      Mo.globalAlpha = Ek;
    }
    Mo.fillStyle = "#669BB1";
    Mo.fillRect(this.translate.x + pq * 517, this.translate.y + pq * 17, dx.ᐃⲆᐃΔ.ᐃΔᐃΔⵠ.x * 178 * pq, pq * 18);
    if (dx.ᐃⲆᐃΔ.ᐃΔᐃΔⵠ.x > 0.99) {
      if (dx.ᐃⲆᐃΔ.ⲆⲆⲆΔᐃ.x < 0.35) {
        Mo.fillStyle = "#6C4036";
        Mo.globalAlpha = dx.ᐃⲆᐃΔ.Δᐃⵠᐃᐃᐃⵠ.ᐃⲆⵠ;
        Mo.fillRect(this.translate.x + pq * 517, this.translate.y + pq * 17, pq * 178, ag * pq);
        Mo.globalAlpha = bs;
      }
      Mo.fillStyle = "#9C4036";
      Mo.fillRect(this.translate.x + pq * 517, this.translate.y + Ch * pq, pq * ((_ - dx.ᐃⲆᐃΔ.ⲆⲆⲆΔᐃ.x) * 178), pq * 18);
    }
    if (dx.ᐃⲆᐃΔ.ΔΔᐃⵠΔⵠΔ.x < 0.35) {
      Mo.fillStyle = "#001A57";
      Mo.globalAlpha = dx.ᐃⲆᐃΔ.ⵠΔⲆⵠΔⲆᐃ.ᐃⲆⵠ;
      Mo.fillRect(this.translate.x + pq * 757, this.translate.y + pq * 17, pq * 178, pq * 18);
      Mo.globalAlpha = 1;
    }
    Mo.fillStyle = "#074A87";
    Mo.fillRect(this.translate.x + pq * 757, this.translate.y + Il * pq, dx.ᐃⲆᐃΔ.ΔΔᐃⵠΔⵠΔ.x * 178 * pq, pq * 18);
    pq = a;
    Mm(Mo, this.ⵠⵠ, this.translate.x, this.translate.y);
    this.y = this.translate.y + b;
    Mo.restore();
    if (dx.ᐃⲆᐃΔ.ⵠⲆⲆⲆⵠⵠⵠ.x < 0.99) {
      var c = Math.floor(mq - ᐃΔ[608].width / 2);
      b += this.translate.y - ᐃΔ[608].height - pq * Jb;
      Mo.fillStyle = "#BBE8EF";
      Mo.fillRect(c + Bh, b + lu * pq, pq * 588 * dx.ᐃⲆᐃΔ.ⵠⲆⲆⲆⵠⵠⵠ.x, pq * vc);
      if (dx.ᐃⲆᐃΔ.ⵠⲆⲆⲆⵠⵠⵠ.x < 0.35) {
        Mo.fillStyle = "#9BA8AF";
        Mo.globalAlpha = dx.ᐃⲆᐃΔ.ⲆΔΔΔⵠⲆΔ.ᐃⲆⵠ;
        Mo.fillRect(c + Ks, b + Jb, pq * 588, pq * lt);
        Mo.globalAlpha = 1;
      }
      Mm(Mo, ᐃΔ[608], c, b);
      this.y = b;
    }
  }
  function sp() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[321][ff.time];
    ΔⲆⲆ = -ⵠⵠ.width;
    ⵠΔⲆ = -ⵠⵠ.height;
    Mm(Mo, ⵠⵠ, -ΔⲆⲆ / Nj, -ⵠΔⲆ / Od, ΔⲆⲆ, ⵠΔⲆ);
    Mo.restore();
  }
  function hp(a) {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == 0) {
        this.ΔᐃΔ.ⲆᐃⲆ = false;
      }
      var b = pq * ((1 - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * hx * 600);
      var c = Math.sin(this.ΔᐃΔ.angle - this.angle) * b;
      var d = Math.cos(this.ΔᐃΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    ⵠⵠ = ᐃΔ[a][ff.time];
    ΔⲆⲆ = -ⵠⵠ.width;
    ⵠΔⲆ = -ⵠⵠ.height;
    Mm(Mo, ⵠⵠ, -ΔⲆⲆ / 2 + c, -ⵠΔⲆ / 2 + d, ΔⲆⲆ, ⵠΔⲆ);
    Mo.restore();
  }
  var lp = gl;
  function _u() {
    var a = Math.PI / 2;
    var b = Math.PI / Zt;
    this.ΔⵠΔⵠ.ⲆᐃⲆ();
    this.ⵠΔⲆᐃⲆΔⵠ.ⲆᐃⲆ();
    this.ΔⵠΔⲆᐃⵠᐃ.ⲆᐃⲆ();
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    c = fg === this.info ? ᐃΔ[231][ff.time] : ᐃΔ[1053][ff.time];
    ΔⲆⲆ = -c.width * this.ΔⵠΔⵠ.ᐃⲆⵠ;
    ⵠΔⲆ = this.ΔⵠΔⵠ.ᐃⲆⵠ * -c.height;
    Mm(Mo, c, -ΔⲆⲆ / il, -ⵠΔⲆ / Gl, ΔⲆⲆ, ⵠΔⲆ);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      if (this.ΔᐃΔ.ⲆᐃⲆ() && li == this.ΔᐃΔ.ⵠᐃᐃ) {
        this.action -= lw.ᐃᐃⲆⲆ;
      }
      Mo.globalAlpha = 0.6 - this.ΔᐃΔ.ᐃⲆⵠ;
      var c = ᐃΔ[1056];
      Mm(Mo, c, -ΔⲆⲆ / ta, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
      Mo.globalAlpha = 1;
    }
    if (this.action & lw.ΔΔΔⵠᐃ) {
      if (this.ⵠⲆⵠᐃᐃ.ⲆᐃⲆ() && this.ⵠⲆⵠᐃᐃ.ⵠᐃᐃ == 0) {
        this.action -= lw.ΔΔΔⵠᐃ;
      }
      Mo.globalAlpha = 0.6 - this.ⵠⲆⵠᐃᐃ.ᐃⲆⵠ;
      c = ᐃΔ[1065];
      Mm(Mo, c, -ΔⲆⲆ / 2, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle + b);
    Mo.translate(ea, 0);
    Mo.rotate(a);
    c = this.info === 0 ? ᐃΔ[1060][ff.time] : ᐃΔ[1059][ff.time];
    ΔⲆⲆ = this.ⵠΔⲆᐃⲆΔⵠ.ᐃⲆⵠ * -c.width;
    ⵠΔⲆ = -c.height * this.ⵠΔⲆᐃⲆΔⵠ.ᐃⲆⵠ;
    Mm(Mo, c, -ΔⲆⲆ / 2, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      Mo.globalAlpha = 0.6 - this.ΔᐃΔ.ᐃⲆⵠ;
      c = ᐃΔ[1057];
      Mm(Mo, c, -ΔⲆⲆ / qi, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
      Mo.globalAlpha = Ga;
    }
    if (this.action & lw.ΔΔΔⵠᐃ) {
      Mo.globalAlpha = 0.6 - this.ⵠⲆⵠᐃᐃ.ᐃⲆⵠ;
      c = ᐃΔ[1066];
      Mm(Mo, c, -ΔⲆⲆ / 2, -ⵠΔⲆ / bq, ΔⲆⲆ, ⵠΔⲆ);
      Mo.globalAlpha = Ek;
    }
    Mo.restore();
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle + a + b);
    Mo.translate(og, Aa);
    Mo.rotate(a);
    c = bu === this.info ? ᐃΔ[1063][ff.time] : ᐃΔ[1062][ff.time];
    ΔⲆⲆ = -c.width * this.ΔⵠΔⲆᐃⵠᐃ.ᐃⲆⵠ;
    ⵠΔⲆ = this.ΔⵠΔⲆᐃⵠᐃ.ᐃⲆⵠ * -c.height;
    Mm(Mo, c, -ΔⲆⲆ / 2, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      Mo.globalAlpha = 0.6 - this.ΔᐃΔ.ᐃⲆⵠ;
      c = ᐃΔ[1058];
      Mm(Mo, c, -ΔⲆⲆ / ta, -ⵠΔⲆ / nd, ΔⲆⲆ, ⵠΔⲆ);
      Mo.globalAlpha = bd;
    }
    if (this.action & lw.ΔΔΔⵠᐃ) {
      Mo.globalAlpha = 0.6 - this.ⵠⲆⵠᐃᐃ.ᐃⲆⵠ;
      c = ᐃΔ[1067];
      Mm(Mo, c, -ΔⲆⲆ / br, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
  }
  function up() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == 0) {
        this.ΔᐃΔ.ⲆᐃⲆ = false;
      }
      var b = pq * ((1 - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * hx * 600);
      var c = Math.sin(this.ΔᐃΔ.angle - this.angle) * b;
      var d = Math.cos(this.ΔᐃΔ.angle - this.angle) * b;
    } else {
      c = bu;
      d = An;
    }
    var e = this.info & 15;
    if (Ea === this.info || e === 0) {
      Mo.rotate(this.angle);
      this.ᐃⲆᐃᐃ.ⲆᐃⲆ();
      if (this.info & 16) {
        var f = ᐃΔ[970][ff.time];
      } else {
        f = ᐃΔ[208][ff.time];
      }
      var g = -f.width * this.ᐃⲆᐃᐃ.ᐃⲆⵠ;
      var h = this.ᐃⲆᐃᐃ.ᐃⲆⵠ * -f.height;
      Mm(Mo, f, -g / 2 + c, -h / 2 + d, g, h);
    } else {
      if (this.info & 16) {
        f = ᐃΔ[971][ff.time];
      } else {
        f = ᐃΔ[209][ff.time];
      }
      Mo.translate(0, f.height / br);
      Mm(Mo, f, c - f.width / Nj, -f.height + d);
    }
    Mo.restore();
  }
  function bp(a) {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    this.ΔⵠΔⵠ.ⲆᐃⲆ();
    ⵠⵠ = ᐃΔ[a][ff.time];
    ΔⲆⲆ = -ⵠⵠ.width * this.ΔⵠΔⵠ.ᐃⲆⵠ;
    ⵠΔⲆ = -ⵠⵠ.height * this.ΔⵠΔⵠ.ᐃⲆⵠ;
    Mm(Mo, ⵠⵠ, -ΔⲆⲆ / 2, -ⵠΔⲆ / Ht, ΔⲆⲆ, ⵠΔⲆ);
    Mo.restore();
  }
  function vp() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == 0) {
        this.ΔᐃΔ.ⲆᐃⲆ = false;
      }
      var b = pq * ((1 - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * hx * 600);
      var c = Math.sin(this.ΔᐃΔ.angle - this.angle) * b;
      var d = Math.cos(this.ΔᐃΔ.angle - this.angle) * b;
    } else {
      c = fg;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === eb || e === Fj) {
      Mo.rotate(this.angle);
      this.ᐃⲆᐃᐃ.ⲆᐃⲆ();
      if (this.info & 16) {
        var f = ᐃΔ[849][ff.time];
      } else {
        f = ᐃΔ[193][ff.time];
      }
      var g = this.ᐃⲆᐃᐃ.ᐃⲆⵠ * -f.width;
      var h = this.ᐃⲆᐃᐃ.ᐃⲆⵠ * -f.height;
      Mm(Mo, f, -g / 2 + c, -h / 2 + d, g, h);
    } else {
      if (this.info & 16) {
        f = ᐃΔ[869][ff.time];
      } else {
        f = ᐃΔ[194][ff.time];
      }
      Mo.translate(0, f.height / 2);
      Mm(Mo, f, c - f.width / Nj, -f.height + d);
    }
    Mo.restore();
  }
  function dp() {
    this.ΔⵠΔⵠ.ⲆᐃⲆ();
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    a = this.info === fg ? ᐃΔ[248][ff.time] : ᐃΔ[1222][ff.time];
    ΔⲆⲆ = this.ΔⵠΔⵠ.ᐃⲆⵠ * -a.width;
    ⵠΔⲆ = -a.height * this.ΔⵠΔⵠ.ᐃⲆⵠ;
    Mm(Mo, a, -ΔⲆⲆ / jb, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      if (this.ΔᐃΔ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃᐃ == 0) {
        this.action -= lw.ᐃᐃⲆⲆ;
      }
      Mo.globalAlpha = 0.6 - this.ΔᐃΔ.ᐃⲆⵠ;
      var a = ᐃΔ[1223];
      Mm(Mo, a, -ΔⲆⲆ / 2, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
  }
  function cp(a, b, c) {
    if (a >= An) {
      ⵠⵠ = ᐃΔ[a][ff.time];
      switch (a) {
        case 71:
        case 72:
        case 73:
          Uv(a, ⵠⵠ, -ⵠⵠ.width / 4 - (0 + b) * pq, -ⵠⵠ.height / 4 + (c + 35) * pq);
          break;
        case 74:
          Uv(a, ⵠⵠ, -ⵠⵠ.width / 4 - pq * (1 + b), -ⵠⵠ.height / Jl + (c + 45) * pq);
          break;
        case 75:
        case 76:
          Uv(a, ⵠⵠ, -ⵠⵠ.width / eh - (ck + b) * pq, -ⵠⵠ.height / zt + pq * (c + 40));
      }
    }
  }
  function mp() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    this.ΔᐃΔⲆᐃ.ⲆᐃⲆ();
    ⵠⵠ = ᐃΔ[1192][ff.time];
    ΔⲆⲆ = this.ΔᐃΔⲆᐃ.ᐃⲆⵠ * -ⵠⵠ.width;
    ⵠΔⲆ = this.ΔᐃΔⲆᐃ.ᐃⲆⵠ * -ⵠⵠ.height;
    Mm(Mo, ⵠⵠ, -ΔⲆⲆ / 2, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
    Mo.restore();
  }
  function pp() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == 0) {
        this.ΔᐃΔ.ⲆᐃⲆ = false;
      }
      var a = pq * ((Gt - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * hx * 600);
      var b = Math.sin(this.ΔᐃΔ.angle - this.angle) * a;
      var c = Math.cos(this.ΔᐃΔ.angle - this.angle) * a;
    } else {
      b = Ah;
      c = 0;
    }
    if (gl === this.info) {
      ⵠⵠ = ᐃΔ[183][ff.time];
    } else {
      ⵠⵠ = ᐃΔ[802][ff.time][this.info - 1];
    }
    Mm(Mo, ⵠⵠ, -ⵠⵠ.width / Nr + b, -ⵠⵠ.height / 2 + c);
    Mo.restore();
  }
  function Cp() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    if (ᐃΔᐃⵠ.ⵠⵠΔᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + hx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - hx, 1);
    }
    this.ΔⵠΔⵠ.ⲆᐃⲆ();
    this.rotate.ⲆᐃⲆ();
    a = this.info === 0 ? ᐃΔ[232][ff.time] : ᐃΔ[1068][ff.time];
    ΔⲆⲆ = this.ΔⵠΔⵠ.ᐃⲆⵠ * -a.width * this.scale;
    ⵠΔⲆ = this.scale * (this.ΔⵠΔⵠ.ᐃⲆⵠ * -a.height);
    Mm(Mo, a, -ΔⲆⲆ / mg, -ⵠΔⲆ / hr, ΔⲆⲆ / 2, ⵠΔⲆ / 2);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      if (this.ΔᐃΔ.ⲆᐃⲆ() && Tg == this.ΔᐃΔ.ⵠᐃᐃ) {
        this.action -= lw.ᐃᐃⲆⲆ;
      }
      Mo.globalAlpha = 0.6 - this.ΔᐃΔ.ᐃⲆⵠ;
      var a = ᐃΔ[1077];
      Mm(Mo, a, -ΔⲆⲆ / 4, -ⵠΔⲆ / ge, ΔⲆⲆ / qi, ⵠΔⲆ / Nj);
      Mo.globalAlpha = ig;
    }
    a = this.info === sb ? ᐃΔ[1072][ff.time] : ᐃΔ[1071][ff.time];
    ΔⲆⲆ = -a.width * this.ΔⵠΔⵠ.ᐃⲆⵠ * this.scale;
    ⵠΔⲆ = this.scale * (this.ΔⵠΔⵠ.ᐃⲆⵠ * -a.height);
    Mo.save();
    Mo.translate(pq * -40, Lc * pq);
    Mo.rotate(this.rotate.ᐃⲆⵠ);
    Mm(Mo, a, -ΔⲆⲆ * pq / 4, pq * -ⵠΔⲆ / yn, ΔⲆⲆ / zd, ⵠΔⲆ / On);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      Mo.globalAlpha = 0.6 - this.ΔᐃΔ.ᐃⲆⵠ;
      a = ᐃΔ[1078];
      Mm(Mo, a, pq * -ΔⲆⲆ / cq, pq * -ⵠΔⲆ / Mu, ΔⲆⲆ / qo, ⵠΔⲆ / tk);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
    a = this.info === 0 ? ᐃΔ[1075][ff.time] : ᐃΔ[1074][ff.time];
    Mo.save();
    Mo.translate(pq * 40, pq * Wg);
    Mo.rotate(-this.rotate.ᐃⲆⵠ);
    Mm(Mo, a, -ΔⲆⲆ * pq / co, pq * -ⵠΔⲆ / co, ΔⲆⲆ / 2, ⵠΔⲆ / Nr);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      Mo.globalAlpha = 0.6 - this.ΔᐃΔ.ᐃⲆⵠ;
      a = ᐃΔ[1079];
      Mm(Mo, a, pq * -ΔⲆⲆ / 4, pq * -ⵠΔⲆ / 4, ΔⲆⲆ / 2, ⵠΔⲆ / 2);
      Mo.globalAlpha = Fb;
    }
    Mo.restore();
    Mo.restore();
  }
  function Tp() {
    if (this.info >= 10) {
      Mo.save();
      Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
      Mo.rotate(this.angle);
      if (this.ΔᐃΔ.ⲆᐃⲆ) {
        if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == Jh) {
          this.ΔᐃΔ.ⲆᐃⲆ = Eq;
        }
        var a = hx * (1 - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * 600 * pq;
        var b = a * Math.sin(this.ΔᐃΔ.angle - this.angle);
        var c = a * Math.cos(this.ΔᐃΔ.angle - this.angle);
      } else {
        b = 0;
        c = et;
      }
      this.ᐃⲆᐃᐃ.ⲆᐃⲆ();
      var d = ᐃΔ[115][ff.time];
      var e = this.ᐃⲆᐃᐃ.ᐃⲆⵠ * -d.width;
      var f = -d.height * this.ᐃⲆᐃᐃ.ᐃⲆⵠ;
      Mm(Mo, d, -e / 2 + b, -f / 2 + c, e, f);
      Mo.restore();
    }
  }
  function fp(b) {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    this.ᐃⲆᐃᐃ.ⲆᐃⲆ();
    Mo.globalAlpha = 0.3;
    var c = ᐃΔ[282][ff.time];
    var d = this.ᐃⲆᐃᐃ.ᐃⲆⵠ * -c.width;
    var e = this.ᐃⲆᐃᐃ.ᐃⲆⵠ * -c.height;
    Mm(Mo, c, -d / Od, -e / fh, d, e);
    Mo.globalAlpha = 1;
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == 0) {
        this.ΔᐃΔ.ⲆᐃⲆ = hg;
      }
      var f = (sc - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * hx * 600 * pq;
      var g = Math.sin(this.ΔᐃΔ.angle - this.angle) * f;
      var h = f * Math.cos(this.ΔᐃΔ.angle - this.angle);
    } else {
      g = 0;
      h = 0;
    }
    c = ᐃΔ[b][ff.time];
    Mm(Mo, c, -c.width / 2 + g, -c.height / 2 + h);
    Mo.restore();
  }
  function zp() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && gh == this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ) {
        this.ΔᐃΔ.ⲆᐃⲆ = M;
      }
      var b = hx * (1 - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * 600 * pq;
      var c = Math.sin(this.ΔᐃΔ.angle - this.angle) * b;
      var d = b * Math.cos(this.ΔᐃΔ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || sb === e) {
      Mo.rotate(this.angle);
      this.ᐃⲆᐃᐃ.ⲆᐃⲆ();
      if (this.info & 16) {
        var f = ᐃΔ[812][ff.time];
      } else {
        f = ᐃΔ[188][ff.time];
      }
      var g = this.ᐃⲆᐃᐃ.ᐃⲆⵠ * -f.width;
      var h = -f.height * this.ᐃⲆᐃᐃ.ᐃⲆⵠ;
      Mm(Mo, f, -g / 2 + c, -h / ta + d, g, h);
    } else {
      if (this.info & 16) {
        f = ᐃΔ[813][ff.time];
      } else {
        f = ᐃΔ[189][ff.time];
      }
      Mo.translate(fg, f.height / Gl);
      Mm(Mo, f, c - f.width / 2, -f.height + d);
    }
    Mo.restore();
  }
  function yp(a, b) {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    this.ΔⵠΔⵠ.ⲆᐃⲆ();
    c = ᐃΔ[a][ff.time];
    ΔⲆⲆ = -c.width * this.ΔⵠΔⵠ.ᐃⲆⵠ;
    ⵠΔⲆ = this.ΔⵠΔⵠ.ᐃⲆⵠ * -c.height;
    Mm(Mo, c, -ΔⲆⲆ / 2, -ⵠΔⲆ / tk, ΔⲆⲆ, ⵠΔⲆ);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      if (this.ΔᐃΔ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃᐃ == 0) {
        this.action -= lw.ᐃᐃⲆⲆ;
      }
      Mo.globalAlpha = 0.6 - this.ΔᐃΔ.ᐃⲆⵠ;
      var c = ᐃΔ[b];
      Mm(Mo, c, -ΔⲆⲆ / il, -ⵠΔⲆ / Nj, ΔⲆⲆ, ⵠΔⲆ);
      Mo.globalAlpha = bd;
    }
    Mo.restore();
  }
  function wp(a, b, c) {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + b, dx.ⲆΔⲆ.y + c);
    Mo.rotate(this.angle);
    Mo.translate(this.x - b, this.y - c);
    this.ΔⵠΔⵠ.ⲆᐃⲆ();
    ⵠⵠ = ᐃΔ[a][ff.time];
    ΔⲆⲆ = -ⵠⵠ.width * this.ΔⵠΔⵠ.ᐃⲆⵠ;
    ⵠΔⲆ = this.ΔⵠΔⵠ.ᐃⲆⵠ * -ⵠⵠ.height;
    Mm(Mo, ⵠⵠ, -ΔⲆⲆ / 2, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
    Mo.restore();
  }
  function Pp() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    if (ᐃΔᐃⵠ.ⵠⵠΔᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + hx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - hx, sl);
    }
    this.ΔⵠΔⵠ.ⲆᐃⲆ();
    this.rotate.ⲆᐃⲆ();
    a = ᐃΔ[450][ff.time];
    ΔⲆⲆ = this.ΔⵠΔⵠ.ᐃⲆⵠ * -a.width * this.scale;
    ⵠΔⲆ = this.scale * (this.ΔⵠΔⵠ.ᐃⲆⵠ * -a.height);
    Mm(Mo, a, -ΔⲆⲆ / oe, -ⵠΔⲆ / 4, ΔⲆⲆ / 2, ⵠΔⲆ / bq);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      if (this.ΔᐃΔ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃᐃ == ml) {
        this.action -= lw.ᐃᐃⲆⲆ;
      }
      Mo.globalAlpha = 0.6 - this.ΔᐃΔ.ᐃⲆⵠ;
      var a = ᐃΔ[464];
      Mm(Mo, a, -ΔⲆⲆ / Zt, -ⵠΔⲆ / co, ΔⲆⲆ / 2, ⵠΔⲆ / Ol);
      Mo.globalAlpha = 1;
    }
    a = ᐃΔ[453][ff.time];
    ΔⲆⲆ = -a.width * this.ΔⵠΔⵠ.ᐃⲆⵠ * this.scale;
    ⵠΔⲆ = this.scale * (this.ΔⵠΔⵠ.ᐃⲆⵠ * -a.height);
    Mo.save();
    Mo.translate(pq * -60, pq * tl);
    Mo.rotate(this.rotate.ᐃⲆⵠ);
    Mm(Mo, a, pq * -ΔⲆⲆ / 4, pq * -ⵠΔⲆ / eh, ΔⲆⲆ / X, ⵠΔⲆ / 2);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      Mo.globalAlpha = 0.6 - this.ΔᐃΔ.ᐃⲆⵠ;
      a = ᐃΔ[468];
      Mm(Mo, a, pq * -ΔⲆⲆ / mg, pq * -ⵠΔⲆ / 4, ΔⲆⲆ / zd, ⵠΔⲆ / 2);
      Mo.globalAlpha = _;
    }
    Mo.restore();
    a = ᐃΔ[454][ff.time];
    Mo.save();
    Mo.translate(pq * 60, pq * 20);
    Mo.rotate(-this.rotate.ᐃⲆⵠ);
    Mm(Mo, a, pq * -ΔⲆⲆ / 4, -ⵠΔⲆ * pq / ge, ΔⲆⲆ / 2, ⵠΔⲆ / 2);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      Mo.globalAlpha = 0.6 - this.ΔᐃΔ.ᐃⲆⵠ;
      a = ᐃΔ[469];
      Mm(Mo, a, -ΔⲆⲆ * pq / Qt, pq * -ⵠΔⲆ / 4, ΔⲆⲆ / 2, ⵠΔⲆ / 2);
      Mo.globalAlpha = ck;
    }
    Mo.restore();
    Mo.restore();
  }
  function Ap(f, e, i, j, k, n, o, a = 0, p) {
    for (var h = f; h <= e; h++) {
      for (var q = i; j >= q; q++) {
        var r = bx.ⲆⲆΔⵠ[h][q];
        if (ri !== r && es !== r[n]) {
          var s = r[n];
          var t = ᐃΔ[k][ff.time][s.ⵠᐃⲆⵠΔⵠᐃ];
          Mm(Mo, t, dx.ⲆΔⲆ.x + s.x - t.width / (ⵠΔΔⲆᐃ * 4), dx.ⲆΔⲆ.y + s.y - t.height / (ⵠΔΔⲆᐃ * 4), t.width / (jg * ⵠΔΔⲆᐃ), t.height / (ⵠΔΔⲆᐃ * il));
          if (pf.ⲆⵠΔᐃΔ) {
            var w = 2147483648;
            var x = ((h * 1000 + q) * 1103515245 + 12345) % w / w;
            if (x < 0.2) {
              x = Math.floor(ᐃΔ[1025][ff.time][s.ⵠᐃⲆⵠΔⵠᐃ].length * (x * 5));
              t = ᐃΔ[1025][ff.time][s.ⵠᐃⲆⵠΔⵠᐃ][x];
              Mm(Mo, t, dx.ⲆΔⲆ.x + s.x - t.width / (ⵠΔΔⲆᐃ * Mu), dx.ⲆΔⲆ.y + s.y - t.height / (ⵠΔΔⲆᐃ * 4), t.width / (ⵠΔΔⲆᐃ * 2), t.height / (ⵠΔΔⲆᐃ * 2));
            } else if (s.ⵠⲆⵠⲆⵠᐃⲆ !== 0) {
              t = ᐃΔ[1026][ff.time];
              var y = (lp + h % 2 * 30) % 60;
              Mo.globalAlpha = y < 30 ? y / 30 : ck - (y - 30) / 30;
              Mm(Mo, t, dx.ⲆΔⲆ.x + s.x - t.width / (ⵠΔΔⲆᐃ * 4), dx.ⲆΔⲆ.y + s.y - t.height / (ⵠΔΔⲆᐃ * 4) - 30 + y, t.width / (ⵠΔΔⲆᐃ * 2), t.height / (Nj * ⵠΔΔⲆᐃ));
              Mo.globalAlpha = er;
            }
          }
        }
      }
    }
  }
  function kp() {
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && Hj == this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ) {
        this.ΔᐃΔ.ⲆᐃⲆ = Jh;
      }
      var a = (1 - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * hx * 600 * pq;
      var b = a * Math.sin(this.ΔᐃΔ.angle - this.angle);
      var c = Math.cos(this.ΔᐃΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = Md;
    }
    Mo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += X * Math.random() - bd;
    }
    Mo.translate(dx.ⲆΔⲆ.x + this.x + b, dx.ⲆΔⲆ.y + this.y + c);
    Mo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[153][ff.time];
    Mm(Mo, ⵠⵠ, -ⵠⵠ.width / zd, -ⵠⵠ.height / Nj);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + hx * Ft) % (Math.PI * 2);
    }
    Mo.rotate(this.rotate);
    ⵠⵠ = ᐃΔ[1198][ff.time];
    Mm(Mo, ⵠⵠ, -ⵠⵠ.width / jb, -ⵠⵠ.height / 2);
    Mo.restore();
  }
  function xp() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    this.ΔᐃΔⲆᐃ.ⲆᐃⲆ();
    ⵠⵠ = ᐃΔ[289][ff.time];
    ΔⲆⲆ = this.ΔᐃΔⲆᐃ.ᐃⲆⵠ * -ⵠⵠ.width;
    ⵠΔⲆ = this.ΔᐃΔⲆᐃ.ᐃⲆⵠ * -ⵠⵠ.height;
    Mm(Mo, ⵠⵠ, -ΔⲆⲆ / qo, -ⵠΔⲆ / qi, ΔⲆⲆ, ⵠΔⲆ);
    Mo.restore();
  }
  function Jp() {
    if ((this.info & Ek) == 1) {
      this.ᐃΔⲆⵠΔ = Math.min(this.ᐃΔⲆⵠΔ + hx, 2.2);
    } else {
      this.ᐃΔⲆⵠΔ = Math.max(this.ᐃΔⲆⵠΔ - hx, et);
      this.ᐃΔⵠΔᐃⵠⲆ += hx;
      if (this.ᐃΔⵠΔᐃⵠⲆ > 0.1) {
        this.ᐃΔⵠΔᐃⵠⲆ = 0;
        var a = {
          x: this.x + Math.random() * 60 - 30,
          y: this.y + Math.random() * 60 - 30,
          a: 0,
          r: Math.random() * 30 + 30
        };
        this.ᐃⲆᐃᐃ.push(a);
      }
    }
    for (var b = 0; this.ᐃⲆᐃᐃ.length > b; b++) {
      a = this.ᐃⲆᐃᐃ[b];
      Mo.save();
      Mo.translate(dx.ⲆΔⲆ.x + a.x, dx.ⲆΔⲆ.y + a.y);
      a.a = Math.min(bs, a.a + hx / 2);
      var c = a.a;
      if (c < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (1 - c) * ko : 1;
      }
      Mo.globalAlpha = c * 0.8;
      Vt(Mo, Rl, Ah, a.r);
      St(Mo, rs.ᐃΔⲆⵠⲆⲆᐃ[ff.time]);
      Mo.restore();
      if (a.a === 1) {
        this.ᐃⲆᐃᐃ.splice(b, 1);
        b--;
      }
    }
  }
  function Mp() {
    if (this.info !== 10) {
      Mo.save();
      Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
      Mo.rotate(this.angle);
      if (this.ΔᐃΔ.ⲆᐃⲆ) {
        if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == 0) {
          this.ΔᐃΔ.ⲆᐃⲆ = false;
        }
        var a = pq * ((1 - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * hx * 600);
        var b = Math.sin(this.ΔᐃΔ.angle - this.angle) * a;
        var c = Math.cos(this.ΔᐃΔ.angle - this.angle) * a;
      } else {
        b = Fj;
        c = 0;
      }
      if (this.info & 16) {
        var d = ᐃΔ[623][ff.time];
      } else {
        d = ᐃΔ[287][ff.time];
      }
      Mm(Mo, d, -d.width / 2 + b, -d.width / 2 + c);
      Mo.restore();
      for (var e = this.info & 15, f = 0; e > f; f++) {
        this.ΔΔⲆⲆ[f].ⵠⲆⵠΔ(294);
      }
    }
  }
  function Bp() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == 0) {
        this.ΔᐃΔ.ⲆᐃⲆ = false;
      }
      var b = pq * (hx * (1 - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * 600);
      var c = Math.sin(this.ΔᐃΔ.angle - this.angle) * b;
      var d = Math.cos(this.ΔᐃΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = qb;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === An) {
      Mo.rotate(this.angle);
      this.ᐃⲆᐃᐃ.ⲆᐃⲆ();
      if (this.info & 16) {
        var f = ᐃΔ[838][ff.time];
      } else {
        f = ᐃΔ[191][ff.time];
      }
      var g = this.ᐃⲆᐃᐃ.ᐃⲆⵠ * -f.width;
      var h = this.ᐃⲆᐃᐃ.ᐃⲆⵠ * -f.height;
      Mm(Mo, f, -g / 2 + c, -h / Ht + d, g, h);
    } else {
      if (this.info & 16) {
        f = ᐃΔ[839][ff.time];
      } else {
        f = ᐃΔ[192][ff.time];
      }
      Mo.translate(0, f.height / tk);
      Mm(Mo, f, c - f.width / 2, -f.height + d);
    }
    Mo.restore();
  }
  function Dp() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    this.ΔΔᐃⲆᐃⵠⵠ = Math.min(1, this.ΔΔᐃⲆᐃⵠⵠ + hx * Od);
    Mo.globalAlpha = Math.min(1, Math.max(0, ᐃΔᐃⵠ.ⵠⵠΔᐃ(this, this.r) / 80)) * this.ΔΔᐃⲆᐃⵠⵠ;
    this.ΔⵠΔⵠ.ⲆᐃⲆ();
    ⵠⵠ = ᐃΔ[247][ff.time][this.ⲆΔⵠⵠⵠ];
    if (this.ⲆΔⵠⵠⵠ < 2) {
      ΔⲆⲆ = -ⵠⵠ.width * this.ΔⵠΔⵠ.ᐃⲆⵠ;
      ⵠΔⲆ = -ⵠⵠ.height * this.ΔⵠΔⵠ.ᐃⲆⵠ;
    } else if (Md === this.ⲆⵠⲆⵠⲆⲆⲆ) {
      ΔⲆⲆ = -ⵠⵠ.width;
      ⵠΔⲆ = -ⵠⵠ.height;
    } else {
      ΔⲆⲆ = -ⵠⵠ.width * 1.35;
      ⵠΔⲆ = -ⵠⵠ.height * 1.35;
    }
    Mm(Mo, ⵠⵠ, -ΔⲆⲆ / tk, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
    Mo.globalAlpha = 1;
    Mo.restore();
  }
  function Ep() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    var a = ᐃΔᐃⵠ.ⵠⵠΔᐃ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + hx / qo, 1.8) : Math.max(this.scale - hx, Fb);
    this.ΔⵠΔⵠ.ⲆᐃⲆ();
    this.rotate.ⲆᐃⲆ();
    this.ⲆⲆⵠᐃ = a < 350 ? Math.max(0, this.ⲆⲆⵠᐃ - hx * 2.2) : Math.min(Mg, this.ⲆⲆⵠᐃ + hx * 2.2);
    b = ᐃΔ[1135][ff.time];
    ΔⲆⲆ = this.scale * (-b.width * this.ΔⵠΔⵠ.ᐃⲆⵠ);
    ⵠΔⲆ = this.scale * (-b.height * this.ΔⵠΔⵠ.ᐃⲆⵠ);
    Mo.globalAlpha = Fb - this.ⲆⲆⵠᐃ;
    Mm(Mo, b, -ΔⲆⲆ / Og, -ⵠΔⲆ / Og, ΔⲆⲆ / 2, ⵠΔⲆ / 2);
    b = ᐃΔ[1119][ff.time];
    ΔⲆⲆ = this.scale * (this.ΔⵠΔⵠ.ᐃⲆⵠ * -b.width);
    ⵠΔⲆ = this.scale * (-b.height * this.ΔⵠΔⵠ.ᐃⲆⵠ);
    Mo.globalAlpha = this.ⲆⲆⵠᐃ;
    Mm(Mo, b, -ΔⲆⲆ / hr, -ⵠΔⲆ / Dd, ΔⲆⲆ / 2, ⵠΔⲆ / 2);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      if (this.ΔᐃΔ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃᐃ == Jh) {
        this.action -= lw.ᐃᐃⲆⲆ;
      }
      Mo.globalAlpha = (0.6 - this.ΔᐃΔ.ᐃⲆⵠ) * (Lu - this.ⲆⲆⵠᐃ);
      var b = ᐃΔ[1136];
      ΔⲆⲆ = this.scale * (-b.width * this.ΔⵠΔⵠ.ᐃⲆⵠ);
      ⵠΔⲆ = this.scale * (this.ΔⵠΔⵠ.ᐃⲆⵠ * -b.height);
      Mm(Mo, b, -ΔⲆⲆ / aq, -ⵠΔⲆ / cq, ΔⲆⲆ / Nj, ⵠΔⲆ / Gl);
      Mo.globalAlpha = this.ⲆⲆⵠᐃ * (0.6 - this.ΔᐃΔ.ᐃⲆⵠ);
      b = ᐃΔ[1128];
      ΔⲆⲆ = -b.width * this.ΔⵠΔⵠ.ᐃⲆⵠ * this.scale;
      ⵠΔⲆ = this.scale * (this.ΔⵠΔⵠ.ᐃⲆⵠ * -b.height);
      Mm(Mo, b, -ΔⲆⲆ / 4, -ⵠΔⲆ / 4, ΔⲆⲆ / 2, ⵠΔⲆ / nd);
      Mo.globalAlpha = 1;
    }
    b = ᐃΔ[1122][ff.time];
    ΔⲆⲆ = -b.width * this.ΔⵠΔⵠ.ᐃⲆⵠ * this.scale;
    ⵠΔⲆ = -b.height * this.ΔⵠΔⵠ.ᐃⲆⵠ * this.scale;
    Mo.save();
    Mo.translate(pq * -40, pq * 80);
    Mo.rotate(this.rotate.ᐃⲆⵠ);
    Mo.globalAlpha = this.ⲆⲆⵠᐃ;
    Mm(Mo, b, -ΔⲆⲆ * pq / 4, -ⵠΔⲆ * pq / 4, ΔⲆⲆ / fh, ⵠΔⲆ / jg);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      Mo.globalAlpha = this.ⲆⲆⵠᐃ * (0.6 - this.ΔᐃΔ.ᐃⲆⵠ);
      b = ᐃΔ[1129];
      Mm(Mo, b, -ΔⲆⲆ * pq / 4, pq * -ⵠΔⲆ / yn, ΔⲆⲆ / 2, ⵠΔⲆ / 2);
      Mo.globalAlpha = bs;
    }
    Mo.restore();
    b = ᐃΔ[1125][ff.time];
    Mo.save();
    Mo.translate(pq * 40, pq * 80);
    Mo.rotate(-this.rotate.ᐃⲆⵠ);
    Mo.globalAlpha = this.ⲆⲆⵠᐃ;
    Mm(Mo, b, -ΔⲆⲆ * pq / $j, -ⵠΔⲆ * pq / 4, ΔⲆⲆ / jb, ⵠΔⲆ / Ol);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      Mo.globalAlpha = (0.6 - this.ΔᐃΔ.ᐃⲆⵠ) * this.ⲆⲆⵠᐃ;
      b = ᐃΔ[1130];
      Mm(Mo, b, -ΔⲆⲆ * pq / mg, -ⵠΔⲆ * pq / 4, ΔⲆⲆ / 2, ⵠΔⲆ / On);
      Mo.globalAlpha = Gt;
    }
    Mo.globalAlpha = Gt;
    Mo.restore();
    Mo.restore();
  }
  function Ip() {
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == 0) {
        this.ΔᐃΔ.ⲆᐃⲆ = false;
      }
      var a = hx * (1 - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * 600 * pq;
      var b = a * Math.sin(this.ΔᐃΔ.angle - this.angle);
      var c = a * Math.cos(this.ΔᐃΔ.angle - this.angle);
    } else {
      b = Gk;
      c = 0;
    }
    Mo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * fh - ig;
    }
    Mo.translate(dx.ⲆΔⲆ.x + this.x + b, dx.ⲆΔⲆ.y + this.y + c);
    Mo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[155][ff.time];
    Mm(Mo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + wi * hx) % (nd * Math.PI);
    }
    Mo.rotate(this.rotate);
    ⵠⵠ = ᐃΔ[1206][ff.time];
    Mm(Mo, ⵠⵠ, -ⵠⵠ.width / Gl, -ⵠⵠ.height / Nr);
    Mo.restore();
  }
  function Sp() {
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == 0) {
        this.ΔᐃΔ.ⲆᐃⲆ = false;
      }
      var a = pq * ((1 - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * hx * 600);
      var b = a * Math.sin(this.ΔᐃΔ.angle - this.angle);
      var c = a * Math.cos(this.ΔᐃΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Mo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Gl * Math.random() - Mg;
      c += Math.random() * 2 - bs;
    }
    Mo.translate(dx.ⲆΔⲆ.x + this.x + b, dx.ⲆΔⲆ.y + this.y + c);
    Mo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[156][ff.time];
    Mm(Mo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / X);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + wi * hx) % (zd * Math.PI);
    }
    Mo.rotate(this.rotate);
    ⵠⵠ = ᐃΔ[1210][ff.time];
    Mm(Mo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    Mo.restore();
  }
  function Qp() {
    var a = undefined;
    var b = hl;
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    this.ΔⵠΔⵠ.ⲆᐃⲆ();
    this.rotate.ⲆᐃⲆ();
    if (this.ᐃΔⲆⵠΔ >= 0.1 && this.ᐃΔⲆⵠΔ <= 1.1) {
      if ((c = Math.max(0, Math.min(ck, this.ᐃΔⲆⵠΔ - 0.1))) < 0.2) {
        c *= Ut;
      } else {
        c = c > 0.8 ? (ck - c) * 5 : er;
      }
      a = ᐃΔ[1150][ff.time];
      ΔⲆⲆ = -a.width * this.ΔⵠΔⵠ.ᐃⲆⵠ;
      ⵠΔⲆ = this.ΔⵠΔⵠ.ᐃⲆⵠ * -a.height;
      Mo.globalAlpha = c;
      Mm(Mo, a, -ΔⲆⲆ / fd, -ⵠΔⲆ / 4, ΔⲆⲆ / 2, ⵠΔⲆ / ta);
      b = ᐃΔ[1151];
    }
    if (this.ᐃΔⲆⵠΔ >= 0.9) {
      var c;
      if ((c = Math.max(0, Math.min(1, this.ᐃΔⲆⵠΔ - 0.9))) < 0.2) {
        c *= 5;
      } else {
        c = Lu;
      }
      a = ᐃΔ[1152][ff.time];
      ΔⲆⲆ = this.ΔⵠΔⵠ.ᐃⲆⵠ * -a.width;
      ⵠΔⲆ = -a.height * this.ΔⵠΔⵠ.ᐃⲆⵠ;
      Mo.globalAlpha = c;
      Mm(Mo, a, -ΔⲆⲆ / mg, -ⵠΔⲆ / 4, ΔⲆⲆ / 2, ⵠΔⲆ / 2);
      b = ᐃΔ[1153];
    }
    if (this.action & lw.ᐃᐃⲆⲆ && b !== lh) {
      if (this.ΔᐃΔ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃᐃ == 0) {
        this.action -= lw.ᐃᐃⲆⲆ;
      }
      Mo.globalAlpha = c * (0.6 - this.ΔᐃΔ.ᐃⲆⵠ);
      ΔⲆⲆ = -b.width * this.ΔⵠΔⵠ.ᐃⲆⵠ;
      ⵠΔⲆ = -b.height * this.ΔⵠΔⵠ.ᐃⲆⵠ;
      Mm(Mo, b, -ΔⲆⲆ / Og, -ⵠΔⲆ / $j, ΔⲆⲆ / Ol, ⵠΔⲆ / Od);
    }
    Mo.globalAlpha = 1;
    Mo.restore();
  }
  function _p() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == 0) {
        this.ΔᐃΔ.ⲆᐃⲆ = false;
      }
      var a = pq * ((1 - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * hx * 600);
      var b = Math.sin(this.ΔᐃΔ.angle - this.angle) * a;
      var c = Math.cos(this.ΔᐃΔ.angle - this.angle) * a;
    } else {
      b = et;
      c = fg;
    }
    if (this.action == 2) {
      ⵠⵠ = ᐃΔ[407][ff.time];
    } else {
      ⵠⵠ = ᐃΔ[119][ff.time];
    }
    Mm(Mo, ⵠⵠ, -ⵠⵠ.width / 2 + b, -ⵠⵠ.height / 2 + c);
    Mo.restore();
  }
  function Fp() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == 0) {
        this.ΔᐃΔ.ⲆᐃⲆ = false;
      }
      var a = pq * (hx * (_h - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * 600);
      var b = a * Math.sin(this.ΔᐃΔ.angle - this.angle);
      var c = Math.cos(this.ΔᐃΔ.angle - this.angle) * a;
    } else {
      b = bu;
      c = 0;
    }
    if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
      d = ᐃΔ[716][ff.time];
      Mm(Mo, d, -d.width / Nj + b, -d.height / ta + c);
      this.up.ⲆᐃⲆ();
      var d = ᐃΔ[720][ff.time];
      var e = this.up.ᐃⲆⵠ * -d.width;
      var f = this.up.ᐃⲆⵠ * -d.height;
      Mm(Mo, d, -e / 2 + pq * 1, -f / 2 + Ql * pq, e, f);
    } else {
      d = ᐃΔ[144][ff.time];
      Mm(Mo, d, -d.width / 2 + b, -d.height / 2 + c);
    }
    Mo.restore();
  }
  function Rp() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && tr == this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ) {
        this.ΔᐃΔ.ⲆᐃⲆ = gh;
      }
      var b = (1 - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * hx * 600 * pq;
      var c = b * Math.sin(this.ΔᐃΔ.angle - this.angle);
      var d = Math.cos(this.ΔᐃΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === Aa) {
      Mo.rotate(this.angle);
      this.ᐃⲆᐃᐃ.ⲆᐃⲆ();
      if (this.info & 16) {
        var f = ᐃΔ[985][ff.time];
      } else {
        f = ᐃΔ[210][ff.time];
      }
      var g = -f.width * this.ᐃⲆᐃᐃ.ᐃⲆⵠ;
      var h = -f.height * this.ᐃⲆᐃᐃ.ᐃⲆⵠ;
      Mm(Mo, f, -g / il + c, -h / tk + d, g, h);
    } else {
      if (this.info & 16) {
        f = ᐃΔ[986][ff.time];
      } else {
        f = ᐃΔ[211][ff.time];
      }
      Mo.translate(An, f.height / qi);
      Mm(Mo, f, c - f.width / 2, -f.height + d);
    }
    Mo.restore();
  }
  function jp() {
    if (this.info !== 10) {
      for (var a = this.info & 15, b = 0; b < a; b++) {
        this.ΔΔⲆⲆ[b].ⵠⲆⵠΔ(207, this.x, this.y);
      }
      Mo.save();
      Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
      Mo.rotate(this.angle);
      if (this.ΔᐃΔ.ⲆᐃⲆ) {
        if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == 0) {
          this.ΔᐃΔ.ⲆᐃⲆ = false;
        }
        var c = pq * (hx * (1 - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * 600);
        var d = c * Math.sin(this.ΔᐃΔ.angle - this.angle);
        var e = c * Math.cos(this.ΔᐃΔ.angle - this.angle);
      } else {
        d = 0;
        e = 0;
      }
      if (this.info & 16) {
        var f = ᐃΔ[958][ff.time];
      } else {
        f = ᐃΔ[957][ff.time];
      }
      Mm(Mo, f, -f.width / jg + d, -f.width / 2 + e);
      Mo.restore();
    }
  }
  function Wp() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    var a = ᐃΔᐃⵠ.ⵠⵠΔᐃ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + hx / bq, 1.8) : Math.max(this.scale - hx, 1);
    this.ΔⵠΔⵠ.ⲆᐃⲆ();
    this.rotate.ⲆᐃⲆ();
    this.ⲆⲆⵠᐃ = a < 350 ? Math.max(sb, this.ⲆⲆⵠᐃ - hx * 2.2) : Math.min(Lu, this.ⲆⲆⵠᐃ + hx * 2.2);
    b = this.info & 1 ? ᐃΔ[1114][ff.time] : ᐃΔ[1113][ff.time];
    ΔⲆⲆ = this.scale * (-b.width * this.ΔⵠΔⵠ.ᐃⲆⵠ);
    ⵠΔⲆ = this.ΔⵠΔⵠ.ᐃⲆⵠ * -b.height * this.scale;
    Mo.globalAlpha = 1 - this.ⲆⲆⵠᐃ;
    Mm(Mo, b, -ΔⲆⲆ / 4, -ⵠΔⲆ / 4, ΔⲆⲆ / zd, ⵠΔⲆ / 2);
    b = this.info & 1 ? ᐃΔ[1098][ff.time] : ᐃΔ[235][ff.time];
    ΔⲆⲆ = -b.width * this.ΔⵠΔⵠ.ᐃⲆⵠ * this.scale;
    ⵠΔⲆ = -b.height * this.ΔⵠΔⵠ.ᐃⲆⵠ * this.scale;
    Mo.globalAlpha = this.ⲆⲆⵠᐃ;
    Mm(Mo, b, -ΔⲆⲆ / Og, -ⵠΔⲆ / eh, ΔⲆⲆ / fh, ⵠΔⲆ / 2);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      if (this.ΔᐃΔ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃᐃ == ds) {
        this.action -= lw.ᐃᐃⲆⲆ;
      }
      Mo.globalAlpha = (1 - this.ⲆⲆⵠᐃ) * (0.6 - this.ΔᐃΔ.ᐃⲆⵠ);
      var b = ᐃΔ[1115];
      ΔⲆⲆ = this.scale * (-b.width * this.ΔⵠΔⵠ.ᐃⲆⵠ);
      ⵠΔⲆ = -b.height * this.ΔⵠΔⵠ.ᐃⲆⵠ * this.scale;
      Mm(Mo, b, -ΔⲆⲆ / cq, -ⵠΔⲆ / 4, ΔⲆⲆ / On, ⵠΔⲆ / Nj);
      Mo.globalAlpha = this.ⲆⲆⵠᐃ * (0.6 - this.ΔᐃΔ.ᐃⲆⵠ);
      b = ᐃΔ[1107];
      ΔⲆⲆ = this.scale * (this.ΔⵠΔⵠ.ᐃⲆⵠ * -b.width);
      ⵠΔⲆ = this.scale * (this.ΔⵠΔⵠ.ᐃⲆⵠ * -b.height);
      Mm(Mo, b, -ΔⲆⲆ / Nh, -ⵠΔⲆ / oe, ΔⲆⲆ / 2, ⵠΔⲆ / 2);
      Mo.globalAlpha = 1;
    }
    b = fg === (this.info & 1) ? ᐃΔ[1102][ff.time] : ᐃΔ[1101][ff.time];
    ΔⲆⲆ = this.scale * (this.ΔⵠΔⵠ.ᐃⲆⵠ * -b.width);
    ⵠΔⲆ = -b.height * this.ΔⵠΔⵠ.ᐃⲆⵠ * this.scale;
    Mo.save();
    Mo.translate(pq * -Vk, pq * 0);
    Mo.rotate(this.rotate.ᐃⲆⵠ);
    Mo.globalAlpha = this.ⲆⲆⵠᐃ;
    Mm(Mo, b, -ΔⲆⲆ * pq / Qt, pq * -ⵠΔⲆ / aq, ΔⲆⲆ / 2, ⵠΔⲆ / 2);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      Mo.globalAlpha = (0.6 - this.ΔᐃΔ.ᐃⲆⵠ) * this.ⲆⲆⵠᐃ;
      b = ᐃΔ[1108];
      Mm(Mo, b, pq * -ΔⲆⲆ / oe, -ⵠΔⲆ * pq / $j, ΔⲆⲆ / Nj, ⵠΔⲆ / nd);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
    b = this.info & _ ? ᐃΔ[1104][ff.time] : ᐃΔ[1105][ff.time];
    Mo.save();
    Mo.translate(pq * 20, pq * 0);
    Mo.rotate(-this.rotate.ᐃⲆⵠ);
    Mo.globalAlpha = this.ⲆⲆⵠᐃ;
    Mm(Mo, b, pq * -ΔⲆⲆ / Og, pq * -ⵠΔⲆ / yn, ΔⲆⲆ / 2, ⵠΔⲆ / X);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      Mo.globalAlpha = this.ⲆⲆⵠᐃ * (0.6 - this.ΔᐃΔ.ᐃⲆⵠ);
      b = ᐃΔ[1109];
      Mm(Mo, b, pq * -ΔⲆⲆ / Nh, pq * -ⵠΔⲆ / 4, ΔⲆⲆ / ta, ⵠΔⲆ / Nr);
      Mo.globalAlpha = er;
    }
    Mo.globalAlpha = 1;
    Mo.restore();
    Mo.restore();
  }
  function Lp() {
    if (this.info >= 10) {
      Mo.save();
      Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
      Mo.rotate(this.angle);
      if (this.ΔᐃΔ.ⲆᐃⲆ) {
        if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == M) {
          this.ΔᐃΔ.ⲆᐃⲆ = false;
        }
        var a = (1 - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * hx * 600 * pq;
        var b = a * Math.sin(this.ΔᐃΔ.angle - this.angle);
        var c = a * Math.cos(this.ΔᐃΔ.angle - this.angle);
      } else {
        b = Rl;
        c = Md;
      }
      this.ᐃⲆᐃᐃ.ⲆᐃⲆ();
      var d = ᐃΔ[206][ff.time];
      var e = this.ᐃⲆᐃᐃ.ᐃⲆⵠ * -d.width;
      var f = -d.height * this.ᐃⲆᐃᐃ.ᐃⲆⵠ;
      Mm(Mo, d, -e / 2 + b, -f / br + c, e, f);
      Mo.restore();
    }
  }
  function Gp() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == 0) {
        this.ΔᐃΔ.ⲆᐃⲆ = li;
      }
      var b = pq * (hx * (Fb - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * 600);
      var c = Math.sin(this.ΔᐃΔ.angle - this.angle) * b;
      var d = Math.cos(this.ΔᐃΔ.angle - this.angle) * b;
    } else {
      c = gl;
      d = Md;
    }
    var e = this.info & 15;
    if (this.info === 10 || tj === e) {
      Mo.rotate(this.angle);
      this.ᐃⲆᐃᐃ.ⲆᐃⲆ();
      if (this.info & 16) {
        var f = ᐃΔ[668][ff.time];
      } else {
        f = ᐃΔ[132][ff.time];
      }
      var g = this.ᐃⲆᐃᐃ.ᐃⲆⵠ * -f.width;
      var h = this.ᐃⲆᐃᐃ.ᐃⲆⵠ * -f.height;
      Mm(Mo, f, -g / 2 + c, -h / 2 + d, g, h);
    } else {
      this.ᐃⲆⲆΔⵠⲆΔ.ⲆᐃⲆ();
      if (this.info & 16) {
        f = ᐃΔ[638][ff.time];
      } else {
        f = ᐃΔ[134][ff.time];
      }
      Mo.translate(0, f.height / 2);
      Mo.rotate(this.ᐃⲆⲆΔⵠⲆΔ.ᐃⲆⵠ);
      Mm(Mo, f, c - f.width / Ht, -f.height + d);
    }
    Mo.restore();
  }
  function Op() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && Bo == this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ) {
        this.ΔᐃΔ.ⲆᐃⲆ = false;
      }
      var b = hx * (1 - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * 600 * pq;
      var c = b * Math.sin(this.ΔᐃΔ.angle - this.angle);
      var d = b * Math.cos(this.ΔᐃΔ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (lt === this.info || e === 0) {
      Mo.rotate(this.angle);
      this.ᐃⲆᐃᐃ.ⲆᐃⲆ();
      if (this.info & 16) {
        var f = ᐃΔ[953][ff.time];
      } else {
        f = ᐃΔ[204][ff.time];
      }
      var g = this.ᐃⲆᐃᐃ.ᐃⲆⵠ * -f.width;
      var h = this.ᐃⲆᐃᐃ.ᐃⲆⵠ * -f.height;
      Mm(Mo, f, -g / 2 + c, -h / 2 + d, g, h);
    } else {
      if (this.info & 16) {
        f = ᐃΔ[954][ff.time];
      } else {
        f = ᐃΔ[205][ff.time];
      }
      Mo.translate(Md, f.height / zd);
      Mm(Mo, f, c - f.width / Ht, -f.height + d);
    }
    Mo.restore();
  }
  function Np() {
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == 0) {
        this.ΔᐃΔ.ⲆᐃⲆ = Eq;
      }
      var a = (1 - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * hx * 600 * pq;
      var b = a * Math.sin(this.ΔᐃΔ.angle - this.angle);
      var c = a * Math.cos(this.ΔᐃΔ.angle - this.angle);
    } else {
      b = qb;
      c = 0;
    }
    this.ΔΔᐃⲆⲆⵠΔ = (this.ΔΔᐃⲆⲆⵠΔ + Sg * hx) % (Math.PI * 2);
    this.ⵠⵠⵠΔΔΔⵠ = (this.ⵠⵠⵠΔΔΔⵠ - hx * 3) % (Math.PI * Nj);
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x + b, dx.ⲆΔⲆ.y + this.y + c);
    Mo.save();
    Mo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[151][ff.time];
    Mm(Mo, ⵠⵠ, -ⵠⵠ.width / Nr, -ⵠⵠ.height / 2);
    Mo.restore();
    Mo.save();
    Mo.rotate(this.ΔΔᐃⲆⲆⵠΔ);
    ⵠⵠ = ᐃΔ[528][ff.time];
    Mm(Mo, ⵠⵠ, -ⵠⵠ.width / qi, -ⵠⵠ.height / jb);
    Mo.restore();
    Mo.save();
    Mo.rotate(this.ⵠⵠⵠΔΔΔⵠ);
    ⵠⵠ = ᐃΔ[527][ff.time];
    Mm(Mo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    Mo.restore();
    Mo.restore();
  }
  function qp() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ⵠΔⲆᐃΔ.length == 0 || this.ⵠΔⲆᐃΔ[this.ⵠΔⲆᐃΔ.length - 1] <= rs.ⵠΔᐃΔⲆⲆⵠ)) {
      this.ⵠΔⲆᐃΔ.push(rs.ⲆᐃⲆⵠⲆⵠᐃ);
    }
    for (var a = Aa; a < this.ⵠΔⲆᐃΔ.length; a++) {
      this.ⵠΔⲆᐃΔ[a] = Math.max(0, this.ⵠΔⲆᐃΔ[a] - rs.ᐃᐃΔⲆᐃⵠᐃ * hx);
      Mo.globalAlpha = this.ⵠΔⲆᐃΔ[a] / 1.3;
      var b = (1 - this.ⵠΔⲆᐃΔ[a]) * 40;
      var c = (ck - this.ⵠΔⲆᐃΔ[a]) * 35 + 10;
      Vt(Mo, pq * -68 + Math.sin(-this.angle - Math.PI / bq) * b, pq * -20 + b * Math.cos(-this.angle - Math.PI / 2), c);
      St(Mo, "#333333");
    }
    Mo.globalAlpha = Ni;
    if (this.ⵠΔⲆᐃΔ.length > 0 && An === this.ⵠΔⲆᐃΔ[0]) {
      this.ⵠΔⲆᐃΔ.shift();
    }
    Mo.restore();
  }
  function Hp() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    if (ᐃΔᐃⵠ.ⵠⵠΔᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + hx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - hx, ig);
    }
    this.ΔⵠΔⵠ.ⲆᐃⲆ();
    this.rotate.ⲆᐃⲆ();
    a = this.info === Gk ? ᐃΔ[233][ff.time] : ᐃΔ[1083][ff.time];
    ΔⲆⲆ = this.scale * (-a.width * this.ΔⵠΔⵠ.ᐃⲆⵠ);
    ⵠΔⲆ = -a.height * this.ΔⵠΔⵠ.ᐃⲆⵠ * this.scale;
    Mm(Mo, a, -ΔⲆⲆ / 4, -ⵠΔⲆ / Oa, ΔⲆⲆ / jb, ⵠΔⲆ / 2);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      if (this.ΔᐃΔ.ⲆᐃⲆ() && Wh == this.ΔᐃΔ.ⵠᐃᐃ) {
        this.action -= lw.ᐃᐃⲆⲆ;
      }
      Mo.globalAlpha = 0.6 - this.ΔᐃΔ.ᐃⲆⵠ;
      var a = ᐃΔ[1092];
      Mm(Mo, a, -ΔⲆⲆ / 4, -ⵠΔⲆ / 4, ΔⲆⲆ / 2, ⵠΔⲆ / nd);
      Mo.globalAlpha = sc;
    }
    a = Gg === this.info ? ᐃΔ[1087][ff.time] : ᐃΔ[1086][ff.time];
    ΔⲆⲆ = -a.width * this.ΔⵠΔⵠ.ᐃⲆⵠ * this.scale;
    ⵠΔⲆ = this.ΔⵠΔⵠ.ᐃⲆⵠ * -a.height * this.scale;
    Mo.save();
    Mo.translate(pq * -40, pq * 10);
    Mo.rotate(this.rotate.ᐃⲆⵠ);
    Mm(Mo, a, pq * -ΔⲆⲆ / 4, -ⵠΔⲆ * pq / zt, ΔⲆⲆ / 2, ⵠΔⲆ / 2);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      Mo.globalAlpha = 0.6 - this.ΔᐃΔ.ᐃⲆⵠ;
      a = ᐃΔ[1093];
      Mm(Mo, a, pq * -ΔⲆⲆ / mg, -ⵠΔⲆ * pq / 4, ΔⲆⲆ / 2, ⵠΔⲆ / 2);
      Mo.globalAlpha = er;
    }
    Mo.restore();
    a = this.info === 0 ? ᐃΔ[1090][ff.time] : ᐃΔ[1089][ff.time];
    Mo.save();
    Mo.translate(pq * 40, lt * pq);
    Mo.rotate(-this.rotate.ᐃⲆⵠ);
    Mm(Mo, a, pq * -ΔⲆⲆ / hr, pq * -ⵠΔⲆ / 4, ΔⲆⲆ / jg, ⵠΔⲆ / zd);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      Mo.globalAlpha = 0.6 - this.ΔᐃΔ.ᐃⲆⵠ;
      a = ᐃΔ[1094];
      Mm(Mo, a, pq * -ΔⲆⲆ / oe, pq * -ⵠΔⲆ / 4, ΔⲆⲆ / il, ⵠΔⲆ / 2);
      Mo.globalAlpha = Fb;
    }
    Mo.restore();
    Mo.restore();
  }
  function Up() {
    var a = Math.PI / 2;
    var b = Math.PI / 4;
    this.ΔⵠΔⵠ.ⲆᐃⲆ();
    this.ⵠΔⲆᐃⲆΔⵠ.ⲆᐃⲆ();
    this.ΔⵠΔⲆᐃⵠᐃ.ⲆᐃⲆ();
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    c = qb === this.info ? ᐃΔ[887][ff.time] : ᐃΔ[886][ff.time];
    ΔⲆⲆ = this.ΔⵠΔⵠ.ᐃⲆⵠ * -c.width;
    ⵠΔⲆ = this.ΔⵠΔⵠ.ᐃⲆⵠ * -c.height;
    Mm(Mo, c, -ΔⲆⲆ / 2, -ⵠΔⲆ / fh, ΔⲆⲆ, ⵠΔⲆ);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      if (this.ΔᐃΔ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃᐃ == 0) {
        this.action -= lw.ᐃᐃⲆⲆ;
      }
      Mo.globalAlpha = 0.6 - this.ΔᐃΔ.ᐃⲆⵠ;
      var c = ᐃΔ[888];
      Mm(Mo, c, -ΔⲆⲆ / Nr, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
      Mo.globalAlpha = 1;
    }
    if (this.action & lw.ΔΔΔⵠᐃ) {
      if (this.ⵠⲆⵠᐃᐃ.ⲆᐃⲆ() && this.ⵠⲆⵠᐃᐃ.ⵠᐃᐃ == Jn) {
        this.action -= lw.ΔΔΔⵠᐃ;
      }
      Mo.globalAlpha = 0.6 - this.ⵠⲆⵠᐃᐃ.ᐃⲆⵠ;
      c = ᐃΔ[891];
      Mm(Mo, c, -ΔⲆⲆ / 2, -ⵠΔⲆ / ta, ΔⲆⲆ, ⵠΔⲆ);
      Mo.globalAlpha = Ls;
    }
    Mo.restore();
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle + b);
    Mo.translate(55, 0);
    Mo.rotate(a);
    c = this.info === 0 ? ᐃΔ[894][ff.time] : ᐃΔ[896][ff.time];
    ΔⲆⲆ = this.ⵠΔⲆᐃⲆΔⵠ.ᐃⲆⵠ * -c.width;
    ⵠΔⲆ = this.ⵠΔⲆᐃⲆΔⵠ.ᐃⲆⵠ * -c.height;
    Mm(Mo, c, -ΔⲆⲆ / 2, -ⵠΔⲆ / tk, ΔⲆⲆ, ⵠΔⲆ);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      Mo.globalAlpha = 0.6 - this.ΔᐃΔ.ᐃⲆⵠ;
      c = ᐃΔ[889];
      Mm(Mo, c, -ΔⲆⲆ / 2, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
      Mo.globalAlpha = 1;
    }
    if (this.action & lw.ΔΔΔⵠᐃ) {
      Mo.globalAlpha = 0.6 - this.ⵠⲆⵠᐃᐃ.ᐃⲆⵠ;
      c = ᐃΔ[892];
      Mm(Mo, c, -ΔⲆⲆ / X, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle + a + b);
    Mo.translate(55, tj);
    Mo.rotate(a);
    c = An === this.info ? ᐃΔ[895][ff.time] : ᐃΔ[897][ff.time];
    ΔⲆⲆ = -c.width * this.ΔⵠΔⲆᐃⵠᐃ.ᐃⲆⵠ;
    ⵠΔⲆ = -c.height * this.ΔⵠΔⲆᐃⵠᐃ.ᐃⲆⵠ;
    Mm(Mo, c, -ΔⲆⲆ / 2, -ⵠΔⲆ / Nj, ΔⲆⲆ, ⵠΔⲆ);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      Mo.globalAlpha = 0.6 - this.ΔᐃΔ.ᐃⲆⵠ;
      c = ᐃΔ[890];
      Mm(Mo, c, -ΔⲆⲆ / 2, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
      Mo.globalAlpha = ig;
    }
    if (this.action & lw.ΔΔΔⵠᐃ) {
      Mo.globalAlpha = 0.6 - this.ⵠⲆⵠᐃᐃ.ᐃⲆⵠ;
      c = ᐃΔ[893];
      Mm(Mo, c, -ΔⲆⲆ / 2, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
      Mo.globalAlpha = Kg;
    }
    Mo.restore();
  }
  function Yp() {
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == 0) {
        this.ΔᐃΔ.ⲆᐃⲆ = tr;
      }
      var a = pq * ((1 - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * hx * 600);
      var b = a * Math.sin(this.ΔᐃΔ.angle - this.angle);
      var c = Math.cos(this.ΔᐃΔ.angle - this.angle) * a;
    } else {
      b = xq;
      c = 0;
    }
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x + b, dx.ⲆΔⲆ.y + this.y + c);
    Mo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[135][ff.time];
    Mm(Mo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / qo);
    Mo.restore();
  }
  function Kp(a, b, c) {
    if (a >= 0) {
      ⵠⵠ = ᐃΔ[a][ff.time];
      switch (a) {
        case 1:
        case 3:
        case 4:
        case 8:
        case 31:
        case 32:
          Fv(a, ⵠⵠ, -ⵠⵠ.width / 2 - (45 + b) * pq, -ⵠⵠ.height / Nj + pq * (c + 22));
          break;
        case 94:
        case 95:
        case 96:
        case 97:
          Uv(a, ⵠⵠ, -ⵠⵠ.width / co - (52 + b) * pq, -ⵠⵠ.height / Qt + (c + 20) * pq);
          break;
        case 98:
        case 99:
          Uv(a, ⵠⵠ, -ⵠⵠ.width / 4 - (57 + b) * pq, -ⵠⵠ.height / 4 + pq * (c + 20));
          break;
        case 57:
        case 0:
        case 5:
        case 6:
          Uv(a, ⵠⵠ, -ⵠⵠ.width / Og - (47 + b) * pq, -ⵠⵠ.height / Zt + (c + 45) * pq);
          break;
        case 30:
          Uv(a, ⵠⵠ, -ⵠⵠ.width / aq - (52 + b) * pq, -ⵠⵠ.height / ge + (c + 45) * pq);
          break;
        case 19:
          Uv(a, ⵠⵠ, -ⵠⵠ.width / mg - pq * (47 + b), -ⵠⵠ.height / 4 + (c + 44) * pq);
          break;
        case 9:
          Fv(a, ⵠⵠ, -ⵠⵠ.width / 2 - pq * (47 + b), -ⵠⵠ.height / Nj + (c + 44) * pq);
          break;
        case 62:
          Fv(a, ⵠⵠ, -ⵠⵠ.width / 2 - pq * (40 + b), -ⵠⵠ.height / 2 + (c + 65) * pq);
          break;
        case 12:
          Uv(a, ⵠⵠ, -ⵠⵠ.width / Nh - pq * (37 + b), -ⵠⵠ.height / 4 + (c + 85) * pq);
          break;
        case 34:
          Uv(a, ⵠⵠ, -ⵠⵠ.width / cq - (37 + b) * pq, -ⵠⵠ.height / 4 + pq * (c + 85));
          break;
        case 54:
        case 53:
          Uv(a, ⵠⵠ, -ⵠⵠ.width / 4 - (26 + b) * pq, -ⵠⵠ.height / Zt + (c + 77) * pq);
          break;
        case 17:
          Uv(a, ⵠⵠ, -ⵠⵠ.width / Qt - (37 + b) * pq, -ⵠⵠ.height / 4 + pq * (c + 85));
          break;
        case 63:
          Uv(a, ⵠⵠ, -ⵠⵠ.width / yn - (47 + b) * pq, -ⵠⵠ.height / 4 + pq * (c + 44));
          break;
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
          Uv(a, ⵠⵠ, -ⵠⵠ.width / 4 - (37 + b) * pq, -ⵠⵠ.height / 4 + pq * (c + 30));
          break;
        case 56:
          Uv(a, ⵠⵠ, -ⵠⵠ.width / 4 - (47 + b) * pq, -ⵠⵠ.height / 4 + (c + 35) * pq);
          break;
        case 92:
        case 93:
          Uv(a, ⵠⵠ, -ⵠⵠ.width / 4 - (47 + b) * pq, -ⵠⵠ.height / Jl + (c + 40) * pq);
          break;
        case 89:
          Uv(a, ⵠⵠ, -ⵠⵠ.width / aq - (47 + b) * pq, -ⵠⵠ.height / 4 + pq * (c + 34));
          break;
        case 13:
        case 14:
        case 15:
        case 33:
          Uv(a, ⵠⵠ, -ⵠⵠ.width / Jl - (37 + b) * pq, -ⵠⵠ.height / 4 + pq * (c + 90));
          break;
        case 18:
          Uv(a, ⵠⵠ, -ⵠⵠ.width / mg - (40 + b) * pq, -ⵠⵠ.height / Nh + (c + 85) * pq);
          break;
        case 16:
          Fv(a, ⵠⵠ, -ⵠⵠ.width / On - pq * (39 + b), -ⵠⵠ.height / Gl + (c + 90) * pq);
          break;
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 45:
          Fv(a, ⵠⵠ, -ⵠⵠ.width / X - (46 + b) * pq, -ⵠⵠ.height / 2 + (c + 35) * pq);
          break;
        case 49:
          Fv(a, ⵠⵠ, -ⵠⵠ.width / Ol - pq * (47 + b), -ⵠⵠ.height / 2 + (c + 54) * pq);
          break;
        case 46:
        case 50:
        case 51:
        case 52:
          Fv(a, ⵠⵠ, -ⵠⵠ.width / 2 - pq * (46 + b), -ⵠⵠ.height / 2 + (c + 35) * pq);
          break;
        case 55:
          Fv(a, ⵠⵠ, -ⵠⵠ.width / 2 - pq * (47 + b), -ⵠⵠ.height / On + pq * (c + zq));
      }
    }
  }
  function Vp() {
    this.ΔⵠΔⵠ.ⲆᐃⲆ();
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    a = bu === this.info ? ᐃΔ[1042][ff.time] : ᐃΔ[1044][ff.time];
    ΔⲆⲆ = -a.width * this.ΔⵠΔⵠ.ᐃⲆⵠ;
    ⵠΔⲆ = -a.height * this.ΔⵠΔⵠ.ᐃⲆⵠ;
    Mm(Mo, a, -ΔⲆⲆ / 2, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      if (this.ΔᐃΔ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃᐃ == 0) {
        this.action -= lw.ᐃᐃⲆⲆ;
      }
      Mo.globalAlpha = 0.6 - this.ΔᐃΔ.ᐃⲆⵠ;
      var a = ᐃΔ[1045];
      Mm(Mo, a, -ΔⲆⲆ / il, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
  }
  function Xp() {
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      var a = pq * (hx * (Ls - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * 600);
      var b = Math.sin(this.ΔᐃΔ.angle - this.angle) * a;
      var c = Math.cos(this.ΔᐃΔ.angle - this.angle) * a;
    } else {
      b = Gk;
      c = sb;
    }
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + hx * 0.5) % (Math.PI * 2);
    }
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x + b, dx.ⲆΔⲆ.y + this.y + c);
    Mo.save();
    Mo.rotate(this.rotate);
    ⵠⵠ = ᐃΔ[641][ff.time];
    Mm(Mo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    Mo.restore();
    Mo.save();
    Mo.rotate(this.ⵠΔⵠⲆΔΔΔᐃᐃ);
    ⵠⵠ = ᐃΔ[642][ff.time];
    Mm(Mo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / nd);
    Mo.restore();
    Mo.restore();
  }
  function Zp(a, b) {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    c = ᐃΔ[a][ff.time];
    ΔⲆⲆ = -c.width;
    ⵠΔⲆ = -c.height;
    Mm(Mo, c, -ΔⲆⲆ / 2, -ⵠΔⲆ / qo, ΔⲆⲆ, ⵠΔⲆ);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      if (this.ΔᐃΔ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃᐃ == M) {
        this.action -= lw.ᐃᐃⲆⲆ;
      }
      Mo.globalAlpha = 0.6 - this.ΔᐃΔ.ᐃⲆⵠ;
      var c = ᐃΔ[b];
      Mm(Mo, c, -ΔⲆⲆ / 2, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
  }
  function $p() {
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == M) {
        this.ΔᐃΔ.ⲆᐃⲆ = Jh;
      }
      var a = pq * ((er - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * hx * 600);
      var b = Math.sin(this.ΔᐃΔ.angle - this.angle) * a;
      var c = Math.cos(this.ΔᐃΔ.angle - this.angle) * a;
    } else {
      b = Fj;
      c = Md;
    }
    this.ΔΔᐃⲆⲆⵠΔ = (this.ΔΔᐃⲆⲆⵠΔ + dl * hx) % (qi * Math.PI);
    this.ⵠⵠⵠΔΔΔⵠ = (this.ⵠⵠⵠΔΔΔⵠ - hx * dl) % (Od * Math.PI);
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x + b, dx.ⲆΔⲆ.y + this.y + c);
    Mo.save();
    Mo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[152][ff.time];
    Mm(Mo, ⵠⵠ, -ⵠⵠ.width / fh, -ⵠⵠ.height / 2);
    Mo.restore();
    Mo.save();
    Mo.rotate(this.ΔΔᐃⲆⲆⵠΔ);
    ⵠⵠ = ᐃΔ[1194][ff.time];
    Mm(Mo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    Mo.restore();
    Mo.save();
    Mo.rotate(this.ⵠⵠⵠΔΔΔⵠ);
    ⵠⵠ = ᐃΔ[1193][ff.time];
    Mm(Mo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    Mo.restore();
    Mo.restore();
  }
  function av() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    this.ΔᐃΔⲆᐃ.ⲆᐃⲆ();
    ⵠⵠ = ᐃΔ[526][ff.time];
    ΔⲆⲆ = -ⵠⵠ.width * this.ΔᐃΔⲆᐃ.ᐃⲆⵠ;
    ⵠΔⲆ = -ⵠⵠ.height * this.ΔᐃΔⲆᐃ.ᐃⲆⵠ;
    Mm(Mo, ⵠⵠ, -ΔⲆⲆ / 2, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
    Mo.restore();
  }
  function bv(a, b) {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    if (a === 854) {
      a = 250;
      this.info = 36;
    }
    ⵠⵠ = ᐃΔ[a][this.info][ff.time];
    ΔⲆⲆ = -ⵠⵠ.width / Ht;
    ⵠΔⲆ = -ⵠⵠ.height / 2;
    Mm(Mo, ⵠⵠ, -ΔⲆⲆ / Nr, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      if (this.ΔᐃΔ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃᐃ == 0) {
        this.action -= lw.ᐃᐃⲆⲆ;
      }
      Mo.globalAlpha = 0.6 - this.ΔᐃΔ.ᐃⲆⵠ;
      var c = kv(this.info, ⵠⵠ, ⵠⵠⲆᐃⲆᐃΔⵠᐃ);
      Mm(Mo, c, -ΔⲆⲆ / il, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
  }
  function cv() {
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == 0) {
        this.ΔᐃΔ.ⲆᐃⲆ = Ge;
      }
      var a = (_ - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * hx * 600 * pq;
      var b = a * Math.sin(this.ΔᐃΔ.angle - this.angle);
      var c = Math.cos(this.ΔᐃΔ.angle - this.angle) * a;
    } else {
      b = tj;
      c = Qr;
    }
    Mo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += il * Math.random() - 1;
    }
    Mo.translate(dx.ⲆΔⲆ.x + this.x + b, dx.ⲆΔⲆ.y + this.y + c);
    Mo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[154][ff.time];
    Mm(Mo, ⵠⵠ, -ⵠⵠ.width / qo, -ⵠⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + hx * 3) % (ta * Math.PI);
    }
    Mo.rotate(this.rotate);
    ⵠⵠ = ᐃΔ[1202][ff.time];
    Mm(Mo, ⵠⵠ, -ⵠⵠ.width / Ht, -ⵠⵠ.height / qi);
    Mo.restore();
  }
  function dv() {
    if (this.ΔᐃΔ.ⲆᐃⲆ) {
      if (this.ΔᐃΔ.ⵠᐃⲆⵠ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃⲆⵠ.ⵠᐃᐃ == Ge) {
        this.ΔᐃΔ.ⲆᐃⲆ = false;
      }
      var a = pq * ((1 - this.ΔᐃΔ.ⵠᐃⲆⵠ.ᐃⲆⵠ) * hx * 600);
      var b = a * Math.sin(this.ΔᐃΔ.angle - this.angle);
      var c = Math.cos(this.ΔᐃΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    Mo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * On - Ek;
      c += Math.random() * jg - 1;
    }
    Mo.translate(dx.ⲆΔⲆ.x + this.x + b, dx.ⲆΔⲆ.y + this.y + c);
    Mo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[157][ff.time];
    Mm(Mo, ⵠⵠ, -ⵠⵠ.width / jb, -ⵠⵠ.height / il);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Ft * hx) % (Math.PI * 2);
    }
    Mo.rotate(this.rotate);
    ⵠⵠ = ᐃΔ[1214][ff.time];
    Mm(Mo, ⵠⵠ, -ⵠⵠ.width / Nj, -ⵠⵠ.height / Ht);
    Mo.restore();
  }
  function ev(a, b) {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    this.ΔⵠΔⵠ.ⲆᐃⲆ();
    c = ᐃΔ[a][ff.time];
    ΔⲆⲆ = this.ΔⵠΔⵠ.ᐃⲆⵠ * -c.width;
    ⵠΔⲆ = this.ΔⵠΔⵠ.ᐃⲆⵠ * -c.height;
    Mm(Mo, c, -ΔⲆⲆ / 4, -ⵠΔⲆ / 4, ΔⲆⲆ / jg, ⵠΔⲆ / nd);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      if (this.ΔᐃΔ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃᐃ == ia) {
        this.action -= lw.ᐃᐃⲆⲆ;
      }
      Mo.globalAlpha = 0.6 - this.ΔᐃΔ.ᐃⲆⵠ;
      var c = ᐃΔ[b];
      Mm(Mo, c, -ΔⲆⲆ / cq, -ⵠΔⲆ / ge, ΔⲆⲆ / qi, ⵠΔⲆ / fh);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
  }
  function fv() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    this.ᐃⲆᐃᐃ.ⲆᐃⲆ();
    Mo.globalAlpha = 0.3;
    var a = ᐃΔ[282][ff.time];
    var b = this.ᐃⲆᐃᐃ.ᐃⲆⵠ * -a.width;
    var c = -a.height * this.ᐃⲆᐃᐃ.ᐃⲆⵠ;
    Mm(Mo, a, -b / 2, -c / 2, b, c);
    Mo.globalAlpha = Mg;
    Mo.restore();
  }
  function gv() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    if (ᐃΔᐃⵠ.ⵠⵠΔᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + hx / Nj, 1.8);
    } else {
      this.scale = Math.max(this.scale - hx, 1);
    }
    this.ΔⵠΔⵠ.ⲆᐃⲆ();
    this.rotate.ⲆᐃⲆ();
    a = ᐃΔ[449][ff.time];
    ΔⲆⲆ = this.scale * (this.ΔⵠΔⵠ.ᐃⲆⵠ * -a.width);
    ⵠΔⲆ = this.ΔⵠΔⵠ.ᐃⲆⵠ * -a.height * this.scale;
    Mm(Mo, a, -ΔⲆⲆ / tk, -ⵠΔⲆ / Nj, ΔⲆⲆ, ⵠΔⲆ);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      if (this.ΔᐃΔ.ⲆᐃⲆ() && gh == this.ΔᐃΔ.ⵠᐃᐃ) {
        this.action -= lw.ᐃᐃⲆⲆ;
      }
      Mo.globalAlpha = 0.6 - this.ΔᐃΔ.ᐃⲆⵠ;
      var a = ᐃΔ[463];
      Mm(Mo, a, -ΔⲆⲆ / 2, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
      Mo.globalAlpha = Ga;
    }
    a = ᐃΔ[451][ff.time];
    ΔⲆⲆ = this.scale * (this.ΔⵠΔⵠ.ᐃⲆⵠ * -a.width);
    ⵠΔⲆ = this.scale * (this.ΔⵠΔⵠ.ᐃⲆⵠ * -a.height);
    Mo.save();
    Mo.translate(pq * -30, pq * 70);
    Mo.rotate(this.rotate.ᐃⲆⵠ);
    Mm(Mo, a, pq * -10, pq * -40, ΔⲆⲆ, ⵠΔⲆ);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      Mo.globalAlpha = 0.6 - this.ΔᐃΔ.ᐃⲆⵠ;
      a = ᐃΔ[466];
      Mm(Mo, a, pq * -10, pq * -40, ΔⲆⲆ, ⵠΔⲆ);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
    a = ᐃΔ[452][ff.time];
    Mo.save();
    Mo.translate(pq * 30, pq * 70);
    Mo.rotate(-this.rotate.ᐃⲆⵠ);
    Mm(Mo, a, pq * 10 - ΔⲆⲆ, pq * -40, ΔⲆⲆ, ⵠΔⲆ);
    if (this.action & lw.ᐃᐃⲆⲆ) {
      Mo.globalAlpha = 0.6 - this.ΔᐃΔ.ᐃⲆⵠ;
      a = ᐃΔ[467];
      Mm(Mo, a, pq * 10 - ΔⲆⲆ, pq * -40, ΔⲆⲆ, ⵠΔⲆ);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
    Mo.restore();
  }
  function hv() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    Mo.rotate(this.angle);
    this.ᐃⵠᐃⲆⵠ.ⲆᐃⲆ();
    ⵠⵠ = ᐃΔ[288][ff.time];
    ΔⲆⲆ = this.ᐃⵠᐃⲆⵠ.ᐃⲆⵠ * -ⵠⵠ.width;
    ⵠΔⲆ = -ⵠⵠ.height * this.ᐃⵠᐃⲆⵠ.ᐃⲆⵠ;
    Mm(Mo, ⵠⵠ, -ΔⲆⲆ / nd, -ⵠΔⲆ / Od, ΔⲆⲆ, ⵠΔⲆ);
    this.ΔᐃΔⲆᐃ.ⲆᐃⲆ();
    ⵠⵠ = ᐃΔ[289][ff.time];
    ΔⲆⲆ = this.ΔᐃΔⲆᐃ.ᐃⲆⵠ * -ⵠⵠ.width;
    ⵠΔⲆ = -ⵠⵠ.height * this.ΔᐃΔⲆᐃ.ᐃⲆⵠ;
    Mm(Mo, ⵠⵠ, -ΔⲆⲆ / br, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
    Mo.restore();
  }
  function iv(a) {
    if (a > gl) {
      var b = ᐃΔ[a][ff.time];
      switch (a) {
        case 58:
          Fv(a, b, -b.width / il + pq * 2, -b.height / Nj - ko * pq);
          break;
        case 10:
          Fv(a, b, -b.width / fh, -b.height / il - pq * 18);
          break;
        case 11:
          Fv(a, b, -b.width / 2, -b.height / 2 - pq * 10);
          break;
        case 23:
          Fv(a, b, -b.width / zd, -b.height / 2 - pq * xj);
          break;
        case 24:
          Uv(a, b, -b.width / 4, -b.height / 4 - pq * 20);
          break;
        case 25:
          Fv(a, b, -b.width / br - pq * bs, -b.height / 2 - pq * 23);
          break;
        case 26:
          Fv(a, b, -b.width / 2, -b.height / 2 - pq * 5);
          break;
        case 27:
          Fv(a, b, -b.width / 2, -b.height / il - Gl * pq);
          break;
        case 43:
          Fv(a, b, -b.width / bq + pq * 1.5, -b.height / Gl - Gt * pq);
          break;
        case 44:
        case 20:
        case 21:
        case 22:
        case 80:
        case 81:
        case 82:
        case 60:
        case 90:
        case 88:
        case 87:
          Uv(a, b, -b.width / $j, -b.height / zt + pq * 2);
          break;
        case 41:
        case 42:
          Fv(a, b, -b.width / 2 - pq * 5, -b.height / zd - fh * pq);
          break;
        case 40:
          Fv(a, b, -b.width / jg, -b.height / br - pq * jg);
          break;
        case 85:
          Fv(a, b, -b.width / 2, -b.height / jg - pq * 2);
          break;
        case 48:
          Fv(a, b, -b.width / br, -b.height / 2 - pq * Ht);
          break;
        case 47:
          Fv(a, b, -b.width / Ht + pq * 2, -b.height / Od);
          break;
        case 59:
          Fv(a, b, -b.width / 2, -b.height / 2 - pq * 5);
          break;
        case 77:
        case 78:
        case 79:
          Fv(a, b, -b.width / 2 - ig * pq, -b.height / 2);
          break;
        case 83:
          Fv(a, b, -b.width / 2, -b.height / Od + Nr * pq);
          break;
        case 84:
        case 86:
          Fv(a, b, -b.width / il, -b.height / jb + th * pq);
          break;
        case 61:
          Fv(a, b, -b.width / X, -b.height / 2 - zt * pq);
      }
    }
  }
  function jv() {
    if (!this.ᐃⵠⵠΔⲆ && this.ⲆᐃᐃⲆᐃ !== 0) {
      if (this.r.x != this.x || this.y != this.r.y) {
        var a = (ᐃΔᐃⵠ.ⲆΔⲆΔⲆΔⵠ(this.x, this.y, this.r.x, this.r.y) + Math.PI / On) % (Math.PI * Gl);
        this.ΔⲆⵠⲆΔ = ᐃΔᐃⵠ.ᐃᐃⲆⵠᐃⲆᐃ(a, this.ΔⲆⵠⲆΔ);
        this.ΔⲆⵠⲆΔ = ᐃΔᐃⵠ.ΔΔᐃᐃᐃΔΔ(this.ΔⲆⵠⲆΔ, a, 0.018);
      }
      Mo.save();
      Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
      Mo.rotate(this.ΔⲆⵠⲆΔ);
      if (this.ⲆᐃᐃⲆᐃ === 223) {
        if (this.ⵠⲆᐃⵠⲆ > 50 || this.ΔⵠⵠⲆᐃ > 0) {
          if (this.ⵠⲆᐃⵠⲆ > 50) {
            this.ΔⵠⵠⲆᐃ = Math.min(Fb, this.ΔⵠⵠⲆᐃ + hx);
          } else {
            this.ΔⵠⵠⲆᐃ = Math.max(et, this.ΔⵠⵠⲆᐃ - hx);
          }
          Mo.globalAlpha = this.ΔⵠⵠⲆᐃ;
          var b = ᐃΔ[225][ff.time];
          Uv(225, b, -b.width / 4, -b.height / Mu);
          Mo.globalAlpha = Ni;
        }
        b = ᐃΔ[223][ff.time];
        Uv(223, b, -b.width / 4, -b.height / 4);
      } else if (this.ⲆᐃᐃⲆᐃ === 229) {
        this.ⲆⵠΔⲆΔ = ᐃΔᐃⵠ.ΔΔᐃᐃᐃΔΔ(this.ⲆⵠΔⲆΔ, this.ⵠⲆᐃⵠⲆ, 0.018);
        this.ΔΔΔΔⲆΔⵠ.ⲆᐃⲆ();
        if (this.ⵠⲆᐃⵠⲆ > 85) {
          this.ΔⵠⵠⲆᐃ = Math.min(1, this.ΔⵠⵠⲆᐃ + hx / 4);
        } else {
          this.ΔⵠⵠⲆᐃ = Math.max(0.1, this.ΔⵠⵠⲆᐃ - hx);
        }
        b = ᐃΔ[1100][ff.time];
        Uv(1100, b, -b.width / Zt, -b.height / 4);
        b = ᐃΔ[1103][ff.time];
        ΔⲆⲆ = -b.width;
        ⵠΔⲆ = -b.height;
        Mo.save();
        Mo.translate(pq * -Dh, pq * -rq);
        Mo.rotate(this.ΔΔΔΔⲆΔⵠ.ᐃⲆⵠ * this.ΔⵠⵠⲆᐃ);
        Mm(Mo, b, -ΔⲆⲆ / 4, -ⵠΔⲆ / 4, ΔⲆⲆ / br, ⵠΔⲆ / br);
        Mo.restore();
        b = ᐃΔ[1106][ff.time];
        Mo.save();
        Mo.translate(pq * 20, -Dh * pq);
        Mo.rotate(this.ΔⵠⵠⲆᐃ * -this.ΔΔΔΔⲆΔⵠ.ᐃⲆⵠ);
        Mm(Mo, b, -ΔⲆⲆ / co, -ⵠΔⲆ / 4, ΔⲆⲆ / 2, ⵠΔⲆ / 2);
        Mo.restore();
      } else if (this.ⲆᐃᐃⲆᐃ === 228) {
        this.ⲆⵠΔⲆΔ = ᐃΔᐃⵠ.ΔΔᐃᐃᐃΔΔ(this.ⲆⵠΔⲆΔ, this.ⵠⲆᐃⵠⲆ, 0.018);
        this.ΔΔΔΔⲆΔⵠ.ⲆᐃⲆ();
        if (this.ⵠⲆᐃⵠⲆ > 85) {
          this.ΔⵠⵠⲆᐃ = Math.min(ig, this.ΔⵠⵠⲆᐃ + hx / cq);
        } else {
          this.ΔⵠⵠⲆᐃ = Math.max(0.1, this.ΔⵠⵠⲆᐃ - hx);
        }
        b = ᐃΔ[1085][ff.time];
        Uv(1085, b, -b.width / 4, -b.height / Qt);
        b = ᐃΔ[1088][ff.time];
        ΔⲆⲆ = -b.width;
        ⵠΔⲆ = -b.height;
        Mo.save();
        Mo.translate(pq * -40, pq * -45);
        Mo.rotate(this.ΔΔΔΔⲆΔⵠ.ᐃⲆⵠ * this.ΔⵠⵠⲆᐃ);
        Mm(Mo, b, -ΔⲆⲆ / 4, -ⵠΔⲆ / Qt, ΔⲆⲆ / Nr, ⵠΔⲆ / X);
        Mo.restore();
        b = ᐃΔ[1091][ff.time];
        Mo.save();
        Mo.translate(pq * 40, pq * -45);
        Mo.rotate(this.ΔⵠⵠⲆᐃ * -this.ΔΔΔΔⲆΔⵠ.ᐃⲆⵠ);
        Mm(Mo, b, -ΔⲆⲆ / 4, -ⵠΔⲆ / $j, ΔⲆⲆ / zd, ⵠΔⲆ / jb);
        Mo.restore();
      } else if (this.ⲆᐃᐃⲆᐃ === 227) {
        this.ⲆⵠΔⲆΔ = ᐃΔᐃⵠ.ΔΔᐃᐃᐃΔΔ(this.ⲆⵠΔⲆΔ, this.ⵠⲆᐃⵠⲆ, 0.018);
        this.ΔΔΔΔⲆΔⵠ.ⲆᐃⲆ();
        if (this.ⵠⲆᐃⵠⲆ > 85) {
          this.ΔⵠⵠⲆᐃ = Math.min(Gt, this.ΔⵠⵠⲆᐃ + hx / Qt);
        } else {
          this.ΔⵠⵠⲆᐃ = Math.max(0.1, this.ΔⵠⵠⲆᐃ - hx);
        }
        b = ᐃΔ[1070][ff.time];
        Uv(1070, b, -b.width / oe, -b.height / Jl);
        b = ᐃΔ[1073][ff.time];
        ΔⲆⲆ = -b.width;
        ⵠΔⲆ = -b.height;
        Mo.save();
        Mo.translate(pq * -40, pq * -45);
        Mo.rotate(this.ΔΔΔΔⲆΔⵠ.ᐃⲆⵠ * this.ΔⵠⵠⲆᐃ);
        Mm(Mo, b, -ΔⲆⲆ / 4, -ⵠΔⲆ / fd, ΔⲆⲆ / 2, ⵠΔⲆ / Nr);
        Mo.restore();
        b = ᐃΔ[1076][ff.time];
        Mo.save();
        Mo.translate(pq * 40, pq * -45);
        Mo.rotate(this.ΔⵠⵠⲆᐃ * -this.ΔΔΔΔⲆΔⵠ.ᐃⲆⵠ);
        Mm(Mo, b, -ΔⲆⲆ / 4, -ⵠΔⲆ / hr, ΔⲆⲆ / Od, ⵠΔⲆ / Ht);
        Mo.restore();
      } else if (this.ⲆᐃᐃⲆᐃ === 91) {
        this.ⲆⵠΔⲆΔ = ᐃΔᐃⵠ.ΔΔᐃᐃᐃΔΔ(this.ⲆⵠΔⲆΔ, this.ⵠⲆᐃⵠⲆ, 0.018);
        b = ᐃΔ[91][ff.time];
        Uv(91, b, -b.width / aq, -b.height / yn);
      } else if (this.ⲆᐃᐃⲆᐃ === 230) {
        this.ⲆⵠΔⲆΔ = ᐃΔᐃⵠ.ΔΔᐃᐃᐃΔΔ(this.ⲆⵠΔⲆΔ, this.ⵠⲆᐃⵠⲆ, 0.018);
        b = ᐃΔ[236][ff.time];
        Uv(236, b, -b.width / 4, -b.height / 4);
      } else if (this.ⲆᐃᐃⲆᐃ === 224) {
        b = ᐃΔ[224][ff.time];
        Uv(224, b, -b.width / Zt, -b.height / eh);
      } else if (this.ⲆᐃᐃⲆᐃ === 239) {
        b = ᐃΔ[1221][ff.time];
        if (this.ⵠⲆᐃⵠⲆ > 85) {
          this.ΔⵠⵠⲆᐃ = Math.min(Ls, this.ΔⵠⵠⲆᐃ + hx / Nh);
        } else {
          this.ΔⵠⵠⲆᐃ = Math.max(fg, this.ΔⵠⵠⲆᐃ - hx);
        }
        this.ⵠⲆᐃΔⵠ += hx * 60;
        if (this.ⵠⲆᐃΔⵠ > 60) {
          this.ⵠⲆᐃΔⵠ -= 60;
        }
        var c = this.ΔⵠⵠⲆᐃ * (-Nl + (this.ⵠⲆᐃΔⵠ < 30 ? this.ⵠⲆᐃΔⵠ / 30 : Mg - (this.ⵠⲆᐃΔⵠ - 30) / 30) * 12);
        Uv(1221, b, -b.width / 4, -b.height / co + c);
      } else if (this.ⲆᐃᐃⲆᐃ === 225) {
        b = ᐃΔ[1043][ff.time];
        if (this.ⵠⲆᐃⵠⲆ > 85) {
          this.ΔⵠⵠⲆᐃ = Math.min(er, this.ΔⵠⵠⲆᐃ + hx / 4);
        } else {
          this.ΔⵠⵠⲆᐃ = Math.max(Rl, this.ΔⵠⵠⲆᐃ - hx);
        }
        this.ⵠⲆᐃΔⵠ += hx * 60;
        if (this.ⵠⲆᐃΔⵠ > 60) {
          this.ⵠⲆᐃΔⵠ -= 60;
        }
        c = ((this.ⵠⲆᐃΔⵠ < 30 ? this.ⵠⲆᐃΔⵠ / 30 : 1 - (this.ⵠⲆᐃΔⵠ - 30) / 30) * 12 - 6) * this.ΔⵠⵠⲆᐃ;
        Uv(1043, b, -b.width / 4, -b.height / cq + c);
      } else if (this.ⲆᐃᐃⲆᐃ === 226) {
        var d = Math.PI / qo;
        var e = Math.PI / Zt;
        b = ᐃΔ[1055][ff.time];
        if (this.ⵠⲆᐃⵠⲆ > 85) {
          this.ΔⵠⵠⲆᐃ = Math.min(1, this.ΔⵠⵠⲆᐃ + hx / oe);
        } else {
          this.ΔⵠⵠⲆᐃ = Math.max(0, this.ΔⵠⵠⲆᐃ - hx);
        }
        this.ⵠⲆᐃΔⵠ += hx * 60;
        if (this.ⵠⲆᐃΔⵠ > 60) {
          this.ⵠⲆᐃΔⵠ -= 60;
        }
        c = this.ΔⵠⵠⲆᐃ * (Qg * (this.ⵠⲆᐃΔⵠ < 30 ? this.ⵠⲆᐃΔⵠ / 30 : Lu - (this.ⵠⲆᐃΔⵠ - 30) / 30) - 6);
        Uv(1055, b, -b.width / 4 + c, -b.height / Oa);
        Mo.restore();
        Mo.save();
        Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
        Mo.rotate(Math.PI + this.ΔⲆⵠⲆΔ + e);
        Mo.translate(120, c);
        Mo.rotate(d);
        b = ᐃΔ[1060][ff.time];
        ΔⲆⲆ = -b.width;
        ⵠΔⲆ = -b.height;
        Mm(Mo, b, -ΔⲆⲆ / 2, -ⵠΔⲆ / 2, ΔⲆⲆ, ⵠΔⲆ);
        Mo.restore();
        Mo.save();
        Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
        Mo.rotate(Math.PI + this.ΔⲆⵠⲆΔ + d + e);
        Mo.translate(120, c);
        Mo.rotate(d);
        b = ᐃΔ[1063][ff.time];
        ΔⲆⲆ = -b.width;
        ⵠΔⲆ = -b.height;
        Mm(Mo, b, -ΔⲆⲆ / qi, -ⵠΔⲆ / il, ΔⲆⲆ, ⵠΔⲆ);
      }
      Mo.restore();
    }
  }
  function kv(b, c, d) {
    if (c.ⵠΔⵠΔΔⵠⲆ() !== Fb) {
      return c;
    }
    var e = ΔΔᐃᐃⲆᐃΔ[d][b];
    if (Yo === e) {
      var f = (e = document.createElement("canvas")).getContext("2d");
      var g = c.width;
      var h = c.height;
      e.width = g;
      e.height = h;
      f.drawImage(c, Ah, 0);
      f.globalCompositeOperation = "source-in";
      f.fillStyle = ᐃⵠΔⵠⲆⲆⵠΔΔ[d];
      f.fillRect(fg, bu, g, h);
      ΔΔᐃᐃⲆᐃΔ[d][b] = e;
    }
    return e;
  }
  function lv() {
    if (this.enabled && this.ⵠⵠⵠⵠⵠ >= bu) {
      var a = new Date().getTime() - this.ⵠⵠⵠⵠⵠ;
      var b = a % 1000 / 1000;
      if (b > 0.5) {
        b = 1 - jg * (b - 0.5);
      } else {
        b *= 2;
      }
      if ((a = Math.floor(a / 1000)) < ow.ⲆⲆⵠΔⲆᐃⲆ) {
        a = ow.ⲆⲆⵠΔⲆᐃⲆ - a;
        this.label ||= Au(pq, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
        if (this.now != a || !this.ⵠΔⵠΔᐃⵠΔ) {
          this.now = a;
          this.ⵠΔⵠΔᐃⵠΔ = Au(pq, "" + a, 40, "#660000", null, null, null, null, null, "#000", sd);
        }
        Mm(Mo, this.label, (Do - this.label.width) / 2, pq * og);
        Mo.globalAlpha = b;
        Mm(Mo, this.ⵠΔⵠΔᐃⵠΔ, (Do - this.label.width) / 2 - this.ⵠΔⵠΔᐃⵠΔ.width + pq * 15, pq * 100);
        Mo.globalAlpha = Lu;
      }
    }
  }
  function mv() {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
    if (this.text.length > sb) {
      for (var a = 0; this.text.length > a && a < 2; a++) {
        if (!this.label[a]) {
          this.label[a] = ib(pq, this.text[a]);
          this.ᐃΔⲆⲆᐃΔΔ[a] = qb;
          this.ⵠⲆⲆΔⲆΔⲆ[a] = Qr;
        }
        if (a === 1) {
          this.ⵠⲆⲆΔⲆΔⲆ[0] = ᐃΔᐃⵠ.ⵠⵠΔⲆᐃ(this.ⲆⲆᐃΔⲆⲆΔ) * 30;
        }
      }
      this.ᐃΔⲆⲆᐃΔΔ[0] += hx;
      if (Ga < this.text.length) {
        this.ⲆⲆᐃΔⲆⲆΔ = Math.min(this.ⲆⲆᐃΔⲆⲆΔ + hx, 1);
        if (wh < this.ᐃΔⲆⲆᐃΔΔ[0] && this.ⲆⲆᐃΔⲆⲆΔ > 0.5) {
          this.ᐃΔⲆⲆᐃΔΔ[1] += hx;
        }
      }
      for (a = 0; this.text.length > a && qo > a; a++) {
        var b = this.ᐃΔⲆⲆᐃΔΔ[a];
        if (b > Gk) {
          Mo.globalAlpha = b < 0.25 ? b * Og : b > 3.75 ? Math.max((Og - b) * oe, Ih) : bd;
          Mm(Mo, this.label[a], -this.label[a].width / 2, -this.ⵠⲆⲆΔⲆΔⲆ[a] + -this.label[a].height / 2 - pq * 110);
        }
      }
      if (this.ᐃΔⲆⲆᐃΔΔ[0] > 4) {
        this.ᐃΔⲆⲆᐃΔΔ.shift();
        this.text.shift();
        this.ⵠⲆⲆΔⲆΔⲆ.shift();
        this.label.shift();
        this.ⲆⲆᐃΔⲆⲆΔ = 0;
      }
    }
    Mo.restore();
  }
  function nv(a, b) {
    if (this.text) {
      if (this.timeout.ⵠᐃᐃ) {
        Mo.globalAlpha = Kg - this.timeout.ᐃⲆⵠ;
      } else {
        Mo.globalAlpha = bs;
      }
      if (!this.label) {
        this.label = Au(pq, this.text, 40, a, null, null, null, null, null, b, 10);
      }
      Mm(Mo, this.label, (Do - this.label.width) / 2, pq * 50);
      Mo.globalAlpha = 1;
      if (this.timeout.ⲆᐃⲆ() && hg == this.timeout.ⵠᐃᐃ) {
        this.text = this.list.shift();
        this.label = null;
      }
    }
  }
  function ov() {
    if (this.message !== Iq) {
      var a = dx.ΔᐃⲆⵠ.ⵠΔΔᐃΔ.length > Gk ? -95 : et;
      Mm(Mo, this.message, 0, lq - this.message.height + a);
    }
  }
  function pv() {
    var c = An;
    switch (this.right) {
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
        c = Ni;
    }
    if (this.ᐃⵠⵠΔⲆ) {
      for (var d = 0; d < this.bubbles.length; d++) {
        var f = this.bubbles[d];
        if (f.Δᐃᐃᐃᐃ > 0.5) {
          var j = 1 - (f.Δᐃᐃᐃᐃ - 0.5) * 2;
        } else {
          j = f.Δᐃᐃᐃᐃ * Ht;
        }
        Mo.globalAlpha = j;
        var k = ᐃΔ[540][ff.time][f.id];
        Mm(Mo, k, dx.ⲆΔⲆ.x + f.x - k.width / 2, dx.ⲆΔⲆ.y + f.y - k.height / 2);
        Mo.globalAlpha = 1;
      }
    } else {
      Mo.save();
      Mo.translate(dx.ⲆΔⲆ.x + this.x, dx.ⲆΔⲆ.y + this.y);
      ff.ⵠⵠΔⲆᐃΔⵠⵠᐃ(this);
      if (this.action & lw.ᐃΔⲆᐃᐃΔᐃ) {
        (function (a) {
          if (tj <= a.right) {
            switch (a.right) {
              case 49:
                Mo.save();
                var b = a.attack.ᐃⲆⵠ * -3 / Math.PI;
                if (a.attack.ⵠᐃᐃ) {
                  var c = -Math.PI / 3 - (Math.PI / 3 + a.attack.ᐃⲆⵠ) / nk;
                } else {
                  c = a.attack.ᐃⲆⵠ;
                }
                Mo.rotate(a.angle - Math.PI / 2 + c);
                Mo.globalAlpha = b / 1.2;
                Vt(Mo, pq * -40, pq * 90, pq * 5);
                St(Mo, "#0B6A84");
                Mo.globalAlpha = b / 1.2;
                Vt(Mo, pq * -52, pq * Fs, $o * pq);
                St(Mo, "#0B6A84");
                Mo.globalAlpha = b / 1.2;
                Vt(Mo, pq * -30, pq * 95, pq * 4);
                St(Mo, "#0B6A84");
                Mo.globalAlpha = 1;
                Mo.restore();
                break;
              case 46:
              case 50:
              case 51:
              case 52:
                if (er === a.ⲆⵠⲆⵠⲆⲆⲆ) {
                  break;
                }
                if (a.ᐃᐃᐃⵠⵠ > 0) {
                  var d = rs.ⵠᐃⲆΔᐃΔⵠ[ff.time];
                } else {
                  d = a.ⵠⵠⵠⲆᐃᐃⲆ > 0 || gl < a.ⲆⵠᐃⲆⲆ ? rs.Δᐃⵠᐃⵠⵠᐃ[ff.time] : rs.ΔⵠΔⲆΔⵠᐃ[ff.time];
                }
                b = a.attack.ᐃⲆⵠ * -3 / Math.PI;
                if ((c = a.attack.ⵠᐃᐃ ? Math.max(0.5 - b / 2 + 0.5, 0) : Math.max(b / 2, 0)) === 0) {
                  a.ⲆΔⵠᐃΔⵠⲆ = a.angle;
                }
                Mo.save();
                Mo.rotate(a.ⲆΔⵠᐃΔⵠⲆ - Math.PI / 2);
                Mo.globalAlpha = b;
                var e = pq * 25 + c * 25;
                Vt(Mo, e, pq * 80, pq * 15);
                St(Mo, d);
                Vt(Mo, -e, pq * 80, pq * Th);
                St(Mo, d);
                Mo.globalAlpha = Fb;
                Mo.restore();
            }
          }
        })(this);
      }
      Mo.save();
      Mo.rotate(this.angle - Math.PI / 2);
      if (!(this.action & lw.ᐃΔⲆᐃᐃΔᐃ)) {
        if (this.action & lw.IDLE || this.ⲆᐃᐃⲆᐃ !== fg) {
          this.ⵠΔᐃᐃΔⲆΔ.ⲆᐃⲆ();
        } else if (this.action & lw.ᐃᐃᐃᐃⵠᐃⲆ) {
          this.ᐃⵠᐃᐃⲆⲆⵠ.ⲆᐃⲆ();
        }
      }
      var m;
      var p = this.ⵠΔᐃᐃΔⲆΔ.ᐃⲆⵠ;
      var q = this.ᐃⵠᐃᐃⲆⲆⵠ.ᐃⲆⵠ;
      if (this.ⵠⲆᐃᐃⵠ === 85) {
        k = ᐃΔ[793][ff.time];
        m = 793;
      } else if (this.ⵠⲆᐃᐃⵠ === 20) {
        k = ᐃΔ[920][ff.time];
        m = 920;
      } else if (this.ⵠⲆᐃᐃⵠ === 21) {
        k = ᐃΔ[924][ff.time];
        m = 924;
      } else if (this.ⵠⲆᐃᐃⵠ === 22) {
        k = ᐃΔ[928][ff.time];
        m = 928;
      } else if (this.ᐃᐃⲆᐃΔⵠⲆ) {
        k = ᐃΔ[822][ff.time];
        m = 822;
      } else {
        k = ᐃΔ[7][this.ⲆⲆⲆⲆ][ff.time];
        m = 7;
      }
      ᐃΔⵠⲆ = ᐃΔ[286][ff.time];
      var w = k;
      var h = m;
      if (this.action & lw.ᐃΔⲆᐃᐃΔᐃ) {
        if (this.attack.ⲆᐃⲆ() && this.attack.ⵠᐃᐃ == Zl) {
          this.ΔⲆᐃⵠⵠ = !this.ΔⲆᐃⵠⵠ;
          this.action -= lw.ᐃΔⲆᐃᐃΔᐃ;
          if (dx.ΔᐃᐃΔ == this.ΔᐃᐃΔ) {
            dx.control.ⵠⵠⵠⵠ = sb;
          }
        }
        if (this.right >= 0) {
          this.ΔⲆᐃⵠⵠ = true;
        }
        var l = this.ΔⲆᐃⵠⵠ ? this.attack.ᐃⲆⵠ : -this.attack.ᐃⲆⵠ / Ft;
        var x = this.ΔⲆᐃⵠⵠ ? this.attack.ᐃⲆⵠ / wi : -this.attack.ᐃⲆⵠ;
        if (this.ᐃᐃⲆᐃΔⵠⲆ) {
          Mo.save();
          Mo.rotate(l);
          Fv(m, k, -k.width / Nj - (66 + p) * pq, -k.height / 2 + (Pg + q) * pq);
          Mo.restore();
          Mo.save();
          Mo.rotate(x);
          Fv(m, k, -k.width / X + pq * (66 + p), -k.height / jg + pq * (5 + q));
          Mo.restore();
        } else if (c === 0) {
          if (this.right === 64) {
            l = -ᐃΔᐃⵠ.ᐃᐃⲆᐃᐃΔⲆ(-l);
          }
          Mo.save();
          Mo.rotate(l);
          Fv(286, ᐃΔⵠⲆ, -ᐃΔⵠⲆ.width / zd - pq * (49 + p), -ᐃΔⵠⲆ.height / ta + (15 + q) * pq);
          if (this.right === 28) {
            var u = ᐃΔ[this.right][this.ⵠⵠᐃᐃᐃ][ff.time];
            Sv(this.right, this.ⵠⵠᐃᐃᐃ, u, -u.width / eh - (62 + p) * pq, -u.height / 4 + pq * (q + zh));
          } else {
            Kp(this.right, p, q);
          }
          if (m >= 920) {
            Uv(m, k, -k.width / Nh - pq * (49 + p), -k.height / fd + (11 + q) * pq);
          } else if (m !== 793) {
            Sv(m, this.ⲆⲆⲆⲆ, k, -k.width / ge - pq * (49 + p), -k.height / 4 + (11 + q) * pq);
          } else {
            Fv(m, k, -k.width / 2 - (49 + p) * pq, -k.height / 2 + pq * (Jj + q));
          }
          Mo.restore();
          Mo.save();
          Mo.rotate(x);
          Fv(286, ᐃΔⵠⲆ, -ᐃΔⵠⲆ.width / 2 + pq * (49 + p), -ᐃΔⵠⲆ.height / 2 + (15 + q) * pq);
          if (m >= 920) {
            Uv(m, k, -k.width / zt + pq * (49 + p), -k.height / Og + pq * (Lg + q));
          } else if (m !== 793) {
            Sv(m, this.ⲆⲆⲆⲆ, k, -k.width / 4 + (49 + p) * pq, -k.height / 4 + (Lg + q) * pq);
          } else {
            Fv(m, k, -k.width / 2 + pq * (49 + p), -k.height / 2 + pq * (11 + q));
          }
          Mo.restore();
        }
      } else if (this.ᐃᐃⲆᐃΔⵠⲆ) {
        Fv(m, k, -k.width / qi - pq * (66 + p), -k.height / 2 + pq * (Zg + q));
        Fv(m, k, -k.width / 2 + pq * (66 + p), -k.height / 2 + pq * (_j + q));
      } else if (c === 0) {
        Fv(286, ᐃΔⵠⲆ, -ᐃΔⵠⲆ.width / 2 - pq * (49 + p), -ᐃΔⵠⲆ.height / 2 + (15 + q) * pq);
        if (this.right === 28) {
          u = ᐃΔ[this.right][this.ⵠⵠᐃᐃᐃ][ff.time];
          Sv(this.right, this.ⵠⵠᐃᐃᐃ, u, -u.width / cq - pq * (62 + p), -u.height / 4 + pq * (q + 18));
        } else {
          Kp(this.right, p, q);
        }
        if (m >= 920) {
          Uv(m, k, -k.width / co - (49 + p) * pq, -k.height / Dd + (Jj + q) * pq);
        } else if (m !== 793) {
          Sv(m, this.ⲆⲆⲆⲆ, k, -k.width / 4 - (49 + p) * pq, -k.height / 4 + pq * (11 + q));
        } else {
          Fv(m, k, -k.width / 2 - pq * (49 + p), -k.height / Gl + pq * (hb + q));
        }
        Fv(286, ᐃΔⵠⲆ, -ᐃΔⵠⲆ.width / 2 + (49 + p) * pq, -ᐃΔⵠⲆ.height / ta + (15 + q) * pq);
        if (m >= 920) {
          Uv(m, k, -k.width / 4 + pq * (49 + p), -k.height / 4 + (as + q) * pq);
        } else if (m !== 793) {
          Sv(m, this.ⲆⲆⲆⲆ, k, -k.width / 4 + pq * (49 + p), -k.height / fd + pq * (11 + q));
        } else {
          Fv(m, k, -k.width / 2 + (49 + p) * pq, -k.height / On + (qh + q) * pq);
        }
      }
      if (this.ΔⲆⵠⵠᐃ && this.ⵠⲆᐃᐃⵠ < 1) {
        k = ᐃΔ[29][this.ᐃΔΔᐃⵠΔⲆ][ff.time];
        Sv(29, this.ᐃΔΔᐃⵠΔⲆ, k, -k.width / 4, -k.height / cq - pq * 39);
      }
      if (this.ᐃᐃⲆᐃΔⵠⲆ) {
        k = ᐃΔ[820][ff.time];
        Fv(820, k, -k.width / 2, -k.height / 2);
        this.ⲆⵠΔᐃⵠᐃΔ.ⲆᐃⲆ();
        k = ᐃΔ[821][ff.time];
        Fv(821, k, -k.width / 2, -k.height / 2 + this.ⲆⵠΔᐃⵠᐃΔ.ᐃⲆⵠ);
      } else {
        k = ᐃΔ[255][this.ⲆⲆⲆⲆ][ff.time];
        if (this.ⵠⲆᐃᐃⵠ !== 85 && (Sv(255, this.ⲆⲆⲆⲆ, k, -k.width / Jl, -k.height / 4), this.ΔΔΔΔⲆ > 0)) {
          k = ᐃΔ[796][this.ΔΔΔΔⲆ][ff.time];
          Sv(796, this.ΔΔΔΔⲆ, k, -k.width / 4, -k.height / 4);
        }
      }
      if (this.action & lw.ⲆⵠΔᐃΔⲆΔ) {
        if (this.ⵠⲆⵠᐃᐃ.ⲆᐃⲆ() && Wh == this.ⵠⲆⵠᐃᐃ.ⵠᐃᐃ) {
          this.action -= lw.ⲆⵠΔᐃΔⲆΔ;
        }
        Mo.globalAlpha = 0.6 - this.ⵠⲆⵠᐃᐃ.ᐃⲆⵠ;
        if (this.ᐃᐃⲆᐃΔⵠⲆ) {
          k = ᐃΔ[825];
          Mm(Mo, k, -k.width / 2, -k.height / Nj);
        } else {
          k = kv(this.ⲆⲆⲆⲆ, ᐃΔ[255][this.ⲆⲆⲆⲆ][0], ΔΔᐃⲆⲆΔⵠⵠⲆ);
          Mm(Mo, k, k.width / co, k.height / 4, -k.width / 2, -k.height / 2);
        }
        Mo.globalAlpha = Ek;
      }
      if (this.action & lw.ΔΔΔᐃⵠΔⲆ) {
        if (this.ⲆⵠΔⵠᐃⵠΔ.ⲆᐃⲆ() && this.ⲆⵠΔⵠᐃⵠΔ.ⵠᐃᐃ == 0) {
          this.action -= lw.ΔΔΔᐃⵠΔⲆ;
        }
        Mo.globalAlpha = 0.6 - this.ⲆⵠΔⵠᐃⵠΔ.ᐃⲆⵠ;
        k = ᐃΔ[266];
        Mm(Mo, k, -k.width / qo, -k.height / 2);
        Mo.globalAlpha = 1;
      }
      if (this.action & lw.ᐃᐃⲆⲆ) {
        if (this.ΔᐃΔ.ⲆᐃⲆ() && this.ΔᐃΔ.ⵠᐃᐃ == 0) {
          this.action -= lw.ᐃᐃⲆⲆ;
        }
        Mo.globalAlpha = 0.6 - this.ΔᐃΔ.ᐃⲆⵠ;
        if (this.ᐃᐃⲆᐃΔⵠⲆ) {
          k = ᐃΔ[823];
          Mm(Mo, k, -k.width / 2, -k.height / jb);
        } else {
          k = kv(this.ⲆⲆⲆⲆ, ᐃΔ[255][this.ⲆⲆⲆⲆ][0], ⲆⵠᐃⲆⵠᐃⲆΔⵠ);
          Mm(Mo, k, k.width / 4, k.height / eh, -k.width / nd, -k.height / tk);
        }
        Mo.globalAlpha = 1;
      }
      if (this.action & lw.ΔΔΔⵠᐃ) {
        if (this.freeze.ⲆᐃⲆ() && this.freeze.ⵠᐃᐃ == 0) {
          this.action -= lw.ΔΔΔⵠᐃ;
        }
        Mo.globalAlpha = 0.6 - this.freeze.ᐃⲆⵠ;
        k = kv(this.ⲆⲆⲆⲆ, ᐃΔ[255][this.ⲆⲆⲆⲆ][Md], ᐃΔᐃⵠΔΔᐃΔⲆ);
        Mm(Mo, k, k.width / 4, k.height / yn, -k.width / 2, -k.height / 2);
        Mo.globalAlpha = 1;
      }
      if (this.action & lw.ⲆⵠΔⲆⵠⵠᐃ) {
        if (this.ᐃᐃΔᐃⵠΔⵠ.ⲆᐃⲆ() && Tg == this.ᐃᐃΔᐃⵠΔⵠ.ⵠᐃᐃ) {
          this.action -= lw.ⲆⵠΔⲆⵠⵠᐃ;
        }
        Mo.globalAlpha = 0.6 - this.ᐃᐃΔᐃⵠΔⵠ.ᐃⲆⵠ;
        if (this.ᐃᐃⲆᐃΔⵠⲆ) {
          k = ᐃΔ[824];
          Mm(Mo, k, -k.width / zd, -k.height / On);
        } else {
          k = kv(this.ⲆⲆⲆⲆ, ᐃΔ[255][this.ⲆⲆⲆⲆ][qu], ΔⲆᐃᐃⵠΔᐃⵠⵠ);
          Mm(Mo, k, k.width / yn, k.height / 4, -k.width / 2, -k.height / ta);
        }
        Mo.globalAlpha = wh;
      }
      iv(this.ⵠⲆᐃᐃⵠ);
      if (c === 1) {
        if (this.action & lw.ᐃΔⲆᐃᐃΔᐃ) {
          p += this.attack.ᐃⲆⵠ * 15;
        }
        Fv(286, ᐃΔⵠⲆ, -ᐃΔⵠⲆ.width / il - pq * 26, -ᐃΔⵠⲆ.height / ta + pq * (31 + q + p));
        if (h >= 920) {
          Uv(h, w, -w.width / 4 - pq * 26, -w.height / 4 + pq * (27 + q + p));
        } else if (h !== 793) {
          Sv(h, this.ⲆⲆⲆⲆ, w, -w.width / 4 - pq * 26, -w.height / co + (27 + q + p) * pq);
        } else {
          Fv(h, w, -w.width / On - pq * 26, -w.height / Gl + (27 + q + p) * pq);
        }
        Fv(286, ᐃΔⵠⲆ, -ᐃΔⵠⲆ.width / 2 + pq * 26, -ᐃΔⵠⲆ.height / 2 + (31 + q + p) * pq);
        if (h >= 920) {
          Uv(h, w, -w.width / 4 + pq * 26, -w.height / aq + (27 + q + p) * pq);
        } else if (h !== 793) {
          Sv(h, this.ⲆⲆⲆⲆ, w, -w.width / 4 + pq * 26, -w.height / 4 + pq * (27 + q + p));
        } else {
          Fv(h, w, -w.width / bq + pq * 26, -w.height / br + pq * (27 + q + p));
        }
        cp(this.right, An, q + p);
      }
      Mo.restore();
      if (this.ⵠⲆᐃᐃⵠ !== 83 && this.ⵠⲆᐃᐃⵠ !== 85) {
        if (this.ᐃᐃᐃⵠⵠ > 0) {
          if (!this.ᐃᐃⲆⵠ.ΔⵠᐃⵠᐃⲆΔ) {
            this.ᐃᐃⲆⵠ.ΔⵠᐃⵠᐃⲆΔ = Au(pq, this.ᐃᐃⲆⵠ.ⲆΔᐃᐃⲆ, Sk, "#187484", "#000", On, null, null, pq * 300);
          }
          k = this.ᐃᐃⲆⵠ.ΔⵠᐃⵠᐃⲆΔ;
        } else {
          this.ᐃᐃⲆⵠ.label ||= Au(pq, this.ᐃᐃⲆⵠ.ⲆΔᐃᐃⲆ, 20, "#FFF", "#000", 2, null, null, pq * 300);
          k = this.ᐃᐃⲆⵠ.label;
        }
        if (rs.ⵠⵠⵠ == ff.ᐃⵠⵠ) {
          Mo.globalAlpha = 0.5;
        }
        p = Math.floor(-k.width / 2);
        q = Math.floor(-k.height / tk - pq * 70);
        Mm(Mo, k, p, q);
        if (this.ᐃᐃⲆⵠ.level > yj) {
          var y = p + k.width + 5;
          k = ᐃΔ[885];
          if (ᐃΔᐃΔᐃⵠⵠ[this.ᐃᐃⲆⵠ.level] === Oq) {
            ᐃΔᐃΔᐃⵠⵠ[this.ᐃᐃⲆⵠ.level] = Au(pq, "[" + this.ᐃᐃⲆⵠ.level + "]", Qj, "#F9E8A2", "#000", qi, null, null, pq * 50);
          }
          Mm(Mo, ᐃΔᐃΔᐃⵠⵠ[this.ᐃᐃⲆⵠ.level], y, q);
        }
        Mo.globalAlpha = 1;
      } else {
        q = Math.floor(pq * -70);
        p = Math.floor(ᐃΔ[558].width / 1.5);
      }
      if (dx.ⲆᐃΔⵠᐃΔᐃ(this.ⵠΔⲆᐃ)) {
        if (this.ⵠΔⲆᐃ == dx.ⵠⵠⵠⵠΔ[0]) {
          k = ᐃΔ[559];
        } else {
          k = ᐃΔ[558];
        }
        Mm(Mo, k, p - k.width - lu, q - 6);
      }
      Mo.restore();
    }
  }
  ⲆⵠᐃⲆⵠᐃⲆΔⵠ = et;
  ΔΔᐃⲆⲆΔⵠⵠⲆ = 1;
  ᐃΔᐃⵠΔΔᐃΔⲆ = 2;
  ΔⲆᐃᐃⵠΔᐃⵠⵠ = rb;
  ⵠⵠⲆᐃⲆᐃΔⵠᐃ = 4;
  ΔΔᐃᐃⲆᐃΔ = [[], [], [], [], []];
  ᐃⵠΔⵠⲆⲆⵠΔΔ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
  var qv = gl;
  function rv(j, e, i, k, n, o, q, a) {
    if (a === Gn) {
      a = 0;
    }
    ff.ΔⵠΔⵠ[n].ⲆᐃⲆ();
    for (var r = q; r >= a; r--) {
      for (var t = j; e >= t; t++) {
        for (var w = i; w <= k; w++) {
          var x = bx.ⲆⲆΔⵠ[t][w];
          if (x && x[o]) {
            var y = x[o][r];
            if (y !== undefined) {
              for (var z = Md; z < y.length; z++) {
                var A = y[z];
                if (A.ⲆᐃⲆ) {
                  if (A.ΔᐃΔ.ⲆᐃⲆ() && A.ΔᐃΔ.ⵠᐃᐃ == li) {
                    A.ⲆᐃⲆ = false;
                  }
                  var B = pq * ((1 - A.ΔᐃΔ.ᐃⲆⵠ) * hx * 600);
                  var D = Math.sin(A.angle) * B;
                  var E = B * Math.cos(A.angle);
                } else {
                  D = 0;
                  E = 0;
                }
                var F = ᐃΔ[n][ff.time][r];
                var G = ff.ΔⵠΔⵠ[n].ᐃⲆⵠ * -F.width;
                var H = ff.ΔⵠΔⵠ[n].ᐃⲆⵠ * -F.height;
                Mm(Mo, F, dx.ⲆΔⲆ.x + A.x - G / 2 + D, dx.ⲆΔⲆ.y + A.y - H / qi + E, G, H);
              }
            }
          }
        }
      }
    }
  }
  function sv(j, e, i, k, n, o, q, a = undefined) {
    if (a === undefined) a = Ih;
    for (var r = q; a <= r; r--) {
      for (var t = j; e >= t; t++) {
        for (var w = i; w <= k; w++) {
          var x = bx.ⲆⲆΔⵠ[t][w];
          if (x && x[o]) {
            var y = x[o][r];
            if (y !== undefined) {
              for (var z = 0; y.length > z; z++) {
                var A = y[z];
                var B = ᐃΔ[n][ff.time][r];
                var D = (qv + (t + w) * 3) % 60;
                var E = D < 30 ? D / 30 : Ek - (D - 30) / 30;
                var F = -B.width * (1 + E * 0.9 / 30);
                var G = -B.height * (1 + E * 0.9 / 30);
                E = (D = (qv + (t + w) * 7) % 60) < 30 ? D / 30 : 1 - (D - 30) / 30;
                var H = Mo.globalAlpha;
                Mo.globalAlpha = (0.9 + E * 0.1) * H;
                Mm(Mo, B, dx.ⲆΔⲆ.x + A.x - F / Nj, dx.ⲆΔⲆ.y + A.y - G / jg, F, G);
                Mo.globalAlpha = H;
              }
            }
          }
        }
      }
    }
  }
  var tv = [];
  for (xt = 0; xt < 100; xt++) {
    var uv = 1;
    if (Math.random() < 0.25) {
      uv = qu;
    }
    tv.push(uv);
  }
  function vv(c, e, f, i, j, k, m, a, n) {
    if (a === ys) {
      a = 0;
    }
    for (var h = c; h <= e; h++) {
      for (var o = f; o <= i; o++) {
        var p = bx.ⲆⲆΔⵠ[h][o];
        if (Ct !== p && p[k] !== E) {
          var q = p[k];
          if (q !== undefined) {
            if (Fb === q.scale) {
              var r = ᐃΔ[j][ff.time][q.ᐃᐃᐃᐃ];
              Mo.save();
              Mo.translate(dx.ⲆΔⲆ.x + q.x, dx.ⲆΔⲆ.y + q.y);
              Mo.rotate(q.angle);
              Mm(Mo, r, -r.width / Mu, -r.height / 4, r.width / Gl, r.height / 2);
              Mo.restore();
            } else if (hd === q.scale) {
              for (var t = Aa; t < q.ⵠⲆⲆ.length; t++) {
                Mo.save();
                Mo.translate(dx.ⲆΔⲆ.x + q.x, dx.ⲆΔⲆ.y + q.y);
                Mo.rotate(q.ⵠⲆⲆ[t].angle);
                r = ᐃΔ[j][ff.time][q.ⵠⲆⲆ[t].ᐃᐃᐃᐃ];
                Mm(Mo, r, -r.width / 3 + q.ⵠⲆⲆ[t].x, -r.height / 3 + q.ⵠⲆⲆ[t].y, r.width / 1.5, r.height / 1.5);
                Mo.restore();
              }
            } else {
              r = ᐃΔ[j][ff.time][q.ᐃᐃᐃᐃ];
              Mo.save();
              Mo.translate(dx.ⲆΔⲆ.x + q.x, dx.ⲆΔⲆ.y + q.y);
              Mo.rotate(q.angle);
              Mm(Mo, r, -r.width / 2, -r.height / Nr, r.width, r.height);
              Mo.restore();
            }
          }
        }
      }
    }
  }
  function wv(f, e, i, j, k, n, o, a = 0, q) {
    for (var h = o; a <= h; h--) {
      for (var r = f; e >= r; r++) {
        for (var s = i; j >= s; s++) {
          if (q <= 0 || tv[(r + s * q) % tv.length] !== _h) {
            var t = bx.ⲆⲆΔⵠ[r][s];
            if (E !== t && t[n] !== undefined) {
              var w = t[n][h];
              if (Pl !== w) {
                for (var x = xq; w.length > x; x++) {
                  var y = w[x];
                  if (y.ⲆᐃⲆ) {
                    if (y.ΔᐃΔ.ⲆᐃⲆ() && y.ΔᐃΔ.ⵠᐃᐃ == 0) {
                      y.ⲆᐃⲆ = false;
                    }
                    var z = pq * (hx * (Gt - y.ΔᐃΔ.ᐃⲆⵠ) * 600);
                    var A = z * Math.sin(y.angle);
                    var B = z * Math.cos(y.angle);
                  } else {
                    A = fg;
                    B = fg;
                  }
                  var D = ᐃΔ[k][ff.time][h];
                  Mm(Mo, D, dx.ⲆΔⲆ.x + y.x - D.width / (ⵠΔΔⲆᐃ * Gl) + A, dx.ⲆΔⲆ.y + y.y - D.height / (ⵠΔΔⲆᐃ * 2) + B, D.width / ⵠΔΔⲆᐃ, D.height / ⵠΔΔⲆᐃ);
                }
              }
            }
          }
        }
      }
    }
  }
  function xv(j, e, i, k, n, o, q, a = undefined, r) {
    if (a === undefined) a = bu;
    for (var h = q; a <= h; h--) {
      for (var t = j; t <= e; t++) {
        for (var w = i; w <= k; w++) {
          var x = bx.ⲆⲆΔⵠ[t][w];
          if (x !== es && x[o] !== Mk) {
            var A = x[o][h];
            if (A !== undefined) {
              for (var B = 0; A.length > B; B++) {
                var D = A[B];
                if (D.ⲆᐃⲆ) {
                  if (D.ΔᐃΔ.ⲆᐃⲆ() && D.ΔᐃΔ.ⵠᐃᐃ == 0) {
                    D.ⲆᐃⲆ = Eq;
                  }
                  var E = hx * (1 - D.ΔᐃΔ.ᐃⲆⵠ) * 600 * pq;
                  var F = E * Math.sin(D.angle);
                  var G = Math.cos(D.angle) * E;
                } else {
                  F = 0;
                  G = xq;
                }
                for (var H = Gg; H < ᐃΔΔⲆⲆⵠⲆ[h].ΔⵠⲆΔ; H++) {
                  if (xf !== ff.ⲆΔⲆᐃᐃ[H].ΔΔⲆⲆⲆΔΔ) {
                    ff.ⲆΔⲆᐃᐃ[H].ⲆᐃⲆ();
                    ff.ⲆΔⲆᐃᐃ[H].ΔΔⲆⲆⲆΔΔ = xf;
                  }
                  var I = ᐃΔ[941][ff.time][ᐃΔΔⲆⲆⵠⲆ[h].ΔⲆⵠⲆ[H].ⲆⲆΔ];
                  var J = ff.ⲆΔⲆᐃᐃ[H].ᐃⲆⵠ * -I.width;
                  var K = -I.height * ff.ⲆΔⲆᐃᐃ[H].ᐃⲆⵠ;
                  Mm(Mo, I, dx.ⲆΔⲆ.x + D.x - J / Zt + F + ᐃΔΔⲆⲆⵠⲆ[h].ΔⲆⵠⲆ[H].x, dx.ⲆΔⲆ.y + D.y - K / 4 + G + ᐃΔΔⲆⲆⵠⲆ[h].ΔⲆⵠⲆ[H].y, J / 2, K / bq);
                }
              }
            }
          }
        }
      }
    }
  }
  ⵠΔΔⲆᐃ = 1;
  ᐃΔΔⲆⲆⵠⲆ = [{
    ΔⵠⲆΔ: 10,
    ΔⲆⵠⲆ: [{
      x: -128,
      y: -Hh,
      ⲆⲆΔ: Ih
    }, {
      x: -86,
      y: -Nh,
      ⲆⲆΔ: 1
    }, {
      ⲆⲆΔ: 2,
      x: -60,
      y: -74
    }, {
      ⲆⲆΔ: 0,
      x: -22,
      y: -144
    }, {
      x: -58,
      y: 86,
      ⲆⲆΔ: 0
    }, {
      ⲆⲆΔ: 0,
      x: hd,
      y: -30
    }, {
      ⲆⲆΔ: 1,
      x: 65,
      y: -115
    }, {
      x: 118,
      y: -50,
      ⲆⲆΔ: Gg
    }, {
      y: Zq,
      ⲆⲆΔ: 1,
      x: 73
    }, {
      x: 67,
      y: 79,
      ⲆⲆΔ: 0
    }]
  }, {
    ΔⵠⲆΔ: 5,
    ΔⲆⵠⲆ: [{
      ⲆⲆΔ: Ah,
      x: -45,
      y: -26
    }, {
      y: f,
      x: -45,
      ⲆⲆΔ: qi
    }, {
      x: 10,
      ⲆⲆΔ: 1,
      y: -60
    }, {
      y: -17,
      x: 52,
      ⲆⲆΔ: 1
    }, {
      y: 45,
      ⲆⲆΔ: sb,
      x: Hs
    }]
  }, {
    ΔⵠⲆΔ: Qn,
    ΔⲆⵠⲆ: [{
      y: 3,
      x: -30,
      ⲆⲆΔ: 2
    }, {
      ⲆⲆΔ: 2,
      y: -38,
      x: 7
    }, {
      x: 37,
      ⲆⲆΔ: il,
      y: 5
    }]
  }, {
    ΔⵠⲆΔ: 11,
    ΔⲆⵠⲆ: [{
      ⲆⲆΔ: On,
      x: -74,
      y: -87
    }, {
      ⲆⲆΔ: 1,
      x: -11,
      y: -10
    }, {
      x: -99,
      ⲆⲆΔ: 1,
      y: 17
    }, {
      y: 84,
      ⲆⲆΔ: Fj,
      x: -66
    }, {
      x: -55,
      ⲆⲆΔ: Ls,
      y: 123
    }, {
      x: Bl,
      y: 81,
      ⲆⲆΔ: br
    }, {
      x: 52,
      y: 50,
      ⲆⲆΔ: fg
    }, {
      y: 9,
      x: 138,
      ⲆⲆΔ: er
    }, {
      x: 104,
      ⲆⲆΔ: xq,
      y: -28
    }, {
      y: -56,
      x: 67,
      ⲆⲆΔ: 2
    }, {
      ⲆⲆΔ: 0,
      y: -112,
      x: 5
    }]
  }, {
    ΔⵠⲆΔ: 6,
    ΔⲆⵠⲆ: [{
      ⲆⲆΔ: Od,
      y: -66,
      x: -33
    }, {
      x: -58,
      ⲆⲆΔ: xq,
      y: 10
    }, {
      x: -_k,
      y: 44,
      ⲆⲆΔ: Mg
    }, {
      y: Dh,
      ⲆⲆΔ: 0,
      x: 44
    }, {
      ⲆⲆΔ: jb,
      y: -36,
      x: 53
    }, {
      x: 7,
      y: -62,
      ⲆⲆΔ: 0
    }]
  }, {
    ΔⲆⵠⲆ: [{
      y: -25,
      x: -19,
      ⲆⲆΔ: Fb
    }, {
      ⲆⲆΔ: 2,
      y: kg,
      x: -29
    }, {
      ⲆⲆΔ: 0,
      x: 12,
      y: 12
    }],
    ΔⵠⲆΔ: 3
  }];
  var yv = 0;
  var zv = Gg;
  var Av = yj;
  var Bv = 0;
  function Cv() {
    Mo.globalAlpha = 1;
    if (ff.transition) {
      var a = ff.ⵠⲆΔΔ.ⲆᐃⲆ();
    }
    ff.ᐃⵠΔΔΔⵠᐃΔΔ(-dx.ⲆΔⲆ.x, -dx.ⲆΔⲆ.y);
    yv = Math.max(Math.floor(-dx.ⲆΔⲆ.x / ff.ᐃΔΔΔΔᐃⵠ) - 5, Ih);
    zv = Math.min(Math.floor((-dx.ⲆΔⲆ.x + dx.ⲆΔⲆ.w) / ff.ᐃΔΔΔΔᐃⵠ) + yn, ff.ΔⲆᐃⵠᐃ - Co);
    Av = Math.max(Math.floor(-dx.ⲆΔⲆ.y / ff.ⵠⲆΔⲆⲆΔᐃ) - nk, Aa);
    Bv = Math.min(Math.floor((-dx.ⲆΔⲆ.y + dx.ⲆΔⲆ.ⵠΔⲆ) / ff.ⵠⲆΔⲆⲆΔᐃ) + 3, ff.ΔⲆᐃᐃᐃ - 1);
    (function () {
      for (var c = ff.ᐃᐃⵠᐃ.length - Ni; c >= 0; c--) {
        if ((A = ff.ᐃᐃⵠᐃ[c]).ⲆⲆΔ === ff.ᐃⵠΔᐃⲆ) {
          var f = ff.ΔΔⲆⲆΔ[A.ⲆⲆΔ];
          if (A.x1 - 230 - Do <= -dx.ⲆΔⲆ.x && A.x2 + 330 >= -dx.ⲆΔⲆ.x && -dx.ⲆΔⲆ.y >= A.y1 - lq && -dx.ⲆΔⲆ.y <= A.y2 + cl) {
            var j = A.x2;
            if (A.ⲆⲆΔ !== ff.ᐃⵠΔᐃⲆ) {
              j -= 610;
            }
            var k = A.x1;
            if (A.ⲆⲆΔ !== ff.ᐃⵠΔᐃⲆ) {
              k += 610;
            }
            var m = A.y2;
            if (A.ⲆⲆΔ !== ff.ᐃⵠΔᐃⲆ) {
              m -= 610;
            }
            var p = A.y1;
            if (A.ⲆⲆΔ !== ff.ᐃⵠΔᐃⲆ) {
              p += 610;
            }
            if (ff.transition) {
              var q = ff.time ? 1 - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
              Mo.fillStyle = Tv(f.ⵠⲆΔ[Rl], f.ⵠⲆΔ[sl], f.ⵠⲆΔ[2], f.ᐃⵠⵠ[0], f.ᐃⵠⵠ[Mg], f.ᐃⵠⵠ[1], q);
            } else {
              Mo.fillStyle = f.ᐃΔⲆΔⵠ[ff.time];
            }
            var w = Math.max(dx.ⲆΔⲆ.x + k - br - 230, xq);
            var x = Math.max(-dx.ⲆΔⲆ.x + Do - j - 330 - il, Gg);
            var y = Math.max(dx.ⲆΔⲆ.y + p - br, 0);
            var z = Math.max(-dx.ⲆΔⲆ.y + lq - m - xo - br, 0);
            Mo.beginPath();
            Mo.fillRect(w, y, Do - x - w, lq - y - z);
          }
        }
      }
      for (c = ff.ᐃᐃⵠᐃ.length - Co; gl <= c; c--) {
        if ((A = ff.ᐃᐃⵠᐃ[c]).ⲆⲆΔ !== ff.ᐃⵠΔᐃⲆ) {
          j = A.x2;
          if (ff.ᐃⵠΔᐃⲆ !== A.ⲆⲆΔ) {
            j -= 400;
          }
          k = A.x1;
          if (ff.ᐃⵠΔᐃⲆ !== A.ⲆⲆΔ) {
            k += 400;
          }
          m = A.y2;
          if (A.ⲆⲆΔ !== ff.ᐃⵠΔᐃⲆ) {
            m -= 300;
          }
          p = A.y1;
          if (ff.ᐃⵠΔᐃⲆ !== A.ⲆⲆΔ) {
            p += 300;
          }
          if (!(A.ᐃⲆⵠ & ow.ᐃⵠⵠΔⵠ) && -dx.ⲆΔⲆ.x >= j - Do + 120 && -dx.ⲆΔⲆ.x <= j + 820 && -dx.ⲆΔⲆ.y >= p + 88 - lq && m + 50 >= -dx.ⲆΔⲆ.y) {
            Jv(j, p + 88, m - 88, dx.Δᐃⵠⵠ[qu], ff.ΔΔⲆⲆΔ[A.ⲆⲆΔ], A.ᐃⲆⵠ & ow.ᐃⵠⵠΔⵠ);
            Ev(j, p + 88, m - 88, dx.Δᐃⵠⵠ[An], ff.ΔΔⲆⲆΔ[A.ⲆⲆΔ], A.ᐃⲆⵠ & ow.ᐃⵠⵠΔⵠ);
          }
          if (!(A.ᐃⲆⵠ & ow.ⲆΔΔⲆΔ) && -dx.ⲆΔⲆ.x >= k - Do - 700 && -dx.ⲆΔⲆ.x <= k - jk && -dx.ⲆΔⲆ.y >= p + 88 - lq && m + 50 >= -dx.ⲆΔⲆ.y) {
            Wv(k, p + 88, m - 88, dx.Δᐃⵠⵠ[1], ff.ΔΔⲆⲆΔ[A.ⲆⲆΔ], A.ᐃⲆⵠ & ow.ⲆΔΔⲆΔ);
            Nv(k, p + 88, m - 88, dx.Δᐃⵠⵠ[Ls], ff.ΔΔⲆⲆΔ[A.ⲆⲆΔ], A.ᐃⲆⵠ & ow.ⲆΔΔⲆΔ);
          }
          if (tj === (A.ᐃⲆⵠ & ow.ᐃᐃⲆᐃⵠ) && -dx.ⲆΔⲆ.x >= k - 235 - Do && j + 350 >= -dx.ⲆΔⲆ.x && m - lq - 275 <= -dx.ⲆΔⲆ.y && -dx.ⲆΔⲆ.y <= m + 490) {
            Kv(m - 230, k - 230, j + 230, dx.Δᐃⵠⵠ[qo], ff.ΔΔⲆⲆΔ[A.ⲆⲆΔ], A.ᐃⲆⵠ & ow.ᐃᐃⲆᐃⵠ);
            Iv(m - 230, k - 230, j + 230, dx.Δᐃⵠⵠ[X], ff.ΔΔⲆⲆΔ[A.ⲆⲆΔ], A.ᐃⲆⵠ & ow.ᐃᐃⲆᐃⵠ);
          }
          if (!(A.ᐃⲆⵠ & ow.ᐃᐃᐃⲆⵠ) && -dx.ⲆΔⲆ.x >= k - 235 - Do && j + 350 >= -dx.ⲆΔⲆ.x && p - lq - 390 <= -dx.ⲆΔⲆ.y && -dx.ⲆΔⲆ.y <= p + 315) {
            Hv(p + 310, k - 230, j + 230, dx.Δᐃⵠⵠ[3], ff.ΔΔⲆⲆΔ[A.ⲆⲆΔ], A.ᐃⲆⵠ & ow.ᐃᐃᐃⲆⵠ);
            Dv(p + 310, k - 230, j + 230, dx.Δᐃⵠⵠ[3], ff.ΔΔⲆⲆΔ[A.ⲆⲆΔ], A.ᐃⲆⵠ & ow.ᐃᐃᐃⲆⵠ);
          }
        }
      }
      for (c = ff.ᐃᐃⵠᐃ.length - 1; Fj <= c; c--) {
        var A = ff.ᐃᐃⵠᐃ[c];
        if (ff.ᐃⵠΔᐃⲆ !== A.ⲆⲆΔ) {
          j = A.x2;
          if (ff.ᐃⵠΔᐃⲆ !== A.ⲆⲆΔ) {
            j -= 400;
          }
          k = A.x1;
          if (A.ⲆⲆΔ !== ff.ᐃⵠΔᐃⲆ) {
            k += 400;
          }
          m = A.y2;
          if (ff.ᐃⵠΔᐃⲆ !== A.ⲆⲆΔ) {
            m -= 300;
          }
          p = A.y1;
          if (ff.ᐃⵠΔᐃⲆ !== A.ⲆⲆΔ) {
            p += 300;
          }
          if (A.ᐃⲆⵠ & ow.ᐃⵠⵠΔⵠ && -dx.ⲆΔⲆ.x >= j - Do + 120 && j + 820 >= -dx.ⲆΔⲆ.x && -dx.ⲆΔⲆ.y >= p + 88 - lq && m + 50 >= -dx.ⲆΔⲆ.y) {
            Jv(j, p + 88, m - 88, dx.Δᐃⵠⵠ[An], ff.ΔΔⲆⲆΔ[A.ⲆⲆΔ], A.ᐃⲆⵠ & ow.ᐃⵠⵠΔⵠ);
          }
          if (A.ᐃⲆⵠ & ow.ⲆΔΔⲆΔ && k - Do - 700 <= -dx.ⲆΔⲆ.x && k - 20 >= -dx.ⲆΔⲆ.x && p + 88 - lq <= -dx.ⲆΔⲆ.y && -dx.ⲆΔⲆ.y <= m + 50) {
            Wv(k, p + 88, m - 88, dx.Δᐃⵠⵠ[1], ff.ΔΔⲆⲆΔ[A.ⲆⲆΔ], A.ᐃⲆⵠ & ow.ⲆΔΔⲆΔ);
          }
          if (Gk !== (A.ᐃⲆⵠ & ow.ᐃᐃⲆᐃⵠ) && k - 235 - Do <= -dx.ⲆΔⲆ.x && -dx.ⲆΔⲆ.x <= j + 350 && -dx.ⲆΔⲆ.y >= m - lq - 275 && -dx.ⲆΔⲆ.y <= m + 490) {
            Kv(m - 230, k - 230, j + 230, dx.Δᐃⵠⵠ[2], ff.ΔΔⲆⲆΔ[A.ⲆⲆΔ], A.ᐃⲆⵠ & ow.ᐃᐃⲆᐃⵠ);
          }
          if (Gk !== (A.ᐃⲆⵠ & ow.ᐃᐃᐃⲆⵠ) && k - 235 - Do <= -dx.ⲆΔⲆ.x && -dx.ⲆΔⲆ.x <= j + 350 && p - lq - 390 <= -dx.ⲆΔⲆ.y && -dx.ⲆΔⲆ.y <= p + 315) {
            Hv(p + 310, k - 230, j + 230, dx.Δᐃⵠⵠ[3], ff.ΔΔⲆⲆΔ[A.ⲆⲆΔ], A.ᐃⲆⵠ & ow.ᐃᐃᐃⲆⵠ);
          }
        }
      }
      for (c = ff.ᐃᐃⵠᐃ.length - 1; c >= 0; c--) {
        A = ff.ᐃᐃⵠᐃ[c];
        if (ff.ᐃⵠΔᐃⲆ !== A.ⲆⲆΔ) {
          f = ff.ΔΔⲆⲆΔ[A.ⲆⲆΔ];
          if (A.x1 - 230 - Do <= -dx.ⲆΔⲆ.x && A.x2 + 330 >= -dx.ⲆΔⲆ.x && -dx.ⲆΔⲆ.y >= A.y1 - lq && A.y2 + 100 >= -dx.ⲆΔⲆ.y) {
            j = A.x2;
            if (ff.ᐃⵠΔᐃⲆ !== A.ⲆⲆΔ) {
              if (A.ᐃⲆⵠ & ow.ᐃⵠⵠΔⵠ) {
                j -= 610;
              } else {
                j -= 414;
              }
            }
            k = A.x1;
            if (ff.ᐃⵠΔᐃⲆ !== A.ⲆⲆΔ) {
              if (Aa === (A.ᐃⲆⵠ & ow.ⲆΔΔⲆΔ)) {
                k += 414;
              } else {
                k += 610;
              }
            }
            m = A.y2;
            if (A.ⲆⲆΔ !== ff.ᐃⵠΔᐃⲆ) {
              if (Gg === (A.ᐃⲆⵠ & ow.ᐃᐃⲆᐃⵠ)) {
                m -= 414;
              } else {
                m -= 610;
              }
            }
            p = A.y1;
            if (A.ⲆⲆΔ !== ff.ᐃⵠΔᐃⲆ) {
              if (Gk === (A.ᐃⲆⵠ & ow.ᐃᐃᐃⲆⵠ)) {
                p += 414;
              } else {
                p += 610;
              }
            }
            if (ff.transition) {
              q = ff.time ? bd - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
              Mo.fillStyle = Tv(f.ⵠⲆΔ[0], f.ⵠⲆΔ[Fb], f.ⵠⲆΔ[br], f.ᐃⵠⵠ[bu], f.ᐃⵠⵠ[Fb], f.ᐃⵠⵠ[2], q);
            } else {
              Mo.fillStyle = f.ᐃΔⲆΔⵠ[ff.time];
            }
            w = Math.max(dx.ⲆΔⲆ.x + k - qi - 230, tj);
            x = Math.max(-dx.ⲆΔⲆ.x + Do - j - 330 - 2, An);
            y = Math.max(dx.ⲆΔⲆ.y + p - 2, 0);
            z = Math.max(-dx.ⲆΔⲆ.y + lq - m - Oh - qo, 0);
            Mo.beginPath();
            Mo.fillRect(w, y, Do - x - w, lq - y - z);
          }
        }
      }
      if (pf.ⲆⵠΔᐃΔ) {
        Qv(rv, Av, Bv, yv, zv, 695, "isl", 2);
        Qv(rv, Av, Bv, yv, zv, 694, "isl", tk);
      }
      Qv(wv, Av, Bv, yv, zv, 692, "isl", Od);
      if (pf.ⲆⵠΔᐃΔ) {
        Qv(vv, Av, Bv, yv, zv, 243, "de");
      }
      var B = ff.Δᐃⵠ[rw.ⵠΔΔⵠ];
      for (c = 0; c < B.length; c++) {
        for (var b = B[c], C = 0; C < b.ⵠΔⵠᐃⵠ.length; C++) {
          Vv(b.ⵠΔⵠᐃⵠ[C]);
        }
      }
      if ((lp += hx * 40) > 60) {
        lp -= 60;
      }
      Qv(Ap, Av, Bv, yv, zv, 1024, "r", 0);
      for (c = Aa; c < ff.ᐃᐃⵠᐃ.length; c++) {
        if ((A = ff.ᐃᐃⵠᐃ[c]).ⲆⲆΔ !== ff.ᐃⵠΔᐃⲆ) {
          j = A.x2;
          if (A.ⲆⲆΔ !== ff.ᐃⵠΔᐃⲆ) {
            j -= 400;
          }
          k = A.x1;
          if (A.ⲆⲆΔ !== ff.ᐃⵠΔᐃⲆ) {
            k += 400;
          }
          m = A.y2;
          if (A.ⲆⲆΔ !== ff.ᐃⵠΔᐃⲆ) {
            m -= 300;
          }
          p = A.y1;
          if (ff.ᐃⵠΔᐃⲆ !== A.ⲆⲆΔ) {
            p += 300;
          }
          if ((A.ᐃⲆⵠ & ow.ᐃⵠⵠΔⵠ) > 0 && j - Do + 120 <= -dx.ⲆΔⲆ.x && -dx.ⲆΔⲆ.x <= j + 820 && -dx.ⲆΔⲆ.y >= p + 88 - lq && -dx.ⲆΔⲆ.y <= m + 50) {
            Ev(j, p + 88, m - 88, dx.Δᐃⵠⵠ[fg], ff.ΔΔⲆⲆΔ[A.ⲆⲆΔ], A.ᐃⲆⵠ & ow.ᐃⵠⵠΔⵠ);
          }
          if (qb < (A.ᐃⲆⵠ & ow.ⲆΔΔⲆΔ) && -dx.ⲆΔⲆ.x >= k - Do - 700 && -dx.ⲆΔⲆ.x <= k - 20 && p + 88 - lq <= -dx.ⲆΔⲆ.y && m + 50 >= -dx.ⲆΔⲆ.y) {
            Nv(k, p + 88, m - 88, dx.Δᐃⵠⵠ[1], ff.ΔΔⲆⲆΔ[A.ⲆⲆΔ], A.ᐃⲆⵠ & ow.ⲆΔΔⲆΔ);
          }
          if ((A.ᐃⲆⵠ & ow.ᐃᐃⲆᐃⵠ) > qu && -dx.ⲆΔⲆ.x >= k - 235 - Do && -dx.ⲆΔⲆ.x <= j + 350 && m - lq - 275 <= -dx.ⲆΔⲆ.y && m + 490 >= -dx.ⲆΔⲆ.y) {
            Iv(m - 230, k - 230, j + 230, dx.Δᐃⵠⵠ[Gl], ff.ΔΔⲆⲆΔ[A.ⲆⲆΔ], A.ᐃⲆⵠ & ow.ᐃᐃⲆᐃⵠ);
          }
          if ((A.ᐃⲆⵠ & ow.ᐃᐃᐃⲆⵠ) > fg && -dx.ⲆΔⲆ.x >= k - 235 - Do && -dx.ⲆΔⲆ.x <= j + 350 && p - lq - 390 <= -dx.ⲆΔⲆ.y && p + 315 >= -dx.ⲆΔⲆ.y) {
            Dv(p + 310, k - 230, j + 230, dx.Δᐃⵠⵠ[Jd], ff.ΔΔⲆⲆΔ[A.ⲆⲆΔ], A.ᐃⲆⵠ & ow.ᐃᐃᐃⲆⵠ);
          }
        }
      }
    })();
    (function () {
      var Q = yv;
      var e = zv;
      var i = Av;
      var t = Bv;
      if (pf.ⲆⵠΔᐃΔ) {
        Qv(wv, i, t, Q, e, 621, "l", 2);
      }
      if (pf.ⲆⵠΔᐃΔ) {
        Qv(wv, i, t, Q, e, rs.ΔⵠⲆⲆⵠ, "la", Pg);
      }
      Qv(wv, i, t, Q, e, 203, "la", bt);
      Qv(rv, i, t, Q, e, 620, "l", zd);
      if (pf.ⲆⵠΔᐃΔ) {
        Qv(xv, i, t, Q, e, 203, "la", 5);
        Qv(rv, i, t, Q, e, 619, "l", 2);
      }
      Qv(wv, i, t, Q, e, 1052, "ma", fd);
      for (var n = ff.Δᐃⵠ[rw.ΔⵠᐃⵠᐃΔΔ], aa = Ih; n.length > aa; aa++) {
        n[aa].ΔⲆᐃᐃⲆᐃΔ();
      }
      var ba = ff.Δᐃⵠ[rw.ⵠΔΔⵠ];
      for (aa = Aa; ba.length > aa; aa++) {
        for (var ca = ba[aa], da = 0; ca.ⲆⲆⲆⵠⲆ.length > da; da++) {
          Pv(ca.ⲆⲆⲆⵠⲆ[da]);
        }
      }
      var ea = ff.Δᐃⵠ[rw.ΔΔᐃΔⵠ];
      for (aa = 0; aa < ea.length; aa++) {
        Lv(ea[aa], 125);
        ea[aa].ⵠΔⵠΔⲆ(ea[aa].info);
      }
      var l = ff.Δᐃⵠ[rw.ᐃᐃΔⲆⵠ];
      for (aa = 0; l.length > aa; aa++) {
        if (l[aa].action == 2) {
          Gv(l[aa]);
        }
      }
      var fa = ff.Δᐃⵠ[rw.ⲆⲆᐃΔⵠ];
      for (aa = 0; aa < fa.length; aa++) {
        Gv(fa[aa], 113);
      }
      var ha = ff.Δᐃⵠ[rw.ⲆⵠⲆⵠᐃ];
      for (aa = gl; ha.length > aa; aa++) {
        Gv(ha[aa]);
      }
      var ia = ff.Δᐃⵠ[rw.ⵠⵠⲆⲆⲆ];
      for (aa = 0; ia.length > aa; aa++) {
        Gv(ia[aa]);
      }
      var ja = ff.Δᐃⵠ[rw.ᐃΔΔᐃⲆ];
      for (aa = xq; aa < ja.length; aa++) {
        Gv(ja[aa], 118);
      }
      var d = ff.Δᐃⵠ[rw.ⲆΔⲆⵠⵠ];
      for (aa = 0; d.length > aa; aa++) {
        Lv(d[aa]);
      }
      var c = ff.Δᐃⵠ[rw.ΔΔⲆⲆⲆ];
      for (aa = Ih; c.length > aa; aa++) {
        Lv(c[aa], 141);
      }
      var m = ff.Δᐃⵠ[rw.ᐃⵠⵠⵠⵠ];
      for (aa = 0; aa < m.length; aa++) {
        Gv(m[aa]);
      }
      m = ff.Δᐃⵠ[rw.ᐃⲆΔᐃⵠ];
      aa = fg;
      for (; m.length > aa; aa++) {
        Gv(m[aa]);
      }
      m = ff.Δᐃⵠ[rw.ᐃⵠⵠⵠⵠ];
      aa = Ih;
      for (; m.length > aa; aa++) {
        Rv(m[aa]);
      }
      var ka = ff.Δᐃⵠ[rw.ⲆⵠΔᐃⵠ];
      for (aa = 0; ka.length > aa; aa++) {
        if (fg === (ka[aa].info & 15) || ka[aa].info === 10) {
          Lv(ka[aa]);
        }
      }
      var la = ff.Δᐃⵠ[rw.ⲆⲆΔⵠⲆ];
      for (aa = 0; la.length > aa; aa++) {
        if ((la[aa].info & 15) === Aa || la[aa].info === 10) {
          Lv(la[aa]);
        }
      }
      var ma = ff.Δᐃⵠ[rw.ⲆⵠⲆΔⲆ];
      for (aa = tj; ma.length > aa; aa++) {
        if (bu === (ma[aa].info & 15) || ma[aa].info === 10) {
          Lv(ma[aa]);
        }
      }
      var na = ff.Δᐃⵠ[rw.ᐃᐃΔΔⲆ];
      for (aa = 0; aa < na.length; aa++) {
        Lv(na[aa], 132);
      }
      var oa = ff.Δᐃⵠ[rw.ⲆᐃⵠΔⵠ];
      for (aa = Ih; aa < oa.length; aa++) {
        if (!(oa[aa].info & 15) || hh === oa[aa].info) {
          Lv(oa[aa]);
        }
      }
      var pa = ff.Δᐃⵠ[rw.ΔΔᐃⵠⵠ];
      for (aa = Ih; aa < pa.length; aa++) {
        if ((pa[aa].info & 15) === yj || pa[aa].info === Ea) {
          Lv(pa[aa]);
        }
      }
      var qa = ff.Δᐃⵠ[rw.ⵠΔΔⵠΔ];
      for (aa = 0; aa < qa.length; aa++) {
        if (Gk === (qa[aa].info & 15) || qa[aa].info === Bl) {
          Lv(qa[aa]);
        }
      }
      na = ff.Δᐃⵠ[rw.ⵠⵠᐃⲆⵠ];
      aa = Ih;
      for (; na.length > aa; aa++) {
        Lv(na[aa]);
      }
      var ra = ff.Δᐃⵠ[rw.ΔΔⵠⲆⲆ];
      for (aa = 0; aa < ra.length; aa++) {
        Lv(ra[aa], 250, 729);
      }
      var A = ff.Δᐃⵠ[rw.ΔⵠⲆⵠΔᐃⲆ];
      for (aa = Aa; aa < A.length; aa++) {
        Lv(A[aa], 250, 729);
      }
      var k = ff.Δᐃⵠ[rw.ⲆⵠⵠⵠⲆ];
      for (aa = An; k.length > aa; aa++) {
        Lv(k[aa], 854, 859);
      }
      var x = ff.Δᐃⵠ[rw.ΔΔⵠᐃⵠ];
      for (aa = fg; aa < x.length; aa++) {
        if (x[aa].info & Gt) {
          Lv(x[aa], 336);
        }
      }
      x = ff.Δᐃⵠ[rw.ᐃᐃⲆᐃⲆ];
      aa = sb;
      for (; x.length > aa; aa++) {
        if (x[aa].info & bd) {
          Lv(x[aa], 373);
        }
      }
      x = ff.Δᐃⵠ[rw.ᐃⲆⵠⲆⲆ];
      aa = qb;
      for (; aa < x.length; aa++) {
        if (x[aa].info) {
          Lv(x[aa], 376);
        }
      }
      x = ff.Δᐃⵠ[rw.ⲆᐃΔᐃⵠ];
      aa = 0;
      for (; aa < x.length; aa++) {
        if (x[aa].info) {
          Lv(x[aa], 379);
        }
      }
      x = ff.Δᐃⵠ[rw.ⲆⲆΔᐃⵠ];
      aa = 0;
      for (; x.length > aa; aa++) {
        if (x[aa].info) {
          Lv(x[aa], 500);
        }
      }
      x = ff.Δᐃⵠ[rw.ᐃΔⲆⲆⵠ];
      aa = 0;
      for (; x.length > aa; aa++) {
        if (x[aa].info) {
          Lv(x[aa], 376);
        }
      }
      x = ff.Δᐃⵠ[rw.Ⲇⵠⵠⵠᐃ];
      aa = et;
      for (; x.length > aa; aa++) {
        if (x[aa].info & ig) {
          Lv(x[aa], 336);
        }
      }
      x = ff.Δᐃⵠ[rw.ⵠΔΔᐃⲆ];
      aa = 0;
      for (; x.length > aa; aa++) {
        if (x[aa].info & Ni) {
          Lv(x[aa], 373);
        }
      }
      x = ff.Δᐃⵠ[rw.ⲆⵠᐃⲆΔ];
      aa = qu;
      for (; x.length > aa; aa++) {
        if (x[aa].info) {
          Lv(x[aa], 376);
        }
      }
      x = ff.Δᐃⵠ[rw.ⲆΔⲆⲆⲆ];
      aa = Qr;
      for (; aa < x.length; aa++) {
        if (x[aa].info) {
          Lv(x[aa], 379);
        }
      }
      x = ff.Δᐃⵠ[rw.ⵠΔᐃⵠⵠ];
      aa = et;
      for (; x.length > aa; aa++) {
        if (x[aa].info) {
          Lv(x[aa], 500);
        }
      }
      x = ff.Δᐃⵠ[rw.ΔΔⲆⵠᐃ];
      aa = An;
      for (; aa < x.length; aa++) {
        if (x[aa].info) {
          Lv(x[aa], 376);
        }
      }
      var sa = ff.Δᐃⵠ[rw.ΔᐃΔⲆⵠ];
      for (aa = Aa; aa < sa.length; aa++) {
        Lv(sa[aa], 264, 322);
      }
      var M = ff.Δᐃⵠ[rw.ⵠᐃᐃⲆΔ];
      for (aa = 0; aa < M.length; aa++) {
        Lv(M[aa], 198);
      }
      n = ff.Δᐃⵠ[rw.ΔⵠᐃⵠᐃΔΔ];
      aa = xq;
      for (; aa < n.length; aa++) {
        Lv(n[aa], rs.ΔⵠᐃⵠᐃΔΔ, rs.ⵠΔⵠⲆΔΔⲆⵠᐃ);
      }
      var ta = ff.Δᐃⵠ[rw.ᐃⲆⵠᐃⵠ];
      for (aa = Qr; ta.length > aa; aa++) {
        if (ta[aa].ⲆⵠⲆⵠⲆⲆⲆ === 0) {
          Lv(ta[aa]);
        }
      }
      ba = ff.Δᐃⵠ[rw.ⵠΔΔⵠ];
      aa = 0;
      for (; ba.length > aa; aa++) {
        ca = ba[aa];
        if (ba[aa].ⲆᐃᐃⲆᐃ !== 227 && ba[aa].ⲆᐃᐃⲆᐃ !== 228 && ba[aa].ⲆᐃᐃⲆᐃ !== 229 && ba[aa].ⲆᐃᐃⲆᐃ !== 230 && ba[aa].ⲆᐃᐃⲆᐃ !== 91) {
          if (ca.ⵠⵠᐃᐃΔΔⲆ === 0) {
            if (ca.ⲆⲆⵠⵠΔΔΔ > 0.001) {
              ca.ⲆⲆⵠⵠΔΔΔ = ᐃΔᐃⵠ.ΔΔᐃᐃᐃΔΔ(ca.ⲆⲆⵠⵠΔΔΔ, 0, 0.018);
              var ua = 1 + Math.min(1, Math.max(ca.ⲆⲆⵠⵠΔΔΔ, 0) / Lr) * 0.18;
              Mo.save();
              Mo.scale(ua, ua);
              dx.ⲆΔⲆ.x /= ua;
              dx.ⲆΔⲆ.y /= ua;
              ca.x /= ua;
              ca.y /= ua;
              ca.r.x /= ua;
              ca.r.y /= ua;
              ca.ⵠⵠⲆⲆΔⵠΔ();
              ca.ⵠⲆⵠΔ();
              dx.ⲆΔⲆ.x *= ua;
              dx.ⲆΔⲆ.y *= ua;
              ca.x *= ua;
              ca.y *= ua;
              ca.r.x *= ua;
              ca.r.y *= ua;
              Mo.restore();
            } else {
              ca.ⲆⵠⲆⵠⲆⲆⲆ = 0;
              ca.ⵠⵠⲆⲆΔⵠΔ();
              ca.ⵠⲆⵠΔ();
            }
          }
        } else if (ca.ⵠⲆᐃⵠⲆ <= 180) {
          Mo.save();
          ua = ck + Math.min(ck, Math.max(ca.ⲆⵠΔⲆΔ - 30, An) / 180) * 0.35;
          Mo.scale(ua, ua);
          dx.ⲆΔⲆ.x /= ua;
          dx.ⲆΔⲆ.y /= ua;
          ca.x /= ua;
          ca.y /= ua;
          ca.r.x /= ua;
          ca.r.y /= ua;
          ca.ⲆⵠⲆⵠⲆⲆⲆ = 0;
          ca.ⵠⵠⲆⲆΔⵠΔ();
          ca.ⵠⲆⵠΔ();
          dx.ⲆΔⲆ.x *= ua;
          dx.ⲆΔⲆ.y *= ua;
          ca.x *= ua;
          ca.y *= ua;
          ca.r.x *= ua;
          ca.r.y *= ua;
          Mo.restore();
        }
      }
      M = ff.Δᐃⵠ[rw.ⵠᐃᐃⲆΔ];
      aa = 0;
      for (; aa < M.length; aa++) {
        Lv(M[aa], 913);
      }
      var va = ff.Δᐃⵠ[rw.ᐃΔΔⵠΔ];
      for (aa = gl; aa < va.length; aa++) {
        Lv(va[aa]);
      }
      var I = ff.Δᐃⵠ[rw.ⲆᐃᐃΔⲆ];
      for (aa = tj; I.length > aa; aa++) {
        Lv(I[aa], 419, 461);
      }
      var S = ff.Δᐃⵠ[rw.ΔΔᐃΔΔ];
      for (aa = 0; S.length > aa; aa++) {
        Lv(S[aa]);
      }
      var _ = ff.Δᐃⵠ[rw.ⲆⲆᐃⵠᐃ];
      for (aa = Ih; aa < _.length; aa++) {
        Lv(_[aa], 299, 326);
      }
      var F = ff.Δᐃⵠ[rw.ΔⲆᐃⲆᐃ];
      for (aa = Gg; aa < F.length; aa++) {
        Lv(F[aa], 232, 1077);
      }
      var R = ff.Δᐃⵠ[rw.ⲆᐃⲆⵠᐃ];
      for (aa = tj; aa < R.length; aa++) {
        Lv(R[aa], 233, 1092);
      }
      ka = ff.Δᐃⵠ[rw.ⲆⵠΔᐃⵠ];
      aa = xq;
      for (; ka.length > aa; aa++) {
        if (Gg !== (ka[aa].info & 15) && ka[aa].info !== 10) {
          Lv(ka[aa]);
        }
      }
      la = ff.Δᐃⵠ[rw.ⲆⲆΔⵠⲆ];
      aa = bu;
      for (; aa < la.length; aa++) {
        if (la[aa].info & 15 && la[aa].info !== 10) {
          Lv(la[aa]);
        }
      }
      ma = ff.Δᐃⵠ[rw.ⲆⲆⲆᐃᐃⲆⵠ];
      aa = Aa;
      for (; ma.length > aa; aa++) {
        Lv(ma[aa], 239);
      }
      ma = ff.Δᐃⵠ[rw.ⲆⵠⲆΔⲆ];
      aa = 0;
      for (; ma.length > aa; aa++) {
        if (ma[aa].info & 15 && ma[aa].info !== vq) {
          Lv(ma[aa]);
        }
      }
      m = ff.Δᐃⵠ[rw.ᐃⲆΔᐃⵠ];
      aa = An;
      for (; aa < m.length; aa++) {
        Rv(m[aa]);
      }
      oa = ff.Δᐃⵠ[rw.ⲆᐃⵠΔⵠ];
      aa = 0;
      for (; aa < oa.length; aa++) {
        if (oa[aa].info & 15 && oa[aa].info !== 10) {
          Lv(oa[aa]);
        }
      }
      pa = ff.Δᐃⵠ[rw.ΔΔᐃⵠⵠ];
      aa = qb;
      for (; pa.length > aa; aa++) {
        if ((pa[aa].info & 15) !== Ah && pa[aa].info !== Ds) {
          Lv(pa[aa]);
        }
      }
      qa = ff.Δᐃⵠ[rw.ⵠΔΔⵠΔ];
      aa = 0;
      for (; qa.length > aa; aa++) {
        if (qa[aa].info & 15 && qa[aa].info !== 10) {
          Lv(qa[aa]);
        }
      }
      var j = ff.Δᐃⵠ[rw.ⲆⲆⵠⲆΔ];
      for (aa = 0; aa < j.length; aa++) {
        Lv(j[aa], 691, 697);
      }
      var W = ff.Δᐃⵠ[rw.ⵠΔⵠⵠᐃ];
      for (aa = Aa; W.length > aa; aa++) {
        Lv(W[aa], 637, 687);
      }
      var L = ff.Δᐃⵠ[rw.ᐃⲆᐃⵠⲆ];
      for (aa = Gk; aa < L.length; aa++) {
        Lv(L[aa], 673, 688);
      }
      var G = ff.Δᐃⵠ[rw.ᐃⲆᐃᐃᐃ];
      for (aa = Fj; aa < G.length; aa++) {
        Lv(G[aa], 260, 333);
      }
      var O = ff.Δᐃⵠ[rw.ⲆⲆⵠΔⲆ];
      for (aa = 0; aa < O.length; aa++) {
        Lv(O[aa], 1033, 1034);
      }
      var N = ff.Δᐃⵠ[rw.ΔᐃⲆΔᐃ];
      for (aa = yj; aa < N.length; aa++) {
        Lv(N[aa], 445, 462);
      }
      var q = ff.Δᐃⵠ[rw.ᐃⲆᐃᐃⲆ];
      for (aa = An; q.length > aa; aa++) {
        Lv(q[aa]);
      }
      var H = ff.Δᐃⵠ[rw.ΔⵠΔⵠᐃ];
      for (aa = yj; H.length > aa; aa++) {
        Lv(H[aa], 918, 919);
      }
      var U = ff.Δᐃⵠ[rw.ⵠᐃᐃΔΔ];
      for (aa = 0; aa < U.length; aa++) {
        Lv(U[aa]);
      }
      var Y = ff.Δᐃⵠ[rw.ᐃⲆᐃᐃΔ];
      for (aa = 0; aa < Y.length; aa++) {
        Lv(Y[aa], 1218, 1219);
      }
      var K = ff.Δᐃⵠ[rw.ⲆᐃⲆⲆᐃ];
      for (aa = qu; K.length > aa; aa++) {
        if (Ek === K[aa].scale) {
          Lv(K[aa], 449, 463);
        }
      }
      K = ff.Δᐃⵠ[rw.ᐃⲆᐃᐃⵠ];
      aa = 0;
      for (; K.length > aa; aa++) {
        if (K[aa].scale === 1) {
          Lv(K[aa], 450, 464);
        }
      }
      var wa = ff.Δᐃⵠ[rw.ⵠⲆᐃᐃΔ];
      for (aa = 0; wa.length > aa; aa++) {
        Lv(wa[aa]);
      }
      var X = ff.Δᐃⵠ[rw.ΔⲆⵠⲆⲆ];
      for (aa = 0; X.length > aa; aa++) {
        Lv(X[aa], 114);
      }
      l = ff.Δᐃⵠ[rw.ᐃᐃΔⲆⵠ];
      aa = 0;
      for (; aa < l.length; aa++) {
        Lv(l[aa]);
      }
      var Z = ff.Δᐃⵠ[rw.ⲆⵠⲆⵠⵠ];
      for (aa = yj; Z.length > aa; aa++) {
        Lv(Z[aa]);
      }
      x = ff.Δᐃⵠ[rw.Ⲇⵠⵠⵠᐃ];
      aa = Md;
      for (; aa < x.length; aa++) {
        if (!(x[aa].info & Kg)) {
          Lv(x[aa], 166);
        }
        x[aa].ⵠΔⵠΔⲆ(x[aa].info >> er);
      }
      x = ff.Δᐃⵠ[rw.ⵠΔΔᐃⲆ];
      aa = 0;
      for (; aa < x.length; aa++) {
        if (!(x[aa].info & 1)) {
          Lv(x[aa], 171);
        }
        x[aa].ⵠΔⵠΔⲆ(x[aa].info >> 1);
      }
      x = ff.Δᐃⵠ[rw.ⲆⵠᐃⲆΔ];
      aa = 0;
      for (; x.length > aa; aa++) {
        if (!(x[aa].info & Lu)) {
          Lv(x[aa], 172);
        }
        x[aa].ⵠΔⵠΔⲆ(x[aa].info >> bs);
      }
      x = ff.Δᐃⵠ[rw.ⲆΔⲆⲆⲆ];
      aa = 0;
      for (; aa < x.length; aa++) {
        if (!(x[aa].info & 1)) {
          Lv(x[aa], 173);
        }
        x[aa].ⵠΔⵠΔⲆ(x[aa].info >> bd);
      }
      x = ff.Δᐃⵠ[rw.ⵠΔᐃⵠⵠ];
      aa = 0;
      for (; x.length > aa; aa++) {
        if (!(x[aa].info & ig)) {
          Lv(x[aa], 124);
        }
        x[aa].ⵠΔⵠΔⲆ(x[aa].info >> Ek);
      }
      x = ff.Δᐃⵠ[rw.ΔΔⲆⵠᐃ];
      aa = 0;
      for (; aa < x.length; aa++) {
        if (!(x[aa].info & 1)) {
          Lv(x[aa], 218);
        }
        x[aa].ⵠΔⵠΔⲆ(x[aa].info >> Mg);
      }
      x = ff.Δᐃⵠ[rw.ΔΔⵠᐃⵠ];
      aa = 0;
      for (; x.length > aa; aa++) {
        if (!(x[aa].info & 1)) {
          Lv(x[aa], 212);
        }
        x[aa].ⵠΔⵠΔⲆ(x[aa].info >> 1);
      }
      x = ff.Δᐃⵠ[rw.ᐃᐃⲆᐃⲆ];
      aa = 0;
      for (; aa < x.length; aa++) {
        if (!(x[aa].info & 1)) {
          Lv(x[aa], 213);
        }
        x[aa].ⵠΔⵠΔⲆ(x[aa].info >> bs);
      }
      x = ff.Δᐃⵠ[rw.ᐃⲆⵠⲆⲆ];
      aa = Aa;
      for (; x.length > aa; aa++) {
        if (!(x[aa].info & 1)) {
          Lv(x[aa], 214);
        }
        x[aa].ⵠΔⵠΔⲆ(x[aa].info >> 1);
      }
      x = ff.Δᐃⵠ[rw.ⲆᐃΔᐃⵠ];
      aa = 0;
      for (; x.length > aa; aa++) {
        if (!(x[aa].info & 1)) {
          Lv(x[aa], 215);
        }
        x[aa].ⵠΔⵠΔⲆ(x[aa].info >> 1);
      }
      x = ff.Δᐃⵠ[rw.ⲆⲆΔᐃⵠ];
      aa = xq;
      for (; x.length > aa; aa++) {
        if (!(x[aa].info & Ls)) {
          Lv(x[aa], 216);
        }
        x[aa].ⵠΔⵠΔⲆ(x[aa].info >> ck);
      }
      x = ff.Δᐃⵠ[rw.ᐃΔⲆⲆⵠ];
      aa = 0;
      for (; aa < x.length; aa++) {
        if (!(x[aa].info & 1)) {
          Lv(x[aa], 220);
        }
        x[aa].ⵠΔⵠΔⲆ(x[aa].info >> Ls);
      }
      var xa = ff.Δᐃⵠ[rw.ᐃⵠⵠⲆⵠ];
      for (aa = 0; aa < xa.length; aa++) {
        Lv(xa[aa], 162);
        xa[aa].ⵠΔⵠΔⲆ(xa[aa].info);
      }
      xa = ff.Δᐃⵠ[rw.ⵠᐃᐃᐃᐃ];
      aa = xq;
      for (; xa.length > aa; aa++) {
        Lv(xa[aa], 163);
        xa[aa].ⵠΔⵠΔⲆ(xa[aa].info);
      }
      xa = ff.Δᐃⵠ[rw.ΔᐃΔⵠᐃ];
      aa = Rl;
      for (; xa.length > aa; aa++) {
        Lv(xa[aa], 164);
        xa[aa].ⵠΔⵠΔⲆ(xa[aa].info);
      }
      xa = ff.Δᐃⵠ[rw.ⲆᐃⵠⲆΔ];
      aa = Md;
      for (; xa.length > aa; aa++) {
        Lv(xa[aa], 165);
        xa[aa].ⵠΔⵠΔⲆ(xa[aa].info);
      }
      xa = ff.Δᐃⵠ[rw.ΔΔⲆᐃᐃ];
      aa = Fj;
      for (; aa < xa.length; aa++) {
        Lv(xa[aa], 122);
        xa[aa].ⵠΔⵠΔⲆ(xa[aa].info);
      }
      xa = ff.Δᐃⵠ[rw.ⲆⲆⲆᐃΔ];
      aa = 0;
      for (; xa.length > aa; aa++) {
        Lv(xa[aa], 217);
        xa[aa].ⵠΔⵠΔⲆ(xa[aa].info);
      }
      var ya = ff.Δᐃⵠ[rw.ⲆΔⵠΔⵠ];
      for (aa = 0; ya.length > aa; aa++) {
        Lv(ya[aa], 160);
        ya[aa].ⵠΔⵠΔⲆ(ya[aa].info);
      }
      ya = ff.Δᐃⵠ[rw.ΔᐃⲆᐃⵠ];
      aa = Ah;
      for (; ya.length > aa; aa++) {
        Lv(ya[aa], 168);
        ya[aa].ⵠΔⵠΔⲆ(ya[aa].info);
      }
      ya = ff.Δᐃⵠ[rw.ⵠⵠᐃⲆⲆ];
      aa = 0;
      for (; ya.length > aa; aa++) {
        Lv(ya[aa], 169);
        ya[aa].ⵠΔⵠΔⲆ(ya[aa].info);
      }
      ya = ff.Δᐃⵠ[rw.ⵠΔΔΔᐃ];
      aa = qb;
      for (; ya.length > aa; aa++) {
        Lv(ya[aa], 170);
        ya[aa].ⵠΔⵠΔⲆ(ya[aa].info);
      }
      ya = ff.Δᐃⵠ[rw.ᐃΔⲆΔΔ];
      aa = Md;
      for (; aa < ya.length; aa++) {
        Lv(ya[aa], 123);
        ya[aa].ⵠΔⵠΔⲆ(ya[aa].info);
      }
      ya = ff.Δᐃⵠ[rw.ⲆΔΔⵠⲆ];
      aa = 0;
      for (; aa < ya.length; aa++) {
        Lv(ya[aa], 219);
        ya[aa].ⵠΔⵠΔⲆ(ya[aa].info);
      }
      var za = ff.Δᐃⵠ[rw.ΔⲆⲆΔⲆ];
      for (aa = 0; aa < za.length; aa++) {
        var Ba = za[aa];
        if (Ba.info > et) {
          Lv(Ba, 788);
        } else {
          Lv(Ba, 182);
        }
      }
      var Ca = ff.Δᐃⵠ[rw.ⵠⲆⵠⲆⲆ];
      for (aa = 0; aa < Ca.length; aa++) {
        Lv(Ca[aa], 159);
      }
      Qv(wv, i, t, Q, e, 111, "g", il);
      Qv(wv, i, t, Q, e, 415, "gw", 2);
      Qv(wv, i, t, Q, e, 112, "d", zd);
      Qv(wv, i, t, Q, e, 416, "dw", 2);
      Qv(wv, i, t, Q, e, 110, "p", 0);
      Qv(wv, i, t, Q, e, 241, "m", br);
      Qv(wv, i, t, Q, e, 121, "a", 2);
      Qv(wv, i, t, Q, e, 202, sj[Dl], 2);
      Qv(wv, i, t, Q, e, 679, "cs", 3, 3);
      Qv(wv, i, t, Q, e, 679, "cs", 2, Ht);
      Qv(wv, i, t, Q, e, 679, "cs", Gt, _h);
      Qv(wv, i, t, Q, e, 679, "cs", Aa, gl);
      Qv(wv, i, t, Q, e, 676, "cs", Ft, wi);
      Qv(wv, i, t, Q, e, 676, "cs", Nj, 2);
      Qv(wv, i, t, Q, e, 676, "cs", 1, 1);
      Qv(wv, i, t, Q, e, 676, "cs", bu, yj);
      var Da = ff.Δᐃⵠ[rw.ⲆΔⵠΔᐃ];
      for (aa = Rl; Da.length > aa; aa++) {
        for (da = 0; da < Da[aa].info; da++) {
          Lv(Da[aa].ΔΔⲆⲆ[da], 294);
        }
      }
      Qv(wv, i, t, Q, e, 108, "s", 2);
      var Fa = ff.Δᐃⵠ[rw.ᐃΔΔᐃΔ];
      for (aa = 0; Fa.length > aa; aa++) {
        Lv(Fa[aa]);
      }
      Fa = ff.Δᐃⵠ[rw.ΔΔΔⲆΔ];
      aa = Ah;
      for (; aa < Fa.length; aa++) {
        Lv(Fa[aa]);
      }
      Fa = ff.Δᐃⵠ[rw.ⲆᐃⲆᐃΔ];
      aa = bu;
      for (; aa < Fa.length; aa++) {
        Lv(Fa[aa]);
      }
      Fa = ff.Δᐃⵠ[rw.ⵠⲆΔⵠᐃ];
      aa = 0;
      for (; aa < Fa.length; aa++) {
        Lv(Fa[aa]);
      }
      Fa = ff.Δᐃⵠ[rw.ΔⵠΔⵠⵠ];
      aa = sb;
      for (; Fa.length > aa; aa++) {
        Lv(Fa[aa]);
      }
      var Ga = ff.Δᐃⵠ[rw.ᐃⲆᐃⲆⲆ];
      for (aa = 0; Ga.length > aa; aa++) {
        Gv(Ga[aa]);
      }
      fa = ff.Δᐃⵠ[rw.ⲆⲆᐃΔⵠ];
      aa = Md;
      for (; fa.length > aa; aa++) {
        Rv(fa[aa]);
      }
      fa = ff.Δᐃⵠ[rw.ᐃΔΔᐃⲆ];
      aa = 0;
      for (; fa.length > aa; aa++) {
        Rv(fa[aa]);
      }
      l = ff.Δᐃⵠ[rw.ᐃᐃΔⲆⵠ];
      aa = Ih;
      for (; l.length > aa; aa++) {
        if (l[aa].action == 2) {
          Rv(l[aa]);
        }
      }
      Z = ff.Δᐃⵠ[rw.ⲆⵠⲆⵠⵠ];
      aa = Gk;
      for (; Z.length > aa; aa++) {
        Rv(Z[aa]);
      }
      ha = ff.Δᐃⵠ[rw.ⲆⵠⲆⵠᐃ];
      aa = An;
      for (; aa < ha.length; aa++) {
        Rv(ha[aa]);
      }
      ia = ff.Δᐃⵠ[rw.ⵠⵠⲆⲆⲆ];
      aa = 0;
      for (; aa < ia.length; aa++) {
        Rv(ia[aa]);
        ia[aa].ⵠΔⵠΔⲆ(ia[aa].info);
      }
      Qv(wv, i, t, Q, e, 989, "c", Ih);
      Qv(wv, i, t, Q, e, 109, "t", _j, 4);
      Qv(wv, i, t, Q, e, 413, "f", jb, Ol);
      Qv(wv, i, t, Q, e, 693, "plm", 0, 0);
      Qv(wv, i, t, Q, e, 307, "b", 3, bq);
      Qv(wv, i, t, Q, e, 109, "t", hd, jb);
      Qv(wv, i, t, Q, e, 307, "b", 1, 0);
      Qv(wv, i, t, Q, e, 413, "f", 1, 1);
      Qv(wv, i, t, Q, e, 693, "plm", Co, Ni);
      Qv(wv, i, t, Q, e, 109, "t", ck, 0);
      Qv(wv, i, t, Q, e, 413, "f", 0, 0);
      Qv(wv, i, t, Q, e, 693, "plm", jg, 2);
      Ga = ff.Δᐃⵠ[rw.ᐃⲆᐃⲆⲆ];
      aa = gl;
      for (; Ga.length > aa; aa++) {
        Rv(Ga[aa]);
      }
      var Ha = ff.Δᐃⵠ[rw.ⵠᐃⲆᐃⲆ];
      for (aa = fg; aa < Ha.length; aa++) {
        Lv(Ha[aa], 221);
      }
      ba = ff.Δᐃⵠ[rw.ⵠΔΔⵠ];
      aa = Gg;
      for (; aa < ba.length; aa++) {
        if ((ca = ba[aa]).ⵠⵠᐃᐃΔΔⲆ === 1 && (ca.ⵠⲆᐃⵠⲆ < 180 || ca.ⲆᐃᐃⲆᐃ !== 227 && ca.ⲆᐃᐃⲆᐃ !== 228 && ca.ⲆᐃᐃⲆᐃ !== 91 && ca.ⲆᐃᐃⲆᐃ !== 229 && ca.ⲆᐃᐃⲆᐃ !== 230)) {
          ca.ⲆⲆⵠⵠΔΔΔ = ᐃΔᐃⵠ.ΔΔᐃᐃᐃΔΔ(ca.ⲆⲆⵠⵠΔΔΔ, 100, 0.018);
          ua = sc + Math.min(Lu, Math.max(ca.ⲆⲆⵠⵠΔΔΔ, 0) / ok) * 0.18;
          Mo.save();
          Mo.scale(ua, ua);
          dx.ⲆΔⲆ.x /= ua;
          dx.ⲆΔⲆ.y /= ua;
          ca.x /= ua;
          ca.y /= ua;
          ca.r.x /= ua;
          ca.r.y /= ua;
          ca.ⵠⵠⲆⲆΔⵠΔ();
          ca.ⵠⲆⵠΔ();
          dx.ⲆΔⲆ.x *= ua;
          dx.ⲆΔⲆ.y *= ua;
          ca.x *= ua;
          ca.y *= ua;
          ca.r.x *= ua;
          ca.r.y *= ua;
          Mo.restore();
        }
      }
      var Ia = ff.Δᐃⵠ[rw.ΔΔᐃΔⲆ];
      for (aa = 0; aa < Ia.length; aa++) {
        Lv(Ia[aa], 190);
        Ia[aa].ⵠΔⵠΔⲆ(Ia[aa].info);
      }
      var Ja = ff.Δᐃⵠ[rw.ⵠΔᐃⵠⲆ];
      for (aa = 0; aa < Ja.length; aa++) {
        Lv(Ja[aa], 245, 246);
      }
      var Ka = ff.Δᐃⵠ[rw.ⲆⲆᐃᐃⵠ];
      for (aa = 0; aa < Ka.length; aa++) {
        Lv(Ka[aa], 201);
      }
      ba = ff.Δᐃⵠ[rw.ⵠΔΔⵠ];
      aa = 0;
      for (; ba.length > aa; aa++) {
        if (((ca = ba[aa]).ⲆᐃᐃⲆᐃ === 227 || ca.ⲆᐃᐃⲆᐃ === 228 || ca.ⲆᐃᐃⲆᐃ === 91 || ca.ⲆᐃᐃⲆᐃ === 229 || ca.ⲆᐃᐃⲆᐃ === 230) && ca.ⵠⲆᐃⵠⲆ > 180) {
          ca.ⲆⵠⲆⵠⲆⲆⲆ = bd;
          Mo.save();
          ua = 1 + Math.min(1, Math.max(ca.ⲆⵠΔⲆΔ - 30, xq) / 180) * 0.35;
          Mo.scale(ua, ua);
          dx.ⲆΔⲆ.x /= ua;
          dx.ⲆΔⲆ.y /= ua;
          ca.x /= ua;
          ca.y /= ua;
          ca.r.x /= ua;
          ca.r.y /= ua;
          ca.ⵠⵠⲆⲆΔⵠΔ();
          ca.ⵠⲆⵠΔ();
          dx.ⲆΔⲆ.x *= ua;
          dx.ⲆΔⲆ.y *= ua;
          ca.x *= ua;
          ca.y *= ua;
          ca.r.x *= ua;
          ca.r.y *= ua;
          Mo.restore();
        }
      }
      ta = ff.Δᐃⵠ[rw.ᐃⲆⵠᐃⵠ];
      aa = 0;
      for (; aa < ta.length; aa++) {
        if (ta[aa].ⲆⵠⲆⵠⲆⲆⲆ === 1) {
          Lv(ta[aa]);
        }
      }
      K = ff.Δᐃⵠ[rw.ⲆᐃⲆⲆᐃ];
      aa = fg;
      for (; aa < K.length; aa++) {
        if (K[aa].scale > 1) {
          Lv(K[aa], 449, 463);
        }
      }
      K = ff.Δᐃⵠ[rw.ᐃⲆᐃᐃⵠ];
      aa = 0;
      for (; K.length > aa; aa++) {
        if (sl < K[aa].scale) {
          Lv(K[aa], 450, 464);
        }
      }
      var La = ff.Δᐃⵠ[rw.ⵠⲆΔΔⵠ];
      for (aa = 0; aa < La.length; aa++) {
        Lv(La[aa], 235, 1107);
      }
      var Ma = ff.Δᐃⵠ[rw.Ⲇⵠⵠᐃᐃ];
      for (aa = 0; aa < Ma.length; aa++) {
        Lv(Ma[aa], 238, 1128);
      }
      if ((qv += zg * hx) > 60) {
        qv -= 60;
      }
      Qv(sv, i, t, Q, e, 1041, "fo", il);
      Qv(sv, i, t, Q, e, 244, "fod", Gl);
    })();
    if (pf.ⲆⵠΔᐃΔ && ff.mode !== ow.ΔΔᐃᐃᐃ && ow.ᐃⵠΔΔⲆ !== ff.mode && ow.ⵠᐃᐃΔⵠᐃᐃ !== ff.mode) {
      (function () {
        var a = dx.ΔᐃⲆΔⲆ;
        if (a.ⲆⵠΔⵠΔ === Ah) {
          a.ᐃⲆΔΔᐃ = Math.max(0, a.ᐃⲆΔΔᐃ - hx / 10);
        } else {
          a.ᐃⲆΔΔᐃ = Math.min(Kg, a.ᐃⲆΔΔᐃ + hx / Li);
        }
        for (var b = a.ⲆΔⵠΔΔ, c = 0; c < b.length; c++) {
          var d = b[c];
          a.ⲆᐃⲆ(d);
          Mv(471, d.id, dx.ⲆΔⲆ.x + d.x, dx.ⲆΔⲆ.y + d.y, d.alpha);
        }
        for (c = 0; c < b.length; c++) {
          if ((d = b[c]).Δᐃᐃᐃᐃ <= 0 || d.x > -dx.ⲆΔⲆ.x + Do || -dx.ⲆΔⲆ.x - dx.ⲆΔⲆ.w / Ht > d.x || -dx.ⲆΔⲆ.y + lq < d.y) {
            b.splice(c, 1);
          }
        }
        var e = -dx.ⲆΔⲆ.y;
        if (ff.ⲆⵠᐃⲆⲆ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = dx.ᐃⵠⵠΔΔ;
        if (gl === a.ⲆⵠΔⵠΔ) {
          a.ᐃⲆΔΔᐃ = Math.max(0, a.ᐃⲆΔΔᐃ - hx / 10);
        } else {
          a.ᐃⲆΔΔᐃ = Math.min(ck, a.ᐃⲆΔΔᐃ + hx / 10);
        }
        for (var b = a.ⲆΔⵠΔΔ, c = Gg; b.length > c; c++) {
          var d = b[c];
          a.ⲆᐃⲆ(d);
          Mv(470, d.id, dx.ⲆΔⲆ.x + d.x, dx.ⲆΔⲆ.y + d.y, d.alpha);
        }
        for (c = 0; c < b.length; c++) {
          if ((d = b[c]).Δᐃᐃᐃᐃ <= 0 || -dx.ⲆΔⲆ.x + Do < d.x || -dx.ⲆΔⲆ.x > d.x || -dx.ⲆΔⲆ.y + lq < d.y) {
            b.splice(c, Lu);
          }
        }
        var e = -dx.ⲆΔⲆ.y;
        if (ff.ᐃᐃᐃⵠⵠ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = dx.ⵠⲆΔⲆⵠⲆΔ;
        for (var b = a.ⲆΔⵠΔΔ, c = 0; c < b.length; c++) {
          var d = b[c];
          a.ⲆᐃⲆ(d);
          Mv(942, d.id, dx.ⲆΔⲆ.x + d.x, dx.ⲆΔⲆ.y + d.y, d.alpha);
        }
        for (c = tj; c < b.length; c++) {
          if ((d = b[c]).Δᐃᐃᐃᐃ <= 0 || -dx.ⲆΔⲆ.x + Do < d.x || d.x < -dx.ⲆΔⲆ.x || d.y > -dx.ⲆΔⲆ.y + lq) {
            b.splice(c, Ls);
          }
        }
        var e = -dx.ⲆΔⲆ.y;
        if (ff.ΔⵠΔᐃᐃ > -1000) {
          a.add(e);
        }
      })();
    }
    if (ff.transition && a) {
      ff.transition = vn;
      ff.ⵠⲆΔΔ.ᐃⲆⵠ = Qr;
      ff.ⵠⲆΔΔ.ⵠᐃᐃ = ia;
    }
  }
  function Dv(j, e, i, q, n, o) {
    var r = q.w1;
    var a = q.w2;
    var s = q.w3;
    var h = dx.ⲆΔⲆ.y + j - 700;
    var l = Math.max(dx.ⲆΔⲆ.x + e, 0);
    var g = Math.max(-dx.ⲆΔⲆ.x + Do - i - 100, tj);
    var t = l;
    var b = Do - l - g;
    if (o) {
      var u = q.ⲆⲆΔ(r);
    } else {
      u = r.r;
    }
    var v = h + ow.ΔᐃⵠᐃΔ;
    var F = t;
    var m = v;
    var p = u.x + ow.ⵠⲆⲆᐃᐃ;
    var C = b;
    var G = v += u.x + ow.ⵠⲆⲆᐃᐃ - fh;
    if (o) {
      u = q.ⲆⲆΔ(a);
    } else {
      u = a.r;
    }
    var f = h + ow.ⲆᐃΔΔᐃ - v + u.x;
    var H = v;
    var y = t;
    var w = f;
    var K = b;
    var A = (v += f - Nj) - Ol;
    if (o) {
      u = q.ⲆⲆΔ(s);
    } else {
      u = s.r;
    }
    if (v + (f = h + ow.ᐃⵠΔⵠᐃ - v + u.x) - Qn > A) {
      var k = Yn;
      var L = v;
      var J = t;
      var M = f;
      var B = b;
      var D = v += f - 2;
    } else {
      k = false;
      v = A;
      D = -sc;
    }
    f = h + ow.ⲆΔᐃⲆᐃⵠⵠ - v;
    if (ff.transition) {
      var N = ff.time ? Ga - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
      Mo.fillStyle = Tv(9, 55, 63, 11, 106, 132, N);
    } else {
      Mo.fillStyle = rs.ΔⵠΔᐃⵠ[ff.time];
    }
    Mo.fillRect(F, m, C, p);
    if (o) {
      if (ff.transition) {
        N = ff.time ? Co - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
        Mo.fillStyle = Tv(15, 70, 76, 42, 139, 155, N);
      } else {
        Mo.fillStyle = rs.ᐃΔΔᐃⲆᐃⲆ[ff.time];
      }
    } else if (ff.transition) {
      N = ff.time ? Ga - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
      Mo.fillStyle = Tv(9, 55, 63, 11, 106, 132, N);
    } else {
      Mo.fillStyle = rs.ΔⵠΔᐃⵠ[ff.time];
    }
    Mo.fillRect(y, H, K, w);
    if (k) {
      if (o) {
        if (ff.transition) {
          N = ff.time ? 1 - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
          Mo.fillStyle = Tv(17, 94, 96, 169, 214, 211, N);
        } else {
          Mo.fillStyle = rs.ⵠΔΔᐃΔᐃⵠ[ff.time];
        }
      } else if (ff.transition) {
        N = ff.time ? 1 - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
        Mo.fillStyle = Tv(9, 55, 63, 11, 106, 132, N);
      } else {
        Mo.fillStyle = rs.ΔⵠΔᐃⵠ[ff.time];
      }
      Mo.fillRect(J, L, B, M);
    }
    if (pf.ⲆⵠΔᐃΔ && o) {
      q.ᐃⵠⵠᐃᐃⲆⲆᐃⵠ(A, D, G, h, -dx.ⲆΔⲆ.x + F, -dx.ⲆΔⲆ.x + F + C);
    }
  }
  function Ev(j, e, i, q, n, o) {
    var r = q.w1;
    var a = q.w2;
    var s = q.w3;
    var h = dx.ⲆΔⲆ.x + j + 820;
    var l = Math.max(dx.ⲆΔⲆ.y + e, 0);
    var g = Math.max(-dx.ⲆΔⲆ.y + lq - i - Ps, 0);
    var t = l;
    var b = lq - l - g;
    if (o) {
      var u = q.ⲆⲆΔ(r);
    } else {
      u = r.r;
    }
    var v = h + ow.ΔᐃⵠᐃΔ;
    var F = v;
    var m = t;
    var p = -u.x + ow.ⵠⲆⲆᐃᐃ;
    var C = b;
    var G = v += -u.x + ow.ⵠⲆⲆᐃᐃ + zd;
    if (o) {
      u = q.ⲆⲆΔ(a);
    } else {
      u = a.r;
    }
    var f = h - ow.ⲆᐃΔΔᐃ - v - u.x;
    var H = v;
    var y = t;
    var K = f;
    var A = b;
    var k = (v += f + 2) - Ht;
    if (o) {
      u = q.ⲆⲆΔ(s);
    } else {
      u = s.r;
    }
    if (k > v + (f = h - ow.ᐃⵠΔⵠᐃ - v - u.x)) {
      var x = w;
      var L = v;
      var M = t;
      var B = f;
      var D = b;
      var E = v += f + fh;
    } else {
      x = false;
      v = k;
      E = -bd;
    }
    f = h - ow.ⲆΔᐃⲆᐃⵠⵠ - v;
    if (ff.transition) {
      var N = ff.time ? 1 - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
      Mo.fillStyle = Tv(9, 55, 63, 11, 106, 132, N);
    } else {
      Mo.fillStyle = rs.ΔⵠΔᐃⵠ[ff.time];
    }
    Mo.fillRect(F, m, p, C);
    if (o) {
      if (ff.transition) {
        N = ff.time ? Ni - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
        Mo.fillStyle = Tv(15, 70, 76, 42, 139, 155, N);
      } else {
        Mo.fillStyle = rs.ᐃΔΔᐃⲆᐃⲆ[ff.time];
      }
    } else if (ff.transition) {
      N = ff.time ? _ - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
      Mo.fillStyle = Tv(9, 55, 63, 11, 106, 132, N);
    } else {
      Mo.fillStyle = rs.ΔⵠΔᐃⵠ[ff.time];
    }
    Mo.fillRect(H, y, K, A);
    if (x) {
      if (o) {
        if (ff.transition) {
          N = ff.time ? Ni - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
          Mo.fillStyle = Tv(17, 94, 96, 169, 214, 211, N);
        } else {
          Mo.fillStyle = rs.ⵠΔΔᐃΔᐃⵠ[ff.time];
        }
      } else if (ff.transition) {
        N = ff.time ? 1 - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
        Mo.fillStyle = Tv(9, 55, 63, 11, 106, 132, N);
      } else {
        Mo.fillStyle = rs.ΔⵠΔᐃⵠ[ff.time];
      }
      Mo.fillRect(L, M, B, D);
    }
    if (pf.ⲆⵠΔᐃΔ && o) {
      q.ΔΔⲆΔΔᐃΔΔⵠ(k, E, G, h, -dx.ⲆΔⲆ.y + m, -dx.ⲆΔⲆ.y + m + C);
    }
  }
  function Fv(a, b, c, d) {
    if (ff.transition) {
      Mo.globalAlpha = bs;
      Mm(Mo, ᐃΔ[a][ff.time], c, d);
      ff.time = ff.time ? Rl : Ni;
      Mo.globalAlpha = 1 - ff.ⵠⲆΔΔ.ᐃⲆⵠ;
      Mm(Mo, ᐃΔ[a][ff.time], c, d);
      ff.time = ff.time ? Aa : er;
      Mo.globalAlpha = 1;
    } else {
      Mm(Mo, b, c, d);
    }
  }
  function Gv(a, b) {
    if (ff.transition) {
      Mo.globalAlpha = 1;
      a.ⵠⵠᐃΔᐃ(b);
      ff.time = ff.time ? 0 : 1;
      Mo.globalAlpha = Ni - ff.ⵠⲆΔΔ.ᐃⲆⵠ;
      a.ⵠⵠᐃΔᐃ(b);
      ff.time = ff.time ? 0 : 1;
      Mo.globalAlpha = 1;
    } else {
      a.ⵠⵠᐃΔᐃ(b);
    }
  }
  function Hv(f, e, i, j, k, n) {
    var o = j.w1;
    var a = j.w2;
    var q = j.w3;
    var h = dx.ⲆΔⲆ.y + f - 700;
    var l = Math.max(dx.ⲆΔⲆ.x + e, Ih);
    var g = Math.max(-dx.ⲆΔⲆ.x + Do - i - 100, gl);
    var r = l;
    var b = Do - l - g;
    if (n) {
      var s = j.ⲆⲆΔ(o).x;
    } else {
      s = o.r.x;
    }
    var t = h + ow.ΔᐃⵠᐃΔ;
    ow.ⵠⲆⲆᐃᐃ;
    t += s + ow.ⵠⲆⲆᐃᐃ - jg;
    if (n) {
      s = j.ⲆⲆΔ(a).x;
    } else {
      s = a.r.x;
    }
    var u = h + ow.ⲆᐃΔΔᐃ - t + s;
    var v = (t += u - 2) - 2;
    if (n) {
      s = j.ⲆⲆΔ(q).x;
    } else {
      s = q.r.x;
    }
    if (t + (u = h + ow.ᐃⵠΔⵠᐃ - t + s) - dl > v) {
      t += u - 2;
    } else {
      t = v;
    }
    u = h + ow.ⲆΔᐃⲆᐃⵠⵠ - t;
    if (qu < n && k.ⲆⲆⵠᐃᐃⲆⵠ === Ni) {
      if (ff.transition) {
        var p = ff.time ? sc - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
        Mo.fillStyle = Tv(15, 77, 72, 252, 239, 187, p);
      } else {
        Mo.fillStyle = rs.ᐃⲆⵠᐃⵠᐃⲆ[ff.time];
      }
      Mo.fillRect(r, t, b, u);
    } else {
      if (ff.transition) {
        p = ff.time ? er - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
        Mo.fillStyle = Tv(k.ⵠⲆΔ[0], k.ⵠⲆΔ[1], k.ⵠⲆΔ[2], k.ᐃⵠⵠ[Fj], k.ᐃⵠⵠ[_h], k.ᐃⵠⵠ[2], p);
      } else {
        Mo.fillStyle = k.ᐃΔⲆΔⵠ[ff.time];
      }
      Mo.fillRect(r, t, b, u);
    }
  }
  function Iv(j, e, i, q, n, o) {
    var r = q.w1;
    var a = q.w2;
    var s = q.w3;
    var h = dx.ⲆΔⲆ.y + j + 710;
    var l = Math.max(dx.ⲆΔⲆ.x + e, bu);
    var g = Math.max(-dx.ⲆΔⲆ.x + Do - i - 100, 0);
    var t = l;
    var b = Do - l - g;
    if (o) {
      var u = q.ⲆⲆΔ(r);
    } else {
      u = r.r;
    }
    var v = h + ow.ΔᐃⵠᐃΔ;
    var F = v;
    var m = t;
    var p = -u.x + ow.ⵠⲆⲆᐃᐃ;
    var C = b;
    var G = v += -u.x + ow.ⵠⲆⲆᐃᐃ + zd;
    if (o) {
      u = q.ⲆⲆΔ(a);
    } else {
      u = a.r;
    }
    var f = h - ow.ⲆᐃΔΔᐃ - v - u.x;
    var H = v;
    var y = t;
    var w = f;
    var K = b;
    var A = (v += f + qi) - 2;
    if (o) {
      u = q.ⲆⲆΔ(s);
    } else {
      u = s.r;
    }
    if (A > v + (f = h - ow.ᐃⵠΔⵠᐃ - v - u.x)) {
      var k = true;
      var L = v;
      var J = t;
      var M = f;
      var B = b;
      var D = v += f + 2;
    } else {
      k = Jn;
      v = A;
      D = -1;
    }
    f = h - ow.ⲆΔᐃⲆᐃⵠⵠ - v;
    if (ff.transition) {
      var N = ff.time ? Mg - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
      Mo.fillStyle = Tv(9, 55, 63, 11, 106, 132, N);
    } else {
      Mo.fillStyle = rs.ΔⵠΔᐃⵠ[ff.time];
    }
    Mo.fillRect(m, F, C, p);
    if (o) {
      if (ff.transition) {
        N = ff.time ? Ga - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
        Mo.fillStyle = Tv(15, 70, 76, 42, 139, 155, N);
      } else {
        Mo.fillStyle = rs.ᐃΔΔᐃⲆᐃⲆ[ff.time];
      }
    } else if (ff.transition) {
      N = ff.time ? 1 - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
      Mo.fillStyle = Tv(9, 55, 63, 11, 106, 132, N);
    } else {
      Mo.fillStyle = rs.ΔⵠΔᐃⵠ[ff.time];
    }
    Mo.fillRect(y, H, K, w);
    if (k) {
      if (o) {
        if (ff.transition) {
          N = ff.time ? 1 - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
          Mo.fillStyle = Tv(17, 94, 96, 169, 214, 211, N);
        } else {
          Mo.fillStyle = rs.ⵠΔΔᐃΔᐃⵠ[ff.time];
        }
      } else if (ff.transition) {
        N = ff.time ? Fb - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
        Mo.fillStyle = Tv(9, 55, 63, 11, 106, 132, N);
      } else {
        Mo.fillStyle = rs.ΔⵠΔᐃⵠ[ff.time];
      }
      Mo.fillRect(J, L, B, M);
    }
    if (pf.ⲆⵠΔᐃΔ && o) {
      q.ΔΔΔΔⵠⵠᐃⵠᐃ(A, D, G, h, -dx.ⲆΔⲆ.x + m, -dx.ⲆΔⲆ.x + m + C);
    }
  }
  function Jv(f, e, i, j, k, n) {
    var o = j.w1;
    var a = j.w2;
    var q = j.w3;
    var h = dx.ⲆΔⲆ.x + f + 820;
    var l = Math.max(dx.ⲆΔⲆ.y + e, tj);
    var g = Math.max(-dx.ⲆΔⲆ.y + lq - i - cl, gl);
    var r = l;
    var b = lq - l - g;
    if (n) {
      var s = j.ⲆⲆΔ(o).x;
    } else {
      s = o.r.x;
    }
    var t = h + ow.ΔᐃⵠᐃΔ;
    ow.ⵠⲆⲆᐃᐃ;
    t += -s + ow.ⵠⲆⲆᐃᐃ + 2;
    if (n) {
      s = j.ⲆⲆΔ(a).x;
    } else {
      s = a.r.x;
    }
    var u = h - ow.ⲆᐃΔΔᐃ - t - s;
    var v = (t += u + 2) - zd;
    if (n) {
      s = j.ⲆⲆΔ(q).x;
    } else {
      s = q.r.x;
    }
    if (v > t + (u = h - ow.ᐃⵠΔⵠᐃ - t - s)) {
      t += u + 2;
    } else {
      t = v;
    }
    u = h - ow.ⲆΔᐃⲆᐃⵠⵠ - t;
    if (gl < n && Fb === k.ⲆⲆⵠᐃᐃⲆⵠ) {
      if (ff.transition) {
        var p = ff.time ? 1 - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
        Mo.fillStyle = Tv(15, 77, 72, 252, 239, 187, p);
      } else {
        Mo.fillStyle = rs.ᐃⲆⵠᐃⵠᐃⲆ[ff.time];
      }
      Mo.fillRect(t, r, u, b);
    } else {
      if (ff.transition) {
        p = ff.time ? 1 - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
        Mo.fillStyle = Tv(k.ⵠⲆΔ[0], k.ⵠⲆΔ[Fb], k.ⵠⲆΔ[fh], k.ᐃⵠⵠ[Ah], k.ᐃⵠⵠ[bs], k.ᐃⵠⵠ[fh], p);
      } else {
        Mo.fillStyle = k.ᐃΔⲆΔⵠ[ff.time];
      }
      Mo.fillRect(t, r, u, b);
    }
  }
  function Kv(f, e, i, j, k, n) {
    var o = j.w1;
    var a = j.w2;
    var q = j.w3;
    var h = dx.ⲆΔⲆ.y + f + 710;
    var l = Math.max(dx.ⲆΔⲆ.x + e, bu);
    var g = Math.max(-dx.ⲆΔⲆ.x + Do - i - 100, Rl);
    var r = l;
    var b = Do - l - g;
    if (n) {
      var s = j.ⲆⲆΔ(o).x;
    } else {
      s = o.r.x;
    }
    var t = h + ow.ΔᐃⵠᐃΔ;
    ow.ⵠⲆⲆᐃᐃ;
    t += -s + ow.ⵠⲆⲆᐃᐃ + 2;
    if (n) {
      s = j.ⲆⲆΔ(a).x;
    } else {
      s = a.r.x;
    }
    var u = h - ow.ⲆᐃΔΔᐃ - t - s;
    var v = (t += u + 2) - Ht;
    if (n) {
      s = j.ⲆⲆΔ(q).x;
    } else {
      s = q.r.x;
    }
    if (t + (u = h - ow.ᐃⵠΔⵠᐃ - t - s) < v) {
      t += u + fh;
    } else {
      t = v;
    }
    u = h - ow.ⲆΔᐃⲆᐃⵠⵠ - t;
    if (n > yj && k.ⲆⲆⵠᐃᐃⲆⵠ === 1) {
      if (ff.transition) {
        var p = ff.time ? Co - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
        Mo.fillStyle = Tv(15, 77, 72, 252, 239, 187, p);
      } else {
        Mo.fillStyle = rs.ᐃⲆⵠᐃⵠᐃⲆ[ff.time];
      }
      Mo.fillRect(r, t, b, u);
    } else {
      if (ff.transition) {
        p = ff.time ? ck - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
        Mo.fillStyle = Tv(k.ⵠⲆΔ[0], k.ⵠⲆΔ[Ek], k.ⵠⲆΔ[Ol], k.ᐃⵠⵠ[0], k.ᐃⵠⵠ[wh], k.ᐃⵠⵠ[2], p);
      } else {
        Mo.fillStyle = k.ᐃΔⲆΔⵠ[ff.time];
      }
      Mo.fillRect(r, t, b, u);
    }
  }
  function Lv(a, b, c) {
    if (ff.transition) {
      Mo.globalAlpha = sl;
      a.ⵠⲆⵠΔ(b, c);
      ff.time = ff.time ? Ih : 1;
      Mo.globalAlpha = 1 - ff.ⵠⲆΔΔ.ᐃⲆⵠ;
      a.ⵠⲆⵠΔ(b, c);
      ff.time = ff.time ? Aa : 1;
      Mo.globalAlpha = 1;
    } else {
      a.ⵠⲆⵠΔ(b, c);
    }
  }
  function Mv(a, b, c, d, e) {
    if (ff.transition && e == bs) {
      Mo.globalAlpha = Ni;
      Mm(Mo, ᐃΔ[a][ff.time][b], c, d);
      ff.time = ff.time ? Ah : 1;
      Mo.globalAlpha = 1 - ff.ⵠⲆΔΔ.ᐃⲆⵠ;
      Mm(Mo, ᐃΔ[a][ff.time][b], c, d);
      ff.time = ff.time ? 0 : wh;
      Mo.globalAlpha = bs;
    } else {
      Mo.globalAlpha = e;
      Mm(Mo, ᐃΔ[a][ff.time][b], c, d);
      Mo.globalAlpha = 1;
    }
  }
  function Nv(j, e, i, q, n, o) {
    var r = q.w1;
    var a = q.w2;
    var s = q.w3;
    var h = dx.ⲆΔⲆ.x + j - 700;
    var l = Math.max(dx.ⲆΔⲆ.y + e, 0);
    var g = Math.max(-dx.ⲆΔⲆ.y + lq - i - 100, Md);
    var t = l;
    var b = lq - l - g;
    if (o) {
      var u = q.ⲆⲆΔ(r);
    } else {
      u = r.r;
    }
    var v = h + ow.ΔᐃⵠᐃΔ;
    var F = v;
    var m = t;
    var p = u.x + ow.ⵠⲆⲆᐃᐃ;
    var C = b;
    var G = v += u.x + ow.ⵠⲆⲆᐃᐃ - 2;
    if (o) {
      u = q.ⲆⲆΔ(a);
    } else {
      u = a.r;
    }
    var f = h + ow.ⲆᐃΔΔᐃ - v + u.x;
    var H = v;
    var y = t;
    var w = f;
    var K = b;
    var A = (v += f - Nr) - 2;
    if (o) {
      u = q.ⲆⲆΔ(s);
    } else {
      u = s.r;
    }
    if (A < v + (f = h + ow.ᐃⵠΔⵠᐃ - v + u.x) - iu) {
      var k = kl;
      var L = v;
      var J = t;
      var M = f;
      var B = b;
      var D = v += f - qo;
    } else {
      k = hg;
      v = A;
      D = -1;
    }
    f = h + ow.ⲆΔᐃⲆᐃⵠⵠ - v;
    if (ff.transition) {
      var N = ff.time ? 1 - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
      Mo.fillStyle = Tv(9, 55, 63, 11, 106, 132, N);
    } else {
      Mo.fillStyle = rs.ΔⵠΔᐃⵠ[ff.time];
    }
    Mo.fillRect(F, m, p, C);
    if (o) {
      if (ff.transition) {
        N = ff.time ? Ni - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
        Mo.fillStyle = Tv(15, 70, 76, 42, 139, 155, N);
      } else {
        Mo.fillStyle = rs.ᐃΔΔᐃⲆᐃⲆ[ff.time];
      }
    } else if (ff.transition) {
      N = ff.time ? 1 - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
      Mo.fillStyle = Tv(9, 55, 63, 11, 106, 132, N);
    } else {
      Mo.fillStyle = rs.ΔⵠΔᐃⵠ[ff.time];
    }
    Mo.fillRect(H, y, w, K);
    if (k) {
      if (o) {
        if (ff.transition) {
          N = ff.time ? 1 - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
          Mo.fillStyle = Tv(17, 94, 96, 169, 214, 211, N);
        } else {
          Mo.fillStyle = rs.ⵠΔΔᐃΔᐃⵠ[ff.time];
        }
      } else if (ff.transition) {
        N = ff.time ? 1 - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
        Mo.fillStyle = Tv(9, 55, 63, 11, 106, 132, N);
      } else {
        Mo.fillStyle = rs.ΔⵠΔᐃⵠ[ff.time];
      }
      Mo.fillRect(L, J, M, B);
    }
    if (pf.ⲆⵠΔᐃΔ && o) {
      q.ⵠⵠᐃΔᐃΔᐃⵠᐃ(A, D, G, h, -dx.ⲆΔⲆ.y + m, -dx.ⲆΔⲆ.y + m + C);
    }
  }
  function Pv(a) {
    Mo.globalAlpha = a.alpha;
    Vt(Mo, a.x + dx.ⲆΔⲆ.x, a.y + dx.ⲆΔⲆ.y, a.r);
    St(Mo, rs.ᐃΔΔⵠⵠⲆⵠ[ff.time]);
    Mo.globalAlpha = 1;
  }
  function Qv(b, c, d, e, f, g, i, a, j, h) {
    if (ff.transition) {
      Mo.globalAlpha = Mg;
      b(c, d, e, f, g, i, a, j, h);
      ff.time = ff.time ? xq : ck;
      Mo.globalAlpha = wh - ff.ⵠⲆΔΔ.ᐃⲆⵠ;
      b(c, d, e, f, g, i, a, j, h);
      ff.time = ff.time ? 0 : 1;
      Mo.globalAlpha = 1;
    } else {
      b(c, d, e, f, g, i, a, j, h);
    }
  }
  function Rv(a, b) {
    if (ff.transition) {
      Mo.globalAlpha = 1;
      a.ᐃᐃⲆⵠⲆ(b);
      ff.time = ff.time ? 0 : Ls;
      Mo.globalAlpha = er - ff.ⵠⲆΔΔ.ᐃⲆⵠ;
      a.ᐃᐃⲆⵠⲆ(b);
      ff.time = ff.time ? 0 : 1;
      Mo.globalAlpha = 1;
    } else {
      a.ᐃᐃⲆⵠⲆ(b);
    }
  }
  function Sv(b, c, d, e, f) {
    var g = d.width;
    var i = d.height;
    var a = Math.floor(g / jg);
    var j = Math.floor(i / 2);
    if (ff.transition) {
      Mo.globalAlpha = 1;
      Mm(Mo, ᐃΔ[b][c][ff.time], qu, Fj, g, i, e, f, a, j);
      ff.time = ff.time ? xq : 1;
      Mo.globalAlpha = 1 - ff.ⵠⲆΔΔ.ᐃⲆⵠ;
      Mm(Mo, ᐃΔ[b][c][ff.time], Aa, 0, g, i, e, f, a, j);
      ff.time = ff.time ? 0 : 1;
      Mo.globalAlpha = 1;
    } else {
      Mm(Mo, ᐃΔ[b][c][ff.time], 0, fg, g, i, e, f, a, j);
    }
  }
  function Tv(b, c, d, e, f, g, i) {
    var a;
    var j = "#";
    j += (a = Math.floor(e * i + b * (Ls - i))) < 16 ? "0" + a.toString(16) : a.toString(16);
    j += (a = Math.floor(f * i + c * (ck - i))) < 16 ? "0" + a.toString(Rj) : a.toString(on);
    return j += (a = Math.floor(g * i + d * (sl - i))) < 16 ? "0" + a.toString(Jg) : a.toString(16);
  }
  function Uv(b, c, d, e) {
    var f = c.width;
    var g = c.height;
    var h = Math.floor(f / 2);
    var a = Math.floor(g / 2);
    if (ff.transition) {
      Mo.globalAlpha = 1;
      Mm(Mo, ᐃΔ[b][ff.time], 0, 0, f, g, d, e, h, a);
      ff.time = ff.time ? 0 : Lu;
      Mo.globalAlpha = Ek - ff.ⵠⲆΔΔ.ᐃⲆⵠ;
      Mm(Mo, ᐃΔ[b][ff.time], 0, xq, f, g, d, e, h, a);
      ff.time = ff.time ? Md : 1;
      Mo.globalAlpha = 1;
    } else {
      Mm(Mo, c, 0, bu, f, g, d, e, h, a);
    }
  }
  function Vv(a) {
    Mo.save();
    Mo.translate(dx.ⲆΔⲆ.x + a.x, dx.ⲆΔⲆ.y + a.y);
    Mo.rotate(a.angle);
    Mo.globalAlpha = a.alpha;
    var b = ᐃΔ[a.id][ff.time];
    Mm(Mo, b, -b.width / 2, -b.height / 2);
    Mo.globalAlpha = 1;
    Mo.restore();
  }
  function Wv(f, e, i, j, k, n) {
    var o = j.w1;
    var a = j.w2;
    var q = j.w3;
    var h = dx.ⲆΔⲆ.x + f - 700;
    var l = Math.max(dx.ⲆΔⲆ.y + e, An);
    var g = Math.max(-dx.ⲆΔⲆ.y + lq - i - Re, 0);
    var r = l;
    var b = lq - l - g;
    if (n) {
      var s = j.ⲆⲆΔ(o).x;
    } else {
      s = o.r.x;
    }
    var t = h + ow.ΔᐃⵠᐃΔ;
    ow.ⵠⲆⲆᐃᐃ;
    t += s + ow.ⵠⲆⲆᐃᐃ - tk;
    if (n) {
      s = j.ⲆⲆΔ(a).x;
    } else {
      s = a.r.x;
    }
    var u = h + ow.ⲆᐃΔΔᐃ - t + s;
    var v = (t += u - 2) - Gl;
    if (n) {
      s = j.ⲆⲆΔ(q).x;
    } else {
      s = q.r.x;
    }
    if (v < t + (u = h + ow.ᐃⵠΔⵠᐃ - t + s) - Hn) {
      t += u - Nr;
    } else {
      t = v;
    }
    u = h + ow.ⲆΔᐃⲆᐃⵠⵠ - t;
    if (n > et && er === k.ⲆⲆⵠᐃᐃⲆⵠ) {
      if (ff.transition) {
        var p = ff.time ? 1 - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
        Mo.fillStyle = Tv(15, 77, 72, 252, 239, 187, p);
      } else {
        Mo.fillStyle = rs.ᐃⲆⵠᐃⵠᐃⲆ[ff.time];
      }
      Mo.fillRect(t, r, u, b);
    } else {
      if (ff.transition) {
        p = ff.time ? 1 - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
        Mo.fillStyle = Tv(k.ⵠⲆΔ[0], k.ⵠⲆΔ[bd], k.ⵠⲆΔ[Nj], k.ᐃⵠⵠ[0], k.ᐃⵠⵠ[1], k.ᐃⵠⵠ[Gl], p);
      } else {
        Mo.fillStyle = k.ᐃΔⲆΔⵠ[ff.time];
      }
      Mo.fillRect(t, r, u, b);
    }
  }
  var Xv = 0;
  var Yv = 1;
  var Zv = 2;
  var $v = bu;
  var _v = 1;
  var aw = ta;
  function bw(a, b) {
    var c = a.getBoundingClientRect();
    return {
      x: b.clientX - c.left,
      y: b.clientY - c.top
    };
  }
  function cw(f, j, i, k, n, p, q, r, t, w, l, g, u, b, x) {
    if (et === f.length) {
      f = " ";
    }
    if (q === lh) {
      q = 0;
    }
    if (r === undefined) {
      r = Ih;
    }
    if (kh === t) {
      t = Rl;
    }
    if (b === undefined) {
      b = 0;
    }
    var d = document.createElement("canvas");
    var c = d.getContext("2d");
    c.textBaseline = "middle";
    c.font = (x !== Oq ? x + " " : "") + k + "px " + j;
    n = n !== undefined ? Math.min(c.measureText(f).width, n) : c.measureText(f).width;
    d.width = n + q;
    d.height = k + r;
    if (es !== p) {
      if (l !== es) {
        c.globalAlpha = l;
      }
      c.fillStyle = p;
      if (g !== Yo) {
        ⲆΔⲆⲆⲆΔⵠⵠⲆ(c, t + 2, t, n + q - t * qi - Zt, k + r - t * Nr, g);
        c.fill();
      } else {
        c.fillRect(t, t, n + q - t * 2, k + r - t * 2);
      }
      c.globalAlpha = 1;
      if (t !== 0) {
        c.lineWidth = t;
        c.strokeStyle = w;
        c.stroke();
      }
    }
    c.textBaseline = "middle";
    c.font = (x !== ys ? x + " " : "") + k + "px " + j;
    if (u !== Gn) {
      c.strokeStyle = u;
      c.lineWidth = b;
      c.lineJoin = "miter";
      c.miterLimit = 2;
      c.strokeText(f, Math.floor(q / 2), Math.floor(r / br) + Math.floor(k / Ht), n);
    }
    c.fillStyle = i;
    c.fillText(f, Math.floor(q / Nj), Math.floor(r / il) + Math.floor(k / 2), n);
    d.w2 = d.width / qo;
    d.ᐃⵠᐃΔᐃ = d.height / Nr;
    return d;
  }
  function dw(f, e, i, j, k, m, n, a, p, q, t) {
    if (Ao === p) {
      p = 0;
    }
    if (a === undefined) {
      a = tj;
    }
    if (q === undefined) {
      q = 0;
    }
    if (t === Xl) {
      t = Ls;
    }
    if (m !== 1) {
      m = 0;
    }
    if (j) {
      var w = j;
    }
    var u;
    var x = {
      width: f,
      height: e,
      ⵠⵠ: w,
      state: $v,
      translate: {
        x: a,
        y: p,
        ⲆⲆΔᐃΔ: a,
        ⵠΔⵠΔᐃ: p
      },
      ⵠᐃΔⲆᐃᐃΔΔⵠ: m,
      ΔⵠΔⵠ: 0,
      callback: n,
      position: q,
      active: t
    };
    function v() {
      return x.ⵠⵠ[x.state];
    }
    function d(a) {
      var b = x.translate;
      if (x.width === tj || sb === x.height) {
        x.width = x.ⵠⵠ[0].width;
        x.height = x.ⵠⵠ[tj].height;
      }
      return a.x > b.x && a.x < b.x + x.width / k && a.y > b.y && a.y < b.y + x.height / k;
    }
    m = function () {
      var a = 0;
      if (x.ⵠᐃΔⲆᐃᐃΔΔⵠ === _) {
        if (_v === x.state || aw === x.state) {
          x.ΔⵠΔⵠ = (x.ΔⵠΔⵠ + hx * 1000) % 1000;
        } else if (x.ΔⵠΔⵠ > yj) {
          x.ΔⵠΔⵠ = x.ΔⵠΔⵠ > 500 ? x.ΔⵠΔⵠ + hx * 1000 : x.ΔⵠΔⵠ - hx * 1000;
          if (x.ΔⵠΔⵠ < An || x.ΔⵠΔⵠ > 1000) {
            x.ΔⵠΔⵠ = 0;
          }
        }
        a = ᐃΔᐃⵠ.ⵠⵠΔⲆᐃ(x.ΔⵠΔⵠ > 500 ? (1000 - x.ΔⵠΔⵠ) / 500 : x.ΔⵠΔⵠ / 500) * 0.2;
      }
      return a;
    };
    if ((k = rb === k ? 3 : k === 1 ? 2 : sc) === fh) {
      u = function (b) {
        var c = wh + m();
        var d = v();
        var e = c * x.width / Nj;
        var f = x.height * c / Nj;
        var g = (e - x.width / bq) / 2;
        var a = (f - x.height / 2) / 2;
        Mm(b, d, x.translate.x - g, x.translate.y - a, e, f);
      };
    } else if (k === 3) {
      u = function (a) {
        var b = v();
        var c = x.width;
        var d = x.height;
        var e = (c - x.width) / qi;
        var f = (d - x.height) / 2;
        Mm(a, b, x.translate.x - e, x.translate.y - f, c, d);
      };
      k = 1;
    } else {
      u = function (a) {
        Mm(a, v(), x.translate.x, x.translate.y);
      };
    }
    return {
      info: x,
      ᐃᐃⵠⵠ: function (a, b, c) {
        if (d(b)) {
          if (c == Yv) {
            x.state = aw;
          } else if (Zv == c || c == Xv && aw != x.state) {
            x.state = _v;
          }
          return mt;
        } else {
          x.state = $v;
          return Hj;
        }
      },
      ⵠⲆⵠΔ: u,
      ᐃᐃⲆᐃⲆⲆᐃ: d
    };
  }
  function ew(a, b, c, d, e) {
    var f = {
      x: c,
      y: d,
      ⲆⲆΔᐃΔ: c,
      ⵠΔⵠΔᐃ: d
    };
    return {
      translate: f,
      ⵠⲆⵠΔ: function (b) {
        Mm(b, a, f.x, f.y, a.width / 2, a.height / 2);
      },
      active: b,
      position: e
    };
  }
  var fw = "send";
  var gw = ᐃΔᐃⵠ.ⵠᐃᐃᐃⵠⲆΔ("id") === "1" ? 1 : 0;
  var hw = ᐃΔᐃⵠ.ⵠᐃᐃᐃⵠⲆΔ("password");
  var iw = ᐃΔᐃⵠ.ⵠᐃᐃᐃⵠⲆΔ("debug") || Iq;
  if (Pa !== iw) {
    iw = JSON.parse(bj.decodeURIComponent(iw));
  }
  var jw = "starve.io";
  var kw = "https://" + jw;
  var lw = {
    ΔΔΔᐃⵠΔⲆ: Sh,
    ⲆⵠΔᐃΔⲆΔ: 128,
    ᐃᐃᐃᐃⵠᐃⲆ: 32,
    IDLE: 64,
    ⲆⵠΔⲆⵠⵠᐃ: Rg,
    ᐃᐃⲆⲆ: 2,
    ᐃΔⲆᐃᐃΔᐃ: 16,
    ΔΔΔⵠᐃ: 4,
    ⵠΔⵠⵠⵠⲆⲆᐃⵠ: ck
  };
  var mw = [{
    ⲆⲆΔΔⵠ: 1000,
    items: [[2, 113], [Fb, 117], [8, 110], [ck, 143]]
  }, {
    ⲆⲆΔΔⵠ: 2000,
    items: [[2, 118], [sc, 8], [qo, 117], [16, 110], [fh, 143]]
  }, {
    ⲆⲆΔΔⵠ: 4000,
    items: [[3, 118], [1, 1], [4, 117], [gg, 110], [Og, 143], [1, 114], [80, 108], [140, 109]]
  }, {
    ⲆⲆΔΔⵠ: 8000,
    items: [[bs, 29], [4, 118], [Ls, 3], [6, 117], [30, 110], [Is, 143], [1, 114], [150, 108], [200, 109], [60, 111], [2, 127]]
  }, {
    ⲆⲆΔΔⵠ: 16000,
    items: [[Co, 29], [Kg, 4], [1, 198], [Nn, 136], [X, 127], [zd, 118], [1, 119], [_q, 163], [Ol, 171], [sl, 159], [Ek, 55], [200, 108], [300, 109]]
  }, {
    ⲆⲆΔΔⵠ: 16000,
    items: [[1, 29], [1, 11], [bd, 50], [er, 3], [10, 136], [yn, 127], [_g, 118], [3, 195], [1, 28], [200, 108], [300, 109]]
  }, {
    ⲆⲆΔΔⵠ: 16000,
    items: [[wh, 29], [1, 83], [Fb, 36], [Sg, 195], [1, 0], [Ni, 3], [7, 136], [qi, 127], [yn, 118], [150, 108], [200, 109], [1, 158]]
  }, {
    ⲆⲆΔΔⵠ: 16000,
    items: [[Ni, 29], [Ls, 84], [1, 3], [Nn, 136], [jb, 127], [Dd, 118], [Gl, 135], [Mu, 144], [10, 141], [Vs, 132], [mg, 115], [1, 49], [500, 109]]
  }, {
    ⲆⲆΔΔⵠ: 16000,
    items: [[1, 29], [1, 3], [16, 138], [Ni, 127], [6, 118], [hd, 195], [Fb, 48], [Fb, 0], [16, 125], [150, 108], [200, 109]]
  }, {
    ⲆⲆΔΔⵠ: 20000,
    items: [[1, 29], [Lu, 3], [Co, 136], [wh, 127], [hd, 118], [Lq, 195], [1, 26], [1, 5], [1, 15], [2, 169], [50, 108], [100, 109]]
  }];
  var nw = {
    ᐃᐃᐃΔⵠΔᐃⲆΔ: "[6]",
    ⵠⵠⲆᐃᐃⲆᐃⲆΔ: 14,
    ᐃᐃⵠⲆⵠⲆΔⵠⲆ: 8000,
    ⲆⵠⵠᐃΔΔΔᐃᐃ: 2000,
    ᐃᐃᐃⲆᐃⵠⵠ: 1,
    ΔᐃⲆⵠⲆⵠΔᐃΔ: Vl,
    ΔⵠᐃⵠⲆᐃⲆⲆⲆ: 3,
    ΔⲆⵠⵠᐃᐃΔᐃΔ: jk,
    ⵠⲆᐃᐃΔᐃⲆ: 0.2,
    ⵠⲆⵠⲆⲆᐃⵠ: Mh,
    ⵠⵠⵠᐃⵠᐃⵠᐃⵠ: 26,
    ⲆᐃⵠᐃⲆᐃⵠ: sb,
    ⵠⲆᐃᐃΔᐃⵠ: 2,
    ⲆΔΔⲆⵠⵠⵠ: 600000,
    ΔⲆⲆⲆⵠⲆⲆ: 4,
    ⲆᐃΔⲆᐃⲆⲆⲆⵠ: 200,
    ᐃΔⲆᐃᐃΔⵠⵠⲆ: zr,
    ᐃΔⲆᐃᐃΔᐃ: 0.2,
    ⵠΔⵠⵠᐃⲆⲆⵠΔ: 0.58,
    ⲆⲆⵠⲆΔⲆΔ: 52,
    ⵠⵠᐃⵠΔⲆΔⵠΔ: 50,
    ᐃⲆᐃⵠⲆⲆΔΔⲆ: 125000,
    ᐃΔΔⲆⵠΔⵠⵠΔ: 60000,
    ⵠᐃⵠΔⲆⲆⲆⵠⵠ: 5,
    ᐃᐃᐃⵠⵠΔᐃ: 4
  };
  var ow = {
    ⲆᐃΔ: 480000,
    ΔⵠⲆΔⲆⵠΔ: 10,
    ⵠᐃⲆᐃⲆΔⲆ: Rj,
    ᐃⵠᐃᐃΔⵠⵠⵠΔ: q - 10,
    ⲆⲆⵠΔⲆᐃⲆ: 60,
    ᐃᐃᐃⲆⵠ: er,
    ᐃᐃⲆᐃⵠ: Ht,
    ⲆΔΔⲆΔ: 4,
    ᐃⵠⵠΔⵠ: Nk,
    ⵠⲆᐃᐃΔᐃⲆ: eb,
    ⲆⵠΔⵠᐃⲆΔ: pn,
    ΔᐃΔᐃΔΔⲆ: 100,
    ⲆΔᐃⲆⵠⲆᐃ: 100,
    ΔᐃᐃⵠᐃⵠⲆᐃⲆ: Ps,
    ⲆⲆⲆⲆΔⵠᐃ: 100,
    ⲆⵠᐃΔⲆᐃΔ: 100,
    ᐃΔⲆⲆⲆⲆⲆΔᐃ: pn,
    ⲆⵠᐃΔⲆᐃΔ: ok,
    ΔᐃⲆΔΔᐃΔ: 100,
    ΔΔⵠⵠΔᐃᐃ: Fs,
    ⲆⵠⵠΔⵠ: Fj,
    ⵠᐃⵠΔⲆᐃⵠ: 1,
    ΔΔᐃᐃᐃ: 2,
    ᐃΔⵠᐃᐃ: 3,
    ᐃⵠΔΔⲆ: Dd,
    ⵠᐃᐃΔⵠᐃᐃ: 5,
    ΔⲆΔⵠΔ: 6,
    ⵠⲆⲆⵠΔ: 7,
    ᐃⲆᐃⲆᐃⵠΔⲆⲆ: {
      losangeles: "Los Angeles",
      atlanta: "Atlanta",
      osaka: "Osaka",
      sydney: "Sydney",
      frankfurt: "Frankfurt"
    },
    ⵠⲆᐃⵠⵠᐃΔ: {
      0: "normal",
      2: "zombies",
      3: "vampires",
      4: "forest",
      6: "community",
      7: "experimental"
    },
    ⵠΔΔΔΔⵠᐃ: Rl,
    ⵠⲆⵠⲆⵠⵠᐃ: bu,
    ᐃᐃᐃⲆⵠⲆᐃ: 30,
    ⲆⲆⲆᐃⲆΔΔᐃᐃ: 2,
    ⲆⲆⵠΔⲆᐃⲆ: 60000,
    ᐃⲆⲆⲆⲆᐃᐃᐃⲆ: sb,
    ⲆΔᐃⵠⲆᐃᐃΔⵠ: 0,
    ⲆⵠᐃⲆⵠⲆⵠᐃΔ: 50,
    ᐃⵠᐃⵠⵠⵠΔᐃⵠ: 0,
    ⲆⵠᐃⲆᐃΔⵠⵠΔ: 40,
    ᐃⲆΔⲆᐃᐃⵠⵠⵠ: 39,
    ᐃᐃⲆΔⵠᐃⲆΔΔ: 830,
    ᐃⲆᐃΔΔⵠⵠ: 25,
    ⲆΔᐃΔΔⲆΔ: yl,
    ⵠⲆⲆᐃᐃ: 0,
    ΔᐃⵠᐃΔ: 0,
    ᐃⲆΔΔⵠᐃΔ: 200,
    ᐃⲆΔΔⲆΔᐃ: Ah,
    ⲆᐃΔΔᐃ: 250,
    ⲆⵠⲆⲆⲆⲆⵠ: 150,
    ᐃᐃᐃᐃⲆᐃⵠ: xq,
    ᐃⵠΔⵠᐃ: 350,
    ᐃⵠΔⲆⲆⲆⵠ: ok,
    ⲆΔᐃⲆᐃⵠⵠ: 700,
    ᐃⵠⵠⵠⵠ: 39879
  };
  var pw = [];
  for (xt = 0; xt < 500; xt++) {
    pw[xt] = 0;
  }
  pw[47] = bs;
  pw[57] = Ls;
  pw[0] = 1;
  pw[5] = ig;
  pw[6] = 1;
  pw[30] = Gt;
  pw[19] = Fb;
  pw[9] = 1;
  pw[62] = 1;
  pw[63] = ck;
  pw[13] = Co;
  pw[14] = er;
  pw[15] = 1;
  pw[33] = 1;
  pw[34] = 1;
  pw[16] = Lu;
  pw[17] = ig;
  pw[12] = 1;
  pw[18] = Mg;
  var qw = [{
    time: $q * 480000
  }, {
    time: Mh * (Fh * 60000)
  }, {
    time: yn * 480000
  }, {
    time: hd * 480000
  }, {
    time: Kn * 60000 * 6
  }, {
    time: lu * 480000
  }, {
    time: 2400000
  }, {
    time: Da * 60000 * vc
  }, {
    time: Kn * 60000 * Ze
  }, {
    time: Fh * 60000 * qs
  }, {
    time: Kl * (yl * 60000)
  }, {
    time: ss * 60000 * Da
  }, {
    time: Sl * ($l * 60000)
  }];
  var rw = {
    ⲆᐃᐃΔⲆ: 62,
    ΔΔⲆⵠᐃ: 51,
    ΔΔⵠⲆⲆ: 86,
    ΔⵠⲆⵠΔᐃⲆ: 82,
    ᐃΔΔᐃΔ: 24,
    Ⲇⵠⵠⵠᐃ: 10,
    ⵠᐃⲆᐃⲆ: 56,
    ⵠΔΔΔᐃ: 14,
    ᐃⵠⵠⵠⵠ: 3,
    ᐃⲆᐃⲆⲆ: 32,
    ΔⵠΔⵠⵠ: 28,
    ⵠⲆΔⵠᐃ: 27,
    ⲆⵠⵠⵠⲆ: 87,
    ⲆⲆⲆᐃᐃⲆⵠ: 89,
    ΔᐃⲆΔᐃ: 63,
    ΔΔΔⲆΔ: 25,
    ΔΔⵠᐃⵠ: 45,
    ᐃⲆⵠᐃⵠ: 91,
    ⵠⲆⵠⲆⲆ: 29,
    ⲆΔⵠΔᐃ: 100,
    ⲆΔⲆⵠⵠ: 36,
    ⵠⵠⲆⲆⲆ: 23,
    ΔⲆⵠⲆⲆ: jg,
    ⲆⵠⲆΔⲆ: 55,
    ᐃᐃΔΔⲆ: 79,
    ⵠΔΔᐃⲆ: Zq,
    ΔΔᐃΔⵠ: 30,
    ᐃᐃΔⲆⵠ: 18,
    ᐃⲆΔᐃⵠ: 43,
    ᐃⲆⵠⲆΔⵠΔ: 84,
    ΔᐃΔⲆⵠ: 80,
    ⵠⵠᐃⲆⵠ: 31,
    ⲆⵠΔᐃⵠ: 44,
    ⲆᐃΔᐃⵠ: 48,
    ⲆᐃⲆᐃΔ: 26,
    ⲆᐃⲆΔᐃΔⲆ: 83,
    ⵠᐃᐃΔΔ: 71,
    ᐃⲆᐃᐃΔ: 78,
    ᐃⵠⵠⲆⵠ: 4,
    ΔᐃΔⵠᐃ: 8,
    ⵠΔᐃⵠⵠ: 21,
    ᐃⲆⵠⲆⲆ: 47,
    ⵠᐃᐃᐃᐃ: Bk,
    ᐃⲆᐃⵠⲆ: 65,
    ΔΔᐃⵠⵠ: 40,
    ⲆᐃⵠⲆΔ: Kt,
    ⲆⵠᐃⲆΔ: 16,
    ΔΔΔΔⵠⵠΔ: 85,
    ⲆⲆᐃⵠᐃ: 60,
    ⲆᐃⲆⲆᐃ: 64,
    ᐃΔΔⵠΔ: 67,
    ⵠⲆᐃᐃΔ: 11,
    ⲆⵠⲆⵠⵠ: 34,
    ⲆⲆⲆᐃΔ: 50,
    ΔΔⲆᐃᐃ: D,
    ᐃΔⲆⲆⵠ: 53,
    ΔⲆᐃⲆᐃ: 72,
    ⵠⲆΔΔⵠ: 74,
    ⲆΔⵠΔⵠ: 5,
    ⵠⵠᐃⲆⲆ: 13,
    ΔⵠΔⵠᐃ: 68,
    ᐃⲆᐃᐃⵠ: 69,
    ⲆᐃⵠΔⵠ: 39,
    ⵠΔΔⵠ: 0,
    ⵠΔⵠⵠᐃ: 66,
    ⲆⲆⵠΔⲆ: 88,
    ᐃΔⲆΔΔ: Dh,
    ⲆΔⲆⲆⲆ: Tk,
    ⲆⲆⵠⲆΔ: 81,
    ΔᐃⲆᐃⵠ: zb,
    ⲆΔΔⵠⲆ: 52,
    ΔⲆⲆΔⲆ: 35,
    ⵠΔᐃⵠⲆ: 90,
    ΔⵠᐃⵠᐃΔΔ: 76,
    ⲆᐃⲆⵠᐃ: 73,
    ⲆⲆΔⵠⲆ: 54,
    ΔΔᐃΔⲆ: 38,
    ⲆⲆᐃᐃⵠ: 42,
    ᐃΔΔᐃⲆ: 6,
    ⲆⲆΔᐃⵠ: 49,
    ᐃⲆᐃᐃᐃ: 61,
    ⵠᐃᐃⲆΔ: 41,
    ⵠΔΔⵠΔ: 37,
    ΔΔⲆⲆⲆ: 33,
    ⲆⲆᐃΔⵠ: Ni,
    ⲆⵠⲆⵠᐃ: 22,
    ᐃᐃⲆᐃⲆ: 46,
    ᐃⲆᐃᐃⲆ: 77,
    ΔΔᐃΔΔ: 70,
    Ⲇⵠⵠᐃᐃ: 75
  };
  var sw = [[rw.ᐃΔΔᐃΔ, 108], [rw.ΔΔΔⲆΔ, 111], [rw.ⲆᐃⲆᐃΔ, 112], [rw.ⵠⲆΔⵠᐃ, 121], [rw.ΔⵠΔⵠⵠ, 202]];
  function tw(j) {
    function k(c, d, e, f, i) {
      var j = d + Math.floor(f * ff.ΔⲆⵠⵠⵠ.get());
      var k = e + Math.floor(f * ff.ΔⲆⵠⵠⵠ.get());
      var a = F + Math.floor((ff.ΔⲆᐃⵠᐃ - j - zq) * ff.ΔⲆⵠⵠⵠ.get());
      var m = eb + Math.floor(ff.ΔⲆⵠⵠⵠ.get() * (ff.ΔⲆᐃᐃᐃ - k - La));
      var h = a + j;
      var l = m + k;
      for (var g = 0; ff.ᐃᐃⵠᐃ.length > g; g++) {
        var n = ff.ᐃᐃⵠᐃ[g];
        if (ᐃΔᐃⵠ.ⵠⲆⵠⵠᐃΔⲆ(a, h, m, l, n.x1 / Lr - i, n.x2 / 100 + i, n.y1 / yg - i, n.y2 / 100 + i) === er) {
          return Md;
        }
      }
      ff.ᐃᐃⵠᐃ.push(new ff.ᐃⲆΔᐃⲆΔⲆ(c, a, m, j, k, 15));
      return 1;
    }
    function e(b, c, d, e, f) {
      for (var g = 0; f > g && _ !== k(b, c, d, e, $l); g++);
      if (g === f) {
        return Ih;
      } else {
        return Ek;
      }
    }
    function i(a, b, c) {
      var d = b;
      for (var e = c; ff.ΔⲆᐃᐃᐃ > e; e++) {
        for (var f = b; f < ff.ΔⲆᐃⵠᐃ && (e === c && (d = Math.max(f, d)), d >= f) && Kg !== a[e][f]; f++) {
          a[e][f] = Mg;
        }
        if (f < d) {
          break;
        }
      }
      ff.ᐃᐃⵠᐃ.push(new ff.ᐃⲆΔᐃⲆΔⲆ(ff.ᐃⵠΔᐃⲆ, b, c, d - b + 1, e - c, 15));
    }
    function n(f, j, k, m, n, o, p, a) {
      var q = Math.floor(p / jb);
      var h = Math.max(1, Math.floor(p / tk));
      var l = Math.floor(a / 2);
      var g = Math.max(Co, Math.floor(a / 2));
      for (var r = 0; k > r; r++) {
        for (var s = f - l; f + g > s; s++) {
          for (var t = j - q; j + h > t; t++) {
            if (z(s, t, "wtb", Qr, er) === 1) {
              o.push([s, t, 1]);
            }
          }
        }
        f += m;
        j += n;
      }
    }
    function x(a, b) {
      for (var c = Gk; b.length > c; c++) {
        l(b[c][Ah], b[c][1], a, b[c][2]);
      }
    }
    function o(f, e) {
      var i = ff.ᐃᐃⵠᐃ[f];
      var j = Math.floor(i.y1 / mh);
      var k = Math.floor(i.x1 / 100);
      var o = Math.floor(i.ⵠΔⲆ / 100);
      var a = k + (A = Math.floor(i.w / mh));
      var q = 2;
      var r = o;
      var s = j;
      for (var t = k + 10 + Math.floor(ff.ΔⲆⵠⵠⵠ.get() * (A - 20)), v = t - eh; v < t + $j; v++) {
        z(j - Gt, v, "wtb", Ih, sc);
      }
      while (r > An) {
        if (q !== 2) {
          if (r < Lc) {
            for (B = 1; r > Rl; B++) {
              n(s, t, 1, sl, 0, e, B, Mg);
              r -= Kg;
              s += wh;
            }
          } else if (q !== ig) {
            q = 1;
            var w = Math.floor(Ni + ff.ΔⲆⵠⵠⵠ.get() * 2);
            var x = 1 + Math.floor(ff.ΔⲆⵠⵠⵠ.get() * 4);
            if (t < k + Gs) {
              n(s, t, w, 0, bd, e, x, x);
              t += w;
            } else if (a - on < t) {
              n(s, t, w, 0, -1, e, x, x);
              t -= w;
            } else if (ff.ΔⲆⵠⵠⵠ.get() > 0.5) {
              n(s, t, w, 0, sc, e, x, x);
              t += w;
            } else {
              n(s, t, w, 0, -ck, e, x, x);
              t -= w;
            }
          } else {
            var y = Math.min(r, Math.floor(1 + ff.ΔⲆⵠⵠⵠ.get() * 4));
            var A = Ek + Math.floor(ff.ΔⲆⵠⵠⵠ.get() * 4);
            n(s, t, y, 1, yj, e, A, A);
            q = bu;
            r -= y;
            s += y;
          }
        } else {
          for (var B = Hb; B > Gt; B--) {
            n(s, t, 1, 1, Fj, e, B, 1);
            r -= Ls;
            s += _h;
          }
          q = An;
        }
      }
      for (v = t - Ek; t + 2 > v; v++) {
        z(s, v, "wtb", 0, 1);
      }
    }
    function a(f, e, i, j, k) {
      var n = ff.ᐃᐃⵠᐃ[f];
      var p = Math.floor(n.x1 / 100);
      var q = Math.floor(n.y1 / 100);
      var r = Math.floor(n.w / 100);
      var t = Math.floor(n.ⵠΔⲆ / 100);
      if (k !== Ao) {
        k = 1 - k;
        p += Math.floor(k * r / On);
        q += Math.floor(k * t / nd);
        r -= Math.floor(r * k);
        t -= Math.floor(k * t);
      }
      var v = bx.ⲆⲆΔⵠ;
      for (var g = 0, w = 0; w < j && g <= 50000; g++) {
        var x = q + Math.floor(t * ff.ΔⲆⵠⵠⵠ.get());
        var y = p + Math.floor(ff.ΔⲆⵠⵠⵠ.get() * r);
        if (ff.ⵠᐃⵠΔⲆ(f, y * 100 + 50, x * 100 + 50) >= 400 && ((A = v[x][y + Gt]) === undefined || A[e] === undefined || A[e][i] === undefined) && ((A = v[x][y - Mg]) === undefined || Yo === A[e] || A[e][i] === undefined)) {
          var A = v[x + 1][y];
          if (Iq === A || A[e] === Mk || A[e][i] === undefined) {
            if ((A = v[x - 1][y]) === undefined || A[e] === undefined || A[e][i] === undefined) {
              if ((A = v[x + 1][y - 1]) === Gn || A[e] === undefined || lh === A[e][i]) {
                if ((A = v[x - 1][y + _h]) === undefined || A[e] === Yo || A[e][i] === undefined) {
                  A = v[x + 1][y + Ni];
                  if (lh === A || A[e] === undefined || A[e][i] === undefined) {
                    if ((A = v[x - 1][y - 1]) === undefined || A[e] === Pl || Mk === A[e][i]) {
                      if (v[x][y] === al) {
                        z(x, y, e, i, 1);
                        w++;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    function r(b, c) {
      for (var d = et; d < 6; d++) {
        a(b, "t", d, Math.floor(f * c));
      }
      for (d = 0; d < 4; d++) {
        a(b, "b", d, Math.floor(c * 20));
      }
      for (d = Ah; d < Xu; d++) {
        a(b, "s", d, Math.floor(c * 20));
      }
      var e = [];
      o(b, e);
      x(b, e);
      e = [];
      a(b, "p", Aa, Math.floor(c * 24));
      for (d = tj; d < Sg; d++) {
        a(b, "g", d, Math.floor(Ut * c));
      }
      if (ow.ΔΔᐃᐃᐃ === ff.mode) {
        for (d = 0; d < 3; d++) {
          a(b, "d", d, Math.floor(c * Sg));
        }
        for (d = fg; d < 3; d++) {
          a(b, "a", d, Math.floor(tk * c));
        }
      }
      g(b);
    }
    function h(a, b) {
      return a >= Aa && b >= An && a < ff.ΔⲆᐃᐃᐃ && b < ff.ΔⲆᐃⵠᐃ;
    }
    function l(a, b, c, d) {
      if (h(a, b) && (ⲆⲆΔⵠ = bx.ⲆⲆΔⵠ, ⲆⲆΔⵠ[a][b] === undefined && (ⲆⲆΔⵠ[a][b] = {}), ⲆⲆΔⵠ[a][b].r === undefined)) {
        var e = Ih;
        if (h(a - Kg, b) && ⲆⲆΔⵠ[a - er][b] !== Iq && ⲆⲆΔⵠ[a - 1][b].wtb !== undefined) {
          e += zd;
        }
        if (h(a, b - er) && ⲆⲆΔⵠ[a][b - 1] !== undefined && ⲆⲆΔⵠ[a][b - 1].wtb !== undefined) {
          e += wo;
        }
        if (h(a, b + 1) && ⲆⲆΔⵠ[a][b + 1] !== undefined && ⲆⲆΔⵠ[a][b + Lu].wtb !== Gn) {
          e += 16;
        }
        if (h(a + _h, b) && ⲆⲆΔⵠ[a + sc][b] !== undefined && ⲆⲆΔⵠ[a + wh][b].wtb !== undefined) {
          e += 64;
        }
        if (h(a - 1, b - sc) && (e & 10) === th + il && ys !== ⲆⲆΔⵠ[a - bs][b - ck] && ⲆⲆΔⵠ[a - sc][b - Ni].wtb !== undefined) {
          e += Lu;
        }
        if (h(a - bs, b + 1) && (e & 18) === 16 + Ht && ⲆⲆΔⵠ[a - 1][b + 1] !== undefined && ⲆⲆΔⵠ[a - Ni][b + ig].wtb !== undefined) {
          e += Mu;
        }
        if (!!h(a + 1, b - 1) && !(~e & 72) && ⲆⲆΔⵠ[a + sl][b - 1] !== undefined && ⲆⲆΔⵠ[a + 1][b - 1].wtb !== Xl) {
          e += 32;
        }
        if (h(a + ig, b + Kg) && (e & q + 64) === fn + 64 && lh !== ⲆⲆΔⵠ[a + 1][b + Kg] && ⲆⲆΔⵠ[a + 1][b + 1].wtb !== undefined) {
          e += 128;
        }
        ⲆⲆΔⵠ[a][b].r = {};
        ⲆⲆΔⵠ[a][b].r.ⵠᐃⲆⵠΔⵠᐃ = e;
        ⲆⲆΔⵠ[a][b].r.ⵠⲆⵠⲆⵠᐃⲆ = d;
        ⲆⲆΔⵠ[a][b].r.ⵠⵠΔᐃ = ff.ⵠᐃⵠΔⲆ(c, yg * b + 50, a * 100 + 50) - 400;
        ⲆⲆΔⵠ[a][b].r.x = dg * b + 50;
        ⲆⲆΔⵠ[a][b].r.y = a * Lr + 50;
      }
    }
    function s(b) {
      for (var c = 0; c < 3; c++) {
        a(b, "s", c, 15);
      }
      for (c = 0; Z > c; c++) {
        a(b, "a", c, 1);
      }
      for (c = 0; Rn > c; c++) {
        a(b, "d", c, 1);
      }
      g(b);
    }
    function g(a) {
      var b = ff.ᐃᐃⵠᐃ[a];
      z(-Qn + Math.floor(b.y2 / I), -Ek + Math.floor(b.x2 / I), "s", 0, An);
      z(3 + Math.floor(b.y1 / 100), -sc + Math.floor(b.x2 / bn), "s", 0, yj);
      z(-3 + Math.floor(b.y2 / ea), Kg + Math.floor(b.x1 / 100), "s", 0, Rl);
      z(3 + Math.floor(b.y1 / 100), 1 + Math.floor(b.x1 / ok), "s", Ih, Ah);
    }
    function z(a, b, c, d, e) {
      if (a >= 0 && b >= 0 && a < ff.ΔⲆᐃᐃᐃ && b < ff.ΔⲆᐃⵠᐃ) {
        ⲆⲆΔⵠ = bx.ⲆⲆΔⵠ;
        if (ⲆⲆΔⵠ[a][b] === ys) {
          ⲆⲆΔⵠ[a][b] = {};
        }
        if (Iq !== ⲆⲆΔⵠ[a][b][c]) {
          return 0;
        } else {
          ⲆⲆΔⵠ[a][b][c] = [];
          ⲆⲆΔⵠ[a][b][c][d] = [{
            x: b * 100 + 50,
            y: a * 100 + 50
          }];
          if (Gt === e) {
            (function (a, b, c, d) {
              Nt.push([a, b, c, d]);
            })(c, d, a, b);
          }
          return bs;
        }
      }
    }
    function b(b, c) {
      (function (b, c) {
        var d = ff.ᐃᐃⵠᐃ[c];
        for (var e = 0, f = 0; f < b && e < 10000; e++) {
          var i = d.y1 + ff.ΔⲆⵠⵠⵠ.get() * d.ⵠΔⲆ;
          var j = d.x1 + ff.ΔⲆⵠⵠⵠ.get() * d.w;
          var k = Math.floor(i / yg);
          var m = Math.floor(j / 100);
          if (ff.ⵠᐃⵠΔⲆ(c, m * pn + 50, k * 100 + 50) >= 600) {
            for (var p = Ga, q = k - oe; sl === p && q <= k + eh; q++) {
              for (var t = m - 4; p === 1 && m + $j >= t; t++) {
                if (bx.ⲆⲆΔⵠ[q][t] !== undefined) {
                  p = 0;
                }
              }
            }
            if (p !== xq) {
              z(k, m, "la", f % oq, 0);
              f++;
            }
          }
        }
      })(c * 80, b);
      for (var d = tj; d < 3; d++) {
        a(b, "s", d, Math.floor($k * c));
      }
      for (d = 0; d < 3; d++) {
        a(b, "g", d, Math.floor(jq * c));
      }
      for (d = bu; d < 3; d++) {
        a(b, "re", d, Math.max(Gt, Math.floor(c * 1)), 0.2);
      }
      for (d = qu; d < 3; d++) {
        a(b, "a", d, Math.max(1, Math.floor(c * bq)));
      }
      g(b);
    }
    function d(b, c) {
      for (var d = Ah; Sg > d; d++) {
        a(b, "s", d, Math.floor(c * 18));
      }
      for (d = tj; d < rb; d++) {
        a(b, "f", d, Math.floor(c * 24));
      }
      for (d = 0; d < Ft; d++) {
        a(b, "d", d, Math.max(Ga, Math.floor(c * 2)), 0.3);
      }
      for (d = Qr; d < 3; d++) {
        a(b, "g", d, Math.floor(c * 6));
      }
      g(b);
    }
    function c(b, c) {
      for (var d = 0; d < 6; d++) {
        a(b, "t", d, Math.floor(c * 80));
      }
      for (d = Gk; eh > d; d++) {
        a(b, "b", d, Math.floor(c * 80));
      }
      for (d = gl; d < 3; d++) {
        a(b, "s", d, Math.floor(c * 50));
      }
      var e = [];
      for (d = qu; Ze > d; d++) {
        o(b, e);
      }
      x(b, e);
      e = [];
      a(b, "p", qu, Math.floor(c * 28));
      for (d = et; d < 3; d++) {
        a(b, "g", d, Math.floor(c * Bk));
      }
      for (d = Ih; d < Er; d++) {
        a(b, "d", d, Math.floor(fh * c));
      }
      for (d = 0; d < Qn; d++) {
        a(b, "a", d, Math.floor(c * 1));
      }
      for (d = 0; d < 3; d++) {
        a(b, "m", d, Math.floor(c * 1));
      }
      a(b, "a", Gg, Math.floor(Ga * c));
      g(b);
    }
    function m(b, c) {
      for (var d = 0; Z > d; d++) {
        a(b, "s", d, Math.floor(c * Vr));
      }
      for (d = 0; Ql > d; d++) {
        a(b, "m", d, Math.max(Ni, Math.floor(c * Ls)), 0.2);
      }
      a(b, "c", Gg, Math.floor(c * 36));
      var e = [];
      (function (b, c) {
        var d = ff.ᐃᐃⵠᐃ[b];
        var e = Math.floor(d.y1 / 100);
        var f = Math.floor(d.x1 / 100);
        var i = Math.floor(d.ⵠΔⲆ / 100);
        var j = Math.floor(d.w / mh);
        var a = e + Math.floor(i / 2);
        var k = f + Math.floor(j / Ht);
        for (var h = 0; h < 3; h++) {
          z(m = Math.floor(a - 3 + ff.ΔⲆⵠⵠⵠ.get() * 6), n = Math.floor(k - Xu + ff.ΔⲆⵠⵠⵠ.get() * 6), "plm", h, Ga);
        }
        for (h = 0; h < 80; h++) {
          var m;
          var n;
          if (z(m = Math.floor(a - hd + ff.ΔⲆⵠⵠⵠ.get() * oq), n = Math.floor(k - 3 + ff.ΔⲆⵠⵠⵠ.get() * 6), "wtb", 0, _h) === ig) {
            c.push([m, n, Ih]);
          }
        }
      })(b, e);
      x(b, e);
      e = [];
    }
    function p(a, b, c) {
      if (a[b]) {
        for (Wk = xq; a[b].length > Wk; Wk++) {
          if (a[b][Wk]) {
            for (ⵠΔΔΔ = yj; ⵠΔΔΔ < a[b][Wk].length; ⵠΔΔΔ++) {
              a[b][Wk][ⵠΔΔΔ].ΔᐃΔ = c;
              a[b][Wk][ⵠΔΔΔ].ⲆᐃⲆ = false;
              a[b][Wk][ⵠΔΔΔ].time = 0;
              a[b][Wk][ⵠΔΔΔ].angle = 0;
            }
          }
        }
      }
    }
    this.mode = ow.ⲆⵠⵠΔⵠ;
    this.ⵠⲆΔᐃⲆⲆᐃ = j;
    this.ΔΔⵠⵠᐃ = xq;
    this.ᐃⵠⲆΔⲆⲆΔ = 6;
    this.ⲆΔⵠⵠ = [];
    this.Δᐃⵠ = [];
    this.Δᐃⵠ[rw.ⵠΔΔⵠ] = [];
    this.Δᐃⵠ[rw.ⲆΔⵠΔᐃ] = [];
    this.Δᐃⵠ[rw.ΔᐃΔⲆⵠ] = [];
    this.Δᐃⵠ[rw.ⲆⲆᐃⵠᐃ] = [];
    this.Δᐃⵠ[rw.ᐃΔΔⵠΔ] = [];
    this.Δᐃⵠ[rw.ΔΔᐃΔΔ] = [];
    this.Δᐃⵠ[rw.ᐃⲆᐃᐃⲆ] = [];
    this.Δᐃⵠ[rw.ⵠᐃᐃΔΔ] = [];
    this.Δᐃⵠ[rw.ΔⲆᐃⲆᐃ] = [];
    this.Δᐃⵠ[rw.ⲆᐃⲆⵠᐃ] = [];
    this.Δᐃⵠ[rw.ⵠⲆΔΔⵠ] = [];
    this.Δᐃⵠ[rw.ᐃⲆᐃⵠⲆ] = [];
    this.Δᐃⵠ[rw.ⵠΔⵠⵠᐃ] = [];
    this.Δᐃⵠ[rw.ⲆᐃᐃΔⲆ] = [];
    this.Δᐃⵠ[rw.ⲆⲆⵠΔⲆ] = [];
    this.Δᐃⵠ[rw.ᐃⲆⵠᐃⵠ] = [];
    this.Δᐃⵠ[rw.ⵠΔᐃⵠⲆ] = [];
    this.Δᐃⵠ[rw.ΔᐃⲆΔᐃ] = [];
    this.Δᐃⵠ[rw.ᐃⲆᐃᐃΔ] = [];
    this.Δᐃⵠ[rw.ⲆᐃⲆⲆᐃ] = [];
    this.Δᐃⵠ[rw.ᐃⲆᐃᐃⵠ] = [];
    this.Δᐃⵠ[rw.ΔⵠΔⵠᐃ] = [];
    this.Δᐃⵠ[rw.ᐃᐃΔΔⲆ] = [];
    this.Δᐃⵠ[rw.ⲆⲆⲆᐃᐃⲆⵠ] = [];
    this.Δᐃⵠ[rw.ⲆᐃⲆΔᐃΔⲆ] = [];
    this.Δᐃⵠ[rw.ᐃⲆⵠⲆΔⵠΔ] = [];
    this.Δᐃⵠ[rw.ΔΔΔΔⵠⵠΔ] = [];
    this.Δᐃⵠ[rw.ⲆⲆⵠⲆΔ] = [];
    this.Δᐃⵠ[rw.ΔⵠⲆⵠΔᐃⲆ] = [];
    this.Δᐃⵠ[rw.ΔΔⵠⲆⲆ] = [];
    this.Δᐃⵠ[rw.ⲆⵠⲆⵠⵠ] = [];
    this.Δᐃⵠ[rw.ⲆΔⲆⵠⵠ] = [];
    this.Δᐃⵠ[rw.ᐃⲆᐃᐃᐃ] = [];
    this.Δᐃⵠ[rw.ΔⲆⵠⲆⲆ] = [];
    this.Δᐃⵠ[rw.ⲆⲆᐃΔⵠ] = [];
    this.Δᐃⵠ[rw.ᐃΔΔᐃⲆ] = [];
    this.Δᐃⵠ[rw.ᐃⵠⵠⵠⵠ] = [];
    this.Δᐃⵠ[rw.ⲆΔⵠΔⵠ] = [];
    this.Δᐃⵠ[rw.ΔᐃⲆᐃⵠ] = [];
    this.Δᐃⵠ[rw.ⵠⵠᐃⲆⲆ] = [];
    this.Δᐃⵠ[rw.ⵠΔΔΔᐃ] = [];
    this.Δᐃⵠ[rw.ᐃΔⲆΔΔ] = [];
    this.Δᐃⵠ[rw.ⲆΔΔⵠⲆ] = [];
    this.Δᐃⵠ[rw.ᐃⵠⵠⲆⵠ] = [];
    this.Δᐃⵠ[rw.ⵠᐃᐃᐃᐃ] = [];
    this.Δᐃⵠ[rw.ΔᐃΔⵠᐃ] = [];
    this.Δᐃⵠ[rw.ⲆᐃⵠⲆΔ] = [];
    this.Δᐃⵠ[rw.ΔΔⲆᐃᐃ] = [];
    this.Δᐃⵠ[rw.ⲆⲆⲆᐃΔ] = [];
    this.Δᐃⵠ[rw.ⵠᐃᐃⲆΔ] = [];
    this.Δᐃⵠ[rw.Ⲇⵠⵠⵠᐃ] = [];
    this.Δᐃⵠ[rw.ⵠΔΔᐃⲆ] = [];
    this.Δᐃⵠ[rw.ⲆⵠᐃⲆΔ] = [];
    this.Δᐃⵠ[rw.ⲆΔⲆⲆⲆ] = [];
    this.Δᐃⵠ[rw.ⵠΔᐃⵠⵠ] = [];
    this.Δᐃⵠ[rw.ΔΔⲆⵠᐃ] = [];
    this.Δᐃⵠ[rw.ΔΔⵠᐃⵠ] = [];
    this.Δᐃⵠ[rw.ᐃᐃⲆᐃⲆ] = [];
    this.Δᐃⵠ[rw.ᐃⲆⵠⲆⲆ] = [];
    this.Δᐃⵠ[rw.ⲆᐃΔᐃⵠ] = [];
    this.Δᐃⵠ[rw.ⲆⲆΔᐃⵠ] = [];
    this.Δᐃⵠ[rw.ᐃΔⲆⲆⵠ] = [];
    this.Δᐃⵠ[rw.ᐃᐃΔⲆⵠ] = [];
    this.Δᐃⵠ[rw.ⵠⲆⵠⲆⲆ] = [];
    this.Δᐃⵠ[rw.ⵠᐃⲆᐃⲆ] = [];
    this.Δᐃⵠ[rw.ⵠⲆᐃᐃΔ] = [];
    this.Δᐃⵠ[rw.ⲆⵠⲆⵠᐃ] = [];
    this.Δᐃⵠ[rw.ⵠⵠⲆⲆⲆ] = [];
    this.Δᐃⵠ[rw.ΔΔᐃΔⵠ] = [];
    this.Δᐃⵠ[rw.ΔΔᐃΔⲆ] = [];
    this.Δᐃⵠ[rw.ΔΔⲆⲆⲆ] = [];
    this.Δᐃⵠ[rw.ⵠⵠᐃⲆⵠ] = [];
    this.Δᐃⵠ[rw.ⲆⵠⲆΔⲆ] = [];
    this.Δᐃⵠ[rw.ⵠΔΔⵠΔ] = [];
    this.Δᐃⵠ[rw.ᐃⲆΔᐃⵠ] = [];
    this.Δᐃⵠ[rw.ⲆⵠΔᐃⵠ] = [];
    this.Δᐃⵠ[rw.ⲆⲆΔⵠⲆ] = [];
    this.Δᐃⵠ[rw.ⲆᐃⵠΔⵠ] = [];
    this.Δᐃⵠ[rw.ΔΔᐃⵠⵠ] = [];
    this.Δᐃⵠ[rw.ᐃⲆᐃⲆⲆ] = [];
    this.Δᐃⵠ[rw.ᐃΔΔᐃΔ] = [];
    this.Δᐃⵠ[rw.ΔΔΔⲆΔ] = [];
    this.Δᐃⵠ[rw.ⲆᐃⲆᐃΔ] = [];
    this.Δᐃⵠ[rw.ⵠⲆΔⵠᐃ] = [];
    this.Δᐃⵠ[rw.ΔⵠΔⵠⵠ] = [];
    this.Δᐃⵠ[rw.ΔⲆⲆΔⲆ] = [];
    this.Δᐃⵠ[rw.ⲆⵠⵠⵠⲆ] = [];
    this.Δᐃⵠ[rw.ⲆⲆᐃᐃⵠ] = [];
    this.ⵠΔΔⲆ = [];
    this.ΔⲆᐃⵠᐃ = 260;
    this.ΔⲆᐃᐃᐃ = 260;
    this.ᐃΔΔΔΔᐃⵠ = 100;
    this.ⵠⲆΔⲆⲆΔᐃ = ea;
    this.w = this.ΔⲆᐃⵠᐃ * this.ᐃΔΔΔΔᐃⵠ;
    this.ⵠΔⲆ = this.ⵠⲆΔⲆⲆΔᐃ * this.ΔⲆᐃᐃᐃ;
    this.ΔⲆⵠⵠⵠ = new Rk.ⵠᐃᐃⲆΔᐃᐃ();
    this.ᐃᐃⵠᐃ = [];
    this.ⵠⲆΔΔ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0, 1, Ah, _, ig);
    this.transition = false;
    this.ΔΔⲆⲆΔ = [];
    this.ⵠⵠⵠΔⲆ = Gg;
    this.ⲆⲆᐃᐃᐃⵠⵠ = 1;
    this.ⲆⵠΔᐃⵠⲆⲆ = fh;
    this.ⵠΔⲆᐃⵠⵠΔ = Er;
    this.ᐃⵠΔᐃⲆ = ge;
    this.ⲆᐃⲆⲆⵠⲆⵠ = 10;
    this.ΔΔⲆⲆΔ[this.ⵠⵠⵠΔⲆ] = {
      ⲆⲆⵠᐃᐃⲆⵠ: er,
      ᐃⵠⵠ: [19, 58, 43],
      ⵠⲆΔ: [4, 43, 48],
      ᐃΔⲆΔⵠ: ["#133a2b", "#042b30"]
    };
    this.ΔΔⲆⲆΔ[this.ᐃⵠΔᐃⲆ] = {
      ⲆⲆⵠᐃᐃⲆⵠ: Ah,
      ᐃⵠⵠ: [11, 106, 132],
      ⵠⲆΔ: [9, 55, 63],
      ᐃΔⲆΔⵠ: ["#0B6A84", "#09373F"]
    };
    this.ΔΔⲆⲆΔ[this.ⲆⲆᐃᐃᐃⵠⵠ] = {
      ⲆⲆⵠᐃᐃⲆⵠ: 0,
      ᐃⵠⵠ: [235, 242, 240],
      ⵠⲆΔ: [19, 97, 103],
      ᐃΔⲆΔⵠ: ["#EBF2F0", "#136167"]
    };
    this.ΔΔⲆⲆΔ[this.ⲆⵠΔᐃⵠⲆⲆ] = {
      ⵠⲆΔ: [3, 28, 30],
      ᐃΔⲆΔⵠ: ["#2D2017", "#031C1E"],
      ᐃⵠⵠ: [45, 32, 23],
      ⲆⲆⵠᐃᐃⲆⵠ: 0
    };
    this.ΔΔⲆⲆΔ[this.ⵠΔⲆᐃⵠⵠΔ] = {
      ⲆⲆⵠᐃᐃⲆⵠ: Rl,
      ⵠⲆΔ: [24, 61, 60],
      ᐃΔⲆΔⵠ: ["#4A4A4A", "#183D3C"],
      ᐃⵠⵠ: [74, 74, 74]
    };
    this.ΔΔⲆⲆΔ[this.ⲆᐃⲆⲆⵠⲆⵠ] = {
      ᐃⵠⵠ: [235, 216, 166],
      ⵠⲆΔ: [9, 61, 56],
      ᐃΔⲆΔⵠ: ["#EBD8A6", "#093D38"],
      ⲆⲆⵠᐃᐃⲆⵠ: 0
    };
    this.ᐃⲆΔᐃⲆΔⲆ = function (a, b, c, d, e, f) {
      this.x1 = bn * b;
      this.y1 = Ps * c;
      this.w = d * ma;
      this.ⵠΔⲆ = e * 100;
      this.x2 = (b + d) * 100;
      this.y2 = (c + e) * 100;
      this.ⲆⲆΔ = a;
      this.ᐃⲆⵠ = f === undefined ? 15 : f;
    };
    this.ⲆᐃⵠᐃΔ = -1000000;
    this.ᐃᐃᐃⵠⵠ = this.ⲆᐃⵠᐃΔ;
    this.ⲆⵠᐃⲆⲆ = this.ⲆᐃⵠᐃΔ;
    this.ΔⵠΔᐃᐃ = this.ⲆᐃⵠᐃΔ;
    this.ΔᐃΔⲆΔᐃΔ = this.ⲆᐃⵠᐃΔ;
    this.ΔⲆⲆᐃⲆᐃⲆ = this.ⲆᐃⵠᐃΔ;
    this.ᐃΔᐃⲆⵠ = this.ⲆᐃⵠᐃΔ;
    this.ⵠⵠΔⲆᐃΔⵠⵠᐃ = function (b) {
      var c = b.r.x;
      var d = b.r.y;
      var e = Math.floor(d / 100);
      var f = Math.floor(c / bn);
      b.ᐃᐃᐃⵠⵠ = ff.ⲆᐃⵠᐃΔ;
      b.ⲆⵠᐃⲆⲆ = ff.ⲆᐃⵠᐃΔ;
      b.ΔⵠΔᐃᐃ = ff.ⲆᐃⵠᐃΔ;
      b.ΔᐃΔⲆΔᐃΔ = ff.ⲆᐃⵠᐃΔ;
      b.ᐃΔᐃⲆⵠ = ff.ⲆᐃⵠᐃΔ;
      b.ⵠⵠⵠⲆᐃᐃⲆ = ff.ⲆᐃⵠᐃΔ;
      for (var g = sb; ff.ᐃⵠΔᐃⲆ !== ff.ᐃᐃⵠᐃ[g].ⲆⲆΔ; g++) {
        if (ff.ⵠⵠⵠΔⲆ === ff.ᐃᐃⵠᐃ[g].ⲆⲆΔ) {
          var h = ff.ⵠᐃⵠΔⲆ(g, c, d);
          b.ΔᐃΔⲆΔᐃΔ = Math.max(b.ΔᐃΔⲆΔᐃΔ, h);
          if (h > 0 && ff.ᐃᐃΔⲆⵠⵠⵠΔⵠ(g, c, d) === Co) {
            b.ⵠⵠⵠⲆᐃᐃⲆ = 1;
          }
        } else if (ff.ⲆⲆᐃᐃᐃⵠⵠ === ff.ᐃᐃⵠᐃ[g].ⲆⲆΔ) {
          b.ᐃᐃᐃⵠⵠ = Math.max(b.ᐃᐃᐃⵠⵠ, ff.ⵠᐃⵠΔⲆ(g, c, d));
        } else if (ff.ᐃᐃⵠᐃ[g].ⲆⲆΔ === ff.ⲆᐃⲆⲆⵠⲆⵠ) {
          b.ⲆⵠᐃⲆⲆ = Math.max(b.ⲆⵠᐃⲆⲆ, ff.ⵠᐃⵠΔⲆ(g, c, d));
        } else if (ff.ⲆⵠΔᐃⵠⲆⲆ === ff.ᐃᐃⵠᐃ[g].ⲆⲆΔ) {
          b.ΔⵠΔᐃᐃ = Math.max(b.ΔⵠΔᐃᐃ, ff.ⵠᐃⵠΔⲆ(g, c, d));
        } else if (ff.ⵠΔⲆᐃⵠⵠΔ === ff.ᐃᐃⵠᐃ[g].ⲆⲆΔ) {
          b.ᐃΔᐃⲆⵠ = Math.max(b.ᐃΔᐃⲆⵠ, ff.ⵠᐃⵠΔⲆ(g, c, d));
        }
      }
      if (bx.ⲆⲆΔⵠ[e][f].iblk) {
        b.ⵠⵠⵠⲆᐃᐃⲆ = 1;
      }
      if (ff.ⲆΔⲆⵠⲆᐃⲆⲆΔ(f, e)) {
        b.ΔⲆⲆᐃⲆᐃⲆ = b.ⲆᐃⵠᐃΔ;
      } else if (bx.ⲆⲆΔⵠ[e][f].wtb || b.ᐃᐃᐃⵠⵠ < 0 && qu > b.ΔⵠΔᐃᐃ && b.ΔᐃΔⲆΔᐃΔ < 0 && b.ⵠⵠⵠⲆᐃᐃⲆ < 0 && b.ᐃΔᐃⲆⵠ < An && b.ⲆⵠᐃⲆⲆ < et) {
        b.ΔⲆⲆᐃⲆᐃⲆ = 1;
      } else {
        b.ΔⲆⲆᐃⲆᐃⲆ = b.ⲆᐃⵠᐃΔ;
      }
    };
    this.ᐃⵠΔΔΔⵠᐃΔΔ = function (a, b) {
      ff.ᐃᐃᐃⵠⵠ = ff.ⲆᐃⵠᐃΔ;
      ff.ⲆⵠᐃⲆⲆ = ff.ⲆᐃⵠᐃΔ;
      ff.ΔⵠΔᐃᐃ = ff.ⲆᐃⵠᐃΔ;
      ff.ᐃΔᐃⲆⵠ = ff.ⲆᐃⵠᐃΔ;
      ff.ΔᐃΔⲆΔᐃΔ = ff.ⲆᐃⵠᐃΔ;
      for (var c = 0; ff.ᐃⵠΔᐃⲆ !== ff.ᐃᐃⵠᐃ[c].ⲆⲆΔ; c++) {
        if (ff.ᐃᐃⵠᐃ[c].ⲆⲆΔ === ff.ⵠⵠⵠΔⲆ) {
          ff.ΔᐃΔⲆΔᐃΔ = Math.max(ff.ΔᐃΔⲆΔᐃΔ, ff.ⵠᐃⵠΔⲆ(c, a, b));
        } else if (ff.ⲆⲆᐃᐃᐃⵠⵠ === ff.ᐃᐃⵠᐃ[c].ⲆⲆΔ) {
          ff.ᐃᐃᐃⵠⵠ = Math.max(ff.ᐃᐃᐃⵠⵠ, ff.ⵠᐃⵠΔⲆ(c, a, b));
        } else if (ff.ⲆᐃⲆⲆⵠⲆⵠ === ff.ᐃᐃⵠᐃ[c].ⲆⲆΔ) {
          ff.ⲆⵠᐃⲆⲆ = Math.max(ff.ⲆⵠᐃⲆⲆ, ff.ⵠᐃⵠΔⲆ(c, a, b));
        } else if (ff.ⲆⵠΔᐃⵠⲆⲆ === ff.ᐃᐃⵠᐃ[c].ⲆⲆΔ) {
          ff.ΔⵠΔᐃᐃ = Math.max(ff.ΔⵠΔᐃᐃ, ff.ⵠᐃⵠΔⲆ(c, a, b));
        } else if (ff.ᐃᐃⵠᐃ[c].ⲆⲆΔ === ff.ⵠΔⲆᐃⵠⵠΔ) {
          ff.ᐃΔᐃⲆⵠ = Math.max(ff.ᐃΔᐃⲆⵠ, ff.ⵠᐃⵠΔⲆ(c, a, b));
        }
      }
      if (ff.ᐃᐃᐃⵠⵠ < qu && ff.ᐃΔᐃⲆⵠ < 0 && An > ff.ΔᐃΔⲆΔᐃΔ && ff.ᐃΔᐃⲆⵠ < yj && Ah > ff.ⲆⵠᐃⲆⲆ) {
        ff.ΔⲆⲆᐃⲆᐃⲆ = Ga;
      } else {
        ff.ΔⲆⲆᐃⲆᐃⲆ = ff.ⲆᐃⵠᐃΔ;
      }
    };
    this.ᐃᐃΔⲆⵠⵠⵠΔⵠ = function (a, b, c) {
      var d = ff.ᐃᐃⵠᐃ[a];
      var e = 0;
      ᐃΔⲆΔ = d.x1 + 30 + (d.ᐃⲆⵠ & ow.ⲆΔΔⲆΔ ? Gk : 150);
      var f = b - ᐃΔⲆΔ;
      if ((d.ᐃⲆⵠ & ow.ⲆΔΔⲆΔ) > 0 && f > An && f < 320) {
        e = 1;
      }
      ᐃⲆΔⲆ = d.y1 + 250 + (d.ᐃⲆⵠ & ow.ᐃᐃᐃⲆⵠ ? sb : 150);
      f = c - ᐃⲆΔⲆ;
      if ((d.ᐃⲆⵠ & ow.ᐃᐃᐃⲆⵠ) > bu && Gk < f && f < 320) {
        e = sl;
      }
      ⵠΔⵠᐃ = d.x2 + 80 + (d.ᐃⲆⵠ & ow.ᐃⵠⵠΔⵠ ? 0 : -200);
      f = ⵠΔⵠᐃ - b;
      if (Qr < (d.ᐃⲆⵠ & ow.ᐃⵠⵠΔⵠ) && f > 0 && f < 320) {
        e = 1;
      }
      ΔⲆⵠⵠ = d.y2 - 200 + ((d.ᐃⲆⵠ & ow.ᐃᐃⲆᐃⵠ) === tj ? -200 : Gg);
      f = ΔⲆⵠⵠ - c;
      if ((d.ᐃⲆⵠ & ow.ᐃᐃⲆᐃⵠ) > 0 && Gk < f && f < 320) {
        e = Co;
      }
      if (ᐃΔⲆΔ <= b && ⵠΔⵠᐃ >= b && ᐃⲆΔⲆ <= c && c <= ΔⲆⵠⵠ) {
        return e;
      } else {
        return 0;
      }
    };
    this.ⵠᐃⵠΔⲆ = function (a, b, c) {
      var d = ff.ᐃᐃⵠᐃ[a];
      ᐃΔⲆΔ = d.x1 + 30;
      ᐃⲆΔⲆ = d.y1 + 250;
      ⵠΔⵠᐃ = d.x2 + 80;
      ΔⲆⵠⵠ = d.y2 - 200;
      if (b >= ᐃΔⲆΔ && b <= ⵠΔⵠᐃ && c >= ᐃⲆΔⲆ && c <= ΔⲆⵠⵠ) {
        return Math.min(b - ᐃΔⲆΔ, ⵠΔⵠᐃ - b, c - ᐃⲆΔⲆ, ΔⲆⵠⵠ - c);
      }
      var e = -1000000;
      if (b - ᐃΔⲆΔ < Ah) {
        e = Math.max(e, b - ᐃΔⲆΔ);
      } else if (ⵠΔⵠᐃ - b < sb) {
        e = Math.max(e, ⵠΔⵠᐃ - b);
      }
      ΔⵠⵠⵠⵠⲆΔ = -1000000;
      if (c < ᐃⲆΔⲆ || c > ΔⲆⵠⵠ) {
        if (c - ᐃⲆΔⲆ < 0) {
          ΔⵠⵠⵠⵠⲆΔ = Math.max(ΔⵠⵠⵠⵠⲆΔ, c - ᐃⲆΔⲆ);
        } else {
          ΔⵠⵠⵠⵠⲆΔ = Math.max(ΔⵠⵠⵠⵠⲆΔ, ΔⲆⵠⵠ - c);
        }
        e = e !== -1000000 && ΔⵠⵠⵠⵠⲆΔ !== -1000000 ? Math.min(e, ΔⵠⵠⵠⵠⲆΔ) : ΔⵠⵠⵠⵠⲆΔ;
      }
      return e;
    };
    this.ᐃΔⲆⲆΔⵠᐃ = function (b, c, d) {
      var e = d;
      var f = c;
      z(e, f, "isl", b, sc);
      for (var g = 0; g < Og; g++) {
        for (var h = An; h < Cs; h++) {
          z(e - h, f - g, "iblk", 0);
          z(e + h, f - g, "iblk", 0);
          z(e + h, f + g, "iblk", 0);
          z(e - h, f + g, "iblk", Rl);
        }
      }
      if (b === 0) {
        for (g = 0; qo > g; g++) {
          z(e - g, f - cq, "iblk", 0);
          z(e + g, f - Qt, "iblk", 0);
          z(e - g, f + 4, "iblk", 0);
          z(e + g, f + Oa, "iblk", 0);
        }
        for (g = 0; g < Ou; g++) {
          z(e - 3, f + g, "iblk", 0);
          z(e + 3, f + g, "iblk", Aa);
          z(e - Jd, f - g, "iblk", 0);
          z(e + 3, f - g, "iblk", 0);
        }
        z(e - 2, f - cq, "iblk", qb);
        z(e - 3, f - 3, "iblk", bu);
        z(e + On, f + Og, "iblk", 0);
        z(e + Xu, f + Sg, "iblk", 0);
      } else if (b === 1) {
        for (g = 0; g < 3; g++) {
          z(e - g, f - $j, "iblk", xq);
          z(e + g, f - 4, "iblk", Ah);
          z(e - g, f + eh, "iblk", gl);
          z(e + g, f + 4, "iblk", 0);
        }
        for (g = sb; g < oe; g++) {
          z(e - 3, f + g, "iblk", Gg);
          z(e + 3, f + g, "iblk", Ah);
          z(e - dl, f - g, "iblk", 0);
          z(e + 3, f - g, "iblk", 0);
        }
      } else if (b === fh) {
        for (g = Qr; Nr > g; g++) {
          z(e - g, f - 4, "iblk", 0);
          z(e + g, f - fd, "iblk", 0);
          z(e - g, f + Dd, "iblk", 0);
          z(e + g, f + 4, "iblk", Md);
        }
        for (g = Aa; g < 3; g++) {
          z(e - Er, f + g, "iblk", 0);
          z(e + 3, f + g, "iblk", 0);
          z(e - Mh, f - g, "iblk", qu);
          z(e + 3, f - g, "iblk", 0);
        }
      }
    };
    this.ᐃᐃᐃⵠᐃΔⵠΔΔ = function (b) {
      for (var c = 0; ff.ᐃᐃⵠᐃ.length > c && b > Md; c++) {
        var d = ff.ᐃᐃⵠᐃ[c];
        if (d.ⲆⲆΔ === ff.ᐃⵠΔᐃⲆ && d.w > 1800 && d.ⵠΔⲆ > 1000) {
          var f = Math.floor((d.x1 + d.w / 2) / og);
          var g = Math.floor((d.y1 + d.ⵠΔⲆ / jg) / pn);
          ff.ᐃΔⲆⲆΔⵠᐃ(b % 3, f, g);
          for (var h = 0; h < 3; h++) {
            var j = g - 2 + Math.floor(ff.ΔⲆⵠⵠⵠ.get() * Qt);
            var k = f - Qn + Math.floor(ff.ΔⲆⵠⵠⵠ.get() * 6);
            if (bx.ⲆⲆΔⵠ[j][k].s === undefined) {
              z(j, k, "plm", h);
            }
            j = g - bq + Math.floor(Oa * ff.ΔⲆⵠⵠⵠ.get());
            k = f - 3 + Math.floor(ff.ΔⲆⵠⵠⵠ.get() * 6);
            if (bx.ⲆⲆΔⵠ[j][k].plm === undefined) {
              z(j, k, "s", h);
            }
          }
          j = g - 2 + Math.floor(ff.ΔⲆⵠⵠⵠ.get() * 4);
          k = f - rb + Math.floor(ff.ΔⲆⵠⵠⵠ.get() * 6);
          if (E === bx.ⲆⲆΔⵠ[j][k].plm && E === bx.ⲆⲆΔⵠ[j][k].s) {
            z(j, k, "p", Ih, Ga);
          }
          b--;
        }
      }
    };
    this.ᐃᐃᐃΔⵠⵠⲆⲆΔ = function (h) {
      ff.ΔⲆⵠⵠⵠ.ᐃⲆⲆᐃⵠ(h);
      var j = qu;
      while (Ls) {
        if (++j > 10000) {
          return;
        }
        ff.ᐃᐃⵠᐃ = [];
        if (ff.ΔΔⵠⵠᐃ === Ih && (ff.mode === ow.ᐃΔⵠᐃᐃ || ow.ⵠⲆⲆⵠΔ === ff.mode || ow.ⲆⵠⵠΔⵠ === ff.mode)) {
          ff.ΔΔⵠⵠᐃ = Wr;
        }
        if (ow.ΔΔᐃᐃᐃ === ff.mode) {
          ff.ᐃᐃⵠᐃ.push(new ff.ᐃⲆΔᐃⲆΔⲆ(ff.ⵠⵠⵠΔⲆ, X, 2, 80, 80, 15));
        } else if (ow.ᐃⵠΔΔⲆ === ff.mode) {
          ff.ᐃᐃⵠᐃ.push(new ff.ᐃⲆΔᐃⲆΔⲆ(ff.ⵠⵠⵠΔⲆ, bq, il, 150, 150, 15));
        } else if (ff.ΔΔⵠⵠᐃ !== Qr && ff.ΔΔⵠⵠᐃ.length > 0 && ff.ΔΔⵠⵠᐃ[0].length > iu) {
          for (var k = et; ff.ΔΔⵠⵠᐃ.length > k; k++) {
            if ((E = ff.ΔΔⵠⵠᐃ[k])[0] !== 0) {
              break;
            }
            var n = ow.ⵠⵠⵠΔⲆ;
            switch (E[1]) {
              case "FOREST":
                n = ff.ⵠⵠⵠΔⲆ;
                break;
              case "WINTER":
                n = ff.ⲆⲆᐃᐃᐃⵠⵠ;
                break;
              case "DESERT":
                n = ff.ⲆᐃⲆⲆⵠⲆⵠ;
                break;
              case "LAVA":
                n = ff.ⲆⵠΔᐃⵠⲆⲆ;
                break;
              case "DRAGON":
                n = ff.ⵠΔⲆᐃⵠⵠΔ;
            }
            ff.ᐃᐃⵠᐃ.push(new ff.ᐃⲆΔᐃⲆΔⲆ(n, E[qi], E[3], E[ge], E[Sj], E[6], E[Mn]));
          }
        } else if (Gk !== ff.ΔΔⵠⵠᐃ) {
          for (k = Gk; ff.ΔΔⵠⵠᐃ.length > k; k++) {
            var p = ff.ΔΔⵠⵠᐃ[k];
            n = ow.ⵠⵠⵠΔⲆ;
            switch (p[An]) {
              case "FOREST":
                n = ff.ⵠⵠⵠΔⲆ;
                break;
              case "WINTER":
                n = ff.ⲆⲆᐃᐃᐃⵠⵠ;
                break;
              case "DESERT":
                n = ff.ⲆᐃⲆⲆⵠⲆⵠ;
                break;
              case "LAVA":
                n = ff.ⲆⵠΔᐃⵠⲆⲆ;
                break;
              case "DRAGON":
                n = ff.ⵠΔⲆᐃⵠⵠΔ;
            }
            if (gl === e(n, p[1], p[ta], qb, Lc * (k + _))) {
              break;
            }
          }
          if (ff.ΔΔⵠⵠᐃ.length !== k) {
            continue;
          }
        }
        break;
      }
      ⲆᐃⵠΔⵠΔⵠ();
      var q = [];
      for (var l = sb; l < ff.ΔⲆᐃᐃᐃ; l++) {
        q[l] = new Array(ff.ΔⲆᐃⵠᐃ);
        for (var t = 0; ff.ΔⲆᐃⵠᐃ > t; t++) {
          q[l][t] = 0;
        }
      }
      for (l = Qr; l < ff.ᐃᐃⵠᐃ.length; l++) {
        for (var u = (p = ff.ᐃᐃⵠᐃ[l]).x2 / 100, v = p.y2 / 100, A = p.x1 / 100; A <= u; A++) {
          for (var B = p.y1 / Fs; v >= B; B++) {
            q[B][A] = Mg;
          }
        }
      }
      for (B = qb; B < ff.ΔⲆᐃᐃᐃ; B++) {
        for (A = xq; A < ff.ΔⲆᐃⵠᐃ; A++) {
          if (q[B][A] === 0) {
            i(q, A, B);
          }
        }
      }
      bx = {
        w: ff.ΔⲆᐃⵠᐃ,
        ⵠΔⲆ: ff.ΔⲆᐃᐃᐃ,
        ⲆⲆΔⵠ: []
      };
      for (l = 0; ff.ΔⲆᐃᐃᐃ > l; l++) {
        bx.ⲆⲆΔⵠ[l] = [];
      }
      if (ff.ΔΔⵠⵠᐃ !== 0 && ff.ΔΔⵠⵠᐃ.length > 0 && ff.ΔΔⵠⵠᐃ[sb].length > 3) {
        for (k = 0; ff.ΔΔⵠⵠᐃ.length > k; k++) {
          if ((E = ff.ΔΔⵠⵠᐃ[k])[1] === "isl") {
            ff.ᐃΔⲆⲆΔⵠᐃ(E[2], E[3], E[yn]);
          }
        }
      } else {
        ff.ᐃᐃᐃⵠᐃΔⵠΔΔ(ff.ᐃⵠⲆΔⲆⲆΔ);
      }
      if (Ah !== ff.ΔΔⵠⵠᐃ && ff.ΔΔⵠⵠᐃ.length > An && ff.ΔΔⵠⵠᐃ[Md].length > 3) {
        var D = [];
        for (k = Md; k < ff.ΔΔⵠⵠᐃ.length; k++) {
          var E;
          if ((E = ff.ΔΔⵠⵠᐃ[k])[0] === sc) {
            if (E[1] === "r") {
              z(E[3], E[2], "wtb", Ah, 1);
              D.push([E[3], E[2], E[ge]]);
            } else {
              z(E[cq], E[wi], E[1], E[Gl], E[5]);
            }
          }
        }
        x(bu, D);
        D = [];
      } else {
        for (l = qb; ff.ᐃᐃⵠᐃ.length > l; l++) {
          p = ff.ᐃᐃⵠᐃ[l];
          if (ow.ᐃⵠΔΔⲆ === ff.mode) {
            if (ff.ⵠⵠⵠΔⲆ === p.ⲆⲆΔ) {
              c(l, p.w / (yg * bn));
            }
          } else {
            if (p.ⲆⲆΔ === ff.ⵠⵠⵠΔⲆ) {
              r(l, p.w / (bn * 100));
            }
            if (ff.ⲆⵠΔᐃⵠⲆⲆ === p.ⲆⲆΔ) {
              b(l, p.w / (Fs * 100));
            }
            if (p.ⲆⲆΔ === ff.ⲆⲆᐃᐃᐃⵠⵠ) {
              d(l, p.w / 10000);
            }
            if (p.ⲆⲆΔ === ff.ⲆᐃⲆⲆⵠⲆⵠ) {
              m(l, p.w / (Oh * 100));
            }
            if (ff.ⵠΔⲆᐃⵠⵠΔ === p.ⲆⲆΔ) {
              s(l);
            }
          }
        }
      }
      Ot("isl", wh);
      Ot("wtb", 20);
      Ot("la", ck);
      Ot("c", 1);
      Ot("s", wh);
      Ot("f", wh);
      Ot("p", 1);
      Ot("g", 1);
      Ot("d", 1);
      Ot("a", 1);
      Ot("re", 1);
      Ot("m", 1);
      Nt = [];
      ff.ⲆᐃᐃᐃⲆΔⵠΔⲆ(bx);
    };
    this.ΔⲆΔΔ = z;
    this.ⲆᐃᐃᐃⲆΔⵠΔⲆ = function (b) {
      for (var c = 0; this.ΔⲆᐃᐃᐃ > c; c++) {
        for (var d = 0; this.ΔⲆᐃⵠᐃ > d; d++) {
          b.ⲆⲆΔⵠ[c] ||= [];
          if (b.ⲆⲆΔⵠ[c][d]) {
            var e = b.ⲆⲆΔⵠ[c][d];
            if (e.de && fg < e.de.length) {
              for (var f = Aa; e.de.length > f; f++) {
                if (e.de[f] && e.de[f].length > 0) {
                  e.de = e.de[f][0];
                  if (f >= 41 && f <= 49) {
                    e.de.scale = Lq;
                    var g = Math.floor(Lq * Math.random() + 1);
                    e.de.ⵠⲆⲆ = [];
                    for (var h = 0; h < g; h++) {
                      e.de.ⵠⲆⲆ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.PI * Math.random() * br,
                        ᐃᐃᐃᐃ: 41 + Math.floor(Math.random() * 9)
                      });
                    }
                  } else if (f >= 19 && f <= 26) {
                    e.de.scale = Hn;
                    g = Math.floor(Math.random() * 3 + 1);
                    e.de.ⵠⲆⲆ = [];
                    for (h = 0; g > h; h++) {
                      e.de.ⵠⲆⲆ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: qi * (Math.random() * Math.PI),
                        ᐃᐃᐃᐃ: 19 + Math.floor(Math.random() * 8)
                      });
                    }
                  } else if (f <= 15 || f >= 27 && f <= 40) {
                    e.de.angle = 0;
                    e.de.scale = Od;
                    e.de.ᐃᐃᐃᐃ = f;
                  } else {
                    e.de.angle = qi * (Math.random() * Math.PI);
                    e.de.scale = 1;
                    e.de.ᐃᐃᐃᐃ = f;
                  }
                }
              }
            }
            p(e, "p", new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, Ga, 1, 0, vq, 10));
            p(e, "t", new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, wh, _, 0, 10, Ea));
            p(e, "s", new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, Co, wh, 0, 10, 10));
            p(e, "g", new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 1, Co, 0, 10, Gh));
            p(e, "d", new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 1, 1, An, 10, 10));
            p(e, "b", new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Lk, _h, Kg, Rl, Vq, Gh));
            p(e, "f", new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 1, 1, An, 10, Ds));
            p(e, "sw", new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Wh, _h, 1, Fj, 10, 10));
            p(e, "gw", new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Tg, 1, 1, fg, 10, 10));
            p(e, "dw", new ᐃΔᐃⵠ.ᐃⵠⵠΔ(M, er, _, 0, Li, 10));
            p(e, "a", new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, Ni, 1, An, 10, 10));
            p(e, "cs", new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 1, sl, Gk, eb, vq));
            p(e, "plm", new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 1, Fb, Md, 10, eb));
            p(e, "re", new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 1, Ls, sb, Hb, Hb));
            p(e, "c", new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Lk, 1, _, tj, bg, Vq));
            p(e, "m", new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 1, 1, sb, Lc, hh));
          } else {
            b.ⲆⲆΔⵠ[c][d] = [];
          }
        }
      }
    };
    this.time = rs.ⲆᐃΔ;
    this.ᐃⵠⲆⵠⵠ = {
      ΔΔᐃⵠⲆ: 0,
      ᐃⲆⲆᐃⵠ: 0,
      translate: {
        y: 0,
        x: 0
      },
      now: Rl
    };
    this.ΔⲆⵠⵠΔΔⵠΔᐃ = function () {
      this.ⵠΔΔⲆ = [];
      this.Δᐃⵠ[rw.ⵠΔΔⵠ] = [];
      this.Δᐃⵠ[rw.ΔⲆⵠⲆⲆ] = [];
      this.Δᐃⵠ[rw.ⲆⲆᐃΔⵠ] = [];
      this.Δᐃⵠ[rw.ᐃΔΔᐃⲆ] = [];
      this.Δᐃⵠ[rw.ᐃⵠⵠⵠⵠ] = [];
      this.Δᐃⵠ[rw.ⲆΔⵠΔⵠ] = [];
      this.Δᐃⵠ[rw.ΔᐃⲆᐃⵠ] = [];
      this.Δᐃⵠ[rw.ⵠⵠᐃⲆⲆ] = [];
      this.Δᐃⵠ[rw.ⵠΔΔΔᐃ] = [];
      this.Δᐃⵠ[rw.ᐃΔⲆΔΔ] = [];
      this.Δᐃⵠ[rw.ⲆΔΔⵠⲆ] = [];
      this.Δᐃⵠ[rw.ΔΔᐃΔⵠ] = [];
      this.Δᐃⵠ[rw.ⵠᐃⲆᐃⲆ] = [];
      this.Δᐃⵠ[rw.ΔΔᐃΔⲆ] = [];
      this.Δᐃⵠ[rw.ΔΔⲆⲆⲆ] = [];
      this.Δᐃⵠ[rw.ⵠⵠᐃⲆⵠ] = [];
      this.Δᐃⵠ[rw.ⲆⵠⲆΔⲆ] = [];
      this.Δᐃⵠ[rw.ⵠΔΔⵠΔ] = [];
      this.Δᐃⵠ[rw.ᐃⲆΔᐃⵠ] = [];
      this.Δᐃⵠ[rw.ⲆⵠΔᐃⵠ] = [];
      this.Δᐃⵠ[rw.ⲆⲆΔⵠⲆ] = [];
      this.Δᐃⵠ[rw.ⲆᐃⵠΔⵠ] = [];
      this.Δᐃⵠ[rw.ΔΔᐃⵠⵠ] = [];
      this.Δᐃⵠ[rw.ᐃⲆᐃⲆⲆ] = [];
      this.Δᐃⵠ[rw.ᐃΔΔᐃΔ] = [];
      this.Δᐃⵠ[rw.ΔΔΔⲆΔ] = [];
      this.Δᐃⵠ[rw.ⲆᐃⲆᐃΔ] = [];
      this.Δᐃⵠ[rw.ⵠⲆΔⵠᐃ] = [];
      this.Δᐃⵠ[rw.ΔⵠΔⵠⵠ] = [];
      this.Δᐃⵠ[rw.ΔⲆⲆΔⲆ] = [];
      this.Δᐃⵠ[rw.ᐃⵠⵠⲆⵠ] = [];
      this.Δᐃⵠ[rw.ⵠᐃᐃᐃᐃ] = [];
      this.Δᐃⵠ[rw.ΔᐃΔⵠᐃ] = [];
      this.Δᐃⵠ[rw.ⲆᐃⵠⲆΔ] = [];
      this.Δᐃⵠ[rw.ΔΔⲆᐃᐃ] = [];
      this.Δᐃⵠ[rw.ⲆⲆⲆᐃΔ] = [];
      this.Δᐃⵠ[rw.ⵠᐃᐃⲆΔ] = [];
      this.Δᐃⵠ[rw.Ⲇⵠⵠⵠᐃ] = [];
      this.Δᐃⵠ[rw.ⵠΔΔᐃⲆ] = [];
      this.Δᐃⵠ[rw.ⲆⵠᐃⲆΔ] = [];
      this.Δᐃⵠ[rw.ⲆΔⲆⲆⲆ] = [];
      this.Δᐃⵠ[rw.ⵠΔᐃⵠⵠ] = [];
      this.Δᐃⵠ[rw.ΔΔⲆⵠᐃ] = [];
      this.Δᐃⵠ[rw.ΔΔⵠᐃⵠ] = [];
      this.Δᐃⵠ[rw.ᐃᐃⲆᐃⲆ] = [];
      this.Δᐃⵠ[rw.ᐃⲆⵠⲆⲆ] = [];
      this.Δᐃⵠ[rw.ⲆᐃΔᐃⵠ] = [];
      this.Δᐃⵠ[rw.ⲆⲆΔᐃⵠ] = [];
      this.Δᐃⵠ[rw.ᐃΔⲆⲆⵠ] = [];
      this.Δᐃⵠ[rw.ᐃᐃΔⲆⵠ] = [];
      this.Δᐃⵠ[rw.ⵠⲆⵠⲆⲆ] = [];
      this.Δᐃⵠ[rw.ⵠᐃⲆᐃⲆ] = [];
      this.Δᐃⵠ[rw.ⵠⲆᐃᐃΔ] = [];
      this.Δᐃⵠ[rw.ⲆⵠⲆⵠᐃ] = [];
      this.Δᐃⵠ[rw.ⵠⵠⲆⲆⲆ] = [];
      this.Δᐃⵠ[rw.ⲆΔⵠΔᐃ] = [];
      this.Δᐃⵠ[rw.ΔᐃΔⲆⵠ] = [];
      this.Δᐃⵠ[rw.ⲆⲆᐃⵠᐃ] = [];
      this.Δᐃⵠ[rw.ᐃΔΔⵠΔ] = [];
      this.Δᐃⵠ[rw.ΔΔᐃΔΔ] = [];
      this.Δᐃⵠ[rw.ᐃⲆᐃᐃⲆ] = [];
      this.Δᐃⵠ[rw.ⵠᐃᐃΔΔ] = [];
      this.Δᐃⵠ[rw.ΔⲆᐃⲆᐃ] = [];
      this.Δᐃⵠ[rw.ⲆᐃⲆⵠᐃ] = [];
      this.Δᐃⵠ[rw.ⵠⲆΔΔⵠ] = [];
      this.Δᐃⵠ[rw.ᐃⲆᐃⵠⲆ] = [];
      this.Δᐃⵠ[rw.ⵠΔⵠⵠᐃ] = [];
      this.Δᐃⵠ[rw.ⲆᐃᐃΔⲆ] = [];
      this.Δᐃⵠ[rw.ⲆⲆⵠΔⲆ] = [];
      this.Δᐃⵠ[rw.ᐃⲆⵠᐃⵠ] = [];
      this.Δᐃⵠ[rw.ⵠΔᐃⵠⲆ] = [];
      this.Δᐃⵠ[rw.ΔᐃⲆΔᐃ] = [];
      this.Δᐃⵠ[rw.ᐃⲆᐃᐃΔ] = [];
      this.Δᐃⵠ[rw.Ⲇⵠⵠᐃᐃ] = [];
      this.Δᐃⵠ[rw.ΔⵠᐃⵠᐃΔΔ] = [];
      this.Δᐃⵠ[rw.ⲆᐃⲆⲆᐃ] = [];
      this.Δᐃⵠ[rw.ᐃⲆᐃᐃⵠ] = [];
      this.Δᐃⵠ[rw.ΔⵠΔⵠᐃ] = [];
      this.Δᐃⵠ[rw.ᐃᐃΔΔⲆ] = [];
      this.Δᐃⵠ[rw.ⲆⲆⲆᐃᐃⲆⵠ] = [];
      this.Δᐃⵠ[rw.ⲆᐃⲆΔᐃΔⲆ] = [];
      this.Δᐃⵠ[rw.ᐃⲆⵠⲆΔⵠΔ] = [];
      this.Δᐃⵠ[rw.ΔΔΔΔⵠⵠΔ] = [];
      this.Δᐃⵠ[rw.ⲆⲆⵠⲆΔ] = [];
      this.Δᐃⵠ[rw.ΔⵠⲆⵠΔᐃⲆ] = [];
      this.Δᐃⵠ[rw.ΔΔⵠⲆⲆ] = [];
      this.Δᐃⵠ[rw.ⲆⵠⲆⵠⵠ] = [];
      this.Δᐃⵠ[rw.ⲆΔⲆⵠⵠ] = [];
      this.Δᐃⵠ[rw.ᐃⲆᐃᐃᐃ] = [];
      this.Δᐃⵠ[rw.ⲆⵠⵠⵠⲆ] = [];
      this.Δᐃⵠ[rw.ⲆⲆᐃᐃⵠ] = [];
    };
    this.ⵠⵠΔΔⲆⲆⲆΔᐃ = function (a) {
      if (this.ⵠΔΔⲆ[a]) {
        ᐃΔΔᐃ = this.ⵠΔΔⲆ[a].type;
        this.ⵠΔΔⲆ[a] = null;
        for (var b = this.Δᐃⵠ[ᐃΔΔᐃ], c = 0; b.length > c; c++) {
          if (b[c].ΔᐃᐃΔ == a) {
            b.splice(c, er);
            return;
          }
        }
      }
    };
    this.ⲆΔᐃⲆⲆⵠᐃⵠⲆ = function (a, b) {
      for (var c = 0; this.Δᐃⵠ[rw.ⵠᐃⲆᐃⲆ].length > c; c++) {
        var d = this.Δᐃⵠ[rw.ⵠᐃⲆᐃⲆ][c];
        if (b === Math.floor(d.x / 100) && Math.floor(d.y / 100) === a) {
          return sl;
        }
      }
      return fg;
    };
    this.ⲆΔⲆⵠⲆᐃⲆⲆΔ = function (a, b) {
      for (var c = bu; this.Δᐃⵠ[rw.ΔΔᐃΔⵠ].length > c; c++) {
        var d = this.Δᐃⵠ[rw.ΔΔᐃΔⵠ][c];
        if (a == Math.floor(d.x / pn) && Math.floor(d.y / cl) == b) {
          return true;
        }
      }
      return Wh;
    };
    this.Ⲇᐃⵠⵠⵠ = function (j) {
      for (var e = An; e < j.length; e++) {
        ᐃΔⲆⵠ = j[e];
        if (ᐃΔⲆⵠ.ᐃⲆⵠⵠⵠΔᐃ != ᐃΔⲆⵠ.angle) {
          var q = Math.PI * 2;
          ᐃΔⲆⵠ.angle = (ᐃΔⲆⵠ.angle + q) % q;
          ᐃΔⲆⵠ.ᐃⲆⵠⵠⵠΔᐃ = (ᐃΔⲆⵠ.ᐃⲆⵠⵠⵠΔᐃ + q) % q;
          if (ᐃΔⲆⵠ.ᐃⲆⵠⵠⵠΔᐃ != ᐃΔⲆⵠ.angle) {
            var B = ᐃΔⲆⵠ.ᐃⲆⵠⵠⵠΔᐃ - ᐃΔⲆⵠ.angle;
            var D = Math.abs(B);
            if (Math.PI < D) {
              D = Math.PI * 2 - D;
            }
            var E = hx * (ow.ⵠⲆᐃᐃΔᐃⲆ * (D / Math.PI * 3));
            if (B > Math.PI) {
              ᐃΔⲆⵠ.angle -= E;
            } else if (B < -Math.PI) {
              ᐃΔⲆⵠ.angle += E;
            } else if (et > B) {
              ᐃΔⲆⵠ.angle -= E;
            } else {
              ᐃΔⲆⵠ.angle += E;
            }
            ᐃΔⲆⵠ.angle = (ᐃΔⲆⵠ.angle + q) % q;
            if (E > Math.abs(ᐃΔⲆⵠ.angle - ᐃΔⲆⵠ.ᐃⲆⵠⵠⵠΔᐃ)) {
              ᐃΔⲆⵠ.angle = ᐃΔⲆⵠ.ᐃⲆⵠⵠⵠΔᐃ;
            }
          }
        }
        Math.floor(ᐃΔⲆⵠ.r.y / 100);
        Math.floor(ᐃΔⲆⵠ.r.x / mh);
        if (ᐃΔⲆⵠ.x != ᐃΔⲆⵠ.r.x || ᐃΔⲆⵠ.r.y != ᐃΔⲆⵠ.y) {
          if (ᐃΔⲆⵠ.action & lw.IDLE) {
            ᐃΔⲆⵠ.action -= lw.IDLE;
          }
          ᐃΔⲆⵠ.action |= lw.ᐃᐃᐃᐃⵠᐃⲆ;
          var F = ᐃΔᐃⵠ.ΔⲆᐃⲆⵠᐃΔ(ᐃΔⲆⵠ, ᐃΔⲆⵠ.r) + Math.PI;
          var G = ᐃΔⲆⵠ.ⵠⲆᐃⵠⲆ * hx;
          var H = ᐃΔᐃⵠ.ΔⲆⵠⵠⲆᐃΔ(G, F);
          if (ᐃΔᐃⵠ.ⵠⵠⲆⵠⵠⵠⵠ(H) < ᐃΔᐃⵠ.ⵠⵠⲆⵠⵠⵠⵠ(ᐃΔᐃⵠ.ᐃⲆⵠΔᐃΔⲆ(ᐃΔⲆⵠ, ᐃΔⲆⵠ.r))) {
            ᐃΔᐃⵠ.ΔᐃⲆⵠⵠⵠΔ(ᐃΔⲆⵠ, H);
          } else {
            if (ᐃΔⲆⵠ.action & lw.ᐃᐃᐃᐃⵠᐃⲆ) {
              ᐃΔⲆⵠ.action -= lw.ᐃᐃᐃᐃⵠᐃⲆ;
            }
            ᐃΔⲆⵠ.action |= lw.IDLE;
            ᐃΔᐃⵠ.ΔΔⵠΔⵠΔΔ(ᐃΔⲆⵠ.r, ᐃΔⲆⵠ);
          }
        }
        if (ᐃΔⲆⵠ.ᐃⵠⵠΔⲆ) {
          var I = ᐃΔⲆⵠ.bubbles;
          if ((M = I.length) === 0 || M < rs.ⲆΔΔΔᐃⵠᐃ && I[M - bs].Δᐃᐃᐃᐃ < 0.95) {
            I.push({
              id: Math.floor(Math.random() * ᐃΔ[540][0].length),
              x: Math.floor(ᐃΔⲆⵠ.x + Math.random() * 80 - 40),
              y: Math.floor(ᐃΔⲆⵠ.y + Math.random() * 80 - 40),
              Δᐃᐃᐃᐃ: 1
            });
          }
          for (var J = gl; J < M; J++) {
            I[J].Δᐃᐃᐃᐃ = Math.max(Md, I[J].Δᐃᐃᐃᐃ - hx);
          }
          for (J = 0; J < M; J++) {
            if (I[J].Δᐃᐃᐃᐃ === Rl) {
              I.splice(J, er);
              break;
            }
          }
        }
        var K = Ih;
        if (ᐃΔⲆⵠ.ⲆⲆᐃᐃ && pf.ⲆⵠΔᐃΔ) {
          var L = ᐃΔⲆⵠ.ⲆⲆⲆⵠⲆ;
          var M = L.length;
          if (ᐃΔⲆⵠ.ΔⲆⲆᐃⲆᐃⲆ > gl && ᐃΔⲆⵠ.ⲆᐃᐃⲆᐃ !== 227 && ᐃΔⲆⵠ.ⲆᐃᐃⲆᐃ !== 228 && ᐃΔⲆⵠ.ⲆᐃᐃⲆᐃ !== 230 && ᐃΔⲆⵠ.ⲆᐃᐃⲆᐃ !== 229 && ᐃΔⲆⵠ.ⲆᐃᐃⲆᐃ !== 91 && !ᐃΔⲆⵠ.ᐃⵠⵠΔⲆ && (K = 1, M === Aa || rs.ΔⵠᐃⲆᐃᐃᐃ < ᐃΔᐃⵠ.ⵠⵠΔᐃ(L[M - Co], ᐃΔⲆⵠ))) {
            var N = -ᐃΔⲆⵠ.angle;
            var O = pq * (Math.cos(N) * 45);
            var Q = Math.sin(N) * 45 * pq;
            L.push({
              x: ᐃΔⲆⵠ.x + O,
              y: ᐃΔⲆⵠ.y + Q,
              r: 8,
              alpha: 0.8
            });
            L.push({
              x: ᐃΔⲆⵠ.x - O,
              y: ᐃΔⲆⵠ.y - Q,
              r: wo,
              alpha: 0.8
            });
            L.push({
              x: ᐃΔⲆⵠ.x,
              y: ᐃΔⲆⵠ.y,
              r: 24,
              alpha: ck
            });
          }
          for (J = Gg; M > J; J++) {
            L[J].alpha = Math.max(0, L[J].alpha - hx / 2.2);
            L[J].r += hx * Pn;
          }
          if (L.length > 0 && et === L[0].alpha) {
            L.splice(Rl, 1);
          }
          var R = ᐃΔⲆⵠ.ⵠΔⵠᐃⵠ;
          M = R.length;
          var S = -Kg;
          var U = Math.max(0, Math.sign(ᐃΔⲆⵠ.ⵠⵠⵠⲆᐃᐃⲆ));
          var V = Math.max(0, Math.sign(ᐃΔⲆⵠ.ᐃᐃᐃⵠⵠ));
          Math.max(bu, Math.sign(ᐃΔⲆⵠ.ⲆⵠᐃⲆⲆ));
          var W = Math.max(0, Math.sign(ᐃΔⲆⵠ.ΔⵠΔᐃᐃ));
          var Y = Math.max(0, Math.sign(ᐃΔⲆⵠ.ᐃΔᐃⲆⵠ));
          if (bu < ᐃΔⲆⵠ.ⵠⵠⵠⲆᐃᐃⲆ || Aa < ᐃΔⲆⵠ.ⲆⵠᐃⲆⲆ) {
            S = 602;
          } else if (ᐃΔⲆⵠ.ᐃΔᐃⲆⵠ > 0) {
            S = 680;
          } else if (ᐃΔⲆⵠ.ᐃᐃᐃⵠⵠ > 0) {
            S = 475;
          } else if (ᐃΔⲆⵠ.ΔⵠΔᐃᐃ > 0) {
            S = 476;
          }
          if (ᐃΔⲆⵠ.ⲆᐃᐃⲆᐃ === 225 && (U | V | W | Y) == 1) {
            S = 228;
            var Z = ᐃΔⲆⵠ.ΔⲆⵠⲆΔ - Math.PI / 2;
            var _ = ua;
            var aa = qh;
            var ba = rs.ⵠΔᐃⵠᐃⲆΔ;
          } else if (ᐃΔⲆⵠ.ⲆᐃᐃⲆᐃ === 239 && bd === (U | V | W | Y)) {
            S = 249;
            Z = ᐃΔⲆⵠ.ΔⲆⵠⲆΔ - Math.PI / 2;
            _ = 21;
            aa = Qe;
            ba = rs.ⵠΔᐃⵠᐃⲆΔ;
          } else if (ᐃΔⲆⵠ.ⲆᐃᐃⲆᐃ === 226 && bd === (U | V | W | Y)) {
            S = 234;
            Z = ᐃΔⲆⵠ.ΔⲆⵠⲆΔ - Math.PI / Gl;
            var ca = Math.random() * 50;
            _ = 10 + ca;
            aa = Gg + ca;
            ba = rs.ⵠΔᐃⵠᐃⲆΔ * 0.9;
          } else {
            Z = ᐃΔⲆⵠ.angle;
            _ = 15;
            aa = 11;
            ba = rs.ⵠΔᐃⵠᐃⲆΔ;
          }
          if (ᐃΔⲆⵠ.ⲆᐃᐃⲆᐃ === 227 || ᐃΔⲆⵠ.ⲆᐃᐃⲆᐃ === 228 || ᐃΔⲆⵠ.ⲆᐃᐃⲆᐃ === 91 || ᐃΔⲆⵠ.ⲆᐃᐃⲆᐃ === 229 || ᐃΔⲆⵠ.ⲆᐃᐃⲆᐃ === 230 || ᐃΔⲆⵠ.ᐃⵠⵠΔⲆ) ;else if (ᐃΔⲆⵠ.ⲆᐃᐃⲆᐃ === 224) {
            if (M === Qr || rs.ⲆⲆΔᐃᐃᐃⲆ < ᐃΔᐃⵠ.ⵠⵠΔᐃ(R[M - ig], ᐃΔⲆⵠ)) {
              R.push({
                x: ᐃΔⲆⵠ.x,
                y: ᐃΔⲆⵠ.y,
                angle: ᐃΔⲆⵠ.ΔⲆⵠⲆΔ,
                alpha: 1,
                id: 226
              });
            }
          } else if (S != -1 && K === 0 && (xq === M || ba < ᐃΔᐃⵠ.ⵠⵠΔᐃ(R[M - 1], ᐃΔⲆⵠ))) {
            ᐃΔⲆⵠ.ⵠᐃⵠΔⵠΔⵠ++;
            if (Fb < Math.abs(ᐃΔⲆⵠ.x - ᐃΔⲆⵠ.r.x) && Math.abs(ᐃΔⲆⵠ.y - ᐃΔⲆⵠ.r.y) > 1) {
              if (ᐃΔⲆⵠ.x < ᐃΔⲆⵠ.r.x && ᐃΔⲆⵠ.r.y < ᐃΔⲆⵠ.y || ᐃΔⲆⵠ.r.x < ᐃΔⲆⵠ.x && ᐃΔⲆⵠ.y < ᐃΔⲆⵠ.r.y) {
                if (ᐃΔⲆⵠ.ⵠᐃⵠΔⵠΔⵠ % X) {
                  O = pq * -aa;
                  Q = pq * -aa;
                } else {
                  Q = pq * aa;
                  O = aa * pq;
                }
              } else if (ᐃΔⲆⵠ.ⵠᐃⵠΔⵠΔⵠ % 2) {
                O = aa * pq;
                Q = pq * -aa;
              } else {
                Q = aa * pq;
                O = -aa * pq;
              }
            } else if (ᐃΔⲆⵠ.ⵠᐃⵠΔⵠΔⵠ % tk) {
              O = pq * (Math.cos(Z) * _);
              Q = pq * (_ * Math.sin(Z));
            } else {
              O = -Math.cos(Z) * _ * pq;
              Q = -Math.sin(Z) * _ * pq;
            }
            R.push({
              x: ᐃΔⲆⵠ.x + O,
              y: ᐃΔⲆⵠ.y + Q,
              angle: Z + Math.PI / On,
              alpha: sc,
              id: S
            });
          }
          for (J = xq; M > J; J++) {
            if (R[J].id === 226) {
              R[J].alpha = Math.max(0, R[J].alpha - hx * 1.5);
            } else {
              R[J].alpha = Math.max(Rl, R[J].alpha - hx / 2.85);
            }
          }
          if (R.length > 0 && R[0].alpha === 0) {
            R.splice(Ah, Kg);
          }
        }
      }
    };
    this.ⲆᐃⲆ = function () {
      this.Ⲇᐃⵠⵠⵠ(this.Δᐃⵠ[rw.ⵠΔΔⵠ]);
      this.Ⲇᐃⵠⵠⵠ(this.Δᐃⵠ[rw.ΔᐃΔⲆⵠ]);
      this.Ⲇᐃⵠⵠⵠ(this.Δᐃⵠ[rw.ⲆⲆᐃⵠᐃ]);
      this.Ⲇᐃⵠⵠⵠ(this.Δᐃⵠ[rw.ᐃΔΔⵠΔ]);
      this.Ⲇᐃⵠⵠⵠ(this.Δᐃⵠ[rw.ΔΔᐃΔΔ]);
      this.Ⲇᐃⵠⵠⵠ(this.Δᐃⵠ[rw.ᐃⲆᐃᐃⲆ]);
      this.Ⲇᐃⵠⵠⵠ(this.Δᐃⵠ[rw.ⵠᐃᐃΔΔ]);
      this.Ⲇᐃⵠⵠⵠ(this.Δᐃⵠ[rw.ΔⲆᐃⲆᐃ]);
      this.Ⲇᐃⵠⵠⵠ(this.Δᐃⵠ[rw.ⲆᐃⲆⵠᐃ]);
      this.Ⲇᐃⵠⵠⵠ(this.Δᐃⵠ[rw.ⵠⲆΔΔⵠ]);
      this.Ⲇᐃⵠⵠⵠ(this.Δᐃⵠ[rw.ᐃⲆᐃᐃᐃ]);
      this.Ⲇᐃⵠⵠⵠ(this.Δᐃⵠ[rw.ⲆᐃᐃΔⲆ]);
      this.Ⲇᐃⵠⵠⵠ(this.Δᐃⵠ[rw.ⲆⲆⵠΔⲆ]);
      this.Ⲇᐃⵠⵠⵠ(this.Δᐃⵠ[rw.ᐃⲆⵠᐃⵠ]);
      this.Ⲇᐃⵠⵠⵠ(this.Δᐃⵠ[rw.ⵠΔᐃⵠⲆ]);
      this.Ⲇᐃⵠⵠⵠ(this.Δᐃⵠ[rw.ΔᐃⲆΔᐃ]);
      this.Ⲇᐃⵠⵠⵠ(this.Δᐃⵠ[rw.ᐃⲆᐃᐃΔ]);
      this.Ⲇᐃⵠⵠⵠ(this.Δᐃⵠ[rw.Ⲇⵠⵠᐃᐃ]);
      this.Ⲇᐃⵠⵠⵠ(this.Δᐃⵠ[rw.ΔⵠᐃⵠᐃΔΔ]);
      this.Ⲇᐃⵠⵠⵠ(this.Δᐃⵠ[rw.ⲆᐃⲆⲆᐃ]);
      this.Ⲇᐃⵠⵠⵠ(this.Δᐃⵠ[rw.ΔⵠΔⵠᐃ]);
      this.Ⲇᐃⵠⵠⵠ(this.Δᐃⵠ[rw.ᐃⲆᐃⵠⲆ]);
      this.Ⲇᐃⵠⵠⵠ(this.Δᐃⵠ[rw.ⵠΔⵠⵠᐃ]);
      this.Ⲇᐃⵠⵠⵠ(this.Δᐃⵠ[rw.ᐃⲆᐃᐃⵠ]);
    };
    this.ΔⵠΔⵠ = [];
    this.ΔⵠΔⵠ[620] = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 1, 1.05, Fb, 0.008, 0.008);
    this.ΔⵠΔⵠ[619] = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 1, 1.08, 1, 0.006, 0.006);
    this.ΔⵠΔⵠ[694] = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(ml, Gt, 1.02, 1, 0.008, 0.008);
    this.ΔⵠΔⵠ[695] = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 1, 1.08, Kg, 0.006, 0.006);
    this.ⲆΔⲆᐃᐃ = [];
    this.ⲆΔⲆᐃᐃ[0] = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.1, 1, Gk, 0.6, 0.6);
    this.ⲆΔⲆᐃᐃ[Mg] = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.4, Kg, 0, 0.6, 0.6);
    this.ⲆΔⲆᐃᐃ[2] = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(ml, 0.3, 1, 0, 0.6, 0.6);
    this.ⲆΔⲆᐃᐃ[3] = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(vn, 0.8, Gt, 0, 0.6, 0.6);
    this.ⲆΔⲆᐃᐃ[4] = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.3, Ga, Gg, 0.6, 0.6);
    this.ⲆΔⲆᐃᐃ[un] = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Eq, 0.8, _h, 0, 0.6, 0.6);
    this.ⲆΔⲆᐃᐃ[6] = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(ia, 0.5, 1, Qr, 0.6, 0.6);
    this.ⲆΔⲆᐃᐃ[Sq] = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.9, er, bu, 0.6, 0.6);
    this.ⲆΔⲆᐃᐃ[Hk] = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Tg, 0.6, bd, 0, 0.6, 0.6);
    this.ⲆΔⲆᐃᐃ[_l] = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Jn, 0.2, Fb, Ih, 0.6, 0.6);
    this.ⲆΔⲆᐃᐃ[Lc] = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.6, _h, sb, 0.6, 0.6);
    this.ⲆΔⲆᐃᐃ[11] = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(ds, 0.4, 1, sb, 0.6, 0.6);
    this.ⲆΔⲆᐃᐃ[ne] = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.8, 1, 0, 0.6, 0.6);
    this.ⲆΔⲆᐃᐃ[13] = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.2, 1, Ih, 0.6, 0.6);
    this.ⲆΔⲆᐃᐃ[Qs] = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(gh, 0.7, 1, 0, 0.6, 0.6);
  }
  function uw(b, c, d, e, f, i, j, a, k, h) {
    this.type = b;
    this.ⵠΔⲆᐃ = c;
    this.id = d;
    this.x = e;
    this.y = f;
    this.angle = i;
    this.ᐃⲆⵠⵠⵠΔᐃ = i;
    this.action = j;
    this.info = a;
    this.ᐃⵠΔⵠⵠ = h;
    this.r = {
      x: e,
      y: f
    };
    this.ⵠⲆᐃⵠⲆ = k;
    if (ff) {
      this.ΔᐃᐃΔ = c * ff.ⵠⲆΔᐃⲆⲆᐃ + d;
    }
    switch (b) {
      case rw.ⵠΔΔⵠ:
        this.ᐃᐃⲆⵠ = ff.ⲆΔⵠⵠ[this.ⵠΔⲆᐃ];
        this.ⲆⲆⲆⲆ = this.ᐃᐃⲆⵠ.ⲆⲆⲆⲆ;
        this.ᐃΔΔᐃⵠΔⲆ = this.ᐃᐃⲆⵠ.ᐃΔΔᐃⵠΔⲆ;
        this.ⵠⵠᐃᐃᐃ = this.ᐃᐃⲆⵠ.ⵠⵠᐃᐃᐃ;
        this.ΔΔΔΔⲆ = this.ᐃᐃⲆⵠ.ΔΔΔΔⲆ;
        this.ΔᐃΔⲆΔᐃΔ = -1000000;
        this.ΔⵠΔᐃᐃ = -1000000;
        this.ᐃᐃᐃⵠⵠ = -1000000;
        this.ⲆⵠᐃⲆⲆ = -1000000;
        this.ΔⲆⲆᐃⲆᐃⲆ = -1000000;
        this.ⵠⵠⵠⲆᐃᐃⲆ = -1000000;
        this.ᐃΔᐃⲆⵠ = -1000000;
        this.ⵠⵠᐃⲆΔ = ff.mode === ow.ΔΔᐃᐃᐃ && this.ⲆⲆⲆⲆ === ow.ⵠΔΔΔΔⵠᐃ || Lk;
        this.ᐃⵠΔΔⵠⲆΔ = ow.ᐃΔⵠᐃᐃ === ff.mode && this.ⲆⲆⲆⲆ === ow.ⵠⲆⵠⲆⵠⵠᐃ && bh;
        this.ᐃᐃⲆᐃΔⵠⲆ = !!this.ⵠⵠᐃⲆΔ && this.ᐃᐃⲆⵠ.ⲆΔᐃᐃⲆ === "  ";
        this.ⵠΔⵠᐃⵠ = [];
        this.ⵠⵠᐃᐃΔΔⲆ = 0;
        this.ⲆⲆᐃᐃ = true;
        this.ⵠᐃⵠΔⵠΔⵠ = 0;
        this.ⲆⵠⲆⵠⲆⲆⲆ = 0;
        this.ⲆⲆⲆⵠⲆ = [];
        this.r = {
          x: e,
          y: f
        };
        this.ⵠⲆⵠΔ = pv;
        this.ⵠⵠⲆⲆΔⵠΔ = jv;
        this.ΔⵠⵠⲆᐃ = xq;
        this.ΔⲆⵠⲆΔ = 0;
        this.ⵠⲆᐃΔⵠ = sb;
        this.ΔΔΔΔⲆΔⵠ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Jh, 0, Ih, -Math.PI / U, 0.5, Ek);
        this.ⲆⵠΔⲆΔ = 0;
        this.ⲆⲆⵠⵠΔΔΔ = 0;
        this.ΔᐃΔ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.6, 0.6, Fj, 5, iu);
        this.ⵠⲆⵠᐃᐃ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.6, 0.6, 0, 5, Ql);
        this.freeze = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(ja, 0.6, 0.6, bu, 5, Ft);
        this.ᐃᐃΔᐃⵠΔⵠ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(li, 0.6, 0.6, fg, 5, 3);
        this.ⵠΔᐃᐃΔⲆΔ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(true, 0, 2.25, -1.5, 3.75, 7.5);
        this.ᐃⵠᐃᐃⲆⲆⵠ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(true, Gk, 7.5, -3, 22.5, 33.75);
        this.attack = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, et, 0, -Math.PI / 3, 6, 9);
        this.ⲆⲆΔⲆⲆⵠᐃᐃΔ = gl;
        this.ⲆⵠΔⵠᐃⵠΔ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.6, 0.6, 0, 1, iu);
        this.ⲆⵠΔᐃⵠᐃΔ = this.ᐃᐃⲆᐃΔⵠⲆ ? new ᐃΔᐃⵠ.ᐃⵠⵠΔ(true, 0, 2.25, -1.5, 2.75, 5.5) : qb;
        this.ⲆΔⵠᐃΔⵠⲆ = 0;
        this.ⲆⲆᐃΔⲆⲆΔ = Gk;
        this.ᐃΔⲆⲆᐃΔΔ = [];
        this.ⵠⲆⲆΔⲆΔⲆ = [];
        this.text = [];
        this.label = [];
        this.ⲆᐃΔᐃΔᐃΔ = mv;
        this.ΔⲆᐃⵠⵠ = true;
        this.right = -1;
        this.ⲆᐃᐃⲆᐃ = -1;
        this.action = lw.IDLE;
        this.ΔΔΔΔΔᐃⲆ = ml;
        this.ⵠⲆᐃᐃⵠ = bu;
        this.ᐃⵠⵠΔⲆ = false;
        this.bubbles = [];
        this.ΔⲆⵠⵠᐃ = 0;
        this.ΔⵠⵠⵠⲆ = -1;
        this.ⲆᐃⲆ = function (a) {
          if (this.info & 32768) {
            this.ΔΔΔΔΔᐃⲆ = true;
            this.info = this.info & -32769;
          } else {
            this.ΔΔΔΔΔᐃⲆ = Jn;
          }
          if (this.info & 16384) {
            this.info = this.info & -16385;
            this.ΔⲆⵠⵠᐃ = Ni;
          } else {
            this.ΔⲆⵠⵠᐃ = qu;
          }
          this.ⵠⲆᐃᐃⵠ = Math.floor(this.info / 128);
          this.info -= this.ⵠⲆᐃᐃⵠ * 128;
          if (this.info === 7 || this.ᐃᐃⲆᐃΔⵠⲆ) {
            this.right = -1;
          } else {
            this.right = this.info;
          }
          this.ⵠⵠᐃᐃΔΔⲆ = ff.ⲆΔᐃⲆⲆⵠᐃⵠⲆ(Math.floor(this.r.y / I), Math.floor(this.r.x / 100));
          this.ⲆᐃᐃⲆᐃ = this.ᐃⵠΔⵠⵠ & 255;
          if (ow.ⲆⲆⲆᐃⲆΔΔᐃᐃ === this.right) {
            this.ᐃⵠⵠΔⲆ = true;
          } else {
            this.ᐃⵠⵠΔⲆ = false;
          }
          if (pw[this.right]) {
            this.ⵠᐃⲆΔⵠ = oh;
          } else {
            this.ⵠᐃⲆΔⵠ = false;
          }
          if (a & lw.ΔΔΔᐃⵠΔⲆ) {
            this.ⲆⵠΔⵠᐃⵠΔ.ⵠᐃᐃ = Ge;
            this.ⲆⵠΔⵠᐃⵠΔ.ᐃⲆⵠ = 0.6;
          } else if (a & lw.ΔΔΔⵠᐃ) {
            this.freeze.ⵠᐃᐃ = false;
            this.freeze.ᐃⲆⵠ = 0.6;
          } else if (a & lw.ⲆⵠΔᐃΔⲆΔ) {
            this.ⵠⲆⵠᐃᐃ.ⵠᐃᐃ = Jn;
            this.ⵠⲆⵠᐃᐃ.ᐃⲆⵠ = 0.6;
          }
          if (a & lw.ⲆⵠΔⲆⵠⵠᐃ) {
            this.ᐃᐃΔᐃⵠΔⵠ.ⵠᐃᐃ = false;
            this.ᐃᐃΔᐃⵠΔⵠ.ᐃⲆⵠ = 0.6;
          }
          if (a & lw.ᐃᐃⲆⲆ) {
            this.ΔᐃΔ.ⵠᐃᐃ = false;
            this.ΔᐃΔ.ᐃⲆⵠ = 0.6;
          }
          if (a & lw.ᐃΔⲆᐃᐃΔᐃ) {
            this.ⲆⲆΔⲆⲆⵠᐃᐃΔ = nw.ⵠΔⵠⵠᐃⲆⲆⵠΔ;
            if (gx.ᐃⵠⲆⵠΔ && -Fb !== this.ΔⵠⵠⵠⲆ) {
              gx.ⲆΔⵠⵠ[this.ΔⵠⵠⵠⲆ].ⵠᐃⵠⲆΔΔᐃⲆⵠ(ax[this.right]);
            }
          }
        };
        this.ⲆᐃⲆ();
        break;
      case rw.ⵠⵠⲆⲆⲆ:
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(hg, Co, 1, 0, 10, Gh),
          ⲆᐃⲆ: ja,
          angle: 0
        };
        this.ⵠⵠᐃΔᐃ = mp;
        this.ᐃᐃⲆⵠⲆ = $p;
        this.ΔᐃΔⲆᐃ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ΔΔᐃⲆⲆⵠΔ = fg;
        this.ⵠⵠⵠΔΔΔⵠ = 0;
        this.ⵠΔⵠΔⲆ = Wm;
        break;
      case rw.ⲆⵠⲆⵠᐃ:
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(ja, Ls, sl, 0, Bl, In),
          ⲆᐃⲆ: hg,
          angle: fg
        };
        this.ⵠⵠᐃΔᐃ = av;
        this.ᐃᐃⲆⵠⲆ = Np;
        this.ΔᐃΔⲆᐃ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, Co, 1.23, 1.18, 0.01, 0.01);
        this.ΔΔᐃⲆⲆⵠΔ = 0;
        this.ⵠⵠⵠΔΔΔⵠ = 0;
        break;
      case rw.ⲆⲆᐃΔⵠ:
      case rw.ᐃΔΔᐃⲆ:
        this.ⵠⵠᐃΔᐃ = fp;
        this.ᐃᐃⲆⵠⲆ = hv;
        this.ᐃⵠᐃⲆⵠ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Ge, 1, 1.03, 0.98, 0.3, 0.3);
        this.ᐃⲆᐃᐃ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, Ls, 1.23, 1.18, 0.01, 0.01);
        this.ΔᐃΔⲆᐃ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 1, Kg, 0, uj, F),
          ⲆᐃⲆ: false,
          angle: 0
        };
        break;
      case rw.ᐃⲆΔᐃⵠ:
        this.ⵠⵠᐃΔᐃ = Lp;
        this.ᐃᐃⲆⵠⲆ = jp;
        this.ᐃⲆᐃᐃ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Hj, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 1, 1, 0, Gh, 10),
          ⲆᐃⲆ: M,
          angle: 0
        };
        this.ΔΔⲆⲆ = [];
        for (var l = gl; l < 3; l++) {
          this.ΔΔⲆⲆ.push({
            ⵠⲆⵠΔ: wp,
            ΔⵠΔⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ΔΔⲆⲆ[Ah].x = this.x - 16.5;
        this.ΔΔⲆⲆ[0].y = this.y - 15.5;
        this.ΔΔⲆⲆ[yj].angle = this.angle;
        this.ΔΔⲆⲆ[1].x = this.x + 36;
        this.ΔΔⲆⲆ[1].y = this.y + 17;
        this.ΔΔⲆⲆ[ck].angle = this.angle;
        this.ΔΔⲆⲆ[Ht].x = this.x - 18.5;
        this.ΔΔⲆⲆ[jb].y = this.y + 39;
        this.ΔΔⲆⲆ[ta].angle = this.angle;
        break;
      case rw.ᐃⵠⵠⵠⵠ:
        this.ⵠⵠᐃΔᐃ = Tp;
        this.ᐃᐃⲆⵠⲆ = Mp;
        this.ᐃⲆᐃᐃ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Bo, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 1, Mg, Fj, lt, 10),
          ⲆᐃⲆ: false,
          angle: 0
        };
        this.ΔΔⲆⲆ = [];
        for (l = 0; l < 3; l++) {
          this.ΔΔⲆⲆ.push({
            ⵠⲆⵠΔ: bp,
            ΔⵠΔⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(ia, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ΔΔⲆⲆ[An].x = this.x - 16.5;
        this.ΔΔⲆⲆ[sb].y = this.y - 15.5;
        this.ΔΔⲆⲆ[1].x = this.x - 5.5;
        this.ΔΔⲆⲆ[1].y = this.y + 7.5;
        this.ΔΔⲆⲆ[2].x = this.x + 18;
        this.ΔΔⲆⲆ[2].y = this.y - ul;
        break;
      case rw.ᐃⲆᐃᐃⲆ:
        this.ⵠⲆⵠΔ = dp;
        this.ΔⵠΔⵠ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔᐃΔ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.6, 0.6, et, 5, 3);
        break;
      case rw.ΔΔᐃΔΔ:
        this.ⵠⲆⵠΔ = Vp;
        this.ΔⵠΔⵠ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Ge, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔᐃΔ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.6, 0.6, Gg, _j, Rn);
        break;
      case rw.ⵠᐃᐃΔΔ:
        this.ⵠⲆⵠΔ = _u;
        this.ΔⵠΔⵠ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(gh, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠΔⲆᐃⲆΔⵠ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Bo, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔⵠΔⲆᐃⵠᐃ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Hj, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔᐃΔ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Ge, 0.6, 0.6, 0, 5, 3);
        this.ⵠⲆⵠᐃᐃ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(ja, 0.6, 0.6, Rl, Yl, Ou);
        break;
      case rw.ᐃΔΔⵠΔ:
        this.ⵠⲆⵠΔ = Up;
        this.ΔⵠΔⵠ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(ds, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠΔⲆᐃⲆΔⵠ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔⵠΔⲆᐃⵠᐃ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(ia, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔᐃΔ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(M, 0.6, 0.6, 0, lu, 3);
        this.ⵠⲆⵠᐃᐃ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Tg, 0.6, 0.6, Ah, Ks, 3);
        break;
      case rw.ΔⵠΔⵠᐃ:
        this.ⵠⲆⵠΔ = ev;
        this.ΔⵠΔⵠ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Jh, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔᐃΔ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(vn, 0.6, 0.6, 0, Bh, 3);
        break;
      case rw.ⵠΔᐃⵠⲆ:
        this.ⵠⲆⵠΔ = yp;
        this.ΔⵠΔⵠ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
        this.ΔᐃΔ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.6, 0.6, qu, bt, Jd);
        break;
      case rw.ᐃⲆⵠᐃⵠ:
        this.ⲆΔⵠⵠⵠ = this.info & 15;
        this.ⲆⵠⲆⵠⲆⲆⲆ = this.ᐃⵠΔⵠⵠ & 1;
        this.ΔΔᐃⲆᐃⵠⵠ = tj;
        this.x = this.info;
        this.y = this.ᐃⵠΔⵠⵠ;
        this.ⵠⲆⵠΔ = Dp;
        this.ΔⵠΔⵠ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(ml, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
        break;
      case rw.ΔᐃΔⲆⵠ:
      case rw.ⲆⲆᐃⵠᐃ:
      case rw.ᐃⲆᐃᐃᐃ:
      case rw.ⲆᐃᐃΔⲆ:
      case rw.ΔᐃⲆΔᐃ:
      case rw.ᐃⲆᐃᐃΔ:
      case rw.ᐃⲆᐃⵠⲆ:
      case rw.ⵠΔⵠⵠᐃ:
      case rw.ⲆⲆⵠΔⲆ:
        this.ⵠⲆⵠΔ = yp;
        this.ΔⵠΔⵠ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔᐃΔ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Hj, 0.6, 0.6, 0, 5, 3);
        break;
      case rw.ⲆΔⲆⵠⵠ:
        this.ⵠⲆⵠΔ = pp;
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, Ls, 1, Gk, 10, hh),
          ⲆᐃⲆ: false,
          angle: Gg
        };
        break;
      case rw.ⲆⵠⲆⵠⵠ:
        this.ᐃᐃⲆⵠⲆ = qp;
        this.ⵠⲆⵠΔ = Fp;
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 1, 1, Gg, 10, Bl),
          ⲆᐃⲆ: false,
          angle: 0
        };
        this.up = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(M, 1, 1.03, 0.98, 0.1, 0.1);
        this.ⵠΔⲆᐃΔ = [];
        break;
      case rw.ⲆⵠⵠⵠⲆ:
        this.angle = Math.random() * Math.PI / 2;
      case rw.ΔΔⵠⲆⲆ:
      case rw.ΔⵠⲆⵠΔᐃⲆ:
        this.ⵠⲆⵠΔ = bv;
        this.ΔᐃΔ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.6, 0.6, Gk, 5, Ou);
        break;
      case rw.ⲆⲆⵠⲆΔ:
        this.ⵠⲆⵠΔ = Zp;
        this.ΔᐃΔ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(ds, 0.6, 0.6, Ah, Eg, 3);
        break;
      case rw.ᐃⲆᐃᐃⵠ:
        this.scale = 1;
        this.ⵠⲆⵠΔ = Pp;
        this.ΔⵠΔⵠ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Hj, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, Rl, 0, -Math.PI / S, 0.5, Mg);
        this.ΔᐃΔ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Zl, 0.6, 0.6, xq, 5, Lq);
        break;
      case rw.ΔⵠᐃⵠᐃΔΔ:
        this.ᐃΔⲆⵠΔ = 0;
        this.ᐃⲆᐃᐃ = [];
        this.ᐃΔⵠΔᐃⵠⲆ = 0;
        this.ΔⲆᐃᐃⲆᐃΔ = Jp;
        this.ⵠⲆⵠΔ = Qp;
        this.ΔⵠΔⵠ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(hg, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, yj, 0, -Math.PI / U, 0.5, 1);
        this.ΔᐃΔ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.6, 0.6, Fj, Bh, 3);
        break;
      case rw.Ⲇⵠⵠᐃᐃ:
        this.x = this.info;
        this.y = this.ᐃⵠΔⵠⵠ;
        this.scale = 1;
        this.ⲆⲆⵠᐃ = 0;
        this.ⵠⲆⵠΔ = Ep;
        this.ΔⵠΔⵠ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Bo, sb, yj, -Math.PI / 6, 0.5, _h);
        this.ΔᐃΔ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(M, 0.6, 0.6, xq, 5, Lq);
        break;
      case rw.ⵠⲆΔΔⵠ:
        this.x = this.info;
        this.y = this.ᐃⵠΔⵠⵠ;
        this.scale = 1;
        this.ⲆⲆⵠᐃ = Aa;
        this.ⵠⲆⵠΔ = Wp;
        this.ΔⵠΔⵠ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(tr, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ΔᐃΔ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.6, 0.6, gl, gs, 3);
        break;
      case rw.ⲆᐃⲆⵠᐃ:
        this.scale = 1;
        this.ⵠⲆⵠΔ = Hp;
        this.ΔⵠΔⵠ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Bo, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0, 0, -Math.PI / nl, 0.5, wh);
        this.ΔᐃΔ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.6, 0.6, et, 5, 3);
        break;
      case rw.ΔⲆᐃⲆᐃ:
        this.scale = wh;
        this.ⵠⲆⵠΔ = Cp;
        this.ΔⵠΔⵠ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, yj, et, -Math.PI / $q, 0.5, 1);
        this.ΔᐃΔ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Ge, 0.6, 0.6, Ih, 5, Qn);
        break;
      case rw.ⲆᐃⲆⲆᐃ:
        this.scale = 1;
        this.ⵠⲆⵠΔ = gv;
        this.ΔⵠΔⵠ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Bo, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, Qr, 0, -Math.PI / 6, 0.5, 1);
        this.ΔᐃΔ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.6, 0.6, Ah, lu, 3);
        break;
      case rw.ⲆΔⵠΔᐃ:
        this.ΔΔⲆⲆ = [];
        for (l = 0; l < 5; l++) {
          this.ΔΔⲆⲆ.push({
            ⵠⲆⵠΔ: bp,
            ΔⵠΔⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        switch (this.id % Ou) {
          case tj:
            this.ΔΔⲆⲆ[0].x = this.x - 20.5;
            this.ΔΔⲆⲆ[sb].y = this.y - 22.5;
            this.ΔΔⲆⲆ[sl].x = this.x - 35.5;
            this.ΔΔⲆⲆ[1].y = this.y + 7.5;
            this.ΔΔⲆⲆ[Gl].x = this.x + 7.5;
            this.ΔΔⲆⲆ[2].y = this.y - 30;
            this.ΔΔⲆⲆ[3].x = this.x + 22.5;
            this.ΔΔⲆⲆ[3].y = this.y;
            this.ΔΔⲆⲆ[aq].x = this.x - 7.5;
            this.ΔΔⲆⲆ[fd].y = this.y + 14.5;
            break;
          case 1:
            this.ΔΔⲆⲆ[yj].x = this.x - 30.5;
            this.ΔΔⲆⲆ[0].y = this.y - 22.5;
            this.ΔΔⲆⲆ[1].x = this.x - 15.5;
            this.ΔΔⲆⲆ[1].y = this.y + 7.5;
            this.ΔΔⲆⲆ[On].x = this.x + 15.5;
            this.ΔΔⲆⲆ[2].y = this.y - 30;
            this.ΔΔⲆⲆ[Er].x = this.x + 12.5;
            this.ΔΔⲆⲆ[3].y = this.y + 5;
            this.ΔΔⲆⲆ[ge].x = this.x - 40.5;
            this.ΔΔⲆⲆ[4].y = this.y + 14.5;
            break;
          case tk:
            this.ΔΔⲆⲆ[Ih].x = this.x - 20.5;
            this.ΔΔⲆⲆ[Ih].y = this.y - 20.5;
            this.ΔΔⲆⲆ[Fb].x = this.x - 35.5;
            this.ΔΔⲆⲆ[Ek].y = this.y + 15.5;
            this.ΔΔⲆⲆ[il].x = this.x + 7.5;
            this.ΔΔⲆⲆ[2].y = this.y - 17;
            this.ΔΔⲆⲆ[Z].x = this.x + 22.5;
            this.ΔΔⲆⲆ[Lq].y = this.y + Eg;
            this.ΔΔⲆⲆ[zt].x = this.x - 7.5;
            this.ΔΔⲆⲆ[oe].y = this.y + 1.5;
        }
        break;
      case rw.ⵠⵠᐃⲆⵠ:
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(M, 1, 1, 0, Bl, 10),
          ⲆᐃⲆ: Jh,
          angle: 0
        };
        this.ⵠⲆⵠΔ = Gp;
        this.ᐃⲆᐃᐃ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Jh, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⲆΔⵠⲆΔ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, bu, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
        break;
      case rw.ΔΔᐃⵠⵠ:
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Hj, Ni, Ga, fg, Lc, In),
          ⲆᐃⲆ: false,
          angle: 0
        };
        this.ⵠⲆⵠΔ = vp;
        this.ᐃⲆᐃᐃ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case rw.ⲆᐃⵠΔⵠ:
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(hg, 1, Gt, qb, In, 10),
          ⲆᐃⲆ: false,
          angle: 0
        };
        this.ⵠⲆⵠΔ = Bp;
        this.ᐃⲆᐃᐃ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Jh, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case rw.ⲆⵠΔᐃⵠ:
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 1, 1, An, eb, 10),
          ⲆᐃⲆ: false,
          angle: yj
        };
        this.ⵠⲆⵠΔ = Op;
        this.ᐃⲆᐃᐃ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Lk, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case rw.ⲆⵠⲆΔⲆ:
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 1, _, tj, 10, 10),
          ⲆᐃⲆ: false,
          angle: Md
        };
        this.ⵠⲆⵠΔ = Rp;
        this.ᐃⲆᐃᐃ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case rw.ⲆⲆΔⵠⲆ:
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Jh, 1, _, sb, 10, bg),
          ⲆᐃⲆ: false,
          angle: 0
        };
        this.ⵠⲆⵠΔ = up;
        this.ᐃⲆᐃᐃ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case rw.ⵠΔΔⵠΔ:
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 1, 1, bu, Hb, 10),
          ⲆᐃⲆ: false,
          angle: 0
        };
        this.ⵠⲆⵠΔ = zp;
        this.ᐃⲆᐃᐃ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(vn, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case rw.ᐃΔΔᐃΔ:
        this.ⵠⲆⵠΔ = kp;
        this.rotate = 0;
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 1, er, 0, eb, eb),
          ⲆᐃⲆ: Eq,
          angle: 0
        };
        break;
      case rw.ΔΔΔⲆΔ:
        this.ⵠⲆⵠΔ = cv;
        this.rotate = 0;
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(M, 1, 1, 0, Vq, F),
          ⲆᐃⲆ: false,
          angle: 0
        };
        break;
      case rw.ⲆᐃⲆᐃΔ:
        this.ⵠⲆⵠΔ = Ip;
        this.rotate = 0;
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, sc, 1, 0, 10, 10),
          ⲆᐃⲆ: ia,
          angle: qb
        };
        break;
      case rw.ⵠⲆΔⵠᐃ:
        this.ⵠⲆⵠΔ = Sp;
        this.rotate = bu;
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, _, 1, gl, 10, Ea),
          ⲆᐃⲆ: Hj,
          angle: 0
        };
        break;
      case rw.ΔⵠΔⵠⵠ:
        this.ⵠⲆⵠΔ = dv;
        this.rotate = sb;
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 1, 1, 0, bg, 10),
          ⲆᐃⲆ: li,
          angle: 0
        };
        break;
      case rw.ᐃⲆᐃⲆⲆ:
        this.ⵠⵠᐃΔᐃ = Yp;
        this.ᐃᐃⲆⵠⲆ = Xp;
        this.rotate = Ah;
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Lk, 1, Ls, qb, sd, vc),
          ⲆᐃⲆ: false,
          angle: sb
        };
        break;
      case rw.ΔΔᐃΔⲆ:
        this.ⵠⲆⵠΔ = Om;
        this.ΔⵠⵠⲆ = Math.floor(this.x / ba);
        this.Ⲇᐃ = Math.floor(this.y / 100);
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 1, Kg, Ah, 10, 10),
          ⲆᐃⲆ: false,
          angle: fg
        };
        this.opacity = Lu;
        this.ⵠΔⵠΔⲆ = Hm;
        break;
      case rw.ⲆⲆᐃᐃⵠ:
        this.ⵠⲆⵠΔ = Lm;
        this.ΔᐃΔⲆᐃ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(li, Ga, 1.15, sl, 0.3, 0.3);
        this.color = Aa;
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Jh, Gt, bs, Qr, iq, uj),
          ⲆᐃⲆ: false,
          angle: yj
        };
        break;
      case rw.ΔΔⲆⲆⲆ:
      case rw.ΔⲆⵠⲆⲆ:
      case rw.ⵠᐃⲆᐃⲆ:
      case rw.ΔⲆⲆΔⲆ:
      case rw.ⵠⲆⵠⲆⲆ:
        this.ⵠⲆⵠΔ = hp;
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(ia, 1, 1, et, 10, 10),
          ⲆᐃⲆ: Hj,
          angle: 0
        };
        break;
      case rw.ΔΔᐃΔⵠ:
        this.ⵠⲆⵠΔ = hp;
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Lk, Ek, 1, 0, hh, Bl),
          ⲆᐃⲆ: Ge,
          angle: 0
        };
        this.ⵠΔⵠΔⲆ = Hm;
        break;
      case rw.ᐃⵠⵠⲆⵠ:
      case rw.ⵠᐃᐃᐃᐃ:
      case rw.ΔᐃΔⵠᐃ:
      case rw.ⲆᐃⵠⲆΔ:
      case rw.ΔΔⲆᐃᐃ:
      case rw.ⲆⲆⲆᐃΔ:
      case rw.ⲆΔⵠΔⵠ:
      case rw.ΔᐃⲆᐃⵠ:
      case rw.ⵠⵠᐃⲆⲆ:
      case rw.ⵠΔΔΔᐃ:
      case rw.ᐃΔⲆΔΔ:
      case rw.ⲆΔΔⵠⲆ:
        this.ⵠⲆⵠΔ = hp;
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, Co, 1, Gg, Vq, bg),
          ⲆᐃⲆ: Bo,
          angle: 0
        };
        this.ⵠΔⵠΔⲆ = Wm;
        break;
      case rw.ⵠᐃᐃⲆΔ:
        this.ⵠⲆⵠΔ = op;
        this.opacity = 1;
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(ds, er, 1, tj, hh, 10),
          ⲆᐃⲆ: false,
          angle: et
        };
        var m = this.angle % (Math.PI / 2);
        if (m < Math.PI / 4) {
          this.angle -= m;
        } else {
          this.angle += Math.PI / 2 - m;
        }
        break;
      case rw.ᐃᐃΔΔⲆ:
        this.ⵠⲆⵠΔ = sp;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case rw.ⲆⲆⲆᐃᐃⲆⵠ:
        this.ⵠⲆⵠΔ = Km;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case rw.ⲆᐃⲆΔᐃΔⲆ:
        this.ⵠⲆⵠΔ = ip;
        this.angle = bq * (Math.PI * Math.random());
        break;
      case rw.ᐃⲆⵠⲆΔⵠΔ:
        this.ⵠⲆⵠΔ = Um;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case rw.ΔΔΔΔⵠⵠΔ:
        this.ⵠⲆⵠΔ = Xm;
        this.angle = Od * (Math.PI * Math.random());
        break;
      case rw.ⵠⲆᐃᐃΔ:
        this.ⲆᐃⲆ = function (a) {
          this.lock = this.info & 8192 ? 1 : qu;
          this.info = this.info & 8191;
          this.action = a;
        };
        this.ⵠⲆⵠΔ = ep;
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 1, Ek, Ih, 10, 10),
          ⲆᐃⲆ: false,
          angle: 0
        };
        this.lock = 0;
        this.ⲆᐃⲆ(this.action);
        break;
      case rw.ΔΔⵠᐃⵠ:
      case rw.ᐃᐃⲆᐃⲆ:
      case rw.ᐃⲆⵠⲆⲆ:
      case rw.ⲆᐃΔᐃⵠ:
      case rw.ⲆⲆΔᐃⵠ:
      case rw.ᐃΔⲆⲆⵠ:
      case rw.Ⲇⵠⵠⵠᐃ:
      case rw.ⵠΔΔᐃⲆ:
      case rw.ⲆⵠᐃⲆΔ:
      case rw.ⲆΔⲆⲆⲆ:
      case rw.ⵠΔᐃⵠⵠ:
      case rw.ΔΔⲆⵠᐃ:
        this.ⵠⲆⵠΔ = qm;
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, Fb, 1, qb, vq, 10),
          ⲆᐃⲆ: Tg,
          angle: Gk
        };
        this.ⵠΔⵠΔⲆ = Wm;
        break;
      case rw.ᐃᐃΔⲆⵠ:
        this.ⵠⵠᐃΔᐃ = fv;
        this.ⵠⲆⵠΔ = _p;
        this.ᐃᐃⲆⵠⲆ = xp;
        this.ᐃⲆᐃᐃ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, Fb, 1.23, 1.18, 0.02, 0.02);
        this.ΔᐃΔⲆᐃ = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Hj, er, 1.23, 1.18, 0.04, 0.04);
        this.ΔᐃΔ = {
          ⵠᐃⲆⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, Fb, 1, sb, uj, Bl),
          ⲆᐃⲆ: false,
          angle: 0
        };
        this.ⲆᐃⲆ = function (a) {
          this.action = a;
        };
    }
  }
  function vw(a, b, c, d, e) {
    Yj(yw, a, b, c, d, e);
    return ((202 + (tf(xw[0], xw[1], xw[2], xw[3], xw[4]) ^ tf(xw[0], xw[ck], xw[2], xw[Qn], xw[4]))) * 16807 + 0) % 2147483647;
  }
  function ww() {
    this.ⲆΔᐃᐃⲆ = "";
    this.ⲆⲆⲆⲆ = 0;
    this.ΔΔΔΔⲆ = 0;
    this.ΔⲆⵠⵠᐃ = sb;
    this.ᐃΔΔᐃⵠΔⲆ = 0;
    this.ⵠⵠᐃᐃᐃ = qu;
    this.ⲆⵠⲆᐃⵠ = Gk;
    this.ⲆⵠΔΔⲆ = 0;
    this.level = sb;
    this.label = null;
    this.ΔⵠᐃⵠᐃⲆΔ = null;
    this.ⵠⲆⲆⵠΔΔΔ = null;
    this.ΔᐃΔΔⵠ = vn;
    this.ⲆⲆΔⲆⵠ = 0;
  }
  let xw;
  let yw = Oq;
  const zw = sk;
  function Aw(a, b, c, d) {
    this.id = a;
    this.ⵠⲆᐃⵠⲆ = (a + 5) * 8;
    this.Δᐃᐃᐃᐃ = Do / 1366;
    this.x = b;
    this.y = c;
    this.c = Math.sin(d);
    this.ⵠⲆᐃᐃ = Math.cos(d);
    this.alpha = An;
  }
  function Bw() {
    Math.random();
    return "o";
  }
  function Cw() {
    Math.random();
    return "g";
  }
  function Dw() {
    Math.random();
    return "p";
  }
  function Bw() {
    Math.random();
    return "o";
  }
  function Ew() {
    Math.random();
    return "t";
  }
  function Fw() {
    Math.random();
    return "a";
  }
  function Gw() {
    Math.random();
    return "C";
  }
  function Ew() {
    Math.random();
    return "t";
  }
  function Hw() {
    this.ᐃⲆⲆᐃⵠ = function () {};
    this.ⵠⲆⵠΔⵠ = {
      ⵠΔⲆᐃ: 1,
      open: false,
      ⲆⵠⲆⵠΔ: Ga
    };
    this.ΔⲆᐃΔⲆ = {
      ⵠΔⲆᐃ: Ga,
      ⲆⵠⲆⵠΔ: -sl,
      open: Hj
    };
    this.ⲆⵠΔⵠ = {
      ⵠΔⲆᐃ: 1,
      ᐃᐃᐃⵠⵠΔⵠ: 0,
      ⵠΔᐃⵠΔ: Gg,
      ⲆⵠⲆⵠΔ: -1,
      open: ds
    };
    this.ⵠΔⲆⵠ = {
      ⲆΔⵠᐃᐃⲆⲆ: 0,
      ⵠⲆΔᐃΔΔᐃ: Gg,
      type: yj,
      ᐃᐃⲆⲆᐃᐃⲆ: Aa,
      ⵠΔⲆᐃ: 1,
      ⲆⵠⲆⵠΔ: -Fb,
      open: ja
    };
    this.ΔΔⵠⲆ = {
      ⲆⵠⲆⵠΔ: -1,
      open: Hj,
      ⵠΔⲆᐃ: 1,
      ΔⲆⲆΔΔⵠᐃ: An,
      ⵠΔᐃⵠΔ: An,
      ⲆΔⵠᐃᐃⲆⲆ: 0
    };
    this.sign = {
      ⲆⵠⲆⵠΔ: -ck,
      open: false
    };
    this.ⵠⲆΔⵠⵠ = {
      ΔⵠⲆΔ: 0,
      ⵠΔⲆᐃ: Ek,
      ⲆⵠⲆⵠΔ: -Mg,
      open: false
    };
    this.ᐃⵠⵠΔⲆ = {
      enabled: ja,
      ⵠⵠⵠⵠⵠ: -1,
      label: false,
      now: -_,
      ⵠⲆⵠΔ: lv
    };
    this.ⲆⵠⵠΔ = {
      id: -1,
      ΔⵠⲆΔ: 0,
      ⵠΔⲆᐃ: bs,
      ⲆⵠⲆⵠΔ: -sc,
      open: Lk,
      lock: gh,
      locked: false,
      ΔⲆᐃΔⵠⲆⲆ: vn,
      ⲆΔᐃᐃⵠⲆᐃ: Hj
    };
    this.ΔᐃΔΔⵠ = true;
    this.reconnect = {
      enabled: Jh,
      rotate: qb
    };
    this.key = ᐃΔᐃⵠ.ΔⲆΔᐃΔᐃⲆ("key", bj.location.href);
    var a = ᐃΔᐃⵠ.ΔⲆΔᐃΔᐃⲆ("egg", bj.location.href);
    if (a) {
      pf.ⲆⲆⲆⲆ = parseInt(a);
    }
    this.beta = bj.location.href.indexOf("http://starve.io/beta") === 0 ? 1 : bu;
    if (this.key && this.beta) {
      ⵠⲆⲆᐃ.set("starve_beta", this.key);
    } else if (this.beta) {
      this.key = ⵠⲆⲆᐃ.get("starve_beta");
    }
    this.ΔⵠⲆⲆΔ = ⵠⲆⲆᐃ.get("starve_token") ? ⵠⲆⲆᐃ.get("starve_token") : ᐃΔᐃⵠ.ΔⵠΔⲆⵠⵠΔ(nw.ΔᐃⲆⵠⲆⵠΔᐃΔ);
    bj.baguette();
    var b = bj.kot2;
    function c() {
      this.seed = 1;
      this.ΔⲆΔᐃΔⵠᐃ = Nj;
      this.ᐃⲆΔⵠΔⵠᐃ = iu;
      this.ⵠⲆⲆᐃΔⲆⵠⵠⲆ = 1;
      this.ΔⲆⵠᐃⲆΔⲆⲆⲆ = 2;
      this.ⵠΔΔᐃᐃᐃΔΔⵠ = 3;
      this.ⵠΔⲆᐃⲆΔΔ = function (a) {
        this.seed = Nr + Math.floor(ow.ᐃⵠⵠⵠⵠ * Math.random());
      };
      this.ᐃⵠⲆᐃᐃⲆⲆ = function (a) {
        this.ΔⲆΔᐃΔⵠᐃ = 2 + Math.floor(ow.ᐃⵠⵠⵠⵠ * Math.random());
      };
      this.ΔᐃΔΔⵠⵠΔ = function (a) {
        this.ᐃⲆΔⵠΔⵠᐃ = 2 + Math.floor(ow.ᐃⵠⵠⵠⵠ * Math.random());
      };
      this.ⲆᐃᐃΔᐃⵠⵠⵠΔ = function (a) {
        this.ⵠⲆⲆᐃΔⲆⵠⵠⲆ = 2 + Math.floor(Math.random() * ow.ᐃⵠⵠⵠⵠ);
      };
      this.ᐃᐃΔⵠᐃΔᐃᐃⲆ = function (a) {
        this.ΔⲆⵠᐃⲆΔⲆⲆⲆ = 2 + Math.floor(ow.ᐃⵠⵠⵠⵠ * Math.random());
      };
      this.ᐃᐃⲆⲆⵠΔⵠΔΔ = function (a) {
        this.ⵠΔΔᐃᐃᐃΔΔⵠ = Nj + Math.floor(Math.random() * ow.ᐃⵠⵠⵠⵠ);
      };
      this.ΔⵠᐃⵠⵠⲆΔ = function (c, d, e, f, i, j, k) {
        for (var a = Ek; k > a;) {
          var m = a * e % ᐃⲆᐃΔΔⵠᐃ;
          var n = ΔⲆᐃⵠⲆᐃⲆ[m];
          if (n < 0.1) {
            o += 50;
            a += 50;
          } else {
            var o = Math.floor(n * f + i);
            if (a > j && k > a) {
              var p = Math.random() > 0.5 ? hx * -10 : hx * F;
              var q = o * d;
              this.ΔⲆⲆΔⲆᐃⲆ[m] = Math.max(-ow.ᐃⲆᐃΔΔⵠⵠ, Math.min(ow.ᐃⲆᐃΔΔⵠⵠ, this.ΔⲆⲆΔⲆᐃⲆ[m] + p));
              this.ⵠⲆⵠⲆⲆⵠΔ[m] = Math.max(-ow.ⲆΔᐃΔΔⲆΔ, Math.min(ow.ⲆΔᐃΔΔⲆΔ, this.ⵠⲆⵠⲆⲆⵠΔ[m] + p));
              if (q > 0) {
                Mo.beginPath();
                Mo.arc(a + dx.ⲆΔⲆ.x + this.ⵠⲆⵠⲆⲆⵠΔ[m], c + this.ΔⲆⲆΔⲆᐃⲆ[m] - ow.ᐃⲆᐃΔΔⵠⵠ * 0.8, q, sb, nd * Math.PI);
                if (ff.transition) {
                  var r = ff.time ? 1 - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
                  Mo.fillStyle = Tv(83, 156, 160, 236, 247, 249, r);
                } else {
                  Mo.fillStyle = rs.ΔᐃⲆⲆᐃⵠⲆ[ff.time];
                }
                Mo.fill();
              }
            }
            a += o * 2;
          }
        }
      };
      this.ⵠΔᐃⵠⲆᐃᐃ = function (c, d, e, f, i, j, k) {
        for (var a = 1; a < k;) {
          var m = e * a % ᐃⲆᐃΔΔⵠᐃ;
          var n = ΔⲆᐃⵠⲆᐃⲆ[m];
          if (n < 0.1) {
            o += 50;
            a += 50;
          } else {
            var o = Math.floor(n * f + i);
            if (a > j && a < k) {
              var p = Math.random() > 0.5 ? hx * -10 : Vq * hx;
              var q = o * d;
              this.ᐃⲆⵠⵠⲆ[m] = Math.max(-ow.ᐃⲆᐃΔΔⵠⵠ, Math.min(ow.ᐃⲆᐃΔΔⵠⵠ, this.ᐃⲆⵠⵠⲆ[m] + p));
              this.ᐃⵠⲆΔΔ[m] = Math.max(-ow.ⲆΔᐃΔΔⲆΔ, Math.min(ow.ⲆΔᐃΔΔⲆΔ, this.ᐃⵠⲆΔΔ[m] + p));
              if (q > 0) {
                Mo.beginPath();
                Mo.arc(c + this.ᐃⲆⵠⵠⲆ[m] - ow.ᐃⲆᐃΔΔⵠⵠ * 0.8, a + dx.ⲆΔⲆ.y + this.ᐃⵠⲆΔΔ[m], q, yj, Math.PI * 2);
                if (ff.transition) {
                  var r = ff.time ? 1 - ff.ⵠⲆΔΔ.ᐃⲆⵠ : ff.ⵠⲆΔΔ.ᐃⲆⵠ;
                  Mo.fillStyle = Tv(83, 156, 160, 236, 247, 249, r);
                } else {
                  Mo.fillStyle = rs.ΔᐃⲆⲆᐃⵠⲆ[ff.time];
                }
                Mo.fill();
              }
            }
            a += o * 2;
          }
        }
      };
      this.ΔΔΔΔⵠⵠᐃⵠᐃ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        if ((h = -(d - ow.ΔᐃⵠᐃΔ - e - 2) / ow.ᐃⲆΔΔⵠᐃΔ) === 0) {
          this.ΔᐃΔΔⵠⵠΔ();
        }
        Mo.globalAlpha = ᐃΔᐃⵠ.ⵠⵠΔⲆᐃ(h);
        this.ΔⵠᐃⵠⵠⲆΔ(d, h, this.ᐃⲆΔⵠΔⵠᐃ, 18, Jg, f, g);
        Mo.globalAlpha = 1;
        var h = -(b - ow.ⲆᐃΔΔᐃ - e + 500) / ow.ⲆⵠⲆⲆⲆⲆⵠ;
        if (Md === h) {
          this.ⵠΔⲆᐃⲆΔΔ();
        }
        Mo.globalAlpha = ᐃΔᐃⵠ.ⵠⵠΔⲆᐃ(h);
        this.ΔⵠᐃⵠⵠⲆΔ(b, h, this.seed, 12, iq, f, g);
        Mo.globalAlpha = Gt;
        if (-Fb !== c) {
          if ((h = -(c - ow.ᐃⵠΔⵠᐃ - e + 698) / ow.ᐃⵠΔⲆⲆⲆⵠ) <= 0.01) {
            this.ᐃⵠⲆᐃᐃⲆⲆ();
          }
          Mo.globalAlpha = ᐃΔᐃⵠ.ⵠⵠΔⲆᐃ(h);
          this.ΔⵠᐃⵠⵠⲆΔ(c, h, this.ΔⲆΔᐃΔⵠᐃ, 6, Nl, f, g);
          Mo.globalAlpha = Fb;
        }
      };
      this.ᐃⵠⵠᐃᐃⲆⲆᐃⵠ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(-d + ow.ΔᐃⵠᐃΔ + e + 2) / ow.ᐃⲆΔΔⵠᐃΔ) === 0) {
          this.ΔᐃΔΔⵠⵠΔ();
        }
        Mo.globalAlpha = ᐃΔᐃⵠ.ⵠⵠΔⲆᐃ(h);
        this.ΔⵠᐃⵠⵠⲆΔ(d, h, this.ᐃⲆΔⵠΔⵠᐃ, Mt, 16, f, g);
        Mo.globalAlpha = Fb;
        if ((h = -(-b + ow.ⲆᐃΔΔᐃ + e) / ow.ⲆⵠⲆⲆⲆⲆⵠ) === Md) {
          this.ⵠΔⲆᐃⲆΔΔ();
        }
        Mo.globalAlpha = ᐃΔᐃⵠ.ⵠⵠΔⲆᐃ(h);
        this.ΔⵠᐃⵠⵠⲆΔ(b, h, this.seed, Bs, 10, f, g);
        Mo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + ow.ᐃⵠΔⵠᐃ + e) / ow.ᐃⵠΔⲆⲆⲆⵠ) <= 0.01) {
            this.ᐃⵠⲆᐃᐃⲆⲆ();
          }
          Mo.globalAlpha = ᐃΔᐃⵠ.ⵠⵠΔⲆᐃ(h);
          this.ΔⵠᐃⵠⵠⲆΔ(c, h, this.ΔⲆΔᐃΔⵠᐃ, P, P, f, g);
          Mo.globalAlpha = Mg;
        }
      };
      this.ⵠⵠᐃΔᐃΔᐃⵠᐃ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        if ((h = -(-d + ow.ΔᐃⵠᐃΔ + e + tk) / ow.ᐃⲆΔΔⵠᐃΔ) === An) {
          this.ΔᐃΔΔⵠⵠΔ();
        }
        Mo.globalAlpha = ᐃΔᐃⵠ.ⵠⵠΔⲆᐃ(h);
        this.ⵠΔᐃⵠⲆᐃᐃ(d, h, this.ᐃⲆΔⵠΔⵠᐃ, ag, Ar, f, g);
        Mo.globalAlpha = 1;
        var h = -(-b + ow.ⲆᐃΔΔᐃ + e) / ow.ⲆⵠⲆⲆⲆⲆⵠ;
        if (yj === h) {
          this.ⵠΔⲆᐃⲆΔΔ();
        }
        Mo.globalAlpha = ᐃΔᐃⵠ.ⵠⵠΔⲆᐃ(h);
        this.ⵠΔᐃⵠⲆᐃᐃ(b, h, this.seed, 12, 10, f, g);
        Mo.globalAlpha = ig;
        if (-_ !== c) {
          if ((h = -(-c + ow.ᐃⵠΔⵠᐃ + e) / ow.ᐃⵠΔⲆⲆⲆⵠ) <= 0.01) {
            this.ᐃⵠⲆᐃᐃⲆⲆ();
          }
          Mo.globalAlpha = ᐃΔᐃⵠ.ⵠⵠΔⲆᐃ(h);
          this.ⵠΔᐃⵠⲆᐃᐃ(c, h, this.ΔⲆΔᐃΔⵠᐃ, 6, Oe, f, g);
          Mo.globalAlpha = bd;
        }
      };
      this.ΔΔⲆΔΔᐃΔΔⵠ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        var h = -(d - ow.ΔᐃⵠᐃΔ - e - nd) / ow.ᐃⲆΔΔⵠᐃΔ;
        if (tj === h) {
          this.ΔᐃΔΔⵠⵠΔ();
        }
        Mo.globalAlpha = ᐃΔᐃⵠ.ⵠⵠΔⲆᐃ(h);
        this.ⵠΔᐃⵠⲆᐃᐃ(d, h, this.ᐃⲆΔⵠΔⵠᐃ, L, 16, f, g);
        Mo.globalAlpha = Co;
        if ((h = -(b - ow.ⲆᐃΔΔᐃ - e + 500) / ow.ⲆⵠⲆⲆⲆⲆⵠ) === 0) {
          this.ⵠΔⲆᐃⲆΔΔ();
        }
        Mo.globalAlpha = ᐃΔᐃⵠ.ⵠⵠΔⲆᐃ(h);
        this.ⵠΔᐃⵠⲆᐃᐃ(b, h, this.seed, 12, 10, f, g);
        Mo.globalAlpha = Gt;
        if (-Kg !== c) {
          if ((h = -(c - ow.ᐃⵠΔⵠᐃ - e + 698) / ow.ᐃⵠΔⲆⲆⲆⵠ) <= 0.01) {
            this.ᐃⵠⲆᐃᐃⲆⲆ();
          }
          Mo.globalAlpha = ᐃΔᐃⵠ.ⵠⵠΔⲆᐃ(h);
          this.ⵠΔᐃⵠⲆᐃᐃ(c, h, this.ΔⲆΔᐃΔⵠᐃ, ya, nl, f, g);
          Mo.globalAlpha = Gt;
        }
      };
      this.w1 = {
        r: new ᐃΔᐃⵠ.ⵠᐃⵠⵠⵠ(ᐃΔᐃⵠ.ᐃᐃⲆᐃⲆᐃⵠ, Ih, 10, ow.ⵠⲆⲆᐃᐃ, ow.ⵠⲆⲆᐃᐃ, ow.ᐃⲆΔΔⵠᐃΔ),
        ⵠΔΔΔ: new ᐃΔᐃⵠ.ⵠᐃⵠⵠⵠ(ᐃΔᐃⵠ.ⲆⵠⵠΔΔⲆΔ, yj, F, ow.ᐃⲆΔΔⵠᐃΔ, ow.ᐃⲆΔΔⵠᐃΔ, ow.ⵠⲆⲆᐃᐃ)
      };
      this.w2 = {
        r: new ᐃΔᐃⵠ.ⵠᐃⵠⵠⵠ(ᐃΔᐃⵠ.ΔΔΔⲆᐃⲆΔ, qu, Lc, ow.ᐃⲆΔΔⲆΔᐃ, ow.ᐃⲆΔΔⲆΔᐃ, ow.ⲆⵠⲆⲆⲆⲆⵠ),
        ⵠΔΔΔ: new ᐃΔᐃⵠ.ⵠᐃⵠⵠⵠ(ᐃΔᐃⵠ.ⵠⵠΔⲆᐃ, 0, 10, ow.ⲆⵠⲆⲆⲆⲆⵠ, ow.ⲆⵠⲆⲆⲆⲆⵠ, ow.ᐃⲆΔΔⲆΔᐃ)
      };
      this.w3 = {
        r: new ᐃΔᐃⵠ.ⵠᐃⵠⵠⵠ(ᐃΔᐃⵠ.ⲆⲆⲆⲆⵠⵠᐃ, qu, F, ow.ᐃᐃᐃᐃⲆᐃⵠ, ow.ᐃᐃᐃᐃⲆᐃⵠ, ow.ᐃⵠΔⲆⲆⲆⵠ),
        ⵠΔΔΔ: new ᐃΔᐃⵠ.ⵠᐃⵠⵠⵠ(ᐃΔᐃⵠ.ⵠⵠΔⲆᐃ, Md, vq, ow.ᐃⵠΔⲆⲆⲆⵠ, ow.ᐃⵠΔⲆⲆⲆⵠ, ow.ᐃᐃᐃᐃⲆᐃⵠ)
      };
      this.ⲆᐃᐃⲆⲆⲆΔⲆΔ = function (a) {
        if (a.r.ⵠⵠⲆΔΔ === a.r.x) {
          if (a.ⵠΔΔΔ.x === a.ⵠΔΔΔ.ⵠⵠⲆΔΔ) {
            return a.r;
          } else {
            return a.ⵠΔΔΔ;
          }
        } else {
          return a.r;
        }
      };
      this.ⲆⲆΔ = function (a) {
        var b;
        if (a.r.ⵠⵠⲆΔΔ === a.r.x) {
          if (a.ⵠΔΔΔ.ⵠⵠⲆΔΔ === a.ⵠΔΔΔ.x) {
            a.r.ⲆΔⲆⲆⲆⲆⵠ();
            a.ⵠΔΔΔ.ⲆΔⲆⲆⲆⲆⵠ();
            b = a.r;
          } else {
            b = a.ⵠΔΔΔ;
          }
        } else {
          b = a.r;
        }
        b.ᐃⵠᐃᐃΔᐃᐃ(b.ⵠⵠⲆΔΔ);
        return b;
      };
      this.ᐃⲆⵠⵠⲆ = [];
      this.ᐃⵠⲆΔΔ = [];
      this.ΔⲆⲆΔⲆᐃⲆ = [];
      this.ⵠⲆⵠⲆⲆⵠΔ = [];
      this.ᐃⲆⲆᐃⵠ = function () {
        for (var a = 0; ᐃⲆᐃΔΔⵠᐃ > a; a++) {
          this.ᐃⲆⵠⵠⲆ[a] = Math.floor(ow.ᐃⲆᐃΔΔⵠⵠ * ΔⲆᐃⵠⲆᐃⲆ[a]);
          this.ᐃⵠⲆΔΔ[a] = Math.floor(ow.ⲆΔᐃΔΔⲆΔ * ΔⲆᐃⵠⲆᐃⲆ[a]);
          this.ΔⲆⲆΔⲆᐃⲆ[a] = Math.floor(ow.ᐃⲆᐃΔΔⵠⵠ * ΔⲆᐃⵠⲆᐃⲆ[a]);
          this.ⵠⲆⵠⲆⲆⵠΔ[a] = Math.floor(ow.ⲆΔᐃΔΔⲆΔ * ΔⲆᐃⵠⲆᐃⲆ[a]);
        }
        this.w1.r.x = this.w1.r.ⵠⵠⲆΔΔ;
        this.w2.r.ᐃᐃᐃⲆⲆ = 3.5;
        this.w3.r.ᐃᐃᐃⲆⲆ = 2;
      };
      this.ᐃⲆⲆᐃⵠ();
    }
    this.ΔⵠⲆⲆΔ = b.substring(An, Ml) + this.ΔⵠⲆⲆΔ.substring(Nl);
    this.ᐃⵠᐃᐃᐃΔⵠ = ⵠⲆⲆᐃ.get("starve_token_id") ? ⵠⲆⲆᐃ.get("starve_token_id") : "";
    this.id = Gg;
    this.ΔᐃᐃΔ = Ih;
    this.ᐃⵠⵠ = 0;
    this.ⲆⵠⲆⲆⲆⵠᐃ = {
      ΔⲆᐃᐃᐃⲆⲆ: fg,
      ⲆᐃᐃⵠΔ: sb,
      ᐃᐃᐃΔⵠᐃⲆ: "",
      ⲆⲆΔⲆⵠ: 0
    };
    this.ⲆᐃᐃⵠᐃΔⵠΔᐃ = {
      connected: 0,
      ΔΔⲆⲆⲆΔΔ: new Date().getTime()
    };
    this.ⵠⵠⵠⵠΔ = [];
    this.ⲆᐃΔⵠᐃΔᐃ = function (a) {
      for (var b = Fj; this.ⵠⵠⵠⵠΔ.length > b; b++) {
        if (a == this.ⵠⵠⵠⵠΔ[b]) {
          return kl;
        }
      }
      return vn;
    };
    this.ΔⲆΔΔᐃ = {
      ⵠⵠⵠⵠⵠ: 0,
      time: Fj,
      value: Aa,
      open: Zl,
      ⵠⲆⵠΔ: function () {
        if (this.open) {
          var a = new Date().getTime();
          this.time = Math.floor((a - this.ⵠⵠⵠⵠⵠ) / 1000);
          if (this.time < 60) {
            fx.ΔⲆΔΔᐃ.button.ⵠⲆⵠΔ(Mo);
          } else {
            document.getElementById("shop_starterkit").style.display = "none";
            this.open = Jn;
          }
        }
      }
    };
    this.ⲆⲆᐃΔⲆ = {
      id: -1,
      ⵠΔⲆᐃ: -Gt,
      lock: Md,
      timeout: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, qb, ig, sb, sc / 30, 1),
      wait: false
    };
    this.ⲆΔⲆΔⵠ = {
      timeout: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, sb, 1, sb, 0.2, 1),
      wait: false
    };
    this.ΔⵠⲆᐃⲆ = {
      timeout: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(ds, An, 1, Gk, 1, sl),
      wait: Wh
    };
    this.ⵠᐃⲆΔⵠ = {
      timeout: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0, bd, 0, bd / 10, Kg),
      wait: false
    };
    this.ⲆΔⲆ = new ᐃΔᐃⵠ.ⲆΔⲆΔⵠⵠⵠ(ᐃΔᐃⵠ.ᐃᐃⲆᐃᐃΔⲆ, Gk, 0.4, qb, Aa, mq, Qo, mq, Qo);
    this.ⲆΔⲆ.ⵠⵠⵠⵠⵠ = 0;
    this.ⲆΔⲆ.ⵠΔᐃΔⲆᐃᐃ = 0;
    this.ⲆΔⲆ.ⲆᐃⲆ = function () {
      if (Gg < this.ⵠΔᐃΔⲆᐃᐃ) {
        this.ⵠΔᐃΔⲆᐃᐃ -= hx;
      } else {
        var a = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ];
        if (a) {
          this.ⵠⵠⵠⵠⵠ = yj;
          var b = Math.max(Math.min(mq - a.x, -2), 2 - ff.w + Do);
          var c = Math.max(Math.min(Qo - a.y, -ta), 2 - ff.ⵠΔⲆ + lq);
          this.ᐃⵠᐃᐃΔᐃᐃ({
            x: b,
            y: c
          });
        } else {
          this.ⵠⵠⵠⵠⵠ += hx;
          if (iu < this.ⵠⵠⵠⵠⵠ) {
            this.ⵠⵠⵠⵠⵠ = Gk;
            if (!dx.reconnect.enabled) {
              ᐃΔᐃᐃ.ᐃᐃᐃΔⲆⵠⵠⵠΔ();
            }
          }
        }
      }
    };
    this.ⲆΔⲆ.w = screen.width;
    this.ⲆΔⲆ.ⵠΔⲆ = screen.height;
    this.ⲆΔⲆ.ᐃΔΔΔᐃᐃⵠ = this.ⲆΔⲆ.w;
    this.ⲆΔⲆ.ᐃⲆᐃᐃⲆⲆΔ = this.ⲆΔⲆ.ⵠΔⲆ;
    this.ⲆΔⲆ.rx = 0;
    this.ⲆΔⲆ.ry = qu;
    this.ⲆΔⲆ.ⲆΔΔΔⵠΔᐃⵠⵠ = 0;
    this.ⲆΔⲆ.ΔᐃⲆⲆⲆⲆΔᐃᐃ = Qr;
    this.ⲆΔⲆ.Δᐃᐃⵠⵠ = function (a, b) {
      this.x = -Math.min(Math.max(-ff.ᐃΔΔΔΔᐃⵠ * Gl, a - ff.ᐃΔΔΔΔᐃⵠ - this.ᐃΔΔΔᐃᐃⵠ / 2), ff.w - this.ᐃΔΔΔᐃᐃⵠ);
      this.y = -Math.min(Math.max(-ff.ⵠⲆΔⲆⲆΔᐃ * 2, b - (ff.ⵠⲆΔⲆⲆΔᐃ + this.ᐃⲆᐃᐃⲆⲆΔ) / Od), ff.ⵠΔⲆ - this.ᐃⲆᐃᐃⲆⲆΔ + ff.ⵠⲆΔⲆⲆΔᐃ);
      this.ⵠⵠⲆΔΔ = this.x;
      this.ᐃᐃᐃⵠⵠⲆⵠ = this.y;
    };
    this.control = {
      angle: 0,
      timeout: Ih,
      ⵠⲆⵠⵠⲆⵠⵠ: Gg,
      ⵠⵠⵠⵠ: yj,
      attack: Gg,
      ⲆᐃⲆ: function () {
        var a = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ];
        if (a) {
          var b = {
            x: dx.ⲆΔⲆ.x + a.x,
            y: dx.ⲆΔⲆ.y + a.y
          };
        } else {
          b = Fo;
        }
        var c = ᐃΔᐃⵠ.ΔⲆᐃⲆⵠᐃΔ(kf.ΔⲆⵠⲆ, b);
        var d = tr;
        this.ⵠⵠⵠⵠ += hx;
        if (!kf.state) {
          if (a && !(a.action & lw.ᐃΔⲆᐃᐃΔᐃ) && this.ⵠⵠⵠⵠ > nw.ᐃΔⲆᐃᐃΔᐃ) {
            this.attack = 1;
            d = true;
            this.ⵠⵠⵠⵠ = Ah;
            ᐃΔᐃᐃ.ⲆΔᐃⲆΔⲆⲆᐃⵠ(c);
          }
        }
        if (a) {
          a.angle = c;
          a.ᐃⲆⵠⵠⵠΔᐃ = c;
        }
        if (!d) {
          this.timeout += hx;
          if (this.timeout > nw.ⵠⲆᐃᐃΔᐃⲆ) {
            this.timeout = fg;
            if (Math.abs(this.angle - c) > 0.005) {
              ᐃΔᐃᐃ.ΔΔⵠⲆⵠⲆᐃⲆⵠ(c);
              this.angle = c;
            }
          }
        }
        if (!dx.ⲆᐃΔⵠᐃ.open && !dx.ᐃⵠᐃᐃⵠ.open) {
          var e = 0;
          if (Af.ΔⵠⲆΔΔΔⲆ()) {
            e |= Ni;
          }
          if (Af.ΔⲆΔΔⲆᐃΔ()) {
            e |= 2;
          }
          if (Af.ⵠᐃΔΔⲆΔᐃ()) {
            e |= Dd;
          }
          if (Af.ΔΔⲆⲆⵠⲆⲆ()) {
            e |= 8;
          }
          if (this.ⵠⲆⵠⵠⲆⵠⵠ != e) {
            ᐃΔᐃᐃ.ⲆⲆⲆΔⲆⵠΔⲆⲆ(e);
          }
          this.ⵠⲆⵠⵠⲆⵠⵠ = e;
        }
      }
    };
    this.ᐃⲆᐃΔ = {
      c: 1,
      ⵠΔΔΔ: Gt,
      ⵠΔⲆ: Mg,
      ⲆⲆΔ: ig,
      ⵠᐃᐃ: sl,
      ΔΔⲆᐃⲆΔᐃ: 1,
      ⲆΔΔⵠⲆΔᐃ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(true, Aa, 1, 0, 3, 3),
      ᐃⵠΔⵠᐃᐃⲆ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(true, 0, Co, Gg, 2, 2),
      ᐃΔᐃⲆΔᐃΔ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(true, 0, _, Qr, Lq, Lq),
      ⵠΔⲆⵠΔⲆᐃ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(true, qu, 1, 0, 3, Rn),
      ⲆΔΔΔⵠⲆΔ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Rq, Ah, Kg, yj, 3, 3),
      Δᐃⵠᐃᐃᐃⵠ: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(xa, 0, 1, 0, iu, Ou),
      ᐃΔᐃΔⵠ: new ᐃΔᐃⵠ.ⵠᐃⵠⵠⵠ(ᐃΔᐃⵠ.ᐃᐃⲆᐃᐃΔⲆ, Gg, Gt, Md, Aa, ig),
      Δᐃᐃᐃᐃ: new ᐃΔᐃⵠ.ⵠᐃⵠⵠⵠ(ᐃΔᐃⵠ.ᐃᐃⲆᐃᐃΔⲆ, 0, er, 0, 0, 1),
      ⲆⵠⲆⵠⵠⵠᐃ: new ᐃΔᐃⵠ.ⵠᐃⵠⵠⵠ(ᐃΔᐃⵠ.ᐃᐃⲆᐃᐃΔⲆ, 0, 1, 0, 0, 1),
      ΔΔᐃⵠΔⵠΔ: new ᐃΔᐃⵠ.ⵠᐃⵠⵠⵠ(ᐃΔᐃⵠ.ᐃᐃⲆᐃᐃΔⲆ, gl, 1, 0, Ih, Lu),
      ⵠⲆⲆⲆⵠⵠⵠ: new ᐃΔᐃⵠ.ⵠᐃⵠⵠⵠ(ᐃΔᐃⵠ.ᐃᐃⲆᐃᐃΔⲆ, Fj, Gt, Rl, 0, _h),
      ⲆⲆⲆΔᐃ: new ᐃΔᐃⵠ.ⵠᐃⵠⵠⵠ(ᐃΔᐃⵠ.ᐃᐃⲆᐃᐃΔⲆ, 0, Co, 0, xq, 1),
      ⲆᐃⲆ: function () {
        this.ⲆΔΔⵠⲆΔᐃ.ⲆᐃⲆ();
        this.ᐃⵠΔⵠᐃᐃⲆ.ⲆᐃⲆ();
        this.ᐃΔᐃⲆΔᐃΔ.ⲆᐃⲆ();
        this.ⵠΔⲆⵠΔⲆᐃ.ⲆᐃⲆ();
        this.ⲆΔΔΔⵠⲆΔ.ⲆᐃⲆ();
        this.Δᐃⵠᐃᐃᐃⵠ.ⲆᐃⲆ();
        this.ᐃΔᐃΔⵠ.ᐃⵠᐃᐃΔᐃᐃ(this.c);
        this.Δᐃᐃᐃᐃ.ᐃⵠᐃᐃΔᐃᐃ(this.ⵠΔΔΔ);
        this.ⲆⵠⲆⵠⵠⵠᐃ.ᐃⵠᐃᐃΔᐃᐃ(this.ⵠΔⲆ);
        this.ΔΔᐃⵠΔⵠΔ.ᐃⵠᐃᐃΔᐃᐃ(this.ⲆⲆΔ);
        this.ⵠⲆⲆⲆⵠⵠⵠ.ᐃⵠᐃᐃΔᐃᐃ(this.ⵠᐃᐃ);
        this.ⲆⲆⲆΔᐃ.ᐃⵠᐃᐃΔᐃᐃ(this.ΔΔⲆᐃⲆΔᐃ);
      }
    };
    this.ᐃⲆⵠⵠⲆⲆⵠ = false;
    this.ⲆᐃⵠᐃΔⵠᐃ = false;
    this.ⵠⵠᐃⲆΔ = ml;
    this.ᐃⵠΔΔⵠⲆΔ = false;
    this.ΔᐃⲆⵠ = {
      max: ow.ΔⵠⲆΔⲆⵠΔ,
      ⲆⵠΔᐃⲆΔΔ: fg,
      ΔⲆⵠⵠᐃ: 0,
      ⵠⵠⲆ: [],
      ⵠΔΔᐃΔ: [],
      ⲆⲆⵠⲆΔΔΔ: function (a, b) {
        if (a === 1) {
          this.ΔⲆⵠⵠᐃ = ow.ᐃⵠᐃᐃΔⵠⵠⵠΔ;
        }
        this.ⲆⵠΔᐃⲆΔΔ += b;
        this.max = ow.ΔⵠⲆΔⲆⵠΔ + this.ⲆⵠΔᐃⲆΔΔ + this.ΔⲆⵠⵠᐃ;
      },
      ⵠΔⲆΔⵠΔΔ: {
        item: -1,
        ⵠⵠ: null,
        ⲆᐃᐃⲆⲆ: Gg,
        ⵠⵠⵠᐃᐃᐃᐃ: tj,
        ⲆⲆΔᐃΔ: -1,
        ⵠΔⵠΔᐃ: -Gt,
        ⲆΔⵠⲆΔ: function (a) {
          if (!!this.ⲆᐃᐃⲆⲆ && (a.x !== this.ⲆⲆΔᐃΔ || a.y !== this.ⵠΔⵠΔᐃ)) {
            this.ⵠⵠⵠᐃᐃᐃᐃ = 1;
          }
        },
        start: function (a, b) {
          this.ⲆⲆΔᐃΔ = b.x;
          this.ⵠΔⵠΔᐃ = b.y;
          this.item = a;
          this.ⵠⵠ = dx.ΔᐃⲆⵠ.ⵠΔΔᐃΔ[a].info.ⵠⵠ[2];
          this.ⲆᐃᐃⲆⲆ = 1;
        },
        stop: function () {
          this.ⲆᐃᐃⲆⲆ = tj;
          this.ⵠⵠⵠᐃᐃᐃᐃ = 0;
          this.ⲆⲆΔᐃΔ = -wh;
          this.ⵠΔⵠΔᐃ = -1;
        },
        release: function () {
          var a = -ck;
          var b = dx.ΔᐃⲆⵠ.ⵠΔΔᐃΔ;
          var c = Qr;
          if (this.ⲆᐃᐃⲆⲆ && this.ⵠⵠⵠᐃᐃᐃᐃ) {
            for (var d = 0; d < b.length; d++) {
              if (b[d].info.state === _v) {
                a = d;
                break;
              }
            }
            if (a !== -Co && a !== this.item && b[this.item]) {
              c = wh;
              var f = b[a];
              b[a] = b[this.item];
              b[this.item] = f;
              fx.ᐃΔΔⵠⲆΔᐃ();
            }
          }
          this.stop();
          return c;
        },
        ⵠⲆⵠΔ: function (a, b) {
          if (this.ⲆᐃᐃⲆⲆ && this.ⵠⵠⵠᐃᐃᐃᐃ) {
            Mm(Mo, this.ⵠⵠ, Math.floor(a - this.ⵠⵠ.width / Nj), Math.floor(b - this.ⵠⵠ.height / ta));
          }
        }
      },
      ΔⵠᐃᐃᐃᐃⲆᐃΔ: function (a) {
        for (d = bu; d < a.length; d++) {
          if (this.ⵠⵠⲆ[a[d][0]] == a[d][Fb]) {
            return Rq;
          }
        }
        return false;
      },
      ⵠᐃΔᐃᐃ: function (a) {
        for (var b = 0; b < this.ⵠΔΔᐃΔ.length; b++) {
          if (this.ⵠΔΔᐃΔ[b].id == a) {
            return b;
          }
        }
        return -1;
      },
      ⵠᐃⲆᐃⵠΔⲆ: function (a, b) {
        this.ⵠⵠⲆ[a] = 0;
        this.ⵠΔΔᐃΔ.splice(b, wh);
        fx.ᐃΔΔⵠⲆΔᐃ();
      },
      ⵠⲆⲆⵠⵠⵠᐃ: function (a, b, c) {
        ⲆᐃⲆ = rn;
        this.ⵠⵠⲆ[a] = Math.max(0, this.ⵠⵠⲆ[a] - b);
        if (!this.ⵠⵠⲆ[a] && c >= 0) {
          this.ⵠᐃⲆᐃⵠΔⲆ(a, c);
        }
      }
    };
    this.ⵠⵠΔⲆⲆ = {
      enabled: false,
      translate: {
        x: 0,
        y: xq
      },
      ⵠΔⲆⵠᐃⲆΔ: function () {
        if (ff.mode == ow.ⵠᐃⵠΔⲆᐃⵠ && !dx.ⲆᐃⵠᐃΔⵠᐃ) {
          dx.ⵠⵠΔⲆⲆ.enabled = !dx.ⵠⵠΔⲆⲆ.enabled;
          if (dx.ⵠⵠΔⲆⲆ.enabled) {
            fx.options.ΔⵠᐃⲆᐃⲆⲆ.display = "inline-block";
          } else {
            fx.options.ΔⵠᐃⲆᐃⲆⲆ.display = "none";
          }
        }
      }
    };
    fx.options.ΔⵠᐃⲆᐃⲆⲆ.display = "none";
    this.ᐃⵠⵠΔᐃ = {
      enabled: ia,
      translate: {
        x: Ah,
        y: 0
      },
      ⵠⵠⵠⵠⵠ: Ih,
      ⵠΔⲆⵠᐃⲆΔ: function () {
        dx.ᐃⵠⵠΔᐃ.enabled = !dx.ᐃⵠⵠΔᐃ.enabled;
        if (dx.ᐃⵠⵠΔᐃ.enabled) {
          fx.options.ΔΔᐃᐃⵠⲆⵠ.display = "inline-block";
        } else {
          fx.options.ΔΔᐃᐃⵠⲆⵠ.display = "none";
        }
      },
      ⲆᐃⲆ: function () {
        if (!!this.enabled && dx.Ⲇⵠᐃⵠ.id < qu && !fx.ⵠΔⲆΔ.open) {
          this.ⵠⵠⵠⵠⵠ += hx;
          if (this.ⵠⵠⵠⵠⵠ > jg) {
            this.ⵠⵠⵠⵠⵠ = 0;
            if (dx.ᐃⲆᐃΔ.ⵠΔⲆ < 0.35) {
              if (dx.ΔᐃⲆⵠ.ⵠⵠⲆ[110]) {
                ᐃΔᐃᐃ.ᐃⲆΔᐃᐃ(110, dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(110));
              } else if (dx.ΔᐃⲆⵠ.ⵠⵠⲆ[192]) {
                ᐃΔᐃᐃ.ᐃⲆΔᐃᐃ(192, dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(192));
              } else if (dx.ΔᐃⲆⵠ.ⵠⵠⲆ[196]) {
                ᐃΔᐃᐃ.ᐃⲆΔᐃᐃ(196, dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(196));
              } else if (dx.ΔᐃⲆⵠ.ⵠⵠⲆ[189]) {
                ᐃΔᐃᐃ.ᐃⲆΔᐃᐃ(189, dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(189));
              } else if (dx.ΔᐃⲆⵠ.ⵠⵠⲆ[207]) {
                ᐃΔᐃᐃ.ᐃⲆΔᐃᐃ(207, dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(207));
              } else if (dx.ΔᐃⲆⵠ.ⵠⵠⲆ[205]) {
                ᐃΔᐃᐃ.ᐃⲆΔᐃᐃ(205, dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(205));
              } else if (dx.ΔᐃⲆⵠ.ⵠⵠⲆ[209]) {
                ᐃΔᐃᐃ.ᐃⲆΔᐃᐃ(209, dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(209));
              } else if (dx.ΔᐃⲆⵠ.ⵠⵠⲆ[143]) {
                ᐃΔᐃᐃ.ᐃⲆΔᐃᐃ(143, dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(143));
              } else if (dx.ΔᐃⲆⵠ.ⵠⵠⲆ[117]) {
                ᐃΔᐃᐃ.ᐃⲆΔᐃᐃ(117, dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(117));
              } else if (dx.ΔᐃⲆⵠ.ⵠⵠⲆ[138]) {
                ᐃΔᐃᐃ.ᐃⲆΔᐃᐃ(138, dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(138));
              } else if (dx.ΔᐃⲆⵠ.ⵠⵠⲆ[133]) {
                ᐃΔᐃᐃ.ᐃⲆΔᐃᐃ(133, dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(133));
              } else if (dx.ΔᐃⲆⵠ.ⵠⵠⲆ[145]) {
                ᐃΔᐃᐃ.ᐃⲆΔᐃᐃ(145, dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(145));
              } else if (dx.ΔᐃⲆⵠ.ⵠⵠⲆ[136]) {
                ᐃΔᐃᐃ.ᐃⲆΔᐃᐃ(136, dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(136));
              } else if (dx.ΔᐃⲆⵠ.ⵠⵠⲆ[197]) {
                ᐃΔᐃᐃ.ᐃⲆΔᐃᐃ(197, dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(197));
              }
            } else if (dx.ᐃⲆᐃΔ.ⲆⲆΔ < 0.35 && dx.ΔᐃⲆⵠ.ⵠⵠⲆ[127]) {
              ᐃΔᐃᐃ.ᐃⲆΔᐃᐃ(127, dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(127));
            }
          }
        }
      }
    };
    fx.options.ΔΔᐃᐃⵠⲆⵠ.display = "none";
    this.Ⲇⵠᐃⵠ = {
      id: -1,
      ᐃⲆΔᐃ: -bs,
      timeout: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(tr, 0, Gt, Qr, _, 1),
      ᐃⲆΔⲆⲆ: false,
      ⲆᐃᐃΔ: -1,
      mode: 0,
      label: [],
      ⵠⵠⵠⵠⲆ: [],
      ⵠΔⲆΔᐃ: false,
      ᐃⵠᐃⲆⵠ: false,
      ⵠⵠⵠᐃᐃⲆⲆ: false,
      ΔⲆᐃΔⲆ: false,
      ΔⲆΔΔΔΔⵠⲆⵠ: function () {
        this.mode = this.mode === bu ? 1 : sb;
      },
      ⲆⵠᐃⵠⵠⵠΔⵠᐃ: function (a) {
        this.ⵠΔⲆΔᐃ = a;
        var b = fx.ⵠΔⲆΔ;
        if (b.open) {
          b.ⵠⵠΔΔⲆΔⲆ(b.button);
        }
        this.ⲆᐃⲆ();
      },
      ΔᐃΔᐃᐃⲆᐃᐃᐃ: function (a) {
        var b = Us[a];
        this.id = a;
        this.ᐃⲆΔⲆⲆ = xg;
        ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ];
        this.timeout.ΔⵠⵠⲆⵠⵠⵠ = b.time * ss;
        this.ᐃⲆΔᐃ = b.ᐃⲆΔᐃ;
      },
      ᐃⵠΔᐃᐃᐃΔᐃΔ: function (a) {
        var b = Us[a];
        this.id = a;
        this.ᐃⲆΔⲆⲆ = oh;
        var c = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ];
        if (c && c.right == 28) {
          this.timeout.ΔⵠⵠⲆⵠⵠⵠ = b.time * 3;
        } else {
          this.timeout.ΔⵠⵠⲆⵠⵠⵠ = b.time;
        }
        this.ᐃⲆΔᐃ = b.ᐃⲆΔᐃ;
        for (var d = et; d < b.r.length; d++) {
          var e = b.r[d];
          dx.ΔᐃⲆⵠ.ⵠⲆⲆⵠⵠⵠᐃ(e[et], e[1], dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(e[gl]));
        }
        fx.ᐃΔΔⵠⲆΔᐃ();
      },
      ⲆᐃⲆ: function () {
        this.ⵠⵠⵠⵠⲆ = [];
        if (fx.ΔⵠΔΔⵠ.Ⲇⵠᐃⵠ === _h) {
          fx.ΔⵠΔΔⵠ.display = 0;
        }
        for (var a in Us) {
          var b = Us[a];
          var c = Yn;
          if (b.r) {
            for (var d = 0; d < b.r.length; d++) {
              if (dx.ΔᐃⲆⵠ.max >= ow.ⵠᐃⲆᐃⲆΔⲆ && b.id === 100) {
                c = false;
                break;
              }
              if (b.w > this.ⵠΔⲆΔᐃ || b.f > this.ᐃⵠᐃⲆⵠ || b.ⵠᐃᐃ > this.ⵠⵠⵠᐃᐃⲆⲆ || b.e > this.ΔⲆᐃΔⲆ) {
                c = false;
                break;
              }
              var f = b.r[d];
              if (!dx.ΔᐃⲆⵠ.ⵠⵠⲆ[f[Md]] || dx.ΔᐃⲆⵠ.ⵠⵠⲆ[f[0]] < f[Ls]) {
                c = false;
                break;
              }
            }
            if (c) {
              this.ⵠⵠⵠⵠⲆ.push(fx.ⵠⲆᐃ[b.id]);
            }
          }
        }
        fx.ⲆⲆⲆⵠΔⲆⲆ();
        fx.Ⲇᐃⵠᐃⵠⵠⵠ();
        fx.ᐃᐃᐃΔΔᐃΔ();
        fx.ᐃⵠΔᐃⲆⲆᐃ();
        fx.ⲆᐃⲆⲆⵠᐃⵠ();
        fx.ⲆⲆⲆΔⲆⵠᐃ();
        fx.sign.ⵠⵠⵠⲆΔΔⲆ();
      },
      ⲆΔⲆⲆⲆⲆⵠ: function () {
        this.id = -ig;
        this.ᐃⲆΔⲆⲆ = false;
        this.timeout.ᐃⲆⵠ = 0;
        this.timeout.ⵠᐃᐃ = ml;
        this.ⲆᐃⲆ();
      }
    };
    this.ⵠΔⵠⵠⵠⵠᐃ = {
      message: Pa,
      ⵠⲆⵠΔ: ov
    };
    this.alert = {
      timeout: new ᐃΔᐃⵠ.ᐃⵠⵠΔ(ml, 1, 1, bu, 4, 0.3),
      text: "",
      label: null,
      ⵠⲆⵠΔ: nv,
      list: []
    };
    this.ᐃᐃᐃⵠᐃ = {
      ⵠⲆ: document.createElement("canvas"),
      ⵠⵠⵠᐃᐃ: [],
      ⲆᐃⲆ: true,
      translate: {
        y: 0,
        x: 0
      },
      sort: function () {
        var a = [];
        for (var b = ff.ⲆΔⵠⵠ, c = 0; c < b.length; c++) {
          if (b[c].ΔᐃΔΔⵠ) {
            a.push({
              id: c,
              ⵠⲆᐃᐃ: b[c].ⲆⲆΔⲆⵠ
            });
          }
        }
        a.sort(function (a, b) {
          return b.ⵠⲆᐃᐃ - a.ⵠⲆᐃᐃ;
        });
        this.ⵠⵠⵠᐃᐃ = [];
        for (c = 0; c < a.length && c < sd; c++) {
          this.ⵠⵠⵠᐃᐃ.push(a[c].id);
        }
        this.ⲆᐃⲆ = true;
      },
      ᐃⲆⲆᐃⵠ: function (a) {
        for (var b = ff.ⲆΔⵠⵠ, c = 0; c < b.length; c++) {
          b[c].ⲆⲆΔⲆⵠ = 0;
        }
        b[dx.id].ⲆⲆΔⲆⵠ = ᐃΔᐃⵠ.ᐃΔᐃⵠⵠⲆⵠ(a[Mg]);
        this.ⵠⵠⵠᐃᐃ = [];
        for (c = jb; c < a.length; c += 2) {
          this.ⵠⵠⵠᐃᐃ.push(a[c]);
          b[a[c]].ⲆⲆΔⲆⵠ = ᐃΔᐃⵠ.ᐃΔᐃⵠⵠⲆⵠ(a[c + Gt]);
        }
        this.ⲆᐃⲆ = bh;
      }
    };
    this.ᐃᐃᐃⵠᐃ.ⵠⲆ.width = pq * 180;
    this.ᐃᐃᐃⵠᐃ.ⵠⲆ.height = pq * 300;
    this.ᐃᐃᐃⵠᐃ.Δ = this.ᐃᐃᐃⵠᐃ.ⵠⲆ.getContext("2d");
    this.ᐃⵠᐃᐃⵠ = {
      open: false,
      input: document.getElementById("commandInput"),
      ⲆⵠΔⵠΔⵠⵠ: document.getElementById("commandsBox"),
      style: document.getElementById("commandMainBox").style,
      ⵠⲆⵠᐃΔⲆΔⲆᐃ: function (a) {
        this.ⲆⵠΔⵠΔⵠⵠ.innerHTML += a;
      },
      ⲆᐃⲆ: function () {
        this.style.left = Math.floor(Do / il - 300) + "px";
        this.style.top = Math.floor(lq / X - 250) + "px";
      },
      ⲆⵠΔΔⲆΔⲆⲆΔ: function () {
        this.ⲆⵠΔⵠΔⵠⵠ.innerHTML = "";
      },
      ⵠᐃⲆⲆᐃ: function () {
        this.open = vn;
        this.style.display = "none";
      },
      ⲆΔⲆⵠΔ: function (a) {
        var b = "<table class=\"tableList\">";
        for (var c = 0; c < a.length; c++) {
          if (c % 3 == 0) {
            b += "<tr>";
          }
          b += "<td class=\"tableList\">" + a[c] + "</td>";
          if ((c + ig) % Jd == 0 || c + Ni === a.length) {
            b += "</tr>";
          }
        }
        return b += "</table>";
      },
      ΔᐃᐃⵠΔ: function (a, b, c, d) {
        d = d || "";
        var f = "<div class=commandWritten>" + (a = a || "");
        f += (b = b || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
        f += (c = c || "") + "</div>" + d + "</div>";
        this.ⵠⲆⵠᐃΔⲆΔⲆᐃ(f);
        this.ⲆᐃⵠΔⲆΔⵠΔᐃ();
      },
      ⲆᐃⵠΔⲆΔⵠΔᐃ: function () {
        this.ⲆⵠΔⵠΔⵠⵠ.scrollTop = this.ⲆⵠΔⵠΔⵠⵠ.scrollHeight;
      },
      ᐃⵠΔΔⵠΔΔ: function (b) {
        switch (b) {
          case "clean":
            this.ⲆⵠΔΔⲆΔⲆⲆΔ();
            return bh;
          case "list":
            var c = "";
            const a = bj.document.createElement("div");
            for (var d = ff.ⲆΔⵠⵠ, f = 0; f < d.length; f++) {
              var g = d[f];
              if (g.ΔᐃΔΔⵠ) {
                a.innerText = g.ⲆΔᐃᐃⲆ;
                c += a.innerHTML + " <span style=\"color:green\">#" + f + "</span><br />";
              }
            }
            this.ΔᐃᐃⵠΔ("list", 1, "List all connected players", c);
            return true;
          case "weapon-list":
            this.ΔᐃᐃⵠΔ("Weapons", 1, "List all weapons in the game", this.ⲆΔⲆⵠΔ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"]));
            return mt;
          case "tool-list":
            this.ΔᐃᐃⵠΔ("Tools", Ls, "List all tools in the game", this.ⲆΔⲆⵠΔ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
            return mt;
          case "survival-list":
            this.ΔᐃᐃⵠΔ("Survival Items", Co, "List all survival items in the game", this.ⲆΔⲆⵠΔ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
            return true;
          case "resource-list":
            this.ΔᐃᐃⵠΔ("Resources", Ek, "List all resources in the game", this.ⲆΔⲆⵠΔ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
            return true;
          case "food-list":
            this.ΔᐃᐃⵠΔ("Food", bs, "List all food in the game", this.ⲆΔⲆⵠΔ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
            return true;
          case "hat-list":
            this.ΔᐃᐃⵠΔ("Hats", 1, "List all hats in the game", this.ⲆΔⲆⵠΔ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
            return true;
          case "building-list":
            this.ΔᐃᐃⵠΔ("Buildings", er, "List all buildings in the game", this.ⲆΔⲆⵠΔ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
            return Yn;
          case "biome-list":
            this.ΔᐃᐃⵠΔ("Biomes list", 1, "List all available biomes in the game", this.ⲆΔⲆⵠΔ(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
            return true;
          case "help-config":
            this.ΔᐃᐃⵠΔ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
            return mt;
          case "pos":
            d = ff.Δᐃⵠ[rw.ⵠΔΔⵠ];
            f = 0;
            for (; f < d.length; f++) {
              var e = d[f];
              if (e.ⵠΔⲆᐃ === dx.id) {
                this.ΔᐃᐃⵠΔ("pos", 1, "Your position is " + Math.floor(e.x / cl) + ":" + Math.floor(e.y / xo));
                return bh;
              }
            }
            break;
          case "help-admin":
            this.ΔᐃᐃⵠΔ("help-admin", Ni, "List all available commands for admin only", this.ⲆΔⲆⵠΔ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
            return true;
          case "help":
            this.ΔᐃᐃⵠΔ("help", _, "List all available commands", this.ⲆΔⲆⵠΔ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
            return oh;
        }
        return false;
      },
      ΔᐃⲆⲆᐃΔⵠΔⲆ: function () {
        if (!this.open) {
          this.open = Kh;
          this.style.display = "inline-block";
          this.input.focus();
        }
      },
      ⲆⲆⲆᐃΔⵠᐃ: function () {
        var a = this.input.value;
        if (a && a.length > gl) {
          if (!this.ᐃⵠΔΔⵠΔΔ(a)) {
            ᐃΔᐃᐃ.ⲆΔΔⲆᐃⵠᐃΔⲆ(this.input.value);
          }
          this.input.value = "";
        }
      }
    };
    this.ⲆᐃΔⵠᐃ = {
      open: false,
      input: document.getElementById("chat_input"),
      style: document.getElementById("chat_block").style,
      ⲆᐃⲆ: function () {
        this.style.left = Math.floor(Do / 2 - 150) + "px";
        this.style.top = Math.floor(lq / 2 + 80) + "px";
      },
      ⵠᐃⲆⲆᐃ: function () {
        this.open = false;
        this.style.display = "none";
        this.input.value = "";
      },
      prefix: "!",
      cmd: {
        hud: function (a) {
          if (a === "off") {
            var b = "Enter \"!hud\" without the quotes to restore the HUD";
            if (dx.alert.text) {
              dx.alert.list.push(b);
            } else {
              dx.alert.text = b;
            }
            fx.ΔᐃⲆᐃΔⲆⲆ = 0;
          } else {
            fx.ΔᐃⲆᐃΔⲆⲆ = bs;
          }
        }
      },
      ᐃⵠΔΔⵠΔΔ: function (a) {
        if (a.charAt(xq) == this.prefix) {
          var b = "";
          var c = "";
          for (var d = 1; d < a.length && a.charAt(d) != " "; d++) {
            b += a.charAt(d);
          }
          for (d++; d < a.length; d++) {
            c += a.charAt(d);
          }
          var e = this.cmd[b];
          if (e) {
            e(c);
          }
          return Pq;
        }
        return M;
      },
      ᐃⵠⲆⵠΔ: function () {
        if (this.open) {
          this.open = ja;
          this.style.display = "none";
          var a = this.input.value;
          if (a) {
            if (!this.ᐃⵠΔΔⵠΔΔ(a)) {
              ᐃΔᐃᐃ.ⲆᐃⵠΔⵠⵠⵠⵠᐃ(this.input.value);
            }
            this.input.value = "";
          }
        } else {
          this.open = true;
          this.style.display = "inline-block";
          this.input.focus();
        }
      }
    };
    this.ⵠⲆΔⲆⵠⲆΔ = {
      ⲆΔⵠΔΔ: [],
      ⲆᐃⲆ: function (a) {
        a.y += hx * 80 * a.ⵠⲆᐃᐃ;
        a.x += hx * 80 * a.c;
        a.Δᐃᐃᐃᐃ -= hx / 6;
        if (a.Δᐃᐃᐃᐃ > 0.2) {
          a.alpha = Math.min(a.alpha + hx * 3, bd);
        } else {
          a.alpha = Math.max(a.alpha - hx * Ga, An);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min(rs.ΔⵠΔΔⵠΔⲆ * (Do / 1366), rs.ΔⵠΔΔⵠΔⲆ + vq) * Math.max(Math.min(ff.ΔⵠΔᐃᐃ + 1000, 3000) / 3000, 0));
        if (this.ⲆΔⵠΔΔ.length < b) {
          var c = Math.floor(Math.random() * rs.ΔᐃⲆΔᐃᐃⲆ);
          var d = -dx.ⲆΔⲆ.x + Math.floor(Math.random() * dx.ⲆΔⲆ.w);
          var e = -dx.ⲆΔⲆ.y + Math.floor(Math.random() * dx.ⲆΔⲆ.ⵠΔⲆ);
          var f = Math.random(Math.PI);
          this.ⲆΔⵠΔΔ.push(new Aw(c, d, e, f));
        }
      }
    };
    this.ᐃΔⲆⵠΔⵠⵠ = 0;
    this.ⵠⵠⵠᐃⵠ = 0;
    this.ΔᐃⲆΔⲆ = {
      ⲆΔⵠΔΔ: [],
      ⲆⵠΔⵠΔ: 0,
      ᐃⲆΔΔᐃ: Qr,
      ⲆᐃⲆ: function (a) {
        a.y += hx * (200 + this.ᐃⲆΔΔᐃ * 800) * a.ⵠⲆᐃᐃ;
        a.x += hx * (200 + this.ᐃⲆΔΔᐃ * 800) * a.c;
        a.Δᐃᐃᐃᐃ -= hx / 6;
        if (a.Δᐃᐃᐃᐃ > 0.2) {
          a.alpha = Math.min(a.alpha + hx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - hx * Ek, sb);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min((this.ᐃⲆΔΔᐃ + 0.1) * rs.ⵠΔⲆⵠΔⲆⵠ * (Do / 1366), (this.ᐃⲆΔΔᐃ + 0.1) * rs.ⵠΔⲆⵠΔⲆⵠ + eb) * Math.max(Math.min(ff.ⲆⵠᐃⲆⲆ + 1000, 3000) / 3000, 0));
        if (this.ⲆΔⵠΔΔ.length < b) {
          var c = Math.floor(Math.random() * rs.ΔᐃⲆΔᐃᐃⲆ);
          var d = -dx.ⲆΔⲆ.x + Math.floor(Math.random() * dx.ⲆΔⲆ.w);
          var e = -dx.ⲆΔⲆ.y + Math.floor(Math.random() * dx.ⲆΔⲆ.ⵠΔⲆ);
          var f = Math.random(Math.PI);
          if (dx.ΔᐃⲆΔⲆ.ⲆⵠΔⵠΔ !== Qr) {
            d -= dx.ⲆΔⲆ.w / tk;
          }
          this.ⲆΔⵠΔΔ.push(new Aw(c, d, e, f));
        }
      }
    };
    this.ᐃⵠⵠΔΔ = {
      ⲆΔⵠΔΔ: [],
      ⲆⵠΔⵠΔ: 0,
      ᐃⲆΔΔᐃ: fg,
      ⲆᐃⲆ: function (a) {
        if (Af.ⵠᐃΔΔⲆΔᐃ()) {
          a.y += hx * a.ⵠⲆᐃⵠⲆ * (5.5 + vq * this.ᐃⲆΔΔᐃ);
        } else {
          a.y += hx * a.ⵠⲆᐃⵠⲆ * (5 + Li * this.ᐃⲆΔΔᐃ);
        }
        a.Δᐃᐃᐃᐃ -= hx / 2;
        if (Af.ΔⵠⲆΔΔΔⲆ()) {
          a.x += hx * (100 + this.ᐃⲆΔΔᐃ * 400);
        } else if (Af.ΔⲆΔΔⲆᐃΔ()) {
          a.x -= hx * (130 - this.ᐃⲆΔΔᐃ * 400);
        } else {
          a.x -= hx * (30 - this.ᐃⲆΔΔᐃ * 400);
        }
        if (a.Δᐃᐃᐃᐃ > 0.2) {
          a.alpha = Math.min(a.alpha + hx * Ou, 1);
        } else {
          a.alpha = Math.max(a.alpha - hx * Sj, Fj);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min((this.ᐃⲆΔΔᐃ * 1.5 + 0.5) * rs.ⲆⲆⲆᐃᐃⲆᐃ * (Do / 1366), (this.ᐃⲆΔΔᐃ * 1.5 + 0.5) * rs.ⲆⲆⲆᐃᐃⲆᐃ + 10) * Math.max(Math.min(ff.ᐃᐃᐃⵠⵠ + 1000, 3000) / 3000, Rl));
        if (this.ⲆΔⵠΔΔ.length < b) {
          var c = Math.floor(Math.random() * rs.ⵠⲆᐃⲆᐃΔⵠ);
          var d = -dx.ⲆΔⲆ.x + Math.floor(Math.random() * dx.ⲆΔⲆ.w);
          var e = -dx.ⲆΔⲆ.y + Math.floor(Math.random() * 400 * pq - pq * 200);
          this.ⲆΔⵠΔΔ.push(new Aw(c, d, e, 0));
        }
      }
    };
    this.Δᐃⵠⵠ = [];
    for (var d = Ah; cq > d; d++) {
      this.Δᐃⵠⵠ.push(new c());
    }
  }
  function Iw() {
    Math.random();
    return "r";
  }
  function Jw() {
    Math.random();
    return "i";
  }
  function Dw() {
    Math.random();
    return "p";
  }
  function Kw() {
    Math.random();
    return "d";
  }
  function Fw() {
    Math.random();
    return "a";
  }
  function Lw() {
    Math.random();
    return "n";
  }
  function Mw() {
    Math.random();
    return "e";
  }
  function Nw() {
    Math.random();
    return "s";
  }
  function Ow(b, c, d, e, f, i) {
    const j = (8 << (b >> k & ug)) + (0 << (b & 255)) + (24 << (b >> 24 & 255)) + (Qe << (b >> 16 & Uh));
    const a = ~(c & 43852) & (c | 43852);
    const m = ((d + 18849) * 1103515245 + 12345) % 2147483648;
    const h = e ^ 61745;
    const l = _r(j, a, m, h, ~(f & 62063) & (f | 62063), (16 << (i >> An & 255)) + (qu << (i >> 24 & 255)) + (8 << (i >> 16 & 255)) + (24 << (i >> 8 & 255)));
    (function (b, c, d, e) {
      const f = (b | 52715) & ~(b & 52715);
      const g = d ^ 11088;
      const i = (sb << (e & 255)) + (16 << (e >> 8 & 255)) + (24 << (e >> 16 & 255)) + (8 << (e >> 24 & 255));
      const a = mf(f, (0 << (c >> 16 & 255)) + (24 << (c >> Rg & 255)) + (16 << (c >> 24 & 255)) + (8 << (c & Uh)));
      const j = function (b, c, d) {
        const e = ~(b & 20381) & b | ~(b & 20381) & 20381;
        const f = c ^ 63331;
        const g = (d | 44229) & ~(d & 44229);
        const h = hf(e, f);
        const a = _r(g, e, f, g, e, f);
        return ((15311 + (h ^ a)) * 1103515245 + 12345) % 2147483648;
      }(g, i, f);
    })(j, a, m, h);
    return (l | 6759) & ~(l & 6759);
  }
  function Pw(a, b) {
    const c = (8 << (a >> 24 & 255)) + (24 << (a >> 8 & _i)) + (16 << (a >> 16 & 255)) + (gl << (a & 255));
    const d = ~(b & 57777) & 57777 | ~(b & 57777) & b;
    return (39126 + (bf(c, d, c, d, c) ^ is(d, c, d, c))) % 65303;
  }
  sk = function () {
    yw = wj(Gi(Xq));
    xw = Jk(yw);
    if (zw) {
      zw();
    }
  };
  ⵠᐃⵠⲆΔⵠΔⵠΔ = bd;
  setTimeout(function a() {
    var b = Lw() + Fw() + Ew() + Jw();
    Math.random();
    var c = "W" + Mw() + (Math.random(), "b") + (Math.random(), "S") + Bw() + function () {
      Math.random();
      return "c";
    }() + (Math.random(), "k") + Mw() + Ew();
    if (bj[c].toString().indexOf(b) === -1) {
      Math.floor = function () {
        return Math.round() + 1;
      };
    }
    var d = Nw() + Mw() + Lw() + Kw();
    var e = Dw() + Iw() + Bw() + Ew() + Bw() + Ew() + function () {
      Math.random();
      return "y";
    }() + Dw() + Mw();
    if (bj[c][e][d].toString().indexOf(b) === -1) {
      Math.floor = function () {
        return Math.round() + _h;
      };
    }
    c = Kw() + Iw() + Fw() + function () {
      Math.random();
      return "w";
    }() + (Math.random(), "I") + function () {
      Math.random();
      return "m";
    }() + Fw() + Cw() + Mw();
    d = Gw() + Fw() + Lw() + (Math.random(), "v") + Fw() + Nw() + function () {
      Math.random();
      return "R";
    }() + Mw() + Lw() + Kw() + Mw() + Iw() + Jw() + Lw() + Cw() + Gw() + Bw() + Lw() + Ew() + Mw() + (Math.random(), "x") + Ew() + function () {
      Math.random();
      return "2";
    }() + (Math.random(), "D");
    if (bj[d][e][c].toString().indexOf(b) === -1) {
      Math.floor = function () {
        return Math.round() + 1;
      };
    }
    setTimeout(a, 100000);
  }, 100000);
  function Qw(b, c) {
    this.ⵠⲆ = b;
    this.Δ = c;
    var d = this;
    this.ⵠⲆᐃⵠᐃⲆΔ = false;
    this.ΔⵠⲆⵠⲆⲆⵠ = {
      id: document.getElementById("scoreboard"),
      style: document.getElementById("scoreboard").style,
      height: 0,
      translate: {
        y: 0,
        x: 0
      },
      ⲆᐃⲆ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = this.translate.y + "px";
      },
      ᐃⲆⲆᐃⵠ: function () {
        this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + dx.ⲆⵠⲆⲆⲆⵠᐃ.ᐃᐃᐃΔⵠᐃⲆ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + ut[335] + " : " + dx.ᐃⵠⵠ + "</div><div class=\"stats\"> " + ut[334] + " : " + dx.ⲆⵠⲆⲆⲆⵠᐃ.ⲆᐃᐃⵠΔ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + ut[333] + " : " + dx.ⲆⵠⲆⲆⲆⵠᐃ.ⲆⲆΔⲆⵠ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + dx.ⲆⵠⲆⲆⲆⵠᐃ.ΔⲆᐃᐃᐃⲆⲆ + " " + ut[332] + "</div></div><div id=\"shop_points\">" + ut[331] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + ut[329] + "</div><div class=\"social\" id=\"fffacebook\">" + ut[330] + "</div></div><div id=\"bbback\">" + ut[328] + "</div>";
        this.style.display = "inline-block";
        document.getElementById("tttwitter").addEventListener("mouseup", Rw, false);
        document.getElementById("bbback").addEventListener("mouseup", function () {
          ex.ⵠᐃⲆⲆᐃ(pf.ᐃⵠⲆⵠΔ);
        }, false);
        document.getElementById("fffacebook").addEventListener("mouseup", Sw, Lk);
        this.height = Math.floor(this.id.clientHeight / jb);
        (function () {
          var a = new XMLHttpRequest();
          a.open("GET", _f + "getBreadAndScore?userid=" + lx);
          a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          a.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
              var b = JSON.parse(a.responseText);
              var c = b.b - pf.ᐃᐃⲆᐃᐃ;
              pf.ᐃᐃⲆᐃᐃ = b.b;
              pf.ⲆⲆΔⲆⵠ = b.s;
              pf.ΔⵠⲆⲆᐃ = pf.ⵠⲆⲆΔΔⲆΔ(pf.ⲆⲆΔⲆⵠ);
              pf.ⲆⲆⵠᐃⵠΔⵠ = pf.ⲆⲆⲆⵠⲆⵠᐃ(pf.ⲆⲆΔⲆⵠ);
              pf.ⵠⵠⵠⵠᐃⵠⲆ = 0;
              document.getElementById("breadWonInner").innerHTML = "" + c;
            }
          };
          a.send();
        })();
      }
    };
    var f;
    var g = 0;
    function e() {
      d.ⲆᐃⲆ();
      if (++g != 30) {
        bj.setTimeout(e, 33);
      } else {
        d.ⲆᐃⲆ();
      }
    }
    this.ⵠᐃⲆⲆᐃ = function (b) {
      if (kl === d.ⵠⲆᐃⵠᐃⲆΔ) {
        d.ⵠⲆᐃⵠᐃⲆΔ = false;
        f = b;
        a = -1;
        i();
        Bf();
      }
    };
    var a = -1;
    function i() {
      d.ⲆᐃⲆ();
      if (++a == 30) {
        d.stop();
        d.ΔⵠⲆⵠⲆⲆⵠ.style.display = "none";
        f();
        return;
      }
      bj.setTimeout(i, 33);
    }
    this.ⵠᐃᐃΔⵠ = M;
    this.stop = function () {
      this.ⵠᐃᐃΔⵠ = gh;
    };
    this.ᐃⵠⲆⵠΔ = function () {
      jx();
      document.getElementById("game_body").style.backgroundColor = rs.Ⲇᐃⵠⵠᐃ[cx.time];
      d.ΔⵠⲆⵠⲆⲆⵠ.ᐃⲆⲆᐃⵠ();
      pf.ⵠⲆΔᐃⵠ.style.display = "inline-block";
      d.ⵠᐃᐃΔⵠ = Va;
      d.ⵠⲆᐃⵠᐃⲆΔ = Yn;
      a = -Kg;
      g = 0;
      e();
    };
    this.ⲆᐃⲆ = function () {
      this.ΔⵠⲆⵠⲆⲆⵠ.translate.x = Math.floor(mq - 275);
      this.ΔⵠⲆⵠⲆⲆⵠ.translate.y = Math.floor(Qo - this.ΔⵠⲆⵠⲆⲆⵠ.height - 28);
      pf.ⵠⲆΔᐃⵠ.translate.x = this.ΔⵠⲆⵠⲆⲆⵠ.translate.x - 350;
      pf.ⵠⲆΔᐃⵠ.translate.y = this.ΔⵠⲆⵠⲆⲆⵠ.translate.y + 0;
      pf.ⵠⲆΔᐃⵠ.ⲆᐃⲆ();
      if (g != 30 || a != -1) {
        var b = Ih;
        if (g != 30) {
          b = 1500 / (g + Ek) - 50;
        }
        if (a != -bs) {
          b = -(1750 / (30 - a + 1) - 48);
        }
        this.ΔⵠⲆⵠⲆⲆⵠ.translate.y -= b;
      }
      this.ΔⵠⲆⵠⲆⲆⵠ.ⲆᐃⲆ();
    };
    this.ⵠⲆⵠΔ = function () {
      cm();
      dx.alert.ⵠⲆⵠΔ("#FFF", "#000");
    };
  }
  function Rw() {
    ᐃΔᐃⵠ.ⲆⲆⲆΔᐃⵠΔ("https://twitter.com/intent/tweet?text=I%20survived%20" + dx.ᐃⵠⵠ + "%20days%20with%20" + dx.ⲆⵠⲆⲆⲆⵠᐃ.ⲆⲆΔⲆⵠ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
  }
  function Sw() {
    ᐃΔᐃⵠ.ⲆⲆⲆΔᐃⵠΔ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
  }
  function Tw(i, F) {
    this.ⵠⲆ = i;
    this.Δ = F;
    if (bj.navigator.userAgent.indexOf("Edge") > -wh) {
      this.ᐃΔⵠⵠⲆᐃᐃ = "default";
      this.ⵠⵠᐃⲆⵠᐃⵠ = "pointer";
    } else {
      this.ᐃΔⵠⵠⲆᐃᐃ = "url('img/cursor0.png'), default";
      this.ⵠⵠᐃⲆⵠᐃⵠ = "url('img/cursor1.png'), pointer";
    }
    var I = this;
    function e(c, d, e, i, j) {
      var k = this;
      for (var m = d + 9, n = Rl, a = i, o = d; o < m; o++) {
        I.buttons[o].info.callback = q;
        I.buttons[o].info.ⲆΔᐃᐃⵠⵠΔᐃⲆ = c;
      }
      function p() {
        var b = c[a];
        pf.ⵠᐃⲆⲆⲆⵠΔ = cw(b.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, undefined, 10, Kn);
        if (b.level !== Oq) {
          pf.ⲆΔᐃᐃΔⵠᐃ = cw("Level " + b.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, Ao, iq, Kn);
        } else {
          pf.ⲆΔᐃᐃΔⵠᐃ = cw("by " + b.ⲆⲆⵠ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, ys, Bl, 8);
        }
      }
      function q() {
        if (a !== this.ᐃΔΔⲆⵠᐃᐃ && this.ᐃΔΔⲆⵠᐃᐃ !== -1) {
          if (this.ⵠΔΔⲆᐃⵠᐃ > 0) {
            if (ⲆΔᐃⵠⲆⲆᐃ === d) {
              y(C, ia, sj[Xg]);
            } else {
              y(f, ia, sj[zn]);
            }
          } else if (ⲆΔᐃⵠⲆⲆᐃ === d) {
            y(C, ja, sj[Wg]);
          } else {
            y(f, ja, "inline-block");
          }
          a = this.ᐃΔΔⲆⵠᐃᐃ;
          e(this.ᐃΔΔⲆⵠᐃᐃ);
          p();
        }
      }
      this.ᐃᐃΔᐃΔ = function () {
        for (var b = d, e = n * 3; b < m && c.length > e; b++, e++) {
          if (c[e].Ⲇⵠⵠ !== ⲆⲆⲆ.ᐃᐃΔΔⲆΔⵠ || j[e] !== 0) {
            I.buttons[b].info.ᐃΔΔⲆⵠᐃᐃ = e;
            for (var f = Ah; Rn > f; f++) {
              I.buttons[b].info.ⵠⵠ[f] = ΔⲆᐃⲆⲆ[c[e].Ⲇⵠⵠ][f];
              I.buttons[b].info.active = ja;
              I.buttons[b].info.ⵠΔΔⲆᐃⵠᐃ = j[e];
            }
          } else {
            I.buttons[b].info.ᐃΔΔⲆⵠᐃᐃ = -1;
            I.buttons[b].info.active = ia;
          }
        }
        for (; m > b; b++) {
          I.buttons[b].info.ᐃΔΔⲆⵠᐃᐃ = -Ek;
          I.buttons[b].info.active = ia;
        }
        p();
      };
      I.buttons[m].info.callback = function () {
        if (Md < n) {
          n--;
        }
        k.ᐃᐃΔᐃΔ();
      };
      I.buttons[m + 1].info.callback = function () {
        if (c.length > n * 3 + 9) {
          n++;
        }
        k.ᐃᐃΔᐃΔ();
      };
    }
    function n() {
      var b = Number(ⵠⲆⲆᐃ.get("starve_crate"));
      var c = Number(ⵠⲆⲆᐃ.get("starve_dead"));
      var d = Number(ⵠⲆⲆᐃ.get("starve_book"));
      var e = Number(ⵠⲆⲆᐃ.get("starve_bag"));
      var f = Number(ⵠⲆⲆᐃ.get("starve_skin"));
      var g = Number(ⵠⲆⲆᐃ.get("starve_accessory"));
      I.ⲆⲆⲆⲆ = f || gl;
      I.ⵠⵠᐃᐃᐃ = d || qb;
      I.ⲆⵠⲆᐃⵠ = b || 1;
      I.ΔΔΔΔⲆ = g || Qr;
      I.ΔⲆⵠⵠᐃ = e || 0;
      I.ⲆⵠΔΔⲆ = c || 0;
    }
    function o() {
      for (var a = ΔⲆⲆΔ.ΔⲆᐃᐃⲆ, b = Md; a.length > b; b++) {
        if (ⲆⲆⲆ.ΔⵠⵠⲆⲆ === a[b].Ⲇⵠⵠ) {
          I.unlock.ⲆⲆⲆⲆ[b] = Ls;
        } else {
          I.unlock.ⲆⲆⲆⲆ[b] = 0;
        }
      }
      a = ΔⲆⲆΔ.ΔΔⵠⲆᐃ;
      b = Fj;
      for (; a.length > b; b++) {
        if (ⲆⲆⲆ.ΔⵠⵠⲆⲆ === a[b].Ⲇⵠⵠ) {
          I.unlock.ΔΔΔΔⲆ[b] = Gt;
        } else {
          I.unlock.ΔΔΔΔⲆ[b] = tj;
        }
      }
      a = ΔⲆⲆΔ.ⵠⲆᐃⲆ;
      b = tj;
      for (; a.length > b; b++) {
        if (a[b].Ⲇⵠⵠ === ⲆⲆⲆ.ΔⵠⵠⲆⲆ) {
          I.unlock.ΔⲆⵠⵠᐃ[b] = bs;
        } else {
          I.unlock.ΔⲆⵠⵠᐃ[b] = 0;
        }
      }
      a = ΔⲆⲆΔ.ΔⵠᐃⲆⲆ;
      b = tj;
      for (; b < a.length; b++) {
        if (a[b].Ⲇⵠⵠ === ⲆⲆⲆ.ΔⵠⵠⲆⲆ) {
          I.unlock.ⵠⵠᐃᐃᐃ[b] = 1;
        } else {
          I.unlock.ⵠⵠᐃᐃᐃ[b] = Fj;
        }
      }
      a = ΔⲆⲆΔ.ΔΔⵠⲆⲆ;
      b = 0;
      for (; a.length > b; b++) {
        if (a[b].Ⲇⵠⵠ === ⲆⲆⲆ.ΔⵠⵠⲆⲆ) {
          I.unlock.ⲆⵠⲆᐃⵠ[b] = 1;
          I.unlock.ⲆⵠΔΔⲆ[b] = 1;
        } else {
          I.unlock.ⲆⵠⲆᐃⵠ[b] = qb;
          I.unlock.ⲆⵠΔΔⲆ[b] = Gg;
        }
      }
    }
    this.waiting = false;
    this.ΔⵠᐃΔΔⲆⵠ = bu;
    this.ⵠⵠⲆⲆᐃⲆⲆ = -Fb;
    this.ⲆᐃⲆⲆⲆⵠΔ = {
      translate: {
        x: Rl,
        y: 0
      },
      angle: 0,
      ⵠⵠ: ᐃΔ[301],
      ⵠⲆⵠΔ: function () {
        this.angle += hx * zd;
        F.save();
        F.translate(this.translate.x + this.ⵠⵠ.width / 2, this.translate.y + this.ⵠⵠ.height / ta);
        F.rotate(this.angle);
        Mm(F, this.ⵠⵠ, -this.ⵠⵠ.width / On, -this.ⵠⵠ.height / 2);
        F.restore();
      }
    };
    this.ⵠⵠⲆⲆⵠⵠΔ = {
      id: document.getElementById("langselect"),
      style: document.getElementById("langselect").style,
      translate: {
        y: yj,
        x: 0
      },
      ⲆᐃⲆ: function () {
        this.style.left = Math.floor(this.translate.x) + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ᐃᐃⲆᐃᐃ = Fj;
    this.ⲆΔⵠᐃⵠⲆᐃ = -1;
    this.ⵠΔᐃᐃΔⵠΔ = undefined;
    this.ⲆΔⵠⲆᐃⲆᐃ = "";
    this.ⲆΔΔᐃΔⲆⵠ = "";
    this.ΔᐃⵠⵠⵠⵠΔ = undefined;
    this.ΔⵠⲆⲆᐃ = 0;
    this.ⵠΔⲆᐃⲆⲆΔ = -Ls;
    this.ΔⵠⲆΔⵠΔΔ = Pl;
    this.ⵠⵠⵠⵠᐃⵠⲆ = 0;
    this.ⲆⲆⵠᐃⵠΔⵠ = xq;
    this.ᐃⵠᐃᐃⵠⲆⵠ = 0;
    this.ⲆᐃᐃⵠΔ = 0;
    this.ⵠⲆⵠΔΔΔΔ = 0;
    this.time = 0;
    this.ⲆⲆΔⲆⵠ = 0;
    this.ⲆⵠⲆⵠᐃᐃⵠ = 0;
    this.ΔⲆᐃΔⵠᐃⵠ = 0;
    this.ᐃΔⵠⵠⵠᐃⵠ = Ih;
    this.ΔⵠᐃΔΔΔᐃ = Rl;
    this.ⲆΔᐃΔⲆᐃⵠ = [];
    this.ⲆⲆΔᐃⲆ = -1;
    this.ΔᐃⵠⲆΔΔⵠ = -Ni;
    this.ᐃΔᐃⵠⲆⵠⲆ = -bd;
    this.ΔᐃⲆⵠⲆⵠΔ = es;
    this.ᐃΔⵠⵠᐃⵠⵠ = Cr;
    this.ⵠⵠⵠΔᐃⲆΔ = -1;
    this.ᐃⲆᐃⲆΔⵠΔ = -bs;
    this.ᐃⲆᐃΔⲆⵠᐃ = -1;
    this.ⲆᐃⲆᐃΔⵠⵠ = -Ga;
    this.ΔⵠⵠᐃᐃΔⲆ = undefined;
    this.ⵠΔⲆᐃⵠΔᐃ = undefined;
    this.ᐃΔⵠᐃΔΔΔ = undefined;
    this.ⵠᐃⲆⲆⲆⵠΔ = ri;
    this.ⲆΔᐃᐃΔⵠᐃ = undefined;
    this.ΔⵠⵠⲆⲆⲆⲆ = undefined;
    this.ᐃΔⵠᐃⵠᐃᐃ = undefined;
    this.ⲆᐃᐃΔᐃᐃΔ = ri;
    this.ⲆΔⲆΔΔΔⵠ = Ao;
    this.ⵠⲆⵠⵠᐃᐃᐃ = 3;
    this.ΔⵠΔⵠ = Fj;
    this.ᐃⲆᐃᐃΔⲆᐃⵠΔ = false;
    this.ⲆⵠΔᐃΔ = ⵠⲆⲆᐃ.get("starve_quality") ? ⵠⲆⲆᐃ.get("starve_quality") : "high";
    if (this.ⲆⵠΔᐃΔ === "high") {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      this.ⲆⵠΔᐃΔ = 1;
    } else {
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      this.ⲆⵠΔᐃΔ = xq;
    }
    this.ⵠᐃⵠᐃᐃᐃⲆᐃᐃ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      ⵠⲆⲆᐃ.set("starve_quality", "high", {
        expires: 30
      });
      document.getElementById("input_ratio").value = _;
      fx.ᐃΔΔΔΔⵠⲆ();
      pf.ⲆⵠΔᐃΔ = Mg;
    };
    this.ᐃΔΔΔᐃⵠᐃᐃΔ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      ⵠⲆⲆᐃ.set("starve_quality", "low", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 0.5 / (Sa / _a);
      fx.ᐃΔΔΔΔⵠⲆ();
      pf.ⲆⵠΔᐃΔ = Rl;
    };
    if (ⵠⲆⲆᐃ.get("starve_mapping") === undefined && Ua === "FR") {
      Af.ⵠⲆΔⲆⲆᐃᐃ();
      this.mapping = "azerty";
    } else {
      this.mapping = ⵠⲆⲆᐃ.get("starve_mapping") ? ⵠⲆⲆᐃ.get("starve_mapping") : "qwerty";
    }
    if (this.mapping == "azerty") {
      Af.ⵠⲆΔⲆⲆᐃᐃ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
    } else {
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
    }
    this.ⵠⲆΔⲆⲆᐃᐃ = function () {
      Af.ⵠⲆΔⲆⲆᐃᐃ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
      ⵠⲆⲆᐃ.set("starve_mapping", "azerty", {
        expires: 30
      });
    };
    this.ⲆⲆⲆⵠᐃⲆᐃ = function () {
      Af.ⲆⲆⲆⵠᐃⲆᐃ();
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      ⵠⲆⲆᐃ.set("starve_mapping", "qwerty", {
        expires: 30
      });
    };
    this.ⵠΔᐃⵠⵠΔΔ = {
      id: document.getElementById("all_rights_reserved"),
      style: document.getElementById("all_rights_reserved").style,
      translate: {
        y: 0,
        x: Rl
      },
      ⲆᐃⲆ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    n();
    this.unlock = {};
    this.unlock.ⲆⲆⲆⲆ = [];
    this.unlock.ΔⲆⵠⵠᐃ = [];
    this.unlock.ⵠⵠᐃᐃᐃ = [];
    this.unlock.ⲆⵠⲆᐃⵠ = [];
    this.unlock.ⲆⵠΔΔⲆ = [];
    this.unlock.ΔΔΔΔⲆ = [];
    this.ⵠᐃⵠⲆⲆᐃⲆ = Fj;
    this.ᐃᐃᐃⵠᐃΔΔ = o;
    o();
    this.ⵠⲆΔᐃⵠ = {
      id: document.getElementById("trevda"),
      style: document.getElementById("trevda").style,
      translate: {
        y: 0,
        x: 0
      },
      ⲆᐃⲆ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    var a;
    var r = Ih;
    function t() {
      I.ⲆᐃⲆ();
      if (++r == 30) {
        I.ⲆⲆⵠⲆⵠᐃᐃ();
        I.ΔⵠᐃΔΔⲆⵠ = Rq;
        I.ⲆᐃⲆ();
        return;
      }
      bj.setTimeout(t, 33);
    }
    this.ⵠᐃⲆⲆᐃ = function (b) {
      a = b;
      I.ΔⵠᐃΔᐃᐃΔ();
      I.ΔⵠᐃΔΔⲆⵠ = Gg;
      l = -1;
      z();
    };
    var l = -Gt;
    function z() {
      I.ⲆᐃⲆ();
      if (++l == 30) {
        ⵠⲆⲆᐃ.set("starve_nickname", I.ⲆΔᐃᐃⲆ.input.value, {
          expires: 30
        });
        I.ⲆΔᐃᐃⲆ.style.display = sj[po];
        I.ᐃⵠⲆΔⲆ.style.display = "none";
        I.ⵠⵠⲆⲆⵠⵠΔ.style.display = "none";
        I.ⵠΔᐃⵠⵠΔΔ.style.display = "none";
        I.ⵠⲆΔᐃⵠ.style.display = sj[Jt];
        I.stop();
        a();
        return;
      }
      bj.setTimeout(z, 33);
    }
    this.ⵠᐃᐃΔⵠ = vn;
    this.stop = function () {
      this.ⵠᐃᐃΔⵠ = false;
    };
    this.ᐃⵠⲆⵠΔ = function () {
      jx();
      document.getElementById("game_body").style.backgroundColor = rs.Ⲇᐃⵠⵠᐃ[cx.time];
      I.ⲆΔᐃᐃⲆ.style.display = sj[Ea];
      I.ᐃⵠⲆΔⲆ.style.display = "inline-block";
      I.ⵠⵠⲆⲆⵠⵠΔ.style.display = "inline-block";
      I.ⵠΔᐃⵠⵠΔΔ.style.display = sj[vc];
      I.ⵠⲆΔᐃⵠ.style.display = sj[iq];
      I.waiting = false;
      I.ⵠᐃᐃΔⵠ = true;
      l = -Co;
      r = fg;
      t();
    };
    this.ⵠᐃⲆⵠᐃⵠⵠ = function (a, b) {
      b = b < xq ? -b : b;
      if (da === (a.position & da)) {
        if ((a.position & K) === K) {
          a.translate.x = mq + a.translate.ⲆⲆΔᐃΔ - b;
        } else if (U === (a.position & U)) {
          a.translate.x = mq + a.translate.ⲆⲆΔᐃΔ + b;
        } else {
          a.translate.x = mq + a.translate.ⲆⲆΔᐃΔ;
        }
      } else if ((a.position & K) === K) {
        a.translate.x = a.translate.ⲆⲆΔᐃΔ - b;
      } else if ((a.position & U) === U) {
        a.translate.x = Do - a.translate.ⲆⲆΔᐃΔ + b;
      } else {
        a.translate.x = a.translate.ⲆⲆΔᐃΔ;
      }
      if ((a.position & fa) === fa) {
        if ((a.position & V) === V) {
          a.translate.y = Qo + a.translate.ⵠΔⵠΔᐃ - b;
        } else if (Y === (a.position & Y)) {
          a.translate.y = Qo + a.translate.ⵠΔⵠΔᐃ + b;
        } else {
          a.translate.y = Qo + a.translate.ⵠΔⵠΔᐃ;
        }
      } else if (V === (a.position & V)) {
        a.translate.y = a.translate.ⵠΔⵠΔᐃ - b;
      } else if (Y === (a.position & Y)) {
        a.translate.y = lq + a.translate.ⵠΔⵠΔᐃ + b;
      } else {
        a.translate.y = a.translate.ⵠΔⵠΔᐃ;
      }
      if (a.style !== undefined) {
        a.style.left = Math.floor(a.translate.x) + "px";
        a.style.top = Math.floor(a.translate.y) + "px";
      }
    };
    this.ⲆᐃⲆ = function () {
      var a = 0;
      if (r != 30 || l != -1) {
        if (r != 30) {
          a = 1500 / (r + sc) - 50;
        }
        if (l != -er) {
          a = -(1750 / (30 - l + Ni) - 48);
        }
      }
      for (var b = Ih; this.ΔⲆᐃⵠ.length > b; b++) {
        this.ⵠᐃⲆⵠᐃⵠⵠ(this.ΔⲆᐃⵠ[b], a);
      }
      for (b = gl; b < this.buttons.length; b++) {
        this.ⵠᐃⲆⵠᐃⵠⵠ(this.buttons[b].info, a);
      }
      for (b = gl; this.ⵠΔⲆᐃⲆ.length > b; b++) {
        this.ⵠᐃⲆⵠᐃⵠⵠ(this.ⵠΔⲆᐃⲆ[b], a);
      }
      this.ⲆᐃⲆⲆⲆⵠΔ.translate.x = (Do - this.ⲆᐃⲆⲆⲆⵠΔ.ⵠⵠ.width) / 2;
      this.ⲆᐃⲆⲆⲆⵠΔ.translate.y = 0;
      this.ⵠⵠⲆⲆⵠⵠΔ.translate.x = Do - 450;
      this.ⵠⵠⲆⲆⵠⵠΔ.translate.y = lq - 40;
      this.ⵠΔᐃⵠⵠΔΔ.translate.x = Do - 340;
      this.ⵠΔᐃⵠⵠΔΔ.translate.y = lq - 25;
      this.ⵠⲆΔᐃⵠ.translate.x = Do - 320;
      this.ⵠⲆΔᐃⵠ.translate.y = 80;
      if (r != 30 || l != -1) {
        var c = Ah;
        if (r != 30) {
          c = 1500 / (r + 1) - 50;
        }
        if (-Fb != l) {
          c = -(1750 / (30 - l + 1) - 48);
        }
        this.ⲆᐃⲆⲆⲆⵠΔ.translate.y -= qb < c ? c : -c;
        this.ⵠⵠⲆⲆⵠⵠΔ.translate.y -= c < Ah ? c : -c;
        this.ⵠΔᐃⵠⵠΔΔ.translate.y -= c < Rl ? c : -c;
      }
      this.ⵠⵠⲆⲆⵠⵠΔ.ⲆᐃⲆ();
      this.ⵠΔᐃⵠⵠΔΔ.ⲆᐃⲆ();
      this.ⵠⲆΔᐃⵠ.ⲆᐃⲆ();
    };
    this.ⲆᐃΔΔⲆᐃΔ = function (b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = 342;
      c.height = 342;
      var e = -Math.PI / 2;
      for (var f = 0; f < b.length; f++) {
        var g = b[f][0];
        var h = b[f][Co] * Math.PI / 180;
        d.beginPath();
        d.arc(171, 171, 170, e, e + h, false);
        d.lineTo(171, 171);
        d.fillStyle = g;
        d.fill();
        e += h;
      }
      return c;
    };
    this.ᐃⵠΔⵠⵠΔⲆᐃⵠ = function () {
      this.ⲆΔⵠⲆᐃⲆᐃ = document.getElementById("account_nickname_input").value;
      if (this.ⲆΔΔᐃΔⲆⵠ !== this.ⲆΔⵠⲆᐃⲆᐃ) {
        this.ⲆΔΔᐃΔⲆⵠ = this.ⲆΔⵠⲆᐃⲆᐃ;
        this.ΔᐃⵠⵠⵠⵠΔ = cw(this.ⲆΔⵠⲆᐃⲆᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
      }
    };
    this.ⵠⲆⵠΔ = function () {
      cm();
      pf.ⵠⵠⵠⵠᐃⵠⲆ = ᐃΔᐃⵠ.ΔΔᐃᐃᐃΔΔ(pf.ⵠⵠⵠⵠᐃⵠⲆ, pf.ⲆⲆⵠᐃⵠΔⵠ, 0.03);
      this.ΔⲆᐃⵠ[ⲆⲆΔΔⵠⵠⲆ].translate.x = this.ΔⲆᐃⵠ[0].translate.x + -72 + pf.ⵠⵠⵠⵠᐃⵠⲆ * 165;
      this.ΔⲆᐃⵠ[ⲆⲆΔΔⵠⵠⲆ].translate.ⲆⲆΔᐃΔ = this.ΔⲆᐃⵠ[ⲆⲆΔΔⵠⵠⲆ].translate.x;
      this.ΔⲆᐃⵠ[ⲆⲆΔΔⵠⵠⲆ].translate.y = this.ΔⲆᐃⵠ[0].translate.y + 30;
      this.ΔⲆᐃⵠ[ⲆⲆΔΔⵠⵠⲆ].translate.ⵠΔⵠΔᐃ = this.ΔⲆᐃⵠ[ⲆⲆΔΔⵠⵠⲆ].translate.y;
      for (var n = 2; n < this.ΔⲆᐃⵠ.length; n++) {
        if (ja === this.ΔⲆᐃⵠ[n].active) {
          this.ΔⲆᐃⵠ[n].ⵠⲆⵠΔ(F);
        }
      }
      var t;
      if ((t = this.ⲆⲆΔᐃⲆ - Date.now()) > 0) {
        var C = Math.floor(t / 60000);
        var E = Math.floor(C / 60);
        if ((C %= 60) !== this.ᐃΔᐃⵠⲆⵠⲆ) {
          this.ᐃΔᐃⵠⲆⵠⲆ = C;
          C = C < 10 ? "0" + C : "" + C;
          I.ΔᐃⲆⵠⲆⵠΔ = cw(C, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ΔᐃⵠⲆΔΔⵠ !== E) {
          this.ΔᐃⵠⲆΔΔⵠ = E;
          E = E < Vq ? "0" + E : "" + E;
          I.ᐃΔⵠⵠᐃⵠⵠ = cw(E, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (K = this.ΔⲆᐃⵠ[ᐃᐃΔⵠⲆⵠΔ]).ⵠⲆⵠΔ(F);
        var H = this.ᐃΔⵠⵠᐃⵠⵠ;
        Mm(F, H, K.translate.x - H.width / cq + 182, K.translate.y - H.height / 4 + 40, H.width / Gl, H.height / 2);
        H = this.ΔᐃⲆⵠⲆⵠΔ;
        Mm(F, H, K.translate.x - H.width / oe + 251, K.translate.y - H.height / zt + 40, H.width / Nr, H.height / 2);
      }
      if ((t = this.ⵠⵠⵠΔᐃⲆΔ - Date.now()) > 0) {
        C = Math.floor(t / 60000);
        E = Math.floor(C / 60);
        var K;
        var N = Math.floor(E / 24);
        E %= 24;
        if ((C %= 60) !== this.ⲆᐃⲆᐃΔⵠⵠ) {
          this.ⲆᐃⲆᐃΔⵠⵠ = C;
          C = Wg > C ? "0" + C : "" + C;
          I.ΔⵠⵠᐃᐃΔⲆ = cw(C, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ᐃⲆᐃΔⲆⵠᐃ !== E) {
          this.ᐃⲆᐃΔⲆⵠᐃ = E;
          E = E < 10 ? "0" + E : "" + E;
          I.ⵠΔⲆᐃⵠΔᐃ = cw(E, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (N !== this.ᐃⲆᐃⲆΔⵠΔ) {
          this.ᐃⲆᐃⲆΔⵠΔ = N;
          N = N < 10 ? "0" + N : "" + N;
          I.ᐃΔⵠᐃΔΔΔ = cw(N, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (K = this.ΔⲆᐃⵠ[ⲆⵠΔᐃⵠΔⵠ]).ⵠⲆⵠΔ(F);
        H = this.ᐃΔⵠᐃΔΔΔ;
        Mm(F, H, K.translate.x - H.width / yn + 113, K.translate.y - H.height / Dd + 40, H.width / bq, H.height / Gl);
        H = this.ⵠΔⲆᐃⵠΔᐃ;
        Mm(F, H, K.translate.x - H.width / hr + 182, K.translate.y - H.height / 4 + 40, H.width / 2, H.height / Nj);
        H = this.ΔⵠⵠᐃᐃΔⲆ;
        Mm(F, H, K.translate.x - H.width / 4 + 251, K.translate.y - H.height / 4 + 40, H.width / 2, H.height / 2);
      }
      if (Q === (this.ᐃⵠᐃΔΔ & Q)) {
        this.buttons[ⵠᐃⵠΔΔΔΔ].info.state = aw;
      } else if ((this.ᐃⵠᐃΔΔ & p) === p) {
        this.buttons[ⲆⵠⲆᐃᐃⲆⲆ].info.state = aw;
      } else if ((this.ᐃⵠᐃΔΔ & d) === d) {
        this.buttons[ⵠⵠⵠΔⲆᐃⵠ].info.state = aw;
      } else if ((this.ᐃⵠᐃΔΔ & b) === b) {
        this.buttons[ΔΔᐃⲆΔΔᐃ].info.state = aw;
      } else if (m === (this.ᐃⵠᐃΔΔ & m)) {
        this.buttons[ᐃⵠΔⵠᐃᐃΔ].info.state = aw;
      } else if ((this.ᐃⵠᐃΔΔ & v) === v) {
        this.buttons[ⵠⲆⲆΔⵠΔⲆ].info.state = aw;
      } else if (c === (this.ᐃⵠᐃΔΔ & c) || (this.ᐃⵠᐃΔΔ & Z) === Z || (this.ᐃⵠᐃΔΔ & w) === w || P === (this.ᐃⵠᐃΔΔ & P) || (this.ᐃⵠᐃΔΔ & k) === k || (this.ᐃⵠᐃΔΔ & x) === x || J === (this.ᐃⵠᐃΔΔ & J)) {
        this.buttons[ΔⵠⲆⵠΔᐃΔ].info.state = aw;
      } else if (M === (this.ᐃⵠᐃΔΔ & M) || D === (this.ᐃⵠᐃΔΔ & D) || B === (this.ᐃⵠᐃΔΔ & B) || (this.ᐃⵠᐃΔΔ & ba) === ba || S === (this.ᐃⵠᐃΔΔ & S) || (this.ᐃⵠᐃΔΔ & ca) === ca) {
        this.buttons[ⵠⵠⵠΔⲆᐃⵠ].info.state = aw;
      } else if (W === (this.ᐃⵠᐃΔΔ & W) || (this.ᐃⵠᐃΔΔ & L) === L || G === (this.ᐃⵠᐃΔΔ & G)) {
        this.buttons[ΔᐃⲆⵠⲆΔⵠ].info.state = aw;
      } else if (O === (this.ᐃⵠᐃΔΔ & O)) {
        this.buttons[ΔΔᐃⲆΔΔᐃ].info.state = aw;
      }
      if ((this.ᐃⵠᐃΔΔ & p) === p) {
        if (this.ᐃΔⵠᐃⵠᐃᐃ === this.ᐃᐃᐃⵠⵠΔⲆ) {
          this.ΔⵠⵠⲆⲆⲆⲆ = this.ᐃⲆⲆⵠᐃⵠᐃ;
          this.buttons[this.ᐃⲆⲆⵠᐃⵠᐃ].info.active = ia;
          this.buttons[this.ⵠᐃᐃΔΔΔᐃ].info.active = ia;
          this.buttons[this.ΔᐃⲆΔⵠΔᐃ].info.active = ia;
        } else {
          this.buttons[this.ᐃⲆⲆⵠᐃⵠᐃ].info.active = ja;
          this.buttons[this.ⵠᐃᐃΔΔΔᐃ].info.active = ja;
          this.buttons[this.ΔᐃⲆΔⵠΔᐃ].info.active = ja;
        }
        if (this.ᐃΔⵠᐃⵠᐃᐃ === this.ⲆΔⲆⲆᐃΔⲆ) {
          this.buttons[this.ⲆΔⲆⲆᐃΔⲆ].info.state = aw;
        } else if (this.ⲆⲆⵠᐃᐃⵠΔ === this.ᐃΔⵠᐃⵠᐃᐃ) {
          this.buttons[this.ⲆⲆⵠᐃᐃⵠΔ].info.state = aw;
        } else if (this.ᐃΔⵠᐃⵠᐃᐃ === this.ᐃᐃᐃⵠⵠΔⲆ) {
          this.buttons[this.ᐃᐃᐃⵠⵠΔⲆ].info.state = aw;
        } else if (this.ᐃΔⵠᐃⵠᐃᐃ === this.Ⲇᐃⵠⵠⵠᐃⵠ) {
          this.buttons[this.Ⲇᐃⵠⵠⵠᐃⵠ].info.state = aw;
        } else if (this.ᐃΔⵠᐃⵠᐃᐃ === this.ⵠΔᐃᐃⲆⵠⲆ) {
          this.buttons[this.ⵠΔᐃᐃⲆⵠⲆ].info.state = aw;
        }
        if (this.ΔⵠⵠⲆⲆⲆⲆ === this.ᐃⲆⲆⵠᐃⵠᐃ) {
          this.buttons[this.ᐃⲆⲆⵠᐃⵠᐃ].info.state = aw;
        } else if (this.ⵠᐃᐃΔΔΔᐃ === this.ΔⵠⵠⲆⲆⲆⲆ) {
          this.buttons[this.ⵠᐃᐃΔΔΔᐃ].info.state = aw;
        } else if (this.ΔⵠⵠⲆⲆⲆⲆ === this.ΔᐃⲆΔⵠΔᐃ) {
          this.buttons[this.ΔᐃⲆΔⵠΔᐃ].info.state = aw;
        }
        if (this.ⲆᐃᐃΔᐃᐃΔ === this.ΔⵠⲆᐃᐃⲆΔ) {
          this.buttons[this.ΔⵠⲆᐃᐃⲆΔ].info.state = aw;
        } else if (this.ⵠΔⲆΔⵠⲆᐃ === this.ⲆᐃᐃΔᐃᐃΔ) {
          this.buttons[this.ⵠΔⲆΔⵠⲆᐃ].info.state = aw;
        } else if (this.ⲆᐃᐃΔᐃᐃΔ === this.ⲆⲆΔᐃⲆⵠᐃ) {
          this.buttons[this.ⲆⲆΔᐃⲆⵠᐃ].info.state = aw;
        }
        if (this.ⲆΔⲆΔΔΔⵠ === this.ᐃⵠΔΔΔⲆᐃ) {
          this.buttons[this.ᐃⵠΔΔΔⲆᐃ].info.state = aw;
        } else if (this.ⲆΔⲆΔΔΔⵠ === this.ᐃᐃΔⲆⵠⵠⵠ) {
          this.buttons[this.ᐃᐃΔⲆⵠⵠⵠ].info.state = aw;
        } else if (this.ⲆⲆᐃᐃΔⲆⲆ === this.ⲆΔⲆΔΔΔⵠ) {
          this.buttons[this.ⲆⲆᐃᐃΔⲆⲆ].info.state = aw;
        } else if (this.ᐃΔⵠⲆⲆⲆⵠ === this.ⲆΔⲆΔΔΔⵠ) {
          this.buttons[this.ᐃΔⵠⲆⲆⲆⵠ].info.state = aw;
        } else if (this.ⲆΔⲆΔΔΔⵠ === this.ᐃⵠᐃⲆΔΔⵠ) {
          this.buttons[this.ᐃⵠᐃⲆΔΔⵠ].info.state = aw;
        } else if (this.ⲆⵠⲆΔᐃⵠΔ === this.ⲆΔⲆΔΔΔⵠ) {
          this.buttons[this.ⲆⵠⲆΔᐃⵠΔ].info.state = aw;
        }
      }
      if (b === (this.ᐃⵠᐃΔΔ & b)) {
        if (this.ⵠⵠⲆⲆᐃⲆⲆ === -Fb) {
          this.buttons[Ba].info.state = aw;
        } else if (this.ⵠⵠⲆⲆᐃⲆⲆ === ow.ⲆⵠⵠΔⵠ) {
          this.buttons[Ca].info.state = aw;
        } else if (ow.ΔΔᐃᐃᐃ === this.ⵠⵠⲆⲆᐃⲆⲆ) {
          this.buttons[Fa].info.state = aw;
        } else if (this.ⵠⵠⲆⲆᐃⲆⲆ === ow.ᐃΔⵠᐃᐃ) {
          this.buttons[Ha].info.state = aw;
        } else if (ow.ᐃⵠΔΔⲆ === this.ⵠⵠⲆⲆᐃⲆⲆ) {
          this.buttons[Da].info.state = aw;
        }
        if (this.ⵠⲆⵠⵠᐃᐃᐃ === 0) {
          this.buttons[va].info.state = aw;
        } else if (Mg === this.ⵠⲆⵠⵠᐃᐃᐃ) {
          this.buttons[wa].info.state = aw;
        } else if (this.ⵠⲆⵠⵠᐃᐃᐃ === ta) {
          this.buttons[xa].info.state = aw;
        } else if (this.ⵠⲆⵠⵠᐃᐃᐃ === 3) {
          this.buttons[ya].info.state = aw;
        } else if (this.ⵠⲆⵠⵠᐃᐃᐃ === mg) {
          this.buttons[za].info.state = aw;
        } else if (this.ⵠⲆⵠⵠᐃᐃᐃ === 5) {
          this.buttons[Aa].info.state = aw;
        }
      }
      if ((this.ᐃⵠᐃΔΔ & Q) === Q && xq === ᐃΔᐃᐃ.ΔΔΔᐃᐃⵠⵠ) {
        if (this.buttons[na].ᐃᐃⲆᐃⲆⲆᐃ(kf.ΔⲆⵠⲆ)) {
          this.buttons[na].hint = Math.min(1, this.buttons[na].hint + hx * 1.5);
        } else {
          this.buttons[na].hint = Math.max(et, this.buttons[na].hint - hx * 1.5);
        }
        if (this.buttons[oa].ᐃᐃⲆᐃⲆⲆᐃ(kf.ΔⲆⵠⲆ)) {
          this.buttons[oa].hint = Math.min(er, this.buttons[oa].hint + hx * 1.5);
        } else {
          this.buttons[oa].hint = Math.max(0, this.buttons[oa].hint - hx * 1.5);
        }
        if (this.buttons[pa].ᐃᐃⲆᐃⲆⲆᐃ(kf.ΔⲆⵠⲆ)) {
          this.buttons[pa].hint = Math.min(Mg, this.buttons[pa].hint + hx * 1.5);
        } else {
          this.buttons[pa].hint = Math.max(yj, this.buttons[pa].hint - hx * 1.5);
        }
        if (this.buttons[sa].ᐃᐃⲆᐃⲆⲆᐃ(kf.ΔⲆⵠⲆ)) {
          this.buttons[sa].hint = Math.min(Ek, this.buttons[sa].hint + hx * 1.5);
        } else {
          this.buttons[sa].hint = Math.max(0, this.buttons[sa].hint - hx * 1.5);
        }
        if (this.buttons[qa].ᐃᐃⲆᐃⲆⲆᐃ(kf.ΔⲆⵠⲆ)) {
          this.buttons[qa].hint = Math.min(1, this.buttons[qa].hint + hx * 1.5);
        } else {
          this.buttons[qa].hint = Math.max(An, this.buttons[qa].hint - hx * 1.5);
        }
        if (this.buttons[ra].ᐃᐃⲆᐃⲆⲆᐃ(kf.ΔⲆⵠⲆ)) {
          this.buttons[ra].hint = Math.min(1, this.buttons[ra].hint + hx * 1.5);
        } else {
          this.buttons[ra].hint = Math.max(qb, this.buttons[ra].hint - hx * 1.5);
        }
      }
      var U = Lu;
      if ((this.ᐃⵠᐃΔΔ & (Z | w | P | k | x | J)) > 1) {
        H = Δᐃ.ᐃⵠᐃΔⲆΔΔ;
        F.save();
        F.translate(mq, ma + H.height / 4);
        if (this.ΔΔᐃⲆⵠ === bd) {
          this.ⲆⵠⲆⵠΔᐃⲆ += hx / 3;
          U = this.ⲆⵠⵠⲆⲆᐃΔ - 100 / Math.pow(Lu + this.ⲆⵠⲆⵠΔᐃⲆ, ig + this.ⲆⵠⲆⵠΔᐃⲆ);
          F.rotate(U);
        }
        Mm(F, H, -H.width / 4, -H.height / mg, H.width / 2, H.height / Nj);
        F.restore();
      }
      if (Gg === ᐃΔᐃᐃ.ΔΔΔᐃᐃⵠⵠ) {
        if (ow.ⲆⵠⵠΔⵠ === ᐃΔᐃᐃ.ΔΔΔⲆⲆ) {
          this.buttons[na].info.state = aw;
        } else if (ow.ᐃⵠΔΔⲆ === ᐃΔᐃᐃ.ΔΔΔⲆⲆ) {
          this.buttons[oa].info.state = aw;
        } else if (ᐃΔᐃᐃ.ΔΔΔⲆⲆ === ow.ΔΔᐃᐃᐃ) {
          this.buttons[qa].info.state = aw;
        } else if (ᐃΔᐃᐃ.ΔΔΔⲆⲆ === ow.ᐃΔⵠᐃᐃ) {
          this.buttons[ra].info.state = aw;
        } else if (ᐃΔᐃᐃ.ΔΔΔⲆⲆ === ow.ΔⲆΔⵠΔ) {
          this.buttons[pa].info.state = aw;
        } else if (ow.ⵠⲆⲆⵠΔ === ᐃΔᐃᐃ.ΔΔΔⲆⲆ) {
          this.buttons[sa].info.state = aw;
        }
      }
      for (n = 1; this.buttons.length > n; n++) {
        if (this.buttons[n].info.active === ja) {
          this.buttons[n].ⵠⲆⵠΔ(F);
        }
      }
      this.ΔⲆᐃⵠ[0].ⵠⲆⵠΔ(F);
      if ((this.ᐃⵠᐃΔΔ & (j | R)) > 0) {
        H = this.ΔᐃⵠⵠⵠⵠΔ;
        Mm(F, H, mq - H.width / fd, 138, H.width / 2, H.height / Od);
      }
      var V = Math.max(1, Math.min(zh, Math.floor((pf.ΔⵠⲆⲆᐃ + Mh) / 2)));
      this.ΔⲆᐃⵠ[V].active = ja;
      this.ΔⲆᐃⵠ[V].ⵠⲆⵠΔ(F);
      this.ΔⲆᐃⵠ[V].active = ia;
      this.buttons[Ah].ⵠⲆⵠΔ(F);
      if ((this.ᐃⵠᐃΔΔ & (d | D | ba | M | S)) > 1) {
        var g = (this.ᐃⵠᐃΔΔ & (D | ba | M | S)) > 1 ? -190 : 0;
        H = ᐃΔ[29][this.ΔⲆⵠⵠᐃ][this.ⵠᐃⵠⲆⲆᐃⲆ];
        Mm(F, H, mq - H.width / cq + g, 183, H.width / 2, H.height / 2);
        this.ΔⵠΔⵠ = (this.ΔⵠΔⵠ + hx * 1000) % 2000;
        var u = (this.ΔⵠΔⵠ < 1000) * 4.5 ? this.ΔⵠΔⵠ / 1000 : (2000 - this.ΔⵠΔⵠ) / 1000;
        H = ᐃΔ[28][this.ⵠⵠᐃᐃᐃ][this.ⵠᐃⵠⲆⲆᐃⲆ];
        Mm(F, H, mq - H.width / Nh - 62 + u + g, 240, H.width / 2, H.height / 2);
        H = ᐃΔ[7][this.ⲆⲆⲆⲆ][this.ⵠᐃⵠⲆⲆᐃⲆ];
        Mm(F, H, mq - H.width / 4 - 54 + u + g, 272, H.width / Gl, H.height / 2);
        Mm(F, H, mq - H.width / hr + 54 - u + g, 272, H.width / 2, H.height / nd);
        H = ᐃΔ[255][this.ⲆⲆⲆⲆ][this.ⵠᐃⵠⲆⲆᐃⲆ];
        Mm(F, H, mq - H.width / Nh + g, 222, H.width / 2, H.height / 2);
        H = ᐃΔ[796][this.ΔΔΔΔⲆ][this.ⵠᐃⵠⲆⲆᐃⲆ];
        Mm(F, H, mq - H.width / Oa + g, 222, H.width / zd, H.height / 2);
      }
      if (d === (this.ᐃⵠᐃΔΔ & d)) {
        H = ᐃΔ[250][this.ⲆⵠⲆᐃⵠ][this.ⵠᐃⵠⲆⲆᐃⲆ];
        Mm(F, H, mq - H.width / fd - 61, 406 - H.height / zt, H.width / 2, H.height / 2);
        H = ᐃΔ[250][this.ⲆⵠΔΔⲆ][this.ⵠᐃⵠⲆⲆᐃⲆ];
        Mm(F, H, mq - H.width / 4 + 53, 406 - H.height / ge, H.width / 2, H.height / bq);
      }
      if ((this.ᐃⵠᐃΔΔ & B) === B) {
        H = ᐃΔ[250][this.ⲆⵠΔΔⲆ][this.ⵠᐃⵠⲆⲆᐃⲆ];
        Mm(F, H, mq - H.width / oe - 200, 268 - H.height / co, H.width / 2, H.height / jb);
      }
      if ((this.ᐃⵠᐃΔΔ & ca) === ca) {
        H = ᐃΔ[250][this.ⲆⵠⲆᐃⵠ][this.ⵠᐃⵠⲆⲆᐃⲆ];
        Mm(F, H, mq - H.width / zt - 200, 268 - H.height / aq, H.width / qo, H.height / il);
      }
      if (Ga < (this.ᐃⵠᐃΔΔ & (D | ba | M | S | B | ca))) {
        for (n = Ga; this.buttons.length > n; n++) {
          if ((this.buttons[n].view & this.ᐃⵠᐃΔΔ) !== Ih) {
            var Y = this.buttons[n].info;
            if (Y.ᐃΔΔⲆⵠᐃᐃ >= 0) {
              H = Y.ⲆΔᐃᐃⵠⵠΔᐃⲆ[Y.ᐃΔΔⲆⵠᐃᐃ].ᐃⵠⵠ;
              Mm(F, H, Y.translate.x - H.width / 8 + 44.5, Y.translate.y - H.height / 8 + 45.5, H.width / Og, H.height / eh);
              if (Y.ⵠΔΔⲆᐃⵠᐃ !== 1) {
                H = Δᐃ.ᐃⲆᐃⵠⲆⲆⲆ;
                Mm(F, H, Y.translate.x - H.width / hr + 44.5, Y.translate.y - H.height / Oa + 44.5, H.width / 2, H.height / 2);
              }
            }
          }
        }
        H = this.ⵠᐃⲆⲆⲆⵠΔ;
        Mm(F, H, mq - 312, 375, H.width / Ol, H.height / Nj);
        H = this.ⲆΔᐃᐃΔⵠᐃ;
        Mm(F, H, mq - 312, 395, H.width / qo, H.height / 2);
      }
      if (this.ᐃᐃⲆᐃᐃ !== this.ⲆΔⵠᐃⵠⲆᐃ) {
        this.ⲆΔⵠᐃⵠⲆᐃ = this.ᐃᐃⲆᐃᐃ;
        this.ⵠΔᐃᐃΔⵠΔ = cw("" + this.ᐃᐃⲆᐃᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
      }
      Mm(F, this.ⵠΔᐃᐃΔⵠΔ, this.ΔⲆᐃⵠ[yj].translate.x + 350, nr, this.ⵠΔᐃᐃΔⵠΔ.w2, this.ⵠΔᐃᐃΔⵠΔ.ᐃⵠᐃΔᐃ);
      if (this.ⵠΔⲆᐃⲆⲆΔ !== this.ΔⵠⲆⲆᐃ) {
        this.ⵠΔⲆᐃⲆⲆΔ = this.ΔⵠⲆⲆᐃ;
        this.ΔⵠⲆΔⵠΔΔ = cw("LVL " + (this.ΔⵠⲆⲆᐃ + Ls), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, Mk, 30, 24, ri, undefined, Yo, Mk, "#3F3019", 20);
      }
      Mm(F, this.ΔⵠⲆΔⵠΔΔ, this.ΔⲆᐃⵠ[sb].translate.x + 94, sb, this.ΔⵠⲆΔⵠΔΔ.w2, this.ΔⵠⲆΔⵠΔΔ.ᐃⵠᐃΔᐃ);
      if (xq === ᐃΔᐃᐃ.ΔΔΔᐃᐃⵠⵠ) {
        var aa;
        if ((aa = this.buttons[na].hint) > 0) {
          H = Δᐃ.ⲆⵠⲆΔⵠΔⵠ;
          Mm(F, H, mq - H.width / $j, -36 - H.height * ᐃΔᐃⵠ.ⵠⵠΔⲆᐃ(1 - aa) / 2, H.width / 2, H.height / br);
        }
        if ((aa = this.buttons[oa].hint) > 0) {
          H = Δᐃ.ᐃⲆⵠⵠᐃⵠΔ;
          Mm(F, H, mq - H.width / Qt, -36 - H.height * ᐃΔᐃⵠ.ⵠⵠΔⲆᐃ(1 - aa) / 2, H.width / qi, H.height / il);
        }
        if ((aa = this.buttons[pa].hint) > Qr) {
          H = Δᐃ.ⵠᐃⵠⵠᐃᐃΔ;
          Mm(F, H, mq - H.width / Mu, -36 - ᐃΔᐃⵠ.ⵠⵠΔⲆᐃ(1 - aa) * H.height / jg, H.width / Nr, H.height / br);
        }
        if ((aa = this.buttons[sa].hint) > 0) {
          H = Δᐃ.ⵠⲆⵠᐃⲆᐃᐃ;
          Mm(F, H, mq - H.width / cq, -36 - ᐃΔᐃⵠ.ⵠⵠΔⲆᐃ(bs - aa) * H.height / Ht, H.width / il, H.height / br);
        }
        if ((aa = this.buttons[ra].hint) > 0) {
          H = Δᐃ.ΔᐃΔⲆᐃᐃⵠ;
          Mm(F, H, mq - H.width / yn, -36 - H.height * ᐃΔᐃⵠ.ⵠⵠΔⲆᐃ(1 - aa) / 2, H.width / 2, H.height / 2);
        }
        if ((aa = this.buttons[qa].hint) > 0) {
          H = Δᐃ.ⵠⵠⵠᐃΔΔⵠ;
          Mm(F, H, mq - H.width / 4, -36 - ᐃΔᐃⵠ.ⵠⵠΔⲆᐃ(1 - aa) * H.height / il, H.width / 2, H.height / 2);
        }
      }
      if (this.ΔΔᐃⲆⵠ === 1 && Math.abs(U - this.ⲆⵠⵠⲆⲆᐃΔ) < 0.006) {
        F.globalAlpha = Math.min(_, this.ΔΔΔΔᐃⲆΔ * 3);
        H = Δᐃ.ⲆΔΔⲆⲆⲆⲆ;
        F.save();
        F.translate(mq, 260);
        this.ΔΔΔΔᐃⲆΔ += hx;
        F.rotate(this.ΔΔΔΔᐃⲆΔ);
        Mm(F, H, -H.width / 2, -H.height / qi, H.width, H.height);
        F.restore();
        u = 1.05 + Math.cos(this.ΔΔΔΔᐃⲆΔ * 5) * 0.05;
        if (this.ⵠΔᐃΔⲆⵠⲆ === bu) {
          var da = u * (H = ΔⲆⲆΔ.ΔⲆᐃᐃⲆ[this.ᐃⲆΔΔΔⲆⲆ].ᐃⵠⵠ).width;
          var ea = H.height * u;
          Mm(F, H, mq - da / 2, 260 - ea / fh, da, ea);
        } else if (this.ⵠΔᐃΔⲆⵠⲆ === 1) {
          da = u * (H = ΔⲆⲆΔ.ΔⲆᐃᐃⲆ[0].ᐃⵠⵠ).width;
          ea = H.height * u;
          Mm(F, H, mq - da / br, 260 - ea / 2, da, ea);
          da = (H = ΔⲆⲆΔ.ΔΔⵠⲆᐃ[this.ᐃⲆΔΔΔⲆⲆ].ᐃⵠⵠ).width * u;
          ea = H.height * u;
          Mm(F, H, mq - da / 2, 260 - ea / X, da, ea);
        } else if (this.ⵠΔᐃΔⲆⵠⲆ === 2) {
          da = (H = ΔⲆⲆΔ.ⵠⲆᐃⲆ[this.ᐃⲆΔΔΔⲆⲆ].ᐃⵠⵠ).width * u;
          ea = H.height * u;
          Mm(F, H, mq - da / br, 180 - ea / 2, da, ea);
          da = u * (H = ΔⲆⲆΔ.ΔⲆᐃᐃⲆ[Gg].ᐃⵠⵠ).width;
          ea = H.height * u;
          Mm(F, H, mq - da / Nj, 260 - ea / qo, da, ea);
        } else if (this.ⵠΔᐃΔⲆⵠⲆ === 3) {
          da = (H = ΔⲆⲆΔ.ΔⵠᐃⲆⲆ[this.ᐃⲆΔΔΔⲆⲆ].ᐃⵠⵠ).width * u;
          ea = H.height * u;
          F.save();
          F.translate(mq, 260);
          F.rotate(Math.PI);
          Mm(F, H, -da / Ol, -ea / 2, da, ea);
          F.restore();
        } else if (this.ⵠΔᐃΔⲆⵠⲆ === 4) {
          da = (H = ΔⲆⲆΔ.ΔΔⵠⲆⲆ[this.ᐃⲆΔΔΔⲆⲆ].ᐃⵠⵠ).width * u;
          ea = H.height * u;
          Mm(F, H, mq - da / qi, 260 - ea / Gl, da, ea);
        }
        H = this.Δⵠᐃⵠⵠᐃᐃ;
        Mm(F, H, mq - H.width / eh, 340, H.width / 2, H.height / X);
        H = this.ⲆⵠⲆΔΔΔⵠ;
        Mm(F, H, mq - H.width / Mu, 365, H.width / 2, H.height / 2);
        if (this.ΔΔΔΔᐃⲆΔ > $q) {
          this.ΔΔᐃⲆⵠ = 0;
          q(c);
        }
        F.globalAlpha = 1;
      }
      dx.alert.ⵠⲆⵠΔ("#FFF", "#000");
      if (I.waiting) {
        this.ⲆᐃⲆⲆⲆⵠΔ.ⵠⲆⵠΔ();
      }
    };
    var u = 0;
    var Q = Math.pow(2, u++);
    var b = Math.pow(tk, u++);
    this.ⵠᐃΔᐃΔ = b;
    var v = Math.pow(2, u++);
    var d = Math.pow(bq, u++);
    var c = Math.pow(2, u++);
    var m = Math.pow(2, u++);
    var p = Math.pow(2, u++);
    var A = Math.pow(Ol, u++);
    this.ⲆΔΔⵠΔ = A;
    var C = Math.pow(On, u++);
    var f = Math.pow(2, u++);
    var Z = Math.pow(Gl, u++);
    var w = Math.pow(On, u++);
    var P = Math.pow(2, u++);
    var k = Math.pow(jg, u++);
    var x = Math.pow(Ol, u++);
    var J = Math.pow(qi, u++);
    var M = Math.pow(qi, u++);
    var B = Math.pow(2, u++);
    var D = Math.pow(zd, u++);
    var ba = Math.pow(Ht, u++);
    var S = Math.pow(Od, u++);
    var ca = Math.pow(Nr, u++);
    var R = Math.pow(Od, u++);
    var j = Math.pow(jg, u++);
    var W = Math.pow(2, u++);
    this.ΔⲆΔᐃΔ = W;
    var L = Math.pow(Ol, u++);
    this.ΔⲆᐃⵠⲆ = L;
    var G = Math.pow(2, u++);
    this.ⲆⲆⵠΔⵠ = G;
    var O = Math.pow(jb, u++);
    function y(a, b, c) {
      for (var d = sb; I.ΔⲆᐃⵠ.length > d; d++) {
        if ((I.ΔⲆᐃⵠ[d].view & a) !== Ah) {
          I.ΔⲆᐃⵠ[d].active = b;
        }
      }
      for (d = 0; I.buttons.length > d; d++) {
        if (I.buttons[d].view & a) {
          I.buttons[d].info.active = b;
        }
      }
      for (d = 0; I.ⵠΔⲆᐃⲆ.length > d; d++) {
        if (I.ⵠΔⲆᐃⲆ[d].view & a) {
          I.ⵠΔⲆᐃⲆ[d].style.display = c;
        }
      }
    }
    this.ᐃⵠᐃΔΔ = Q;
    function q(a) {
      if (I.ΔⵠᐃΔΔⲆⵠ !== ds) {
        y(C, ia, "none");
        y(f, ia, "none");
        H();
        if (I.ᐃⵠᐃΔΔ !== a && I.ΔΔᐃⲆⵠ < 1) {
          I.ⵠⲆΔᐃⵠ.style.display = Q === a || a === c || b === a || a === p || d === a || m === a ? sj[bg] : "none";
          y(I.ᐃⵠᐃΔΔ, ia, sj[aa]);
          I.ᐃⵠᐃΔΔ = a;
          y(I.ᐃⵠᐃΔΔ, ja, "inline-block");
        }
      }
    }
    function H() {
      var a = Number(ⵠⲆⲆᐃ.get("starve_crate"));
      var b = Number(ⵠⲆⲆᐃ.get("starve_dead"));
      var c = Number(ⵠⲆⲆᐃ.get("starve_book"));
      var d = Number(ⵠⲆⲆᐃ.get("starve_bag"));
      var e = Number(ⵠⲆⲆᐃ.get("starve_skin"));
      var f = Number(ⵠⲆⲆᐃ.get("starve_accessory"));
      if (pf.unlock.ⲆⲆⲆⲆ[pf.ⲆⲆⲆⲆ] <= qb) {
        pf.ⲆⲆⲆⲆ = pf.unlock.ⲆⲆⲆⲆ[e] > bu ? e : Ah;
      }
      if (pf.unlock.ⵠⵠᐃᐃᐃ[pf.ⵠⵠᐃᐃᐃ] <= 0) {
        pf.ⵠⵠᐃᐃᐃ = pf.unlock.ⵠⵠᐃᐃᐃ[c] > 0 ? c : yj;
      }
      if (pf.unlock.ⲆⵠΔΔⲆ[pf.ⲆⵠΔΔⲆ] <= 0) {
        pf.ⲆⵠΔΔⲆ = pf.unlock.ⲆⵠΔΔⲆ[b] > 0 ? b : Rl;
      }
      if (pf.unlock.ⲆⵠⲆᐃⵠ[pf.ⲆⵠⲆᐃⵠ] <= An) {
        pf.ⲆⵠⲆᐃⵠ = pf.unlock.ⲆⵠⲆᐃⵠ[a] > 0 ? a : 0;
      }
      if (pf.unlock.ΔΔΔΔⲆ[pf.ΔΔΔΔⲆ] <= 0) {
        pf.ΔΔΔΔⲆ = pf.unlock.ΔΔΔΔⲆ[f] > 0 ? f : 0;
      }
      if (pf.unlock.ΔⲆⵠⵠᐃ[pf.ΔⲆⵠⵠᐃ] <= 0) {
        pf.ΔⲆⵠⵠᐃ = pf.unlock.ΔⲆⵠⵠᐃ[d] > et ? d : 0;
      }
    }
    function N(a, b, c) {
      const d = new XMLHttpRequest();
      d.open("GET", a);
      d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      d.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          if (b !== undefined) {
            b(d.responseText);
          }
        } else if (this.readyState == aq && c !== Xl) {
          c();
        }
      };
      d.send();
    }
    function T() {
      if (dx.ⲆⵠⲆⵠⲆⵠΔ !== undefined && dx.ᐃΔⵠⲆᐃⲆᐃ !== undefined && kh !== dx.ⵠⲆΔΔΔᐃⲆ) {
        H();
        if (Ef % nd) {
          console.log(undefined);
          ᐃΔᐃᐃ.connect();
        } else {
          console.log(undefined);
          if (bj.Widget.isBlocked === 1) {
            bj.Widget.createAdPlayer(ᐃΔᐃᐃ.connect.bind(ᐃΔᐃᐃ), ᐃΔᐃᐃ.connect.bind(ᐃΔᐃᐃ));
          } else {
            bj.Widget.preroll();
            bj.Widget.play = ᐃΔᐃᐃ.connect.bind(ᐃΔᐃᐃ);
          }
        }
      }
    }
    this.ⵠⵠⲆᐃᐃⲆⵠ = qb;
    this.ⵠⵠⵠⲆ = q;
    this.ⲆⵠᐃⲆⵠΔΔ = function () {
      if (I.waiting === false) {
        dx.reconnect.enabled = Wh;
        I.waiting = true;
        if (dx.ⲆⵠⲆⵠⲆⵠΔ) {
          T();
        } else {
          N(`${_f}token`, function (a) {
            const b = a.split("_");
            const c = b[Ah] + "_";
            const d = Number(b[Gt]);
            const e = Math.abs(function (a) {
              return cn(a, 8260, 46947, 8004, 37330, 5330);
            }(d));
            dx.ⲆⵠⲆⵠⲆⵠΔ = c + e;
            T();
          }, function () {
            I.waiting = Bo;
          });
        }
        N(`${Ff}get`, function (a) {
          const b = a.split("_");
          const c = b[0] + "_";
          const d = Number(b[1]);
          const e = Math.abs(ns(d));
          dx.ᐃΔⵠⲆᐃⲆᐃ = c + e;
          T();
        }, function () {
          I.waiting = ml;
        });
        N(`${Ff}set`, function (a) {
          const b = a.split("_");
          const c = b[Md] + "_";
          const d = Number(b[Kg]);
          const e = Math.abs(pt(d));
          dx.ⵠⲆΔΔΔᐃⲆ = c + e;
          T();
        }, function () {
          I.waiting = false;
        });
      }
    };
    var K = 1;
    var U = 2;
    var V = Nh;
    var Y = 8;
    var da = 16;
    var fa = 32;
    var ha = Qr;
    var ia = fg;
    var ja = 1;
    if (bj.innerWidth < 1300) {
      this.ⲆΔᐃᐃⲆ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ja,
        position: V | K,
        view: Q,
        translate: {
          ⲆⲆΔᐃΔ: 200,
          y: et,
          ⵠΔⵠΔᐃ: 184,
          x: 0
        }
      };
    } else {
      this.ⲆΔᐃᐃⲆ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ja,
        position: V | da,
        view: Q,
        translate: {
          ⵠΔⵠΔᐃ: 184,
          y: 0,
          x: 0,
          ⲆⲆΔᐃΔ: -180
        }
      };
    }
    this.ⲆΔᐃᐃⲆ.id.addEventListener("keyup", function (a) {
      a.preventDefault();
      if (Zh == a.keyCode && !I.waiting && !I.ᐃⲆᐃᐃΔⲆᐃⵠΔ) {
        I.ⲆⵠᐃⲆⵠΔΔ();
      }
    });
    this.ⲆΔᐃᐃⲆ.input.value = ⵠⲆⲆᐃ.get("starve_nickname") ? ⵠⲆⲆᐃ.get("starve_nickname") : "";
    this.ⲆΔΔⵠⵠΔⵠⲆⲆ = {
      id: document.getElementById("account_nickname_block"),
      style: document.getElementById("account_nickname_block").style,
      input: document.getElementById("account_nickname_input"),
      active: ia,
      position: V | da,
      view: b,
      translate: {
        y: 0,
        ⲆⲆΔᐃΔ: -122,
        x: 0,
        ⵠΔⵠΔᐃ: 110
      }
    };
    if (bj.innerWidth < 1300) {
      this.ᐃⵠⲆΔⲆ = {
        id: document.getElementById(sj[Is]),
        style: document.getElementById(sj[jq]).style,
        active: ja,
        position: V | K,
        view: Q,
        translate: {
          x: xq,
          y: Ih,
          ⵠΔⵠΔᐃ: 225,
          ⲆⲆΔᐃΔ: 208
        }
      };
    } else {
      this.ᐃⵠⲆΔⲆ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ja,
        position: V | da,
        view: Q,
        translate: {
          y: tj,
          ⵠΔⵠΔᐃ: 225,
          ⲆⲆΔᐃΔ: -180,
          x: 0
        }
      };
    }
    this.ΔⲆⲆⵠ = {
      id: document.getElementById("leaderboard"),
      style: document.getElementById("leaderboard").style,
      active: ia,
      position: V | da,
      view: p,
      translate: {
        y: 0,
        ⵠΔⵠΔᐃ: 190,
        ⲆⲆΔᐃΔ: -294.5,
        x: 0
      }
    };
    this.ⵠⵠⲆⲆⲆⲆⲆᐃΔ = {
      id: document.getElementById("stats_box"),
      style: document.getElementById("stats_box").style,
      active: ia,
      position: V | da,
      view: b,
      translate: {
        ⵠΔⵠΔᐃ: 187,
        ⲆⲆΔᐃΔ: 125,
        y: An,
        x: sb
      }
    };
    this.ⵠⵠᐃᐃⲆΔᐃⵠⵠ = {
      id: document.getElementById("serverAddressBlock"),
      style: document.getElementById("serverAddressBlock").style,
      input: document.getElementById("serverAddressInput"),
      active: ia,
      position: V | da,
      view: G,
      translate: {
        x: 0,
        y: 0,
        ⲆⲆΔᐃΔ: -220,
        ⵠΔⵠΔᐃ: 350
      }
    };
    u = xq;
    this.ⵠΔⲆᐃⲆ = [];
    this.ⵠΔⲆᐃⲆ[u++] = this.ⲆΔᐃᐃⲆ;
    this.ⵠΔⲆᐃⲆ[u++] = this.ᐃⵠⲆΔⲆ;
    this.ⵠΔⲆᐃⲆ[u++] = this.ΔⲆⲆⵠ;
    this.ⵠΔⲆᐃⲆ[u++] = this.ⲆΔΔⵠⵠΔⵠⲆⲆ;
    this.ⵠΔⲆᐃⲆ[u++] = this.ⵠⵠⲆⲆⲆⲆⲆᐃΔ;
    this.ⵠΔⲆᐃⲆ[u++] = this.ⵠⵠᐃᐃⲆΔᐃⵠⵠ;
    u = 0;
    this.ΔⲆᐃⵠ = [];
    this.ΔⲆᐃⵠ[u++] = ew(Δᐃ.ΔⲆⵠΔᐃᐃΔ, ja, Gg, tj, K);
    this.ΔⲆᐃⵠ[u++] = ew(Δᐃ.ⲆᐃΔΔΔΔⲆ, ia, tj, 0, K);
    this.ΔⲆᐃⵠ[u++] = ew(Δᐃ.ⵠᐃᐃΔΔⵠⲆ, ia, gl, Gg, K);
    this.ΔⲆᐃⵠ[u++] = ew(Δᐃ.ᐃⲆΔⲆΔΔⲆ, ia, 0, 0, K);
    this.ΔⲆᐃⵠ[u++] = ew(Δᐃ.ΔᐃᐃΔⲆΔⲆ, ia, Md, 0, K);
    this.ΔⲆᐃⵠ[u++] = ew(Δᐃ.ⵠⲆⵠᐃᐃᐃⵠ, ia, An, qb, K);
    this.ΔⲆᐃⵠ[u++] = ew(Δᐃ.ⵠᐃΔΔⵠⵠⲆ, ia, Qr, 0, K);
    this.ΔⲆᐃⵠ[u++] = ew(Δᐃ.ⲆⲆᐃⲆⵠⵠⵠ, ia, xq, 0, K);
    this.ΔⲆᐃⵠ[u++] = ew(Δᐃ.ᐃΔⵠⵠⵠΔᐃ, ia, 0, 0, K);
    this.ΔⲆᐃⵠ[u++] = ew(Δᐃ.ⲆⵠⵠⲆⵠΔⲆ, ia, tj, Ih, K);
    this.ΔⲆᐃⵠ[u++] = ew(Δᐃ.ⵠⲆΔᐃΔⲆⲆ, ia, 0, Gg, K);
    this.ΔⲆᐃⵠ[u++] = ew(Δᐃ.ᐃⲆΔⲆΔΔΔ, ia, An, 0, K);
    this.ΔⲆᐃⵠ[u++] = ew(Δᐃ.ΔΔⲆⲆΔΔⲆ, ia, tj, 0, K);
    this.ΔⲆᐃⵠ[u++] = ew(Δᐃ.ⵠᐃⲆᐃᐃᐃᐃ, ia, 0, fg, K);
    this.ΔⲆᐃⵠ[u++] = ew(Δᐃ.ⵠⵠⲆΔⲆⲆΔ, ia, Fj, 0, K);
    this.ΔⲆᐃⵠ[u++] = ew(Δᐃ.ΔⵠⵠΔⲆⲆᐃ, ia, Md, 0, K);
    this.ΔⲆᐃⵠ[u++] = ew(Δᐃ.ⲆⲆᐃᐃⵠΔᐃ, ia, Gk, 0, K);
    this.ΔⲆᐃⵠ[u++] = ew(Δᐃ.ⲆⵠⵠⵠᐃᐃΔ, ia, Fj, 0, K);
    this.ΔⲆᐃⵠ[u++] = ew(Δᐃ.ⵠⵠⵠᐃΔᐃⵠ, ia, bu, Gk, K);
    if (bj.innerWidth < 1300) {
      this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ᐃΔᐃΔΔΔⲆ, ja, 200, yg, V | K);
    } else {
      this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ᐃΔᐃΔΔΔⲆ, ja, -753 / mg, Ps, V | da);
    }
    this.ΔⲆᐃⵠ[u++].view = Q;
    this.ΔⲆᐃⵠ[u++] = ew(Δᐃ.ᐃᐃⲆⵠᐃᐃᐃ, ja, 403, -vq, U);
    if (bj.innerWidth > 1300) {
      this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ᐃⵠᐃᐃⵠᐃⵠ, ja, -885 / 4, -319 / Nr, Y | da);
      this.ΔⲆᐃⵠ[u++].view = Q;
    }
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ΔⲆⵠΔΔⵠᐃ, ia, -323.25, 100, V | da);
    this.ΔⲆᐃⵠ[u++].view = b;
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ΔⲆᐃᐃⵠⵠⵠ, ia, -356.25, yg, V | da);
    this.ΔⲆᐃⵠ[u++].view = d;
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ⵠᐃΔⵠΔᐃⵠ, ia, -905 / 4, 50, V | da);
    this.ΔⲆᐃⵠ[u++].view = v;
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ᐃⲆᐃᐃΔⲆⲆ, ia, -1608 / Oa, 130, V | da);
    this.ΔⲆᐃⵠ[u++].view = c;
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ᐃᐃᐃⲆΔⲆΔ, ia, -279.25, 130, V | da);
    this.ΔⲆᐃⵠ[u++].view = W;
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ΔΔΔᐃⲆᐃⲆ, ia, -305.5, 130, V | da);
    this.ΔⲆᐃⵠ[u++].view = L;
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ΔⲆⵠᐃΔⲆⲆ, ia, -1222 / fd, 100, V | da);
    this.ΔⲆᐃⵠ[u++].view = G;
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ⵠᐃΔⲆⵠⵠⵠ, ia, -Δᐃ.ⵠᐃΔⲆⵠⵠⵠ.width / yn - 350, -15, V | da);
    this.ΔⲆᐃⵠ[u++].view = O;
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ⲆⵠⵠΔⵠᐃⲆ, ia, -1497 / zt, 110, V | da);
    this.ΔⲆᐃⵠ[u++].view = m;
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ⵠΔᐃⵠΔΔᐃ, ia, -1226 / co, yh, V | da);
    this.ΔⲆᐃⵠ[u++].view = p;
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ᐃⲆⵠᐃᐃⲆᐃ, ia, -345.25, 80, V | da);
    this.ΔⲆᐃⵠ[u++].view = A;
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ⵠᐃᐃΔΔⵠᐃ, ia, -385.5, 150, V | da);
    this.ΔⲆᐃⵠ[u++].view = Z;
    var ka = 360 / yg;
    var la = this.ⲆᐃΔΔⲆᐃΔ([["#25c5d6", ka * 3], ["#e2cf27", ka * 10], ["#afac98", ka * 30], ["#d88e23", ka * 57]]);
    this.ΔⲆᐃⵠ[u] = ew(la, ia, -la.width / 4, 178, V | da);
    this.ΔⲆᐃⵠ[u++].view = Z;
    this.ᐃⵠᐃᐃΔⲆΔᐃⵠ = function (a, b, c) {
      var d;
      I.ΔΔᐃⲆⵠ = 1;
      I.ⲆⵠⲆⵠΔᐃⲆ = 0;
      I.ΔΔΔΔᐃⲆΔ = fg;
      I.ⲆⵠⵠⲆⲆᐃΔ = a;
      I.ⵠΔᐃΔⲆⵠⲆ = b;
      var e = 0;
      if (b === tj) {
        for (e = 0; e < ΔⲆⲆΔ.ΔⲆᐃᐃⲆ.length && c !== ΔⲆⲆΔ.ΔⲆᐃᐃⲆ[e].id; e++);
        d = ΔⲆⲆΔ.ΔⲆᐃᐃⲆ[e];
        I.unlock.ⲆⲆⲆⲆ[e] = 1;
      } else if (b === 1) {
        for (e = 0; ΔⲆⲆΔ.ΔΔⵠⲆᐃ.length > e && ΔⲆⲆΔ.ΔΔⵠⲆᐃ[e].id !== c; e++);
        d = ΔⲆⲆΔ.ΔΔⵠⲆᐃ[e];
        I.unlock.ΔΔΔΔⲆ[e] = 1;
      } else if (b === 2) {
        for (e = 0; ΔⲆⲆΔ.ⵠⲆᐃⲆ.length > e && ΔⲆⲆΔ.ⵠⲆᐃⲆ[e].id !== c; e++);
        d = ΔⲆⲆΔ.ⵠⲆᐃⲆ[e];
        I.unlock.ΔⲆⵠⵠᐃ[e] = Ni;
      } else if (b === 3) {
        for (e = Gg; ΔⲆⲆΔ.ΔⵠᐃⲆⲆ.length > e && ΔⲆⲆΔ.ΔⵠᐃⲆⲆ[e].id !== c; e++);
        d = ΔⲆⲆΔ.ΔⵠᐃⲆⲆ[e];
        I.unlock.ⵠⵠᐃᐃᐃ[e] = 1;
      } else if (b === Zt) {
        for (e = An; e < ΔⲆⲆΔ.ΔΔⵠⲆⲆ.length && ΔⲆⲆΔ.ΔΔⵠⲆⲆ[e].id !== c; e++);
        d = ΔⲆⲆΔ.ΔΔⵠⲆⲆ[e];
        I.unlock.ⲆⵠⲆᐃⵠ[e] = Co;
        I.unlock.ⲆⵠΔΔⲆ[e] = sc;
      }
      I.ᐃⲆΔΔΔⲆⲆ = e;
      I.ⲆⵠⲆΔΔΔⵠ = cw("by " + d.ⲆⲆⵠ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, lh, 30, 24, Pl, kh, undefined, Yo, "#000000", 24);
      I.Δⵠᐃⵠⵠᐃᐃ = cw(d.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, Fg, 30, 24, Fg, undefined, lh, undefined, "#000000", 20);
    };
    this.ΔΔᐃⲆⵠ = 0;
    this.ⲆⵠⲆⵠΔᐃⲆ = qb;
    this.ⲆⵠⵠⲆⲆᐃΔ = Ah;
    this.ⵠΔᐃΔⲆⵠⲆ = 0;
    this.ΔΔΔΔᐃⲆΔ = Gg;
    this.ⲆⵠⲆΔΔΔⵠ = undefined;
    this.Δⵠᐃⵠⵠᐃᐃ = Yo;
    var ma = 262 - 260 / Mu;
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ᐃΔⵠⵠⲆᐃⲆ, ia, -385.5, 150, V | da);
    this.ΔⲆᐃⵠ[u++].view = x;
    la = this.ⲆᐃΔΔⲆᐃΔ([["#d45ce5", ka * 3], ["#25c5d6", vc * ka], ["#e2cf27", ka * 30], ["#afac98", ka * 57]]);
    this.ΔⲆᐃⵠ[u] = ew(la, ia, -la.width / 4, 178, V | da);
    this.ΔⲆᐃⵠ[u++].view = x;
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ⲆΔⲆΔⵠᐃΔ, ia, -1542 / hr, 150, V | da);
    this.ΔⲆᐃⵠ[u++].view = P;
    la = this.ⲆᐃΔΔⲆᐃΔ([["#d33a2a", ka * 3], ["#d45ce5", ka * 10], ["#25c5d6", ka * 30], ["#e2cf27", ka * 57]]);
    this.ΔⲆᐃⵠ[u] = ew(la, ia, -la.width / yn, 178, V | da);
    this.ΔⲆᐃⵠ[u++].view = P;
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ΔⲆⵠⵠⵠΔⲆ, ia, -385.5, 150, V | da);
    this.ΔⲆᐃⵠ[u++].view = k;
    la = this.ⲆᐃΔΔⲆᐃΔ([["#25c5d6", ka * dl], ["#e2cf27", Bl * ka], ["#afac98", ka * 30], ["#d88e23", ka * 57]]);
    this.ΔⲆᐃⵠ[u] = ew(la, ia, -la.width / fd, 178, V | da);
    this.ΔⲆᐃⵠ[u++].view = k;
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ᐃⵠΔᐃⵠᐃᐃ, ia, -1542 / Oa, 150, V | da);
    this.ΔⲆᐃⵠ[u++].view = w;
    la = this.ⲆᐃΔΔⲆᐃΔ([["#d45ce5", ka * rb], ["#25c5d6", ka * 10], ["#e2cf27", ka * 30], ["#afac98", ka * 57]]);
    this.ΔⲆᐃⵠ[u] = ew(la, ia, -la.width / 4, 178, V | da);
    this.ΔⲆᐃⵠ[u++].view = w;
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ΔⲆᐃᐃⲆⲆⵠ, ia, -1542 / Jl, 150, V | da);
    this.ΔⲆᐃⵠ[u++].view = J;
    la = this.ⲆᐃΔΔⲆᐃΔ([["#d33a2a", ka * 3], ["#d45ce5", ka * 10], ["#25c5d6", ka * 30], ["#e2cf27", ka * 57]]);
    this.ΔⲆᐃⵠ[u] = ew(la, ia, -la.width / Oa, 178, V | da);
    this.ΔⲆᐃⵠ[u++].view = J;
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ⵠⵠΔᐃΔᐃΔ, ia, -1366 / aq, 100, V | da);
    this.ΔⲆᐃⵠ[u++].view = M;
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ⵠᐃⵠⵠⵠⵠΔ, ia, -341.5, dg, V | da);
    this.ΔⲆᐃⵠ[u++].view = S;
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ᐃⵠⵠⵠⲆΔΔ, ia, -1366 / zt, 100, V | da);
    this.ΔⲆᐃⵠ[u++].view = D;
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ⲆΔⲆᐃⵠⵠΔ, ia, -341.5, mh, V | da);
    this.ΔⲆᐃⵠ[u++].view = ba;
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ⲆⵠⲆΔⲆᐃⵠ, ia, -1366 / mg, 100, V | da);
    this.ΔⲆᐃⵠ[u++].view = B;
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ⲆⲆⵠⵠΔΔⲆ, ia, -341.5, ea, V | da);
    this.ΔⲆᐃⵠ[u++].view = ca;
    ᐃᐃΔⵠⲆⵠΔ = u++;
    this.ΔⲆᐃⵠ[ᐃᐃΔⵠⲆⵠΔ] = ew(Δᐃ.ᐃᐃΔⵠⲆⵠΔ, ia, 484, bu, V);
    ⲆⵠΔᐃⵠΔⵠ = u++;
    this.ΔⲆᐃⵠ[ⲆⵠΔᐃⵠΔⵠ] = ew(Δᐃ.ⲆⵠΔᐃⵠΔⵠ, ia, 908 / Nj + 597 / qo + 60, 0, V);
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ⵠⲆⵠⵠΔⵠⲆ, ia, -758 / eh, -gs, V | da);
    this.ΔⲆᐃⵠ[u++].view = f;
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ⵠⲆⲆΔⵠⵠⲆ, ia, -758 / eh, -_j, V | da);
    this.ΔⲆᐃⵠ[u++].view = C;
    ⲆⲆΔΔⵠⵠⲆ = u++;
    this.ΔⲆᐃⵠ[ⲆⲆΔΔⵠⵠⲆ] = ew(Δᐃ.ⵠΔᐃᐃΔᐃⵠ, ja, 93, 30, V);
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ᐃΔᐃΔΔΔᐃ, ia, -173, 110, V | da);
    this.ΔⲆᐃⵠ[u++].view = R;
    this.ΔⲆᐃⵠ[u] = ew(Δᐃ.ᐃᐃᐃⵠⵠⵠᐃ, ia, -173, 110, V | da);
    this.ΔⲆᐃⵠ[u++].view = j;
    u = Ah;
    this.buttons = [];
    this.buttons[u] = dw(50, 57, 0, [Δᐃ.ΔᐃᐃΔΔⲆᐃ, Δᐃ.ⵠΔⵠᐃⲆᐃⲆ, Δᐃ.ⵠΔⲆΔⵠⲆⵠ], 1, ha, function () {
      if (I.ⲆⵠⲆⵠⲆ()) {
        q(A);
      } else {
        q(v);
      }
    }, 320, 0, K, ja);
    u++;
    if (bj.innerWidth < 1300) {
      this.buttons[u] = dw(202, 97, 0, [Δᐃ.ᐃⵠΔΔᐃᐃⵠ, Δᐃ.ΔⵠᐃᐃᐃⵠⲆ, Δᐃ.ⲆᐃⲆⲆⵠⵠⵠ], 1, ha, this.ⲆⵠᐃⲆⵠΔΔ, 462, 235, V | K, ja);
    } else {
      this.buttons[u] = dw(202, 97, 0, [Δᐃ.ᐃⵠΔΔᐃᐃⵠ, Δᐃ.ΔⵠᐃᐃᐃⵠⲆ, Δᐃ.ⲆᐃⲆⲆⵠⵠⵠ], 1, ha, this.ⲆⵠᐃⲆⵠΔΔ, 74, 235, V | da, ja);
    }
    this.buttons[u].view = Q;
    u++;
    if (bj.innerWidth > 1300) {
      this.buttons[u] = dw(355, 168, 0, [Δᐃ.ⵠᐃⵠᐃΔΔᐃ, Δᐃ.ⵠᐃⵠᐃΔΔᐃ, Δᐃ.ⵠᐃⵠᐃΔΔᐃ], 1, ha, function () {
        bj.open("./changelog.html", "_blank");
      }, -195, -115, Y | da, ja);
      this.buttons[u++].view = Q;
      this.buttons[u] = dw(355, 168, 0, [Δᐃ.ΔⵠᐃⲆΔⲆⲆ, Δᐃ.ΔⵠᐃⲆΔⲆⲆ, Δᐃ.ΔⵠᐃⲆΔⲆⲆ], 1, ha, function () {
        bj.open("https://taming.io", "_blank");
      }, 20, -115, Y | da, ja);
      this.buttons[u++].view = Q;
    }
    this.buttons[u++] = dw(80, 80, 0, [Δᐃ.ᐃⵠⲆⲆᐃΔᐃ, Δᐃ.ⵠᐃᐃΔΔⲆⲆ, Δᐃ.ᐃⲆΔΔᐃⵠⵠ], 1, ha, function () {
      bj.open("https://lapamauve.creator-spring.com/", "_blank");
    }, 380, 10, U, ja);
    this.buttons[u++] = dw(80, 80, 0, [Δᐃ.ⵠᐃᐃⲆΔⲆᐃ, Δᐃ.ᐃᐃⵠΔⲆⲆⲆ, Δᐃ.ΔᐃᐃΔⵠᐃΔ], 1, ha, function () {
      bj.open("https://discord.gg/starveio", "_blank");
    }, 330, 10, U, ja);
    this.buttons[u++] = dw(80, 80, 0, [Δᐃ.ⵠⲆᐃⲆⵠⲆᐃ, Δᐃ.ⲆⲆΔᐃΔΔΔ, Δᐃ.ⲆΔᐃᐃᐃΔⵠ], 1, ha, function () {
      bj.open("https://reddit.com/r/starveio", "_blank");
    }, 280, 10, U, ja);
    this.buttons[u++] = dw(80, 80, 0, [Δᐃ.ᐃⵠᐃⵠΔᐃⲆ, Δᐃ.ΔⲆⵠⵠᐃⵠⲆ, Δᐃ.ΔΔⵠⵠⵠⲆⵠ], 1, ha, function () {
      bj.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, 230, Lc, U, ja);
    this.buttons[u++] = dw(80, 80, 0, [Δᐃ.ⲆⲆΔᐃⲆΔⲆ, Δᐃ.ᐃΔΔΔΔⲆⲆ, Δᐃ.ⵠⵠΔᐃΔⲆΔ], 1, ha, function () {
      bj.open("https://www.facebook.com/LapaMauve/", "_blank");
    }, 155, Wg, U, ja);
    this.buttons[u++] = dw(80, 80, 0, [Δᐃ.ᐃⵠΔⲆᐃⲆΔ, Δᐃ.ⲆⲆⲆⲆⵠΔΔ, Δᐃ.ⲆⵠⵠⵠΔⲆⵠ], 1, ha, function () {
      bj.open("https://twitter.com/lapamauve", "_blank");
    }, 105, 10, U, ja);
    this.buttons[u++] = dw(80, 80, 0, [Δᐃ.ΔᐃΔᐃᐃⵠᐃ, Δᐃ.ᐃΔΔⵠᐃⲆⵠ, Δᐃ.ΔᐃᐃᐃⲆⲆᐃ], 1, ha, function () {
      bj.open("https://www.youtube.com/@lapamauveofficial", "_blank");
    }, 55, iq, U, ja);
    ⲆⵠⲆᐃᐃⲆⲆ = u++;
    this.buttons[ⲆⵠⲆᐃᐃⲆⲆ] = dw(232, 142, 0, [Δᐃ.ΔΔΔⲆᐃᐃΔ, Δᐃ.ⵠⲆᐃⲆⲆⲆⲆ, Δᐃ.ΔⵠⲆⵠᐃⲆⲆ], 1, ha, function () {
      q(p);
      $f(pf.ᐃⲆⲆⵠᐃⵠᐃ, pf.ᐃᐃᐃⵠⵠΔⲆ, pf.ⵠΔⲆΔⵠⲆᐃ, pf.ⲆⵠⲆΔᐃⵠΔ);
    }, -Ut, 573, K, ja);
    this.buttons[u++] = dw(236, 165, 0, [Δᐃ.ⵠⲆⵠᐃᐃⵠΔ, Δᐃ.ⵠⲆⵠᐃᐃⵠΔ, Δᐃ.ⵠⲆⵠᐃᐃⵠΔ], 1, 1, function () {
      q(p);
    }, -zr, 566, K, ja);
    ᐃⵠΔⵠᐃᐃΔ = u++;
    this.buttons[ᐃⵠΔⵠᐃᐃΔ] = dw(236, 165, 0, [Δᐃ.ΔᐃⵠⵠⲆΔⵠ, Δᐃ.ⲆⵠΔⲆΔⵠΔ, Δᐃ.ΔΔᐃᐃⲆⲆⲆ], 1, ha, function () {
      q(m);
    }, -5, 494, K, ja);
    this.buttons[u++] = dw(236, 165, 0, [Δᐃ.ⵠⵠᐃΔᐃⲆⲆ, Δᐃ.ⵠⵠᐃΔᐃⲆⲆ, Δᐃ.ⵠⵠᐃΔᐃⲆⲆ], 1, 1, function () {
      q(m);
    }, -5, 494, K, ja);
    ΔᐃⲆⵠⲆΔⵠ = u++;
    this.buttons[ΔᐃⲆⵠⲆΔⵠ] = dw(236, 165, 0, [Δᐃ.ΔᐃⵠⵠⲆΔⵠ, Δᐃ.ⲆⵠΔⲆΔⵠΔ, Δᐃ.ΔΔᐃᐃⲆⲆⲆ], 1, ha, function () {
      if (I.ⲆⵠⲆⵠⲆ()) {
        if (pf.ⵠⵠⵠΔᐃⲆΔ - Date.now() > 0) {
          q(G);
        }
      } else {
        q(v);
      }
    }, -lu, 415, K, ja);
    this.buttons[u++] = dw(236, 165, 0, [Δᐃ.ᐃΔᐃⵠΔⵠⲆ, Δᐃ.ᐃΔᐃⵠΔⵠⲆ, Δᐃ.ᐃΔᐃⵠΔⵠⲆ], 1, 1, function () {
      if (I.ⲆⵠⲆⵠⲆ()) {
        if (sb < pf.ⵠⵠⵠΔᐃⲆΔ - Date.now()) {
          q(G);
        }
      } else {
        q(v);
      }
    }, -5, 415, K, ja);
    ΔⵠⲆⵠΔᐃΔ = u++;
    this.buttons[ΔⵠⲆⵠΔᐃΔ] = dw(236, 165, 0, [Δᐃ.ΔᐃⵠⵠⲆΔⵠ, Δᐃ.ⲆⵠΔⲆΔⵠΔ, Δᐃ.ΔΔᐃᐃⲆⲆⲆ], 1, ha, function () {
      q(c);
    }, -5, 336, K, ja);
    this.buttons[u++] = dw(236, 165, 0, [Δᐃ.ΔΔⵠᐃⲆᐃΔ, Δᐃ.ΔΔⵠᐃⲆᐃΔ, Δᐃ.ΔΔⵠᐃⲆᐃΔ], 1, 1, function () {
      q(c);
    }, -Yl, 336, K, ja);
    ⵠⵠⵠΔⲆᐃⵠ = u++;
    this.buttons[ⵠⵠⵠΔⲆᐃⵠ] = dw(236, 165, 0, [Δᐃ.ΔᐃⵠⵠⲆΔⵠ, Δᐃ.ⲆⵠΔⲆΔⵠΔ, Δᐃ.ΔΔᐃᐃⲆⲆⲆ], 1, ha, function () {
      q(d);
    }, -Zg, 257, K, ja);
    this.buttons[u++] = dw(236, 165, 0, [Δᐃ.ᐃΔΔⲆΔΔᐃ, Δᐃ.ᐃΔΔⲆΔΔᐃ, Δᐃ.ᐃΔΔⲆΔΔᐃ], 1, 1, function () {
      q(d);
    }, -5, 257, K, ja);
    ⵠᐃⵠΔΔΔΔ = u++;
    this.buttons[ⵠᐃⵠΔΔΔΔ] = dw(236, 165, 0, [Δᐃ.ΔᐃⵠⵠⲆΔⵠ, Δᐃ.ⲆⵠΔⲆΔⵠΔ, Δᐃ.ΔΔᐃᐃⲆⲆⲆ], 1, ha, function () {
      q(Q);
    }, -5, 178, K, ja);
    this.buttons[u++] = dw(236, 165, 0, [Δᐃ.ⵠΔⲆⲆⵠᐃΔ, Δᐃ.ⵠΔⲆⲆⵠᐃΔ, Δᐃ.ⵠΔⲆⲆⵠᐃΔ], 1, 1, function () {
      q(Q);
    }, -5, 178, K, ja);
    ⵠⲆⲆΔⵠΔⲆ = u++;
    this.ⵠⲆⲆΔⵠΔⲆ = ⵠⲆⲆΔⵠΔⲆ;
    this.buttons[ⵠⲆⲆΔⵠΔⲆ] = dw(324, 222, 0, [Δᐃ.ᐃⵠᐃᐃⲆⲆΔ, Δᐃ.ⵠᐃΔᐃᐃᐃⲆ, Δᐃ.ᐃᐃΔᐃᐃⲆⲆ], 1, ha, function () {
      q(v);
    }, Ih, 70, K, ja);
    ΔΔᐃⲆΔΔᐃ = u++;
    ⵠⲆΔᐃᐃᐃᐃ = u++;
    this.ΔΔᐃⲆΔΔᐃ = ΔΔᐃⲆΔΔᐃ;
    this.ⵠⲆΔᐃᐃᐃᐃ = ⵠⲆΔᐃᐃᐃᐃ;
    this.buttons[ΔΔᐃⲆΔΔᐃ] = dw(324, 222, 0, [Δᐃ.ΔⲆⲆΔΔⵠΔ, Δᐃ.ᐃⲆᐃᐃΔᐃᐃ, Δᐃ.ⲆΔⵠⵠᐃᐃΔ], 1, ha, function () {
      q(b);
      ua(-1);
    }, 0, 70, K, ia);
    this.buttons[ⵠⲆΔᐃᐃᐃᐃ] = dw(324, 222, 0, [Δᐃ.ⲆᐃⲆⵠᐃⵠⲆ, Δᐃ.ⲆᐃⲆⵠᐃⵠⲆ, Δᐃ.ⲆᐃⲆⵠᐃⵠⲆ], 1, 1, function () {
      q(b);
      ua(-1);
    }, Rl, 70, K, ia);
    if (ᐃΔᐃᐃ.ΔΔΔᐃᐃⵠⵠ === xq) {
      var na = u++;
      if (bj.innerWidth < 1300) {
        this.buttons[na] = dw(266, 176, 0, [Δᐃ.ᐃΔⲆⵠⲆΔⵠ, Δᐃ.ⲆⵠΔⲆⵠⲆΔ, Δᐃ.ᐃⵠⵠⲆᐃⲆᐃ], 1, ha, function () {
          ᐃΔᐃᐃ.ⲆⲆᐃᐃⲆ(ow.ⲆⵠⵠΔⵠ);
        }, 150, 300, K | V, ja);
      } else {
        this.buttons[na] = dw(266, 176, 0, [Δᐃ.ᐃΔⲆⵠⲆΔⵠ, Δᐃ.ⲆⵠΔⲆⵠⲆΔ, Δᐃ.ᐃⵠⵠⲆᐃⲆᐃ], 1, ha, function () {
          ᐃΔᐃᐃ.ⲆⲆᐃᐃⲆ(ow.ⲆⵠⵠΔⵠ);
        }, -340, Lr, da | V, ja);
      }
      this.buttons[na].view = Q;
      this.buttons[na].hint = 0;
      var oa = u++;
      if (bj.innerWidth < 1300) {
        this.buttons[oa] = dw(266, 176, 0, [Δᐃ.ᐃᐃⵠⲆΔΔⵠ, Δᐃ.ΔΔᐃΔΔⲆⵠ, Δᐃ.ⵠⵠᐃⲆΔΔⲆ], 1, ha, function () {
          ᐃΔᐃᐃ.ⲆⲆᐃᐃⲆ(ow.ᐃⵠΔΔⲆ);
        }, 150, 400, K | V, ja);
      } else {
        this.buttons[oa] = dw(266, 176, 0, [Δᐃ.ᐃᐃⵠⲆΔΔⵠ, Δᐃ.ΔΔᐃΔΔⲆⵠ, Δᐃ.ⵠⵠᐃⲆΔΔⲆ], 1, ha, function () {
          ᐃΔᐃᐃ.ⲆⲆᐃᐃⲆ(ow.ᐃⵠΔΔⲆ);
        }, -340, 200, da | V, ja);
      }
      this.buttons[oa].view = Q;
      this.buttons[oa].hint = 0;
      var pa = u++;
      if (bj.innerWidth < 1300) {
        this.buttons[pa] = dw(266, 176, 0, [Δᐃ.ᐃᐃᐃⵠⲆⵠⲆ, Δᐃ.ᐃᐃᐃΔᐃⵠᐃ, Δᐃ.ⵠΔⵠᐃᐃⵠⲆ], 1, ha, function () {
          ᐃΔᐃᐃ.ⲆⲆᐃᐃⲆ(ow.ΔⲆΔⵠΔ);
        }, 450, 300, K | V, ja);
      } else {
        this.buttons[pa] = dw(266, 176, 0, [Δᐃ.ᐃᐃᐃⵠⲆⵠⲆ, Δᐃ.ᐃᐃᐃΔᐃⵠᐃ, Δᐃ.ⵠΔⵠᐃᐃⵠⲆ], 1, ha, function () {
          ᐃΔᐃᐃ.ⲆⲆᐃᐃⲆ(ow.ΔⲆΔⵠΔ);
        }, -340, 300, da | V, ja);
      }
      this.buttons[pa].view = Q;
      this.buttons[pa].hint = 0;
      var qa = u++;
      if (bj.innerWidth < 1300) {
        this.buttons[qa] = dw(266, 176, 0, [Δᐃ.ᐃᐃⲆᐃⲆᐃΔ, Δᐃ.ⵠⲆⵠΔⵠⲆΔ, Δᐃ.ⵠⲆⲆᐃᐃⵠΔ], 1, ha, function () {
          ᐃΔᐃᐃ.ⲆⲆᐃᐃⲆ(ow.ΔΔᐃᐃᐃ);
        }, 300, 300, K | V, ja);
      } else {
        this.buttons[qa] = dw(266, 176, 0, [Δᐃ.ᐃᐃⲆᐃⲆᐃΔ, Δᐃ.ⵠⲆⵠΔⵠⲆΔ, Δᐃ.ⵠⲆⲆᐃᐃⵠΔ], 1, ha, function () {
          ᐃΔᐃᐃ.ⲆⲆᐃᐃⲆ(ow.ΔΔᐃᐃᐃ);
        }, 204, pn, da | V, ja);
      }
      this.buttons[qa].view = Q;
      this.buttons[qa].hint = Rl;
      var ra = u++;
      if (bj.innerWidth < 1300) {
        this.buttons[ra] = dw(266, 176, 0, [Δᐃ.ⵠᐃⲆⲆⵠⵠⵠ, Δᐃ.ⲆⲆᐃᐃΔⵠΔ, Δᐃ.ⲆⵠⲆⵠⵠΔᐃ], 1, ha, function () {
          ᐃΔᐃᐃ.ⲆⲆᐃᐃⲆ(ow.ᐃΔⵠᐃᐃ);
        }, 300, 400, K | V, ja);
      } else {
        this.buttons[ra] = dw(266, 176, 0, [Δᐃ.ⵠᐃⲆⲆⵠⵠⵠ, Δᐃ.ⲆⲆᐃᐃΔⵠΔ, Δᐃ.ⲆⵠⲆⵠⵠΔᐃ], 1, ha, function () {
          ᐃΔᐃᐃ.ⲆⲆᐃᐃⲆ(ow.ᐃΔⵠᐃᐃ);
        }, 204, 200, da | V, ja);
      }
      this.buttons[ra].view = Q;
      this.buttons[ra].hint = 0;
      var sa = u++;
      this.buttons[sa] = dw(266, 176, 0, [Δᐃ.ΔᐃⲆⲆᐃᐃᐃ, Δᐃ.ⲆⵠᐃΔⲆᐃᐃ, Δᐃ.ᐃⲆΔⲆⵠΔᐃ], 1, ha, function () {
        ᐃΔᐃᐃ.ⲆⲆᐃᐃⲆ(ow.ⵠⲆⲆⵠΔ);
      }, bj.innerWidth < 1300 ? 450 : 204, bj.innerWidth < 1300 ? 400 : 300, (bj.innerWidth < 1300 ? K : da) | V, ja);
      this.buttons[sa].view = Q;
      this.buttons[sa].hint = 0;
    }
    function ua(a, b) {
      if (b !== Ao) {
        pf.ⵠⲆⵠⵠᐃᐃᐃ = b;
        var c = pf.ⲆΔᐃΔⲆᐃⵠ[b];
        pf.ⲆⲆΔⲆⵠ = c.score;
        pf.ⲆᐃᐃⵠΔ = c.kill;
        pf.ⵠⲆⵠΔΔΔΔ = c.death;
        pf.time = c.time;
        pf.ΔⵠᐃΔΔΔᐃ = c.bestScore;
        pf.ΔⲆᐃΔⵠᐃⵠ = c.bestKill;
        pf.ᐃΔⵠⵠⵠᐃⵠ = c.bestTime;
        pf.ⲆⵠⲆⵠᐃᐃⵠ = c.scoreTotal;
      }
      if (a === undefined) {
        a = pf.ⵠⵠⲆⲆᐃⲆⲆ;
      }
      pf.ⵠⵠⲆⲆᐃⲆⲆ = a;
      if (a >= 0) {
        document.getElementById("stats_box_time").innerHTML = pf.ᐃΔⵠⵠⵠᐃⵠ[a];
        document.getElementById("stats_box_kill").innerHTML = pf.ΔⲆᐃΔⵠᐃⵠ[a];
        document.getElementById("stats_box_score").innerHTML = pf.ΔⵠᐃΔΔΔᐃ[a];
      } else {
        var d = fg;
        for (var f = Md; f < pf.ⲆᐃᐃⵠΔ.length; f++) {
          d += pf.ⲆᐃᐃⵠΔ[f];
        }
        var g = xq;
        for (f = 0; pf.time.length > f; f++) {
          g += pf.time[f];
        }
        document.getElementById("stats_box_time").innerHTML = g;
        document.getElementById("stats_box_kill").innerHTML = d;
        document.getElementById("stats_box_score").innerHTML = pf.ⲆⲆΔⲆⵠ;
      }
    }
    this.buttons[u] = dw(87, 78, 0, [Δᐃ.ⵠⵠⵠΔᐃᐃⵠ, Δᐃ.ⲆᐃⵠΔⵠⵠᐃ, Δᐃ.ⵠΔⲆⲆΔᐃⵠ], 1, ha, function () {
      pf.ᐃⵠΔⵠⵠΔⲆᐃⵠ();
      if (pf.ᐃⵠᐃᐃⵠⲆⵠ === Fj) {
        q(j);
      } else {
        q(R);
      }
    }, 127, 110, da | V, ia);
    this.buttons[u++].view = b;
    this.buttons[u] = dw(87, 78, 0, [Δᐃ.ᐃᐃᐃΔⲆⵠᐃ, Δᐃ.ⵠᐃⵠΔⵠⵠΔ, Δᐃ.ⲆΔΔⵠᐃᐃⲆ], 1, ha, function () {
      (function () {
        if (Wf === jf && bj.FB && bj.FB.getUserID()) {
          bj.FB.logout();
        }
        if (Rf === Wf && ox !== Gn) {
          bj.gapi.auth2.getAuthInstance().signOut();
          ox = undefined;
        }
        lx = undefined;
        kx = Xl;
        Wf = al;
        pf.ⲆⲆΔᐃⲆ = et;
        pf.ᐃᐃⲆᐃᐃ = 0;
        pf.ⲆⲆΔⲆⵠ = 0;
        pf.ᐃᐃᐃⵠᐃΔΔ();
        ΔᐃᐃⵠⲆΔΔᐃⲆ();
      })();
    }, 255, 110, da | V, ia);
    this.buttons[u++].view = b;
    this.buttons[u] = dw(58, 64, 0, [Δᐃ.ΔᐃⲆΔΔᐃᐃ, Δᐃ.ΔᐃᐃΔⲆΔΔ, Δᐃ.ΔⲆⲆⵠΔⲆⵠ], 1, ha, function () {
      q(Q);
    }, 189, 118, da | V, ia);
    this.buttons[u++].view = v;
    this.buttons[u] = dw(497, 72, 0, [Δᐃ.ᐃΔᐃⲆΔⲆⲆ, Δᐃ.ΔⵠᐃΔΔᐃⲆ, Δᐃ.ᐃⵠΔΔΔΔⵠ], 1, ha, function () {
      bj.gapi.auth2.getAuthInstance().signIn();
    }, -130, 390, da | V, ia);
    this.buttons[u++].view = v;
    this.buttons[u] = dw(497, 72, 0, [Δᐃ.ⵠⵠΔΔΔΔΔ, Δᐃ.ⵠⲆⵠⲆⵠᐃᐃ, Δᐃ.ᐃΔΔⲆΔᐃᐃ], 1, ha, function () {
      bj.FB.login(function (a) {
        if (a.authResponse) {
          bj.FB.api("/me", function (a) {
            Wf = jf;
            kx = bj.FB.getAuthResponse().accessToken;
            qx();
            bj.ⲆᐃΔΔΔⲆΔ();
          });
        }
      });
    }, -130, 430, da | V, ia);
    this.buttons[u++].view = v;
    ⵠⵠΔᐃⵠⵠΔ = 20000;
    this.ⲆⲆⲆⵠⲆⵠᐃ = function (a) {
      var b = pf.ⵠⲆⲆΔΔⲆΔ(a);
      var c = b * b * ⵠⵠΔᐃⵠⵠΔ;
      return (a -= c) / ((b + 1) * (b + 1) * ⵠⵠΔᐃⵠⵠΔ - c);
    };
    this.ⵠⲆⲆΔΔⲆΔ = function (a) {
      return Math.floor(Math.sqrt(a / ⵠⵠΔᐃⵠⵠΔ));
    };
    this.ᐃᐃΔⲆᐃᐃⵠⲆⲆ = function (a) {
      pf.ΔⵠⲆⲆᐃ = pf.ⵠⲆⲆΔΔⲆΔ(a);
      pf.ⲆⲆⵠᐃⵠΔⵠ = pf.ⲆⲆⲆⵠⲆⵠᐃ(a);
      pf.ⵠⵠⵠⵠᐃⵠⲆ = Fj;
      pf.ⲆⲆΔⲆⵠ = a;
    };
    this.ΔΔᐃⲆΔⲆΔΔⵠ = function (b) {
      pf.buttons[pf.ⵠⲆⲆΔⵠΔⲆ].info.active = qu;
      pf.buttons[pf.ΔΔᐃⲆΔΔᐃ].info.active = 1;
      pf.buttons[pf.ⵠⲆΔᐃᐃᐃᐃ].info.active = 1;
      n();
      if (b.name.indexOf("Starver#") === -1) {
        document.getElementById("account_nickname_input").value = bj.decodeURIComponent(bj.escape(bj.atob(b.name)));
      } else {
        document.getElementById("account_nickname_input").value = b.name;
      }
      pf.ᐃᐃⲆᐃᐃ = b.bread;
      var c = b.seasons;
      var d = c[c.length - Ga];
      pf.ⲆΔᐃΔⲆᐃⵠ = c;
      I.ᐃᐃΔⲆᐃᐃⵠⲆⲆ(d.score);
      pf.ⲆⲆΔⲆⵠ = d.score;
      pf.ⲆᐃᐃⵠΔ = d.kill;
      pf.ⵠⲆⵠΔΔΔΔ = d.death;
      pf.time = d.time;
      pf.ΔⵠᐃΔΔΔᐃ = d.bestScore;
      pf.ΔⲆᐃΔⵠᐃⵠ = d.bestKill;
      pf.ᐃΔⵠⵠⵠᐃⵠ = d.bestTime;
      pf.ⲆⵠⲆⵠᐃᐃⵠ = d.scoreTotal;
      pf.ᐃⵠᐃᐃⵠⲆⵠ = b.firstName;
      document.getElementById("serverAddressInput").value = "https://starve.io/?server=" + b.privateServer;
      if (pf.ᐃⵠᐃᐃⵠⲆⵠ === Gn) {
        pf.ᐃⵠᐃᐃⵠⲆⵠ = 0;
      }
      pf.ⵠⵠⵠΔᐃⲆΔ = Date.now() + b.privateServerTime;
      if (Number(b.privateServerTime) > sb) {
        pf.ⵠⵠⵠΔᐃⲆΔ = Date.now() + Number(b.privateServerTime);
      }
      pf.ⲆⲆΔᐃⲆ = Date.now() + b.kit;
      if (Number(b.kit) > 0) {
        pf.ⲆⲆΔᐃⲆ = Date.now() + Number(b.kit);
      }
      var e = ΔⲆⲆΔ.ΔⲆᐃᐃⲆ;
      for (var f = 0; f < b.skins.length; f++) {
        var g = b.skins[f];
        if (Ah < g) {
          for (var i = bu; i < e.length; i++) {
            if (f === e[i].id) {
              I.unlock.ⲆⲆⲆⲆ[i] = 1;
            }
          }
        }
      }
      e = ΔⲆⲆΔ.ΔΔⵠⲆᐃ;
      f = 0;
      for (; b.accessories.length > f; f++) {
        if ((g = b.accessories[f]) > 0) {
          for (i = 0; e.length > i; i++) {
            if (f === e[i].id) {
              I.unlock.ΔΔΔΔⲆ[i] = 1;
            }
          }
        }
      }
      e = ΔⲆⲆΔ.ΔⵠᐃⲆⲆ;
      f = Gg;
      for (; f < b.books.length; f++) {
        g = b.books[f];
        if (Md < g) {
          for (i = 0; i < e.length; i++) {
            if (f === e[i].id) {
              I.unlock.ⵠⵠᐃᐃᐃ[i] = Ek;
            }
          }
        }
      }
      e = ΔⲆⲆΔ.ⵠⲆᐃⲆ;
      f = 0;
      for (; f < b.bags.length; f++) {
        g = b.bags[f];
        if (et < g) {
          for (i = 0; e.length > i; i++) {
            if (e[i].id === f) {
              I.unlock.ΔⲆⵠⵠᐃ[i] = 1;
            }
          }
        }
      }
      e = ΔⲆⲆΔ.ΔΔⵠⲆⲆ;
      f = Gg;
      for (; b.crates.length > f; f++) {
        g = b.crates[f];
        if (et < g) {
          for (i = 0; i < e.length; i++) {
            if (f === e[i].id) {
              I.unlock.ⲆⵠⲆᐃⵠ[i] = bs;
              I.unlock.ⲆⵠΔΔⲆ[i] = 1;
            }
          }
        }
      }
    };
    this.ᐃⵠⲆΔΔⲆⵠΔⲆ = function () {
      bj.ⲆᐃΔΔΔⲆΔ = function () {
        q(Q);
        (function (a) {
          var b = new XMLHttpRequest();
          b.open("GET", _f + "login?token=" + kx + "&type=" + Wf);
          b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          b.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200 && b.responseText !== "0") {
              a(JSON.parse(b.responseText));
            }
          };
          b.send();
        })(I.ΔΔᐃⲆΔⲆΔΔⵠ);
      };
      if (mx === 1) {
        bj.ⲆᐃΔΔΔⲆΔ();
      }
    };
    bj.ΔᐃᐃⵠⲆΔΔᐃⲆ = function () {
      pf.buttons[pf.ⵠⲆⲆΔⵠΔⲆ].info.active = 1;
      pf.buttons[pf.ΔΔᐃⲆΔΔᐃ].info.active = 0;
      pf.buttons[pf.ⵠⲆΔᐃᐃᐃᐃ].info.active = 0;
      q(Q);
    };
    this.ⲆⵠⲆⵠⲆ = function () {
      return pf.buttons[pf.ΔΔᐃⲆΔΔᐃ].info.active;
    };
    this.buttons[u] = dw(461, 105, 0, [Δᐃ.ΔΔΔⲆΔΔΔ, Δᐃ.ΔΔΔⵠⲆᐃΔ, Δᐃ.ⲆⲆΔⵠⲆᐃⲆ], 1, ha, function () {
      if (I.ⲆⵠⲆⵠⲆ()) {
        q(A);
      } else {
        q(v);
      }
    }, -ok, 80, da | V, ia);
    this.buttons[u++].view = c;
    this.buttons[u] = dw(157, 158, 0, [Δᐃ.ᐃⵠⵠⵠⲆⵠΔ, Δᐃ.ⵠΔΔΔⲆⲆⲆ, Δᐃ.ᐃⵠⲆⵠⲆᐃᐃ], 1, ha, function () {
      bj.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, -35, 125, da | V, ia);
    this.buttons[u++].view = m;
    this.buttons[u] = dw(66, 73, 0, [Δᐃ.ᐃⲆⲆⲆΔᐃⵠ, Δᐃ.ⲆᐃΔᐃⲆΔⲆ, Δᐃ.ᐃᐃⵠⲆⲆΔⵠ], 1, ha, kh, -68, 340, da | V, ia);
    this.buttons[u++].view = m;
    this.buttons[u] = dw(66, 73, 0, [Δᐃ.ΔⵠⲆⵠⵠᐃΔ, Δᐃ.ⵠΔΔⲆΔⲆⲆ, Δᐃ.ᐃΔⲆⲆⲆⲆⵠ], 1, ha, Pa, -30, 340, da | V, ia);
    this.buttons[u++].view = m;
    this.ᐃᐃΔⵠⵠⵠⲆⲆⲆ = u;
    this.buttons[u] = dw(97, 66, 0, [Δᐃ.ΔΔⵠᐃⵠᐃⲆ, Δᐃ.ᐃᐃⵠᐃⵠⲆⵠ, Δᐃ.ⵠⲆᐃΔⵠⵠᐃ], 1, ha, function () {
      $f(E, Ct, pf.ⵠΔⲆΔⵠⲆᐃ);
    }, -14, 151, da | V, ia);
    this.buttons[u++].view = p;
    this.ΔⵠⲆᐃᐃⲆΔ = u;
    this.buttons[u] = dw(135, 66, 0, [Δᐃ.ⲆᐃⲆⲆΔⵠΔ, Δᐃ.ᐃⲆⲆⵠⵠⵠᐃ, Δᐃ.ΔᐃΔΔᐃⲆᐃ], 1, ha, function () {
      $f(undefined, undefined, pf.ΔⵠⲆᐃᐃⲆΔ);
    }, 37.5, 151, da | V, ia);
    this.buttons[u++].view = p;
    this.ⲆⲆΔᐃⲆⵠᐃ = u;
    this.buttons[u] = dw(160, 66, 0, [Δᐃ.ⵠᐃΔᐃᐃΔᐃ, Δᐃ.ᐃⵠⲆᐃⵠⵠΔ, Δᐃ.ⵠΔⵠᐃᐃΔᐃ], 1, ha, function () {
      $f(ri, Gn, pf.ⲆⲆΔᐃⲆⵠᐃ);
    }, 107.5, 151, da | V, ia);
    this.buttons[u++].view = p;
    this.ⵠΔⲆΔⵠⲆᐃ = u;
    this.buttons[u] = dw(207, 66, 0, [Δᐃ.ᐃᐃᐃⲆΔᐃⵠ, Δᐃ.ⲆⲆⲆⵠⵠᐃⵠ, Δᐃ.ᐃⵠΔⵠᐃⵠⵠ], 1, ha, function () {
      $f(Pa, undefined, pf.ⵠΔⲆΔⵠⲆᐃ);
    }, 190.5, 151, da | V, ia);
    this.buttons[u++].view = p;
    this.ΔᐃⲆΔⵠΔᐃ = u;
    this.buttons[u] = dw(144, 66, 0, [Δᐃ.ⵠᐃᐃΔⵠⲆⵠ, Δᐃ.ⵠΔⲆⲆⵠᐃⲆ, Δᐃ.ᐃⵠⵠⵠⲆⲆΔ], 1, ha, function () {
      $f(pf.ΔᐃⲆΔⵠΔᐃ);
    }, 103.5, 110, da | V, ia);
    this.buttons[u++].view = p;
    this.ⵠᐃᐃΔΔΔᐃ = u;
    this.buttons[u] = dw(124, 66, 0, [Δᐃ.ⵠⲆⵠⲆⵠΔⲆ, Δᐃ.ΔΔᐃⵠΔᐃᐃ, Δᐃ.ⵠⵠᐃⵠᐃⵠⲆ], 1, ha, function () {
      $f(pf.ⵠᐃᐃΔΔΔᐃ);
    }, 177.5, 110, da | V, ia);
    this.buttons[u++].view = p;
    this.ᐃⲆⲆⵠᐃⵠᐃ = u;
    this.buttons[u] = dw(104, 66, 0, [Δᐃ.ⵠⵠⵠⲆⵠΔⲆ, Δᐃ.ⲆΔᐃⵠⲆᐃᐃ, Δᐃ.ΔΔᐃΔᐃⵠⵠ], 1, ha, function () {
      $f(pf.ᐃⲆⲆⵠᐃⵠᐃ);
    }, 242, 110, da | V, ia);
    this.buttons[u++].view = p;
    this.ᐃⵠΔΔΔⲆᐃ = u;
    this.buttons[u] = dw(46, 51, 0, [Δᐃ.ⵠΔᐃΔᐃⲆⲆ, Δᐃ.ⲆⲆΔⲆΔⵠⲆ, Δᐃ.ᐃⵠᐃⵠΔⵠΔ], 1, ha, function () {
      $f(undefined, Pa, undefined, pf.ᐃⵠΔΔΔⲆᐃ);
    }, -185, 528, da | V, ia);
    this.buttons[u++].view = p;
    this.ᐃᐃΔⲆⵠⵠⵠ = u;
    this.buttons[u] = dw(46, 51, 0, [Δᐃ.ΔΔⲆⲆⲆⲆΔ, Δᐃ.ΔΔΔᐃⵠⵠⲆ, Δᐃ.ΔᐃⵠⵠⲆᐃⵠ], 1, ha, function () {
      $f(Gn, undefined, undefined, pf.ᐃᐃΔⲆⵠⵠⵠ);
    }, -149, 528, da | V, ia);
    this.buttons[u++].view = p;
    this.ⲆⲆᐃᐃΔⲆⲆ = u;
    this.buttons[u] = dw(46, 51, 0, [Δᐃ.ⲆᐃⲆΔᐃᐃⲆ, Δᐃ.ᐃΔΔⵠᐃᐃᐃ, Δᐃ.ᐃᐃΔⵠᐃⵠⵠ], 1, ha, function () {
      $f(ri, undefined, lh, pf.ⲆⲆᐃᐃΔⲆⲆ);
    }, -113, 528, da | V, ia);
    this.buttons[u++].view = p;
    this.ᐃΔⵠⲆⲆⲆⵠ = u;
    this.buttons[u] = dw(46, 51, 0, [Δᐃ.ᐃⲆⲆⵠⲆⲆΔ, Δᐃ.ⲆΔᐃⲆᐃᐃΔ, Δᐃ.ⵠΔⲆᐃⲆᐃⵠ], 1, ha, function () {
      $f(undefined, lh, al, pf.ᐃΔⵠⲆⲆⲆⵠ);
    }, -77, 528, da | V, ia);
    this.buttons[u++].view = p;
    this.ᐃⵠᐃⲆΔΔⵠ = u;
    this.buttons[u] = dw(46, 51, 0, [Δᐃ.ⵠΔΔⵠΔⲆⵠ, Δᐃ.ΔΔⵠⲆᐃⵠΔ, Δᐃ.ⲆⵠᐃⲆⵠΔⵠ], 1, ha, function () {
      $f(Fg, Iq, Ao, pf.ᐃⵠᐃⲆΔΔⵠ);
    }, -41, 528, da | V, ia);
    this.buttons[u++].view = p;
    this.ⲆⵠⲆΔᐃⵠΔ = u;
    this.buttons[u] = dw(46, 51, 0, [Δᐃ.ⲆᐃΔⵠⵠⲆⵠ, Δᐃ.ⲆⵠⵠᐃΔⲆᐃ, Δᐃ.ᐃᐃⵠᐃΔⵠᐃ], 1, ha, function () {
      $f(Cr, undefined, Gn, pf.ⲆⵠⲆΔᐃⵠΔ);
    }, -ul, 528, da | V, ia);
    this.buttons[u++].view = p;
    this.buttons[u] = dw(232, 352, 0, [Δᐃ.ⲆⵠᐃⲆΔΔᐃ, Δᐃ.ⲆⵠⲆⲆΔⲆⲆ, Δᐃ.ΔᐃⵠΔⲆᐃᐃ], 1, ha, function () {
      sx(300);
    }, -330, 135, da | V, ia);
    this.buttons[u++].view = A;
    this.buttons[u] = dw(232, 352, 0, [Δᐃ.ᐃⲆⲆⲆⲆⵠⲆ, Δᐃ.ΔⲆⲆⵠΔᐃⵠ, Δᐃ.ⵠᐃΔⲆᐃᐃᐃ], 1, ha, function () {
      sx(600);
    }, -195, 135, da | V, ia);
    this.buttons[u++].view = A;
    this.buttons[u] = dw(243, 374, 0, [Δᐃ.ᐃΔⵠⲆΔⲆⵠ, Δᐃ.ΔⵠᐃⲆΔᐃΔ, Δᐃ.ΔᐃᐃᐃⲆᐃⲆ], 1, ha, function () {
      sx(2600);
    }, -60, 130, da | V, ia);
    this.buttons[u++].view = A;
    this.buttons[u] = dw(232, 352, 0, [Δᐃ.ΔΔⲆᐃⵠᐃⲆ, Δᐃ.ⵠᐃⵠⵠᐃᐃᐃ, Δᐃ.ᐃᐃⲆᐃᐃⲆⲆ], 1, ha, function () {
      sx(7000);
    }, 78, 135, da | V, ia);
    this.buttons[u++].view = A;
    this.buttons[u] = dw(243, 374, 0, [Δᐃ.ΔΔⲆΔᐃΔΔ, Δᐃ.ᐃⲆⵠⲆᐃⲆΔ, Δᐃ.ⲆᐃⲆⲆⵠⵠⲆ], 1, ha, function () {
      sx(20000);
    }, 213, 130, da | V, ia);
    this.buttons[u++].view = A;
    this.buttons[u] = dw(58, 64, 0, [Δᐃ.ΔᐃⲆΔΔᐃᐃ, Δᐃ.ΔᐃᐃΔⲆΔΔ, Δᐃ.ΔⲆⲆⵠΔⲆⵠ], 1, ha, function () {
      q(c);
    }, 300, 88, da | V, ia);
    this.buttons[u++].view = A;
    this.buttons[u] = dw(323, 112, 0, [Δᐃ.ⲆΔᐃΔⲆⵠᐃ, Δᐃ.ⵠⲆⵠᐃⵠⵠΔ, Δᐃ.ᐃⵠᐃⵠⵠⲆⵠ], 1, ha, function () {
      q(M);
      Ia.ᐃᐃΔᐃΔ();
    }, -315, 185, da | V, ia);
    this.buttons[u++].view = d;
    this.buttons[u] = dw(323, 112, 0, [Δᐃ.ⲆⲆⲆⵠΔⲆΔ, Δᐃ.ⵠᐃΔᐃΔᐃΔ, Δᐃ.ᐃⵠⵠᐃⵠⲆᐃ], 1, ha, function () {
      q(S);
      Qa.ᐃᐃΔᐃΔ();
    }, -315, 321, da | V, ia);
    this.buttons[u++].view = d;
    this.buttons[u] = dw(323, 112, 0, [Δᐃ.ⲆΔᐃΔΔᐃⵠ, Δᐃ.ⵠΔⲆΔᐃΔⲆ, Δᐃ.ⵠᐃΔⵠⲆⲆⵠ], 1, ha, function () {
      q(D);
      Ja.ᐃᐃΔᐃΔ();
    }, 153, 185, da | V, ia);
    this.buttons[u++].view = d;
    this.buttons[u] = dw(323, 112, 0, [Δᐃ.ⲆᐃⵠΔⵠⲆⵠ, Δᐃ.ᐃᐃᐃΔΔⲆⵠ, Δᐃ.ΔⲆⵠⲆΔᐃⵠ], 1, ha, function () {
      q(ba);
      Ka.ᐃᐃΔᐃΔ();
    }, 153, 321, da | V, ia);
    this.buttons[u++].view = d;
    this.buttons[u] = dw(323, 112, 0, [Δᐃ.ΔⲆⲆⵠΔᐃΔ, Δᐃ.ΔᐃΔⲆΔⵠⲆ, Δᐃ.ᐃΔⲆⲆΔⲆⵠ], 1, ha, function () {
      q(B);
      Ma.ᐃᐃΔᐃΔ();
    }, 153, 463, da | V, ia);
    this.buttons[u++].view = d;
    this.buttons[u] = dw(323, 112, 0, [Δᐃ.ᐃΔⲆΔⲆⵠᐃ, Δᐃ.ΔⲆⲆΔⲆⵠⲆ, Δᐃ.ⵠᐃⲆⲆⲆᐃⲆ], 1, ha, function () {
      q(ca);
      Na.ᐃᐃΔᐃΔ();
    }, -315, 463, da | V, ia);
    this.buttons[u++].view = d;
    this.buttons[u] = dw(327, 117, 0, [Δᐃ.ⲆⵠΔⵠᐃΔⲆ, Δᐃ.ⵠⵠᐃⵠⲆⵠⲆ, Δᐃ.ⵠⲆⲆⲆⲆᐃᐃ], 1, ha, function () {
      q(O);
    }, 155, 70, K, ja);
    this.buttons[u++].view = Q;
    this.buttons[u] = dw(130, 129, 0, [Δᐃ.ΔΔᐃΔΔΔⲆ, Δᐃ.ΔᐃⲆⵠⵠᐃⵠ, Δᐃ.ⵠᐃΔΔᐃⲆⲆ], 1, ha, function () {
      y(C, ia, sj[zh]);
      q(c);
    }, Bl, 40, da | V, ia);
    this.buttons[u++].view = C;
    this.buttons[u] = dw(130, 129, 0, [Δᐃ.ΔΔᐃΔΔΔⲆ, Δᐃ.ΔᐃⲆⵠⵠᐃⵠ, Δᐃ.ⵠᐃΔΔᐃⲆⲆ], 1, ha, function () {
      y(f, ia, sj[vt]);
      q(c);
    }, vc, 40, da | V, ia);
    this.buttons[u++].view = f;
    this.buttons[u] = dw(115, 73, 0, [Δᐃ.ⵠᐃᐃⵠᐃ, Δᐃ.ⲆⲆⲆᐃⵠ, Δᐃ.ΔⲆⲆⵠΔ], 1, ha, function () {
      q(c);
    }, 200, 140, da | V, ia);
    this.buttons[u++].view = W;
    this.buttons[u] = dw(253, 110, 0, [Δᐃ.ⵠⵠⲆⲆⵠⲆΔ, Δᐃ.ΔⲆΔⵠⵠⵠⲆ, Δᐃ.ⵠⵠᐃΔⲆΔΔ], 1, ha, function () {
      vx("Atlanta");
    }, -265, 300, da | V, ia);
    this.buttons[u++].view = W;
    this.buttons[u] = dw(253, 110, 0, [Δᐃ.ⵠΔⵠⵠᐃⵠⲆ, Δᐃ.ⲆΔⲆᐃΔᐃⲆ, Δᐃ.ΔⲆⲆⵠⲆⵠᐃ], 1, ha, function () {
      vx("Dallas");
    }, -130, 300, da | V, ia);
    this.buttons[u++].view = W;
    this.buttons[u] = dw(253, 110, 0, [Δᐃ.ⲆⵠᐃᐃΔⵠⲆ, Δᐃ.ΔⲆᐃⵠΔⵠⵠ, Δᐃ.ⲆⲆⵠΔⲆⵠⲆ], 1, ha, function () {
      vx("Fremont");
    }, Zg, 300, da | V, ia);
    this.buttons[u++].view = W;
    this.buttons[u] = dw(253, 110, 0, [Δᐃ.ⲆⲆᐃⲆⵠⲆᐃ, Δᐃ.ᐃᐃΔⲆⵠᐃᐃ, Δᐃ.ⵠΔⲆⲆⲆΔΔ], 1, ha, function () {
      vx("Newark");
    }, 140, 300, da | V, ia);
    this.buttons[u++].view = W;
    this.buttons[u] = dw(253, 110, 0, [Δᐃ.ᐃⲆΔⲆⵠΔΔ, Δᐃ.ᐃⵠⲆΔⲆΔᐃ, Δᐃ.ᐃᐃΔᐃΔⵠⵠ], 1, ha, function () {
      vx("London");
    }, -265, 365, da | V, ia);
    this.buttons[u++].view = W;
    this.buttons[u] = dw(253, 110, 0, [Δᐃ.ⵠⲆΔᐃᐃΔᐃ, Δᐃ.ⲆⲆᐃΔⵠⵠᐃ, Δᐃ.ⵠΔⵠᐃⲆΔⲆ], 1, ha, function () {
      vx("Frankfurt");
    }, -130, 365, da | V, ia);
    this.buttons[u++].view = W;
    this.buttons[u] = dw(253, 110, 0, [Δᐃ.ΔᐃΔᐃⲆⵠΔ, Δᐃ.ΔⲆⵠⲆᐃⵠⵠ, Δᐃ.ⵠⲆᐃⵠΔᐃΔ], 1, ha, function () {
      vx("Singapore");
    }, 5, 365, da | V, ia);
    this.buttons[u++].view = W;
    this.buttons[u] = dw(253, 110, 0, [Δᐃ.ⵠⵠᐃΔⲆⲆΔ, Δᐃ.ΔΔΔⲆΔⲆᐃ, Δᐃ.ΔⵠΔΔⲆⵠΔ], 1, ha, function () {
      vx("Tokyo");
    }, 140, 365, da | V, ia);
    this.buttons[u++].view = W;
    this.buttons[u] = dw(253, 110, 0, [Δᐃ.ᐃⵠⲆⲆⵠⵠⵠ, Δᐃ.ⵠⵠᐃᐃⲆΔΔ, Δᐃ.ΔᐃᐃⵠⵠᐃⲆ], 1, ha, function () {
      vx("Toronto");
    }, -265, 430, da | V, ia);
    this.buttons[u++].view = W;
    this.buttons[u] = dw(253, 110, 0, [Δᐃ.ⲆⲆΔΔⲆⲆⵠ, Δᐃ.ΔᐃΔᐃΔⲆΔ, Δᐃ.ⵠⲆⲆΔⲆᐃΔ], 1, ha, function () {
      vx("Mumbai");
    }, -130, 430, da | V, ia);
    this.buttons[u++].view = W;
    this.buttons[u] = dw(115, 73, 0, [Δᐃ.ⵠᐃᐃⵠᐃ, Δᐃ.ⲆⲆⲆᐃⵠ, Δᐃ.ΔⲆⲆⵠΔ], 1, ha, function () {
      q(W);
    }, 230, 140, da | V, ia);
    this.buttons[u++].view = L;
    this.buttons[u] = dw(230, 352, 0, [Δᐃ.ⲆΔΔⲆᐃⲆΔ, Δᐃ.ᐃΔⵠⵠᐃΔᐃ, Δᐃ.ⲆᐃⲆⲆᐃΔⲆ], 1, ha, function () {
      sx(350);
    }, -280, 240, da | V, ia);
    this.buttons[u++].view = L;
    this.buttons[u] = dw(230, 352, 0, [Δᐃ.ⵠᐃΔⵠΔⵠᐃ, Δᐃ.ⵠⲆΔⲆⲆⲆⵠ, Δᐃ.ΔᐃΔᐃᐃΔⵠ], 1, ha, function () {
      sx(700);
    }, -130, 240, da | V, ia);
    this.buttons[u++].view = L;
    this.buttons[u] = dw(230, 352, 0, [Δᐃ.ᐃⵠᐃΔⵠⵠᐃ, Δᐃ.ᐃⲆⵠⲆΔΔⲆ, Δᐃ.ⲆⵠⲆⲆⵠΔᐃ], 1, ha, function () {
      sx(1400);
    }, La, 240, da | V, ia);
    this.buttons[u++].view = L;
    this.buttons[u] = dw(230, 352, 0, [Δᐃ.ⲆⵠᐃⲆⵠᐃΔ, Δᐃ.ⵠΔⲆΔⵠᐃΔ, Δᐃ.ΔⲆᐃⲆᐃⲆⲆ], 1, ha, function () {
      sx(3000);
    }, 170, 240, da | V, ia);
    this.buttons[u++].view = L;
    this.buttons[u] = dw(105, 119, 0, [Δᐃ.ⲆᐃᐃΔΔᐃΔ, Δᐃ.ⵠⲆⲆⲆⲆᐃΔ, Δᐃ.ⵠᐃⲆΔⲆᐃⵠ], 1, ha, function () {
      document.getElementById("serverAddressInput").select();
      document.execCommand("copy");
    }, 170, 310, da | V, ia);
    this.buttons[u++].view = G;
    this.buttons[u] = dw(105, 119, 0, [Δᐃ.ΔᐃᐃᐃΔΔⵠ, Δᐃ.ⲆⵠΔᐃⵠΔᐃ, Δᐃ.ᐃⲆⵠΔⲆⲆⲆ], 1, ha, function () {
      (function () {
        var a = new XMLHttpRequest();
        a.open("GET", _f + "rebootServer?token=" + kx + "&userid=" + lx);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
          if (this.readyState === Mu && this.status === 200 && a.responseText !== "0") {
            location.href = document.getElementById("serverAddressInput").value;
          }
        };
        a.send();
      })();
    }, 235, 310, da | V, ia);
    this.buttons[u++].view = G;
    this.buttons[u] = dw(204, 115, 0, [Δᐃ.ⲆᐃᐃᐃⲆΔⵠ, Δᐃ.ⲆΔᐃΔⵠⲆᐃ, Δᐃ.ⵠΔᐃⲆⵠⲆΔ], 1, ha, function () {
      bj.open("./commands.html", "_blank");
    }, -265, 490, da | V, ia);
    this.buttons[u++].view = G;
    this.buttons[u] = dw(145, 69, 0, [Δᐃ.ΔΔⵠⲆᐃⲆᐃ, Δᐃ.ⲆⵠⲆⲆⵠᐃⵠ, Δᐃ.ᐃᐃⵠᐃᐃⲆᐃ], 1, ha, function () {
      q(Z);
    }, -210, 170, da | V, ia);
    this.buttons[u++].view = c;
    this.buttons[u] = dw(145, 69, 0, [Δᐃ.ΔΔⲆⵠᐃⲆᐃ, Δᐃ.ⲆᐃⲆΔᐃᐃΔ, Δᐃ.ⲆᐃⲆᐃᐃⵠᐃ], 1, ha, function () {
      q(k);
    }, 70, 170, da | V, ia);
    this.buttons[u++].view = c;
    this.buttons[u] = dw(145, 69, 0, [Δᐃ.ΔΔⲆᐃΔΔⲆ, Δᐃ.ⲆᐃΔⵠΔⲆⵠ, Δᐃ.ΔΔⵠΔᐃᐃⲆ], 1, ha, function () {
      q(w);
    }, 70, 204, da | V, ia);
    this.buttons[u++].view = c;
    this.buttons[u] = dw(145, 69, 0, [Δᐃ.ΔⲆⵠⲆⵠⵠΔ, Δᐃ.ΔᐃᐃⵠΔⲆⲆ, Δᐃ.ᐃΔⵠⲆⲆᐃΔ], 1, ha, function () {
      q(x);
    }, -210, 204, da | V, ia);
    this.buttons[u++].view = c;
    this.buttons[u] = dw(145, 69, 0, [Δᐃ.ΔⲆⵠⲆⵠⵠΔ, Δᐃ.ΔᐃᐃⵠΔⲆⲆ, Δᐃ.ᐃΔⵠⲆⲆᐃΔ], 1, ha, function () {
      q(J);
    }, 70, 238, da | V, ia);
    this.buttons[u++].view = c;
    this.buttons[u] = dw(145, 69, 0, [Δᐃ.ΔⲆⵠⲆⵠⵠΔ, Δᐃ.ΔᐃᐃⵠΔⲆⲆ, Δᐃ.ᐃΔⵠⲆⲆᐃΔ], 1, ha, function () {
      if (I.ⲆⵠⲆⵠⲆ()) {
        ux(0, 300);
      } else {
        q(v);
      }
    }, 307, 205, da | V, ia);
    this.buttons[u++].view = c;
    this.buttons[u] = dw(145, 69, 0, [Δᐃ.ΔᐃΔⵠⲆⲆᐃ, Δᐃ.ᐃᐃᐃⲆⵠᐃᐃ, Δᐃ.ⵠⵠⲆᐃΔΔⵠ], 1, ha, function () {
      q(P);
    }, -210, 238, da | V, ia);
    this.buttons[u++].view = c;
    this.buttons[u] = dw(145, 69, 0, [Δᐃ.ΔᐃΔⵠⲆⲆᐃ, Δᐃ.ᐃᐃᐃⲆⵠᐃᐃ, Δᐃ.ⵠⵠⲆᐃΔΔⵠ], 1, ha, function () {
      if (I.ⲆⵠⲆⵠⲆ()) {
        ux(Gt, 600);
      } else {
        q(v);
      }
    }, 307, 239, da | V, ia);
    this.buttons[u++].view = c;
    this.buttons[u] = dw(192, 101, 0, [Δᐃ.ⵠᐃⲆⲆⵠⲆⵠ, Δᐃ.ᐃᐃⲆΔⲆⲆⵠ, Δᐃ.ⲆΔᐃᐃⲆⲆᐃ], 1, ha, function () {
      rx();
    }, -dg, 250, da | V, ia);
    this.buttons[u++].view = j;
    this.buttons[u] = dw(192, 104, 0, [Δᐃ.ᐃⵠᐃⲆΔᐃⲆ, Δᐃ.ⵠΔⲆΔⲆΔᐃ, Δᐃ.ⲆⵠⵠΔⲆⵠⵠ], 1, ha, function () {
      rx();
    }, -Ir, 239, da | V, ia);
    this.buttons[u++].view = R;
    this.buttons[u] = dw(192, 101, 0, [Δᐃ.ΔΔⵠⲆᐃⲆⵠ, Δᐃ.ⵠⵠᐃⲆⲆⵠⲆ, Δᐃ.ᐃΔΔⵠᐃᐃⵠ], 1, ha, function () {
      q(b);
    }, uj, 250, da | V, ia);
    this.buttons[u++].view = j;
    this.buttons[u] = dw(192, 104, 0, [Δᐃ.ⲆⵠΔⲆᐃᐃⲆ, Δᐃ.ΔⲆΔΔⵠΔⲆ, Δᐃ.ⵠᐃΔⲆⵠᐃⲆ], 1, ha, function () {
      q(b);
    }, Vq, 239, da | V, ia);
    this.buttons[u++].view = R;
    ΔⲆᐃⲆⲆ = [];
    ΔⲆᐃⲆⲆ[ⲆⲆⲆ.ΔⵠⵠⲆⲆ] = [Δᐃ.ⵠᐃⵠⵠⲆΔᐃ, Δᐃ.ⲆᐃΔⵠⵠΔᐃ, Δᐃ.ⲆᐃⵠⲆᐃⲆᐃ];
    ΔⲆᐃⲆⲆ[ⲆⲆⲆ.ΔΔⲆᐃ] = [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ];
    ΔⲆᐃⲆⲆ[ⲆⲆⲆ.ᐃⵠⲆⲆ] = [Δᐃ.ΔⵠⲆⲆᐃⲆΔ, Δᐃ.ᐃⲆⲆΔⵠⲆᐃ, Δᐃ.ⵠⲆⲆⵠⲆⵠⵠ];
    ΔⲆᐃⲆⲆ[ⲆⲆⲆ.ⲆΔⲆⵠ] = [Δᐃ.ⵠⵠΔⲆΔⵠΔ, Δᐃ.ΔⲆᐃΔΔᐃΔ, Δᐃ.ᐃⲆΔⲆΔᐃΔ];
    ΔⲆᐃⲆⲆ[ⲆⲆⲆ.ⲆΔΔΔ] = [Δᐃ.ᐃⵠⲆⲆⵠᐃΔ, Δᐃ.ⲆΔᐃⲆⵠᐃⵠ, Δᐃ.ⲆⵠᐃᐃᐃⲆᐃ];
    ΔⲆᐃⲆⲆ[ⲆⲆⲆ.ⲆⲆΔΔ] = [Δᐃ.Ⲇⵠᐃᐃⵠᐃⵠ, Δᐃ.ᐃⲆⵠΔᐃⵠⲆ, Δᐃ.ᐃⵠⲆⲆⵠⲆⲆ];
    ΔⲆᐃⲆⲆ[ⲆⲆⲆ.ⵠⲆⵠⵠ] = [Δᐃ.ΔᐃΔⲆⲆΔᐃ, Δᐃ.ⲆᐃΔⵠΔⵠⲆ, Δᐃ.ΔᐃᐃⲆⵠⵠⲆ];
    ΔⲆᐃⲆⲆ[ⲆⲆⲆ.ⵠΔⵠⵠⲆ] = [Δᐃ.ΔⲆᐃⵠΔⵠᐃ, Δᐃ.ΔⲆⲆⲆΔⵠᐃ, Δᐃ.ⵠⵠⵠΔⵠⵠⵠ];
    ΔⲆᐃⲆⲆ[ⲆⲆⲆ.ᐃᐃΔΔⲆΔⵠ] = [Δᐃ.ΔᐃΔⵠⵠⵠⲆ, Δᐃ.ΔΔΔⲆΔⲆΔ, Δᐃ.ᐃᐃᐃᐃⵠⵠⵠ];
    ⲆΔᐃⵠⲆⲆᐃ = u;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, Oq, -29, 205, da | V, ia);
    this.buttons[u++].view = M;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, undefined, -29, 300, da | V, ia);
    this.buttons[u++].view = M;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, ys, -29, 395, da | V, ia);
    this.buttons[u++].view = M;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, Gn, 65, 205, da | V, ia);
    this.buttons[u++].view = M;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, ri, 65, 300, da | V, ia);
    this.buttons[u++].view = M;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, Xl, 65, 395, da | V, ia);
    this.buttons[u++].view = M;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, Mk, 159, 205, da | V, ia);
    this.buttons[u++].view = M;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, undefined, 159, 300, da | V, ia);
    this.buttons[u++].view = M;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, ri, 159, 395, da | V, ia);
    this.buttons[u++].view = M;
    this.buttons[u] = dw(39, 122, 0, [Δᐃ.ⵠⲆⵠⲆΔⵠⲆ, Δᐃ.ΔᐃⵠΔΔⲆⵠ, Δᐃ.ⵠⲆᐃⵠⲆᐃΔ], 1, ha, Gn, -61, 315, da | V, ia);
    this.buttons[u++].view = M;
    this.buttons[u] = dw(39, 122, 0, [Δᐃ.ΔΔΔⲆⵠⵠⲆ, Δᐃ.ᐃⲆᐃΔⲆᐃᐃ, Δᐃ.ΔΔᐃⵠⲆᐃⵠ], 1, ha, hl, 260, 315, da | V, ia);
    this.buttons[u++].view = M;
    this.buttons[u] = dw(115, 73, 0, [Δᐃ.ⵠᐃᐃⵠᐃ, Δᐃ.ⲆⲆⲆᐃⵠ, Δᐃ.ΔⲆⲆⵠΔ], 1, ha, function () {
      q(d);
    }, -320, 470, da | V, ia);
    this.buttons[u++].view = M;
    ⲆⵠⲆΔⵠΔΔⲆⵠ = u;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, Xl, -29, 205, da | V, ia);
    this.buttons[u++].view = S;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, undefined, -29, 300, da | V, ia);
    this.buttons[u++].view = S;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, undefined, -29, 395, da | V, ia);
    this.buttons[u++].view = S;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, undefined, 65, 205, da | V, ia);
    this.buttons[u++].view = S;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, undefined, 65, 300, da | V, ia);
    this.buttons[u++].view = S;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, Cr, 65, 395, da | V, ia);
    this.buttons[u++].view = S;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, Gn, 159, 205, da | V, ia);
    this.buttons[u++].view = S;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, Fg, 159, 300, da | V, ia);
    this.buttons[u++].view = S;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, Pa, 159, 395, da | V, ia);
    this.buttons[u++].view = S;
    this.buttons[u] = dw(39, 122, 0, [Δᐃ.ⵠⲆⵠⲆΔⵠⲆ, Δᐃ.ΔᐃⵠΔΔⲆⵠ, Δᐃ.ⵠⲆᐃⵠⲆᐃΔ], 1, ha, undefined, -61, 315, da | V, ia);
    this.buttons[u++].view = S;
    this.buttons[u] = dw(39, 122, 0, [Δᐃ.ΔΔΔⲆⵠⵠⲆ, Δᐃ.ᐃⲆᐃΔⲆᐃᐃ, Δᐃ.ΔΔᐃⵠⲆᐃⵠ], 1, ha, undefined, 260, 315, da | V, ia);
    this.buttons[u++].view = S;
    this.buttons[u] = dw(115, 73, 0, [Δᐃ.ⵠᐃᐃⵠᐃ, Δᐃ.ⲆⲆⲆᐃⵠ, Δᐃ.ΔⲆⲆⵠΔ], 1, ha, function () {
      q(d);
    }, -320, 470, da | V, ia);
    this.buttons[u++].view = S;
    ⵠⵠΔⵠᐃΔⵠⲆⵠ = u;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, undefined, -29, 205, da | V, ia);
    this.buttons[u++].view = ca;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, undefined, -29, 300, da | V, ia);
    this.buttons[u++].view = ca;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, undefined, -29, 395, da | V, ia);
    this.buttons[u++].view = ca;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, undefined, 65, 205, da | V, ia);
    this.buttons[u++].view = ca;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, undefined, 65, 300, da | V, ia);
    this.buttons[u++].view = ca;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, undefined, 65, 395, da | V, ia);
    this.buttons[u++].view = ca;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, ri, 159, 205, da | V, ia);
    this.buttons[u++].view = ca;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, undefined, 159, 300, da | V, ia);
    this.buttons[u++].view = ca;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, Gn, 159, 395, da | V, ia);
    this.buttons[u++].view = ca;
    this.buttons[u] = dw(39, 122, 0, [Δᐃ.ⵠⲆⵠⲆΔⵠⲆ, Δᐃ.ΔᐃⵠΔΔⲆⵠ, Δᐃ.ⵠⲆᐃⵠⲆᐃΔ], 1, ha, undefined, -61, 315, da | V, ia);
    this.buttons[u++].view = ca;
    this.buttons[u] = dw(39, 122, 0, [Δᐃ.ΔΔΔⲆⵠⵠⲆ, Δᐃ.ᐃⲆᐃΔⲆᐃᐃ, Δᐃ.ΔΔᐃⵠⲆᐃⵠ], 1, ha, Pl, 260, 315, da | V, ia);
    this.buttons[u++].view = ca;
    this.buttons[u] = dw(115, 73, 0, [Δᐃ.ⵠᐃᐃⵠᐃ, Δᐃ.ⲆⲆⲆᐃⵠ, Δᐃ.ΔⲆⲆⵠΔ], 1, ha, function () {
      q(d);
    }, -320, 470, da | V, ia);
    this.buttons[u++].view = ca;
    ΔΔᐃⲆⵠΔⵠᐃⲆ = u;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, undefined, -29, 205, da | V, ia);
    this.buttons[u++].view = D;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, Mk, -29, 300, da | V, ia);
    this.buttons[u++].view = D;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, Mk, -29, 395, da | V, ia);
    this.buttons[u++].view = D;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, ys, 65, 205, da | V, ia);
    this.buttons[u++].view = D;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, undefined, 65, 300, da | V, ia);
    this.buttons[u++].view = D;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, Oq, 65, 395, da | V, ia);
    this.buttons[u++].view = D;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, undefined, 159, 205, da | V, ia);
    this.buttons[u++].view = D;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, Xl, 159, 300, da | V, ia);
    this.buttons[u++].view = D;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, undefined, 159, 395, da | V, ia);
    this.buttons[u++].view = D;
    this.buttons[u] = dw(39, 122, 0, [Δᐃ.ⵠⲆⵠⲆΔⵠⲆ, Δᐃ.ΔᐃⵠΔΔⲆⵠ, Δᐃ.ⵠⲆᐃⵠⲆᐃΔ], 1, ha, undefined, -61, 315, da | V, ia);
    this.buttons[u++].view = D;
    this.buttons[u] = dw(39, 122, 0, [Δᐃ.ΔΔΔⲆⵠⵠⲆ, Δᐃ.ᐃⲆᐃΔⲆᐃᐃ, Δᐃ.ΔΔᐃⵠⲆᐃⵠ], 1, ha, al, 260, 315, da | V, ia);
    this.buttons[u++].view = D;
    this.buttons[u] = dw(115, 73, 0, [Δᐃ.ⵠᐃᐃⵠᐃ, Δᐃ.ⲆⲆⲆᐃⵠ, Δᐃ.ΔⲆⲆⵠΔ], 1, ha, function () {
      q(d);
    }, -320, 470, da | V, ia);
    this.buttons[u++].view = D;
    ΔⲆⵠⵠᐃᐃⵠⵠⵠ = u;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, undefined, -29, 205, da | V, ia);
    this.buttons[u++].view = ba;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, undefined, -29, 300, da | V, ia);
    this.buttons[u++].view = ba;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, undefined, -29, 395, da | V, ia);
    this.buttons[u++].view = ba;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, Gn, 65, 205, da | V, ia);
    this.buttons[u++].view = ba;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, Ct, 65, 300, da | V, ia);
    this.buttons[u++].view = ba;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, kh, 65, 395, da | V, ia);
    this.buttons[u++].view = ba;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, lh, 159, 205, da | V, ia);
    this.buttons[u++].view = ba;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, Gn, 159, 300, da | V, ia);
    this.buttons[u++].view = ba;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, Mk, 159, 395, da | V, ia);
    this.buttons[u++].view = ba;
    this.buttons[u] = dw(39, 122, 0, [Δᐃ.ⵠⲆⵠⲆΔⵠⲆ, Δᐃ.ΔᐃⵠΔΔⲆⵠ, Δᐃ.ⵠⲆᐃⵠⲆᐃΔ], 1, ha, undefined, -61, 315, da | V, ia);
    this.buttons[u++].view = ba;
    this.buttons[u] = dw(39, 122, 0, [Δᐃ.ΔΔΔⲆⵠⵠⲆ, Δᐃ.ᐃⲆᐃΔⲆᐃᐃ, Δᐃ.ΔΔᐃⵠⲆᐃⵠ], 1, ha, ri, 260, 315, da | V, ia);
    this.buttons[u++].view = ba;
    this.buttons[u] = dw(115, 73, 0, [Δᐃ.ⵠᐃᐃⵠᐃ, Δᐃ.ⲆⲆⲆᐃⵠ, Δᐃ.ΔⲆⲆⵠΔ], 1, ha, function () {
      q(d);
    }, -320, 470, da | V, ia);
    this.buttons[u++].view = ba;
    ⵠⵠⵠᐃⵠΔΔⵠΔ = u;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, undefined, -29, 205, da | V, ia);
    this.buttons[u++].view = B;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, Ao, -29, 300, da | V, ia);
    this.buttons[u++].view = B;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, ys, -29, 395, da | V, ia);
    this.buttons[u++].view = B;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, undefined, 65, 205, da | V, ia);
    this.buttons[u++].view = B;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, Yo, 65, 300, da | V, ia);
    this.buttons[u++].view = B;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, Mk, 65, 395, da | V, ia);
    this.buttons[u++].view = B;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, undefined, 159, 205, da | V, ia);
    this.buttons[u++].view = B;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, Iq, 159, 300, da | V, ia);
    this.buttons[u++].view = B;
    this.buttons[u] = dw(178, 182, 0, [Δᐃ.ΔⵠⲆᐃ, Δᐃ.ΔᐃΔⵠ, Δᐃ.ᐃⲆⵠⵠ], 1, ha, undefined, 159, 395, da | V, ia);
    this.buttons[u++].view = B;
    this.buttons[u] = dw(39, 122, 0, [Δᐃ.ⵠⲆⵠⲆΔⵠⲆ, Δᐃ.ΔᐃⵠΔΔⲆⵠ, Δᐃ.ⵠⲆᐃⵠⲆᐃΔ], 1, ha, lh, -61, 315, da | V, ia);
    this.buttons[u++].view = B;
    this.buttons[u] = dw(39, 122, 0, [Δᐃ.ΔΔΔⲆⵠⵠⲆ, Δᐃ.ᐃⲆᐃΔⲆᐃᐃ, Δᐃ.ΔΔᐃⵠⲆᐃⵠ], 1, ha, es, 260, 315, da | V, ia);
    this.buttons[u++].view = B;
    this.buttons[u] = dw(115, 73, 0, [Δᐃ.ⵠᐃᐃⵠᐃ, Δᐃ.ⲆⲆⲆᐃⵠ, Δᐃ.ΔⲆⲆⵠΔ], 1, ha, function () {
      q(d);
    }, -320, 470, da | V, ia);
    this.buttons[u++].view = B;
    this.buttons[u] = dw(260, 260, 0, [Δᐃ.ΔⲆⵠⵠᐃⵠⵠ, Δᐃ.ᐃⲆᐃⵠΔⲆΔ, Δᐃ.ΔᐃⲆᐃⵠΔΔ], 1, ha, function () {
      if (I.ⲆⵠⲆⵠⲆ()) {
        tx(3, 50);
      } else {
        q(v);
      }
    }, -65, 150 + 448 / fd - 260 / co, da | V, ia);
    this.buttons[u++].view = k;
    this.buttons[u] = dw(115, 73, 0, [Δᐃ.ⵠᐃᐃⵠᐃ, Δᐃ.ⲆⲆⲆᐃⵠ, Δᐃ.ΔⲆⲆⵠΔ], 1, ha, function () {
      q(c);
    }, 309, 180, da | V, ia);
    this.buttons[u++].view = k;
    this.buttons[u] = dw(260, 260, 0, [Δᐃ.ΔⵠⲆᐃⵠΔⵠ, Δᐃ.ⵠⵠⵠⵠⲆⵠⲆ, Δᐃ.ⵠⵠⲆⵠⲆⵠᐃ], 1, ha, function () {
      if (I.ⲆⵠⲆⵠⲆ()) {
        tx(0, bn);
      } else {
        q(v);
      }
    }, -260 / cq, 150 + 448 / Nh - 260 / Mu, da | V, ia);
    this.buttons[u++].view = Z;
    this.buttons[u] = dw(115, 73, 0, [Δᐃ.ⵠᐃᐃⵠᐃ, Δᐃ.ⲆⲆⲆᐃⵠ, Δᐃ.ΔⲆⲆⵠΔ], 1, ha, function () {
      q(c);
    }, 309, 180, da | V, ia);
    this.buttons[u++].view = Z;
    this.buttons[u] = dw(260, 260, 0, [Δᐃ.ΔⵠᐃᐃⵠᐃⲆ, Δᐃ.ΔⵠᐃⵠⵠⲆⲆ, Δᐃ.ⵠᐃᐃΔⵠᐃΔ], 1, ha, function () {
      if (I.ⲆⵠⲆⵠⲆ()) {
        tx(co, 150);
      } else {
        q(v);
      }
    }, -65, 150 + 448 / Zt - 65, da | V, ia);
    this.buttons[u++].view = w;
    this.buttons[u] = dw(115, 73, 0, [Δᐃ.ⵠᐃᐃⵠᐃ, Δᐃ.ⲆⲆⲆᐃⵠ, Δᐃ.ΔⲆⲆⵠΔ], 1, ha, function () {
      q(c);
    }, 309, 180, da | V, ia);
    this.buttons[u++].view = w;
    this.buttons[u] = dw(260, 260, 0, [Δᐃ.ᐃᐃΔⲆΔΔⵠ, Δᐃ.ᐃᐃΔⵠᐃⲆΔ, Δᐃ.ᐃΔⲆᐃⵠⲆⵠ], 1, ha, function () {
      if (I.ⲆⵠⲆⵠⲆ()) {
        tx(1, 300);
      } else {
        q(v);
      }
    }, -65, 150 + 448 / cq - 260 / cq, da | V, ia);
    this.buttons[u++].view = x;
    this.buttons[u] = dw(115, 73, 0, [Δᐃ.ⵠᐃᐃⵠᐃ, Δᐃ.ⲆⲆⲆᐃⵠ, Δᐃ.ΔⲆⲆⵠΔ], 1, ha, function () {
      q(c);
    }, 309, 180, da | V, ia);
    this.buttons[u++].view = x;
    this.buttons[u] = dw(260, 260, 0, [Δᐃ.ΔⲆⵠⲆⲆᐃΔ, Δᐃ.ΔᐃᐃⵠⵠⲆⲆ, Δᐃ.ⲆᐃⲆⵠⵠᐃⵠ], 1, ha, function () {
      if (I.ⲆⵠⲆⵠⲆ()) {
        tx(2, 600);
      } else {
        q(v);
      }
    }, -260 / ge, 197, da | V, ia);
    this.buttons[u++].view = P;
    this.buttons[u] = dw(115, 73, 0, [Δᐃ.ⵠᐃᐃⵠᐃ, Δᐃ.ⲆⲆⲆᐃⵠ, Δᐃ.ΔⲆⲆⵠΔ], 1, ha, function () {
      q(c);
    }, 309, 180, da | V, ia);
    this.buttons[u++].view = P;
    this.buttons[u] = dw(260, 260, 0, [Δᐃ.ᐃᐃΔⲆΔΔⵠ, Δᐃ.ᐃᐃΔⵠᐃⲆΔ, Δᐃ.ᐃΔⲆᐃⵠⲆⵠ], 1, ha, function () {
      if (I.ⲆⵠⲆⵠⲆ()) {
        tx(5, 300);
      } else {
        q(v);
      }
    }, -260 / Qt, 150 + 448 / cq - 260 / aq, da | V, ia);
    this.buttons[u++].view = J;
    this.buttons[u] = dw(115, 73, 0, [Δᐃ.ⵠᐃᐃⵠᐃ, Δᐃ.ⲆⲆⲆᐃⵠ, Δᐃ.ΔⲆⲆⵠΔ], 1, ha, function () {
      q(c);
    }, 309, 180, da | V, ia);
    this.buttons[u++].view = J;
    var va = u;
    this.buttons[u] = dw(46, 51, 0, [Δᐃ.ⲆᐃⲆᐃⵠⲆΔ, Δᐃ.ⲆⵠⲆⲆⵠⲆΔ, Δᐃ.ⲆΔⵠⵠⵠΔⵠ], 1, ha, function () {
      ua(es, fg);
    }, -305, 132, da | V, ia);
    this.buttons[u++].view = b;
    var wa = u;
    this.buttons[u] = dw(46, 51, 0, [Δᐃ.ⲆΔⵠᐃᐃΔΔ, Δᐃ.ⵠⲆᐃΔΔⵠΔ, Δᐃ.ⲆⵠⵠΔᐃΔᐃ], 1, ha, function () {
      ua(Iq, 1);
    }, -273, 132, da | V, ia);
    this.buttons[u++].view = b;
    var xa = u;
    this.buttons[u] = dw(46, 51, 0, [Δᐃ.ΔⲆᐃᐃⲆᐃᐃ, Δᐃ.ᐃⲆⲆΔⵠᐃᐃ, Δᐃ.ΔΔⵠⵠⵠᐃⵠ], 1, ha, function () {
      ua(Mk, qo);
    }, -241, 132, da | V, ia);
    this.buttons[u++].view = b;
    var ya = u;
    this.buttons[u] = dw(46, 51, 0, [Δᐃ.ΔΔⵠⲆᐃᐃⵠ, Δᐃ.ᐃΔΔⲆᐃΔᐃ, Δᐃ.ⵠᐃᐃⵠⲆⵠᐃ], 1, ha, function () {
      ua(Pa, 3);
    }, -305, 165, da | V, ia);
    this.buttons[u++].view = b;
    var za = u;
    this.buttons[u] = dw(46, 51, 0, [Δᐃ.ⲆⵠⲆᐃᐃⲆΔ, Δᐃ.ⲆⵠⵠⲆΔⵠΔ, Δᐃ.ⲆΔᐃΔᐃᐃΔ], 1, ha, function () {
      ua(undefined, iu);
    }, -273, 165, da | V, ia);
    this.buttons[u++].view = b;
    var Aa = u;
    this.buttons[u] = dw(46, 51, 0, [Δᐃ.ᐃᐃΔᐃⲆΔᐃ, Δᐃ.ᐃᐃΔᐃⵠⲆΔ, Δᐃ.ᐃⲆⵠΔⵠⲆΔ], 1, ha, function () {
      ua(undefined, 3);
    }, -241, 165, da | V, ia);
    this.buttons[u++].view = b;
    var Ba = u;
    this.buttons[u] = dw(460, 73, 0, [Δᐃ.ⲆᐃⵠᐃᐃⵠⲆ, Δᐃ.ᐃᐃⵠΔⵠᐃᐃ, Δᐃ.ⵠΔⲆΔⲆⲆΔ], 1, ha, function () {
      ua(-Fb);
    }, -180, 170, da | V, ia);
    this.buttons[u++].view = b;
    var Ca = u;
    this.buttons[u] = dw(222, 68, 0, [Δᐃ.ΔΔⵠⲆⵠᐃᐃ, Δᐃ.ᐃΔⲆⵠΔⵠⲆ, Δᐃ.ᐃⵠⵠᐃᐃΔⲆ], 1, ha, function () {
      ua(ow.ⲆⵠⵠΔⵠ);
    }, -180, 215, da | V, ia);
    this.buttons[u++].view = b;
    var Da = u;
    this.buttons[u] = dw(222, 68, 0, [Δᐃ.ⵠΔᐃᐃⵠΔⲆ, Δᐃ.ᐃΔΔⲆᐃᐃᐃ, Δᐃ.ⲆΔᐃΔⲆⲆⲆ], 1, ha, function () {
      ua(ow.ᐃⵠΔΔⲆ);
    }, -180, 260, da | V, ia);
    this.buttons[u++].view = b;
    var Fa = u;
    this.buttons[u] = dw(222, 68, 0, [Δᐃ.ΔᐃⵠⲆⵠᐃᐃ, Δᐃ.ⲆⵠΔᐃᐃⵠΔ, Δᐃ.ΔⲆⵠΔⲆᐃΔ], 1, ha, function () {
      ua(ow.ΔΔᐃᐃᐃ);
    }, -60, 215, da | V, ia);
    this.buttons[u++].view = b;
    var Ha = u;
    this.buttons[u] = dw(222, 68, 0, [Δᐃ.ᐃᐃⲆⲆΔⵠᐃ, Δᐃ.ᐃᐃⲆΔᐃⵠⵠ, Δᐃ.ᐃΔⵠⲆᐃΔᐃ], 1, ha, function () {
      ua(ow.ᐃΔⵠᐃᐃ);
    }, -60, 260, da | V, ia);
    this.buttons[u++].view = b;
    this.ᐃᐃᐃⵠⵠΔⲆ = u;
    this.buttons[u] = dw(143, 66, 0, [Δᐃ.ΔⲆΔⲆⵠⲆΔ, Δᐃ.ⵠΔᐃᐃΔΔΔ, Δᐃ.ΔΔⲆⵠⵠΔΔ], 1, ha, function () {
      $f(undefined, pf.ᐃᐃᐃⵠⵠΔⲆ);
    }, -298, 110, da | V, ia);
    this.buttons[u++].view = p;
    this.ⲆΔⲆⲆᐃΔⲆ = u;
    this.buttons[u] = dw(104, 66, 0, [Δᐃ.ᐃΔⲆⲆᐃⲆᐃ, Δᐃ.ᐃⵠⵠΔⵠᐃΔ, Δᐃ.ᐃΔⲆⲆⲆΔᐃ], 1, ha, function () {
      $f(Mk, pf.ⲆΔⲆⲆᐃΔⲆ);
    }, -223, 110, da | V, ia);
    this.buttons[u++].view = p;
    this.ⵠΔᐃᐃⲆⵠⲆ = u;
    this.buttons[u] = dw(110, 66, 0, [Δᐃ.ΔᐃΔⲆⵠᐃⵠ, Δᐃ.ᐃΔΔΔⲆᐃᐃ, Δᐃ.ΔᐃᐃⲆᐃⵠΔ], 1, ha, function () {
      $f(undefined, pf.ⵠΔᐃᐃⲆⵠⲆ);
    }, -168, 110, da | V, ia);
    this.buttons[u++].view = p;
    this.Ⲇᐃⵠⵠⵠᐃⵠ = u;
    this.buttons[u] = dw(88, 66, 0, [Δᐃ.ⲆᐃⲆⵠⲆⲆΔ, Δᐃ.ΔⲆⲆᐃΔⲆΔ, Δᐃ.ⲆΔΔᐃⵠΔΔ], 1, ha, function () {
      $f(Iq, pf.Ⲇᐃⵠⵠⵠᐃⵠ);
    }, -110, 110, da | V, ia);
    this.buttons[u++].view = p;
    this.ⲆⲆⵠᐃᐃⵠΔ = u;
    this.buttons[u] = dw(88, 66, 0, [Δᐃ.ᐃΔᐃⲆᐃⵠΔ, Δᐃ.ⲆᐃⲆⵠΔⲆⲆ, Δᐃ.ⲆⲆΔᐃᐃⲆΔ], 1, ha, function () {
      $f(E, pf.ⲆⲆⵠᐃᐃⵠΔ);
    }, -63, 110, da | V, ia);
    this.buttons[u++].view = p;
    this.buttons[u] = dw(86, 44, 0, [Δᐃ.ᐃⵠᐃⲆᐃⵠΔ, Δᐃ.ⵠⲆΔⵠⲆⵠⲆ, Δᐃ.ΔⵠᐃⵠᐃᐃΔ], 1, ha, function () {
      bj.open("./terms.html", "_blank");
    }, 349, 290, da | V, ia);
    this.buttons[u++].view = c;
    var Ia = new e(ΔⲆⲆΔ.ΔⲆᐃᐃⲆ, ⲆΔᐃⵠⲆⲆᐃ, function (a) {
      pf.ⲆⲆⲆⲆ = a;
      if (pf.unlock.ⲆⲆⲆⲆ[a] === 1) {
        ⵠⲆⲆᐃ.set("starve_skin", "" + a, {
          expires: 30
        });
      }
    }, this.ⲆⲆⲆⲆ, this.unlock.ⲆⲆⲆⲆ);
    var Ja = new e(ΔⲆⲆΔ.ⵠⲆᐃⲆ, ΔΔᐃⲆⵠΔⵠᐃⲆ, function (a) {
      pf.ΔⲆⵠⵠᐃ = a;
      if (pf.unlock.ΔⲆⵠⵠᐃ[a] === sc) {
        ⵠⲆⲆᐃ.set("starve_bag", "" + a, {
          expires: 30
        });
      }
    }, this.ΔⲆⵠⵠᐃ, this.unlock.ΔⲆⵠⵠᐃ);
    var Ka = new e(ΔⲆⲆΔ.ΔⵠᐃⲆⲆ, ΔⲆⵠⵠᐃᐃⵠⵠⵠ, function (a) {
      pf.ⵠⵠᐃᐃᐃ = a;
      if (pf.unlock.ⵠⵠᐃᐃᐃ[a] === 1) {
        ⵠⲆⲆᐃ.set("starve_book", "" + a, {
          expires: 30
        });
      }
    }, this.ⵠⵠᐃᐃᐃ, this.unlock.ⵠⵠᐃᐃᐃ);
    var Ma = new e(ΔⲆⲆΔ.ΔΔⵠⲆⲆ, ⵠⵠⵠᐃⵠΔΔⵠΔ, function (a) {
      pf.ⲆⵠΔΔⲆ = a;
      if (pf.unlock.ⲆⵠΔΔⲆ[a] === 1) {
        ⵠⲆⲆᐃ.set("starve_dead", "" + a, {
          expires: 30
        });
      }
    }, this.ⲆⵠΔΔⲆ, this.unlock.ⲆⵠΔΔⲆ);
    var Na = new e(ΔⲆⲆΔ.ΔΔⵠⲆⲆ, ⵠⵠΔⵠᐃΔⵠⲆⵠ, function (a) {
      pf.ⲆⵠⲆᐃⵠ = a;
      if (pf.unlock.ⲆⵠⲆᐃⵠ[a] === Ni) {
        ⵠⲆⲆᐃ.set("starve_crate", "" + a, {
          expires: 30
        });
      }
    }, this.ⲆⵠⲆᐃⵠ, this.unlock.ⲆⵠⲆᐃⵠ);
    var Qa = new e(ΔⲆⲆΔ.ΔΔⵠⲆᐃ, ⲆⵠⲆΔⵠΔΔⲆⵠ, function (a) {
      pf.ΔΔΔΔⲆ = a;
      if (pf.unlock.ΔΔΔΔⲆ[a] === wh) {
        ⵠⲆⲆᐃ.set("starve_accessory", "" + a, {
          expires: 30
        });
      }
    }, this.ΔΔΔΔⲆ, this.unlock.ΔΔΔΔⲆ);
    this.ΔᐃᐃᐃΔⲆⵠ = function (a) {
      kf.ΔⲆⵠⲆ = bw(I.ⵠⲆ, a);
      for (var b = fg; b < I.buttons.length; b++) {
        if (I.buttons[b].info.active === ja) {
          I.buttons[b].ᐃᐃⵠⵠ(I.ⵠⲆ, kf.ΔⲆⵠⲆ, Yv);
        }
      }
    };
    this.ⵠᐃⲆⵠⲆⲆΔ = function (a) {
      kf.ΔⲆⵠⲆ = bw(I.ⵠⲆ, a);
      for (var b = yj; I.buttons.length > b; b++) {
        var c = I.buttons[b];
        if (c.info.active === ja && c.ᐃᐃⵠⵠ(I.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv)) {
          c.info.callback();
          return;
        }
      }
    };
    this.ⵠⵠⵠⵠᐃⲆΔ = Tg;
    this.ⲆΔᐃΔⲆⲆᐃ = function (a) {
      kf.ΔⲆⵠⲆ = bw(I.ⵠⲆ, a);
      var b = false;
      for (var c = 0; I.buttons.length > c; c++) {
        if (I.buttons[c].info.active === ja) {
          b |= I.buttons[c].ᐃᐃⵠⵠ(I.ⵠⲆ, kf.ΔⲆⵠⲆ, Xv);
        }
      }
      if (I.ⵠⵠⵠⵠᐃⲆΔ !== b) {
        I.ⵠⵠⵠⵠᐃⲆΔ = b;
        if (b) {
          i.style.cursor = I.ⵠⵠᐃⲆⵠᐃⵠ;
        } else {
          i.style.cursor = I.ᐃΔⵠⵠⲆᐃᐃ;
        }
      }
    };
    this.ⲆⲆⵠⲆⵠᐃᐃ = function () {
      bj.addEventListener("mousedown", this.ΔᐃᐃᐃΔⲆⵠ, Jh);
      bj.addEventListener("mouseup", this.ⵠᐃⲆⵠⲆⲆΔ, false);
      bj.addEventListener("mousemove", this.ⲆΔᐃΔⲆⲆᐃ, Zl);
    };
    this.ΔⵠᐃΔᐃᐃΔ = function () {
      bj.removeEventListener("mousedown", this.ΔᐃᐃᐃΔⲆⵠ, ml);
      bj.removeEventListener("mouseup", this.ⵠᐃⲆⵠⲆⲆΔ, Zl);
      bj.removeEventListener("mousemove", this.ⲆΔᐃΔⲆⲆᐃ, gh);
    };
  }
  function Uw(c, d) {
    var f = this;
    this.ⵠⲆ = c;
    this.Δ = d;
    if (bj.navigator.userAgent.indexOf("Edge") > -1) {
      this.ᐃΔⵠⵠⲆᐃᐃ = "default";
      this.ⵠⵠᐃⲆⵠᐃⵠ = "pointer";
    } else {
      this.ᐃΔⵠⵠⲆᐃᐃ = "url('img/cursor0.png'), default";
      this.ⵠⵠᐃⲆⵠᐃⵠ = "url('img/cursor1.png'), pointer";
    }
    this.ΔᐃⲆᐃΔⲆⲆ = Ls;
    this.ΔⲆⲆⵠⵠΔᐃ = sl;
    this.ᐃⲆⲆΔⲆᐃⵠ = wh;
    this.ΔᐃᐃⵠⲆⵠⵠ = Ni;
    this.ⵠᐃᐃⵠⲆⵠⵠⲆⲆ = {
      id: document.getElementById("team_box"),
      style: document.getElementById("team_box").style,
      ⲆᐃⲆ: function () {
        this.style.left = Math.floor(mq - 125) + "px";
        this.style.top = "110px";
      }
    };
    this.ⲆⲆⵠⲆ = {
      ΔⲆⲆΔΔᐃᐃ: dw(60, 60, 0, ᐃΔ[782]),
      ΔⵠΔⵠᐃⲆⲆ: dw(60, 60, 0, ᐃΔ[783])
    };
    this.sign = {
      open: ja,
      ᐃⲆᐃΔᐃⵠᐃⲆⲆ: Ih,
      ⵠⵠᐃᐃᐃⲆΔ: document.getElementById("sign_object"),
      ⲆⲆⲆⲆⲆⲆⵠ: 0,
      id: document.getElementById("sign_window"),
      style: document.getElementById("sign_window").style,
      button: dw(60, 60, 0, ᐃΔ[803]),
      ⵠⵠⵠⲆΔΔⲆ: function () {
        var a = Math.floor(Math.floor((3 + dx.Ⲇⵠᐃⵠ.ⵠⵠⵠⵠⲆ.length) / 4) * (vc + ᐃΔ[316][Fj].width) + 35);
        this.button.info.translate.x = a;
        this.button.info.translate.y = 22;
      },
      ⲆᐃⲆ: function () {
        this.style.left = Math.floor(mq - 150) + "px";
        this.style.top = Math.floor(Qo - 115) + "px";
      },
      ⵠᐃⲆⲆᐃ: function () {
        fx.sign.style.display = "none";
        fx.sign.open = false;
      },
      select: function () {
        fx.sign.open = !fx.sign.open;
        if (fx.sign.open) {
          fx.sign.style.display = "inline-block";
        } else {
          fx.sign.style.display = "none";
        }
      },
      ok: function () {
        ᐃΔᐃᐃ.ⵠᐃⲆΔᐃᐃᐃⵠᐃ(dx.sign.ⲆⵠⲆⵠΔ, fx.sign.ⲆⲆⲆⲆⲆⲆⵠ);
        fx.sign.select();
      },
      up: function () {
        fx.sign.ⲆⲆⲆⲆⲆⲆⵠ = fx.sign.ⲆⲆⲆⲆⲆⲆⵠ === 0 ? nw.ΔⲆⲆⲆⵠⲆⲆ - Ni : fx.sign.ⲆⲆⲆⲆⲆⲆⵠ - bs;
        fx.sign.ⵠⵠᐃᐃᐃⲆΔ.src = "./img/sign" + fx.sign.ⲆⲆⲆⲆⲆⲆⵠ + ".png";
      },
      down: function () {
        fx.sign.ⲆⲆⲆⲆⲆⲆⵠ = (fx.sign.ⲆⲆⲆⲆⲆⲆⵠ + 1) % nw.ΔⲆⲆⲆⵠⲆⲆ;
        fx.sign.ⵠⵠᐃᐃᐃⲆΔ.src = "./img/sign" + fx.sign.ⲆⲆⲆⲆⲆⲆⵠ + ".png";
      }
    };
    document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, tr);
    document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, Tg);
    document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, false);
    document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, Eq);
    this.ⲆᐃⲆᐃⵠ = {
      open: false,
      id: document.getElementById("shop_market"),
      style: document.getElementById("shop_market").style,
      items: [{
        id: Fj,
        name: "wood",
        ΔᐃⲆΔⵠ: 1,
        b: 1,
        a: iu,
        ⵠⲆⵠᐃⵠ: 316
      }, {
        id: ck,
        name: "stone",
        ΔᐃⲆΔⵠ: bs,
        b: 1,
        a: 4,
        ⵠⲆⵠᐃⵠ: 315
      }, {
        id: X,
        name: "gold",
        ΔᐃⲆΔⵠ: 1,
        b: wh,
        a: U,
        ⵠⲆⵠᐃⵠ: 297
      }, {
        id: Hn,
        name: "diamond",
        ΔᐃⲆΔⵠ: 4,
        b: 4,
        a: Co,
        ⵠⲆⵠᐃⵠ: 298
      }, {
        id: Oa,
        name: "amethyst",
        ΔᐃⲆΔⵠ: yl,
        b: k,
        a: ck,
        ⵠⲆⵠᐃⵠ: 418
      }, {
        id: 5,
        name: "reidite",
        ΔᐃⲆΔⵠ: ch,
        b: 16,
        a: 1,
        ⵠⲆⵠᐃⵠ: 938
      }, {
        id: Oe,
        name: "pumpkin_seed",
        ΔᐃⲆΔⵠ: 10,
        b: vc,
        a: 1,
        ⵠⲆⵠᐃⵠ: 808
      }, {
        id: 7,
        name: "carrot_seed",
        ΔᐃⲆΔⵠ: 16,
        b: Rh,
        a: ck,
        ⵠⲆⵠᐃⵠ: 949
      }, {
        id: Je,
        name: "tomato_seed",
        ΔᐃⲆΔⵠ: 20,
        b: 20,
        a: ck,
        ⵠⲆⵠᐃⵠ: 959
      }, {
        id: 9,
        name: "thornbush_seed",
        ΔᐃⲆΔⵠ: 30,
        b: 30,
        a: Fb,
        ⵠⲆⵠᐃⵠ: 845
      }, {
        id: Vq,
        name: "garlic_seed",
        ΔᐃⲆΔⵠ: 40,
        b: 40,
        a: 1,
        ⵠⲆⵠᐃⵠ: 834
      }, {
        id: Lg,
        name: "watermelon_seed",
        ΔᐃⲆΔⵠ: 60,
        b: 60,
        a: 1,
        ⵠⲆⵠᐃⵠ: 966
      }],
      button: dw(60, 60, 0, ᐃΔ[795]),
      ⲆᐃⲆ: function () {
        this.style.left = Math.floor(mq - 450) + "px";
        this.style.top = Math.floor(Qo - 270) + "px";
      },
      select: function () {
        fx.ⲆᐃⲆᐃⵠ.open = !fx.ⲆᐃⲆᐃⵠ.open;
        if (fx.ⲆᐃⲆᐃⵠ.open) {
          fx.ⲆᐃⲆᐃⵠ.style.display = "inline-block";
        } else {
          fx.ⲆᐃⲆᐃⵠ.style.display = "none";
        }
      },
      ⵠᐃⲆⲆᐃ: function () {
        fx.ⲆᐃⲆᐃⵠ.style.display = "none";
        fx.ⲆᐃⲆᐃⵠ.open = false;
      },
      ⲆΔΔⲆⵠⲆᐃ: function () {
        ᐃΔᐃᐃ.ⲆⲆᐃⵠᐃΔᐃᐃᐃ(this.ᐃⲆᐃΔΔᐃⲆ);
      },
      Δᐃᐃⵠⵠ: function () {
        this.id;
        if (this.ᐃⲆᐃΔΔᐃⲆ.a === 1) {
          var a = Math.floor(Number(this.value) * this.ᐃⲆᐃΔΔᐃⲆ.b);
          this.ᐃⲆᐃΔΔᐃⲆ.ΔᐃⲆΔⵠ = a;
          document.getElementById(this.ᐃⲆᐃΔΔᐃⲆ.name + "_trad_number").innerHTML = a + "";
        } else {
          a = Math.floor(Number(this.value) / this.ᐃⲆᐃΔΔᐃⲆ.a);
          this.ᐃⲆᐃΔΔᐃⲆ.ΔᐃⲆΔⵠ = a;
          document.getElementById(this.ᐃⲆᐃΔΔᐃⲆ.name + "_trad_number").innerHTML = a + "";
        }
      }
    };
    document.getElementById("quit_market").addEventListener("mouseup", this.ⲆᐃⲆᐃⵠ.ⵠᐃⲆⲆᐃ, false);
    var e = [["mouseup", this.ⲆᐃⲆᐃⵠ.ⲆΔΔⲆⵠⲆᐃ, "buy_"], ["click", this.ⲆᐃⲆᐃⵠ.Δᐃᐃⵠⵠ, ""], ["change", this.ⲆᐃⲆᐃⵠ.Δᐃᐃⵠⵠ, ""], ["keypress", this.ⲆᐃⲆᐃⵠ.keypress, ""]];
    for (var i = An; i < this.ⲆᐃⲆᐃⵠ.items.length; i++) {
      var j = this.ⲆᐃⲆᐃⵠ.items[i];
      document.getElementById(j.name + "_market").src = Pa === ᐃΔ[j.ⵠⲆⵠᐃⵠ][0].ᐃⲆΔⵠΔ ? ᐃΔ[j.ⵠⲆⵠᐃⵠ][bu].src : ᐃΔ[j.ⵠⲆⵠᐃⵠ][0].ᐃⲆΔⵠΔ;
      if (j.a === 1) {
        document.getElementById(j.name + "_trad_number").innerHTML = j.b;
        document.getElementById(j.name + "_number").value = 1;
        document.getElementById(j.name + "_number").step = Gt;
        document.getElementById(j.name + "_number").min = 1;
        document.getElementById(j.name + "_number").max = Math.floor(os / j.b);
      } else {
        document.getElementById(j.name + "_trad_number").innerHTML = 1;
        document.getElementById(j.name + "_number").value = j.a;
        document.getElementById(j.name + "_number").step = j.a;
        document.getElementById(j.name + "_number").min = j.a;
      }
      document.getElementById("buy_" + j.name + "_number").ᐃⲆᐃΔΔᐃⲆ = j;
      document.getElementById(j.name + "_number").ᐃⲆᐃΔΔᐃⲆ = j;
      for (var m = yj; e.length > m; m++) {
        document.getElementById(e[m][ta] + j.name + "_number").addEventListener(e[m][0], e[m][1], false);
      }
    }
    $("[type='number']").keypress(function (a) {
      a.preventDefault();
    });
    this.options = {
      open: false,
      id: document.getElementById("option_in_game"),
      style: document.getElementById("option_in_game").style,
      ΔⵠⲆΔᐃ: document.getElementById("agree_ing").style,
      ⲆⲆᐃΔΔⵠᐃ: document.getElementById("cancel_agree_ing").style,
      ⲆⵠᐃΔⲆⲆΔ: document.getElementById("quest_agree_ing").style,
      ΔⵠᐃⲆᐃⲆⲆ: document.getElementById("spectator_agree_ing").style,
      ΔΔᐃᐃⵠⲆⵠ: document.getElementById("auto_feed_agree_ing").style,
      ᐃⵠⵠΔΔᐃΔ: document.getElementById("info_agree_ing").style,
      ΔᐃΔⲆΔⲆΔ: document.getElementById("pixelated_agree_ing").style,
      button: dw(60, 60, 0, ᐃΔ[727]),
      ᐃⵠⲆᐃⵠᐃᐃⵠⲆ: function () {
        fx.options.open = !fx.options.open;
        if (fx.options.open) {
          fx.options.style.display = "inline-block";
        } else {
          fx.options.style.display = "none";
        }
      },
      ΔΔᐃⵠᐃᐃΔⵠΔ: function () {
        pf.ⵠⲆΔⲆⲆᐃᐃ();
      },
      ΔⵠⵠⲆᐃᐃᐃᐃⲆ: function () {
        pf.ⲆⲆⲆⵠᐃⲆᐃ();
      },
      high: function () {
        pf.ⵠᐃⵠᐃᐃᐃⲆᐃᐃ();
      },
      low: function () {
        pf.ᐃΔΔΔᐃⵠᐃᐃΔ();
      },
      ᐃⲆⵠⲆΔ: function () {
        fx.ⵠΔⲆΔ.ᐃⲆⵠⲆΔ();
      },
      ΔⲆᐃⲆᐃⲆⵠΔΔ: function () {
        fx.ΔⲆΔᐃⵠ.ᐃⲆⵠⲆΔ();
      },
      ⵠᐃΔᐃΔⲆⲆⵠᐃ: function () {
        fx.ⵠΔᐃΔ.ᐃⲆⵠⲆΔ();
      },
      ⵠⵠᐃⵠᐃⲆⲆᐃᐃ: function () {
        dx.ⵠⵠΔⲆⲆ.ⵠΔⲆⵠᐃⲆΔ();
      },
      ΔΔⵠⵠⵠⵠⲆⲆᐃ: function () {
        dx.ᐃⵠⵠΔᐃ.ⵠΔⲆⵠᐃⲆΔ();
      },
      ⵠᐃⲆⲆᐃ: function () {
        fx.options.style.display = "none";
        fx.options.open = false;
      },
      ⲆᐃⲆ: function () {
        this.style.left = Math.floor(mq - 235) + "px";
        this.style.top = Math.floor(Qo - 170) + "px";
      }
    };
    document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ΔΔᐃⵠᐃᐃΔⵠΔ, false);
    document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ΔⵠⵠⲆᐃᐃᐃᐃⲆ, Jn);
    document.getElementById("low_ing").addEventListener("mouseup", this.options.low, Wh);
    document.getElementById("high_ing").addEventListener("mouseup", this.options.high, ds);
    document.getElementById("quit_opt").addEventListener("mouseup", this.options.ⵠᐃⲆⲆᐃ, Lk);
    document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.ᐃⲆⵠⲆΔ, Zl);
    document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ⵠᐃΔᐃΔⲆⲆⵠᐃ, Ge);
    document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ΔⲆᐃⲆᐃⲆⵠΔΔ, false);
    document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ⵠⵠᐃⵠᐃⲆⲆᐃᐃ, false);
    document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ΔΔⵠⵠⵠⵠⲆⲆᐃ, Hj);
    this.ΔⲆΔᐃⵠ = {
      open: tr,
      ΔᐃΔᐃΔ: ⵠⲆⲆᐃ.get("starve_cancel") ? ⵠⲆⲆᐃ.get("starve_cancel") === "0" ? Gg : sl : Ls,
      id: document.getElementById("cancel_sure_delete"),
      style: document.getElementById("cancel_sure_delete").style,
      ΔⵠⲆΔᐃ: document.getElementById("cancel_agree").style,
      button: 0,
      Ⲇᐃ: sb,
      ⵠᐃⲆⲆᐃ: function () {
        fx.ΔⲆΔᐃⵠ.style.display = "none";
        fx.ΔⲆΔᐃⵠ.open = false;
      },
      ᐃⲆᐃᐃᐃⲆⲆ: function () {
        if (dx.Ⲇⵠᐃⵠ.ᐃⲆΔⲆⲆ) {
          ᐃΔᐃᐃ.ⵠᐃᐃⲆⲆⵠⵠⲆᐃ();
        }
        fx.ΔⲆΔᐃⵠ.ⵠᐃⲆⲆᐃ();
      },
      ᐃⲆⵠⲆΔ: function () {
        if (fx.ΔⲆΔᐃⵠ.ΔᐃΔᐃΔ) {
          ⵠⲆⲆᐃ.set("starve_cancel", "0");
          fx.ΔⲆΔᐃⵠ.ΔⵠⲆΔᐃ.display = "inline-block";
          fx.options.ⲆⲆᐃΔΔⵠᐃ.display = "none";
        } else {
          ⵠⲆⲆᐃ.set("starve_cancel", "1");
          fx.ΔⲆΔᐃⵠ.ΔⵠⲆΔᐃ.display = "none";
          fx.options.ⲆⲆᐃΔΔⵠᐃ.display = "inline-block";
        }
        fx.ΔⲆΔᐃⵠ.ΔᐃΔᐃΔ = !fx.ΔⲆΔᐃⵠ.ΔᐃΔᐃΔ;
      },
      ⵠⵠΔΔⲆΔⲆ: function () {
        if (this.ΔᐃΔᐃΔ) {
          this.style.display = "inline-block";
          this.open = oh;
        } else {
          this.ᐃⲆᐃᐃᐃⲆⲆ();
        }
      },
      ⲆᐃⲆ: function () {
        this.style.left = Math.floor(mq - 235) + "px";
        this.style.top = Math.floor(Qo - 130) + "px";
      }
    };
    this.ΔⲆΔᐃⵠ.id.oncontextmenu = function () {
      return Bo;
    };
    this.ΔⲆΔᐃⵠ.ΔⵠⲆΔᐃ.display = "none";
    if (this.ΔⲆΔᐃⵠ.ΔᐃΔᐃΔ) {
      this.options.ⲆⲆᐃΔΔⵠᐃ.display = "inline-block";
    } else {
      this.options.ⲆⲆᐃΔΔⵠᐃ.display = "none";
    }
    document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.ΔⲆΔᐃⵠ.ᐃⲆᐃᐃᐃⲆⲆ, gh);
    document.getElementById("cancel_no_delete").addEventListener("mouseup", this.ΔⲆΔᐃⵠ.ⵠᐃⲆⲆᐃ, false);
    document.getElementById("cancel_case_agree").addEventListener("mouseup", this.ΔⲆΔᐃⵠ.ᐃⲆⵠⲆΔ, false);
    document.addEventListener("cancel_sure_delete", function (a) {
      a.preventDefault();
    }, false);
    this.ⵠΔⵠⲆᐃⵠᐃ = {
      ΔᐃΔᐃΔ: ⵠⲆⲆᐃ.get("starve_aliasing") ? ⵠⲆⲆᐃ.get("starve_aliasing") === "0" ? 0 : 1 : _h,
      ΔᐃΔΔΔⲆΔ: function (a) {
        document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
      },
      ᐃⲆⵠⲆΔ: function () {
        if (fx.ⵠΔⵠⲆᐃⵠᐃ.ΔᐃΔᐃΔ === et) {
          ⵠⲆⲆᐃ.set("starve_aliasing", "1");
          fx.ⵠΔⵠⲆᐃⵠᐃ.ΔᐃΔΔΔⲆΔ(1);
          fx.options.ΔᐃΔⲆΔⲆΔ.display = "inline-block";
        } else {
          ⵠⲆⲆᐃ.set("starve_aliasing", "0");
          fx.ⵠΔⵠⲆᐃⵠᐃ.ΔᐃΔΔΔⲆΔ(Qr);
          fx.options.ΔᐃΔⲆΔⲆΔ.display = "none";
        }
        fx.ⵠΔⵠⲆᐃⵠᐃ.ΔᐃΔᐃΔ = (fx.ⵠΔⵠⲆᐃⵠᐃ.ΔᐃΔᐃΔ + 1) % tk;
      }
    };
    if (this.ⵠΔⵠⲆᐃⵠᐃ.ΔᐃΔᐃΔ === 1) {
      this.options.ΔᐃΔⲆΔⲆΔ.display = "inline-block";
    } else {
      this.ⵠΔⵠⲆᐃⵠᐃ.ΔᐃΔΔΔⲆΔ(fg);
      this.options.ΔᐃΔⲆΔⲆΔ.display = "none";
    }
    document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ⵠΔⵠⲆᐃⵠᐃ.ᐃⲆⵠⲆΔ, Lk);
    this.ΔⵠΔΔⵠ = {
      ΔᐃΔᐃΔ: ⵠⲆⲆᐃ.get("starve_info_box") && ⵠⲆⲆᐃ.get("starve_info_box") === "0" ? 0 : 1,
      display: 0,
      x: 0,
      y: Md,
      id: bu,
      Ⲇⵠᐃⵠ: An,
      ᐃⲆⵠⲆΔ: function () {
        if (fx.ΔⵠΔΔⵠ.ΔᐃΔᐃΔ === 0) {
          ⵠⲆⲆᐃ.set("starve_info_box", "1");
          fx.options.ᐃⵠⵠΔΔᐃΔ.display = "inline-block";
        } else {
          ⵠⲆⲆᐃ.set("starve_info_box", "0");
          fx.options.ᐃⵠⵠΔΔᐃΔ.display = "none";
        }
        fx.ΔⵠΔΔⵠ.ΔᐃΔᐃΔ = (fx.ΔⵠΔΔⵠ.ΔᐃΔᐃΔ + 1) % qo;
      },
      ᐃᐃⵠⵠ: function (a, b, c) {
        if (a && this.ΔᐃΔᐃΔ) {
          this.display = 1;
          this.id = c === 0 ? b.id : Us[b.id].ᐃⲆΔᐃ;
          this.x = b.info.translate.x + 80;
          this.y = b.info.translate.y;
          this.Ⲇⵠᐃⵠ = c;
        }
        return a;
      }
    };
    if (this.ΔⵠΔΔⵠ.ΔᐃΔᐃΔ === 1) {
      this.options.ᐃⵠⵠΔΔᐃΔ.display = "inline-block";
    } else {
      this.options.ᐃⵠⵠΔΔᐃΔ.display = "none";
    }
    document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.ΔⵠΔΔⵠ.ᐃⲆⵠⲆΔ, Lk);
    if (ⵠⲆⲆᐃ.get("starve_scale")) {
      Lo = Number(ⵠⲆⲆᐃ.get("starve_scale"));
      document.getElementById("input_ratio").value = Lo;
      Lo *= Sa / _a;
      Fa();
    }
    this.ᐃΔΔΔΔⵠⲆ = function () {
      ⵠⲆⲆᐃ.set("starve_scale", "" + document.getElementById("input_ratio").value);
      Lo = document.getElementById("input_ratio").value * (Sa / _a);
      Fa();
    };
    document.getElementById("input_ratio").addEventListener("input", this.ᐃΔΔΔΔⵠⲆ, false);
    this.ⵠΔⲆΔ = {
      open: ml,
      ΔᐃΔᐃΔ: ⵠⲆⲆᐃ.get("starve_safe") ? ⵠⲆⲆᐃ.get("starve_safe") === "0" ? 0 : bs : sl,
      id: document.getElementById("sure_delete"),
      style: document.getElementById("sure_delete").style,
      ΔⵠⲆΔᐃ: document.getElementById("agree").style,
      button: 0,
      Ⲇᐃ: Fj,
      ⵠᐃⲆⲆᐃ: function () {
        fx.ⵠΔⲆΔ.style.display = "none";
        fx.ⵠΔⲆΔ.open = false;
      },
      all: function () {
        if (!dx.ΔⵠⲆᐃⲆ.wait) {
          if (dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ < fg && dx.Ⲇⵠᐃⵠ.id < 0 && !dx.ᐃⵠⵠΔⲆ.enabled) {
            ᐃΔᐃᐃ.ᐃΔⵠΔⵠⲆⵠᐃΔ(fx.ⵠΔⲆΔ.button);
          }
          fx.ⵠΔⲆΔ.ⵠᐃⲆⲆᐃ();
        }
      },
      ⲆⵠⲆⲆ: function () {
        if (dx.Ⲇⵠᐃⵠ.ⵠΔⲆΔᐃ && !dx.ΔⵠⲆᐃⲆ.wait) {
          if (dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ < 0 && dx.Ⲇⵠᐃⵠ.id < 0 && !dx.ᐃⵠⵠΔⲆ.enabled) {
            ᐃΔᐃᐃ.ᐃⵠΔⲆᐃᐃⲆⲆᐃ(fx.ⵠΔⲆΔ.button);
          }
          fx.ⵠΔⲆΔ.ⵠᐃⲆⲆᐃ();
        }
      },
      ⵠⵠⲆᐃΔⵠᐃΔΔ: function () {
        if (!dx.ΔⵠⲆᐃⲆ.wait) {
          if (dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ < fg && dx.Ⲇⵠᐃⵠ.id < Qr && !dx.ᐃⵠⵠΔⲆ.enabled) {
            ᐃΔᐃᐃ.ΔΔⲆᐃⲆⵠᐃⵠⲆ(fx.ⵠΔⲆΔ.button);
          }
          fx.ⵠΔⲆΔ.ⵠᐃⲆⲆᐃ();
        }
      },
      ᐃⲆⵠⲆΔ: function () {
        if (fx.ⵠΔⲆΔ.ΔᐃΔᐃΔ) {
          ⵠⲆⲆᐃ.set("starve_safe", "0");
          fx.ⵠΔⲆΔ.ΔⵠⲆΔᐃ.display = "inline-block";
          fx.options.ΔⵠⲆΔᐃ.display = "none";
        } else {
          ⵠⲆⲆᐃ.set("starve_safe", "1");
          fx.ⵠΔⲆΔ.ΔⵠⲆΔᐃ.display = "none";
          fx.options.ΔⵠⲆΔᐃ.display = "inline-block";
        }
        fx.ⵠΔⲆΔ.ΔᐃΔᐃΔ = !fx.ⵠΔⲆΔ.ΔᐃΔᐃΔ;
      },
      ⵠⵠΔΔⲆΔⲆ: function (a) {
        this.button = a;
        document.getElementById("item_to_del").src = ᐃΔ[zs[a].ⵠⵠ][0].ᐃⲆΔⵠΔ === Ct ? ᐃΔ[zs[a].ⵠⵠ][bu].src : ᐃΔ[zs[a].ⵠⵠ][0].ᐃⲆΔⵠΔ;
        if (zs[a].ⲆⵠⲆⲆ && !dx.ⵠⵠᐃⲆΔ && dx.Ⲇⵠᐃⵠ.ⵠΔⲆΔᐃ) {
          document.getElementById("recycle_delete").style.display = "inline-block";
        } else {
          document.getElementById("recycle_delete").style.display = "none";
        }
        if (this.ΔᐃΔᐃΔ) {
          this.style.display = "inline-block";
          this.open = true;
        } else {
          this.all();
        }
      },
      ⲆᐃⲆ: function () {
        this.style.left = Math.floor(mq - 235) + "px";
        this.style.top = Math.floor(Qo - 175) + "px";
      }
    };
    this.ⵠΔⲆΔ.ΔⵠⲆΔᐃ.display = "none";
    if (this.ⵠΔⲆΔ.ΔᐃΔᐃΔ) {
      this.options.ΔⵠⲆΔᐃ.display = "inline-block";
    } else {
      this.options.ΔⵠⲆΔᐃ.display = "none";
    }
    document.getElementById("one_delete").addEventListener("mouseup", this.ⵠΔⲆΔ.ⵠⵠⲆᐃΔⵠᐃΔΔ, false);
    document.getElementById("yes_delete").addEventListener("mouseup", this.ⵠΔⲆΔ.all, false);
    document.getElementById("recycle_delete").addEventListener("mouseup", this.ⵠΔⲆΔ.ⲆⵠⲆⲆ, false);
    document.getElementById("no_delete").addEventListener("mouseup", this.ⵠΔⲆΔ.ⵠᐃⲆⲆᐃ, ds);
    document.getElementById("case_agree").addEventListener("mouseup", this.ⵠΔⲆΔ.ᐃⲆⵠⲆΔ, Lk);
    this.ΔⲆΔΔᐃ = {
      open: ia,
      ⲆⲆΔᐃⲆ: -1,
      button: dw(60, 60, 0, ᐃΔ[592]),
      id: document.getElementById("shop_starterkit"),
      style: document.getElementById("shop_starterkit").style,
      ⲆᐃⲆ: function () {
        this.style.left = Math.floor(mq - 300) + "px";
        this.style.top = Math.floor(Qo - 215) + "px";
      },
      ⵠᐃⲆⲆᐃ: function () {
        fx.ΔⲆΔΔᐃ.open = false;
        fx.ΔⲆΔΔᐃ.style.display = "none";
      },
      select: function () {
        fx.ΔⲆΔΔᐃ.open = !fx.ΔⲆΔΔᐃ.open;
        if (fx.ΔⲆΔΔᐃ.open) {
          fx.ΔⲆΔΔᐃ.style.display = "inline-block";
        } else {
          fx.ΔⲆΔΔᐃ.style.display = "none";
        }
      },
      ⲆΔΔⲆⵠⲆᐃ: function () {
        if (fx.ΔⲆΔΔᐃ.ⲆⲆΔᐃⲆ >= 0) {
          ᐃΔᐃᐃ.ᐃⵠⲆΔⵠΔᐃⵠⲆ(fx.ΔⲆΔΔᐃ.ⲆⲆΔᐃⲆ);
          fx.ΔⲆΔΔᐃ.ⵠᐃⲆⲆᐃ();
          if (ga) {
            ga("send", "event", "Game", "kit", "" + fx.ΔⲆΔΔᐃ.ⲆⲆΔᐃⲆ);
          }
        }
      },
      ᐃⲆⲆᐃⵠ: function () {
        var a = dx.ΔⲆΔΔᐃ.value;
        document.getElementById("points_bank").innerHTML = ᐃΔᐃⵠ.ΔⵠⲆⲆⵠⵠᐃ(a) + " points";
        for (var b = yj; b < mw.length; b++) {
          if (mw[b].ⲆⲆΔΔⵠ > a) {
            document.getElementById("starter" + (b + Ga)).style.opacity = "0.4";
          } else {
            document.getElementById("starter" + (b + _)).style.opacity = "1";
          }
        }
        for (b = bd; b < $h; b++) {
          document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + b).innerHTML = "";
        }
        document.getElementById("buy_kit").style.opacity = "0.2";
      },
      ⲆᐃᐃᐃᐃΔⲆⲆⵠ: function () {
        if (this.id.length > 8) {
          var a = Number(this.id.charAt(O) + this.id.charAt($o));
        } else {
          a = Number(this.id.charAt(7));
        }
        var b = mw[a - wh];
        if (dx.ΔⲆΔΔᐃ.value >= b.ⲆⲆΔΔⵠ) {
          fx.ΔⲆΔΔᐃ.ⲆⲆΔᐃⲆ = a;
          document.getElementById("buy_kit").style.opacity = "1";
        } else {
          fx.ΔⲆΔΔᐃ.ⲆⲆΔᐃⲆ = -1;
          document.getElementById("buy_kit").style.opacity = "0.2";
        }
        b = b.items;
        for (var c = Fb, d = 1; c < b.length + bd; c++) {
          if (b[c - Co][1] !== 29) {
            document.getElementById("inv_shop" + d).style.display = "inline-block";
            document.getElementById("inv_shop" + d).src = ᐃΔ[zs[b[c - _][Mg]].ⵠⵠ][Aa].ᐃⲆΔⵠΔ === undefined ? ᐃΔ[zs[b[c - Ls][er]].ⵠⵠ][0].src : ᐃΔ[zs[b[c - 1][1]].ⵠⵠ][0].ᐃⲆΔⵠΔ;
            document.getElementById("amount_shop" + d).innerHTML = "" + b[c - 1][bu];
            d++;
          }
        }
        for (; d < 13; d++) {
          document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + d).innerHTML = "";
        }
      }
    };
    document.getElementById("quit3").addEventListener("mouseup", this.ΔⲆΔΔᐃ.ⵠᐃⲆⲆᐃ, false);
    document.getElementById("buy_kit").addEventListener("mouseup", this.ΔⲆΔΔᐃ.ⲆΔΔⲆⵠⲆᐃ, Jh);
    for (m = Ni; m < hb; m++) {
      document.getElementById("starter" + m).addEventListener("mouseup", this.ΔⲆΔΔᐃ.ⲆᐃᐃᐃᐃΔⲆⲆⵠ, false);
    }
    this.ⵠΔᐃΔ = {
      open: false,
      ΔᐃΔᐃΔ: ⵠⲆⲆᐃ.get("starve_quests") ? ⵠⲆⲆᐃ.get("starve_quests") === "1" ? Ls : An : 0,
      button: dw(60, 60, 0, ᐃΔ[755]),
      id: document.getElementById("chronoquest"),
      style: document.getElementById("chronoquest").style,
      ⲆᐃⲆ: function () {
        this.style.left = Math.floor(mq - 420) + "px";
        this.style.top = Math.floor(Qo - 270) + "px";
      },
      ⵠᐃⲆⲆᐃ: function () {
        fx.ⵠΔᐃΔ.style.display = "none";
        fx.ⵠΔᐃΔ.open = Ge;
      },
      select: function () {
        fx.ⵠΔᐃΔ.open = !fx.ⵠΔᐃΔ.open;
        if (fx.ⵠΔᐃΔ.open) {
          fx.ⵠΔᐃΔ.style.display = "inline-block";
        } else {
          fx.ⵠΔᐃΔ.style.display = "none";
        }
      },
      list: [],
      reset: function () {
        for (var a = 0; a < qw.length; a++) {
          this.list[a] = 1;
          document.getElementById("timeremain_" + a).style.display = "inline-block";
          document.getElementById("time_finished_" + a).style.display = "none";
          document.getElementById("claim_reward_" + a).style.display = "none";
        }
      },
      ⵠⲆⲆΔⲆⲆⲆ: 0,
      ΔΔᐃⲆᐃⵠⵠ: yj,
      ΔᐃⲆⵠᐃⵠⲆⵠⲆ: function () {
        if (fx.ⵠΔᐃΔ.open) {
          var a = new Date().getTime();
          if (a - this.ⵠⲆⲆΔⲆⲆⲆ >= 1000) {
            this.ⵠⲆⲆΔⲆⲆⲆ = a;
            for (var b = Gg; b < qw.length; b++) {
              if (fx.ⵠΔᐃΔ.list[b]) {
                var c = qw[b].time - (a - ff.ᐃⵠⲆⵠⵠ.ᐃⲆⲆᐃⵠ + fx.ⵠΔᐃΔ.ΔΔᐃⲆᐃⵠⵠ);
                document.getElementById("timeremain_" + b).innerHTML = c > 960000 ? Math.floor(c / 480000) + " days" : c > 480000 ? Math.floor(c / 480000) + " day" : c > 60000 ? Math.floor(c / 60000) + " min" : Math.floor(c / 1000) + " sec";
              }
            }
          }
        }
      },
      restore: function (a) {
        for (var b = 0; b < a.length; b++) {
          if (a[b] != 1) {
            fx.ⵠΔᐃΔ.ΔᐃᐃⲆᐃᐃⵠ(b, a[b]);
          }
        }
      },
      ΔᐃᐃⲆᐃᐃⵠ: function (a, b) {
        if (b === 3 && (a === 11 || a === Gu)) {
          dx.ΔᐃⲆⵠ.ⲆⲆⵠⲆΔΔΔ(0, sc);
          fx.ᐃΔΔⵠⲆΔᐃ();
        }
        document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        if (b > 1) {
          document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
          document.getElementById("timeremain_" + a).style.display = "none";
        } else if (b === Md) {
          document.getElementById("time_finished_" + a).innerHTML = "FAILED";
          document.getElementById("timeremain_" + a).style.display = "none";
        }
        document.getElementById("claim_reward_" + a).style.display = b === 2 ? "inline-block" : "none";
        document.getElementById("time_finished_" + a).style.display = "inline";
        fx.ⵠΔᐃΔ.list[a] = Fj;
      },
      modify: function (a, b) {
        fx.ⵠΔᐃΔ.ΔᐃᐃⲆᐃᐃⵠ(a, b);
        if (fx.ⵠΔᐃΔ.ΔᐃΔᐃΔ) {
          fx.ⵠΔᐃΔ.open = Ul;
          fx.ⵠΔᐃΔ.style.display = "inline-block";
        }
      },
      ᐃⲆⵠⲆΔ: function () {
        if (fx.ⵠΔᐃΔ.ΔᐃΔᐃΔ) {
          ⵠⲆⲆᐃ.set("starve_quests", "0");
          fx.options.ⲆⵠᐃΔⲆⲆΔ.display = "none";
        } else {
          ⵠⲆⲆᐃ.set("starve_quests", "1");
          fx.options.ⲆⵠᐃΔⲆⲆΔ.display = "inline-block";
        }
        fx.ⵠΔᐃΔ.ΔᐃΔᐃΔ = !fx.ⵠΔᐃΔ.ΔᐃΔᐃΔ;
      },
      ΔΔⵠΔⲆⲆᐃⵠΔ: function () {
        var a = Number(this.id.charAt(13));
        var b = Number(this.id.charAt(14));
        if (this.id.charAt(14) !== "" && b >= qb && b <= 9) {
          a = a * 10 + b;
        }
        ᐃΔᐃᐃ.ΔⲆⵠⲆᐃΔΔⲆΔ(a);
      }
    };
    if (this.ⵠΔᐃΔ.ΔᐃΔᐃΔ) {
      this.options.ⲆⵠᐃΔⲆⲆΔ.display = "inline-block";
    } else {
      this.options.ⲆⵠᐃΔⲆⲆΔ.display = "none";
    }
    document.getElementById("quit_chronoquest").addEventListener("mouseup", this.ⵠΔᐃΔ.ⵠᐃⲆⲆᐃ, hg);
    for (m = Aa; m < qw.length; m++) {
      document.getElementById("claim_reward_" + m).addEventListener("mouseup", this.ⵠΔᐃΔ.ΔΔⵠΔⲆⲆᐃⵠΔ, ds);
    }
    this.Δᐃᐃᐃ = {
      open: Ge,
      button: dw(60, 60, 0, ᐃΔ[708]),
      list: {
        id: document.getElementById("recipe_craft"),
        style: document.getElementById("recipe_craft").style,
        ΔΔⵠⵠΔⵠⵠ: [],
        ΔᐃΔⲆⲆᐃΔ: 0,
        ⲆᐃⲆ: function () {
          this.style.left = Math.floor(mq - 335) + "px";
          this.style.top = Math.floor(Qo - 215) + "px";
        },
        ⵠᐃⲆⲆᐃ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          fx.Δᐃᐃᐃ.open = Hj;
        },
        ⵠⲆⵠⵠⲆⵠⵠ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          document.getElementById("home_craft").style.display = "inline-block";
        },
        ⵠⲆᐃΔ: function (a) {
          if ((b = this.ΔΔⵠⵠΔⵠⵠ[a]).ⵠᐃᐃ) {
            document.getElementById("watercraft").style.display = "inline-block";
          } else {
            document.getElementById("watercraft").style.display = "none";
          }
          if (b.f) {
            document.getElementById("firecraft").style.display = "inline-block";
          } else {
            document.getElementById("firecraft").style.display = "none";
          }
          if (b.w) {
            document.getElementById("workcraft").style.display = "inline-block";
          } else {
            document.getElementById("workcraft").style.display = "none";
          }
          if (b.e) {
            document.getElementById("wellcraft").style.display = "inline-block";
          } else {
            document.getElementById("wellcraft").style.display = "none";
          }
          for (var b = b.r, c = (a = 0, 1); a < b.length; a++) {
            document.getElementById("inv" + c).style.display = "inline-block";
            document.getElementById("inv" + c).src = ᐃΔ[zs[b[a][0]].ⵠⵠ][Gk].ᐃⲆΔⵠΔ === undefined ? ᐃΔ[zs[b[a][0]].ⵠⵠ][0].src : ᐃΔ[zs[b[a][0]].ⵠⵠ][xq].ᐃⲆΔⵠΔ;
            document.getElementById("numb" + c).innerHTML = "" + b[a][Mg];
            c++;
          }
          for (; c < S; c++) {
            document.getElementById("inv" + c).style.display = "none";
            document.getElementById("numb" + c).innerHTML = "";
          }
        },
        select: function (a) {
          this.ΔᐃΔⲆⲆᐃΔ = a;
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("workcraft").style.display = "none";
          document.getElementById("firecraft").style.display = "none";
          document.getElementById("watercraft").style.display = "none";
          document.getElementById("wellcraft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "inline-block";
          document.getElementById("inv1").style.display = "none";
          document.getElementById("inv2").style.display = "none";
          document.getElementById("inv3").style.display = "none";
          document.getElementById("inv4").style.display = "none";
          document.getElementById("inv5").style.display = "none";
          document.getElementById("numb1").innerHTML = "";
          document.getElementById("numb2").innerHTML = "";
          document.getElementById("numb3").innerHTML = "";
          document.getElementById("numb4").innerHTML = "";
          document.getElementById("numb5").innerHTML = "";
          for (var b = Rl, c = et; b < Us.length; b++) {
            var d = Us[b];
            if (a === d.ⲆⲆΔ) {
              this.ΔΔⵠⵠΔⵠⵠ[c] = d;
              c++;
              document.getElementById("img_" + c).style.display = "inline-block";
              document.getElementById("img_" + c).src = ᐃΔ[zs[d.ᐃⲆΔᐃ].ⵠⵠ][0].ᐃⲆΔⵠΔ === undefined ? ᐃΔ[zs[d.ᐃⲆΔᐃ].ⵠⵠ][0].src : ᐃΔ[zs[d.ᐃⲆΔᐃ].ⵠⵠ][Ih].ᐃⲆΔⵠΔ;
            }
          }
          for (c++; c < 49; c++) {
            document.getElementById("img_" + c).style.display = "none";
          }
        }
      },
      ΔᐃᐃⲆⲆΔⵠ: {
        id: document.getElementById("home_craft"),
        style: document.getElementById("home_craft").style,
        ⲆᐃⲆ: function () {
          this.style.left = Math.floor(mq - 285) + "px";
          this.style.top = Math.floor(Qo - 170) + "px";
        },
        ⵠᐃⲆⲆᐃ: function () {
          document.getElementById("home_craft").style.display = "none";
          fx.Δᐃᐃᐃ.open = tr;
        }
      },
      ⲆᐃΔᐃⲆΔᐃⲆⲆ: function () {
        this.open = !this.open;
        if (this.open) {
          document.getElementById("home_craft").style.display = "inline-block";
        } else {
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "none";
        }
      }
    };
    document.getElementById("quit").addEventListener("mouseup", this.Δᐃᐃᐃ.ΔᐃᐃⲆⲆΔⵠ.ⵠᐃⲆⲆᐃ, false);
    document.getElementById("quitmenu").addEventListener("mouseup", this.Δᐃᐃᐃ.list.ⵠᐃⲆⲆᐃ, false);
    document.getElementById("backhome").addEventListener("mouseup", this.Δᐃᐃᐃ.list.ⵠⲆⵠⵠⲆⵠⵠ, false);
    document.getElementById("hatcategory").addEventListener("mouseup", function () {
      fx.Δᐃᐃᐃ.list.select(xs.ᐃΔᐃᐃⵠ);
    }, ja);
    document.getElementById("weaponcategory").addEventListener("mouseup", function () {
      fx.Δᐃᐃᐃ.list.select(xs.ᐃᐃⵠⲆ);
    }, false);
    document.getElementById("toolcategory").addEventListener("mouseup", function () {
      fx.Δᐃᐃᐃ.list.select(xs.ⵠⲆⵠⲆⵠ);
    }, Wh);
    document.getElementById("foodcategory").addEventListener("mouseup", function () {
      fx.Δᐃᐃᐃ.list.select(xs.ⵠΔΔⵠⵠ);
    }, false);
    document.getElementById("placeablecategory").addEventListener("mouseup", function () {
      fx.Δᐃᐃᐃ.list.select(xs.ⵠⵠΔΔΔ);
    }, Lk);
    document.getElementById("constructioncategory").addEventListener("mouseup", function () {
      fx.Δᐃᐃᐃ.list.select(xs.ⵠΔⲆⲆΔ);
    }, false);
    document.getElementById("img_1").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(0);
    }, false);
    document.getElementById("img_2").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(1);
    }, Zl);
    document.getElementById("img_3").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(2);
    }, false);
    document.getElementById("img_4").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(rb);
    }, false);
    document.getElementById("img_5").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(4);
    }, false);
    document.getElementById("img_6").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(5);
    }, M);
    document.getElementById("img_7").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(6);
    }, false);
    document.getElementById("img_8").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(7);
    }, Tg);
    document.getElementById("img_9").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(8);
    }, gh);
    document.getElementById("img_10").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(Kt);
    }, Hj);
    document.getElementById("img_11").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(Bl);
    }, false);
    document.getElementById("img_12").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(11);
    }, hg);
    document.getElementById("img_13").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(12);
    }, false);
    document.getElementById("img_14").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(13);
    }, Eq);
    document.getElementById("img_15").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(Eh);
    }, Jn);
    document.getElementById("img_16").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(nr);
    }, false);
    document.getElementById("img_17").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(16);
    }, false);
    document.getElementById("img_18").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(17);
    }, false);
    document.getElementById("img_19").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(18);
    }, Bo);
    document.getElementById("img_20").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(19);
    }, false);
    document.getElementById("img_21").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(ek);
    }, false);
    document.getElementById("img_22").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(21);
    }, Wh);
    document.getElementById("img_23").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(22);
    }, false);
    document.getElementById("img_24").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(23);
    }, false);
    document.getElementById("img_25").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(24);
    }, false);
    document.getElementById("img_26").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(25);
    }, false);
    document.getElementById("img_27").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(26);
    }, false);
    document.getElementById("img_28").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(27);
    }, Jn);
    document.getElementById("img_29").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(28);
    }, false);
    document.getElementById("img_30").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(29);
    }, Zl);
    document.getElementById("img_31").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(30);
    }, Ge);
    document.getElementById("img_32").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(31);
    }, Hj);
    document.getElementById("img_33").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(32);
    }, ia);
    document.getElementById("img_34").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(33);
    }, false);
    document.getElementById("img_35").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(34);
    }, Bo);
    document.getElementById("img_36").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(35);
    }, false);
    document.getElementById("img_37").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(36);
    }, false);
    document.getElementById("img_38").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(37);
    }, false);
    document.getElementById("img_39").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(38);
    }, hg);
    document.getElementById("img_40").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(39);
    }, false);
    document.getElementById("img_41").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(40);
    }, false);
    document.getElementById("img_42").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(41);
    }, false);
    document.getElementById("img_43").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(42);
    }, Jh);
    document.getElementById("img_44").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(43);
    }, false);
    document.getElementById("img_45").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(44);
    }, false);
    document.getElementById("img_46").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(45);
    }, false);
    document.getElementById("img_47").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(46);
    }, false);
    document.getElementById("img_48").addEventListener("mousedown", function () {
      fx.Δᐃᐃᐃ.list.ⵠⲆᐃΔ(47);
    }, Wh);
    this.ⵠᐃⲆΔᐃ = {
      translate: {
        y: 0,
        x: Rl
      },
      ᐃⵠᐃⵠⵠ: {
        x: -bs,
        y: -1
      },
      ⲆΔⵠⵠ: [],
      focus: function (a) {
        var b = this.translate.y + (dx.ΔᐃⲆⵠ.ⵠΔΔᐃΔ.length > sb ? -120 : -50);
        if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
          this.ᐃⵠᐃⵠⵠ.x = a.x - this.translate.x;
          this.ᐃⵠᐃⵠⵠ.y = a.y - b;
        }
      }
    };
    this.ΔⲆⲆⵠ = {
      translate: {
        y: 0,
        x: yj
      },
      ⵠⵠ: ᐃΔ[278],
      ⵠⲆ: document.createElement("canvas")
    };
    this.ΔⲆⲆⵠ.ⵠⲆ.width = this.ΔⲆⲆⵠ.ⵠⵠ.width;
    this.ΔⲆⲆⵠ.ⵠⲆ.height = this.ΔⲆⲆⵠ.ⵠⵠ.height;
    this.ΔⲆⲆⵠ.Δ = this.ΔⲆⲆⵠ.ⵠⲆ.getContext("2d");
    this.ᐃⲆᐃΔ = {
      translate: {
        y: yj,
        x: 0
      },
      ⵠⵠ: ᐃΔ[267],
      ⵠⲆⵠΔ: ap,
      y: Md
    };
    this.ᐃⵠⲆⵠᐃⲆⲆ = function () {
      ΔⲆⵠⲆⵠ = document.getElementById("team_box");
      ΔⲆⵠⲆⵠ.innerHTML = "";
      ΔⲆⵠⲆⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ff.ⲆΔⵠⵠ[dx.ⵠⵠⵠⵠΔ[Rl]].ⲆΔᐃᐃⲆ + "</div";
      for (var a = 1; a < dx.ⵠⵠⵠⵠΔ.length; a++) {
        ΔⲆⵠⲆⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ff.ⲆΔⵠⵠ[dx.ⵠⵠⵠⵠΔ[a]].ⲆΔᐃᐃⲆ + "</div></div>";
      }
      ΔⲆⵠⲆⵠ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
      ΔⲆⵠⲆⵠ.style.display = "inline-block";
      document.getElementById("leave").addEventListener("click", ᐃΔᐃᐃ.ᐃⵠⲆⵠᐃⲆⲆ, Hj);
    };
    this.ⵠᐃⲆⲆⲆᐃᐃⵠΔ = function () {
      ΔⲆⵠⲆⵠ = document.getElementById("team_box");
      ΔⲆⵠⲆⵠ.innerHTML = "";
      ΔⲆⵠⲆⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ff.ⲆΔⵠⵠ[dx.ⵠⵠⵠⵠΔ[0]].ⲆΔᐃᐃⲆ + "</div";
      for (var a = 1; a < dx.ⵠⵠⵠⵠΔ.length; a++) {
        ΔⲆⵠⲆⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ff.ⲆΔⵠⵠ[dx.ⵠⵠⵠⵠΔ[a]].ⲆΔᐃᐃⲆ + "</div></div>";
      }
      ΔⲆⵠⲆⵠ.innerHTML += "</div>";
      ΔⲆⵠⲆⵠ.style.display = "inline-block";
    };
    this.ᐃⵠⲆᐃⵠⲆⵠⵠᐃ = function () {
      ΔⲆⵠⲆⵠ = document.getElementById("team_box");
      ΔⲆⵠⲆⵠ.innerHTML = "";
      ΔⲆⵠⲆⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ff.ⲆΔⵠⵠ[dx.ⵠⵠⵠⵠΔ[0]].ⲆΔᐃᐃⲆ + "</div";
      for (var a = 1; dx.ⵠⵠⵠⵠΔ.length > a; a++) {
        ΔⲆⵠⲆⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ff.ⲆΔⵠⵠ[dx.ⵠⵠⵠⵠΔ[a]].ⲆΔᐃᐃⲆ + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
      }
      if (dx.ⲆⲆᐃΔⲆ.lock === 0) {
        ΔⲆⵠⲆⵠ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
      } else {
        ΔⲆⵠⲆⵠ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
      }
      document.getElementById("lock_team").addEventListener("click", ᐃΔᐃᐃ.ⲆⲆᐃᐃⲆΔΔⵠᐃ, false);
      ΔⲆⵠⲆⵠ.style.display = "inline-block";
      for (a = Mg; a < dx.ⵠⵠⵠⵠΔ.length; a++) {
        switch (a) {
          case 1:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ᐃΔᐃᐃ.ᐃΔΔⵠΔⵠᐃ(er);
            }, false);
            break;
          case qi:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ᐃΔᐃᐃ.ᐃΔΔⵠΔⵠᐃ(2);
            }, false);
            break;
          case 3:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ᐃΔᐃᐃ.ᐃΔΔⵠΔⵠᐃ(3);
            }, false);
            break;
          case 4:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ᐃΔᐃᐃ.ᐃΔΔⵠΔⵠᐃ(Oa);
            }, false);
            break;
          case bt:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ᐃΔᐃᐃ.ᐃΔΔⵠΔⵠᐃ(Sj);
            }, false);
            break;
          case nl:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ᐃΔᐃᐃ.ᐃΔΔⵠΔⵠᐃ($q);
            }, false);
            break;
          case 7:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ᐃΔᐃᐃ.ᐃΔΔⵠΔⵠᐃ(7);
            }, false);
            break;
          case Nk:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ᐃΔᐃᐃ.ᐃΔΔⵠΔⵠᐃ(8);
            }, false);
        }
      }
    };
    this.ⵠᐃⲆⵠΔ = [];
    this.ⵠᐃⲆⵠΔ[nw.ⵠⲆᐃᐃΔᐃⵠ] = {
      button: dw(60, 60, 0, ᐃΔ[556]),
      action: this.ᐃⵠⲆⵠᐃⲆⲆ
    };
    this.ⵠᐃⲆⵠΔ[nw.ⵠⲆⵠⲆⲆᐃⵠ] = {
      button: dw(60, 60, 0, ᐃΔ[556]),
      action: ᐃΔᐃᐃ.ΔⲆⵠⵠⲆᐃⲆⲆᐃ
    };
    this.ⵠᐃⲆⵠΔ[nw.ⲆᐃⵠᐃⲆᐃⵠ] = {
      button: dw(60, 60, 0, ᐃΔ[557]),
      action: this.ᐃⵠⲆᐃⵠⲆⵠⵠᐃ
    };
    this.ⵠᐃⲆⵠΔ[nw.ᐃᐃᐃⲆᐃⵠⵠ] = {
      button: dw(60, 60, 0, ᐃΔ[561]),
      action: this.ⵠᐃⲆⲆⲆᐃᐃⵠΔ
    };
    this.ⵠᐃⲆⵠΔ[nw.ᐃᐃᐃⵠⵠΔᐃ] = {
      button: dw(60, 60, 0, ᐃΔ[560]),
      action: function () {}
    };
    this.ΔⵠⲆΔΔ = -ck;
    this.ΔᐃⲆᐃⲆⲆⵠ = dw(60, 60, 0, ᐃΔ[723]);
    this.ⲆⲆΔⵠᐃⲆᐃ = dw(60, 60, 0, ᐃΔ[724]);
    this.ⵠΔᐃᐃΔⲆⲆ = dw(60, 60, 0, ᐃΔ[658]);
    this.ᐃⲆⲆᐃᐃᐃᐃ = dw(60, 60, 0, ᐃΔ[657]);
    this.ⲆΔⲆᐃⲆⵠⵠ = dw(60, 60, 0, ᐃΔ[658]);
    this.ⵠΔⲆⲆⵠⵠⲆ = dw(60, 60, 0, ᐃΔ[316]);
    this.ᐃⲆⲆⲆⵠΔᐃ = dw(60, 60, 0, ᐃΔ[315]);
    this.ΔΔΔᐃΔⲆⵠ = dw(60, 60, 0, ᐃΔ[297]);
    this.ΔⵠΔⵠⵠΔⵠ = dw(60, 60, 0, ᐃΔ[298]);
    this.ᐃⲆⵠᐃᐃᐃΔ = dw(60, 60, 0, ᐃΔ[418]);
    this.ⵠᐃᐃⲆΔΔᐃ = dw(60, 60, 0, ᐃΔ[938]);
    this.ᐃⵠᐃΔΔⲆⲆ = dw(60, 60, 0, ᐃΔ[412]);
    this.ΔᐃᐃⲆⵠΔΔ = dw(60, 60, 0, ᐃΔ[536]);
    this.ᐃⲆⲆᐃⲆᐃΔ = dw(60, 60, 0, ᐃΔ[535]);
    this.ⲆⵠⵠⵠᐃⵠΔ = dw(60, 60, 0, ᐃΔ[538]);
    this.ⵠⲆⵠΔⵠ = dw(120, 120, 0, ᐃΔ[149]);
    this.ⵠⲆⵠΔⵠ.info.translate.x = vq;
    this.ⵠⲆⵠΔⵠ.info.translate.y = hh;
    this.ⵠᐃⵠ = [];
    this.ⵠᐃⵠ[0] = dw(68, 68, 0, ᐃΔ[340], iu);
    this.ⵠᐃⵠ[0].id = 0;
    this.ⵠᐃⵠ[1] = dw(68, 68, 0, ᐃΔ[341], 3);
    this.ⵠᐃⵠ[1].id = 1;
    this.ⵠᐃⵠ[108] = dw(68, 68, 0, ᐃΔ[342], 3);
    this.ⵠᐃⵠ[108].id = 108;
    this.ⵠᐃⵠ[109] = dw(68, 68, 0, ᐃΔ[343], 3);
    this.ⵠᐃⵠ[109].id = 109;
    this.ⵠᐃⵠ[110] = dw(68, 68, 0, ᐃΔ[269], 3);
    this.ⵠᐃⵠ[110].id = 110;
    this.ⵠᐃⵠ[233] = dw(68, 68, 0, ᐃΔ[1155], 3);
    this.ⵠᐃⵠ[233].id = 233;
    this.ⵠᐃⵠ[111] = dw(68, 68, 0, ᐃΔ[270], hd);
    this.ⵠᐃⵠ[111].id = 111;
    this.ⵠᐃⵠ[112] = dw(68, 68, 0, ᐃΔ[271], Ou);
    this.ⵠᐃⵠ[112].id = 112;
    this.ⵠᐃⵠ[3] = dw(68, 68, 0, ᐃΔ[272], Er);
    this.ⵠᐃⵠ[3].id = 3;
    this.ⵠᐃⵠ[4] = dw(68, 68, 0, ᐃΔ[344], Xu);
    this.ⵠᐃⵠ[4].id = 4;
    this.ⵠᐃⵠ[5] = dw(68, 68, 0, ᐃΔ[345], 3);
    this.ⵠᐃⵠ[5].id = 5;
    this.ⵠᐃⵠ[57] = dw(68, 68, 0, ᐃΔ[831], 3);
    this.ⵠᐃⵠ[57].id = 57;
    this.ⵠᐃⵠ[6] = dw(68, 68, 0, ᐃΔ[346], Sg);
    this.ⵠᐃⵠ[6].id = 6;
    this.ⵠᐃⵠ[113] = dw(68, 68, 0, ᐃΔ[273], 3);
    this.ⵠᐃⵠ[113].id = 113;
    this.ⵠᐃⵠ[114] = dw(68, 68, 0, ᐃΔ[358], 3);
    this.ⵠᐃⵠ[114].id = 114;
    this.ⵠᐃⵠ[115] = dw(68, 68, 0, ᐃΔ[348], 3);
    this.ⵠᐃⵠ[115].id = 115;
    this.ⵠᐃⵠ[162] = dw(68, 68, 0, ᐃΔ[349], 3);
    this.ⵠᐃⵠ[162].id = 162;
    this.ⵠᐃⵠ[160] = dw(68, 68, 0, ᐃΔ[350], 3);
    this.ⵠᐃⵠ[160].id = 160;
    this.ⵠᐃⵠ[8] = dw(68, 68, 0, ᐃΔ[274], Cs);
    this.ⵠᐃⵠ[8].id = 8;
    this.ⵠᐃⵠ[117] = dw(68, 68, 0, ᐃΔ[351], 3);
    this.ⵠᐃⵠ[117].id = 117;
    this.ⵠᐃⵠ[116] = dw(68, 68, 0, ᐃΔ[275], 3);
    this.ⵠᐃⵠ[116].id = 116;
    this.ⵠᐃⵠ[118] = dw(68, 68, 0, ᐃΔ[276], 3);
    this.ⵠᐃⵠ[118].id = 118;
    this.ⵠᐃⵠ[195] = dw(68, 68, 0, ᐃΔ[352], 3);
    this.ⵠᐃⵠ[195].id = 195;
    this.ⵠᐃⵠ[161] = dw(68, 68, 0, ᐃΔ[353], 3);
    this.ⵠᐃⵠ[161].id = 161;
    this.ⵠᐃⵠ[163] = dw(68, 68, 0, ᐃΔ[354], 3);
    this.ⵠᐃⵠ[163].id = 163;
    this.ⵠᐃⵠ[164] = dw(68, 68, 0, ᐃΔ[355], Ql);
    this.ⵠᐃⵠ[164].id = 164;
    this.ⵠᐃⵠ[165] = dw(68, 68, 0, ᐃΔ[356], Jd);
    this.ⵠᐃⵠ[165].id = 165;
    this.ⵠᐃⵠ[166] = dw(68, 68, 0, ᐃΔ[357], Sg);
    this.ⵠᐃⵠ[166].id = 166;
    this.ⵠᐃⵠ[167] = dw(68, 68, 0, ᐃΔ[359], 3);
    this.ⵠᐃⵠ[167].id = 167;
    this.ⵠᐃⵠ[168] = dw(68, 68, 0, ᐃΔ[382], Er);
    this.ⵠᐃⵠ[168].id = 168;
    this.ⵠᐃⵠ[169] = dw(68, 68, 0, ᐃΔ[383], 3);
    this.ⵠᐃⵠ[169].id = 169;
    this.ⵠᐃⵠ[170] = dw(68, 68, 0, ᐃΔ[384], Qn);
    this.ⵠᐃⵠ[170].id = 170;
    this.ⵠᐃⵠ[2] = dw(68, 68, 0, ᐃΔ[386], 3);
    this.ⵠᐃⵠ[2].id = 2;
    this.ⵠᐃⵠ[237] = dw(68, 68, 0, ᐃΔ[1163], hd);
    this.ⵠᐃⵠ[237].id = 237;
    this.ⵠᐃⵠ[174] = dw(68, 68, 0, ᐃΔ[394], 3);
    this.ⵠᐃⵠ[174].id = 174;
    this.ⵠᐃⵠ[222] = dw(68, 68, 0, ᐃΔ[1036], 3);
    this.ⵠᐃⵠ[222].id = 222;
    this.ⵠᐃⵠ[231] = dw(68, 68, 0, ᐃΔ[1038], 3);
    this.ⵠᐃⵠ[231].id = 231;
    this.ⵠᐃⵠ[232] = dw(68, 68, 0, ᐃΔ[1040], Ou);
    this.ⵠᐃⵠ[232].id = 232;
    this.ⵠᐃⵠ[234] = dw(68, 68, 0, ᐃΔ[1157], Mh);
    this.ⵠᐃⵠ[234].id = 234;
    this.ⵠᐃⵠ[10] = dw(68, 68, 0, ᐃΔ[387], 3);
    this.ⵠᐃⵠ[10].id = 10;
    this.ⵠᐃⵠ[171] = dw(68, 68, 0, ᐃΔ[388], Qn);
    this.ⵠᐃⵠ[171].id = 171;
    this.ⵠᐃⵠ[172] = dw(68, 68, 0, ᐃΔ[389], 3);
    this.ⵠᐃⵠ[172].id = 172;
    this.ⵠᐃⵠ[173] = dw(68, 68, 0, ᐃΔ[390], 3);
    this.ⵠᐃⵠ[173].id = 173;
    this.ⵠᐃⵠ[11] = dw(68, 68, 0, ᐃΔ[391], iu);
    this.ⵠᐃⵠ[11].id = 11;
    this.ⵠᐃⵠ[12] = dw(68, 68, 0, ᐃΔ[403], Cs);
    this.ⵠᐃⵠ[12].id = 12;
    this.ⵠᐃⵠ[13] = dw(68, 68, 0, ᐃΔ[397], wi);
    this.ⵠᐃⵠ[13].id = 13;
    this.ⵠᐃⵠ[14] = dw(68, 68, 0, ᐃΔ[400], hd);
    this.ⵠᐃⵠ[14].id = 14;
    this.ⵠᐃⵠ[15] = dw(68, 68, 0, ᐃΔ[406], 3);
    this.ⵠᐃⵠ[15].id = 15;
    this.ⵠᐃⵠ[16] = dw(68, 68, 0, ᐃΔ[875], 3);
    this.ⵠᐃⵠ[16].id = 16;
    this.ⵠᐃⵠ[119] = dw(68, 68, 0, ᐃΔ[410], Lq);
    this.ⵠᐃⵠ[119].id = 119;
    this.ⵠᐃⵠ[23] = dw(68, 68, 0, ᐃΔ[422], hd);
    this.ⵠᐃⵠ[23].id = 23;
    this.ⵠᐃⵠ[24] = dw(68, 68, 0, ᐃΔ[425], rb);
    this.ⵠᐃⵠ[24].id = 24;
    this.ⵠᐃⵠ[87] = dw(68, 68, 0, ᐃΔ[1229], Z);
    this.ⵠᐃⵠ[87].id = 87;
    this.ⵠᐃⵠ[88] = dw(68, 68, 0, ᐃΔ[1232], dl);
    this.ⵠᐃⵠ[88].id = 88;
    this.ⵠᐃⵠ[80] = dw(68, 68, 0, ᐃΔ[1139], 3);
    this.ⵠᐃⵠ[80].id = 80;
    this.ⵠᐃⵠ[81] = dw(68, 68, 0, ᐃΔ[1142], 3);
    this.ⵠᐃⵠ[81].id = 81;
    this.ⵠᐃⵠ[101] = dw(68, 68, 0, ᐃΔ[1167], 3);
    this.ⵠᐃⵠ[101].id = 101;
    this.ⵠᐃⵠ[64] = dw(68, 68, 0, ᐃΔ[571], Er);
    this.ⵠᐃⵠ[64].id = 64;
    this.ⵠᐃⵠ[71] = dw(68, 68, 0, ᐃΔ[1240], dl);
    this.ⵠᐃⵠ[71].id = 71;
    this.ⵠᐃⵠ[102] = dw(68, 68, 0, ᐃΔ[1170], 3);
    this.ⵠᐃⵠ[102].id = 102;
    this.ⵠᐃⵠ[65] = dw(68, 68, 0, ᐃΔ[574], 3);
    this.ⵠᐃⵠ[65].id = 65;
    this.ⵠᐃⵠ[72] = dw(68, 68, 0, ᐃΔ[1243], iu);
    this.ⵠᐃⵠ[72].id = 72;
    this.ⵠᐃⵠ[103] = dw(68, 68, 0, ᐃΔ[1173], 3);
    this.ⵠᐃⵠ[103].id = 103;
    this.ⵠᐃⵠ[66] = dw(68, 68, 0, ᐃΔ[577], Mh);
    this.ⵠᐃⵠ[66].id = 66;
    this.ⵠᐃⵠ[73] = dw(68, 68, 0, ᐃΔ[1246], iu);
    this.ⵠᐃⵠ[73].id = 73;
    this.ⵠᐃⵠ[104] = dw(68, 68, 0, ᐃΔ[1176], 3);
    this.ⵠᐃⵠ[104].id = 104;
    this.ⵠᐃⵠ[67] = dw(68, 68, 0, ᐃΔ[580], 3);
    this.ⵠᐃⵠ[67].id = 67;
    this.ⵠᐃⵠ[74] = dw(68, 68, 0, ᐃΔ[1249], 3);
    this.ⵠᐃⵠ[74].id = 74;
    this.ⵠᐃⵠ[105] = dw(68, 68, 0, ᐃΔ[1179], 3);
    this.ⵠᐃⵠ[105].id = 105;
    this.ⵠᐃⵠ[68] = dw(68, 68, 0, ᐃΔ[583], 3);
    this.ⵠᐃⵠ[68].id = 68;
    this.ⵠᐃⵠ[75] = dw(68, 68, 0, ᐃΔ[1252], 3);
    this.ⵠᐃⵠ[75].id = 75;
    this.ⵠᐃⵠ[106] = dw(68, 68, 0, ᐃΔ[1182], 3);
    this.ⵠᐃⵠ[106].id = 106;
    this.ⵠᐃⵠ[69] = dw(68, 68, 0, ᐃΔ[586], wi);
    this.ⵠᐃⵠ[69].id = 69;
    this.ⵠᐃⵠ[76] = dw(68, 68, 0, ᐃΔ[1255], 3);
    this.ⵠᐃⵠ[76].id = 76;
    this.ⵠᐃⵠ[107] = dw(68, 68, 0, ᐃΔ[1185], 3);
    this.ⵠᐃⵠ[107].id = 107;
    this.ⵠᐃⵠ[70] = dw(68, 68, 0, ᐃΔ[589], nk);
    this.ⵠᐃⵠ[70].id = 70;
    this.ⵠᐃⵠ[94] = dw(68, 68, 0, ᐃΔ[1258], Xu);
    this.ⵠᐃⵠ[94].id = 94;
    this.ⵠᐃⵠ[95] = dw(68, 68, 0, ᐃΔ[1261], 3);
    this.ⵠᐃⵠ[95].id = 95;
    this.ⵠᐃⵠ[96] = dw(68, 68, 0, ᐃΔ[1264], Xu);
    this.ⵠᐃⵠ[96].id = 96;
    this.ⵠᐃⵠ[97] = dw(68, 68, 0, ᐃΔ[1267], Mh);
    this.ⵠᐃⵠ[97].id = 97;
    this.ⵠᐃⵠ[98] = dw(68, 68, 0, ᐃΔ[1270], 3);
    this.ⵠᐃⵠ[98].id = 98;
    this.ⵠᐃⵠ[99] = dw(68, 68, 0, ᐃΔ[1273], hd);
    this.ⵠᐃⵠ[99].id = 99;
    this.ⵠᐃⵠ[58] = dw(68, 68, 0, ᐃΔ[828], 3);
    this.ⵠᐃⵠ[58].id = 58;
    this.ⵠᐃⵠ[25] = dw(68, 68, 0, ᐃΔ[431], nk);
    this.ⵠᐃⵠ[25].id = 25;
    this.ⵠᐃⵠ[26] = dw(68, 68, 0, ᐃΔ[434], Rn);
    this.ⵠᐃⵠ[26].id = 26;
    this.ⵠᐃⵠ[27] = dw(68, 68, 0, ᐃΔ[437], Z);
    this.ⵠᐃⵠ[27].id = 27;
    this.ⵠᐃⵠ[28] = dw(68, 68, 0, ᐃΔ[440], 3);
    this.ⵠᐃⵠ[28].id = 28;
    this.ⵠᐃⵠ[120] = dw(68, 68, 0, ᐃΔ[443], 3);
    this.ⵠᐃⵠ[120].id = 120;
    this.ⵠᐃⵠ[29] = dw(68, 68, 0, ᐃΔ[385], 3);
    this.ⵠᐃⵠ[29].id = 29;
    this.ⵠᐃⵠ[121] = dw(68, 68, 0, ᐃΔ[446], Hn);
    this.ⵠᐃⵠ[121].id = 121;
    this.ⵠᐃⵠ[30] = dw(68, 68, 0, ᐃΔ[457], 3);
    this.ⵠᐃⵠ[30].id = 30;
    this.ⵠᐃⵠ[9] = dw(68, 68, 0, ᐃΔ[862], 3);
    this.ⵠᐃⵠ[9].id = 9;
    this.ⵠᐃⵠ[31] = dw(68, 68, 0, ᐃΔ[459], 3);
    this.ⵠᐃⵠ[31].id = 31;
    this.ⵠᐃⵠ[32] = dw(68, 68, 0, ᐃΔ[1018], 3);
    this.ⵠᐃⵠ[32].id = 32;
    this.ⵠᐃⵠ[33] = dw(68, 68, 0, ᐃΔ[474], 3);
    this.ⵠᐃⵠ[33].id = 33;
    this.ⵠᐃⵠ[35] = dw(68, 68, 0, ᐃΔ[479], 3);
    this.ⵠᐃⵠ[35].id = 35;
    this.ⵠᐃⵠ[36] = dw(68, 68, 0, ᐃΔ[482], 3);
    this.ⵠᐃⵠ[36].id = 36;
    this.ⵠᐃⵠ[37] = dw(68, 68, 0, ᐃΔ[485], Rn);
    this.ⵠᐃⵠ[37].id = 37;
    this.ⵠᐃⵠ[38] = dw(68, 68, 0, ᐃΔ[488], Mh);
    this.ⵠᐃⵠ[38].id = 38;
    this.ⵠᐃⵠ[39] = dw(68, 68, 0, ᐃΔ[491], dl);
    this.ⵠᐃⵠ[39].id = 39;
    this.ⵠᐃⵠ[122] = dw(68, 68, 0, ᐃΔ[494], 3);
    this.ⵠᐃⵠ[122].id = 122;
    this.ⵠᐃⵠ[123] = dw(68, 68, 0, ᐃΔ[497], 3);
    this.ⵠᐃⵠ[123].id = 123;
    this.ⵠᐃⵠ[124] = dw(68, 68, 0, ᐃΔ[501], 3);
    this.ⵠᐃⵠ[124].id = 124;
    this.ⵠᐃⵠ[40] = dw(68, 68, 0, ᐃΔ[504], nk);
    this.ⵠᐃⵠ[40].id = 40;
    this.ⵠᐃⵠ[146] = dw(68, 68, 0, ᐃΔ[506], Z);
    this.ⵠᐃⵠ[146].id = 146;
    this.ⵠᐃⵠ[240] = dw(68, 68, 0, ᐃΔ[1234], 3);
    this.ⵠᐃⵠ[240].id = 240;
    this.ⵠᐃⵠ[147] = dw(68, 68, 0, ᐃΔ[514], 3);
    this.ⵠᐃⵠ[147].id = 147;
    this.ⵠᐃⵠ[148] = dw(68, 68, 0, ᐃΔ[520], 3);
    this.ⵠᐃⵠ[148].id = 148;
    this.ⵠᐃⵠ[149] = dw(68, 68, 0, ᐃΔ[522], Lq);
    this.ⵠᐃⵠ[149].id = 149;
    this.ⵠᐃⵠ[150] = dw(68, 68, 0, ᐃΔ[524], 3);
    this.ⵠᐃⵠ[150].id = 150;
    this.ⵠᐃⵠ[151] = dw(68, 68, 0, ᐃΔ[531], Mh);
    this.ⵠᐃⵠ[151].id = 151;
    this.ⵠᐃⵠ[158] = dw(68, 68, 0, ᐃΔ[534], 3);
    this.ⵠᐃⵠ[158].id = 158;
    this.ⵠᐃⵠ[159] = dw(68, 68, 0, ᐃΔ[554], Xu);
    this.ⵠᐃⵠ[159].id = 159;
    this.ⵠᐃⵠ[43] = dw(68, 68, 0, ᐃΔ[543], 3);
    this.ⵠᐃⵠ[43].id = 43;
    this.ⵠᐃⵠ[45] = dw(68, 68, 0, ᐃΔ[552], Lq);
    this.ⵠᐃⵠ[45].id = 45;
    this.ⵠᐃⵠ[125] = dw(68, 68, 0, ᐃΔ[606], Z);
    this.ⵠᐃⵠ[125].id = 125;
    this.ⵠᐃⵠ[221] = dw(68, 68, 0, ᐃΔ[1237], 3);
    this.ⵠᐃⵠ[221].id = 221;
    this.ⵠᐃⵠ[223] = dw(68, 68, 0, ᐃΔ[1029], 3);
    this.ⵠᐃⵠ[223].id = 223;
    this.ⵠᐃⵠ[224] = dw(68, 68, 0, ᐃΔ[1032], Ft);
    this.ⵠᐃⵠ[224].id = 224;
    this.ⵠᐃⵠ[230] = dw(68, 68, 0, ᐃΔ[1118], 3);
    this.ⵠᐃⵠ[230].id = 230;
    this.ⵠᐃⵠ[89] = dw(68, 68, 0, ᐃΔ[1047], Z);
    this.ⵠᐃⵠ[89].id = 89;
    this.ⵠᐃⵠ[225] = dw(68, 68, 0, ᐃΔ[1050], Lq);
    this.ⵠᐃⵠ[225].id = 225;
    this.ⵠᐃⵠ[227] = dw(68, 68, 0, ᐃΔ[1081], 3);
    this.ⵠᐃⵠ[227].id = 227;
    this.ⵠᐃⵠ[239] = dw(68, 68, 0, ᐃΔ[1225], Sg);
    this.ⵠᐃⵠ[239].id = 239;
    this.ⵠᐃⵠ[228] = dw(68, 68, 0, ᐃΔ[1096], 3);
    this.ⵠᐃⵠ[228].id = 228;
    this.ⵠᐃⵠ[229] = dw(68, 68, 0, ᐃΔ[1111], Rn);
    this.ⵠᐃⵠ[229].id = 229;
    this.ⵠᐃⵠ[226] = dw(68, 68, 0, ᐃΔ[1190], 3);
    this.ⵠᐃⵠ[226].id = 226;
    this.ⵠᐃⵠ[126] = dw(68, 68, 0, ᐃΔ[610], 3);
    this.ⵠᐃⵠ[126].id = 126;
    this.ⵠᐃⵠ[127] = dw(68, 68, 0, ᐃΔ[615], Mh);
    this.ⵠᐃⵠ[127].id = 127;
    this.ⵠᐃⵠ[128] = dw(68, 68, 0, ᐃΔ[614], Z);
    this.ⵠᐃⵠ[128].id = 128;
    this.ⵠᐃⵠ[46] = dw(68, 68, 0, ᐃΔ[617], Ql);
    this.ⵠᐃⵠ[46].id = 46;
    this.ⵠᐃⵠ[50] = dw(68, 68, 0, ᐃΔ[701], 3);
    this.ⵠᐃⵠ[50].id = 50;
    this.ⵠᐃⵠ[51] = dw(68, 68, 0, ᐃΔ[703], Rn);
    this.ⵠᐃⵠ[51].id = 51;
    this.ⵠᐃⵠ[52] = dw(68, 68, 0, ᐃΔ[707], 3);
    this.ⵠᐃⵠ[52].id = 52;
    this.ⵠᐃⵠ[55] = dw(68, 68, 0, ᐃΔ[710], Hn);
    this.ⵠᐃⵠ[55].id = 55;
    this.ⵠᐃⵠ[129] = dw(68, 68, 0, ᐃΔ[625], 3);
    this.ⵠᐃⵠ[129].id = 129;
    this.ⵠᐃⵠ[130] = dw(68, 68, 0, ᐃΔ[628], 3);
    this.ⵠᐃⵠ[130].id = 130;
    this.ⵠᐃⵠ[131] = dw(68, 68, 0, ᐃΔ[630], 3);
    this.ⵠᐃⵠ[131].id = 131;
    this.ⵠᐃⵠ[132] = dw(68, 68, 0, ᐃΔ[633], Qn);
    this.ⵠᐃⵠ[132].id = 132;
    this.ⵠᐃⵠ[133] = dw(68, 68, 0, ᐃΔ[636], 3);
    this.ⵠᐃⵠ[133].id = 133;
    this.ⵠᐃⵠ[134] = dw(68, 68, 0, ᐃΔ[640], 3);
    this.ⵠᐃⵠ[134].id = 134;
    this.ⵠᐃⵠ[135] = dw(68, 68, 0, ᐃΔ[645], Rn);
    this.ⵠᐃⵠ[135].id = 135;
    this.ⵠᐃⵠ[47] = dw(68, 68, 0, ᐃΔ[648], Jd);
    this.ⵠᐃⵠ[47].id = 47;
    this.ⵠᐃⵠ[48] = dw(68, 68, 0, ᐃΔ[651], Ou);
    this.ⵠᐃⵠ[48].id = 48;
    this.ⵠᐃⵠ[49] = dw(68, 68, 0, ᐃΔ[653], 3);
    this.ⵠᐃⵠ[49].id = 49;
    this.ⵠᐃⵠ[136] = dw(68, 68, 0, ᐃΔ[661], Ou);
    this.ⵠᐃⵠ[136].id = 136;
    this.ⵠᐃⵠ[143] = dw(68, 68, 0, ᐃΔ[689], Ql);
    this.ⵠᐃⵠ[143].id = 143;
    this.ⵠᐃⵠ[137] = dw(68, 68, 0, ᐃΔ[663], dl);
    this.ⵠᐃⵠ[137].id = 137;
    this.ⵠᐃⵠ[138] = dw(68, 68, 0, ᐃΔ[665], 3);
    this.ⵠᐃⵠ[138].id = 138;
    this.ⵠᐃⵠ[139] = dw(68, 68, 0, ᐃΔ[675], Mh);
    this.ⵠᐃⵠ[139].id = 139;
    this.ⵠᐃⵠ[140] = dw(68, 68, 0, ᐃΔ[682], 3);
    this.ⵠᐃⵠ[140].id = 140;
    this.ⵠᐃⵠ[141] = dw(68, 68, 0, ᐃΔ[683], iu);
    this.ⵠᐃⵠ[141].id = 141;
    this.ⵠᐃⵠ[142] = dw(68, 68, 0, ᐃΔ[686], 3);
    this.ⵠᐃⵠ[142].id = 142;
    this.ⵠᐃⵠ[144] = dw(68, 68, 0, ᐃΔ[719], Lq);
    this.ⵠᐃⵠ[144].id = 144;
    this.ⵠᐃⵠ[145] = dw(68, 68, 0, ᐃΔ[731], Lq);
    this.ⵠᐃⵠ[145].id = 145;
    this.ⵠᐃⵠ[59] = dw(68, 68, 0, ᐃΔ[733], 3);
    this.ⵠᐃⵠ[59].id = 59;
    this.ⵠᐃⵠ[62] = dw(68, 68, 0, ᐃΔ[565], 3);
    this.ⵠᐃⵠ[62].id = 62;
    this.ⵠᐃⵠ[185] = dw(68, 68, 0, ᐃΔ[590], Sg);
    this.ⵠᐃⵠ[185].id = 185;
    this.ⵠᐃⵠ[184] = dw(68, 68, 0, ᐃΔ[752], 3);
    this.ⵠᐃⵠ[184].id = 184;
    this.ⵠᐃⵠ[187] = dw(68, 68, 0, ᐃΔ[591], Mh);
    this.ⵠᐃⵠ[187].id = 187;
    this.ⵠᐃⵠ[186] = dw(68, 68, 0, ᐃΔ[754], nk);
    this.ⵠᐃⵠ[186].id = 186;
    this.ⵠᐃⵠ[77] = dw(68, 68, 0, ᐃΔ[757], 3);
    this.ⵠᐃⵠ[77].id = 77;
    this.ⵠᐃⵠ[175] = dw(68, 68, 0, ᐃΔ[759], dl);
    this.ⵠᐃⵠ[175].id = 175;
    this.ⵠᐃⵠ[176] = dw(68, 68, 0, ᐃΔ[763], Cs);
    this.ⵠᐃⵠ[176].id = 176;
    this.ⵠᐃⵠ[78] = dw(68, 68, 0, ᐃΔ[761], wi);
    this.ⵠᐃⵠ[78].id = 78;
    this.ⵠᐃⵠ[177] = dw(68, 68, 0, ᐃΔ[766], 3);
    this.ⵠᐃⵠ[177].id = 177;
    this.ⵠᐃⵠ[79] = dw(68, 68, 0, ᐃΔ[765], 3);
    this.ⵠᐃⵠ[79].id = 79;
    this.ⵠᐃⵠ[83] = dw(68, 68, 0, ᐃΔ[769], 3);
    this.ⵠᐃⵠ[83].id = 83;
    this.ⵠᐃⵠ[84] = dw(68, 68, 0, ᐃΔ[773], 3);
    this.ⵠᐃⵠ[84].id = 84;
    this.ⵠᐃⵠ[178] = dw(68, 68, 0, ᐃΔ[774], 3);
    this.ⵠᐃⵠ[178].id = 178;
    this.ⵠᐃⵠ[179] = dw(68, 68, 0, ᐃΔ[775], 3);
    this.ⵠᐃⵠ[179].id = 179;
    this.ⵠᐃⵠ[86] = dw(68, 68, 0, ᐃΔ[778], Hn);
    this.ⵠᐃⵠ[86].id = 86;
    this.ⵠᐃⵠ[85] = dw(68, 68, 0, ᐃΔ[781], wi);
    this.ⵠᐃⵠ[85].id = 85;
    this.ⵠᐃⵠ[180] = dw(68, 68, 0, ᐃΔ[786], Cs);
    this.ⵠᐃⵠ[180].id = 180;
    this.ⵠᐃⵠ[181] = dw(68, 68, 0, ᐃΔ[787], Cs);
    this.ⵠᐃⵠ[181].id = 181;
    this.ⵠᐃⵠ[182] = dw(68, 68, 0, ᐃΔ[790], wi);
    this.ⵠᐃⵠ[182].id = 182;
    this.ⵠᐃⵠ[183] = dw(68, 68, 0, ᐃΔ[801], 3);
    this.ⵠᐃⵠ[183].id = 183;
    this.ⵠᐃⵠ[188] = dw(68, 68, 0, ᐃΔ[810], 3);
    this.ⵠᐃⵠ[188].id = 188;
    this.ⵠᐃⵠ[189] = dw(68, 68, 0, ᐃΔ[815], Rn);
    this.ⵠᐃⵠ[189].id = 189;
    this.ⵠᐃⵠ[190] = dw(68, 68, 0, ᐃΔ[844], Sg);
    this.ⵠᐃⵠ[190].id = 190;
    this.ⵠᐃⵠ[191] = dw(68, 68, 0, ᐃΔ[836], 3);
    this.ⵠᐃⵠ[191].id = 191;
    this.ⵠᐃⵠ[192] = dw(68, 68, 0, ᐃΔ[841], Mh);
    this.ⵠᐃⵠ[192].id = 192;
    this.ⵠᐃⵠ[193] = dw(68, 68, 0, ᐃΔ[847], Mh);
    this.ⵠᐃⵠ[193].id = 193;
    this.ⵠᐃⵠ[194] = dw(68, 68, 0, ᐃΔ[851], 3);
    this.ⵠᐃⵠ[194].id = 194;
    this.ⵠᐃⵠ[206] = dw(68, 68, 0, ᐃΔ[961], dl);
    this.ⵠᐃⵠ[206].id = 206;
    this.ⵠᐃⵠ[207] = dw(68, 68, 0, ᐃΔ[974], 3);
    this.ⵠᐃⵠ[207].id = 207;
    this.ⵠᐃⵠ[204] = dw(68, 68, 0, ᐃΔ[951], 3);
    this.ⵠᐃⵠ[204].id = 204;
    this.ⵠᐃⵠ[205] = dw(68, 68, 0, ᐃΔ[956], Ql);
    this.ⵠᐃⵠ[205].id = 205;
    this.ⵠᐃⵠ[208] = dw(68, 68, 0, ᐃΔ[968], 3);
    this.ⵠᐃⵠ[208].id = 208;
    this.ⵠᐃⵠ[209] = dw(68, 68, 0, ᐃΔ[973], 3);
    this.ⵠᐃⵠ[209].id = 209;
    this.ⵠᐃⵠ[210] = dw(68, 68, 0, ᐃΔ[983], rb);
    this.ⵠᐃⵠ[210].id = 210;
    this.ⵠᐃⵠ[211] = dw(68, 68, 0, ᐃΔ[988], 3);
    this.ⵠᐃⵠ[211].id = 211;
    this.ⵠᐃⵠ[41] = dw(68, 68, 0, ᐃΔ[881], 3);
    this.ⵠᐃⵠ[41].id = 41;
    this.ⵠᐃⵠ[42] = dw(68, 68, 0, ᐃΔ[883], Jd);
    this.ⵠᐃⵠ[42].id = 42;
    this.ⵠᐃⵠ[12] = dw(68, 68, 0, ᐃΔ[403], rb);
    this.ⵠᐃⵠ[12].id = 12;
    this.ⵠᐃⵠ[16] = dw(68, 68, 0, ᐃΔ[875], 3);
    this.ⵠᐃⵠ[16].id = 16;
    this.ⵠᐃⵠ[196] = dw(68, 68, 0, ᐃΔ[898], Er);
    this.ⵠᐃⵠ[196].id = 196;
    this.ⵠᐃⵠ[18] = dw(68, 68, 0, ᐃΔ[899], 3);
    this.ⵠᐃⵠ[18].id = 18;
    this.ⵠᐃⵠ[197] = dw(68, 68, 0, ᐃΔ[906], Cs);
    this.ⵠᐃⵠ[197].id = 197;
    this.ⵠᐃⵠ[198] = dw(68, 68, 0, ᐃΔ[908], Rn);
    this.ⵠᐃⵠ[198].id = 198;
    this.ⵠᐃⵠ[61] = dw(68, 68, 0, ᐃΔ[911], Mh);
    this.ⵠᐃⵠ[61].id = 61;
    this.ⵠᐃⵠ[201] = dw(68, 68, 0, ᐃΔ[871], Er);
    this.ⵠᐃⵠ[201].id = 201;
    this.ⵠᐃⵠ[199] = dw(68, 68, 0, ᐃΔ[863], 3);
    this.ⵠᐃⵠ[199].id = 199;
    this.ⵠᐃⵠ[200] = dw(68, 68, 0, ᐃΔ[868], 3);
    this.ⵠᐃⵠ[200].id = 200;
    this.ⲆⲆⵠⵠⵠ = [];
    for (m = 0; m < 250; m++) {
      this.ⲆⲆⵠⵠⵠ[m] = dw(0, qu, 0, ᐃΔ[366]);
    }
    this.ⲆⵠⲆ = [];
    this.ⲆⵠⲆ[0] = dw(60, 60, 0, ᐃΔ[261], 3);
    this.ⲆⵠⲆ[0].id = 0;
    this.ⲆⵠⲆ[1] = dw(60, 60, 0, ᐃΔ[312], 3);
    this.ⲆⵠⲆ[1].id = 1;
    this.ⲆⵠⲆ[108] = dw(60, 60, 0, ᐃΔ[315], Z);
    this.ⲆⵠⲆ[108].id = 108;
    this.ⲆⵠⲆ[108].info.ⵠⵠ[2] = this.ⲆⵠⲆ[108].info.ⵠⵠ[fg];
    this.ⲆⵠⲆ[109] = dw(60, 60, 0, ᐃΔ[316], Qn);
    this.ⲆⵠⲆ[109].id = 109;
    this.ⲆⵠⲆ[109].info.ⵠⵠ[2] = this.ⲆⵠⲆ[109].info.ⵠⵠ[Fj];
    this.ⲆⵠⲆ[110] = dw(60, 60, 0, ᐃΔ[277], Mh);
    this.ⲆⵠⲆ[110].id = 110;
    this.ⲆⵠⲆ[233] = dw(60, 60, 0, ᐃΔ[1154], 3);
    this.ⲆⵠⲆ[233].id = 233;
    this.ⲆⵠⲆ[111] = dw(60, 60, 0, ᐃΔ[297], 3);
    this.ⲆⵠⲆ[111].id = 111;
    this.ⲆⵠⲆ[111].info.ⵠⵠ[fh] = this.ⲆⵠⲆ[111].info.ⵠⵠ[Md];
    this.ⲆⵠⲆ[112] = dw(60, 60, 0, ᐃΔ[298], 3);
    this.ⲆⵠⲆ[112].id = 112;
    this.ⲆⵠⲆ[112].info.ⵠⵠ[jg] = this.ⲆⵠⲆ[112].info.ⵠⵠ[Ih];
    this.ⲆⵠⲆ[3] = dw(60, 60, 0, ᐃΔ[258], 3);
    this.ⲆⵠⲆ[3].id = 3;
    this.ⲆⵠⲆ[4] = dw(60, 60, 0, ᐃΔ[296], 3);
    this.ⲆⵠⲆ[4].id = 4;
    this.ⲆⵠⲆ[5] = dw(60, 60, 0, ᐃΔ[292], Ou);
    this.ⲆⵠⲆ[5].id = 5;
    this.ⲆⵠⲆ[57] = dw(60, 60, 0, ᐃΔ[829], Xu);
    this.ⲆⵠⲆ[57].id = 57;
    this.ⲆⵠⲆ[6] = dw(60, 60, 0, ᐃΔ[293], 3);
    this.ⲆⵠⲆ[6].id = 6;
    this.ⲆⵠⲆ[113] = dw(60, 60, 0, ᐃΔ[309], Ou);
    this.ⲆⵠⲆ[113].id = 113;
    this.ⲆⵠⲆ[114] = dw(60, 60, 0, ᐃΔ[310], 3);
    this.ⲆⵠⲆ[114].id = 114;
    this.ⲆⵠⲆ[115] = dw(60, 60, 0, ᐃΔ[311], 3);
    this.ⲆⵠⲆ[115].id = 115;
    this.ⲆⵠⲆ[162] = dw(60, 60, 0, ᐃΔ[317], 3);
    this.ⲆⵠⲆ[162].id = 162;
    this.ⲆⵠⲆ[160] = dw(60, 60, 0, ᐃΔ[319], 3);
    this.ⲆⵠⲆ[160].id = 160;
    this.ⲆⵠⲆ[8] = dw(60, 60, 0, ᐃΔ[313], 3);
    this.ⲆⵠⲆ[8].id = 8;
    this.ⲆⵠⲆ[117] = dw(60, 60, 0, ᐃΔ[323], 3);
    this.ⲆⵠⲆ[117].id = 117;
    this.ⲆⵠⲆ[116] = dw(60, 60, 0, ᐃΔ[300], Z);
    this.ⲆⵠⲆ[116].id = 116;
    this.ⲆⵠⲆ[118] = dw(60, 60, 0, ᐃΔ[328], 3);
    this.ⲆⵠⲆ[118].id = 118;
    this.ⲆⵠⲆ[195] = dw(60, 60, 0, ᐃΔ[303], 3);
    this.ⲆⵠⲆ[195].id = 195;
    this.ⲆⵠⲆ[161] = dw(60, 60, 0, ᐃΔ[305], 3);
    this.ⲆⵠⲆ[161].id = 161;
    this.ⲆⵠⲆ[161].info.ⵠⵠ[br] = this.ⲆⵠⲆ[161].info.ⵠⵠ[0];
    this.ⲆⵠⲆ[163] = dw(60, 60, 0, ᐃΔ[329], Lq);
    this.ⲆⵠⲆ[163].id = 163;
    this.ⲆⵠⲆ[164] = dw(60, 60, 0, ᐃΔ[330], 3);
    this.ⲆⵠⲆ[164].id = 164;
    this.ⲆⵠⲆ[165] = dw(60, 60, 0, ᐃΔ[331], Cs);
    this.ⲆⵠⲆ[165].id = 165;
    this.ⲆⵠⲆ[166] = dw(60, 60, 0, ᐃΔ[335], iu);
    this.ⲆⵠⲆ[166].id = 166;
    this.ⲆⵠⲆ[167] = dw(60, 60, 0, ᐃΔ[337], Jd);
    this.ⲆⵠⲆ[167].id = 167;
    this.ⲆⵠⲆ[168] = dw(60, 60, 0, ᐃΔ[361], 3);
    this.ⲆⵠⲆ[168].id = 168;
    this.ⲆⵠⲆ[169] = dw(60, 60, 0, ᐃΔ[362], 3);
    this.ⲆⵠⲆ[169].id = 169;
    this.ⲆⵠⲆ[170] = dw(60, 60, 0, ᐃΔ[364], Cs);
    this.ⲆⵠⲆ[170].id = 170;
    this.ⲆⵠⲆ[29] = dw(60, 60, 0, ᐃΔ[392], 3);
    this.ⲆⵠⲆ[29].id = 29;
    this.ⲆⵠⲆ[10] = dw(60, 60, 0, ᐃΔ[369], 3);
    this.ⲆⵠⲆ[10].id = 10;
    this.ⲆⵠⲆ[171] = dw(60, 60, 0, ᐃΔ[372], 3);
    this.ⲆⵠⲆ[171].id = 171;
    this.ⲆⵠⲆ[172] = dw(60, 60, 0, ᐃΔ[375], Er);
    this.ⲆⵠⲆ[172].id = 172;
    this.ⲆⵠⲆ[173] = dw(60, 60, 0, ᐃΔ[378], 3);
    this.ⲆⵠⲆ[173].id = 173;
    this.ⲆⵠⲆ[2] = dw(60, 60, 0, ᐃΔ[368], 3);
    this.ⲆⵠⲆ[2].id = 2;
    this.ⲆⵠⲆ[2].info.ⵠⵠ[2] = this.ⲆⵠⲆ[2].info.ⵠⵠ[0];
    this.ⲆⵠⲆ[237] = dw(60, 60, 0, ᐃΔ[1162], 3);
    this.ⲆⵠⲆ[237].id = 237;
    this.ⲆⵠⲆ[237].info.ⵠⵠ[il] = this.ⲆⵠⲆ[237].info.ⵠⵠ[0];
    this.ⲆⵠⲆ[174] = dw(60, 60, 0, ᐃΔ[393], Mh);
    this.ⲆⵠⲆ[174].id = 174;
    this.ⲆⵠⲆ[174].info.ⵠⵠ[Nr] = this.ⲆⵠⲆ[174].info.ⵠⵠ[Ih];
    this.ⲆⵠⲆ[222] = dw(60, 60, 0, ᐃΔ[1035], Hn);
    this.ⲆⵠⲆ[222].id = 222;
    this.ⲆⵠⲆ[231] = dw(60, 60, 0, ᐃΔ[1037], 3);
    this.ⲆⵠⲆ[231].id = 231;
    this.ⲆⵠⲆ[232] = dw(60, 60, 0, ᐃΔ[1039], Ou);
    this.ⲆⵠⲆ[232].id = 232;
    this.ⲆⵠⲆ[234] = dw(60, 60, 0, ᐃΔ[1156], hd);
    this.ⲆⵠⲆ[234].id = 234;
    this.ⲆⵠⲆ[10] = dw(60, 60, 0, ᐃΔ[369], 3);
    this.ⲆⵠⲆ[10].id = 10;
    this.ⲆⵠⲆ[11] = dw(60, 60, 0, ᐃΔ[381], Rn);
    this.ⲆⵠⲆ[11].id = 11;
    this.ⲆⵠⲆ[12] = dw(60, 60, 0, ᐃΔ[401], 3);
    this.ⲆⵠⲆ[12].id = 12;
    this.ⲆⵠⲆ[13] = dw(60, 60, 0, ᐃΔ[395], Xu);
    this.ⲆⵠⲆ[13].id = 13;
    this.ⲆⵠⲆ[14] = dw(60, 60, 0, ᐃΔ[398], 3);
    this.ⲆⵠⲆ[14].id = 14;
    this.ⲆⵠⲆ[15] = dw(60, 60, 0, ᐃΔ[404], 3);
    this.ⲆⵠⲆ[15].id = 15;
    this.ⲆⵠⲆ[16] = dw(60, 60, 0, ᐃΔ[874], iu);
    this.ⲆⵠⲆ[16].id = 16;
    this.ⲆⵠⲆ[119] = dw(60, 60, 0, ᐃΔ[408], Sg);
    this.ⲆⵠⲆ[119].id = 119;
    this.ⲆⵠⲆ[23] = dw(60, 60, 0, ᐃΔ[420], 3);
    this.ⲆⵠⲆ[23].id = 23;
    this.ⲆⵠⲆ[24] = dw(60, 60, 0, ᐃΔ[423], 3);
    this.ⲆⵠⲆ[24].id = 24;
    this.ⲆⵠⲆ[87] = dw(60, 60, 0, ᐃΔ[1227], 3);
    this.ⲆⵠⲆ[87].id = 87;
    this.ⲆⵠⲆ[88] = dw(60, 60, 0, ᐃΔ[1230], 3);
    this.ⲆⵠⲆ[88].id = 88;
    this.ⲆⵠⲆ[80] = dw(60, 60, 0, ᐃΔ[1137], nk);
    this.ⲆⵠⲆ[80].id = 80;
    this.ⲆⵠⲆ[81] = dw(60, 60, 0, ᐃΔ[1140], Er);
    this.ⲆⵠⲆ[81].id = 81;
    this.ⲆⵠⲆ[64] = dw(60, 60, 0, ᐃΔ[569], hd);
    this.ⲆⵠⲆ[64].id = 64;
    this.ⲆⵠⲆ[101] = dw(60, 60, 0, ᐃΔ[1166], 3);
    this.ⲆⵠⲆ[101].id = 101;
    this.ⲆⵠⲆ[71] = dw(60, 60, 0, ᐃΔ[1239], 3);
    this.ⲆⵠⲆ[71].id = 71;
    this.ⲆⵠⲆ[65] = dw(60, 60, 0, ᐃΔ[572], 3);
    this.ⲆⵠⲆ[65].id = 65;
    this.ⲆⵠⲆ[102] = dw(60, 60, 0, ᐃΔ[1169], 3);
    this.ⲆⵠⲆ[102].id = 102;
    this.ⲆⵠⲆ[72] = dw(60, 60, 0, ᐃΔ[1242], Cs);
    this.ⲆⵠⲆ[72].id = 72;
    this.ⲆⵠⲆ[66] = dw(60, 60, 0, ᐃΔ[575], 3);
    this.ⲆⵠⲆ[66].id = 66;
    this.ⲆⵠⲆ[103] = dw(60, 60, 0, ᐃΔ[1172], 3);
    this.ⲆⵠⲆ[103].id = 103;
    this.ⲆⵠⲆ[73] = dw(60, 60, 0, ᐃΔ[1245], nk);
    this.ⲆⵠⲆ[73].id = 73;
    this.ⲆⵠⲆ[67] = dw(60, 60, 0, ᐃΔ[578], wi);
    this.ⲆⵠⲆ[67].id = 67;
    this.ⲆⵠⲆ[104] = dw(60, 60, 0, ᐃΔ[1175], nk);
    this.ⲆⵠⲆ[104].id = 104;
    this.ⲆⵠⲆ[74] = dw(60, 60, 0, ᐃΔ[1248], 3);
    this.ⲆⵠⲆ[74].id = 74;
    this.ⲆⵠⲆ[68] = dw(60, 60, 0, ᐃΔ[581], 3);
    this.ⲆⵠⲆ[68].id = 68;
    this.ⲆⵠⲆ[105] = dw(60, 60, 0, ᐃΔ[1178], Mh);
    this.ⲆⵠⲆ[105].id = 105;
    this.ⲆⵠⲆ[75] = dw(60, 60, 0, ᐃΔ[1251], 3);
    this.ⲆⵠⲆ[75].id = 75;
    this.ⲆⵠⲆ[69] = dw(60, 60, 0, ᐃΔ[584], 3);
    this.ⲆⵠⲆ[69].id = 69;
    this.ⲆⵠⲆ[106] = dw(60, 60, 0, ᐃΔ[1181], dl);
    this.ⲆⵠⲆ[106].id = 106;
    this.ⲆⵠⲆ[76] = dw(60, 60, 0, ᐃΔ[1254], rb);
    this.ⲆⵠⲆ[76].id = 76;
    this.ⲆⵠⲆ[70] = dw(60, 60, 0, ᐃΔ[587], 3);
    this.ⲆⵠⲆ[70].id = 70;
    this.ⲆⵠⲆ[107] = dw(60, 60, 0, ᐃΔ[1184], 3);
    this.ⲆⵠⲆ[107].id = 107;
    this.ⲆⵠⲆ[94] = dw(60, 60, 0, ᐃΔ[1257], 3);
    this.ⲆⵠⲆ[94].id = 94;
    this.ⲆⵠⲆ[95] = dw(60, 60, 0, ᐃΔ[1260], 3);
    this.ⲆⵠⲆ[95].id = 95;
    this.ⲆⵠⲆ[96] = dw(60, 60, 0, ᐃΔ[1263], nk);
    this.ⲆⵠⲆ[96].id = 96;
    this.ⲆⵠⲆ[97] = dw(60, 60, 0, ᐃΔ[1266], Mh);
    this.ⲆⵠⲆ[97].id = 97;
    this.ⲆⵠⲆ[98] = dw(60, 60, 0, ᐃΔ[1269], Jd);
    this.ⲆⵠⲆ[98].id = 98;
    this.ⲆⵠⲆ[99] = dw(60, 60, 0, ᐃΔ[1272], 3);
    this.ⲆⵠⲆ[99].id = 99;
    this.ⲆⵠⲆ[58] = dw(60, 60, 0, ᐃΔ[826], 3);
    this.ⲆⵠⲆ[58].id = 58;
    this.ⲆⵠⲆ[25] = dw(60, 60, 0, ᐃΔ[429], Sg);
    this.ⲆⵠⲆ[25].id = 25;
    this.ⲆⵠⲆ[26] = dw(60, 60, 0, ᐃΔ[432], 3);
    this.ⲆⵠⲆ[26].id = 26;
    this.ⲆⵠⲆ[27] = dw(60, 60, 0, ᐃΔ[435], Z);
    this.ⲆⵠⲆ[27].id = 27;
    this.ⲆⵠⲆ[28] = dw(60, 60, 0, ᐃΔ[438], 3);
    this.ⲆⵠⲆ[28].id = 28;
    this.ⲆⵠⲆ[120] = dw(60, 60, 0, ᐃΔ[441], Er);
    this.ⲆⵠⲆ[120].id = 120;
    this.ⲆⵠⲆ[120].info.ⵠⵠ[jg] = this.ⲆⵠⲆ[120].info.ⵠⵠ[0];
    this.ⲆⵠⲆ[29] = dw(60, 60, 0, ᐃΔ[392], 3);
    this.ⲆⵠⲆ[29].id = 29;
    this.ⲆⵠⲆ[121] = dw(60, 60, 0, ᐃΔ[418], Ou);
    this.ⲆⵠⲆ[121].id = 121;
    this.ⲆⵠⲆ[121].info.ⵠⵠ[ta] = this.ⲆⵠⲆ[121].info.ⵠⵠ[Ah];
    this.ⲆⵠⲆ[30] = dw(60, 60, 0, ᐃΔ[455], nk);
    this.ⲆⵠⲆ[30].id = 30;
    this.ⲆⵠⲆ[9] = dw(60, 60, 0, ᐃΔ[860], 3);
    this.ⲆⵠⲆ[9].id = 9;
    this.ⲆⵠⲆ[31] = dw(60, 60, 0, ᐃΔ[458], Ou);
    this.ⲆⵠⲆ[31].id = 31;
    this.ⲆⵠⲆ[32] = dw(60, 60, 0, ᐃΔ[1017], iu);
    this.ⲆⵠⲆ[32].id = 32;
    this.ⲆⵠⲆ[33] = dw(60, 60, 0, ᐃΔ[472], 3);
    this.ⲆⵠⲆ[33].id = 33;
    this.ⲆⵠⲆ[35] = dw(60, 60, 0, ᐃΔ[477], 3);
    this.ⲆⵠⲆ[35].id = 35;
    this.ⲆⵠⲆ[36] = dw(60, 60, 0, ᐃΔ[480], Ql);
    this.ⲆⵠⲆ[36].id = 36;
    this.ⲆⵠⲆ[37] = dw(60, 60, 0, ᐃΔ[483], Rn);
    this.ⲆⵠⲆ[37].id = 37;
    this.ⲆⵠⲆ[38] = dw(60, 60, 0, ᐃΔ[486], 3);
    this.ⲆⵠⲆ[38].id = 38;
    this.ⲆⵠⲆ[39] = dw(60, 60, 0, ᐃΔ[489], 3);
    this.ⲆⵠⲆ[39].id = 39;
    this.ⲆⵠⲆ[122] = dw(60, 60, 0, ᐃΔ[492], Mh);
    this.ⲆⵠⲆ[122].id = 122;
    this.ⲆⵠⲆ[123] = dw(60, 60, 0, ᐃΔ[495], 3);
    this.ⲆⵠⲆ[123].id = 123;
    this.ⲆⵠⲆ[124] = dw(60, 60, 0, ᐃΔ[499], 3);
    this.ⲆⵠⲆ[124].id = 124;
    this.ⲆⵠⲆ[40] = dw(60, 60, 0, ᐃΔ[502], 3);
    this.ⲆⵠⲆ[40].id = 40;
    this.ⲆⵠⲆ[146] = dw(60, 60, 0, ᐃΔ[505], 3);
    this.ⲆⵠⲆ[146].id = 146;
    this.ⲆⵠⲆ[146].info.ⵠⵠ[2] = this.ⲆⵠⲆ[146].info.ⵠⵠ[qb];
    this.ⲆⵠⲆ[240] = dw(60, 60, 0, ᐃΔ[1233], iu);
    this.ⲆⵠⲆ[240].id = 240;
    this.ⲆⵠⲆ[240].info.ⵠⵠ[nd] = this.ⲆⵠⲆ[240].info.ⵠⵠ[Ah];
    this.ⲆⵠⲆ[147] = dw(60, 60, 0, ᐃΔ[513], Sg);
    this.ⲆⵠⲆ[147].id = 147;
    this.ⲆⵠⲆ[147].info.ⵠⵠ[2] = this.ⲆⵠⲆ[147].info.ⵠⵠ[0];
    this.ⲆⵠⲆ[148] = dw(60, 60, 0, ᐃΔ[518], 3);
    this.ⲆⵠⲆ[148].id = 148;
    this.ⲆⵠⲆ[148].info.ⵠⵠ[ta] = this.ⲆⵠⲆ[148].info.ⵠⵠ[0];
    this.ⲆⵠⲆ[149] = dw(60, 60, 0, ᐃΔ[521], Lq);
    this.ⲆⵠⲆ[149].id = 149;
    this.ⲆⵠⲆ[150] = dw(60, 60, 0, ᐃΔ[523], Cs);
    this.ⲆⵠⲆ[150].id = 150;
    this.ⲆⵠⲆ[151] = dw(60, 60, 0, ᐃΔ[529], 3);
    this.ⲆⵠⲆ[151].id = 151;
    this.ⲆⵠⲆ[158] = dw(60, 60, 0, ᐃΔ[532], Sg);
    this.ⲆⵠⲆ[158].id = 158;
    this.ⲆⵠⲆ[159] = dw(60, 60, 0, ᐃΔ[553], 3);
    this.ⲆⵠⲆ[159].id = 159;
    this.ⲆⵠⲆ[43] = dw(60, 60, 0, ᐃΔ[541], 3);
    this.ⲆⵠⲆ[43].id = 43;
    this.ⲆⵠⲆ[45] = dw(60, 60, 0, ᐃΔ[550], 3);
    this.ⲆⵠⲆ[45].id = 45;
    this.ⲆⵠⲆ[125] = dw(60, 60, 0, ᐃΔ[605], Rn);
    this.ⲆⵠⲆ[125].id = 125;
    this.ⲆⵠⲆ[221] = dw(60, 60, 0, ᐃΔ[1236], Ft);
    this.ⲆⵠⲆ[221].id = 221;
    this.ⲆⵠⲆ[223] = dw(60, 60, 0, ᐃΔ[1028], 3);
    this.ⲆⵠⲆ[223].id = 223;
    this.ⲆⵠⲆ[224] = dw(60, 60, 0, ᐃΔ[1031], 3);
    this.ⲆⵠⲆ[224].id = 224;
    this.ⲆⵠⲆ[230] = dw(60, 60, 0, ᐃΔ[1117], Er);
    this.ⲆⵠⲆ[230].id = 230;
    this.ⲆⵠⲆ[89] = dw(60, 60, 0, ᐃΔ[1046], Mh);
    this.ⲆⵠⲆ[89].id = 89;
    this.ⲆⵠⲆ[225] = dw(60, 60, 0, ᐃΔ[1049], nk);
    this.ⲆⵠⲆ[225].id = 225;
    this.ⲆⵠⲆ[226] = dw(60, 60, 0, ᐃΔ[1189], 3);
    this.ⲆⵠⲆ[226].id = 226;
    this.ⲆⵠⲆ[227] = dw(60, 60, 0, ᐃΔ[1080], wi);
    this.ⲆⵠⲆ[227].id = 227;
    this.ⲆⵠⲆ[239] = dw(60, 60, 0, ᐃΔ[1224], 3);
    this.ⲆⵠⲆ[239].id = 239;
    this.ⲆⵠⲆ[228] = dw(60, 60, 0, ᐃΔ[1095], 3);
    this.ⲆⵠⲆ[228].id = 228;
    this.ⲆⵠⲆ[229] = dw(60, 60, 0, ᐃΔ[1110], 3);
    this.ⲆⵠⲆ[229].id = 229;
    this.ⲆⵠⲆ[126] = dw(60, 60, 0, ᐃΔ[609], 3);
    this.ⲆⵠⲆ[126].id = 126;
    this.ⲆⵠⲆ[126].info.ⵠⵠ[2] = this.ⲆⵠⲆ[126].info.ⵠⵠ[0];
    this.ⲆⵠⲆ[127] = dw(60, 60, 0, ᐃΔ[613], Mh);
    this.ⲆⵠⲆ[127].id = 127;
    this.ⲆⵠⲆ[128] = dw(60, 60, 0, ᐃΔ[612], Hn);
    this.ⲆⵠⲆ[128].id = 128;
    this.ⲆⵠⲆ[46] = dw(60, 60, 0, ᐃΔ[616], 3);
    this.ⲆⵠⲆ[46].id = 46;
    this.ⲆⵠⲆ[50] = dw(60, 60, 0, ᐃΔ[699], 3);
    this.ⲆⵠⲆ[50].id = 50;
    this.ⲆⵠⲆ[51] = dw(60, 60, 0, ᐃΔ[702], Ql);
    this.ⲆⵠⲆ[51].id = 51;
    this.ⲆⵠⲆ[52] = dw(60, 60, 0, ᐃΔ[705], 3);
    this.ⲆⵠⲆ[52].id = 52;
    this.ⲆⵠⲆ[55] = dw(60, 60, 0, ᐃΔ[709], Cs);
    this.ⲆⵠⲆ[55].id = 55;
    this.ⲆⵠⲆ[129] = dw(60, 60, 0, ᐃΔ[624], 3);
    this.ⲆⵠⲆ[129].id = 129;
    this.ⲆⵠⲆ[129].info.ⵠⵠ[2] = this.ⲆⵠⲆ[129].info.ⵠⵠ[sb];
    this.ⲆⵠⲆ[130] = dw(60, 60, 0, ᐃΔ[626], dl);
    this.ⲆⵠⲆ[130].id = 130;
    this.ⲆⵠⲆ[131] = dw(60, 60, 0, ᐃΔ[629], 3);
    this.ⲆⵠⲆ[131].id = 131;
    this.ⲆⵠⲆ[131].info.ⵠⵠ[2] = this.ⲆⵠⲆ[131].info.ⵠⵠ[0];
    this.ⲆⵠⲆ[132] = dw(60, 60, 0, ᐃΔ[631], 3);
    this.ⲆⵠⲆ[132].id = 132;
    this.ⲆⵠⲆ[133] = dw(60, 60, 0, ᐃΔ[634], Ou);
    this.ⲆⵠⲆ[133].id = 133;
    this.ⲆⵠⲆ[134] = dw(60, 60, 0, ᐃΔ[639], Er);
    this.ⲆⵠⲆ[134].id = 134;
    this.ⲆⵠⲆ[134].info.ⵠⵠ[2] = this.ⲆⵠⲆ[134].info.ⵠⵠ[0];
    this.ⲆⵠⲆ[135] = dw(60, 60, 0, ᐃΔ[644], Lq);
    this.ⲆⵠⲆ[135].id = 135;
    this.ⲆⵠⲆ[47] = dw(60, 60, 0, ᐃΔ[646], 3);
    this.ⲆⵠⲆ[47].id = 47;
    this.ⲆⵠⲆ[48] = dw(60, 60, 0, ᐃΔ[649], Mh);
    this.ⲆⵠⲆ[48].id = 48;
    this.ⲆⵠⲆ[49] = dw(60, 60, 0, ᐃΔ[652], Hn);
    this.ⲆⵠⲆ[49].id = 49;
    this.ⲆⵠⲆ[136] = dw(60, 60, 0, ᐃΔ[659], Ft);
    this.ⲆⵠⲆ[136].id = 136;
    this.ⲆⵠⲆ[143] = dw(60, 60, 0, ᐃΔ[143], Ft);
    this.ⲆⵠⲆ[143].id = 143;
    this.ⲆⵠⲆ[137] = dw(60, 60, 0, ᐃΔ[662], 3);
    this.ⲆⵠⲆ[137].id = 137;
    this.ⲆⵠⲆ[138] = dw(60, 60, 0, ᐃΔ[664], 3);
    this.ⲆⵠⲆ[138].id = 138;
    this.ⲆⵠⲆ[139] = dw(60, 60, 0, ᐃΔ[674], rb);
    this.ⲆⵠⲆ[139].id = 139;
    this.ⲆⵠⲆ[139].info.ⵠⵠ[2] = this.ⲆⵠⲆ[139].info.ⵠⵠ[0];
    this.ⲆⵠⲆ[140] = dw(60, 60, 0, ᐃΔ[140], iu);
    this.ⲆⵠⲆ[140].id = 140;
    this.ⲆⵠⲆ[140].info.ⵠⵠ[br] = this.ⲆⵠⲆ[140].info.ⵠⵠ[0];
    this.ⲆⵠⲆ[141] = dw(60, 60, 0, ᐃΔ[685], 3);
    this.ⲆⵠⲆ[141].id = 141;
    this.ⲆⵠⲆ[142] = dw(60, 60, 0, ᐃΔ[142], 3);
    this.ⲆⵠⲆ[142].id = 142;
    this.ⲆⵠⲆ[142].info.ⵠⵠ[2] = this.ⲆⵠⲆ[142].info.ⵠⵠ[gl];
    this.ⲆⵠⲆ[144] = dw(60, 60, 0, ᐃΔ[717], Lq);
    this.ⲆⵠⲆ[144].id = 144;
    this.ⲆⵠⲆ[145] = dw(60, 60, 0, ᐃΔ[145], 3);
    this.ⲆⵠⲆ[145].id = 145;
    this.ⲆⵠⲆ[59] = dw(60, 60, 0, ᐃΔ[732], Er);
    this.ⲆⵠⲆ[59].id = 59;
    this.ⲆⵠⲆ[62] = dw(60, 60, 0, ᐃΔ[563], 3);
    this.ⲆⵠⲆ[62].id = 62;
    this.ⲆⵠⲆ[185] = dw(60, 60, 0, ᐃΔ[252], rb);
    this.ⲆⵠⲆ[185].id = 185;
    this.ⲆⵠⲆ[185].info.ⵠⵠ[2] = this.ⲆⵠⲆ[185].info.ⵠⵠ[0];
    this.ⲆⵠⲆ[184] = dw(60, 60, 0, ᐃΔ[751], Ft);
    this.ⲆⵠⲆ[184].id = 184;
    this.ⲆⵠⲆ[184].info.ⵠⵠ[2] = this.ⲆⵠⲆ[184].info.ⵠⵠ[0];
    this.ⲆⵠⲆ[17] = dw(60, 60, 0, ᐃΔ[877], 3);
    this.ⲆⵠⲆ[17].id = 17;
    this.ⲆⵠⲆ[63] = dw(60, 60, 0, ᐃΔ[566], 3);
    this.ⲆⵠⲆ[63].id = 63;
    this.ⲆⵠⲆ[187] = dw(60, 60, 0, ᐃΔ[253], hd);
    this.ⲆⵠⲆ[187].id = 187;
    this.ⲆⵠⲆ[187].info.ⵠⵠ[Nj] = this.ⲆⵠⲆ[187].info.ⵠⵠ[0];
    this.ⲆⵠⲆ[186] = dw(60, 60, 0, ᐃΔ[753], 3);
    this.ⲆⵠⲆ[186].id = 186;
    this.ⲆⵠⲆ[186].info.ⵠⵠ[Nj] = this.ⲆⵠⲆ[186].info.ⵠⵠ[Ah];
    this.ⲆⵠⲆ[77] = dw(60, 60, 0, ᐃΔ[756], iu);
    this.ⲆⵠⲆ[77].id = 77;
    this.ⲆⵠⲆ[175] = dw(60, 60, 0, ᐃΔ[176], nk);
    this.ⲆⵠⲆ[175].id = 175;
    this.ⲆⵠⲆ[175].info.ⵠⵠ[Ht] = this.ⲆⵠⲆ[175].info.ⵠⵠ[et];
    this.ⲆⵠⲆ[176] = dw(60, 60, 0, ᐃΔ[177], 3);
    this.ⲆⵠⲆ[176].id = 176;
    this.ⲆⵠⲆ[176].info.ⵠⵠ[qi] = this.ⲆⵠⲆ[176].info.ⵠⵠ[0];
    this.ⲆⵠⲆ[78] = dw(60, 60, 0, ᐃΔ[760], 3);
    this.ⲆⵠⲆ[78].id = 78;
    this.ⲆⵠⲆ[177] = dw(60, 60, 0, ᐃΔ[175], iu);
    this.ⲆⵠⲆ[177].id = 177;
    this.ⲆⵠⲆ[177].info.ⵠⵠ[fh] = this.ⲆⵠⲆ[177].info.ⵠⵠ[Fj];
    this.ⲆⵠⲆ[79] = dw(60, 60, 0, ᐃΔ[764], 3);
    this.ⲆⵠⲆ[79].id = 79;
    this.ⲆⵠⲆ[83] = dw(60, 60, 0, ᐃΔ[767], 3);
    this.ⲆⵠⲆ[83].id = 83;
    this.ⲆⵠⲆ[84] = dw(60, 60, 0, ᐃΔ[771], Z);
    this.ⲆⵠⲆ[84].id = 84;
    this.ⲆⵠⲆ[178] = dw(60, 60, 0, ᐃΔ[178], dl);
    this.ⲆⵠⲆ[178].id = 178;
    this.ⲆⵠⲆ[179] = dw(60, 60, 0, ᐃΔ[179], wi);
    this.ⲆⵠⲆ[179].id = 179;
    this.ⲆⵠⲆ[86] = dw(60, 60, 0, ᐃΔ[776], 3);
    this.ⲆⵠⲆ[86].id = 86;
    this.ⲆⵠⲆ[85] = dw(60, 60, 0, ᐃΔ[779], Mh);
    this.ⲆⵠⲆ[85].id = 85;
    this.ⲆⵠⲆ[180] = dw(60, 60, 0, ᐃΔ[180], Xu);
    this.ⲆⵠⲆ[180].id = 180;
    this.ⲆⵠⲆ[181] = dw(60, 60, 0, ᐃΔ[181], Rn);
    this.ⲆⵠⲆ[181].id = 181;
    this.ⲆⵠⲆ[182] = dw(60, 60, 0, ᐃΔ[789], Qn);
    this.ⲆⵠⲆ[182].id = 182;
    this.ⲆⵠⲆ[183] = dw(60, 60, 0, ᐃΔ[800], Lq);
    this.ⲆⵠⲆ[183].id = 183;
    this.ⲆⵠⲆ[188] = dw(60, 60, 0, ᐃΔ[808], dl);
    this.ⲆⵠⲆ[188].id = 188;
    this.ⲆⵠⲆ[189] = dw(60, 60, 0, ᐃΔ[814], 3);
    this.ⲆⵠⲆ[189].id = 189;
    this.ⲆⵠⲆ[191] = dw(60, 60, 0, ᐃΔ[834], 3);
    this.ⲆⵠⲆ[191].id = 191;
    this.ⲆⵠⲆ[192] = dw(60, 60, 0, ᐃΔ[840], 3);
    this.ⲆⵠⲆ[192].id = 192;
    this.ⲆⵠⲆ[190] = dw(60, 60, 0, ᐃΔ[842], 3);
    this.ⲆⵠⲆ[190].id = 190;
    this.ⲆⵠⲆ[193] = dw(60, 60, 0, ᐃΔ[845], 3);
    this.ⲆⵠⲆ[193].id = 193;
    this.ⲆⵠⲆ[194] = dw(60, 60, 0, ᐃΔ[850], Ql);
    this.ⲆⵠⲆ[194].id = 194;
    this.ⲆⵠⲆ[204] = dw(60, 60, 0, ᐃΔ[949], 3);
    this.ⲆⵠⲆ[204].id = 204;
    this.ⲆⵠⲆ[205] = dw(60, 60, 0, ᐃΔ[955], Ql);
    this.ⲆⵠⲆ[205].id = 205;
    this.ⲆⵠⲆ[206] = dw(60, 60, 0, ᐃΔ[959], 3);
    this.ⲆⵠⲆ[206].id = 206;
    this.ⲆⵠⲆ[207] = dw(60, 60, 0, ᐃΔ[965], 3);
    this.ⲆⵠⲆ[207].id = 207;
    this.ⲆⵠⲆ[208] = dw(60, 60, 0, ᐃΔ[966], 3);
    this.ⲆⵠⲆ[208].id = 208;
    this.ⲆⵠⲆ[209] = dw(60, 60, 0, ᐃΔ[972], Lq);
    this.ⲆⵠⲆ[209].id = 209;
    this.ⲆⵠⲆ[210] = dw(60, 60, 0, ᐃΔ[981], 3);
    this.ⲆⵠⲆ[210].id = 210;
    this.ⲆⵠⲆ[211] = dw(60, 60, 0, ᐃΔ[987], 3);
    this.ⲆⵠⲆ[211].id = 211;
    this.ⲆⵠⲆ[41] = dw(60, 60, 0, ᐃΔ[880], 3);
    this.ⲆⵠⲆ[41].id = 41;
    this.ⲆⵠⲆ[42] = dw(60, 60, 0, ᐃΔ[882], 3);
    this.ⲆⵠⲆ[42].id = 42;
    this.ⲆⵠⲆ[12] = dw(60, 60, 0, ᐃΔ[401], Ql);
    this.ⲆⵠⲆ[12].id = 12;
    this.ⲆⵠⲆ[16] = dw(60, 60, 0, ᐃΔ[874], 3);
    this.ⲆⵠⲆ[16].id = 16;
    this.ⲆⵠⲆ[196] = dw(60, 60, 0, ᐃΔ[196], Ql);
    this.ⲆⵠⲆ[196].id = 196;
    this.ⲆⵠⲆ[18] = dw(60, 60, 0, ᐃΔ[901], 3);
    this.ⲆⵠⲆ[18].id = 18;
    this.ⲆⵠⲆ[197] = dw(60, 60, 0, ᐃΔ[197], 3);
    this.ⲆⵠⲆ[197].id = 197;
    this.ⲆⵠⲆ[198] = dw(60, 60, 0, ᐃΔ[907], nk);
    this.ⲆⵠⲆ[198].id = 198;
    this.ⲆⵠⲆ[61] = dw(60, 60, 0, ᐃΔ[910], 3);
    this.ⲆⵠⲆ[61].id = 61;
    this.ⲆⵠⲆ[201] = dw(60, 60, 0, ᐃΔ[870], 3);
    this.ⲆⵠⲆ[201].id = 201;
    this.ⲆⵠⲆ[200] = dw(60, 60, 0, ᐃΔ[200], 3);
    this.ⲆⵠⲆ[200].id = 200;
    this.ⲆⵠⲆ[199] = dw(60, 60, 0, ᐃΔ[865], 3);
    this.ⲆⵠⲆ[199].id = 199;
    this.ⵠⲆᐃ = [];
    this.ⵠⲆᐃ[35] = dw(60, 60, 0, ᐃΔ[254], Hn);
    this.ⵠⲆᐃ[35].id = 35;
    this.ⵠⲆᐃ[5] = dw(60, 60, 0, ᐃΔ[256], 3);
    this.ⵠⲆᐃ[5].id = 5;
    this.ⵠⲆᐃ[0] = dw(60, 60, 0, ᐃΔ[302], Mh);
    this.ⵠⲆᐃ[0].id = 0;
    this.ⵠⲆᐃ[3] = dw(60, 60, 0, ᐃΔ[262], 3);
    this.ⵠⲆᐃ[3].id = 3;
    this.ⵠⲆᐃ[55] = dw(60, 60, 0, ᐃΔ[318], 3);
    this.ⵠⲆᐃ[55].id = 55;
    this.ⵠⲆᐃ[67] = dw(60, 60, 0, ᐃΔ[320], Ql);
    this.ⵠⲆᐃ[67].id = 67;
    this.ⵠⲆᐃ[40] = dw(60, 60, 0, ᐃΔ[284], rb);
    this.ⵠⲆᐃ[40].id = 40;
    this.ⵠⲆᐃ[6] = dw(60, 60, 0, ᐃΔ[295], Ft);
    this.ⵠⲆᐃ[6].id = 6;
    this.ⵠⲆᐃ[7] = dw(60, 60, 0, ᐃΔ[257], 3);
    this.ⵠⲆᐃ[7].id = 7;
    this.ⵠⲆᐃ[36] = dw(60, 60, 0, ᐃΔ[290], 3);
    this.ⵠⲆᐃ[36].id = 36;
    this.ⵠⲆᐃ[34] = dw(60, 60, 0, ᐃΔ[830], 3);
    this.ⵠⲆᐃ[34].id = 34;
    this.ⵠⲆᐃ[37] = dw(60, 60, 0, ᐃΔ[291], 3);
    this.ⵠⲆᐃ[37].id = 37;
    this.ⵠⲆᐃ[4] = dw(60, 60, 0, ᐃΔ[314], wi);
    this.ⵠⲆᐃ[4].id = 4;
    this.ⵠⲆᐃ[49] = dw(60, 60, 0, ᐃΔ[325], 3);
    this.ⵠⲆᐃ[49].id = 49;
    this.ⵠⲆᐃ[1] = dw(60, 60, 0, ᐃΔ[327], iu);
    this.ⵠⲆᐃ[1].id = 1;
    this.ⵠⲆᐃ[54] = dw(60, 60, 0, ᐃΔ[304], 3);
    this.ⵠⲆᐃ[54].id = 54;
    this.ⵠⲆᐃ[56] = dw(60, 60, 0, ᐃΔ[263], Z);
    this.ⵠⲆᐃ[56].id = 56;
    this.ⵠⲆᐃ[57] = dw(60, 60, 0, ᐃΔ[265], 3);
    this.ⵠⲆᐃ[57].id = 57;
    this.ⵠⲆᐃ[58] = dw(60, 60, 0, ᐃΔ[332], Z);
    this.ⵠⲆᐃ[58].id = 58;
    this.ⵠⲆᐃ[61] = dw(60, 60, 0, ᐃΔ[268], wi);
    this.ⵠⲆᐃ[61].id = 61;
    this.ⵠⲆᐃ[79] = dw(60, 60, 0, ᐃΔ[338], Ql);
    this.ⵠⲆᐃ[79].id = 79;
    this.ⵠⲆᐃ[68] = dw(60, 60, 0, ᐃΔ[360], Qn);
    this.ⵠⲆᐃ[68].id = 68;
    this.ⵠⲆᐃ[69] = dw(60, 60, 0, ᐃΔ[363], Sg);
    this.ⵠⲆᐃ[69].id = 69;
    this.ⵠⲆᐃ[70] = dw(60, 60, 0, ᐃΔ[365], rb);
    this.ⵠⲆᐃ[70].id = 70;
    this.ⵠⲆᐃ[100] = dw(60, 60, 0, ᐃΔ[367], Qn);
    this.ⵠⲆᐃ[100].id = 100;
    this.ⵠⲆᐃ[83] = dw(60, 60, 0, ᐃΔ[370], iu);
    this.ⵠⲆᐃ[83].id = 83;
    this.ⵠⲆᐃ[62] = dw(60, 60, 0, ᐃΔ[371], Z);
    this.ⵠⲆᐃ[62].id = 62;
    this.ⵠⲆᐃ[63] = dw(60, 60, 0, ᐃΔ[374], Ft);
    this.ⵠⲆᐃ[63].id = 63;
    this.ⵠⲆᐃ[64] = dw(60, 60, 0, ᐃΔ[377], Lq);
    this.ⵠⲆᐃ[64].id = 64;
    this.ⵠⲆᐃ[83] = dw(60, 60, 0, ᐃΔ[370], Ql);
    this.ⵠⲆᐃ[83].id = 83;
    this.ⵠⲆᐃ[84] = dw(60, 60, 0, ᐃΔ[380], 3);
    this.ⵠⲆᐃ[84].id = 84;
    this.ⵠⲆᐃ[25] = dw(60, 60, 0, ᐃΔ[402], rb);
    this.ⵠⲆᐃ[25].id = 25;
    this.ⵠⲆᐃ[26] = dw(60, 60, 0, ᐃΔ[396], Cs);
    this.ⵠⲆᐃ[26].id = 26;
    this.ⵠⲆᐃ[27] = dw(60, 60, 0, ᐃΔ[399], 3);
    this.ⵠⲆᐃ[27].id = 27;
    this.ⵠⲆᐃ[28] = dw(60, 60, 0, ᐃΔ[405], 3);
    this.ⵠⲆᐃ[28].id = 28;
    this.ⵠⲆᐃ[31] = dw(60, 60, 0, ᐃΔ[876], iu);
    this.ⵠⲆᐃ[31].id = 31;
    this.ⵠⲆᐃ[2] = dw(60, 60, 0, ᐃΔ[409], Hn);
    this.ⵠⲆᐃ[2].id = 2;
    this.ⵠⲆᐃ[80] = dw(60, 60, 0, ᐃΔ[421], 3);
    this.ⵠⲆᐃ[80].id = 80;
    this.ⵠⲆᐃ[81] = dw(60, 60, 0, ᐃΔ[424], rb);
    this.ⵠⲆᐃ[81].id = 81;
    this.ⵠⲆᐃ[ts.ΔᐃΔⵠΔ] = dw(60, 60, 0, ᐃΔ[1228], 3);
    this.ⵠⲆᐃ[ts.ΔᐃΔⵠΔ].id = ts.ΔᐃΔⵠΔ;
    this.ⵠⲆᐃ[86] = dw(60, 60, 0, ᐃΔ[1231], hd);
    this.ⵠⲆᐃ[86].id = 86;
    this.ⵠⲆᐃ[98] = dw(60, 60, 0, ᐃΔ[1138], 3);
    this.ⵠⲆᐃ[98].id = 98;
    this.ⵠⲆᐃ[99] = dw(60, 60, 0, ᐃΔ[1141], Z);
    this.ⵠⲆᐃ[99].id = 99;
    this.ⵠⲆᐃ[131] = dw(60, 60, 0, ᐃΔ[570], Jd);
    this.ⵠⲆᐃ[131].id = 131;
    this.ⵠⲆᐃ[132] = dw(60, 60, 0, ᐃΔ[1168], 3);
    this.ⵠⲆᐃ[132].id = 132;
    this.ⵠⲆᐃ[145] = dw(60, 60, 0, ᐃΔ[1238], 3);
    this.ⵠⲆᐃ[145].id = 145;
    this.ⵠⲆᐃ[133] = dw(60, 60, 0, ᐃΔ[573], 3);
    this.ⵠⲆᐃ[133].id = 133;
    this.ⵠⲆᐃ[134] = dw(60, 60, 0, ᐃΔ[1171], 3);
    this.ⵠⲆᐃ[134].id = 134;
    this.ⵠⲆᐃ[146] = dw(60, 60, 0, ᐃΔ[1241], 3);
    this.ⵠⲆᐃ[146].id = 146;
    this.ⵠⲆᐃ[135] = dw(60, 60, 0, ᐃΔ[576], 3);
    this.ⵠⲆᐃ[135].id = 135;
    this.ⵠⲆᐃ[136] = dw(60, 60, 0, ᐃΔ[1174], Cs);
    this.ⵠⲆᐃ[136].id = 136;
    this.ⵠⲆᐃ[147] = dw(60, 60, 0, ᐃΔ[1244], 3);
    this.ⵠⲆᐃ[147].id = 147;
    this.ⵠⲆᐃ[137] = dw(60, 60, 0, ᐃΔ[579], 3);
    this.ⵠⲆᐃ[137].id = 137;
    this.ⵠⲆᐃ[138] = dw(60, 60, 0, ᐃΔ[1177], 3);
    this.ⵠⲆᐃ[138].id = 138;
    this.ⵠⲆᐃ[167] = dw(60, 60, 0, ᐃΔ[1256], rb);
    this.ⵠⲆᐃ[167].id = 167;
    this.ⵠⲆᐃ[168] = dw(60, 60, 0, ᐃΔ[1259], 3);
    this.ⵠⲆᐃ[168].id = 168;
    this.ⵠⲆᐃ[169] = dw(60, 60, 0, ᐃΔ[1262], hd);
    this.ⵠⲆᐃ[169].id = 169;
    this.ⵠⲆᐃ[170] = dw(60, 60, 0, ᐃΔ[1265], Ou);
    this.ⵠⲆᐃ[170].id = 170;
    this.ⵠⲆᐃ[171] = dw(60, 60, 0, ᐃΔ[1268], Sg);
    this.ⵠⲆᐃ[171].id = 171;
    this.ⵠⲆᐃ[172] = dw(60, 60, 0, ᐃΔ[1271], 3);
    this.ⵠⲆᐃ[172].id = 172;
    this.ⵠⲆᐃ[148] = dw(60, 60, 0, ᐃΔ[1247], Er);
    this.ⵠⲆᐃ[148].id = 148;
    this.ⵠⲆᐃ[139] = dw(60, 60, 0, ᐃΔ[582], hd);
    this.ⵠⲆᐃ[139].id = 139;
    this.ⵠⲆᐃ[140] = dw(60, 60, 0, ᐃΔ[1180], 3);
    this.ⵠⲆᐃ[140].id = 140;
    this.ⵠⲆᐃ[149] = dw(60, 60, 0, ᐃΔ[1250], 3);
    this.ⵠⲆᐃ[149].id = 149;
    this.ⵠⲆᐃ[141] = dw(60, 60, 0, ᐃΔ[585], Sg);
    this.ⵠⲆᐃ[141].id = 141;
    this.ⵠⲆᐃ[142] = dw(60, 60, 0, ᐃΔ[1183], 3);
    this.ⵠⲆᐃ[142].id = 142;
    this.ⵠⲆᐃ[150] = dw(60, 60, 0, ᐃΔ[1253], 3);
    this.ⵠⲆᐃ[150].id = 150;
    this.ⵠⲆᐃ[143] = dw(60, 60, 0, ᐃΔ[588], 3);
    this.ⵠⲆᐃ[143].id = 143;
    this.ⵠⲆᐃ[144] = dw(60, 60, 0, ᐃΔ[1186], 3);
    this.ⵠⲆᐃ[144].id = 144;
    this.ⵠⲆᐃ[87] = dw(60, 60, 0, ᐃΔ[827], iu);
    this.ⵠⲆᐃ[87].id = 87;
    this.ⵠⲆᐃ[88] = dw(60, 60, 0, ᐃΔ[430], Ft);
    this.ⵠⲆᐃ[88].id = 88;
    this.ⵠⲆᐃ[89] = dw(60, 60, 0, ᐃΔ[433], Qn);
    this.ⵠⲆᐃ[89].id = 89;
    this.ⵠⲆᐃ[90] = dw(60, 60, 0, ᐃΔ[436], 3);
    this.ⵠⲆᐃ[90].id = 90;
    this.ⵠⲆᐃ[24] = dw(60, 60, 0, ᐃΔ[439], 3);
    this.ⵠⲆᐃ[24].id = 24;
    this.ⵠⲆᐃ[101] = dw(60, 60, 0, ᐃΔ[442], Cs);
    this.ⵠⲆᐃ[101].id = 101;
    this.ⵠⲆᐃ[100] = dw(60, 60, 0, ᐃΔ[367], Ou);
    this.ⵠⲆᐃ[100].id = 100;
    this.ⵠⲆᐃ[38] = dw(60, 60, 0, ᐃΔ[456], 3);
    this.ⵠⲆᐃ[38].id = 38;
    this.ⵠⲆᐃ[ts.ⲆⲆᐃⵠⲆ] = dw(60, 60, 0, ᐃΔ[861], 3);
    this.ⵠⲆᐃ[ts.ⲆⲆᐃⵠⲆ].id = ts.ⲆⲆᐃⵠⲆ;
    this.ⵠⲆᐃ[8] = dw(60, 60, 0, ᐃΔ[460], 3);
    this.ⵠⲆᐃ[8].id = 8;
    this.ⵠⲆᐃ[9] = dw(60, 60, 0, ᐃΔ[1019], Cs);
    this.ⵠⲆᐃ[9].id = 9;
    this.ⵠⲆᐃ[29] = dw(60, 60, 0, ᐃΔ[473], Jd);
    this.ⵠⲆᐃ[29].id = 29;
    this.ⵠⲆᐃ[10] = dw(60, 60, 0, ᐃΔ[478], 3);
    this.ⵠⲆᐃ[10].id = 10;
    this.ⵠⲆᐃ[11] = dw(60, 60, 0, ᐃΔ[481], iu);
    this.ⵠⲆᐃ[11].id = 11;
    this.ⵠⲆᐃ[12] = dw(60, 60, 0, ᐃΔ[484], 3);
    this.ⵠⲆᐃ[12].id = 12;
    this.ⵠⲆᐃ[13] = dw(60, 60, 0, ᐃΔ[487], 3);
    this.ⵠⲆᐃ[13].id = 13;
    this.ⵠⲆᐃ[14] = dw(60, 60, 0, ᐃΔ[490], Z);
    this.ⵠⲆᐃ[14].id = 14;
    this.ⵠⲆᐃ[59] = dw(60, 60, 0, ᐃΔ[493], 3);
    this.ⵠⲆᐃ[59].id = 59;
    this.ⵠⲆᐃ[71] = dw(60, 60, 0, ᐃΔ[496], 3);
    this.ⵠⲆᐃ[71].id = 71;
    this.ⵠⲆᐃ[65] = dw(60, 60, 0, ᐃΔ[498], 3);
    this.ⵠⲆᐃ[65].id = 65;
    this.ⵠⲆᐃ[85] = dw(60, 60, 0, ᐃΔ[503], Ft);
    this.ⵠⲆᐃ[85].id = 85;
    this.ⵠⲆᐃ[102] = dw(60, 60, 0, ᐃΔ[515], 3);
    this.ⵠⲆᐃ[102].id = 102;
    this.ⵠⲆᐃ[103] = dw(60, 60, 0, ᐃΔ[519], iu);
    this.ⵠⲆᐃ[103].id = 103;
    this.ⵠⲆᐃ[115] = dw(60, 60, 0, ᐃΔ[530], 3);
    this.ⵠⲆᐃ[115].id = 115;
    this.ⵠⲆᐃ[104] = dw(60, 60, 0, ᐃΔ[533], 3);
    this.ⵠⲆᐃ[104].id = 104;
    this.ⵠⲆᐃ[105] = dw(60, 60, 0, ᐃΔ[555], Sg);
    this.ⵠⲆᐃ[105].id = 105;
    this.ⵠⲆᐃ[91] = dw(60, 60, 0, ᐃΔ[542], Er);
    this.ⵠⲆᐃ[91].id = 91;
    this.ⵠⲆᐃ[15] = dw(60, 60, 0, ᐃΔ[551], 3);
    this.ⵠⲆᐃ[15].id = 15;
    this.ⵠⲆᐃ[106] = dw(60, 60, 0, ᐃΔ[604], Ft);
    this.ⵠⲆᐃ[106].id = 106;
    this.ⵠⲆᐃ[108] = dw(60, 60, 0, ᐃΔ[1235], Ft);
    this.ⵠⲆᐃ[108].id = 108;
    this.ⵠⲆᐃ[163] = dw(60, 60, 0, ᐃΔ[1027], 3);
    this.ⵠⲆᐃ[163].id = 163;
    this.ⵠⲆᐃ[164] = dw(60, 60, 0, ᐃΔ[1030], 3);
    this.ⵠⲆᐃ[164].id = 164;
    this.ⵠⲆᐃ[166] = dw(60, 60, 0, ᐃΔ[1116], Xu);
    this.ⵠⲆᐃ[166].id = 166;
    this.ⵠⲆᐃ[165] = dw(60, 60, 0, ᐃΔ[1048], dl);
    this.ⵠⲆᐃ[165].id = 165;
    this.ⵠⲆᐃ[ts.ΔⲆᐃΔΔ] = dw(60, 60, 0, ᐃΔ[1051], dl);
    this.ⵠⲆᐃ[ts.ΔⲆᐃΔΔ].id = ts.ΔⲆᐃΔΔ;
    this.ⵠⲆᐃ[ts.ΔⲆᐃⲆᐃ] = dw(60, 60, 0, ᐃΔ[1082], 3);
    this.ⵠⲆᐃ[ts.ΔⲆᐃⲆᐃ].id = ts.ΔⲆᐃⲆᐃ;
    this.ⵠⲆᐃ[ts.ᐃⲆᐃᐃⲆ] = dw(60, 60, 0, ᐃΔ[1226], hd);
    this.ⵠⲆᐃ[ts.ᐃⲆᐃᐃⲆ].id = ts.ᐃⲆᐃᐃⲆ;
    this.ⵠⲆᐃ[ts.ⵠᐃᐃΔΔ] = dw(60, 60, 0, ᐃΔ[1191], 3);
    this.ⵠⲆᐃ[ts.ⵠᐃᐃΔΔ].id = ts.ⵠᐃᐃΔΔ;
    this.ⵠⲆᐃ[110] = dw(60, 60, 0, ᐃΔ[611], Rn);
    this.ⵠⲆᐃ[110].id = 110;
    this.ⵠⲆᐃ[111] = dw(60, 60, 0, ᐃΔ[715], 3);
    this.ⵠⲆᐃ[111].id = 111;
    this.ⵠⲆᐃ[112] = dw(60, 60, 0, ᐃΔ[715], 3);
    this.ⵠⲆᐃ[112].id = 112;
    this.ⵠⲆᐃ[113] = dw(60, 60, 0, ᐃΔ[715], rb);
    this.ⵠⲆᐃ[113].id = 113;
    this.ⵠⲆᐃ[16] = dw(60, 60, 0, ᐃΔ[618], 3);
    this.ⵠⲆᐃ[16].id = 16;
    this.ⵠⲆᐃ[17] = dw(60, 60, 0, ᐃΔ[700], 3);
    this.ⵠⲆᐃ[17].id = 17;
    this.ⵠⲆᐃ[18] = dw(60, 60, 0, ᐃΔ[704], Hn);
    this.ⵠⲆᐃ[18].id = 18;
    this.ⵠⲆᐃ[19] = dw(60, 60, 0, ᐃΔ[706], Rn);
    this.ⵠⲆᐃ[19].id = 19;
    this.ⵠⲆᐃ[122] = dw(60, 60, 0, ᐃΔ[711], 3);
    this.ⵠⲆᐃ[122].id = 122;
    this.ⵠⲆᐃ[20] = dw(60, 60, 0, ᐃΔ[627], Er);
    this.ⵠⲆᐃ[20].id = 20;
    this.ⵠⲆᐃ[41] = dw(60, 60, 0, ᐃΔ[632], 3);
    this.ⵠⲆᐃ[41].id = 41;
    this.ⵠⲆᐃ[52] = dw(60, 60, 0, ᐃΔ[635], Mh);
    this.ⵠⲆᐃ[52].id = 52;
    this.ⵠⲆᐃ[114] = dw(60, 60, 0, ᐃΔ[643], 3);
    this.ⵠⲆᐃ[114].id = 114;
    this.ⵠⲆᐃ[94] = dw(60, 60, 0, ᐃΔ[647], 3);
    this.ⵠⲆᐃ[94].id = 94;
    this.ⵠⲆᐃ[93] = dw(60, 60, 0, ᐃΔ[650], Mh);
    this.ⵠⲆᐃ[93].id = 93;
    this.ⵠⲆᐃ[21] = dw(60, 60, 0, ᐃΔ[654], 3);
    this.ⵠⲆᐃ[21].id = 21;
    this.ⵠⲆᐃ[53] = dw(60, 60, 0, ᐃΔ[660], Xu);
    this.ⵠⲆᐃ[53].id = 53;
    this.ⵠⲆᐃ[51] = dw(60, 60, 0, ᐃΔ[690], Sg);
    this.ⵠⲆᐃ[51].id = 51;
    this.ⵠⲆᐃ[50] = dw(60, 60, 0, ᐃΔ[666], 3);
    this.ⵠⲆᐃ[50].id = 50;
    this.ⵠⲆᐃ[109] = dw(60, 60, 0, ᐃΔ[684], 3);
    this.ⵠⲆᐃ[109].id = 109;
    this.ⵠⲆᐃ[124] = dw(60, 60, 0, ᐃΔ[718], 3);
    this.ⵠⲆᐃ[124].id = 124;
    this.ⵠⲆᐃ[125] = dw(60, 60, 0, ᐃΔ[730], 3);
    this.ⵠⲆᐃ[125].id = 125;
    this.ⵠⲆᐃ[126] = dw(60, 60, 0, ᐃΔ[734], Mh);
    this.ⵠⲆᐃ[126].id = 126;
    this.ⵠⲆᐃ[129] = dw(60, 60, 0, ᐃΔ[563], Ft);
    this.ⵠⲆᐃ[129].id = 129;
    this.ⵠⲆᐃ[151] = dw(60, 60, 0, ᐃΔ[758], hd);
    this.ⵠⲆᐃ[151].id = 151;
    this.ⵠⲆᐃ[152] = dw(60, 60, 0, ᐃΔ[762], Rn);
    this.ⵠⲆᐃ[152].id = 152;
    this.ⵠⲆᐃ[153] = dw(60, 60, 0, ᐃΔ[770], Er);
    this.ⵠⲆᐃ[153].id = 153;
    this.ⵠⲆᐃ[154] = dw(60, 60, 0, ᐃΔ[768], 3);
    this.ⵠⲆᐃ[154].id = 154;
    this.ⵠⲆᐃ[155] = dw(60, 60, 0, ᐃΔ[772], wi);
    this.ⵠⲆᐃ[155].id = 155;
    this.ⵠⲆᐃ[157] = dw(60, 60, 0, ᐃΔ[777], 3);
    this.ⵠⲆᐃ[157].id = 157;
    this.ⵠⲆᐃ[156] = dw(60, 60, 0, ᐃΔ[780], Sg);
    this.ⵠⲆᐃ[156].id = 156;
    this.ⵠⲆᐃ[158] = dw(60, 60, 0, ᐃΔ[784], Er);
    this.ⵠⲆᐃ[158].id = 158;
    this.ⵠⲆᐃ[159] = dw(60, 60, 0, ᐃΔ[785], Ql);
    this.ⵠⲆᐃ[159].id = 159;
    this.ⵠⲆᐃ[160] = dw(60, 60, 0, ᐃΔ[791], Jd);
    this.ⵠⲆᐃ[160].id = 160;
    this.ⵠⲆᐃ[161] = dw(60, 60, 0, ᐃΔ[799], 3);
    this.ⵠⲆᐃ[161].id = 161;
    this.ⵠⲆᐃ[42] = dw(60, 60, 0, ᐃΔ[809], 3);
    this.ⵠⲆᐃ[42].id = 42;
    this.ⵠⲆᐃ[43] = dw(60, 60, 0, ᐃΔ[835], Hn);
    this.ⵠⲆᐃ[43].id = 43;
    this.ⵠⲆᐃ[107] = dw(60, 60, 0, ᐃΔ[843], 3);
    this.ⵠⲆᐃ[107].id = 107;
    this.ⵠⲆᐃ[44] = dw(60, 60, 0, ᐃΔ[846], dl);
    this.ⵠⲆᐃ[44].id = 44;
    this.ⵠⲆᐃ[46] = dw(60, 60, 0, ᐃΔ[960], 3);
    this.ⵠⲆᐃ[46].id = 46;
    this.ⵠⲆᐃ[45] = dw(60, 60, 0, ᐃΔ[950], 3);
    this.ⵠⲆᐃ[45].id = 45;
    this.ⵠⲆᐃ[47] = dw(60, 60, 0, ᐃΔ[967], Ql);
    this.ⵠⲆᐃ[47].id = 47;
    this.ⵠⲆᐃ[48] = dw(60, 60, 0, ᐃΔ[982], 3);
    this.ⵠⲆᐃ[48].id = 48;
    this.ⵠⲆᐃ[25] = dw(60, 60, 0, ᐃΔ[402], 3);
    this.ⵠⲆᐃ[25].id = 25;
    this.ⵠⲆᐃ[31] = dw(60, 60, 0, ᐃΔ[876], 3);
    this.ⵠⲆᐃ[31].id = 31;
    this.ⵠⲆᐃ[33] = dw(60, 60, 0, ᐃΔ[900], Mh);
    this.ⵠⲆᐃ[33].id = 33;
    this.ⵠⲆᐃ[162] = dw(60, 60, 0, ᐃΔ[909], 3);
    this.ⵠⲆᐃ[162].id = 162;
    this.ⵠⲆᐃ[128] = dw(60, 60, 0, ᐃΔ[912], Rn);
    this.ⵠⲆᐃ[128].id = 128;
    this.ⵠᐃⵠ[53] = dw(68, 68, 0, ᐃΔ[976], dl);
    this.ⵠᐃⵠ[53].id = 53;
    this.ⲆⵠⲆ[53] = dw(60, 60, 0, ᐃΔ[975], rb);
    this.ⲆⵠⲆ[53].id = 53;
    this.ⵠⲆᐃ[22] = dw(60, 60, 0, ᐃΔ[977], Cs);
    this.ⵠⲆᐃ[22].id = 22;
    this.ⵠᐃⵠ[54] = dw(68, 68, 0, ᐃΔ[979], 3);
    this.ⵠᐃⵠ[54].id = 54;
    this.ⲆⵠⲆ[54] = dw(60, 60, 0, ᐃΔ[978], 3);
    this.ⲆⵠⲆ[54].id = 54;
    this.ⵠⲆᐃ[23] = dw(60, 60, 0, ᐃΔ[980], Cs);
    this.ⵠⲆᐃ[23].id = 23;
    this.ⵠᐃⵠ[56] = dw(68, 68, 0, ᐃΔ[713], 3);
    this.ⵠᐃⵠ[56].id = 56;
    this.ⲆⵠⲆ[56] = dw(60, 60, 0, ᐃΔ[712], Jd);
    this.ⲆⵠⲆ[56].id = 56;
    this.ⵠⲆᐃ[123] = dw(60, 60, 0, ᐃΔ[714], rb);
    this.ⵠⲆᐃ[123].id = 123;
    this.ⵠᐃⵠ[82] = dw(68, 68, 0, ᐃΔ[428], 3);
    this.ⵠᐃⵠ[82].id = 82;
    this.ⲆⵠⲆ[82] = dw(60, 60, 0, ᐃΔ[426], Ou);
    this.ⲆⵠⲆ[82].id = 82;
    this.ⵠⲆᐃ[82] = dw(60, 60, 0, ᐃΔ[427], Ou);
    this.ⵠⲆᐃ[82].id = 82;
    this.ⵠᐃⵠ[235] = dw(68, 68, 0, ᐃΔ[1159], Qn);
    this.ⵠᐃⵠ[235].id = 235;
    this.ⲆⵠⲆ[235] = dw(60, 60, 0, ᐃΔ[1158], 3);
    this.ⲆⵠⲆ[235].id = 235;
    this.ⵠᐃⵠ[238] = dw(68, 68, 0, ᐃΔ[1188], 3);
    this.ⵠᐃⵠ[238].id = 238;
    this.ⲆⵠⲆ[238] = dw(60, 60, 0, ᐃΔ[1187], Lq);
    this.ⲆⵠⲆ[238].id = 238;
    this.ⵠᐃⵠ[236] = dw(68, 68, 0, ᐃΔ[1161], Sg);
    this.ⵠᐃⵠ[236].id = 236;
    this.ⲆⵠⲆ[236] = dw(60, 60, 0, ᐃΔ[1160], Cs);
    this.ⲆⵠⲆ[236].id = 236;
    this.ⵠᐃⵠ[152] = dw(68, 68, 0, ᐃΔ[1197], 3);
    this.ⵠᐃⵠ[152].id = 152;
    this.ⲆⵠⲆ[152] = dw(60, 60, 0, ᐃΔ[1195], 3);
    this.ⲆⵠⲆ[152].id = 152;
    this.ⵠⲆᐃ[116] = dw(60, 60, 0, ᐃΔ[1196], 3);
    this.ⵠⲆᐃ[116].id = 116;
    this.ⵠᐃⵠ[212] = dw(68, 68, 0, ᐃΔ[992], 3);
    this.ⵠᐃⵠ[212].id = 212;
    this.ⲆⵠⲆ[212] = dw(60, 60, 0, ᐃΔ[991], 3);
    this.ⲆⵠⲆ[212].id = 212;
    this.ⵠⲆᐃ[73] = dw(60, 60, 0, ᐃΔ[990], 3);
    this.ⵠⲆᐃ[73].id = 73;
    this.ⵠᐃⵠ[213] = dw(68, 68, 0, ᐃΔ[995], Ft);
    this.ⵠᐃⵠ[213].id = 213;
    this.ⲆⵠⲆ[213] = dw(60, 60, 0, ᐃΔ[994], Jd);
    this.ⲆⵠⲆ[213].id = 213;
    this.ⵠⲆᐃ[74] = dw(60, 60, 0, ᐃΔ[993], Ou);
    this.ⵠⲆᐃ[74].id = 74;
    this.ⵠᐃⵠ[214] = dw(68, 68, 0, ᐃΔ[998], Mh);
    this.ⵠᐃⵠ[214].id = 214;
    this.ⲆⵠⲆ[214] = dw(60, 60, 0, ᐃΔ[997], 3);
    this.ⲆⵠⲆ[214].id = 214;
    this.ⵠⲆᐃ[75] = dw(60, 60, 0, ᐃΔ[996], 3);
    this.ⵠⲆᐃ[75].id = 75;
    this.ⵠᐃⵠ[215] = dw(68, 68, 0, ᐃΔ[1001], 3);
    this.ⵠᐃⵠ[215].id = 215;
    this.ⲆⵠⲆ[215] = dw(60, 60, 0, ᐃΔ[1000], Hn);
    this.ⲆⵠⲆ[215].id = 215;
    this.ⵠⲆᐃ[76] = dw(60, 60, 0, ᐃΔ[999], Ou);
    this.ⵠⲆᐃ[76].id = 76;
    this.ⵠᐃⵠ[216] = dw(68, 68, 0, ᐃΔ[1004], Qn);
    this.ⵠᐃⵠ[216].id = 216;
    this.ⲆⵠⲆ[216] = dw(60, 60, 0, ᐃΔ[1003], 3);
    this.ⲆⵠⲆ[216].id = 216;
    this.ⵠⲆᐃ[77] = dw(60, 60, 0, ᐃΔ[1002], wi);
    this.ⵠⲆᐃ[77].id = 77;
    this.ⵠᐃⵠ[220] = dw(68, 68, 0, ᐃΔ[1007], Lq);
    this.ⵠᐃⵠ[220].id = 220;
    this.ⲆⵠⲆ[220] = dw(60, 60, 0, ᐃΔ[1006], 3);
    this.ⲆⵠⲆ[220].id = 220;
    this.ⵠⲆᐃ[78] = dw(60, 60, 0, ᐃΔ[1005], 3);
    this.ⵠⲆᐃ[78].id = 78;
    this.ⵠᐃⵠ[217] = dw(68, 68, 0, ᐃΔ[1016], 3);
    this.ⵠᐃⵠ[217].id = 217;
    this.ⲆⵠⲆ[217] = dw(60, 60, 0, ᐃΔ[1015], 3);
    this.ⲆⵠⲆ[217].id = 217;
    this.ⵠⲆᐃ[60] = dw(60, 60, 0, ᐃΔ[1014], 3);
    this.ⵠⲆᐃ[60].id = 60;
    this.ⵠᐃⵠ[219] = dw(68, 68, 0, ᐃΔ[1013], 3);
    this.ⵠᐃⵠ[219].id = 219;
    this.ⲆⵠⲆ[219] = dw(60, 60, 0, ᐃΔ[1012], 3);
    this.ⲆⵠⲆ[219].id = 219;
    this.ⵠⲆᐃ[72] = dw(60, 60, 0, ᐃΔ[1011], Xu);
    this.ⵠⲆᐃ[72].id = 72;
    this.ⵠᐃⵠ[218] = dw(68, 68, 0, ᐃΔ[1010], 3);
    this.ⵠᐃⵠ[218].id = 218;
    this.ⲆⵠⲆ[218] = dw(60, 60, 0, ᐃΔ[1009], 3);
    this.ⲆⵠⲆ[218].id = 218;
    this.ⵠⲆᐃ[66] = dw(60, 60, 0, ᐃΔ[1008], Lq);
    this.ⵠⲆᐃ[66].id = 66;
    this.ⵠᐃⵠ[153] = dw(68, 68, 0, ᐃΔ[1201], Lq);
    this.ⵠᐃⵠ[153].id = 153;
    this.ⲆⵠⲆ[153] = dw(60, 60, 0, ᐃΔ[1199], 3);
    this.ⲆⵠⲆ[153].id = 153;
    this.ⵠⲆᐃ[117] = dw(60, 60, 0, ᐃΔ[1200], Lq);
    this.ⵠⲆᐃ[117].id = 117;
    this.ⵠᐃⵠ[154] = dw(68, 68, 0, ᐃΔ[1205], Lq);
    this.ⵠᐃⵠ[154].id = 154;
    this.ⲆⵠⲆ[154] = dw(60, 60, 0, ᐃΔ[1203], Z);
    this.ⲆⵠⲆ[154].id = 154;
    this.ⵠⲆᐃ[118] = dw(60, 60, 0, ᐃΔ[1204], 3);
    this.ⵠⲆᐃ[118].id = 118;
    this.ⵠᐃⵠ[155] = dw(68, 68, 0, ᐃΔ[1209], 3);
    this.ⵠᐃⵠ[155].id = 155;
    this.ⲆⵠⲆ[155] = dw(60, 60, 0, ᐃΔ[1207], 3);
    this.ⲆⵠⲆ[155].id = 155;
    this.ⵠⲆᐃ[119] = dw(60, 60, 0, ᐃΔ[1208], 3);
    this.ⵠⲆᐃ[119].id = 119;
    this.ⵠᐃⵠ[156] = dw(68, 68, 0, ᐃΔ[1213], 3);
    this.ⵠᐃⵠ[156].id = 156;
    this.ⲆⵠⲆ[156] = dw(60, 60, 0, ᐃΔ[1211], 3);
    this.ⲆⵠⲆ[156].id = 156;
    this.ⵠⲆᐃ[120] = dw(60, 60, 0, ᐃΔ[1212], 3);
    this.ⵠⲆᐃ[120].id = 120;
    this.ⵠᐃⵠ[157] = dw(68, 68, 0, ᐃΔ[1217], dl);
    this.ⵠᐃⵠ[157].id = 157;
    this.ⲆⵠⲆ[157] = dw(60, 60, 0, ᐃΔ[1215], 3);
    this.ⲆⵠⲆ[157].id = 157;
    this.ⵠⲆᐃ[121] = dw(60, 60, 0, ᐃΔ[1216], wi);
    this.ⵠⲆᐃ[121].id = 121;
    this.ⵠᐃⵠ[203] = dw(68, 68, 0, ᐃΔ[937], Hn);
    this.ⵠᐃⵠ[203].id = 203;
    this.ⲆⵠⲆ[203] = dw(60, 60, 0, ᐃΔ[936], 3);
    this.ⲆⵠⲆ[203].id = 203;
    this.ⲆⵠⲆ[203].info.ⵠⵠ[2] = this.ⲆⵠⲆ[203].info.ⵠⵠ[xq];
    this.ⵠᐃⵠ[150] = dw(68, 68, 0, ᐃΔ[524], 3);
    this.ⵠᐃⵠ[150].id = 150;
    this.ⲆⵠⲆ[150] = dw(60, 60, 0, ᐃΔ[523], Jd);
    this.ⲆⵠⲆ[150].id = 150;
    this.ⲆⵠⲆ[150].info.ⵠⵠ[2] = this.ⲆⵠⲆ[150].info.ⵠⵠ[0];
    this.ⵠᐃⵠ[202] = dw(68, 68, 0, ᐃΔ[939], Ql);
    this.ⵠᐃⵠ[202].id = 202;
    this.ⲆⵠⲆ[202] = dw(60, 60, 0, ᐃΔ[938], 3);
    this.ⲆⵠⲆ[202].id = 202;
    this.ⲆⵠⲆ[202].info.ⵠⵠ[Ht] = this.ⲆⵠⲆ[202].info.ⵠⵠ[xq];
    this.ⵠᐃⵠ[19] = dw(68, 68, 0, ᐃΔ[934], 3);
    this.ⵠᐃⵠ[19].id = 19;
    this.ⲆⵠⲆ[19] = dw(60, 60, 0, ᐃΔ[932], 3);
    this.ⲆⵠⲆ[19].id = 19;
    this.ⵠⲆᐃ[39] = dw(60, 60, 0, ᐃΔ[933], 3);
    this.ⵠⲆᐃ[39].id = 39;
    this.ⵠᐃⵠ[20] = dw(68, 68, 0, ᐃΔ[923], Xu);
    this.ⵠᐃⵠ[20].id = 20;
    this.ⲆⵠⲆ[20] = dw(60, 60, 0, ᐃΔ[921], 3);
    this.ⲆⵠⲆ[20].id = 20;
    this.ⵠⲆᐃ[95] = dw(60, 60, 0, ᐃΔ[922], Ou);
    this.ⵠⲆᐃ[95].id = 95;
    this.ⵠᐃⵠ[21] = dw(68, 68, 0, ᐃΔ[927], 3);
    this.ⵠᐃⵠ[21].id = 21;
    this.ⲆⵠⲆ[21] = dw(60, 60, 0, ᐃΔ[925], 3);
    this.ⲆⵠⲆ[21].id = 21;
    this.ⵠⲆᐃ[96] = dw(60, 60, 0, ᐃΔ[926], 3);
    this.ⵠⲆᐃ[96].id = 96;
    this.ⵠᐃⵠ[22] = dw(68, 68, 0, ᐃΔ[931], Er);
    this.ⵠᐃⵠ[22].id = 22;
    this.ⲆⵠⲆ[22] = dw(60, 60, 0, ᐃΔ[929], 3);
    this.ⲆⵠⲆ[22].id = 22;
    this.ⵠⲆᐃ[97] = dw(60, 60, 0, ᐃΔ[930], 3);
    this.ⵠⲆᐃ[97].id = 97;
    this.ⵠᐃⵠ[60] = dw(68, 68, 0, ᐃΔ[736], wi);
    this.ⵠᐃⵠ[60].id = 60;
    this.ⲆⵠⲆ[60] = dw(60, 60, 0, ᐃΔ[735], Er);
    this.ⲆⵠⲆ[60].id = 60;
    this.ⵠⲆᐃ[127] = dw(60, 60, 0, ᐃΔ[737], 3);
    this.ⵠⲆᐃ[127].id = 127;
    this.ⵠᐃⵠ[90] = dw(68, 68, 0, ᐃΔ[739], 3);
    this.ⵠᐃⵠ[90].id = 90;
    this.ⲆⵠⲆ[90] = dw(60, 60, 0, ᐃΔ[738], 3);
    this.ⲆⵠⲆ[90].id = 90;
    this.ⵠⲆᐃ[173] = dw(60, 60, 0, ᐃΔ[740], 3);
    this.ⵠⲆᐃ[173].id = 173;
    this.ⵠᐃⵠ[92] = dw(68, 68, 0, ᐃΔ[745], 3);
    this.ⵠᐃⵠ[92].id = 92;
    this.ⲆⵠⲆ[92] = dw(60, 60, 0, ᐃΔ[744], 3);
    this.ⲆⵠⲆ[92].id = 92;
    this.ⵠⲆᐃ[174] = dw(60, 60, 0, ᐃΔ[746], wi);
    this.ⵠⲆᐃ[174].id = 174;
    this.ⵠᐃⵠ[93] = dw(68, 68, 0, ᐃΔ[748], Mh);
    this.ⵠᐃⵠ[93].id = 93;
    this.ⲆⵠⲆ[93] = dw(60, 60, 0, ᐃΔ[747], 3);
    this.ⲆⵠⲆ[93].id = 93;
    this.ⵠⲆᐃ[175] = dw(60, 60, 0, ᐃΔ[749], 3);
    this.ⵠⲆᐃ[175].id = 175;
    this.ⵠᐃⵠ[91] = dw(68, 68, 0, ᐃΔ[742], 3);
    this.ⵠᐃⵠ[91].id = 91;
    this.ⲆⵠⲆ[91] = dw(60, 60, 0, ᐃΔ[741], Qn);
    this.ⲆⵠⲆ[91].id = 91;
    this.ⵠⲆᐃ[176] = dw(60, 60, 0, ᐃΔ[743], Sg);
    this.ⵠⲆᐃ[176].id = 176;
    this.ⵠᐃⵠ[100] = dw(68, 68, 0, ᐃΔ[1165], Rn);
    this.ⵠᐃⵠ[100].id = 100;
    this.ⲆⵠⲆ[100] = dw(60, 60, 0, ᐃΔ[1164], Er);
    this.ⲆⵠⲆ[100].id = 100;
    this.ⵠⲆᐃ[ts.ⵠΔᐃⵠⲆ] = dw(60, 60, 0, ᐃΔ[rs.ⵠΔⲆᐃⵠⵠᐃⵠⲆ], 3);
    this.ⵠⲆᐃ[ts.ⵠΔᐃⵠⲆ].id = ts.ⵠΔᐃⵠⲆ;
    this.ⵠᐃⵠ[34] = dw(68, 68, 0, ᐃΔ[945], 3);
    this.ⵠᐃⵠ[34].id = 34;
    this.ⲆⵠⲆ[34] = dw(60, 60, 0, ᐃΔ[943], Mh);
    this.ⲆⵠⲆ[34].id = 34;
    this.ⵠⲆᐃ[30] = dw(60, 60, 0, ᐃΔ[944], iu);
    this.ⵠⲆᐃ[30].id = 30;
    this.ⵠᐃⵠ[44] = dw(68, 68, 0, ᐃΔ[948], Ft);
    this.ⵠᐃⵠ[44].id = 44;
    this.ⲆⵠⲆ[44] = dw(60, 60, 0, ᐃΔ[946], 3);
    this.ⲆⵠⲆ[44].id = 44;
    this.ⵠⲆᐃ[92] = dw(60, 60, 0, ᐃΔ[947], Er);
    this.ⵠⲆᐃ[92].id = 92;
    this.ⵠᐃⵠ[17] = dw(68, 68, 0, ᐃΔ[878], 3);
    this.ⵠᐃⵠ[17].id = 17;
    this.ⲆⵠⲆ[17] = dw(60, 60, 0, ᐃΔ[877], Ou);
    this.ⲆⵠⲆ[17].id = 17;
    this.ⵠⲆᐃ[32] = dw(60, 60, 0, ᐃΔ[879], 3);
    this.ⵠⲆᐃ[32].id = 32;
    this.ⵠᐃⵠ[63] = dw(68, 68, 0, ᐃΔ[568], Qn);
    this.ⵠᐃⵠ[63].id = 63;
    this.ⲆⵠⲆ[63] = dw(60, 60, 0, ᐃΔ[566], wi);
    this.ⲆⵠⲆ[63].id = 63;
    this.ⵠⲆᐃ[130] = dw(60, 60, 0, ᐃΔ[567], 3);
    this.ⵠⲆᐃ[130].id = 130;
    this.ⵠᐃⵠ[187] = dw(68, 68, 0, ᐃΔ[591], 3);
    this.ⵠᐃⵠ[187].id = 187;
    this.ⲆⵠⲆ[187] = dw(60, 60, 0, ᐃΔ[253], 3);
    this.ⲆⵠⲆ[187].id = 187;
    this.ⵠᐃⵠ[us.ᐃⲆᐃⵠⵠᐃᐃ] = dw(68, 68, 0, ᐃΔ[rs.ᐃᐃᐃᐃⵠΔⲆⵠΔ], Qn);
    this.ⵠᐃⵠ[us.ᐃⲆᐃⵠⵠᐃᐃ].id = us.ᐃⲆᐃⵠⵠᐃᐃ;
    this.ⲆⵠⲆ[us.ᐃⲆᐃⵠⵠᐃᐃ] = dw(60, 60, 0, ᐃΔ[rs.ᐃⵠΔⵠΔⲆⵠΔⲆ], dl);
    this.ⲆⵠⲆ[us.ᐃⲆᐃⵠⵠᐃᐃ].id = us.ᐃⲆᐃⵠⵠᐃᐃ;
    this.ⵠᐃⵠ[us.ΔⲆΔⵠⵠΔΔ] = dw(68, 68, 0, ᐃΔ[rs.ⵠⲆΔΔⲆⲆⵠⲆⵠ], wi);
    this.ⵠᐃⵠ[us.ΔⲆΔⵠⵠΔΔ].id = us.ΔⲆΔⵠⵠΔΔ;
    this.ⲆⵠⲆ[us.ΔⲆΔⵠⵠΔΔ] = dw(60, 60, 0, ᐃΔ[rs.ⲆⵠᐃⲆᐃⵠΔⵠⵠ], 3);
    this.ⲆⵠⲆ[us.ΔⲆΔⵠⵠΔΔ].id = us.ΔⲆΔⵠⵠΔΔ;
    this.ⵠᐃⵠ[us.ΔᐃⲆΔΔᐃⲆ] = dw(68, 68, 0, ᐃΔ[rs.ᐃⲆⲆⲆⵠⲆΔᐃⵠ], 3);
    this.ⵠᐃⵠ[us.ΔᐃⲆΔΔᐃⲆ].id = us.ΔᐃⲆΔΔᐃⲆ;
    this.ⲆⵠⲆ[us.ΔᐃⲆΔΔᐃⲆ] = dw(60, 60, 0, ᐃΔ[rs.ⵠΔⵠᐃⲆⲆⲆΔⲆ], 3);
    this.ⲆⵠⲆ[us.ΔᐃⲆΔΔᐃⲆ].id = us.ΔᐃⲆΔΔᐃⲆ;
    this.ⵠᐃⵠ[us.ⲆΔΔΔⲆᐃᐃ] = dw(68, 68, 0, ᐃΔ[rs.ᐃΔΔᐃᐃⵠⵠⲆΔ], 3);
    this.ⵠᐃⵠ[us.ⲆΔΔΔⲆᐃᐃ].id = us.ⲆΔΔΔⲆᐃᐃ;
    this.ⲆⵠⲆ[us.ⲆΔΔΔⲆᐃᐃ] = dw(60, 60, 0, ᐃΔ[rs.ᐃΔⲆΔᐃⲆⵠⲆⲆ], 3);
    this.ⲆⵠⲆ[us.ⲆΔΔΔⲆᐃᐃ].id = us.ⲆΔΔΔⲆᐃᐃ;
    this.ⵠᐃⵠ[us.ⵠⲆⵠⵠΔⵠᐃ] = dw(68, 68, 0, ᐃΔ[rs.ⵠΔΔᐃⲆⵠⵠⵠⲆ], Hn);
    this.ⵠᐃⵠ[us.ⵠⲆⵠⵠΔⵠᐃ].id = us.ⵠⲆⵠⵠΔⵠᐃ;
    this.ⲆⵠⲆ[us.ⵠⲆⵠⵠΔⵠᐃ] = dw(60, 60, 0, ᐃΔ[rs.ⵠⵠΔᐃⲆΔᐃⲆᐃ], Sg);
    this.ⲆⵠⲆ[us.ⵠⲆⵠⵠΔⵠᐃ].id = us.ⵠⲆⵠⵠΔⵠᐃ;
    this.ⲆⲆⲆⵠΔⲆⲆ = function () {
      for (var a = dx.Ⲇⵠᐃⵠ.ⵠⵠⵠⵠⲆ, b = 10, c = Gh, d = tj; d < a.length; d++) {
        if (Ih < d && !(d % Og)) {
          b += a[0].info.width + iq;
          c = eb;
        }
        a[d].info.translate.x = b;
        a[d].info.translate.y = c;
        c += Vq + a[d].info.height;
      }
    };
    this.Ⲇᐃⵠᐃⵠⵠⵠ = function () {
      var a = Math.floor(Math.floor((Ft + dx.Ⲇⵠᐃⵠ.ⵠⵠⵠⵠⲆ.length) / 4) * (10 + this.ⵠᐃⵠ[Qr].info.ⵠⵠ[0].width) + 35);
      for (var b = 0; this.ⵠᐃⵠ.length > b; b++) {
        if (this.ⵠᐃⵠ[b]) {
          this.ⵠᐃⵠ[b].info.translate.x = a;
          this.ⵠᐃⵠ[b].info.translate.y = 22;
        }
      }
      this.ᐃⲆⲆᐃⲆᐃΔ.info.translate.x = a + A;
      this.ᐃⲆⲆᐃⲆᐃΔ.info.translate.y = 22 + ᐃΔ[339].height;
      this.ⲆⵠⵠⵠᐃⵠΔ.info.translate.x = a + Ch;
      this.ⲆⵠⵠⵠᐃⵠΔ.info.translate.y = 30;
      this.ΔᐃᐃⲆⵠΔΔ.info.translate.x = a + 17;
      this.ΔᐃᐃⲆⵠΔΔ.info.translate.y = 22 + ᐃΔ[339].height;
    };
    this.ΔⵠΔⲆᐃᐃΔⵠⲆ = function () {
      var a = Math.floor((Do - ᐃΔ[556][Fj].width) / qo);
      for (var b = 0; b < this.ⵠᐃⲆⵠΔ.length; b++) {
        this.ⵠᐃⲆⵠΔ[b].button.info.translate.x = a;
        this.ⵠᐃⲆⵠΔ[b].button.info.translate.y = -13;
      }
    };
    this.ⲆⲆⲆΔⲆⵠᐃ = function () {
      var a = 12 + Math.floor((uj + this.ΔᐃⲆᐃⲆⲆⵠ.info.ⵠⵠ[0].width) * Math.floor((3 + dx.Ⲇⵠᐃⵠ.ⵠⵠⵠⵠⲆ.length) / hr) + 35);
      this.ΔᐃⲆᐃⲆⲆⵠ.info.translate.x = a;
      this.ΔᐃⲆᐃⲆⲆⵠ.info.translate.y = 33;
      this.ⵠΔᐃᐃΔⲆⲆ.info.translate.x = this.ΔᐃⲆᐃⲆⲆⵠ.info.translate.x;
      this.ⵠΔᐃᐃΔⲆⲆ.info.translate.y = 137;
      this.ⲆⲆΔⵠᐃⲆᐃ.info.translate.x = this.ΔᐃⲆᐃⲆⲆⵠ.info.translate.x;
      this.ⲆⲆΔⵠᐃⲆᐃ.info.translate.y = 240;
    };
    this.ⲆᐃⲆⲆⵠᐃⵠ = function () {
      var a = 12 + Math.floor((Lc + this.ⵠΔⲆⲆⵠⵠⲆ.info.ⵠⵠ[yj].width) * Math.floor((rb + dx.Ⲇⵠᐃⵠ.ⵠⵠⵠⵠⲆ.length) / 4) + 35);
      this.ⵠΔⲆⲆⵠⵠⲆ.info.translate.x = a;
      this.ⵠΔⲆⲆⵠⵠⲆ.info.translate.y = 36;
      a += 83;
      this.ᐃⲆⲆⲆⵠΔᐃ.info.translate.x = a;
      this.ᐃⲆⲆⲆⵠΔᐃ.info.translate.y = 36;
      this.ΔΔΔᐃΔⲆⵠ.info.translate.x = a;
      this.ΔΔΔᐃΔⲆⵠ.info.translate.y = 36;
      this.ΔⵠΔⵠⵠΔⵠ.info.translate.x = a;
      this.ΔⵠΔⵠⵠΔⵠ.info.translate.y = 36;
      this.ᐃⲆⵠᐃᐃᐃΔ.info.translate.x = a;
      this.ᐃⲆⵠᐃᐃᐃΔ.info.translate.y = 36;
      this.ⵠᐃᐃⲆΔΔᐃ.info.translate.x = a;
      this.ⵠᐃᐃⲆΔΔᐃ.info.translate.y = 36;
    };
    this.ᐃⵠΔᐃⲆⲆᐃ = function () {
      var a = Gu + Math.floor(Math.floor((3 + dx.Ⲇⵠᐃⵠ.ⵠⵠⵠⵠⲆ.length) / oe) * (Li + this.ᐃⲆⲆᐃᐃᐃᐃ.info.ⵠⵠ[Gg].width) + 35);
      this.ᐃⲆⲆᐃᐃᐃᐃ.info.translate.x = a;
      this.ᐃⲆⲆᐃᐃᐃᐃ.info.translate.y = 36;
      a += 83;
      this.ⲆΔⲆᐃⲆⵠⵠ.info.translate.x = a;
      this.ⲆΔⲆᐃⲆⵠⵠ.info.translate.y = 36;
    };
    this.ᐃᐃᐃΔΔᐃΔ = function () {
      var a = Math.floor((vq + this.ᐃⵠᐃΔΔⲆⲆ.info.ⵠⵠ[Rl].width) * Math.floor((3 + dx.Ⲇⵠᐃⵠ.ⵠⵠⵠⵠⲆ.length) / hr) + 35);
      this.ᐃⵠᐃΔΔⲆⲆ.info.translate.x = a;
      this.ᐃⵠᐃΔΔⲆⲆ.info.translate.y = 22;
    };
    this.ᐃΔΔⵠⲆΔᐃ = function () {
      var a = dx.ΔᐃⲆⵠ.ⵠΔΔᐃΔ;
      if (a.length > Md) {
        var b = Math.floor((Do - (a[sb].info.width + Ks) * dx.ΔᐃⲆⵠ.max) / 2);
      }
      for (var c = 0; a.length > c; c++) {
        a[c].info.translate.x = b + c * (a[c].info.width + Ut);
        a[c].info.translate.y = lq - a[c].info.width - iq;
        this.ⲆⲆⵠⵠⵠ[a[c].id].info.translate.x = a[c].info.translate.x + Nq;
        this.ⲆⲆⵠⵠⵠ[a[c].id].info.translate.y = a[c].info.translate.y - this.ⲆⲆⵠⵠⵠ[a[c].id].info.ⵠⵠ[qu].height - 6;
      }
    };
    var n;
    var o = 0;
    function p() {
      f.ⲆᐃⲆ();
      if (++o == 30) {
        f.ⲆⲆⵠⲆⵠᐃᐃ();
        f.ⲆᐃⲆ();
        return;
      }
      bj.setTimeout(p, 33);
    }
    this.ⵠᐃⲆⲆᐃ = function (a) {
      if (dx.ⲆᐃΔⵠᐃ.open) {
        dx.ⲆᐃΔⵠᐃ.ⵠᐃⲆⲆᐃ();
      }
      if (dx.ᐃⵠᐃᐃⵠ.open) {
        dx.ᐃⵠᐃᐃⵠ.ⵠᐃⲆⲆᐃ();
      }
      document.getElementById("team_box").style.display = "none";
      f.ⲆᐃⲆᐃⵠ.style.display = "none";
      f.ⲆᐃⲆᐃⵠ.open = ml;
      f.sign.style.display = "none";
      f.sign.open = Jh;
      document.getElementById("shop_starterkit").style.display = "none";
      document.getElementById("home_craft").style.display = "none";
      document.getElementById("recipe_craft").style.display = "none";
      f.Δᐃᐃᐃ.open = false;
      document.getElementById("option_in_game").style.display = "none";
      f.options.open = gh;
      document.getElementById("sure_delete").style.display = "none";
      f.ⵠΔⲆΔ.open = hg;
      document.getElementById("cancel_sure_delete").style.display = "none";
      f.ΔⲆΔᐃⵠ.open = Tg;
      document.getElementById("chronoquest").style.display = "none";
      f.ⵠΔᐃΔ.open = false;
      n = a;
      f.ΔⵠᐃΔᐃᐃΔ();
      f.ⵠⲆ.style.cursor = f.ᐃΔⵠⵠⲆᐃᐃ;
      gx.ⵠᐃⲆⲆᐃ();
      g = -ig;
      q();
      Bf();
    };
    var g = -Ga;
    function q() {
      f.ⲆᐃⲆ();
      if (++g == 30) {
        f.stop();
        n();
        return;
      }
      bj.setTimeout(q, 33);
    }
    this.ⵠᐃᐃΔⵠ = false;
    this.stop = function () {
      this.ⵠᐃᐃΔⵠ = false;
    };
    this.ᐃⵠⲆⵠΔ = function () {
      ᐃΔᐃᐃ.ⲆΔⲆᐃⲆⲆΔⲆⵠ();
      f.ⵠᐃᐃΔⵠ = true;
      g = -Fb;
      o = 0;
      p();
    };
    this.ⲆᐃⲆ = function () {
      this.ΔⲆⲆⵠ.translate.x = Do - this.ΔⲆⲆⵠ.ⵠⵠ.width - 10;
      this.ΔⲆⲆⵠ.translate.y = 5;
      ff.ᐃⵠⲆⵠⵠ.translate.x = this.ΔⲆⲆⵠ.translate.x - ᐃΔ[725][Md].width - 85;
      ff.ᐃⵠⲆⵠⵠ.translate.y = Hb;
      this.Δᐃᐃᐃ.button.info.translate.x = this.ΔⲆⲆⵠ.translate.x - ᐃΔ[708][Md].width - 10;
      this.Δᐃᐃᐃ.button.info.translate.y = 10;
      this.ⵠΔᐃΔ.button.info.translate.x = this.ΔⲆⲆⵠ.translate.x - ᐃΔ[755][0].width - Sk;
      this.ⵠΔᐃΔ.button.info.translate.y = this.Δᐃᐃᐃ.button.info.translate.y + ᐃΔ[708][Qr].height + lu;
      this.options.button.info.translate.x = this.ΔⲆⲆⵠ.translate.x - ᐃΔ[727][Aa].width - gg;
      this.options.button.info.translate.y = this.ⵠΔᐃΔ.button.info.translate.y + ᐃΔ[727][qb].height + el;
      this.ⲆⲆⵠⲆ.ΔⲆⲆΔΔᐃᐃ.info.translate.x = this.ΔⲆⲆⵠ.translate.x - ᐃΔ[727][Ah].width - zq;
      this.ⲆⲆⵠⲆ.ΔⲆⲆΔΔᐃᐃ.info.translate.y = this.options.button.info.translate.y + ᐃΔ[783][0].height;
      this.ⲆⲆⵠⲆ.ΔⵠΔⵠᐃⲆⲆ.info.translate.x = this.ΔⲆⲆⵠ.translate.x - ᐃΔ[727][0].width - 20;
      this.ⲆⲆⵠⲆ.ΔⵠΔⵠᐃⲆⲆ.info.translate.y = this.options.button.info.translate.y + ᐃΔ[783][0].height;
      this.ⲆᐃⲆᐃⵠ.button.info.translate.x = this.ΔⲆⲆⵠ.translate.x - ᐃΔ[795][bu].width - 20;
      this.ⲆᐃⲆᐃⵠ.button.info.translate.y = this.ⲆⲆⵠⲆ.ΔⲆⲆΔΔᐃᐃ.info.translate.y + ᐃΔ[795][sb].height;
      dx.ᐃⵠⵠΔᐃ.translate.x = this.ΔⲆⲆⵠ.translate.x - 63 - 85;
      dx.ᐃⵠⵠΔᐃ.translate.y = og;
      dx.ⵠⵠΔⲆⲆ.translate.x = this.ΔⲆⲆⵠ.translate.x - ᐃΔ[517].width - 85;
      dx.ⵠⵠΔⲆⲆ.translate.y = dx.ᐃⵠⵠΔᐃ.translate.y + Gh + ᐃΔ[546].height;
      this.ⵠᐃⲆΔᐃ.translate.y = lq - 3 - 193;
      this.ⵠᐃⲆΔᐃ.translate.x = Do - 3 - 193;
      this.ᐃⲆᐃΔ.translate.x = 5;
      this.ᐃⲆᐃΔ.translate.y = lq - this.ᐃⲆᐃΔ.ⵠⵠ.height - Ij;
      this.ΔⲆΔΔᐃ.button.info.translate.x = mq - 91 / Gl;
      this.ΔⲆΔΔᐃ.button.info.translate.y = 50;
      this.ⲆⲆⲆⵠΔⲆⲆ();
      this.ᐃΔΔⵠⲆΔᐃ();
      this.Ⲇᐃⵠᐃⵠⵠⵠ();
      this.ᐃᐃᐃΔΔᐃΔ();
      this.ᐃⵠΔᐃⲆⲆᐃ();
      this.ⲆᐃⲆⲆⵠᐃⵠ();
      this.ⲆⲆⲆΔⲆⵠᐃ();
      this.ΔⵠΔⲆᐃᐃΔⵠⲆ();
      this.sign.ⵠⵠⵠⲆΔΔⲆ();
      Sm();
      dx.ⲆᐃΔⵠᐃ.ⲆᐃⲆ();
      dx.ᐃⵠᐃᐃⵠ.ⲆᐃⲆ();
      this.ⵠᐃᐃⵠⲆⵠⵠⲆⲆ.ⲆᐃⲆ();
      this.Δᐃᐃᐃ.ΔᐃᐃⲆⲆΔⵠ.ⲆᐃⲆ();
      this.Δᐃᐃᐃ.list.ⲆᐃⲆ();
      this.ⵠΔⲆΔ.ⲆᐃⲆ();
      this.ΔⲆΔᐃⵠ.ⲆᐃⲆ();
      this.ⵠΔᐃΔ.ⲆᐃⲆ();
      this.ΔⲆΔΔᐃ.ⲆᐃⲆ();
      this.options.ⲆᐃⲆ();
      this.ⲆᐃⲆᐃⵠ.ⲆᐃⲆ();
      this.sign.ⲆᐃⲆ();
      var a = xq;
      if (o != 30) {
        a = 1500 / (o + Fb) - 50;
      }
      if (g != -1) {
        a = -(1500 / (30 - g + Co) - 48);
      }
      this.ΔⲆΔΔᐃ.button.info.translate.y -= a > 0 ? a : -a;
      this.ΔⲆⲆⵠ.translate.y -= a > qu ? a : -a;
      dx.ᐃⵠⵠΔᐃ.translate.y -= a > 0 ? a : -a;
      dx.ⵠⵠΔⲆⲆ.translate.y -= a > Fj ? a : -a;
      this.Δᐃᐃᐃ.button.info.translate.y -= a > 0 ? a : -a;
      this.ⵠΔᐃΔ.button.info.translate.y -= a > 0 ? a : -a;
      this.options.button.info.translate.y -= a > 0 ? a : -a;
      this.ⲆᐃⲆᐃⵠ.button.info.translate.y -= Aa < a ? a : -a;
      this.ⲆⲆⵠⲆ.ΔⲆⲆΔΔᐃᐃ.info.translate.y -= a > 0 ? a : -a;
      this.ⲆⲆⵠⲆ.ΔⵠΔⵠᐃⲆⲆ.info.translate.y -= a > 0 ? a : -a;
      ff.ᐃⵠⲆⵠⵠ.translate.y -= a > tj ? a : -a;
      this.ᐃⲆᐃΔ.translate.y -= Gk > a ? a : -a;
      this.ⵠᐃⲆΔᐃ.translate.y -= yj > a ? a : -a;
    };
    this.ⵠΔⲆΔⲆᐃⵠΔᐃ = function () {
      if (!dx.ᐃⵠⵠΔⲆ.enabled && !!this.ΔᐃⲆᐃΔⲆⲆ && !dx.ⵠⵠᐃⲆΔ) {
        jm();
      }
      Zm();
      (function () {
        var a = ff.Δᐃⵠ[rw.ⵠΔΔⵠ];
        if (ff.mode === ow.ⲆⵠⵠΔⵠ || ow.ⵠⲆⲆⵠΔ === ff.mode || ff.mode === ow.ΔΔᐃᐃᐃ || ff.mode === ow.ᐃⵠΔΔⲆ || ow.ⵠᐃᐃΔⵠᐃᐃ === ff.mode || ow.ᐃΔⵠᐃᐃ === ff.mode) {
          for (var b = yj; b < a.length; b++) {
            a[b].ⲆᐃΔᐃΔᐃΔ();
          }
        } else if (ow.ⵠᐃⵠΔⲆᐃⵠ === ff.mode) {
          for (b = sb; b < a.length; b++) {
            if (dx.ⲆᐃⵠᐃΔⵠᐃ || dx.ⵠⵠΔⲆⲆ.enabled || a[b].ᐃᐃⲆⵠ.ⲆΔᐃᐃⲆ !== "spectator") {
              a[b].ⲆᐃΔᐃΔᐃΔ();
            }
          }
        }
      })();
      Na.ⲆⲆⲆⵠᐃⵠⲆ();
      if (this.ΔᐃⲆᐃΔⲆⲆ) {
        Im();
        if (this.ᐃⲆⲆΔⲆᐃⵠ === 1) {
          this.Δᐃᐃᐃ.button.ⵠⲆⵠΔ(d);
        }
        if (ff.mode !== ow.ΔΔᐃᐃᐃ && ff.mode !== ow.ᐃⵠΔΔⲆ && ff.mode !== ow.ⵠᐃᐃΔⵠᐃᐃ && this.ΔᐃᐃⵠⲆⵠⵠ === 1) {
          this.ⵠΔᐃΔ.button.ⵠⲆⵠΔ(d);
        }
        this.options.button.ⵠⲆⵠΔ(d);
        if (this.ᐃᐃⵠⲆΔᐃⵠ === 1) {
          this.ⲆᐃⲆᐃⵠ.button.ⵠⲆⵠΔ(d);
        }
        if (gx.ᐃⵠⲆⵠΔ) {
          this.ⲆⲆⵠⲆ.ΔⲆⲆΔΔᐃᐃ.ⵠⲆⵠΔ(d);
        } else {
          this.ⲆⲆⵠⲆ.ΔⵠΔⵠᐃⲆⲆ.ⵠⲆⵠΔ(d);
        }
        Ym();
        tp();
        this.ᐃⲆᐃΔ.ⵠⲆⵠΔ();
        Gm();
        $m();
        np();
        Nm();
        Vm();
        Bm();
        xm();
        (function () {
          if (!dx.ⲆⵠⵠΔ.open && !dx.ⵠⲆΔⵠⵠ.open && !dx.ⲆⵠΔⵠ.open && !dx.ΔΔⵠⲆ.open && !dx.ⵠΔⲆⵠ.open) {
            dx.ΔⲆᐃΔⲆ.open = Tg;
            var a = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ];
            var b = ow.ΔᐃᐃⵠᐃⵠⲆᐃⲆ;
            if (a) {
              for (var c = sb; c < ff.Δᐃⵠ[rw.ΔⲆⲆΔⲆ].length; c++) {
                var d = ff.Δᐃⵠ[rw.ΔⲆⲆΔⲆ][c];
                var e = ᐃΔᐃⵠ.ⵠⵠΔᐃ(d, a);
                if (b > e) {
                  b = e;
                  dx.ΔⲆᐃΔⲆ.open = Rq;
                  dx.ΔⲆᐃΔⲆ.ⵠΔⲆᐃ = d.ⵠΔⲆᐃ;
                  dx.ΔⲆᐃΔⲆ.ⲆⵠⲆⵠΔ = d.id;
                }
              }
            }
          }
        })();
        Fm();
        Qm();
        km();
        _m();
        Sm();
        Dm();
      }
      if (dx.ᐃⵠⵠΔⲆ.enabled) {
        Pm();
      }
      Em();
      if (this.ΔᐃⲆᐃΔⲆⲆ && Gt === this.ΔⲆⲆⵠⵠΔᐃ) {
        rp();
      }
      dx.ⵠΔⵠⵠⵠⵠᐃ.ⵠⲆⵠΔ();
      dx.alert.ⵠⲆⵠΔ("#FFF", "#000");
      if (this.ΔᐃⲆᐃΔⲆⲆ) {
        dx.ᐃⵠⵠΔⲆ.ⵠⲆⵠΔ();
        dx.ΔⲆΔΔᐃ.ⵠⲆⵠΔ();
        dx.ΔᐃⲆⵠ.ⵠΔⲆΔⵠΔΔ.ⵠⲆⵠΔ(kf.ΔⲆⵠⲆ.x, kf.ΔⲆⵠⲆ.y);
      }
      Am();
    };
    this.ΔΔΔΔΔΔΔⵠᐃ = function () {
      dx.ⲆΔⲆ.ⲆᐃⲆ();
      dx.ᐃⲆᐃΔ.ⲆᐃⲆ();
      if (!dx.reconnect.enabled && dx.ΔᐃΔΔⵠ) {
        dx.control.ⲆᐃⲆ();
        dx.ᐃⵠⵠΔᐃ.ⲆᐃⲆ();
      }
      ff.ⲆᐃⲆ();
      this.ⵠΔᐃΔ.ΔᐃⲆⵠᐃⵠⲆⵠⲆ();
    };
    this.ⲆⲆᐃᐃⵠᐃⵠᐃΔ = function () {
      Cv();
    };
    this.ⵠⵠᐃΔⵠΔⵠΔⵠ = function () {
      ᐃΔᐃᐃ.ⵠᐃᐃⵠⵠΔⲆᐃᐃ();
      ᐃΔᐃᐃ.ⲆΔᐃⲆⲆⵠⵠⵠᐃ();
      ᐃΔᐃᐃ.ⲆᐃΔⲆΔΔΔⵠⲆ();
      ᐃΔᐃᐃ.ᐃⲆᐃᐃΔⲆⲆᐃⵠ();
    };
    this.ⵠⲆⵠΔ = function () {
      if (!dx.reconnect.enabled && dx.ΔᐃΔΔⵠ) {
        this.ⵠⵠᐃΔⵠΔⵠΔⵠ();
      }
      gx.ⲆⵠⵠⲆⲆᐃⲆⲆⲆ();
      this.ΔΔΔΔΔΔΔⵠᐃ();
      if (pf.ⵠⵠⲆᐃᐃⲆⵠ !== 1) {
        this.ⲆⲆᐃᐃⵠᐃⵠᐃΔ();
        this.ⵠΔⲆΔⲆᐃⵠΔᐃ();
      } else {
        var a = Δᐃ.ⲆⵠΔΔᐃᐃⵠ;
        Mm(d, a, mq - a.width / 4, Qo - a.height / mg, a.width / Ht, a.height / 2);
      }
    };
    this.ᐃΔⵠⵠⲆᐃⵠ = function (a) {
      if (dx.ⲆᐃΔⵠᐃ.open && a.keyCode === 27) {
        dx.ⲆᐃΔⵠᐃ.ⵠᐃⲆⲆᐃ();
      } else if (dx.ᐃⵠᐃᐃⵠ.open && a.keyCode === 27) {
        dx.ᐃⵠᐃᐃⵠ.ⵠᐃⲆⲆᐃ();
      } else if (dx.ⲆᐃΔⵠᐃ.open || dx.ᐃⵠᐃᐃⵠ.open || a.keyCode != 79 || g != -1) {
        if (a.keyCode == 13 && g == -1) {
          if (dx.ᐃⵠᐃᐃⵠ.open) {
            dx.ᐃⵠᐃᐃⵠ.ⲆⲆⲆᐃΔⵠᐃ();
          } else {
            dx.ⲆᐃΔⵠᐃ.ᐃⵠⲆⵠΔ();
          }
        } else if (!dx.ⲆᐃΔⵠᐃ.open && !dx.ᐃⵠᐃᐃⵠ.open) {
          if (a.keyCode === 82) {
            dx.ᐃⵠⵠΔᐃ.ⵠΔⲆⵠᐃⲆΔ();
          } else if (a.keyCode !== 80 || ff.mode !== ow.ⵠᐃⵠΔⲆᐃⵠ || dx.ⲆᐃⵠᐃΔⵠᐃ) {
            if (a.keyCode >= 49 && a.keyCode <= 57) {
              if (Aa > dx.Ⲇⵠᐃⵠ.id) {
                var b = a.keyCode - 49;
                var c = dx.ΔᐃⲆⵠ.ⵠΔΔᐃΔ[b];
                if (c) {
                  ᐃΔᐃᐃ.ᐃⲆΔᐃᐃ(c.id, b);
                }
              }
            } else if (a.keyCode == 89) {
              dx.ᐃⲆⵠⵠⲆⲆⵠ = !dx.ᐃⲆⵠⵠⲆⲆⵠ;
            } else if (a.keyCode == 71) {
              dx.Ⲇⵠᐃⵠ.ΔⲆΔΔΔΔⵠⲆⵠ();
            }
          } else {
            dx.ⵠⵠΔⲆⲆ.ⵠΔⲆⵠᐃⲆΔ();
          }
        }
      } else {
        dx.ᐃⵠᐃᐃⵠ.ΔᐃⲆⲆᐃΔⵠΔⲆ();
      }
      Af.up(a);
    };
    this.ΔⵠⵠᐃᐃᐃⲆ = function (a) {
      Af.down(a);
      if (wo == a.keyCode && !dx.ⲆᐃΔⵠᐃ.open && !dx.ᐃⵠᐃᐃⵠ.open) {
        a.preventDefault();
      }
    };
    this.ΔᐃᐃᐃΔⲆⵠ = function (b) {
      kf.ΔⲆⵠⲆ = bw(f.ⵠⲆ, b);
      var c = Jh;
      if (dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ < 0) {
        f.ⵠᐃⲆΔᐃ.focus(kf.ΔⲆⵠⲆ);
      }
      var d = dx.ⲆⵠⵠΔ;
      if (dx.Ⲇⵠᐃⵠ.id < gl && d.id >= 0 && (!dx.ⲆⵠⵠΔ.lock || dx.ⲆⵠⵠΔ.ⵠΔⲆᐃ === dx.id)) {
        c |= f.ⵠᐃⵠ[dx.ⲆⵠⵠΔ.id].ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Yv);
      }
      var e = dx.ⲆⵠΔⵠ;
      if (e.open && An < e.ⵠΔᐃⵠΔ) {
        c |= f.ⲆΔⲆᐃⲆⵠⵠ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Yv);
      }
      var j = dx.ⵠΔⲆⵠ;
      if (j.open && j.ⵠⲆΔᐃΔΔᐃ > 0) {
        c |= f.ᐃⲆⲆⲆⵠΔᐃ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Yv);
        c |= f.ΔΔΔᐃΔⲆⵠ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Yv);
        c |= f.ΔⵠΔⵠⵠΔⵠ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Yv);
        c |= f.ᐃⲆⵠᐃᐃᐃΔ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Yv);
        c |= f.ⵠᐃᐃⲆΔΔᐃ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Yv);
      }
      var k = dx.ΔΔⵠⲆ;
      if (k.open && Fj < k.ΔⲆⲆΔΔⵠᐃ) {
        c |= f.ⲆⲆΔⵠᐃⲆᐃ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Yv);
      }
      if (dx.sign.open) {
        c |= f.sign.button.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Yv);
      }
      if (!dx.ⲆⵠⵠΔ.lock) {
        if (dx.ⲆⵠⵠΔ.ⲆΔᐃᐃⵠⲆᐃ) {
          c |= f.ΔᐃᐃⲆⵠΔΔ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Yv);
        }
      }
      if (dx.ⲆⵠⵠΔ.ΔⲆᐃΔⵠⲆⲆ) {
        c |= f.ᐃⲆⲆᐃⲆᐃΔ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Yv);
      }
      if (dx.Ⲇⵠᐃⵠ.id < 0 && !f.Δᐃᐃᐃ.open && !f.ⵠΔⲆΔ.open && !f.ΔⲆΔᐃⵠ.open && !f.ⵠΔᐃΔ.open && !f.options.open && !f.ⲆᐃⲆᐃⵠ.open) {
        for (var a = dx.ΔᐃⲆⵠ.ⵠΔΔᐃΔ, m = 0; a.length > m; m++) {
          var n = a[m].ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Yv);
          c |= n;
          if (n) {
            dx.ΔᐃⲆⵠ.ⵠΔⲆΔⵠΔΔ.start(m, kf.ΔⲆⵠⲆ);
          }
          if (d.open && (d.id < 0 || d.id == a[m].id) || dx.ⵠⲆΔⵠⵠ.open && a[m].id === 109 || dx.ΔⲆᐃΔⲆ.open && a[m].id === 180 || dx.ΔΔⵠⲆ.open && (a[m].id === 109 || a[m].id === 131) || dx.ⲆⵠΔⵠ.open && a[m].id === 134 || dx.ⵠΔⲆⵠ.open && a[m].id === 109) {
            c |= f.ⲆⲆⵠⵠⵠ[a[m].id].ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Yv);
          }
        }
      }
      if (dx.ⵠⲆⵠΔⵠ.open) {
        c |= f.ⵠⲆⵠΔⵠ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Yv);
      }
      if (-ig != f.ΔⵠⲆΔΔ) {
        if (c |= f.ⵠᐃⲆⵠΔ[f.ΔⵠⲆΔΔ].button.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Yv)) {
          var o = rn;
        }
      } else {
        o = ja;
      }
      if (dx.Ⲇⵠᐃⵠ.id < 0 && dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ < 0 && !o && !f.Δᐃᐃᐃ.open && !f.ⵠΔⲆΔ.open && !f.options.open && !f.ΔⲆΔᐃⵠ.open && !f.ⲆᐃⲆᐃⵠ.open && !dx.ⵠⵠᐃⲆΔ) {
        a = dx.Ⲇⵠᐃⵠ.ⵠⵠⵠⵠⲆ;
        m = 0;
        for (; a.length > m; m++) {
          c |= a[m].ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Yv);
        }
      }
      if (Ah > dx.Ⲇⵠᐃⵠ.id && sb > dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ && dx.ΔⲆΔΔᐃ.open && !f.Δᐃᐃᐃ.open && !f.ⵠΔⲆΔ.open && !f.options.open && !f.ΔⲆΔᐃⵠ.open && !f.ⵠΔᐃΔ.open && !f.ⲆᐃⲆᐃⵠ.open) {
        c |= f.ΔⲆΔΔᐃ.button.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Yv);
      }
      if (dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ < 0 && !f.ⵠΔⲆΔ.open && !f.options.open && !f.ΔⲆΔᐃⵠ.open && !f.ⵠΔᐃΔ.open && !f.ⲆᐃⲆᐃⵠ.open) {
        c |= f.Δᐃᐃᐃ.button.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Yv);
      }
      if (dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ < bu && !f.Δᐃᐃᐃ.open && !f.ⵠΔⲆΔ.open && !f.ΔⲆΔᐃⵠ.open && !f.ⵠΔᐃΔ.open && !f.ⲆᐃⲆᐃⵠ.open) {
        c |= f.options.button.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Yv);
      }
      if (xq > dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ && !f.Δᐃᐃᐃ.open && !f.ⵠΔⲆΔ.open && !f.ΔⲆΔᐃⵠ.open && !f.ⵠΔᐃΔ.open && !f.options.open) {
        c |= f.ⲆᐃⲆᐃⵠ.button.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Yv);
      }
      if (dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ < Rl && !f.Δᐃᐃᐃ.open && !f.ⵠΔⲆΔ.open && !f.ΔⲆΔᐃⵠ.open && !f.ⵠΔᐃΔ.open && !f.options.open && !f.ⲆᐃⲆᐃⵠ.open) {
        if (gx.ᐃⵠⲆⵠΔ) {
          c |= f.ⲆⲆⵠⲆ.ΔⲆⲆΔΔᐃᐃ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Yv);
        } else {
          c |= f.ⲆⲆⵠⲆ.ΔⵠΔⵠᐃⲆⲆ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Yv);
        }
      }
      if (dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ < gl && !f.Δᐃᐃᐃ.open && !f.ⲆᐃⲆᐃⵠ.open && !f.ⵠΔⲆΔ.open && !f.options.open && !f.ΔⲆΔᐃⵠ.open && ow.ΔΔᐃᐃᐃ !== ff.mode && ow.ᐃⵠΔΔⲆ !== ff.mode && ff.mode !== ow.ⵠᐃᐃΔⵠᐃᐃ) {
        c |= f.ⵠΔᐃΔ.button.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Yv);
      }
      if (!c && !f.Δᐃᐃᐃ.open && !f.ⵠΔⲆΔ.open && !f.options.open && !f.ΔⲆΔᐃⵠ.open && !f.ⵠΔᐃΔ.open && !f.ⲆᐃⲆᐃⵠ.open && !f.sign.open) {
        if (dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ >= 0) {
          ᐃΔᐃᐃ.ⲆⲆⲆᐃⵠⵠᐃΔᐃ();
        } else if (!o) {
          kf.down();
        }
      }
    };
    this.ⵠᐃⲆⵠⲆⲆΔ = function (b) {
      kf.ΔⲆⵠⲆ = bw(f.ⵠⲆ, b);
      kf.up();
      if (!dx.ΔᐃⲆⵠ.ⵠΔⲆΔⵠΔΔ.release()) {
        var c = dx.ⲆⵠⵠΔ;
        var d = dx.ⵠⲆΔⵠⵠ;
        var e = dx.ΔⲆᐃΔⲆ;
        var i = dx.ⲆⵠΔⵠ;
        var j = dx.ⵠΔⲆⵠ;
        var k = dx.ΔΔⵠⲆ;
        if (dx.control.attack) {
          dx.control.attack = An;
          ᐃΔᐃᐃ.ᐃⲆⵠΔⲆⲆⲆⵠΔ();
        }
        if (f.ΔⵠⲆΔΔ != -1) {
          var m = f.ⵠᐃⲆⵠΔ[f.ΔⵠⲆΔΔ].button.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv);
          var n = document.getElementById("team_box").style;
          if (m && n.display == "inline-block") {
            n.display = "none";
            return;
          }
          if (m) {
            f.ⵠᐃⲆⵠΔ[f.ΔⵠⲆΔΔ].action();
          }
        }
        if (dx.Ⲇⵠᐃⵠ.id < xq && c.id >= 0 && !f.ⵠΔⲆΔ.open) {
          if (!dx.ⲆⵠⵠΔ.lock || dx.ⲆⵠⵠΔ.ⵠΔⲆᐃ === dx.id) {
            if (m = f.ⵠᐃⵠ[dx.ⲆⵠⵠΔ.id].ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv)) {
              ᐃΔᐃᐃ.ⲆⵠⵠΔᐃⵠΔᐃⵠ(c);
            }
          }
        }
        if ((i = dx.ⲆⵠΔⵠ).open && fg < i.ⵠΔᐃⵠΔ && !f.ⵠΔⲆΔ.open) {
          if (m = f.ⲆΔⲆᐃⲆⵠⵠ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv)) {
            ᐃΔᐃᐃ.ΔⲆᐃᐃΔᐃⵠᐃⵠ(i);
          }
        }
        if ((j = dx.ⵠΔⲆⵠ).open && j.ⵠⲆΔᐃΔΔᐃ > 0 && !f.ⵠΔⲆΔ.open) {
          switch (j.type) {
            case rw.ᐃΔΔᐃΔ:
              if (m = f.ᐃⲆⲆⲆⵠΔᐃ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv)) {
                ᐃΔᐃᐃ.ⵠⵠⲆⵠⲆⲆᐃ(j);
              }
              break;
            case rw.ΔΔΔⲆΔ:
              if (m = f.ΔΔΔᐃΔⲆⵠ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv)) {
                ᐃΔᐃᐃ.ⵠⵠⲆⵠⲆⲆᐃ(j);
              }
              break;
            case rw.ⲆᐃⲆᐃΔ:
              if (m = f.ΔⵠΔⵠⵠΔⵠ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv)) {
                ᐃΔᐃᐃ.ⵠⵠⲆⵠⲆⲆᐃ(j);
              }
              break;
            case rw.ⵠⲆΔⵠᐃ:
              if (m = f.ᐃⲆⵠᐃᐃᐃΔ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv)) {
                ᐃΔᐃᐃ.ⵠⵠⲆⵠⲆⲆᐃ(j);
              }
              break;
            case rw.ΔⵠΔⵠⵠ:
              if (m = f.ⵠᐃᐃⲆΔΔᐃ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv)) {
                ᐃΔᐃᐃ.ⵠⵠⲆⵠⲆⲆᐃ(j);
              }
          }
        }
        if ((k = dx.ΔΔⵠⲆ).open && tj < k.ΔⲆⲆΔΔⵠᐃ && !f.ⵠΔⲆΔ.open) {
          if (m = f.ⲆⲆΔⵠᐃⲆᐃ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv)) {
            ᐃΔᐃᐃ.ⲆⲆⵠᐃⲆⵠⲆⵠⵠ(k);
          }
        }
        if (dx.sign.open && !f.ⵠΔⲆΔ.open) {
          if (m = f.sign.button.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv)) {
            f.sign.select();
          }
        }
        if (!dx.ⲆⵠⵠΔ.lock && !f.ⵠΔⲆΔ.open) {
          if (dx.ⲆⵠⵠΔ.ⲆΔᐃᐃⵠⲆᐃ && (m = f.ΔᐃᐃⲆⵠΔΔ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv))) {
            ᐃΔᐃᐃ.ΔᐃⲆΔⵠᐃΔΔⲆ(c);
          }
        }
        if (dx.ⲆⵠⵠΔ.ΔⲆᐃΔⵠⲆⲆ && !f.ⵠΔⲆΔ.open && (m = f.ᐃⲆⲆᐃⲆᐃΔ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv))) {
          ᐃΔᐃᐃ.ⲆΔΔΔⵠΔΔΔⲆ(c);
          if (ga) {
            ga("send", "event", "Game", "lockpick");
          }
        }
        if (dx.ⵠⲆⵠΔⵠ.open) {
          if (m = f.ⵠⲆⵠΔⵠ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv)) {
            ᐃΔᐃᐃ.ⵠⲆⵠΔⵠ();
            if (ga) {
              ga("send", "event", "Game", "resurrection");
            }
          }
        }
        if (dx.Ⲇⵠᐃⵠ.id < 0 && !dx.ᐃⵠⵠΔⲆ.enabled && !f.ⵠΔⲆΔ.open) {
          for (var l = dx.ΔᐃⲆⵠ.ⵠΔΔᐃΔ, o = 0; l.length > o; o++) {
            if (m = l[o].ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv)) {
              if (b.which != 1 || b.shiftKey) {
                if ((b.which == 1 && b.shiftKey || b.which == 3) && dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ < yj) {
                  f.ⵠΔⲆΔ.ⵠⵠΔΔⲆΔⲆ(l[o].id);
                }
              } else {
                ᐃΔᐃᐃ.ᐃⲆΔᐃᐃ(l[o].id, o);
              }
            } else if (c.open && (sb > c.id || l[o].id === c.id)) {
              if ((m = f.ⲆⲆⵠⵠⵠ[l[o].id].ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv)) && dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ < 0) {
                ᐃΔᐃᐃ.ᐃⵠᐃⲆΔᐃⵠΔⵠ(c, l[o].id, b.shiftKey ? 10 : 1);
              }
            } else if (e.open && l[o].id === 180) {
              if ((m = f.ⲆⲆⵠⵠⵠ[l[o].id].ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv)) && dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ < 0) {
                ᐃΔᐃᐃ.ΔⵠⲆΔⲆⵠΔΔⲆ(e);
              }
            } else if (d.open && l[o].id === 109) {
              if ((m = f.ⲆⲆⵠⵠⵠ[l[o].id].ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv)) && dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ < 0) {
                ᐃΔᐃᐃ.ΔΔᐃⲆⲆⲆᐃᐃΔ(d, b.shiftKey ? Wg : bs);
              }
            } else if (i.open && l[o].id === 134) {
              if ((m = f.ⲆⲆⵠⵠⵠ[l[o].id].ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv)) && dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ < Fj) {
                ᐃΔᐃᐃ.ⲆⲆᐃᐃⲆⲆⵠΔΔ(i, b.shiftKey ? lt : Ni);
              }
            } else if (j.open && l[o].id === 109) {
              if ((m = f.ⲆⲆⵠⵠⵠ[l[o].id].ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv)) && dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ < Md) {
                ᐃΔᐃᐃ.ⲆⵠⲆΔⲆᐃⲆᐃᐃ(j, b.shiftKey ? 10 : Co);
              }
            } else if (k.open && (l[o].id === 109 || l[o].id === 131)) {
              if ((m = f.ⲆⲆⵠⵠⵠ[l[o].id].ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv)) && xq > dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ) {
                if (l[o].id === 109) {
                  ᐃΔᐃᐃ.ΔᐃΔⵠᐃⵠΔ(k, b.shiftKey ? Lc : _h, tj);
                } else {
                  ᐃΔᐃᐃ.ΔᐃΔⵠᐃⵠΔ(k, xq, b.shiftKey ? bg : Mg);
                }
              }
            }
          }
        }
        if (bu > dx.Ⲇⵠᐃⵠ.id && dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ < 0 && !dx.ᐃⵠⵠΔⲆ.enabled && !f.ⵠΔⲆΔ.open && !dx.ⵠⵠᐃⲆΔ) {
          l = dx.Ⲇⵠᐃⵠ.ⵠⵠⵠⵠⲆ;
          o = 0;
          for (; o < l.length; o++) {
            if (m = l[o].ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv)) {
              Ⲇⵠᐃⵠᐃ = ᐃΔᐃᐃ.ᐃⵠⲆᐃⲆⲆⲆᐃⲆ(l[o].id);
              if (Ⲇⵠᐃⵠᐃ && ga) {
                ga("send", "event", "Game", "craft", zs[Us[l[o].id].ᐃⲆΔᐃ].name);
              }
            }
          }
        }
        if (dx.Ⲇⵠᐃⵠ.id < 0 && Ah > dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ && dx.ΔⲆΔΔᐃ.open && !f.ⲆᐃⲆᐃⵠ.open && !f.Δᐃᐃᐃ.open && !f.ⵠΔⲆΔ.open && !f.options.open && !f.ΔⲆΔᐃⵠ.open && !f.ⵠΔᐃΔ.open) {
          if (m = f.ΔⲆΔΔᐃ.button.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Xv)) {
            fx.ΔⲆΔΔᐃ.select();
          }
        }
        if (dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ < 0 && !f.Δᐃᐃᐃ.open && !f.ⵠΔⲆΔ.open && !f.ⲆᐃⲆᐃⵠ.open && !f.ΔⲆΔᐃⵠ.open && !f.ⵠΔᐃΔ.open && !f.options.open) {
          if (gx.ᐃⵠⲆⵠΔ) {
            if (m = f.ⲆⲆⵠⲆ.ΔⲆⲆΔΔᐃᐃ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv)) {
              gx.select();
              if (ga) {
                ga("send", "event", "Game", "sound on");
              }
            }
          } else if (m = f.ⲆⲆⵠⲆ.ΔⵠΔⵠᐃⲆⲆ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv)) {
            gx.select();
            if (ga) {
              ga("send", "event", "Game", "sound off");
            }
          }
        }
        if (Qr > dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ && !f.Δᐃᐃᐃ.open && !f.ⵠΔⲆΔ.open && !f.ΔⲆΔᐃⵠ.open && !f.ⵠΔᐃΔ.open && !f.ⲆᐃⲆᐃⵠ.open) {
          if (m = f.options.button.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv)) {
            f.options.ᐃⵠⲆᐃⵠᐃᐃⵠⲆ();
            if (ga) {
              ga("send", "event", "Game", "options");
            }
          }
        }
        if (dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ < 0 && !f.Δᐃᐃᐃ.open && !f.ⵠΔⲆΔ.open && !f.ΔⲆΔᐃⵠ.open && !f.ⵠΔᐃΔ.open && !f.options.open && Ni === f.ᐃᐃⵠⲆΔᐃⵠ) {
          if (m = f.ⲆᐃⲆᐃⵠ.button.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv)) {
            f.ⲆᐃⲆᐃⵠ.select();
            if (ga) {
              ga("send", "event", "Game", "market");
            }
          }
        }
        if (dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ < 0 && !f.ⵠΔⲆΔ.open && !f.ⲆᐃⲆᐃⵠ.open && !f.options.open && !f.ΔⲆΔᐃⵠ.open && !f.ⵠΔᐃΔ.open && f.ᐃⲆⲆΔⲆᐃⵠ === bd) {
          if (m = f.Δᐃᐃᐃ.button.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv)) {
            f.Δᐃᐃᐃ.ⲆᐃΔᐃⲆΔᐃⲆⲆ();
            if (ga) {
              ga("send", "event", "Game", "recipe");
            }
          }
        }
        if (xq > dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ && !f.Δᐃᐃᐃ.open && !f.ⵠΔⲆΔ.open && !f.options.open && !f.ΔⲆΔᐃⵠ.open && !f.ⲆᐃⲆᐃⵠ.open && ow.ΔΔᐃᐃᐃ !== ff.mode && ff.mode !== ow.ᐃⵠΔΔⲆ && ff.mode !== ow.ⵠᐃᐃΔⵠᐃᐃ && f.ΔᐃᐃⵠⲆⵠⵠ === 1) {
          if (m = f.ⵠΔᐃΔ.button.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Zv)) {
            f.ⵠΔᐃΔ.select();
            if (ga) {
              ga("send", "event", "Game", "quests");
            }
          }
        }
        if (dx.Ⲇⵠᐃⵠ.ᐃⲆΔⲆⲆ && b.which == 3) {
          f.ΔⲆΔᐃⵠ.ⵠⵠΔΔⲆΔⲆ();
        }
      }
    };
    this.ⵠⵠⵠⵠᐃⲆΔ = vn;
    this.ⲆΔᐃΔⲆⲆᐃ = function (b) {
      kf.ΔⲆⵠⲆ = bw(f.ⵠⲆ, b);
      var d = false;
      fx.ΔⵠΔΔⵠ.display = gl;
      dx.ΔᐃⲆⵠ.ⵠΔⲆΔⵠΔΔ.ⲆΔⵠⲆΔ(kf.ΔⲆⵠⲆ);
      if (f.ΔⵠⲆΔΔ != -1) {
        d |= f.ⵠᐃⲆⵠΔ[f.ΔⵠⲆΔΔ].button.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Xv);
      }
      var e = dx.ⲆⵠΔⵠ;
      if (e.open && e.ⵠΔᐃⵠΔ > 0) {
        d |= f.ⲆΔⲆᐃⲆⵠⵠ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Xv);
      }
      var i = dx.ⵠΔⲆⵠ;
      if (i.open && i.ⵠⲆΔᐃΔΔᐃ > 0) {
        d |= f.ᐃⲆⲆⲆⵠΔᐃ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Xv);
        d |= f.ΔΔΔᐃΔⲆⵠ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Xv);
        d |= f.ΔⵠΔⵠⵠΔⵠ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Xv);
        d |= f.ᐃⲆⵠᐃᐃᐃΔ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Xv);
        d |= f.ⵠᐃᐃⲆΔΔᐃ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Xv);
      }
      var j = dx.ΔΔⵠⲆ;
      if (j.open && Aa < j.ΔⲆⲆΔΔⵠᐃ) {
        d |= f.ⲆⲆΔⵠᐃⲆᐃ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Xv);
      }
      if (dx.sign.open) {
        d |= f.sign.button.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Xv);
      }
      var a = dx.ⲆⵠⵠΔ;
      if (dx.Ⲇⵠᐃⵠ.id < 0 && a.id >= 0 && !dx.ᐃⵠⵠΔⲆ.enabled) {
        if (!dx.ⲆⵠⵠΔ.lock || dx.id === dx.ⲆⵠⵠΔ.ⵠΔⲆᐃ) {
          d |= f.ⵠᐃⵠ[a.id].ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Xv);
        }
      }
      if (dx.ⵠⲆⵠΔⵠ.open) {
        d |= f.ⵠⲆⵠΔⵠ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Xv);
      }
      if (!dx.ⲆⵠⵠΔ.lock && !dx.ᐃⵠⵠΔⲆ.enabled) {
        if (dx.ⲆⵠⵠΔ.ⲆΔᐃᐃⵠⲆᐃ) {
          d |= f.ΔᐃᐃⲆⵠΔΔ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Xv);
        }
      }
      if (dx.ⲆⵠⵠΔ.ΔⲆᐃΔⵠⲆⲆ && !dx.ᐃⵠⵠΔⲆ.enabled) {
        d |= f.ᐃⲆⲆᐃⲆᐃΔ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Xv);
      }
      if (dx.Ⲇⵠᐃⵠ.id < xq && !dx.ᐃⵠⵠΔⲆ.enabled) {
        for (var k = dx.ΔᐃⲆⵠ.ⵠΔΔᐃΔ, m = 0; k.length > m; m++) {
          var n = k[m].ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Xv);
          d |= fx.ΔⵠΔΔⵠ.ᐃᐃⵠⵠ(n, k[m], gl);
          if (a.open && (a.id < 0 || a.id == k[m].id) || dx.ⵠⲆΔⵠⵠ.open && k[m].id == 109 || dx.ΔⲆᐃΔⲆ.open && k[m].id === 180 || dx.ΔΔⵠⲆ.open && (k[m].id == 109 || k[m].id == 131) || dx.ⲆⵠΔⵠ.open && k[m].id == 134 || dx.ⵠΔⲆⵠ.open && k[m].id == 109) {
            d |= f.ⲆⲆⵠⵠⵠ[k[m].id].ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Xv);
          }
        }
      }
      if (dx.Ⲇⵠᐃⵠ.id < 0 && dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ < tj && !dx.ᐃⵠⵠΔⲆ.enabled && !dx.ⵠⵠᐃⲆΔ) {
        k = dx.Ⲇⵠᐃⵠ.ⵠⵠⵠⵠⲆ;
        m = 0;
        for (; m < k.length; m++) {
          n = false;
          n = k[m].ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Xv);
          d |= fx.ΔⵠΔΔⵠ.ᐃᐃⵠⵠ(n, k[m], Lu);
        }
      }
      if (yj > dx.Ⲇⵠᐃⵠ.id && dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ < 0 && dx.ΔⲆΔΔᐃ.open && !f.Δᐃᐃᐃ.open && !f.ⵠΔⲆΔ.open && !f.options.open && !f.ΔⲆΔᐃⵠ.open && !f.ⵠΔᐃΔ.open && !f.ⲆᐃⲆᐃⵠ.open) {
        d |= f.ΔⲆΔΔᐃ.button.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Xv);
      }
      if (yj > dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ && !f.ⵠΔⲆΔ.open && !f.options.open && !f.ΔⲆΔᐃⵠ.open && !f.ⵠΔᐃΔ.open && !f.ⲆᐃⲆᐃⵠ.open && f.ᐃⲆⲆΔⲆᐃⵠ === ck) {
        d |= f.Δᐃᐃᐃ.button.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Xv);
      }
      if (dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ < 0 && !f.Δᐃᐃᐃ.open && !f.ⵠΔⲆΔ.open && !f.ΔⲆΔᐃⵠ.open && !f.ⵠΔᐃΔ.open && !f.ⲆᐃⲆᐃⵠ.open) {
        d |= f.options.button.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Xv);
      }
      if (dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ < 0 && !f.Δᐃᐃᐃ.open && !f.ⵠΔⲆΔ.open && !f.ΔⲆΔᐃⵠ.open && !f.ⵠΔᐃΔ.open && !f.options.open && f.ᐃᐃⵠⲆΔᐃⵠ === 1) {
        d |= f.ⲆᐃⲆᐃⵠ.button.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Xv);
      }
      if (dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ < 0 && !f.Δᐃᐃᐃ.open && !f.ⵠΔⲆΔ.open && !f.ΔⲆΔᐃⵠ.open && !f.ⵠΔᐃΔ.open && !f.options.open && !f.ⲆᐃⲆᐃⵠ.open) {
        if (gx.ᐃⵠⲆⵠΔ) {
          d |= f.ⲆⲆⵠⲆ.ΔⲆⲆΔΔᐃᐃ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Xv);
        } else {
          d |= f.ⲆⲆⵠⲆ.ΔⵠΔⵠᐃⲆⲆ.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Xv);
        }
      }
      if (dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ < Md && !f.Δᐃᐃᐃ.open && !f.ⵠΔⲆΔ.open && !f.options.open && !f.ΔⲆΔᐃⵠ.open && !f.ⲆᐃⲆᐃⵠ.open && ow.ΔΔᐃᐃᐃ !== ff.mode && ff.mode !== ow.ᐃⵠΔΔⲆ && ff.mode !== ow.ΔⲆᐃⲆⵠᐃⲆᐃⵠ && f.ΔᐃᐃⵠⲆⵠⵠ === 1) {
        d |= f.ⵠΔᐃΔ.button.ᐃᐃⵠⵠ(f.ⵠⲆ, kf.ΔⲆⵠⲆ, Xv);
      }
      if (f.ⵠⵠⵠⵠᐃⲆΔ !== d) {
        f.ⵠⵠⵠⵠᐃⲆΔ = d;
        if (d) {
          c.style.cursor = f.ⵠⵠᐃⲆⵠᐃⵠ;
        } else {
          c.style.cursor = f.ᐃΔⵠⵠⲆᐃᐃ;
        }
      }
    };
    this.ⲆⲆⵠⲆⵠᐃᐃ = function () {
      bj.addEventListener("mousedown", this.ΔᐃᐃᐃΔⲆⵠ, false);
      bj.addEventListener("mouseup", this.ⵠᐃⲆⵠⲆⲆΔ, false);
      bj.addEventListener("mousemove", this.ⲆΔᐃΔⲆⲆᐃ, false);
      bj.addEventListener("keyup", this.ᐃΔⵠⵠⲆᐃⵠ, hg);
      bj.addEventListener("keydown", this.ΔⵠⵠᐃᐃᐃⲆ, Bo);
    };
    this.ΔⵠᐃΔᐃᐃΔ = function () {
      bj.removeEventListener("mousedown", this.ΔᐃᐃᐃΔⲆⵠ, vn);
      bj.removeEventListener("mouseup", this.ⵠᐃⲆⵠⲆⲆΔ, false);
      bj.removeEventListener("mousemove", this.ⲆΔᐃΔⲆⲆᐃ, Hj);
      bj.removeEventListener("keyup", this.ᐃΔⵠⵠⲆᐃⵠ, false);
      bj.removeEventListener("keydown", this.ΔⵠⵠᐃᐃᐃⲆ, false);
    };
  }
  function Vw(a, b, c) {
    const d = ~(a & 30190) & (a | 30190);
    const e = (12345 + (25440 + b) * 1103515245) % 2147483648;
    const f = ~(c & 57545) & 57545 | ~(c & 57545) & c;
    return (64521 + (Yw(d, e, f) ^ Qf(d, e, f, d))) % 65489;
  }
  function Ww(a, b, c) {
    Hi(yw, a, b, c);
    const d = vw(xw[0], xw[1], xw[2], xw[0], xw[1]);
    Xs(xw[2], xw[0], xw[1], xw[2], xw[Rl], xw[1]);
    return d ^ 31554;
  }
  function Xw(b, c, d, e, f, g) {
    lk(yw, b, c, d, e, f, g);
    const i = xw[0] ^ 5290;
    const a = (8 << ((i ^ xw[nd]) >> Fj & 255)) + (fg << ((i ^ xw[fh]) >> 24 & 255)) + (24 << ((i ^ xw[2]) >> 8 & 255)) + (16 << ((i ^ xw[jb]) >> 16 & 255));
    const j = (24 << ((a ^ xw[Ft]) >> 24 & 255)) + ($l << ((a ^ xw[3]) >> 8 & 255)) + (0 << ((a ^ xw[3]) >> 16 & 255)) + (16 << ((a ^ xw[3]) & 255)) ^ 40167;
    return ~(j & 15120) & 15120 | ~(j & 15120) & j;
  }
  function Yw(b, c, d) {
    const e = (1013904223 + (b + 48790) * 1664525) % 4294967296;
    const f = c ^ 4394;
    const g = ~(d & 41670) & (d | 41670);
    const h = lf(e, f, g, e, f, g);
    lf(e, f, g, e, f, g);
    return (h | 34694) & ~(h & 34694);
  }
  (function () {
    function b() {
      this.ᐃⲆⲆᐃⵠ();
    }
    b.prototype = {
      ᐃⲆⲆᐃⵠ: function () {
        var a = this || f;
        a.ᐃⲆⲆⵠᐃⲆΔ = 1000;
        a.ΔⲆⵠⵠᐃⲆᐃ = {};
        a.ⵠⵠⵠⲆᐃ = [];
        a.ᐃⲆⵠᐃᐃ = false;
        a.ⲆⲆΔΔᐃ = Ek;
        a.ⲆΔⲆⲆᐃᐃᐃ = "canplaythrough";
        a.ⵠⲆᐃⵠΔ = typeof bj != "undefined" && bj.navigator ? bj.navigator : null;
        a.ⵠⵠΔΔⲆᐃⵠ = null;
        a.ᐃⲆⵠⵠΔᐃᐃ = false;
        a.ᐃΔⵠⲆᐃ = !sb;
        a.ᐃᐃⲆⲆΔⵠⵠ = true;
        a.Δ = null;
        a.ᐃᐃⲆⲆⲆᐃⵠ = !yj;
        a.ⵠΔΔⵠᐃᐃᐃ();
        return a;
      },
      volume: function (b) {
        var c = this || f;
        b = parseFloat(b);
        if (!c.Δ) {
          h();
        }
        if (b !== undefined && b >= 0 && b <= 1) {
          c.ⲆⲆΔΔᐃ = b;
          if (c.ᐃⲆⵠᐃᐃ) {
            return c;
          }
          if (c.ᐃΔⵠⲆᐃ) {
            c.ⵠⵠΔΔⲆᐃⵠ.gain.value = b;
          }
          for (var d = 0; d < c.ⵠⵠⵠⲆᐃ.length; d++) {
            if (!c.ⵠⵠⵠⲆᐃ[d].ᐃᐃⵠΔᐃ) {
              for (var g = c.ⵠⵠⵠⲆᐃ[d].ᐃΔⲆⲆⲆ(), i = 0; i < g.length; i++) {
                var j = c.ⵠⵠⵠⲆᐃ[d].ⵠⵠⲆᐃⲆ(g[i]);
                if (j && j.ⵠⵠⲆⵠ) {
                  j.ⵠⵠⲆⵠ.volume = j.ⲆⲆΔΔᐃ * b;
                }
              }
            }
          }
          return c;
        }
        return c.ⲆⲆΔΔᐃ;
      },
      ⲆⲆΔⵠⲆⵠᐃ: function (b) {
        var c = this || f;
        if (!c.Δ) {
          h();
        }
        c.ᐃⲆⵠᐃᐃ = b;
        if (c.ᐃΔⵠⲆᐃ) {
          c.ⵠⵠΔΔⲆᐃⵠ.gain.value = b ? Md : c.ⲆⲆΔΔᐃ;
        }
        for (var d = An; d < c.ⵠⵠⵠⲆᐃ.length; d++) {
          if (!c.ⵠⵠⵠⲆᐃ[d].ᐃᐃⵠΔᐃ) {
            for (var e = c.ⵠⵠⵠⲆᐃ[d].ᐃΔⲆⲆⲆ(), g = 0; g < e.length; g++) {
              var i = c.ⵠⵠⵠⲆᐃ[d].ⵠⵠⲆᐃⲆ(e[g]);
              if (i && i.ⵠⵠⲆⵠ) {
                i.ⵠⵠⲆⵠ.muted = !!b || i.ᐃⲆⵠᐃᐃ;
              }
            }
          }
        }
        return c;
      },
      ᐃΔΔⵠⵠᐃΔ: function () {
        var a = this || f;
        for (var b = a.ⵠⵠⵠⲆᐃ.length - 1; b >= Ih; b--) {
          a.ⵠⵠⵠⲆᐃ[b].ᐃΔΔⵠⵠᐃΔ();
        }
        if (a.ᐃΔⵠⲆᐃ && a.Δ && a.Δ.close !== undefined) {
          a.Δ.close();
          a.Δ = null;
          h();
        }
        return a;
      },
      ᐃⲆΔⲆΔᐃⲆⵠⵠ: function (a) {
        return (this || f).ΔⲆⵠⵠᐃⲆᐃ[a.replace(/^x-/, "")];
      },
      ⵠΔΔⵠᐃᐃᐃ: function () {
        var a = this || f;
        a.state = a.Δ && a.Δ.state || "running";
        a.ΔⵠᐃΔΔⵠΔ();
        if (!a.ᐃΔⵠⲆᐃ) {
          if (typeof Audio != "undefined") {
            try {
              if (new Audio().oncanplaythrough === undefined) {
                a.ⲆΔⲆⲆᐃᐃᐃ = "canplay";
              }
            } catch (b) {
              a.ᐃⲆⵠⵠΔᐃᐃ = !et;
            }
          } else {
            a.ᐃⲆⵠⵠΔᐃᐃ = true;
          }
        }
        try {
          if (new Audio().muted) {
            a.ᐃⲆⵠⵠΔᐃᐃ = !Md;
          }
        } catch (a) {}
        if (!a.ᐃⲆⵠⵠΔᐃᐃ) {
          a.ⲆⵠΔⲆΔᐃΔᐃΔ();
        }
        return a;
      },
      ⲆⵠΔⲆΔᐃΔᐃΔ: function () {
        var a = this || f;
        var b = null;
        try {
          b = typeof Audio != "undefined" ? new Audio() : null;
        } catch (b) {
          return a;
        }
        if (!b || typeof b.canPlayType != "function") {
          return a;
        }
        var c = b.canPlayType("audio/mpeg;").replace(/^no$/, "");
        var d = a.ⵠⲆᐃⵠΔ && a.ⵠⲆᐃⵠΔ.userAgent.match(/OPR\/([0-6].)/g);
        var e = d && parseInt(d[0].split("/")[ig], 10) < 33;
        a.ΔⲆⵠⵠᐃⲆᐃ = {
          ΔⲆⲆΔⵠᐃⵠⲆΔ: !e && (!!c || !!b.canPlayType("audio/mp3;").replace(/^no$/, "")),
          ⵠΔⵠΔΔᐃⵠⲆⵠ: !!c,
          ⵠⲆΔⵠᐃΔⲆⲆⵠ: !!b.canPlayType("audio/ogg; codecs=\"opus\"").replace(/^no$/, ""),
          ᐃⲆⲆⲆᐃⲆᐃΔᐃ: !!b.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
          ᐃⲆⲆΔᐃⵠᐃᐃᐃ: !!b.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
          ᐃⲆⲆⵠᐃᐃᐃΔᐃ: !!b.canPlayType("audio/wav; codecs=\"1\"").replace(/^no$/, ""),
          ⲆⲆᐃⲆᐃᐃⵠΔᐃ: !!b.canPlayType("audio/aac;").replace(/^no$/, ""),
          ΔᐃᐃᐃᐃᐃⲆⲆⵠ: !!b.canPlayType("audio/x-caf;").replace(/^no$/, ""),
          ⲆⵠⵠⲆⲆⲆᐃᐃⲆ: !!(b.canPlayType("audio/x-m4a;") || b.canPlayType("audio/m4a;") || b.canPlayType("audio/aac;")).replace(/^no$/, ""),
          ⲆΔⲆᐃΔⵠⲆΔⵠ: !!(b.canPlayType("audio/x-mp4;") || b.canPlayType("audio/mp4;") || b.canPlayType("audio/aac;")).replace(/^no$/, ""),
          ᐃᐃΔⵠⵠⲆᐃⲆᐃ: !!b.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
          ⵠᐃⲆᐃⲆⵠΔΔⲆ: !!b.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
          ᐃᐃⲆᐃⲆⲆΔΔᐃ: !!b.canPlayType("audio/mp4; codecs=\"ec-3\"").replace(/^no$/, ""),
          ᐃᐃΔΔⵠΔᐃⵠⲆ: !!(b.canPlayType("audio/x-flac;") || b.canPlayType("audio/flac;")).replace(/^no$/, "")
        };
        return a;
      },
      ᐃⲆⲆᐃᐃΔⲆⵠΔ: function () {
        var a = this || f;
        var b = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(a.ⵠⲆᐃⵠΔ && a.ⵠⲆᐃⵠΔ.userAgent);
        var c = !!("ontouchend" in bj) || !!a.ⵠⲆᐃⵠΔ && a.ⵠⲆᐃⵠΔ.maxTouchPoints > 0 || !!a.ⵠⲆᐃⵠΔ && a.ⵠⲆᐃⵠΔ.ᐃΔΔⵠΔⵠⲆᐃΔ > 0;
        if (!a.ⵠΔⵠⲆⲆᐃⵠ && a.Δ && (b || c)) {
          a.ⵠΔⵠⲆⲆᐃⵠ = !Gt;
          if (!a.ⲆᐃΔᐃᐃᐃΔΔΔ && a.Δ.sampleRate !== 44100) {
            a.ⲆᐃΔᐃᐃᐃΔΔΔ = !qu;
            a.ᐃΔΔⵠⵠᐃΔ();
          }
          a.ⵠⵠΔᐃⲆⵠᐃ = a.Δ.createBuffer(Lu, 1, 22050);
          function b() {
            f.ΔⵠⲆⲆΔΔⲆ();
            var c = a.Δ.createBufferSource();
            c.buffer = a.ⵠⵠΔᐃⲆⵠᐃ;
            c.connect(a.Δ.destination);
            if (c.start === undefined) {
              c.ᐃⵠΔⵠΔΔⵠⲆⵠ(Rl);
            } else {
              c.start(Gg);
            }
            if (typeof a.Δ.resume == "function") {
              a.Δ.resume();
            }
            c.onended = function () {
              c.disconnect(0);
              a.ⵠΔⵠⲆⲆᐃⵠ = true;
              a.ᐃᐃⲆⲆⲆᐃⵠ = !_;
              document.removeEventListener("touchend", b, !sb);
            };
          }
          document.addEventListener("touchend", b, !Rl);
          return a;
        }
      },
      ΔⵠᐃΔΔⵠΔ: function () {
        var a = this;
        if (a.ᐃᐃⲆⲆΔⵠⵠ && a.Δ && a.Δ.suspend !== undefined && f.ᐃΔⵠⲆᐃ) {
          for (var b = An; b < a.ⵠⵠⵠⲆᐃ.length; b++) {
            if (a.ⵠⵠⵠⲆᐃ[b].ᐃᐃⵠΔᐃ) {
              for (var c = qb; c < a.ⵠⵠⵠⲆᐃ[b].ⵠⵠᐃᐃⲆ.length; c++) {
                if (!a.ⵠⵠⵠⲆᐃ[b].ⵠⵠᐃᐃⲆ[c].ⵠⲆⲆⲆⲆ) {
                  return a;
                }
              }
            }
          }
          if (a.ᐃᐃⲆΔⲆⵠⵠ) {
            clearTimeout(a.ᐃᐃⲆΔⲆⵠⵠ);
          }
          a.ᐃᐃⲆΔⲆⵠⵠ = setTimeout(function () {
            if (a.ᐃᐃⲆⲆΔⵠⵠ) {
              a.ᐃᐃⲆΔⲆⵠⵠ = null;
              a.state = "suspending";
              a.Δ.suspend().then(function () {
                a.state = "suspended";
                if (a.ΔⲆᐃⵠᐃⵠⲆ) {
                  delete a.ΔⲆᐃⵠᐃⵠⲆ;
                  a.ΔⵠⲆⲆΔΔⲆ();
                }
              });
            }
          }, 30000);
          return a;
        }
      },
      ΔⵠⲆⲆΔΔⲆ: function () {
        var a = this;
        if (a.Δ && a.Δ.resume !== undefined && f.ᐃΔⵠⲆᐃ) {
          if (a.state === "running" && a.ᐃᐃⲆΔⲆⵠⵠ) {
            clearTimeout(a.ᐃᐃⲆΔⲆⵠⵠ);
            a.ᐃᐃⲆΔⲆⵠⵠ = null;
          } else if (a.state === "suspended") {
            a.Δ.resume().then(function () {
              a.state = "running";
              for (var b = 0; b < a.ⵠⵠⵠⲆᐃ.length; b++) {
                a.ⵠⵠⵠⲆᐃ[b].ⵠᐃΔΔⲆ("resume");
              }
            });
            if (a.ᐃᐃⲆΔⲆⵠⵠ) {
              clearTimeout(a.ᐃᐃⲆΔⲆⵠⵠ);
              a.ᐃᐃⲆΔⲆⵠⵠ = null;
            }
          } else if (a.state === "suspending") {
            a.ΔⲆᐃⵠᐃⵠⲆ = true;
          }
          return a;
        }
      }
    };
    var f = new b();
    function c(a) {
      if (a.src && qu !== a.src.length) {
        this.ᐃⲆⲆᐃⵠ(a);
      } else {
        console.error(undefined);
      }
    }
    c.prototype = {
      ᐃⲆⲆᐃⵠ: function (a) {
        var b = this;
        if (!f.Δ) {
          h();
        }
        b.ⲆᐃΔᐃⵠⲆⵠⵠΔ = a.autoplay || false;
        b.ΔⵠⲆΔᐃΔᐃ = typeof a.ⵠⵠⵠⲆⵠⵠⲆ != "string" ? a.ⵠⵠⵠⲆⵠⵠⲆ : [a.ⵠⵠⵠⲆⵠⵠⲆ];
        b.ⵠᐃᐃᐃΔᐃᐃ = a.ⵠⵠⲆᐃᐃⲆᐃΔⲆ || !ck;
        b.ᐃⲆⵠᐃᐃ = a.ⲆⲆΔⵠⲆⵠᐃ || !_;
        b.ⲆⲆΔⵠᐃ = a.loop || false;
        b.ΔⵠⵠΔⲆΔⲆΔᐃ = a.ΔⵠⵠⲆᐃᐃᐃⵠⵠ || 5;
        b.ⲆΔⵠⲆⵠⵠⲆᐃΔ = typeof a.preload != "boolean" || a.preload;
        b.ⲆⲆⲆⲆᐃ = a.rate || 1;
        b.ⵠΔⵠⵠⵠ = a.ᐃΔ || {};
        b.ᐃⲆΔⵠΔ = typeof a.src != "string" ? a.src : [a.src];
        b.ⲆⲆΔΔᐃ = a.volume !== undefined ? a.volume : 1;
        b.ᐃΔΔᐃⵠⲆΔ = Aa;
        b.ΔⲆᐃᐃⵠ = "unloaded";
        b.ⵠⵠᐃᐃⲆ = [];
        b.ⵠⵠᐃᐃⲆⲆⲆ = {};
        b.ⵠΔᐃΔⵠ = [];
        b.ⲆⵠⲆΔⲆΔⲆⵠⵠ = a.onend ? [{
          ΔᐃⲆⲆΔ: a.onend
        }] : [];
        b.ⵠⵠΔⲆⵠᐃⲆⵠᐃ = a.onfade ? [{
          ΔᐃⲆⲆΔ: a.onfade
        }] : [];
        b.ΔᐃⵠⲆⵠΔᐃⵠᐃ = a.onload ? [{
          ΔᐃⲆⲆΔ: a.onload
        }] : [];
        b.ΔΔΔΔⵠᐃᐃΔⵠ = a.ⲆⲆΔᐃᐃᐃⵠⵠΔ ? [{
          ΔᐃⲆⲆΔ: a.ⲆⲆΔᐃᐃᐃⵠⵠΔ
        }] : [];
        b.ΔΔᐃⲆⲆΔⲆⲆⲆ = a.onpause ? [{
          ΔᐃⲆⲆΔ: a.onpause
        }] : [];
        b.ⲆⲆⲆⲆⵠⲆΔⲆΔ = a.onplay ? [{
          ΔᐃⲆⲆΔ: a.onplay
        }] : [];
        b.ⵠΔⲆⵠⵠᐃⵠⵠⲆ = a.onstop ? [{
          ΔᐃⲆⲆΔ: a.onstop
        }] : [];
        b.ΔΔⵠΔᐃⵠᐃΔⵠ = a.onmute ? [{
          ΔᐃⲆⲆΔ: a.onmute
        }] : [];
        b.ΔΔⲆΔⲆᐃⵠΔⲆ = a.ΔΔΔⵠⵠΔΔⲆⵠ ? [{
          ΔᐃⲆⲆΔ: a.ΔΔΔⵠⵠΔΔⲆⵠ
        }] : [];
        b.ΔⲆᐃⵠⲆΔΔΔᐃ = a.ΔⲆΔⵠⵠᐃΔⵠΔ ? [{
          ΔᐃⲆⲆΔ: a.ΔⲆΔⵠⵠᐃΔⵠΔ
        }] : [];
        b.ΔᐃⵠΔⲆᐃⵠⲆΔ = a.ⵠⵠᐃΔΔΔⵠⵠᐃ ? [{
          ΔᐃⲆⲆΔ: a.ⵠⵠᐃΔΔΔⵠⵠᐃ
        }] : [];
        b.ᐃΔⵠⵠᐃΔΔᐃΔ = [];
        b.ᐃᐃⵠΔᐃ = f.ᐃΔⵠⲆᐃ && !b.ⵠᐃᐃᐃΔᐃᐃ;
        if (f.Δ !== undefined && f.Δ && f.ᐃᐃⲆⲆⲆᐃⵠ) {
          f.ᐃⲆⲆᐃᐃΔⲆⵠΔ();
        }
        f.ⵠⵠⵠⲆᐃ.push(b);
        if (b.ⲆᐃΔᐃⵠⲆⵠⵠΔ) {
          b.ⵠΔᐃΔⵠ.push({
            event: "play",
            action: function () {
              b.play();
            }
          });
        }
        if (b.ⲆΔⵠⲆⵠⵠⲆᐃΔ) {
          b.load();
        }
        return b;
      },
      load: function () {
        var a = this;
        var b = null;
        if (!f.ᐃⲆⵠⵠΔᐃᐃ) {
          if (typeof a.ᐃⲆΔⵠΔ == "string") {
            a.ᐃⲆΔⵠΔ = [a.ᐃⲆΔⵠΔ];
          }
          for (var c = 0; c < a.ᐃⲆΔⵠΔ.length; c++) {
            var e;
            var g;
            if (a.ΔⵠⲆΔᐃΔᐃ && a.ΔⵠⲆΔᐃΔᐃ[c]) {
              e = a.ΔⵠⲆΔᐃΔᐃ[c];
            } else {
              if (typeof (g = a.ᐃⲆΔⵠΔ[c]) != "string") {
                a.ⵠᐃΔΔⲆ("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                continue;
              }
              if (!(e = /^data:audio\/([^;,]+);/i.exec(g))) {
                e = /\.([^.]+)$/.exec(g.split("?", 1)[Rl]);
              }
              e &&= e[Ek].toLowerCase();
            }
            if (!e) {
              console.warn("No file extension was found. Consider using the \"format\" property or specify an extension.");
            }
            if (e && f.ᐃⲆΔⲆΔᐃⲆⵠⵠ(e)) {
              b = a.ᐃⲆΔⵠΔ[c];
              break;
            }
          }
          if (b) {
            a.ᐃⲆΔⵠΔ = b;
            a.ΔⲆᐃᐃⵠ = "loading";
            if (bj.location.protocol === "https:" && b.slice(0, 5) === "http:") {
              a.ⵠᐃᐃᐃΔᐃᐃ = true;
              a.ᐃᐃⵠΔᐃ = false;
            }
            new d(a);
            if (a.ᐃᐃⵠΔᐃ) {
              i(a);
            }
            return a;
          } else {
            a.ⵠᐃΔΔⲆ("loaderror", null, "No codec support for selected audio sources.");
            return;
          }
        }
        a.ⵠᐃΔΔⲆ("loaderror", null, "No audio support.");
      },
      play: function (d, i) {
        var j = this;
        var k = null;
        if (typeof d == "number") {
          k = d;
          d = null;
        } else {
          if (typeof d == "string" && j.ΔⲆᐃᐃⵠ === "loaded" && !j.ⵠΔⵠⵠⵠ[d]) {
            return null;
          }
          if (d === undefined) {
            d = "__default";
            var n = qb;
            for (var o = 0; o < j.ⵠⵠᐃᐃⲆ.length; o++) {
              if (j.ⵠⵠᐃᐃⲆ[o].ⵠⲆⲆⲆⲆ && !j.ⵠⵠᐃᐃⲆ[o].ⵠⲆᐃⲆⲆ) {
                n++;
                k = j.ⵠⵠᐃᐃⲆ[o].ᐃᐃᐃᐃ;
              }
            }
            if (n === 1) {
              d = null;
            } else {
              k = null;
            }
          }
        }
        var q = k ? j.ⵠⵠⲆᐃⲆ(k) : j.ⲆⲆⲆΔᐃᐃΔⵠⲆ();
        if (!q) {
          return null;
        }
        if (k && !d) {
          d = q.ⵠΔⵠⵠⵠ || "__default";
        }
        if (j.ΔⲆᐃᐃⵠ !== "loaded") {
          q.ⵠΔⵠⵠⵠ = d;
          q.ⵠⲆᐃⲆⲆ = !_;
          var h = q.ᐃᐃᐃᐃ;
          j.ⵠΔᐃΔⵠ.push({
            event: "play",
            action: function () {
              j.play(h);
            }
          });
          return h;
        }
        if (k && !q.ⵠⲆⲆⲆⲆ) {
          if (!i) {
            setTimeout(function () {
              j.ⵠᐃΔΔⲆ("play", q.ᐃᐃᐃᐃ);
            }, qu);
          }
          return q.ᐃᐃᐃᐃ;
        }
        if (j.ᐃᐃⵠΔᐃ) {
          f.ΔⵠⲆⲆΔΔⲆ();
        }
        var l = Math.max(Md, q.ⲆⲆⵠᐃᐃ > 0 ? q.ⲆⲆⵠᐃᐃ : j.ⵠΔⵠⵠⵠ[d][tj] / 1000);
        var g = Math.max(tj, (j.ⵠΔⵠⵠⵠ[d][0] + j.ⵠΔⵠⵠⵠ[d][1]) / 1000 - l);
        var p = g * 1000 / Math.abs(q.ⲆⲆⲆⲆᐃ);
        q.ⵠⲆⲆⲆⲆ = !Fb;
        q.ⵠⲆᐃⲆⲆ = !Kg;
        q.ⵠΔⵠⵠⵠ = d;
        q.ⲆⲆⵠᐃᐃ = l;
        q.ⲆᐃᐃⲆⲆ = j.ⵠΔⵠⵠⵠ[d][yj] / 1000;
        q.ΔΔᐃⲆⲆⲆᐃ = (j.ⵠΔⵠⵠⵠ[d][Ih] + j.ⵠΔⵠⵠⵠ[d][sc]) / 1000;
        q.ⲆⲆΔⵠᐃ = !!q.ⲆⲆΔⵠᐃ || !!j.ⵠΔⵠⵠⵠ[d][2];
        var b = q.ⵠⵠⲆⵠ;
        if (j.ᐃᐃⵠΔᐃ) {
          function a() {
            j.ⲆᐃⲆᐃΔⵠⵠᐃΔ(q);
            var a = q.ᐃⲆⵠᐃᐃ || j.ᐃⲆⵠᐃᐃ ? yj : q.ⲆⲆΔΔᐃ;
            b.gain.setValueAtTime(a, f.Δ.currentTime);
            q.ᐃᐃⲆⵠΔΔⲆ = f.Δ.currentTime;
            if (b.ⲆΔΔΔⵠ.start === undefined) {
              if (q.ⲆⲆΔⵠᐃ) {
                b.ⲆΔΔΔⵠ.ⲆⲆᐃΔⲆᐃⲆᐃⲆ(et, l, 86400);
              } else {
                b.ⲆΔΔΔⵠ.ⲆⲆᐃΔⲆᐃⲆᐃⲆ(Ih, l, g);
              }
            } else if (q.ⲆⲆΔⵠᐃ) {
              b.ⲆΔΔΔⵠ.start(0, l, 86400);
            } else {
              b.ⲆΔΔΔⵠ.start(qb, l, g);
            }
            if (p !== 1 / qb) {
              j.ⵠⵠᐃᐃⲆⲆⲆ[q.ᐃᐃᐃᐃ] = setTimeout(j.ⵠⲆᐃⲆⲆ.bind(j, q), p);
            }
            if (!i) {
              setTimeout(function () {
                j.ⵠᐃΔΔⲆ("play", q.ᐃᐃᐃᐃ);
              }, Aa);
            }
          }
          var t = f.state === "running";
          if (j.ΔⲆᐃᐃⵠ === "loaded" && t) {
            a();
          } else {
            var c = t || j.ΔⲆᐃᐃⵠ !== "loaded" ? "load" : "resume";
            j.once(c, a, t ? q.ᐃᐃᐃᐃ : null);
            j.ⲆΔΔᐃⲆⲆⲆ(q.ᐃᐃᐃᐃ);
          }
        } else {
          function a() {
            b.currentTime = l;
            b.muted = q.ᐃⲆⵠᐃᐃ || j.ᐃⲆⵠᐃᐃ || f.ᐃⲆⵠᐃᐃ || b.muted;
            b.volume = q.ⲆⲆΔΔᐃ * f.volume();
            b.playbackRate = q.ⲆⲆⲆⲆᐃ;
            b.play();
            if (p !== _h / Gg) {
              j.ⵠⵠᐃᐃⲆⲆⲆ[q.ᐃᐃᐃᐃ] = setTimeout(j.ⵠⲆᐃⲆⲆ.bind(j, q), p);
            }
            if (!i) {
              j.ⵠᐃΔΔⲆ("play", q.ᐃᐃᐃᐃ);
            }
          }
          var m = j.ΔⲆᐃᐃⵠ === "loaded" && (bj && bj.ⲆⲆΔᐃⲆᐃⵠΔⵠ || !b.readyState && f.ⵠⲆᐃⵠΔ.ᐃΔⲆΔⲆⵠΔΔⵠ);
          if (b.readyState === 4 || m) {
            a();
          } else {
            function c() {
              a();
              b.removeEventListener(f.ⲆΔⲆⲆᐃᐃᐃ, c, false);
            }
            b.addEventListener(f.ⲆΔⲆⲆᐃᐃᐃ, c, false);
            j.ⲆΔΔᐃⲆⲆⲆ(q.ᐃᐃᐃᐃ);
          }
        }
        return q.ᐃᐃᐃᐃ;
      },
      pause: function (a) {
        var b = this;
        if (b.ΔⲆᐃᐃⵠ !== "loaded") {
          b.ⵠΔᐃΔⵠ.push({
            event: "pause",
            action: function () {
              b.pause(a);
            }
          });
          return b;
        }
        for (var c = b.ᐃΔⲆⲆⲆ(a), d = Ih; d < c.length; d++) {
          b.ⲆΔΔᐃⲆⲆⲆ(c[d]);
          var e = b.ⵠⵠⲆᐃⲆ(c[d]);
          if (e && !e.ⵠⲆⲆⲆⲆ && (e.ⲆⲆⵠᐃᐃ = b.ΔᐃᐃᐃⲆᐃΔ(c[d]), e.ⲆᐃⲆᐃΔΔΔ = Md, e.ⵠⲆⲆⲆⲆ = true, b.ΔᐃΔΔⵠⲆⵠ(c[d]), e.ⵠⵠⲆⵠ)) {
            if (b.ᐃᐃⵠΔᐃ) {
              if (!e.ⵠⵠⲆⵠ.ⲆΔΔΔⵠ) {
                continue;
              }
              if (e.ⵠⵠⲆⵠ.ⲆΔΔΔⵠ.stop === undefined) {
                e.ⵠⵠⲆⵠ.ⲆΔΔΔⵠ.ΔⲆⲆⲆⵠⲆⲆΔᐃ(0);
              } else {
                e.ⵠⵠⲆⵠ.ⲆΔΔΔⵠ.stop(et);
              }
              b.ᐃΔᐃΔⲆᐃΔ(e.ⵠⵠⲆⵠ);
            } else if (!isNaN(e.ⵠⵠⲆⵠ.duration) || e.ⵠⵠⲆⵠ.duration === ig / 0) {
              e.ⵠⵠⲆⵠ.pause();
            }
          }
          if (!arguments[sl]) {
            b.ⵠᐃΔΔⲆ("pause", e ? e.ᐃᐃᐃᐃ : null);
          }
        }
        return b;
      },
      stop: function (a, b) {
        var c = this;
        if (c.ΔⲆᐃᐃⵠ !== "loaded") {
          c.ⵠΔᐃΔⵠ.push({
            event: "stop",
            action: function () {
              c.stop(a);
            }
          });
          return c;
        }
        for (var d = c.ᐃΔⲆⲆⲆ(a), e = sb; e < d.length; e++) {
          c.ⲆΔΔᐃⲆⲆⲆ(d[e]);
          var f = c.ⵠⵠⲆᐃⲆ(d[e]);
          if (f) {
            f.ⲆⲆⵠᐃᐃ = f.ⲆᐃᐃⲆⲆ || fg;
            f.ⲆᐃⲆᐃΔΔΔ = sb;
            f.ⵠⲆⲆⲆⲆ = true;
            f.ⵠⲆᐃⲆⲆ = !Gk;
            c.ΔᐃΔΔⵠⲆⵠ(d[e]);
            if (f.ⵠⵠⲆⵠ) {
              if (c.ᐃᐃⵠΔᐃ) {
                if (f.ⵠⵠⲆⵠ.ⲆΔΔΔⵠ) {
                  if (f.ⵠⵠⲆⵠ.ⲆΔΔΔⵠ.stop === undefined) {
                    f.ⵠⵠⲆⵠ.ⲆΔΔΔⵠ.ΔⲆⲆⲆⵠⲆⲆΔᐃ(Md);
                  } else {
                    f.ⵠⵠⲆⵠ.ⲆΔΔΔⵠ.stop(gl);
                  }
                  c.ᐃΔᐃΔⲆᐃΔ(f.ⵠⵠⲆⵠ);
                }
              } else if (!isNaN(f.ⵠⵠⲆⵠ.duration) || f.ⵠⵠⲆⵠ.duration === 1 / fg) {
                f.ⵠⵠⲆⵠ.currentTime = f.ⲆᐃᐃⲆⲆ || 0;
                f.ⵠⵠⲆⵠ.pause();
              }
            }
            if (!b) {
              c.ⵠᐃΔΔⲆ("stop", f.ᐃᐃᐃᐃ);
            }
          }
        }
        return c;
      },
      ⲆⲆΔⵠⲆⵠᐃ: function (b, c) {
        var d = this;
        if (d.ΔⲆᐃᐃⵠ !== "loaded") {
          d.ⵠΔᐃΔⵠ.push({
            event: "mute",
            action: function () {
              d.ⲆⲆΔⵠⲆⵠᐃ(b, c);
            }
          });
          return d;
        }
        if (c === undefined) {
          if (typeof b != "boolean") {
            return d.ᐃⲆⵠᐃᐃ;
          }
          d.ᐃⲆⵠᐃᐃ = b;
        }
        for (var e = d.ᐃΔⲆⲆⲆ(c), g = 0; g < e.length; g++) {
          var h = d.ⵠⵠⲆᐃⲆ(e[g]);
          if (h) {
            h.ᐃⲆⵠᐃᐃ = b;
            if (d.ᐃᐃⵠΔᐃ && h.ⵠⵠⲆⵠ) {
              h.ⵠⵠⲆⵠ.gain.setValueAtTime(b ? 0 : h.ⲆⲆΔΔᐃ, f.Δ.currentTime);
            } else if (h.ⵠⵠⲆⵠ) {
              h.ⵠⵠⲆⵠ.muted = !!f.ᐃⲆⵠᐃᐃ || b;
            }
            d.ⵠᐃΔΔⲆ("mute", h.ᐃᐃᐃᐃ);
          }
        }
        return d;
      },
      volume: function () {
        var b;
        var c;
        var d;
        var g = this;
        var h = arguments;
        if (yj === h.length) {
          return g.ⲆⲆΔΔᐃ;
        }
        if (sc === h.length || h.length === 2 && h[1] === undefined) {
          if (g.ᐃΔⲆⲆⲆ().indexOf(h[0]) >= 0) {
            c = parseInt(h[An], 10);
          } else {
            b = parseFloat(h[0]);
          }
        } else if (h.length >= X) {
          b = parseFloat(h[0]);
          c = parseInt(h[Gt], Wg);
        }
        if (b === undefined || b < 0 || b > 1) {
          if (d = c ? g.ⵠⵠⲆᐃⲆ(c) : g.ⵠⵠᐃᐃⲆ[An]) {
            return d.ⲆⲆΔΔᐃ;
          } else {
            return 0;
          }
        }
        if (g.ΔⲆᐃᐃⵠ !== "loaded") {
          g.ⵠΔᐃΔⵠ.push({
            event: "volume",
            action: function () {
              g.volume.apply(g, h);
            }
          });
          return g;
        }
        if (c === undefined) {
          g.ⲆⲆΔΔᐃ = b;
        }
        c = g.ᐃΔⲆⲆⲆ(c);
        for (var j = Md; j < c.length; j++) {
          if (d = g.ⵠⵠⲆᐃⲆ(c[j])) {
            d.ⲆⲆΔΔᐃ = b;
            if (!h[2]) {
              g.ΔᐃΔΔⵠⲆⵠ(c[j]);
            }
            if (g.ᐃᐃⵠΔᐃ && d.ⵠⵠⲆⵠ && !d.ᐃⲆⵠᐃᐃ) {
              d.ⵠⵠⲆⵠ.gain.setValueAtTime(b, f.Δ.currentTime);
            } else if (d.ⵠⵠⲆⵠ && !d.ᐃⲆⵠᐃᐃ) {
              d.ⵠⵠⲆⵠ.volume = b * f.volume();
            }
            g.ⵠᐃΔΔⲆ("volume", d.ᐃᐃᐃᐃ);
          }
        }
        return g;
      },
      fade: function (j, e, i, k) {
        var m = this;
        var n = Math.abs(j - e);
        var a = j > e ? "out" : "in";
        var o = n / 0.01;
        var p = o > 0 ? i / o : i;
        if (p < eh) {
          o = Math.ceil(o / (4 / p));
          p = hr;
        }
        if (m.ΔⲆᐃᐃⵠ !== "loaded") {
          m.ⵠΔᐃΔⵠ.push({
            event: "fade",
            action: function () {
              m.fade(j, e, i, k);
            }
          });
          return m;
        }
        m.volume(j, k);
        for (var q = m.ᐃΔⲆⲆⲆ(k), g = 0; g < q.length; g++) {
          var r = m.ⵠⵠⲆᐃⲆ(q[g]);
          if (r) {
            if (!k) {
              m.ΔᐃΔΔⵠⲆⵠ(q[g]);
            }
            if (m.ᐃᐃⵠΔᐃ && !r.ᐃⲆⵠᐃᐃ) {
              var s = f.Δ.currentTime;
              var t = s + i / 1000;
              r.ⲆⲆΔΔᐃ = j;
              r.ⵠⵠⲆⵠ.gain.setValueAtTime(j, s);
              r.ⵠⵠⲆⵠ.gain.linearRampToValueAtTime(e, t);
            }
            var w = j;
            r.ᐃⲆΔΔⵠᐃⵠ = setInterval(function (b, c) {
              if (o > gl) {
                w += a === "in" ? 0.01 : -0.01;
              }
              w = Math.max(Ah, w);
              w = Math.min(ig, w);
              w = Math.round(yg * w) / bn;
              if (m.ᐃᐃⵠΔᐃ) {
                if (k === undefined) {
                  m.ⲆⲆΔΔᐃ = w;
                }
                c.ⲆⲆΔΔᐃ = w;
              } else {
                m.volume(w, b, !Qr);
              }
              if (e < j && w <= e || e > j && w >= e) {
                clearInterval(c.ᐃⲆΔΔⵠᐃⵠ);
                c.ᐃⲆΔΔⵠᐃⵠ = null;
                m.volume(e, b);
                m.ⵠᐃΔΔⲆ("fade", b);
              }
            }.bind(m, q[g], r), p);
          }
        }
        return m;
      },
      ΔᐃΔΔⵠⲆⵠ: function (a) {
        var b = this;
        var c = b.ⵠⵠⲆᐃⲆ(a);
        if (c && c.ᐃⲆΔΔⵠᐃⵠ) {
          if (b.ᐃᐃⵠΔᐃ) {
            c.ⵠⵠⲆⵠ.gain.cancelScheduledValues(f.Δ.currentTime);
          }
          clearInterval(c.ᐃⲆΔΔⵠᐃⵠ);
          c.ᐃⲆΔΔⵠᐃⵠ = null;
          b.ⵠᐃΔΔⲆ("fade", a);
        }
        return b;
      },
      loop: function () {
        var b;
        var c;
        var d;
        var f = this;
        var g = arguments;
        if (qu === g.length) {
          return f.ⲆⲆΔⵠᐃ;
        }
        if (g.length === 1) {
          if (typeof g[0] != "boolean") {
            return !!(d = f.ⵠⵠⲆᐃⲆ(parseInt(g[0], 10))) && d.ⲆⲆΔⵠᐃ;
          }
          b = g[Ah];
          f.ⲆⲆΔⵠᐃ = b;
        } else if (Nr === g.length) {
          b = g[Ih];
          c = parseInt(g[sc], 10);
        }
        for (var h = f.ᐃΔⲆⲆⲆ(c), j = 0; j < h.length; j++) {
          if (d = f.ⵠⵠⲆᐃⲆ(h[j])) {
            d.ⲆⲆΔⵠᐃ = b;
            if (f.ᐃᐃⵠΔᐃ && d.ⵠⵠⲆⵠ && d.ⵠⵠⲆⵠ.ⲆΔΔΔⵠ) {
              d.ⵠⵠⲆⵠ.ⲆΔΔΔⵠ.loop = b;
              if (b) {
                d.ⵠⵠⲆⵠ.ⲆΔΔΔⵠ.loopStart = d.ⲆᐃᐃⲆⲆ || Rl;
                d.ⵠⵠⲆⵠ.ⲆΔΔΔⵠ.loopEnd = d.ΔΔᐃⲆⲆⲆᐃ;
              }
            }
          }
        }
        return f;
      },
      rate: function () {
        var b;
        var c;
        var d;
        var g = this;
        var j = arguments;
        if (yj === j.length) {
          c = g.ⵠⵠᐃᐃⲆ[Rl].ᐃᐃᐃᐃ;
        } else if (sc === j.length) {
          if (g.ᐃΔⲆⲆⲆ().indexOf(j[xq]) >= gl) {
            c = parseInt(j[Ih], 10);
          } else {
            b = parseFloat(j[0]);
          }
        } else if (On === j.length) {
          b = parseFloat(j[Aa]);
          c = parseInt(j[Ek], Li);
        }
        if (typeof b != "number") {
          if (d = g.ⵠⵠⲆᐃⲆ(c)) {
            return d.ⲆⲆⲆⲆᐃ;
          } else {
            return g.ⲆⲆⲆⲆᐃ;
          }
        }
        if (g.ΔⲆᐃᐃⵠ !== "loaded") {
          g.ⵠΔᐃΔⵠ.push({
            event: "rate",
            action: function () {
              g.rate.apply(g, j);
            }
          });
          return g;
        }
        if (c === undefined) {
          g.ⲆⲆⲆⲆᐃ = b;
        }
        c = g.ᐃΔⲆⲆⲆ(c);
        for (var k = qb; k < c.length; k++) {
          if (d = g.ⵠⵠⲆᐃⲆ(c[k])) {
            d.ⲆᐃⲆᐃΔΔΔ = g.ΔᐃᐃᐃⲆᐃΔ(c[k]);
            d.ᐃᐃⲆⵠΔΔⲆ = g.ᐃᐃⵠΔᐃ ? f.Δ.currentTime : d.ᐃᐃⲆⵠΔΔⲆ;
            d.ⲆⲆⲆⲆᐃ = b;
            if (g.ᐃᐃⵠΔᐃ && d.ⵠⵠⲆⵠ && d.ⵠⵠⲆⵠ.ⲆΔΔΔⵠ) {
              d.ⵠⵠⲆⵠ.ⲆΔΔΔⵠ.playbackRate.value = b;
            } else if (d.ⵠⵠⲆⵠ) {
              d.ⵠⵠⲆⵠ.playbackRate = b;
            }
            var l = g.ΔᐃᐃᐃⲆᐃΔ(c[k]);
            var m = ((g.ⵠΔⵠⵠⵠ[d.ⵠΔⵠⵠⵠ][Aa] + g.ⵠΔⵠⵠⵠ[d.ⵠΔⵠⵠⵠ][Co]) / 1000 - l) * 1000 / Math.abs(d.ⲆⲆⲆⲆᐃ);
            if (!!g.ⵠⵠᐃᐃⲆⲆⲆ[c[k]] || !d.ⵠⲆⲆⲆⲆ) {
              g.ⲆΔΔᐃⲆⲆⲆ(c[k]);
              g.ⵠⵠᐃᐃⲆⲆⲆ[c[k]] = setTimeout(g.ⵠⲆᐃⲆⲆ.bind(g, d), m);
            }
            g.ⵠᐃΔΔⲆ("rate", d.ᐃᐃᐃᐃ);
          }
        }
        return g;
      },
      ΔᐃᐃᐃⲆᐃΔ: function () {
        var b;
        var c;
        var d = this;
        var g = arguments;
        if (xq === g.length) {
          c = d.ⵠⵠᐃᐃⲆ[Gk].ᐃᐃᐃᐃ;
        } else if (g.length === 1) {
          if (d.ᐃΔⲆⲆⲆ().indexOf(g[bu]) >= Gk) {
            c = parseInt(g[Gk], 10);
          } else {
            c = d.ⵠⵠᐃᐃⲆ[0].ᐃᐃᐃᐃ;
            b = parseFloat(g[0]);
          }
        } else if (g.length === 2) {
          b = parseFloat(g[0]);
          c = parseInt(g[1], 10);
        }
        if (c === undefined) {
          return d;
        }
        if (d.ΔⲆᐃᐃⵠ !== "loaded") {
          d.ⵠΔᐃΔⵠ.push({
            event: "seek",
            action: function () {
              d.ΔᐃᐃᐃⲆᐃΔ.apply(d, g);
            }
          });
          return d;
        }
        var j = d.ⵠⵠⲆᐃⲆ(c);
        if (j) {
          if (typeof b != "number" || b < 0) {
            if (d.ᐃᐃⵠΔᐃ) {
              var k = d.ᐃⲆΔΔⵠⲆᐃ(c) ? f.Δ.currentTime - j.ᐃᐃⲆⵠΔΔⲆ : Fj;
              var a = j.ⲆᐃⲆᐃΔΔΔ ? j.ⲆᐃⲆᐃΔΔΔ - j.ⲆⲆⵠᐃᐃ : Rl;
              return j.ⲆⲆⵠᐃᐃ + (a + k * Math.abs(j.ⲆⲆⲆⲆᐃ));
            }
            return j.ⵠⵠⲆⵠ.currentTime;
          }
          var l = d.ᐃⲆΔΔⵠⲆᐃ(c);
          if (l) {
            d.pause(c, true);
          }
          j.ⲆⲆⵠᐃᐃ = b;
          j.ⵠⲆᐃⲆⲆ = false;
          d.ⲆΔΔᐃⲆⲆⲆ(c);
          if (l) {
            d.play(c, true);
          }
          if (!d.ᐃᐃⵠΔᐃ && j.ⵠⵠⲆⵠ) {
            j.ⵠⵠⲆⵠ.currentTime = b;
          }
          d.ⵠᐃΔΔⲆ("seek", c);
        }
        return d;
      },
      ᐃⲆΔΔⵠⲆᐃ: function (a) {
        var b = this;
        if (typeof a == "number") {
          var c = b.ⵠⵠⲆᐃⲆ(a);
          return !!c && !c.ⵠⲆⲆⲆⲆ;
        }
        for (var d = 0; d < b.ⵠⵠᐃᐃⲆ.length; d++) {
          if (!b.ⵠⵠᐃᐃⲆ[d].ⵠⲆⲆⲆⲆ) {
            return true;
          }
        }
        return false;
      },
      duration: function (a) {
        var b = this;
        var c = b.ᐃΔΔᐃⵠⲆΔ;
        var d = b.ⵠⵠⲆᐃⲆ(a);
        if (d) {
          c = b.ⵠΔⵠⵠⵠ[d.ⵠΔⵠⵠⵠ][1] / 1000;
        }
        return c;
      },
      state: function () {
        return this.ΔⲆᐃᐃⵠ;
      },
      ᐃΔΔⵠⵠᐃΔ: function () {
        var b = this;
        for (var c = b.ⵠⵠᐃᐃⲆ, d = fg; d < c.length; d++) {
          if (!c[d].ⵠⲆⲆⲆⲆ) {
            b.stop(c[d].ᐃᐃᐃᐃ);
          }
          if (!b.ᐃᐃⵠΔᐃ) {
            if (!/MSIE |Trident\//.test(f.ⵠⲆᐃⵠΔ && f.ⵠⲆᐃⵠΔ.userAgent)) {
              c[d].ⵠⵠⲆⵠ.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA";
            }
            c[d].ⵠⵠⲆⵠ.removeEventListener("error", c[d].ⵠΔⲆΔᐃⵠᐃ, false);
            c[d].ⵠⵠⲆⵠ.removeEventListener(f.ⲆΔⲆⲆᐃᐃᐃ, c[d].ΔⲆᐃⵠⲆⲆᐃ, !bs);
          }
          delete c[d].ⵠⵠⲆⵠ;
          b.ⲆΔΔᐃⲆⲆⲆ(c[d].ᐃᐃᐃᐃ);
          var g = f.ⵠⵠⵠⲆᐃ.indexOf(b);
          if (g >= fg) {
            f.ⵠⵠⵠⲆᐃ.splice(g, 1);
          }
        }
        var h = !fg;
        for (d = bu; d < f.ⵠⵠⵠⲆᐃ.length; d++) {
          if (f.ⵠⵠⵠⲆᐃ[d].ᐃⲆΔⵠΔ === b.ᐃⲆΔⵠΔ) {
            h = false;
            break;
          }
        }
        if (j && h) {
          delete j[b.ᐃⲆΔⵠΔ];
        }
        f.ᐃⲆⵠⵠΔᐃᐃ = !Lu;
        b.ΔⲆᐃᐃⵠ = "unloaded";
        b.ⵠⵠᐃᐃⲆ = [];
        b = null;
        return null;
      },
      on: function (a, b, c, d) {
        var e = this["_on" + a];
        if (typeof b == "function") {
          e.push(d ? {
            id: c,
            ΔᐃⲆⲆΔ: b,
            once: d
          } : {
            id: c,
            ΔᐃⲆⲆΔ: b
          });
        }
        return this;
      },
      ΔⲆΔᐃⵠⵠᐃⵠⲆ: function (b, c, d) {
        var e = this;
        var f = e["_on" + b];
        var g = 0;
        if (typeof c == "number") {
          d = c;
          c = null;
        }
        if (c || d) {
          for (g = tj; g < f.length; g++) {
            var h = d === f[g].id;
            if (c === f[g].ΔᐃⲆⲆΔ && h || !c && h) {
              f.splice(g, 1);
              break;
            }
          }
        } else if (b) {
          e["_on" + b] = [];
        } else {
          var j = Object.keys(e);
          for (g = Gg; g < j.length; g++) {
            if (j[g].indexOf("_on") === 0 && Array.isArray(e[j[g]])) {
              e[j[g]] = [];
            }
          }
        }
        return e;
      },
      once: function (a, b, c) {
        this.on(a, b, c, bs);
        return this;
      },
      ⵠᐃΔΔⲆ: function (a, b, c) {
        var d = this;
        var e = d["_on" + a];
        for (var f = e.length - wh; f >= xq; f--) {
          if (!e[f].id || e[f].id === b || a === "load") {
            setTimeout(function (a) {
              a.call(this, b, c);
            }.bind(d, e[f].ΔᐃⲆⲆΔ), fg);
            if (e[f].once) {
              d.ΔⲆΔᐃⵠⵠᐃⵠⲆ(a, e[f].ΔᐃⲆⲆΔ, e[f].id);
            }
          }
        }
        return d;
      },
      ⲆΔᐃΔⲆⲆΔ: function () {
        var a = this;
        if (a.ⵠΔᐃΔⵠ.length > 0) {
          var b = a.ⵠΔᐃΔⵠ[0];
          a.once(b.event, function () {
            a.ⵠΔᐃΔⵠ.shift();
            a.ⲆΔᐃΔⲆⲆΔ();
          });
          b.action();
        }
        return a;
      },
      ⵠⲆᐃⲆⲆ: function (a) {
        var b = this;
        var c = a.ⵠΔⵠⵠⵠ;
        if (!b.ᐃᐃⵠΔᐃ && b.ⵠⵠⲆⵠ && !b.ⵠⵠⲆⵠ.ended) {
          setTimeout(b.ⵠⲆᐃⲆⲆ.bind(b, a), 100);
          return b;
        }
        var d = !!a.ⲆⲆΔⵠᐃ || !!b.ⵠΔⵠⵠⵠ[c][Nj];
        b.ⵠᐃΔΔⲆ("end", a.ᐃᐃᐃᐃ);
        if (!b.ᐃᐃⵠΔᐃ && d) {
          b.stop(a.ᐃᐃᐃᐃ, !Qr).play(a.ᐃᐃᐃᐃ);
        }
        if (b.ᐃᐃⵠΔᐃ && d) {
          b.ⵠᐃΔΔⲆ("play", a.ᐃᐃᐃᐃ);
          a.ⲆⲆⵠᐃᐃ = a.ⲆᐃᐃⲆⲆ || 0;
          a.ⲆᐃⲆᐃΔΔΔ = gl;
          a.ᐃᐃⲆⵠΔΔⲆ = f.Δ.currentTime;
          var e = (a.ΔΔᐃⲆⲆⲆᐃ - a.ⲆᐃᐃⲆⲆ) * 1000 / Math.abs(a.ⲆⲆⲆⲆᐃ);
          b.ⵠⵠᐃᐃⲆⲆⲆ[a.ᐃᐃᐃᐃ] = setTimeout(b.ⵠⲆᐃⲆⲆ.bind(b, a), e);
        }
        if (b.ᐃᐃⵠΔᐃ && !d) {
          a.ⵠⲆⲆⲆⲆ = !tj;
          a.ⵠⲆᐃⲆⲆ = !yj;
          a.ⲆⲆⵠᐃᐃ = a.ⲆᐃᐃⲆⲆ || 0;
          a.ⲆᐃⲆᐃΔΔΔ = 0;
          b.ⲆΔΔᐃⲆⲆⲆ(a.ᐃᐃᐃᐃ);
          b.ᐃΔᐃΔⲆᐃΔ(a.ⵠⵠⲆⵠ);
          f.ΔⵠᐃΔΔⵠΔ();
        }
        if (!b.ᐃᐃⵠΔᐃ && !d) {
          b.stop(a.ᐃᐃᐃᐃ);
        }
        return b;
      },
      ⲆΔΔᐃⲆⲆⲆ: function (a) {
        var b = this;
        if (b.ⵠⵠᐃᐃⲆⲆⲆ[a]) {
          clearTimeout(b.ⵠⵠᐃᐃⲆⲆⲆ[a]);
          delete b.ⵠⵠᐃᐃⲆⲆⲆ[a];
        }
        return b;
      },
      ⵠⵠⲆᐃⲆ: function (a) {
        for (var b = this, c = Fj; c < b.ⵠⵠᐃᐃⲆ.length; c++) {
          if (a === b.ⵠⵠᐃᐃⲆ[c].ᐃᐃᐃᐃ) {
            return b.ⵠⵠᐃᐃⲆ[c];
          }
        }
        return null;
      },
      ⲆⲆⲆΔᐃᐃΔⵠⲆ: function () {
        var a = this;
        a.ΔᐃᐃᐃⲆⵠᐃᐃᐃ();
        for (var b = 0; b < a.ⵠⵠᐃᐃⲆ.length; b++) {
          if (a.ⵠⵠᐃᐃⲆ[b].ⵠⲆᐃⲆⲆ) {
            return a.ⵠⵠᐃᐃⲆ[b].reset();
          }
        }
        return new d(a);
      },
      ΔᐃᐃᐃⲆⵠᐃᐃᐃ: function () {
        var a = this;
        var b = a.ΔⵠⵠΔⲆΔⲆΔᐃ;
        var c = 0;
        var d = 0;
        if (a.ⵠⵠᐃᐃⲆ.length >= b) {
          for (d = Rl; d < a.ⵠⵠᐃᐃⲆ.length; d++) {
            if (a.ⵠⵠᐃᐃⲆ[d].ⵠⲆᐃⲆⲆ) {
              c++;
            }
          }
          for (d = a.ⵠⵠᐃᐃⲆ.length - Fb; d >= 0; d--) {
            if (c <= b) {
              return;
            }
            if (a.ⵠⵠᐃᐃⲆ[d].ⵠⲆᐃⲆⲆ) {
              if (a.ᐃᐃⵠΔᐃ && a.ⵠⵠᐃᐃⲆ[d].ⵠⵠⲆⵠ) {
                a.ⵠⵠᐃᐃⲆ[d].ⵠⵠⲆⵠ.disconnect(qb);
              }
              a.ⵠⵠᐃᐃⲆ.splice(d, 1);
              c--;
            }
          }
        }
      },
      ᐃΔⲆⲆⲆ: function (a) {
        if (a === undefined) {
          var b = [];
          for (var c = 0; c < this.ⵠⵠᐃᐃⲆ.length; c++) {
            b.push(this.ⵠⵠᐃᐃⲆ[c].ᐃᐃᐃᐃ);
          }
          return b;
        }
        return [a];
      },
      ⲆᐃⲆᐃΔⵠⵠᐃΔ: function (a) {
        a.ⵠⵠⲆⵠ.ⲆΔΔΔⵠ = f.Δ.createBufferSource();
        a.ⵠⵠⲆⵠ.ⲆΔΔΔⵠ.buffer = j[this.ᐃⲆΔⵠΔ];
        if (a.ⲆⵠⲆΔΔ) {
          a.ⵠⵠⲆⵠ.ⲆΔΔΔⵠ.connect(a.ⲆⵠⲆΔΔ);
        } else {
          a.ⵠⵠⲆⵠ.ⲆΔΔΔⵠ.connect(a.ⵠⵠⲆⵠ);
        }
        a.ⵠⵠⲆⵠ.ⲆΔΔΔⵠ.loop = a.ⲆⲆΔⵠᐃ;
        if (a.ⲆⲆΔⵠᐃ) {
          a.ⵠⵠⲆⵠ.ⲆΔΔΔⵠ.loopStart = a.ⲆᐃᐃⲆⲆ || 0;
          a.ⵠⵠⲆⵠ.ⲆΔΔΔⵠ.loopEnd = a.ΔΔᐃⲆⲆⲆᐃ;
        }
        a.ⵠⵠⲆⵠ.ⲆΔΔΔⵠ.playbackRate.value = a.ⲆⲆⲆⲆᐃ;
        return this;
      },
      ᐃΔᐃΔⲆᐃΔ: function (a) {
        var b = this;
        if (b.ⵠⵠΔᐃⲆⵠᐃ) {
          a.ⲆΔΔΔⵠ.onended = null;
          a.ⲆΔΔΔⵠ.disconnect(fg);
          try {
            a.ⲆΔΔΔⵠ.buffer = b.ⵠⵠΔᐃⲆⵠᐃ;
          } catch (a) {}
        }
        a.ⲆΔΔΔⵠ = null;
        return b;
      }
    };
    function d(a) {
      this.ⵠⲆⲆⲆⲆⲆᐃ = a;
      this.ᐃⲆⲆᐃⵠ();
    }
    d.prototype = {
      ᐃⲆⲆᐃⵠ: function () {
        var a = this;
        var b = a.ⵠⲆⲆⲆⲆⲆᐃ;
        a.ᐃⲆⵠᐃᐃ = b.ᐃⲆⵠᐃᐃ;
        a.ⲆⲆΔⵠᐃ = b.ⲆⲆΔⵠᐃ;
        a.ⲆⲆΔΔᐃ = b.ⲆⲆΔΔᐃ;
        a.ⲆⲆⲆⲆᐃ = b.ⲆⲆⲆⲆᐃ;
        a.ⲆⲆⵠᐃᐃ = Gg;
        a.ⵠⲆⲆⲆⲆ = !qb;
        a.ⵠⲆᐃⲆⲆ = !Ah;
        a.ⵠΔⵠⵠⵠ = "__default";
        a.ᐃᐃᐃᐃ = ++f.ᐃⲆⲆⵠᐃⲆΔ;
        b.ⵠⵠᐃᐃⲆ.push(a);
        a.create();
        return a;
      },
      create: function () {
        var a = this;
        var b = a.ⵠⲆⲆⲆⲆⲆᐃ;
        var c = f.ᐃⲆⵠᐃᐃ || a.ᐃⲆⵠᐃᐃ || a.ⵠⲆⲆⲆⲆⲆᐃ.ᐃⲆⵠᐃᐃ ? yj : a.ⲆⲆΔΔᐃ;
        if (b.ᐃᐃⵠΔᐃ) {
          a.ⵠⵠⲆⵠ = f.Δ.createGain === undefined ? f.Δ.ΔᐃⲆᐃⲆⵠᐃᐃⲆ() : f.Δ.createGain();
          a.ⵠⵠⲆⵠ.gain.setValueAtTime(c, f.Δ.currentTime);
          a.ⵠⵠⲆⵠ.paused = !Fj;
          a.ⵠⵠⲆⵠ.connect(f.ⵠⵠΔΔⲆᐃⵠ);
        } else {
          a.ⵠⵠⲆⵠ = new Audio();
          a.ⵠΔⲆΔᐃⵠᐃ = a.ⵠΔᐃΔⲆᐃΔⵠᐃ.bind(a);
          a.ⵠⵠⲆⵠ.addEventListener("error", a.ⵠΔⲆΔᐃⵠᐃ, !sl);
          a.ΔⲆᐃⵠⲆⲆᐃ = a.ⵠⵠⲆⵠΔⵠⲆᐃΔ.bind(a);
          a.ⵠⵠⲆⵠ.addEventListener(f.ⲆΔⲆⲆᐃᐃᐃ, a.ΔⲆᐃⵠⲆⲆᐃ, !Mg);
          a.ⵠⵠⲆⵠ.src = b.ᐃⲆΔⵠΔ;
          a.ⵠⵠⲆⵠ.preload = "auto";
          a.ⵠⵠⲆⵠ.volume = c * f.volume();
          a.ⵠⵠⲆⵠ.load();
        }
        return a;
      },
      reset: function () {
        var a = this;
        var b = a.ⵠⲆⲆⲆⲆⲆᐃ;
        a.ᐃⲆⵠᐃᐃ = b.ᐃⲆⵠᐃᐃ;
        a.ⲆⲆΔⵠᐃ = b.ⲆⲆΔⵠᐃ;
        a.ⲆⲆΔΔᐃ = b.ⲆⲆΔΔᐃ;
        a.ⲆⲆⲆⲆᐃ = b.ⲆⲆⲆⲆᐃ;
        a.ⲆⲆⵠᐃᐃ = 0;
        a.ⲆᐃⲆᐃΔΔΔ = Gg;
        a.ⵠⲆⲆⲆⲆ = !Ah;
        a.ⵠⲆᐃⲆⲆ = true;
        a.ⵠΔⵠⵠⵠ = "__default";
        a.ᐃᐃᐃᐃ = ++f.ᐃⲆⲆⵠᐃⲆΔ;
        return a;
      },
      ⵠΔᐃΔⲆᐃΔⵠᐃ: function () {
        var a = this;
        a.ⵠⲆⲆⲆⲆⲆᐃ.ⵠᐃΔΔⲆ("loaderror", a.ᐃᐃᐃᐃ, a.ⵠⵠⲆⵠ.error ? a.ⵠⵠⲆⵠ.error.code : 0);
        a.ⵠⵠⲆⵠ.removeEventListener("error", a.ⵠΔⲆΔᐃⵠᐃ, false);
      },
      ⵠⵠⲆⵠΔⵠⲆᐃΔ: function () {
        var a = this;
        var b = a.ⵠⲆⲆⲆⲆⲆᐃ;
        b.ᐃΔΔᐃⵠⲆΔ = Math.ceil(Vq * a.ⵠⵠⲆⵠ.duration) / In;
        if (Ih === Object.keys(b.ⵠΔⵠⵠⵠ).length) {
          b.ⵠΔⵠⵠⵠ = {
            ⵠⵠᐃΔⲆⵠΔⲆΔ: [0, b.ᐃΔΔᐃⵠⲆΔ * 1000]
          };
        }
        if (b.ΔⲆᐃᐃⵠ !== "loaded") {
          b.ΔⲆᐃᐃⵠ = "loaded";
          b.ⵠᐃΔΔⲆ("load");
          b.ⲆΔᐃΔⲆⲆΔ();
        }
        a.ⵠⵠⲆⵠ.removeEventListener(f.ⲆΔⲆⲆᐃᐃᐃ, a.ΔⲆᐃⵠⲆⲆᐃ, false);
      }
    };
    var j = {};
    function i(b) {
      var c = b.ᐃⲆΔⵠΔ;
      if (j[c]) {
        b.ᐃΔΔᐃⵠⲆΔ = j[c].duration;
        a(b);
        return;
      }
      if (/^data:[^;]+;base64,/.test(c)) {
        for (var d = atob(c.split(",")[1]), e = new Uint8Array(d.length), f = 0; f < d.length; ++f) {
          e[f] = d.charCodeAt(f);
        }
        m(e.buffer, b);
      } else {
        var g = new XMLHttpRequest();
        g.open("GET", c, true);
        g.responseType = "arraybuffer";
        g.onload = function () {
          var a = (g.status + "")[0];
          if (a === "0" || a === "2" || a === "3") {
            m(g.response, b);
          } else {
            b.ⵠᐃΔΔⲆ("loaderror", null, "Failed loading audio file with status: " + g.status + ".");
          }
        };
        g.onerror = function () {
          if (b.ᐃᐃⵠΔᐃ) {
            b.ⵠᐃᐃᐃΔᐃᐃ = !qb;
            b.ᐃᐃⵠΔᐃ = !ig;
            b.ⵠⵠᐃᐃⲆ = [];
            delete j[c];
            b.load();
          }
        };
        k(g);
      }
    }
    function k(a) {
      try {
        a.send();
      } catch (b) {
        a.onerror();
      }
    }
    function m(b, c) {
      f.Δ.decodeAudioData(b, function (b) {
        if (b && c.ⵠⵠᐃᐃⲆ.length > xq) {
          j[c.ᐃⲆΔⵠΔ] = b;
          a(c, b);
        }
      }, function () {
        c.ⵠᐃΔΔⲆ("loaderror", null, "Decoding audio data failed.");
      });
    }
    function a(a, b) {
      if (b && !a.ᐃΔΔᐃⵠⲆΔ) {
        a.ᐃΔΔᐃⵠⲆΔ = b.duration;
      }
      if (Object.keys(a.ⵠΔⵠⵠⵠ).length === 0) {
        a.ⵠΔⵠⵠⵠ = {
          ⵠⵠᐃΔⲆⵠΔⲆΔ: [0, a.ᐃΔΔᐃⵠⲆΔ * 1000]
        };
      }
      if (a.ΔⲆᐃᐃⵠ !== "loaded") {
        a.ΔⲆᐃᐃⵠ = "loaded";
        a.ⵠᐃΔΔⲆ("load");
        a.ⲆΔᐃΔⲆⲆΔ();
      }
    }
    function h() {
      try {
        if (typeof AudioContext != "undefined") {
          f.Δ = new AudioContext();
        } else if (typeof ΔᐃΔⵠᐃⵠᐃⵠᐃ != "undefined") {
          f.Δ = new ΔᐃΔⵠᐃⵠᐃⵠᐃ();
        } else {
          f.ᐃΔⵠⲆᐃ = false;
        }
      } catch (a) {
        f.ᐃΔⵠⲆᐃ = !Lu;
      }
      var a = /iP(hone|od|ad)/.test(f.ⵠⲆᐃⵠΔ && f.ⵠⲆᐃⵠΔ.platform);
      var b = f.ⵠⲆᐃⵠΔ && f.ⵠⲆᐃⵠΔ.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
      var c = b ? parseInt(b[1], In) : null;
      if (a && c && c < ol) {
        var d = /safari/.test(f.ⵠⲆᐃⵠΔ && f.ⵠⲆᐃⵠΔ.userAgent.toLowerCase());
        if (f.ⵠⲆᐃⵠΔ && f.ⵠⲆᐃⵠΔ.ⲆⲆⵠⵠⵠⲆⲆⵠᐃ && !d || f.ⵠⲆᐃⵠΔ && !f.ⵠⲆᐃⵠΔ.ⲆⲆⵠⵠⵠⲆⲆⵠᐃ && !d) {
          f.ᐃΔⵠⲆᐃ = false;
        }
      }
      if (f.ᐃΔⵠⲆᐃ) {
        f.ⵠⵠΔΔⲆᐃⵠ = f.Δ.createGain === undefined ? f.Δ.ΔᐃⲆᐃⲆⵠᐃᐃⲆ() : f.Δ.createGain();
        f.ⵠⵠΔΔⲆᐃⵠ.gain.value = f.ᐃⲆⵠᐃᐃ ? gl : Lu;
        f.ⵠⵠΔΔⲆᐃⵠ.connect(f.Δ.destination);
      }
      f.ⵠΔΔⵠᐃᐃᐃ();
    }
    if (typeof ⵠᐃⵠᐃⵠΔΔ == "function" && ⵠᐃⵠᐃⵠΔΔ.ⵠⵠⲆΔⵠᐃⵠ) {
      ⵠᐃⵠᐃⵠΔΔ([], function () {
        return {
          Howler: f,
          Howl: c
        };
      });
    }
    if (typeof ⵠᐃᐃΔΔΔⲆ != "undefined") {
      ⵠᐃᐃΔΔΔⲆ.Howler = f;
      ⵠᐃᐃΔΔΔⲆ.Howl = c;
    }
    if (typeof bj != "undefined") {
      bj.ⵠⵠⲆΔᐃⲆⵠ = b;
      bj.Howler = f;
      bj.Howl = c;
      bj.ᐃⲆⵠᐃⲆΔⲆ = d;
    } else if (typeof ΔΔΔⲆⲆΔⲆ != "undefined") {
      ΔΔΔⲆⲆΔⲆ.ⵠⵠⲆΔᐃⲆⵠ = b;
      ΔΔΔⲆⲆΔⲆ.Howler = f;
      ΔΔΔⲆⲆΔⲆ.Howl = c;
      ΔΔΔⲆⲆΔⲆ.ᐃⲆⵠᐃⲆΔⲆ = d;
    }
  })();
  (function () {
    ⵠⵠⲆΔᐃⲆⵠ.prototype.ΔⵠᐃΔΔ = [0, et, qb];
    ⵠⵠⲆΔᐃⲆⵠ.prototype.ᐃⲆⲆⲆΔ = [0, Ah, -Gt, 0, 1, 0];
    ⵠⵠⲆΔᐃⲆⵠ.prototype.ⵠᐃⵠⲆᐃΔⵠ = function (a) {
      var b = this;
      if (!b.Δ || !b.Δ.listener) {
        return b;
      }
      for (var c = b.ⵠⵠⵠⲆᐃ.length - 1; c >= 0; c--) {
        b.ⵠⵠⵠⲆᐃ[c].ⵠᐃⵠⲆᐃΔⵠ(a);
      }
      return b;
    };
    ⵠⵠⲆΔᐃⲆⵠ.prototype.ΔⲆⵠⲆ = function (a, b, c) {
      var d = this;
      if (d.Δ && d.Δ.listener) {
        b = typeof b != "number" ? d.ΔⵠᐃΔΔ[Fb] : b;
        c = typeof c != "number" ? d.ΔⵠᐃΔΔ[Od] : c;
        if (typeof a != "number") {
          return d.ΔⵠᐃΔΔ;
        } else {
          d.ΔⵠᐃΔΔ = [a, b, c];
          d.Δ.listener.setPosition(d.ΔⵠᐃΔΔ[tj], d.ΔⵠᐃΔΔ[er], d.ΔⵠᐃΔΔ[2]);
          return d;
        }
      } else {
        return d;
      }
    };
    ⵠⵠⲆΔᐃⲆⵠ.prototype.orientation = function (b, c, d, e, f, g) {
      var h = this;
      if (!h.Δ || !h.Δ.listener) {
        return h;
      }
      var a = h.ᐃⲆⲆⲆΔ;
      c = typeof c != "number" ? a[1] : c;
      d = typeof d != "number" ? a[ta] : d;
      e = typeof e != "number" ? a[3] : e;
      f = typeof f != "number" ? a[4] : f;
      g = typeof g != "number" ? a[gs] : g;
      if (typeof b != "number") {
        return a;
      } else {
        h.ᐃⲆⲆⲆΔ = [b, c, d, e, f, g];
        h.Δ.listener.setOrientation(b, c, d, e, f, g);
        return h;
      }
    };
    Howl.prototype.ᐃⲆⲆᐃⵠ = function (a) {
      return function (b) {
        var c = this;
        c.ᐃⲆⲆⲆΔ = b.orientation || [Ni, yj, bu];
        c.ⵠⵠⵠᐃⲆᐃΔ = b.ⵠᐃⵠⲆᐃΔⵠ || null;
        c.ΔⵠᐃΔΔ = b.ΔⲆⵠⲆ || null;
        c.Δⵠᐃᐃⵠ = {
          coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : 360,
          coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : 360,
          coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : qu,
          distanceModel: b.distanceModel !== undefined ? b.distanceModel : "inverse",
          maxDistance: b.maxDistance !== undefined ? b.maxDistance : 10000,
          panningModel: b.panningModel !== undefined ? b.panningModel : "HRTF",
          refDistance: b.refDistance !== undefined ? b.refDistance : 1,
          rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : wh
        };
        c.ⵠΔⲆⲆᐃⵠΔⵠΔ = b.ⲆᐃᐃᐃⵠⲆⵠⲆᐃ ? [{
          ΔᐃⲆⲆΔ: b.ⲆᐃᐃᐃⵠⲆⵠⲆᐃ
        }] : [];
        c.ⲆᐃᐃⵠᐃΔΔⲆᐃ = b.ᐃⲆⲆΔᐃᐃᐃⲆΔ ? [{
          ΔᐃⲆⲆΔ: b.ᐃⲆⲆΔᐃᐃᐃⲆΔ
        }] : [];
        c.ᐃᐃΔⵠⲆΔⵠⵠⵠ = b.ⲆᐃⲆⲆⵠⵠⵠᐃⵠ ? [{
          ΔᐃⲆⲆΔ: b.ⲆᐃⲆⲆⵠⵠⵠᐃⵠ
        }] : [];
        return a.call(this, b);
      };
    }(Howl.prototype.ᐃⲆⲆᐃⵠ);
    Howl.prototype.ⵠᐃⵠⲆᐃΔⵠ = function (b, c) {
      var d = this;
      if (!d.ᐃᐃⵠΔᐃ) {
        return d;
      }
      if (d.ΔⲆᐃᐃⵠ !== "loaded") {
        d.ⵠΔᐃΔⵠ.push({
          event: "stereo",
          action: function () {
            d.ⵠᐃⵠⲆᐃΔⵠ(b, c);
          }
        });
        return d;
      }
      var e = Howler.Δ.createStereoPanner === undefined ? "spatial" : "stereo";
      if (c === undefined) {
        if (typeof b != "number") {
          return d.ⵠⵠⵠᐃⲆᐃΔ;
        }
        d.ⵠⵠⵠᐃⲆᐃΔ = b;
        d.ΔⵠᐃΔΔ = [b, bu, 0];
      }
      for (var f = d.ᐃΔⲆⲆⲆ(c), g = Fj; g < f.length; g++) {
        var h = d.ⵠⵠⲆᐃⲆ(f[g]);
        if (h) {
          if (typeof b != "number") {
            return h.ⵠⵠⵠᐃⲆᐃΔ;
          }
          h.ⵠⵠⵠᐃⲆᐃΔ = b;
          h.ΔⵠᐃΔΔ = [b, Rl, 0];
          if (h.ⵠⵠⲆⵠ) {
            h.Δⵠᐃᐃⵠ.panningModel = "equalpower";
            if (!h.ⲆⵠⲆΔΔ || !h.ⲆⵠⲆΔΔ.pan) {
              a(h, e);
            }
            if (e === "spatial") {
              h.ⲆⵠⲆΔΔ.setPosition(b, 0, Ih);
            } else {
              h.ⲆⵠⲆΔΔ.pan.value = b;
            }
          }
          d.ⵠᐃΔΔⲆ("stereo", h.ᐃᐃᐃᐃ);
        }
      }
      return d;
    };
    Howl.prototype.ΔⲆⵠⲆ = function (b, c, d, e) {
      var f = this;
      if (!f.ᐃᐃⵠΔᐃ) {
        return f;
      }
      if (f.ΔⲆᐃᐃⵠ !== "loaded") {
        f.ⵠΔᐃΔⵠ.push({
          event: "pos",
          action: function () {
            f.ΔⲆⵠⲆ(b, c, d, e);
          }
        });
        return f;
      }
      c = typeof c != "number" ? Gk : c;
      d = typeof d != "number" ? -0.5 : d;
      if (e === undefined) {
        if (typeof b != "number") {
          return f.ΔⵠᐃΔΔ;
        }
        f.ΔⵠᐃΔΔ = [b, c, d];
      }
      for (var g = f.ᐃΔⲆⲆⲆ(e), i = 0; i < g.length; i++) {
        var j = f.ⵠⵠⲆᐃⲆ(g[i]);
        if (j) {
          if (typeof b != "number") {
            return j.ΔⵠᐃΔΔ;
          }
          j.ΔⵠᐃΔΔ = [b, c, d];
          if (j.ⵠⵠⲆⵠ) {
            if (!j.ⲆⵠⲆΔΔ || !!j.ⲆⵠⲆΔΔ.pan) {
              a(j, "spatial");
            }
            j.ⲆⵠⲆΔΔ.setPosition(b, c, d);
          }
          f.ⵠᐃΔΔⲆ("pos", j.ᐃᐃᐃᐃ);
        }
      }
      return f;
    };
    Howl.prototype.orientation = function (b, c, d, e) {
      var f = this;
      if (!f.ᐃᐃⵠΔᐃ) {
        return f;
      }
      if (f.ΔⲆᐃᐃⵠ !== "loaded") {
        f.ⵠΔᐃΔⵠ.push({
          event: "orientation",
          action: function () {
            f.orientation(b, c, d, e);
          }
        });
        return f;
      }
      c = typeof c != "number" ? f.ᐃⲆⲆⲆΔ[Ni] : c;
      d = typeof d != "number" ? f.ᐃⲆⲆⲆΔ[bq] : d;
      if (e === undefined) {
        if (typeof b != "number") {
          return f.ᐃⲆⲆⲆΔ;
        }
        f.ᐃⲆⲆⲆΔ = [b, c, d];
      }
      for (var g = f.ᐃΔⲆⲆⲆ(e), i = bu; i < g.length; i++) {
        var j = f.ⵠⵠⲆᐃⲆ(g[i]);
        if (j) {
          if (typeof b != "number") {
            return j.ᐃⲆⲆⲆΔ;
          }
          j.ᐃⲆⲆⲆΔ = [b, c, d];
          if (j.ⵠⵠⲆⵠ) {
            if (!j.ⲆⵠⲆΔΔ) {
              j.ΔⵠᐃΔΔ ||= f.ΔⵠᐃΔΔ || [Rl, qb, -0.5];
              a(j, "spatial");
            }
            j.ⲆⵠⲆΔΔ.setOrientation(b, c, d);
          }
          f.ⵠᐃΔΔⲆ("orientation", j.ᐃᐃᐃᐃ);
        }
      }
      return f;
    };
    Howl.prototype.ΔᐃⵠⲆᐃⵠᐃⲆᐃ = function () {
      var b;
      var c;
      var d;
      var e = this;
      var f = arguments;
      if (!e.ᐃᐃⵠΔᐃ) {
        return e;
      }
      if (et === f.length) {
        return e.Δⵠᐃᐃⵠ;
      }
      if (Ls === f.length) {
        if (typeof f[0] != "object") {
          if (d = e.ⵠⵠⲆᐃⲆ(parseInt(f[Ih], 10))) {
            return d.Δⵠᐃᐃⵠ;
          } else {
            return e.Δⵠᐃᐃⵠ;
          }
        }
        b = f[Ih];
        if (c === undefined) {
          e.Δⵠᐃᐃⵠ = {
            coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : e.ᐃⵠᐃᐃᐃΔⵠⲆᐃ,
            coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : e.ⲆΔⲆⵠΔⲆᐃᐃΔ,
            coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : e.ⵠΔⲆΔⲆⵠΔⵠᐃ,
            distanceModel: b.distanceModel !== undefined ? b.distanceModel : e.ΔᐃᐃⵠⲆⲆⲆⵠΔ,
            maxDistance: b.maxDistance !== undefined ? b.maxDistance : e.ⲆⲆΔⲆⲆⲆᐃΔᐃ,
            panningModel: b.panningModel !== undefined ? b.panningModel : e.ⵠⵠⵠΔᐃⵠⵠᐃⵠ,
            refDistance: b.refDistance !== undefined ? b.refDistance : e.ⵠⲆⵠⲆᐃⲆᐃⵠⲆ,
            rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : e.ᐃⲆⵠⵠᐃΔᐃΔⵠ
          };
        }
      } else if (f.length === 2) {
        b = f[0];
        c = parseInt(f[sc], 10);
      }
      for (var g = e.ᐃΔⲆⲆⲆ(c), j = 0; j < g.length; j++) {
        if (d = e.ⵠⵠⲆᐃⲆ(g[j])) {
          var k = d.Δⵠᐃᐃⵠ;
          k = {
            coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : k.coneInnerAngle,
            coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : k.coneOuterAngle,
            coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : k.coneOuterGain,
            distanceModel: b.distanceModel !== undefined ? b.distanceModel : k.distanceModel,
            maxDistance: b.maxDistance !== undefined ? b.maxDistance : k.maxDistance,
            panningModel: b.panningModel !== undefined ? b.panningModel : k.panningModel,
            refDistance: b.refDistance !== undefined ? b.refDistance : k.refDistance,
            rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : k.rolloffFactor
          };
          var m = d.ⲆⵠⲆΔΔ;
          if (m) {
            m.coneInnerAngle = k.coneInnerAngle;
            m.coneOuterAngle = k.coneOuterAngle;
            m.coneOuterGain = k.coneOuterGain;
            m.distanceModel = k.distanceModel;
            m.maxDistance = k.maxDistance;
            m.panningModel = k.panningModel;
            m.refDistance = k.refDistance;
            m.rolloffFactor = k.rolloffFactor;
          } else {
            d.ΔⵠᐃΔΔ ||= e.ΔⵠᐃΔΔ || [Ah, Gk, -0.5];
            a(d, "spatial");
          }
        }
      }
      return e;
    };
    ᐃⲆⵠᐃⲆΔⲆ.prototype.ᐃⲆⲆᐃⵠ = function (a) {
      return function () {
        var b = this;
        var c = b.ⵠⲆⲆⲆⲆⲆᐃ;
        b.ᐃⲆⲆⲆΔ = c.ᐃⲆⲆⲆΔ;
        b.ⵠⵠⵠᐃⲆᐃΔ = c.ⵠⵠⵠᐃⲆᐃΔ;
        b.ΔⵠᐃΔΔ = c.ΔⵠᐃΔΔ;
        b.Δⵠᐃᐃⵠ = c.Δⵠᐃᐃⵠ;
        a.call(this);
        if (b.ⵠⵠⵠᐃⲆᐃΔ) {
          c.ⵠᐃⵠⲆᐃΔⵠ(b.ⵠⵠⵠᐃⲆᐃΔ);
        } else if (b.ΔⵠᐃΔΔ) {
          c.ΔⲆⵠⲆ(b.ΔⵠᐃΔΔ[Aa], b.ΔⵠᐃΔΔ[1], b.ΔⵠᐃΔΔ[2], b.ᐃᐃᐃᐃ);
        }
      };
    }(ᐃⲆⵠᐃⲆΔⲆ.prototype.ᐃⲆⲆᐃⵠ);
    ᐃⲆⵠᐃⲆΔⲆ.prototype.reset = function (a) {
      return function () {
        var b = this;
        var c = b.ⵠⲆⲆⲆⲆⲆᐃ;
        b.ᐃⲆⲆⲆΔ = c.ᐃⲆⲆⲆΔ;
        b.ΔⵠᐃΔΔ = c.ΔⵠᐃΔΔ;
        b.Δⵠᐃᐃⵠ = c.Δⵠᐃᐃⵠ;
        return a.call(this);
      };
    }(ᐃⲆⵠᐃⲆΔⲆ.prototype.reset);
    function a(a, b) {
      b = b || "spatial";
      if (b === "spatial") {
        a.ⲆⵠⲆΔΔ = Howler.Δ.createPanner();
        a.ⲆⵠⲆΔΔ.coneInnerAngle = a.Δⵠᐃᐃⵠ.coneInnerAngle;
        a.ⲆⵠⲆΔΔ.coneOuterAngle = a.Δⵠᐃᐃⵠ.coneOuterAngle;
        a.ⲆⵠⲆΔΔ.coneOuterGain = a.Δⵠᐃᐃⵠ.coneOuterGain;
        a.ⲆⵠⲆΔΔ.distanceModel = a.Δⵠᐃᐃⵠ.distanceModel;
        a.ⲆⵠⲆΔΔ.maxDistance = a.Δⵠᐃᐃⵠ.maxDistance;
        a.ⲆⵠⲆΔΔ.panningModel = a.Δⵠᐃᐃⵠ.panningModel;
        a.ⲆⵠⲆΔΔ.refDistance = a.Δⵠᐃᐃⵠ.refDistance;
        a.ⲆⵠⲆΔΔ.rolloffFactor = a.Δⵠᐃᐃⵠ.rolloffFactor;
        a.ⲆⵠⲆΔΔ.setPosition(a.ΔⵠᐃΔΔ[0], a.ΔⵠᐃΔΔ[1], a.ΔⵠᐃΔΔ[2]);
        a.ⲆⵠⲆΔΔ.setOrientation(a.ᐃⲆⲆⲆΔ[0], a.ᐃⲆⲆⲆΔ[Ga], a.ᐃⲆⲆⲆΔ[qo]);
      } else {
        a.ⲆⵠⲆΔΔ = Howler.Δ.createStereoPanner();
        a.ⲆⵠⲆΔΔ.pan.value = a.ⵠⵠⵠᐃⲆᐃΔ;
      }
      a.ⲆⵠⲆΔΔ.connect(a.ⵠⵠⲆⵠ);
      if (!a.ⵠⲆⲆⲆⲆ) {
        a.ⵠⲆⲆⲆⲆⲆᐃ.pause(a.ᐃᐃᐃᐃ, true).play(a.ᐃᐃᐃᐃ);
      }
    }
  })();
  var Zw = Fb;
  var $w = 1;
  var _w = {
    ᐃΔΔⲆⲆᐃᐃΔΔ: 12,
    ᐃⵠⲆⲆΔ: 1,
    ⵠⲆⲆⵠᐃᐃⲆⵠΔ: 5000,
    ⲆΔᐃⵠⲆ: il,
    ⵠΔⵠ: 6,
    ΔΔⲆᐃΔ: 3,
    ΔⲆⵠᐃᐃΔⵠ: 3000,
    ᐃΔⵠᐃᐃΔⲆ: 460000,
    ΔⵠⵠΔᐃΔᐃᐃΔ: 5000,
    ⲆⵠᐃᐃⵠΔᐃⲆⲆ: 5000,
    ⲆᐃᐃΔⵠᐃΔ: 12,
    ⵠΔΔⵠ: wo,
    Ⲇᐃᐃᐃᐃⵠᐃⵠⵠ: tq
  };
  var ax = [];
  ax[-Fb] = _w.ᐃⵠⲆⲆΔ;
  ax[28] = _w.ᐃⵠⲆⲆΔ;
  ax[49] = _w.ᐃⵠⲆⲆΔ;
  ax[us.ⲆⲆⵠⲆⵠⲆᐃⲆⵠ] = _w.ⲆΔᐃⵠⲆ;
  ax[8] = _w.ⲆΔᐃⵠⲆ;
  ax[1] = _w.ⲆΔᐃⵠⲆ;
  ax[3] = _w.ⲆΔᐃⵠⲆ;
  ax[4] = _w.ⲆΔᐃⵠⲆ;
  ax[31] = _w.ⲆΔᐃⵠⲆ;
  ax[32] = _w.ⲆΔᐃⵠⲆ;
  ax[9] = _w.ⲆΔᐃⵠⲆ;
  ax[57] = _w.ⲆΔᐃⵠⲆ;
  ax[0] = _w.ⲆΔᐃⵠⲆ;
  ax[63] = _w.ⲆΔᐃⵠⲆ;
  ax[17] = _w.ⲆΔᐃⵠⲆ;
  ax[5] = _w.ⲆΔᐃⵠⲆ;
  ax[6] = _w.ⲆΔᐃⵠⲆ;
  ax[30] = _w.ⲆΔᐃⵠⲆ;
  ax[us.ᐃⲆⵠⵠⵠⵠⵠΔⲆ] = _w.ⲆΔᐃⵠⲆ;
  ax[18] = _w.ⲆΔᐃⵠⲆ;
  ax[12] = _w.ⲆΔᐃⵠⲆ;
  ax[13] = _w.ⲆΔᐃⵠⲆ;
  ax[14] = _w.ⲆΔᐃⵠⲆ;
  ax[15] = _w.ⲆΔᐃⵠⲆ;
  ax[16] = _w.ⲆΔᐃⵠⲆ;
  ax[33] = _w.ⲆΔᐃⵠⲆ;
  ax[us.ⲆⵠᐃᐃᐃⲆⵠⲆᐃ] = _w.ⲆΔᐃⵠⲆ;
  ax[35] = _w.ⲆΔᐃⵠⲆ;
  ax[36] = _w.ⲆΔᐃⵠⲆ;
  ax[37] = _w.ⲆΔᐃⵠⲆ;
  ax[38] = _w.ⲆΔᐃⵠⲆ;
  ax[39] = _w.ⲆΔᐃⵠⲆ;
  ax[45] = _w.ⲆΔᐃⵠⲆ;
  ax[62] = _w.ⲆΔᐃⵠⲆ;
  ax[54] = _w.ⲆΔᐃⵠⲆ;
  ax[53] = _w.ⲆΔᐃⵠⲆ;
  ax[46] = _w.ΔΔⲆᐃΔ;
  ax[50] = _w.ΔΔⲆᐃΔ;
  ax[51] = _w.ΔΔⲆᐃΔ;
  ax[52] = _w.ΔΔⲆᐃΔ;
  ᐃᐃⲆᐃ = [];
  ᐃᐃⲆᐃ[0] = Gk;
  ᐃᐃⲆᐃ[er] = Fb;
  ᐃᐃⲆᐃ[2] = sc;
  ᐃᐃⲆᐃ[Ou] = 1;
  ᐃᐃⲆᐃ[Og] = fg;
  ᐃᐃⲆᐃ[5] = 0;
  ᐃᐃⲆᐃ[6] = 0;
  ᐃᐃⲆᐃ[lg] = 0;
  ᐃᐃⲆᐃ[8] = bu;
  ᐃᐃⲆᐃ[$r] = 0;
  ᐃᐃⲆᐃ[Ds] = Co;
  ᐃᐃⲆᐃ[11] = wh;
  ᐃᐃⲆᐃ[$e] = _h;
  ᐃᐃⲆᐃ[ql] = sl;
  ᐃᐃⲆᐃ[Ur] = 1;
  ᐃᐃⲆᐃ[15] = Fb;
  ᐃᐃⲆᐃ[16] = 0;
  ᐃᐃⲆᐃ[A] = 0;
  ᐃᐃⲆᐃ[Dq] = qu;
  ᐃᐃⲆᐃ[Qq] = fg;
  ᐃᐃⲆᐃ[jk] = 0;
  ᐃᐃⲆᐃ[21] = 0;
  ᐃᐃⲆᐃ[22] = 0;
  ᐃᐃⲆᐃ[23] = Kg;
  ᐃᐃⲆᐃ[24] = Ek;
  ᐃᐃⲆᐃ[25] = bd;
  ᐃᐃⲆᐃ[26] = 1;
  ᐃᐃⲆᐃ[27] = Co;
  ᐃᐃⲆᐃ[28] = ck;
  ᐃᐃⲆᐃ[29] = 1;
  ᐃᐃⲆᐃ[30] = _h;
  ᐃᐃⲆᐃ[31] = Fb;
  ᐃᐃⲆᐃ[32] = 1;
  ᐃᐃⲆᐃ[33] = _h;
  ᐃᐃⲆᐃ[34] = wh;
  ᐃᐃⲆᐃ[35] = sl;
  ᐃᐃⲆᐃ[36] = bd;
  ᐃᐃⲆᐃ[37] = 1;
  ᐃᐃⲆᐃ[38] = 1;
  ᐃᐃⲆᐃ[40] = qb;
  ᐃᐃⲆᐃ[41] = 0;
  ᐃᐃⲆᐃ[42] = 0;
  ᐃᐃⲆᐃ[50] = bd;
  ᐃᐃⲆᐃ[51] = Ls;
  ᐃᐃⲆᐃ[52] = 1;
  ᐃᐃⲆᐃ[55] = 0;
  ᐃᐃⲆᐃ[56] = sb;
  ᐃᐃⲆᐃ[57] = Fj;
  ᐃᐃⲆᐃ[58] = Aa;
  ΔΔⵠΔᐃ = [];
  ΔΔⵠΔᐃ[rw.ⲆᐃⲆⵠΔ] = 0;
  ΔΔⵠΔᐃ[rw.ⲆⲆᐃΔⵠ] = tj;
  ΔΔⵠΔᐃ[rw.ⵠⲆⵠⲆⲆ] = gl;
  ΔΔⵠΔᐃ[rw.ᐃΔΔᐃⲆ] = gl;
  ΔΔⵠΔᐃ[rw.ᐃⵠⵠⵠⵠ] = -ck;
  ΔΔⵠΔᐃ[rw.ⵠⵠᐃⲆⵠ] = -1;
  ΔΔⵠΔᐃ[rw.ΔⲆⵠⲆⲆ] = 0;
  ΔΔⵠΔᐃ[rw.ᐃⵠⵠⲆⵠ] = gl;
  ΔΔⵠΔᐃ[rw.ΔΔᐃΔⵠ] = Ah;
  ΔΔⵠΔᐃ[rw.ΔΔⲆⲆⲆ] = 0;
  ΔΔⵠΔᐃ[rw.ᐃⲆᐃⲆⲆ] = 1;
  ΔΔⵠΔᐃ[rw.ΔⲆⲆΔⲆ] = Ga;
  ΔΔⵠΔᐃ[rw.ⵠᐃᐃᐃᐃ] = 1;
  ΔΔⵠΔᐃ[rw.ΔᐃΔⵠᐃ] = 1;
  ΔΔⵠΔᐃ[rw.ⲆᐃⵠⲆΔ] = 1;
  ΔΔⵠΔᐃ[rw.ΔΔⲆᐃᐃ] = sl;
  ΔΔⵠΔᐃ[rw.ⲆⲆⲆᐃΔ] = er;
  ΔΔⵠΔᐃ[rw.ⲆΔⵠΔⵠ] = Gk;
  ΔΔⵠΔᐃ[rw.ΔᐃⲆᐃⵠ] = sl;
  ΔΔⵠΔᐃ[rw.ⵠⵠᐃⲆⲆ] = 1;
  ΔΔⵠΔᐃ[rw.ⵠΔΔΔᐃ] = 1;
  ΔΔⵠΔᐃ[rw.ᐃΔⲆΔΔ] = 1;
  ΔΔⵠΔᐃ[rw.ⲆΔΔⵠⲆ] = 1;
  ΔΔⵠΔᐃ[rw.Ⲇⵠⵠⵠᐃ] = fg;
  ΔΔⵠΔᐃ[rw.ⵠΔΔᐃⲆ] = 1;
  ΔΔⵠΔᐃ[rw.ⲆⵠᐃⲆΔ] = 1;
  ΔΔⵠΔᐃ[rw.ⲆΔⲆⲆⲆ] = 1;
  ΔΔⵠΔᐃ[rw.ⵠΔᐃⵠⵠ] = 1;
  ΔΔⵠΔᐃ[rw.ΔΔⲆⵠᐃ] = Lu;
  ΔΔⵠΔᐃ[rw.ΔΔⵠᐃⵠ] = Ih;
  ΔΔⵠΔᐃ[rw.ᐃᐃⲆᐃⲆ] = bs;
  ΔΔⵠΔᐃ[rw.ᐃⲆⵠⲆⲆ] = 1;
  ΔΔⵠΔᐃ[rw.ⲆᐃΔᐃⵠ] = Gt;
  ΔΔⵠΔᐃ[rw.ⲆⲆΔᐃⵠ] = 1;
  ΔΔⵠΔᐃ[rw.ᐃΔⲆⲆⵠ] = 1;
  ΔΔⵠΔᐃ[rw.ᐃᐃΔⲆⵠ] = ck;
  ΔΔⵠΔᐃ[rw.ⲆⵠⲆⵠᐃ] = 1;
  ΔΔⵠΔᐃ[rw.ⵠⵠⲆⲆⲆ] = Ls;
  ΔΔⵠΔᐃ[rw.ⵠⲆᐃᐃΔ] = 0;
  ΔΔⵠΔᐃ[rw.ⲆⵠⲆⵠⵠ] = 1;
  var ef = {
    ⲆᐃᐃⲆΔᐃᐃ: {
      ᐃⵠΔΔᐃ: null,
      path: ["audio/ambience.mp3"],
      ᐃΔ: {
        d1: [90391, 300, Tg],
        d2: [90684, 300, ia],
        d0: [90086, 300, Jn]
      },
      sample: {
        d0: _w.ⵠΔΔⵠ,
        d1: _w.ⵠΔΔⵠ,
        d2: _w.ⵠΔΔⵠ
      }
    },
    ΔⵠΔⲆⲆᐃⲆ: {
      ᐃⵠΔΔᐃ: null,
      path: ["audio/ambience.mp3"],
      ᐃΔ: {
        p2: [89815, 300, false],
        p1: [89549, 300, Hj],
        p0: [89303, 300, li]
      },
      sample: {
        p0: _w.ⵠΔΔⵠ,
        p1: _w.ⵠΔΔⵠ,
        p2: _w.ⵠΔΔⵠ
      }
    },
    ΔᐃᐃΔⲆᐃᐃ: {
      ᐃⵠΔΔᐃ: null,
      path: ["audio/ambience.mp3"],
      ᐃΔ: {
        w1: [88473, 300, false],
        w2: [88751, 300, Ge],
        w0: [88195, 300, false],
        w3: [89025, 300, false]
      },
      sample: {
        w0: _w.ⵠΔΔⵠ,
        w1: _w.ⵠΔΔⵠ,
        w2: _w.ⵠΔΔⵠ,
        w3: _w.ⵠΔΔⵠ
      }
    },
    ᐃΔᐃᐃΔΔΔ: {
      ᐃⵠΔΔᐃ: null,
      path: ["audio/ambience.mp3"],
      ᐃΔ: {
        ᐃⵠᐃᐃⲆⲆⵠ: [31658, 813, Pq],
        ⵠᐃⵠΔᐃΔΔ: [66014, 925, gk],
        ᐃΔⲆⲆⵠᐃⵠ: [32604, 21890, oh],
        ΔⲆᐃⵠⵠ: [91431, 400, false],
        ᐃᐃⵠᐃᐃⲆΔ: [92249, 500, tr],
        ⲆⲆⲆⵠⲆ: [28380, 1797, true],
        ΔⲆΔⵠΔⵠⵠ: [19882, 8301, true],
        ⲆⵠΔⵠΔⲆᐃ: [30562, 655, bh],
        ᐃΔⵠᐃⵠΔΔ: [66961, 21223, rg],
        ᐃⵠᐃⲆⵠ: [12356, 6965, oh],
        ⵠⲆⵠΔⵠⵠⲆ: [91022, 400, Ge],
        ᐃᐃⲆⵠⲆΔⵠ: [3100, 8800, true],
        ΔⲆᐃΔΔᐃⲆ: [66961, 21223, true],
        ⵠⲆⵠᐃᐃΔⲆⲆⲆ: [100, 2800, true],
        ⵠⵠⵠΔᐃΔᐃ: [54524, 11393, bh]
      },
      sample: {
        ⵠⲆⵠᐃᐃΔⲆⲆⲆ: 1,
        ᐃᐃⲆⵠⲆΔⵠ: 1,
        ΔⲆΔⵠΔⵠⵠ: 1,
        ᐃΔⲆⲆⵠᐃⵠ: 1,
        ⵠⵠⵠΔᐃΔᐃ: Kg,
        ᐃΔⵠᐃⵠΔΔ: ck,
        ΔⲆᐃΔΔᐃⲆ: wh,
        ᐃⵠᐃⲆⵠ: _w.ⵠΔΔⵠ,
        ⲆⲆⲆⵠⲆ: _w.ⵠΔΔⵠ,
        ⲆⵠΔⵠΔⲆᐃ: _w.ⵠΔΔⵠ,
        ᐃⵠᐃᐃⲆⲆⵠ: _w.ⵠΔΔⵠ,
        ⵠᐃⵠΔᐃΔΔ: _w.ⵠΔΔⵠ,
        ⵠⲆⵠΔⵠⵠⲆ: _w.ⵠΔⵠ,
        ΔⲆᐃⵠⵠ: _w.ⵠΔⵠ,
        ᐃᐃⵠᐃᐃⲆΔ: _w.ⵠΔⵠ
      }
    }
  };
  function tf(a, b, c, d, e) {
    qk(yw, a, b, c, d, e);
    const f = Xw(xw[0], xw[Fb], xw[ta], xw[3], xw[Og], xw[tj]);
    Xw(xw[Ls], xw[Ht], xw[Z], xw[ge], xw[0], xw[1]);
    return (f | 49168) & ~(f & 49168);
  }
  function nf(b, c, d, e, f, i, j, a, k, h, l) {
    this.r = 1;
    this.ⵠⵠⵠⵠⵠ = b;
    this.ⲆⵠⵠⵠᐃⲆⲆ = b;
    this.ⵠⲆΔ = c;
    this.ᐃⵠⵠ = d;
    this.fade = e;
    this.ⲆⵠΔᐃⲆⲆᐃ = f;
    this.ΔᐃᐃΔᐃⲆᐃ = i;
    this.ᐃᐃⲆⵠ = j;
    this.ΔⵠⵠⵠⲆⲆⵠ = a;
    this.source = k;
    this.source.ᐃⵠⲆⵠᐃΔⵠ = k.x + k.w;
    this.source.ᐃⵠⲆΔΔ = k.y + k.ⵠΔⲆ;
    this.ᐃⲆᐃⲆⵠΔΔⵠᐃ = h;
    this.ⵠᐃΔΔᐃⲆΔ = l;
    this.ΔΔΔᐃᐃⲆⵠ = 0;
    this.ΔⲆᐃⵠⵠⵠᐃ = {
      ᐃΔΔⲆ: Eg,
      d: Sj
    };
    this.ⲆΔⲆⲆⵠ = function () {
      this.ⵠⵠⵠⵠⵠ -= hx;
      if (this.ⵠⵠⵠⵠⵠ < Gg) {
        this.ⵠⵠⵠⵠⵠ = this.ⲆⵠⵠⵠᐃⲆⲆ;
        var a = ef.ᐃΔᐃᐃΔΔΔ.ᐃⵠΔΔᐃ.playing(this.ⵠⲆΔ);
        var b = ef.ᐃΔᐃᐃΔΔΔ.ᐃⵠΔΔᐃ.playing(this.ᐃⵠⵠ);
        if (a && !b) {
          var c = this.ᐃᐃⲆⵠ.volume(this.ⵠⲆΔ) * $w;
          var d = $w * (Math.random() * this.ΔᐃᐃΔᐃⲆᐃ + this.ⲆⵠΔᐃⲆⲆᐃ);
          this.ᐃᐃⲆⵠ.fade(c, d, this.fade, this.ⵠⲆΔ);
        } else if (!a && b) {
          c = $w * this.ᐃᐃⲆⵠ.volume(this.ᐃⵠⵠ);
          d = (this.ΔᐃᐃΔᐃⲆᐃ * Math.random() + this.ⲆⵠΔᐃⲆⲆᐃ) * $w;
          this.ᐃᐃⲆⵠ.fade(c, d, this.fade, this.ᐃⵠⵠ);
        }
      }
    };
    this.transition = function () {
      this.ⵠⵠⵠⵠⵠ = this.ⲆⵠⵠⵠᐃⲆⲆ;
      this.ΔⲆᐃⵠⵠⵠᐃ.d = this.ΔⲆᐃⵠⵠⵠᐃ.ᐃΔΔⲆ;
      if (ff.time) {
        this.ᐃᐃⲆⵠ.fade(0, $w * this.ⲆⵠΔᐃⲆⲆᐃ, this.ΔⵠⵠⵠⲆⲆⵠ, this.ⵠⲆΔ);
        this.ᐃᐃⲆⵠ.play(this.ⵠⲆΔ);
        if (this.ᐃᐃⲆⵠ.playing(this.ᐃⵠⵠ)) {
          var a = $w * this.ᐃᐃⲆⵠ.volume(this.ᐃⵠⵠ);
          this.ᐃᐃⲆⵠ.fade(a, 0, this.ΔⵠⵠⵠⲆⲆⵠ, this.ᐃⵠⵠ);
        }
      } else {
        this.ᐃᐃⲆⵠ.fade(sb, $w * this.ⲆⵠΔᐃⲆⲆᐃ, this.ΔⵠⵠⵠⲆⲆⵠ, this.ᐃⵠⵠ);
        this.ᐃᐃⲆⵠ.play(this.ᐃⵠⵠ);
        if (this.ᐃᐃⲆⵠ.playing(this.ⵠⲆΔ)) {
          a = $w * this.ᐃᐃⲆⵠ.volume(this.ⵠⲆΔ);
          this.ᐃᐃⲆⵠ.fade(a, qu, this.ΔⵠⵠⵠⲆⲆⵠ, this.ⵠⲆΔ);
        }
      }
    };
    this.check = function (a) {
      if (this.ΔΔΔᐃᐃⲆⵠ) {
        if (ᐃΔᐃⵠ.ⵠᐃΔΔᐃⲆΔ(a, this.ᐃⲆᐃⲆⵠΔΔⵠᐃ)) {
          if (!gx.transition && _w.ᐃΔⵠᐃᐃΔⲆ > ff.ᐃⵠⲆⵠⵠ.now) {
            if (ff.time) {
              if (!this.ᐃᐃⲆⵠ.playing(this.ⵠⲆΔ)) {
                this.ΔⲆᐃⵠⵠⵠᐃ.d -= hx;
                if (this.ΔⲆᐃⵠⵠⵠᐃ.d < gl) {
                  this.transition();
                }
              }
            } else if (!this.ᐃᐃⲆⵠ.playing(this.ᐃⵠⵠ)) {
              this.ΔⲆᐃⵠⵠⵠᐃ.d -= hx;
              if (this.ΔⲆᐃⵠⵠⵠᐃ.d < 0) {
                this.transition();
              }
            }
          }
        } else {
          this.ΔΔΔᐃᐃⲆⵠ = 0;
          if (this.ᐃᐃⲆⵠ.playing(this.ⵠⲆΔ)) {
            var b = $w * this.ᐃᐃⲆⵠ.volume(this.ⵠⲆΔ);
            this.ᐃᐃⲆⵠ.fade(b, 0, this.ΔⵠⵠⵠⲆⲆⵠ, this.ⵠⲆΔ);
          }
          if (this.ᐃᐃⲆⵠ.playing(this.ᐃⵠⵠ)) {
            b = $w * this.ᐃᐃⲆⵠ.volume(this.ᐃⵠⵠ);
            this.ᐃᐃⲆⵠ.fade(b, 0, this.ΔⵠⵠⵠⲆⲆⵠ, this.ᐃⵠⵠ);
          }
        }
      } else if (ᐃΔᐃⵠ.ⵠᐃΔΔᐃⲆΔ(a, this.ⵠᐃΔΔᐃⲆΔ)) {
        this.ΔΔΔᐃᐃⲆⵠ = 1;
        if (!gx.transition && _w.ᐃΔⵠᐃᐃΔⲆ > ff.ᐃⵠⲆⵠⵠ.now) {
          this.transition();
        }
      }
    };
    this.ⲆᐃⲆ = function (a, b) {
      var c;
      var d;
      c = a.x < this.source.x ? gx.ⵠᐃⲆΔΔⲆᐃ(this.source.x) : this.source.ᐃⵠⲆⵠᐃΔⵠ < a.x ? gx.ⵠᐃⲆΔΔⲆᐃ(this.source.ᐃⵠⲆⵠᐃΔⵠ) : b.x;
      d = a.y < this.source.y ? gx.ΔᐃⲆᐃᐃⵠᐃ(this.source.y) : a.y > this.source.ᐃⵠⲆΔΔ ? gx.ΔᐃⲆᐃᐃⵠᐃ(this.source.ᐃⵠⲆΔΔ) : b.y;
      this.ᐃᐃⲆⵠ.pos(c, d, -0.5, this.ⵠⲆΔ);
      this.ᐃᐃⲆⵠ.pos(c, d, -0.5, this.ᐃⵠⵠ);
    };
  }
  ΔⵠᐃⲆⵠ = {
    ⵠⲆⵠᐃⲆⲆⲆ: tk,
    ΔΔᐃⲆⵠᐃΔ: 1,
    ΔᐃᐃᐃᐃⲆᐃΔᐃ: 0.4,
    ⲆⵠΔⵠⵠᐃΔⵠⵠ: 0.2,
    ᐃᐃΔⲆᐃᐃⵠ: Re,
    ⵠⲆⵠⲆⵠᐃⲆᐃⵠ: 0.2,
    ΔΔⵠΔⵠⵠⲆⵠⵠ: 0.2,
    ᐃᐃᐃᐃⵠᐃⲆ: 0,
    ⲆΔΔᐃⲆᐃⵠ: 300,
    ᐃⵠᐃᐃᐃᐃᐃ: aq,
    ⲆΔⲆⲆΔ: Nj,
    ᐃⵠⵠⲆᐃᐃᐃ: Re,
    ΔⵠᐃⵠⲆⲆⵠ: 100,
    ᐃΔᐃᐃΔᐃⲆ: Cs
  };
  function of(a, b, c) {
    this.ΔⲆΔⲆⲆΔⵠ = a;
    this.c = 0;
    this.ᐃᐃⲆⵠ = b;
    this.ⵠⵠⵠᐃᐃ = c;
    this.max = c.length;
    this.play = function () {
      this.c = (this.c + 1) % this.max;
      var a = this.ⵠⵠⵠᐃᐃ[this.c];
      this.ΔⲆΔⲆⲆΔⵠ.ΔᐃⲆⲆⵠⲆⲆ(this.ᐃᐃⲆⵠ, a);
      this.ᐃᐃⲆⵠ.play(a);
    };
  }
  function rf(a) {
    this.ΔΔᐃⵠᐃⵠⵠ = Kg;
    this.ΔᐃᐃΔ = 0;
    this.mode = -ck;
    this.ⲆⲆⲆⵠⲆ = gx.sample.ⲆⲆⲆⵠⲆ[a];
    this.ⲆⵠΔⵠΔⲆᐃ = gx.sample.ⲆⵠΔⵠΔⲆᐃ[a];
    this.ᐃⵠᐃᐃⲆⲆⵠ = gx.sample.ᐃⵠᐃᐃⲆⲆⵠ[a];
    this.ⵠᐃⵠΔᐃΔΔ = gx.sample.ⵠᐃⵠΔᐃΔΔ[a];
    this.ⲆΔΔⲆⲆᐃⲆ = new of(this, ef.ΔⵠΔⲆⲆᐃⲆ.ᐃⵠΔΔᐃ, gx.ⵠᐃⵠΔΔ.ⲆΔΔⲆⲆᐃⲆ[a]);
    this.ⵠᐃⲆΔⵠ = new of(this, ef.ΔᐃᐃΔⲆᐃᐃ.ᐃⵠΔΔᐃ, gx.ⵠᐃⵠΔΔ.ⵠᐃⲆΔⵠ[a]);
    this.ᐃΔⲆⵠΔ = new of(this, ef.ⲆᐃᐃⲆΔᐃᐃ.ᐃⵠΔΔᐃ, gx.ⵠᐃⵠΔΔ.ᐃΔⲆⵠΔ[a]);
    this.ΔⵠⵠⵠⲆ = a;
    this.x = tj;
    this.y = 0;
    this.ⲆΔⵠⲆΔ = Gg;
    this.ⵠⵠⵠⵠⵠ = ΔⵠᐃⲆⵠ.ΔΔᐃΔΔᐃᐃⲆΔ;
    this.ΔⲆⵠⲆ = {
      y: Rl,
      x: xq
    };
    this.ΔΔᐃⵠᐃ = ef.ᐃΔᐃᐃΔΔΔ.ᐃⵠΔΔᐃ;
    this.ⵠᐃⵠⲆΔΔᐃⲆⵠ = function (a) {
      if (a === _w.ᐃⵠⲆⲆΔ) {
        this.ⲆΔΔⲆⲆᐃⲆ.play();
      } else if (a === _w.ⲆΔᐃⵠⲆ) {
        this.ⵠᐃⲆΔⵠ.play();
      } else if (a === _w.ΔΔⲆᐃΔ) {
        this.ᐃΔⲆⵠΔ.play();
      }
    };
    this.ᐃΔⲆΔΔⵠΔ = function (a) {
      if (Md < a.ⵠⵠⵠⲆᐃᐃⲆ) {
        return ΔⵠᐃⲆⵠ.ⲆΔⲆⲆΔ;
      } else if (Gk < a.ΔⲆⲆᐃⲆᐃⲆ) {
        return ΔⵠᐃⲆⵠ.ΔΔᐃⲆⵠᐃΔ;
      } else if (sb < a.ᐃᐃᐃⵠⵠ || a.ΔⵠΔᐃᐃ > Md) {
        return ΔⵠᐃⲆⵠ.ᐃΔᐃᐃΔᐃⲆ;
      } else {
        return ΔⵠᐃⲆⵠ.ᐃᐃᐃᐃⵠᐃⲆ;
      }
    };
    this.ᐃⲆⲆᐃⵠ = function (a) {
      this.ΔΔᐃⵠᐃⵠⵠ = 0;
      this.ΔᐃᐃΔ = a;
      var b = ff.ⵠΔΔⲆ[a];
      b.ΔⵠⵠⵠⲆ = this.ΔⵠⵠⵠⲆ;
      this.mode = this.ᐃΔⲆΔΔⵠΔ(b);
      this.ΔⲆⵠⲆ.x = b.x;
      this.ΔⲆⵠⲆ.y = b.y;
    };
    this.ΔᐃΔⲆΔᐃⲆ = function () {
      this.ΔΔᐃⵠᐃⵠⵠ = 1;
      this.mode = -Co;
      this.ΔΔᐃⵠᐃ.stop(this.ⲆⲆⲆⵠⲆ);
      this.ΔΔᐃⵠᐃ.stop(this.ⲆⵠΔⵠΔⲆᐃ);
      this.ΔΔᐃⵠᐃ.stop(this.ᐃⵠᐃᐃⲆⲆⵠ);
      this.ΔΔᐃⵠᐃ.stop(this.ⵠᐃⵠΔᐃΔΔ);
    };
    this.fade = function (a, b) {
      var c = this.ΔΔᐃⵠᐃ.volume(a) * Zw;
      this.ΔΔᐃⵠᐃ.fade(c, bu, b, a);
    };
    this.ΔᐃⲆⲆⵠⲆⲆ = function (a, b) {
      if (this.ⲆΔⵠⲆΔ && this.ΔⵠⵠⵠⲆ) {
        a.pos(this.x, this.y, -0.5, b);
      }
    };
    this.ⲆΔⲆⲆⵠ = function (b, c, d, e, f, g, i) {
      this.ⵠⵠⵠⵠⵠ = g;
      if (e && this.mode === f) {
        var a = Zw * this.ΔΔᐃⵠᐃ.volume(b);
        if (this.ⲆΔⵠⲆΔ) {
          var j = Zw * (d * Math.random() + c);
          this.ΔΔᐃⵠᐃ.fade(a, j, i, b);
        } else {
          this.ΔΔᐃⵠᐃ.fade(a, 0, i, b);
        }
      } else if (f != this.mode && this.ⲆΔⵠⲆΔ) {
        this.ΔΔᐃⵠᐃ.fade(Gg, Zw * (c + d), i, b);
      } else if (this.ⲆΔⵠⲆΔ) {
        a = Zw * this.ΔΔᐃⵠᐃ.volume(b);
        j = (d * Math.random() + c) * Zw;
        this.ΔΔᐃⵠᐃ.fade(a, j, i, b);
      }
      this.ΔᐃⲆⲆⵠⲆⲆ(this.ΔΔᐃⵠᐃ, b);
      this.ΔΔᐃⵠᐃ.play(b);
    };
    this.ⲆᐃⲆ = function () {
      var a = ff.ⵠΔΔⲆ[this.ΔᐃᐃΔ];
      this.ⵠⵠⵠⵠⵠ -= hx;
      if (this.ⵠⵠⵠⵠⵠ <= 0) {
        var b = tj;
        if (a.x != this.ΔⲆⵠⲆ.x || this.ΔⲆⵠⲆ.y != a.y) {
          if (!this.ⲆΔⵠⲆΔ) {
            b = Co;
            this.ⲆΔⵠⲆΔ = Gt;
          }
          this.x = gx.ᐃΔⵠᐃⵠⵠΔ(a.x, ΔⵠᐃⲆⵠ.ⵠⲆⵠᐃⲆⲆⲆ);
          this.y = gx.ⵠᐃΔⵠⵠⲆᐃ(a.y, ΔⵠᐃⲆⵠ.ⵠⲆⵠᐃⲆⲆⲆ);
        } else if (this.ⲆΔⵠⲆΔ) {
          b = 1;
          this.ⲆΔⵠⲆΔ = 0;
        }
        this.ΔⲆⵠⲆ.x = a.x;
        this.ΔⲆⵠⲆ.y = a.y;
        ᐃⵠᐃᐃ = this.ᐃΔⲆΔΔⵠΔ(a);
        if (ᐃⵠᐃᐃ != this.mode) {
          if (this.mode === ΔⵠᐃⲆⵠ.ΔΔᐃⲆⵠᐃΔ) {
            this.fade(this.ⲆⲆⲆⵠⲆ, ΔⵠᐃⲆⵠ.ⲆΔΔᐃⲆᐃⵠ);
          } else if (ΔⵠᐃⲆⵠ.ⲆΔⲆⲆΔ === this.mode) {
            this.fade(this.ⲆⵠΔⵠΔⲆᐃ, ΔⵠᐃⲆⵠ.ΔⵠᐃⵠⲆⲆⵠ);
          } else if (ΔⵠᐃⲆⵠ.ᐃᐃᐃᐃⵠᐃⲆ === this.mode) {
            this.fade(this.ᐃⵠᐃᐃⲆⲆⵠ, ΔⵠᐃⲆⵠ.ᐃⵠⵠⲆᐃᐃᐃ);
          } else if (ΔⵠᐃⲆⵠ.ᐃΔᐃᐃΔᐃⲆ === this.mode) {
            this.fade(this.ⵠᐃⵠΔᐃΔΔ, ΔⵠᐃⲆⵠ.ᐃᐃΔⲆᐃᐃⵠ);
          }
        }
        if (ΔⵠᐃⲆⵠ.ΔΔᐃⲆⵠᐃΔ === ᐃⵠᐃᐃ) {
          this.ⲆΔⲆⲆⵠ(this.ⲆⲆⲆⵠⲆ, 0.08, 0.3, b, ᐃⵠᐃᐃ, ΔⵠᐃⲆⵠ.ΔᐃᐃᐃᐃⲆᐃΔᐃ, ΔⵠᐃⲆⵠ.ⲆΔΔᐃⲆᐃⵠ);
        } else if (ᐃⵠᐃᐃ === ΔⵠᐃⲆⵠ.ⲆΔⲆⲆΔ) {
          this.ⲆΔⲆⲆⵠ(this.ⲆⵠΔⵠΔⲆᐃ, 0.2, 0.3, b, ᐃⵠᐃᐃ, ΔⵠᐃⲆⵠ.ⵠⲆⵠⲆⵠᐃⲆᐃⵠ, ΔⵠᐃⲆⵠ.ΔⵠᐃⵠⲆⲆⵠ);
        } else if (ΔⵠᐃⲆⵠ.ᐃᐃᐃᐃⵠᐃⲆ === ᐃⵠᐃᐃ) {
          this.ⲆΔⲆⲆⵠ(this.ᐃⵠᐃᐃⲆⲆⵠ, 0.3, 0.6, b, ᐃⵠᐃᐃ, ΔⵠᐃⲆⵠ.ΔΔⵠΔⵠⵠⲆⵠⵠ, ΔⵠᐃⲆⵠ.ᐃⵠⵠⲆᐃᐃᐃ);
        } else if (ᐃⵠᐃᐃ === ΔⵠᐃⲆⵠ.ᐃΔᐃᐃΔᐃⲆ) {
          this.ⲆΔⲆⲆⵠ(this.ⵠᐃⵠΔᐃΔΔ, 0.1, 0.25, b, ᐃⵠᐃᐃ, ΔⵠᐃⲆⵠ.ⲆⵠΔⵠⵠᐃΔⵠⵠ, ΔⵠᐃⲆⵠ.ᐃᐃΔⲆᐃᐃⵠ);
        }
        this.mode = ᐃⵠᐃᐃ;
      }
    };
    this.check = function () {
      var a = ff.ⵠΔΔⲆ[this.ΔᐃᐃΔ];
      if (a) {
        return yo;
      } else {
        this.ΔᐃΔⲆΔᐃⲆ(a);
        return Eq;
      }
    };
  }
  function af(b, c, d, e, f, g) {
    const i = ~(b & 56261) & (b | 56261);
    const a = (c + 39835) % 65481;
    const j = Ow(i, a, (8 << (d >> Qe & 255)) + (0 << (d >> 8 & 255)) + (16 << (d >> 24 & 255)) + (24 << (d & 255)), (2531011 + (19050 + e) * 214013) % 4294967296, f ^ 36988, (g | 16294) & ~(g & 16294));
    uf(i, a);
    return (j | 17646) & ~(j & 17646);
  }
  function sf(b, c, d, e, f, i) {
    const j = ~(b & 2046) & (b | 2046);
    const a = (24 << (c >> 24 & 255)) + (0 << (c >> 8 & 255)) + (16 << (c & 255)) + ($l << (c >> 16 & 255));
    const k = (8 << (e & Yg)) + (0 << (e >> 16 & 255)) + (16 << (e >> 24 & 255)) + (24 << (e >> 8 & 255));
    const h = (16 << (f >> 8 & 255)) + (xq << (f >> qu & 255)) + (24 << (f >> 16 & 255)) + (8 << (f >> 24 & kt));
    const l = ~(i & 18247) & 18247 | ~(i & 18247) & i;
    const g = dq(j, a, ((3001 + d) * 2147483629 + 2147483587) % 2147483647);
    gf(k, h, l, j, a);
    return (g | 22780) & ~(g & 22780);
  }
  function hf(a, b) {
    const c = a ^ 22810;
    const d = (16 << (b >> 16 & 255)) + (24 << (b >> 8 & 255)) + (Gk << (b >> 24 & 255)) + (8 << (b & 255));
    const e = dq(c, d, c);
    const f = Yw(d, c, d);
    return (8 << ((e ^ f) >> gl & 255)) + (16 << ((e ^ f) >> 16 & 255)) + (0 << ((e ^ f) >> 8 & 255)) + (24 << ((e ^ f) >> 24 & 255));
  }
  function lf(b, c, d, e, f, i) {
    const j = ((b + 61012) * 2147483629 + 2147483587) % 2147483647;
    const a = c ^ 45134;
    const k = ~(f & 21942) & (f | 21942);
    const h = (8 << (i >> th & 255)) + (24 << (i >> 24 & 255)) + (16 << (i >> Cq & 255)) + (0 << (i & 255));
    const l = Qf(j, a, ~(d & 278) & (d | 278), (0 << (e >> 8 & 255)) + (8 << (e >> 16 & 255)) + (24 << (e >> 24 & 255)) + (q << (e & 255)));
    const g = Qf(k, h, j, a);
    return (8 << ((l ^ g) >> 16 & 255)) + (16 << ((l ^ g) >> 8 & 255)) + (24 << ((l ^ g) & R)) + (yj << ((l ^ g) >> 24 & 255));
  }
  function gf(b, c, d, e, f) {
    const i = (2531011 + (26721 + b) * 214013) % 4294967296;
    const j = ((61905 + c) * 22695477 + sl) % 4294967296;
    const a = d ^ 17963;
    const k = (8 << (e >> 8 & 255)) + (16 << (e & 255)) + (24 << (e >> 16 & 255)) + (0 << (e >> 24 & 255));
    const h = (f | 28826) & ~(f & 28826);
    const l = Yk(i, j);
    const g = function (b, c, d, e, f, g) {
      const i = (16 << (b >> 24 & 255)) + (0 << (b >> 16 & R)) + (24 << (b >> 8 & yk)) + (8 << (b & fk));
      const a = (g + 42993) % 65473;
      const j = cs(i, (2147483587 + (c + 51695) * 2147483629) % 2147483647, (24 << (d >> 24 & 255)) + (q << (d >> Kn & 255)) + (0 << (d & 255)) + (8 << (d >> 16 & 255)), ~(e & 36712) & 36712 | ~(e & 36712) & e, ~(f & 19755) & (f | 19755));
      const h = uf(a, i);
      return (24 << ((j ^ h) >> 8 & 255)) + (0 << ((j ^ h) & yk)) + (8 << ((j ^ h) >> 24 & Qk)) + (16 << ((j ^ h) >> 16 & 255));
    }(a, k, h, i, j, a);
    return (24 << ((l ^ g) >> 8 & 255)) + (Fh << ((l ^ g) >> 24 & 255)) + (Gs << ((l ^ g) & 255)) + (0 << ((l ^ g) >> 16 & 255));
  }
  function uf(a, b) {
    const c = (16 << (a >> 24 & 255)) + (0 << (a >> 8 & 255)) + (24 << (a >> q & 255)) + (8 << (a & 255));
    const d = (24 << (b & 255)) + (16 << (b >> 16 & 255)) + ($l << (b >> th & 255)) + (0 << (b >> 24 & 255));
    const e = vf(c, d, c);
    const f = vf(d, c, d);
    return (24 << ((e ^ f) >> 8 & 255)) + ($o << ((e ^ f) >> et & 255)) + (wr << ((e ^ f) >> 24 & 255)) + (0 << ((e ^ f) >> 16 & 255));
  }
  function bf(b, c, d, e, f) {
    const i = ~(b & 37665) & (b | 37665);
    const j = (2147483587 + (c + 17081) * 2147483629) % 2147483647;
    const a = d ^ 33161;
    const k = ($l << (e >> 24 & 255)) + (16 << (e >> 8 & 255)) + (0 << (e & 255)) + (24 << (e >> 16 & 255));
    const h = (f + 52363) % 65406;
    const l = is(i, j, a, k);
    const g = Tr(h, i, j, a, k);
    return (24 << ((l ^ g) >> 8 & Yg)) + (8 << ((l ^ g) & 255)) + (0 << ((l ^ g) >> 16 & 255)) + (16 << ((l ^ g) >> 24 & 255));
  }
  function vf(a, b, c) {
    const d = (63238 + a) % 65303;
    const e = ~(b & 28324) & (b | 28324);
    const f = c ^ 29840;
    return ((14687 + (dt(d, e, f, d, e) ^ function (b, c, d, e) {
      const f = (b + 10728) % 65501;
      const g = c ^ 17981;
      const i = d ^ 5386;
      const a = ~(e & 19899) & (e | 19899);
      const j = Tr(f, g, i, a, f);
      cs(g, i, a, f, g);
      return ~(j & 52954) & j | ~(j & 52954) & 52954;
    }(f, d, e, f))) * 1664525 + 1013904223) % 4294967296;
  }
  function df(a, b) {
    Ei(yw, a, b);
    const c = Hc(xw[et], xw[sc], xw[tj]);
    Xs(xw[1], xw[0], xw[wh], xw[Rl], xw[1], xw[0]);
    return c ^ 10725;
  }
  function cf(b, c, d, e, f, g) {
    const i = ((b + 40669) * 22695477 + 1) % 4294967296;
    const a = (32028 + c) % 65366;
    const j = d ^ 55062;
    const h = lf(i, a, j, ((e + 18542) * 214013 + 2531011) % 4294967296, (16 << (f >> 24 & 255)) + (24 << (f >> 16 & 255)) + (0 << (f >> Rl & 255)) + (Da << (f >> 8 & 255)), (8 << (g >> 16 & 255)) + (24 << (g & 255)) + (16 << (g >> 8 & 255)) + (Ih << (g >> 24 & Mj)));
    Vw(i, a, j);
    return ~(h & 20706) & h | ~(h & 20706) & 20706;
  }
  function mf(a, b) {
    const c = (8 << (a >> Hk & 255)) + (0 << (a & 255)) + (16 << (a >> 24 & 255)) + (24 << (a >> Rj & os));
    const d = ~(b & 53193) & b | ~(b & 53193) & 53193;
    return ((16988 + (hf(c, d) ^ Df(c, d, c, d, c))) * 214013 + 2531011) % 4294967296;
  }
  ⵠⲆᐃⲆⲆⲆⵠ = et;
  document.getElementById("version").innerHTML = nw.ⲆⲆⵠⲆΔⲆΔ + ".3";
  var pf;
  var bx = [];
  var cx = {
    time: Math.floor(Math.random() * 2),
    items: []
  };
  document.getElementById("game_body").style.backgroundColor = rs.Ⲇᐃⵠⵠᐃ[cx.time];
  cx.items.push(new uw(rw.ⲆⲆᐃΔⵠ, fg, Rl, 0, Md, Math.random() * Math.PI * 2, il, _));
  cx.items.push(new uw(rw.ⲆΔⵠΔᐃ, Gg, Md, Gk, 0, 0, qb, Yl));
  cx.items.push(new uw(rw.ΔⲆⵠⲆⲆ, 0, 0, fg, 0, Math.PI / 4, 0, 0));
  cx.items.push(new uw(rw.ⲆΔⵠΔᐃ, An, 0, 0, 0, 0, bu, ko));
  ᐃΔᐃᐃ = new function () {
    var b = this;
    function a(a) {
      let b = a.name || a.a;
      if (a.auto) {
        return b;
      } else {
        return b + " [" + a.nu + " " + ut[324] + "]";
      }
    }
    this.ⲆⲆⲆΔ = null;
    this.ΔⵠΔⲆᐃ = 0;
    this.ᐃⵠⲆΔⲆ = [];
    this.ⵠΔⵠΔⲆⲆⵠ = {};
    this.ΔⵠⲆΔⵠ = [[], [], [], [], [], [], [], [], []];
    this.ⲆⵠΔᐃⲆΔⵠ = [-1, -1, -1, -_, -1, -Fb, -1, -1, -1];
    this.ΔΔΔⲆⲆ = Md;
    this.ΔΔΔᐃᐃⵠⵠ = yj;
    this.ⲆΔⲆⲆⲆⲆΔ = function (a) {
      if (iw !== undefined) {
        b.ᐃⵠⲆΔⲆ.push({
          a: iw.name,
          gm: iw.mode,
          idx: 0,
          m: cl,
          nu: 0,
          id: 0
        });
        a();
        return;
      }
      fetch(kw + "/list", {
        method: "GET"
      }).then(function (c) {
        if (c.ok) {
          c.json().then(function (c) {
            b.ᐃⵠⲆΔⲆ = [];
            b.ⵠΔⵠΔⲆⲆⵠ = {};
            for (let a in ow.ⵠⲆᐃⵠⵠᐃΔ) {
              const c = ow.ⵠⲆᐃⵠⵠᐃΔ[a];
              b.ᐃⵠⲆΔⲆ.push({
                a: "Auto Select",
                gm: c,
                m: yh,
                nu: et,
                auto: true
              });
            }
            var d = xq;
            var e = Lu;
            var f = bq;
            for (let i = 0; i < c.length; i++) {
              const j = c[i];
              const a = j.n;
              const k = j.l;
              const h = j.p;
              const m = [];
              for (let b = Ah; h.length > b; b++) {
                const c = h[b];
                m.push(a + c[d]);
              }
              for (let c = 0; k.length > c; c++) {
                const g = k[c];
                let h;
                let a = ow.ⵠⲆᐃⵠⵠᐃΔ[g[f]];
                let i = a + g[e];
                h = a in b.ⵠΔⵠΔⲆⲆⵠ ? ++b.ⵠΔⵠΔⲆⲆⵠ[a] : b.ⵠΔⵠΔⲆⲆⵠ[a] = Gt;
                if (i in b.ⵠΔⵠΔⲆⲆⵠ) {
                  ⲆⲆⵠⲆⲆᐃᐃ = ++b.ⵠΔⵠΔⲆⲆⵠ[i];
                } else {
                  ⲆⲆⵠⲆⲆᐃᐃ = b.ⵠΔⵠΔⲆⲆⵠ[i] = 1;
                }
                b.ᐃⵠⲆΔⲆ.push({
                  name: g[4],
                  a: ow.ᐃⲆᐃⲆᐃⵠΔⲆⲆ[g[e]] + " " + ⲆⲆⵠⲆⲆᐃᐃ,
                  r: g[e],
                  gm: ow.ⵠⲆᐃⵠⵠᐃΔ[g[f]],
                  idx: h,
                  m: xo,
                  nu: g[3],
                  id: g[e] + g[d],
                  p: m
                });
              }
            }
            a();
          });
        } else {
          bj.setTimeout(function () {
            b.ⲆΔⲆⲆⲆⲆΔ(a);
          }, 3000);
        }
      });
    };
    this.ⵠᐃⵠⲆⵠⲆⲆⵠⲆ = function (a) {
      var b = [];
      for (var c = 0; c < a.length; c++) {
        if (a[c].a.indexOf(Sr) !== -1) {
          b.push(c);
        }
      }
      if (b.length === 0) {
        return qb;
      } else {
        return b[Math.floor(Math.random() * b.length)];
      }
    };
    this.ⲆᐃⲆᐃᐃⵠⲆ = function (b) {
      var c = qu;
      for (var d = Ih; d < b.length; d++) {
        c += b[d].nu;
      }
      var e = document.getElementById("servselect");
      if (-_h === ᐃΔᐃᐃ.ⲆⵠΔᐃⲆΔⵠ[ᐃΔᐃᐃ.ΔΔΔⲆⲆ]) {
        ᐃΔᐃᐃ.ⲆⵠΔᐃⲆΔⵠ[ᐃΔᐃᐃ.ΔΔΔⲆⲆ] = e.selectedIndex = ᐃΔᐃᐃ.ⵠᐃⵠⲆⵠⲆⲆⵠⲆ(b);
      } else {
        e.selectedIndex = ᐃΔᐃᐃ.ⲆⵠΔᐃⲆΔⵠ[ᐃΔᐃᐃ.ΔΔΔⲆⲆ];
      }
      var f = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + b[e.selectedIndex].a + (bu < b[e.selectedIndex].nu ? " [" + b[e.selectedIndex].nu + " " + ut[324] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + ut[323] + " (" + this.ᐃⲆᐃΔᐃⵠⵠ + ") " + ut[325] + "</li>";
      for (d = 0; b.length > d; d++) {
        f += "<li role=\"option\">" + a(b[d]) + "</li>\n";
      }
      f += "<li role=\"option\" id=\"selectDisabled\">(" + c + ") " + ut[326] + "</li>";
      f += "</div>";
      e.innerHTML = f;
      $(".md-select").on("click", function () {
        $(this).toggleClass("active");
      });
      $(".md-select ul li").on("click", function () {
        var b = $(this).text();
        var c = -1;
        for (var d = ᐃΔᐃᐃ.ΔⵠⲆΔⵠ[ᐃΔᐃᐃ.ΔΔΔⲆⲆ], e = Aa; d.length > e; e++) {
          if (b === a(d[e])) {
            c = e;
            break;
          }
        }
        if (c !== -1) {
          document.getElementById("servselect").selectedIndex = c;
          ᐃΔᐃᐃ.ⲆⵠΔᐃⲆΔⵠ[ᐃΔᐃᐃ.ΔΔΔⲆⲆ] = c;
          $(".md-select ul li").removeClass("active");
          $(this).addClass("active");
          $(".md-select label button").text(b);
        }
      });
    };
    this.ᐃⲆᐃΔᐃⵠⵠ = 0;
    this.ΔΔⲆᐃᐃⲆⵠΔⵠ = function () {
      this.ᐃⲆᐃΔᐃⵠⵠ = qb;
      for (var a = Rl; ᐃΔᐃᐃ.ᐃⵠⲆΔⲆ.length > a; a++) {
        if (this.ᐃⵠⲆΔⲆ[a].gm == "experimental") {
          this.ΔⵠⲆΔⵠ[ow.ⵠⲆⲆⵠΔ].push(this.ᐃⵠⲆΔⲆ[a]);
        } else if (this.ᐃⵠⲆΔⲆ[a].gm == "zombies") {
          this.ΔⵠⲆΔⵠ[ow.ΔΔᐃᐃᐃ].push(this.ᐃⵠⲆΔⲆ[a]);
        } else if (this.ᐃⵠⲆΔⲆ[a].gm == "community") {
          this.ΔⵠⲆΔⵠ[ow.ΔⲆΔⵠΔ].push(this.ᐃⵠⲆΔⲆ[a]);
        } else if (this.ᐃⵠⲆΔⲆ[a].gm == "forest") {
          this.ΔⵠⲆΔⵠ[ow.ᐃⵠΔΔⲆ].push(this.ᐃⵠⲆΔⲆ[a]);
        } else if (this.ᐃⵠⲆΔⲆ[a].gm == "battle-royale") {
          this.ΔⵠⲆΔⵠ[ow.ⵠᐃᐃΔⵠᐃᐃ].push(this.ᐃⵠⲆΔⲆ[a]);
        } else if (this.ᐃⵠⲆΔⲆ[a].gm == "vampires") {
          this.ΔⵠⲆΔⵠ[ow.ᐃΔⵠᐃᐃ].push(this.ᐃⵠⲆΔⲆ[a]);
        } else {
          this.ΔⵠⲆΔⵠ[ow.ⲆⵠⵠΔⵠ].push(this.ᐃⵠⲆΔⲆ[a]);
        }
        this.ᐃⲆᐃΔᐃⵠⵠ += this.ᐃⵠⲆΔⲆ[a].nu;
      }
      for (a = et; this.ΔⵠⲆΔⵠ.length > a; a++) {
        if (qb === this.ΔⵠⲆΔⵠ[a].length) {
          this.ΔⵠⲆΔⵠ[a].push({
            a: ut[327],
            ΔⵠᐃΔⵠⵠᐃⵠΔ: 0,
            Ⲇᐃ: "127.0.0.1",
            ⵠⲆⲆ: 80
          });
        }
      }
      this.ⲆᐃⲆᐃᐃⵠⲆ(this.ΔⵠⲆΔⵠ[Fj]);
      this.ⲆⲆᐃᐃⲆ = function (a) {
        ᐃΔᐃᐃ.ΔΔΔⲆⲆ = a;
        ᐃΔᐃᐃ.ⲆᐃⲆᐃᐃⵠⲆ(ᐃΔᐃᐃ.ΔⵠⲆΔⵠ[ᐃΔᐃᐃ.ΔΔΔⲆⲆ]);
        ᐃΔᐃᐃ.ⲆᐃⲆᐃᐃⵠⲆ(ᐃΔᐃᐃ.ΔⵠⲆΔⵠ[ᐃΔᐃᐃ.ΔΔΔⲆⲆ]);
        document.getElementById("servselect").selectedIndex = ᐃΔᐃᐃ.ΔΔΔⲆⲆ;
      };
    };
    this.ⵠⵠΔⲆᐃΔΔ = Gg;
    this.ΔᐃⲆⵠᐃΔΔ = 0;
    this.ⲆⲆΔⵠΔ = null;
    this.timeout = function () {
      b.ΔᐃⲆⵠᐃΔΔ++;
      b.ⲆⲆⲆΔ.close();
      if (b.ΔᐃⲆⵠᐃΔΔ > nw.ΔⵠᐃⵠⲆᐃⲆⲆⲆ) {
        Ef = 1;
        pf.ᐃᐃΔΔᐃᐃⵠⲆΔ = nw.ⲆⲆⵠⲆⵠⵠᐃΔᐃ;
        b.ⲆⵠⲆΔᐃ(ut[300]);
        pf.waiting = false;
        if (dx.reconnect.enabled) {
          fx.ⵠᐃⲆⲆᐃ(pf.ᐃⵠⲆⵠΔ);
        }
      } else {
        b.ⵠⲆΔΔⵠⲆᐃ();
      }
    };
    this.ⵠᐃΔⵠΔᐃⲆ = function (a) {
      if (this.ΔⵠΔⲆᐃ == this.ⲆⲆⲆΔ.ΔⵠΔⲆᐃ) {
        this.ΔⵠΔⲆᐃ++;
        this.ⲆⵠⲆΔᐃ(ut[301] + a);
        fx.ⵠᐃⲆⲆᐃ(pf.ᐃⵠⲆⵠΔ);
      }
    };
    this.ⲆⲆΔⵠⲆⵠᐃ = function () {
      this.ⲆⵠⲆΔᐃ("You speak too much");
    };
    this.ᐃⵠΔⵠⵠᐃΔΔΔ = function () {
      clearTimeout(this.ⲆⲆΔⵠΔ);
      this.ⲆⵠⲆΔᐃ(ut[302]);
      pf.waiting = false;
    };
    this.ΔΔΔⲆⲆᐃΔⲆᐃ = function () {
      dx.ΔⲆΔΔᐃ.open = false;
    };
    this.ⲆΔᐃΔⲆⵠⲆᐃⲆ = function () {
      fx.ᐃⲆⲆΔⲆᐃⵠ = Fj;
    };
    this.ⵠⵠΔⵠⵠⵠᐃⲆⵠ = function () {
      fx.ΔⲆⲆⵠⵠΔᐃ = tj;
    };
    this.ⲆⲆⲆΔᐃᐃⵠⵠⲆ = function (a) {
      dx.ΔᐃⲆΔⲆ.ⲆⵠΔⵠΔ = a;
      if (ff.ⲆⵠᐃⲆⲆ > -300) {
        if (a === 0) {
          this.ⲆⵠⲆΔᐃ(ut[340]);
        } else {
          this.ⲆⵠⲆΔᐃ(ut[341]);
        }
      }
    };
    this.ⵠⵠⵠᐃⵠ = function (a) {
      dx.ⵠⵠⵠᐃⵠ = a;
    };
    this.ᐃᐃⲆᐃΔΔᐃⵠᐃ = function (a) {
      dx.ᐃΔⲆⵠΔⵠⵠ = a;
    };
    this.ᐃΔⲆⵠΔⵠⵠ = function (a) {
      dx.ᐃⵠⵠΔΔ.ⲆⵠΔⵠΔ = a;
      if (ff.ᐃᐃᐃⵠⵠ > -300) {
        if (a === 0) {
          this.ⲆⵠⲆΔᐃ(ut[342]);
        } else {
          this.ⲆⵠⲆΔᐃ(ut[343]);
        }
      }
    };
    this.ΔΔⵠⲆΔⵠⲆⵠⲆ = function (a) {
      if (a === Md) {
        document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
      } else if (a === Ga) {
        document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
      } else if (nd === a) {
        document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
      } else if (a === Cs) {
        document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
      }
    };
    this.ⲆᐃᐃᐃⵠᐃⵠⲆᐃ = function () {
      fx.ᐃᐃⵠⲆΔᐃⵠ = gl;
    };
    this.ⵠΔΔⵠΔΔᐃⲆᐃ = function () {
      fx.ΔᐃᐃⵠⲆⵠⵠ = Fj;
    };
    this.ⵠⲆⲆΔⵠⵠⲆⵠᐃ = function () {
      dx.ΔᐃⲆⵠ.ⵠΔΔᐃΔ = [];
      dx.ΔᐃⲆⵠ.ⵠⵠⲆ = [];
      dx.ΔᐃⲆⵠ.id = -1;
      dx.ΔᐃⲆⵠ.ⵠΔⲆΔⵠΔΔ.stop();
      dx.Ⲇⵠᐃⵠ.ⵠⵠⵠⵠⲆ = [];
      dx.Ⲇⵠᐃⵠ.ᐃⲆΔⲆⲆ = false;
      dx.Ⲇⵠᐃⵠ.ⲆΔⲆᐃⵠᐃᐃⲆᐃ = false;
      dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ = -1;
      dx.Ⲇⵠᐃⵠ.id = -1;
      dx.Ⲇⵠᐃⵠ.ⵠΔⲆΔᐃ = Eq;
      dx.Ⲇⵠᐃⵠ.ΔⲆᐃΔⲆ = Hj;
      dx.Ⲇⵠᐃⵠ.ᐃⵠᐃⲆⵠ = false;
      dx.Ⲇⵠᐃⵠ.ⵠⵠⵠᐃᐃⲆⲆ = Tg;
      dx.Ⲇⵠᐃⵠ.timeout = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Ge, Fj, sl, 0, Ni, 1);
    };
    this.ⲆᐃⲆΔⵠⵠᐃⲆⲆ = function () {
      clearTimeout(this.ⲆⲆΔⵠΔ);
      this.ⲆⵠⲆΔᐃ();
      pf.waiting = Bo;
    };
    this.ᐃⵠΔΔⵠΔΔ = function (a) {
      for (var b = An; a.length > b; b++) {
        if (typeof a[b] === "string") {
          a[b] = ᐃΔᐃⵠ.ΔⵠⲆⲆⲆⵠΔ(a[b]);
        }
      }
      dx.ᐃⵠᐃᐃⵠ.ΔᐃᐃⵠΔ(a[sl], a[2], a[3], a[4]);
    };
    this.message = function (a) {
      this.ⲆⵠⲆΔᐃ(a);
    };
    this.ⲆⵠᐃᐃⲆᐃⲆⵠΔ = function () {
      clearTimeout(this.ⲆⲆΔⵠΔ);
      this.ⲆⵠⲆΔᐃ(ut[339]);
      pf.waiting = Hj;
    };
    this.ⲆⲆⲆⲆⵠᐃⵠⵠⲆ = function () {
      clearTimeout(this.ⲆⲆΔⵠΔ);
      this.ⲆⵠⲆΔᐃ(ut[338]);
      pf.waiting = Bo;
    };
    this.ᐃΔⲆΔⵠᐃⲆΔᐃ = function () {
      clearTimeout(this.ⲆⲆΔⵠΔ);
      this.ⲆⵠⲆΔᐃ(ut[304]);
      pf.waiting = Lk;
    };
    this.ⵠΔᐃⵠⵠᐃᐃⵠⵠ = function () {
      dx.ΔᐃⲆⵠ.ⲆⲆⵠⲆΔΔΔ(1, 0);
      fx.ᐃΔΔⵠⲆΔᐃ();
    };
    this.ᐃΔⲆᐃΔΔⲆᐃⲆ = function (a) {
      var b = a[bd];
      var c = ff.ⲆΔⵠⵠ[b];
      c.ⲆⲆⲆⲆ = a[2];
      c.ΔΔΔΔⲆ = a[3];
      c.ᐃΔΔᐃⵠΔⲆ = a[4];
      c.ⵠⵠᐃᐃᐃ = a[lu];
      c.ⲆⵠⲆᐃⵠ = a[6];
      c.ⲆⵠΔΔⲆ = a[7];
      c.level = a[Da];
      var d = ff.ⵠΔΔⲆ[b * ff.ⵠⲆΔᐃⲆⲆᐃ];
      if (d) {
        d.ⲆⲆⲆⲆ = a[fh];
        d.ΔΔΔΔⲆ = a[3];
        d.ᐃΔΔᐃⵠΔⲆ = a[ge];
        d.ⵠⵠᐃᐃᐃ = a[lu];
      }
    };
    this.ⲆΔⲆⲆⲆⵠΔΔΔ = function (a) {
      if (a === 29) {
        dx.ΔᐃⲆⵠ.ⲆⲆⵠⲆΔΔΔ(1, 0);
        fx.ᐃΔΔⵠⲆΔᐃ();
      } else {
        this.ⵠΔⲆᐃᐃᐃⲆ([0, a, Mg]);
      }
      dx.Ⲇⵠᐃⵠ.ⲆΔⲆⲆⲆⲆⵠ();
    };
    this.ⲆΔⲆΔΔΔΔᐃᐃ = function (a) {
      dx.ᐃⵠⵠΔᐃ.ⵠⵠⵠⵠⵠ = bu;
      dx.Ⲇⵠᐃⵠ.ΔᐃΔᐃᐃⲆᐃᐃᐃ(a);
    };
    this.ⵠⵠΔΔⲆⲆⵠᐃⲆ = function (a) {
      for (var b = Us[a].r, c = 0; b.length > c; c++) {
        if (dx.ΔᐃⲆⵠ.ⵠΔΔᐃΔ.length < dx.ΔᐃⲆⵠ.max || sb < dx.ΔᐃⲆⵠ.ⵠⵠⲆ[b[c][yj]]) {
          var d = Math.floor(b[c][ck] * 0.8);
          if (!d) {
            continue;
          }
          this.ⵠΔⲆᐃᐃᐃⲆ([Fj, b[c][0], d]);
        }
      }
      dx.Ⲇⵠᐃⵠ.ⲆΔⲆⲆⲆⲆⵠ();
    };
    this.ᐃᐃᐃᐃⵠΔⵠⲆΔ = function (a) {
      dx.ᐃⵠⵠΔᐃ.ⵠⵠⵠⵠⵠ = 0;
      dx.Ⲇⵠᐃⵠ.ᐃⵠΔᐃᐃᐃΔᐃΔ(a);
    };
    this.ⲆⵠⲆΔᐃ = function (a) {
      if (dx.alert.text) {
        if (a !== dx.alert.text && a !== dx.alert.list[dx.alert.list.length - 1]) {
          dx.alert.list.push(a);
        }
      } else {
        dx.alert.text = a;
      }
    };
    this.ⵠᐃⲆΔⵠⵠᐃΔⲆ = function () {
      this.ⲆⵠⲆΔᐃ(ut[305]);
    };
    this.ⲆᐃⲆⵠⵠⲆΔᐃΔ = function () {
      var a;
      a = dx.ᐃⵠⵠ == tj ? ut[306] : ut[307] + (dx.ᐃⵠⵠ + er) + ut[308];
      this.ⲆⵠⲆΔᐃ(a);
      dx.ᐃⵠⵠ++;
    };
    this.ΔⲆⵠᐃΔⵠᐃΔΔ = function () {
      clearTimeout(b.ⲆⲆΔⵠΔ);
      dx.reconnect.enabled = Ge;
      dx.ΔᐃΔΔⵠ = false;
      this.ⲆⵠⲆΔᐃ(ut[309]);
      fx.ⵠᐃⲆⲆᐃ(pf.ᐃⵠⲆⵠΔ);
      this.ⲆⲆⲆΔ.close();
    };
    this.ΔΔⲆⵠΔⵠⲆⲆᐃ = function () {
      Ef = Co;
      clearTimeout(this.ⲆⲆΔⵠΔ);
      this.ⲆⵠⲆΔᐃ(ut[310]);
      pf.waiting = false;
    };
    this.ⲆΔⵠΔⲆⲆⵠᐃᐃ = function () {
      Ef = 1;
      clearTimeout(this.ⲆⲆΔⵠΔ);
      this.ⲆⵠⲆΔᐃ(ut[311]);
      pf.waiting = Jn;
    };
    this.ΔᐃⲆⵠⲆⵠⲆΔⲆ = function (a) {
      var b = a[1];
      var c = ff.ⲆΔⵠⵠ;
      c[b].ⲆΔᐃᐃⲆ = a[2];
      c[b].ⲆⲆⲆⲆ = a[3];
      c[b].ΔΔΔΔⲆ = a[zt];
      c[b].ᐃΔΔᐃⵠΔⲆ = a[5];
      c[b].ⵠⵠᐃᐃᐃ = a[6];
      c[b].ⲆⵠⲆᐃⵠ = a[7];
      c[b].ⲆⵠΔΔⲆ = a[8];
      c[b].level = a[Xq];
      c[b].ⲆⲆΔⲆⵠ = fg;
      c[b].ⵠⲆⲆⵠΔΔΔ = null;
      c[b].label = null;
      c[b].ΔⵠᐃⵠᐃⲆΔ = null;
      c[b].ΔᐃΔΔⵠ = Yn;
      if (gw === 1) {
        c[b].ⲆΔᐃᐃⲆ += "|" + b;
      }
    };
    this.ᐃᐃᐃΔⲆⵠⵠⵠΔ = function () {
      this.ⲆⲆⲆΔ[fw](uq[Bq].stringify([32]));
    };
    this.ⲆᐃᐃᐃⵠⵠᐃΔⲆ = function () {
      this.ⲆⵠⲆΔᐃ(ut[312]);
    };
    this.ᐃⵠⲆᐃΔᐃᐃ = function () {
      this.ⲆⵠⲆΔᐃ(ut[313]);
    };
    this.ᐃⵠⲆΔⵠΔᐃⵠⲆ = function (a) {
      this.ⲆⲆⲆΔ[fw](Mq[ur].stringify([14, a]));
      dx.ΔⲆΔΔᐃ.open = false;
    };
    this.ⵠⵠΔᐃⵠⲆΔⲆⲆ = function (a) {
      for (var b = mw[a - 1].items, c = 0; c < b.length && dx.ΔᐃⲆⵠ.ⵠΔΔᐃΔ.length < dx.ΔᐃⲆⵠ.max; c++) {
        var d = b[c][1];
        var e = b[c][0];
        if (b[c][Ga] === 29) {
          dx.ΔᐃⲆⵠ.ⲆⲆⵠⲆΔΔΔ(1, Gg);
        } else {
          this.ⵠΔⲆᐃᐃᐃⲆ([Fj, d, e]);
        }
      }
    };
    this.ⵠΔⲆᐃᐃᐃⲆ = function (b) {
      for (var c = b.length, d = dx.ΔᐃⲆⵠ, e = Fb; e < c; e += 2) {
        var f = b[e];
        var g = b[e + Co];
        for (var h = 0; d.ⵠΔΔᐃΔ.length > h; h++) {
          if (f == d.ⵠΔΔᐃΔ[h].id) {
            d.ⵠⵠⲆ[f] += g;
            break;
          }
        }
        if (d.ⵠΔΔᐃΔ.length == h) {
          d.ⵠⵠⲆ[f] = g;
          d.ⵠΔΔᐃΔ.push(fx.ⲆⵠⲆ[f]);
          fx.ᐃΔΔⵠⲆΔᐃ();
        }
      }
      dx.Ⲇⵠᐃⵠ.ⲆᐃⲆ();
    };
    this.ᐃⲆᐃΔ = function (b, c, d, e, f, g, h) {
      dx.ᐃⲆᐃΔ.ⵠΔΔΔ = b / 100;
      dx.ᐃⲆᐃΔ.ⵠΔⲆ = c / 100;
      dx.ᐃⲆᐃΔ.c = d / dg;
      dx.ᐃⲆᐃΔ.ⲆⲆΔ = e / 100;
      dx.ᐃⲆᐃΔ.ⵠᐃᐃ = f / Lr;
      dx.ᐃⲆᐃΔ.ΔΔⲆᐃⲆΔᐃ = g / 100;
      dx.ⵠⵠⵠᐃⵠ = h;
    };
    this.ⲆᐃΔᐃⲆⵠΔⵠⲆ = function (a) {
      fx.ⵠΔᐃΔ.modify(a, Nr);
    };
    this.ᐃΔⲆⲆᐃⵠⵠⲆΔ = function (a) {
      fx.ⵠΔᐃΔ.modify(a, Ih);
    };
    this.claimed = function (a) {
      fx.ⵠΔᐃΔ.modify(a, 3);
    };
    this.ᐃⲆΔΔⲆᐃⲆⲆᐃ = function (a, b) {
      dx.ᐃⲆᐃΔ.ⵠΔΔΔ = a / Re;
      dx.ⵠⵠⵠᐃⵠ = b;
    };
    this.ΔΔⲆᐃⵠⵠᐃⲆⵠ = function (a) {
      dx.ᐃⲆᐃΔ.ⲆⲆΔ = a / 100;
    };
    this.ΔᐃΔⲆⵠⵠᐃⵠΔ = function (a) {
      dx.ᐃⲆᐃΔ.ⵠΔⲆ = a / 100;
    };
    this.ΔΔΔᐃΔΔⵠⵠᐃ = function (a) {
      dx.ᐃⲆᐃΔ.ΔΔⲆᐃⲆΔᐃ = a / 100;
    };
    this.ΔΔⵠⵠΔᐃⵠⲆⲆ = function (a) {
      dx.ᐃⲆᐃΔ.c = a / dg;
    };
    this.ⵠⵠⵠⲆⵠᐃΔⲆⵠ = function (a) {
      ff.time = a;
      ff.transition = rg;
      gx.transition = Ek;
    };
    this.ⲆΔⲆᐃⲆⲆΔⲆⵠ = function () {
      document.getElementById("game_body").style.backgroundColor = rs.Ⲇᐃⵠⵠᐃ[ff.time];
    };
    this.ᐃⲆⵠⲆⵠΔᐃᐃᐃ = function (a) {
      if (ff.mode == ow.ⵠᐃⵠΔⲆᐃⵠ && ff.ⲆΔⵠⵠ[a].ⲆΔᐃᐃⲆ !== "spectator") {
        this.ⲆⵠⲆΔᐃ(ff.ⲆΔⵠⵠ[a].ⲆΔᐃᐃⲆ + ut[314]);
      }
      ff.ⲆΔⵠⵠ[a].ΔᐃΔΔⵠ = false;
    };
    this.ΔⵠⵠⵠᐃᐃΔⵠⵠ = function (a) {
      var b = new Uint16Array(a);
      ᐃᐃⲆⵠ.ⲆΔⲆ.Δᐃᐃⵠⵠ(b[1], b[2]);
    };
    this.ΔᐃΔⵠᐃⲆⵠⲆⲆ = function (a) {
      var b = new Uint16Array(a);
      dx.ⲆΔⲆ.Δᐃᐃⵠⵠ(b[Kg], b[Ht]);
    };
    this.ⵠⵠᐃⵠⵠΔΔΔᐃ = function (b, c) {
      var d = new Uint16Array(c);
      for (var e = (b.length - 2) / 4, f = qu; f < e; f++) {
        var g = d[1 + f * 2];
        var i = b[mg + co * f];
        var j = (b[5 + f * 4] >> 1) / 127 * Math.PI * 2;
        var k = ff.ⵠΔΔⲆ[i * ff.ⵠⲆΔᐃⲆⲆᐃ + g];
        if (k && k.ΔᐃΔ) {
          if (gx.loaded && gx.ᐃⵠⲆⵠΔ) {
            gx.ΔᐃΔ(b[5 + eh * f] & Ga, ΔΔⵠΔᐃ[k.type], k.x, k.y);
          }
          k.ΔᐃΔ.angle = j;
          k.ΔᐃΔ.ⲆᐃⲆ = j;
        }
      }
    };
    this.ⵠΔⲆᐃⲆΔᐃᐃᐃ = function (b) {
      var c = new Uint16Array(b);
      for (var d = (c.length - er) / Dd, e = Md; e < d; e++) {
        var f;
        var i = Nh * e;
        var j = c[ck + i];
        var k = c[bq + i];
        var m = (c[Xu + i] >> 1) / 127 * Math.PI * il;
        var p = c[Mu + i];
        var q = bx.ⲆⲆΔⵠ[k][j];
        switch (p) {
          case 0:
            (f = q.p[yj][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 1:
            (f = q.s[0][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 2:
            (f = q.s[1][Aa]).angle = m;
            f.ⲆᐃⲆ = je;
            break;
          case Cs:
            (f = q.s[2][Ih]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 4:
            (f = q.t[Gg][yj]).angle = m;
            f.ⲆᐃⲆ = xa;
            break;
          case 5:
            (f = q.t[1][0]).angle = m;
            f.ⲆᐃⲆ = rg;
            break;
          case 6:
            (f = q.t[On][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case Ph:
            (f = q.t[Lq][Fj]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case wo:
            (f = q.t[4][Rl]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 9:
            (f = q.t[5][0]).angle = m;
            f.ⲆᐃⲆ = xa;
            break;
          case Gh:
            (f = q.g[0][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 11:
            (f = q.g[1][0]).angle = m;
            f.ⲆᐃⲆ = gk;
            break;
          case 12:
            (f = q.g[bq][Gg]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 13:
            (f = q.d[0][0]).angle = m;
            f.ⲆᐃⲆ = rg;
            break;
          case jh:
            (f = q.d[_][0]).angle = m;
            f.ⲆᐃⲆ = yo;
            break;
          case 15:
            (f = q.d[2][Rl]).angle = m;
            f.ⲆᐃⲆ = Rq;
            break;
          case 16:
            (f = q.b[qu][Ih]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 17:
            (f = q.b[1][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 18:
            (f = q.b[2][Rl]).angle = m;
            f.ⲆᐃⲆ = kl;
            break;
          case 19:
            (f = q.b[3][0]).angle = m;
            f.ⲆᐃⲆ = xa;
            break;
          case 20:
            (f = q.f[qb][qu]).angle = m;
            f.ⲆᐃⲆ = xa;
            break;
          case 21:
            (f = q.f[1][An]).angle = m;
            f.ⲆᐃⲆ = Ul;
            break;
          case 22:
            (f = q.f[2][qb]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 23:
            (f = q.sw[0][et]).angle = m;
            f.ⲆᐃⲆ = kl;
            break;
          case 24:
            (f = q.sw[1][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 25:
            (f = q.sw[2][Fj]).angle = m;
            f.ⲆᐃⲆ = Pq;
            break;
          case 26:
            (f = q.gw[0][Gk]).angle = m;
            f.ⲆᐃⲆ = Ul;
            break;
          case 27:
            (f = q.gw[Fb][Ih]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 28:
            (f = q.gw[Ol][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 29:
            (f = q.dw[Ah][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 30:
            (f = q.dw[1][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 31:
            (f = q.dw[2][0]).angle = m;
            f.ⲆᐃⲆ = Rq;
            break;
          case 32:
            (f = q.a[0][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 33:
            (f = q.a[bs][Aa]).angle = m;
            f.ⲆᐃⲆ = gk;
            break;
          case 34:
            (f = q.a[2][0]).angle = m;
            f.ⲆᐃⲆ = Ms;
            break;
          case 35:
            (f = q.cs[0][bu]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 36:
            (f = q.cs[Ga][An]).angle = m;
            f.ⲆᐃⲆ = Rq;
            break;
          case 37:
            (f = q.cs[2][qu]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 38:
            (f = q.cs[3][0]).angle = m;
            f.ⲆᐃⲆ = Rq;
            break;
          case 40:
            (f = q.plm[Fj][0]).angle = m;
            f.ⲆᐃⲆ = rg;
            break;
          case 41:
            (f = q.plm[wh][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 42:
            (f = q.plm[2][xq]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 50:
            (f = q.re[0][Md]).angle = m;
            f.ⲆᐃⲆ = oh;
            break;
          case 51:
            (f = q.re[ck][0]).angle = m;
            f.ⲆᐃⲆ = yo;
            break;
          case 52:
            (f = q.re[2][Md]).angle = m;
            f.ⲆᐃⲆ = kl;
            break;
          case 55:
            (f = q.c[0][gl]).angle = m;
            f.ⲆᐃⲆ = Pq;
            break;
          case 56:
            (f = q.m[xq][et]).angle = m;
            f.ⲆᐃⲆ = rn;
            break;
          case 57:
            (f = q.m[_][qu]).angle = m;
            f.ⲆᐃⲆ = bh;
            break;
          case 58:
            (f = q.m[nd][tj]).angle = m;
            f.ⲆᐃⲆ = xa;
        }
        if (gx.loaded && gx.ᐃⵠⲆⵠΔ && f) {
          gx.ΔᐃΔ(c[3 + i] & Fb, ᐃᐃⲆᐃ[p], f.x, f.y);
        }
      }
    };
    this.ⵠⲆⵠΔⵠ = function () {
      this.ⲆⲆⲆΔ[fw](Gq[Xo].stringify([36, dx.ⵠⲆⵠΔⵠ.ⵠΔⲆᐃ, dx.ⵠⲆⵠΔⵠ.ⲆⵠⲆⵠΔ]));
    };
    this.ⲆⲆᐃᐃⲆⲆⵠΔΔ = function (a, b) {
      this.ⲆⲆⲆΔ[fw](Gq[Tq].stringify([30, b, a.ⵠΔⲆᐃ, a.ⲆⵠⲆⵠΔ]));
    };
    this.ΔᐃΔⵠᐃⵠΔ = function (a, b, c) {
      if (b) {
        this.ⲆⲆⲆΔ[fw](Gq[Tq].stringify([29, b, a.ⵠΔⲆᐃ, a.ⲆⵠⲆⵠΔ]));
      } else {
        this.ⲆⲆⲆΔ[fw](Gq[Fq].stringify([31, c, a.ⵠΔⲆᐃ, a.ⲆⵠⲆⵠΔ]));
      }
    };
    this.ⲆⲆⵠᐃⲆⵠⲆⵠⵠ = function (a) {
      this.ⲆⲆⲆΔ[fw](lr[kr].stringify([28, a.ⵠΔⲆᐃ, a.ⲆⵠⲆⵠΔ]));
    };
    this.ΔⲆⵠⲆᐃΔΔⲆΔ = function (a) {
      this.ⲆⲆⲆΔ[fw](lr[yr].stringify([Ga, a]));
    };
    this.ΔⵠⲆΔⲆⵠΔΔⲆ = function (a) {
      this.ⲆⲆⲆΔ[fw](Yq[Xo].stringify([13, a.ⵠΔⲆᐃ, a.ⲆⵠⲆⵠΔ]));
    };
    this.ⲆⵠⲆΔⲆᐃⲆᐃᐃ = function (a, b) {
      this.ⲆⲆⲆΔ[fw](Mq[kr].stringify([37, b, a.ⵠΔⲆᐃ, a.ⲆⵠⲆⵠΔ, a.type]));
    };
    this.ΔΔᐃⲆⲆⲆᐃᐃΔ = function (a, b) {
      this.ⲆⲆⲆΔ[fw](Mq[kr].stringify([11, b, a.ⵠΔⲆᐃ, a.ⲆⵠⲆⵠΔ]));
    };
    this.ᐃⵠᐃⲆΔᐃⵠΔⵠ = function (a, b, c) {
      this.ⲆⲆⲆΔ[fw](Yq[Tq].stringify([34, b, c, a.ⵠΔⲆᐃ, a.ⲆⵠⲆⵠΔ]));
    };
    this.ⵠⵠⲆⵠⲆⲆᐃ = function (a) {
      this.ⲆⲆⲆΔ[fw](lr[kr].stringify([iu, a.ⵠΔⲆᐃ, a.ⲆⵠⲆⵠΔ, a.type]));
    };
    this.ΔⲆᐃᐃΔᐃⵠᐃⵠ = function (a) {
      this.ⲆⲆⲆΔ[fw](lr[kr].stringify([y, a.ⵠΔⲆᐃ, a.ⲆⵠⲆⵠΔ]));
    };
    this.ⲆⵠⵠΔᐃⵠΔᐃⵠ = function (a) {
      this.ⲆⲆⲆΔ[fw](lr[kr].stringify([24, a.ⵠΔⲆᐃ, a.ⲆⵠⲆⵠΔ]));
    };
    this.ⲆΔΔΔⵠΔΔΔⲆ = function (a) {
      this.ⲆⲆⲆΔ[fw](qr[pr].stringify([Tk, a.ⵠΔⲆᐃ, a.ⲆⵠⲆⵠΔ]));
    };
    this.ΔᐃⲆΔⵠᐃΔΔⲆ = function (a) {
      this.ⲆⲆⲆΔ[fw](xr[ur].stringify([0, a.ⲆⵠⲆⵠΔ]));
    };
    this.ᐃΔΔⵠΔⵠᐃ = function (a) {
      b.ⲆⲆⲆΔ[fw](na[yr].stringify([33, dx.ⲆⲆᐃΔⲆ.id, dx.ⵠⵠⵠⵠΔ[a]]));
    };
    this.ΔⲆⵠⵠⲆᐃⲆⲆᐃ = function () {
      b.ⲆⲆⲆΔ[fw](la[sa].stringify([35, dx.ⲆⲆᐃΔⲆ.ⵠΔⲆᐃ, dx.ⲆⲆᐃΔⲆ.id]));
    };
    this.ᐃⵠⲆⵠᐃⲆⲆ = function () {
      b.ⲆⲆⲆΔ[fw](Dr[va].stringify([23]));
    };
    this.ⲆⲆᐃᐃⲆΔΔⵠᐃ = function () {
      b.ⲆⲆⲆΔ[fw](Dr[yr].stringify([21, dx.ⲆⲆᐃΔⲆ.id]));
      if (document.getElementById("lock_team").innerHTML == "LOCK") {
        dx.ⲆⲆᐃΔⲆ.lock = ck;
        document.getElementById("lock_team").innerHTML = "UNLOCK";
      } else {
        dx.ⲆⲆᐃΔⲆ.lock = et;
        document.getElementById("lock_team").innerHTML = "LOCK";
      }
    };
    this.Δᐃⵠ = function (j, e, i) {
      var k = new Uint16Array(j);
      if (i) {
        ff.ΔⲆⵠⵠΔΔⵠΔᐃ();
      }
      for (var n = (e.length - 2) / 18, o = 0; o < n; o++) {
        var q = fh + o * 18;
        var t = 1 + o * 9;
        var w = e[q];
        var x = k[t + wh];
        var y = k[t + 5];
        var z = ff.ⵠⲆΔᐃⲆⲆᐃ * w + y;
        if (x & lw.ⵠΔⵠⵠⵠⲆⲆᐃⵠ) {
          ff.ⵠⵠΔΔⲆⲆⲆΔᐃ(z);
        } else {
          var A = k[t + il];
          var B = k[t + wi];
          var D = k[t + 4];
          var E = k[t + Ze];
          var F = k[t + lg];
          var G = k[t + 8];
          var H = e[q + 1] / Uh * Math.PI * ta;
          if (ff.ⵠΔΔⲆ[z]) {
            var I = ff.ⵠΔΔⲆ[z];
            I.r.x = B;
            I.r.y = D;
            if (w != tj && nw.ⲆᐃΔⲆᐃⲆⲆⲆⵠ < ᐃΔᐃⵠ.ⵠⵠΔᐃ(I, I.r)) {
              I.x = B;
              I.y = D;
            }
            if (dx.id !== I.id || w === 0) {
              I.ᐃⲆⵠⵠⵠΔᐃ = H;
            }
            I.action |= x;
            I.info = E;
            I.ⵠⲆᐃⵠⲆ = F;
            I.ᐃⵠΔⵠⵠ = G;
            if (I.ⲆᐃⲆ) {
              I.ⲆᐃⲆ(x);
            }
          } else {
            var J = new uw(A, w, y, B, D, H, x, E, F, G);
            ff.ⵠΔΔⲆ[z] = J;
            ff.Δᐃⵠ[A].push(J);
          }
        }
      }
    };
    this.ΔⲆⲆⵠ = function (a) {
      this.ⵠⵠΔⲆᐃΔΔ = xf;
      var b = new Uint16Array(a);
      dx.ᐃᐃᐃⵠᐃ.ᐃⲆⲆᐃⵠ(b);
    };
    this.ΔⲆⵠⵠⲆⵠᐃⵠⵠ = function (a) {
      if (ys !== Ss) {
        Us = Ss;
      }
      if (a.length > 0) {
        Ss = JSON.parse(JSON.stringify(Us));
        for (var b = 0; b < a.length; b++) {
          var c = a[b];
          var d = Us[c.item];
          if (hl !== d) {
            d.r = c.recipe;
            d.w = c.workbench;
            d.f = c.fire;
            d.ⵠᐃᐃ = c.water;
            d.e = c.well;
            d.time = Ls / c.time;
          }
        }
      }
    };
    this.ⵠΔⵠⵠⵠⵠᐃ = function (a) {
      if (a && a.length !== 0) {
        dx.ⵠΔⵠⵠⵠⵠᐃ.message = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          for (d.lineJoin = "round"; b.indexOf("\\n") !== -1;) {
            b = b.replace("\\n", "\n");
          }
          b = b.split("\n");
          ⲆΔ = [];
          var f = b.length * 18 + 10;
          var g = 0;
          d.font = 14 + "px Baloo Paaji";
          for (var h = bu; b.length > h; h++) {
            if (b[h].charAt(et) === "#") {
              ⲆΔ[h] = b[h].substring(0, 7);
              b[h] = b[h].substring(ft);
            } else {
              ⲆΔ[h] = "#FFFFFF";
            }
            g = Math.max(d.measureText(b[h]).width + bl, g);
          }
          c.height = f;
          c.width = g;
          h = bu;
          for (; h < b.length; h++) {
            var i = Au(1, b[h], 14, ⲆΔ[h], null, null, null, null, null, "#000", 6);
            d.drawImage(i, or, h * 18 + 5);
          }
          return c;
        }(a);
      } else {
        dx.ⵠΔⵠⵠⵠⵠᐃ.message = Ao;
      }
    };
    this.ⲆᐃΔⵠᐃ = function (a) {
      var b = ff.ⵠΔΔⲆ[a[1] * ff.ⵠⲆΔᐃⲆⲆᐃ];
      if (b) {
        if (ff.mode === ow.ΔΔᐃᐃᐃ && b.ⲆⲆⲆⲆ === ow.ⵠΔΔΔΔⵠᐃ) {
          if (dx.ⵠⵠᐃⲆΔ) {
            if (Math.random() > 0.5) {
              b.text.push(a[2] + " ..." + ᐃΔΔⲆᐃ);
            } else {
              b.text.push(ᐃΔΔⲆᐃ + "... " + a[2]);
            }
          } else {
            b.text.push(ⵠⵠΔⵠⲆⵠⲆ[Math.floor(Math.random() * ⵠⵠΔⵠⲆⵠⲆ.length)]);
          }
        } else {
          b.text.push(a[2]);
        }
      }
    };
    this.ᐃⵠⲆᐃⲆⲆⲆᐃⲆ = function (a) {
      if (dx.ΔᐃⲆⵠ.max !== dx.ΔᐃⲆⵠ.ⵠΔΔᐃΔ.length || Us[a].ᐃⲆΔᐃ === 29 || -Ek != dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(Us[a].ᐃⲆΔᐃ) || dx.ΔᐃⲆⵠ.ΔⵠᐃᐃᐃᐃⲆᐃΔ(Us[a].r)) {
        this.ⲆⲆⲆΔ[fw](uq[Bq].stringify([5, a]));
        return _h;
      } else {
        this.ᐃⵠⲆᐃΔᐃᐃ();
        return 0;
      }
    };
    this.ⵠΔⲆΔᐃ = function (a) {
      dx.Ⲇⵠᐃⵠ.ⲆⵠᐃⵠⵠⵠΔⵠᐃ(a);
    };
    this.ΔⲆᐃΔⲆ = function (a) {
      dx.Ⲇⵠᐃⵠ.ΔⲆᐃΔⲆ = a;
      dx.Ⲇⵠᐃⵠ.ⲆᐃⲆ();
    };
    this.ᐃⵠᐃⲆⵠ = function (a) {
      dx.Ⲇⵠᐃⵠ.ᐃⵠᐃⲆⵠ = a;
      dx.Ⲇⵠᐃⵠ.ⲆᐃⲆ();
    };
    this.ⵠⵠⵠᐃᐃⲆⲆ = function (a) {
      dx.Ⲇⵠᐃⵠ.ⵠⵠⵠᐃᐃⲆⲆ = a;
      dx.Ⲇⵠᐃⵠ.ⲆᐃⲆ();
    };
    this.ⵠᐃⲆΔⲆΔⵠΔⵠ = function (a) {
      this.ⲆⵠⲆΔᐃ(ut[315]);
    };
    this.ⵠⵠⲆⲆΔΔΔΔΔ = function () {
      dx.Ⲇⵠᐃⵠ.ⲆΔⲆⲆⲆⲆⵠ();
    };
    this.ⵠᐃⲆΔᐃ = function (a) {
      fx.ⵠᐃⲆΔᐃ.ⲆΔⵠⵠ = [];
      var b = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ];
      var c = Ih;
      for (var d = bs; a.length > d; d += X) {
        var e = {
          x: Math.floor(a[d] * ff.w / 250),
          y: Math.floor(a[d + Co] * ff.ⵠΔⲆ / 250)
        };
        if (b && !c && !dx.ⲆᐃⵠᐃΔⵠᐃ && ᐃΔᐃⵠ.ⵠⵠΔᐃ(e, b) < 250) {
          c += _h;
        } else {
          fx.ⵠᐃⲆΔᐃ.ⲆΔⵠⵠ.push(e);
        }
      }
    };
    this.ⵠⲆⵠᐃⵠⲆⲆΔΔ = function () {
      dx.ⵠⲆⵠΔⵠ.open = false;
      dx.ᐃⵠⵠΔⲆ.enabled = ds;
      dx.ᐃⵠⵠΔⲆ.ⵠⵠⵠⵠⵠ = -1;
      dx.ᐃⵠⵠΔⲆ.label = null;
      dx.ᐃⵠⵠΔⲆ.ⵠΔⵠΔᐃⵠΔ = null;
      dx.ᐃⵠⵠΔⲆ.now = -1;
    };
    this.ᐃⵠⵠΔⲆ = function (a) {
      ow.ⲆⲆⵠΔⲆᐃⲆ = a;
      dx.ᐃⵠⵠΔⲆ.enabled = true;
      dx.ᐃⵠⵠΔⲆ.ⵠⵠⵠⵠⵠ = new Date().getTime();
      dx.ᐃⵠⵠΔⲆ.label = null;
      dx.ᐃⵠⵠΔⲆ.now = -sl;
      for (var b = [45, 149, 57, 0, 5, 6, 30, 19, 62, 63, 9, 13, 12, 14, 15, 33, 34, 16, 17, 18, 94, 95, 96, 97, 98, 99, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 92, 93, 8, 1, 3, 4, 31, 32, 55, 53, 54], c = 0; c < b.length; c++) {
        var d = dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(b[c]);
        if (d != -er) {
          dx.ΔᐃⲆⵠ.ⵠᐃⲆᐃⵠΔⲆ(b.length[c], d);
        }
      }
      dx.Ⲇⵠᐃⵠ.ⲆΔⲆⲆⲆⲆⵠ();
    };
    this.ⵠΔⵠᐃⵠⵠΔΔⵠ = function (a, b, c) {
      this.ⲆⲆΔⲆᐃⲆΔ(a, b * 256 + c);
    };
    this.ⲆⲆΔⲆᐃⲆΔ = function (a, b) {
      dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ = -1;
      dx.ΔᐃⲆⵠ.ⵠⲆⲆⵠⵠⵠᐃ(a, b, dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(a));
      dx.Ⲇⵠᐃⵠ.ⲆᐃⲆ();
    };
    this.ⲆΔᐃᐃΔⲆⲆⵠΔ = function (a) {
      dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ = -1;
      dx.ΔⵠⲆᐃⲆ.wait = true;
      var b = dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(a);
      dx.ΔᐃⲆⵠ.ⵠⲆⲆⵠⵠⵠᐃ(a, 1, b);
      if (b >= qb && !dx.ΔᐃⲆⵠ.ⵠⵠⲆ[a]) {
        dx.Ⲇⵠᐃⵠ.ⲆᐃⲆ();
      }
      if (a == 159) {
        dx.ⵠⵠⵠⵠΔ = [dx.id];
      }
    };
    this.ⵠᐃᐃⲆⲆⵠⵠⲆᐃ = function () {
      this.ⲆⲆⲆΔ[fw](Gq[Xo].stringify([2]));
    };
    this.ⲆⲆᐃⵠᐃΔᐃᐃᐃ = function (a) {
      this.ⲆⲆⲆΔ[fw](Mq[Fq].stringify([22, a.ΔᐃⲆΔⵠ, a.id]));
    };
    this.ⵠᐃⲆΔᐃᐃᐃⵠᐃ = function (a, b) {
      this.ⲆⲆⲆΔ[fw](Mq[kr].stringify([8, a, b]));
    };
    this.ⲆⲆⲆᐃⵠⵠᐃΔᐃ = function () {
      var a = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ];
      if (a) {
        var b = Math.PI * Nj;
        this.ⲆⲆⲆΔ[fw](Mq[Fq].stringify([tg, dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ, Math.floor((a.angle + b) % b * 255 / b), dx.Ⲇⵠᐃⵠ.mode]));
      }
    };
    this.ᐃⲆΔᐃᐃ = function (a, b) {
      switch (a) {
        case 195:
        case 110:
        case 116:
        case 117:
        case 145:
        case 127:
        case 133:
        case 136:
        case 142:
        case 143:
        case 189:
        case 207:
        case 233:
        case 205:
        case 209:
        case 211:
        case 192:
        case 137:
        case 138:
        case 196:
        case 197:
        case 200:
        case 199:
          dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ = -1;
          this.ⲆⲆⲆΔ[fw](Yq[Tq].stringify([25, a]));
          break;
        case 114:
        case 160:
        case 115:
        case 132:
        case 188:
        case 206:
        case 204:
        case 191:
        case 193:
        case 208:
        case 210:
        case 113:
        case 162:
        case 163:
        case 164:
        case 165:
        case 118:
        case 167:
        case 151:
        case 152:
        case 166:
        case 171:
        case 172:
        case 173:
        case 124:
        case 218:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 220:
        case 168:
        case 169:
        case 170:
        case 119:
        case 122:
        case 123:
        case 217:
        case 219:
        case 125:
        case 190:
        case 141:
        case 135:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 198:
        case 201:
        case 182:
        case 183:
        case 144:
        case 159:
        case 221:
          if (!dx.ⵠⵠᐃⲆΔ) {
            if (a === dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ) {
              dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ = -1;
            } else {
              dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ = a;
            }
          }
          break;
        case 0:
        case 57:
        case 5:
        case 6:
        case 30:
        case 19:
        case 9:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 92:
        case 93:
        case 12:
        case 13:
        case 14:
        case 15:
        case 33:
        case us.ⲆⵠᐃᐃᐃⲆⵠⲆᐃ:
        case 16:
        case 17:
        case 34:
        case 18:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
          if (!dx.ⵠⵠᐃⲆΔ) {
            dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ = -1;
            if ((c = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ]) && a === c.right) {
              this.ⲆⲆⲆΔ[fw](lr[kr].stringify([25, 7]));
            } else {
              dx.ⵠᐃⲆΔⵠ.wait = Va;
              this.ⲆⲆⲆΔ[fw](qr[pr].stringify([25, a]));
            }
          }
          break;
        case 1:
        case 8:
        case 3:
        case 4:
        case 35:
        case 36:
        case 37:
        case 28:
        case 38:
        case 39:
        case 31:
        case 32:
        case 45:
        case 46:
        case 50:
        case 51:
        case 52:
        case 55:
        case 56:
        case 53:
        case 54:
        case 89:
        case 49:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
          if (!dx.ⵠⵠᐃⲆΔ) {
            dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ = -1;
            if ((c = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ]) && a === c.right) {
              this.ⲆⲆⲆΔ[fw](xr[ur].stringify([25, 7]));
            } else {
              this.ⲆⲆⲆΔ[fw](na[yr].stringify([25, a]));
            }
          }
          break;
        case 223:
        case 224:
        case 225:
        case 239:
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 91:
          if (!dx.ⵠⵠᐃⲆΔ) {
            dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ = -Fb;
            var c = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ];
            this.ⲆⲆⲆΔ[fw](na[yr].stringify([25, a]));
          }
          break;
        case 77:
        case 78:
        case 79:
        case 58:
        case 25:
        case 26:
        case 27:
        case 43:
        case 44:
        case 20:
        case 21:
        case 22:
        case 59:
        case 60:
        case 90:
        case 61:
        case 47:
          if ((c = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ]) && c.ⵠⲆᐃᐃⵠ !== a) {
            dx.ⲆΔⲆΔⵠ.wait = true;
          }
          this.ⲆⲆⲆΔ[fw](Yq[kr].stringify([25, a]));
          break;
        case 10:
        case 83:
        case 84:
        case 86:
        case 11:
        case 40:
        case 88:
        case 82:
        case 80:
        case 81:
        case 41:
        case 42:
        case 85:
        case 23:
        case 24:
        case 48:
          this.ⲆⲆⲆΔ[fw](la[sa].stringify([25, a]));
      }
    };
    this.ᐃΔⵠΔⵠⲆⵠᐃΔ = function (a) {
      this.ⲆⲆⲆΔ[fw](Mq[Bq].stringify([vl, a]));
    };
    this.ᐃΔⲆᐃⵠⲆᐃⵠᐃ = function (a) {
      dx.ΔⵠⲆᐃⲆ.wait = Yn;
      var b = dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(a);
      dx.ΔᐃⲆⵠ.ⵠᐃⲆᐃⵠΔⲆ(a, b);
      dx.Ⲇⵠᐃⵠ.ⲆᐃⲆ();
    };
    this.ᐃⵠΔⲆᐃᐃⲆⲆᐃ = function (a, b) {
      this.ⲆⲆⲆΔ[fw](uq[ur].stringify([20, a]));
    };
    this.ΔΔⲆᐃⲆⵠᐃⵠⲆ = function (a, b) {
      this.ⲆⲆⲆΔ[fw](Gq[Xo].stringify([19, a]));
    };
    this.ΔⲆⲆⲆᐃⵠΔᐃⲆ = function (a) {
      dx.ΔⵠⲆᐃⲆ.wait = true;
      var b = dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(a);
      dx.ΔᐃⲆⵠ.ⵠⲆⲆⵠⵠⵠᐃ(a, 1, b);
      dx.Ⲇⵠᐃⵠ.ⲆᐃⲆ();
    };
    this.ᐃᐃΔᐃⵠⵠⲆⵠⲆ = function (a) {
      var b = a[ig];
      var c = a[qi];
      dx.ΔⵠⲆᐃⲆ.wait = Yn;
      var d = dx.ΔᐃⲆⵠ.ⵠᐃΔᐃᐃ(b);
      dx.ΔᐃⲆⵠ.ⵠⲆⲆⵠⵠⵠᐃ(b, c, d);
      dx.Ⲇⵠᐃⵠ.ⲆᐃⲆ();
    };
    this.ᐃⲆⵠΔⲆⲆⲆⵠΔ = function () {
      this.ⲆⲆⲆΔ[fw](Gq[Xo].stringify([38]));
    };
    this.ⲆΔᐃⲆΔⲆⲆᐃⵠ = function (a) {
      var b = tk * Math.PI;
      this.ⲆⲆⲆΔ[fw](Mq[Fq].stringify([16, Math.floor((a + b) % b * Tl / b)]));
    };
    this.ΔΔⵠⲆⵠⲆᐃⲆⵠ = function (a) {
      var b = Math.PI * 2;
      this.ⲆⲆⲆΔ[fw](Mq[Fq].stringify([27, Math.floor((a + b) % b * 255 / b)]));
    };
    this.ⲆⲆⲆΔⲆⵠΔⲆⲆ = function (a) {
      this.ⲆⲆⲆΔ[fw](ⲆⵠⲆⵠΔᐃⵠ[0].stringify([Og, a]));
    };
    this.ⲆΔΔⲆᐃⵠᐃΔⲆ = function (a) {
      this.ⲆⲆⲆΔ[fw](lr[kr].stringify([10, a]));
    };
    this.ⲆᐃⵠΔⵠⵠⵠⵠᐃ = function (a) {
      var b = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ];
      if (dx.ⵠⵠᐃⲆΔ) {
        if (Math.random() > 0.5) {
          b.text.push(a.substring(Gg, 25) + " ..." + ᐃΔΔⲆᐃ);
        } else {
          b.text.push(ᐃΔΔⲆᐃ + "... " + a.substring(0, 25));
        }
      } else {
        b.text.push(a);
      }
      this.ⲆⲆⲆΔ[fw](lr[kr].stringify([18, a]));
    };
    this.Ⲇᐃⵠⵠⵠ = function (a) {
      var b = ᐃᐃⲆⵠ.select.Δᐃⵠ;
      if (b.length != bu) {
        var c = [4];
        var d = [];
        ᐃΔᐃⵠ.ⲆⵠⲆᐃⵠΔⲆ(a, {
          x: ᐃᐃⲆⵠ.ⲆΔⲆ.rx,
          y: ᐃᐃⲆⵠ.ⲆΔⲆ.ry
        });
        c.push(a.x);
        c.push(a.y);
        for (var e = Gk; b.length > e; e++) {
          d.push(b[e].ⵠⵠΔⵠᐃⲆⲆΔⵠ);
        }
        c.push(d);
        this.ⲆⲆⲆΔ[fw](qr[pr].stringify(c));
      }
    };
    this.ΔᐃΔΔⲆΔᐃ = 0;
    this.ⵠᐃⵠⲆᐃᐃᐃ = {
      Ⲇᐃ: 0,
      ΔⵠⵠⲆ: 0
    };
    this.ᐃⲆᐃᐃΔⲆⲆᐃⵠ = function () {
      if (xf - this.ΔᐃΔΔⲆΔᐃ > nw.ⵠⵠᐃⵠΔⲆΔⵠΔ) {
        this.ΔᐃΔΔⲆΔᐃ = xf;
        var a = dx.ⲆΔⲆ;
        var b = Math.floor(a.x / 100);
        var c = Math.floor(a.y / yg);
        if (b != this.ⵠᐃⵠⲆᐃᐃᐃ.Ⲇᐃ || this.ⵠᐃⵠⲆᐃᐃᐃ.ΔⵠⵠⲆ != c) {
          this.ⲆⲆⲆΔ[fw](na[ur].stringify([vo, Math.floor(-a.x), Math.floor(-a.y)]));
          this.ⵠᐃⵠⲆᐃᐃᐃ.Ⲇᐃ = b;
          this.ⵠᐃⵠⲆᐃᐃᐃ.ΔⵠⵠⲆ = c;
        }
      }
    };
    this.ⲆⵠᐃΔⲆⲆⵠ = 0;
    this.ⲆᐃΔⲆΔΔΔⵠⲆ = function () {
      if (xf - this.ⲆⵠᐃΔⲆⲆⵠ > nw.ᐃΔΔⲆⵠΔⵠⵠΔ) {
        this.ⲆⵠᐃΔⲆⲆⵠ = xf;
        this.ping();
      }
    };
    this.ⵠΔᐃΔⲆΔⲆᐃΔ = function () {
      dx.reconnect.enabled = Ul;
      if (this.ΔⵠΔⲆᐃ == this.ⲆⲆⲆΔ.ΔⵠΔⲆᐃ) {
        this.ΔⵠΔⲆᐃ++;
        this.ⲆⲆⲆΔ.close();
        ᐃΔᐃᐃ.connect();
      }
    };
    this.ΔⲆⵠⲆⲆᐃⵠΔⵠ = function (a) {
      this.ⲆⵠⲆΔᐃ(ut[316]);
      for (var b = ck; b < a.length; b++) {
        dx.ⵠⵠⵠⵠΔ.push(a[b]);
      }
    };
    this.ⲆⵠⵠⵠΔⵠΔΔⵠ = function (a) {
      this.ⲆⵠⲆΔᐃ(ff.ⲆΔⵠⵠ[a].ⲆΔᐃᐃⲆ + ut[318]);
      dx.ⵠⵠⵠⵠΔ.push(a);
      var b = document.getElementById("team_box");
      if (fx.ΔⵠⲆΔΔ != -Ek && b.style.display == "inline-block") {
        fx.ⵠᐃⲆⵠΔ[fx.ΔⵠⲆΔΔ].action();
      }
    };
    this.ᐃΔΔⲆᐃᐃΔᐃᐃ = function () {
      this.ⲆⵠⲆΔᐃ(ut[319]);
      dx.ⲆⲆᐃΔⲆ.wait = xg;
      dx.ⵠⵠⵠⵠΔ = [];
      document.getElementById("team_box").style.display = "none";
    };
    this.ⵠᐃⵠⲆⵠᐃⲆΔΔ = function (a) {
      if (dx.id == a) {
        this.ⲆⵠⲆΔᐃ(ut[320]);
        dx.ⲆⲆᐃΔⲆ.wait = true;
        dx.ⵠⵠⵠⵠΔ = [];
        document.getElementById("team_box").style.display = "none";
      } else {
        this.ⲆⵠⲆΔᐃ(ff.ⲆΔⵠⵠ[a].ⲆΔᐃᐃⲆ + ut[321]);
        for (var b = Gk; b < dx.ⵠⵠⵠⵠΔ.length; b++) {
          if (a == dx.ⵠⵠⵠⵠΔ[b]) {
            dx.ⵠⵠⵠⵠΔ.splice(b, Ni);
            break;
          }
        }
        var c = document.getElementById("team_box");
        if (fx.ΔⵠⲆΔΔ != -1 && c.style.display == "inline-block") {
          fx.ⵠᐃⲆⵠΔ[fx.ΔⵠⲆΔΔ].action();
        }
      }
    };
    this.ⵠᐃΔⲆⵠⵠⵠΔΔ = function (a) {
      dx.ΔᐃΔΔⵠ = Hj;
      this.ⲆⵠⲆΔᐃ(ut[322]);
      if (this.ΔⵠΔⲆᐃ == this.ⲆⲆⲆΔ.ΔⵠΔⲆᐃ) {
        this.ΔⵠΔⲆᐃ++;
        fx.ⵠᐃⲆⲆᐃ(pf.ᐃⵠⲆⵠΔ);
        this.ⲆⲆⲆΔ.close();
      }
    };
    this.ΔᐃᐃⵠΔᐃᐃᐃΔ = function (a, b) {
      dx.ΔᐃΔΔⵠ = false;
      var c = new Uint16Array(b);
      var d = new Uint32Array(b);
      dx.ⲆⵠⲆⲆⲆⵠᐃ.ᐃᐃᐃΔⵠᐃⲆ = yt[a][Math.floor(Math.random() * yt[a].length)];
      dx.ⲆⵠⲆⲆⲆⵠᐃ.ⲆⲆΔⲆⵠ = ᐃΔᐃⵠ.ΔⵠⲆⲆⵠⵠᐃ(ff.ⲆΔⵠⵠ[dx.id].ⲆⲆΔⲆⵠ);
      dx.ⲆⵠⲆⲆⲆⵠᐃ.ΔⲆᐃᐃᐃⲆⲆ = ᐃΔᐃⵠ.ΔⵠⲆⲆⵠⵠᐃ(d[bd]);
      dx.ⲆⵠⲆⲆⲆⵠᐃ.ⲆᐃᐃⵠΔ = c[1];
      this.ⲆⵠⲆΔᐃ(ut[317]);
      if (this.ⲆⲆⲆΔ.ΔⵠΔⲆᐃ == this.ΔⵠΔⲆᐃ) {
        this.ΔⵠΔⲆᐃ++;
        fx.ⵠᐃⲆⲆᐃ(ex.ᐃⵠⲆⵠΔ);
        this.ⲆⲆⲆΔ.close();
        try {
          bj.Widget.adsRefresh();
        } catch (a) {}
      }
    };
    this.ping = function () {
      this.ⲆⲆⲆΔ[fw](nw.ᐃᐃᐃΔⵠΔᐃⲆΔ);
    };
    this.ⵠᐃᐃⵠⵠΔⲆᐃᐃ = function () {
      if (this.ⲆⲆⲆΔ.readyState == Z) {
        this.ⵠⵠΔⲆᐃΔΔ -= nw.ⲆΔΔⲆⵠⵠⵠ;
      }
    };
    this.ⲆΔᐃⲆⲆⵠⵠⵠᐃ = function () {
      if (hx > nw.ᐃΔⲆᐃᐃΔⵠⵠⲆ) {
        this.ⵠⵠΔⲆᐃΔΔ = xf;
      }
      if (xf - this.ⵠⵠΔⲆᐃΔΔ > nw.ⲆΔΔⲆⵠⵠⵠ) {
        this.ⵠⵠΔⲆᐃΔΔ = xf;
        this.ⵠΔᐃΔⲆΔⲆᐃΔ();
      }
    };
    this.ᐃΔⲆⲆΔⵠⲆⵠΔ = function (c) {
      Ef++;
      clearTimeout(this.ⲆⲆΔⵠΔ);
      document.getElementById("commandMainBoxName").innerHTML = this.ΔⵠⲆΔⵠ[this.ΔΔΔⲆⲆ][this.ⲆⵠΔᐃⲆΔⵠ[this.ΔΔΔⲆⲆ]].a;
      document.getElementById("exploreForest").src = "img/forest-leaf.png";
      document.getElementById("exploreWinter").src = "img/winter-flake.png";
      document.getElementById("exploreDesert").src = "img/desert-cactus.png";
      document.getElementById("exploreLava").src = "img/lava-volcano.png";
      this.ⵠⵠΔⲆᐃΔΔ = xf;
      dx.ᐃⲆᐃΔ.ᐃΔᐃΔⵠ.ᐃᐃᐃⲆⲆ = dx.ᐃⲆᐃΔ.ᐃΔᐃΔⵠ.Δⵠⵠⵠᐃ;
      dx.ᐃⲆᐃΔ.ⲆⵠⲆⵠⵠⵠᐃ.ᐃᐃᐃⲆⲆ = dx.ᐃⲆᐃΔ.ⲆⵠⲆⵠⵠⵠᐃ.Δⵠⵠⵠᐃ;
      dx.ᐃⲆᐃΔ.ΔΔᐃⵠΔⵠΔ.ᐃᐃᐃⲆⲆ = dx.ᐃⲆᐃΔ.ΔΔᐃⵠΔⵠΔ.Δⵠⵠⵠᐃ;
      dx.ᐃⲆᐃΔ.ⵠⲆⲆⲆⵠⵠⵠ.ᐃᐃᐃⲆⲆ = dx.ᐃⲆᐃΔ.ⵠⲆⲆⲆⵠⵠⵠ.Δⵠⵠⵠᐃ;
      dx.ᐃⲆᐃΔ.ⲆⲆⲆΔᐃ.ᐃᐃᐃⲆⲆ = dx.ᐃⲆᐃΔ.ⲆⲆⲆΔᐃ.Δⵠⵠⵠᐃ;
      dx.ᐃⲆᐃΔ.ⵠΔΔΔ = sc;
      dx.ᐃⲆᐃΔ.c = Lu;
      dx.ᐃⲆᐃΔ.ⵠΔⲆ = 1;
      dx.ᐃⲆᐃΔ.ⲆⲆΔ = Ga;
      dx.ᐃⲆᐃΔ.ⵠᐃᐃ = 1;
      dx.ᐃⲆᐃΔ.ΔΔⲆᐃⲆΔᐃ = ck;
      dx.ᐃⲆⵠⵠⲆⲆⵠ = false;
      fx.ΔⵠΔΔⵠ.display = sb;
      dx.ΔᐃⲆⵠ.ⵠΔΔᐃΔ = [];
      dx.ΔᐃⲆⵠ.ⵠⵠⲆ = [];
      dx.ΔᐃⲆⵠ.max = ow.ΔⵠⲆΔⲆⵠΔ;
      dx.ΔᐃⲆⵠ.ⲆⵠΔᐃⲆΔΔ = Rl;
      dx.ΔᐃⲆⵠ.ΔⲆⵠⵠᐃ = 0;
      dx.ΔᐃⲆⵠ.id = -Fb;
      fx.ᐃⲆⲆΔⲆᐃⵠ = ck;
      fx.ΔⲆⲆⵠⵠΔᐃ = 1;
      fx.ΔᐃᐃⵠⲆⵠⵠ = 1;
      fx.ᐃᐃⵠⲆΔᐃⵠ = Ni;
      dx.ΔᐃΔΔⵠ = xa;
      dx.ΔᐃⲆⵠ.ⵠΔⲆΔⵠΔΔ.stop();
      dx.Ⲇⵠᐃⵠ.ⵠⵠⵠⵠⲆ = [];
      dx.Ⲇⵠᐃⵠ.ᐃⲆΔⲆⲆ = false;
      dx.Ⲇⵠᐃⵠ.ⲆΔⲆᐃⵠᐃᐃⲆᐃ = hg;
      dx.Ⲇⵠᐃⵠ.ⲆᐃᐃΔ = -Ls;
      dx.Ⲇⵠᐃⵠ.id = -1;
      dx.Ⲇⵠᐃⵠ.ⵠΔⲆΔᐃ = Jn;
      dx.Ⲇⵠᐃⵠ.ΔⲆᐃΔⲆ = false;
      dx.Ⲇⵠᐃⵠ.ᐃⵠᐃⲆⵠ = Bo;
      dx.Ⲇⵠᐃⵠ.ⵠⵠⵠᐃᐃⲆⲆ = gh;
      dx.Ⲇⵠᐃⵠ.timeout = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, xq, _h, 0, Lu, _);
      dx.ⵠᐃⲆΔⵠ.timeout = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(Tg, 0, 1, 0, 1 / Bl, 1);
      dx.ⵠᐃⲆΔⵠ.wait = ds;
      dx.ⲆΔⲆΔⵠ.timeout = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(ja, yj, 1, 0, 0.2, 1);
      dx.ⲆΔⲆΔⵠ.wait = Zl;
      dx.ΔⵠⲆᐃⲆ.timeout = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(ds, Gg, 1, 0, 1, 1);
      dx.ΔⵠⲆᐃⲆ.wait = false;
      dx.ⲆⲆᐃΔⲆ.id = -1;
      dx.ⲆⲆᐃΔⲆ.ⵠΔⲆᐃ = -1;
      dx.ⲆⲆᐃΔⲆ.wait = ml;
      dx.ⲆⲆᐃΔⲆ.timeout = new ᐃΔᐃⵠ.ᐃⵠⵠΔ(false, 0, 1, Gg, 1 / 30, 1);
      fx.ⵠᐃⲆΔᐃ.ᐃⵠᐃⵠⵠ.x = -1;
      fx.ⵠᐃⲆΔᐃ.ᐃⵠᐃⵠⵠ.y = -Lu;
      fx.Δᐃᐃᐃ.open = false;
      fx.ⵠᐃⲆΔᐃ.ⲆΔⵠⵠ = [];
      dx.ⵠⵠΔⲆⲆ.enabled = false;
      ff.mode = c[ck];
      if (c[20] !== ys && c[21] !== undefined) {
        ff.ΔⲆᐃⵠᐃ = c[20];
        ff.ΔⲆᐃᐃᐃ = c[21];
        ff.w = ff.ᐃΔΔΔΔᐃⵠ * ff.ΔⲆᐃⵠᐃ;
        ff.ⵠΔⲆ = ff.ⵠⲆΔⲆⲆΔᐃ * ff.ΔⲆᐃᐃᐃ;
      }
      ff.ᐃⵠⲆΔⲆⲆΔ = c[22];
      ff.ΔΔⵠⵠᐃ = c[23];
      b.ⵠΔⵠⵠⵠⵠᐃ(c[24]);
      b.ΔⲆⵠⵠⲆⵠᐃⵠⵠ(c[25]);
      dx.ΔᐃⲆΔⲆ.ⲆⵠΔⵠΔ = c[26];
      dx.ᐃΔⲆⵠΔⵠⵠ = sb;
      dx.ᐃⵠⵠΔΔ.ⲆⵠΔⵠΔ = c[27];
      ff.ᐃᐃᐃΔⵠⵠⲆⲆΔ(c[ka]);
      ff.time = c[Ks];
      ff.ᐃⵠⲆⵠⵠ.ΔΔᐃⵠⲆ = c[15];
      ff.ᐃⵠⲆⵠⵠ.ᐃⲆⲆᐃⵠ = new Date().getTime();
      fx.ⵠΔᐃΔ.ΔΔᐃⲆᐃⵠⵠ = c[bl];
      ff.transition = false;
      dx.ᐃⵠⵠ = c[il];
      fx.ⵠΔᐃΔ.reset();
      dx.ⵠⵠⵠⵠΔ = c[yl];
      ff.Δᐃⵠ[rw.ⵠΔΔⵠ] = [];
      ff.Δᐃⵠ[rw.ⲆΔⵠΔᐃ] = [];
      ff.Δᐃⵠ[rw.ΔⲆⵠⲆⲆ] = [];
      ff.Δᐃⵠ[rw.ⲆⲆᐃΔⵠ] = [];
      ff.Δᐃⵠ[rw.ᐃΔΔᐃⲆ] = [];
      ff.Δᐃⵠ[rw.ᐃⵠⵠⵠⵠ] = [];
      ff.Δᐃⵠ[rw.ⵠⵠᐃⲆⵠ] = [];
      ff.Δᐃⵠ[rw.ⵠΔΔⵠΔ] = [];
      ff.Δᐃⵠ[rw.ᐃⲆΔᐃⵠ] = [];
      ff.Δᐃⵠ[rw.ⲆⵠΔᐃⵠ] = [];
      ff.Δᐃⵠ[rw.ⲆᐃⵠΔⵠ] = [];
      ff.Δᐃⵠ[rw.ΔΔᐃⵠⵠ] = [];
      ff.Δᐃⵠ[rw.ⲆⲆΔⵠⲆ] = [];
      ff.Δᐃⵠ[rw.ⲆⵠⲆΔⲆ] = [];
      ff.Δᐃⵠ[rw.ᐃⵠⵠⲆⵠ] = [];
      ff.Δᐃⵠ[rw.ⵠᐃᐃᐃᐃ] = [];
      ff.Δᐃⵠ[rw.ΔᐃΔⵠᐃ] = [];
      ff.Δᐃⵠ[rw.ⲆᐃⵠⲆΔ] = [];
      ff.Δᐃⵠ[rw.Ⲇⵠⵠⵠᐃ] = [];
      ff.Δᐃⵠ[rw.ⵠΔΔᐃⲆ] = [];
      ff.Δᐃⵠ[rw.ⲆⵠᐃⲆΔ] = [];
      ff.Δᐃⵠ[rw.ⲆΔⲆⲆⲆ] = [];
      ff.Δᐃⵠ[rw.ΔΔⵠᐃⵠ] = [];
      ff.Δᐃⵠ[rw.ᐃᐃⲆᐃⲆ] = [];
      ff.Δᐃⵠ[rw.ᐃⲆⵠⲆⲆ] = [];
      ff.Δᐃⵠ[rw.ⲆᐃΔᐃⵠ] = [];
      ff.Δᐃⵠ[rw.ⲆⲆΔᐃⵠ] = [];
      ff.Δᐃⵠ[rw.ᐃΔⲆⲆⵠ] = [];
      ff.Δᐃⵠ[rw.ⵠⲆᐃᐃΔ] = [];
      ff.Δᐃⵠ[rw.ⲆⵠⲆⵠᐃ] = [];
      ff.Δᐃⵠ[rw.ⵠⵠⲆⲆⲆ] = [];
      ff.Δᐃⵠ[rw.ⲆΔⵠΔⵠ] = [];
      ff.Δᐃⵠ[rw.ΔᐃⲆᐃⵠ] = [];
      ff.Δᐃⵠ[rw.ⵠⵠᐃⲆⲆ] = [];
      ff.Δᐃⵠ[rw.ⵠΔΔΔᐃ] = [];
      ff.Δᐃⵠ[rw.ⲆⲆᐃⵠᐃ] = [];
      ff.Δᐃⵠ[rw.ΔΔᐃΔΔ] = [];
      ff.Δᐃⵠ[rw.ⵠᐃᐃΔΔ] = [];
      ff.Δᐃⵠ[rw.ΔⲆᐃⲆᐃ] = [];
      ff.Δᐃⵠ[rw.ⲆᐃⲆⵠᐃ] = [];
      ff.Δᐃⵠ[rw.ⵠⲆΔΔⵠ] = [];
      ff.Δᐃⵠ[rw.ⲆⲆⵠⲆΔ] = [];
      ff.Δᐃⵠ[rw.ΔⵠⲆⵠΔᐃⲆ] = [];
      ff.Δᐃⵠ[rw.ⲆⵠⵠⵠⲆ] = [];
      ff.Δᐃⵠ[rw.ΔΔⵠⲆⲆ] = [];
      ff.Δᐃⵠ[rw.ⲆⵠⲆⵠⵠ] = [];
      ff.Δᐃⵠ[rw.ᐃⲆᐃⵠⲆ] = [];
      ff.Δᐃⵠ[rw.ⵠΔⵠⵠᐃ] = [];
      ff.Δᐃⵠ[rw.ᐃΔΔⵠΔ] = [];
      ff.Δᐃⵠ[rw.ⲆᐃᐃΔⲆ] = [];
      ff.Δᐃⵠ[rw.ΔᐃⲆΔᐃ] = [];
      ff.Δᐃⵠ[rw.ᐃⲆᐃᐃΔ] = [];
      ff.Δᐃⵠ[rw.ᐃⲆᐃᐃⲆ] = [];
      ff.Δᐃⵠ[rw.Ⲇⵠⵠᐃᐃ] = [];
      ff.Δᐃⵠ[rw.ΔⵠᐃⵠᐃΔΔ] = [];
      ff.Δᐃⵠ[rw.ⲆᐃⲆⲆᐃ] = [];
      ff.Δᐃⵠ[rw.ᐃⲆᐃᐃⵠ] = [];
      ff.Δᐃⵠ[rw.ΔⵠΔⵠᐃ] = [];
      ff.Δᐃⵠ[rw.ᐃᐃΔΔⲆ] = [];
      ff.Δᐃⵠ[rw.ⲆⲆⲆᐃᐃⲆⵠ] = [];
      ff.Δᐃⵠ[rw.ⲆᐃⲆΔᐃΔⲆ] = [];
      ff.Δᐃⵠ[rw.ᐃⲆⵠⲆΔⵠΔ] = [];
      ff.Δᐃⵠ[rw.ΔΔΔΔⵠⵠΔ] = [];
      ff.Δᐃⵠ[rw.ΔᐃΔⲆⵠ] = [];
      ff.Δᐃⵠ[rw.ⲆⲆⵠΔⲆ] = [];
      ff.Δᐃⵠ[rw.ᐃⲆⵠᐃⵠ] = [];
      ff.Δᐃⵠ[rw.ⵠΔᐃⵠⲆ] = [];
      ff.Δᐃⵠ[rw.ᐃⲆᐃᐃᐃ] = [];
      ff.Δᐃⵠ[rw.ᐃᐃΔⲆⵠ] = [];
      ff.Δᐃⵠ[rw.ΔΔⲆᐃᐃ] = [];
      ff.Δᐃⵠ[rw.ᐃΔⲆΔΔ] = [];
      ff.Δᐃⵠ[rw.ⵠΔᐃⵠⵠ] = [];
      ff.Δᐃⵠ[rw.ⲆⲆⲆᐃΔ] = [];
      ff.Δᐃⵠ[rw.ⲆΔΔⵠⲆ] = [];
      ff.Δᐃⵠ[rw.ΔΔⲆⵠᐃ] = [];
      ff.Δᐃⵠ[rw.ⵠⲆⵠⲆⲆ] = [];
      ff.Δᐃⵠ[rw.ⵠᐃⲆᐃⲆ] = [];
      ff.Δᐃⵠ[rw.ΔΔᐃΔⵠ] = [];
      ff.Δᐃⵠ[rw.ΔΔᐃΔⲆ] = [];
      ff.Δᐃⵠ[rw.ΔΔⲆⲆⲆ] = [];
      ff.Δᐃⵠ[rw.ᐃⲆᐃⲆⲆ] = [];
      ff.Δᐃⵠ[rw.ᐃΔΔᐃΔ] = [];
      ff.Δᐃⵠ[rw.ΔΔΔⲆΔ] = [];
      ff.Δᐃⵠ[rw.ⲆᐃⲆᐃΔ] = [];
      ff.Δᐃⵠ[rw.ⵠⲆΔⵠᐃ] = [];
      ff.Δᐃⵠ[rw.ΔⵠΔⵠⵠ] = [];
      ff.Δᐃⵠ[rw.ⲆⲆᐃᐃⵠ] = [];
      ff.Δᐃⵠ[rw.ⵠᐃᐃⲆΔ] = [];
      ff.Δᐃⵠ[rw.ΔⲆⲆΔⲆ] = [];
      ff.Δᐃⵠ[rw.ⲆΔⲆⵠⵠ] = [];
      ff.ⵠΔΔⲆ = [];
      ff.ⵠⲆΔᐃⲆⲆᐃ = c[7];
      dx.id = c[zo];
      dx.ΔᐃᐃΔ = dx.id * ff.ⵠⲆΔᐃⲆⲆᐃ;
      if (gx.loaded) {
        gx.ⲆΔⵠⵠ[Rl].ΔᐃᐃΔ = dx.ΔᐃᐃΔ;
        gx.ⲆΔⵠⵠ[0].ΔΔᐃⵠᐃⵠⵠ = 0;
      }
      Af.ⲆⲆⵠⵠⵠΔᐃ();
      dx.ⲆΔⲆ.Δᐃᐃⵠⵠ(c[rb], c[10]);
      ff.ⲆΔⵠⵠ = [];
      var d = ff.ⲆΔⵠⵠ;
      for (var e = Qr; e < c[11]; e++) {
        d.push(new ww());
      }
      e = bu;
      for (var f = c[$j]; e < f.length; e++) {
        var g = d[f[e].i];
        g.ⲆΔᐃᐃⲆ = f[e].n;
        g.ⲆⲆⲆⲆ = f[e].s;
        g.ΔΔΔΔⲆ = f[e].a;
        g.ⲆⵠⲆᐃⵠ = f[e].c;
        g.ⵠⵠᐃᐃᐃ = f[e].b;
        g.ⲆⵠΔΔⲆ = f[e].d;
        g.ᐃΔΔᐃⵠΔⲆ = f[e].g;
        g.level = f[e].l;
        g.ⲆⲆΔⲆⵠ = ᐃΔᐃⵠ.ᐃΔᐃⵠⵠⲆⵠ(f[e].p);
        g.ΔᐃΔΔⵠ = bh;
        if (gw === Ek) {
          g.ⲆΔᐃᐃⲆ += "|" + f[e].i;
        }
      }
      dx.ᐃᐃᐃⵠᐃ.sort();
      if (ff.mode === ow.ⵠᐃⵠΔⲆᐃⵠ && ff.ⲆΔⵠⵠ[dx.id].ⲆΔᐃᐃⲆ === "spectator") {
        dx.ⲆᐃⵠᐃΔⵠᐃ = true;
      } else {
        dx.ⲆᐃⵠᐃΔⵠᐃ = li;
      }
      if (ff.mode === ow.ΔΔᐃᐃᐃ && ff.ⲆΔⵠⵠ[dx.id].ⲆⲆⲆⲆ === ow.ⵠΔΔΔΔⵠᐃ) {
        dx.ⵠⵠᐃⲆΔ = nh;
      } else {
        dx.ⵠⵠᐃⲆΔ = vn;
      }
      if (ow.ᐃΔⵠᐃᐃ === ff.mode && ff.ⲆΔⵠⵠ[dx.id].ⲆⲆⲆⲆ === ow.ⵠⲆⵠⲆⵠⵠᐃ) {
        dx.ᐃⵠΔΔⵠⲆΔ = true;
      } else {
        dx.ᐃⵠΔΔⵠⲆΔ = Tg;
      }
      ⵠⲆⲆᐃ.set("starve_token", dx.ΔⵠⲆⲆΔ);
      if (Aa === c[Gu]) {
        dx.ΔⲆΔΔᐃ.ⵠⵠⵠⵠⵠ = Aa;
        fx.ⵠΔᐃΔ.restore(c[17]);
        var h = c[Vl];
        if (h[29]) {
          dx.ΔᐃⲆⵠ.ⲆⲆⵠⲆΔΔΔ(1, sb);
        }
        for (e = xq; h.length > e; e++) {
          if (h[e]) {
            if (e == 29) {
              continue;
            }
            if (e == 7) {
              continue;
            }
            this.ⵠΔⲆᐃᐃᐃⲆ([0, e, h[e]]);
          }
        }
        dx.ΔⲆΔΔᐃ.open = false;
      } else {
        if (ow.ᐃⵠΔΔⲆ === ff.mode) {
          this.ⵠΔⲆᐃᐃᐃⲆ([yj, 238, 1]);
        } else if (ow.ᐃΔⵠᐃᐃ === ff.mode) {
          if (dx.ᐃⵠΔΔⵠⲆΔ) {
            this.ⵠΔⲆᐃᐃᐃⲆ([An, 190, cq]);
          } else {
            this.ⵠΔⲆᐃᐃᐃⲆ([0, 191, 3]);
          }
        }
        if (ff.mode === ow.ⲆⵠⵠΔⵠ || ff.mode === ow.ᐃΔⵠᐃᐃ || ow.ⵠⲆⲆⵠΔ === ff.mode || ff.mode === ow.ᐃⵠΔΔⲆ) {
          dx.ΔⲆΔΔᐃ.ⵠⵠⵠⵠⵠ = new Date().getTime();
          dx.ΔⲆΔΔᐃ.open = xa;
          dx.ΔⲆΔΔᐃ.value = c[wa];
          fx.ΔⲆΔΔᐃ.ᐃⲆⲆᐃⵠ();
        } else {
          dx.ΔⲆΔΔᐃ.ⵠⵠⵠⵠⵠ = 0;
          dx.ΔⲆΔΔᐃ.open = false;
          dx.ΔⲆΔΔᐃ.value = 0;
        }
        dx.ᐃⵠᐃᐃᐃΔⵠ = c[vo].toString();
      }
      dx.ᐃⵠⵠΔⲆ.enabled = c[xh];
      dx.ᐃⵠⵠΔⲆ.ⵠⵠⵠⵠⵠ = -Ni;
      dx.ᐃⵠⵠΔⲆ.label = null;
      dx.ᐃⵠⵠΔⲆ.now = -1;
      ⵠⲆⲆᐃ.set("starve_token_id", dx.ᐃⵠᐃᐃᐃΔⵠ);
      if (dx.reconnect.enabled) {
        dx.reconnect.rotate = 0;
        dx.reconnect.enabled = false;
      } else {
        pf.ⵠᐃⲆⲆᐃ(fx.ᐃⵠⲆⵠΔ);
        if (ga) {
          ga("send", "event", "Game", "play", "S" + pf.ⲆⲆⲆⲆ + "A" + pf.ΔΔΔΔⲆ);
        }
      }
    };
    this.connect = function () {
      b.ΔᐃⲆⵠᐃΔΔ = 0;
      b.ⵠⲆΔΔⵠⲆᐃ();
    };
    this.ⵠⵠⲆⲆᐃⲆⵠ = undefined;
    this.ⵠⵠⲆΔᐃⵠⲆⵠⵠ = function (c) {
      const d = b.ᐃⵠⲆΔⲆ.filter(a => a.gm === c);
      const f = {};
      for (let a = 0; d.length > a; a++) {
        const b = d[a];
        const c = b.r;
        if (c !== undefined) {
          if (f[c] === undefined) {
            f[c] = [];
          }
          f[c].push(b);
        }
      }
      function g(a) {
        b.ⵠⵠⲆⲆᐃⲆⵠ = a;
        const c = f[a];
        const d = c[Math.floor(Math.random() * c.length)];
        b.ⲆⵠᐃΔᐃⵠⵠ({
          domain: jw,
          is_tls: bs,
          id: d.id,
          p: d.p
        });
      }
      if (b.ⵠⵠⲆⲆᐃⲆⵠ !== undefined) {
        g(b.ⵠⵠⲆⲆᐃⲆⵠ);
        return;
      }
      let h = 1;
      function i(a) {
        const b = new bj.XMLHttpRequest();
        const c = a[0];
        const d = c.p;
        const e = c.r;
        const f = d[Math.floor(Math.random() * d.length)];
        b.open("GET", "https://" + f + "." + jw + "/", Rq);
        b.onreadystatechange = function () {
          if (b.readyState === 4) {
            if (sb === h) {
              return;
            }
            h = Fj;
            g(e);
          }
        };
        b.send();
      }
      for (let a in f) {
        i(f[a]);
      }
      bj.setTimeout(function () {
        if (h === 0) {
          return;
        }
        h = Aa;
        const a = bj.Object.keys(f);
        g(a[Math.floor(a.length * Math.random())]);
      }, 5000);
    };
    this.ⲆΔᐃⲆⵠΔᐃⵠⵠ = function () {
      let a = ow.ⵠⲆᐃⵠⵠᐃΔ[b.ΔΔΔⲆⲆ];
      console.log(undefined, undefined, undefined);
      let c = b.ⲆⵠΔᐃⲆΔⵠ[b.ΔΔΔⲆⲆ];
      let d = b.ᐃⵠⲆΔⲆ.find(b => b.gm == a && b.idx == c);
      if (d === undefined) {
        b.ⵠⵠⲆΔᐃⵠⲆⵠⵠ(a);
      } else {
        b.ⲆⵠᐃΔᐃⵠⵠ({
          domain: jw,
          is_tls: 1,
          id: d.id,
          p: d.p
        });
      }
    };
    this.ⵠⲆΔΔⵠⲆᐃ = function () {
      console.log(es);
      if (iw === undefined) {
        b.ⲆΔᐃⲆⵠΔᐃⵠⵠ();
      } else {
        b.ⲆⵠᐃΔᐃⵠⵠ({
          domain: iw.domain,
          is_tls: iw.ssl,
          id: iw.id,
          p: [iw.p]
        });
      }
    };
    this.ⲆⵠᐃΔᐃⵠⵠ = function (c) {
      let d = c.domain;
      let e = c.is_tls;
      let f = c.id;
      let g = c.p;
      let a = g[Math.floor(Math.random() * g.length)];
      let i = e ? "wss://" + a + "." + d + "/" + f : "ws://" + d;
      console.log(Mk, Mk);
      b.ⲆⲆⲆΔ = new bj.WebSocket(i);
      b.ⲆⲆⲆΔ.binaryType = "arraybuffer";
      b.ⲆⲆⲆΔ.ΔⵠΔⲆᐃ = b.ΔⵠΔⲆᐃ;
      b.ⲆⲆⲆΔ.onmessage = function (a) {
        if (b.ΔⵠΔⲆᐃ == b.ΔⵠΔⲆᐃ) {
          if (typeof a.data == "string") {
            var c = JSON.parse(a.data);
            switch (c[0]) {
              case 0:
                b.ⲆᐃΔⵠᐃ(c);
                break;
              case 1:
                b.ⵠᐃΔⵠΔᐃⲆ(c[1]);
                break;
              case X:
                b.ΔᐃⲆⵠⲆⵠⲆΔⲆ(c);
                break;
              case 3:
                b.ᐃΔⲆⲆΔⵠⲆⵠΔ(c);
                break;
              case 4:
                b.message(c[1]);
                break;
              case 5:
                b.ᐃⵠΔΔⵠΔΔ(c);
                break;
              case nl:
                b.ⵠΔⵠⵠⵠⵠᐃ(c[sl]);
            }
          } else {
            var d = new Uint8Array(a.data);
            switch (d[0]) {
              case fg:
                b.Δᐃⵠ(a.data, d, false);
                break;
              case 1:
                b.Δᐃⵠ(a.data, d, true);
                break;
              case On:
                b.ⵠⵠⲆⲆΔΔΔΔΔ();
                break;
              case Ft:
                b.ⵠΔⲆᐃᐃᐃⲆ(new Uint16Array(a.data));
                break;
              case cq:
                b.ᐃΔⲆΔⵠᐃⲆΔᐃ();
                break;
              case 5:
                b.ⲆΔⵠΔⲆⲆⵠᐃᐃ();
                break;
              case 6:
                b.ⵠᐃⲆΔⲆΔⵠΔⵠ();
                break;
              case 7:
                b.ⵠΔⲆᐃⲆΔᐃᐃᐃ(a.data);
                break;
              case wo:
                b.ⲆΔⲆⲆⲆⵠΔΔΔ(d[er]);
                break;
              case 9:
                b.ᐃᐃᐃᐃⵠΔⵠⲆΔ(d[Ls]);
                break;
              case sd:
                b.ᐃⵠⲆᐃΔᐃᐃ();
                break;
              case Jj:
                b.ⲆⲆΔⲆᐃⲆΔ(d[1], d[il]);
                break;
              case 12:
                b.ⵠΔⲆΔᐃ(d[Mg]);
                break;
              case Lt:
                b.ⵠⵠᐃⵠⵠΔΔΔᐃ(d, a.data);
                break;
              case Cn:
                b.ⲆⲆΔⵠⲆⵠᐃ();
                break;
              case 15:
                b.ᐃⲆⵠⲆⵠΔᐃᐃᐃ(d[1]);
                break;
              case 16:
                b.ᐃⲆᐃΔ(d[1], d[br], d[wi], d[Dd], d[Pg], d[6], d[wt]);
                break;
              case jr:
                b.ΔᐃΔⵠᐃⲆⵠⲆⲆ(a.data);
                break;
              case zj:
                b.ⲆᐃᐃᐃⵠⵠᐃΔⲆ();
                break;
              case wn:
                b.ᐃⵠᐃⲆⵠ(d[1]);
                break;
              case ek:
                b.ⲆᐃⲆⵠⵠⲆΔᐃΔ();
                break;
              case 21:
                b.ΔⲆⲆⵠ(a.data);
                break;
              case 22:
                b.ⵠⵠⵠⲆⵠᐃΔⲆⵠ(d[Ga]);
                break;
              case 23:
                b.ΔⵠⵠⵠᐃᐃΔⵠⵠ(a.data);
                break;
              case 24:
                b.ⲆΔᐃᐃΔⲆⲆⵠΔ(d[wh]);
                break;
              case 25:
                b.ΔᐃᐃⵠΔᐃᐃᐃΔ(d[1], a.data);
                break;
              case 26:
                b.ⵠᐃⲆΔᐃ(d);
                break;
              case 27:
                b.ΔⲆⵠᐃΔⵠᐃΔΔ();
                break;
              case 28:
                b.ᐃⵠⵠΔⲆ(d[1]);
                break;
              case 29:
                b.ⵠⲆⵠᐃⵠⲆⲆΔΔ();
                break;
              case 30:
                b.ⵠᐃΔⲆⵠⵠⵠΔΔ();
                break;
              case 31:
                b.ΔⲆⵠⲆⲆᐃⵠΔⵠ(d);
                break;
              case 32:
                b.ⵠᐃⵠⲆⵠᐃⲆΔΔ(d[Co]);
                break;
              case 33:
                b.ⲆⵠⵠⵠΔⵠΔΔⵠ(d[sc]);
                break;
              case 34:
                b.ᐃΔΔⲆᐃᐃΔᐃᐃ();
                break;
              case 35:
                b.ⵠⵠΔᐃⵠⲆΔⲆⲆ(d[1]);
                break;
              case 36:
                b.ⵠⵠⵠᐃᐃⲆⲆ(d[1]);
                break;
              case 37:
                b.ᐃⲆΔΔⲆᐃⲆⲆᐃ(d[wh], d[nd]);
                break;
              case 38:
                b.ΔᐃΔⲆⵠⵠᐃⵠΔ(d[Ls]);
                break;
              case 39:
                b.ΔΔⲆᐃⵠⵠᐃⲆⵠ(d[1]);
                break;
              case 40:
                b.ⵠΔᐃⵠⵠᐃᐃⵠⵠ();
                break;
              case 41:
                b.ᐃΔⲆᐃΔΔⲆᐃⲆ(d);
                break;
              case 42:
                b.ⲆᐃΔᐃⲆⵠΔⵠⲆ(d[ck]);
                break;
              case 43:
                b.ᐃΔⲆⲆᐃⵠⵠⲆΔ(d[1]);
                break;
              case 44:
                b.claimed(d[1]);
                break;
              case 45:
                b.ⲆΔⲆΔΔΔΔᐃᐃ(d[1]);
                break;
              case 46:
                b.ⵠⵠΔΔⲆⲆⵠᐃⲆ(d[Mg]);
                break;
              case 47:
                b.ΔⲆᐃΔⲆ(d[Fb]);
                break;
              case 48:
                b.ⵠᐃⲆΔⵠⵠᐃΔⲆ();
                break;
              case 50:
                b.ⵠΔⵠᐃⵠⵠΔΔⵠ(d[sl], d[nd], d[Jd]);
                break;
              case 51:
                b.ΔΔⲆⵠΔⵠⲆⲆᐃ();
                break;
              case 52:
                b.ᐃΔⲆᐃⵠⲆᐃⵠᐃ(d[Gt]);
                break;
              case 53:
                b.ΔⲆⲆⲆᐃⵠΔᐃⲆ(d[1]);
                break;
              case 54:
                b.ⲆΔⵠᐃⲆΔᐃⵠΔ();
                break;
              case 55:
                b.ΔΔΔᐃΔΔⵠⵠᐃ(d[Gt]);
                break;
              case 56:
                b.ΔΔⵠⵠΔᐃⵠⲆⲆ(d[sc]);
                break;
              case 57:
                b.ⲆⲆⲆⲆⵠᐃⵠⵠⲆ();
                break;
              case 58:
                b.ⲆⵠᐃᐃⲆᐃⲆⵠΔ();
                break;
              case 59:
                b.ⵠⲆⲆΔⵠⵠⲆⵠᐃ();
                break;
              case 60:
                b.ΔΔΔⲆⲆᐃΔⲆᐃ();
                break;
              case 61:
                dx.ⲆΔⲆ.ⵠΔᐃΔⲆᐃᐃ = 0.2;
                dx.ⲆΔⲆ.ⵠⵠⵠⵠⵠ = iu;
                break;
              case 62:
                b.ᐃᐃΔᐃⵠⵠⲆⵠⲆ(new Uint16Array(a.data));
                break;
              case 63:
                b.ⵠⵠΔⵠⵠⵠᐃⲆⵠ();
                break;
              case 64:
                b.ⲆΔᐃΔⲆⵠⲆᐃⲆ();
                break;
              case 65:
                b.ⵠΔΔⵠΔΔᐃⲆᐃ();
                break;
              case 66:
                b.ⲆᐃᐃᐃⵠᐃⵠⲆᐃ();
                break;
              case 67:
                b.ΔΔⵠⲆΔⵠⲆⵠⲆ(d[1]);
                break;
              case 68:
                b.ⲆⲆⲆΔᐃᐃⵠⵠⲆ(d[ck]);
                break;
              case 69:
                b.ᐃΔⲆⵠΔⵠⵠ(d[1]);
                break;
              case 70:
                b.ᐃᐃⲆᐃΔΔᐃⵠᐃ(d[_]);
                break;
              case 71:
                b.ⵠⵠⵠᐃⵠ(d[1]);
            }
          }
        }
      };
      b.ⲆⲆⲆΔ.onerror = function () {
        if (dx.reconnect.enabled) {
          bj.setTimeout(b.timeout, 2500);
        }
      };
      this.ⲆⲆⲆΔ.onopen = function () {
        clearTimeout(b.ⲆⲆΔⵠΔ);
        dx.ⲆⵠⲆⵠⲆⵠΔ = dx.ⲆⵠⲆⵠⲆⵠΔ || ᐃΔᐃⵠ.ⵠᐃᐃᐃⵠⲆΔ("token");
        ᐃΔᐃⵠ.ⲆⲆᐃⲆᐃᐃᐃ().then(a => {
          b.ⲆⲆⲆΔ[fw](Dr[sa].stringify([pf.ⲆΔᐃᐃⲆ.input.value, screen.width + 200, screen.height + 200, nw.ⲆⲆⵠⲆΔⲆΔ, dx.ΔⵠⲆⲆΔ, dx.ᐃⵠᐃᐃᐃΔⵠ, dx.reconnect.enabled ? Co : 0, pf.ⲆⲆⲆⲆ, pf.ΔΔΔΔⲆ, pf.ΔⲆⵠⵠᐃ, pf.ⵠⵠᐃᐃᐃ, pf.ⲆⵠⲆᐃⵠ, pf.ⲆⵠΔΔⲆ, lx === undefined ? sb : lx, kx === Xl ? Fj : kx.substring(kx.length - 50), hw, dx.ⲆⵠⲆⵠⲆⵠΔ, a, dx.ᐃΔⵠⲆᐃⲆᐃ, dx.ⵠⲆΔΔΔᐃⲆ]));
          dx.ⲆⵠⲆⵠⲆⵠΔ = Xl;
          dx.ᐃΔⵠⲆᐃⲆᐃ = undefined;
          dx.ⵠⲆΔΔΔᐃⲆ = undefined;
          b.ⲆⲆΔⵠΔ = setTimeout(b.timeout, nw.ⲆⵠⵠᐃΔΔΔᐃᐃ);
        });
      };
    };
  }();
  var ff;
  var dx;
  var ex;
  var fx = {
    ⵠᐃᐃΔⵠ: false
  };
  var gx = new function () {
    this.ᐃⵠⲆⵠΔ = 0;
    this.loaded = 0;
    this.transition = An;
    this.ⵠᐃⲆΔΔⲆᐃ = function (a) {
      return Ir * (a / ff.w);
    };
    this.ΔᐃⲆᐃᐃⵠᐃ = function (a) {
      return a / ff.ⵠΔⲆ * 100;
    };
    this.ᐃΔⵠᐃⵠⵠΔ = function (a, b) {
      a = this.ⵠᐃⲆΔΔⲆᐃ(a) - this.ⵠΔᐃᐃⲆ.x;
      return this.ⵠΔᐃᐃⲆ.x + b * a;
    };
    this.ⵠᐃΔⵠⵠⲆᐃ = function (a, b) {
      a = Math.abs(this.ΔᐃⲆᐃᐃⵠᐃ(a) - this.ⵠΔᐃᐃⲆ.y);
      return this.ⵠΔᐃᐃⲆ.y + b * a;
    };
    this.sample = {};
    this.ⵠᐃⵠΔΔ = {};
    this.ᐃᐃⲆⵠ = {};
    this.ᐃᐃⲆⵠᐃΔΔ = function (a, b, c, d) {
      for (var e = 0; b.length > e; e++) {
        var f = b[e];
        if (!a.playing(f)) {
          a.pos(c, d, -0.5, f);
          a.play(f);
          return true;
        }
      }
      return ia;
    };
    this.ΔᐃΔ = function (a, b, c, d) {
      c = this.ᐃΔⵠᐃⵠⵠΔ(c, ΔⵠᐃⲆⵠ.ᐃⵠᐃᐃᐃᐃᐃ);
      d = this.ⵠᐃΔⵠⵠⲆᐃ(d, ΔⵠᐃⲆⵠ.ᐃⵠᐃᐃᐃᐃᐃ);
      console.log("HIT", a, b, c, d, ΔⵠᐃⲆⵠ.ᐃⵠᐃᐃᐃᐃᐃ);
      if (a) {
        if (b === 1) {
          this.ᐃᐃⲆⵠᐃΔΔ(this.ᐃᐃⲆⵠ.ᐃᐃⵠᐃᐃⲆΔ, this.sample.ᐃᐃⵠᐃᐃⲆΔ, c, d);
        } else if (b === 0) {
          this.ᐃᐃⲆⵠᐃΔΔ(this.ᐃᐃⲆⵠ.ⵠⲆⵠΔⵠⵠⲆ, this.sample.ⵠⲆⵠΔⵠⵠⲆ, c, d);
        }
      } else {
        this.ᐃᐃⲆⵠᐃΔΔ(this.ᐃᐃⲆⵠ.ΔⲆᐃⵠⵠ, this.sample.ΔⲆᐃⵠⵠ, c, d);
      }
    };
    this.ⵠΔᐃᐃⲆ = {
      y: gl,
      x: xq
    };
    this.ΔᐃΔᐃⵠΔᐃ = {
      y: 0,
      x: 0
    };
    this.ⲆⲆⵠⲆᐃ = {};
    this.ⲆΔⵠⵠ = [];
    this.ΔΔᐃⵠᐃ = function (a, b) {
      for (var c in this.ⲆⲆⵠⲆᐃ) {
        var d = this.ⲆⲆⵠⲆᐃ[c];
        d.check(a);
        if (d.ΔΔΔᐃᐃⲆⵠ) {
          if (ff.ᐃⵠⲆⵠⵠ.now < _w.ᐃΔⵠᐃᐃΔⲆ) {
            d.ⲆΔⲆⲆⵠ();
          }
          if (b) {
            d.ⲆᐃⲆ(a, this.ⵠΔᐃᐃⲆ);
          }
          if (this.transition) {
            d.transition();
          }
        }
      }
      this.transition &&= 0;
    };
    this.ΔΔΔⵠᐃⲆⲆΔΔ = function () {
      var a = [];
      for (var b = 0; this.ⲆΔⵠⵠ.length > b; b++) {
        if ((e = this.ⲆΔⵠⵠ[b]).ΔΔᐃⵠᐃⵠⵠ) {
          a.push(b);
        } else if (!e.ΔΔᐃⵠᐃⵠⵠ && !ff.ⵠΔΔⲆ[e.ΔᐃᐃΔ]) {
          e.ΔᐃΔⲆΔᐃⲆ();
          a.push(b);
        }
      }
      for (var c = ff.Δᐃⵠ[rw.ⵠΔΔⵠ], d = (b = 0, 0); c.length > b && a.length > d; b++) {
        var e = c[b];
        if ((ff.mode != ow.ⵠᐃⵠΔⲆᐃⵠ || ff.ⲆΔⵠⵠ[e.id].ⲆΔᐃᐃⲆ !== "spectator") && e.ΔⵠⵠⵠⲆ === -1 && dx.ΔᐃᐃΔ !== e.ΔᐃᐃΔ) {
          this.ⲆΔⵠⵠ[a[d]].ᐃⲆⲆᐃⵠ(e.ΔᐃᐃΔ);
          d++;
        }
      }
    };
    this.ⲆᐃᐃⵠⵠΔᐃⲆΔ = function () {
      this.ΔΔΔⵠᐃⲆⲆΔΔ();
      for (var a = 0; this.ⲆΔⵠⵠ.length > a; a++) {
        var b = this.ⲆΔⵠⵠ[a];
        if (!b.ΔΔᐃⵠᐃⵠⵠ && b.check()) {
          b.ⲆᐃⲆ();
        }
      }
    };
    this.ⲆᐃⵠⲆΔⲆⵠΔΔ = function (a) {
      if (this.ΔᐃΔᐃⵠΔᐃ.x === a.x && this.ΔᐃΔᐃⵠΔᐃ.y === a.y) {
        return 0;
      } else {
        this.ΔᐃΔᐃⵠΔᐃ.x = a.x;
        this.ΔᐃΔᐃⵠΔᐃ.y = a.y;
        this.ⵠΔᐃᐃⲆ.x = this.ⵠᐃⲆΔΔⲆᐃ(a.x);
        this.ⵠΔᐃᐃⲆ.y = this.ΔᐃⲆᐃᐃⵠᐃ(a.y);
        Howler.pos(this.ⵠΔᐃᐃⲆ.x, this.ⵠΔᐃᐃⲆ.y, sb);
        return Fb;
      }
    };
    this.ⲆⵠⵠⲆⲆᐃⲆⲆⲆ = function () {
      if (this.ᐃⵠⲆⵠΔ && this.loaded) {
        var a = ff.ⵠΔΔⲆ[dx.ΔᐃᐃΔ];
        if (a) {
          a.ΔⵠⵠⵠⲆ = 0;
          var b = this.ⲆᐃⵠⲆΔⲆⵠΔΔ(a);
          if (ff.mode !== ow.ΔΔᐃᐃᐃ && ow.ᐃⵠΔΔⲆ !== ff.mode && ff.mode !== ow.ⵠᐃᐃΔⵠᐃᐃ) {
            this.ΔΔᐃⵠᐃ(a, b);
          }
          this.ⲆᐃᐃⵠⵠΔᐃⲆΔ();
        }
      }
    };
    this.ⲆⵠⵠᐃᐃⵠⲆⵠᐃ = function () {
      for (var b in ef) {
        var c = ef[b];
        if (typeof c === "object" && c.path) {
          c.ᐃⵠΔΔᐃ = new Howl({
            src: c.path,
            volume: bu,
            sprite: c.ᐃΔ
          });
        }
        for (var d in c.sample) {
          var f = c.sample[d];
          var g = [];
          console.log(Fg);
          for (var h = gl; h < f; h++) {
            var j = c.ᐃⵠΔΔᐃ.play(d);
            c.ᐃⵠΔΔᐃ.stop(j);
            c.ᐃⵠΔΔᐃ.on("fade", function (a) {
              if (!this.volume(a)) {
                console.log(Ct, Pl);
                this.stop(a);
              }
            }, j);
            g.push(j);
          }
          if (g.length > 1) {
            gx.sample[d] = g;
          } else {
            gx.sample[d] = g[0];
          }
          gx.ᐃᐃⲆⵠ[d] = c.ᐃⵠΔΔᐃ;
        }
      }
    };
    this.ⲆⲆΔⲆⲆⲆᐃ = function (a, b, c) {
      for (var d = 0; a.length > d; d++) {
        b.volume(c, a[d]);
      }
    };
    this.ᐃⵠΔⵠΔⲆⵠ = function (b, c, d, e, f, g) {
      var i = b;
      for (var a = Qr; d > a; a++) {
        var j = i[a] = [];
        for (ΔⵠⵠⲆ = yj; ΔⵠⵠⲆ < e; ΔⵠⵠⲆ++) {
          j[ΔⵠⵠⲆ] = gx.sample[f + ΔⵠⵠⲆ][a];
          c.ᐃⵠΔΔᐃ.volume(g, j[ΔⵠⵠⲆ]);
        }
      }
    };
    this.ᐃⲆⲆᐃⵠ = function () {
      gx.ⲆⵠⵠᐃᐃⵠⲆⵠᐃ();
      gx.ⵠᐃⵠΔΔ.ⲆΔΔⲆⲆᐃⲆ = [];
      gx.ⵠᐃⵠΔΔ.ⵠᐃⲆΔⵠ = [];
      gx.ⵠᐃⵠΔΔ.ᐃΔⲆⵠΔ = [];
      gx.ᐃⵠΔⵠΔⲆⵠ(gx.ⵠᐃⵠΔΔ.ⲆΔΔⲆⲆᐃⲆ, ef.ΔⵠΔⲆⲆᐃⲆ, _w.ⵠΔΔⵠ, Er, "p", 0.15);
      gx.ᐃⵠΔⵠΔⲆⵠ(gx.ⵠᐃⵠΔΔ.ⵠᐃⲆΔⵠ, ef.ΔᐃᐃΔⲆᐃᐃ, _w.ⵠΔΔⵠ, 4, "w", 0.15);
      gx.ᐃⵠΔⵠΔⲆⵠ(gx.ⵠᐃⵠΔΔ.ᐃΔⲆⵠΔ, ef.ⲆᐃᐃⲆΔᐃᐃ, _w.ⵠΔΔⵠ, rb, "d", 0.09);
      gx.ⲆⲆΔⲆⲆⲆᐃ(gx.sample.ΔⲆᐃⵠⵠ, gx.ᐃᐃⲆⵠ.ΔⲆᐃⵠⵠ, 0.15);
      gx.ⲆⲆΔⲆⲆⲆᐃ(gx.sample.ⵠⲆⵠΔⵠⵠⲆ, gx.ᐃᐃⲆⵠ.ⵠⲆⵠΔⵠⵠⲆ, 0.2);
      gx.ⲆⲆΔⲆⲆⲆᐃ(gx.sample.ᐃᐃⵠᐃᐃⲆΔ, gx.ᐃᐃⲆⵠ.ᐃᐃⵠᐃᐃⲆΔ, 1);
      gx.ⲆⲆⵠⲆᐃ.ΔΔΔΔⲆΔⲆΔΔ = new nf(_w.Ⲇᐃᐃᐃᐃⵠᐃⵠⵠ, this.sample.ΔⲆΔⵠΔⵠⵠ, this.sample.ᐃᐃⲆⵠⲆΔⵠ, _w.ⲆⵠᐃᐃⵠΔᐃⲆⲆ, 0.05, 0.4, ef.ᐃΔᐃᐃΔΔΔ.ᐃⵠΔΔᐃ, _w.ΔⲆⵠᐃᐃΔⵠ, {
        x: rs.ΔⵠΔᐃⲆᐃΔ,
        y: rs.ΔⵠΔⵠⲆⲆⲆ,
        w: ff.w,
        ⵠΔⲆ: ff.ⵠΔⲆ
      }, {
        x: rs.ΔⵠΔᐃⲆᐃΔ - 2300,
        y: rs.ΔⵠΔⵠⲆⲆⲆ - 4000,
        w: ff.w,
        ⵠΔⲆ: ff.ⵠΔⲆ
      }, {
        x: rs.ΔⵠΔᐃⲆᐃΔ - 1500,
        y: rs.ΔⵠΔⵠⲆⲆⲆ - 2000,
        w: ff.w,
        ⵠΔⲆ: ff.ⵠΔⲆ
      });
      gx.ⲆⲆⵠⲆᐃ.ⵠⵠⵠΔⵠᐃⵠⵠᐃ = new nf(_w.ⲆᐃᐃΔⵠᐃΔ, this.sample.ⵠⵠⵠΔᐃΔᐃ, this.sample.ᐃΔⲆⲆⵠᐃⵠ, _w.ⵠⲆⲆⵠᐃᐃⲆⵠΔ, 0.03, 0.25, ef.ᐃΔᐃᐃΔΔΔ.ᐃⵠΔΔᐃ, _w.ΔⲆⵠᐃᐃΔⵠ, {
        x: 0,
        y: rs.ΔⵠΔⵠⲆⲆⲆ + 800,
        w: rs.ΔⵠΔᐃⲆᐃΔ - 2300,
        ⵠΔⲆ: ff.ⵠΔⲆ
      }, {
        x: -Re,
        y: rs.ΔⵠΔⵠⲆⲆⲆ - 300,
        w: rs.ΔⵠΔᐃⲆᐃΔ - 100,
        ⵠΔⲆ: ff.ⵠΔⲆ
      }, {
        x: -yg,
        y: rs.ΔⵠΔⵠⲆⲆⲆ + 400,
        w: rs.ΔⵠΔᐃⲆᐃΔ - 1400,
        ⵠΔⲆ: ff.ⵠΔⲆ
      });
      gx.ⲆⲆⵠⲆᐃ.ⵠᐃⵠΔᐃΔΔ = new nf(_w.ⲆᐃᐃΔⵠᐃΔ, this.sample.ΔⲆᐃΔΔᐃⲆ, this.sample.ᐃΔⵠᐃⵠΔΔ, _w.ΔⵠⵠΔᐃΔᐃᐃΔ, 0.01, 0.22, ef.ᐃΔᐃᐃΔΔΔ.ᐃⵠΔΔᐃ, _w.ΔⲆⵠᐃᐃΔⵠ, {
        x: -100,
        y: -xo,
        w: ff.w + 200,
        ⵠΔⲆ: rs.ΔⵠΔⵠⲆⲆⲆ - 1000
      }, {
        x: -ea,
        y: -100,
        w: ff.w + 200,
        ⵠΔⲆ: rs.ΔⵠΔⵠⲆⲆⲆ + 600
      }, {
        x: -ba,
        y: -100,
        w: ff.w + 200,
        ⵠΔⲆ: rs.ΔⵠΔⵠⲆⲆⲆ + pn
      });
      for (var a = Fj; _w.ⵠΔΔⵠ > a; a++) {
        gx.ⲆΔⵠⵠ[a] = new rf(a);
      }
      gx.ⲆΔⵠⵠ[fg].ᐃⲆⲆᐃⵠ(dx.ΔᐃᐃΔ);
      gx.loaded = Kg;
    };
    this.ⲆⵠⲆᐃⲆᐃᐃΔᐃ = function () {
      if (!this.transition && _w.ᐃΔⵠᐃᐃΔⲆ > ff.ᐃⵠⲆⵠⵠ.now) {
        this.transition = 1;
      }
    };
    this.ⵠᐃⲆⲆᐃ = function () {
      if (this.ᐃⵠⲆⵠΔ && this.loaded) {
        for (var a in gx.sample) {
          var b = gx.sample[a];
          if (typeof b === "object") {
            for (var c = 0; c < b.length; c++) {
              gx.ᐃᐃⲆⵠ[a].stop(b[c]);
            }
          } else {
            gx.ᐃᐃⲆⵠ[a].stop(b);
          }
        }
        for (c = 0; gx.ⲆΔⵠⵠ.length > c; c++) {
          gx.ⲆΔⵠⵠ[c].ΔᐃΔⲆΔᐃⲆ();
        }
      }
    };
    this.select = function () {
      if (gx.ᐃⵠⲆⵠΔ) {
        gx.ⵠᐃⲆⲆᐃ();
      } else {
        if (!gx.loaded) {
          gx.ᐃⲆⲆᐃⵠ();
        }
        gx.ⲆΔⵠⵠ[gl].ΔᐃᐃΔ = dx.ΔᐃᐃΔ;
        gx.ⲆΔⵠⵠ[An].ΔΔᐃⵠᐃⵠⵠ = yj;
        gx.ⲆⵠⲆᐃⲆᐃᐃΔᐃ();
      }
      gx.ᐃⵠⲆⵠΔ = !gx.ᐃⵠⲆⵠΔ;
    };
  }();
  var Af = new function () {
    this.ⵠⲆΔⲆⲆᐃᐃ = function () {
      this.ⲆΔΔⲆΔ = 81;
      this.ᐃⵠⵠΔⵠ = 68;
      this.ᐃᐃᐃⲆⵠ = 90;
      this.ⲆⵠⵠⲆⲆΔᐃ = 83;
    };
    this.ⲆⲆⲆⵠᐃⲆᐃ = function () {
      this.ⲆΔΔⲆΔ = 65;
      this.ᐃⵠⵠΔⵠ = 68;
      this.ᐃᐃᐃⲆⵠ = 87;
      this.ᐃᐃⲆᐃⵠ = 83;
    };
    this.ᐃᐃⵠᐃⲆ = Gk;
    this.ⲆⵠⵠⲆⲆΔᐃ = Co;
    this.ⵠⲆⵠᐃᐃᐃᐃ = 49;
    this.ΔⲆΔΔⵠΔΔ = 50;
    this.ΔᐃⲆΔᐃⵠⵠ = 51;
    this.ΔᐃΔⵠⵠⲆΔ = 52;
    this.ᐃᐃΔΔΔⵠΔⲆΔ = 53;
    this.ΔⲆⲆᐃᐃⲆΔ = 17;
    this.ᐃΔᐃᐃΔⲆΔ = 37;
    this.ΔΔΔᐃᐃⵠᐃ = 39;
    this.ΔᐃⵠⵠΔⲆΔ = 38;
    this.ᐃΔⵠⲆⵠᐃᐃ = 40;
    this.ⵠᐃⲆᐃᐃΔⵠ = 32;
    this.ⲆᐃᐃⲆΔΔⵠ = 82;
    this.ᐃᐃᐃᐃᐃᐃΔ = 71;
    this.ΔⲆΔⵠⲆⲆⲆ = 86;
    this.ⵠᐃⲆⵠⲆⵠⲆ = 66;
    this.ⲆⲆⲆⵠᐃⲆᐃ();
    this.keys = new Array(255);
    for (var a = yj; a < 255; a++) {
      this.keys[a] = this.ᐃᐃⵠᐃⲆ;
    }
    this.up = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      this.keys[b] = this.ᐃᐃⵠᐃⲆ;
    };
    this.down = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      if (this.ⲆΔΔⲆΔ == b || b == this.ᐃΔᐃᐃΔⲆΔ) {
        this.ΔᐃⵠΔΔᐃⵠ();
      } else if (b == this.ᐃᐃᐃⲆⵠ || this.ΔᐃⵠⵠΔⲆΔ == b) {
        this.ΔᐃΔΔⵠⵠⲆ();
      } else if (this.ⲆⵠⵠⲆⲆΔᐃ == b || this.ⵠᐃⵠⵠΔΔⲆᐃΔ == b) {
        this.ΔⵠᐃΔᐃΔⵠ();
      } else if (b == this.ᐃⵠⵠΔⵠ || this.ΔΔΔᐃᐃⵠᐃ == b) {
        this.ΔΔⲆⲆᐃⲆⵠ();
      }
      this.keys[b] = this.ⲆⵠⵠⲆⲆΔᐃ;
      return b;
    };
    this.ΔᐃⵠΔΔᐃⵠ = function () {
      this.keys[this.ᐃⵠⵠΔⵠ] = this.ᐃᐃⵠᐃⲆ;
      this.keys[this.ΔΔΔᐃᐃⵠᐃ] = this.ᐃᐃⵠᐃⲆ;
    };
    this.ΔΔⲆⲆᐃⲆⵠ = function () {
      this.keys[this.ⲆΔΔⲆΔ] = this.ᐃᐃⵠᐃⲆ;
      this.keys[this.ᐃΔᐃᐃΔⲆΔ] = this.ᐃᐃⵠᐃⲆ;
    };
    this.ΔⵠᐃΔᐃΔⵠ = function () {
      this.keys[this.ᐃᐃᐃⲆⵠ] = this.ᐃᐃⵠᐃⲆ;
      this.keys[this.ΔᐃⵠⵠΔⲆΔ] = this.ᐃᐃⵠᐃⲆ;
    };
    this.ΔᐃΔΔⵠⵠⲆ = function () {
      this.keys[this.ᐃᐃⲆᐃⵠ] = this.ᐃᐃⵠᐃⲆ;
      this.keys[this.ᐃΔⵠⲆⵠᐃᐃ] = this.ᐃᐃⵠᐃⲆ;
    };
    this.ⲆⲆⵠⵠⵠΔᐃ = function () {
      this.keys[this.ᐃⵠⵠΔⵠ] = this.ᐃᐃⵠᐃⲆ;
      this.keys[this.ΔΔΔᐃᐃⵠᐃ] = this.ᐃᐃⵠᐃⲆ;
      this.keys[this.ⲆΔΔⲆΔ] = this.ᐃᐃⵠᐃⲆ;
      this.keys[this.ᐃΔᐃᐃΔⲆΔ] = this.ᐃᐃⵠᐃⲆ;
      this.keys[this.ᐃᐃᐃⲆⵠ] = this.ᐃᐃⵠᐃⲆ;
      this.keys[this.ΔᐃⵠⵠΔⲆΔ] = this.ᐃᐃⵠᐃⲆ;
      this.keys[this.ᐃᐃⲆᐃⵠ] = this.ᐃᐃⵠᐃⲆ;
      this.keys[this.ᐃΔⵠⲆⵠᐃᐃ] = this.ᐃᐃⵠᐃⲆ;
    };
    this.ΔⵠⲆΔΔΔⲆ = function () {
      return this.keys[this.ⲆΔΔⲆΔ] || this.keys[this.ᐃΔᐃᐃΔⲆΔ];
    };
    this.ΔⲆΔΔⲆᐃΔ = function () {
      return this.keys[this.ᐃⵠⵠΔⵠ] || this.keys[this.ΔΔΔᐃᐃⵠᐃ];
    };
    this.ΔΔⲆⲆⵠⲆⲆ = function () {
      return this.keys[this.ᐃᐃᐃⲆⵠ] || this.keys[this.ΔᐃⵠⵠΔⲆΔ];
    };
    this.ⵠᐃΔΔⲆΔᐃ = function () {
      return this.keys[this.ᐃᐃⲆᐃⵠ] || this.keys[this.ᐃΔⵠⲆⵠᐃᐃ];
    };
    this.ᐃⲆⲆⲆⲆΔⵠΔᐃ = function () {
      return this.keys[this.ΔⲆⲆᐃᐃⲆΔ];
    };
    this.ΔⲆᐃᐃⲆᐃᐃⲆᐃ = function () {
      return this.keys[this.ⵠⲆⵠᐃᐃᐃᐃ];
    };
    this.ⵠΔΔΔᐃΔⲆΔᐃ = function () {
      return this.keys[this.ΔⲆΔΔⵠΔΔ];
    };
    this.ᐃᐃᐃΔⵠⵠⲆΔⲆ = function () {
      return this.keys[this.ΔᐃⲆΔᐃⵠⵠ];
    };
    this.ᐃⵠⵠⲆⲆⲆᐃᐃⲆ = function () {
      return this.keys[this.ΔᐃΔⵠⵠⲆΔ];
    };
    this.ᐃᐃⵠⲆᐃᐃⲆⵠⵠ = function () {
      return this.keys[this.ⵠᐃⲆᐃᐃΔⵠ];
    };
    this.ΔⲆΔΔⵠⲆΔΔⲆ = function () {
      return this.keys[this.ⲆᐃᐃⲆΔΔⵠ];
    };
    this.ⲆᐃᐃⲆΔⵠⲆⵠⵠ = function () {
      return this.keys[this.ᐃᐃᐃᐃᐃᐃΔ];
    };
    this.ᐃⲆᐃᐃᐃⵠᐃᐃⵠ = function () {
      return this.keys[this.ΔⲆΔⵠⲆⲆⲆ];
    };
    this.ⵠⵠⵠᐃⲆᐃᐃΔΔ = function () {
      return this.keys[this.ⵠᐃⲆⵠⲆⵠⲆ];
    };
  }();
  var kf = new function () {
    this.ⲆⵠⵠⲆⲆΔᐃ = 0;
    this.ᐃᐃⵠᐃⲆ = _;
    this.IDLE = 2;
    this.ᐃᐃⲆⵠΔⵠⲆ = 0;
    this.ᐃΔⲆᐃⲆΔΔⵠⲆ = 1;
    this.ΔⲆⵠⲆ = {
      x: 0,
      y: 0
    };
    this.ⲆᐃΔⲆⲆᐃⲆ = Gk;
    this.ᐃⵠⲆⵠⵠΔⵠ = 0;
    this.angle = tj;
    this.state = this.IDLE;
    this.ⵠⵠΔᐃ = this.ᐃᐃⲆⵠΔⵠⲆ;
    this.down = function () {
      this.state = this.ⲆⵠⵠⲆⲆΔᐃ;
    };
    this.up = function () {
      this.state = this.ᐃᐃⵠᐃⲆ;
    };
    this.ⲆᐃⲆ = function () {
      if (this.ⲆᐃΔⲆⲆᐃⲆ != this.ΔⲆⵠⲆ.x || this.ΔⲆⵠⲆ.y != this.ᐃⵠⲆⵠⵠΔⵠ) {
        this.ⲆᐃΔⲆⲆᐃⲆ = this.ΔⲆⵠⲆ.x;
        this.ᐃⵠⲆⵠⵠΔⵠ = this.ΔⲆⵠⲆ.y;
        return rn;
      } else {
        return M;
      }
    };
  }();
  var xf = 0;
  var hx = gl;
  var ix = new function (f, e, i) {
    this.ⵠⲆ = f;
    this.Δ = e;
    this.ᐃⲆⲆᐃⲆᐃⲆ = {
      translate: {
        y: Qr,
        x: qb
      },
      style: document.getElementById("loading").style,
      ⲆᐃⲆ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ᐃⲆⲆᐃⲆᐃⲆ.style.position = "absolute";
    this.ᐃⲆⲆᐃⲆᐃⲆ.style.display = "inline-block";
    this.ᐃⲆⲆᐃⲆᐃⲆ.ⲆᐃⲆ();
    this.ⵠᐃᐃΔⵠ = true;
    this.stop = function () {
      this.ⵠᐃᐃΔⵠ = false;
    };
    this.ⲆᐃⲆⲆⲆⵠΔ = {
      total: Co
    };
    var j = this;
    function k() {}
    var m = 0;
    function n(a) {
      if (a.indexOf("normal-mode") !== -1 || -bd !== a.indexOf("player0")) {
        return Fb;
      } else if (a.indexOf("day-bag") !== -er || -_ !== a.indexOf("night-bag") || a.indexOf("day-book") !== -1 || -Ls !== a.indexOf("night-book") || a.indexOf("day-player") !== -1 || -Kg !== a.indexOf("night-player") || a.indexOf("day-accessory") !== -1 || a.indexOf("night-accessory") !== -1 || a.indexOf("day-crate") !== -1 || -sl !== a.indexOf("night-crate") || a.indexOf("day-skin") !== -1 || a.indexOf("night-skin") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-rock") !== -bd || a.indexOf("night-rock") !== -1 || a.indexOf("day-flower") !== -1 || -sl !== a.indexOf("night-flower") || a.indexOf("day-leaf") !== -1 || a.indexOf("night-leaf") !== -1 || a.indexOf("day-herb") !== -1 || -bs !== a.indexOf("night-herb") || a.indexOf("day-shell") !== -Lu || a.indexOf("night-shell") !== -Mg || -ig !== a.indexOf("day-hand-skin") || a.indexOf("night-hand-skin") !== -1 || -Mg !== a.indexOf("bignight") || -Fb !== a.indexOf("bigday") || a.indexOf("bigzday") !== -1 || a.indexOf("bigznight") !== -Mg || a.indexOf("tutorial-box") !== -_h || a.indexOf("tuto-") !== -1 || a.indexOf("-leaderboard-") !== -1 || a.indexOf("-lead-") !== -1 || a.indexOf("day-lava-") !== -1 || a.indexOf("night-lava-") !== -1 || a.indexOf("-click.png") !== -1 || -ck !== a.indexOf("-in.png") || a.indexOf("-fog") !== -1 || a.indexOf("-lava") !== -1 || -Ni !== a.indexOf("pebblecompo") || -sl !== a.indexOf("avatar-player")) {
        return 0;
      } else {
        return Ls;
      }
    }
    this.ΔⵠΔΔΔ = function () {
      j.ⲆᐃⲆ();
      if (++m == 40) {
        j.stop();
        k();
        return;
      }
      bj.setTimeout(j.ΔⵠΔΔΔ, 33);
    };
    this.ⵠᐃⲆⲆᐃ = function (a) {
      k = a;
      j.ΔⵠΔΔΔ();
    };
    new Date().getTime();
    Object.keys(Δᐃ).length;
    console.log(undefined, undefined);
    for (var o in Δᐃ) {
      if (n(Δᐃ[o]) === gl) {
        0;
      }
    }
    console.log(undefined, undefined);
    function p() {
      if (this.ⲆᐃⲆᐃⲆᐃⲆ !== 0) {
        return this.ⲆᐃⲆᐃⲆᐃⲆ;
      } else {
        this.ⲆᐃⲆᐃⲆᐃⲆ = Od;
        this.src = this.ᐃⲆΔⵠΔ;
        return Qr;
      }
    }
    function l(a) {
      this.ⲆᐃⲆᐃⲆᐃⲆ = wh;
    }
    var g = yj;
    function q() {
      console.log(undefined);
      if (g !== 1) {
        g = Kg;
        console.log(undefined);
        if (Zs !== At) {
          Zs();
        }
        At();
        var a = ᐃΔᐃⵠ.ⵠᐃᐃᐃⵠⲆΔ("server");
        if (a !== null) {
          ᐃΔᐃᐃ.ΔΔΔᐃᐃⵠⵠ = Ls;
          ᐃΔᐃᐃ.ᐃⵠⲆΔⲆ = [{
            nu: Md,
            m: 100,
            i: "server" + a + ".starve.io",
            p: 443,
            a: "Private Server " + a,
            ssl: 1
          }];
        }
        ᐃΔᐃᐃ.ΔΔⲆᐃᐃⲆⵠΔⵠ();
        setTimeout(i, Fs);
      }
    }
    function b() {
      let a = function () {
        ᐃΔᐃᐃ.ⲆΔⲆⲆⲆⲆΔ(q);
      };
      if (document.fonts && document.fonts.check) {
        if (document.fonts.check("1em Baloo Paaji")) {
          setTimeout(a, 100);
        } else {
          setTimeout(b, Oh);
        }
      } else {
        setTimeout(a, 1000);
      }
    }
    function s() {
      this.ΔⵠⲆⵠᐃᐃΔ++;
      console.warn(`Image (${this.src}) failed to load, attempt ${this.ΔⵠⲆⵠᐃᐃΔ}`, this);
      if (this.ΔⵠⲆⵠᐃᐃΔ > wi) {
        console.warn("Failed to load image too many times");
      }
      var a = this.ΔⵠⲆⵠᐃᐃΔ;
      var b = this.src;
      var c = n(b) === Rl ? 10000 : 2000;
      setTimeout(function () {
        for (var c in ⵠⲆⲆⲆᐃⵠΔ) {
          if (b.indexOf(ⵠⲆⲆⲆᐃⵠΔ[c]) !== -1) {
            Δᐃ[c] = new Image();
            Δᐃ[c].onload = l;
            Δᐃ[c].onerror = s;
            Δᐃ[c].ΔⵠⲆⵠᐃᐃΔ = a;
            Δᐃ[c].src = b;
            break;
          }
        }
      }, c);
    }
    function d(a) {
      for (var b in Δᐃ) {
        var c = Δᐃ[b];
        if (typeof c === "string" && n(c) === a) {
          Δᐃ[b] = new Image();
          Δᐃ[b].ⲆᐃⲆᐃⲆᐃⲆ = 0;
          Δᐃ[b].ΔⵠⲆⵠᐃᐃΔ = Md;
          Δᐃ[b].onload = l;
          Δᐃ[b].onerror = s;
          Δᐃ[b].ⵠΔⵠΔΔⵠⲆ = p;
          Δᐃ[b].ᐃⲆΔⵠΔ = c;
        }
      }
    }
    d(1);
    d(0);
    Au(sl, "l", 20, "#000");
    b();
    Kc();
    this.ⲆᐃⲆ = function () {
      this.ᐃⲆⲆᐃⲆᐃⲆ.translate.x = (Do - 500) / br;
      this.ᐃⲆⲆᐃⲆᐃⲆ.translate.y = (lq - 150) / bq;
      var a = 2500 / (40 - m + _h) - 48;
      this.ᐃⲆⲆᐃⲆᐃⲆ.translate.y -= a;
      this.ᐃⲆⲆᐃⲆᐃⲆ.ⲆᐃⲆ();
    };
    this.ᐃⲆⲆᐃⲆᐃⲆ.ⲆᐃⲆ();
    this.ⵠⲆⵠΔ = function () {
      try {
        cm();
      } catch (a) {}
      this.ⲆᐃⲆ();
    };
  }(Jo, Mo, function () {
    Zc();
    fx = new Uw(Jo, Mo);
    (pf = new Tw(Jo, Mo)).ᐃⵠⲆΔΔⲆⵠΔⲆ();
    ex = new Qw(Jo, Mo);
    ff = new tw();
    dx = new Hw();
    ix.ⵠᐃⲆⲆᐃ(function () {
      ix.ᐃⲆⲆᐃⲆᐃⲆ.style.display = "none";
      pf.ᐃⵠⲆⵠΔ();
    });
  });
  function Bf() {
    try {
      bj.Widget.adsRefresh();
    } catch (a) {}
  }
  function Df(b, c, d, e, f) {
    const g = ~(b & 57631) & b | ~(b & 57631) & 57631;
    const i = ~(c & 46185) & c | ~(c & 46185) & 46185;
    const a = (1 + (d + 13524) * 22695477) % 4294967296;
    const j = ((f + 24774) * 2147483629 + 2147483587) % 2147483647;
    return ((54500 + (ct(g, i, a, e ^ 53666) ^ Qf(j, g, i, a))) * 2147483629 + 2147483587) % 2147483647;
  }
  bj.onbeforeunload = function () {
    if (fx.ⵠᐃᐃΔⵠ) {
      return "Are you sure you want quit starve.io ;-; ?";
    }
  };
  Fa();
  (function b(a) {
    bj.requestAnimationFrame(b);
    hx = (a - xf) / 1000;
    xf = a;
    hx = Fb < hx ? 1 : hx;
    if (fx.ⵠᐃᐃΔⵠ) {
      fx.ⵠⲆⵠΔ();
    } else {
      Mo.clearRect(0, 0, Do, lq);
      if (ix.ⵠᐃᐃΔⵠ) {
        ix.ⵠⲆⵠΔ();
      } else if (pf.ⵠᐃᐃΔⵠ) {
        pf.ⵠⲆⵠΔ();
      } else if (ex.ⵠᐃᐃΔⵠ) {
        ex.ⵠⲆⵠΔ();
      }
    }
  })(Gk);
  var Ef = Aa;
  function jx() {
    Sf.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", true);
    Sf.send();
  }
  var Sf = new XMLHttpRequest();
  function Qf(b, c, d, e) {
    const f = ((44592 + b) * 22695477 + _) % 4294967296;
    const g = ~(d & 63929) & (d | 63929);
    const h = ~(f & 21295) & f | ~(f & 21295) & 21295;
    return (24 << ((h ^ g) >> 16 & 255)) + (8 << ((h ^ g) & 255)) + (16 << ((h ^ g) >> 24 & 255)) + (0 << ((h ^ g) >> 8 & 255)) ^ 36855;
  }
  Sf.onreadystatechange = function () {
    if (this.readyState === fd) {
      this.status;
    }
  };
  var _f = "https://token.starve.io/";
  var Ff = "https://token2.starve.io/";
  var Rf = 0;
  var jf = 1;
  var Wf = undefined;
  var kx = Fg;
  var lx = undefined;
  var mx = 0;
  bj.ⲆᐃΔΔΔⲆΔ = function () {
    mx = Ni;
  };
  var nx = {
    ᐃΔΔᐃᐃΔᐃⵠⵠ: "ACCESS_TOKEN"
  };
  var qf = document.createElement("script");
  qf.type = "text/javascript";
  qf.async = true;
  qf.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
  qf.addEventListener("load", function (a) {
    bj.XPayStationWidget.init(nx);
    bj.XPayStationWidget.on("status-done", Zf);
  }, false);
  document.getElementsByTagName("head")[Ah].appendChild(qf);
  bj.fbAsyncInit = function () {
    qx();
    console.log(Pa);
  };
  (function (a, b, c) {
    var d;
    var e = a.getElementsByTagName(b)[Rl];
    if (!a.getElementById(c)) {
      (d = a.createElement(b)).id = c;
      d.src = "https://connect.facebook.net/en_US/sdk.js";
      e.parentNode.insertBefore(d, e);
    }
  })(document, "script", "facebook-jssdk");
  var Hf = undefined;
  var ox = Oq;
  function px() {
    bj.gapi.auth2.init({
      client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
      scope: "https://www.googleapis.com/auth/userinfo.profile"
    }).then(a => {
      (Hf = a).isSignedIn.listen(Kf);
      Hf.currentUser.listen(Vf);
      if (Hf.isSignedIn.get()) {
        Hf.signIn();
      }
      Xf();
    });
  }
  function Kf(a) {}
  function Vf(a) {
    if (Ct === kx && ox !== undefined && (kx = ox.getAuthResponse().id_token) !== undefined) {
      Wf = Rf;
      lx = ox.getBasicProfile().getId();
      bj.ⲆᐃΔΔΔⲆΔ();
      return;
    }
    if (a !== hl && mt === a.isSignedIn()) {
      lx = (ox = a).id;
      lx = ox.getBasicProfile().getId();
      kx = ox.getAuthResponse().id_token;
      Wf = Rf;
      bj.ⲆᐃΔΔΔⲆΔ();
    }
  }
  function Xf() {
    if (Hf) {
      ox = Hf.currentUser.get();
    }
  }
  function Zf() {
    var a = new XMLHttpRequest();
    a.open("GET", _f + "claimBread?userid=" + lx);
    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    a.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
        var b = Number(a.responseText);
        if (!isNaN(b)) {
          pf.ᐃᐃⲆᐃᐃ = b;
        }
      }
    };
    a.send();
  }
  function $f(a, b, c, d) {
    a = Ao === a ? pf.ΔⵠⵠⲆⲆⲆⲆ : a;
    b = b === undefined ? pf.ᐃΔⵠᐃⵠᐃᐃ : b;
    c = c === undefined ? pf.ⲆᐃᐃΔᐃᐃΔ : c;
    d = d === undefined ? pf.ⲆΔⲆΔΔΔⵠ : d;
    if (a !== pf.ΔⵠⵠⲆⲆⲆⲆ || b !== pf.ᐃΔⵠᐃⵠᐃᐃ || c !== pf.ⲆᐃᐃΔᐃᐃΔ || d !== pf.ⲆΔⲆΔΔΔⵠ) {
      pf.ΔⵠⵠⲆⲆⲆⲆ = a;
      pf.ᐃΔⵠᐃⵠᐃᐃ = b;
      pf.ⲆᐃᐃΔᐃᐃΔ = c;
      pf.ⲆΔⲆΔΔΔⵠ = d;
      if (d === pf.ᐃⵠΔΔΔⲆᐃ) {
        d = "0";
      } else if (d === pf.ᐃᐃΔⲆⵠⵠⵠ) {
        d = "1";
      } else if (d === pf.ⲆⲆᐃᐃΔⲆⲆ) {
        d = "2";
      } else if (d === pf.ᐃΔⵠⲆⲆⲆⵠ) {
        d = "3";
      } else if (pf.ᐃⵠᐃⲆΔΔⵠ === d) {
        d = "4";
      } else if (pf.ⲆⵠⲆΔᐃⵠΔ === d) {
        d = "5";
      }
      if (b === pf.ᐃᐃᐃⵠⵠΔⲆ) {
        b = "total";
      } else if (b === pf.ⲆΔⲆⲆᐃΔⲆ) {
        b = "normal";
      } else if (pf.Ⲇᐃⵠⵠⵠᐃⵠ === b) {
        b = "zombie";
      } else if (b === pf.ⲆⲆⵠᐃᐃⵠΔ) {
        b = "vampire";
      } else if (b === pf.ⵠΔᐃᐃⲆⵠⲆ) {
        b = "forest";
      }
      if (pf.ᐃⲆⲆⵠᐃⵠᐃ === a) {
        a = "all";
      }
      if (pf.ⵠᐃᐃΔΔΔᐃ === a) {
        a = "week";
      }
      if (a === pf.ΔᐃⲆΔⵠΔᐃ) {
        a = "today";
      }
      if (c === pf.ΔⵠⲆᐃᐃⲆΔ) {
        c = "kill";
      } else if (c === pf.ⵠΔⲆΔⵠⲆᐃ) {
        c = "score";
      } else if (c === pf.ⲆⲆΔᐃⲆⵠᐃ) {
        c = "time";
      }
      var f = new XMLHttpRequest();
      f.open("GET", _f + "leaderboard?range=" + a + "&mode=" + b + "&sort=" + c + "&season=" + d);
      f.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      f.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && f.responseText !== "0") {
          for (var a = JSON.parse(f.responseText), b = "", c = Fj; c < a.length; c++) {
            ΔⵠᐃⲆΔ = a[c];
            var d = ΔⵠᐃⲆΔ[1];
            try {
              if (d.indexOf("Starver#") === -1) {
                d = bj.decodeURIComponent(bj.escape(bj.atob(d)));
              }
            } catch (a) {}
            b += "<div class=\"lineLeaderboard\">";
            b += "<div class=\"rank\">";
            b += c + 1 + "";
            b += "</div>";
            b += "<div class=\"name\">";
            b += d;
            b += "</div>";
            b += "<div class=\"lvl\">";
            b += pf.ⵠⲆⲆΔΔⲆΔ(ΔⵠᐃⲆΔ[oq]) + Co + "";
            b += "</div>";
            b += "<div class=\"kills\">";
            b += ΔⵠᐃⲆΔ[5] + "";
            b += "</div>";
            b += "<div class=\"time\">";
            b += ΔⵠᐃⲆΔ[4] + "";
            b += "</div>";
            b += "<div class=\"score\">";
            b += ΔⵠᐃⲆΔ[Qn] + "";
            b += "</div>";
            b += "</div>";
          }
          document.getElementById("leaderboard").innerHTML = b;
        }
      };
      f.send();
    }
  }
  function qx() {
    if (bj.FB) {
      bj.FB.init({
        cookie: true,
        appId: "642017356260407",
        xfbml: Yn,
        version: "v15.0"
      });
    }
    if (lx === undefined) {
      (function () {
        try {
          if (bj.FB && bj.FB.getUserID()) {
            lx = bj.FB.getUserID();
            if (kx === undefined) {
              bj.FB.getLoginStatus(function () {
                Wf = jf;
                kx = bj.FB.getAuthResponse().accessToken;
                bj.ⲆᐃΔΔΔⲆΔ(lx);
              });
            }
          }
        } catch (a) {}
        try {
          lx = ox.getBasicProfile().getId();
        } catch (a) {}
      })();
    }
  }
  function rx() {
    if (pf.ᐃᐃⲆᐃᐃ >= 300 || gl >= pf.ᐃⵠᐃᐃⵠⲆⵠ) {
      var a = document.getElementById("account_nickname_input").value.trim();
      document.getElementById("account_nickname_input").value = a;
      if (a.length >= Ek && Qj >= a.length) {
        var b = new XMLHttpRequest();
        b.open("GET", _f + "changeNickname?token=" + kx + "&userid=" + lx + "&nickname=" + encodeURIComponent(a));
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
            var a = Number(b.responseText);
            if (yj < a) {
              pf.ᐃᐃⲆᐃᐃ -= a;
            }
            pf.ᐃⵠᐃᐃⵠⲆⵠ = Ek;
            pf.ⵠⵠⵠⲆ(pf.ⵠᐃΔᐃΔ);
          }
        };
        b.send();
      }
    }
  }
  function sx(a) {
    if (lx) {
      var b = new XMLHttpRequest();
      b.open("GET", _f + "xsolla?userid=" + lx + "&item=" + a);
      b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      b.onreadystatechange = function () {
        if (this.readyState == aq && this.status == 200 && b.responseText !== "0") {
          nx.access_token = b.responseText;
          bj.XPayStationWidget.init(nx);
          bj.XPayStationWidget.open();
        }
      };
      b.send();
    }
  }
  function tx(a, b) {
    if (tj >= pf.ΔΔᐃⲆⵠ) {
      if (b > pf.ᐃᐃⲆᐃᐃ) {
        pf.ⵠⵠⵠⲆ(pf.ⲆΔΔⵠΔ);
      } else {
        pf.ΔΔᐃⲆⵠ = qo;
        pf.ⲆⵠⲆⵠΔᐃⲆ = 0;
        pf.ⲆⵠⵠⲆⲆᐃΔ = 100;
        var c = new XMLHttpRequest();
        c.open("GET", _f + "buySpin?token=" + kx + "&userid=" + lx + "&spin=" + a);
        c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        c.onreadystatechange = function () {
          if (Mu == this.readyState && this.status == 200) {
            if (c.responseText !== "0") {
              var a = JSON.parse(c.responseText);
              pf.ᐃⵠᐃᐃΔⲆΔᐃⵠ(tk * (Math.PI * a.rand), a.type, a.id);
              pf.ᐃᐃⲆᐃᐃ -= b;
            } else {
              pf.ΔΔᐃⲆⵠ = tj;
            }
          }
        };
        c.send();
      }
    }
  }
  function ux(a, b) {
    if (b > pf.ᐃᐃⲆᐃᐃ) {
      pf.ⵠⵠⵠⲆ(pf.ⲆΔΔⵠΔ);
    } else {
      var c = new XMLHttpRequest();
      c.open("GET", _f + "buyKit?token=" + kx + "&userid=" + lx + "&kit=" + a);
      c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      c.onreadystatechange = function () {
        if (this.readyState == zt && this.status == 200 && c.responseText !== "0") {
          var a = JSON.parse(c.responseText);
          pf.ᐃᐃⲆᐃᐃ -= b;
          pf.ⲆⲆΔᐃⲆ = Date.now() + Number(a);
        }
      };
      c.send();
    }
  }
  function vx(a) {
    var b = new XMLHttpRequest();
    b.open("GET", _f + "setRegion?token=" + kx + "&userid=" + lx + "&region=" + a);
    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    b.onreadystatechange = function () {
      if (this.readyState === 4 && this.status === 200) {
        if (b.responseText !== "0") {
          pf.ⵠⵠⵠⲆ(pf.ΔⲆᐃⵠⲆ);
        } else {
          pf.ⵠⵠⵠⲆ(pf.ΔΔᐃᐃⲆ);
        }
      }
    };
    b.send();
  }
  bj.onload = function () {
    bj.gapi.load("auth2", px);
  };
})();
