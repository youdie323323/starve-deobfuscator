(function () {
  let t = 136;
  const i = function (a) {
    let b = "";
    for (let c = 0; c < a.length; c++) {
      b += e.String.fromCharCode(a[c] ^ t++ % 255);
    }
    return b;
  };
  var o = 94;
  var z = 251;
  if (z > 3) {
    z = 30;
  }
  var Sc = 7;
  if (Sc == 11) {
    Sc = 230;
  }
  if (o >= 13) {
    o = 98;
  }
  var Vd = 105;
  if (Vd == 0) {
    Vd = 215;
  }
  var We = 9;
  if (We > 0) {
    We = 115;
  }
  var yh = 215;
  if (yh >= 11) {
    yh = 76;
  }
  var Gh = 229;
  if (Gh == 1) {
    Gh = 17;
  }
  var aj = 69;
  var bj = 68;
  if (bj === 12) {
    bj = 89;
  }
  if (aj == 12) {
    aj = 74;
  }
  Math.floor(129[129 .ΔᐃᐃⲆⲆⵠⲆ]);
  var cj = 5;
  if (cj >= 7) {
    cj = 64;
  }
  Math.floor(209[209 .ⲆⲆᐃΔΔΔⵠ]);
  var dj = 12;
  if (dj >= 14) {
    dj = 184;
  }
  var ej = 50;
  if (ej >= 10) {
    ej = 30;
  }
  var fj = 188;
  var gj = 74;
  if (gj == 5) {
    gj = 147;
  }
  if (fj > 10) {
    fj = 254;
  }
  var hj = 211;
  if (hj === 12) {
    hj = 75;
  }
  var ij = 137;
  if (ij >= 11) {
    ij = 14;
  }
  const jj = 16;
  const y = -8;
  const w = undefined;
  const P = 15;
  const k = 18;
  const A = -4;
  const x = false;
  const J = 20;
  const M = 2;
  const B = 100;
  const D = true;
  const I = 256;
  const E = 17;
  const S = 2;
  const Q = 14;
  const _ = 9;
  const F = 19;
  const R = 255;
  const G = 4;
  const j = 12;
  const L = 6;
  const W = 6;
  const O = 8;
  const N = 13;
  const q = 4;
  const H = 15;
  const U = 7;
  const Y = 2048;
  const K = 1 << 12;
  const V = 10;
  const X = 1;
  const Z = 11;
  const ee = 5;
  const ie = 4;
  const te = 2;
  const ne = 3;
  const oe = 12;
  const ae = D;
  const re = 0;
  let se;
  let kj = w;
  const lj = 16;
  let ge;
  let mj = w;
  let nj = w;
  let oj = w;
  let pj = w;
  const qj = 10;
  let me;
  let rj = w;
  let sj = "_";
  let tj = w;
  let uj = [];
  const ze = 9;
  let ye;
  const vj = 6;
  const wj = w;
  let ke = w;
  const Pe = 1;
  let xe = wj;
  const xj = 1;
  const Me = 4;
  const Be = 256;
  let De = w;
  const yj = 255;
  const Ee = x;
  const Se = 20;
  let Qe;
  let zj;
  let Aj = w;
  let Bj = wj;
  function Cj(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function je(a) {
    return e.String.fromCharCode(a);
  }
  let Le = w;
  const Dj = 100;
  const Ne = 12;
  let qe;
  const Ej = 14;
  const Ue = 8;
  let Ye;
  var Fj = e.Math.acos;
  e.Math.acos = e.Math.asin;
  e.Math.asin = Fj;
  var Ve = e.Math.cos;
  let Xe;
  e.Math.cos = e.Math.sin;
  e.Math.sin = Ve;
  const Gj = 1;
  let $e = w;
  const Hj = 1;
  const ii = 11;
  const ti = 4;
  let ni;
  let Ij;
  const Jj = 256;
  const ri = 17;
  let si;
  const Kj = 9;
  const li = 2;
  let gi = w;
  const Lj = 15;
  let bi;
  const Mj = 3;
  let vi;
  let Nj = w;
  const Oj = 1;
  const pi = 19;
  let Ci;
  let Pj = w;
  const Qj = 18;
  const zi = 20;
  const yi = D;
  let wi;
  let Rj = w;
  let Sj = w;
  let Tj = w;
  const Uj = 10;
  let Ji;
  let Vj = w;
  const Wj = x;
  let Di;
  const Xj = wj;
  let Ei = w;
  const Yj = 4;
  let Qi;
  const Zj = 13;
  const Fi = 3;
  let Ri;
  const $j = 18;
  let ji;
  let _j = Xj;
  const ak = 7;
  const Oi = 5;
  let Ni;
  let bk = w;
  (function b() {
    const c = {
      ⵠⲆΔΔⵠΔⵠⵠⲆ: 0
    };
    let d = 0;
    for (let a in c) {
      d = a;
    }
    const f = [];
    for (let a = 0; a < 12; a++) {
      f.push(e.Math.floor(1 + e.Math.random() * 10));
    }
    let g = "for (let " + d + " = 0 ; " + d + " < " + f[0] + " ; " + d + "++) {";
    for (let a = 0; a < f[1]; a++) {
      g += f[a] + ";debugger;";
    }
    for (let a = 0; a < f[2]; a++) {
      g += "debugger;";
    }
    g += "}";
    const h = new e.Function(g);
    e.setTimeout(b, 10000);
    h();
  })();
  const ck = 11;
  let Ui = wj;
  const dk = 16;
  const Ki = 17;
  const Vi = 2;
  const Xi = 0;
  const Zi = 16;
  const $i = 10;
  const ek = 2;
  const fk = wj;
  let gk;
  let hk;
  let ik = wj;
  let jk = fk;
  let kk = 0;
  const lk = 10;
  const mk = w;
  const nk = 12;
  if (!e.WebAssembly || !e.WebAssembly.instantiate) {
    ΔⵠΔΔᐃⵠᐃᐃᐃ();
  }
  const ok = {
    Date: Date
  };
  e.WebAssembly.instantiate(Uint8Array.from(e.atob(""), function (a) {
    return a.charCodeAt(0);
  }), ok).then(function (a) {
    se = a.instance;
    kj = se.exports;
    nj = kj.memory;
    mj = nj.buffer;
    oj = kj.__pin;
    ge = kj.__unpin;
    pj = kj.__new;
    tj = kj.__collect;
    sj = "_";
    for (let b = 0; b < 31; b++) {
      uj[b] = kj[sj + b];
    }
    rj = kj.__rtti_base;
    me = new Float32Array(mj);
    ye = new Float64Array(mj);
    ke = new BigUint64Array(mj);
    xe = new Uint32Array(mj);
    De = new Uint16Array(mj);
    Bj = new Uint8Array(mj);
    Aj = new BigInt64Array(mj);
    Qe = new Int32Array(mj);
    zj = new Int16Array(mj);
    Le = new Int8Array(mj);
    qe = uj[17];
    $e = uj[20];
    ik = uj[0];
    vi = uj[4];
    gi = uj[22];
    bk = uj[24];
    Vj = uj[18];
    Qi = uj[16];
    Ij = uj[19];
    si = uj[29];
    gk = uj[30];
    _j = uj[2];
    Ui = uj[11];
    Rj = uj[9];
    Pj = uj[10];
    Di = uj[14];
    Ri = uj[7];
    Ci = uj[27];
    bi = uj[6];
    Nj = uj[1];
    Tj = uj[5];
    Sj = uj[12];
    Ye = uj[13];
    Ji = uj[21];
    Ni = uj[26];
    Xe = uj[15];
    Ei = uj[28];
    wi = uj[8];
    ni = uj[23];
    hk = uj[25];
    ji = uj[3];
    kk = 1;
    if (jk) {
      jk();
    }
  });
  const pk = 100;
  const qk = 13;
  const rk = function (a) {
    return xe[(rj + 4 >>> 2) + (a << 1)];
  };
  const sk = 3;
  const tk = 20;
  const uk = 15;
  function vk(a) {
    return 31 - Math.clz32(a >>> 6 & 31);
  }
  const wk = 16;
  const xk = 18;
  function yk(a, b, c) {
    if (c) {
      switch (a) {
        case 2:
          return me;
        case 3:
          return ye;
      }
    } else {
      switch (a) {
        case 0:
          if (b) {
            return Le;
          } else {
            return Bj;
          }
        case 1:
          if (b) {
            return zj;
          } else {
            return De;
          }
        case 2:
          if (b) {
            return Qe;
          } else {
            return xe;
          }
        case 3:
          if (b) {
            return Aj;
          } else {
            return ke;
          }
      }
    }
  }
  const zk = 255;
  function Ak(b) {
    const c = xe[b + y >>> 2];
    const d = rk(c);
    const f = vk(d);
    let g = d & 4 ? b : xe[b + 4 >>> 2];
    const h = d & 2 ? xe[b + 12 >>> 2] : xe[g + A >>> 2] >>> f;
    return yk(f, d & 2048, d & K).subarray(g >>>= f, g + h);
  }
  const Bk = 0;
  const Ck = 4;
  const Dk = 11;
  const Ek = 19;
  const Fk = 256;
  const Gk = 13;
  const Hk = 8;
  function Ik(b, c, d, f) {
    const g = ~(b & 52855) & 52855 | ~(b & 52855) & b;
    const i = ~(c & 40016) & 40016 | ~(c & 40016) & c;
    const a = ~(d & 55660) & d | ~(d & 55660) & 55660;
    const j = ((f + 22694) * 1103515245 + 12345) % 2147483648;
    const k = bo(g, i, a, j, g, i);
    cs(a, j, g, i, a, j);
    return ~(k & 30695) & k | ~(k & 30695) & 30695;
  }
  const Jk = 6;
  const Kk = 11;
  const Lk = 20;
  function Mk(a, b, c) {
    Nj(Xw, a, b, c);
    return ((184 + (Bf(Ww[0], Ww[1], Ww[2], Ww[0]) ^ function (a, b) {
      qe(Xw, a, b);
      const c = ub(Ww[0], Ww[1], Ww[0], Ww[1], Ww[0], Ww[1]);
      Rk(Ww[0], Ww[1], Ww[0], Ww[1], Ww[0]);
      return c ^ 53563;
    }(Ww[1], Ww[2]))) * 75 + 74) % 65537;
  }
  const Nk = 20;
  const Ok = 18;
  const Pk = 14;
  const Qk = 12;
  function Rk(a, b, c, d, f) {
    ni(Xw, a, b, c, d, f);
    return ((79 + (rb(Ww[0], Ww[1], Ww[2], Ww[3]) ^ rb(Ww[4], Ww[0], Ww[1], Ww[2]))) * 75 + 74) % 65537;
  }
  function Sk(a) {
    return function (a, b) {
      Rj(Xw, a, b);
      const c = function (b, c, d, f, g) {
        Pj(Xw, b, c, d, f, g);
        const h = function (a, b) {
          Xe(Xw, a, b);
          const c = function (b, c, d, f, g, h) {
            wi(Xw, b, c, d, f, g, h);
            const a = function (b, c, d, f, g, h) {
              ik(Xw, b, c, d, f, g, h);
              const a = ub(Ww[0], Ww[1], Ww[2], Ww[3], Ww[4], Ww[5]);
              (function (b, c, d, f, g, h) {
                Ni(Xw, b, c, d, f, g, h);
                const a = function (a, b) {
                  Ei(Xw, a, b);
                  const c = sx(Ww[0], Ww[1], Ww[0]);
                  (function (a, b, c) {
                    si(Xw, a, b, c);
                    const d = rb(Ww[0], Ww[1], Ww[2], Ww[0]);
                    Zw(Ww[1], Ww[2], Ww[0], Ww[1], Ww[2], Ww[0]);
                  })(Ww[1], Ww[0], Ww[1]);
                  return (c | 44910) & ~(c & 44910);
                }(Ww[0], Ww[1]);
                const i = rb(Ww[2], Ww[3], Ww[4], Ww[5]);
              })(Ww[0], Ww[1], Ww[2], Ww[3], Ww[4], Ww[5]);
              return a ^ 47238;
            }(Ww[0], Ww[1], Ww[2], Ww[3], Ww[4], Ww[5]);
            const i = Eb(Ww[0], Ww[1], Ww[2], Ww[3]);
            return (24 << ((a ^ i) & 255)) + (0 << ((a ^ i) >> 8 & 255)) + (8 << ((a ^ i) >> 16 & 255)) + (16 << ((a ^ i) >> 24 & 255));
          }(Ww[0], Ww[1], Ww[0], Ww[1], Ww[0], Ww[1]);
          rb(Ww[0], Ww[1], Ww[0], Ww[1]);
          return ~(c & 24787) & 24787 | ~(c & 24787) & c;
        }(Ww[0], Ww[1]);
        const a = Zw(Ww[2], Ww[3], Ww[4], Ww[0], Ww[1], Ww[2]);
        return ((235 + (h ^ a)) * 48271 + 0) % 2147483647;
      }(Ww[0], Ww[1], Ww[0], Ww[1], Ww[0]);
      const d = Bf(Ww[1], Ww[0], Ww[1], Ww[0]);
      return ((100 + (c ^ d)) * 16807 + 0) % 2147483647;
    }(a, 7866);
  }
  const Tk = 9;
  const Uk = "development";
  const Vk = 255;
  const Wk = "production";
  function Xk(a) {
    this.ⵠᐃΔᐃ = 2147483648;
    this.a = 1103515245;
    this.c = 12345;
    this.state = a || Math.floor((this.ⵠᐃΔᐃ - 1) * Math.random());
  }
  Xk.prototype.random = function () {
    this.state = (this.a * this.state + this.c) % this.ⵠᐃΔᐃ;
    return this.state / this.ⵠᐃΔᐃ;
  };
  const Yk = D;
  const Zk = 5;
  Xk.prototype.ⵠⵠΔⵠᐃᐃⵠ = function (a) {
    this.state = a;
  };
  const $k = 0;
  ΔᐃΔⲆⲆᐃⵠ = 10000;
  Vt.get = function (a, b) {
    if (b !== "ⵠΔⵠᐃⲆᐃΔ") {
      const a = Math.random;
      const b = [];
      const c = function () {
        for (let a = 0; a < 308; a++) {
          b.push(a);
        }
        return a();
      };
      Math.random = c;
    }
    return e.Reflect.get(...arguments);
  };
  ;
  ⵠⵠᐃΔⵠᐃⵠ = [];
  var _k = new Xk();
  const al = Ee;
  _k.ⵠⵠΔⵠᐃᐃⵠ(new Date().getTime());
  const ml = 256;
  for (var Ul = 0; ΔᐃΔⲆⲆᐃⵠ > Ul; Ul++) {
    ⵠⵠᐃΔⵠᐃⵠ.push(_k.random());
  }
  const op = 9;
  const tn = 1;
  function nn(c, f, i, j, k, m) {
    const a = ((39488 + c) * 214013 + 2531011) % 4294967296;
    const n = ~(f & 49976) & f | ~(f & 49976) & 49976;
    const o = ~(i & 35856) & i | ~(i & 35856) & 35856;
    const h = j ^ 52219;
    const l = (k + 3575) % 65503;
    const g = ~(m & 6932) & m | ~(m & 6932) & 6932;
    const p = Un(a, n, o, h, l);
    const b = function (c, d, f, i, j, k) {
      const a = c ^ 30142;
      const m = (d + 63025) % 65493;
      const n = f ^ 30777;
      const h = ((45939 + i) * 22695477 + 1) % 4294967296;
      const l = (8 << (j >> 16 & 255)) + (32 << (j >> 24 & 255)) + (24 << (j >> 32 & 255)) + (16 << (j >> 8 & 255));
      const g = (k | 45652) & ~(k & 45652);
      const o = Un(a, m, n, h, l);
      rn(g, a, m, n, h);
      Dn(l, g, a, m, n, h);
      return o ^ 60048;
    }(g, a, n, o, h, l);
    An(g, a, n, o, h, l);
    const d = (1013904223 + (60709 + (p ^ b)) * 1664525) % 4294967296;
    return ~(d & 42138) & d | ~(d & 42138) & 42138;
  }
  function on(b, c, d, f) {
    const i = ~(b & 59259) & b | ~(b & 59259) & 59259;
    const j = ~(c & 56097) & c | ~(c & 56097) & 56097;
    const a = ((43315 + d) * 1664525 + 1013904223) % 4294967296;
    const k = (8 << (f >> 24 & 255)) + (32 << (f >> 32 & 255)) + (24 << (f >> 8 & 255)) + (16 << (f >> 16 & 255));
    const m = function (c, f, i, j, k, m) {
      const a = c ^ 10715;
      const n = (24 << (f >> 16 & 255)) + (16 << (f >> 32 & 255)) + (32 << (f >> 8 & 255)) + (8 << (f >> 24 & 255));
      const o = (8 << (i >> 16 & 255)) + (32 << (i >> 24 & 255)) + (16 << (i >> 8 & 255)) + (24 << (i >> 32 & 255));
      const h = j ^ 40782;
      const l = k ^ 41301;
      const g = ~(m & 12091) & (m | 12091);
      const p = mn(a, n, o, h, l, g);
      mn(a, n, o, h, l, g);
      Yn(a, n, o, h, l);
      const b = (p | 3006) & ~(p & 3006);
      return ~(b & 24460) & (b | 24460);
    }(i, j, a, k, i, j);
    const h = eo(a, k, i, j, a);
    mn(k, i, j, a, k, i);
    const l = (1013904223 + (26191 + (m ^ h)) * 1664525) % 4294967296;
    return (l | 38630) & ~(l & 38630);
  }
  const an = 19;
  function rn(b, c, d, f, i) {
    const j = ((b + 14772) * 2147483629 + 2147483587) % 2147483647;
    const a = c ^ 63080;
    const k = ((d + 60304) * 22695477 + 1) % 4294967296;
    const m = ~(f & 5467) & 5467 | ~(f & 5467) & f;
    const h = (i | 40165) & ~(i & 40165);
    const l = function (b, c, d, f) {
      const i = (b | 57611) & ~(b & 57611);
      const j = ((c + 56889) * 1664525 + 1013904223) % 4294967296;
      const a = d ^ 62842;
      const k = ~(f & 1179) & f | ~(f & 1179) & 1179;
      const m = bn(i, j, a, k);
      const h = Hn(i, j, a, k);
      on(i, j, a, k);
      const l = (24 << ((m ^ h) >> 24 & 255)) + (8 << ((m ^ h) >> 16 & 255)) + (16 << ((m ^ h) >> 32 & 255)) + (32 << ((m ^ h) >> 8 & 255));
      return ~(l & 63304) & (l | 63304);
    }(j, a, k, m);
    const g = eo(h, j, a, k, m);
    return ((28765 + ((16 << ((l ^ g) >> 24 & 255)) + (8 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> 32 & 255)) + (32 << ((l ^ g) >> 8 & 255)) ^ ro(h, j, a, k, m, h))) * 1664525 + 1013904223) % 4294967296;
  }
  const sn = 256;
  function hn(c, d, f, i, j) {
    const k = (12345 + (23101 + c) * 1103515245) % 2147483648;
    const a = d ^ 58614;
    const m = ((f + 45267) * 214013 + 2531011) % 4294967296;
    const n = i ^ 40810;
    const h = (24 << (j >> 24 & 255)) + (8 << (j >> 32 & 255)) + (32 << (j >> 8 & 255)) + (16 << (j >> 16 & 255));
    const l = no(k, a);
    const g = on(m, n, h, k);
    (function (b, c, d, f) {
      const i = (b + 34282) % 65336;
      const j = ~(c & 45181) & 45181 | ~(c & 45181) & c;
      const a = (16 << (d >> 8 & 255)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 16 & 255));
      const k = ~(f & 25475) & 25475 | ~(f & 25475) & f;
      const m = function (a, b) {
        const c = ~(a & 41406) & a | ~(a & 41406) & 41406;
        const d = ((b + 17922) * 1103515245 + 12345) % 2147483648;
        const f = ao(c, d, c);
        fn(d, c, d, c);
        return ((42346 + (f ^ 18573 ^ gn(d, c, d, c, d))) * 2147483629 + 2147483587) % 2147483647;
      }(i, j);
      const h = Xn(a, k, i, j, a);
      no(k, i);
      const l = (58498 + (m ^ h)) % 65531;
    })(a, m, n, h);
    const o = (24 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 32 & 255)) + (16 << ((l ^ g) >> 8 & 255));
    return ~(o & 13644) & o | ~(o & 13644) & 13644;
  }
  const ln = 7;
  function gn(b, c, d, f, i) {
    const j = (32 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)) + (8 << (b >> 32 & 255));
    const a = (c + 39144) % 65406;
    const k = d ^ 34575;
    const m = ~(f & 37841) & f | ~(f & 37841) & 37841;
    const h = (i | 25975) & ~(i & 25975);
    const l = bn(j, a, k, m);
    Xn(h, j, a, k, m);
    An(h, j, a, k, m, h);
    return (l | 19326) & ~(l & 19326) ^ 36297;
  }
  function un(b, c, d, f, i) {
    const j = (24 << (b >> 24 & 255)) + (32 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 32 & 255));
    const a = (12345 + (c + 3024) * 1103515245) % 2147483648;
    const k = (8 << (d >> 8 & 255)) + (32 << (d >> 32 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & 255));
    const m = (1 + (f + 41324) * 22695477) % 4294967296;
    const h = (i | 19607) & ~(i & 19607);
    const l = Zn(j, a);
    Xn(k, m, h, j, a);
    Dn(k, m, h, j, a, k);
    const g = ~(l & 49323) & 49323 | ~(l & 49323) & l;
    return ~(g & 46567) & (g | 46567);
  }
  function bn(b, c, d, f) {
    const g = b ^ 11762;
    const h = ~(c & 19425) & 19425 | ~(c & 19425) & c;
    return ((55182 + (((17757 + ((32 << ((g ^ h) >> 32 & 255)) + (8 << ((g ^ h) >> 8 & 255)) + (24 << ((g ^ h) >> 24 & 255)) + (16 << ((g ^ h) >> 16 & 255)) ^ (32 << (d >> 16 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 24 & 255)) + (16 << (d >> 8 & 255)))) * 1664525 + 1013904223) % 4294967296 ^ (~(f & 259) & 259 | ~(f & 259) & f))) * 1664525 + 1013904223) % 4294967296;
  }
  const dn = 3;
  const vn = 20;
  function cn(b, c, d) {
    const f = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
    const g = (c | 55665) & ~(c & 55665);
    const h = (d + 54633) % 65404;
    const a = rn(f, g, h, f, g);
    (function (c, f, i, j, k, m) {
      const a = (2531011 + (c + 16955) * 214013) % 4294967296;
      const n = ((9436 + f) * 1103515245 + 12345) % 2147483648;
      const o = (i | 14774) & ~(i & 14774);
      const h = (j | 48802) & ~(j & 48802);
      const l = ~(k & 24998) & (k | 24998);
      const g = (8 << (m >> 8 & 255)) + (16 << (m >> 16 & 255)) + (32 << (m >> 32 & 255)) + (24 << (m >> 24 & 255));
      const p = pn(a, n, o, h);
      const b = Xn(l, g, a, n, o);
      const d = pn(h, l, g, a);
    })(h, f, g, h, f, g);
    Hn(h, f, g, h);
    return ~(a & 43875) & (a | 43875) ^ 15116;
  }
  function mn(b, c, d, f, i, j) {
    const a = ~(b & 36133) & (b | 36133);
    const k = (c | 13670) & ~(c & 13670);
    const m = (d | 31390) & ~(d & 31390);
    const h = f ^ 64081;
    const l = i ^ 7550;
    const g = (2147483587 + (j + 63950) * 2147483629) % 2147483647;
    return (12345 + (36760 + (((62552 + (Vn(a, k, m, h, l) ^ Hn(g, a, k, m))) * 2147483629 + 2147483587) % 2147483647 ^ Yn(h, l, g, a, k))) * 1103515245) % 2147483648;
  }
  function pn(b, c, d, f) {
    const g = ~(b & 33107) & (b | 33107);
    const i = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & 255));
    const a = ~(d & 32053) & (d | 32053);
    const j = f ^ 12240;
    const k = function (b, c, d, f) {
      const i = (32 << (b >> 32 & 255)) + (16 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255));
      const j = (1 + (50595 + c) * 22695477) % 4294967296;
      const a = ~(d & 40066) & d | ~(d & 40066) & 40066;
      const k = f ^ 18768;
      const m = Un(i, j, a, k, i);
      const h = hn(j, a, k, i, j);
      const l = Bn(a, k);
      return ((16767 + ((2531011 + (35287 + (m ^ h)) * 214013) % 4294967296 ^ l)) * 1664525 + 1013904223) % 4294967296;
    }(g, i, a, j);
    Hn(g, i, a, j);
    return (2531011 + (44352 + ((~(k & 64131) & 64131 | ~(k & 64131) & k) ^ Un(g, i, a, j, g))) * 214013) % 4294967296;
  }
  function Cn(c, d, f, i, j, k) {
    const a = (1013904223 + (c + 28824) * 1664525) % 4294967296;
    const m = (1013904223 + (13210 + d) * 1664525) % 4294967296;
    const n = ~(f & 32165) & 32165 | ~(f & 32165) & f;
    const h = (24 << (i >> 24 & 255)) + (16 << (i >> 8 & 255)) + (8 << (i >> 16 & 255)) + (32 << (i >> 32 & 255));
    const l = (1 + (39199 + j) * 22695477) % 4294967296;
    const g = k ^ 33037;
    const o = function (b, c, d) {
      const f = (12345 + (39051 + b) * 1103515245) % 2147483648;
      const g = (c | 44117) & ~(c & 44117);
      const i = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & 255));
      const a = In(f, g, i, f, g);
      const j = ro(i, f, g, i, f, g);
      const k = function (a, b) {
        const c = (16 << (a >> 8 & 255)) + (32 << (a >> 16 & 255)) + (8 << (a >> 32 & 255)) + (24 << (a >> 24 & 255));
        const d = (32 << (b >> 32 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
        const f = Dn(c, d, c, d, c, d);
        (function (b, c, d, f, i) {
          const j = b ^ 64570;
          const a = (2531011 + (c + 41768) * 214013) % 4294967296;
          const k = (1013904223 + (d + 43923) * 1664525) % 4294967296;
          const m = (16 << (f >> 32 & 255)) + (8 << (f >> 24 & 255)) + (32 << (f >> 16 & 255)) + (24 << (f >> 8 & 255));
          const h = (i | 21896) & ~(i & 21896);
          const l = function (a, b) {
            const c = ((a + 49468) * 1103515245 + 12345) % 2147483648;
            const d = ((b + 30513) * 214013 + 2531011) % 4294967296;
            const f = cn(c, d, c);
            Yn(d, c, d, c, d);
            bn(c, d, c, d);
            return (f | 17943) & ~(f & 17943) ^ 21791;
          }(j, a);
          fn(k, m, h, j);
          const g = un(a, k, m, h, j);
        })(c, d, c, d, c);
        Zn(d, c);
        return (f | 58283) & ~(f & 58283) ^ 8337;
      }(i, f);
      const h = (16 << ((a ^ j) >> 32 & 255)) + (24 << ((a ^ j) >> 24 & 255)) + (32 << ((a ^ j) >> 8 & 255)) + (8 << ((a ^ j) >> 16 & 255));
      return (8 << ((h ^ k) >> 32 & 255)) + (16 << ((h ^ k) >> 8 & 255)) + (32 << ((h ^ k) >> 16 & 255)) + (24 << ((h ^ k) >> 24 & 255));
    }(a, m, n);
    Hn(h, l, g, a);
    return ((34159 + (o ^ 2959 ^ pn(m, n, h, l))) * 1103515245 + 12345) % 2147483648;
  }
  const Tn = 5;
  function fn(b, c, d, f) {
    const g = (b | 15432) & ~(b & 15432);
    const i = c ^ 12315;
    const a = d ^ 38714;
    const j = f ^ 58084;
    const k = nn(g, i, a, j, g, i);
    Hn(a, j, g, i);
    return ((34681 + ((~(k & 41134) & k | ~(k & 41134) & 41134) ^ An(a, j, g, i, a, j))) * 214013 + 2531011) % 4294967296;
  }
  const zn = 18;
  const yn = 2;
  const wn = 17;
  const Pn = 11;
  const kn = wj;
  function An(b, c, d, f, g, i) {
    const a = b ^ 23409;
    const j = c ^ 26380;
    const k = ((g + 33017) * 1103515245 + 12345) % 2147483648;
    const h = i ^ 42490;
    return ((19056 + (bn(a, j, d ^ 53590, f ^ 36633) ^ bn(k, h, a, j))) * 22695477 + 1) % 4294967296;
  }
  const xn = 9;
  const Jn = 16;
  const Mn = 10;
  function Bn(b, c) {
    const d = (2531011 + (b + 62874) * 214013) % 4294967296;
    const f = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const g = An(d, f, d, f, d, f);
    const h = An(d, f, d, f, d, f);
    bn(d, f, d, f);
    const a = (16 << ((g ^ h) >> 32 & 255)) + (8 << ((g ^ h) >> 24 & 255)) + (24 << ((g ^ h) >> 16 & 255)) + (32 << ((g ^ h) >> 8 & 255));
    return ~(a & 55949) & 55949 | ~(a & 55949) & a;
  }
  function Dn(c, f, i, j, k, m) {
    const a = (24 << (c >> 24 & 255)) + (32 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 32 & 255));
    const n = (f | 41551) & ~(f & 41551);
    const o = (24 << (i >> 24 & 255)) + (16 << (i >> 32 & 255)) + (8 << (i >> 16 & 255)) + (32 << (i >> 8 & 255));
    const h = ~(j & 32641) & (j | 32641);
    const l = ((k + 35582) * 214013 + 2531011) % 4294967296;
    const g = ~(m & 1090) & (m | 1090);
    const p = ro(a, n, o, h, l, g);
    gn(a, n, o, h, l);
    bn(g, a, n, o);
    const b = ~(p & 8077) & 8077 | ~(p & 8077) & p;
    return ~(b & 3708) & (b | 3708);
  }
  function In(b, c, d, f, i) {
    const j = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
    const a = ~(c & 7703) & c | ~(c & 7703) & 7703;
    const k = (d | 31275) & ~(d & 31275);
    const m = ~(f & 25693) & 25693 | ~(f & 25693) & f;
    const h = (8 << (i >> 8 & 255)) + (32 << (i >> 24 & 255)) + (24 << (i >> 16 & 255)) + (16 << (i >> 32 & 255));
    const l = An(j, a, k, m, h, j);
    const g = bn(a, k, m, h);
    ao(j, a, k);
    return (24 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 32 & 255)) ^ 31710;
  }
  const En = 256;
  const Sn = 1;
  const Qn = 255;
  const _n = 100;
  const Fn = 11;
  const Rn = 16;
  const Gn = 14;
  const jn = 100;
  const Ln = ae;
  const Wn = Xj;
  const On = 10;
  const Nn = 13;
  const qn = 16;
  function Hn(b, c, d, f) {
    const g = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
    const i = c ^ 57623;
    const a = ~(d & 40280) & d | ~(d & 40280) & 40280;
    const j = ~(f & 24601) & f | ~(f & 24601) & 24601;
    const k = Zn(g, i);
    Zn(a, j);
    eo(g, i, a, j, g);
    const h = ~(k & 43902) & 43902 | ~(k & 43902) & k;
    return (h | 8862) & ~(h & 8862);
  }
  function Un(b, c, d, f, i) {
    const j = b ^ 62008;
    const a = (24 << (c >> 32 & 255)) + (8 << (c >> 16 & 255)) + (32 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
    const k = ((d + 46531) * 22695477 + 1) % 4294967296;
    const m = ~(f & 1884) & 1884 | ~(f & 1884) & f;
    const h = ~(i & 55588) & 55588 | ~(i & 55588) & i;
    const l = rn(j, a, k, m, h);
    ro(j, a, k, m, h, j);
    return ((3037 + (l ^ 57467 ^ eo(a, k, m, h, j))) * 1664525 + 1013904223) % 4294967296;
  }
  function Yn(b, c, d, f, i) {
    const j = (2147483587 + (b + 64762) * 2147483629) % 2147483647;
    const a = ((18197 + c) * 214013 + 2531011) % 4294967296;
    const k = (2531011 + (22845 + d) * 214013) % 4294967296;
    const m = (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
    const h = ~(i & 11999) & i | ~(i & 11999) & 11999;
    const l = An(j, a, k, m, h, j);
    const g = Dn(a, k, m, h, j, a);
    bn(k, m, h, j);
    return (8 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 32 & 255)) ^ 35444;
  }
  const Kn = 15;
  function Vn(c, d, f, i, j) {
    const k = (16 << (c >> 32 & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const a = d ^ 55978;
    const m = ((f + 2934) * 1664525 + 1013904223) % 4294967296;
    const n = ~(i & 30642) & (i | 30642);
    const h = (8 << (j >> 8 & 255)) + (24 << (j >> 32 & 255)) + (16 << (j >> 24 & 255)) + (32 << (j >> 16 & 255));
    const l = Xn(k, a, m, n, h);
    const g = Yn(k, a, m, n, h);
    bn(k, a, m, n);
    const o = (16 << ((l ^ g) >> 32 & 255)) + (24 << ((l ^ g) >> 8 & 255)) + (8 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & 255));
    return ~(o & 23686) & (o | 23686);
  }
  function Xn(b, c, d, f, i) {
    const j = ~(b & 42203) & b | ~(b & 42203) & 42203;
    const a = c ^ 50118;
    const k = d ^ 41620;
    const m = ((f + 34240) * 2147483629 + 2147483587) % 2147483647;
    const h = (32 << (i >> 16 & 255)) + (16 << (i >> 8 & 255)) + (8 << (i >> 32 & 255)) + (24 << (i >> 24 & 255));
    const l = ro(j, a, k, m, h, j);
    ro(a, k, m, h, j, a);
    return (2531011 + (53616 + ((l | 43477) & ~(l & 43477) ^ bn(k, m, h, j))) * 214013) % 4294967296;
  }
  function Zn(a, b) {
    const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
    const d = b ^ 53080;
    return (1 + (57525 + ((17769 + (Vn(c, d, c, d, c) ^ Xn(d, c, d, c, d))) % 65357 ^ bn(c, d, c, d))) * 22695477) % 4294967296;
  }
  const $n = 14;
  function eo(c, d, f, i, j) {
    const k = ((c + 49173) * 1103515245 + 12345) % 2147483648;
    const a = (d + 52922) % 65337;
    const m = f ^ 25250;
    const n = ~(i & 10903) & 10903 | ~(i & 10903) & i;
    const h = ~(j & 33814) & 33814 | ~(j & 33814) & j;
    const l = gn(k, a, m, n, h);
    const g = no(k, a);
    gn(m, n, h, k, a);
    const o = (1 + (19675 + (l ^ g)) * 22695477) % 4294967296;
    return ~(o & 7922) & o | ~(o & 7922) & 7922;
  }
  const io = 3;
  const to = 12;
  function no(b, c) {
    const d = b ^ 24508;
    const f = (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
    const g = un(d, f, d, f, d);
    const h = Vn(f, d, f, d, f);
    In(d, f, d, f, d);
    const a = ((11269 + (g ^ h)) * 2147483629 + 2147483587) % 2147483647;
    return ~(a & 40927) & 40927 | ~(a & 40927) & a;
  }
  const oo = 19;
  function ao(b, c, d) {
    const f = b ^ 23323;
    const g = (2531011 + (61713 + c) * 214013) % 4294967296;
    const h = (d | 24198) & ~(d & 24198);
    const a = un(f, g, h, f, g);
    const i = un(h, f, g, h, f);
    un(g, h, f, g, h);
    return (16 << ((a ^ i) >> 32 & 255)) + (8 << ((a ^ i) >> 8 & 255)) + (24 << ((a ^ i) >> 24 & 255)) + (32 << ((a ^ i) >> 16 & 255)) ^ 31181;
  }
  function ro(b, c, d, f, i, j) {
    const a = d ^ 8102;
    const k = (24 << (f >> 16 & 255)) + (32 << (f >> 32 & 255)) + (8 << (f >> 24 & 255)) + (16 << (f >> 8 & 255));
    const m = ~(i & 29687) & 29687 | ~(i & 29687) & i;
    const h = (1 + (62237 + j) * 22695477) % 4294967296;
    const l = Bn((b + 52483) % 65496, (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 24 & 255)) + (8 << (c >> 32 & 255)));
    const g = Bn(a, k);
    Bn(m, h);
    return (45290 + (l ^ g)) % 65334 ^ 55575;
  }
  const so = 9;
  const ho = 255;
  const lo = 6;
  const go = 256;
  const uo = 100;
  function bo(b, c, d, f, g, i) {
    const a = (f | 31995) & ~(f & 31995);
    const j = g ^ 39123;
    const k = cx(~(b & 11028) & 11028 | ~(b & 11028) & b, (8 << (c >> 16 & 255)) + (0 << (c >> 24 & 255)) + (16 << (c >> 8 & 255)) + (24 << (c >> 0 & 255)), ~(d & 5784) & 5784 | ~(d & 5784) & d);
    const h = Db(a, j);
    return (24 << ((k ^ h) & 255)) + (0 << ((k ^ h) >> 16 & 255)) + (16 << ((k ^ h) >> 8 & 255)) + (8 << ((k ^ h) >> 24 & 255));
  }
  ΔⵠΔᐃ = {
    ΔᐃⵠⲆⲆΔᐃ: () => new Promise((a, b) => {
      e.grecaptcha.ready(function () {
        e.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
          action: "validate_recaptcha"
        }).then(function (b) {
          a(b);
        }).catch(c => {
          if (Tf) {
            a(0);
          } else {
            console.log(w);
            b(c);
          }
        });
      });
    }),
    ΔᐃⵠⵠⵠⵠⵠⲆΔ: function (a) {
      e.open(a, "_blank").focus();
    },
    ⲆⵠⲆⵠᐃΔⲆ: function (a) {
      e.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
    },
    ⲆⲆⲆⲆⵠⲆⵠ: function (a, b) {
      for (var c in a) {
        if (a[c] != b[c]) {
          return false;
        }
      }
      return true;
    },
    ᐃᐃΔⲆⲆⵠᐃΔⲆ: function (a, b) {
      if (a.length != b.length) {
        return false;
      }
      for (var c = 0; c < a.length; c++) {
        if (typeof a == "object") {
          if (!this.ⲆⲆⲆⲆⵠⲆⵠ(a[c], b[c])) {
            return Wj;
          }
        } else if (a[c] != b[c]) {
          return Wj;
        }
      }
      return Yk;
    },
    ᐃⲆΔᐃᐃΔΔ: function (a, b) {
      b.x = a.x;
      b.y = a.y;
    },
    ΔⵠⲆΔⲆᐃⵠ: function (a, b) {
      return {
        x: a.x - b.x,
        y: a.y - b.y
      };
    },
    ⵠⵠⲆΔⵠᐃⵠⵠᐃ: function (a, b) {
      a.x *= b;
      a.y *= b;
    },
    ⵠⵠᐃᐃⲆⲆΔ: function (a, b) {
      return a.x * b.x + a.y * b.y;
    },
    ᐃⵠᐃⲆⲆⵠᐃ: function (a) {
      return Math.sqrt(a.x * a.x + a.y * a.y);
    },
    sign: function (a) {
      if (a < 0) {
        return -1;
      } else {
        return 1;
      }
    },
    ΔΔΔΔⵠᐃᐃ: function (a, b) {
      return a.x * b.y - a.y * b.x;
    },
    ⲆⵠᐃⲆᐃΔᐃ: function (b, c, d, f) {
      var g = f - c;
      var h = d - b;
      return Math.atan2(g, h);
    },
    ᐃⲆΔⵠΔΔⲆ: function (a, b) {
      return Math.asin(this.ⵠⵠᐃᐃⲆⲆΔ(a, b) / (this.ᐃⵠᐃⲆⲆⵠᐃ(a) * this.ᐃⵠᐃⲆⲆⵠᐃ(b))) * this.sign(this.ΔΔΔΔⵠᐃᐃ(a, b));
    },
    ⵠᐃΔΔⵠΔⵠ: function (a) {
      ᐃⲆΔⲆⲆⲆᐃ = location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ᐃⲆΔⲆⲆⲆᐃ);
      if (b === null) {
        return null;
      } else {
        return b[1];
      }
    },
    ⲆᐃᐃΔⲆΔΔ: function (a, b) {
      var c = Math.PI * 2;
      b = (b % c + c) % c;
      if (Math.abs(a - b) > Math.PI) {
        if (a > b) {
          return b + c;
        } else {
          return b - c;
        }
      } else {
        return b;
      }
    },
    ΔΔᐃΔⲆᐃⲆ: function (a, b) {
      return this.ᐃⲆΔⵠΔΔⲆ({
        x: 1,
        y: 0
      }, this.ΔⵠⲆΔⲆᐃⵠ(a, b));
    },
    ΔⵠⲆᐃ: function (a, b) {
      return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
    },
    Ⲇⵠⵠᐃᐃᐃⵠ: function (a, b) {
      return {
        x: Math.sin(b) * a,
        y: Math.cos(b) * a
      };
    },
    ⵠΔⲆⲆᐃⵠⵠ: function (a, b) {
      a.x += b.x;
      a.y += b.y;
    },
    ΔᐃΔⲆΔᐃⵠ: function (a, b) {
      a.x -= b.x;
      a.y -= b.y;
    },
    ᐃᐃⲆⵠⵠⵠⲆᐃᐃ: function (a, b, c) {
      a.x += b;
      a.y += c;
    },
    ⲆⲆᐃΔⵠⵠⲆⵠΔ: function (a, b, c) {
      return {
        x: a.x + b,
        y: a.y + c
      };
    },
    ΔⵠᐃⲆᐃ: function (a, b, c) {
      a.x += Math.sin(c) * b;
      a.y += Math.cos(c) * b;
    },
    Δⵠⵠᐃᐃⵠⵠ: function (a, b) {
      return Math.floor((a - b) / 2);
    },
    ⵠⲆΔΔᐃᐃⲆ: function (a, b) {
      return {
        x: (a.x + b.x) / 2,
        y: (a.y + b.y) / 2
      };
    },
    ⵠⵠⲆⲆΔᐃΔ: function () {
      if (Math.random() > 0.5) {
        return 1;
      } else {
        return -1;
      }
    },
    ⲆΔⵠᐃⵠⵠⲆⲆⲆ: function (b, c, d) {
      var f = this.ⵠⵠⲆⲆΔᐃΔ();
      var g = this.ⵠⵠⲆⲆΔᐃΔ();
      var h = Math.random() * Math.PI / 2;
      return {
        x: Math.floor(b + Math.sin(h) * f * d),
        y: Math.floor(c + Math.cos(h) * g * d)
      };
    },
    ΔΔⵠΔΔⵠΔⲆⲆ: function (a, b, c, d) {
      this.x = a;
      this.y = b;
      this.w = c;
      this.ᐃΔΔ = d;
    },
    ΔᐃᐃᐃⵠⲆΔΔⵠ: function (a) {
      ⵠΔⵠ = [];
      ⵠΔⵠ.push.apply(ⵠΔⵠ, a);
      var b = [];
      while (ⵠΔⵠ.length > 0) {
        var c = Math.floor(Math.random() * ⵠΔⵠ.length);
        b.push(ⵠΔⵠ[c]);
        ⵠΔⵠ.splice(c, 1);
      }
      return b;
    },
    ⵠᐃⵠΔⲆᐃᐃ: function (a) {
      if (a >= 20000) {
        a = (a - 20000) * 1000;
      } else if (a >= 10000) {
        a = (a - 10000) * 100;
      }
      return a;
    },
    ΔΔᐃⵠᐃⵠⵠ: function (b) {
      if (typeof b !== "number") {
        return "0";
      }
      if (b >= 10000) {
        var c = Math.floor(Math.log10(b)) - 2;
        var d = Math.max(0, 3 - c);
        var f = Math.floor(b / 1000).toString();
        if (d) {
          for (var g = (f += "." + (b % 1000 / 1000).toString().substring(2).substring(0, d)).length - 1, h = 0; g > 0 && f[g] == "0"; g--) {
            h++;
          }
          if ((f = f.substring(0, f.length - h))[f.length - 1] == ".") {
            f = f.substring(0, f.length - 1);
          }
        }
        return f += "k";
      }
      return b.toString();
    },
    ᐃⲆⲆⵠᐃⲆΔ: function (a) {
      return a * (2 - a);
    },
    ᐃᐃⲆᐃⲆⲆᐃ: function (a) {
      return --a * a * a + 1;
    },
    ⵠⲆΔΔΔ: function (a) {
      if (a < 0.5) {
        return a * 2 * a;
      } else {
        return (4 - a * 2) * a - 1;
      }
    },
    ᐃⲆⵠΔⵠΔᐃ: function (a) {
      if (a < 0.5) {
        return a * 4 * a * a;
      } else {
        return (a - 1) * (a * 2 - 2) * (a * 2 - 2) + 1;
      }
    },
    ⵠⵠⵠΔΔᐃΔⵠⲆ: function (a) {
      if (a < 0.5) {
        return a * 8 * a * a * a;
      } else {
        return 1 - --a * 8 * a * a * a;
      }
    },
    ⲆΔⲆΔΔⵠⵠ: function (a) {
      return 1 - --a * a * a * a;
    },
    ΔᐃΔΔⲆⲆⵠ: function (a) {
      return 1 + --a * a * a * a * a;
    },
    ⵠΔΔΔ: function (b, c, d, f, g, h) {
      this.ΔᐃⲆ = b;
      this.ⵠⵠⲆ = c;
      this.max = d;
      this.min = f;
      this.ᐃᐃⵠⵠΔᐃⵠ = g;
      this.ⵠᐃΔⵠᐃΔΔ = h;
      this.ΔᐃⵠⵠΔΔΔ = 0;
      this.ᐃⲆⲆ = function () {
        if (this.ΔᐃⲆ) {
          if ((a = this.ⵠⵠⲆ + Jx * this.ᐃᐃⵠⵠΔᐃⵠ) > this.max) {
            this.ⵠⵠⲆ = this.max;
            this.ΔᐃⲆ = x;
            return Yk;
          }
          this.ⵠⵠⲆ = a;
        } else {
          var a;
          if ((a = this.ⵠⵠⲆ - Jx * this.ⵠᐃΔⵠᐃΔΔ) < this.min) {
            this.ⵠⵠⲆ = this.min;
            this.ΔᐃⲆ = D;
          } else {
            this.ⵠⵠⲆ = a;
          }
        }
      };
      return false;
    },
    ⲆᐃΔⲆⵠ: function (b, c, d, f, g, h) {
      this.ΔᐃⲆⲆΔ = b;
      this.Δᐃⵠⵠᐃ = c;
      this.ⲆᐃΔⲆᐃ = d;
      this.ⵠⵠᐃⵠᐃ = f;
      this.x = g;
      this.ⵠⲆᐃⵠΔ = h;
      this.ΔⵠⲆⵠⲆⵠⵠ = function () {
        this.x = this.ⲆΔΔⲆᐃᐃⵠⲆΔ;
        this.Δᐃⵠⵠᐃ = 0;
      };
      this.ⲆᐃᐃᐃⲆᐃᐃ = function (a) {
        if (a !== this.ⵠⲆᐃⵠΔ) {
          this.ⵠⲆᐃⵠΔ = a;
          this.ⵠⵠᐃⵠᐃ = this.x;
          this.Δᐃⵠⵠᐃ = 0;
        }
        if (this.ⵠⲆᐃⵠΔ !== this.x) {
          this.Δᐃⵠⵠᐃ += Jx;
          if (this.Δᐃⵠⵠᐃ > this.ⲆᐃΔⲆᐃ) {
            this.x = this.ⵠⲆᐃⵠΔ;
          } else {
            var b = this.ΔᐃⲆⲆΔ(this.Δᐃⵠⵠᐃ / this.ⲆᐃΔⲆᐃ);
            this.x = this.ⵠⵠᐃⵠᐃ + (this.ⵠⲆᐃⵠΔ - this.ⵠⵠᐃⵠᐃ) * b;
          }
        }
      };
    },
    ᐃⲆⵠⵠΔΔⲆ: function (b, c, d, f, g, i, a, j, k) {
      this.ΔᐃⲆⲆΔ = b;
      this.Δᐃⵠⵠᐃ = c;
      this.ⲆᐃΔⲆᐃ = d;
      this.ⵠⵠᐃⵠᐃ = f;
      this.ᐃⵠⲆΔΔ = g;
      this.x = i;
      this.y = a;
      this.ⵠⲆᐃⵠΔ = j;
      this.ⲆⵠᐃᐃΔΔⲆ = k;
      this.ⲆᐃᐃᐃⲆᐃᐃ = function (a) {
        if (a.x != this.ⵠⲆᐃⵠΔ || a.y != this.ⲆⵠᐃᐃΔΔⲆ) {
          this.ⵠⲆᐃⵠΔ = a.x;
          this.ⲆⵠᐃᐃΔΔⲆ = a.y;
          this.ⵠⵠᐃⵠᐃ = this.x;
          this.ᐃⵠⲆΔΔ = this.y;
          this.Δᐃⵠⵠᐃ = 0;
        }
        if (this.ⵠⲆᐃⵠΔ != this.x || this.ⲆⵠᐃᐃΔΔⲆ != this.y) {
          this.Δᐃⵠⵠᐃ += Jx;
          if (this.Δᐃⵠⵠᐃ > this.ⲆᐃΔⲆᐃ) {
            this.x = this.ⵠⲆᐃⵠΔ;
            this.y = this.ⲆⵠᐃᐃΔΔⲆ;
          } else {
            var b = this.ΔᐃⲆⲆΔ(this.Δᐃⵠⵠᐃ / this.ⲆᐃΔⲆᐃ);
            this.x = this.ⵠⵠᐃⵠᐃ + (this.ⵠⲆᐃⵠΔ - this.ⵠⵠᐃⵠᐃ) * b;
            this.y = this.ᐃⵠⲆΔΔ + (this.ⲆⵠᐃᐃΔΔⲆ - this.ᐃⵠⲆΔΔ) * b;
          }
        }
      };
    },
    ΔᐃⲆᐃⵠⵠⵠ: function (a) {
      var b = "";
      for (var c = 0; c < a; c++) {
        b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
      }
      return b;
    },
    ᐃΔᐃⲆΔᐃⵠ: function (a, b) {
      b ||= location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
      if (c == null) {
        return null;
      } else {
        return c[1];
      }
    },
    ⲆⵠΔⲆΔ: function (a) {
      let b = "";
      const c = a.length;
      for (let d = 0; d < c; d++) {
        b += String.fromCharCode(a[d]);
      }
      return b;
    },
    ᐃⲆᐃᐃⵠⵠⵠ: function (a, b) {
      if (a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.ᐃΔΔ) {
        return Yk;
      } else {
        return Ee;
      }
    },
    ΔⵠΔΔⲆᐃⲆ: function (b, c, d, f, g, h, a, i) {
      if (Math.max(b, g) < Math.min(c, h) && Math.max(d, a) < Math.min(f, i)) {
        return 1;
      } else {
        return 0;
      }
    },
    ⲆⵠⵠΔⲆⲆⵠ: function (a, b, c) {
      return (1 - c) * a + c * b;
    },
    ⲆΔⵠΔⲆᐃᐃ: function (a) {
      return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }
  };
  Math.sign = Math.sign || function (a) {
    if (a === 0) {
      return 0;
    } else if (a > 0) {
      return 1;
    } else {
      return -1;
    }
  };
  Math.log10 = Math.log10 || function (a) {
    return Math.log(a) / Math.ΔᐃⵠⲆΔⵠⵠΔⵠ;
  };
  const vo = 1344225;
  const co = 1344225 .ⵠᐃⵠⵠⲆⵠᐃ;
  const mo = `const ⵠⲆΔᐃⲆΔᐃ = (typeof ᐃΔΔΔ === "${co}") ? 1 : 0; return ⵠⲆΔᐃⲆΔᐃ;`;
  const po = 19;
  function Co(b, c, d, f, i) {
    const j = (8 << (b >> 16 & 255)) + (16 << (b & 255)) + (0 << (b >> 24 & 255)) + (24 << (b >> 8 & 255));
    const a = (8 << (c >> 8 & 255)) + (24 << (c & 255)) + (16 << (c >> 16 & 255)) + (0 << (c >> 24 & 255));
    const k = (2147483587 + (34999 + d) * 2147483629) % 2147483647;
    const m = (2147483587 + (f + 1008) * 2147483629) % 2147483647;
    const h = dm(j, a, k, m, (2531011 + (i + 63796) * 214013) % 4294967296, j);
    const l = fb(a, k, m);
    return (16 << ((h ^ l) >> 16 & 255)) + (8 << ((h ^ l) >> 24 & 255)) + (0 << ((h ^ l) >> 8 & 255)) + (24 << ((h ^ l) & 255));
  }
  const To = 17;
  const fo = 8;
  const zo = w;
  const yo = 255;
  const wo = 4;
  const Po = Ee;
  const ko = 6;
  const Ao = wj;
  const xo = 10;
  const Jo = 3;
  const Mo = 100;
  const Bo = 2;
  const Do = 0;
  var Io = document.getElementById("game_canvas");
  var Eo = Io.getContext("2d");
  const So = 256;
  var Qo = Io.width;
  var aq = Io.height;
  var bq = Io.width / 2;
  const cq = wj;
  const Go = 16;
  var jo = Io.height / 2;
  const dq = 20;
  const Wo = 18;
  const Oo = 12;
  const No = 18;
  var qo = {
    x: bq,
    y: jo
  };
  var eq = 1;
  var fq = 1;
  const gq = 1;
  const Ko = 7;
  const Vo = 8;
  var Xo = -1;
  var hq = "J" + uq;
  const iq = 4;
  var ea = "S" + Rq;
  const jq = 6;
  var ta = e;
  const na = 15;
  var oa;
  const kq = 19;
  const ra = 20;
  const sa = 255;
  const ha = 4;
  var la = (wa = "O") + "N";
  const lq = 17;
  const ba = Wj;
  const da = Ln;
  const va = 13;
  var ca;
  const mq = 11;
  const pa = 14;
  const Ca = 5;
  var Ta;
  var nq = ta;
  ea = "N";
  var za = "J";
  const oq = 17;
  var wa = "O" + uq;
  const pq = 256;
  const ka = 2;
  var Aa = nq;
  const xa = 8;
  const Ja = x;
  const Ma = Wn;
  var Ba;
  const qq = 255;
  var Ia = Aa;
  const Ea = 7;
  const Sa = 3;
  const Qa = 100;
  const _a = 14;
  const Fa = 20;
  const Ra = kn;
  const Ga = 13;
  la = "N" + undefined;
  var ja;
  var rq = Ia;
  const Wa = da;
  const Oa = 5;
  const Na = 9;
  const qa = 19;
  const Ha = 10;
  var Ua;
  var sq = rq;
  const Ka = 17;
  var Va;
  const tq = 8;
  function Za(a) {
    const b = e.setTimeout;
    const c = b;
    const d = function () {
      b(d, 2399);
      c(d, 7154);
    };
    d();
  }
  const $a = 11;
  var uq;
  var vq = sq;
  const wq = 3;
  const xq = 255;
  const yq = 11;
  var zq;
  const Aq = 18;
  var Bq = vq;
  za = "O";
  const Cq = D;
  const Dq = 7;
  const Eq = 20;
  const Fq = Ja;
  const Gq = 18;
  const Hq = 20;
  const Iq = 4;
  var Jq;
  var Kq = Bq = vq;
  const Lq = 16;
  const Mq = 12;
  const Nq = 15;
  const Oq = 0;
  var Pq;
  var Qq = Kq;
  var Rq = "J" + (Jq = "S");
  const Sq = 10;
  const Tq = 0;
  Io.oncontextmenu = function () {
    return false;
  };
  const Uq = 14;
  function Vq(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Wq(a) {
    return e.String.fromCharCode(a);
  }
  hq = "J";
  const Xq = Xj;
  function Yq(a) {
    var b = new Image();
    b.src = a.toDataURL("image/png");
    b.width = a.width;
    b.height = a.height;
    b.ᐃΔᐃⵠᐃΔΔ = 1;
    return b;
  }
  const Zq = 255;
  const $q = 6;
  wa = la;
  Ta = oa = ca = Rq + (za += hq = ea);
  const _q = 17;
  const ar = wj;
  la = uq;
  uq = Rq;
  const br = 19;
  const cr = Wj;
  const dr = 1;
  const er = 8;
  uq = Rq;
  wa = Rq;
  Ba = ja = Rq + za;
  ea = za + hq;
  const fr = 0;
  ;
  const gr = 2;
  const hr = da;
  Ua = oa;
  const ir = Wj;
  wa = Rq + za;
  const jr = 15;
  Va = ca;
  la = Rq + za;
  const kr = 13;
  const mr = 18;
  const nr = 100;
  zq = Ta;
  const or = wj;
  za = uq;
  const qr = 2;
  Jq = ca;
  Pq = oa;
  hq = wa;
  var rr = e.devicePixelRatio || 1;
  const ur = wj;
  var vr = Eo.ΔΔᐃⲆⲆⲆΔΔⵠ || Eo.ΔⵠⲆⵠⲆᐃⲆΔᐃ || Eo.ⵠⲆⲆᐃⵠᐃⵠⵠᐃ || Eo.ⵠⲆᐃᐃΔΔⵠⲆΔ || Eo.ΔᐃⲆⲆΔΔᐃᐃΔ || 1;
  function xr() {
    if (e.innerWidth != Io.width) {
      Io.width = e.innerWidth;
      Qo = Io.width;
      bq = Io.width / 2;
    }
    if (Io.height != e.innerHeight) {
      Io.height = e.innerHeight;
      aq = Io.height;
      jo = Io.height / 2;
    }
    qo = {
      x: bq,
      y: jo
    };
    var a = Io.width;
    var b = Io.height;
    fq = Xo === -1 ? rr / vr : Xo;
    Io.width = a * fq;
    Io.height = fq * b;
    Io.style.width = a + "px";
    Io.style.height = b + "px";
    Eo.scale(fq, fq);
    if (Dx) {
      Dx.ᐃΔᐃⲆ.ΔᐃⵠⲆⵠΔⲆ = a;
      Dx.ᐃΔᐃⲆ.ⲆⵠⵠⲆΔⲆⵠ = b;
    }
    if (Lx.ⲆΔΔⲆⲆ) {
      Lx.ᐃⲆⲆ();
    } else if (zx.ⲆΔΔⲆⲆ) {
      zx.ᐃⲆⲆ();
    } else if (Fx.ⲆΔΔⲆⲆ) {
      Fx.ᐃⲆⲆ();
    } else if (Ex.ⲆΔΔⲆⲆ) {
      Ex.ᐃⲆⲆ();
    }
  }
  const yr = 1;
  const zr = 8;
  var Ar = document.getElementById("game_body");
  Ar.ondragstart = function () {
    return ir;
  };
  const Br = 17;
  Ar.ondrop = function () {
    return false;
  };
  const Cr = w;
  const Dr = 256;
  const Fr = 12;
  const Gr = yi;
  Ar.onresize = xr;
  const Hr = 9;
  const Ir = 3;
  const Jr = 6;
  const Kr = 7;
  (function () {
    var b = 0;
    for (var a = ["ms", "moz", "webkit", "o"], c = 0; a.length > c && !e.requestAnimationFrame; ++c) {
      e.requestAnimationFrame = e[a[c] + "RequestAnimationFrame"];
      e.cancelAnimationFrame = e[a[c] + "CancelAnimationFrame"] || e[a[c] + "CancelRequestAnimationFrame"];
    }
    e.requestAnimationFrame ||= function (c, d) {
      var f = new Date().getTime();
      var g = Math.max(0, 16 - (f - b));
      var a = e.setTimeout(function () {
        c(f + g);
      }, g);
      b = f + g;
      return a;
    };
    if (!e.cancelAnimationFrame) {
      e.cancelAnimationFrame = function (a) {
        clearTimeout(a);
      };
    }
  })();
  const Lr = function () {
    let j = 0;
    let k = 0;
    let q = 0;
    const w = ΔⵠΔᐃ.ⲆⵠΔⲆΔ([115, 116, 97, 99, 107]);
    const o = ΔⵠΔᐃ.ⲆⵠΔⲆΔ([67, 97, 110, 118, 97, 115, 82, 101, 110, 100, 101, 114, 105, 110, 103, 67, 111, 110, 116, 101, 120, 116, 50, 68]);
    const a = ΔⵠΔᐃ.ⲆⵠΔⲆΔ([112, 114, 111, 116, 111, 116, 121, 112, 101]);
    const r = ΔⵠΔᐃ.ⲆⵠΔⲆΔ([100, 114, 97, 119, 73, 109, 97, 103, 101]);
    ΔⵠΔᐃ.ⲆⵠΔⲆΔ([103, 108, 111, 98, 97, 108, 65, 108, 112, 104, 97]);
    const s = ΔⵠΔᐃ.ⲆⵠΔⲆΔ([117, 115, 101, 114, 115, 99, 114, 105, 112, 116]);
    const h = ΔⵠΔᐃ.ⲆⵠΔⲆΔ([105, 110, 100, 101, 120, 79, 102]);
    const l = ΔⵠΔᐃ.ⲆⵠΔⲆΔ([77, 97, 116, 104]);
    ΔⵠΔᐃ.ⲆⵠΔⲆΔ([99, 101, 105, 108]);
    const g = ΔⵠΔᐃ.ⲆⵠΔⲆΔ([102, 108, 111, 111, 114]);
    const u = ΔⵠΔᐃ.ⲆⵠΔⲆΔ([87, 101, 98, 83, 111, 99, 107, 101, 116]);
    const b = ΔⵠΔᐃ.ⲆⵠΔⲆΔ([115, 101, 110, 100]);
    const d = ΔⵠΔᐃ.ⲆⵠΔⲆΔ([115, 105, 103, 110]);
    const v = ΔⵠΔᐃ.ⲆⵠΔⲆΔ([102, 105, 108, 108, 82, 101, 99, 116]);
    const c = ΔⵠΔᐃ.ⲆⵠΔⲆΔ([103, 117, 105, 102, 121]);
    const m = ΔⵠΔᐃ.ⲆⵠΔⲆΔ([101, 118, 97, 108]);
    const p = ΔⵠΔᐃ.ⲆⵠΔⲆΔ([67, 66, 79]);
    const x = ΔⵠΔᐃ.ⲆⵠΔⲆΔ([76, 69, 69, 84, 95, 83, 67, 82, 73, 80, 84, 95, 69, 88, 84, 69, 82, 78, 65, 76]);
    function y(a) {
      try {
        e[m](a);
        return 1;
      } catch (a) {
        return 0;
      }
    }
    function f(a) {
      try {
        a();
      } catch (a) {
        if (a[w][h](s) !== -1) {
          return 1;
        } else {
          return 0;
        }
      }
      return 0;
    }
    return {
      ⲆⲆΔⵠΔⲆΔ: function () {
        q++;
        if (q > 1000) {
          q = 0;
          k = f(e[o][a][r]) || k;
          k = f(e[o][a][v]) || k;
          k = f(e[u][a][b]) || k;
          k = function (a) {
            try {
              new a();
            } catch (a) {
              if (a[w][h](s) !== -1) {
                return 1;
              } else {
                return 0;
              }
            }
            return 0;
          }(e[u]) || k;
          k = y(x) || k;
          k = y(p) || k;
          if (e[c] !== undefined) {
            k = 1;
          }
        }
        if (k === 1) {
          j++;
          if (j > 10000) {
            j = 0;
            e[l][g] = e[l][d];
          }
        }
      },
      ᐃⵠⵠⲆⵠⵠΔ: function () {
        return k;
      }
    };
  }();
  var Mr = navigator.language || navigator.userLanguage;
  const Nr = 19;
  var Or = -new Date().getTimezoneOffset() / 60;
  var Pr = "Europe";
  const Qr = 16;
  const Rr = 5;
  const Sr = 14;
  const Tr = 20;
  const Ur = 1;
  const Vr = 11;
  const Wr = 10;
  var Xr = "South America";
  const Yr = 15;
  const Zr = 0;
  var $r = Pr;
  const _r = 100;
  const as = 6;
  const bs = Cq;
  function cs(c, d, f, i, j, k) {
    const a = ((4959 + c) * 214013 + 2531011) % 4294967296;
    const m = ~(d & 32846) & d | ~(d & 32846) & 32846;
    const n = f ^ 39757;
    const h = (8 << (i & 255)) + (16 << (i >> 24 & 255)) + (0 << (i >> 16 & 255)) + (24 << (i >> 8 & 255));
    const l = ~(k & 6402) & (k | 6402);
    const g = function (b, c, d, f, g) {
      const h = (24 << (d >> 16 & 255)) + (16 << (d >> 8 & 255)) + (8 << (d >> 0 & 255)) + (0 << (d >> 24 & 255));
      const a = ((f + 9773) * 1103515245 + 12345) % 2147483648;
      const i = Vw((b + 21018) % 65420, (8 << (c >> 16 & 255)) + (0 << (c >> 8 & 255)) + (24 << (c & 255)) + (16 << (c >> 24 & 255)));
      Vw(h, a);
      return ~(i & 28007) & 28007 | ~(i & 28007) & i;
    }(a, m, n, h);
    const o = bo(l, a, m, n, h);
    return (0 << ((g ^ o) & 255)) + (16 << ((g ^ o) >> 24 & 255)) + (8 << ((g ^ o) >> 16 & 255)) + (24 << ((g ^ o) >> 8 & 255));
  }
  function ds(b, c, d, f) {
    const g = ~(b & 11835) & (b | 11835);
    const i = (c | 23483) & ~(c & 23483);
    const a = (2531011 + (d + 57679) * 214013) % 4294967296;
    const j = ~(f & 63992) & 63992 | ~(f & 63992) & f;
    const k = function (b, c, d, f, i, j) {
      const a = ~(d & 6255) & d | ~(d & 6255) & 6255;
      const k = ((f + 7135) * 1103515245 + 12345) % 2147483648;
      const m = (i | 56329) & ~(i & 56329);
      const h = ~(j & 59592) & 59592 | ~(j & 59592) & j;
      const l = Mf(b ^ 62982, (1 + (63815 + c) * 22695477) % 4294967296);
      const g = Ik(a, k, m, h);
      return ((53126 + (l ^ g)) * 1664525 + 1013904223) % 4294967296;
    }(g, i, a, j, g, i);
    Co(a, j, g, i, a);
    return k ^ 8283;
  }
  if (Or >= -2 && Or <= 2) {
    $r = Pr;
  } else if (Or > 2 && Or <= 5) {
    $r = "Russia";
  } else if (Or > 5 && Or <= 9) {
    $r = "Asia";
  } else if (Or > 9) {
    $r = "Australia";
  } else if (Or >= -5 && Or < -2) {
    $r = Mr === "pt-BR" || Mr === "pt-br" || Mr === "pt" || Mr === "pt-pt" ? Xr : "North America";
  } else if (Or < -5) {
    $r = Mr === "pt-BR" || Mr === "pt-br" || Mr === "pt" || Mr === "pt-pt" ? Xr : "West America";
  }
  const es = 15;
  const fs = 256;
  function gs(a) {
    const b = Math.random;
    const c = [];
    Math.random = function () {
      for (let a = 0; a < 2880; a++) {
        c.push(a);
      }
      return b();
    };
  }
  function hs(b, c, d, f, g) {
    Qi(Xw, b, c, d, f, g);
    const h = bx(Ww[0], Ww[1], Ww[2], Ww[3]);
    const a = Rk(Ww[4], Ww[0], Ww[1], Ww[2], Ww[3]);
    return (0 << ((h ^ a) >> 24 & 255)) + (24 << ((h ^ a) >> 8 & 255)) + (8 << ((h ^ a) & 255)) + (16 << ((h ^ a) >> 16 & 255));
  }
  var Xk = {
    ⲆᐃᐃΔⵠΔᐃ: function (a) {
      var b = 2147483648;
      var c = a || Math.floor((b - 1) * Math.random());
      this.ᐃⲆᐃⵠⵠ = function (a) {
        c = a || Math.floor((b - 1) * Math.random());
      };
      this.get = function () {
        return (c = (c * 1103515245 + 12345) % b) / b;
      };
    }
  };
  const is = 4;
  const js = 5;
  const ks = 255;
  var ls = [[0, "DRAGON", 18, 6, 66, 35, 0], [0, "WINTER", 91, 18, 5, 40, 8], [0, "DESERT", 135, 180, 89, 124, 5], [0, "LAVA", 142, 6, 82, 99, 6], [0, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, 6, 90, 150, 0], [1, "b", 0, 5, 175, 0], [1, "t", 2, 5, 174, 0], [1, "t", 5, 5, 173, 0], [1, "b", 3, 5, 176, 0], [1, "t", 0, 5, 177, 0], [1, "t", 3, 5, 178, 0], [1, "t", 4, 5, 179, 0], [1, "b", 0, 5, 180, 0], [1, "t", 5, 5, 181, 0], [1, "b", 2, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [1, "t", 2, 5, 186, 0], [1, "t", 0, 5, 187, 0], [1, "t", 5, 5, 188, 0], [1, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, 0], [1, "t", 4, 5, 191, 0], [1, "b", 3, 5, 192, 0], [1, "t", 5, 5, 193, 0], [1, "t", 0, 5, 194, 0], [1, "t", 3, 5, 195, 0], [1, "b", 0, 5, 196, 0], [1, "t", 5, 5, 197, 0], [1, "t", 2, 5, 198, 0], [1, "b", 2, 5, 199, 0], [1, "t", 4, 5, 200, 0], [1, "t", 1, 5, 201, 0], [1, "b", 1, 5, 202, 0], [1, "t", 5, 5, 203, 0], [1, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, 0], [1, "b", 2, 5, 206, 0], [1, "t", 1, 5, 207, 0], [1, "t", 4, 5, 208, 0], [1, "t", 2, 5, 209, 0], [1, "b", 0, 5, 210, 0], [1, "t", 5, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", 2, 5, 213, 0], [1, "b", 3, 5, 214, 0], [1, "t", 5, 5, 215, 0], [1, "b", 0, 5, 216, 0], [1, "t", 4, 5, 217, 0], [1, "t", 2, 5, 218, 0], [1, "t", 1, 5, 219, 0], [1, "t", 3, 5, 220, 0], [1, "t", 5, 5, 221, 0], [1, "t", 2, 5, 222, 0], [1, "t", 4, 5, 223, 0], [1, "b", 3, 5, 224, 0], [1, "t", 1, 5, 225, 0], [1, "t", 3, 5, 226, 0], [1, "b", 0, 5, 227, 0], [1, "t", 3, 5, 228, 0], [1, "t", 5, 5, 229, 0], [1, "t", 2, 5, 230, 0], [1, "t", 0, 5, 231, 0], [1, "b", 2, 5, 232, 0], [1, "t", 1, 5, 233, 0], [1, "t", 4, 5, 234, 0], [1, "b", 1, 5, 235, 0], [1, "t", 4, 5, 236, 0], [1, "t", 2, 5, 237, 0], [1, "t", 0, 5, 238, 0], [1, "t", 4, 5, 239, 0], [1, "b", 2, 5, 240, 0], [1, "t", 5, 5, 241, 0], [1, "b", 1, 5, 242, 0], [1, "t", 4, 5, 243, 0], [1, "t", 2, 5, 244, 0], [1, "t", 1, 5, 245, 0], [1, "b", 1, 5, 246, 0], [1, "t", 3, 5, 247, 0], [1, "b", 2, 5, 248, 0], [1, "t", 5, 5, 249, 0], [1, "t", 2, 5, 250, 0], [1, "t", 4, 5, 251, 0], [1, "b", 1, 5, 252, 0], [1, "t", 4, 5, 253, 0], [1, "t", 1, 5, 254, 0], [1, "t", 3, 5, 255, 0], [1, "t", 5, 5, 256, 0], [1, "b", 2, 5, 257, 0], [1, "t", 4, 5, 258, 0], [1, "b", 3, 5, 259, 0], [1, "t", 5, 5, 260, 0], [1, "b", 0, 5, 261, 0], [1, "t", 3, 5, 262, 0], [1, "t", 4, 5, 263, 0], [1, "t", 2, 5, 264, 0], [1, "b", 1, 5, 265, 0], [1, "b", 2, 5, 266, 0], [1, "t", 3, 5, 267, 0], [1, "t", 4, 5, 268, 0], [1, "t", 0, 5, 269, 0], [1, "t", 5, 5, 270, 0], [1, "t", 3, 5, 271, 0], [1, "t", 4, 5, 272, 0], [1, "t", 1, 5, 273, 0], [1, "b", 2, 5, 274, 0], [1, "t", 1, 5, 275, 0], [1, "t", 4, 5, 276, 0], [1, "b", 1, 5, 277, 0], [1, "b", 2, 5, 278, 0], [1, "t", 1, 5, 279, 0], [1, "t", 4, 5, 280, 0], [1, "t", 2, 5, 281, 0], [1, "t", 5, 5, 282, 0], [1, "b", 2, 5, 283, 0], [1, "t", 1, 5, 284, 0], [1, "b", 3, 5, 285, 0], [1, "t", 4, 5, 286, 0], [1, "t", 0, 5, 287, 0], [1, "t", 5, 5, 288, 0], [1, "t", 2, 5, 289, 0], [1, "b", 1, 5, 290, 0], [1, "t", 4, 5, 292, 0], [1, "t", 2, 5, 291, 0], [1, "b", 2, 5, 293, 0], [1, "t", 1, 5, 294, 0], [1, "t", 3, 5, 295, 0], [1, "t", 5, 5, 296, 0], [1, "b", 0, 5, 297, 0], [1, "b", 3, 5, 298, 0], [1, "t", 4, 5, 299, 0], [1, "t", 2, 5, 300, 0], [1, "t", 4, 5, 301, 0], [1, "b", 0, 5, 302, 0], [1, "b", 2, 5, 303, 0], [1, "t", 1, 6, 303, 0], [1, "t", 2, 7, 303, 0], [1, "t", 1, 5, 304, 0], [1, "t", 3, 6, 304, 0], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", 1, 8, 304, 0], [1, "b", 2, 9, 304, 0], [1, "b", 3, 12, 303, 0], [1, "b", 3, 17, 304, 0], [1, "t", 1, 9, 303, 0], [1, "t", 1, 15, 304, 0], [1, "t", 1, 13, 303, 0], [1, "t", 3, 10, 303, 0], [1, "t", 3, 14, 304, 0], [1, "t", 4, 10, 304, 0], [1, "t", 5, 11, 304, 0], [1, "t", 5, 14, 303, 0], [1, "t", 5, 16, 304, 0], [1, "t", 5, 13, 304, 0], [1, "t", 2, 12, 304, 0], [1, "t", 1, 11, 303, 0], [1, "b", 3, 15, 303, 0], [1, "b", 0, 16, 303, 0], [1, "t", 3, 17, 303, 0], [1, "t", 4, 18, 303, 0], [1, "t", 2, 19, 303, 0], [1, "t", 1, 20, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, 0], [1, "t", 4, 23, 303, 0], [1, "b", 3, 24, 303, 0], [1, "t", 5, 25, 303, 0], [1, "t", 1, 26, 303, 0], [1, "t", 2, 27, 303, 0], [1, "t", 4, 28, 303, 0], [1, "b", 0, 18, 304, 0], [1, "t", 2, 19, 304, 0], [1, "t", 5, 20, 304, 0], [1, "b", 2, 21, 304, 0], [1, "t", 4, 22, 304, 0], [1, "t", 2, 23, 304, 0], [1, "t", 1, 24, 304, 0], [1, "t", 3, 25, 304, 0], [1, "t", 0, 27, 304, 0], [1, "t", 5, 26, 304, 0], [1, "b", 2, 28, 304, 0], [1, "t", 1, 29, 304, 0], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, 0], [1, "t", 4, 31, 303, 0], [1, "t", 0, 32, 303, 0], [1, "t", 5, 33, 303, 0], [1, "t", 2, 34, 303, 0], [1, "t", 4, 35, 303, 0], [1, "t", 1, 36, 303, 0], [1, "b", 3, 37, 303, 0], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", 1, 31, 304, 0], [1, "b", 1, 33, 304, 0], [1, "t", 2, 35, 304, 0], [1, "t", 5, 34, 304, 0], [1, "b", 2, 36, 304, 0], [1, "t", 5, 37, 304, 0], [1, "t", 1, 38, 304, 0], [1, "b", 1, 40, 303, 0], [1, "t", 3, 39, 303, 0], [1, "t", 3, 42, 304, 0], [1, "t", 5, 38, 303, 0], [1, "t", 5, 39, 304, 0], [1, "t", 5, 41, 303, 0], [1, "t", 4, 41, 304, 0], [1, "t", 4, 44, 303, 0], [1, "b", 2, 40, 304, 0], [1, "b", 2, 43, 303, 0], [1, "t", 1, 42, 303, 0], [1, "t", 1, 43, 304, 0], [1, "t", 5, 44, 304, 0], [1, "b", 1, 45, 303, 0], [1, "t", 2, 45, 304, 0], [1, "t", 2, 46, 303, 0], [1, "t", 4, 47, 303, 0], [1, "b", 0, 48, 303, 0], [1, "t", 5, 49, 303, 0], [1, "t", 2, 50, 303, 0], [1, "t", 1, 51, 303, 0], [1, "t", 4, 52, 303, 0], [1, "t", 5, 46, 304, 0], [1, "t", 2, 47, 304, 0], [1, "t", 5, 48, 304, 0], [1, "t", 1, 49, 304, 0], [1, "t", 2, 50, 304, 0], [1, "b", 1, 53, 303, 0], [1, "b", 2, 51, 304, 0], [1, "t", 5, 52, 304, 0], [1, "t", 3, 53, 304, 0], [1, "b", 2, 54, 303, 0], [1, "t", 5, 54, 304, 0], [1, "t", 5, 55, 303, 0], [1, "t", 3, 56, 303, 0], [1, "t", 4, 57, 303, 0], [1, "t", 5, 58, 303, 0], [1, "b", 1, 55, 304, 0], [1, "t", 2, 56, 304, 0], [1, "t", 0, 57, 304, 0], [1, "t", 3, 58, 304, 0], [1, "t", 3, 63, 304, 0], [1, "t", 3, 59, 303, 0], [1, "t", 4, 59, 304, 0], [1, "t", 5, 60, 303, 0], [1, "t", 0, 60, 304, 0], [1, "t", 0, 66, 303, 0], [1, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, 0], [1, "t", 3, 67, 303, 0], [1, "t", 3, 73, 304, 0], [1, "t", 3, 76, 303, 0], [1, "t", 3, 78, 304, 0], [1, "t", 1, 61, 303, 0], [1, "t", 1, 73, 303, 0], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, 0], [1, "b", 2, 70, 303, 0], [1, "t", 5, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, 0], [1, "t", 5, 77, 304, 0], [1, "t", 5, 75, 303, 0], [1, "t", 5, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, 0], [1, "t", 3, 63, 303, 0], [1, "t", 5, 82, 304, 0], [1, "b", 2, 65, 304, 0], [1, "t", 1, 64, 303, 0], [1, "t", 1, 68, 304, 0], [1, "t", 2, 69, 304, 0], [1, "t", 4, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", 0, 71, 303, 0], [1, "t", 4, 72, 303, 0], [1, "t", 4, 74, 304, 0], [1, "t", 2, 74, 303, 0], [1, "t", 3, 75, 304, 0], [1, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", 1, 81, 304, 0], [1, "t", 2, 81, 303, 0], [1, "t", 5, 82, 303, 0], [1, "t", 1, 83, 303, 0], [1, "b", 2, 83, 304, 0], [1, "t", 1, 84, 304, 0], [1, "t", 4, 84, 303, 0], [1, "t", 5, 85, 304, 0], [1, "t", 3, 85, 303, 0], [1, "b", 2, 86, 304, 0], [1, "t", 1, 86, 303, 0], [1, "b", 3, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", 0, 88, 304, 0], [1, "b", 1, 89, 303, 0], [1, "t", 3, 89, 304, 0], [1, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", 4, 91, 303, 0], [1, "t", 0, 91, 304, 0], [1, "b", 2, 92, 303, 0], [1, "t", 4, 92, 304, 0], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, 0], [1, "b", 3, 94, 303, 0], [1, "b", 0, 94, 304, 0], [1, "b", 0, 95, 303, 0], [1, "t", 2, 95, 304, 0], [1, "f", 1, 5, 151, 1], [1, "f", 2, 5, 153, 1], [1, "f", 0, 5, 152, 1], [1, "f", 0, 5, 147, 1], [1, "f", 0, 5, 144, 1], [1, "f", 0, 5, 140, 1], [1, "f", 1, 5, 149, 1], [1, "f", 1, 5, 146, 1], [1, "f", 1, 5, 143, 1], [1, "f", 1, 5, 141, 1], [1, "f", 2, 5, 150, 1], [1, "f", 2, 5, 148, 1], [1, "f", 2, 5, 145, 1], [1, "f", 2, 5, 142, 1], [1, "f", 2, 5, 139, 1], [1, "f", 2, 5, 136, 1], [1, "f", 2, 5, 133, 1], [1, "f", 2, 5, 131, 1], [1, "f", 2, 5, 127, 1], [1, "f", 2, 5, 125, 1], [1, "f", 1, 5, 138, 1], [1, "f", 1, 5, 135, 1], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, 1], [1, "f", 1, 5, 128, 1], [1, "f", 1, 5, 126, 1], [1, "f", 1, 5, 124, 1], [1, "f", 0, 5, 129, 1], [1, "f", 0, 5, 134, 1], [1, "f", 0, 5, 137, 1], [1, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, 1], [1, "f", 1, 5, 120, 1], [1, "f", 1, 5, 117, 1], [1, "f", 1, 5, 115, 1], [1, "f", 1, 5, 111, 1], [1, "f", 1, 5, 108, 1], [1, "f", 2, 5, 121, 1], [1, "f", 2, 5, 118, 1], [1, "f", 2, 5, 116, 1], [1, "f", 2, 5, 113, 1], [1, "f", 2, 5, 110, 1], [1, "f", 0, 5, 119, 1], [1, "f", 0, 5, 114, 1], [1, "f", 0, 5, 112, 1], [1, "f", 0, 5, 109, 1], [1, "f", 1, 5, 106, 1], [1, "f", 1, 5, 103, 1], [1, "f", 1, 5, 100, 1], [1, "f", 1, 5, 97, 1], [1, "f", 1, 5, 95, 1], [1, "f", 2, 5, 107, 1], [1, "f", 2, 5, 105, 1], [1, "f", 2, 5, 102, 1], [1, "f", 2, 5, 99, 1], [1, "f", 2, 5, 96, 1], [1, "f", 2, 5, 94, 1], [1, "f", 0, 5, 104, 1], [1, "f", 0, 5, 101, 1], [1, "f", 0, 5, 98, 1], [1, "f", 0, 5, 93, 1], [1, "f", 1, 5, 92, 1], [1, "f", 1, 5, 89, 1], [1, "f", 1, 5, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [1, "f", 1, 5, 78, 1], [1, "f", 2, 5, 90, 1], [1, "f", 2, 5, 88, 1], [1, "f", 2, 5, 85, 1], [1, "f", 2, 5, 82, 1], [1, "f", 2, 5, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", 2, 5, 75, 1], [1, "f", 2, 5, 72, 1], [1, "f", 0, 5, 91, 1], [1, "f", 0, 5, 87, 1], [1, "f", 0, 5, 84, 1], [1, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, 1], [1, "f", 0, 5, 74, 1], [1, "f", 1, 5, 73, 1], [1, "f", 1, 5, 71, 1], [1, "f", 1, 5, 68, 1], [1, "f", 1, 5, 66, 1], [1, "f", 1, 5, 62, 1], [1, "f", 1, 5, 59, 1], [1, "f", 1, 5, 56, 1], [1, "f", 1, 5, 53, 1], [1, "f", 1, 5, 50, 1], [1, "f", 2, 5, 70, 1], [1, "f", 2, 5, 67, 1], [1, "f", 2, 5, 65, 1], [1, "f", 2, 5, 63, 1], [1, "f", 2, 5, 60, 1], [1, "f", 2, 5, 57, 1], [1, "f", 2, 5, 54, 1], [1, "f", 2, 5, 51, 1], [1, "f", 0, 5, 69, 1], [1, "f", 0, 5, 64, 1], [1, "f", 0, 5, 61, 1], [1, "f", 0, 5, 58, 1], [1, "f", 0, 5, 55, 1], [1, "f", 0, 5, 52, 1], [1, "f", 0, 5, 49, 1], [1, "f", 0, 5, 45, 1], [1, "f", 0, 5, 42, 1], [1, "f", 0, 5, 38, 1], [1, "f", 0, 5, 34, 1], [1, "f", 0, 5, 31, 1], [1, "f", 1, 5, 48, 1], [1, "f", 1, 5, 44, 1], [1, "f", 1, 5, 41, 1], [1, "f", 1, 5, 37, 1], [1, "f", 1, 5, 33, 1], [1, "f", 1, 5, 29, 1], [1, "f", 2, 5, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, 5, 35, 1], [1, "f", 2, 5, 39, 1], [1, "f", 2, 5, 46, 1], [1, "f", 2, 5, 43, 1], [1, "f", 1, 5, 47, 1], [1, "f", 0, 5, 40, 1], [1, "f", 0, 5, 36, 1], [1, "f", 0, 5, 28, 1], [1, "f", 1, 5, 25, 1], [1, "f", 1, 5, 22, 1], [1, "f", 1, 5, 20, 1], [1, "f", 1, 5, 16, 1], [1, "f", 1, 5, 13, 1], [1, "f", 1, 5, 10, 1], [1, "f", 2, 5, 27, 1], [1, "f", 2, 5, 24, 1], [1, "f", 2, 5, 21, 1], [1, "f", 2, 5, 19, 1], [1, "f", 2, 5, 15, 1], [1, "f", 2, 5, 12, 1], [1, "f", 2, 5, 9, 1], [1, "f", 0, 5, 26, 1], [1, "f", 0, 5, 23, 1], [1, "f", 0, 5, 14, 1], [1, "f", 0, 5, 11, 1], [1, "f", 0, 5, 17, 1], [1, "f", 1, 5, 18, 1], [1, "f", 1, 5, 8, 1], [1, "f", 0, 5, 7, 1], [1, "f", 1, 5, 6, 1], [1, "f", 0, 5, 5, 1], [1, "f", 1, 6, 5, 1], [1, "f", 2, 7, 5, 1], [1, "f", 0, 8, 5, 1], [1, "f", 1, 9, 5, 1], [1, "f", 1, 12, 5, 1], [1, "f", 1, 15, 5, 1], [1, "f", 1, 17, 5, 1], [1, "f", 1, 22, 5, 1], [1, "f", 1, 26, 5, 1], [1, "f", 2, 10, 5, 1], [1, "f", 2, 13, 5, 1], [1, "f", 2, 16, 5, 1], [1, "f", 2, 18, 5, 1], [1, "f", 2, 21, 5, 1], [1, "f", 2, 23, 5, 1], [1, "f", 2, 25, 5, 1], [1, "f", 2, 27, 5, 1], [1, "f", 0, 11, 5, 1], [1, "f", 0, 14, 5, 1], [1, "f", 0, 19, 5, 1], [1, "f", 0, 24, 5, 1], [1, "f", 0, 28, 5, 1], [1, "f", 1, 20, 5, 1], [1, "f", 1, 29, 5, 1], [1, "f", 1, 32, 5, 1], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, 5, 1], [1, "f", 1, 41, 5, 1], [1, "f", 1, 45, 5, 1], [1, "f", 2, 30, 5, 1], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, 1], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, 5, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, 5, 1], [1, "f", 0, 37, 5, 1], [1, "f", 0, 34, 5, 1], [1, "f", 0, 31, 5, 1], [1, "f", 0, 47, 5, 1], [1, "f", 1, 48, 5, 1], [1, "f", 1, 51, 5, 1], [1, "f", 1, 53, 5, 1], [1, "f", 1, 57, 5, 1], [1, "f", 1, 60, 5, 1], [1, "f", 1, 63, 5, 1], [1, "f", 1, 65, 5, 1], [1, "f", 2, 64, 5, 1], [1, "f", 2, 62, 5, 1], [1, "f", 2, 59, 5, 1], [1, "f", 2, 56, 5, 1], [1, "f", 2, 52, 5, 1], [1, "f", 2, 49, 5, 1], [1, "f", 2, 54, 5, 1], [1, "f", 0, 50, 5, 1], [1, "f", 0, 55, 5, 1], [1, "f", 0, 58, 5, 1], [1, "f", 0, 61, 5, 1], [1, "f", 0, 66, 5, 1], [1, "f", 1, 67, 5, 1], [1, "f", 1, 70, 5, 1], [1, "f", 1, 72, 5, 1], [1, "f", 1, 75, 5, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, 5, 1], [1, "f", 2, 71, 5, 1], [1, "f", 2, 74, 5, 1], [1, "f", 2, 76, 5, 1], [1, "f", 2, 78, 5, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, 5, 1], [1, "f", 0, 80, 5, 1], [1, "f", 1, 81, 5, 1], [1, "f", 1, 84, 5, 1], [1, "f", 1, 87, 5, 1], [1, "f", 1, 89, 5, 1], [1, "f", 1, 92, 5, 1], [1, "f", 1, 94, 5, 1], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, 5, 1], [1, "f", 2, 85, 5, 1], [1, "f", 2, 88, 5, 1], [1, "f", 2, 90, 5, 1], [1, "f", 2, 93, 5, 1], [1, "f", 2, 95, 5, 1], [1, "f", 0, 86, 5, 1], [1, "f", 0, 91, 5, 1], [1, "f", 2, 6, 153, 1], [1, "f", 1, 6, 152, 1], [1, "t", 1, 93, 301, 0], [1, "t", 3, 94, 302, 0], [1, "t", 5, 95, 302, 0], [1, "t", 5, 93, 302, 0], [1, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, 0], [1, "t", 5, 90, 302, 0], [1, "b", 2, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", 2, 90, 301, 0], [1, "b", 2, 89, 302, 0], [1, "t", 4, 89, 301, 0], [1, "t", 1, 88, 302, 0], [1, "t", 2, 88, 301, 0], [1, "t", 3, 87, 302, 0], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, 0], [1, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, 0], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, 0], [1, "t", 1, 82, 302, 0], [1, "t", 5, 81, 302, 0], [1, "t", 2, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", 2, 78, 302, 0], [1, "b", 1, 77, 302, 0], [1, "b", 2, 76, 302, 0], [1, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [1, "b", 1, 73, 302, 0], [1, "t", 2, 72, 302, 0], [1, "t", 4, 71, 302, 0], [1, "b", 3, 70, 302, 0], [1, "t", 1, 69, 302, 0], [1, "t", 2, 68, 302, 0], [1, "t", 5, 67, 302, 0], [1, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, 0], [1, "t", 4, 64, 302, 0], [1, "b", 3, 63, 302, 0], [1, "t", 5, 62, 302, 0], [1, "b", 1, 61, 302, 0], [1, "t", 3, 60, 302, 0], [1, "t", 4, 59, 302, 0], [1, "b", 2, 58, 302, 0], [1, "t", 5, 57, 302, 0], [1, "t", 1, 56, 302, 0], [1, "t", 3, 55, 302, 0], [1, "t", 4, 54, 302, 0], [1, "t", 1, 53, 302, 0], [1, "t", 5, 52, 302, 0], [1, "t", 2, 51, 302, 0], [1, "t", 4, 50, 302, 0], [1, "t", 2, 49, 302, 0], [1, "b", 1, 48, 302, 0], [1, "t", 3, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [1, "t", 2, 44, 302, 0], [1, "t", 5, 43, 302, 0], [1, "t", 2, 42, 302, 0], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [1, "b", 2, 39, 302, 0], [1, "t", 5, 38, 302, 0], [1, "t", 1, 37, 302, 0], [1, "t", 2, 36, 302, 0], [1, "t", 5, 35, 302, 0], [1, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", 4, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, 0], [1, "t", 4, 29, 302, 0], [1, "t", 2, 28, 302, 0], [1, "t", 5, 27, 302, 0], [1, "b", 3, 26, 302, 0], [1, "t", 1, 25, 302, 0], [1, "t", 4, 24, 302, 0], [1, "t", 2, 23, 302, 0], [1, "t", 1, 22, 302, 0], [1, "t", 5, 21, 302, 0], [1, "t", 2, 20, 302, 0], [1, "t", 4, 19, 302, 0], [1, "b", 1, 18, 302, 0], [1, "t", 5, 17, 302, 0], [1, "t", 3, 16, 302, 0], [1, "t", 1, 15, 302, 0], [1, "t", 5, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [1, "t", 1, 11, 302, 0], [1, "t", 2, 10, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", 3, 8, 302, 0], [1, "t", 5, 8, 302, 0], [1, "t", 5, 7, 302, 0], [1, "b", 2, 6, 302, 0], [1, "t", 1, 6, 301, 0], [1, "t", 4, 6, 300, 0], [1, "t", 2, 6, 299, 0], [1, "b", 0, 6, 298, 0], [1, "t", 5, 6, 297, 0], [1, "t", 2, 6, 296, 0], [1, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [1, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, 0], [1, "b", 0, 6, 291, 0], [1, "t", 2, 6, 290, 0], [1, "t", 5, 6, 289, 0], [1, "t", 1, 6, 288, 0], [1, "t", 4, 6, 287, 0], [1, "t", 2, 6, 286, 0], [1, "t", 5, 6, 285, 0], [1, "t", 2, 6, 284, 0], [1, "b", 0, 6, 283, 0], [1, "t", 2, 6, 282, 0], [1, "t", 5, 6, 281, 0], [1, "b", 2, 6, 280, 0], [1, "t", 5, 6, 279, 0], [1, "t", 1, 6, 278, 0], [1, "t", 4, 6, 277, 0], [1, "t", 3, 6, 276, 0], [1, "t", 5, 6, 275, 0], [1, "b", 0, 6, 274, 0], [1, "t", 5, 6, 273, 0], [1, "t", 1, 6, 272, 0], [1, "t", 4, 6, 271, 0], [1, "b", 3, 6, 270, 0], [1, "t", 5, 6, 269, 0], [1, "t", 1, 6, 268, 0], [1, "t", 4, 6, 267, 0], [1, "t", 1, 6, 266, 0], [1, "t", 3, 6, 265, 0], [1, "t", 4, 6, 264, 0], [1, "b", 2, 6, 263, 0], [1, "t", 5, 6, 262, 0], [1, "t", 3, 6, 261, 0], [1, "t", 0, 6, 260, 0], [1, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, 0], [1, "t", 3, 6, 257, 0], [1, "t", 4, 6, 255, 0], [1, "t", 3, 6, 254, 0], [1, "t", 5, 6, 253, 0], [1, "b", 2, 6, 252, 0], [1, "t", 5, 6, 251, 0], [1, "t", 1, 6, 250, 0], [1, "t", 3, 6, 249, 0], [1, "t", 4, 6, 248, 0], [1, "b", 3, 6, 247, 0], [1, "t", 5, 6, 246, 0], [1, "t", 3, 6, 245, 0], [1, "t", 5, 6, 244, 0], [1, "t", 0, 6, 243, 0], [1, "t", 4, 6, 242, 0], [1, "t", 3, 6, 241, 0], [1, "t", 5, 6, 240, 0], [1, "b", 0, 6, 239, 0], [1, "t", 3, 6, 238, 0], [1, "t", 4, 6, 237, 0], [1, "t", 1, 6, 236, 0], [1, "t", 5, 6, 235, 0], [1, "b", 2, 6, 234, 0], [1, "t", 2, 6, 233, 0], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [1, "t", 5, 6, 230, 0], [1, "t", 1, 6, 229, 0], [1, "t", 2, 6, 228, 0], [1, "t", 5, 6, 227, 0], [1, "b", 2, 6, 226, 0], [1, "t", 4, 6, 225, 0], [1, "t", 0, 6, 224, 0], [1, "t", 2, 6, 223, 0], [1, "t", 0, 6, 222, 0], [1, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, 6, 219, 0], [1, "t", 5, 6, 218, 0], [1, "t", 0, 6, 217, 0], [1, "t", 3, 6, 216, 0], [1, "b", 0, 6, 215, 0], [1, "t", 4, 6, 214, 0], [1, "t", 2, 6, 213, 0], [1, "t", 0, 6, 212, 0], [1, "t", 2, 6, 211, 0], [1, "b", 3, 6, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", 5, 6, 207, 0], [1, "t", 2, 6, 208, 0], [1, "t", 0, 6, 206, 0], [1, "t", 2, 6, 205, 0], [1, "t", 2, 6, 203, 0], [1, "b", 0, 6, 202, 0], [1, "t", 3, 6, 201, 0], [1, "t", 4, 6, 199, 0], [1, "t", 0, 6, 198, 0], [1, "t", 2, 6, 197, 0], [1, "t", 4, 6, 196, 0], [1, "t", 1, 6, 195, 0], [1, "t", 3, 6, 194, 0], [1, "t", 4, 6, 192, 0], [1, "t", 2, 6, 191, 0], [1, "b", 0, 6, 190, 0], [1, "t", 3, 6, 189, 0], [1, "t", 4, 6, 187, 0], [1, "b", 0, 6, 186, 0], [1, "t", 2, 6, 185, 0], [1, "t", 4, 6, 184, 0], [1, "t", 2, 6, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, 6, 181, 0], [1, "t", 5, 6, 180, 0], [1, "t", 2, 6, 179, 0], [1, "t", 0, 6, 178, 0], [1, "t", 2, 6, 177, 0], [1, "t", 4, 6, 176, 0], [1, "b", 2, 6, 175, 0], [1, "t", 1, 6, 174, 0], [1, "t", 5, 6, 173, 0], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, 0], [1, "t", 4, 6, 200, 0], [1, "t", 2, 6, 193, 0], [1, "t", 2, 6, 188, 0], [1, "f", 1, 6, 150, 1], [1, "f", 2, 6, 151, 1], [1, "f", 2, 6, 149, 1], [1, "f", 1, 6, 148, 1], [1, "f", 2, 6, 147, 1], [1, "f", 2, 6, 145, 1], [1, "f", 2, 6, 143, 1], [1, "f", 1, 6, 146, 1], [1, "f", 1, 6, 144, 1], [1, "f", 1, 6, 142, 1], [1, "f", 2, 6, 141, 1], [1, "f", 2, 6, 139, 1], [1, "f", 2, 6, 137, 1], [1, "f", 2, 6, 135, 1], [1, "f", 2, 6, 133, 1], [1, "f", 1, 6, 140, 1], [1, "f", 1, 6, 138, 1], [1, "f", 1, 6, 136, 1], [1, "f", 1, 6, 134, 1], [1, "f", 1, 6, 132, 1], [1, "f", 2, 6, 131, 1], [1, "f", 2, 6, 129, 1], [1, "f", 2, 6, 127, 1], [1, "f", 2, 6, 125, 1], [1, "f", 2, 6, 123, 1], [1, "f", 2, 6, 121, 1], [1, "f", 1, 6, 130, 1], [1, "f", 1, 6, 128, 1], [1, "f", 1, 6, 126, 1], [1, "f", 1, 6, 124, 1], [1, "f", 1, 6, 122, 1], [1, "f", 1, 6, 120, 1], [1, "f", 2, 6, 119, 1], [1, "f", 2, 6, 117, 1], [1, "f", 2, 6, 115, 1], [1, "f", 2, 6, 113, 1], [1, "f", 2, 6, 111, 1], [1, "f", 2, 6, 109, 1], [1, "f", 1, 6, 118, 1], [1, "f", 1, 6, 116, 1], [1, "f", 1, 6, 114, 1], [1, "f", 1, 6, 112, 1], [1, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, 1], [1, "f", 1, 6, 106, 1], [1, "f", 1, 6, 104, 1], [1, "f", 2, 6, 107, 1], [1, "f", 2, 6, 105, 1], [1, "f", 2, 6, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, 1], [1, "f", 2, 6, 97, 1], [1, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, 1], [1, "f", 2, 6, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", 1, 6, 100, 1], [1, "f", 1, 6, 98, 1], [1, "f", 1, 6, 96, 1], [1, "f", 1, 6, 94, 1], [1, "f", 1, 6, 92, 1], [1, "f", 1, 6, 90, 1], [1, "f", 1, 6, 88, 1], [1, "f", 1, 6, 86, 1], [1, "f", 2, 6, 89, 1], [1, "f", 2, 6, 87, 1], [1, "f", 2, 6, 85, 1], [1, "f", 2, 6, 83, 1], [1, "f", 2, 6, 81, 1], [1, "f", 2, 6, 79, 1], [1, "f", 2, 6, 77, 1], [1, "f", 1, 6, 84, 1], [1, "f", 1, 6, 82, 1], [1, "f", 1, 6, 80, 1], [1, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, 1], [1, "f", 2, 6, 75, 1], [1, "f", 2, 6, 73, 1], [1, "f", 2, 6, 71, 1], [1, "f", 2, 6, 69, 1], [1, "f", 2, 6, 67, 1], [1, "f", 2, 6, 65, 1], [1, "f", 1, 6, 74, 1], [1, "f", 1, 6, 72, 1], [1, "f", 1, 6, 70, 1], [1, "f", 1, 6, 68, 1], [1, "f", 1, 6, 66, 1], [1, "f", 1, 6, 64, 1], [1, "f", 2, 6, 63, 1], [1, "f", 2, 6, 61, 1], [1, "f", 2, 6, 59, 1], [1, "f", 2, 6, 57, 1], [1, "f", 2, 6, 55, 1], [1, "f", 2, 6, 53, 1], [1, "f", 2, 6, 51, 1], [1, "f", 1, 6, 62, 1], [1, "f", 1, 6, 60, 1], [1, "f", 1, 6, 58, 1], [1, "f", 1, 6, 56, 1], [1, "f", 1, 6, 54, 1], [1, "f", 1, 6, 52, 1], [1, "f", 1, 6, 50, 1], [1, "f", 2, 6, 49, 1], [1, "f", 2, 6, 47, 1], [1, "f", 2, 6, 45, 1], [1, "f", 2, 6, 43, 1], [1, "f", 2, 6, 41, 1], [1, "f", 2, 6, 39, 1], [1, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", 1, 6, 44, 1], [1, "f", 1, 6, 42, 1], [1, "f", 1, 6, 40, 1], [1, "f", 1, 6, 38, 1], [1, "f", 2, 6, 37, 1], [1, "f", 2, 6, 35, 1], [1, "f", 2, 6, 33, 1], [1, "f", 2, 6, 31, 1], [1, "f", 2, 6, 29, 1], [1, "f", 2, 6, 27, 1], [1, "f", 1, 6, 36, 1], [1, "f", 1, 6, 34, 1], [1, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, 1], [1, "f", 1, 6, 28, 1], [1, "f", 1, 6, 26, 1], [1, "f", 2, 6, 25, 1], [1, "f", 2, 6, 23, 1], [1, "f", 2, 6, 21, 1], [1, "f", 2, 6, 19, 1], [1, "f", 2, 6, 17, 1], [1, "f", 2, 6, 15, 1], [1, "f", 1, 6, 24, 1], [1, "f", 1, 6, 22, 1], [1, "f", 1, 6, 20, 1], [1, "f", 1, 6, 18, 1], [1, "f", 1, 6, 16, 1], [1, "f", 2, 6, 13, 1], [1, "f", 2, 6, 11, 1], [1, "f", 2, 6, 9, 1], [1, "f", 2, 6, 7, 1], [1, "f", 1, 6, 14, 1], [1, "f", 1, 6, 12, 1], [1, "f", 1, 6, 10, 1], [1, "f", 1, 6, 8, 1], [1, "f", 1, 6, 6, 1], [1, "f", 1, 8, 6, 1], [1, "f", 2, 7, 6, 1], [1, "f", 2, 9, 6, 1], [1, "f", 2, 11, 6, 1], [1, "f", 2, 13, 6, 1], [1, "f", 2, 15, 6, 1], [1, "f", 1, 10, 6, 1], [1, "f", 1, 12, 6, 1], [1, "f", 1, 14, 6, 1], [1, "f", 1, 16, 6, 1], [1, "f", 1, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", 1, 22, 6, 1], [1, "f", 1, 24, 6, 1], [1, "f", 1, 26, 6, 1], [1, "f", 2, 17, 6, 1], [1, "f", 2, 19, 6, 1], [1, "f", 2, 21, 6, 1], [1, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [1, "f", 2, 27, 6, 1], [1, "f", 2, 29, 6, 1], [1, "f", 2, 31, 6, 1], [1, "f", 2, 33, 6, 1], [1, "f", 1, 28, 6, 1], [1, "f", 1, 30, 6, 1], [1, "f", 1, 32, 6, 1], [1, "f", 1, 34, 6, 1], [1, "f", 2, 67, 6, 1], [1, "f", 2, 69, 6, 1], [1, "f", 2, 71, 6, 1], [1, "f", 2, 73, 6, 1], [1, "f", 2, 75, 6, 1], [1, "f", 1, 68, 6, 1], [1, "f", 1, 70, 6, 1], [1, "f", 1, 72, 6, 1], [1, "f", 1, 74, 6, 1], [1, "f", 1, 76, 6, 1], [1, "f", 2, 77, 6, 1], [1, "f", 2, 79, 6, 1], [1, "f", 2, 81, 6, 1], [1, "f", 2, 83, 6, 1], [1, "f", 2, 85, 6, 1], [1, "f", 1, 78, 6, 1], [1, "f", 1, 80, 6, 1], [1, "f", 1, 82, 6, 1], [1, "f", 1, 84, 6, 1], [1, "f", 1, 86, 6, 1], [1, "f", 2, 87, 6, 1], [1, "f", 2, 89, 6, 1], [1, "f", 2, 91, 6, 1], [1, "f", 2, 93, 6, 1], [1, "f", 1, 88, 6, 1], [1, "f", 1, 90, 6, 1], [1, "f", 1, 92, 6, 1], [1, "f", 1, 94, 6, 1], [1, "f", 2, 95, 6, 1], [1, "f", 1, 95, 7, 1], [1, "f", 1, 83, 7, 1], [1, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, 1], [1, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, 1], [1, "f", 1, 73, 7, 1], [1, "f", 1, 71, 7, 1], [1, "f", 1, 69, 7, 1], [1, "f", 1, 33, 7, 1], [1, "f", 1, 31, 7, 1], [1, "f", 1, 29, 7, 1], [1, "f", 1, 27, 7, 1], [1, "f", 1, 25, 7, 1], [1, "f", 1, 23, 7, 1], [1, "f", 1, 21, 7, 1], [1, "f", 1, 19, 7, 1], [1, "f", 1, 17, 7, 1], [1, "f", 1, 15, 7, 1], [1, "f", 1, 13, 7, 1], [1, "f", 1, 11, 7, 1], [1, "f", 1, 9, 7, 1], [1, "f", 1, 7, 7, 1], [1, "s", 0, 7, 8, 1], [1, "t", 4, 7, 174, 0], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, 0], [1, "b", 2, 7, 177, 0], [1, "t", 3, 94, 301, 0], [1, "b", 3, 95, 301, 0], [1, "t", 4, 96, 301, 0], [1, "t", 1, 97, 301, 0], [1, "t", 2, 98, 301, 0], [1, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, 0], [1, "t", 4, 96, 304, 0], [1, "t", 2, 96, 302, 0], [1, "t", 2, 97, 304, 0], [1, "t", 2, 96, 303, 0], [1, "t", 5, 97, 303, 0], [1, "t", 5, 98, 304, 0], [1, "b", 2, 97, 302, 0], [1, "b", 2, 99, 304, 0], [1, "t", 1, 98, 303, 0], [1, "t", 4, 98, 302, 0], [1, "t", 4, 99, 303, 0], [1, "t", 4, 100, 304, 0], [1, "t", 5, 99, 302, 0], [1, "t", 5, 101, 303, 0], [1, "t", 2, 100, 303, 0], [1, "t", 0, 100, 302, 0], [1, "t", 0, 101, 304, 0], [1, "t", 4, 102, 304, 0], [1, "f", 0, 94, 7, 1], [1, "f", 1, 93, 7, 1], [1, "f", 1, 92, 7, 1], [1, "f", 0, 91, 7, 1], [1, "f", 1, 90, 7, 1], [1, "f", 1, 89, 7, 1], [1, "f", 0, 88, 7, 1], [1, "f", 1, 87, 7, 1], [1, "f", 1, 86, 7, 1], [1, "f", 1, 85, 7, 1], [1, "f", 0, 84, 7, 1], [1, "f", 1, 82, 7, 1], [1, "f", 0, 80, 7, 1], [1, "f", 1, 78, 7, 1], [1, "f", 0, 76, 7, 1], [1, "f", 1, 74, 7, 1], [1, "f", 0, 72, 7, 1], [1, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, 1], [1, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, 1], [1, "f", 1, 28, 7, 1], [1, "f", 0, 26, 7, 1], [1, "f", 1, 24, 7, 1], [1, "f", 0, 22, 7, 1], [1, "f", 1, 20, 7, 1], [1, "f", 0, 18, 7, 1], [1, "f", 1, 16, 7, 1], [1, "f", 0, 14, 7, 1], [1, "f", 1, 12, 7, 1], [1, "f", 0, 10, 7, 1], [1, "f", 1, 8, 7, 1], [1, "s", 1, 7, 9, 1], [1, "f", 0, 95, 152, 1], [1, "f", 1, 95, 151, 1], [1, "f", 0, 95, 11, 1], [1, "f", 1, 95, 12, 1], [1, "f", 1, 95, 14, 1], [1, "f", 1, 95, 19, 1], [1, "f", 0, 95, 15, 1], [1, "f", 0, 95, 20, 1], [1, "f", 1, 95, 21, 1], [1, "f", 1, 95, 26, 1], [1, "f", 1, 95, 37, 1], [1, "f", 0, 95, 44, 1], [1, "f", 1, 95, 50, 1], [1, "f", 1, 95, 52, 1], [1, "f", 0, 95, 53, 1], [1, "f", 1, 95, 54, 1], [1, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, 1], [1, "f", 1, 95, 64, 1], [1, "f", 0, 95, 58, 1], [1, "f", 0, 95, 61, 1], [1, "f", 0, 95, 68, 1], [1, "f", 0, 95, 72, 1], [1, "f", 0, 95, 78, 1], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [1, "f", 1, 95, 128, 1], [1, "f", 0, 95, 85, 1], [1, "f", 0, 95, 91, 1], [1, "f", 0, 95, 95, 1], [1, "f", 0, 95, 114, 1], [1, "f", 2, 95, 113, 1], [1, "f", 1, 95, 119, 1], [1, "f", 0, 95, 120, 1], [1, "f", 1, 95, 121, 1], [1, "f", 0, 95, 127, 1], [1, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [1, "f", 1, 95, 132, 1], [1, "f", 1, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, 1], [1, "f", 0, 95, 147, 1], [1, "f", 1, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, 10, 1], [1, "f", 0, 95, 8, 1], [1, "f", 1, 95, 9, 1], [1, "f", 0, 95, 13, 1], [1, "f", 1, 95, 16, 1], [1, "f", 1, 95, 17, 1], [1, "f", 0, 95, 18, 1], [1, "f", 1, 95, 45, 1], [1, "f", 0, 95, 51, 1], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, 1], [1, "f", 1, 95, 59, 1], [1, "f", 1, 95, 60, 1], [1, "f", 1, 95, 63, 1], [1, "f", 0, 95, 65, 1], [1, "f", 1, 95, 66, 1], [1, "f", 1, 95, 67, 1], [1, "f", 1, 95, 69, 1], [1, "f", 1, 95, 70, 1], [1, "f", 0, 95, 71, 1], [1, "f", 1, 95, 73, 1], [1, "f", 1, 95, 74, 1], [1, "f", 0, 95, 75, 1], [1, "f", 1, 95, 76, 1], [1, "f", 1, 95, 77, 1], [1, "f", 1, 95, 79, 1], [1, "f", 1, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", 1, 95, 82, 1], [1, "f", 0, 95, 83, 1], [1, "f", 1, 95, 84, 1], [1, "f", 1, 95, 86, 1], [1, "f", 1, 95, 88, 1], [1, "f", 0, 95, 87, 1], [1, "f", 1, 95, 89, 1], [1, "f", 1, 95, 90, 1], [1, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, 1], [1, "f", 1, 95, 94, 1], [1, "f", 1, 95, 96, 1], [1, "f", 1, 95, 97, 1], [1, "f", 0, 95, 98, 1], [1, "f", 1, 95, 99, 1], [1, "f", 1, 95, 100, 1], [1, "f", 0, 95, 101, 1], [1, "f", 1, 95, 102, 1], [1, "f", 0, 95, 103, 1], [1, "f", 1, 95, 104, 1], [1, "f", 1, 95, 105, 1], [1, "f", 0, 95, 106, 1], [1, "f", 1, 95, 107, 1], [1, "f", 1, 95, 108, 1], [1, "f", 1, 95, 109, 1], [1, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, 1], [1, "f", 0, 95, 112, 1], [1, "f", 1, 95, 116, 1], [1, "f", 0, 95, 118, 1], [1, "f", 0, 95, 122, 1], [1, "f", 1, 95, 123, 1], [1, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, 1], [1, "f", 1, 95, 126, 1], [1, "f", 1, 95, 129, 1], [1, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, 1], [1, "f", 1, 95, 135, 1], [1, "f", 1, 95, 139, 1], [1, "f", 0, 95, 140, 1], [1, "f", 1, 95, 141, 1], [1, "f", 1, 95, 142, 1], [1, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, 1], [1, "f", 1, 95, 148, 1], [1, "f", 1, 95, 149, 1], [1, "f", 1, 95, 150, 1], [1, "f", 1, 95, 153, 1], [1, "cs", 0, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, 16, 1], [1, "cs", 2, 64, 19, 1], [1, "cs", 0, 64, 20, 1], [1, "cs", 1, 64, 21, 1], [1, "cs", 2, 64, 22, 1], [1, "cs", 0, 64, 23, 1], [1, "cs", 2, 64, 24, 1], [1, "cs", 1, 64, 29, 1], [1, "cs", 2, 64, 30, 1], [1, "cs", 3, 64, 31, 1], [1, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, 1], [1, "cs", 0, 64, 35, 1], [1, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, 8, 1], [1, "cs", 1, 65, 9, 1], [1, "cs", 2, 65, 10, 1], [1, "cs", 3, 65, 11, 1], [1, "cs", 1, 65, 16, 1], [1, "cs", 0, 64, 17, 1], [1, "cs", 3, 65, 17, 1], [1, "cs", 2, 64, 18, 1], [1, "cs", 2, 65, 18, 1], [1, "cs", 0, 65, 19, 1], [1, "cs", 1, 65, 20, 1], [1, "cs", 3, 65, 21, 1], [1, "cs", 2, 65, 22, 1], [1, "cs", 3, 65, 23, 1], [1, "cs", 0, 65, 24, 1], [1, "cs", 2, 65, 29, 1], [1, "cs", 3, 65, 30, 1], [1, "cs", 0, 65, 31, 1], [1, "cs", 1, 65, 32, 1], [1, "cs", 2, 65, 33, 1], [1, "cs", 3, 65, 34, 1], [1, "cs", 2, 63, 9, 1], [1, "cs", 0, 62, 9, 1], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, 9, 1], [1, "cs", 2, 59, 9, 1], [1, "cs", 2, 58, 9, 1], [1, "cs", 0, 57, 9, 1], [1, "cs", 2, 56, 9, 1], [1, "cs", 2, 55, 9, 1], [1, "cs", 2, 54, 9, 1], [1, "cs", 0, 53, 9, 1], [1, "cs", 0, 51, 9, 1], [1, "cs", 2, 52, 9, 1], [1, "cs", 2, 50, 9, 1], [1, "cs", 2, 48, 9, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, 9, 1], [1, "cs", 0, 45, 9, 1], [1, "cs", 0, 43, 9, 1], [1, "cs", 2, 46, 9, 1], [1, "cs", 2, 44, 9, 1], [1, "cs", 2, 42, 9, 1], [1, "cs", 2, 41, 9, 1], [1, "cs", 0, 40, 9, 1], [1, "cs", 2, 39, 9, 1], [1, "cs", 2, 38, 9, 1], [1, "cs", 0, 37, 9, 1], [1, "cs", 0, 63, 8, 1], [1, "cs", 2, 65, 7, 1], [1, "cs", 3, 64, 7, 1], [1, "cs", 2, 62, 8, 1], [1, "cs", 3, 61, 8, 1], [1, "cs", 1, 62, 7, 1], [1, "cs", 2, 63, 7, 1], [1, "cs", 0, 64, 6, 1], [1, "cs", 3, 65, 6, 1], [1, "cs", 2, 63, 6, 1], [1, "cs", 2, 62, 6, 1], [1, "cs", 2, 61, 6, 1], [1, "cs", 2, 60, 6, 1], [1, "cs", 2, 59, 6, 1], [1, "cs", 2, 61, 7, 1], [1, "cs", 0, 60, 7, 1], [1, "cs", 2, 60, 8, 1], [1, "cs", 2, 59, 7, 1], [1, "cs", 2, 59, 8, 1], [1, "cs", 1, 58, 8, 1], [1, "cs", 1, 57, 6, 1], [1, "cs", 1, 55, 7, 1], [1, "cs", 0, 56, 6, 1], [1, "cs", 2, 58, 6, 1], [1, "cs", 2, 58, 7, 1], [1, "cs", 2, 57, 7, 1], [1, "cs", 2, 56, 7, 1], [1, "cs", 2, 55, 6, 1], [1, "cs", 2, 57, 8, 1], [1, "cs", 2, 56, 8, 1], [1, "cs", 2, 55, 8, 1], [1, "cs", 0, 54, 8, 1], [1, "cs", 0, 50, 7, 1], [1, "cs", 0, 53, 6, 1], [1, "cs", 2, 54, 6, 1], [1, "cs", 2, 54, 7, 1], [1, "cs", 2, 53, 7, 1], [1, "cs", 2, 52, 7, 1], [1, "cs", 2, 52, 6, 1], [1, "cs", 1, 52, 8, 1], [1, "cs", 2, 53, 8, 1], [1, "cs", 2, 51, 8, 1], [1, "cs", 2, 51, 7, 1], [1, "cs", 2, 51, 6, 1], [1, "cs", 2, 50, 6, 1], [1, "cs", 2, 50, 8, 1], [1, "cs", 2, 49, 8, 1], [1, "cs", 2, 49, 7, 1], [1, "cs", 2, 49, 6, 1], [1, "cs", 0, 46, 7, 1], [1, "cs", 1, 48, 8, 1], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, 8, 1], [1, "cs", 2, 48, 7, 1], [1, "cs", 2, 48, 6, 1], [1, "cs", 2, 47, 6, 1], [1, "cs", 2, 47, 7, 1], [1, "cs", 2, 47, 8, 1], [1, "cs", 2, 46, 8, 1], [1, "cs", 2, 45, 8, 1], [1, "cs", 2, 45, 7, 1], [1, "cs", 2, 45, 6, 1], [1, "cs", 2, 46, 6, 1], [1, "cs", 2, 44, 6, 1], [1, "cs", 2, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", 2, 43, 7, 1], [1, "cs", 2, 43, 6, 1], [1, "cs", 2, 42, 6, 1], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, 8, 1], [1, "cs", 2, 41, 7, 1], [1, "cs", 2, 41, 6, 1], [1, "cs", 2, 40, 6, 1], [1, "cs", 2, 40, 7, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", 2, 39, 8, 1], [1, "cs", 0, 39, 7, 1], [1, "cs", 1, 38, 8, 1], [1, "cs", 2, 39, 6, 1], [1, "cs", 2, 38, 6, 1], [1, "cs", 2, 37, 6, 1], [1, "cs", 2, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [1, "cs", 2, 37, 8, 1], [1, "cs", 2, 37, 10, 1], [1, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, 1], [1, "cs", 0, 38, 17, 1], [1, "cs", 1, 37, 18, 1], [1, "cs", 0, 38, 19, 1], [1, "cs", 2, 37, 11, 1], [1, "cs", 2, 37, 16, 1], [1, "cs", 2, 37, 17, 1], [1, "cs", 2, 38, 18, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", 3, 38, 16, 1], [1, "cs", 0, 37, 21, 1], [1, "cs", 0, 38, 22, 1], [1, "cs", 0, 38, 24, 1], [1, "cs", 2, 37, 20, 1], [1, "cs", 2, 38, 20, 1], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, 1], [1, "cs", 3, 37, 22, 1], [1, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, 1], [1, "cs", 0, 38, 30, 1], [1, "cs", 0, 38, 32, 1], [1, "cs", 0, 37, 31, 1], [1, "cs", 1, 38, 34, 1], [1, "cs", 1, 37, 29, 1], [1, "cs", 2, 38, 29, 1], [1, "cs", 2, 37, 30, 1], [1, "cs", 2, 38, 31, 1], [1, "cs", 2, 37, 32, 1], [1, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, 1], [1, "cs", 2, 36, 8, 1], [1, "cs", 0, 36, 11, 1], [1, "cs", 0, 35, 9, 1], [1, "cs", 2, 36, 9, 1], [1, "cs", 2, 36, 10, 1], [1, "cs", 2, 35, 10, 1], [1, "cs", 1, 33, 8, 1], [1, "cs", 3, 34, 9, 1], [1, "cs", 3, 35, 8, 1], [1, "cs", 2, 34, 8, 1], [1, "cs", 0, 36, 7, 1], [1, "cs", 1, 34, 7, 1], [1, "cs", 2, 35, 7, 1], [1, "cs", 2, 35, 6, 1], [1, "cs", 2, 36, 6, 1], [1, "cs", 2, 68, 9, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", 0, 67, 9, 1], [1, "cs", 0, 66, 8, 1], [1, "cs", 2, 67, 8, 1], [1, "cs", 1, 68, 8, 1], [1, "cs", 1, 66, 11, 1], [1, "cs", 2, 67, 10, 1], [1, "cs", 0, 66, 6, 1], [1, "cs", 2, 66, 7, 1], [1, "cs", 2, 67, 7, 1], [1, "cs", 2, 69, 8, 1], [1, "cs", 2, 63, 32, 1], [1, "cs", 2, 62, 34, 1], [1, "cs", 2, 60, 35, 1], [1, "cs", 3, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", 0, 63, 34, 1], [1, "cs", 2, 63, 33, 1], [1, "cs", 2, 63, 35, 1], [1, "cs", 2, 62, 35, 1], [1, "cs", 2, 58, 36, 1], [1, "cs", 1, 59, 36, 1], [1, "cs", 1, 62, 36, 1], [1, "cs", 2, 60, 36, 1], [1, "cs", 2, 61, 34, 1], [1, "cs", 3, 62, 33, 1], [1, "cs", 3, 63, 36, 1], [1, "cs", 3, 61, 36, 1], [1, "cs", 0, 42, 36, 1], [1, "cs", 1, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [1, "cs", 3, 40, 36, 1], [1, "cs", 3, 43, 36, 1], [1, "cs", 1, 40, 35, 1], [1, "cs", 2, 41, 35, 1], [1, "cs", 2, 40, 34, 1], [1, "cs", 2, 39, 34, 1], [1, "cs", 2, 39, 33, 1], [1, "cs", 2, 39, 32, 1], [1, "cs", 0, 40, 33, 1], [1, "cs", 2, 41, 34, 1], [1, "cs", 1, 44, 36, 1], [1, "cs", 3, 43, 35, 1], [1, "cs", 2, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [1, "cs", 3, 59, 30, 1], [1, "cs", 0, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [1, "cs", 3, 60, 27, 1], [1, "cs", 0, 60, 26, 1], [1, "cs", 2, 54, 25, 1], [1, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, 1], [1, "cs", 0, 55, 25, 1], [1, "cs", 2, 59, 26, 1], [1, "cs", 0, 43, 26, 1], [1, "cs", 1, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [1, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, 1], [1, "cs", 0, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [1, "cs", 2, 63, 22, 1], [1, "cs", 2, 63, 21, 1], [1, "cs", 2, 39, 21, 1], [1, "cs", 3, 57, 18, 1], [1, "cs", 2, 56, 18, 1], [1, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, 20, 1], [1, "cs", 2, 51, 19, 1], [1, "cs", 3, 51, 18, 1], [1, "cs", 2, 63, 16, 1], [1, "cs", 2, 63, 10, 1], [1, "cs", 2, 56, 13, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, 1], [1, "cs", 2, 47, 18, 1], [1, "cs", 2, 46, 18, 1], [1, "cs", 0, 46, 13, 1], [1, "cs", 2, 45, 13, 1], [1, "cs", 2, 39, 10, 1], [1, "cs", 2, 39, 16, 1], [1, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [1, "a", 1, 53, 14, 1], [1, "a", 1, 49, 14, 1], [1, "de", 8, 55, 15, 0], [1, "de", 9, 48, 28, 0], [1, "de", 10, 58, 26, 0], [1, "de", 11, 59, 29, 0], [1, "de", 11, 55, 34, 0], [1, "de", 10, 48, 33, 0], [1, "de", 9, 41, 32, 0], [1, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", 9, 45, 11, 0], [1, "de", 9, 44, 17, 0], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, 0], [1, "de", 10, 63, 31, 0], [1, "de", 8, 60, 30, 0], [1, "de", 8, 43, 26, 0], [1, "de", 10, 43, 29, 0], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, 0], [1, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, 0], [1, "de", 10, 39, 26, 0], [1, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, 0], [1, "de", 32, 55, 35, 0], [1, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, 0], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, 17, 0], [1, "de", 32, 63, 13, 0], [1, "de", 32, 59, 10, 0], [1, "de", 32, 56, 12, 0], [1, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, 12, 0], [1, "de", 32, 39, 18, 0], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, 0], [1, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [1, "de", 31, 59, 24, 0], [1, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, 0], [1, "de", 31, 39, 27, 0], [1, "de", 31, 48, 27, 0], [1, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, 0], [1, "d", 0, 12, 13, 1], [1, "d", 0, 89, 13, 1], [1, "d", 1, 91, 21, 1], [1, "d", 1, 10, 22, 1], [1, "f", 2, 89, 18, 1], [1, "f", 0, 88, 19, 1], [1, "g", 1, 85, 22, 1], [1, "s", 1, 90, 29, 1], [1, "s", 1, 92, 15, 1], [1, "s", 0, 91, 31, 1], [1, "s", 2, 90, 38, 1], [1, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", 1, 86, 43, 1], [1, "f", 0, 81, 45, 1], [1, "f", 2, 66, 44, 1], [1, "f", 2, 55, 49, 1], [1, "f", 1, 54, 50, 1], [1, "f", 2, 43, 45, 1], [1, "f", 2, 31, 48, 1], [1, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, 1], [1, "f", 1, 69, 48, 1], [1, "g", 0, 80, 40, 1], [1, "g", 2, 81, 40, 1], [1, "s", 2, 77, 39, 1], [1, "s", 0, 68, 43, 1], [1, "s", 2, 57, 41, 1], [1, "s", 1, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", 2, 48, 48, 1], [1, "f", 2, 17, 12, 1], [1, "f", 0, 13, 31, 1], [1, "f", 1, 14, 32, 1], [1, "s", 0, 15, 27, 1], [1, "s", 0, 13, 39, 1], [1, "f", 2, 11, 17, 1], [1, "f", 1, 12, 18, 1], [1, "g", 2, 12, 25, 1], [1, "f", 0, 16, 45, 1], [1, "f", 1, 17, 46, 1], [1, "s", 1, 74, 48, 1], [1, "s", 1, 20, 47, 1], [1, "g", 0, 58, 59, 1], [1, "g", 0, 46, 72, 1], [1, "g", 0, 69, 79, 1], [1, "g", 0, 72, 74, 1], [1, "g", 0, 26, 88, 1], [1, "g", 0, 20, 74, 1], [1, "g", 0, 28, 67, 1], [1, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [1, "g", 0, 87, 72, 1], [1, "g", 0, 14, 85, 1], [1, "g", 1, 85, 97, 1], [1, "g", 1, 68, 104, 1], [1, "g", 1, 63, 91, 1], [1, "g", 1, 39, 90, 1], [1, "g", 1, 34, 99, 1], [1, "g", 1, 17, 103, 1], [1, "g", 2, 77, 60, 1], [1, "g", 2, 19, 56, 1], [1, "g", 2, 39, 60, 1], [1, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [1, "f", 0, 26, 59, 1], [1, "f", 0, 35, 53, 1], [1, "f", 0, 44, 58, 1], [1, "f", 0, 88, 62, 1], [1, "f", 0, 91, 82, 1], [1, "f", 0, 84, 85, 1], [1, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [1, "f", 0, 62, 83, 1], [1, "f", 0, 34, 81, 1], [1, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, 1], [1, "f", 1, 81, 70, 1], [1, "f", 1, 91, 72, 1], [1, "f", 1, 8, 91, 1], [1, "f", 1, 14, 81, 1], [1, "f", 1, 29, 79, 1], [1, "f", 1, 13, 65, 1], [1, "f", 1, 46, 97, 1], [1, "f", 1, 43, 73, 1], [1, "f", 1, 60, 69, 1], [1, "f", 1, 70, 96, 1], [1, "f", 1, 58, 84, 1], [1, "s", 1, 56, 76, 1], [1, "s", 1, 85, 74, 1], [1, "s", 0, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", 0, 20, 66, 1], [1, "s", 0, 47, 83, 1], [1, "s", 0, 29, 86, 1], [1, "s", 0, 78, 92, 1], [1, "s", 0, 62, 102, 1], [1, "s", 0, 18, 95, 1], [1, "s", 2, 64, 101, 1], [1, "s", 2, 78, 84, 1], [1, "s", 2, 49, 83, 1], [1, "s", 2, 15, 76, 1], [1, "s", 2, 21, 84, 1], [1, "f", 1, 26, 94, 1], [1, "f", 2, 23, 96, 1], [1, "f", 2, 25, 72, 1], [1, "f", 2, 85, 77, 1], [1, "f", 2, 79, 95, 1], [1, "f", 2, 51, 65, 1], [1, "f", 2, 69, 60, 1], [1, "f", 1, 25, 105, 1], [1, "s", 1, 18, 68, 1], [1, "s", 0, 55, 76, 1], [1, "s", 0, 74, 59, 1], [1, "f", 1, 46, 142, 1], [1, "f", 1, 19, 140, 1], [1, "f", 1, 77, 137, 1], [1, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [1, "f", 0, 55, 121, 1], [1, "f", 0, 13, 123, 1], [1, "f", 0, 18, 141, 1], [1, "f", 0, 40, 137, 1], [1, "f", 2, 76, 142, 1], [1, "f", 2, 57, 140, 1], [1, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, 1], [1, "f", 2, 29, 131, 1], [1, "f", 0, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, 12, 132, 1], [1, "f", 0, 90, 129, 1], [1, "f", 1, 87, 131, 1], [1, "f", 0, 91, 143, 1], [1, "f", 2, 87, 145, 1], [1, "f", 1, 89, 141, 1], [1, "f", 1, 63, 130, 1], [1, "f", 1, 75, 122, 1], [1, "f", 1, 52, 124, 1], [1, "f", 1, 34, 127, 1], [1, "f", 1, 14, 123, 1], [1, "f", 1, 24, 122, 1], [1, "f", 0, 83, 108, 1], [1, "f", 0, 89, 118, 1], [1, "f", 0, 56, 107, 1], [1, "f", 0, 38, 113, 1], [1, "f", 0, 16, 110, 1], [1, "f", 1, 80, 105, 1], [1, "f", 1, 82, 109, 1], [1, "f", 1, 87, 118, 1], [1, "f", 1, 59, 110, 1], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [1, "f", 2, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [1, "s", 0, 25, 172, 1], [1, "s", 0, 22, 161, 1], [1, "s", 0, 35, 152, 1], [1, "s", 0, 66, 144, 1], [1, "s", 0, 87, 145, 1], [1, "s", 0, 86, 145, 1], [1, "s", 0, 84, 135, 1], [1, "s", 0, 69, 133, 1], [1, "s", 0, 84, 122, 1], [1, "s", 0, 68, 121, 1], [1, "s", 0, 48, 124, 1], [1, "s", 0, 26, 129, 1], [1, "s", 0, 9, 127, 1], [1, "s", 0, 11, 144, 1], [1, "s", 0, 9, 109, 1], [1, "s", 0, 35, 101, 1], [1, "s", 0, 47, 109, 1], [1, "s", 0, 58, 111, 1], [1, "s", 0, 84, 110, 1], [1, "s", 0, 28, 114, 1], [1, "s", 1, 30, 116, 1], [1, "s", 1, 46, 112, 1], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, 1], [1, "s", 1, 49, 127, 1], [1, "s", 1, 66, 134, 1], [1, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, 1], [1, "s", 1, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [1, "s", 1, 12, 125, 1], [1, "s", 1, 65, 158, 1], [1, "s", 1, 83, 167, 1], [1, "s", 1, 65, 167, 1], [1, "s", 1, 47, 164, 1], [1, "s", 1, 56, 168, 1], [1, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", 2, 79, 149, 1], [1, "s", 2, 75, 144, 1], [1, "s", 2, 57, 150, 1], [1, "s", 2, 47, 143, 1], [1, "s", 2, 31, 145, 1], [1, "s", 2, 36, 138, 1], [1, "s", 2, 10, 163, 1], [1, "s", 2, 22, 142, 1], [1, "g", 2, 78, 132, 1], [1, "g", 1, 48, 135, 1], [1, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [1, "g", 2, 70, 80, 1], [1, "g", 2, 15, 86, 1], [1, "g", 2, 47, 75, 1], [1, "g", 2, 36, 89, 1], [1, "g", 2, 80, 90, 1], [1, "f", 1, 39, 118, 1], [1, "d", 2, 84, 54, 1], [1, "d", 2, 16, 54, 1], [1, "de", 7, 13, 13, 0], [1, "de", 5, 16, 28, 0], [1, "de", 5, 9, 25, 0], [1, "de", 5, 34, 41, 0], [1, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", 6, 12, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, 0], [1, "de", 6, 40, 42, 0], [1, "de", 7, 20, 48, 0], [1, "de", 7, 29, 59, 0], [1, "de", 6, 27, 58, 0], [1, "de", 6, 15, 54, 0], [1, "de", 5, 12, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", 4, 10, 63, 0], [1, "de", 7, 49, 48, 0], [1, "de", 7, 37, 63, 0], [1, "de", 6, 33, 68, 0], [1, "de", 6, 56, 52, 0], [1, "de", 5, 59, 58, 0], [1, "de", 6, 48, 58, 0], [1, "de", 4, 53, 63, 0], [1, "de", 4, 67, 44, 0], [1, "de", 5, 70, 49, 0], [1, "de", 5, 82, 55, 0], [1, "de", 5, 79, 41, 0], [1, "de", 5, 91, 29, 0], [1, "de", 7, 91, 43, 0], [1, "de", 6, 85, 44, 0], [1, "de", 6, 74, 60, 0], [1, "de", 6, 90, 8, 0], [1, "de", 5, 91, 15, 0], [1, "de", 4, 87, 20, 0], [1, "de", 7, 93, 11, 0], [1, "de", 6, 91, 21, 0], [1, "de", 6, 85, 35, 0], [1, "de", 5, 93, 58, 0], [1, "de", 5, 87, 63, 0], [1, "de", 7, 77, 62, 0], [1, "de", 6, 68, 61, 0], [1, "de", 5, 90, 73, 0], [1, "de", 4, 87, 71, 0], [1, "de", 7, 80, 71, 0], [1, "de", 7, 83, 77, 0], [1, "de", 7, 89, 83, 0], [1, "de", 4, 71, 80, 0], [1, "de", 4, 71, 70, 0], [1, "de", 5, 63, 72, 0], [1, "de", 4, 54, 75, 0], [1, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, 0], [1, "de", 5, 15, 81, 0], [1, "de", 4, 29, 80, 0], [1, "de", 4, 37, 90, 0], [1, "de", 4, 7, 75, 0], [1, "de", 6, 22, 74, 0], [1, "de", 6, 43, 95, 0], [1, "de", 6, 57, 85, 0], [1, "de", 6, 19, 94, 0], [1, "de", 6, 9, 92, 0], [1, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [1, "de", 5, 54, 108, 0], [1, "de", 5, 55, 95, 0], [1, "de", 5, 35, 104, 0], [1, "de", 5, 13, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, 0], [1, "de", 7, 11, 104, 0], [1, "de", 7, 9, 111, 0], [1, "de", 7, 40, 114, 0], [1, "de", 7, 28, 117, 0], [1, "de", 7, 47, 113, 0], [1, "de", 7, 63, 104, 0], [1, "de", 4, 64, 92, 0], [1, "de", 6, 86, 97, 0], [1, "de", 5, 76, 91, 0], [1, "de", 5, 85, 86, 0], [1, "de", 6, 78, 83, 0], [1, "de", 6, 71, 97, 0], [1, "de", 4, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", 4, 86, 109, 0], [1, "de", 4, 86, 118, 0], [1, "de", 5, 70, 113, 0], [1, "de", 6, 69, 121, 0], [1, "de", 6, 76, 122, 0], [1, "de", 7, 87, 130, 0], [1, "de", 4, 84, 123, 0], [1, "de", 4, 57, 121, 0], [1, "de", 5, 53, 125, 0], [1, "de", 5, 62, 131, 0], [1, "de", 6, 67, 143, 0], [1, "de", 5, 77, 143, 0], [1, "de", 5, 85, 136, 0], [1, "de", 6, 87, 147, 0], [1, "de", 6, 92, 140, 0], [1, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [1, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", 4, 54, 138, 0], [1, "de", 6, 29, 145, 0], [1, "de", 6, 29, 132, 0], [1, "de", 6, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", 5, 23, 131, 0], [1, "de", 5, 9, 134, 0], [1, "de", 6, 11, 121, 0], [1, "de", 4, 26, 121, 0], [1, "de", 35, 58, 150, 0], [1, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, 0], [1, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, 0], [1, "de", 34, 13, 148, 0], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [1, "de", 34, 47, 144, 0], [1, "de", 34, 68, 142, 0], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [1, "de", 36, 90, 141, 0], [1, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, 0], [1, "de", 35, 56, 122, 0], [1, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, 0], [1, "de", 35, 37, 102, 0], [1, "de", 33, 18, 97, 0], [1, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, 0], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, 0], [1, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, 8, 32, 0], [1, "de", 33, 9, 24, 0], [1, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, 0], [1, "de", 35, 53, 39, 0], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, 0], [1, "de", 33, 68, 112, 0], [1, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, 0], [1, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, 0], [1, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [1, "de", 34, 92, 9, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [1, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, 0], [1, "de", 33, 64, 84, 0], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [1, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, 0], [1, "de", 35, 14, 52, 0], [1, "s", 2, 12, 171, 1], [1, "r", 20, 188, 0], [1, "r", 21, 188, 0], [1, "r", 22, 188, 0], [1, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, 0], [1, "r", 23, 189, 0], [1, "r", 22, 189, 0], [1, "r", 21, 189, 0], [1, "r", 20, 189, 0], [1, "r", 19, 189, 0], [1, "r", 19, 190, 0], [1, "r", 19, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [1, "r", 24, 191, 0], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [1, "r", 25, 190, 0], [1, "r", 24, 190, 0], [1, "r", 23, 190, 0], [1, "r", 22, 190, 0], [1, "r", 21, 190, 0], [1, "r", 20, 190, 0], [1, "r", 26, 190, 0], [1, "r", 26, 191, 0], [1, "r", 24, 193, 0], [1, "r", 23, 193, 0], [1, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, 0], [1, "r", 22, 192, 0], [1, "r", 23, 192, 0], [1, "r", 24, 192, 0], [1, "r", 25, 192, 0], [1, "r", 53, 199, 0], [1, "r", 52, 200, 0], [1, "r", 54, 199, 0], [1, "r", 55, 199, 0], [1, "r", 55, 200, 0], [1, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [1, "r", 55, 201, 0], [1, "r", 54, 201, 0], [1, "r", 55, 202, 0], [1, "r", 54, 203, 0], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [1, "r", 53, 202, 0], [1, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, 0], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, 0], [1, "r", 56, 201, 0], [1, "r", 53, 203, 0], [1, "r", 52, 203, 0], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [1, "r", 53, 204, 0], [1, "r", 52, 204, 0], [1, "r", 55, 204, 0], [1, "r", 56, 203, 0], [1, "r", 56, 244, 0], [1, "r", 54, 246, 0], [1, "r", 50, 248, 0], [1, "r", 48, 248, 0], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [1, "r", 44, 238, 0], [1, "r", 43, 238, 0], [1, "r", 46, 238, 0], [1, "r", 47, 238, 0], [1, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, 0], [1, "r", 51, 238, 0], [1, "r", 52, 238, 0], [1, "r", 53, 238, 0], [1, "r", 54, 239, 0], [1, "r", 53, 240, 0], [1, "r", 53, 239, 0], [1, "r", 52, 239, 0], [1, "r", 51, 239, 0], [1, "r", 50, 239, 0], [1, "r", 49, 239, 0], [1, "r", 48, 239, 0], [1, "r", 47, 239, 0], [1, "r", 46, 239, 0], [1, "r", 45, 239, 0], [1, "r", 44, 239, 0], [1, "r", 43, 239, 0], [1, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [1, "r", 43, 240, 0], [1, "r", 44, 240, 0], [1, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, 0], [1, "r", 50, 240, 0], [1, "r", 51, 240, 0], [1, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, 0], [1, "r", 55, 241, 0], [1, "r", 54, 241, 0], [1, "r", 53, 241, 0], [1, "r", 52, 241, 0], [1, "r", 51, 241, 0], [1, "r", 49, 241, 0], [1, "r", 50, 241, 0], [1, "r", 48, 241, 0], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [1, "r", 45, 241, 0], [1, "r", 44, 241, 0], [1, "r", 43, 241, 0], [1, "r", 42, 241, 0], [1, "r", 41, 241, 0], [1, "r", 40, 242, 0], [1, "r", 41, 242, 0], [1, "r", 42, 242, 0], [1, "r", 43, 242, 0], [1, "r", 44, 242, 0], [1, "r", 45, 242, 0], [1, "r", 46, 242, 0], [1, "r", 47, 242, 0], [1, "r", 48, 242, 0], [1, "r", 49, 242, 0], [1, "r", 50, 242, 0], [1, "r", 51, 242, 0], [1, "r", 52, 242, 0], [1, "r", 53, 242, 0], [1, "r", 54, 242, 0], [1, "r", 55, 242, 0], [1, "r", 56, 242, 0], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [1, "r", 54, 243, 0], [1, "r", 53, 243, 0], [1, "r", 52, 243, 0], [1, "r", 51, 243, 0], [1, "r", 50, 243, 0], [1, "r", 49, 243, 0], [1, "r", 48, 243, 0], [1, "r", 47, 243, 0], [1, "r", 46, 243, 0], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, 0], [1, "r", 41, 243, 0], [1, "r", 40, 243, 0], [1, "r", 40, 244, 0], [1, "r", 41, 244, 0], [1, "r", 43, 244, 0], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [1, "r", 46, 244, 0], [1, "r", 47, 244, 0], [1, "r", 48, 244, 0], [1, "r", 49, 244, 0], [1, "r", 50, 244, 0], [1, "r", 51, 244, 0], [1, "r", 52, 244, 0], [1, "r", 53, 244, 0], [1, "r", 54, 244, 0], [1, "r", 55, 244, 0], [1, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, 0], [1, "r", 42, 245, 0], [1, "r", 43, 245, 0], [1, "r", 44, 245, 0], [1, "r", 45, 245, 0], [1, "r", 46, 245, 0], [1, "r", 47, 245, 0], [1, "r", 48, 245, 0], [1, "r", 49, 245, 0], [1, "r", 50, 245, 0], [1, "r", 51, 245, 0], [1, "r", 52, 246, 0], [1, "r", 52, 245, 0], [1, "r", 53, 245, 0], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, 0], [1, "r", 51, 246, 0], [1, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, 0], [1, "r", 45, 246, 0], [1, "r", 46, 246, 0], [1, "r", 44, 246, 0], [1, "r", 43, 246, 0], [1, "r", 42, 246, 0], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [1, "r", 43, 247, 0], [1, "r", 44, 247, 0], [1, "r", 45, 247, 0], [1, "r", 46, 247, 0], [1, "r", 47, 247, 0], [1, "r", 48, 247, 0], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [1, "r", 52, 247, 0], [1, "r", 53, 247, 0], [1, "r", 54, 247, 0], [1, "r", 49, 247, 0], [1, "r", 49, 248, 0], [1, "r", 47, 248, 0], [1, "r", 46, 248, 0], [1, "r", 45, 248, 0], [1, "r", 51, 248, 0], [1, "r", 55, 246, 1], [1, "r", 55, 247, 1], [1, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, 1], [1, "r", 93, 270, 1], [1, "r", 94, 270, 1], [1, "r", 95, 271, 1], [1, "r", 94, 271, 1], [1, "r", 93, 271, 1], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [1, "r", 92, 281, 1], [1, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, 1], [1, "r", 95, 275, 1], [1, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, 1], [1, "r", 94, 273, 1], [1, "r", 94, 272, 1], [1, "r", 93, 272, 1], [1, "r", 93, 273, 1], [1, "r", 93, 274, 1], [1, "r", 92, 273, 1], [1, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [1, "r", 92, 269, 1], [1, "r", 90, 269, 1], [1, "r", 91, 269, 1], [1, "r", 91, 271, 1], [1, "r", 91, 270, 1], [1, "r", 95, 278, 1], [1, "r", 95, 277, 1], [1, "r", 95, 276, 1], [1, "r", 94, 276, 1], [1, "r", 94, 275, 1], [1, "r", 93, 275, 1], [1, "r", 92, 274, 1], [1, "r", 92, 275, 1], [1, "r", 91, 275, 1], [1, "r", 90, 275, 1], [1, "r", 89, 274, 1], [1, "r", 90, 274, 1], [1, "r", 89, 275, 1], [1, "r", 88, 274, 1], [1, "r", 88, 273, 1], [1, "r", 86, 272, 1], [1, "r", 85, 271, 1], [1, "r", 86, 271, 1], [1, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, 1], [1, "r", 55, 249, 1], [1, "r", 55, 250, 1], [1, "r", 56, 250, 1], [1, "r", 57, 250, 1], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [1, "r", 58, 250, 1], [1, "r", 60, 250, 1], [1, "r", 61, 251, 1], [1, "r", 60, 251, 1], [1, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, 1], [1, "r", 58, 251, 1], [1, "r", 57, 251, 1], [1, "r", 56, 251, 1], [1, "r", 58, 252, 1], [1, "r", 57, 252, 1], [1, "r", 57, 253, 1], [1, "r", 58, 253, 1], [1, "r", 58, 254, 1], [1, "r", 59, 255, 1], [1, "r", 58, 255, 1], [1, "r", 57, 254, 1], [1, "r", 56, 252, 1], [1, "r", 55, 251, 1], [1, "r", 60, 255, 1], [1, "r", 61, 255, 1], [1, "r", 61, 256, 1], [1, "r", 60, 256, 1], [1, "r", 62, 256, 1], [1, "r", 62, 257, 1], [1, "r", 61, 257, 1], [1, "r", 64, 253, 1], [1, "r", 64, 254, 1], [1, "r", 65, 254, 1], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [1, "r", 65, 256, 1], [1, "r", 65, 257, 1], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [1, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, 255, 1], [1, "r", 66, 256, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [1, "r", 67, 259, 1], [1, "r", 66, 259, 1], [1, "r", 65, 259, 1], [1, "r", 56, 246, 1], [1, "r", 56, 245, 1], [1, "r", 68, 258, 1], [1, "r", 68, 259, 1], [1, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, 1], [1, "r", 70, 261, 1], [1, "r", 71, 261, 1], [1, "r", 67, 260, 1], [1, "r", 89, 269, 1], [1, "r", 89, 268, 1], [1, "r", 90, 268, 1], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, 1], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [1, "r", 79, 266, 1], [1, "r", 78, 265, 1], [1, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, 1], [1, "r", 75, 263, 1], [1, "r", 74, 263, 1], [1, "r", 74, 262, 1], [1, "r", 72, 262, 1], [1, "r", 73, 262, 1], [1, "r", 71, 262, 1], [1, "r", 85, 270, 1], [1, "r", 84, 270, 1], [1, "r", 84, 269, 1], [1, "r", 83, 269, 1], [1, "r", 82, 269, 1], [1, "r", 81, 269, 1], [1, "r", 81, 268, 1], [1, "r", 82, 268, 1], [1, "r", 83, 268, 1], [1, "r", 80, 268, 1], [1, "r", 80, 267, 1], [1, "r", 79, 267, 1], [1, "r", 78, 266, 1], [1, "r", 76, 265, 1], [1, "r", 75, 262, 1], [1, "r", 90, 280, 1], [1, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, 1], [1, "r", 88, 278, 1], [1, "r", 87, 277, 1], [1, "r", 86, 276, 1], [1, "r", 86, 275, 1], [1, "r", 86, 274, 1], [1, "r", 86, 273, 1], [1, "r", 85, 273, 1], [1, "r", 85, 272, 1], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [1, "r", 87, 278, 1], [1, "r", 84, 271, 1], [1, "r", 83, 270, 1], [1, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, 1], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [1, "r", 92, 282, 1], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [1, "r", 85, 275, 1], [1, "r", 84, 273, 1], [1, "r", 84, 272, 1], [1, "r", 83, 271, 1], [1, "r", 82, 270, 1], [1, "r", 84, 267, 0], [1, "r", 85, 267, 0], [1, "r", 76, 262, 0], [1, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [1, "r", 81, 263, 0], [1, "r", 82, 263, 0], [1, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, 0], [1, "r", 90, 262, 0], [1, "r", 87, 262, 0], [1, "r", 86, 262, 0], [1, "r", 86, 263, 0], [1, "r", 87, 263, 0], [1, "r", 91, 262, 0], [1, "r", 95, 262, 0], [1, "r", 94, 262, 0], [1, "r", 86, 267, 0], [1, "r", 87, 267, 0], [1, "r", 87, 268, 0], [1, "r", 86, 268, 0], [1, "r", 74, 189, 0], [1, "r", 75, 189, 0], [1, "r", 76, 189, 0], [1, "r", 77, 189, 0], [1, "r", 78, 190, 0], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [1, "r", 76, 190, 0], [1, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, 0], [1, "r", 76, 191, 0], [1, "r", 77, 191, 0], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [1, "r", 78, 192, 0], [1, "r", 77, 192, 0], [1, "r", 76, 192, 0], [1, "r", 75, 192, 0], [1, "r", 74, 192, 0], [1, "r", 73, 191, 0], [1, "f", 1, 96, 22, 1], [1, "s", 1, 97, 22, 1], [1, "f", 1, 98, 22, 1], [1, "s", 0, 99, 22, 1], [1, "s", 1, 100, 21, 1], [1, "s", 1, 96, 49, 1], [1, "s", 1, 100, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", 0, 97, 49, 1], [1, "f", 1, 98, 49, 1], [1, "r", 70, 218, 0], [1, "r", 71, 218, 0], [1, "r", 72, 218, 0], [1, "r", 73, 218, 0], [1, "r", 74, 219, 0], [1, "r", 73, 219, 0], [1, "r", 72, 219, 0], [1, "r", 71, 219, 0], [1, "r", 70, 219, 0], [1, "r", 73, 220, 0], [1, "r", 72, 220, 0], [1, "r", 71, 220, 0], [1, "r", 72, 221, 0], [1, "r", 71, 221, 0], [1, "r", 70, 221, 0], [1, "r", 69, 221, 0], [1, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [1, "r", 69, 219, 0], [1, "r", 68, 220, 0], [1, "r", 73, 221, 0], [1, "r", 73, 222, 0], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [1, "r", 74, 221, 0], [1, "r", 74, 220, 0], [1, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, 0], [1, "r", 69, 222, 0], [1, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, 0], [1, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, 0], [1, "r", 27, 218, 0], [1, "r", 28, 218, 0], [1, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, 0], [1, "r", 26, 217, 0], [1, "r", 27, 217, 0], [1, "r", 28, 216, 0], [1, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, 0], [1, "r", 32, 218, 0], [1, "r", 31, 216, 0], [1, "r", 31, 221, 0], [1, "r", 31, 220, 0], [1, "r", 30, 220, 0], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [1, "r", 25, 218, 0], [1, "r", 27, 221, 0], [1, "r", 28, 221, 0], [1, "r", 29, 221, 0], [1, "r", 30, 221, 0], [1, "r", 32, 220, 0], [1, "r", 32, 219, 0], [1, "r", 33, 218, 0], [1, "r", 33, 219, 0], [1, "r", 75, 238, 0], [1, "r", 76, 238, 0], [1, "r", 77, 239, 0], [1, "r", 76, 239, 0], [1, "r", 75, 239, 0], [1, "r", 74, 239, 0], [1, "r", 76, 240, 0], [1, "r", 77, 240, 0], [1, "r", 78, 240, 0], [1, "r", 77, 241, 0], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [1, "r", 75, 240, 0], [1, "r", 74, 240, 0], [1, "r", 78, 239, 0], [1, "r", 77, 238, 0], [1, "r", 18, 253, 0], [1, "r", 19, 252, 0], [1, "r", 20, 252, 0], [1, "r", 21, 253, 0], [1, "r", 23, 254, 0], [1, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, 0], [1, "r", 18, 254, 0], [1, "r", 19, 253, 0], [1, "r", 20, 253, 0], [1, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [1, "r", 20, 255, 0], [1, "r", 19, 255, 0], [1, "r", 18, 255, 0], [1, "r", 17, 255, 0], [1, "r", 17, 254, 0], [1, "r", 22, 255, 0], [1, "r", 19, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, 256, 0], [1, "r", 39, 270, 0], [1, "r", 40, 270, 0], [1, "r", 41, 270, 0], [1, "r", 43, 270, 0], [1, "r", 44, 270, 0], [1, "r", 46, 270, 0], [1, "r", 42, 270, 0], [1, "r", 45, 270, 0], [1, "r", 44, 269, 0], [1, "r", 43, 269, 0], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [1, "r", 41, 269, 0], [1, "r", 45, 271, 0], [1, "r", 44, 271, 0], [1, "r", 43, 271, 0], [1, "r", 42, 271, 0], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, 0], [1, "r", 44, 272, 0], [1, "r", 43, 272, 0], [1, "r", 42, 272, 0], [1, "r", 19, 284, 0], [1, "r", 20, 284, 0], [1, "r", 21, 285, 0], [1, "r", 22, 285, 0], [1, "r", 23, 286, 0], [1, "r", 22, 288, 0], [1, "r", 20, 288, 0], [1, "r", 18, 288, 0], [1, "r", 17, 287, 0], [1, "r", 16, 287, 0], [1, "r", 16, 286, 0], [1, "r", 17, 286, 0], [1, "r", 18, 286, 0], [1, "r", 19, 286, 0], [1, "r", 20, 286, 0], [1, "r", 21, 286, 0], [1, "r", 22, 286, 0], [1, "r", 20, 285, 0], [1, "r", 19, 285, 0], [1, "r", 18, 285, 0], [1, "r", 17, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, 0], [1, "r", 21, 287, 0], [1, "r", 22, 287, 0], [1, "r", 23, 287, 0], [1, "r", 21, 288, 0], [1, "r", 19, 288, 0], [1, "r", 17, 288, 0], [1, "r", 19, 289, 0], [1, "r", 21, 289, 0], [1, "r", 22, 289, 0], [1, "r", 20, 289, 0], [1, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, 0], [1, "r", 64, 287, 0], [1, "r", 63, 287, 0], [1, "r", 60, 287, 0], [1, "r", 59, 285, 0], [1, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [1, "r", 64, 283, 0], [1, "r", 63, 283, 0], [1, "r", 62, 283, 0], [1, "r", 61, 283, 0], [1, "r", 60, 283, 0], [1, "r", 59, 284, 0], [1, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [1, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [1, "r", 62, 286, 0], [1, "r", 63, 286, 0], [1, "r", 64, 286, 0], [1, "r", 65, 286, 0], [1, "r", 67, 285, 0], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [1, "r", 62, 285, 0], [1, "r", 61, 285, 0], [1, "r", 60, 285, 0], [1, "r", 60, 284, 0], [1, "r", 61, 284, 0], [1, "r", 62, 284, 0], [1, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [1, "r", 67, 286, 0], [1, "p", 0, 13, 189, 1], [1, "p", 0, 32, 184, 1], [1, "p", 0, 47, 191, 1], [1, "p", 0, 64, 184, 1], [1, "p", 0, 84, 192, 1], [1, "p", 0, 78, 207, 1], [1, "p", 0, 58, 216, 1], [1, "p", 0, 41, 211, 1], [1, "p", 0, 18, 211, 1], [1, "p", 0, 14, 230, 1], [1, "p", 0, 29, 237, 1], [1, "p", 0, 50, 230, 1], [1, "p", 0, 78, 241, 1], [1, "p", 0, 74, 256, 1], [1, "p", 0, 68, 266, 1], [1, "p", 0, 48, 259, 1], [1, "p", 0, 31, 263, 1], [1, "p", 0, 18, 274, 1], [1, "p", 0, 33, 283, 1], [1, "p", 0, 66, 287, 1], [1, "p", 0, 82, 291, 1], [1, "p", 0, 16, 295, 1], [1, "p", 0, 45, 294, 1], [1, "p", 0, 18, 252, 1], [1, "p", 0, 79, 227, 1], [1, "p", 0, 32, 200, 1], [1, "p", 0, 64, 200, 1], [1, "s", 0, 21, 193, 1], [1, "s", 1, 18, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, 15, 181, 0], [1, "b", 2, 18, 190, 0], [1, "b", 2, 29, 193, 0], [1, "t", 3, 16, 182, 0], [1, "t", 3, 13, 195, 0], [1, "t", 4, 16, 183, 0], [1, "t", 5, 10, 184, 0], [1, "t", 5, 23, 182, 0], [1, "t", 4, 30, 187, 0], [1, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, 1], [1, "t", 3, 33, 183, 0], [1, "b", 1, 36, 189, 0], [1, "t", 2, 35, 190, 0], [1, "b", 3, 19, 200, 0], [1, "s", 0, 28, 194, 1], [1, "s", 1, 32, 196, 1], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, 1], [1, "s", 2, 10, 192, 1], [1, "s", 2, 12, 183, 1], [1, "s", 1, 15, 199, 1], [1, "b", 0, 12, 202, 0], [1, "t", 2, 13, 203, 0], [1, "t", 4, 20, 200, 0], [1, "t", 4, 12, 194, 0], [1, "t", 5, 15, 205, 0], [1, "t", 5, 29, 200, 0], [1, "t", 3, 28, 201, 0], [1, "s", 2, 25, 199, 1], [1, "s", 1, 22, 204, 1], [1, "g", 2, 25, 205, 1], [1, "b", 1, 27, 216, 0], [1, "s", 1, 25, 217, 1], [1, "s", 1, 33, 217, 1], [1, "s", 2, 35, 215, 1], [1, "s", 0, 32, 221, 1], [1, "t", 2, 31, 222, 0], [1, "t", 4, 26, 221, 0], [1, "b", 3, 27, 222, 0], [1, "b", 0, 17, 217, 0], [1, "t", 3, 18, 216, 0], [1, "t", 4, 13, 215, 0], [1, "t", 5, 30, 213, 0], [1, "t", 5, 24, 208, 0], [1, "s", 1, 12, 216, 1], [1, "s", 2, 11, 210, 1], [1, "s", 2, 34, 223, 1], [1, "b", 2, 36, 218, 0], [1, "t", 4, 40, 206, 0], [1, "t", 5, 35, 203, 0], [1, "t", 3, 39, 206, 0], [1, "b", 1, 34, 204, 0], [1, "s", 1, 33, 206, 1], [1, "s", 1, 42, 203, 1], [1, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, 0], [1, "t", 5, 44, 187, 0], [1, "b", 1, 46, 181, 0], [1, "t", 2, 47, 182, 0], [1, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [1, "t", 4, 55, 184, 0], [1, "t", 5, 62, 195, 0], [1, "s", 1, 51, 185, 1], [1, "s", 2, 62, 180, 1], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, 1], [1, "s", 2, 48, 195, 1], [1, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [1, "t", 3, 56, 204, 0], [1, "t", 4, 57, 204, 0], [1, "t", 4, 51, 204, 0], [1, "s", 1, 52, 205, 1], [1, "s", 2, 57, 200, 1], [1, "s", 1, 56, 199, 1], [1, "b", 0, 55, 192, 0], [1, "t", 3, 56, 193, 0], [1, "t", 4, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, 0], [1, "t", 2, 73, 192, 0], [1, "t", 4, 72, 191, 0], [1, "t", 5, 78, 193, 0], [1, "b", 0, 79, 192, 0], [1, "s", 2, 79, 190, 1], [1, "s", 1, 74, 194, 1], [1, "s", 1, 72, 187, 1], [1, "s", 0, 74, 183, 1], [1, "s", 1, 75, 183, 1], [1, "t", 2, 69, 181, 0], [1, "t", 4, 70, 182, 0], [1, "t", 5, 69, 180, 0], [1, "b", 1, 65, 189, 0], [1, "b", 2, 66, 189, 0], [1, "t", 3, 64, 188, 0], [1, "t", 4, 67, 192, 0], [1, "b", 2, 85, 183, 0], [1, "t", 1, 84, 184, 0], [1, "t", 4, 81, 180, 0], [1, "t", 5, 89, 180, 0], [1, "t", 0, 90, 188, 0], [1, "t", 3, 89, 190, 0], [1, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", 1, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", 4, 87, 207, 0], [1, "s", 2, 79, 202, 1], [1, "s", 1, 80, 203, 1], [1, "t", 0, 71, 200, 0], [1, "b", 2, 72, 201, 0], [1, "t", 2, 65, 205, 0], [1, "t", 1, 66, 206, 0], [1, "t", 4, 63, 209, 0], [1, "t", 5, 73, 203, 0], [1, "s", 0, 70, 207, 1], [1, "s", 1, 71, 206, 1], [1, "s", 2, 68, 199, 1], [1, "s", 1, 64, 213, 1], [1, "t", 0, 85, 213, 0], [1, "b", 2, 84, 212, 0], [1, "t", 3, 77, 209, 0], [1, "t", 4, 83, 216, 0], [1, "t", 4, 73, 209, 0], [1, "b", 0, 86, 222, 0], [1, "b", 3, 87, 221, 0], [1, "s", 1, 80, 214, 1], [1, "s", 2, 87, 216, 1], [1, "s", 2, 84, 224, 1], [1, "s", 1, 77, 227, 1], [1, "t", 1, 74, 222, 0], [1, "b", 1, 69, 218, 0], [1, "b", 2, 75, 219, 0], [1, "s", 2, 74, 218, 1], [1, "s", 1, 69, 223, 1], [1, "s", 1, 77, 221, 1], [1, "b", 1, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, 0], [1, "t", 2, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, 0], [1, "s", 0, 73, 242, 1], [1, "s", 0, 81, 238, 1], [1, "s", 1, 82, 237, 1], [1, "s", 2, 72, 237, 1], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, 0], [1, "b", 2, 62, 229, 0], [1, "t", 4, 67, 231, 0], [1, "t", 4, 62, 228, 0], [1, "t", 5, 64, 233, 0], [1, "t", 2, 65, 234, 0], [1, "t", 2, 51, 220, 0], [1, "t", 1, 50, 218, 0], [1, "b", 1, 45, 223, 0], [1, "b", 2, 46, 224, 0], [1, "t", 4, 49, 218, 0], [1, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", 2, 51, 213, 1], [1, "s", 2, 42, 227, 1], [1, "s", 1, 44, 227, 1], [1, "s", 1, 60, 230, 1], [1, "s", 2, 59, 231, 1], [1, "b", 1, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, 0], [1, "t", 0, 75, 251, 0], [1, "b", 0, 83, 246, 0], [1, "t", 3, 82, 247, 0], [1, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, 0], [1, "t", 5, 75, 252, 0], [1, "s", 1, 79, 257, 1], [1, "s", 2, 78, 249, 1], [1, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, 1], [1, "s", 2, 87, 269, 1], [1, "s", 0, 84, 268, 1], [1, "s", 2, 76, 267, 1], [1, "s", 1, 66, 261, 1], [1, "s", 1, 87, 274, 1], [1, "s", 1, 76, 263, 1], [1, "s", 1, 59, 251, 1], [1, "s", 0, 59, 252, 1], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [1, "t", 2, 79, 271, 0], [1, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [1, "b", 1, 71, 264, 0], [1, "b", 1, 88, 269, 0], [1, "t", 5, 84, 264, 0], [1, "t", 5, 79, 261, 0], [1, "t", 5, 72, 265, 0], [1, "t", 5, 77, 270, 0], [1, "t", 0, 87, 261, 0], [1, "t", 2, 86, 260, 0], [1, "t", 4, 84, 255, 0], [1, "t", 4, 68, 255, 0], [1, "t", 1, 67, 254, 0], [1, "t", 2, 65, 262, 0], [1, "t", 1, 57, 260, 0], [1, "t", 2, 58, 259, 0], [1, "b", 1, 63, 256, 0], [1, "b", 1, 52, 248, 0], [1, "t", 2, 53, 248, 0], [1, "s", 1, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", 2, 52, 252, 1], [1, "s", 2, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", 2, 58, 244, 0], [1, "b", 1, 53, 237, 0], [1, "t", 2, 54, 237, 0], [1, "t", 2, 41, 238, 0], [1, "t", 1, 42, 237, 0], [1, "t", 5, 57, 235, 0], [1, "t", 5, 60, 246, 0], [1, "t", 5, 50, 252, 0], [1, "t", 1, 42, 248, 0], [1, "b", 1, 43, 249, 0], [1, "b", 3, 37, 243, 0], [1, "s", 0, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, 1], [1, "s", 2, 60, 243, 1], [1, "s", 2, 36, 240, 1], [1, "s", 2, 43, 254, 1], [1, "s", 1, 42, 254, 1], [1, "t", 1, 38, 233, 0], [1, "t", 2, 35, 235, 0], [1, "t", 4, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", 4, 43, 235, 0], [1, "t", 5, 45, 249, 0], [1, "t", 5, 41, 253, 0], [1, "b", 1, 20, 227, 0], [1, "b", 1, 14, 240, 0], [1, "t", 3, 21, 227, 0], [1, "t", 3, 27, 234, 0], [1, "t", 3, 15, 241, 0], [1, "t", 3, 12, 229, 0], [1, "t", 4, 17, 224, 0], [1, "t", 4, 11, 231, 0], [1, "t", 4, 22, 238, 0], [1, "t", 4, 11, 239, 0], [1, "t", 1, 22, 243, 0], [1, "b", 2, 23, 242, 0], [1, "s", 1, 23, 238, 1], [1, "s", 1, 22, 228, 1], [1, "s", 2, 24, 228, 1], [1, "s", 2, 21, 236, 1], [1, "s", 0, 13, 228, 1], [1, "s", 0, 16, 242, 1], [1, "s", 1, 15, 244, 1], [1, "s", 1, 34, 236, 1], [1, "t", 1, 26, 249, 0], [1, "t", 1, 22, 256, 0], [1, "t", 2, 23, 255, 0], [1, "b", 1, 17, 256, 0], [1, "b", 2, 18, 256, 0], [1, "s", 0, 21, 252, 1], [1, "s", 2, 20, 250, 1], [1, "s", 2, 23, 259, 1], [1, "s", 1, 13, 257, 1], [1, "t", 1, 31, 254, 0], [1, "t", 2, 32, 254, 0], [1, "t", 4, 28, 254, 0], [1, "t", 4, 34, 258, 0], [1, "t", 0, 29, 260, 0], [1, "b", 2, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", 2, 42, 263, 0], [1, "t", 4, 46, 264, 0], [1, "b", 1, 39, 265, 0], [1, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, 0], [1, "t", 5, 52, 273, 0], [1, "s", 1, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", 2, 41, 274, 1], [1, "t", 2, 42, 268, 0], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [1, "b", 1, 14, 265, 0], [1, "t", 2, 15, 266, 0], [1, "t", 4, 19, 264, 0], [1, "t", 4, 29, 263, 0], [1, "t", 4, 11, 269, 0], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, 0], [1, "t", 2, 20, 279, 0], [1, "t", 0, 19, 278, 0], [1, "t", 3, 13, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, 18, 289, 0], [1, "t", 2, 20, 283, 0], [1, "t", 2, 19, 290, 0], [1, "t", 4, 19, 283, 0], [1, "t", 4, 20, 290, 0], [1, "s", 1, 16, 285, 1], [1, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, 1], [1, "s", 2, 16, 278, 1], [1, "s", 1, 21, 268, 1], [1, "s", 2, 19, 268, 1], [1, "t", 0, 12, 294, 0], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", 3, 10, 299, 0], [1, "t", 4, 11, 287, 0], [1, "t", 4, 17, 298, 0], [1, "t", 1, 27, 294, 0], [1, "b", 2, 26, 295, 0], [1, "t", 3, 33, 297, 0], [1, "b", 1, 48, 278, 0], [1, "b", 0, 46, 280, 0], [1, "b", 2, 50, 280, 0], [1, "t", 0, 44, 282, 0], [1, "b", 1, 49, 283, 0], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, 0], [1, "b", 3, 44, 284, 0], [1, "b", 0, 47, 284, 0], [1, "b", 2, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", 1, 44, 286, 0], [1, "b", 2, 46, 286, 0], [1, "b", 1, 42, 285, 0], [1, "b", 3, 41, 286, 0], [1, "t", 5, 42, 287, 0], [1, "b", 1, 42, 278, 0], [1, "b", 2, 43, 279, 0], [1, "b", 0, 40, 280, 0], [1, "t", 4, 39, 283, 0], [1, "t", 4, 39, 279, 0], [1, "t", 5, 43, 277, 0], [1, "t", 5, 47, 287, 0], [1, "t", 4, 46, 277, 0], [1, "t", 4, 45, 290, 0], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", 1, 29, 279, 0], [1, "b", 1, 32, 277, 0], [1, "t", 3, 31, 278, 0], [1, "b", 2, 28, 280, 0], [1, "t", 4, 29, 286, 0], [1, "t", 5, 28, 275, 0], [1, "t", 3, 37, 292, 0], [1, "b", 1, 36, 291, 0], [1, "b", 0, 34, 298, 0], [1, "t", 4, 31, 292, 0], [1, "t", 4, 46, 295, 0], [1, "t", 4, 59, 287, 0], [1, "b", 1, 58, 286, 0], [1, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, 1], [1, "s", 0, 67, 284, 1], [1, "t", 3, 66, 283, 0], [1, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [1, "b", 1, 76, 294, 0], [1, "t", 5, 75, 295, 0], [1, "t", 5, 56, 293, 0], [1, "t", 5, 59, 281, 0], [1, "t", 5, 67, 291, 0], [1, "b", 0, 88, 293, 0], [1, "t", 2, 89, 292, 0], [1, "t", 2, 85, 286, 0], [1, "t", 4, 88, 289, 0], [1, "t", 4, 79, 287, 0], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, 0], [1, "b", 0, 75, 278, 0], [1, "t", 3, 74, 277, 0], [1, "t", 4, 81, 276, 0], [1, "t", 2, 65, 276, 0], [1, "b", 1, 66, 275, 0], [1, "g", 0, 45, 261, 1], [1, "g", 1, 39, 258, 1], [1, "g", 0, 35, 250, 1], [1, "g", 2, 22, 247, 1], [1, "g", 2, 27, 227, 1], [1, "g", 2, 63, 218, 1], [1, "g", 1, 56, 224, 1], [1, "g", 0, 46, 231, 1], [1, "g", 1, 65, 240, 1], [1, "g", 2, 67, 238, 1], [1, "g", 2, 79, 232, 1], [1, "g", 2, 72, 253, 1], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", 2, 58, 274, 1], [1, "de", 2, 14, 182, 0], [1, "de", 2, 24, 182, 0], [1, "de", 0, 11, 185, 0], [1, "de", 0, 14, 194, 0], [1, "de", 1, 25, 196, 0], [1, "de", 3, 31, 183, 0], [1, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, 0], [1, "de", 1, 38, 191, 0], [1, "de", 0, 56, 181, 0], [1, "de", 1, 68, 182, 0], [1, "de", 2, 80, 181, 0], [1, "de", 3, 86, 187, 0], [1, "de", 0, 84, 193, 0], [1, "de", 1, 82, 201, 0], [1, "de", 2, 64, 191, 0], [1, "de", 2, 72, 200, 0], [1, "de", 3, 64, 201, 0], [1, "de", 2, 76, 209, 0], [1, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", 0, 57, 208, 0], [1, "de", 0, 41, 203, 0], [1, "de", 1, 15, 206, 0], [1, "de", 2, 25, 209, 0], [1, "de", 3, 16, 218, 0], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", 2, 24, 238, 0], [1, "de", 3, 22, 246, 0], [1, "de", 3, 10, 253, 0], [1, "de", 1, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, 14, 267, 0], [1, "de", 0, 24, 268, 0], [1, "de", 0, 15, 278, 0], [1, "de", 2, 21, 279, 0], [1, "de", 2, 30, 272, 0], [1, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", 3, 12, 291, 0], [1, "de", 3, 30, 287, 0], [1, "de", 3, 27, 293, 0], [1, "de", 0, 25, 296, 0], [1, "de", 0, 11, 298, 0], [1, "de", 0, 8, 286, 0], [1, "de", 2, 36, 299, 0], [1, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, 0], [1, "de", 1, 48, 287, 0], [1, "de", 1, 46, 277, 0], [1, "de", 1, 53, 278, 0], [1, "de", 3, 48, 295, 0], [1, "de", 0, 57, 294, 0], [1, "de", 1, 65, 290, 0], [1, "de", 1, 84, 292, 0], [1, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, 0], [1, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [1, "de", 2, 71, 267, 0], [1, "de", 2, 65, 261, 0], [1, "de", 2, 47, 264, 0], [1, "de", 3, 47, 258, 0], [1, "de", 3, 53, 251, 0], [1, "de", 2, 40, 253, 0], [1, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, 0], [1, "de", 2, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, 0], [1, "de", 2, 65, 241, 0], [1, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, 0], [1, "de", 2, 86, 253, 0], [1, "de", 2, 83, 245, 0], [1, "de", 1, 82, 238, 0], [1, "de", 3, 76, 235, 0], [1, "de", 2, 86, 232, 0], [1, "de", 0, 86, 224, 0], [1, "de", 2, 76, 226, 0], [1, "de", 2, 61, 228, 0], [1, "de", 2, 58, 217, 0], [1, "de", 0, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", 20, 17, 180, 0], [1, "de", 22, 18, 181, 0], [1, "de", 19, 30, 184, 0], [1, "de", 19, 27, 187, 0], [1, "de", 19, 30, 195, 0], [1, "de", 19, 18, 192, 0], [1, "de", 19, 44, 182, 0], [1, "de", 19, 49, 182, 0], [1, "de", 19, 54, 182, 0], [1, "de", 19, 59, 183, 0], [1, "de", 19, 56, 186, 0], [1, "de", 19, 46, 188, 0], [1, "de", 19, 58, 193, 0], [1, "de", 19, 67, 187, 0], [1, "de", 19, 65, 192, 0], [1, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [1, "de", 19, 80, 194, 0], [1, "de", 19, 72, 193, 0], [1, "de", 19, 82, 182, 0], [1, "de", 19, 88, 185, 0], [1, "de", 19, 87, 189, 0], [1, "de", 19, 86, 197, 0], [1, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, 0], [1, "de", 19, 70, 202, 0], [1, "de", 19, 83, 199, 0], [1, "de", 19, 86, 208, 0], [1, "de", 19, 84, 214, 0], [1, "de", 19, 83, 211, 0], [1, "de", 19, 84, 217, 0], [1, "de", 19, 77, 210, 0], [1, "de", 19, 71, 210, 0], [1, "de", 19, 73, 213, 0], [1, "de", 19, 66, 207, 0], [1, "de", 19, 66, 204, 0], [1, "de", 19, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, 0], [1, "de", 19, 49, 199, 0], [1, "de", 19, 50, 205, 0], [1, "de", 19, 40, 197, 0], [1, "de", 19, 38, 198, 0], [1, "de", 19, 40, 208, 0], [1, "de", 19, 36, 204, 0], [1, "de", 19, 33, 204, 0], [1, "de", 19, 29, 202, 0], [1, "de", 19, 27, 200, 0], [1, "de", 19, 26, 193, 0], [1, "de", 19, 18, 201, 0], [1, "de", 19, 20, 199, 0], [1, "de", 19, 12, 196, 0], [1, "de", 19, 12, 204, 0], [1, "de", 19, 11, 201, 0], [1, "de", 19, 23, 208, 0], [1, "de", 19, 31, 214, 0], [1, "de", 19, 26, 215, 0], [1, "de", 19, 36, 217, 0], [1, "de", 19, 32, 223, 0], [1, "de", 19, 26, 223, 0], [1, "de", 19, 18, 218, 0], [1, "de", 19, 15, 215, 0], [1, "de", 19, 17, 212, 0], [1, "de", 19, 15, 224, 0], [1, "de", 19, 19, 229, 0], [1, "de", 19, 10, 230, 0], [1, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", 19, 13, 243, 0], [1, "de", 19, 24, 244, 0], [1, "de", 19, 24, 250, 0], [1, "de", 19, 28, 253, 0], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [1, "de", 19, 31, 260, 0], [1, "de", 19, 38, 267, 0], [1, "de", 19, 44, 264, 0], [1, "de", 19, 43, 261, 0], [1, "de", 19, 16, 257, 0], [1, "de", 19, 22, 258, 0], [1, "de", 19, 12, 253, 0], [1, "de", 19, 8, 242, 0], [1, "de", 19, 8, 255, 0], [1, "de", 19, 15, 264, 0], [1, "de", 19, 20, 265, 0], [1, "de", 19, 12, 271, 0], [1, "de", 19, 8, 272, 0], [1, "de", 19, 13, 277, 0], [1, "de", 19, 21, 277, 0], [1, "de", 19, 21, 281, 0], [1, "de", 19, 27, 282, 0], [1, "de", 19, 29, 278, 0], [1, "de", 19, 29, 273, 0], [1, "de", 19, 36, 271, 0], [1, "de", 19, 8, 278, 0], [1, "de", 19, 11, 286, 0], [1, "de", 19, 17, 291, 0], [1, "de", 19, 14, 294, 0], [1, "de", 19, 8, 292, 0], [1, "de", 19, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", 19, 16, 301, 0], [1, "de", 19, 27, 296, 0], [1, "de", 19, 25, 292, 0], [1, "de", 19, 23, 301, 0], [1, "de", 19, 28, 301, 0], [1, "de", 19, 35, 297, 0], [1, "de", 19, 37, 301, 0], [1, "de", 19, 43, 301, 0], [1, "de", 19, 46, 294, 0], [1, "de", 19, 46, 288, 0], [1, "de", 19, 40, 287, 0], [1, "de", 19, 50, 301, 0], [1, "de", 19, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", 19, 71, 301, 0], [1, "de", 19, 80, 301, 0], [1, "de", 19, 87, 301, 0], [1, "de", 19, 86, 294, 0], [1, "de", 19, 87, 290, 0], [1, "de", 19, 82, 286, 0], [1, "de", 19, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", 19, 66, 288, 0], [1, "de", 19, 58, 288, 0], [1, "de", 19, 67, 282, 0], [1, "de", 19, 61, 281, 0], [1, "de", 19, 60, 295, 0], [1, "de", 19, 50, 282, 0], [1, "de", 19, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", 19, 44, 277, 0], [1, "de", 19, 41, 282, 0], [1, "de", 19, 38, 281, 0], [1, "de", 19, 42, 288, 0], [1, "de", 19, 52, 281, 0], [1, "de", 19, 50, 275, 0], [1, "de", 19, 39, 277, 0], [1, "de", 19, 38, 284, 0], [1, "de", 19, 51, 285, 0], [1, "de", 19, 38, 278, 0], [1, "de", 19, 47, 272, 0], [1, "de", 19, 44, 267, 0], [1, "de", 19, 76, 280, 0], [1, "de", 19, 78, 272, 0], [1, "de", 19, 68, 275, 0], [1, "de", 19, 70, 265, 0], [1, "de", 19, 65, 263, 0], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, 0], [1, "de", 19, 56, 266, 0], [1, "de", 19, 55, 260, 0], [1, "de", 19, 59, 258, 0], [1, "de", 19, 62, 255, 0], [1, "de", 19, 67, 253, 0], [1, "de", 19, 69, 256, 0], [1, "de", 19, 44, 253, 0], [1, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, 0], [1, "de", 19, 39, 239, 0], [1, "de", 19, 42, 234, 0], [1, "de", 19, 37, 235, 0], [1, "de", 19, 45, 226, 0], [1, "de", 19, 46, 222, 0], [1, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, 0], [1, "de", 19, 76, 218, 0], [1, "de", 19, 84, 221, 0], [1, "de", 19, 88, 223, 0], [1, "de", 19, 76, 230, 0], [1, "de", 19, 86, 234, 0], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, 0], [1, "de", 19, 83, 247, 0], [1, "de", 19, 88, 247, 0], [1, "de", 19, 84, 254, 0], [1, "de", 19, 86, 251, 0], [1, "de", 19, 85, 260, 0], [1, "de", 19, 79, 260, 0], [1, "de", 19, 76, 251, 0], [1, "de", 19, 72, 251, 0], [1, "de", 19, 69, 251, 0], [1, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, 0], [1, "de", 19, 87, 271, 0], [1, "de", 19, 82, 277, 0], [1, "de", 19, 87, 284, 0], [1, "de", 19, 87, 237, 0], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, 0], [1, "de", 19, 34, 234, 0], [1, "de", 19, 27, 233, 0], [1, "de", 19, 37, 293, 0], [1, "de", 29, 13, 181, 0], [1, "de", 29, 8, 180, 0], [1, "de", 30, 13, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, 0], [1, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, 0], [1, "de", 30, 66, 188, 0], [1, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, 0], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [1, "de", 31, 82, 203, 0], [1, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [1, "de", 30, 88, 220, 0], [1, "de", 30, 78, 229, 0], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [1, "de", 30, 72, 208, 0], [1, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, 0], [1, "de", 29, 63, 210, 0], [1, "de", 29, 50, 204, 0], [1, "de", 30, 41, 205, 0], [1, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [1, "de", 30, 20, 201, 0], [1, "de", 29, 10, 203, 0], [1, "de", 29, 14, 196, 0], [1, "de", 29, 24, 187, 0], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, 0], [1, "de", 30, 28, 214, 0], [1, "de", 31, 24, 218, 0], [1, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [1, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, 0], [1, "de", 30, 58, 261, 0], [1, "de", 30, 73, 276, 0], [1, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, 0], [1, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, 0], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, 0], [1, "de", 29, 28, 296, 0], [1, "de", 29, 18, 292, 0], [1, "de", 29, 24, 284, 0], [1, "de", 30, 10, 295, 0], [1, "de", 30, 10, 286, 0], [1, "de", 30, 15, 279, 0], [1, "de", 30, 15, 269, 0], [1, "de", 30, 21, 259, 0], [1, "de", 30, 12, 256, 0], [1, "de", 30, 31, 245, 0], [1, "de", 30, 12, 240, 0], [1, "de", 30, 28, 235, 0], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [1, "r", 96, 262, 0], [1, "r", 97, 262, 0], [1, "r", 98, 262, 0], [1, "r", 97, 270, 0], [1, "r", 97, 271, 0], [1, "r", 97, 272, 0], [1, "r", 97, 273, 0], [1, "r", 97, 274, 0], [1, "r", 97, 275, 0], [1, "r", 97, 276, 0], [1, "r", 97, 277, 0], [1, "r", 97, 278, 0], [1, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [1, "r", 98, 273, 0], [1, "r", 98, 274, 0], [1, "r", 98, 275, 0], [1, "r", 98, 276, 0], [1, "r", 98, 277, 0], [1, "r", 98, 278, 0], [1, "r", 96, 283, 0], [1, "r", 97, 283, 0], [1, "r", 97, 284, 0], [1, "r", 97, 285, 0], [1, "r", 98, 283, 0], [1, "r", 98, 284, 0], [1, "r", 98, 285, 0], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, 0], [1, "r", 96, 274, 0], [1, "r", 96, 275, 0], [1, "r", 96, 276, 0], [1, "r", 96, 277, 0], [1, "r", 96, 278, 0], [1, "r", 44, 248, 0], [1, "de", 16, 94, 290, 0], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, 1], [1, "r", 94, 281, 1], [1, "r", 90, 281, 1], [1, "r", 91, 282, 1], [1, "r", 89, 281, 1], [1, "r", 85, 276, 1], [1, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", 0, 85, 279, 1], [1, "r", 86, 279, 1], [1, "r", 87, 280, 1], [1, "r", 96, 281, 0], [1, "r", 97, 281, 0], [1, "r", 98, 281, 0], [1, "r", 98, 282, 0], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [1, "r", 68, 261, 1], [1, "fo", 1, 94, 168, 0], [1, "fo", 2, 94, 151, 0], [1, "fo", 1, 94, 138, 0], [1, "fo", 1, 93, 124, 0], [1, "fo", 1, 94, 129, 0], [1, "fo", 1, 93, 113, 0], [1, "fo", 1, 94, 102, 0], [1, "fo", 1, 94, 93, 0], [1, "fo", 1, 93, 90, 0], [1, "fo", 1, 94, 79, 0], [1, "fo", 1, 94, 76, 0], [1, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", 1, 94, 53, 0], [1, "fo", 1, 93, 10, 0], [1, "fo", 1, 85, 8, 0], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, 13, 0], [1, "fo", 1, 69, 9, 0], [1, "fo", 2, 68, 14, 0], [1, "fo", 2, 66, 25, 0], [1, "fo", 2, 92, 9, 0], [1, "fo", 2, 94, 14, 0], [1, "fo", 2, 87, 9, 0], [1, "fo", 2, 71, 9, 0], [1, "fo", 2, 90, 12, 0], [1, "fo", 2, 91, 13, 0], [1, "fo", 1, 74, 12, 0], [1, "fo", 2, 72, 12, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, 15, 0], [1, "fo", 2, 84, 12, 0], [1, "fo", 2, 81, 14, 0], [1, "fo", 1, 84, 13, 0], [1, "fo", 1, 84, 19, 0], [1, "fo", 1, 11, 9, 0], [1, "fo", 1, 7, 14, 0], [1, "fo", 1, 8, 22, 0], [1, "fo", 1, 7, 34, 0], [1, "fo", 1, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [1, "fo", 2, 9, 21, 0], [1, "fo", 2, 31, 10, 0], [1, "fo", 2, 33, 27, 0], [1, "fo", 2, 9, 34, 0], [1, "fo", 2, 8, 19, 0], [1, "fo", 1, 14, 10, 0], [1, "fo", 2, 13, 9, 0], [1, "fo", 2, 15, 11, 0], [1, "fo", 2, 9, 9, 0], [1, "fo", 2, 9, 10, 0], [1, "fo", 2, 9, 15, 0], [1, "fo", 2, 10, 23, 0], [1, "fo", 2, 34, 29, 0], [1, "fo", 2, 27, 18, 0], [1, "fo", 2, 25, 21, 0], [1, "fo", 2, 20, 18, 0], [1, "fo", 2, 18, 21, 0], [1, "fo", 2, 29, 9, 0], [1, "fo", 2, 13, 14, 0], [1, "fo", 2, 9, 38, 0], [1, "fo", 2, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [1, "fo", 2, 77, 25, 0], [1, "fo", 2, 86, 35, 0], [1, "fo", 1, 70, 35, 0], [1, "fo", 2, 72, 36, 0], [1, "fo", 2, 73, 31, 0], [1, "fo", 2, 89, 39, 0], [1, "fo", 2, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, 0], [1, "de", 22, 17, 206, 0], [1, "de", 19, 8, 184, 0], [1, "de", 19, 22, 183, 0], [1, "de", 19, 35, 188, 0], [1, "de", 19, 36, 192, 0], [1, "de", 19, 50, 277, 0], [1, "de", 19, 35, 279, 0], [1, "t", 4, 7, 178, 0], [1, "t", 1, 7, 179, 0], [1, "t", 3, 7, 180, 0], [1, "t", 2, 7, 181, 0], [1, "t", 5, 7, 182, 0], [1, "t", 4, 7, 183, 0], [1, "t", 3, 7, 184, 0], [1, "t", 4, 7, 185, 0], [1, "t", 2, 7, 186, 0], [1, "t", 1, 7, 187, 0], [1, "t", 4, 7, 188, 0], [1, "t", 3, 7, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, 7, 191, 0], [1, "t", 3, 7, 192, 0], [1, "t", 4, 7, 193, 0], [1, "t", 3, 7, 194, 0], [1, "t", 5, 7, 195, 0], [1, "t", 2, 7, 196, 0], [1, "t", 4, 7, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", 4, 7, 199, 0], [1, "t", 2, 7, 200, 0], [1, "t", 5, 7, 201, 0], [1, "t", 2, 7, 202, 0], [1, "t", 4, 7, 203, 0], [1, "t", 2, 7, 204, 0], [1, "t", 5, 7, 205, 0], [1, "t", 2, 7, 206, 0], [1, "t", 1, 7, 207, 0], [1, "t", 4, 7, 208, 0], [1, "t", 3, 7, 209, 0], [1, "t", 1, 7, 210, 0], [1, "b", 0, 7, 211, 0], [1, "t", 3, 7, 212, 0], [1, "t", 4, 7, 213, 0], [1, "t", 3, 7, 214, 0], [1, "t", 5, 7, 215, 0], [1, "t", 5, 7, 216, 0], [1, "t", 3, 7, 217, 0], [1, "t", 1, 7, 218, 0], [1, "t", 4, 7, 219, 0], [1, "b", 2, 7, 220, 0], [1, "t", 1, 7, 221, 0], [1, "t", 2, 7, 222, 0], [1, "t", 4, 7, 223, 0], [1, "t", 3, 7, 224, 0], [1, "t", 1, 7, 225, 0], [1, "t", 4, 7, 226, 0], [1, "t", 2, 7, 227, 0], [1, "t", 5, 7, 228, 0], [1, "t", 3, 7, 229, 0], [1, "t", 1, 7, 230, 0], [1, "t", 4, 7, 231, 0], [1, "b", 2, 7, 232, 0], [1, "t", 5, 7, 233, 0], [1, "t", 1, 7, 234, 0], [1, "t", 3, 7, 235, 0], [1, "t", 4, 7, 236, 0], [1, "t", 2, 7, 237, 0], [1, "t", 5, 7, 238, 0], [1, "b", 3, 7, 239, 0], [1, "t", 2, 7, 240, 0], [1, "t", 1, 7, 241, 0], [1, "t", 2, 7, 242, 0], [1, "t", 4, 7, 243, 0], [1, "t", 3, 7, 244, 0], [1, "t", 4, 7, 245, 0], [1, "t", 1, 7, 246, 0], [1, "b", 0, 7, 247, 0], [1, "t", 3, 7, 248, 0], [1, "t", 5, 7, 249, 0], [1, "t", 2, 7, 250, 0], [1, "t", 1, 7, 251, 0], [1, "t", 4, 7, 252, 0], [1, "t", 3, 7, 253, 0], [1, "t", 5, 7, 254, 0], [1, "t", 1, 7, 255, 0], [1, "t", 4, 7, 256, 0], [1, "t", 1, 7, 257, 0], [1, "t", 2, 7, 258, 0], [1, "t", 5, 7, 260, 0], [1, "t", 3, 7, 259, 0], [1, "t", 1, 7, 261, 0], [1, "t", 3, 7, 262, 0], [1, "t", 4, 7, 263, 0], [1, "t", 1, 7, 264, 0], [1, "t", 2, 7, 265, 0], [1, "t", 5, 7, 266, 0], [1, "t", 2, 7, 267, 0], [1, "t", 2, 7, 269, 0], [1, "b", 2, 7, 268, 0], [1, "t", 4, 7, 270, 0], [1, "t", 1, 7, 271, 0], [1, "t", 5, 7, 272, 0], [1, "b", 2, 7, 273, 0], [1, "t", 4, 7, 274, 0], [1, "t", 2, 7, 275, 0], [1, "t", 5, 7, 276, 0], [1, "t", 5, 7, 277, 0], [1, "t", 2, 7, 278, 0], [1, "t", 1, 7, 279, 0], [1, "t", 4, 7, 280, 0], [1, "b", 1, 7, 281, 0], [1, "t", 3, 7, 282, 0], [1, "t", 4, 7, 283, 0], [1, "t", 1, 7, 284, 0], [1, "t", 3, 7, 285, 0], [1, "t", 5, 7, 286, 0], [1, "t", 4, 7, 288, 0], [1, "t", 2, 7, 287, 0], [1, "b", 0, 7, 289, 0], [1, "t", 4, 7, 290, 0], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, 0], [1, "t", 3, 7, 293, 0], [1, "t", 1, 7, 294, 0], [1, "t", 4, 7, 295, 0], [1, "t", 3, 7, 296, 0], [1, "t", 1, 7, 297, 0], [1, "t", 4, 7, 298, 0], [1, "t", 2, 7, 299, 0], [1, "b", 0, 7, 300, 0], [1, "t", 2, 7, 301, 0], [1, "r", 196, 271, 0], [1, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [1, "r", 189, 207, 0], [1, "r", 192, 209, 0], [1, "r", 198, 271, 0], [1, "r", 197, 271, 0], [1, "r", 198, 272, 0], [1, "r", 197, 272, 0], [1, "r", 196, 272, 0], [1, "r", 195, 272, 0], [1, "r", 199, 272, 0], [1, "r", 199, 273, 0], [1, "r", 198, 273, 0], [1, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [1, "r", 197, 274, 0], [1, "r", 195, 273, 0], [1, "r", 196, 274, 0], [1, "r", 198, 275, 0], [1, "r", 197, 275, 0], [1, "r", 200, 274, 0], [1, "r", 200, 273, 0], [1, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, 0], [1, "plm", 0, 199, 268, 0], [1, "plm", 0, 193, 277, 0], [1, "plm", 1, 199, 276, 0], [1, "s", 1, 200, 275, 1], [1, "s", 1, 194, 272, 1], [1, "s", 2, 193, 270, 1], [1, "g", 2, 193, 273, 1], [1, "g", 2, 201, 267, 1], [1, "m", 2, 220, 298, 1], [1, "m", 1, 219, 292, 1], [1, "m", 1, 214, 297, 1], [1, "r", 168, 238, 0], [1, "r", 169, 238, 0], [1, "r", 170, 238, 0], [1, "r", 171, 239, 0], [1, "r", 170, 239, 0], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, 0], [1, "r", 166, 239, 0], [1, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, 0], [1, "r", 169, 240, 0], [1, "r", 170, 240, 0], [1, "r", 168, 241, 0], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, 0], [1, "plm", 2, 171, 238, 0], [1, "plm", 1, 166, 238, 0], [1, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, 0], [1, "plm", 0, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, 0], [1, "s", 1, 165, 239, 1], [1, "s", 1, 172, 241, 1], [1, "s", 0, 170, 237, 1], [1, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", 2, 162, 241, 1], [1, "s", 2, 170, 246, 1], [1, "s", 2, 167, 235, 1], [1, "s", 2, 176, 243, 1], [1, "r", 190, 207, 0], [1, "r", 191, 207, 0], [1, "r", 192, 208, 0], [1, "r", 191, 208, 0], [1, "r", 190, 208, 0], [1, "r", 189, 208, 0], [1, "r", 188, 208, 0], [1, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [1, "r", 188, 209, 0], [1, "r", 190, 210, 0], [1, "r", 191, 210, 0], [1, "r", 192, 210, 0], [1, "plm", 2, 189, 210, 0], [1, "plm", 2, 192, 205, 0], [1, "plm", 1, 192, 207, 0], [1, "plm", 0, 193, 210, 0], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [1, "plm", 0, 191, 213, 0], [1, "plm", 0, 190, 204, 0], [1, "s", 1, 188, 207, 1], [1, "s", 1, 190, 211, 1], [1, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [1, "s", 0, 194, 210, 1], [1, "s", 0, 198, 207, 1], [1, "s", 1, 193, 204, 1], [1, "s", 1, 193, 213, 1], [1, "s", 2, 198, 212, 1], [1, "s", 2, 182, 208, 1], [1, "s", 1, 204, 271, 1], [1, "s", 0, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", 0, 195, 265, 1], [1, "s", 2, 196, 264, 1], [1, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", 0, 217, 282, 1], [1, "s", 1, 214, 285, 1], [1, "s", 1, 214, 274, 1], [1, "s", 1, 203, 282, 1], [1, "s", 1, 205, 290, 1], [1, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, 1], [1, "s", 2, 213, 289, 1], [1, "s", 2, 196, 294, 1], [1, "s", 2, 187, 286, 1], [1, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", 0, 213, 273, 1], [1, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [1, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, 1], [1, "s", 0, 167, 281, 1], [1, "s", 0, 175, 263, 1], [1, "s", 1, 176, 293, 1], [1, "s", 1, 163, 285, 1], [1, "s", 1, 177, 266, 1], [1, "s", 1, 161, 272, 1], [1, "s", 2, 185, 261, 1], [1, "c", 0, 217, 270, 1], [1, "c", 0, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", 0, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, 1], [1, "c", 0, 208, 283, 1], [1, "c", 0, 197, 283, 1], [1, "c", 0, 190, 289, 1], [1, "c", 0, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, 1], [1, "c", 0, 208, 265, 1], [1, "c", 0, 169, 292, 1], [1, "s", 1, 158, 294, 1], [1, "s", 0, 151, 297, 1], [1, "s", 0, 147, 288, 1], [1, "c", 0, 150, 289, 1], [1, "c", 0, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, 1], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [1, "g", 1, 197, 248, 1], [1, "g", 2, 170, 255, 1], [1, "g", 2, 212, 234, 1], [1, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, 1], [1, "g", 1, 210, 214, 1], [1, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, 1], [1, "s", 0, 184, 248, 1], [1, "s", 0, 212, 254, 1], [1, "s", 1, 203, 249, 1], [1, "s", 2, 204, 252, 1], [1, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, 1], [1, "s", 0, 181, 228, 1], [1, "s", 1, 199, 227, 1], [1, "s", 1, 208, 238, 1], [1, "s", 1, 179, 222, 1], [1, "s", 1, 213, 223, 1], [1, "s", 2, 182, 222, 1], [1, "s", 2, 211, 226, 1], [1, "s", 2, 214, 214, 1], [1, "s", 2, 201, 216, 1], [1, "s", 2, 215, 192, 1], [1, "s", 1, 210, 198, 1], [1, "s", 1, 198, 196, 1], [1, "s", 2, 208, 199, 1], [1, "s", 2, 187, 192, 1], [1, "s", 1, 179, 198, 1], [1, "s", 2, 177, 197, 1], [1, "s", 0, 164, 197, 1], [1, "s", 1, 159, 193, 1], [1, "s", 1, 149, 206, 1], [1, "s", 1, 164, 209, 1], [1, "s", 2, 165, 210, 1], [1, "s", 2, 161, 191, 1], [1, "s", 1, 162, 224, 1], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, 1], [1, "s", 2, 153, 236, 1], [1, "s", 2, 160, 223, 1], [1, "s", 2, 151, 207, 1], [1, "s", 2, 147, 220, 1], [1, "s", 2, 145, 265, 1], [1, "s", 2, 145, 285, 1], [1, "c", 0, 152, 266, 1], [1, "c", 0, 185, 271, 1], [1, "c", 0, 210, 254, 1], [1, "c", 0, 209, 256, 1], [1, "c", 0, 198, 254, 1], [1, "c", 0, 213, 246, 1], [1, "c", 0, 216, 237, 1], [1, "c", 0, 204, 240, 1], [1, "c", 0, 196, 234, 1], [1, "c", 0, 188, 238, 1], [1, "c", 0, 182, 245, 1], [1, "c", 0, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", 0, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", 0, 157, 214, 1], [1, "c", 0, 167, 219, 1], [1, "c", 0, 171, 208, 1], [1, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [1, "c", 0, 195, 221, 1], [1, "c", 0, 207, 222, 1], [1, "c", 0, 214, 207, 1], [1, "c", 0, 205, 210, 1], [1, "c", 0, 204, 196, 1], [1, "c", 0, 214, 196, 1], [1, "c", 0, 190, 199, 1], [1, "c", 0, 184, 194, 1], [1, "c", 0, 172, 199, 1], [1, "c", 0, 161, 204, 1], [1, "c", 0, 157, 196, 1], [1, "c", 0, 149, 194, 1], [1, "c", 0, 147, 208, 1], [1, "c", 0, 207, 274, 1], [1, "c", 0, 217, 258, 1], [1, "c", 0, 201, 260, 1], [1, "c", 0, 178, 276, 1], [1, "c", 0, 187, 265, 1], [1, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, 1], [1, "s", 1, 187, 255, 1], [1, "s", 2, 189, 254, 1], [1, "s", 2, 212, 257, 1], [1, "s", 2, 182, 286, 1], [1, "s", 2, 169, 280, 1], [1, "s", 2, 217, 273, 1], [1, "s", 2, 215, 282, 1], [1, "s", 2, 172, 263, 1], [1, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [1, "fod", 1, 221, 282, 0], [1, "fod", 1, 222, 284, 0], [1, "fod", 1, 221, 290, 0], [1, "fod", 1, 222, 294, 0], [1, "fod", 1, 221, 297, 0], [1, "fod", 1, 223, 298, 0], [1, "fod", 1, 222, 300, 0], [1, "fod", 1, 218, 301, 0], [1, "fod", 1, 217, 299, 0], [1, "fod", 1, 215, 301, 0], [1, "fod", 1, 212, 300, 0], [1, "fod", 1, 206, 300, 0], [1, "fod", 1, 209, 301, 0], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [1, "fod", 1, 199, 301, 0], [1, "fod", 1, 222, 282, 0], [1, "fod", 1, 207, 301, 0], [1, "fod", 1, 197, 301, 0], [1, "fod", 1, 215, 291, 0], [1, "fod", 1, 216, 286, 0], [1, "fod", 1, 214, 292, 0], [1, "fod", 1, 210, 289, 0], [1, "fod", 1, 208, 294, 0], [1, "fod", 1, 210, 298, 0], [1, "fod", 1, 212, 281, 0], [1, "fod", 1, 219, 278, 0], [1, "fod", 1, 219, 282, 0], [1, "fod", 1, 205, 286, 0], [1, "fod", 1, 202, 293, 0], [1, "fod", 1, 198, 295, 0], [1, "fod", 2, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [1, "fod", 2, 216, 289, 0], [1, "fod", 2, 219, 289, 0], [1, "fod", 2, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [1, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, 0], [1, "fod", 2, 208, 290, 0], [1, "fod", 2, 211, 296, 0], [1, "fod", 2, 215, 294, 0], [1, "fod", 2, 212, 298, 0], [1, "fod", 2, 203, 294, 0], [1, "fod", 2, 204, 288, 0], [1, "fod", 2, 200, 294, 0], [1, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [1, "fod", 2, 200, 299, 0], [1, "fod", 2, 220, 300, 0], [1, "fod", 2, 220, 295, 0], [1, "fod", 2, 220, 292, 0], [1, "fod", 2, 219, 287, 0], [1, "fod", 2, 211, 288, 0], [1, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, 0], [1, "fod", 2, 212, 290, 0], [1, "fod", 2, 195, 296, 0], [1, "fod", 2, 196, 299, 0], [1, "fod", 2, 194, 300, 0], [1, "fod", 2, 195, 300, 0], [1, "fod", 2, 213, 279, 0], [1, "fod", 2, 211, 279, 0], [1, "fod", 0, 218, 290, 0], [1, "fod", 0, 212, 294, 0], [1, "fod", 1, 213, 295, 0], [1, "fod", 1, 217, 292, 0], [1, "fod", 1, 218, 288, 0], [1, "fod", 1, 210, 295, 0], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, 0], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [1, "fod", 2, 209, 299, 0], [1, "fod", 2, 211, 291, 0], [1, "fod", 1, 203, 275, 0], [1, "fod", 1, 204, 272, 0], [1, "fod", 2, 205, 273, 0], [1, "fod", 2, 204, 276, 0], [1, "fod", 2, 202, 276, 0], [1, "fod", 2, 199, 277, 0], [1, "fod", 2, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [1, "fod", 1, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [1, "fod", 2, 194, 265, 0], [1, "fod", 2, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [1, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [1, "fod", 1, 162, 235, 0], [1, "fod", 2, 169, 236, 0], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", 2, 173, 241, 0], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, 0], [1, "fod", 2, 169, 244, 0], [1, "fod", 2, 166, 243, 0], [1, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, 0], [1, "fod", 2, 162, 233, 0], [1, "fod", 2, 163, 236, 0], [1, "fod", 2, 174, 242, 0], [1, "fod", 2, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [1, "fod", 1, 190, 214, 0], [1, "fod", 1, 186, 206, 0], [1, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, 0], [1, "fod", 2, 198, 208, 0], [1, "fod", 2, 194, 204, 0], [1, "fod", 2, 187, 206, 0], [1, "fod", 2, 186, 204, 0], [1, "fod", 2, 189, 214, 0], [1, "fod", 2, 189, 213, 0], [1, "fod", 2, 193, 215, 0], [1, "fod", 2, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [1, "fod", 2, 193, 209, 0], [1, "fod", 2, 189, 211, 0], [1, "fod", 2, 187, 209, 0], [1, "fod", 2, 187, 207, 0], [1, "fod", 2, 191, 205, 0], [1, "fod", 2, 189, 203, 0], [1, "cs", 2, 224, 176, 1], [1, "cs", 0, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", 2, 224, 179, 1], [1, "cs", 1, 224, 180, 1], [1, "cs", 2, 224, 181, 1], [1, "cs", 0, 224, 182, 1], [1, "cs", 2, 224, 183, 1], [1, "cs", 0, 224, 184, 1], [1, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, 1], [1, "cs", 0, 224, 187, 1], [1, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, 1], [1, "cs", 1, 224, 190, 1], [1, "cs", 2, 224, 191, 1], [1, "cs", 0, 224, 192, 1], [1, "cs", 2, 224, 193, 1], [1, "cs", 2, 224, 194, 1], [1, "cs", 1, 224, 195, 1], [1, "cs", 2, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [1, "cs", 2, 224, 199, 1], [1, "cs", 1, 224, 200, 1], [1, "cs", 2, 224, 201, 1], [1, "cs", 3, 224, 202, 1], [1, "cs", 0, 224, 203, 1], [1, "cs", 1, 224, 204, 1], [1, "cs", 2, 224, 205, 1], [1, "cs", 0, 224, 206, 1], [1, "cs", 1, 224, 207, 1], [1, "cs", 3, 224, 208, 1], [1, "cs", 2, 224, 209, 1], [1, "cs", 2, 224, 210, 1], [1, "cs", 0, 223, 211, 1], [1, "cs", 1, 224, 211, 1], [1, "cs", 2, 224, 212, 1], [1, "cs", 2, 224, 213, 1], [1, "cs", 1, 224, 214, 1], [1, "cs", 3, 224, 215, 1], [1, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, 1], [1, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", 0, 223, 215, 1], [1, "cs", 2, 223, 214, 1], [1, "cs", 2, 223, 212, 1], [1, "cs", 2, 223, 216, 1], [1, "cs", 3, 223, 217, 1], [1, "cs", 0, 223, 218, 1], [1, "cs", 0, 224, 220, 1], [1, "cs", 0, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, 1], [1, "cs", 2, 224, 221, 1], [1, "cs", 2, 223, 219, 1], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", 2, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, 1], [1, "cs", 3, 223, 181, 1], [1, "cs", 3, 223, 182, 1], [1, "cs", 1, 223, 185, 1], [1, "cs", 2, 223, 184, 1], [1, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, 1], [1, "cs", 0, 223, 183, 1], [1, "cs", 2, 223, 187, 1], [1, "cs", 1, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [1, "cs", 2, 223, 190, 1], [1, "cs", 3, 223, 191, 1], [1, "cs", 1, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", 3, 223, 195, 1], [1, "cs", 1, 223, 196, 1], [1, "cs", 2, 223, 197, 1], [1, "cs", 2, 223, 199, 1], [1, "cs", 2, 223, 198, 1], [1, "cs", 0, 223, 200, 1], [1, "cs", 2, 223, 201, 1], [1, "cs", 0, 223, 202, 1], [1, "cs", 3, 223, 203, 1], [1, "cs", 3, 223, 204, 1], [1, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, 1], [1, "cs", 3, 223, 208, 1], [1, "cs", 2, 223, 221, 1], [1, "cs", 2, 223, 222, 1], [1, "cs", 0, 223, 224, 1], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, 1], [1, "cs", 0, 223, 234, 1], [1, "cs", 2, 223, 223, 1], [1, "cs", 2, 224, 223, 1], [1, "cs", 2, 224, 224, 1], [1, "cs", 2, 224, 225, 1], [1, "cs", 1, 223, 226, 1], [1, "cs", 1, 224, 231, 1], [1, "cs", 1, 223, 232, 1], [1, "cs", 3, 223, 225, 1], [1, "cs", 3, 224, 226, 1], [1, "cs", 3, 223, 227, 1], [1, "cs", 3, 224, 227, 1], [1, "cs", 3, 223, 229, 1], [1, "cs", 3, 223, 228, 1], [1, "cs", 3, 224, 229, 1], [1, "cs", 3, 223, 230, 1], [1, "cs", 3, 223, 231, 1], [1, "cs", 3, 224, 232, 1], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", 3, 224, 234, 1], [1, "cs", 3, 224, 235, 1], [1, "cs", 3, 223, 235, 1], [1, "cs", 1, 224, 236, 1], [1, "cs", 2, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [1, "cs", 3, 224, 238, 1], [1, "cs", 0, 224, 239, 1], [1, "cs", 1, 223, 241, 1], [1, "cs", 0, 224, 243, 1], [1, "cs", 0, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, 1], [1, "cs", 2, 223, 239, 1], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, 1], [1, "cs", 2, 224, 242, 1], [1, "cs", 2, 223, 242, 1], [1, "cs", 2, 223, 243, 1], [1, "cs", 2, 223, 244, 1], [1, "cs", 2, 224, 244, 1], [1, "cs", 2, 224, 245, 1], [1, "cs", 2, 224, 246, 1], [1, "cs", 3, 223, 238, 1], [1, "cs", 3, 223, 246, 1], [1, "cs", 2, 223, 247, 1], [1, "cs", 1, 223, 249, 1], [1, "cs", 1, 224, 253, 1], [1, "cs", 1, 223, 256, 1], [1, "cs", 0, 223, 254, 1], [1, "cs", 0, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [1, "cs", 3, 223, 250, 1], [1, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, 255, 1], [1, "cs", 3, 223, 257, 1], [1, "cs", 2, 224, 248, 1], [1, "cs", 2, 224, 249, 1], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, 1], [1, "cs", 2, 223, 253, 1], [1, "cs", 2, 224, 254, 1], [1, "cs", 2, 224, 255, 1], [1, "cs", 2, 224, 256, 1], [1, "cs", 2, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [1, "cs", 0, 223, 261, 1], [1, "cs", 0, 224, 263, 1], [1, "cs", 0, 224, 266, 1], [1, "cs", 0, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [1, "cs", 0, 223, 275, 1], [1, "cs", 1, 223, 259, 1], [1, "cs", 1, 223, 264, 1], [1, "cs", 1, 223, 268, 1], [1, "cs", 1, 224, 274, 1], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, 1], [1, "cs", 2, 223, 265, 1], [1, "cs", 2, 223, 267, 1], [1, "cs", 2, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", 3, 223, 262, 1], [1, "cs", 3, 223, 266, 1], [1, "cs", 3, 223, 269, 1], [1, "cs", 3, 223, 272, 1], [1, "cs", 3, 223, 274, 1], [1, "cs", 3, 224, 275, 1], [1, "cs", 3, 224, 273, 1], [1, "cs", 3, 224, 271, 1], [1, "cs", 3, 224, 270, 1], [1, "cs", 3, 224, 269, 1], [1, "cs", 3, 224, 268, 1], [1, "cs", 3, 224, 267, 1], [1, "cs", 3, 224, 265, 1], [1, "cs", 3, 224, 264, 1], [1, "cs", 3, 224, 262, 1], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [1, "cs", 3, 224, 259, 1], [1, "cs", 2, 223, 276, 1], [1, "cs", 1, 224, 276, 1], [1, "cs", 1, 224, 280, 1], [1, "cs", 1, 223, 281, 1], [1, "cs", 1, 224, 286, 1], [1, "cs", 0, 223, 280, 1], [1, "cs", 0, 223, 284, 1], [1, "cs", 0, 224, 288, 1], [1, "cs", 0, 224, 279, 1], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, 1], [1, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [1, "cs", 2, 224, 284, 1], [1, "cs", 2, 224, 285, 1], [1, "cs", 2, 224, 287, 1], [1, "cs", 2, 223, 287, 1], [1, "cs", 2, 223, 285, 1], [1, "cs", 2, 223, 283, 1], [1, "cs", 2, 223, 279, 1], [1, "cs", 3, 223, 278, 1], [1, "cs", 3, 223, 282, 1], [1, "cs", 3, 223, 286, 1], [1, "cs", 3, 223, 289, 1], [1, "cs", 3, 224, 289, 1], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", 0, 224, 292, 1], [1, "cs", 0, 223, 294, 1], [1, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, 1], [1, "cs", 2, 223, 291, 1], [1, "cs", 2, 224, 291, 1], [1, "cs", 2, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, 1], [1, "cs", 2, 224, 294, 1], [1, "cs", 1, 224, 295, 1], [1, "cs", 2, 223, 295, 1], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, 1], [1, "cs", 2, 223, 297, 1], [1, "cs", 2, 223, 298, 1], [1, "cs", 2, 224, 298, 1], [1, "cs", 2, 224, 299, 1], [1, "cs", 2, 223, 300, 1], [1, "cs", 1, 224, 300, 1], [1, "cs", 0, 223, 301, 1], [1, "cs", 0, 224, 302, 1], [1, "cs", 0, 224, 304, 1], [1, "cs", 3, 224, 301, 1], [1, "cs", 3, 224, 303, 1], [1, "cs", 0, 221, 303, 1], [1, "cs", 0, 219, 304, 1], [1, "cs", 1, 222, 304, 1], [1, "cs", 1, 222, 302, 1], [1, "cs", 2, 223, 302, 1], [1, "cs", 2, 223, 303, 1], [1, "cs", 2, 222, 303, 1], [1, "cs", 2, 223, 304, 1], [1, "cs", 2, 221, 304, 1], [1, "cs", 2, 220, 304, 1], [1, "cs", 2, 220, 303, 1], [1, "cs", 2, 220, 302, 1], [1, "cs", 2, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", 0, 217, 302, 1], [1, "cs", 0, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [1, "cs", 1, 218, 302, 1], [1, "cs", 1, 217, 304, 1], [1, "cs", 1, 215, 302, 1], [1, "cs", 2, 219, 302, 1], [1, "cs", 2, 218, 303, 1], [1, "cs", 2, 218, 304, 1], [1, "cs", 2, 217, 303, 1], [1, "cs", 2, 216, 304, 1], [1, "cs", 2, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [1, "cs", 2, 214, 304, 1], [1, "cs", 0, 212, 302, 1], [1, "cs", 0, 210, 303, 1], [1, "cs", 0, 212, 304, 1], [1, "cs", 0, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [1, "cs", 1, 208, 303, 1], [1, "cs", 2, 213, 302, 1], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, 1], [1, "cs", 2, 212, 303, 1], [1, "cs", 2, 211, 304, 1], [1, "cs", 2, 211, 303, 1], [1, "cs", 2, 211, 302, 1], [1, "cs", 2, 209, 302, 1], [1, "cs", 2, 209, 303, 1], [1, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [1, "cs", 2, 208, 302, 1], [1, "cs", 0, 206, 303, 1], [1, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, 1], [1, "cs", 0, 195, 304, 1], [1, "cs", 0, 191, 303, 1], [1, "cs", 0, 193, 304, 1], [1, "cs", 0, 189, 304, 1], [1, "cs", 1, 204, 303, 1], [1, "cs", 0, 197, 302, 1], [1, "cs", 0, 202, 302, 1], [1, "cs", 0, 188, 302, 1], [1, "cs", 0, 194, 302, 1], [1, "cs", 1, 197, 303, 1], [1, "cs", 1, 201, 304, 1], [1, "cs", 1, 192, 302, 1], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [1, "cs", 1, 188, 304, 1], [1, "cs", 2, 207, 302, 1], [1, "cs", 2, 207, 303, 1], [1, "cs", 2, 207, 304, 1], [1, "cs", 2, 206, 304, 1], [1, "cs", 2, 206, 302, 1], [1, "cs", 2, 205, 303, 1], [1, "cs", 2, 204, 304, 1], [1, "cs", 2, 205, 304, 1], [1, "cs", 2, 204, 302, 1], [1, "cs", 2, 203, 302, 1], [1, "cs", 2, 203, 303, 1], [1, "cs", 2, 202, 303, 1], [1, "cs", 2, 201, 303, 1], [1, "cs", 2, 201, 302, 1], [1, "cs", 2, 200, 302, 1], [1, "cs", 2, 199, 302, 1], [1, "cs", 2, 198, 303, 1], [1, "cs", 2, 198, 302, 1], [1, "cs", 2, 199, 303, 1], [1, "cs", 2, 200, 304, 1], [1, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", 2, 198, 304, 1], [1, "cs", 2, 196, 304, 1], [1, "cs", 2, 196, 303, 1], [1, "cs", 2, 196, 302, 1], [1, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", 2, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [1, "cs", 2, 193, 303, 1], [1, "cs", 2, 193, 302, 1], [1, "cs", 2, 192, 303, 1], [1, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, 1], [1, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, 1], [1, "cs", 2, 189, 302, 1], [1, "cs", 2, 190, 302, 1], [1, "cs", 2, 191, 302, 1], [1, "cs", 2, 188, 303, 1], [1, "cs", 0, 186, 303, 1], [1, "cs", 0, 183, 304, 1], [1, "cs", 0, 184, 302, 1], [1, "cs", 0, 181, 302, 1], [1, "cs", 0, 176, 302, 1], [1, "cs", 0, 178, 303, 1], [1, "cs", 0, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", 0, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [1, "cs", 1, 173, 302, 1], [1, "cs", 1, 185, 304, 1], [1, "cs", 1, 169, 304, 1], [1, "cs", 3, 187, 304, 1], [1, "cs", 3, 186, 304, 1], [1, "cs", 3, 187, 303, 1], [1, "cs", 3, 187, 302, 1], [1, "cs", 3, 186, 302, 1], [1, "cs", 3, 185, 302, 1], [1, "cs", 3, 185, 303, 1], [1, "cs", 3, 184, 303, 1], [1, "cs", 3, 183, 303, 1], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [1, "cs", 3, 184, 304, 1], [1, "cs", 3, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [1, "cs", 3, 179, 304, 1], [1, "cs", 3, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", 3, 180, 302, 1], [1, "cs", 3, 179, 302, 1], [1, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, 1], [1, "cs", 3, 177, 304, 1], [1, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, 1], [1, "cs", 3, 175, 303, 1], [1, "cs", 3, 174, 303, 1], [1, "cs", 3, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [1, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", 3, 174, 302, 1], [1, "cs", 3, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", 3, 169, 302, 1], [1, "cs", 3, 169, 303, 1], [1, "cs", 0, 168, 302, 1], [1, "cs", 0, 166, 303, 1], [1, "cs", 0, 163, 304, 1], [1, "cs", 0, 161, 302, 1], [1, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [1, "cs", 0, 155, 303, 1], [1, "cs", 1, 164, 303, 1], [1, "cs", 1, 162, 303, 1], [1, "cs", 1, 158, 304, 1], [1, "cs", 1, 156, 302, 1], [1, "cs", 1, 153, 302, 1], [1, "cs", 1, 154, 304, 1], [1, "cs", 2, 168, 304, 1], [1, "cs", 2, 168, 303, 1], [1, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", 2, 166, 304, 1], [1, "cs", 2, 165, 304, 1], [1, "cs", 2, 164, 304, 1], [1, "cs", 2, 165, 303, 1], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, 1], [1, "cs", 2, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", 2, 163, 302, 1], [1, "cs", 2, 162, 302, 1], [1, "cs", 2, 163, 303, 1], [1, "cs", 2, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", 2, 159, 304, 1], [1, "cs", 2, 161, 304, 1], [1, "cs", 2, 161, 303, 1], [1, "cs", 2, 160, 303, 1], [1, "cs", 2, 160, 302, 1], [1, "cs", 2, 158, 302, 1], [1, "cs", 2, 159, 302, 1], [1, "cs", 2, 157, 302, 1], [1, "cs", 2, 156, 303, 1], [1, "cs", 2, 157, 303, 1], [1, "cs", 2, 158, 303, 1], [1, "cs", 2, 157, 304, 1], [1, "cs", 2, 156, 304, 1], [1, "cs", 2, 155, 304, 1], [1, "cs", 2, 153, 304, 1], [1, "cs", 2, 153, 303, 1], [1, "cs", 2, 154, 303, 1], [1, "cs", 2, 154, 302, 1], [1, "cs", 2, 155, 302, 1], [1, "cs", 2, 152, 303, 1], [1, "cs", 2, 152, 302, 1], [1, "cs", 0, 151, 302, 1], [1, "cs", 0, 149, 303, 1], [1, "cs", 0, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [1, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", 1, 147, 304, 1], [1, "cs", 1, 145, 302, 1], [1, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, 1], [1, "cs", 2, 151, 304, 1], [1, "cs", 2, 151, 303, 1], [1, "cs", 2, 150, 303, 1], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, 1], [1, "cs", 2, 146, 302, 1], [1, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, 1], [1, "cs", 2, 142, 303, 1], [1, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [1, "cs", 2, 148, 303, 1], [1, "cs", 2, 146, 303, 1], [1, "cs", 2, 145, 303, 1], [1, "cs", 2, 147, 303, 1], [1, "cs", 2, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [1, "cs", 3, 149, 302, 1], [1, "cs", 3, 143, 302, 1], [1, "cs", 0, 139, 304, 1], [1, "cs", 0, 138, 302, 1], [1, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", 2, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [1, "cs", 2, 138, 304, 1], [1, "cs", 2, 140, 304, 1], [1, "cs", 0, 137, 304, 1], [1, "cs", 0, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", 1, 135, 304, 1], [1, "cs", 1, 136, 302, 1], [1, "cs", 2, 137, 302, 1], [1, "cs", 2, 136, 303, 1], [1, "cs", 2, 137, 303, 1], [1, "cs", 2, 136, 304, 1], [1, "cs", 2, 134, 304, 1], [1, "cs", 2, 134, 303, 1], [1, "cs", 2, 133, 303, 1], [1, "cs", 2, 132, 304, 1], [1, "cs", 0, 131, 302, 1], [1, "cs", 0, 134, 302, 1], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", 2, 135, 302, 1], [1, "cs", 2, 133, 302, 1], [1, "cs", 2, 132, 303, 1], [1, "cs", 2, 131, 303, 1], [1, "cs", 2, 130, 304, 1], [1, "cs", 2, 131, 304, 1], [1, "cs", 2, 128, 304, 1], [1, "cs", 2, 129, 303, 1], [1, "cs", 2, 130, 302, 1], [1, "cs", 3, 127, 304, 1], [1, "cs", 2, 132, 301, 1], [1, "cs", 2, 133, 301, 1], [1, "cs", 2, 134, 301, 1], [1, "cs", 2, 135, 301, 1], [1, "cs", 3, 131, 301, 1], [1, "cs", 3, 136, 301, 1], [1, "cs", 3, 136, 178, 1], [1, "cs", 0, 136, 183, 1], [1, "cs", 2, 136, 182, 1], [1, "cs", 1, 136, 181, 1], [1, "cs", 0, 136, 179, 1], [1, "cs", 3, 136, 180, 1], [1, "cs", 2, 135, 183, 1], [1, "cs", 1, 135, 182, 1], [1, "cs", 3, 135, 180, 1], [1, "cs", 0, 134, 183, 1], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, 1], [1, "cs", 1, 132, 183, 1], [1, "cs", 3, 131, 183, 1], [1, "cs", 2, 135, 181, 1], [1, "cs", 2, 134, 182, 1], [1, "cs", 3, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [1, "fod", 0, 204, 301, 0], [1, "fod", 1, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", 1, 190, 288, 0], [1, "fod", 1, 189, 296, 0], [1, "fod", 1, 193, 293, 0], [1, "fod", 1, 183, 292, 0], [1, "fod", 1, 186, 287, 0], [1, "fod", 1, 190, 290, 0], [1, "fod", 1, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, 0], [1, "fod", 1, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, 0], [1, "fod", 2, 186, 297, 0], [1, "fod", 2, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [1, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, 0], [1, "fod", 2, 197, 286, 0], [1, "fod", 2, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [1, "fod", 2, 196, 283, 0], [1, "fod", 2, 196, 281, 0], [1, "fod", 2, 201, 280, 0], [1, "fod", 2, 205, 287, 0], [1, "fod", 2, 209, 283, 0], [1, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [1, "fod", 2, 217, 278, 0], [1, "fod", 2, 219, 275, 0], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", 2, 217, 265, 0], [1, "fod", 2, 213, 267, 0], [1, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [1, "fod", 2, 204, 270, 0], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, 0], [1, "fod", 2, 211, 260, 0], [1, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [1, "fod", 2, 220, 253, 0], [1, "fod", 2, 211, 257, 0], [1, "la", 3, 198, 27, 1], [1, "la", 3, 201, 30, 1], [1, "la", 3, 200, 32, 1], [1, "la", 3, 198, 33, 1], [1, "la", 3, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, 1], [1, "la", 0, 200, 28, 1], [1, "la", 0, 193, 30, 1], [1, "la", 3, 196, 27, 1], [1, "la", 3, 199, 30, 1], [1, "la", 3, 197, 29, 1], [1, "la", 3, 195, 30, 1], [1, "la", 3, 197, 31, 1], [1, "la", 2, 201, 33, 1], [1, "la", 4, 202, 34, 1], [1, "la", 4, 202, 35, 1], [1, "la", 4, 203, 36, 1], [1, "la", 4, 204, 37, 1], [1, "la", 2, 205, 38, 1], [1, "la", 5, 205, 39, 1], [1, "la", 5, 205, 40, 1], [1, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, 1], [1, "la", 1, 205, 41, 1], [1, "la", 4, 208, 43, 1], [1, "la", 4, 209, 43, 1], [1, "la", 1, 210, 43, 1], [1, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, 1], [1, "la", 4, 213, 44, 1], [1, "la", 3, 223, 54, 1], [1, "la", 3, 221, 53, 1], [1, "la", 3, 219, 53, 1], [1, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, 1], [1, "la", 4, 216, 51, 1], [1, "la", 1, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", 1, 210, 44, 1], [1, "la", 3, 206, 50, 1], [1, "re", 0, 217, 24, 1], [1, "re", 0, 207, 16, 1], [1, "de", 44, 54, 14, 0], [1, "de", 44, 53, 13, 0], [1, "de", 44, 51, 16, 0], [1, "de", 44, 49, 13, 0], [1, "de", 44, 48, 14, 0], [1, "de", 21, 78, 293, 0], [1, "cs", 0, 221, 8, 1], [1, "cs", 0, 224, 9, 1], [1, "cs", 1, 223, 8, 1], [1, "cs", 2, 224, 8, 1], [1, "cs", 2, 222, 8, 1], [1, "cs", 0, 224, 6, 1], [1, "cs", 0, 222, 5, 1], [1, "cs", 0, 219, 7, 1], [1, "cs", 1, 220, 5, 1], [1, "cs", 1, 217, 7, 1], [1, "cs", 2, 224, 5, 1], [1, "cs", 2, 223, 5, 1], [1, "cs", 2, 224, 7, 1], [1, "cs", 2, 223, 7, 1], [1, "cs", 2, 223, 6, 1], [1, "cs", 2, 222, 6, 1], [1, "cs", 2, 222, 7, 1], [1, "cs", 2, 221, 7, 1], [1, "cs", 2, 221, 6, 1], [1, "cs", 2, 221, 5, 1], [1, "cs", 2, 220, 6, 1], [1, "cs", 2, 220, 7, 1], [1, "cs", 2, 220, 8, 1], [1, "cs", 2, 219, 8, 1], [1, "cs", 2, 219, 6, 1], [1, "cs", 2, 219, 5, 1], [1, "cs", 0, 218, 5, 1], [1, "cs", 0, 216, 8, 1], [1, "cs", 2, 218, 8, 1], [1, "cs", 2, 217, 8, 1], [1, "cs", 2, 218, 7, 1], [1, "cs", 2, 218, 6, 1], [1, "cs", 2, 217, 6, 1], [1, "cs", 2, 217, 5, 1], [1, "cs", 1, 215, 6, 1], [1, "cs", 1, 213, 5, 1], [1, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, 5, 1], [1, "cs", 0, 213, 8, 1], [1, "cs", 0, 211, 7, 1], [1, "cs", 0, 209, 5, 1], [1, "cs", 0, 208, 7, 1], [1, "cs", 0, 207, 8, 1], [1, "cs", 2, 216, 6, 1], [1, "cs", 2, 216, 7, 1], [1, "cs", 2, 215, 7, 1], [1, "cs", 2, 215, 8, 1], [1, "cs", 2, 214, 8, 1], [1, "cs", 2, 214, 7, 1], [1, "cs", 2, 215, 5, 1], [1, "cs", 2, 214, 5, 1], [1, "cs", 2, 213, 6, 1], [1, "cs", 2, 213, 7, 1], [1, "cs", 2, 212, 7, 1], [1, "cs", 1, 211, 5, 1], [1, "cs", 1, 209, 8, 1], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, 8, 1], [1, "cs", 2, 210, 8, 1], [1, "cs", 2, 209, 7, 1], [1, "cs", 2, 210, 7, 1], [1, "cs", 2, 210, 6, 1], [1, "cs", 2, 212, 6, 1], [1, "cs", 2, 212, 5, 1], [1, "cs", 2, 211, 6, 1], [1, "cs", 2, 210, 5, 1], [1, "cs", 2, 209, 6, 1], [1, "cs", 2, 208, 6, 1], [1, "cs", 2, 208, 5, 1], [1, "cs", 2, 207, 7, 1], [1, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", 2, 206, 5, 1], [1, "cs", 2, 208, 8, 1], [1, "cs", 2, 206, 6, 1], [1, "cs", 0, 204, 8, 1], [1, "cs", 0, 205, 6, 1], [1, "cs", 0, 203, 5, 1], [1, "cs", 0, 202, 7, 1], [1, "cs", 0, 199, 8, 1], [1, "cs", 0, 200, 6, 1], [1, "cs", 0, 197, 6, 1], [1, "cs", 0, 195, 8, 1], [1, "cs", 0, 194, 6, 1], [1, "cs", 1, 202, 8, 1], [1, "cs", 1, 206, 7, 1], [1, "cs", 1, 201, 5, 1], [1, "cs", 1, 197, 8, 1], [1, "cs", 1, 192, 7, 1], [1, "cs", 1, 195, 5, 1], [1, "cs", 2, 205, 7, 1], [1, "cs", 2, 205, 8, 1], [1, "cs", 2, 206, 8, 1], [1, "cs", 2, 204, 7, 1], [1, "cs", 2, 204, 6, 1], [1, "cs", 2, 204, 5, 1], [1, "cs", 2, 205, 5, 1], [1, "cs", 2, 203, 6, 1], [1, "cs", 2, 203, 7, 1], [1, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [1, "cs", 2, 200, 8, 1], [1, "cs", 2, 200, 7, 1], [1, "cs", 2, 201, 7, 1], [1, "cs", 2, 201, 6, 1], [1, "cs", 2, 202, 5, 1], [1, "cs", 2, 202, 6, 1], [1, "cs", 2, 200, 5, 1], [1, "cs", 2, 199, 5, 1], [1, "cs", 2, 197, 5, 1], [1, "cs", 2, 196, 5, 1], [1, "cs", 2, 198, 5, 1], [1, "cs", 2, 198, 6, 1], [1, "cs", 2, 199, 6, 1], [1, "cs", 2, 199, 7, 1], [1, "cs", 2, 198, 7, 1], [1, "cs", 2, 198, 8, 1], [1, "cs", 2, 197, 7, 1], [1, "cs", 2, 196, 7, 1], [1, "cs", 2, 196, 8, 1], [1, "cs", 2, 196, 6, 1], [1, "cs", 2, 195, 6, 1], [1, "cs", 2, 195, 7, 1], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [1, "cs", 2, 193, 7, 1], [1, "cs", 2, 193, 6, 1], [1, "cs", 2, 193, 5, 1], [1, "cs", 2, 194, 5, 1], [1, "cs", 0, 192, 5, 1], [1, "cs", 0, 191, 8, 1], [1, "cs", 0, 190, 6, 1], [1, "cs", 0, 188, 7, 1], [1, "cs", 0, 186, 8, 1], [1, "cs", 0, 186, 5, 1], [1, "cs", 0, 184, 7, 1], [1, "cs", 0, 182, 8, 1], [1, "cs", 0, 181, 6, 1], [1, "cs", 1, 189, 8, 1], [1, "cs", 1, 183, 8, 1], [1, "cs", 1, 188, 5, 1], [1, "cs", 1, 185, 6, 1], [1, "cs", 1, 180, 7, 1], [1, "cs", 1, 183, 5, 1], [1, "cs", 1, 178, 8, 1], [1, "cs", 1, 177, 6, 1], [1, "cs", 1, 173, 7, 1], [1, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, 1], [1, "cs", 0, 179, 5, 1], [1, "cs", 0, 174, 5, 1], [1, "cs", 0, 176, 5, 1], [1, "cs", 0, 172, 8, 1], [1, "cs", 0, 170, 8, 1], [1, "cs", 0, 169, 6, 1], [1, "cs", 2, 192, 6, 1], [1, "cs", 2, 192, 8, 1], [1, "cs", 2, 191, 7, 1], [1, "cs", 2, 191, 6, 1], [1, "cs", 2, 191, 5, 1], [1, "cs", 2, 190, 5, 1], [1, "cs", 2, 189, 5, 1], [1, "cs", 2, 189, 6, 1], [1, "cs", 2, 189, 7, 1], [1, "cs", 2, 190, 7, 1], [1, "cs", 2, 190, 8, 1], [1, "cs", 2, 188, 8, 1], [1, "cs", 2, 187, 8, 1], [1, "cs", 2, 187, 7, 1], [1, "cs", 2, 187, 6, 1], [1, "cs", 2, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", 2, 186, 6, 1], [1, "cs", 2, 186, 7, 1], [1, "cs", 2, 185, 7, 1], [1, "cs", 2, 185, 8, 1], [1, "cs", 2, 184, 8, 1], [1, "cs", 2, 183, 7, 1], [1, "cs", 2, 183, 6, 1], [1, "cs", 2, 184, 6, 1], [1, "cs", 2, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, 7, 1], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, 8, 1], [1, "cs", 2, 179, 8, 1], [1, "cs", 2, 182, 5, 1], [1, "cs", 2, 181, 5, 1], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", 2, 179, 6, 1], [1, "cs", 2, 179, 7, 1], [1, "cs", 2, 178, 7, 1], [1, "cs", 2, 178, 6, 1], [1, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, 5, 1], [1, "cs", 2, 177, 7, 1], [1, "cs", 2, 176, 7, 1], [1, "cs", 2, 176, 6, 1], [1, "cs", 2, 175, 6, 1], [1, "cs", 2, 175, 5, 1], [1, "cs", 2, 176, 8, 1], [1, "cs", 2, 174, 8, 1], [1, "cs", 2, 175, 8, 1], [1, "cs", 2, 173, 8, 1], [1, "cs", 2, 174, 7, 1], [1, "cs", 2, 173, 6, 1], [1, "cs", 2, 174, 6, 1], [1, "cs", 2, 172, 5, 1], [1, "cs", 2, 173, 5, 1], [1, "cs", 2, 172, 6, 1], [1, "cs", 2, 172, 7, 1], [1, "cs", 2, 171, 8, 1], [1, "cs", 2, 170, 7, 1], [1, "cs", 2, 170, 6, 1], [1, "cs", 2, 170, 5, 1], [1, "cs", 2, 171, 5, 1], [1, "cs", 2, 171, 6, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", 2, 169, 7, 1], [1, "cs", 2, 169, 8, 1], [1, "cs", 1, 168, 7, 1], [1, "cs", 1, 166, 5, 1], [1, "cs", 1, 164, 7, 1], [1, "cs", 1, 160, 7, 1], [1, "cs", 1, 156, 8, 1], [1, "cs", 0, 166, 8, 1], [1, "cs", 0, 168, 5, 1], [1, "cs", 0, 164, 6, 1], [1, "cs", 0, 162, 7, 1], [1, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, 6, 1], [1, "cs", 0, 161, 5, 1], [1, "cs", 0, 159, 5, 1], [1, "cs", 0, 155, 7, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, 7, 1], [1, "cs", 1, 153, 8, 1], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, 1], [1, "cs", 2, 168, 8, 1], [1, "cs", 2, 167, 8, 1], [1, "cs", 2, 167, 7, 1], [1, "cs", 2, 167, 6, 1], [1, "cs", 2, 167, 5, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, 7, 1], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", 2, 165, 5, 1], [1, "cs", 2, 164, 5, 1], [1, "cs", 2, 163, 5, 1], [1, "cs", 2, 162, 5, 1], [1, "cs", 2, 162, 6, 1], [1, "cs", 2, 163, 6, 1], [1, "cs", 2, 163, 7, 1], [1, "cs", 2, 163, 8, 1], [1, "cs", 2, 164, 8, 1], [1, "cs", 2, 165, 8, 1], [1, "cs", 2, 161, 8, 1], [1, "cs", 2, 162, 8, 1], [1, "cs", 2, 160, 8, 1], [1, "cs", 2, 159, 8, 1], [1, "cs", 2, 159, 7, 1], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, 1], [1, "cs", 2, 160, 6, 1], [1, "cs", 2, 161, 6, 1], [1, "cs", 2, 161, 7, 1], [1, "cs", 2, 157, 7, 1], [1, "cs", 2, 158, 7, 1], [1, "cs", 2, 158, 6, 1], [1, "cs", 2, 158, 5, 1], [1, "cs", 2, 155, 5, 1], [1, "cs", 2, 155, 6, 1], [1, "cs", 2, 156, 6, 1], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, 8, 1], [1, "cs", 2, 154, 8, 1], [1, "cs", 2, 154, 7, 1], [1, "cs", 2, 154, 6, 1], [1, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, 1], [1, "cs", 2, 153, 6, 1], [1, "cs", 2, 153, 5, 1], [1, "cs", 2, 152, 5, 1], [1, "cs", 2, 152, 6, 1], [1, "cs", 2, 152, 7, 1], [1, "cs", 2, 151, 6, 1], [1, "cs", 2, 157, 5, 1], [1, "cs", 1, 156, 5, 1], [1, "cs", 0, 150, 5, 1], [1, "cs", 0, 149, 7, 1], [1, "cs", 0, 147, 8, 1], [1, "cs", 0, 146, 5, 1], [1, "cs", 0, 144, 7, 1], [1, "cs", 0, 142, 5, 1], [1, "cs", 1, 147, 6, 1], [1, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, 5, 1], [1, "cs", 2, 148, 5, 1], [1, "cs", 2, 149, 5, 1], [1, "cs", 2, 150, 6, 1], [1, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, 8, 1], [1, "cs", 2, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, 8, 1], [1, "cs", 2, 149, 6, 1], [1, "cs", 2, 148, 6, 1], [1, "cs", 2, 148, 7, 1], [1, "cs", 2, 147, 7, 1], [1, "cs", 2, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [1, "cs", 2, 146, 7, 1], [1, "cs", 2, 146, 8, 1], [1, "cs", 2, 145, 7, 1], [1, "cs", 2, 145, 6, 1], [1, "cs", 2, 145, 5, 1], [1, "cs", 2, 144, 6, 1], [1, "cs", 2, 143, 5, 1], [1, "cs", 2, 143, 6, 1], [1, "cs", 2, 142, 6, 1], [1, "cs", 2, 141, 5, 1], [1, "cs", 2, 224, 10, 1], [1, "cs", 0, 224, 11, 1], [1, "cs", 0, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", 0, 224, 19, 1], [1, "cs", 0, 224, 22, 1], [1, "cs", 0, 224, 24, 1], [1, "cs", 0, 224, 29, 1], [1, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, 1], [1, "cs", 0, 224, 38, 1], [1, "cs", 1, 224, 14, 1], [1, "cs", 1, 224, 20, 1], [1, "cs", 1, 224, 27, 1], [1, "cs", 1, 224, 31, 1], [1, "cs", 1, 224, 36, 1], [1, "cs", 2, 224, 12, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [1, "cs", 2, 224, 18, 1], [1, "cs", 2, 224, 21, 1], [1, "cs", 2, 224, 23, 1], [1, "cs", 2, 224, 25, 1], [1, "cs", 2, 224, 26, 1], [1, "cs", 2, 224, 28, 1], [1, "cs", 2, 224, 30, 1], [1, "cs", 2, 224, 32, 1], [1, "cs", 2, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", 0, 224, 41, 1], [1, "cs", 0, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [1, "cs", 0, 224, 52, 1], [1, "cs", 0, 224, 57, 1], [1, "cs", 1, 224, 47, 1], [1, "cs", 2, 224, 40, 1], [1, "cs", 2, 224, 42, 1], [1, "cs", 2, 224, 43, 1], [1, "cs", 2, 224, 45, 1], [1, "cs", 2, 224, 49, 1], [1, "cs", 1, 224, 50, 1], [1, "cs", 2, 224, 51, 1], [1, "la", 3, 224, 54, 1], [1, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", 0, 224, 60, 1], [1, "cs", 0, 224, 64, 1], [1, "cs", 0, 224, 66, 1], [1, "cs", 0, 224, 70, 1], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, 1], [1, "cs", 1, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", 1, 224, 72, 1], [1, "cs", 1, 224, 76, 1], [1, "cs", 1, 224, 80, 1], [1, "cs", 1, 224, 83, 1], [1, "cs", 1, 224, 91, 1], [1, "cs", 1, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [1, "cs", 0, 224, 85, 1], [1, "cs", 0, 224, 88, 1], [1, "cs", 0, 224, 93, 1], [1, "cs", 0, 224, 98, 1], [1, "cs", 2, 224, 59, 1], [1, "cs", 2, 224, 63, 1], [1, "cs", 2, 224, 65, 1], [1, "cs", 2, 224, 67, 1], [1, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, 1], [1, "cs", 2, 224, 73, 1], [1, "cs", 2, 224, 75, 1], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, 1], [1, "cs", 2, 224, 81, 1], [1, "cs", 2, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", 2, 224, 89, 1], [1, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [1, "cs", 2, 224, 94, 1], [1, "cs", 2, 224, 96, 1], [1, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [1, "cs", 0, 224, 101, 1], [1, "cs", 1, 224, 103, 1], [1, "cs", 2, 224, 102, 1], [1, "cs", 0, 222, 10, 1], [1, "cs", 2, 223, 9, 1], [1, "cs", 2, 222, 9, 1], [1, "cs", 2, 221, 9, 1], [1, "cs", 2, 223, 10, 1], [1, "cs", 2, 223, 11, 1], [1, "cs", 2, 223, 12, 1], [1, "cs", 3, 223, 13, 1], [1, "cs", 3, 222, 11, 1], [1, "cs", 3, 220, 9, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, 10, 1], [1, "re", 2, 219, 13, 1], [1, "re", 1, 218, 18, 1], [1, "re", 1, 214, 13, 1], [1, "cs", 0, 221, 20, 1], [1, "cs", 1, 223, 18, 1], [1, "cs", 2, 222, 19, 1], [1, "cs", 2, 223, 19, 1], [1, "cs", 2, 223, 20, 1], [1, "cs", 2, 222, 20, 1], [1, "cs", 2, 220, 21, 1], [1, "cs", 0, 219, 21, 1], [1, "cs", 3, 221, 21, 1], [1, "cs", 3, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [1, "cs", 3, 220, 22, 1], [1, "cs", 3, 219, 22, 1], [1, "cs", 3, 221, 22, 1], [1, "cs", 0, 211, 9, 1], [1, "cs", 1, 211, 10, 1], [1, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, 1], [1, "cs", 2, 210, 9, 1], [1, "cs", 2, 210, 10, 1], [1, "cs", 2, 210, 11, 1], [1, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, 13, 1], [1, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, 15, 1], [1, "cs", 2, 210, 14, 1], [1, "cs", 3, 211, 15, 1], [1, "cs", 3, 213, 9, 1], [1, "cs", 3, 212, 10, 1], [1, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, 9, 1], [1, "la", 3, 223, 22, 1], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", 3, 209, 10, 1], [1, "la", 0, 209, 12, 1], [1, "la", 4, 209, 14, 1], [1, "la", 4, 219, 23, 1], [1, "la", 3, 210, 15, 1], [1, "la", 3, 217, 22, 1], [1, "la", 4, 212, 16, 1], [1, "la", 2, 214, 19, 1], [1, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, 1], [1, "la", 4, 215, 18, 1], [1, "la", 2, 216, 17, 1], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, 15, 1], [1, "la", 1, 217, 16, 1], [1, "la", 2, 218, 16, 1], [1, "la", 2, 216, 14, 1], [1, "la", 2, 219, 16, 1], [1, "la", 5, 220, 16, 1], [1, "la", 5, 216, 13, 1], [1, "la", 4, 217, 15, 1], [1, "cs", 0, 211, 44, 1], [1, "cs", 1, 212, 45, 1], [1, "cs", 2, 213, 45, 1], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, 1], [1, "cs", 3, 213, 46, 1], [1, "cs", 3, 214, 47, 1], [1, "cs", 3, 214, 48, 1], [1, "cs", 3, 216, 46, 1], [1, "cs", 0, 208, 20, 1], [1, "cs", 0, 210, 21, 1], [1, "cs", 0, 212, 23, 1], [1, "cs", 0, 213, 25, 1], [1, "cs", 2, 213, 24, 1], [1, "cs", 2, 211, 22, 1], [1, "cs", 2, 210, 20, 1], [1, "cs", 2, 209, 21, 1], [1, "cs", 2, 209, 20, 1], [1, "cs", 2, 211, 21, 1], [1, "cs", 2, 212, 22, 1], [1, "cs", 2, 213, 23, 1], [1, "cs", 3, 213, 26, 1], [1, "cs", 3, 207, 20, 1], [1, "la", 4, 192, 33, 1], [1, "la", 4, 191, 34, 1], [1, "la", 4, 190, 35, 1], [1, "la", 3, 189, 37, 1], [1, "la", 3, 188, 39, 1], [1, "la", 4, 186, 40, 1], [1, "la", 4, 185, 39, 1], [1, "la", 4, 184, 39, 1], [1, "la", 2, 183, 39, 1], [1, "la", 1, 182, 40, 1], [1, "la", 2, 181, 41, 1], [1, "la", 5, 180, 41, 1], [1, "la", 5, 179, 41, 1], [1, "la", 4, 192, 28, 1], [1, "la", 4, 191, 28, 1], [1, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [1, "la", 4, 187, 26, 1], [1, "la", 4, 186, 25, 1], [1, "la", 4, 185, 25, 1], [1, "la", 4, 184, 24, 1], [1, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", 1, 183, 20, 1], [1, "la", 5, 182, 20, 1], [1, "la", 2, 181, 20, 1], [1, "la", 5, 180, 20, 1], [1, "la", 2, 179, 20, 1], [1, "la", 4, 178, 19, 1], [1, "la", 3, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, 1], [1, "cs", 0, 175, 17, 1], [1, "cs", 0, 180, 16, 1], [1, "cs", 0, 174, 19, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, 1], [1, "cs", 1, 172, 18, 1], [1, "cs", 1, 181, 15, 1], [1, "cs", 2, 179, 15, 1], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, 16, 1], [1, "cs", 2, 174, 18, 1], [1, "cs", 2, 173, 19, 1], [1, "cs", 2, 172, 19, 1], [1, "cs", 2, 173, 18, 1], [1, "cs", 2, 173, 17, 1], [1, "cs", 2, 174, 17, 1], [1, "cs", 2, 174, 16, 1], [1, "cs", 2, 175, 16, 1], [1, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [1, "cs", 2, 178, 16, 1], [1, "cs", 2, 179, 16, 1], [1, "cs", 2, 180, 15, 1], [1, "cs", 2, 181, 16, 1], [1, "cs", 3, 182, 16, 1], [1, "cs", 3, 172, 21, 1], [1, "la", 1, 175, 19, 1], [1, "la", 2, 174, 20, 1], [1, "la", 2, 173, 20, 1], [1, "la", 1, 180, 17, 1], [1, "la", 2, 181, 17, 1], [1, "la", 3, 191, 20, 1], [1, "s", 0, 217, 30, 1], [1, "s", 0, 208, 35, 1], [1, "s", 0, 204, 24, 1], [1, "s", 1, 218, 32, 1], [1, "s", 1, 207, 34, 1], [1, "s", 1, 202, 23, 1], [1, "s", 1, 195, 16, 1], [1, "s", 2, 222, 28, 1], [1, "s", 2, 212, 38, 1], [1, "s", 2, 207, 23, 1], [1, "s", 2, 202, 12, 1], [1, "s", 2, 195, 18, 1], [1, "s", 1, 191, 12, 1], [1, "s", 0, 187, 16, 1], [1, "s", 2, 188, 16, 1], [1, "s", 1, 186, 14, 1], [1, "s", 1, 201, 16, 1], [1, "g", 1, 216, 31, 1], [1, "g", 0, 200, 15, 1], [1, "g", 0, 202, 40, 1], [1, "g", 0, 189, 32, 1], [1, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, 1], [1, "g", 2, 198, 37, 1], [1, "s", 0, 193, 39, 1], [1, "s", 0, 201, 45, 1], [1, "a", 0, 210, 29, 1], [1, "a", 0, 200, 20, 1], [1, "cs", 0, 200, 34, 1], [1, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [1, "cs", 2, 202, 32, 1], [1, "cs", 2, 194, 26, 1], [1, "cs", 2, 192, 27, 1], [1, "cs", 2, 192, 32, 1], [1, "cs", 2, 203, 31, 1], [1, "cs", 2, 202, 31, 1], [1, "cs", 2, 202, 30, 1], [1, "cs", 3, 202, 29, 1], [1, "cs", 3, 201, 32, 1], [1, "cs", 3, 199, 35, 1], [1, "cs", 0, 193, 34, 1], [1, "cs", 2, 194, 34, 1], [1, "cs", 2, 198, 35, 1], [1, "cs", 3, 199, 34, 1], [1, "cs", 3, 191, 29, 1], [1, "cs", 0, 191, 30, 1], [1, "cs", 3, 190, 29, 1], [1, "la", 3, 180, 69, 1], [1, "la", 3, 182, 68, 1], [1, "la", 3, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, 1], [1, "la", 3, 182, 72, 1], [1, "la", 3, 180, 71, 1], [1, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", 0, 183, 74, 1], [1, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", 2, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", 2, 180, 74, 1], [1, "cs", 2, 181, 74, 1], [1, "la", 0, 184, 70, 1], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [1, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, 1], [1, "la", 4, 187, 69, 1], [1, "la", 1, 188, 68, 1], [1, "la", 4, 189, 68, 1], [1, "la", 2, 190, 68, 1], [1, "la", 1, 191, 68, 1], [1, "la", 4, 192, 68, 1], [1, "la", 2, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", 2, 194, 70, 1], [1, "la", 5, 195, 71, 1], [1, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, 1], [1, "la", 4, 196, 71, 1], [1, "la", 1, 197, 73, 1], [1, "la", 5, 196, 73, 1], [1, "la", 5, 198, 73, 1], [1, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", 1, 205, 72, 1], [1, "la", 2, 206, 72, 1], [1, "la", 5, 207, 72, 1], [1, "la", 1, 208, 72, 1], [1, "la", 1, 209, 73, 1], [1, "la", 2, 209, 74, 1], [1, "la", 5, 211, 76, 1], [1, "la", 4, 210, 75, 1], [1, "la", 5, 212, 76, 1], [1, "la", 4, 202, 75, 1], [1, "la", 2, 203, 76, 1], [1, "la", 4, 204, 77, 1], [1, "la", 2, 204, 78, 1], [1, "la", 2, 204, 79, 1], [1, "la", 5, 204, 80, 1], [1, "cs", 0, 202, 74, 1], [1, "cs", 1, 203, 74, 1], [1, "cs", 2, 204, 73, 1], [1, "cs", 2, 203, 75, 1], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [1, "cs", 2, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, 1], [1, "cs", 3, 207, 73, 1], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, 1], [1, "la", 4, 184, 64, 1], [1, "la", 4, 185, 63, 1], [1, "la", 1, 185, 62, 1], [1, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, 1], [1, "la", 4, 186, 59, 1], [1, "la", 1, 187, 58, 1], [1, "la", 2, 187, 57, 1], [1, "la", 2, 187, 56, 1], [1, "s", 0, 191, 60, 1], [1, "s", 1, 195, 58, 1], [1, "s", 1, 199, 46, 1], [1, "s", 2, 202, 49, 1], [1, "g", 2, 197, 55, 1], [1, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, 1], [1, "g", 0, 210, 61, 1], [1, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, 1], [1, "g", 0, 175, 25, 1], [1, "g", 0, 168, 32, 1], [1, "g", 1, 179, 28, 1], [1, "g", 1, 161, 16, 1], [1, "g", 2, 172, 12, 1], [1, "g", 2, 160, 25, 1], [1, "g", 2, 157, 39, 1], [1, "g", 2, 170, 43, 1], [1, "g", 2, 202, 67, 1], [1, "g", 2, 217, 72, 1], [1, "g", 2, 214, 82, 1], [1, "g", 2, 193, 86, 1], [1, "g", 2, 168, 60, 1], [1, "g", 2, 165, 78, 1], [1, "g", 2, 173, 88, 1], [1, "s", 0, 185, 51, 1], [1, "s", 0, 175, 44, 1], [1, "s", 0, 165, 50, 1], [1, "s", 0, 160, 32, 1], [1, "s", 1, 162, 30, 1], [1, "s", 1, 176, 28, 1], [1, "s", 1, 154, 17, 1], [1, "s", 1, 184, 49, 1], [1, "s", 1, 192, 62, 1], [1, "s", 1, 216, 62, 1], [1, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, 1], [1, "s", 1, 206, 86, 1], [1, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", 5, 201, 81, 1], [1, "la", 1, 207, 83, 1], [1, "la", 3, 173, 32, 1], [1, "la", 2, 181, 45, 1], [1, "la", 1, 178, 38, 1], [1, "la", 1, 213, 69, 1], [1, "la", 5, 214, 69, 1], [1, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, 1], [1, "la", 3, 191, 80, 1], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", 2, 154, 67, 1], [1, "g", 2, 202, 94, 1], [1, "g", 2, 155, 90, 1], [1, "s", 2, 215, 80, 1], [1, "s", 2, 204, 62, 1], [1, "s", 2, 218, 60, 1], [1, "s", 2, 194, 62, 1], [1, "s", 0, 216, 86, 1], [1, "s", 0, 211, 93, 1], [1, "la", 0, 216, 92, 1], [1, "la", 0, 151, 96, 1], [1, "la", 1, 155, 95, 1], [1, "la", 4, 214, 88, 1], [1, "s", 0, 205, 99, 1], [1, "s", 1, 217, 88, 1], [1, "s", 1, 213, 94, 1], [1, "s", 1, 202, 97, 1], [1, "s", 0, 199, 85, 1], [1, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, 1], [1, "la", 3, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [1, "la", 0, 219, 77, 1], [1, "la", 0, 200, 59, 1], [1, "la", 3, 188, 87, 1], [1, "la", 0, 183, 94, 1], [1, "la", 1, 187, 83, 1], [1, "la", 1, 175, 82, 1], [1, "la", 1, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [1, "la", 3, 159, 80, 1], [1, "la", 3, 167, 15, 1], [1, "la", 1, 164, 17, 1], [1, "la", 1, 172, 28, 1], [1, "la", 3, 153, 24, 1], [1, "la", 4, 164, 91, 1], [1, "la", 4, 156, 82, 1], [1, "la", 4, 149, 90, 1], [1, "s", 0, 178, 85, 1], [1, "s", 1, 180, 85, 1], [1, "s", 0, 163, 96, 1], [1, "s", 0, 159, 86, 1], [1, "s", 0, 185, 78, 1], [1, "s", 1, 194, 75, 1], [1, "s", 2, 195, 76, 1], [1, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, 1], [1, "s", 2, 166, 97, 1], [1, "s", 2, 177, 97, 1], [1, "s", 0, 149, 85, 1], [1, "s", 1, 151, 83, 1], [1, "s", 1, 175, 74, 1], [1, "s", 0, 174, 72, 1], [1, "la", 3, 168, 71, 1], [1, "la", 3, 180, 60, 1], [1, "s", 0, 156, 63, 1], [1, "s", 0, 151, 47, 1], [1, "s", 1, 158, 64, 1], [1, "s", 1, 161, 75, 1], [1, "s", 1, 162, 51, 1], [1, "s", 1, 175, 45, 1], [1, "s", 1, 152, 47, 1], [1, "s", 1, 159, 33, 1], [1, "s", 1, 152, 18, 1], [1, "s", 0, 151, 13, 1], [1, "s", 0, 166, 22, 1], [1, "s", 0, 170, 63, 1], [1, "s", 2, 172, 62, 1], [1, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", 4, 177, 68, 1], [1, "la", 3, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", 1, 172, 67, 1], [1, "la", 4, 171, 67, 1], [1, "la", 4, 170, 66, 1], [1, "la", 4, 169, 66, 1], [1, "la", 1, 168, 66, 1], [1, "la", 4, 167, 67, 1], [1, "la", 1, 166, 67, 1], [1, "la", 4, 165, 68, 1], [1, "la", 5, 164, 68, 1], [1, "la", 2, 163, 68, 1], [1, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, 1], [1, "la", 3, 153, 72, 1], [1, "la", 3, 163, 60, 1], [1, "la", 3, 164, 42, 1], [1, "la", 0, 155, 51, 1], [1, "la", 1, 168, 42, 1], [1, "la", 4, 158, 48, 1], [1, "la", 4, 178, 57, 1], [1, "la", 4, 151, 69, 1], [1, "la", 2, 170, 74, 1], [1, "la", 2, 160, 84, 1], [1, "la", 2, 174, 92, 1], [1, "la", 2, 188, 90, 1], [1, "la", 2, 209, 84, 1], [1, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", 5, 165, 57, 1], [1, "la", 5, 182, 58, 1], [1, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [1, "la", 1, 152, 53, 1], [1, "la", 1, 152, 37, 1], [1, "la", 2, 163, 13, 1], [1, "de", 12, 219, 12, 0], [1, "de", 14, 203, 13, 0], [1, "de", 15, 220, 19, 0], [1, "de", 12, 223, 15, 0], [1, "de", 12, 213, 10, 0], [1, "de", 37, 217, 19, 0], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, 14, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, 18, 0], [1, "de", 37, 212, 18, 0], [1, "de", 38, 215, 26, 0], [1, "de", 37, 222, 25, 0], [1, "de", 40, 221, 29, 0], [1, "de", 12, 220, 27, 0], [1, "de", 13, 213, 27, 0], [1, "de", 14, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [1, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, 0], [1, "de", 12, 223, 38, 0], [1, "de", 13, 213, 38, 0], [1, "de", 14, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", 15, 206, 23, 0], [1, "de", 13, 205, 28, 0], [1, "de", 14, 211, 23, 0], [1, "de", 14, 201, 20, 0], [1, "de", 15, 198, 9, 0], [1, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, 9, 0], [1, "de", 40, 196, 12, 0], [1, "de", 40, 198, 18, 0], [1, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [1, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, 18, 0], [1, "de", 39, 192, 18, 0], [1, "de", 37, 185, 15, 0], [1, "de", 12, 188, 15, 0], [1, "de", 13, 185, 13, 0], [1, "de", 14, 189, 9, 0], [1, "de", 15, 187, 22, 0], [1, "de", 15, 180, 9, 0], [1, "de", 12, 177, 14, 0], [1, "de", 14, 173, 9, 0], [1, "de", 14, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, 13, 0], [1, "de", 39, 175, 9, 0], [1, "de", 40, 173, 14, 0], [1, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, 0], [1, "de", 38, 164, 15, 0], [1, "de", 39, 170, 20, 0], [1, "de", 40, 160, 17, 0], [1, "de", 40, 154, 10, 0], [1, "de", 40, 165, 23, 0], [1, "de", 40, 150, 19, 0], [1, "de", 37, 155, 16, 0], [1, "de", 39, 146, 10, 0], [1, "de", 12, 159, 12, 0], [1, "de", 13, 151, 9, 0], [1, "de", 14, 150, 14, 0], [1, "de", 15, 153, 19, 0], [1, "de", 13, 161, 25, 0], [1, "de", 14, 169, 25, 0], [1, "de", 15, 176, 25, 0], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [1, "de", 14, 181, 36, 0], [1, "de", 37, 186, 33, 0], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [1, "de", 40, 175, 31, 0], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [1, "de", 38, 168, 45, 0], [1, "de", 38, 173, 45, 0], [1, "de", 39, 160, 35, 0], [1, "de", 40, 161, 42, 0], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, 0], [1, "de", 40, 160, 52, 0], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [1, "de", 12, 167, 32, 0], [1, "de", 13, 158, 32, 0], [1, "de", 14, 149, 28, 0], [1, "de", 15, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", 12, 171, 43, 0], [1, "de", 12, 174, 36, 0], [1, "de", 12, 151, 43, 0], [1, "de", 13, 152, 48, 0], [1, "de", 14, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, 0], [1, "de", 13, 183, 51, 0], [1, "de", 14, 186, 48, 0], [1, "de", 37, 182, 48, 0], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [1, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, 0], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, 0], [1, "de", 14, 198, 47, 0], [1, "de", 15, 198, 55, 0], [1, "de", 15, 212, 54, 0], [1, "de", 15, 216, 63, 0], [1, "de", 14, 209, 62, 0], [1, "de", 12, 219, 60, 0], [1, "de", 12, 206, 56, 0], [1, "de", 12, 218, 72, 0], [1, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, 0], [1, "de", 12, 193, 63, 0], [1, "de", 14, 216, 80, 0], [1, "de", 14, 222, 87, 0], [1, "de", 38, 210, 53, 0], [1, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, 0], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [1, "de", 38, 218, 55, 0], [1, "de", 38, 212, 61, 0], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, 0], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, 0], [1, "de", 39, 222, 93, 0], [1, "de", 39, 216, 96, 0], [1, "de", 39, 209, 94, 0], [1, "de", 39, 201, 87, 0], [1, "de", 39, 198, 82, 0], [1, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [1, "de", 39, 202, 92, 0], [1, "de", 37, 194, 97, 0], [1, "de", 39, 204, 88, 0], [1, "de", 39, 189, 90, 0], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [1, "de", 37, 183, 91, 0], [1, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [1, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [1, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [1, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [1, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [1, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [1, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, 0], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, 0], [1, "de", 39, 174, 64, 0], [1, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, 0], [1, "de", 12, 218, 96, 0], [1, "de", 13, 212, 95, 0], [1, "de", 14, 204, 85, 0], [1, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", 12, 198, 87, 0], [1, "de", 14, 196, 77, 0], [1, "de", 13, 194, 86, 0], [1, "de", 15, 181, 84, 0], [1, "de", 14, 184, 79, 0], [1, "de", 14, 188, 93, 0], [1, "de", 13, 180, 87, 0], [1, "de", 13, 178, 96, 0], [1, "de", 13, 163, 95, 0], [1, "de", 15, 172, 88, 0], [1, "de", 15, 176, 75, 0], [1, "de", 14, 172, 72, 0], [1, "de", 14, 169, 82, 0], [1, "de", 13, 164, 78, 0], [1, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", 15, 154, 91, 0], [1, "de", 15, 160, 74, 0], [1, "de", 14, 152, 76, 0], [1, "de", 14, 158, 63, 0], [1, "de", 14, 150, 60, 0], [1, "de", 12, 169, 59, 0], [1, "de", 13, 173, 61, 0], [1, "cs", 1, 143, 104, 1], [1, "cs", 0, 141, 102, 1], [1, "cs", 3, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [1, "cs", 2, 140, 102, 1], [1, "cs", 3, 143, 107, 1], [1, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, 1], [1, "cs", 2, 142, 103, 1], [1, "cs", 0, 142, 104, 1], [1, "cs", 2, 141, 103, 1], [1, "cs", 3, 142, 105, 1], [1, "cs", 3, 140, 103, 1], [1, "cs", 3, 141, 104, 1], [1, "la", 4, 151, 23, 1], [1, "la", 4, 150, 22, 1], [1, "la", 1, 149, 21, 1], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, 20, 1], [1, "la", 4, 147, 19, 1], [1, "la", 5, 147, 18, 1], [1, "la", 1, 147, 17, 1], [1, "la", 3, 144, 9, 1], [1, "la", 5, 147, 16, 1], [1, "la", 2, 147, 15, 1], [1, "la", 4, 147, 14, 1], [1, "la", 4, 145, 11, 1], [1, "la", 5, 145, 12, 1], [1, "la", 1, 146, 13, 1], [1, "la", 2, 145, 13, 1], [1, "la", 3, 155, 25, 1], [1, "la", 0, 155, 24, 1], [1, "la", 3, 153, 26, 1], [1, "cs", 0, 151, 24, 1], [1, "cs", 0, 153, 22, 1], [1, "cs", 3, 152, 22, 1], [1, "cs", 3, 154, 22, 1], [1, "cs", 1, 157, 26, 1], [1, "cs", 2, 157, 24, 1], [1, "cs", 2, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [1, "cs", 2, 152, 25, 1], [1, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, 1], [1, "cs", 2, 157, 23, 1], [1, "cs", 2, 157, 22, 1], [1, "cs", 3, 150, 24, 1], [1, "cs", 3, 150, 23, 1], [1, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, 0], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, 0], [1, "de", 13, 156, 21, 0], [1, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", 13, 147, 79, 0], [1, "de", 12, 157, 99, 0], [1, "de", 12, 172, 99, 0], [1, "la", 3, 143, 102, 1], [1, "la", 4, 149, 96, 1], [1, "la", 4, 145, 102, 1], [1, "la", 1, 148, 97, 1], [1, "la", 5, 148, 98, 1], [1, "cs", 3, 144, 104, 1], [1, "cs", 3, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", 3, 145, 104, 1], [1, "cs", 3, 142, 101, 1], [1, "cs", 3, 143, 100, 1], [1, "cs", 3, 141, 101, 1], [1, "cs", 3, 142, 100, 1], [1, "cs", 0, 141, 100, 1], [1, "cs", 2, 140, 101, 1], [1, "cs", 2, 144, 105, 1], [1, "cs", 3, 146, 103, 1], [1, "cs", 3, 146, 102, 1], [1, "cs", 3, 150, 95, 1], [1, "cs", 0, 150, 97, 1], [1, "cs", 2, 151, 98, 1], [1, "cs", 0, 153, 97, 1], [1, "cs", 3, 153, 96, 1], [1, "cs", 2, 149, 95, 1], [1, "s", 0, 213, 127, 1], [1, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [1, "plm", 0, 208, 127, 0], [1, "s", 1, 207, 132, 1], [1, "s", 2, 208, 133, 1], [1, "plm", 0, 217, 132, 0], [1, "plm", 2, 186, 158, 0], [1, "plm", 0, 184, 160, 0], [1, "s", 1, 183, 156, 1], [1, "s", 2, 186, 159, 1], [1, "p", 0, 182, 157, 1], [1, "p", 0, 114, 205, 1], [1, "plm", 1, 117, 204, 0], [1, "plm", 0, 117, 205, 0], [1, "plm", 2, 112, 204, 0], [1, "s", 2, 114, 207, 1], [1, "s", 2, 115, 204, 1], [1, "plm", 2, 122, 151, 0], [1, "plm", 1, 123, 150, 0], [1, "plm", 1, 117, 151, 0], [1, "s", 0, 118, 150, 1], [1, "s", 1, 122, 152, 1], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, 0], [1, "s", 0, 153, 128, 1], [1, "s", 2, 152, 130, 1], [1, "p", 0, 123, 65, 1], [1, "plm", 2, 125, 62, 0], [1, "plm", 1, 124, 62, 0], [1, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, 1], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", 2, 145, 105, 1], [1, "cs", 2, 144, 107, 1], [1, "cs", 2, 141, 106, 1], [1, "cs", 2, 141, 105, 1], [1, "cs", 2, 140, 105, 1], [1, "cs", 2, 140, 104, 1], [1, "cs", 1, 138, 103, 1], [1, "cs", 0, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", 2, 139, 105, 1], [1, "cs", 2, 142, 106, 1], [1, "cs", 2, 142, 107, 1], [1, "cs", 2, 139, 101, 1], [1, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [1, "la", 1, 146, 100, 1], [1, "la", 4, 145, 101, 1], [1, "cs", 1, 215, 47, 1], [1, "cs", 2, 216, 47, 1], [1, "cs", 2, 215, 48, 1], [1, "la", 4, 214, 45, 1], [1, "la", 4, 215, 45, 1], [1, "la", 0, 216, 46, 1], [1, "la", 4, 216, 48, 1], [1, "la", 4, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", 3, 214, 49, 1], [1, "la", 4, 211, 45, 1], [1, "la", 3, 213, 47, 1], [1, "cs", 2, 224, 48, 1], [1, "plm", 2, 111, 243, 0], [1, "plm", 1, 108, 246, 0], [1, "s", 1, 110, 243, 1], [1, "s", 0, 108, 245, 1], [1, "s", 0, 121, 276, 1], [1, "plm", 2, 122, 277, 0], [1, "plm", 2, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [1, "s", 1, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", 3, 67, 16, 1], [1, "cs", 0, 67, 17, 1], [1, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, 18, 1], [1, "cs", 3, 68, 17, 1], [1, "cs", 0, 36, 16, 1], [1, "cs", 2, 36, 17, 1], [1, "cs", 2, 36, 18, 1], [1, "cs", 3, 35, 17, 1], [1, "cs", 3, 36, 19, 1], [1, "cs", 3, 35, 18, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, 1], [1, "cs", 3, 66, 22, 1], [1, "cs", 3, 66, 31, 1], [1, "cs", 2, 36, 30, 1], [1, "cs", 2, 36, 23, 1], [1, "cs", 1, 36, 22, 1], [1, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, 13, 1], [1, "cs", 2, 44, 13, 1], [1, "cs", 3, 42, 16, 1], [1, "cs", 3, 41, 16, 1], [1, "cs", 3, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, 19, 1], [1, "cs", 3, 44, 19, 1], [1, "cs", 3, 45, 19, 1], [1, "cs", 2, 46, 19, 1], [1, "cs", 0, 43, 22, 1], [1, "cs", 2, 42, 22, 1], [1, "cs", 1, 41, 22, 1], [1, "cs", 0, 40, 22, 1], [1, "cs", 3, 39, 17, 1], [1, "cs", 1, 44, 26, 1], [1, "cs", 2, 45, 26, 1], [1, "cs", 3, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", 2, 48, 26, 1], [1, "cs", 3, 47, 25, 1], [1, "cs", 3, 43, 27, 1], [1, "cs", 1, 49, 32, 1], [1, "cs", 2, 50, 32, 1], [1, "cs", 2, 51, 32, 1], [1, "cs", 2, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", 1, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", 3, 55, 31, 1], [1, "cs", 3, 54, 32, 1], [1, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", 0, 51, 33, 1], [1, "cs", 2, 52, 33, 1], [1, "cs", 2, 50, 33, 1], [1, "cs", 3, 56, 30, 1], [1, "cs", 3, 56, 31, 1], [1, "cs", 3, 46, 30, 1], [1, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [1, "cs", 2, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [1, "cs", 0, 55, 32, 1], [1, "cs", 0, 47, 32, 1], [1, "d", 1, 54, 35, 1], [1, "fo", 2, 35, 15, 0], [1, "fo", 2, 36, 12, 0], [1, "fo", 2, 67, 15, 0], [1, "cs", 3, 60, 13, 1], [1, "cs", 2, 59, 13, 1], [1, "cs", 1, 58, 13, 1], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, 1], [1, "cs", 3, 60, 16, 1], [1, "cs", 3, 63, 17, 1], [1, "cs", 2, 60, 19, 1], [1, "cs", 1, 59, 19, 1], [1, "cs", 3, 58, 19, 1], [1, "cs", 2, 57, 19, 1], [1, "cs", 2, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [1, "cs", 2, 63, 23, 1], [1, "cs", 0, 62, 22, 1], [1, "cs", 2, 61, 22, 1], [1, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, 1], [1, "cs", 2, 54, 26, 1], [1, "cs", 2, 55, 26, 1], [1, "cs", 2, 56, 26, 1], [1, "cs", 1, 57, 26, 1], [1, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", 2, 68, 15, 1], [1, "cs", 3, 69, 15, 1], [1, "cs", 3, 70, 15, 1], [1, "cs", 3, 70, 14, 1], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, 1], [1, "cs", 2, 71, 13, 1], [1, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, 13, 1], [1, "cs", 3, 70, 8, 1], [1, "cs", 3, 71, 8, 1], [1, "cs", 2, 72, 8, 1], [1, "cs", 0, 73, 8, 1], [1, "cs", 3, 74, 9, 1], [1, "cs", 3, 74, 8, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, 10, 1], [1, "cs", 0, 76, 10, 1], [1, "cs", 0, 76, 16, 1], [1, "cs", 3, 76, 15, 1], [1, "cs", 3, 75, 16, 1], [1, "cs", 2, 77, 11, 1], [1, "cs", 2, 77, 14, 1], [1, "cs", 3, 77, 12, 1], [1, "cs", 3, 77, 13, 1], [1, "cs", 3, 77, 15, 1], [1, "cs", 0, 74, 18, 1], [1, "cs", 1, 75, 17, 1], [1, "cs", 2, 74, 17, 1], [1, "cs", 3, 73, 19, 1], [1, "cs", 3, 67, 23, 1], [1, "cs", 0, 68, 23, 1], [1, "cs", 0, 72, 20, 1], [1, "cs", 2, 73, 20, 1], [1, "cs", 2, 74, 19, 1], [1, "cs", 2, 74, 36, 1], [1, "cs", 2, 77, 27, 1], [1, "cs", 2, 76, 26, 1], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [1, "cs", 2, 75, 25, 1], [1, "cs", 0, 76, 25, 1], [1, "cs", 1, 77, 23, 1], [1, "cs", 2, 77, 16, 1], [1, "cs", 2, 76, 17, 1], [1, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [1, "cs", 2, 77, 25, 1], [1, "cs", 2, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [1, "cs", 3, 76, 27, 1], [1, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [1, "cs", 2, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, 1], [1, "cs", 2, 66, 20, 1], [1, "cs", 2, 66, 21, 1], [1, "cs", 2, 67, 18, 1], [1, "cs", 2, 67, 22, 1], [1, "cs", 0, 77, 36, 1], [1, "cs", 0, 77, 32, 1], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, 1], [1, "cs", 2, 76, 36, 1], [1, "cs", 2, 77, 35, 1], [1, "cs", 2, 77, 34, 1], [1, "cs", 2, 76, 35, 1], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [1, "cs", 0, 71, 32, 1], [1, "cs", 0, 76, 34, 1], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, 1], [1, "cs", 2, 76, 28, 1], [1, "cs", 2, 75, 28, 1], [1, "cs", 2, 76, 29, 1], [1, "cs", 2, 76, 33, 1], [1, "cs", 2, 70, 32, 1], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [1, "cs", 2, 67, 31, 1], [1, "cs", 2, 67, 30, 1], [1, "cs", 2, 69, 32, 1], [1, "cs", 1, 67, 32, 1], [1, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, 1], [1, "cs", 2, 66, 33, 1], [1, "cs", 2, 67, 33, 1], [1, "cs", 2, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [1, "cs", 1, 66, 35, 1], [1, "cs", 2, 67, 34, 1], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [1, "cs", 2, 64, 36, 1], [1, "cs", 2, 65, 36, 1], [1, "cs", 2, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, 1], [1, "cs", 2, 68, 35, 1], [1, "cs", 2, 76, 9, 1], [1, "cs", 2, 77, 9, 1], [1, "cs", 2, 77, 8, 1], [1, "cs", 2, 77, 10, 1], [1, "cs", 2, 78, 8, 1], [1, "cs", 2, 78, 9, 1], [1, "cs", 2, 78, 10, 1], [1, "cs", 2, 78, 11, 1], [1, "cs", 2, 78, 12, 1], [1, "cs", 2, 78, 13, 1], [1, "cs", 0, 79, 9, 1], [1, "cs", 1, 79, 11, 1], [1, "cs", 3, 79, 8, 1], [1, "cs", 3, 79, 10, 1], [1, "cs", 3, 79, 12, 1], [1, "cs", 3, 80, 8, 1], [1, "cs", 1, 80, 10, 1], [1, "cs", 2, 80, 9, 1], [1, "cs", 2, 80, 11, 1], [1, "cs", 2, 81, 8, 1], [1, "cs", 2, 81, 9, 1], [1, "cs", 2, 81, 10, 1], [1, "cs", 2, 78, 14, 1], [1, "cs", 2, 79, 13, 1], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, 12, 1], [1, "cs", 0, 79, 14, 1], [1, "cs", 0, 82, 9, 1], [1, "cs", 2, 82, 8, 1], [1, "cs", 2, 82, 10, 1], [1, "cs", 2, 81, 11, 1], [1, "cs", 3, 80, 13, 1], [1, "cs", 1, 78, 30, 1], [1, "cs", 1, 78, 34, 1], [1, "cs", 1, 78, 27, 1], [1, "cs", 0, 78, 25, 1], [1, "cs", 0, 79, 29, 1], [1, "cs", 0, 79, 32, 1], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", 2, 78, 36, 1], [1, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, 1], [1, "cs", 2, 79, 33, 1], [1, "cs", 2, 78, 32, 1], [1, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, 1], [1, "cs", 2, 79, 30, 1], [1, "cs", 2, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", 2, 79, 28, 1], [1, "cs", 2, 79, 27, 1], [1, "cs", 2, 78, 26, 1], [1, "cs", 2, 79, 26, 1], [1, "cs", 2, 78, 24, 1], [1, "cs", 2, 80, 34, 1], [1, "cs", 2, 80, 33, 1], [1, "cs", 2, 80, 31, 1], [1, "cs", 2, 80, 30, 1], [1, "cs", 2, 80, 32, 1], [1, "cs", 2, 80, 29, 1], [1, "cs", 2, 80, 28, 1], [1, "cs", 2, 80, 27, 1], [1, "cs", 0, 81, 30, 1], [1, "cs", 1, 81, 32, 1], [1, "cs", 1, 81, 28, 1], [1, "cs", 2, 81, 29, 1], [1, "cs", 2, 81, 31, 1], [1, "cs", 2, 81, 33, 1], [1, "cs", 2, 82, 30, 1], [1, "cs", 2, 82, 31, 1], [1, "cs", 2, 82, 32, 1], [1, "cs", 0, 37, 36, 1], [1, "cs", 2, 38, 36, 1], [1, "cs", 2, 37, 35, 1], [1, "cs", 2, 36, 36, 1], [1, "cs", 2, 34, 35, 1], [1, "cs", 2, 35, 35, 1], [1, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, 1], [1, "cs", 1, 35, 34, 1], [1, "cs", 2, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [1, "cs", 2, 35, 33, 1], [1, "cs", 2, 34, 33, 1], [1, "cs", 2, 33, 33, 1], [1, "cs", 2, 31, 32, 1], [1, "cs", 1, 36, 32, 1], [1, "cs", 1, 32, 32, 1], [1, "cs", 2, 35, 32, 1], [1, "cs", 2, 33, 32, 1], [1, "cs", 2, 32, 33, 1], [1, "cs", 2, 33, 31, 1], [1, "cs", 2, 34, 31, 1], [1, "cs", 2, 35, 31, 1], [1, "cs", 0, 34, 32, 1], [1, "cs", 2, 35, 30, 1], [1, "cs", 1, 39, 23, 1], [1, "cs", 3, 39, 22, 1], [1, "cs", 3, 36, 24, 1], [1, "cs", 3, 35, 24, 1], [1, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, 1], [1, "cs", 2, 36, 20, 1], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [1, "cs", 2, 35, 16, 1], [1, "cs", 2, 34, 16, 1], [1, "cs", 2, 33, 16, 1], [1, "cs", 0, 34, 17, 1], [1, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [1, "cs", 3, 30, 13, 1], [1, "cs", 1, 33, 15, 1], [1, "cs", 1, 31, 13, 1], [1, "cs", 2, 32, 14, 1], [1, "cs", 0, 31, 8, 1], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [1, "cs", 0, 25, 12, 1], [1, "cs", 2, 25, 11, 1], [1, "cs", 3, 25, 10, 1], [1, "cs", 0, 25, 9, 1], [1, "cs", 2, 25, 8, 1], [1, "cs", 2, 26, 8, 1], [1, "cs", 2, 27, 8, 1], [1, "cs", 2, 28, 8, 1], [1, "cs", 2, 29, 8, 1], [1, "cs", 2, 30, 8, 1], [1, "cs", 2, 26, 9, 1], [1, "cs", 2, 27, 9, 1], [1, "cs", 2, 26, 10, 1], [1, "cs", 1, 27, 10, 1], [1, "cs", 3, 28, 9, 1], [1, "cs", 3, 25, 14, 1], [1, "cs", 0, 25, 15, 1], [1, "cs", 2, 26, 15, 1], [1, "cs", 3, 27, 16, 1], [1, "cs", 0, 28, 17, 1], [1, "cs", 1, 29, 18, 1], [1, "cs", 2, 26, 16, 1], [1, "cs", 2, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [1, "cs", 2, 26, 17, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, 18, 1], [1, "cs", 2, 30, 19, 1], [1, "cs", 2, 29, 19, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", 2, 24, 10, 1], [1, "cs", 2, 24, 11, 1], [1, "cs", 2, 24, 12, 1], [1, "cs", 2, 24, 13, 1], [1, "cs", 1, 23, 10, 1], [1, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, 1], [1, "cs", 1, 23, 8, 1], [1, "cs", 2, 24, 8, 1], [1, "cs", 2, 24, 9, 1], [1, "cs", 2, 23, 9, 1], [1, "cs", 2, 22, 9, 1], [1, "cs", 2, 22, 10, 1], [1, "cs", 2, 22, 11, 1], [1, "cs", 2, 23, 11, 1], [1, "cs", 2, 23, 12, 1], [1, "cs", 2, 23, 13, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, 9, 1], [1, "cs", 2, 21, 8, 1], [1, "cs", 2, 29, 25, 1], [1, "cs", 2, 25, 24, 1], [1, "cs", 2, 26, 25, 1], [1, "cs", 2, 27, 25, 1], [1, "cs", 0, 28, 25, 1], [1, "cs", 1, 25, 23, 1], [1, "cs", 2, 26, 24, 1], [1, "cs", 0, 24, 25, 1], [1, "cs", 3, 23, 24, 1], [1, "cs", 3, 24, 24, 1], [1, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [1, "cs", 1, 26, 26, 1], [1, "cs", 1, 29, 26, 1], [1, "cs", 2, 23, 26, 1], [1, "cs", 2, 24, 26, 1], [1, "cs", 2, 25, 26, 1], [1, "cs", 2, 27, 26, 1], [1, "cs", 2, 28, 26, 1], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, 1], [1, "cs", 1, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [1, "cs", 2, 27, 28, 1], [1, "cs", 2, 27, 27, 1], [1, "cs", 2, 26, 28, 1], [1, "cs", 2, 26, 27, 1], [1, "cs", 2, 25, 28, 1], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, 1], [1, "cs", 2, 24, 27, 1], [1, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, 1], [1, "cs", 1, 24, 30, 1], [1, "cs", 2, 25, 31, 1], [1, "cs", 2, 25, 30, 1], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, 1], [1, "cs", 2, 26, 33, 1], [1, "cs", 0, 26, 34, 1], [1, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, 1], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, 1], [1, "cs", 2, 24, 32, 1], [1, "cs", 2, 25, 33, 1], [1, "cs", 2, 26, 35, 1], [1, "cs", 2, 24, 33, 1], [1, "cs", 2, 25, 34, 1], [1, "cs", 1, 22, 29, 1], [1, "cs", 1, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, 1], [1, "cs", 2, 23, 34, 1], [1, "cs", 2, 23, 33, 1], [1, "cs", 0, 22, 33, 1], [1, "cs", 1, 23, 32, 1], [1, "cs", 2, 22, 32, 1], [1, "cs", 2, 23, 31, 1], [1, "cs", 2, 23, 30, 1], [1, "cs", 2, 22, 30, 1], [1, "cs", 2, 22, 31, 1], [1, "cs", 1, 21, 31, 1], [1, "cs", 0, 21, 29, 1], [1, "cs", 2, 21, 30, 1], [1, "cs", 2, 24, 36, 1], [1, "cs", 2, 26, 36, 1], [1, "cs", 2, 25, 36, 1], [1, "cs", 2, 27, 36, 1], [1, "cs", 2, 28, 36, 1], [1, "d", 2, 83, 65, 1], [1, "d", 2, 16, 67, 1], [1, "g", 0, 15, 17, 1], [1, "s", 0, 18, 13, 1], [1, "s", 0, 85, 11, 1], [1, "f", 0, 41, 102, 1], [1, "f", 0, 42, 124, 1], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [1, "f", 0, 70, 87, 1], [1, "f", 0, 27, 96, 1], [1, "f", 0, 22, 79, 1], [1, "f", 0, 20, 117, 1], [1, "f", 0, 30, 137, 1], [1, "f", 0, 59, 146, 1], [1, "f", 0, 52, 147, 1], [1, "f", 0, 20, 149, 1], [1, "f", 0, 36, 146, 1], [1, "f", 0, 62, 124, 1], [1, "g", 1, 34, 121, 1], [1, "g", 1, 52, 116, 1], [1, "g", 1, 78, 116, 1], [1, "g", 1, 71, 129, 1], [1, "s", 0, 53, 100, 1], [1, "s", 0, 73, 111, 1], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, 1], [1, "s", 0, 19, 102, 1], [1, "s", 0, 18, 127, 1], [1, "s", 0, 35, 159, 1], [1, "s", 0, 65, 54, 1], [1, "s", 0, 44, 52, 1], [1, "s", 0, 26, 51, 1], [1, "f", 1, 56, 136, 1], [1, "f", 1, 41, 133, 1], [1, "f", 1, 80, 120, 1], [1, "f", 1, 16, 117, 1], [1, "f", 1, 13, 99, 1], [1, "f", 1, 17, 89, 1], [1, "f", 1, 90, 98, 1], [1, "f", 1, 84, 95, 1], [1, "f", 1, 16, 57, 1], [1, "f", 1, 77, 53, 1], [1, "d", 1, 48, 35, 1], [1, "de", 8, 33, 13, 0], [1, "de", 8, 30, 9, 0], [1, "de", 9, 32, 30, 0], [1, "de", 10, 30, 25, 0], [1, "de", 10, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, 0], [1, "de", 9, 70, 22, 0], [1, "de", 10, 70, 16, 0], [1, "de", 10, 75, 11, 0], [1, "de", 8, 68, 10, 0], [1, "de", 8, 75, 30, 0], [1, "de", 11, 71, 33, 0], [1, "de", 11, 72, 25, 0], [1, "de", 11, 64, 25, 0], [1, "de", 11, 52, 10, 0], [1, "de", 11, 31, 15, 0], [1, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, 0], [1, "de", 30, 30, 29, 0], [1, "de", 30, 71, 29, 0], [1, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, 19, 0], [1, "de", 29, 72, 10, 0], [1, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [1, "fo", 1, 39, 12, 0], [1, "fo", 1, 34, 14, 0], [1, "fo", 1, 74, 28, 0], [1, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [1, "fo", 2, 77, 22, 0], [1, "fo", 2, 74, 21, 0], [1, "fo", 2, 76, 18, 0], [1, "fo", 1, 78, 17, 0], [1, "fo", 1, 28, 19, 0], [1, "fo", 2, 27, 24, 0], [1, "fo", 2, 24, 17, 0], [1, "fo", 2, 29, 21, 0], [1, "fo", 1, 27, 32, 0], [1, "fo", 2, 30, 33, 0], [1, "fo", 1, 29, 28, 0], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, 20, 24, 0], [1, "fo", 2, 20, 26, 0], [1, "fo", 2, 23, 16, 0], [1, "fo", 2, 11, 25, 0], [1, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [1, "de", 34, 30, 18, 0], [1, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, 0], [1, "de", 36, 72, 23, 0], [1, "de", 35, 25, 18, 0], [1, "d", 1, 83, 41, 1], [1, "d", 1, 17, 40, 1], [1, "cs", 2, 224, 104, 1], [1, "cs", 0, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", 3, 216, 128, 1], [1, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, 1], [1, "s", 1, 217, 129, 1], [1, "s", 0, 218, 128, 1], [1, "s", 1, 217, 127, 1], [1, "s", 0, 217, 126, 1], [1, "s", 1, 217, 125, 1], [1, "s", 0, 216, 124, 1], [1, "s", 1, 215, 124, 1], [1, "s", 0, 214, 124, 1], [1, "s", 1, 213, 125, 1], [1, "s", 0, 213, 126, 1], [1, "plm", 2, 217, 130, 0], [1, "plm", 2, 212, 125, 0], [1, "p", 0, 214, 134, 1], [1, "s", 1, 211, 126, 1], [1, "b", 1, 45, 277, 0], [1, "b", 1, 50, 286, 0], [1, "b", 2, 51, 284, 0], [1, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [1, "b", 0, 52, 283, 0], [1, "b", 1, 51, 280, 0], [1, "g", 0, 45, 269, 1], [1, "p", 0, 55, 281, 1], [1, "b", 1, 5, 172, 0], [1, "b", 2, 6, 172, 0], [1, "t", 5, 6, 171, 0], [1, "t", 1, 5, 170, 0], [1, "t", 1, 5, 164, 0], [1, "t", 3, 6, 164, 0], [1, "b", 0, 6, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, 0], [1, "t", 4, 5, 166, 0], [1, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, 0], [1, "t", 0, 6, 169, 0], [1, "t", 4, 6, 170, 0], [1, "t", 0, 5, 167, 0], [1, "t", 2, 5, 169, 0], [1, "b", 0, 5, 168, 0], [1, "s", 1, 7, 153, 1], [1, "s", 2, 7, 151, 1], [1, "de", 5, 7, 152, 0], [1, "t", 1, 5, 154, 0], [1, "b", 0, 6, 154, 0], [1, "t", 2, 6, 155, 0], [1, "b", 2, 6, 156, 0], [1, "t", 2, 5, 157, 0], [1, "t", 4, 5, 155, 0], [1, "b", 0, 6, 157, 0], [1, "t", 1, 5, 156, 0], [1, "t", 5, 6, 158, 0], [1, "b", 2, 6, 159, 0], [1, "b", 0, 6, 162, 0], [1, "t", 4, 6, 163, 0], [1, "t", 4, 6, 161, 0], [1, "b", 1, 6, 160, 0], [1, "b", 2, 5, 163, 0], [1, "b", 2, 5, 158, 0], [1, "b", 2, 5, 161, 0], [1, "t", 1, 5, 162, 0], [1, "t", 1, 5, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", 2, 83, 178, 0], [1, "s", 1, 82, 177, 1], [1, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [1, "t", 3, 73, 174, 0], [1, "t", 5, 72, 175, 0], [1, "t", 5, 87, 173, 0], [1, "de", 2, 76, 175, 0], [1, "de", 3, 77, 171, 0], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", 1, 70, 174, 1], [1, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, 0], [1, "r", 50, 174, 0], [1, "r", 49, 174, 0], [1, "r", 52, 175, 0], [1, "r", 52, 176, 0], [1, "r", 51, 176, 0], [1, "r", 50, 176, 0], [1, "r", 49, 176, 0], [1, "r", 48, 175, 0], [1, "r", 47, 175, 0], [1, "r", 48, 176, 0], [1, "r", 69, 163, 0], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [1, "r", 73, 163, 0], [1, "r", 72, 163, 0], [1, "r", 73, 164, 0], [1, "r", 72, 164, 0], [1, "r", 71, 164, 0], [1, "r", 70, 164, 0], [1, "r", 69, 164, 0], [1, "r", 68, 164, 0], [1, "r", 68, 165, 0], [1, "r", 69, 165, 0], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [1, "r", 74, 164, 0], [1, "r", 73, 165, 0], [1, "r", 72, 166, 0], [1, "r", 71, 166, 0], [1, "r", 70, 166, 0], [1, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, 0], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [1, "r", 25, 165, 0], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, 0], [1, "r", 21, 165, 0], [1, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [1, "r", 25, 166, 0], [1, "r", 26, 166, 0], [1, "r", 27, 166, 0], [1, "r", 28, 166, 0], [1, "r", 28, 167, 0], [1, "r", 26, 167, 0], [1, "r", 25, 167, 0], [1, "r", 24, 167, 0], [1, "r", 23, 167, 0], [1, "r", 22, 167, 0], [1, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, 0], [1, "r", 28, 168, 0], [1, "r", 27, 168, 0], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [1, "r", 24, 168, 0], [1, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, 0], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [1, "r", 23, 169, 0], [1, "r", 22, 168, 0], [1, "r", 21, 167, 0], [1, "s", 1, 52, 174, 1], [1, "t", 3, 50, 177, 0], [1, "t", 4, 49, 177, 0], [1, "b", 0, 47, 174, 0], [1, "b", 0, 69, 166, 0], [1, "t", 2, 68, 166, 0], [1, "t", 5, 74, 163, 0], [1, "t", 1, 73, 162, 0], [1, "s", 0, 73, 166, 1], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, 1], [1, "p", 0, 61, 162, 1], [1, "p", 0, 42, 170, 1], [1, "p", 0, 20, 174, 1], [1, "p", 0, 16, 160, 1], [1, "b", 1, 23, 164, 0], [1, "b", 1, 28, 169, 0], [1, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, 0], [1, "t", 1, 15, 171, 0], [1, "t", 5, 13, 175, 0], [1, "t", 5, 19, 166, 0], [1, "t", 5, 26, 163, 0], [1, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [1, "b", 2, 30, 175, 0], [1, "t", 2, 24, 177, 0], [1, "b", 1, 37, 174, 0], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, 0], [1, "t", 4, 38, 169, 0], [1, "t", 4, 34, 173, 0], [1, "t", 5, 38, 175, 0], [1, "b", 2, 39, 173, 0], [1, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", 2, 35, 176, 1], [1, "s", 1, 41, 175, 1], [1, "b", 2, 53, 176, 0], [1, "t", 5, 55, 173, 0], [1, "t", 5, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", 2, 54, 163, 0], [1, "t", 3, 49, 165, 0], [1, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, 0], [1, "t", 4, 66, 162, 0], [1, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, 0], [1, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, 0], [1, "t", 5, 88, 163, 0], [1, "t", 1, 84, 166, 0], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, 0], [1, "s", 1, 57, 162, 1], [1, "b", 1, 39, 161, 0], [1, "b", 0, 34, 164, 0], [1, "b", 2, 54, 164, 0], [1, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, 0], [1, "t", 4, 63, 169, 0], [1, "t", 4, 63, 174, 0], [1, "t", 1, 62, 175, 0], [1, "t", 5, 40, 162, 0], [1, "t", 1, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, 0], [1, "s", 1, 63, 173, 1], [1, "s", 2, 40, 165, 1], [1, "b", 0, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, 0], [1, "de", 22, 83, 175, 0], [1, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, 0], [1, "de", 19, 68, 168, 0], [1, "de", 19, 65, 163, 0], [1, "de", 19, 75, 162, 0], [1, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, 0], [1, "de", 19, 87, 164, 0], [1, "de", 19, 61, 177, 0], [1, "de", 19, 59, 172, 0], [1, "de", 19, 59, 167, 0], [1, "de", 19, 53, 165, 0], [1, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, 0], [1, "de", 19, 48, 167, 0], [1, "de", 19, 47, 170, 0], [1, "de", 19, 41, 163, 0], [1, "de", 19, 37, 161, 0], [1, "de", 19, 36, 166, 0], [1, "de", 19, 36, 171, 0], [1, "de", 19, 34, 174, 0], [1, "de", 19, 40, 172, 0], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, 0], [1, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [1, "de", 19, 64, 181, 0], [1, "de", 19, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", 19, 30, 170, 0], [1, "de", 19, 17, 168, 0], [1, "de", 19, 14, 173, 0], [1, "de", 19, 12, 162, 0], [1, "de", 19, 9, 167, 0], [1, "de", 19, 20, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", 19, 83, 195, 0], [1, "de", 2, 85, 163, 0], [1, "de", 2, 80, 164, 0], [1, "de", 2, 84, 169, 0], [1, "de", 2, 55, 165, 0], [1, "de", 3, 46, 163, 0], [1, "de", 2, 66, 169, 0], [1, "de", 0, 63, 175, 0], [1, "de", 0, 34, 164, 0], [1, "de", 0, 18, 160, 0], [1, "de", 2, 40, 160, 0], [1, "de", 2, 53, 160, 0], [1, "de", 2, 14, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", 2, 23, 176, 0], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, 0], [1, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [1, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [1, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", 1, 44, 156, 0], [1, "t", 2, 45, 157, 0], [1, "b", 0, 75, 156, 0], [1, "t", 3, 76, 157, 0], [1, "t", 5, 62, 157, 0], [1, "t", 5, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", 4, 21, 156, 0], [1, "t", 4, 56, 159, 0], [1, "f", 1, 94, 153, 1], [1, "f", 2, 93, 153, 1], [1, "f", 2, 99, 153, 1], [1, "f", 1, 98, 153, 1], [1, "f", 0, 97, 153, 1], [1, "f", 1, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, 0], [1, "b", 3, 43, 281, 0], [1, "de", 50, 24, 39, 0], [1, "de", 50, 21, 39, 0], [1, "de", 50, 22, 43, 0], [1, "de", 50, 15, 34, 0], [1, "de", 50, 18, 26, 0], [1, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, 0], [1, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [1, "de", 50, 20, 41, 0], [1, "de", 50, 18, 21, 0], [1, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, 0], [1, "de", 50, 17, 17, 0], [1, "de", 50, 18, 10, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [1, "de", 50, 82, 39, 0], [1, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, 0], [1, "de", 50, 29, 42, 0], [1, "de", 9, 74, 37, 0], [1, "de", 9, 76, 22, 0], [1, "de", 10, 79, 24, 0], [1, "de", 11, 77, 17, 0], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [1, "de", 28, 27, 31, 0], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, 0], [1, "de", 51, 24, 155, 0], [1, "de", 51, 7, 154, 0], [1, "de", 51, 11, 154, 0], [1, "de", 51, 12, 156, 0], [1, "de", 51, 16, 154, 0], [1, "de", 51, 20, 154, 0], [1, "de", 51, 23, 154, 0], [1, "de", 51, 18, 157, 0], [1, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, 0], [1, "de", 51, 86, 154, 0], [1, "de", 51, 88, 156, 0], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [1, "de", 51, 67, 154, 0], [1, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [1, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, 0], [1, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, 0], [1, "de", 51, 49, 154, 0], [1, "de", 51, 46, 154, 0], [1, "de", 51, 44, 154, 0], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, 0], [1, "de", 51, 38, 154, 0], [1, "de", 51, 39, 156, 0], [1, "de", 51, 34, 154, 0], [1, "de", 5, 19, 142, 0], [1, "de", 5, 37, 147, 0], [1, "de", 7, 53, 147, 0], [1, "de", 6, 69, 150, 0], [1, "de", 4, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", 4, 28, 137, 0], [1, "de", 4, 15, 137, 0], [1, "de", 4, 48, 134, 0], [1, "de", 5, 67, 135, 0], [1, "de", 34, 84, 155, 0], [1, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, 0], [1, "de", 35, 56, 157, 0], [1, "de", 35, 65, 159, 0], [1, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, 0], [1, "de", 35, 8, 155, 0], [1, "de", 33, 13, 155, 0], [1, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, 0], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [1, "fo", 2, 45, 36, 0], [1, "fo", 2, 53, 34, 0], [1, "fo", 1, 51, 35, 0], [1, "fo", 1, 58, 35, 0], [1, "fo", 1, 33, 35, 0], [1, "fo", 1, 31, 33, 0], [1, "fo", 2, 29, 36, 0], [1, "fo", 2, 56, 36, 0], [1, "fo", 2, 60, 37, 0], [1, "fo", 2, 45, 32, 0], [1, "fo", 2, 22, 25, 0], [1, "fo", 2, 21, 35, 0], [1, "de", 52, 90, 208, 0], [1, "de", 18, 94, 250, 0], [1, "de", 17, 95, 253, 0], [1, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [1, "cs", 2, 138, 5, 1], [1, "cs", 2, 138, 6, 1], [1, "cs", 2, 139, 6, 1], [1, "cs", 2, 141, 6, 1], [1, "cs", 2, 140, 6, 1], [1, "la", 3, 143, 7, 1], [1, "la", 3, 139, 7, 1], [1, "cs", 0, 137, 7, 1], [1, "cs", 1, 138, 8, 1], [1, "cs", 2, 137, 6, 1], [1, "cs", 2, 137, 8, 1], [1, "cs", 2, 136, 7, 1], [1, "cs", 2, 138, 9, 1], [1, "cs", 3, 139, 9, 1], [1, "cs", 3, 136, 8, 1], [1, "cs", 3, 137, 9, 1], [1, "de", 53, 92, 165, 0], [1, "de", 53, 92, 180, 0], [1, "de", 53, 92, 188, 0], [1, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, 0], [1, "de", 54, 87, 153, 0], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, 0], [1, "de", 54, 82, 153, 0], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, 0], [1, "de", 54, 78, 153, 0], [1, "de", 54, 77, 153, 0], [1, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [1, "de", 54, 72, 153, 0], [1, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, 0], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, 0], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, 0], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, 0], [1, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [1, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, 0], [1, "de", 54, 53, 153, 0], [1, "de", 54, 52, 153, 0], [1, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, 0], [1, "de", 54, 49, 153, 0], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, 0], [1, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [1, "de", 54, 44, 153, 0], [1, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, 0], [1, "de", 54, 40, 153, 0], [1, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [1, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [1, "de", 54, 30, 153, 0], [1, "de", 54, 29, 153, 0], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [1, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, 0], [1, "de", 54, 20, 153, 0], [1, "de", 54, 19, 153, 0], [1, "de", 54, 18, 153, 0], [1, "de", 54, 17, 153, 0], [1, "de", 54, 16, 153, 0], [1, "de", 54, 15, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, 13, 153, 0], [1, "de", 54, 12, 153, 0], [1, "de", 54, 11, 153, 0], [1, "de", 54, 10, 153, 0], [1, "de", 54, 8, 153, 0], [1, "de", 54, 9, 153, 0], [1, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, 11, 0], [1, "de", 55, 83, 12, 0], [1, "de", 55, 83, 13, 0], [1, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, 0], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, 17, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, 18, 0], [1, "de", 55, 83, 20, 0], [1, "de", 55, 83, 21, 0], [1, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [1, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, 0], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, 0], [1, "de", 55, 83, 31, 0], [1, "de", 55, 83, 32, 0], [1, "de", 55, 83, 33, 0], [1, "de", 55, 83, 34, 0], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [1, "de", 55, 83, 37, 0], [1, "de", 55, 83, 38, 0], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, 0], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, 0], [1, "de", 55, 76, 38, 0], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [1, "de", 55, 74, 38, 0], [1, "de", 55, 72, 38, 0], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [1, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [1, "de", 55, 65, 38, 0], [1, "de", 55, 64, 38, 0], [1, "de", 55, 63, 38, 0], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [1, "de", 55, 61, 38, 0], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [1, "de", 55, 58, 38, 0], [1, "de", 55, 56, 38, 0], [1, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [1, "de", 55, 49, 38, 0], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [1, "de", 55, 43, 38, 0], [1, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, 0], [1, "de", 55, 39, 38, 0], [1, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, 0], [1, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [1, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [1, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, 0], [1, "de", 55, 23, 38, 0], [1, "de", 55, 21, 38, 0], [1, "de", 55, 22, 38, 0], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, 0], [1, "de", 55, 19, 37, 0], [1, "de", 55, 19, 36, 0], [1, "de", 55, 19, 35, 0], [1, "de", 55, 19, 34, 0], [1, "de", 55, 19, 33, 0], [1, "de", 55, 19, 32, 0], [1, "de", 55, 19, 31, 0], [1, "de", 55, 19, 30, 0], [1, "de", 55, 19, 28, 0], [1, "de", 55, 19, 29, 0], [1, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, 0], [1, "de", 55, 19, 25, 0], [1, "de", 55, 19, 24, 0], [1, "de", 55, 19, 23, 0], [1, "de", 55, 19, 22, 0], [1, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, 19, 18, 0], [1, "de", 55, 19, 19, 0], [1, "de", 55, 19, 16, 0], [1, "de", 55, 19, 17, 0], [1, "de", 55, 19, 15, 0], [1, "de", 55, 19, 14, 0], [1, "de", 55, 19, 13, 0], [1, "de", 55, 19, 12, 0], [1, "de", 55, 19, 11, 0], [1, "de", 55, 19, 10, 0], [1, "de", 55, 19, 9, 0], [1, "de", 55, 19, 8, 0], [1, "de", 55, 84, 35, 0], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, 0], [1, "de", 55, 84, 16, 0], [1, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, 9, 0], [1, "de", 50, 85, 11, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, 0], [1, "de", 55, 72, 39, 0], [1, "de", 55, 74, 39, 0], [1, "de", 55, 66, 39, 0], [1, "de", 55, 65, 39, 0], [1, "de", 50, 67, 41, 0], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, 0], [1, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, 0], [1, "de", 55, 36, 39, 0], [1, "de", 55, 32, 39, 0], [1, "de", 50, 31, 39, 0], [1, "de", 55, 23, 39, 0], [1, "de", 55, 18, 37, 0], [1, "de", 50, 18, 36, 0], [1, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, 0], [1, "de", 55, 18, 31, 0], [1, "de", 50, 18, 30, 0], [1, "de", 55, 18, 25, 0], [1, "de", 50, 18, 24, 0], [1, "de", 55, 18, 20, 0], [1, "de", 55, 18, 14, 0], [1, "de", 50, 18, 15, 0], [1, "de", 55, 18, 8, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [1, "de", 54, 76, 154, 0], [1, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [1, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, 0], [1, "de", 54, 42, 154, 0], [1, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [1, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [1, "de", 54, 10, 154, 0], [1, "de", 54, 8, 154, 0], [1, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [1, "de", 53, 93, 156, 0], [1, "de", 53, 93, 158, 0], [1, "de", 52, 91, 157, 0], [1, "de", 53, 93, 159, 0], [1, "de", 53, 93, 161, 0], [1, "de", 53, 93, 162, 0], [1, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, 0], [1, "de", 53, 93, 165, 0], [1, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, 0], [1, "de", 52, 91, 167, 0], [1, "de", 53, 93, 169, 0], [1, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, 0], [1, "de", 53, 93, 171, 0], [1, "de", 53, 93, 173, 0], [1, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, 0], [1, "de", 53, 92, 169, 0], [1, "de", 53, 93, 178, 0], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, 0], [1, "de", 53, 93, 187, 0], [1, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [1, "de", 53, 93, 192, 0], [1, "de", 53, 93, 195, 0], [1, "de", 53, 93, 194, 0], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, 0], [1, "de", 53, 93, 202, 0], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, 0], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, 0], [1, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, 0], [1, "de", 53, 93, 212, 0], [1, "de", 52, 91, 204, 0], [1, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, 0], [1, "de", 53, 93, 215, 0], [1, "de", 53, 93, 216, 0], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, 0], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, 0], [1, "de", 52, 92, 202, 0], [1, "de", 53, 92, 201, 0], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, 0], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [1, "de", 52, 92, 225, 0], [1, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, 0], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, 0], [1, "de", 52, 93, 182, 0], [1, "de", 52, 93, 185, 0], [1, "de", 52, 93, 172, 0], [1, "de", 52, 93, 174, 0], [1, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [1, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, 0], [1, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, 0], [1, "de", 52, 93, 230, 0], [1, "de", 52, 92, 228, 0], [1, "de", 53, 93, 235, 0], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, 0], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [1, "de", 52, 93, 242, 0], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, 0], [1, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, 0], [1, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [1, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [1, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [1, "de", 52, 93, 260, 0], [1, "de", 53, 93, 263, 0], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, 0], [1, "de", 52, 93, 278, 0], [1, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, 0], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, 0], [1, "de", 53, 93, 286, 0], [1, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [1, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, 0], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, 0], [1, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, 1], [1, "cs", 2, 223, 105, 1], [1, "cs", 2, 223, 102, 1], [1, "cs", 2, 223, 103, 1], [1, "la", 3, 141, 8, 1], [1, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [1, "de", 4, 81, 149, 0], [1, "f", 0, 83, 148, 1], [1, "f", 1, 82, 149, 1], [1, "de", 34, 81, 156, 0], [1, "de", 51, 17, 9, 0], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, 9, 0], [1, "cs", 3, 223, 106, 1], [1, "p", 0, 119, 279, 1], [1, "p", 0, 109, 242, 1], [1, "cs", 1, 29, 9, 1], [1, "cs", 2, 30, 9, 1], [1, "cs", 2, 31, 9, 1], [1, "cs", 2, 32, 9, 1], [1, "cs", 2, 33, 9, 1], [1, "cs", 2, 69, 9, 1], [1, "cs", 2, 71, 9, 1], [1, "cs", 2, 70, 9, 1], [1, "cs", 1, 72, 9, 1], [1, "cs", 2, 73, 9, 1], [1, "de", 10, 31, 10, 0], [1, "de", 10, 29, 10, 0], [1, "de", 10, 44, 10, 0], [1, "de", 4, 87, 10, 0], [1, "de", 4, 86, 10, 0], [1, "de", 5, 87, 9, 0], [1, "de", 5, 13, 10, 0], [1, "de", 4, 14, 11, 0], [1, "de", 4, 16, 10, 0], [1, "de", 4, 17, 10, 0], [1, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, 9, 1], [1, "cs", 2, 150, 9, 1], [1, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, 1], [1, "cs", 1, 149, 9, 1], [1, "cs", 1, 154, 9, 1], [1, "cs", 3, 147, 9, 1], [1, "cs", 3, 151, 9, 1], [1, "cs", 3, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [1, "cs", 3, 157, 9, 1], [1, "cs", 3, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [1, "cs", 3, 160, 9, 1], [1, "cs", 0, 161, 9, 1], [1, "cs", 2, 162, 9, 1], [1, "cs", 2, 163, 9, 1], [1, "cs", 1, 164, 9, 1], [1, "cs", 2, 165, 9, 1], [1, "cs", 3, 166, 9, 1], [1, "cs", 3, 168, 9, 1], [1, "cs", 3, 170, 9, 1], [1, "cs", 1, 169, 9, 1], [1, "cs", 2, 167, 9, 1], [1, "cs", 2, 171, 9, 1], [1, "cs", 2, 173, 9, 1], [1, "cs", 2, 172, 9, 1], [1, "cs", 2, 174, 9, 1], [1, "cs", 1, 175, 9, 1], [1, "cs", 3, 176, 9, 1], [1, "cs", 3, 178, 9, 1], [1, "cs", 3, 179, 9, 1], [1, "cs", 0, 180, 9, 1], [1, "cs", 2, 177, 9, 1], [1, "cs", 2, 182, 9, 1], [1, "cs", 2, 181, 9, 1], [1, "cs", 2, 183, 9, 1], [1, "cs", 2, 184, 9, 1], [1, "cs", 2, 185, 9, 1], [1, "cs", 2, 186, 9, 1], [1, "cs", 1, 187, 9, 1], [1, "cs", 2, 188, 9, 1], [1, "cs", 3, 189, 9, 1], [1, "cs", 3, 190, 9, 1], [1, "cs", 3, 191, 9, 1], [1, "cs", 2, 192, 9, 1], [1, "cs", 0, 193, 9, 1], [1, "cs", 2, 194, 9, 1], [1, "cs", 2, 196, 9, 1], [1, "cs", 2, 198, 9, 1], [1, "cs", 2, 200, 9, 1], [1, "cs", 3, 195, 9, 1], [1, "cs", 3, 197, 9, 1], [1, "cs", 3, 199, 9, 1], [1, "cs", 0, 201, 9, 1], [1, "cs", 2, 202, 9, 1], [1, "cs", 2, 203, 9, 1], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, 9, 1], [1, "cs", 3, 206, 9, 1], [1, "cs", 3, 205, 9, 1], [1, "cs", 3, 204, 9, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", 3, 215, 9, 1], [1, "cs", 3, 216, 9, 1], [1, "cs", 3, 217, 9, 1], [1, "cs", 3, 218, 9, 1], [1, "b", 0, 5, 159, 0], [1, "b", 0, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [2, "isl", 2, 119, 277, 0], [2, "isl", 2, 109, 244, 0], [2, "isl", 2, 114, 205, 0], [2, "isl", 1, 120, 150, 0], [2, "isl", 2, 154, 129, 0], [2, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, 0], [2, "isl", 1, 214, 128, 0], [2, "isl", 1, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, 19, 1], [1, "la", 0, 212, 18, 1], [1, "la", 4, 214, 18, 1], [1, "la", 4, 216, 19, 1], [1, "la", 4, 211, 20, 1], [1, "la", 3, 210, 19, 1], [1, "la", 3, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", 3, 214, 22, 1], [1, "la", 3, 214, 24, 1], [1, "la", 4, 214, 26, 1], [1, "la", 4, 213, 27, 1], [1, "la", 1, 212, 28, 1], [1, "la", 2, 212, 29, 1], [1, "la", 5, 212, 30, 1], [1, "la", 4, 208, 19, 1], [1, "la", 4, 207, 19, 1], [1, "la", 1, 206, 19, 1], [1, "la", 1, 205, 19, 1], [1, "la", 2, 204, 19, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, 17, 1]];
  const ns = ba;
  const os = 18;
  const ps = 2;
  const qs = 10;
  function rs(b, c, d) {
    const f = (0 << (b >> 16 & 255)) + (24 << (b >> 8 & 255)) + (16 << (b >> 24 & 255)) + (8 << (b & 255));
    const g = c ^ 48621;
    const h = cx(f, g, d ^ 2065);
    (function (b, c) {
      const d = ((51615 + b) * 1103515245 + 12345) % 2147483648;
      const f = (8 << (c >> 8 & 255)) + (16 << (c & 255)) + (0 << (c >> 16 & 255)) + (24 << (c >> 24 & 255));
      const g = Co(d, f, d, f, d);
      const h = function (a, b) {
        const c = a ^ 41530;
        const d = (b | 37695) & ~(b & 37695);
        const f = tx(c, d, c, d, c);
        (function (b, c, d, f, i, j) {
          const a = ~(d & 24142) & 24142 | ~(d & 24142) & d;
          const k = (52314 + f) % 65485;
          const m = i ^ 6018;
          const h = j ^ 4504;
          const l = $w(b ^ 63113, ~(c & 20532) & c | ~(c & 20532) & 20532);
          (function (b, c, d, f) {
            const g = b ^ 40378;
            const i = (0 << (c >> 0 & 255)) + (16 << (c >> 24 & 255)) + (24 << (c >> 16 & 255)) + (8 << (c >> 8 & 255));
            const a = (d | 39784) & ~(d & 39784);
            const j = function (b, c, d, f) {
              const g = b ^ 16437;
              const i = (16 << (c >> 16 & 255)) + (0 << (c >> 24 & 255)) + (8 << (c & 255)) + (24 << (c >> 8 & 255));
              const a = d ^ 61956;
              const j = f ^ 25101;
              const k = wb(g, i, a, j, g);
              (function (b, c, d) {
                const f = (0 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 16 & 255)) + (24 << (b & 255));
                const g = (16 << (c >> 8 & 255)) + (0 << (c >> 16 & 255)) + (24 << (c & 255)) + (8 << (c >> 24 & 255));
                const h = ~(d & 20517) & d | ~(d & 20517) & 20517;
                const a = function (b, c, d) {
                  const f = (64069 + b) % 65477;
                  const g = (c | 33773) & ~(c & 33773);
                  const h = (24 << (d >> 24 & 255)) + (0 << (d >> 8 & 255)) + (16 << (d >> 16 & 255)) + (8 << (d & 255));
                  const a = function (c, f, i, j, k, m) {
                    const a = (16 << (c >> 16 & 255)) + (0 << (c & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255));
                    const n = (0 << (f & 255)) + (16 << (f >> 16 & 255)) + (8 << (f >> 8 & 255)) + (24 << (f >> 24 & 255));
                    const o = ((2216 + i) * 2147483629 + 2147483587) % 2147483647;
                    const h = j ^ 46106;
                    const l = (k | 55530) & ~(k & 55530);
                    const g = ~(m & 32999) & m | ~(m & 32999) & 32999;
                    const p = function (c, d, f, i, j, k) {
                      const a = c ^ 38666;
                      const m = d ^ 44875;
                      const n = (16 << (f >> 16 & 255)) + (8 << (f >> 8 & 255)) + (24 << (f >> 24 & 255)) + (0 << (f >> 0 & 255));
                      const h = i ^ 839;
                      const l = ~(j & 65090) & j | ~(j & 65090) & 65090;
                      const g = cs(a, m, n, h, 0, (k | 779) & ~(k & 779));
                      const o = function (b, c, d, f, g) {
                        const h = ~(b & 56658) & 56658 | ~(b & 56658) & b;
                        const a = ~(c & 54030) & (c | 54030);
                        const i = tx(h, a, ~(d & 20228) & (d | 20228), (f + 47389) % 65444, ((50763 + g) * 2147483629 + 2147483587) % 2147483647);
                        Mf(h, a);
                        return i ^ 1194;
                      }(a, m, n, h, l);
                      return (0 << ((g ^ o) >> 24 & 255)) + (16 << ((g ^ o) & 255)) + (8 << ((g ^ o) >> 8 & 255)) + (24 << ((g ^ o) >> 16 & 255));
                    }(a, n, o, h, l, g);
                    const b = ed(a, n, o, h, l, g);
                    return (1013904223 + (43247 + (p ^ b)) * 1664525) % 4294967296;
                  }(f, g, h, f, g, h);
                  ds(f, g, h, f);
                  return a ^ 13058;
                }(f, g, h);
                const i = cs(f, g, h, f, 0, h);
              })(i, a, j);
              return k ^ 53643;
            }(g, i, a, (f | 4871) & ~(f & 4871));
            const k = fb(g, i, a);
          })(a, k, m, h);
        })(d, c, d, c, d, c);
        return ~(f & 18123) & (f | 18123);
      }(f, d);
    })(f, g);
    return ~(h & 42953) & h | ~(h & 42953) & 42953;
  }
  var ss = 0;
  var ts = {
    ᐃΔⲆᐃⵠ: ["#133A2B", "#042b30"],
    ᐃⲆΔⵠⲆⵠⵠⲆⲆ: ["#EBF2F0", "#136167"],
    ⵠᐃᐃΔΔⲆⲆ: ["#4EB687", "#187484"],
    ⵠⵠⲆᐃⵠΔⵠ: ["#664516", "#13474C"],
    ⵠⵠⲆΔⵠⵠΔ: ["#FCEFBB", "#0F4D48"],
    ⵠᐃΔᐃΔⲆΔ: ["#C1AA7E", "#0F423D"],
    ΔⵠⲆⵠⲆⲆΔ: ["#594837", "#163A3A"],
    ⲆⲆΔΔᐃⲆⵠ: ["#A5D6D6", "#539CA0"],
    ΔΔⲆⲆⲆ: ["#0B6A84", "#09373F"],
    ΔᐃⲆᐃᐃⵠᐃ: ["#2A8B9B", "#0F464C"],
    ⲆΔᐃⲆΔᐃΔ: ["#A9D6D3", "#115E60"],
    ⲆᐃΔⲆⲆⵠᐃ: ["#ECF7F9", "#539CA0"],
    ᐃΔⵠΔᐃΔᐃ: ["#FFF", "#FFF"],
    ⲆᐃⵠⲆᐃⵠⲆ: ["#FFF", "#FFF"],
    ᐃᐃⵠⲆⵠΔΔ: ["#1C9BA4", "#00272F"],
    ᐃᐃᐃⲆⵠ: ["#2D2017", "#031C1E"],
    ⲆΔΔ: 0,
    Δᐃᐃ: 1,
    ⲆⲆΔΔᐃⵠᐃⲆΔ: 2300,
    ⲆᐃⲆⵠⵠⲆΔⲆΔ: 2290,
    ⲆΔᐃⵠⲆᐃᐃ: 34,
    ΔⲆⲆⲆⲆΔⵠ: 5,
    Δᐃⵠᐃⵠⵠᐃ: 68,
    ΔᐃΔΔⵠΔᐃ: 34,
    ⵠᐃΔⲆⲆᐃⲆ: 5,
    ⵠᐃᐃᐃⲆⵠⲆ: 1,
    ⵠⵠⲆⵠΔⵠⵠ: 0.6,
    ⲆⵠⲆⲆⵠⵠΔ: 0.25,
    ᐃⵠΔΔᐃⵠΔ: 50,
    ΔᐃⲆᐃⵠⲆΔ: 10,
    ⲆⵠᐃᐃⲆᐃᐃ: 75,
    ⵠⵠᐃⲆΔⲆⵠ: 20,
    ᐃᐃⵠᐃᐃⲆᐃ: 5,
    ⵠΔᐃⲆⲆ: 0,
    ⵠΔⵠⲆⲆ: 1,
    ⲆΔΔⵠΔ: 2,
    ⵠⲆⵠΔⲆ: 3,
    ᐃⵠⵠⵠᐃ: 4,
    ⲆΔΔⵠⲆ: 5,
    ΔⵠⵠΔΔ: 6,
    ⵠⲆΔΔᐃ: 7,
    ΔⵠᐃⵠΔ: 8,
    ⲆᐃΔΔᐃ: 9,
    ⲆΔΔⲆᐃ: 10,
    ΔΔᐃⲆΔ: 11,
    ΔᐃΔᐃᐃ: 12,
    ⲆΔᐃⲆᐃ: 13,
    ᐃⵠᐃⲆΔ: 14,
    ⲆᐃⵠⵠⲆ: 15,
    ⵠⵠⲆΔᐃ: 16,
    ⲆᐃⲆⵠⲆ: 17,
    ⲆᐃΔⵠⲆ: 18,
    ⵠᐃⲆΔⲆ: 19,
    ᐃⲆⵠᐃᐃ: 20,
    ΔⵠᐃᐃⲆ: 21,
    ⲆⵠΔⲆᐃ: 22,
    ⲆⲆΔⵠᐃ: 23,
    ⲆᐃⲆⵠΔ: 24,
    ΔᐃⵠΔⵠ: 25,
    ΔᐃⲆⵠᐃ: 26,
    ⲆⵠΔᐃⵠ: 27,
    ⲆᐃⵠⲆᐃ: 28,
    Ⲇⵠᐃⵠ: 29,
    ᐃⵠⵠⲆᐃ: 30,
    ⲆⲆⵠᐃⲆ: 31,
    ΔⲆᐃⲆⲆ: 32,
    ᐃⵠⲆⵠⵠ: 33,
    ⲆⲆΔⵠΔ: 34,
    ᐃⵠⲆᐃΔ: 35,
    ᐃᐃΔᐃⲆ: 36,
    ⵠⲆᐃⵠⵠ: 37,
    ⲆⲆΔΔⵠ: 38,
    ᐃⲆΔΔⵠ: 39,
    ⵠᐃᐃⵠΔ: 40,
    ⵠⲆⲆⲆΔ: 41,
    ᐃⲆᐃΔⲆ: 42,
    ⲆΔᐃⲆⵠ: 43,
    ⲆⵠⲆⲆⲆ: 44,
    ΔᐃᐃᐃⲆ: 45,
    ΔⲆⵠΔΔ: 46,
    ΔᐃⵠΔΔ: 47,
    Δⵠᐃⵠᐃ: 48,
    ᐃⲆⵠΔⵠ: 49,
    ᐃⲆⵠⲆⵠ: 50,
    ΔΔⲆᐃⲆ: 51,
    ⵠⵠᐃⵠⲆ: 52,
    ΔⵠᐃΔⲆ: 53,
    ΔⵠⲆᐃΔ: 54,
    ᐃⲆⵠⵠⲆ: 55,
    ⵠᐃⵠΔΔ: 56,
    ⲆⵠᐃᐃⲆ: 57,
    ⵠᐃⵠⵠⲆ: 58,
    ΔⲆⲆⵠΔ: 59,
    ⵠⵠΔᐃΔ: 60,
    ᐃᐃⲆⲆⵠ: 61,
    ⲆΔⲆΔᐃ: 62,
    ΔⲆᐃᐃⵠ: 63,
    ᐃⲆⵠⵠΔ: 64,
    ΔΔⵠΔⲆ: 65,
    ⵠⲆΔⵠΔ: 66,
    ⲆᐃΔⵠⵠ: 67,
    ⲆΔᐃΔⵠ: 68,
    ᐃΔⵠΔⵠ: 69,
    ⵠⵠⲆΔⲆ: 70,
    ᐃⵠᐃⵠΔ: 71,
    ΔΔᐃΔⵠ: 72,
    ⵠⲆⲆᐃⵠ: 73,
    ΔᐃⵠⵠⲆ: 74,
    ᐃΔⲆΔⵠ: 75,
    ᐃᐃᐃᐃᐃ: 76,
    ⲆΔⵠⵠΔ: 77,
    ⵠⵠⲆⲆᐃ: 78,
    ΔΔⵠⲆⲆ: 79,
    ⲆᐃⵠΔⲆ: 80,
    ⲆⵠᐃⵠⲆ: 81,
    ⲆΔᐃⵠᐃ: 82,
    Δᐃⵠⵠⵠ: 83,
    ᐃᐃᐃⵠⲆ: 84,
    ΔⵠΔⵠⵠ: 85,
    ⵠⵠᐃΔᐃ: 86,
    ΔⲆΔΔΔ: 87,
    ⲆᐃⲆΔΔ: 88,
    ᐃᐃⵠⵠⲆ: 89,
    ⲆⲆⲆΔᐃ: 90,
    ⲆⲆⵠⲆΔ: 91,
    ⲆᐃⵠⲆⵠ: 92,
    ⵠⲆᐃΔᐃ: 93,
    ⲆⲆᐃΔᐃ: 94,
    ᐃⲆΔⵠᐃ: 95,
    ⵠⲆⵠᐃⲆ: 96,
    ᐃᐃΔⵠⲆ: 97,
    ⵠⲆᐃᐃᐃ: 98,
    ⵠΔᐃΔᐃ: 99,
    ΔⵠⲆⵠⲆᐃᐃΔⵠ: 100,
    ᐃΔΔⵠΔ: 101,
    ⵠⵠⵠᐃⵠ: 102,
    ᐃⲆⲆᐃΔ: 103,
    ⵠΔΔΔⲆ: 104,
    ᐃⲆⲆⲆⵠ: 105,
    ᐃΔᐃⵠⵠ: 106,
    ⲆⲆΔᐃᐃ: 107,
    ΔΔΔᐃᐃ: 108,
    ΔⲆΔⲆ: 109,
    ⲆΔⵠⲆΔ: 110,
    ΔᐃⲆΔ: 111,
    ΔⵠⵠⲆ: 112,
    ⲆⵠᐃⲆⵠⵠⵠ: 113,
    ⵠᐃᐃⲆΔ: 114,
    ⵠⵠΔⵠΔᐃⲆ: 115,
    ᐃⲆᐃⵠΔ: 116,
    ⵠⵠⲆΔΔ: 117,
    ⲆⲆΔΔᐃΔⵠ: 118,
    ΔⵠⵠⵠⵠⲆⵠ: 119,
    ΔᐃⲆᐃΔ: 120,
    ⵠᐃΔΔ: 121,
    ΔⵠⵠΔⲆ: 122,
    ᐃᐃⲆⵠⲆ: 123,
    ΔⲆⲆΔᐃΔⵠ: 124,
    ΔᐃⵠⲆᐃ: 125,
    ᐃⵠᐃⲆⲆ: 126,
    ᐃᐃⲆᐃΔ: 127,
    ⵠⵠⵠⲆᐃ: 128,
    ΔᐃᐃⲆⵠ: 129,
    ᐃΔᐃᐃⵠ: 130,
    ⵠᐃΔᐃᐃ: 131,
    ΔⲆᐃᐃⲆ: 132,
    ΔᐃᐃΔΔ: 133,
    ⵠⵠΔΔⲆ: 134,
    ΔⵠᐃⲆΔ: 135,
    ᐃΔⲆⵠΔ: 136,
    Δⵠⵠᐃᐃ: 137,
    ⲆⲆⵠⵠⲆ: 138,
    ᐃΔⵠᐃⵠ: 139,
    ⵠᐃⵠᐃΔⵠΔ: 140,
    ⲆⵠⲆⲆΔ: 141,
    ⵠⵠΔᐃᐃⲆᐃ: 142,
    ⲆⵠΔΔΔⵠᐃ: 143,
    ΔⵠΔⵠΔⲆᐃ: 144,
    ΔⲆⲆᐃᐃΔΔ: 145,
    ⵠᐃᐃΔΔ: 146,
    ᐃᐃⵠⲆⲆ: 147,
    ΔΔΔⲆⲆ: 148,
    ΔⵠΔΔᐃ: 149,
    ΔΔⵠⵠᐃ: 150,
    ᐃⵠᐃⲆⵠ: 151,
    ⲆᐃⲆΔⵠ: 152,
    ⲆⲆᐃΔⲆ: 153,
    ⵠⵠⵠⲆⲆ: 154,
    ⵠΔᐃⵠΔ: 155,
    ⵠᐃⵠΔᐃ: 156,
    ⵠΔᐃᐃⲆ: 157,
    ⵠⲆᐃⲆᐃ: 158,
    Δᐃⵠᐃⵠ: 159,
    ᐃⵠⵠⵠⲆ: 160,
    ᐃⵠΔᐃⲆ: 161,
    ⲆⵠΔΔⵠ: 162,
    ΔΔⲆᐃΔ: 163,
    ⵠⵠΔⲆⵠ: 164,
    ⵠⲆⵠⲆⵠ: 165,
    ᐃⵠΔΔΔⵠⲆ: 166,
    ᐃⲆⲆⲆⲆ: 167,
    ⲆΔⵠⵠⵠ: 168,
    ⲆⲆΔΔΔ: 169,
    ᐃⵠⵠᐃᐃ: 170,
    ⵠⲆⵠᐃⵠⲆⲆ: 171,
    ᐃΔΔΔΔⲆᐃ: 172,
    ⵠᐃⵠⵠΔⲆΔ: 173,
    ΔⵠᐃΔⵠ: 174,
    ΔⵠΔᐃΔᐃΔ: 175,
    ⲆΔⲆⲆᐃᐃⵠ: 176,
    ᐃⲆΔΔⵠΔⲆ: 177,
    ⵠᐃⲆⲆΔΔⲆ: 178,
    ⲆΔΔΔΔΔΔ: 179,
    ᐃᐃᐃⲆⵠᐃᐃ: 180,
    ΔⵠΔΔⲆⵠⲆ: 181,
    ᐃⲆᐃⲆⵠⲆⲆ: 182,
    ⵠΔⵠⲆᐃ: 183,
    ⲆⲆⲆΔΔ: 184,
    ⲆᐃᐃΔⵠ: 185,
    ᐃΔᐃⲆᐃ: 186,
    ⲆⵠᐃⲆᐃ: 187,
    ⲆΔΔΔⵠⲆⵠ: 188,
    ⲆΔᐃⵠⲆ: 189,
    ΔΔⵠⵠⵠ: 190,
    ΔΔⵠᐃΔⵠΔ: 191,
    ΔᐃⵠⵠΔ: 192,
    ⵠⲆΔⵠⵠⵠⵠ: 193,
    ΔΔᐃⵠⵠ: 194,
    ⲆΔΔΔⲆ: 195,
    ᐃⲆΔΔᐃⵠΔ: 196,
    ᐃΔᐃⲆⲆⲆΔ: 197,
    ⵠⲆΔΔⵠ: 198,
    ⲆᐃᐃΔΔ: 199,
    ⵠⲆΔΔⲆⲆⲆ: 200,
    ᐃⵠᐃᐃⵠ: 201,
    ΔᐃΔⵠ: 202,
    ⵠⲆΔⲆᐃ: 203,
    ᐃᐃⲆΔΔΔⲆ: 204,
    ᐃᐃᐃⲆⲆ: 205,
    ⲆⲆΔⵠᐃⲆΔ: 206,
    ⲆⵠᐃⲆⵠ: 207,
    ΔΔⲆΔⲆᐃⵠ: 208,
    ᐃⵠⲆⵠⲆ: 209,
    ⲆΔⲆⵠΔⵠⵠ: 210,
    ΔⲆᐃᐃᐃⲆⲆ: 211,
    ᐃⵠⲆⲆᐃ: 212,
    ᐃⵠⲆᐃᐃ: 213,
    Δⵠᐃⵠⵠ: 214,
    ⵠⵠⵠⲆΔ: 215,
    ⵠⵠⵠⵠᐃ: 216,
    ⵠΔⵠΔᐃ: 217,
    ᐃΔᐃΔᐃ: 218,
    ΔΔΔΔⲆ: 219,
    ᐃⵠⵠᐃⲆ: 220,
    ⵠΔΔΔⵠ: 221,
    ⲆΔᐃᐃΔ: 222,
    ⲆⲆⲆᐃⵠ: 223,
    ⲆⵠⲆΔⵠ: 224,
    ⵠΔΔⲆᐃᐃⲆ: 225,
    ΔⲆΔⵠΔⵠⵠ: 226,
    ⵠᐃⵠⲆΔ: 227,
    ᐃΔⲆΔⲆΔΔ: 228,
    ⵠΔᐃᐃⵠ: 229,
    ⲆᐃᐃᐃⲆ: 230,
    ⵠᐃΔΔΔ: 231,
    ᐃΔⵠⵠΔ: 232,
    ᐃΔᐃⵠⲆ: 233,
    ⲆⵠΔⲆΔⵠⵠ: 234,
    ⵠΔΔᐃⵠ: 235,
    ⵠⵠᐃΔⲆ: 236,
    ⲆᐃΔⵠΔ: 237,
    ⲆᐃΔᐃⲆ: 238,
    ᐃⵠΔⵠΔ: 239,
    ᐃΔⲆⵠⲆ: 240,
    ᐃᐃᐃΔΔ: 241,
    ⵠⲆⲆⵠᐃ: 242,
    ΔⵠⲆΔᐃΔⵠ: 243,
    ΔᐃΔⵠΔ: 244,
    ΔᐃⵠⲆⲆ: 245,
    ⵠⲆᐃᐃΔΔⵠ: 246,
    ⲆΔⲆᐃⲆ: 247,
    ⲆⵠᐃⲆⲆ: 248,
    ⲆⵠⲆⲆⵠⵠᐃ: 249,
    ΔΔⵠΔⵠ: 250,
    ⵠΔΔⵠⵠ: 251,
    ΔΔᐃᐃᐃⲆᐃ: 252,
    ΔⵠⵠⲆⵠΔⵠ: 253,
    ᐃⲆᐃⲆⵠᐃⲆ: 254,
    ᐃⲆΔⲆᐃᐃΔ: 255,
    ᐃΔⵠᐃⲆⲆᐃ: 256,
    ⵠΔΔᐃⲆⲆⵠ: 257,
    ⵠⲆᐃⲆⲆⲆⲆ: 258,
    ⵠᐃᐃΔⵠⵠⲆ: 259,
    ⲆΔⲆΔⵠ: 260,
    ᐃᐃᐃⵠΔΔΔ: 261,
    ᐃⲆΔⵠΔᐃᐃ: 262,
    ΔⵠᐃᐃᐃⲆΔ: 263,
    ⲆⲆⲆᐃΔ: 264,
    ᐃⵠⲆⵠⵠᐃⲆ: 265,
    ᐃᐃⲆⵠⵠΔⲆ: 266,
    ⲆᐃⵠΔᐃⵠΔ: 267,
    ⵠᐃᐃⵠᐃᐃᐃ: 268,
    ᐃⵠⲆΔⵠᐃΔ: 269,
    ΔΔⵠⲆⵠⲆᐃ: 270,
    ⵠⲆⲆⲆᐃᐃᐃ: 271,
    ⵠΔΔⵠⲆᐃⵠ: 272,
    ΔΔⵠΔⵠΔⵠ: 273,
    ⲆΔΔᐃⵠΔΔ: 274,
    ⵠΔᐃⵠᐃⲆⵠ: 275,
    ⲆⲆᐃⲆΔᐃⵠ: 276,
    ⲆᐃᐃⵠⲆⵠΔ: 277,
    ⲆⲆⲆⵠⵠᐃⵠ: 278,
    ⵠᐃΔⲆ: 279,
    ⲆΔⵠΔΔ: 280,
    ΔᐃⲆΔⵠᐃᐃ: 281,
    ⲆᐃΔΔⵠΔᐃ: 282,
    ⵠᐃ: 283,
    ᐃᐃⵠⵠΔΔⵠ: 284,
    ΔᐃᐃΔᐃ: 285,
    ᐃᐃⵠⵠᐃ: 286,
    ⲆⵠΔⲆᐃⲆⵠ: 287,
    ΔⵠᐃΔᐃ: 288,
    ⵠΔΔⵠⲆΔΔ: 289,
    ⲆΔⵠᐃⲆⲆᐃ: 290,
    ⵠⵠΔᐃⲆⵠᐃ: 291,
    ᐃΔⲆⵠⵠⲆⵠ: 292,
    ⲆⲆⵠⵠΔᐃᐃ: 293,
    ⵠΔⵠⲆⵠ: 294,
    ᐃⲆΔΔᐃΔΔ: 295,
    ᐃⵠΔⲆΔᐃⵠ: 296,
    ΔⲆᐃⵠⵠΔⵠ: 297,
    ⵠᐃⵠΔΔⲆᐃ: 298,
    ΔⲆᐃⵠⲆ: 299,
    ⲆⵠΔΔᐃⵠΔ: 300,
    ᐃΔⲆⵠᐃⵠᐃ: 301,
    ᐃⵠⵠᐃⲆⵠⵠ: 302,
    ⲆᐃΔⵠΔΔⵠ: 303,
    ⵠᐃⵠⵠⲆᐃᐃ: 304,
    ⵠⲆΔᐃΔⲆΔ: 305,
    ᐃΔΔΔⵠⲆᐃ: 306,
    ⲆΔᐃΔⲆ: 307,
    ⲆᐃΔᐃᐃΔΔ: 308,
    ΔΔⵠᐃᐃⵠᐃ: 309,
    ΔᐃΔⲆⲆⵠΔ: 310,
    ⵠΔΔⲆⲆΔⲆ: 311,
    ΔⲆᐃΔᐃⵠΔ: 312,
    ΔᐃⲆΔᐃᐃⵠ: 313,
    ᐃⵠΔⲆⵠᐃⲆ: 314,
    ᐃᐃΔⲆⲆᐃΔ: 315,
    Δⵠᐃᐃⵠᐃᐃ: 316,
    ᐃⵠΔⲆΔⵠΔ: 317,
    ⵠᐃᐃᐃⵠΔⵠ: 318,
    ⲆⵠⲆΔⵠⲆⵠ: 319,
    ⵠⲆᐃⲆᐃᐃᐃ: 320,
    ᐃᐃΔⲆΔ: 321,
    ΔⵠᐃΔⲆⵠⲆ: 322,
    ⵠⵠⵠᐃⲆᐃᐃ: 323,
    ⵠΔⲆΔⲆⲆⲆ: 324,
    ⲆⵠΔⲆⵠⲆΔ: 325,
    ⲆᐃΔΔᐃⲆⵠ: 326,
    ⵠᐃΔⵠⵠⲆᐃ: 327,
    ⲆⵠⵠⲆⲆΔΔ: 328,
    ΔΔⵠⲆΔⲆⲆ: 329,
    ⵠᐃⲆᐃⵠⵠⲆ: 330,
    ⲆΔⵠΔᐃᐃΔ: 331,
    ⵠⲆᐃᐃⲆΔᐃ: 332,
    ⲆᐃΔΔΔᐃΔ: 333,
    ᐃⲆⵠⵠᐃᐃΔ: 334,
    ΔⵠᐃⲆᐃⲆⲆ: 335,
    ᐃⵠⵠⵠΔΔⲆ: 336,
    ⲆⵠⵠᐃΔⲆⲆ: 337,
    ᐃΔᐃⲆⵠⲆⲆ: 338,
    ⲆᐃΔⲆⲆⵠⵠ: 339,
    ᐃⵠⵠⲆⲆⵠᐃ: 340,
    ⵠΔᐃⵠⵠᐃⵠ: 341,
    ᐃΔᐃΔΔΔᐃ: 342,
    ᐃⲆⵠᐃⵠΔΔ: 343,
    ΔᐃⵠⲆΔⵠⲆ: 344,
    ⵠⲆᐃΔᐃⵠⵠ: 345,
    ⲆΔⵠᐃⲆΔᐃ: 346,
    ⵠᐃΔᐃⲆΔΔⲆᐃ: 347,
    ΔΔΔΔᐃⵠⲆ: 348,
    ᐃᐃⵠⵠⲆⲆⵠ: 349,
    ⲆᐃΔΔΔᐃⵠ: 350,
    ⵠⵠⵠᐃⵠᐃᐃ: 351,
    ⲆᐃᐃΔΔᐃⲆ: 352,
    ⵠᐃᐃⲆᐃⲆᐃ: 353,
    ⲆⵠⵠᐃⵠⲆᐃ: 354,
    ⲆΔⲆⲆΔⵠⲆ: 355,
    ΔᐃⲆΔⲆΔᐃ: 356,
    ΔΔΔⲆⲆⵠⲆ: 357,
    ⵠᐃⲆⲆⵠᐃⲆ: 358,
    ⲆΔⲆΔᐃΔΔ: 359,
    ΔΔⲆⲆᐃΔⲆ: 360,
    ⵠⵠᐃᐃⵠᐃⵠ: 361,
    ⵠⲆᐃΔⲆⲆΔ: 362,
    ⲆⵠⲆⲆⲆΔⲆ: 363,
    ᐃᐃⲆᐃᐃⵠᐃ: 364,
    ⵠᐃⵠᐃⵠⵠⲆ: 365,
    ⲆᐃΔⲆⲆᐃⲆ: 366,
    ΔΔΔᐃΔᐃⵠ: 367,
    ⵠⲆᐃⵠᐃΔΔ: 368,
    ⵠΔⵠⲆᐃⵠΔ: 369,
    ᐃΔⵠΔᐃⲆⵠ: 370,
    ᐃⲆΔⲆⵠᐃⵠ: 371,
    ⵠⵠΔΔⵠᐃⲆ: 372,
    ᐃⲆⵠⲆᐃΔᐃ: 373,
    ΔΔⵠᐃⵠΔΔ: 374,
    ⲆᐃⲆⲆΔᐃᐃ: 375,
    ⵠΔᐃᐃᐃᐃⲆ: 376,
    ᐃⵠⵠΔⵠⵠⲆ: 377,
    ⵠⲆⵠⵠᐃⲆⲆ: 378,
    ΔⲆᐃᐃΔᐃⲆ: 379,
    ⲆΔᐃⲆᐃΔᐃ: 380,
    ⲆⵠⵠⵠⵠΔΔ: 381,
    ⵠⲆⲆΔⵠⵠⲆ: 382,
    ⵠⵠᐃⵠⵠΔⵠ: 383,
    ᐃⲆΔᐃΔⵠⵠ: 384,
    ΔⲆᐃᐃⵠᐃⲆ: 385,
    ᐃⵠᐃⲆΔΔⵠ: 386,
    ⲆᐃⵠΔⵠᐃᐃ: 387,
    ΔΔΔⲆΔⵠⵠ: 388,
    ⲆΔⵠⵠⵠΔᐃ: 389,
    ᐃⲆⲆⵠⲆⲆⵠ: 390,
    ΔⲆᐃΔⲆᐃⵠ: 391,
    ⲆⵠΔΔⲆᐃⲆ: 392,
    ⵠⲆΔΔⵠᐃᐃ: 393,
    ⵠᐃᐃΔΔⲆᐃ: 394,
    ᐃΔᐃⵠⵠᐃⲆ: 395,
    ⵠΔⵠⵠᐃⲆⲆ: 396,
    ⲆⵠⵠⲆⵠⲆΔ: 397,
    ⲆᐃⲆΔᐃⲆᐃ: 398,
    ΔᐃᐃⵠⲆᐃᐃ: 399,
    ⵠᐃⲆΔΔΔᐃ: 400,
    ⲆΔᐃΔᐃᐃᐃ: 401,
    ᐃⵠⵠᐃᐃᐃⵠ: 402,
    ΔⵠⵠΔⲆⲆⲆ: 403,
    ᐃΔᐃΔΔᐃΔ: 404,
    ΔΔᐃᐃᐃⵠⵠ: 405,
    ⲆᐃΔⵠⲆᐃⵠ: 406,
    ⵠΔΔⲆΔᐃᐃ: 407,
    ᐃΔᐃⲆⵠᐃᐃ: 408,
    ⵠⵠΔΔΔⲆΔ: 409,
    ᐃΔⲆⵠΔⲆⲆ: 410,
    ⲆⲆΔΔⵠⵠᐃ: 411,
    ᐃΔⵠᐃⲆⵠᐃ: 412,
    ΔⲆⵠᐃᐃ: 413,
    ΔᐃᐃⵠⵠⲆⲆᐃⵠ: 414,
    ⵠⲆⵠΔⵠ: 415,
    ᐃⵠᐃΔΔ: 416,
    ΔΔΔΔᐃᐃⲆΔⲆ: 417,
    ⲆⲆⵠΔΔΔᐃ: 418,
    ⲆᐃΔΔⲆ: 419,
    ⵠⲆΔⵠᐃⲆΔ: 420,
    ⵠⵠⲆⲆΔⵠᐃ: 421,
    ΔⲆⵠΔⵠⲆΔ: 422,
    ⵠᐃⲆᐃΔⵠᐃ: 423,
    ⲆᐃΔΔᐃᐃⲆ: 424,
    ΔⲆᐃⲆᐃΔⲆ: 425,
    ΔΔⵠΔᐃΔᐃ: 426,
    ΔᐃΔΔᐃΔᐃ: 427,
    ⲆᐃΔⲆᐃᐃⲆ: 428,
    ⲆⵠΔᐃΔΔⲆ: 429,
    ᐃᐃⵠᐃⵠⵠⵠ: 430,
    ᐃⲆⵠΔΔᐃΔ: 431,
    ⵠΔⵠΔⲆⲆᐃ: 432,
    ⲆΔᐃᐃⲆⲆⵠ: 433,
    ⵠᐃⲆⲆⲆᐃΔ: 434,
    ᐃΔⵠⵠⲆⵠΔ: 435,
    ΔᐃΔⵠΔΔⵠ: 436,
    ΔᐃⵠΔΔⲆΔ: 437,
    ΔⵠᐃᐃᐃⲆⵠ: 438,
    ⲆᐃᐃΔᐃΔΔ: 439,
    ᐃⲆⲆⲆⵠΔΔ: 440,
    ⲆΔⲆΔΔΔⲆ: 441,
    ΔⲆᐃⲆᐃᐃⲆ: 442,
    ⲆⲆΔⵠΔⵠⵠ: 443,
    ⲆⲆΔⵠΔᐃⲆⵠΔ: 444,
    ᐃΔⵠᐃⲆ: 445,
    ΔᐃⵠⵠⵠⲆᐃ: 446,
    ⲆᐃΔΔⵠⲆᐃ: 447,
    ᐃᐃᐃᐃⲆᐃⲆⵠⲆ: 448,
    ⵠⵠΔᐃᐃ: 449,
    ⵠⵠΔⲆⲆ: 450,
    ⲆⲆᐃΔΔΔᐃ: 451,
    ⲆΔⵠᐃⲆΔⲆ: 452,
    ΔᐃΔⵠⲆᐃⵠ: 453,
    ⲆΔᐃᐃⲆⵠⲆ: 454,
    ΔⲆⵠΔΔᐃⲆ: 455,
    ΔΔⵠⲆⵠⵠⵠ: 456,
    ⵠⵠⵠᐃᐃⵠᐃ: 457,
    ⲆΔⲆⵠⵠᐃⵠ: 458,
    ᐃᐃⲆᐃΔⵠᐃ: 459,
    ⲆᐃⵠᐃᐃⵠΔ: 460,
    ⵠⵠΔΔΔⲆⵠ: 461,
    ᐃⲆⵠⲆᐃΔΔ: 462,
    ⲆⲆΔⵠⲆⵠᐃ: 463,
    Δᐃⵠⵠⵠⵠᐃ: 464,
    ΔⵠΔⵠⲆᐃⵠ: 465,
    ᐃⵠΔⵠⲆⵠᐃ: 466,
    ⲆⲆᐃⵠⲆᐃΔ: 467,
    ⵠⲆⲆᐃⵠⲆⲆ: 468,
    ΔΔⲆⵠⵠᐃᐃ: 469,
    ΔᐃΔΔⵠΔⵠ: 470,
    ᐃᐃⵠⲆΔⲆᐃ: 471,
    ΔᐃᐃⲆⲆⲆⲆ: 472,
    ΔᐃΔⵠᐃᐃᐃ: 473,
    ⵠⵠⲆΔᐃⵠᐃ: 474,
    ΔΔᐃΔⵠΔⲆ: 475,
    ᐃⵠⲆⲆⲆⲆᐃ: 476,
    ΔΔΔᐃΔᐃΔ: 477,
    ᐃᐃⵠᐃᐃⵠᐃ: 478,
    ΔᐃᐃΔᐃᐃⲆ: 479,
    ⲆᐃⲆΔⲆΔⲆ: 480,
    ⲆΔⲆⵠⲆᐃⵠ: 481,
    ᐃΔⲆⲆΔⵠᐃ: 482,
    ⵠΔᐃᐃⵠⲆⵠ: 483,
    ᐃⵠΔⵠΔⲆⲆ: 484,
    ⵠⲆΔⲆⵠᐃᐃ: 485,
    ⲆᐃΔⵠΔⵠΔ: 486,
    ΔᐃᐃᐃᐃΔⲆ: 487,
    ⵠⲆⲆΔΔⵠⲆ: 488,
    ᐃⲆⲆᐃΔᐃΔ: 489,
    ΔᐃΔΔᐃⲆᐃ: 490,
    ΔⵠⲆⵠΔⵠΔ: 491,
    ⵠⵠⵠⲆΔⵠᐃ: 492,
    ⵠᐃΔᐃⵠΔᐃ: 493,
    ⲆⵠⲆⵠⵠⵠᐃ: 494,
    ΔᐃΔΔᐃⵠⲆ: 495,
    ΔⲆⵠΔⵠⵠΔ: 496,
    ⲆⲆᐃᐃⲆΔⲆ: 497,
    ⵠΔⵠⲆⵠΔΔ: 498,
    ⲆΔᐃᐃⵠⲆⵠ: 499,
    ⵠⵠΔⲆⵠΔᐃ: 500,
    ΔⲆΔⲆⲆΔᐃ: 501,
    ⵠᐃᐃⲆΔᐃᐃ: 502,
    ⲆⵠⵠⵠΔⵠΔ: 503,
    ᐃⵠⲆⵠᐃᐃΔ: 504,
    ᐃⲆⲆⲆⵠⲆΔ: 505,
    ᐃⵠⵠΔⵠΔΔ: 506,
    ΔⵠΔⵠⲆᐃⵠ: 507,
    ΔⲆⵠᐃⲆΔⵠ: 508,
    ⵠΔⵠΔⲆᐃⲆ: 509,
    ⲆΔⲆⵠⵠΔⵠ: 510,
    ⲆᐃⲆᐃᐃΔⲆ: 511,
    ⲆᐃⲆᐃᐃᐃΔ: 512,
    ⵠⵠᐃΔⲆⲆⲆ: 513,
    ᐃⲆᐃⲆⵠᐃⵠ: 514,
    ᐃᐃⵠⲆⵠΔⲆ: 515,
    ΔᐃᐃⲆΔⵠᐃ: 516,
    ᐃⵠⲆΔⲆΔΔ: 517,
    ⲆⵠⲆᐃΔⲆΔ: 518,
    ᐃΔᐃΔᐃᐃΔ: 519,
    ΔΔⵠⵠΔⲆⲆ: 520,
    ⵠΔⵠⲆⵠᐃⵠ: 521,
    ⲆᐃⲆᐃΔⲆⵠ: 522,
    ᐃⲆⵠⲆⲆᐃΔ: 523,
    ᐃⵠΔᐃᐃⲆΔ: 524,
    ⲆⲆΔᐃΔΔⵠ: 525,
    ΔᐃᐃᐃⲆⲆΔ: 526,
    ΔⲆⵠⵠⵠᐃⲆ: 527,
    ⵠΔⲆⵠᐃᐃⵠ: 528,
    ⲆΔⵠⵠΔⵠⵠ: 529,
    ⵠᐃⲆⲆᐃⵠⵠ: 530,
    ⲆΔⲆⵠᐃⵠᐃ: 531,
    ⲆΔⲆⲆⲆΔᐃ: 532,
    ⵠΔⵠⵠᐃᐃⵠ: 533,
    ⲆᐃΔᐃⲆΔΔ: 534,
    ⵠⵠΔᐃⲆⲆⲆ: 535,
    ⵠΔΔⲆⵠⵠᐃ: 536,
    ⲆΔΔᐃⵠᐃⲆ: 537,
    ⵠⵠⵠΔΔⲆⲆ: 538,
    ΔⵠᐃⲆᐃⵠᐃᐃΔ: 539,
    ΔⵠⲆⵠⲆⵠᐃ: 540,
    ᐃⲆΔᐃᐃΔᐃ: 541,
    ⵠⵠⵠⵠΔᐃΔ: 542,
    ⵠⵠᐃⲆⲆⵠΔ: 543,
    ⵠⵠΔΔΔΔⵠᐃΔ: 544,
    POINTS: 545,
    ΔⲆᐃⵠΔΔⲆ: 546,
    ΔᐃⵠΔⲆⵠⵠ: 547,
    ⲆⲆⵠΔⲆΔⲆ: 548,
    ⵠᐃⵠᐃⲆⵠⵠ: 549,
    ⲆⵠΔΔΔⲆⲆ: 550,
    ᐃΔΔⵠⲆⵠⲆ: 551,
    ΔⲆᐃⵠᐃⲆⲆ: 552,
    ⵠᐃⵠΔⵠⵠΔ: 553,
    ⲆⵠΔⵠΔΔᐃ: 554,
    ᐃⵠᐃΔᐃᐃⵠ: 555,
    ᐃΔΔⲆΔⲆΔ: 556,
    ⵠᐃΔᐃⵠⲆΔ: 557,
    ⵠΔⵠΔᐃΔⵠ: 558,
    ⵠΔⵠⵠᐃⵠΔ: 559,
    ΔⵠⲆΔⵠⵠΔ: 560,
    ΔⲆᐃᐃⵠⵠᐃ: 561,
    ΔⲆᐃⵠᐃΔᐃ: 562,
    ⵠⲆΔⵠᐃΔⲆ: 563,
    ᐃΔΔᐃᐃΔⲆ: 564,
    ⲆⵠᐃⵠⵠⲆΔ: 565,
    ⲆΔⲆΔⵠᐃⲆ: 566,
    ⵠΔⵠⵠⲆᐃΔ: 567,
    ΔⵠⵠⵠΔΔΔ: 568,
    ΔᐃᐃⵠⲆⲆΔ: 569,
    ⲆⲆⲆⲆΔᐃΔ: 570,
    ⵠⵠⲆⵠᐃΔⲆ: 571,
    ⵠⲆⵠᐃⵠⲆᐃ: 572,
    ⲆⲆⵠᐃΔΔⲆ: 573,
    ⲆᐃⲆⵠⲆΔⵠ: 574,
    ⵠⲆⵠⵠⵠᐃⵠ: 575,
    ⵠⵠᐃΔⵠⵠΔ: 576,
    ᐃⲆᐃᐃⲆⲆᐃ: 577,
    ⲆⵠᐃᐃᐃΔᐃ: 578,
    ⲆⲆⵠⵠⵠΔⲆ: 579,
    ⲆⵠᐃΔⲆⲆⵠ: 580,
    ΔΔⲆᐃⵠΔΔ: 581,
    ΔᐃᐃⲆΔⵠΔ: 582,
    ΔΔᐃⲆⵠΔΔ: 583,
    ⵠⲆΔⵠᐃⲆⲆ: 584,
    ΔΔⵠⵠⲆᐃΔ: 585,
    ᐃⲆΔⵠⲆΔⲆ: 586,
    ᐃΔⵠᐃⵠᐃΔ: 587,
    ΔⲆΔⵠΔⲆⲆ: 588,
    ᐃᐃΔⵠⵠⵠᐃ: 589,
    ⲆΔⲆⵠᐃⵠⲆ: 590,
    ᐃᐃⲆΔᐃⵠΔ: 591,
    ⵠⵠᐃΔⲆⵠⵠ: 592,
    ᐃᐃⲆΔΔⵠⲆⵠⵠ: 593,
    ΔⵠᐃⵠΔᐃⵠ: 594,
    ΔΔᐃΔΔΔΔᐃᐃ: 595,
    ΔΔⲆⲆⲆΔΔ: 596,
    ⵠᐃⵠⲆΔⵠᐃⲆᐃ: 597,
    ᐃᐃⵠᐃⵠΔⲆΔΔ: 598,
    ΔᐃⲆΔᐃⵠⲆⲆⲆ: 599,
    ΔⲆΔᐃᐃΔΔⵠΔ: 600,
    ⵠⲆⲆΔⲆΔᐃⵠᐃ: 601,
    ⲆⵠΔᐃΔⲆΔ: 602,
    ᐃΔⵠⲆⲆ: 603,
    ⵠΔᐃᐃⲆⲆΔ: 604,
    ⲆᐃᐃⵠⵠⵠⲆ: 605,
    ᐃⲆᐃᐃⲆⵠⲆ: 606,
    ⲆΔⵠⲆᐃᐃΔⵠⵠ: 607,
    ⲆᐃⵠⵠΔⵠⵠ: 608,
    ⲆⵠⲆᐃⵠᐃⵠ: 609,
    ⵠΔⵠⲆⵠᐃΔ: 610,
    ⵠⲆⲆⲆⵠⵠⵠ: 611,
    ⵠᐃΔⲆⵠᐃΔ: 612,
    ΔΔᐃⵠⵠⵠᐃ: 613,
    ⵠⵠⵠΔⲆᐃⲆ: 614,
    ΔᐃⵠⵠⵠᐃⲆ: 615,
    ΔⵠΔⵠⲆᐃⲆ: 616,
    ΔΔⵠᐃᐃᐃⵠ: 617,
    ΔᐃΔᐃⲆⲆⵠ: 618,
    ⲆⵠⲆⵠΔ: 619,
    ᐃⵠᐃⵠⵠ: 620,
    ⲆⵠⲆⵠᐃ: 621,
    ᐃⵠⵠⲆⲆΔⲆⵠᐃ: 622,
    ⵠⵠⵠΔⲆᐃⵠ: 623,
    ᐃᐃⵠᐃΔⲆᐃ: 624,
    ⵠᐃⲆΔⲆⵠᐃ: 625,
    ΔᐃⲆⲆΔⵠⲆ: 626,
    ⲆⵠⵠⵠⵠΔⲆ: 627,
    ⵠⵠⵠΔⵠⵠⵠ: 628,
    ⵠΔΔⵠΔΔᐃ: 629,
    ⲆⲆᐃⲆⵠⲆⵠ: 630,
    ᐃⵠΔⲆⵠΔᐃ: 631,
    ⲆⵠΔⵠᐃⵠΔ: 632,
    ᐃⲆᐃⵠΔⲆⲆ: 633,
    ⵠⲆⲆⵠⲆΔⵠ: 634,
    ⲆᐃΔⵠⲆⲆⲆ: 635,
    ⲆⲆΔΔⵠΔΔ: 636,
    ΔΔΔᐃⵠ: 637,
    ᐃⲆᐃΔΔⲆⵠ: 638,
    ᐃᐃⲆᐃᐃΔΔ: 639,
    ⲆⵠⲆⵠⲆⵠᐃ: 640,
    ΔᐃᐃⵠᐃᐃⲆ: 641,
    ⲆⵠⵠᐃⲆΔΔ: 642,
    ⲆᐃΔⲆΔᐃⲆ: 643,
    ᐃᐃᐃⵠΔΔⲆ: 644,
    ᐃⵠᐃⵠΔⲆᐃ: 645,
    ᐃᐃⲆΔⵠᐃⲆ: 646,
    ΔΔᐃΔⵠⲆⵠ: 647,
    ⵠΔᐃⲆⵠᐃⵠ: 648,
    ᐃⵠⲆΔᐃⲆᐃ: 649,
    ΔⵠᐃⵠⵠΔᐃ: 650,
    ΔΔⵠᐃⵠⲆⲆ: 651,
    ΔΔᐃᐃᐃᐃΔ: 652,
    ᐃⲆᐃΔΔⵠⵠ: 653,
    ΔⲆⵠⲆΔᐃⵠ: 654,
    ⲆᐃⵠⵠⵠⵠⲆ: 655,
    ⲆΔⲆⲆⲆⲆᐃ: 656,
    ⲆΔⵠⲆⵠΔⵠ: 657,
    ΔΔΔⲆⲆⲆΔ: 658,
    ⲆΔᐃᐃΔⵠᐃ: 659,
    ⲆⵠⲆⵠⵠΔⵠ: 660,
    ΔΔᐃⵠⲆⵠⵠ: 661,
    ᐃⲆⲆᐃΔΔΔ: 662,
    ᐃⲆΔⵠᐃⵠᐃ: 663,
    ⵠⲆᐃᐃⵠⵠΔ: 664,
    ⲆⵠᐃᐃⵠⲆⵠ: 665,
    ᐃᐃⲆΔᐃⵠᐃ: 666,
    ΔⲆⵠᐃⵠᐃᐃ: 667,
    ⵠⲆⵠⲆΔⲆᐃ: 668,
    ᐃⲆΔⵠⲆᐃⵠ: 669,
    ⲆⵠⲆⲆᐃⲆⲆ: 670,
    ᐃᐃⲆᐃΔΔΔ: 671,
    ΔΔΔᐃΔᐃᐃ: 672,
    ⲆⲆⵠⲆᐃ: 673,
    ᐃⲆΔⲆΔⲆⵠ: 674,
    ⵠⲆᐃΔⵠⵠΔ: 675,
    ⲆⵠⵠⵠⲆ: 676,
    ΔᐃⵠΔⵠΔᐃᐃⵠ: 677,
    ⲆⲆΔⵠΔⵠᐃ: 678,
    ⲆΔᐃⲆⲆ: 679,
    ᐃᐃⲆⵠᐃΔΔ: 680,
    ⲆᐃⵠΔᐃᐃᐃ: 681,
    ⲆⵠⲆⵠⵠⲆᐃ: 682,
    ΔᐃⵠⵠᐃⲆⲆ: 683,
    ΔΔⲆΔΔᐃⲆ: 684,
    ⲆΔⲆΔⵠᐃΔ: 685,
    ⵠⵠᐃⲆᐃᐃΔ: 686,
    ⵠⲆΔⲆⲆⲆⲆ: 687,
    ΔⵠᐃΔⲆⵠⵠ: 688,
    ΔⲆⵠⲆΔΔⲆ: 689,
    ⵠᐃⲆᐃΔⲆᐃ: 690,
    ⵠⵠΔᐃⲆ: 691,
    ᐃⲆᐃᐃΔ: 692,
    ΔΔΔⵠⲆ: 693,
    ᐃⲆⲆⵠΔ: 694,
    ⵠᐃᐃᐃⵠ: 695,
    ⵠⵠⵠᐃΔᐃⵠ: 696,
    ΔⲆᐃᐃⲆΔⵠ: 697,
    ΔᐃⲆᐃⲆⲆⲆ: 698,
    ⵠⲆᐃᐃⵠΔᐃ: 699,
    ΔΔⲆⵠⵠᐃⵠ: 700,
    ΔⲆⵠΔⲆΔΔ: 701,
    ⵠⵠΔⵠⲆᐃⲆ: 702,
    ⵠΔⵠⲆⵠΔⲆ: 703,
    ΔⲆΔᐃΔΔⲆ: 704,
    ΔⵠⵠᐃⲆᐃⵠ: 705,
    ᐃᐃⲆⲆⲆΔⲆ: 706,
    ᐃⲆⵠⲆᐃⵠᐃ: 707,
    ΔⲆᐃⵠᐃᐃᐃ: 708,
    ⲆⵠⵠⲆⵠᐃⵠ: 709,
    ⵠⵠΔΔΔⲆⲆ: 710,
    ⵠⵠⲆⵠⵠⵠΔ: 711,
    ΔΔⲆⵠⵠΔΔ: 712,
    ᐃΔⵠΔⵠΔⲆ: 713,
    ᐃⵠⲆⲆᐃΔⵠ: 714,
    ⲆⲆᐃᐃΔΔⵠ: 715,
    ⲆᐃΔⵠⵠⵠⵠ: 716,
    ⲆᐃᐃᐃΔΔⵠ: 717,
    ΔⲆⲆⲆⲆΔΔ: 718,
    ⵠΔΔⲆᐃΔⵠ: 719,
    ⲆⵠᐃᐃⵠᐃⲆ: 720,
    ΔΔΔᐃⵠⵠⲆⲆᐃ: 721,
    ⵠⵠΔⵠⲆⲆⲆ: 722,
    ΔΔᐃⵠᐃⲆᐃ: 723,
    ΔᐃΔⲆⲆΔᐃ: 724,
    ᐃᐃⲆᐃᐃⵠⲆ: 725,
    ΔⲆⵠᐃⵠⲆⲆ: 726,
    ΔΔⲆΔᐃΔⵠ: 727,
    ᐃⲆΔⲆⲆⵠΔ: 728,
    ⲆⵠᐃΔⲆⵠᐃ: 729,
    ⲆⲆⲆᐃⵠⲆᐃ: 730,
    ᐃⲆⲆⲆΔᐃⲆ: 731,
    ᐃⲆⵠⵠᐃⲆⲆ: 732,
    ΔΔⵠᐃᐃⵠⵠ: 733,
    ΔⲆⲆⵠᐃᐃΔ: 734,
    ΔΔΔΔΔⲆᐃ: 735,
    ΔᐃΔΔᐃⵠⵠ: 736,
    ⵠⲆΔⵠⵠⲆᐃ: 737,
    ⲆⲆⲆⲆⲆΔΔ: 738,
    ΔᐃⵠⵠⵠΔᐃ: 739,
    ⵠⵠⵠⲆΔᐃΔ: 740,
    ⲆᐃⲆⵠΔⵠⲆ: 741,
    ΔΔⲆⵠΔᐃᐃ: 742,
    ⵠⲆᐃΔΔΔΔ: 743,
    ⵠⲆΔⵠΔΔⲆ: 744,
    ΔᐃᐃᐃΔⲆⵠ: 745,
    ᐃⲆᐃⵠⵠⵠⲆ: 746,
    ΔΔⵠⵠΔᐃΔ: 747,
    ⵠΔΔⲆᐃⵠᐃ: 748,
    ⲆⲆⲆᐃΔⵠᐃ: 749,
    ⵠΔⲆΔⵠⵠⵠ: 750,
    ⵠⵠΔᐃⵠⵠⵠ: 751,
    ⲆⵠΔⲆᐃᐃᐃ: 752,
    ΔΔⵠⵠⵠᐃⲆ: 753,
    ΔⵠⵠᐃⲆᐃΔ: 754,
    ᐃⵠᐃΔΔᐃⲆ: 755,
    ⲆΔⵠᐃᐃⲆⲆ: 756,
    ⲆᐃᐃΔⵠⲆᐃ: 757,
    ⵠⲆⵠⵠᐃᐃⵠ: 758,
    ΔⵠΔⵠΔⲆΔ: 759,
    ⵠⲆΔΔΔⲆΔ: 760,
    ⵠⲆⵠᐃⲆᐃᐃ: 761,
    ᐃΔᐃΔⲆⵠⵠ: 762,
    ΔⲆᐃΔⵠⵠᐃ: 763,
    ⲆΔΔⲆᐃΔⲆ: 764,
    ᐃⲆΔΔᐃᐃⲆ: 765,
    ⵠᐃᐃⲆΔᐃΔ: 766,
    ⲆⲆⵠᐃⵠⲆᐃ: 767,
    ᐃⲆᐃⵠᐃΔᐃ: 768,
    ⵠᐃᐃⲆⲆᐃⲆ: 769,
    ⲆΔΔⵠᐃΔᐃ: 770,
    ⲆⵠⵠΔⲆⵠⵠ: 771,
    ⲆΔⵠΔⵠⲆΔ: 772,
    ⵠᐃⲆⵠⵠⲆΔ: 773,
    ΔⲆᐃⲆΔⵠΔ: 774,
    ⲆΔⲆᐃΔᐃⲆ: 775,
    ⵠΔΔΔⲆⲆΔ: 776,
    ᐃΔⲆΔⲆⲆΔ: 777,
    ⲆⲆᐃΔⲆΔⲆ: 778,
    ΔⲆⵠΔᐃΔⵠ: 779,
    ⵠᐃΔⵠⵠΔΔ: 780,
    ᐃⵠⲆⲆᐃΔΔ: 781,
    ΔⵠⲆⵠΔᐃΔ: 782,
    ΔᐃᐃⲆΔⵠⲆ: 783,
    ᐃᐃΔΔᐃⵠⲆ: 784,
    ⵠⲆⲆⲆⲆᐃⵠ: 785,
    ⵠᐃᐃΔⵠⵠᐃ: 786,
    ⵠᐃΔΔⵠⲆⲆ: 787,
    ⲆᐃⲆⲆⵠⵠᐃ: 788,
    ᐃⲆⵠΔᐃⲆᐃ: 789,
    ⲆⵠᐃⵠⲆⲆⲆ: 790,
    ᐃⵠΔⲆⵠᐃⵠ: 791,
    ⵠᐃᐃⲆᐃⲆⵠ: 792,
    ᐃΔΔΔΔ: 793,
    ΔⵠⲆΔⵠⲆΔ: 794,
    ᐃΔΔᐃΔⵠΔ: 795,
    ΔⲆⲆΔⲆ: 796,
    ᐃⲆᐃΔⵠᐃⵠ: 797,
    ᐃᐃΔⵠⲆᐃᐃ: 798,
    ΔⲆⵠᐃᐃᐃᐃ: 799,
    ᐃⵠⵠΔΔⵠⵠ: 800,
    ᐃⲆⵠⲆᐃⲆⲆ: 801,
    ᐃⵠᐃΔⲆ: 802,
    ᐃⲆⵠⲆⵠⵠᐃ: 803,
    ΔⲆⲆᐃᐃΔⲆⲆᐃ: 804,
    ⵠⲆⵠⵠⲆⲆΔΔΔ: 805,
    ⵠΔⵠΔᐃᐃⲆΔⵠ: 806,
    ΔΔⵠΔⲆᐃⲆⲆⵠ: 807,
    ᐃⲆⲆⲆⲆⵠΔ: 808,
    ΔⵠᐃⵠⲆᐃⵠ: 809,
    ᐃⲆΔΔⵠⲆΔ: 810,
    ⲆᐃⲆᐃⲆΔΔ: 811,
    ⵠⵠⵠⲆⵠᐃⲆ: 812,
    ᐃⵠⵠᐃⵠΔΔ: 813,
    ΔⵠⲆΔⲆΔᐃ: 814,
    ΔᐃΔΔⲆᐃⲆ: 815,
    ΔⵠᐃΔⲆⵠΔ: 816,
    ⲆⲆⵠⲆΔⲆᐃ: 817,
    Ⲇᐃᐃⵠⵠ: 818,
    ⲆⲆⲆⵠᐃ: 819,
    ΔⲆΔᐃⲆⲆΔ: 820,
    ⵠᐃⲆⲆⵠⲆΔ: 821,
    ⵠΔᐃⲆᐃΔΔ: 822,
    ᐃᐃⵠⵠΔΔⲆ: 823,
    ᐃᐃⵠⵠⵠⵠᐃ: 824,
    ⵠᐃⲆΔⵠⵠⲆ: 825,
    ⵠⵠᐃⲆⵠΔⲆ: 826,
    ⵠⵠΔⵠⵠΔⲆ: 827,
    ΔⵠⲆΔⵠᐃⵠ: 828,
    ⲆⲆⵠᐃⵠΔᐃ: 829,
    ΔΔⵠⲆⵠⲆΔ: 830,
    ⵠⲆⵠΔⲆⵠΔ: 831,
    ΔⲆᐃΔⲆⲆⲆⲆⵠ: 832,
    ᐃΔΔⲆⵠᐃᐃᐃΔ: 833,
    ᐃⵠΔⵠⲆᐃⲆ: 834,
    ⵠΔⵠᐃΔΔᐃ: 835,
    ᐃΔⵠⵠⵠⲆⵠ: 836,
    ⲆⵠⲆⲆᐃΔⵠ: 837,
    Δᐃⵠᐃᐃᐃⵠ: 838,
    ᐃⲆⵠΔⲆΔⵠ: 839,
    ⵠⲆⵠⵠⵠⲆⲆ: 840,
    ⵠΔᐃⲆⲆᐃⲆ: 841,
    ᐃᐃⲆΔⲆⵠᐃ: 842,
    ⵠΔΔⲆᐃⵠⵠ: 843,
    ⲆΔΔⵠⵠΔᐃ: 844,
    ⲆᐃⲆΔⵠⲆⲆ: 845,
    ᐃⵠΔⵠᐃᐃⲆ: 846,
    ᐃⲆⵠⵠⲆⲆᐃ: 847,
    ⵠⵠᐃΔⲆᐃᐃ: 848,
    ΔⲆᐃⵠᐃⵠⵠ: 849,
    ⵠΔᐃⲆᐃΔᐃ: 850,
    ᐃⵠΔΔⲆᐃΔ: 851,
    ⵠⵠΔΔⵠᐃⵠⵠⲆ: 852,
    ⲆⵠΔⵠⵠᐃⲆ: 853,
    ⲆⲆΔⵠⲆ: 854,
    ⵠⲆΔᐃⲆᐃⲆⵠⲆ: 855,
    ΔΔⵠⲆᐃΔⵠⵠⲆ: 856,
    ᐃⵠⵠⲆⵠⲆΔᐃᐃ: 857,
    ᐃᐃⵠᐃΔᐃΔᐃⲆ: 858,
    ΔΔΔΔᐃⲆⲆ: 859,
    ΔᐃΔΔΔⲆⲆ: 860,
    ᐃⵠⲆⲆᐃⵠᐃ: 861,
    ᐃΔⵠᐃⲆⵠⵠ: 862,
    ΔⵠᐃΔⲆⲆΔ: 863,
    ⵠⲆⵠᐃⲆΔΔⵠⲆ: 864,
    ⵠⵠᐃᐃᐃΔΔ: 865,
    ⲆⲆⵠᐃᐃⵠⵠ: 866,
    ᐃΔᐃⵠⲆⵠΔ: 867,
    ⵠᐃΔⵠⵠᐃⲆ: 868,
    ᐃⲆⲆᐃⲆⲆΔ: 869,
    ᐃΔᐃⵠΔΔΔ: 870,
    ᐃᐃⵠΔᐃⵠⲆ: 871,
    ⵠΔⲆᐃΔ: 872,
    ⲆⵠⲆⵠⵠΔᐃΔⵠ: 873,
    ⲆᐃᐃΔΔᐃⵠ: 874,
    ⲆᐃⵠᐃΔⲆᐃ: 875,
    ΔⲆᐃΔⲆⲆⵠ: 876,
    ⵠΔⵠᐃⲆⵠᐃ: 877,
    ⲆΔⵠΔⵠⲆⲆ: 878,
    ⵠⲆΔⲆⲆΔΔ: 879,
    ΔⲆⲆⲆⵠᐃΔ: 880,
    ᐃᐃⵠⲆⵠⵠⵠ: 881,
    ΔⵠΔⲆᐃⲆᐃ: 882,
    ⲆΔΔΔΔⲆᐃ: 883,
    ᐃΔⵠⵠⵠᐃΔ: 884,
    ⵠΔⵠᐃⵠⵠⲆ: 885,
    ᐃⲆᐃΔᐃⵠΔ: 886,
    ⵠΔⵠΔΔ: 887,
    ⲆⵠΔⵠⲆⲆⵠ: 888,
    ΔΔⵠΔᐃⲆᐃ: 889,
    ⵠΔΔᐃΔΔᐃ: 890,
    ΔΔⵠΔⲆᐃΔ: 891,
    ᐃⲆᐃⲆⵠΔΔ: 892,
    ᐃΔⲆⲆⲆᐃⲆ: 893,
    ⵠΔⲆⵠⲆΔΔ: 894,
    ⵠⲆᐃⵠⲆⵠⲆ: 895,
    ⵠΔᐃⵠᐃⲆΔ: 896,
    ⲆⲆᐃΔᐃΔΔ: 897,
    ΔⵠⵠΔᐃⲆΔ: 898,
    ΔΔᐃᐃᐃᐃⲆ: 899,
    ⵠΔᐃⵠᐃⲆᐃ: 900,
    ᐃⲆⲆⲆΔΔⵠ: 901,
    ⵠⲆⵠⵠΔⲆⲆ: 902,
    ᐃⵠⲆⵠⵠⲆⵠ: 903,
    ⵠⲆΔΔⲆⲆΔ: 904,
    ⲆⲆΔᐃᐃⲆᐃ: 905,
    ⵠⵠⵠⲆⵠⵠΔ: 906,
    ⵠΔᐃⲆᐃΔⵠ: 907,
    ΔⵠⵠΔΔᐃⵠ: 908,
    ⵠⵠⲆⵠⲆᐃⵠ: 909,
    ⵠᐃΔⲆⵠΔⲆ: 910,
    ⲆⲆⲆⲆⲆΔⵠ: 911,
    ⵠΔᐃΔⲆⵠᐃ: 912,
    ᐃᐃᐃᐃΔⲆᐃ: 913,
    ᐃⵠΔⵠⵠᐃΔⲆΔ: 914,
    ΔΔⲆⵠΔᐃΔⵠᐃ: 915,
    ΔⵠΔΔᐃᐃⵠΔⵠ: 916,
    ΔⵠᐃΔⵠᐃᐃΔⲆ: 917,
    ⲆⲆΔᐃᐃⵠᐃ: 918,
    ⲆΔΔⵠΔᐃΔ: 919,
    ᐃⲆΔΔⲆ: 920,
    ⲆⲆⵠΔᐃᐃⵠ: 921,
    ᐃⲆⵠⲆⵠⵠΔ: 922,
    ⲆⲆⵠⵠⵠⵠⲆ: 923,
    ⵠᐃΔⲆΔΔⲆ: 924,
    ⲆᐃⵠΔᐃⲆⵠ: 925,
    ᐃᐃⲆΔΔⲆⲆ: 926,
    ᐃⲆⲆⲆⲆⵠᐃ: 927,
    ᐃᐃⲆΔⲆⲆΔ: 928,
    ΔΔⲆΔΔⲆᐃ: 929,
    ⲆᐃΔΔᐃΔᐃ: 930,
    ⵠᐃⲆΔᐃΔΔ: 931,
    ⵠΔⵠᐃⲆⲆⲆ: 932,
    ΔⵠᐃⲆΔΔᐃ: 933,
    ⲆⲆᐃΔΔⲆⲆ: 934,
    Δᐃⵠᐃᐃⵠⵠ: 935,
    ⲆⲆⵠΔⵠΔⵠ: 936,
    ᐃⲆⵠΔᐃⲆⵠ: 937,
    ᐃΔΔΔᐃⵠⲆ: 938,
    ⲆΔⵠⲆⲆᐃⵠ: 939,
    ΔΔⲆⵠΔⵠᐃΔΔ: 940,
    ᐃΔᐃⲆΔ: 941,
    ΔⵠⵠⲆⲆᐃΔ: 942,
    ⵠⵠⲆⵠᐃΔⵠ: 943,
    ⲆΔⲆᐃΔΔⲆ: 944,
    ᐃⵠΔΔᐃᐃΔ: 945,
    ⵠᐃΔᐃⵠⲆⵠ: 946,
    ΔⲆⲆⵠⵠⲆⵠ: 947,
    ⵠᐃⵠⲆᐃⵠⵠ: 948,
    ΔⲆᐃⵠᐃⵠⲆ: 949,
    ΔΔΔⵠᐃⵠᐃ: 950,
    ⵠΔΔΔΔΔΔ: 951,
    ᐃⵠΔᐃⵠΔΔ: 952,
    ⲆⵠᐃᐃⲆΔⵠ: 953,
    ⲆⵠΔⵠΔᐃⵠ: 954,
    ΔᐃᐃᐃⵠⲆⵠ: 955,
    ⵠᐃⵠⲆⲆⵠᐃ: 956,
    ⲆΔΔΔΔΔⵠ: 957,
    ΔⵠⵠⲆⵠᐃΔ: 958,
    ⵠⵠⲆⲆⵠᐃⲆ: 959,
    ⲆᐃᐃⲆⵠⲆΔ: 960,
    ΔᐃΔⵠᐃΔΔ: 961,
    ΔⲆᐃΔᐃⲆⵠ: 962,
    ᐃⲆⲆⵠⲆⲆΔ: 963,
    ΔⵠᐃΔᐃᐃⵠᐃⲆ: 964,
    ᐃΔⵠᐃΔΔⲆ: 965,
    ᐃΔⲆΔⲆⵠⲆ: 966,
    ᐃⲆᐃᐃⵠᐃᐃ: 967,
    ᐃΔⲆᐃⵠⲆΔ: 968,
    ᐃⵠΔⲆⲆᐃⵠ: 969,
    ⵠⵠᐃⲆⲆᐃᐃ: 970,
    ⲆⵠⲆⵠᐃᐃⲆ: 971,
    ᐃᐃΔΔᐃΔⵠ: 972,
    ⲆⵠⵠΔᐃⵠⲆ: 973,
    ΔⵠⲆⲆᐃΔΔ: 974,
    ᐃΔⵠⵠⲆᐃⵠ: 975,
    ΔΔᐃᐃΔⲆⲆ: 976,
    ⵠⲆⲆᐃᐃⵠⵠ: 977,
    ΔⲆΔⵠᐃΔⵠ: 978,
    ΔᐃⲆⲆᐃⵠⵠ: 979,
    ⵠᐃⵠΔᐃΔⲆ: 980,
    ⲆᐃᐃᐃⲆΔⲆ: 981,
    ΔⲆⲆⲆⲆΔⲆ: 982,
    ᐃᐃΔΔⵠᐃᐃ: 983,
    ΔⵠᐃᐃⵠᐃΔ: 984,
    ⲆⵠⲆΔⵠᐃⲆ: 985,
    ᐃΔΔᐃᐃᐃⵠ: 986,
    ΔΔΔⵠᐃΔⲆ: 987,
    ⵠⵠΔᐃΔⵠⲆ: 988,
    ΔⲆⵠᐃΔ: 989,
    ⵠⲆⲆᐃᐃᐃΔ: 990,
    ⲆⲆᐃΔᐃⵠΔ: 991,
    ⵠⵠᐃⲆΔᐃᐃ: 992,
    ⵠⵠᐃᐃⵠΔⵠ: 993,
    ⲆᐃⲆⵠⵠᐃᐃ: 994,
    ⵠⵠⵠΔᐃΔΔ: 995,
    ΔΔⲆΔᐃⵠΔ: 996,
    ⵠΔⵠᐃΔΔⵠ: 997,
    ΔᐃⵠⲆΔᐃⵠ: 998,
    Δⵠᐃᐃᐃᐃⵠ: 999,
    ᐃⲆⵠⲆΔⵠΔ: 1000,
    ᐃⲆΔΔⲆΔⵠ: 1001,
    ⵠⲆⲆⵠΔΔⲆ: 1002,
    ᐃⵠᐃΔΔΔᐃ: 1003,
    ᐃⵠⵠΔΔⲆᐃ: 1004,
    ΔΔⲆᐃⲆⲆᐃ: 1005,
    ⵠⲆᐃᐃⲆⲆᐃ: 1006,
    ⵠⲆΔΔⲆⵠΔ: 1007,
    ΔΔⵠΔΔⲆΔ: 1008,
    ⲆΔᐃⲆΔᐃⵠ: 1009,
    ΔΔᐃⲆⵠΔᐃ: 1010,
    ΔᐃⲆᐃⲆⵠᐃ: 1011,
    ᐃⵠⵠⲆΔᐃᐃ: 1012,
    ⵠΔⲆᐃΔⵠΔ: 1013,
    ᐃΔⲆⲆⵠⵠᐃ: 1014,
    ⵠⵠⲆᐃᐃⵠΔ: 1015,
    ᐃΔⵠΔⵠΔΔ: 1016,
    ΔᐃΔⲆⵠⲆΔ: 1017,
    ΔⲆᐃᐃⵠΔⲆ: 1018,
    ⵠⲆᐃΔᐃΔΔ: 1019,
    ⵠⲆᐃⲆΔΔⲆ: 1020,
    ᐃⵠⲆⵠⲆᐃΔ: 1021,
    ΔᐃⲆⵠⵠΔΔ: 1022,
    ᐃⲆⲆΔⵠⵠΔ: 1023,
    ⵠⵠᐃΔ: 1024,
    ᐃΔⵠⲆ: 1025,
    ΔⲆΔΔΔⵠᐃ: 1026,
    ⲆⲆᐃⲆⵠⲆⲆ: 1027,
    ⵠⲆⲆΔⲆᐃⵠ: 1028,
    ΔᐃᐃᐃᐃⵠⲆ: 1029,
    ⲆΔΔᐃΔⲆⵠ: 1030,
    ᐃΔⲆⵠΔᐃⲆ: 1031,
    ᐃᐃⲆᐃᐃⵠΔ: 1032,
    ΔⲆⵠⲆᐃ: 1033,
    ⵠⲆⵠᐃⵠΔⵠ: 1034,
    ΔᐃΔⲆΔ: 1035,
    ΔⲆⵠΔⲆⵠᐃ: 1036,
    ᐃΔΔⲆᐃ: 1037,
    ⵠⵠⲆΔⲆⵠⵠ: 1038,
    ΔⲆΔⵠⵠ: 1039,
    ⲆᐃⵠᐃⲆᐃⲆ: 1040,
    ⵠⵠᐃᐃⲆ: 1041,
    ΔΔⲆⵠⲆ: 1042,
    ᐃⲆᐃⵠⵠΔΔ: 1043,
    ⵠΔᐃⵠᐃΔⲆ: 1044,
    ΔⵠΔⲆᐃⲆⲆ: 1045,
    ⵠⲆᐃᐃⲆᐃᐃ: 1046,
    ⲆⲆᐃΔᐃⲆⲆ: 1047,
    ΔⵠⲆⲆⲆᐃⲆ: 1048,
    ᐃⲆⵠⵠⲆⵠⲆ: 1049,
    ⲆⵠⲆⲆⲆᐃⲆ: 1050,
    ⵠΔⲆΔᐃⲆⵠ: 1051,
    ⵠⲆᐃⲆⲆ: 1052,
    ΔΔᐃⵠⲆΔᐃ: 1053,
    ⵠᐃΔΔΔ: 1054,
    ⵠⲆᐃΔΔⵠᐃ: 1055,
    Ⲇⵠⵠⵠᐃⵠⵠ: 1056,
    ᐃΔΔΔⵠΔⲆ: 1057,
    ΔⵠΔΔⵠⵠⲆ: 1058,
    ⲆᐃⵠⵠᐃⵠΔ: 1059,
    ΔΔᐃⲆΔⵠΔ: 1060,
    ⵠᐃⵠΔᐃᐃᐃᐃΔ: 1061,
    ΔᐃⲆⵠΔⲆᐃ: 1062,
    ⲆⵠⲆⵠΔΔⵠ: 1063,
    ⵠΔΔΔᐃⲆΔⵠⵠ: 1064,
    ᐃᐃᐃⲆᐃⲆⲆ: 1065,
    ⵠⲆⲆᐃⵠᐃᐃ: 1066,
    ⲆᐃⲆᐃⵠⵠᐃ: 1067,
    ΔΔᐃΔⵠⲆᐃ: 1068,
    ᐃΔⵠⵠΔ: 1069,
    ⵠⵠᐃⵠⲆᐃⲆ: 1070,
    ᐃᐃᐃⵠᐃⲆᐃ: 1071,
    ᐃᐃⵠⵠΔⲆΔ: 1072,
    ⵠΔᐃⲆᐃᐃΔ: 1073,
    ⵠΔΔΔⲆⲆⲆ: 1074,
    ⲆᐃⵠΔᐃⵠᐃ: 1075,
    ⲆᐃⵠΔΔΔⵠ: 1076,
    ΔⵠⲆⲆⲆⲆⲆ: 1077,
    ΔⲆΔΔᐃⲆᐃ: 1078,
    ⲆΔΔⵠᐃᐃⲆ: 1079,
    ⵠΔⲆᐃᐃΔⵠ: 1080,
    ⲆⵠⲆⲆᐃⵠΔ: 1081,
    ΔΔⲆⵠΔⲆⵠ: 1082,
    ⲆⲆᐃᐃΔⲆⵠ: 1083,
    ᐃΔᐃⵠⲆ: 1084,
    ΔⵠᐃᐃⲆⲆΔ: 1085,
    ΔᐃⵠᐃᐃΔⵠ: 1086,
    ⲆⵠᐃΔᐃⵠⵠ: 1087,
    ᐃⲆΔⵠΔᐃⲆ: 1088,
    ΔᐃⵠΔⲆᐃᐃ: 1089,
    ⲆᐃᐃᐃⵠⲆⲆ: 1090,
    ᐃᐃΔᐃⲆᐃⵠ: 1091,
    ΔΔⲆⵠⵠⵠⵠ: 1092,
    ⲆⵠⵠⵠΔᐃⲆ: 1093,
    ΔᐃᐃⲆⲆⲆⵠ: 1094,
    ΔΔⵠⲆΔⵠⲆ: 1095,
    ΔⵠⲆⵠΔᐃⲆ: 1096,
    ⵠᐃᐃⲆΔⲆⲆ: 1097,
    ΔΔⵠⵠⲆⲆⵠ: 1098,
    ⵠΔΔᐃⵠ: 1099,
    ⲆⲆⵠⲆⲆⵠⲆ: 1100,
    ᐃᐃΔΔΔᐃΔ: 1101,
    ᐃⵠᐃⲆⵠΔᐃ: 1102,
    ΔⲆⵠⲆⵠΔⵠ: 1103,
    ⲆⲆΔⵠⲆΔⲆ: 1104,
    ⵠⲆⵠΔⲆᐃᐃ: 1105,
    ⵠⵠΔΔΔᐃΔ: 1106,
    ΔⵠⲆᐃᐃΔⲆ: 1107,
    ᐃΔⵠⵠᐃⲆⵠ: 1108,
    ⲆᐃΔⵠᐃⵠⵠ: 1109,
    ⲆⲆⲆᐃΔᐃΔ: 1110,
    ᐃⲆᐃⵠⲆΔΔ: 1111,
    ⵠⲆⵠⲆᐃⲆⲆ: 1112,
    ᐃΔᐃⲆΔⵠΔ: 1113,
    ⲆⲆⵠΔⵠΔΔ: 1114,
    ᐃⲆⲆⲆᐃᐃᐃ: 1115,
    ⲆΔᐃᐃΔᐃⲆ: 1116,
    ⵠⲆⲆᐃⵠΔᐃ: 1117,
    ⲆⲆΔΔΔⵠⵠ: 1118,
    ⵠⲆΔΔⲆᐃΔ: 1119,
    ⲆᐃΔᐃⲆ: 1120,
    ⵠⵠᐃⵠᐃᐃⲆ: 1121,
    ⲆΔΔΔᐃᐃΔ: 1122,
    ᐃᐃⲆⲆⵠΔΔ: 1123,
    ᐃⵠⲆΔᐃΔΔ: 1124,
    ⵠΔⲆⵠᐃΔⵠ: 1125,
    ΔⲆⵠⵠᐃⲆᐃ: 1126,
    ⵠΔᐃⵠⲆⵠΔ: 1127,
    ΔΔⵠⲆΔΔᐃ: 1128,
    ΔᐃⲆⵠⵠᐃⲆ: 1129,
    ⵠᐃⵠᐃΔⲆᐃ: 1130,
    ⲆⵠΔᐃᐃΔΔ: 1131,
    ⵠⵠᐃΔⲆⲆᐃ: 1132,
    ⲆⵠⵠᐃⵠⲆⵠ: 1133,
    ΔᐃⲆⵠⲆᐃᐃ: 1134,
    ΔᐃᐃΔᐃⵠᐃ: 1135,
    ⵠⵠᐃⵠⲆⲆᐃ: 1136,
    ⲆⵠⵠⵠⲆᐃⲆ: 1137,
    ΔΔΔᐃΔᐃⲆ: 1138,
    ᐃⵠΔⵠⲆΔᐃ: 1139,
    ⵠΔⲆᐃΔᐃᐃ: 1140,
    ⲆΔΔⲆᐃΔᐃ: 1141,
    ⲆΔⲆᐃΔᐃⵠ: 1142,
    ⲆᐃᐃⵠΔᐃⲆ: 1143,
    ⵠⵠⲆⲆΔᐃⵠ: 1144,
    ⵠΔΔⵠⵠⲆⲆ: 1145,
    ⲆᐃΔⵠⵠⵠⲆ: 1146,
    ⲆⵠᐃΔᐃΔΔ: 1147,
    ⲆⲆⲆᐃΔⲆⲆ: 1148,
    Ⲇᐃⵠᐃⵠⵠⵠ: ["#E9CF96", "#144940"],
    ⵠⵠⲆⲆⲆⵠᐃ: 1149,
    ⵠⵠⵠⲆᐃΔⲆ: 1150,
    ΔᐃᐃⲆᐃᐃΔ: 1151,
    ᐃΔᐃΔⲆⵠᐃ: 1152,
    ᐃⵠⵠⲆⲆΔⲆ: 1153,
    ΔⵠΔᐃⲆⵠΔ: 1154,
    ΔⵠⲆΔΔᐃᐃ: 1155,
    ᐃΔⲆⲆΔ: 1156,
    ᐃᐃᐃⲆΔⲆᐃ: 1157,
    ᐃⵠᐃΔᐃΔΔ: 1158,
    ⵠᐃΔⲆⵠᐃᐃ: 1159,
    ⲆᐃΔᐃⲆⲆⲆ: 1160,
    ΔΔΔΔⵠΔΔ: 1161,
    ⲆΔΔⲆᐃᐃΔ: 1162,
    ΔΔΔᐃΔⲆΔ: 1163,
    ΔΔⲆⲆᐃᐃᐃ: 1164,
    ⵠⲆⵠⲆⲆⲆᐃ: 1165,
    ⲆᐃΔΔⲆⵠΔ: 1166,
    ⲆⵠᐃⵠⲆᐃⲆ: 1167,
    ᐃΔΔⵠⲆⲆᐃ: 1168,
    ⵠⲆᐃⵠΔⵠⲆ: 1169,
    ⲆΔΔⵠⵠⲆΔ: 1170,
    ᐃᐃᐃᐃⵠⲆⵠ: 1171,
    ᐃΔⲆᐃⵠΔᐃ: 1172,
    ΔⲆⲆⵠᐃⵠᐃ: 1173,
    ᐃᐃⵠᐃᐃΔⲆ: 1174,
    ⵠⲆⵠⲆᐃᐃⵠ: 1175,
    ΔᐃⵠⵠᐃᐃⲆ: 1176,
    ᐃΔΔᐃⲆΔΔ: 1177,
    ⵠⲆⲆⲆⵠΔⵠ: 1178,
    ᐃΔᐃΔⵠⵠΔ: 1179,
    ⵠᐃᐃᐃⵠΔΔ: 1180,
    ⲆᐃⲆⵠⵠⵠΔ: 1181,
    ⵠⲆⲆΔⲆⵠⵠ: 1182,
    ⵠᐃᐃⵠⲆⵠᐃ: 1183,
    ⲆᐃᐃⲆⵠᐃⲆ: 1184,
    ᐃΔⵠᐃᐃᐃᐃ: 1185,
    ᐃⵠⵠⲆΔΔⵠ: 1186,
    ᐃⵠᐃⵠᐃΔⲆ: 1187,
    ⲆᐃᐃⵠᐃΔⲆ: 1188,
    ⵠⲆᐃⲆΔⲆⵠ: 1189,
    ᐃᐃⵠᐃⲆᐃⲆ: 1190,
    ᐃᐃⲆⲆΔΔⵠ: 1191,
    ᐃⲆᐃⲆΔⲆⵠ: 1192,
    ᐃᐃᐃⲆΔⲆⲆ: 1193,
    ΔⲆⲆⲆΔⵠⵠ: 1194,
    ⵠᐃⲆᐃⵠΔΔ: 1195,
    ᐃⵠⲆΔᐃᐃⲆ: 1196,
    ᐃᐃᐃᐃΔᐃⲆ: 1197,
    ⲆⵠⲆⲆⵠΔΔ: 1198,
    ᐃⲆᐃⲆⲆΔᐃ: 1199,
    ⵠΔⲆΔⵠⵠⲆ: 1200,
    Ⲇᐃᐃⵠᐃᐃⵠ: 1201,
    ⵠⵠⵠⲆⵠᐃᐃ: 1202,
    ΔᐃⲆⵠΔᐃᐃ: 1203,
    ⵠᐃᐃⵠⵠΔⵠ: 1204,
    ΔⲆᐃᐃⲆΔⲆ: 1205,
    ⲆⵠⲆΔΔᐃΔ: 1206,
    ᐃⵠᐃΔᐃᐃΔ: 1207,
    ⲆⵠᐃΔⵠᐃΔ: 1208,
    ᐃⵠⵠⵠΔᐃⲆ: 1209,
    ⵠΔⲆⲆΔⵠⲆ: 1210,
    ⲆΔⲆⵠΔⲆᐃ: 1211,
    ᐃΔⲆⲆᐃΔⵠ: 1212,
    ⲆΔᐃⵠⲆΔⲆ: 1213,
    ᐃΔᐃΔⵠⲆⲆ: 1214,
    ⲆᐃⲆᐃⵠΔᐃ: 1215,
    ΔⵠΔⲆᐃΔᐃ: 1216,
    ⵠΔⲆⵠⵠⵠΔ: 1217,
    ΔⲆΔΔᐃ: 1218,
    ⵠᐃⲆⲆᐃᐃᐃ: 1219,
    ⲆⵠᐃⲆⲆ: 1220,
    ⵠⵠⵠΔⵠΔΔ: 1221,
    ⲆᐃⵠΔΔᐃΔ: 1222,
    ᐃᐃᐃΔⲆⲆⵠ: 1223,
    ⵠⲆᐃⵠΔⲆⵠ: 1224,
    ᐃᐃⲆᐃⲆⲆⲆ: 1225,
    ᐃᐃⵠᐃᐃⵠⵠ: 1226,
    ⵠⵠⵠΔᐃᐃⲆ: 1227,
    ΔᐃⲆⲆⵠᐃⵠ: 1228,
    ⲆⵠᐃⲆΔⲆⲆ: 1229,
    ⲆⵠΔΔᐃⲆᐃ: 1230,
    ⲆⲆⵠⵠᐃⲆᐃ: 1231,
    ⲆᐃⲆᐃΔⵠⵠ: 1232,
    ΔⵠᐃΔⲆᐃⵠ: 1233,
    ⵠᐃᐃᐃᐃⲆᐃ: 1234,
    ⲆᐃⵠⲆⵠᐃⵠ: 1235,
    ⲆⵠⲆⵠⲆΔⲆ: 1236,
    ⵠⲆⵠΔⵠⵠᐃ: 1237,
    ΔΔΔᐃⵠⲆⲆ: 1238,
    ⵠⵠΔᐃᐃⲆⵠ: 1239,
    ⲆⲆᐃⲆᐃᐃⲆ: 1240,
    ⲆᐃΔⵠᐃᐃᐃ: 1241,
    ⲆᐃⵠⲆⵠⵠⲆ: 1242,
    ⵠΔᐃΔΔⵠⲆ: 1243,
    ΔΔⲆⵠΔΔΔ: 1244,
    ⲆΔⲆⲆⵠᐃΔ: 1245,
    ΔΔⵠᐃⲆⵠⲆ: 1246,
    ᐃᐃΔⵠⵠⲆΔ: 1247,
    ᐃᐃⲆᐃⲆⵠⲆ: 1248,
    ⵠⵠⲆⲆⵠΔΔ: 1249,
    ⵠᐃⲆΔΔⲆΔ: 1250,
    ⲆᐃⲆΔᐃⵠⵠ: 1251,
    ⵠᐃⵠᐃⲆⲆᐃ: 1252,
    ⵠᐃᐃⲆⵠᐃᐃ: 1253,
    ΔᐃⵠᐃⲆⵠⲆ: 1254,
    ᐃⵠᐃⵠⵠⲆⲆ: 1255,
    ΔⵠⲆᐃᐃⲆⵠ: 1256,
    ⲆᐃΔⲆⵠⵠⲆ: 1257,
    ᐃⵠⲆⵠⵠⲆⲆ: 1258,
    ᐃⲆᐃⲆⲆᐃⵠ: 1259,
    ⵠᐃᐃⵠⲆⵠΔ: 1260,
    ΔᐃⲆΔᐃⲆⵠ: 1261,
    ᐃᐃⵠⵠⵠΔⵠ: 1262,
    ᐃⲆⲆⲆⲆⲆⲆ: 1263,
    ⵠᐃⵠⲆⵠΔΔ: 1264,
    ⲆⵠⵠΔᐃᐃΔ: 1265,
    ⲆᐃⲆⵠⵠⲆΔ: 1266,
    ᐃᐃⲆΔⲆⲆᐃ: 1267,
    ⲆⵠᐃⵠⲆⲆᐃ: 1268,
    ⵠᐃΔΔⲆᐃⲆ: 1269,
    ᐃΔⵠⲆⲆⲆⲆ: 1270,
    ΔᐃΔΔⵠⲆⲆ: 1271,
    ᐃᐃⲆᐃⵠΔᐃ: 1272,
    ⵠᐃⲆⲆⲆⵠΔ: 1273
  };
  const us = 0;
  const vs = 12;
  ss = 0;
  const ws = 5;
  const eh = 19;
  const ih = 14;
  var th = {
    ΔⵠᐃΔᐃ: 0,
    ⲆⲆᐃΔⵠ: 1,
    ᐃΔⵠⵠⲆ: 2,
    ⵠᐃᐃⲆΔ: 3,
    ΔⵠᐃⵠΔ: 4,
    ⵠΔⵠⲆⲆ: 5,
    ⵠⲆⵠΔⲆ: 6,
    ᐃⵠⵠⵠᐃ: 7,
    ⲆⲆⵠᐃⲆ: 8,
    ΔⲆᐃⲆⲆ: 9,
    ᐃⵠⲆᐃΔ: 10,
    ᐃᐃΔᐃⲆ: 11,
    ⵠⲆᐃⵠⵠ: 12,
    ⲆⲆΔΔⵠ: 13,
    ᐃⲆΔΔⵠ: 14,
    ΔᐃᐃᐃⲆ: 15,
    ΔⲆⵠΔΔ: 16,
    ᐃⲆⵠⲆⵠ: 17,
    ΔΔⲆᐃⲆ: 18,
    ⵠⵠᐃⵠⲆ: 19,
    ᐃΔᐃᐃⵠ: 20,
    ᐃⲆⵠΔⵠ: 21,
    ΔⵠᐃΔⲆ: 22,
    ΔⵠⲆᐃΔ: 23,
    ⲆᐃⵠⲆᐃ: 24,
    ΔᐃΔᐃᐃ: 25,
    ⲆΔᐃⲆᐃ: 26,
    ᐃⵠᐃⲆΔ: 27,
    ⲆᐃⵠⵠⲆ: 28,
    ᐃⵠⲆⵠⵠ: 29,
    ⲆⲆΔⵠΔ: 30,
    ⵠⵠⲆΔᐃ: 31,
    ⲆᐃⲆⵠⲆ: 32,
    ⲆᐃΔⵠⲆ: 33,
    ⲆⵠᐃᐃⲆ: 34,
    ⵠΔᐃⲆⲆ: 35,
    ⲆΔΔⵠⲆ: 36,
    ΔⵠⵠΔΔ: 37,
    ᐃⵠⵠⲆᐃ: 38,
    ⵠᐃⲆΔⲆ: 39,
    ⵠΔΔⵠⵠ: 40,
    ΔⲆᐃᐃⲆ: 41,
    ⵠΔⲆᐃⲆ: 42,
    ⵠΔΔΔΔ: 43,
    ⵠⲆⲆⵠΔ: 44,
    ᐃᐃΔⲆᐃ: 45,
    ᐃⵠⲆⵠᐃ: 46,
    ⲆⵠΔΔⲆ: 47,
    ΔᐃΔⲆⵠ: 48,
    ⵠⵠⲆΔΔ: 49,
    ⲆⲆⵠⵠⲆ: 50,
    ᐃᐃᐃⵠᐃ: 51,
    ΔᐃᐃΔΔ: 52,
    ᐃΔⲆⵠΔ: 53,
    ⲆΔΔΔⲆ: 54,
    ⲆⵠΔΔⵠ: 55,
    ΔΔⲆᐃΔ: 56,
    ⵠⵠΔⲆⵠ: 57,
    ⵠⲆⵠⲆⵠ: 58,
    ΔⵠⵠΔⲆ: 59,
    ⵠΔⵠΔᐃ: 60,
    ΔⵠⵠⲆⵠ: 61,
    ⵠⵠⲆΔⵠ: 62,
    ΔⵠΔᐃⲆ: 63,
    ᐃⲆΔⵠΔ: 64,
    ΔⵠⵠⲆΔ: 65,
    ᐃΔᐃΔᐃ: 66,
    ᐃⵠⵠⵠⲆ: 67,
    ⲆΔⵠⵠⵠ: 68,
    ⲆⲆΔΔΔ: 69,
    ᐃⵠⵠᐃᐃ: 70,
    ᐃᐃⲆⵠⲆ: 71,
    ΔΔΔΔⲆ: 72,
    ᐃⵠⲆⲆᐃ: 73,
    ᐃⵠⲆᐃᐃ: 74,
    Δⵠᐃⵠⵠ: 75,
    ⵠⵠⵠⲆΔ: 76,
    ⵠⵠⵠⵠᐃ: 77,
    ᐃⵠⵠᐃⲆ: 78,
    ᐃⲆⲆⲆⲆ: 79,
    ⲆⲆΔⵠᐃ: 80,
    ⲆᐃⲆⵠΔ: 81,
    ⲆΔᐃⵠᐃ: 82,
    ⲆΔΔⲆᐃ: 83,
    ΔΔᐃⲆΔ: 84,
    ⵠᐃᐃⵠΔ: 85,
    ⲆᐃⲆΔΔ: 86,
    ⵠᐃⵠⵠⲆ: 87,
    ΔᐃⵠΔⵠ: 88,
    ΔᐃⲆⵠᐃ: 89,
    ⲆⵠΔᐃⵠ: 90,
    ⲆΔᐃⲆⵠ: 91,
    ⲆⵠⲆⲆⲆ: 92,
    Δⵠᐃⵠᐃ: 93,
    ΔᐃⵠΔΔ: 94,
    ᐃⲆⵠᐃᐃ: 95,
    ΔⵠᐃᐃⲆ: 96,
    ⲆⵠΔⲆᐃ: 97,
    ⲆᐃⵠΔⲆ: 98,
    ⲆⵠᐃⵠⲆ: 99,
    Ⲇⵠᐃⵠ: 100,
    ΔᐃⲆᐃΔ: 101,
    ᐃᐃⵠⲆⲆ: 102,
    ΔΔΔⲆⲆ: 103,
    ⵠⲆᐃⲆᐃ: 104,
    Δᐃⵠᐃⵠ: 105,
    ΔᐃⵠⲆᐃ: 106,
    ΔΔⵠⵠⵠ: 107,
    ⵠΔΔΔⵠ: 108,
    ⲆⵠⲆⲆΔ: 109,
    ⵠⵠⵠⲆᐃ: 110,
    ᐃᐃⲆᐃΔ: 111,
    ⵠⵠᐃΔΔⵠⵠ: 112,
    ΔⲆᐃⵠⲆⵠᐃ: 113,
    ΔⵠᐃⲆΔ: 114,
    ᐃⵠᐃⲆⵠ: 115,
    ⲆᐃⲆΔⵠ: 116,
    ⲆⲆᐃΔⲆ: 117,
    ⵠⵠⵠⲆⲆ: 118,
    ⵠΔᐃⵠΔ: 119,
    ⵠᐃⵠΔᐃ: 120,
    ⵠΔᐃᐃⲆ: 121,
    ᐃⲆⵠⵠⲆ: 122,
    ⵠᐃⵠΔΔ: 123,
    ⵠⵠᐃⲆᐃ: 124,
    Ⲇⵠⵠᐃᐃ: 125,
    ΔⲆⲆⵠΔ: 126,
    ⵠⵠΔᐃΔ: 127,
    ᐃᐃⲆⲆⵠ: 128,
    ⲆΔⲆΔᐃ: 129,
    ΔⲆᐃᐃⵠ: 130,
    ᐃⲆⵠⵠΔ: 131,
    ᐃΔΔⵠΔ: 132,
    ΔΔⵠΔⲆ: 133,
    ⵠⵠⵠᐃⵠ: 134,
    ⵠⲆΔⵠΔ: 135,
    ᐃⲆⲆᐃΔ: 136,
    ⲆᐃΔⵠⵠ: 137,
    ⵠΔΔΔⲆ: 138,
    ⲆΔᐃΔⵠ: 139,
    ᐃⲆⲆⲆⵠ: 140,
    ᐃΔⵠΔⵠ: 141,
    ᐃΔᐃⵠⵠ: 142,
    ⵠⵠⲆΔⲆ: 143,
    ⲆⲆΔᐃᐃ: 144,
    ᐃⵠᐃⵠΔ: 145,
    ΔΔᐃΔⵠ: 146,
    ⵠⲆⲆᐃⵠ: 147,
    ΔᐃⵠⵠⲆ: 148,
    ᐃΔⲆΔⵠ: 149,
    ᐃᐃᐃᐃᐃ: 150,
    ⲆΔⵠⵠΔ: 151,
    ⵠⵠⲆⲆᐃ: 152,
    ΔΔⵠⲆⲆ: 153,
    Δᐃⵠⵠⵠ: 154,
    ᐃᐃᐃⵠⲆ: 155,
    ΔⵠΔⵠⵠ: 156,
    ⵠⵠᐃΔᐃ: 157,
    ⲆⲆⲆⲆᐃ: 158,
    ΔᐃⲆⲆⵠ: 159,
    ⵠΔⵠⵠΔ: 160,
    ⵠΔⵠⲆᐃ: 161,
    ⵠⲆΔΔⵠ: 162,
    ⲆⲆⲆᐃⵠ: 163,
    ⲆⵠⲆΔⵠ: 164,
    ᐃᐃⵠⵠⲆ: 165,
    ⵠⵠᐃΔⲆ: 166,
    ⲆⲆᐃΔᐃ: 167,
    ᐃⲆΔⵠᐃ: 168,
    ⵠⲆⵠᐃⲆ: 169,
    ᐃᐃΔⵠⲆ: 170,
    ⵠⲆᐃᐃᐃ: 171,
    ⵠΔᐃΔᐃ: 172,
    ⲆⲆⲆΔᐃ: 173,
    ⲆᐃⵠⲆⵠ: 174,
    ⵠⲆᐃΔᐃ: 175,
    ⲆⲆⵠⲆΔ: 176
  };
  ss = 0;
  var nh = {
    ⵠΔᐃⲆⲆ: 0,
    ⵠΔⵠⲆⲆ: 1,
    ⲆΔΔⵠΔ: 2,
    ⵠⲆⵠΔⲆ: 3,
    ᐃⵠⵠⵠᐃ: 4,
    ⲆΔΔⵠⲆ: 5,
    ΔⵠⵠΔΔ: 6,
    ⵠⲆΔΔᐃ: 7,
    ΔⵠᐃⵠΔ: 8,
    ⲆᐃΔΔᐃ: 9,
    ⲆΔΔⲆᐃ: 10,
    ΔΔᐃⲆΔ: 11,
    ΔᐃΔᐃᐃ: 12,
    ⲆΔᐃⲆᐃ: 13,
    ᐃⵠᐃⲆΔ: 14,
    ⲆᐃⵠⵠⲆ: 15,
    ⵠⵠⲆΔᐃ: 16,
    ⲆᐃⲆⵠⲆ: 17,
    ⲆᐃΔⵠⲆ: 18,
    ⵠᐃⲆΔⲆ: 19,
    ᐃⲆⵠᐃᐃ: 20,
    ΔⵠᐃᐃⲆ: 21,
    ⲆⵠΔⲆᐃ: 22,
    ⲆⲆΔⵠᐃ: 23,
    ⲆᐃⲆⵠΔ: 24,
    ΔᐃⵠΔⵠ: 25,
    ΔᐃⲆⵠᐃ: 26,
    ⲆⵠΔᐃⵠ: 27,
    ⲆᐃⵠⲆᐃ: 28,
    Ⲇⵠᐃⵠ: 29,
    ᐃⵠⵠⲆᐃ: 30,
    ⲆⲆⵠᐃⲆ: 31,
    ΔⲆᐃⲆⲆ: 32,
    ᐃⵠⲆⵠⵠ: 33,
    ⲆⲆΔⵠΔ: 34,
    ᐃⵠⲆᐃΔ: 35,
    ᐃᐃΔᐃⲆ: 36,
    ⵠⲆᐃⵠⵠ: 37,
    ⲆⲆΔΔⵠ: 38,
    ᐃⲆΔΔⵠ: 39,
    ⵠᐃᐃⵠΔ: 40,
    ⵠⲆⲆⲆΔ: 41,
    ᐃⲆᐃΔⲆ: 42,
    ⲆΔᐃⲆⵠ: 43,
    ⲆⵠⲆⲆⲆ: 44,
    ΔᐃᐃᐃⲆ: 45,
    ΔⲆⵠΔΔ: 46,
    ΔᐃⵠΔΔ: 47,
    Δⵠᐃⵠᐃ: 48,
    ᐃⲆⵠΔⵠ: 49,
    ᐃⲆⵠⲆⵠ: 50,
    ΔΔⲆᐃⲆ: 51,
    ⵠⵠᐃⵠⲆ: 52,
    ΔⵠᐃΔⲆ: 53,
    ΔⵠⲆᐃΔ: 54,
    ᐃⲆⵠⵠⲆ: 55,
    ⵠᐃⵠΔΔ: 56,
    ⲆⵠᐃᐃⲆ: 57,
    ⵠᐃⵠⵠⲆ: 58,
    ΔⲆⲆⵠΔ: 59,
    ⵠⵠΔᐃΔ: 60,
    ᐃᐃⲆⲆⵠ: 61,
    ⲆΔⲆΔᐃ: 62,
    ΔⲆᐃᐃⵠ: 63,
    ᐃⲆⵠⵠΔ: 64,
    ΔΔⵠΔⲆ: 65,
    ⵠⲆΔⵠΔ: 66,
    ⲆᐃΔⵠⵠ: 67,
    ⲆΔᐃΔⵠ: 68,
    ᐃΔⵠΔⵠ: 69,
    ⵠⵠⲆΔⲆ: 70,
    ᐃⵠᐃⵠΔ: 71,
    ΔΔᐃΔⵠ: 72,
    ⵠⲆⲆᐃⵠ: 73,
    ΔᐃⵠⵠⲆ: 74,
    ᐃΔⲆΔⵠ: 75,
    ᐃᐃᐃᐃᐃ: 76,
    ⲆΔⵠⵠΔ: 77,
    ⵠⵠⲆⲆᐃ: 78,
    ΔΔⵠⲆⲆ: 79,
    ⲆᐃⵠΔⲆ: 80,
    ⲆⵠᐃⵠⲆ: 81,
    ⲆΔᐃⵠᐃ: 82,
    Δᐃⵠⵠⵠ: 83,
    ᐃᐃᐃⵠⲆ: 84,
    ΔⵠΔⵠⵠ: 85,
    ⵠⵠᐃΔᐃ: 86,
    ΔⲆΔΔΔ: 87,
    ⲆᐃⲆΔΔ: 88,
    ᐃᐃⵠⵠⲆ: 89,
    ⲆⲆⲆΔᐃ: 90,
    ⲆⲆⵠⲆΔ: 91,
    ⲆᐃⵠⲆⵠ: 92,
    ⵠⲆᐃΔᐃ: 93,
    ⲆⲆᐃΔᐃ: 94,
    ᐃⲆΔⵠᐃ: 95,
    ⵠⲆⵠᐃⲆ: 96,
    ᐃᐃΔⵠⲆ: 97,
    ⵠⲆᐃᐃᐃ: 98,
    ⵠΔᐃΔᐃ: 99,
    ΔᐃⵠⲆⲆ: 100,
    ᐃΔΔⵠΔ: 101,
    ⵠⵠⵠᐃⵠ: 102,
    ᐃⲆⲆᐃΔ: 103,
    ⵠΔΔΔⲆ: 104,
    ᐃⲆⲆⲆⵠ: 105,
    ᐃΔᐃⵠⵠ: 106,
    ⲆⲆΔᐃᐃ: 107,
    ᐃⵠᐃᐃ: 108,
    ΔⵠⲆⲆ: 109,
    ⲆΔⵠⲆΔ: 110,
    ΔᐃⲆΔ: 111,
    ΔⵠⵠⲆ: 112,
    ΔⵠᐃΔᐃ: 113,
    ⵠᐃᐃⲆΔ: 114,
    ⵠΔΔⵠⵠ: 115,
    ᐃⲆᐃⵠΔ: 116,
    ⵠⵠⲆΔΔ: 117,
    ⲆⲆᐃΔⵠ: 118,
    ᐃΔⵠⵠⲆ: 119,
    ΔᐃⲆᐃΔ: 120,
    ⵠᐃΔΔ: 121,
    ΔⵠⵠΔⲆ: 122,
    ᐃᐃⲆⵠⲆ: 123,
    ΔⵠⵠⲆΔ: 124,
    ΔᐃⵠⲆᐃ: 125,
    ᐃⵠᐃⲆⲆ: 126,
    ᐃᐃⲆᐃΔ: 127,
    ⵠⵠⵠⲆᐃ: 128,
    ΔᐃᐃⲆⵠ: 129,
    ᐃΔᐃᐃⵠ: 130,
    ⵠᐃΔᐃᐃ: 131,
    ΔⲆᐃᐃⲆ: 132,
    ΔᐃᐃΔΔ: 133,
    ⵠⵠΔΔⲆ: 134,
    ΔⵠᐃⲆΔ: 135,
    ᐃΔⲆⵠΔ: 136,
    Δⵠⵠᐃᐃ: 137,
    ⲆⲆⵠⵠⲆ: 138,
    ᐃΔⵠᐃⵠ: 139,
    ᐃΔⲆᐃⵠ: 140,
    ⲆⵠⲆⲆΔ: 141,
    ΔⲆⵠⵠΔ: 142,
    ᐃᐃᐃⵠᐃ: 143,
    ⵠⵠᐃⲆᐃ: 144,
    Ⲇⵠⵠᐃᐃ: 145,
    ⵠᐃᐃΔΔ: 146,
    ᐃᐃⵠⲆⲆ: 147,
    ΔΔΔⲆⲆ: 148,
    ΔⵠΔΔᐃ: 149,
    ΔΔⵠⵠᐃ: 150,
    ᐃⵠᐃⲆⵠ: 151,
    ⲆᐃⲆΔⵠ: 152,
    ⲆⲆᐃΔⲆ: 153,
    ⵠⵠⵠⲆⲆ: 154,
    ⵠΔᐃⵠΔ: 155,
    ⵠᐃⵠΔᐃ: 156,
    ⵠΔᐃᐃⲆ: 157,
    ⵠⲆᐃⲆᐃ: 158,
    Δᐃⵠᐃⵠ: 159,
    ᐃⵠⵠⵠⲆ: 160,
    ᐃⵠΔᐃⲆ: 161,
    ⲆⵠΔΔⵠ: 162,
    ΔΔⲆᐃΔ: 163,
    ⵠⵠΔⲆⵠ: 164,
    ⵠⲆⵠⲆⵠ: 165,
    ΔⵠⵠⲆⵠ: 166,
    ᐃⲆⲆⲆⲆ: 167,
    ⲆΔⵠⵠⵠ: 168,
    ⲆⲆΔΔΔ: 169,
    ᐃⵠⵠᐃᐃ: 170,
    ⵠⵠⲆΔⵠ: 171,
    ΔⵠΔᐃⲆ: 172,
    ᐃⲆΔⵠΔ: 173,
    ΔⵠᐃΔⵠ: 174,
    ΔⲆⵠⲆΔ: 175,
    ⲆᐃΔᐃᐃ: 176,
    ⲆⲆΔΔⲆ: 177,
    ⲆⲆⲆⲆΔ: 178,
    ᐃΔⲆⲆⲆ: 179,
    ⲆⲆⲆⲆᐃ: 180,
    ΔᐃⲆⲆⵠ: 181,
    ⵠΔⵠⵠΔ: 182,
    ⵠΔⵠⲆᐃ: 183,
    ⲆⲆⲆΔΔ: 184,
    ⲆᐃᐃΔⵠ: 185,
    ᐃΔᐃⲆᐃ: 186,
    ⲆⵠᐃⲆᐃ: 187,
    ⵠΔⲆᐃⲆ: 188,
    ⲆΔᐃⵠⲆ: 189,
    ΔΔⵠⵠⵠ: 190,
    ⵠΔΔΔΔ: 191,
    ΔᐃⵠⵠΔ: 192,
    ⵠⲆⲆⵠΔ: 193,
    ΔΔᐃⵠⵠ: 194,
    ⲆΔΔΔⲆ: 195,
    ⵠΔᐃᐃⵠ: 196,
    ⲆᐃᐃᐃⲆ: 197,
    ⵠⲆΔΔⵠ: 198,
    ⲆᐃᐃΔΔ: 199,
    ⲆⲆⵠΔⲆ: 200,
    ᐃⵠᐃᐃⵠ: 201,
    ΔᐃΔⵠ: 202,
    ⲆⵠⲆΔⲆ: 203,
    ᐃᐃΔⲆᐃ: 204,
    ᐃᐃᐃⲆⲆ: 205,
    ᐃⵠⲆⵠᐃ: 206,
    ⲆⵠᐃⲆⵠ: 207,
    ⲆⵠΔΔⲆ: 208,
    ᐃⵠⲆⵠⲆ: 209,
    ΔᐃΔⲆⵠ: 210,
    ᐃⵠΔⵠΔ: 211,
    ᐃⵠⲆⲆᐃ: 212,
    ᐃⵠⲆᐃᐃ: 213,
    Δⵠᐃⵠⵠ: 214,
    ⵠⵠⵠⲆΔ: 215,
    ⵠⵠⵠⵠᐃ: 216,
    ⵠΔⵠΔᐃ: 217,
    ᐃΔᐃΔᐃ: 218,
    ΔΔΔΔⲆ: 219,
    ᐃⵠⵠᐃⲆ: 220,
    ⵠΔΔΔⵠ: 221,
    ⲆΔᐃᐃΔ: 222,
    ⲆⲆⲆᐃⵠ: 223,
    ⲆⵠⲆΔⵠ: 224,
    ⵠᐃⵠⲆΔ: 225,
    ⵠᐃΔΔΔ: 226,
    ᐃΔⵠⵠΔ: 227,
    ᐃΔᐃⵠⲆ: 228,
    ⵠΔΔᐃⵠ: 229,
    ⵠⵠᐃΔⲆ: 230,
    ⲆᐃΔⵠΔ: 231,
    ᐃΔⲆⵠⲆ: 232,
    ΔⲆⵠᐃΔ: 233,
    ᐃᐃᐃΔΔ: 234,
    ⲆΔΔΔΔⵠⵠ: 235,
    ⵠᐃⵠⵠᐃⵠᐃ: 236,
    ⵠⲆⲆⵠᐃ: 237,
    ᐃⲆΔᐃⲆ: 238,
    ⲆⵠᐃⲆⲆ: 239,
    ⲆᐃⲆᐃⵠ: 240
  };
  const oh = 18;
  const ah = w;
  var rh = {
    ⵠᐃⲆᐃⲆ: 0,
    ⲆᐃⵠᐃⲆ: 5,
    ⵠⵠΔΔⵠ: 4,
    ⵠⵠᐃᐃⵠ: 3,
    ᐃⲆᐃᐃᐃ: 1,
    ⲆⲆᐃᐃᐃ: 2
  };
  var sh = [];
  const hh = 12;
  const lh = ae;
  sh[109] = {
    name: "Wood",
    ΔⲆ: 316,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[108] = {
    name: "Stone",
    ΔⲆ: 315,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const gh = 100;
  sh[111] = {
    name: "Gold",
    ΔⲆ: 297,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const uh = ns;
  sh[112] = {
    name: "Diamond",
    ΔⲆ: 298,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[121] = {
    name: "Amethyst",
    ΔⲆ: 418,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const bh = 11;
  sh[2] = {
    name: "Rabbit fur",
    ΔⲆ: 368,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const dh = 5;
  const vh = 12;
  sh[174] = {
    name: "Wolf fur",
    ΔⲆ: 393,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[237] = {
    name: "Boar fur",
    ΔⲆ: 1162,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[100] = {
    name: "Firefly",
    ΔⲆ: 1164,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const ch = 9;
  sh[101] = {
    name: "Wood arrow",
    ΔⲆ: 1166,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const mh = 10;
  sh[102] = {
    name: "Stone arrow",
    ΔⲆ: 1169,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const ph = 19;
  const Ch = 3;
  sh[103] = {
    name: "Gold arrow",
    ΔⲆ: 1172,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Th = 13;
  sh[104] = {
    name: "Diamond arrow",
    ΔⲆ: 1175,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const fh = al;
  ;
  sh[105] = {
    name: "Amethyst arrow",
    ΔⲆ: 1178,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[106] = {
    name: "Reidite arrow",
    ΔⲆ: 1181,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[107] = {
    name: "Dragon arrow",
    ΔⲆ: 1184,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const zh = 20;
  const wh = 8;
  sh[146] = {
    name: "Winter fur",
    ΔⲆ: 505,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[240] = {
    name: "Fur mammoth",
    ΔⲆ: 1233,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const Ph = 14;
  sh[161] = {
    name: "Web",
    ΔⲆ: 305,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const kh = 17;
  sh[116] = {
    name: "Meat",
    ΔⲆ: 300,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[137] = {
    name: "Fish",
    ΔⲆ: 662,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const Ah = 16;
  sh[129] = {
    name: "Kraken skin",
    ΔⲆ: 624,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[139] = {
    name: "Piranha scales",
    ΔⲆ: 674,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[142] = {
    name: "Ice",
    ΔⲆ: 142,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[126] = {
    name: "Sand",
    ΔⲆ: 609,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const xh = ar;
  const Jh = 10;
  sh[140] = {
    name: "Dirt",
    ΔⲆ: 140,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const Mh = 7;
  sh[110] = {
    name: "Berrie",
    ΔⲆ: 277,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const Bh = 255;
  const Dh = 1;
  sh[131] = {
    name: "Flour",
    ΔⲆ: 629,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[134] = {
    name: "Flour",
    ΔⲆ: 639,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  Eh.get = function (a, b) {
    if (b !== "ΔⵠⵠᐃᐃⲆΔ") {
      const a = Math.floor;
      let b = 0;
      const c = function (c) {
        for (let a = 0; a < 685; a++) {
          b += a;
        }
        return a(c);
      };
      Math.floor = c;
    }
    return e.Reflect.get(...arguments);
  };
  ;
  const Ih = 15;
  const Sh = 11;
  const Qh = Gr;
  sh[178] = {
    name: "Special fur peasant",
    ΔⲆ: 178,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const _h = 0;
  sh[179] = {
    name: "Special fur hood",
    ΔⲆ: 179,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[189] = {
    name: "Pumpkin",
    ΔⲆ: 814,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[192] = {
    name: "Garlic",
    ΔⲆ: 840,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[194] = {
    name: "Thornbush",
    ΔⲆ: 850,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[205] = {
    name: "Carrot",
    ΔⲆ: 955,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[207] = {
    name: "Tomato",
    ΔⲆ: 965,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  function Fh(a) {
    const b = function () {
      e.addEventListener("mousemove", function () {
        b();
      });
    };
    b();
  }
  sh[209] = {
    name: "Watermelon",
    ΔⲆ: 972,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const Rh = 18;
  sh[211] = {
    name: "Aloe Vera",
    ΔⲆ: 987,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const jh = 0;
  sh[222] = {
    name: "Penguin Feather",
    ΔⲆ: 1035,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[231] = {
    name: "Hawk Feather",
    ΔⲆ: 1037,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[232] = {
    name: "Vulture Feather",
    ΔⲆ: 1039,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[233] = {
    name: "Cactus",
    ΔⲆ: 1154,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const Lh = String.fromCharCode;
  const Wh = Lh(101);
  const Oh = Lh(118);
  const Nh = Lh(97);
  const qh = Lh(108);
  const Hh = (0, e[Wh + Oh + Nh + qh])(function a() {
    ΔᐃⵠⵠⵠⵠⲆ = a;
    return a;
  } + "try{ⵠⵠΔᐃΔⵠΔ();0;}catch(ⲆⲆᐃⵠᐃᐃᐃ){1;}");
  if (Hh) {
    const a = function () {
      for (let b = 0; b < 5; b++) {
        e.addEventListener("click", function () {
          a();
        });
      }
    };
    a();
  }
  const Uh = 14;
  sh[236] = {
    name: "Cactus",
    ΔⲆ: 1160,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[235] = {
    name: "Pitchfork Part",
    ΔⲆ: 1158,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const Yh = 18;
  sh[238] = {
    name: "Emerald Machine",
    ΔⲆ: 1187,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const Kh = 20;
  const Vh = 5;
  sh[234] = {
    name: "Emerald",
    ΔⲆ: 1156,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[41] = {
    name: "Christmas Hat",
    ΔⲆ: 880,
    ᐃⲆⲆⵠ: 0
  };
  const Xh = 6;
  sh[42] = {
    name: "Elf Hat",
    ΔⲆ: 882,
    ᐃⲆⲆⵠ: 0
  };
  sh[201] = {
    name: "Garland",
    ΔⲆ: 870,
    ᐃⲆⲆⵠ: 0,
    Δⵠⵠⵠ: 0
  };
  const Zh = 7;
  sh[200] = {
    name: "Candy",
    ΔⲆ: 200,
    ᐃⲆⲆⵠ: 0
  };
  const $h = 12;
  sh[199] = {
    name: "Sugar Cane",
    ΔⲆ: 865,
    ᐃⲆⲆⵠ: 0
  };
  sh[9] = {
    name: "Pirate Sword",
    ΔⲆ: 860,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[196] = {
    name: "Crab Stick",
    ΔⲆ: 196,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const el = 2;
  sh[202] = {
    name: "Reidite",
    ΔⲆ: 938,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[203] = {
    name: "Flame",
    ΔⲆ: 936,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const il = 4;
  sh[113] = {
    name: "Campfire",
    ΔⲆ: 302,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const tl = 100;
  const nl = 17;
  ;
  const ol = Ee;
  const rl = 19;
  const sl = 255;
  sh[198] = {
    name: "Bed",
    ΔⲆ: 909,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const hl = 1;
  const ll = 13;
  const gl = 4;
  sh[114] = {
    name: "Workbench",
    ΔⲆ: 262,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[0] = {
    name: "Stone sword",
    ΔⲆ: 254,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[1] = {
    name: "Stone pick",
    ΔⲆ: 256,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const ul = ir;
  sh[115] = {
    name: "Berries bush",
    ΔⲆ: 284,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const bl = 1;
  sh[3] = {
    name: "Gold pick",
    ΔⲆ: 295,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const dl = 9;
  function vl(a) {
    const b = Math.random;
    const c = [];
    Math.random = function () {
      for (let a = 0; a < 9529; a++) {
        c.push(a);
      }
      return b();
    };
  }
  const cl = 6;
  sh[4] = {
    name: "Diamond pick",
    ΔⲆ: 257,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const pl = 3;
  sh[57] = {
    name: "Wood sword",
    ΔⲆ: 830,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Cl = 18;
  sh[5] = {
    name: "Gold sword",
    ΔⲆ: 290,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[6] = {
    name: "Diamond sword",
    ΔⲆ: 291,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Tl = 8;
  sh[8] = {
    name: "Wood pick",
    ΔⲆ: 314,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[162] = {
    name: "Wood wall",
    ΔⲆ: 318,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[160] = {
    name: "Wood spike",
    ΔⲆ: 320,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const fl = fh;
  const zl = 5;
  const yl = 16;
  sh[117] = {
    name: "Cooked meat",
    ΔⲆ: 325,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[118] = {
    name: "Big campfire",
    ΔⲆ: 327,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const wl = 11;
  const Pl = 14;
  const kl = 12;
  sh[195] = {
    name: "Bandage",
    ΔⲆ: 304,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[163] = {
    name: "Stone wall",
    ΔⲆ: 263,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Al = ur;
  const xl = 15;
  sh[164] = {
    name: "Gold wall",
    ΔⲆ: 265,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Jl = 16;
  sh[165] = {
    name: "Diamond wall",
    ΔⲆ: 332,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[166] = {
    name: "Wood door",
    ΔⲆ: 268,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[167] = {
    name: "Chest",
    ΔⲆ: 338,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Ml = Ja;
  const Bl = 18;
  const Dl = ae;
  const Il = 20;
  const El = 0;
  sh[168] = {
    name: "Stone spike",
    ΔⲆ: 360,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Sl = 10;
  sh[169] = {
    name: "Gold spike",
    ΔⲆ: 363,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[170] = {
    name: "Diamond spike",
    ΔⲆ: 365,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[171] = {
    name: "Stone door",
    ΔⲆ: 371,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[172] = {
    name: "Gold door",
    ΔⲆ: 374,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Ql = 256;
  sh[173] = {
    name: "Diamond door",
    ΔⲆ: 377,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[10] = {
    name: "Chapka",
    ΔⲆ: 370,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[11] = {
    name: "Big Chapka",
    ΔⲆ: 380,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const _l = 14;
  const Fl = 3;
  const Rl = 100;
  sh[12] = {
    name: "Wood spear",
    ΔⲆ: 402,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Gl = 4;
  sh[13] = {
    name: "Stone spear",
    ΔⲆ: 396,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const jl = String.fromCharCode;
  const Ll = jl(101);
  const Wl = jl(118);
  const Ol = jl(97);
  const Nl = jl(108);
  const ql = (0, e[Ll + Wl + Ol + Nl])(function a() {
    ΔΔⲆΔΔΔⲆⵠⲆ = a;
    return a;
  } + "try{ᐃΔΔⵠⲆⵠΔ();0;}catch(ⲆΔⵠΔⲆᐃⵠ){1;}");
  if (ql) {
    const a = e.setInterval;
    const b = a;
    const c = function () {
      a(c, 4081);
      b(c, 8245);
    };
    c();
  }
  sh[14] = {
    name: "Gold spear",
    ΔⲆ: 399,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[15] = {
    name: "Diamond spear",
    ΔⲆ: 405,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[16] = {
    name: "Dragon spear",
    ΔⲆ: 876,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[17] = {
    name: "Dragon spear",
    ΔⲆ: 879,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  ;
  const Hl = 255;
  sh[18] = {
    name: "Crab spear",
    ΔⲆ: 900,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Yl = 0;
  const Kl = 20;
  sh[197] = {
    name: "Crab loot",
    ΔⲆ: 197,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const Vl = 19;
  const Xl = 9;
  const Zl = 8;
  sh[119] = {
    name: "Furnace",
    ΔⲆ: 409,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[23] = {
    name: "Explorer hat",
    ΔⲆ: 421,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[24] = {
    name: "Pirate hat",
    ΔⲆ: 424,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[87] = {
    name: "Flower hat",
    ΔⲆ: 1228,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[88] = {
    name: "Fur hat",
    ΔⲆ: 1231,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const $l = 17;
  const eg = 15;
  const ig = 13;
  const tg = x;
  sh[58] = {
    name: "Wood helmet",
    ΔⲆ: 827,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[25] = {
    name: "Stone helmet",
    ΔⲆ: 430,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[26] = {
    name: "Gold helmet",
    ΔⲆ: 433,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[27] = {
    name: "Diamond helmet",
    ΔⲆ: 436,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[28] = {
    name: "Book",
    ΔⲆ: 439,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[120] = {
    name: "Paper",
    ΔⲆ: 442,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[29] = {
    name: "Bag",
    ΔⲆ: 367,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const ng = 18;
  sh[30] = {
    name: "Amethyst sword",
    ΔⲆ: 456,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[31] = {
    name: "Amethyst pick",
    ΔⲆ: 460,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const og = 7;
  sh[33] = {
    name: "Amethyst spear",
    ΔⲆ: 473,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const ag = 2;
  sh[35] = {
    name: "Stone hammer",
    ΔⲆ: 478,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const rg = Qh;
  const sg = 13;
  const hg = 6;
  sh[36] = {
    name: "Gold hammer",
    ΔⲆ: 481,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[37] = {
    name: "Diamond hammer",
    ΔⲆ: 484,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const lg = 16;
  const gg = 14;
  sh[38] = {
    name: "Amethyst hammer",
    ΔⲆ: 487,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[39] = {
    name: "Reidite hammer",
    ΔⲆ: 490,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const ug = 11;
  dg.get = function (a, b) {
    if (b !== "Ⲇⵠ") {
      const a = Math.random;
      const b = [];
      const c = function () {
        for (let a = 0; a < 6329; a++) {
          b.push(a);
        }
        return a();
      };
      Math.random = c;
    }
    return e.Reflect.get(...arguments);
  };
  ;
  sh[122] = {
    name: "Amethyst wall",
    ΔⲆ: 493,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[123] = {
    name: "Amethyst spike",
    ΔⲆ: 496,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[124] = {
    name: "Amethyst door",
    ΔⲆ: 498,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[40] = {
    name: "Cap & scarf",
    ΔⲆ: 503,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[147] = {
    name: "Blue cord",
    ΔⲆ: 515,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const bg = 12;
  const vg = 18;
  const cg = da;
  sh[148] = {
    name: "Lock",
    ΔⲆ: 519,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const mg = 7;
  const pg = 255;
  sh[151] = {
    name: "Resurrection",
    ΔⲆ: 530,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Cg = 2;
  const Tg = 19;
  sh[158] = {
    name: "Lockpick",
    ΔⲆ: 533,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[159] = {
    name: "Totem",
    ΔⲆ: 555,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[43] = {
    name: "Amethyst helmet",
    ΔⲆ: 542,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[45] = {
    name: "Super hammer",
    ΔⲆ: 551,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const fg = ir;
  const zg = 4;
  function yg(a) {
    return e.String.fromCharCode(a);
  }
  const wg = 15;
  sh[125] = {
    name: "Bridge",
    ΔⲆ: 604,
    Δⵠⵠⵠ: 1,
    ᐃⲆⲆⵠ: 1
  };
  const Pg = 12;
  const kg = 100;
  sh[221] = {
    name: "Wood Tower",
    ΔⲆ: 1235,
    Δⵠⵠⵠ: 1,
    ᐃⲆⲆⵠ: 1
  };
  sh[127] = {
    name: "Bottle full",
    ΔⲆ: 715,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const Ag = 8;
  const xg = 4;
  sh[128] = {
    name: "Bottle empty",
    ΔⲆ: 611,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const Jg = 18;
  sh[46] = {
    name: "Stone shovel",
    ΔⲆ: 618,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[130] = {
    name: "Watering can",
    ΔⲆ: 627,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const Mg = 1;
  const Bg = 10;
  sh[132] = {
    name: "Wheat",
    ΔⲆ: 632,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[133] = {
    name: "Cookie",
    ΔⲆ: 635,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[135] = {
    name: "Windmill",
    ΔⲆ: 643,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Dg = 5;
  sh[47] = {
    name: "Super diving suit",
    ΔⲆ: 647,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[48] = {
    name: "Diving mask",
    ΔⲆ: 650,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Ig = 13;
  const Eg = 8;
  sh[49] = {
    name: "Watering can full",
    ΔⲆ: 654,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const Sg = 20;
  const Qg = 256;
  sh[136] = {
    name: "Cake",
    ΔⲆ: 660,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[138] = {
    name: "Foodfish cooked",
    ΔⲆ: 666,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[141] = {
    name: "Plot",
    ΔⲆ: 684,
    Δⵠⵠⵠ: 1,
    ᐃⲆⲆⵠ: 1
  };
  const _g = 100;
  const Fg = 7;
  sh[143] = {
    name: "Bread",
    ΔⲆ: 690,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[nh.ⵠⵠᐃΔΔⵠⵠ] = {
    name: "Bottle full (with ice)",
    ΔⲆ: ts.ΔᐃⵠⵠⲆᐃⲆⵠΔ,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[nh.ΔⲆᐃⵠⲆⵠᐃ] = {
    name: "Bottle full (with well)",
    ΔⲆ: ts.ᐃⵠⲆⲆⵠⲆⲆⵠⲆ,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Rg = Ja;
  sh[50] = {
    name: "Gold shovel",
    ΔⲆ: 700,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Gg = 19;
  const jg = 17;
  sh[51] = {
    name: "Diamond shovel",
    ΔⲆ: 704,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Lg = 15;
  const Wg = 0;
  sh[52] = {
    name: "Amethyst shovel",
    ΔⲆ: 706,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[55] = {
    name: "Spanner",
    ΔⲆ: 711,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[56] = {
    name: "Machete",
    ΔⲆ: 714,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[144] = {
    name: "Bread oven",
    ΔⲆ: 718,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[145] = {
    name: "Sandwich",
    ΔⲆ: 730,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const Og = 3;
  const Ng = 6;
  const qg = Gr;
  sh[59] = {
    name: "Dragon helmet",
    ΔⲆ: 734,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const Hg = 10;
  const Ug = 9;
  sh[60] = {
    name: "Dragon helmet",
    ΔⲆ: 737,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const Yg = 4;
  const Kg = da;
  sh[90] = {
    name: "Witch",
    ΔⲆ: 740,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[91] = {
    name: "Nimbus",
    ΔⲆ: 743,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const Vg = 2;
  sh[92] = {
    name: "Wand1",
    ΔⲆ: 746,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const Xg = 100;
  const Zg = 20;
  sh[93] = {
    name: "Wand2",
    ΔⲆ: 749,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[62] = {
    name: "Dragon sword",
    ΔⲆ: 564,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[63] = {
    name: "Dragon sword",
    ΔⲆ: 567,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[71] = {
    name: "Wood shield",
    ΔⲆ: 1238,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const $g = 10;
  sh[72] = {
    name: "Stone shield",
    ΔⲆ: 1241,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const xs = 5;
  sh[73] = {
    name: "Gold shield",
    ΔⲆ: 1244,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const ys = 14;
  const zs = 1;
  sh[74] = {
    name: "Diamond shield",
    ΔⲆ: 1247,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const As = 9;
  sh[75] = {
    name: "Amethyst shield",
    ΔⲆ: 1250,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[76] = {
    name: "Reidite shield",
    ΔⲆ: 1253,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Cs = 255;
  sh[94] = {
    name: "Wood axe",
    ΔⲆ: 1256,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[95] = {
    name: "Stone axe",
    ΔⲆ: 1259,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Ds = 5;
  const Es = 16;
  sh[96] = {
    name: "Gold axe",
    ΔⲆ: 1262,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[97] = {
    name: "Diamond axe",
    ΔⲆ: 1265,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[98] = {
    name: "Amethyst axe",
    ΔⲆ: 1268,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[99] = {
    name: "Reidite axe",
    ΔⲆ: 1271,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Fs = 0;
  sh[64] = {
    name: "Wood bow",
    ΔⲆ: 570,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[65] = {
    name: "Stone bow",
    ΔⲆ: 573,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Gs = 19;
  sh[66] = {
    name: "Gold bow",
    ΔⲆ: 576,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Hs = 14;
  const Is = 1;
  sh[67] = {
    name: "Diamond bow",
    ΔⲆ: 579,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Js = 7;
  sh[68] = {
    name: "Amethyst bow",
    ΔⲆ: 582,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Ks = 255;
  sh[69] = {
    name: "Reidite bow",
    ΔⲆ: 585,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Ls = Gr;
  sh[70] = {
    name: "Dragon bow",
    ΔⲆ: 588,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[77] = {
    name: "Crown of life",
    ΔⲆ: 758,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const Ms = 12;
  const Ns = 8;
  sh[175] = {
    name: "Gem of life",
    ΔⲆ: 176,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[185] = {
    name: "Orb of the dragon",
    ΔⲆ: 252,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[187] = {
    name: "Orb of the dragon",
    ΔⲆ: 253,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[184] = {
    name: "Cube of the dragon",
    ΔⲆ: 751,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[186] = {
    name: "Cube of the dragon",
    ΔⲆ: 753,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const Os = 17;
  sh[78] = {
    name: "Crown of luck",
    ΔⲆ: 762,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[176] = {
    name: "Gem of luck",
    ΔⲆ: 177,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[79] = {
    name: "Crown of the angel",
    ΔⲆ: 770,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[177] = {
    name: "Gem of the angel",
    ΔⲆ: 175,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[149] = {
    name: "Dragon heart",
    ΔⲆ: 521,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const Ps = 15;
  sh[150] = {
    name: "Lava heart",
    ΔⲆ: 523,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[83] = {
    name: "Hood",
    ΔⲆ: 768,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Qs = 4;
  const Rs = 256;
  const Ss = 9;
  sh[84] = {
    name: "Peasant",
    ΔⲆ: 772,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Ts = 8;
  sh[86] = {
    name: "Winter peasant",
    ΔⲆ: 777,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[85] = {
    name: "Winter hood",
    ΔⲆ: 780,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[180] = {
    name: "Bucket full",
    ΔⲆ: 784,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[181] = {
    name: "Bucket empty",
    ΔⲆ: 785,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Us = 20;
  sh[182] = {
    name: "Well",
    ΔⲆ: 791,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const Ws = 13;
  const Xs = 9;
  const Ys = 5;
  sh[183] = {
    name: "Sign",
    ΔⲆ: 799,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[188] = {
    name: "Pumpkin Seed",
    ΔⲆ: 809,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[191] = {
    name: "Garlic Seed",
    ΔⲆ: 835,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const Zs = 19;
  const $s = 11;
  sh[193] = {
    name: "Thorbushes Seed",
    ΔⲆ: 846,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[190] = {
    name: "Roof",
    ΔⲆ: 843,
    Δⵠⵠⵠ: 1,
    ᐃⲆⲆⵠ: 1
  };
  sh[61] = {
    name: "Crab Crown",
    ΔⲆ: 912,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[204] = {
    name: "Carrot Seed",
    ΔⲆ: 950,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[206] = {
    name: "Tomato Seed",
    ΔⲆ: 960,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[208] = {
    name: "Watermelon Seed",
    ΔⲆ: 967,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const _s = 3;
  sh[210] = {
    name: "Aloe Vera Seed",
    ΔⲆ: 982,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const bt = 100;
  sh[80] = {
    name: "Cap",
    ΔⲆ: 1138,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[81] = {
    name: "Turban",
    ΔⲆ: 1141,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[82] = {
    name: "Pilot Helmet",
    ΔⲆ: 427,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const ct = qg;
  sh[152] = {
    name: "Emerald Machine",
    ΔⲆ: 1196,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const dt = 10;
  sh[153] = {
    name: "Emerald Machine",
    ΔⲆ: 1200,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[154] = {
    name: "Emerald Machine",
    ΔⲆ: 1204,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const et = 1;
  const ft = 16;
  const gt = 7;
  const ht = 6;
  sh[155] = {
    name: "Emerald Machine",
    ΔⲆ: 1208,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[156] = {
    name: "Emerald Machine",
    ΔⲆ: 1212,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[157] = {
    name: "Emerald Machine",
    ΔⲆ: 1216,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[53] = {
    name: "Pitchfork",
    ΔⲆ: 977,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const it = 11;
  sh[212] = {
    name: "Wood Door Spike",
    ΔⲆ: 990,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const jt = 2;
  const kt = 17;
  sh[213] = {
    name: "Stone Door Spike",
    ΔⲆ: 993,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const lt = 255;
  sh[214] = {
    name: "Gold Door Spike",
    ΔⲆ: 996,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[215] = {
    name: "Diamond Door Spike",
    ΔⲆ: 999,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[216] = {
    name: "Amethyst Door Spike",
    ΔⲆ: 1002,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const mt = 8;
  sh[20] = {
    name: "Diamond Fire Protection ",
    ΔⲆ: 922,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const pt = 14;
  const qt = 1;
  sh[21] = {
    name: "Amethyst Fire Protection ",
    ΔⲆ: 926,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[22] = {
    name: "Amethyst Fire Protection ",
    ΔⲆ: 930,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[19] = {
    name: "Reidite Sword",
    ΔⲆ: 933,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const tt = 16;
  sh[34] = {
    name: "Reidite Spear",
    ΔⲆ: 944,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[44] = {
    name: "Reidite Helmet",
    ΔⲆ: 947,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  const ut = 2;
  const vt = 9;
  const wt = 15;
  const xt = 6;
  const yt = 17;
  sh[220] = {
    name: "Reidite Door Spike",
    ΔⲆ: 1005,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[218] = {
    name: "Reidite Door",
    ΔⲆ: 1008,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[219] = {
    name: "Reidite Spike",
    ΔⲆ: 1011,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  function zt(a) {
    return e.String.fromCharCode(a);
  }
  sh[217] = {
    name: "Reidite Wall",
    ΔⲆ: 1014,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[32] = {
    name: "Reidite pick",
    ΔⲆ: 1019,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[223] = {
    name: "Boat",
    ΔⲆ: 1027,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[224] = {
    name: "Sled",
    ΔⲆ: 1030,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[89] = {
    name: "Saddle",
    ΔⲆ: 1048,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 1
  };
  sh[225] = {
    name: "Mount Boar",
    ΔⲆ: 1051,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const At = 0;
  sh[226] = {
    name: "Mount King Crab",
    ΔⲆ: 1191,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const Bt = 10;
  const Ct = 15;
  const Dt = 12;
  sh[227] = {
    name: "Mount Baby Dragon",
    ΔⲆ: 1082,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[228] = {
    name: "Mount Baby Lava",
    ΔⲆ: 1097,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[229] = {
    name: "Mount Hawk",
    ΔⲆ: 1112,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  const eb = 15;
  sh[230] = {
    name: "Plane",
    ΔⲆ: 1116,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[54] = {
    name: "Pitchfork 2",
    ΔⲆ: 980,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  sh[239] = {
    name: "Baby Mammoth",
    ΔⲆ: 1226,
    Δⵠⵠⵠ: 0,
    ᐃⲆⲆⵠ: 0
  };
  var ib = undefined;
  const Et = 19;
  var nb = [{
    r: [[109, 25], [108, 5]],
    w: 0,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 0,
    ᐃⲆⲆⲆ: 113,
    time: 1 / 5,
    ⵠΔΔ: 4
  }, {
    r: [[113, 1], [109, 35], [108, 10]],
    w: 0,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 1,
    ᐃⲆⲆⲆ: 118,
    time: 0.2,
    ⵠΔΔ: 4
  }, {
    r: [[109, 150], [108, 50], [111, 15]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 2,
    ᐃⲆⲆⲆ: 119,
    time: 1 / 20,
    ⵠΔΔ: 4
  }, {
    r: [[109, 20], [108, 10]],
    w: 0,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 3,
    ᐃⲆⲆⲆ: 114,
    time: 0.16666666666666666,
    ⵠΔΔ: 4
  }, {
    r: [[109, 10]],
    w: 0,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 4,
    ᐃⲆⲆⲆ: 8,
    time: 1 / 3,
    ⵠΔΔ: 0
  }, {
    r: [[8, 1], [109, 50], [108, 15]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 5,
    ᐃⲆⲆⲆ: 1,
    time: 1 / 8,
    ⵠΔΔ: 0
  }, {
    r: [[109, 40], [111, 20], [108, 30], [1, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 6,
    ᐃⲆⲆⲆ: 3,
    time: 1 / 12,
    ⵠΔΔ: 0
  }, {
    r: [[112, 20], [111, 50], [108, 80], [3, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 7,
    ᐃⲆⲆⲆ: 4,
    time: 1 / 20,
    ⵠΔΔ: 0
  }, {
    r: [[112, 40], [111, 60], [121, 30], [4, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 8,
    ᐃⲆⲆⲆ: 31,
    time: 1 / 60,
    ⵠΔΔ: 0
  }, {
    r: [[121, 30], [112, 40], [202, 30], [31, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 9,
    ᐃⲆⲆⲆ: 32,
    time: 1 / 90,
    ⵠΔΔ: 0
  }, {
    r: [[109, 90], [108, 50]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 10,
    ᐃⲆⲆⲆ: 35,
    time: 1 / 10,
    ⵠΔΔ: 0
  }, {
    r: [[109, 160], [108, 120], [111, 80], [35, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 11,
    ᐃⲆⲆⲆ: 36,
    time: 1 / 15,
    ⵠΔΔ: 0
  }, {
    r: [[112, 80], [108, 200], [111, 150], [36, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 12,
    ᐃⲆⲆⲆ: 37,
    time: 1 / 20,
    ⵠΔΔ: 0
  }, {
    r: [[112, 160], [121, 60], [111, 250], [37, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 13,
    ᐃⲆⲆⲆ: 38,
    time: 0.016666666666666666,
    ⵠΔΔ: 0
  }, {
    r: [[121, 160], [202, 60], [112, 250], [38, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 14,
    ᐃⲆⲆⲆ: 39,
    time: 0.011111111111111112,
    ⵠΔΔ: 0
  }, {
    r: [[39, 1], [127, 1], [129, 1], [139, 10], [121, 20]],
    w: 1,
    f: 1,
    ΔᐃⲆ: 0,
    e: 0,
    id: 15,
    ᐃⲆⲆⲆ: 45,
    time: 1 / 120,
    ⵠΔΔ: 0
  }, {
    r: [[109, 30], [108, 15]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 16,
    ᐃⲆⲆⲆ: 46,
    time: 1 / 5,
    ⵠΔΔ: 0
  }, {
    r: [[46, 1], [111, 20], [108, 30], [109, 40]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 17,
    ᐃⲆⲆⲆ: 50,
    time: 1 / 10,
    ⵠΔΔ: 0
  }, {
    r: [[50, 1], [112, 20], [111, 50], [108, 80]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 18,
    ᐃⲆⲆⲆ: 51,
    time: 1 / 20,
    ⵠΔΔ: 0
  }, {
    r: [[51, 1], [111, 60], [121, 30], [112, 40]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 19,
    ᐃⲆⲆⲆ: 52,
    time: 1 / 40,
    ⵠΔΔ: 0
  }, {
    r: [[109, 50]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 20,
    ᐃⲆⲆⲆ: 130,
    time: 1 / 5,
    ⵠΔΔ: 0
  }, {
    r: [[130, 1]],
    w: 0,
    f: 0,
    ΔᐃⲆ: 1,
    e: 0,
    id: 21,
    ᐃⲆⲆⲆ: 49,
    time: 1 / 5,
    ⵠΔΔ: 0
  }, {
    r: [[109, 100], [108, 50]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 22,
    ᐃⲆⲆⲆ: 53,
    time: 1 / 10,
    ⵠΔΔ: 0
  }, {
    r: [[53, 1], [235, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 23,
    ᐃⲆⲆⲆ: 54,
    time: 0.016666666666666666,
    ⵠΔΔ: 0
  }, {
    r: [[120, 4], [161, 4], [174, 4]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 24,
    ᐃⲆⲆⲆ: 28,
    time: 1 / 15,
    ⵠΔΔ: 0
  }, {
    r: [[109, 40]],
    w: 0,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 25,
    ᐃⲆⲆⲆ: 12,
    time: 1 / 5,
    ⵠΔΔ: 1
  }, {
    r: [[12, 1], [109, 60], [108, 10]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 26,
    ᐃⲆⲆⲆ: 13,
    time: 1 / 10,
    ⵠΔΔ: 1
  }, {
    r: [[109, 80], [111, 30], [108, 30], [13, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 27,
    ᐃⲆⲆⲆ: 14,
    ⵠΔΔ: 1,
    time: 1 / 20
  }, {
    r: [[109, 200], [112, 40], [111, 60], [14, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 28,
    ᐃⲆⲆⲆ: 15,
    time: 0.03333333333333333,
    ⵠΔΔ: 1
  }, {
    r: [[121, 40], [112, 80], [111, 90], [15, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 29,
    ᐃⲆⲆⲆ: 33,
    time: 1 / 60,
    ⵠΔΔ: 1
  }, {
    r: [[202, 40], [121, 80], [112, 90], [33, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 30,
    ᐃⲆⲆⲆ: 34,
    time: 1 / 90,
    ⵠΔΔ: 1
  }, {
    r: [[147, 20], [185, 1], [121, 100], [149, 3]],
    w: 1,
    f: 1,
    ΔᐃⲆ: 1,
    e: 0,
    id: 31,
    ᐃⲆⲆⲆ: 16,
    time: 0.008333333333333333,
    ⵠΔΔ: 1
  }, {
    r: [[16, 1], [187, 1], [202, 100], [150, 2]],
    w: 1,
    f: 1,
    ΔᐃⲆ: 1,
    e: 0,
    id: 32,
    ᐃⲆⲆⲆ: 17,
    time: 1 / 200,
    ⵠΔΔ: 1
  }, {
    r: [[12, 1], [197, 5], [161, 6]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 33,
    ᐃⲆⲆⲆ: 18,
    time: 1 / 30,
    ⵠΔΔ: 1
  }, {
    r: [[109, 30]],
    w: 0,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 34,
    ᐃⲆⲆⲆ: 57,
    time: 1 / 5,
    ⵠΔΔ: 1
  }, {
    r: [[109, 50], [108, 25], [57, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 35,
    ᐃⲆⲆⲆ: 0,
    time: 1 / 10,
    ⵠΔΔ: 1
  }, {
    r: [[109, 60], [111, 40], [108, 50], [0, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 36,
    ᐃⲆⲆⲆ: 5,
    time: 1 / 20,
    ⵠΔΔ: 1
  }, {
    r: [[112, 40], [111, 60], [108, 80], [5, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 37,
    ᐃⲆⲆⲆ: 6,
    time: 1 / 30,
    ⵠΔΔ: 1
  }, {
    r: [[112, 60], [111, 100], [121, 40], [6, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 38,
    ᐃⲆⲆⲆ: 30,
    time: 1 / 60,
    ⵠΔΔ: 1
  }, {
    r: [[112, 100], [121, 80], [202, 40], [30, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 39,
    ᐃⲆⲆⲆ: 19,
    time: 0.011111111111111112,
    ⵠΔΔ: 1
  }, {
    r: [[110, 3]],
    w: 0,
    f: 1,
    ΔᐃⲆ: 0,
    e: 0,
    id: 40,
    ᐃⲆⲆⲆ: 115,
    time: 1 / 5,
    ⵠΔΔ: 3
  }, {
    r: [[134, 3]],
    w: 0,
    f: 1,
    ΔᐃⲆ: 0,
    e: 0,
    id: 41,
    ᐃⲆⲆⲆ: 132,
    time: 0.2,
    ⵠΔΔ: 3
  }, {
    r: [[189, 8]],
    w: 0,
    f: 1,
    ΔᐃⲆ: 0,
    e: 0,
    id: 42,
    ᐃⲆⲆⲆ: 188,
    time: 1 / 5,
    ⵠΔΔ: 3
  }, {
    r: [[192, 8]],
    w: 0,
    f: 1,
    ΔᐃⲆ: 0,
    e: 0,
    id: 43,
    ᐃⲆⲆⲆ: 191,
    time: 1 / 5,
    ⵠΔΔ: 3
  }, {
    r: [[194, 8]],
    w: 0,
    f: 1,
    ΔᐃⲆ: 0,
    e: 0,
    id: 44,
    ᐃⲆⲆⲆ: 193,
    time: 1 / 5,
    ⵠΔΔ: 3
  }, {
    r: [[205, 8]],
    w: 0,
    f: 1,
    ΔᐃⲆ: 0,
    e: 0,
    id: 45,
    ᐃⲆⲆⲆ: 204,
    time: 1 / 5,
    ⵠΔΔ: 3
  }, {
    r: [[207, 8]],
    w: 0,
    f: 1,
    ΔᐃⲆ: 0,
    e: 0,
    id: 46,
    ᐃⲆⲆⲆ: 206,
    time: 1 / 5,
    ⵠΔΔ: 3
  }, {
    r: [[209, 16]],
    w: 0,
    f: 1,
    ΔᐃⲆ: 0,
    e: 0,
    id: 47,
    ᐃⲆⲆⲆ: 208,
    time: 0.2,
    ⵠΔΔ: 3
  }, {
    r: [[211, 16]],
    w: 0,
    f: 1,
    ΔᐃⲆ: 0,
    e: 0,
    id: 48,
    ᐃⲆⲆⲆ: 210,
    time: 1 / 5,
    ⵠΔΔ: 3
  }, {
    r: [[116, 1]],
    w: 0,
    f: 1,
    ΔᐃⲆ: 0,
    e: 0,
    id: 49,
    ᐃⲆⲆⲆ: 117,
    time: 1 / 5,
    ⵠΔΔ: 3
  }, {
    r: [[137, 1]],
    w: 0,
    f: 1,
    ΔᐃⲆ: 0,
    e: 0,
    id: 50,
    ᐃⲆⲆⲆ: 138,
    time: 1 / 3,
    ⵠΔΔ: 3
  }, {
    r: [[131, 3]],
    w: 0,
    f: 1,
    ΔᐃⲆ: 0,
    e: 0,
    id: 51,
    ᐃⲆⲆⲆ: 143,
    time: 0.3333333333333333,
    ⵠΔΔ: 3
  }, {
    r: [[131, 3], [110, 1]],
    w: 0,
    f: 1,
    ΔᐃⲆ: 0,
    e: 0,
    id: 52,
    ᐃⲆⲆⲆ: 133,
    time: 1 / 3,
    ⵠΔΔ: 3
  }, {
    r: [[131, 5], [110, 2], [142, 2]],
    w: 0,
    f: 1,
    ΔᐃⲆ: 0,
    e: 0,
    id: 53,
    ᐃⲆⲆⲆ: 136,
    time: 1 / 5,
    ⵠΔΔ: 3
  }, {
    r: [[161, 2]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 54,
    ᐃⲆⲆⲆ: 195,
    time: 1 / 5,
    ⵠΔΔ: 4
  }, {
    r: [[109, 20]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 55,
    ᐃⲆⲆⲆ: 162,
    time: 1 / 5,
    ⵠΔΔ: 5
  }, {
    r: [[162, 1], [108, 17]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 56,
    ᐃⲆⲆⲆ: 163,
    time: 1 / 5,
    ⵠΔΔ: 5
  }, {
    r: [[163, 1], [111, 14]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 57,
    ᐃⲆⲆⲆ: 164,
    time: 1 / 5,
    ⵠΔΔ: 5
  }, {
    r: [[164, 1], [112, 11]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 58,
    ᐃⲆⲆⲆ: 165,
    time: 1 / 5,
    ⵠΔΔ: 5
  }, {
    r: [[165, 1], [121, 8]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 59,
    ᐃⲆⲆⲆ: 122,
    time: 0.2,
    ⵠΔΔ: 5
  }, {
    r: [[122, 1], [202, 5]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 60,
    ᐃⲆⲆⲆ: 217,
    time: 1 / 5,
    ⵠΔΔ: 5
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 61,
    ᐃⲆⲆⲆ: 166,
    time: 1 / 8,
    ⵠΔΔ: 5
  }, {
    r: [[166, 1], [108, 27]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 62,
    ᐃⲆⲆⲆ: 171,
    time: 1 / 8,
    ⵠΔΔ: 5
  }, {
    r: [[171, 1], [111, 24]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 63,
    ᐃⲆⲆⲆ: 172,
    time: 1 / 8,
    ⵠΔΔ: 5
  }, {
    r: [[172, 1], [112, 21]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 64,
    ᐃⲆⲆⲆ: 173,
    time: 1 / 8,
    ⵠΔΔ: 5
  }, {
    r: [[173, 1], [121, 18]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 65,
    ᐃⲆⲆⲆ: 124,
    time: 1 / 8,
    ⵠΔΔ: 5
  }, {
    r: [[124, 1], [202, 15]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 66,
    ᐃⲆⲆⲆ: 218,
    time: 0.125,
    ⵠΔΔ: 5
  }, {
    r: [[162, 1], [109, 40], [108, 30]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 67,
    ᐃⲆⲆⲆ: 160,
    time: 0.05,
    ⵠΔΔ: 5
  }, {
    r: [[163, 1], [108, 70]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 68,
    ᐃⲆⲆⲆ: 168,
    time: 1 / 20,
    ⵠΔΔ: 5
  }, {
    r: [[164, 1], [111, 40], [108, 30]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 69,
    ᐃⲆⲆⲆ: 169,
    time: 1 / 20,
    ⵠΔΔ: 5
  }, {
    r: [[165, 1], [112, 40], [108, 30]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 70,
    ᐃⲆⲆⲆ: 170,
    time: 1 / 20,
    ⵠΔΔ: 5
  }, {
    r: [[122, 1], [121, 40], [108, 30]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 71,
    ᐃⲆⲆⲆ: 123,
    time: 0.05,
    ⵠΔΔ: 5
  }, {
    r: [[217, 1], [202, 40], [111, 30]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 72,
    ᐃⲆⲆⲆ: 219,
    time: 0.05,
    ⵠΔΔ: 5
  }, {
    r: [[166, 1], [109, 80], [108, 60]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 73,
    ᐃⲆⲆⲆ: 212,
    time: 0.05,
    ⵠΔΔ: 5
  }, {
    r: [[171, 1], [108, 140]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 74,
    ᐃⲆⲆⲆ: 213,
    time: 1 / 20,
    ⵠΔΔ: 5
  }, {
    r: [[172, 1], [111, 80], [108, 60]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 75,
    ᐃⲆⲆⲆ: 214,
    time: 1 / 20,
    ⵠΔΔ: 5
  }, {
    r: [[173, 1], [112, 80], [108, 60]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 76,
    ᐃⲆⲆⲆ: 215,
    time: 1 / 20,
    ⵠΔΔ: 5
  }, {
    r: [[124, 1], [121, 80], [108, 60]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 77,
    ᐃⲆⲆⲆ: 216,
    time: 1 / 20,
    ⵠΔΔ: 5
  }, {
    r: [[218, 1], [202, 80], [111, 60]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 78,
    ᐃⲆⲆⲆ: 220,
    time: 0.05,
    ⵠΔΔ: 5
  }, {
    r: [[109, 25], [111, 2]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 79,
    ᐃⲆⲆⲆ: 167,
    time: 1 / 5,
    ⵠΔΔ: 4
  }, {
    r: [[120, 1], [2, 1], [161, 2]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 80,
    ᐃⲆⲆⲆ: 23,
    time: 0.2,
    ⵠΔΔ: 2
  }, {
    r: [[120, 5], [222, 20], [147, 5], [2, 5]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 81,
    ᐃⲆⲆⲆ: 24,
    time: 0.03333333333333333,
    ⵠΔΔ: 2
  }, {
    r: [[236, 1], [231, 8], [232, 8], [222, 8], [161, 6]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 82,
    ᐃⲆⲆⲆ: 82,
    time: 1 / 60,
    ⵠΔΔ: 2
  }, {
    r: [[2, 1], [161, 2]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 83,
    ᐃⲆⲆⲆ: 10,
    time: 1 / 5,
    ⵠΔΔ: 2
  }, {
    r: [[10, 1], [174, 5], [161, 4]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 84,
    ᐃⲆⲆⲆ: 11,
    time: 0.08333333333333333,
    ⵠΔΔ: 2
  }, {
    r: [[11, 1], [146, 5], [147, 4]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 85,
    ᐃⲆⲆⲆ: 40,
    time: 0.03333333333333333,
    ⵠΔΔ: 2
  }, {
    r: [[40, 1], [146, 5], [240, 10], [147, 4]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 86,
    ᐃⲆⲆⲆ: 88,
    time: 1 / 50,
    ⵠΔΔ: 2
  }, {
    r: [[109, 50]],
    w: 0,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 87,
    ᐃⲆⲆⲆ: 58,
    time: 1 / 5,
    ⵠΔΔ: 2
  }, {
    r: [[108, 75], [109, 75], [58, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 88,
    ᐃⲆⲆⲆ: 25,
    time: 1 / 10,
    ⵠΔΔ: 2
  }, {
    r: [[108, 90], [109, 90], [111, 90], [25, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 89,
    ᐃⲆⲆⲆ: 26,
    time: 0.05,
    ⵠΔΔ: 2
  }, {
    r: [[108, 100], [111, 100], [112, 100], [26, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 90,
    ᐃⲆⲆⲆ: 27,
    time: 0.03333333333333333,
    ⵠΔΔ: 2
  }, {
    r: [[121, 80], [111, 150], [112, 120], [27, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 91,
    ᐃⲆⲆⲆ: 43,
    time: 0.016666666666666666,
    ⵠΔΔ: 2
  }, {
    r: [[202, 80], [112, 150], [121, 120], [43, 1]],
    w: 1,
    f: 1,
    ΔᐃⲆ: 0,
    e: 0,
    id: 92,
    ᐃⲆⲆⲆ: 44,
    time: 1 / 90,
    ⵠΔΔ: 2
  }, {
    r: [[139, 2], [112, 40], [161, 4]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 93,
    ᐃⲆⲆⲆ: 48,
    time: 1 / 20,
    ⵠΔΔ: 2
  }, {
    r: [[48, 1], [111, 80], [129, 1], [121, 20]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 94,
    ᐃⲆⲆⲆ: 47,
    time: 1 / 90,
    ⵠΔΔ: 2
  }, {
    r: [[203, 5], [112, 50], [147, 5]],
    w: 1,
    f: 1,
    ΔᐃⲆ: 0,
    e: 0,
    id: 95,
    ᐃⲆⲆⲆ: 20,
    time: 0.05,
    ⵠΔΔ: 2
  }, {
    r: [[20, 1], [203, 10], [121, 50]],
    w: 1,
    f: 1,
    ΔᐃⲆ: 0,
    e: 0,
    id: 96,
    ᐃⲆⲆⲆ: 21,
    time: 0.016666666666666666,
    ⵠΔΔ: 2
  }, {
    r: [[21, 1], [203, 15], [121, 50], [202, 50]],
    w: 1,
    f: 1,
    ΔᐃⲆ: 0,
    e: 0,
    id: 97,
    ᐃⲆⲆⲆ: 22,
    time: 0.011111111111111112,
    ⵠΔΔ: 2
  }, {
    r: [[161, 4], [237, 2]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 98,
    ᐃⲆⲆⲆ: 80,
    time: 1 / 15,
    ⵠΔΔ: 2
  }, {
    r: [[80, 1], [161, 6], [237, 4], [232, 12], [222, 4]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 99,
    ᐃⲆⲆⲆ: 81,
    time: 1 / 150,
    ⵠΔΔ: 2
  }, {
    r: [[161, 6], [174, 5]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 100,
    ᐃⲆⲆⲆ: 29,
    time: 1 / 15,
    ⵠΔΔ: 2
  }, {
    r: [[109, 20]],
    w: 0,
    f: 1,
    ΔᐃⲆ: 0,
    e: 0,
    id: 101,
    ᐃⲆⲆⲆ: 120,
    time: 1 / 3,
    ⵠΔΔ: 4
  }, {
    r: [[112, 1], [161, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 102,
    ᐃⲆⲆⲆ: 147,
    time: 1 / 3,
    ⵠΔΔ: 4
  }, {
    r: [[111, 10]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 103,
    ᐃⲆⲆⲆ: 148,
    time: 1 / 5,
    ⵠΔΔ: 4
  }, {
    r: [[111, 250]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 104,
    ᐃⲆⲆⲆ: 158,
    time: 0.016666666666666666,
    ⵠΔΔ: 4
  }, {
    r: [[109, 50]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 105,
    ᐃⲆⲆⲆ: 159,
    time: 0.1,
    ⵠΔΔ: 4
  }, {
    r: [[109, 15]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 106,
    ᐃⲆⲆⲆ: 125,
    time: 0.2,
    ⵠΔΔ: 4
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 107,
    ᐃⲆⲆⲆ: 190,
    time: 1 / 5,
    ⵠΔΔ: 4
  }, {
    r: [[109, 120]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 108,
    ᐃⲆⲆⲆ: 221,
    time: 0.06666666666666667,
    ⵠΔΔ: 4
  }, {
    r: [[109, 20], [140, 15]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 109,
    ᐃⲆⲆⲆ: 141,
    time: 1 / 5,
    ⵠΔΔ: 4
  }, {
    r: [[126, 25]],
    w: 1,
    f: 1,
    ΔᐃⲆ: 0,
    e: 0,
    id: 110,
    ᐃⲆⲆⲆ: 128,
    time: 1 / 5,
    ⵠΔΔ: 3
  }, {
    r: [[128, 1]],
    w: 0,
    f: 0,
    ΔᐃⲆ: 1,
    e: 0,
    id: 111,
    ᐃⲆⲆⲆ: 127,
    time: 1 / 5,
    ⵠΔΔ: 3
  }, {
    r: [[142, 20], [128, 1]],
    w: 0,
    f: 1,
    ΔᐃⲆ: 0,
    e: 0,
    id: 112,
    ᐃⲆⲆⲆ: 127,
    time: 1 / 10,
    ⵠΔΔ: 3
  }, {
    r: [[128, 1]],
    w: 0,
    f: 0,
    ΔᐃⲆ: 0,
    e: 1,
    id: 113,
    ᐃⲆⲆⲆ: 127,
    time: 1 / 3,
    ⵠΔΔ: 3
  }, {
    r: [[109, 60], [108, 20], [161, 2]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 114,
    ᐃⲆⲆⲆ: 135,
    time: 1 / 10,
    ⵠΔΔ: 4
  }, {
    r: [[112, 40], [108, 45]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 115,
    ᐃⲆⲆⲆ: 151,
    time: 1 / 20,
    ⵠΔΔ: 4
  }, {
    r: [[151, 1], [234, 40], [238, 1]],
    w: 1,
    f: 1,
    ΔᐃⲆ: 1,
    e: 0,
    id: 116,
    ᐃⲆⲆⲆ: 152,
    time: 1 / 200,
    ⵠΔΔ: 4
  }, {
    r: [[109, 50], [108, 100]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 117,
    ᐃⲆⲆⲆ: 153,
    time: 0.011111111111111112,
    ⵠΔΔ: 4
  }, {
    r: [[108, 60], [111, 120]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 118,
    ᐃⲆⲆⲆ: 154,
    time: 0.011111111111111112,
    ⵠΔΔ: 4
  }, {
    r: [[111, 70], [112, 140]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 119,
    ᐃⲆⲆⲆ: 155,
    time: 1 / 90,
    ⵠΔΔ: 4
  }, {
    r: [[112, 80], [121, 160]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 120,
    ᐃⲆⲆⲆ: 156,
    time: 0.011111111111111112,
    ⵠΔΔ: 4
  }, {
    r: [[121, 90], [202, 180]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 121,
    ᐃⲆⲆⲆ: 157,
    time: 1 / 90,
    ⵠΔΔ: 4
  }, {
    r: [[108, 70]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 122,
    ᐃⲆⲆⲆ: 55,
    time: 1 / 10,
    ⵠΔΔ: 0
  }, {
    r: [[108, 70], [109, 50]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 123,
    ᐃⲆⲆⲆ: 56,
    time: 1 / 10,
    ⵠΔΔ: 0
  }, {
    r: [[109, 40], [108, 40]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 124,
    ᐃⲆⲆⲆ: 144,
    time: 0.1,
    ⵠΔΔ: 4
  }, {
    r: [[143, 1], [117, 1]],
    w: 0,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 125,
    ᐃⲆⲆⲆ: 145,
    time: 1 / 3,
    ⵠΔΔ: 3
  }, {
    r: [[147, 30], [184, 1], [121, 150], [149, 3]],
    w: 1,
    f: 1,
    ΔᐃⲆ: 1,
    e: 0,
    id: 126,
    ᐃⲆⲆⲆ: 59,
    time: 0.008333333333333333,
    ⵠΔΔ: 2
  }, {
    r: [[59, 1], [186, 1], [202, 150], [150, 2]],
    w: 1,
    f: 1,
    ΔᐃⲆ: 1,
    e: 0,
    id: 127,
    ᐃⲆⲆⲆ: 60,
    time: 0.005555555555555556,
    ⵠΔΔ: 2
  }, {
    r: [[26, 1], [197, 10], [196, 10], [161, 10]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 128,
    ᐃⲆⲆⲆ: 61,
    time: 0.016666666666666666,
    ⵠΔΔ: 2
  }, {
    r: [[147, 20], [185, 1], [121, 150], [149, 3]],
    w: 1,
    f: 1,
    ΔᐃⲆ: 1,
    e: 0,
    id: 129,
    ᐃⲆⲆⲆ: 62,
    time: 1 / 120,
    ⵠΔΔ: 1
  }, {
    r: [[62, 1], [187, 1], [202, 150], [150, 2]],
    w: 1,
    f: 1,
    ΔᐃⲆ: 1,
    e: 0,
    id: 130,
    ᐃⲆⲆⲆ: 63,
    time: 1 / 180,
    ⵠΔΔ: 1
  }, {
    r: [[109, 100], [161, 4]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 131,
    ᐃⲆⲆⲆ: 64,
    time: 1 / 20,
    ⵠΔΔ: 1
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 132,
    ᐃⲆⲆⲆ: 101,
    time: 1 / 5,
    ⵠΔΔ: 1
  }, {
    r: [[108, 200], [161, 8], [222, 4], [64, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 133,
    ᐃⲆⲆⲆ: 65,
    time: 0.04,
    ⵠΔΔ: 1
  }, {
    r: [[108, 20], [231, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 134,
    ᐃⲆⲆⲆ: 102,
    time: 1 / 5,
    ⵠΔΔ: 1
  }, {
    r: [[111, 200], [161, 12], [231, 4], [222, 4], [65, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 135,
    ᐃⲆⲆⲆ: 66,
    time: 1 / 30,
    ⵠΔΔ: 1
  }, {
    r: [[111, 20], [222, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 136,
    ᐃⲆⲆⲆ: 103,
    time: 1 / 10,
    ⵠΔΔ: 1
  }, {
    r: [[112, 200], [147, 10], [231, 8], [222, 8], [66, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 137,
    ᐃⲆⲆⲆ: 67,
    time: 1 / 35,
    ⵠΔΔ: 1
  }, {
    r: [[112, 10], [222, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 138,
    ᐃⲆⲆⲆ: 104,
    time: 0.1,
    ⵠΔΔ: 1
  }, {
    r: [[121, 200], [147, 10], [222, 8], [232, 8], [67, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 139,
    ᐃⲆⲆⲆ: 68,
    time: 0.025,
    ⵠΔΔ: 1
  }, {
    r: [[121, 10], [232, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 140,
    ᐃⲆⲆⲆ: 105,
    time: 1 / 15,
    ⵠΔΔ: 1
  }, {
    r: [[202, 200], [147, 10], [129, 1], [68, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 141,
    ᐃⲆⲆⲆ: 69,
    time: 1 / 45,
    ⵠΔΔ: 1
  }, {
    r: [[202, 10], [232, 1], [203, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 142,
    ᐃⲆⲆⲆ: 106,
    time: 1 / 15,
    ⵠΔΔ: 1
  }, {
    r: [[234, 200], [147, 10], [185, 1], [69, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 143,
    ᐃⲆⲆⲆ: 70,
    time: 0.02,
    ⵠΔΔ: 1
  }, {
    r: [[234, 10], [238, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 144,
    ᐃⲆⲆⲆ: 107,
    time: 1 / 20,
    ⵠΔΔ: 1
  }, {
    r: [[109, 100]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 145,
    ᐃⲆⲆⲆ: 71,
    time: 1 / 25,
    ⵠΔΔ: 1
  }, {
    r: [[71, 1], [108, 100], [109, 50]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 146,
    ᐃⲆⲆⲆ: 72,
    time: 0.025,
    ⵠΔΔ: 1
  }, {
    r: [[72, 1], [111, 50], [108, 50], [109, 50]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 147,
    ᐃⲆⲆⲆ: 73,
    time: 1 / 50,
    ⵠΔΔ: 1
  }, {
    r: [[73, 1], [112, 50], [111, 50], [108, 50]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 148,
    ᐃⲆⲆⲆ: 74,
    time: 0.014285714285714285,
    ⵠΔΔ: 1
  }, {
    r: [[74, 1], [121, 50], [112, 50], [111, 50]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 149,
    ᐃⲆⲆⲆ: 75,
    time: 1 / 90,
    ⵠΔΔ: 1
  }, {
    r: [[75, 1], [202, 50], [121, 50], [112, 50]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 150,
    ᐃⲆⲆⲆ: 76,
    time: 0.008333333333333333,
    ⵠΔΔ: 1
  }, {
    r: [[175, 1], [111, 200]],
    w: 1,
    f: 1,
    ΔᐃⲆ: 1,
    e: 0,
    id: 151,
    ᐃⲆⲆⲆ: 77,
    time: 1 / 60,
    ⵠΔΔ: 2
  }, {
    r: [[176, 1], [111, 200]],
    w: 1,
    f: 1,
    ΔᐃⲆ: 1,
    e: 0,
    id: 152,
    ᐃⲆⲆⲆ: 78,
    time: 1 / 60,
    ⵠΔΔ: 2
  }, {
    r: [[177, 1], [111, 200], [149, 1]],
    w: 1,
    f: 1,
    ΔᐃⲆ: 1,
    e: 0,
    id: 153,
    ᐃⲆⲆⲆ: 79,
    time: 1 / 60,
    ⵠΔΔ: 2
  }, {
    r: [[174, 10], [2, 5], [161, 6]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 154,
    ᐃⲆⲆⲆ: 83,
    time: 1 / 10,
    ⵠΔΔ: 2
  }, {
    r: [[2, 3], [161, 2]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 155,
    ᐃⲆⲆⲆ: 84,
    time: 1 / 10,
    ⵠΔΔ: 2
  }, {
    r: [[83, 1], [179, 1], [146, 15], [147, 5], [222, 8]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 156,
    ᐃⲆⲆⲆ: 85,
    time: 1 / 60,
    ⵠΔΔ: 2
  }, {
    r: [[84, 1], [178, 1], [146, 10], [147, 5], [222, 8]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 157,
    ᐃⲆⲆⲆ: 86,
    time: 1 / 60,
    ⵠΔΔ: 2
  }, {
    r: [[181, 1]],
    w: 0,
    f: 0,
    ΔᐃⲆ: 1,
    e: 0,
    id: 158,
    ᐃⲆⲆⲆ: 180,
    time: 1 / 5,
    ⵠΔΔ: 0
  }, {
    r: [[109, 20], [161, 1]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 159,
    ᐃⲆⲆⲆ: 181,
    time: 1 / 5,
    ⵠΔΔ: 0
  }, {
    r: [[108, 100], [140, 30]],
    w: 1,
    f: 1,
    ΔᐃⲆ: 0,
    e: 0,
    id: 160,
    ᐃⲆⲆⲆ: 182,
    time: 1 / 10,
    ⵠΔΔ: 4
  }, {
    r: [[109, 20]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 161,
    ᐃⲆⲆⲆ: 183,
    time: 1 / 5,
    ⵠΔΔ: 4
  }, {
    r: [[109, 100], [108, 50], [2, 5], [174, 5], [161, 6]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 162,
    ᐃⲆⲆⲆ: 198,
    time: 1 / 20,
    ⵠΔΔ: 4
  }, {
    r: [[109, 250], [147, 10], [146, 2], [139, 2]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 163,
    ᐃⲆⲆⲆ: 223,
    time: 1 / 50,
    ⵠΔΔ: 4
  }, {
    r: [[109, 250], [161, 10], [146, 2], [222, 8]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 164,
    ᐃⲆⲆⲆ: 224,
    time: 1 / 50,
    ⵠΔΔ: 4
  }, {
    r: [[161, 10], [174, 6], [2, 4], [126, 50]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 165,
    ᐃⲆⲆⲆ: 89,
    time: 1 / 20,
    ⵠΔΔ: 4
  }, {
    r: [[109, 250], [161, 10], [120, 10], [231, 8]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 166,
    ᐃⲆⲆⲆ: 230,
    time: 1 / 50,
    ⵠΔΔ: 4
  }, {
    r: [[109, 40]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 167,
    ᐃⲆⲆⲆ: 94,
    time: 1 / 5,
    ⵠΔΔ: 1
  }, {
    r: [[94, 1], [108, 40], [109, 50]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 168,
    ᐃⲆⲆⲆ: 95,
    time: 0.1,
    ⵠΔΔ: 1
  }, {
    r: [[95, 1], [111, 40], [108, 50], [109, 60]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 169,
    ᐃⲆⲆⲆ: 96,
    time: 0.05,
    ⵠΔΔ: 1
  }, {
    r: [[96, 1], [112, 40], [111, 70], [108, 80]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 170,
    ᐃⲆⲆⲆ: 97,
    time: 0.03333333333333333,
    ⵠΔΔ: 1
  }, {
    r: [[97, 1], [121, 40], [112, 70], [111, 110]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 171,
    ᐃⲆⲆⲆ: 98,
    time: 0.016666666666666666,
    ⵠΔΔ: 1
  }, {
    r: [[98, 1], [202, 50], [121, 80], [112, 110]],
    w: 1,
    f: 0,
    ΔᐃⲆ: 0,
    e: 0,
    id: 172,
    ᐃⲆⲆⲆ: 99,
    time: 1 / 90,
    ⵠΔΔ: 1
  }];
  function Ft(a) {
    return e.String.fromCharCode(a);
  }
  const ab = 6;
  function rb(a, b, c, d) {
    Ij(Xw, a, b, c, d);
    const f = (0 << ((Ww[0] ^ Ww[1]) >> 24 & 255)) + (8 << ((Ww[0] ^ Ww[1]) >> 8 & 255)) + (16 << ((Ww[0] ^ Ww[1]) & 255)) + (24 << ((Ww[0] ^ Ww[1]) >> 16 & 255));
    return (58299 + ((8 << ((f ^ Ww[2]) >> 8 & 255)) + (0 << ((f ^ Ww[2]) >> 16 & 255)) + (24 << ((f ^ Ww[2]) & 255)) + (16 << ((f ^ Ww[2]) >> 24 & 255)) ^ Ww[3])) % 65339;
  }
  const sb = 8;
  ss = 300;
  const hb = 9;
  ᐃⲆⵠΔ = {
    ⲆⲆⵠⵠⵠⵠᐃ: 300,
    ᐃΔᐃΔⲆⲆΔ: 301,
    ᐃᐃⵠᐃᐃΔᐃ: 302,
    ΔᐃⵠⲆΔΔᐃ: 303,
    ⲆⲆᐃᐃⲆᐃᐃ: 304,
    ᐃⲆⲆᐃᐃΔⵠ: 305,
    ᐃᐃⲆⵠΔⵠΔ: 306,
    ⵠᐃᐃⵠⲆⵠⲆ: 307,
    ⲆᐃⲆⲆⲆⵠⵠ: 308,
    ⵠⵠⵠⵠⲆᐃⲆ: 309,
    ᐃⲆⵠⵠⵠⲆⲆ: 310,
    ⲆⵠⵠⵠⲆΔΔ: 311,
    EMPTY: 312,
    ⲆΔⵠᐃⵠⵠΔ: 313,
    ⲆᐃΔⲆⵠΔΔ: 314,
    ᐃΔⵠⵠΔⵠΔ: 315,
    ᐃᐃⲆΔΔᐃᐃ: 316,
    ΔΔᐃΔᐃᐃⲆ: 317,
    ⲆᐃΔⵠΔΔΔ: 318,
    ⵠᐃᐃⵠΔᐃΔ: 319,
    ⲆᐃⵠⵠⵠᐃΔ: 320,
    ⵠᐃⲆᐃⲆⵠⵠ: 321,
    ⲆΔⲆⵠΔ: 322,
    ᐃΔᐃⵠΔⵠⲆ: 323,
    ᐃΔⵠⲆΔ: 324,
    ⲆⲆᐃⵠΔⵠᐃ: 325,
    ᐃⵠᐃⵠⲆⲆⲆ: 326,
    ΔΔⵠⵠⲆᐃⲆ: 327,
    ᐃᐃΔⲆⵠΔᐃ: 328,
    ⵠΔⵠᐃⲆᐃⵠ: 329,
    ΔⵠⲆⲆΔΔⲆ: 330,
    ᐃⲆⵠΔΔⵠᐃ: 331,
    POINTS: 332,
    ΔⵠΔΔΔⲆᐃ: 333,
    ᐃᐃⵠΔᐃᐃᐃ: 334,
    ΔⲆⵠΔΔⲆⲆ: 335,
    ᐃΔΔⵠΔΔΔ: 336,
    ᐃⵠᐃΔΔᐃᐃ: 337,
    ΔⲆⵠⵠⲆⵠⲆ: 338,
    ᐃᐃΔᐃΔᐃᐃ: 339,
    ΔᐃΔⵠⲆⲆⵠ: 340,
    ⲆΔᐃΔΔᐃⵠ: 341,
    ⲆΔⲆΔⲆⲆⵠ: 342,
    ᐃⲆᐃⲆᐃⵠᐃ: 343
  };
  function lb() {
    Gb[99] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
    Gb[98] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
    Gb[97] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
    Gb[96] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
    Gb[95] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
    Gb[94] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
    Gb[153] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
    Gb[154] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
    Gb[155] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
    Gb[156] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
    Gb[157] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
    Gb[76] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
    Gb[75] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
    Gb[74] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
    Gb[73] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
    Gb[72] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
    Gb[71] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
    Gb[56] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
    Gb[221] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
    Gb[107] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
    Gb[70] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
    Gb[106] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
    Gb[69] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
    Gb[105] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
    Gb[68] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
    Gb[104] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
    Gb[67] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
    Gb[103] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
    Gb[66] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
    Gb[102] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
    Gb[65] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
    Gb[101] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
    Gb[64] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
    Gb[152] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
    Gb[237] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
    Gb[240] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
    Gb[232] = ["Vulture Feather", "From a deadly vulture"];
    Gb[234] = ["Emerald", "How many golden breads can you get from it?"];
    Gb[238] = ["Sand Worm Juice", "I don't want to know how you got this."];
    Gb[80] = ["Turban", "Useful to survive in the desert."];
    Gb[81] = ["Ninja outfit", "Essential to survive in the desert"];
    Gb[82] = ["Pilot Hat", "Take off and land with flying objects much faster."];
    Gb[236] = ["Pilot Glasses"];
    Gb[225] = ["Tamed Boar", "Fast on lands and slow on water."];
    Gb[239] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
    Gb[226] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
    Gb[227] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
    Gb[228] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
    Gb[229] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
    Gb[89] = ["Saddle", "Hit a boar with it to tame it."];
    Gb[90] = ["Witch Hat", "You're a wizard Starvy!"];
    Gb[91] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
    Gb[92] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
    Gb[93] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
    Gb[100] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
    Gb[24] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
    Gb[224] = ["Sled", "You are faster with it in the snow"];
    Gb[223] = ["Boat", "You are faster with it in the water"];
    Gb[230] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
    Gb[39] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"];
    Gb[222] = ["Penguin Feather", "From a deadly cute penguin."];
    Gb[231] = ["Hawk Feather", "From a deadly hawk."];
    Gb[233] = ["Cactus", "Food : 20", "Water : 10"];
    Gb[211] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
    Gb[210] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
    Gb[209] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
    Gb[208] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
    Gb[218] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
    Gb[217] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
    Gb[219] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
    Gb[220] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
    Gb[32] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
    Gb[212] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
    Gb[213] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
    Gb[214] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
    Gb[215] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
    Gb[216] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
    Gb[205] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
    Gb[207] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
    Gb[204] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    Gb[206] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    Gb[53] = ["Pitchfork", "Perfect for gathering"];
    Gb[54] = ["Golden Pitchfork", "Essential for a real farmer."];
    Gb[235] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
    Gb[nh.ΔΔⵠᐃᐃΔᐃ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
    Gb[nh.ΔΔᐃⵠᐃⲆΔ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
    Gb[nh.ⲆⲆΔᐃⲆΔΔ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
    Gb[nh.ⵠⵠⵠⲆᐃⵠⵠ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
    Gb[nh.ⵠΔΔⲆⲆⲆⲆ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
    Gb[186] = ["Lava Cube", "You feel an immense power emanating from this cube"];
    Gb[187] = ["Lava Orb", "You feel an immense power emanating from this orb"];
    Gb[63] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
    Gb[17] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
    Gb[150] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
    Gb[60] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
    Gb[34] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
    Gb[19] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
    Gb[203] = ["Flame", "It's hot!"];
    Gb[20] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
    Gb[21] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
    Gb[22] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
    Gb[202] = ["Reidite", "The ultimate ore"];
    Gb[184] = ["Dragon Cube", "You feel a great power emanating from this cube"];
    Nb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Nb[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
    Nb[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
    Nb[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
    Nb[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
    Nb[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
    Nb[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
    Nb[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
    Nb[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
    Nb[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
    Nb[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
    Nb[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
    Nb[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
    Nb[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
    Nb[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
    Nb[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
    Nb[38] = ["You died crushed by an angry baby mammoth."];
    Nb[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
    Nb[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
    Gb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Gb[341] = "A sandstorm is approaching in a few seconds.";
    Gb[340] = "The sandstorm will soon stop.";
    Gb[343] = "A blizzard is approaching in a few seconds.";
    Gb[342] = "The blizzard will soon stop.";
    Gb[328] = " BACK TO THE GAME";
    Gb[329] = " Share on Twitter";
    Gb[330] = " Share on Facebook";
    Gb[331] = "You can buy items on the shop in the next game with your points";
    Gb[332] = "points";
    Gb[333] = "Score";
    Gb[334] = "Kill";
    Gb[335] = "Days survived";
    Gb[336] = "Building method: Free. Press G to change";
    Gb[337] = "Building method: Grid. Press G to change";
    Gb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Gb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
    Gb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
    Gb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Gb[7] = ["Hand"];
    Gb[140] = ["Dirt", "Dirty!"];
    Gb[126] = ["Sand", "I got it in my eyes!"];
    Gb[109] = ["Wood", "You can't get enough of it!"];
    Gb[108] = ["Stone", "Also called a rock"];
    Gb[111] = ["Gold", "Be generous, give it to others"];
    Gb[112] = ["Diamond", "What will you make with it?"];
    Gb[121] = ["Amethyst", "It's Mauve like Lapa"];
    Gb[131] = ["Flour", "Used in cooking"];
    Gb[133] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
    Gb[136] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
    Gb[116] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
    Gb[117] = ["Cooked meat", "A rare steak, please", "Food: 35"];
    Gb[137] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
    Gb[138] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
    Gb[143] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
    Gb[145] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
    Gb[200] = ["Candies", "Only for children!", "Food: 20"];
    Gb[199] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
    Gb[201] = ["Garland", "Perfect decoration for roofs"];
    Gb[115] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
    Gb[110] = ["Berry", "Berry tasty!", "Food: 10"];
    Gb[132] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    Gb[134] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
    Gb[188] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    Gb[189] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
    Gb[191] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    Gb[192] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
    Gb[193] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
    Gb[194] = ["Thorn bush", "It stings!"];
    Gb[141] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
    Gb[142] = ["Ice", "Useful for making cakes and water"];
    Gb[55] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
    Gb[174] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
    Gb[2] = ["Rabbit Fur", "That rabbit was so cute..."];
    Gb[178] = ["Pure Fur", "You're a bread factory"];
    Gb[179] = ["Dark Fur", "You get ready to do something wrong"];
    Gb[146] = ["Winter Fur", "These animals just wanted a hug..."];
    Gb[139] = ["Scales", "It smells like fish!"];
    Gb[129] = ["Kraken Skin", "Weren't you too scared?"];
    Gb[113] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
    Gb[118] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
    Gb[114] = ["Workbench", "Very useful to craft all kinds of objects"];
    Gb[161] = ["Cord", "Used in crafting Hats and Bag"];
    Gb[147] = ["Diamond Cord", "Used in crafting Special Hats"];
    Gb[167] = ["Chest", "Allows you to store items", "Durability: 500"];
    Gb[57] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
    Gb[0] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
    Gb[5] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
    Gb[6] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
    Gb[9] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
    Gb[30] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
    Gb[62] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
    Gb[16] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
    Gb[8] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
    Gb[1] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
    Gb[3] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
    Gb[4] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
    Gb[31] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
    Gb[35] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
    Gb[36] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
    Gb[37] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
    Gb[38] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
    Gb[45] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"];
    Gb[12] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
    Gb[13] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
    Gb[14] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
    Gb[15] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
    Gb[33] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
    Gb[46] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
    Gb[50] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
    Gb[51] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
    Gb[52] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
    Gb[58] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
    Gb[25] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
    Gb[26] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
    Gb[27] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
    Gb[43] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
    Gb[44] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
    Gb[59] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
    Gb[23] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
    Gb[41] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
    Gb[42] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
    Gb[83] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
    Gb[10] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
    Gb[11] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
    Gb[40] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
    Gb[88] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
    Gb[84] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    Gb[85] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
    Gb[86] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    Gb[48] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
    Gb[47] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
    Gb[185] = ["Dragon Orb", "You feel a great power emanating from this orb"];
    Gb[149] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
    Gb[175] = ["Green Gemstone", "You didn't cheat, promise?"];
    Gb[176] = ["Orange Gemstone", "Only a real pirate can find it!"];
    Gb[177] = ["Blue Gemstone", "For too kind people"];
    Gb[77] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
    Gb[78] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
    Gb[79] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
    Gb[180] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
    Gb[181] = ["Empty Bucket", "You need to fill this bucket near a water source"];
    Gb[127] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
    Gb[128] = ["Empty Bottle", "You can fill this bottle near a water source"];
    Gb[130] = ["Empty Watering Can", "You must fill it with a water source to use it"];
    Gb[49] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
    Gb[29] = ["Bag", "More space for your items!"];
    Gb[120] = ["Paper", "Used in book-crafting"];
    Gb[28] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
    Gb[195] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
    Gb[148] = ["Lock", "Allow you to lock your chest"];
    Gb[158] = ["Lock-pick", "Allows you to unlock one chest"];
    Gb[159] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
    Gb[125] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
    Gb[183] = ["Sign", "Leave a message to others", "Durability: 200"];
    Gb[190] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
    Gb[182] = ["Well", "Allows bottle filling", "Durability: 1000"];
    Gb[162] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
    Gb[163] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
    Gb[164] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
    Gb[165] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
    Gb[122] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
    Gb[160] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
    Gb[168] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
    Gb[169] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
    Gb[170] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
    Gb[123] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
    Gb[166] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
    Gb[171] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
    Gb[172] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
    Gb[173] = ["Diamond Door", "For a shining house", "Durability: 2500"];
    Gb[124] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
    Gb[119] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
    Gb[135] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
    Gb[144] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
    Gb[151] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
    Gb[300] = "You cannot join this server";
    Gb[301] = "Kicked: ";
    Gb[302] = "Your key is already used by someone else";
    Gb[303] = "Your key is wrong";
    Gb[304] = "You have an old version, you need to clear your cache";
    Gb[338] = "Your client version is too recent for this server. The server is being updated";
    Gb[339] = "Wrong password! To enter a password: https://starve.io/?password=...";
    Gb[305] = "There are no more new resources";
    Gb[306] = "You survived 1 day";
    Gb[307] = "You survived ";
    Gb[308] = " days";
    Gb[309] = "You are dead ;-;";
    Gb[310] = "Server cannot find spawn location! Spam the play button!";
    Gb[311] = "Server is full! Spam the play button!";
    Gb[312] = "Resource is empty";
    Gb[313] = "Inventory is full (right-click to empty items)";
    Gb[314] = " is dead";
    Gb[315] = "This is not the right tool";
    Gb[316] = "You joined a team";
    Gb[317] = "You are dead";
    Gb[318] = " joined the team";
    Gb[319] = "Your team was destroyed";
    Gb[320] = "You left the team";
    Gb[321] = " left the team";
    Gb[322] = "Someone stole your token :>";
    Gb[323] = "Choose a server";
    Gb[324] = "players";
    Gb[325] = "total players";
    Gb[326] = "players on this mode";
    Gb[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Nickname";
    Nb[0] = ["You were killed for no reason"];
    Nb[1] = ["You starved to death, as the name of the game implies"];
    Nb[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
    Nb[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
    Nb[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
    Nb[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
    Nb[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
    Nb[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
    Nb[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
    Nb[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
    Nb[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
    Nb[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
    Nb[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
    Nb[13] = ["You died of thirst. Better drink your own piss."];
    Nb[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
    Nb[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
    Nb[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
    Nb[17] = ["Your skin's falling apart, the sun killed you."];
    Nb[18] = ["Garlic stored in your pockets boiled your brain."];
    Nb[19] = ["As a vampire, don't stand near the garlic cloves."];
    Nb[20] = ["You ate garlic as a vampire, what did you expect?"];
    Nb[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
    ⲆⲆⵠᐃΔ = "Uuunnnggg";
    ΔⵠⵠᐃΔᐃΔ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
  }
  const gb = 19;
  function ub(b, c, d, f, g, h) {
    gi(Xw, b, c, d, f, g, h);
    return ((217 + (Bf(Ww[0], Ww[1], Ww[2], Ww[3]) ^ ex(Ww[4], Ww[5], Ww[0]))) * 75 + 74) % 65537;
  }
  const bb = 100;
  const db = 4;
  const vb = 5;
  function cb(b, c, d) {
    const f = b ^ 42191;
    const g = (c | 36338) & ~(c & 36338);
    const h = (24 << (d & 255)) + (8 << (d >> 16 & 255)) + (0 << (d >> 24 & 255)) + (16 << (d >> 8 & 255));
    return ((43079 + (Sw(f, g, h, f) ^ $w(g, h))) * 1103515245 + 12345) % 2147483648;
  }
  const mb = 14;
  const pb = 9;
  const Cb = 7;
  const Tb = 13;
  function fb(b, c, d) {
    const f = ((35112 + b) * 1664525 + 1013904223) % 4294967296;
    const g = ~(c & 14572) & (c | 14572);
    const h = (d | 9719) & ~(d & 9719);
    const a = Ik(f, g, h, f);
    const i = Sw(g, h, f, g);
    return (0 << ((a ^ i) & 255)) + (24 << ((a ^ i) >> 8 & 255)) + (8 << ((a ^ i) >> 24 & 255)) + (16 << ((a ^ i) >> 16 & 255));
  }
  function zb() {
    Gb[184] = ["You feel a great power emanating from this orb"];
    Nb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Gb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Gb[328] = " BACK TO THE GAME";
    Gb[329] = " Share on Twitter";
    Gb[330] = " Share on Facebook";
    Gb[331] = "You can buy items on the shop in the next game with your points";
    Gb[332] = "points";
    Gb[333] = "Score";
    Gb[334] = "Kill";
    Gb[335] = "Days survived";
    Gb[336] = "Building method: Free. Press G to change";
    Gb[337] = "Building method: Grid. Press G to change";
    Gb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Gb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Gb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Gb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Gb[7] = ["Рука"];
    Gb[140] = ["Земля", "Грязно!"];
    Gb[126] = ["Песок", "Он в моих глазах!"];
    Gb[109] = ["Дерево", "Постоянно нужно больше!"];
    Gb[108] = ["Камень", "Твердый"];
    Gb[111] = ["Золото", "Будьте щедры, давайте его другим"];
    Gb[112] = ["Алмаз", "Что вы создадите с помощью него?"];
    Gb[121] = ["Аметист", "Он сиреневый, как Lapa"];
    Gb[131] = ["Мука", "Используется в готовке"];
    Gb[133] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
    Gb[136] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
    Gb[116] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
    Gb[117] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
    Gb[137] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
    Gb[138] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
    Gb[143] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
    Gb[145] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
    Gb[200] = ["Конфеты", "Только для детей!", "Еда: 20"];
    Gb[199] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
    Gb[201] = ["Гирлянда", "Прекрасная декорация для крыши"];
    Gb[115] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
    Gb[110] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
    Gb[132] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    Gb[134] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
    Gb[188] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    Gb[189] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
    Gb[191] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
    Gb[192] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
    Gb[193] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
    Gb[194] = ["Колючий Куст", "Это больно!"];
    Gb[141] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
    Gb[142] = ["Лёд", "Используется для изготовления тортов и воды"];
    Gb[55] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
    Gb[174] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
    Gb[2] = ["Шкура Зайца", "Этот кролик был таким милым..."];
    Gb[178] = ["Чистая Шкура", "Вы - фабрика хлеба"];
    Gb[179] = ["Чёрная Шкура", "Вы готовы делать зло."];
    Gb[146] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
    Gb[139] = ["Чешуя", "Она пахнет рыбой!"];
    Gb[129] = ["Шкура Кракена", "Вы не испугались?"];
    Gb[113] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
    Gb[118] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
    Gb[114] = ["Верстак", "Необходим для создания многих предметов"];
    Gb[161] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
    Gb[147] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
    Gb[167] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
    Gb[57] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
    Gb[0] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
    Gb[5] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
    Gb[6] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
    Gb[9] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
    Gb[30] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
    Gb[62] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
    Gb[16] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
    Gb[8] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
    Gb[1] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
    Gb[3] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
    Gb[4] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
    Gb[31] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
    Gb[35] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
    Gb[36] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
    Gb[37] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
    Gb[38] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
    Gb[45] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
    Gb[12] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
    Gb[13] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
    Gb[14] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
    Gb[15] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
    Gb[33] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
    Gb[46] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
    Gb[50] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
    Gb[51] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
    Gb[52] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
    Gb[58] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
    Gb[25] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
    Gb[26] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
    Gb[27] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
    Gb[43] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
    Gb[59] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
    Gb[23] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
    Gb[41] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
    Gb[42] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
    Gb[83] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    Gb[10] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
    Gb[11] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
    Gb[40] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
    Gb[84] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    Gb[85] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    Gb[86] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    Gb[48] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
    Gb[47] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
    Gb[185] = ["Шар Дракона", "Даётся за квест"];
    Gb[149] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
    Gb[175] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
    Gb[176] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
    Gb[177] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
    Gb[77] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
    Gb[78] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
    Gb[79] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
    Gb[180] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
    Gb[181] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
    Gb[127] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
    Gb[128] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
    Gb[130] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
    Gb[49] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
    Gb[29] = ["Рюкзак", "Больше места для ваших предметов!"];
    Gb[120] = ["Бумага", "Используется при создании книги"];
    Gb[28] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
    Gb[195] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
    Gb[148] = ["Замок", "Позволяет вам закрыть ваш сундук"];
    Gb[158] = ["Ключ", "Даёт вам открыть один запертый сундук"];
    Gb[159] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
    Gb[125] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
    Gb[183] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
    Gb[190] = ["Крыша", "Немного скрывает вас и согревает!"];
    Gb[182] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
    Gb[162] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
    Gb[163] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
    Gb[164] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
    Gb[165] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
    Gb[122] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
    Gb[160] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
    Gb[168] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
    Gb[169] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
    Gb[170] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
    Gb[123] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
    Gb[166] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
    Gb[171] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
    Gb[172] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
    Gb[173] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
    Gb[124] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
    Gb[119] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
    Gb[135] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
    Gb[144] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
    Gb[151] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
    Gb[300] = "Вы не можете зайти на этот сервер";
    Gb[301] = "Выгнаны: ";
    Gb[302] = "Ваш ключ уже используется кем-то";
    Gb[303] = "Ваш ключ неправильный";
    Gb[304] = "У вас старая версия, вам нужно очистить кеш";
    Gb[305] = "Ресурсов больше нет";
    Gb[306] = "Вы выжили 1 день";
    Gb[307] = "Вы выжили ";
    Gb[308] = " дней";
    Gb[309] = "Вы умерли ;-;";
    Gb[310] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
    Gb[311] = "Сервер заполнен! Спамьте кнопку играть!";
    Gb[312] = "Ресурсы закончились";
    Gb[313] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
    Gb[314] = " умер";
    Gb[315] = "Это не тот инструмент";
    Gb[316] = "Вы вошли в команду";
    Gb[317] = "Вы умерли";
    Gb[318] = " вошёл в команду";
    Gb[319] = "Ваша команда была разрушена";
    Gb[320] = "Вы покинули команду";
    Gb[321] = " покинул команду";
    Gb[322] = "Кто-то использует ваш токен :>";
    Gb[323] = "Выберите сервер";
    Gb[324] = "игроков";
    Gb[325] = "игроков всего";
    Gb[326] = "игроков в этом режиме";
    Gb[327] = "Скоро...";
    document.getElementById("nickname_input").placeholder = "Имя";
    Nb[0] = ["Вы были убиты без причины"];
    Nb[1] = ["Вы умерли от голода, как название игры подразумевает это"];
    Nb[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
    Nb[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
    Nb[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
    Nb[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
    Nb[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
    Nb[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
    Nb[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
    Nb[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
    Nb[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
    Nb[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
    Nb[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
    Nb[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
    Nb[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
    Nb[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
    Nb[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
    Nb[17] = ["Твоя кожа разваливается, солнце убило тебя"];
    Nb[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
    Nb[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
    Nb[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
    Nb[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
    ⲆⲆⵠᐃΔ = "Uuunnnggg";
    ΔⵠⵠᐃΔᐃΔ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
  }
  const yb = 4;
  function wb(b, c, d, f, g) {
    const h = (24 << (b >> 24 & 255)) + (8 << (b & 255)) + (0 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
    const a = (49730 + g) % 65516;
    return ((27795 + (function (b, c, d, f) {
      const g = ~(b & 9386) & (b | 9386);
      const i = ((45589 + c) * 2147483629 + 2147483587) % 2147483647;
      const a = d ^ 46062;
      const j = ~(f & 43497) & (f | 43497);
      const k = Co(g, i, a, j, g);
      Co(i, a, j, g, i);
      return k ^ 42082;
    }(h, (35361 + c) % 65510, ((d + 52640) * 2147483629 + 2147483587) % 2147483647, ~(f & 16331) & f | ~(f & 16331) & 16331) ^ Db(a, h))) * 1103515245 + 12345) % 2147483648;
  }
  const Pb = 16;
  const kb = 5;
  function Ab() {
    Gb[184] = ["You feel a great power emanating from this orb"];
    Nb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Gb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Gb[328] = " BACK TO THE GAME";
    Gb[329] = " Share on Twitter";
    Gb[330] = " Share on Facebook";
    Gb[331] = "You can buy items on the shop in the next game with your points";
    Gb[332] = "points";
    Gb[333] = "Score";
    Gb[334] = "Kill";
    Gb[335] = "Days survived";
    Gb[336] = "Building method: Free. Press G to change";
    Gb[337] = "Building method: Grid. Press G to change";
    Gb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Gb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Gb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Gb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Gb[7] = ["mão"];
    Gb[140] = ["terra", "está sujo!"];
    Gb[126] = ["areia", "entrou nos meus olhos!"];
    Gb[109] = ["madeira", "você não pode pegar o suficiente disso!"];
    Gb[108] = ["pedra", "também chamado rocha"];
    Gb[111] = ["ouro", "seja generoso, dê para outros"];
    Gb[112] = ["diamante", "o que você irá fazer com isso?"];
    Gb[121] = ["ametista", "é mauve como lapa"];
    Gb[131] = ["farinha", "usada na cozinha"];
    Gb[133] = ["biscoito", "biscoito da vovó", "comida: 50"];
    Gb[136] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
    Gb[116] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
    Gb[117] = ["carne assada", "um mal passado, por favor", "comida: 35"];
    Gb[137] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
    Gb[138] = ["peixe assado", "com limão é perfeito", "comida: 35"];
    Gb[143] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
    Gb[145] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
    Gb[200] = ["doces", "apenas para crianças!", "comida: 100"];
    Gb[199] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
    Gb[201] = ["pisca-pisca", "decoração perfeita de telhado"];
    Gb[115] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
    Gb[110] = ["berry", "Berry saborosa!", "comida: 10"];
    Gb[132] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
    Gb[134] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
    Gb[188] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
    Gb[189] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
    Gb[191] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
    Gb[192] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
    Gb[193] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
    Gb[194] = ["mato de espinhos", "pica!"];
    Gb[141] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
    Gb[142] = ["gelo", "útil para fazer bolo e água"];
    Gb[55] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
    Gb[174] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
    Gb[2] = ["pele de coelho", "o coelho era tão fofo..."];
    Gb[178] = ["pele pura", "você é uma fábrica de pão"];
    Gb[179] = ["pele negra", "você está pronto para fazer algo errado"];
    Gb[146] = ["pele de inverno", "ele só queria um abraço"];
    Gb[139] = ["escala", "é pequeno como peixe!"];
    Gb[129] = ["pele do kraken", "você não está com medo?"];
    Gb[113] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
    Gb[118] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
    Gb[114] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
    Gb[161] = ["linha", "usada para fazer chapéus e mochila"];
    Gb[147] = ["linha de diamante", "usada para fazer chapéus especiais"];
    Gb[167] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
    Gb[57] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
    Gb[0] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
    Gb[5] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
    Gb[6] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
    Gb[9] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
    Gb[30] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
    Gb[62] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
    Gb[16] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
    Gb[8] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
    Gb[nh.ΔⲆⵠⵠΔⲆᐃΔⲆ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
    Gb[3] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
    Gb[4] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
    Gb[31] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
    Gb[35] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
    Gb[36] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
    Gb[37] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
    Gb[38] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
    Gb[45] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
    Gb[12] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
    Gb[13] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
    Gb[14] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
    Gb[15] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
    Gb[33] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
    Gb[46] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
    Gb[50] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
    Gb[51] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
    Gb[52] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
    Gb[58] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
    Gb[25] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
    Gb[26] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
    Gb[27] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
    Gb[43] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
    Gb[59] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
    Gb[23] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
    Gb[41] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
    Gb[42] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
    Gb[83] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
    Gb[10] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
    Gb[11] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
    Gb[40] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
    Gb[84] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
    Gb[85] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
    Gb[86] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
    Gb[48] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
    Gb[47] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
    Gb[185] = ["esfera do dragão", "dado na questt"];
    Gb[149] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
    Gb[175] = ["pedra verde", "você não vai trapacear, promete?"];
    Gb[176] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
    Gb[177] = ["pedra azul", "para pessoas muito gentis"];
    Gb[77] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
    Gb[78] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
    Gb[79] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
    Gb[180] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
    Gb[181] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
    Gb[127] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
    Gb[128] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
    Gb[130] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
    Gb[49] = ["regador", "permite regar as plantas", "dano: 1"];
    Gb[29] = ["mochila", "mais espaço para seus itens!"];
    Gb[120] = ["papel", "usado para fazer o livro"];
    Gb[28] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
    Gb[195] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
    Gb[148] = ["fechadura", "permite você trancar seu baú"];
    Gb[158] = ["chave", "permite destrancar um baú"];
    Gb[159] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
    Gb[125] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
    Gb[183] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
    Gb[190] = ["telhado", "esconde você um pouco e te esquenta!"];
    Gb[182] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
    Gb[162] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
    Gb[163] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
    Gb[164] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
    Gb[165] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
    Gb[122] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
    Gb[160] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
    Gb[168] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
    Gb[169] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
    Gb[170] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
    Gb[123] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
    Gb[166] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
    Gb[171] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
    Gb[172] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
    Gb[173] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
    Gb[124] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
    Gb[119] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
    Gb[135] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
    Gb[144] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
    Gb[151] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
    Gb[300] = "você não pode entrar no servidor";
    Gb[301] = "kickado: ";
    Gb[302] = "sua chave está em uso por outra pessoa";
    Gb[303] = "sua chave está errada";
    Gb[304] = "você tem uma versão velha, limpe seu cache";
    Gb[305] = "não tem mais recursos";
    Gb[306] = "você sobreviveu 1 dia";
    Gb[307] = "você sobreviveu ";
    Gb[308] = " dias";
    Gb[309] = "você está morto ;-;";
    Gb[310] = "servidor não pôde achar um local de spawn! spam o botão de play!";
    Gb[311] = "servidor está cheio! spam o botão de play!";
    Gb[312] = "não tem recursos";
    Gb[313] = "inventário está cheio (botão direito para deletar itens)";
    Gb[314] = " está morto";
    Gb[315] = "essa não é a ferramenta certa";
    Gb[316] = "você entrou no time";
    Gb[317] = "você está morto";
    Gb[318] = "entrou no time";
    Gb[319] = "seu time foi destruido";
    Gb[320] = "você saiu do time";
    Gb[321] = " saiu do time";
    Gb[322] = "alguém roubou sua ficha :>";
    Gb[323] = "escolha um servidor";
    Gb[324] = "jogadores";
    Gb[325] = "jogadores totais";
    Gb[326] = "jogadores nesse modo";
    Gb[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Apelido";
    Nb[0] = ["você morreu sem motivo"];
    Nb[1] = ["você morreu de fome, como o jogo diz"];
    Nb[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
    Nb[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
    Nb[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
    Nb[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
    Nb[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
    Nb[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
    Nb[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
    Nb[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
    Nb[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
    Nb[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
    Nb[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
    Nb[13] = ["você morreu de sede. melhor beber sua própria urina."];
    Nb[14] = ["você sabia que você morre afogado? agora você sabe."];
    Nb[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
    Nb[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
    Nb[17] = ["sua pele caindo aos pedaços, o sol te matou."];
    Nb[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
    Nb[19] = ["como vampiro, não chegue perto do alho."];
    Nb[20] = ["você comeu alho como vampiro, o que você esperava?"];
    Nb[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
    ⲆⲆⵠᐃΔ = "Uuunnnggg";
    ΔⵠⵠᐃΔᐃΔ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
  }
  function xb() {
    Gb[184] = ["You feel a great power emanating from this orb"];
    Nb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Gb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Gb[328] = " BACK TO THE GAME";
    Gb[329] = " Share on Twitter";
    Gb[330] = " Share on Facebook";
    Gb[331] = "You can buy items on the shop in the next game with your points";
    Gb[332] = "points";
    Gb[333] = "Score";
    Gb[334] = "Kill";
    Gb[335] = "Days survived";
    Gb[336] = "Building method: Free. Press G to change";
    Gb[337] = "Building method: Grid. Press G to change";
    Gb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Gb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Gb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Gb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Gb[7] = ["Mano"];
    Gb[140] = ["Tierra", "¡Tan limpia como mis manos!"];
    Gb[126] = ["Arena", "¡Tengo arena en mis ojos!"];
    Gb[109] = ["Madera", "¡Nunca hay suficiente!"];
    Gb[108] = ["Piedra", "También llamada roca."];
    Gb[111] = ["Oro", "Sé generoso, compártelo con los otros"];
    Gb[112] = ["Diamante", "¿Que vas a hacer con él?"];
    Gb[121] = ["Amatista", "Es Mauve como Lapa"];
    Gb[131] = ["Harina", "Usada para cocinar."];
    Gb[133] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
    Gb[136] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
    Gb[116] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
    Gb[117] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
    Gb[137] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
    Gb[138] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
    Gb[143] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
    Gb[145] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
    Gb[200] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
    Gb[199] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
    Gb[201] = ["Guirnalda", "Perfecta para decorar el techo"];
    Gb[115] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Gb[110] = ["Baya", "No es venenosa.", "Comida: 10"];
    Gb[132] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Gb[134] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
    Gb[188] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Gb[189] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
    Gb[191] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
    Gb[192] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
    Gb[193] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
    Gb[194] = ["Planta de Espinas", "¡Te daña!"];
    Gb[141] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
    Gb[142] = ["Hielo", "Bueno para hacer tartas y agua"];
    Gb[55] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
    Gb[174] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
    Gb[2] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
    Gb[178] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
    Gb[179] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
    Gb[146] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
    Gb[139] = ["Escamas", "¡Huele a pescado!"];
    Gb[129] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
    Gb[113] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
    Gb[118] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
    Gb[114] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
    Gb[161] = ["Hilo", "Usado para craftear ropa y mochila"];
    Gb[147] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
    Gb[167] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
    Gb[57] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
    Gb[0] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
    Gb[5] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
    Gb[6] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
    Gb[9] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
    Gb[30] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
    Gb[62] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
    Gb[16] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
    Gb[8] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
    Gb[1] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
    Gb[3] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
    Gb[4] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
    Gb[31] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
    Gb[35] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
    Gb[36] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
    Gb[37] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
    Gb[38] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
    Gb[45] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
    Gb[12] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
    Gb[13] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
    Gb[14] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
    Gb[15] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
    Gb[33] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
    Gb[46] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
    Gb[50] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
    Gb[51] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
    Gb[52] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
    Gb[58] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
    Gb[25] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
    Gb[26] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
    Gb[27] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
    Gb[43] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
    Gb[59] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
    Gb[23] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
    Gb[41] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
    Gb[42] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
    Gb[83] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
    Gb[10] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
    Gb[11] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
    Gb[40] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
    Gb[84] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
    Gb[85] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
    Gb[86] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
    Gb[48] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
    Gb[47] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
    Gb[185] = ["Esfera del Dragón", "Dada en la misión"];
    Gb[149] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
    Gb[175] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
    Gb[176] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
    Gb[177] = ["Gema Azul", "Para gente muy amable"];
    Gb[77] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
    Gb[78] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
    Gb[79] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
    Gb[180] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
    Gb[181] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
    Gb[127] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
    Gb[128] = ["Botella Vacia", "La puedes llenar de agua"];
    Gb[130] = ["Regadera Vacía", "La tienes que llenar de agua"];
    Gb[49] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
    Gb[29] = ["Mochila", "¡Mas espacio para tus cosas!"];
    Gb[120] = ["Hoja", "Usada para hacer un libro"];
    Gb[28] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
    Gb[195] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
    Gb[148] = ["Cerradura", "Te permite cerrar tu cofre"];
    Gb[158] = ["Llave", "Te permite abrir un cofre cerrado"];
    Gb[159] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
    Gb[125] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
    Gb[183] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
    Gb[190] = ["Techo", "Te esconde un poco y te protege del frío"];
    Gb[182] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
    Gb[162] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
    Gb[163] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
    Gb[164] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
    Gb[165] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
    Gb[122] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
    Gb[160] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
    Gb[168] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
    Gb[169] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
    Gb[170] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
    Gb[123] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
    Gb[166] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
    Gb[171] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
    Gb[172] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
    Gb[173] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
    Gb[124] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
    Gb[119] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
    Gb[135] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    Gb[144] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    Gb[151] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
    Gb[300] = "No puedes unirte a este servidor";
    Gb[301] = "Expulsado: ";
    Gb[302] = "Tu llave ya está usada";
    Gb[303] = "Tu llave está mal";
    Gb[304] = "Tienes una versión antigua, limpia tu cache";
    Gb[305] = "No hay mas recursos";
    Gb[306] = "Has sobrevivido 1 día";
    Gb[307] = "Has sobrevivido ";
    Gb[308] = " días";
    Gb[309] = "Estás muerto ;-;";
    Gb[310] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
    Gb[311] = "El servidor esta lleno, ¡spamea el botón de jugar!";
    Gb[312] = "Recurso vacio";
    Gb[313] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
    Gb[314] = " está muerto";
    Gb[315] = "Esta no es la herramienta correcta";
    Gb[316] = "Te has unido a un equipo";
    Gb[317] = "Estás muerto";
    Gb[318] = " se unió al equipo";
    Gb[319] = "Tu equipo ha sido destruido";
    Gb[320] = "Has dejado el equipo";
    Gb[321] = " dejo el equipo ";
    Gb[322] = "Alguien te robó tu token :>";
    Gb[323] = "Elige un servidor";
    Gb[324] = "jugadores";
    Gb[325] = "total de jugadores";
    Gb[326] = "Jugadores en este modo de juego";
    Gb[327] = "Próximamente...";
    document.getElementById("nickname_input").placeholder = "Apodo";
    Nb[0] = ["Has muerto por ninguna razón"];
    Nb[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
    Nb[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
    Nb[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
    Nb[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
    Nb[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
    Nb[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
    Nb[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
    Nb[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
    Nb[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
    Nb[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
    Nb[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
    Nb[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
    Nb[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
    Nb[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
    Nb[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
    Nb[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
    Nb[17] = ["Tu piel se cayó, el sol te quemó."];
    Nb[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
    Nb[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
    Nb[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
    Nb[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
    ⲆⲆⵠᐃΔ = "Uuunnnggg";
    ΔⵠⵠᐃΔᐃΔ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
  }
  const Jb = 17;
  const Mb = 0;
  function Bb(b, c, d, f, g) {
    const i = ~(b & 48957) & (b | 48957);
    const a = (8 << (d >> 16 & 255)) + (24 << (d >> 0 & 255)) + (16 << (d >> 8 & 255)) + (0 << (d >> 24 & 255));
    const j = ~(f & 61673) & f | ~(f & 61673) & 61673;
    const k = ~(g & 3200) & g | ~(g & 3200) & 3200;
    const h = It(i, (16 << (c >> 24 & 255)) + (0 << (c >> 16 & 255)) + (24 << (c & 255)) + (8 << (c >> 8 & 255)));
    Sw(a, j, k, i);
    return ~(h & 24153) & h | ~(h & 24153) & 24153;
  }
  function Db(a, b) {
    const c = (12345 + (9053 + a) * 1103515245) % 2147483648;
    return ~(c & 14573) & c | ~(c & 14573) & 14573;
  }
  function Ib() {
    Gb[184] = ["You feel a great power emanating from this orb"];
    Nb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Gb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Gb[328] = " BACK TO THE GAME";
    Gb[329] = " Share on Twitter";
    Gb[330] = " Share on Facebook";
    Gb[331] = "You can buy items on the shop in the next game with your points";
    Gb[332] = "points";
    Gb[333] = "Score";
    Gb[334] = "Kill";
    Gb[335] = "Days survived";
    Gb[336] = "Building method: Free. Press G to change";
    Gb[337] = "Building method: Grid. Press G to change";
    Gb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Gb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Gb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Gb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Gb[7] = ["Hand"];
    Gb[140] = ["Boden", "Dreckig!"];
    Gb[126] = ["Sand", "Ich habe es in meine Augen bekommen!"];
    Gb[109] = ["Holz", "Du kannst niemals zu viel haben!"];
    Gb[108] = ["Stein", "Auch Fels gennant"];
    Gb[111] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
    Gb[112] = ["Diamant", "Was wirst du daraus machen?"];
    Gb[121] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
    Gb[131] = ["Mehl", "wird fürs Backen gebraucht"];
    Gb[133] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
    Gb[136] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
    Gb[116] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
    Gb[117] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
    Gb[137] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
    Gb[138] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
    Gb[143] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
    Gb[145] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
    Gb[200] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
    Gb[199] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
    Gb[201] = ["Girlande", "perfekter Schmuck für Dächer"];
    Gb[115] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Gb[110] = ["Beere", "Beeren lecker!", "Essen: 10"];
    Gb[132] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Gb[134] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
    Gb[188] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Gb[189] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
    Gb[191] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Gb[192] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
    Gb[193] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
    Gb[194] = ["Dornenbusch", "Es sticht!"];
    Gb[141] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
    Gb[142] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
    Gb[55] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
    Gb[174] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
    Gb[2] = ["Hasenfell", "Der Hase war so süß..."];
    Gb[178] = ["Klares Fell", "Du bist eine Brotfabrik"];
    Gb[179] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
    Gb[146] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
    Gb[139] = ["Schuppen", "Es riecht wie Fisch!"];
    Gb[129] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
    Gb[113] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
    Gb[118] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
    Gb[114] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
    Gb[161] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
    Gb[147] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
    Gb[167] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
    Gb[57] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
    Gb[0] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
    Gb[5] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
    Gb[6] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
    Gb[9] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
    Gb[30] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
    Gb[62] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
    Gb[16] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
    Gb[8] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
    Gb[1] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
    Gb[3] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    Gb[4] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    Gb[31] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
    Gb[35] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
    Gb[36] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
    Gb[37] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
    Gb[38] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
    Gb[45] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
    Gb[12] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
    Gb[13] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
    Gb[14] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
    Gb[15] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
    Gb[33] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
    Gb[46] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
    Gb[50] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    Gb[51] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    Gb[52] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
    Gb[58] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
    Gb[25] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
    Gb[26] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
    Gb[27] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
    Gb[43] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
    Gb[59] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
    Gb[23] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
    Gb[41] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
    Gb[42] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
    Gb[83] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    Gb[10] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
    Gb[11] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
    Gb[40] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
    Gb[84] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    Gb[85] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    Gb[86] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    Gb[48] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
    Gb[47] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Gb[185] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
    Gb[149] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
    Gb[175] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
    Gb[176] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
    Gb[177] = ["Blauer Edelstein", "Für sehr nette Leute"];
    Gb[77] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Gb[78] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Gb[79] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Gb[180] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
    Gb[181] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
    Gb[127] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
    Gb[128] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
    Gb[130] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
    Gb[49] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
    Gb[29] = ["Rucksack", "Mehr Platz im Inventar!"];
    Gb[120] = ["Papier", "Wird fürs Büchermachen verwendet"];
    Gb[28] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
    Gb[195] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
    Gb[148] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
    Gb[158] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
    Gb[159] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
    Gb[125] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
    Gb[183] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
    Gb[190] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
    Gb[182] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
    Gb[162] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
    Gb[163] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
    Gb[164] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
    Gb[165] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
    Gb[122] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
    Gb[160] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
    Gb[168] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
    Gb[169] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
    Gb[170] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
    Gb[123] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
    Gb[166] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
    Gb[171] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
    Gb[172] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
    Gb[173] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
    Gb[124] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
    Gb[119] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
    Gb[135] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    Gb[144] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    Gb[151] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
    Gb[300] = "Du kannst diesem Server nicht beitreten";
    Gb[301] = "Gekickt: ";
    Gb[302] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
    Gb[303] = "Dein Schlüssel ist falsch";
    Gb[304] = "Deine Version ist veraltet, säubere dein Cache";
    Gb[305] = "Es gibt keine neuen Ressourcen";
    Gb[306] = "Du hast einen Tag überlebt";
    Gb[307] = "Du hast überlebt ";
    Gb[308] = " Tage";
    Gb[309] = "Du bist gestorben ;-;";
    Gb[310] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
    Gb[311] = "Server ist voll! Drücke immer wieder auf spielen!";
    Gb[312] = "Ressource ist leer";
    Gb[313] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
    Gb[314] = " ist gestorben";
    Gb[315] = "Das ist nicht das richtige Werkzeug";
    Gb[316] = "Du bist einem Team beigetreten";
    Gb[317] = "Du bist gestorben";
    Gb[318] = " ist dem Team beigetreten";
    Gb[319] = "Dein Team wurde zerstört";
    Gb[320] = "Du hast das Team verlassen";
    Gb[321] = " hat das Team verlassen";
    Gb[322] = "Jemand hat dein Token gestohlen :>";
    Gb[323] = "Suche dir ein Server aus";
    Gb[324] = "Spieler";
    Gb[325] = "alle Spieler";
    Gb[326] = "Spieler in diesem Modus";
    Gb[327] = "Bald verfügbar...";
    document.getElementById("nickname_input").placeholder = "Spitzname";
    Nb[0] = ["Du wurdest ohne Grund getötet"];
    Nb[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
    Nb[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
    Nb[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
    Nb[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
    Nb[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
    Nb[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
    Nb[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
    Nb[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
    Nb[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
    Nb[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
    Nb[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
    Nb[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
    Nb[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
    Nb[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
    Nb[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
    Nb[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
    Nb[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
    Nb[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
    Nb[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
    Nb[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
    Nb[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
    ⲆⲆⵠᐃΔ = "Uuunnnggg";
    ΔⵠⵠᐃΔᐃΔ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
  }
  function Eb(b, c, d, f) {
    _j(Xw, b, c, d, f);
    const g = ex(Ww[0], Ww[1], Ww[2]);
    const h = hs(Ww[3], Ww[0], Ww[1], Ww[2], Ww[3]);
    return (16 << ((g ^ h) >> 8 & 255)) + (24 << ((g ^ h) >> 16 & 255)) + (0 << ((g ^ h) >> 24 & 255)) + (8 << ((g ^ h) & 255));
  }
  const Sb = 100;
  function Qb() {
    Gb[184] = ["You feel a great power emanating from this orb"];
    Nb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Gb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Gb[328] = " BACK TO THE GAME";
    Gb[329] = " Share on Twitter";
    Gb[330] = " Share on Facebook";
    Gb[331] = "You can buy items on the shop in the next game with your points";
    Gb[332] = "points";
    Gb[333] = "Score";
    Gb[334] = "Kill";
    Gb[335] = "Days survived";
    Gb[336] = "Building method: Free. Press G to change";
    Gb[337] = "Building method: Grid. Press G to change";
    Gb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Gb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Gb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Gb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Gb[7] = ["Ręka"];
    Gb[140] = ["Ziemia", "Brudna!"];
    Gb[126] = ["Piasek", "Mam go w oczach!"];
    Gb[109] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
    Gb[108] = ["Kamień", "Także nazywany skałą"];
    Gb[111] = ["Złoto", "Bądź hojny, daj trochę innym"];
    Gb[112] = ["Diament", "Co z nim zrobisz?"];
    Gb[121] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
    Gb[131] = ["Mąka", "Używana w gotowaniu"];
    Gb[133] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
    Gb[136] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
    Gb[116] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
    Gb[117] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
    Gb[137] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
    Gb[138] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
    Gb[143] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
    Gb[145] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
    Gb[200] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
    Gb[199] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
    Gb[201] = ["Girlanda", "Idealna do dekorowania dachów"];
    Gb[115] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Gb[110] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
    Gb[132] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Gb[134] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
    Gb[188] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Gb[189] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
    Gb[191] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Gb[192] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
    Gb[193] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
    Gb[194] = ["Kolczasty krzew", "Kłuje!"];
    Gb[141] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
    Gb[142] = ["Lód", "Użyteczny do robienia ciast i wody"];
    Gb[55] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
    Gb[174] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
    Gb[2] = ["Skóra królika", "Ten królik był taki słodziutki..."];
    Gb[178] = ["Skóra", "Jesteś fabryką chleba"];
    Gb[179] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
    Gb[146] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
    Gb[139] = ["Łuski", "Pachnie jak ryba!"];
    Gb[129] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
    Gb[113] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
    Gb[118] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
    Gb[114] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
    Gb[161] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
    Gb[147] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
    Gb[167] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
    Gb[57] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
    Gb[0] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
    Gb[5] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
    Gb[6] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    Gb[9] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    Gb[30] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
    Gb[62] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
    Gb[16] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
    Gb[8] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
    Gb[1] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
    Gb[3] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    Gb[4] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    Gb[31] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    Gb[35] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
    Gb[36] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
    Gb[37] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
    Gb[38] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
    Gb[45] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
    Gb[12] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
    Gb[13] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
    Gb[14] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
    Gb[15] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
    Gb[33] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
    Gb[46] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
    Gb[50] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    Gb[51] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    Gb[52] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    Gb[58] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
    Gb[25] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
    Gb[26] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
    Gb[27] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
    Gb[43] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
    Gb[59] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
    Gb[23] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
    Gb[41] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
    Gb[42] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
    Gb[83] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
    Gb[10] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
    Gb[11] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
    Gb[40] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
    Gb[84] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
    Gb[85] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
    Gb[86] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
    Gb[48] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
    Gb[47] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Gb[185] = ["Smocza kula", "Zdobyta podczas zadania"];
    Gb[149] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
    Gb[175] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
    Gb[176] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
    Gb[177] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
    Gb[77] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Gb[78] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Gb[79] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Gb[180] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
    Gb[181] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
    Gb[127] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
    Gb[128] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
    Gb[130] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
    Gb[49] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
    Gb[29] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
    Gb[120] = ["Papier", "Używany w tworzeniu książki"];
    Gb[28] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
    Gb[195] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
    Gb[148] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
    Gb[158] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
    Gb[159] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
    Gb[125] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
    Gb[183] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
    Gb[190] = ["Dach", "Trochę cie ogrzewa i chowa!"];
    Gb[182] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
    Gb[162] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
    Gb[163] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
    Gb[164] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
    Gb[165] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
    Gb[122] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
    Gb[160] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
    Gb[168] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
    Gb[169] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
    Gb[170] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
    Gb[123] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
    Gb[166] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
    Gb[171] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
    Gb[172] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
    Gb[173] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
    Gb[124] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
    Gb[119] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
    Gb[135] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    Gb[144] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    Gb[151] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
    Gb[300] = "Nie możesz dołączyć do tego serwera";
    Gb[301] = "Wyrzucony: ";
    Gb[302] = "Twój klucz jest aktualnie używany przez innego gracza";
    Gb[303] = "Twój klucz jest nieprawidłowy";
    Gb[304] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
    Gb[305] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
    Gb[306] = "Przeżyłeś 1 dzień";
    Gb[307] = "Przeżyłeś ";
    Gb[308] = " dni";
    Gb[309] = "Jesteś martwy ;-;";
    Gb[310] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
    Gb[311] = "Serwer jest pełny! Spamuj przycisk zagraj!";
    Gb[312] = "Źródło jest puste";
    Gb[313] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
    Gb[314] = " jest martwy";
    Gb[315] = "To nie jest właściwe narzędzie";
    Gb[316] = "Dołączyłeś do drużyny";
    Gb[317] = "Jesteś martwy";
    Gb[318] = " dołączył do drużyny";
    Gb[319] = "Twoja drużyna została zniszczona";
    Gb[320] = " Opuściłeś drużynę";
    Gb[321] = " opuścił drużynę";
    Gb[322] = "Ktoś ukradł twój żeton :>";
    Gb[323] = "Wybierz serwer";
    Gb[324] = "graczy";
    Gb[325] = "wszystkich graczy";
    Gb[326] = "graczy w tym trybie";
    Gb[327] = "Już wkrótce...";
    document.getElementById("nickname_input").placeholder = "Przydomek";
    Nb[0] = ["Zostałeś zabity bez powodu"];
    Nb[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
    Nb[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
    Nb[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
    Nb[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
    Nb[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
    Nb[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
    Nb[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
    Nb[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
    Nb[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
    Nb[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
    Nb[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
    Nb[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
    Nb[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
    Nb[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
    Nb[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
    Nb[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
    Nb[17] = ["Twoja skóra odpada, słońce cię zabija."];
    Nb[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
    Nb[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
    Nb[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
    Nb[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
    ⲆⲆⵠᐃΔ = "Uuunnnggg";
    ΔⵠⵠᐃΔᐃΔ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
  }
  const _b = 8;
  function Fb() {
    Gb[184] = ["You feel a great power emanating from this orb"];
    Nb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Gb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Gb[328] = " RETOUR AU JEU";
    Gb[329] = " Partage sur Twitter";
    Gb[330] = " Partage sur Facebook";
    Gb[331] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
    Gb[332] = "points";
    Gb[333] = "Score";
    Gb[334] = "Tués";
    Gb[335] = "Jours survécus";
    Gb[336] = "Mode de construction: Libre. Appuie sur G pour changer";
    Gb[337] = "Mode de construction: Grille. Appuie sur G pour changer";
    Gb[197] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
    Gb[18] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
    Gb[61] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
    Gb[198] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quêtes";
    document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
    document.getElementById("constraintquest").innerHTML = " Contraintes";
    document.getElementById("claim_rewards").innerHTML = " Résultat";
    document.getElementById("rewardquest").innerHTML = " Récompenses";
    document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
    document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
    document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
    document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
    document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
    document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
    document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
    Gb[7] = ["Main"];
    Gb[140] = ["Terre", "C'est sale!"];
    Gb[126] = ["Sable", "J'en ai dans les yeux"];
    Gb[109] = ["Bois", "Tu n'en auras jamais trop!"];
    Gb[108] = ["Pierre", "Aussi appelée roche"];
    Gb[111] = ["Or", "Sois généreux, donne en aux autres"];
    Gb[112] = ["Diamant", "Comme tes yeux! wesh"];
    Gb[121] = ["Améthyste", "C'est Mauve comme Lapa"];
    Gb[131] = ["Farine", "Utile pour la cuisine"];
    Gb[133] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
    Gb[136] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
    Gb[116] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
    Gb[117] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
    Gb[137] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
    Gb[138] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
    Gb[143] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
    Gb[145] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
    Gb[200] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
    Gb[199] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
    Gb[201] = ["Guirlandes", "Utilisable sur les toits"];
    Gb[115] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
    Gb[110] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
    Gb[132] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    Gb[134] = ["Blé", "Peut être transformé en farine dans les moulins"];
    Gb[188] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    Gb[189] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
    Gb[191] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
    Gb[192] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
    Gb[193] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
    Gb[194] = ["Ronces", "Ça pique!"];
    Gb[141] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
    Gb[142] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
    Gb[55] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
    Gb[174] = ["Peau de loup", "Il était où le gentil ti Youki?"];
    Gb[2] = ["Peau de lapin", "Vous êtes un monstre"];
    Gb[178] = ["Fourrure blanche", "Tu es une usine à pain"];
    Gb[179] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
    Gb[146] = ["Fourrure d'hiver", "Il voulait juste un calin"];
    Gb[139] = ["Écailles", "Ça sent le poisson!"];
    Gb[129] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
    Gb[113] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
    Gb[118] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
    Gb[114] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
    Gb[161] = ["Fil", "Utile pour faire des chapeaux et un sac"];
    Gb[147] = ["Fil de diamant", "Utile pour faire des chapeaux"];
    Gb[167] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
    Gb[57] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
    Gb[0] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
    Gb[5] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
    Gb[6] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
    Gb[9] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
    Gb[30] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
    Gb[62] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
    Gb[16] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
    Gb[8] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
    Gb[1] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
    Gb[3] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
    Gb[4] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
    Gb[31] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
    Gb[35] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
    Gb[36] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
    Gb[37] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
    Gb[38] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
    Gb[45] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
    Gb[12] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
    Gb[13] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
    Gb[14] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
    Gb[15] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
    Gb[33] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
    Gb[46] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
    Gb[50] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
    Gb[51] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
    Gb[52] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
    Gb[58] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
    Gb[25] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
    Gb[26] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
    Gb[27] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
    Gb[43] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
    Gb[59] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
    Gb[23] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Gb[41] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Gb[42] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Gb[83] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Gb[10] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Gb[11] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Gb[40] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
    Gb[84] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Gb[85] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Gb[86] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Gb[48] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
    Gb[47] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
    Gb[185] = ["Orbe du Dragon", "Donné en Quête"];
    Gb[149] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
    Gb[175] = ["Gemme verte", "Tu n'as pas triché, promis?"];
    Gb[176] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
    Gb[177] = ["Gemme bleue", "Pour les gens trop gentils"];
    Gb[77] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
    Gb[78] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
    Gb[79] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
    Gb[180] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
    Gb[181] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
    Gb[127] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
    Gb[128] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
    Gb[130] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
    Gb[49] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
    Gb[29] = ["Sac", "Plus de place dans ton inventaire!"];
    Gb[120] = ["Papier", "Pour fabriquer toute sorte d'objets"];
    Gb[28] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
    Gb[195] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
    Gb[148] = ["Cadenas", "Pour verrouiller un coffre"];
    Gb[158] = ["Clé", "Pour déverrouiller un coffre"];
    Gb[159] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
    Gb[125] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
    Gb[183] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
    Gb[190] = ["Toit", "Te cache un peu et te réchauffe"];
    Gb[182] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
    Gb[162] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
    Gb[163] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
    Gb[164] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
    Gb[165] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
    Gb[122] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
    Gb[160] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
    Gb[168] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
    Gb[169] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
    Gb[170] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
    Gb[123] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
    Gb[166] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
    Gb[171] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
    Gb[172] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
    Gb[173] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
    Gb[124] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
    Gb[119] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
    Gb[135] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    Gb[144] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    Gb[151] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
    Gb[300] = "Tu ne peux pas rejoindre le serveur";
    Gb[301] = "Expulsé: ";
    Gb[302] = "Ta clé est déjà utilisée par quelqu'un d'autre";
    Gb[303] = "Ta clé est fausse";
    Gb[304] = "Tu as une vieille version, rafraichis tes caches";
    Gb[305] = "Il n'y a plus de nouvelles ressources";
    Gb[306] = "Tu as survécu 1 jour";
    Gb[307] = "Tu as survécu ";
    Gb[308] = " jours";
    Gb[309] = "Tu es mort ;-;";
    Gb[310] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
    Gb[311] = "Le serveur est complet! Spam le bouton jouer";
    Gb[312] = "Cette ressource est vide";
    Gb[313] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
    Gb[314] = " est mort";
    Gb[315] = "Ce n'est pas le bon outil";
    Gb[316] = "Tu as rejoins une équipe";
    Gb[317] = "Tu es mort";
    Gb[318] = " a rejoint l'équipe";
    Gb[319] = "Ton équipe a été détruite";
    Gb[320] = "Tu as quitté l'équipe";
    Gb[321] = " a quitté l'équipe";
    Gb[322] = "Quelqu'un a volé ton token :>";
    Gb[323] = "Choisis un serveur";
    Gb[324] = "joueurs";
    Gb[325] = "joueurs";
    Gb[326] = "joueurs dans ce mode";
    Gb[327] = "Bientôt...";
    document.getElementById("nickname_input").placeholder = "Surnom";
    Nb[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
    Nb[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
    Nb[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
    Nb[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
    Nb[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
    Nb[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
    Nb[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
    Nb[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
    Nb[8] = ["Cet ours voulait juste un câlin."];
    Nb[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
    Nb[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
    Nb[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
    Nb[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
    Nb[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
    Nb[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
    Nb[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
    Nb[16] = ["Un kraken a 'kraké' tes os."];
    Nb[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
    Nb[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
    Nb[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
    Nb[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
    Nb[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
    ⲆⲆⵠᐃΔ = "Uuunnnggg";
    ΔⵠⵠᐃΔᐃΔ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
  }
  const Rb = 3;
  var Gb = [];
  for (var jb = 0; jb < 344; jb++) {
    Gb[jb] = "";
  }
  const Gt = 14;
  var Wb = e.console;
  Wb.log = Wb.info = Wb.error = Wb.warn = Wb.debug = Wb.ⲆᐃᐃⵠᐃⲆᐃΔⲆ = Wb.trace = Wb.time = Wb.timeEnd = function () {};
  const Ob = 11;
  var Nb = [];
  const qb = 11;
  $(".md-languages").on("click", function () {
    $(this).toggleClass("active");
  });
  $(".md-languages ul li").on("click", function () {
    var a = $(this).text();
    if (a === "English") {
      lb();
    } else if (a === "Français") {
      Fb();
    } else if (a === "Deutsch") {
      Ib();
    } else if (a === "Español") {
      xb();
    } else if (a === "Português") {
      Ab();
    } else if (a === "Русский") {
      zb();
    } else if (a === "Polski") {
      Qb();
    }
    ⵠⵠᐃⲆΔ = [];
    Dx.ⵠΔⵠⵠ.label = [];
    $(".md-languages ul li").removeClass("active");
    $(this).addClass("active");
    $(".md-languages label button").text(a);
  });
  Mr = "EN";
  const Hb = 7;
  const Ub = 6;
  const Yb = 13;
  var Kb = navigator.language || navigator.userLanguage;
  const Vb = 12;
  switch (Kb) {
    case "ru":
      Mr = "RU";
      break;
    case "en":
      Mr = "EN";
      break;
    case "es":
      Mr = "SP";
      break;
    case "fr":
      Mr = "FR";
      break;
    case "pl":
      Mr = "PL";
      break;
    case "de":
      Mr = "DE";
      break;
    case "pt":
      Mr = "PT";
  }
  const Xb = 7;
  var Zb;
  function It(a, b) {
    const c = a ^ 49181;
    const d = ((4671 + b) * 1664525 + 1013904223) % 4294967296;
    const f = yx(c, d, c, d);
    $w(c, d);
    return (f | 6912) & ~(f & 6912);
  }
  function ed(b, c, d, f, g, i) {
    const a = ((29568 + b) * 1103515245 + 12345) % 2147483648;
    const j = c ^ 35307;
    const k = dm(a, j, (59206 + d) % 65394, (53535 + f) % 65343, (8 << (g >> 24 & 255)) + (24 << (g >> 16 & 255)) + (0 << (g & 255)) + (16 << (g >> 8 & 255)), ~(i & 43683) & (i | 43683));
    const h = function (a, b) {
      const c = ((a + 55472) * 214013 + 2531011) % 4294967296;
      const d = b ^ 29792;
      return (2531011 + (10716 + (ds(c, d, c, d) ^ ds(c, d, c, d))) * 214013) % 4294967296;
    }(a, j);
    return (0 << ((k ^ h) >> 8 & 255)) + (16 << ((k ^ h) >> 16 & 255)) + (24 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) & 255));
  }
  if (Mr === "FR") {
    $(".md-languages label button").text("Français");
    Zb = Fb;
  } else if (Mr === "PL") {
    $(".md-languages label button").text("Polski");
    Zb = Qb;
  } else if (Mr === "PT") {
    $(".md-languages label button").text("Português");
    Zb = Ab;
  } else if (Mr === "SP") {
    $(".md-languages label button").text("Español");
    Zb = xb;
  } else if (Mr === "RU") {
    $(".md-languages label button").text("Русский");
    Zb = zb;
  } else if (Mr === "DE") {
    $(".md-languages label button").text("Deutsch");
    Zb = Ib;
  } else {
    $(".md-languages label button").text("English");
    Zb = lb;
  }
  Δᐃ = {
    ⲆⲆᐃⵠΔⲆᐃⵠΔ: "img/logo.png",
    ΔⵠΔᐃᐃⵠᐃ: "img/mapday.png",
    ⲆⲆⵠᐃΔⵠⵠ: "img/mapnight.png",
    ΔⵠᐃᐃΔⲆΔⲆΔ: "img/bigzday.png",
    ΔᐃⲆⵠΔⲆᐃΔᐃ: "img/bigznight.png",
    ᐃΔᐃᐃᐃΔΔ: "img/bigday-river1.png",
    ΔᐃΔΔⵠΔⲆⵠᐃ: "img/bigday-lake.png",
    ΔᐃⵠΔᐃⵠⲆ: "img/bigday-berry.png",
    ⲆΔᐃΔΔⵠΔ: "img/bigday-stone1.png",
    ⲆⵠΔⵠⵠΔᐃ: "img/bigday-stone2.png",
    ⵠᐃᐃⵠⵠᐃⲆ: "img/bigday-gold1.png",
    ΔⲆⲆᐃⲆΔΔ: "img/bigday-gold2.png",
    Ⲇᐃᐃᐃⵠⵠᐃ: "img/bigday-emerald1.png",
    ⲆⲆⲆⵠⲆⵠΔ: "img/bigday-emerald2.png",
    ᐃⲆⲆⲆⲆⵠⲆ: "img/bigday-amethyst.png",
    ᐃΔⲆΔᐃᐃⲆ: "img/bigday-bear.png",
    ⲆΔⵠᐃⲆⵠⵠ: "img/bigday-cave.png",
    ⲆᐃⲆⵠΔΔᐃ: "img/bigday-diamond.png",
    ᐃⲆⵠⵠΔⲆΔ: "img/bigday-island.png",
    ΔᐃΔⲆᐃΔᐃ: "img/bigday-reidite.png",
    ᐃⵠⵠᐃᐃⵠⲆ: "img/bigday-spider.png",
    ⲆⵠⵠᐃⲆⲆΔ: "img/bigday-wolf.png",
    ⵠᐃⵠⲆⵠΔⲆ: "img/bigday-fir-tree.png",
    ᐃᐃᐃΔΔⲆᐃ: "img/bigday-fox.png",
    ⲆⲆⵠΔⲆΔΔ: "img/bigday-kraken.png",
    ΔⲆⲆΔⵠᐃΔ: "img/bigday-piranha.png",
    ⲆᐃⵠⲆⲆⲆⵠ: "img/bigday-cactus.png",
    ⵠⲆⲆⵠᐃΔⵠ: "img/bigday-magma.png",
    ⵠΔᐃⲆⵠⲆΔ: "img/bigday-river1.png",
    ⵠᐃⲆᐃᐃΔΔΔⲆ: "img/bignight-lake.png",
    ΔΔⵠⲆᐃⵠⵠᐃΔ: "img/bignight-berry.png",
    ⵠⵠΔⵠᐃΔΔ: "img/bignight-stone1.png",
    ⲆᐃΔΔⵠⵠΔ: "img/bignight-stone2.png",
    ⵠᐃⵠⲆⵠⲆᐃ: "img/bignight-gold1.png",
    ⵠᐃᐃⲆⲆⵠᐃ: "img/bignight-gold2.png",
    ⲆΔᐃΔⵠΔᐃ: "img/bignight-emerald1.png",
    ⲆΔⵠᐃⲆᐃⵠ: "img/bignight-emerald2.png",
    ΔⲆⲆⵠᐃΔΔ: "img/bignight-amethyst.png",
    ΔΔΔⲆⵠⲆⲆ: "img/bignight-bear.png",
    ⲆΔΔᐃⲆⲆⲆ: "img/bignight-cave.png",
    ᐃᐃΔᐃⲆⲆᐃ: "img/bignight-diamond.png",
    ⲆⲆⵠⵠᐃΔᐃ: "img/bignight-island.png",
    ⲆⵠᐃⲆⵠⲆΔ: "img/bignight-reidite.png",
    ⵠⲆΔⵠΔᐃⲆ: "img/bignight-spider.png",
    ΔⲆⵠⲆⲆⲆᐃ: "img/bignight-wolf.png",
    ΔⲆⵠⲆᐃᐃⵠ: "img/bignight-fir-tree.png",
    ᐃᐃᐃᐃⵠⲆⲆ: "img/bignight-fox.png",
    ΔⲆᐃΔⵠΔᐃ: "img/bignight-kraken.png",
    ᐃⲆᐃΔΔⲆΔ: "img/bignight-piranha.png",
    ⵠΔⵠⲆⲆΔΔ: "img/bignight-cactus.png",
    ᐃⵠⲆⵠⲆⵠᐃ: "img/bignight-magma.png",
    ⲆᐃΔⵠΔⵠⲆ: "img/bigday-desert.png",
    ⵠⲆᐃᐃⵠⵠⲆ: "img/bigday-winter.png",
    ΔΔⲆⲆⲆΔⵠ: "img/bigday-lava.png",
    ⵠᐃⲆᐃᐃⲆᐃ: "img/bigday-forest.png",
    ⵠⲆⲆⲆΔⲆⲆ: "img/bignight-desert.png",
    ⵠⲆᐃᐃΔΔᐃ: "img/bignight-winter.png",
    ⲆᐃⲆᐃΔⲆᐃ: "img/bignight-lava.png",
    ⵠΔⲆᐃᐃⵠⵠ: "img/bignight-forest.png",
    ΔⵠᐃⲆⵠᐃᐃ: "img/day-river-wave.png",
    ΔⲆᐃΔΔⲆⵠ: "img/night-river-wave.png",
    ΔⲆⵠⲆΔⵠⵠ: "img/day-fog0.png",
    ΔⲆⲆΔΔⲆᐃ: "img/day-fog1.png",
    ⲆⲆⲆΔⲆΔⲆ: "img/day-fog2.png",
    ⵠΔΔΔᐃᐃᐃ: "img/night-fog0.png",
    ⲆᐃᐃⲆΔᐃⵠ: "img/night-fog1.png",
    ⵠᐃⵠᐃΔΔΔ: "img/night-fog2.png",
    ⵠⲆⲆΔⲆⲆᐃ: "img/day-fogdesert0.png",
    ᐃⵠⵠΔᐃᐃⵠ: "img/day-fogdesert1.png",
    ᐃᐃⵠᐃⵠⵠΔ: "img/day-fogdesert2.png",
    ΔⵠᐃⲆⲆᐃⲆ: "img/night-fogdesert0.png",
    ΔⲆᐃᐃΔⵠΔ: "img/night-fogdesert1.png",
    ⲆⵠΔΔᐃΔᐃ: "img/night-fogdesert2.png",
    ΔᐃⵠⵠⲆᐃⵠ: "img/day-cross-server.png",
    ΔᐃᐃΔΔⵠⵠ: "img/day-here-server.png",
    ΔⵠΔᐃΔΔⲆ: "img/day-finish-server.png",
    ΔᐃΔⲆⲆⲆⲆ: "img/day-item-server.png",
    ΔⲆᐃΔᐃΔⵠ: "img/day-skull-server.png",
    ᐃⲆᐃⵠⲆⵠᐃ: "img/night-cross-server.png",
    ⵠⵠΔⲆⲆΔⲆ: "img/night-here-server.png",
    ⲆⲆⲆΔΔⲆᐃ: "img/night-finish-server.png",
    ᐃΔΔᐃᐃⵠⲆ: "img/night-item-server.png",
    ᐃⵠⲆΔΔⵠᐃ: "img/night-skull-server.png",
    ⲆᐃᐃΔΔΔΔ: "img/day-reidite0.png",
    ⵠᐃᐃⲆⵠⲆⵠ: "img/night-reidite0.png",
    ⲆᐃΔΔᐃⵠᐃ: "img/day-reidite1.png",
    ⲆΔΔΔⵠᐃΔ: "img/night-reidite1.png",
    ΔΔᐃⲆΔⵠⵠ: "img/day-reidite2.png",
    ⲆΔᐃⵠᐃⲆᐃ: "img/night-reidite2.png",
    ⲆⵠΔⲆⲆᐃΔ: "img/day-lava1.png",
    ΔⲆᐃᐃⲆΔᐃ: "img/night-lava1.png",
    ⲆⲆΔᐃⲆΔⵠ: "img/day-lava2.png",
    ⲆᐃⵠΔΔΔⲆ: "img/night-lava2.png",
    ⵠΔΔⵠⲆⵠⲆ: "img/day-lava3.png",
    ⵠⲆᐃΔⵠᐃⵠ: "img/night-lava3.png",
    ⵠᐃⲆΔⲆⵠⵠ: "img/day-lava4.png",
    ⲆᐃⵠⵠᐃⵠⲆ: "img/night-lava4.png",
    ⵠΔΔⵠⲆΔⵠ: "img/day-lava5.png",
    ⲆⲆⲆⵠⲆᐃⵠ: "img/night-lava5.png",
    ⲆⵠΔⵠΔⲆⲆ: "img/day-lava6.png",
    ᐃⵠⲆⵠⵠΔⵠ: "img/night-lava6.png",
    ⵠⵠⵠⲆΔⲆⲆ: "img/day-lava-ground1.png",
    ᐃⲆᐃΔⲆΔᐃ: "img/night-lava-ground1.png",
    ΔᐃⲆΔⵠΔⵠ: "img/day-lava-ground2.png",
    ⵠΔΔΔⵠΔΔ: "img/night-lava-ground2.png",
    ᐃᐃⲆⲆⲆΔΔ: "img/day-lava-ground3.png",
    ⵠᐃΔΔΔⵠΔ: "img/night-lava-ground3.png",
    ⲆΔⲆⵠⵠⲆⵠ: "img/day-lava-ground4.png",
    ⵠⵠΔⲆᐃΔⵠ: "img/night-lava-ground4.png",
    ⵠᐃⵠΔⵠᐃᐃ: "img/day-lava-ground5.png",
    ⵠΔᐃΔΔᐃⲆ: "img/night-lava-ground5.png",
    ⲆⲆⵠⵠᐃΔΔ: "img/day-lava-ground6.png",
    ΔⲆⲆΔⵠΔⵠ: "img/night-lava-ground6.png",
    ⲆⵠᐃΔᐃᐃᐃ: "img/day-fire-mob.png",
    ΔᐃΔᐃᐃᐃⵠ: "img/night-fire-mob.png",
    ⲆⲆⲆⲆⵠⲆⲆ: "img/hurt-fire-mob.png",
    ⲆᐃⵠⵠᐃΔΔ: "img/day-diamond-protection.png",
    ⲆⵠΔᐃⲆⲆⵠ: "img/night-diamond-protection.png",
    ΔⲆΔⵠⲆⵠΔ: "img/day-hand-diamond-protection.png",
    ⵠΔΔⵠⵠⲆᐃ: "img/night-hand-diamond-protection.png",
    ᐃΔⵠⵠΔⵠᐃ: "img/inv-diamond-protection-out.png",
    ⲆΔⲆΔⲆΔⲆ: "img/inv-diamond-protection-in.png",
    ΔⲆΔⲆᐃⲆⵠ: "img/inv-diamond-protection-click.png",
    ᐃⲆⲆⲆⲆᐃⵠ: "img/day-amethyst-protection.png",
    ᐃⵠΔΔΔᐃᐃ: "img/night-amethyst-protection.png",
    ⲆⵠΔΔΔⵠΔΔΔ: "img/day-hand-amethyst-protection.png",
    ΔⲆᐃᐃⲆᐃⵠᐃⲆ: "img/night-hand-amethyst-protection.png",
    ⵠⵠᐃⲆⵠⵠΔ: "img/inv-amethyst-protection-out.png",
    ⵠΔΔΔΔⵠⲆ: "img/inv-amethyst-protection-in.png",
    ᐃᐃΔⵠⲆⲆΔ: "img/inv-amethyst-protection-click.png",
    ᐃⲆΔⵠᐃⲆⵠ: "img/day-reidite-sword.png",
    ᐃⲆⵠⲆᐃⲆⵠ: "img/night-reidite-sword.png",
    ⲆᐃᐃⲆᐃⵠΔ: "img/inv-reidite-sword-out.png",
    ⲆⲆΔᐃᐃⵠⵠ: "img/inv-reidite-sword-in.png",
    ⲆⲆᐃⵠⲆᐃⵠ: "img/inv-reidite-sword-click.png",
    ΔΔⲆΔΔΔΔ: "img/inv-reidite-out.png",
    ΔᐃⲆⵠⲆΔⲆ: "img/inv-reidite-in.png",
    ᐃᐃᐃΔⲆⵠⲆ: "img/inv-reidite-click.png",
    ⲆΔᐃⲆᐃᐃⲆ: "img/inv-flame-out.png",
    ΔⵠᐃᐃⲆΔⵠ: "img/inv-flame-in.png",
    ᐃΔΔᐃΔᐃΔ: "img/inv-flame-click.png",
    ᐃⲆⲆⵠΔᐃⵠ: "img/day-magma-buble0.png",
    ᐃⵠΔΔΔⵠΔ: "img/night-magma-buble0.png",
    ⲆΔⲆᐃⲆΔⲆ: "img/day-magma-buble1.png",
    ⲆⵠⵠΔⲆⵠⲆ: "img/night-magma-buble1.png",
    ⲆᐃⲆΔᐃᐃⲆ: "img/day-magma-buble2.png",
    ΔⵠⵠΔΔⵠⵠ: "img/night-magma-buble2.png",
    ᐃΔⲆⲆΔᐃΔ: "img/day-lava-dragon.png",
    ⲆⲆᐃⵠΔᐃⵠ: "img/night-lava-dragon.png",
    ⵠⵠᐃΔⲆⲆⵠⵠⲆ: "img/day-fire-dragon.png",
    ⲆΔᐃⲆⵠᐃⵠⲆᐃ: "img/night-fire-dragon.png",
    Δᐃⵠⵠⵠⵠᐃ: "img/hurt-lava-dragon.png",
    ᐃΔⲆⲆⵠΔⵠ: "img/day-lava-wing-left.png",
    ΔⵠΔᐃΔⵠᐃ: "img/night-lava-wing-left.png",
    ΔᐃΔΔⵠⵠⵠ: "img/day-lava-wing-right.png",
    ᐃΔᐃᐃⲆΔⲆ: "img/night-lava-wing-right.png",
    ⵠⲆⲆᐃⵠⲆⲆ: "img/hurt-lava-wing-left.png",
    ΔΔⲆⵠⵠᐃᐃ: "img/hurt-lava-wing-right.png",
    ΔᐃⵠⲆᐃᐃⵠ: "img/day-reidite-spear.png",
    ΔΔⲆᐃⵠⵠⵠ: "img/night-reidite-spear.png",
    ᐃⵠⲆⵠΔᐃᐃ: "img/inv-reidite-spear-out.png",
    ΔⲆᐃⲆΔᐃᐃ: "img/inv-reidite-spear-in.png",
    ᐃᐃⵠⲆᐃⵠΔ: "img/inv-reidite-spear-click.png",
    ΔⵠⲆᐃᐃΔⵠ: "img/day-reidite-helmet.png",
    ΔⲆⵠⲆΔᐃᐃ: "img/night-reidite-helmet.png",
    ⲆⲆⲆᐃⵠᐃⲆ: "img/inv-reidite-helmet-out.png",
    ᐃⲆᐃᐃΔⵠⲆ: "img/inv-reidite-helmet-in.png",
    ⲆΔΔᐃⲆᐃΔ: "img/inv-reidite-helmet-click.png",
    ΔΔΔⲆᐃᐃᐃ: "img/day-hand-reidite-protection.png",
    ᐃᐃⲆᐃⵠⲆᐃ: "img/night-hand-reidite-protection.png",
    ᐃⵠΔᐃⵠⵠΔ: "img/day-reidite-protection.png",
    ⲆᐃⵠⲆᐃⲆⲆ: "img/night-reidite-protection.png",
    ΔⲆⲆΔᐃᐃⵠ: "img/inv-reidite-protection-out.png",
    ᐃⲆᐃⲆⵠΔⲆ: "img/inv-reidite-protection-in.png",
    ΔⲆΔᐃΔΔΔ: "img/inv-reidite-protection-click.png",
    ⵠᐃᐃΔⲆⵠΔ: "img/day-lava-dragon-sword.png",
    ΔⵠᐃΔᐃᐃᐃ: "img/night-lava-dragon-sword.png",
    ΔᐃΔⲆΔⲆᐃ: "img/inv-lava-dragon-sword-out.png",
    ΔⵠⲆΔΔⲆⵠ: "img/inv-lava-dragon-sword-in.png",
    ΔΔⵠᐃΔⵠᐃ: "img/inv-lava-dragon-sword-click.png",
    ⲆⲆⲆⲆⵠⲆᐃ: "img/day-lava-spear.png",
    ᐃΔⵠⲆΔᐃᐃ: "img/night-lava-spear.png",
    ⵠΔⵠᐃⵠⵠᐃ: "img/inv-lava-spear-out.png",
    ΔⵠⵠᐃⵠⵠΔ: "img/inv-lava-spear-in.png",
    ᐃΔᐃΔᐃΔᐃ: "img/inv-lava-spear-click.png",
    ᐃⵠΔⵠΔⵠⲆ: "img/day-lava-helmet.png",
    ⵠⲆΔⲆⲆᐃᐃ: "img/night-lava-helmet.png",
    ⵠⵠⵠⲆΔⵠⲆ: "img/inv-lava-helmet-out.png",
    ⵠⵠᐃΔⵠⲆⲆ: "img/inv-lava-helmet-in.png",
    ⲆⲆⵠᐃᐃΔᐃ: "img/inv-lava-helmet-click.png",
    ⵠᐃⲆⵠⵠΔΔ: "img/day-witch-hat.png",
    ⲆⲆᐃᐃᐃΔΔ: "img/night-witch-hat.png",
    ΔⲆⲆᐃⲆΔⲆ: "img/inv-witch-hat-out.png",
    ᐃⵠⲆⵠⲆᐃⲆ: "img/inv-witch-hat-in.png",
    ᐃⲆΔⲆⵠⲆⲆ: "img/inv-witch-hat-click.png",
    ⲆᐃΔᐃᐃⵠⲆ: "img/day-nimbus2000.png",
    ⲆⵠΔᐃⲆⵠΔ: "img/night-nimbus2000.png",
    ᐃΔᐃⵠᐃⲆⵠ: "img/inv-nimbus2000-out.png",
    ⲆⵠⲆΔⲆⵠᐃ: "img/inv-nimbus2000-in.png",
    ⵠΔⵠᐃΔⵠⲆ: "img/inv-nimbus2000-click.png",
    ⲆᐃᐃᐃⲆⲆⵠ: "img/day-accessory1-pacques.png",
    ⲆᐃᐃᐃⲆᐃⵠ: "img/night-accessory1-pacques.png",
    ⵠΔᐃᐃⲆΔⵠ: "img/day-accessory2-pacques.png",
    ΔᐃⵠΔⵠⵠΔ: "img/night-accessory2-pacques.png",
    ⵠⵠⵠⲆᐃΔⵠ: "img/day-accessory3-pacques.png",
    ⵠΔⵠⵠᐃᐃᐃ: "img/night-accessory3-pacques.png",
    ⲆⵠᐃᐃⲆᐃΔ: "img/day-accessory5-pacques.png",
    ΔᐃⲆᐃᐃΔΔ: "img/night-accessory5-pacques.png",
    ⵠᐃⵠⵠᐃΔⲆ: "img/day-accessory6-pacques.png",
    ⵠⵠΔⵠᐃⲆⲆ: "img/night-accessory6-pacques.png",
    ⵠⲆⲆΔᐃᐃΔ: "img/day-accessory7-pacques.png",
    ᐃⲆΔⵠⲆⵠΔ: "img/night-accessory7-pacques.png",
    ᐃΔⵠⵠⲆⵠⵠ: "img/day-accessory8-pacques.png",
    ᐃᐃⵠⵠⵠΔᐃ: "img/night-accessory8-pacques.png",
    ⲆⲆⲆⵠⵠΔᐃ: "img/day-bag-pacques.png",
    ⲆⵠΔⲆᐃⲆᐃ: "img/night-bag-pacques.png",
    ⵠⵠⵠᐃᐃⵠⲆ: "img/day-carrot.png",
    ⲆⲆΔΔᐃᐃΔ: "img/night-carrot.png",
    ΔΔΔΔⲆⲆⲆ: "img/day-carrot-dried.png",
    ᐃⵠⲆⲆᐃⲆᐃ: "img/night-carrot-dried.png",
    ᐃⲆⲆⲆᐃᐃΔ: "img/day-tomato-herb.png",
    ⲆⵠⵠΔⵠⵠⲆ: "img/night-tomato-herb.png",
    ⲆΔᐃᐃΔⵠⲆ: "img/day-tomato-herb-dried.png",
    ⲆΔᐃΔᐃⲆⲆ: "img/night-tomato-herb-dried.png",
    ᐃᐃΔΔⲆⵠⵠ: "img/day-tomato.png",
    ΔⲆⵠΔΔⵠᐃ: "img/night-tomato.png",
    ΔΔⵠⲆᐃᐃᐃ: "img/inv-carrot-out.png",
    ᐃᐃⵠⵠⲆⲆⲆ: "img/inv-carrot-in.png",
    ⵠᐃΔΔⲆⲆΔ: "img/inv-carrot-click.png",
    ΔᐃⵠᐃΔᐃᐃ: "img/inv-tomato-out.png",
    ⵠᐃⲆΔⵠᐃΔ: "img/inv-tomato-in.png",
    ΔⵠⲆΔᐃⵠᐃ: "img/inv-tomato-click.png",
    ᐃΔⵠᐃⵠΔΔ: "img/day-player0.png",
    ᐃΔΔⲆⲆⲆΔ: "img/night-player0.png",
    ⲆⲆᐃΔⲆᐃⲆ: "img/day-player1.png",
    ⲆⵠⵠⵠΔⵠⲆ: "img/night-player1.png",
    ⲆΔᐃᐃⲆⲆᐃ: "img/day-player2.png",
    ⲆⲆⲆᐃⲆⵠΔ: "img/night-player22.png",
    ΔⵠⲆⵠΔⵠⵠ: "img/day-player3.png",
    ΔⲆⵠΔᐃᐃΔ: "img/night-player33.png",
    ⲆⵠᐃⲆΔᐃΔ: "img/day-player4.png",
    ΔⲆᐃᐃᐃᐃᐃ: "img/night-player4.png",
    ⲆΔⲆⲆⲆⲆⲆ: "img/day-player5.png",
    ⵠⲆΔⲆᐃⵠΔ: "img/night-player5.png",
    ΔⵠᐃⲆⵠⲆⵠ: "img/day-player6.png",
    ᐃᐃᐃⵠⲆᐃΔ: "img/night-player6.png",
    ⲆΔΔⵠⵠᐃⵠ: "img/day-player7.png",
    ᐃⲆⲆⲆΔⲆᐃ: "img/night-player7.png",
    ΔⲆᐃⵠΔⵠᐃ: "img/day-player8.png",
    ΔⲆᐃᐃⲆⵠᐃ: "img/night-player8.png",
    ᐃᐃⵠⲆΔᐃΔ: "img/day-player9.png",
    ⵠΔⵠⲆΔⵠⲆ: "img/night-player9.png",
    ᐃⵠⵠΔⵠⲆᐃ: "img/day-player10.png",
    ᐃⲆⲆⵠᐃᐃᐃ: "img/night-player10.png",
    ᐃⵠᐃⲆⲆⲆⵠ: "img/day-player11.png",
    ΔᐃⵠᐃΔⵠΔ: "img/night-player11.png",
    ΔᐃΔᐃΔΔⲆ: "img/day-player12.png",
    ⵠᐃΔᐃᐃⲆᐃ: "img/night-player12.png",
    ΔΔⵠᐃᐃⲆΔ: "img/day-player13.png",
    ΔⵠᐃⵠΔᐃᐃ: "img/night-player13.png",
    ΔΔⲆⲆΔⲆⵠ: "img/day-player14.png",
    ⲆⵠᐃΔⲆΔⲆ: "img/night-player14.png",
    ⵠⲆⲆⵠᐃⵠᐃ: "img/day-player15.png",
    ᐃᐃΔᐃⲆⲆⲆ: "img/night-player15.png",
    ⲆΔᐃᐃⵠᐃⲆ: "img/day-player16.png",
    ΔᐃⲆᐃⵠⵠⲆ: "img/night-player16.png",
    ⵠΔΔⵠⲆᐃᐃ: "img/day-player17.png",
    ΔΔΔΔⲆⵠᐃ: "img/night-player17.png",
    ΔΔΔⵠᐃⲆΔ: "img/day-player18.png",
    ΔⲆᐃⲆⵠΔⲆ: "img/night-player18.png",
    ⵠⵠΔⲆⲆᐃⵠ: "img/day-player19.png",
    ⲆⵠᐃΔΔΔΔ: "img/night-player19.png",
    ΔⲆᐃΔΔΔⵠ: "img/day-hand-player0.png",
    ⵠⵠΔⲆⵠᐃΔ: "img/night-hand-player0.png",
    ᐃΔⵠᐃⲆⵠⲆ: "img/day-hand-player1.png",
    ⵠΔⲆΔⲆᐃⵠ: "img/night-hand-player1.png",
    ⲆΔⵠᐃΔᐃᐃ: "img/day-hand-player2.png",
    ⵠᐃⵠⲆⲆⲆΔ: "img/night-hand-player22.png",
    ⲆᐃⲆⵠⲆΔⲆ: "img/day-hand-player3.png",
    ᐃᐃΔⵠⵠⲆⲆ: "img/night-hand-player33.png",
    ⵠᐃᐃⵠΔΔⲆ: "img/day-hand-player4.png",
    ᐃⵠΔⵠⵠᐃΔ: "img/night-hand-player4.png",
    ΔΔᐃⲆⵠᐃΔ: "img/day-hand-player5.png",
    ᐃⵠᐃᐃᐃᐃᐃ: "img/night-hand-player5.png",
    ⲆⲆⵠΔⲆⵠⲆ: "img/day-hand-player6.png",
    ⵠⵠΔΔΔⵠⲆ: "img/night-hand-player6.png",
    ⵠΔᐃⲆⲆⲆΔ: "img/day-hand-player7.png",
    ᐃᐃᐃΔΔⲆⵠ: "img/night-hand-player7.png",
    ⲆᐃⲆⵠΔⲆᐃ: "img/day-hand-player8.png",
    ᐃᐃᐃⵠⲆᐃⵠ: "img/night-hand-player8.png",
    ΔⵠⵠⵠᐃⲆⲆ: "img/day-hand-player9.png",
    ⲆΔⵠⵠⵠⲆᐃ: "img/night-hand-player9.png",
    ᐃΔΔᐃΔᐃⲆ: "img/day-hand-player10.png",
    ⲆᐃᐃΔᐃⲆΔ: "img/night-hand-player10.png",
    ⵠᐃⲆᐃⵠⵠΔ: "img/day-hand-player11.png",
    ΔⵠΔⲆⵠⵠⵠ: "img/night-hand-player11.png",
    ᐃⲆⵠΔⲆⵠⵠ: "img/day-hand-player12.png",
    ΔⵠᐃᐃΔⵠⲆ: "img/night-hand-player12.png",
    ⵠⲆⵠΔⵠΔΔ: "img/day-hand-player13.png",
    ΔΔᐃⵠⲆᐃⵠ: "img/night-hand-player13.png",
    ⵠΔⵠᐃΔΔΔ: "img/day-hand-player14.png",
    ΔⲆᐃⲆⵠᐃΔ: "img/night-hand-player14.png",
    ⵠⵠΔⵠⲆΔⵠ: "img/day-hand-player15.png",
    ᐃⵠⵠᐃΔⲆᐃ: "img/night-hand-player15.png",
    ⲆⵠᐃᐃΔⵠΔ: "img/day-hand-player16.png",
    ⵠⵠΔⲆⲆᐃᐃ: "img/night-hand-player16.png",
    ⵠΔΔⵠΔⵠΔ: "img/day-hand-player17.png",
    ᐃᐃΔⲆΔᐃⵠ: "img/night-hand-player17.png",
    ⲆⵠⵠΔᐃⲆᐃ: "img/day-hand-player18.png",
    ⲆⲆⵠⲆΔΔΔ: "img/night-hand-player18.png",
    ⵠΔⵠⲆᐃⵠⲆ: "img/day-hand-player19.png",
    ΔⲆⵠⵠⵠᐃᐃ: "img/night-hand-player19.png",
    ᐃⲆⲆⲆᐃⵠᐃ: "img/day-accessory4.png",
    ⵠᐃΔΔΔⲆᐃ: "img/night-accessory4.png",
    ΔΔΔⵠⲆᐃⲆ: "img/day-accessory9.png",
    ΔⵠᐃΔᐃⵠΔ: "img/night-accessory9.png",
    ⲆⲆΔᐃΔⵠᐃ: "img/day-accessory10.png",
    ΔⲆΔΔⵠΔᐃ: "img/night-accessory10.png",
    ᐃΔⵠᐃⵠⲆᐃ: "img/day-accessory11.png",
    ΔⲆΔΔᐃΔΔ: "img/night-accessory11.png",
    ΔΔᐃⵠΔΔⲆ: "img/day-accessory12.png",
    ΔΔⲆΔᐃⲆⲆ: "img/night-accessory12.png",
    ⵠⵠⲆΔᐃⲆΔ: "img/day-bag.png",
    ⵠΔⵠⵠᐃΔⲆ: "img/night-bag.png",
    Δᐃᐃⵠᐃᐃᐃ: "img/inv-bag-out.png",
    ΔΔⲆⵠⲆᐃᐃ: "img/inv-bag-in.png",
    ⵠΔΔΔᐃᐃⵠ: "img/inv-bag-click.png",
    ⵠⲆⲆΔⲆⲆⵠ: "img/day-pitchfork.png",
    ᐃᐃΔᐃᐃΔⲆ: "img/night-pitchfork.png",
    ⵠΔⲆⲆⵠΔⵠ: "img/inv-pitchfork-out.png",
    ᐃⵠⲆⵠΔⵠΔ: "img/inv-pitchfork-in.png",
    ΔΔΔᐃᐃΔᐃ: "img/inv-pitchfork-click.png",
    ΔᐃᐃᐃⲆⲆⵠ: "img/inv-wood-spike-door-out.png",
    ⲆΔᐃΔⵠᐃᐃ: "img/inv-wood-spike-door-in.png",
    ᐃᐃⲆΔᐃΔᐃ: "img/inv-wood-spike-door-click.png",
    ᐃⵠΔᐃᐃⵠⵠ: "img/inv-stone-spike-door-out.png",
    ΔΔⲆᐃⵠⵠⲆ: "img/inv-stone-spike-door-in.png",
    ᐃⲆΔⲆᐃᐃᐃ: "img/inv-stone-spike-door-click.png",
    ᐃⲆᐃᐃⲆᐃΔ: "img/inv-gold-spike-door-out.png",
    ΔⲆⵠᐃⵠᐃΔ: "img/inv-gold-spike-door-in.png",
    ΔᐃⲆⵠⲆⲆⲆ: "img/inv-gold-spike-door-click.png",
    ᐃΔⲆⲆⵠⲆⵠ: "img/inv-diamond-spike-door-out.png",
    ⲆᐃⵠᐃⲆⵠⲆ: "img/inv-diamond-spike-door-in.png",
    ᐃⵠⵠⵠⲆᐃⲆ: "img/inv-diamond-spike-door-click.png",
    ΔⲆⲆⵠΔⲆᐃ: "img/inv-amethyst-spike-door-out.png",
    ᐃⲆⵠⵠΔⲆᐃ: "img/inv-amethyst-spike-door-in.png",
    ᐃⵠⵠⵠΔⲆᐃ: "img/inv-amethyst-spike-door-click.png",
    ΔⵠᐃⲆᐃᐃⲆ: "img/day-wood-spike-door.png",
    ⵠⵠᐃⵠⵠⲆⲆ: "img/night-wood-spike-door.png",
    ᐃΔⲆⵠΔⲆᐃ: "img/day-stone-spike-door.png",
    ⵠⲆᐃⵠⲆⲆⵠ: "img/night-stone-spike-door.png",
    ΔᐃⵠⲆΔᐃⲆ: "img/day-gold-spike-door.png",
    ⵠⲆⲆⵠⵠᐃⲆ: "img/night-gold-spike-door.png",
    ⲆΔᐃΔΔΔⲆ: "img/day-diamond-spike-door.png",
    ⲆΔⲆΔΔᐃᐃ: "img/night-diamond-spike-door.png",
    ⲆᐃⲆΔᐃΔⵠ: "img/day-amethyst-spike-door.png",
    ⲆⵠⵠᐃⲆⵠΔ: "img/night-amethyst-spike-door.png",
    ⵠⲆΔⵠⵠⵠᐃ: "img/inv-reidite-spike-door-out.png",
    ⲆⲆᐃΔΔᐃⵠ: "img/inv-reidite-spike-door-in.png",
    ⵠΔⲆΔᐃᐃⵠ: "img/inv-reidite-spike-door-click.png",
    ΔΔⵠΔΔⲆⲆ: "img/inv-reidite-door-out.png",
    ⵠⵠΔⲆⵠΔⲆ: "img/inv-reidite-door-in.png",
    ⲆⲆⲆᐃᐃᐃᐃ: "img/inv-reidite-door-click.png",
    ΔⵠⲆᐃΔⵠΔ: "img/inv-reidite-spike-out.png",
    ⵠΔΔⲆᐃⲆΔ: "img/inv-reidite-spike-in.png",
    ᐃⲆᐃᐃⵠΔΔ: "img/inv-reidite-spike-click.png",
    ⵠⵠⲆΔⵠⲆⵠ: "img/inv-reidite-wall-out.png",
    ⵠⲆⵠⵠⲆⲆᐃ: "img/inv-reidite-wall-in.png",
    ⲆⲆⲆⲆⲆⲆⲆ: "img/inv-reidite-wall-click.png",
    ⲆⲆⲆⵠⵠΔⲆ: "img/day-reidite-wall.png",
    ⵠⵠⲆⵠᐃⵠΔ: "img/night-reidite-wall.png",
    ᐃⵠᐃᐃⵠᐃᐃ: "img/day-reidite-door.png",
    ᐃⵠⵠᐃᐃⵠᐃ: "img/night-reidite-door.png",
    ⵠⵠⲆᐃⵠΔᐃ: "img/day-reidite-spike.png",
    ⵠⲆⵠⵠΔΔᐃ: "img/night-reidite-spike.png",
    ᐃᐃΔⲆᐃⲆⲆ: "img/day-reidite-spike-door.png",
    ⵠⵠᐃⲆᐃⵠΔ: "img/night-reidite-spike-door.png",
    ᐃΔΔⵠᐃᐃⲆ: "img/inv-reidite-pickaxe-out.png",
    ⲆⵠΔᐃⵠᐃⵠ: "img/inv-reidite-pickaxe-in.png",
    ⵠΔⲆΔᐃⵠᐃ: "img/inv-reidite-pickaxe-click.png",
    ᐃⵠΔⵠⵠΔⲆ: "img/day-reidite-pickaxe.png",
    ⵠⲆⵠⲆᐃΔⲆ: "img/night-reidite-pickaxe.png",
    ᐃⲆⵠΔⲆᐃⵠ: "img/inv-reidite-hammer-out.png",
    ⲆⲆᐃⵠⵠⵠⲆ: "img/inv-reidite-hammer-in.png",
    ᐃᐃⲆᐃⲆᐃⵠ: "img/inv-reidite-hammer-click.png",
    ⵠⲆᐃⲆΔⵠⵠ: "img/day-reidite-hammer.png",
    ⲆⵠⲆΔⵠΔᐃ: "img/night-reidite-hammer.png",
    ΔᐃΔⵠⲆΔΔ: "img/day-watermelon1.png",
    ⵠᐃⵠᐃⵠⲆΔ: "img/night-watermelon1.png",
    ⵠΔⲆⲆᐃⵠⲆ: "img/day-watermelon-dried1.png",
    ᐃᐃΔⵠᐃΔᐃ: "img/night-watermelon-dried1.png",
    ⲆᐃⲆⵠᐃΔⵠ: "img/inv-watermelon-out.png",
    ΔΔΔΔⲆᐃΔ: "img/inv-watermelon-in.png",
    ⵠⲆΔΔⵠΔⲆ: "img/inv-watermelon-click.png",
    ⲆⲆⲆⲆⵠⵠᐃ: "img/day-boat.png",
    ⵠⲆⵠᐃᐃᐃⵠ: "img/night-boat.png",
    ΔⲆⵠⲆᐃⵠⲆ: "img/day-boat-wave.png",
    ΔⲆΔⲆΔᐃΔ: "img/night-boat-wave.png",
    ΔᐃΔᐃⲆΔⲆ: "img/inv-boat-out.png",
    ⲆⲆΔⵠⵠΔⵠ: "img/inv-boat-in.png",
    ΔⵠᐃⲆᐃᐃⵠ: "img/inv-boat-click.png",
    ⲆΔΔᐃᐃΔⲆ: "img/day-plane.png",
    ⵠⵠⵠⵠᐃⲆᐃ: "img/night-plane.png",
    ᐃⵠᐃᐃⲆᐃⲆ: "img/inv-plane-out.png",
    ⵠΔΔⵠⵠⵠⲆ: "img/inv-plane-in.png",
    ⵠᐃᐃΔΔᐃⲆ: "img/inv-plane-click.png",
    ΔᐃⵠⵠⲆⵠⵠ: "img/day-sled.png",
    ᐃⲆᐃⲆⵠⲆᐃ: "img/night-sled.png",
    ΔᐃⲆᐃᐃⲆⲆ: "img/day-sled-wave.png",
    ⲆⵠΔⲆᐃⵠⵠ: "img/night-sled-wave.png",
    Ⲇⵠᐃⵠᐃᐃᐃ: "img/inv-sled-out.png",
    Ⲇⵠᐃⵠᐃⵠᐃ: "img/inv-sled-in.png",
    ᐃⵠⵠⵠᐃⲆⲆ: "img/inv-sled-click.png",
    ΔⲆᐃⲆΔⵠⲆ: "img/day-pirate-hat.png",
    ᐃᐃⲆⵠΔΔⵠ: "img/night-pirate-hat.png",
    ΔⵠⵠΔΔᐃᐃ: "img/inv-pirate-hat-out.png",
    ⲆᐃΔⵠΔᐃΔ: "img/inv-pirate-hat-in.png",
    ⲆⵠᐃᐃΔⵠⵠ: "img/inv-pirate-hat-click.png",
    ΔⵠⲆⲆΔⲆⲆ: "img/day-penguin.png",
    ⵠⲆᐃⵠᐃⵠᐃ: "img/night-penguin.png",
    ⵠⲆⵠᐃⵠΔⵠ: "img/hurt-penguin.png",
    ΔᐃΔⲆΔ: "img/inv-penguin-feather-click.png",
    ᐃΔΔⲆᐃ: "img/inv-hawk-feather-click.png",
    ⲆᐃΔΔⵠΔΔ: "img/day-boar1.png",
    ᐃᐃⲆΔᐃΔⲆ: "img/day-boar1-tamed.png",
    ᐃᐃⵠⲆⵠᐃⵠ: "img/day-boar1-angry.png",
    ΔΔᐃⲆΔⲆΔ: "img/night-boar1.png",
    ΔⵠⵠⵠΔᐃᐃ: "img/night-boar1-tamed.png",
    ⲆΔᐃᐃΔⲆⵠ: "img/night-boar1-angry.png",
    ⵠΔᐃᐃΔⵠΔ: "img/inv-mount-boar-out.png",
    ⲆᐃⲆΔΔⵠⲆ: "img/inv-mount-boar-in.png",
    ΔΔΔⵠᐃᐃⵠ: "img/inv-mount-boar-click.png",
    ΔⵠΔⲆᐃⲆⲆ: "img/day-hurt-boar1.png",
    ᐃΔⲆΔⲆΔΔ: "img/boar1-step.png",
    ⲆᐃᐃᐃΔᐃⵠ: "img/day-saddle1.png",
    ΔᐃᐃⵠⲆⵠⲆ: "img/night-saddle1.png",
    ⵠⵠⲆⲆΔⲆⲆ: "img/inv-saddle-out.png",
    ᐃⵠⲆΔⵠⵠᐃ: "img/inv-saddle-in.png",
    ΔⲆΔⵠⲆΔⵠ: "img/inv-saddle-click.png",
    ᐃΔⵠΔⲆᐃⵠ: "img/day-magic-wand0.png",
    ΔⵠⲆⵠᐃΔⲆ: "img/night-magic-wand0.png",
    ΔᐃᐃⵠΔⵠⲆ: "img/day-light-wand1.png",
    ᐃᐃⲆᐃⵠᐃᐃ: "img/night-light-wand1.png",
    ⲆΔᐃⲆⲆᐃⵠ: "img/inv-magic-wand0-out.png",
    ΔⵠⵠⵠΔⲆⵠ: "img/inv-magic-wand0-in.png",
    ⵠⲆΔᐃΔᐃΔ: "img/inv-magic-wand0-click.png",
    ΔⵠᐃⵠΔΔⲆ: "img/day-magic-wand1.png",
    ΔΔᐃⵠΔᐃⲆ: "img/night-magic-wand1.png",
    ᐃΔΔⵠⵠΔⲆ: "img/day-light-wand0.png",
    ᐃΔΔΔΔⵠΔ: "img/night-light-wand0.png",
    ⵠⲆᐃⵠⵠᐃⲆ: "img/inv-magic-wand1-out.png",
    ⲆⵠⵠⵠⲆⲆⵠ: "img/inv-magic-wand1-in.png",
    ΔⲆᐃΔᐃⲆⲆ: "img/inv-magic-wand1-click.png",
    ⵠᐃᐃⲆⲆⵠΔ: "img/day-firefly.png",
    ⲆΔΔΔⲆᐃⲆ: "img/night-firefly.png",
    ⵠⲆᐃᐃΔΔⵠ: "img/hurt-firefly.png",
    ⵠᐃⲆᐃᐃΔⵠ: "img/inv-firefly-out.png",
    ΔᐃᐃⵠⵠᐃⲆ: "img/inv-firefly-in.png",
    ᐃⲆⵠⵠⲆΔⲆ: "img/inv-firefly-click.png",
    ⵠⵠᐃᐃΔΔⵠ: "img/day-baby-dragon.png",
    ᐃᐃⲆⵠᐃᐃⵠ: "img/night-baby-dragon.png",
    ΔⲆⵠᐃΔΔΔ: "img/day-baby-dragon-angry.png",
    ⵠⲆⲆⲆⵠⲆΔ: "img/night-baby-dragon-angry.png",
    ⲆⵠⵠⲆΔᐃⵠ: "img/day-baby-dragon-tamed.png",
    ᐃᐃΔⵠⲆΔⲆ: "img/night-baby-dragon-tamed.png",
    ⲆΔⵠⲆⲆⵠⲆ: "img/day-wing-dragon-left-angry.png",
    ⵠⲆⲆⲆⲆΔⵠ: "img/night-dragon-wing-left-angry.png",
    ⲆⲆⲆΔⲆⲆᐃ: "img/day-wing-dragon-right-angry.png",
    ΔΔΔᐃᐃⵠⵠ: "img/night-dragon-wing-right-angry.png",
    ΔᐃⵠΔᐃⵠΔ: "img/day-wing-dragon-left-tamed.png",
    ⵠⵠΔΔⵠᐃΔ: "img/night-dragon-wing-left-tamed.png",
    ΔᐃⲆⲆⵠΔᐃ: "img/day-wing-dragon-right-tamed.png",
    ᐃΔΔⲆⲆⵠᐃ: "img/night-wing-dragon-right-tamed.png",
    ΔᐃⵠΔΔᐃᐃ: "img/day-wing-dragon-left.png",
    ⲆⵠΔⲆⵠΔⲆ: "img/night-dragon-wing-left.png",
    ΔⵠⲆⲆΔΔᐃ: "img/day-wing-dragon-right.png",
    ⲆⵠⵠⵠᐃⵠΔ: "img/night-wing-dragon-right.png",
    ΔⵠⲆⲆⲆⲆⲆ: "img/hurt-baby-dragon.png",
    ΔⲆΔΔᐃⲆᐃ: "img/hurt-baby-dragon-wing-left.png",
    ⲆΔΔⵠᐃᐃⲆ: "img/hurt-baby-dragon-wing-right.png",
    ᐃᐃⲆⵠΔᐃΔ: "img/inv-baby-dragon-out.png",
    ⲆᐃⵠᐃⲆⲆⵠ: "img/inv-baby-dragon-in.png",
    ⲆΔᐃⵠΔⲆⲆ: "img/inv-baby-dragon-click.png",
    ᐃⵠᐃᐃⵠΔⲆ: "img/day-baby-lava.png",
    ΔΔⲆᐃΔΔΔ: "img/night-baby-lava.png",
    ΔⲆⲆΔⲆⵠΔ: "img/day-baby-lava-angry.png",
    ⵠΔⲆⵠⵠⵠⲆ: "img/night-baby-lava-angry.png",
    ᐃⵠᐃΔᐃⲆΔ: "img/day-baby-lava-tamed.png",
    ⲆⲆⲆⵠᐃⵠᐃ: "img/night-baby-lava-tamed.png",
    ΔᐃⲆᐃᐃⵠΔ: "img/day-wing-lava-left-angry.png",
    ⲆᐃΔΔΔᐃᐃ: "img/night-wing-lava-left-angry.png",
    ᐃⵠⵠΔⲆⲆᐃ: "img/day-wing-lava-right-angry.png",
    ⵠⲆⵠⲆⲆᐃⲆ: "img/night-wing-lava-right-angry.png",
    ᐃΔⲆΔᐃⵠᐃ: "img/day-wing-lava-left-tamed.png",
    ⲆⵠⲆⲆⲆᐃᐃ: "img/night-wing-lava-left-tamed.png",
    ⲆⲆᐃᐃⵠⵠΔ: "img/day-wing-lava-right-tamed.png",
    ⵠⵠⲆᐃΔⲆᐃ: "img/night-wing-lava-right-tamed.png",
    ⵠΔⵠΔⲆΔΔ: "img/day-wing-lava-left.png",
    ΔⵠⵠⵠᐃⵠΔ: "img/night-wing-lava-left.png",
    ⵠΔⲆΔᐃⵠⲆ: "img/day-wing-lava-right.png",
    ᐃⵠᐃΔΔⵠⵠ: "img/night-wing-lava-right.png",
    ΔΔⲆⵠⵠⵠⵠ: "img/hurt-baby-lava.png",
    ⲆⵠⵠⵠΔᐃⲆ: "img/hurt-baby-lava-wing-left.png",
    ΔᐃᐃⲆⲆⲆⵠ: "img/hurt-baby-lava-wing-right.png",
    ΔⵠᐃⵠΔⵠⲆ: "img/inv-baby-lava-out.png",
    ⵠⵠΔᐃᐃⵠΔ: "img/inv-baby-lava-in.png",
    ᐃᐃⵠΔᐃⲆⲆ: "img/inv-baby-lava-click.png",
    ⲆⲆⵠΔⵠᐃΔ: "img/day-falcon.png",
    Ⲇⵠⵠᐃⵠᐃⵠ: "img/night-falcon.png",
    ΔⲆⲆⲆΔⵠⲆ: "img/day-falcon-angry.png",
    ΔΔⲆⲆⵠⲆⵠ: "img/night-falcon-angry.png",
    ⵠⵠⲆⲆᐃⲆⵠ: "img/day-falcon-ground.png",
    ᐃᐃΔⲆΔΔⵠ: "img/night-falcon-ground.png",
    ΔⵠΔΔⵠⵠᐃ: "img/day-falcon-ground-angry.png",
    ᐃΔΔΔᐃⲆΔ: "img/night-falcon-ground-angry.png",
    ᐃᐃΔⵠⲆⵠⵠ: "img/day-falcon-wings-left.png",
    ΔΔᐃΔᐃⲆⲆ: "img/night-falcon-wings-left.png",
    ᐃᐃΔΔᐃⵠᐃ: "img/day-falcon-wings-right.png",
    ᐃΔⲆΔⲆΔⲆ: "img/night-falcon-wings-right.png",
    ⲆΔⵠⲆⲆΔΔ: "img/day-falcon-angry-wings-left.png",
    ΔⵠⵠⵠⵠᐃΔ: "img/night-falcon-angry-wings-left.png",
    ⲆΔΔᐃᐃⵠᐃ: "img/day-falcon-angry-wings-right.png",
    ⵠΔᐃⲆᐃⲆⵠ: "img/night-falcon-angry-wings-right.png",
    ΔⲆⵠΔᐃᐃⵠ: "img/day-falcon-wings-left-tamed.png",
    ⲆΔΔᐃΔⵠⵠ: "img/night-falcon-wings-left-tamed.png",
    ⲆΔᐃⵠᐃᐃΔ: "img/day-falcon-wings-right-tamed.png",
    ⵠΔΔΔᐃⵠⵠ: "img/night-falcon-wings-right-tamed.png",
    ⵠⲆΔⲆΔⲆᐃ: "img/day-falcon-tamed.png",
    ⵠᐃᐃΔΔⲆΔ: "img/night-falcon-tamed.png",
    ᐃⲆⲆⲆᐃᐃᐃ: "img/hurt-falcon-ground.png",
    ΔⵠⲆᐃᐃΔⲆ: "img/hurt-falcon.png",
    ᐃΔⵠⵠᐃⲆⵠ: "img/hurt-falcon-wings-left.png",
    ⲆᐃΔⵠᐃⵠⵠ: "img/hurt-falcon-wings-right.png",
    ᐃⵠⵠⲆⵠⵠⵠ: "img/inv-falcon-out.png",
    ⵠᐃΔⲆᐃⵠΔ: "img/inv-falcon-in.png",
    ⲆᐃⲆΔᐃᐃᐃ: "img/inv-falcon-click.png",
    ΔᐃⲆⲆᐃΔᐃ: "img/day-crab-boss.png",
    ⲆᐃⲆᐃⲆⲆᐃ: "img/night-crab-boss.png",
    ⵠⲆᐃⵠΔⲆⲆ: "img/day-crab-boss-angry.png",
    ᐃⵠⵠᐃⵠⲆⵠ: "img/night-crab-boss-angry.png",
    ΔᐃΔΔⵠᐃΔ: "img/day-crab-boss-tamed.png",
    ᐃⲆⵠᐃⵠᐃᐃ: "img/night-crab-boss-tamed.png",
    ᐃⵠΔᐃΔⵠᐃ: "img/day-crab-boss-claw-left-attack.png",
    ᐃΔⲆΔΔⲆⵠ: "img/night-crab-boss-claw-left-attack.png",
    ΔᐃⵠΔᐃⵠⵠ: "img/day-crab-boss-claw-right-attack.png",
    ΔⲆΔΔⵠⲆᐃ: "img/night-crab-boss-claw-right-attack.png",
    ⵠᐃⵠΔΔᐃᐃΔΔ: "img/day-crab-boss-claw-left-tamed.png",
    ᐃΔᐃⵠᐃⵠΔᐃᐃ: "img/night-crab-boss-claw-left-tamed.png",
    ⵠⲆⵠᐃⲆⵠΔⵠⵠ: "img/day-crab-boss-claw-right-tamed.png",
    ΔⵠᐃⵠΔᐃⵠΔⵠ: "img/night-crab-boss-claw-right-tamed.png",
    ΔΔΔΔΔⵠΔ: "img/day-crab-boss-claw-left.png",
    ⲆᐃⲆᐃⲆⵠΔ: "img/night-crab-boss-claw-left.png",
    ⲆᐃΔⲆⲆΔᐃ: "img/day-crab-boss-claw-right.png",
    ⵠᐃⵠⵠᐃⲆⵠ: "img/night-crab-boss-claw-right.png",
    Ⲇⵠⵠⵠᐃⵠⵠ: "img/hurt-crab-boss.png",
    ᐃΔΔΔⵠΔⲆ: "img/hurt-crab-boss-claw-left.png",
    ΔⵠΔΔⵠⵠⲆ: "img/hurt-crab-boss-claw-right.png",
    ᐃᐃᐃⲆᐃⲆⲆ: "img/heal-crab-boss.png",
    ⵠⲆⲆᐃⵠᐃᐃ: "img/heal-crab-boss-claw-left.png",
    ⲆᐃⲆᐃⵠⵠᐃ: "img/heal-crab-boss-claw-right.png",
    ⲆⵠΔⲆΔⵠⵠ: "img/crab-step.png",
    ΔⵠⲆΔᐃⵠⲆ: "img/inv-crab-boss-out.png",
    ᐃΔΔΔⵠⵠⵠ: "img/inv-crab-boss-in.png",
    ᐃⵠΔⵠᐃⲆᐃ: "img/inv-crab-boss-click.png",
    ⵠΔⵠᐃⲆⵠⵠ: "img/day-cactus10.png",
    ⲆⵠⵠⲆᐃⵠⲆ: "img/night-cactus10.png",
    ⵠⲆⲆⵠⲆⲆᐃ: "img/inv-cactus-out.png",
    ⲆᐃⲆⲆⵠᐃⵠ: "img/inv-cactus-in.png",
    ⲆΔⵠⲆΔᐃᐃ: "img/inv-cactus-click.png",
    ΔⵠΔΔⵠΔⲆ: "img/day-scorpion.png",
    ᐃᐃΔⵠΔⲆⵠ: "img/night-scorpion.png",
    ᐃᐃᐃⵠⵠⲆⲆ: "img/day-scorpion-hand-left.png",
    ⲆΔⲆⲆⵠΔⵠ: "img/night-scorpion-hand-left.png",
    ᐃᐃᐃΔΔΔⵠ: "img/day-scorpion-hand-right.png",
    ⲆΔΔⵠᐃⲆᐃ: "img/night-scorpion-hand-right.png",
    ⵠⵠⲆⲆΔᐃⵠ: "img/hurt-scorpion.png",
    ⲆⵠᐃΔᐃΔΔ: "img/hurt-scorpion-hand-left.png",
    ⲆⲆⲆᐃΔⲆⲆ: "img/hurt-scorpion-hand-right.png",
    ⵠⲆⲆⵠᐃᐃᐃ: "img/day-vulture.png",
    ΔΔᐃᐃᐃⵠΔ: "img/night-vulture.png",
    ⲆⵠᐃⵠᐃⲆⵠ: "img/day-vulture-angry.png",
    ᐃⲆⵠΔᐃⲆΔ: "img/night-vulture-angry.png",
    ΔⵠⲆΔΔⵠΔ: "img/day-vulture-ground.png",
    ⵠΔΔᐃΔᐃΔ: "img/night-vulture-ground.png",
    ⲆⲆⲆⲆⲆⵠⲆ: "img/day-vulture-ground-angry.png",
    ᐃΔᐃⲆⵠⲆᐃ: "img/night-vulture-ground-angry.png",
    ⵠΔⵠⵠⵠΔΔ: "img/day-vulture-wings-left.png",
    ΔΔⲆᐃⵠᐃΔ: "img/night-vulture-wings-left.png",
    ⲆΔⵠⲆⵠᐃᐃ: "img/day-vulture-wings-right.png",
    ⵠΔⵠᐃᐃΔΔ: "img/night-vulture-wings-right.png",
    ⵠⵠΔⲆΔⵠⵠ: "img/day-vulture-angry-wings-left.png",
    ᐃΔᐃΔᐃⲆⲆ: "img/night-vulture-angry-wings-left.png",
    ⲆⵠⵠⲆΔΔᐃ: "img/day-vulture-angry-wings-right.png",
    ΔΔᐃⲆⲆΔΔ: "img/night-vulture-angry-wings-right.png",
    ⲆⲆⵠⲆⵠⲆΔ: "img/day-vulture-wings-left-tamed.png",
    ⲆΔΔⵠᐃⲆⵠ: "img/night-vulture-wings-left-tamed.png",
    ⵠΔⲆΔⲆⲆⵠ: "img/day-vulture-wings-right-tamed.png",
    ᐃΔⵠᐃⲆⲆⲆ: "img/night-vulture-wings-right-tamed.png",
    ΔⲆᐃΔΔⲆⲆ: "img/day-vulture-tamed.png",
    ᐃΔⵠᐃᐃᐃⵠ: "img/night-vulture-tamed.png",
    ⵠⵠᐃⵠⲆⲆᐃ: "img/hurt-vulture-ground.png",
    ΔΔⵠⲆΔΔᐃ: "img/hurt-vulture.png",
    ΔᐃⲆⵠⵠᐃⲆ: "img/hurt-vulture-wings-left.png",
    ⵠᐃⵠᐃΔⲆᐃ: "img/hurt-vulture-wings-right.png",
    ᐃⲆⵠΔΔⲆΔ: "img/day-aloe-vera.png",
    ΔᐃⲆΔⵠᐃⲆ: "img/night-aloe-vera.png",
    ⵠᐃⵠⵠⵠᐃΔ: "img/inv-aloe-vera-out.png",
    ⲆⵠΔΔᐃⲆⵠ: "img/inv-aloe-vera-in.png",
    ⵠᐃⲆⲆⲆⵠᐃ: "img/inv-aloe-vera-click.png",
    ⲆⵠᐃΔⲆΔΔ: "img/day-aloe-vera-grown.png",
    ᐃᐃᐃⵠᐃΔᐃ: "img/night-aloe-vera-grown.png",
    ΔⲆⲆᐃⵠᐃⲆ: "img/day-aloe-vera-dried.png",
    ᐃᐃⲆⲆⵠⲆΔ: "img/night-aloe-vera-dried.png",
    ᐃΔΔⲆⲆⲆⲆ: "img/day-turban1.png",
    ΔᐃⲆΔΔⵠⵠ: "img/night-turban1.png",
    ᐃⵠⲆΔⵠᐃⲆ: "img/day-turban2.png",
    ΔᐃⵠⲆⲆᐃᐃ: "img/night-turban2.png",
    ΔᐃⲆⲆΔᐃⵠ: "img/inv-turban2-out.png",
    ΔΔⵠᐃⵠⲆⵠ: "img/inv-turban2-in.png",
    ⲆΔΔⵠᐃⵠΔ: "img/inv-turban2-click.png",
    ⲆⵠᐃᐃΔⵠⲆ: "img/inv-turban1-out.png",
    ΔΔΔΔΔΔᐃ: "img/inv-turban1-in.png",
    ᐃΔⵠⵠⵠΔⲆ: "img/inv-turban1-click.png",
    ᐃⵠΔⲆⲆΔΔ: "img/day-pitchfork2.png",
    ᐃΔᐃᐃⲆᐃⵠ: "img/night-pitchfork2.png",
    ⵠⵠΔΔΔΔⲆ: "img/inv-pitchfork2-out.png",
    ΔⲆΔⲆⵠΔΔ: "img/inv-pitchfork2-in.png",
    ⵠΔᐃΔⲆΔΔ: "img/inv-pitchfork2-click.png",
    ΔΔⲆⵠᐃΔⲆ: "img/inv-gold-fork-click.png",
    ΔΔⵠⲆᐃΔⵠ: "img/inv-pilot-glasses-click.png",
    ⲆᐃᐃⵠᐃΔⵠ: "img/day-pilot-helmet.png",
    ᐃᐃΔΔΔΔᐃ: "img/night-pilot-helmet.png",
    ⵠΔΔⵠΔΔⲆ: "img/inv-pilot-helmet-out.png",
    ᐃΔᐃᐃΔΔⵠ: "img/inv-pilot-helmet-in.png",
    ᐃΔⲆⵠΔᐃΔ: "img/inv-pilot-helmet-click.png",
    ΔⵠⵠⲆⲆΔⲆⵠΔ: "img/day-sandworm0.png",
    ⵠᐃⵠᐃᐃⲆΔ: "img/day-sandworm1.png",
    ᐃΔⵠⲆᐃⲆⵠ: "img/day-sandworm2.png",
    ΔⵠⵠⵠΔΔΔⲆⵠ: "img/night-sandworm0.png",
    ᐃᐃⲆΔⵠΔᐃ: "img/night-sandworm1.png",
    ⲆΔΔⵠⲆⵠᐃ: "img/night-sandworm2.png",
    ⵠⵠⲆⲆⲆⵠᐃ: "img/hurt-sandworm0.png",
    ΔᐃᐃⲆᐃᐃΔ: "img/hurt-sandworm1.png",
    ᐃⵠⵠⲆⲆΔⲆ: "img/hurt-sandworm2.png",
    ΔⲆΔⵠⵠ: "img/inv-vulture-feather-click.png",
    ⵠᐃᐃⲆᐃⵠⵠ: "img/day-emerald0.png",
    ᐃΔᐃⵠⲆΔⲆ: "img/night-emerald0.png",
    ᐃᐃⲆⵠⵠⵠⵠ: "img/day-emerald1.png",
    ΔΔᐃΔΔⵠⵠ: "img/night-emerald1.png",
    ⲆⵠΔΔᐃᐃᐃ: "img/day-emerald2.png",
    ⵠᐃᐃⲆΔᐃⵠ: "img/night-emerald2.png",
    ᐃΔⲆⲆΔ: "img/inv-emerald-click.png",
    ᐃᐃⲆΔΔΔΔ: "img/inv-sworm-juice-out.png",
    ΔᐃᐃⲆⵠΔⲆ: "img/inv-sworm-juice-in.png",
    ⵠⲆⲆᐃᐃⲆΔ: "img/inv-sworm-juice-click.png",
    ᐃⲆᐃΔΔΔΔ: "img/day-point-machine.png",
    ⵠⵠⵠᐃⵠΔⲆ: "img/night-point-machine.png",
    ⲆΔⲆⵠⲆΔⲆ: "img/day-point-machine-hole.png",
    ⲆΔᐃⲆⲆⲆⲆ: "img/night-point-machine-hole.png",
    ⵠⲆⲆΔᐃⲆᐃ: "img/day-point-machine-ground.png",
    ΔⵠⲆΔⲆᐃᐃ: "img/night-point-machine-ground.png",
    ⲆΔⵠⵠⵠⲆΔ: "img/day-point-machine-rotate.png",
    ΔΔⲆΔΔⲆⵠ: "img/night-point-machine-rotate.png",
    ᐃⵠᐃⲆᐃⵠⲆ: "img/inv-point-machine-out.png",
    ᐃΔⵠⵠΔΔⵠ: "img/inv-point-machine-in.png",
    ΔⲆΔⵠⵠΔΔ: "img/inv-point-machine-click.png",
    ⵠⵠΔⲆΔΔᐃ: "img/day-extractor-machine0-stone.png",
    ⲆⲆⵠᐃΔⵠᐃ: "img/night-extractor-machine0-stone.png",
    ΔΔᐃⲆΔⲆⵠ: "img/day-extractor-machine-stone.png",
    ΔᐃⵠΔⲆⲆΔ: "img/night-extractor-machine-stone.png",
    ⵠΔᐃᐃⲆᐃⲆ: "img/inv-extractor-machine-stone-out.png",
    ⵠᐃⵠΔᐃᐃⲆ: "img/inv-extractor-machine-stone-in.png",
    ⲆⵠΔᐃᐃⲆⵠ: "img/inv-extractor-machine-stone-click.png",
    ΔⲆΔΔⵠᐃⵠ: "img/day-extractor-machine0-gold.png",
    ᐃΔᐃᐃⵠⵠⲆ: "img/night-extractor-machine0-gold.png",
    ΔΔΔⲆᐃⵠᐃ: "img/day-extractor-machine-gold.png",
    ⲆΔⵠᐃΔⲆⵠ: "img/night-extractor-machine-gold.png",
    ⲆⵠᐃⵠⲆⵠⵠ: "img/inv-extractor-machine-gold-out.png",
    ⲆⵠΔⲆⲆⲆΔ: "img/inv-extractor-machine-gold-in.png",
    ⲆΔᐃⵠΔᐃΔ: "img/inv-extractor-machine-gold-click.png",
    ⲆΔⲆᐃᐃΔᐃ: "img/day-extractor-machine0-diamond.png",
    ⲆⵠᐃⵠⲆⵠᐃ: "img/night-extractor-machine0-diamond.png",
    ⲆⵠΔⲆⲆⵠⲆ: "img/day-extractor-machine-diamond.png",
    ΔⲆⵠⵠⲆΔΔ: "img/night-extractor-machine-diamond.png",
    ΔⵠΔⲆⵠᐃⲆ: "img/inv-extractor-machine-diamond-out.png",
    ⲆⵠⲆᐃᐃΔⲆ: "img/inv-extractor-machine-diamond-in.png",
    ΔᐃⲆⲆΔᐃΔ: "img/inv-extractor-machine-diamond-click.png",
    ΔⲆᐃᐃⵠᐃΔ: "img/day-extractor-machine0-amethyst.png",
    ᐃⵠΔᐃᐃΔΔ: "img/night-extractor-machine0-amethyst.png",
    ᐃⵠⲆⲆᐃᐃⲆ: "img/day-extractor-machine-amethyst.png",
    ⵠⵠⲆⲆⲆᐃⲆ: "img/night-extractor-machine-amethyst.png",
    ⲆΔᐃΔΔΔⵠ: "img/inv-extractor-machine-amethyst-out.png",
    ⵠᐃⲆΔⵠⵠᐃ: "img/inv-extractor-machine-amethyst-in.png",
    ᐃΔⵠⵠⲆΔᐃ: "img/inv-extractor-machine-amethyst-click.png",
    ᐃᐃᐃΔᐃⵠᐃ: "img/day-extractor-machine0-reidite.png",
    ⲆⵠⵠᐃΔⵠᐃ: "img/night-extractor-machine0-reidite.png",
    ⵠᐃⲆⵠᐃⵠⲆ: "img/day-extractor-machine-reidite.png",
    ᐃΔᐃᐃⲆⲆΔ: "img/night-extractor-machine-reidite.png",
    ΔⲆᐃᐃⵠⲆⵠ: "img/inv-extractor-machine-reidite-out.png",
    ΔᐃⲆⲆᐃΔⵠ: "img/inv-extractor-machine-reidite-in.png",
    ⲆⵠᐃᐃᐃᐃΔ: "img/inv-extractor-machine-reidite-click.png",
    ⲆΔⲆⲆⲆⲆᐃ: "img/extractor-cases.png",
    ΔᐃΔⵠΔᐃⲆ: "img/day-golden-hen.png",
    ᐃᐃⵠᐃᐃΔⵠ: "img/night-golden-hen.png",
    ΔΔⵠⲆⲆᐃⵠ: "img/day-golden-chicken.png",
    ⵠⵠⵠΔⲆᐃΔ: "img/night-golden-chicken.png",
    ΔᐃⲆⵠⵠΔΔ: "img/hurt-golden-hen.png",
    ᐃⲆⲆΔⵠⵠΔ: "img/hurt-golden-chicken.png",
    ⲆᐃΔᐃᐃⲆⲆ: "img/logo-interface.png",
    ⲆᐃⲆᐃΔⲆΔ: "img/forest-mode-hover.png",
    ⲆⵠⵠᐃᐃⲆⲆ: "img/normal-mode-hover.png",
    ᐃΔⲆⲆᐃΔⲆ: "img/vampire-mode-hover.png",
    ᐃⵠⵠⵠⲆΔⵠ: "img/zombie-mode-hover.png",
    ᐃⵠΔᐃᐃⲆᐃ: "img/community-mode-hover2.png",
    ⲆⲆⵠⲆᐃΔⵠ: "img/experimental-mode-hover.png",
    ΔⲆⲆⵠⵠᐃⲆ: "img/zombie-mode-out.png",
    ⲆᐃⵠΔⲆᐃⲆ: "img/zombie-mode-in.png",
    ΔⵠΔᐃⵠⵠⲆ: "img/zombie-mode-click.png",
    ΔⵠⲆⵠⵠᐃⲆ: "img/vampire-mode-out.png",
    ⵠⵠᐃⵠⵠⵠΔ: "img/vampire-mode-in.png",
    ⲆⲆⵠⲆᐃᐃΔ: "img/vampire-mode-click.png",
    ⲆᐃⲆⲆᐃⲆⲆ: "img/normal-mode-out.png",
    ᐃⵠⵠⲆⲆⲆᐃ: "img/normal-mode-in.png",
    ⲆΔⲆⲆΔⵠᐃ: "img/normal-mode-click.png",
    ⲆⵠΔⵠᐃᐃΔ: "img/forest-mode-out.png",
    ⵠᐃΔⲆⲆⲆᐃ: "img/forest-mode-in.png",
    ⲆᐃⲆⲆΔⵠⵠ: "img/forest-mode-click.png",
    ⵠⲆⲆᐃΔⵠⲆ: "img/community-mode-out.png",
    ᐃⵠΔᐃΔⲆⲆ: "img/community-mode-in.png",
    ⵠΔⵠΔΔⲆΔ: "img/community-mode-click.png",
    ᐃᐃᐃⵠⵠⵠΔ: "img/experimental-modes-out.png",
    ᐃⲆΔⵠⵠᐃⲆ: "img/experimental-modes-in.png",
    ⵠᐃⵠⲆⵠᐃⲆ: "img/experimental-modes-click.png",
    ⲆⵠᐃⲆΔⵠᐃ: "img/youtube-button-out.png",
    Ⲇⵠᐃᐃⵠⵠⵠ: "img/youtube-button-in.png",
    ⲆᐃᐃᐃᐃⲆⵠ: "img/youtube-button-click.png",
    ⲆⵠⲆⵠᐃᐃᐃ: "img/wiki-button-out.png",
    ⲆΔΔⵠΔΔᐃ: "img/wiki-button-in.png",
    ⲆΔⲆΔⲆⵠⵠ: "img/wiki-button-click.png",
    ⵠᐃⵠΔⲆⵠΔ: "img/twitter-button-out.png",
    ᐃⲆⲆᐃΔⲆⵠ: "img/twitter-button-in.png",
    ⵠΔΔᐃⲆΔⲆ: "img/twitter-button-click.png",
    ΔΔⲆⵠᐃⲆᐃ: "img/facebook-button-out.png",
    ⲆⲆⲆⲆⵠᐃΔ: "img/facebook-button-in.png",
    ⵠⲆⵠⵠⲆⵠⲆ: "img/facebook-button-click.png",
    ΔⲆΔΔⵠᐃΔ: "img/reddit-button-out.png",
    ⲆⵠΔⵠᐃⲆⲆ: "img/reddit-button-in.png",
    ⵠᐃⵠⲆΔⲆⲆ: "img/reddit-button-click.png",
    ⵠᐃⵠⵠⵠⲆⵠ: "img/discord-button-out.png",
    ⵠⵠⵠΔⵠΔᐃ: "img/discord-button-in.png",
    ᐃΔΔⲆᐃⲆⲆ: "img/discord-button-click.png",
    ⵠⵠᐃΔᐃΔⵠ: "img/merch-button-out.png",
    ᐃΔᐃΔᐃᐃⲆ: "img/merch-button-in.png",
    ᐃᐃⵠᐃⲆⲆΔ: "img/merch-button-click.png",
    ᐃⲆᐃⵠΔⵠΔᐃΔ: "img/terminal-button-out.png",
    ΔΔⲆΔⵠⵠⲆᐃᐃ: "img/terminal-button-in.png",
    ᐃⵠΔⵠᐃⲆⵠΔⵠ: "img/terminal-button-click.png",
    ⵠᐃΔΔΔᐃᐃ: "img/restart-out.png",
    ⵠΔΔᐃᐃᐃⲆ: "img/restart-in.png",
    ⵠⵠⵠⵠΔᐃⲆ: "img/restart-click.png",
    ᐃⵠⲆⵠⲆⲆᐃ: "img/guide-out.png",
    ⲆⵠⲆΔⵠⵠΔ: "img/guide-in.png",
    ⵠΔⲆⵠⵠⵠⵠ: "img/guide-click.png",
    ⲆΔⵠⲆⲆⵠⵠ: "img/copy-paste-out.png",
    ⲆⵠⵠⵠⲆΔᐃ: "img/copy-paste-in.png",
    ᐃⲆΔⲆⲆⵠⲆ: "img/copy-paste-click.png",
    ⲆᐃᐃⵠΔᐃⵠ: "img/link-buttons-bg.png",
    ᐃⲆᐃⲆⵠᐃΔ: "img/changelog-box2.png",
    ΔⵠⲆᐃᐃⲆⲆ: "img/changelog_31.png",
    ΔᐃᐃⲆⵠΔᐃ: "img/banner-taming.png",
    ΔᐃⵠΔᐃᐃⲆ: "img/profile-button-out.png",
    ΔⵠΔΔⵠᐃⲆ: "img/profile-button-in.png",
    ᐃⵠⲆⲆⵠⲆⲆ: "img/profile-button-click.png",
    ⲆⵠΔΔⲆΔᐃ: "img/login-button-out.png",
    ⵠⵠⲆⵠⲆⵠⵠ: "img/login-button-in.png",
    ᐃᐃⲆⲆⵠᐃⵠ: "img/login-button-click.png",
    ᐃⲆΔΔΔⲆᐃ: "img/login-google-out.png",
    ⲆᐃⲆᐃΔΔⵠ: "img/login-google-in.png",
    ᐃΔᐃᐃΔΔΔ: "img/login-google-click.png",
    ΔⵠⵠᐃⲆᐃᐃ: "img/login-facebook-out.png",
    ᐃⲆᐃᐃΔᐃⵠ: "img/login-facebook-in.png",
    ᐃⲆᐃΔᐃᐃΔ: "img/login-facebook-click.png",
    ᐃΔⲆᐃΔⲆᐃ: "img/account-box.png",
    ΔⵠⲆⲆΔⵠᐃⵠⲆ: "img/account-under-maintenance.png",
    Ⲇⵠᐃⵠᐃᐃⵠ: "img/close-button-account-out.png",
    ᐃⵠⵠΔᐃᐃΔ: "img/close-button-account-in.png",
    ⵠΔΔⲆⲆᐃΔ: "img/close-button-account-click.png",
    ⵠΔⲆⵠⵠᐃⲆ: "img/play-button-out.png",
    ᐃΔⲆᐃⲆᐃⵠ: "img/play-button-in.png",
    ⵠᐃΔⲆᐃᐃⵠ: "img/play-button-click.png",
    ⲆᐃⵠⲆⲆⲆⲆᐃⵠ: "img/app-store-badge.png",
    ΔΔⵠᐃᐃⲆⵠΔΔ: "img/play-store-badge.png",
    ⲆᐃⵠᐃⵠΔⵠᐃᐃ: "img/mobile-boxad.png",
    ΔⵠΔⵠⲆⵠΔ: "img/modify-name-out.png",
    ⵠⵠⵠΔⵠᐃⲆ: "img/modify-name-in.png",
    ΔⵠᐃΔⵠⲆⵠ: "img/modify-name-click.png",
    ⵠᐃⵠⵠΔΔⲆ: "img/copy-id-button-out.png",
    ⲆⵠⲆⵠᐃⵠΔ: "img/copy-id-button-hover.png",
    ⲆᐃⲆΔᐃⵠᐃ: "img/copy-id-button-active.png",
    ⲆΔⲆⵠΔᐃⲆ: "img/yes-button-out.png",
    ᐃⲆⵠⵠⲆⵠΔ: "img/yes-button-in.png",
    ⲆᐃᐃΔᐃᐃᐃ: "img/yes-button-click.png",
    ᐃⵠⵠⲆᐃᐃⵠ: "img/yes-300-button-out.png",
    ⲆⲆⲆᐃᐃΔΔ: "img/yes-300-button-in.png",
    ⲆᐃᐃⵠᐃΔᐃ: "img/yes-300-button-click.png",
    ᐃⵠⲆᐃⵠᐃΔ: "img/no-button-out.png",
    ⲆⵠⵠⵠᐃⵠⲆ: "img/no-button-in.png",
    ⵠⲆΔᐃΔᐃⵠ: "img/no-button-click.png",
    ⲆᐃⲆΔᐃΔΔ: "img/no-thanks-button-out.png",
    ᐃΔΔΔⵠΔⵠ: "img/no-thanks-button-in.png",
    ⲆⲆⵠⲆᐃⲆⲆ: "img/no-thanks-button-click.png",
    ⲆⵠΔⲆΔΔⲆ: "img/shop-button-out.png",
    ᐃΔⲆᐃΔⲆⵠ: "img/shop-button-in.png",
    ⲆΔΔⲆΔⵠΔ: "img/shop-button-click.png",
    ⵠΔΔΔⲆⵠΔ: "img/logout-out.png",
    ΔΔΔⵠᐃⲆⵠ: "img/logout-in.png",
    ⲆᐃⵠⲆⲆᐃⵠ: "img/logout-click.png",
    ⲆⵠᐃⲆⲆᐃΔ: "img/terms-button-out.png",
    ⵠⲆᐃΔᐃⲆΔ: "img/terms-button-in.png",
    ⵠΔⵠᐃΔⲆⲆ: "img/terms-button-click.png",
    ⲆΔᐃⲆⵠΔⲆ: "img/tutorial-icon.png",
    ⵠⵠΔⵠΔΔᐃ: "img/skins-icon.png",
    ᐃⲆⲆⵠᐃⲆⲆ: "img/shop-icon.png",
    ⲆΔⲆᐃΔΔⵠⵠΔ: "img/paint-icon.png",
    ΔⵠᐃⵠⵠⲆⵠ: "img/leaderboard-icon.png",
    ⵠΔⲆΔⲆⵠⲆ: "img/start-icon.png",
    Δᐃⵠᐃᐃᐃᐃ: "img/profile-icon.png",
    ⲆⵠᐃⵠᐃⵠⲆ: "img/server-access-icon2.png",
    ⵠᐃⵠΔᐃⲆⲆ: "img/button-homepage-bg-out.png",
    ᐃⵠΔΔⵠᐃᐃ: "img/button-homepage-bg-in.png",
    ⵠⵠᐃⲆᐃⲆⵠ: "img/button-homepage-bg-click.png",
    ⲆⲆΔᐃΔΔΔ: "img/button-bottom-homepage-bg-out.png",
    ΔⵠΔⲆΔⲆΔ: "img/button-bottom-homepage-bg-in.png",
    ⵠⵠᐃᐃΔⵠΔ: "img/button-bottom-homepage-bg-click.png",
    ΔⲆᐃⲆᐃⲆⲆ: "img/lvl-player.png",
    ⵠⲆⲆⵠⲆΔΔ: "img/avatar-player.png",
    ⲆⵠᐃᐃⵠⲆΔ: "img/avatar-player1.png",
    ⵠⵠⵠᐃᐃⲆⵠ: "img/avatar-player2.png",
    ⲆⲆⵠΔΔᐃΔ: "img/avatar-player3.png",
    ⲆΔΔⲆⲆⵠΔ: "img/avatar-player4.png",
    ⵠⲆⵠΔΔᐃⵠ: "img/avatar-player5.png",
    ΔⲆⵠⲆᐃΔⵠ: "img/avatar-player6.png",
    ⲆⵠⲆⲆⵠᐃⲆ: "img/avatar-player7.png",
    ⵠᐃⲆᐃΔⵠⲆ: "img/avatar-player8.png",
    ⵠΔΔⲆᐃᐃΔ: "img/avatar-player9.png",
    ΔᐃᐃⵠⵠⵠⲆ: "img/avatar-player10.png",
    ⵠⵠΔⲆΔⵠΔ: "img/avatar-player11.png",
    ⵠΔⵠΔΔΔⵠ: "img/avatar-player12.png",
    ⵠᐃΔⲆΔᐃⵠ: "img/avatar-player13.png",
    ΔᐃᐃⲆⵠΔΔ: "img/avatar-player14.png",
    ⲆⵠΔⵠΔⲆΔ: "img/avatar-player14.png",
    ΔᐃᐃⲆᐃΔⵠ: "img/avatar-player14.png",
    ⲆⲆⵠΔⲆΔⵠ: "img/avatar-player14.png",
    ᐃᐃⵠⲆᐃᐃⲆⵠⵠ: "img/golden-bread.png",
    ᐃΔⵠΔΔⲆΔ: "img/buy-bread-out.png",
    ΔⵠΔΔᐃΔΔ: "img/buy-bread-in.png",
    ⲆⲆⵠⲆⲆΔᐃ: "img/buy-bread-click.png",
    ΔⲆΔⲆΔⲆᐃ: "img/gauge.png",
    ⵠⲆⲆΔⵠⲆΔΔⵠ: "img/season-4-out.png",
    ⵠΔΔᐃⲆΔΔΔⲆ: "img/season-4-in.png",
    ᐃⵠΔᐃΔⲆᐃⲆΔ: "img/season-4-click.png",
    ⵠⲆᐃⵠᐃΔⵠⲆⵠ: "img/season4-box.png",
    ᐃΔⲆⵠⵠΔΔΔΔ: "img/season-5-out.png",
    ⲆΔΔᐃⵠⵠⵠΔᐃ: "img/season-5-in.png",
    ᐃⲆⵠⲆΔᐃᐃΔΔ: "img/season-5-click.png",
    ᐃΔᐃⲆⲆⲆᐃⵠᐃ: "img/season5-box.png",
    ΔᐃⲆᐃᐃᐃΔ: "img/season-6-out.png",
    ⵠΔⵠΔⲆᐃⵠ: "img/season-6-in.png",
    ⲆⵠΔΔⵠᐃᐃ: "img/season-6-click.png",
    ⵠⲆᐃⲆᐃⲆⵠ: "img/season6-box.png",
    ⵠⲆᐃΔΔΔᐃ: "img/profile3-box.png",
    ΔᐃⲆⵠΔᐃⲆ: "img/skins-box.png",
    ⲆⵠⲆΔⲆⵠⲆ: "img/shop-box.png",
    ᐃⲆⲆⲆΔΔᐃᐃⲆ: "img/private-server-box.png",
    ΔⲆⵠΔᐃⵠⵠ: "img/location-box.png",
    ΔᐃᐃⵠᐃΔⲆ: "img/server-duration-box.png",
    ⲆⵠᐃⵠΔᐃᐃ: "img/tutorial-box.png",
    ⲆΔⲆΔⵠⵠΔ: "img/leaderboard2-box.png",
    ⲆΔᐃᐃᐃⲆⵠ: "img/buy-breads-box.png",
    ⵠⵠⵠΔⵠⲆⵠ: "img/bag-box.png",
    ⲆᐃᐃⲆΔᐃⲆ: "img/deadbox-box.png",
    ΔⵠⲆⵠΔΔᐃ: "img/book-box.png",
    ⲆΔⲆⵠᐃᐃⲆ: "img/accessories-box.png",
    ⲆⵠⲆΔⲆΔΔ: "img/customskin-box.png",
    ⲆΔⵠⲆΔⲆⵠ: "img/bag-lasts.png",
    ⲆⲆⵠΔΔⵠⵠ: "img/server-lasts.png",
    ΔⵠᐃᐃⵠⲆⲆ: "img/server-access-box3.png",
    ⵠⲆΔΔᐃⲆⵠ: "img/lootbox-box.png",
    ᐃⲆⲆⲆⵠⵠⵠ: "img/change-nickname0.png",
    ᐃⵠᐃᐃⲆⲆᐃ: "img/change-nickname1.png",
    ΔⵠᐃᐃⲆⵠΔ: "img/cheating-box.png",
    ΔⵠΔⲆΔⵠᐃᐃΔ: "img/daily-quest-box.png",
    ⲆⵠᐃⵠⲆΔⲆⵠⵠ: "img/daily-5-bread.png",
    ᐃⲆΔⵠⵠⵠᐃⵠᐃ: "img/daily-10-bread.png",
    ⵠⵠⵠΔᐃᐃᐃᐃΔ: "img/daily-valid.png",
    ⲆⲆⵠΔΔᐃⲆ: "img/normal-profile-out.png",
    ΔⵠⵠΔⵠⵠⲆ: "img/normal-profile-in.png",
    ᐃⲆⲆⵠᐃΔⲆ: "img/normal-profile-click.png",
    ⲆᐃⲆΔΔⲆΔ: "img/forest-profile-out.png",
    ΔΔⵠΔⵠⲆⲆ: "img/forest-profile-in.png",
    ⲆⵠⲆⵠⵠⲆⵠ: "img/forest-profile-click.png",
    ΔΔΔΔⲆᐃᐃ: "img/zombie-profile-out.png",
    ⵠΔᐃᐃᐃⲆⲆ: "img/zombie-profile-in.png",
    ⵠⲆᐃΔΔⲆⵠ: "img/zombie-profile-click.png",
    ⵠΔⲆⵠᐃᐃⲆ: "img/vampire-profile-out.png",
    ⲆΔⵠⲆᐃⲆᐃ: "img/vampire-profile-in.png",
    ΔΔⵠΔⲆΔΔ: "img/vampire-profile-click.png",
    ΔΔΔⵠⵠⲆⵠ: "img/total-profile-out.png",
    ⲆⲆⲆΔⵠⵠⲆ: "img/total-profile-in.png",
    ΔⲆⵠⵠᐃⵠⵠ: "img/total-profile-click.png",
    ᐃΔΔⵠᐃⵠⲆ: "img/season1-out.png",
    ᐃⵠⵠⲆⵠᐃΔ: "img/season1-in.png",
    ⲆⲆⲆΔᐃᐃⵠ: "img/season1-click.png",
    ⵠΔΔⲆᐃΔᐃ: "img/season2-out.png",
    ᐃᐃⵠΔΔΔΔ: "img/season2-in.png",
    ⵠᐃᐃᐃⲆᐃⵠ: "img/season2-click.png",
    ᐃⵠᐃΔⲆΔⵠ: "img/season3-out.png",
    ⲆⲆΔⲆΔⲆⲆ: "img/season3-in.png",
    ᐃⲆΔⲆⵠΔⲆ: "img/season3-click.png",
    ΔⵠⵠΔΔᐃⲆ: "img/season4-out.png",
    ᐃΔΔⵠⵠⲆΔ: "img/season4-in.png",
    ᐃⵠⵠⵠΔⲆⲆ: "img/season4-click.png",
    ⵠΔⵠⲆⲆᐃΔ: "img/season5-out.png",
    ΔᐃⲆⵠᐃⵠⲆ: "img/season5-in.png",
    ᐃⲆΔⵠΔΔᐃ: "img/season5-click.png",
    ΔⲆΔⲆΔΔⵠ: "img/season6-out.png",
    ᐃⲆᐃᐃⲆⵠΔ: "img/season6-in.png",
    ᐃⵠΔᐃΔⲆⵠ: "img/season6-click.png",
    ᐃΔⲆΔΔⵠΔ: "img/locked-skin-alert.png",
    ⵠᐃΔⲆᐃᐃᐃ: "img/locked-custom-alert.png",
    ᐃⵠⵠΔⵠⲆⲆ: "img/bg-red-locked.png",
    ⵠᐃⲆᐃⲆⲆⵠ: "img/skin-button-out.png",
    ΔΔⵠΔⵠⵠΔ: "img/skin-button-in.png",
    ᐃᐃΔᐃⵠⲆΔ: "img/skin-button-click.png",
    ᐃΔⲆⲆΔᐃⵠ: "img/accessory-button-out.png",
    ᐃᐃⲆΔⵠᐃΔ: "img/accessory-button-in.png",
    ⲆᐃᐃⲆᐃᐃⲆ: "img/accessory-button-click.png",
    ⲆⵠΔⵠⵠⲆᐃ: "img/bag-button-out.png",
    ΔΔΔΔΔΔΔ: "img/bag-button-in.png",
    ᐃⵠⲆᐃΔⲆᐃ: "img/bag-button-click.png",
    ΔᐃᐃΔⵠᐃΔ: "img/book-button-out.png",
    ΔᐃⲆΔΔⲆⲆ: "img/book-button-in.png",
    ΔⵠΔΔᐃΔᐃ: "img/book-button-click.png",
    ΔΔⵠᐃⲆΔᐃ: "img/deadbox-button-out.png",
    ⵠⵠⲆΔᐃⵠⲆ: "img/deadbox-button-in.png",
    ⵠΔⵠᐃⲆΔⲆ: "img/deadbox-button-click.png",
    ⵠⲆΔᐃⲆⵠⵠ: "img/loot-button-out.png",
    ⲆⲆⲆⲆⵠᐃⲆ: "img/loot-button-in.png",
    ⵠΔⲆᐃᐃⲆΔ: "img/loot-button-click.png",
    ᐃⲆⲆⵠⵠᐃΔ: "img/free-item-out.png",
    ᐃᐃᐃᐃⲆⵠⲆ: "img/free-item-in.png",
    ᐃⲆⲆᐃᐃᐃⵠ: "img/free-item-click.png",
    ᐃᐃᐃⲆ: "img/wood-item-out.png",
    ᐃΔΔᐃ: "img/wood-item-in.png",
    ⲆᐃⲆⲆ: "img/wood-item-click.png",
    ᐃᐃⵠⲆᐃⵠᐃ: "img/stone-item.png",
    ΔᐃᐃⵠΔᐃΔ: "img/stone-item-in.png",
    ⲆⵠⲆⲆΔᐃⲆ: "img/stone-item-click.png",
    ⲆᐃⲆⵠΔᐃⲆ: "img/gold-item.png",
    ⵠΔⵠᐃⵠΔⵠ: "img/gold-item-in.png",
    ⵠᐃΔⲆΔⵠⵠ: "img/gold-item-click.png",
    ⵠᐃΔⵠΔⵠᐃ: "img/diamond-item.png",
    ⵠΔⲆⵠⲆᐃΔ: "img/diamond-item-in.png",
    ΔΔⲆⲆΔᐃⲆ: "img/diamond-item-click.png",
    ᐃΔᐃΔⵠᐃΔ: "img/amethyst-item.png",
    ᐃⵠᐃΔᐃΔⵠ: "img/amethyst-item-in.png",
    ᐃᐃᐃᐃᐃⲆⵠ: "img/amethyst-item-click.png",
    ᐃⲆᐃⵠⵠⲆⵠ: "img/reidite-item.png",
    ΔᐃⲆⲆΔⲆⲆ: "img/reidite-item-in.png",
    ᐃⵠⵠⲆᐃⵠⲆ: "img/reidite-item-click.png",
    ΔⵠⲆⵠᐃᐃⲆ: "img/special-item-out.png",
    ⵠⲆᐃⵠΔΔⵠ: "img/special-item-in.png",
    ⲆⵠΔᐃᐃΔⵠ: "img/special-item-click.png",
    ΔΔᐃᐃⵠᐃΔ: "img/level-item-out.png",
    ᐃᐃᐃⲆⲆⵠᐃ: "img/level-item-in.png",
    ΔΔᐃⲆΔⵠⲆ: "img/level-item-click.png",
    ΔⵠⵠⲆΔᐃⵠ: "img/skin-previous-out.png",
    ⵠΔᐃⲆᐃⵠΔ: "img/skin-previous-in.png",
    ΔΔⵠⲆΔΔⵠ: "img/skin-previous-click.png",
    ᐃᐃᐃⵠⲆΔⲆ: "img/skin-next-out.png",
    ⵠΔⵠⲆΔΔᐃ: "img/skin-next-in.png",
    ⵠⲆⵠⲆΔⵠᐃ: "img/skin-next-click.png",
    ⲆΔⲆⲆⵠ: "img/back-button-out.png",
    ΔⲆⲆⲆⲆ: "img/back-button-in.png",
    ΔΔΔᐃⲆ: "img/back-button-click.png",
    ⵠⵠᐃΔⲆΔⵠ: "img/get-more-button-out.png",
    ⵠⲆⲆΔⵠⵠΔ: "img/get-more-button-in.png",
    ᐃΔⵠⵠᐃⲆᐃ: "img/get-more-button-click.png",
    ⲆⵠΔΔⵠΔⲆ: "img/currency1-out.png",
    ⵠᐃᐃⲆⵠΔᐃ: "img/currency1-in.png",
    ΔⵠᐃᐃⵠΔⲆ: "img/currency1-click.png",
    ⲆⲆⲆΔᐃΔⲆ: "img/currency2-out.png",
    ΔᐃⵠⲆΔᐃΔ: "img/currency2-in.png",
    ⵠΔΔⲆΔⲆⲆ: "img/currency2-click.png",
    ᐃᐃⲆⲆⵠΔᐃ: "img/currency3-out.png",
    ΔᐃⲆⲆⵠΔⲆ: "img/currency3-in.png",
    ⲆᐃⲆᐃᐃⲆⲆ: "img/currency3-click.png",
    ΔⲆᐃⲆᐃΔΔ: "img/currency4-out.png",
    ⲆⵠᐃΔᐃᐃⵠ: "img/currency4-in.png",
    ⵠⵠⵠⵠᐃᐃΔ: "img/currency4-click.png",
    ΔⵠᐃⲆΔΔΔ: "img/currency5-out.png",
    ΔⲆⲆᐃᐃⵠᐃ: "img/currency5-in.png",
    ⲆΔΔΔΔⵠᐃ: "img/currency5-click.png",
    ⲆΔΔⲆⲆΔᐃ: "img/price1-out.png",
    ᐃⲆⵠΔⵠⲆᐃ: "img/price1-in.png",
    ⲆⵠᐃΔⵠⲆⲆ: "img/price1-click.png",
    ⲆⲆⲆⵠᐃⵠⵠ: "img/price2-out.png",
    ⵠᐃΔᐃⵠΔⲆ: "img/price2-in.png",
    ⲆᐃΔⲆⵠⵠΔ: "img/price2-click.png",
    ⵠᐃⲆⵠᐃⵠᐃ: "img/price3-out.png",
    ⵠᐃⲆΔⲆⲆΔ: "img/price3-in.png",
    ΔΔⵠΔⵠᐃΔ: "img/price3-click.png",
    ⲆᐃⲆⲆᐃⵠⲆ: "img/price4-out.png",
    ᐃΔΔⵠΔⵠⵠ: "img/price4-in.png",
    ᐃᐃⲆΔⵠⲆⵠ: "img/price4-click.png",
    ᐃΔⵠⲆⲆⲆⵠ: "img/price5-out.png",
    ᐃⵠΔⵠΔᐃⵠ: "img/price5-in.png",
    ⵠΔⲆⲆᐃⲆⲆ: "img/price5-click.png",
    ᐃᐃΔⵠⲆⵠΔᐃΔ: "img/buy-private-server-out.png",
    ⵠⲆⲆⲆΔᐃᐃⵠΔ: "img/buy-private-server-in.png",
    ᐃⵠᐃᐃⲆᐃⵠⵠΔ: "img/buy-private-server-click.png",
    ᐃⵠΔᐃⲆΔᐃ: "img/atlanta-button-out.png",
    ᐃΔΔⵠᐃΔⵠ: "img/atlanta-button-in.png",
    ⵠⲆⵠᐃᐃᐃⲆ: "img/atlanta-button-click.png",
    ⲆⵠⵠᐃΔⲆⵠ: "img/los-angeles-button-out.png",
    ⲆΔⵠᐃⵠΔⵠ: "img/los-angeles-button-in.png",
    ⲆⲆⵠⵠΔⲆΔ: "img/los-angeles-button-click.png",
    ⵠΔΔᐃΔⵠᐃ: "img/sydney-button-out.png",
    ⵠΔᐃⵠᐃⵠⲆ: "img/sydney-button-in.png",
    ⲆⲆⲆⲆΔΔⵠ: "img/sydney-button-click.png",
    ⵠⵠⲆⵠⵠΔⲆ: "img/frankfurt-button-out.png",
    ⲆΔΔⵠΔΔⵠ: "img/frankfurt-button-in.png",
    ⵠᐃᐃᐃⵠⵠᐃ: "img/frankfurt-button-click.png",
    ΔⲆⵠⲆⵠΔᐃ: "img/osaka-button-out.png",
    ΔᐃᐃⵠⵠⲆⲆ: "img/osaka-button-in.png",
    ⲆⵠΔᐃⲆΔᐃ: "img/osaka-button-click.png",
    ⵠⲆⵠⵠΔⵠⵠΔᐃ: "img/yes-location-out.png",
    ⵠᐃⲆᐃΔⲆΔᐃᐃ: "img/yes-location-in.png",
    ΔΔⲆⵠⲆΔΔΔᐃ: "img/yes-location-click.png",
    ΔⵠᐃᐃⲆⲆⲆ: "img/3days-button-out.png",
    ᐃᐃΔᐃⵠΔⵠ: "img/3days-button-in.png",
    ⲆΔⵠΔⵠⲆᐃ: "img/3days-button-click.png",
    ⵠⲆⲆᐃⲆΔⵠ: "img/7days-button-out.png",
    ᐃⲆᐃᐃᐃᐃⲆ: "img/7days-button-in.png",
    ⵠΔⲆⵠΔⲆⵠ: "img/7days-button-click.png",
    ⵠⲆᐃⲆᐃⵠΔ: "img/30days-button-out.png",
    ⲆΔⵠⲆⲆⲆᐃ: "img/30days-button-in.png",
    ⲆⵠⲆΔⵠΔΔ: "img/30days-button-click.png",
    ᐃΔᐃⵠⵠΔⲆ: "img/90days-button-out.png",
    ⲆⵠᐃⵠⵠⲆⲆ: "img/90days-button-in.png",
    ⵠⵠΔⲆⲆᐃΔ: "img/90days-button-click.png",
    ᐃⲆⲆᐃΔΔⵠ: "img/spin1.png",
    ΔᐃΔᐃⵠΔⵠ: "img/spin2.png",
    ⲆⵠⵠΔⲆᐃⵠ: "img/spin3.png",
    ΔᐃᐃⵠⲆΔⵠ: "img/spin4.png",
    ΔⲆΔⲆᐃⵠᐃ: "img/spin5.png",
    ⲆΔⲆᐃⵠᐃⵠ: "img/spin6.png",
    ⲆⲆΔⲆⲆⵠᐃ: "img/arrow-spin.png",
    ΔᐃⲆΔⲆⲆΔ: "img/spin-button-1-out.png",
    ᐃⲆΔⵠⲆⲆⲆ: "img/spin-button-1-in.png",
    ᐃⲆⲆⲆᐃᐃⲆ: "img/spin-button-1-click.png",
    ΔⵠⲆΔⲆᐃΔ: "img/spin-button-2-out.png",
    ⵠⵠⵠᐃⲆⲆⲆ: "img/spin-button-2-in.png",
    ⵠⲆΔΔᐃΔᐃ: "img/spin-button-2-click.png",
    ⵠⵠᐃᐃⲆⵠᐃ: "img/spin-button-3-out.png",
    ΔⲆⲆⵠⵠΔⲆ: "img/spin-button-3-in.png",
    ⲆⵠⵠⲆᐃⵠᐃ: "img/spin-button-3-click.png",
    ⵠᐃⵠⵠⲆΔⵠ: "img/spin-button-4-out.png",
    ᐃⵠᐃⲆΔΔΔ: "img/spin-button-4-in.png",
    ⵠᐃΔⵠᐃᐃΔ: "img/spin-button-4-click.png",
    ⲆᐃᐃΔᐃΔᐃ: "img/spin-button-5-out.png",
    ⵠΔᐃⲆΔⲆⵠ: "img/spin-button-5-in.png",
    ⵠⵠΔⵠⲆΔᐃ: "img/spin-button-5-click.png",
    ⲆⵠⲆⵠⲆⵠⵠ: "img/spin-light.png",
    ⲆⵠᐃⵠᐃⵠΔ: "img/tuto-wiki-out.png",
    ⲆⲆⲆⲆᐃΔΔ: "img/tuto-wiki-in.png",
    ⲆᐃΔⲆⲆᐃΔ: "img/tuto-wiki-click.png",
    ΔⲆΔⲆⲆⵠΔ: "img/tuto-previous-out.png",
    ⲆΔⵠⲆⵠᐃΔ: "img/tuto-previous-in.png",
    ⵠΔⲆᐃᐃΔᐃ: "img/tuto-previous-click.png",
    ΔᐃⲆᐃⲆΔᐃ: "img/tuto-next-out.png",
    ΔΔΔⵠⲆᐃⵠ: "img/tuto-next-in.png",
    ᐃᐃⵠᐃΔⵠⵠ: "img/tuto-next-click.png",
    ⵠΔⲆΔΔΔΔ: "img/time-leaderboard-out.png",
    ⲆΔⵠᐃᐃᐃⲆ: "img/time-leaderboard-in.png",
    ΔⵠⲆᐃⵠᐃᐃ: "img/time-leaderboard-click.png",
    ⲆΔⲆⲆⲆᐃᐃ: "img/score-leaderboard-out.png",
    ᐃΔⲆⲆΔⲆᐃ: "img/score-leaderboard-in.png",
    ⲆΔΔⵠΔⵠⵠ: "img/score-leaderboard-click.png",
    ΔᐃⵠΔΔᐃⵠ: "img/lvl-leaderboard-out.png",
    ⵠᐃⵠᐃⲆΔⵠ: "img/lvl-leaderboard-in.png",
    ⲆΔᐃΔᐃⵠΔ: "img/lvl-leaderboard-click.png",
    ΔᐃⲆⲆⵠᐃΔ: "img/kill-leaderboard-out.png",
    ΔᐃᐃᐃⵠⲆⲆ: "img/kill-leaderboard-in.png",
    ⲆΔⲆΔΔΔΔ: "img/kill-leaderboard-click.png",
    ΔᐃᐃⲆⵠⲆⵠ: "img/all-leaderboard-out.png",
    ΔⲆΔᐃΔⲆⲆ: "img/all-leaderboard-in.png",
    ΔᐃⲆΔⵠⵠΔ: "img/all-leaderboard-click.png",
    ⲆⲆΔᐃⵠⲆⲆ: "img/today-leaderboard-out.png",
    ⵠⵠⵠⲆⲆⵠΔ: "img/today-leaderboard-in.png",
    ⲆⵠᐃⵠΔⵠⲆ: "img/today-leaderboard-click.png",
    ⵠᐃⲆⵠⵠᐃᐃ: "img/week-leaderboard-out.png",
    ⵠⵠΔᐃⵠᐃⵠ: "img/week-leaderboard-in.png",
    ⲆΔⲆᐃΔΔᐃ: "img/week-leaderboard-click.png",
    ⵠΔⵠⲆᐃⲆᐃ: "img/season1-out.png",
    ⲆⲆⲆⵠⲆᐃᐃ: "img/season1-in.png",
    ᐃᐃⲆⲆⲆᐃⵠ: "img/season1-click.png",
    ⵠⵠⲆⵠΔⲆⲆ: "img/season2-out.png",
    ᐃΔⲆᐃⲆΔⵠ: "img/season2-in.png",
    ΔⵠⲆᐃⵠΔⵠ: "img/season2-click.png",
    ᐃⵠᐃⲆᐃⲆⵠ: "img/season3-out.png",
    ⵠⲆⲆⵠⵠⲆΔ: "img/season3-in.png",
    ΔᐃⵠⵠᐃᐃΔ: "img/season3-click.png",
    ᐃⵠⵠΔᐃΔⲆ: "img/season4-out.png",
    ΔⲆᐃⲆⲆΔⲆ: "img/season4-in.png",
    ⵠⲆⲆⲆᐃΔⲆ: "img/season4-click.png",
    ᐃΔⵠᐃᐃⲆⵠ: "img/season5-out.png",
    ⵠⲆᐃⵠⵠΔⲆ: "img/season5-in.png",
    ᐃⵠⵠⲆᐃⲆⵠ: "img/season5-click.png",
    ⵠᐃΔⵠⲆⲆⲆ: "img/season6-out.png",
    ΔᐃⵠΔΔᐃΔ: "img/season6-in.png",
    ⲆⵠᐃΔΔⵠⵠ: "img/season6-click.png",
    ΔⵠΔⲆΔⲆᐃ: "img/total-lead-out.png",
    ⲆⵠᐃⵠⲆⲆⵠ: "img/total-lead-in.png",
    ΔᐃΔⵠᐃΔⲆ: "img/total-lead-click.png",
    ΔⵠᐃᐃⵠⲆⵠ: "img/normal-lead-out.png",
    ⵠᐃⵠᐃᐃⲆⵠ: "img/normal-lead-in.png",
    ᐃᐃᐃΔⵠⲆΔ: "img/normal-lead-click.png",
    ⵠΔᐃⲆⲆⲆⲆ: "img/forest-lead-out.png",
    ⲆⲆⵠΔⵠⵠᐃ: "img/forest-lead-in.png",
    ΔᐃᐃⲆⵠᐃⲆ: "img/forest-lead-click.png",
    ⵠⵠⲆⵠⲆΔⲆ: "img/vampire-lead-out.png",
    ⲆΔᐃΔᐃᐃⵠ: "img/vampire-lead-in.png",
    ⵠⲆΔᐃΔⲆⵠ: "img/vampire-lead-click.png",
    ⲆΔⵠΔΔᐃⲆ: "img/zombie-lead-out.png",
    ⵠⲆⵠΔᐃⵠⵠ: "img/zombie-lead-in.png",
    ᐃⵠΔΔΔⲆⲆ: "img/zombie-lead-click.png",
    ⵠΔⲆⲆⲆᐃⲆ: "img/day-level5.png",
    Ⲇⵠᐃᐃᐃⵠⵠ: "img/night-level5.png",
    ⵠᐃⵠΔⲆⲆⵠ: "img/day-level10.png",
    ΔⲆⵠΔΔᐃΔ: "img/night-level10.png",
    ⲆⲆⵠⵠⵠΔΔ: "img/day-level15.png",
    ⲆΔⲆⲆᐃΔⵠ: "img/night-level15.png",
    ΔⲆΔΔᐃᐃⵠ: "img/day-level20.png",
    ⲆⲆⲆⲆⵠⵠⲆ: "img/night-level20.png",
    ᐃᐃΔⵠΔⵠΔ: "img/day-level25.png",
    ⲆⲆᐃΔᐃᐃΔ: "img/night-level25.png",
    ΔΔⵠⵠⵠⲆⵠ: "img/day-level30.png",
    ΔᐃΔⲆᐃⲆⵠ: "img/night-level30.png",
    ΔΔΔΔⵠΔⵠ: "img/day-level35.png",
    ᐃΔᐃΔΔΔΔ: "img/night-level35.png",
    ᐃΔⲆΔΔⲆⲆ: "img/day-level40.png",
    ⲆⵠⲆΔΔⵠᐃ: "img/night-level40.png",
    ᐃⲆⵠⲆΔⵠⵠ: "img/day-level45.png",
    ᐃⲆⲆᐃΔⵠⵠ: "img/night-level45.png",
    ⵠⲆⲆᐃΔⲆⵠ: "img/day-level50.png",
    ᐃⵠΔⲆᐃⵠⵠ: "img/night-level50.png",
    ᐃΔᐃⲆⵠⵠΔ: "img/day-level55.png",
    ΔΔΔΔⲆⲆⵠ: "img/night-level55.png",
    ΔⲆⲆⲆⲆΔᐃ: "img/day-level60.png",
    ⵠΔᐃⲆΔⵠΔ: "img/night-level60.png",
    ⵠᐃⵠⲆΔⵠΔ: "img/day-skin-devast0.png",
    ⲆⲆⲆᐃⲆⵠⲆ: "img/night-skin-devast0.png",
    ᐃᐃⲆΔⵠⲆⲆ: "img/day-hand-devaster.png",
    ⵠᐃⲆΔⲆⵠΔ: "img/night-hand-devaster.png",
    ΔⵠᐃΔⵠᐃⲆ: "img/day-skin-star0.png",
    ⵠΔⵠΔⲆⲆΔ: "img/night-skin-star0.png",
    ᐃⲆⲆⲆᐃⲆᐃ: "img/day-hand-star0.png",
    ᐃᐃⵠΔΔⵠᐃ: "img/night-hand-star0.png",
    ΔⵠⵠΔⵠⲆⲆ: "img/day-vampire.png",
    ⵠᐃⲆⲆΔⵠΔ: "img/night-vampire.png",
    ᐃΔΔⵠᐃΔΔ: "img/day-hand-vampire.png",
    ⲆⵠΔⲆⵠⵠⵠ: "img/night-hand-vampire.png",
    ⲆᐃΔᐃᐃᐃⲆ: "img/day-zombie.png",
    ⵠⲆᐃΔⲆⲆⲆ: "img/night-zombie.png",
    ⵠⵠⲆⵠΔΔⲆ: "img/day-hand-zombie.png",
    ΔⲆᐃΔⵠⵠΔ: "img/night-hand-zombie.png",
    ᐃᐃⵠⲆⲆᐃⲆ: "img/day-skin113.png",
    ⵠⵠΔᐃΔᐃΔ: "img/night-skin113.png",
    ᐃⵠΔⵠᐃⲆⲆ: "img/day-hand-skin113.png",
    ᐃⲆΔⵠⵠⵠᐃ: "img/night-hand-skin113.png",
    ΔᐃⲆᐃΔᐃⵠ: "img/day-skin0.png",
    ⵠⵠΔΔⵠⲆⵠ: "img/night-skin0.png",
    ⲆⵠⵠⲆⵠΔⲆ: "img/day-skin1.png",
    ΔⲆΔⵠⵠΔⲆ: "img/night-skin1.png",
    ΔⵠⲆᐃⵠᐃⵠ: "img/day-skin2.png",
    ⲆⲆΔⲆᐃⵠⲆ: "img/night-skin2.png",
    ⵠⵠⵠⲆⵠⲆⵠ: "img/day-skin3.png",
    ΔΔᐃⵠⲆΔⵠ: "img/night-skin3.png",
    ⲆⵠᐃΔⵠΔⵠ: "img/day-skin4.png",
    ΔΔᐃᐃⲆⲆⵠ: "img/night-skin4.png",
    ΔⲆⵠΔⲆⲆᐃ: "img/day-skin5.png",
    ⲆⵠⵠᐃΔᐃⵠ: "img/night-skin5.png",
    ᐃⲆᐃⵠΔᐃⲆ: "img/day-skin6.png",
    ΔⵠⵠⲆⵠⲆᐃ: "img/night-skin6.png",
    ⵠⵠᐃⲆⵠΔⵠ: "img/day-skin7.png",
    ⵠⵠΔᐃⵠⵠΔ: "img/night-skin7.png",
    ᐃⲆΔᐃᐃⵠΔ: "img/day-skin8.png",
    ᐃⵠᐃΔⵠⵠⲆ: "img/night-skin8.png",
    ΔΔᐃⲆⲆⵠΔ: "img/day-skin9.png",
    ΔᐃᐃⵠⲆΔⲆ: "img/night-skin9.png",
    ⵠⲆⵠΔΔᐃΔ: "img/day-skin10.png",
    ⲆΔⵠᐃᐃᐃΔ: "img/night-skin10.png",
    ΔⲆᐃⲆΔΔᐃ: "img/day-skin11.png",
    ⲆⲆⵠΔΔΔⲆ: "img/night-skin11.png",
    ⵠΔⵠᐃΔᐃᐃ: "img/day-skin12.png",
    ΔⲆΔⲆⵠΔⵠ: "img/night-skin12.png",
    ⵠⵠⲆᐃΔⵠⵠ: "img/day-skin13.png",
    ᐃⵠⲆᐃᐃΔⵠ: "img/night-skin13.png",
    ΔΔⵠⲆⲆᐃᐃ: "img/day-skin14.png",
    ᐃⵠΔⵠᐃΔⲆ: "img/night-skin14.png",
    ΔΔⵠⲆΔᐃᐃ: "img/day-skin15.png",
    ⵠⵠⵠⵠΔⲆΔ: "img/night-skin15.png",
    ᐃΔⲆⲆᐃⲆΔ: "img/day-skin16.png",
    ⲆΔⲆⲆⵠⲆᐃ: "img/night-skin16.png",
    ⵠΔⲆⲆΔᐃΔ: "img/day-skin17.png",
    ⲆᐃⵠΔⲆⲆⲆ: "img/night-skin17.png",
    ⵠⲆΔᐃᐃΔⵠ: "img/day-skin18.png",
    ᐃⵠⲆᐃⵠⵠΔ: "img/night-skin18.png",
    ⲆᐃΔΔⲆΔⲆ: "img/day-skin19.png",
    ΔᐃⵠⲆⵠᐃⲆ: "img/night-skin19.png",
    ᐃⵠⲆΔⲆⲆⵠ: "img/day-skin20.png",
    ⵠᐃΔᐃΔΔⲆ: "img/night-skin20.png",
    ⲆᐃⲆⲆᐃⲆⵠ: "img/day-skin21.png",
    ᐃⲆᐃⵠΔⲆᐃ: "img/night-skin21.png",
    ⵠⲆⵠⲆⲆⲆΔ: "img/day-skin22.png",
    ⵠᐃΔΔΔΔΔ: "img/night-skin22.png",
    ⲆⵠⲆⲆⲆⲆΔ: "img/day-skin23.png",
    ᐃⵠᐃΔΔⲆⵠ: "img/night-skin23.png",
    ⲆᐃⵠⵠⲆⲆᐃ: "img/day-skin24.png",
    ΔΔⵠⲆⵠᐃⵠ: "img/night-skin24.png",
    ⵠⵠᐃⲆⲆⵠⵠ: "img/day-skin25.png",
    ⲆᐃⵠⲆⵠⲆΔ: "img/night-skin25.png",
    ᐃⲆⵠⲆⵠΔᐃ: "img/day-skin26.png",
    ⵠⲆⵠΔⵠⲆΔ: "img/night-skin26.png",
    ΔᐃⵠᐃᐃΔᐃ: "img/day-skin27.png",
    ᐃⲆᐃᐃᐃⲆΔ: "img/night-skin27.png",
    ΔⲆⲆΔⲆΔⵠ: "img/day-skin28.png",
    ᐃⲆⵠΔⵠⲆⵠ: "img/night-skin28.png",
    ΔⵠⵠΔⲆΔΔ: "img/day-skin29.png",
    ⲆᐃΔⲆΔⲆⲆ: "img/night-skin29.png",
    ΔⲆᐃᐃⲆⲆⲆ: "img/day-skin30.png",
    ΔⵠᐃΔΔⵠᐃ: "img/night-skin30.png",
    ⵠⲆΔΔᐃⲆΔ: "img/day-skin31.png",
    ⵠᐃᐃⲆⲆΔⲆ: "img/night-skin31.png",
    ΔΔΔⵠⲆⲆⲆ: "img/day-skin32.png",
    ᐃⵠᐃⵠᐃⲆⲆ: "img/night-skin32.png",
    ᐃⵠᐃⲆⵠΔⵠ: "img/day-skin33.png",
    ⵠⲆⵠΔΔΔⲆ: "img/night-skin33.png",
    ⵠⵠⵠᐃⲆⵠⲆ: "img/day-skin34.png",
    ΔᐃⵠᐃᐃⵠⲆ: "img/night-skin34.png",
    ⲆⵠⲆᐃᐃⵠⲆ: "img/day-skin35.png",
    ᐃΔⵠΔⲆⵠⲆ: "img/night-skin35.png",
    ⵠᐃⲆⵠⲆⲆⵠ: "img/day-skin36.png",
    ⲆⲆⲆΔᐃⲆⵠ: "img/night-skin36.png",
    ᐃᐃⵠⵠΔⲆⵠ: "img/day-skin37.png",
    ΔΔⲆΔΔⲆΔ: "img/night-skin37.png",
    ΔⵠΔⲆᐃᐃⵠ: "img/day-skin38.png",
    ⵠᐃΔᐃⲆⲆᐃ: "img/night-skin38.png",
    ⲆⵠⲆⵠⲆΔⵠ: "img/day-skin39.png",
    ᐃⵠΔΔⵠᐃΔ: "img/night-skin39.png",
    ⵠᐃⲆΔΔᐃᐃ: "img/day-skin40.png",
    ΔΔⵠⵠΔΔⲆ: "img/night-skin40.png",
    ⵠⲆⲆⵠΔⵠⲆ: "img/day-skin41.png",
    ⵠⵠᐃⵠⵠΔΔ: "img/night-skin41.png",
    ΔΔⵠᐃᐃΔΔ: "img/day-skin42.png",
    ᐃΔⵠΔΔᐃΔ: "img/night-skin42.png",
    ΔᐃⲆⲆⵠⵠᐃ: "img/day-skin43.png",
    ΔΔⲆΔⲆⲆⲆ: "img/night-skin43.png",
    ⲆᐃΔⲆᐃⵠⵠ: "img/day-skin44.png",
    ΔⵠⲆᐃᐃᐃᐃ: "img/night-skin44.png",
    ΔⲆΔᐃΔⲆᐃ: "img/day-skin45.png",
    ⲆᐃΔⵠⵠΔⵠ: "img/night-skin45.png",
    ᐃᐃᐃⲆⲆᐃΔ: "img/day-skin46.png",
    ⵠᐃⲆΔⵠᐃᐃ: "img/night-skin46.png",
    ⵠᐃΔⵠᐃⵠΔ: "img/day-skin47.png",
    ⵠΔΔᐃᐃⵠΔ: "img/night-skin47.png",
    ΔⵠΔΔΔⵠΔ: "img/day-skin48.png",
    ⲆᐃⲆⵠΔⵠⵠ: "img/night-skin48.png",
    ᐃΔⲆⵠⵠⲆⲆ: "img/day-skin49.png",
    ΔⲆⲆⵠᐃⲆΔ: "img/night-skin49.png",
    ⵠⲆΔΔΔᐃΔ: "img/day-skin50.png",
    ᐃᐃⵠⵠⵠⵠⲆ: "img/night-skin50.png",
    ΔⲆⲆΔⲆᐃⲆ: "img/day-skin51.png",
    ΔⲆᐃᐃᐃⲆΔ: "img/night-skin51.png",
    ᐃᐃⲆΔᐃΔⵠ: "img/day-skin52.png",
    ⲆΔⵠⵠΔΔΔ: "img/night-skin52.png",
    ⵠΔΔⵠⲆᐃΔ: "img/day-skin53.png",
    ⲆⵠΔΔᐃΔⲆ: "img/night-skin53.png",
    ⵠⵠⲆⵠⵠⵠᐃ: "img/day-skin54.png",
    ᐃⵠⵠⲆΔᐃΔ: "img/night-skin54.png",
    ᐃⵠᐃᐃΔΔᐃ: "img/day-skin55.png",
    ΔΔΔΔⲆᐃⵠ: "img/night-skin55.png",
    ᐃⵠⲆⵠΔΔᐃ: "img/day-skin56.png",
    Δⵠᐃⵠⵠᐃⵠ: "img/night-skin56.png",
    ΔⲆⲆⲆᐃΔⲆ: "img/day-skin57.png",
    ᐃⲆⵠⵠⵠΔΔ: "img/night-skin57.png",
    ᐃᐃⲆⲆᐃΔⲆ: "img/day-skin58.png",
    ⲆⲆⵠΔΔᐃⵠ: "img/night-skin58.png",
    ⵠⵠⲆᐃΔᐃⵠ: "img/day-skin59.png",
    ᐃⵠΔⵠΔⲆⵠ: "img/night-skin59.png",
    ⲆⵠΔⲆⲆⲆⵠ: "img/day-skin60.png",
    ΔΔⵠⲆᐃⲆⲆ: "img/night-skin60.png",
    ⲆᐃⲆⲆⲆⵠⲆ: "img/day-skin61.png",
    ⵠᐃᐃⵠⵠᐃΔ: "img/night-skin61.png",
    ᐃᐃⲆΔᐃᐃᐃ: "img/day-skin62.png",
    ᐃⵠΔΔΔΔⲆ: "img/night-skin62.png",
    ΔᐃⲆᐃΔΔⲆ: "img/day-skin63.png",
    ᐃⲆΔⲆⵠⵠⵠ: "img/night-skin63.png",
    ΔᐃΔⲆⵠⵠΔ: "img/day-skin64.png",
    ⲆⵠΔΔⵠΔΔ: "img/night-skin64.png",
    ΔⵠⲆⲆⵠⵠᐃ: "img/day-skin65.png",
    ⵠΔⲆⵠΔⵠᐃ: "img/night-skin65.png",
    ⲆᐃⵠⲆΔΔΔ: "img/day-skin66.png",
    ᐃᐃⲆⵠⵠᐃⵠ: "img/night-skin66.png",
    ⲆⵠΔⲆΔⲆⵠ: "img/day-skin67.png",
    ⲆⲆΔⲆΔΔΔ: "img/night-skin67.png",
    ᐃΔᐃⲆᐃᐃⵠ: "img/day-skin68.png",
    ΔᐃᐃⲆᐃΔΔ: "img/night-skin68.png",
    ⵠΔᐃⲆⲆΔⵠ: "img/day-skin69.png",
    ᐃⵠΔⵠⵠⵠᐃ: "img/night-skin69.png",
    ΔⵠⲆⲆⵠΔⵠ: "img/day-skin70.png",
    ⲆⲆΔᐃⵠⲆᐃ: "img/night-skin70.png",
    ⵠⵠᐃᐃᐃᐃᐃ: "img/day-skin71.png",
    ⲆⵠⵠⵠⵠⲆⲆ: "img/night-skin71.png",
    ⲆΔⲆⵠᐃⲆΔ: "img/day-skin72.png",
    ᐃΔᐃΔᐃⵠΔ: "img/night-skin72.png",
    ⵠⲆᐃⲆⵠⵠᐃ: "img/day-skin73.png",
    ⵠΔᐃΔⵠᐃⲆ: "img/night-skin73.png",
    ΔΔⵠᐃΔⵠⵠ: "img/day-skin74.png",
    ⵠᐃⵠᐃΔⵠⲆ: "img/night-skin74.png",
    ΔᐃᐃⲆᐃΔⲆ: "img/day-skin75.png",
    ⲆᐃⲆⲆⵠᐃⲆ: "img/night-skin75.png",
    ᐃᐃᐃⲆⵠΔⵠ: "img/day-skin76.png",
    ⲆᐃᐃΔⲆΔᐃ: "img/night-skin76.png",
    ᐃⵠⲆΔⵠⲆᐃ: "img/day-skin77.png",
    ᐃᐃⲆⵠᐃᐃⲆ: "img/night-skin77.png",
    ⵠⵠΔⲆⵠᐃⵠ: "img/day-skin78.png",
    ᐃᐃⲆⵠⲆΔΔ: "img/night-skin78.png",
    ΔΔΔⵠⵠᐃᐃ: "img/day-skin79.png",
    ᐃΔⲆΔⲆᐃⵠ: "img/night-skin79.png",
    ᐃⲆⵠⲆⵠᐃᐃ: "img/day-skin80.png",
    ᐃⲆΔⲆΔⲆⲆ: "img/night-skin80.png",
    ⲆⲆΔΔΔᐃⵠ: "img/day-skin81.png",
    ⵠⵠⲆᐃⵠᐃⵠ: "img/night-skin81.png",
    ⵠⲆⵠⵠΔᐃⲆ: "img/day-skin82.png",
    ⵠⵠⲆⲆⵠⲆⲆ: "img/night-skin82.png",
    ᐃⵠⲆᐃⵠΔⵠ: "img/day-skin83.png",
    ⲆⲆⵠᐃⲆᐃᐃ: "img/night-skin83.png",
    ᐃⵠⵠⲆᐃⵠⵠ: "img/day-skin84.png",
    ⵠᐃⵠΔᐃⵠΔ: "img/night-skin84.png",
    ⵠⲆⵠᐃᐃⲆᐃ: "img/day-skin85.png",
    ⵠΔⵠⵠΔΔⲆ: "img/night-skin85.png",
    ᐃⲆⵠᐃⵠᐃΔ: "img/day-skin86.png",
    ΔⵠⲆᐃⲆⲆΔ: "img/night-skin86.png",
    ΔΔⲆΔⲆᐃΔ: "img/day-skin87.png",
    ⵠΔⵠⵠᐃΔⵠ: "img/night-skin87.png",
    ᐃⵠᐃᐃΔΔⵠ: "img/day-skin88.png",
    ᐃᐃⵠΔᐃⵠΔ: "img/night-skin88.png",
    ⲆᐃᐃᐃⵠΔΔ: "img/day-skin89.png",
    ᐃΔΔⲆᐃⵠᐃ: "img/night-skin89.png",
    ᐃᐃΔⵠⲆⵠΔ: "img/day-skin90.png",
    ΔⲆⲆΔⵠⲆΔ: "img/night-skin90.png",
    ⵠⵠⵠΔᐃⲆᐃ: "img/day-skin91.png",
    ᐃᐃΔΔᐃᐃⵠ: "img/night-skin91.png",
    ⵠⵠΔΔⲆⲆⲆ: "img/day-skin92.png",
    ΔΔᐃΔⵠΔⵠ: "img/night-skin92.png",
    ⵠᐃⲆⵠⵠⵠⲆ: "img/day-skin93.png",
    ⲆⲆⲆⵠΔⵠⵠ: "img/night-skin93.png",
    ⵠᐃⵠΔᐃᐃⵠ: "img/day-skin94.png",
    ⲆΔⵠⵠⵠⵠⵠ: "img/night-skin94.png",
    ⲆᐃᐃΔΔⵠᐃ: "img/day-skin95.png",
    ⵠⵠΔᐃⵠᐃΔ: "img/night-skin95.png",
    ᐃⵠⲆΔⵠⲆⲆ: "img/day-skin96.png",
    ΔᐃⲆΔᐃΔᐃ: "img/night-skin96.png",
    ΔΔⲆΔⲆⵠΔ: "img/day-skin97.png",
    ⵠᐃⵠΔΔᐃΔ: "img/night-skin97.png",
    ⵠⵠᐃⲆⲆⵠᐃ: "img/day-skin98.png",
    ΔⲆⲆⵠⲆⲆⵠ: "img/night-skin98.png",
    ⵠⲆⵠⲆΔⵠⲆ: "img/day-skin99.png",
    ⵠΔⲆΔᐃΔᐃ: "img/night-skin99.png",
    ΔᐃΔᐃⲆⲆᐃ: "img/day-skin100.png",
    ΔⵠⲆⲆⵠΔΔ: "img/night-skin100.png",
    ⲆⵠⵠⵠᐃΔᐃ: "img/day-skin101.png",
    ⵠⲆᐃⵠⲆⵠᐃ: "img/night-skin101.png",
    ⵠⲆⲆΔΔᐃⵠ: "img/day-skin102.png",
    ⲆᐃΔⲆⵠΔᐃ: "img/night-skin102.png",
    ⲆᐃⵠⵠⲆⲆⵠ: "img/day-skin103.png",
    ⵠᐃⵠⲆᐃⲆᐃ: "img/night-skin103.png",
    ⵠⲆᐃⵠᐃΔᐃ: "img/day-skin104.png",
    ΔⲆⵠΔⲆᐃⵠ: "img/night-skin104.png",
    ⲆΔΔᐃⲆΔΔ: "img/day-skin105.png",
    ⵠⲆⵠΔⵠΔⵠ: "img/night-skin105.png",
    ΔΔᐃⲆⲆᐃΔ: "img/day-skin106.png",
    ⲆⵠⲆⲆΔᐃⵠ: "img/night-skin106.png",
    ΔΔΔΔᐃΔΔ: "img/day-skin107.png",
    ᐃⲆᐃⵠᐃⵠⵠ: "img/night-skin107.png",
    ΔΔᐃⲆⲆⵠⲆ: "img/day-skin108.png",
    ⵠᐃΔⲆⵠⵠⲆ: "img/night-skin108.png",
    ⲆΔⲆⲆᐃⲆⵠ: "img/day-skin109.png",
    ᐃⲆⵠᐃⲆΔⵠ: "img/night-skin109.png",
    ᐃᐃⵠΔᐃᐃΔ: "img/day-skin110.png",
    ⲆⲆΔᐃⲆⵠᐃ: "img/night-skin110.png",
    ⵠΔΔΔⲆΔⲆ: "img/day-skin111.png",
    ᐃΔᐃⲆⵠⵠⲆ: "img/night-skin111.png",
    ᐃⲆΔⲆΔΔΔ: "img/day-skin112.png",
    ⲆⲆⲆΔⵠΔᐃ: "img/night-skin112.png",
    ⵠΔᐃᐃΔⵠΔⵠⲆ: "img/day-skin113.png",
    ⵠⵠΔΔΔⲆⵠᐃΔ: "img/night-skin113.png",
    ΔΔΔⲆᐃΔⲆ: "img/day-skin114.png",
    ⲆⲆⲆᐃᐃΔⵠ: "img/night-skin114.png",
    ⲆⵠⲆⵠΔᐃⵠ: "img/day-skin115.png",
    Δⵠᐃⵠᐃⵠᐃ: "img/night-skin115.png",
    ⲆⲆⲆⲆΔⵠⲆ: "img/day-skin116.png",
    ᐃΔⲆⵠⲆⲆᐃ: "img/night-skin116.png",
    ⲆⲆⲆⵠᐃⲆⲆ: "img/day-skin117.png",
    ⵠΔⲆⵠⲆᐃᐃ: "img/night-skin117.png",
    ΔΔⲆᐃᐃⵠΔ: "img/day-skin118.png",
    ᐃΔⲆⵠΔᐃᐃ: "img/night-skin118.png",
    ⲆΔΔⲆⵠΔⵠ: "img/day-skin119.png",
    ⵠΔⲆᐃᐃⲆᐃ: "img/night-skin119.png",
    ⲆΔⲆⵠΔⲆⲆ: "img/day-skin120.png",
    ΔⲆΔΔⲆᐃⲆ: "img/night-skin120.png",
    ⵠⲆΔΔⵠⲆⵠ: "img/day-skin121.png",
    ⲆᐃΔᐃⵠΔΔ: "img/night-skin121.png",
    ᐃⲆΔΔΔΔⵠ: "img/day-skin122.png",
    ΔᐃⵠΔΔⵠⲆ: "img/night-skin122.png",
    ⵠⵠⵠⲆΔⲆⵠ: "img/day-skin123.png",
    ΔⵠᐃⵠᐃⲆᐃ: "img/night-skin123.png",
    ΔΔΔⵠⲆΔᐃ: "img/day-skin124.png",
    ᐃⵠᐃᐃᐃΔⲆ: "img/night-skin124.png",
    ᐃΔⲆᐃᐃⲆᐃ: "img/day-skin125.png",
    ⵠᐃΔⵠⲆᐃⵠ: "img/night-skin125.png",
    ΔΔⵠⲆⲆⵠⵠ: "img/day-skin126.png",
    ⵠⲆΔⵠⲆⲆⵠ: "img/night-skin126.png",
    ΔⲆⲆΔΔᐃᐃ: "img/day-skin127.png",
    ΔⲆⲆΔⵠΔⲆ: "img/night-skin127.png",
    ⵠᐃΔΔᐃΔΔ: "img/day-skin128.png",
    ᐃⲆᐃⵠᐃᐃᐃ: "img/night-skin128.png",
    ⵠⲆⲆΔⵠΔⲆ: "img/day-skin129.png",
    ⲆⵠⲆⵠΔΔᐃ: "img/night-skin129.png",
    ⵠᐃᐃⵠⵠΔⲆ: "img/day-skin130-1.png",
    Ⲇᐃⵠᐃᐃᐃⵠ: "img/night-skin130-1.png",
    ⵠⲆΔΔᐃᐃⵠ: "img/day-skin131.png",
    ⲆⵠⲆΔⵠⲆΔ: "img/night-skin131.png",
    ᐃⲆᐃΔⵠⵠⲆ: "img/day-skin132.png",
    ⵠᐃⲆᐃᐃᐃⲆ: "img/night-skin132.png",
    ΔⲆΔΔⲆᐃⵠ: "img/day-skin133.png",
    ᐃΔⲆᐃΔⵠⵠ: "img/night-skin133.png",
    ⲆᐃᐃⵠⲆΔⲆ: "img/day-skin134.png",
    ⵠᐃΔⲆΔⲆⲆ: "img/night-skin134.png",
    ᐃⵠⵠΔⲆΔΔ: "img/day-skin135.png",
    ⲆΔᐃΔⲆᐃⲆ: "img/night-skin135.png",
    ᐃᐃΔⵠΔᐃⵠ: "img/day-skin136.png",
    ⵠⵠΔᐃΔᐃᐃ: "img/night-skin136.png",
    ⵠⲆΔΔⵠⲆⲆ: "img/day-skin137.png",
    ⲆΔᐃΔᐃⲆΔ: "img/night-skin137.png",
    ⵠⲆᐃⲆᐃΔΔ: "img/day-skin138.png",
    ΔⵠᐃᐃⵠΔΔ: "img/night-skin138.png",
    ⲆⲆⲆⲆⲆⲆᐃ: "img/day-skin139.png",
    ⵠΔⵠⲆⵠⲆⵠ: "img/night-skin139.png",
    ⲆᐃᐃΔᐃⵠⵠ: "img/day-skin140.png",
    ⵠΔⵠᐃⵠⲆᐃ: "img/night-skin140.png",
    ⵠⲆⵠᐃᐃΔᐃ: "img/day-skin141.png",
    ΔΔⲆᐃΔΔⵠ: "img/night-skin141.png",
    ᐃⲆⵠⲆⲆⲆⵠ: "img/day-skin142.png",
    ⲆᐃⵠΔⵠᐃΔ: "img/night-skin142.png",
    ΔΔᐃΔᐃⲆⵠ: "img/day-skin143.png",
    ⲆΔᐃⵠᐃᐃⵠ: "img/night-skin143.png",
    ⲆΔⲆΔᐃⵠΔ: "img/day-skin144.png",
    ΔⵠᐃᐃᐃⲆⲆ: "img/night-skin144.png",
    ΔⲆᐃᐃΔⲆⲆ: "img/day-skin145.png",
    ᐃⲆᐃᐃᐃᐃΔ: "img/night-skin145.png",
    ⲆᐃⲆᐃⲆΔⲆ: "img/day-skin146.png",
    ⵠΔⵠⲆΔⲆΔ: "img/night-skin146.png",
    ⲆΔⲆΔΔᐃΔ: "img/day-skin147.png",
    ΔⲆⵠᐃⲆᐃΔ: "img/night-skin147.png",
    ΔᐃⵠⵠΔⵠⲆ: "img/day-skin148.png",
    ᐃⵠᐃⲆⲆᐃᐃ: "img/night-skin148.png",
    ΔⵠᐃⵠᐃΔᐃ: "img/day-skin149.png",
    ⲆⵠⵠⵠΔᐃⵠ: "img/night-skin149.png",
    ⵠⵠⲆⲆΔⲆⵠ: "img/day-skin150.png",
    ᐃᐃΔΔᐃⲆⵠ: "img/night-skin150.png",
    ⵠΔᐃᐃⵠⲆᐃ: "img/day-skin151.png",
    ᐃⵠᐃⵠΔⲆⲆ: "img/night-skin151.png",
    ⲆΔⵠΔⲆⲆΔ: "img/day-skin152.png",
    ⲆⲆⵠΔᐃΔΔ: "img/night-skin152.png",
    ᐃⲆΔⲆΔⵠⵠ: "img/day-skin153.png",
    ΔⲆᐃᐃᐃᐃⵠ: "img/night-skin153.png",
    ⲆΔΔⲆᐃᐃⵠ: "img/day-skin154.png",
    ΔΔⲆⲆⵠΔΔ: "img/night-skin154.png",
    ΔΔΔᐃⵠⵠⲆ: "img/day-skin155.png",
    ΔⵠⵠⵠΔΔᐃ: "img/night-skin155.png",
    ΔᐃᐃⵠⵠⲆΔ: "img/day-skin156.png",
    ⵠⵠⵠⵠⲆᐃᐃ: "img/night-skin156.png",
    ΔⵠᐃΔΔΔⲆ: "img/day-skin157.png",
    ᐃΔᐃᐃⵠᐃⲆ: "img/night-skin157.png",
    ᐃΔⲆⵠⲆⲆⵠ: "img/day-skin158.png",
    ⲆᐃΔᐃⵠⵠⲆ: "img/night-skin158.png",
    ΔΔⲆⲆⲆⲆⲆ: "img/day-skin159.png",
    ⲆⲆᐃᐃΔⵠΔ: "img/night-skin159.png",
    ⲆⲆⵠᐃⲆΔΔ: "img/day-skin160.png",
    ᐃᐃⵠΔⵠΔᐃ: "img/night-skin160.png",
    ⵠⵠⲆⵠΔΔΔ: "img/day-skin161.png",
    ᐃⲆΔⲆᐃⲆⲆ: "img/night-skin161.png",
    ⵠΔⵠⵠⵠⲆᐃ: "img/day-skin162.png",
    ΔⵠⲆΔⲆΔⵠ: "img/night-skin162.png",
    ⵠⵠᐃΔΔⵠΔ: "img/day-skin163.png",
    ΔᐃᐃᐃΔⵠⵠ: "img/night-skin163.png",
    ΔΔⲆΔⵠᐃᐃ: "img/day-skin164.png",
    ⲆⵠᐃⲆᐃΔⵠ: "img/night-skin164.png",
    ᐃⵠⵠᐃⵠⵠᐃ: "img/day-skin165.png",
    ⲆᐃΔⵠⵠᐃⵠ: "img/night-skin165.png",
    ΔⵠΔᐃⵠⵠΔ: "img/day-skin166.png",
    ⵠⵠᐃⵠᐃⲆⲆ: "img/night-skin166.png",
    ⵠᐃⵠΔΔⵠⲆ: "img/day-skin167.png",
    ⲆⵠΔⲆΔⲆⲆ: "img/night-skin167.png",
    ⵠΔⵠᐃⲆᐃᐃ: "img/day-skin168.png",
    ΔⵠΔΔΔΔᐃ: "img/night-skin168.png",
    ⵠⵠΔᐃΔⲆΔ: "img/day-skin169.png",
    ⲆⲆᐃΔᐃⵠⵠ: "img/night-skin169.png",
    ᐃΔΔⵠᐃⲆΔ: "img/day-skin170.png",
    ΔᐃΔⵠⵠᐃⵠ: "img/night-skin170.png",
    ⲆⵠᐃⲆⲆⵠⵠ: "img/day-skin171.png",
    ΔᐃΔΔᐃⲆΔ: "img/night-skin171.png",
    ⵠΔⵠⲆⵠⲆⲆ: "img/day-skin172.png",
    ⵠΔᐃⵠΔⵠⲆ: "img/night-skin172.png",
    ⵠⲆⵠΔᐃⲆⵠ: "img/day-skin173.png",
    ᐃΔΔΔⵠⲆⲆ: "img/night-skin173.png",
    ΔᐃΔΔΔⲆΔ: "img/day-skin174.png",
    ᐃⲆⲆΔⵠΔΔ: "img/night-skin174.png",
    ΔΔⲆⲆⲆⲆᐃ: "img/day-skin175.png",
    ⵠΔᐃⵠΔΔᐃ: "img/night-skin175.png",
    ᐃᐃⲆⵠΔⵠⲆ: "img/day-skin176.png",
    ⲆⲆⲆΔΔᐃⲆ: "img/night-skin176.png",
    ᐃⵠΔⵠⲆᐃⵠ: "img/day-skin177.png",
    ⲆⲆᐃⵠⲆᐃⲆ: "img/night-skin177.png",
    ΔᐃⵠᐃⲆⲆΔ: "img/day-skin178.png",
    ⵠⵠⲆΔᐃⵠⵠ: "img/night-skin178.png",
    ⲆⵠⵠΔᐃⲆⵠ: "img/day-skin179.png",
    ⲆⲆᐃⲆⲆⵠΔ: "img/night-skin179.png",
    ⲆΔᐃΔΔⲆⵠ: "img/day-skin180.png",
    ΔⵠΔΔᐃⵠᐃ: "img/night-skin180.png",
    ⲆᐃΔⵠⲆⵠΔ: "img/day-skin181.png",
    ⲆᐃⵠⲆΔᐃΔ: "img/night-skin181.png",
    ⲆⲆⲆΔⵠΔΔ: "img/day-skin182.png",
    ⲆΔΔⵠⵠⲆⲆ: "img/night-skin182.png",
    ᐃΔⵠᐃᐃⲆᐃ: "img/day-skin183.png",
    ΔⵠᐃᐃⵠΔⵠ: "img/night-skin183.png",
    ⵠⲆᐃⲆⵠΔⵠ: "img/day-skin184.png",
    ⵠᐃⵠΔΔⵠⵠ: "img/night-skin184.png",
    ⲆⵠⲆᐃᐃΔᐃ: "img/day-skin185.png",
    ᐃⲆᐃⵠᐃΔΔ: "img/night-skin185.png",
    ᐃⵠΔⵠⵠΔᐃ: "img/day-skin186.png",
    ᐃᐃΔⲆᐃⵠᐃ: "img/night-skin186.png",
    ⲆⵠⲆᐃᐃΔⵠ: "img/day-skin187.png",
    ΔΔᐃⵠᐃⲆⵠ: "img/night-skin187.png",
    ᐃᐃⲆᐃΔΔⲆ: "img/day-skin188.png",
    ⵠⵠΔΔΔᐃⵠ: "img/night-skin188.png",
    ⵠⲆΔⵠᐃᐃΔ: "img/day-skin189.png",
    ⲆⲆᐃⲆΔⲆᐃ: "img/night-skin189.png",
    ⲆΔⵠΔⵠⵠᐃ: "img/day-skin190.png",
    ⲆΔᐃΔⲆᐃΔ: "img/night-skin190.png",
    ⵠⵠⲆᐃⲆⲆᐃ: "img/day-skin191.png",
    ⵠⵠⲆⲆᐃΔᐃ: "img/night-skin191.png",
    ᐃᐃⵠⲆⲆⲆᐃ: "img/day-skin192.png",
    ⵠΔΔᐃᐃⲆᐃ: "img/night-skin192.png",
    ᐃⲆΔᐃⵠⲆΔ: "img/day-skin193.png",
    ΔⲆⲆᐃⲆⲆΔ: "img/night-skin193.png",
    ⵠⵠⲆⲆⲆⲆΔ: "img/day-skin194.png",
    ᐃⲆΔᐃΔⲆᐃ: "img/night-skin194.png",
    ᐃⵠⵠⲆⲆⵠΔ: "img/day-skin195.png",
    ⵠⲆΔΔⲆΔⲆ: "img/night-skin195.png",
    ⲆΔⵠⲆᐃΔⲆ: "img/day-skin196.png",
    ⵠⵠⵠΔΔⵠⲆ: "img/night-skin196.png",
    ΔᐃⲆᐃᐃⵠⲆ: "img/day-skin197.png",
    ᐃⵠⵠᐃᐃΔⲆ: "img/night-skin197.png",
    ⲆΔⲆᐃᐃⲆᐃ: "img/day-skin198.png",
    ΔᐃᐃΔⲆΔⵠ: "img/night-skin198.png",
    ⵠⵠⵠⵠⲆⲆⵠ: "img/day-skin199.png",
    ΔᐃⵠⲆᐃⲆⲆ: "img/night-skin199.png",
    ⵠᐃⲆΔᐃΔⲆ: "img/day-skin200.png",
    ΔⵠᐃⵠⲆᐃΔ: "img/night-skin200.png",
    ᐃΔⵠᐃⵠⵠⵠ: "img/day-skin201.png",
    ᐃΔⲆΔᐃⵠΔ: "img/night-skin201.png",
    ⲆΔᐃⵠⲆⵠⵠ: "img/day-skin202.png",
    ⲆΔⲆⲆⵠΔⲆ: "img/night-skin202.png",
    ⵠᐃⵠⲆᐃΔᐃ: "img/day-skin203.png",
    ⲆΔᐃΔⲆⵠΔ: "img/night-skin203.png",
    ᐃᐃⵠⲆᐃΔⲆ: "img/day-skin204.png",
    ΔⵠΔⵠᐃⲆⵠ: "img/night-skin204.png",
    ᐃΔⵠⲆⵠⵠᐃ: "img/day-skin205.png",
    ⵠΔⵠᐃΔΔⲆ: "img/night-skin205.png",
    ⲆᐃᐃⵠΔΔⲆ: "img/day-skin206.png",
    ᐃⵠᐃᐃᐃΔΔ: "img/night-skin206.png",
    ΔΔᐃⲆⵠⵠΔ: "img/day-skin207.png",
    ΔⵠΔⲆᐃⵠⵠ: "img/night-skin207.png",
    ⲆⲆⵠⲆΔᐃᐃ: "img/day-skin208.png",
    ⲆⲆΔΔΔᐃᐃ: "img/night-skin208.png",
    ᐃᐃΔΔᐃΔΔ: "img/day-skin209.png",
    ΔΔᐃΔⵠⵠⲆ: "img/night-skin209.png",
    ⵠⲆΔΔⲆⲆⵠ: "img/day-skin210.png",
    ᐃⵠᐃΔΔᐃⵠ: "img/night-skin210.png",
    Δⵠⵠⵠⵠᐃᐃ: "img/day-skin211.png",
    ⵠᐃⲆΔΔⲆᐃ: "img/night-skin211.png",
    ⲆΔᐃⲆΔⲆΔ: "img/day-skin212.png",
    ᐃⵠⲆⵠⲆΔΔ: "img/night-skin212.png",
    ΔᐃⲆⲆᐃᐃᐃ: "img/day-hand-skin0.png",
    ΔΔΔᐃⵠⲆΔ: "img/night-hand-skin0.png",
    ΔΔᐃΔⵠⵠΔ: "img/day-hand-skin1.png",
    ⵠⵠⵠᐃΔΔᐃ: "img/night-hand-skin1.png",
    ᐃᐃᐃⲆⵠᐃⵠ: "img/day-hand-skin2.png",
    ΔᐃⲆⵠΔΔⲆ: "img/night-hand-skin2.png",
    ΔⲆΔΔⵠⵠᐃ: "img/day-hand-skin3.png",
    ᐃⲆᐃⲆΔⵠΔ: "img/night-hand-skin3.png",
    ᐃΔΔⵠⲆΔᐃ: "img/day-hand-skin4.png",
    ⵠΔΔᐃⲆⲆΔ: "img/night-hand-skin4.png",
    ⲆⵠⲆΔⲆⲆΔ: "img/day-hand-skin5.png",
    ᐃⲆⵠᐃΔΔⲆ: "img/night-hand-skin5.png",
    ⲆⲆᐃⵠᐃⲆΔ: "img/day-hand-skin6.png",
    ⲆᐃᐃΔΔⲆⵠᐃᐃ: "img/night-hand-skin6.png",
    ᐃⵠⲆΔⲆᐃΔ: "img/day-hand-skin6.png",
    ⲆΔⵠⵠᐃⲆⲆ: "img/night-hand-skin6.png",
    ⵠⲆΔⵠⵠⵠⲆ: "img/day-hand-skin8.png",
    ᐃⵠᐃⲆⵠⲆⲆ: "img/night-hand-skin8.png",
    ΔⲆΔΔΔⵠⵠ: "img/day-hand-skin9.png",
    ΔⲆⲆⲆΔΔⲆ: "img/night-hand-skin9.png",
    ᐃᐃΔⵠⵠᐃΔ: "img/day-hand-skin10.png",
    ΔⲆᐃΔΔΔⲆ: "img/night-hand-skin10.png",
    ᐃΔᐃⲆⵠⵠⵠ: "img/day-hand-skin11.png",
    ⵠⲆⲆⲆⲆⲆΔ: "img/night-hand-skin11.png",
    ⲆΔΔⵠⲆᐃⵠ: "img/day-hand-skin12.png",
    ⵠⲆΔⵠᐃⵠᐃ: "img/night-hand-skin12.png",
    ΔᐃᐃⵠⵠᐃΔ: "img/day-hand-skin13.png",
    ⲆⵠᐃⵠⲆⵠⲆ: "img/night-hand-skin13.png",
    ᐃΔⵠⵠΔΔⲆ: "img/day-hand-skin14.png",
    ᐃΔⵠΔⲆⲆᐃ: "img/night-hand-skin14.png",
    ⲆⲆⲆⲆΔⲆΔ: "img/day-hand-skin15.png",
    ⵠΔⲆⵠⲆⵠⵠ: "img/night-hand-skin15.png",
    ⲆᐃΔᐃΔⵠⵠ: "img/day-hand-skin16.png",
    ᐃⲆᐃⲆⲆⵠᐃ: "img/night-hand-skin16.png",
    ΔⲆΔⵠⵠᐃⵠ: "img/day-hand-skin17.png",
    ᐃᐃⵠΔⲆᐃᐃ: "img/night-hand-skin17.png",
    ΔⲆⵠΔΔΔᐃ: "img/day-hand-skin18.png",
    ᐃⲆⵠᐃⲆᐃⲆ: "img/night-hand-skin18.png",
    ᐃᐃⲆΔⵠⲆᐃ: "img/day-hand-skin19.png",
    ᐃⵠⲆᐃᐃⵠΔ: "img/night-hand-skin19.png",
    ΔⵠⵠⵠⲆΔⵠ: "img/day-hand-skin20.png",
    ⵠᐃⵠⲆⲆⵠΔ: "img/night-hand-skin20.png",
    ΔΔᐃⵠⲆⲆⲆ: "img/day-hand-skin21.png",
    ⵠⲆⵠΔΔΔⵠ: "img/night-hand-skin21.png",
    ⵠⵠᐃⵠΔⵠⲆ: "img/day-hand-skin22.png",
    ᐃᐃⲆᐃᐃⲆΔ: "img/night-hand-skin22.png",
    ᐃⲆⲆᐃᐃᐃΔ: "img/day-hand-skin23.png",
    ΔⵠᐃⲆΔΔⵠ: "img/night-hand-skin23.png",
    ⲆⵠⵠⲆⵠⲆⲆ: "img/day-hand-skin24.png",
    ⲆⵠⵠΔⲆΔⲆ: "img/night-hand-skin24.png",
    ⵠⵠΔⵠⵠⵠⵠ: "img/day-hand-skin25.png",
    ΔΔⲆΔᐃΔΔ: "img/night-hand-skin25.png",
    ΔΔⲆⲆᐃⵠⵠ: "img/day-hand-skin26.png",
    ΔⵠΔᐃⵠⲆⲆ: "img/night-hand-skin26.png",
    ⵠᐃⵠⲆⲆΔⲆ: "img/day-hand-skin27.png",
    ⲆⲆⲆⵠⲆᐃⲆ: "img/night-hand-skin27.png",
    ΔᐃⲆⲆⵠⵠΔ: "img/day-hand-skin28.png",
    ⵠⲆΔⵠⵠᐃΔ: "img/night-hand-skin28.png",
    ΔⵠΔⵠΔᐃⵠ: "img/day-hand-skin29.png",
    ΔⵠᐃᐃᐃᐃⲆ: "img/night-hand-skin29.png",
    ⲆⵠⲆⲆⲆᐃⵠ: "img/day-hand-skin30.png",
    ΔⲆΔᐃⲆᐃΔ: "img/night-hand-skin30.png",
    ΔΔΔᐃⲆΔⵠ: "img/day-hand-skin31.png",
    ᐃᐃⲆⵠᐃᐃΔ: "img/night-hand-skin31.png",
    ᐃⵠᐃΔⲆⵠⲆ: "img/day-hand-skin32.png",
    ⲆᐃⵠΔⲆᐃⵠ: "img/night-hand-skin32.png",
    ⵠⲆⲆⲆⲆⵠᐃ: "img/day-hand-skin33.png",
    ᐃΔⵠᐃᐃⵠᐃ: "img/night-hand-skin33.png",
    ⵠⲆΔᐃⵠᐃⲆ: "img/day-hand-skin34.png",
    ⵠⲆᐃⵠⲆᐃⵠ: "img/night-hand-skin34.png",
    ⵠⵠⵠΔⵠⲆⲆ: "img/day-hand-skin35.png",
    ⲆΔΔⵠⵠⵠᐃ: "img/night-hand-skin35.png",
    ΔⲆΔⵠΔᐃⲆ: "img/day-hand-skin36.png",
    ᐃΔⲆⲆⲆᐃⵠ: "img/night-hand-skin36.png",
    ⲆᐃᐃⵠΔⲆᐃ: "img/day-hand-skin37.png",
    ΔᐃⵠΔᐃΔᐃ: "img/night-hand-skin37.png",
    ⵠᐃⵠⵠⲆᐃΔ: "img/day-hand-skin38.png",
    ⲆᐃᐃⵠⲆᐃⵠ: "img/night-hand-skin38.png",
    ⲆⵠⵠⲆΔⵠⲆ: "img/day-hand-skin39.png",
    ⲆⵠᐃΔⵠᐃᐃ: "img/night-hand-skin39.png",
    ᐃΔᐃⲆⵠⵠᐃ: "img/day-hand-skin40.png",
    ΔⵠⵠᐃⵠⲆᐃ: "img/night-hand-skin40.png",
    ⵠᐃᐃⲆᐃΔΔ: "img/day-hand-skin41.png",
    ⲆΔⲆⲆᐃⵠⲆ: "img/night-hand-skin41.png",
    ᐃᐃⲆᐃⲆⲆΔ: "img/day-hand-skin42.png",
    ⵠΔⵠⵠⲆΔΔ: "img/night-hand-skin42.png",
    ⲆΔᐃᐃΔᐃᐃ: "img/day-hand-skin43.png",
    ᐃⵠᐃⵠⵠᐃᐃ: "img/night-hand-skin43.png",
    ⵠⲆⲆΔⲆⲆⲆ: "img/day-hand-skin16.png",
    ⵠᐃΔⲆⲆΔⲆ: "img/night-hand-skin16.png",
    ⲆΔΔⲆⵠⲆⲆ: "img/day-hand-skin45.png",
    ΔⲆΔᐃⲆⲆⵠ: "img/night-hand-skin45.png",
    ⲆⲆⲆⵠⵠᐃᐃ: "img/day-hand-skin46.png",
    ⲆⲆⲆᐃⵠⲆⵠ: "img/night-hand-skin46.png",
    ⲆᐃΔⲆΔⲆΔ: "img/day-hand-skin47.png",
    ΔⲆⵠⵠⲆⲆᐃ: "img/night-hand-skin47.png",
    ᐃΔⵠΔⲆⵠⵠ: "img/day-hand-skin48.png",
    ⲆᐃⵠⵠΔΔΔ: "img/night-hand-skin48.png",
    ⵠᐃⵠⲆᐃᐃⲆ: "img/day-hand-skin49.png",
    ⲆⲆΔᐃⲆⲆΔ: "img/night-hand-skin49.png",
    ⵠⲆΔⲆⵠΔΔ: "img/day-hand-skin49.png",
    ᐃⲆᐃΔᐃΔⵠ: "img/night-hand-skin49.png",
    ⲆⲆⲆⵠᐃⲆⵠ: "img/day-hand-skin51.png",
    ᐃⲆΔⵠⵠΔᐃ: "img/night-hand-skin51.png",
    ⵠⲆΔⲆⵠᐃΔ: "img/day-hand-skin52.png",
    ⲆᐃΔΔᐃᐃᐃ: "img/night-hand-skin52.png",
    ᐃΔΔⲆⲆⵠⲆ: "img/day-hand-skin53.png",
    ⵠⲆΔᐃΔⲆⲆ: "img/night-hand-skin53.png",
    ⲆⲆⲆⲆΔⵠΔ: "img/day-hand-skin53.png",
    ⲆΔⲆΔᐃⲆⲆ: "img/night-hand-skin53.png",
    ᐃⲆΔΔⵠⲆⲆ: "img/day-hand-skin55.png",
    ΔⵠⵠⲆⵠᐃⲆ: "img/night-hand-skin55.png",
    ΔⲆᐃᐃΔᐃΔ: "img/day-hand-skin56.png",
    ⵠᐃΔᐃⲆΔᐃ: "img/night-hand-skin56.png",
    ⲆⲆᐃⵠⲆΔᐃ: "img/day-hand-skin57.png",
    ⲆⲆᐃⲆΔΔᐃ: "img/night-hand-skin57.png",
    ΔΔΔΔⲆⵠΔ: "img/day-hand-skin58.png",
    ᐃⲆⲆΔⵠⵠᐃ: "img/night-hand-skin58.png",
    ⵠᐃⵠⲆᐃΔΔ: "img/day-hand-skin59.png",
    ᐃⵠΔⲆⵠⲆⲆ: "img/night-hand-skin59.png",
    ΔⵠΔΔⲆΔⵠ: "img/day-hand-skin61.png",
    ᐃⲆΔᐃᐃⵠⵠ: "img/night-hand-skin61.png",
    ⲆᐃᐃⵠⵠᐃΔ: "img/day-hand-skin61.png",
    ΔΔⵠⵠΔᐃⵠ: "img/night-hand-skin61.png",
    ⵠᐃᐃᐃΔⲆᐃ: "img/day-hand-skin62.png",
    ⵠΔΔΔⲆⵠᐃ: "img/night-hand-skin62.png",
    ᐃᐃΔᐃᐃⵠᐃ: "img/day-hand-skin63.png",
    ⲆⲆⵠⲆΔΔⲆ: "img/night-hand-skin63.png",
    ᐃΔⵠᐃⲆⵠΔ: "img/day-hand-skin64.png",
    ΔⵠᐃᐃⲆΔⲆ: "img/night-hand-skin64.png",
    ⲆⲆΔΔⵠΔⲆ: "img/day-hand-skin65.png",
    ΔⲆΔⲆΔⲆⲆ: "img/night-hand-skin65.png",
    ᐃⲆᐃⵠᐃⲆᐃ: "img/day-hand-skin66.png",
    ΔΔᐃⲆᐃΔᐃ: "img/night-hand-skin66.png",
    ᐃΔⵠΔᐃⵠⵠ: "img/day-hand-skin67.png",
    ᐃⵠᐃΔⲆᐃΔ: "img/night-hand-skin67.png",
    ⲆᐃᐃⵠⵠΔⵠ: "img/day-hand-skin68.png",
    ⵠⲆⲆᐃΔΔΔ: "img/night-hand-skin68.png",
    ⲆⲆⵠΔⲆⲆᐃ: "img/day-hand-skin69.png",
    ⵠⵠᐃΔⲆⲆⵠ: "img/night-hand-skin69.png",
    ᐃⲆⵠⲆΔⲆΔ: "img/day-hand-skin70.png",
    ⲆᐃᐃⵠⲆⵠⵠ: "img/night-hand-skin70.png",
    ⲆⲆΔⵠᐃⲆⵠ: "img/day-hand-skin71.png",
    ᐃΔΔⲆⵠⲆⲆ: "img/night-hand-skin71.png",
    ᐃⵠΔⲆΔΔⲆ: "img/day-hand-skin72.png",
    ⵠⲆᐃⲆⲆᐃⲆ: "img/night-hand-skin72.png",
    ᐃΔᐃⵠΔⵠᐃ: "img/day-hand-skin73.png",
    ⵠⵠΔΔᐃⲆⵠ: "img/night-hand-skin73.png",
    ⵠΔΔⵠᐃΔΔ: "img/day-hand-skin74.png",
    ⵠΔⵠΔᐃᐃᐃ: "img/night-hand-skin74.png",
    ᐃΔⵠᐃᐃᐃⲆ: "img/day-hand-skin75.png",
    ⵠᐃⲆᐃΔᐃΔ: "img/night-hand-skin75.png",
    ⲆⵠΔⲆⲆᐃⵠ: "img/day-hand-skin76.png",
    ΔⵠⵠΔᐃⲆⲆ: "img/night-hand-skin76.png",
    ᐃᐃⵠΔᐃⲆΔ: "img/day-hand-skin77.png",
    ⲆⵠⵠⵠᐃⲆⲆ: "img/night-hand-skin77.png",
    ΔⲆⵠⲆⲆᐃΔ: "img/day-hand-skin78.png",
    ⵠⵠΔⵠⲆⲆᐃ: "img/night-hand-skin78.png",
    ⵠⲆᐃᐃⲆⵠᐃ: "img/day-hand-skin79.png",
    ΔᐃᐃᐃⲆᐃΔ: "img/night-hand-skin79.png",
    ⵠᐃΔΔᐃⲆⲆ: "img/day-hand-skin80.png",
    ᐃΔΔⲆⲆᐃᐃ: "img/night-hand-skin80.png",
    ᐃⵠⲆᐃⲆⵠⵠ: "img/day-hand-skin81.png",
    ⲆⲆΔⲆᐃᐃΔ: "img/night-hand-skin81.png",
    ΔᐃᐃⵠᐃΔΔ: "img/day-hand-skin82.png",
    ᐃΔⵠⵠᐃⲆΔ: "img/night-hand-skin82.png",
    ΔⵠⲆΔⵠⵠⵠ: "img/day-hand-skin83.png",
    ⵠΔⲆᐃⵠⲆᐃ: "img/night-hand-skin83.png",
    ᐃΔΔᐃⵠᐃⵠ: "img/day-hand-skin84.png",
    ΔᐃΔΔΔⵠᐃ: "img/night-hand-skin84.png",
    ⵠⲆⲆΔⵠⲆⲆ: "img/day-hand-skin85.png",
    ΔᐃΔⲆΔⲆⵠ: "img/night-hand-skin85.png",
    ΔⵠⵠⲆᐃⵠΔ: "img/day-hand-skin86.png",
    ⵠΔΔᐃᐃⵠᐃ: "img/night-hand-skin86.png",
    ᐃⲆⲆΔⵠΔⲆ: "img/day-hand-skin87.png",
    ΔⵠΔΔΔᐃΔ: "img/night-hand-skin87.png",
    ⵠⲆⲆⲆⲆⲆⵠ: "img/day-hand-skin88.png",
    ⵠⲆΔᐃⲆⵠⲆ: "img/night-hand-skin88.png",
    ᐃⲆΔⲆⵠᐃᐃ: "img/day-hand-skin89.png",
    ΔⲆⵠⲆⵠⵠⵠ: "img/night-hand-skin89.png",
    ΔΔⵠᐃⵠᐃᐃ: "img/day-hand-skin90.png",
    ⲆⲆᐃΔⲆⵠΔ: "img/night-hand-skin90.png",
    ⵠᐃΔⵠⵠᐃΔ: "img/day-hand-skin91.png",
    ⲆⲆᐃⲆⲆᐃᐃ: "img/night-hand-skin91.png",
    ⵠⵠⵠᐃΔⵠΔ: "img/day-hand-skin92.png",
    ΔᐃⵠΔⲆⵠᐃ: "img/night-hand-skin92.png",
    ΔΔⵠΔⲆΔᐃ: "img/day-hand-skin93.png",
    ⲆⵠᐃⵠΔⵠᐃ: "img/night-hand-skin93.png",
    ⲆⵠΔᐃⲆⵠⲆ: "img/day-hand-skin94.png",
    ᐃΔᐃⵠⵠⵠⵠ: "img/night-hand-skin94.png",
    ΔⲆΔΔⲆᐃᐃ: "img/day-hand-skin95.png",
    ΔⵠⲆⵠⲆⲆᐃ: "img/night-hand-skin95.png",
    ⵠᐃⲆⲆⲆⵠⵠ: "img/day-hand-skin96.png",
    ⵠⲆⲆⵠⵠⵠⲆ: "img/night-hand-skin96.png",
    ᐃⵠⲆᐃⲆᐃⵠ: "img/day-hand-skin97.png",
    ⵠⵠΔⵠⲆⵠⲆ: "img/night-hand-skin97.png",
    ᐃⲆⲆΔⲆⲆⵠ: "img/day-hand-skin98.png",
    ⲆᐃⵠΔΔⲆⲆ: "img/night-hand-skin98.png",
    ΔⵠΔᐃⲆⵠᐃ: "img/day-hand-skin99.png",
    ⵠΔΔⲆᐃᐃᐃ: "img/night-hand-skin99.png",
    ⵠⲆᐃᐃⲆᐃⵠ: "img/day-hand-skin100.png",
    ⲆΔⲆⲆⲆΔⲆ: "img/night-hand-skin100.png",
    ΔᐃᐃᐃⲆΔΔ: "img/day-hand-skin101.png",
    ⵠΔⲆᐃⲆⲆᐃ: "img/night-hand-skin101.png",
    ᐃΔⵠᐃᐃΔⲆ: "img/day-hand-skin102.png",
    ⲆΔⵠᐃⵠᐃᐃ: "img/night-hand-skin102.png",
    ΔΔΔᐃⲆⲆΔ: "img/day-hand-skin103.png",
    ΔᐃΔᐃΔⵠⵠ: "img/night-hand-skin103.png",
    ᐃΔΔᐃⵠᐃᐃ: "img/day-hand-skin104.png",
    ΔⲆΔΔᐃⵠΔ: "img/night-hand-skin104.png",
    ΔⲆΔⵠᐃⵠᐃ: "img/day-hand-skin105.png",
    ᐃⲆⲆⲆⲆⵠⵠ: "img/night-hand-skin105.png",
    ⵠⵠΔⵠⵠⲆⲆ: "img/day-hand-skin106.png",
    ⵠΔΔⲆⵠᐃⵠ: "img/night-hand-skin106.png",
    ⵠᐃⲆⵠⵠᐃⵠ: "img/day-hand-skin107.png",
    ⲆᐃⵠΔⵠΔⵠ: "img/night-hand-skin107.png",
    ᐃΔⲆΔᐃΔⲆ: "img/day-hand-skin108.png",
    Δⵠⵠⵠⵠⵠⵠ: "img/night-hand-skin108.png",
    ΔΔⵠᐃΔⵠⲆ: "img/day-hand-skin109.png",
    ΔⵠᐃⲆΔΔⲆ: "img/night-hand-skin109.png",
    ᐃᐃⲆᐃⵠⵠᐃ: "img/day-hand-skin110.png",
    ΔⲆⵠⵠΔᐃΔ: "img/night-hand-skin110.png",
    ᐃⲆΔΔΔᐃⵠ: "img/day-hand-skin111.png",
    ᐃΔⲆⵠᐃⲆⲆ: "img/night-hand-skin111.png",
    ΔⵠⲆΔᐃΔⲆ: "img/day-hand-skin112.png",
    ⲆⲆⲆΔⲆⲆⵠ: "img/night-hand-skin112.png",
    ⵠⲆΔⵠᐃⵠⵠⵠᐃ: "img/day-hand-skin113.png",
    ⲆΔⵠⲆⵠⲆⵠΔⵠ: "img/night-hand-skin113.png",
    ⲆᐃⲆΔΔᐃⲆ: "img/day-hand-skin114.png",
    ᐃⲆⵠᐃΔⵠΔ: "img/night-hand-skin114.png",
    ᐃᐃΔᐃⲆⲆⵠ: "img/day-hand-skin115.png",
    ⵠⲆⲆⵠΔⵠⵠ: "img/night-hand-skin115.png",
    ⵠΔΔΔᐃⵠΔ: "img/day-hand-skin116.png",
    ⲆΔΔⲆᐃΔΔ: "img/night-hand-skin116.png",
    ⵠᐃᐃⵠΔᐃⵠ: "img/day-hand-skin117.png",
    ΔⲆᐃⲆᐃⵠΔ: "img/night-hand-skin117.png",
    ⵠⲆⵠⵠΔΔⲆ: "img/day-hand-skin118.png",
    ᐃⵠⲆΔⵠΔⲆ: "img/night-hand-skin118.png",
    ⲆⲆΔΔᐃΔᐃ: "img/day-hand-skin119.png",
    ᐃⵠⵠⲆⲆⵠⵠ: "img/night-hand-skin119.png",
    ᐃᐃⲆⲆⵠⲆⵠ: "img/day-hand-skin120.png",
    ᐃⵠΔⲆⲆⵠᐃ: "img/night-hand-skin120.png",
    ⲆΔΔᐃΔᐃᐃ: "img/day-hand-skin122.png",
    ⲆΔᐃⲆᐃΔΔ: "img/night-hand-skin122.png",
    ⵠⲆᐃΔⵠⲆⵠ: "img/day-hand-skin122.png",
    ΔΔΔⵠΔΔΔ: "img/night-hand-skin122.png",
    ⵠⲆᐃΔᐃⵠᐃ: "img/day-hand-skin122.png",
    ΔⵠⵠᐃⲆⲆᐃ: "img/night-hand-skin122.png",
    ΔⵠᐃⲆᐃⲆᐃ: "img/day-hand-skin124.png",
    ᐃΔᐃΔⲆΔΔ: "img/night-hand-skin124.png",
    ⲆΔⲆΔΔⵠΔ: "img/day-hand-skin125.png",
    ΔᐃⵠΔΔΔΔ: "img/night-hand-skin125.png",
    ᐃᐃᐃⵠΔⵠᐃ: "img/day-hand-skin126.png",
    ᐃᐃᐃΔᐃᐃᐃ: "img/night-hand-skin126.png",
    ⲆⲆΔΔⵠⲆⲆ: "img/day-hand-skin127.png",
    ΔⵠⵠᐃⲆⵠⲆ: "img/night-hand-skin127.png",
    ⵠΔΔΔⲆⵠⵠ: "img/day-hand-skin128.png",
    ⵠⲆᐃⵠΔⵠⵠ: "img/night-hand-skin128.png",
    ⵠⵠΔⵠⲆⵠΔ: "img/day-hand-skin129.png",
    ⲆⵠΔⵠᐃⵠⵠ: "img/night-hand-skin129.png",
    ᐃⲆⲆᐃⲆΔᐃ: "img/day-hand-skin130.png",
    ⵠⵠΔΔᐃᐃⵠ: "img/night-hand-skin130.png",
    ᐃⵠΔⲆΔΔⵠ: "img/day-hand-skin131.png",
    ⵠⲆⵠⵠⲆᐃΔ: "img/night-hand-skin131.png",
    ⵠΔΔⵠᐃⲆⲆ: "img/day-hand-skin130.png",
    ᐃᐃΔⲆᐃΔᐃ: "img/night-hand-skin130.png",
    ⲆᐃⵠⲆᐃΔⲆ: "img/day-hand-skin133.png",
    ⵠⲆΔⵠΔⵠⲆ: "img/night-hand-skin133.png",
    ΔⵠΔᐃᐃⲆⵠ: "img/day-hand-skin134.png",
    ⵠⲆᐃᐃⵠᐃᐃ: "img/night-hand-skin134.png",
    ᐃᐃᐃᐃⵠⲆΔ: "img/day-hand-skin135.png",
    ⲆⲆⵠΔⲆᐃᐃ: "img/night-hand-skin135.png",
    ᐃΔⵠᐃⵠⲆⵠ: "img/day-hand-skin136.png",
    ΔⲆᐃⲆᐃⵠⲆ: "img/night-hand-skin136.png",
    ΔᐃⲆᐃⲆᐃΔ: "img/day-hand-skin137.png",
    ⲆⲆᐃᐃⵠΔⲆ: "img/night-hand-skin137.png",
    ⵠⲆⵠᐃᐃΔΔ: "img/day-hand-skin138.png",
    ᐃΔⲆⲆᐃⵠⵠ: "img/night-hand-skin138.png",
    ᐃⵠᐃΔⲆⲆᐃ: "img/day-hand-skin139.png",
    ⵠⲆᐃⲆΔⵠᐃ: "img/night-hand-skin139.png",
    ᐃΔⲆⲆᐃⲆⲆ: "img/day-hand-skin140.png",
    ᐃΔⵠⵠΔⵠⲆ: "img/night-hand-skin140.png",
    ᐃⲆⲆᐃⵠΔⲆ: "img/day-hand-skin141.png",
    ΔᐃⵠᐃΔⵠⲆ: "img/night-hand-skin141.png",
    ⵠΔⵠΔⵠⵠⲆ: "img/day-hand-skin142.png",
    ᐃⵠᐃᐃᐃⵠΔ: "img/night-hand-skin142.png",
    ⲆΔᐃⵠⲆⵠΔ: "img/day-hand-skin143.png",
    ᐃᐃⵠᐃⲆᐃΔ: "img/night-hand-skin143.png",
    ⵠᐃᐃᐃⲆⲆⵠ: "img/day-hand-skin144.png",
    ΔⵠᐃⲆⲆΔⵠ: "img/night-hand-skin144.png",
    ᐃᐃᐃΔΔⲆΔ: "img/day-hand-skin145.png",
    ⵠΔΔⵠⲆᐃⲆ: "img/night-hand-skin145.png",
    ⲆⲆⵠⲆⲆᐃⲆ: "img/day-hand-skin146.png",
    ⲆᐃΔΔⵠⲆⵠ: "img/night-hand-skin146.png",
    ΔΔⵠᐃⲆᐃΔ: "img/day-hand-skin147.png",
    ΔΔⵠⵠⵠᐃΔ: "img/night-hand-skin147.png",
    ᐃⵠⲆⲆⲆⵠⵠ: "img/day-hand-skin148.png",
    ⵠⲆᐃΔᐃᐃᐃ: "img/night-hand-skin148.png",
    ⵠᐃⲆⲆᐃᐃⵠ: "img/day-hand-skin149.png",
    ⵠᐃΔΔᐃⲆⵠ: "img/night-hand-skin149.png",
    ΔΔⵠᐃΔΔⵠ: "img/day-hand-skin150.png",
    Ⲇⵠⵠⵠⵠᐃⵠ: "img/night-hand-skin150.png",
    ΔΔⵠᐃΔⲆⲆ: "img/day-hand-skin151.png",
    ⵠᐃⵠΔΔⲆΔ: "img/night-hand-skin151.png",
    ᐃΔⲆᐃⵠⵠΔ: "img/day-hand-skin152.png",
    ⵠᐃⲆᐃᐃⵠᐃ: "img/night-hand-skin152.png",
    ⲆⲆⲆᐃᐃⲆⲆ: "img/day-hand-skin153.png",
    ᐃᐃⵠΔⲆⲆⲆ: "img/night-hand-skin153.png",
    ᐃᐃⲆⲆΔⲆⵠ: "img/day-hand-skin154.png",
    ΔⵠΔⵠⲆⲆⵠ: "img/night-hand-skin154.png",
    ⵠⲆⵠᐃᐃΔⲆ: "img/day-hand-skin155.png",
    ⵠⵠᐃΔⲆⲆΔ: "img/night-hand-skin155.png",
    ⵠᐃⵠᐃⲆᐃⵠ: "img/day-hand-skin156.png",
    ⵠᐃⲆⵠᐃΔΔ: "img/night-hand-skin156.png",
    ᐃⲆⵠΔΔⵠΔ: "img/day-hand-skin157.png",
    ᐃⵠΔⲆΔΔΔ: "img/night-hand-skin157.png",
    ⲆΔⲆΔⵠⲆΔ: "img/day-hand-skin158.png",
    ⵠΔⲆᐃⲆΔΔ: "img/night-hand-skin158.png",
    ⵠⲆⲆᐃⲆΔⲆ: "img/day-hand-skin159.png",
    ᐃΔⵠⵠΔᐃⲆ: "img/night-hand-skin159.png",
    ⲆⲆⵠᐃᐃⵠΔ: "img/day-hand-skin160.png",
    ⵠΔⲆⵠΔⲆΔ: "img/night-hand-skin160.png",
    ⲆⲆΔᐃⲆᐃⵠ: "img/day-hand-skin161.png",
    ᐃΔΔⲆᐃⵠⲆ: "img/night-hand-skin161.png",
    ⲆⲆⵠⲆᐃΔΔ: "img/day-hand-skin162.png",
    ⲆⲆΔⵠⵠᐃⲆ: "img/night-hand-skin162.png",
    ⲆⲆᐃⵠᐃⵠⲆ: "img/day-hand-skin163.png",
    ᐃⲆⵠⵠΔⵠΔ: "img/night-hand-skin163.png",
    ⲆⲆΔᐃⲆⵠⵠ: "img/day-hand-skin164.png",
    ⵠⵠⵠⲆΔᐃⲆ: "img/night-hand-skin164.png",
    ΔᐃᐃⵠⲆⵠΔ: "img/day-hand-skin165.png",
    ⲆⲆⵠⲆⲆΔⵠ: "img/night-hand-skin165.png",
    ΔΔΔⲆΔΔⲆ: "img/day-hand-skin166.png",
    ᐃΔᐃⲆΔΔⵠ: "img/night-hand-skin166.png",
    ΔⲆⵠᐃᐃⵠⵠ: "img/day-hand-skin167.png",
    ⲆΔⲆⵠⲆΔⵠ: "img/night-hand-skin167.png",
    ⲆΔΔⵠΔⵠᐃ: "img/day-hand-skin168.png",
    ᐃⵠⵠΔΔΔᐃ: "img/night-hand-skin168.png",
    ⲆⲆⲆⵠΔᐃⲆ: "img/day-hand-skin169.png",
    ⵠⲆⵠⵠⵠⲆᐃ: "img/night-hand-skin169.png",
    ⲆᐃᐃΔᐃⲆⵠ: "img/day-hand-skin170.png",
    ΔⲆᐃⵠⲆΔΔ: "img/night-hand-skin170.png",
    ⵠᐃⵠⵠᐃΔᐃ: "img/day-hand-skin171.png",
    ᐃⵠΔⲆᐃΔΔ: "img/night-hand-skin171.png",
    ᐃⵠᐃⲆⲆⲆᐃ: "img/day-hand-skin172.png",
    ΔᐃᐃᐃⵠΔᐃ: "img/night-hand-skin172.png",
    ΔᐃⲆᐃⵠᐃⲆ: "img/day-hand-skin173.png",
    ΔᐃⵠΔⵠΔᐃ: "img/night-hand-skin173.png",
    ⲆⲆᐃᐃᐃⲆᐃ: "img/day-hand-skin174.png",
    ⲆⲆᐃⲆΔᐃΔ: "img/night-hand-skin174.png",
    ΔᐃⵠⵠⲆⲆΔ: "img/day-hand-skin175.png",
    ⵠᐃΔⲆⲆⵠᐃ: "img/night-hand-skin175.png",
    ΔΔᐃⲆᐃΔⵠ: "img/day-hand-skin176.png",
    ᐃᐃΔΔⲆΔΔ: "img/night-hand-skin176.png",
    ᐃᐃᐃⲆⲆᐃⲆ: "img/day-hand-skin177.png",
    ⲆΔⲆΔⵠⵠᐃ: "img/night-hand-skin177.png",
    ΔⲆΔᐃⵠⲆⵠ: "img/day-hand-skin178.png",
    ᐃⲆᐃⲆᐃΔᐃ: "img/night-hand-skin178.png",
    ⵠᐃⵠⵠⲆⵠⵠ: "img/day-hand-skin179.png",
    ⵠⲆⲆⲆⵠⵠⲆ: "img/night-hand-skin179.png",
    ⲆⵠⲆΔᐃΔⵠ: "img/day-hand-skin180.png",
    ⲆⲆⲆⵠⵠⵠᐃ: "img/night-hand-skin180.png",
    ⲆⲆᐃᐃΔⵠⲆ: "img/day-hand-skin181.png",
    ΔΔⵠⲆΔⵠΔ: "img/night-hand-skin181.png",
    ⵠΔⵠⵠΔΔΔ: "img/day-hand-skin182.png",
    ᐃⵠⲆⲆᐃⲆⲆ: "img/night-hand-skin182.png",
    ⵠⵠⲆⲆᐃΔΔ: "img/day-hand-skin183.png",
    ⲆΔᐃⲆΔΔⲆ: "img/night-hand-skin183.png",
    ΔⵠΔⲆᐃⵠⲆ: "img/day-hand-skin184.png",
    ᐃᐃⲆΔᐃᐃⲆ: "img/night-hand-skin184.png",
    ⲆΔⵠᐃⲆⵠΔ: "img/day-hand-skin185.png",
    ΔᐃⵠᐃⲆᐃⲆ: "img/night-hand-skin185.png",
    ᐃⵠΔⵠⲆΔⵠ: "img/day-hand-skin186.png",
    ⵠᐃᐃᐃΔΔΔ: "img/night-hand-skin186.png",
    ⲆᐃⲆⵠⵠⲆᐃ: "img/day-hand-skin187.png",
    ⵠΔⵠⲆⲆⲆᐃ: "img/night-hand-skin187.png",
    ⲆⲆᐃΔᐃᐃᐃ: "img/day-hand-skin188.png",
    ΔⲆᐃⵠΔⵠⲆ: "img/night-hand-skin188.png",
    ⵠⲆᐃΔΔᐃΔ: "img/day-hand-skin189.png",
    ⵠΔᐃⲆΔΔᐃ: "img/night-hand-skin189.png",
    ⲆⲆΔᐃᐃᐃΔ: "img/day-hand-skin190.png",
    ⲆΔᐃΔΔΔΔ: "img/night-hand-skin190.png",
    ΔⵠᐃᐃΔᐃᐃ: "img/day-hand-skin191.png",
    ᐃⲆᐃΔⲆᐃΔ: "img/night-hand-skin191.png",
    ᐃⲆⵠΔⵠⵠⲆ: "img/day-hand-skin192.png",
    ⲆᐃⲆᐃᐃᐃᐃ: "img/night-hand-skin192.png",
    ᐃᐃᐃᐃⲆⵠᐃ: "img/day-hand-skin193.png",
    ⵠⵠΔⲆᐃⲆᐃ: "img/night-hand-skin193.png",
    ⵠΔⵠᐃΔⵠΔ: "img/day-hand-skin194.png",
    ᐃΔΔⲆⲆΔΔ: "img/night-hand-skin194.png",
    ⵠⲆⲆΔΔΔⲆ: "img/day-hand-skin195.png",
    ⵠΔⵠⵠᐃⲆᐃ: "img/night-hand-skin195.png",
    ⵠᐃΔⲆⲆⲆΔ: "img/day-hand-skin196.png",
    ⵠᐃⲆᐃⲆᐃᐃ: "img/night-hand-skin196.png",
    ᐃᐃΔⵠᐃⵠⲆ: "img/day-hand-skin197.png",
    ⵠᐃⵠΔⲆⵠⵠ: "img/night-hand-skin197.png",
    ΔⲆⵠⲆⵠⲆⵠ: "img/day-hand-skin198.png",
    ᐃⲆⲆⵠᐃᐃΔ: "img/night-hand-skin198.png",
    ⵠΔᐃⵠΔΔⵠ: "img/day-hand-skin199.png",
    ⲆⲆⲆΔΔᐃΔ: "img/night-hand-skin199.png",
    ⵠⲆⵠᐃⲆΔⲆ: "img/day-hand-skin200.png",
    ΔⵠᐃⵠᐃΔⲆ: "img/night-hand-skin200.png",
    ⵠⲆⲆΔⵠⲆΔ: "img/day-hand-skin201.png",
    ΔᐃⲆΔᐃᐃⲆ: "img/night-hand-skin201.png",
    ᐃᐃⵠᐃⲆΔΔ: "img/day-hand-skin202.png",
    ⲆⵠΔⲆΔᐃⲆ: "img/night-hand-skin202.png",
    ⲆⵠⲆᐃΔᐃᐃ: "img/day-hand-skin203.png",
    ΔΔᐃⵠΔᐃⵠ: "img/night-hand-skin203.png",
    ⵠᐃⲆⵠᐃⵠⵠ: "img/day-hand-skin204.png",
    ⵠⵠⵠⵠⲆΔⲆ: "img/night-hand-skin204.png",
    ΔⵠΔΔΔⲆⲆ: "img/day-hand-skin205.png",
    ᐃΔᐃⵠᐃⲆᐃ: "img/night-hand-skin205.png",
    ⲆΔⲆⲆᐃΔⲆ: "img/day-hand-skin206.png",
    ᐃⵠᐃⵠᐃᐃᐃ: "img/night-hand-skin206.png",
    ΔⲆΔⲆⵠⵠΔ: "img/day-hand-skin207.png",
    ΔⲆᐃⵠΔΔᐃ: "img/night-hand-skin207.png",
    ⵠⲆⵠᐃΔⲆⲆ: "img/day-hand-skin208.png",
    ΔᐃⵠΔΔΔᐃ: "img/night-hand-skin208.png",
    ⲆⲆᐃΔⲆⲆᐃ: "img/day-hand-skin209.png",
    ⵠᐃⵠᐃⵠΔᐃ: "img/night-hand-skin209.png",
    ᐃⵠᐃᐃⵠⵠΔ: "img/day-hand-skin210.png",
    ⵠᐃᐃΔᐃⲆⵠ: "img/night-hand-skin210.png",
    ΔΔΔΔΔᐃΔ: "img/day-hand-skin211.png",
    ᐃΔⵠΔΔⲆⵠ: "img/night-hand-skin211.png",
    ᐃΔⲆⲆⲆΔⵠ: "img/day-hand-skin212.png",
    ⵠⲆᐃΔΔᐃⲆ: "img/night-hand-skin212.png",
    ΔⲆⵠⵠⵠΔᐃ: "img/day-bag-star0.png",
    ΔΔᐃⵠΔᐃΔ: "img/night-bag-star0.png",
    ΔΔⲆᐃᐃⲆⲆ: "img/day-bag0.png",
    ⵠᐃⲆⵠᐃΔⵠ: "img/night-bag0.png",
    ⵠᐃᐃᐃΔⵠⵠ: "img/day-bag1.png",
    ⲆⲆⲆᐃᐃⲆⵠ: "img/night-bag1.png",
    ⲆⵠⵠⵠᐃΔⲆ: "img/day-bag2.png",
    ⲆᐃⲆᐃΔΔΔ: "img/night-bag2.png",
    ΔⲆᐃⲆᐃⵠⵠ: "img/day-bag3.png",
    ᐃⲆⵠⲆⲆᐃⵠ: "img/night-bag3.png",
    ⵠⵠᐃΔⲆᐃⲆ: "img/day-bag4.png",
    ᐃⲆⲆᐃⵠᐃⵠ: "img/night-bag4.png",
    ⵠⵠⵠᐃΔⵠⵠ: "img/day-bag5.png",
    ⲆⵠᐃⵠᐃΔⵠ: "img/night-bag5.png",
    ⲆΔⵠⵠⲆⲆΔ: "img/day-bag6.png",
    ⵠᐃΔⲆᐃΔⵠ: "img/night-bag6.png",
    ΔⲆⵠⲆⲆΔᐃ: "img/day-bag7.png",
    ⲆΔⲆⲆΔΔⵠ: "img/night-bag7.png",
    ⵠΔⵠᐃⵠΔᐃ: "img/day-bag8.png",
    ⵠᐃᐃᐃⲆΔⲆ: "img/night-bag8.png",
    ΔⵠⵠⵠᐃⲆⵠ: "img/day-bag9.png",
    ΔᐃⵠⵠⲆⵠᐃ: "img/night-bag9.png",
    ⲆⵠΔΔⵠⲆᐃ: "img/day-bag10.png",
    ⵠΔⲆΔⲆⲆᐃ: "img/night-bag10.png",
    ᐃⵠᐃΔΔΔⲆ: "img/day-bag11.png",
    ⲆΔΔᐃⲆⲆᐃ: "img/night-bag11.png",
    ᐃⵠΔᐃⲆⲆΔ: "img/day-bag13.png",
    ⵠΔⵠᐃⵠⲆⵠ: "img/night-bag13.png",
    ΔⵠⲆᐃⲆᐃⲆ: "img/day-bag14.png",
    ⲆⵠⵠᐃⲆⲆⲆ: "img/night-bag14.png",
    ΔᐃᐃⵠⵠΔᐃ: "img/day-bag16.png",
    ⵠᐃᐃΔᐃᐃΔ: "img/night-bag16.png",
    ΔⵠᐃⲆⵠⲆΔ: "img/day-bag17.png",
    ΔΔΔᐃⵠᐃⵠ: "img/night-bag17.png",
    ⵠⵠΔⵠΔⲆΔ: "img/day-bag18.png",
    ⵠⲆⵠΔᐃᐃⵠ: "img/night-bag18.png",
    ⲆⲆᐃΔⵠΔⵠ: "img/day-bag19.png",
    ΔΔΔⵠⵠⵠⵠ: "img/night-bag19.png",
    ⲆΔΔᐃⲆᐃᐃ: "img/day-bag20.png",
    ⵠⲆⵠⵠᐃⵠⲆ: "img/night-bag20.png",
    ᐃⵠΔᐃΔᐃⲆ: "img/day-bag21.png",
    ⵠΔᐃⲆΔΔⲆ: "img/night-bag21.png",
    ⵠⵠΔΔⵠⲆⲆ: "img/day-bag22.png",
    ᐃΔᐃᐃΔⵠⲆ: "img/night-bag22.png",
    ⵠᐃᐃᐃⲆᐃΔ: "img/day-bag23.png",
    ΔᐃᐃⵠⵠⲆⵠ: "img/night-bag23.png",
    ᐃΔⵠΔᐃⲆⲆ: "img/day-bag24.png",
    ΔᐃⲆᐃΔⲆᐃ: "img/night-bag24.png",
    ⵠᐃᐃᐃΔⵠΔ: "img/day-bag25.png",
    ᐃΔⵠⲆⲆⵠᐃ: "img/night-bag25.png",
    ΔᐃᐃⲆᐃⵠᐃ: "img/day-bag26.png",
    ΔᐃΔᐃᐃⲆⵠ: "img/night-bag26.png",
    ΔⵠⲆᐃⵠⲆΔ: "img/day-bag27.png",
    ΔᐃⲆΔⲆΔΔ: "img/night-bag27.png",
    ΔΔΔⲆΔⵠᐃ: "img/day-bag28.png",
    ⵠⲆⲆᐃⵠⲆⵠ: "img/night-bag28.png",
    ᐃⲆⲆⲆᐃᐃⵠ: "img/day-bag29.png",
    ᐃⵠⵠⵠΔΔᐃ: "img/night-bag29.png",
    ⵠᐃⲆᐃᐃⵠⵠ: "img/day-bag30.png",
    ΔΔⵠⵠⲆⵠᐃ: "img/night-bag30.png",
    ΔⲆΔᐃᐃⲆⲆ: "img/day-bag31.png",
    ⲆⲆⵠᐃⲆⵠᐃ: "img/night-bag31.png",
    ᐃᐃⵠᐃⲆⵠⲆ: "img/day-bag32.png",
    ᐃⵠΔⲆᐃᐃΔ: "img/night-bag32.png",
    ⲆΔΔΔⲆᐃᐃ: "img/day-bag33.png",
    ΔᐃⲆⵠΔΔᐃ: "img/night-bag33.png",
    ⵠΔⲆᐃⵠΔᐃ: "img/day-bag34.png",
    ΔΔⲆⵠⵠᐃⲆ: "img/night-bag34.png",
    ⲆᐃⵠⲆⵠⲆᐃ: "img/day-bag35.png",
    ⵠΔⲆΔⲆΔⵠ: "img/night-bag35.png",
    ⲆᐃᐃⵠⲆΔⵠ: "img/day-bag36.png",
    ΔᐃⲆⲆⲆΔᐃ: "img/night-bag36.png",
    ⵠᐃᐃⵠΔΔᐃ: "img/day-bag37.png",
    ᐃⵠΔΔⲆⲆⵠ: "img/night-bag37.png",
    ΔⵠⲆⲆⵠΔᐃ: "img/day-bag38.png",
    ⵠⲆⲆᐃⵠⵠⵠ: "img/night-bag38.png",
    ⵠᐃᐃΔⲆⲆᐃ: "img/day-bag39.png",
    ⵠⵠⲆᐃᐃⲆⵠ: "img/night-bag39.png",
    ⵠⲆΔⲆⵠΔᐃ: "img/day-bag40.png",
    ⲆᐃΔⲆᐃᐃⵠ: "img/night-bag40.png",
    ᐃⲆⲆⵠΔⲆⵠ: "img/day-bag41.png",
    ᐃΔⵠⲆᐃᐃⵠ: "img/night-bag41.png",
    ᐃΔⲆⲆⵠΔΔ: "img/day-bag42.png",
    ᐃⲆⵠΔⲆΔⲆ: "img/night-bag42.png",
    ⵠⵠΔᐃⵠⲆⲆ: "img/day-bag43.png",
    ΔⲆΔⲆⲆⲆᐃ: "img/night-bag43.png",
    ᐃΔᐃᐃⵠᐃᐃ: "img/day-bag44.png",
    ΔⲆᐃⵠΔⲆΔ: "img/night-bag44.png",
    ᐃᐃᐃⲆΔⲆΔ: "img/day-bag45.png",
    ᐃᐃᐃΔΔᐃΔ: "img/night-bag45.png",
    ΔᐃⵠᐃⵠΔⵠ: "img/day-bag46.png",
    ⵠⲆΔⲆᐃΔⵠ: "img/night-bag46.png",
    ⲆⲆᐃⵠⲆⵠΔ: "img/day-bag47.png",
    ᐃⲆΔⵠⵠᐃΔ: "img/night-bag47.png",
    ᐃⲆⵠᐃⲆⲆΔ: "img/day-bag48.png",
    ⵠⵠᐃⵠΔⵠᐃ: "img/night-bag48.png",
    ΔⲆⵠᐃⲆΔⲆ: "img/day-bag49.png",
    ᐃⲆⲆⵠⵠⲆᐃ: "img/night-bag49.png",
    ⵠΔΔⲆΔⵠⲆ: "img/day-bag50.png",
    ⵠΔⲆΔⵠᐃᐃ: "img/night-bag50.png",
    ΔΔᐃΔⲆΔⵠ: "img/day-bag51.png",
    ⵠΔⲆⵠⵠΔⲆ: "img/night-bag51.png",
    ΔⲆᐃΔⵠᐃⲆ: "img/day-bag52.png",
    ΔⵠΔᐃᐃⲆᐃ: "img/night-bag52.png",
    ΔⲆⲆⲆⵠᐃⲆ: "img/day-bag53.png",
    ⵠΔᐃᐃΔᐃⲆ: "img/night-bag53.png",
    ΔΔⵠᐃⲆⲆᐃ: "img/day-bag54.png",
    ΔⵠⲆⵠᐃⲆⲆ: "img/night-bag54.png",
    ΔᐃⲆΔΔⲆᐃ: "img/day-bag55.png",
    ΔⲆⲆᐃⵠΔᐃ: "img/night-bag55.png",
    ⵠⲆᐃᐃΔⵠⵠ: "img/day-bag56.png",
    ⵠⵠⵠⲆⲆⲆᐃ: "img/night-bag56.png",
    ⵠΔⵠⵠⵠᐃⲆ: "img/day-bag57.png",
    ΔⵠⵠΔΔⲆⲆ: "img/night-bag57.png",
    ᐃᐃⵠΔⲆⵠᐃ: "img/day-bag58.png",
    ΔⵠΔᐃΔΔⵠ: "img/night-bag58.png",
    ⵠᐃⲆⵠⲆⵠⵠ: "img/day-bag59.png",
    ⲆᐃⲆΔⵠΔⵠ: "img/night-bag59.png",
    ⲆΔⲆⲆᐃΔᐃ: "img/day-bag60.png",
    ⲆᐃΔⵠⲆᐃⲆ: "img/night-bag60.png",
    ᐃᐃᐃⲆᐃⲆΔ: "img/day-bag61.png",
    ⲆⲆΔΔΔⲆΔ: "img/night-bag61.png",
    ΔⵠⲆⵠΔⲆᐃ: "img/day-bag62.png",
    ⲆⲆΔᐃⵠᐃΔ: "img/night-bag62.png",
    ᐃΔⵠⵠⲆⵠᐃ: "img/day-bag63.png",
    ᐃⲆᐃΔΔΔⵠ: "img/night-bag63.png",
    ⵠΔⵠᐃᐃⵠᐃ: "img/day-bag64.png",
    ΔⲆᐃΔⵠΔⵠ: "img/night-bag64.png",
    ΔⵠΔⵠᐃⲆⲆ: "img/day-bag65.png",
    ⵠⲆⲆᐃⲆΔᐃ: "img/night-bag65.png",
    ΔⲆΔᐃⵠᐃⵠ: "img/day-bag66.png",
    ΔⲆᐃⵠᐃᐃΔ: "img/night-bag66.png",
    ᐃⲆⵠⲆⲆΔⵠ: "img/day-bag67.png",
    ΔⲆΔᐃⲆⲆⲆ: "img/night-bag67.png",
    ᐃΔⵠᐃΔⲆΔ: "img/day-bag68.png",
    ⵠᐃᐃⵠΔⵠⵠ: "img/night-bag68.png",
    ᐃΔⵠΔΔΔᐃ: "img/day-bag69.png",
    ᐃⵠⵠⵠⵠΔⵠ: "img/night-bag69.png",
    ⵠⲆΔΔΔⲆⲆ: "img/day-bag70.png",
    ᐃⲆⲆΔΔⲆⲆ: "img/night-bag70.png",
    ⲆⲆⵠⵠⵠᐃᐃ: "img/day-bag71.png",
    ⵠⵠⵠΔⲆΔᐃ: "img/night-bag71.png",
    ⵠⲆⲆⲆΔᐃⵠ: "img/day-bag72.png",
    ᐃᐃⵠⵠⵠⲆΔ: "img/night-bag72.png",
    ΔΔᐃᐃⲆΔⵠ: "img/day-bag73.png",
    ΔⵠⲆⲆⲆΔⵠ: "img/night-bag73.png",
    ⲆᐃⲆΔⵠᐃⵠ: "img/day-bag74.png",
    ᐃⲆᐃΔᐃⲆᐃ: "img/night-bag74.png",
    ΔⵠⲆᐃⲆⵠᐃ: "img/day-bag75.png",
    ΔΔΔⲆⲆᐃⵠ: "img/night-bag75.png",
    ⵠᐃΔⲆΔⵠᐃ: "img/day-bag76.png",
    ⵠᐃᐃΔᐃⵠΔ: "img/night-bag76.png",
    ᐃΔⲆᐃⲆᐃᐃ: "img/day-bag77.png",
    ⵠⲆⵠᐃΔⲆΔ: "img/night-bag77.png",
    ΔⲆΔⲆⲆᐃⲆ: "img/day-bag78.png",
    ⲆⲆⲆᐃⵠⵠⵠ: "img/night-bag78.png",
    ⵠΔᐃᐃΔⵠⲆ: "img/day-bag79.png",
    ⲆΔΔᐃᐃᐃΔ: "img/night-bag79.png",
    ᐃΔΔⵠⵠΔⵠ: "img/day-bag80.png",
    ΔΔΔⲆⵠΔΔ: "img/night-bag80.png",
    ᐃⵠⵠⵠⲆⵠΔ: "img/day-accessory0.png",
    ⵠΔᐃΔⵠᐃΔ: "img/day-accessory0-pacques.png",
    ⲆΔᐃΔⵠⵠᐃ: "img/night-accessory0-pacques.png",
    ⵠⲆⲆⵠⲆⵠᐃ: "img/day-accessory13.png",
    ᐃⲆⲆⲆᐃⲆⵠ: "img/night-accessory13.png",
    ᐃΔΔⲆΔⵠΔ: "img/day-accessory14.png",
    ΔⲆⵠⲆᐃⲆⵠ: "img/night-accessory14.png",
    ⲆΔΔⵠⵠⵠⲆ: "img/day-accessory15.png",
    ⵠⲆⲆⵠⵠΔⵠ: "img/night-accessory15.png",
    ᐃᐃᐃⲆⵠⲆΔ: "img/day-accessory16.png",
    ⵠΔᐃⲆΔⵠⵠ: "img/night-accessory16.png",
    ⵠⵠⵠⲆΔΔⲆ: "img/day-accessory17.png",
    ΔⵠΔΔⲆⵠΔ: "img/day-accessory17.png",
    ⵠⵠΔᐃⵠⲆᐃ: "img/day-accessory19.png",
    ᐃⲆΔⲆΔᐃΔ: "img/night-accessory19.png",
    ⵠᐃⵠⲆⵠⵠⵠ: "img/day-accessory20.png",
    ᐃⵠΔᐃᐃⵠΔ: "img/night-accessory20.png",
    ᐃⲆΔΔΔⵠⲆ: "img/day-accessory21.png",
    ᐃⲆΔⲆⲆⵠᐃ: "img/night-accessory21.png",
    Ⲇⵠⵠᐃᐃᐃᐃ: "img/day-accessory22.png",
    ⲆᐃⵠᐃⲆΔᐃ: "img/night-accessory22.png",
    ᐃⲆⲆⲆⵠⵠΔ: "img/day-accessory23.png",
    ΔᐃΔⲆᐃΔⵠ: "img/night-accessory23.png",
    ⵠⲆⲆⲆᐃᐃΔ: "img/day-accessory24.png",
    ⲆⲆΔΔΔΔΔ: "img/night-accessory24.png",
    ᐃⵠⲆΔⵠᐃᐃ: "img/day-accessory25.png",
    ⲆⲆΔⵠΔⵠΔ: "img/night-accessory25.png",
    ᐃⵠⵠⵠΔᐃΔ: "img/day-accessory26.png",
    ΔΔⵠⲆᐃᐃⲆ: "img/night-accessory26.png",
    ⲆΔΔⲆⲆⵠⵠ: "img/day-accessory27.png",
    ⵠⵠΔᐃΔΔⵠ: "img/night-accessory27.png",
    ⵠΔⵠΔⲆᐃΔ: "img/day-accessory18.png",
    ⵠⵠⵠⵠⲆᐃⵠ: "img/night-accessory18.png",
    ΔᐃⲆⵠΔⲆⲆ: "img/day-accessory29.png",
    ⲆᐃⵠᐃⵠⲆⲆ: "img/night-accessory29.png",
    ᐃΔⵠᐃᐃⵠⵠ: "img/day-accessory30.png",
    ΔⲆⵠⲆⵠᐃᐃ: "img/night-accessory30.png",
    ⵠΔᐃᐃⲆΔΔ: "img/day-accessory31.png",
    ⵠⲆᐃⵠΔⲆᐃ: "img/night-accessory31.png",
    ⲆᐃⵠⵠⲆⵠΔ: "img/day-accessory32.png",
    ⵠᐃΔᐃⵠᐃⲆ: "img/night-accessory32.png",
    ⲆΔⵠⵠΔⲆⵠ: "img/day-accessory33.png",
    ΔΔⵠⲆⲆⲆᐃ: "img/night-accessory33.png",
    ⲆᐃᐃⲆᐃⲆⲆ: "img/day-accessory34.png",
    ⵠᐃⲆⲆᐃⲆⵠ: "img/night-accessory34.png",
    ΔΔᐃⲆΔⲆⲆ: "img/day-accessory35.png",
    ᐃΔΔΔⲆⵠⵠ: "img/night-accessory35.png",
    ᐃΔⵠⲆⲆΔᐃ: "img/day-accessory28.png",
    ⵠΔᐃΔⲆΔᐃ: "img/night-accessory28.png",
    ᐃⲆΔΔΔΔⲆ: "img/day-accessory36.png",
    ⲆΔⵠᐃΔⵠⵠ: "img/night-accessory36.png",
    ΔΔⲆᐃⲆᐃᐃ: "img/day-accessory37.png",
    ΔᐃⲆⵠᐃⵠᐃ: "img/night-accessory37.png",
    ⲆΔΔⵠⵠⵠⵠ: "img/day-accessory39.png",
    ⵠⵠᐃⵠⲆⲆΔ: "img/night-accessory39.png",
    ⵠᐃⵠΔΔᐃⲆ: "img/day-accessory40.png",
    ᐃⲆⵠⲆⲆᐃᐃ: "img/night-accessory40.png",
    ΔⵠᐃΔΔΔΔ: "img/day-accessory41.png",
    ΔᐃⵠⲆᐃΔᐃ: "img/night-accessory41.png",
    ⲆⵠΔΔᐃⵠⲆ: "img/day-accessory42.png",
    ⲆⲆⵠΔⵠⵠⲆ: "img/night-accessory42.png",
    ⵠⵠᐃⲆⲆⲆΔ: "img/day-accessory43.png",
    ᐃⲆⵠΔᐃᐃΔ: "img/night-accessory43.png",
    ᐃᐃΔⲆᐃᐃⲆ: "img/day-accessory44.png",
    ΔΔΔΔⲆᐃⲆ: "img/night-accessory44.png",
    ΔⵠᐃⵠᐃⲆⲆ: "img/day-accessory38.png",
    ⵠᐃᐃⵠⵠⲆᐃ: "img/night-accessory38.png",
    ᐃᐃΔⵠᐃΔⲆ: "img/day-accessory46.png",
    ΔⲆⲆⵠⲆΔⵠ: "img/night-accessory46.png",
    ⲆΔᐃΔⲆΔᐃ: "img/day-accessory47.png",
    ⵠΔⲆᐃⵠᐃⵠ: "img/night-accessory47.png",
    ᐃⵠⵠⵠⵠΔΔ: "img/day-accessory48.png",
    ⲆⵠΔⲆⵠᐃᐃ: "img/night-accessory48.png",
    ⵠⲆⵠⲆᐃⵠΔ: "img/day-accessory49.png",
    ⵠΔΔᐃⵠⵠᐃ: "img/night-accessory49.png",
    ᐃΔⵠⲆΔⵠΔ: "img/day-accessory45.png",
    ⲆΔΔⵠΔΔⲆ: "img/night-accessory45.png",
    ΔΔΔⲆⵠᐃᐃ: "img/day-accessory50.png",
    ΔⵠⲆΔΔⵠⲆ: "img/night-accessory50.png",
    ᐃΔⵠΔΔΔⲆ: "img/day-accessory51.png",
    ᐃⲆᐃⵠⲆᐃᐃ: "img/night-accessory51.png",
    ⵠᐃᐃΔⵠⵠΔ: "img/day-accessory52.png",
    ⲆⲆΔΔⲆΔⲆ: "img/night-accessory52.png",
    ⵠΔⲆⵠᐃⲆᐃ: "img/day-accessory53.png",
    ᐃᐃΔⲆΔΔᐃ: "img/night-accessory53.png",
    ⲆᐃᐃⲆΔⵠⵠ: "img/day-accessory54.png",
    ΔⵠⵠΔⵠΔⵠ: "img/night-accessory54.png",
    ⵠⵠΔᐃᐃΔⲆ: "img/day-accessory55.png",
    ⲆⵠⲆⵠⵠΔΔ: "img/night-accessory55.png",
    ⵠⵠⵠΔⵠⵠᐃ: "img/day-accessory56.png",
    ⲆΔΔΔⲆΔΔ: "img/night-accessory56.png",
    ΔⲆΔΔΔΔⲆ: "img/day-accessory57.png",
    ⵠⵠΔΔᐃᐃⲆ: "img/night-accessory57.png",
    ΔΔΔΔᐃᐃⵠ: "img/day-accessory58.png",
    ⲆΔΔⲆΔⲆⵠ: "img/night-accessory58.png",
    ᐃⵠⲆΔᐃⲆΔ: "img/day-accessory59.png",
    ᐃᐃⲆΔⲆΔⵠ: "img/night-accessory59.png",
    ΔᐃᐃⵠᐃⲆⲆ: "img/day-accessory60.png",
    ⲆⵠⲆΔⵠⲆᐃ: "img/night-accessory60.png",
    ΔⵠΔⵠᐃΔⵠ: "img/day-accessory61.png",
    ᐃⵠⵠⲆⲆΔᐃ: "img/night-accessory61.png",
    ΔⵠⵠⲆΔⵠⲆ: "img/day-accessory62.png",
    ⲆΔⲆΔᐃΔⲆ: "img/night-accessory62.png",
    ᐃᐃᐃⵠⲆⲆᐃ: "img/day-accessory63.png",
    ΔΔⲆΔᐃⵠⵠ: "img/night-accessory63.png",
    ΔⲆᐃⵠⵠΔΔ: "img/day-accessory64.png",
    ⵠⵠΔΔΔΔΔ: "img/night-accessory64.png",
    ⲆᐃΔⵠⵠᐃᐃ: "img/day-accessory65.png",
    ⵠᐃΔⵠⵠᐃᐃ: "img/night-accessory65.png",
    ΔⲆΔᐃⵠᐃⲆ: "img/day-accessory66.png",
    ⵠΔΔᐃⲆᐃⵠ: "img/night-accessory66.png",
    ⵠΔᐃⲆⵠΔᐃ: "img/day-accessory67.png",
    ⲆⵠⵠⵠⵠⲆⵠ: "img/night-accessory67.png",
    ⵠⲆⲆᐃᐃⵠᐃ: "img/day-accessory68.png",
    ᐃⲆⵠⵠⲆⵠⵠ: "img/night-accessory68.png",
    ⲆΔⲆⲆⵠⵠΔ: "img/day-accessory69.png",
    ᐃΔⲆᐃΔᐃⵠ: "img/night-accessory69.png",
    ᐃᐃⲆᐃΔⵠⲆ: "img/day-accessory70.png",
    ΔᐃᐃΔΔᐃⲆ: "img/night-accessory70.png",
    ⲆⲆⲆᐃⵠⲆⲆ: "img/day-accessory71.png",
    ΔᐃᐃⲆΔᐃᐃ: "img/night-accessory71.png",
    ⲆⵠⵠᐃΔⲆΔ: "img/day-accessory72.png",
    ᐃⵠⵠᐃⲆⵠᐃ: "img/night-accessory72.png",
    ΔΔΔⲆΔⲆΔ: "img/day-accessory73.png",
    ΔᐃⲆᐃᐃΔⲆ: "img/night-accessory73.png",
    ᐃᐃᐃᐃΔⲆⲆ: "img/day-accessory74.png",
    ⲆⲆⲆⵠΔᐃⵠ: "img/night-accessory74.png",
    ᐃΔⵠⲆᐃⵠⵠ: "img/day-accessory75.png",
    ⵠⲆⲆᐃΔΔⵠ: "img/night-accessory75.png",
    ᐃⵠΔⵠⵠᐃⵠ: "img/day-accessory76.png",
    ⵠᐃᐃⲆⲆⲆᐃ: "img/night-accessory76.png",
    ⲆⵠᐃⵠⵠΔⵠ: "img/day-accessory77.png",
    ΔⵠᐃΔⲆΔⲆ: "img/night-accessory77.png",
    ᐃΔⲆΔⲆᐃᐃ: "img/day-accessory78.png",
    ⵠᐃᐃᐃΔΔᐃ: "img/night-accessory78.png",
    ⲆⵠⵠᐃⵠⵠⲆ: "img/day-accessory79.png",
    ΔᐃΔᐃΔᐃⲆ: "img/night-accessory79.png",
    ᐃΔᐃΔΔᐃᐃ: "img/day-accessory80.png",
    ⵠⲆΔⲆⵠⲆⲆ: "img/night-accessory80.png",
    ⲆⲆΔᐃᐃᐃⲆ: "img/day-accessory81.png",
    ΔⵠⲆᐃᐃⲆᐃ: "img/night-accessory81.png",
    ᐃⲆᐃᐃΔᐃΔ: "img/day-accessory83.png",
    ᐃΔⵠᐃⲆΔΔ: "img/night-accessory83.png",
    ⲆⵠᐃⲆΔᐃᐃ: "img/day-accessory84.png",
    ⵠΔⵠⲆⲆⵠᐃ: "img/night-accessory84.png",
    ᐃⲆᐃΔᐃⲆⵠ: "img/day-accessory85.png",
    ⵠΔⵠⲆⲆⵠⲆ: "img/night-accessory85.png",
    ⲆᐃⵠⲆⵠΔⵠ: "img/day-accessory86.png",
    ⲆΔⲆᐃⵠΔⲆ: "img/night-accessory86.png",
    ⵠⵠΔⵠⲆΔⲆ: "img/day-accessory87.png",
    ⵠⵠᐃᐃⲆΔⲆ: "img/night-accessory87.png",
    ⲆΔⵠⵠΔⲆⲆ: "img/day-accessory88.png",
    ᐃΔᐃΔΔᐃⵠ: "img/night-accessory88.png",
    ΔⵠⲆⲆⲆᐃΔ: "img/day-accessory89.png",
    ⵠⵠⵠᐃⲆΔⲆ: "img/night-accessory89.png",
    ⲆᐃΔⵠᐃΔⲆ: "img/day-accessory90.png",
    ⵠⲆΔᐃᐃΔᐃ: "img/night-accessory90.png",
    ⵠᐃⵠⲆᐃᐃⵠ: "img/day-accessory91.png",
    ⲆΔⲆΔⲆⵠᐃ: "img/night-accessory91.png",
    ΔΔΔᐃΔΔⵠ: "img/day-accessory92.png",
    ΔΔⵠΔⲆⲆⲆ: "img/night-accessory92.png",
    ΔⵠⵠΔⵠⵠΔ: "img/day-accessory93.png",
    ΔᐃΔᐃⵠⲆⲆ: "img/night-accessory93.png",
    ⵠΔΔⲆⵠΔᐃ: "img/day-accessory94.png",
    ⵠⲆⵠⵠⵠⵠΔ: "img/night-accessory94.png",
    ΔⲆⵠⵠᐃΔⵠ: "img/day-accessory95.png",
    ᐃᐃΔⲆΔΔⲆ: "img/night-accessory95.png",
    ⵠᐃᐃⲆⵠⲆⲆ: "img/day-accessory96.png",
    ⲆΔⲆⵠᐃⲆⵠ: "img/night-accessory96.png",
    Ⲇⵠⵠⵠⵠⵠᐃ: "img/day-accessory97.png",
    ⵠⵠΔΔⲆⲆΔ: "img/night-accessory97.png",
    ⲆⵠⲆⵠⲆⲆΔ: "img/day-accessory98.png",
    ⵠⵠΔᐃΔΔᐃ: "img/night-accessory98.png",
    ⵠⵠΔΔⵠΔᐃ: "img/day-accessory99.png",
    ⵠⵠⵠⲆⵠᐃΔ: "img/night-accessory99.png",
    ⲆΔΔⲆⵠⵠᐃ: "img/day-accessory100.png",
    ΔⲆⲆΔᐃⲆΔ: "img/night-accessory100.png",
    ᐃᐃⲆⲆⵠᐃΔ: "img/day-accessory101.png",
    ᐃⲆⵠⵠⲆΔⵠ: "img/night-accessory101.png",
    ΔⲆΔᐃᐃᐃⵠ: "img/day-accessory102.png",
    ᐃΔᐃⲆΔⵠᐃ: "img/night-accessory102.png",
    ᐃⲆⵠⵠᐃⲆⵠ: "img/day-accessory103.png",
    ⵠΔⲆᐃΔⲆⲆ: "img/night-accessory103.png",
    ⵠΔᐃⵠΔᐃⲆ: "img/day-accessory104.png",
    ΔΔΔⵠᐃΔΔ: "img/night-accessory104.png",
    ΔΔⲆⲆΔΔᐃ: "img/day-accessory105.png",
    ⵠᐃⲆⲆⵠΔⵠ: "img/night-accessory105.png",
    ⵠΔᐃΔⲆⲆⲆᐃⵠ: "img/day-accessory106.png",
    ᐃΔⵠᐃⲆⵠⵠΔⲆ: "img/night-accessory106.png",
    ᐃⵠΔⵠΔⵠⵠⲆⲆ: "img/day-accessory107.png",
    ΔᐃΔⵠᐃΔⲆᐃᐃ: "img/night-accessory107.png",
    ΔⲆⵠᐃᐃⵠΔ: "img/day-accessory82.png",
    ᐃᐃᐃⵠⵠᐃⲆ: "img/night-accessory82.png",
    ⲆⲆΔⵠⲆᐃΔ: "img/day-book0.png",
    ⵠΔⵠᐃᐃΔⲆ: "img/night-book0.png",
    ΔᐃⲆⵠⵠΔᐃ: "img/day-book1.png",
    ⵠᐃⲆⲆΔⲆⲆ: "img/night-book1.png",
    ᐃⲆⵠⲆΔᐃᐃ: "img/day-book2.png",
    ⲆⲆⵠᐃⲆΔⲆ: "img/night-book2.png",
    ᐃᐃⲆᐃᐃⲆᐃ: "img/day-book3.png",
    ᐃⵠⵠᐃⲆᐃᐃ: "img/night-book3.png",
    ΔⲆⵠΔΔᐃⵠ: "img/day-book4.png",
    ᐃⵠⲆᐃⲆΔΔ: "img/night-book4.png",
    Ⲇᐃᐃᐃⵠᐃᐃ: "img/day-book5.png",
    ᐃⲆⲆⵠⵠⵠᐃ: "img/night-book5.png",
    ΔⵠΔⲆⵠᐃΔ: "img/day-book6.png",
    ᐃⲆⲆΔΔⵠⵠ: "img/night-book6.png",
    ᐃᐃΔⲆΔᐃᐃ: "img/day-book7.png",
    ΔⲆᐃⵠⲆΔⵠ: "img/night-book7.png",
    ΔⲆΔᐃⲆΔᐃ: "img/day-book8.png",
    ⲆΔᐃⲆΔⲆⲆ: "img/night-book8.png",
    ᐃΔΔΔΔᐃⵠ: "img/day-book9.png",
    ⵠⲆⲆⵠΔⲆΔ: "img/night-book9.png",
    ⵠΔᐃⲆΔⲆⲆ: "img/day-book10.png",
    ⲆΔΔⲆⲆΔⵠ: "img/night-book10.png",
    ⲆΔᐃⵠΔᐃⵠ: "img/day-book11.png",
    ⵠΔⵠⵠⲆⲆΔ: "img/night-book11.png",
    ⲆⵠⲆᐃⵠⵠⵠ: "img/day-book12.png",
    ΔⵠᐃΔΔᐃⵠ: "img/night-book12.png",
    ⵠⲆΔⲆⵠⲆΔ: "img/day-book13.png",
    ΔⲆᐃΔΔᐃᐃ: "img/night-book13.png",
    ⲆⲆⲆΔᐃⵠᐃ: "img/day-book14.png",
    ⲆΔΔΔⲆⲆⵠ: "img/night-book14.png",
    ⵠᐃⵠⵠⵠΔⵠ: "img/day-book15.png",
    ΔΔΔᐃΔⲆⵠ: "img/night-book15.png",
    ⵠᐃΔⲆⵠⵠᐃ: "img/day-book16.png",
    ⵠᐃΔⲆᐃᐃΔ: "img/night-book16.png",
    ΔⵠⵠⵠᐃΔΔ: "img/day-book17.png",
    ᐃᐃⲆᐃⲆⵠΔ: "img/night-book17.png",
    ΔⲆᐃᐃΔΔΔ: "img/day-book18.png",
    ΔΔᐃΔΔⵠΔ: "img/night-book18.png",
    ᐃᐃⲆΔΔΔⵠ: "img/day-book19.png",
    ΔᐃᐃᐃᐃΔΔ: "img/night-book19.png",
    ⵠΔᐃΔΔΔⲆ: "img/day-book20.png",
    ⵠⲆᐃᐃΔⵠΔ: "img/night-book20.png",
    ⲆⵠⲆᐃⲆᐃΔ: "img/day-book21.png",
    ᐃΔⵠᐃΔᐃΔ: "img/night-book21.png",
    ᐃⲆᐃⵠΔⵠⵠ: "img/day-book22.png",
    ⲆⲆⵠᐃⲆⲆⲆ: "img/night-book22.png",
    ⲆⵠΔΔⲆΔΔ: "img/day-book23.png",
    ᐃⵠⲆᐃᐃᐃⲆ: "img/night-book23.png",
    ᐃⲆΔΔⲆᐃᐃ: "img/day-book24.png",
    ΔΔⲆⲆⵠⵠΔ: "img/night-book24.png",
    ⲆΔⲆΔᐃᐃⲆ: "img/day-book25.png",
    ᐃΔⵠΔⲆΔᐃ: "img/night-book25.png",
    ΔᐃᐃⵠᐃⵠΔ: "img/day-book26.png",
    ⵠΔⵠΔΔᐃΔ: "img/night-book26.png",
    ⵠΔⵠⲆⵠⵠⵠ: "img/day-book27.png",
    ⲆⲆΔⵠⲆΔⵠ: "img/night-book27.png",
    ⵠᐃⲆΔⵠᐃⵠ: "img/day-book28.png",
    ⲆΔᐃΔⵠΔⲆ: "img/night-book28.png",
    ᐃⲆⵠΔⵠⲆΔ: "img/day-book29.png",
    ᐃᐃⲆⲆΔΔᐃ: "img/night-book29.png",
    ᐃⵠᐃΔᐃᐃᐃ: "img/day-book30.png",
    ⵠⲆⲆⵠΔⵠᐃ: "img/night-book30.png",
    ΔᐃⵠⲆΔⲆⲆ: "img/day-book31.png",
    ⵠⵠᐃⵠⲆΔⵠ: "img/night-book31.png",
    ᐃⵠΔᐃᐃΔᐃ: "img/day-book32.png",
    ⵠⲆᐃΔΔⵠⵠ: "img/night-book32.png",
    ΔᐃⲆⲆᐃⵠⲆ: "img/day-book33.png",
    ⲆⵠⲆⲆΔⵠΔ: "img/night-book33.png",
    ⵠⲆⵠⲆᐃⲆΔ: "img/day-book34.png",
    ΔΔⵠⵠΔᐃᐃ: "img/night-book34.png",
    ᐃᐃΔΔᐃᐃΔ: "img/day-book35.png",
    ᐃΔΔΔΔᐃⲆ: "img/night-book35.png",
    ⲆᐃΔᐃΔΔΔ: "img/day-book36.png",
    ⲆᐃᐃΔⲆⲆᐃ: "img/night-book36.png",
    ᐃᐃᐃΔⲆΔΔⵠⵠ: "img/day-book37.png",
    ⵠᐃᐃᐃΔⲆⵠᐃⵠ: "img/night-book37.png",
    ᐃⲆΔⵠᐃⵠⵠ: "img/day-book38.png",
    ᐃΔⲆⲆᐃⲆⵠ: "img/night-book38.png",
    ΔⲆΔⲆΔᐃⵠ: "img/day-book39.png",
    ⵠΔΔⵠⵠΔᐃ: "img/night-book39.png",
    ᐃⲆΔⲆᐃⵠⲆ: "img/day-book40.png",
    ⵠΔᐃⵠᐃΔⵠ: "img/night-book40.png",
    ⵠⵠⵠᐃᐃᐃᐃ: "img/day-book41.png",
    ᐃᐃᐃΔᐃⵠΔ: "img/night-book41.png",
    ⲆⵠⵠⲆΔⲆⲆ: "img/day-book42.png",
    ⵠᐃΔⲆᐃⲆⲆ: "img/night-book42.png",
    ⲆⵠⲆⲆΔΔᐃ: "img/day-book43.png",
    ΔᐃⲆⲆⲆᐃΔ: "img/night-book43.png",
    ᐃⵠⵠⲆⲆⲆⲆ: "img/day-book44.png",
    Δⵠᐃᐃᐃⵠⵠ: "img/night-book44.png",
    ⵠᐃⵠⵠΔᐃᐃ: "img/day-book45.png",
    ⵠᐃΔⲆⲆⵠⲆ: "img/night-book45.png",
    ⲆΔⲆΔⲆᐃᐃ: "img/day-book46.png",
    ⵠⲆⵠⵠᐃⲆΔ: "img/night-book46.png",
    ⵠⵠⵠⵠⵠΔⵠ: "img/day-book47.png",
    ⲆⲆⲆⵠⵠⲆᐃ: "img/night-book47.png",
    ⵠⵠΔⵠΔᐃᐃ: "img/day-book48.png",
    ΔⵠᐃⵠⲆⲆΔ: "img/night-book48.png",
    ⲆΔⵠⲆΔᐃΔ: "img/day-book49.png",
    ⵠᐃⲆⲆⲆᐃⲆ: "img/night-book49.png",
    ᐃΔⵠⵠⵠⵠⲆ: "img/day-book50.png",
    ΔᐃᐃⵠΔᐃᐃ: "img/night-book50.png",
    ᐃΔᐃᐃⲆΔⵠ: "img/day-crate1.png",
    ⲆᐃΔⵠⲆⲆΔ: "img/night-crate1.png",
    ᐃⲆᐃᐃⵠⲆⲆ: "img/day-crate2.png",
    ΔⵠⵠⵠⲆⵠΔ: "img/night-crate2.png",
    ⵠⲆⲆⵠᐃⵠⲆ: "img/day-crate3.png",
    ⲆⵠⲆⲆᐃᐃⵠ: "img/night-crate3.png",
    ⲆᐃᐃᐃΔⵠⲆ: "img/day-crate4.png",
    ᐃⲆⲆⲆⵠⲆⲆ: "img/night-crate4.png",
    ᐃⵠᐃᐃᐃⵠⲆ: "img/day-crate5.png",
    ⲆᐃᐃⲆⲆΔⲆ: "img/night-crate5.png",
    ΔᐃᐃⲆⲆᐃⲆ: "img/day-crate6.png",
    ⲆⲆⲆⲆⲆᐃΔ: "img/night-crate6.png",
    ᐃⲆᐃΔᐃΔΔ: "img/day-crate7.png",
    ⲆᐃᐃⲆⵠΔΔ: "img/night-crate7.png",
    ⵠⲆⵠΔᐃⵠᐃ: "img/day-crate8.png",
    ᐃᐃⲆⵠⲆᐃⲆ: "img/night-crate8.png",
    ⵠΔᐃᐃΔΔⲆ: "img/day-crate9.png",
    ΔΔᐃⵠΔⵠⵠ: "img/night-crate9.png",
    ᐃⵠᐃΔΔⲆᐃ: "img/day-crate10.png",
    ᐃⲆⲆᐃΔΔⲆ: "img/night-crate10.png",
    ᐃΔΔΔⲆᐃᐃ: "img/day-crate11.png",
    ΔᐃᐃΔⵠⲆΔ: "img/night-crate11.png",
    ⲆⲆΔΔⲆᐃᐃ: "img/day-crate12.png",
    ΔⵠΔⲆᐃΔΔ: "img/night-crate12.png",
    ⲆᐃⵠⲆⲆΔΔ: "img/day-crate13.png",
    ᐃⵠⵠⵠᐃⵠⲆ: "img/night-crate13.png",
    ᐃΔⵠΔΔⲆⲆ: "img/day-crate14.png",
    ⲆᐃᐃᐃΔᐃᐃ: "img/night-crate14.png",
    ⲆⵠⵠᐃⵠΔᐃ: "img/day-crate15.png",
    ⵠⵠⲆΔΔⲆⵠ: "img/night-crate15.png",
    ΔⵠⲆⵠⵠⲆⲆ: "img/day-crate16.png",
    ᐃⵠⲆⵠᐃΔⲆ: "img/night-crate16.png",
    ⵠᐃΔᐃⵠⵠⲆ: "img/day-crate17.png",
    ΔᐃⲆΔΔᐃⵠ: "img/night-crate17.png",
    ⵠΔⲆΔᐃΔⲆ: "img/day-crate18.png",
    ΔⵠᐃⵠΔⵠΔ: "img/night-crate18.png",
    ⵠΔΔΔᐃΔᐃ: "img/day-crate19.png",
    ⵠⵠΔΔΔⵠᐃ: "img/night-crate19.png",
    ⲆⵠΔⲆΔⲆΔ: "img/day-crate20.png",
    ΔᐃΔΔΔΔᐃ: "img/night-crate20.png",
    ⵠⵠⵠᐃⵠⲆᐃ: "img/day-crate21.png",
    ᐃΔⲆᐃᐃΔᐃ: "img/night-crate21.png",
    ΔΔⲆⵠⵠΔⲆ: "img/day-crate22.png",
    ΔⲆΔⲆⲆⵠⵠ: "img/night-crate22.png",
    ⵠᐃⲆⵠᐃΔⲆ: "img/day-crate23.png",
    ⲆⵠⲆⲆᐃⵠᐃ: "img/night-crate23.png",
    ΔⲆⲆⵠⵠⲆΔ: "img/day-crate24.png",
    ᐃᐃⵠᐃᐃⲆΔ: "img/night-crate24.png",
    ᐃⵠᐃΔⵠΔᐃ: "img/day-crate25.png",
    ΔⲆΔⵠⲆᐃⲆ: "img/night-crate25.png",
    ⵠΔᐃⵠⲆᐃⵠ: "img/day-crate26.png",
    ΔΔᐃⵠⲆᐃⲆ: "img/night-crate26.png",
    ⵠᐃΔⵠᐃΔᐃ: "img/day-crate27.png",
    ⲆᐃᐃⲆⵠⲆⵠ: "img/night-crate27.png",
    ᐃⲆⲆΔᐃᐃⵠ: "img/day-crate28.png",
    ΔⵠᐃᐃⲆⵠᐃ: "img/night-crate28.png",
    ⵠⵠⲆⲆⵠⵠᐃ: "img/day-crate29.png",
    ΔΔΔⲆΔⵠΔ: "img/night-crate29.png",
    ᐃⲆᐃᐃⵠⲆΔ: "img/day-crate30.png",
    ΔᐃᐃᐃⲆⵠⵠ: "img/night-crate30.png",
    ⵠΔⵠⲆΔⵠᐃ: "img/day-crate31.png",
    ΔⲆᐃΔᐃⲆᐃ: "img/night-crate31.png",
    ᐃᐃⵠΔⲆⲆΔ: "img/day-crate32.png",
    ⲆⵠⲆⲆⲆⲆᐃ: "img/night-crate32.png",
    ⲆΔⵠⲆᐃΔΔ: "img/day-crate33.png",
    ᐃᐃⲆΔⲆᐃᐃ: "img/night-crate33.png",
    ⵠΔᐃⵠΔΔΔ: "img/day-crate34.png",
    ᐃᐃⲆⲆΔⲆᐃ: "img/night-crate34.png",
    ΔᐃⵠⲆΔⵠⵠ: "img/day-crate35.png",
    ΔⲆΔⲆΔᐃᐃ: "img/night-crate35.png",
    ⲆⵠΔΔⵠⵠⲆ: "img/day-crate36.png",
    ⵠⵠⵠⲆΔΔΔ: "img/night-crate36.png",
    ΔⲆⵠⲆΔⵠⲆ: "img/day-crate37.png",
    ⲆΔΔΔⲆⵠΔ: "img/night-crate37.png",
    ⵠⲆⲆΔⵠⵠⵠ: "img/day-crate38.png",
    ΔⲆⲆᐃⵠⵠⵠ: "img/night-crate38.png",
    ᐃⵠᐃΔΔⵠⲆ: "img/day-crate39.png",
    ΔΔⵠΔⲆⵠⲆ: "img/night-crate39.png",
    ⲆⲆⵠⲆⵠΔᐃ: "img/day-crate40.png",
    ⲆⲆⲆⲆᐃΔⵠ: "img/night-crate40.png",
    ⲆⲆⵠⵠΔΔⲆ: "img/day-crate41.png",
    ⲆᐃⲆⵠⵠᐃⲆ: "img/night-crate41.png",
    ⵠⲆⵠᐃᐃⵠⲆ: "img/day-crate42.png",
    ΔᐃᐃⵠΔⵠΔ: "img/night-crate42.png",
    ⲆΔⵠⲆᐃⲆΔ: "img/day-crate43.png",
    ᐃⵠⲆⵠΔⵠⵠ: "img/night-crate43.png",
    ⵠΔΔⵠⵠⵠᐃ: "img/day-crate44.png",
    ᐃᐃⵠᐃᐃΔΔ: "img/night-crate44.png",
    ΔΔΔΔΔⲆⵠ: "img/day-crate45.png",
    ᐃΔⲆᐃᐃⵠⲆ: "img/night-crate45.png",
    ᐃᐃⲆΔΔⲆⵠ: "img/day-crate46.png",
    ΔⵠⲆⲆⵠⲆⲆ: "img/night-crate46.png",
    ΔΔΔΔΔⵠⲆ: "img/day-crate47.png",
    ⵠⲆⲆⵠⵠⵠΔ: "img/night-crate47.png",
    ⵠⲆᐃⵠⵠⲆΔ: "img/day-crate48.png",
    ΔᐃⵠⲆᐃⵠᐃ: "img/night-crate48.png",
    ⵠᐃΔΔΔΔⲆ: "img/day-crate49.png",
    ᐃⵠᐃⲆᐃΔΔ: "img/night-crate49.png",
    ⲆΔᐃⲆⵠⲆᐃ: "img/day-crate50.png",
    ᐃΔⲆⵠΔΔᐃ: "img/night-crate50.png",
    ᐃⵠⲆⲆⲆΔᐃ: "img/day-crate51.png",
    ᐃΔⲆⲆΔΔⵠ: "img/night-crate51.png",
    ⵠΔⵠᐃΔⲆΔ: "img/day-crate52.png",
    ⲆΔΔᐃΔⲆⲆ: "img/night-crate52.png",
    ⲆᐃᐃⵠΔΔΔ: "img/day-crate53.png",
    ⲆⲆΔΔⲆᐃⵠ: "img/night-crate53.png",
    ΔᐃΔᐃΔᐃΔ: "img/day-crate54.png",
    ΔⵠᐃΔⲆⲆⲆ: "img/night-crate54.png",
    ᐃⵠⵠᐃᐃΔΔ: "img/day-crate55.png",
    ΔΔΔᐃΔⲆᐃ: "img/night-crate55.png",
    ᐃᐃΔΔⲆᐃΔ: "img/day-crate56.png",
    ⵠⵠᐃⲆΔᐃⵠ: "img/night-crate56.png",
    ⵠⵠΔⲆⵠᐃᐃ: "img/day-crate57.png",
    ⵠⲆΔΔⲆᐃⵠ: "img/night-crate57.png",
    ΔⲆⲆⵠⵠΔΔ: "img/day-crate58.png",
    ᐃⵠᐃΔᐃⲆⲆ: "img/night-crate58.png",
    ᐃΔⵠⵠΔᐃᐃ: "img/day-crate59.png",
    ΔΔⵠΔᐃᐃΔ: "img/night-crate59.png",
    ΔⲆⵠⲆᐃΔΔ: "img/day-crate60.png",
    ᐃⵠⵠⲆᐃᐃⲆ: "img/night-crate60.png",
    ⲆⵠⵠⲆⲆΔᐃ: "img/day-crate61.png",
    ⵠᐃΔⲆⵠⲆΔ: "img/night-crate61.png",
    ΔⵠᐃΔⵠⲆΔ: "img/day-crate62.png",
    ᐃⲆᐃᐃⲆⲆΔ: "img/night-crate62.png",
    ⵠᐃΔΔᐃⲆᐃ: "img/day-crate63.png",
    ᐃᐃᐃⵠᐃΔⵠ: "img/night-crate63.png",
    ⵠⵠⲆⵠΔⲆⵠ: "img/day-crate64.png",
    ⲆⲆⲆⵠΔⲆᐃ: "img/night-crate64.png",
    ⵠⲆΔΔΔᐃⵠ: "img/day-crate65.png",
    ΔΔᐃⵠᐃⲆⲆ: "img/night-crate65.png",
    ⲆΔᐃᐃΔⲆᐃ: "img/day-crate66.png",
    ΔᐃⲆⲆⵠⲆⲆ: "img/night-crate66.png",
    ⵠⵠᐃⵠΔⵠⵠ: "img/day-crate67.png",
    ⲆⲆⲆⲆᐃⵠⵠ: "img/night-crate67.png",
    ΔⲆⵠⲆⲆᐃⵠ: "img/day-crate68.png",
    ΔⵠΔⲆΔⵠⲆ: "img/night-crate68.png",
    ΔⵠᐃΔΔⲆᐃ: "img/day-crate69.png",
    ᐃΔⲆᐃᐃΔΔ: "img/night-crate69.png",
    ΔⵠΔⵠⲆⲆᐃ: "img/day-crate70.png",
    ⵠΔᐃⵠΔⲆⲆ: "img/night-crate70.png",
    ⲆΔΔΔᐃⲆⵠ: "img/day-crate71.png",
    ⲆΔⲆΔᐃⵠⲆ: "img/night-crate71.png",
    ⲆⵠΔΔᐃⲆⲆ: "img/day-crate72.png",
    ΔⵠⵠⲆΔΔᐃ: "img/night-crate72.png",
    ΔΔᐃᐃⵠⵠⵠ: "img/day-crate73.png",
    ⵠⵠΔΔΔᐃᐃ: "img/night-crate73.png",
    ⵠᐃⲆⲆᐃⵠᐃ: "img/day-crate74.png",
    ΔⲆᐃᐃⵠᐃⵠ: "img/night-crate74.png",
    ⵠᐃΔⵠᐃⲆⵠ: "img/day-crate75.png",
    ⵠΔⲆᐃΔΔⲆ: "img/night-crate75.png",
    ᐃⵠΔⵠⲆⵠⵠ: "img/day-crate76.png",
    ⵠⵠⲆΔⵠΔΔ: "img/night-crate76.png",
    ᐃⲆΔΔⲆΔΔ: "img/day-crate77.png",
    ΔᐃⵠΔⲆᐃΔ: "img/night-crate77.png",
    ⲆΔᐃⲆⲆⵠᐃ: "img/day-crate78.png",
    ΔⵠᐃⵠᐃⵠΔ: "img/night-crate78.png",
    ⵠⵠⲆᐃⵠⲆⵠ: "img/day-crate79.png",
    ΔΔᐃΔⲆⵠᐃ: "img/night-crate79.png",
    ᐃΔⲆᐃⲆⵠⲆ: "img/day-herb0.png",
    ᐃⲆᐃⵠⵠⵠⵠ: "img/day-herb1.png",
    ⲆⵠΔΔⲆⲆⵠ: "img/day-herb2.png",
    ΔᐃⲆᐃⵠⲆⵠ: "img/day-herb3.png",
    ⵠⵠⵠⵠΔΔᐃ: "img/day-herb4.png",
    ᐃⵠᐃⲆΔⵠⵠ: "img/day-herb5.png",
    ⵠⵠᐃⲆᐃΔⵠ: "img/day-herb6.png",
    ⵠⲆΔⵠᐃΔⵠ: "img/day-herb7.png",
    ᐃⵠᐃⵠΔⲆⵠ: "img/day-herb8.png",
    ⲆⵠⲆᐃᐃⲆΔ: "img/day-herb9.png",
    ⵠⵠⵠⲆᐃᐃⵠ: "img/day-herb10.png",
    ⵠΔΔᐃⲆⲆᐃ: "img/day-herb11.png",
    ΔᐃⵠᐃⵠⵠⲆ: "img/day-herb12.png",
    ⲆⵠⵠᐃⵠⲆⲆ: "img/day-herb13.png",
    ⵠΔΔΔΔΔᐃ: "img/day-herb14.png",
    ΔᐃⵠⵠΔⵠᐃ: "img/day-herb15.png",
    ΔᐃΔᐃΔᐃᐃ: "img/day-shell0.png",
    ⵠᐃᐃΔᐃⲆⲆ: "img/day-shell1.png",
    ⲆΔΔᐃⲆⲆΔ: "img/day-shell2.png",
    ᐃⵠⲆΔΔᐃⵠ: "img/day-leaf1.png",
    ⵠⵠᐃᐃᐃⲆⲆ: "img/day-leaf2.png",
    ᐃⵠⵠⲆⲆᐃΔ: "img/day-leaf3.png",
    ⲆⵠⲆⵠⲆⲆᐃ: "img/day-leaf4.png",
    ⲆΔⲆⲆΔΔᐃ: "img/day-leaf5.png",
    ⵠⵠⵠΔⵠⲆΔ: "img/day-leaf6.png",
    ⲆⵠⲆΔⵠⵠⵠ: "img/day-leaf7.png",
    ⲆᐃⲆΔᐃⵠΔ: "img/day-leaf8.png",
    ᐃᐃⲆᐃΔᐃⵠ: "img/day-rock0.png",
    ΔⲆⲆⲆⲆᐃᐃ: "img/day-rock1.png",
    ΔΔⲆⵠⵠⵠⲆ: "img/day-rock2.png",
    ᐃⲆⵠΔⲆΔᐃ: "img/day-rock3.png",
    ΔᐃᐃᐃΔᐃΔ: "img/day-rock4.png",
    ΔⵠᐃᐃΔΔⵠ: "img/day-rock5.png",
    ⵠⲆⵠⲆΔΔⲆ: "img/day-rock6.png",
    ⲆⵠᐃⲆⵠᐃⵠ: "img/day-rock7.png",
    ⲆⲆⲆΔⲆΔΔ: "img/day-rock8.png",
    ᐃᐃⵠⵠⵠⲆⲆ: "img/day-rock9.png",
    ⲆΔⵠⵠΔΔᐃ: "img/day-rock10.png",
    ⵠⲆᐃᐃΔⲆᐃ: "img/day-rock11.png",
    ⲆⲆᐃⵠᐃⲆⲆ: "img/day-rock12.png",
    ᐃᐃⲆᐃⲆⵠⵠ: "img/day-rock13.png",
    ⲆΔⵠΔᐃΔΔ: "img/day-flower1.png",
    ⵠΔΔᐃᐃΔΔ: "img/day-flower2.png",
    ᐃΔⲆⲆᐃΔᐃ: "img/day-flower3.png",
    ⲆⲆⵠⵠᐃⵠⵠ: "img/day-flower4.png",
    ᐃⵠⲆⲆⲆᐃΔ: "img/day-flower5.png",
    ᐃⲆᐃⵠⲆⲆⲆ: "img/day-flower6.png",
    ⲆⲆⲆⵠᐃΔᐃ: "img/day-flower7.png",
    ΔⲆᐃΔⵠᐃᐃ: "img/day-flower8.png",
    ᐃⲆⲆⵠⲆⲆᐃ: "img/day-flower9.png",
    ⲆⵠⲆⵠⲆΔΔ: "img/day-herb16.png",
    ⲆⲆᐃⵠΔΔⲆ: "img/day-herb17.png",
    ⲆⲆΔⲆᐃΔⵠ: "img/day-herb18.png",
    ΔⲆᐃⵠⵠⲆⵠ: "img/day-herb19.png",
    ⲆⲆⵠΔᐃⲆⲆ: "img/day-herb20.png",
    ᐃⲆⵠᐃᐃΔΔ: "img/day-herb21.png",
    ΔᐃᐃΔⵠᐃⲆ: "img/night-herb0.png",
    ⵠⵠᐃᐃⵠΔᐃ: "img/night-herb1.png",
    ⲆᐃᐃⵠⲆⲆᐃ: "img/night-herb2.png",
    ΔΔⵠᐃΔᐃΔ: "img/night-herb3.png",
    ⲆⵠⵠΔΔⲆΔ: "img/night-herb4.png",
    ⵠΔΔⲆⵠⵠⲆ: "img/night-herb5.png",
    ⵠΔⲆᐃⲆⲆⵠ: "img/night-herb6.png",
    ΔᐃᐃⲆⲆⵠΔ: "img/night-herb7.png",
    ⵠᐃⵠⵠᐃⵠⵠ: "img/night-herb8.png",
    Δⵠⵠⵠⵠⵠᐃ: "img/night-herb9.png",
    ᐃⵠⲆⲆⲆᐃᐃ: "img/night-herb10.png",
    ⲆⲆⵠⵠΔᐃΔ: "img/night-herb11.png",
    ⲆᐃΔⵠᐃⵠΔ: "img/night-herb12.png",
    ⵠⲆᐃᐃⵠⵠᐃ: "img/night-herb13.png",
    ⵠⵠⵠΔⲆⵠΔ: "img/night-herb14.png",
    ⵠᐃᐃⵠᐃᐃⲆ: "img/night-herb15.png",
    ΔⵠⲆⲆΔΔⵠ: "img/night-shell0.png",
    ⵠᐃᐃⵠᐃΔᐃ: "img/night-shell1.png",
    ⵠΔᐃΔᐃᐃΔ: "img/night-shell2.png",
    ⲆⵠⵠΔΔⵠΔ: "img/night-leaf1.png",
    ⵠΔⵠⵠⵠⲆⲆ: "img/night-leaf2.png",
    ᐃⲆᐃⲆⵠⵠⵠ: "img/night-leaf3.png",
    ⲆⲆᐃⲆΔΔⲆ: "img/night-leaf4.png",
    ΔΔⵠΔᐃΔΔ: "img/night-leaf5.png",
    ΔⲆΔⲆΔΔΔ: "img/night-leaf6.png",
    ΔΔΔᐃⲆⵠᐃ: "img/night-leaf7.png",
    ᐃⵠⲆⲆΔⵠⲆ: "img/night-leaf8.png",
    ΔⵠΔⵠᐃⵠⲆ: "img/night-rock0.png",
    ⲆⲆΔⲆⲆᐃᐃ: "img/night-rock1.png",
    ⲆⵠⵠⲆⲆⲆΔ: "img/night-rock2.png",
    ΔΔᐃᐃⵠᐃⵠ: "img/night-rock3.png",
    ΔⵠᐃΔᐃⵠⲆ: "img/night-rock4.png",
    ⵠΔᐃⲆⵠⲆᐃ: "img/night-rock5.png",
    ΔΔⵠᐃᐃⵠⲆ: "img/night-rock6.png",
    ⲆΔᐃⵠⵠⲆⲆ: "img/night-rock7.png",
    ⵠⵠⲆⲆᐃⵠⲆ: "img/night-rock8.png",
    ⵠᐃᐃΔⵠⲆΔ: "img/night-rock9.png",
    ΔⵠΔⵠⵠΔΔ: "img/night-rock10.png",
    ΔⲆⲆᐃⵠᐃⵠ: "img/night-rock11.png",
    ᐃⲆⵠΔΔⲆⵠ: "img/night-rock12.png",
    ⵠⵠⵠⵠⲆⵠⵠ: "img/night-rock13.png",
    ⲆΔᐃⵠᐃⲆⲆ: "img/night-flower1.png",
    ᐃΔⲆⲆᐃⵠᐃ: "img/night-flower2.png",
    ᐃΔΔΔΔⲆⵠ: "img/night-flower3.png",
    ⵠᐃⵠᐃᐃΔᐃ: "img/night-flower4.png",
    ᐃⲆⲆᐃΔᐃⵠ: "img/night-flower5.png",
    ⵠⲆⵠΔᐃΔⲆ: "img/night-flower6.png",
    ⵠⵠΔⵠⲆⲆⵠ: "img/night-flower7.png",
    ⵠᐃⲆⵠΔⲆⵠ: "img/night-flower8.png",
    ΔᐃΔⵠⵠΔᐃ: "img/night-flower9.png",
    ᐃⵠⵠᐃⵠⲆΔ: "img/night-herb16.png",
    ⵠᐃΔⵠᐃⲆᐃ: "img/night-herb17.png",
    ᐃⵠⵠⲆΔΔΔ: "img/night-herb18.png",
    ⲆᐃⵠᐃΔⲆΔ: "img/night-herb19.png",
    ΔⲆᐃᐃⲆⲆⵠ: "img/night-herb20.png",
    ⵠⲆᐃΔᐃᐃⵠ: "img/night-herb21.png",
    ᐃⵠⲆⵠΔᐃⵠ: "img/day-river000-010-000.png",
    ΔΔΔⲆⵠⲆⵠ: "img/day-river000-010-010.png",
    ᐃⵠᐃΔⵠᐃᐃ: "img/day-river000-011-000.png",
    ᐃⲆⲆⵠΔΔⲆ: "img/day-river000-011-010.png",
    ⵠⲆⲆⵠᐃᐃⵠ: "img/day-river000-011-011.png",
    ᐃΔⲆⵠⲆΔᐃ: "img/day-river000-110-000.png",
    ᐃⲆⲆⲆᐃΔᐃ: "img/day-river000-110-010.png",
    ᐃⲆᐃΔⵠΔᐃ: "img/day-river000-110-110.png",
    ⵠⲆⲆᐃⵠⵠΔ: "img/day-river000-111-000.png",
    ⲆΔⲆⲆᐃⵠⵠ: "img/day-river000-111-010.png",
    ⲆⲆᐃΔⵠΔΔ: "img/day-river000-111-011.png",
    ᐃΔⲆⲆᐃⵠΔ: "img/day-river000-111-110.png",
    ᐃᐃᐃᐃᐃⵠΔ: "img/day-river000-111-111.png",
    ΔⲆⲆᐃⲆᐃⵠ: "img/day-river010-010-000.png",
    ΔᐃᐃΔᐃⵠΔ: "img/day-river010-010-010.png",
    ⵠᐃⲆⲆⵠⲆⵠ: "img/day-river010-011-000.png",
    ⵠΔᐃΔⵠⲆΔ: "img/day-river010-011-010.png",
    ⵠⲆⵠⵠΔⵠΔ: "img/day-river010-011-011.png",
    ΔᐃᐃⲆⵠⲆⲆ: "img/day-river010-110-000.png",
    ᐃᐃⵠⲆⲆΔⵠ: "img/day-river010-110-010.png",
    ΔⲆⲆⲆᐃⲆⵠ: "img/day-river010-110-110.png",
    ΔΔⲆΔΔΔⲆ: "img/day-river010-111-000.png",
    ⵠᐃⲆᐃⵠΔᐃ: "img/day-river010-111-010.png",
    ᐃᐃΔⲆⵠⲆⵠ: "img/day-river010-111-011.png",
    ΔⲆΔΔⵠⲆΔ: "img/day-river010-111-110.png",
    ⲆΔⲆΔⵠΔⵠ: "img/day-river010-111-111.png",
    ⲆᐃⲆᐃⲆⵠⲆ: "img/day-river011-011-000.png",
    ⵠΔⲆⵠⵠᐃΔ: "img/day-river011-011-010.png",
    ⲆᐃΔΔⵠΔⲆ: "img/day-river011-011-011.png",
    ᐃⲆⲆⵠⲆΔΔ: "img/day-river011-111-000.png",
    ΔΔᐃΔΔⲆΔ: "img/day-river011-111-010.png",
    ⵠΔΔΔΔⵠᐃ: "img/day-river011-111-011.png",
    ⵠⵠⵠᐃΔΔⲆ: "img/day-river011-111-110.png",
    ⲆᐃⵠᐃⵠⲆᐃ: "img/day-river011-111-111.png",
    ⲆⲆΔᐃⵠΔⲆ: "img/day-river110-110-000.png",
    ΔⲆⲆᐃᐃᐃⲆ: "img/day-river110-110-010.png",
    ⵠΔᐃⲆⲆᐃΔ: "img/day-river110-110-110.png",
    ⵠⲆᐃᐃᐃᐃⲆ: "img/day-river110-111-000.png",
    ⲆⵠⵠⵠⵠᐃΔ: "img/day-river110-111-010.png",
    ΔᐃⲆⵠⲆᐃΔ: "img/day-river110-111-011.png",
    ΔᐃᐃᐃⵠⵠΔ: "img/day-river110-111-110.png",
    ΔⲆⵠⵠΔⲆᐃ: "img/day-river110-111-111.png",
    ᐃⲆⲆΔᐃΔⲆ: "img/day-river111-111-011.png",
    ⲆⵠΔⵠⲆⲆⲆ: "img/day-river111-111-110.png",
    ᐃⲆⲆΔᐃΔⲆ: "img/day-river111-111-011.png",
    ⲆΔᐃⵠⵠᐃΔ: "img/day-river111-111-000.png",
    ᐃⵠᐃⵠⲆⵠⲆ: "img/day-river111-111-111.png",
    ΔΔᐃⵠⲆᐃΔ: "img/day-river111-111-010.png",
    ⲆΔⲆΔᐃⵠⵠ: "img/night-river000-010-000.png",
    ᐃⵠⲆΔⵠⵠΔ: "img/night-river000-010-010.png",
    ⲆΔⲆⵠΔᐃΔ: "img/night-river000-011-000.png",
    ΔΔⵠᐃᐃΔⵠ: "img/night-river000-011-010.png",
    ⲆⵠᐃⲆⵠΔᐃ: "img/night-river000-011-011.png",
    ΔⵠΔⲆⲆⲆⲆ: "img/night-river000-110-000.png",
    ⵠᐃᐃⲆⲆᐃⵠ: "img/night-river000-110-010.png",
    ⲆᐃᐃⵠΔⵠᐃ: "img/night-river000-110-110.png",
    ᐃⵠΔⵠⵠⲆⲆ: "img/night-river000-111-000.png",
    ᐃⵠⵠⲆΔᐃⵠ: "img/night-river000-111-010.png",
    ΔⲆⲆᐃΔⵠΔ: "img/night-river000-111-011.png",
    ⵠⲆⵠᐃΔΔΔ: "img/night-river000-111-110.png",
    ΔΔΔⵠᐃⲆᐃ: "img/night-river000-111-111.png",
    ᐃⲆΔⵠᐃⲆΔ: "img/night-river010-010-000.png",
    ᐃⲆΔΔᐃᐃᐃ: "img/night-river010-010-010.png",
    ⵠᐃΔⲆⵠᐃⲆ: "img/night-river010-011-000.png",
    ⲆⵠᐃΔⵠⵠᐃ: "img/night-river010-011-010.png",
    ᐃⲆᐃⲆⲆⲆΔ: "img/night-river010-011-011.png",
    ⲆΔⵠᐃⵠⲆⵠ: "img/night-river010-110-000.png",
    ᐃⵠΔⲆⲆΔᐃ: "img/night-river010-110-010.png",
    ᐃⲆᐃⵠΔΔⵠ: "img/night-river010-110-110.png",
    ⵠᐃΔΔⵠⵠⲆ: "img/night-river010-111-000.png",
    ΔⵠΔΔΔⲆⵠ: "img/night-river010-111-010.png",
    ⲆΔⵠᐃⵠᐃⵠ: "img/night-river010-111-011.png",
    ΔⲆⲆᐃⲆⲆⲆ: "img/night-river010-111-110.png",
    ᐃⵠᐃⲆΔⵠⲆ: "img/night-river010-111-111.png",
    ⲆⵠΔΔᐃⲆΔ: "img/night-river011-011-000.png",
    ᐃⵠⲆⲆⵠᐃᐃ: "img/night-river011-011-010.png",
    ΔⵠⵠᐃⵠΔᐃ: "img/night-river011-011-011.png",
    ⵠΔⲆⲆⵠⲆⲆ: "img/night-river011-111-000.png",
    ⵠⵠΔᐃⵠΔⵠ: "img/night-river011-111-010.png",
    ᐃᐃⲆⵠⵠᐃΔ: "img/night-river011-111-011.png",
    ⵠⲆⲆⲆᐃᐃⵠ: "img/night-river011-111-110.png",
    ⲆⵠⵠⲆⵠⲆᐃ: "img/night-river011-111-111.png",
    ⵠΔⵠⵠΔⲆΔ: "img/night-river110-110-000.png",
    ᐃΔΔⵠΔᐃⲆ: "img/night-river110-110-010.png",
    ⵠⲆᐃᐃⵠⲆⵠ: "img/night-river110-110-110.png",
    ᐃᐃΔⲆᐃΔⵠ: "img/night-river110-111-000.png",
    ⵠᐃᐃΔᐃⵠᐃ: "img/night-river110-111-010.png",
    ᐃⵠⵠⲆᐃⲆⲆ: "img/night-river110-111-011.png",
    ⲆⲆⲆΔⲆⲆΔ: "img/night-river110-111-110.png",
    ⵠΔⲆⵠΔⵠⵠ: "img/night-river110-111-111.png",
    ᐃⵠΔⲆⲆΔⵠ: "img/night-river111-111-011.png",
    ⵠⲆΔᐃⵠⵠⵠ: "img/night-river111-111-110.png",
    ᐃⵠΔⲆⲆΔⵠ: "img/night-river111-111-011.png",
    ᐃⵠΔⲆᐃⲆⵠ: "img/night-river111-111-000.png",
    ⵠᐃⵠⲆⲆᐃᐃ: "img/night-river111-111-111.png",
    ⵠⲆⵠΔΔⲆⲆ: "img/night-river111-111-010.png",
    ⵠΔⲆⲆⲆⵠᐃ: "img/day-pebblecompo1.png",
    ⵠⲆᐃⲆΔ: "img/day-pebblecompo2.png",
    ΔⲆΔΔⲆ: "img/day-pebblecompo3.png",
    ⲆⲆⵠⵠⵠᐃΔ: "img/day-pebblecompo4.png",
    ΔⵠⲆⵠᐃ: "img/day-pebblecompo5.png",
    ⲆᐃⲆᐃᐃ: "img/day-pebblecompo6.png",
    ⵠⵠⵠⲆⵠ: "img/day-pebblecompo7.png",
    ⵠᐃⵠⲆⲆⲆⲆ: "img/day-pebblecompo8.png",
    ΔⵠⵠⲆⲆⵠΔ: "img/day-pebblecompo9.png",
    ⲆⵠⵠⲆᐃⲆΔ: "img/day-pebblecompo10.png",
    ΔΔΔΔΔ: "img/day-pebblecompo11.png",
    ⲆᐃΔⲆᐃΔⲆ: "img/day-pebblecompo12.png",
    ⲆⲆⵠⲆᐃⲆᐃ: "img/day-pebblecompo13.png",
    ⵠΔⲆᐃᐃⵠΔ: "img/day-pebblecompo14.png",
    ⲆᐃᐃⵠⵠᐃⲆ: "img/day-pebblecompo15.png",
    ΔⲆⵠᐃΔΔⲆ: "img/day-pebblecompo16.png",
    ΔΔᐃΔΔ: "img/day-pebblecompo17.png",
    ⵠⵠΔᐃᐃⵠᐃ: "img/day-pebblecompo18.png",
    ⲆⲆΔᐃᐃΔⵠ: "img/day-pebblecompo19.png",
    ⵠⲆⲆⲆⵠ: "img/day-pebblecompo20.png",
    ⵠΔⵠᐃⵠ: "img/day-pebblecompo21.png",
    ⲆΔΔΔⲆᐃΔ: "img/day-pebblecompo22.png",
    ᐃᐃΔΔᐃΔⲆ: "img/day-pebblecompo23.png",
    ΔⲆⵠΔⲆⵠΔ: "img/day-pebblecompo24.png",
    ᐃⵠⲆΔⵠ: "img/day-pebblecompo25.png",
    ⲆⲆᐃⵠᐃ: "img/day-pebblecompo26.png",
    ⲆⵠᐃⲆᐃⲆΔ: "img/day-pebblecompo27.png",
    ᐃⵠΔⲆⵠ: "img/day-pebblecompo28.png",
    ΔⵠⲆᐃⲆⵠΔ: "img/night-pebblecompo1.png",
    ᐃΔΔⲆΔ: "img/night-pebblecompo2.png",
    ⵠⲆⵠⲆΔ: "img/night-pebblecompo3.png",
    ᐃΔⲆⵠⲆⵠΔ: "img/night-pebblecompo4.png",
    ⲆΔΔᐃᐃ: "img/night-pebblecompo5.png",
    ⵠⵠᐃⲆⵠ: "img/night-pebblecompo6.png",
    ⲆᐃⵠⵠΔ: "img/night-pebblecompo7.png",
    ⲆⲆⲆⵠⲆΔⲆ: "img/night-pebblecompo8.png",
    ΔⵠΔᐃⲆᐃⲆ: "img/night-pebblecompo9.png",
    ⲆᐃΔⵠΔⲆⲆ: "img/night-pebblecompo10.png",
    ⲆⵠΔΔᐃ: "img/night-pebblecompo11.png",
    ᐃΔᐃⵠᐃΔⵠ: "img/night-pebblecompo12.png",
    ΔⲆⵠⲆⵠⵠᐃ: "img/night-pebblecompo13.png",
    ⵠᐃΔᐃΔⵠᐃ: "img/night-pebblecompo14.png",
    ᐃᐃⵠⲆⵠᐃⲆ: "img/night-pebblecompo15.png",
    ⲆⲆᐃⲆⲆᐃΔ: "img/night-pebblecompo16.png",
    ⵠΔᐃⵠⲆ: "img/night-pebblecompo17.png",
    ΔᐃᐃⲆⲆΔⵠ: "img/night-pebblecompo18.png",
    ᐃⵠᐃⲆⲆⵠΔ: "img/night-pebblecompo19.png",
    ᐃⵠⵠΔᐃ: "img/night-pebblecompo20.png",
    ⵠⲆΔⵠⵠ: "img/night-pebblecompo21.png",
    ΔᐃᐃⵠᐃⲆᐃ: "img/night-pebblecompo22.png",
    ΔΔΔᐃΔⵠᐃ: "img/night-pebblecompo23.png",
    ΔⲆᐃⵠᐃⲆΔ: "img/night-pebblecompo24.png",
    ᐃΔΔΔⲆ: "img/night-pebblecompo25.png",
    ᐃᐃΔΔΔ: "img/night-pebblecompo26.png",
    ᐃⵠΔⲆᐃⵠⲆ: "img/night-pebblecompo27.png",
    ΔᐃᐃⲆΔ: "img/night-pebblecompo28.png",
    ΔⲆⲆΔⵠⵠᐃ: "img/day-baby-mammoth.png",
    ᐃⲆᐃⵠΔⵠⲆ: "img/day-baby-mammoth-tamed.png",
    ᐃΔᐃⵠⲆΔᐃ: "img/day-baby-mammoth-angry.png",
    ΔΔⲆᐃᐃΔᐃ: "img/night-baby-mammoth.png",
    ⲆⲆΔᐃⲆⲆⲆ: "img/night-baby-mammoth-tamed.png",
    ⵠⵠⵠⵠΔΔⵠ: "img/night-baby-mammoth-angry.png",
    ⲆⵠⲆᐃΔᐃⵠ: "img/inv-mammoth-out.png",
    ΔᐃⲆⲆⲆᐃᐃ: "img/inv-mammoth-in.png",
    ᐃᐃⲆᐃⲆΔⵠΔΔ: "img/inv-mammoth-click.png",
    ᐃᐃᐃΔⲆⲆⵠ: "img/hurt-baby-mammoth.png",
    ⲆⵠⲆⲆⵠⵠᐃ: "img/baby-mammoth-step.png",
    ΔⵠⵠΔᐃᐃΔⲆⲆ: "img/day-flower-hat.png",
    ΔΔΔⲆⲆΔⲆⵠΔ: "img/night-flower-hat.png",
    ⵠΔⲆⲆᐃⲆᐃⵠΔ: "img/inv-flower-hat-out.png",
    ⲆᐃΔΔΔⲆⲆΔΔ: "img/inv-flower-hat-in.png",
    ⲆⵠⵠⲆΔⵠᐃⲆⲆ: "img/inv-flower-hat-click.png",
    ⵠᐃᐃΔⲆΔΔΔᐃ: "img/day-fur-hat.png",
    ⵠⵠᐃⲆⵠΔᐃⵠᐃ: "img/night-fur-hat.png",
    ⲆᐃᐃᐃⵠⲆⲆᐃⵠ: "img/inv-fur-hat-out.png",
    ᐃᐃⵠⵠⵠᐃⲆᐃᐃ: "img/inv-fur-hat-in.png",
    ⲆⲆⵠΔⵠⲆⲆⵠⵠ: "img/inv-fur-hat-click.png",
    ΔΔᐃΔᐃᐃⵠⵠᐃ: "img/day-mammoth.png",
    ⵠΔᐃᐃⵠⲆⵠᐃᐃ: "img/night-mammoth.png",
    ⵠᐃⲆⲆᐃᐃᐃ: "img/hurt-mammoth.png",
    ⲆᐃⵠΔⵠΔᐃⲆⵠ: "img/inv-mammoth-fur-out.png",
    ᐃⵠᐃⲆΔΔⵠΔⲆ: "img/inv-mammoth-fur-in.png",
    ΔΔⵠᐃⲆΔᐃⲆⵠ: "img/inv-mammoth-fur-click.png",
    ⵠᐃᐃᐃⲆᐃᐃᐃⵠ: "img/inv-wood-bow-out.png",
    ΔᐃᐃⵠᐃᐃᐃⲆΔ: "img/inv-wood-bow-in.png",
    ΔΔᐃᐃⵠⲆΔΔⲆ: "img/inv-wood-bow-click.png",
    ᐃⲆⲆᐃᐃᐃⲆⵠΔ: "img/inv-wood-arrow-out.png",
    ᐃΔⵠⲆⲆⲆᐃᐃⵠ: "img/inv-wood-arrow-in.png",
    ᐃⲆΔᐃⲆⲆΔⲆΔ: "img/inv-wood-arrow-click.png",
    ᐃⲆⲆⵠⲆᐃⵠⲆⵠ: "img/day-wood-bow2.png",
    ⵠᐃΔΔΔⵠⵠΔᐃ: "img/night-wood-bow2.png",
    ᐃⲆⵠⵠΔⵠⲆ: "img/day-wood-arrow.png",
    ΔΔᐃᐃⵠⲆⵠ: "img/night-wood-arrow.png",
    ᐃΔⲆΔᐃⵠΔⲆᐃ: "img/inv-stone-bow-out.png",
    ⵠⵠⲆⵠᐃΔⲆⲆᐃ: "img/inv-stone-bow-in.png",
    ⲆᐃⵠᐃᐃᐃΔⵠΔ: "img/inv-stone-bow-click.png",
    ᐃᐃⲆⵠⵠᐃⵠΔⲆ: "img/inv-stone-arrow-out.png",
    ⲆΔᐃⵠΔⲆᐃᐃΔ: "img/inv-stone-arrow-in.png",
    ΔⲆⲆⲆⵠᐃΔΔⲆ: "img/inv-stone-arrow-click.png",
    ΔⲆΔᐃᐃᐃΔΔⵠ: "img/day-stone-bow.png",
    ⵠΔⵠΔᐃⵠᐃⲆΔ: "img/night-stone-bow.png",
    ⵠᐃΔⲆⵠⲆᐃ: "img/day-stone-arrow.png",
    ⲆⵠᐃᐃⲆΔⲆ: "img/night-stone-arrow.png",
    ᐃΔᐃⲆⲆᐃⵠⵠΔ: "img/inv-gold-bow-out.png",
    ⲆᐃᐃΔᐃⵠⵠⲆⵠ: "img/inv-gold-bow-in.png",
    ⲆᐃⵠⲆⵠᐃΔⵠᐃ: "img/inv-gold-bow-click.png",
    ᐃⵠⵠⵠᐃⵠΔⲆΔ: "img/inv-gold-arrow-out.png",
    ᐃᐃᐃΔⵠΔⵠⲆⲆ: "img/inv-gold-arrow-in.png",
    ⲆⲆⲆᐃΔⵠⵠⲆᐃ: "img/inv-gold-arrow-click.png",
    ᐃⲆΔΔᐃⲆⲆⵠΔ: "img/day-gold-bow.png",
    ⲆΔⲆᐃⵠᐃⲆⲆΔ: "img/night-gold-bow.png",
    ΔⲆⲆⵠΔⵠⵠ: "img/day-gold-arrow.png",
    ⵠΔⲆⵠⵠᐃⵠ: "img/night-gold-arrow.png",
    ᐃⲆΔⲆⲆΔᐃᐃⵠ: "img/inv-diamond-bow-out.png",
    ΔΔΔᐃᐃΔΔⲆⲆ: "img/inv-diamond-bow-in.png",
    ⲆⲆᐃΔᐃⲆⵠⵠΔ: "img/inv-diamond-bow-click.png",
    ⲆⲆᐃᐃⵠᐃⵠⵠΔ: "img/inv-diamond-arrow-out.png",
    ᐃΔᐃᐃΔᐃᐃΔᐃ: "img/inv-diamond-arrow-in.png",
    ΔΔᐃⵠⲆⵠⵠⵠⵠ: "img/inv-diamond-arrow-click.png",
    ⲆⲆᐃᐃᐃΔⵠᐃⲆ: "img/day-diamond-bow.png",
    ⵠΔΔⲆⵠΔᐃⵠⲆ: "img/night-diamond-bow.png",
    ᐃⵠⲆⵠΔⵠᐃ: "img/day-diamond-arrow.png",
    ⲆΔᐃᐃᐃⵠⲆ: "img/night-diamond-arrow.png",
    ΔᐃΔᐃⲆᐃⲆΔⵠ: "img/inv-amethyst-bow-out.png",
    ⲆᐃⲆⵠⲆᐃⲆᐃⵠ: "img/inv-amethyst-bow-in.png",
    ᐃᐃᐃᐃΔᐃⵠΔⵠ: "img/inv-amethyst-bow-click.png",
    ΔΔΔⲆΔⲆᐃⲆᐃ: "img/inv-amethyst-arrow-out.png",
    ⲆⵠᐃᐃⲆⲆᐃᐃΔ: "img/inv-amethyst-arrow-in.png",
    ⵠⵠⵠᐃᐃⵠⵠⵠΔ: "img/inv-amethyst-arrow-click.png",
    ⲆⵠΔΔᐃⵠⵠᐃᐃ: "img/day-amethyst-bow.png",
    ⲆⲆᐃΔⵠⵠⲆⲆᐃ: "img/night-amethyst-bow.png",
    ΔᐃΔⲆᐃⵠΔ: "img/day-amethyst-arrow.png",
    ΔⵠⲆᐃⵠⵠⵠ: "img/night-amethyst-arrow.png",
    ⵠΔⲆΔᐃᐃΔⵠⵠ: "img/inv-dragon-bow-out.png",
    ⲆⲆᐃΔΔⲆΔⲆΔ: "img/inv-dragon-bow-in.png",
    ΔⵠᐃⲆΔⵠⵠⵠᐃ: "img/inv-dragon-bow-click.png",
    ⲆΔΔⵠᐃΔⵠΔⲆ: "img/inv-dragon-arrow-out.png",
    ⲆⵠⲆⲆΔⲆᐃⲆᐃ: "img/inv-dragon-arrow-in.png",
    ᐃΔΔⲆⲆⲆᐃᐃΔ: "img/inv-dragon-arrow-click.png",
    ᐃⲆⲆⲆᐃⲆΔⲆⵠ: "img/day-dragon-bow.png",
    ΔΔⵠⲆⵠΔΔΔⲆ: "img/night-dragon-bow.png",
    ⲆᐃᐃΔⵠⵠΔ: "img/day-dragon-arrow.png",
    ΔⵠⲆΔⵠᐃᐃ: "img/night-dragon-arrow.png",
    ⲆⵠⵠⵠΔⲆΔⲆΔ: "img/inv-reidite-bow-out.png",
    ⲆⵠΔᐃᐃΔᐃⵠⵠ: "img/inv-reidite-bow-in.png",
    ⲆΔⵠᐃⵠⲆⲆⲆⵠ: "img/inv-reidite-bow-click.png",
    ⲆΔⲆᐃⲆΔⵠᐃᐃ: "img/inv-reidite-arrow-out.png",
    ⵠᐃⲆᐃΔⵠⵠΔⲆ: "img/inv-reidite-arrow-in.png",
    ΔⵠⲆⵠⵠΔΔⵠᐃ: "img/inv-reidite-arrow-click.png",
    ⲆΔΔΔᐃⲆᐃⵠΔ: "img/day-reidite-bow.png",
    ⵠⵠⲆⵠΔᐃΔⵠΔ: "img/night-reidite-bow.png",
    ᐃᐃᐃⲆⵠΔⲆ: "img/day-reidite-arrow.png",
    ᐃΔⵠⵠΔᐃⵠΔᐃ: "img/night-reidite-arrow.png",
    ⲆⵠΔⵠⵠᐃΔⲆᐃ: "img/inv-wooden-axe-out.png",
    ᐃⲆΔⲆⲆᐃⲆᐃⵠ: "img/inv-wooden-axe-in.png",
    ᐃΔᐃⲆⲆᐃⲆΔᐃ: "img/inv-wooden-axe-click.png",
    ⲆᐃΔⵠᐃΔᐃⵠⲆ: "img/day-wooden-axe.png",
    ΔⲆⵠⵠⵠΔⲆⵠΔ: "img/night-wooden-axe.png",
    ⲆΔᐃΔⲆΔⲆᐃΔ: "img/inv-stone-axe-out.png",
    ⲆⵠΔᐃΔⲆᐃᐃⲆ: "img/inv-stone-axe-in.png",
    ᐃΔᐃΔᐃⲆᐃⲆΔ: "img/inv-stone-axe-click.png",
    ⲆⵠⲆΔΔⲆᐃᐃⲆ: "img/day-stone-axe.png",
    ᐃⵠᐃⲆⲆΔⵠΔⲆ: "img/night-stone-axe.png",
    ⲆⵠΔΔⲆᐃΔⲆⲆ: "img/inv-golden-axe-out.png",
    ᐃⵠⲆⲆⲆⵠⲆⵠᐃ: "img/inv-golden-axe-in.png",
    ΔΔⲆΔⵠⲆΔⲆⵠ: "img/inv-golden-axe-click.png",
    ᐃⵠΔᐃⲆⵠⵠⵠⵠ: "img/day-golden-axe.png",
    ᐃᐃΔⲆⲆⲆΔᐃᐃ: "img/night-golden-axe.png",
    ΔΔⲆΔⵠᐃᐃⲆΔ: "img/inv-diamond-axe-out.png",
    ⵠΔΔΔⵠⲆΔΔᐃ: "img/inv-diamond-axe-in.png",
    ⵠΔᐃᐃⵠᐃᐃⵠⵠ: "img/inv-diamond-axe-click.png",
    ⵠⵠᐃᐃⲆⲆⵠⲆⵠ: "img/day-diamond-axe.png",
    ⲆΔⵠΔⲆⲆΔΔᐃ: "img/night-diamond-axe.png",
    ᐃⵠⲆⲆⵠΔⲆⵠΔ: "img/inv-amethyst-axe-out.png",
    ⵠΔⵠΔΔⵠⲆⲆΔ: "img/inv-amethyst-axe-in.png",
    ⲆᐃΔΔᐃΔⲆⲆⲆ: "img/inv-amethyst-axe-click.png",
    ⲆᐃⵠΔⵠⵠⵠⵠΔ: "img/day-amethyst-axe.png",
    ΔⲆΔⵠⵠᐃᐃⲆⵠ: "img/night-amethyst-axe.png",
    ⲆᐃΔᐃⵠⵠⵠΔⲆ: "img/inv-reidite-axe-out.png",
    ⲆᐃⵠΔΔⵠΔⵠΔ: "img/inv-reidite-axe-in.png",
    ⲆⲆⲆⵠⲆΔᐃΔΔ: "img/inv-reidite-axe-click.png",
    ΔⵠΔᐃΔⲆⵠⵠᐃ: "img/day-reidite-axe.png",
    ΔⲆⵠᐃᐃⵠⲆᐃΔ: "img/night-reidite-axe.png",
    ΔᐃⵠΔⲆⵠⵠ: "img/bandage-activated.png",
    ΔⲆᐃⵠΔΔⲆ: "img/auto-feed.png",
    ⵠᐃⵠᐃⲆⵠⵠ: "img/stop-regeneration.png",
    ⲆⲆⵠΔⲆΔⲆ: "img/stop-regeneration2.png",
    ΔᐃΔⵠᐃⵠΔΔⲆ: "img/day-wood-platform.png",
    ΔΔⵠᐃⵠᐃᐃⵠⲆ: "img/night-wood-platform.png",
    ⵠⲆᐃᐃⲆᐃᐃⲆⵠ: "img/inv-wood-platform-in.png",
    ⵠᐃΔᐃⲆΔⲆᐃⵠ: "img/inv-wood-platform-out.png",
    ⵠΔᐃᐃⲆΔⲆⲆⵠ: "img/inv-wood-platform-click.png",
    ⵠΔΔΔⲆΔⲆᐃⵠ: "img/day-wood-shield.png",
    ΔᐃⲆΔᐃⵠΔΔΔ: "img/night-wood-shield.png",
    ⵠⵠⵠᐃᐃⵠⵠᐃΔ: "img/day-stone-shield.png",
    ⲆⵠⵠΔⲆΔⲆⲆⲆ: "img/night-stone-shield.png",
    ΔᐃᐃΔⵠⵠᐃⲆΔ: "img/day-gold-shield.png",
    ⲆΔᐃⲆᐃⲆⲆⵠⲆ: "img/night-gold-shield.png",
    ⵠᐃΔⵠⲆⲆⲆᐃⲆ: "img/day-diamond-shield.png",
    ⲆⲆⲆⵠᐃⲆᐃΔⵠ: "img/night-diamond-shield.png",
    ⵠᐃⲆΔⲆᐃⲆⵠⵠ: "img/day-amethyst-shield.png",
    ΔⵠΔΔⵠⵠⵠⲆΔ: "img/night-amethyst-shield.png",
    ΔⵠⲆᐃⲆᐃΔΔᐃ: "img/day-reidite-shield.png",
    ΔᐃᐃⵠᐃⲆⲆⵠᐃ: "img/night-reidite-shield.png",
    ΔⲆᐃΔⲆᐃⵠⵠⵠ: "img/inv-wood-shield-in.png",
    ΔⲆⵠⲆΔΔΔⵠΔ: "img/inv-wood-shield-out.png",
    ⲆᐃᐃⵠᐃⵠΔΔⵠ: "img/inv-wood-shield-click.png",
    ⵠᐃΔᐃⲆΔⲆⵠⲆ: "img/inv-stone-shield-in.png",
    ᐃᐃᐃⲆΔᐃΔⵠᐃ: "img/inv-stone-shield-out.png",
    ΔᐃⲆⲆᐃⵠⲆⲆⵠ: "img/inv-stone-shield-click.png",
    ᐃΔᐃΔⵠᐃⵠΔⵠ: "img/inv-gold-shield-in.png",
    ΔΔⵠⵠⲆΔⵠⵠⲆ: "img/inv-gold-shield-out.png",
    ΔΔⲆᐃᐃΔⵠΔᐃ: "img/inv-gold-shield-click.png",
    ⲆⵠⵠⵠⵠⵠⵠᐃⲆ: "img/inv-diamond-shield-in.png",
    ⲆⵠΔΔⵠᐃⵠⲆᐃ: "img/inv-diamond-shield-out.png",
    ΔⵠⵠⲆⲆᐃⵠⲆΔ: "img/inv-diamond-shield-click.png",
    ᐃⲆΔᐃⲆⵠⵠᐃᐃ: "img/inv-amethyst-shield-in.png",
    ΔⵠⵠΔᐃⲆⵠᐃΔ: "img/inv-amethyst-shield-out.png",
    ΔᐃⲆΔⲆᐃⵠⲆⲆ: "img/inv-amethyst-shield-click.png",
    ⲆΔⵠⵠΔⲆⵠΔᐃ: "img/inv-reidite-shield-in.png",
    ⲆⵠᐃⲆᐃᐃⲆⲆΔ: "img/inv-reidite-shield-out.png",
    ⲆᐃⲆⵠⵠᐃⵠⵠⵠ: "img/inv-reidite-shield-click.png",
    ΔⲆⵠⵠⵠⲆΔⵠᐃ: "img/day-machete.png",
    ᐃᐃᐃⵠⲆΔΔΔᐃ: "img/night-machete.png",
    ΔⵠⵠⵠΔⵠᐃⲆⵠ: "img/inv-machete-in.png",
    ᐃᐃⲆⲆᐃⵠᐃⲆᐃ: "img/inv-machete-out.png",
    ᐃⲆΔⲆΔᐃᐃⵠᐃ: "img/inv-machete-click.png"
  };
  ᐃᐃⵠⲆᐃⵠⵠ = [{}];
  ᐃᐃⵠⲆᐃⵠⵠ[0].stringify = function (a) {
    var b = new Uint8Array(new ArrayBuffer(a.length));
    for (var c = 0; c < a.length; c++) {
      b[c] = a[c];
    }
    return b;
  };
  ΔⵠⲆΔᐃⲆΔ = {};
  ⲆⵠⵠⲆᐃᐃΔᐃⲆ = {};
  const id = 12;
  for (var jb in Δᐃ) {
    ΔⵠⲆΔᐃⲆΔ[jb] = Δᐃ[jb];
  }
  ⲆⲆ = [];
  const td = 17;
  Δⵠᐃ = {};
  Δⵠᐃ.ΔᐃⲆΔᐃ = 0;
  Δⵠᐃ.ΔⵠⲆⲆ = 1;
  Δⵠᐃ.ᐃⵠᐃᐃ = 2;
  const nd = 15;
  const od = 16;
  Δⵠᐃ.ΔᐃⲆΔ = 3;
  const ad = 3;
  const rd = 4;
  Δⵠᐃ.ΔⵠⵠⲆ = 4;
  Δⵠᐃ.ⵠᐃΔΔ = 5;
  Δⵠᐃ.ΔᐃΔⵠ = 6;
  const sd = 7;
  const hd = 100;
  const ld = 2;
  Δⵠᐃ.ᐃⲆⲆᐃᐃⲆΔ = 7;
  Δⵠᐃ.ᐃⵠᐃⵠᐃ = 8;
  ⲆⲆⲆⵠ = {};
  const gd = 13;
  const ud = 5;
  ⲆⲆⲆⲆ = [];
  ᐃⵠᐃⵠⲆΔΔ = function (a, b) {
    for (var c = 0; a.length > c; c++) {
      if (a[c].id === b) {
        return c;
      }
    }
    return -1;
  };
  const bd = 8;
  var dd = [];
  const Jt = 6;
  function cd(a, b) {
    for (var c = 0; dd.length > c; c += b) {
      var d = dd[c];
      if (d[0] === a) {
        Cd(d[0], d[1], d[2], d[3]);
      }
    }
  }
  const md = 6;
  const pd = 13;
  function Cd(b, c, d, f) {
    var i = ⲆⲆⲆⲆ[b];
    if (i !== undefined) {
      for (var j = 0; j < 2; j++) {
        var k = i[c][j];
        var m = f * 193 / Cx.ⲆᐃⲆⵠᐃ;
        var n = d * 193 / Cx.ⲆⵠΔΔΔ;
        var o = k.width / 3.5;
        var p = k.height / 3.5;
        ⲆⲆ[818][j].drawImage(k, m - o / 2, n - p / 2, o, p);
        m = f * 600 / Cx.ⲆᐃⲆⵠᐃ;
        n = d * 600 / Cx.ⲆⵠΔΔΔ;
        o = k.width / 1.5;
        p = k.height / 1.5;
        ⲆⲆ[819][j].drawImage(k, m - o / 2, n - p / 2, o, p);
      }
    }
  }
  function Td(a, b, c, d) {
    if (b) {
      a.fillStyle = b;
      a.fill();
    }
    if (c) {
      a.lineWidth = d;
      a.strokeStyle = c;
      a.stroke();
    }
  }
  ⲆⲆΔⵠⵠⲆΔⵠᐃ = function () {
    for (var b = 0; b < 2; b++) {
      ⲆⲆ[818][b].clearRect(0, 0, 193, 193);
      ⲆⲆ[818][b].drawImage(ⲆⲆⲆⲆ.MAP[b], 0, 0, 193, 193);
      ⲆⲆ[819][b].clearRect(0, 0, 600, 600);
      ⲆⲆ[819][b].drawImage(ⲆⲆⲆⲆ.MAP[b], 0, 0, 600, 600);
      for (var c = Cx.ΔᐃⵠⲆⵠ.length - 1; c >= 0; c--) {
        var d = Cx.ΔᐃⵠⲆⵠ[c];
        var f = d.x1 * 193 / (Cx.ⲆᐃⲆⵠᐃ * 100);
        var j = d.y1 * 193 / (Cx.ⲆⵠΔΔΔ * 100);
        var k = d.w * 193 / (Cx.ⲆᐃⲆⵠᐃ * 100);
        var m = d.ᐃΔΔ * 193 / (Cx.ⲆⵠΔΔΔ * 100);
        var p = d.x1 * 600 / (Cx.ⲆᐃⲆⵠᐃ * 100);
        var q = d.y1 * 600 / (Cx.ⲆⵠΔΔΔ * 100);
        var u = d.w * 600 / (Cx.ⲆᐃⲆⵠᐃ * 100);
        var v = d.ᐃΔΔ * 600 / (Cx.ⲆⵠΔΔΔ * 100);
        if (Cx.ⵠⵠⲆᐃⲆ === d.ⵠΔΔ) {
          ⲆⲆ[818][b].drawImage(ⲆⲆⲆⲆ.FOREST[b], f, j, k, m);
          ⲆⲆ[819][b].drawImage(ⲆⲆⲆⲆ.FOREST[b], p, q, u, v);
        }
        if (d.ⵠΔΔ === Cx.ⲆⲆⵠᐃⲆⵠΔ) {
          ⲆⲆ[818][b].drawImage(ⲆⲆⲆⲆ.WINTER[b], f, j, k, m);
          ⲆⲆ[819][b].drawImage(ⲆⲆⲆⲆ.WINTER[b], p, q, u, v);
        }
        if (d.ⵠΔΔ === Cx.ⵠᐃⵠΔΔΔΔ) {
          ⲆⲆ[818][b].drawImage(ⲆⲆⲆⲆ.LAVA[b], f, j, k, m);
          ⲆⲆ[819][b].drawImage(ⲆⲆⲆⲆ.LAVA[b], p, q, u, v);
        }
        if (d.ⵠΔΔ === Cx.ᐃᐃⵠᐃΔᐃⲆ) {
          ⲆⲆ[818][b].drawImage(ⲆⲆⲆⲆ.CAVE[b], f, j, k, m);
          ⲆⲆ[819][b].drawImage(ⲆⲆⲆⲆ.CAVE[b], p, q, u, v);
        }
        if (Cx.ΔⲆⵠⵠⲆⲆⲆ === d.ⵠΔΔ) {
          ⲆⲆ[818][b].drawImage(ⲆⲆⲆⲆ.DESERT[b], f, j, k, m);
          ⲆⲆ[819][b].drawImage(ⲆⲆⲆⲆ.DESERT[b], p, q, u, v);
        }
      }
    }
  };
  ΔᐃⲆᐃΔⵠⲆᐃΔ = function () {
    ⲆⲆⲆⵠ = {
      ⵠΔⵠⵠᐃ: [{
        id: 0,
        ⲆⲆⵠ: Δᐃ.ᐃΔⵠᐃⵠΔΔ,
        ⵠⲆⵠ: Δᐃ.ᐃΔΔⲆⲆⲆΔ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⲆᐃΔΔΔⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⵠΔⲆⵠᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Starver"
      }, {
        id: 3,
        ⲆⲆⵠ: Δᐃ.ΔⵠⲆⵠΔⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ΔⲆⵠΔᐃᐃΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆᐃⲆⵠⲆΔⲆ,
        ΔⲆⲆⲆ: Δᐃ.ᐃᐃΔⵠⵠⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Angry"
      }, {
        id: 2,
        ⲆⲆⵠ: Δᐃ.ⲆΔᐃᐃⲆⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆⲆᐃⲆⵠΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆΔⵠᐃΔᐃᐃ,
        ΔⲆⲆⲆ: Δᐃ.ⵠᐃⵠⲆⲆⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Sad"
      }, {
        id: 9,
        ⲆⲆⵠ: Δᐃ.ᐃᐃⵠⲆΔᐃΔ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⵠⲆΔⵠⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⵠⵠⵠᐃⲆⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⲆΔⵠⵠⵠⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Happy 1"
      }, {
        id: 1,
        ⲆⲆⵠ: Δᐃ.ⲆⲆᐃΔⲆᐃⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆⵠⵠⵠΔⵠⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃΔⵠᐃⲆⵠⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⵠΔⲆΔⲆᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "What?"
      }, {
        id: 4,
        ⲆⲆⵠ: Δᐃ.ⲆⵠᐃⲆΔᐃΔ,
        ⵠⲆⵠ: Δᐃ.ΔⲆᐃᐃᐃᐃᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠᐃᐃⵠΔΔⲆ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⵠΔⵠⵠᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Suspicious"
      }, {
        id: 5,
        ⲆⲆⵠ: Δᐃ.ⲆΔⲆⲆⲆⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆΔⲆᐃⵠΔ,
        ᐃⲆⲆᐃ: Δᐃ.ΔΔᐃⲆⵠᐃΔ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⵠᐃᐃᐃᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Scar"
      }, {
        id: 6,
        ⲆⲆⵠ: Δᐃ.ΔⵠᐃⲆⵠⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃᐃⵠⲆᐃΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⲆⵠΔⲆⵠⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⵠΔΔΔⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "In Trouble"
      }, {
        id: 7,
        ⲆⲆⵠ: Δᐃ.ⲆΔΔⵠⵠᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆⲆⲆΔⲆᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠΔᐃⲆⲆⲆΔ,
        ΔⲆⲆⲆ: Δᐃ.ᐃᐃᐃΔΔⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Cute"
      }, {
        id: 8,
        ⲆⲆⵠ: Δᐃ.ΔⲆᐃⵠΔⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ΔⲆᐃᐃⲆⵠᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆᐃⲆⵠΔⲆᐃ,
        ΔⲆⲆⲆ: Δᐃ.ᐃᐃᐃⵠⲆᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bored 1"
      }, {
        id: 10,
        ⲆⲆⵠ: Δᐃ.ᐃⵠⵠΔⵠⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆⲆⵠᐃᐃᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃΔΔᐃΔᐃⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⲆᐃᐃΔᐃⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Happy 2"
      }, {
        id: 11,
        ⲆⲆⵠ: Δᐃ.ᐃⵠᐃⲆⲆⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ΔᐃⵠᐃΔⵠΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠᐃⲆᐃⵠⵠΔ,
        ΔⲆⲆⲆ: Δᐃ.ΔⵠΔⲆⵠⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Crazy"
      }, {
        id: 12,
        ⲆⲆⵠ: Δᐃ.ΔᐃΔᐃΔΔⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃΔᐃᐃⲆᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⲆⵠΔⲆⵠⵠ,
        ΔⲆⲆⲆ: Δᐃ.ΔⵠᐃᐃΔⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Happy 3"
      }, {
        id: 13,
        ⲆⲆⵠ: Δᐃ.ΔΔⵠᐃᐃⲆΔ,
        ⵠⲆⵠ: Δᐃ.ΔⵠᐃⵠΔᐃᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⲆⵠΔⵠΔΔ,
        ΔⲆⲆⲆ: Δᐃ.ΔΔᐃⵠⲆᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Very Cute"
      }, {
        id: 14,
        ⲆⲆⵠ: Δᐃ.ΔΔⲆⲆΔⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆⵠᐃΔⲆΔⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠΔⵠᐃΔΔΔ,
        ΔⲆⲆⲆ: Δᐃ.ΔⲆᐃⲆⵠᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Curious"
      }, {
        id: 15,
        ⲆⲆⵠ: Δᐃ.ⵠⲆⲆⵠᐃⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃΔᐃⲆⲆⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⵠΔⵠⲆΔⵠ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⵠⵠᐃΔⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bored 2"
      }, {
        id: 16,
        ⲆⲆⵠ: Δᐃ.ⲆΔᐃᐃⵠᐃⲆ,
        ⵠⲆⵠ: Δᐃ.ΔᐃⲆᐃⵠⵠⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⵠᐃᐃΔⵠΔ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⵠΔⲆⲆᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Happy 4"
      }, {
        id: 17,
        ⲆⲆⵠ: Δᐃ.ⵠΔΔⵠⲆᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ΔΔΔΔⲆⵠᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠΔΔⵠΔⵠΔ,
        ΔⲆⲆⲆ: Δᐃ.ᐃᐃΔⲆΔᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Scar 2"
      }, {
        id: 18,
        ⲆⲆⵠ: Δᐃ.ΔΔΔⵠᐃⲆΔ,
        ⵠⲆⵠ: Δᐃ.ΔⲆᐃⲆⵠΔⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⵠⵠΔᐃⲆᐃ,
        ΔⲆⲆⲆ: Δᐃ.ⲆⲆⵠⲆΔΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Sick"
      }, {
        id: 19,
        ⲆⲆⵠ: Δᐃ.ⵠⵠΔⲆⲆᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆⵠᐃΔΔΔΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠΔⵠⲆᐃⵠⲆ,
        ΔⲆⲆⲆ: Δᐃ.ΔⲆⵠⵠⵠᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Somnambule"
      }, {
        id: 24,
        ⲆⲆⵠ: Δᐃ.ⵠⵠᐃⲆⵠΔⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠΔᐃⵠⵠΔ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⵠⲆΔⲆᐃΔ,
        ΔⲆⲆⲆ: Δᐃ.ⲆΔⵠⵠᐃⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Pixelbitie",
        name: "Feel Bad"
      }, {
        id: 23,
        ⲆⲆⵠ: Δᐃ.ΔᐃⲆᐃΔᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠΔΔⵠⲆⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ΔᐃⲆⲆᐃᐃᐃ,
        ΔⲆⲆⲆ: Δᐃ.ΔΔΔᐃⵠⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Pixelbitie",
        name: "Mmmh."
      }, {
        id: 103,
        ⲆⲆⵠ: Δᐃ.ⵠⵠΔⲆⵠᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃⲆⵠⲆΔΔ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⲆⵠⲆⲆᐃΔ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⵠΔⵠⲆⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "pizza wa",
        name: "Panic"
      }, {
        id: 105,
        ⲆⲆⵠ: Δᐃ.ᐃⲆⵠⲆⵠᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆΔⲆΔⲆⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠᐃΔΔᐃⲆⲆ,
        ΔⲆⲆⲆ: Δᐃ.ᐃΔΔⲆⲆᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "pizza wa",
        name: "Hypnotic"
      }, {
        id: 106,
        ⲆⲆⵠ: Δᐃ.ⲆⲆΔΔΔᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠⲆᐃⵠᐃⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⵠⲆᐃⲆⵠⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⲆⲆΔⲆᐃᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "pizza wa",
        name: "Stars in the eyes"
      }, {
        id: 220,
        ⲆⲆⵠ: Δᐃ.ΔᐃⲆᐃᐃⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠⵠᐃᐃΔⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃᐃΔⵠᐃⵠⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⵠᐃⵠΔⲆⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Seams"
      }, {
        id: 104,
        ⲆⲆⵠ: Δᐃ.ΔΔΔⵠⵠᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃΔⲆΔⲆᐃⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⲆᐃᐃⲆⵠᐃ,
        ΔⲆⲆⲆ: Δᐃ.ΔᐃᐃᐃⲆᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "pizza wa",
        name: "Scared at night"
      }, {
        id: 20,
        ⲆⲆⵠ: Δᐃ.ΔⵠⵠΔⵠⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃⲆⲆΔⵠΔ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃΔΔⵠᐃΔΔ,
        ΔⲆⲆⲆ: Δᐃ.ⲆⵠΔⲆⵠⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Vampire"
      }, {
        id: 21,
        ⲆⲆⵠ: Δᐃ.ⲆᐃΔᐃᐃᐃⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆᐃΔⲆⲆⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⵠⲆⵠΔΔⲆ,
        ΔⲆⲆⲆ: Δᐃ.ΔⲆᐃΔⵠⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Zombie"
      }, {
        id: 22,
        ⲆⲆⵠ: Δᐃ.ⵠᐃⵠⲆΔⵠΔ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆⲆᐃⲆⵠⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃᐃⲆΔⵠⲆⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⵠᐃⲆΔⲆⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Pixelbitie",
        name: "Devaster"
      }, {
        id: 116,
        ⲆⲆⵠ: Δᐃ.ⵠⵠⵠΔᐃⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃΔΔᐃᐃⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠᐃΔⵠⵠᐃΔ,
        ΔⲆⲆⲆ: Δᐃ.ⲆⲆᐃⲆⲆᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Fukss",
        name: "Dead Devaster"
      }, {
        id: 27,
        ⲆⲆⵠ: Δᐃ.ⲆᐃΔΔⲆΔⲆ,
        ⵠⲆⵠ: Δᐃ.ΔᐃⵠⲆⵠᐃⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃᐃⲆΔⵠⲆᐃ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⵠⲆᐃᐃⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Winter",
        name: "Cactus"
      }, {
        id: 28,
        ⲆⲆⵠ: Δᐃ.ᐃⵠⲆΔⲆⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃΔᐃΔΔⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⵠⵠⵠⲆΔⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⵠᐃⵠⲆⲆⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "pizza wa",
        name: "Bee"
      }, {
        id: 49,
        ⲆⲆⵠ: Δᐃ.ⲆᐃⵠⵠⲆⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ΔΔⵠⲆⵠᐃⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⵠⵠⲆⵠⲆⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⲆⵠⵠΔⲆΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Camo Skin"
      }, {
        id: 58,
        ⲆⲆⵠ: Δᐃ.ⵠⵠⵠᐃⲆⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ΔᐃⵠᐃᐃⵠⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⲆΔᐃⵠᐃⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⲆᐃⵠⲆᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Blue Limax Skin"
      }, {
        id: 59,
        ⲆⲆⵠ: Δᐃ.ᐃⵠᐃⲆⵠΔⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆⵠΔΔΔⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⲆⲆⲆⲆⵠᐃ,
        ΔⲆⲆⲆ: Δᐃ.ᐃΔⵠᐃᐃⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Red Limax Skin"
      }, {
        id: 94,
        ⲆⲆⵠ: Δᐃ.ⵠΔᐃⲆⲆΔⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠΔⵠⵠⵠᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⲆⵠΔⲆⲆᐃ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⵠᐃΔⲆⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Mr. Pumpkin"
      }, {
        id: 109,
        ⲆⲆⵠ: Δᐃ.ᐃⵠⵠⲆᐃⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃⵠΔᐃⵠΔ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃΔΔᐃⵠᐃⵠ,
        ΔⲆⲆⲆ: Δᐃ.ΔᐃΔΔΔⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "pizza wa",
        name: "Wood"
      }, {
        id: 114,
        ⲆⲆⵠ: Δᐃ.ⲆᐃᐃᐃⵠΔΔ,
        ⵠⲆⵠ: Δᐃ.ᐃΔΔⲆᐃⵠᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⲆΔⲆⵠᐃᐃ,
        ΔⲆⲆⲆ: Δᐃ.ΔⲆⵠⲆⵠⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "pizza wa",
        name: "Zebra"
      }, {
        id: 120,
        ⲆⲆⵠ: Δᐃ.ⲆᐃᐃΔΔⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠΔᐃⵠᐃΔ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⲆΔΔⲆᐃᐃ,
        ΔⲆⲆⲆ: Δᐃ.ΔⵠⲆⵠⲆⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "CrysTal",
        name: "Tiger"
      }, {
        id: 134,
        ⲆⲆⵠ: Δᐃ.ⲆΔⲆⲆᐃⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆⵠᐃⲆΔⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ΔΔⵠᐃΔⵠⲆ,
        ΔⲆⲆⲆ: Δᐃ.ΔⵠᐃⲆΔΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Franchestcreator",
        name: "Day or Night"
      }, {
        id: 135,
        ⲆⲆⵠ: Δᐃ.ᐃᐃⵠΔᐃᐃΔ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆΔᐃⲆⵠᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃᐃⲆᐃⵠⵠᐃ,
        ΔⲆⲆⲆ: Δᐃ.ΔⲆⵠⵠΔᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Poinet",
        name: "Square Starver"
      }, {
        id: 136,
        ⲆⲆⵠ: Δᐃ.ⵠΔΔΔⲆΔⲆ,
        ⵠⲆⵠ: Δᐃ.ᐃΔᐃⲆⵠⵠⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⲆΔΔΔᐃⵠ,
        ΔⲆⲆⲆ: Δᐃ.ᐃΔⲆⵠᐃⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Voodoo Doll"
      }, {
        id: 137,
        ⲆⲆⵠ: Δᐃ.ᐃⲆΔⲆΔΔΔ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆⲆΔⵠΔᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⵠⲆΔᐃΔⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⲆⲆⲆΔⲆⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Frankenstein"
      }, {
        id: 138,
        ⲆⲆⵠ: Δᐃ.ΔΔΔⲆᐃΔⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆⲆᐃᐃΔⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆᐃⲆΔΔᐃⲆ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⲆⵠᐃΔⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Old Mummy"
      }, {
        id: 139,
        ⲆⲆⵠ: Δᐃ.ⲆⵠⲆⵠΔᐃⵠ,
        ⵠⲆⵠ: Δᐃ.Δⵠᐃⵠᐃⵠᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃᐃΔᐃⲆⲆⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⲆⲆⵠΔⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Werewolf"
      }, {
        id: 140,
        ⲆⲆⵠ: Δᐃ.ⲆⲆⲆⲆΔⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ᐃΔⲆⵠⲆⲆᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠΔΔΔᐃⵠΔ,
        ΔⲆⲆⲆ: Δᐃ.ⲆΔΔⲆᐃΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Old Cthulhu"
      }, {
        id: 141,
        ⲆⲆⵠ: Δᐃ.ⲆⲆⲆⵠᐃⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⲆⵠⲆᐃᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠᐃᐃⵠΔᐃⵠ,
        ΔⲆⲆⲆ: Δᐃ.ΔⲆᐃⲆᐃⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Sea Man"
      }, {
        id: 142,
        ⲆⲆⵠ: Δᐃ.ΔΔⲆᐃᐃⵠΔ,
        ⵠⲆⵠ: Δᐃ.ᐃΔⲆⵠΔᐃᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⲆⵠⵠΔΔⲆ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⵠⲆΔⵠΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Old Pumpkin"
      }, {
        id: 148,
        ⲆⲆⵠ: Δᐃ.ΔΔΔⵠⲆΔᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠᐃᐃᐃΔⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⵠᐃⲆᐃⲆᐃ,
        ΔⲆⲆⲆ: Δᐃ.ᐃΔᐃΔⲆΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Old Snowman"
      }, {
        id: 149,
        ⲆⲆⵠ: Δᐃ.ᐃΔⲆᐃᐃⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃΔⵠⲆᐃⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆΔⲆΔΔⵠΔ,
        ΔⲆⲆⲆ: Δᐃ.ΔᐃⵠΔΔΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Old Christmas Tree Man"
      }, {
        id: 150,
        ⲆⲆⵠ: Δᐃ.ΔΔⵠⲆⲆⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆΔⵠⲆⲆⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃᐃᐃⵠΔⵠᐃ,
        ΔⲆⲆⲆ: Δᐃ.ᐃᐃᐃΔᐃᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Old Mrs Bell"
      }, {
        id: 151,
        ⲆⲆⵠ: Δᐃ.ΔⲆⲆΔΔᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ΔⲆⲆΔⵠΔⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⲆΔΔⵠⲆⲆ,
        ΔⲆⲆⲆ: Δᐃ.ΔⵠⵠᐃⲆⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Old Elfy"
      }, {
        id: 152,
        ⲆⲆⵠ: Δᐃ.ⵠᐃΔΔᐃΔΔ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆᐃⵠᐃᐃᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠΔΔΔⲆⵠⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⲆᐃⵠΔⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Old Mr Present"
      }, {
        id: 153,
        ⲆⲆⵠ: Δᐃ.ⵠⲆⲆΔⵠΔⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆⵠⲆⵠΔΔᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⵠΔⵠⲆⵠΔ,
        ΔⲆⲆⲆ: Δᐃ.ⲆⵠΔⵠᐃⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "My Dear Old Deer"
      }, {
        id: 154,
        ⲆⲆⵠ: Δᐃ.ⵠᐃᐃⵠⵠΔⲆ,
        ⵠⲆⵠ: Δᐃ.Ⲇᐃⵠᐃᐃᐃⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⲆⲆᐃⲆΔᐃ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⵠΔΔᐃᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr Angel"
      }, {
        id: 155,
        ⲆⲆⵠ: Δᐃ.ⵠⲆΔΔᐃᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆⵠⲆΔⵠⲆΔ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⵠΔⲆΔΔⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⲆⵠⵠⲆᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr Ice Cube"
      }, {
        id: 156,
        ⲆⲆⵠ: Δᐃ.ᐃⲆᐃΔⵠⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃⲆᐃᐃᐃⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠΔΔⵠᐃⲆⲆ,
        ΔⲆⲆⲆ: Δᐃ.ᐃᐃΔⲆᐃΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr Snowman"
      }, {
        id: 159,
        ⲆⲆⵠ: Δᐃ.ᐃⵠⵠΔⲆΔΔ,
        ⵠⲆⵠ: Δᐃ.ⲆΔᐃΔⲆᐃⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃᐃᐃᐃⵠⲆΔ,
        ΔⲆⲆⲆ: Δᐃ.ⲆⲆⵠΔⲆᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "CrysTal",
        name: "Crystal Sky Skin"
      }, {
        id: 167,
        ⲆⲆⵠ: Δᐃ.ΔΔᐃΔᐃⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆΔᐃⵠᐃᐃⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆΔᐃⵠⲆⵠΔ,
        ΔⲆⲆⲆ: Δᐃ.ᐃᐃⵠᐃⲆᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Franchestcreator",
        name: "Radioactive Starver"
      }, {
        id: 169,
        ⲆⲆⵠ: Δᐃ.ⲆᐃⲆᐃⲆΔⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⵠⲆΔⲆΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⲆⵠⲆⲆᐃⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⲆᐃΔΔⵠⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "TheScaryBlaze",
        name: "Eaten Cookie"
      }, {
        id: 170,
        ⲆⲆⵠ: Δᐃ.ⲆΔⲆΔΔᐃΔ,
        ⵠⲆⵠ: Δᐃ.ΔⲆⵠᐃⲆᐃΔ,
        ᐃⲆⲆᐃ: Δᐃ.ΔΔⵠᐃⲆᐃΔ,
        ΔⲆⲆⲆ: Δᐃ.ΔΔⵠⵠⵠᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "aloner",
        name: "Blob Thing"
      }, {
        id: 172,
        ⲆⲆⵠ: Δᐃ.ΔⵠᐃⵠᐃΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⲆⵠⵠⵠΔᐃⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠᐃⲆⲆᐃᐃⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⵠᐃΔΔᐃⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "aloner",
        name: "Machine Mask"
      }, {
        id: 184,
        ⲆⲆⵠ: Δᐃ.ⲆⲆⵠᐃⲆΔΔ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃⵠΔⵠΔᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⲆⵠᐃᐃⵠΔ,
        ΔⲆⲆⲆ: Δᐃ.ⵠΔⲆⵠΔⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mad"
      }, {
        id: 206,
        ⲆⲆⵠ: Δᐃ.ᐃΔⵠᐃᐃⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ΔⵠᐃᐃⵠΔⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⵠⲆⲆᐃΔΔ,
        ΔⲆⲆⲆ: Δᐃ.ⲆΔᐃⲆΔΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Survivor"
      }, {
        id: 209,
        ⲆⲆⵠ: Δᐃ.ᐃⵠΔⵠⵠΔᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃΔⲆᐃⵠᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⵠΔⵠⲆΔⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⵠᐃᐃᐃΔΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Starverator"
      }, {
        id: 230,
        ⲆⲆⵠ: Δᐃ.ΔΔᐃⲆⵠⵠΔ,
        ⵠⲆⵠ: Δᐃ.ΔⵠΔⲆᐃⵠⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⲆΔⲆⵠⵠΔ,
        ΔⲆⲆⲆ: Δᐃ.ΔⲆᐃⵠΔΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Totem"
      }, {
        id: 231,
        ⲆⲆⵠ: Δᐃ.ⲆⲆⵠⲆΔᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆΔΔΔᐃᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⲆⵠᐃΔⲆⲆ,
        ΔⲆⲆⲆ: Δᐃ.ΔᐃⵠΔΔΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Big Pile of Sand"
      }, {
        id: 232,
        ⲆⲆⵠ: Δᐃ.ᐃᐃΔΔᐃΔΔ,
        ⵠⲆⵠ: Δᐃ.ΔΔᐃΔⵠⵠⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⲆᐃΔⲆⲆᐃ,
        ΔⲆⲆⲆ: Δᐃ.ⵠᐃⵠᐃⵠΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Big Pile of Dirt"
      }, {
        id: 235,
        ⲆⲆⵠ: Δᐃ.ⲆΔᐃⲆΔⲆΔ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠᐃΔΔᐃⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⵠᐃᐃⵠⵠΔ,
        ΔⲆⲆⲆ: Δᐃ.ⵠᐃᐃΔᐃⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Sandstone"
      }, {
        id: 29,
        ⲆⲆⵠ: Δᐃ.ΔⵠⲆᐃⵠᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆΔⲆᐃⵠⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃᐃᐃⲆⵠᐃⵠ,
        ΔⲆⲆⲆ: Δᐃ.ΔᐃⲆⵠΔΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Pixelbitie",
        name: "Lollipop 1"
      }, {
        id: 30,
        ⲆⲆⵠ: Δᐃ.ⵠⵠⵠⲆⵠⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ΔΔᐃⵠⲆΔⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⲆΔΔⵠⵠᐃ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⲆᐃⲆΔⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Lollipop 2"
      }, {
        id: 31,
        ⲆⲆⵠ: Δᐃ.ⲆⵠᐃΔⵠΔⵠ,
        ⵠⲆⵠ: Δᐃ.ΔΔᐃᐃⲆⲆⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃΔΔⵠⲆΔᐃ,
        ΔⲆⲆⲆ: Δᐃ.ⵠΔΔᐃⲆⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Lollipop 3"
      }, {
        id: 32,
        ⲆⲆⵠ: Δᐃ.ΔⲆⵠΔⲆⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ⲆⵠⵠᐃΔᐃⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⵠⲆΔⲆⲆΔ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⲆⵠᐃΔΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Lollipop 4"
      }, {
        id: 33,
        ⲆⲆⵠ: Δᐃ.ᐃⲆΔᐃᐃⵠΔ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠᐃΔⵠⵠⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⲆΔⵠⵠⵠⲆ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⵠᐃⲆⵠⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Sushui",
        name: "Yellow Bird"
      }, {
        id: 34,
        ⲆⲆⵠ: Δᐃ.ΔΔᐃⲆⲆⵠΔ,
        ⵠⲆⵠ: Δᐃ.ΔᐃᐃⵠⲆΔⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⲆΔΔΔⵠⵠ,
        ΔⲆⲆⲆ: Δᐃ.ΔⲆⲆⲆΔΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Sushui",
        name: "Red Bird"
      }, {
        id: 35,
        ⲆⲆⵠ: Δᐃ.ⵠⲆⵠΔΔᐃΔ,
        ⵠⲆⵠ: Δᐃ.ⲆΔⵠᐃᐃᐃΔ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃᐃΔⵠⵠᐃΔ,
        ΔⲆⲆⲆ: Δᐃ.ΔⲆᐃΔΔΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Sushui",
        name: "Blue Bird"
      }, {
        id: 37,
        ⲆⲆⵠ: Δᐃ.ⵠΔⲆⲆΔᐃΔ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃⵠΔⲆⲆⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⲆΔⵠⵠᐃⵠ,
        ΔⲆⲆⲆ: Δᐃ.ᐃᐃⵠΔⲆᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Winter",
        name: "Owl"
      }, {
        id: 52,
        ⲆⲆⵠ: Δᐃ.ΔᐃⵠᐃᐃΔᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆᐃᐃᐃⲆΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠᐃⵠⲆⲆΔⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⲆⲆⲆⵠⲆᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Nemo"
      }, {
        id: 53,
        ⲆⲆⵠ: Δᐃ.ΔⲆⲆΔⲆΔⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆⵠΔⵠⲆⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ΔᐃⲆⲆⵠⵠΔ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⲆΔⵠⵠᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. Bread"
      }, {
        id: 74,
        ⲆⲆⵠ: Δᐃ.ᐃΔⲆⵠⵠⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ΔⲆⲆⵠᐃⲆΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠᐃⵠⲆᐃᐃⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⲆⲆΔᐃⲆⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Communist & Taco4Life",
        name: "Mr. Bread 2"
      }, {
        id: 75,
        ⲆⲆⵠ: Δᐃ.ⵠⲆΔΔΔᐃΔ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃⵠⵠⵠⵠⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⲆΔⲆⵠΔΔ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⲆᐃΔᐃΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Communist & Taco4Life",
        name: "Mr. Bread 3"
      }, {
        id: 60,
        ⲆⲆⵠ: Δᐃ.ⲆⵠⲆᐃᐃⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ᐃΔⵠΔⲆⵠⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⵠⵠΔⵠⲆⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⲆΔΔⵠⵠⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Red Berry"
      }, {
        id: 61,
        ⲆⲆⵠ: Δᐃ.ⵠᐃⲆⵠⲆⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆⲆΔᐃⲆⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⲆΔⵠΔᐃⲆ,
        ΔⲆⲆⲆ: Δᐃ.ᐃΔⲆⲆⲆᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Old Berry"
      }, {
        id: 70,
        ⲆⲆⵠ: Δᐃ.ΔⲆΔᐃΔⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃΔⵠⵠΔⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆΔΔⲆⵠⲆⲆ,
        ΔⲆⲆⲆ: Δᐃ.ΔⲆΔᐃⲆⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Cake"
      }, {
        id: 71,
        ⲆⲆⵠ: Δᐃ.ᐃᐃᐃⲆⲆᐃΔ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃⲆΔⵠᐃᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⲆⲆⵠⵠᐃᐃ,
        ΔⲆⲆⲆ: Δᐃ.ⲆⲆⲆᐃⵠⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Christmas Cake"
      }, {
        id: 77,
        ⲆⲆⵠ: Δᐃ.ᐃᐃⲆΔᐃΔⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆΔⵠⵠΔΔΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⲆΔⲆⵠᐃΔ,
        ΔⲆⲆⲆ: Δᐃ.ⲆᐃΔΔᐃᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Pancakez",
        name: "Mr. Pancake"
      }, {
        id: 87,
        ⲆⲆⵠ: Δᐃ.ᐃᐃⲆΔᐃᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠΔΔΔΔⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠᐃᐃᐃΔⲆᐃ,
        ΔⲆⲆⲆ: Δᐃ.ⵠΔΔΔⲆⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Mr. Taco"
      }, {
        id: 78,
        ⲆⲆⵠ: Δᐃ.ⵠΔΔⵠⲆᐃΔ,
        ⵠⲆⵠ: Δᐃ.ⲆⵠΔΔᐃΔⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃΔΔⲆⲆⵠⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⲆΔᐃΔⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Mr. Bottle"
      }, {
        id: 79,
        ⲆⲆⵠ: Δᐃ.ⵠⵠⲆⵠⵠⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠⵠⲆΔᐃΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⲆⲆⲆΔⵠΔ,
        ΔⲆⲆⲆ: Δᐃ.ⲆΔⲆΔᐃⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Mr. Bottle 2"
      }, {
        id: 97,
        ⲆⲆⵠ: Δᐃ.ⵠⵠᐃᐃᐃᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ⲆⵠⵠⵠⵠⲆⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⲆΔⵠᐃⲆⵠ,
        ΔⲆⲆⲆ: Δᐃ.ᐃΔΔⲆⵠⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Pink Rabbit"
      }, {
        id: 102,
        ⲆⲆⵠ: Δᐃ.ᐃⵠⲆΔⵠⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃⲆⵠᐃᐃⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃᐃⵠΔᐃⲆΔ,
        ΔⲆⲆⲆ: Δᐃ.ⲆⵠⵠⵠᐃⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Marshmallow"
      }, {
        id: 107,
        ⲆⲆⵠ: Δᐃ.ⵠⲆⵠⵠΔᐃⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠⲆⲆⵠⲆⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ΔᐃᐃⵠᐃΔΔ,
        ΔⲆⲆⲆ: Δᐃ.ᐃΔⵠⵠᐃⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Fox"
      }, {
        id: 132,
        ⲆⲆⵠ: Δᐃ.ΔΔΔΔᐃΔΔ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆᐃⵠᐃⵠⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠᐃⲆⵠⵠᐃⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⲆᐃⵠΔⵠΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Raccoon"
      }, {
        id: 111,
        ⲆⲆⵠ: Δᐃ.ᐃⲆⵠᐃⵠᐃΔ,
        ⵠⲆⵠ: Δᐃ.ΔⵠⲆᐃⲆⲆΔ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⵠⵠⲆᐃⵠΔ,
        ΔⲆⲆⲆ: Δᐃ.ⵠΔΔᐃᐃⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Cloud"
      }, {
        id: 113,
        ⲆⲆⵠ: Δᐃ.ᐃⵠᐃᐃΔΔⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃⵠΔᐃⵠΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⲆⲆⲆⲆⲆⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⲆΔᐃⲆⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Moon"
      }, {
        id: 117,
        ⲆⲆⵠ: Δᐃ.ⵠⵠΔΔⲆⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ΔΔᐃΔⵠΔⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⵠⵠᐃΔⵠΔ,
        ΔⲆⲆⲆ: Δᐃ.ΔᐃⵠΔⲆⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Mr. Panda"
      }, {
        id: 118,
        ⲆⲆⵠ: Δᐃ.ⵠᐃⲆⵠⵠⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆⲆⵠΔⵠⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ΔΔⵠΔⲆΔᐃ,
        ΔⲆⲆⲆ: Δᐃ.ⲆⵠᐃⵠΔⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Mr. Strawberry"
      }, {
        id: 119,
        ⲆⲆⵠ: Δᐃ.ⵠᐃⵠΔᐃᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆΔⵠⵠⵠⵠⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⵠΔᐃⲆⵠⲆ,
        ΔⲆⲆⲆ: Δᐃ.ᐃΔᐃⵠⵠⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "eogito & Sushuui",
        name: "Mummy"
      }, {
        id: 122,
        ⲆⲆⵠ: Δᐃ.ΔΔⲆΔⲆⵠΔ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃⵠΔΔᐃΔ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⵠⲆᐃⲆᐃⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⵠΔⵠⲆⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Dino"
      }, {
        id: 127,
        ⲆⲆⵠ: Δᐃ.ⵠⲆⲆΔΔᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃΔⲆⵠΔᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃΔⵠᐃᐃΔⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⲆΔⵠᐃⵠᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "MADBalgouthi",
        name: "Mr. Koala"
      }, {
        id: 160,
        ⲆⲆⵠ: Δᐃ.ᐃᐃΔⵠΔᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠΔᐃΔᐃᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃΔⵠᐃⵠⲆⵠ,
        ΔⲆⲆⲆ: Δᐃ.ΔⲆᐃⲆᐃⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bottle Protection"
      }, {
        id: 162,
        ⲆⲆⵠ: Δᐃ.ⵠⲆᐃⲆᐃΔΔ,
        ⵠⲆⵠ: Δᐃ.ΔⵠᐃᐃⵠΔΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⲆⵠᐃᐃΔΔ,
        ΔⲆⲆⲆ: Δᐃ.ᐃΔⲆⲆᐃⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "CrysTal",
        name: "Leaf Man"
      }, {
        id: 166,
        ⲆⲆⵠ: Δᐃ.ᐃⲆⵠⲆⲆⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃⵠΔⵠᐃΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠΔⵠΔⵠⵠⲆ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⵠᐃᐃᐃⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Bubble"
      }, {
        id: 174,
        ⲆⲆⵠ: Δᐃ.ΔⲆᐃᐃΔⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆᐃᐃᐃᐃΔ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃᐃᐃΔΔⲆΔ,
        ΔⲆⲆⲆ: Δᐃ.ⵠΔΔⵠⲆᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "upfiz",
        name: "Potato"
      }, {
        id: 171,
        ⲆⲆⵠ: Δᐃ.ΔᐃⵠⵠΔⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠᐃⲆⲆᐃᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⵠⲆⲆⲆⵠⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⲆᐃΔᐃᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "aloner",
        name: "Axolotl"
      }, {
        id: 178,
        ⲆⲆⵠ: Δᐃ.ⲆΔΔⲆᐃᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ΔΔⲆⲆⵠΔΔ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃᐃⲆⲆΔⲆⵠ,
        ΔⲆⲆⲆ: Δᐃ.ΔⵠΔⵠⲆⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Rusted Machine"
      }, {
        id: 179,
        ⲆⲆⵠ: Δᐃ.ΔΔΔᐃⵠⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ΔⵠⵠⵠΔΔᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⲆⵠᐃᐃΔⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⵠᐃΔⲆⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Starving Machine"
      }, {
        id: 181,
        ⲆⲆⵠ: Δᐃ.ΔⵠᐃΔΔΔⲆ,
        ⵠⲆⵠ: Δᐃ.ᐃΔᐃᐃⵠᐃⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⲆⵠΔΔⵠΔ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⵠΔⲆΔΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Night Stars"
      }, {
        id: 191,
        ⲆⲆⵠ: Δᐃ.ⵠᐃⵠΔΔⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆⵠΔⲆΔⲆⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⲆⵠᐃᐃⵠⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⲆΔⲆⵠⲆΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Blue Jay"
      }, {
        id: 198,
        ⲆⲆⵠ: Δᐃ.ΔᐃΔΔΔⲆΔ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆⲆΔⵠΔΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⲆᐃᐃᐃⲆᐃ,
        ΔⲆⲆⲆ: Δᐃ.ⲆⲆᐃⲆΔᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "AWTP",
        name: "Dave"
      }, {
        id: 200,
        ⲆⲆⵠ: Δᐃ.ᐃᐃⲆⵠΔⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆⲆΔΔᐃⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ΔΔᐃⲆᐃΔⵠ,
        ΔⲆⲆⲆ: Δᐃ.ᐃᐃΔΔⲆΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Jinty",
        name: "Smug"
      }, {
        id: 203,
        ⲆⲆⵠ: Δᐃ.ⲆⵠⵠΔᐃⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆᐃⲆⲆⵠΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠᐃⵠⵠⲆⵠⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⲆⲆⲆⵠⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Reclaimed"
      }, {
        id: 204,
        ⲆⲆⵠ: Δᐃ.ⲆΔᐃΔΔⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ΔⵠΔΔᐃⵠᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⵠⲆΔᐃΔⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⲆⲆⲆⵠⵠⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Legacy Wolf"
      }, {
        id: 211,
        ⲆⲆⵠ: Δᐃ.ᐃᐃⲆᐃΔΔⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠΔΔΔᐃⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⲆᐃΔᐃᐃᐃ,
        ΔⲆⲆⲆ: Δᐃ.ΔⲆᐃⵠΔⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Starver of the Seas"
      }, {
        id: 213,
        ⲆⲆⵠ: Δᐃ.ⲆΔⵠΔⵠⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ⲆΔᐃΔⲆᐃΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⲆΔᐃᐃᐃΔ,
        ΔⲆⲆⲆ: Δᐃ.ⲆΔᐃΔΔΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Ice"
      }, {
        id: 219,
        ⲆⲆⵠ: Δᐃ.ⲆΔⵠⲆᐃΔⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠⵠΔΔⵠⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠᐃΔⲆⲆⲆΔ,
        ΔⲆⲆⲆ: Δᐃ.ⵠᐃⲆᐃⲆᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Ramil",
        name: "Sandwich Cookie"
      }, {
        id: 221,
        ⲆⲆⵠ: Δᐃ.ⲆΔⲆᐃᐃⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ΔᐃᐃΔⲆΔⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⲆⵠⲆⵠⲆⵠ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⲆⲆⵠᐃᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Purple Geode"
      }, {
        id: 222,
        ⲆⲆⵠ: Δᐃ.ⵠⵠⵠⵠⲆⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ΔᐃⵠⲆᐃⲆⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠΔᐃⵠΔΔⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⲆⲆⲆΔΔᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Cyan Geode"
      }, {
        id: 223,
        ⲆⲆⵠ: Δᐃ.ⵠᐃⲆΔᐃΔⲆ,
        ⵠⲆⵠ: Δᐃ.ΔⵠᐃⵠⲆᐃΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⲆⵠᐃⲆΔⲆ,
        ΔⲆⲆⲆ: Δᐃ.ΔⵠᐃⵠᐃΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Yellow Geode"
      }, {
        id: 228,
        ⲆⲆⵠ: Δᐃ.ᐃΔⵠⲆⵠⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⵠᐃΔΔⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⵠΔΔΔⲆⲆ,
        ΔⲆⲆⲆ: Δᐃ.ᐃΔᐃⵠᐃⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Furnace Head"
      }, {
        id: 229,
        ⲆⲆⵠ: Δᐃ.ⲆᐃᐃⵠΔΔⲆ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠᐃᐃᐃΔΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆΔⲆⲆᐃΔⲆ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⵠᐃⵠᐃᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bag"
      }, {
        id: 227,
        ⲆⲆⵠ: Δᐃ.ᐃᐃⵠⲆᐃΔⲆ,
        ⵠⲆⵠ: Δᐃ.ΔⵠΔⵠᐃⲆⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠᐃⲆⵠᐃⵠⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⵠⵠⵠⲆΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Lit Furnace Head"
      }, {
        id: 25,
        ⲆⲆⵠ: Δᐃ.ᐃⲆᐃⵠΔᐃⲆ,
        ⵠⲆⵠ: Δᐃ.ΔⵠⵠⲆⵠⲆᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⲆᐃⵠᐃⲆΔ,
        ΔⲆⲆⲆ: Δᐃ.ΔΔΔᐃⵠⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Pixelbitie",
        name: "Test Dummy"
      }, {
        id: 41,
        ⲆⲆⵠ: Δᐃ.ΔⵠᐃΔⵠᐃⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⵠΔⲆⲆΔ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⲆⲆⲆᐃⲆᐃ,
        ΔⲆⲆⲆ: Δᐃ.ᐃᐃⵠΔΔⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "pizza wa",
        name: "Star-ver"
      }, {
        id: 43,
        ⲆⲆⵠ: Δᐃ.ΔⲆᐃⲆΔΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆⵠΔΔΔⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃΔᐃⲆⵠⵠⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⲆⲆⲆⲆⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Communist",
        name: "Starver Chest"
      }, {
        id: 88,
        ⲆⲆⵠ: Δᐃ.ΔᐃⲆᐃΔΔⲆ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆΔⲆⵠⵠⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃᐃΔᐃᐃⵠᐃ,
        ΔⲆⲆⲆ: Δᐃ.ⲆⲆⵠⲆΔΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Communist",
        name: "Starver Workbench"
      }, {
        id: 121,
        ⲆⲆⵠ: Δᐃ.ᐃⵠⲆΔⵠⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ΔᐃⲆΔᐃΔᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠᐃⲆⲆⲆⵠⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⲆⲆⵠⵠⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "MADBalgouthi",
        name: "Fish"
      }, {
        id: 39,
        ⲆⲆⵠ: Δᐃ.ⵠⲆⵠⲆⲆⲆΔ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃΔΔΔΔΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⵠᐃⵠΔⵠⲆ,
        ΔⲆⲆⲆ: Δᐃ.ᐃᐃⲆᐃᐃⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Negligent4Dia",
        name: "Crab"
      }, {
        id: 40,
        ⲆⲆⵠ: Δᐃ.ⲆⵠⲆⲆⲆⲆΔ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠᐃΔΔⲆⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⲆⲆᐃᐃᐃΔ,
        ΔⲆⲆⲆ: Δᐃ.ΔⵠᐃⲆΔΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Negligent4Dia",
        name: "Piranha"
      }, {
        id: 36,
        ⲆⲆⵠ: Δᐃ.ᐃΔⲆⲆᐃⲆΔ,
        ⵠⲆⵠ: Δᐃ.ⲆΔⲆⲆⵠⲆᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆᐃΔᐃΔⵠⵠ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⲆᐃⲆⲆⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Winter Fox"
      }, {
        id: 69,
        ⲆⲆⵠ: Δᐃ.ⲆᐃΔⲆᐃⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ΔⵠⲆᐃᐃᐃᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⲆⲆΔⲆⲆⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⵠᐃΔⲆⲆΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Zed",
        name: "Baby Foxy"
      }, {
        id: 51,
        ⲆⲆⵠ: Δᐃ.ᐃⲆⵠⲆⵠΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆⵠΔⵠⲆΔ,
        ᐃⲆⲆᐃ: Δᐃ.ΔΔⲆⲆᐃⵠⵠ,
        ΔⲆⲆⲆ: Δᐃ.ΔⵠΔᐃⵠⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "HOWI",
        name: "Winter Bear"
      }, {
        id: 133,
        ⲆⲆⵠ: Δᐃ.ΔΔᐃⲆⲆⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃΔⲆⵠⵠⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃΔⲆΔᐃΔⲆ,
        ΔⲆⲆⲆ: Δᐃ.Δⵠⵠⵠⵠⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Hawk"
      }, {
        id: 55,
        ⲆⲆⵠ: Δᐃ.ΔⲆᐃᐃⲆⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ΔⵠᐃΔΔⵠᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⵠⲆⲆⲆᐃⵠ,
        ΔⲆⲆⲆ: Δᐃ.ΔⲆΔᐃⲆᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Nice Little Yuki"
      }, {
        id: 68,
        ⲆⲆⵠ: Δᐃ.ΔᐃⲆⲆⵠⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ΔΔⲆΔⲆⲆⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆΔᐃᐃΔᐃᐃ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⵠᐃⵠⵠᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Baby Yuki"
      }, {
        id: 62,
        ⲆⲆⵠ: Δᐃ.ᐃᐃⵠⵠΔⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ΔΔⲆΔΔⲆΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆᐃᐃⵠΔⲆᐃ,
        ΔⲆⲆⲆ: Δᐃ.ΔᐃⵠΔᐃΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. Carrot"
      }, {
        id: 56,
        ⲆⲆⵠ: Δᐃ.ⵠⲆΔΔᐃⲆΔ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃᐃⲆⲆΔⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ΔΔΔᐃⲆΔⵠ,
        ΔⲆⲆⲆ: Δᐃ.ᐃᐃⲆⵠᐃᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bat Limax"
      }, {
        id: 72,
        ⲆⲆⵠ: Δᐃ.ⵠᐃΔⵠᐃⵠΔ,
        ⵠⲆⵠ: Δᐃ.ⵠΔΔᐃᐃⵠΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆᐃΔⲆΔⲆΔ,
        ΔⲆⲆⲆ: Δᐃ.ΔⲆⵠⵠⲆⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Mr. Crate"
      }, {
        id: 73,
        ⲆⲆⵠ: Δᐃ.ΔⵠΔΔΔⵠΔ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃⲆⵠΔⵠⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃΔⵠΔⲆⵠⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⲆᐃⵠⵠΔΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Taco4Life & eogito",
        name: "Mr. Spider"
      }, {
        id: 93,
        ⲆⲆⵠ: Δᐃ.ᐃΔᐃⲆᐃᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ΔᐃᐃⲆᐃΔΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆᐃᐃⵠⵠΔⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⲆⲆᐃΔΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Anyone want to play?",
        name: "Mr. Spider 2"
      }, {
        id: 82,
        ⲆⲆⵠ: Δᐃ.ΔⲆⲆⲆᐃΔⲆ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆⵠⵠⵠΔΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⲆᐃⵠⲆΔᐃ,
        ΔⲆⲆⲆ: Δᐃ.ⲆⲆᐃⲆΔΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. Blue Starfish"
      }, {
        id: 83,
        ⲆⲆⵠ: Δᐃ.ᐃᐃⲆⲆᐃΔⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆⵠΔΔᐃⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ΔΔΔΔⲆⵠΔ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⲆⲆΔⵠⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. Orange Starfish"
      }, {
        id: 84,
        ⲆⲆⵠ: Δᐃ.ⵠⵠⲆᐃΔᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠΔⵠΔⲆⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠᐃⵠⲆᐃΔΔ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⵠΔⲆⵠⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. Pink Starfish"
      }, {
        id: 85,
        ⲆⲆⵠ: Δᐃ.ⲆⵠΔⲆⲆⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ΔΔⵠⲆᐃⲆⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⵠΔΔⲆΔⵠ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⲆΔᐃᐃⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. ShellMauve"
      }, {
        id: 86,
        ⲆⲆⵠ: Δᐃ.ⲆᐃⲆⲆⲆⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃᐃⵠⵠᐃΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆᐃᐃⵠⵠᐃΔ,
        ΔⲆⲆⲆ: Δᐃ.ΔΔⵠⵠΔᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. Shell Bead"
      }, {
        id: 96,
        ⲆⲆⵠ: Δᐃ.ⲆΔⲆⵠᐃⲆΔ,
        ⵠⲆⵠ: Δᐃ.ᐃΔᐃΔᐃⵠΔ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⵠΔⲆΔΔⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⲆᐃⲆⲆᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Fukss",
        name: "Angry Crab"
      }, {
        id: 98,
        ⲆⲆⵠ: Δᐃ.ⵠⲆᐃⲆⵠⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠΔᐃΔⵠᐃⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃΔᐃⵠΔⵠᐃ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⵠΔΔᐃⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Penguin"
      }, {
        id: 126,
        ⲆⲆⵠ: Δᐃ.ⲆⵠⵠⵠᐃΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆᐃⵠⲆⵠᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ΔᐃᐃᐃⲆΔΔ,
        ΔⲆⲆⲆ: Δᐃ.ⵠΔⲆᐃⲆⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Anyone want to play?",
        name: "Mr. Boar"
      }, {
        id: 145,
        ⲆⲆⵠ: Δᐃ.ⵠⲆΔΔⵠⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃΔᐃⵠΔΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆΔΔᐃΔᐃᐃ,
        ΔⲆⲆⲆ: Δᐃ.ⲆΔᐃⲆᐃΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "I saw you"
      }, {
        id: 146,
        ⲆⲆⵠ: Δᐃ.ᐃⲆΔΔΔΔⵠ,
        ⵠⲆⵠ: Δᐃ.ΔᐃⵠΔΔⵠⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⲆᐃΔⵠⲆⵠ,
        ΔⲆⲆⲆ: Δᐃ.ΔΔΔⵠΔΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "It was funny"
      }, {
        id: 147,
        ⲆⲆⵠ: Δᐃ.ⵠⵠⵠⲆΔⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ΔⵠᐃⵠᐃⲆᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⲆᐃΔᐃⵠᐃ,
        ΔⲆⲆⲆ: Δᐃ.ΔⵠⵠᐃⲆⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "You can scream"
      }, {
        id: 158,
        ⲆⲆⵠ: Δᐃ.ⲆᐃᐃⵠⲆΔⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃΔⲆΔⲆⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⵠΔᐃᐃⲆⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⲆᐃᐃⵠᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Mr. Book"
      }, {
        id: 163,
        ⲆⲆⵠ: Δᐃ.ⲆⲆⲆⲆⲆⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⵠⲆⵠⲆⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⵠᐃΔⲆⲆᐃ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⲆᐃⲆΔⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Anyone want to play?",
        name: "Mr. Mammoth"
      }, {
        id: 164,
        ⲆⲆⵠ: Δᐃ.ⲆᐃᐃΔᐃⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⵠᐃⵠⲆᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃΔⲆⲆᐃⲆⲆ,
        ΔⲆⲆⲆ: Δᐃ.ᐃΔⵠⵠΔⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "SoOw",
        name: "Mr. Mammoth 2"
      }, {
        id: 161,
        ⲆⲆⵠ: Δᐃ.ⵠⲆΔΔⵠⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆΔᐃΔᐃⲆΔ,
        ᐃⲆⲆᐃ: Δᐃ.ΔᐃⲆᐃⲆᐃΔ,
        ΔⲆⲆⲆ: Δᐃ.ⲆⲆᐃᐃⵠΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Nightmare"
      }, {
        id: 168,
        ⲆⲆⵠ: Δᐃ.ⲆΔⲆΔᐃⵠΔ,
        ⵠⲆⵠ: Δᐃ.ΔⵠᐃᐃᐃⲆⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠᐃᐃᐃⲆⲆⵠ,
        ΔⲆⲆⲆ: Δᐃ.ΔⵠᐃⲆⲆΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "pizza wa",
        name: "Shiny Crystal"
      }, {
        id: 173,
        ⲆⲆⵠ: Δᐃ.ⵠⵠⲆⲆΔⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃΔΔᐃⲆⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ΔΔⵠᐃΔΔⵠ,
        ΔⲆⲆⲆ: Δᐃ.Ⲇⵠⵠⵠⵠᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "pizza wa",
        name: "Water skin"
      }, {
        id: 175,
        ⲆⲆⵠ: Δᐃ.ⵠΔᐃᐃⵠⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠᐃⵠΔⲆⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ΔΔⵠᐃΔⲆⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⵠᐃⵠΔΔⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Fall Berry Bush Starver"
      }, {
        id: 176,
        ⲆⲆⵠ: Δᐃ.ⲆΔⵠΔⲆⲆΔ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆⵠΔᐃΔΔ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃΔⲆᐃⵠⵠΔ,
        ΔⲆⲆⲆ: Δᐃ.ⵠᐃⲆᐃᐃⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Christmas Berry Bush Starver"
      }, {
        id: 177,
        ⲆⲆⵠ: Δᐃ.ᐃⲆΔⲆΔⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ΔⲆᐃᐃᐃᐃⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⲆⲆᐃᐃⲆⲆ,
        ΔⲆⲆⲆ: Δᐃ.ᐃᐃⵠΔⲆⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Berry Bush Starver"
      }, {
        id: 182,
        ⲆⲆⵠ: Δᐃ.ᐃΔⲆⵠⲆⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃΔᐃⵠⵠⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆΔⲆΔⵠⲆΔ,
        ΔⲆⲆⲆ: Δᐃ.ⵠΔⲆᐃⲆΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamer"
      }, {
        id: 185,
        ⲆⲆⵠ: Δᐃ.ⵠⵠⲆⵠΔΔΔ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆΔⲆᐃⲆⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⲆΔᐃⲆᐃⵠ,
        ΔⲆⲆⲆ: Δᐃ.ᐃΔΔⲆᐃⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Wolf"
      }, {
        id: 186,
        ⲆⲆⵠ: Δᐃ.ⵠΔⵠⵠⵠⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ΔⵠⲆΔⲆΔⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⲆⵠⲆᐃΔΔ,
        ΔⲆⲆⲆ: Δᐃ.ⲆⲆΔⵠⵠᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Snow Wolf"
      }, {
        id: 187,
        ⲆⲆⵠ: Δᐃ.ⵠⵠᐃΔΔⵠΔ,
        ⵠⲆⵠ: Δᐃ.ΔᐃᐃᐃΔⵠⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⲆᐃⵠᐃⵠⲆ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⲆⵠⵠΔⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Rabbit"
      }, {
        id: 188,
        ⲆⲆⵠ: Δᐃ.ΔΔⲆΔⵠᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ⲆⵠᐃⲆᐃΔⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⲆΔᐃⲆⵠⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⵠⵠⲆΔᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Snow Rabbit"
      }, {
        id: 189,
        ⲆⲆⵠ: Δᐃ.ᐃⵠⵠᐃⵠⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃΔⵠⵠᐃⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ΔᐃᐃⵠⲆⵠΔ,
        ΔⲆⲆⲆ: Δᐃ.ⲆⲆⵠⲆⲆΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Bear"
      }, {
        id: 190,
        ⲆⲆⵠ: Δᐃ.ΔⵠΔᐃⵠⵠΔ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠᐃⵠᐃⲆⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ΔΔΔⲆΔΔⲆ,
        ΔⲆⲆⲆ: Δᐃ.ᐃΔᐃⲆΔΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Polar Bear"
      }, {
        id: 196,
        ⲆⲆⵠ: Δᐃ.ⵠΔⵠⲆⵠⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠΔᐃⵠΔⵠⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⵠᐃⲆⲆⲆᐃ,
        ΔⲆⲆⲆ: Δᐃ.ΔᐃᐃᐃⵠΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Crying Angel"
      }, {
        id: 202,
        ⲆⲆⵠ: Δᐃ.ΔᐃⵠᐃⲆⲆΔ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠⲆΔᐃⵠⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⲆΔᐃⵠⲆⵠ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⲆᐃⲆᐃΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Fennec"
      }, {
        id: 207,
        ⲆⲆⵠ: Δᐃ.ⵠⲆᐃⲆⵠΔⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃⵠΔΔⵠⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⵠΔⲆᐃⵠⲆ,
        ΔⲆⲆⲆ: Δᐃ.ᐃᐃⲆΔᐃᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Decay"
      }, {
        id: 212,
        ⲆⲆⵠ: Δᐃ.ⵠⲆΔⵠᐃᐃΔ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆᐃⲆΔⲆᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⲆᐃΔΔᐃΔ,
        ΔⲆⲆⲆ: Δᐃ.ⵠΔᐃⲆΔΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Pillow"
      }, {
        id: 218,
        ⲆⲆⵠ: Δᐃ.ᐃⵠⵠⲆⲆⵠΔ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆΔΔⲆΔⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⲆⲆΔΔΔⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⵠΔⵠⵠᐃⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Exotic"
      }, {
        id: 224,
        ⲆⲆⵠ: Δᐃ.ᐃΔⵠᐃⵠⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃΔⲆΔᐃⵠΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⲆⲆΔⵠⲆΔ,
        ΔⲆⲆⲆ: Δᐃ.ΔᐃⲆΔᐃᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Apple"
      }, {
        id: 225,
        ⲆⲆⵠ: Δᐃ.ⲆΔᐃⵠⲆⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆΔⲆⲆⵠΔⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃᐃⵠᐃⲆΔΔ,
        ΔⲆⲆⲆ: Δᐃ.ⲆⵠΔⲆΔᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Golden Apple"
      }, {
        id: 233,
        ⲆⲆⵠ: Δᐃ.ⵠⲆΔΔⲆⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠⲆⵠⲆΔΔ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃΔⲆⲆⲆΔⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⲆᐃΔΔᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Lava Cube"
      }, {
        id: 234,
        ⲆⲆⵠ: Δᐃ.Δⵠⵠⵠⵠᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃⲆΔΔⲆᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ΔΔΔΔΔᐃΔ,
        ΔⲆⲆⲆ: Δᐃ.ᐃΔⵠΔΔⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Dragon Cube"
      }, {
        id: 42,
        ⲆⲆⵠ: Δᐃ.ΔΔⵠⲆⲆᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠΔⵠᐃΔⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃΔⵠⵠΔΔⲆ,
        ΔⲆⲆⲆ: Δᐃ.ᐃΔⵠΔⲆⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Winter",
        name: "Will-O'-The-Wisp"
      }, {
        id: 91,
        ⲆⲆⵠ: Δᐃ.ⲆᐃⵠⲆΔΔΔ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃⲆⵠⵠᐃⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⲆᐃⵠᐃⲆᐃ,
        ΔⲆⲆⲆ: Δᐃ.ΔΔᐃⲆᐃΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "ExpertyAnimations",
        name: "Flame"
      }, {
        id: 26,
        ⲆⲆⵠ: Δᐃ.ΔΔⵠⲆΔᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠⵠⵠΔⲆΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⲆⲆⲆΔⲆΔ,
        ΔⲆⲆⲆ: Δᐃ.ⵠΔⲆⵠⲆⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Be a Tree"
      }, {
        id: 38,
        ⲆⲆⵠ: Δᐃ.ⵠⲆΔᐃᐃΔⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠⲆᐃⵠⵠΔ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⲆⵠΔΔΔᐃ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⲆⵠᐃⲆᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Winter",
        name: "Toxic Mutant"
      }, {
        id: 50,
        ⲆⲆⵠ: Δᐃ.ⵠⵠᐃⲆⲆⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃⵠⲆⵠⲆΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⵠΔⵠⵠⵠⵠ,
        ΔⲆⲆⲆ: Δᐃ.ΔΔⲆΔᐃΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Communist",
        name: "Mr. Tomato"
      }, {
        id: 54,
        ⲆⲆⵠ: Δᐃ.ΔⵠⵠΔⲆΔΔ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃΔⲆΔⲆⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⵠΔⵠΔᐃⵠ,
        ΔⲆⲆⲆ: Δᐃ.ΔⵠᐃᐃᐃᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. Mauve, the Lapa"
      }, {
        id: 57,
        ⲆⲆⵠ: Δᐃ.ΔΔΔⵠⲆⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠᐃⵠᐃⲆⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⵠᐃΔⲆⵠⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⲆᐃⵠΔⲆᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Golden Fish"
      }, {
        id: 64,
        ⲆⲆⵠ: Δᐃ.ⲆⵠⲆⵠⲆΔⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠΔΔⵠᐃΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⵠⵠⲆΔⵠⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⲆⵠᐃΔⵠᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "LapaMauve"
      }, {
        id: 65,
        ⲆⲆⵠ: Δᐃ.ⵠᐃⲆΔΔᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ΔΔⵠⵠΔΔⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃΔᐃⲆⵠⵠᐃ,
        ΔⲆⲆⲆ: Δᐃ.ΔⵠⵠᐃⵠⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "LapaMauve "
      }, {
        id: 92,
        ⲆⲆⵠ: Δᐃ.ⲆⵠΔⲆΔⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆΔⲆΔΔΔ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃΔⵠΔᐃⵠⵠ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⵠᐃΔⲆᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. Burger"
      }, {
        id: 66,
        ⲆⲆⵠ: Δᐃ.ⵠⲆⲆⵠΔⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠᐃⵠⵠΔΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠᐃᐃⲆᐃΔΔ,
        ΔⲆⲆⲆ: Δᐃ.ⲆΔⲆⲆᐃⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Tropical Starver"
      }, {
        id: 80,
        ⲆⲆⵠ: Δᐃ.ᐃⵠᐃᐃΔΔᐃ,
        ⵠⲆⵠ: Δᐃ.ΔΔΔΔⲆᐃⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⲆΔΔⵠⲆⲆ,
        ΔⲆⲆⲆ: Δᐃ.ΔⵠⵠⲆⵠᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. ShellPink"
      }, {
        id: 81,
        ⲆⲆⵠ: Δᐃ.ᐃⵠⲆⵠΔΔᐃ,
        ⵠⲆⵠ: Δᐃ.Δⵠᐃⵠⵠᐃⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⲆᐃᐃΔᐃΔ,
        ΔⲆⲆⲆ: Δᐃ.ⵠᐃΔᐃⲆΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. OranShell"
      }, {
        id: 99,
        ⲆⲆⵠ: Δᐃ.ΔΔⵠᐃΔⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃⵠᐃΔⵠⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠΔΔⵠᐃΔΔ,
        ΔⲆⲆⲆ: Δᐃ.ⵠΔⵠΔᐃᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "eogito",
        name: "Pepe"
      }, {
        id: 100,
        ⲆⲆⵠ: Δᐃ.ΔᐃᐃⲆᐃΔⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃⲆⲆⵠᐃⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃΔⵠᐃᐃᐃⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⵠᐃⲆᐃΔᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "fatant",
        name: "Mr. Ant"
      }, {
        id: 115,
        ⲆⲆⵠ: Δᐃ.ᐃᐃΔⵠⲆⵠΔ,
        ⵠⲆⵠ: Δᐃ.ΔⲆⲆΔⵠⲆΔ,
        ᐃⲆⲆᐃ: Δᐃ.ΔΔⵠᐃⵠᐃᐃ,
        ΔⲆⲆⲆ: Δᐃ.ⲆⲆᐃΔⲆⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "MADBalgouthi",
        name: "Mr. Watermelon"
      }, {
        id: 101,
        ⲆⲆⵠ: Δᐃ.ᐃᐃᐃⲆⵠΔⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃᐃΔⲆΔᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⵠΔⲆⲆᐃⵠ,
        ΔⲆⲆⲆ: Δᐃ.ΔⵠⵠΔᐃⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Mr. Thornbush"
      }, {
        id: 131,
        ⲆⲆⵠ: Δᐃ.ΔΔᐃⲆⲆᐃΔ,
        ⵠⲆⵠ: Δᐃ.ⲆⵠⲆⲆΔᐃⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⵠΔⵠⵠⲆⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⵠΔΔⲆⵠᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Cthulhu"
      }, {
        id: 143,
        ⲆⲆⵠ: Δᐃ.ⲆΔΔⲆⵠΔⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⲆᐃᐃⲆᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⲆΔΔᐃΔᐃ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⵠⵠⲆⲆⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "eogito",
        name: "Mr. Cactus"
      }, {
        id: 144,
        ⲆⲆⵠ: Δᐃ.ⲆΔⲆⵠΔⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ΔⲆΔΔⲆᐃⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃᐃⲆⲆⵠⲆⵠ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⵠΔⲆⲆⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Momo"
      }, {
        id: 180,
        ⲆⲆⵠ: Δᐃ.ΔᐃᐃⵠⵠⲆΔ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠⵠⵠⲆᐃᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠᐃⵠᐃⲆᐃⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⵠᐃⲆⵠᐃΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Scream"
      }, {
        id: 193,
        ⲆⲆⵠ: Δᐃ.ⵠⵠΔᐃΔⲆΔ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆᐃΔᐃⵠⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⲆⲆⵠΔᐃⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⲆⵠⵠⵠⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Dragon"
      }, {
        id: 195,
        ⲆⲆⵠ: Δᐃ.ⲆⵠᐃⲆⲆⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ΔᐃΔΔᐃⲆΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠᐃⵠⵠᐃΔᐃ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⵠΔⲆᐃΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Forest Spirit"
      }, {
        id: 197,
        ⲆⲆⵠ: Δᐃ.ⵠⲆⵠΔᐃⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃΔΔΔⵠⲆⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ΔᐃⲆᐃⵠᐃⲆ,
        ΔⲆⲆⲆ: Δᐃ.ΔᐃⵠΔⵠΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Evil Goat"
      }, {
        id: 199,
        ⲆⲆⵠ: Δᐃ.ΔΔⲆⲆⲆⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠΔᐃⵠΔΔᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ΔᐃⵠⵠⲆⲆΔ,
        ΔⲆⲆⲆ: Δᐃ.ⵠᐃΔⲆⲆⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Rotten"
      }, {
        id: 201,
        ⲆⲆⵠ: Δᐃ.ᐃⵠΔⵠⲆᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆᐃⵠⲆᐃⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃᐃᐃⲆⲆᐃⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⲆΔⲆΔⵠⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Fossil"
      }, {
        id: 205,
        ⲆⲆⵠ: Δᐃ.ⲆᐃΔⵠⲆⵠΔ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃⵠⲆΔᐃΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⲆᐃᐃΔⵠⲆ,
        ΔⲆⲆⲆ: Δᐃ.ΔΔⵠⲆΔⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Spectrum"
      }, {
        id: 210,
        ⲆⲆⵠ: Δᐃ.ⲆⵠⲆᐃᐃΔⵠ,
        ⵠⲆⵠ: Δᐃ.ΔΔᐃⵠᐃⲆⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆᐃⲆⵠⵠⲆᐃ,
        ΔⲆⲆⲆ: Δᐃ.ⵠΔⵠⲆⲆⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Helpy",
        name: "Black Cat"
      }, {
        id: 214,
        ⲆⲆⵠ: Δᐃ.ⵠⵠⲆᐃⲆⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠⲆⲆᐃΔᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⵠᐃᐃΔᐃᐃ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⲆᐃΔⲆᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Lynx"
      }, {
        id: 215,
        ⲆⲆⵠ: Δᐃ.ᐃᐃⵠⲆⲆⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠΔΔᐃᐃⲆᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⲆⵠΔⵠⵠⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⲆᐃⲆᐃᐃᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Warg"
      }, {
        id: 217,
        ⲆⲆⵠ: Δᐃ.ⵠⵠⲆⲆⲆⲆΔ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆΔᐃΔⲆᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠΔⵠᐃΔⵠΔ,
        ΔⲆⲆⲆ: Δᐃ.ᐃΔΔⲆⲆΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Menhir"
      }, {
        id: 95,
        ⲆⲆⵠ: Δᐃ.ΔⵠⲆⲆⵠΔⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆΔᐃⵠⲆᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⲆⵠⲆΔⲆΔ,
        ΔⲆⲆⲆ: Δᐃ.ⲆᐃᐃⵠⲆⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Mr. Garlic"
      }, {
        id: 76,
        ⲆⲆⵠ: Δᐃ.ΔⲆⲆΔⲆᐃⲆ,
        ⵠⲆⵠ: Δᐃ.ΔⲆᐃᐃᐃⲆΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⲆⲆⵠᐃⲆⵠ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⲆΔⵠⵠΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Winter",
        name: "Robot Dragon"
      }, {
        id: 44,
        ⲆⲆⵠ: Δᐃ.ⲆⵠⵠⲆⵠΔⲆ,
        ⵠⲆⵠ: Δᐃ.ΔⲆΔⵠⵠΔⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ΔΔᐃΔⵠⵠΔ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⵠⵠᐃΔΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Winter",
        name: "Lava Dragon Version 1"
      }, {
        id: 90,
        ⲆⲆⵠ: Δᐃ.ΔⵠⲆⲆⵠⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⲆⵠΔⵠᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⲆΔΔⵠΔⲆ,
        ΔⲆⲆⲆ: Δᐃ.ΔⲆΔⲆΔⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "ExpertyAnimations",
        name: "Lava Dragon Version 2"
      }, {
        id: 124,
        ⲆⲆⵠ: Δᐃ.ⵠⲆⵠⲆΔⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⲆΔᐃΔᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⵠΔᐃⲆⵠᐃ,
        ΔⲆⲆⲆ: Δᐃ.ⵠΔΔⲆᐃᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Lava Dragon Version 3"
      }, {
        id: 45,
        ⲆⲆⵠ: Δᐃ.ⵠΔⵠᐃΔᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ΔⲆΔⲆⵠΔⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆΔΔⵠⲆᐃⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⲆΔⵠᐃⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Sushui",
        name: "Ice Dragon Version 1"
      }, {
        id: 46,
        ⲆⲆⵠ: Δᐃ.ⵠⵠⲆᐃΔⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠⲆᐃᐃΔⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ΔᐃᐃⵠⵠᐃΔ,
        ΔⲆⲆⲆ: Δᐃ.ⲆⵠᐃⵠⲆⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Winter",
        name: "Ice Dragon Version 2"
      }, {
        id: 108,
        ⲆⲆⵠ: Δᐃ.ᐃⵠⲆᐃⵠΔⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆⵠᐃⲆᐃᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⵠⲆΔⵠⵠⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⵠΔⲆᐃⵠⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Ice Dragon Version 3"
      }, {
        id: 123,
        ⲆⲆⵠ: Δᐃ.ⵠⵠᐃⲆⲆⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ΔⲆⲆⵠⲆⲆⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⲆⲆΔⲆⲆⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⲆᐃⵠΔΔⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Baby Dragon Version 1"
      }, {
        id: 128,
        ⲆⲆⵠ: Δᐃ.ⲆᐃⵠⵠⲆⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃⵠⲆᐃⲆᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ΔΔΔᐃⲆⲆΔ,
        ΔⲆⲆⲆ: Δᐃ.ΔᐃΔᐃΔⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "MADBalgouthi",
        name: "Baby Dragon Version 2"
      }, {
        id: 125,
        ⲆⲆⵠ: Δᐃ.ΔᐃΔᐃⲆⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ΔⵠⲆⲆⵠΔΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⲆᐃᐃⲆᐃⵠ,
        ΔⲆⲆⲆ: Δᐃ.ⲆΔⲆⲆⲆΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Baby Lava"
      }, {
        id: 47,
        ⲆⲆⵠ: Δᐃ.ⲆᐃⲆⲆᐃⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆᐃⵠΔⲆᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ΔΔᐃⵠⲆⲆⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⲆⵠΔΔΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Kraken"
      }, {
        id: 129,
        ⲆⲆⵠ: Δᐃ.ⵠⲆᐃⵠᐃΔᐃ,
        ⵠⲆⵠ: Δᐃ.ΔⲆⵠΔⲆᐃⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃΔΔᐃⵠᐃᐃ,
        ΔⲆⲆⲆ: Δᐃ.ΔⲆΔΔᐃⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Sandworm"
      }, {
        id: 63,
        ⲆⲆⵠ: Δᐃ.ΔⵠΔⲆᐃᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃΔᐃⲆⲆᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠᐃⵠⵠⲆᐃΔ,
        ΔⲆⲆⲆ: Δᐃ.ⲆᐃᐃⵠⲆᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. Golden Bread"
      }, {
        id: 67,
        ⲆⲆⵠ: Δᐃ.ΔΔⵠᐃᐃΔΔ,
        ⵠⲆⵠ: Δᐃ.ᐃΔⵠΔΔᐃΔ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃᐃⲆᐃⲆⲆΔ,
        ΔⲆⲆⲆ: Δᐃ.ⵠΔⵠⵠⲆΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "ForgottenHeroe",
        name: "Starver Ores"
      }, {
        id: 130,
        ⲆⲆⵠ: Δᐃ.ⲆΔΔᐃⲆΔΔ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆⵠΔⵠΔⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ΔⲆΔⵠᐃⵠᐃ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⲆⲆⲆⲆⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Poo"
      }, {
        id: 89,
        ⲆⲆⵠ: Δᐃ.ΔᐃΔⲆⵠⵠΔ,
        ⵠⲆⵠ: Δᐃ.ⲆⵠΔΔⵠΔΔ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃΔⵠᐃⲆⵠΔ,
        ΔⲆⲆⲆ: Δᐃ.ΔⵠᐃᐃⲆΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Poinet",
        name: "Volcano Starver"
      }, {
        id: 112,
        ⲆⲆⵠ: Δᐃ.ΔΔⲆΔⲆᐃΔ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⵠⵠᐃΔⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⲆⲆΔⵠΔⲆ,
        ΔⲆⲆⲆ: Δᐃ.ΔⵠΔΔΔᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Lava Starver"
      }, {
        id: 183,
        ⲆⲆⵠ: Δᐃ.ΔΔⲆⲆⲆⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆᐃᐃΔⵠΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⲆⲆᐃⲆΔⲆ,
        ΔⲆⲆⲆ: Δᐃ.ᐃΔⵠⵠΔᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Revaster"
      }, {
        id: 192,
        ⲆⲆⵠ: Δᐃ.ⵠΔⵠᐃⲆᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ΔⵠΔΔΔΔᐃ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆΔΔⵠΔⵠᐃ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⵠⵠΔΔΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Awakened"
      }, {
        id: 194,
        ⲆⲆⵠ: Δᐃ.ᐃΔΔⵠᐃⲆΔ,
        ⵠⲆⵠ: Δᐃ.ΔᐃΔⵠⵠᐃⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆᐃᐃΔᐃⲆⵠ,
        ΔⲆⲆⲆ: Δᐃ.ΔⲆᐃⵠⲆΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Ice Dragon"
      }, {
        id: 236,
        ⲆⲆⵠ: Δᐃ.ⲆⲆⲆΔⵠΔΔ,
        ⵠⲆⵠ: Δᐃ.ⲆΔΔⵠⵠⲆⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠΔⵠⵠΔΔΔ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⵠⲆⲆᐃⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Crystal Dragon"
      }, {
        id: 208,
        ⲆⲆⵠ: Δᐃ.ⲆⵠⲆᐃᐃΔᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆᐃⵠᐃΔΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆΔⵠᐃⲆⵠΔ,
        ΔⲆⲆⲆ: Δᐃ.ΔᐃⵠᐃⲆᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bone Dragon"
      }, {
        id: 216,
        ⲆⲆⵠ: Δᐃ.ᐃⲆΔᐃⵠⲆΔ,
        ⵠⲆⵠ: Δᐃ.ΔⲆⲆᐃⲆⲆΔ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃᐃᐃᐃⲆⵠᐃ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⵠΔⲆᐃⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Warg Ghost"
      }, {
        id: 226,
        ⲆⲆⵠ: Δᐃ.ⵠᐃⵠⲆᐃΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⲆΔᐃΔⲆⵠΔ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆⵠⲆᐃΔᐃᐃ,
        ΔⲆⲆⲆ: Δᐃ.ΔΔᐃⵠΔᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Cursed"
      }, {
        id: 48,
        ⲆⲆⵠ: Δᐃ.ᐃᐃⵠⲆⲆᐃⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠΔᐃΔᐃΔ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⵠΔⵠᐃⲆⲆ,
        ΔⲆⲆⲆ: Δᐃ.ᐃⲆΔⵠⵠⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⲆⲆᐃᐃⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Robot"
      }, {
        id: 110,
        ⲆⲆⵠ: Δᐃ.ⵠⲆⵠᐃᐃⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⵠⵠΔΔⲆ,
        ᐃⲆⲆᐃ: Δᐃ.ⵠⲆⲆΔⵠⲆⲆ,
        ΔⲆⲆⲆ: Δᐃ.ΔᐃΔⲆΔⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⲆⲆᐃᐃⲆΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Blue Butterfly"
      }, {
        id: 157,
        ⲆⲆⵠ: Δᐃ.ΔⲆΔΔⲆᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃΔⲆᐃΔⵠⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ⲆᐃⵠⲆᐃΔⲆ,
        ΔⲆⲆⲆ: Δᐃ.ⵠⲆΔⵠΔⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⲆⲆᐃᐃⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Yrifox"
      }, {
        id: 165,
        ⲆⲆⵠ: Δᐃ.ⵠⲆⵠᐃᐃΔᐃ,
        ⵠⲆⵠ: Δᐃ.ΔΔⲆᐃΔΔⵠ,
        ᐃⲆⲆᐃ: Δᐃ.ᐃⲆⲆᐃⵠΔⲆ,
        ΔⲆⲆⲆ: Δᐃ.ΔᐃⵠᐃΔⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⲆⲆᐃᐃⲆΔ,
        ᐃⲆⵠ: "OmarJr13",
        name: "Blob Skin"
      }],
      Ⲇⵠᐃⵠ: [{
        id: 0,
        ⲆⲆⵠ: Δᐃ.ⵠⵠⲆΔᐃⲆΔ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⵠⵠᐃΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bag 1"
      }, {
        id: 1,
        ⲆⲆⵠ: Δᐃ.ΔΔⲆᐃᐃⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃⲆⵠᐃΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Old Bag"
      }, {
        id: 2,
        ⲆⲆⵠ: Δᐃ.ⵠⵠᐃΔⲆᐃⲆ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆⲆᐃⵠᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bag 2"
      }, {
        id: 3,
        ⲆⲆⵠ: Δᐃ.ⵠⵠⵠᐃΔⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆⵠᐃⵠᐃΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bag 3"
      }, {
        id: 4,
        ⲆⲆⵠ: Δᐃ.ⲆΔⵠⵠⲆⲆΔ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃΔⲆᐃΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bag 4"
      }, {
        id: 5,
        ⲆⲆⵠ: Δᐃ.ΔⲆⵠⲆⲆΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⲆΔⲆⲆΔΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bag 5"
      }, {
        id: 11,
        ⲆⲆⵠ: Δᐃ.ⵠᐃᐃᐃⲆᐃΔ,
        ⵠⲆⵠ: Δᐃ.ΔᐃᐃⵠⵠⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Wood Pickaxe Bag"
      }, {
        id: 19,
        ⲆⲆⵠ: Δᐃ.ΔᐃᐃⵠⵠΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃᐃΔᐃᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Starve.io ",
        name: "Wood Carrier"
      }, {
        id: 37,
        ⲆⲆⵠ: Δᐃ.ⲆᐃᐃⵠⲆΔⵠ,
        ⵠⲆⵠ: Δᐃ.ΔᐃⲆⲆⲆΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Bag 6"
      }, {
        id: 39,
        ⲆⲆⵠ: Δᐃ.ΔⵠⲆⲆⵠΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆⲆᐃⵠⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Bag with Wooden Swords"
      }, {
        id: 44,
        ⲆⲆⵠ: Δᐃ.ⵠⵠΔᐃⵠⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ΔⲆΔⲆⲆⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Communist",
        name: "Big Bag"
      }, {
        id: 7,
        ⲆⲆⵠ: Δᐃ.ΔⵠⲆᐃⲆᐃⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆⵠⵠᐃⲆⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Communist",
        name: "Bag 6"
      }, {
        id: 8,
        ⲆⲆⵠ: Δᐃ.ⲆⲆⲆⵠⵠΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⲆⵠΔⲆᐃⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Easter Bag"
      }, {
        id: 9,
        ⲆⲆⵠ: Δᐃ.ΔⲆⵠⵠⵠΔᐃ,
        ⵠⲆⵠ: Δᐃ.ΔΔᐃⵠΔᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "pizza wa",
        name: "Star Bag"
      }, {
        id: 10,
        ⲆⲆⵠ: Δᐃ.ΔⵠⵠⵠᐃⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ΔᐃⵠⵠⲆⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Winter Bag"
      }, {
        id: 20,
        ⲆⲆⵠ: Δᐃ.ΔⵠᐃⲆⵠⲆΔ,
        ⵠⲆⵠ: Δᐃ.ΔΔΔᐃⵠᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io ",
        name: "Stone Carrier"
      }, {
        id: 24,
        ⲆⲆⵠ: Δᐃ.ᐃΔⵠΔᐃⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ΔᐃⲆᐃΔⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Stone Pickaxe Bag"
      }, {
        id: 6,
        ⲆⲆⵠ: Δᐃ.ᐃⵠΔᐃⲆⲆΔ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⵠᐃⵠⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Communist",
        name: "Bag Camouflage"
      }, {
        id: 38,
        ⲆⲆⵠ: Δᐃ.ⵠᐃᐃⵠΔΔᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠΔΔⲆⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Bag with Stone Swords"
      }, {
        id: 54,
        ⲆⲆⵠ: Δᐃ.ΔⲆⲆⲆⵠᐃⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠΔᐃᐃΔᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Cow Bag"
      }, {
        id: 59,
        ⲆⲆⵠ: Δᐃ.ᐃᐃⵠΔⲆⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ΔⵠΔᐃΔΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "CrysTal",
        name: "Starver Bag"
      }, {
        id: 62,
        ⲆⲆⵠ: Δᐃ.ᐃᐃᐃⲆᐃⲆΔ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆΔΔΔⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "CrysTal",
        name: "Crystal Sky Bag"
      }, {
        id: 71,
        ⲆⲆⵠ: Δᐃ.ⵠⲆΔΔΔⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆⲆΔΔⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Portable Furnace"
      }, {
        id: 78,
        ⲆⲆⵠ: Δᐃ.ᐃΔⲆᐃⲆᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆⵠᐃΔⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Crate Bag"
      }, {
        id: 13,
        ⲆⲆⵠ: Δᐃ.ⲆⵠΔΔⵠⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⲆΔⲆⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Honey Pot"
      }, {
        id: 21,
        ⲆⲆⵠ: Δᐃ.ⵠⵠΔⵠΔⲆΔ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆⵠΔᐃᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io ",
        name: "Gold Carrier"
      }, {
        id: 30,
        ⲆⲆⵠ: Δᐃ.ⵠᐃᐃᐃΔⵠΔ,
        ⵠⲆⵠ: Δᐃ.ᐃΔⵠⲆⲆⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Gold Pickaxe Bag"
      }, {
        id: 29,
        ⲆⲆⵠ: Δᐃ.ΔⲆΔᐃᐃⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆⵠᐃⲆⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Ariel",
        name: "Mr and Mrs Bakers"
      }, {
        id: 41,
        ⲆⲆⵠ: Δᐃ.ⵠⲆΔⲆⵠΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃΔⲆᐃᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Bag with Golden Swords"
      }, {
        id: 47,
        ⲆⲆⵠ: Δᐃ.ΔᐃⵠᐃⵠΔⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆΔⲆᐃΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Explorer Bag"
      }, {
        id: 51,
        ⲆⲆⵠ: Δᐃ.ⵠΔΔⲆΔⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⲆΔⵠᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Bamboo Bag"
      }, {
        id: 53,
        ⲆⲆⵠ: Δᐃ.ΔⲆᐃΔⵠᐃⲆ,
        ⵠⲆⵠ: Δᐃ.ΔⵠΔᐃᐃⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Mummy Bag"
      }, {
        id: 58,
        ⲆⲆⵠ: Δᐃ.ⵠΔⵠⵠⵠᐃⲆ,
        ⵠⲆⵠ: Δᐃ.ΔⵠⵠΔΔⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "MADBalgouthi",
        name: "Watermelon Bag"
      }, {
        id: 60,
        ⲆⲆⵠ: Δᐃ.ⵠᐃⲆⵠⲆⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃΔⵠⲆᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Garlic Bag"
      }, {
        id: 61,
        ⲆⲆⵠ: Δᐃ.ⲆΔⲆⲆᐃΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃⲆΔⵠΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Pumpkin Bag"
      }, {
        id: 64,
        ⲆⲆⵠ: Δᐃ.ᐃΔⵠⵠⲆⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆᐃΔΔΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "upfiz",
        name: "Oil Barel bag"
      }, {
        id: 67,
        ⲆⲆⵠ: Δᐃ.ᐃΔⵠᐃΔⲆΔ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃᐃⵠΔⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Tree Bag"
      }, {
        id: 70,
        ⲆⲆⵠ: Δᐃ.ᐃΔⵠΔΔΔᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠⵠⵠⵠΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Lit Portable Furnace"
      }, {
        id: 72,
        ⲆⲆⵠ: Δᐃ.ⲆⲆⵠⵠⵠᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠⵠΔⲆΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Christmas Berry Bush Bag"
      }, {
        id: 73,
        ⲆⲆⵠ: Δᐃ.ⵠⲆⲆⲆΔᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃⵠⵠⵠⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Berry Bush Bag"
      }, {
        id: 74,
        ⲆⲆⵠ: Δᐃ.ΔΔᐃᐃⲆΔⵠ,
        ⵠⲆⵠ: Δᐃ.ΔⵠⲆⲆⲆΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Fall Berry Bush Bag"
      }, {
        id: 76,
        ⲆⲆⵠ: Δᐃ.ΔⵠⲆᐃⲆⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ΔΔΔⲆⲆᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Reclaimed Bag"
      }, {
        id: 14,
        ⲆⲆⵠ: Δᐃ.ⵠᐃᐃᐃΔⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆⲆᐃᐃⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "a Rabbit in my Bag"
      }, {
        id: 15,
        ⲆⲆⵠ: Δᐃ.ⲆⵠⵠⵠᐃΔⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃⲆᐃΔΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bird's nest"
      }, {
        id: 16,
        ⲆⲆⵠ: Δᐃ.ΔⲆᐃⲆᐃⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆⵠⲆⲆᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "a Fish on your Back"
      }, {
        id: 17,
        ⲆⲆⵠ: Δᐃ.ⵠΔⵠᐃⵠΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃᐃᐃⲆΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "a Squirrel in my Bag"
      }, {
        id: 22,
        ⲆⲆⵠ: Δᐃ.ⲆⲆᐃΔⵠΔⵠ,
        ⵠⲆⵠ: Δᐃ.ΔΔΔⵠⵠⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io ",
        name: "Diamond Carrier"
      }, {
        id: 12,
        ⲆⲆⵠ: Δᐃ.ⵠⵠΔΔⵠⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ᐃΔᐃᐃΔⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Resources Bag"
      }, {
        id: 32,
        ⲆⲆⵠ: Δᐃ.ΔᐃᐃⲆᐃⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ΔᐃΔᐃᐃⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Diamond Pickaxe Bag"
      }, {
        id: 40,
        ⲆⲆⵠ: Δᐃ.ⵠᐃᐃΔⲆⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠⲆᐃᐃⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Bag with Diamond Swords"
      }, {
        id: 45,
        ⲆⲆⵠ: Δᐃ.ᐃΔᐃᐃⵠᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ΔⲆᐃⵠΔⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "eogito",
        name: "My Cake Bag"
      }, {
        id: 46,
        ⲆⲆⵠ: Δᐃ.ᐃᐃᐃⲆΔⲆΔ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃᐃΔΔᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "eogito",
        name: "My Christmas Cake Bag"
      }, {
        id: 52,
        ⲆⲆⵠ: Δᐃ.ΔΔᐃΔⲆΔⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⲆⵠⵠΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "MADBalgouthi",
        name: "Fish Bag"
      }, {
        id: 65,
        ⲆⲆⵠ: Δᐃ.ⵠΔⵠᐃᐃⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ΔⲆᐃΔⵠΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "pizza wa",
        name: "Cloud Bag"
      }, {
        id: 68,
        ⲆⲆⵠ: Δᐃ.ΔⲆΔᐃⵠᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ΔⲆᐃⵠᐃᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "pizza wa",
        name: "Bee Bag"
      }, {
        id: 77,
        ⲆⲆⵠ: Δᐃ.ⵠᐃΔⲆΔⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃᐃΔᐃⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bag and Bedroll"
      }, {
        id: 80,
        ⲆⲆⵠ: Δᐃ.ⵠΔᐃᐃΔⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆΔΔᐃᐃᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Peasant's Bag"
      }, {
        id: 81,
        ⲆⲆⵠ: Δᐃ.ᐃΔΔⵠⵠΔⵠ,
        ⵠⲆⵠ: Δᐃ.ΔΔΔⲆⵠΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Probably Stolen Bag"
      }, {
        id: 48,
        ⲆⲆⵠ: Δᐃ.ⲆⲆᐃⵠⲆⵠΔ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆΔⵠⵠᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "fatant",
        name: "Natural Bag"
      }, {
        id: 23,
        ⲆⲆⵠ: Δᐃ.ⲆΔΔᐃⲆᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆⵠⵠᐃⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io ",
        name: "Amethyst Carrier"
      }, {
        id: 25,
        ⲆⲆⵠ: Δᐃ.ΔⵠⲆᐃⵠⲆΔ,
        ⵠⲆⵠ: Δᐃ.ΔᐃⲆΔⲆΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "eogito",
        name: "Amethyst Pickaxe Bag"
      }, {
        id: 28,
        ⲆⲆⵠ: Δᐃ.ⵠᐃⲆᐃᐃⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ΔΔⵠⵠⲆⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Your Baby"
      }, {
        id: 33,
        ⲆⲆⵠ: Δᐃ.ᐃᐃⵠᐃⲆⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠΔⲆᐃᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Tropical Bag"
      }, {
        id: 43,
        ⲆⲆⵠ: Δᐃ.ᐃΔⲆⲆⵠΔΔ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆⵠΔⲆΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "eogito",
        name: "Bag with Amethyst Swords"
      }, {
        id: 35,
        ⲆⲆⵠ: Δᐃ.ⵠΔⲆᐃⵠΔᐃ,
        ⵠⲆⵠ: Δᐃ.ΔΔⲆⵠⵠᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "eogito",
        name: "Ice Bag"
      }, {
        id: 50,
        ⲆⲆⵠ: Δᐃ.ΔⲆⵠᐃⲆΔⲆ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆⲆⵠⵠⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Thornbush Bag"
      }, {
        id: 56,
        ⲆⲆⵠ: Δᐃ.ΔᐃⲆΔΔⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ΔⲆⲆᐃⵠΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "eogito",
        name: "Autumn Bag"
      }, {
        id: 57,
        ⲆⲆⵠ: Δᐃ.ⵠⲆᐃᐃΔⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠⵠⲆⲆⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Dino Egg Bag"
      }, {
        id: 66,
        ⲆⲆⵠ: Δᐃ.ΔⵠΔⵠᐃⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆⲆᐃⲆΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Magic Cloud Bag"
      }, {
        id: 69,
        ⲆⲆⵠ: Δᐃ.ᐃⲆⵠⲆⲆΔⵠ,
        ⵠⲆⵠ: Δᐃ.ΔⲆΔᐃⲆⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Chest Bag"
      }, {
        id: 75,
        ⲆⲆⵠ: Δᐃ.ⲆᐃⲆΔⵠᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆᐃΔᐃⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Spectum Bag"
      }, {
        id: 79,
        ⲆⲆⵠ: Δᐃ.ΔⲆΔⲆⲆᐃⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆⲆᐃⵠⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Winter Peasant's Bag"
      }, {
        id: 31,
        ⲆⲆⵠ: Δᐃ.ᐃⵠΔᐃΔᐃⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠΔᐃⲆΔΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io ",
        name: "Reidite Carrier"
      }, {
        id: 18,
        ⲆⲆⵠ: Δᐃ.ᐃⵠᐃΔΔΔⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆΔΔᐃⲆⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Winter",
        name: "Lava Bag"
      }, {
        id: 49,
        ⲆⲆⵠ: Δᐃ.ᐃⲆⵠᐃⲆⲆΔ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠᐃⵠΔⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Lava Bag 2"
      }, {
        id: 36,
        ⲆⲆⵠ: Δᐃ.ⲆᐃⵠⲆⵠⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⲆΔⲆΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Dragon Bag"
      }, {
        id: 55,
        ⲆⲆⵠ: Δᐃ.ΔΔⵠᐃⲆⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ΔⵠⲆⵠᐃⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Winter Ice Bag"
      }, {
        id: 26,
        ⲆⲆⵠ: Δᐃ.ΔΔΔⲆΔⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆⲆᐃⵠⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Reidite Pickaxe Bag"
      }, {
        id: 27,
        ⲆⲆⵠ: Δᐃ.ᐃⲆⲆⲆᐃᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠⵠⵠΔΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Octopus Bowl"
      }, {
        id: 34,
        ⲆⲆⵠ: Δᐃ.ⲆΔΔΔⲆᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ΔᐃⲆⵠΔΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Cave Bag"
      }, {
        id: 42,
        ⲆⲆⵠ: Δᐃ.ᐃⲆⲆⵠΔⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃΔⵠⲆᐃᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Bag with Reidite Swords"
      }, {
        id: 63,
        ⲆⲆⵠ: Δᐃ.ΔⵠⲆⵠΔⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆΔᐃⵠᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Engineer Bag"
      }],
      ΔΔⵠΔⵠ: [{
        id: 0,
        ⲆⲆⵠ: Δᐃ.ᐃⲆᐃΔᐃΔΔ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃᐃⲆⵠΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden Dead Box"
      }, {
        id: 1,
        ⲆⲆⵠ: Δᐃ.ΔᐃᐃⲆⲆᐃⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆⲆⲆⲆᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Hidden item"
      }, {
        id: 2,
        ⲆⲆⵠ: Δᐃ.ᐃΔᐃᐃⲆΔⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃΔⵠⲆⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden Box 1"
      }, {
        id: 3,
        ⲆⲆⵠ: Δᐃ.ᐃⲆᐃᐃⵠⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ΔⵠⵠⵠⲆⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden Box 2"
      }, {
        id: 4,
        ⲆⲆⵠ: Δᐃ.ⵠⲆⲆⵠᐃⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆⵠⲆⲆᐃᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden Box 3"
      }, {
        id: 5,
        ⲆⲆⵠ: Δᐃ.ⲆᐃᐃᐃΔⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆⲆⲆⵠⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Broken Wooden Box"
      }, {
        id: 6,
        ⲆⲆⵠ: Δᐃ.ᐃⵠᐃᐃᐃⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃᐃⲆⲆΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden Box"
      }, {
        id: 7,
        ⲆⲆⵠ: Δᐃ.ⵠⲆⵠΔᐃⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃⲆⵠⲆᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden Battle Box"
      }, {
        id: 8,
        ⲆⲆⵠ: Δᐃ.ⵠΔᐃᐃΔΔⲆ,
        ⵠⲆⵠ: Δᐃ.ΔΔᐃⵠΔⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden Box with a Cross"
      }, {
        id: 9,
        ⲆⲆⵠ: Δᐃ.ᐃⵠᐃΔΔⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆⲆᐃΔΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden Box with Bubbles"
      }, {
        id: 10,
        ⲆⲆⵠ: Δᐃ.ᐃΔΔΔⲆᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ΔᐃᐃΔⵠⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden Box with Eyes"
      }, {
        id: 11,
        ⲆⲆⵠ: Δᐃ.ⲆⲆΔΔⲆᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ΔⵠΔⲆᐃΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Dark Wooden Box"
      }, {
        id: 38,
        ⲆⲆⵠ: Δᐃ.ᐃⵠᐃΔΔⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ΔΔⵠΔⲆⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Weddlz",
        name: "Noob Box"
      }, {
        id: 12,
        ⲆⲆⵠ: Δᐃ.ⲆᐃⵠⲆⲆΔΔ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠⵠⵠᐃⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden and Stone Box"
      }, {
        id: 14,
        ⲆⲆⵠ: Δᐃ.ⵠΔΔΔᐃΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠΔΔΔⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "pizza wa",
        name: "Star Box 1"
      }, {
        id: 15,
        ⲆⲆⵠ: Δᐃ.ⲆⵠΔⲆΔⲆΔ,
        ⵠⲆⵠ: Δᐃ.ΔᐃΔΔΔΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "pizza wa",
        name: "Star Box 2"
      }, {
        id: 27,
        ⲆⲆⵠ: Δᐃ.ⵠⵠⲆⲆⵠⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ΔΔΔⲆΔⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Flower Box"
      }, {
        id: 46,
        ⲆⲆⵠ: Δᐃ.ΔΔΔΔΔⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆⲆⵠⵠⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "MADBalgouthi",
        name: "Blue Box"
      }, {
        id: 75,
        ⲆⲆⵠ: Δᐃ.ᐃⵠΔⵠⲆⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠⲆΔⵠΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Night Stars Crate"
      }, {
        id: 19,
        ⲆⲆⵠ: Δᐃ.ⵠⵠⵠᐃⵠⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃΔⲆᐃᐃΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Beehive"
      }, {
        id: 13,
        ⲆⲆⵠ: Δᐃ.ᐃΔⵠΔΔⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃᐃᐃΔᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden and Golden Box"
      }, {
        id: 21,
        ⲆⲆⵠ: Δᐃ.ΔΔⲆⵠⵠΔⲆ,
        ⵠⲆⵠ: Δᐃ.ΔⲆΔⲆⲆⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Gravestone"
      }, {
        id: 25,
        ⲆⲆⵠ: Δᐃ.ⵠΔᐃⵠⲆᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ΔΔᐃⵠⲆᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Communist",
        name: "Sky Box"
      }, {
        id: 29,
        ⲆⲆⵠ: Δᐃ.ᐃⲆᐃᐃⵠⲆΔ,
        ⵠⲆⵠ: Δᐃ.ΔᐃᐃᐃⲆⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Winter",
        name: "Golden Box"
      }, {
        id: 34,
        ⲆⲆⵠ: Δᐃ.ΔᐃⵠⲆΔⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ΔⲆΔⲆΔᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Communist",
        name: "Water Crate"
      }, {
        id: 35,
        ⲆⲆⵠ: Δᐃ.ⲆⵠΔΔⵠⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠⵠⲆΔΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Communist",
        name: "Glass Crate"
      }, {
        id: 70,
        ⲆⲆⵠ: Δᐃ.ⲆΔΔΔᐃⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆΔⲆΔᐃⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "CrysTal",
        name: "Crystal Sky Box"
      }, {
        id: 74,
        ⲆⲆⵠ: Δᐃ.ⵠᐃΔⵠᐃⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⲆᐃΔΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Reclaimed Crate"
      }, {
        id: 77,
        ⲆⲆⵠ: Δᐃ.ⲆΔᐃⲆⲆⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ΔⵠᐃⵠᐃⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Workplace Accident"
      }, {
        id: 16,
        ⲆⲆⵠ: Δᐃ.ⲆⵠⵠᐃⵠΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠⲆΔΔⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden and Diamond Box"
      }, {
        id: 18,
        ⲆⲆⵠ: Δᐃ.ⵠΔⲆΔᐃΔⲆ,
        ⵠⲆⵠ: Δᐃ.ΔⵠᐃⵠΔⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Don't Hit Me"
      }, {
        id: 26,
        ⲆⲆⵠ: Δᐃ.ⵠᐃΔⵠᐃΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃᐃⲆⵠⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Underwater Box"
      }, {
        id: 31,
        ⲆⲆⵠ: Δᐃ.ᐃᐃⵠΔⲆⲆΔ,
        ⵠⲆⵠ: Δᐃ.ⲆⵠⲆⲆⲆⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Communist",
        name: "Items Pile"
      }, {
        id: 32,
        ⲆⲆⵠ: Δᐃ.ⲆΔⵠⲆᐃΔΔ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃⲆΔⲆᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Cake Box"
      }, {
        id: 33,
        ⲆⲆⵠ: Δᐃ.ⵠΔᐃⵠΔΔΔ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃⲆⲆΔⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Christmas Cake Box"
      }, {
        id: 36,
        ⲆⲆⵠ: Δᐃ.ΔⲆⵠⲆΔⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆΔΔΔⲆⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Fukss",
        name: "Crab Box"
      }, {
        id: 42,
        ⲆⲆⵠ: Δᐃ.ⲆΔⵠⲆᐃⲆΔ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠⲆⵠΔⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "MADBalgouthi",
        name: "Fishing Box"
      }, {
        id: 72,
        ⲆⲆⵠ: Δᐃ.ΔΔᐃᐃⵠⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠΔΔΔᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Storage Machine"
      }, {
        id: 22,
        ⲆⲆⵠ: Δᐃ.ⵠᐃⲆⵠᐃΔⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆⵠⲆⲆᐃⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Let me out of here"
      }, {
        id: 17,
        ⲆⲆⵠ: Δᐃ.ΔⵠⲆⵠⵠⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠⲆⵠᐃΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden and Amethyst Box"
      }, {
        id: 24,
        ⲆⲆⵠ: Δᐃ.ᐃⵠᐃΔⵠΔᐃ,
        ⵠⲆⵠ: Δᐃ.ΔⲆΔⵠⲆᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Aquarium"
      }, {
        id: 28,
        ⲆⲆⵠ: Δᐃ.ᐃⲆⲆΔᐃᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ΔⵠᐃᐃⲆⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "eogito",
        name: "Gift Box"
      }, {
        id: 40,
        ⲆⲆⵠ: Δᐃ.ⲆⲆⵠⵠΔΔⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃⲆⵠⵠᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "MADBalgouthi",
        name: "Open Watermelon Box"
      }, {
        id: 41,
        ⲆⲆⵠ: Δᐃ.ⵠⲆⵠᐃᐃⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ΔᐃᐃⵠΔⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "MADBalgouthi",
        name: "Watermelon Box"
      }, {
        id: 39,
        ⲆⲆⵠ: Δᐃ.ⲆⲆⵠⲆⵠΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆⲆⲆᐃΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Thornbush Box"
      }, {
        id: 43,
        ⲆⲆⵠ: Δᐃ.ⵠΔΔⵠⵠⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃⵠᐃᐃΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "eogito",
        name: "Rabbit in the Box"
      }, {
        id: 47,
        ⲆⲆⵠ: Δᐃ.ⵠⲆᐃⵠⵠⲆΔ,
        ⵠⲆⵠ: Δᐃ.ΔᐃⵠⲆᐃⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Garlic Plot"
      }, {
        id: 48,
        ⲆⲆⵠ: Δᐃ.ⵠᐃΔΔΔΔⲆ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠᐃⲆᐃΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Pumpkin Plot"
      }, {
        id: 78,
        ⲆⲆⵠ: Δᐃ.ⵠⵠⲆᐃⵠⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ΔΔᐃΔⲆⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Spectrum Portal"
      }, {
        id: 45,
        ⲆⲆⵠ: Δᐃ.ᐃᐃⲆΔΔⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ΔⵠⲆⲆⵠⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Autumn Box"
      }, {
        id: 44,
        ⲆⲆⵠ: Δᐃ.ΔΔΔΔΔⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃΔⲆᐃᐃⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Winter Box"
      }, {
        id: 20,
        ⲆⲆⵠ: Δᐃ.ⵠᐃΔᐃⵠⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ΔᐃⲆΔΔᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Metal and Reidite Box"
      }, {
        id: 23,
        ⲆⲆⵠ: Δᐃ.ΔⲆⲆⵠⵠⲆΔ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃⵠᐃᐃⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Kraken Box"
      }, {
        id: 30,
        ⲆⲆⵠ: Δᐃ.ⵠΔⵠⲆΔⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ΔⲆᐃΔᐃⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Winter",
        name: "Lava Box"
      }, {
        id: 37,
        ⲆⲆⵠ: Δᐃ.ⵠⲆⲆΔⵠⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ΔⲆⲆᐃⵠⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Lava Box 2"
      }, {
        id: 49,
        ⲆⲆⵠ: Δᐃ.ⲆΔᐃⲆⵠⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃΔⲆⵠΔΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Rabbit"
      }, {
        id: 50,
        ⲆⲆⵠ: Δᐃ.ᐃⵠⲆⲆⲆΔᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃΔⲆⲆΔΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Wolf"
      }, {
        id: 51,
        ⲆⲆⵠ: Δᐃ.ⵠΔⵠᐃΔⲆΔ,
        ⵠⲆⵠ: Δᐃ.ⲆΔΔᐃΔⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Spider"
      }, {
        id: 52,
        ⲆⲆⵠ: Δᐃ.ⲆᐃᐃⵠΔΔΔ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆΔΔⲆᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Hawk"
      }, {
        id: 53,
        ⲆⲆⵠ: Δᐃ.ΔᐃΔᐃΔᐃΔ,
        ⵠⲆⵠ: Δᐃ.ΔⵠᐃΔⲆⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Bear"
      }, {
        id: 54,
        ⲆⲆⵠ: Δᐃ.ᐃⵠⵠᐃᐃΔΔ,
        ⵠⲆⵠ: Δᐃ.ΔΔΔᐃΔⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Fox"
      }, {
        id: 55,
        ⲆⲆⵠ: Δᐃ.ᐃᐃΔΔⲆᐃΔ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠᐃⲆΔᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Baby Mammoth"
      }, {
        id: 56,
        ⲆⲆⵠ: Δᐃ.ⵠⵠΔⲆⵠᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆΔΔⲆᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Mammoth"
      }, {
        id: 57,
        ⲆⲆⵠ: Δᐃ.ΔⲆⲆⵠⵠΔΔ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠᐃΔᐃⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Sandworm"
      }, {
        id: 58,
        ⲆⲆⵠ: Δᐃ.ᐃΔⵠⵠΔᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ΔΔⵠΔᐃᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Vulture"
      }, {
        id: 59,
        ⲆⲆⵠ: Δᐃ.ΔⲆⵠⲆᐃΔΔ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠⵠⲆᐃᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Kraken"
      }, {
        id: 60,
        ⲆⲆⵠ: Δᐃ.ⲆⵠⵠⲆⲆΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃΔⲆⵠⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Piranha"
      }, {
        id: 61,
        ⲆⲆⵠ: Δᐃ.ΔⵠᐃΔⵠⲆΔ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆᐃᐃⲆⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Baby Dragon"
      }, {
        id: 62,
        ⲆⲆⵠ: Δᐃ.ⵠᐃΔΔᐃⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃᐃⵠᐃΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Baby Lava"
      }, {
        id: 63,
        ⲆⲆⵠ: Δᐃ.ⵠⵠⲆⵠΔⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆⲆⵠΔⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Dragon"
      }, {
        id: 64,
        ⲆⲆⵠ: Δᐃ.ⵠⲆΔΔΔᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ΔΔᐃⵠᐃⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Penguin"
      }, {
        id: 65,
        ⲆⲆⵠ: Δᐃ.ⲆΔᐃᐃΔⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ΔᐃⲆⲆⵠⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Lava Dragon"
      }, {
        id: 66,
        ⲆⲆⵠ: Δᐃ.ⵠⵠᐃⵠΔⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆⲆⲆᐃⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Boar"
      }, {
        id: 67,
        ⲆⲆⵠ: Δᐃ.ΔⲆⵠⲆⲆᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ΔⵠΔⲆΔⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Fire mob"
      }, {
        id: 68,
        ⲆⲆⵠ: Δᐃ.ΔⵠᐃΔΔⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃΔⲆᐃᐃΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Crab"
      }, {
        id: 69,
        ⲆⲆⵠ: Δᐃ.ΔⵠΔⵠⲆⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠΔᐃⵠΔⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the King Crab"
      }, {
        id: 71,
        ⲆⲆⵠ: Δᐃ.ⲆⵠΔΔᐃⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ΔⵠⵠⲆΔΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Dragon Box"
      }, {
        id: 73,
        ⲆⲆⵠ: Δᐃ.ⵠᐃⲆⲆᐃⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ΔⲆᐃᐃⵠᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Rekt"
      }, {
        id: 76,
        ⲆⲆⵠ: Δᐃ.ᐃⲆΔΔⲆΔΔ,
        ⵠⲆⵠ: Δᐃ.ΔᐃⵠΔⲆᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Sleeping Tamon Dragon"
      }],
      ⲆᐃⵠⲆᐃ: [{
        id: 0,
        ⲆⲆⵠ: Δᐃ.ⲆⲆΔⵠⲆᐃΔ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⵠᐃᐃΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Book 1"
      }, {
        id: 1,
        ⲆⲆⵠ: Δᐃ.ᐃᐃⲆᐃᐃⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠⵠᐃⲆᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Book 2"
      }, {
        id: 2,
        ⲆⲆⵠ: Δᐃ.ΔⲆⵠΔΔᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠⲆᐃⲆΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Book 3"
      }, {
        id: 3,
        ⲆⲆⵠ: Δᐃ.Ⲇᐃᐃᐃⵠᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆⲆⵠⵠⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Book 4"
      }, {
        id: 4,
        ⲆⲆⵠ: Δᐃ.ΔⵠΔⲆⵠᐃΔ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆⲆΔΔⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Damaged Book 1"
      }, {
        id: 18,
        ⲆⲆⵠ: Δᐃ.ΔⲆᐃᐃΔΔΔ,
        ⵠⲆⵠ: Δᐃ.ΔΔᐃΔΔⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "SeveR",
        name: "Damaged Book 2"
      }, {
        id: 5,
        ⲆⲆⵠ: Δᐃ.ΔᐃⲆⵠⵠΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃⲆⲆΔⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Doctorpus",
        name: "Scroll"
      }, {
        id: 6,
        ⲆⲆⵠ: Δᐃ.ᐃⲆⵠⲆΔᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆⵠᐃⲆΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Doctorpus",
        name: "Clipboard"
      }, {
        id: 7,
        ⲆⲆⵠ: Δᐃ.ᐃᐃΔⲆΔᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ΔⲆᐃⵠⲆΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Seed Book"
      }, {
        id: 20,
        ⲆⲆⵠ: Δᐃ.ⵠΔᐃΔΔΔⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆᐃᐃΔⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Camo Book"
      }, {
        id: 24,
        ⲆⲆⵠ: Δᐃ.ᐃⲆΔΔⲆᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ΔΔⲆⲆⵠⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Communist",
        name: "Stone Tablet"
      }, {
        id: 47,
        ⲆⲆⵠ: Δᐃ.ⵠⵠΔⵠΔᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ΔⵠᐃⵠⲆⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Reclaimed Book"
      }, {
        id: 10,
        ⲆⲆⵠ: Δᐃ.ⵠⲆΔⲆⵠⲆΔ,
        ⵠⲆⵠ: Δᐃ.ΔⲆᐃΔΔᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Star Book"
      }, {
        id: 8,
        ⲆⲆⵠ: Δᐃ.ᐃΔΔΔΔᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆⲆⵠΔⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Gold Book"
      }, {
        id: 15,
        ⲆⲆⵠ: Δᐃ.ⵠᐃⵠⵠⵠΔⵠ,
        ⵠⲆⵠ: Δᐃ.ΔΔΔᐃΔⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Old Mysterious Paper"
      }, {
        id: 17,
        ⲆⲆⵠ: Δᐃ.ΔⵠⵠⵠᐃΔΔ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃⲆᐃⲆⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Gold Engraving"
      }, {
        id: 25,
        ⲆⲆⵠ: Δᐃ.ⲆΔⲆΔᐃᐃⲆ,
        ⵠⲆⵠ: Δᐃ.ᐃΔⵠΔⲆΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "fatant",
        name: "Ant Book"
      }, {
        id: 32,
        ⲆⲆⵠ: Δᐃ.ᐃⵠΔᐃᐃΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆᐃΔΔⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Mummy Book"
      }, {
        id: 37,
        ⲆⲆⵠ: Δᐃ.ΔⲆΔⲆΔᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠΔΔⵠⵠΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Garlic Book"
      }, {
        id: 38,
        ⲆⲆⵠ: Δᐃ.ᐃⲆΔⵠᐃⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃΔⲆⲆᐃⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Pumpkin Book"
      }, {
        id: 39,
        ⲆⲆⵠ: Δᐃ.ᐃⲆΔⲆᐃⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠΔᐃⵠᐃΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Christmas Tree Book"
      }, {
        id: 11,
        ⲆⲆⵠ: Δᐃ.ⵠΔᐃⲆΔⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆΔΔⲆⲆΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Diamond Book"
      }, {
        id: 9,
        ⲆⲆⵠ: Δᐃ.ΔⲆΔᐃⲆΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⲆΔᐃⲆΔⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Obscure Book"
      }, {
        id: 16,
        ⲆⲆⵠ: Δᐃ.ⵠᐃΔⲆⵠⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃΔⲆᐃᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Rolled Parchment"
      }, {
        id: 22,
        ⲆⲆⵠ: Δᐃ.ᐃⲆᐃⵠΔⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆⵠᐃⲆⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Cake Book"
      }, {
        id: 23,
        ⲆⲆⵠ: Δᐃ.ⲆⵠΔΔⲆΔΔ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠⲆᐃᐃᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Christmas Cake Book"
      }, {
        id: 30,
        ⲆⲆⵠ: Δᐃ.ᐃⵠᐃΔᐃᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆⲆⵠΔⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "MADBalgouthi",
        name: "Fish Book"
      }, {
        id: 31,
        ⲆⲆⵠ: Δᐃ.ΔᐃⵠⲆΔⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠᐃⵠⲆΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "CrysTal",
        name: "Once upon a time"
      }, {
        id: 48,
        ⲆⲆⵠ: Δᐃ.ⲆΔⵠⲆΔᐃΔ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃⲆⲆⲆᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Chrono Clock"
      }, {
        id: 49,
        ⲆⲆⵠ: Δᐃ.ᐃΔⵠⵠⵠⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ΔᐃᐃⵠΔᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Recipe Book"
      }, {
        id: 13,
        ⲆⲆⵠ: Δᐃ.ⲆΔᐃⵠΔᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⵠⵠⲆⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "eogito",
        name: "Amethyst Book"
      }, {
        id: 28,
        ⲆⲆⵠ: Δᐃ.ⵠᐃⲆΔⵠᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆΔᐃΔⵠΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "eogito",
        name: "Paint Pallet"
      }, {
        id: 29,
        ⲆⲆⵠ: Δᐃ.ᐃⲆⵠΔⵠⲆΔ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃⲆⲆΔΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "CrysTal",
        name: "Watermelon Book"
      }, {
        id: 27,
        ⲆⲆⵠ: Δᐃ.ⵠΔⵠⲆⵠⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆΔⵠⲆΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Thornbush Book"
      }, {
        id: 35,
        ⲆⲆⵠ: Δᐃ.ᐃᐃΔΔᐃᐃΔ,
        ⵠⲆⵠ: Δᐃ.ᐃΔΔΔΔᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Menu"
      }, {
        id: 36,
        ⲆⲆⵠ: Δᐃ.ⲆᐃΔᐃΔΔΔ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃᐃΔⲆⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "CrysTal",
        name: "Lover Letter"
      }, {
        id: 40,
        ⲆⲆⵠ: Δᐃ.ⵠⵠⵠᐃᐃᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃᐃΔᐃⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Fresh-Baked Cookies"
      }, {
        id: 41,
        ⲆⲆⵠ: Δᐃ.ⲆⵠⵠⲆΔⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃΔⲆᐃⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Inside, there is just a book."
      }, {
        id: 45,
        ⲆⲆⵠ: Δᐃ.ⲆΔⲆΔⲆᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆⵠⵠᐃⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Crafting Machine"
      }, {
        id: 33,
        ⲆⲆⵠ: Δᐃ.ΔᐃⲆⲆᐃⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆⵠⲆⲆΔⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Winter Book"
      }, {
        id: 34,
        ⲆⲆⵠ: Δᐃ.ⵠⲆⵠⲆᐃⲆΔ,
        ⵠⲆⵠ: Δᐃ.ΔΔⵠⵠΔᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Autumn Book"
      }, {
        id: 14,
        ⲆⲆⵠ: Δᐃ.ⲆⵠⲆᐃⵠⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ΔⵠᐃΔΔᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Reidite Book"
      }, {
        id: 12,
        ⲆⲆⵠ: Δᐃ.ⲆⲆⲆΔᐃⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ⲆΔΔΔⲆⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Winter",
        name: "Lava Book"
      }, {
        id: 26,
        ⲆⲆⵠ: Δᐃ.ΔᐃᐃⵠᐃⵠΔ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⵠΔΔᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Lava Book 2"
      }, {
        id: 19,
        ⲆⲆⵠ: Δᐃ.ᐃᐃⲆΔΔΔⵠ,
        ⵠⲆⵠ: Δᐃ.ΔᐃᐃᐃᐃΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Winter",
        name: "Ocean Mystery"
      }, {
        id: 21,
        ⲆⲆⵠ: Δᐃ.ⲆⵠⲆᐃⲆᐃΔ,
        ⵠⲆⵠ: Δᐃ.ᐃΔⵠᐃΔᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Dragon Book"
      }, {
        id: 42,
        ⲆⲆⵠ: Δᐃ.ⲆⵠⲆⲆΔΔᐃ,
        ⵠⲆⵠ: Δᐃ.ΔᐃⲆⲆⲆᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Engineer Book"
      }, {
        id: 43,
        ⲆⲆⵠ: Δᐃ.ᐃⵠⵠⲆⲆⲆⲆ,
        ⵠⲆⵠ: Δᐃ.Δⵠᐃᐃᐃⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Nightmare Book"
      }, {
        id: 44,
        ⲆⲆⵠ: Δᐃ.ⵠᐃⵠⵠΔᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃΔⲆⲆⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "aloner",
        name: "Mystery Book"
      }, {
        id: 46,
        ⲆⲆⵠ: Δᐃ.ⵠⵠⵠⵠⵠΔⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆⲆⵠⵠⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Cursed Book"
      }],
      ΔⲆⲆΔⲆ: [{
        id: 0,
        ⲆⲆⵠ: Δᐃ.ᐃⵠⵠⵠⲆⵠΔ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠⵠⵠⲆⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Nothing"
      }, {
        id: 2,
        ⲆⲆⵠ: Δᐃ.ᐃⲆⲆⲆᐃⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃΔΔΔⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Pink Cheeks"
      }, {
        id: 3,
        ⲆⲆⵠ: Δᐃ.ⲆⵠᐃᐃⲆᐃΔ,
        ⵠⲆⵠ: Δᐃ.ΔᐃⲆᐃᐃΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Heart"
      }, {
        id: 1,
        ⲆⲆⵠ: Δᐃ.ⵠⵠⵠⲆᐃΔⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⵠⵠᐃᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bandage 1"
      }, {
        id: 4,
        ⲆⲆⵠ: Δᐃ.ⵠᐃⵠⵠᐃΔⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠΔⵠᐃⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Flower 1"
      }, {
        id: 5,
        ⲆⲆⵠ: Δᐃ.ᐃΔⵠⵠⲆⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃⵠⵠⵠΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bow 1"
      }, {
        id: 6,
        ⲆⲆⵠ: Δᐃ.ΔΔΔⵠⲆᐃⲆ,
        ⵠⲆⵠ: Δᐃ.ΔⵠᐃΔᐃⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Bandage 2"
      }, {
        id: 7,
        ⲆⲆⵠ: Δᐃ.ⲆΔΔⵠⵠⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆⲆⵠⵠΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Flower 2"
      }, {
        id: 8,
        ⲆⲆⵠ: Δᐃ.ⲆⲆΔᐃΔⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ΔⲆΔΔⵠΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Bandage 3"
      }, {
        id: 36,
        ⲆⲆⵠ: Δᐃ.ᐃΔⵠⲆⲆΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠΔᐃΔⲆΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Foliage"
      }, {
        id: 59,
        ⲆⲆⵠ: Δᐃ.ⲆΔᐃΔⲆΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⲆᐃⵠᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Peaceful"
      }, {
        id: 67,
        ⲆⲆⵠ: Δᐃ.ⲆᐃᐃⲆΔⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ΔⵠⵠΔⵠΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "pizza wa",
        name: "Sparkles"
      }, {
        id: 68,
        ⲆⲆⵠ: Δᐃ.ⵠⵠΔᐃᐃΔⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆⵠⲆⵠⵠΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "pizza wa",
        name: "Luxury"
      }, {
        id: 69,
        ⲆⲆⵠ: Δᐃ.ⵠⵠⵠΔⵠⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ⲆΔΔΔⲆΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⲆⲆ,
        ᐃⲆⵠ: "pizza wa",
        name: "Snow Flakes Crown"
      }, {
        id: 17,
        ⲆⲆⵠ: Δᐃ.ⵠΔᐃΔⵠᐃΔ,
        ⵠⲆⵠ: Δᐃ.ⲆΔᐃΔⵠⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Glasses 1"
      }, {
        id: 10,
        ⲆⲆⵠ: Δᐃ.ⵠⲆⲆΔᐃᐃΔ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆΔⵠⲆⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bow 2"
      }, {
        id: 11,
        ⲆⲆⵠ: Δᐃ.ⵠⲆⲆⵠⲆⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆⲆⲆᐃⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "pizza wa",
        name: "Little Stars"
      }, {
        id: 12,
        ⲆⲆⵠ: Δᐃ.ᐃΔⵠᐃⵠⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ΔⲆΔΔᐃΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Pirate Eye Patch 1"
      }, {
        id: 44,
        ⲆⲆⵠ: Δᐃ.ᐃᐃΔⲆᐃᐃⲆ,
        ⵠⲆⵠ: Δᐃ.ΔΔΔΔⲆᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Pirate Eye Patch 2"
      }, {
        id: 23,
        ⲆⲆⵠ: Δᐃ.ᐃⲆⲆⲆⵠⵠΔ,
        ⵠⲆⵠ: Δᐃ.ΔᐃΔⲆᐃΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Clown nose"
      }, {
        id: 16,
        ⲆⲆⵠ: Δᐃ.ⵠΔᐃᐃⲆΔⵠ,
        ⵠⲆⵠ: Δᐃ.ΔᐃⵠΔⵠⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Eye Patch"
      }, {
        id: 30,
        ⲆⲆⵠ: Δᐃ.ᐃΔⵠᐃᐃⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ΔⲆⵠⲆⵠᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Flower 3"
      }, {
        id: 38,
        ⲆⲆⵠ: Δᐃ.ΔΔⲆᐃⲆᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ΔᐃⲆⵠᐃⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Winter",
        name: "False Nose"
      }, {
        id: 74,
        ⲆⲆⵠ: Δᐃ.ΔⵠΔⵠᐃΔⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠⵠⲆⲆΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Red Cloth"
      }, {
        id: 75,
        ⲆⲆⵠ: Δᐃ.ΔⵠⵠⲆΔⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆΔⲆΔᐃΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Blue Cloth"
      }, {
        id: 79,
        ⲆⲆⵠ: Δᐃ.ΔⲆΔᐃⵠᐃⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠΔΔᐃⲆᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Transparent Mask"
      }, {
        id: 89,
        ⲆⲆⵠ: Δᐃ.ᐃⵠΔⵠⵠᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃᐃⲆⲆⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Anyone want to play?",
        name: "Starve.io Anime"
      }, {
        id: 94,
        ⲆⲆⵠ: Δᐃ.ⲆⵠᐃⵠⵠΔⵠ,
        ⵠⲆⵠ: Δᐃ.ΔⵠᐃΔⲆΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Ant",
        name: "Hero Mask"
      }, {
        id: 100,
        ⲆⲆⵠ: Δᐃ.ⵠⵠΔⵠⲆΔⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠᐃᐃⲆΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "This starver is mad"
      }, {
        id: 104,
        ⲆⲆⵠ: Δᐃ.ⵠᐃⵠⲆᐃᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆΔⲆΔⲆⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Scars"
      }, {
        id: 106,
        ⲆⲆⵠ: Δᐃ.ΔⵠⵠΔⵠⵠΔ,
        ⵠⲆⵠ: Δᐃ.ΔᐃΔᐃⵠⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "In Search of Intelligence"
      }, {
        id: 109,
        ⲆⲆⵠ: Δᐃ.ⵠᐃᐃⲆⵠⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆΔⲆⵠᐃⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Reclaimed Bandage"
      }, {
        id: 111,
        ⲆⲆⵠ: Δᐃ.ⲆⵠⲆⵠⲆⲆΔ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠΔᐃΔΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Unwrap Starver for Gift"
      }, {
        id: 15,
        ⲆⲆⵠ: Δᐃ.ᐃᐃᐃⲆⵠⲆΔ,
        ⵠⲆⵠ: Δᐃ.ⵠΔᐃⲆΔⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Star Glasses"
      }, {
        id: 21,
        ⲆⲆⵠ: Δᐃ.ᐃⲆΔΔΔⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆΔⲆⲆⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Great-aunt's Glasses"
      }, {
        id: 24,
        ⲆⲆⵠ: Δᐃ.ⵠⲆⲆⲆᐃᐃΔ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆΔΔΔΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Little Starver"
      }, {
        id: 22,
        ⲆⲆⵠ: Δᐃ.Ⲇⵠⵠᐃᐃᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃⵠᐃⲆΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Little Glasses"
      }, {
        id: 13,
        ⲆⲆⵠ: Δᐃ.ᐃΔΔⲆΔⵠΔ,
        ⵠⲆⵠ: Δᐃ.ΔⲆⵠⲆᐃⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Flower Chain"
      }, {
        id: 29,
        ⲆⲆⵠ: Δᐃ.ΔᐃⲆⵠΔⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃⵠᐃⵠⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Horns"
      }, {
        id: 31,
        ⲆⲆⵠ: Δᐃ.ⵠΔᐃᐃⲆΔΔ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆᐃⵠΔⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Golden Flower"
      }, {
        id: 40,
        ⲆⲆⵠ: Δᐃ.ⵠᐃⵠΔΔᐃⲆ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆⵠⲆⲆᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Sleeping Mask"
      }, {
        id: 57,
        ⲆⲆⵠ: Δᐃ.ᐃΔⵠⲆΔⵠΔ,
        ⵠⲆⵠ: Δᐃ.ⲆΔΔⵠΔΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Fish on your head"
      }, {
        id: 58,
        ⲆⲆⵠ: Δᐃ.ᐃᐃΔⵠᐃΔⲆ,
        ⵠⲆⵠ: Δᐃ.ΔⲆⲆⵠⲆΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Rose"
      }, {
        id: 91,
        ⲆⲆⵠ: Δᐃ.ⲆⵠⵠᐃⵠⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ΔᐃΔᐃΔᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "upfiz",
        name: "Grey Scarf"
      }, {
        id: 92,
        ⲆⲆⵠ: Δᐃ.ᐃΔᐃΔΔᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆΔⲆⵠⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "upfiz",
        name: "Black Scarf"
      }, {
        id: 93,
        ⲆⲆⵠ: Δᐃ.ⲆⲆΔᐃᐃᐃⲆ,
        ⵠⲆⵠ: Δᐃ.ΔⵠⲆᐃᐃⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "upfiz",
        name: "Skull Mask"
      }, {
        id: 95,
        ⲆⲆⵠ: Δᐃ.ΔⲆⵠᐃᐃⵠΔ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃᐃⵠⵠᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Golden Monocle"
      }, {
        id: 96,
        ⲆⲆⵠ: Δᐃ.ᐃⲆᐃᐃΔᐃΔ,
        ⵠⲆⵠ: Δᐃ.ᐃΔⵠᐃⲆΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "A simple instruction"
      }, {
        id: 102,
        ⲆⲆⵠ: Δᐃ.ΔⵠⲆⲆⲆᐃΔ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠⵠᐃⲆΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Garland"
      }, {
        id: 103,
        ⲆⲆⵠ: Δᐃ.ⲆᐃΔⵠᐃΔⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆΔᐃᐃΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "The Doormat"
      }, {
        id: 108,
        ⲆⲆⵠ: Δᐃ.ΔⲆⵠⵠᐃΔⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃΔⲆΔΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Copium Tanks"
      }, {
        id: 117,
        ⲆⲆⵠ: Δᐃ.ⵠΔᐃⵠΔᐃⲆ,
        ⵠⲆⵠ: Δᐃ.ΔΔΔⵠᐃΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Eyelashes"
      }, {
        id: 118,
        ⲆⲆⵠ: Δᐃ.ΔΔⲆⲆΔΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃⲆⲆⵠΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Helmet Prototype"
      }, {
        id: 9,
        ⲆⲆⵠ: Δᐃ.ⲆᐃᐃᐃⲆⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆᐃᐃᐃⲆᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Fancy Glasses"
      }, {
        id: 25,
        ⲆⲆⵠ: Δᐃ.ᐃⵠⲆΔⵠᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆΔⵠΔⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Medecin Mask"
      }, {
        id: 14,
        ⲆⲆⵠ: Δᐃ.ΔΔᐃⵠΔΔⲆ,
        ⵠⲆⵠ: Δᐃ.ΔΔⲆΔᐃⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. Mayor"
      }, {
        id: 19,
        ⲆⲆⵠ: Δᐃ.ⵠⵠΔᐃⵠⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆΔⲆΔᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Sunglasses 2"
      }, {
        id: 28,
        ⲆⲆⵠ: Δᐃ.ⵠΔⵠΔⲆᐃΔ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠⵠⵠⲆᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "pizza wa",
        name: "Starfish"
      }, {
        id: 37,
        ⲆⲆⵠ: Δᐃ.ᐃⲆΔΔΔΔⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆΔⵠᐃΔⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Berry"
      }, {
        id: 39,
        ⲆⲆⵠ: Δᐃ.ⲆΔΔⵠⵠⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠᐃⵠⲆⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Flake"
      }, {
        id: 43,
        ⲆⲆⵠ: Δᐃ.ⵠⵠᐃⲆⲆⲆΔ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆⵠΔᐃᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Leaf "
      }, {
        id: 61,
        ⲆⲆⵠ: Δᐃ.ⵠⲆⵠⲆᐃⵠΔ,
        ⵠⲆⵠ: Δᐃ.ⵠΔΔᐃⵠⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "A sword in your head"
      }, {
        id: 62,
        ⲆⲆⵠ: Δᐃ.ΔΔΔⲆⵠᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ΔⵠⲆΔΔⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Winter Scarf"
      }, {
        id: 64,
        ⲆⲆⵠ: Δᐃ.ⵠᐃᐃΔⵠⵠΔ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆΔΔⲆΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Winter Scarf 2"
      }, {
        id: 66,
        ⲆⲆⵠ: Δᐃ.ⵠΔⲆⵠᐃⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃΔⲆΔΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Winter Scarf 3"
      }, {
        id: 70,
        ⲆⲆⵠ: Δᐃ.ΔⲆΔΔΔΔⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠΔΔᐃᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mask with animal tracks"
      }, {
        id: 71,
        ⲆⲆⵠ: Δᐃ.ΔΔΔΔᐃᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆΔΔⲆΔⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Spring Mask"
      }, {
        id: 72,
        ⲆⲆⵠ: Δᐃ.ᐃⵠⲆΔᐃⲆΔ,
        ⵠⲆⵠ: Δᐃ.ᐃᐃⲆΔⲆΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Pink Mask"
      }, {
        id: 73,
        ⲆⲆⵠ: Δᐃ.ΔᐃᐃⵠᐃⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆⵠⲆΔⵠⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Blue Mask"
      }, {
        id: 76,
        ⲆⲆⵠ: Δᐃ.ᐃᐃᐃⵠⲆⲆᐃ,
        ⵠⲆⵠ: Δᐃ.ΔΔⲆΔᐃⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Military Mask"
      }, {
        id: 77,
        ⲆⲆⵠ: Δᐃ.ΔⲆᐃⵠⵠΔΔ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠΔΔΔΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Orange Mask"
      }, {
        id: 78,
        ⲆⲆⵠ: Δᐃ.ⲆᐃΔⵠⵠᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃΔⵠⵠᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "White and Red Points Mask"
      }, {
        id: 80,
        ⲆⲆⵠ: Δᐃ.ⵠΔᐃⲆⵠΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⲆⵠⵠⵠⵠⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Stick out your tongue Mask"
      }, {
        id: 81,
        ⲆⲆⵠ: Δᐃ.ⵠⲆⲆᐃᐃⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆⵠⵠⲆⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Two Teeth Mask"
      }, {
        id: 82,
        ⲆⲆⵠ: Δᐃ.ⲆΔⲆⲆⵠⵠΔ,
        ⵠⲆⵠ: Δᐃ.ᐃΔⲆᐃΔᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Make-up Mask"
      }, {
        id: 83,
        ⲆⲆⵠ: Δᐃ.ᐃᐃⲆᐃΔⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ΔᐃᐃΔΔᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Sad Mask"
      }, {
        id: 84,
        ⲆⲆⵠ: Δᐃ.ⲆⲆⲆᐃⵠⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ΔᐃᐃⲆΔᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Happy Mask"
      }, {
        id: 90,
        ⲆⲆⵠ: Δᐃ.ᐃΔⲆΔⲆᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃᐃᐃΔΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "aloner",
        name: "Blood"
      }, {
        id: 101,
        ⲆⲆⵠ: Δᐃ.ⲆΔⵠⵠΔⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ᐃΔᐃΔΔᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Axed Plans"
      }, {
        id: 105,
        ⲆⲆⵠ: Δᐃ.ΔΔΔᐃΔΔⵠ,
        ⵠⲆⵠ: Δᐃ.ΔΔⵠΔⲆⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Saddle"
      }, {
        id: 113,
        ⲆⲆⵠ: Δᐃ.ⲆΔΔⲆⵠⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ΔⲆⲆΔᐃⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "I see"
      }, {
        id: 114,
        ⲆⲆⵠ: Δᐃ.ᐃᐃⲆⲆⵠᐃΔ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆⵠⵠⲆΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "I have no body and I must dress"
      }, {
        id: 115,
        ⲆⲆⵠ: Δᐃ.ΔⲆΔᐃᐃᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃΔᐃⲆΔⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔⵠⵠⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Cursed Crown"
      }, {
        id: 27,
        ⲆⲆⵠ: Δᐃ.ⲆΔΔⲆⲆⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠΔᐃΔΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Clown Face"
      }, {
        id: 20,
        ⲆⲆⵠ: Δᐃ.ⵠᐃⵠⲆⵠⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠΔᐃᐃⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Sunglasses 3"
      }, {
        id: 32,
        ⲆⲆⵠ: Δᐃ.ⲆᐃⵠⵠⲆⵠΔ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃΔᐃⵠᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "eogito",
        name: "Engineer's Glasses"
      }, {
        id: 33,
        ⲆⲆⵠ: Δᐃ.ⲆΔⵠⵠΔⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ΔΔⵠⲆⲆⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "eogito",
        name: "Engineer's Monocle"
      }, {
        id: 34,
        ⲆⲆⵠ: Δᐃ.ⲆᐃᐃⲆᐃⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃⲆⲆᐃⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mauve's butt"
      }, {
        id: 41,
        ⲆⲆⵠ: Δᐃ.ΔⵠᐃΔΔΔΔ,
        ⵠⲆⵠ: Δᐃ.ΔᐃⵠⲆᐃΔᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "eogito",
        name: "Lapa Head"
      }, {
        id: 42,
        ⲆⲆⵠ: Δᐃ.ⲆⵠΔΔᐃⵠⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆⵠΔⵠⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "eogito",
        name: "Lapa Head "
      }, {
        id: 85,
        ⲆⲆⵠ: Δᐃ.ⲆⵠⵠᐃΔⲆΔ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠⵠᐃⲆⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mask and Glasses"
      }, {
        id: 110,
        ⲆⲆⵠ: Δᐃ.Ⲇⵠⵠⵠⵠⵠᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠΔΔⲆⲆΔ,
        ΔⲆᐃ: Δⵠᐃ.ⵠᐃΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Spectrum Pet"
      }, {
        id: 60,
        ⲆⲆⵠ: Δᐃ.ᐃⵠⵠⵠⵠΔΔ,
        ⵠⲆⵠ: Δᐃ.ⲆⵠΔⲆⵠᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Jason"
      }, {
        id: 26,
        ⲆⲆⵠ: Δᐃ.ᐃⵠⵠⵠΔᐃΔ,
        ⵠⲆⵠ: Δᐃ.ΔΔⵠⲆᐃᐃⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Devil Horns"
      }, {
        id: 18,
        ⲆⲆⵠ: Δᐃ.ⵠⵠⵠⲆΔΔⲆ,
        ⵠⲆⵠ: Δᐃ.ΔⵠΔΔⲆⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Big Boss"
      }, {
        id: 35,
        ⲆⲆⵠ: Δᐃ.ΔΔᐃⲆΔⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ᐃΔΔΔⲆⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Baby Kraken"
      }, {
        id: 63,
        ⲆⲆⵠ: Δᐃ.ᐃΔⵠΔΔΔⲆ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆᐃⵠⲆᐃᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Deer Antlers"
      }, {
        id: 65,
        ⲆⲆⵠ: Δᐃ.ΔⵠᐃⵠᐃⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ⵠᐃᐃⵠⵠⲆᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Baby Dragon on your head"
      }, {
        id: 86,
        ⲆⲆⵠ: Δᐃ.ΔΔΔⲆΔⲆΔ,
        ⵠⲆⵠ: Δᐃ.ΔᐃⲆᐃᐃΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Gaz Mask and Glasses"
      }, {
        id: 87,
        ⲆⲆⵠ: Δᐃ.ᐃᐃᐃᐃΔⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆⲆⵠΔᐃⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Pink Gaz Mask and Glasses"
      }, {
        id: 88,
        ⲆⲆⵠ: Δᐃ.ᐃΔⵠⲆᐃⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆⲆᐃΔΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Engineer Glasses"
      }, {
        id: 97,
        ⲆⲆⵠ: Δᐃ.ⲆⵠᐃⲆΔᐃᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⵠⲆⲆⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Jarred Horns"
      }, {
        id: 98,
        ⲆⲆⵠ: Δᐃ.ᐃⲆᐃΔᐃⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⵠⲆⲆⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Curved Horns"
      }, {
        id: 99,
        ⲆⲆⵠ: Δᐃ.ⲆᐃⵠⲆⵠΔⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆΔⲆᐃⵠΔⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Evil Goat Horns"
      }, {
        id: 107,
        ⲆⲆⵠ: Δᐃ.ⵠΔΔⲆⵠΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠⲆⵠⵠⵠⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Decorative Earmuffs"
      }, {
        id: 112,
        ⲆⲆⵠ: Δᐃ.ⵠⵠΔΔⵠΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠⵠⵠⲆⵠᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Dragon Pet"
      }, {
        id: 116,
        ⲆⲆⵠ: Δᐃ.ᐃⲆⵠⵠᐃⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ⵠΔⲆᐃΔⲆⲆ,
        ΔⲆᐃ: Δⵠᐃ.ΔᐃΔⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Blanket"
      }, {
        id: 45,
        ⲆⲆⵠ: Δᐃ.ⵠΔⲆⲆⲆᐃⲆ,
        ⵠⲆⵠ: Δᐃ.Ⲇⵠᐃᐃᐃⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃⵠᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "More than Level 5",
        level: 5
      }, {
        id: 46,
        ⲆⲆⵠ: Δᐃ.ⵠᐃⵠΔⲆⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ΔⲆⵠΔΔᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃⵠᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "More than Level 10",
        level: 10
      }, {
        id: 47,
        ⲆⲆⵠ: Δᐃ.ⲆⲆⵠⵠⵠΔΔ,
        ⵠⲆⵠ: Δᐃ.ⲆΔⲆⲆᐃΔⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃⵠᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "More than Level 15",
        level: 15
      }, {
        id: 48,
        ⲆⲆⵠ: Δᐃ.ΔⲆΔΔᐃᐃⵠ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆⲆⲆⵠⵠⲆ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃⵠᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "More than Level 20",
        level: 20
      }, {
        id: 49,
        ⲆⲆⵠ: Δᐃ.ᐃᐃΔⵠΔⵠΔ,
        ⵠⲆⵠ: Δᐃ.ⲆⲆᐃΔᐃᐃΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃⵠᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "More than Level 25",
        level: 25
      }, {
        id: 50,
        ⲆⲆⵠ: Δᐃ.ΔΔⵠⵠⵠⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ΔᐃΔⲆᐃⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃⵠᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "More than Level 30",
        level: 30
      }, {
        id: 51,
        ⲆⲆⵠ: Δᐃ.ΔΔΔΔⵠΔⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃΔᐃΔΔΔΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃⵠᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "More than Level 35",
        level: 35
      }, {
        id: 52,
        ⲆⲆⵠ: Δᐃ.ᐃΔⲆΔΔⲆⲆ,
        ⵠⲆⵠ: Δᐃ.ⲆⵠⲆΔΔⵠᐃ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃⵠᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "More than Level 40",
        level: 40
      }, {
        id: 53,
        ⲆⲆⵠ: Δᐃ.ᐃⲆⵠⲆΔⵠⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃⲆⲆᐃΔⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃⵠᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "More than Level 45",
        level: 45
      }, {
        id: 54,
        ⲆⲆⵠ: Δᐃ.ⵠⲆⲆᐃΔⲆⵠ,
        ⵠⲆⵠ: Δᐃ.ᐃⵠΔⲆᐃⵠⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃⵠᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "More than Level 50",
        level: 50
      }, {
        id: 55,
        ⲆⲆⵠ: Δᐃ.ᐃΔᐃⲆⵠⵠΔ,
        ⵠⲆⵠ: Δᐃ.ΔΔΔΔⲆⲆⵠ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃⵠᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "More than Level 55",
        level: 55
      }, {
        id: 56,
        ⲆⲆⵠ: Δᐃ.ΔⲆⲆⲆⲆΔᐃ,
        ⵠⲆⵠ: Δᐃ.ⵠΔᐃⲆΔⵠΔ,
        ΔⲆᐃ: Δⵠᐃ.ᐃⵠᐃⵠᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "More than Level 60",
        level: 60
      }]
    };
    Df.ΔⵠⲆᐃΔⲆⲆ = ᐃⵠᐃⵠⲆΔΔ(ⲆⲆⲆⵠ.ⵠΔⵠⵠᐃ, 21);
    Df.ΔⵠⲆⵠᐃⲆΔ = ᐃⵠᐃⵠⲆΔΔ(ⲆⲆⲆⵠ.ⵠΔⵠⵠᐃ, 20);
    ⲆⲆ[255] = [];
    ⲆⲆ[7] = [];
    ⲆⲆ[250] = [];
    ⲆⲆ[28] = [];
    ⲆⲆ[29] = [];
    ⲆⲆ[796] = [];
    for (var a = 0; ⲆⲆⲆⵠ.ⵠΔⵠⵠᐃ.length > a; a++) {
      ⲆⲆ[255][a] = [ⲆⲆⲆⵠ.ⵠΔⵠⵠᐃ[a].ⲆⲆⵠ, ⲆⲆⲆⵠ.ⵠΔⵠⵠᐃ[a].ⵠⲆⵠ];
      ⲆⲆ[7][a] = [ⲆⲆⲆⵠ.ⵠΔⵠⵠᐃ[a].ᐃⲆⲆᐃ, ⲆⲆⲆⵠ.ⵠΔⵠⵠᐃ[a].ΔⲆⲆⲆ];
    }
    for (a = 0; a < ⲆⲆⲆⵠ.ⲆᐃⵠⲆᐃ.length; a++) {
      ⲆⲆ[28][a] = [ⲆⲆⲆⵠ.ⲆᐃⵠⲆᐃ[a].ⲆⲆⵠ, ⲆⲆⲆⵠ.ⲆᐃⵠⲆᐃ[a].ⵠⲆⵠ];
    }
    for (a = 0; ⲆⲆⲆⵠ.ΔΔⵠΔⵠ.length > a; a++) {
      ⲆⲆ[250][a] = [ⲆⲆⲆⵠ.ΔΔⵠΔⵠ[a].ⲆⲆⵠ, ⲆⲆⲆⵠ.ΔΔⵠΔⵠ[a].ⵠⲆⵠ];
    }
    for (a = 0; a < ⲆⲆⲆⵠ.Ⲇⵠᐃⵠ.length; a++) {
      ⲆⲆ[29][a] = [ⲆⲆⲆⵠ.Ⲇⵠᐃⵠ[a].ⲆⲆⵠ, ⲆⲆⲆⵠ.Ⲇⵠᐃⵠ[a].ⵠⲆⵠ];
    }
    for (a = 0; a < ⲆⲆⲆⵠ.ΔⲆⲆΔⲆ.length; a++) {
      ⲆⲆ[796][a] = [ⲆⲆⲆⵠ.ΔⲆⲆΔⲆ[a].ⲆⲆⵠ, ⲆⲆⲆⵠ.ΔⲆⲆΔⲆ[a].ⵠⲆⵠ];
    }
  };
  const fd = 9;
  function zd(a, b, c, d, f) {
    a.beginPath();
    a.lineCap = "round";
    a.arc(b, c, d, 0, f * (Math.PI * 2));
  }
  function yd(b, c, d, f, g, h) {
    if (f < h * 2) {
      h = f / 2;
    }
    if (h * 2 > g) {
      h = g / 2;
    }
    if (h < 0) {
      h = 0;
    }
    b.beginPath();
    b.moveTo(c + h, d);
    b.arcTo(c + f, d, c + f, d + g, h);
    b.arcTo(c + f, d + g, c, d + g, h);
    b.arcTo(c, d + g, c, d, h);
    b.arcTo(c, d, c + f, d, h);
    b.closePath();
  }
  function wd(b, c, d, f) {
    var g = Math.PI * 2 / c;
    b.beginPath();
    var i = [{
      x: d,
      y: 0
    }];
    var a = [];
    for (var j = 1; j < c; j++) {
      i.push({
        x: Math.sin(j * g) * d,
        y: Math.cos(j * g) * d
      });
      var k = i.length;
      a.push(ΔⵠΔᐃ.ⵠⲆΔΔᐃᐃⲆ(i[k - 2], i[k - 1]));
    }
    a.push(ΔⵠΔᐃ.ⵠⲆΔΔᐃᐃⲆ(i[i.length - 1], i[0]));
    var m = a[a.length - 1];
    b.moveTo(m.x, m.y);
    for (j = 0; c > j; j++) {
      b.arcTo(i[j].x, i[j].y, a[j].x, a[j].y, f);
    }
    b.closePath();
  }
  function Pd(a, b, c, d) {
    a.beginPath();
    a.arc(b, c, d, 0, Math.PI * 2);
  }
  const kd = 0;
  function Ad(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var f = Math.sqrt(b.width * b.width + b.height * b.height);
    d2 = f / 2;
    c.width = f;
    c.height = f;
    d.translate(d2, d2);
    d.rotate(a);
    d.drawImage(b, -b.width / 2, -b.height / 2);
    return c;
  }
  function xd(b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    var g = Math.floor(b * 28);
    var h = Math.floor(b * 20);
    f.font = h + "px Baloo Paaji";
    var a = b * 8;
    var i = f.measureText(c).width + a * 2;
    d.width = i;
    d.height = g;
    yd(f, 0, 0, i, g, b * 10);
    f.globalAlpha = 0.5;
    Td(f, "#000");
    f.globalAlpha = 1;
    f.textBaseline = "middle";
    f.font = h + "px Baloo Paaji";
    f.beginPath();
    f.fillStyle = "#FFF";
    f.fillText(c, a, g / 2);
    return d;
  }
  const Jd = 5;
  function Md(c, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 120;
    var m = c * 110;
    var a = k / 2;
    var n = m / 2;
    var o = c * 20;
    var h = c * 112;
    var l = c * 82;
    var g = h / 2;
    var p = l / 2;
    var b = c * 4;
    i.width = k;
    i.height = m;
    j.globalAlpha = 1;
    j.translate(a, n);
    yd(j, -g, -p, h, l, o);
    Td(j, f, f, b);
    return i;
  }
  const Bd = 13;
  function Dd(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 22;
    d.height = a * 22;
    f.globalAlpha = 0.4;
    Pd(f, a * 11, a * 11, a * 10);
    Td(f, c[0]);
    f.globalAlpha = 0.7;
    Pd(f, a * 11, a * 11, a * 7);
    Td(f, c[0]);
    f.globalAlpha = 1;
    Pd(f, a * 11, a * 11, a * 4);
    Td(f, c[0]);
    return d;
  }
  function Id(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 264;
    d.height = a * 246;
    f.translate(0, a * 10);
    f.globalAlpha = b ? 0.5 : 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 75, a * 54);
    f.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
    f.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    f.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    f.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    f.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    f.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    f.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    f.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
    f.closePath();
    Td(f, c[0]);
    f.translate(0, a * -10);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 75, a * 54);
    f.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
    f.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    f.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    f.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    f.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    f.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    f.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    f.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
    f.closePath();
    Td(f, c[1], c[2], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 121, a * 102);
    f.bezierCurveTo(a * 111, a * 80, a * 110, a * 66, a * 108, a * 51);
    f.bezierCurveTo(a * 119, a * 65, a * 129, a * 85, a * 135, a * 99);
    f.bezierCurveTo(a * 142, a * 67, a * 146, a * 60, a * 152, a * 50);
    f.bezierCurveTo(a * 154, a * 71, a * 152, a * 85, a * 149, a * 104);
    f.bezierCurveTo(a * 166, a * 88, a * 175, a * 83, a * 188, a * 78);
    f.bezierCurveTo(a * 179, a * 91, a * 170, a * 103, a * 160, a * 112);
    f.bezierCurveTo(a * 186, a * 107, a * 191, a * 107, a * 204, a * 108);
    f.bezierCurveTo(a * 195, a * 114, a * 179, a * 120, a * 163, a * 123);
    f.bezierCurveTo(a * 183, a * 130, a * 186, a * 135, a * 192, a * 140);
    f.bezierCurveTo(a * 179, a * 141, a * 164, a * 139, a * 153, a * 135);
    f.bezierCurveTo(a * 158, a * 145, a * 163, a * 159, a * 165, a * 177);
    f.bezierCurveTo(a * 154, a * 166, a * 145, a * 153, a * 138, a * 139);
    f.bezierCurveTo(a * 133, a * 155, a * 125, a * 170, a * 117, a * 182);
    f.bezierCurveTo(a * 116, a * 160, a * 119, a * 151, a * 124, a * 138);
    f.bezierCurveTo(a * 107, a * 150, a * 95, a * 156, a * 82, a * 159);
    f.bezierCurveTo(a * 94, a * 140, a * 101, a * 136, a * 113, a * 128);
    f.bezierCurveTo(a * 78, a * 123, a * 75, a * 121, a * 67, a * 118);
    f.bezierCurveTo(a * 85, a * 112, a * 94, a * 112, a * 111, a * 113);
    f.bezierCurveTo(a * 89, a * 97, a * 85, a * 93, a * 78, a * 82);
    f.bezierCurveTo(a * 92, a * 85, a * 101, a * 90, a * 121, a * 102);
    f.closePath();
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 128, a * 103);
    f.bezierCurveTo(a * 111, a * 112, a * 117, a * 136, a * 140, a * 130);
    f.bezierCurveTo(a * 151, a * 126, a * 156, a * 115, a * 155, a * 107);
    f.bezierCurveTo(a * 155, a * 96, a * 154, a * 94, a * 148, a * 94);
    f.bezierCurveTo(a * 141, a * 94, a * 146, a * 104, a * 136, a * 104);
    f.closePath();
    Td(f, c[3], c[4], a * 4);
    return d;
  }
  function Ed(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    f.save();
    f.translate(a * 183, a * 107);
    yd(f, a * -8, a * -70.5, a * 16, a * 141, a * 1);
    f.restore();
    Td(f, c[0]);
    f.save();
    f.translate(a * 69.5, a * 110);
    yd(f, a * -8.5, a * -71, a * 17, a * 143, a * 1);
    f.restore();
    Td(f, c[0]);
    f.save();
    f.translate(a * 123.5, a * 181);
    yd(f, a * -84.5, a * -26, a * 169, a * 52, a * 5);
    f.restore();
    Td(f, c[2], c[1], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 41, a * 95);
    f.bezierCurveTo(a * 105, a * 96, a * 113, a * 99, a * 134, a * 102);
    f.bezierCurveTo(a * 147, a * 106, a * 173, a * 100, a * 207, a * 105);
    f.bezierCurveTo(a * 210, a * 105, a * 207, a * 140, a * 207, a * 154);
    f.bezierCurveTo(a * 123.5, a * 151.5, a * 123.5, a * 151.5, a * 40, a * 149);
    f.bezierCurveTo(a * 37, a * 145, a * 39, a * 95, a * 41, a * 96);
    f.closePath();
    Td(f, c[2], c[1], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 68, a * 75);
    f.bezierCurveTo(a * 54, a * 72.5, a * 54, a * 72.5, a * 40, a * 70);
    f.bezierCurveTo(a * 38, a * 46, a * 40, a * 46, a * 53, a * 46);
    f.bezierCurveTo(a * 201, a * 41, a * 201, a * 41, a * 201, a * 42);
    f.bezierCurveTo(a * 211, a * 40, a * 208, a * 53, a * 208, a * 72);
    f.bezierCurveTo(a * 209, a * 91, a * 210, a * 96, a * 194, a * 94);
    f.bezierCurveTo(a * 119, a * 97, a * 119, a * 97, a * 44, a * 100);
    f.bezierCurveTo(a * 39, a * 99, a * 40, a * 96, a * 40, a * 80);
    f.bezierCurveTo(a * 54, a * 77.5, a * 54, a * 77.5, a * 68, a * 75);
    f.closePath();
    Td(f, c[3], c[1], a * 6);
    return d;
  }
  function Sd(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    f.globalAlpha = 0.5;
    f.translate(0, a * 10);
    f.save();
    f.translate(a * 96.49996948242188, a * 66.79510498046875);
    f.rotate(0);
    yd(f, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    f.restore();
    Td(f, c[0], c[0], a * 4);
    f.globalAlpha = 1;
    f.translate(0, a * -10);
    f.save();
    f.translate(a * 96.49996948242188, a * 66.79510498046875);
    f.rotate(0);
    yd(f, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    f.restore();
    Td(f, c[1], c[2], a * 4);
    f.translate(a * 2, 0);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 119, a * 28);
    f.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
    f.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    f.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    f.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    f.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    f.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    f.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    f.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    f.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    f.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    f.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    f.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
    f.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
    f.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
    f.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
    f.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
    f.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    f.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    f.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    f.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
    f.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    f.closePath();
    Td(f, c[3], c[4], a * 4);
    return d;
  }
  function Qd(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 70;
    d.height = a * 70;
    f.globalAlpha = 0.5;
    Pd(f, a * 26, a * 26, a * 9);
    Td(f, c[0]);
    Pd(f, a * 56, a * 36, a * 9);
    Td(f, c[1]);
    Pd(f, a * 40, a * 50, a * 9);
    Td(f, c[2]);
    f.globalAlpha = 1;
    Pd(f, a * 26, a * 26, a * 5);
    Td(f, c[0]);
    Pd(f, a * 56, a * 36, a * 5);
    Td(f, c[1]);
    Pd(f, a * 40, a * 50, a * 5);
    Td(f, c[2]);
    return d;
  }
  function _d(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    f.save();
    f.translate(a * 69.5, a * 145);
    yd(f, a * -8.5, a * -63, a * 17, a * 127, a * 1);
    f.restore();
    Td(f, c[0]);
    f.save();
    f.translate(a * 183, a * 145);
    yd(f, a * -8, a * -63, a * 16, a * 126, a * 1);
    f.restore();
    Td(f, c[0]);
    f.save();
    f.translate(a * 123.5, a * 62.5);
    f.rotate(6.28);
    yd(f, a * -84.5, a * -25.5, a * 169, a * 51, a * 5);
    f.restore();
    Td(f, c[2], c[1], a * 6);
    f.save();
    f.translate(a * 123.5, a * 118);
    f.rotate(6.24);
    yd(f, a * -85.5, a * -24, a * 169, a * 48, a * 5);
    f.restore();
    Td(f, c[3], c[1], a * 6);
    f.save();
    f.translate(a * 122, a * 177.5);
    f.rotate(6.32);
    yd(f, a * -84, a * -23.5, a * 169, a * 47, a * 5);
    f.restore();
    Td(f, c[2], c[1], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 37, a * 157);
    f.bezierCurveTo(a * 49, a * 160, a * 49, a * 160, a * 61, a * 163);
    f.bezierCurveTo(a * 49.5, a * 165.5, a * 49.5, a * 165.5, a * 38, a * 168);
    f.closePath();
    Td(f, c[1]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 205, a * 175);
    f.bezierCurveTo(a * 192.5, a * 180, a * 192.5, a * 180, a * 180, a * 185);
    f.bezierCurveTo(a * 193, a * 188, a * 193, a * 188, a * 206, a * 191);
    f.closePath();
    Td(f, c[1]);
    return d;
  }
  function Fd(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    f.globalAlpha = 0.5;
    f.translate(0, a * 10);
    f.save();
    f.translate(a * 97.49996948242188, a * 95.12844848632812);
    yd(f, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    f.restore();
    Td(f, c[0], c[0], a * 4);
    f.globalAlpha = 1;
    f.translate(0, a * -10);
    f.save();
    f.translate(a * 97.49996948242188, a * 95.12844848632812);
    yd(f, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    f.restore();
    Td(f, c[1], c[2], a * 4);
    f.globalCompositeOperation = "destination-out";
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 26.999969482421875, a * 50.850677490234375);
    f.bezierCurveTo(a * 46.499969482421875, a * 64.85067749023438, a * 46.499969482421875, a * 64.85067749023438, a * 65.99996948242188, a * 78.85067749023438);
    f.bezierCurveTo(a * 80.99996948242188, a * 87.85067749023438, a * 105.99996948242188, a * 82.85067749023438, a * 114.99996948242188, a * 80.85067749023438);
    f.bezierCurveTo(a * 130.99996948242188, a * 69.85067749023438, a * 152.99996948242188, a * 70.85067749023438, a * 166.99996948242188, a * 67.85067749023438);
    f.bezierCurveTo(a * 156.99996948242188, a * 52.850677490234375, a * 156.99996948242188, a * 52.850677490234375, a * 146.99996948242188, a * 37.850677490234375);
    f.bezierCurveTo(a * 101.49996948242188, a * 37.350677490234375, a * 101.49996948242188, a * 37.350677490234375, a * 55.999969482421875, a * 36.850677490234375);
    f.closePath();
    Td(f, c[2], c[3], a * 4);
    f.globalCompositeOperation = "source-over";
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 40.999969482421875, a * 59.850677490234375);
    f.bezierCurveTo(a * 41.999969482421875, a * 50.850677490234375, a * 47.999969482421875, a * 47.850677490234375, a * 56.999969482421875, a * 49.850677490234375);
    f.bezierCurveTo(a * 65.99996948242188, a * 41.850677490234375, a * 76.99996948242188, a * 42.850677490234375, a * 90.99996948242188, a * 47.850677490234375);
    f.bezierCurveTo(a * 94.99996948242188, a * 42.850677490234375, a * 104.99996948242188, a * 42.850677490234375, a * 114.99996948242188, a * 47.850677490234375);
    f.bezierCurveTo(a * 131.99996948242188, a * 42.850677490234375, a * 142.99996948242188, a * 48.850677490234375, a * 145.99996948242188, a * 56.850677490234375);
    f.bezierCurveTo(a * 160.99996948242188, a * 63.850677490234375, a * 154.99996948242188, a * 69.85067749023438, a * 155.99996948242188, a * 70.85067749023438);
    f.bezierCurveTo(a * 141.99996948242188, a * 71.85067749023438, a * 141.99996948242188, a * 71.85067749023438, a * 127.99996948242188, a * 72.85067749023438);
    f.bezierCurveTo(a * 110.99996948242188, a * 83.85067749023438, a * 107.99996948242188, a * 82.85067749023438, a * 90.99996948242188, a * 85.85067749023438);
    f.bezierCurveTo(a * 70.99996948242188, a * 83.85067749023438, a * 64.99996948242188, a * 79.85067749023438, a * 53.999969482421875, a * 70.85067749023438);
    f.closePath();
    Td(f, c[3], c[4], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 33.999969482421875, a * 65.85067749023438);
    f.bezierCurveTo(a * 36.999969482421875, a * 59.850677490234375, a * 34.999969482421875, a * 60.850677490234375, a * 39.999969482421875, a * 59.850677490234375);
    f.bezierCurveTo(a * 47.999969482421875, a * 61.850677490234375, a * 62.999969482421875, a * 76.85067749023438, a * 74.99996948242188, a * 79.85067749023438);
    f.bezierCurveTo(a * 93.99996948242188, a * 85.85067749023438, a * 111.99996948242188, a * 83.85067749023438, a * 124.99996948242188, a * 70.85067749023438);
    f.bezierCurveTo(a * 129.99996948242188, a * 67.85067749023438, a * 145.99996948242188, a * 65.85067749023438, a * 159.99996948242188, a * 67.85067749023438);
    f.bezierCurveTo(a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 75.85067749023438);
    f.bezierCurveTo(a * 146.99996948242188, a * 72.85067749023438, a * 144.99996948242188, a * 75.85067749023438, a * 143.99996948242188, a * 82.85067749023438);
    f.bezierCurveTo(a * 144.99996948242188, a * 86.85067749023438, a * 140.99996948242188, a * 90.85067749023438, a * 137.99996948242188, a * 86.85067749023438);
    f.bezierCurveTo(a * 139.99996948242188, a * 72.85067749023438, a * 135.99996948242188, a * 72.85067749023438, a * 133.99996948242188, a * 82.85067749023438);
    f.bezierCurveTo(a * 127.99996948242188, a * 88.85067749023438, a * 124.99996948242188, a * 70.85067749023438, a * 116.99996948242188, a * 86.85067749023438);
    f.bezierCurveTo(a * 110.99996948242188, a * 91.85067749023438, a * 96.99996948242188, a * 81.85067749023438, a * 89.99996948242188, a * 90.85067749023438);
    f.bezierCurveTo(a * 85.99996948242188, a * 92.85067749023438, a * 81.99996948242188, a * 95.85067749023438, a * 76.99996948242188, a * 86.85067749023438);
    f.bezierCurveTo(a * 67.99996948242188, a * 93.85067749023438, a * 67.99996948242188, a * 91.85067749023438, a * 60.999969482421875, a * 79.85067749023438);
    f.bezierCurveTo(a * 53.999969482421875, a * 71.85067749023438, a * 52.999969482421875, a * 72.85067749023438, a * 46.999969482421875, a * 77.85067749023438);
    f.bezierCurveTo(a * 41.999969482421875, a * 78.85067749023438, a * 42.999969482421875, a * 69.85067749023438, a * 33.999969482421875, a * 65.85067749023438);
    f.closePath();
    Td(f, c[5], c[6], a * 4);
    Pd(f, a * 68, a * 111.29513549804688, a * 15);
    Td(f, c[7], c[8], a * 4);
    Pd(f, a * 123, a * 111.29510498046875, a * 15);
    Td(f, c[7], c[8], a * 4);
    Pd(f, a * 63, a * 106, a * 5);
    Td(f, c[9]);
    Pd(f, a * 118, a * 106, a * 5);
    Td(f, c[9]);
    return d;
  }
  function Rd(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    f.save();
    f.translate(a * 182, a * 120);
    yd(f, a * -8, a * -67, a * 16, a * 134, a * 1);
    f.restore();
    Td(f, c[0]);
    f.save();
    f.translate(a * 68.5, a * 127.5);
    yd(f, a * -8.5, a * -70.5, a * 17, a * 141, a * 1);
    f.restore();
    Td(f, c[0]);
    f.save();
    f.translate(a * 123.5, a * 68);
    yd(f, a * -82.5, a * -24, a * 165, a * 48, a * 4);
    f.restore();
    Td(f, c[2], c[1], a * 6);
    f.save();
    f.translate(a * 123, a * 179.5);
    yd(f, a * -83, a * -24.5, a * 166, a * 49, a * 4);
    f.restore();
    Td(f, c[2], c[1], a * 6);
    f.save();
    f.translate(a * 123.5, a * 123.5);
    f.rotate(6.24);
    yd(f, a * -82.5, a * -24.5, a * 165, a * 49, a * 4);
    f.restore();
    Td(f, c[3], c[1], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 204, a * 112);
    f.bezierCurveTo(a * 149, a * 121.5, a * 96, a * 130, a * 94, a * 131);
    f.bezierCurveTo(a * 149.5, a * 127.5, a * 149.5, a * 127.5, a * 205, a * 124);
    f.closePath();
    Td(f, c[1]);
    return d;
  }
  const Gd = 6;
  function jd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 185;
    c.height = a * 240;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 137);
    d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    d.closePath();
    Td(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 53, a * 181);
    d.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * 11, a * 136);
    d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    d.closePath();
    Td(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 63, a * 208);
    d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    d.closePath();
    Td(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 170);
    d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    d.closePath();
    Td(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 39, a * 140);
    d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    d.closePath();
    Td(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 95);
    d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
    d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
    d.bezierCurveTo(a * 92, a * 5, a * 83, a * 16, a * 78, a * 29);
    d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
    d.closePath();
    Td(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 86);
    d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
    d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * 16);
    d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
    d.closePath();
    Td(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 117);
    d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
    d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
    d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
    d.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
    d.closePath();
    Td(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 175);
    d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
    d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
    d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
    d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
    d.closePath();
    Td(d, b[0]);
    return c;
  }
  function Ld(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 191;
    c.height = a * 153;
    d.save();
    d.translate(a * 96.49996948242188, a * 66.79510498046875);
    yd(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    d.restore();
    Td(d, b[0], b[0], a * 4);
    d.translate(a * 2, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 119, a * 28);
    d.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
    d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    d.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    d.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
    d.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
    d.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
    d.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
    d.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
    d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    d.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
    d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    d.closePath();
    Td(d, b[0], b[0], a * 4);
    d.save();
    d.translate(a * 97.49996948242188, a * 95.12844848632812);
    yd(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    d.restore();
    Td(d, b[0], b[0], a * 4);
    return c;
  }
  function Wd(b, c, d, f) {
    var g = document.createElement("canvas");
    var h = g.getContext("2d");
    g.width = b * 185;
    g.height = b * 240;
    h.globalAlpha = 0.5;
    h.translate(0, b * 10);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 44, b * 137);
    h.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
    h.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
    h.closePath();
    Td(h, d[0]);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 53, b * 181);
    h.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
    h.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
    h.closePath();
    Td(h, d[0]);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 63, b * 208);
    h.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
    h.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
    h.closePath();
    Td(h, d[0]);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 130, b * 170);
    h.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
    h.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
    h.closePath();
    Td(h, d[0]);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 39, b * 140);
    h.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
    h.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
    h.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
    h.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
    h.closePath();
    Td(h, d[0]);
    h.globalAlpha = 1;
    h.translate(0, b * -10);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 44, b * 137);
    h.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
    h.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
    h.closePath();
    Td(h, d[1], d[2], b * 4);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 53, b * 181);
    h.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
    h.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
    h.closePath();
    Td(h, d[1], d[2], b * 4);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 63, b * 208);
    h.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
    h.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
    h.closePath();
    Td(h, d[1], d[2], b * 4);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 130, b * 170);
    h.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
    h.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
    h.closePath();
    Td(h, d[1], d[2], b * 4);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 39, b * 140);
    h.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
    h.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
    h.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
    h.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
    h.closePath();
    Td(h, d[1], d[2], b * 4);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 59, b * 99);
    h.bezierCurveTo(b * 71, b * 68, b * 81, b * 68, b * 94, b * 67);
    h.bezierCurveTo(b * 105, b * 66, b * 119, b * 75, b * 123, b * 96);
    h.bezierCurveTo(b * 104, b * 91, b * 101, b * 94, b * 94, b * 97);
    h.bezierCurveTo(b * 76, b * 92, b * 73, b * 93, b * 60, b * 99);
    h.closePath();
    Td(h, d[3], d[2], b * 4);
    if (f === 0) {
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 47, b * 149);
      h.bezierCurveTo(b * 43, b * 140, b * 48, b * 130, b * 59, b * 127);
      h.bezierCurveTo(b * 77, b * 126, b * 90, b * 131, b * 131, b * 127);
      h.bezierCurveTo(b * 143, b * 130, b * 144, b * 143, b * 132, b * 154);
      h.bezierCurveTo(b * 90, b * 152, b * 90, b * 152, b * 48, b * 150);
      h.closePath();
      Td(h, d[1]);
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 40, b * 139);
      h.bezierCurveTo(b * 48, b * 113, b * 76, b * 119, b * 91, b * 126);
      h.bezierCurveTo(b * 117, b * 113, b * 135, b * 117, b * 144, b * 134);
      h.bezierCurveTo(b * 144, b * 138, b * 144, b * 138, b * 144, b * 142);
      h.bezierCurveTo(b * 128, b * 124, b * 108, b * 124, b * 91, b * 136);
      h.bezierCurveTo(b * 59, b * 124, b * 50, b * 137, b * 42, b * 148);
      h.closePath();
      Td(h, d[3], d[2], b * 4);
    } else {
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 41, b * 139);
      h.bezierCurveTo(b * 53, b * 117, b * 69, b * 118, b * 92, b * 127);
      h.bezierCurveTo(b * 124, b * 111, b * 136, b * 121, b * 143, b * 136);
      h.bezierCurveTo(b * 142, b * 144, b * 142, b * 144, b * 141, b * 152);
      h.bezierCurveTo(b * 128, b * 131, b * 113, b * 138, b * 92, b * 145);
      h.bezierCurveTo(b * 57, b * 133, b * 57, b * 147, b * 44, b * 154);
      h.closePath();
      Td(h, d[3], d[2], b * 4);
    }
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 90, b * 95);
    h.bezierCurveTo(b * 99, b * 82, b * 98, b * 58, b * 99, b * 40);
    h.bezierCurveTo(b * 90, b * 38, b * 89, b * 34, b * 92, b * 17);
    h.bezierCurveTo(b * 92, b * 5, b * 83, b * 16, b * 78, b * 29);
    h.bezierCurveTo(b * 72, b * 59, b * 87, b * 81, b * 89, b * 87);
    h.closePath();
    Td(h, d[1], d[2], b * 4);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 90, b * 86);
    h.bezierCurveTo(b * 95, b * 74, b * 95, b * 62, b * 95, b * 43);
    h.bezierCurveTo(b * 84, b * 37, b * 86, b * 34, b * 89, b * 16);
    h.bezierCurveTo(b * 75, b * 29, b * 80, b * 58, b * 90, b * 85);
    h.closePath();
    Td(h, d[1], d[3], b * 4);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 92, b * 117);
    h.bezierCurveTo(b * 98, b * 87, b * 93, b * 78, b * 85, b * 76);
    h.bezierCurveTo(b * 85.5, b * 79.5, b * 85.5, b * 79.5, b * 86, b * 83);
    h.bezierCurveTo(b * 84, b * 85.5, b * 84, b * 85.5, b * 82, b * 88);
    h.bezierCurveTo(b * 90, b * 93, b * 89, b * 100, b * 92, b * 117);
    h.closePath();
    Td(h, d[1], d[3], b * 4);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 92, b * 175);
    h.bezierCurveTo(b * 95, b * 135, b * 98, b * 125, b * 109, b * 121);
    h.bezierCurveTo(b * 106, b * 114, b * 104, b * 114, b * 102, b * 113);
    h.bezierCurveTo(b * 103, b * 106, b * 104, b * 103, b * 107, b * 96);
    h.bezierCurveTo(b * 74, b * 108, b * 86, b * 157, b * 92, b * 174);
    h.closePath();
    Td(h, d[1], d[3], b * 4);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 48, b * 169);
    h.bezierCurveTo(b * 42, b * 187, b * 50, b * 193, b * 59, b * 198);
    h.closePath();
    Td(h, w, d[2], b * 5);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 136, b * 171);
    h.bezierCurveTo(b * 139, b * 186, b * 138, b * 191, b * 124, b * 199);
    h.closePath();
    Td(h, undefined, d[2], b * 4);
    Pd(h, b * 63, b * 180, b * 15.231546211727817);
    Td(h, d[4]);
    Pd(h, b * 121, b * 181, b * 15.652475842498529);
    Td(h, d[4]);
    Pd(h, b * 58, b * 175, b * 5.656854249492381);
    Td(h, d[2]);
    Pd(h, b * 116, b * 175, b * 5.656854249492381);
    Td(h, d[2]);
    return g;
  }
  function Od(a) {
    return e.String.fromCharCode(a);
  }
  function Nd(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var f = b * 200;
    var g = b * 200;
    c.width = f;
    c.height = g;
    var h = cc(0.35, false, ["#0e3022", "#0b8052", "#077b49"]);
    d.drawImage(h, 10, 10);
    h = Rc(0.9, false, ["#3d2a6e", "#8255b5"]);
    d.drawImage(h, 21, 20);
    h = Rc(0.9, false, ["#3d2a6e", "#8255b5"]);
    d.drawImage(h, 38, 28);
    h = Rc(0.9, false, ["#3d2a6e", "#8255b5"]);
    d.drawImage(h, 15, 37);
    h = Rc(0.9, fh, ["#3d2a6e", "#8255b5"]);
    d.drawImage(h, 32, 45);
    return c;
  }
  function qd(b, c, d) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    var i = b * 40;
    var a = b * 40;
    f.width = i;
    f.height = a;
    var j = i * b / 2;
    var k = a * b / 2;
    var m = b * 15;
    g.save();
    g.translate(j, k);
    g.globalAlpha = 1;
    Pd(g, 0, 0, m);
    Td(g, d[0]);
    m = b * 5;
    j = b * 2;
    k = b * 1;
    g.translate(j, k);
    g.globalAlpha = 1;
    Pd(g, 0, 0, m);
    Td(g, d[1]);
    g.restore();
    return f;
  }
  const Hd = 2;
  function Ud(c, f, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var m = c * 32;
    var a = c * 32;
    var n = m / 2;
    var o = a / 2;
    j.width = m;
    j.height = a;
    var h = c * 5;
    var l = c * 28;
    var g = h / 2;
    var p = l / 2;
    k.translate(c * 0, c * 0);
    k.translate(n, o);
    if (i == 1) {
      Pd(k, 0, 0, c * 10);
      Td(k, f[2], f[2], c * 3);
      for (var b = 0; b < 4; b++) {
        yd(k, -g, -p, h, l, c * 2);
        k.rotate(Math.PI / 4);
        Td(k, f[2], f[2], c * 4);
      }
    }
    Pd(k, 0, 0, c * 10);
    Td(k, f[0], f[1], c * 1.5);
    for (b = 0; b < 4; b++) {
      yd(k, -g, -p, h, l, c * 2);
      k.rotate(Math.PI / 4);
      Td(k, f[0], f[1], c * 1.5);
    }
    Pd(k, 0, 0, c * 10);
    Td(k, f[0]);
    Pd(k, 0, 0, c * 4);
    Td(k, f[2], f[1], c * 1.5);
    k.globalCompositeOperation = "destination-out";
    Pd(k, 0, 0, c * 4);
    Td(k, f[0], f[1], c * 2);
    k.globalCompositeOperation = "source-over";
    Pd(k, 0, 0, c * 4);
    Td(k, undefined, f[1], c * 2);
    return j;
  }
  function Yd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 188;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    Td(d, b[0], b[0], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    Td(d, b[0], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
    d.closePath();
    Td(d, b[0], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    d.closePath();
    Td(d, b[0], b[0], a * 2);
    d.globalAlpha = 1;
    d.translate(0, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    Td(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    Td(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    Td(d, undefined, b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    Td(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    Td(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
    d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
    d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
    d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
    d.closePath();
    Td(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
    d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
    d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
    d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
    d.closePath();
    Td(d, b[3]);
    Pd(d, a * 77, a * 107, a * 6);
    Td(d, b[2]);
    Pd(d, a * 110, a * 107, a * 6);
    Td(d, b[2]);
    Pd(d, a * 75, a * 105, a * 3);
    Td(d, b[4]);
    Pd(d, a * 108, a * 105, a * 3);
    Td(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
    d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
    d.closePath();
    Td(d, b[1]);
    return c;
  }
  ;
  function Kd(c, d) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 100;
    var k = c * 100;
    var a = j / 2;
    var m = k / 2;
    f.width = j;
    f.height = k;
    var n = c * 5;
    var h = c * 28;
    var l = n / 2;
    var g = h / 2;
    i.translate(a, m);
    for (var o = 0; o < 4; o++) {
      yd(i, -l, -g, n, h, c * 2);
      i.rotate(Math.PI / 4);
      Td(i, d);
    }
    i.arc(0, 0, c * 10, 0, Math.PI * 2);
    Td(i, d);
    i.globalCompositeOperation = "destination-out";
    Pd(i, 0, 0, c * 4);
    i.fill();
    return f;
  }
  function Xd(b, c, d) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    var h = b * 55;
    var a = b * 55;
    var i = b * 8;
    f.width = h;
    f.height = a;
    g.translate(b * -65, b * -55 + i);
    g.globalAlpha = 1;
    g.beginPath();
    g.moveTo(b * 95, b * 60);
    g.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
    g.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
    g.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
    g.closePath();
    Td(g, d[0], d[1], 3);
    g.globalAlpha = 1;
    g.beginPath();
    g.moveTo(b * 91, b * 70);
    g.bezierCurveTo(b * 91, b * 75, b * 100, b * 76, b * 100, b * 73);
    g.bezierCurveTo(b * 100, b * 69, b * 89, b * 65, b * 91, b * 70);
    g.closePath();
    Td(g, d[2], d[3], 3);
    return f;
  }
  function Zd(f, j, i) {
    var k = document.createElement("canvas");
    var n = k.getContext("2d");
    var o = (d = f * 125) / 2;
    var a = (t = f * 95) / 2;
    var p = f * 10;
    var q = f * 8;
    var h = f * 112;
    var l = f * 82;
    var g = h / 2;
    var r = l / 2;
    var b = f * 4;
    k.width = d;
    k.height = t;
    n.translate(o - f * 4, a + f * 4);
    n.globalAlpha = j ? 0.5 : 1;
    yd(n, -g, -r, h, l, p);
    Td(n, i[0]);
    n.globalAlpha = 1;
    n.translate(0, -q);
    yd(n, -g, -r, h, l, p);
    Td(n, i[1], i[2], b);
    var d = f * 55;
    var t = f * 45;
    p = 5;
    n.translate(f * -40, f * -30);
    yd(n, 0, 0, d, t, p);
    Td(n, i[3]);
    var u = Kd(f * 0.7, i[3]);
    n.drawImage(u, f * 45, f * -25);
    u = Kd(f * 0.7, i[3]);
    n.drawImage(u, f * 45, f * 15);
    u = Kd(f * 1.2, i[3]);
    n.drawImage(u, f * 28, f * -30);
    d = f * 15;
    t = f * 70;
    p = f * 5;
    n.translate(f * 78, f * -5);
    yd(n, 0, 0, d, t, p);
    Td(n, i[4]);
    d = f * 9;
    t = f * 50;
    p = f * 3;
    n.translate(f * -20, f * 20);
    n.rotate(Math.PI / 5);
    n.globalAlpha = 0.6;
    yd(n, 0, 0, d, t, p);
    Td(n, i[5]);
    n.translate(f * -20, f * 29);
    n.rotate(Math.PI / 5);
    n.globalAlpha = 0.6;
    n.beginPath();
    n.lineJoin = "round";
    n.moveTo(0, 0);
    n.lineTo(0, f * 30);
    n.lineTo(f * 30, f * 30);
    n.closePath();
    Td(n, null, i[5], f * 8);
    return k;
  }
  function $d(c, d) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 85;
    var k = c * 115;
    var a = c * 6;
    f.width = j;
    f.height = k;
    i.translate(c * -130, c * -60 + a);
    i.globalAlpha = 0.5;
    i.beginPath();
    i.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    i.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    i.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    i.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    i.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    i.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    i.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    i.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    i.closePath();
    Td(i, d[0]);
    i.translate(0, -a);
    i.globalAlpha = 1;
    i.beginPath();
    i.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    i.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    i.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    i.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    i.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    i.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    i.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    i.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    i.closePath();
    Td(i, d[1], d[2], 4);
    var m = c * 155;
    var n = c * 133;
    var h = c * 10;
    var l = c * 3;
    var g = m + c * -3;
    var o = n + c * -5;
    i.save();
    i.translate(m, n);
    i.globalAlpha = 1;
    Pd(i, 0, 0, h);
    Td(i, d[3]);
    i.restore();
    i.save();
    i.translate(g, o);
    i.globalAlpha = 1;
    Pd(i, 0, 0, l);
    Td(i, d[4]);
    i.restore();
    i.save();
    i.translate(m + c * 27, n);
    i.globalAlpha = 1;
    Pd(i, 0, 0, h);
    Td(i, d[3]);
    i.restore();
    i.save();
    i.translate(c * 27 + g, o);
    i.globalAlpha = 1;
    Pd(i, 0, 0, l);
    Td(i, d[4]);
    return f;
  }
  const Kt = 7;
  const Lt = 3;
  function Mt(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 238;
    c.height = a * 230;
    d.translate(a * -93, a * -110 + a * 5);
    d.globalAlpha = 0.3;
    Pd(d, a * 213.5, a * 256.75, a * 75);
    Td(d, b[5]);
    Pd(d, a * 213.5, a * 175.75, a * 25);
    Td(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.translate(0, -5);
    d.globalAlpha = 1;
    Pd(d, a * 213.5, a * 256.75, a * 75);
    Td(d, b[3]);
    Pd(d, a * 213.5, a * 175.75, a * 25);
    Td(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    Pd(d, a * 213.5, a * 256.75, a * 70);
    Td(d, b[0]);
    Pd(d, a * 213.5, a * 175.75, a * 20);
    Td(d, b[0]);
    Pd(d, a * 222, a * 166, a * 5);
    d.fillStyle = b[2];
    d.fill();
    Pd(d, a * 205, a * 166, a * 5);
    d.fillStyle = b[2];
    d.fill();
    Pd(d, a * 206.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    Pd(d, a * 223.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    d.save();
    d.translate(a * 213.5, a * 293.75);
    d.rotate(0.76);
    yd(d, a * -22, a * -21, a * 44, a * 42, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    d.save();
    d.translate(a * 212.5, a * 258.25);
    d.rotate(0.8);
    yd(d, a * -15, a * -14.5, a * 30, a * 29, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    return c;
  }
  const Nt = 12;
  function Ot(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    f.save();
    f.translate(a * 202.5, a * 147.5);
    yd(f, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
    f.restore();
    Td(f, b[0], b[1], a * 12);
    f.save();
    f.translate(a * 202.5, a * 190.5);
    yd(f, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
    f.restore();
    Td(f, b[2], b[1], a * 12);
    f.save();
    f.save();
    f.translate(a * 202.5, a * 233.5);
    yd(f, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
    f.restore();
    Td(f, b[3], b[1], a * 12);
    f.save();
    f.translate(a * 202.5, a * 275);
    yd(f, a * 96.5, a * -21, a * -193, a * 42, a * 0);
    f.restore();
    Td(f, b[0], b[1], a * 12);
    f.save();
    f.translate(a * 201, a * 212);
    f.rotate(8.64);
    yd(f, a * -116, a * -22, a * 232, a * 44, a * 10);
    f.restore();
    Td(f, b[3], b[1], a * 12);
    f.save();
    f.translate(a * 203.5, a * 121.5);
    yd(f, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
    f.restore();
    Td(f, b[3], b[1], a * 12);
    f.save();
    f.translate(a * 203.5, a * 299);
    yd(f, a * -115.5, a * -20, a * 231, a * 40, a * 10);
    f.restore();
    Td(f, b[3], b[1], a * 12);
    f.save();
    f.translate(a * 298.5, a * 210);
    yd(f, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    f.restore();
    Td(f, b[3], b[1], a * 12);
    f.save();
    f.translate(a * 108.5, a * 210);
    yd(f, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    f.restore();
    Td(f, b[3], b[1], a * 12);
    f.save();
    f.translate(a * 204, a * 121.5);
    yd(f, a * -92, a * -9.5, a * 184, a * 19, a * 10);
    f.restore();
    Td(f, b[3], b[3], a * 10);
    f.save();
    f.translate(a * 197, a * 299);
    yd(f, a * 85, a * -9, a * -170, a * 18, a * 10);
    f.restore();
    Td(f, b[3], b[3], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 94, a * 317);
    f.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
    f.closePath();
    Td(f, Ra, b[1], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 279, a * 142);
    f.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
    f.closePath();
    Td(f, kn, b[1], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 93, a * 106);
    f.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
    f.closePath();
    Td(f, undefined, b[1], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 281, a * 282);
    f.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
    f.closePath();
    Td(f, undefined, b[1], a * 12);
    if (c == 0) {
      f.scale(2, 2);
      f.translate(a * -7, a * 55);
      f.rotate(-0.5);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 60, a * 47);
      f.bezierCurveTo(a * 81, a * 46, a * 85, a * 47, a * 83, a * 63);
      f.bezierCurveTo(a * 83, a * 72, a * 83, a * 75, a * 72, a * 73);
      f.bezierCurveTo(a * 68, a * 80, a * 69, a * 82, a * 66, a * 73);
      f.bezierCurveTo(a * 62, a * 81, a * 61, a * 82, a * 59, a * 73);
      f.bezierCurveTo(a * 54, a * 81, a * 55, a * 81, a * 52, a * 74);
      f.bezierCurveTo(a * 38, a * 76, a * 41, a * 74, a * 40, a * 66);
      f.bezierCurveTo(a * 38, a * 45, a * 39, a * 49, a * 59, a * 47);
      f.closePath();
      Td(f, b[4], b[4], a * 5);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 68, a * 54);
      f.bezierCurveTo(a * 75, a * 54, a * 77, a * 62, a * 71, a * 64);
      f.bezierCurveTo(a * 62, a * 65, a * 63, a * 54, a * 68, a * 54);
      f.closePath();
      Td(f, b[3]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 50, a * 55);
      f.bezierCurveTo(a * 57, a * 55, a * 58, a * 65, a * 52, a * 65);
      f.bezierCurveTo(a * 44, a * 66, a * 44, a * 54, a * 50, a * 55);
      f.closePath();
      Td(f, b[3]);
    } else if (c == 1) {
      f.scale(0.6, 0.6);
      f.translate(a * 185, a * 165);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 108, a * 56);
      f.bezierCurveTo(a * 136, a * 58, a * 203, a * 69, a * 234, a * 75);
      f.bezierCurveTo(a * 246, a * 77, a * 247, a * 78, a * 245, a * 90);
      f.bezierCurveTo(a * 238, a * 143, a * 228, a * 197, a * 214, a * 259);
      f.bezierCurveTo(a * 212, a * 267, a * 209, a * 270, a * 189, a * 268);
      f.bezierCurveTo(a * 142, a * 264, a * 106, a * 260, a * 75, a * 253);
      f.bezierCurveTo(a * 60, a * 250, a * 64, a * 250, a * 66, a * 221);
      f.bezierCurveTo(a * 71, a * 168, a * 87, a * 95, a * 98, a * 67);
      f.bezierCurveTo(a * 101, a * 57, a * 103, a * 56, a * 106, a * 56);
      f.closePath();
      Td(f, b[4], b[4], a * 20);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 112, a * 72);
      f.bezierCurveTo(a * 132, a * 73, a * 227, a * 85, a * 226, a * 91);
      f.bezierCurveTo(a * 231, a * 89, a * 217, a * 196, a * 200, a * 250);
      f.bezierCurveTo(a * 196, a * 254, a * 175, a * 249, a * 166, a * 249);
      f.bezierCurveTo(a * 91, a * 241, a * 82, a * 236, a * 83, a * 232);
      f.bezierCurveTo(a * 90, a * 144, a * 108, a * 71, a * 111, a * 72);
      f.closePath();
      Td(f, undefined, b[0], a * 13);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 132, a * 117);
      f.bezierCurveTo(a * 171, a * 86, a * 191, a * 101, a * 188, a * 134);
      f.bezierCurveTo(a * 185, a * 154, a * 170, a * 158, a * 153, a * 158);
      f.bezierCurveTo(a * 143, a * 172, a * 146, a * 180, a * 147, a * 193);
      Td(f, undefined, b[0], a * 20);
      Pd(f, a * 142, a * 221, a * 16.1245154965971);
      Td(f, b[0]);
    }
    return d;
  }
  const Pt = 0;
  const Qt = 17;
  function Rt(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    f.globalAlpha = 0.5;
    f.translate(0, a * 8);
    f.translate(a * -7, a * -20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 55, a * 68);
    f.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    f.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    f.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    f.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    f.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(0, a * -8);
    f.translate(a * 7, a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 24, a * 28);
    f.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    f.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    f.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    f.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    f.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    f.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    f.closePath();
    Td(f, c[1], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 30, a * 41);
    f.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    f.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    f.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
    f.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
    f.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
    f.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    f.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 24, a * 28);
    f.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    f.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    f.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    f.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    f.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    f.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    f.closePath();
    Td(f, Al, c[2], a * 4);
    Pd(f, a * 18, a * 38, a * 14.866068747318506);
    Td(f, c[4], c[5], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 39, a * 30);
    f.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    f.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    Td(f, c[1], c[2], a * 4);
    f.translate(a * -7, a * -20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 27, a * 74);
    f.bezierCurveTo(a * 38, a * 77.5, a * 38, a * 77.5, a * 49, a * 81);
    f.bezierCurveTo(a * 54.5, a * 75.5, a * 54.5, a * 75.5, a * 60, a * 70);
    f.bezierCurveTo(a * 64, a * 72, a * 64, a * 72, a * 68, a * 74);
    f.bezierCurveTo(a * 80.5, a * 67.5, a * 80.5, a * 67.5, a * 93, a * 61);
    f.bezierCurveTo(a * 104.5, a * 68, a * 104.5, a * 68, a * 116, a * 75);
    f.bezierCurveTo(a * 120.5, a * 72.5, a * 120.5, a * 72.5, a * 125, a * 70);
    f.bezierCurveTo(a * 129, a * 75, a * 129, a * 75, a * 133, a * 80);
    f.bezierCurveTo(a * 145.5, a * 76.5, a * 145.5, a * 76.5, a * 158, a * 73);
    f.bezierCurveTo(a * 158, a * 87, a * 158, a * 93, a * 155, a * 95);
    f.bezierCurveTo(a * 152.5, a * 96, a * 152.5, a * 96, a * 150, a * 97);
    f.bezierCurveTo(a * 121, a * 85, a * 108, a * 86, a * 93, a * 85);
    f.bezierCurveTo(a * 64, a * 85, a * 52, a * 95, a * 38, a * 99);
    f.bezierCurveTo(a * 36, a * 98.5, a * 36, a * 98.5, a * 34, a * 98);
    f.bezierCurveTo(a * 25, a * 98, a * 27, a * 91, a * 27, a * 76);
    f.closePath();
    Td(f, c[6], c[7], a * 6);
    return d;
  }
  function St(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    f.translate(a * 5, a * 5);
    f.globalAlpha = b ? 0.5 : 1;
    f.save();
    f.translate(a * 86.25, a * 84.953125);
    f.rotate(0.32);
    wd(f, 7, a * 42.15447781671598, a * 10);
    f.restore();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -5, a * -5);
    f.save();
    f.translate(a * 86.25, a * 84.953125);
    f.rotate(0.32);
    wd(f, 7, a * 42.15447781671598, a * 10);
    f.restore();
    Td(f, c[1], c[2], a * 4);
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 5, a * 5);
    f.save();
    f.translate(a * 86.25, a * 84.953125);
    f.rotate(0.28);
    wd(f, 7, a * 30.463092423455635, a * 10);
    f.restore();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -5, a * -5);
    f.save();
    f.translate(a * 86.25, a * 84.953125);
    f.rotate(0.28);
    wd(f, 7, a * 30.463092423455635, a * 10);
    f.restore();
    Td(f, c[3], c[4], a * 4);
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 5, a * 5);
    Pd(f, a * 86.25, a * 84.953125, a * 18.867962264113206);
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -5, a * -5);
    Pd(f, a * 86.25, a * 84.953125, a * 18.867962264113206);
    Td(f, c[5], c[6], a * 4);
    return d;
  }
  function Tt(c, f, i, j) {
    var k = document.createElement("canvas");
    var m = k.getContext("2d");
    var a = c * 210;
    var n = c * 205;
    var o = c * 30;
    var h = c * 20;
    var l = c * 200;
    var g = c * 180;
    var p = l / 2;
    var b = g / 2;
    k.width = a;
    k.height = n;
    k.width = c * 419;
    k.height = c * 412;
    if (j == 1) {
      m.save();
      m.translate(c * 10, c * 0);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 117.99996948242188, c * 216.40621948242188);
      m.bezierCurveTo(c * 86.99996948242188, c * 221.40621948242188, c * 74.99996948242188, c * 217.40621948242188, c * 60.999969482421875, c * 205.40621948242188);
      Td(m, cq, f[4], c * 3);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 114.99996948242188, c * 227.40621948242188);
      m.bezierCurveTo(c * 90.99996948242188, c * 233.40621948242188, c * 66.99996948242188, c * 228.40621948242188, c * 43.999969482421875, c * 225.40621948242188);
      Td(m, undefined, f[4], c * 3);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 110.99996948242188, c * 236.40621948242188);
      m.bezierCurveTo(c * 94.99996948242188, c * 244.40621948242188, c * 79.99996948242188, c * 249.40621948242188, c * 60.999969482421875, c * 249.40621948242188);
      Td(m, Al, f[4], c * 3);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 111.99996948242188, c * 206.29513549804688);
      m.bezierCurveTo(c * 91.99996948242188, c * 206.29513549804688, c * 87.99996948242188, c * 201.29513549804688, c * 79.99996948242188, c * 192.29513549804688);
      Td(m, Ra, f[4], c * 3);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 109.99996948242188, c * 249.18402099609375);
      m.bezierCurveTo(c * 97.99996948242188, c * 263.18402099609375, c * 85.99996948242188, c * 271.18402099609375, c * 65.99996948242188, c * 277.18402099609375);
      Td(m, Ao, f[4], c * 3);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 105.99996948242188, c * 192.18402099609375);
      m.bezierCurveTo(c * 99.49996948242188, c * 197.68402099609375, c * 99.49996948242188, c * 197.68402099609375, c * 92.99996948242188, c * 203.18402099609375);
      m.bezierCurveTo(c * 95.99996948242188, c * 213.18402099609375, c * 95.99996948242188, c * 215.18402099609375, c * 89.99996948242188, c * 219.18402099609375);
      m.bezierCurveTo(c * 91.99996948242188, c * 223.18402099609375, c * 91.99996948242188, c * 226.18402099609375, c * 87.99996948242188, c * 230.18402099609375);
      m.bezierCurveTo(c * 89.99996948242188, c * 234.18402099609375, c * 91.99996948242188, c * 237.18402099609375, c * 90.99996948242188, c * 244.18402099609375);
      m.bezierCurveTo(c * 96.99996948242188, c * 252.18402099609375, c * 96.99996948242188, c * 256.18402099609375, c * 95.99996948242188, c * 262.18402099609375);
      m.bezierCurveTo(c * 106.49996948242188, c * 264.18402099609375, c * 106.49996948242188, c * 264.18402099609375, c * 116.99996948242188, c * 266.18402099609375);
      Td(m, undefined, f[4], c * 3);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 104.99996948242188, c * 183.29513549804688);
      m.bezierCurveTo(c * 99.99996948242188, c * 193.29513549804688, c * 93.99996948242188, c * 195.29513549804688, c * 89.99996948242188, c * 201.29513549804688);
      m.bezierCurveTo(c * 86.99996948242188, c * 212.29513549804688, c * 85.99996948242188, c * 214.29513549804688, c * 81.99996948242188, c * 215.29513549804688);
      m.bezierCurveTo(c * 83.99996948242188, c * 223.29513549804688, c * 83.99996948242188, c * 227.29513549804688, c * 79.99996948242188, c * 230.29513549804688);
      m.bezierCurveTo(c * 83.99996948242188, c * 235.29513549804688, c * 84.99996948242188, c * 240.29513549804688, c * 79.99996948242188, c * 246.29513549804688);
      m.bezierCurveTo(c * 86.99996948242188, c * 251.29513549804688, c * 91.99996948242188, c * 256.2951354980469, c * 89.99996948242188, c * 266.2951354980469);
      m.bezierCurveTo(c * 102.99996948242188, c * 269.2951354980469, c * 102.99996948242188, c * 269.2951354980469, c * 115.99996948242188, c * 272.2951354980469);
      Td(m, undefined, f[4], c * 3);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 107.99996948242188, c * 177.85067749023438);
      m.bezierCurveTo(c * 95.99996948242188, c * 187.35067749023438, c * 95.99996948242188, c * 187.35067749023438, c * 83.99996948242188, c * 196.85067749023438);
      m.bezierCurveTo(c * 82.99996948242188, c * 203.85067749023438, c * 80.99996948242188, c * 209.85067749023438, c * 72.99996948242188, c * 210.85067749023438);
      m.bezierCurveTo(c * 73.99996948242188, c * 220.85067749023438, c * 73.99996948242188, c * 221.85067749023438, c * 66.99996948242188, c * 227.85067749023438);
      m.bezierCurveTo(c * 71.99996948242188, c * 235.85067749023438, c * 73.99996948242188, c * 239.85067749023438, c * 71.99996948242188, c * 247.85067749023438);
      m.bezierCurveTo(c * 80.99996948242188, c * 257.8506774902344, c * 81.99996948242188, c * 263.8506774902344, c * 77.99996948242188, c * 271.8506774902344);
      m.bezierCurveTo(c * 95.49996948242188, c * 272.8506774902344, c * 95.49996948242188, c * 272.8506774902344, c * 112.99996948242188, c * 273.8506774902344);
      Td(m, Wn, f[4], c * 3);
      m.restore();
    } else if (j == 2) {
      m.save();
      m.translate(c * 130, c * 35);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 170.99996948242188, c * 133.85067749023438);
      m.bezierCurveTo(c * 195.99996948242188, c * 129.85067749023438, c * 196.99996948242188, c * 111.85067749023438, c * 200.99996948242188, c * 88.85067749023438);
      Td(m, Cr, f[4], c * 3);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 169.99996948242188, c * 143.85067749023438);
      m.bezierCurveTo(c * 189.99996948242188, c * 145.85067749023438, c * 207.99996948242188, c * 126.85067749023438, c * 222.99996948242188, c * 100.85067749023438);
      Td(m, w, f[4], c * 3);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 170.99996948242188, c * 157.85067749023438);
      m.bezierCurveTo(c * 193.99996948242188, c * 160.85067749023438, c * 210.99996948242188, c * 151.85067749023438, c * 232.99996948242188, c * 139.85067749023438);
      Td(m, undefined, f[4], c * 3);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 169.99996948242188, c * 168.85067749023438);
      m.bezierCurveTo(c * 192.99996948242188, c * 175.85067749023438, c * 203.99996948242188, c * 177.85067749023438, c * 245.99996948242188, c * 168.85067749023438);
      Td(m, ur, f[4], c * 3);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 167.99996948242188, c * 168.85067749023438);
      m.bezierCurveTo(c * 183.99996948242188, c * 189.85067749023438, c * 191.99996948242188, c * 193.85067749023438, c * 220.99996948242188, c * 196.85067749023438);
      Td(m, Ma, f[4], c * 3);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 176.99996948242188, c * 117.85067749023438);
      m.bezierCurveTo(c * 181.99996948242188, c * 120.85067749023438, c * 181.99996948242188, c * 120.85067749023438, c * 186.99996948242188, c * 123.85067749023438);
      m.bezierCurveTo(c * 183.99996948242188, c * 137.85067749023438, c * 185.99996948242188, c * 136.85067749023438, c * 190.99996948242188, c * 136.85067749023438);
      m.bezierCurveTo(c * 186.99996948242188, c * 147.85067749023438, c * 189.99996948242188, c * 152.85067749023438, c * 193.99996948242188, c * 155.85067749023438);
      m.bezierCurveTo(c * 187.99996948242188, c * 165.85067749023438, c * 190.99996948242188, c * 169.85067749023438, c * 190.99996948242188, c * 172.85067749023438);
      m.bezierCurveTo(c * 186.99996948242188, c * 183.85067749023438, c * 186.99996948242188, c * 185.85067749023438, c * 189.99996948242188, c * 188.85067749023438);
      m.bezierCurveTo(c * 182.49996948242188, c * 195.35067749023438, c * 182.49996948242188, c * 195.35067749023438, c * 174.99996948242188, c * 201.85067749023438);
      Td(m, xh, f[4], c * 3);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 176.99996948242188, c * 112.18402099609375);
      m.bezierCurveTo(c * 183.99996948242188, c * 119.18402099609375, c * 186.99996948242188, c * 117.18402099609375, c * 192.99996948242188, c * 116.18402099609375);
      m.bezierCurveTo(c * 191.99996948242188, c * 126.18402099609375, c * 193.99996948242188, c * 130.18402099609375, c * 199.99996948242188, c * 130.18402099609375);
      m.bezierCurveTo(c * 194.99996948242188, c * 145.18402099609375, c * 197.99996948242188, c * 147.18402099609375, c * 201.99996948242188, c * 153.18402099609375);
      m.bezierCurveTo(c * 196.99996948242188, c * 164.18402099609375, c * 197.99996948242188, c * 169.18402099609375, c * 201.99996948242188, c * 174.18402099609375);
      m.bezierCurveTo(c * 194.99996948242188, c * 184.18402099609375, c * 196.99996948242188, c * 187.18402099609375, c * 200.99996948242188, c * 193.18402099609375);
      m.bezierCurveTo(c * 185.99996948242188, c * 195.18402099609375, c * 181.99996948242188, c * 201.18402099609375, c * 174.99996948242188, c * 210.18402099609375);
      Td(m, Ra, f[4], c * 3);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 176.99996948242188, c * 101.29513549804688);
      m.bezierCurveTo(c * 181.99996948242188, c * 108.29513549804688, c * 189.99996948242188, c * 110.29513549804688, c * 195.99996948242188, c * 107.29513549804688);
      m.bezierCurveTo(c * 197.99996948242188, c * 121.29513549804688, c * 200.99996948242188, c * 122.29513549804688, c * 206.99996948242188, c * 122.29513549804688);
      m.bezierCurveTo(c * 201.99996948242188, c * 138.29513549804688, c * 204.99996948242188, c * 142.29513549804688, c * 211.99996948242188, c * 148.29513549804688);
      m.bezierCurveTo(c * 201.99996948242188, c * 156.29513549804688, c * 205.99996948242188, c * 167.29513549804688, c * 213.99996948242188, c * 173.29513549804688);
      m.bezierCurveTo(c * 204.99996948242188, c * 181.29513549804688, c * 204.99996948242188, c * 187.29513549804688, c * 205.99996948242188, c * 193.29513549804688);
      m.bezierCurveTo(c * 190.99996948242188, c * 198.29513549804688, c * 181.99996948242188, c * 205.29513549804688, c * 174.99996948242188, c * 214.29513549804688);
      Td(m, Wn, f[4], c * 3);
      m.restore();
    }
    m.translate(k.width / 2, k.height / 2);
    if (!j) {
      m.globalAlpha = 0.5;
      yd(m, -p, -b, l, g + h, o);
      Td(m, f[0]);
      if (i) {
        m.rotate(Math.PI);
      }
      m.globalAlpha = 1;
      yd(m, -p, -b, l, g, o);
      Td(m, f[1], f[2], 4);
      m.globalAlpha = 1;
      yd(m, c * 35 - p, c * 20 - b, l - c * 50, g - c * 50, o - c * 10);
      Td(m, f[3]);
    }
    if (j == 3) {
      m.translate(-k.width / 2, -k.height / 2);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 121, c * 190);
      m.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      m.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      m.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      m.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      m.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      m.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      m.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      m.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      m.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      m.closePath();
      Td(m, f[4]);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 219, c * 144);
      m.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      m.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      m.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      m.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      m.closePath();
      Td(m, f[5]);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 123, c * 214);
      m.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      m.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      m.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      m.closePath();
      Td(m, f[5]);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 257, c * 199);
      m.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      m.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      m.closePath();
      Td(m, f[5]);
      m.translate(c * -5, c * 55);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 186, c * 123);
      m.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      m.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      m.closePath();
      Td(m, f[5]);
      m.translate(c * 5, c * -55);
      m.translate(c * -5, c * 15);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 171, c * 241);
      m.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      m.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      m.closePath();
      Td(m, f[5]);
    } else if (j == 4) {
      m.translate(-k.width / 2, -k.height / 2);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 30, c * 167);
      m.bezierCurveTo(c * 47, c * 144, c * 64, c * 140, c * 80, c * 147);
      m.bezierCurveTo(c * 95, c * 154, c * 95, c * 159, c * 100, c * 179);
      m.bezierCurveTo(c * 105, c * 202, c * 95, c * 218, c * 69, c * 218);
      m.bezierCurveTo(c * 48, c * 236, c * 26, c * 223, c * 28, c * 213);
      m.bezierCurveTo(c * 28, c * 205, c * 29, c * 199, c * 32, c * 195);
      m.bezierCurveTo(c * 21, c * 183, c * 27, c * 173, c * 30, c * 167);
      m.closePath();
      Td(m, f[4]);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 26, c * 145);
      m.bezierCurveTo(c * 32, c * 138, c * 37, c * 137, c * 40, c * 139);
      m.bezierCurveTo(c * 43, c * 140, c * 41, c * 150, c * 31, c * 159);
      m.bezierCurveTo(c * 23, c * 166, c * 17, c * 158, c * 26, c * 145);
      m.closePath();
      Td(m, f[4]);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 13, c * 193);
      m.bezierCurveTo(c * 21, c * 187, c * 30, c * 190, c * 20, c * 202);
      m.bezierCurveTo(c * 13, c * 208, c * 7, c * 202, c * 13, c * 193);
      m.closePath();
      Td(m, f[4]);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 121, c * 190);
      m.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      m.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      m.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      m.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      m.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      m.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      m.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      m.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      m.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      m.closePath();
      Td(m, f[4]);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 335, c * 196);
      m.bezierCurveTo(c * 312, c * 208, c * 300, c * 185, c * 309, c * 167);
      m.bezierCurveTo(c * 314, c * 141, c * 339, c * 127, c * 359, c * 144);
      m.bezierCurveTo(c * 363, c * 148, c * 364, c * 150, c * 364, c * 150);
      m.bezierCurveTo(c * 392, c * 143, c * 396, c * 183, c * 378, c * 204);
      m.bezierCurveTo(c * 367, c * 215, c * 339, c * 208, c * 335, c * 196);
      m.closePath();
      Td(m, f[4]);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 349, c * 212);
      m.bezierCurveTo(c * 339, c * 216, c * 334, c * 208, c * 341, c * 203);
      m.bezierCurveTo(c * 353, c * 198, c * 361, c * 205, c * 349, c * 212);
      m.closePath();
      Td(m, f[4]);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 46, c * 165);
      m.bezierCurveTo(c * 55, c * 148, c * 85, c * 157, c * 83, c * 175);
      m.bezierCurveTo(c * 99, c * 185, c * 89, c * 212, c * 66, c * 204);
      m.bezierCurveTo(c * 55, c * 212, c * 43, c * 212, c * 41, c * 202);
      m.bezierCurveTo(c * 39, c * 194, c * 42, c * 187, c * 49, c * 185);
      m.bezierCurveTo(c * 44, c * 175, c * 45, c * 172, c * 46, c * 165);
      m.closePath();
      Td(m, f[4]);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 219, c * 144);
      m.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      m.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      m.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      m.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      m.closePath();
      Td(m, f[5]);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 123, c * 214);
      m.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      m.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      m.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      m.closePath();
      Td(m, f[5]);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 257, c * 199);
      m.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      m.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      m.closePath();
      Td(m, f[5]);
      m.translate(c * -5, c * 55);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 186, c * 123);
      m.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      m.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      m.closePath();
      Td(m, f[5]);
      m.translate(c * 5, c * -55);
      m.translate(c * -5, c * 15);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 171, c * 241);
      m.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      m.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      m.closePath();
      Td(m, f[5]);
      m.beginPath();
      m.lineCap = "round";
      m.lineJoin = "round";
      m.moveTo(c * 367, c * 164);
      m.bezierCurveTo(c * 380, c * 160, c * 391, c * 185, c * 371, c * 189);
      m.bezierCurveTo(c * 362, c * 192, c * 354, c * 191, c * 350, c * 185);
      m.bezierCurveTo(c * 326, c * 205, c * 314, c * 182, c * 316, c * 171);
      m.bezierCurveTo(c * 317, c * 150, c * 332, c * 143, c * 347, c * 147);
      m.bezierCurveTo(c * 361, c * 151, c * 366, c * 158, c * 367, c * 164);
      m.closePath();
      Td(m, f[4]);
    }
    return k;
  }
  function Ut(b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    var g = b * 220;
    var h = b * 220;
    var a = b * 32;
    var i = b * 4;
    d.width = g;
    d.height = h;
    f.translate(g / 2, h / 2 + b * 10);
    f.globalAlpha = 0.5;
    Pd(f, 0, 0, a);
    Td(f, c[0], c[0]);
    f.translate(0, b * -8);
    f.globalAlpha = 1;
    Pd(f, 0, 0, a);
    Td(f, c[1], c[2], i);
    return d;
  }
  function Wt(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 52;
    d.height = a * 65;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 9.833328247070312, a * 12.078125);
    f.bezierCurveTo(a * 15.333328247070312, a * 28.078125, a * 15.333328247070312, a * 28.078125, a * 20.833328247070312, a * 44.078125);
    f.closePath();
    Td(f, undefined, c[1], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 7.8333282470703125, a * 20.078125);
    f.bezierCurveTo(a * 16.833328247070312, a * 32.578125, a * 16.833328247070312, a * 32.578125, a * 25.833328247070312, a * 45.078125);
    f.closePath();
    Td(f, Cr, c[1], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 23.833328247070312, a * 26.078125);
    f.bezierCurveTo(a * 25.833328247070312, a * 11.078125, a * 16.833328247070312, a * 8.078125, a * 14.833328247070312, a * 7.078125);
    f.bezierCurveTo(a * 11.833328247070312, a * 17.078125, a * 13.833328247070312, a * 22.078125, a * 23.833328247070312, a * 27.078125);
    f.closePath();
    Td(f, c[0], c[1], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 35.83332824707031, a * 8.078125);
    f.bezierCurveTo(a * 34.83332824707031, a * 27.078125, a * 28.833328247070312, a * 27.078125, a * 23.833328247070312, a * 28.078125);
    f.bezierCurveTo(a * 21.833328247070312, a * 14.078125, a * 26.833328247070312, a * 11.078125, a * 35.83332824707031, a * 8.078125);
    f.closePath();
    Td(f, c[0], c[1], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 25.833328247070312, a * 39.078125);
    f.bezierCurveTo(a * 20.833328247070312, a * 29.078125, a * 14.833328247070312, a * 27.078125, a * 5.8333282470703125, a * 29.078125);
    f.bezierCurveTo(a * 9.833328247070312, a * 39.078125, a * 16.833328247070312, a * 42.078125, a * 25.833328247070312, a * 40.078125);
    f.closePath();
    Td(f, c[0], c[1], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 42.83332824707031, a * 23.078125);
    f.bezierCurveTo(a * 35.83332824707031, a * 35.078125, a * 31.833328247070312, a * 37.078125, a * 25.833328247070312, a * 36.078125);
    f.bezierCurveTo(a * 25.833328247070312, a * 24.078125, a * 33.83332824707031, a * 21.078125, a * 42.83332824707031, a * 23.078125);
    f.closePath();
    Td(f, c[0], c[1], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 23.833328247070312, a * 24.078125);
    f.bezierCurveTo(a * 20.833328247070312, a * 34.078125, a * 23.833328247070312, a * 40.078125, a * 27.833328247070312, a * 43.078125);
    f.bezierCurveTo(a * 37.33332824707031, a * 28.078125, a * 37.33332824707031, a * 28.078125, a * 46.83332824707031, a * 13.078125);
    Td(f, Ma, c[1], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 38.83332824707031, a * 14.078125);
    f.bezierCurveTo(a * 34.83332824707031, a * 24.078125, a * 34.83332824707031, a * 24.078125, a * 30.833328247070312, a * 34.078125);
    Td(f, undefined, c[1], a * 2);
    return d;
  }
  function Xt(c, f, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var m = c * 195;
    var a = c * 190;
    var n = m / 2;
    var o = a / 2;
    j.width = m;
    j.height = a;
    var h = c * 10;
    var l = c * 35;
    var g = c * 150;
    var p = l / 2;
    var b = g / 2;
    var d = c * 4;
    k.translate(n - c * 5, o - c * 5);
    k.rotate(-Math.PI / 1.25);
    k.globalAlpha = 1;
    yd(k, -p, -b, l, g, h);
    Td(k, i[0], i[1], d);
    k.translate(0, 0);
    k.rotate(Math.PI / 3);
    k.globalAlpha = 1;
    yd(k, -p, -b, l, g, h);
    Td(k, i[0], i[1], d);
    k.translate(0, 5);
    yd(k, -p / 2, -b / 2, l / 2, g / 3, h - 2);
    Td(k, i[1]);
    return j;
  }
  function Yt(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 5, a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 85.25, a * 82.953125);
    f.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    f.closePath();
    Td(f, Cr, c[0], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 111.25, a * 8.953125);
    f.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    f.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    f.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -5, a * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 111.25, a * 8.953125);
    f.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    f.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    f.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    f.closePath();
    Td(f, c[7]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 85.25, a * 82.953125);
    f.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    f.closePath();
    Td(f, Ra, c[6], a * 4);
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 5, a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 87.25, a * 84.953125);
    f.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    f.closePath();
    Td(f, Ao, c[0], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 160.25, a * 114.953125);
    f.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    f.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    f.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -5, a * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 160.25, a * 114.953125);
    f.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    f.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    f.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    f.closePath();
    Td(f, c[7]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 87.25, a * 84.953125);
    f.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    f.closePath();
    Td(f, ah, c[6], a * 4);
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 5, a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 83.25, a * 83.953125);
    f.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    f.closePath();
    Td(f, ar, c[0], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 13.25, a * 53.953125);
    f.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    f.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    f.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -5, a * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 13.25, a * 53.953125);
    f.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    f.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    f.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    f.closePath();
    Td(f, c[7]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 83.25, a * 83.953125);
    f.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    f.closePath();
    Td(f, kn, c[6], a * 4);
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 5, a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 84.25, a * 86.953125);
    f.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    f.closePath();
    Td(f, undefined, c[0], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56.25, a * 159.953125);
    f.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    f.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    f.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -5, a * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56.25, a * 159.953125);
    f.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    f.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    f.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    f.closePath();
    Td(f, c[7]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 84.25, a * 86.953125);
    f.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    f.closePath();
    Td(f, Xq, c[6], a * 4);
    return d;
  }
  function Zt(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 101, a * 255);
    f.bezierCurveTo(a * 113, a * 243, a * 179, a * 210, a * 219, a * 196);
    f.bezierCurveTo(a * 252, a * 203, a * 288, a * 215, a * 318, a * 233);
    f.bezierCurveTo(a * 304, a * 254, a * 258, a * 273, a * 215, a * 296);
    f.bezierCurveTo(a * 161, a * 287, a * 119, a * 270, a * 102, a * 257);
    f.closePath();
    Td(f, c[0], c[1], a * 14);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 99, a * 258);
    f.bezierCurveTo(a * 99, a * 272.5, a * 99, a * 272.5, a * 99, a * 287);
    f.bezierCurveTo(a * 166, a * 319, a * 193, a * 320, a * 212, a * 324);
    f.bezierCurveTo(a * 292, a * 286, a * 312, a * 271, a * 319, a * 263);
    f.bezierCurveTo(a * 320, a * 249, a * 320, a * 241, a * 318, a * 234);
    f.bezierCurveTo(a * 300, a * 254, a * 254, a * 277, a * 216, a * 294);
    f.bezierCurveTo(a * 190, a * 296, a * 135, a * 276, a * 102, a * 258);
    f.closePath();
    Td(f, c[2], c[1], a * 14);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 212, a * 323);
    f.bezierCurveTo(a * 211.5, a * 310.5, a * 211.5, a * 310.5, a * 211, a * 298);
    f.closePath();
    Td(f, xh, c[1], a * 14);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 212, a * 210);
    f.bezierCurveTo(a * 286, a * 210, a * 331, a * 254, a * 212, a * 276);
    f.bezierCurveTo(a * 108, a * 276, a * 112, a * 222, a * 213, a * 208);
    f.closePath();
    Td(f, c[3], c[4], a * 14);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 98, a * 200);
    f.bezierCurveTo(a * 126, a * 216, a * 177, a * 232, a * 213, a * 237);
    f.bezierCurveTo(a * 266, a * 218, a * 288, a * 209, a * 318, a * 190);
    f.bezierCurveTo(a * 269, a * 164, a * 239, a * 158, a * 214, a * 153);
    f.bezierCurveTo(a * 148, a * 172, a * 131, a * 182, a * 98, a * 200);
    f.closePath();
    Td(f, c[0], c[1], a * 14);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 97, a * 204);
    f.bezierCurveTo(a * 97, a * 215.5, a * 97, a * 215.5, a * 97, a * 227);
    f.bezierCurveTo(a * 148, a * 250, a * 179, a * 256, a * 212, a * 262);
    f.bezierCurveTo(a * 268, a * 244, a * 281, a * 233, a * 318, a * 214);
    f.bezierCurveTo(a * 318, a * 203, a * 318, a * 203, a * 318, a * 192);
    f.bezierCurveTo(a * 250, a * 225, a * 236, a * 231, a * 214, a * 239);
    f.bezierCurveTo(a * 158, a * 228, a * 126, a * 215, a * 99, a * 201);
    f.closePath();
    Td(f, c[2], c[1], a * 14);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 212, a * 260);
    f.bezierCurveTo(a * 212, a * 251.5, a * 212, a * 251.5, a * 212, a * 243);
    f.closePath();
    Td(f, Ao, c[1], a * 14);
    Pd(f, a * 161, a * 201, a * 13);
    Td(f, c[5]);
    Pd(f, a * 216, a * 205, a * 8.06225774829855);
    Td(f, c[5]);
    Pd(f, a * 216, a * 175, a * 6.708203932499369);
    Td(f, c[5]);
    Pd(f, a * 271, a * 191, a * 5.0990195135927845);
    Td(f, c[5]);
    Pd(f, a * 206, a * 180, a * 11.180339887498949);
    Td(f, c[5]);
    return d;
  }
  function $t(b, c, d) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    var i = b * 370;
    var a = b * 370;
    var j = i / 2;
    var k = a / 2;
    f.width = i;
    f.height = a;
    var h = b * 180;
    g.globalAlpha = 0.2;
    Pd(g, j, k, h);
    Td(g, d[0]);
    return f;
  }
  function _t(f, j, i, k, n) {
    var o = document.createElement("canvas");
    var a = o.getContext("2d");
    var p = f * 70;
    var q = f * 70;
    var h = f * 10;
    var l = f * 5;
    o.width = p;
    o.height = q + l;
    for (var g = 0; g < j.length; g++) {
      var r = j[g];
      a.globalAlpha = r.a;
      var s = r.f(i, ol, r.c);
      a.save();
      a.translate(p / 2 + r.x * f, q / 2 + r.y * f);
      a.rotate(r.r);
      a.drawImage(s, -s.width / 2, -s.height / 2);
      a.restore();
    }
    var t = [];
    for (g = 0; g < k.length; g++) {
      var v = document.createElement("canvas");
      var w = v.getContext("2d");
      v.width = p;
      v.height = q + l;
      w.globalAlpha = n / 2;
      if (g == 2) {
        yd(w, 0, l, p, q, h);
      } else {
        yd(w, 0, 0, p, q + l, h);
      }
      Td(w, "#081a19");
      w.globalAlpha = n;
      yd(w, 0, g == 2 ? l : 0, p, q, h);
      Td(w, k[g]);
      w.globalAlpha = 1;
      if (g == 2) {
        w.drawImage(o, 0, l);
      } else {
        w.drawImage(o, 0, 0);
      }
      t.push(Yq(v));
    }
    return t;
  }
  function au(c, f, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var m = c * 193;
    var a = c * 198;
    var n = c * 140;
    var o = c * 90;
    j.width = m;
    j.height = a;
    var h = c * 10;
    var l = c * 25;
    var g = c * 180;
    var p = l / 2;
    var b = g / 2;
    var d = c * 4;
    k.translate(c * -25, c * 1);
    k.translate(n, o);
    k.rotate(-Math.PI / 5);
    yd(k, -p, -b, l, g, h);
    Td(k, i[0], i[1], d);
    k.translate(c * -30, c * -25);
    k.rotate(Math.PI / 3);
    yd(k, -p, -b, l, g, h);
    Td(k, i[0], i[1], d);
    k.translate(c * 35, c * 30);
    k.rotate(Math.PI / 3);
    yd(k, -p, -b, l, g, h);
    Td(k, i[0], i[1], d);
    return j;
  }
  function bu(b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    var g = b * 220;
    var h = b * 220;
    var a = b * 16;
    d.width = g;
    d.height = h;
    f.translate(g / 2, h / 2);
    f.globalAlpha = 0.5;
    Pd(f, 0, 0, a);
    Td(f, c[0]);
    f.globalAlpha = 1;
    return d;
  }
  function cu(b, c, d, f) {
    var g = document.createElement("canvas");
    var h = g.getContext("2d");
    g.width = b * 121;
    g.height = b * 130;
    h.translate(0, b * 20);
    if (d == 1) {
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 6, b * 23);
      h.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
      h.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
      h.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
      h.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
      h.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
      h.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
      h.closePath();
      Td(h, undefined, c[3], b * 13);
    }
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 6, b * 23);
    h.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
    h.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
    h.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
    h.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
    h.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
    h.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
    h.closePath();
    Td(h, c[1], c[2], b * 4);
    if (f == 1) {
      h.translate(0, b * 5);
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 67, b * 30);
      h.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
      Td(h, undefined, c[0], b * 10);
      h.translate(3, b * 0);
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 70, b * 17);
      h.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
      Td(h, undefined, c[0], b * 10);
      h.translate(3, b * 0);
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 76, b * 8);
      h.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
      Td(h, undefined, c[0], b * 10);
      if (d == 1) {
        h.translate(b * -6, b * -5);
        h.beginPath();
        h.lineCap = "round";
        h.lineJoin = "round";
        h.moveTo(b * 67, b * 30);
        h.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
        Td(h, Al, c[3], b * 18);
        h.translate(3, b * 0);
        h.beginPath();
        h.lineCap = "round";
        h.lineJoin = "round";
        h.moveTo(b * 70, b * 17);
        h.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
        Td(h, kn, c[3], b * 18);
        h.translate(3, b * 0);
        h.beginPath();
        h.lineCap = "round";
        h.lineJoin = "round";
        h.moveTo(b * 76, b * 8);
        h.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
        Td(h, undefined, c[3], b * 18);
        h.translate(-6, b * 0);
      } else {
        h.translate(b * -6, b * -5);
      }
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 67, b * 30);
      h.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
      Td(h, undefined, c[2], b * 10);
      h.translate(3, b * 0);
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 70, b * 17);
      h.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
      Td(h, undefined, c[2], b * 10);
      h.translate(3, b * 0);
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 76, b * 8);
      h.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
      Td(h, Xj, c[2], b * 10);
    } else {
      if (d == 1) {
        h.beginPath();
        h.lineCap = "round";
        h.lineJoin = "round";
        h.moveTo(b * 108, b * 27);
        h.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
        h.closePath();
        Td(h, wj, c[3], b * 18);
        h.beginPath();
        h.lineCap = "round";
        h.lineJoin = "round";
        h.moveTo(b * 79, b * 30);
        h.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
        h.closePath();
        Td(h, undefined, c[3], b * 18);
      } else {
        h.translate(0, b * -5);
        h.beginPath();
        h.lineCap = "round";
        h.lineJoin = "round";
        h.moveTo(b * 108, b * 27);
        h.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
        h.closePath();
        Td(h, Ma, c[0], b * 7);
        h.beginPath();
        h.lineCap = "round";
        h.lineJoin = "round";
        h.moveTo(b * 79, b * 30);
        h.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
        h.closePath();
        Td(h, Xj, c[0], b * 7);
        h.translate(0, b * 5);
      }
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 108, b * 27);
      h.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
      h.closePath();
      Td(h, mk, c[2], b * 7);
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 79, b * 30);
      h.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
      h.closePath();
      Td(h, undefined, c[2], b * 7);
    }
    return g;
  }
  function du(c, f, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var m = (b = c * 450) / 2;
    var a = (q = c * 145) / 2;
    var n = c * 10;
    var o = c * 300;
    var h = c * 30;
    var l = o / 2;
    var g = h / 2;
    var p = 4;
    if (i) {
      var b = c * 145;
      var q = c * 450;
      j.width = b;
      j.height = q;
      k.rotate(Math.PI / 2);
      k.save();
      k.globalAlpha = 0.5;
      yd(k, c * 100, c * -110, o, h, n);
      Td(k, f[0]);
      k.translate(c * 178, c * -98);
      yd(k, -l, -g - c * 6, c * 100, c * 100, n);
      Td(k, f[0]);
      k.translate(c * -50, c * 5);
      yd(k, c * 220, c * -15, c * 90, c * 90, n);
      Td(k, f[0]);
      k.restore();
      k.save();
      k.globalAlpha = 1;
      k.translate(c * 250, c * -63);
      yd(k, -l - c * 20, -g, o, h, n);
      Td(k, f[1], f[2], p);
      k.translate(c * -70, c * -40);
      yd(k, -l - c * 20, -g, c * 100, c * 100, n);
      Td(k, f[3], f[4], p);
      k.translate(c * -70, c * 15);
      yd(k, c * 220, c * -22, c * 90, c * 90, n);
      Td(k, f[3], f[4], p);
      yd(k, c * 230, c * -12, c * 55, c * 55, n);
      Td(k, f[5]);
      k.translate(c * -70, 0);
      yd(k, c * -15, c * -2, c * 60, c * 60, n);
      Td(k, f[5]);
      k.restore();
    } else {
      j.width = b;
      j.height = q;
      k.save();
      k.globalAlpha = 0.5;
      k.translate(m, a + c * 10);
      yd(k, -l, -g, o, h, n);
      Td(k, f[0]);
      k.translate(c * -65, c * -25);
      yd(k, -l, -g - c * 6, c * 100, c * 100, c * 15);
      Td(k, f[0]);
      k.translate(c * -35, c * -5);
      yd(k, c * 220, c * -15, c * 90, c * 90, c * 15);
      Td(k, f[0]);
      k.restore();
      k.save();
      k.globalAlpha = 1;
      k.translate(c * 240, c * 70);
      yd(k, -l, -g, o, h, n);
      Td(k, f[1], f[2], p);
      k.translate(c * -60, c * -40);
      yd(k, -l - c * 20, -g, c * 100, c * 100, c * 15);
      Td(k, f[3], f[4], p);
      k.translate(c * -55, c * 10);
      yd(k, c * 220, c * -22, c * 90, c * 90, c * 15);
      Td(k, f[3], f[4], p);
      yd(k, c * 240, c * -12, c * 55, c * 55, c * 12);
      Td(k, f[5]);
      k.translate(c * 45, c * 0);
      yd(k, c * -145, c * -2, c * 60, c * 60, c * 12);
      Td(k, f[5]);
      k.restore();
    }
    return j;
  }
  function eu(b, c, d) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    var i = b * 205;
    var a = b * 205;
    var j = i / 2;
    var k = a / 2;
    f.width = i;
    f.height = a;
    var h = b * 100;
    g.translate(j, k);
    g.globalAlpha = 1;
    Pd(g, 0, 0, h);
    Td(g, d[0]);
    return f;
  }
  function fu(b, c, d) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    var h = b * 75;
    var a = b * 55;
    f.width = h;
    f.height = a;
    g.translate(b * -30, b * -40);
    g.globalAlpha = 1;
    g.beginPath();
    g.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
    g.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
    g.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
    g.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
    g.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
    g.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
    g.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
    g.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
    g.closePath();
    Td(g, d[0]);
    g.beginPath();
    g.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
    g.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
    g.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
    g.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
    g.closePath();
    Td(g, d[1]);
    g.beginPath();
    g.moveTo(b * 69, b * 65);
    g.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
    g.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
    g.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
    Td(g, Ml, d[1], 2);
    g.beginPath();
    g.moveTo(b * 50, b * 48);
    g.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
    g.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
    g.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
    Td(g, d[2]);
    return f;
  }
  function gu(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    f.save();
    f.translate(a * 85, a * 237);
    f.rotate(1.5707963267948966);
    wd(f, 6, a * 54.585977194239184, a * 1);
    f.restore();
    Td(f, c[1], c[2], a * 12);
    f.save();
    f.translate(a * 178, a * 238);
    f.rotate(1.5707963267948966);
    wd(f, 6, a * 52.53573932334064, a * 1);
    f.restore();
    Td(f, c[1], c[2], a * 12);
    f.save();
    f.translate(a * 270, a * 239);
    f.rotate(1.5707963267948966);
    wd(f, 6, a * 53.58058329516393, a * 1);
    f.restore();
    Td(f, c[1], c[2], a * 12);
    f.save();
    f.translate(a * 222, a * 312);
    f.rotate(1.5707963267948966);
    wd(f, 6, a * 52.53573932334064, a * 1);
    f.restore();
    Td(f, c[1], c[2], a * 12);
    f.save();
    f.translate(a * 317, a * 159);
    f.rotate(1.5707963267948966);
    wd(f, 6, a * 57.63465889766331, a * 1);
    f.restore();
    Td(f, c[1], c[2], a * 12);
    f.save();
    f.translate(a * 223.5, a * 139.0625);
    f.rotate(1.5707963267948966);
    wd(f, 6, a * 51.66236541235796, a * 1);
    f.restore();
    Td(f, c[1], c[2], a * 12);
    f.save();
    f.translate(a * 132.5, a * 137.0625);
    f.rotate(1.5707963267948966);
    wd(f, 6, a * 52.009614495783374, a * 1);
    f.restore();
    Td(f, c[1], c[2], a * 12);
    f.save();
    f.translate(a * 178.5, a * 58.0625);
    f.rotate(1.5707963267948966);
    wd(f, 6, a * 53.16013544000805, a * 1);
    f.restore();
    Td(f, c[1], c[2], a * 12);
    f.save();
    f.translate(a * 177.5, a * 216.0625);
    f.rotate(1.5707963267948966);
    wd(f, 6, a * 50, a * 1);
    f.restore();
    Td(f, c[1], c[2], a * 12);
    f.save();
    f.translate(a * 84.5, a * 215.0625);
    f.rotate(1.5707963267948966);
    wd(f, 6, a * 54, a * 1);
    f.restore();
    Td(f, c[1], c[2], a * 12);
    f.save();
    f.translate(a * 319.5, a * 138.0625);
    f.rotate(1.5707963267948966);
    wd(f, 6, a * 55.08175741568164, a * 1);
    f.restore();
    Td(f, c[1], c[2], a * 12);
    f.save();
    f.translate(a * 269.5, a * 216.0625);
    f.rotate(1.5707963267948966);
    wd(f, 6, a * 54.589376255824725, a * 1);
    f.restore();
    Td(f, c[1], c[2], a * 12);
    f.save();
    f.translate(a * 221.5, a * 293.0625);
    f.rotate(0.5235987755982988);
    wd(f, 6, a * 49.49747468305833, a * 1);
    f.restore();
    Td(f, c[1], c[2], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 221.5, a * 342.0625);
    f.bezierCurveTo(a * 221.5, a * 350.5625, a * 221.5, a * 350.5625, a * 221.5, a * 359.0625);
    f.closePath();
    Td(f, undefined, c[2], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 84.5, a * 270.0625);
    f.bezierCurveTo(a * 84.5, a * 277.0625, a * 84.5, a * 277.0625, a * 84.5, a * 284.0625);
    f.closePath();
    Td(f, Xq, c[2], a * 12);
    f.save();
    f.translate(a * 84.5, a * 215.0625);
    f.rotate(0.5235987755982988);
    wd(f, 6, a * 30, a * 15);
    f.restore();
    Td(f, c[3]);
    f.save();
    f.translate(a * 177.5, a * 215.0625);
    f.rotate(0.5235987755982988);
    wd(f, 6, a * 30, a * 15);
    f.restore();
    Td(f, c[3]);
    f.save();
    f.translate(a * 222.5, a * 294.0625);
    f.rotate(0.5235987755982988);
    wd(f, 6, a * 30, a * 15);
    f.restore();
    Td(f, c[3]);
    f.save();
    f.translate(a * 270.5, a * 216.0625);
    f.rotate(0.5235987755982988);
    wd(f, 6, a * 30, a * 15);
    f.restore();
    Td(f, c[3]);
    f.save();
    f.translate(a * 320.5, a * 134.0625);
    f.rotate(0.5235987755982988);
    wd(f, 6, a * 30, a * 15);
    f.restore();
    Td(f, c[3]);
    f.save();
    f.translate(a * 224.5, a * 138.0625);
    f.rotate(0.5235987755982988);
    wd(f, 6, a * 30, a * 15);
    f.restore();
    Td(f, c[3]);
    f.save();
    f.translate(a * 133.5, a * 137.0625);
    f.rotate(0.5235987755982988);
    wd(f, 6, a * 30, a * 15);
    f.restore();
    Td(f, c[3]);
    f.save();
    f.translate(a * 178.5, a * 56.0625);
    f.rotate(0.5235987755982988);
    wd(f, 6, a * 30, a * 15);
    f.restore();
    Td(f, c[3]);
    return d;
  }
  function hu(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    f.globalAlpha = 0.5;
    f.translate(0, a * 8);
    f.translate(a * -7, a * -20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 55, a * 68);
    f.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    f.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    f.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    f.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    f.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(0, a * -8);
    f.translate(a * 7, a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 24, a * 28);
    f.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    f.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    f.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    f.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    f.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    f.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    f.closePath();
    Td(f, c[1], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 30, a * 41);
    f.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    f.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    f.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
    f.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
    f.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
    f.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    f.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 24, a * 28);
    f.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    f.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    f.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    f.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    f.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    f.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    f.closePath();
    Td(f, xh, c[2], a * 4);
    Pd(f, a * 18, a * 38, a * 14.866068747318506);
    Td(f, c[4], c[5], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 39, a * 30);
    f.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    f.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    Td(f, c[1], c[2], a * 4);
    f.translate(a * -7, a * -20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 55, a * 68);
    f.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    f.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    f.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    f.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    f.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    f.closePath();
    Td(f, c[4], c[5], a * 4);
    return d;
  }
  function iu(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 5, a * 5);
    f.save();
    f.translate(a * 86.25, a * 84.953125);
    wd(f, 7, a * 9.848857801796104, a * 5);
    f.restore();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -5, a * -5);
    f.save();
    f.translate(a * 86.25, a * 84.953125);
    wd(f, 7, a * 9.848857801796104, a * 5);
    f.restore();
    Td(f, c[8], c[9], a * 4);
    return d;
  }
  function ju(c, f, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var m = c * 135;
    var a = c * 190;
    var n = m / 2;
    var o = a / 2;
    j.width = m;
    j.height = a;
    var h = c * 10;
    var l = c * 25;
    var g = c * 180;
    var p = l / 2;
    var b = g / 2;
    var d = c * 4;
    k.translate(n, o);
    k.rotate(-Math.PI / 5);
    k.globalAlpha = 1;
    yd(k, -p, -b, l, g, h);
    Td(k, i[0], i[1], d);
    k.translate(0, 0);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 1;
    yd(k, -p, -b, l, g, h);
    Td(k, i[0], i[1], d);
    return j;
  }
  function ku(b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    var g = b * 40;
    var h = b * 40;
    var a = b * 16;
    var i = b * 4;
    d.width = g;
    d.height = h;
    f.translate(g / 2, h / 2);
    f.globalAlpha = 1;
    Pd(f, 0, 0, a);
    Td(f, c[0], c[1], i);
    return d;
  }
  function lu(b, c, d) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    var i = b * 145;
    var a = b * 145;
    var j = i / 2;
    var k = a / 2;
    f.width = i;
    f.height = a;
    var h = b * 70;
    g.translate(j, k);
    g.globalAlpha = 0.4;
    Pd(g, 0, 0, h);
    Td(g, d[0]);
    h = b * 50;
    g.translate(0, 0);
    g.globalAlpha = 0.8;
    Pd(g, 0, 0, h);
    Td(g, d[0]);
    h = b * 35;
    g.translate(0, 0);
    g.globalAlpha = 0.8;
    Pd(g, 0, 0, h);
    Td(g, d[1]);
    h = b * 20;
    g.translate(0, 0);
    g.globalAlpha = 0.8;
    Pd(g, 0, 0, h);
    Td(g, d[2]);
    return f;
  }
  const mu = 3;
  function nu(b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    var g = Math.max(c.width, b.width);
    var h = Math.max(c.height, b.height);
    d.width = g;
    d.height = h;
    f.drawImage(b, (g - b.width) / 2, (h - b.height) / 2);
    f.drawImage(c, (g - c.width) / 2, (h - c.height) / 2);
    return d;
  }
  const ou = 2;
  function pu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 283;
    c.height = a * 224;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 33);
    d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    Td(d, ur, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 181, a * 32);
    d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    Td(d, Ma, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 225, a * 52);
    d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    Td(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 34, a * 134);
    d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    Td(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 249, a * 135);
    d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    Td(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 56, a * 50);
    d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    Td(d, mk, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 55);
    d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
    d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
    d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
    d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
    d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
    d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
    d.closePath();
    Td(d, b[0]);
    return c;
  }
  function qu(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 112;
    f.translate(0, a * 15);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 16, a * 44);
    f.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    f.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    f.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    f.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    f.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    f.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(0, a * -15);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 16, a * 44);
    f.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    f.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    f.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    f.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    f.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    f.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
    f.closePath();
    Td(f, c[1], c[2], a * 8);
    return d;
  }
  function ru(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 20, a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 111, a * 351);
    f.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    f.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    f.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    f.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    f.closePath();
    Td(f, c[0]);
    f.save();
    f.translate(a * 131, a * 425.5);
    f.rotate(0.16);
    yd(f, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    f.restore();
    Td(f, c[0]);
    Pd(f, a * 122, a * 480, a * 18.439088914585774);
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 79, a * 371);
    f.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    f.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    f.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -20, a * -20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 111, a * 351);
    f.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    f.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    f.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    f.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    f.closePath();
    Td(f, c[1], c[2], a * 12.5);
    f.save();
    f.translate(a * 131, a * 425.5);
    f.rotate(0.16);
    yd(f, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    f.restore();
    Td(f, c[4], c[5], a * 12.5);
    Pd(f, a * 122, a * 480, a * 18.439088914585774);
    Td(f, c[4], c[5], a * 12.5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 79, a * 371);
    f.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    f.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    f.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    f.closePath();
    Td(f, c[4], c[5], a * 12.5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 128, a * 345);
    f.bezierCurveTo(a * 142, a * 345, a * 147, a * 346, a * 158, a * 349);
    f.bezierCurveTo(a * 177.5, a * 224.5, a * 177.5, a * 224.5, a * 197, a * 100);
    f.bezierCurveTo(a * 190.5, a * 84.5, a * 190.5, a * 84.5, a * 184, a * 69);
    f.bezierCurveTo(a * 173.5, a * 82, a * 173.5, a * 82, a * 163, a * 95);
    f.closePath();
    Td(f, c[3]);
    return d;
  }
  function su(c, f, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var m = c * 105;
    var a = c * 125;
    var n = c * 4;
    var o = c * 10;
    var h = c * 5;
    var l = c * 10;
    var g = c * 110;
    var p = l / 2;
    var b = g / 2;
    j.width = m;
    j.height = a;
    k.save();
    k.globalAlpha = f ? 0.5 : 1;
    k.translate(m / 2 + c * 8, a / 2 + h);
    yd(k, -p, -b, l, g, o);
    Td(k, f ? i[0] : i[1]);
    k.translate(c * -130 + h, c * -128 + h);
    k.beginPath();
    k.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    k.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    k.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    k.closePath();
    Td(k, i[2]);
    k.restore();
    k.translate(m / 2 + 8, a / 2);
    k.globalAlpha = 1;
    yd(k, -p, -b, l, g, o);
    Td(k, i[3], i[4], n);
    k.translate(c * -130, c * -125);
    k.beginPath();
    k.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    k.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    k.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    k.closePath();
    Td(k, i[5], i[6], n);
    return j;
  }
  function tu(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 100;
    d.height = a * 250;
    f.translate(a * -135, a * -75);
    f.globalAlpha = b ? 0.8 : 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 178.5, a * 238.03125);
    f.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    f.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    f.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    f.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 155.5, a * 239.03125);
    f.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    f.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    f.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    f.closePath();
    Td(f, c[0]);
    Pd(f, a * 160.5, a * 243.03125, a * 7);
    Td(f, c[0]);
    Pd(f, a * 227.5, a * 242.03125, a * 7);
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 185.5, a * 253.03125);
    f.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    f.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    f.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    f.closePath();
    Td(f, c[0], c[0], a * 5);
    Pd(f, a * 194, a * 298, a * 9);
    Td(f, c[0], c[0], a * 5);
    f.globalAlpha = 1;
    f.translate(a * -10, a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 178.5, a * 238.03125);
    f.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    f.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    f.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    f.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    f.closePath();
    Td(f, c[3], c[4], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 155.5, a * 239.03125);
    f.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    f.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    f.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    f.closePath();
    Td(f, c[1], c[2], a * 5);
    Pd(f, a * 160.5, a * 243.03125, a * 7);
    Td(f, c[1], c[2], a * 5);
    Pd(f, a * 227.5, a * 242.03125, a * 7);
    Td(f, c[1], c[2], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 185.5, a * 253.03125);
    f.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    f.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    f.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    f.closePath();
    Td(f, c[1], c[2], a * 7);
    Pd(f, a * 194, a * 298, a * 9);
    Td(f, c[1], c[2], a * 7);
    return d;
  }
  function uu(b, c, d, f) {
    var g = document.createElement("canvas");
    var h = g.getContext("2d");
    g.width = b * 283;
    g.height = b * 224;
    h.translate(0, b * 15);
    h.globalAlpha = 0.5;
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 93, b * 55);
    h.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
    h.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
    h.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
    h.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
    h.closePath();
    Td(h, d[0]);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 100, b * 33);
    h.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    h.closePath();
    Td(h, d[0]);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 181, b * 32);
    h.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    Td(h, d[0]);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 225, b * 52);
    h.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    Td(h, d[0]);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 34, b * 134);
    h.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    Td(h, d[0]);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 249, b * 135);
    h.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    Td(h, d[0]);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 56, b * 50);
    h.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    Td(h, d[0]);
    h.translate(0, b * -15);
    h.globalAlpha = 1;
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 100, b * 33);
    h.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    Td(h, fk, d[2], b * 40);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 181, b * 32);
    h.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    Td(h, mk, d[2], b * 40);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 225, b * 52);
    h.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    Td(h, undefined, d[2], b * 40);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 34, b * 134);
    h.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    Td(h, Wn, d[2], b * 40);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 249, b * 135);
    h.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    Td(h, Cr, d[2], b * 40);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 56, b * 50);
    h.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    Td(h, undefined, d[2], b * 40);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 93, b * 55);
    h.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
    h.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
    h.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
    h.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
    h.closePath();
    Td(h, d[1], d[2], b * 10);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 100, b * 33);
    h.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    Td(h, undefined, d[1], b * 20);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 181, b * 32);
    h.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    Td(h, undefined, d[1], b * 20);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 225, b * 52);
    h.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    Td(h, undefined, d[1], b * 20);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 34, b * 134);
    h.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    Td(h, Xq, d[1], b * 20);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 249, b * 135);
    h.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    Td(h, or, d[1], b * 20);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 56, b * 50);
    h.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    Td(h, w, d[1], b * 20);
    Pd(h, b * 101, b * 155, b * 20.591260281974);
    Td(h, d[3]);
    Pd(h, b * 180, b * 155, b * 20.591260281974);
    Td(h, d[3]);
    Pd(h, b * 95, b * 148, b * 7.211102550927978);
    Td(h, d[4]);
    Pd(h, b * 173, b * 148, b * 7.211102550927978);
    Td(h, d[4]);
    if (f === 1) {
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 191, b * 107);
      h.bezierCurveTo(b * 180, b * 104, b * 175, b * 101, b * 180, b * 95);
      h.bezierCurveTo(b * 180, b * 95, b * 181, b * 99, b * 188, b * 103);
      h.bezierCurveTo(b * 191, b * 101, b * 191, b * 95, b * 190, b * 91);
      h.bezierCurveTo(b * 190, b * 91, b * 196, b * 89, b * 195, b * 99);
      h.closePath();
      Td(h, d[2]);
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 206, b * 98);
      h.bezierCurveTo(b * 203, b * 95, b * 200, b * 93, b * 198, b * 101);
      h.bezierCurveTo(b * 194, b * 109, b * 193, b * 109, b * 196, b * 110);
      h.bezierCurveTo(b * 206, b * 115, b * 209, b * 114, b * 211, b * 111);
      h.bezierCurveTo(b * 211, b * 106, b * 208, b * 108, b * 203, b * 108);
      h.bezierCurveTo(b * 193, b * 107, b * 204, b * 101, b * 206, b * 99);
      h.closePath();
      Td(h, d[2]);
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 172, b * 111);
      h.bezierCurveTo(b * 172, b * 106, b * 174, b * 105, b * 185, b * 109);
      h.bezierCurveTo(b * 190, b * 109, b * 189, b * 114, b * 185, b * 120);
      h.bezierCurveTo(b * 181, b * 125, b * 180, b * 126, b * 176, b * 122);
      h.bezierCurveTo(b * 182, b * 119, b * 187, b * 110, b * 182, b * 112);
      h.closePath();
      Td(h, d[2]);
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 202, b * 125);
      h.bezierCurveTo(b * 197, b * 117, b * 193, b * 116, b * 193, b * 120);
      h.bezierCurveTo(b * 192.5, b * 124.5, b * 192.5, b * 124.5, b * 192, b * 129);
      h.bezierCurveTo(b * 188, b * 129, b * 187, b * 124, b * 189, b * 120);
      h.bezierCurveTo(b * 191, b * 110, b * 192, b * 110, b * 200, b * 116);
      h.bezierCurveTo(b * 208, b * 120, b * 207, b * 123, b * 202, b * 125);
      h.closePath();
      Td(h, d[2]);
    }
    return g;
  }
  function vu(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 131;
    d.height = a * 121;
    f.translate(0, a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 110, a * 59);
    f.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    f.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    f.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    f.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    f.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
    f.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(0, a * -20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 110, a * 59);
    f.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    f.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    f.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    f.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    f.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
    f.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    f.closePath();
    Td(f, c[1], c[2], a * 10);
    return d;
  }
  function wu(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 469;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 20, a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 88, a * 30);
    f.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    f.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    f.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    f.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    f.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    f.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    f.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 118, a * 31);
    f.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    f.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    f.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    f.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 328);
    f.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    f.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    f.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 74, a * 302);
    f.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    f.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    f.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    f.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
    f.closePath();
    Td(f, c[0]);
    f.save();
    f.translate(a * 51.5, a * 440.5);
    f.rotate(0.2);
    yd(f, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    f.restore();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 73, a * 316);
    f.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    f.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -20, a * -20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 88, a * 30);
    f.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    f.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    f.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    f.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    f.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    f.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    f.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    f.closePath();
    Td(f, c[1], c[2], a * 7);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 118, a * 31);
    f.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    f.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    f.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    f.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 88, a * 30);
    f.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    f.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    f.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    f.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    f.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    f.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    f.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    f.closePath();
    Td(f, undefined, c[2], a * 7);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 328);
    f.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    f.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    f.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    f.closePath();
    Td(f, c[4], c[5], a * 7);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 74, a * 302);
    f.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    f.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    f.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    f.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
    f.closePath();
    Td(f, c[4], c[5], a * 7);
    f.save();
    f.translate(a * 51.5, a * 440.5);
    f.rotate(0.2);
    yd(f, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    f.restore();
    Td(f, c[4], c[5], a * 7);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 73, a * 316);
    f.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    f.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    f.closePath();
    Td(f, c[6]);
    return d;
  }
  function xu(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 424;
    d.height = a * 788;
    f.translate(a * 25, a * 25);
    f.globalAlpha = b ? 0.5 : 1;
    f.save();
    f.translate(a * 193.5, a * 602.5);
    f.rotate(-0.12);
    yd(f, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    f.restore();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 137, a * 519);
    f.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    f.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    f.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    f.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 175, a * 119);
    f.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    f.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    f.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    f.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 110, a * 518);
    f.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    f.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    f.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    f.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    f.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    f.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    f.closePath();
    Td(f, c[0]);
    Pd(f, a * 204, a * 693, a * 36.013886210738214);
    Td(f, c[0]);
    Pd(f, a * 105, a * 518, a * 30);
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 171, a * 535);
    f.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    f.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    f.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 244, a * 669);
    f.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    f.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    f.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    f.closePath();
    Td(f, c[0]);
    f.translate(a * -25, a * -25);
    f.globalAlpha = 1;
    f.save();
    f.translate(a * 193.5, a * 602.5);
    f.rotate(-0.12);
    yd(f, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    f.restore();
    Td(f, c[1], c[2], a * 16);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 137, a * 519);
    f.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    f.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    f.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    f.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    f.closePath();
    Td(f, c[3], c[4], a * 16);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 175, a * 119);
    f.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    f.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    f.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    f.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    f.closePath();
    Td(f, c[5]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 110, a * 518);
    f.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    f.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    f.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    f.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    f.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    f.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    f.closePath();
    Td(f, c[6], c[4], a * 16);
    Pd(f, a * 204, a * 693, a * 36.013886210738214);
    Td(f, c[6], c[4], a * 16);
    Pd(f, a * 105, a * 518, a * 30);
    Td(f, c[6], c[4], a * 16);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 171, a * 535);
    f.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    f.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    f.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    f.closePath();
    Td(f, c[6]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 244, a * 669);
    f.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    f.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    f.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    f.closePath();
    Td(f, c[6]);
    Pd(f, a * 204, a * 693, a * 17.029386365926403);
    Td(f, c[7]);
    Pd(f, a * 106, a * 518, a * 12);
    Td(f, c[7]);
    return d;
  }
  const yu = 13;
  function zu(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 20, a * 20);
    f.translate(a * -20, a * -20);
    f.save();
    f.translate(a * 132, a * 423);
    f.rotate(0.16);
    yd(f, a * -14, a * -61, a * 28, a * 122, a * 10);
    f.restore();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 100, a * 344);
    f.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    f.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    f.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    f.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    f.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 75, a * 328);
    f.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    f.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    f.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    f.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    f.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    f.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    f.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 121, a * 332);
    f.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    f.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    f.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    f.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    f.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 105, a * 463);
    f.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    f.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    f.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    f.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -20, a * -20);
    f.save();
    f.translate(a * 132, a * 423);
    f.rotate(0.16);
    yd(f, a * -14, a * -61, a * 28, a * 122, a * 10);
    f.restore();
    Td(f, c[4], c[5], a * 12.5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 100, a * 344);
    f.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    f.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    f.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    f.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    f.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    f.closePath();
    Td(f, c[1], c[2], a * 12.5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 75, a * 328);
    f.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    f.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    f.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    f.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    f.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    f.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    f.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    f.closePath();
    Td(f, c[1], c[2], a * 12.5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 121, a * 332);
    f.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    f.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    f.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    f.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    f.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 105, a * 463);
    f.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    f.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    f.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    f.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    f.closePath();
    Td(f, c[1], c[2], a * 12.5);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 143, a * 346);
    f.bezierCurveTo(a * 125, a * 352, a * 125, a * 352, a * 107, a * 358);
    f.bezierCurveTo(a * 124, a * 363, a * 140, a * 368, a * 141, a * 368);
    f.bezierCurveTo(a * 156.5, a * 367, a * 156.5, a * 367, a * 172, a * 366);
    f.closePath();
    Td(f, c[3]);
    return d;
  }
  function Au(b, c, d) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    var i = b * 70;
    var a = b * 90;
    var j = b * 4;
    var k = b * 5;
    f.width = i;
    f.height = a;
    g.save();
    g.translate(b * -80, b * -70 + k);
    g.globalAlpha = 0.5;
    g.beginPath();
    g.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    g.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    g.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    g.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    g.closePath();
    Td(g, "#0d1b1c");
    g.restore();
    g.save();
    g.translate(b * -80, b * -70 + k);
    g.globalAlpha = 0.5;
    g.beginPath();
    g.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    g.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    g.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    g.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    g.closePath();
    Td(g, "#0d1b1c");
    g.restore();
    g.save();
    g.translate(b * -80, b * -70 + k);
    g.globalAlpha = 0.5;
    g.beginPath();
    g.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    g.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    g.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    g.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    g.closePath();
    Td(g, "#0d1b1c");
    g.restore();
    g.save();
    g.translate(b * 3, b * -93 + k);
    g.rotate(Math.PI / 5);
    g.globalAlpha = 0.5;
    g.beginPath();
    g.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    g.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    g.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    g.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    g.closePath();
    Td(g, "#0d1b1c");
    g.restore();
    g.save();
    g.translate(b * -80, b * -70);
    g.globalAlpha = 1;
    g.beginPath();
    g.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    g.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    g.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    g.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    g.closePath();
    Td(g, d[0], d[1], j);
    g.restore();
    g.save();
    g.translate(b * -80, b * -70);
    g.globalAlpha = 1;
    g.beginPath();
    g.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    g.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    g.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    g.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    g.closePath();
    Td(g, d[0], d[1], j);
    g.restore();
    g.save();
    g.translate(b * -80, b * -70);
    g.globalAlpha = 1;
    g.beginPath();
    g.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    g.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    g.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    g.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    g.closePath();
    Td(g, d[0], d[1], j);
    g.restore();
    g.save();
    g.translate(b * 3, b * -93);
    g.rotate(Math.PI / 5);
    g.globalAlpha = 1;
    g.beginPath();
    g.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    g.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    g.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    g.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    g.closePath();
    Td(g, d[0], d[1], j);
    g.restore();
    return f;
  }
  function Bu(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 321;
    d.height = a * 284;
    f.translate(a * 100, a * 30);
    f.translate(a * 5, a * 10);
    f.globalAlpha = b ? 0.5 : 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 58, a * 33);
    f.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    f.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    f.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    f.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    f.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    f.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -5, a * -10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 58, a * 33);
    f.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    f.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    f.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    f.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    f.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    f.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    f.closePath();
    Td(f, c[1], c[2], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 167, a * 120);
    f.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    f.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    f.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 25, a * 64);
    f.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    f.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    f.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    f.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    f.closePath();
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 161, a * 141);
    f.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    f.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    f.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    f.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    f.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    f.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    Td(f, kn, c[4], a * 4);
    f.translate(a * -100, a * -30);
    f.translate(a * 10, a * 70);
    f.translate(a * 5, a * 10);
    f.globalAlpha = b ? 0.5 : 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 58, a * 33);
    f.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    f.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    f.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    f.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    f.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    f.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -5, a * -10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 58, a * 33);
    f.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    f.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    f.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    f.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    f.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    f.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    f.closePath();
    Td(f, c[1], c[2], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 167, a * 120);
    f.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    f.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    f.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 25, a * 64);
    f.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    f.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    f.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    f.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    f.closePath();
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 161, a * 141);
    f.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    f.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    f.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    f.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    f.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    f.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    Td(f, undefined, c[4], a * 4);
    f.translate(a * 20, a * -80);
    f.translate(a * 5, a * 10);
    f.globalAlpha = b ? 0.5 : 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 58, a * 33);
    f.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    f.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    f.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    f.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    f.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    f.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -5, a * -10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 58, a * 33);
    f.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    f.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    f.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    f.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    f.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    f.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    f.closePath();
    Td(f, c[1], c[2], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 167, a * 120);
    f.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    f.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    f.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 25, a * 64);
    f.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    f.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    f.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    f.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    f.closePath();
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 161, a * 141);
    f.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    f.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    f.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    f.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    f.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    f.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    Td(f, wj, c[4], a * 4);
    return d;
  }
  function Cu(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 154;
    d.height = a * 261;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(0, a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 125, a * 69);
    f.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    f.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    f.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    f.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    f.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    f.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    f.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
    f.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    f.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(0, a * -10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 125, a * 69);
    f.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    f.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    f.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    f.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    f.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    f.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    f.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
    f.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    f.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    f.closePath();
    Td(f, c[1], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 31, a * 43);
    f.bezierCurveTo(a * 31, a * 61, a * 43, a * 70, a * 51, a * 75);
    f.bezierCurveTo(a * 48, a * 84, a * 41, a * 89, a * 33, a * 86);
    f.bezierCurveTo(a * 23, a * 88, a * 20, a * 76, a * 23, a * 62);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 45, a * 29);
    f.bezierCurveTo(a * 49, a * 45, a * 61, a * 54, a * 64, a * 55);
    f.bezierCurveTo(a * 67.5, a * 53, a * 67.5, a * 53, a * 71, a * 51);
    f.bezierCurveTo(a * 80, a * 44, a * 83, a * 33, a * 82, a * 20);
    f.bezierCurveTo(a * 59, a * 17, a * 51, a * 23, a * 45, a * 30);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 86, a * 56);
    f.bezierCurveTo(a * 90, a * 33, a * 103, a * 25, a * 105, a * 27);
    f.bezierCurveTo(a * 116, a * 31, a * 121, a * 45, a * 122, a * 50);
    f.bezierCurveTo(a * 112, a * 62, a * 103, a * 63, a * 91, a * 62);
    f.bezierCurveTo(a * 89, a * 59.5, a * 89, a * 59.5, a * 87, a * 57);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 93, a * 81);
    f.bezierCurveTo(a * 109, a * 82, a * 123, a * 70, a * 124, a * 63);
    f.bezierCurveTo(a * 124, a * 75.5, a * 124, a * 75.5, a * 124, a * 88);
    f.bezierCurveTo(a * 119, a * 99, a * 103, a * 103, a * 94, a * 103);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 93, a * 124);
    f.bezierCurveTo(a * 108, a * 125, a * 122, a * 113, a * 124, a * 106);
    f.bezierCurveTo(a * 124, a * 119, a * 124, a * 129, a * 124, a * 132);
    f.bezierCurveTo(a * 110, a * 147, a * 94, a * 148, a * 90, a * 147);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 90, a * 170);
    f.bezierCurveTo(a * 104, a * 166, a * 122, a * 158, a * 122, a * 151);
    f.bezierCurveTo(a * 122, a * 162.5, a * 122, a * 162.5, a * 122, a * 174);
    f.bezierCurveTo(a * 111, a * 191, a * 97, a * 191, a * 89, a * 191);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 88, a * 208);
    f.bezierCurveTo(a * 100, a * 209, a * 115, a * 205, a * 122, a * 193);
    f.bezierCurveTo(a * 122, a * 205.5, a * 122, a * 205.5, a * 122, a * 218);
    f.bezierCurveTo(a * 115, a * 229, a * 103, a * 235, a * 90, a * 228);
    f.bezierCurveTo(a * 88, a * 224, a * 88, a * 217, a * 88, a * 211);
    f.closePath();
    Td(f, c[3]);
    f.globalAlpha = 0.4;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 22, a * 81);
    f.bezierCurveTo(a * 32, a * 84, a * 41, a * 81, a * 45, a * 68);
    f.bezierCurveTo(a * 50, a * 50, a * 62, a * 40, a * 79, a * 43);
    f.bezierCurveTo(a * 95, a * 45, a * 102, a * 58, a * 101, a * 81);
    f.bezierCurveTo(a * 99.5, a * 120.5, a * 99.5, a * 120.5, a * 98, a * 160);
    f.bezierCurveTo(a * 96.5, a * 191.5, a * 96.5, a * 191.5, a * 95, a * 223);
    f.bezierCurveTo(a * 93, a * 232, a * 101, a * 235, a * 108, a * 238);
    f.bezierCurveTo(a * 100, a * 240, a * 90, a * 233, a * 90, a * 224);
    f.bezierCurveTo(a * 92, a * 157, a * 92, a * 157, a * 94, a * 90);
    f.bezierCurveTo(a * 94, a * 56, a * 89, a * 53, a * 77, a * 51);
    f.bezierCurveTo(a * 58, a * 50, a * 54, a * 59, a * 49, a * 75);
    f.bezierCurveTo(a * 44, a * 91, a * 28, a * 90, a * 23, a * 81);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 82, a * 123);
    f.bezierCurveTo(a * 88, a * 130, a * 88, a * 127, a * 94, a * 128);
    f.bezierCurveTo(a * 91, a * 136, a * 94, a * 137, a * 99, a * 142);
    f.bezierCurveTo(a * 97, a * 149, a * 99, a * 152, a * 105, a * 155);
    f.bezierCurveTo(a * 107, a * 159, a * 113, a * 159, a * 120, a * 158);
    f.bezierCurveTo(a * 121, a * 160, a * 125, a * 163, a * 132, a * 163);
    f.bezierCurveTo(a * 133, a * 166, a * 136, a * 169, a * 138, a * 170);
    f.bezierCurveTo(a * 133, a * 171, a * 132, a * 172, a * 129, a * 174);
    f.bezierCurveTo(a * 122, a * 170, a * 120, a * 170, a * 116, a * 174);
    f.bezierCurveTo(a * 108, a * 170.5, a * 108, a * 170.5, a * 100, a * 167);
    f.bezierCurveTo(a * 95, a * 172, a * 94, a * 179, a * 95, a * 184);
    f.bezierCurveTo(a * 87, a * 185, a * 87, a * 189, a * 88, a * 194);
    f.bezierCurveTo(a * 82, a * 194, a * 81, a * 195, a * 79, a * 197);
    f.bezierCurveTo(a * 78, a * 192, a * 78, a * 191, a * 77, a * 189);
    f.bezierCurveTo(a * 81, a * 185, a * 82, a * 183, a * 80, a * 176);
    f.bezierCurveTo(a * 89, a * 170, a * 92, a * 168, a * 95, a * 163);
    f.bezierCurveTo(a * 91, a * 151, a * 88, a * 151, a * 82, a * 147);
    f.bezierCurveTo(a * 85, a * 142, a * 85, a * 137, a * 81, a * 133);
    f.bezierCurveTo(a * 84, a * 127, a * 84, a * 125, a * 82, a * 124);
    f.closePath();
    Td(f, c[4], c[5], a * 4);
    Pd(f, a * 107, a * 152, a * 9);
    Td(f, c[6]);
    Pd(f, a * 105, a * 173, a * 9);
    Td(f, c[6]);
    Pd(f, a * 87, a * 161, a * 9);
    Td(f, c[6]);
    Pd(f, a * 106, a * 147, a * 4);
    Td(f, c[7]);
    Pd(f, a * 104, a * 167, a * 4);
    Td(f, c[7]);
    Pd(f, a * 86, a * 154, a * 4);
    Td(f, c[7]);
    return d;
  }
  function Du(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 20, a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 112, a * 356);
    f.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    f.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    f.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    f.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    f.closePath();
    Td(f, c[0]);
    f.save();
    f.translate(a * 131, a * 423);
    f.rotate(0.16);
    yd(f, a * -14, a * -53, a * 28, a * 106, a * 10);
    f.restore();
    Td(f, c[0]);
    f.save();
    f.translate(a * 122, a * 480);
    f.rotate(1.72);
    wd(f, 4, a * 26.476404589747453, a * 10);
    f.restore();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 210, a * 387);
    f.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    f.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    f.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    f.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    f.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    f.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 129, a * 338);
    f.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    f.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    f.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    f.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    f.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -20, a * -20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 112, a * 356);
    f.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    f.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    f.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    f.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    f.closePath();
    Td(f, c[1], c[2], a * 12.5);
    f.save();
    f.translate(a * 131, a * 423);
    f.rotate(0.16);
    yd(f, a * -14, a * -53, a * 28, a * 106, a * 10);
    f.restore();
    Td(f, c[4], c[5], a * 12.5);
    f.save();
    f.translate(a * 122, a * 480);
    f.rotate(1.72);
    wd(f, 4, a * 26.476404589747453, a * 10);
    f.restore();
    Td(f, c[1], c[2], a * 12.5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 210, a * 387);
    f.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    f.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    f.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    f.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    f.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    f.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    f.closePath();
    Td(f, c[1], c[2], a * 12.5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 129, a * 338);
    f.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    f.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    f.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    f.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    f.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    f.closePath();
    Td(f, c[3]);
    return d;
  }
  function Eu(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 217;
    d.height = a * 215;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 79, a * 113);
    f.bezierCurveTo(a * 135, a * 98, a * 136, a * 96, a * 142, a * 97);
    f.bezierCurveTo(a * 167, a * 106, a * 167, a * 106, a * 171, a * 109);
    f.bezierCurveTo(a * 173, a * 120, a * 173, a * 134, a * 169, a * 141);
    f.bezierCurveTo(a * 140, a * 149.5, a * 140, a * 149.5, a * 111, a * 158);
    f.closePath();
    Td(f, c[1], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 154, a * 103);
    f.bezierCurveTo(a * 167, a * 91, a * 175, a * 87, a * 176, a * 94);
    f.bezierCurveTo(a * 175, a * 102, a * 176, a * 102, a * 186, a * 103);
    f.bezierCurveTo(a * 191, a * 104, a * 192, a * 105, a * 185, a * 116);
    f.bezierCurveTo(a * 183, a * 120, a * 191, a * 124, a * 189, a * 129);
    f.bezierCurveTo(a * 185, a * 139, a * 178, a * 134, a * 166, a * 131);
    f.closePath();
    Td(f, c[1], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 60, a * 46);
    f.bezierCurveTo(a * 60, a * 34, a * 60, a * 29, a * 56, a * 19);
    f.bezierCurveTo(a * 52, a * 12, a * 52, a * 16, a * 49, a * 24);
    f.bezierCurveTo(a * 48, a * 27, a * 46, a * 28, a * 39, a * 27);
    f.bezierCurveTo(a * 33, a * 26, a * 34, a * 31, a * 35, a * 37);
    f.bezierCurveTo(a * 36, a * 41, a * 27, a * 46, a * 29, a * 52);
    f.bezierCurveTo(a * 36, a * 55, a * 35, a * 56, a * 31, a * 59);
    f.bezierCurveTo(a * 27, a * 65, a * 32, a * 64, a * 35, a * 62);
    f.closePath();
    Td(f, c[4], c[5], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 46, a * 50);
    f.bezierCurveTo(a * 51, a * 35, a * 70, a * 32, a * 78, a * 29);
    f.bezierCurveTo(a * 84, a * 27, a * 113, a * 36, a * 127, a * 41);
    f.bezierCurveTo(a * 140, a * 47, a * 147, a * 69, a * 137, a * 73);
    f.bezierCurveTo(a * 124, a * 92, a * 117, a * 92, a * 109, a * 94);
    f.bezierCurveTo(a * 101, a * 96, a * 89, a * 92, a * 65, a * 83);
    f.bezierCurveTo(a * 54, a * 80, a * 46, a * 58, a * 46, a * 51);
    f.closePath();
    Td(f, c[4], c[5], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 51, a * 40);
    f.bezierCurveTo(a * 49, a * 34, a * 49, a * 34, a * 47, a * 28);
    f.bezierCurveTo(a * 38, a * 28, a * 34, a * 27, a * 37, a * 37);
    f.bezierCurveTo(a * 43, a * 40.5, a * 43, a * 40.5, a * 49, a * 44);
    f.closePath();
    Td(f, c[7]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 29, a * 48);
    f.bezierCurveTo(a * 38, a * 49, a * 38, a * 49, a * 47, a * 50);
    f.bezierCurveTo(a * 46.5, a * 51.5, a * 46.5, a * 51.5, a * 46, a * 53);
    f.bezierCurveTo(a * 40, a * 53.5, a * 40, a * 53.5, a * 34, a * 54);
    f.bezierCurveTo(a * 29, a * 51, a * 32, a * 51.5, a * 30, a * 49);
    f.closePath();
    Td(f, c[7]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 89, a * 61);
    f.bezierCurveTo(a * 101, a * 70, a * 109, a * 90, a * 102, a * 90);
    f.bezierCurveTo(a * 97, a * 91, a * 87, a * 91, a * 60, a * 80);
    f.bezierCurveTo(a * 48, a * 65, a * 46, a * 56, a * 48, a * 53);
    f.bezierCurveTo(a * 50, a * 52, a * 66, a * 56, a * 89, a * 61);
    f.closePath();
    Td(f, c[7]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 99, a * 59);
    f.bezierCurveTo(a * 115, a * 45, a * 125, a * 42, a * 129, a * 47);
    f.bezierCurveTo(a * 138, a * 56, a * 140, a * 63, a * 138, a * 67);
    f.bezierCurveTo(a * 131, a * 80, a * 122, a * 87, a * 114, a * 90);
    f.bezierCurveTo(a * 105, a * 80, a * 95, a * 62, a * 98, a * 61);
    f.closePath();
    Td(f, c[7]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 118, a * 62);
    f.bezierCurveTo(a * 139, a * 45, a * 153, a * 40, a * 150, a * 48);
    f.bezierCurveTo(a * 145, a * 57, a * 157, a * 63, a * 157, a * 70);
    f.bezierCurveTo(a * 157, a * 74, a * 142, a * 77, a * 142, a * 85);
    f.bezierCurveTo(a * 143, a * 91, a * 141, a * 92, a * 135, a * 90);
    f.bezierCurveTo(a * 132, a * 90, a * 132, a * 96, a * 124, a * 99);
    f.bezierCurveTo(a * 118, a * 93, a * 116, a * 77, a * 116, a * 64);
    f.closePath();
    Td(f, c[4], c[5], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 90, a * 130);
    f.bezierCurveTo(a * 157, a * 115, a * 165, a * 111, a * 167, a * 115);
    f.bezierCurveTo(a * 170, a * 117, a * 171, a * 135, a * 167, a * 141);
    f.bezierCurveTo(a * 135.5, a * 149.5, a * 135.5, a * 149.5, a * 104, a * 158);
    f.closePath();
    Td(f, c[8]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 53, a * 119);
    f.bezierCurveTo(a * 46, a * 120, a * 40, a * 118, a * 34, a * 116);
    f.bezierCurveTo(a * 28, a * 111, a * 41, a * 112, a * 39, a * 108);
    f.bezierCurveTo(a * 36, a * 100, a * 49, a * 102, a * 53, a * 95);
    f.bezierCurveTo(a * 57, a * 84, a * 58, a * 85, a * 63, a * 93);
    f.bezierCurveTo(a * 68, a * 96, a * 72, a * 94, a * 80, a * 88);
    f.bezierCurveTo(a * 80, a * 96, a * 78, a * 107, a * 66, a * 115);
    f.closePath();
    Td(f, c[9], c[10], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 118, a * 64);
    f.bezierCurveTo(a * 133.5, a * 57, a * 133.5, a * 57, a * 149, a * 50);
    f.bezierCurveTo(a * 145, a * 54, a * 154, a * 65, a * 157, a * 68);
    f.bezierCurveTo(a * 138.5, a * 66.5, a * 138.5, a * 66.5, a * 120, a * 65);
    f.closePath();
    Td(f, c[8]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 118, a * 65);
    f.bezierCurveTo(a * 129, a * 77, a * 129, a * 77, a * 140, a * 89);
    f.bezierCurveTo(a * 131, a * 89, a * 130, a * 92, a * 128, a * 96);
    f.bezierCurveTo(a * 123.5, a * 82, a * 123.5, a * 82, a * 119, a * 68);
    f.closePath();
    Td(f, c[8]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 51, a * 112);
    f.bezierCurveTo(a * 63, a * 108, a * 78, a * 111, a * 88, a * 112);
    f.bezierCurveTo(a * 98, a * 122, a * 117, a * 136, a * 125, a * 157);
    f.bezierCurveTo(a * 123, a * 180, a * 123, a * 185, a * 118, a * 186);
    f.bezierCurveTo(a * 101, a * 190, a * 89, a * 191, a * 79, a * 187);
    f.bezierCurveTo(a * 53, a * 165, a * 50, a * 153, a * 47, a * 144);
    f.bezierCurveTo(a * 46, a * 128, a * 46, a * 124, a * 50, a * 112);
    f.closePath();
    Td(f, c[9], c[10], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 50, a * 114);
    f.bezierCurveTo(a * 81, a * 149, a * 80, a * 147, a * 80, a * 149);
    f.bezierCurveTo(a * 82, a * 155, a * 80, a * 182, a * 74, a * 182);
    f.bezierCurveTo(a * 60, a * 172, a * 52, a * 157, a * 47, a * 144);
    f.closePath();
    Td(f, c[11], c[11], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 85, a * 152);
    f.bezierCurveTo(a * 99, a * 150, a * 109, a * 152, a * 119, a * 156);
    f.bezierCurveTo(a * 122, a * 163, a * 122, a * 174, a * 117, a * 182);
    f.closePath();
    f.bezierCurveTo(a * 93, a * 188, a * 82, a * 187, a * 83, a * 179);
    Td(f, c[11], c[11], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 104, a * 166);
    f.bezierCurveTo(a * 133, a * 165, a * 142, a * 168, a * 137, a * 173);
    f.bezierCurveTo(a * 127, a * 177, a * 137, a * 195, a * 126, a * 196);
    f.bezierCurveTo(a * 112, a * 195, a * 112, a * 194, a * 109, a * 199);
    f.bezierCurveTo(a * 105, a * 205, a * 102, a * 195, a * 96, a * 197);
    f.bezierCurveTo(a * 84, a * 201, a * 88, a * 198, a * 90, a * 187);
    f.bezierCurveTo(a * 96, a * 171, a * 97, a * 170, a * 103, a * 167);
    f.closePath();
    Td(f, c[9], c[10], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 105, a * 168);
    f.bezierCurveTo(a * 118, a * 172.5, a * 118, a * 172.5, a * 131, a * 177);
    f.bezierCurveTo(a * 133, a * 190, a * 132, a * 199, a * 116, a * 194);
    f.bezierCurveTo(a * 110, a * 182, a * 110, a * 182, a * 104, a * 170);
    f.closePath();
    Td(f, c[10]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 102, a * 169);
    f.bezierCurveTo(a * 100.5, a * 182, a * 100.5, a * 182, a * 99, a * 195);
    f.bezierCurveTo(a * 93.5, a * 196.5, a * 93.5, a * 196.5, a * 88, a * 198);
    f.bezierCurveTo(a * 94, a * 176, a * 96, a * 174, a * 101, a * 168);
    f.closePath();
    Td(f, c[9], c[9], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 64, a * 107);
    f.bezierCurveTo(a * 64, a * 101, a * 64, a * 101, a * 64, a * 95);
    f.bezierCurveTo(a * 57, a * 86, a * 57, a * 84, a * 53, a * 97);
    f.bezierCurveTo(a * 55, a * 103.5, a * 55, a * 103.5, a * 57, a * 110);
    f.closePath();
    Td(f, c[11], c[11], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 40, a * 108);
    f.bezierCurveTo(a * 46.5, a * 111, a * 46.5, a * 111, a * 53, a * 114);
    f.bezierCurveTo(a * 50.5, a * 117, a * 50.5, a * 117, a * 48, a * 120);
    f.bezierCurveTo(a * 40.5, a * 117.5, a * 40.5, a * 117.5, a * 33, a * 115);
    f.bezierCurveTo(a * 36, a * 112, a * 36, a * 112, a * 39, a * 109);
    f.closePath();
    Td(f, c[11], c[11], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 189, a * 106);
    f.bezierCurveTo(a * 178.5, a * 110.5, a * 178.5, a * 110.5, a * 168, a * 115);
    f.bezierCurveTo(a * 168.5, a * 119, a * 168.5, a * 119, a * 169, a * 123);
    f.bezierCurveTo(a * 179, a * 124.5, a * 179, a * 124.5, a * 189, a * 126);
    f.bezierCurveTo(a * 182, a * 118, a * 183, a * 115, a * 188, a * 106);
    f.closePath();
    Td(f, c[8]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 69, a * 178);
    f.bezierCurveTo(a * 69, a * 141, a * 70, a * 136, a * 77, a * 137);
    f.bezierCurveTo(a * 88, a * 133, a * 101, a * 134, a * 108, a * 137);
    Td(f, undefined, c[3], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 55, a * 161);
    f.bezierCurveTo(a * 54, a * 124, a * 55, a * 119, a * 62, a * 119);
    f.bezierCurveTo(a * 74, a * 117, a * 85, a * 117, a * 93, a * 119);
    Td(f, w, c[3], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 91, a * 29);
    f.bezierCurveTo(a * 74, a * 33, a * 62, a * 46, a * 57, a * 54);
    f.bezierCurveTo(a * 57, a * 63, a * 68, a * 76, a * 77, a * 87);
    Td(f, Wn, c[6], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 107, a * 33);
    f.bezierCurveTo(a * 82, a * 51, a * 80, a * 52, a * 79, a * 59);
    f.bezierCurveTo(a * 78, a * 65, a * 93, a * 86, a * 101, a * 93);
    Td(f, undefined, c[6], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 130, a * 98);
    f.bezierCurveTo(a * 126.5, a * 103, a * 126.5, a * 103, a * 123, a * 108);
    f.bezierCurveTo(a * 133.5, a * 107, a * 133.5, a * 107, a * 144, a * 106);
    f.bezierCurveTo(a * 138.5, a * 110, a * 138.5, a * 110, a * 133, a * 114);
    f.bezierCurveTo(a * 142, a * 114, a * 142, a * 114, a * 151, a * 114);
    f.bezierCurveTo(a * 146.5, a * 119.5, a * 146.5, a * 119.5, a * 142, a * 125);
    f.bezierCurveTo(a * 146.5, a * 127, a * 146.5, a * 127, a * 151, a * 129);
    f.bezierCurveTo(a * 147.5, a * 132, a * 147.5, a * 132, a * 144, a * 135);
    f.bezierCurveTo(a * 148, a * 137, a * 148, a * 137, a * 152, a * 139);
    f.bezierCurveTo(a * 149, a * 142.5, a * 149, a * 142.5, a * 146, a * 146);
    Td(f, ur, c[3], a * 4);
    return d;
  }
  function Fu(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 350;
    d.height = a * 140;
    f.translate(a * -50, a * -150);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 184.5, a * 222.0625);
    f.bezierCurveTo(a * 185.5, a * 184.0625, a * 302.5, a * 171.0625, a * 313.5, a * 222.0625);
    f.bezierCurveTo(a * 330.5, a * 263.0625, a * 181.5, a * 274.0625, a * 184.5, a * 223.0625);
    f.closePath();
    Td(f, c[0], c[1], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 131.5, a * 241.0625);
    f.bezierCurveTo(a * 144.5, a * 278.0625, a * 270.5, a * 209.0625, a * 228.5, a * 174.0625);
    f.bezierCurveTo(a * 196.5, a * 147.0625, a * 117.5, a * 196.0625, a * 131.5, a * 240.0625);
    f.closePath();
    Td(f, c[0], c[1], a * 8);
    Pd(f, a * 270.5, a * 225.0625, a * 15.811388300841896);
    Td(f, c[2]);
    Pd(f, a * 243.5, a * 225.0625, a * 6.082762530298219);
    Td(f, c[2]);
    Pd(f, a * 255.5, a * 210.0625, a * 10.816653826391969);
    Td(f, c[2]);
    Pd(f, a * 167.5, a * 215.0625, a * 15.297058540778355);
    Td(f, c[2]);
    Pd(f, a * 176.5, a * 204.0625, a * 7.280109889280518);
    Td(f, c[2]);
    Pd(f, a * 206.5, a * 189.0625, a * 7.280109889280518);
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 151.5, a * 212.0625);
    f.bezierCurveTo(a * 161.5, a * 204.0625, a * 173.5, a * 214.0625, a * 158.5, a * 221.0625);
    f.bezierCurveTo(a * 145.5, a * 228.0625, a * 144.5, a * 216.0625, a * 151.5, a * 212.0625);
    f.closePath();
    Td(f, c[3], c[4], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 194.5, a * 209.0625);
    f.bezierCurveTo(a * 205.5, a * 202.0625, a * 215.5, a * 207.0625, a * 199.5, a * 217.0625);
    f.bezierCurveTo(a * 187.5, a * 224.0625, a * 182.5, a * 217.0625, a * 194.5, a * 209.0625);
    f.closePath();
    Td(f, c[3], c[4], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 188.5, a * 183.0625);
    f.bezierCurveTo(a * 201.5, a * 176.0625, a * 213.5, a * 187.0625, a * 193.5, a * 193.0625);
    f.bezierCurveTo(a * 185.5, a * 194.0625, a * 175.5, a * 189.0625, a * 188.5, a * 183.0625);
    f.closePath();
    Td(f, c[3], c[4], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 261.5, a * 202.0625);
    f.bezierCurveTo(a * 274.5, a * 201.0625, a * 282.5, a * 214.0625, a * 261.5, a * 215.0625);
    f.bezierCurveTo(a * 246.5, a * 214.0625, a * 248.5, a * 203.0625, a * 261.5, a * 202.0625);
    f.closePath();
    Td(f, c[3], c[4], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 240.5, a * 231.0625);
    f.bezierCurveTo(a * 255.5, a * 231.0625, a * 254.5, a * 243.0625, a * 240.5, a * 242.0625);
    f.bezierCurveTo(a * 225.5, a * 239.0625, a * 225.5, a * 232.0625, a * 240.5, a * 231.0625);
    f.closePath();
    Td(f, c[3], c[4], a * 4);
    return d;
  }
  function Gu(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 20, a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 111, a * 351);
    f.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    f.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    f.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    f.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    f.closePath();
    Td(f, c[0]);
    f.save();
    f.translate(a * 129.5, a * 424);
    f.rotate(0.16);
    yd(f, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    f.restore();
    Td(f, c[0]);
    Pd(f, a * 121, a * 480, a * 20.396078054371138);
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 90, a * 311);
    f.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
    f.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    f.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    f.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    f.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -20, a * -20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 111, a * 351);
    f.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    f.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    f.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    f.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    f.closePath();
    Td(f, c[1], c[2], a * 12.5);
    f.save();
    f.translate(a * 129.5, a * 424);
    f.rotate(0.16);
    yd(f, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    f.restore();
    Td(f, c[4], c[5], a * 12.5);
    Pd(f, a * 121, a * 480, a * 20.396078054371138);
    Td(f, c[4], c[5], a * 12.5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 90, a * 311);
    f.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
    f.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    f.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    f.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    f.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    f.closePath();
    Td(f, c[1], c[2], a * 12.5);
    return d;
  }
  const Hu = 15190883;
  const Iu = 15190883 .ᐃᐃⲆᐃ;
  const Ju = `const ΔⲆᐃΔᐃᐃᐃ = (typeof ᐃΔⵠⲆᐃΔᐃ === "${Iu}") ? 1 : 0; return ΔⲆᐃΔᐃᐃᐃ;`;
  function Ku(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 118;
    d.height = a * 114;
    f.translate(0, a * 10);
    Pd(f, a * 42, a * 43, a * 24.758836806279895);
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 65, a * 90);
    f.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    f.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 87, a * 45);
    f.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    f.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    f.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    f.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    f.closePath();
    Td(f, c[0]);
    f.translate(0, a * -10);
    Pd(f, a * 42, a * 43, a * 24.758836806279895);
    Td(f, c[1], c[2], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 65, a * 90);
    f.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    f.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    f.closePath();
    Td(f, c[1], c[2], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 87, a * 45);
    f.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    f.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    f.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    f.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    f.closePath();
    Td(f, c[1], c[2], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 52, a * 16);
    f.bezierCurveTo(a * 55, a * 19, a * 54, a * 20, a * 55, a * 22);
    f.bezierCurveTo(a * 52, a * 24.5, a * 52, a * 24.5, a * 49, a * 27);
    f.bezierCurveTo(a * 45, a * 25, a * 45, a * 25, a * 41, a * 23);
    f.bezierCurveTo(a * 45, a * 19, a * 48, a * 16, a * 52, a * 16);
    f.closePath();
    Td(f, c[3], c[4], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 62, a * 30);
    f.bezierCurveTo(a * 66, a * 29, a * 64, a * 30, a * 66, a * 30);
    f.bezierCurveTo(a * 67, a * 31, a * 67, a * 31, a * 68, a * 32);
    f.bezierCurveTo(a * 66.5, a * 33.5, a * 66.5, a * 33.5, a * 65, a * 35);
    f.bezierCurveTo(a * 63.5, a * 32.5, a * 63.5, a * 32.5, a * 62, a * 30);
    f.closePath();
    Td(f, c[3], c[4], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 29, a * 21);
    f.bezierCurveTo(a * 31, a * 22, a * 31, a * 26, a * 29, a * 29);
    f.bezierCurveTo(a * 26, a * 28.5, a * 26, a * 28.5, a * 23, a * 28);
    f.bezierCurveTo(a * 23, a * 26.5, a * 23, a * 26.5, a * 23, a * 25);
    f.bezierCurveTo(a * 25, a * 23, a * 25, a * 23, a * 27, a * 21);
    f.closePath();
    Td(f, c[3], c[4], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 18, a * 36);
    f.bezierCurveTo(a * 23, a * 36, a * 24, a * 42, a * 19, a * 46);
    f.bezierCurveTo(a * 12, a * 39, a * 15, a * 38, a * 18, a * 37);
    f.closePath();
    Td(f, c[3], c[4], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 30, a * 34);
    f.bezierCurveTo(a * 35, a * 36, a * 36, a * 39, a * 32, a * 45);
    f.bezierCurveTo(a * 25, a * 46, a * 25, a * 44, a * 30, a * 34);
    f.closePath();
    Td(f, c[3], c[4], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 59, a * 35);
    f.bezierCurveTo(a * 58, a * 27, a * 57, a * 27, a * 52, a * 31);
    f.bezierCurveTo(a * 50, a * 36, a * 53, a * 38, a * 58, a * 36);
    f.closePath();
    Td(f, c[3], c[4], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 63, a * 46);
    f.bezierCurveTo(a * 64.5, a * 46.5, a * 64.5, a * 46.5, a * 66, a * 47);
    f.bezierCurveTo(a * 70, a * 50, a * 70, a * 53, a * 61, a * 55);
    f.bezierCurveTo(a * 62, a * 50.5, a * 62, a * 50.5, a * 63, a * 46);
    f.closePath();
    Td(f, c[3], c[4], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 41, a * 42);
    f.bezierCurveTo(a * 47, a * 41, a * 53, a * 47, a * 46, a * 51);
    f.bezierCurveTo(a * 38, a * 49, a * 39, a * 46, a * 41, a * 43);
    f.closePath();
    Td(f, c[3], c[4], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 44, a * 57);
    f.bezierCurveTo(a * 54, a * 57, a * 54, a * 58, a * 55, a * 61);
    f.bezierCurveTo(a * 54, a * 63, a * 52, a * 64, a * 48, a * 65);
    f.closePath();
    Td(f, c[3], c[4], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 20, a * 52);
    f.bezierCurveTo(a * 25, a * 51, a * 27, a * 50, a * 28, a * 54);
    f.bezierCurveTo(a * 27, a * 58, a * 24, a * 58, a * 22, a * 58);
    f.bezierCurveTo(a * 21, a * 55.5, a * 21, a * 55.5, a * 20, a * 53);
    f.closePath();
    Td(f, c[3], c[4], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 30, a * 61);
    f.bezierCurveTo(a * 37, a * 61, a * 39, a * 63, a * 39, a * 68);
    f.bezierCurveTo(a * 36, a * 68.5, a * 36, a * 68.5, a * 33, a * 69);
    f.bezierCurveTo(a * 30.5, a * 67.5, a * 30.5, a * 67.5, a * 28, a * 66);
    f.closePath();
    Td(f, c[3], c[4], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 88, a * 45);
    f.bezierCurveTo(a * 90, a * 46.5, a * 90, a * 46.5, a * 92, a * 48);
    f.bezierCurveTo(a * 92, a * 50, a * 92, a * 50, a * 92, a * 52);
    f.closePath();
    Td(f, c[3], c[4], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 96, a * 53);
    f.bezierCurveTo(a * 97.5, a * 55, a * 97.5, a * 55, a * 99, a * 57);
    f.bezierCurveTo(a * 97.5, a * 59.5, a * 97.5, a * 59.5, a * 96, a * 62);
    f.bezierCurveTo(a * 93.5, a * 60.5, a * 93.5, a * 60.5, a * 91, a * 59);
    f.bezierCurveTo(a * 91.5, a * 57, a * 91.5, a * 57, a * 92, a * 55);
    f.closePath();
    Td(f, c[3], c[4], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 92, a * 71);
    f.bezierCurveTo(a * 94.5, a * 70.5, a * 94.5, a * 70.5, a * 97, a * 70);
    f.bezierCurveTo(a * 98.5, a * 72.5, a * 98.5, a * 72.5, a * 100, a * 75);
    f.bezierCurveTo(a * 97, a * 76.5, a * 97, a * 76.5, a * 94, a * 78);
    f.closePath();
    Td(f, c[3], c[4], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 95, a * 82);
    f.bezierCurveTo(a * 96, a * 83, a * 96, a * 83, a * 97, a * 84);
    f.bezierCurveTo(a * 97, a * 85.5, a * 97, a * 85.5, a * 97, a * 87);
    f.bezierCurveTo(a * 93.5, a * 87.5, a * 93.5, a * 87.5, a * 90, a * 88);
    f.closePath();
    Td(f, c[3], c[4], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 86, a * 72);
    f.bezierCurveTo(a * 89, a * 76, a * 88, a * 81, a * 85, a * 82);
    f.bezierCurveTo(a * 80, a * 80, a * 82, a * 78, a * 85, a * 72);
    f.closePath();
    Td(f, c[3], c[4], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 80, a * 86);
    f.bezierCurveTo(a * 84, a * 88, a * 86, a * 88, a * 85, a * 93);
    f.bezierCurveTo(a * 80, a * 96, a * 79, a * 96, a * 76, a * 91);
    f.closePath();
    Td(f, c[3], c[4], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 84, a * 46);
    f.bezierCurveTo(a * 93, a * 51, a * 91, a * 62, a * 80, a * 78);
    f.bezierCurveTo(a * 74, a * 86, a * 66, a * 90, a * 60, a * 86);
    f.bezierCurveTo(a * 55, a * 79, a * 57, a * 73, a * 67, a * 57);
    f.bezierCurveTo(a * 71, a * 51, a * 79, a * 44, a * 84, a * 46);
    f.closePath();
    Td(f, c[5], c[6], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 76, a * 60);
    f.bezierCurveTo(a * 80, a * 66, a * 75, a * 74, a * 68, a * 74);
    f.bezierCurveTo(a * 60, a * 64, a * 68, a * 59, a * 76, a * 59);
    f.closePath();
    Td(f, c[7], c[8], a * 5);
    return d;
  }
  const ec = 7;
  function ic(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 135;
    d.height = a * 120;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 3.5, a * 55.25);
    f.bezierCurveTo(a * 3.5, a * 114.25, a * 2.5, a * 109.25, a * 3.5, a * 112.25);
    f.bezierCurveTo(a * 5.5, a * 119.25, a * 8.5, a * 119.25, a * 11.5, a * 119.25);
    f.bezierCurveTo(a * 15.5, a * 114.25, a * 13.5, a * 95.25, a * 14.5, a * 82.25);
    f.closePath();
    Td(f, c[0], c[1], a * 7);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 6.5, a * 43.25);
    f.bezierCurveTo(a * 3.5, a * 27.25, a * 7.5, a * 20.25, a * 25.5, a * 11.25);
    f.bezierCurveTo(a * 45.5, a * -0.75, a * 73.5, a * 1.25, a * 107.5, a * 10.25);
    f.bezierCurveTo(a * 131.5, a * 21.25, a * 125.5, a * 34.25, a * 125.5, a * 36.25);
    f.closePath();
    Td(f, c[0], c[1], a * 7);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 120.5, a * 62.25);
    f.bezierCurveTo(a * 121.5, a * 95.25, a * 120.5, a * 80.25, a * 120.5, a * 100.25);
    f.bezierCurveTo(a * 118.5, a * 119.25, a * 123.5, a * 118.25, a * 129.5, a * 113.25);
    f.bezierCurveTo(a * 133.5, a * 107.25, a * 130.5, a * 97.25, a * 130.5, a * 87.25);
    f.bezierCurveTo(a * 129.5, a * 56.25, a * 130, a * 70.75, a * 129.5, a * 54.25);
    f.closePath();
    Td(f, c[0], c[1], a * 7);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 17.5, a * 27);
    f.bezierCurveTo(a * 48.5, a * 5, a * 93.5, a * 14, a * 118.5, a * 26);
    f.bezierCurveTo(a * 132.5, a * 35, a * 133.5, a * 52, a * 132.5, a * 68);
    f.bezierCurveTo(a * 125.5, a * 87, a * 116.5, a * 84, a * 96.5, a * 75);
    f.bezierCurveTo(a * 60.5, a * 66, a * 52.5, a * 74, a * 37.5, a * 78);
    f.bezierCurveTo(a * 2.5, a * 86, a * 3.5, a * 78, a * 1.5, a * 61);
    f.bezierCurveTo(a * 1.5, a * 37, a * 9.5, a * 32, a * 15.5, a * 28);
    f.closePath();
    Td(f, c[2], c[3], a * 7);
    return d;
  }
  function tc(b, c, d) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    var i = b * 120;
    var a = b * 150;
    var j = b * 60;
    var k = j / 4;
    var h = b * 15;
    f.width = i;
    f.height = a;
    g.save();
    g.translate(i / 2 + b * 0, a / 2 + b * 0 + h);
    g.rotate(Math.PI / 3);
    g.globalAlpha = 0.5;
    wd(g, 8, j, k);
    Td(g, d[0]);
    g.restore();
    g.save();
    g.translate(i / 2 - b * 11, a / 2 + b * 12);
    g.globalAlpha = 1;
    g.rotate(Math.PI / 3);
    g.translate(0, -h);
    wd(g, 8, j, k);
    Td(g, d[1]);
    g.restore();
    g.save();
    g.translate(i / 2 - b * 9, a / 2 - b * 12);
    g.rotate(Math.PI / 2.8);
    wd(g, 5, j * 0.5, k * 0.4);
    Td(g, d[2]);
    g.restore();
    g.save();
    g.translate(i / 2 + b * 19, a / 2 + b * 5);
    g.rotate(Math.PI / 1);
    wd(g, 5, j * 0.5, k * 0.4);
    Td(g, d[2]);
    g.restore();
    g.save();
    g.translate(i / 2 - b * 8, a / 2 + b * 20);
    g.rotate(Math.PI / 2.25);
    wd(g, 5, j * 0.5, k * 0.4);
    Td(g, d[2]);
    g.restore();
    return f;
  }
  function nc(b, c, d, f, g) {
    var i = document.createElement("canvas");
    var a = i.getContext("2d");
    if (f == 0) {
      var j = b * 270;
      var k = b * 250;
      i.width = j;
      i.height = k;
      a.beginPath();
      a.moveTo(b * 140, b * 3);
      a.translate(b * -25, b * -20);
      a.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
      a.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
      a.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
      a.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
      a.bezierCurveTo(b * 20, b * 158, b * 35, b * 78, b * 59, b * 56);
      a.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
      a.closePath();
      Td(a, d[0]);
    } else if (f == 1) {
      j = b * 430;
      k = b * 350;
      i.width = j;
      i.height = k;
      a.beginPath();
      a.moveTo(b * 180, b * 5);
      a.translate(b * -30, b * -60);
      a.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
      a.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
      a.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, b * 255, b * 386);
      a.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
      a.bezierCurveTo(b * 12, b * 192, b * 107, b * 75, b * 178, b * 69);
      a.closePath();
      Td(a, d[0]);
    } else if (f == 2) {
      j = b * 400;
      k = b * 300;
      i.width = j;
      i.height = k;
      a.beginPath();
      a.moveTo(b * 80, b * 52);
      a.translate(b * -40, b * -30);
      a.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
      a.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
      a.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
      a.bezierCurveTo(b * 108, b * 282, b * 100, b * 239, b * 63, b * 205);
      a.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
      a.closePath();
      Td(a, d[0]);
    }
    return i;
  }
  function oc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 304;
    d.height = a * 278;
    f.translate(a * 10, a * 25);
    f.globalAlpha = b ? 0.5 : 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 128, a * 137);
    f.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    f.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    f.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 284, a * 52);
    f.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    f.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
    f.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
    f.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    f.closePath();
    Td(f, c[0]);
    f.translate(a * -10, a * -25);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 128, a * 137);
    f.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    f.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    f.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    f.closePath();
    Td(f, c[1], c[2], a * 15);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 284, a * 52);
    f.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    f.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
    f.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
    f.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    f.closePath();
    Td(f, c[3], c[4], a * 15);
    return d;
  }
  function ac(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 501;
    d.height = a * 309;
    f.translate(0, a * 6);
    f.globalAlpha = b ? 0.5 : 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 126, a * 184);
    f.bezierCurveTo(a * 169, a * 196, a * 194, a * 198, a * 227, a * 198);
    f.bezierCurveTo(a * 235, a * 222, a * 236, a * 223, a * 241, a * 226);
    f.bezierCurveTo(a * 245, a * 228, a * 257, a * 228, a * 263, a * 226);
    f.bezierCurveTo(a * 267, a * 225, a * 270, a * 211, a * 275, a * 198);
    f.bezierCurveTo(a * 332, a * 194, a * 347, a * 192, a * 372, a * 188);
    f.bezierCurveTo(a * 366, a * 174.5, a * 366, a * 174.5, a * 360, a * 161);
    f.bezierCurveTo(a * 253.5, a * 162, a * 253.5, a * 162, a * 147, a * 163);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(0, a * -6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 100, a * 116);
    f.bezierCurveTo(a * 90, a * 101, a * 96, a * 89, a * 106, a * 83);
    f.bezierCurveTo(a * 86, a * 79, a * 86, a * 52, a * 93, a * 38);
    f.bezierCurveTo(a * 99, a * 51, a * 107, a * 57, a * 122, a * 63);
    f.bezierCurveTo(a * 130, a * 53, a * 141, a * 46, a * 161, a * 46);
    f.bezierCurveTo(a * 157, a * 31, a * 158, a * 20, a * 169, a * 6);
    f.bezierCurveTo(a * 171, a * 24, a * 186, a * 33, a * 198, a * 45);
    f.bezierCurveTo(a * 252, a * 45, a * 252, a * 45, a * 306, a * 45);
    f.bezierCurveTo(a * 323, a * 33, a * 332, a * 21, a * 335, a * 7);
    f.bezierCurveTo(a * 349, a * 21, a * 347, a * 36, a * 345, a * 46);
    f.bezierCurveTo(a * 364, a * 46, a * 369, a * 48, a * 377, a * 63);
    f.bezierCurveTo(a * 398, a * 58, a * 403, a * 49, a * 409, a * 40);
    f.bezierCurveTo(a * 419, a * 57, a * 411, a * 79, a * 398, a * 85);
    f.bezierCurveTo(a * 405, a * 100, a * 405, a * 106, a * 401, a * 118);
    f.bezierCurveTo(a * 332.5, a * 128.5, a * 332.5, a * 128.5, a * 264, a * 139);
    f.closePath();
    Td(f, c[1], c[2], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 122, a * 191);
    f.bezierCurveTo(a * 123, a * 237, a * 135, a * 245, a * 153, a * 259);
    f.bezierCurveTo(a * 167, a * 269, a * 158, a * 281, a * 118, a * 276);
    f.bezierCurveTo(a * 104, a * 273, a * 98, a * 268, a * 93, a * 242);
    f.bezierCurveTo(a * 89, a * 220, a * 92, a * 201, a * 102, a * 179);
    f.closePath();
    Td(f, c[3], c[2], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 403, a * 182);
    f.bezierCurveTo(a * 414, a * 215, a * 412, a * 232, a * 403, a * 260);
    f.bezierCurveTo(a * 395, a * 274, a * 375, a * 272, a * 356, a * 270);
    f.bezierCurveTo(a * 345, a * 268, a * 339, a * 262, a * 354, a * 252);
    f.bezierCurveTo(a * 370, a * 242, a * 380, a * 225, a * 384, a * 184);
    f.closePath();
    Td(f, c[3], c[2], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 155, a * 157);
    f.bezierCurveTo(a * 146, a * 189, a * 137, a * 198, a * 114, a * 219);
    f.bezierCurveTo(a * 104, a * 212, a * 98, a * 203, a * 89, a * 189);
    f.bezierCurveTo(a * 82, a * 178, a * 91, a * 164, a * 93, a * 136);
    f.closePath();
    Td(f, c[4], c[2], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 347, a * 162);
    f.bezierCurveTo(a * 357, a * 195, a * 376, a * 209, a * 387, a * 217);
    f.bezierCurveTo(a * 409, a * 201, a * 420, a * 181, a * 416, a * 166);
    f.bezierCurveTo(a * 410, a * 150, a * 412, a * 149, a * 408, a * 130);
    f.closePath();
    Td(f, c[4], c[2], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 86, a * 134);
    f.bezierCurveTo(a * 79, a * 102, a * 92, a * 84, a * 108, a * 92);
    f.bezierCurveTo(a * 149, a * 108, a * 184, a * 111, a * 242, a * 111);
    f.bezierCurveTo(a * 294, a * 108, a * 341, a * 105, a * 386, a * 98);
    f.bezierCurveTo(a * 412, a * 91, a * 417, a * 86, a * 415, a * 133);
    f.bezierCurveTo(a * 413, a * 160, a * 413, a * 160, a * 368, a * 174);
    f.bezierCurveTo(a * 308, a * 184, a * 291, a * 185, a * 270, a * 186);
    f.bezierCurveTo(a * 264, a * 206, a * 262, a * 215, a * 253, a * 215);
    f.bezierCurveTo(a * 239, a * 217, a * 239, a * 211, a * 231, a * 186);
    f.bezierCurveTo(a * 178, a * 184, a * 156, a * 179, a * 112, a * 162);
    f.bezierCurveTo(a * 87, a * 151, a * 90, a * 144, a * 87, a * 137);
    f.closePath();
    Td(f, c[4], c[2], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 63, a * 98);
    f.bezierCurveTo(a * 84, a * 121, a * 109, a * 102, a * 124, a * 117);
    f.bezierCurveTo(a * 138, a * 136, a * 123, a * 165, a * 94, a * 150);
    f.bezierCurveTo(a * 66, a * 131, a * 64, a * 115, a * 63, a * 99);
    f.closePath();
    Td(f, c[3], c[2], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 449, a * 97);
    f.bezierCurveTo(a * 446, a * 143, a * 415, a * 151, a * 402, a * 155);
    f.bezierCurveTo(a * 386, a * 157, a * 373, a * 133, a * 391, a * 116);
    f.bezierCurveTo(a * 402, a * 106, a * 432, a * 124, a * 449, a * 97);
    f.closePath();
    Td(f, c[3], c[2], a * 10);
    return d;
  }
  function rc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 309;
    d.height = a * 287;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 10, a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 34.5, a * 38.53125);
    f.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    f.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    f.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    f.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    f.closePath();
    Td(f, c[0], c[0], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 143.5, a * 74.53125);
    f.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    f.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    f.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    f.closePath();
    Td(f, c[0], c[0], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 87.5, a * 142.53125);
    f.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    f.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    f.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    f.closePath();
    Td(f, c[0], c[0], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 236.5, a * 189.53125);
    f.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    f.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    f.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    f.closePath();
    Td(f, c[0], c[0], a * 10);
    f.globalAlpha = 1;
    f.translate(a * -10, a * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 34.5, a * 38.53125);
    f.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    f.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    f.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    f.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    f.closePath();
    Td(f, c[1], c[2], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 143.5, a * 74.53125);
    f.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    f.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    f.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    f.closePath();
    Td(f, c[1], c[2], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 87.5, a * 142.53125);
    f.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    f.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    f.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    f.closePath();
    Td(f, c[1], c[2], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 236.5, a * 189.53125);
    f.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    f.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    f.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    f.closePath();
    Td(f, c[1], c[2], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 109.5, a * 51.53125);
    f.bezierCurveTo(a * 107.5, a * 92.53125, a * 91.5, a * 95.53125, a * 59.5, a * 101.53125);
    Td(f, c[1], c[2], a * 7);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 72.5, a * 51.53125);
    f.bezierCurveTo(a * 71, a * 64.53125, a * 69.5, a * 76.53125, a * 69.5, a * 77.53125);
    f.closePath();
    Td(f, c[1], c[2], a * 7);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 84.5, a * 63.53125);
    f.bezierCurveTo(a * 70.5, a * 65.03125, a * 70.5, a * 65.03125, a * 56.5, a * 66.53125);
    f.closePath();
    Td(f, c[1], c[2], a * 7);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 125.5, a * 84.53125);
    f.bezierCurveTo(a * 125.5, a * 110.03125, a * 125.5, a * 110.03125, a * 125.5, a * 135.53125);
    f.closePath();
    Td(f, c[1], c[2], a * 7);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 149.5, a * 108.53125);
    f.bezierCurveTo(a * 150, a * 137.03125, a * 150, a * 137.03125, a * 150.5, a * 165.53125);
    f.closePath();
    Td(f, c[1], c[2], a * 7);
    return d;
  }
  function sc(b, c, d) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    var i = b * c * 2;
    var a = c * b * 2;
    var j = i / 2;
    var k = a / 2;
    f.width = i;
    f.height = a;
    g.translate(j, k);
    Pd(g, 0, 0, c * b);
    Td(g, d);
    return f;
  }
  function hc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 125;
    d.height = a * 139;
    f.globalAlpha = b ? 0.5 : 1;
    f.save();
    f.translate(a * 63, a * 79);
    f.rotate(1);
    wd(f, 8, a * 60, a * 10);
    Td(f, c[0]);
    f.restore();
    f.globalAlpha = 1;
    f.save();
    f.translate(a * 63, a * 69);
    f.rotate(1);
    wd(f, 8, a * 60, a * 10);
    Td(f, c[1], c[2], 4);
    f.rotate(0.56);
    wd(f, 8, a * 40, a * 10);
    Td(f, c[3], c[4], 4);
    f.rotate(0.28);
    wd(f, 8, a * 28, a * 8);
    Td(f, c[5]);
    f.restore();
    return d;
  }
  function lc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 626;
    f.translate(a * 20, a * 20);
    f.globalAlpha = b ? 0.5 : 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 55, a * 565);
    f.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    f.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    f.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    f.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    f.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    f.closePath();
    Td(f, c[0]);
    f.translate(a * -20, a * -20);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 55, a * 565);
    f.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    f.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    f.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    f.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    f.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    f.closePath();
    Td(f, c[1], c[2], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 27, a * 129);
    f.bezierCurveTo(a * 32, a * 135, a * 48, a * 136, a * 53, a * 129);
    f.bezierCurveTo(a * 56, a * 97, a * 53, a * 82, a * 52, a * 64);
    f.bezierCurveTo(a * 49, a * 33, a * 44, a * 27, a * 41, a * 21);
    f.bezierCurveTo(a * 31, a * 40, a * 28, a * 84, a * 27, a * 127);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 55, a * 565);
    f.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    f.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    f.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    f.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    f.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    f.closePath();
    Td(f, ur, c[2], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 28, a * 475);
    f.bezierCurveTo(a * 38, a * 482, a * 48, a * 480, a * 54, a * 474);
    f.bezierCurveTo(a * 54, a * 509.5, a * 54, a * 509.5, a * 54, a * 545);
    f.bezierCurveTo(a * 46, a * 554, a * 36, a * 552, a * 28, a * 545);
    f.closePath();
    Td(f, c[4], c[5], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 28, a * 496);
    f.bezierCurveTo(a * 39, a * 506, a * 49, a * 503, a * 54, a * 496);
    Td(f, undefined, c[5], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 28, a * 521);
    f.bezierCurveTo(a * 41, a * 529, a * 49, a * 524, a * 54, a * 520);
    Td(f, Ra, c[5], a * 8);
    return d;
  }
  function gc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 200;
    d.height = a * 200;
    f.save();
    f.translate(a * 112, a * 158);
    yd(f, a * -86.5, a * -86, a * 150, a * 35, a * 20);
    f.restore();
    Td(f, c[0]);
    f.save();
    f.translate(a * 170, a * 100);
    yd(f, a * -86.5, a * -86, a * 35, a * 150, a * 20);
    f.restore();
    Td(f, c[0]);
    return d;
  }
  function uc(b, c, d) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    var i = b * 130;
    var a = b * 142;
    var j = i / 2;
    var k = a / 2;
    f.width = i;
    f.height = a;
    g.translate(j, k + b * 7);
    g.globalAlpha = c ? 0.5 : 1;
    Pd(g, 0, 0, b * 60);
    Td(g, d[0]);
    g.translate(0, b * -7);
    g.globalAlpha = 1;
    Pd(g, 0, 0, b * 60);
    Td(g, d[1], d[2], b * 4);
    Pd(g, 0, 0, b * 40);
    Td(g, d[3]);
    Pd(g, 0, 0, b * 25);
    Td(g, d[4], d[5], b * 8);
    return f;
  }
  function bc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 92;
    d.height = a * 108;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 31, a * 10);
    f.bezierCurveTo(a * 37, a * 2, a * 49, a * 0, a * 61, a * 15);
    f.bezierCurveTo(a * 81, a * 31, a * 78, a * 25, a * 79, a * 37);
    f.bezierCurveTo(a * 76, a * 44, a * 81, a * 56, a * 85, a * 63);
    f.bezierCurveTo(a * 91, a * 71, a * 90, a * 78, a * 83, a * 84);
    f.bezierCurveTo(a * 60, a * 98, a * 67, a * 95, a * 57, a * 102);
    f.bezierCurveTo(a * 47, a * 106, a * 43, a * 106, a * 31, a * 98);
    f.bezierCurveTo(a * 22, a * 91, a * 17, a * 89, a * 7, a * 84);
    f.bezierCurveTo(a * 1, a * 77, a * 4, a * 73, a * 7, a * 60);
    f.bezierCurveTo(a * 11, a * 50, a * 5, a * 32, a * 15, a * 27);
    f.bezierCurveTo(a * 26, a * 18, a * 26, a * 24, a * 31, a * 10);
    f.closePath();
    Td(f, c[0], c[1], 4);
    return d;
  }
  function dc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 148;
    f.globalAlpha = b ? 0.5 : 1;
    f.save();
    f.translate(a * 65, a * 85);
    f.rotate(1.4);
    wd(f, 7, a * 60, a * 10);
    f.restore();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.save();
    f.translate(a * 65, a * 74);
    f.rotate(1.4);
    wd(f, 7, a * 60, a * 10);
    Td(f, c[1], c[2], 4);
    f.rotate(0.64);
    wd(f, 7, a * 40, a * 10);
    Td(f, c[3], c[4], 4);
    f.rotate(0.12);
    wd(f, 7, a * 23, a * 5);
    f.restore();
    Td(f, c[5]);
    return d;
  }
  function vc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    f.translate(0, a * 4);
    if (jb === 0) {
      f.globalAlpha = b ? 0.5 : 1;
      f.save();
      f.translate(a * 44, a * 50);
      f.rotate(0.2);
      wd(f, 9, a * 41, a * 10);
      f.restore();
      Td(f, c[0]);
    }
    f.globalAlpha = 1;
    f.save();
    f.translate(a * 44, a * 44);
    f.rotate(0.2);
    wd(f, 9, a * 41, a * 10);
    Td(f, c[1], c[2], a * 4);
    f.rotate(-0.32);
    wd(f, 9, a * 32, a * 10);
    Td(f, c[3], c[4], a * 4);
    f.rotate(0.68);
    wd(f, 9, a * 23, a * 8);
    Td(f, c[5], c[6], a * 6);
    f.restore();
    f.save();
    f.translate(a * 45, a * 45);
    f.rotate(0);
    yd(f, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    f.restore();
    Td(f, c[4], c[4], a * 2);
    f.save();
    f.translate(a * 45, a * 45);
    f.rotate(0);
    yd(f, a * -26, a * -9, a * 52, a * 18, a * 30);
    f.restore();
    Td(f, c[4], c[4], a * 2);
    Pd(f, a * 45, a * 29, a * 7);
    Td(f, c[5]);
    Pd(f, a * 45, a * 61, a * 7);
    Td(f, c[5]);
    Pd(f, a * 28, a * 45, a * 7);
    Td(f, c[5]);
    Pd(f, a * 62, a * 45, a * 7);
    Td(f, c[5]);
    return d;
  }
  function cc(b, c, d) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    var i = b * 140;
    var a = b * 150;
    var j = b * 10;
    var k = b * 4;
    f.width = i;
    f.height = a;
    g.translate(b * -50, b * -38 + j);
    g.globalAlpha = c ? 0.5 : 1;
    g.beginPath();
    g.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    g.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    g.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    g.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    g.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    g.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    g.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    g.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    g.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    g.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    g.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    g.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    g.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    g.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    g.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    g.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    g.closePath();
    Td(g, d[0]);
    g.translate(0, 0 - j);
    g.globalAlpha = 1;
    g.beginPath();
    g.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    g.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    g.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    g.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    g.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    g.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    g.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    g.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    g.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    g.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    g.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    g.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    g.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    g.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    g.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    g.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    g.closePath();
    Td(g, d[1], d[2], k);
    return f;
  }
  function mc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 165;
    d.height = a * 123;
    f.save();
    f.translate(a * 81, a * 65);
    yd(f, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    f.restore();
    Td(f, c[0]);
    f.save();
    f.translate(a * 81, a * 58);
    yd(f, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    f.restore();
    Td(f, c[1], c[2], 4);
    f.save();
    f.translate(a * 81, a * 58);
    yd(f, a * -69, a * -47, a * 138, a * 93, a * 15);
    f.restore();
    Td(f, c[3], c[4], 4);
    f.save();
    f.translate(a * 79, a * 54);
    yd(f, a * -34, a * -40, a * 68, a * 88, a * 13);
    f.restore();
    Td(f, undefined, c[5], 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 44, a * 13);
    f.bezierCurveTo(a * 43.5, a * 55, a * 43.5, a * 55, a * 43, a * 101);
    f.closePath();
    Td(f, wj, c[6], 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 115, a * 13);
    f.bezierCurveTo(a * 115, a * 56, a * 115, a * 56, a * 115, a * 101);
    f.closePath();
    Td(f, undefined, c[6], 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 35, a * 6);
    f.bezierCurveTo(a * 35, a * 56, a * 36, a * 109, a * 35, a * 110);
    f.closePath();
    Td(f, undefined, c[7], 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 123, a * 6);
    f.bezierCurveTo(a * 123, a * 56, a * 123, a * 56, a * 123, a * 110);
    f.closePath();
    Td(f, undefined, c[7], 4);
    f.save();
    f.translate(a * 79, a * 113);
    yd(f, a * -18, a * -2, a * 36, a * 4, a * 20);
    f.restore();
    Td(f, Ra, c[8], 4);
    f.save();
    f.translate(a * 75, a * 118);
    yd(f, a * -6, a * -2.5, a * 20, a * 5, a * 20);
    f.restore();
    Td(f, c[8]);
    return d;
  }
  function pc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 100;
    d.height = a * 648;
    f.translate(a * 20, a * 20);
    f.globalAlpha = b ? 0.5 : 1;
    f.save();
    f.translate(a * 50.5, a * 349.5);
    yd(f, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    f.restore();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36, a * 538);
    f.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    f.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    f.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    f.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36, a * 554);
    f.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 32, a * 569);
    f.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    f.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    f.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    f.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 41, a * 581);
    f.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    f.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    f.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    f.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 31, a * 106);
    f.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    f.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    f.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    f.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 49, a * 27);
    f.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    f.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    f.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 49, a * 43);
    f.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 73, a * 97);
    f.bezierCurveTo(a * 66, a * 116, a * 43, a * 122, a * 26, a * 99);
    f.closePath();
    Td(f, c[0]);
    f.translate(a * -20, a * -20);
    f.globalAlpha = 1;
    f.save();
    f.translate(a * 50.5, a * 349.5);
    yd(f, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    f.restore();
    Td(f, c[1], c[2], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36, a * 538);
    f.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    f.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    f.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    f.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    f.closePath();
    Td(f, c[3], c[4], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36, a * 554);
    f.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    f.closePath();
    Td(f, Ma, c[4], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 32, a * 569);
    f.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    f.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    f.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    f.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    f.closePath();
    Td(f, c[5], c[6], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 41, a * 581);
    f.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    f.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    f.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    f.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    f.closePath();
    Td(f, c[7]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 31, a * 106);
    f.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    f.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    f.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    f.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    f.closePath();
    Td(f, c[5], c[6], a * 8);
    f.save();
    f.translate(a * -46, a * -50);
    f.scale(2, 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 51, a * 80);
    f.bezierCurveTo(a * 51, a * 89.5, a * 51, a * 89.5, a * 51, a * 99);
    f.bezierCurveTo(a * 49, a * 103, a * 46, a * 105, a * 44, a * 99);
    f.bezierCurveTo(a * 44, a * 88.5, a * 44, a * 88.5, a * 44, a * 78);
    f.closePath();
    Td(f, c[8]);
    f.restore();
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 49, a * 27);
    f.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    f.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    f.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    f.closePath();
    Td(f, c[8], c[9], a * 8);
    f.scale(2, 2);
    f.translate(a * -23, a * -20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 57, a * 69);
    f.bezierCurveTo(a * 50, a * 76, a * 43, a * 75, a * 38, a * 69);
    f.bezierCurveTo(a * 43, a * 57, a * 43, a * 57, a * 48, a * 45);
    f.closePath();
    Td(f, c[10]);
    return d;
  }
  function Cc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 142;
    f.globalAlpha = b ? 0.5 : 1;
    f.save();
    f.translate(a * 65, a * 80);
    f.rotate(0.2);
    wd(f, 9, a * 60, a * 10);
    f.restore();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.save();
    f.translate(a * 65, a * 71);
    f.rotate(0.2);
    wd(f, 9, a * 60, a * 10);
    Td(f, c[1], c[2], 4);
    f.rotate(-0.32);
    wd(f, 9, a * 38, a * 10);
    Td(f, c[3], c[4], 4);
    f.rotate(0.68);
    wd(f, 9, a * 20, a * 8);
    Td(f, c[5], c[6], 6);
    f.restore();
    return d;
  }
  function Tc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 43;
    d.height = a * 209;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(0, a * 10);
    f.translate(a * 5, a * 5);
    f.save();
    f.translate(a * 21, a * 102.5);
    yd(f, a * -4, a * -76.5, a * 8, a * 163, a * 10);
    f.restore();
    Td(f, c[0]);
    f.translate(0, a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 20, a * 10);
    f.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    f.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    f.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 21, a * 1);
    f.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
    f.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    f.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 14, a * 146);
    f.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    f.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    f.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    f.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    f.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    f.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    f.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    f.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 21, a * 6);
    f.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    f.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    f.closePath();
    Td(f, c[0]);
    f.translate(0, a * -20);
    f.globalAlpha = 1;
    f.translate(0, a * 10);
    f.translate(a * -5, a * -5);
    f.save();
    f.translate(a * 21, a * 102.5);
    yd(f, a * -4, a * -76.5, a * 8, a * 163, a * 10);
    f.restore();
    Td(f, c[1], c[2], a * 4);
    f.translate(0, a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 20, a * 10);
    f.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    f.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    f.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
    f.closePath();
    Td(f, c[3], c[4], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 21, a * 1);
    f.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
    f.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    f.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    f.closePath();
    Td(f, c[5], c[6], a * 4);
    f.translate(0, a * 0);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 14, a * 146);
    f.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    f.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    f.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    f.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    f.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    f.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    f.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    f.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
    f.closePath();
    Td(f, c[1], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 21, a * 6);
    f.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    f.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    f.closePath();
    Td(f, c[8]);
    return d;
  }
  function fc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 96.5, a * 277.34375);
    f.bezierCurveTo(a * 197.5, a * 259.84375, a * 197.5, a * 259.84375, a * 298.5, a * 242.34375);
    f.bezierCurveTo(a * 311.5, a * 231.34375, a * 307.5, a * 168.34375, a * 298.5, a * 150.34375);
    f.bezierCurveTo(a * 198, a * 170.34375, a * 198, a * 170.34375, a * 97.5, a * 190.34375);
    f.closePath();
    Td(f, c[1], c[2], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 98.5, a * 214.34375);
    f.bezierCurveTo(a * 199, a * 196.34375, a * 199, a * 196.34375, a * 299.5, a * 178.34375);
    f.closePath();
    Td(f, Wn, c[2], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 98.5, a * 247.34375);
    f.bezierCurveTo(a * 201.5, a * 229.34375, a * 201.5, a * 229.34375, a * 304.5, a * 211.34375);
    f.closePath();
    Td(f, undefined, c[2], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 97.5, a * 189.34375);
    f.bezierCurveTo(a * 97, a * 199.84375, a * 97, a * 199.84375, a * 96.5, a * 210.34375);
    f.bezierCurveTo(a * 110.5, a * 204.34375, a * 110.5, a * 204.34375, a * 124.5, a * 198.34375);
    f.bezierCurveTo(a * 137.5, a * 203.84375, a * 137.5, a * 203.84375, a * 150.5, a * 209.34375);
    f.bezierCurveTo(a * 172, a * 197.84375, a * 172, a * 197.84375, a * 193.5, a * 186.34375);
    f.bezierCurveTo(a * 211.5, a * 189.84375, a * 211.5, a * 189.84375, a * 229.5, a * 193.34375);
    f.bezierCurveTo(a * 240.5, a * 193.34375, a * 240.5, a * 193.34375, a * 251.5, a * 193.34375);
    f.bezierCurveTo(a * 261, a * 182.84375, a * 261, a * 182.84375, a * 270.5, a * 172.34375);
    f.bezierCurveTo(a * 287.5, a * 169.34375, a * 287.5, a * 169.34375, a * 304.5, a * 166.34375);
    f.bezierCurveTo(a * 304.5, a * 156.34375, a * 300.5, a * 145.34375, a * 298.5, a * 147.34375);
    f.closePath();
    Td(f, c[3], c[4], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 300.5, a * 147.34375);
    f.bezierCurveTo(a * 293.5, a * 121.34375, a * 278.5, a * 106.34375, a * 256.5, a * 101.34375);
    f.bezierCurveTo(a * 176.5, a * 145.34375, a * 176.5, a * 145.34375, a * 96.5, a * 189.34375);
    f.closePath();
    Td(f, c[5], c[6], a * 12);
    Pd(f, a * 252.5, a * 129.34375, a * 18.027756377319946);
    Td(f, c[7]);
    Pd(f, a * 248.5, a * 121.34375, a * 8.246211251235321);
    Td(f, c[8]);
    return d;
  }
  function zc(b, c, d) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    var i = b * 220;
    var a = b * 230;
    var j = b * 100;
    var k = j / 4;
    var h = b * 20;
    f.width = i;
    f.height = a;
    g.translate(i / 2, a / 2 + h);
    g.globalAlpha = 0.5;
    wd(g, 7, j, k);
    Td(g, d[0]);
    g.globalAlpha = 1;
    g.translate(0, -h);
    wd(g, 7, j, k);
    Td(g, d[1]);
    wd(g, 6, j * 0.65, k * 0.65);
    Td(g, d[2]);
    return f;
  }
  function yc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 106;
    d.height = a * 681;
    f.translate(a * 20, a * 20);
    f.globalAlpha = b ? 0.5 : 1;
    f.save();
    f.translate(a * 52.5, a * 395);
    f.rotate(0);
    yd(f, a * -11.5, a * -226, a * 23, a * 452, a * 10);
    f.restore();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 35, a * 588);
    f.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    f.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    f.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 52, a * 135);
    f.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    f.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    f.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    f.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    f.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 64, a * 150);
    f.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    f.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    f.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    f.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    f.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 52, a * 39);
    f.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    f.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    f.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 52, a * 64);
    f.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    f.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    f.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    f.closePath();
    Td(f, c[0]);
    f.translate(a * -20, a * -20);
    f.globalAlpha = 1;
    f.save();
    f.translate(a * 52.5, a * 395);
    f.rotate(0);
    yd(f, a * -11.5, a * -226, a * 23, a * 452, a * 10);
    f.restore();
    Td(f, c[1], c[2], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 35, a * 588);
    f.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    f.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    f.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    f.closePath();
    Td(f, c[3], c[4], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 52, a * 135);
    f.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    f.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    f.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    f.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    f.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    f.closePath();
    Td(f, c[3], c[4], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 64, a * 150);
    f.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    f.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    f.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    f.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    f.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    f.closePath();
    Td(f, c[5]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 52, a * 39);
    f.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    f.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    f.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    f.closePath();
    Td(f, c[6], c[7], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 52, a * 64);
    f.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    f.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    f.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    f.closePath();
    Td(f, c[8]);
    return d;
  }
  function wc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 108;
    d.height = a * 669;
    f.translate(a * 20, a * 20);
    f.globalAlpha = b ? 0.5 : 1;
    f.save();
    f.translate(a * 54, a * 389.5);
    yd(f, a * -15, a * -228.5, a * 30, a * 457, a * 10);
    f.restore();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 35, a * 579);
    f.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    f.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    f.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    f.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 30, a * 141);
    f.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    f.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    f.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    f.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    f.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 42, a * 152);
    f.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    f.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    f.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 52, a * 28);
    f.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    f.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    f.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    f.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 53, a * 53);
    f.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    f.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    f.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    f.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    f.closePath();
    Td(f, c[0]);
    f.translate(a * -20, a * -20);
    f.globalAlpha = 1;
    f.save();
    f.translate(a * 54, a * 389.5);
    f.rotate(0);
    yd(f, a * -15, a * -228.5, a * 30, a * 457, a * 10);
    f.restore();
    Td(f, c[1], c[2], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 35, a * 579);
    f.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    f.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    f.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    f.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    f.closePath();
    Td(f, c[3], c[4], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 30, a * 141);
    f.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    f.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    f.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    f.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    f.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    f.closePath();
    Td(f, c[3], c[4], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 42, a * 152);
    f.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    f.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    f.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    f.closePath();
    Td(f, c[5]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 52, a * 28);
    f.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    f.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    f.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    f.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    f.closePath();
    Td(f, c[6], c[7], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 53, a * 53);
    f.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    f.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    f.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    f.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    f.closePath();
    Td(f, c[8]);
    return d;
  }
  function Pc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    f.globalAlpha = b ? 0.5 : 1;
    f.save();
    f.translate(a * 150, a * 160);
    f.rotate(6.28);
    wd(f, 6, a * 146, a * 30);
    f.restore();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.save();
    f.translate(a * 150, a * 150);
    f.rotate(6.28);
    wd(f, 6, a * 146, a * 30);
    f.restore();
    Td(f, c[1], c[2], a * 8);
    f.save();
    f.translate(a * 150, a * 150);
    f.rotate(0);
    wd(f, 6, a * 105, a * 30);
    f.restore();
    Td(f, c[3], c[3], a * 8);
    f.save();
    f.translate(a * 150, a * 150);
    f.rotate(0);
    wd(f, 6, a * 66, a * 30);
    f.restore();
    Td(f, c[4], c[2], a * 8);
    f.save();
    f.translate(a * 131, a * 116);
    wd(f, 7, a * 17, a * 8);
    f.restore();
    Td(f, c[6]);
    f.save();
    f.translate(a * 163, a * 168);
    wd(f, 7, a * 25, a * 8);
    f.restore();
    Td(f, c[6]);
    f.save();
    f.translate(a * 117, a * 151);
    wd(f, 7, a * 11, a * 8);
    f.restore();
    Td(f, c[6]);
    f.save();
    f.translate(a * 167, a * 122);
    wd(f, 7, a * 12, a * 8);
    f.restore();
    Td(f, c[6]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 150, a * 207);
    f.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    f.closePath();
    Td(f, undefined, c[2], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 118, a * 100);
    f.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    f.closePath();
    Td(f, undefined, c[2], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 183, a * 100);
    f.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    f.closePath();
    Td(f, undefined, c[2], a * 8);
    return d;
  }
  function kc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 128;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 137, a * 7);
    f.bezierCurveTo(a * 169, a * 14, a * 212, a * 9, a * 241, a * 5);
    f.bezierCurveTo(a * 211, a * 63, a * 158, a * 92, a * 103, a * 109);
    f.bezierCurveTo(a * 73, a * 126, a * 54, a * 124, a * 6, a * 99);
    f.bezierCurveTo(a * 82, a * 63, a * 113, a * 35, a * 137, a * 8);
    f.closePath();
    Td(f, c[0], c[1], a * 14);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 73, a * 124);
    f.bezierCurveTo(a * 111, a * 126, a * 162, a * 97, a * 203, a * 61);
    f.bezierCurveTo(a * 156, a * 98, a * 131, a * 106, a * 105, a * 109);
    f.bezierCurveTo(a * 99, a * 121, a * 87, a * 124, a * 72, a * 124);
    f.closePath();
    Td(f, c[2], c[3], a * 1);
    return d;
  }
  function Ac(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 372;
    c.height = a * 375;
    d.globalAlpha = 0.5;
    d.translate(a * 15, a * 15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    Td(d, b[0]);
    d.globalAlpha = 1;
    d.translate(a * -15, a * -15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    Td(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
    d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
    d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
    d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
    d.closePath();
    Td(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
    d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
    d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
    d.closePath();
    Td(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
    d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
    d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
    d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
    d.closePath();
    Td(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
    d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
    d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
    d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
    d.closePath();
    Td(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
    d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
    d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
    d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
    d.closePath();
    Td(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
    d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
    d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
    d.closePath();
    Td(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    Td(d, kn, b[2], a * 4);
    return c;
  }
  function xc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 80;
    c.height = a * 100;
    d.scale(0.5, 0.5);
    d.translate(10, 15);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
    d.closePath();
    Td(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
    Td(d, Xj, b[0], a * 10);
    d.translate(0, -10);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
    d.closePath();
    Td(d, b[1], b[2], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
    Td(d, w, b[2], a * 8);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, a * 7);
    Td(d, or, b[2], a * 8);
    return c;
  }
  function Lu(b, c, d) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    var i = b * 180;
    var a = b * 210;
    var j = (h = b * 60) / 4;
    var k = b * 20;
    f.width = i;
    f.height = a;
    g.save();
    g.translate(i / 2 - b * 0, a / 2 - b * 35 + k);
    g.rotate(Math.PI / -1.8);
    g.globalAlpha = 0.5;
    g.translate(b * 0, b * -20);
    wd(g, 5, h, j);
    Td(g, d[0]);
    g.restore();
    g.save();
    g.translate(i / 2 + b * 10, a / 2 + b * 15 + k);
    g.rotate(Math.PI / 2);
    g.globalAlpha = 0.5;
    g.translate(b * 0, b * -20);
    wd(g, 5, h, j);
    Td(g, d[0]);
    g.restore();
    g.save();
    g.translate(i / 2 - b * 50, a / 2 + b * 40 + k);
    g.rotate(Math.PI / 3);
    g.globalAlpha = 0.5;
    g.translate(0, b * -20);
    wd(g, 5, h, j);
    Td(g, d[0]);
    g.restore();
    g.save();
    g.translate(i / 2 - b * 0, a / 2 - b * 35);
    g.rotate(Math.PI / -1.8);
    g.globalAlpha = 1;
    g.translate(b * 0, b * -20);
    wd(g, 5, h, j);
    Td(g, d[1]);
    g.restore();
    g.save();
    g.translate(i / 2 + b * 10, a / 2 + b * 15);
    g.rotate(Math.PI / 2);
    g.globalAlpha = 1;
    g.translate(0, b * -20);
    wd(g, 5, h, j);
    Td(g, d[1]);
    g.restore();
    g.save();
    g.translate(i / 2 - b * 50, a / 2 + b * 40);
    g.rotate(Math.PI / 3);
    g.globalAlpha = 1;
    g.translate(0, b * -20);
    wd(g, 5, h, j);
    Td(g, d[1]);
    g.restore();
    var h;
    j = (h = b * 30) / 4;
    g.save();
    g.translate(i / 2 + b * 5, a / 2 - b * 20);
    g.rotate(Math.PI / -1.8);
    g.globalAlpha = 1;
    g.translate(0, b * -20);
    wd(g, 5, h, j);
    Td(g, d[2]);
    g.restore();
    g.save();
    g.translate(i / 2 + b * 0, a / 2 + b * 10);
    g.rotate(Math.PI / 2);
    g.globalAlpha = 1;
    g.translate(0, b * -20);
    wd(g, 5, h, j);
    Td(g, d[2]);
    g.restore();
    g.save();
    g.translate(i / 2 - b * 45, a / 2 + b * 35);
    g.rotate(Math.PI / 3);
    g.globalAlpha = 1;
    g.translate(0, b * -20);
    wd(g, 5, h, j);
    Td(g, d[2]);
    g.restore();
    Pd(g, i / 2 - b * 7, a / 2 + b * 7, 5);
    Td(g, d[2]);
    return f;
  }
  function Mc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    f.translate(0, a * 4);
    if (jb === 0) {
      f.globalAlpha = b ? 0.5 : 1;
      f.save();
      f.translate(a * 44, a * 50);
      f.rotate(1.4);
      wd(f, 7, a * 41, a * 10);
      f.restore();
      Td(f, c[0]);
    }
    f.globalAlpha = 1;
    f.save();
    f.translate(a * 44, a * 44);
    f.rotate(1.4);
    wd(f, 7, a * 41, a * 10);
    Td(f, c[1], c[2], a * 4);
    wd(f, 7, a * 35, a * 10);
    Td(f, c[3], c[4], a * 4);
    wd(f, 7, a * 23, a * 5);
    f.restore();
    Td(f, c[5]);
    f.save();
    f.translate(a * 45, a * 45);
    f.rotate(0);
    yd(f, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    f.restore();
    Td(f, c[4], c[4], a * 2);
    f.save();
    f.translate(a * 45, a * 45);
    f.rotate(0);
    yd(f, a * -26, a * -9, a * 52, a * 18, a * 30);
    f.restore();
    Td(f, c[4], c[4], a * 2);
    Pd(f, a * 45, a * 29, a * 7);
    Td(f, c[5]);
    Pd(f, a * 45, a * 61, a * 7);
    Td(f, c[5]);
    Pd(f, a * 28, a * 45, a * 7);
    Td(f, c[5]);
    Pd(f, a * 62, a * 45, a * 7);
    Td(f, c[5]);
    return d;
  }
  function Bc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    f.globalAlpha = 0.5;
    f.translate(0, a * 3);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 19, a * 139);
    f.bezierCurveTo(a * 18, a * 163, a * 22, a * 156, a * 53, a * 157);
    f.bezierCurveTo(a * 97.5, a * 157, a * 97.5, a * 157, a * 142, a * 157);
    f.bezierCurveTo(a * 150, a * 157, a * 153, a * 156, a * 154, a * 142);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(0, a * -3);
    f.save();
    f.translate(a * 86.5, a * 81.5);
    yd(f, a * -66.5, a * -65.5, a * 133, a * 131, a * 10);
    f.restore();
    Td(f, c[1], c[2], a * 5);
    f.save();
    f.translate(a * 84.5, a * 79);
    yd(f, a * -50.5, a * -49, a * 101, a * 98, a * 10);
    f.restore();
    Td(f, c[3], c[2], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 42, a * 54);
    f.bezierCurveTo(a * 37, a * 48, a * 39, a * 44, a * 38, a * 41);
    f.bezierCurveTo(a * 42, a * 40, a * 45, a * 40, a * 50, a * 41);
    f.bezierCurveTo(a * 85, a * 36, a * 98, a * 37, a * 116, a * 42);
    f.bezierCurveTo(a * 132, a * 39, a * 132, a * 39, a * 133, a * 56);
    f.bezierCurveTo(a * 136, a * 73, a * 136, a * 84, a * 132, a * 106);
    f.bezierCurveTo(a * 47, a * 113, a * 85.5, a * 106, a * 39, a * 106);
    f.bezierCurveTo(a * 32, a * 81, a * 38, a * 60, a * 42, a * 55);
    f.closePath();
    Td(f, c[4], c[5], a * 5);
    f.save();
    f.translate(a * 28, a * 24);
    f.rotate(0);
    yd(f, a * -14, a * -14, a * 28, a * 28, a * 4);
    f.restore();
    Td(f, c[1], c[2], a * 5);
    f.save();
    f.translate(a * 143, a * 23);
    f.rotate(0);
    yd(f, a * -14, a * -14, a * 28, a * 28, a * 4);
    f.restore();
    Td(f, c[1], c[2], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 55, a * 80);
    f.bezierCurveTo(a * 73, a * 78, a * 84, a * 74, a * 100, a * 64);
    f.bezierCurveTo(a * 111, a * 57, a * 125, a * 67, a * 108, a * 84);
    f.bezierCurveTo(a * 96, a * 95, a * 86, a * 96, a * 70, a * 88);
    f.bezierCurveTo(a * 62.5, a * 84, a * 62.5, a * 84, a * 55, a * 80);
    f.closePath();
    Td(f, c[5]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 17, a * 112);
    f.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    f.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    f.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    f.closePath();
    Td(f, c[8], c[9], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 127, a * 111);
    f.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    f.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    f.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    f.closePath();
    Td(f, c[9]);
    f.globalAlpha = 0.5;
    f.translate(0, a * 3);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 15, a * 117);
    f.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    f.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    f.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    f.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(0, a * -3);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 14, a * 127);
    f.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
    f.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    f.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    f.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    f.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    f.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    f.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
    f.closePath();
    Td(f, c[4], c[5], a * 5);
    f.save();
    f.translate(a * 27.5, a * 138.5);
    yd(f, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    f.restore();
    Td(f, c[1], c[2], a * 5);
    f.save();
    f.translate(a * 143.5, a * 137);
    yd(f, a * -13.5, a * -14, a * 27, a * 28, a * 4);
    f.restore();
    Td(f, c[1], c[2], a * 5);
    return d;
  }
  function Dc(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Ic(a) {
    return e.String.fromCharCode(a);
  }
  function Ec(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 10, a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 100.5, a * 126.34375);
    f.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    f.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    f.closePath();
    Td(f, c[0], c[0], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 106.5, a * 131.34375);
    f.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    f.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 157.5, a * 137.34375);
    f.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    f.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    f.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    f.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 196.5, a * 151.34375);
    f.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    f.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    f.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    f.closePath();
    Td(f, c[0], c[0], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 154.5, a * 222.34375);
    f.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    f.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    f.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    f.closePath();
    Td(f, c[0], c[0], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 279.5, a * 294.34375);
    f.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    f.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    f.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    f.closePath();
    Td(f, c[0], c[0], a * 12);
    f.globalAlpha = 1;
    f.translate(a * -10, a * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 100.5, a * 126.34375);
    f.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    f.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    f.closePath();
    Td(f, c[1], c[2], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 106.5, a * 131.34375);
    f.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    f.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 157.5, a * 137.34375);
    f.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    f.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    f.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    f.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    f.closePath();
    Td(f, c[4]);
    Pd(f, a * 125.5, a * 140.34375, a * 11.180339887498949);
    Td(f, c[5]);
    Pd(f, a * 122.5, a * 135.34375, a * 5.0990195135927845);
    Td(f, c[6]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 196.5, a * 151.34375);
    f.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    f.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    f.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    f.closePath();
    Td(f, c[7], c[8], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 154.5, a * 222.34375);
    f.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    f.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    f.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    f.closePath();
    Td(f, c[7], c[8], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 279.5, a * 294.34375);
    f.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    f.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    f.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    f.closePath();
    Td(f, c[7], c[8], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 296.5, a * 287.34375);
    f.bezierCurveTo(a * 311.5, a * 291.34375, a * 311.5, a * 291.34375, a * 326.5, a * 295.34375);
    f.closePath();
    Td(f, kn, c[9], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 294.5, a * 289.34375);
    f.bezierCurveTo(a * 308.5, a * 297.34375, a * 308.5, a * 297.34375, a * 322.5, a * 305.34375);
    f.closePath();
    Td(f, undefined, c[9], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 294.5, a * 291.34375);
    f.bezierCurveTo(a * 304, a * 303.34375, a * 304, a * 303.34375, a * 313.5, a * 315.34375);
    f.closePath();
    Td(f, undefined, c[9], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 226.5, a * 161.34375);
    f.bezierCurveTo(a * 230.5, a * 160.34375, a * 236.5, a * 158.34375, a * 238.5, a * 161.34375);
    f.bezierCurveTo(a * 238.5, a * 157.34375, a * 228.5, a * 159.34375, a * 227.5, a * 161.34375);
    f.closePath();
    Td(f, ah, c[9], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 167.5, a * 248.34375);
    f.bezierCurveTo(a * 165.5, a * 251.34375, a * 168.5, a * 256.34375, a * 168.5, a * 253.34375);
    f.bezierCurveTo(a * 166.5, a * 252.34375, a * 168.5, a * 246.34375, a * 166.5, a * 247.34375);
    f.closePath();
    Td(f, mk, c[9], a * 3);
    return d;
  }
  function Qc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 17, a * 112);
    f.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    f.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    f.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    f.closePath();
    Td(f, c[8], c[9], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 127, a * 111);
    f.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    f.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    f.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    f.closePath();
    Td(f, c[9]);
    f.globalAlpha = 0.5;
    f.translate(0, a * 3);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 15, a * 117);
    f.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    f.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    f.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    f.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(0, a * -3);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 14, a * 127);
    f.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
    f.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    f.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    f.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    f.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    f.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    f.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
    f.closePath();
    Td(f, c[4], c[5], a * 5);
    f.save();
    f.translate(a * 27.5, a * 138.5);
    yd(f, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    f.restore();
    Td(f, c[1], c[2], a * 5);
    f.save();
    f.translate(a * 143.5, a * 137);
    yd(f, a * -13.5, a * -14, a * 27, a * 28, a * 4);
    f.restore();
    Td(f, c[1], c[2], a * 5);
    return d;
  }
  function _c(f, j, i, k, m, n, o, p, q, h, l) {
    if (or === l) {
      l = 0;
    }
    var r = document.createElement("canvas");
    var t = r.getContext("2d");
    n = n ? f * n : 0;
    var b = Math.floor(f * i);
    t.font = b + "px Baloo Paaji";
    t.lineJoin = "round";
    p *= f;
    var u = o ? p * 2 : 0;
    if (q) {
      var v = Math.min(t.measureText(j).width + f * 2 + u, q);
    } else {
      v = t.measureText(j).width + f * 2 + u + l * f * 2;
    }
    b = f * (b + n + l) + u;
    r.width = v;
    r.height = b;
    if (o) {
      t.fillStyle = o;
      yd(t, 0, 0, v, b, p * 2);
      t.fill();
      t.translate(p, p);
    }
    t.textBaseline = "middle";
    t.font = i + "px Baloo Paaji";
    t.lineJoin = "round";
    if (m) {
      t.beginPath();
      t.fillStyle = m;
      t.fillText(j, 0, b / 2 + n - u / 2, v);
    }
    t.beginPath();
    if (h) {
      t.strokeStyle = h;
      t.lineWidth = l;
      t.strokeText(j, l, (b - u) / 2, v);
    }
    t.fillStyle = k;
    t.fillText(j, l, (b - u) / 2, v);
    return r;
  }
  function Fc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 115;
    d.height = a * 585;
    f.scale(-1, 1);
    f.translate(a * -110, 0);
    f.translate(a * 10, a * 10);
    f.globalAlpha = b ? 0.5 : 1;
    f.save();
    f.translate(a * 51.5, a * 342);
    yd(f, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    f.restore();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 54, a * 83);
    f.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    f.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    f.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 95, a * 97);
    f.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
    f.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
    f.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
    f.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 55, a * 176);
    f.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    f.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 50, a * 176);
    f.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    f.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 35, a * 403);
    f.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    f.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    f.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 59, a * 67);
    f.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
    f.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    f.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 30, a * 125);
    f.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    f.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    f.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    f.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 35, a * 171);
    f.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    f.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    f.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 60, a * 68);
    f.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    f.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    f.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    f.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    f.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 71, a * 172);
    f.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    f.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    f.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 35, a * 151);
    f.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    f.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    f.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    f.closePath();
    Td(f, c[0]);
    f.translate(a * -10, a * -10);
    f.globalAlpha = 1;
    f.save();
    f.translate(a * 51.5, a * 342);
    yd(f, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    f.restore();
    Td(f, c[1], c[2], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 54, a * 83);
    f.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    f.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    f.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    f.closePath();
    Td(f, c[3], c[4], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 95, a * 97);
    f.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
    f.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
    f.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
    f.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    f.closePath();
    Td(f, c[5], c[6], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 35, a * 403);
    f.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    f.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    f.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    f.closePath();
    Td(f, c[7], c[8], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 37, a * 427);
    f.bezierCurveTo(a * 47, a * 435, a * 55, a * 435, a * 67, a * 427);
    Td(f, undefined, c[8], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36, a * 448);
    f.bezierCurveTo(a * 46, a * 454, a * 54, a * 457, a * 65, a * 449);
    Td(f, ur, c[8], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 55, a * 176);
    f.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    f.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    f.closePath();
    Td(f, c[3], c[4], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 50, a * 176);
    f.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    f.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    f.closePath();
    Td(f, c[3], c[4], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 59, a * 67);
    f.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
    f.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    f.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    f.closePath();
    Td(f, c[7], c[8], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 30, a * 125);
    f.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    f.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    f.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    f.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    f.closePath();
    Td(f, c[7], c[8], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 35, a * 171);
    f.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    f.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    f.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    f.closePath();
    Td(f, c[7], c[8], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 60, a * 68);
    f.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    f.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    f.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    f.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    f.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    f.closePath();
    Td(f, c[7], c[8], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 71, a * 172);
    f.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    f.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    f.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    f.closePath();
    Td(f, c[7], c[8], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 35, a * 151);
    f.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    f.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    f.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    f.closePath();
    Td(f, c[7], c[8], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 53, a * 113);
    f.bezierCurveTo(a * 65, a * 140, a * 75, a * 166, a * 52, a * 169);
    f.bezierCurveTo(a * 29, a * 168, a * 41, a * 143, a * 53, a * 112);
    f.closePath();
    Td(f, c[3], c[4], a * 6);
    return d;
  }
  function Rc(b, c, d) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    var i = b * 18;
    var a = b * 18;
    f.width = i;
    f.height = a;
    var j = b * 9;
    var k = b * 9;
    var m = b * 8;
    g.save();
    g.translate(j, k);
    g.globalAlpha = 1;
    Pd(g, 0, 0, m);
    Td(g, d[0]);
    m = b * 3;
    j = 0;
    k = b * -3;
    g.translate(j, k);
    g.globalAlpha = 1;
    Pd(g, 0, 0, m);
    Td(g, d[1]);
    g.restore();
    return f;
  }
  function Gc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 220;
    d.height = a * 180;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * -90, a * -150);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 104, a * 237.8000030517578);
    f.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    f.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    f.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    f.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    f.closePath();
    Td(f, c[5], c[5], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 115, a * 211.20000457763672);
    f.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    f.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    f.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    f.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    f.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    f.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    f.closePath();
    Td(f, c[5], c[5], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 120, a * 207);
    f.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    f.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    f.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    f.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    f.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    f.closePath();
    Td(f, c[4], c[4], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 284, a * 238);
    f.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    f.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    f.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    f.closePath();
    Td(f, c[4], c[4], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 283, a * 211);
    f.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    f.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    f.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    f.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    f.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    f.closePath();
    Td(f, c[4], c[4], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 280, a * 206);
    f.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    f.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    f.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    f.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    f.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    f.closePath();
    Td(f, c[4], c[4], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 138, a * 298.40000915527344);
    f.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    f.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    f.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    f.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    f.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    f.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    f.closePath();
    Td(f, c[4], c[4], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 161, a * 177.5999984741211);
    f.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    f.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    f.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    f.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    f.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    f.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    f.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    f.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    f.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    f.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    f.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    f.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    f.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    f.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    f.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    f.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    f.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    f.closePath();
    Td(f, c[4], c[4], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 162, a * 175.5999984741211);
    f.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    f.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    f.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    f.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    f.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    f.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    f.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    f.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    f.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    f.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    f.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    f.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    f.closePath();
    Td(f, Al, c[4], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 198, a * 161.4000015258789);
    f.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    f.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    f.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    f.closePath();
    Td(f, c[4], c[4], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 161, a * 194);
    f.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    f.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    f.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    f.closePath();
    Td(f, c[4], c[4], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 157, a * 188.80000019073486);
    f.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    f.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    f.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    f.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    f.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    f.closePath();
    Td(f, c[4], c[4], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 156, a * 188);
    f.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    f.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    f.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    f.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    f.closePath();
    Td(f, mk, c[4], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 162, a * 189);
    f.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    f.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    f.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    f.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    f.closePath();
    Td(f, undefined, c[4], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 131, a * 262);
    f.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    f.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    f.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    f.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    f.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    f.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    f.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    f.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    f.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    f.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    f.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    f.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    f.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    f.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    f.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    f.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    f.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    f.closePath();
    Td(f, c[4], c[4], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 130, a * 264);
    f.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    f.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    f.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    f.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    f.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    f.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    f.closePath();
    Td(f, Xj, c[4], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 140, a * 265.33333587646484);
    f.bezierCurveTo(a * 141, a * 250.33333587646484, a * 148, a * 244.33333587646484, a * 160, a * 241.33333587646484);
    f.bezierCurveTo(a * 200, a * 241.33333587646484, a * 200, a * 241.33333587646484, a * 240, a * 241.33333587646484);
    f.bezierCurveTo(a * 256, a * 243.33333587646484, a * 260, a * 255.33333587646484, a * 260, a * 265.33333587646484);
    f.bezierCurveTo(a * 261, a * 281.33333587646484, a * 247, a * 289.33333587646484, a * 240, a * 289.33333587646484);
    f.bezierCurveTo(a * 161, a * 289.33333587646484, a * 200.5, a * 289.33333587646484, a * 161, a * 289.33333587646484);
    f.bezierCurveTo(a * 149, a * 288.33333587646484, a * 142, a * 278.33333587646484, a * 140, a * 266.33333587646484);
    f.closePath();
    Td(f, w, c[4], a * 6);
    f.globalAlpha = 0.5;
    f.scale(1, 1);
    f.translate(a * 105, a * 155);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 59.27557373046875, a * 20.406280517578125);
    f.bezierCurveTo(a * 74.27557373046875, a * 5.406280517578125, a * 90.27557373046875, a * 6.406280517578125, a * 99.27557373046875, a * 5.406280517578125);
    f.bezierCurveTo(a * 120.27557373046875, a * 5.406280517578125, a * 126.27557373046875, a * 10.406280517578125, a * 136.27557373046875, a * 20.406280517578125);
    f.bezierCurveTo(a * 157.77557373046875, a * 37.906280517578125, a * 157.77557373046875, a * 37.906280517578125, a * 179.27557373046875, a * 55.406280517578125);
    f.bezierCurveTo(a * 190.27557373046875, a * 63.406280517578125, a * 192.27557373046875, a * 77.40628051757812, a * 189.27557373046875, a * 91.40628051757812);
    f.bezierCurveTo(a * 183.27557373046875, a * 108.40628051757812, a * 176.27557373046875, a * 110.40628051757812, a * 169.27557373046875, a * 118.40628051757812);
    f.bezierCurveTo(a * 152.27557373046875, a * 133.40628051757812, a * 152.27557373046875, a * 133.40628051757812, a * 135.27557373046875, a * 148.40628051757812);
    f.bezierCurveTo(a * 87.27557373046875, a * 143.40628051757812, a * 87.27557373046875, a * 143.40628051757812, a * 39.27557373046875, a * 138.40628051757812);
    f.bezierCurveTo(a * 26.77557373046875, a * 123.40628051757812, a * 26.77557373046875, a * 123.40628051757812, a * 14.27557373046875, a * 108.40628051757812);
    f.bezierCurveTo(a * 2.27557373046875, a * 95.40628051757812, a * 2.27557373046875, a * 92.40628051757812, a * 3.27557373046875, a * 83.40628051757812);
    f.bezierCurveTo(a * 4.27557373046875, a * 63.406280517578125, a * 12.27557373046875, a * 60.406280517578125, a * 24.27557373046875, a * 40.406280517578125);
    f.closePath();
    Td(f, c[5], c[5], a * 4);
    f.globalAlpha = 1;
    f.translate(a * -110, a * -155);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 104, a * 237.8000030517578);
    f.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    f.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    f.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    f.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    f.closePath();
    Td(f, c[0], c[1], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 115, a * 211.20000457763672);
    f.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    f.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    f.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    f.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    f.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    f.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    f.closePath();
    Td(f, c[0], c[1], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 120, a * 207);
    f.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    f.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    f.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    f.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    f.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    f.closePath();
    Td(f, c[0], c[1], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 284, a * 238);
    f.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    f.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    f.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    f.closePath();
    Td(f, c[0], c[1], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 283, a * 211);
    f.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    f.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    f.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    f.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    f.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    f.closePath();
    Td(f, c[0], c[1], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 280, a * 206);
    f.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    f.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    f.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    f.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    f.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    f.closePath();
    Td(f, c[0], c[1], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 138, a * 298.40000915527344);
    f.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    f.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    f.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    f.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    f.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    f.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    f.closePath();
    Td(f, c[0], c[1], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 161, a * 177.5999984741211);
    f.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    f.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    f.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    f.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    f.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    f.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    f.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    f.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    f.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    f.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    f.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    f.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    f.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    f.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    f.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    f.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    f.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    f.closePath();
    Td(f, c[2], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 162, a * 175.5999984741211);
    f.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    f.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    f.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    f.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    f.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    f.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    f.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    f.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    f.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    f.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    f.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    f.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    f.closePath();
    Td(f, undefined, c[3], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 198, a * 161.4000015258789);
    f.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    f.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    f.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    f.closePath();
    Td(f, c[0], c[1], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 161, a * 194);
    f.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    f.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    f.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    f.closePath();
    Td(f, c[0], c[1], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 157, a * 188.80000019073486);
    f.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    f.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    f.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    f.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    f.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    f.closePath();
    Td(f, c[0], c[1], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 156, a * 188);
    f.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    f.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    f.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    f.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    f.closePath();
    Td(f, Ao, c[1], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 162, a * 189);
    f.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    f.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    f.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    f.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    f.closePath();
    Td(f, mk, c[1], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 131, a * 262);
    f.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    f.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    f.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    f.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    f.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    f.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    f.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    f.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    f.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    f.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    f.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    f.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    f.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    f.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    f.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    f.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    f.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    f.closePath();
    Td(f, c[0], c[0], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 130, a * 264);
    f.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    f.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    f.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    f.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    f.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    f.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    f.closePath();
    Td(f, Ao, c[1], a * 2);
    return d;
  }
  function jc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 647;
    f.translate(a * 20, a * 20);
    f.globalAlpha = b ? 0.5 : 1;
    f.save();
    f.translate(a * 45, a * 384.5);
    yd(f, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    f.restore();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 27, a * 572);
    f.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    f.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    f.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    f.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 32, a * 587);
    f.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    f.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    f.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 31, a * 113);
    f.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    f.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    f.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    f.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 39, a * 139);
    f.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    f.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    f.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 44, a * 29);
    f.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    f.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    f.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    f.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 44, a * 54);
    f.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    f.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    f.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    f.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    f.closePath();
    Td(f, c[0]);
    f.translate(a * -20, a * -20);
    f.globalAlpha = 1;
    f.save();
    f.translate(a * 45, a * 384.5);
    yd(f, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    f.restore();
    Td(f, c[1], c[2], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 27, a * 572);
    f.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    f.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    f.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    f.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
    f.closePath();
    Td(f, c[3], c[4], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 32, a * 587);
    f.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    f.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    f.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    f.closePath();
    Td(f, c[5]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 31, a * 113);
    f.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    f.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    f.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    f.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    f.closePath();
    Td(f, c[3], c[4], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 39, a * 139);
    f.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    f.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    f.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    f.closePath();
    Td(f, c[5]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 44, a * 29);
    f.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    f.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    f.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    f.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    f.closePath();
    Td(f, c[6], c[7], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 44, a * 54);
    f.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    f.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    f.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    f.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    f.closePath();
    Td(f, c[8]);
    return d;
  }
  function Lc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    f.translate(0, a * 4);
    if (jb === 0) {
      f.globalAlpha = b ? 0.5 : 1;
      f.save();
      f.translate(a * 44, a * 50);
      f.rotate(1);
      wd(f, 8, a * 41, a * 10);
      Td(f, c[0]);
      f.restore();
    }
    f.globalAlpha = 1;
    f.save();
    f.translate(a * 44, a * 44);
    f.rotate(1);
    wd(f, 8, a * 41, a * 10);
    Td(f, c[1], c[2], a * 4);
    f.rotate(0.56);
    wd(f, 8, a * 33, a * 10);
    Td(f, c[3], c[4], a * 4);
    f.rotate(0.28);
    wd(f, 8, a * 24, a * 8);
    Td(f, c[5]);
    f.restore();
    f.save();
    f.translate(a * 45, a * 45);
    f.rotate(0);
    yd(f, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    f.restore();
    Td(f, c[4], c[4], a * 2);
    f.save();
    f.translate(a * 45, a * 45);
    f.rotate(0);
    yd(f, a * -26, a * -9, a * 52, a * 18, a * 30);
    f.restore();
    Td(f, c[4], c[4], a * 2);
    Pd(f, a * 45, a * 29, a * 7);
    Td(f, c[5]);
    Pd(f, a * 45, a * 61, a * 7);
    Td(f, c[5]);
    Pd(f, a * 28, a * 45, a * 7);
    Td(f, c[5]);
    Pd(f, a * 62, a * 45, a * 7);
    Td(f, c[5]);
    return d;
  }
  function Wc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    f.globalAlpha = b ? 0.5 : 1;
    f.save();
    f.translate(a * 150, a * 160);
    f.rotate(6.28);
    wd(f, 6, a * 146, a * 30);
    f.restore();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.save();
    f.translate(a * 150, a * 150);
    f.rotate(6.28);
    wd(f, 6, a * 146, a * 30);
    f.restore();
    Td(f, c[1], c[2], a * 8);
    f.save();
    f.translate(a * 150, a * 150);
    f.rotate(0);
    wd(f, 6, a * 105, a * 30);
    f.restore();
    Td(f, c[3], c[3], a * 8);
    f.save();
    f.translate(a * 150, a * 150);
    f.rotate(0);
    wd(f, 6, a * 66, a * 30);
    f.restore();
    Td(f, c[4], c[2], a * 8);
    f.save();
    f.translate(a * 150, a * 150);
    f.rotate(0);
    wd(f, 6, a * 31, a * 30);
    f.restore();
    Td(f, c[5], c[6], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 150, a * 207);
    f.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    f.closePath();
    Td(f, fk, c[2], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 118, a * 100);
    f.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    f.closePath();
    Td(f, Ma, c[2], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 183, a * 100);
    f.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    f.closePath();
    Td(f, undefined, c[2], a * 8);
    return d;
  }
  function Oc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 101;
    f.translate(a * 0, a * 5);
    if (jb === 0) {
      f.globalAlpha = b ? 0.5 : 1;
      Pd(f, a * 44, a * 55, a * 41);
      Td(f, c[0]);
    }
    f.globalAlpha = 1;
    Pd(f, a * 44, a * 45, a * 41);
    Td(f, c[1], c[2], a * 4);
    Pd(f, a * 44, a * 45, a * 31);
    Td(f, c[3]);
    f.save();
    f.translate(a * 45, a * 45);
    yd(f, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    f.restore();
    Td(f, c[4], c[4], a * 2);
    f.save();
    f.translate(a * 45, a * 45);
    yd(f, a * -26, a * -9, a * 52, a * 18, a * 30);
    f.restore();
    Td(f, c[4], c[4], a * 2);
    Pd(f, a * 45, a * 29, a * 7);
    Td(f, c[5]);
    Pd(f, a * 45, a * 61, a * 7);
    Td(f, c[5]);
    Pd(f, a * 28, a * 45, a * 7);
    Td(f, c[5]);
    Pd(f, a * 62, a * 45, a * 7);
    Td(f, c[5]);
    return d;
  }
  function xc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 234;
    c.height = a * 183;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 25);
    d.bezierCurveTo(a * 150, a * 3, a * 181, a * 22, a * 203, a * 41);
    d.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
    d.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
    d.bezierCurveTo(a * 19, a * 148, a * 6, a * 95, a * 21, a * 66);
    d.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
    d.closePath();
    Td(d, b[0], b[0], a * 4);
    return c;
  }
  qc.get = function (a, b) {
    if (b !== "ⵠⵠⲆⲆΔᐃⲆ") {
      const a = e.setInterval;
      const b = a;
      const c = function () {
        a(c, 6630);
        b(c, 1898);
      };
      c();
    }
    return e.Reflect.get(...arguments);
  };
  ;
  function Nc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 373;
    d.height = a * 314;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 5, a * 5);
    f.save();
    f.translate(a * 184.048583984375, a * 69.1805419921875);
    yd(f, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    f.restore();
    Td(f, c[1], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 185.048583984375, a * 61.6805419921875);
    f.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    f.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    f.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    f.closePath();
    Td(f, c[0], c[0], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 224.048583984375, a * 56.6805419921875);
    f.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    f.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    f.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    f.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    f.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    f.closePath();
    Td(f, c[0], c[0], a * 6);
    f.save();
    f.translate(a * 183.548583984375, a * 119.6805419921875);
    yd(f, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    f.restore();
    Td(f, c[0], c[0], a * 6);
    f.save();
    f.translate(a * 183.048583984375, a * 155.6805419921875);
    yd(f, a * -121, a * -52, a * 242, a * 104, a * 40);
    f.restore();
    Td(f, c[0], c[0], a * 6);
    f.save();
    f.translate(a * 183.048583984375, a * 205.1805419921875);
    yd(f, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    f.restore();
    Td(f, c[0], c[0], a * 6);
    f.save();
    f.translate(a * 185.048583984375, a * 204.1805419921875);
    yd(f, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    f.restore();
    Td(f, c[0], c[0], a * 6);
    Pd(f, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    Td(f, c[0], c[0], a * 6);
    f.globalAlpha = 1;
    f.translate(a * -5, a * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 224.048583984375, a * 56.6805419921875);
    f.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    f.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    f.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    f.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    f.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    f.closePath();
    Td(f, c[3], c[4], a * 6);
    f.save();
    f.translate(a * 184.048583984375, a * 69.1805419921875);
    yd(f, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    f.restore();
    Td(f, c[1], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 185.048583984375, a * 61.6805419921875);
    f.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    f.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    f.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    f.closePath();
    Td(f, c[1], c[2], a * 6);
    f.save();
    f.translate(a * 183.548583984375, a * 119.6805419921875);
    yd(f, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    f.restore();
    Td(f, c[5], c[4], a * 6);
    f.save();
    f.translate(a * 183.048583984375, a * 155.6805419921875);
    yd(f, a * -121, a * -52, a * 242, a * 104, a * 40);
    f.restore();
    Td(f, c[3], c[4], a * 6);
    f.save();
    f.translate(a * 183.048583984375, a * 205.1805419921875);
    yd(f, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    f.restore();
    Td(f, c[6], c[4], a * 6);
    f.globalCompositeOperation = "destination-out";
    f.save();
    f.translate(a * 185.048583984375, a * 204.1805419921875);
    yd(f, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    f.restore();
    Td(f, c[7], c[8], a * 6);
    f.globalCompositeOperation = "source-over";
    f.globalAlpha = 0.5;
    f.save();
    f.translate(a * 185.048583984375, a * 204.1805419921875);
    yd(f, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    f.restore();
    Td(f, c[7], c[8], a * 6);
    f.globalAlpha = 1;
    f.save();
    Pd(f, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    Td(f, c[3], c[4], a * 6);
    f.restore();
    return d;
  }
  function Hc(b, c, d, f) {
    var g = document.createElement("canvas");
    var i = g.getContext("2d");
    var a = b * 220;
    var j = b * 220;
    var k = b * 100;
    var h = k / 4;
    g.width = a;
    g.height = j;
    i.translate(a / 2, j / 2);
    i.globalAlpha = c ? 0.5 : 1;
    if (!c) {
      i.translate(b * 0, b * -8);
    }
    wd(i, 7, k, h);
    Td(i, c ? d[0] : d[1]);
    i.globalAlpha = 1;
    if (f == 0) {
      wd(i, 6, k * 0.65, h * 0.65);
      Td(i, d[2]);
    } else if (f == 1) {
      i.translate(b * 20, b * 20);
      wd(i, 6, k * 0.45, h * 0.4);
      Td(i, d[2]);
    }
    return g;
  }
  const Uc = 3;
  function Yc(b, c, d, f) {
    var g = document.createElement("canvas");
    var h = g.getContext("2d");
    g.width = b * 501;
    g.height = b * 564;
    h.scale(0.5, 0.5);
    h.translate(b * 240, b * 255);
    h.rotate(f);
    h.globalAlpha = c ? 0.5 : 0.2;
    Pd(h, b * 174, b * 87.984375, b * 20.8806130178211);
    Td(h, d[0], d[0], b * 8);
    Pd(h, b * 174, b * 87.984375, b * 12.165525060596439);
    Td(h, d[0], d[0], b * 8);
    Pd(h, b * 174, b * 87.484375, b * 6);
    Td(h, d[0]);
    Pd(h, b * 30, b * 87.984375, b * 20.8806130178211);
    Td(h, d[0], d[0], b * 4);
    Pd(h, b * 30, b * 87.984375, b * 12.165525060596439);
    Td(h, d[0], d[0], b * 4);
    Pd(h, b * 30, b * 87.484375, b * 6);
    Td(h, d[0]);
    Pd(h, b * 100, b * 30, b * 20.8806130178211);
    Td(h, d[0], d[0], b * 4);
    Pd(h, b * 100, b * 30, b * 12.165525060596439);
    Td(h, d[0], d[0], b * 4);
    Pd(h, b * 100, b * 30, b * 6);
    Td(h, d[0]);
    Pd(h, b * 100, b * 130, b * 20.8806130178211);
    Td(h, d[0], d[0], b * 4);
    Pd(h, b * 100, b * 130, b * 12.165525060596439);
    Td(h, d[0], d[0], b * 4);
    Pd(h, b * 100, b * 130, b * 6);
    Td(h, d[0]);
    h.save();
    h.translate(b * 102, b * 81.984375);
    h.rotate(0);
    yd(h, b * -74, b * -57, b * 148, b * 114, b * 23);
    h.restore();
    Td(h, d[0], d[0], b * 4);
    h.save();
    h.translate(b * 101, b * 64.984375);
    h.rotate(0);
    yd(h, b * -33, b * -10, b * 66, b * 20, b * 15);
    h.restore();
    Td(h, d[0], d[0], b * 4);
    h.save();
    h.translate(b * 102, b * 63.484375);
    h.rotate(0);
    yd(h, b * -9, b * -27.5, b * 18, b * 55, b * 15);
    h.restore();
    h.translate(5, -5);
    h.globalAlpha = 1;
    Pd(h, b * 174, b * 87.984375, b * 20.8806130178211);
    Td(h, d[1], d[3], b * 8);
    Pd(h, b * 174, b * 87.984375, b * 12.165525060596439);
    Td(h, d[1], d[3], b * 8);
    Pd(h, b * 174, b * 87.484375, b * 6);
    Td(h, d[2]);
    Pd(h, b * 30, b * 87.984375, b * 20.8806130178211);
    Td(h, d[1], d[3], b * 8);
    Pd(h, b * 30, b * 87.984375, b * 12.165525060596439);
    Td(h, d[1], d[3], b * 8);
    Pd(h, b * 30, b * 87.484375, b * 6);
    Td(h, d[2]);
    Pd(h, b * 102, b * 30, b * 20.8806130178211);
    Td(h, d[1], d[3], b * 8);
    Pd(h, b * 102, b * 30, b * 12.165525060596439);
    Td(h, d[1], d[3], b * 8);
    Pd(h, b * 102, b * 30, b * 6);
    Td(h, d[1]);
    Pd(h, b * 102, b * 130, b * 20.8806130178211);
    Td(h, d[1], d[3], b * 8);
    Pd(h, b * 102, b * 130, b * 12.165525060596439);
    Td(h, d[1], d[3], b * 8);
    Pd(h, b * 102, b * 130, b * 6);
    Td(h, d[1]);
    h.save();
    h.translate(b * 102, b * 81.984375);
    yd(h, b * -74, b * -57, b * 148, b * 114, b * 23);
    h.restore();
    Td(h, d[1], d[3], b * 8);
    h.save();
    h.translate(b * 101, b * 64.984375);
    yd(h, b * -33, b * -10, b * 66, b * 20, b * 15);
    h.restore();
    Td(h, d[2], d[1], b * 8);
    h.save();
    h.translate(b * 102, b * 63.484375);
    yd(h, b * -9, b * -27.5, b * 18, b * 55, b * 15);
    h.restore();
    Td(h, d[2], d[1], b * 8);
    Pd(h, b * 135, b * 107.36605834960938, b * 21.095023109728988);
    Td(h, d[1], d[3], b * 8);
    Pd(h, b * 135, b * 107.36605834960938, b * 13);
    Td(h, d[1], d[3], b * 8);
    Pd(h, b * 135, b * 107.36605834960938, b * 6.082762530298219);
    Td(h, d[2]);
    Pd(h, b * 70, b * 107.36605834960938, b * 21.095023109728988);
    Td(h, d[1], d[3], b * 8);
    Pd(h, b * 70, b * 107.36605834960938, b * 13);
    Td(h, d[1], d[3], b * 8);
    Pd(h, b * 70, b * 107.36605834960938, b * 6.082762530298219);
    Td(h, d[2]);
    return g;
  }
  function Kc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 105;
    d.height = a * 144;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * -5, a * 0);
    f.save();
    f.translate(a * 52.5, a * 91.5);
    yd(f, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    f.restore();
    Td(f, c[0], c[0], a * 3);
    f.save();
    f.translate(a * 53, a * 36);
    yd(f, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    f.restore();
    Td(f, c[0], c[0], a * 4);
    f.save();
    f.translate(a * 53.5, a * 35.5);
    yd(f, a * -26.5, a * -15, a * 53, a * 30, a * 5);
    f.restore();
    Td(f, c[0], c[0], a * 4);
    f.translate(a * 5, a * 0);
    f.globalAlpha = 1;
    f.save();
    f.translate(a * 52.5, a * 91.5);
    yd(f, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    f.restore();
    Td(f, c[1], c[2], a * 3);
    f.save();
    f.translate(a * 53, a * 36);
    yd(f, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    f.restore();
    Td(f, c[3], c[4], a * 4);
    f.save();
    f.translate(a * 53.5, a * 35.5);
    yd(f, a * -26.5, a * -15, a * 53, a * 30, a * 5);
    f.restore();
    Td(f, c[5], c[6], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 49, a * 60.5);
    f.bezierCurveTo(a * 44, a * 56.5, a * 44, a * 56.5, a * 39, a * 52.5);
    f.bezierCurveTo(a * 39, a * 46.5, a * 39, a * 46.5, a * 39, a * 40.5);
    f.bezierCurveTo(a * 44, a * 44, a * 44, a * 44, a * 49, a * 47.5);
    f.bezierCurveTo(a * 49, a * 54, a * 49, a * 54, a * 49, a * 60.5);
    f.closePath();
    Td(f, c[7], c[6], a * 3);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 66, a * 40.5);
    f.bezierCurveTo(a * 66, a * 46.5, a * 66, a * 46.5, a * 66, a * 52.5);
    f.bezierCurveTo(a * 60.5, a * 56.5, a * 60.5, a * 56.5, a * 55, a * 60.5);
    f.bezierCurveTo(a * 56, a * 53, a * 56, a * 53, a * 57, a * 45.5);
    f.bezierCurveTo(a * 61.5, a * 43, a * 61.5, a * 43, a * 66, a * 40.5);
    f.closePath();
    Td(f, c[7], c[6], a * 3);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 52, a * 33.5);
    f.bezierCurveTo(a * 55.5, a * 41, a * 55.5, a * 41, a * 59, a * 48.5);
    f.bezierCurveTo(a * 56, a * 58, a * 56, a * 58, a * 53, a * 67.5);
    f.bezierCurveTo(a * 49, a * 58, a * 49, a * 58, a * 45, a * 48.5);
    f.bezierCurveTo(a * 48.5, a * 41, a * 48.5, a * 41, a * 52, a * 33.5);
    f.closePath();
    Td(f, c[9], c[8], a * 3);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 52, a * 47.5);
    f.bezierCurveTo(a * 54.5, a * 50.5, a * 54.5, a * 50.5, a * 57, a * 53.5);
    f.bezierCurveTo(a * 55, a * 60, a * 55, a * 60, a * 53, a * 66.5);
    f.bezierCurveTo(a * 50.5, a * 61, a * 50.5, a * 61, a * 48, a * 55.5);
    f.bezierCurveTo(a * 50, a * 52, a * 50, a * 52, a * 52, a * 48.5);
    f.closePath();
    Td(f, c[11], c[10], a * 3);
    return d;
  }
  function Vc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    f.save();
    f.translate(a * 70.16665649414062, a * 38.20831298828125);
    yd(f, a * -58.5, a * -27.5, a * 117, a * 55, a * 20);
    f.restore();
    Td(f, c[0], c[1], a * 4);
    f.save();
    f.translate(a * 70, a * 42.70831298828125);
    yd(f, a * -61, a * -20, a * 122, a * 40, a * 20);
    f.restore();
    Td(f, c[2], c[1], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 123, a * 70.375);
    f.bezierCurveTo(a * 115, a * 99.375, a * 119, a * 85.375, a * 115, a * 100.375);
    f.bezierCurveTo(a * 112, a * 116.375, a * 117, a * 109.375, a * 131, a * 100.375);
    f.bezierCurveTo(a * 131, a * 83.375, a * 131, a * 83.375, a * 131, a * 66.375);
    f.closePath();
    Td(f, c[2], c[1], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 11, a * 68.375);
    f.bezierCurveTo(a * 11.166656494140625, a * 84.375, a * 9, a * 99.375, a * 10, a * 100.375);
    f.bezierCurveTo(a * 35, a * 113.375, a * 27, a * 110.375, a * 25, a * 95.375);
    f.bezierCurveTo(a * 16, a * 68.375, a * 17, a * 69.375, a * 17, a * 68.375);
    f.closePath();
    Td(f, c[2], c[1], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 46, a * 32.375);
    f.bezierCurveTo(a * 43, a * 8.375, a * 45, a * 7.375, a * 56, a * 6.375);
    f.bezierCurveTo(a * 105, a * 4.375, a * 102, a * 6.375, a * 97, a * 32.375);
    f.bezierCurveTo(a * 138, a * 43.375, a * 133, a * 45.375, a * 133, a * 58.375);
    f.bezierCurveTo(a * 133, a * 85.375, a * 125, a * 74.375, a * 111, a * 70.375);
    f.bezierCurveTo(a * 70, a * 69.875, a * 29, a * 69.375, a * 29, a * 69.375);
    f.bezierCurveTo(a * 7, a * 84.375, a * 7, a * 70.375, a * 7, a * 59.375);
    f.bezierCurveTo(a * 6, a * 28.375, a * 32, a * 39.375, a * 44, a * 32.375);
    f.closePath();
    Td(f, c[2], c[1], a * 4);
    Pd(f, a * 71, a * 44.375, a * 16.55294535724685);
    Td(f, c[2], c[1], a * 4);
    Pd(f, a * 71, a * 43.70831298828125, a * 8.94427190999916);
    Td(f, c[2], c[1], a * 4);
    return d;
  }
  function Xc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    f.translate(0, a * 15);
    f.globalAlpha = b ? 0.5 : 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 102, a * 154);
    f.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    f.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    f.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    f.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 102, a * 154);
    f.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    f.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    f.closePath();
    Td(f, undefined, c[0], a * 11);
    f.translate(0, a * -5);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 103, a * 154);
    f.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    f.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    f.closePath();
    Td(f, c[3], c[2], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 102, a * 154);
    f.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    f.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    f.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    f.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    f.closePath();
    Td(f, c[1], c[2], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 182, a * 185);
    f.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    f.closePath();
    Td(f, Ra, c[2], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 222, a * 287);
    f.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    f.closePath();
    Td(f, undefined, c[2], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 145, a * 290);
    f.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    f.closePath();
    Td(f, c[1], c[2], a * 11);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 105, a * 184);
    f.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    f.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    f.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    f.closePath();
    Td(f, c[4], c[2], a * 11);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 251, a * 276);
    f.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    f.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    f.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    f.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    f.closePath();
    Td(f, c[4], c[2], a * 11);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 102, a * 154);
    f.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    f.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    f.closePath();
    Td(f, undefined, c[2], a * 11);
    return d;
  }
  function Zc(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 158;
    d.height = a * 201;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 96.5, a * 76.421875);
    f.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    f.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    f.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    f.closePath();
    Td(f, c[8], c[8], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 61.5, a * 78.421875);
    f.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    f.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    f.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    f.closePath();
    Td(f, c[8], c[8], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 116.5, a * 127.421875);
    f.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    f.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    f.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    f.closePath();
    Td(f, c[8], c[8], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 41.5, a * 134.421875);
    f.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    f.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    f.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    f.closePath();
    Td(f, c[8], c[8], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 78.5, a * 51.921875);
    f.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    f.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    f.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    f.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    f.closePath();
    Td(f, c[8], c[8], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 72.5, a * 72.421875);
    f.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    f.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    f.closePath();
    Td(f, c[8], c[8], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 42.5, a * 163.421875);
    f.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    f.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    f.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    f.closePath();
    Td(f, c[8], c[8], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 79.5, a * 61.421875);
    f.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    f.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    f.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    f.closePath();
    Td(f, c[8], c[8], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 72.5, a * 72.421875);
    f.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    f.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    f.closePath();
    Td(f, c[8], c[8], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 96.5, a * 76.421875);
    f.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    f.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    f.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    f.closePath();
    Td(f, c[1], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 61.5, a * 78.421875);
    f.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    f.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    f.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    f.closePath();
    Td(f, c[1], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 116.5, a * 127.421875);
    f.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    f.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    f.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    f.closePath();
    Td(f, c[1], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 41.5, a * 134.421875);
    f.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    f.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    f.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    f.closePath();
    Td(f, c[1], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 78.5, a * 51.921875);
    f.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    f.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    f.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    f.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    f.closePath();
    Td(f, c[3], c[2], a * 4);
    Pd(f, a * 108.5, a * 148.421875, a * 9);
    Td(f, c[5]);
    Pd(f, a * 106.5, a * 144.421875, a * 3);
    Td(f, c[6]);
    Pd(f, a * 46.5, a * 148.421875, a * 9);
    Td(f, c[5]);
    Pd(f, a * 44.5, a * 144.421875, a * 3);
    Td(f, c[6]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 116.5, a * 114.421875);
    f.bezierCurveTo(a * 121.5, a * 137.421875, a * 118.5, a * 133.421875, a * 108.5, a * 139.421875);
    f.bezierCurveTo(a * 94.5, a * 146.421875, a * 96.5, a * 148.421875, a * 95.5, a * 152.421875);
    Td(f, c[3], c[2], a * 4);
    f.beginPath();
    f.translate(0, a * -2);
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 35.5, a * 131.421875);
    f.bezierCurveTo(a * 36.5, a * 140.421875, a * 39.5, a * 140.421875, a * 49.5, a * 143.421875);
    f.bezierCurveTo(a * 59.5, a * 149.421875, a * 57.5, a * 151.421875, a * 59.5, a * 155.421875);
    Td(f, c[3], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 84.5, a * 57.421875);
    f.bezierCurveTo(a * 101.5, a * 120.421875, a * 92.5, a * 127.421875, a * 78.5, a * 134.421875);
    f.bezierCurveTo(a * 51.5, a * 131.421875, a * 63.5, a * 102.421875, a * 70.5, a * 59.421875);
    f.bezierCurveTo(a * 75, a * 55.421875, a * 78.5, a * 52.421875, a * 79.5, a * 51.421875);
    f.closePath();
    Td(f, c[4]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 79.5, a * 61.421875);
    f.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    f.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    f.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    f.closePath();
    Td(f, c[3], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 72.5, a * 72.421875);
    f.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    f.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    f.closePath();
    Td(f, c[3], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 87.5, a * 154.421875);
    f.bezierCurveTo(a * 93.5, a * 163.921875, a * 93.5, a * 163.921875, a * 99.5, a * 173.421875);
    f.bezierCurveTo(a * 95, a * 177.421875, a * 95, a * 177.421875, a * 90.5, a * 181.421875);
    f.bezierCurveTo(a * 89, a * 167.921875, a * 89, a * 167.921875, a * 87.5, a * 154.421875);
    f.closePath();
    Td(f, c[6], c[7], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 81.5, a * 164.421875);
    f.bezierCurveTo(a * 84, a * 172.921875, a * 84, a * 172.921875, a * 86.5, a * 181.421875);
    f.bezierCurveTo(a * 82.5, a * 182.421875, a * 82.5, a * 182.421875, a * 78.5, a * 183.421875);
    f.closePath();
    Td(f, c[6], c[7], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 72.5, a * 164.421875);
    f.bezierCurveTo(a * 73.5, a * 173.921875, a * 73.5, a * 173.921875, a * 74.5, a * 183.421875);
    f.bezierCurveTo(a * 70.5, a * 182.921875, a * 70.5, a * 182.921875, a * 66.5, a * 182.421875);
    f.closePath();
    Td(f, c[6], c[7], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 65.5, a * 156.421875);
    f.bezierCurveTo(a * 65, a * 168.421875, a * 65, a * 168.421875, a * 64.5, a * 180.421875);
    f.bezierCurveTo(a * 58.5, a * 177.421875, a * 58.5, a * 177.421875, a * 52.5, a * 174.421875);
    f.closePath();
    Td(f, c[6], c[7], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 42.5, a * 163.421875);
    f.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    f.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    f.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    f.closePath();
    Td(f, c[3], c[2], a * 4);
    return d;
  }
  function $c(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 161;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    Td(d, b[0]);
    d.globalAlpha = 1;
    d.translate(0, -8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    Td(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 28, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    Td(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    Td(d, b[3]);
    Pd(d, a * 103, a * 110, a * 11);
    Td(d, b[4]);
    Pd(d, a * 55, a * 111, a * 11);
    Td(d, b[4]);
    Pd(d, a * 99, a * 107, a * 5);
    Td(d, b[1]);
    Pd(d, a * 51, a * 108, a * 5);
    Td(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 121);
    d.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
    d.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
    d.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
    d.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
    d.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
    d.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
    d.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
    d.closePath();
    Td(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.translate(-2, 0);
    d.moveTo(a * 71, a * 162);
    d.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
    d.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
    d.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
    d.closePath();
    Td(d, b[3]);
    d.translate(2, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    Td(d, undefined, b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 25, a * 63);
    d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
    d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
    d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
    Td(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 91, a * 53);
    d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
    d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
    d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
    Td(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    Td(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    Td(d, b[3]);
    return c;
  }
  function em(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 161;
    d.height = a * 184;
    f.translate(0, a * 10);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 105.5, a * 34.609375);
    f.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    f.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    f.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    f.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    f.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    f.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    f.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    f.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    f.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    f.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 45.5, a * 144.609375);
    f.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    f.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    f.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    Td(f, c[0]);
    f.translate(0, a * -10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 45.5, a * 144.609375);
    f.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    f.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    f.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    Td(f, c[1], c[2], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 105.5, a * 34.609375);
    f.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    f.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    f.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    f.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    f.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    f.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    f.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    f.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    f.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    f.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    f.closePath();
    Td(f, c[1], c[2], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 104.5, a * 35.609375);
    f.bezierCurveTo(a * 71.5, a * 36.609375, a * 57.5, a * 52.609375, a * 58.5, a * 81.609375);
    f.bezierCurveTo(a * 59.5, a * 103.609375, a * 66.5, a * 107.609375, a * 66.5, a * 116.609375);
    f.bezierCurveTo(a * 67.5, a * 128.609375, a * 65.5, a * 131.609375, a * 63.5, a * 137.609375);
    Td(f, wj, c[2], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 59.5, a * 72.609375);
    f.bezierCurveTo(a * 38.5, a * 80.609375, a * 43.5, a * 81.609375, a * 37.5, a * 89.609375);
    Td(f, undefined, c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 60.5, a * 85.609375);
    f.bezierCurveTo(a * 75.5, a * 91.609375, a * 76.5, a * 96.609375, a * 81.5, a * 104.609375);
    Td(f, undefined, c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 68.5, a * 122.609375);
    f.bezierCurveTo(a * 79.5, a * 130.609375, a * 74.5, a * 128.609375, a * 80.5, a * 134.609375);
    Td(f, c[1], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 142.5, a * 18.609375);
    f.bezierCurveTo(a * 151.5, a * 28.609375, a * 151.5, a * 32.609375, a * 146.5, a * 40.609375);
    f.bezierCurveTo(a * 137.5, a * 26.609375, a * 138.5, a * 24.609375, a * 142.5, a * 19.609375);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 146.5, a * 61.50892639160156);
    f.bezierCurveTo(a * 157.5, a * 69.50892639160156, a * 150.5, a * 79.50892639160156, a * 145.5, a * 81.50892639160156);
    f.bezierCurveTo(a * 140.5, a * 65.50892639160156, a * 144.5, a * 64.50892639160156, a * 146.5, a * 62.50892639160156);
    f.closePath();
    Td(f, c[3]);
    return d;
  }
  function im(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 573;
    d.height = a * 350;
    if (c == 1) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 336, a * 72);
      f.bezierCurveTo(a * 366, a * 15, a * 426, a * 36, a * 497, a * 83);
      f.bezierCurveTo(a * 522, a * 85, a * 522, a * 85, a * 547, a * 87);
      f.bezierCurveTo(a * 476.5, a * 205, a * 476.5, a * 205, a * 406, a * 323);
      f.bezierCurveTo(a * 297.5, a * 319, a * 297.5, a * 319, a * 189, a * 315);
      f.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 243);
      f.bezierCurveTo(a * 92, a * 140, a * 92, a * 140, a * 162, a * 37);
      f.bezierCurveTo(a * 173, a * 39, a * 173, a * 39, a * 184, a * 41);
      f.bezierCurveTo(a * 185, a * 38.5, a * 185, a * 38.5, a * 186, a * 36);
      f.bezierCurveTo(a * 323, a * 13, a * 322, a * 25, a * 337, a * 74);
      f.closePath();
      Td(f, b[4], b[4], a * 35);
    }
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 168, a * 42);
    f.bezierCurveTo(a * 255, a * 60, a * 255, a * 60, a * 342, a * 78);
    f.bezierCurveTo(a * 443, a * 81.5, a * 443, a * 81.5, a * 544, a * 85);
    f.bezierCurveTo(a * 475, a * 204.5, a * 475, a * 204.5, a * 406, a * 324);
    f.bezierCurveTo(a * 297.5, a * 320, a * 297.5, a * 320, a * 189, a * 316);
    f.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 242);
    f.closePath();
    Td(f, b[0], b[1], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 188, a * 41);
    f.bezierCurveTo(a * 308, a * 15, a * 325, a * 18, a * 337, a * 66);
    f.bezierCurveTo(a * 191, a * 305, a * 196, a * 286, a * 184, a * 307);
    f.bezierCurveTo(a * 175, a * 250, a * 90, a * 254, a * 52, a * 241);
    f.closePath();
    Td(f, b[2], b[3], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 336, a * 71);
    f.bezierCurveTo(a * 375, a * 8, a * 429, a * 50, a * 518, a * 92);
    f.bezierCurveTo(a * 455, a * 199.5, a * 455, a * 199.5, a * 392, a * 307);
    f.bezierCurveTo(a * 227, a * 301, a * 261, a * 255, a * 188, a * 308);
    f.closePath();
    Td(f, b[2], b[3], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 357, a * 76);
    f.bezierCurveTo(a * 390, a * 67, a * 414, a * 86, a * 435, a * 104);
    f.bezierCurveTo(a * 417, a * 135, a * 417, a * 135, a * 399, a * 166);
    f.bezierCurveTo(a * 352, a * 140, a * 345, a * 139, a * 319, a * 142);
    f.closePath();
    Td(f, b[3], b[3], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 309, a * 168);
    f.bezierCurveTo(a * 345, a * 163, a * 372, a * 180, a * 412, a * 203);
    Td(f, b[2], b[3], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 263, a * 54);
    f.bezierCurveTo(a * 305, a * 44, a * 307, a * 51, a * 311, a * 64);
    f.bezierCurveTo(a * 270.5, a * 129.5, a * 270.5, a * 129.5, a * 230, a * 195);
    f.bezierCurveTo(a * 221, a * 175, a * 203, a * 171, a * 186, a * 172);
    f.closePath();
    Td(f, b[3], b[3], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 292, a * 198);
    f.bezierCurveTo(a * 328, a * 191, a * 364, a * 211, a * 401, a * 237);
    Td(f, b[2], b[3], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 245, a * 68);
    f.bezierCurveTo(a * 210, a * 72, a * 210, a * 72, a * 189, a * 69);
    Td(f, b[2], b[3], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 222, a * 96);
    f.bezierCurveTo(a * 196, a * 97, a * 193, a * 97, a * 177, a * 92);
    Td(f, b[2], b[3], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 207, a * 124);
    f.bezierCurveTo(a * 179, a * 123, a * 177, a * 124, a * 161, a * 119);
    Td(f, b[2], b[3], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 115, a * 183);
    f.bezierCurveTo(a * 184, a * 185, a * 203, a * 198, a * 219, a * 221);
    Td(f, b[2], b[3], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 98, a * 213);
    f.bezierCurveTo(a * 161, a * 214, a * 193, a * 227, a * 201, a * 249);
    Td(f, b[2], b[3], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 399, a * 257);
    f.bezierCurveTo(a * 287, a * 215, a * 280, a * 215, a * 263, a * 222);
    f.bezierCurveTo(a * 253, a * 238, a * 247, a * 245, a * 243, a * 254);
    f.bezierCurveTo(a * 267, a * 236, a * 292, a * 263, a * 377, a * 284);
    Td(f, b[3], b[3], a * 12);
    return d;
  }
  function tm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 173;
    c.height = a * 178;
    d.globalAlpha = 0.5;
    Pd(d, a * 86.5, a * 98, a * 80);
    Td(d, b[0]);
    d.globalAlpha = 1;
    Pd(d, a * 86.5, a * 89, a * 81);
    Td(d, b[1], b[2], a * 4);
    Pd(d, a * 86.5, a * 86, a * 59);
    Td(d, b[3], b[4], a * 4);
    d.globalAlpha = 0.5;
    Pd(d, a * 86.5, a * 95, a * 34);
    Td(d, b[0]);
    d.globalAlpha = 1;
    Pd(d, a * 86.5, a * 89, a * 34);
    Td(d, b[5]);
    return c;
  }
  function nm(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 790;
    f.translate(a * 5, a * 5);
    f.globalAlpha = b ? 0 : 0;
    Pd(f, a * 178.5, a * 172.828125, a * 150);
    Td(f, kn, c[0], a * 65);
    Pd(f, a * 178.5, a * 172.828125, a * 150);
    Td(f, undefined, c[0], a * 55);
    f.closePath();
    f.save();
    f.translate(a * 177, a * 512.328125);
    yd(f, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    f.restore();
    Td(f, c[0]);
    f.save();
    f.translate(a * 136, a * 581.828125);
    yd(f, a * -39, a * -23, a * 78, a * 46, a * 25);
    f.restore();
    Td(f, c[0]);
    f.save();
    f.translate(a * 135.5, a * 663.828125);
    yd(f, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    f.restore();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 114, a * 594.828125);
    f.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    f.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    f.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    f.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    f.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(0, a * 5);
    f.moveTo(a * 140, a * 294.828125);
    f.bezierCurveTo(a * 212, a * 295.828125, a * 176.5, a * 295.328125, a * 213, a * 295.828125);
    f.bezierCurveTo(a * 201.5, a * 325.328125, a * 201.5, a * 325.328125, a * 190, a * 354.828125);
    f.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 161, a * 356.828125);
    f.bezierCurveTo(a * 154.5, a * 328.828125, a * 154.5, a * 328.828125, a * 148, a * 300.828125);
    f.closePath();
    Td(f, c[0]);
    f.translate(3, a * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 159, a * 679.828125);
    f.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    f.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    f.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    f.closePath();
    Td(f, c[0]);
    f.save();
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 157, a * 548.828125);
    f.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    f.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    f.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    f.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    f.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    f.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    f.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    f.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    f.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    f.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    f.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    f.closePath();
    Td(f, c[0], c[0], a * 7);
    f.restore();
    f.globalAlpha = 1;
    f.translate(a * 15, a * 35);
    Pd(f, a * 178.5, a * 172.828125, a * 150);
    Td(f, undefined, c[2], a * 95);
    Pd(f, a * 178.5, a * 172.828125, a * 150);
    Td(f, ah, c[1], a * 55);
    f.closePath();
    f.save();
    f.translate(a * 177, a * 512.328125);
    yd(f, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    f.restore();
    Td(f, c[1], c[2], a * 20);
    f.save();
    f.translate(a * 136, a * 581.828125);
    yd(f, a * -39, a * -23, a * 78, a * 46, a * 25);
    f.restore();
    Td(f, c[1], c[2], a * 20);
    f.save();
    f.translate(a * 135.5, a * 663.828125);
    yd(f, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    f.restore();
    Td(f, c[1], c[2], a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 114, a * 594.828125);
    f.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    f.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    f.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    f.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    f.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    f.closePath();
    Td(f, c[1]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(0, a * 5);
    f.moveTo(a * 123, a * 294.828125);
    f.bezierCurveTo(a * 212, a * 295.828125, a * 190.5, a * 295.328125, a * 250, a * 295.828125);
    f.bezierCurveTo(a * 231.5, a * 325.328125, a * 231.5, a * 325.328125, a * 220, a * 354.828125);
    f.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 140, a * 356.828125);
    f.bezierCurveTo(a * 123.5, a * 328.828125, a * 123.5, a * 328.828125, a * 123, a * 294.828125);
    f.closePath();
    Td(f, c[1]);
    f.translate(0, a * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 159, a * 679.828125);
    f.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    f.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    f.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    f.closePath();
    Td(f, c[1]);
    f.save();
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 157, a * 548.828125);
    f.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    f.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    f.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    f.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    f.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    f.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    f.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    f.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    f.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    f.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    f.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    f.closePath();
    Td(f, c[1], c[1], a * 7);
    f.restore();
    return d;
  }
  function om(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    f.translate(a * 10, a * 10);
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 20, a * 20);
    yd(f, 0, 0, a * 400, a * 220, a * 30);
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -20, a * -20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 9, a * 5);
    f.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    f.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
    f.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    f.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    f.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    f.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    f.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    f.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
    f.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
    f.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    f.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
    f.closePath();
    Td(f, c[2], c[1], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 5, a * 70);
    f.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
    f.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    f.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    f.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    f.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    f.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    f.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
    f.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    f.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    f.closePath();
    Td(f, c[3], c[1], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 19, a * 158);
    f.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
    f.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
    f.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    f.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    f.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    f.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    f.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    f.closePath();
    Td(f, c[2], c[1], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 4, a * 183);
    f.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
    f.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    f.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    f.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    f.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    f.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    f.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
    f.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
    f.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    f.closePath();
    Td(f, c[3], c[1], a * 12);
    Pd(f, a * 41, a * 30, a * 14.7648230602334);
    Td(f, c[3], c[1], a * 12);
    Pd(f, a * 369, a * 30, a * 15.556349186104045);
    Td(f, c[3], c[1], a * 12);
    Pd(f, a * 364, a * 190, a * 15.620499351813308);
    Td(f, c[3], c[1], a * 12);
    Pd(f, a * 41, a * 186, a * 15.556349186104045);
    Td(f, c[3], c[1], a * 12);
    return d;
  }
  function am(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 247;
    d.height = a * 247;
    f.translate(0, a * 10);
    f.globalAlpha = b ? 0.5 : 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 150, a * 62);
    f.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    f.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 164, a * 171);
    f.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    f.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 132, a * 95);
    f.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    f.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    f.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    f.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    f.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    f.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    f.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    f.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    f.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    f.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    f.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    f.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    f.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    f.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    f.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    f.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    f.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    f.closePath();
    Td(f, c[0]);
    f.translate(0, a * -10);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 150, a * 62);
    f.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    f.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    f.closePath();
    Td(f, c[5]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 164, a * 171);
    f.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    f.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    f.closePath();
    Td(f, c[5]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 132, a * 95);
    f.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    f.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    f.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    f.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    f.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    f.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    f.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    f.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    f.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    f.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    f.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    f.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    f.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    f.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    f.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    f.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    f.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    f.closePath();
    Td(f, c[1], c[2], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 137, a * 137);
    f.bezierCurveTo(a * 145, a * 125, a * 138, a * 108, a * 123, a * 104);
    f.bezierCurveTo(a * 81, a * 101, a * 88, a * 77, a * 98, a * 65);
    f.bezierCurveTo(a * 117, a * 38, a * 138, a * 39, a * 165, a * 52);
    f.bezierCurveTo(a * 197, a * 72, a * 207, a * 111, a * 197, a * 140);
    f.bezierCurveTo(a * 182, a * 180, a * 161, a * 197, a * 112, a * 194);
    f.bezierCurveTo(a * 58, a * 194, a * 37, a * 170, a * 34, a * 142);
    f.bezierCurveTo(a * 29, a * 102, a * 40, a * 63, a * 51, a * 45);
    f.bezierCurveTo(a * 43, a * 78, a * 41, a * 103, a * 43, a * 122);
    f.bezierCurveTo(a * 51, a * 158, a * 63, a * 174, a * 95, a * 179);
    f.bezierCurveTo(a * 129, a * 186, a * 169, a * 172, a * 177, a * 144);
    f.bezierCurveTo(a * 197, a * 105, a * 172, a * 76, a * 160, a * 71);
    f.bezierCurveTo(a * 125, a * 52, a * 111, a * 73, a * 111, a * 81);
    f.bezierCurveTo(a * 106, a * 93, a * 140, a * 92, a * 147, a * 107);
    f.bezierCurveTo(a * 153, a * 128, a * 140, a * 135, a * 137, a * 139);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 132, a * 95);
    f.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    f.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    f.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    f.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    f.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    f.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    f.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    f.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    f.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    f.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    f.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    f.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    f.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    f.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    f.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    f.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    f.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    f.closePath();
    Td(f, Al, c[2], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 82, a * 63);
    f.bezierCurveTo(a * 91, a * 64, a * 96, a * 62, a * 98, a * 53);
    f.bezierCurveTo(a * 91, a * 45, a * 85, a * 42, a * 78, a * 41);
    f.bezierCurveTo(a * 81, a * 51, a * 82, a * 57, a * 82, a * 63);
    f.closePath();
    Td(f, c[4], c[5], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 148, a * 40);
    f.bezierCurveTo(a * 140, a * 52, a * 131, a * 51, a * 123, a * 43);
    f.bezierCurveTo(a * 123, a * 25, a * 129, a * 17, a * 134, a * 12);
    f.bezierCurveTo(a * 138, a * 35, a * 142, a * 31, a * 148, a * 40);
    f.closePath();
    Td(f, c[4], c[5], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 189, a * 43);
    f.bezierCurveTo(a * 191, a * 54, a * 196, a * 58, a * 205, a * 59);
    f.bezierCurveTo(a * 211, a * 42, a * 214, a * 37, a * 216, a * 31);
    f.bezierCurveTo(a * 202, a * 34, a * 195, a * 39, a * 190, a * 43);
    f.closePath();
    Td(f, c[4], c[5], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 216, a * 98);
    f.bezierCurveTo(a * 219, a * 105, a * 225, a * 107, a * 230, a * 109);
    f.bezierCurveTo(a * 227, a * 113, a * 221, a * 115, a * 215, a * 115);
    f.bezierCurveTo(a * 208, a * 109, a * 211, a * 101, a * 216, a * 98);
    f.closePath();
    Td(f, c[4], c[5], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 180, a * 85);
    f.bezierCurveTo(a * 193, a * 86, a * 196, a * 98, a * 191, a * 108);
    f.bezierCurveTo(a * 179, a * 112, a * 167, a * 113, a * 155, a * 111);
    f.bezierCurveTo(a * 169, a * 100, a * 176, a * 96, a * 180, a * 85);
    f.closePath();
    Td(f, c[4], c[5], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 96, a * 114);
    f.bezierCurveTo(a * 102, a * 109, a * 112, a * 110, a * 114, a * 118);
    f.bezierCurveTo(a * 111, a * 134, a * 102, a * 143, a * 95, a * 147);
    f.bezierCurveTo(a * 98, a * 123, a * 97, a * 119, a * 96, a * 115);
    f.closePath();
    Td(f, c[4], c[5], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 79, a * 92);
    f.bezierCurveTo(a * 86, a * 95, a * 89, a * 102, a * 83, a * 111);
    f.bezierCurveTo(a * 70, a * 110, a * 61, a * 107, a * 54, a * 100);
    f.bezierCurveTo(a * 70, a * 97, a * 70, a * 95, a * 78, a * 92);
    f.closePath();
    Td(f, c[4], c[5], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 39, a * 130);
    f.bezierCurveTo(a * 37, a * 141, a * 41, a * 143, a * 48, a * 144);
    f.bezierCurveTo(a * 54, a * 134, a * 55, a * 131, a * 56, a * 123);
    f.bezierCurveTo(a * 47, a * 129, a * 43, a * 129, a * 39, a * 129);
    f.closePath();
    Td(f, c[4], c[5], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 113, a * 189);
    f.bezierCurveTo(a * 119, a * 201, a * 127, a * 198, a * 134, a * 192);
    f.bezierCurveTo(a * 128, a * 175, a * 128, a * 173, a * 128, a * 165);
    f.bezierCurveTo(a * 117, a * 176, a * 116, a * 182, a * 113, a * 187);
    f.closePath();
    Td(f, c[4], c[5], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 74, a * 154);
    f.bezierCurveTo(a * 76, a * 163, a * 76, a * 170, a * 75, a * 177);
    f.bezierCurveTo(a * 68, a * 179, a * 66, a * 176, a * 63, a * 171);
    f.bezierCurveTo(a * 69, a * 164, a * 72, a * 159, a * 74, a * 154);
    f.closePath();
    Td(f, c[4], c[5], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 206, a * 152);
    f.bezierCurveTo(a * 198, a * 158, a * 198, a * 166, a * 201, a * 171);
    f.bezierCurveTo(a * 209, a * 170, a * 221, a * 170, a * 226, a * 172);
    f.bezierCurveTo(a * 219, a * 159, a * 210, a * 155, a * 207, a * 153);
    f.closePath();
    Td(f, c[4], c[5], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 181, a * 184);
    f.bezierCurveTo(a * 170, a * 184, a * 167, a * 187, a * 163, a * 195);
    f.bezierCurveTo(a * 171, a * 207, a * 183, a * 214, a * 191, a * 217);
    f.bezierCurveTo(a * 183, a * 204, a * 184, a * 196, a * 181, a * 184);
    f.closePath();
    Td(f, c[4], c[5], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 66, a * 199);
    f.bezierCurveTo(a * 73, a * 197, a * 78, a * 199, a * 79, a * 206);
    f.bezierCurveTo(a * 71, a * 216, a * 67, a * 221, a * 57, a * 223);
    f.closePath();
    Td(f, c[4], c[5], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 182, a * 143);
    f.bezierCurveTo(a * 183, a * 146, a * 183, a * 149, a * 179, a * 152);
    f.bezierCurveTo(a * 174, a * 146, a * 174, a * 146, a * 169, a * 140);
    f.closePath();
    Td(f, c[4], c[5], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 32, a * 159);
    f.bezierCurveTo(a * 45, a * 160, a * 48, a * 164, a * 45, a * 175);
    f.bezierCurveTo(a * 28, a * 183, a * 25, a * 184, a * 19, a * 184);
    f.bezierCurveTo(a * 30, a * 170, a * 29, a * 164, a * 31, a * 160);
    f.closePath();
    Td(f, c[4], c[5], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 110, a * 214);
    f.bezierCurveTo(a * 106, a * 212, a * 104, a * 213, a * 102, a * 218);
    f.bezierCurveTo(a * 104, a * 220, a * 107, a * 222, a * 110, a * 224);
    f.bezierCurveTo(a * 110.5, a * 219, a * 110.5, a * 219, a * 111, a * 214);
    f.closePath();
    Td(f, c[4], c[5], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 40, a * 52);
    f.bezierCurveTo(a * 41, a * 57, a * 40, a * 61, a * 34, a * 60);
    f.bezierCurveTo(a * 31.5, a * 55, a * 31.5, a * 55, a * 29, a * 50);
    f.bezierCurveTo(a * 34, a * 50.5, a * 34, a * 50.5, a * 39, a * 51);
    f.closePath();
    Td(f, c[4], c[5], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 31, a * 81);
    f.bezierCurveTo(a * 37, a * 84, a * 38, a * 90, a * 34, a * 99);
    f.bezierCurveTo(a * 23, a * 97, a * 19, a * 96, a * 16, a * 93);
    f.bezierCurveTo(a * 24, a * 88, a * 28, a * 85, a * 30, a * 81);
    f.closePath();
    Td(f, c[4], c[5], a * 5);
    return d;
  }
  function rm(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 145;
    d.height = a * 120;
    f.beginPath();
    f.scale(0.6, 0.6);
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(a * 18, a * -8);
    f.moveTo(a * 101, a * 72);
    f.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    f.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    f.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    f.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    f.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    f.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    f.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    f.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    f.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    f.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    f.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    f.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    f.closePath();
    Td(f, c[4], c[5], a * 4);
    f.beginPath();
    f.scale(1.1, 1.1);
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(a * -9, a * 4);
    f.moveTo(a * 101, a * 72);
    f.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    f.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    f.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    f.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    f.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    f.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    f.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    f.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    f.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    f.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    f.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    f.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    f.closePath();
    Td(f, c[4], c[5], a * 4);
    f.scale(1.1, 1.1);
    f.translate(a * -9, a * 4);
    f.save();
    f.translate(a * 100, a * 73.06874084472656);
    f.rotate(0);
    yd(f, a * -61, a * -38.5, a * 122, a * 40, a * 20);
    f.restore();
    Td(f, c[1], c[2], a * 4);
    f.save();
    f.translate(a * 100, a * 71.36874389648438);
    f.rotate(0);
    yd(f, a * -60.5, a * -18, a * 121, a * 30, a * 20);
    f.restore();
    Td(f, c[3], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 144, a * 80);
    f.bezierCurveTo(a * 152, a * 100, a * 152, a * 101, a * 153, a * 102);
    f.bezierCurveTo(a * 159, a * 100, a * 159, a * 100, a * 160, a * 100);
    f.bezierCurveTo(a * 161, a * 84, a * 161, a * 84, a * 162, a * 68);
    f.closePath();
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 57, a * 75);
    f.bezierCurveTo(a * 48, a * 101, a * 53, a * 89, a * 48, a * 102);
    f.bezierCurveTo(a * 44, a * 100, a * 44, a * 100, a * 39, a * 97);
    f.bezierCurveTo(a * 39, a * 83, a * 39, a * 83, a * 39, a * 69);
    f.closePath();
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 101, a * 72);
    f.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    f.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    f.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    f.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    f.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    f.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    f.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    f.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    f.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    f.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    f.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    f.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    f.closePath();
    Td(f, c[4], c[5], a * 4);
    f.translate(0, 0);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 115.5, a * 116.07290649414062);
    f.bezierCurveTo(a * 159.5, a * 99.07290649414062, a * 159.5, a * 98.07290649414062, a * 159.5, a * 98.07290649414062);
    f.bezierCurveTo(a * 155.5, a * 116.07290649414062, a * 159.5, a * 116.07290649414062, a * 159.5, a * 118.07290649414062);
    f.bezierCurveTo(a * 147.5, a * 130.07290649414062, a * 136.5, a * 132.07290649414062, a * 115.5, a * 138.07290649414062);
    f.closePath();
    Td(f, c[3], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 39.5, a * 96.07290649414062);
    f.bezierCurveTo(a * 85.5, a * 114.07290649414062, a * 62.5, a * 105.57290649414062, a * 85.5, a * 115.07290649414062);
    f.bezierCurveTo(a * 85.5, a * 125.57290649414062, a * 85.5, a * 125.57290649414062, a * 85.5, a * 136.07290649414062);
    f.bezierCurveTo(a * 51.5, a * 129.07290649414062, a * 51.5, a * 125.07290649414062, a * 41.5, a * 118.07290649414062);
    f.bezierCurveTo(a * 44.5, a * 106.07290649414062, a * 42.5, a * 103.07290649414062, a * 40.5, a * 96.07290649414062);
    f.closePath();
    Td(f, c[3], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 86, a * 80);
    f.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    f.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    f.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    f.closePath();
    Td(f, c[3], c[2], a * 4);
    f.scale(0.5, 0.5);
    f.translate(a * 100, a * 71);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 86, a * 80);
    f.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    f.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    f.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    f.closePath();
    Td(f, c[6], c[2], a * 4);
    return d;
  }
  function sm(a, b, c) {
    var d = (f = document.createElement("canvas")).getContext("2d");
    if (c == 0) {
      f.width = a * 566;
      f.height = a * 429;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 312.625, a * 39.046875);
      d.bezierCurveTo(a * 456.625, a * 60.046875, a * 521.625, a * 134.046875, a * 528.625, a * 199.046875);
      d.bezierCurveTo(a * 540.625, a * 298.046875, a * 491.625, a * 364.046875, a * 405.625, a * 394.046875);
      d.bezierCurveTo(a * 270.625, a * 429.046875, a * 182.625, a * 395.046875, a * 100.625, a * 344.046875);
      d.bezierCurveTo(a * 15.625, a * 283.046875, a * 20.625, a * 195.046875, a * 33.625, a * 158.046875);
      d.bezierCurveTo(a * 56.625, a * 80.046875, a * 102.625, a * 46.046875, a * 183.625, a * 33.046875);
      d.bezierCurveTo(a * 225.625, a * 25.046875, a * 270.625, a * 30.046875, a * 312.625, a * 39.046875);
      d.closePath();
      Td(d, b[0]);
    } else if (c == 1) {
      d = (f = document.createElement("canvas")).getContext("2d");
      f.width = a * 511;
      f.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 141.625, a * 49.296875);
      d.bezierCurveTo(a * 225.625, a * 10.296875, a * 320.625, a * 16.296875, a * 390.625, a * 39.296875);
      d.bezierCurveTo(a * 476.625, a * 71.296875, a * 483.625, a * 142.296875, a * 486.625, a * 197.296875);
      d.bezierCurveTo(a * 491.625, a * 289.296875, a * 462.625, a * 317.296875, a * 417.625, a * 351.296875);
      d.bezierCurveTo(a * 367.625, a * 385.296875, a * 313.625, a * 404.296875, a * 218.625, a * 395.296875);
      d.bezierCurveTo(a * 108.625, a * 381.296875, a * 81.625, a * 350.296875, a * 52.625, a * 305.296875);
      d.bezierCurveTo(a * 16.625, a * 244.296875, a * 23.625, a * 171.296875, a * 37.625, a * 145.296875);
      d.bezierCurveTo(a * 65.625, a * 84.296875, a * 97.625, a * 74.296875, a * 141.625, a * 49.296875);
      d.closePath();
      Td(d, b[0]);
    } else if (c == 2) {
      var f;
      d = (f = document.createElement("canvas")).getContext("2d");
      f.width = a * 504;
      f.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 153.625, a * 46.296875);
      d.bezierCurveTo(a * 271.625, a * 17.296875, a * 345.625, a * 35.296875, a * 410.625, a * 71.296875);
      d.bezierCurveTo(a * 473.625, a * 109.296875, a * 478.625, a * 167.296875, a * 473.625, a * 205.296875);
      d.bezierCurveTo(a * 462.625, a * 295.296875, a * 438.625, a * 316.296875, a * 388.625, a * 345.296875);
      d.bezierCurveTo(a * 331.625, a * 374.296875, a * 273.625, a * 392.296875, a * 180.625, a * 387.296875);
      d.bezierCurveTo(a * 111.625, a * 380.296875, a * 86.625, a * 360.296875, a * 51.625, a * 309.296875);
      d.bezierCurveTo(a * 23.625, a * 267.296875, a * 25.625, a * 226.296875, a * 27.625, a * 175.296875);
      d.bezierCurveTo(a * 37.625, a * 99.296875, a * 88.625, a * 57.296875, a * 153.625, a * 46.296875);
      d.closePath();
      Td(d, b[0]);
    }
    return f;
  }
  function hm(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 46;
    d.height = a * 140;
    f.scale(a * -1, a * 1);
    f.translate(a * -50, a * 40);
    f.translate(a * -20, 0);
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 10, 0);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    f.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    f.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    f.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    f.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(a * -1, 0);
    f.moveTo(a * 17.599990844726562, a * 89.75);
    f.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    f.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    f.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(a * 1, 0);
    f.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    f.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    f.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    f.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    f.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    f.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    f.closePath();
    Td(f, c[0]);
    f.save();
    f.translate(a * 23.599990844726562, a * 110.94999694824219);
    f.rotate(0);
    yd(f, a * -7, a * -4, a * 14, a * 8, a * 10);
    f.restore();
    Td(f, c[0]);
    f.translate(a * 0, 0);
    f.globalAlpha = 1;
    f.translate(a * 10, 0);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    f.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    f.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    f.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    f.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    f.closePath();
    Td(f, c[3], c[4], a * 3);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(a * -1, 0);
    f.moveTo(a * 17.599990844726562, a * 89.75);
    f.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    f.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    f.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    f.closePath();
    Td(f, c[1], c[2], a * 3);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(a * 1, 0);
    f.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    f.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    f.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    f.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    f.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    f.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    f.closePath();
    Td(f, c[1], c[2], a * 3);
    f.save();
    f.translate(a * 23.599990844726562, a * 110.94999694824219);
    f.rotate(0);
    yd(f, a * -7, a * -4, a * 14, a * 8, a * 10);
    f.restore();
    Td(f, c[1], c[2], a * 3);
    return d;
  }
  function lm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 260;
    d.globalAlpha = 0.5;
    Pd(d, a * 126.5, a * 134, a * 119);
    Td(d, b[0]);
    d.globalAlpha = 1;
    Pd(d, a * 126.5, a * 124, a * 119);
    Td(d, b[1], b[2], a * 4);
    Pd(d, a * 126.5, a * 127, a * 100);
    Td(d, b[3]);
    d.globalAlpha = 0.5;
    Pd(d, a * 126.5, a * 135, a * 81);
    Td(d, b[0]);
    d.globalAlpha = 1;
    Pd(d, a * 126.5, a * 125, a * 84);
    Td(d, b[4], b[5], a * 4);
    Pd(d, a * 126.5, a * 125, a * 61);
    Td(d, b[6], b[7], a * 4);
    d.globalAlpha = 0.5;
    Pd(d, a * 126.5, a * 134, a * 40);
    Td(d, b[8]);
    d.globalAlpha = 1;
    Pd(d, a * 126.5, a * 125, a * 40);
    Td(d, b[9]);
    return c;
  }
  function gm(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 372;
    d.height = a * 358;
    f.translate(a * 0, a * 10);
    f.globalAlpha = b ? 0.2 : 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    f.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    f.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    f.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    f.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    f.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    f.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    f.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    f.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    f.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    f.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    f.closePath();
    Td(f, c[0], c[0], a * 10);
    f.translate(a * 0, a * -10);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 107.00003051757812, a * 54.13069152832031);
    f.bezierCurveTo(a * 106.50003051757812, a * 38.63069152832031, a * 106.50003051757812, a * 38.63069152832031, a * 106.00003051757812, a * 23.130691528320312);
    f.bezierCurveTo(a * 121.50003051757812, a * 38.13069152832031, a * 121.50003051757812, a * 38.13069152832031, a * 137.00003051757812, a * 53.13069152832031);
    f.closePath();
    Td(f, c[2], c[3], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 233.00003051757812, a * 53.6761474609375);
    f.bezierCurveTo(a * 247.00003051757812, a * 37.1761474609375, a * 247.00003051757812, a * 37.1761474609375, a * 261.0000305175781, a * 20.6761474609375);
    f.bezierCurveTo(a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 51.6761474609375);
    f.closePath();
    Td(f, c[2], c[3], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 293.0000305175781, a * 54.403411865234375);
    f.bezierCurveTo(a * 300.0000305175781, a * 49.903411865234375, a * 300.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 45.403411865234375);
    f.bezierCurveTo(a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 54.403411865234375);
    f.closePath();
    Td(f, c[2], c[3], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 77.00003051757812, a * 54.403411865234375);
    f.bezierCurveTo(a * 70.00003051757812, a * 50.403411865234375, a * 70.00003051757812, a * 50.403411865234375, a * 63.000030517578125, a * 46.403411865234375);
    f.bezierCurveTo(a * 62.500030517578125, a * 50.903411865234375, a * 62.500030517578125, a * 50.903411865234375, a * 62.000030517578125, a * 55.403411865234375);
    f.closePath();
    Td(f, c[2], c[3], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 58.000030517578125, a * 122.3125);
    f.bezierCurveTo(a * 59.500030517578125, a * 97.3125, a * 59.500030517578125, a * 97.3125, a * 61.000030517578125, a * 72.3125);
    f.bezierCurveTo(a * 91.00003051757812, a * 89.3125, a * 91.00003051757812, a * 89.3125, a * 121.00003051757812, a * 106.3125);
    f.closePath();
    Td(f, c[1], c[1], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 310.0000305175781, a * 127.3125);
    f.bezierCurveTo(a * 308.0000305175781, a * 98.3125, a * 308.0000305175781, a * 98.3125, a * 306.0000305175781, a * 69.3125);
    f.bezierCurveTo(a * 274.5000305175781, a * 88.8125, a * 274.5000305175781, a * 88.8125, a * 243.00003051757812, a * 108.3125);
    f.closePath();
    Td(f, c[1], c[1], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 226.00003051757812, a * 87.85795593261719);
    f.bezierCurveTo(a * 243.50003051757812, a * 66.85795593261719, a * 243.50003051757812, a * 66.85795593261719, a * 261.0000305175781, a * 45.85795593261719);
    f.bezierCurveTo(a * 265.0000305175781, a * 83.85795593261719, a * 265.0000305175781, a * 83.85795593261719, a * 269.0000305175781, a * 121.85795593261719);
    f.bezierCurveTo(a * 235.00003051757812, a * 122.85795593261719, a * 233.00003051757812, a * 107.85795593261719, a * 228.00003051757812, a * 90.85795593261719);
    f.closePath();
    Td(f, c[2], c[3], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 105.00003051757812, a * 128.8579559326172);
    f.bezierCurveTo(a * 104.50003051757812, a * 87.85795593261719, a * 104.50003051757812, a * 87.85795593261719, a * 104.00003051757812, a * 46.85795593261719);
    f.bezierCurveTo(a * 126.50003051757812, a * 69.35795593261719, a * 126.50003051757812, a * 69.35795593261719, a * 149.00003051757812, a * 91.85795593261719);
    f.bezierCurveTo(a * 130.00003051757812, a * 123.85795593261719, a * 123.00003051757812, a * 132.8579559326172, a * 107.00003051757812, a * 130.8579559326172);
    f.closePath();
    Td(f, c[1], c[1], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 59.000030517578125, a * 121.85795593261719);
    f.bezierCurveTo(a * 59.500030517578125, a * 99.35795593261719, a * 59.500030517578125, a * 99.35795593261719, a * 60.000030517578125, a * 76.85795593261719);
    f.bezierCurveTo(a * 84.00003051757812, a * 92.35795593261719, a * 84.00003051757812, a * 92.35795593261719, a * 108.00003051757812, a * 107.85795593261719);
    f.bezierCurveTo(a * 106.00003051757812, a * 148.8579559326172, a * 86.00003051757812, a * 148.8579559326172, a * 62.000030517578125, a * 123.85795593261719);
    f.closePath();
    Td(f, c[2], c[3], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 105.00003051757812, a * 132.8579559326172);
    f.bezierCurveTo(a * 104.50003051757812, a * 93.35795593261719, a * 104.50003051757812, a * 93.35795593261719, a * 104.00003051757812, a * 53.85795593261719);
    f.bezierCurveTo(a * 126.50003051757812, a * 75.85795593261719, a * 126.50003051757812, a * 75.85795593261719, a * 149.00003051757812, a * 97.85795593261719);
    f.closePath();
    Td(f, c[2], c[3], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 311.0000305175781, a * 126.85795593261719);
    f.bezierCurveTo(a * 309.0000305175781, a * 101.35795593261719, a * 309.0000305175781, a * 101.35795593261719, a * 307.0000305175781, a * 75.85795593261719);
    f.bezierCurveTo(a * 271.0000305175781, a * 96.85795593261719, a * 271.0000305175781, a * 96.85795593261719, a * 235.00003051757812, a * 117.85795593261719);
    f.closePath();
    Td(f, c[2], c[3], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 228.00003051757812, a * 96.85795593261719);
    f.bezierCurveTo(a * 244.50003051757812, a * 74.85795593261719, a * 244.50003051757812, a * 74.85795593261719, a * 261.0000305175781, a * 52.85795593261719);
    f.bezierCurveTo(a * 265.5000305175781, a * 89.85795593261719, a * 265.5000305175781, a * 89.85795593261719, a * 270.0000305175781, a * 126.85795593261719);
    f.closePath();
    Td(f, c[2], c[3], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 12.000030517578125, a * 86.13069152832031);
    f.bezierCurveTo(a * 36.000030517578125, a * 113.13069152832031, a * 84.00003051757812, a * 111.13069152832031, a * 116.00003051757812, a * 113.13069152832031);
    f.bezierCurveTo(a * 164.00003051757812, a * 23.130691528320312, a * 172.00003051757812, a * 18.130691528320312, a * 181.00003051757812, a * 9.130691528320312);
    f.bezierCurveTo(a * 199.00003051757812, a * 29.130691528320312, a * 221.00003051757812, a * 78.13069152832031, a * 247.00003051757812, a * 112.13069152832031);
    f.bezierCurveTo(a * 301.0000305175781, a * 122.13069152832031, a * 338.0000305175781, a * 111.13069152832031, a * 359.0000305175781, a * 94.13069152832031);
    f.bezierCurveTo(a * 359.0000305175781, a * 113.13069152832031, a * 358.5000305175781, a * 105.13069152832031, a * 358.0000305175781, a * 116.13069152832031);
    f.bezierCurveTo(a * 270.5000305175781, a * 130.1306915283203, a * 270.5000305175781, a * 130.1306915283203, a * 183.00003051757812, a * 144.1306915283203);
    f.bezierCurveTo(a * 98.00003051757812, a * 128.6306915283203, a * 98.00003051757812, a * 128.6306915283203, a * 13.000030517578125, a * 113.13069152832031);
    f.closePath();
    Td(f, c[1], c[1], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    f.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    f.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    f.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    f.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    f.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    f.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    f.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    f.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    f.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    f.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    f.closePath();
    Td(f, c[2], c[3], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 27.000030517578125, a * 94.76704406738281);
    f.bezierCurveTo(a * 11.000030517578125, a * 81.76704406738281, a * 31.000030517578125, a * 72.76704406738281, a * 44.000030517578125, a * 59.76704406738281);
    f.bezierCurveTo(a * 9.000030517578125, a * 65.76704406738281, a * 4.000030517578125, a * 78.76704406738281, a * 9.000030517578125, a * 89.76704406738281);
    f.closePath();
    Td(f, c[2], c[3], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 352.0000305175781, a * 100.76705932617188);
    f.bezierCurveTo(a * 362.0000305175781, a * 92.76705932617188, a * 352.0000305175781, a * 84.76705932617188, a * 340.0000305175781, a * 68.76705932617188);
    f.bezierCurveTo(a * 360.0000305175781, a * 69.76705932617188, a * 364.0000305175781, a * 79.76705932617188, a * 364.0000305175781, a * 94.76705932617188);
    f.closePath();
    Td(f, c[1], c[1], a * 1);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 25.000030517578125, a * 97.94886779785156);
    f.bezierCurveTo(a * 2.000030517578125, a * 76.94886779785156, a * 29.000030517578125, a * 62.94886779785156, a * 44.000030517578125, a * 59.94886779785156);
    f.bezierCurveTo(a * 8.000030517578125, a * 59.94886779785156, a * -0.999969482421875, a * 81.94886779785156, a * 4.000030517578125, a * 92.94886779785156);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 349.0000305175781, a * 100.94886779785156);
    f.bezierCurveTo(a * 366.0000305175781, a * 82.94886779785156, a * 353.0000305175781, a * 76.94886779785156, a * 337.0000305175781, a * 67.94886779785156);
    f.bezierCurveTo(a * 366.0000305175781, a * 69.94886779785156, a * 366.0000305175781, a * 83.94886779785156, a * 363.0000305175781, a * 101.94886779785156);
    f.closePath();
    Td(f, c[2], c[3], a * 10);
    Pd(f, a * 46.000030517578125, a * 137.5852279663086, a * 9.219544457292887);
    Td(f, c[4], c[5], a * 1);
    Pd(f, a * 308.0000305175781, a * 141.5852279663086, a * 8.54400374531753);
    Td(f, c[4], c[5], a * 1);
    Pd(f, a * 92.00003051757812, a * 149.58523559570312, a * 14.866068747318506);
    Td(f, c[4], c[5], a * 1);
    Pd(f, a * 262.0000305175781, a * 148.8579559326172, a * 15.620499351813308);
    Td(f, c[4], c[5], a * 1);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 184.00003051757812, a * 68.85795593261719);
    f.bezierCurveTo(a * 203.00003051757812, a * 108.85795593261719, a * 203.00003051757812, a * 108.85795593261719, a * 222.00003051757812, a * 148.8579559326172);
    f.bezierCurveTo(a * 202.50003051757812, a * 177.8579559326172, a * 202.50003051757812, a * 177.8579559326172, a * 183.00003051757812, a * 206.8579559326172);
    f.bezierCurveTo(a * 162.00003051757812, a * 178.8579559326172, a * 162.00003051757812, a * 178.8579559326172, a * 141.00003051757812, a * 150.8579559326172);
    f.closePath();
    Td(f, c[4], c[5], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 183.00003051757812, a * 104.94886779785156);
    f.bezierCurveTo(a * 192.50003051757812, a * 125.44886779785156, a * 192.50003051757812, a * 125.44886779785156, a * 202.00003051757812, a * 145.94886779785156);
    f.bezierCurveTo(a * 192.00003051757812, a * 163.94886779785156, a * 192.00003051757812, a * 163.94886779785156, a * 182.00003051757812, a * 181.94886779785156);
    f.bezierCurveTo(a * 172.50003051757812, a * 164.44886779785156, a * 172.50003051757812, a * 164.44886779785156, a * 163.00003051757812, a * 146.94886779785156);
    f.closePath();
    Td(f, c[6]);
    return d;
  }
  function um(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 20;
    c.height = a * 35;
    yd(d, 0, 0, 20, 35, 7);
    Td(d, b[0]);
    return c;
  }
  function bm(b, c, d) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 170;
    f.height = b * 170;
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 5);
    g.save();
    g.translate(b * 85, b * 88);
    g.rotate(1.4);
    wd(g, 7, b * 60, b * 10);
    g.restore();
    Td(g, d[0]);
    g.globalAlpha = 1;
    g.translate(b * 85, b * 80);
    for (var h = 0; h < 10; h++) {
      g.rotate(Math.PI / 5);
      g.save();
      g.translate(b * 65, 0);
      wd(g, 3, b * 21, b * 4);
      Td(g, d[1], d[2], b * 4);
      g.restore();
    }
    g.save();
    g.translate(b * 0, b * 0);
    g.rotate(1.4);
    wd(g, 7, b * 60, b * 10);
    Td(g, d[3], d[4], b * 4);
    g.rotate(0.64);
    wd(g, 7, b * 40, b * 10);
    Td(g, d[5], d[6], b * 4);
    g.rotate(0.12);
    wd(g, 7, b * 23, b * 5);
    g.restore();
    Td(g, d[7]);
    return f;
  }
  function dm(b, c, d, f, i, j) {
    const a = b ^ 5106;
    const k = (1 + (c + 29743) * 22695477) % 4294967296;
    const m = ((27442 + j) * 22695477 + 1) % 4294967296;
    const h = function (b, c, d, f, g) {
      const h = ~(b & 53405) & b | ~(b & 53405) & 53405;
      const a = ~(f & 34821) & (f | 34821);
      const i = ((g + 61384) * 2147483629 + 2147483587) % 2147483647;
      return ((30058 + (cx(h, c ^ 65020, d ^ 26221) ^ fb(a, i, h))) * 2147483629 + 2147483587) % 2147483647;
    }(a, k, (8 << (d >> 16 & 255)) + (0 << (d >> 8 & 255)) + (16 << (d & 255)) + (24 << (d >> 24 & 255)), (24 << (f >> 24 & 255)) + (16 << (f >> 16 & 255)) + (8 << (f & 255)) + (0 << (f >> 8 & 255)), i ^ 62618);
    const l = fb(m, a, k);
    return (24 << ((h ^ l) & 255)) + (8 << ((h ^ l) >> 16 & 255)) + (0 << ((h ^ l) >> 8 & 255)) + (16 << ((h ^ l) >> 24 & 255));
  }
  function vm(b, c, d) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 170;
    f.height = b * 170;
    g.translate(0, b * 3);
    g.globalAlpha = c ? 0.5 : 1;
    g.save();
    g.translate(b * 85, b * 95);
    g.rotate(1.4);
    wd(g, 7, b * 60, b * 10);
    g.restore();
    Td(g, d[0]);
    g.globalAlpha = 1;
    g.translate(b * 85, b * 82);
    for (var h = 0; h < 10; h++) {
      g.rotate(Math.PI / 5);
      g.save();
      g.translate(b * 65, 0);
      wd(g, 3, b * 21, b * 4);
      Td(g, d[1], d[2], b * 4);
      g.restore();
    }
    g.save();
    g.translate(b * 0, b * 0);
    g.rotate(0.2);
    wd(g, 9, b * 60, b * 10);
    Td(g, d[3], d[4], b * 4);
    g.rotate(-0.32);
    wd(g, 9, b * 38, b * 10);
    Td(g, d[5], d[6], b * 4);
    g.rotate(0.68);
    wd(g, 9, b * 20, b * 8);
    Td(g, d[7], d[8], b * 6);
    g.restore();
    return f;
  }
  function cm(b, c, d) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 185;
    f.height = b * 164;
    g.translate(0, 0);
    var h = function (a, b, c) {
      var d = document.createElement("canvas");
      var f = d.getContext("2d");
      d.width = a * 201;
      d.height = a * 164;
      f.translate(0, a * 5);
      f.globalAlpha = b ? 0.5 : 1;
      Pd(f, a * 100.5, a * 82, a * 74.92746655359852);
      Td(f, c[0], c[0], a * 4);
      Pd(f, a * 100.5, a * 82, a * 65.9417374971317);
      Td(f, c[0], c[0], a * 4);
      f.translate(0, -5);
      f.globalAlpha = 1;
      Pd(f, a * 100.5, a * 82, a * 74.92746655359852);
      Td(f, c[1], c[3], a * 4);
      Pd(f, a * 100.5, a * 82, a * 65.9417374971317);
      Td(f, c[1], c[2], a * 4);
      Pd(f, a * 100.5, a * 82, a * 35.9417374971317);
      Td(f, c[1], c[2], a * 20);
      Pd(f, a * 100.5, a * 82, a * 15.9417374971317);
      Td(f, c[1], c[2], a * 6);
      return d;
    }(b, c, d);
    g.drawImage(h, b * -10, b * 0);
    h = Yc(b, c, d, 0);
    g.drawImage(h, b * -83, b * -40);
    h = Yc(b, c, d, Math.PI / 1.4);
    g.drawImage(h, b * -15, b * -88);
    h = Yc(b, c, d, Math.PI / -1.4);
    g.drawImage(h, b * 15, b * -8);
    return f;
  }
  function mm(b, c, d) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 496;
    f.height = b * 520;
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 19.000030517578125, b * 256.67613983154297);
    g.bezierCurveTo(b * 1.000030517578125, b * 332.67613983154297, b * 23.000030517578125, b * 404.67613983154297, b * 95.00003051757812, b * 463.67613983154297);
    g.bezierCurveTo(b * 128.00003051757812, b * 491.67613983154297, b * 165.00003051757812, b * 507.67613983154297, b * 194.00003051757812, b * 512.676139831543);
    g.bezierCurveTo(b * 280.0000305175781, b * 517.676139831543, b * 291.0000305175781, b * 516.676139831543, b * 342.0000305175781, b * 497.67613983154297);
    g.bezierCurveTo(b * 425.0000305175781, b * 454.67613983154297, b * 469.0000305175781, b * 392.67613983154297, b * 468.0000305175781, b * 300.67613983154297);
    g.bezierCurveTo(b * 408.5000305175781, b * 365.17613983154297, b * 408.5000305175781, b * 365.17613983154297, b * 349.0000305175781, b * 429.67613983154297);
    g.bezierCurveTo(b * 256.0000305175781, b * 473.67613983154297, b * 167.00003051757812, b * 459.67613983154297, b * 78.00003051757812, b * 384.67613983154297);
    g.closePath();
    Td(g, d[0]);
    g.globalAlpha = 1;
    g.translate(0, b * -10);
    Pd(g, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
    Td(g, d[5], mk, b * 12);
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 65.00003051757812, b * 263.4034118652344);
    g.bezierCurveTo(b * 109.00003051757812, b * 160.40341186523438, b * 185.00003051757812, b * 128.40341186523438, b * 222.00003051757812, b * 124.40341186523438);
    g.bezierCurveTo(b * 277.0000305175781, b * 116.40341186523438, b * 339.0000305175781, b * 134.40341186523438, b * 379.0000305175781, b * 195.40341186523438);
    g.bezierCurveTo(b * 409.0000305175781, b * 242.40341186523438, b * 416.0000305175781, b * 256.4034118652344, b * 428.0000305175781, b * 304.4034118652344);
    g.bezierCurveTo(b * 457.0000305175781, b * 203.40341186523438, b * 449.0000305175781, b * 183.40341186523438, b * 438.0000305175781, b * 162.40341186523438);
    g.bezierCurveTo(b * 381.0000305175781, b * 73.40341186523438, b * 360.0000305175781, b * 66.40341186523438, b * 257.0000305175781, b * 46.403411865234375);
    g.bezierCurveTo(b * 191.00003051757812, b * 45.403411865234375, b * 142.00003051757812, b * 65.40341186523438, b * 101.00003051757812, b * 115.40341186523438);
    g.closePath();
    Td(g, d[0]);
    g.globalAlpha = 1;
    var h = function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 496;
      c.height = a * 520;
      d.globalAlpha = 1;
      d.translate(0, a * -10);
      Pd(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
      Td(d, b[1], b[2], a * 14);
      d.globalCompositeOperation = "destination-out";
      Pd(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
      Td(d, b[0], b[0], a * 14);
      d.globalCompositeOperation = "source-over";
      return c;
    }(b, d);
    g.drawImage(h, 0, 0);
    g.translate(0, b * -10);
    Pd(g, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
    Td(g, undefined, d[2], b * 12);
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 325.0113830566406, b * 13.767059326171875);
    g.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
    g.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
    g.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
    g.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
    g.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
    g.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
    g.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
    g.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
    g.closePath();
    Td(g, d[0], d[0], b * 12);
    g.globalAlpha = 1;
    g.translate(0, b * -5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 325.0113830566406, b * 13.767059326171875);
    g.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
    g.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
    g.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
    g.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
    g.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
    g.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
    g.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
    g.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
    g.closePath();
    Td(g, d[3], d[2], b * 12);
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 403.0113830566406, b * 89.76705932617188);
    g.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
    g.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
    g.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
    g.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
    g.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
    g.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
    g.closePath();
    Td(g, d[0], d[0], b * 12);
    g.globalAlpha = 1;
    g.translate(0, b * -5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 403.0113830566406, b * 89.76705932617188);
    g.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
    g.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
    g.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
    g.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
    g.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
    g.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
    g.closePath();
    Td(g, d[4], d[2], b * 12);
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 228.01138305664062, b * 1.767059326171875);
    g.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
    g.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
    g.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
    g.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
    g.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
    g.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
    g.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
    g.closePath();
    Td(g, d[0], d[0], b * 12);
    g.globalAlpha = 1;
    g.translate(0, b * -5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 228.01138305664062, b * 1.767059326171875);
    g.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
    g.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
    g.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
    g.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
    g.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
    g.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
    g.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
    g.closePath();
    Td(g, d[4], d[2], b * 12);
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 142.01138305664062, b * 25.767059326171875);
    g.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
    g.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
    g.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
    g.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
    g.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
    g.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
    g.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
    g.closePath();
    Td(g, d[0], d[0], b * 12);
    g.globalAlpha = 1;
    g.translate(0, b * -5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 142.01138305664062, b * 25.767059326171875);
    g.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
    g.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
    g.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
    g.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
    g.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
    g.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
    g.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
    g.closePath();
    Td(g, d[4], d[2], b * 12);
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 70.01138305664062, b * 76.76705932617188);
    g.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
    g.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
    g.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
    g.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
    g.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
    g.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
    g.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
    g.closePath();
    Td(g, d[0], d[0], b * 12);
    g.globalAlpha = 1;
    g.translate(0, b * -5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 70.01138305664062, b * 76.76705932617188);
    g.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
    g.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
    g.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
    g.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
    g.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
    g.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
    g.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
    g.closePath();
    Td(g, d[4], d[2], b * 12);
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 33.011383056640625, b * 126.76705932617188);
    g.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
    g.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
    g.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
    g.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
    g.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
    g.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
    g.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
    g.closePath();
    Td(g, d[0], d[0], b * 12);
    g.globalAlpha = 1;
    g.translate(0, b * -5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 33.011383056640625, b * 126.76705932617188);
    g.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
    g.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
    g.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
    g.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
    g.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
    g.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
    g.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
    g.closePath();
    Td(g, d[3], d[2], b * 12);
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 13.011383056640625, b * 229.76705932617188);
    g.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
    g.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
    g.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
    g.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
    g.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
    g.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
    g.closePath();
    Td(g, d[0], d[0], b * 12);
    g.globalAlpha = 1;
    g.translate(0, b * -5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 13.011383056640625, b * 229.76705932617188);
    g.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
    g.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
    g.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
    g.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
    g.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
    g.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
    g.closePath();
    Td(g, d[4], d[2], b * 12);
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 97.01138305664062, b * 329.7670593261719);
    g.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
    g.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
    g.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
    g.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
    g.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
    g.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
    g.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
    g.closePath();
    Td(g, d[0], d[0], b * 12);
    g.globalAlpha = 1;
    g.translate(0, b * -5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 97.01138305664062, b * 329.7670593261719);
    g.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
    g.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
    g.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
    g.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
    g.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
    g.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
    g.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
    g.closePath();
    Td(g, d[4], d[2], b * 12);
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 394.0113830566406, b * 181.76705932617188);
    g.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
    g.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
    g.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
    g.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
    g.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
    g.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
    g.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
    g.closePath();
    Td(g, d[0], d[0], b * 12);
    g.globalAlpha = 1;
    g.translate(0, b * -5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 394.0113830566406, b * 181.76705932617188);
    g.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
    g.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
    g.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
    g.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
    g.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
    g.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
    g.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
    g.closePath();
    Td(g, d[4], d[2], b * 12);
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 411.0113830566406, b * 234.76705932617188);
    g.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
    g.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
    g.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
    g.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
    g.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
    g.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
    g.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
    g.closePath();
    Td(g, d[0], d[0], b * 12);
    g.globalAlpha = 1;
    g.translate(0, b * -5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 411.0113830566406, b * 234.76705932617188);
    g.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
    g.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
    g.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
    g.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
    g.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
    g.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
    g.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
    g.closePath();
    Td(g, d[4], d[2], b * 12);
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 400.0113830566406, b * 290.7670593261719);
    g.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
    g.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
    g.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
    g.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
    g.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
    g.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
    g.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
    g.closePath();
    Td(g, d[0], d[0], b * 12);
    g.globalAlpha = 1;
    g.translate(0, b * -5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 400.0113830566406, b * 290.7670593261719);
    g.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
    g.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
    g.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
    g.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
    g.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
    g.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
    g.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
    g.closePath();
    Td(g, d[3], d[2], b * 12);
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 366.0113830566406, b * 361.2216033935547);
    g.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
    g.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
    g.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
    g.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
    g.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
    g.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
    g.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
    g.closePath();
    Td(g, d[0], d[0], b * 12);
    g.globalAlpha = 1;
    g.translate(0, b * -5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 366.0113830566406, b * 361.2216033935547);
    g.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
    g.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
    g.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
    g.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
    g.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
    g.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
    g.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
    g.closePath();
    Td(g, d[4], d[2], b * 12);
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 323.0113830566406, b * 393.2216033935547);
    g.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
    g.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
    g.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
    g.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
    g.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
    g.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
    g.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
    g.closePath();
    Td(g, d[0], d[0], b * 12);
    g.globalAlpha = 1;
    g.translate(0, b * -5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 323.0113830566406, b * 393.2216033935547);
    g.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
    g.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
    g.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
    g.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
    g.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
    g.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
    g.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
    g.closePath();
    Td(g, d[4], d[2], b * 12);
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 270.0113830566406, b * 413.2216033935547);
    g.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
    g.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
    g.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
    g.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
    g.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
    g.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
    g.closePath();
    Td(g, d[0], d[0], b * 12);
    g.globalAlpha = 1;
    g.translate(0, b * -5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 270.0113830566406, b * 413.2216033935547);
    g.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
    g.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
    g.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
    g.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
    g.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
    g.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
    g.closePath();
    Td(g, d[4], d[2], b * 12);
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 207.01138305664062, b * 406.2216033935547);
    g.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
    g.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
    g.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
    g.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
    g.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
    g.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
    g.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
    g.closePath();
    Td(g, d[0], d[0], b * 12);
    g.globalAlpha = 1;
    g.translate(0, b * -5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 207.01138305664062, b * 406.2216033935547);
    g.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
    g.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
    g.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
    g.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
    g.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
    g.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
    g.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
    g.closePath();
    Td(g, d[3], d[2], b * 12);
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 130.01138305664062, b * 375.2216033935547);
    g.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
    g.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
    g.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
    g.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
    g.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
    g.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
    g.closePath();
    Td(g, d[0], d[0], b * 12);
    g.globalAlpha = 1;
    g.translate(0, b * -5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 130.01138305664062, b * 375.2216033935547);
    g.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
    g.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
    g.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
    g.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
    g.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
    g.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
    g.closePath();
    Td(g, d[4], d[2], b * 12);
    return f;
  }
  function pm(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 144;
    d.height = a * 280;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 5, a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 62, a * 103.79999542236328);
    f.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    f.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    f.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    f.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    f.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    f.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    f.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    f.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    f.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    f.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    f.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    f.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    f.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    f.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -5, a * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 62, a * 103.79999542236328);
    f.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    f.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    f.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    f.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    f.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    f.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    f.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    f.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    f.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    f.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    f.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    f.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    f.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    f.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    f.closePath();
    Td(f, c[1], c[2], a * 6);
    return d;
  }
  function Cm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 320;
    d.translate(a * -60, a * -15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 3.953125);
    d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
    d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
    d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
    d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
    d.closePath();
    Td(d, b[0]);
    return c;
  }
  function Tm() {
    var b = Bx.time;
    if (ⲆⲆ[285]) {
      Eo.drawImage(ⲆⲆ[285][b][1], bq + 480, jo + 190);
      Eo.drawImage(ⲆⲆ[285][b][2], bq + 180, jo - 430);
      Eo.drawImage(ⲆⲆ[285][b][1], bq - 855, jo + 100);
      Eo.drawImage(ⲆⲆ[285][b][0], bq - 550, jo - 300);
      Eo.drawImage(ⲆⲆ[285][b][0], bq - 1020, jo - 520);
    }
    if (ⲆⲆ[108]) {
      Eo.drawImage(ⲆⲆ[108][b][1], bq - 80, jo - 640);
      Eo.drawImage(ⲆⲆ[108][b][1], bq + 80, jo + 490);
      Eo.drawImage(ⲆⲆ[108][b][2], bq - 180, jo - 700);
      Eo.drawImage(ⲆⲆ[108][b][0], bq + 550, jo + 100);
      Eo.drawImage(ⲆⲆ[108][b][1], bq + 450, jo + 300);
      Eo.drawImage(ⲆⲆ[108][b][1], bq + 780, jo + 300);
      Eo.drawImage(ⲆⲆ[108][b][2], bq + 980, jo + 200);
      Eo.drawImage(ⲆⲆ[108][b][2], bq + 680, jo + 600);
      Eo.drawImage(ⲆⲆ[108][b][2], bq - 380, jo + 100);
      Eo.drawImage(ⲆⲆ[108][b][2], bq + 280, jo + 250);
    }
    if (ⲆⲆ[110]) {
      Eo.drawImage(ⲆⲆ[110][b][0], bq - 590, jo);
      Eo.drawImage(ⲆⲆ[110][b][0], bq + 120, jo - 390);
      Eo.drawImage(ⲆⲆ[110][b][0], bq - 270, jo + 340);
    }
    if (ⲆⲆ[109]) {
      Eo.drawImage(ⲆⲆ[109][b][4], bq - 700, jo - 600);
      Eo.drawImage(ⲆⲆ[109][b][2], bq - 970, jo - 250);
      Eo.drawImage(ⲆⲆ[109][b][5], bq - 720, jo - 200);
      Eo.drawImage(ⲆⲆ[109][b][2], bq - 1020, jo + 340);
      Eo.drawImage(ⲆⲆ[109][b][0], bq - 1120, jo - 0);
      Eo.drawImage(ⲆⲆ[109][b][1], bq - 650, jo - 330);
      Eo.drawImage(ⲆⲆ[109][b][4], bq - 495, jo - 90);
      Eo.drawImage(ⲆⲆ[109][b][3], bq - 520, jo + 340);
      Eo.drawImage(ⲆⲆ[109][b][2], bq + 830, jo - 520);
    }
    ⲆⲆ[413];
    if (Dx && Cx) {
      var c = Dx.ᐃΔᐃⲆ.x;
      var d = Dx.ᐃΔᐃⲆ.y;
      Dx.ᐃΔᐃⲆ.x = bq;
      Dx.ᐃΔᐃⲆ.y = jo;
      var f = Cx.time;
      Cx.time = Bx.time;
      var g;
      var h = Bx.items;
      h[2].x = 400;
      h[2].y = 100;
      h[2].ΔⵠᐃⲆ(114);
      (g = h[1]).x = -500;
      g.y = 100;
      g.ΔΔΔⲆ[0].x = g.x - 20.5;
      g.ΔΔΔⲆ[0].y = g.y - 22.5;
      g.ΔΔΔⲆ[1].x = g.x - 35.5;
      g.ΔΔΔⲆ[1].y = g.y + 7.5;
      g.ΔΔΔⲆ[2].x = g.x + 7.5;
      g.ΔΔΔⲆ[2].y = g.y - 30;
      g.ΔΔΔⲆ[3].x = g.x + 22.5;
      g.ΔΔΔⲆ[3].y = g.y;
      g.ΔΔΔⲆ[4].x = g.x - 7.5;
      g.ΔΔΔⲆ[4].y = g.y + 14.5;
      for (var a = 0; g.info > a; a++) {
        g.ΔΔΔⲆ[a].ΔⵠᐃⲆ(294);
      }
      (g = h[3]).x = 210;
      g.y = -290;
      g.ΔΔΔⲆ[0].x = g.x - 20.5;
      g.ΔΔΔⲆ[0].y = g.y - 22.5;
      g.ΔΔΔⲆ[1].x = g.x - 35.5;
      g.ΔΔΔⲆ[1].y = g.y + 7.5;
      g.ΔΔΔⲆ[2].x = g.x + 7.5;
      g.ΔΔΔⲆ[2].y = g.y - 30;
      g.ΔΔΔⲆ[3].x = g.x + 22.5;
      g.ΔΔΔⲆ[3].y = g.y;
      g.ΔΔΔⲆ[4].x = g.x - 7.5;
      g.ΔΔΔⲆ[4].y = g.y + 14.5;
      for (a = 0; a < g.info; a++) {
        g.ΔΔΔⲆ[a].ΔⵠᐃⲆ(294);
      }
      h[0].x = 450;
      h[0].y = -100;
      h[0].ⵠΔⲆⲆⲆ(113);
      h[0].ⵠᐃΔⲆⲆ();
      Dx.ᐃΔᐃⲆ.x = c;
      Dx.ᐃΔᐃⲆ.y = d;
      Cx.time = f;
    }
  }
  function fm() {
    ⲆⲆ[814] = _t(1, [{
      f: Dp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
    }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[815] = ⲆⲆ[814];
    ⲆⲆ[955] = [];
    ⲆⲆ[955][0] = Δᐃ.ΔΔⵠⲆᐃᐃᐃ;
    ⲆⲆ[955][1] = Δᐃ.ᐃᐃⵠⵠⲆⲆⲆ;
    ⲆⲆ[955][2] = Δᐃ.ⵠᐃΔΔⲆⲆΔ;
    ⲆⲆ[956] = ⲆⲆ[955];
    ⲆⲆ[972] = [];
    ⲆⲆ[972][0] = Δᐃ.ⲆᐃⲆⵠᐃΔⵠ;
    ⲆⲆ[972][1] = Δᐃ.ΔΔΔΔⲆᐃΔ;
    ⲆⲆ[972][2] = Δᐃ.ⵠⲆΔΔⵠΔⲆ;
    ⲆⲆ[973] = ⲆⲆ[972];
    ⲆⲆ[987] = [];
    ⲆⲆ[987][0] = Δᐃ.ⵠᐃⵠⵠⵠᐃΔ;
    ⲆⲆ[987][1] = Δᐃ.ⲆⵠΔΔᐃⲆⵠ;
    ⲆⲆ[987][2] = Δᐃ.ⵠᐃⲆⲆⲆⵠᐃ;
    ⲆⲆ[988] = ⲆⲆ[987];
    ⲆⲆ[1154] = [];
    ⲆⲆ[1154][0] = Δᐃ.ⵠⲆⲆⵠⲆⲆᐃ;
    ⲆⲆ[1154][1] = Δᐃ.ⲆᐃⲆⲆⵠᐃⵠ;
    ⲆⲆ[1154][2] = Δᐃ.ⲆΔⵠⲆΔᐃᐃ;
    ⲆⲆ[1155] = ⲆⲆ[1154];
    ⲆⲆ[965] = [];
    ⲆⲆ[965][0] = Δᐃ.ΔᐃⵠᐃΔᐃᐃ;
    ⲆⲆ[965][1] = Δᐃ.ⵠᐃⲆΔⵠᐃΔ;
    ⲆⲆ[965][2] = Δᐃ.ΔⵠⲆΔᐃⵠᐃ;
    ⲆⲆ[974] = ⲆⲆ[965];
    ⲆⲆ[1028] = [];
    ⲆⲆ[1028][0] = Δᐃ.ΔᐃΔᐃⲆΔⲆ;
    ⲆⲆ[1028][1] = Δᐃ.ⲆⲆΔⵠⵠΔⵠ;
    ⲆⲆ[1028][2] = Δᐃ.ΔⵠᐃⲆᐃᐃⵠ;
    ⲆⲆ[1029] = ⲆⲆ[1028];
    ⲆⲆ[1027] = ⲆⲆ[1028];
    ⲆⲆ[712] = [];
    ⲆⲆ[712][0] = Δᐃ.ᐃᐃⲆⲆᐃⵠᐃⲆᐃ;
    ⲆⲆ[712][1] = Δᐃ.ΔⵠⵠⵠΔⵠᐃⲆⵠ;
    ⲆⲆ[712][2] = Δᐃ.ᐃⲆΔⲆΔᐃᐃⵠᐃ;
    ⲆⲆ[713] = ⲆⲆ[712];
    ⲆⲆ[714] = ⲆⲆ[712];
    ⲆⲆ[1031] = [];
    ⲆⲆ[1031][0] = Δᐃ.Ⲇⵠᐃⵠᐃᐃᐃ;
    ⲆⲆ[1031][1] = Δᐃ.Ⲇⵠᐃⵠᐃⵠᐃ;
    ⲆⲆ[1031][2] = Δᐃ.ᐃⵠⵠⵠᐃⲆⲆ;
    ⲆⲆ[1032] = ⲆⲆ[1031];
    ⲆⲆ[1030] = ⲆⲆ[1031];
    ⲆⲆ[423] = [];
    ⲆⲆ[423][0] = Δᐃ.ΔⵠⵠΔΔᐃᐃ;
    ⲆⲆ[423][1] = Δᐃ.ⲆᐃΔⵠΔᐃΔ;
    ⲆⲆ[423][2] = Δᐃ.ⲆⵠᐃᐃΔⵠⵠ;
    ⲆⲆ[425] = ⲆⲆ[423];
    ⲆⲆ[424] = ⲆⲆ[423];
    ⲆⲆ[1233] = [];
    ⲆⲆ[1233][0] = Δᐃ.ⲆᐃⵠΔⵠΔᐃⲆⵠ;
    ⲆⲆ[1233][1] = Δᐃ.ᐃⵠᐃⲆΔΔⵠΔⲆ;
    ⲆⲆ[1233][2] = Δᐃ.ΔΔⵠᐃⲆΔᐃⲆⵠ;
    ⲆⲆ[1234] = ⲆⲆ[1233];
    ⲆⲆ[1230] = [];
    ⲆⲆ[1230][0] = Δᐃ.ⲆᐃᐃᐃⵠⲆⲆᐃⵠ;
    ⲆⲆ[1230][1] = Δᐃ.ᐃᐃⵠⵠⵠᐃⲆᐃᐃ;
    ⲆⲆ[1230][2] = Δᐃ.ⲆⲆⵠΔⵠⲆⲆⵠⵠ;
    ⲆⲆ[1232] = ⲆⲆ[1230];
    ⲆⲆ[1231] = ⲆⲆ[1230];
    ⲆⲆ[569] = [];
    ⲆⲆ[569][0] = Δᐃ.ⵠᐃᐃᐃⲆᐃᐃᐃⵠ;
    ⲆⲆ[569][1] = Δᐃ.ΔᐃᐃⵠᐃᐃᐃⲆΔ;
    ⲆⲆ[569][2] = Δᐃ.ΔΔᐃᐃⵠⲆΔΔⲆ;
    ⲆⲆ[571] = ⲆⲆ[569];
    ⲆⲆ[570] = ⲆⲆ[569];
    ⲆⲆ[1166] = [];
    ⲆⲆ[1166][0] = Δᐃ.ᐃⲆⲆᐃᐃᐃⲆⵠΔ;
    ⲆⲆ[1166][1] = Δᐃ.ᐃΔⵠⲆⲆⲆᐃᐃⵠ;
    ⲆⲆ[1166][2] = Δᐃ.ᐃⲆΔᐃⲆⲆΔⲆΔ;
    ⲆⲆ[1167] = ⲆⲆ[1166];
    ⲆⲆ[1168] = ⲆⲆ[1166];
    ⲆⲆ[572] = [];
    ⲆⲆ[572][0] = Δᐃ.ᐃΔⲆΔᐃⵠΔⲆᐃ;
    ⲆⲆ[572][1] = Δᐃ.ⵠⵠⲆⵠᐃΔⲆⲆᐃ;
    ⲆⲆ[572][2] = Δᐃ.ⲆᐃⵠᐃᐃᐃΔⵠΔ;
    ⲆⲆ[574] = ⲆⲆ[572];
    ⲆⲆ[573] = ⲆⲆ[572];
    ⲆⲆ[1169] = [];
    ⲆⲆ[1169][0] = Δᐃ.ᐃᐃⲆⵠⵠᐃⵠΔⲆ;
    ⲆⲆ[1169][1] = Δᐃ.ⲆΔᐃⵠΔⲆᐃᐃΔ;
    ⲆⲆ[1169][2] = Δᐃ.ΔⲆⲆⲆⵠᐃΔΔⲆ;
    ⲆⲆ[1170] = ⲆⲆ[1169];
    ⲆⲆ[1171] = ⲆⲆ[1169];
    ⲆⲆ[575] = [];
    ⲆⲆ[575][0] = Δᐃ.ᐃΔᐃⲆⲆᐃⵠⵠΔ;
    ⲆⲆ[575][1] = Δᐃ.ⲆᐃᐃΔᐃⵠⵠⲆⵠ;
    ⲆⲆ[575][2] = Δᐃ.ⲆᐃⵠⲆⵠᐃΔⵠᐃ;
    ⲆⲆ[577] = ⲆⲆ[575];
    ⲆⲆ[576] = ⲆⲆ[575];
    ⲆⲆ[1172] = [];
    ⲆⲆ[1172][0] = Δᐃ.ᐃⵠⵠⵠᐃⵠΔⲆΔ;
    ⲆⲆ[1172][1] = Δᐃ.ᐃᐃᐃΔⵠΔⵠⲆⲆ;
    ⲆⲆ[1172][2] = Δᐃ.ⲆⲆⲆᐃΔⵠⵠⲆᐃ;
    ⲆⲆ[1173] = ⲆⲆ[1172];
    ⲆⲆ[1174] = ⲆⲆ[1172];
    ⲆⲆ[578] = [];
    ⲆⲆ[578][0] = Δᐃ.ᐃⲆΔⲆⲆΔᐃᐃⵠ;
    ⲆⲆ[578][1] = Δᐃ.ΔΔΔᐃᐃΔΔⲆⲆ;
    ⲆⲆ[578][2] = Δᐃ.ⲆⲆᐃΔᐃⲆⵠⵠΔ;
    ⲆⲆ[580] = ⲆⲆ[578];
    ⲆⲆ[579] = ⲆⲆ[578];
    ⲆⲆ[1175] = [];
    ⲆⲆ[1175][0] = Δᐃ.ⲆⲆᐃᐃⵠᐃⵠⵠΔ;
    ⲆⲆ[1175][1] = Δᐃ.ᐃΔᐃᐃΔᐃᐃΔᐃ;
    ⲆⲆ[1175][2] = Δᐃ.ΔΔᐃⵠⲆⵠⵠⵠⵠ;
    ⲆⲆ[1176] = ⲆⲆ[1175];
    ⲆⲆ[1177] = ⲆⲆ[1175];
    ⲆⲆ[581] = [];
    ⲆⲆ[581][0] = Δᐃ.ΔᐃΔᐃⲆᐃⲆΔⵠ;
    ⲆⲆ[581][1] = Δᐃ.ⲆᐃⲆⵠⲆᐃⲆᐃⵠ;
    ⲆⲆ[581][2] = Δᐃ.ᐃᐃᐃᐃΔᐃⵠΔⵠ;
    ⲆⲆ[583] = ⲆⲆ[581];
    ⲆⲆ[582] = ⲆⲆ[581];
    ⲆⲆ[1178] = [];
    ⲆⲆ[1178][0] = Δᐃ.ΔΔΔⲆΔⲆᐃⲆᐃ;
    ⲆⲆ[1178][1] = Δᐃ.ⲆⵠᐃᐃⲆⲆᐃᐃΔ;
    ⲆⲆ[1178][2] = Δᐃ.ⵠⵠⵠᐃᐃⵠⵠⵠΔ;
    ⲆⲆ[1179] = ⲆⲆ[1178];
    ⲆⲆ[1180] = ⲆⲆ[1178];
    ⲆⲆ[584] = [];
    ⲆⲆ[584][0] = Δᐃ.ⲆⵠⵠⵠΔⲆΔⲆΔ;
    ⲆⲆ[584][1] = Δᐃ.ⲆⵠΔᐃᐃΔᐃⵠⵠ;
    ⲆⲆ[584][2] = Δᐃ.ⲆΔⵠᐃⵠⲆⲆⲆⵠ;
    ⲆⲆ[586] = ⲆⲆ[584];
    ⲆⲆ[585] = ⲆⲆ[584];
    ⲆⲆ[1181] = [];
    ⲆⲆ[1181][0] = Δᐃ.ⲆΔⲆᐃⲆΔⵠᐃᐃ;
    ⲆⲆ[1181][1] = Δᐃ.ⵠᐃⲆᐃΔⵠⵠΔⲆ;
    ⲆⲆ[1181][2] = Δᐃ.ΔⵠⲆⵠⵠΔΔⵠᐃ;
    ⲆⲆ[1182] = ⲆⲆ[1181];
    ⲆⲆ[1183] = ⲆⲆ[1181];
    ⲆⲆ[587] = [];
    ⲆⲆ[587][0] = Δᐃ.ⵠΔⲆΔᐃᐃΔⵠⵠ;
    ⲆⲆ[587][1] = Δᐃ.ⲆⲆᐃΔΔⲆΔⲆΔ;
    ⲆⲆ[587][2] = Δᐃ.ΔⵠᐃⲆΔⵠⵠⵠᐃ;
    ⲆⲆ[589] = ⲆⲆ[587];
    ⲆⲆ[588] = ⲆⲆ[587];
    ⲆⲆ[1184] = [];
    ⲆⲆ[1184][0] = Δᐃ.ⲆΔΔⵠᐃΔⵠΔⲆ;
    ⲆⲆ[1184][1] = Δᐃ.ⲆⵠⲆⲆΔⲆᐃⲆᐃ;
    ⲆⲆ[1184][2] = Δᐃ.ᐃΔΔⲆⲆⲆᐃᐃΔ;
    ⲆⲆ[1185] = ⲆⲆ[1184];
    ⲆⲆ[1186] = ⲆⲆ[1184];
    ⲆⲆ[1257] = [];
    ⲆⲆ[1257][0] = Δᐃ.ⲆⵠΔⵠⵠᐃΔⲆᐃ;
    ⲆⲆ[1257][1] = Δᐃ.ᐃⲆΔⲆⲆᐃⲆᐃⵠ;
    ⲆⲆ[1257][2] = Δᐃ.ᐃΔᐃⲆⲆᐃⲆΔᐃ;
    ⲆⲆ[1258] = ⲆⲆ[1257];
    ⲆⲆ[1256] = ⲆⲆ[1257];
    ⲆⲆ[1260] = [];
    ⲆⲆ[1260][0] = Δᐃ.ⲆΔᐃΔⲆΔⲆᐃΔ;
    ⲆⲆ[1260][1] = Δᐃ.ⲆⵠΔᐃΔⲆᐃᐃⲆ;
    ⲆⲆ[1260][2] = Δᐃ.ᐃΔᐃΔᐃⲆᐃⲆΔ;
    ⲆⲆ[1261] = ⲆⲆ[1260];
    ⲆⲆ[1259] = ⲆⲆ[1260];
    ⲆⲆ[1263] = [];
    ⲆⲆ[1263][0] = Δᐃ.ⲆⵠΔΔⲆᐃΔⲆⲆ;
    ⲆⲆ[1263][1] = Δᐃ.ᐃⵠⲆⲆⲆⵠⲆⵠᐃ;
    ⲆⲆ[1263][2] = Δᐃ.ΔΔⲆΔⵠⲆΔⲆⵠ;
    ⲆⲆ[1264] = ⲆⲆ[1263];
    ⲆⲆ[1262] = ⲆⲆ[1263];
    ⲆⲆ[1266] = [];
    ⲆⲆ[1266][0] = Δᐃ.ΔΔⲆΔⵠᐃᐃⲆΔ;
    ⲆⲆ[1266][1] = Δᐃ.ⵠΔΔΔⵠⲆΔΔᐃ;
    ⲆⲆ[1266][2] = Δᐃ.ⵠΔᐃᐃⵠᐃᐃⵠⵠ;
    ⲆⲆ[1267] = ⲆⲆ[1266];
    ⲆⲆ[1265] = ⲆⲆ[1266];
    ⲆⲆ[1269] = [];
    ⲆⲆ[1269][0] = Δᐃ.ᐃⵠⲆⲆⵠΔⲆⵠΔ;
    ⲆⲆ[1269][1] = Δᐃ.ⵠΔⵠΔΔⵠⲆⲆΔ;
    ⲆⲆ[1269][2] = Δᐃ.ⲆᐃΔΔᐃΔⲆⲆⲆ;
    ⲆⲆ[1270] = ⲆⲆ[1269];
    ⲆⲆ[1268] = ⲆⲆ[1269];
    ⲆⲆ[1272] = [];
    ⲆⲆ[1272][0] = Δᐃ.ⲆᐃΔᐃⵠⵠⵠΔⲆ;
    ⲆⲆ[1272][1] = Δᐃ.ⲆᐃⵠΔΔⵠΔⵠΔ;
    ⲆⲆ[1272][2] = Δᐃ.ⲆⲆⲆⵠⲆΔᐃΔΔ;
    ⲆⲆ[1273] = ⲆⲆ[1272];
    ⲆⲆ[1271] = ⲆⲆ[1272];
    ⲆⲆ[1239] = [];
    ⲆⲆ[1239][0] = Δᐃ.ΔⲆⵠⲆΔΔΔⵠΔ;
    ⲆⲆ[1239][1] = Δᐃ.ΔⲆᐃΔⲆᐃⵠⵠⵠ;
    ⲆⲆ[1239][2] = Δᐃ.ⲆᐃᐃⵠᐃⵠΔΔⵠ;
    ⲆⲆ[1240] = ⲆⲆ[1239];
    ⲆⲆ[1238] = ⲆⲆ[1239];
    ⲆⲆ[1242] = [];
    ⲆⲆ[1242][0] = Δᐃ.ᐃᐃᐃⲆΔᐃΔⵠᐃ;
    ⲆⲆ[1242][1] = Δᐃ.ⵠᐃΔᐃⲆΔⲆⵠⲆ;
    ⲆⲆ[1242][2] = Δᐃ.ΔᐃⲆⲆᐃⵠⲆⲆⵠ;
    ⲆⲆ[1243] = ⲆⲆ[1242];
    ⲆⲆ[1241] = ⲆⲆ[1242];
    ⲆⲆ[1245] = [];
    ⲆⲆ[1245][0] = Δᐃ.ΔΔⵠⵠⲆΔⵠⵠⲆ;
    ⲆⲆ[1245][1] = Δᐃ.ᐃΔᐃΔⵠᐃⵠΔⵠ;
    ⲆⲆ[1245][2] = Δᐃ.ΔΔⲆᐃᐃΔⵠΔᐃ;
    ⲆⲆ[1246] = ⲆⲆ[1245];
    ⲆⲆ[1244] = ⲆⲆ[1245];
    ⲆⲆ[1248] = [];
    ⲆⲆ[1248][0] = Δᐃ.ⲆⵠΔΔⵠᐃⵠⲆᐃ;
    ⲆⲆ[1248][1] = Δᐃ.ⲆⵠⵠⵠⵠⵠⵠᐃⲆ;
    ⲆⲆ[1248][2] = Δᐃ.ΔⵠⵠⲆⲆᐃⵠⲆΔ;
    ⲆⲆ[1249] = ⲆⲆ[1248];
    ⲆⲆ[1247] = ⲆⲆ[1248];
    ⲆⲆ[1251] = [];
    ⲆⲆ[1251][0] = Δᐃ.ΔⵠⵠΔᐃⲆⵠᐃΔ;
    ⲆⲆ[1251][1] = Δᐃ.ᐃⲆΔᐃⲆⵠⵠᐃᐃ;
    ⲆⲆ[1251][2] = Δᐃ.ΔᐃⲆΔⲆᐃⵠⲆⲆ;
    ⲆⲆ[1252] = ⲆⲆ[1251];
    ⲆⲆ[1250] = ⲆⲆ[1251];
    ⲆⲆ[1254] = [];
    ⲆⲆ[1254][0] = Δᐃ.ⲆⵠᐃⲆᐃᐃⲆⲆΔ;
    ⲆⲆ[1254][1] = Δᐃ.ⲆΔⵠⵠΔⲆⵠΔᐃ;
    ⲆⲆ[1254][2] = Δᐃ.ⲆᐃⲆⵠⵠᐃⵠⵠⵠ;
    ⲆⲆ[1255] = ⲆⲆ[1254];
    ⲆⲆ[1253] = ⲆⲆ[1254];
    ⲆⲆ[1227] = [];
    ⲆⲆ[1227][0] = Δᐃ.ⵠΔⲆⲆᐃⲆᐃⵠΔ;
    ⲆⲆ[1227][1] = Δᐃ.ⲆᐃΔΔΔⲆⲆΔΔ;
    ⲆⲆ[1227][2] = Δᐃ.ⲆⵠⵠⲆΔⵠᐃⲆⲆ;
    ⲆⲆ[1229] = ⲆⲆ[1227];
    ⲆⲆ[1228] = ⲆⲆ[1227];
    ⲆⲆ[1187] = [];
    ⲆⲆ[1187][0] = Δᐃ.ᐃᐃⲆΔΔΔΔ;
    ⲆⲆ[1187][1] = Δᐃ.ΔᐃᐃⲆⵠΔⲆ;
    ⲆⲆ[1187][2] = Δᐃ.ⵠⲆⲆᐃᐃⲆΔ;
    ⲆⲆ[1188] = ⲆⲆ[1187];
    ⲆⲆ[ts.ΔΔⲆⵠⲆⵠΔᐃⲆ] = ⲆⲆ[1187];
    ⲆⲆ[840] = _t(1, [{
      f: Id,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
    }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[841] = ⲆⲆ[840];
    ⲆⲆ[850] = _t(1, [{
      f: am,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
    }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[851] = ⲆⲆ[850];
    ⲆⲆ[644] = _t(1, [{
      f: St,
      x: -1,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }, {
      f: Yt,
      x: -1,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }, {
      f: iu,
      x: -1,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[643] = ⲆⲆ[644];
    ⲆⲆ[639] = _t(1, [{
      f: Wt,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[800] = _t(1, [{
      f: om,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
    }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[799] = ⲆⲆ[800];
    ⲆⲆ[631] = _t(1, [{
      f: Au,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[632] = ⲆⲆ[631];
    ⲆⲆ[311] = _t(1, [{
      f: Au,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#493d36", "#332b28"]
    }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[284] = ⲆⲆ[311];
    ⲆⲆ[808] = _t(1, [{
      f: Au,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#c67933", "#b17238"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[809] = ⲆⲆ[808];
    ⲆⲆ[834] = _t(1, [{
      f: Au,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e8e8e8", "#bbbbbb"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[835] = ⲆⲆ[834];
    ⲆⲆ[845] = _t(1, [{
      f: Au,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#328a56", "#449573"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[846] = ⲆⲆ[845];
    ⲆⲆ[949] = _t(1, [{
      f: Au,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#c98e2f", "#a36b11"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[950] = ⲆⲆ[949];
    ⲆⲆ[951] = ⲆⲆ[949];
    ⲆⲆ[966] = _t(1, [{
      f: Au,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#13a56d", "#098a58"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[967] = ⲆⲆ[966];
    ⲆⲆ[968] = ⲆⲆ[966];
    ⲆⲆ[981] = _t(1, [{
      f: Au,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#3a8214", "#4a9c1e"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[982] = ⲆⲆ[981];
    ⲆⲆ[983] = ⲆⲆ[981];
    ⲆⲆ[959] = _t(1, [{
      f: Au,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#b22419", "#99110e"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[960] = ⲆⲆ[959];
    ⲆⲆ[961] = ⲆⲆ[959];
    ⲆⲆ[309] = _t(1, [{
      f: ju,
      x: -2,
      y: -2,
      a: 1,
      r: -Math.PI / 7,
      c: ["#4d2d14", "#432516"]
    }, {
      f: lu,
      x: -2,
      y: -2,
      a: 1,
      r: -Math.PI / 7,
      c: ["#efd435", "#ec8d35", "#e96132"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[302] = ⲆⲆ[309];
    ⲆⲆ[328] = _t(1, [{
      f: au,
      x: -2,
      y: -1,
      a: 1,
      r: -Math.PI / 7,
      c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
    }, {
      f: lu,
      x: -2,
      y: -1,
      a: 1,
      r: -Math.PI / 7,
      c: ["#efd435", "#ec8d35", "#e96132"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[327] = ⲆⲆ[328];
    ⲆⲆ[860] = _t(1, [{
      f: xu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
    }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[865] = _t(1, [{
      f: Cu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[829] = _t(1, [{
      f: wu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[261] = _t(1, [{
      f: ru,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[292] = _t(1, [{
      f: Gu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[293] = _t(1, [{
      f: Du,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[455] = _t(1, [{
      f: zu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[313] = _t(1, [{
      f: su,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[312] = _t(1, [{
      f: su,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[258] = _t(1, [{
      f: su,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[296] = _t(1, [{
      f: su,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[458] = _t(1, [{
      f: su,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[1017] = [];
    ⲆⲆ[1017][0] = Δᐃ.ᐃΔΔⵠᐃᐃⲆ;
    ⲆⲆ[1017][1] = Δᐃ.ⲆⵠΔᐃⵠᐃⵠ;
    ⲆⲆ[1017][2] = Δᐃ.ⵠΔⲆΔᐃⵠᐃ;
    ⲆⲆ[1019] = ⲆⲆ[1017];
    ⲆⲆ[1018] = ⲆⲆ[1017];
    ⲆⲆ[315] = _t(1, [{
      f: zc,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#252B28", "#58645F", "#75827D"]
    }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[297] = _t(1, [{
      f: tc,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#282823", "#877c2d", "#c4bc51"]
    }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[298] = _t(1, [{
      f: Lu,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#232828", "#3fc9c9", "#74ede6"]
    }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[316] = _t(1, [{
      f: ju,
      x: 0,
      y: -5,
      a: 1,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[830] = ⲆⲆ[829];
    ⲆⲆ[254] = ⲆⲆ[261];
    ⲆⲆ[290] = ⲆⲆ[292];
    ⲆⲆ[291] = ⲆⲆ[293];
    ⲆⲆ[456] = ⲆⲆ[455];
    ⲆⲆ[314] = ⲆⲆ[313];
    ⲆⲆ[256] = ⲆⲆ[312];
    ⲆⲆ[295] = ⲆⲆ[258];
    ⲆⲆ[257] = ⲆⲆ[296];
    ⲆⲆ[460] = ⲆⲆ[458];
    ⲆⲆ[277] = _t(1, [{
      f: Nd,
      x: 0,
      y: 0,
      a: 1,
      r: 0
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[310] = _t(1, [{
      f: Zd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
    }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[262] = ⲆⲆ[310];
    ⲆⲆ[329] = _t(1, [{
      f: dc,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[263] = ⲆⲆ[329];
    ⲆⲆ[331] = _t(1, [{
      f: Cc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[332] = ⲆⲆ[331];
    ⲆⲆ[492] = _t(1, [{
      f: dc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[493] = ⲆⲆ[492];
    ⲆⲆ[330] = _t(1, [{
      f: hc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[265] = ⲆⲆ[330];
    ⲆⲆ[317] = _t(1, [{
      f: uc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
    }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[318] = ⲆⲆ[317];
    ⲆⲆ[319] = _t(1, [{
      f: Qm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[320] = ⲆⲆ[319];
    ⲆⲆ[362] = _t(1, [{
      f: yp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[363] = ⲆⲆ[362];
    ⲆⲆ[364] = _t(1, [{
      f: yp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[365] = ⲆⲆ[364];
    ⲆⲆ[361] = _t(1, [{
      f: bm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[360] = ⲆⲆ[361];
    ⲆⲆ[495] = _t(1, [{
      f: bm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[496] = ⲆⲆ[495];
    ⲆⲆ[335] = _t(1, [{
      f: Oc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[268] = ⲆⲆ[335];
    ⲆⲆ[372] = _t(1, [{
      f: Mc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[371] = ⲆⲆ[372];
    ⲆⲆ[499] = _t(1, [{
      f: Mc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[498] = ⲆⲆ[499];
    ⲆⲆ[375] = _t(1, [{
      f: Lc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[374] = ⲆⲆ[375];
    ⲆⲆ[378] = _t(1, [{
      f: vc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[377] = ⲆⲆ[378];
    ⲆⲆ[337] = _t(1, [{
      f: mc,
      x: 0,
      y: 2,
      a: 1,
      r: 0,
      c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[338] = ⲆⲆ[337];
    ⲆⲆ[300] = _t(1, [{
      f: Xd,
      x: 0,
      y: -3,
      a: 1,
      r: 0,
      c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
    }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[323] = _t(1, [{
      f: Xd,
      x: 0,
      y: -3,
      a: 1,
      r: 0,
      c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
    }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[325] = ⲆⲆ[323];
    ⲆⲆ[305] = _t(1, [{
      f: fu,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#cec0c4", "#ffffff", "#6d6768"]
    }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[513] = _t(1, [{
      f: fu,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#d4e9ec", "#37b1d7", "#506c71"]
    }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[515] = ⲆⲆ[513];
    ⲆⲆ[368] = _t(1, [{
      f: bc,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#ef96be", "#ffffff"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[1162] = _t(1, [{
      f: bc,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#55423e", "#ffffff"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[178] = _t(1, [{
      f: kc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
    }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[179] = _t(1, [{
      f: kc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
    }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[624] = _t(1, [{
      f: bc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#201851", "#b6222a"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[393] = _t(1, [{
      f: bc,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#231f20", "#b6222a"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[505] = _t(1, [{
      f: bc,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#ffffff", "#b6222a"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[369] = _t(1, [{
      f: Wm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[370] = ⲆⲆ[369];
    ⲆⲆ[381] = _t(1, [{
      f: ic,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[380] = ⲆⲆ[381];
    ⲆⲆ[502] = _t(1, [{
      f: cp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[503] = ⲆⲆ[502];
    ⲆⲆ[880] = _t(1, [{
      f: hu,
      x: 0,
      y: 5,
      a: 1,
      r: 0,
      c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[881] = ⲆⲆ[880];
    ⲆⲆ[882] = _t(1, [{
      f: Rt,
      x: 0,
      y: 5,
      a: 1,
      r: 0,
      c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[883] = ⲆⲆ[882];
    ⲆⲆ[303] = _t(1, [{
      f: Xt,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#ffffff", "#cec0c4"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[304] = ⲆⲆ[303];
    ⲆⲆ[392] = [];
    ⲆⲆ[392][0] = Δᐃ.Δᐃᐃⵠᐃᐃᐃ;
    ⲆⲆ[392][1] = Δᐃ.ΔΔⲆⵠⲆᐃᐃ;
    ⲆⲆ[392][2] = Δᐃ.ⵠΔΔΔᐃᐃⵠ;
    ⲆⲆ[367] = ⲆⲆ[392];
    ⲆⲆ[975] = [];
    ⲆⲆ[975][0] = Δᐃ.ⵠΔⲆⲆⵠΔⵠ;
    ⲆⲆ[975][1] = Δᐃ.ᐃⵠⲆⵠΔⵠΔ;
    ⲆⲆ[975][2] = Δᐃ.ΔΔΔᐃᐃΔᐃ;
    ⲆⲆ[977] = ⲆⲆ[975];
    ⲆⲆ[976] = ⲆⲆ[975];
    ⲆⲆ[978] = [];
    ⲆⲆ[978][0] = Δᐃ.ⵠⵠΔΔΔΔⲆ;
    ⲆⲆ[978][1] = Δᐃ.ΔⲆΔⲆⵠΔΔ;
    ⲆⲆ[978][2] = Δᐃ.ⵠΔᐃΔⲆΔΔ;
    ⲆⲆ[980] = ⲆⲆ[978];
    ⲆⲆ[979] = ⲆⲆ[978];
    ⲆⲆ[1158] = [];
    ⲆⲆ[1158][0] = Δᐃ.ΔΔⲆⵠᐃΔⲆ;
    ⲆⲆ[1158][1] = Δᐃ.ΔΔⲆⵠᐃΔⲆ;
    ⲆⲆ[1158][2] = Δᐃ.ΔΔⲆⵠᐃΔⲆ;
    ⲆⲆ[1159] = ⲆⲆ[1158];
    ⲆⲆ[426] = [];
    ⲆⲆ[426][0] = Δᐃ.ⵠΔΔⵠΔΔⲆ;
    ⲆⲆ[426][1] = Δᐃ.ᐃΔᐃᐃΔΔⵠ;
    ⲆⲆ[426][2] = Δᐃ.ᐃΔⲆⵠΔᐃΔ;
    ⲆⲆ[427] = ⲆⲆ[426];
    ⲆⲆ[428] = ⲆⲆ[426];
    ⲆⲆ[1160] = [];
    ⲆⲆ[1160][0] = Δᐃ.ΔΔⵠⲆᐃΔⵠ;
    ⲆⲆ[1160][1] = Δᐃ.ΔΔⵠⲆᐃΔⵠ;
    ⲆⲆ[1160][2] = Δᐃ.ΔΔⵠⲆᐃΔⵠ;
    ⲆⲆ[1161] = ⲆⲆ[1160];
    ⲆⲆ[1236] = [];
    ⲆⲆ[1236][0] = Δᐃ.ⵠᐃΔᐃⲆΔⲆᐃⵠ;
    ⲆⲆ[1236][1] = Δᐃ.ⵠⲆᐃᐃⲆᐃᐃⲆⵠ;
    ⲆⲆ[1236][2] = Δᐃ.ⵠΔᐃᐃⲆΔⲆⲆⵠ;
    ⲆⲆ[1235] = ⲆⲆ[1236];
    ⲆⲆ[1237] = ⲆⲆ[1236];
    ⲆⲆ[991] = [];
    ⲆⲆ[991][0] = Δᐃ.ΔᐃᐃᐃⲆⲆⵠ;
    ⲆⲆ[991][1] = Δᐃ.ⲆΔᐃΔⵠᐃᐃ;
    ⲆⲆ[991][2] = Δᐃ.ᐃᐃⲆΔᐃΔᐃ;
    ⲆⲆ[990] = ⲆⲆ[991];
    ⲆⲆ[992] = ⲆⲆ[991];
    ⲆⲆ[994] = [];
    ⲆⲆ[994][0] = Δᐃ.ᐃⵠΔᐃᐃⵠⵠ;
    ⲆⲆ[994][1] = Δᐃ.ΔΔⲆᐃⵠⵠⲆ;
    ⲆⲆ[994][2] = Δᐃ.ᐃⲆΔⲆᐃᐃᐃ;
    ⲆⲆ[993] = ⲆⲆ[994];
    ⲆⲆ[995] = ⲆⲆ[994];
    ⲆⲆ[997] = [];
    ⲆⲆ[997][0] = Δᐃ.ᐃⲆᐃᐃⲆᐃΔ;
    ⲆⲆ[997][1] = Δᐃ.ΔⲆⵠᐃⵠᐃΔ;
    ⲆⲆ[997][2] = Δᐃ.ΔᐃⲆⵠⲆⲆⲆ;
    ⲆⲆ[996] = ⲆⲆ[997];
    ⲆⲆ[998] = ⲆⲆ[997];
    ⲆⲆ[1000] = [];
    ⲆⲆ[1000][0] = Δᐃ.ᐃΔⲆⲆⵠⲆⵠ;
    ⲆⲆ[1000][1] = Δᐃ.ⲆᐃⵠᐃⲆⵠⲆ;
    ⲆⲆ[1000][2] = Δᐃ.ᐃⵠⵠⵠⲆᐃⲆ;
    ⲆⲆ[999] = ⲆⲆ[1000];
    ⲆⲆ[1001] = ⲆⲆ[1000];
    ⲆⲆ[1003] = [];
    ⲆⲆ[1003][0] = Δᐃ.ΔⲆⲆⵠΔⲆᐃ;
    ⲆⲆ[1003][1] = Δᐃ.ᐃⲆⵠⵠΔⲆᐃ;
    ⲆⲆ[1003][2] = Δᐃ.ᐃⵠⵠⵠΔⲆᐃ;
    ⲆⲆ[1002] = ⲆⲆ[1003];
    ⲆⲆ[1004] = ⲆⲆ[1003];
    ⲆⲆ[1006] = [];
    ⲆⲆ[1006][0] = Δᐃ.ⵠⲆΔⵠⵠⵠᐃ;
    ⲆⲆ[1006][1] = Δᐃ.ⲆⲆᐃΔΔᐃⵠ;
    ⲆⲆ[1006][2] = Δᐃ.ⵠΔⲆΔᐃᐃⵠ;
    ⲆⲆ[1005] = ⲆⲆ[1006];
    ⲆⲆ[1007] = ⲆⲆ[1006];
    ⲆⲆ[1009] = [];
    ⲆⲆ[1009][0] = Δᐃ.ΔΔⵠΔΔⲆⲆ;
    ⲆⲆ[1009][1] = Δᐃ.ⵠⵠΔⲆⵠΔⲆ;
    ⲆⲆ[1009][2] = Δᐃ.ⲆⲆⲆᐃᐃᐃᐃ;
    ⲆⲆ[1008] = ⲆⲆ[1009];
    ⲆⲆ[1010] = ⲆⲆ[1009];
    ⲆⲆ[1012] = [];
    ⲆⲆ[1012][0] = Δᐃ.ΔⵠⲆᐃΔⵠΔ;
    ⲆⲆ[1012][1] = Δᐃ.ⵠΔΔⲆᐃⲆΔ;
    ⲆⲆ[1012][2] = Δᐃ.ᐃⲆᐃᐃⵠΔΔ;
    ⲆⲆ[1011] = ⲆⲆ[1012];
    ⲆⲆ[1013] = ⲆⲆ[1012];
    ⲆⲆ[1015] = [];
    ⲆⲆ[1015][0] = Δᐃ.ⵠⵠⲆΔⵠⲆⵠ;
    ⲆⲆ[1015][1] = Δᐃ.ⵠⲆⵠⵠⲆⲆᐃ;
    ⲆⲆ[1015][2] = Δᐃ.ⲆⲆⲆⲆⲆⲆⲆ;
    ⲆⲆ[1014] = ⲆⲆ[1015];
    ⲆⲆ[1016] = ⲆⲆ[1015];
    ⲆⲆ[1035] = [];
    ⲆⲆ[1035][0] = Δᐃ.ΔᐃΔⲆΔ;
    ⲆⲆ[1035][1] = Δᐃ.ΔᐃΔⲆΔ;
    ⲆⲆ[1035][2] = Δᐃ.ΔᐃΔⲆΔ;
    ⲆⲆ[ts.ΔⲆᐃΔΔⵠⵠΔᐃ] = ⲆⲆ[1035];
    ⲆⲆ[1036] = ⲆⲆ[1035];
    ⲆⲆ[1037] = [];
    ⲆⲆ[1037][0] = Δᐃ.ᐃΔΔⲆᐃ;
    ⲆⲆ[1037][1] = Δᐃ.ᐃΔΔⲆᐃ;
    ⲆⲆ[1037][2] = Δᐃ.ᐃΔΔⲆᐃ;
    ⲆⲆ[ts.ΔⵠⲆⲆᐃⵠΔⵠΔ] = ⲆⲆ[1037];
    ⲆⲆ[1038] = ⲆⲆ[1037];
    ⲆⲆ[1039] = [];
    ⲆⲆ[1039][0] = Δᐃ.ΔⲆΔⵠⵠ;
    ⲆⲆ[1039][1] = Δᐃ.ΔⲆΔⵠⵠ;
    ⲆⲆ[1039][2] = Δᐃ.ΔⲆΔⵠⵠ;
    ⲆⲆ[ts.ⵠΔⵠⲆᐃⲆᐃⵠⲆ] = ⲆⲆ[1039];
    ⲆⲆ[1040] = ⲆⲆ[1039];
    ⲆⲆ[1156] = [];
    ⲆⲆ[1156][0] = Δᐃ.ᐃΔⲆⲆΔ;
    ⲆⲆ[1156][1] = Δᐃ.ᐃΔⲆⲆΔ;
    ⲆⲆ[1156][2] = Δᐃ.ᐃΔⲆⲆΔ;
    ⲆⲆ[1157] = ⲆⲆ[1156];
    ⲆⲆ[1046] = [];
    ⲆⲆ[1046][0] = Δᐃ.ⵠⵠⲆⲆΔⲆⲆ;
    ⲆⲆ[1046][1] = Δᐃ.ᐃⵠⲆΔⵠⵠᐃ;
    ⲆⲆ[1046][2] = Δᐃ.ΔⲆΔⵠⲆΔⵠ;
    ⲆⲆ[1048] = ⲆⲆ[1046];
    ⲆⲆ[1047] = ⲆⲆ[1046];
    ⲆⲆ[744] = [];
    ⲆⲆ[744][0] = Δᐃ.ⲆΔᐃⲆⲆᐃⵠ;
    ⲆⲆ[744][1] = Δᐃ.ΔⵠⵠⵠΔⲆⵠ;
    ⲆⲆ[744][2] = Δᐃ.ⵠⲆΔᐃΔᐃΔ;
    ⲆⲆ[746] = ⲆⲆ[744];
    ⲆⲆ[745] = ⲆⲆ[744];
    ⲆⲆ[747] = [];
    ⲆⲆ[747][0] = Δᐃ.ⵠⲆᐃⵠⵠᐃⲆ;
    ⲆⲆ[747][1] = Δᐃ.ⲆⵠⵠⵠⲆⲆⵠ;
    ⲆⲆ[747][2] = Δᐃ.ΔⲆᐃΔᐃⲆⲆ;
    ⲆⲆ[749] = ⲆⲆ[747];
    ⲆⲆ[748] = ⲆⲆ[747];
    ⲆⲆ[1049] = [];
    ⲆⲆ[1049][0] = Δᐃ.ⵠΔᐃᐃΔⵠΔ;
    ⲆⲆ[1049][1] = Δᐃ.ⲆᐃⲆΔΔⵠⲆ;
    ⲆⲆ[1049][2] = Δᐃ.ΔΔΔⵠᐃᐃⵠ;
    ⲆⲆ[1051] = ⲆⲆ[1049];
    ⲆⲆ[1050] = ⲆⲆ[1049];
    ⲆⲆ[1189] = [];
    ⲆⲆ[1189][0] = Δᐃ.ΔⵠⲆΔᐃⵠⲆ;
    ⲆⲆ[1189][1] = Δᐃ.ᐃΔΔΔⵠⵠⵠ;
    ⲆⲆ[1189][2] = Δᐃ.ᐃⵠΔⵠᐃⲆᐃ;
    ⲆⲆ[1191] = ⲆⲆ[1189];
    ⲆⲆ[1190] = ⲆⲆ[1189];
    ⲆⲆ[1110] = [];
    ⲆⲆ[1110][0] = Δᐃ.ᐃⵠⵠⲆⵠⵠⵠ;
    ⲆⲆ[1110][1] = Δᐃ.ⵠᐃΔⲆᐃⵠΔ;
    ⲆⲆ[1110][2] = Δᐃ.ⲆᐃⲆΔᐃᐃᐃ;
    ⲆⲆ[1112] = ⲆⲆ[1110];
    ⲆⲆ[1111] = ⲆⲆ[1110];
    ⲆⲆ[1131] = [];
    ⲆⲆ[1131][0] = Δᐃ.ᐃⲆΔⲆᐃⲆᐃⵠᐃ;
    ⲆⲆ[1131][1] = Δᐃ.ΔΔⵠⵠᐃⵠᐃΔⵠ;
    ⲆⲆ[1131][2] = Δᐃ.ΔᐃⲆΔΔⲆΔⵠⲆ;
    ⲆⲆ[1133] = ⲆⲆ[1131];
    ⲆⲆ[1132] = ⲆⲆ[1131];
    ⲆⲆ[1137] = [];
    ⲆⲆ[1137][0] = Δᐃ.ⲆⵠᐃᐃΔⵠⲆ;
    ⲆⲆ[1137][1] = Δᐃ.ΔΔΔΔΔΔᐃ;
    ⲆⲆ[1137][2] = Δᐃ.ᐃΔⵠⵠⵠΔⲆ;
    ⲆⲆ[1138] = ⲆⲆ[1137];
    ⲆⲆ[1139] = ⲆⲆ[1137];
    ⲆⲆ[1140] = [];
    ⲆⲆ[1140][0] = Δᐃ.ΔᐃⲆⲆΔᐃⵠ;
    ⲆⲆ[1140][1] = Δᐃ.ΔΔⵠᐃⵠⲆⵠ;
    ⲆⲆ[1140][2] = Δᐃ.ⲆΔΔⵠᐃⵠΔ;
    ⲆⲆ[1141] = ⲆⲆ[1140];
    ⲆⲆ[1142] = ⲆⲆ[1140];
    ⲆⲆ[1117] = [];
    ⲆⲆ[1117][0] = Δᐃ.ᐃⵠᐃᐃⲆᐃⲆ;
    ⲆⲆ[1117][1] = Δᐃ.ⵠΔΔⵠⵠⵠⲆ;
    ⲆⲆ[1117][2] = Δᐃ.ⵠᐃᐃΔΔᐃⲆ;
    ⲆⲆ[1116] = ⲆⲆ[1117];
    ⲆⲆ[1118] = ⲆⲆ[1117];
    ⲆⲆ[1080] = [];
    ⲆⲆ[1080][0] = Δᐃ.ᐃᐃⲆⵠΔᐃΔ;
    ⲆⲆ[1080][1] = Δᐃ.ⲆᐃⵠᐃⲆⲆⵠ;
    ⲆⲆ[1080][2] = Δᐃ.ⲆΔᐃⵠΔⲆⲆ;
    ⲆⲆ[1082] = ⲆⲆ[1080];
    ⲆⲆ[1081] = ⲆⲆ[1080];
    ⲆⲆ[1224] = [];
    ⲆⲆ[1224][0] = Δᐃ.ⲆⵠⲆᐃΔᐃⵠ;
    ⲆⲆ[1224][1] = Δᐃ.ΔᐃⲆⲆⲆᐃᐃ;
    ⲆⲆ[1224][2] = Δᐃ.ᐃᐃⲆᐃⲆΔⵠΔΔ;
    ⲆⲆ[1226] = ⲆⲆ[1224];
    ⲆⲆ[1225] = ⲆⲆ[1224];
    ⲆⲆ[1095] = [];
    ⲆⲆ[1095][0] = Δᐃ.ΔⵠᐃⵠΔⵠⲆ;
    ⲆⲆ[1095][1] = Δᐃ.ⵠⵠΔᐃᐃⵠΔ;
    ⲆⲆ[1095][2] = Δᐃ.ᐃᐃⵠΔᐃⲆⲆ;
    ⲆⲆ[1097] = ⲆⲆ[1095];
    ⲆⲆ[1096] = ⲆⲆ[1095];
    ⲆⲆ[717] = _t(1, [{
      f: dp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
    }, {
      f: wp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e4c027"]
    }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[718] = ⲆⲆ[717];
    ⲆⲆ[408] = _t(1, [{
      f: Wc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
    }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[409] = ⲆⲆ[408];
    ⲆⲆ[907] = _t(1, [{
      f: Bc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
    }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[909] = ⲆⲆ[907];
    ⲆⲆ[908] = ⲆⲆ[907];
    ⲆⲆ[197] = _t(1, [{
      f: oc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
    }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[906] = ⲆⲆ[197];
    ⲆⲆ[901] = _t(1, [{
      f: Fc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[900] = ⲆⲆ[901];
    ⲆⲆ[899] = ⲆⲆ[901];
    ⲆⲆ[401] = _t(1, [{
      f: lc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[402] = ⲆⲆ[401];
    ⲆⲆ[395] = _t(1, [{
      f: pc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[396] = ⲆⲆ[395];
    ⲆⲆ[398] = _t(1, [{
      f: jc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[399] = ⲆⲆ[398];
    ⲆⲆ[404] = _t(1, [{
      f: yc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[405] = ⲆⲆ[404];
    ⲆⲆ[472] = _t(1, [{
      f: wc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[473] = ⲆⲆ[472];
    ⲆⲆ[874] = _t(1, [{
      f: Tc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
    }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[876] = ⲆⲆ[874];
    ⲆⲆ[875] = ⲆⲆ[874];
    ⲆⲆ[477] = _t(1, [{
      f: Dm,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[478] = ⲆⲆ[477];
    ⲆⲆ[709] = _t(1, [{
      f: pm,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#939393", "#5f6061"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[711] = ⲆⲆ[709];
    ⲆⲆ[550] = _t(1, [{
      f: Kc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[551] = ⲆⲆ[550];
    ⲆⲆ[480] = _t(1, [{
      f: Dm,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[481] = ⲆⲆ[480];
    ⲆⲆ[483] = _t(1, [{
      f: Dm,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[484] = ⲆⲆ[483];
    ⲆⲆ[486] = _t(1, [{
      f: Dm,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[487] = ⲆⲆ[486];
    ⲆⲆ[489] = [];
    ⲆⲆ[489][0] = Δᐃ.ᐃⲆⵠΔⲆᐃⵠ;
    ⲆⲆ[489][1] = Δᐃ.ⲆⲆᐃⵠⵠⵠⲆ;
    ⲆⲆ[489][2] = Δᐃ.ᐃᐃⲆᐃⲆᐃⵠ;
    ⲆⲆ[491] = ⲆⲆ[489];
    ⲆⲆ[490] = ⲆⲆ[489];
    ⲆⲆ[1195] = [];
    ⲆⲆ[1195][0] = Δᐃ.ᐃⵠᐃⲆᐃⵠⲆ;
    ⲆⲆ[1195][1] = Δᐃ.ᐃΔⵠⵠΔΔⵠ;
    ⲆⲆ[1195][2] = Δᐃ.ΔⲆΔⵠⵠΔΔ;
    ⲆⲆ[1197] = ⲆⲆ[1195];
    ⲆⲆ[1196] = ⲆⲆ[1195];
    ⲆⲆ[1199] = [];
    ⲆⲆ[1199][0] = Δᐃ.ⵠΔᐃᐃⲆᐃⲆ;
    ⲆⲆ[1199][1] = Δᐃ.ⵠᐃⵠΔᐃᐃⲆ;
    ⲆⲆ[1199][2] = Δᐃ.ⲆⵠΔᐃᐃⲆⵠ;
    ⲆⲆ[1201] = ⲆⲆ[1199];
    ⲆⲆ[1200] = ⲆⲆ[1199];
    ⲆⲆ[1203] = [];
    ⲆⲆ[1203][0] = Δᐃ.ⲆⵠᐃⵠⲆⵠⵠ;
    ⲆⲆ[1203][1] = Δᐃ.ⲆⵠΔⲆⲆⲆΔ;
    ⲆⲆ[1203][2] = Δᐃ.ⲆΔᐃⵠΔᐃΔ;
    ⲆⲆ[1205] = ⲆⲆ[1203];
    ⲆⲆ[1204] = ⲆⲆ[1203];
    ⲆⲆ[1207] = [];
    ⲆⲆ[1207][0] = Δᐃ.ΔⵠΔⲆⵠᐃⲆ;
    ⲆⲆ[1207][1] = Δᐃ.ⲆⵠⲆᐃᐃΔⲆ;
    ⲆⲆ[1207][2] = Δᐃ.ΔᐃⲆⲆΔᐃΔ;
    ⲆⲆ[1209] = ⲆⲆ[1207];
    ⲆⲆ[1208] = ⲆⲆ[1207];
    ⲆⲆ[1211] = [];
    ⲆⲆ[1211][0] = Δᐃ.ⲆΔᐃΔΔΔⵠ;
    ⲆⲆ[1211][1] = Δᐃ.ⵠᐃⲆΔⵠⵠᐃ;
    ⲆⲆ[1211][2] = Δᐃ.ᐃΔⵠⵠⲆΔᐃ;
    ⲆⲆ[1213] = ⲆⲆ[1211];
    ⲆⲆ[1212] = ⲆⲆ[1211];
    ⲆⲆ[1215] = [];
    ⲆⲆ[1215][0] = Δᐃ.ΔⲆᐃᐃⵠⲆⵠ;
    ⲆⲆ[1215][1] = Δᐃ.ΔᐃⲆⲆᐃΔⵠ;
    ⲆⲆ[1215][2] = Δᐃ.ⲆⵠᐃᐃᐃᐃΔ;
    ⲆⲆ[1217] = ⲆⲆ[1215];
    ⲆⲆ[1216] = ⲆⲆ[1215];
    ⲆⲆ[518] = _t(1, [{
      f: up,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
    }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[519] = ⲆⲆ[518];
    ⲆⲆ[532] = _t(1, [{
      f: nm,
      x: -2,
      y: -2,
      a: 1,
      r: -Math.PI / 5,
      c: ["#141414", "#c4a23a", "#816511"]
    }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[533] = ⲆⲆ[532];
    ⲆⲆ[521] = _t(1, [{
      f: em,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
    ⲆⲆ[523] = _t(1, [{
      f: em,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#120202", "#991616", "#750a0a", "#120202"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
    ⲆⲆ[529] = _t(1, [{
      f: Mm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#347f93", "#54a4ba"]
    }, {
      f: Nm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
    }, {
      f: Km,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#a9e4ed", "#86d4e0"]
    }, {
      f: Em,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[530] = ⲆⲆ[529];
    ⲆⲆ[553] = _t(1, [{
      f: Yc,
      x: 45,
      y: 70,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[555] = ⲆⲆ[553];
    ⲆⲆ[541] = _t(1, [{
      f: rm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[542] = ⲆⲆ[541];
    ⲆⲆ[779] = _t(1, [{
      f: Ip,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[780] = ⲆⲆ[779];
    ⲆⲆ[767] = _t(1, [{
      f: Rm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#2a2938", "#242330", "#313041"]
    }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[768] = ⲆⲆ[767];
    ⲆⲆ[776] = _t(1, [{
      f: pp,
      x: 0,
      y: 3,
      a: 1,
      r: 0,
      c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
    }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[777] = ⲆⲆ[776];
    ⲆⲆ[771] = _t(1, [{
      f: pp,
      x: 0,
      y: 3,
      a: 1,
      r: 0,
      c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
    }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[772] = ⲆⲆ[771];
    ⲆⲆ[756] = _t(1, [{
      f: gm,
      x: 0,
      y: 10,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[758] = ⲆⲆ[756];
    ⲆⲆ[760] = _t(1, [{
      f: gm,
      x: 0,
      y: 10,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[762] = ⲆⲆ[760];
    ⲆⲆ[764] = _t(1, [{
      f: gm,
      x: 0,
      y: 10,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[770] = ⲆⲆ[764];
    ⲆⲆ[910] = _t(1, [{
      f: ac,
      x: -1,
      y: 0,
      a: 1,
      r: 0,
      c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[912] = ⲆⲆ[910];
    ⲆⲆ[911] = ⲆⲆ[910];
    ⲆⲆ[732] = _t(1, [{
      f: Jp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
    }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[734] = ⲆⲆ[732];
    ⲆⲆ[563] = _t(1, [{
      f: hm,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
    }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[564] = ⲆⲆ[563];
    ⲆⲆ[751] = _t(1, [{
      f: rp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[252] = _t(1, [{
      f: Lm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[753] = _t(1, [{
      f: rp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[253] = _t(1, [{
      f: Lm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[176] = _t(1, [{
      f: Zm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
    }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[177] = _t(1, [{
      f: Zm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
    }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[175] = _t(1, [{
      f: Zm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
    }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[616] = _t(1, [{
      f: Ap,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[618] = ⲆⲆ[616];
    ⲆⲆ[699] = _t(1, [{
      f: Ap,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[700] = ⲆⲆ[699];
    ⲆⲆ[702] = _t(1, [{
      f: Ap,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[704] = ⲆⲆ[702];
    ⲆⲆ[705] = _t(1, [{
      f: Ap,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[706] = ⲆⲆ[705];
    ⲆⲆ[420] = _t(1, [{
      f: Pm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[421] = ⲆⲆ[420];
    ⲆⲆ[826] = _t(1, [{
      f: $m,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#252525", "#73583e", "#493425", "#7d6144"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[827] = ⲆⲆ[826];
    ⲆⲆ[429] = _t(1, [{
      f: np,
      x: 0,
      y: -2,
      a: 1,
      r: 0,
      c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[430] = ⲆⲆ[429];
    ⲆⲆ[432] = _t(1, [{
      f: Vc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#dbce71", "#b29c32", "#c4bc51"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[433] = ⲆⲆ[432];
    ⲆⲆ[435] = _t(1, [{
      f: Cp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[436] = ⲆⲆ[435];
    ⲆⲆ[438] = _t(1, [{
      f: ap,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[439] = ⲆⲆ[438];
    ⲆⲆ[441] = _t(1, [{
      f: ep,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#221e1b", "#ffffff", "#f6f0e7"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[442] = ⲆⲆ[441];
    ⲆⲆ[418] = _t(1, [{
      f: Xm,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#1d051e", "#c27add", "#cd98e5"]
    }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[609] = _t(1, [{
      f: kp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#D7C393", "#a48c6c"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[142] = _t(1, [{
      f: _m,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#93CBCE", "#E9F6F6"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[140] = _t(1, [{
      f: kp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#866432", "#6b4f25"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[180] = _t(1, [{
      f: vp,
      x: 3,
      y: 2,
      a: 1,
      r: 0,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[181] = _t(1, [{
      f: Xc,
      x: 3,
      y: 2,
      a: 1,
      r: 0,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[784] = ⲆⲆ[180];
    ⲆⲆ[785] = ⲆⲆ[181];
    ⲆⲆ[789] = _t(1, [{
      f: mm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
    }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[791] = ⲆⲆ[789];
    ⲆⲆ[613] = _t(1, [{
      f: jm,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
    }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[612] = _t(1, [{
      f: hp,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
    }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[715] = ⲆⲆ[613];
    ⲆⲆ[611] = ⲆⲆ[612];
    ⲆⲆ[634] = _t(1, [{
      f: Fu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[635] = ⲆⲆ[634];
    ⲆⲆ[200] = _t(1, [{
      f: Eu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[866] = _t(1, [{
      f: Ku,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[143] = _t(1, [{
      f: Pp,
      x: 0,
      y: -2,
      a: 1,
      r: 0,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[690] = ⲆⲆ[143];
    ⲆⲆ[662] = _t(1, [{
      f: Ec,
      x: -3,
      y: -5,
      a: 1,
      r: 0,
      c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
    }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[664] = _t(1, [{
      f: rc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1d051e", "#42261A", "#281818"]
    }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[666] = ⲆⲆ[664];
    ⲆⲆ[649] = _t(1, [{
      f: Nc,
      x: -3,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
    }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[650] = ⲆⲆ[649];
    ⲆⲆ[674] = _t(1, [{
      f: gu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
    }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[646] = _t(1, [{
      f: Gc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⲆⲆ[647] = ⲆⲆ[646];
    ⲆⲆ[685] = _t(1, [{
      f: ym,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[684] = ⲆⲆ[685];
    ⲆⲆ[870] = _t(1, [{
      f: Qd,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#e2d63b", "#ee71a9", "#42b672"]
    }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[871] = ⲆⲆ[870];
    ⲆⲆ[605] = _t(1, [{
      f: xm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
    }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[604] = ⲆⲆ[605];
    ⲆⲆ[842] = _t(1, [{
      f: _d,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[843] = ⲆⲆ[842];
    ⲆⲆ[652] = _t(1, [{
      f: Om,
      x: -1,
      y: 0,
      a: 1,
      r: -Math.PI / 5,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
    ⲆⲆ[654] = ⲆⲆ[652];
    ⲆⲆ[626] = _t(1, [{
      f: Om,
      x: -1,
      y: 0,
      a: 1,
      r: -Math.PI / 5,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
    }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[627] = ⲆⲆ[626];
    ⲆⲆ[629] = _t(1, [{
      f: Ym,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[196] = _t(1, [{
      f: Bu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
    }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[898] = ⲆⲆ[196];
    ⲆⲆ[659] = _t(1, [{
      f: fc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
    }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[660] = ⲆⲆ[659];
    ⲆⲆ[145] = _t(1, [{
      f: Zt,
      x: -2,
      y: -8,
      a: 1,
      r: 0,
      c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
    }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⲆⲆ[730] = ⲆⲆ[145];
    ⲆⲆ[566] = [];
    ⲆⲆ[566][0] = Δᐃ.ΔᐃΔⲆΔⲆᐃ;
    ⲆⲆ[566][1] = Δᐃ.ΔⵠⲆΔΔⲆⵠ;
    ⲆⲆ[566][2] = Δᐃ.ΔΔⵠᐃΔⵠᐃ;
    ⲆⲆ[567] = ⲆⲆ[566];
    ⲆⲆ[568] = ⲆⲆ[566];
    ⲆⲆ[877] = [];
    ⲆⲆ[877][0] = Δᐃ.ⵠΔⵠᐃⵠⵠᐃ;
    ⲆⲆ[877][1] = Δᐃ.ΔⵠⵠᐃⵠⵠΔ;
    ⲆⲆ[877][2] = Δᐃ.ᐃΔᐃΔᐃΔᐃ;
    ⲆⲆ[879] = ⲆⲆ[877];
    ⲆⲆ[878] = ⲆⲆ[877];
    ⲆⲆ[933] = ⲆⲆ[932];
    ⲆⲆ[934] = ⲆⲆ[932];
    ⲆⲆ[932] = [];
    ⲆⲆ[932][0] = Δᐃ.ⲆᐃᐃⲆᐃⵠΔ;
    ⲆⲆ[932][1] = Δᐃ.ⲆⲆΔᐃᐃⵠⵠ;
    ⲆⲆ[932][2] = Δᐃ.ⲆⲆᐃⵠⲆᐃⵠ;
    ⲆⲆ[933] = ⲆⲆ[932];
    ⲆⲆ[934] = ⲆⲆ[932];
    ⲆⲆ[943] = [];
    ⲆⲆ[943][0] = Δᐃ.ᐃⵠⲆⵠΔᐃᐃ;
    ⲆⲆ[943][1] = Δᐃ.ΔⲆᐃⲆΔᐃᐃ;
    ⲆⲆ[943][2] = Δᐃ.ᐃᐃⵠⲆᐃⵠΔ;
    ⲆⲆ[944] = ⲆⲆ[943];
    ⲆⲆ[945] = ⲆⲆ[943];
    ⲆⲆ[921] = [];
    ⲆⲆ[921][0] = Δᐃ.ᐃΔⵠⵠΔⵠᐃ;
    ⲆⲆ[921][1] = Δᐃ.ⲆΔⲆΔⲆΔⲆ;
    ⲆⲆ[921][2] = Δᐃ.ΔⲆΔⲆᐃⲆⵠ;
    ⲆⲆ[922] = ⲆⲆ[921];
    ⲆⲆ[923] = ⲆⲆ[921];
    ⲆⲆ[925] = [];
    ⲆⲆ[925][0] = Δᐃ.ⵠⵠᐃⲆⵠⵠΔ;
    ⲆⲆ[925][1] = Δᐃ.ⵠΔΔΔΔⵠⲆ;
    ⲆⲆ[925][2] = Δᐃ.ᐃᐃΔⵠⲆⲆΔ;
    ⲆⲆ[926] = ⲆⲆ[925];
    ⲆⲆ[927] = ⲆⲆ[925];
    ⲆⲆ[929] = [];
    ⲆⲆ[929][0] = Δᐃ.ΔⲆⲆΔᐃᐃⵠ;
    ⲆⲆ[929][1] = Δᐃ.ᐃⲆᐃⲆⵠΔⲆ;
    ⲆⲆ[929][2] = Δᐃ.ΔⲆΔᐃΔΔΔ;
    ⲆⲆ[930] = ⲆⲆ[929];
    ⲆⲆ[931] = ⲆⲆ[929];
    ⲆⲆ[946] = [];
    ⲆⲆ[946][0] = Δᐃ.ⲆⲆⲆᐃⵠᐃⲆ;
    ⲆⲆ[946][1] = Δᐃ.ᐃⲆᐃᐃΔⵠⲆ;
    ⲆⲆ[946][2] = Δᐃ.ⲆΔΔᐃⲆᐃΔ;
    ⲆⲆ[947] = ⲆⲆ[946];
    ⲆⲆ[948] = ⲆⲆ[946];
    ⲆⲆ[735] = [];
    ⲆⲆ[735][0] = Δᐃ.ⵠⵠⵠⲆΔⵠⲆ;
    ⲆⲆ[735][1] = Δᐃ.ⵠⵠᐃΔⵠⲆⲆ;
    ⲆⲆ[735][2] = Δᐃ.ⲆⲆⵠᐃᐃΔᐃ;
    ⲆⲆ[737] = ⲆⲆ[735];
    ⲆⲆ[736] = ⲆⲆ[735];
    ⲆⲆ[1164] = [];
    ⲆⲆ[1164][0] = Δᐃ.ⵠᐃⲆᐃᐃΔⵠ;
    ⲆⲆ[1164][1] = Δᐃ.ΔᐃᐃⵠⵠᐃⲆ;
    ⲆⲆ[1164][2] = Δᐃ.ᐃⲆⵠⵠⲆΔⲆ;
    ⲆⲆ[ts.ⲆΔΔⲆⲆΔΔⲆⵠ] = ⲆⲆ[1164];
    ⲆⲆ[1165] = ⲆⲆ[1164];
    ⲆⲆ[738] = [];
    ⲆⲆ[738][0] = Δᐃ.ΔⲆⲆᐃⲆΔⲆ;
    ⲆⲆ[738][1] = Δᐃ.ᐃⵠⲆⵠⲆᐃⲆ;
    ⲆⲆ[738][2] = Δᐃ.ᐃⲆΔⲆⵠⲆⲆ;
    ⲆⲆ[740] = ⲆⲆ[738];
    ⲆⲆ[739] = ⲆⲆ[738];
    ⲆⲆ[741] = [];
    ⲆⲆ[741][0] = Δᐃ.ᐃΔᐃⵠᐃⲆⵠ;
    ⲆⲆ[741][1] = Δᐃ.ⲆⵠⲆΔⲆⵠᐃ;
    ⲆⲆ[741][2] = Δᐃ.ⵠΔⵠᐃΔⵠⲆ;
    ⲆⲆ[743] = ⲆⲆ[741];
    ⲆⲆ[742] = ⲆⲆ[741];
    ⲆⲆ[938] = [];
    ⲆⲆ[938][0] = Δᐃ.ΔΔⲆΔΔΔΔ;
    ⲆⲆ[938][1] = Δᐃ.ΔᐃⲆⵠⲆΔⲆ;
    ⲆⲆ[938][2] = Δᐃ.ᐃᐃᐃΔⲆⵠⲆ;
    ⲆⲆ[939] = ⲆⲆ[938];
    ⲆⲆ[936] = [];
    ⲆⲆ[936][0] = Δᐃ.ⲆΔᐃⲆᐃᐃⲆ;
    ⲆⲆ[936][1] = Δᐃ.ΔⵠᐃᐃⲆΔⵠ;
    ⲆⲆ[936][2] = Δᐃ.ᐃΔΔᐃΔᐃΔ;
    ⲆⲆ[937] = ⲆⲆ[936];
    ⲆⲆ[617] = ⲆⲆ[616];
    ⲆⲆ[701] = ⲆⲆ[699];
    ⲆⲆ[703] = ⲆⲆ[702];
    ⲆⲆ[707] = ⲆⲆ[705];
    ⲆⲆ[348] = ⲆⲆ[311];
    ⲆⲆ[633] = ⲆⲆ[631];
    ⲆⲆ[645] = ⲆⲆ[644];
    ⲆⲆ[640] = ⲆⲆ[639];
    ⲆⲆ[273] = ⲆⲆ[309];
    ⲆⲆ[590] = ⲆⲆ[252];
    ⲆⲆ[752] = ⲆⲆ[751];
    ⲆⲆ[591] = ⲆⲆ[253];
    ⲆⲆ[754] = ⲆⲆ[753];
    ⲆⲆ[276] = ⲆⲆ[328];
    ⲆⲆ[863] = ⲆⲆ[865];
    ⲆⲆ[862] = ⲆⲆ[860];
    ⲆⲆ[831] = ⲆⲆ[829];
    ⲆⲆ[340] = ⲆⲆ[261];
    ⲆⲆ[596] = ⲆⲆ[594];
    ⲆⲆ[345] = ⲆⲆ[292];
    ⲆⲆ[346] = ⲆⲆ[293];
    ⲆⲆ[457] = ⲆⲆ[455];
    ⲆⲆ[274] = ⲆⲆ[313];
    ⲆⲆ[341] = ⲆⲆ[312];
    ⲆⲆ[272] = ⲆⲆ[258];
    ⲆⲆ[344] = ⲆⲆ[296];
    ⲆⲆ[459] = ⲆⲆ[458];
    ⲆⲆ[342] = ⲆⲆ[315];
    ⲆⲆ[270] = ⲆⲆ[297];
    ⲆⲆ[271] = ⲆⲆ[298];
    ⲆⲆ[343] = ⲆⲆ[316];
    ⲆⲆ[269] = ⲆⲆ[277];
    ⲆⲆ[358] = ⲆⲆ[310];
    ⲆⲆ[354] = ⲆⲆ[329];
    ⲆⲆ[356] = ⲆⲆ[331];
    ⲆⲆ[355] = ⲆⲆ[330];
    ⲆⲆ[494] = ⲆⲆ[492];
    ⲆⲆ[349] = ⲆⲆ[317];
    ⲆⲆ[350] = ⲆⲆ[319];
    ⲆⲆ[275] = ⲆⲆ[300];
    ⲆⲆ[351] = ⲆⲆ[323];
    ⲆⲆ[353] = ⲆⲆ[305];
    ⲆⲆ[514] = ⲆⲆ[513];
    ⲆⲆ[352] = ⲆⲆ[303];
    ⲆⲆ[520] = ⲆⲆ[518];
    ⲆⲆ[534] = ⲆⲆ[532];
    ⲆⲆ[531] = ⲆⲆ[529];
    ⲆⲆ[522] = ⲆⲆ[521];
    ⲆⲆ[524] = ⲆⲆ[523];
    ⲆⲆ[565] = ⲆⲆ[563];
    ⲆⲆ[554] = ⲆⲆ[553];
    ⲆⲆ[357] = ⲆⲆ[335];
    ⲆⲆ[359] = ⲆⲆ[337];
    ⲆⲆ[339] = Yq(function (a, b, c) {
      var d = document.createElement("canvas");
      var f = d.getContext("2d");
      d.width = a * 118;
      d.height = a * 129;
      f.save();
      f.translate(a * 90, a * 90);
      yd(f, a * -86.5, a * -86, a * 110, a * 110, a * 15);
      f.restore();
      Td(f, c[0], c[1], 4);
      f.save();
      yd(f, a * 30, a * 115, a * 60, a * 5, a * 15);
      f.restore();
      Td(f, c[2], c[3], 4);
      f.save();
      yd(f, a * 50, a * 117, a * 20, a * 10, a * 15);
      f.restore();
      Td(f, c[2]);
      return d;
    }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
    ⲆⲆ[366] = _t(0.5, [{
      f: gc,
      x: 0,
      y: 2,
      a: 1,
      r: 0,
      c: ["#ffffff"]
    }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
    ⲆⲆ[382] = ⲆⲆ[361];
    ⲆⲆ[383] = ⲆⲆ[362];
    ⲆⲆ[384] = ⲆⲆ[364];
    ⲆⲆ[497] = ⲆⲆ[495];
    ⲆⲆ[385] = ⲆⲆ[392];
    ⲆⲆ[774] = ⲆⲆ[178];
    ⲆⲆ[775] = ⲆⲆ[179];
    ⲆⲆ[386] = ⲆⲆ[368];
    ⲆⲆ[625] = ⲆⲆ[624];
    ⲆⲆ[394] = ⲆⲆ[393];
    ⲆⲆ[1163] = ⲆⲆ[1162];
    ⲆⲆ[506] = ⲆⲆ[505];
    ⲆⲆ[387] = ⲆⲆ[369];
    ⲆⲆ[504] = ⲆⲆ[502];
    ⲆⲆ[388] = ⲆⲆ[372];
    ⲆⲆ[389] = ⲆⲆ[375];
    ⲆⲆ[390] = ⲆⲆ[378];
    ⲆⲆ[501] = ⲆⲆ[499];
    ⲆⲆ[391] = ⲆⲆ[381];
    ⲆⲆ[403] = ⲆⲆ[401];
    ⲆⲆ[397] = ⲆⲆ[395];
    ⲆⲆ[400] = ⲆⲆ[398];
    ⲆⲆ[406] = ⲆⲆ[404];
    ⲆⲆ[474] = ⲆⲆ[472];
    ⲆⲆ[875] = ⲆⲆ[874];
    ⲆⲆ[552] = ⲆⲆ[550];
    ⲆⲆ[710] = ⲆⲆ[709];
    ⲆⲆ[479] = ⲆⲆ[477];
    ⲆⲆ[482] = ⲆⲆ[480];
    ⲆⲆ[485] = ⲆⲆ[483];
    ⲆⲆ[488] = ⲆⲆ[486];
    ⲆⲆ[410] = ⲆⲆ[408];
    ⲆⲆ[719] = ⲆⲆ[717];
    ⲆⲆ[422] = ⲆⲆ[420];
    ⲆⲆ[431] = ⲆⲆ[429];
    ⲆⲆ[434] = ⲆⲆ[432];
    ⲆⲆ[437] = ⲆⲆ[435];
    ⲆⲆ[543] = ⲆⲆ[541];
    ⲆⲆ[733] = ⲆⲆ[732];
    ⲆⲆ[440] = ⲆⲆ[438];
    ⲆⲆ[443] = ⲆⲆ[441];
    ⲆⲆ[446] = ⲆⲆ[418];
    ⲆⲆ[606] = ⲆⲆ[605];
    ⲆⲆ[844] = ⲆⲆ[842];
    ⲆⲆ[683] = ⲆⲆ[685];
    ⲆⲆ[610] = ⲆⲆ[609];
    ⲆⲆ[689] = ⲆⲆ[143];
    ⲆⲆ[686] = ⲆⲆ[142];
    ⲆⲆ[682] = ⲆⲆ[140];
    ⲆⲆ[615] = ⲆⲆ[613];
    ⲆⲆ[614] = ⲆⲆ[612];
    ⲆⲆ[628] = ⲆⲆ[626];
    ⲆⲆ[630] = ⲆⲆ[629];
    ⲆⲆ[636] = ⲆⲆ[634];
    ⲆⲆ[868] = ⲆⲆ[200];
    ⲆⲆ[867] = ⲆⲆ[866];
    ⲆⲆ[648] = ⲆⲆ[646];
    ⲆⲆ[651] = ⲆⲆ[649];
    ⲆⲆ[653] = ⲆⲆ[652];
    ⲆⲆ[661] = ⲆⲆ[659];
    ⲆⲆ[898] = ⲆⲆ[196];
    ⲆⲆ[663] = ⲆⲆ[662];
    ⲆⲆ[665] = ⲆⲆ[664];
    ⲆⲆ[675] = ⲆⲆ[674];
    ⲆⲆ[731] = ⲆⲆ[145];
    ⲆⲆ[757] = ⲆⲆ[756];
    ⲆⲆ[759] = ⲆⲆ[176];
    ⲆⲆ[761] = ⲆⲆ[760];
    ⲆⲆ[763] = ⲆⲆ[177];
    ⲆⲆ[765] = ⲆⲆ[764];
    ⲆⲆ[766] = ⲆⲆ[175];
    ⲆⲆ[769] = ⲆⲆ[767];
    ⲆⲆ[773] = ⲆⲆ[771];
    ⲆⲆ[778] = ⲆⲆ[776];
    ⲆⲆ[781] = ⲆⲆ[779];
    ⲆⲆ[787] = ⲆⲆ[181];
    ⲆⲆ[786] = ⲆⲆ[180];
    ⲆⲆ[790] = ⲆⲆ[789];
    ⲆⲆ[801] = ⲆⲆ[800];
    ⲆⲆ[810] = ⲆⲆ[808];
    ⲆⲆ[836] = ⲆⲆ[834];
    ⲆⲆ[847] = ⲆⲆ[845];
    ⲆⲆ[828] = ⲆⲆ[826];
  }
  function zm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 33;
    c.height = a * 35;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 12.75, a * 7.1328125);
    d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
    d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
    d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
    d.closePath();
    Td(d, b[0]);
    return c;
  }
  function ym(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 163;
    d.height = a * 163;
    f.save();
    f.translate(a * 82.5, a * 81.1015625);
    f.rotate(0);
    yd(f, a * -65.5, a * -66, a * 131, a * 131, a * 5);
    f.restore();
    Td(f, c[1]);
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 5, a * 5);
    f.save();
    f.translate(a * 80, a * 17.1015625);
    yd(f, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    f.restore();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -5, a * -5);
    f.save();
    f.translate(a * 80, a * 17.1015625);
    yd(f, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    f.restore();
    Td(f, c[2], c[3], a * 3);
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 5, a * 5);
    f.save();
    f.translate(a * 145.5, a * 83.6015625);
    yd(f, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    f.restore();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -5, a * -5);
    f.save();
    f.translate(a * 145.5, a * 83.6015625);
    yd(f, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    f.restore();
    Td(f, c[2], c[3], a * 3);
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 5, a * 5);
    f.save();
    f.translate(a * 17.5, a * 82.6015625);
    yd(f, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    f.restore();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -5, a * -5);
    f.save();
    f.translate(a * 17.5, a * 82.6015625);
    yd(f, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    f.restore();
    Td(f, c[2], c[3], a * 3);
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 5, a * 5);
    f.save();
    f.translate(a * 80.5, a * 145.6015625);
    yd(f, a * -65.5, a * -4, a * 129, a * 9, a * 5);
    f.restore();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -5, a * -5);
    f.save();
    f.translate(a * 80.5, a * 145.6015625);
    yd(f, a * -65.5, a * -4, a * 129, a * 9, a * 5);
    f.restore();
    Td(f, c[2], c[3], a * 3);
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 5, a * 5);
    f.save();
    f.translate(a * 17, a * 18.1015625);
    yd(f, a * -11, a * -11.5, a * 22, a * 22, a * 5);
    f.restore();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -5, a * -5);
    f.save();
    f.translate(a * 17, a * 18.1015625);
    yd(f, a * -11, a * -11.5, a * 22, a * 22, a * 5);
    f.restore();
    Td(f, c[2], c[3], a * 3);
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 5, a * 5);
    f.save();
    f.translate(a * 145.5, a * 16.6015625);
    yd(f, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    f.restore();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -5, a * -5);
    f.save();
    f.translate(a * 145.5, a * 16.6015625);
    yd(f, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    f.restore();
    Td(f, c[2], c[3], a * 3);
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 5, a * 5);
    f.save();
    f.translate(a * 145.5, a * 144.1015625);
    yd(f, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    f.restore();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -5, a * -5);
    f.save();
    f.translate(a * 145.5, a * 144.1015625);
    yd(f, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    f.restore();
    Td(f, c[2], c[3], a * 3);
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 5, a * 5);
    f.save();
    f.translate(a * 17.5, a * 145.1015625);
    yd(f, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    f.restore();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -5, a * -5);
    f.save();
    f.translate(a * 17.5, a * 145.1015625);
    yd(f, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    f.restore();
    Td(f, c[2], c[3], a * 3);
    return d;
  }
  function wm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 330;
    d.translate(a * -60, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 7.953125);
    d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
    d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
    d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
    d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
    d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
    d.closePath();
    Td(d, b[0]);
    return c;
  }
  function Pm(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 187;
    d.height = a * 119;
    f.globalAlpha = b ? 0.5 : 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(0, 3);
    f.moveTo(a * 53, a * 45);
    f.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
    f.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    f.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    f.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    f.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    f.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    f.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    f.closePath();
    Td(f, c[5]);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(0, -3);
    f.moveTo(a * 53, a * 45);
    f.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
    f.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    f.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    f.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    f.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    f.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    f.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    f.closePath();
    Td(f, c[0], c[1], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 151, a * 60);
    f.bezierCurveTo(a * 140, a * 36, a * 137, a * 32, a * 124, a * 29);
    f.bezierCurveTo(a * 98, a * 22, a * 80, a * 24, a * 62, a * 28);
    f.bezierCurveTo(a * 42, a * 35, a * 38, a * 46, a * 34, a * 58);
    f.bezierCurveTo(a * 53, a * 74, a * 76, a * 76, a * 91, a * 78);
    f.closePath();
    Td(f, c[0], c[1], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 37, a * 53);
    f.bezierCurveTo(a * 30, a * 56, a * 29, a * 67, a * 30, a * 68);
    f.bezierCurveTo(a * 94, a * 108, a * 150, a * 76, a * 155, a * 70);
    f.bezierCurveTo(a * 154, a * 60, a * 151, a * 54, a * 149, a * 53);
    f.bezierCurveTo(a * 101, a * 74, a * 66, a * 66, a * 37, a * 53);
    f.closePath();
    Td(f, c[2], c[3], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 100, a * 36);
    f.bezierCurveTo(a * 92, a * 25, a * 86, a * 28, a * 82, a * 34);
    f.bezierCurveTo(a * 88, a * 40, a * 93, a * 40, a * 98, a * 36);
    f.closePath();
    Td(f, c[0], c[1], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 80, a * 43);
    f.bezierCurveTo(a * 69, a * 46, a * 67, a * 52, a * 69, a * 58);
    Td(f, undefined, c[1], a * 4);
    Pd(f, a * 58, a * 50, a * 5);
    Td(f, c[4]);
    Pd(f, a * 43, a * 65, a * 5);
    Td(f, c[4]);
    Pd(f, a * 58, a * 73, a * 5);
    Td(f, c[4]);
    Pd(f, a * 58, a * 50, a * 2);
    Td(f, c[5]);
    Pd(f, a * 43, a * 65, a * 2);
    Td(f, c[5]);
    Pd(f, a * 58, a * 73, a * 2);
    Td(f, c[5]);
    return d;
  }
  function km(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -80, -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 200.5, a * 14.953125);
    d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
    d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
    d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
    d.closePath();
    Td(d, b[0]);
    return c;
  }
  function Am(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 271;
    c.height = a * 366;
    d.globalAlpha = 0.5;
    d.translate(0, a * 10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    Td(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    Td(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    Td(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    Td(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    Td(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    Td(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    Td(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    Td(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    Td(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    Td(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    Td(d, b[0]);
    d.globalAlpha = 1;
    d.translate(0, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    Td(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    Td(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    Td(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    Td(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    Td(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    Td(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    Td(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    Td(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    Td(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    Td(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    Td(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    Td(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    Td(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    Td(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    Td(d, b[1]);
    Pd(d, a * 102, a * 269, a * 11);
    Td(d, b[3]);
    Pd(d, a * 98, a * 266, a * 5);
    Td(d, b[6]);
    Pd(d, a * 168, a * 269, a * 11);
    Td(d, b[3]);
    Pd(d, a * 164, a * 266, a * 5);
    Td(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    Td(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 235);
    d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
    d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
    d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
    d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
    d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
    d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
    d.closePath();
    Td(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 132, a * 219);
    d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
    d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
    d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
    d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
    d.closePath();
    Td(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 179);
    d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
    d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
    d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
    d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
    d.closePath();
    Td(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 143);
    d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
    d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
    d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
    d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
    d.closePath();
    Td(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 115);
    d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
    d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
    d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
    d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
    d.closePath();
    Td(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 94);
    d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
    d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
    d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
    d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
    d.closePath();
    Td(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 279);
    d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
    d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
    d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
    d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
    d.closePath();
    Td(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 147, a * 303);
    d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
    d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
    d.closePath();
    Td(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 303);
    d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
    d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
    d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
    d.closePath();
    Td(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 89, a * 280);
    d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
    d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
    d.closePath();
    Td(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 94, a * 290);
    d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
    d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
    d.closePath();
    Td(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 163, a * 295);
    d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
    d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
    d.closePath();
    Td(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 172, a * 286);
    d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
    d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
    d.closePath();
    Td(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    Td(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    Td(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    Td(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    Td(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    Td(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    Td(d, b[7]);
    return c;
  }
  function xm(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 102;
    d.height = a * 102;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(3, 3);
    yd(f, a * 24, a * 26, a * 70, a * 9, a * 10);
    Td(f, c[0]);
    yd(f, a * 26, a * 70, a * 70, a * 9, a * 10);
    Td(f, c[0]);
    yd(f, a * 5, a * 3, a * 22, a * 94, a * 5);
    Td(f, c[0]);
    yd(f, a * 40, a * 3, a * 22, a * 94, a * 5);
    Td(f, c[0]);
    yd(f, a * 75, a * 3, a * 22, a * 94, a * 5);
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(-3, -3);
    yd(f, a * 24, a * 26, a * 70, a * 9, a * 10);
    Td(f, c[1]);
    yd(f, a * 26, a * 70, a * 70, a * 9, a * 10);
    Td(f, c[1]);
    yd(f, a * 5, a * 3, a * 22, a * 94, a * 5);
    Td(f, c[2], c[3], a * 4);
    yd(f, a * 40, a * 3, a * 22, a * 94, a * 5);
    Td(f, c[2], c[3], a * 4);
    yd(f, a * 75, a * 3, a * 22, a * 94, a * 5);
    Td(f, c[2], c[3], a * 4);
    return d;
  }
  function Jm(b, c, d, f) {
    var g = document.createElement("canvas");
    var h = g.getContext("2d");
    g.width = b * 170;
    g.height = b * 200;
    h.translate(b * 5, b * 15);
    if (f == 1) {
      h.translate(0, b * -5);
      Pd(h, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
      Td(h, d[1], d[5], b * 20);
      Pd(h, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
      Td(h, d[1], d[5], b * 20);
      h.save();
      h.translate(b * 77.00003051757812, b * 31.267044067382812);
      yd(h, b * -6, b * -12.5, b * 12, b * 25, b * 10);
      h.restore();
      Td(h, d[1], d[5], b * 20);
      h.save();
      h.translate(b * 77.00003051757812, b * 13.267044067382812);
      yd(h, b * -15, b * -10.5, b * 30, b * 21, b * 10);
      h.restore();
      Td(h, d[1], d[5], b * 20);
    }
    Pd(h, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
    Td(h, d[1], d[2], b * 7);
    Pd(h, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
    Td(h, d[1], d[2], b * 7);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 18.000030517578125, b * 105.85795593261719);
    h.bezierCurveTo(b * 134.00003051757812, b * 104.85795593261719, b * 77.00003051757812, b * 104.85795593261719, b * 136.00003051757812, b * 103.85795593261719);
    h.closePath();
    Td(h, d[1], d[2], b * 8);
    Pd(h, b * 77.00003051757812, b * 104.6761474609375, b * 32.55764119219941);
    Td(h, d[1], d[2], b * 8);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 78.00003051757812, b * 112.03977966308594);
    h.bezierCurveTo(b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 62.03977966308594);
    h.closePath();
    Td(h, d[3], d[2], b * 8);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 78.00003051757812, b * 48.03977966308594);
    h.bezierCurveTo(b * 82.00003051757812, b * 55.53977966308594, b * 82.00003051757812, b * 55.53977966308594, b * 86.00003051757812, b * 63.03977966308594);
    h.bezierCurveTo(b * 78.00003051757812, b * 63.03977966308594, b * 78.00003051757812, b * 63.03977966308594, b * 70.00003051757812, b * 63.03977966308594);
    h.closePath();
    Td(h, d[3], d[2], b * 4);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 80.00003051757812, b * 111.6761474609375);
    h.bezierCurveTo(b * 95.00003051757812, b * 97.1761474609375, b * 95.00003051757812, b * 97.1761474609375, b * 110.00003051757812, b * 82.6761474609375);
    h.closePath();
    Td(h, d[3], d[2], b * 8);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 107.00003051757812, b * 76.6761474609375);
    h.bezierCurveTo(b * 111.50003051757812, b * 82.6761474609375, b * 111.50003051757812, b * 82.6761474609375, b * 116.00003051757812, b * 88.6761474609375);
    h.bezierCurveTo(b * 118.50003051757812, b * 81.6761474609375, b * 118.50003051757812, b * 81.6761474609375, b * 121.00003051757812, b * 74.6761474609375);
    h.closePath();
    Td(h, d[3], d[2], b * 4);
    Pd(h, b * 77.00003051757812, b * 105.03977966308594, b * 15.556349186104045);
    Td(h, d[3], d[2], b * 4);
    h.save();
    h.translate(b * 77.00003051757812, b * 31.267044067382812);
    h.rotate(0);
    yd(h, b * -6, b * -12.5, b * 12, b * 25, b * 10);
    h.restore();
    Td(h, d[1], d[2], b * 7);
    h.save();
    h.translate(b * 77.00003051757812, b * 13.267044067382812);
    h.rotate(0);
    yd(h, b * -15, b * -10.5, b * 30, b * 21, b * 10);
    h.restore();
    Td(h, d[1], d[2], b * 7);
    return g;
  }
  function Mm(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    f.translate(a * 2, a * 1);
    f.globalAlpha = 0.3;
    Pd(f, a * 98, a * 99, a * 100);
    Td(f, c[0]);
    f.globalAlpha = 0.5;
    Pd(f, a * 98, a * 99, a * 90);
    Td(f, c[1]);
    return d;
  }
  function Bm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -20, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 50, a * 105);
    d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
    d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
    d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
    d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
    d.closePath();
    Td(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 106);
    d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
    d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
    d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
    d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
    d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
    d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
    d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
    d.closePath();
    Td(d, b[2], b[3], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 30, a * 159);
    d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
    d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
    d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
    d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
    d.closePath();
    Td(d, b[2]);
    return c;
  }
  function Dm(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 69;
    d.height = a * 120;
    f.globalAlpha = b ? 0.5 : 1;
    f.save();
    f.translate(a * 30, a * 84);
    yd(f, a * -6, a * -66.5, a * 8, a * 100, a * 10);
    f.restore();
    Td(f, c[0]);
    f.save();
    f.translate(a * 30, a * 45);
    yd(f, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
    f.restore();
    Td(f, c[0]);
    f.save();
    f.translate(a * 30, a * 17);
    yd(f, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
    f.restore();
    Td(f, c[0]);
    f.save();
    f.translate(a * 30, a * 31);
    yd(f, a * -26, a * -14.5, a * 52, a * 29, a * 5);
    f.restore();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.save();
    f.translate(a * 36, a * 79.140625);
    yd(f, a * -6, a * -66.5, a * 8, a * 100, a * 10);
    f.restore();
    Td(f, c[1], c[2], a * 3);
    f.save();
    f.translate(a * 35, a * 40.140625);
    yd(f, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
    f.restore();
    Td(f, c[3], c[4], a * 3);
    f.save();
    f.translate(a * 35, a * 12.140625);
    yd(f, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
    f.restore();
    Td(f, c[3], c[4], a * 3);
    f.save();
    f.translate(a * 34.5, a * 26.140625);
    yd(f, a * -26, a * -14.5, a * 52, a * 29, a * 5);
    f.restore();
    Td(f, c[3], c[4], a * 3);
    return d;
  }
  function Im(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 95;
    d.height = a * 85;
    if (c == 0) {
      f.translate(a * 7, a * 15);
      f.scale(0.9, 0.9);
      f.save();
      yd(f, a * 0, a * 5, a * 90, a * 60, 10);
      Td(f, b[0]);
      f.globalCompositeOperation = "destination-out";
      Pd(f, a * 25, a * 40, a * 10);
      f.fill();
      Pd(f, a * 65, a * 40, a * 10);
      f.fill();
      f.restore();
      f.save();
      yd(f, 0, 0, a * 90, a * 60, a * 10);
      Td(f, b[1]);
      f.globalCompositeOperation = "destination-out";
      Pd(f, a * 25, a * 40, a * 10);
      f.fill();
      Pd(f, a * 65, a * 40, a * 10);
      f.fill();
      f.restore();
    } else if (c == 1) {
      f.scale(0.8, 0.8);
      f.translate(a * 15, a * 33);
      f.save();
      f.scale(0.56, 0.56);
      f.translate(a * -39, a * -60);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 32.5, a * 50.642852783203125);
      f.bezierCurveTo(a * 83, a * 69.64285278320312, a * 83, a * 69.64285278320312, a * 133.5, a * 88.64285278320312);
      f.bezierCurveTo(a * 93, a * 92.64285278320312, a * 93, a * 92.64285278320312, a * 52.5, a * 96.64285278320312);
      f.bezierCurveTo(a * 30.5, a * 100.64285278320312, a * 36.5, a * 94.64285278320312, a * 32.5, a * 84.64285278320312);
      f.bezierCurveTo(a * 21.5, a * 45.642852783203125, a * 24.5, a * 48.642852783203125, a * 31.5, a * 50.642852783203125);
      f.closePath();
      Td(f, b[1]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 116.5, a * 85.64285278320312);
      f.bezierCurveTo(a * 160.5, a * 67.14285278320312, a * 160.5, a * 67.14285278320312, a * 204.5, a * 48.642852783203125);
      f.bezierCurveTo(a * 220.5, a * 42.642852783203125, a * 208.5, a * 68.64285278320312, a * 205.5, a * 85.64285278320312);
      f.bezierCurveTo(a * 202.5, a * 98.64285278320312, a * 199.5, a * 98.64285278320312, a * 188.5, a * 100.64285278320312);
      f.closePath();
      Td(f, b[1]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 166.5, a * 68.64285278320312);
      f.bezierCurveTo(a * 147.5, a * 72.64285278320312, a * 145.5, a * 73.64285278320312, a * 142.5, a * 62.642852783203125);
      f.bezierCurveTo(a * 121.5, a * 12.642852783203125, a * 122.5, a * 5.642852783203125, a * 117.5, a * 15.642852783203125);
      f.bezierCurveTo(a * 105.5, a * 40.642852783203125, a * 105.5, a * 40.642852783203125, a * 93.5, a * 65.64285278320312);
      f.bezierCurveTo(a * 89.5, a * 74.64285278320312, a * 84.5, a * 72.64285278320312, a * 73.5, a * 74.64285278320312);
      f.bezierCurveTo(a * 98, a * 87.64285278320312, a * 98, a * 87.64285278320312, a * 122.5, a * 100.64285278320312);
      f.closePath();
      Td(f, b[1]);
      f.restore();
      f.save();
      yd(f, 0, a * 15, a * 90, a * 50, a * 10);
      Td(f, b[0]);
      yd(f, 0, a * 10, a * 90, a * 50, a * 10);
      Td(f, b[1]);
      f.globalCompositeOperation = "destination-out";
      Pd(f, a * 25, a * 40, a * 10);
      f.fill();
      Pd(f, a * 65, a * 40, a * 10);
      f.fill();
      f.restore();
    }
    return d;
  }
  function Em(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 89;
    d.height = a * 89;
    f.save();
    f.translate(a * 44.5, a * 44.5);
    wd(f, 6, a * 40, a * 10);
    f.restore();
    Td(f, c[0], c[1], a * 5);
    f.save();
    f.translate(a * 44.5, a * 44.5);
    wd(f, 6, a * 25.11521001172521, a * 10);
    f.restore();
    Td(f, c[2], c[3], a * 5);
    return d;
  }
  function Sm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 100;
    c.height = a * 100;
    d.globalAlpha = 0.5;
    d.fillStyle = b[0];
    d.fillRect(0, 0, c.width, c.height);
    return c;
  }
  function Qm(b, c, d) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    var i = b * 170;
    var a = b * 172;
    var j = i / 2;
    var k = a / 2;
    f.width = i;
    f.height = a;
    g.translate(j, k + b * 7);
    g.globalAlpha = c ? 0.5 : 0;
    Pd(g, 0, 0, b * 60);
    Td(g, d[0]);
    g.globalAlpha = 1;
    g.translate(0, b * -7);
    g.save();
    for (var h = 0; h < 10; h++) {
      g.rotate(Math.PI / 5);
      g.save();
      g.translate(b * 65, 0);
      wd(g, 3, b * 20, b * 4);
      Td(g, d[1], d[2], b * 4);
      g.restore();
    }
    g.restore();
    Pd(g, 0, 0, b * 60);
    Td(g, d[3], d[4], b * 4);
    Pd(g, 0, 0, b * 40);
    Td(g, d[5]);
    Pd(g, 0, 0, b * 25);
    Td(g, d[6], d[7], b * 8);
    return f;
  }
  function _m(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 167;
    d.height = a * 136;
    f.globalAlpha = 0.5;
    f.save();
    f.translate(a * 76.71426391601562, a * 67.85713195800781);
    yd(f, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    f.restore();
    Td(f, c[0]);
    f.globalAlpha = 0.8;
    f.save();
    f.translate(a * 76.71426391601562, a * 67.85713195800781);
    yd(f, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    f.restore();
    Td(f, undefined, c[1], a * 7);
    f.globalAlpha = 0.5;
    f.save();
    f.translate(a * 91.21426391601562, a * 67.35713195800781);
    yd(f, a * -56, a * -55, a * 115, a * 109, a * 15);
    f.restore();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.save();
    f.translate(a * 91.21426391601562, a * 67.35713195800781);
    yd(f, a * -56, a * -55, a * 115, a * 109, a * 15);
    f.restore();
    Td(f, undefined, c[1], a * 7);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 131.21426391601562, a * 70.35713195800781);
    f.bezierCurveTo(a * 133.21426391601562, a * 95.35713195800781, a * 128.21426391601562, a * 109.35713195800781, a * 108.21426391601562, a * 108.35713195800781);
    Td(f, fk, c[1], a * 10);
    return d;
  }
  function Fm() {
    new Date().getTime();
    function b(a) {
      var b = 0;
      for (var c = 0, d = 0; c < a.length; c++) {
        var f = a.charAt(c);
        if (f !== "_" && c !== 5) {
          if (f === "1") {
            b += Math.pow(2, d);
          }
          d++;
        }
      }
      return b;
    }
    ΔᐃⲆᐃΔⵠⲆᐃΔ();
    ⲆⲆ[1026] = [Δᐃ.ΔⵠᐃⲆⵠᐃᐃ, Δᐃ.ΔⲆᐃΔΔⲆⵠ];
    ⲆⲆ[1025] = [];
    ⲆⲆ[1025][0] = [];
    ⲆⲆ[1025][0][b("000_010_000")] = [Δᐃ.ⵠΔⵠᐃⵠ, Δᐃ.ⵠⲆⲆⲆⵠ];
    ⲆⲆ[1025][0][b("000_010_010")] = ⲆⲆ[1025][0][b("000_010_000")];
    ⲆⲆ[1025][0][b("000_011_000")] = ⲆⲆ[1025][0][b("000_010_000")];
    ⲆⲆ[1025][0][b("000_011_010")] = [Δᐃ.ΔⵠⲆⵠᐃ, Δᐃ.ⲆᐃⲆᐃᐃ, Δᐃ.ⵠⲆⲆⲆⵠ, Δᐃ.ⵠΔⵠᐃⵠ, Δᐃ.ⲆΔΔΔⲆᐃΔ, Δᐃ.ᐃᐃΔΔᐃΔⲆ, Δᐃ.ΔⲆⵠΔⲆⵠΔ];
    ⲆⲆ[1025][0][b("000_011_011")] = [Δᐃ.ⲆⲆⵠⵠⵠᐃΔ, Δᐃ.ΔⵠⲆⵠᐃ, Δᐃ.ⲆᐃⲆᐃᐃ, Δᐃ.ⵠⲆⲆⲆⵠ, Δᐃ.ⵠΔⵠᐃⵠ, Δᐃ.ⲆΔΔΔⲆᐃΔ, Δᐃ.ᐃᐃΔΔᐃΔⲆ, Δᐃ.ΔⲆⵠΔⲆⵠΔ, Δᐃ.ᐃⵠⲆΔⵠ];
    ⲆⲆ[1025][0][b("000_110_000")] = [Δᐃ.ΔΔΔΔΔ, Δᐃ.ⵠⲆⲆⲆⵠ];
    ⲆⲆ[1025][0][b("000_110_010")] = [Δᐃ.ⵠⵠⵠⲆⵠ, Δᐃ.ΔΔΔΔΔ, Δᐃ.ΔΔᐃΔΔ, Δᐃ.ⵠⲆⲆⲆⵠ, Δᐃ.ⵠΔⵠᐃⵠ, Δᐃ.ᐃⵠⲆΔⵠ, Δᐃ.ⲆⲆᐃⵠᐃ, Δᐃ.ⲆⵠᐃⲆᐃⲆΔ];
    ⲆⲆ[1025][0][b("000_110_110")] = [Δᐃ.ⵠⵠⵠⲆⵠ, Δᐃ.ⵠᐃⵠⲆⲆⲆⲆ, Δᐃ.ΔⵠⵠⲆⲆⵠΔ, Δᐃ.ΔΔΔΔΔ, Δᐃ.ΔΔᐃΔΔ, Δᐃ.ⵠⲆⲆⲆⵠ, Δᐃ.ᐃⵠⲆΔⵠ, Δᐃ.ⲆⲆᐃⵠᐃ, Δᐃ.ⲆⵠᐃⲆᐃⲆΔ];
    ⲆⲆ[1025][0][b("000_111_000")] = [Δᐃ.ΔΔΔΔΔ, Δᐃ.ΔΔᐃΔΔ, Δᐃ.ⵠⵠΔᐃᐃⵠᐃ, Δᐃ.ⲆⲆΔᐃᐃΔⵠ];
    ⲆⲆ[1025][0][b("000_111_111")] = [Δᐃ.ΔΔΔΔΔ, Δᐃ.ΔⵠⵠⲆⲆⵠΔ, Δᐃ.ⵠⵠⵠⲆⵠ, Δᐃ.ⲆᐃⲆᐃᐃ, Δᐃ.ΔⵠⲆⵠᐃ, Δᐃ.ⲆⲆⵠⵠⵠᐃΔ, Δᐃ.ⲆⲆⵠⲆᐃⲆᐃ];
    ⲆⲆ[1025][0][b("010_010_000")] = [Δᐃ.ⵠⲆⲆⲆⵠ];
    ⲆⲆ[1025][0][b("010_010_010")] = [Δᐃ.ΔⲆⵠᐃΔΔⲆ, Δᐃ.ⵠⲆⲆⲆⵠ, Δᐃ.ⵠΔⵠᐃⵠ];
    ⲆⲆ[1025][0][b("010_011_000")] = [Δᐃ.ΔⲆΔΔⲆ, Δᐃ.ⵠⲆⲆⲆⵠ, Δᐃ.ⵠΔⵠᐃⵠ, Δᐃ.ⲆⲆᐃⵠᐃ];
    ⲆⲆ[1025][0][b("010_110_000")] = [Δᐃ.ΔΔΔΔΔ, Δᐃ.ΔΔᐃΔΔ, Δᐃ.ⵠⲆⲆⲆⵠ, Δᐃ.ⲆⲆᐃⵠᐃ, Δᐃ.ᐃⵠΔⲆⵠ];
    ⲆⲆ[1025][0][b("010_110_110")] = [Δᐃ.ⵠⲆᐃⲆΔ, Δᐃ.ΔⲆΔΔⲆ, Δᐃ.ΔⵠⲆⵠᐃ, Δᐃ.ⲆᐃⲆᐃᐃ, Δᐃ.ⵠⵠⵠⲆⵠ, Δᐃ.ΔⵠⵠⲆⲆⵠΔ, Δᐃ.ΔΔΔΔΔ, Δᐃ.ⲆⲆⵠⲆᐃⲆᐃ, Δᐃ.ⲆᐃᐃⵠⵠᐃⲆ, Δᐃ.ΔⲆⵠᐃΔΔⲆ, Δᐃ.ΔΔᐃΔΔ, Δᐃ.ⵠⵠΔᐃᐃⵠᐃ, Δᐃ.ⲆⲆΔᐃᐃΔⵠ, Δᐃ.ⵠⲆⲆⲆⵠ, Δᐃ.ⵠΔⵠᐃⵠ, Δᐃ.ⲆΔΔΔⲆᐃΔ, Δᐃ.ᐃᐃΔΔᐃΔⲆ, Δᐃ.ΔⲆⵠΔⲆⵠΔ, Δᐃ.ᐃⵠⲆΔⵠ, Δᐃ.ⲆⲆᐃⵠᐃ, Δᐃ.ᐃⵠΔⲆⵠ];
    ⲆⲆ[1025][0][b("010_011_010")] = ⲆⲆ[1025][0][b("010_110_110")];
    ⲆⲆ[1025][0][b("010_011_011")] = ⲆⲆ[1025][0][b("010_110_110")];
    ⲆⲆ[1025][0][b("000_111_011")] = ⲆⲆ[1025][0][b("010_110_110")];
    ⲆⲆ[1025][0][b("010_110_010")] = ⲆⲆ[1025][0][b("010_110_110")];
    ⲆⲆ[1025][0][b("010_111_000")] = ⲆⲆ[1025][0][b("010_110_110")];
    ⲆⲆ[1025][0][b("010_111_010")] = ⲆⲆ[1025][0][b("010_110_110")];
    ⲆⲆ[1025][0][b("010_111_011")] = ⲆⲆ[1025][0][b("010_110_110")];
    ⲆⲆ[1025][0][b("010_111_110")] = ⲆⲆ[1025][0][b("010_110_110")];
    ⲆⲆ[1025][0][b("010_111_111")] = ⲆⲆ[1025][0][b("010_110_110")];
    ⲆⲆ[1025][0][b("000_111_110")] = ⲆⲆ[1025][0][b("010_110_110")];
    ⲆⲆ[1025][0][b("000_111_010")] = ⲆⲆ[1025][0][b("010_110_110")];
    ⲆⲆ[1025][0][b("011_011_000")] = [Δᐃ.ⵠΔⲆⲆⲆⵠᐃ, Δᐃ.ⵠⲆᐃⲆΔ, Δᐃ.ΔⲆΔΔⲆ, Δᐃ.ⵠⲆⲆⲆⵠ, Δᐃ.ⵠΔⵠᐃⵠ, Δᐃ.ⲆⲆᐃⵠᐃ];
    ⲆⲆ[1025][0][b("011_011_010")] = [Δᐃ.ⵠΔⲆⲆⲆⵠᐃ, Δᐃ.ⵠⲆᐃⲆΔ, Δᐃ.ΔⲆΔΔⲆ, Δᐃ.ΔΔΔΔΔ, Δᐃ.ΔΔᐃΔΔ, Δᐃ.ⵠⵠΔᐃᐃⵠᐃ, Δᐃ.ⲆⲆΔᐃᐃΔⵠ, Δᐃ.ⵠⲆⲆⲆⵠ, Δᐃ.ⵠΔⵠᐃⵠ, Δᐃ.ⲆⲆᐃⵠᐃ, Δᐃ.ᐃⵠΔⲆⵠ];
    ⲆⲆ[1025][0][b("011_011_011")] = [Δᐃ.ⲆᐃⲆᐃᐃ, Δᐃ.ΔⵠⲆⵠᐃ, Δᐃ.ⲆⲆⵠⵠⵠᐃΔ, Δᐃ.ΔⲆΔΔⲆ, Δᐃ.ⵠⲆᐃⲆΔ, Δᐃ.ⵠΔⲆⲆⲆⵠᐃ, Δᐃ.ⲆᐃᐃⵠⵠᐃⲆ];
    ⲆⲆ[1025][0][b("011_111_000")] = ⲆⲆ[1025][0][b("011_011_010")];
    ⲆⲆ[1025][0][b("011_111_010")] = [Δᐃ.ⵠΔⲆⲆⲆⵠᐃ, Δᐃ.ⵠⲆᐃⲆΔ, Δᐃ.ΔⲆΔΔⲆ, Δᐃ.ΔⵠⲆⵠᐃ, Δᐃ.ⲆᐃⲆᐃᐃ, Δᐃ.ⵠⵠⵠⲆⵠ, Δᐃ.ΔΔΔΔΔ, Δᐃ.ⲆⲆⵠⲆᐃⲆᐃ, Δᐃ.ⲆᐃᐃⵠⵠᐃⲆ, Δᐃ.ΔⲆⵠᐃΔΔⲆ, Δᐃ.ΔΔᐃΔΔ, Δᐃ.ⵠⵠΔᐃᐃⵠᐃ, Δᐃ.ⲆⲆΔᐃᐃΔⵠ, Δᐃ.ⵠⲆⲆⲆⵠ, Δᐃ.ⵠΔⵠᐃⵠ, Δᐃ.ⲆΔΔΔⲆᐃΔ, Δᐃ.ᐃᐃΔΔᐃΔⲆ, Δᐃ.ΔⲆⵠΔⲆⵠΔ, Δᐃ.ᐃⵠⲆΔⵠ, Δᐃ.ⲆⲆᐃⵠᐃ, Δᐃ.ᐃⵠΔⲆⵠ];
    ⲆⲆ[1025][0][b("011_111_011")] = ⲆⲆ[1025][0][b("011_111_010")];
    ⲆⲆ[1025][0][b("011_111_110")] = ⲆⲆ[1025][0][b("011_111_010")];
    ⲆⲆ[1025][0][b("011_111_111")] = [Δᐃ.ⵠΔⲆⲆⲆⵠᐃ, Δᐃ.ⵠⲆᐃⲆΔ, Δᐃ.ΔⲆΔΔⲆ, Δᐃ.ⲆⲆⵠⵠⵠᐃΔ, Δᐃ.ΔⵠⲆⵠᐃ, Δᐃ.ⲆᐃⲆᐃᐃ, Δᐃ.ⵠⵠⵠⲆⵠ, Δᐃ.ΔⵠⵠⲆⲆⵠΔ, Δᐃ.ΔΔΔΔΔ, Δᐃ.ⲆⲆⵠⲆᐃⲆᐃ, Δᐃ.ⲆᐃᐃⵠⵠᐃⲆ, Δᐃ.ΔⲆⵠᐃΔΔⲆ, Δᐃ.ΔΔᐃΔΔ, Δᐃ.ⵠⵠΔᐃᐃⵠᐃ, Δᐃ.ⲆⲆΔᐃᐃΔⵠ, Δᐃ.ⵠⲆⲆⲆⵠ, Δᐃ.ⵠΔⵠᐃⵠ, Δᐃ.ⲆΔΔΔⲆᐃΔ, Δᐃ.ᐃᐃΔΔᐃΔⲆ, Δᐃ.ΔⲆⵠΔⲆⵠΔ, Δᐃ.ᐃⵠⲆΔⵠ, Δᐃ.ⲆⲆᐃⵠᐃ, Δᐃ.ᐃⵠΔⲆⵠ];
    ⲆⲆ[1025][0][b("110_110_000")] = [Δᐃ.ⲆⵠⵠⲆᐃⲆΔ, Δᐃ.ΔΔΔΔΔ, Δᐃ.ⲆᐃΔⲆᐃΔⲆ, Δᐃ.ΔΔᐃΔΔ, Δᐃ.ⵠⲆⲆⲆⵠ, Δᐃ.ᐃⵠΔⲆⵠ];
    ⲆⲆ[1025][0][b("110_110_010")] = [Δᐃ.ⵠⵠⵠⲆⵠ, Δᐃ.ⲆⵠⵠⲆᐃⲆΔ, Δᐃ.ΔΔΔΔΔ, Δᐃ.ΔⲆⵠᐃΔΔⲆ, Δᐃ.ΔΔᐃΔΔ, Δᐃ.ⵠⲆⲆⲆⵠ, Δᐃ.ᐃⵠⲆΔⵠ, Δᐃ.ᐃⵠΔⲆⵠ];
    ⲆⲆ[1025][0][b("110_110_110")] = [Δᐃ.ⵠⵠⵠⲆⵠ, Δᐃ.ΔⵠⵠⲆⲆⵠΔ, Δᐃ.ⲆⵠⵠⲆᐃⲆΔ, Δᐃ.ΔΔΔΔΔ, Δᐃ.ΔⲆⵠᐃΔΔⲆ, Δᐃ.ΔΔᐃΔΔ, Δᐃ.ⵠⲆⲆⲆⵠ, Δᐃ.ᐃⵠⲆΔⵠ, Δᐃ.ᐃⵠΔⲆⵠ];
    ⲆⲆ[1025][0][b("110_111_000")] = [Δᐃ.ⵠⲆᐃⲆΔ, Δᐃ.ΔⲆΔΔⲆ, Δᐃ.ⲆⵠⵠⲆᐃⲆΔ, Δᐃ.ΔΔΔΔΔ, Δᐃ.ⲆᐃΔⲆᐃΔⲆ, Δᐃ.ⵠΔⲆᐃᐃⵠΔ, Δᐃ.ΔΔᐃΔΔ, Δᐃ.ⵠⵠΔᐃᐃⵠᐃ, Δᐃ.ⲆⲆΔᐃᐃΔⵠ, Δᐃ.ⵠⲆⲆⲆⵠ, Δᐃ.ⵠΔⵠᐃⵠ, Δᐃ.ⲆⲆᐃⵠᐃ, Δᐃ.ᐃⵠΔⲆⵠ];
    ⲆⲆ[1025][0][b("110_111_110")] = [Δᐃ.ⵠⲆᐃⲆΔ, Δᐃ.ΔⲆΔΔⲆ, Δᐃ.ΔⵠⲆⵠᐃ, Δᐃ.ⲆᐃⲆᐃᐃ, Δᐃ.ⵠⵠⵠⲆⵠ, Δᐃ.ΔⵠⵠⲆⲆⵠΔ, Δᐃ.ⲆⵠⵠⲆᐃⲆΔ, Δᐃ.ΔΔΔΔΔ, Δᐃ.ⲆⲆⵠⲆᐃⲆᐃ, Δᐃ.ⵠΔⲆᐃᐃⵠΔ, Δᐃ.ⲆᐃᐃⵠⵠᐃⲆ, Δᐃ.ΔⲆⵠᐃΔΔⲆ, Δᐃ.ΔΔᐃΔΔ, Δᐃ.ⵠⵠΔᐃᐃⵠᐃ, Δᐃ.ⲆⲆΔᐃᐃΔⵠ, Δᐃ.ⵠⲆⲆⲆⵠ, Δᐃ.ⵠΔⵠᐃⵠ, Δᐃ.ⲆΔΔΔⲆᐃΔ, Δᐃ.ᐃᐃΔΔᐃΔⲆ, Δᐃ.ΔⲆⵠΔⲆⵠΔ, Δᐃ.ᐃⵠⲆΔⵠ, Δᐃ.ⲆⲆᐃⵠᐃ, Δᐃ.ᐃⵠΔⲆⵠ];
    ⲆⲆ[1025][0][b("110_111_111")] = ⲆⲆ[1025][0][b("110_111_110")];
    ⲆⲆ[1025][0][b("110_111_011")] = ⲆⲆ[1025][0][b("110_111_110")];
    ⲆⲆ[1025][0][b("110_111_010")] = ⲆⲆ[1025][0][b("110_111_110")];
    ⲆⲆ[1025][0][b("111_111_110")] = [Δᐃ.ᐃⵠΔⲆⵠ, Δᐃ.ⲆⲆᐃⵠᐃ, Δᐃ.ᐃⵠⲆΔⵠ, Δᐃ.ΔⲆⵠΔⲆⵠΔ, Δᐃ.ᐃᐃΔΔᐃΔⲆ, Δᐃ.ⲆΔΔΔⲆᐃΔ, Δᐃ.ⵠΔⵠᐃⵠ, Δᐃ.ⵠⲆⲆⲆⵠ, Δᐃ.ⲆⲆΔᐃᐃΔⵠ, Δᐃ.ⵠⵠΔᐃᐃⵠᐃ, Δᐃ.ΔΔᐃΔΔ, Δᐃ.ΔⲆⵠᐃΔΔⲆ, Δᐃ.ⲆᐃᐃⵠⵠᐃⲆ, Δᐃ.ⵠΔⲆᐃᐃⵠΔ, Δᐃ.ⲆⲆⵠⲆᐃⲆᐃ, Δᐃ.ΔΔΔΔΔ, Δᐃ.ⲆⵠⵠⲆᐃⲆΔ, Δᐃ.ⵠⵠⵠⲆⵠ, Δᐃ.ⲆᐃⲆᐃᐃ, Δᐃ.ΔⵠⲆⵠᐃ, Δᐃ.ΔⲆΔΔⲆ, Δᐃ.ⵠⲆᐃⲆΔ, Δᐃ.ⵠΔⲆⲆⲆⵠᐃ];
    ⲆⲆ[1025][0][b("111_111_011")] = ⲆⲆ[1025][0][b("111_111_110")];
    ⲆⲆ[1025][0][b("111_111_000")] = [Δᐃ.ⲆᐃΔⲆᐃΔⲆ, Δᐃ.ΔΔΔΔΔ, Δᐃ.ⲆⵠⵠⲆᐃⲆΔ, Δᐃ.ΔⲆΔΔⲆ, Δᐃ.ⵠⲆᐃⲆΔ, Δᐃ.ⵠΔⲆⲆⲆⵠᐃ, Δᐃ.ⵠΔⲆᐃᐃⵠΔ];
    ⲆⲆ[1025][0][b("111_111_111")] = [Δᐃ.ⵠΔⲆⲆⲆⵠᐃ, Δᐃ.ⵠⲆᐃⲆΔ, Δᐃ.ΔⲆΔΔⲆ, Δᐃ.ⲆⲆⵠⵠⵠᐃΔ, Δᐃ.ΔⵠⲆⵠᐃ, Δᐃ.ⲆᐃⲆᐃᐃ, Δᐃ.ⵠⵠⵠⲆⵠ, Δᐃ.ΔⵠⵠⲆⲆⵠΔ, Δᐃ.ⲆⵠⵠⲆᐃⲆΔ, Δᐃ.ΔΔΔΔΔ, Δᐃ.ⲆⲆⵠⲆᐃⲆᐃ, Δᐃ.ⲆᐃᐃⵠⵠᐃⲆ, Δᐃ.ΔⲆⵠᐃΔΔⲆ, Δᐃ.ΔΔᐃΔΔ, Δᐃ.ⵠⵠΔᐃᐃⵠᐃ, Δᐃ.ⲆⲆΔᐃᐃΔⵠ, Δᐃ.ⵠⲆⲆⲆⵠ, Δᐃ.ⵠΔⵠᐃⵠ, Δᐃ.ⲆΔΔΔⲆᐃΔ, Δᐃ.ᐃᐃΔΔᐃΔⲆ, Δᐃ.ΔⲆⵠΔⲆⵠΔ, Δᐃ.ᐃⵠⲆΔⵠ, Δᐃ.ⲆⲆᐃⵠᐃ, Δᐃ.ᐃⵠΔⲆⵠ];
    ⲆⲆ[1025][0][b("111_111_010")] = ⲆⲆ[1025][0][b("111_111_110")];
    ⲆⲆ[1025][1] = [];
    ⲆⲆ[1025][1][b("000_010_000")] = [Δᐃ.ⵠⲆΔⵠⵠ, Δᐃ.ᐃⵠⵠΔᐃ];
    ⲆⲆ[1025][1][b("000_010_010")] = ⲆⲆ[1025][1][b("000_010_000")];
    ⲆⲆ[1025][1][b("000_011_000")] = ⲆⲆ[1025][1][b("000_010_000")];
    ⲆⲆ[1025][1][b("000_011_010")] = [Δᐃ.ⲆΔΔᐃᐃ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ᐃⵠⵠΔᐃ, Δᐃ.ⵠⲆΔⵠⵠ, Δᐃ.ΔᐃᐃⵠᐃⲆᐃ, Δᐃ.ΔΔΔᐃΔⵠᐃ, Δᐃ.ΔⲆᐃⵠᐃⲆΔ];
    ⲆⲆ[1025][1][b("000_011_011")] = [Δᐃ.ᐃΔⲆⵠⲆⵠΔ, Δᐃ.ⲆΔΔᐃᐃ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ᐃⵠⵠΔᐃ, Δᐃ.ⵠⲆΔⵠⵠ, Δᐃ.ΔᐃᐃⵠᐃⲆᐃ, Δᐃ.ΔΔΔᐃΔⵠᐃ, Δᐃ.ΔⲆᐃⵠᐃⲆΔ, Δᐃ.ᐃΔΔΔⲆ];
    ⲆⲆ[1025][1][b("000_110_000")] = [Δᐃ.ⲆⵠΔΔᐃ, Δᐃ.ᐃⵠⵠΔᐃ];
    ⲆⲆ[1025][1][b("000_110_010")] = [Δᐃ.ⲆᐃⵠⵠΔ, Δᐃ.ⲆⵠΔΔᐃ, Δᐃ.ⵠΔᐃⵠⲆ, Δᐃ.ᐃⵠⵠΔᐃ, Δᐃ.ⵠⲆΔⵠⵠ, Δᐃ.ᐃΔΔΔⲆ, Δᐃ.ᐃᐃΔΔΔ, Δᐃ.ᐃⵠΔⲆᐃⵠⲆ];
    ⲆⲆ[1025][1][b("000_110_110")] = [Δᐃ.ⲆᐃⵠⵠΔ, Δᐃ.ⲆⲆⲆⵠⲆΔⲆ, Δᐃ.ΔⵠΔᐃⲆᐃⲆ, Δᐃ.ⲆⵠΔΔᐃ, Δᐃ.ⵠΔᐃⵠⲆ, Δᐃ.ᐃⵠⵠΔᐃ, Δᐃ.ᐃΔΔΔⲆ, Δᐃ.ᐃᐃΔΔΔ, Δᐃ.ᐃⵠΔⲆᐃⵠⲆ];
    ⲆⲆ[1025][1][b("000_111_000")] = [Δᐃ.ⲆⵠΔΔᐃ, Δᐃ.ⵠΔᐃⵠⲆ, Δᐃ.ΔᐃᐃⲆⲆΔⵠ, Δᐃ.ᐃⵠᐃⲆⲆⵠΔ];
    ⲆⲆ[1025][1][b("000_111_111")] = [Δᐃ.ⲆⵠΔΔᐃ, Δᐃ.ΔⵠΔᐃⲆᐃⲆ, Δᐃ.ⲆᐃⵠⵠΔ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ⲆΔΔᐃᐃ, Δᐃ.ᐃΔⲆⵠⲆⵠΔ, Δᐃ.ΔⲆⵠⲆⵠⵠᐃ];
    ⲆⲆ[1025][1][b("010_010_000")] = [Δᐃ.ᐃⵠⵠΔᐃ];
    ⲆⲆ[1025][1][b("010_010_010")] = [Δᐃ.ⲆⲆᐃⲆⲆᐃΔ, Δᐃ.ᐃⵠⵠΔᐃ, Δᐃ.ⵠⲆΔⵠⵠ];
    ⲆⲆ[1025][1][b("010_011_000")] = [Δᐃ.ⵠⲆⵠⲆΔ, Δᐃ.ᐃⵠⵠΔᐃ, Δᐃ.ⵠⲆΔⵠⵠ, Δᐃ.ᐃᐃΔΔΔ];
    ⲆⲆ[1025][1][b("010_110_000")] = [Δᐃ.ⲆⵠΔΔᐃ, Δᐃ.ⵠΔᐃⵠⲆ, Δᐃ.ᐃⵠⵠΔᐃ, Δᐃ.ᐃᐃΔΔΔ, Δᐃ.ΔᐃᐃⲆΔ];
    ⲆⲆ[1025][1][b("010_110_110")] = [Δᐃ.ᐃΔΔⲆΔ, Δᐃ.ⵠⲆⵠⲆΔ, Δᐃ.ⲆΔΔᐃᐃ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ⲆᐃⵠⵠΔ, Δᐃ.ΔⵠΔᐃⲆᐃⲆ, Δᐃ.ⲆⵠΔΔᐃ, Δᐃ.ΔⲆⵠⲆⵠⵠᐃ, Δᐃ.ᐃᐃⵠⲆⵠᐃⲆ, Δᐃ.ⲆⲆᐃⲆⲆᐃΔ, Δᐃ.ⵠΔᐃⵠⲆ, Δᐃ.ΔᐃᐃⲆⲆΔⵠ, Δᐃ.ᐃⵠᐃⲆⲆⵠΔ, Δᐃ.ᐃⵠⵠΔᐃ, Δᐃ.ⵠⲆΔⵠⵠ, Δᐃ.ΔᐃᐃⵠᐃⲆᐃ, Δᐃ.ΔΔΔᐃΔⵠᐃ, Δᐃ.ΔⲆᐃⵠᐃⲆΔ, Δᐃ.ᐃΔΔΔⲆ, Δᐃ.ᐃᐃΔΔΔ, Δᐃ.ΔᐃᐃⲆΔ];
    ⲆⲆ[1025][1][b("010_011_010")] = ⲆⲆ[1025][1][b("010_110_110")];
    ⲆⲆ[1025][1][b("010_011_011")] = ⲆⲆ[1025][1][b("010_110_110")];
    ⲆⲆ[1025][1][b("000_111_011")] = ⲆⲆ[1025][1][b("010_110_110")];
    ⲆⲆ[1025][1][b("010_110_010")] = ⲆⲆ[1025][1][b("010_110_110")];
    ⲆⲆ[1025][1][b("010_111_000")] = ⲆⲆ[1025][1][b("010_110_110")];
    ⲆⲆ[1025][1][b("010_111_010")] = ⲆⲆ[1025][1][b("010_110_110")];
    ⲆⲆ[1025][1][b("010_111_011")] = ⲆⲆ[1025][1][b("010_110_110")];
    ⲆⲆ[1025][1][b("010_111_110")] = ⲆⲆ[1025][1][b("010_110_110")];
    ⲆⲆ[1025][1][b("010_111_111")] = ⲆⲆ[1025][1][b("010_110_110")];
    ⲆⲆ[1025][1][b("000_111_110")] = ⲆⲆ[1025][1][b("010_110_110")];
    ⲆⲆ[1025][1][b("000_111_010")] = ⲆⲆ[1025][1][b("010_110_110")];
    ⲆⲆ[1025][1][b("011_011_000")] = [Δᐃ.ΔⵠⲆᐃⲆⵠΔ, Δᐃ.ᐃΔΔⲆΔ, Δᐃ.ⵠⲆⵠⲆΔ, Δᐃ.ᐃⵠⵠΔᐃ, Δᐃ.ⵠⲆΔⵠⵠ, Δᐃ.ᐃᐃΔΔΔ];
    ⲆⲆ[1025][1][b("011_011_010")] = [Δᐃ.ΔⵠⲆᐃⲆⵠΔ, Δᐃ.ᐃΔΔⲆΔ, Δᐃ.ⵠⲆⵠⲆΔ, Δᐃ.ⲆⵠΔΔᐃ, Δᐃ.ⵠΔᐃⵠⲆ, Δᐃ.ΔᐃᐃⲆⲆΔⵠ, Δᐃ.ᐃⵠᐃⲆⲆⵠΔ, Δᐃ.ᐃⵠⵠΔᐃ, Δᐃ.ⵠⲆΔⵠⵠ, Δᐃ.ᐃᐃΔΔΔ, Δᐃ.ΔᐃᐃⲆΔ];
    ⲆⲆ[1025][1][b("011_011_011")] = [Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ⲆΔΔᐃᐃ, Δᐃ.ᐃΔⲆⵠⲆⵠΔ, Δᐃ.ⵠⲆⵠⲆΔ, Δᐃ.ᐃΔΔⲆΔ, Δᐃ.ΔⵠⲆᐃⲆⵠΔ, Δᐃ.ᐃᐃⵠⲆⵠᐃⲆ];
    ⲆⲆ[1025][1][b("011_111_000")] = ⲆⲆ[1025][1][b("011_011_010")];
    ⲆⲆ[1025][1][b("011_111_010")] = [Δᐃ.ΔⵠⲆᐃⲆⵠΔ, Δᐃ.ᐃΔΔⲆΔ, Δᐃ.ⵠⲆⵠⲆΔ, Δᐃ.ⲆΔΔᐃᐃ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ⲆᐃⵠⵠΔ, Δᐃ.ⲆⵠΔΔᐃ, Δᐃ.ΔⲆⵠⲆⵠⵠᐃ, Δᐃ.ᐃᐃⵠⲆⵠᐃⲆ, Δᐃ.ⲆⲆᐃⲆⲆᐃΔ, Δᐃ.ⵠΔᐃⵠⲆ, Δᐃ.ΔᐃᐃⲆⲆΔⵠ, Δᐃ.ᐃⵠᐃⲆⲆⵠΔ, Δᐃ.ᐃⵠⵠΔᐃ, Δᐃ.ⵠⲆΔⵠⵠ, Δᐃ.ΔᐃᐃⵠᐃⲆᐃ, Δᐃ.ΔΔΔᐃΔⵠᐃ, Δᐃ.ΔⲆᐃⵠᐃⲆΔ, Δᐃ.ᐃΔΔΔⲆ, Δᐃ.ᐃᐃΔΔΔ, Δᐃ.ΔᐃᐃⲆΔ];
    ⲆⲆ[1025][1][b("011_111_011")] = ⲆⲆ[1025][1][b("011_111_010")];
    ⲆⲆ[1025][1][b("011_111_110")] = ⲆⲆ[1025][1][b("011_111_010")];
    ⲆⲆ[1025][1][b("011_111_111")] = [Δᐃ.ΔⵠⲆᐃⲆⵠΔ, Δᐃ.ᐃΔΔⲆΔ, Δᐃ.ⵠⲆⵠⲆΔ, Δᐃ.ᐃΔⲆⵠⲆⵠΔ, Δᐃ.ⲆΔΔᐃᐃ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ⲆᐃⵠⵠΔ, Δᐃ.ΔⵠΔᐃⲆᐃⲆ, Δᐃ.ⲆⵠΔΔᐃ, Δᐃ.ΔⲆⵠⲆⵠⵠᐃ, Δᐃ.ᐃᐃⵠⲆⵠᐃⲆ, Δᐃ.ⲆⲆᐃⲆⲆᐃΔ, Δᐃ.ⵠΔᐃⵠⲆ, Δᐃ.ΔᐃᐃⲆⲆΔⵠ, Δᐃ.ᐃⵠᐃⲆⲆⵠΔ, Δᐃ.ᐃⵠⵠΔᐃ, Δᐃ.ⵠⲆΔⵠⵠ, Δᐃ.ΔᐃᐃⵠᐃⲆᐃ, Δᐃ.ΔΔΔᐃΔⵠᐃ, Δᐃ.ΔⲆᐃⵠᐃⲆΔ, Δᐃ.ᐃΔΔΔⲆ, Δᐃ.ᐃᐃΔΔΔ, Δᐃ.ΔᐃᐃⲆΔ];
    ⲆⲆ[1025][1][b("110_110_000")] = [Δᐃ.ⲆᐃΔⵠΔⲆⲆ, Δᐃ.ⲆⵠΔΔᐃ, Δᐃ.ᐃΔᐃⵠᐃΔⵠ, Δᐃ.ⵠΔᐃⵠⲆ, Δᐃ.ᐃⵠⵠΔᐃ, Δᐃ.ΔᐃᐃⲆΔ];
    ⲆⲆ[1025][1][b("110_110_010")] = [Δᐃ.ⲆᐃⵠⵠΔ, Δᐃ.ⲆᐃΔⵠΔⲆⲆ, Δᐃ.ⲆⵠΔΔᐃ, Δᐃ.ⲆⲆᐃⲆⲆᐃΔ, Δᐃ.ⵠΔᐃⵠⲆ, Δᐃ.ᐃⵠⵠΔᐃ, Δᐃ.ᐃΔΔΔⲆ, Δᐃ.ΔᐃᐃⲆΔ];
    ⲆⲆ[1025][1][b("110_110_110")] = [Δᐃ.ⲆᐃⵠⵠΔ, Δᐃ.ΔⵠΔᐃⲆᐃⲆ, Δᐃ.ⲆᐃΔⵠΔⲆⲆ, Δᐃ.ⲆⵠΔΔᐃ, Δᐃ.ⲆⲆᐃⲆⲆᐃΔ, Δᐃ.ⵠΔᐃⵠⲆ, Δᐃ.ᐃⵠⵠΔᐃ, Δᐃ.ᐃΔΔΔⲆ, Δᐃ.ΔᐃᐃⲆΔ];
    ⲆⲆ[1025][1][b("110_111_000")] = [Δᐃ.ᐃΔΔⲆΔ, Δᐃ.ⵠⲆⵠⲆΔ, Δᐃ.ⲆᐃΔⵠΔⲆⲆ, Δᐃ.ⲆⵠΔΔᐃ, Δᐃ.ᐃΔᐃⵠᐃΔⵠ, Δᐃ.ⵠᐃΔᐃΔⵠᐃ, Δᐃ.ⵠΔᐃⵠⲆ, Δᐃ.ΔᐃᐃⲆⲆΔⵠ, Δᐃ.ᐃⵠᐃⲆⲆⵠΔ, Δᐃ.ᐃⵠⵠΔᐃ, Δᐃ.ⵠⲆΔⵠⵠ, Δᐃ.ᐃᐃΔΔΔ, Δᐃ.ΔᐃᐃⲆΔ];
    ⲆⲆ[1025][1][b("110_111_110")] = [Δᐃ.ᐃΔΔⲆΔ, Δᐃ.ⵠⲆⵠⲆΔ, Δᐃ.ⲆΔΔᐃᐃ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ⲆᐃⵠⵠΔ, Δᐃ.ΔⵠΔᐃⲆᐃⲆ, Δᐃ.ⲆᐃΔⵠΔⲆⲆ, Δᐃ.ⲆⵠΔΔᐃ, Δᐃ.ΔⲆⵠⲆⵠⵠᐃ, Δᐃ.ⵠᐃΔᐃΔⵠᐃ, Δᐃ.ᐃᐃⵠⲆⵠᐃⲆ, Δᐃ.ⲆⲆᐃⲆⲆᐃΔ, Δᐃ.ⵠΔᐃⵠⲆ, Δᐃ.ΔᐃᐃⲆⲆΔⵠ, Δᐃ.ᐃⵠᐃⲆⲆⵠΔ, Δᐃ.ᐃⵠⵠΔᐃ, Δᐃ.ⵠⲆΔⵠⵠ, Δᐃ.ΔᐃᐃⵠᐃⲆᐃ, Δᐃ.ΔΔΔᐃΔⵠᐃ, Δᐃ.ΔⲆᐃⵠᐃⲆΔ, Δᐃ.ᐃΔΔΔⲆ, Δᐃ.ᐃᐃΔΔΔ, Δᐃ.ΔᐃᐃⲆΔ];
    ⲆⲆ[1025][1][b("110_111_111")] = ⲆⲆ[1025][1][b("110_111_110")];
    ⲆⲆ[1025][1][b("110_111_011")] = ⲆⲆ[1025][1][b("110_111_110")];
    ⲆⲆ[1025][1][b("110_111_010")] = ⲆⲆ[1025][1][b("110_111_110")];
    ⲆⲆ[1025][1][b("111_111_110")] = [Δᐃ.ΔᐃᐃⲆΔ, Δᐃ.ᐃᐃΔΔΔ, Δᐃ.ᐃΔΔΔⲆ, Δᐃ.ΔⲆᐃⵠᐃⲆΔ, Δᐃ.ΔΔΔᐃΔⵠᐃ, Δᐃ.ΔᐃᐃⵠᐃⲆᐃ, Δᐃ.ⵠⲆΔⵠⵠ, Δᐃ.ᐃⵠⵠΔᐃ, Δᐃ.ᐃⵠᐃⲆⲆⵠΔ, Δᐃ.ΔᐃᐃⲆⲆΔⵠ, Δᐃ.ⵠΔᐃⵠⲆ, Δᐃ.ⲆⲆᐃⲆⲆᐃΔ, Δᐃ.ᐃᐃⵠⲆⵠᐃⲆ, Δᐃ.ⵠᐃΔᐃΔⵠᐃ, Δᐃ.ΔⲆⵠⲆⵠⵠᐃ, Δᐃ.ⲆⵠΔΔᐃ, Δᐃ.ⲆᐃΔⵠΔⲆⲆ, Δᐃ.ⲆᐃⵠⵠΔ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ⲆΔΔᐃᐃ, Δᐃ.ⵠⲆⵠⲆΔ, Δᐃ.ᐃΔΔⲆΔ, Δᐃ.ΔⵠⲆᐃⲆⵠΔ];
    ⲆⲆ[1025][1][b("111_111_011")] = ⲆⲆ[1025][1][b("111_111_110")];
    ⲆⲆ[1025][1][b("111_111_000")] = [Δᐃ.ᐃΔᐃⵠᐃΔⵠ, Δᐃ.ⲆⵠΔΔᐃ, Δᐃ.ⲆᐃΔⵠΔⲆⲆ, Δᐃ.ⵠⲆⵠⲆΔ, Δᐃ.ᐃΔΔⲆΔ, Δᐃ.ΔⵠⲆᐃⲆⵠΔ, Δᐃ.ⵠᐃΔᐃΔⵠᐃ];
    ⲆⲆ[1025][1][b("111_111_111")] = [Δᐃ.ΔⵠⲆᐃⲆⵠΔ, Δᐃ.ᐃΔΔⲆΔ, Δᐃ.ⵠⲆⵠⲆΔ, Δᐃ.ᐃΔⲆⵠⲆⵠΔ, Δᐃ.ⲆΔΔᐃᐃ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ⲆᐃⵠⵠΔ, Δᐃ.ΔⵠΔᐃⲆᐃⲆ, Δᐃ.ⲆᐃΔⵠΔⲆⲆ, Δᐃ.ⲆⵠΔΔᐃ, Δᐃ.ΔⲆⵠⲆⵠⵠᐃ, Δᐃ.ᐃᐃⵠⲆⵠᐃⲆ, Δᐃ.ⲆⲆᐃⲆⲆᐃΔ, Δᐃ.ⵠΔᐃⵠⲆ, Δᐃ.ΔᐃᐃⲆⲆΔⵠ, Δᐃ.ᐃⵠᐃⲆⲆⵠΔ, Δᐃ.ᐃⵠⵠΔᐃ, Δᐃ.ⵠⲆΔⵠⵠ, Δᐃ.ΔᐃᐃⵠᐃⲆᐃ, Δᐃ.ΔΔΔᐃΔⵠᐃ, Δᐃ.ΔⲆᐃⵠᐃⲆΔ, Δᐃ.ᐃΔΔΔⲆ, Δᐃ.ᐃᐃΔΔΔ, Δᐃ.ΔᐃᐃⲆΔ];
    ⲆⲆ[1025][1][b("111_111_010")] = ⲆⲆ[1025][1][b("111_111_110")];
    ⲆⲆ[1024] = [];
    ⲆⲆ[1024][0] = [];
    ⲆⲆ[1024][0][b("000_010_000")] = Δᐃ.ᐃⵠⲆⵠΔᐃⵠ;
    ⲆⲆ[1024][0][b("000_010_010")] = Δᐃ.ΔΔΔⲆⵠⲆⵠ;
    ⲆⲆ[1024][0][b("000_011_000")] = Δᐃ.ᐃⵠᐃΔⵠᐃᐃ;
    ⲆⲆ[1024][0][b("000_011_010")] = Δᐃ.ᐃⲆⲆⵠΔΔⲆ;
    ⲆⲆ[1024][0][b("000_011_011")] = Δᐃ.ⵠⲆⲆⵠᐃᐃⵠ;
    ⲆⲆ[1024][0][b("000_110_000")] = Δᐃ.ᐃΔⲆⵠⲆΔᐃ;
    ⲆⲆ[1024][0][b("000_110_010")] = Δᐃ.ᐃⲆⲆⲆᐃΔᐃ;
    ⲆⲆ[1024][0][b("000_110_110")] = Δᐃ.ᐃⲆᐃΔⵠΔᐃ;
    ⲆⲆ[1024][0][b("000_111_000")] = Δᐃ.ⵠⲆⲆᐃⵠⵠΔ;
    ⲆⲆ[1024][0][b("000_111_010")] = Δᐃ.ⲆΔⲆⲆᐃⵠⵠ;
    ⲆⲆ[1024][0][b("000_111_011")] = Δᐃ.ⲆⲆᐃΔⵠΔΔ;
    ⲆⲆ[1024][0][b("000_111_110")] = Δᐃ.ᐃΔⲆⲆᐃⵠΔ;
    ⲆⲆ[1024][0][b("000_111_111")] = Δᐃ.ᐃᐃᐃᐃᐃⵠΔ;
    ⲆⲆ[1024][0][b("010_010_000")] = Δᐃ.ΔⲆⲆᐃⲆᐃⵠ;
    ⲆⲆ[1024][0][b("010_010_010")] = Δᐃ.ΔᐃᐃΔᐃⵠΔ;
    ⲆⲆ[1024][0][b("010_011_000")] = Δᐃ.ⵠᐃⲆⲆⵠⲆⵠ;
    ⲆⲆ[1024][0][b("010_011_010")] = Δᐃ.ⵠΔᐃΔⵠⲆΔ;
    ⲆⲆ[1024][0][b("010_011_011")] = Δᐃ.ⵠⲆⵠⵠΔⵠΔ;
    ⲆⲆ[1024][0][b("010_110_000")] = Δᐃ.ΔᐃᐃⲆⵠⲆⲆ;
    ⲆⲆ[1024][0][b("010_110_010")] = Δᐃ.ᐃᐃⵠⲆⲆΔⵠ;
    ⲆⲆ[1024][0][b("010_110_110")] = Δᐃ.ΔⲆⲆⲆᐃⲆⵠ;
    ⲆⲆ[1024][0][b("010_111_000")] = Δᐃ.ΔΔⲆΔΔΔⲆ;
    ⲆⲆ[1024][0][b("010_111_010")] = Δᐃ.ⵠᐃⲆᐃⵠΔᐃ;
    ⲆⲆ[1024][0][b("010_111_011")] = Δᐃ.ᐃᐃΔⲆⵠⲆⵠ;
    ⲆⲆ[1024][0][b("010_111_110")] = Δᐃ.ΔⲆΔΔⵠⲆΔ;
    ⲆⲆ[1024][0][b("010_111_111")] = Δᐃ.ⲆΔⲆΔⵠΔⵠ;
    ⲆⲆ[1024][0][b("011_011_000")] = Δᐃ.ⲆᐃⲆᐃⲆⵠⲆ;
    ⲆⲆ[1024][0][b("011_011_010")] = Δᐃ.ⵠΔⲆⵠⵠᐃΔ;
    ⲆⲆ[1024][0][b("011_011_011")] = Δᐃ.ⲆᐃΔΔⵠΔⲆ;
    ⲆⲆ[1024][0][b("011_111_000")] = Δᐃ.ᐃⲆⲆⵠⲆΔΔ;
    ⲆⲆ[1024][0][b("011_111_010")] = Δᐃ.ΔΔᐃΔΔⲆΔ;
    ⲆⲆ[1024][0][b("011_111_011")] = Δᐃ.ⵠΔΔΔΔⵠᐃ;
    ⲆⲆ[1024][0][b("011_111_110")] = Δᐃ.ⵠⵠⵠᐃΔΔⲆ;
    ⲆⲆ[1024][0][b("011_111_111")] = Δᐃ.ⲆᐃⵠᐃⵠⲆᐃ;
    ⲆⲆ[1024][0][b("110_110_000")] = Δᐃ.ⲆⲆΔᐃⵠΔⲆ;
    ⲆⲆ[1024][0][b("110_110_010")] = Δᐃ.ΔⲆⲆᐃᐃᐃⲆ;
    ⲆⲆ[1024][0][b("110_110_110")] = Δᐃ.ⵠΔᐃⲆⲆᐃΔ;
    ⲆⲆ[1024][0][b("110_111_000")] = Δᐃ.ⵠⲆᐃᐃᐃᐃⲆ;
    ⲆⲆ[1024][0][b("110_111_010")] = Δᐃ.ⲆⵠⵠⵠⵠᐃΔ;
    ⲆⲆ[1024][0][b("110_111_011")] = Δᐃ.ΔᐃⲆⵠⲆᐃΔ;
    ⲆⲆ[1024][0][b("110_111_110")] = Δᐃ.ΔᐃᐃᐃⵠⵠΔ;
    ⲆⲆ[1024][0][b("110_111_111")] = Δᐃ.ΔⲆⵠⵠΔⲆᐃ;
    ⲆⲆ[1024][0][b("111_111_011")] = Δᐃ.ᐃⲆⲆΔᐃΔⲆ;
    ⲆⲆ[1024][0][b("111_111_110")] = Δᐃ.ⲆⵠΔⵠⲆⲆⲆ;
    ⲆⲆ[1024][0][b("111_111_011")] = Δᐃ.ᐃⲆⲆΔᐃΔⲆ;
    ⲆⲆ[1024][0][b("111_111_000")] = Δᐃ.ⲆΔᐃⵠⵠᐃΔ;
    ⲆⲆ[1024][0][b("111_111_111")] = Δᐃ.ᐃⵠᐃⵠⲆⵠⲆ;
    ⲆⲆ[1024][0][b("111_111_010")] = Δᐃ.ΔΔᐃⵠⲆᐃΔ;
    ⲆⲆ[1024][1] = [];
    ⲆⲆ[1024][1][b("000_010_000")] = Δᐃ.ⲆΔⲆΔᐃⵠⵠ;
    ⲆⲆ[1024][1][b("000_010_010")] = Δᐃ.ᐃⵠⲆΔⵠⵠΔ;
    ⲆⲆ[1024][1][b("000_011_000")] = Δᐃ.ⲆΔⲆⵠΔᐃΔ;
    ⲆⲆ[1024][1][b("000_011_010")] = Δᐃ.ΔΔⵠᐃᐃΔⵠ;
    ⲆⲆ[1024][1][b("000_011_011")] = Δᐃ.ⲆⵠᐃⲆⵠΔᐃ;
    ⲆⲆ[1024][1][b("000_110_000")] = Δᐃ.ΔⵠΔⲆⲆⲆⲆ;
    ⲆⲆ[1024][1][b("000_110_010")] = Δᐃ.ⵠᐃᐃⲆⲆᐃⵠ;
    ⲆⲆ[1024][1][b("000_110_110")] = Δᐃ.ⲆᐃᐃⵠΔⵠᐃ;
    ⲆⲆ[1024][1][b("000_111_000")] = Δᐃ.ᐃⵠΔⵠⵠⲆⲆ;
    ⲆⲆ[1024][1][b("000_111_010")] = Δᐃ.ᐃⵠⵠⲆΔᐃⵠ;
    ⲆⲆ[1024][1][b("000_111_011")] = Δᐃ.ΔⲆⲆᐃΔⵠΔ;
    ⲆⲆ[1024][1][b("000_111_110")] = Δᐃ.ⵠⲆⵠᐃΔΔΔ;
    ⲆⲆ[1024][1][b("000_111_111")] = Δᐃ.ΔΔΔⵠᐃⲆᐃ;
    ⲆⲆ[1024][1][b("010_010_000")] = Δᐃ.ᐃⲆΔⵠᐃⲆΔ;
    ⲆⲆ[1024][1][b("010_010_010")] = Δᐃ.ᐃⲆΔΔᐃᐃᐃ;
    ⲆⲆ[1024][1][b("010_011_000")] = Δᐃ.ⵠᐃΔⲆⵠᐃⲆ;
    ⲆⲆ[1024][1][b("010_011_010")] = Δᐃ.ⲆⵠᐃΔⵠⵠᐃ;
    ⲆⲆ[1024][1][b("010_011_011")] = Δᐃ.ᐃⲆᐃⲆⲆⲆΔ;
    ⲆⲆ[1024][1][b("010_110_000")] = Δᐃ.ⲆΔⵠᐃⵠⲆⵠ;
    ⲆⲆ[1024][1][b("010_110_010")] = Δᐃ.ᐃⵠΔⲆⲆΔᐃ;
    ⲆⲆ[1024][1][b("010_110_110")] = Δᐃ.ᐃⲆᐃⵠΔΔⵠ;
    ⲆⲆ[1024][1][b("010_111_000")] = Δᐃ.ⵠᐃΔΔⵠⵠⲆ;
    ⲆⲆ[1024][1][b("010_111_010")] = Δᐃ.ΔⵠΔΔΔⲆⵠ;
    ⲆⲆ[1024][1][b("010_111_011")] = Δᐃ.ⲆΔⵠᐃⵠᐃⵠ;
    ⲆⲆ[1024][1][b("010_111_110")] = Δᐃ.ΔⲆⲆᐃⲆⲆⲆ;
    ⲆⲆ[1024][1][b("010_111_111")] = Δᐃ.ᐃⵠᐃⲆΔⵠⲆ;
    ⲆⲆ[1024][1][b("011_011_000")] = Δᐃ.ⲆⵠΔΔᐃⲆΔ;
    ⲆⲆ[1024][1][b("011_011_010")] = Δᐃ.ᐃⵠⲆⲆⵠᐃᐃ;
    ⲆⲆ[1024][1][b("011_011_011")] = Δᐃ.ΔⵠⵠᐃⵠΔᐃ;
    ⲆⲆ[1024][1][b("011_111_000")] = Δᐃ.ⵠΔⲆⲆⵠⲆⲆ;
    ⲆⲆ[1024][1][b("011_111_010")] = Δᐃ.ⵠⵠΔᐃⵠΔⵠ;
    ⲆⲆ[1024][1][b("011_111_011")] = Δᐃ.ᐃᐃⲆⵠⵠᐃΔ;
    ⲆⲆ[1024][1][b("011_111_110")] = Δᐃ.ⵠⲆⲆⲆᐃᐃⵠ;
    ⲆⲆ[1024][1][b("011_111_111")] = Δᐃ.ⲆⵠⵠⲆⵠⲆᐃ;
    ⲆⲆ[1024][1][b("110_110_000")] = Δᐃ.ⵠΔⵠⵠΔⲆΔ;
    ⲆⲆ[1024][1][b("110_110_010")] = Δᐃ.ᐃΔΔⵠΔᐃⲆ;
    ⲆⲆ[1024][1][b("110_110_110")] = Δᐃ.ⵠⲆᐃᐃⵠⲆⵠ;
    ⲆⲆ[1024][1][b("110_111_000")] = Δᐃ.ᐃᐃΔⲆᐃΔⵠ;
    ⲆⲆ[1024][1][b("110_111_010")] = Δᐃ.ⵠᐃᐃΔᐃⵠᐃ;
    ⲆⲆ[1024][1][b("110_111_011")] = Δᐃ.ᐃⵠⵠⲆᐃⲆⲆ;
    ⲆⲆ[1024][1][b("110_111_110")] = Δᐃ.ⲆⲆⲆΔⲆⲆΔ;
    ⲆⲆ[1024][1][b("110_111_111")] = Δᐃ.ⵠΔⲆⵠΔⵠⵠ;
    ⲆⲆ[1024][1][b("111_111_011")] = Δᐃ.ᐃⵠΔⲆⲆΔⵠ;
    ⲆⲆ[1024][1][b("111_111_110")] = Δᐃ.ⵠⲆΔᐃⵠⵠⵠ;
    ⲆⲆ[1024][1][b("111_111_011")] = Δᐃ.ᐃⵠΔⲆⲆΔⵠ;
    ⲆⲆ[1024][1][b("111_111_000")] = Δᐃ.ᐃⵠΔⲆᐃⲆⵠ;
    ⲆⲆ[1024][1][b("111_111_111")] = Δᐃ.ⵠᐃⵠⲆⲆᐃᐃ;
    ⲆⲆ[1024][1][b("111_111_010")] = Δᐃ.ⵠⲆⵠΔΔⲆⲆ;
    ⲆⲆ[32] = [];
    ⲆⲆ[32][0] = Δᐃ.ᐃⵠΔⵠⵠΔⲆ;
    ⲆⲆ[32][1] = Δᐃ.ⵠⲆⵠⲆᐃΔⲆ;
    ⲆⲆ[205] = [];
    ⲆⲆ[205][0] = Δᐃ.ⵠⵠⵠᐃᐃⵠⲆ;
    ⲆⲆ[205][1] = Δᐃ.ⲆⲆΔΔᐃᐃΔ;
    ⲆⲆ[957] = [];
    ⲆⲆ[957][0] = Δᐃ.ᐃⲆⲆⲆᐃᐃΔ;
    ⲆⲆ[957][1] = Δᐃ.ⲆⵠⵠΔⵠⵠⲆ;
    ⲆⲆ[207] = [];
    ⲆⲆ[207][0] = Δᐃ.ᐃᐃΔΔⲆⵠⵠ;
    ⲆⲆ[207][1] = Δᐃ.ΔⲆⵠΔΔⵠᐃ;
    ⲆⲆ[954] = [];
    ⲆⲆ[954][0] = Δᐃ.ΔΔΔΔⲆⲆⲆ;
    ⲆⲆ[954][1] = Δᐃ.ᐃⵠⲆⲆᐃⲆᐃ;
    ⲆⲆ[958] = [];
    ⲆⲆ[958][0] = Δᐃ.ⲆΔᐃᐃΔⵠⲆ;
    ⲆⲆ[958][1] = Δᐃ.ⲆΔᐃΔᐃⲆⲆ;
    ⲆⲆ[209] = [];
    ⲆⲆ[209][0] = Δᐃ.ΔᐃΔⵠⲆΔΔ;
    ⲆⲆ[209][1] = Δᐃ.ⵠᐃⵠᐃⵠⲆΔ;
    ⲆⲆ[971] = [];
    ⲆⲆ[971][0] = Δᐃ.ⵠΔⲆⲆᐃⵠⲆ;
    ⲆⲆ[971][1] = Δᐃ.ᐃᐃΔⵠᐃΔᐃ;
    ⲆⲆ[211] = [];
    ⲆⲆ[211][0] = Δᐃ.ⲆⵠᐃΔⲆΔΔ;
    ⲆⲆ[211][1] = Δᐃ.ᐃᐃᐃⵠᐃΔᐃ;
    ⲆⲆ[986] = [];
    ⲆⲆ[986][0] = Δᐃ.ΔⲆⲆᐃⵠᐃⲆ;
    ⲆⲆ[986][1] = Δᐃ.ᐃᐃⲆⲆⵠⲆΔ;
    ⲆⲆ[989] = [];
    ⲆⲆ[989][0] = [Δᐃ.ⵠΔⵠᐃⲆⵠⵠ];
    ⲆⲆ[989][1] = [Δᐃ.ⲆⵠⵠⲆᐃⵠⲆ];
    ⲆⲆ[217] = [];
    ⲆⲆ[217][0] = Δᐃ.ⲆⲆⲆⵠⵠΔⲆ;
    ⲆⲆ[217][1] = Δᐃ.ⵠⵠⲆⵠᐃⵠΔ;
    ⲆⲆ[219] = [];
    ⲆⲆ[219][0] = Δᐃ.ⵠⵠⲆᐃⵠΔᐃ;
    ⲆⲆ[219][1] = Δᐃ.ⵠⲆⵠⵠΔΔᐃ;
    ⲆⲆ[218] = [];
    ⲆⲆ[218][0] = Δᐃ.ᐃⵠᐃᐃⵠᐃᐃ;
    ⲆⲆ[218][1] = Δᐃ.ᐃⵠⵠᐃᐃⵠᐃ;
    ⲆⲆ[212] = [];
    ⲆⲆ[212][0] = Δᐃ.ΔⵠᐃⲆᐃᐃⲆ;
    ⲆⲆ[212][1] = Δᐃ.ⵠⵠᐃⵠⵠⲆⲆ;
    ⲆⲆ[213] = [];
    ⲆⲆ[213][0] = Δᐃ.ᐃΔⲆⵠΔⲆᐃ;
    ⲆⲆ[213][1] = Δᐃ.ⵠⲆᐃⵠⲆⲆⵠ;
    ⲆⲆ[214] = [];
    ⲆⲆ[214][0] = Δᐃ.ΔᐃⵠⲆΔᐃⲆ;
    ⲆⲆ[214][1] = Δᐃ.ⵠⲆⲆⵠⵠᐃⲆ;
    ⲆⲆ[215] = [];
    ⲆⲆ[215][0] = Δᐃ.ⲆΔᐃΔΔΔⲆ;
    ⲆⲆ[215][1] = Δᐃ.ⲆΔⲆΔΔᐃᐃ;
    ⲆⲆ[216] = [];
    ⲆⲆ[216][0] = Δᐃ.ⲆᐃⲆΔᐃΔⵠ;
    ⲆⲆ[216][1] = Δᐃ.ⲆⵠⵠᐃⲆⵠΔ;
    ⲆⲆ[220] = [];
    ⲆⲆ[220][0] = Δᐃ.ᐃᐃΔⲆᐃⲆⲆ;
    ⲆⲆ[220][1] = Δᐃ.ⵠⵠᐃⲆᐃⵠΔ;
    ⲆⲆ[1020] = [];
    ⲆⲆ[1020][0] = Δᐃ.ΔᐃΔⵠΔᐃⲆ;
    ⲆⲆ[1020][1] = Δᐃ.ᐃᐃⵠᐃᐃΔⵠ;
    ⲆⲆ[1021] = [];
    ⲆⲆ[1021][0] = Δᐃ.ΔΔⵠⲆⲆᐃⵠ;
    ⲆⲆ[1021][1] = Δᐃ.ⵠⵠⵠΔⲆᐃΔ;
    ⲆⲆ[39] = [];
    ⲆⲆ[39][0] = Δᐃ.ⵠⲆᐃⲆΔⵠⵠ;
    ⲆⲆ[39][1] = Δᐃ.ⲆⵠⲆΔⵠΔᐃ;
    ⲆⲆ[1022] = Δᐃ.ΔᐃⲆⵠⵠΔΔ;
    ⲆⲆ[1023] = Δᐃ.ᐃⲆⲆΔⵠⵠΔ;
    ⲆⲆ[1041] = [];
    ⲆⲆ[1041][0] = [];
    ⲆⲆ[1041][1] = [];
    ⲆⲆ[1041][0].push(Δᐃ.ΔⲆⵠⲆΔⵠⵠ);
    ⲆⲆ[1041][0].push(Δᐃ.ΔⲆⲆΔΔⲆᐃ);
    ⲆⲆ[1041][0].push(Δᐃ.ⲆⲆⲆΔⲆΔⲆ);
    ⲆⲆ[1041][1].push(Δᐃ.ⵠΔΔΔᐃᐃᐃ);
    ⲆⲆ[1041][1].push(Δᐃ.ⲆᐃᐃⲆΔᐃⵠ);
    ⲆⲆ[1041][1].push(Δᐃ.ⵠᐃⵠᐃΔΔΔ);
    ⲆⲆ[244] = [];
    ⲆⲆ[244][0] = [];
    ⲆⲆ[244][1] = [];
    ⲆⲆ[244][0].push(Δᐃ.ⵠⲆⲆΔⲆⲆᐃ);
    ⲆⲆ[244][0].push(Δᐃ.ᐃⵠⵠΔᐃᐃⵠ);
    ⲆⲆ[244][0].push(Δᐃ.ᐃᐃⵠᐃⵠⵠΔ);
    ⲆⲆ[244][1].push(Δᐃ.ΔⵠᐃⲆⲆᐃⲆ);
    ⲆⲆ[244][1].push(Δᐃ.ΔⲆᐃᐃΔⵠΔ);
    ⲆⲆ[244][1].push(Δᐃ.ⲆⵠΔΔᐃΔᐃ);
    ⲆⲆ[1052] = [];
    ⲆⲆ[1052][0] = [];
    ⲆⲆ[1052][1] = [];
    ⲆⲆ[1052][0].push(Δᐃ.ΔᐃⵠⵠⲆᐃⵠ);
    ⲆⲆ[1052][0].push(Δᐃ.ΔᐃᐃΔΔⵠⵠ);
    ⲆⲆ[1052][0].push(Δᐃ.ΔⵠΔᐃΔΔⲆ);
    ⲆⲆ[1052][0].push(Δᐃ.ΔᐃΔⲆⲆⲆⲆ);
    ⲆⲆ[1052][0].push(Δᐃ.ΔⲆᐃΔᐃΔⵠ);
    ⲆⲆ[1052][1].push(Δᐃ.ᐃⲆᐃⵠⲆⵠᐃ);
    ⲆⲆ[1052][1].push(Δᐃ.ⵠⵠΔⲆⲆΔⲆ);
    ⲆⲆ[1052][1].push(Δᐃ.ⲆⲆⲆΔΔⲆᐃ);
    ⲆⲆ[1052][1].push(Δᐃ.ᐃΔΔᐃᐃⵠⲆ);
    ⲆⲆ[1052][1].push(Δᐃ.ᐃⵠⲆΔΔⵠᐃ);
    ⲆⲆ[450] = [];
    ⲆⲆ[450][0] = Δᐃ.ᐃΔⲆⲆΔᐃΔ;
    ⲆⲆ[450][1] = Δᐃ.ⲆⲆᐃⵠΔᐃⵠ;
    ⲆⲆ[453] = [];
    ⲆⲆ[453][0] = Δᐃ.ᐃΔⲆⲆⵠΔⵠ;
    ⲆⲆ[453][1] = Δᐃ.ΔⵠΔᐃΔⵠᐃ;
    ⲆⲆ[454] = [];
    ⲆⲆ[454][0] = Δᐃ.ΔᐃΔΔⵠⵠⵠ;
    ⲆⲆ[454][1] = Δᐃ.ᐃΔᐃᐃⲆΔⲆ;
    ⲆⲆ[464] = Δᐃ.Δᐃⵠⵠⵠⵠᐃ;
    ⲆⲆ[468] = Δᐃ.ⵠⲆⲆᐃⵠⲆⲆ;
    ⲆⲆ[469] = Δᐃ.ΔΔⲆⵠⵠᐃᐃ;
    ⲆⲆ[20] = [];
    ⲆⲆ[20][0] = Δᐃ.ⲆᐃⵠⵠᐃΔΔ;
    ⲆⲆ[20][1] = Δᐃ.ⲆⵠΔᐃⲆⲆⵠ;
    ⲆⲆ[920] = [];
    ⲆⲆ[920][0] = Δᐃ.ΔⲆΔⵠⲆⵠΔ;
    ⲆⲆ[920][1] = Δᐃ.ⵠΔΔⵠⵠⲆᐃ;
    ⲆⲆ[21] = [];
    ⲆⲆ[21][0] = Δᐃ.ᐃⲆⲆⲆⲆᐃⵠ;
    ⲆⲆ[21][1] = Δᐃ.ᐃⵠΔΔΔᐃᐃ;
    ⲆⲆ[924] = [];
    ⲆⲆ[924][0] = Δᐃ.ΔⲆΔⵠⲆⵠΔ;
    ⲆⲆ[924][1] = Δᐃ.ⵠΔΔⵠⵠⲆᐃ;
    ⲆⲆ[44] = [];
    ⲆⲆ[44][0] = Δᐃ.ΔⵠⲆᐃᐃΔⵠ;
    ⲆⲆ[44][1] = Δᐃ.ΔⲆⵠⲆΔᐃᐃ;
    ⲆⲆ[19] = [];
    ⲆⲆ[19][0] = Δᐃ.ᐃⲆΔⵠᐃⲆⵠ;
    ⲆⲆ[19][1] = Δᐃ.ᐃⲆⵠⲆᐃⲆⵠ;
    ⲆⲆ[34] = [];
    ⲆⲆ[34][0] = Δᐃ.ΔᐃⵠⲆᐃᐃⵠ;
    ⲆⲆ[34][1] = Δᐃ.ΔΔⲆᐃⵠⵠⵠ;
    ⲆⲆ[17] = [];
    ⲆⲆ[17][0] = Δᐃ.ⲆⲆⲆⲆⵠⲆᐃ;
    ⲆⲆ[17][1] = Δᐃ.ᐃΔⵠⲆΔᐃᐃ;
    ⲆⲆ[63] = [];
    ⲆⲆ[63][0] = Δᐃ.ⵠᐃᐃΔⲆⵠΔ;
    ⲆⲆ[63][1] = Δᐃ.ΔⵠᐃΔᐃᐃᐃ;
    ⲆⲆ[60] = [];
    ⲆⲆ[60][0] = Δᐃ.ᐃⵠΔⵠΔⵠⲆ;
    ⲆⲆ[60][1] = Δᐃ.ⵠⲆΔⲆⲆᐃᐃ;
    ⲆⲆ[94] = [];
    ⲆⲆ[94][0] = Δᐃ.ⲆᐃΔⵠᐃΔᐃⵠⲆ;
    ⲆⲆ[94][1] = Δᐃ.ΔⲆⵠⵠⵠΔⲆⵠΔ;
    ⲆⲆ[95] = [];
    ⲆⲆ[95][0] = Δᐃ.ⲆⵠⲆΔΔⲆᐃᐃⲆ;
    ⲆⲆ[95][1] = Δᐃ.ᐃⵠᐃⲆⲆΔⵠΔⲆ;
    ⲆⲆ[96] = [];
    ⲆⲆ[96][0] = Δᐃ.ᐃⵠΔᐃⲆⵠⵠⵠⵠ;
    ⲆⲆ[96][1] = Δᐃ.ᐃᐃΔⲆⲆⲆΔᐃᐃ;
    ⲆⲆ[97] = [];
    ⲆⲆ[97][0] = Δᐃ.ⵠⵠᐃᐃⲆⲆⵠⲆⵠ;
    ⲆⲆ[97][1] = Δᐃ.ⲆΔⵠΔⲆⲆΔΔᐃ;
    ⲆⲆ[98] = [];
    ⲆⲆ[98][0] = Δᐃ.ⲆᐃⵠΔⵠⵠⵠⵠΔ;
    ⲆⲆ[98][1] = Δᐃ.ΔⲆΔⵠⵠᐃᐃⲆⵠ;
    ⲆⲆ[99] = [];
    ⲆⲆ[99][0] = Δᐃ.ΔⵠΔᐃΔⲆⵠⵠᐃ;
    ⲆⲆ[99][1] = Δᐃ.ΔⲆⵠᐃᐃⵠⲆᐃΔ;
    ⲆⲆ[90] = [];
    ⲆⲆ[90][0] = Δᐃ.ⵠᐃⲆⵠⵠΔΔ;
    ⲆⲆ[90][1] = Δᐃ.ⲆⲆᐃᐃᐃΔΔ;
    ⲆⲆ[91] = [];
    ⲆⲆ[91][0] = Δᐃ.ⲆᐃΔᐃᐃⵠⲆ;
    ⲆⲆ[91][1] = Δᐃ.ⲆⵠΔᐃⲆⵠΔ;
    ⲆⲆ[71] = [];
    ⲆⲆ[71][0] = Δᐃ.ⵠΔΔΔⲆΔⲆᐃⵠ;
    ⲆⲆ[71][1] = Δᐃ.ΔᐃⲆΔᐃⵠΔΔΔ;
    ⲆⲆ[72] = [];
    ⲆⲆ[72][0] = Δᐃ.ⵠⵠⵠᐃᐃⵠⵠᐃΔ;
    ⲆⲆ[72][1] = Δᐃ.ⲆⵠⵠΔⲆΔⲆⲆⲆ;
    ⲆⲆ[73] = [];
    ⲆⲆ[73][0] = Δᐃ.ΔᐃᐃΔⵠⵠᐃⲆΔ;
    ⲆⲆ[73][1] = Δᐃ.ⲆΔᐃⲆᐃⲆⲆⵠⲆ;
    ⲆⲆ[74] = [];
    ⲆⲆ[74][0] = Δᐃ.ⵠᐃΔⵠⲆⲆⲆᐃⲆ;
    ⲆⲆ[74][1] = Δᐃ.ⲆⲆⲆⵠᐃⲆᐃΔⵠ;
    ⲆⲆ[75] = [];
    ⲆⲆ[75][0] = Δᐃ.ⵠᐃⲆΔⲆᐃⲆⵠⵠ;
    ⲆⲆ[75][1] = Δᐃ.ΔⵠΔΔⵠⵠⵠⲆΔ;
    ⲆⲆ[76] = [];
    ⲆⲆ[76][0] = Δᐃ.ΔⵠⲆᐃⲆᐃΔΔᐃ;
    ⲆⲆ[76][1] = Δᐃ.ΔᐃᐃⵠᐃⲆⲆⵠᐃ;
    ⲆⲆ[101] = [];
    ⲆⲆ[101][0] = Δᐃ.ᐃⲆⵠⵠΔⵠⲆ;
    ⲆⲆ[101][1] = Δᐃ.ΔΔᐃᐃⵠⲆⵠ;
    ⲆⲆ[64] = [];
    ⲆⲆ[64][0] = Δᐃ.ᐃⲆⲆⵠⲆᐃⵠⲆⵠ;
    ⲆⲆ[64][1] = Δᐃ.ⵠᐃΔΔΔⵠⵠΔᐃ;
    ⲆⲆ[102] = [];
    ⲆⲆ[102][0] = Δᐃ.ⵠᐃΔⲆⵠⲆᐃ;
    ⲆⲆ[102][1] = Δᐃ.ⲆⵠᐃᐃⲆΔⲆ;
    ⲆⲆ[65] = [];
    ⲆⲆ[65][0] = Δᐃ.ΔⲆΔᐃᐃᐃΔΔⵠ;
    ⲆⲆ[65][1] = Δᐃ.ⵠΔⵠΔᐃⵠᐃⲆΔ;
    ⲆⲆ[103] = [];
    ⲆⲆ[103][0] = Δᐃ.ΔⲆⲆⵠΔⵠⵠ;
    ⲆⲆ[103][1] = Δᐃ.ⵠΔⲆⵠⵠᐃⵠ;
    ⲆⲆ[66] = [];
    ⲆⲆ[66][0] = Δᐃ.ᐃⲆΔΔᐃⲆⲆⵠΔ;
    ⲆⲆ[66][1] = Δᐃ.ⲆΔⲆᐃⵠᐃⲆⲆΔ;
    ⲆⲆ[104] = [];
    ⲆⲆ[104][0] = Δᐃ.ᐃⵠⲆⵠΔⵠᐃ;
    ⲆⲆ[104][1] = Δᐃ.ⲆΔᐃᐃᐃⵠⲆ;
    ⲆⲆ[67] = [];
    ⲆⲆ[67][0] = Δᐃ.ⲆⲆᐃᐃᐃΔⵠᐃⲆ;
    ⲆⲆ[67][1] = Δᐃ.ⵠΔΔⲆⵠΔᐃⵠⲆ;
    ⲆⲆ[105] = [];
    ⲆⲆ[105][0] = Δᐃ.ΔᐃΔⲆᐃⵠΔ;
    ⲆⲆ[105][1] = Δᐃ.ΔⵠⲆᐃⵠⵠⵠ;
    ⲆⲆ[68] = [];
    ⲆⲆ[68][0] = Δᐃ.ⲆⵠΔΔᐃⵠⵠᐃᐃ;
    ⲆⲆ[68][1] = Δᐃ.ⲆⲆᐃΔⵠⵠⲆⲆᐃ;
    ⲆⲆ[106] = [];
    ⲆⲆ[106][0] = Δᐃ.ᐃᐃᐃⲆⵠΔⲆ;
    ⲆⲆ[106][1] = Δᐃ.ᐃΔⵠⵠΔᐃⵠΔᐃ;
    ⲆⲆ[69] = [];
    ⲆⲆ[69][0] = Δᐃ.ⲆΔΔΔᐃⲆᐃⵠΔ;
    ⲆⲆ[69][1] = Δᐃ.ⵠⵠⲆⵠΔᐃΔⵠΔ;
    ⲆⲆ[107] = [];
    ⲆⲆ[107][0] = Δᐃ.ⲆᐃᐃΔⵠⵠΔ;
    ⲆⲆ[107][1] = Δᐃ.ΔⵠⲆΔⵠᐃᐃ;
    ⲆⲆ[70] = [];
    ⲆⲆ[70][0] = Δᐃ.ᐃⲆⲆⲆᐃⲆΔⲆⵠ;
    ⲆⲆ[70][1] = Δᐃ.ΔΔⵠⲆⵠΔΔΔⲆ;
    ⲆⲆ[80] = [];
    ⲆⲆ[80][0] = Δᐃ.ᐃΔΔⲆⲆⲆⲆ;
    ⲆⲆ[80][1] = Δᐃ.ΔᐃⲆΔΔⵠⵠ;
    ⲆⲆ[81] = [];
    ⲆⲆ[81][0] = Δᐃ.ᐃⵠⲆΔⵠᐃⲆ;
    ⲆⲆ[81][1] = Δᐃ.ΔᐃⵠⲆⲆᐃᐃ;
    ⲆⲆ[22] = [];
    ⲆⲆ[22][0] = Δᐃ.ᐃⵠΔᐃⵠⵠΔ;
    ⲆⲆ[22][1] = Δᐃ.ⲆᐃⵠⲆᐃⲆⲆ;
    ⲆⲆ[928] = [];
    ⲆⲆ[928][0] = Δᐃ.ΔΔΔⲆᐃᐃᐃ;
    ⲆⲆ[928][1] = Δᐃ.ᐃᐃⲆᐃⵠⲆᐃ;
    ⲆⲆ[935] = [];
    ⲆⲆ[935][0] = [];
    ⲆⲆ[935][1] = [];
    ⲆⲆ[935][0].push(Δᐃ.ΔⵠⲆᐃᐃⵠⵠᐃᐃ);
    ⲆⲆ[935][0].push(Δᐃ.ⵠⲆΔⵠΔⵠⵠⲆΔ);
    ⲆⲆ[935][1].push(Δᐃ.ⵠⲆΔⵠΔⵠⵠⲆΔ);
    ⲆⲆ[935][1].push(Δᐃ.ᐃΔᐃⵠΔⵠᐃⵠΔ);
    ⲆⲆ[941] = [];
    ⲆⲆ[941][0] = [];
    ⲆⲆ[941][1] = [];
    ⲆⲆ[941][0].push(Δᐃ.ᐃⲆⲆⵠΔᐃⵠ);
    ⲆⲆ[941][0].push(Δᐃ.ⲆΔⲆᐃⲆΔⲆ);
    ⲆⲆ[941][0].push(Δᐃ.ⲆᐃⲆΔᐃᐃⲆ);
    ⲆⲆ[941][1].push(Δᐃ.ᐃⵠΔΔΔⵠΔ);
    ⲆⲆ[941][1].push(Δᐃ.ⲆⵠⵠΔⲆⵠⲆ);
    ⲆⲆ[941][1].push(Δᐃ.ΔⵠⵠΔΔⵠⵠ);
    ⲆⲆ[53] = [];
    ⲆⲆ[53][0] = Δᐃ.ⵠⲆⲆΔⲆⲆⵠ;
    ⲆⲆ[53][1] = Δᐃ.ᐃᐃΔᐃᐃΔⲆ;
    ⲆⲆ[54] = [];
    ⲆⲆ[54][0] = Δᐃ.ᐃⵠΔⲆⲆΔΔ;
    ⲆⲆ[54][1] = Δᐃ.ᐃΔᐃᐃⲆᐃⵠ;
    ⲆⲆ[241] = [];
    ⲆⲆ[241][0] = [];
    ⲆⲆ[241][1] = [];
    ⲆⲆ[241][0].push(Δᐃ.ⵠᐃᐃⲆᐃⵠⵠ);
    ⲆⲆ[241][0].push(Δᐃ.ᐃᐃⲆⵠⵠⵠⵠ);
    ⲆⲆ[241][0].push(Δᐃ.ⲆⵠΔΔᐃᐃᐃ);
    ⲆⲆ[241][1].push(Δᐃ.ᐃΔᐃⵠⲆΔⲆ);
    ⲆⲆ[241][1].push(Δᐃ.ΔΔᐃΔΔⵠⵠ);
    ⲆⲆ[241][1].push(Δᐃ.ⵠᐃᐃⲆΔᐃⵠ);
    ⲆⲆ[202] = [];
    ⲆⲆ[202][0] = [];
    ⲆⲆ[202][1] = [];
    ⲆⲆ[202][0].push(Δᐃ.ⲆᐃᐃΔΔΔΔ);
    ⲆⲆ[202][0].push(Δᐃ.ⲆᐃΔΔᐃⵠᐃ);
    ⲆⲆ[202][0].push(Δᐃ.ΔΔᐃⲆΔⵠⵠ);
    ⲆⲆ[202][1].push(Δᐃ.ⵠᐃᐃⲆⵠⲆⵠ);
    ⲆⲆ[202][1].push(Δᐃ.ⲆΔΔΔⵠᐃΔ);
    ⲆⲆ[202][1].push(Δᐃ.ⲆΔᐃⵠᐃⲆᐃ);
    ⲆⲆ[203] = [];
    ⲆⲆ[203][0] = [];
    ⲆⲆ[203][1] = [];
    ⲆⲆ[203][0].push(Δᐃ.ⲆⵠΔⲆⲆᐃΔ);
    ⲆⲆ[203][0].push(Δᐃ.ⲆⲆΔᐃⲆΔⵠ);
    ⲆⲆ[203][0].push(Δᐃ.ⵠΔΔⵠⲆⵠⲆ);
    ⲆⲆ[203][0].push(Δᐃ.ⵠᐃⲆΔⲆⵠⵠ);
    ⲆⲆ[203][0].push(Δᐃ.ⵠΔΔⵠⲆΔⵠ);
    ⲆⲆ[203][0].push(Δᐃ.ⲆⵠΔⵠΔⲆⲆ);
    ⲆⲆ[203][1].push(Δᐃ.ΔⲆᐃᐃⲆΔᐃ);
    ⲆⲆ[203][1].push(Δᐃ.ⲆᐃⵠΔΔΔⲆ);
    ⲆⲆ[203][1].push(Δᐃ.ⵠⲆᐃΔⵠᐃⵠ);
    ⲆⲆ[203][1].push(Δᐃ.ⲆᐃⵠⵠᐃⵠⲆ);
    ⲆⲆ[203][1].push(Δᐃ.ⲆⲆⲆⵠⲆᐃⵠ);
    ⲆⲆ[203][1].push(Δᐃ.ᐃⵠⲆⵠⵠΔⵠ);
    ⲆⲆ[ts.ᐃᐃᐃⲆⵠ] = [];
    ⲆⲆ[ts.ᐃᐃᐃⲆⵠ][0] = [];
    ⲆⲆ[ts.ᐃᐃᐃⲆⵠ][1] = [];
    ⲆⲆ[ts.ᐃᐃᐃⲆⵠ][0].push(Δᐃ.ⵠⵠⵠⲆΔⲆⲆ);
    ⲆⲆ[ts.ᐃᐃᐃⲆⵠ][0].push(Δᐃ.ΔᐃⲆΔⵠΔⵠ);
    ⲆⲆ[ts.ᐃᐃᐃⲆⵠ][0].push(Δᐃ.ᐃᐃⲆⲆⲆΔΔ);
    ⲆⲆ[ts.ᐃᐃᐃⲆⵠ][0].push(Δᐃ.ⲆΔⲆⵠⵠⲆⵠ);
    ⲆⲆ[ts.ᐃᐃᐃⲆⵠ][0].push(Δᐃ.ⵠᐃⵠΔⵠᐃᐃ);
    ⲆⲆ[ts.ᐃᐃᐃⲆⵠ][0].push(Δᐃ.ⲆⲆⵠⵠᐃΔΔ);
    ⲆⲆ[ts.ᐃᐃᐃⲆⵠ][1].push(Δᐃ.ᐃⲆᐃΔⲆΔᐃ);
    ⲆⲆ[ts.ᐃᐃᐃⲆⵠ][1].push(Δᐃ.ⵠΔΔΔⵠΔΔ);
    ⲆⲆ[ts.ᐃᐃᐃⲆⵠ][1].push(Δᐃ.ⵠᐃΔΔΔⵠΔ);
    ⲆⲆ[ts.ᐃᐃᐃⲆⵠ][1].push(Δᐃ.ⵠⵠΔⲆᐃΔⵠ);
    ⲆⲆ[ts.ᐃᐃᐃⲆⵠ][1].push(Δᐃ.ⵠΔᐃΔΔᐃⲆ);
    ⲆⲆ[ts.ᐃᐃᐃⲆⵠ][1].push(Δᐃ.ΔⲆⲆΔⵠΔⵠ);
    ⲆⲆ[918] = [];
    ⲆⲆ[918][0] = Δᐃ.ⲆⵠᐃΔᐃᐃᐃ;
    ⲆⲆ[918][1] = Δᐃ.ΔᐃΔᐃᐃᐃⵠ;
    ⲆⲆ[919] = Δᐃ.ⲆⲆⲆⲆⵠⲆⲆ;
    ⲆⲆ[56] = [];
    ⲆⲆ[56][0] = Δᐃ.ΔⲆⵠⵠⵠⲆΔⵠᐃ;
    ⲆⲆ[56][1] = Δᐃ.ᐃᐃᐃⵠⲆΔΔΔᐃ;
    ⲆⲆ[223] = [];
    ⲆⲆ[223][0] = Δᐃ.ⲆⲆⲆⲆⵠⵠᐃ;
    ⲆⲆ[223][1] = Δᐃ.ⵠⲆⵠᐃᐃᐃⵠ;
    ⲆⲆ[224] = [];
    ⲆⲆ[224][0] = Δᐃ.ΔᐃⵠⵠⲆⵠⵠ;
    ⲆⲆ[224][1] = Δᐃ.ᐃⲆᐃⲆⵠⲆᐃ;
    ⲆⲆ[236] = [];
    ⲆⲆ[236][0] = Δᐃ.ⲆΔΔᐃᐃΔⲆ;
    ⲆⲆ[236][1] = Δᐃ.ⵠⵠⵠⵠᐃⲆᐃ;
    ⲆⲆ[1033] = [];
    ⲆⲆ[1033][0] = Δᐃ.ΔⵠⲆⲆΔⲆⲆ;
    ⲆⲆ[1033][1] = Δᐃ.ⵠⲆᐃⵠᐃⵠᐃ;
    ⲆⲆ[1034] = Δᐃ.ⵠⲆⵠᐃⵠΔⵠ;
    ⲆⲆ[1150] = [];
    ⲆⲆ[1150][0] = Δᐃ.ⵠᐃⵠᐃᐃⲆΔ;
    ⲆⲆ[1150][1] = Δᐃ.ᐃᐃⲆΔⵠΔᐃ;
    ⲆⲆ[1152] = [];
    ⲆⲆ[1152][0] = Δᐃ.ᐃΔⵠⲆᐃⲆⵠ;
    ⲆⲆ[1152][1] = Δᐃ.ⲆΔΔⵠⲆⵠᐃ;
    ⲆⲆ[1149] = Δᐃ.ⵠⵠⲆⲆⲆⵠᐃ;
    ⲆⲆ[1151] = Δᐃ.ΔᐃᐃⲆᐃᐃΔ;
    ⲆⲆ[1153] = Δᐃ.ᐃⵠⵠⲆⲆΔⲆ;
    ⲆⲆ[1143] = [];
    ⲆⲆ[1143][0] = Δᐃ.ΔⵠΔΔⵠΔⲆ;
    ⲆⲆ[1143][1] = Δᐃ.ᐃᐃΔⵠΔⲆⵠ;
    ⲆⲆ[1145] = [];
    ⲆⲆ[1145][0] = Δᐃ.ᐃᐃᐃⵠⵠⲆⲆ;
    ⲆⲆ[1145][1] = Δᐃ.ⲆΔⲆⲆⵠΔⵠ;
    ⲆⲆ[1146] = [];
    ⲆⲆ[1146][0] = Δᐃ.ᐃᐃᐃΔΔΔⵠ;
    ⲆⲆ[1146][1] = Δᐃ.ⲆΔΔⵠᐃⲆᐃ;
    ⲆⲆ[1144] = Δᐃ.ⵠⵠⲆⲆΔᐃⵠ;
    ⲆⲆ[1148] = Δᐃ.ⲆⲆⲆᐃΔⲆⲆ;
    ⲆⲆ[1147] = Δᐃ.ⲆⵠᐃΔᐃΔΔ;
    ⲆⲆ[1053] = [];
    ⲆⲆ[1053][0] = Δᐃ.ⵠⲆᐃⵠΔⲆⲆ;
    ⲆⲆ[1053][1] = Δᐃ.ᐃⵠⵠᐃⵠⲆⵠ;
    ⲆⲆ[1055] = [];
    ⲆⲆ[1055][0] = Δᐃ.ΔᐃΔΔⵠᐃΔ;
    ⲆⲆ[1055][1] = Δᐃ.ᐃⲆⵠᐃⵠᐃᐃ;
    ⲆⲆ[231] = [];
    ⲆⲆ[231][0] = Δᐃ.ΔᐃⲆⲆᐃΔᐃ;
    ⲆⲆ[231][1] = Δᐃ.ⲆᐃⲆᐃⲆⲆᐃ;
    ⲆⲆ[1060] = [];
    ⲆⲆ[1060][0] = Δᐃ.ΔΔΔΔΔⵠΔ;
    ⲆⲆ[1060][1] = Δᐃ.ⲆᐃⲆᐃⲆⵠΔ;
    ⲆⲆ[1063] = [];
    ⲆⲆ[1063][0] = Δᐃ.ⲆᐃΔⲆⲆΔᐃ;
    ⲆⲆ[1063][1] = Δᐃ.ⵠᐃⵠⵠᐃⲆⵠ;
    ⲆⲆ[1059] = [];
    ⲆⲆ[1059][0] = Δᐃ.ᐃⵠΔᐃΔⵠᐃ;
    ⲆⲆ[1059][1] = Δᐃ.ᐃΔⲆΔΔⲆⵠ;
    ⲆⲆ[1062] = [];
    ⲆⲆ[1062][0] = Δᐃ.ΔᐃⵠΔᐃⵠⵠ;
    ⲆⲆ[1062][1] = Δᐃ.ΔⲆΔΔⵠⲆᐃ;
    ⲆⲆ[1056] = Δᐃ.Ⲇⵠⵠⵠᐃⵠⵠ;
    ⲆⲆ[1057] = Δᐃ.ᐃΔΔΔⵠΔⲆ;
    ⲆⲆ[1058] = Δᐃ.ΔⵠΔΔⵠⵠⲆ;
    ⲆⲆ[1065] = Δᐃ.ᐃᐃᐃⲆᐃⲆⲆ;
    ⲆⲆ[1066] = Δᐃ.ⵠⲆⲆᐃⵠᐃᐃ;
    ⲆⲆ[1067] = Δᐃ.ⲆᐃⲆᐃⵠⵠᐃ;
    ⲆⲆ[1222] = [];
    ⲆⲆ[1222][0] = Δᐃ.ᐃΔᐃⵠⲆΔᐃ;
    ⲆⲆ[1222][1] = Δᐃ.ⵠⵠⵠⵠΔΔⵠ;
    ⲆⲆ[248] = [];
    ⲆⲆ[248][0] = Δᐃ.ΔⲆⲆΔⵠⵠᐃ;
    ⲆⲆ[248][1] = Δᐃ.ΔΔⲆᐃᐃΔᐃ;
    ⲆⲆ[1218] = [];
    ⲆⲆ[1218][0] = Δᐃ.ΔΔᐃΔᐃᐃⵠⵠᐃ;
    ⲆⲆ[1218][1] = Δᐃ.ⵠΔᐃᐃⵠⲆⵠᐃᐃ;
    ⲆⲆ[1221] = [];
    ⲆⲆ[1221][0] = Δᐃ.ᐃⲆᐃⵠΔⵠⲆ;
    ⲆⲆ[1221][1] = Δᐃ.ⲆⲆΔᐃⲆⲆⲆ;
    ⲆⲆ[1223] = Δᐃ.ᐃᐃᐃΔⲆⲆⵠ;
    ⲆⲆ[1219] = Δᐃ.ⵠᐃⲆⲆᐃᐃᐃ;
    ⲆⲆ[1068] = [];
    ⲆⲆ[1068][0] = Δᐃ.ΔⲆⵠᐃΔΔΔ;
    ⲆⲆ[1068][1] = Δᐃ.ⵠⲆⲆⲆⵠⲆΔ;
    ⲆⲆ[232] = [];
    ⲆⲆ[232][0] = Δᐃ.ⵠⵠᐃᐃΔΔⵠ;
    ⲆⲆ[232][1] = Δᐃ.ᐃᐃⲆⵠᐃᐃⵠ;
    ⲆⲆ[1070] = [];
    ⲆⲆ[1070][0] = Δᐃ.ⲆⵠⵠⲆΔᐃⵠ;
    ⲆⲆ[1070][1] = Δᐃ.ᐃᐃΔⵠⲆΔⲆ;
    ⲆⲆ[1072] = [];
    ⲆⲆ[1072][0] = Δᐃ.ΔᐃⵠΔΔᐃᐃ;
    ⲆⲆ[1072][1] = Δᐃ.ⲆⵠΔⲆⵠΔⲆ;
    ⲆⲆ[1075] = [];
    ⲆⲆ[1075][0] = Δᐃ.ΔⵠⲆⲆΔΔᐃ;
    ⲆⲆ[1075][1] = Δᐃ.ⲆⵠⵠⵠᐃⵠΔ;
    ⲆⲆ[1071] = [];
    ⲆⲆ[1071][0] = Δᐃ.ⲆΔⵠⲆⲆⵠⲆ;
    ⲆⲆ[1071][1] = Δᐃ.ⵠⲆⲆⲆⲆΔⵠ;
    ⲆⲆ[1074] = [];
    ⲆⲆ[1074][0] = Δᐃ.ⲆⲆⲆΔⲆⲆᐃ;
    ⲆⲆ[1074][1] = Δᐃ.ΔΔΔᐃᐃⵠⵠ;
    ⲆⲆ[1073] = [];
    ⲆⲆ[1073][0] = Δᐃ.ΔᐃⵠΔᐃⵠΔ;
    ⲆⲆ[1073][1] = Δᐃ.ⵠⵠΔΔⵠᐃΔ;
    ⲆⲆ[1076] = [];
    ⲆⲆ[1076][0] = Δᐃ.ΔᐃⲆⲆⵠΔᐃ;
    ⲆⲆ[1076][1] = Δᐃ.ᐃΔΔⲆⲆⵠᐃ;
    ⲆⲆ[1077] = Δᐃ.ΔⵠⲆⲆⲆⲆⲆ;
    ⲆⲆ[1078] = Δᐃ.ΔⲆΔΔᐃⲆᐃ;
    ⲆⲆ[1079] = Δᐃ.ⲆΔΔⵠᐃᐃⲆ;
    ⲆⲆ[1083] = [];
    ⲆⲆ[1083][0] = Δᐃ.ΔⲆⲆΔⲆⵠΔ;
    ⲆⲆ[1083][1] = Δᐃ.ⵠΔⲆⵠⵠⵠⲆ;
    ⲆⲆ[233] = [];
    ⲆⲆ[233][0] = Δᐃ.ᐃⵠᐃᐃⵠΔⲆ;
    ⲆⲆ[233][1] = Δᐃ.ΔΔⲆᐃΔΔΔ;
    ⲆⲆ[1085] = [];
    ⲆⲆ[1085][0] = Δᐃ.ᐃⵠᐃΔᐃⲆΔ;
    ⲆⲆ[1085][1] = Δᐃ.ⲆⲆⲆⵠᐃⵠᐃ;
    ⲆⲆ[1087] = [];
    ⲆⲆ[1087][0] = Δᐃ.ⵠΔⵠΔⲆΔΔ;
    ⲆⲆ[1087][1] = Δᐃ.ΔⵠⵠⵠᐃⵠΔ;
    ⲆⲆ[1090] = [];
    ⲆⲆ[1090][0] = Δᐃ.ⵠΔⲆΔᐃⵠⲆ;
    ⲆⲆ[1090][1] = Δᐃ.ᐃⵠᐃΔΔⵠⵠ;
    ⲆⲆ[1086] = [];
    ⲆⲆ[1086][0] = Δᐃ.ΔᐃⲆᐃᐃⵠΔ;
    ⲆⲆ[1086][1] = Δᐃ.ⲆᐃΔΔΔᐃᐃ;
    ⲆⲆ[1089] = [];
    ⲆⲆ[1089][0] = Δᐃ.ᐃⵠⵠΔⲆⲆᐃ;
    ⲆⲆ[1089][1] = Δᐃ.ⵠⲆⵠⲆⲆᐃⲆ;
    ⲆⲆ[1088] = [];
    ⲆⲆ[1088][0] = Δᐃ.ᐃΔⲆΔᐃⵠᐃ;
    ⲆⲆ[1088][1] = Δᐃ.ⲆⵠⲆⲆⲆᐃᐃ;
    ⲆⲆ[1091] = [];
    ⲆⲆ[1091][0] = Δᐃ.ⲆⲆᐃᐃⵠⵠΔ;
    ⲆⲆ[1091][1] = Δᐃ.ⵠⵠⲆᐃΔⲆᐃ;
    ⲆⲆ[1092] = Δᐃ.ΔΔⲆⵠⵠⵠⵠ;
    ⲆⲆ[1093] = Δᐃ.ⲆⵠⵠⵠΔᐃⲆ;
    ⲆⲆ[1094] = Δᐃ.ΔᐃᐃⲆⲆⲆⵠ;
    ⲆⲆ[1098] = [];
    ⲆⲆ[1098][0] = Δᐃ.ΔⲆⲆⲆΔⵠⲆ;
    ⲆⲆ[1098][1] = Δᐃ.ΔΔⲆⲆⵠⲆⵠ;
    ⲆⲆ[235] = [];
    ⲆⲆ[235][0] = Δᐃ.ⲆⲆⵠΔⵠᐃΔ;
    ⲆⲆ[235][1] = Δᐃ.Ⲇⵠⵠᐃⵠᐃⵠ;
    ⲆⲆ[1115] = Δᐃ.ᐃⲆⲆⲆᐃᐃᐃ;
    ⲆⲆ[1113] = [];
    ⲆⲆ[1113][0] = Δᐃ.ⵠⵠⲆⲆᐃⲆⵠ;
    ⲆⲆ[1113][1] = Δᐃ.ᐃᐃΔⲆΔΔⵠ;
    ⲆⲆ[1114] = [];
    ⲆⲆ[1114][0] = Δᐃ.ΔⵠΔΔⵠⵠᐃ;
    ⲆⲆ[1114][1] = Δᐃ.ᐃΔΔΔᐃⲆΔ;
    ⲆⲆ[1100] = [];
    ⲆⲆ[1100][0] = Δᐃ.ⵠⲆΔⲆΔⲆᐃ;
    ⲆⲆ[1100][1] = Δᐃ.ⵠᐃᐃΔΔⲆΔ;
    ⲆⲆ[1102] = [];
    ⲆⲆ[1102][0] = Δᐃ.ᐃᐃΔⵠⲆⵠⵠ;
    ⲆⲆ[1102][1] = Δᐃ.ΔΔᐃΔᐃⲆⲆ;
    ⲆⲆ[1105] = [];
    ⲆⲆ[1105][0] = Δᐃ.ᐃᐃΔΔᐃⵠᐃ;
    ⲆⲆ[1105][1] = Δᐃ.ᐃΔⲆΔⲆΔⲆ;
    ⲆⲆ[1101] = [];
    ⲆⲆ[1101][0] = Δᐃ.ⲆΔⵠⲆⲆΔΔ;
    ⲆⲆ[1101][1] = Δᐃ.ΔⵠⵠⵠⵠᐃΔ;
    ⲆⲆ[1104] = [];
    ⲆⲆ[1104][0] = Δᐃ.ⲆΔΔᐃᐃⵠᐃ;
    ⲆⲆ[1104][1] = Δᐃ.ⵠΔᐃⲆᐃⲆⵠ;
    ⲆⲆ[1103] = [];
    ⲆⲆ[1103][0] = Δᐃ.ΔⲆⵠΔᐃᐃⵠ;
    ⲆⲆ[1103][1] = Δᐃ.ⲆΔΔᐃΔⵠⵠ;
    ⲆⲆ[1106] = [];
    ⲆⲆ[1106][0] = Δᐃ.ⲆΔᐃⵠᐃᐃΔ;
    ⲆⲆ[1106][1] = Δᐃ.ⵠΔΔΔᐃⵠⵠ;
    ⲆⲆ[1107] = Δᐃ.ΔⵠⲆᐃᐃΔⲆ;
    ⲆⲆ[1108] = Δᐃ.ᐃΔⵠⵠᐃⲆⵠ;
    ⲆⲆ[1109] = Δᐃ.ⲆᐃΔⵠᐃⵠⵠ;
    ⲆⲆ[1119] = [];
    ⲆⲆ[1119][0] = Δᐃ.ⲆⵠᐃⵠᐃⲆⵠ;
    ⲆⲆ[1119][1] = Δᐃ.ᐃⲆⵠΔᐃⲆΔ;
    ⲆⲆ[238] = [];
    ⲆⲆ[238][0] = Δᐃ.ⵠⲆⲆⵠᐃᐃᐃ;
    ⲆⲆ[238][1] = Δᐃ.ΔΔᐃᐃᐃⵠΔ;
    ⲆⲆ[1136] = Δᐃ.ⵠⵠᐃⵠⲆⲆᐃ;
    ⲆⲆ[1134] = [];
    ⲆⲆ[1134][0] = Δᐃ.ΔⵠⲆΔΔⵠΔ;
    ⲆⲆ[1134][1] = Δᐃ.ⵠΔΔᐃΔᐃΔ;
    ⲆⲆ[1135] = [];
    ⲆⲆ[1135][0] = Δᐃ.ⲆⲆⲆⲆⲆⵠⲆ;
    ⲆⲆ[1135][1] = Δᐃ.ᐃΔᐃⲆⵠⲆᐃ;
    ⲆⲆ[1121] = [];
    ⲆⲆ[1121][0] = Δᐃ.ΔⲆᐃΔΔⲆⲆ;
    ⲆⲆ[1121][1] = Δᐃ.ᐃΔⵠᐃᐃᐃⵠ;
    ⲆⲆ[1123] = [];
    ⲆⲆ[1123][0] = Δᐃ.ⵠΔⵠⵠⵠΔΔ;
    ⲆⲆ[1123][1] = Δᐃ.ΔΔⲆᐃⵠᐃΔ;
    ⲆⲆ[1126] = [];
    ⲆⲆ[1126][0] = Δᐃ.ⲆΔⵠⲆⵠᐃᐃ;
    ⲆⲆ[1126][1] = Δᐃ.ⵠΔⵠᐃᐃΔΔ;
    ⲆⲆ[1122] = [];
    ⲆⲆ[1122][0] = Δᐃ.ⵠⵠΔⲆΔⵠⵠ;
    ⲆⲆ[1122][1] = Δᐃ.ᐃΔᐃΔᐃⲆⲆ;
    ⲆⲆ[1125] = [];
    ⲆⲆ[1125][0] = Δᐃ.ⲆⵠⵠⲆΔΔᐃ;
    ⲆⲆ[1125][1] = Δᐃ.ΔΔᐃⲆⲆΔΔ;
    ⲆⲆ[1124] = [];
    ⲆⲆ[1124][0] = Δᐃ.ⲆⲆⵠⲆⵠⲆΔ;
    ⲆⲆ[1124][1] = Δᐃ.ⲆΔΔⵠᐃⲆⵠ;
    ⲆⲆ[1127] = [];
    ⲆⲆ[1127][0] = Δᐃ.ⵠΔⲆΔⲆⲆⵠ;
    ⲆⲆ[1127][1] = Δᐃ.ᐃΔⵠᐃⲆⲆⲆ;
    ⲆⲆ[1128] = Δᐃ.ΔΔⵠⲆΔΔᐃ;
    ⲆⲆ[1129] = Δᐃ.ΔᐃⲆⵠⵠᐃⲆ;
    ⲆⲆ[1130] = Δᐃ.ⵠᐃⵠᐃΔⲆᐃ;
    ⲆⲆ[1042] = [];
    ⲆⲆ[1042][0] = Δᐃ.ⲆᐃΔΔⵠΔΔ;
    ⲆⲆ[1042][1] = Δᐃ.ΔΔᐃⲆΔⲆΔ;
    ⲆⲆ[1043] = [];
    ⲆⲆ[1043][0] = Δᐃ.ᐃᐃⲆΔᐃΔⲆ;
    ⲆⲆ[1043][1] = Δᐃ.ΔⵠⵠⵠΔᐃᐃ;
    ⲆⲆ[1044] = [];
    ⲆⲆ[1044][0] = Δᐃ.ᐃᐃⵠⲆⵠᐃⵠ;
    ⲆⲆ[1044][1] = Δᐃ.ⲆΔᐃᐃΔⲆⵠ;
    ⲆⲆ[228] = [];
    ⲆⲆ[228][0] = Δᐃ.ᐃΔⲆΔⲆΔΔ;
    ⲆⲆ[228][1] = Δᐃ.ᐃΔⲆΔⲆΔΔ;
    ⲆⲆ[234] = [];
    ⲆⲆ[234][0] = Δᐃ.ⲆⵠΔⲆΔⵠⵠ;
    ⲆⲆ[234][1] = Δᐃ.ⲆⵠΔⲆΔⵠⵠ;
    ⲆⲆ[249] = [];
    ⲆⲆ[249][0] = Δᐃ.ⲆⵠⲆⲆⵠⵠᐃ;
    ⲆⲆ[249][1] = Δᐃ.ⲆⵠⲆⲆⵠⵠᐃ;
    ⲆⲆ[1045] = Δᐃ.ΔⵠΔⲆᐃⲆⲆ;
    ⲆⲆ[89] = [];
    ⲆⲆ[89][0] = Δᐃ.ⲆᐃᐃᐃΔᐃⵠ;
    ⲆⲆ[89][1] = Δᐃ.ΔᐃᐃⵠⲆⵠⲆ;
    ⲆⲆ[92] = [];
    ⲆⲆ[92][0] = Δᐃ.ᐃΔⵠΔⲆᐃⵠ;
    ⲆⲆ[92][1] = Δᐃ.ΔⵠⲆⵠᐃΔⲆ;
    ⲆⲆ[247] = [];
    ⲆⲆ[247][0] = [Δᐃ.ᐃΔΔⵠⵠΔⲆ, Δᐃ.ΔᐃᐃⵠΔⵠⲆ, Δᐃ.ᐃⲆⵠⵠΔⵠⲆ, Δᐃ.ⵠᐃΔⲆⵠⲆᐃ, Δᐃ.ΔⲆⲆⵠΔⵠⵠ, Δᐃ.ᐃⵠⲆⵠΔⵠᐃ, Δᐃ.ΔᐃΔⲆᐃⵠΔ, Δᐃ.ᐃᐃᐃⲆⵠΔⲆ, Δᐃ.ⲆᐃᐃΔⵠⵠΔ];
    ⲆⲆ[247][1] = [Δᐃ.ᐃΔΔΔΔⵠΔ, Δᐃ.ᐃᐃⲆᐃⵠᐃᐃ, Δᐃ.ΔΔᐃᐃⵠⲆⵠ, Δᐃ.ⲆⵠᐃᐃⲆΔⲆ, Δᐃ.ⵠΔⲆⵠⵠᐃⵠ, Δᐃ.ⲆΔᐃᐃᐃⵠⲆ, Δᐃ.ΔⵠⲆᐃⵠⵠⵠ, Δᐃ.ᐃᐃᐃⲆⵠΔⲆ, Δᐃ.ΔⵠⲆΔⵠᐃᐃ];
    ⲆⲆ[93] = [];
    ⲆⲆ[93][0] = Δᐃ.ΔⵠᐃⵠΔΔⲆ;
    ⲆⲆ[93][1] = Δᐃ.ΔΔᐃⵠΔᐃⲆ;
    ⲆⲆ[225] = [];
    ⲆⲆ[225][0] = Δᐃ.ΔⲆⵠⲆᐃⵠⲆ;
    ⲆⲆ[225][1] = Δᐃ.ΔⲆΔⲆΔᐃΔ;
    ⲆⲆ[226] = [];
    ⲆⲆ[226][0] = Δᐃ.ΔᐃⲆᐃᐃⲆⲆ;
    ⲆⲆ[226][1] = Δᐃ.ⲆⵠΔⲆᐃⵠⵠ;
    ⲆⲆ[24] = [];
    ⲆⲆ[24][0] = Δᐃ.ΔⲆᐃⲆΔⵠⲆ;
    ⲆⲆ[24][1] = Δᐃ.ᐃᐃⲆⵠΔΔⵠ;
    ⲆⲆ[88] = [];
    ⲆⲆ[88][0] = Δᐃ.ⵠᐃᐃΔⲆΔΔΔᐃ;
    ⲆⲆ[88][1] = Δᐃ.ⵠⵠᐃⲆⵠΔᐃⵠᐃ;
    ⲆⲆ[87] = [];
    ⲆⲆ[87][0] = Δᐃ.ΔⵠⵠΔᐃᐃΔⲆⲆ;
    ⲆⲆ[87][1] = Δᐃ.ΔΔΔⲆⲆΔⲆⵠΔ;
    ⲆⲆ[82] = [];
    ⲆⲆ[82][0] = Δᐃ.ⲆᐃᐃⵠᐃΔⵠ;
    ⲆⲆ[82][1] = Δᐃ.ᐃᐃΔΔΔΔᐃ;
    ⲆⲆ[621] = [];
    ⲆⲆ[621][0] = [];
    ⲆⲆ[621][1] = [];
    ⲆⲆ[621][0].push(Δᐃ.ⲆᐃⲆⵠᐃⵠᐃⵠⵠ);
    ⲆⲆ[621][0].push(Δᐃ.ⲆⲆᐃΔⲆⵠᐃⵠⵠ);
    ⲆⲆ[621][0].push(Δᐃ.ᐃⲆΔⵠᐃⵠΔⲆⵠ);
    ⲆⲆ[621][1].push(Δᐃ.ᐃΔᐃⵠΔⲆᐃΔΔ);
    ⲆⲆ[621][1].push(Δᐃ.ΔⲆΔᐃᐃⲆⵠⲆΔ);
    ⲆⲆ[621][1].push(Δᐃ.ⲆⵠΔᐃⵠⵠⵠⲆⲆ);
    ⲆⲆ[619] = [];
    ⲆⲆ[619][0] = [];
    ⲆⲆ[619][1] = [];
    ⲆⲆ[619][0].push(Δᐃ.ⵠΔⲆΔⵠᐃᐃⲆⵠ);
    ⲆⲆ[619][0].push(Δᐃ.ⵠⲆⵠᐃⵠΔΔⲆⲆ);
    ⲆⲆ[619][0].push(Δᐃ.ⲆⲆᐃⵠⲆΔⵠΔⲆ);
    ⲆⲆ[619][1].push(Δᐃ.ⵠⲆⵠⲆⵠᐃΔᐃᐃ);
    ⲆⲆ[619][1].push(Δᐃ.ΔΔⵠⵠⵠⲆΔⵠⲆ);
    ⲆⲆ[619][1].push(Δᐃ.ⲆᐃⲆΔᐃⵠⵠΔⵠ);
    ⲆⲆ[620] = [];
    ⲆⲆ[620][0] = [];
    ⲆⲆ[620][1] = [];
    ⲆⲆ[620][0].push(Δᐃ.ⲆΔⲆᐃⵠΔΔⲆⲆ);
    ⲆⲆ[620][0].push(Δᐃ.ΔⲆΔⵠΔⲆⲆᐃΔ);
    ⲆⲆ[620][0].push(Δᐃ.ΔⲆΔΔⵠᐃⲆⲆⵠ);
    ⲆⲆ[620][1].push(Δᐃ.ΔⵠΔⵠΔΔⵠⲆΔ);
    ⲆⲆ[620][1].push(Δᐃ.ΔΔΔΔᐃΔᐃΔⲆ);
    ⲆⲆ[620][1].push(Δᐃ.ⵠⲆⲆⵠᐃⵠΔⲆⵠ);
    ⲆⲆⲆⲆ.g = [];
    ⲆⲆⲆⲆ.g[0] = [Δᐃ.ⵠᐃᐃⵠⵠᐃⲆ, Δᐃ.ⵠᐃⵠⲆⵠⲆᐃ];
    ⲆⲆⲆⲆ.g[1] = ⲆⲆⲆⲆ.g[0];
    ⲆⲆⲆⲆ.g[2] = [Δᐃ.ΔⲆⲆᐃⲆΔΔ, Δᐃ.ⵠᐃᐃⲆⲆⵠᐃ];
    ⲆⲆⲆⲆ.m = [];
    ⲆⲆⲆⲆ.m[0] = [Δᐃ.Ⲇᐃᐃᐃⵠⵠᐃ, Δᐃ.ⲆΔᐃΔⵠΔᐃ];
    ⲆⲆⲆⲆ.m[1] = ⲆⲆⲆⲆ.m[0];
    ⲆⲆⲆⲆ.m[2] = [Δᐃ.ⲆⲆⲆⵠⲆⵠΔ, Δᐃ.ⲆΔⵠᐃⲆᐃⵠ];
    ⲆⲆⲆⲆ.la = [];
    ⲆⲆⲆⲆ.la[0] = [Δᐃ.ⵠⲆⲆⵠᐃΔⵠ, Δᐃ.ᐃⵠⲆⵠⲆⵠᐃ];
    ⲆⲆⲆⲆ.la[1] = ⲆⲆⲆⲆ.la[0];
    ⲆⲆⲆⲆ.la[2] = ⲆⲆⲆⲆ.la[0];
    ⲆⲆⲆⲆ.la[3] = ⲆⲆⲆⲆ.la[0];
    ⲆⲆⲆⲆ.la[4] = ⲆⲆⲆⲆ.la[0];
    ⲆⲆⲆⲆ.la[5] = ⲆⲆⲆⲆ.la[0];
    ⲆⲆⲆⲆ.s = [];
    ⲆⲆⲆⲆ.s[0] = [Δᐃ.ⲆΔᐃΔΔⵠΔ, Δᐃ.ⵠⵠΔⵠᐃΔΔ];
    ⲆⲆⲆⲆ.s[1] = ⲆⲆⲆⲆ.s[0];
    ⲆⲆⲆⲆ.s[2] = [Δᐃ.ⲆⵠΔⵠⵠΔᐃ, Δᐃ.ⲆᐃΔΔⵠⵠΔ];
    ⲆⲆⲆⲆ.p = [];
    ⲆⲆⲆⲆ.p[0] = [Δᐃ.ΔᐃⵠΔᐃⵠⲆ, Δᐃ.ΔᐃⵠΔᐃⵠⲆ];
    ⲆⲆⲆⲆ.a = [];
    ⲆⲆⲆⲆ.a[0] = [Δᐃ.ᐃⲆⲆⲆⲆⵠⲆ, Δᐃ.ΔⲆⲆⵠᐃΔΔ];
    ⲆⲆⲆⲆ.a[1] = ⲆⲆⲆⲆ.a[0];
    ⲆⲆⲆⲆ.a[2] = ⲆⲆⲆⲆ.a[0];
    ⲆⲆⲆⲆ.d = [];
    ⲆⲆⲆⲆ.d[0] = [Δᐃ.ⲆᐃⲆⵠΔΔᐃ, Δᐃ.ᐃᐃΔᐃⲆⲆᐃ];
    ⲆⲆⲆⲆ.d[1] = ⲆⲆⲆⲆ.d[0];
    ⲆⲆⲆⲆ.d[2] = ⲆⲆⲆⲆ.d[0];
    ⲆⲆⲆⲆ.re = [];
    ⲆⲆⲆⲆ.re[0] = [Δᐃ.ΔᐃΔⲆᐃΔᐃ, Δᐃ.ⲆⵠᐃⲆⵠⲆΔ];
    ⲆⲆⲆⲆ.re[1] = ⲆⲆⲆⲆ.re[0];
    ⲆⲆⲆⲆ.re[2] = ⲆⲆⲆⲆ.re[0];
    ⲆⲆⲆⲆ.f = [];
    ⲆⲆⲆⲆ.f[0] = [Δᐃ.ⵠᐃⵠⲆⵠΔⲆ, Δᐃ.ΔⲆⵠⲆᐃᐃⵠ];
    ⲆⲆⲆⲆ.f[1] = ⲆⲆⲆⲆ.f[0];
    ⲆⲆⲆⲆ.f[2] = ⲆⲆⲆⲆ.f[0];
    ⲆⲆⲆⲆ.isl = [];
    ⲆⲆⲆⲆ.isl[0] = [Δᐃ.ᐃⲆⵠⵠΔⲆΔ, Δᐃ.ⲆⲆⵠⵠᐃΔᐃ];
    ⲆⲆⲆⲆ.isl[1] = ⲆⲆⲆⲆ.isl[0];
    ⲆⲆⲆⲆ.isl[2] = ⲆⲆⲆⲆ.isl[0];
    ⲆⲆⲆⲆ.c = [];
    ⲆⲆⲆⲆ.c[0] = [Δᐃ.ⲆᐃⵠⲆⲆⲆⵠ, Δᐃ.ⵠΔⵠⲆⲆΔΔ];
    ⲆⲆⲆⲆ.c[1] = ⲆⲆⲆⲆ.c[0];
    ⲆⲆⲆⲆ.c[2] = ⲆⲆⲆⲆ.c[0];
    ⲆⲆⲆⲆ.wtb = [];
    ⲆⲆⲆⲆ.wtb[0] = [Δᐃ.ᐃΔᐃᐃᐃΔΔ, Δᐃ.ⵠΔᐃⲆⵠⲆΔ];
    ⲆⲆⲆⲆ.PIRANHA = [Δᐃ.ΔⲆⲆΔⵠᐃΔ, Δᐃ.ᐃⲆᐃΔΔⲆΔ];
    ⲆⲆⲆⲆ.KRAKEN = [Δᐃ.ⲆⲆⵠΔⲆΔΔ, Δᐃ.ΔⲆᐃΔⵠΔᐃ];
    ⲆⲆⲆⲆ.FOX = [Δᐃ.ᐃᐃᐃΔΔⲆᐃ, Δᐃ.ᐃᐃᐃᐃⵠⲆⲆ];
    ⲆⲆⲆⲆ.WOLF = [Δᐃ.ⲆⵠⵠᐃⲆⲆΔ, Δᐃ.ΔⲆⵠⲆⲆⲆᐃ];
    ⲆⲆⲆⲆ.SPIDER = [Δᐃ.ᐃⵠⵠᐃᐃⵠⲆ, Δᐃ.ⵠⲆΔⵠΔᐃⲆ];
    ⲆⲆⲆⲆ.BEAR = [Δᐃ.ᐃΔⲆΔᐃᐃⲆ, Δᐃ.ΔΔΔⲆⵠⲆⲆ];
    ⲆⲆⲆⲆ.CAVE = [Δᐃ.ⲆΔⵠᐃⲆⵠⵠ, Δᐃ.ⲆΔΔᐃⲆⲆⲆ];
    ⲆⲆⲆⲆ.MAP = [Δᐃ.ΔⵠΔᐃᐃⵠᐃ, Δᐃ.ⲆⲆⵠᐃΔⵠⵠ];
    ⲆⲆⲆⲆ.FOREST = [Δᐃ.ⵠᐃⲆᐃᐃⲆᐃ, Δᐃ.ⵠΔⲆᐃᐃⵠⵠ];
    ⲆⲆⲆⲆ.WINTER = [Δᐃ.ⵠⲆᐃᐃⵠⵠⲆ, Δᐃ.ⵠⲆᐃᐃΔΔᐃ];
    ⲆⲆⲆⲆ.DESERT = [Δᐃ.ⲆᐃΔⵠΔⵠⲆ, Δᐃ.ⵠⲆⲆⲆΔⲆⲆ];
    ⲆⲆⲆⲆ.LAVA = [Δᐃ.ΔΔⲆⲆⲆΔⵠ, Δᐃ.ⲆᐃⲆᐃΔⲆᐃ];
    for (var c in ⲆⲆⲆⲆ) {
      for (var d = ⲆⲆⲆⲆ[c], f = 0; f < d.length; f++) {
        var g = d[f];
        if (g.ⲆⲆⵠΔⲆⲆⵠ !== Xq) {
          g.ⲆⲆⵠΔⲆⲆⵠ();
        } else if (g.length > 0) {
          for (var h = 0; h < g.length; h++) {
            if (g[h].ⲆⲆⵠΔⲆⲆⵠ !== kn) {
              g[h].ⲆⲆⵠΔⲆⲆⵠ();
            }
          }
        }
      }
    }
    console.log(undefined, fk);
  }
  function Rm(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 310;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 126, a * 192);
    f.bezierCurveTo(a * 198, a * 202, a * 245, a * 203, a * 335, a * 194);
    f.bezierCurveTo(a * 336, a * 232, a * 326, a * 235, a * 232, a * 237);
    f.bezierCurveTo(a * 161, a * 235, a * 122, a * 235, a * 126, a * 193);
    f.closePath();
    Td(f, c[0], c[1], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 146, a * 239);
    f.bezierCurveTo(a * 174, a * 74, a * 287, a * 88, a * 320, a * 240);
    f.bezierCurveTo(a * 329, a * 231, a * 340, a * 219, a * 332, a * 115);
    f.bezierCurveTo(a * 330, a * 40, a * 144, a * 30, a * 129, a * 116);
    f.bezierCurveTo(a * 124, a * 217, a * 124, a * 228, a * 143, a * 237);
    f.closePath();
    Td(f, c[0], c[1], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 126, a * 193);
    f.bezierCurveTo(a * 173, a * 94, a * 209, a * 100, a * 228, a * 57);
    f.bezierCurveTo(a * 190, a * 112, a * 165, a * 115, a * 127, a * 184);
    f.closePath();
    Td(f, kn, c[1], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 230, a * 57);
    f.bezierCurveTo(a * 266, a * 117, a * 310, a * 130, a * 332, a * 183);
    f.bezierCurveTo(a * 290, a * 112, a * 262, a * 109, a * 230, a * 56);
    f.closePath();
    Td(f, undefined, c[1], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 154, a * 212);
    f.bezierCurveTo(a * 208, a * 224, a * 252, a * 219, a * 305, a * 212);
    f.bezierCurveTo(a * 267, a * 219, a * 204, a * 222, a * 155, a * 212);
    f.closePath();
    Td(f, undefined, c[1], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 239, a * 59);
    f.bezierCurveTo(a * 302, a * 72, a * 325, a * 84, a * 326, a * 115);
    f.bezierCurveTo(a * 289, a * 80, a * 270, a * 88, a * 253, a * 78);
    f.closePath();
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 216, a * 61);
    f.bezierCurveTo(a * 209, a * 70, a * 209, a * 70, a * 202, a * 79);
    f.bezierCurveTo(a * 173, a * 87, a * 162, a * 91, a * 137, a * 107);
    f.bezierCurveTo(a * 153, a * 78, a * 174, a * 67, a * 212, a * 62);
    f.closePath();
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 175, a * 125);
    f.bezierCurveTo(a * 218, a * 94, a * 238, a * 90, a * 281, a * 125);
    f.bezierCurveTo(a * 245, a * 89, a * 240, a * 80, a * 228, a * 67);
    f.bezierCurveTo(a * 207, a * 100, a * 192, a * 104, a * 177, a * 123);
    f.closePath();
    Td(f, c[2]);
    return d;
  }
  function Gm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 48;
    c.height = a * 47;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 7.1875, a * 25.434661865234375);
    d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
    d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
    d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
    d.closePath();
    Td(d, b[0]);
    return c;
  }
  function jm(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    f.save();
    f.translate(a * 156.07142639160156, a * 51.81248474121094);
    f.rotate(0);
    yd(f, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    f.restore();
    Td(f, c[1], c[2], a * 15);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 110.57142639160156, a * 197.09820556640625);
    f.bezierCurveTo(a * 158.07142639160156, a * 179.09820556640625, a * 158.07142639160156, a * 179.09820556640625, a * 205.57142639160156, a * 161.09820556640625);
    f.bezierCurveTo(a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 309.8125);
    f.bezierCurveTo(a * 205.57142639160156, a * 323.8125, a * 200.57142639160156, a * 325.8125, a * 187.57142639160156, a * 326.8125);
    f.bezierCurveTo(a * 155.57142639160156, a * 326.3125, a * 155.57142639160156, a * 326.3125, a * 123.57142639160156, a * 325.8125);
    f.bezierCurveTo(a * 111.57142639160156, a * 326.8125, a * 109.57142639160156, a * 321.8125, a * 110.57142639160156, a * 312.8125);
    f.closePath();
    Td(f, c[3], c[4], a * 15);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    f.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    f.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    f.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    f.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    f.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    f.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    f.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    f.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    f.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    f.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    f.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    f.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    f.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    f.closePath();
    Td(f, Al, c[5], a * 15);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    f.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    f.closePath();
    Td(f, ur, c[6], a * 15);
    return d;
  }
  function Lm(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    f.globalAlpha = 0.5;
    Pd(f, a * 69, a * 64, a * 48.16637831516918);
    Td(f, c[1]);
    f.globalAlpha = 0.7;
    Pd(f, a * 69, a * 64, a * 38.23105625617661);
    Td(f, c[2]);
    f.globalAlpha = 0.7;
    Pd(f, a * 69, a * 64, a * 32.01562118716424);
    Td(f, c[2], c[3], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 72, a * 41);
    f.bezierCurveTo(a * 52, a * 41, a * 48, a * 50, a * 45, a * 58);
    f.bezierCurveTo(a * 43, a * 67, a * 45, a * 68, a * 46, a * 72);
    f.bezierCurveTo(a * 52, a * 53, a * 60, a * 48, a * 72, a * 42);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 93, a * 62);
    f.bezierCurveTo(a * 95, a * 72, a * 90, a * 81, a * 81, a * 87);
    f.bezierCurveTo(a * 74, a * 91, a * 69, a * 89, a * 64, a * 88);
    f.bezierCurveTo(a * 77, a * 83, a * 84, a * 82, a * 92, a * 62);
    f.closePath();
    Td(f, c[3]);
    return d;
  }
  function Wm(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 151;
    d.height = a * 80;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 133, a * 54);
    f.bezierCurveTo(a * 136, a * 18, a * 129, a * 18, a * 114, a * 13);
    f.bezierCurveTo(a * 51, a * 0, a * 36, a * 16, a * 34, a * 16);
    f.bezierCurveTo(a * 8, a * 28, a * 22, a * 56, a * 21, a * 57);
    f.closePath();
    Td(f, c[2], c[3], 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 130, a * 40);
    f.bezierCurveTo(a * 132, a * 35, a * 132, a * 30, a * 132, a * 29);
    f.bezierCurveTo(a * 145, a * 38, a * 144, a * 43, a * 137, a * 54);
    f.closePath();
    Td(f, c[0], c[1], 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 20, a * 33);
    f.bezierCurveTo(a * 24, a * 44, a * 215, a * 39, a * 23, a * 44);
    f.bezierCurveTo(a * 19, a * 49, a * 19, a * 49, a * 15, a * 54);
    f.bezierCurveTo(a * 4, a * 43, a * 10, a * 35, a * 20, a * 32);
    f.closePath();
    Td(f, c[0], c[1], 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 18, a * 52);
    f.bezierCurveTo(a * 24, a * 31, a * 34, a * 25, a * 75, a * 23);
    f.bezierCurveTo(a * 130, a * 24, a * 129, a * 32, a * 134, a * 51);
    f.bezierCurveTo(a * 138, a * 70, a * 126, a * 72, a * 90, a * 73);
    f.bezierCurveTo(a * 18, a * 72, a * 15, a * 68, a * 18, a * 54);
    f.closePath();
    Td(f, c[0], c[1], 4);
    return d;
  }
  function Om(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 168;
    d.height = a * 100;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 10, a * 5);
    f.save();
    f.translate(a * 24.5, a * 44.30000305175781);
    yd(f, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    f.restore();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 115, a * 37.80000305175781);
    f.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    f.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    f.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    f.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    f.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    f.closePath();
    Td(f, c[0]);
    Pd(f, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * -10, a * -5);
    f.save();
    f.translate(a * 24.5, a * 44.30000305175781);
    yd(f, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    f.restore();
    Td(f, ah, c[3], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 115, a * 37.80000305175781);
    f.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    f.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    f.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    f.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    f.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    f.closePath();
    Td(f, undefined, c[3], a * 6);
    Pd(f, a * 78, a * 44.80000305175781, a * 42.44616584663204);
    Td(f, Ao, c[3], a * 6);
    f.save();
    f.translate(a * 24.5, a * 44.30000305175781);
    yd(f, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    f.restore();
    Td(f, c[1]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 115, a * 37.80000305175781);
    f.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    f.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    f.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    f.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    f.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    f.closePath();
    Td(f, c[1]);
    Pd(f, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    Td(f, c[2], c[1], a * 4);
    Pd(f, a * 78, a * 44.80000305175781, a * 29.68164415931166);
    Td(f, c[3], c[1], a * 4);
    Pd(f, a * 78, a * 44, a * 20);
    Td(f, c[4]);
    return d;
  }
  function Nm(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    f.translate(a * 2, a * 1);
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(0, a * 10);
    f.save();
    f.translate(a * 98, a * 41.15177917480469);
    f.rotate(0.8);
    yd(f, a * -16, a * -16.5, a * 32, a * 33, a * 7);
    f.restore();
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 98, a * 22.5089111328125);
    f.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    Td(f, c[2]);
    f.save();
    f.translate(a * 147.5, a * 69.5089111328125);
    f.rotate(0.2);
    yd(f, a * -15.5, a * -16, a * 31, a * 32, a * 7);
    f.restore();
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 163, a * 59.50892639160156);
    f.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    Td(f, c[2]);
    f.save();
    f.translate(a * 143.5, a * 128.2946319580078);
    f.rotate(1.24);
    yd(f, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    f.restore();
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 162, a * 135.93748474121094);
    f.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    Td(f, c[2]);
    f.save();
    f.translate(a * 99, a * 156.08035278320312);
    f.rotate(0.84);
    yd(f, a * -18, a * -18, a * 36, a * 36, a * 7);
    f.restore();
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 98, a * 136.08035278320312);
    f.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    Td(f, c[2]);
    f.save();
    f.translate(a * 54, a * 72.22320556640625);
    f.rotate(1.32);
    yd(f, a * -18, a * -19, a * 36, a * 38, a * 7);
    f.restore();
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 34, a * 60.79463195800781);
    f.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    Td(f, c[2]);
    f.save();
    f.translate(a * 49, a * 127.29463195800781);
    f.rotate(1.76);
    yd(f, a * -20, a * -17.5, a * 40, a * 35, a * 7);
    f.restore();
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 30, a * 141.7946319580078);
    f.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    Td(f, c[2]);
    f.globalAlpha = 1;
    f.translate(0, a * -10);
    f.save();
    f.translate(a * 98, a * 41.15177917480469);
    f.rotate(0.8);
    yd(f, a * -16, a * -16.5, a * 32, a * 33, a * 7);
    f.restore();
    Td(f, c[3], c[4], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 98, a * 22.5089111328125);
    f.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    Td(f, cq, c[4], a * 5);
    f.save();
    f.translate(a * 147.5, a * 69.5089111328125);
    f.rotate(0.2);
    yd(f, a * -15.5, a * -16, a * 31, a * 32, a * 7);
    f.restore();
    Td(f, c[3], c[4], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 163, a * 59.50892639160156);
    f.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    Td(f, undefined, c[4], a * 5);
    f.save();
    f.translate(a * 143.5, a * 128.2946319580078);
    f.rotate(1.24);
    yd(f, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    f.restore();
    Td(f, c[3], c[4], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 162, a * 135.93748474121094);
    f.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    Td(f, Cr, c[4], a * 5);
    f.save();
    f.translate(a * 99, a * 156.08035278320312);
    f.rotate(0.84);
    yd(f, a * -18, a * -18, a * 36, a * 36, a * 7);
    f.restore();
    Td(f, c[3], c[4], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 98, a * 136.08035278320312);
    f.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    Td(f, mk, c[4], a * 5);
    f.save();
    f.translate(a * 54, a * 72.22320556640625);
    f.rotate(1.32);
    yd(f, a * -18, a * -19, a * 36, a * 38, a * 7);
    f.restore();
    Td(f, c[3], c[4], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 34, a * 60.79463195800781);
    f.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    Td(f, undefined, c[4], a * 5);
    f.save();
    f.translate(a * 49, a * 127.29463195800781);
    f.rotate(1.76);
    yd(f, a * -20, a * -17.5, a * 40, a * 35, a * 7);
    f.restore();
    Td(f, c[3], c[4], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 30, a * 141.7946319580078);
    f.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    Td(f, mk, c[4], a * 5);
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(0, a * 10);
    f.save();
    f.translate(a * 98, a * 99);
    wd(f, 6, a * 70.28669492273468, a * 10);
    f.restore();
    Td(f, c[2]);
    f.save();
    f.translate(a * 98, a * 99);
    wd(f, 6, a * 56.455940020351264, a * 10);
    f.restore();
    Td(f, c[2]);
    f.globalAlpha = 1;
    f.translate(0, a * -10);
    f.save();
    f.translate(a * 98, a * 99);
    wd(f, 6, a * 70.28669492273468, a * 10);
    f.restore();
    Td(f, c[5], c[6], a * 5);
    f.save();
    f.translate(a * 98, a * 99);
    wd(f, 6, a * 56.455940020351264, a * 10);
    f.restore();
    Td(f, c[7], c[8], a * 7);
    return d;
  }
  function qm(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 5, a * 5);
    Pd(f, a * 220, a * 201, a * 170.41713528867922);
    Td(f, c[0], c[0], a * 6);
    f.globalAlpha = 1;
    f.translate(a * -5, a * -5);
    Pd(f, a * 220, a * 201, a * 170.41713528867922);
    Td(f, c[1], c[2], a * 6);
    Pd(f, a * 220, a * 201, a * 130);
    Td(f, c[11], c[2], a * 6);
    Pd(f, a * 222, a * 199, a * 120.74767078498864);
    Td(f, ah, c[3], a * 40);
    Pd(f, a * 220, a * 200, a * 95.44108130150245);
    Td(f, ah, c[2], a * 15);
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 5, a * 5);
    Pd(f, a * 63, a * 136, a * 49.193495504995376);
    Td(f, c[0], c[0], a * 4);
    f.globalAlpha = 1;
    f.translate(a * -5, a * -5);
    Pd(f, a * 63, a * 136, a * 49.193495504995376);
    Td(f, c[8], c[2], a * 4);
    Pd(f, a * 63, a * 137, a * 25.632011235952593);
    Td(f, c[7], c[2], a * 4);
    return d;
  }
  function Hm(b, c, d, f) {
    var g = document.createElement("canvas");
    var h = g.getContext("2d");
    g.width = b * 450;
    g.height = b * 260;
    var a = om(b * 1, lh, d);
    h.drawImage(a, b * 0, b * 0);
    if (f == 1) {
      h.translate(b * 100, b * 0);
      Pd(h, b * 113, b * 120, b * 66);
      Td(h, undefined, d[4], b * 13);
      a = tu(b * 0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
      h.rotate(0.7);
      h.drawImage(a, b * 133, b * -64);
      h.rotate(-0.7);
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 70, b * 70);
      h.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      h.closePath();
      Td(h, undefined, d[4], b * 13);
    } else if (f == 2) {
      h.translate(b * 100, b * 0);
      Pd(h, b * 113, b * 120, b * 66);
      Td(h, undefined, d[4], b * 13);
      h.translate(b * 30, b * 40);
      h.save();
      h.translate(b * 83.5, b * 66.5);
      yd(h, b * -40.5, b * -29.5, b * 81, b * 59, b * 15);
      h.restore();
      Td(h, "#dff2f7", "#187484", b * 7);
      Pd(h, b * 22, b * 82, b * 12);
      Td(h, "#dff2f7", "#187484", b * 7);
      Pd(h, b * 145, b * 82, b * 12);
      Td(h, "#dff2f7", "#187484", b * 7);
      a = cc(b * 0.5, Gr, ["#80500b", "#7c4908"]);
      h.drawImage(a, b * 10, b * 85);
      a = cc(b * 0.5, true, ["#80500b", "#7c4908"]);
      h.drawImage(a, b * 50, b * 85);
      a = cc(b * 0.5, true, ["#80500b", "#7c4908"]);
      h.drawImage(a, b * 90, b * 85);
      a = Rc(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      h.drawImage(a, b * 90, b * 105);
      a = Rc(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      h.drawImage(a, b * 90, b * 105);
      a = Rc(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      h.drawImage(a, b * 30, b * 125);
      a = Rc(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      h.drawImage(a, b * 50, b * 115);
      a = Rc(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      h.drawImage(a, b * 30, b * 100);
      a = Rc(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      h.drawImage(a, b * 80, b * 120);
      a = Rc(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      h.drawImage(a, b * 110, b * 125);
      a = Rc(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      h.drawImage(a, b * 120, b * 105);
    } else if (f == 3) {
      h.translate(b * 100, b * 0);
      Pd(h, b * 113, b * 120, b * 66);
      Td(h, undefined, d[4], b * 13);
      h.translate(b * 40, b * 50);
      h.save();
      h.translate(b * 71, b * 69);
      yd(h, b * -30, b * -42, b * 60, b * 84, b * 10);
      h.restore();
      Td(h, undefined, d[5], b * 4);
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 42, b * 28);
      h.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
      h.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
      h.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
      h.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
      h.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
      h.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
      h.closePath();
      Td(h, d[5], d[5], b * 4);
      h.translate(b * -40, b * -50);
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 70, b * 70);
      h.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      h.closePath();
      Td(h, Ma, d[4], b * 13);
    } else if (f == 4) {
      h.scale(1, 1);
      h.translate(b * 70, b * 50);
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 23, b * 6);
      h.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
      Td(h, Wn, d[5], b * 14);
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 59, b * 10);
      h.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
      Td(h, undefined, d[5], b * 14);
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 7, b * 55);
      h.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
      Td(h, undefined, d[5], b * 14);
      h.translate(b * 10, b * 0);
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 123, b * 16);
      h.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, b * 17);
      h.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
      h.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
      Td(h, ur, d[5], b * 14);
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 72, b * 63);
      h.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
      Td(h, zo, d[5], b * 14);
      h.translate(b * 10, b * 10);
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 141, b * 8);
      h.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
      h.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
      Td(h, undefined, d[5], b * 14);
      h.translate(b * 10, b * -10);
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 205, b * 124);
      h.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, b * 14);
      h.bezierCurveTo(b * 239, b * 15, b * 250, b * 37, b * 249, b * 49);
      h.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
      Td(h, Wn, d[5], b * 14);
    }
    return g;
  }
  function Um(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 109;
    d.height = a * 110;
    Pd(f, a * 54.5, a * 55, a * 48.038209575038294);
    Td(f, b[0], b[1], a * 8);
    if (c == 0) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 54.928558349609375, a * 43.72320556640625);
      f.bezierCurveTo(a * 66.92855834960938, a * 31.72320556640625, a * 69.92855834960938, a * 29.72320556640625, a * 74.92855834960938, a * 29.72320556640625);
      f.bezierCurveTo(a * 86.92855834960938, a * 28.72320556640625, a * 91.92855834960938, a * 42.72320556640625, a * 89.92855834960938, a * 52.72320556640625);
      f.bezierCurveTo(a * 88.92855834960938, a * 63.72320556640625, a * 73.92855834960938, a * 75.72320556640625, a * 55.928558349609375, a * 87.72320556640625);
      f.bezierCurveTo(a * 37.928558349609375, a * 78.72320556640625, a * 26.928558349609375, a * 65.72320556640625, a * 19.928558349609375, a * 54.72320556640625);
      f.bezierCurveTo(a * 13.928558349609375, a * 42.72320556640625, a * 21.928558349609375, a * 28.72320556640625, a * 35.928558349609375, a * 29.72320556640625);
      f.bezierCurveTo(a * 45.928558349609375, a * 31.72320556640625, a * 51.928558349609375, a * 40.72320556640625, a * 53.928558349609375, a * 44.72320556640625);
      f.closePath();
      Td(f, b[2]);
    } else if (c == 1) {
      f.save();
      f.translate(a * 55, a * 39.48748779296875);
      yd(f, a * -11.5, a * -36, a * 23, a * 72, a * 10);
      f.restore();
      Td(f, b[2], b[3], a * 4);
      Pd(f, a * 54.5, a * 78.48748779296875, a * 22.02271554554524);
      Td(f, b[4], b[3], a * 4);
      f.save();
      f.translate(a * 55.5, a * 57.287506103515625);
      yd(f, a * -9, a * -16, a * 18, a * 32, a * 10);
      f.restore();
      Td(f, b[4]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 66.5, a * 25.287506103515625);
      f.bezierCurveTo(a * 60.5, a * 25.287506103515625, a * 63.5, a * 25.287506103515625, a * 54.5, a * 25.287506103515625);
      f.closePath();
      Td(f, Xj, b[5], a * 4);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 66.5, a * 37.287506103515625);
      f.bezierCurveTo(a * 60.5, a * 37.287506103515625, a * 60.5, a * 37.287506103515625, a * 54.5, a * 37.287506103515625);
      f.closePath();
      Td(f, w, b[5], a * 4);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 66.5, a * 50.287506103515625);
      f.bezierCurveTo(a * 61, a * 50.287506103515625, a * 61, a * 50.287506103515625, a * 55.5, a * 50.287506103515625);
      f.closePath();
      Td(f, undefined, b[5], a * 4);
    } else if (c == 2) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 45.928558349609375, a * 55.29463195800781);
      f.bezierCurveTo(a * 38.928558349609375, a * 67.29463195800781, a * 38.928558349609375, a * 67.29463195800781, a * 31.928558349609375, a * 79.29463195800781);
      f.bezierCurveTo(a * 15.928558349609375, a * 85.29463195800781, a * 17.928558349609375, a * 86.29463195800781, a * 17.928558349609375, a * 90.29463195800781);
      f.bezierCurveTo(a * 19.928558349609375, a * 94.29463195800781, a * 21.928558349609375, a * 94.29463195800781, a * 27.928558349609375, a * 92.29463195800781);
      f.bezierCurveTo(a * 29.928558349609375, a * 98.29463195800781, a * 30.928558349609375, a * 99.29463195800781, a * 33.928558349609375, a * 99.29463195800781);
      f.bezierCurveTo(a * 38.928558349609375, a * 97.29463195800781, a * 38.928558349609375, a * 93.29463195800781, a * 37.928558349609375, a * 86.29463195800781);
      f.bezierCurveTo(a * 45.428558349609375, a * 73.29463195800781, a * 51.928558349609375, a * 64.29463195800781, a * 52.928558349609375, a * 60.29463195800781);
      f.closePath();
      Td(f, b[2]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 55.928558349609375, a * 8.866058349609375);
      f.bezierCurveTo(a * 35.928558349609375, a * 35.866058349609375, a * 37.928558349609375, a * 48.866058349609375, a * 46.928558349609375, a * 62.866058349609375);
      f.bezierCurveTo(a * 65.92855834960938, a * 72.86605834960938, a * 80.92855834960938, a * 55.866058349609375, a * 93.92855834960938, a * 36.866058349609375);
      f.closePath();
      Td(f, b[3], b[4], a * 6);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 93.92855834960938, a * 36.866058349609375);
      f.bezierCurveTo(a * 82.92855834960938, a * 37.866058349609375, a * 77.92855834960938, a * 36.866058349609375, a * 67.92855834960938, a * 28.866058349609375);
      f.bezierCurveTo(a * 53.928558349609375, a * 16.866058349609375, a * 53.928558349609375, a * 14.866058349609375, a * 55.928558349609375, a * 7.866058349609375);
      f.bezierCurveTo(a * 65.92855834960938, a * 4.866058349609375, a * 71.92855834960938, a * 7.866058349609375, a * 83.92855834960938, a * 13.866058349609375);
      f.bezierCurveTo(a * 96.92855834960938, a * 21.866058349609375, a * 95.92855834960938, a * 31.866058349609375, a * 92.92855834960938, a * 36.866058349609375);
      f.closePath();
      Td(f, b[3], b[4], a * 6);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 68.92855834960938, a * 16.866058349609375);
      f.bezierCurveTo(a * 71.92855834960938, a * 13.866058349609375, a * 76.92855834960938, a * 16.866058349609375, a * 79.92855834960938, a * 21.866058349609375);
      f.bezierCurveTo(a * 82.92855834960938, a * 24.866058349609375, a * 81.92855834960938, a * 27.866058349609375, a * 73.92855834960938, a * 24.866058349609375);
      f.bezierCurveTo(a * 67.92855834960938, a * 20.866058349609375, a * 66.92855834960938, a * 19.866058349609375, a * 67.92855834960938, a * 17.866058349609375);
      f.closePath();
      Td(f, b[2]);
    } else if (c == 3) {
      f.scale(0.9, 0.9);
      f.translate(a * 6, 0);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 54, a * 0.421875);
      f.bezierCurveTo(a * 84, a * 45.421875, a * 89, a * 51.421875, a * 83, a * 74.421875);
      f.bezierCurveTo(a * 74, a * 95.421875, a * 46, a * 98.421875, a * 30, a * 78.421875);
      f.bezierCurveTo(a * 22, a * 59.421875, a * 27, a * 49.421875, a * 34, a * 36.421875);
      f.closePath();
      Td(f, b[2], b[3], a * 6);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 74, a * 52.421875);
      f.bezierCurveTo(a * 77, a * 73.421875, a * 69, a * 81.421875, a * 58, a * 81.421875);
      f.bezierCurveTo(a * 66, a * 71.421875, a * 70, a * 66.421875, a * 74, a * 52.421875);
      f.closePath();
      Td(f, b[3]);
    }
    return d;
  }
  function Ym(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 170;
    f.translate(0, a * -170);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 159.5, a * 322.0625);
    f.bezierCurveTo(a * 240.5, a * 293.0625, a * 240.5, a * 293.0625, a * 321.5, a * 264.0625);
    f.bezierCurveTo(a * 276.5, a * 230.0625, a * 276.5, a * 230.0625, a * 231.5, a * 196.0625);
    f.bezierCurveTo(a * 158.5, a * 221.5625, a * 158.5, a * 221.5625, a * 85.5, a * 247.0625);
    f.closePath();
    Td(f, c[0], c[1], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 212.5, a * 270.0625);
    f.bezierCurveTo(a * 235, a * 261.5625, a * 235, a * 261.5625, a * 257.5, a * 253.0625);
    f.closePath();
    Td(f, cq, c[0], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 193.5, a * 226.0625);
    f.bezierCurveTo(a * 204.5, a * 242.0625, a * 242.5, a * 237.0625, a * 251.5, a * 225.0625);
    f.bezierCurveTo(a * 246.5, a * 195.0625, a * 205.5, a * 190.0625, a * 193.5, a * 227.0625);
    f.closePath();
    Td(f, c[2], c[3], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 164.5, a * 245.0625);
    f.bezierCurveTo(a * 182.5, a * 264.0625, a * 252.5, a * 258.0625, a * 276.5, a * 244.0625);
    f.bezierCurveTo(a * 265.5, a * 226.0625, a * 244.5, a * 231.0625, a * 229.5, a * 230.0625);
    f.bezierCurveTo(a * 205.5, a * 227.0625, a * 175.5, a * 202.0625, a * 162.5, a * 244.0625);
    f.closePath();
    Td(f, c[2], c[3], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 115.5, a * 260.0625);
    f.bezierCurveTo(a * 134.5, a * 279.0625, a * 170.5, a * 275.0625, a * 191.5, a * 257.0625);
    f.bezierCurveTo(a * 174.5, a * 208.0625, a * 142.5, a * 197.0625, a * 116.5, a * 259.0625);
    f.closePath();
    Td(f, c[2], c[3], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 152.5, a * 278.0625);
    f.bezierCurveTo(a * 165.5, a * 294.0625, a * 200.5, a * 287.0625, a * 216.5, a * 278.0625);
    f.bezierCurveTo(a * 206.5, a * 247.0625, a * 173.5, a * 233.0625, a * 153.5, a * 276.0625);
    f.closePath();
    Td(f, c[2], c[3], a * 12);
    return d;
  }
  function Km(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 88;
    f.save();
    f.translate(a * 44, a * 44);
    f.rotate(0.52);
    wd(f, 6, a * 43, a * 10);
    f.restore();
    Td(f, c[0], c[1], a * 3);
    return d;
  }
  function Vm() {
    var a = 1;
    new Date().getTime();
    Fm();
    fm();
    ⲆⲆ[540] = [];
    ⲆⲆ[540][0] = [];
    ⲆⲆ[540][1] = [];
    for (var b = 0; b < 5; b++) {
      ⲆⲆ[540][0].push(Yq(sc(a, 4 + b, "#59B8CE")));
      ⲆⲆ[540][1].push(Yq(sc(a, 4 + b, "#90DDD9")));
    }
    ⲆⲆ[470] = [];
    ⲆⲆ[470][0] = [];
    ⲆⲆ[470][1] = [];
    for (b = 0; b < 5; b++) {
      ⲆⲆ[470][0].push(Yq(sc(a, 4 + b, "#fff")));
      ⲆⲆ[470][1].push(Yq(sc(a, 4 + b, "#fff")));
    }
    ⲆⲆ[471] = [];
    ⲆⲆ[471][0] = [];
    ⲆⲆ[471][1] = [];
    for (b = 0; b < 5; b++) {
      ⲆⲆ[471][0].push(Yq(sc(a, 6 + b, "#DDCD8A")));
      ⲆⲆ[471][1].push(Yq(sc(a, 6 + b, "#155E57")));
    }
    ⲆⲆ[942] = [];
    ⲆⲆ[942][0] = [];
    ⲆⲆ[942][1] = [];
    for (b = 0; b < 5; b++) {
      ⲆⲆ[942][0].push(Yq(sc(a, 4 + b, "#353326")));
      ⲆⲆ[942][1].push(Yq(sc(a, 4 + b, "#1D2526")));
    }
    ⲆⲆ[201] = [];
    ⲆⲆ[201][0] = Yq(Dd(a * 1.5, 0, ["#ee71a9"]));
    ⲆⲆ[201][1] = Yq(Dd(a * 1.5, 0, ["#ee71a9"]));
    ⲆⲆ[872] = [ⲆⲆ[201]];
    ⲆⲆ[872][1] = [];
    ⲆⲆ[872][2] = [];
    ⲆⲆ[872][3] = [];
    ⲆⲆ[872][4] = [];
    ⲆⲆ[872][1][0] = Yq(Dd(a * 1.5, 0, ["#e2d63b"]));
    ⲆⲆ[872][1][1] = Yq(Dd(a * 1.5, 0, ["#e2d63b"]));
    ⲆⲆ[872][2][0] = Yq(Dd(a * 1.5, 0, ["#309cbd"]));
    ⲆⲆ[872][2][1] = Yq(Dd(a * 1.5, 0, ["#309cbd"]));
    ⲆⲆ[872][3][0] = Yq(Dd(a * 1.5, 0, ["#cd232d"]));
    ⲆⲆ[872][3][1] = Yq(Dd(a * 1.5, 0, ["#cd232d"]));
    ⲆⲆ[872][4][0] = Yq(Dd(a * 1.5, 0, ["#42b672"]));
    ⲆⲆ[872][4][1] = Yq(Dd(a * 1.5, 0, ["#42b672"]));
    if (ΔⵠΔᐃ.ᐃΔᐃⲆΔᐃⵠ("cti", e.location.href)) {
      document.getElementById("version").innerHTML += "[CTI]";
    } else {
      Yq = function (a) {
        a.loaded = 1;
        return a;
      };
    }
    ⲆⲆ[797] = Yq(function () {
      var a = document.createElement("canvas");
      var b = a.getContext("2d");
      a.width = 460;
      a.height = 220;
      b.fillStyle = "#3a2a0d";
      b.fillRect(0, 0, a.width, a.height);
      b.lineWidth = 4;
      b.beginPath();
      b.strokeStyle = "#513810";
      for (var c = 20; c < 220; c += 20) {
        b.moveTo(0, c);
        b.lineTo(460, c);
        b.closePath();
        b.stroke();
      }
      return a;
    }());
    ⲆⲆ[108] = [];
    ⲆⲆ[108][0] = [];
    ⲆⲆ[108][1] = [];
    ⲆⲆ[108][0].push(Yq(zc(a * 1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ⲆⲆ[108][0].push(Yq(zc(a * 0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ⲆⲆ[108][0].push(Yq(zc(a * 0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ⲆⲆ[108][1].push(Yq(zc(a * 1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ⲆⲆ[108][1].push(Yq(zc(a * 0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ⲆⲆ[108][1].push(Yq(zc(a * 0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ⲆⲆ[111] = [];
    ⲆⲆ[111][0] = [];
    ⲆⲆ[111][1] = [];
    ⲆⲆ[111][0].push(Yq(tc(a * 1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⲆⲆ[111][0].push(Yq(tc(a * 1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⲆⲆ[111][0].push(Yq(tc(a * 1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⲆⲆ[111][1].push(Yq(tc(a * 1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
    ⲆⲆ[111][1].push(Yq(tc(a * 1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
    ⲆⲆ[111][1].push(Yq(tc(a * 1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
    ⲆⲆ[112] = [];
    ⲆⲆ[112][0] = [];
    ⲆⲆ[112][1] = [];
    ⲆⲆ[112][0].push(Yq(Lu(a * 1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ⲆⲆ[112][0].push(Yq(Lu(a * 0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ⲆⲆ[112][0].push(Yq(Lu(a * 0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ⲆⲆ[112][1].push(Yq(Lu(a * 1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ⲆⲆ[112][1].push(Yq(Lu(a * 0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ⲆⲆ[112][1].push(Yq(Lu(a * 0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ⲆⲆ[239] = [];
    ⲆⲆ[239][0] = Δᐃ.ᐃⲆⵠΔΔⲆΔ;
    ⲆⲆ[239][1] = Δᐃ.ΔᐃⲆΔⵠᐃⲆ;
    ⲆⲆ[286] = [];
    ⲆⲆ[286][0] = Yq(bu(a * 0.6, ["#0d1b1c"]));
    ⲆⲆ[286][1] = Yq(bu(a * 0.6, ["#030d14"]));
    ⲆⲆ[793] = [];
    ⲆⲆ[793][0] = Yq(ku(a * 0.6, ["#2a2938", "#242330"]));
    ⲆⲆ[793][1] = Yq(ku(a * 0.6, ["#1b1e30", "#161921"]));
    ⲆⲆ[820] = [];
    ⲆⲆ[820][0] = Yq(Sd(a * 0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
    ⲆⲆ[820][1] = Yq(Sd(a * 0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
    ⲆⲆ[821] = [];
    ⲆⲆ[821][0] = Yq(Fd(a * 0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
    ⲆⲆ[821][1] = Yq(Fd(a * 0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
    ⲆⲆ[822] = [];
    ⲆⲆ[822][0] = Yq(Ut(a * 0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
    ⲆⲆ[822][1] = Yq(Ut(a * 0.4, ["#030d14", "#11635e", "#02373e"]));
    ⲆⲆ[823] = Yq(Ld(a * 0.6, ["#BB0000"]));
    ⲆⲆ[824] = Yq(Ld(a * 0.6, ["#DBE71C"]));
    ⲆⲆ[825] = Yq(Ld(a * 0.6, ["#00BB00"]));
    ⲆⲆ[109] = [];
    ⲆⲆ[109][0] = [];
    ⲆⲆ[109][1] = [];
    ⲆⲆ[109][0].push(Tt(a * 1.1, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], ol, 0));
    ⲆⲆ[109][0].push(Tt(a * 1.1, ["#0e3022", "#0f9862", "#0b8750", "#26ab6e"], true, 0));
    ⲆⲆ[109][0].push(Tt(a * 0.9, ["#0e3022", "#0e7d4c", "#258a4d", "#248c4d"], false, 0));
    ⲆⲆ[109][0].push(Tt(a * 0.9, ["#0e3022", "#096d41", "#1f7b43", "#1f7b43"], Wa, 0));
    ⲆⲆ[109][0].push(Tt(a * 0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], Ee, 0));
    ⲆⲆ[109][0].push(Tt(a * 0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], Cq, 0));
    ⲆⲆ[109][1].push(Tt(a * 1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], false, 0));
    ⲆⲆ[109][1].push(Tt(a * 1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], Cq, 0));
    ⲆⲆ[109][1].push(Tt(a * 0.9, ["#030d14", "#0b3534", "#144443", "#174240"], false, 0));
    ⲆⲆ[109][1].push(Tt(a * 0.9, ["#030d14", "#0b3534", "#144443", "#174240"], Dl, 0));
    ⲆⲆ[109][1].push(Tt(a * 0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], Rg, 0));
    ⲆⲆ[109][1].push(Tt(a * 0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], lh, 0));
    ⲆⲆ[307] = [];
    ⲆⲆ[307][0] = [];
    ⲆⲆ[307][1] = [];
    ⲆⲆ[307][0].push(Yq(nu(du(a * 1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], ir), ⲆⲆ[109][0][0])));
    ⲆⲆ[307][0].push(Yq(nu(du(a * 1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], true), ⲆⲆ[109][0][1])));
    ⲆⲆ[307][1].push(Yq(nu(du(a * 1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], ul), ⲆⲆ[109][1][0])));
    ⲆⲆ[307][1].push(Yq(nu(du(a * 1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], Yk), ⲆⲆ[109][1][1])));
    ⲆⲆ[307][0].push(Yq(nu(du(a * 0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], Wj), ⲆⲆ[109][0][2])));
    ⲆⲆ[307][0].push(Yq(nu(du(a * 0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], true), ⲆⲆ[109][0][2])));
    ⲆⲆ[307][1].push(Yq(nu(du(a * 0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], false), ⲆⲆ[109][1][2])));
    ⲆⲆ[307][1].push(Yq(nu(du(a * 0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], Yk), ⲆⲆ[109][1][3])));
    ⲆⲆ[109][0][5] = Yq(ⲆⲆ[109][0][5]);
    ⲆⲆ[109][0][4] = Yq(ⲆⲆ[109][0][4]);
    ⲆⲆ[109][0][3] = Yq(ⲆⲆ[109][0][3]);
    ⲆⲆ[109][0][2] = Yq(ⲆⲆ[109][0][2]);
    ⲆⲆ[109][0][1] = Yq(ⲆⲆ[109][0][1]);
    ⲆⲆ[109][0][0] = Yq(ⲆⲆ[109][0][0]);
    ⲆⲆ[109][1][5] = Yq(ⲆⲆ[109][1][5]);
    ⲆⲆ[109][1][4] = Yq(ⲆⲆ[109][1][4]);
    ⲆⲆ[109][1][3] = Yq(ⲆⲆ[109][1][3]);
    ⲆⲆ[109][1][2] = Yq(ⲆⲆ[109][1][2]);
    ⲆⲆ[109][1][1] = Yq(ⲆⲆ[109][1][1]);
    ⲆⲆ[109][1][0] = Yq(ⲆⲆ[109][1][0]);
    ⲆⲆ[8] = [];
    ⲆⲆ[8][0] = Yq(Ad(4, su(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
    ⲆⲆ[8][1] = Yq(Ad(4, su(a * 0.75, bs, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
    ⲆⲆ[1] = [];
    ⲆⲆ[1][0] = Yq(Ad(4, su(a * 0.75, Ls, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ⲆⲆ[1][1] = Yq(Ad(4, su(a * 0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
    ⲆⲆ[3] = [];
    ⲆⲆ[3][0] = Yq(Ad(4, su(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ⲆⲆ[3][1] = Yq(Ad(4, su(a * 0.75, true, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
    ⲆⲆ[4] = [];
    ⲆⲆ[4][0] = Yq(Ad(4, su(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ⲆⲆ[4][1] = Yq(Ad(4, su(a * 0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ⲆⲆ[31] = [];
    ⲆⲆ[31][0] = Yq(Ad(4, su(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ⲆⲆ[31][1] = Yq(Ad(4, su(a * 0.75, ae, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ⲆⲆ[9] = [];
    ⲆⲆ[9][0] = Yq(Ad(3, xu(a * 0.17, true, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
    ⲆⲆ[9][1] = Yq(Ad(3, xu(a * 0.17, cg, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
    ⲆⲆ[199] = [];
    ⲆⲆ[199][0] = Yq(Ad(3, Cu(a * 0.32, yi, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
    ⲆⲆ[199][1] = Yq(Ad(3, Cu(a * 0.42, yi, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
    ⲆⲆ[57] = [];
    ⲆⲆ[57][0] = Yq(Ad(3, wu(a * 0.4, cg, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
    ⲆⲆ[57][1] = Yq(Ad(3, wu(a * 0.4, Kg, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
    ⲆⲆ[0] = [];
    ⲆⲆ[0][0] = Yq(Ad(3, ru(a * 0.4, Dl, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
    ⲆⲆ[0][1] = Yq(Ad(3, ru(a * 0.4, Cq, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
    ⲆⲆ[5] = [];
    ⲆⲆ[5][0] = Yq(Ad(3, Gu(a * 0.4, cg, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
    ⲆⲆ[5][1] = Yq(Ad(3, Gu(a * 0.4, true, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
    ⲆⲆ[6] = [];
    ⲆⲆ[6][0] = Yq(Ad(3, Du(a * 0.4, cg, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
    ⲆⲆ[6][1] = Yq(Ad(3, Du(a * 0.4, ae, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
    ⲆⲆ[30] = [];
    ⲆⲆ[30][0] = Yq(Ad(3, zu(a * 0.4, rg, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
    ⲆⲆ[30][1] = Yq(Ad(3, zu(a * 0.4, da, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
    ⲆⲆ[285] = [];
    ⲆⲆ[285][0] = [];
    ⲆⲆ[285][1] = [];
    ⲆⲆ[285][0].push(Yq(nc(a * 0.9, 0, ["#0d4f35"], 0)));
    ⲆⲆ[285][0].push(Yq(nc(a * 0.9, 0, ["#0d4f35"], 1)));
    ⲆⲆ[285][0].push(Yq(nc(a * 0.9, 0, ["#0d4f35"], 2)));
    ⲆⲆ[285][1].push(Yq(nc(a * 0.9, 0, ["#053339"], 0)));
    ⲆⲆ[285][1].push(Yq(nc(a * 0.9, 0, ["#053339"], 1)));
    ⲆⲆ[285][1].push(Yq(nc(a * 0.9, 0, ["#053339"], 2)));
    ⲆⲆ[285][0].push(Yq(xc(a * 0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
    ⲆⲆ[285][0].push(Yq(xc(a * 0.8, ["#292002", "#ba930e", "#6d5704"])));
    ⲆⲆ[285][1].push(Yq(xc(a * 0.9, ["#052919", "#0a4738", "#06321f"])));
    ⲆⲆ[285][1].push(Yq(xc(a * 0.8, ["#052918", "#08491c", "#063417"])));
    ⲆⲆ[183] = [];
    ⲆⲆ[183][0] = Yq(Ad(Math.PI / 2, om(a * 0.25, Cq, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
    ⲆⲆ[183][1] = Yq(Ad(Math.PI / 2, om(a * 0.25, true, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
    ⲆⲆ[803] = [];
    ⲆⲆ[803].push(Yq(bp(a * 0.25, ["#44301b", "#57442a", "#523e26"], 0)));
    ⲆⲆ[803].push(Yq(bp(a * 0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
    ⲆⲆ[803].push(Yq(bp(a * 0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
    ⲆⲆ[802] = [];
    ⲆⲆ[802][0] = [];
    ⲆⲆ[802][1] = [];
    ⲆⲆ[802][0].push(Yq(Ad(Math.PI / 2, Hm(a * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
    ⲆⲆ[802][1].push(Yq(Ad(Math.PI / 2, Hm(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
    ⲆⲆ[802][0].push(Yq(Ad(Math.PI / 2, Hm(a * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
    ⲆⲆ[802][1].push(Yq(Ad(Math.PI / 2, Hm(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
    ⲆⲆ[802][0].push(Yq(Ad(Math.PI / 2, Hm(a * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
    ⲆⲆ[802][1].push(Yq(Ad(Math.PI / 2, Hm(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
    ⲆⲆ[802][0].push(Yq(Ad(Math.PI / 2, Hm(a * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
    ⲆⲆ[802][1].push(Yq(Ad(Math.PI / 2, Hm(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
    ⲆⲆ[110] = [];
    ⲆⲆ[110][0] = [Yq(cc(a * 1.2, true, ["#0e3022", "#0b8052", "#077b49"]))];
    ⲆⲆ[110][1] = [Yq(cc(a * 1.2, Qh, ["#030d14", "#084442", "#0a4049"]))];
    ⲆⲆ[623] = [];
    ⲆⲆ[623][0] = Yq(cc(a * 0.8, true, ["#0e3022", "#68622D", "#665329"]));
    ⲆⲆ[623][1] = Yq(cc(a * 0.8, true, ["#030d14", "#0F3A24", "#083326"]));
    ⲆⲆ[189] = [];
    ⲆⲆ[189][0] = Yq(Dp(a * 0.5, Kg, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
    ⲆⲆ[189][1] = Yq(Dp(a * 0.5, true, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
    ⲆⲆ[192] = [];
    ⲆⲆ[192][0] = Yq(Id(a * 0.5, true, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
    ⲆⲆ[192][1] = Yq(Id(a * 0.5, true, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
    ⲆⲆ[194] = [];
    ⲆⲆ[194][0] = Yq(am(a * 0.5, Ls, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
    ⲆⲆ[194][1] = Yq(am(a * 0.5, true, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
    ⲆⲆ[287] = [];
    ⲆⲆ[287][0] = Yq(cc(a * 0.8, true, ["#1b170c", "#0b8052", "#077b49"]));
    ⲆⲆ[287][1] = Yq(cc(a * 0.8, true, ["#030d14", "#084442", "#0a4049"]));
    ⲆⲆ[813] = [];
    ⲆⲆ[813][0] = Yq(Dp(a * 0.5, true, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
    ⲆⲆ[813][1] = Yq(Dp(a * 0.5, hr, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
    ⲆⲆ[839] = [];
    ⲆⲆ[839][0] = Yq(Id(a * 0.5, Ls, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
    ⲆⲆ[839][1] = Yq(Id(a * 0.5, hr, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
    ⲆⲆ[869] = [];
    ⲆⲆ[869][0] = Yq(am(a * 0.5, true, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
    ⲆⲆ[869][1] = Yq(am(a * 0.5, yi, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
    ⲆⲆ[854] = [];
    ⲆⲆ[854][0] = Yq(Bp(a * 0.45, Yk, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
    ⲆⲆ[854][1] = Yq(Bp(a * 0.45, true, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
    ⲆⲆ[859] = Yq(Bp(a * 0.65, true, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
    ⲆⲆ[294] = [];
    ⲆⲆ[294][0] = Yq(Rc(a * 1.4, 0, ["#ac222a", "#e6636a"]));
    ⲆⲆ[294][1] = Yq(Rc(a * 1.4, 0, ["#46195e", "#744188"]));
    ⲆⲆ[288] = [];
    ⲆⲆ[288][0] = Yq(lu(a * 0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
    ⲆⲆ[288][1] = Yq(lu(a * 0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
    ⲆⲆ[118] = [];
    ⲆⲆ[118][0] = Yq(au(a * 0.9, 0, ["#4d2d14", "#432516"]));
    ⲆⲆ[118][1] = Yq(au(a * 0.9, 0, ["#282404", "#0a0a01"]));
    ⲆⲆ[113] = [];
    ⲆⲆ[113][0] = Yq(ju(a * 0.9, 0, ["#4d2d14", "#432516"]));
    ⲆⲆ[113][1] = Yq(ju(a * 0.9, 0, ["#282404", "#0a0a01"]));
    ⲆⲆ[289] = [];
    ⲆⲆ[289][0] = Yq($t(a * 0.9, 0, ["#efd435"]));
    ⲆⲆ[289][1] = Yq($t(a * 0.9, 0, ["#fffabb"]));
    ⲆⲆ[282] = [];
    ⲆⲆ[282][0] = Yq(eu(a * 0.9, 0, ["#efd435"]));
    ⲆⲆ[282][1] = Yq(eu(a * 0.9, 0, ["#fffabb"]));
    ⲆⲆ[816] = [];
    ⲆⲆ[816][0] = Yq($t(a * 0.9, 0, ["#efd435"]));
    ⲆⲆ[816][1] = Yq($t(a * 0.9, 0, ["rgba(255, 84, 0, 1)"]));
    ⲆⲆ[817] = [];
    ⲆⲆ[817][0] = Yq(eu(a * 0.9, 0, ["#efd435"]));
    ⲆⲆ[817][1] = Yq(eu(a * 0.9, 0, ["#ff5704"]));
    ⲆⲆ[324] = Yq(Kd(a, "#ffffff"));
    ⲆⲆ[301] = Yq(Kd(a * 1.5, "#ffffff"));
    ⲆⲆ[306] = Yq(_c(a, "Your score:", a * 15, "#FFF"));
    ⲆⲆ[655] = Yq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 243;
      c.height = a * 172;
      Pd(d, a * 119.5, a * 140.125, a * 19);
      Td(d, undefined, b[1], a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 36.5, a * 20.125);
      d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
      d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
      d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
      d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
      d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
      d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
      d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
      d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
      d.closePath();
      Td(d, b[0], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 15.5, a * 138.625);
      d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
      d.closePath();
      Td(d, Cr, b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 13.5, a * 131.625);
      d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
      d.closePath();
      Td(d, Ra, b[3], a * 10);
      Pd(d, a * 119.5, a * 140.125, a * 14.866068747318506);
      Td(d, b[4], b[5], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 106.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
      d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
      d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
      d.closePath();
      Td(d, b[6], b[7], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
      Td(d, undefined, b[8], a * 5);
      d.save();
      d.translate(a * 75.5, a * 80.125);
      yd(d, a * -39, a * -40, a * 78, a * 78, a * 10);
      d.restore();
      Td(d, b[9]);
      d.save();
      d.translate(a * 167, a * 80.125);
      yd(d, a * -38.5, a * -39, a * 78, a * 78, a * 10);
      d.restore();
      Td(d, b[9]);
      return c;
    }(a * 0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
    ⲆⲆ[656] = Δᐃ.ⲆΔⲆⲆⲆⲆᐃ;
    ⲆⲆ[135] = [];
    ⲆⲆ[135][0] = Yq(St(a * 1.5, Qh, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ⲆⲆ[135][1] = Yq(St(a * 1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ⲆⲆ[641] = [];
    ⲆⲆ[641][0] = Yq(Yt(a * 2, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ⲆⲆ[641][1] = Yq(Yt(a * 2, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ⲆⲆ[642] = [];
    ⲆⲆ[642][0] = Yq(iu(a * 1.5, ae, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ⲆⲆ[642][1] = Yq(iu(a * 1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ⲆⲆ[134] = [];
    ⲆⲆ[134][0] = Yq(Wt(a * 2.2, 0, ["#A89F67", "#9E8456"]));
    ⲆⲆ[134][1] = Yq(Wt(a * 2.2, 0, ["#0B4049", "#08383D"]));
    ⲆⲆ[638] = [];
    ⲆⲆ[638][0] = Yq(Wt(a * 2.2, 0, ["#68622D", "#665329"]));
    ⲆⲆ[638][1] = Yq(Wt(a * 2.2, 0, ["#0F3A24", "#083326"]));
    ⲆⲆ[321] = [];
    ⲆⲆ[321][0] = Yq(Au(a * 0.8, 0, ["#A89F67", "#9E8456"]));
    ⲆⲆ[321][1] = Yq(Au(a * 0.8, 0, ["#15514F", "#0F3F3D"]));
    ⲆⲆ[811] = [];
    ⲆⲆ[811][0] = Yq(Au(a * 0.8, 0, ["#c67933", "#b17238"]));
    ⲆⲆ[811][1] = Yq(Au(a * 0.8, 0, ["#043c37", "#032b23"]));
    ⲆⲆ[984] = [];
    ⲆⲆ[984][0] = Yq(Au(a * 0.8, 0, ["#3a8214", "#4a9c1e"]));
    ⲆⲆ[984][1] = Yq(Au(a * 0.8, 0, ["#032d29", "#044640"]));
    ⲆⲆ[837] = [];
    ⲆⲆ[837][0] = Yq(Au(a * 0.8, 0, ["#e8e8e8", "#bbbbbb"]));
    ⲆⲆ[837][1] = Yq(Au(a * 0.8, 0, ["#1c6161", "#07413f"]));
    ⲆⲆ[848] = [];
    ⲆⲆ[848][0] = Yq(Au(a * 0.8, 0, ["#328a56", "#449573"]));
    ⲆⲆ[848][1] = Yq(Au(a * 0.8, 0, ["#043c37", "#032b23"]));
    ⲆⲆ[952] = [];
    ⲆⲆ[952][0] = Yq(Au(a * 0.8, 0, ["#c98e2f", "#a36b11"]));
    ⲆⲆ[952][1] = Yq(Au(a * 0.8, 0, ["#043c37", "#032b23"]));
    ⲆⲆ[962] = [];
    ⲆⲆ[962][0] = Yq(Au(a * 0.8, 0, ["#b22419", "#99110e"]));
    ⲆⲆ[962][1] = Yq(Au(a * 0.8, 0, ["#04323c", "#03222b"]));
    ⲆⲆ[969] = [];
    ⲆⲆ[969][0] = Yq(Au(a * 0.8, 0, ["#13a56d", "#098a58"]));
    ⲆⲆ[969][1] = Yq(Au(a * 0.8, 0, ["#043c37", "#032b23"]));
    ⲆⲆ[657] = _t(1, [{
      f: Wt,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ⲆⲆ[723] = _t(1, [{
      f: ju,
      x: 0,
      y: 0,
      a: 1,
      r: -Math.PI / 5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ⲆⲆ[724] = _t(1, [{
      f: Pp,
      x: 0,
      y: -5,
      a: 1,
      r: 0,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ⲆⲆ[334] = _t(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆⲆ[115] = [];
    ⲆⲆ[115][0] = Yq(qd(a * 0.9, 0, ["#7d613e", "#9e7e5a"]));
    ⲆⲆ[115][1] = Yq(qd(a * 0.9, 0, ["#084442", "#125e5a"]));
    ⲆⲆ[132] = [];
    ⲆⲆ[132][0] = Yq(qd(a * 0.9, 0, ["#9E8456", "#A89F67"]));
    ⲆⲆ[132][1] = Yq(qd(a * 0.9, 0, ["#1b6f6a", "#0d4e4c"]));
    ⲆⲆ[668] = [];
    ⲆⲆ[668][0] = Yq(qd(a * 0.9, 0, ["#665329", "#68622D"]));
    ⲆⲆ[668][1] = Yq(qd(a * 0.9, 0, ["#083326", "#0F3A24"]));
    ⲆⲆ[188] = [];
    ⲆⲆ[188][0] = Yq(qd(a * 0.9, 0, ["#c67933", "#ec952d"]));
    ⲆⲆ[188][1] = Yq(qd(a * 0.9, 0, ["#0e6553", "#094437"]));
    ⲆⲆ[210] = [];
    ⲆⲆ[210][0] = Yq(qd(a * 0.9, 0, ["#375809", "#4b770e"]));
    ⲆⲆ[210][1] = Yq(qd(a * 0.9, 0, ["#09542d", "#0d5d2f"]));
    ⲆⲆ[985] = [];
    ⲆⲆ[985][0] = Yq(qd(a * 0.9, 0, ["#585809", "#72770e"]));
    ⲆⲆ[985][1] = Yq(qd(a * 0.9, 0, ["#295209", "#305d0d"]));
    ⲆⲆ[191] = [];
    ⲆⲆ[191][0] = Yq(qd(a * 0.9, 0, ["#b9b094", "#e2d2c0"]));
    ⲆⲆ[191][1] = Yq(qd(a * 0.9, 0, ["#126366", "#0d484b"]));
    ⲆⲆ[193] = [];
    ⲆⲆ[193][0] = Yq(qd(a * 0.9, 0, ["#3f8662", "#30915d"]));
    ⲆⲆ[193][1] = Yq(qd(a * 0.9, 0, ["#0e6553", "#094437"]));
    ⲆⲆ[812] = [];
    ⲆⲆ[812][0] = Yq(qd(a * 0.9, 0, ["#c79153", "#dfa868"]));
    ⲆⲆ[812][1] = Yq(qd(a * 0.9, 0, ["#073927", "#075040"]));
    ⲆⲆ[838] = [];
    ⲆⲆ[838][0] = Yq(qd(a * 0.9, 0, ["#768b5b", "#819984"]));
    ⲆⲆ[838][1] = Yq(qd(a * 0.9, 0, ["#0c4540", "#0e5153"]));
    ⲆⲆ[849] = [];
    ⲆⲆ[849][0] = Yq(qd(a * 0.9, 0, ["#567465", "#627c6e"]));
    ⲆⲆ[849][1] = Yq(qd(a * 0.9, 0, ["#073927", "#075040"]));
    ⲆⲆ[204] = [];
    ⲆⲆ[204][0] = Yq(qd(a * 0.9, 0, ["#996b3a", "#bf956b"]));
    ⲆⲆ[204][1] = Yq(qd(a * 0.9, 0, ["#0e6553", "#094437"]));
    ⲆⲆ[953] = [];
    ⲆⲆ[953][0] = Yq(qd(a * 0.9, 0, ["#7a634a", "#a68f77"]));
    ⲆⲆ[953][1] = Yq(qd(a * 0.9, 0, ["#1e4d43", "#113c32"]));
    ⲆⲆ[206] = [];
    ⲆⲆ[206][0] = Yq(qd(a * 0.9, 0, ["#99403c", "#bc796c"]));
    ⲆⲆ[206][1] = Yq(qd(a * 0.9, 0, ["#1e434d", "#11303c"]));
    ⲆⲆ[963] = [];
    ⲆⲆ[963][0] = Yq(qd(a * 0.9, 0, ["#88504e", "#b3857c"]));
    ⲆⲆ[963][1] = Yq(qd(a * 0.9, 0, ["#253b41", "#162930"]));
    ⲆⲆ[208] = [];
    ⲆⲆ[208][0] = Yq(qd(a * 0.9, 0, ["#0f8870", "#23af93"]));
    ⲆⲆ[208][1] = Yq(qd(a * 0.9, 0, ["#032829", "#083233"]));
    ⲆⲆ[970] = [];
    ⲆⲆ[970][0] = Yq(qd(a * 0.9, 0, ["#618a20", "#84a74e"]));
    ⲆⲆ[970][1] = Yq(qd(a * 0.9, 0, ["#1f4632", "#335d47"]));
    ⲆⲆ[114] = [];
    ⲆⲆ[114][0] = Yq(Zd(a * 1.2, Ls, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
    ⲆⲆ[114][1] = Yq(Zd(a * 1.2, true, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
    ⲆⲆ[162] = [];
    ⲆⲆ[162][0] = Yq(uc(a * 1, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ⲆⲆ[162][1] = Yq(uc(a * 1, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ⲆⲆ[165] = [];
    ⲆⲆ[165][0] = Yq(Cc(a * 1, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ⲆⲆ[165][1] = Yq(Cc(a * 1, cg, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ⲆⲆ[122] = [];
    ⲆⲆ[122][0] = Yq(dc(a * 1, Kg, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ⲆⲆ[122][1] = Yq(dc(a * 1, Qh, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ⲆⲆ[163] = [];
    ⲆⲆ[163][0] = Yq(dc(a * 1, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ⲆⲆ[163][1] = Yq(dc(a * 1, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ⲆⲆ[164] = [];
    ⲆⲆ[164][0] = Yq(hc(a * 1, Ln, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ⲆⲆ[164][1] = Yq(hc(a * 1, Qh, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ⲆⲆ[160] = [];
    ⲆⲆ[160][0] = Yq(Qm(a * 0.8, true, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ⲆⲆ[160][1] = Yq(Qm(a * 0.8, true, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ⲆⲆ[169] = [];
    ⲆⲆ[169][0] = Yq(yp(a * 0.8, true, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ⲆⲆ[169][1] = Yq(yp(a * 0.8, true, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ⲆⲆ[170] = [];
    ⲆⲆ[170][0] = Yq(vm(a * 0.8, yi, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ⲆⲆ[170][1] = Yq(vm(a * 0.8, true, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ⲆⲆ[168] = [];
    ⲆⲆ[168][0] = Yq(bm(a * 0.8, Kg, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ⲆⲆ[168][1] = Yq(bm(a * 0.8, true, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ⲆⲆ[123] = [];
    ⲆⲆ[123][0] = Yq(bm(a * 0.8, rg, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ⲆⲆ[123][1] = Yq(bm(a * 0.8, Qh, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ⲆⲆ[166] = [];
    ⲆⲆ[166][0] = Yq(Oc(a * 1.5, true, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
    ⲆⲆ[166][1] = Yq(Oc(a * 1.5, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ⲆⲆ[336] = [];
    ⲆⲆ[336][0] = Yq(Oc(a * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ⲆⲆ[336][1] = Yq(Oc(a * 1, false, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
    ⲆⲆ[171] = [];
    ⲆⲆ[171][0] = Yq(Mc(a * 1.5, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
    ⲆⲆ[171][1] = Yq(Mc(a * 1.5, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
    ⲆⲆ[373] = [];
    ⲆⲆ[373][0] = Yq(Mc(a * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ⲆⲆ[373][1] = Yq(Mc(a * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ⲆⲆ[124] = [];
    ⲆⲆ[124][0] = Yq(Mc(a * 1.5, Cq, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ⲆⲆ[124][1] = Yq(Mc(a * 1.5, qg, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ⲆⲆ[500] = [];
    ⲆⲆ[500][0] = Yq(Mc(a * 1, ul, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ⲆⲆ[500][1] = Yq(Mc(a * 1, ol, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ⲆⲆ[172] = [];
    ⲆⲆ[172][0] = Yq(Lc(a * 1.5, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
    ⲆⲆ[172][1] = Yq(Lc(a * 1.5, qg, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
    ⲆⲆ[376] = [];
    ⲆⲆ[376][0] = Yq(Lc(a * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ⲆⲆ[376][1] = Yq(Lc(a * 1, Ml, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ⲆⲆ[173] = [];
    ⲆⲆ[173][0] = Yq(vc(a * 1.5, ct, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ⲆⲆ[173][1] = Yq(vc(a * 1.5, Wa, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ⲆⲆ[379] = [];
    ⲆⲆ[379][0] = Yq(vc(a * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ⲆⲆ[379][1] = Yq(vc(a * 1, al, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ⲆⲆ[167] = [];
    ⲆⲆ[167][0] = Yq(mc(a * 0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
    ⲆⲆ[167][1] = Yq(mc(a * 0.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
    ⲆⲆ[691] = [];
    ⲆⲆ[691][0] = Yq(xp(a * 0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
    ⲆⲆ[691][1] = Yq(xp(a * 0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
    ⲆⲆ[264] = [];
    ⲆⲆ[264][0] = Yq($d(a * 0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
    ⲆⲆ[264][1] = Yq($d(a * 0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
    ⲆⲆ[260] = [];
    ⲆⲆ[260][0] = Yq(Ad(Math.PI, Mt(a * 0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
    ⲆⲆ[260][1] = Yq(Ad(Math.PI, Mt(a * 0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
    ⲆⲆ[266] = Yq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 450;
      c.height = a * 470;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 226.5, a * 91.546875);
      d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
      d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
      d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
      d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
      d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
      d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
      d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
      d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
      d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
      d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
      d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
      d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
      d.closePath();
      Td(d, ah, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 129.546875);
      d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
      d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
      d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
      d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
      d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
      d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
      d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
      d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
      d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
      d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
      d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
      d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
      d.closePath();
      Td(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 160.546875);
      d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
      d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
      d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
      d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
      d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
      d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
      d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
      d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
      d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
      d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
      d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
      d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
      d.closePath();
      Td(d, Xq, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 205.5, a * 194.546875);
      d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
      d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
      d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
      d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
      d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
      d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
      d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
      d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
      d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
      d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
      d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
      d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
      d.closePath();
      Td(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149.5, a * 93.546875);
      d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
      d.closePath();
      Td(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 66.546875);
      d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
      d.closePath();
      Td(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 302.5, a * 88.546875);
      d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
      d.closePath();
      Td(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 361.5, a * 147.546875);
      d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
      d.closePath();
      Td(d, fk, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 379.5, a * 225.546875);
      d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
      d.closePath();
      Td(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 90.5, a * 147.546875);
      d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
      d.closePath();
      Td(d, undefined, b[0], 4);
      return c;
    }(a * 0.6, ["#FFFFFF"]));
    ⲆⲆ[299] = [];
    ⲆⲆ[299][0] = Yq(Yd(a * 1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
    ⲆⲆ[299][1] = Yq(Yd(a * 1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
    ⲆⲆ[10] = [];
    ⲆⲆ[10][0] = Yq(Wm(a * 0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
    ⲆⲆ[10][1] = Yq(Wm(a * 0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
    ⲆⲆ[11] = [];
    ⲆⲆ[11][0] = Yq(ic(a * 0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
    ⲆⲆ[11][1] = Yq(ic(a * 0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
    ⲆⲆ[40] = [];
    ⲆⲆ[40][0] = Yq(cp(a * 0.63, ct, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
    ⲆⲆ[40][1] = Yq(cp(a * 0.63, bs, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
    ⲆⲆ[41] = [];
    ⲆⲆ[41][0] = Yq(hu(a * 0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
    ⲆⲆ[41][1] = Yq(hu(a * 0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
    ⲆⲆ[42] = [];
    ⲆⲆ[42][0] = Yq(Rt(a * 0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
    ⲆⲆ[42][1] = Yq(Rt(a * 0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
    ⲆⲆ[716] = [];
    ⲆⲆ[716][0] = Yq(dp(a * 0.42, bs, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
    ⲆⲆ[716][1] = Yq(dp(a * 0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
    ⲆⲆ[720] = [];
    ⲆⲆ[720][0] = Yq(wp(a * 0.9, ["#e4c027"]));
    ⲆⲆ[720][1] = Yq(wp(a * 0.9, ["#D8E57F"]));
    ⲆⲆ[144] = [];
    ⲆⲆ[144][0] = Yq(qm(a * 0.42, Dl, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
    ⲆⲆ[144][1] = Yq(qm(a * 0.42, Ls, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
    ⲆⲆ[722] = Yq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 149;
      c.height = a * 356;
      d.save();
      d.translate(a * 74.5, a * 177.5);
      yd(d, a * -57.5, a * -161.5, a * 100, a * 323, a * 10);
      d.restore();
      Td(d, b[0], b[1], a * 4);
      d.save();
      d.translate(a * 74.5, a * 177.5);
      yd(d, a * -57.5, a * 50.5, a * 100, a * 105, a * 10);
      d.restore();
      Td(d, b[6], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 125);
      d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
      d.closePath();
      Td(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 120);
      d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
      d.closePath();
      Td(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 228);
      d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
      d.closePath();
      Td(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 224);
      d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
      d.closePath();
      Td(d, b[3], b[3], a * 10);
      d.save();
      d.translate(a * 72, a * 68.5);
      yd(d, a * -41.5, a * -36.5, a * 73, a * 73, a * 13);
      d.restore();
      Td(d, b[4]);
      d.save();
      d.translate(a * 72, a * 175.5);
      yd(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
      d.restore();
      Td(d, b[4]);
      d.save();
      d.translate(a * 72, a * 279.5);
      yd(d, a * -41.5, a * -40.5, a * 73, a * 73, a * 13);
      d.restore();
      Td(d, b[4]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 338);
      d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
      d.closePath();
      Td(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 333);
      d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
      d.closePath();
      Td(d, b[3], b[3], a * 10);
      return c;
    }(a * 1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
    ⲆⲆ[407] = [];
    ⲆⲆ[407][0] = Yq(Wc(a * 0.5, Ln, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
    ⲆⲆ[407][1] = Yq(Wc(a * 0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
    ⲆⲆ[119] = [];
    ⲆⲆ[119][0] = Yq(Pc(a * 0.5, Gr, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
    ⲆⲆ[119][1] = Yq(Pc(a * 0.5, Kg, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
    ⲆⲆ[411] = Yq(function (a, b, c) {
      var d = document.createElement("canvas");
      var f = d.getContext("2d");
      d.width = a * 118;
      d.height = a * 129;
      f.save();
      f.translate(a * 90, a * 90);
      yd(f, a * -86.5, a * -86, a * 110, a * 110, a * 15);
      f.restore();
      Td(f, c[0], c[1], 4);
      return d;
    }(a * 0.8, 0, ["#5f6061", "#939393"]));
    ⲆⲆ[412] = _t(1, [{
      f: ju,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
    ⲆⲆ[198] = [];
    ⲆⲆ[198][0] = Yq(Bc(a * 1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ⲆⲆ[198][1] = Yq(Bc(a * 1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ⲆⲆ[913] = [];
    ⲆⲆ[913][0] = Yq(Qc(a * 1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ⲆⲆ[913][1] = Yq(Qc(a * 1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ⲆⲆ[18] = [];
    ⲆⲆ[18][0] = Yq(Ad(3, Fc(a * 0.7, Cq, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
    ⲆⲆ[18][1] = Yq(Ad(3, Fc(a * 0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
    ⲆⲆ[12] = [];
    ⲆⲆ[12][0] = Yq(Ad(3, lc(a * 0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
    ⲆⲆ[12][1] = Yq(Ad(3, lc(a * 0.7, qg, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
    ⲆⲆ[13] = [];
    ⲆⲆ[13][0] = Yq(Ad(3, pc(a * 0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
    ⲆⲆ[13][1] = Yq(Ad(3, pc(a * 0.65, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
    ⲆⲆ[14] = [];
    ⲆⲆ[14][0] = Yq(Ad(3, jc(a * 0.67, true, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
    ⲆⲆ[14][1] = Yq(Ad(3, jc(a * 0.67, true, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
    ⲆⲆ[15] = [];
    ⲆⲆ[15][0] = Yq(Ad(3, yc(a * 0.67, true, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
    ⲆⲆ[15][1] = Yq(Ad(3, yc(a * 0.67, yi, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
    ⲆⲆ[33] = [];
    ⲆⲆ[33][0] = Yq(Ad(3, wc(a * 0.67, cg, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
    ⲆⲆ[33][1] = Yq(Ad(3, wc(a * 0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
    ⲆⲆ[16] = [];
    ⲆⲆ[16][0] = Yq(Ad(3, Tc(a * 1, Ln, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
    ⲆⲆ[16][1] = Yq(Ad(3, Tc(a * 1, hr, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
    ⲆⲆ[35] = [];
    ⲆⲆ[35][0] = Yq(Ad(3, Dm(a * 1, Ln, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ⲆⲆ[35][1] = Yq(Ad(3, Dm(a * 1, true, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
    ⲆⲆ[55] = [];
    ⲆⲆ[55][0] = Yq(Ad(3, pm(a * 0.5, Qh, ["#0d1b1c", "#939393", "#5f6061"])));
    ⲆⲆ[55][1] = Yq(Ad(3, pm(a * 0.5, true, ["#030d14", "#485e66", "#1f343f"])));
    ⲆⲆ[45] = [];
    ⲆⲆ[45][0] = Yq(Ad(3, Kc(a * 1, true, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
    ⲆⲆ[45][1] = Yq(Ad(3, Kc(a * 1, true, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
    ⲆⲆ[36] = [];
    ⲆⲆ[36][0] = Yq(Ad(3, Dm(a * 1, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ⲆⲆ[36][1] = Yq(Ad(3, Dm(a * 1, qg, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
    ⲆⲆ[37] = [];
    ⲆⲆ[37][0] = Yq(Ad(3, Dm(a * 1, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ⲆⲆ[37][1] = Yq(Ad(3, Dm(a * 1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ⲆⲆ[38] = [];
    ⲆⲆ[38][0] = Yq(Ad(3, Dm(a * 1, da, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ⲆⲆ[38][1] = Yq(Ad(3, Dm(a * 1, bs, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ⲆⲆ[148] = [];
    ⲆⲆ[148][0] = Yq(up(a * 0.55, false, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
    ⲆⲆ[148][1] = Yq(up(a * 0.55, false, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
    ⲆⲆ[536] = [];
    ⲆⲆ[536].push(Yq(up(a * 0.8, false, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
    ⲆⲆ[536].push(Yq(up(a * 0.8, false, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
    ⲆⲆ[536].push(Yq(up(a * 0.8, ul, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
    ⲆⲆ[538] = [];
    ⲆⲆ[538].push(ⲆⲆ[536][0]);
    ⲆⲆ[538].push(ⲆⲆ[536][0]);
    ⲆⲆ[538].push(ⲆⲆ[536][0]);
    ⲆⲆ[158] = [];
    ⲆⲆ[158][0] = Yq(nm(a * 0.06, Fq, ["#141414", "#c4a23a", "#816511"]));
    ⲆⲆ[158][1] = Yq(nm(a * 0.06, false, ["#030d14", "#2b6664", "#133d3c"]));
    ⲆⲆ[535] = [];
    ⲆⲆ[535].push(Yq(nm(a * 0.08, ir, ["#141414", "#c4a23a", "#816511"])));
    ⲆⲆ[535].push(Yq(nm(a * 0.08, false, ["#141414", "#e2bd4e", "#a38018"])));
    ⲆⲆ[535].push(Yq(nm(a * 0.08, false, ["#141414", "#b0902e", "#634d09"])));
    ⲆⲆ[149] = _t(1.5, [{
      f: em,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ⲆⲆ[526] = [];
    ⲆⲆ[526][0] = Yq(Mm(a * 0.8, 0, ["#347f93", "#54a4ba"]));
    ⲆⲆ[526][1] = Yq(Mm(a * 0.8, 0, ["#98ede3", "#94f2e7"]));
    ⲆⲆ[527] = [];
    ⲆⲆ[527][0] = Yq(Em(a * 0.8, 0, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
    ⲆⲆ[527][1] = Yq(Em(a * 0.8, 0, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
    ⲆⲆ[528] = [];
    ⲆⲆ[528][0] = Yq(Km(a * 0.8, 0, ["#a9e4ed", "#86d4e0"]));
    ⲆⲆ[528][1] = Yq(Km(a * 0.8, 0, ["#83ddd4", "#485e66"]));
    ⲆⲆ[151] = [];
    ⲆⲆ[151][0] = Yq(Nm(a * 0.8, Qh, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
    ⲆⲆ[151][1] = Yq(Nm(a * 0.8, Ln, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
    ⲆⲆ[1192] = [];
    ⲆⲆ[1192][0] = Δᐃ.ⵠⲆⲆΔᐃⲆᐃ;
    ⲆⲆ[1192][1] = Δᐃ.ΔⵠⲆΔⲆᐃᐃ;
    ⲆⲆ[1193] = [];
    ⲆⲆ[1193][0] = Δᐃ.ⲆΔⲆⵠⲆΔⲆ;
    ⲆⲆ[1193][1] = Δᐃ.ⲆΔᐃⲆⲆⲆⲆ;
    ⲆⲆ[1194] = [];
    ⲆⲆ[1194][0] = Δᐃ.ⲆΔⵠⵠⵠⲆΔ;
    ⲆⲆ[1194][1] = Δᐃ.ΔΔⲆΔΔⲆⵠ;
    ⲆⲆ[152] = [];
    ⲆⲆ[152][0] = Δᐃ.ᐃⲆᐃΔΔΔΔ;
    ⲆⲆ[152][1] = Δᐃ.ⵠⵠⵠᐃⵠΔⲆ;
    ⲆⲆ[1198] = [];
    ⲆⲆ[1198][0] = Δᐃ.ⵠⵠΔⲆΔΔᐃ;
    ⲆⲆ[1198][1] = Δᐃ.ⲆⲆⵠᐃΔⵠᐃ;
    ⲆⲆ[153] = [];
    ⲆⲆ[153][0] = Δᐃ.ΔΔᐃⲆΔⲆⵠ;
    ⲆⲆ[153][1] = Δᐃ.ΔᐃⵠΔⲆⲆΔ;
    ⲆⲆ[1202] = [];
    ⲆⲆ[1202][0] = Δᐃ.ΔⲆΔΔⵠᐃⵠ;
    ⲆⲆ[1202][1] = Δᐃ.ᐃΔᐃᐃⵠⵠⲆ;
    ⲆⲆ[154] = [];
    ⲆⲆ[154][0] = Δᐃ.ΔΔΔⲆᐃⵠᐃ;
    ⲆⲆ[154][1] = Δᐃ.ⲆΔⵠᐃΔⲆⵠ;
    ⲆⲆ[1206] = [];
    ⲆⲆ[1206][0] = Δᐃ.ⲆΔⲆᐃᐃΔᐃ;
    ⲆⲆ[1206][1] = Δᐃ.ⲆⵠᐃⵠⲆⵠᐃ;
    ⲆⲆ[155] = [];
    ⲆⲆ[155][0] = Δᐃ.ⲆⵠΔⲆⲆⵠⲆ;
    ⲆⲆ[155][1] = Δᐃ.ΔⲆⵠⵠⲆΔΔ;
    ⲆⲆ[1210] = [];
    ⲆⲆ[1210][0] = Δᐃ.ΔⲆᐃᐃⵠᐃΔ;
    ⲆⲆ[1210][1] = Δᐃ.ᐃⵠΔᐃᐃΔΔ;
    ⲆⲆ[156] = [];
    ⲆⲆ[156][0] = Δᐃ.ᐃⵠⲆⲆᐃᐃⲆ;
    ⲆⲆ[156][1] = Δᐃ.ⵠⵠⲆⲆⲆᐃⲆ;
    ⲆⲆ[1214] = [];
    ⲆⲆ[1214][0] = Δᐃ.ᐃᐃᐃΔᐃⵠᐃ;
    ⲆⲆ[1214][1] = Δᐃ.ⲆⵠⵠᐃΔⵠᐃ;
    ⲆⲆ[157] = [];
    ⲆⲆ[157][0] = Δᐃ.ⵠᐃⲆⵠᐃⵠⲆ;
    ⲆⲆ[157][1] = Δᐃ.ᐃΔᐃᐃⲆⲆΔ;
    ⲆⲆ[245] = [];
    ⲆⲆ[245][0] = Δᐃ.ⵠᐃᐃⲆⲆⵠΔ;
    ⲆⲆ[245][1] = Δᐃ.ⲆΔΔΔⲆᐃⲆ;
    ⲆⲆ[246] = Δᐃ.ⵠⲆᐃᐃΔΔⵠ;
    ⲆⲆ[159] = [];
    ⲆⲆ[159][0] = Yq(cm(a * 0.75, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
    ⲆⲆ[159][1] = Yq(cm(a * 0.75, true, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
    ⲆⲆ[558] = Yq(Im(a * 0.3, ["#092813", "#1f773d"], 0));
    ⲆⲆ[559] = Yq(Im(a * 0.3, ["#092813", "#1f773d"], 1));
    ⲆⲆ[885] = Yq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 60;
      c.height = a * 60;
      d.translate(a * -25, a * -25);
      d.translate(0, a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      Td(d, b[0]);
      d.translate(0, a * -5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      Td(d, b[1]);
      return c;
    }(a * 0.6, ["#092813", "#1f773d"]));
    ⲆⲆ[556] = [];
    ⲆⲆ[556].push(Yq(fp(a * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
    ⲆⲆ[556].push(Yq(fp(a * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
    ⲆⲆ[556].push(Yq(fp(a * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
    ⲆⲆ[560] = [];
    var c = Yq(fp(a * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
    ⲆⲆ[560].push(c);
    ⲆⲆ[560].push(c);
    ⲆⲆ[560].push(c);
    ⲆⲆ[557] = [];
    ⲆⲆ[557].push(Yq(fp(a * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
    ⲆⲆ[557].push(Yq(fp(a * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
    ⲆⲆ[557].push(Yq(fp(a * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
    ⲆⲆ[681] = Yq(function (b, c) {
      var d = document.createElement("canvas");
      var f = d.getContext("2d");
      var g = b * 170;
      var i = b * 172;
      var a = g / 2;
      var j = i / 2;
      d.width = g;
      d.height = i;
      f.translate(a, j);
      f.save();
      for (var k = 0; k < 10; k++) {
        f.rotate(Math.PI / 5);
        f.save();
        f.translate(b * 65, 0);
        wd(f, 3, b * 18, b * 4);
        Td(f, c[0]);
        f.restore();
      }
      f.restore();
      Pd(f, 0, 0, b * 40);
      Td(f, w, c[0], b * 6);
      Pd(f, 0, 0, b * 20);
      Td(f, c[0]);
      return d;
    }(a * 0.3, ["#FFFFFF"]));
    ⲆⲆ[794] = Yq(function (b, c) {
      var d = document.createElement("canvas");
      var f = d.getContext("2d");
      var g = b * 130;
      var h = b * 142;
      var a = g / 2;
      var i = h / 2;
      d.width = g;
      d.height = h;
      Pd(f, a, i, b * 40);
      Td(f, undefined, c[0], b * 7);
      Pd(f, a, i, b * 30);
      Td(f, zo, c[0], b * 7);
      Pd(f, a, i, b * 20);
      Td(f, c[0]);
      return d;
    }(a * 0.3, ["#FFFFFF"]));
    ⲆⲆ[562] = Yq(Im(a * 0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
    ⲆⲆ[667] = Yq(Ad(Math.PI / 5, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 316;
      c.height = a * 365;
      d.save();
      d.translate(a * 156.07142639160156, a * 51.81248474121094);
      d.rotate(0);
      yd(d, a * -21.5, a * -34, a * 43, a * 68, a * 8);
      d.restore();
      Td(d, b[0], b[0], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
      d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
      d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
      d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
      d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
      d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
      d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
      d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
      d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
      d.closePath();
      Td(d, b[0], b[0], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
      d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
      d.closePath();
      Td(d, b[0], b[0], a * 15);
      return c;
    }(a * 0.2, ["#FFFFFF"])));
    ⲆⲆ[43] = [];
    ⲆⲆ[43][0] = Yq(rm(a * 0.85, 0, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
    ⲆⲆ[43][1] = Yq(rm(a * 0.85, 0, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
    ⲆⲆ[561] = [];
    ⲆⲆ[561].push(Yq(fp(a * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
    ⲆⲆ[561].push(Yq(fp(a * 0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
    ⲆⲆ[561].push(Yq(fp(a * 0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
    ⲆⲆ[83] = [];
    ⲆⲆ[83][0] = Yq(Rm(a * 0.37, 0, ["#2a2938", "#242330", "#313041"]));
    ⲆⲆ[83][1] = Yq(Rm(a * 0.37, 0, ["#1b1e30", "#161921", "#252f3e"]));
    ⲆⲆ[85] = [];
    ⲆⲆ[85][0] = Yq(Ip(a * 0.17, Kg, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
    ⲆⲆ[85][1] = Yq(Ip(a * 0.17, ct, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
    ⲆⲆ[86] = [];
    ⲆⲆ[86][0] = Yq(pp(a * 0.55, true, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
    ⲆⲆ[86][1] = Yq(pp(a * 0.55, true, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
    ⲆⲆ[84] = [];
    ⲆⲆ[84][0] = Yq(pp(a * 0.55, true, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
    ⲆⲆ[84][1] = Yq(pp(a * 0.55, true, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
    ⲆⲆ[77] = [];
    ⲆⲆ[77][0] = Yq(gm(a * 0.2, lh, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
    ⲆⲆ[77][1] = Yq(gm(a * 0.2, Qh, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
    ⲆⲆ[78] = [];
    ⲆⲆ[78][0] = Yq(gm(a * 0.2, da, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
    ⲆⲆ[78][1] = Yq(gm(a * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
    ⲆⲆ[79] = [];
    ⲆⲆ[79][0] = Yq(gm(a * 0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
    ⲆⲆ[79][1] = Yq(gm(a * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
    ⲆⲆ[61] = [];
    ⲆⲆ[61][0] = Yq(ac(a * 0.24, true, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
    ⲆⲆ[61][1] = Yq(ac(a * 0.24, true, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
    ⲆⲆ[59] = [];
    ⲆⲆ[59][0] = Yq(Jp(a * 0.32, cg, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
    ⲆⲆ[59][1] = Yq(Jp(a * 0.32, qg, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
    ⲆⲆ[62] = [];
    ⲆⲆ[62][0] = Yq(Ad(3, hm(a * 0.9, true, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
    ⲆⲆ[62][1] = Yq(Ad(3, hm(a * 0.9, true, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
    ⲆⲆ[750] = [];
    ⲆⲆ[750][0] = Yq(Ad(3, hm(a * 1, true, [undefined, xh, mk, "#c8efef", "#c8efef"])));
    ⲆⲆ[750][1] = Yq(Ad(3, hm(a * 1, rg, [undefined, Ma, ar, "#87d2e6", "#87d2e6"])));
    ⲆⲆ[755] = [];
    ⲆⲆ[755].push(Yq(Jm(a * 0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
    ⲆⲆ[755].push(Yq(Jm(a * 0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1)));
    ⲆⲆ[755].push(Yq(Jm(a * 0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
    ⲆⲆ[795] = [];
    ⲆⲆ[795].push(Yq(ip(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
    ⲆⲆ[795].push(Yq(ip(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ⲆⲆ[795].push(Yq(ip(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ⲆⲆ[782] = [];
    ⲆⲆ[782].push(Yq(cu(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1)));
    ⲆⲆ[782].push(Yq(cu(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
    ⲆⲆ[782].push(Yq(cu(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
    ⲆⲆ[783] = [];
    ⲆⲆ[783].push(Yq(cu(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0)));
    ⲆⲆ[783].push(Yq(cu(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0)));
    ⲆⲆ[783].push(Yq(cu(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0)));
    ⲆⲆ[46] = [];
    ⲆⲆ[46][0] = Yq(Ad(3, Ap(a * 0.7, Wa, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
    ⲆⲆ[46][1] = Yq(Ad(3, Ap(a * 0.7, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
    ⲆⲆ[50] = [];
    ⲆⲆ[50][0] = Yq(Ad(3, Ap(a * 0.7, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
    ⲆⲆ[50][1] = Yq(Ad(3, Ap(a * 0.7, true, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
    ⲆⲆ[51] = [];
    ⲆⲆ[51][0] = Yq(Ad(3, Ap(a * 0.7, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
    ⲆⲆ[51][1] = Yq(Ad(3, Ap(a * 0.7, yi, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
    ⲆⲆ[52] = [];
    ⲆⲆ[52][0] = Yq(Ad(3, Ap(a * 0.7, ae, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
    ⲆⲆ[52][1] = Yq(Ad(3, Ap(a * 0.7, yi, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
    ⲆⲆ[592] = [];
    ⲆⲆ[592].push(Yq(Tp(a * 0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
    ⲆⲆ[592].push(Yq(Tp(a * 0.7, ["#524712", "#c7b11c", "#d9ba18"])));
    ⲆⲆ[592].push(Yq(Tp(a * 0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
    ⲆⲆ[326] = Yq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 188;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
      d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
      d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
      d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
      d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
      d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
      d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
      d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
      d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
      d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
      d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
      d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
      d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
      d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
      d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
      d.closePath();
      Td(d, b[0], b[0], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
      d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
      d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
      d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
      d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
      d.closePath();
      Td(d, b[0], b[0], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
      d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
      d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
      d.closePath();
      Td(d, b[0], b[0], a * 2);
      return c;
    }(a * 1.1, ["#BB0000"]));
    ⲆⲆ[333] = Yq(Ad(Math.PI, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 238;
      c.height = a * 230;
      d.translate(a * -93, a * -110);
      Pd(d, a * 213.5, a * 256.75, a * 75);
      Td(d, b);
      Pd(d, a * 213.5, a * 175.75, a * 25);
      Td(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 156.5, a * 137.75);
      d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217.5, a * 178.75);
      d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 130.5, a * 124.75);
      d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 183.75);
      d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107.5, a * 213.75);
      d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 212.5, a * 187.75);
      d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 102.5, a * 258.75);
      d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 192.75);
      d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 219.5, a * 158.75);
      d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 210.5, a * 160.75);
      d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      return c;
    }(a * 0.9, "#BB0000")));
    ⲆⲆ[23] = [];
    ⲆⲆ[23][0] = Yq(Pm(a * 0.55, Kg, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
    ⲆⲆ[23][1] = Yq(Pm(a * 0.55, true, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
    ⲆⲆ[58] = [];
    ⲆⲆ[58][0] = Yq($m(a * 0.55, true, ["#252525", "#73583e", "#573f29", "#7d6144"]));
    ⲆⲆ[58][1] = Yq($m(a * 0.55, da, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
    ⲆⲆ[25] = [];
    ⲆⲆ[25][0] = Yq(np(a * 0.6, true, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
    ⲆⲆ[25][1] = Yq(np(a * 0.6, hr, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
    ⲆⲆ[26] = [];
    ⲆⲆ[26][0] = Yq(Vc(a * 0.58, 0, ["#dbce71", "#b29c32", "#c4bc51"]));
    ⲆⲆ[26][1] = Yq(Vc(a * 0.58, 0, ["#2b7c57", "#15543c", "#1a7961"]));
    ⲆⲆ[27] = [];
    ⲆⲆ[27][0] = Yq(Cp(a * 0.69, true, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
    ⲆⲆ[27][1] = Yq(Cp(a * 0.69, Wa, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
    ⲆⲆ[413] = [];
    ⲆⲆ[413][0] = [];
    ⲆⲆ[413][1] = [];
    ⲆⲆ[413][0].push(Yq(lm(a * 1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
    ⲆⲆ[413][0].push(Yq(tm(a * 1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
    ⲆⲆ[413][0].push(Yq(lp(a * 1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
    ⲆⲆ[413][1].push(Yq(lm(a * 1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
    ⲆⲆ[413][1].push(Yq(tm(a * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
    ⲆⲆ[413][1].push(Yq(lp(a * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
    ⲆⲆ[449] = [];
    ⲆⲆ[449][0] = Yq(Am(a * 1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
    ⲆⲆ[449][1] = Yq(Am(a * 1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
    ⲆⲆ[451] = [];
    ⲆⲆ[451][0] = Yq(Bm(a * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ⲆⲆ[451][1] = Yq(Bm(a * 1, ["#050505", "#327570", "#021724", "#200333"]));
    ⲆⲆ[452] = [];
    ⲆⲆ[452][0] = Yq(tp(a * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ⲆⲆ[452][1] = Yq(tp(a * 1, ["#050505", "#327570", "#021724", "#200333"]));
    ⲆⲆ[243] = [];
    ⲆⲆ[243][0] = [];
    ⲆⲆ[243][1] = [];
    ⲆⲆ[243][0] = [Δᐃ.ᐃΔⲆᐃⲆⵠⲆ, Δᐃ.ᐃⲆᐃⵠⵠⵠⵠ, Δᐃ.ⲆⵠΔΔⲆⲆⵠ, Δᐃ.ΔᐃⲆᐃⵠⲆⵠ, Δᐃ.ⵠⵠⵠⵠΔΔᐃ, Δᐃ.ᐃⵠᐃⲆΔⵠⵠ, Δᐃ.ⵠⵠᐃⲆᐃΔⵠ, Δᐃ.ⵠⲆΔⵠᐃΔⵠ, Δᐃ.ᐃⵠᐃⵠΔⲆⵠ, Δᐃ.ⲆⵠⲆᐃᐃⲆΔ, Δᐃ.ⵠⵠⵠⲆᐃᐃⵠ, Δᐃ.ⵠΔΔᐃⲆⲆᐃ, Δᐃ.ΔᐃⵠᐃⵠⵠⲆ, Δᐃ.ⲆⵠⵠᐃⵠⲆⲆ, Δᐃ.ⵠΔΔΔΔΔᐃ, Δᐃ.ΔᐃⵠⵠΔⵠᐃ, Δᐃ.ΔᐃΔᐃΔᐃᐃ, Δᐃ.ⵠᐃᐃΔᐃⲆⲆ, Δᐃ.ⲆΔΔᐃⲆⲆΔ, Δᐃ.ᐃⵠⲆΔΔᐃⵠ, Δᐃ.ⵠⵠᐃᐃᐃⲆⲆ, Δᐃ.ᐃⵠⵠⲆⲆᐃΔ, Δᐃ.ⲆⵠⲆⵠⲆⲆᐃ, Δᐃ.ⲆΔⲆⲆΔΔᐃ, Δᐃ.ⵠⵠⵠΔⵠⲆΔ, Δᐃ.ⲆⵠⲆΔⵠⵠⵠ, Δᐃ.ⲆᐃⲆΔᐃⵠΔ, Δᐃ.ᐃᐃⲆᐃΔᐃⵠ, Δᐃ.ΔⲆⲆⲆⲆᐃᐃ, Δᐃ.ΔΔⲆⵠⵠⵠⲆ, Δᐃ.ᐃⲆⵠΔⲆΔᐃ, Δᐃ.ΔᐃᐃᐃΔᐃΔ, Δᐃ.ΔⵠᐃᐃΔΔⵠ, Δᐃ.ⵠⲆⵠⲆΔΔⲆ, Δᐃ.ⲆⵠᐃⲆⵠᐃⵠ, Δᐃ.ⲆⲆⲆΔⲆΔΔ, Δᐃ.ᐃᐃⵠⵠⵠⲆⲆ, Δᐃ.ⲆΔⵠⵠΔΔᐃ, Δᐃ.ⵠⲆᐃᐃΔⲆᐃ, Δᐃ.ⲆⲆᐃⵠᐃⲆⲆ, Δᐃ.ᐃᐃⲆᐃⲆⵠⵠ, Δᐃ.ⲆΔⵠΔᐃΔΔ, Δᐃ.ⵠΔΔᐃᐃΔΔ, Δᐃ.ᐃΔⲆⲆᐃΔᐃ, Δᐃ.ⲆⲆⵠⵠᐃⵠⵠ, Δᐃ.ᐃⵠⲆⲆⲆᐃΔ, Δᐃ.ᐃⲆᐃⵠⲆⲆⲆ, Δᐃ.ⲆⲆⲆⵠᐃΔᐃ, Δᐃ.ΔⲆᐃΔⵠᐃᐃ, Δᐃ.ᐃⲆⲆⵠⲆⲆᐃ, Δᐃ.ⲆⵠⲆⵠⲆΔΔ, Δᐃ.ⲆⲆᐃⵠΔΔⲆ, Δᐃ.ⲆⲆΔⲆᐃΔⵠ, Δᐃ.ΔⲆᐃⵠⵠⲆⵠ, Δᐃ.ⲆⲆⵠΔᐃⲆⲆ, Δᐃ.ᐃⲆⵠᐃᐃΔΔ];
    ⲆⲆ[243][1] = [Δᐃ.ΔᐃᐃΔⵠᐃⲆ, Δᐃ.ⵠⵠᐃᐃⵠΔᐃ, Δᐃ.ⲆᐃᐃⵠⲆⲆᐃ, Δᐃ.ΔΔⵠᐃΔᐃΔ, Δᐃ.ⲆⵠⵠΔΔⲆΔ, Δᐃ.ⵠΔΔⲆⵠⵠⲆ, Δᐃ.ⵠΔⲆᐃⲆⲆⵠ, Δᐃ.ΔᐃᐃⲆⲆⵠΔ, Δᐃ.ⵠᐃⵠⵠᐃⵠⵠ, Δᐃ.Δⵠⵠⵠⵠⵠᐃ, Δᐃ.ᐃⵠⲆⲆⲆᐃᐃ, Δᐃ.ⲆⲆⵠⵠΔᐃΔ, Δᐃ.ⲆᐃΔⵠᐃⵠΔ, Δᐃ.ⵠⲆᐃᐃⵠⵠᐃ, Δᐃ.ⵠⵠⵠΔⲆⵠΔ, Δᐃ.ⵠᐃᐃⵠᐃᐃⲆ, Δᐃ.ΔⵠⲆⲆΔΔⵠ, Δᐃ.ⵠᐃᐃⵠᐃΔᐃ, Δᐃ.ⵠΔᐃΔᐃᐃΔ, Δᐃ.ⲆⵠⵠΔΔⵠΔ, Δᐃ.ⵠΔⵠⵠⵠⲆⲆ, Δᐃ.ᐃⲆᐃⲆⵠⵠⵠ, Δᐃ.ⲆⲆᐃⲆΔΔⲆ, Δᐃ.ΔΔⵠΔᐃΔΔ, Δᐃ.ΔⲆΔⲆΔΔΔ, Δᐃ.ΔΔΔᐃⲆⵠᐃ, Δᐃ.ᐃⵠⲆⲆΔⵠⲆ, Δᐃ.ΔⵠΔⵠᐃⵠⲆ, Δᐃ.ⲆⲆΔⲆⲆᐃᐃ, Δᐃ.ⲆⵠⵠⲆⲆⲆΔ, Δᐃ.ΔΔᐃᐃⵠᐃⵠ, Δᐃ.ΔⵠᐃΔᐃⵠⲆ, Δᐃ.ⵠΔᐃⲆⵠⲆᐃ, Δᐃ.ΔΔⵠᐃᐃⵠⲆ, Δᐃ.ⲆΔᐃⵠⵠⲆⲆ, Δᐃ.ⵠⵠⲆⲆᐃⵠⲆ, Δᐃ.ⵠᐃᐃΔⵠⲆΔ, Δᐃ.ΔⵠΔⵠⵠΔΔ, Δᐃ.ΔⲆⲆᐃⵠᐃⵠ, Δᐃ.ᐃⲆⵠΔΔⲆⵠ, Δᐃ.ⵠⵠⵠⵠⲆⵠⵠ, Δᐃ.ⲆΔᐃⵠᐃⲆⲆ, Δᐃ.ᐃΔⲆⲆᐃⵠᐃ, Δᐃ.ᐃΔΔΔΔⲆⵠ, Δᐃ.ⵠᐃⵠᐃᐃΔᐃ, Δᐃ.ᐃⲆⲆᐃΔᐃⵠ, Δᐃ.ⵠⲆⵠΔᐃΔⲆ, Δᐃ.ⵠⵠΔⵠⲆⲆⵠ, Δᐃ.ⵠᐃⲆⵠΔⲆⵠ, Δᐃ.ΔᐃΔⵠⵠΔᐃ, Δᐃ.ᐃⵠⵠᐃⵠⲆΔ, Δᐃ.ⵠᐃΔⵠᐃⲆᐃ, Δᐃ.ᐃⵠⵠⲆΔΔΔ, Δᐃ.ⲆᐃⵠᐃΔⲆΔ, Δᐃ.ΔⲆᐃᐃⲆⲆⵠ, Δᐃ.ⵠⲆᐃΔᐃᐃⵠ];
    ⲆⲆ[676] = [];
    ⲆⲆ[676][0] = [];
    ⲆⲆ[676][1] = [];
    ⲆⲆ[676][0].push(Yq(Hc(a * 1.1, Rg, ["#252B28", "#747471", "#83827e"], 0)));
    ⲆⲆ[676][0].push(Yq(Hc(a * 0.9, false, ["#252B28", "#747471", "#83827e"], 1)));
    ⲆⲆ[676][0].push(Yq(Hc(a * 1, Wj, ["#252B28", "#747471", "#83827e"], 2)));
    ⲆⲆ[676][0].push(Yq(Hc(a * 0.9, ns, ["#252B28", "#747471", "#83827e"], 2)));
    ⲆⲆ[676][1].push(Yq(Hc(a * 1.1, ul, ["#030d14", "#123335", "#183f3f"], 0)));
    ⲆⲆ[676][1].push(Yq(Hc(a * 0.9, false, ["#030d14", "#123335", "#183f3f"], 1)));
    ⲆⲆ[676][1].push(Yq(Hc(a * 1, Po, ["#030d14", "#123335", "#183f3f"], 2)));
    ⲆⲆ[676][1].push(Yq(Hc(a * 0.9, false, ["#030d14", "#123335", "#183f3f"], 2)));
    ⲆⲆ[679] = [];
    ⲆⲆ[679][0] = [];
    ⲆⲆ[679][1] = [];
    ⲆⲆ[679][0].push(Yq(Hc(a * 1.1, lh, ["#252B28", "#58645F", "#75827D"], 2)));
    ⲆⲆ[679][0].push(Yq(Hc(a * 0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ⲆⲆ[679][0].push(Yq(Hc(a * 1, Cq, ["#252B28", "#58645F", "#75827D"], 2)));
    ⲆⲆ[679][0].push(Yq(Hc(a * 0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ⲆⲆ[679][1].push(Yq(Hc(a * 1.1, bs, ["#030d14", "#123335", "#183f3f"], 2)));
    ⲆⲆ[679][1].push(Yq(Hc(a * 0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
    ⲆⲆ[679][1].push(Yq(Hc(a * 1, true, ["#030d14", "#123335", "#183f3f"], 2)));
    ⲆⲆ[679][1].push(Yq(Hc(a * 0.9, da, ["#030d14", "#123335", "#183f3f"], 2)));
    ⲆⲆ[415] = [];
    ⲆⲆ[415][0] = [];
    ⲆⲆ[415][1] = [];
    ⲆⲆ[415][0].push(Yq(tc(a * 1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⲆⲆ[415][0].push(Yq(tc(a * 1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⲆⲆ[415][0].push(Yq(tc(a * 1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⲆⲆ[415][1].push(Yq(tc(a * 1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ⲆⲆ[415][1].push(Yq(tc(a * 1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ⲆⲆ[415][1].push(Yq(tc(a * 1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ⲆⲆ[416] = [];
    ⲆⲆ[416][0] = [];
    ⲆⲆ[416][1] = [];
    ⲆⲆ[416][0].push(Yq(Lu(a * 1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ⲆⲆ[416][0].push(Yq(Lu(a * 0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ⲆⲆ[416][0].push(Yq(Lu(a * 0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ⲆⲆ[416][1].push(Yq(Lu(a * 1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ⲆⲆ[416][1].push(Yq(Lu(a * 0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ⲆⲆ[416][1].push(Yq(Lu(a * 0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ⲆⲆ[121] = [];
    ⲆⲆ[121][0] = [];
    ⲆⲆ[121][1] = [];
    ⲆⲆ[121][0].push(Yq(Xm(a * 1.7, ct, ["#1d051e", "#c27add", "#cd98e5"])));
    ⲆⲆ[121][0].push(Yq(Xm(a * 1.5, cg, ["#1d051e", "#c27add", "#cd98e5"])));
    ⲆⲆ[121][0].push(Yq(Xm(a * 1.3, true, ["#1d051e", "#c27add", "#cd98e5"])));
    ⲆⲆ[121][1].push(Yq(Xm(a * 1.7, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ⲆⲆ[121][1].push(Yq(Xm(a * 1.5, Gr, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ⲆⲆ[121][1].push(Yq(Xm(a * 1.3, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ⲆⲆ[678] = [];
    ⲆⲆ[678][0] = [];
    ⲆⲆ[678][1] = [];
    ⲆⲆ[678][0].push(Yq(Sm(a, ["#2d53c4"])));
    ⲆⲆ[678][1].push(Yq(Sm(a, ["#2d53c4"])));
    ⲆⲆ[696] = [];
    ⲆⲆ[696][0] = [];
    ⲆⲆ[696][1] = [];
    ⲆⲆ[696][0].push(Yq(Sm(a, ["#c4912d"])));
    ⲆⲆ[696][1].push(Yq(Sm(a, ["#c4912d"])));
    ⲆⲆ[680] = [];
    ⲆⲆ[680][0] = Yq(um(a, ["#414040"]));
    ⲆⲆ[680][1] = Yq(um(a, ["#153635"]));
    ⲆⲆ[508] = [];
    ⲆⲆ[508][0] = Yq(Oc(a * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ⲆⲆ[508][1] = Yq(Oc(a * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ⲆⲆ[509] = [];
    ⲆⲆ[509][0] = Yq(Mc(a * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ⲆⲆ[509][1] = Yq(Mc(a * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ⲆⲆ[512] = [];
    ⲆⲆ[512][0] = Yq(Mc(a * 1, fh, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ⲆⲆ[512][1] = Yq(Mc(a * 1, cr, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ⲆⲆ[511] = [];
    ⲆⲆ[511][0] = Yq(vc(a * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ⲆⲆ[511][1] = Yq(vc(a * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ⲆⲆ[510] = [];
    ⲆⲆ[510][0] = Yq(Lc(a * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ⲆⲆ[510][1] = Yq(Lc(a * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ⲆⲆ[419] = [];
    ⲆⲆ[419][0] = Yq($c(a * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
    ⲆⲆ[419][1] = Yq($c(a * 0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
    ⲆⲆ[445] = [];
    ⲆⲆ[445][0] = Yq(Mp(a * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
    ⲆⲆ[445][1] = Yq(Mp(a * 0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
    ⲆⲆ[259] = [];
    ⲆⲆ[818] = [];
    ⲆⲆ[516] = [];
    ⲆⲆ[819] = [];
    for (b = 0; b < 2; b++) {
      ⲆⲆ[259][b] = document.createElement("canvas");
      ⲆⲆ[259][b].width = 193;
      ⲆⲆ[259][b].height = 193;
      ⲆⲆ[818][b] = ⲆⲆ[259][b].getContext("2d");
      ⲆⲆ[516][b] = document.createElement("canvas");
      ⲆⲆ[516][b].width = 600;
      ⲆⲆ[516][b].height = 600;
      ⲆⲆ[819][b] = ⲆⲆ[516][b].getContext("2d");
    }
    ⲆⲆ[475] = [];
    ⲆⲆ[475][0] = Yq(um(a, ["#c8e0de"]));
    ⲆⲆ[475][1] = Yq(um(a, ["#147071"]));
    ⲆⲆ[476] = [];
    ⲆⲆ[476][0] = Yq(um(a, ["#231912"]));
    ⲆⲆ[476][1] = Yq(um(a, ["#021719"]));
    ⲆⲆ[697] = Yq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 253;
      c.height = a * 192;
      d.save();
      d.translate(a * 37, a * 94);
      yd(d, a * -7, a * -20, a * 14, a * 37, a * 20);
      d.restore();
      Td(d, b[0]);
      d.save();
      d.translate(a * 131, a * 94);
      yd(d, a * -84, a * -67, a * 168, a * 134, a * 20);
      d.restore();
      Td(d, b[0], b[0], a * 13);
      d.save();
      d.translate(a * 223, a * 94.5);
      yd(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
      d.restore();
      Td(d, b[0]);
      d.save();
      d.translate(a * 128.5, a * 170.5);
      yd(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
      d.restore();
      Td(d, b[0]);
      return c;
    }(a * 0.5, ["#BB0000"]));
    ⲆⲆ[461] = Yq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 161;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 9, a * 93);
      d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
      d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
      d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
      d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
      d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
      d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
      d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
      d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
      d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
      d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
      d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
      d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
      d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
      d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
      d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
      d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
      d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
      d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
      d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
      d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
      d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
      d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
      d.closePath();
      Td(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 25, a * 63);
      d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
      d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
      d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
      Td(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 91, a * 53);
      d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
      d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
      d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
      Td(d, b, b, a * 4);
      return c;
    }(a * 0.9, "#BB0000"));
    ⲆⲆ[462] = Yq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 147;
      c.height = a * 172;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 8, a * 50);
      d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
      d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
      d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
      d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
      d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
      d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
      d.closePath();
      Td(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 14, a * 57);
      d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
      d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
      Td(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 47);
      d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
      d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
      Td(d, b, b, a * 4);
      return c;
    }(a * 0.9, "#BB0000"));
    ⲆⲆ[463] = Yq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 271;
      c.height = a * 366;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 133, a * 99);
      d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
      d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
      d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
      d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
      d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
      d.closePath();
      Td(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 73, a * 270);
      d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
      d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
      d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
      d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
      d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
      d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
      d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
      d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
      d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
      d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
      d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
      d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
      d.closePath();
      Td(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 76, a * 252);
      d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
      d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
      d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
      d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
      d.closePath();
      Td(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 84, a * 257);
      d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
      d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
      d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
      d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
      d.closePath();
      Td(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125, a * 65);
      d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
      d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
      d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
      d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
      d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
      d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
      d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
      d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
      d.closePath();
      Td(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 115, a * 37);
      d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
      d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
      d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
      d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
      d.closePath();
      Td(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 146, a * 34);
      d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
      d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
      d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
      d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
      d.closePath();
      Td(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 143, a * 69);
      d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
      d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
      d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
      d.closePath();
      Td(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149, a * 92);
      d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
      d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
      d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
      d.closePath();
      Td(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 111, a * 61);
      d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
      d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
      d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
      d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
      d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
      d.closePath();
      Td(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107, a * 81);
      d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
      d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
      d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
      d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
      d.closePath();
      Td(d, b[0]);
      return c;
    }(a * 1, ["#BB0000"]));
    ⲆⲆ[466] = Yq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -20, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 50, a * 105);
      d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
      d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
      d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
      d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
      d.closePath();
      Td(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 44, a * 106);
      d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
      d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
      d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
      d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
      d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
      d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
      d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
      d.closePath();
      Td(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 30, a * 159);
      d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
      d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
      d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
      d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
      d.closePath();
      Td(d, b);
      return c;
    }(a * 0.8, "#BB0000"));
    ⲆⲆ[467] = Yq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -165, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217, a * 103);
      d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
      d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
      d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
      d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
      d.closePath();
      Td(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 231, a * 163);
      d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
      d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
      d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
      d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
      d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
      d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
      d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
      d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
      d.closePath();
      Td(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 234, a * 154);
      d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
      d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
      d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
      d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
      d.closePath();
      Td(d, b);
      return c;
    }(a * 0.8, "#BB0000"));
    ⲆⲆ[322] = Yq(function (b, c) {
      var d = document.createElement("canvas");
      var f = d.getContext("2d");
      var g = b * 85;
      var h = b * 115;
      var a = b * 4;
      d.width = g;
      d.height = h;
      f.translate(b * -130, b * -60);
      f.globalAlpha = 1;
      f.beginPath();
      f.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
      f.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
      f.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
      f.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
      f.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
      f.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
      f.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
      f.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
      f.closePath();
      Td(f, c, c, a);
      return d;
    }(a * 0.9, "#BB0000"));
    ⲆⲆ[279] = Yq(Md(a * 0.6, "#BB0000"));
    ⲆⲆ[280] = Yq(Md(a * 0.6, "#1CE7E0"));
    ⲆⲆ[281] = Yq(Md(a * 0.6, "#DBE71C"));
    ⲆⲆ[308] = Yq(Md(a * 0.6, "#00BB00"));
    ⲆⲆ[602] = [];
    ⲆⲆ[602][0] = Yq(um(a, ["#dac291"]));
    ⲆⲆ[602][1] = Yq(um(a, ["#0D423D"]));
    ⲆⲆ[698] = [];
    ⲆⲆ[698][0] = Yq(um(a, ["#dac291"]));
    ⲆⲆ[698][1] = Yq(um(a, ["#0D423D"]));
    ⲆⲆ[788] = [];
    ⲆⲆ[788][0] = Yq(mm(a * 0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
    ⲆⲆ[788][1] = Yq(mm(a * 0.3, lh, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
    ⲆⲆ[182] = [];
    ⲆⲆ[182][0] = Yq(mm(a * 0.3, D, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
    ⲆⲆ[182][1] = Yq(mm(a * 0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
    ⲆⲆ[127] = [Yq(jm(a, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ⲆⲆ[128] = [Yq(jm(a, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ⲆⲆ[603] = [];
    ⲆⲆ[603][0] = [];
    ⲆⲆ[603][1] = [];
    ⲆⲆ[603][0].push(Yq(km(a * 1, ["#0B6A84"])));
    ⲆⲆ[603][0].push(Yq(gp(a * 1, ["#0B6A84"])));
    ⲆⲆ[603][0].push(Yq(Cm(a * 1, ["#0B6A84"])));
    ⲆⲆ[603][0].push(Yq(wm(a * 1, ["#0B6A84"])));
    ⲆⲆ[603][0].push(Yq(Gm(a * 1, ["#0B6A84"])));
    ⲆⲆ[603][0].push(Yq(mp(a * 1, ["#0B6A84"])));
    ⲆⲆ[603][0].push(Yq(zm(a * 1, ["#0B6A84"])));
    ⲆⲆ[603][1].push(Yq(km(a * 1, ["#09373F"])));
    ⲆⲆ[603][1].push(Yq(gp(a * 1, ["#09373F"])));
    ⲆⲆ[603][1].push(Yq(Cm(a * 1, ["#09373F"])));
    ⲆⲆ[603][1].push(Yq(wm(a * 1, ["#09373F"])));
    ⲆⲆ[603][1].push(Yq(Gm(a * 1, ["#09373F"])));
    ⲆⲆ[603][1].push(Yq(mp(a * 1, ["#09373F"])));
    ⲆⲆ[603][1].push(Yq(zm(a * 1, ["#09373F"])));
    ⲆⲆ[692] = [];
    ⲆⲆ[692][0] = [];
    ⲆⲆ[692][1] = [];
    ⲆⲆ[692][0].push(Yq(sm(a * 1.7, ["#FBEFBC"], 0)));
    ⲆⲆ[692][0].push(Yq(sm(a * 1.9, ["#FBEFBC"], 1)));
    ⲆⲆ[692][0].push(Yq(sm(a * 1.7, ["#FBEFBC"], 2)));
    ⲆⲆ[692][1].push(Yq(sm(a * 1.7, ["#0F4C48"], 0)));
    ⲆⲆ[692][1].push(Yq(sm(a * 1.9, ["#0F4C48"], 1)));
    ⲆⲆ[692][1].push(Yq(sm(a * 1.7, ["#0F4C48"], 2)));
    ⲆⲆ[694] = [];
    ⲆⲆ[694][0] = [];
    ⲆⲆ[694][1] = [];
    ⲆⲆ[694][0].push(Yq(sm(a * 1.8, ["#A9D6D3"], 0)));
    ⲆⲆ[694][0].push(Yq(sm(a * 2, ["#A9D6D3"], 1)));
    ⲆⲆ[694][0].push(Yq(sm(a * 1.8, ["#A9D6D3"], 2)));
    ⲆⲆ[694][1].push(Yq(sm(a * 1.8, ["#115E60"], 0)));
    ⲆⲆ[694][1].push(Yq(sm(a * 2, ["#115E60"], 1)));
    ⲆⲆ[694][1].push(Yq(sm(a * 1.8, ["#115E60"], 2)));
    ⲆⲆ[695] = [];
    ⲆⲆ[695][0] = [];
    ⲆⲆ[695][1] = [];
    ⲆⲆ[695][0].push(Yq(sm(a * 1.9, ["#2A8B9B"], 0)));
    ⲆⲆ[695][0].push(Yq(sm(a * 2.1, ["#2A8B9B"], 1)));
    ⲆⲆ[695][0].push(Yq(sm(a * 1.9, ["#2A8B9B"], 2)));
    ⲆⲆ[695][1].push(Yq(sm(a * 1.9, ["#0F464C"], 0)));
    ⲆⲆ[695][1].push(Yq(sm(a * 2.1, ["#0F464C"], 1)));
    ⲆⲆ[695][1].push(Yq(sm(a * 1.9, ["#0F464C"], 2)));
    ⲆⲆ[693] = [];
    ⲆⲆ[693][0] = [];
    ⲆⲆ[693][1] = [];
    ⲆⲆ[693][0].push(Yq(Ac(a * 0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ⲆⲆ[693][0].push(Yq(Ac(a * 1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ⲆⲆ[693][0].push(Yq(Ac(a * 1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ⲆⲆ[693][1].push(Yq(Ac(a * 0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ⲆⲆ[693][1].push(Yq(Ac(a * 1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ⲆⲆ[693][1].push(Yq(Ac(a * 1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ⲆⲆ[637] = [];
    ⲆⲆ[637][0] = Yq(sp(a * 0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
    ⲆⲆ[637][1] = Yq(sp(a * 0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
    ⲆⲆ[687] = Yq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 376;
      c.height = a * 371;
      d.globalAlpha = 1;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 191.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
      d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
      d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
      d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
      d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
      d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
      d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
      d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
      d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
      d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
      d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
      d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
      d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
      d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
      d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
      d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
      d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
      d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
      d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
      d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
      d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
      d.closePath();
      Td(d, b[0], b[0], a * 12);
      return c;
    }(a * 0.8, ["#B6222A"]));
    ⲆⲆ[673] = [];
    ⲆⲆ[673][0] = Yq(Zc(a * 0.8, 0, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
    ⲆⲆ[673][1] = Yq(Zc(a * 0.8, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
    ⲆⲆ[688] = Yq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 158;
      c.height = a * 201;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 96.5, a * 76.421875);
      d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
      d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
      d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
      d.closePath();
      Td(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 61.5, a * 78.421875);
      d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
      d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
      d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
      d.closePath();
      Td(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 116.5, a * 127.421875);
      d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
      d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
      d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
      d.closePath();
      Td(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 41.5, a * 134.421875);
      d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
      d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
      d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
      d.closePath();
      Td(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 78.5, a * 51.921875);
      d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
      d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
      d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
      d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
      d.closePath();
      Td(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      Td(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 42.5, a * 163.421875);
      d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
      d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
      d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
      d.closePath();
      Td(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 79.5, a * 61.421875);
      d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
      d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
      d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
      d.closePath();
      Td(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      Td(d, b[0], b[0], a * 10);
      return c;
    }(a * 0.8, ["#B6222A"]));
    ⲆⲆ[902] = [];
    ⲆⲆ[902][0] = Yq(Wd(a * 0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
    ⲆⲆ[902][1] = Yq(Wd(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    ⲆⲆ[903] = [];
    ⲆⲆ[903][0] = Yq(Wd(a * 0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
    ⲆⲆ[903][1] = Yq(Wd(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
    ⲆⲆ[ts.ᐃⲆⵠⵠⲆⵠᐃ] = [];
    ⲆⲆ[ts.ᐃⲆⵠⵠⲆⵠᐃ][0] = Yq(Wd(a * 0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
    ⲆⲆ[ts.ᐃⲆⵠⵠⲆⵠᐃ][1] = Yq(Wd(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    ⲆⲆ[904] = Yq(jd(a * 0.4, ["#B6222A"]));
    ⲆⲆ[905] = Yq(jd(a * 0.4, ["#B6222A"]));
    ⲆⲆ[ts.ⵠΔⲆΔΔᐃᐃⵠⵠ] = Yq(jd(a * 0.4, ["#B6222A"]));
    ⲆⲆ[230] = Yq(oc(a * 0.35, qg, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
    ⲆⲆ[229] = Yq(Bu(a * 0.35, true, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
    ⲆⲆ[886] = [];
    ⲆⲆ[886][0] = Yq(uu(a * 0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
    ⲆⲆ[886][1] = Yq(uu(a * 0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
    ⲆⲆ[887] = [];
    ⲆⲆ[887][0] = Yq(uu(a * 0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
    ⲆⲆ[887][1] = Yq(uu(a * 0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
    ⲆⲆ[894] = [];
    ⲆⲆ[894][0] = Yq(vu(a * 0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ⲆⲆ[894][1] = Yq(vu(a * 0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ⲆⲆ[895] = [];
    ⲆⲆ[895][0] = Yq(qu(a * 0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ⲆⲆ[895][1] = Yq(qu(a * 0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ⲆⲆ[896] = [];
    ⲆⲆ[896][0] = Yq(vu(a * 0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ⲆⲆ[896][1] = Yq(vu(a * 0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
    ⲆⲆ[897] = [];
    ⲆⲆ[897][0] = Yq(qu(a * 0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ⲆⲆ[897][1] = Yq(qu(a * 0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
    ⲆⲆ[888] = Yq(pu(a * 0.35, ["#B6222A"]));
    ⲆⲆ[889] = Yq(vu(a * 0.35, 0, [undefined, "#B6222A"]));
    ⲆⲆ[890] = Yq(qu(a * 0.35, 0, [Ma, "#B6222A"]));
    ⲆⲆ[891] = Yq(pu(a * 0.35, ["#22E066"]));
    ⲆⲆ[892] = Yq(vu(a * 0.35, 0, [zo, "#22E066"]));
    ⲆⲆ[893] = Yq(qu(a * 0.35, 0, [undefined, "#22E066"]));
    ⲆⲆ[48] = [];
    ⲆⲆ[48][0] = Yq(Nc(a * 0.3, true, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
    ⲆⲆ[48][1] = Yq(Nc(a * 0.3, true, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
    ⲆⲆ[47] = [];
    ⲆⲆ[47][0] = Yq(Gc(a * 0.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
    ⲆⲆ[47][1] = Yq(Gc(a * 0.45, true, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
    ⲆⲆ[141] = [];
    ⲆⲆ[141][0] = Yq(ym(a * 0.63, D, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
    ⲆⲆ[141][1] = Yq(ym(a * 0.63, ct, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ⲆⲆ[125] = [];
    ⲆⲆ[125][0] = Yq(xm(a, yi, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
    ⲆⲆ[125][1] = Yq(xm(a, ct, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ⲆⲆ[221] = [];
    ⲆⲆ[221][0] = Δᐃ.ΔᐃΔⵠᐃⵠΔΔⲆ;
    ⲆⲆ[221][1] = Δᐃ.ΔΔⵠᐃⵠᐃᐃⵠⲆ;
    ⲆⲆ[190] = [];
    ⲆⲆ[190][0] = Yq(_d(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ⲆⲆ[190][1] = Yq(_d(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ⲆⲆ[853] = [ⲆⲆ[190]];
    ⲆⲆ[853][1] = [];
    ⲆⲆ[853][2] = [];
    ⲆⲆ[853][1][0] = Yq(Rd(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ⲆⲆ[853][1][1] = Yq(Rd(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ⲆⲆ[853][2][0] = Yq(Ed(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ⲆⲆ[853][2][1] = Yq(Ed(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ⲆⲆ[49] = [];
    ⲆⲆ[49][0] = Yq(Ad(3 - Math.PI / 2, Om(a * 0.6, qg, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
    ⲆⲆ[49][1] = Yq(Ad(3 - Math.PI / 2, Om(a * 0.6, Yk, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
    ⲆⲆ[728] = [];
    ⲆⲆ[728][0] = Yq(Ot(a * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
    ⲆⲆ[728][1] = Yq(Ot(a * 0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
    ⲆⲆ[798] = Yq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 650;
      c.height = a * 650;
      d.scale(1.9, 1.9);
      d.save();
      d.translate(a * 202.5, a * 147.5);
      yd(d, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
      d.restore();
      Td(d, b[4], b[1], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      yd(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      Td(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      yd(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
      d.restore();
      Td(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      yd(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      Td(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      yd(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      Td(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 204, a * 121.5);
      yd(d, a * -92, a * -9.5, a * 184, a * 19, a * 10);
      d.restore();
      Td(d, b[3], b[3], a * 10);
      d.save();
      d.translate(a * 197, a * 299);
      yd(d, a * 85, a * -9, a * -170, a * 18, a * 10);
      d.restore();
      Td(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 94, a * 317);
      d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
      d.closePath();
      Td(d, Ra, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 279, a * 142);
      d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
      d.closePath();
      Td(d, w, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 106);
      d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
      d.closePath();
      Td(d, undefined, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 281, a * 282);
      d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
      d.closePath();
      Td(d, undefined, b[1], a * 12);
      return c;
    }(a * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
    ⲆⲆ[729] = Yq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 400;
      c.height = a * 400;
      d.save();
      d.translate(a * 202.5, a * 147.5);
      yd(d, a * -96.5, a * -21.5, a * 193, a * 43, a * 0);
      d.restore();
      Td(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 190.5);
      yd(d, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
      d.restore();
      Td(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 233.5);
      yd(d, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
      d.restore();
      Td(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 275);
      yd(d, a * 96.5, a * -21, a * -193, a * 42, a * 0);
      d.restore();
      Td(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      yd(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      Td(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      yd(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
      d.restore();
      Td(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      yd(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      Td(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      yd(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      Td(d, b[0], b[0], a * 12);
      return c;
    }(a * 0.3, ["#BB0000"]));
    ⲆⲆ[658] = _t(1, [{
      f: Ym,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ⲆⲆ[150] = _t(1.5, [{
      f: em,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#120202", "#750a0a", "#991616", "#120202"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ⲆⲆ[669] = Um(a * 0.35, ["#072428", "#67A242", "#67A242"], 0);
    ⲆⲆ[670] = Um(a * 0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
    ⲆⲆ[671] = Um(a * 0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
    ⲆⲆ[672] = Um(a * 0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
    if (ΔⲆᐃⵠΔⲆⵠ) {
      ⲆⲆ[278] = Yq(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var f = b * 200;
        var g = b * 180;
        var h = b * 8;
        c.width = f;
        c.height = g;
        d.beginPath();
        yd(d, 0, 0, f, g - h, h);
        d.globalAlpha = 0.8;
        Td(d, "#1D6055");
        d.globalAlpha = 1;
        var a = _c(b, "Leaderboard", 25, "#FFF");
        d.drawImage(a, (f - a.width) / 2, b * 5);
        return c;
      }(a));
    } else {
      ⲆⲆ[278] = Yq(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var f = b * 200;
        var g = b * 270;
        var h = b * 8;
        c.width = f;
        c.height = g + 20;
        d.beginPath();
        yd(d, 0, 0, f, g - h, h);
        d.globalAlpha = 0.5;
        Td(d, "#1D6055");
        d.globalAlpha = 1;
        var a = _c(b, "Leaderboard", 25, "#FFF");
        d.drawImage(a, (f - a.width) / 2, b * 5);
        return c;
      }(a));
    }
    if (ΔⲆᐃⵠΔⲆⵠ) {
      ⲆⲆ[267] = Yq(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var f = b * 335;
        var i = b * 250;
        var j = b * 120;
        var a = b * 20;
        var k = b * 35;
        var m = b * 65;
        var h = b * 2;
        var l = b * 4;
        c.width = f;
        c.height = j;
        d.beginPath();
        d.translate(0, b * 15);
        yd(d, m, 0, i, a, h);
        Td(d, null, "#69A148", l);
        d.translate(0, k);
        yd(d, m, 0, i, a, h);
        Td(d, null, "#AF352A", l);
        d.translate(0, k);
        yd(d, m, 0, i, a, h);
        Td(d, null, "#669BB1", l);
        return c;
      }(0.75));
    } else {
      ⲆⲆ[267] = Yq(function (c) {
        var d = document.createElement("canvas");
        var f = d.getContext("2d");
        var i = c * 950;
        var j = c * 180;
        var k = c * 50;
        var a = c * 20;
        var m = c * 240;
        var n = c * 35;
        var h = c * 1;
        var l = c * 4;
        var g = c * 4;
        d.width = i;
        d.height = k;
        f.translate(0, c * 15);
        yd(f, n, h, j, a, l);
        Td(f, null, "#69A148", g);
        var o = ⲆⲆ[669];
        f.drawImage(o, 17, -8);
        f.translate(m, 0);
        yd(f, n, h, j, a, l);
        Td(f, null, "#AF352A", g);
        o = ⲆⲆ[671];
        f.drawImage(o, 17, -9);
        f.translate(m, 0);
        yd(f, n, h, j, a, l);
        Td(f, null, "#669BB1", g);
        o = ⲆⲆ[670];
        f.drawImage(o, 17, -8);
        f.translate(m, 0);
        yd(f, n, h, j, a, l);
        Td(f, null, "#074A87", g);
        o = ⲆⲆ[672];
        f.drawImage(o, 17, -8);
        return d;
      }(a));
    }
    if (ΔⲆᐃⵠΔⲆⵠ) {
      ⲆⲆ[608] = Yq(zp(0.75));
    } else {
      ⲆⲆ[608] = Yq(zp(a));
    }
    ⲆⲆ[792] = Yq(np(a * 0.16, bs, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
    ⲆⲆ[537] = Yq(Ad(5.8, tu(a * 0.15, Dl, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
    ⲆⲆ[283] = [];
    ⲆⲆ[465] = [];
    for (b = 0; b < 18; b++) {
      ⲆⲆ[465][b] = _c(a, "" + (b + 1), 12, "#FFF");
    }
    ⲆⲆ[708] = [];
    ⲆⲆ[708].push(Yq(im(a * 0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
    ⲆⲆ[708].push(Yq(im(a * 0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
    ⲆⲆ[708].push(Yq(im(a * 0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
    ⲆⲆ[725] = [];
    ⲆⲆ[725].push(Yq(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      c.translate(0, a * 20);
      Pd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      Td(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      Pd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      Td(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      Td(c, "#12432D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      Td(c, "#3A2A0D");
      Pd(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      Td(c, ah, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      Td(c, undefined, "#5E3E1A", a * 12);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      Td(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      Td(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      Td(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      Td(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      Td(c, Ra, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      Td(c, ur, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      Td(c, Xq, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      Td(c, zo, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      Td(c, Ao, "#c7a726", a * 12);
      c.translate(0, a * -8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      Td(c, Xq, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      Td(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      Td(c, kn, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      Td(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      Td(c, ar, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      Td(c, mk, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      Td(c, cq, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      Td(c, kn, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      Td(c, zo, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      Td(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      Td(c, "#ECBE35", "#EDCE4F", a * 8);
      Pd(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      Td(c, "#392C16", "#5E3E1A", a * 10);
      return b;
    }(a * 0.22)));
    ⲆⲆ[725].push(Yq(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      c.translate(0, a * 20);
      Pd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      Td(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      Pd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      Td(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      Td(c, "#3A2A0D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      Td(c, "#071A1B");
      Pd(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      Td(c, undefined, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      Td(c, undefined, "#5E3E1A", a * 12);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      Td(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      Td(c, ar, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      Td(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      Td(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      Td(c, Ao, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      Td(c, wj, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      Td(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      Td(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      Td(c, ar, "#281C08", a * 12);
      c.translate(0, a * -8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      Td(c, zo, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      Td(c, fk, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      Td(c, Wn, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      Td(c, Wn, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      Td(c, zo, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      Td(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      Td(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      Td(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      Td(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      Td(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      Td(c, "#E1DDD5", "#EAE7E4", a * 8);
      Pd(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      Td(c, "#392C16", "#5E3E1A", a * 10);
      return b;
    }(a * 0.22)));
    ⲆⲆ[726] = Yq(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      Pd(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
      Td(c, "#C09D6F", "#A37943", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
      c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
      c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
      c.closePath();
      Td(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 161.50003051757812, a * 117.90341186523438);
      yd(c, a * -5.5, a * -37.5, a * 11, a * 75, a * 10);
      c.restore();
      Td(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 162.00003051757812, a * 78.90341186523438);
      yd(c, a * -10, a * -5.5, a * 20, a * 11, a * 1);
      c.restore();
      Td(c, "#C09D6F");
      Pd(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
      Td(c, "#C09D6F");
      return b;
    }(a * 0.22));
    ⲆⲆ[727] = [];
    ⲆⲆ[727].push(Yq(Ud(a * 1.5, ["#795026", "#654320", "#eda80d"], 0)));
    ⲆⲆ[727].push(Yq(Ud(a * 1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
    ⲆⲆ[727].push(Yq(Ud(a * 1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
    ⲆⲆ[546] = Δᐃ.ΔⲆᐃⵠΔΔⲆ;
    ⲆⲆ[547] = Δᐃ.ΔᐃⵠΔⲆⵠⵠ;
    ⲆⲆ[548] = Δᐃ.ⲆⲆⵠΔⲆΔⲆ;
    ⲆⲆ[549] = Δᐃ.ⵠᐃⵠᐃⲆⵠⵠ;
    ⲆⲆ[517] = _c(a, "Show spectators", 25, "#FFF", undefined, ar, "#000", 5, 220);
    ⲆⲆ[525] = _c(a, "Reconnecting...", 30, "#FFF");
    console.log(w, undefined);
  }
  function Xm(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 139;
    d.height = a * 135;
    f.translate(0, a * 10);
    f.globalAlpha = b ? 0.5 : 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 32, a * 77);
    f.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
    f.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
    f.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
    f.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    f.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 65, a * 37);
    f.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    f.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    f.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    f.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    f.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 30, a * 63);
    f.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
    f.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    f.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    f.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    f.closePath();
    Td(f, c[0]);
    f.translate(0, a * -10);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 32, a * 77);
    f.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
    f.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
    f.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
    f.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    f.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    f.closePath();
    Td(f, c[1]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 65, a * 37);
    f.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    f.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    f.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    f.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    f.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    f.closePath();
    Td(f, c[1]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 30, a * 63);
    f.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
    f.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    f.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    f.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    f.closePath();
    Td(f, c[1]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 80, a * 38);
    f.bezierCurveTo(a * 72.5, a * 52, a * 72.5, a * 52, a * 65, a * 66);
    f.bezierCurveTo(a * 47.5, a * 37, a * 47.5, a * 37, a * 30, a * 7);
    f.bezierCurveTo(a * 48, a * 4, a * 57, a * 4, a * 64, a * 10);
    f.closePath();
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 65, a * 65);
    f.bezierCurveTo(a * 125, a * 73, a * 95.5, a * 69, a * 126, a * 73);
    f.bezierCurveTo(a * 119, a * 98, a * 106, a * 104, a * 98, a * 103);
    f.bezierCurveTo(a * 84.5, a * 102, a * 84.5, a * 102, a * 71, a * 101);
    f.bezierCurveTo(a * 64, a * 86, a * 64, a * 86, a * 57, a * 70);
    f.closePath();
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 27, a * 69);
    f.bezierCurveTo(a * 64, a * 65, a * 46, a * 67, a * 65, a * 65);
    f.bezierCurveTo(a * 43.5, a * 94, a * 43.5, a * 94, a * 22, a * 123);
    f.bezierCurveTo(a * 8, a * 103, a * 8, a * 103, a * 9, a * 103);
    f.bezierCurveTo(a * 5, a * 98, a * 11, a * 89, a * 26, a * 70);
    f.closePath();
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 26, a * 69);
    f.bezierCurveTo(a * 65, a * 60, a * 45, a * 65, a * 64, a * 60);
    f.bezierCurveTo(a * 63, a * 65, a * 63, a * 65, a * 62, a * 70);
    f.closePath();
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 80, a * 38);
    f.bezierCurveTo(a * 68, a * 70, a * 75, a * 53, a * 70, a * 68);
    f.bezierCurveTo(a * 65, a * 67, a * 65, a * 67, a * 60, a * 65);
    f.closePath();
    Td(f, c[2]);
    return d;
  }
  function Zm(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 117;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 4, a * 90);
    f.bezierCurveTo(a * 20, a * 99.5, a * 20, a * 99.5, a * 36, a * 109);
    f.bezierCurveTo(a * 67, a * 92, a * 67, a * 92, a * 98, a * 75);
    f.bezierCurveTo(a * 91, a * 27, a * 91, a * 27, a * 91, a * 28);
    f.bezierCurveTo(a * 72.5, a * 16, a * 72.5, a * 16, a * 54, a * 4);
    f.bezierCurveTo(a * 33.5, a * 10, a * 33.5, a * 10, a * 13, a * 16);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 6, a * 76);
    f.bezierCurveTo(a * 13.5, a * 51.5, a * 13.5, a * 51.5, a * 21, a * 27);
    f.bezierCurveTo(a * 37.5, a * 17, a * 37.5, a * 17, a * 54, a * 7);
    f.bezierCurveTo(a * 33.5, a * 12.5, a * 33.5, a * 12.5, a * 13, a * 18);
    f.closePath();
    Td(f, c[1]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 24, a * 62);
    f.bezierCurveTo(a * 28.5, a * 53, a * 28.5, a * 53, a * 33, a * 44);
    f.bezierCurveTo(a * 41.5, a * 41, a * 41.5, a * 41, a * 50, a * 38);
    f.bezierCurveTo(a * 52.5, a * 35, a * 52.5, a * 35, a * 55, a * 32);
    f.bezierCurveTo(a * 52, a * 30, a * 52, a * 30, a * 49, a * 28);
    f.bezierCurveTo(a * 38, a * 31.5, a * 38, a * 31.5, a * 27, a * 35);
    f.closePath();
    Td(f, c[1]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36, a * 107);
    f.bezierCurveTo(a * 66, a * 90.5, a * 66, a * 90.5, a * 96, a * 74);
    f.bezierCurveTo(a * 93, a * 52.5, a * 93, a * 52.5, a * 90, a * 31);
    f.bezierCurveTo(a * 87, a * 48, a * 87, a * 48, a * 84, a * 65);
    f.closePath();
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 1, a * 89);
    f.bezierCurveTo(a * 18, a * 100, a * 34, a * 110, a * 35, a * 111);
    f.bezierCurveTo(a * 67, a * 93, a * 67, a * 93, a * 99, a * 75);
    f.bezierCurveTo(a * 100, a * 78.5, a * 100, a * 78.5, a * 101, a * 82);
    f.bezierCurveTo(a * 68, a * 99, a * 68, a * 99, a * 35, a * 116);
    f.bezierCurveTo(a * 18, a * 106.5, a * 18, a * 106.5, a * 1, a * 97);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36, a * 107);
    f.bezierCurveTo(a * 66.5, a * 91.5, a * 66.5, a * 91.5, a * 97, a * 76);
    f.bezierCurveTo(a * 94.5, a * 52, a * 94.5, a * 52, a * 92, a * 28);
    f.bezierCurveTo(a * 73, a * 15.5, a * 73, a * 15.5, a * 54, a * 3);
    f.bezierCurveTo(a * 33, a * 9.5, a * 33, a * 9.5, a * 12, a * 16);
    f.bezierCurveTo(a * 8, a * 53, a * 8, a * 53, a * 4, a * 90);
    f.bezierCurveTo(a * 18.5, a * 99, a * 18.5, a * 99, a * 33, a * 108);
    f.closePath();
    Td(f, ar, c[4], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 22, a * 71);
    f.bezierCurveTo(a * 30, a * 76.5, a * 30, a * 76.5, a * 38, a * 82);
    f.bezierCurveTo(a * 53, a * 72, a * 53, a * 72, a * 68, a * 62);
    f.bezierCurveTo(a * 68, a * 52, a * 68, a * 52, a * 68, a * 42);
    f.bezierCurveTo(a * 59.5, a * 35.5, a * 59.5, a * 35.5, a * 51, a * 29);
    f.bezierCurveTo(a * 39.5, a * 32, a * 39.5, a * 32, a * 28, a * 35);
    f.bezierCurveTo(a * 25, a * 52, a * 25, a * 52, a * 22, a * 69);
    f.closePath();
    Td(f, Ao, c[4], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 5, a * 89);
    f.bezierCurveTo(a * 20, a * 73, a * 12.5, a * 80.5, a * 20, a * 72);
    f.closePath();
    Td(f, undefined, c[4], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 35, a * 102);
    f.bezierCurveTo(a * 36, a * 92.5, a * 36, a * 92.5, a * 37, a * 83);
    f.closePath();
    Td(f, Wn, c[4], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 68, a * 62);
    f.bezierCurveTo(a * 81, a * 67.5, a * 81, a * 67.5, a * 94, a * 73);
    f.closePath();
    Td(f, undefined, c[4], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 70, a * 41);
    f.bezierCurveTo(a * 80, a * 35.5, a * 80, a * 35.5, a * 90, a * 30);
    f.closePath();
    Td(f, undefined, c[4], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 28, a * 33);
    f.bezierCurveTo(a * 21.5, a * 26.5, a * 21.5, a * 26.5, a * 15, a * 20);
    f.closePath();
    Td(f, w, c[4], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 51, a * 28);
    f.bezierCurveTo(a * 53, a * 17, a * 53, a * 17, a * 55, a * 6);
    f.closePath();
    Td(f, undefined, c[4], a * 6);
    return d;
  }
  function $m(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 180;
    d.height = a * 120;
    f.translate(a * -65, a * -35);
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(0, a * 10);
    f.save();
    f.translate(a * 150.5, a * 63.84375);
    yd(f, a * -67, a * -16.5, a * 134, a * 33, a * 5);
    f.restore();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 80.5, a * 75.34375);
    f.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    f.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    f.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 206.5, a * 71.34375);
    f.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    f.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    f.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 136.5, a * 75.34375);
    f.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    f.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    f.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    f.closePath();
    Td(f, c[0]);
    f.save();
    f.translate(a * 152.5, a * 80.84375);
    f.rotate(3.12);
    yd(f, a * -73, a * -20.5, a * 146, a * 41, a * 5);
    f.restore();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(0, a * -10);
    f.save();
    f.translate(a * 150.5, a * 63.84375);
    yd(f, a * -67, a * -16.5, a * 134, a * 33, a * 5);
    f.restore();
    Td(f, c[1], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 80.5, a * 75.34375);
    f.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    f.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    f.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    f.closePath();
    Td(f, c[1], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 206.5, a * 71.34375);
    f.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    f.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    f.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    f.closePath();
    Td(f, c[1], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 136.5, a * 75.34375);
    f.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    f.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    f.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    f.closePath();
    Td(f, c[1], c[2], a * 4);
    f.save();
    f.translate(a * 152.5, a * 80.84375);
    f.rotate(3.12);
    yd(f, a * -73, a * -20.5, a * 146, a * 41, a * 5);
    f.restore();
    Td(f, c[1], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 83.5, a * 73.34375);
    f.bezierCurveTo(a * 93.5, a * 70.34375, a * 105.5, a * 70.34375, a * 124.5, a * 72.34375);
    f.bezierCurveTo(a * 132.5, a * 78.34375, a * 162.5, a * 80.34375, a * 176.5, a * 76.34375);
    f.bezierCurveTo(a * 194.5, a * 69.34375, a * 192.5, a * 68.34375, a * 199.5, a * 63.34375);
    f.bezierCurveTo(a * 204.5, a * 63.34375, a * 204.5, a * 63.34375, a * 209.5, a * 63.34375);
    f.bezierCurveTo(a * 153.5, a * 82.34375, a * 157.5, a * 85.34375, a * 209.5, a * 63.34375);
    f.bezierCurveTo(a * 194.5, a * 88.34375, a * 162.5, a * 87.34375, a * 149.5, a * 88.34375);
    f.bezierCurveTo(a * 129.5, a * 81.34375, a * 103.5, a * 75.34375, a * 83.5, a * 82.34375);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 137.5, a * 65.34375);
    f.bezierCurveTo(a * 150.5, a * 76.34375, a * 170.5, a * 71.34375, a * 174.5, a * 65.34375);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 221.5, a * 85.34375);
    f.bezierCurveTo(a * 211.5, a * 79.34375, a * 191.5, a * 88.34375, a * 181.5, a * 96.34375);
    f.bezierCurveTo(a * 201.5, a * 96.34375, a * 201.5, a * 96.34375, a * 221.5, a * 96.34375);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 84.5, a * 89.34375);
    f.bezierCurveTo(a * 102.5, a * 87.34375, a * 112.5, a * 88.34375, a * 119.5, a * 97.34375);
    f.bezierCurveTo(a * 102, a * 98.34375, a * 102, a * 98.34375, a * 84.5, a * 99.34375);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 208.5, a * 104.34375);
    f.bezierCurveTo(a * 208.5, a * 110.34375, a * 208.5, a * 110.34375, a * 208.5, a * 116.34375);
    f.bezierCurveTo(a * 211.5, a * 110.34375, a * 211.5, a * 110.34375, a * 214.5, a * 104.34375);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 87.5, a * 117.34375);
    f.bezierCurveTo(a * 92, a * 118.84375, a * 92, a * 118.84375, a * 96.5, a * 120.34375);
    f.bezierCurveTo(a * 93, a * 123.84375, a * 93, a * 123.84375, a * 89.5, a * 127.34375);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 107.5, a * 51.34375);
    f.bezierCurveTo(a * 122.5, a * 54.34375, a * 122.5, a * 54.34375, a * 137.5, a * 57.34375);
    f.bezierCurveTo(a * 118, a * 57.34375, a * 118, a * 57.34375, a * 98.5, a * 57.34375);
    f.bezierCurveTo(a * 94.5, a * 54.84375, a * 94.5, a * 54.84375, a * 90.5, a * 52.34375);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 170.5, a * 52.34375);
    f.bezierCurveTo(a * 179.5, a * 51.84375, a * 179.5, a * 51.84375, a * 188.5, a * 51.34375);
    f.bezierCurveTo(a * 187.5, a * 53.84375, a * 187.5, a * 53.84375, a * 186.5, a * 56.34375);
    f.bezierCurveTo(a * 177, a * 56.34375, a * 177, a * 56.34375, a * 167.5, a * 56.34375);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 80.5, a * 69.34375);
    f.bezierCurveTo(a * 86.5, a * 70.34375, a * 86.5, a * 70.34375, a * 92.5, a * 71.34375);
    f.bezierCurveTo(a * 86, a * 73.34375, a * 86, a * 73.34375, a * 79.5, a * 75.34375);
    f.closePath();
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 222.5, a * 75.34375);
    f.bezierCurveTo(a * 214.5, a * 76.34375, a * 214.5, a * 76.34375, a * 206.5, a * 77.34375);
    f.bezierCurveTo(a * 216.5, a * 79.34375, a * 216.5, a * 79.34375, a * 226.5, a * 81.34375);
    f.closePath();
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 116.5, a * 100.34375);
    f.bezierCurveTo(a * 128, a * 97.34375, a * 128, a * 97.34375, a * 139.5, a * 94.34375);
    f.bezierCurveTo(a * 140, a * 96.84375, a * 140, a * 96.84375, a * 140.5, a * 99.34375);
    f.closePath();
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 112.5, a * 48.34375);
    f.bezierCurveTo(a * 115.5, a * 50.84375, a * 115.5, a * 50.84375, a * 118.5, a * 53.34375);
    f.bezierCurveTo(a * 131, a * 50.84375, a * 131, a * 50.84375, a * 143.5, a * 48.34375);
    f.closePath();
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 216.5, a * 109.34375);
    f.bezierCurveTo(a * 213, a * 114.84375, a * 213, a * 114.84375, a * 209.5, a * 120.34375);
    f.bezierCurveTo(a * 212, a * 118.84375, a * 212, a * 118.84375, a * 214.5, a * 117.34375);
    f.closePath();
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 86.5, a * 133.34375);
    f.bezierCurveTo(a * 89, a * 127.34375, a * 89, a * 127.34375, a * 91.5, a * 121.34375);
    f.bezierCurveTo(a * 92.5, a * 127.34375, a * 92.5, a * 127.34375, a * 93.5, a * 133.34375);
    f.closePath();
    Td(f, c[2]);
    return d;
  }
  function ep(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * -10, a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 72.5, a * 4.109375);
    f.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    f.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    f.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    f.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(a * 10, a * -10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 72.5, a * 4.109375);
    f.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    f.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    f.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    f.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    f.closePath();
    Td(f, c[1], c[2], a * 10);
    return d;
  }
  function ip(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 77;
    f.translate(0, a * 10);
    f.scale(0.2, 0.2);
    f.translate(0, a * -30);
    if (c == 1) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 36.5, a * 278.0625);
      f.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
      f.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
      f.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
      f.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
      f.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
      f.closePath();
      Td(f, b[0], b[3], a * 50);
    }
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36.5, a * 278.0625);
    f.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    f.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    f.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    f.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    f.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    f.closePath();
    Td(f, b[0], b[1], a * 19);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 214.5, a * 124.0625);
    f.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    f.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    f.closePath();
    Td(f, b[0], b[1], a * 19);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 157.5, a * 145.0625);
    f.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    f.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    f.closePath();
    Td(f, b[0], b[1], a * 19);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 103.5, a * 169.0625);
    f.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    f.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    f.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    f.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    f.closePath();
    Td(f, b[2], b[1], a * 19);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 194.5, a * 313.0625);
    f.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    f.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    f.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    f.closePath();
    Td(f, b[1]);
    f.scale(3, 3);
    f.translate(15, a * 10);
    if (c == 1) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 4, a * 32);
      f.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
      f.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
      f.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
      Td(f, undefined, b[3], a * 28);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 56, a * 6);
      f.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
      f.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
      f.closePath();
      Td(f, b[3], b[3], a * 28);
    }
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 4, a * 32);
    f.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
    f.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    f.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
    Td(f, undefined, b[1], a * 17);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 6);
    f.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    f.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    f.closePath();
    Td(f, b[1], b[1], a * 17);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 4, a * 32);
    f.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
    f.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    f.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
    Td(f, wj, b[2], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 6);
    f.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    f.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    f.closePath();
    Td(f, b[2], b[2], a * 10);
    return d;
  }
  function tp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -165, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217, a * 103);
    d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
    d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
    d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
    d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
    d.closePath();
    Td(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 231, a * 163);
    d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
    d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
    d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
    d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
    d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
    d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
    d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
    d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
    d.closePath();
    Td(d, b[2], b[3], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 234, a * 154);
    d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
    d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
    d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
    d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
    d.closePath();
    Td(d, b[2]);
    return c;
  }
  ;
  function np(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 106;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(0, a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 28, a * 67);
    f.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    f.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    f.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(0, a * -8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 145, a * 75);
    f.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
    f.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    f.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    f.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    f.closePath();
    Td(f, c[1]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 38, a * 46);
    f.bezierCurveTo(a * 52, a * 37, a * 69, a * 36, a * 85, a * 36);
    f.bezierCurveTo(a * 118, a * 38, a * 129, a * 42, a * 137, a * 48);
    f.bezierCurveTo(a * 135, a * 45, a * 135, a * 45, a * 133, a * 42);
    f.bezierCurveTo(a * 124, a * 32, a * 116, a * 28, a * 88, a * 25);
    f.bezierCurveTo(a * 47, a * 28, a * 40, a * 32, a * 36, a * 44);
    f.closePath();
    Td(f, c[5]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 145, a * 75);
    f.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
    f.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    f.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    f.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    f.closePath();
    Td(f, undefined, c[2], a * 4);
    f.translate(0, a * -3);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 28, a * 67);
    f.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    f.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    f.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    f.closePath();
    Td(f, c[10], c[10], a * 4);
    f.translate(0, a * 3);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 131, a * 43);
    f.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    f.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    f.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 41, a * 43);
    f.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    f.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
    f.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 24, a * 19);
    f.bezierCurveTo(a * 24, a * 35, a * 35, a * 42, a * 42, a * 44);
    f.bezierCurveTo(a * 43, a * 51, a * 43, a * 48, a * 43, a * 56);
    f.bezierCurveTo(a * 25, a * 47, a * 17, a * 36, a * 23, a * 20);
    f.closePath();
    Td(f, c[6]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 148, a * 18);
    f.bezierCurveTo(a * 159, a * 44, a * 139, a * 52, a * 130, a * 55);
    f.bezierCurveTo(a * 129, a * 48, a * 129, a * 46, a * 131, a * 43);
    f.bezierCurveTo(a * 144, a * 37, a * 148, a * 35, a * 147, a * 18);
    f.closePath();
    Td(f, c[6]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 131, a * 43);
    f.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    f.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    f.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    f.closePath();
    Td(f, Cr, c[4], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 41, a * 43);
    f.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    f.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
    f.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    f.closePath();
    Td(f, Ra, c[4], a * 4);
    f.save();
    f.translate(a * 87, a * 34.5);
    f.rotate(0);
    yd(f, a * -8, a * -10.5, a * 16, a * 21, a * 10);
    f.restore();
    Td(f, c[7], c[2], a * 4);
    f.save();
    f.translate(a * 87, a * 57);
    f.rotate(0);
    yd(f, a * -8, a * -23, a * 16, a * 46, a * 10);
    f.restore();
    Td(f, c[8], c[2], a * 4);
    Pd(f, a * 87, a * 39, a * 4.123105625617661);
    Td(f, c[9], c[2], a * 4);
    Pd(f, a * 87, a * 60, a * 4.242640687119285);
    Td(f, c[9], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 28, a * 67);
    f.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    f.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    f.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    f.closePath();
    Td(f, c[8], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 27, a * 69);
    f.bezierCurveTo(a * 13, a * 77, a * 16, a * 74, a * 27, a * 80);
    f.closePath();
    Td(f, c[9], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 145, a * 70);
    f.bezierCurveTo(a * 149.5, a * 72, a * 149.5, a * 72, a * 154, a * 74);
    f.bezierCurveTo(a * 150, a * 77, a * 150, a * 77, a * 146, a * 80);
    f.closePath();
    Td(f, c[9], c[2], a * 4);
    Pd(f, a * 50, a * 80, a * 5);
    Td(f, c[9], c[2], a * 4);
    Pd(f, a * 86.01141357421875, a * 81.76705932617188, a * 5);
    Td(f, c[9], c[2], a * 4);
    Pd(f, a * 119.01141357421875, a * 80.13069152832031, a * 5);
    Td(f, c[9], c[2], a * 4);
    return d;
  }
  function ap(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    f.save();
    f.translate(a * 204, a * 195.0833282470703);
    f.rotate(10.16);
    yd(f, a * -97.5, a * -134.5, a * 195, a * 269, a * 10);
    f.restore();
    Td(f, c[0], c[1], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 58.5, a * 226.5833282470703);
    f.bezierCurveTo(a * 120.5, a * 281.5833282470703, a * 120.5, a * 281.5833282470703, a * 182.5, a * 336.5833282470703);
    f.bezierCurveTo(a * 263, a * 248.5833282470703, a * 263, a * 248.5833282470703, a * 343.5, a * 160.5833282470703);
    f.bezierCurveTo(a * 280.5, a * 104.58332824707031, a * 280.5, a * 104.58332824707031, a * 217.5, a * 48.58332824707031);
    f.closePath();
    Td(f, c[2], c[3], a * 4);
    f.save();
    f.translate(a * 197, a * 169.0833282470703);
    f.rotate(10.16);
    yd(f, a * -93.5, a * -126.5, a * 187, a * 253, a * 10);
    f.restore();
    Td(f, c[4], c[1], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 226.5, a * 24.583328247070312);
    f.bezierCurveTo(a * 58.5, a * 207.5833282470703, a * 143, a * 116.58332824707031, a * 59.5, a * 208.5833282470703);
    f.closePath();
    Td(f, undefined, c[1], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 46.133331298828125, a * 202.64999389648438);
    f.bezierCurveTo(a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 228.64999389648438);
    f.closePath();
    Td(f, c[4], c[1], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 55.133331298828125, a * 211.64999389648438);
    f.bezierCurveTo(a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 238.64999389648438);
    f.bezierCurveTo(a * 50.133331298828125, a * 235.64999389648438, a * 50.133331298828125, a * 235.64999389648438, a * 45.133331298828125, a * 232.64999389648438);
    f.bezierCurveTo(a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 200.64999389648438);
    f.closePath();
    Td(f, c[4], c[1], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 46.133331298828125, a * 198.39999389648438);
    f.bezierCurveTo(a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 201.39999389648438);
    f.closePath();
    Td(f, c[4], c[1], a * 8);
    f.save();
    f.translate(a * 249.63333129882812, a * 120.89999389648438);
    f.rotate(7.04);
    yd(f, a * -58.5, a * -32, a * 117, a * 64, a * 10);
    f.restore();
    Td(f, c[5]);
    return d;
  }
  function rp(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    f.globalAlpha = 0.4;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    f.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    f.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    f.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    f.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    f.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    f.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    f.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    f.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    f.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    f.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    f.closePath();
    Td(f, undefined, c[2], a * 40);
    f.globalAlpha = 0.4;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    f.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    f.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    f.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    f.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    f.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    f.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    f.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    f.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    f.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    f.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    f.closePath();
    Td(f, undefined, c[1], a * 20);
    f.globalAlpha = 0.8;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    f.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    f.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    f.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    f.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    f.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    f.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    f.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    f.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    f.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    f.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    f.closePath();
    Td(f, c[0], c[1], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 51.000030517578125, a * 37.9886474609375);
    f.bezierCurveTo(a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 85.9886474609375);
    f.bezierCurveTo(a * 75.50003051757812, a * 85.9886474609375, a * 75.50003051757812, a * 85.9886474609375, a * 100.00003051757812, a * 85.9886474609375);
    f.bezierCurveTo(a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 37.9886474609375);
    f.bezierCurveTo(a * 76.00003051757812, a * 37.9886474609375, a * 76.00003051757812, a * 37.9886474609375, a * 52.000030517578125, a * 37.9886474609375);
    f.closePath();
    Td(f, c[1], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 99.00003051757812, a * 38.9886474609375);
    f.bezierCurveTo(a * 93.50003051757812, a * 44.9886474609375, a * 93.50003051757812, a * 44.9886474609375, a * 88.00003051757812, a * 50.9886474609375);
    f.bezierCurveTo(a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 93.9886474609375);
    f.bezierCurveTo(a * 94.00003051757812, a * 90.4886474609375, a * 94.00003051757812, a * 90.4886474609375, a * 100.00003051757812, a * 86.9886474609375);
    f.closePath();
    Td(f, c[1], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 87.00003051757812, a * 49.625);
    f.bezierCurveTo(a * 61.000030517578125, a * 49.625, a * 61.000030517578125, a * 49.625, a * 35.000030517578125, a * 49.625);
    f.bezierCurveTo(a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 91.625);
    f.bezierCurveTo(a * 60.500030517578125, a * 91.625, a * 60.500030517578125, a * 91.625, a * 86.00003051757812, a * 91.625);
    f.bezierCurveTo(a * 86.50003051757812, a * 70.625, a * 86.50003051757812, a * 70.625, a * 87.00003051757812, a * 49.625);
    f.closePath();
    Td(f, c[1], c[3], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 47.000030517578125, a * 36.625);
    f.bezierCurveTo(a * 73.00003051757812, a * 37.125, a * 73.00003051757812, a * 37.125, a * 99.00003051757812, a * 37.625);
    f.bezierCurveTo(a * 93.50003051757812, a * 44.125, a * 93.50003051757812, a * 44.125, a * 88.00003051757812, a * 50.625);
    f.bezierCurveTo(a * 60.500030517578125, a * 50.125, a * 60.500030517578125, a * 50.125, a * 33.000030517578125, a * 49.625);
    f.closePath();
    Td(f, c[1], c[3], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 53.000030517578125, a * 52.625);
    f.bezierCurveTo(a * 40.000030517578125, a * 54.625, a * 39.000030517578125, a * 59.625, a * 40.000030517578125, a * 67.625);
    f.bezierCurveTo(a * 45.000030517578125, a * 59.625, a * 48.000030517578125, a * 58.625, a * 54.000030517578125, a * 53.625);
    f.closePath();
    Td(f, c[3]);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    f.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    f.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    f.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    f.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    f.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    f.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    f.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    f.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    f.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    f.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    f.closePath();
    Td(f, undefined, c[3], a * 4);
    return d;
  }
  function sp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 376;
    c.height = a * 371;
    d.globalAlpha = 0.5;
    d.translate(a * 5, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    Td(d, b[0]);
    d.globalAlpha = 1;
    d.translate(a * -4, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    Td(d, mk, b[1], a * 12);
    d.translate(a * -1, a * 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 270.633544921875, a * 88.98580932617188);
    d.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
    d.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
    d.closePath();
    Td(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 275.633544921875, a * 281.9858093261719);
    d.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
    d.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
    d.closePath();
    Td(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 124.633544921875, a * 291.9858093261719);
    d.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
    d.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
    d.closePath();
    Td(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 113.633544921875, a * 80.98580932617188);
    d.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
    d.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
    d.closePath();
    Td(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 202.633544921875, a * 20.985809326171875);
    d.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
    d.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
    d.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
    d.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
    d.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
    d.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
    d.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
    d.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
    d.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
    d.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
    d.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
    d.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
    d.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
    d.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
    d.closePath();
    Td(d, b[2], b[3], a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 203.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
    d.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
    d.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
    d.closePath();
    Td(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.633544921875, a * 25.985809326171875);
    d.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
    d.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
    d.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
    d.closePath();
    Td(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 26.633544921875, a * 96.98580932617188);
    d.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
    d.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
    d.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
    d.closePath();
    Td(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 351.633544921875, a * 99.98580932617188);
    d.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
    d.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
    d.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
    d.closePath();
    Td(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 350.633544921875, a * 302.9858093261719);
    d.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
    d.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
    d.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
    d.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
    d.closePath();
    Td(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 95.633544921875, a * 224.98580932617188);
    d.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
    d.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
    d.closePath();
    Td(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 253.98580932617188);
    d.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
    d.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
    d.closePath();
    Td(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 251.98580932617188);
    d.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
    d.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
    d.closePath();
    Td(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 316, a * 186.8020782470703);
    d.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
    d.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
    d.closePath();
    Td(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 340, a * 157.8020782470703);
    d.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
    d.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
    d.closePath();
    Td(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 349, a * 136.8020782470703);
    d.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
    d.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
    d.closePath();
    Td(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 278.75, a * 246.4375);
    d.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
    d.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
    d.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
    d.closePath();
    Td(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 310.75, a * 277.4375);
    d.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
    d.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
    d.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
    d.closePath();
    Td(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.75, a * 257.4375);
    d.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
    d.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
    d.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
    d.closePath();
    Td(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 289.4375);
    d.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
    d.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
    d.closePath();
    Td(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 171.75, a * 256.4375);
    d.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
    d.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
    d.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
    d.closePath();
    Td(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.75, a * 289.9375);
    d.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
    d.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
    d.closePath();
    Td(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.75, a * 314.4375);
    d.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
    d.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
    d.closePath();
    Td(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.75, a * 313.4375);
    d.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
    d.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
    d.closePath();
    Td(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 103.75, a * 244.4375);
    d.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
    d.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
    d.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
    d.closePath();
    Td(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 86.75, a * 182.4375);
    d.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
    d.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
    d.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
    d.closePath();
    Td(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44.75, a * 152.4375);
    d.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
    d.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
    d.closePath();
    Td(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31.75, a * 130.4375);
    d.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
    d.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
    d.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
    d.closePath();
    Td(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 69.75, a * 274.4375);
    d.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
    d.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
    d.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
    d.closePath();
    Td(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 165.75, a * 95.4375);
    d.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
    d.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
    d.closePath();
    Td(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 216.75, a * 94.4375);
    d.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
    d.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
    d.closePath();
    Td(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 68.4375);
    d.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
    d.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
    d.closePath();
    Td(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 169.75, a * 71.4375);
    d.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
    d.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
    d.closePath();
    Td(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 193.75, a * 160.4375);
    d.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
    d.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
    d.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
    d.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
    d.closePath();
    Td(d, b[8], b[9], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
    d.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
    d.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
    d.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
    d.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
    d.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
    d.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
    d.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
    d.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
    d.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
    d.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
    d.closePath();
    Td(d, b[10]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 173.8125);
    d.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
    d.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
    d.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
    d.closePath();
    Td(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
    d.closePath();
    Td(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.1999969482422, a * 176.2125015258789);
    d.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
    d.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
    d.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
    d.closePath();
    Td(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.1999969482422, a * 187.21249985694885);
    d.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
    d.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
    d.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
    d.closePath();
    Td(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 204.1999969482422, a * 201.8125);
    d.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
    d.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
    d.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
    d.closePath();
    Td(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 199.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
    d.closePath();
    Td(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.1999969482422, a * 207.01250076293945);
    d.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
    d.closePath();
    Td(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.1999969482422, a * 203.21249961853027);
    d.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
    d.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
    d.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
    d.closePath();
    Td(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 183.1999969482422, a * 196.8125);
    d.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
    d.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
    d.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
    d.closePath();
    Td(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
    d.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
    d.closePath();
    Td(d, b[11]);
    Pd(d, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
    Td(d, b[12]);
    Pd(d, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
    Td(d, b[13]);
    Pd(d, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
    Td(d, b[12]);
    Pd(d, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
    Td(d, b[13]);
    return c;
  }
  function hp(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    f.save();
    f.translate(a * 156.07142639160156, a * 51.81248474121094);
    f.rotate(0);
    yd(f, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    f.restore();
    Td(f, c[1], c[2], a * 15);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    f.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    f.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    f.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    f.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    f.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    f.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    f.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    f.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    f.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    f.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    f.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    f.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    f.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    f.closePath();
    Td(f, undefined, c[5], a * 15);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    f.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    f.closePath();
    Td(f, undefined, c[6], a * 15);
    return d;
  }
  function lp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 149;
    c.height = a * 153;
    d.globalAlpha = 0.5;
    Pd(d, a * 74.5, a * 85, a * 66);
    Td(d, b[0]);
    d.globalAlpha = 1;
    Pd(d, a * 75.5, a * 72.5, a * 67);
    Td(d, b[1], b[2], a * 4);
    Pd(d, a * 75.5, a * 73.5, a * 54);
    Td(d, b[3]);
    d.globalAlpha = 0.5;
    Pd(d, a * 74.5, a * 80.5, a * 39);
    Td(d, b[4]);
    d.globalAlpha = 1;
    Pd(d, a * 74.5, a * 74.5, a * 37);
    Td(d, b[5]);
    return c;
  }
  function gp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -200, a * -40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 344, a * 18.40625);
    d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
    d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
    d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
    d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
    d.closePath();
    Td(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 335, a * 38.072906494140625);
    d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
    d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
    d.closePath();
    Td(d, b[0]);
    return c;
  }
  function up(a, b, c) {
    var d = (f = document.createElement("canvas")).getContext("2d");
    f.width = a * 47;
    f.height = a * 60;
    var f;
    d = (f = document.createElement("canvas")).getContext("2d");
    f.width = a * 47;
    f.height = a * 60;
    Pd(d, a * 23.5, a * 20.734375, a * 15.132745950421556);
    Td(d, undefined, c[2], a * 4);
    Pd(d, a * 23.5, a * 20.734375, a * 18.601075237738275);
    Td(d, ah, c[1], a * 4);
    Pd(d, a * 23.5, a * 20.734375, a * 11.40175425099138);
    Td(d, wj, c[1], a * 4);
    d.save();
    d.translate(a * 23, a * 38.734375);
    d.rotate(0);
    yd(d, a * -21.5, a * -19, a * 43, a * 38, a * 10);
    d.restore();
    Td(d, c[2], c[1], a * 4);
    d.save();
    d.translate(a * 23.5, a * 43.734375);
    d.rotate(0.5235987755982988);
    wd(d, 3, a * 8.06225774829855, a * 0);
    d.restore();
    Td(d, c[3]);
    Pd(d, a * 23.5, a * 35.734375, a * 7.0710678118654755);
    Td(d, c[3]);
    return f;
  }
  function bp(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    f.translate(a * 10, a * 10);
    if (c == 1) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 9, a * 5);
      f.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
      f.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      f.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      f.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      f.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      f.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      f.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      f.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
      f.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
      f.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
      f.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
      f.closePath();
      Td(f, b[3], b[3], a * 32);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 5, a * 70);
      f.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
      f.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      f.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      f.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      f.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      f.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      f.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
      f.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      f.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      f.closePath();
      Td(f, b[3], b[3], a * 32);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 19, a * 158);
      f.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      f.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
      f.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      f.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      f.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      f.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      f.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      f.closePath();
      Td(f, b[3], b[3], a * 32);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 4, a * 183);
      f.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
      f.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      f.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      f.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      f.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      f.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      f.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      f.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
      f.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      f.closePath();
      Td(f, b[3], b[3], a * 32);
      Pd(f, a * 41, a * 30, a * 14.7648230602334);
      Td(f, b[3], b[3], a * 32);
      Pd(f, a * 369, a * 30, a * 15.556349186104045);
      Td(f, b[3], b[3], a * 32);
      Pd(f, a * 364, a * 190, a * 15.620499351813308);
      Td(f, b[3], b[3], a * 32);
      Pd(f, a * 41, a * 186, a * 15.556349186104045);
      Td(f, b[3], b[3], a * 32);
    } else if (c == 2) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 9, a * 5);
      f.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
      f.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      f.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      f.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      f.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      f.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      f.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      f.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
      f.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
      f.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
      f.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
      f.closePath();
      Td(f, b[3], b[3], a * 32);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 5, a * 70);
      f.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
      f.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      f.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      f.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      f.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      f.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      f.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
      f.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      f.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      f.closePath();
      Td(f, b[3], b[3], a * 32);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 19, a * 158);
      f.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      f.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
      f.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      f.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      f.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      f.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      f.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      f.closePath();
      Td(f, b[3], b[3], a * 32);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 4, a * 183);
      f.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
      f.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      f.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      f.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      f.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      f.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      f.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      f.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
      f.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      f.closePath();
      Td(f, b[3], b[3], a * 32);
      Pd(f, a * 41, a * 30, a * 14.7648230602334);
      Td(f, b[3], b[3], a * 32);
      Pd(f, a * 369, a * 30, a * 15.556349186104045);
      Td(f, b[3], b[3], a * 32);
      Pd(f, a * 364, a * 190, a * 15.620499351813308);
      Td(f, b[3], b[3], a * 32);
      Pd(f, a * 41, a * 186, a * 15.556349186104045);
      Td(f, b[3], b[3], a * 32);
    }
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 9, a * 5);
    f.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    f.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
    f.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    f.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    f.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    f.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    f.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    f.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
    f.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
    f.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    f.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
    f.closePath();
    Td(f, b[1], b[0], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 5, a * 70);
    f.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
    f.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    f.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    f.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    f.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    f.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    f.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
    f.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    f.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    f.closePath();
    Td(f, b[2], b[0], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 19, a * 158);
    f.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
    f.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
    f.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    f.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    f.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    f.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    f.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    f.closePath();
    Td(f, b[1], b[0], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 4, a * 183);
    f.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
    f.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    f.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    f.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    f.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    f.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    f.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
    f.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
    f.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    f.closePath();
    Td(f, b[2], b[0], a * 12);
    Pd(f, a * 41, a * 30, a * 14.7648230602334);
    Td(f, b[2], b[0], a * 12);
    Pd(f, a * 369, a * 30, a * 15.556349186104045);
    Td(f, b[2], b[0], a * 12);
    Pd(f, a * 364, a * 190, a * 15.620499351813308);
    Td(f, b[2], b[0], a * 12);
    Pd(f, a * 41, a * 186, a * 15.556349186104045);
    Td(f, b[2], b[0], a * 12);
    return d;
  }
  function dp(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 5, a * 5);
    Pd(f, a * 220, a * 201, a * 170.41713528867922);
    Td(f, c[0], c[0], a * 6);
    f.globalAlpha = 1;
    f.translate(a * -5, a * -5);
    Pd(f, a * 220, a * 201, a * 170.41713528867922);
    Td(f, c[1], c[2], a * 6);
    Pd(f, a * 220, a * 201, a * 130);
    Td(f, c[11], c[2], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 218, a * 97);
    f.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    f.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    f.closePath();
    Td(f, c[5], c[6], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 224, a * 181);
    f.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    f.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    f.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    f.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    f.closePath();
    Td(f, c[5], c[6], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 169, a * 289);
    f.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    f.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    f.closePath();
    Td(f, c[5], c[6], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 143, a * 146);
    f.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    f.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    f.closePath();
    Td(f, c[5], c[6], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 283, a * 135);
    f.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    f.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    f.closePath();
    Td(f, c[5], c[6], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 318, a * 223);
    f.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    f.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    f.closePath();
    Td(f, c[5], c[6], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 142, a * 223);
    f.bezierCurveTo(a * 128, a * 213, a * 123, a * 214, a * 111, a * 223);
    f.closePath();
    Td(f, c[10], c[10], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 251, a * 133);
    f.bezierCurveTo(a * 269, a * 188, a * 262, a * 229, a * 251, a * 253);
    f.bezierCurveTo(a * 288, a * 224, a * 273, a * 139, a * 252, a * 133);
    f.closePath();
    Td(f, c[10], c[10], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 203, a * 102);
    f.bezierCurveTo(a * 204, a * 136, a * 200, a * 159, a * 189, a * 174);
    f.bezierCurveTo(a * 223, a * 164, a * 219, a * 87, a * 205, a * 83);
    f.closePath();
    Td(f, c[10], c[10], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 196, a * 324);
    f.bezierCurveTo(a * 209, a * 239, a * 200, a * 219, a * 192, a * 196);
    f.bezierCurveTo(a * 229, a * 216, a * 219, a * 316, a * 198, a * 325);
    f.closePath();
    Td(f, c[10], c[10], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 266, a * 166);
    f.bezierCurveTo(a * 249, a * 154, a * 243, a * 161, a * 233, a * 167);
    Td(f, undefined, c[6], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 269, a * 192);
    f.bezierCurveTo(a * 256, a * 183, a * 241, a * 186, a * 233, a * 192);
    Td(f, undefined, c[6], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 263, a * 217);
    f.bezierCurveTo(a * 251, a * 211, a * 242, a * 213, a * 236, a * 218);
    Td(f, undefined, c[6], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 204, a * 141);
    f.bezierCurveTo(a * 191, a * 131, a * 187, a * 133, a * 176, a * 141);
    Td(f, undefined, c[6], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 207, a * 230);
    f.bezierCurveTo(a * 193, a * 222, a * 185, a * 224, a * 177, a * 231);
    Td(f, Xq, c[6], a * 6);
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 210, a * 258);
    f.bezierCurveTo(a * 196, a * 247, a * 191, a * 250, a * 177, a * 259);
    Td(f, fk, c[6], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 145, a * 196);
    f.bezierCurveTo(a * 130, a * 186, a * 124, a * 187, a * 114, a * 195);
    Td(f, undefined, c[6], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 218, a * 97);
    f.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    f.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    f.closePath();
    Td(f, w, c[6], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 224, a * 181);
    f.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    f.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    f.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    f.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    f.closePath();
    Td(f, undefined, c[6], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 169, a * 289);
    f.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    f.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    f.closePath();
    Td(f, undefined, c[6], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 143, a * 146);
    f.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    f.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    f.closePath();
    Td(f, undefined, c[6], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 283, a * 135);
    f.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    f.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    f.closePath();
    Td(f, undefined, c[6], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 318, a * 223);
    f.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    f.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    f.closePath();
    Td(f, undefined, c[6], a * 6);
    Pd(f, a * 222, a * 199, a * 120.74767078498864);
    Td(f, undefined, c[3], a * 40);
    Pd(f, a * 220, a * 200, a * 95.44108130150245);
    Td(f, Ao, c[2], a * 15);
    Pd(f, a * 220, a * 201, a * 85);
    Td(f, Ao, c[4], a * 10);
    f.globalAlpha = 0.5;
    Pd(f, a * 220, a * 201, a * 82);
    Td(f, c[9]);
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 5, a * 5);
    Pd(f, a * 63, a * 136, a * 49.193495504995376);
    Td(f, c[0], c[0], a * 4);
    f.globalAlpha = 1;
    f.translate(a * -5, a * -5);
    Pd(f, a * 63, a * 136, a * 49.193495504995376);
    Td(f, c[8], c[2], a * 4);
    Pd(f, a * 63, a * 137, a * 25.632011235952593);
    Td(f, c[7], c[2], a * 4);
    return d;
  }
  function vp(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    f.translate(0, a * 15);
    f.globalAlpha = b ? 0.5 : 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 102, a * 154);
    f.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    f.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    f.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    f.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 102, a * 154);
    f.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    f.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    f.closePath();
    Td(f, Wn, c[0], a * 11);
    f.translate(0, a * -5);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 103, a * 154);
    f.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    f.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    f.closePath();
    Td(f, c[3], c[2], a * 12);
    f.translate(0, a * 25);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 103, a * 154);
    f.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    f.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    f.closePath();
    Td(f, c[5]);
    f.translate(0, a * -25);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 102, a * 154);
    f.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    f.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    f.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    f.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    f.closePath();
    Td(f, c[1], c[2], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 182, a * 185);
    f.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    f.closePath();
    Td(f, Ao, c[2], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 222, a * 287);
    f.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    f.closePath();
    Td(f, Xq, c[2], a * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 145, a * 290);
    f.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    f.closePath();
    Td(f, c[1], c[2], a * 11);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 105, a * 184);
    f.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    f.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    f.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    f.closePath();
    Td(f, c[4], c[2], a * 11);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 251, a * 276);
    f.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    f.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    f.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    f.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    f.closePath();
    Td(f, c[4], c[2], a * 11);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 102, a * 154);
    f.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    f.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    f.closePath();
    Td(f, ah, c[2], a * 11);
    return d;
  }
  function cp(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 138;
    d.height = a * 133;
    f.globalAlpha = b ? 0.3 : 1;
    f.translate(0, a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 26, a * 79.640625);
    f.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
    f.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    f.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    f.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    f.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    f.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 8, a * 82.640625);
    f.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    f.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    f.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    f.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    f.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(0, a * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 8, a * 73.640625);
    f.bezierCurveTo(a * 7, a * 23.640625, a * 33, a * 19.640625, a * 71, a * 17.640625);
    f.bezierCurveTo(a * 129, a * 19.640625, a * 130, a * 45.640625, a * 130, a * 76.640625);
    f.bezierCurveTo(a * 90, a * 63.640625, a * 85, a * 63.640625, a * 73, a * 63.640625);
    f.bezierCurveTo(a * 38, a * 63.640625, a * 33, a * 66.640625, a * 8, a * 73.640625);
    f.closePath();
    Td(f, c[1], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 72, a * 28.640625);
    f.bezierCurveTo(a * 51, a * 25.640625, a * 56, a * 7.640625, a * 70, a * 5.640625);
    f.bezierCurveTo(a * 94, a * 7.640625, a * 87, a * 29.640625, a * 72, a * 28.640625);
    f.closePath();
    Td(f, c[3], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 51, a * 26.640625);
    f.bezierCurveTo(a * 42, a * 29.640625, a * 43, a * 31.640625, a * 42, a * 37.640625);
    Td(f, undefined, c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 90, a * 26.640625);
    f.bezierCurveTo(a * 100, a * 28.640625, a * 98, a * 34.640625, a * 99, a * 38.640625);
    Td(f, undefined, c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 26, a * 79.640625);
    f.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
    f.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    f.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    f.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    f.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    f.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    f.closePath();
    Td(f, c[3], c[4], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 8, a * 82.640625);
    f.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    f.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    f.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    f.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    f.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
    f.closePath();
    Td(f, c[3], c[4], a * 4);
    return d;
  }
  function mp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 280;
    d.translate(a * -100, a * -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 228.5, a * 331.953125);
    d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
    d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
    d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
    d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
    d.closePath();
    Td(d, b[0]);
    return c;
  }
  function pp(b, c, d, f) {
    var g = document.createElement("canvas");
    var h = g.getContext("2d");
    g.width = b * 198;
    g.height = b * 147;
    h.globalAlpha = c ? 0.5 : 1;
    h.translate(0, b * 6);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 44, b * 76);
    h.bezierCurveTo(b * 50, b * 82, b * 50, b * 82, b * 56, b * 88);
    h.bezierCurveTo(b * 59, b * 82, b * 59, b * 82, b * 62, b * 76);
    h.bezierCurveTo(b * 59, b * 71, b * 59, b * 71, b * 56, b * 66);
    h.bezierCurveTo(b * 59, b * 69, b * 59, b * 69, b * 62, b * 72);
    h.bezierCurveTo(b * 80, b * 48, b * 102, b * 50, b * 120, b * 62);
    h.bezierCurveTo(b * 127, b * 58, b * 127, b * 58, b * 134, b * 54);
    h.bezierCurveTo(b * 129, b * 60, b * 129, b * 60, b * 124, b * 66);
    h.bezierCurveTo(b * 129, b * 73, b * 129, b * 73, b * 134, b * 80);
    h.bezierCurveTo(b * 140, b * 74, b * 140, b * 74, b * 146, b * 68);
    h.bezierCurveTo(b * 142, b * 76, b * 142, b * 76, b * 138, b * 84);
    h.bezierCurveTo(b * 144, b * 90, b * 142, b * 90, b * 144, b * 90);
    h.bezierCurveTo(b * 136, b * 97, b * 136, b * 97, b * 128, b * 104);
    h.bezierCurveTo(b * 154, b * 110, b * 164, b * 90, b * 160, b * 80);
    h.bezierCurveTo(b * 138, b * 22, b * 148, b * 51, b * 136, b * 22);
    h.bezierCurveTo(b * 97, b * 24, b * 97, b * 24, b * 58, b * 26);
    h.bezierCurveTo(b * 47, b * 54, b * 36, b * 80, b * 36, b * 82);
    h.bezierCurveTo(b * 40, b * 108, b * 54, b * 104, b * 62, b * 104);
    h.bezierCurveTo(b * 46, b * 92, b * 54, b * 97, b * 46, b * 90);
    h.closePath();
    Td(h, d[0]);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 36, b * 80);
    h.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
    h.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
    h.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
    h.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
    h.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
    h.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
    h.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
    h.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
    h.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
    h.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
    h.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
    h.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
    h.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
    h.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
    h.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
    h.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
    h.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
    h.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
    h.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
    h.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
    h.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
    h.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
    h.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
    h.closePath();
    Td(h, d[0]);
    h.globalAlpha = 1;
    h.translate(0, b * -6);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 36, b * 80);
    h.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
    h.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
    h.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
    h.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
    h.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
    h.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
    h.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
    h.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
    h.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
    h.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
    h.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
    h.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
    h.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
    h.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
    h.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
    h.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
    h.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
    h.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
    h.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
    h.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
    h.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
    h.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
    h.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
    h.closePath();
    Td(h, d[1], d[2], b * 4);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 49, b * 98);
    h.bezierCurveTo(b * 96.5, b * 98, b * 96.5, b * 98, b * 144, b * 98);
    h.bezierCurveTo(b * 136.5, b * 102, b * 136.5, b * 102, b * 129, b * 106);
    h.bezierCurveTo(b * 103, b * 105.5, b * 103, b * 105.5, b * 77, b * 105);
    h.bezierCurveTo(b * 65, b * 105, b * 65, b * 105, b * 53, b * 105);
    h.closePath();
    Td(h, d[1]);
    h.globalAlpha = 0.5;
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 54, b * 98);
    h.bezierCurveTo(b * 97, b * 98, b * 97, b * 98, b * 140, b * 98);
    h.bezierCurveTo(b * 134, b * 101, b * 134, b * 101, b * 128, b * 104);
    h.bezierCurveTo(b * 92, b * 104, b * 92, b * 104, b * 56, b * 104);
    h.closePath();
    Td(h, d[0]);
    h.globalAlpha = 1;
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 118, b * 47);
    h.bezierCurveTo(b * 124.5, b * 43.5, b * 124.5, b * 43.5, b * 131, b * 40);
    h.bezierCurveTo(b * 128, b * 46, b * 128, b * 46, b * 125, b * 52);
    h.bezierCurveTo(b * 131, b * 57, b * 135, b * 64, b * 139, b * 73);
    h.bezierCurveTo(b * 142.5, b * 69.5, b * 142.5, b * 69.5, b * 146, b * 66);
    h.bezierCurveTo(b * 143.5, b * 72.5, b * 143.5, b * 72.5, b * 141, b * 79);
    h.bezierCurveTo(b * 142, b * 91, b * 141, b * 94, b * 132, b * 98);
    h.bezierCurveTo(b * 117, b * 102, b * 126, b * 108, b * 142, b * 102);
    h.bezierCurveTo(b * 159, b * 98, b * 164, b * 80, b * 162, b * 47);
    h.bezierCurveTo(b * 160, b * 19, b * 150, b * 6, b * 117, b * 4);
    h.bezierCurveTo(b * 44, b * 0, b * 35, b * 20, b * 33, b * 37);
    h.bezierCurveTo(b * 29, b * 69, b * 33, b * 88, b * 44, b * 96);
    h.bezierCurveTo(b * 64, b * 107, b * 70, b * 102, b * 54, b * 93);
    h.bezierCurveTo(b * 49, b * 88, b * 50, b * 82, b * 53, b * 77);
    h.bezierCurveTo(b * 51.5, b * 71, b * 51.5, b * 71, b * 50, b * 65);
    h.bezierCurveTo(b * 53, b * 68.5, b * 53, b * 68.5, b * 56, b * 72);
    h.bezierCurveTo(b * 59, b * 67.5, b * 59, b * 67.5, b * 62, b * 63);
    h.bezierCurveTo(b * 60.5, b * 59.5, b * 60.5, b * 59.5, b * 59, b * 56);
    h.bezierCurveTo(b * 62, b * 57, b * 62, b * 57, b * 65, b * 58);
    h.bezierCurveTo(b * 78, b * 35, b * 103, b * 36, b * 117, b * 47);
    h.closePath();
    Td(h, d[1], d[2], b * 6);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 62, b * 21);
    h.bezierCurveTo(b * 63, b * 34, b * 64, b * 37, b * 66, b * 40);
    h.bezierCurveTo(b * 54, b * 49, b * 53, b * 51, b * 48, b * 58);
    h.bezierCurveTo(b * 44, b * 51, b * 42, b * 43, b * 40, b * 36);
    h.bezierCurveTo(b * 47, b * 28, b * 52, b * 25, b * 61, b * 21);
    h.closePath();
    Td(h, d[4]);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 60, b * 29);
    h.bezierCurveTo(b * 62, b * 25, b * 65, b * 24, b * 70, b * 23);
    Td(h, undefined, d[3], b * 4);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 61, b * 37);
    h.bezierCurveTo(b * 63, b * 32, b * 66, b * 32, b * 71, b * 32);
    Td(h, Ma, d[3], b * 4);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 52, b * 31);
    h.bezierCurveTo(b * 50, b * 26, b * 50, b * 25, b * 51, b * 23);
    Td(h, Al, d[3], b * 4);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 46, b * 35);
    h.bezierCurveTo(b * 44, b * 31, b * 43, b * 29, b * 45, b * 26);
    Td(h, undefined, d[3], b * 4);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 58, b * 44);
    h.bezierCurveTo(b * 57, b * 48, b * 57, b * 50, b * 60, b * 52);
    Td(h, undefined, d[3], b * 4);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 53, b * 48);
    h.bezierCurveTo(b * 52, b * 52, b * 52, b * 54, b * 55, b * 57);
    Td(h, undefined, d[3], b * 4);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 46, b * 41);
    h.bezierCurveTo(b * 41, b * 42, b * 39, b * 45, b * 38, b * 48);
    Td(h, undefined, d[3], b * 4);
    h.beginPath();
    h.lineCap = "round";
    h.lineJoin = "round";
    h.moveTo(b * 48, b * 48);
    h.bezierCurveTo(b * 42, b * 51, b * 42, b * 53, b * 40, b * 55);
    Td(h, undefined, d[3], b * 4);
    if (f == 0) {
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 99, b * 101);
      h.bezierCurveTo(b * 118.6666259765625, b * 104.33331298828125, b * 124.6666259765625, b * 116.33331298828125, b * 112.6666259765625, b * 114.33331298828125);
      h.bezierCurveTo(b * 104.6666259765625, b * 112.33331298828125, b * 100.6666259765625, b * 105.33331298828125, b * 99.6666259765625, b * 101.33331298828125);
      Td(h, ah, d[5], b * 6);
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 97.6666259765625, b * 101.33331298828125);
      h.bezierCurveTo(b * 81.6666259765625, b * 106.33331298828125, b * 79.6666259765625, b * 114.33331298828125, b * 89.6666259765625, b * 114.33331298828125);
      h.bezierCurveTo(b * 95.6666259765625, b * 111.33331298828125, b * 95.6666259765625, b * 109.33331298828125, b * 98.6666259765625, b * 102.33331298828125);
      Td(h, Cr, d[5], b * 6);
    } else {
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 103, b * 100.39999389648438);
      h.bezierCurveTo(b * 120, b * 106.39999389648438, b * 118, b * 107.39999389648438, b * 120, b * 111.39999389648438);
      Td(h, kn, d[5], b * 6);
      h.beginPath();
      h.lineCap = "round";
      h.lineJoin = "round";
      h.moveTo(b * 103, b * 100.39999389648438);
      h.bezierCurveTo(b * 90, b * 103.39999389648438, b * 89, b * 106.39999389648438, b * 87, b * 112.39999389648438);
      Td(h, undefined, d[5], b * 6);
      Pd(h, b * 86, b * 114.39999389648438, b * 4.5);
      Td(h, d[1], d[5], b * 6);
      Pd(h, b * 121, b * 114.39999389648438, b * 4.5);
      Td(h, d[1], d[5], b * 6);
    }
    return g;
  }
  function Cp(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 111, a * 27.3671875);
    f.bezierCurveTo(a * 128, a * 9.3671875, a * 125, a * 13.3671875, a * 126, a * 21.3671875);
    f.bezierCurveTo(a * 126, a * 33.3671875, a * 119, a * 43.3671875, a * 118, a * 42.3671875);
    f.closePath();
    Td(f, c[3], c[4], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 31, a * 23.3671875);
    f.bezierCurveTo(a * 17, a * 15.3671875, a * 16, a * 14.3671875, a * 17, a * 20.3671875);
    f.bezierCurveTo(a * 22, a * 33.3671875, a * 20, a * 27.3671875, a * 24, a * 34.3671875);
    f.closePath();
    Td(f, c[3], c[4], a * 4);
    f.save();
    f.translate(a * 70.5, a * 34.8671875);
    f.rotate(0);
    yd(f, a * -49.5, a * -21.5, a * 99, a * 43, a * 15);
    f.restore();
    Td(f, c[0], c[1], a * 4);
    f.save();
    f.translate(a * 71, a * 40.8671875);
    f.rotate(0);
    yd(f, a * -49, a * -12.5, a * 98, a * 25, a * 15);
    f.restore();
    Td(f, c[2], c[1], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 19.800003051757812, a * 75.95625305175781);
    f.bezierCurveTo(a * 19.300003051757812, a * 82.95625305175781, a * 19.300003051757812, a * 82.95625305175781, a * 18.800003051757812, a * 89.95625305175781);
    f.bezierCurveTo(a * 38.80000305175781, a * 115.95625305175781, a * 37.80000305175781, a * 104.95625305175781, a * 31.800003051757812, a * 91.95625305175781);
    f.closePath();
    Td(f, c[2], c[1], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 119.80000305175781, a * 75.95625305175781);
    f.bezierCurveTo(a * 120.80000305175781, a * 82.95625305175781, a * 120.80000305175781, a * 82.95625305175781, a * 121.80000305175781, a * 89.95625305175781);
    f.bezierCurveTo(a * 101.80000305175781, a * 111.95625305175781, a * 99.80000305175781, a * 111.95625305175781, a * 112.80000305175781, a * 81.95625305175781);
    f.closePath();
    Td(f, c[2], c[1], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 17.800003051757812, a * 49.15625);
    f.bezierCurveTo(a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 79.15625);
    f.bezierCurveTo(a * 23.300003051757812, a * 85.15625, a * 23.300003051757812, a * 85.15625, a * 28.800003051757812, a * 91.15625);
    f.bezierCurveTo(a * 36.80000305175781, a * 96.15625, a * 32.80000305175781, a * 91.15625, a * 28.800003051757812, a * 77.15625);
    f.bezierCurveTo(a * 33.80000305175781, a * 65.15625, a * 33.80000305175781, a * 65.15625, a * 38.80000305175781, a * 53.15625);
    f.closePath();
    Td(f, c[3], c[4], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 123.80000305175781, a * 53.95625305175781);
    f.bezierCurveTo(a * 121.80000305175781, a * 77.95625305175781, a * 121.80000305175781, a * 74.95625305175781, a * 121.80000305175781, a * 78.95625305175781);
    f.bezierCurveTo(a * 115.80000305175781, a * 84.95625305175781, a * 115.80000305175781, a * 84.95625305175781, a * 109.80000305175781, a * 90.95625305175781);
    f.bezierCurveTo(a * 102.80000305175781, a * 93.95625305175781, a * 105.80000305175781, a * 86.95625305175781, a * 110.80000305175781, a * 76.95625305175781);
    f.bezierCurveTo(a * 107.30000305175781, a * 65.45625305175781, a * 103.80000305175781, a * 53.95625305175781, a * 103.80000305175781, a * 53.95625305175781);
    f.closePath();
    Td(f, c[3], c[4], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 18, a * 56.3671875);
    f.bezierCurveTo(a * 70, a * 56.8671875, a * 70, a * 56.8671875, a * 122, a * 57.3671875);
    f.bezierCurveTo(a * 137, a * 20.3671875, a * 137, a * 16.3671875, a * 126, a * 22.3671875);
    f.bezierCurveTo(a * 115.5, a * 34.3671875, a * 115.5, a * 34.3671875, a * 105, a * 46.3671875);
    f.bezierCurveTo(a * 70.5, a * 46.3671875, a * 70.5, a * 46.3671875, a * 36, a * 46.3671875);
    f.bezierCurveTo(a * 4, a * 14.3671875, a * 7, a * 18.3671875, a * 8, a * 27.3671875);
    f.bezierCurveTo(a * 12.5, a * 41.8671875, a * 12.5, a * 41.8671875, a * 17, a * 56.3671875);
    f.closePath();
    Td(f, c[3], c[4], a * 4);
    f.save();
    f.translate(a * 68.30000305175781, a * 41.45625305175781);
    f.rotate(0.76);
    yd(f, a * -20.5, a * -20.5, a * 41, a * 41, a * 10);
    f.restore();
    Td(f, Al, c[5], a * 4);
    f.save();
    f.translate(a * 68.80000305175781, a * 44.45625305175781);
    f.rotate(0.76);
    yd(f, a * -21, a * -20.5, a * 42, a * 41, a * 10);
    f.restore();
    Td(f, c[3], c[4], a * 4);
    f.save();
    f.translate(a * 69.80000305175781, a * 44.556243896484375);
    f.rotate(0.76);
    yd(f, a * -10, a * -10, a * 20, a * 20, a * 5);
    f.restore();
    Td(f, c[6], c[7], a * 4);
    return d;
  }
  function Tp(b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    var g = b * 120;
    var h = b * 140;
    d.width = g;
    d.height = h;
    d.width = b * 130;
    d.height = b * 120;
    yd(f, b * 10, b * 12, b * 110, b * 90, b * 10);
    Td(f, c[0]);
    yd(f, b * 10, b * 5, b * 110, b * 90, b * 10);
    Td(f, c[1], c[2], b * 4);
    var a = Ad(-Math.PI / 5, su(b * 0.5, true, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    f.drawImage(a, b * 12, b * 18);
    a = Ad(Math.PI / 4, Dm(b * 0.55, true, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    f.drawImage(a, b * 36, b * 16);
    return d;
  }
  function fp(b, c, d) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 120;
    f.height = b * 100;
    yd(g, b * 10, b * 10, b * 95, b * 80, b * 10);
    Td(g, c[2]);
    yd(g, b * 10, b * 5, b * 95, b * 80, b * 10);
    Td(g, c[3], c[4], b * 4);
    if (d == 0) {
      var h = Im(b * 0.75, c, 0);
      g.drawImage(h, b * 22, b * 18);
    } else if (d == 1) {
      h = Im(b * 0.75, c, 1);
      g.drawImage(h, b * 22, b * 18);
    }
    return f;
  }
  function zp(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var f = b * 600;
    var g = b * 22;
    var h = b * 4;
    var a = b * 4;
    c.width = f;
    c.height = g;
    yd(d, b * 5, b * 5, f - b * 10, g - b * 10, h);
    Td(d, null, "#BBE8EF", a);
    return c;
  }
  function yp(b, c, d) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 170;
    f.height = b * 170;
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 3);
    g.save();
    g.translate(b * 85, b * 95);
    g.rotate(1.4);
    wd(g, 7, b * 60, b * 10);
    g.restore();
    Td(g, d[0]);
    g.globalAlpha = 1;
    g.translate(b * 85, b * 82);
    for (var h = 0; h < 10; h++) {
      g.rotate(Math.PI / 5);
      g.save();
      g.translate(b * 65, 0);
      wd(g, 3, b * 21, b * 4);
      Td(g, d[1], d[2], b * 4);
      g.restore();
    }
    g.save();
    g.translate(b * 0, b * 0);
    g.rotate(1);
    wd(g, 8, b * 60, b * 10);
    Td(g, d[3], d[4], b * 4);
    g.rotate(0.56);
    wd(g, 8, b * 40, b * 10);
    Td(g, d[5], d[6], b * 4);
    g.rotate(0.28);
    wd(g, 8, b * 28, b * 8);
    Td(g, d[7]);
    g.restore();
    return f;
  }
  function wp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 110;
    c.height = a * 110;
    d.globalAlpha = 0.2;
    Pd(d, a * 55, a * 55, a * 55);
    Td(d, b[0]);
    return c;
  }
  function Pp(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    f.globalAlpha = 1;
    f.translate(a * 20, a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36.5, a * 278.0625);
    f.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    f.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    f.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    f.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    f.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    f.closePath();
    Td(f, c[0]);
    f.translate(a * -20, a * -20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36.5, a * 278.0625);
    f.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    f.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    f.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    f.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    f.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    f.closePath();
    Td(f, c[1], c[2], a * 19);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 214.5, a * 124.0625);
    f.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    f.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    f.closePath();
    Td(f, undefined, c[2], a * 19);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 157.5, a * 145.0625);
    f.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    f.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    f.closePath();
    Td(f, undefined, c[2], a * 19);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 103.5, a * 169.0625);
    f.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    f.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    f.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    f.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    f.closePath();
    Td(f, c[3], c[2], a * 19);
    Pd(f, a * 92.5, a * 216.0625, a * 13.892443989449804);
    Td(f, c[4]);
    Pd(f, a * 68.5, a * 227.0625, a * 8.06225774829855);
    Td(f, c[4]);
    Pd(f, a * 85.5, a * 240.0625, a * 6.708203932499369);
    Td(f, c[4]);
    Pd(f, a * 147.5, a * 294.0625, a * 17.46424919657298);
    Td(f, c[4]);
    Pd(f, a * 166.5, a * 273.0625, a * 6.708203932499369);
    Td(f, c[4]);
    Pd(f, a * 114.5, a * 294.0625, a * 12.36931687685298);
    Td(f, c[4]);
    Pd(f, a * 123.5, a * 220.0625, a * 5.830951894845301);
    Td(f, c[4]);
    Pd(f, a * 114.5, a * 259.0625, a * 4.123105625617661);
    Td(f, c[4]);
    Pd(f, a * 63.5, a * 265.0625, a * 5.385164807134504);
    Td(f, c[4]);
    Pd(f, a * 148.5, a * 235.0625, a * 4.47213595499958);
    Td(f, c[4]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 194.5, a * 313.0625);
    f.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    f.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    f.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    f.closePath();
    Td(f, c[5]);
    return d;
  }
  function kp(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 218;
    d.height = a * 185;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 64, a * 53.135406494140625);
    f.bezierCurveTo(a * 92, a * 17.135406494140625, a * 116, a * 11.135406494140625, a * 158, a * 53.135406494140625);
    f.bezierCurveTo(a * 178, a * 74.13540649414062, a * 181, a * 81.13540649414062, a * 196, a * 101.13540649414062);
    f.bezierCurveTo(a * 214, a * 127.13540649414062, a * 192, a * 138.13540649414062, a * 173, a * 149.13540649414062);
    f.bezierCurveTo(a * 137, a * 166.13540649414062, a * 74, a * 170.13540649414062, a * 36, a * 141.13540649414062);
    f.bezierCurveTo(a * 13, a * 127.13540649414062, a * 20, a * 119.13540649414062, a * 30, a * 103.13540649414062);
    f.bezierCurveTo(a * 48, a * 71.13540649414062, a * 54, a * 67.13540649414062, a * 63, a * 54.135406494140625);
    f.closePath();
    Td(f, c[0], c[1], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 107, a * 25.135406494140625);
    f.bezierCurveTo(a * 62, a * 90.13540649414062, a * 54, a * 129.13540649414062, a * 53, a * 151.13540649414062);
    f.bezierCurveTo(a * 39.5, a * 142.13540649414062, a * 39.5, a * 142.13540649414062, a * 26, a * 133.13540649414062);
    f.bezierCurveTo(a * 23.5, a * 128.63540649414062, a * 23.5, a * 128.63540649414062, a * 21, a * 124.13540649414062);
    f.bezierCurveTo(a * 22, a * 113.13540649414062, a * 31, a * 99.13540649414062, a * 40, a * 88.13540649414062);
    f.bezierCurveTo(a * 54.5, a * 67.13540649414062, a * 54.5, a * 67.13540649414062, a * 69, a * 46.135406494140625);
    f.bezierCurveTo(a * 80.5, a * 36.635406494140625, a * 80.5, a * 36.635406494140625, a * 92, a * 27.135406494140625);
    f.closePath();
    Td(f, c[1]);
    return d;
  }
  function Ap(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 80;
    d.height = a * 160;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * 5, a * 5);
    f.save();
    yd(f, a * 33, a * 53, a * 10, a * 98, a * 10);
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(a * -150, a * -100);
    f.moveTo(a * 167.5, a * 171.0625);
    f.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    f.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    f.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    f.closePath();
    Td(f, c[0]);
    f.restore();
    f.globalAlpha = 1;
    f.translate(a * -5, a * -5);
    f.save();
    yd(f, a * 33, a * 53, a * 10, a * 98, a * 10);
    Td(f, c[1], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(a * -150, a * -100);
    f.moveTo(a * 167.5, a * 171.0625);
    f.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    f.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    f.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    f.closePath();
    Td(f, c[3], c[4], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(a * 0, a * 1);
    f.moveTo(a * 180.5, a * 169.0625);
    f.bezierCurveTo(a * 180.5, a * 157.5625, a * 180.5, a * 157.5625, a * 180.5, a * 146.0625);
    f.bezierCurveTo(a * 181.5, a * 134.0625, a * 193.5, a * 129.0625, a * 196.5, a * 146.0625);
    f.bezierCurveTo(a * 196.5, a * 157.5625, a * 196.5, a * 157.5625, a * 196.5, a * 169.0625);
    f.closePath();
    Td(f, c[5]);
    f.restore();
    return d;
  }
  function xp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 192;
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 42, a * 99);
    d.globalAlpha = 0.5;
    yd(d, a * -7, a * -20, a * 14, a * 39, a * 20);
    d.restore();
    Td(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 37, a * 94);
    yd(d, a * -7, a * -20, a * 14, a * 37, a * 20);
    d.restore();
    Td(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 136, a * 99);
    d.globalAlpha = 0.5;
    yd(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    Td(d, b[0], b[0], a * 13);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 131, a * 94);
    yd(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    Td(d, b[2], b[2], a * 13);
    d.save();
    d.translate(a * 131, a * 94);
    yd(d, a * -76, a * -61, a * 152, a * 122, a * 20);
    d.restore();
    Td(d, b[3], b[1], a * 8);
    d.save();
    d.translate(a * 168.5, a * 93.5);
    yd(d, a * -30.5, a * -58.5, a * 61, a * 117, a * 20);
    d.restore();
    Td(d, b[3], b[4], a * 6);
    d.save();
    d.translate(a * 93.5, a * 95.5);
    yd(d, a * -32, a * -59.5, a * 59, a * 119, a * 20);
    d.restore();
    Td(d, b[3], b[4], a * 6);
    d.save();
    d.translate(a * 130.5, a * 94);
    yd(d, a * -36, a * -67, a * 73, a * 134, a * 20);
    d.restore();
    Td(d, b[3], b[2], a * 8);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 133, a * 97);
    yd(d, a * -83, a * -12, a * 160, a * 24, a * 0);
    d.restore();
    Td(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 133, a * 92);
    yd(d, a * -83, a * -12, a * 160, a * 24, a * 0);
    d.restore();
    Td(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 228, a * 99.5);
    d.globalAlpha = 0.5;
    yd(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
    d.restore();
    Td(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 223, a * 94.5);
    yd(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
    d.restore();
    Td(d, b[2]);
    d.save();
    d.translate(a * 133.5, a * 175.5);
    d.globalAlpha = 0.5;
    yd(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
    d.restore();
    Td(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 128.5, a * 170.5);
    yd(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
    d.restore();
    Td(d, b[2]);
    return c;
  }
  function Jp(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 345;
    d.height = a * 250;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 105, a * 58);
    f.bezierCurveTo(a * 100.5, a * 43, a * 100.5, a * 43, a * 96, a * 28);
    f.bezierCurveTo(a * 119.5, a * 33.5, a * 119.5, a * 33.5, a * 143, a * 39);
    f.bezierCurveTo(a * 170, a * 37, a * 177, a * 37, a * 188, a * 40);
    f.bezierCurveTo(a * 213, a * 33.5, a * 213, a * 33.5, a * 238, a * 27);
    f.bezierCurveTo(a * 231, a * 52, a * 234, a * 42.5, a * 230, a * 58);
    f.closePath();
    Td(f, c[1], c[2], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 108, a * 51);
    f.bezierCurveTo(a * 91, a * 55, a * 85, a * 44, a * 86, a * 29);
    f.bezierCurveTo(a * 62, a * 50, a * 78, a * 69, a * 92, a * 75);
    f.closePath();
    Td(f, c[3], c[4], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 249, a * 27);
    f.bezierCurveTo(a * 273, a * 49, a * 262, a * 68, a * 246, a * 77);
    f.bezierCurveTo(a * 231, a * 59, a * 236, a * 66.5, a * 226, a * 56);
    f.bezierCurveTo(a * 243, a * 53, a * 252, a * 43, a * 249, a * 28);
    f.closePath();
    Td(f, c[3], c[4], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 87, a * 78);
    f.bezierCurveTo(a * 87, a * 59, a * 98, a * 46, a * 127, a * 48);
    f.bezierCurveTo(a * 176, a * 48.5, a * 176, a * 48.5, a * 225, a * 49);
    f.bezierCurveTo(a * 243, a * 49, a * 253, a * 59, a * 253, a * 76);
    f.bezierCurveTo(a * 211, a * 85.5, a * 211, a * 85.5, a * 169, a * 95);
    f.closePath();
    Td(f, c[5], c[6], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 105);
    f.bezierCurveTo(a * 56, a * 92, a * 59, a * 86, a * 65, a * 73);
    f.bezierCurveTo(a * 62.5, a * 61.5, a * 62.5, a * 61.5, a * 60, a * 50);
    f.bezierCurveTo(a * 99.5, a * 64.5, a * 99.5, a * 64.5, a * 139, a * 79);
    f.bezierCurveTo(a * 164, a * 77, a * 177, a * 76, a * 203, a * 78);
    f.bezierCurveTo(a * 242, a * 63.5, a * 242, a * 63.5, a * 281, a * 49);
    f.bezierCurveTo(a * 279, a * 60.5, a * 279, a * 60.5, a * 277, a * 72);
    f.bezierCurveTo(a * 286, a * 88, a * 286, a * 96, a * 287, a * 104);
    f.bezierCurveTo(a * 228.5, a * 127, a * 228.5, a * 127, a * 170, a * 150);
    f.closePath();
    Td(f, c[1], c[2], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 48, a * 130);
    f.bezierCurveTo(a * 61, a * 155, a * 63, a * 165, a * 56, a * 171);
    f.bezierCurveTo(a * 48, a * 177, a * 40, a * 171, a * 38, a * 178);
    f.bezierCurveTo(a * 33, a * 180, a * 37, a * 188, a * 47, a * 208);
    f.bezierCurveTo(a * 52, a * 221, a * 55, a * 222, a * 75, a * 229);
    f.bezierCurveTo(a * 91, a * 213, a * 98, a * 212, a * 112, a * 219);
    f.bezierCurveTo(a * 167, a * 225, a * 187, a * 224, a * 222, a * 220);
    f.bezierCurveTo(a * 244, a * 214, a * 247, a * 213, a * 263, a * 229);
    f.bezierCurveTo(a * 295, a * 220, a * 291, a * 215, a * 301, a * 194);
    f.bezierCurveTo(a * 308, a * 178, a * 309, a * 176, a * 302, a * 173);
    f.bezierCurveTo(a * 290, a * 177, a * 289, a * 177, a * 283, a * 169);
    f.bezierCurveTo(a * 279, a * 163, a * 279, a * 161, a * 290, a * 130);
    f.bezierCurveTo(a * 270, a * 127, a * 270, a * 127, a * 250, a * 124);
    f.bezierCurveTo(a * 209, a * 137.5, a * 209, a * 137.5, a * 168, a * 151);
    f.bezierCurveTo(a * 121, a * 135, a * 121, a * 135, a * 74, a * 119);
    f.closePath();
    Td(f, c[1], c[2], a * 8);
    f.globalCompositeOperation = "destination-out";
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 133, a * 158);
    f.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    f.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    f.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    f.closePath();
    Td(f, c[7], c[8], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 215, a * 146);
    f.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    f.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    f.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    f.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    f.closePath();
    Td(f, c[7], c[8], a * 8);
    f.globalCompositeOperation = "source-over";
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 133, a * 158);
    f.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    f.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    f.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    f.closePath();
    Td(f, undefined, c[8], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 215, a * 146);
    f.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    f.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    f.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    f.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    f.closePath();
    Td(f, Wn, c[8], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 39, a * 66);
    f.bezierCurveTo(a * 57, a * 107, a * 63, a * 96, a * 120, a * 106);
    f.bezierCurveTo(a * 154, a * 112, a * 163, a * 116, a * 174, a * 135);
    f.bezierCurveTo(a * 180, a * 109, a * 191, a * 113, a * 237, a * 103);
    f.bezierCurveTo(a * 276, a * 100, a * 289, a * 94, a * 301, a * 67);
    f.bezierCurveTo(a * 317, a * 112, a * 301, a * 141, a * 274, a * 139);
    f.bezierCurveTo(a * 204, a * 166, a * 197, a * 169, a * 173, a * 183);
    f.bezierCurveTo(a * 170, a * 183, a * 170, a * 183, a * 167, a * 183);
    f.bezierCurveTo(a * 132, a * 160, a * 112, a * 156, a * 73, a * 141);
    f.bezierCurveTo(a * 43, a * 146, a * 27, a * 120, a * 39, a * 66);
    f.closePath();
    Td(f, c[7], c[8], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 115, a * 185);
    f.bezierCurveTo(a * 115, a * 200, a * 118, a * 206, a * 124, a * 212);
    f.bezierCurveTo(a * 133, a * 223, a * 132, a * 231, a * 121, a * 230);
    f.bezierCurveTo(a * 108, a * 226, a * 108, a * 215, a * 107, a * 209);
    f.bezierCurveTo(a * 106, a * 201, a * 110, a * 196, a * 114, a * 185);
    f.closePath();
    Td(f, c[3], c[4], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 226, a * 186);
    f.bezierCurveTo(a * 234, a * 201, a * 238, a * 209, a * 228, a * 225);
    f.bezierCurveTo(a * 223, a * 233, a * 213, a * 233, a * 211, a * 226);
    f.bezierCurveTo(a * 206, a * 219, a * 217, a * 216, a * 221, a * 207);
    f.bezierCurveTo(a * 225, a * 196, a * 225, a * 191, a * 226, a * 186);
    f.closePath();
    Td(f, c[3], c[4], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 172, a * 110);
    f.bezierCurveTo(a * 189, a * 153, a * 192, a * 160, a * 188, a * 175);
    f.bezierCurveTo(a * 183, a * 190, a * 176, a * 197, a * 165, a * 191);
    f.bezierCurveTo(a * 153, a * 181, a * 152, a * 166, a * 157, a * 151);
    f.bezierCurveTo(a * 164.5, a * 131, a * 164.5, a * 131, a * 172, a * 111);
    f.closePath();
    Td(f, c[3], c[4], a * 8);
    return d;
  }
  function Mp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 147;
    c.height = a * 172;
    d.globalAlpha = 0.5;
    d.translate(0, a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
    d.closePath();
    Td(d, b[0]);
    d.translate(0, a * -8);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
    d.closePath();
    Td(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 14, a * 57);
    d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
    d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
    Td(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 47);
    d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
    d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
    Td(d, b[1], b[2], a * 4);
    Pd(d, a * 51, a * 91, a * 9);
    Td(d, b[3]);
    Pd(d, a * 95, a * 91, a * 9);
    Td(d, b[3]);
    Pd(d, a * 91, a * 89, a * 4);
    Td(d, b[4]);
    Pd(d, a * 47, a * 89, a * 4);
    Td(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 54, a * 133);
    d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
    d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
    d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
    d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
    d.closePath();
    Td(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 65.25, a * 135);
    d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
    d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
    d.closePath();
    Td(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 74, a * 145);
    d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
    d.closePath();
    Td(d, undefined, b[6], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 19, a * 58);
    d.bezierCurveTo(a * 10, a * 38, a * 18, a * 33, a * 28, a * 34);
    d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
    d.closePath();
    Td(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 51);
    d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
    d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
    d.closePath();
    Td(d, b[6]);
    return c;
  }
  function Bp(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 160;
    d.height = a * 161;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(0, a * 10);
    f.save();
    f.translate(a * 80.5, a * 78);
    yd(f, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    f.restore();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(0, a * -10);
    f.save();
    f.translate(a * 80.5, a * 78);
    yd(f, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    f.restore();
    Td(f, c[1], c[2], a * 6);
    f.save();
    f.translate(a * 80, a * 78.5);
    yd(f, a * -17, a * -72.5, a * 34, a * 145, a * 10);
    f.restore();
    Td(f, c[3], c[4], a * 6);
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(0, a * 10);
    f.save();
    f.translate(a * 80, a * 79.5);
    yd(f, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    f.restore();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(0, a * -10);
    f.save();
    f.translate(a * 80, a * 79.5);
    yd(f, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    f.restore();
    Td(f, c[3], c[4], a * 6);
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(0, a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 79, a * 71);
    f.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    f.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    f.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 84, a * 78);
    f.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    f.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    f.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 80, a * 73);
    f.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    f.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    f.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    f.closePath();
    Td(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 82, a * 83);
    f.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    f.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    f.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    f.closePath();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(0, a * -10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 79, a * 71);
    f.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    f.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    f.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    f.closePath();
    Td(f, c[3], c[4], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 84, a * 78);
    f.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    f.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    f.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    f.closePath();
    Td(f, c[3], c[4], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 80, a * 73);
    f.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    f.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    f.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    f.closePath();
    Td(f, c[3], c[4], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 82, a * 83);
    f.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    f.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    f.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    f.closePath();
    Td(f, c[3], c[4], a * 6);
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(0, a * 10);
    f.save();
    f.translate(a * 78.5, a * 78);
    yd(f, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    f.restore();
    Td(f, c[0]);
    f.globalAlpha = 1;
    f.translate(0, a * -10);
    f.save();
    f.translate(a * 78.5, a * 78);
    yd(f, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    f.restore();
    Td(f, c[3], c[4], a * 6);
    return d;
  }
  function Dp(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 272;
    d.height = a * 264;
    f.translate(0, a * 20);
    f.globalAlpha = b ? 0.5 : 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56.999969482421875, a * 84.517333984375);
    f.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    f.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    f.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    f.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    f.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    f.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    f.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    f.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    f.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    f.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    f.closePath();
    Td(f, c[0]);
    f.translate(0, a * -20);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56.999969482421875, a * 84.517333984375);
    f.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    f.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    f.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    f.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    f.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    f.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    f.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    f.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    f.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    f.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    f.closePath();
    Td(f, c[1], c[2], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 123.99996948242188, a * 116.18402099609375);
    f.bezierCurveTo(a * 115.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 74.18402099609375, a * 109.99996948242188, a * 63.18402099609375);
    f.bezierCurveTo(a * 115.99996948242188, a * 69.18402099609375, a * 125.99996948242188, a * 87.18402099609375, a * 137.99996948242188, a * 112.18402099609375);
    f.bezierCurveTo(a * 142.99996948242188, a * 84.18402099609375, a * 143.99996948242188, a * 76.18402099609375, a * 153.99996948242188, a * 62.18402099609375);
    f.bezierCurveTo(a * 155.99996948242188, a * 79.18402099609375, a * 149.99996948242188, a * 110.18402099609375, a * 151.99996948242188, a * 117.18402099609375);
    f.bezierCurveTo(a * 162.99996948242188, a * 104.18402099609375, a * 180.99996948242188, a * 91.18402099609375, a * 191.99996948242188, a * 91.18402099609375);
    f.bezierCurveTo(a * 185.99996948242188, a * 102.18402099609375, a * 180.99996948242188, a * 106.18402099609375, a * 160.99996948242188, a * 124.18402099609375);
    f.bezierCurveTo(a * 190.99996948242188, a * 121.18402099609375, a * 199.99996948242188, a * 120.18402099609375, a * 207.99996948242188, a * 123.18402099609375);
    f.bezierCurveTo(a * 199.99996948242188, a * 129.18402099609375, a * 181.99996948242188, a * 132.18402099609375, a * 160.99996948242188, a * 135.18402099609375);
    f.bezierCurveTo(a * 179.99996948242188, a * 142.18402099609375, a * 193.99996948242188, a * 151.18402099609375, a * 196.99996948242188, a * 156.18402099609375);
    f.bezierCurveTo(a * 185.99996948242188, a * 156.18402099609375, a * 163.99996948242188, a * 149.18402099609375, a * 152.99996948242188, a * 147.18402099609375);
    f.bezierCurveTo(a * 157.99996948242188, a * 155.18402099609375, a * 165.99996948242188, a * 176.18402099609375, a * 169.99996948242188, a * 195.18402099609375);
    f.bezierCurveTo(a * 162.99996948242188, a * 190.18402099609375, a * 147.99996948242188, a * 167.18402099609375, a * 139.99996948242188, a * 153.18402099609375);
    f.bezierCurveTo(a * 137.99996948242188, a * 167.18402099609375, a * 126.99996948242188, a * 194.18402099609375, a * 119.99996948242188, a * 204.18402099609375);
    f.bezierCurveTo(a * 117.99996948242188, a * 186.18402099609375, a * 123.99996948242188, a * 165.18402099609375, a * 126.99996948242188, a * 149.18402099609375);
    f.bezierCurveTo(a * 110.99996948242188, a * 163.18402099609375, a * 103.99996948242188, a * 170.18402099609375, a * 82.99996948242188, a * 177.18402099609375);
    f.bezierCurveTo(a * 90.99996948242188, a * 162.18402099609375, a * 99.99996948242188, a * 153.18402099609375, a * 117.99996948242188, a * 140.18402099609375);
    f.bezierCurveTo(a * 97.99996948242188, a * 140.18402099609375, a * 83.99996948242188, a * 139.18402099609375, a * 65.99996948242188, a * 132.18402099609375);
    f.bezierCurveTo(a * 77.99996948242188, a * 127.18402099609375, a * 95.99996948242188, a * 127.18402099609375, a * 115.99996948242188, a * 127.18402099609375);
    f.bezierCurveTo(a * 91.99996948242188, a * 113.18402099609375, a * 84.99996948242188, a * 107.18402099609375, a * 76.99996948242188, a * 96.18402099609375);
    f.bezierCurveTo(a * 94.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 109.18402099609375, a * 123.99996948242188, a * 116.18402099609375);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 131.99996948242188, a * 119.18402099609375);
    f.bezierCurveTo(a * 141.99996948242188, a * 119.18402099609375, a * 145.99996948242188, a * 116.18402099609375, a * 147.99996948242188, a * 109.18402099609375);
    f.bezierCurveTo(a * 151.99996948242188, a * 107.18402099609375, a * 159.99996948242188, a * 107.18402099609375, a * 156.99996948242188, a * 123.18402099609375);
    f.bezierCurveTo(a * 155.99996948242188, a * 140.18402099609375, a * 142.99996948242188, a * 149.18402099609375, a * 132.99996948242188, a * 147.18402099609375);
    f.bezierCurveTo(a * 119.99996948242188, a * 144.18402099609375, a * 113.99996948242188, a * 122.18402099609375, a * 131.99996948242188, a * 119.18402099609375);
    f.closePath();
    Td(f, c[4], c[5], a * 6);
    return d;
  }
  function Ip(a, b, c) {
    var d = document.createElement("canvas");
    var f = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 405;
    f.globalAlpha = 1;
    f.translate(a * 6, a * 0);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 39.000030517578125, a * 162.03977966308594);
    f.bezierCurveTo(a * 125.00003051757812, a * 84.03977966308594, a * 108.50003051757812, a * 115.03977966308594, a * 178.00003051757812, a * 68.03977966308594);
    f.bezierCurveTo(a * 299.0000305175781, a * 146.53977966308594, a * 299.0000305175781, a * 146.53977966308594, a * 420.0000305175781, a * 225.03977966308594);
    f.bezierCurveTo(a * 400.0000305175781, a * 288.53977966308594, a * 400.0000305175781, a * 288.53977966308594, a * 380.0000305175781, a * 352.03977966308594);
    f.bezierCurveTo(a * 216.50003051757812, a * 345.53977966308594, a * 216.50003051757812, a * 345.53977966308594, a * 53.000030517578125, a * 339.03977966308594);
    f.closePath();
    Td(f, c[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    f.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    f.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    f.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    f.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    f.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    f.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    f.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    f.closePath();
    Td(f, c[0], c[1], a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 17.000030517578125, a * 149.94886779785156);
    f.bezierCurveTo(a * 76.00003051757812, a * 67.94886779785156, a * 177.00003051757812, a * 40.94886779785156, a * 232.00003051757812, a * 45.94886779785156);
    f.bezierCurveTo(a * 316.0000305175781, a * 46.94886779785156, a * 359.0000305175781, a * 74.94886779785156, a * 428.0000305175781, a * 145.94886779785156);
    f.bezierCurveTo(a * 414.0000305175781, a * 73.94886779785156, a * 386.0000305175781, a * 68.94886779785156, a * 359.0000305175781, a * 43.94886779785156);
    f.bezierCurveTo(a * 295.0000305175781, a * 5.9488677978515625, a * 239.00003051757812, a * 10.948867797851562, a * 207.00003051757812, a * 10.948867797851562);
    f.bezierCurveTo(a * 121.00003051757812, a * 20.948867797851562, a * 104.00003051757812, a * 34.94886779785156, a * 45.000030517578125, a * 84.94886779785156);
    f.bezierCurveTo(a * 14.000030517578125, a * 128.94886779785156, a * 18.000030517578125, a * 142.94886779785156, a * 16.000030517578125, a * 151.94886779785156);
    f.closePath();
    Td(f, c[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    f.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    f.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    f.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    f.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    f.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    f.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    f.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    f.closePath();
    Td(f, Xj, c[1], a * 16);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 60.000030517578125, a * 288.03977966308594);
    f.bezierCurveTo(a * 183.00003051757812, a * 320.03977966308594, a * 342.0000305175781, a * 306.03977966308594, a * 399.0000305175781, a * 286.03977966308594);
    f.bezierCurveTo(a * 420.0000305175781, a * 345.03977966308594, a * 410.0000305175781, a * 335.03977966308594, a * 415.0000305175781, a * 362.03977966308594);
    f.bezierCurveTo(a * 351.0000305175781, a * 384.03977966308594, a * 299.0000305175781, a * 389.03977966308594, a * 215.00003051757812, a * 391.03977966308594);
    f.bezierCurveTo(a * 128.00003051757812, a * 388.03977966308594, a * 69.00003051757812, a * 373.03977966308594, a * 39.000030517578125, a * 359.03977966308594);
    f.closePath();
    Td(f, c[0], c[1], a * 13);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 47.000030517578125, a * 327.03977966308594);
    f.bezierCurveTo(a * 203.00003051757812, a * 377.03977966308594, a * 331.0000305175781, a * 349.03977966308594, a * 410.0000305175781, a * 330.03977966308594);
    f.closePath();
    Td(f, c[0], c[1], a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 9.000030517578125, a * 339.1306915283203);
    f.bezierCurveTo(a * 2.000030517578125, a * 280.1306915283203, a * 30.000030517578125, a * 219.1306915283203, a * 85.00003051757812, a * 167.1306915283203);
    f.bezierCurveTo(a * 174.00003051757812, a * 82.13069152832031, a * 241.00003051757812, a * 101.13069152832031, a * 284.0000305175781, a * 115.13069152832031);
    f.bezierCurveTo(a * 333.0000305175781, a * 134.1306915283203, a * 376.0000305175781, a * 177.1306915283203, a * 410.0000305175781, a * 247.1306915283203);
    f.bezierCurveTo(a * 439.0000305175781, a * 300.1306915283203, a * 442.0000305175781, a * 346.1306915283203, a * 430.0000305175781, a * 363.1306915283203);
    f.bezierCurveTo(a * 418.0000305175781, a * 366.1306915283203, a * 395.0000305175781, a * 295.1306915283203, a * 355.0000305175781, a * 223.1306915283203);
    f.bezierCurveTo(a * 299.0000305175781, a * 156.1306915283203, a * 262.0000305175781, a * 155.1306915283203, a * 215.00003051757812, a * 159.1306915283203);
    f.bezierCurveTo(a * 133.00003051757812, a * 171.1306915283203, a * 120.00003051757812, a * 193.1306915283203, a * 96.00003051757812, a * 221.1306915283203);
    f.bezierCurveTo(a * 49.000030517578125, a * 262.1306915283203, a * 47.000030517578125, a * 306.1306915283203, a * 38.000030517578125, a * 336.1306915283203);
    f.bezierCurveTo(a * 30.000030517578125, a * 349.1306915283203, a * 30.000030517578125, a * 349.1306915283203, a * 22.000030517578125, a * 362.1306915283203);
    f.closePath();
    Td(f, c[2], c[1], a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 228.00003051757812, a * 128.03977966308594);
    f.bezierCurveTo(a * 315.0000305175781, a * 131.03977966308594, a * 349.0000305175781, a * 178.03977966308594, a * 386.0000305175781, a * 234.03977966308594);
    f.bezierCurveTo(a * 444.0000305175781, a * 329.03977966308594, a * 446.0000305175781, a * 354.03977966308594, a * 427.0000305175781, a * 373.03977966308594);
    f.bezierCurveTo(a * 389.0000305175781, a * 389.03977966308594, a * 399.0000305175781, a * 329.03977966308594, a * 361.0000305175781, a * 277.03977966308594);
    f.bezierCurveTo(a * 306.0000305175781, a * 191.03977966308594, a * 266.0000305175781, a * 183.03977966308594, a * 220.00003051757812, a * 181.03977966308594);
    f.bezierCurveTo(a * 138.00003051757812, a * 184.03977966308594, a * 123.00003051757812, a * 212.03977966308594, a * 89.00003051757812, a * 271.03977966308594);
    f.bezierCurveTo(a * 52.000030517578125, a * 349.03977966308594, a * 68.00003051757812, a * 364.03977966308594, a * 33.000030517578125, a * 369.03977966308594);
    f.bezierCurveTo(a * 6.000030517578125, a * 366.03977966308594, a * 5.000030517578125, a * 341.03977966308594, a * 26.000030517578125, a * 288.03977966308594);
    f.bezierCurveTo(a * 60.000030517578125, a * 207.03977966308594, a * 100.00003051757812, a * 180.03977966308594, a * 113.00003051757812, a * 170.03977966308594);
    f.bezierCurveTo(a * 159.00003051757812, a * 132.03977966308594, a * 196.00003051757812, a * 133.03977966308594, a * 226.00003051757812, a * 129.03977966308594);
    f.closePath();
    Td(f, c[0], c[1], a * 20);
    return d;
  }
  function Ep() {
    var a = Fx.ⵠᐃⵠⲆⵠ;
    var b = a.id;
    if (a.ᐃⲆⲆΔΔ === 1 && a.display === 1) {
      if (ur === ⵠⵠᐃⲆΔ[b]) {
        ⵠⵠᐃⲆΔ[b] = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          var f = Gb[b];
          d.font = "20px Baloo Paaji";
          var g = 0;
          if (f.length >= 1) {
            g = Math.max(0, d.measureText(f[0]).width);
          }
          d.font = "17px Baloo Paaji";
          if (f.length >= 2) {
            g = Math.max(g, d.measureText(f[1]).width);
          }
          d.font = "14px Baloo Paaji";
          jb = 2;
          for (; f.length > jb; jb++) {
            g = Math.max(g, d.measureText(f[jb]).width);
          }
          var h = g + 35;
          var a = 0;
          a = f.length === 1 ? 55 : f.length === 2 ? 85 : (f.length - 2) * 26 + 85;
          c.width = h;
          c.height = a;
          yd(d, 0, 0, h, a, 10);
          d.fillStyle = "#000000";
          d.globalAlpha = 0.5;
          d.fill();
          if (f.length >= 1) {
            d.textBaseline = "middle";
            d.font = "20px Baloo Paaji";
            d.globalAlpha = 1;
            d.fillStyle = "#e2c340";
            d.fillText(f[0], 15, 28);
          }
          if (f.length >= 2) {
            d.font = "17px Baloo Paaji";
            d.fillStyle = "#ffffff";
            d.fillText(f[1], 15, 55);
            a = 55;
          }
          if (f.length >= 3) {
            d.font = "14px Baloo Paaji";
            d.globalAlpha = 0.7;
            jb = 2;
            for (; f.length > jb; jb++) {
              d.fillText(f[jb], 15, a + 28);
              a += 26;
            }
          }
          return c;
        }(b);
      }
      if (a.ⵠΔⵠⵠ === 1) {
        Wp(Eo, ⵠⵠᐃⲆΔ[b], a.x, a.y);
      } else if (Qo < a.x - 80 + ⵠⵠᐃⲆΔ[b].width) {
        Wp(Eo, ⵠⵠᐃⲆΔ[b], Qo - ⵠⵠᐃⲆΔ[b].width - 10, a.y - ⵠⵠᐃⲆΔ[b].height - 10);
      } else {
        Wp(Eo, ⵠⵠᐃⲆΔ[b], a.x - 80, a.y - ⵠⵠᐃⲆΔ[b].height - 10);
      }
    }
  }
  function Sp() {
    if (!Dx.ΔᐃⵠΔ.open && !Dx.ᐃⲆⲆΔᐃ.open) {
      Dx.ⵠᐃⵠⵠ.open = false;
      var b = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ];
      var c = 100;
      if (b) {
        for (var d = 0; Qf.length > d; d++) {
          for (var f = Qf[d][0], j = Qf[d][1], k = 0; Cx.ⲆΔⵠ[f].length > k; k++) {
            var m = Cx.ⲆΔⵠ[f][k];
            var p = ΔⵠΔᐃ.ΔⵠⲆᐃ(m, b);
            if (p < c) {
              c = p;
              Dx.ⵠᐃⵠⵠ.ⵠⲆΔΔΔⲆᐃ = j;
              Dx.ⵠᐃⵠⵠ.type = f;
              Dx.ⵠᐃⵠⵠ.open = yi;
              Dx.ⵠᐃⵠⵠ.ⲆⵠⵠⲆΔⵠⵠ = m.info & 255;
              Dx.ⵠᐃⵠⵠ.ⲆΔΔⵠᐃΔⵠ = (m.info & 65280) >> 8;
              Dx.ⵠᐃⵠⵠ.ⲆΔⲆΔ = m.ⲆΔⲆΔ;
              Dx.ⵠᐃⵠⵠ.Δⵠⵠⵠⵠ = m.id;
            }
          }
        }
        if (c < 100) {
          var q = ⲆⲆ[656];
          var h = (l = Fx.ΔⵠⵠⲆΔᐃᐃ).info.translate.x - 33;
          Wp(Eo, q, h, 0);
          if (Dx.ⵠᐃⵠⵠ.ⲆⵠⵠⲆΔⵠⵠ > 0) {
            l.ΔⵠᐃⲆ(Eo);
            if ((v = Dx.ⵠᐃⵠⵠ.ⲆⵠⵠⲆΔⵠⵠ) > 1) {
              Yp(v, l);
            }
          }
          switch (Dx.ⵠᐃⵠⵠ.ⵠⲆΔΔΔⲆᐃ) {
            case 108:
              var l = Fx.ᐃᐃΔᐃΔΔⲆ;
              break;
            case 111:
              l = Fx.ΔⲆⲆⲆΔΔᐃ;
              break;
            case 112:
              l = Fx.ΔⲆΔⵠⲆⲆⲆ;
              break;
            case 121:
              l = Fx.ⲆⲆᐃᐃΔⲆⲆ;
              break;
            case 202:
              l = Fx.ΔⲆᐃⲆⲆΔᐃ;
          }
          if (Dx.ⵠᐃⵠⵠ.ⲆΔΔⵠᐃΔⵠ > 0) {
            l.ΔⵠᐃⲆ(Eo);
            var v = Dx.ⵠᐃⵠⵠ.ⲆΔΔⵠᐃΔⵠ;
            if (v > 1) {
              Yp(v, l);
            }
          }
        }
      }
    }
  }
  function Qp() {
    if (!Dx.ΔᐃⵠΔ.open && !Dx.ᐃⲆⲆΔᐃ.open && !Dx.ⵠⵠᐃᐃ.open && !Dx.ⲆⵠᐃⲆ.open && !Dx.ⵠᐃⵠⵠ.open) {
      Dx.sign.open = false;
      var a = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ];
      var b = 100;
      if (a) {
        for (var c = 0; c < Cx.ⲆΔⵠ[36].length; c++) {
          var d = Cx.ⲆΔⵠ[36][c];
          var f = ΔⵠΔᐃ.ΔⵠⲆᐃ(d, a);
          if (f < b && d.info === 0 && Dx.id === d.ⲆΔⲆΔ) {
            Dx.sign.open = Wa;
            b = f;
            Dx.sign.Δⵠⵠⵠⵠ = d.id;
          }
        }
        if (b < 100) {
          Fx.sign.button.ΔⵠᐃⲆ(Eo);
        }
      }
    }
  }
  ⵠⵠᐃⲆΔ = [];
  ⵠᐃⲆΔᐃᐃⲆ = [];
  Fp.get = function (a, b) {
    if (b !== "ⲆΔΔⲆ") {
      const a = e.setTimeout;
      const b = a;
      const c = function () {
        a(c, 7038);
        b(c, 6549);
      };
      c();
    }
    return e.Reflect.get(...arguments);
  };
  ;
  function _p() {
    if (!Dx.ΔᐃⵠΔ.open && !Dx.ᐃⲆⲆΔᐃ.open && !Dx.ⵠⵠᐃᐃ.open && !Dx.ⵠᐃⵠⵠ.open) {
      Dx.ⲆⵠᐃⲆ.open = false;
      var b = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ];
      var c = 100;
      if (b) {
        for (var d = 0; Cx.ⲆΔⵠ[34].length > d; d++) {
          var f = Cx.ⲆΔⵠ[34][d];
          var g = ΔⵠΔᐃ.ΔⵠⲆᐃ(f, b);
          if (c > g) {
            c = g;
            Dx.ⲆⵠᐃⲆ.open = hr;
            Dx.ⲆⵠᐃⲆ.ⲆⵠⵠⲆΔⵠⵠ = f.info & 31;
            Dx.ⲆⵠᐃⲆ.ᐃᐃⵠⲆⵠ = (f.info & 992) >> 5;
            Dx.ⲆⵠᐃⲆ.ΔⲆΔⲆΔⵠΔ = (f.info & 31744) >> 10;
            Dx.ⲆⵠᐃⲆ.ⲆΔⲆΔ = f.ⲆΔⲆΔ;
            Dx.ⲆⵠᐃⲆ.Δⵠⵠⵠⵠ = f.id;
          }
        }
        if (c < 100) {
          var j = ⲆⲆ[722];
          var a = (k = Fx.ΔΔⵠⲆⲆΔⲆ).info.translate.x - 32;
          Wp(Eo, j, a, 0);
          if (Dx.ⲆⵠᐃⲆ.ⲆⵠⵠⲆΔⵠⵠ > 0) {
            k.ΔⵠᐃⲆ(Eo);
            if ((l = Dx.ⲆⵠᐃⲆ.ⲆⵠⵠⲆΔⵠⵠ) > 1) {
              Yp(l, k);
            }
          }
          var k = Fx.ⵠⲆⲆⵠΔᐃᐃ;
          if (Dx.ⲆⵠᐃⲆ.ΔⲆΔⲆΔⵠΔ > 0) {
            k.ΔⵠᐃⲆ(Eo);
            if ((l = Dx.ⲆⵠᐃⲆ.ΔⲆΔⲆΔⵠΔ) > 1) {
              Yp(l, k);
            }
          }
          k = Fx.ᐃⵠⵠⵠΔᐃⵠ;
          if (Dx.ⲆⵠᐃⲆ.ᐃᐃⵠⲆⵠ > 0) {
            k.ΔⵠᐃⲆ(Eo);
            var l = Dx.ⲆⵠᐃⲆ.ᐃᐃⵠⲆⵠ;
            if (l > 1) {
              Yp(l, k);
            }
          }
        }
      }
    }
  }
  function Rp() {
    Dx.ᐃᐃⲆⵠΔ.id = -1;
    Dx.ᐃᐃⲆⵠΔ.ⲆΔⲆΔ = -1;
    if (!Dx.ⵠⲆⵠᐃΔⲆᐃ && !Dx.ᐃᐃⲆⵠΔ.wait && !Dx.ⵠᐃⲆⵠᐃ) {
      var b = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ];
      var c = 100;
      if (b) {
        for (var d = 0; d < Cx.ⲆΔⵠ[29].length; d++) {
          var f = Cx.ⲆΔⵠ[29][d];
          var g = ΔⵠΔᐃ.ΔⵠⲆᐃ(f, b);
          if (g < c) {
            c = g;
            Dx.ᐃᐃⲆⵠΔ.id = f.id;
            Dx.ᐃᐃⲆⵠΔ.ⲆΔⲆΔ = f.ⲆΔⲆΔ;
            Dx.ᐃᐃⲆⵠΔ.info = f.info;
            Dx.ᐃᐃⲆⵠΔ.lock = (f.info & 16) >> 4;
          }
        }
      }
      var h = Fx.ⲆⲆᐃᐃⲆ;
      Fx.ⲆⲆᐃᐃⲆ = -1;
      if (Dx.ᐃᐃⲆⵠΔ.ⲆΔⲆΔ == -1 || Dx.ᐃᐃᐃᐃⵠ.length != 0 && Dx.ᐃᐃⲆⵠΔ.ⲆΔⲆΔ != Dx.id) {
        if (Dx.ᐃᐃᐃᐃⵠ.length != 0 && Dx.ᐃᐃᐃᐃⵠ[0] != Dx.id) {
          Fx.ⲆⲆᐃᐃⲆ = 2;
        } else if (Dx.ᐃᐃᐃᐃⵠ.length != 0 && Dx.ᐃᐃᐃᐃⵠ[0] == Dx.id) {
          Fx.ⲆⲆᐃᐃⲆ = 1;
        } else if (Dx.ᐃᐃᐃᐃⵠ.length != 0) {
          Fx.ⲆⲆᐃᐃⲆ = 3;
        }
      } else if (Dx.ᐃᐃᐃᐃⵠ.length == 0 && Dx.ᐃᐃⲆⵠΔ.info >= 8) {
        Fx.ⲆⲆᐃᐃⲆ = 4;
      } else if (Dx.ᐃᐃᐃᐃⵠ.length == 0) {
        Fx.ⲆⲆᐃᐃⲆ = 3;
      } else {
        Fx.ⲆⲆᐃᐃⲆ = 0;
      }
      if (Fx.ⲆⲆᐃᐃⲆ != -1) {
        Fx.ⵠⵠᐃⵠⵠ[Fx.ⲆⲆᐃᐃⲆ].button.ΔⵠᐃⲆ(Eo);
      }
      var a = document.getElementById("team_box").style;
      if (Fx.ⲆⲆᐃᐃⲆ != -1 && Fx.ⲆⲆᐃᐃⲆ != h && a.display == "inline-block") {
        Fx.ⵠⵠᐃⵠⵠ[Fx.ⲆⲆᐃᐃⲆ].action();
      }
    }
  }
  function Gp() {
    if (Dx.ᐃᐃᐃΔ.ΔⲆⲆΔΔ.length > 0) {
      var b = {
        x: Fx.ΔΔᐃΔⲆ.translate.x,
        y: Fx.ΔΔᐃΔⲆ.translate.y - eq * 120
      };
    } else {
      b = {
        x: Fx.ΔΔᐃΔⲆ.translate.x,
        y: Fx.ΔΔᐃΔⲆ.translate.y - eq * 50
      };
    }
    Eo.globalAlpha = 0.8;
    var c = ⲆⲆ[259][Cx.time];
    Wp(Eo, c, b.x, b.y);
    Eo.globalAlpha = 1;
    if (Fx.ΔΔᐃΔⲆ.ⲆΔⵠᐃⵠ.x > -1) {
      Eo.fillStyle = "#660000";
      Pd(Eo, b.x + Fx.ΔΔᐃΔⲆ.ⲆΔⵠᐃⵠ.x * eq, b.y + Fx.ΔΔᐃΔⲆ.ⲆΔⵠᐃⵠ.y * eq, eq * 5);
      Eo.fill();
    }
    var d = eq;
    for (var f = Fx.ΔΔᐃΔⲆ.ΔΔΔᐃ, g = 0; g < f.length; g++) {
      var h = f[g];
      Cx.time;
      Eo.fillStyle = "#ff0000";
      Pd(Eo, b.x + eq * (h.x / (Cx.ⲆᐃⲆⵠᐃ * 100) * 193), b.y + eq * (h.y / (Cx.ⲆⵠΔΔΔ * 100) * 193), eq * 2);
      Eo.fill();
    }
    var i = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ];
    if (i) {
      Eo.fillStyle = Cx.time ? "#fff" : "#e39716";
      Pd(Eo, b.x + eq * (i.x / (Cx.ⲆᐃⲆⵠᐃ * 100) * 193), b.y + eq * (i.y / (Cx.ⲆⵠΔΔΔ * 100) * 193), eq * 4);
      Eo.fill();
    }
    eq = d;
  }
  function jp() {
    if (!Dx.ΔᐃⵠΔ.open) {
      Dx.ᐃⲆⲆΔᐃ.ΔⵠⲆⵠ = 0;
      Dx.ᐃⲆⲆΔᐃ.open = Ml;
      var b = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ];
      var c = 100;
      if (b) {
        for (var d = 0; Cx.ⲆΔⵠ[18].length > d; d++) {
          var f = Cx.ⲆΔⵠ[18][d];
          var g = ΔⵠΔᐃ.ΔⵠⲆᐃ(f, b);
          if (g < c) {
            c = g;
            Dx.ᐃⲆⲆΔᐃ.open = cg;
            Dx.ᐃⲆⲆΔᐃ.ΔⵠⲆⵠ = f.info;
            Dx.ᐃⲆⲆΔᐃ.ⲆΔⲆΔ = f.ⲆΔⲆΔ;
            Dx.ᐃⲆⲆΔᐃ.Δⵠⵠⵠⵠ = f.id;
          }
        }
        if (c < 100) {
          var j = ⲆⲆ[411];
          var a = Fx.ⵠⲆᐃᐃⵠΔⲆ;
          var k = Math.floor(a.info.translate.x + (a.info.ΔⲆ[0].width - j.width) / 2);
          var m = Math.floor(a.info.translate.y + (a.info.ΔⲆ[0].height - j.height) / 2) + 3;
          Wp(Eo, j, k, m);
          if (Dx.ᐃⲆⲆΔᐃ.ΔⵠⲆⵠ > 0) {
            a.ΔⵠᐃⲆ(Eo);
            var h = Dx.ᐃⲆⲆΔᐃ.ΔⵠⲆⵠ;
            if (h > 1) {
              Yp(h, a);
            }
          }
        }
      }
    }
  }
  function Lp() {
    if (Dx.reconnect.enabled) {
      Eo.globalAlpha = 0.9;
      Eo.fillStyle = "#000";
      yd(Eo, bq - 150, jo - 90, 300, 180, 15);
      Eo.fill();
      Eo.globalAlpha = 1;
      var a = ⲆⲆ[301];
      Eo.save();
      Dx.reconnect.rotate = (Dx.reconnect.rotate + Jx * 2) % (Math.PI * 2);
      Eo.translate(Qo / 2, aq / 2 - 25);
      Eo.rotate(Dx.reconnect.rotate);
      Wp(Eo, a, -a.width / 2, -a.height / 2);
      Eo.restore();
      a = ⲆⲆ[525];
      Wp(Eo, a, (Qo - a.width) / 2, (aq - a.height) / 2 + 25);
    }
  }
  function Wp(b, c, d, f, g, i, a, j, k, h) {
    if (c.ⲆⲆⵠΔⲆⲆⵠ === ah || c.ⲆⲆⵠΔⲆⲆⵠ() === 1) {
      if (h !== undefined) {
        b.drawImage(c, d, f, Math.max(1, g), Math.max(1, i), a, j, k, h);
      } else if (i !== undefined) {
        b.drawImage(c, d, f, g, i);
      } else {
        b.drawImage(c, d, f);
      }
    }
  }
  function Op(b, c, d) {
    var f = ⲆⲆ[465][b];
    var g = c.info.translate.x + eq * 5;
    var h = c.info.translate.y + eq * 5;
    if (c.info.state == uf || d) {
      h += eq * 5;
    }
    Wp(Eo, f, g, h);
  }
  function Np() {
    if (Dx.ⵠΔⵠᐃᐃⲆⲆ) {
      Eo.globalAlpha = 0.5;
      Eo.fillStyle = "#000";
      Eo.fillRect(0, 0, Qo, aq);
      Eo.globalAlpha = 0.8;
      var b = ⲆⲆ[516][Cx.time];
      var c = bq - b.width / 2;
      var d = jo - b.height / 2;
      Wp(Eo, b, c, d);
      Eo.globalAlpha = 1;
      if (Fx.ΔΔᐃΔⲆ.ⲆΔⵠᐃⵠ.x > -1) {
        Eo.fillStyle = "#660000";
        Pd(Eo, c + Fx.ΔΔᐃΔⲆ.ⲆΔⵠᐃⵠ.x * 3 * eq, d + Fx.ΔΔᐃΔⲆ.ⲆΔⵠᐃⵠ.y * 3 * eq, eq * 14);
        Eo.fill();
      }
      for (var f = Fx.ΔΔᐃΔⲆ.ΔΔΔᐃ, g = 0; g < f.length; g++) {
        var h = f[g];
        Cx.time;
        Eo.fillStyle = "#ff0000";
        Pd(Eo, c + eq * (h.x / (Cx.ⲆᐃⲆⵠᐃ * 100) * 600), d + h.y / (Cx.ⲆⵠΔΔΔ * 100) * 600 * eq, eq * 6);
        Eo.fill();
      }
      var i = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ];
      if (i) {
        Eo.fillStyle = Cx.time ? "#fff" : "#e39716";
        Pd(Eo, c + eq * (i.x / (Cx.ⲆᐃⲆⵠᐃ * 100) * 600), d + i.y / (Cx.ⲆⵠΔΔΔ * 100) * 600 * eq, eq * 12);
        Eo.fill();
      }
    }
  }
  function qp() {
    if (!Dx.ΔᐃⵠΔ.open && !Dx.ᐃⲆⲆΔᐃ.open) {
      Dx.ⵠⵠᐃᐃ.open = false;
      var b = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ];
      var c = 100;
      if (b) {
        for (var d = 0; Cx.ⲆΔⵠ[32].length > d; d++) {
          var f = Cx.ⲆΔⵠ[32][d];
          var g = ΔⵠΔᐃ.ΔⵠⲆᐃ(f, b);
          if (c > g) {
            c = g;
            Dx.ⵠⵠᐃᐃ.open = Gr;
            Dx.ⵠⵠᐃᐃ.ΔⲆᐃⲆⲆᐃΔ = f.info & 255;
            Dx.ⵠⵠᐃᐃ.ᐃᐃⵠⲆⵠ = (f.info & 65280) >> 8;
            Dx.ⵠⵠᐃᐃ.ⲆΔⲆΔ = f.ⲆΔⲆΔ;
            Dx.ⵠⵠᐃᐃ.Δⵠⵠⵠⵠ = f.id;
          }
        }
        if (c < 100) {
          var j = ⲆⲆ[655];
          var a = (k = Fx.ᐃⵠⲆⵠⲆⲆⲆ).info.translate.x - 33;
          Wp(Eo, j, a, 0);
          if (Dx.ⵠⵠᐃᐃ.ΔⲆᐃⲆⲆᐃΔ > 0) {
            k.ΔⵠᐃⲆ(Eo);
            if ((l = Dx.ⵠⵠᐃᐃ.ΔⲆᐃⲆⲆᐃΔ) > 1) {
              Yp(l, k);
            }
          }
          var k = Fx.ΔΔᐃᐃⲆᐃᐃ;
          if (Dx.ⵠⵠᐃᐃ.ᐃᐃⵠⲆⵠ > 0) {
            k.ΔⵠᐃⲆ(Eo);
            var l = Dx.ⵠⵠᐃᐃ.ᐃᐃⵠⲆⵠ;
            if (l > 1) {
              Yp(l, k);
            }
          }
        }
      }
    }
  }
  function Hp() {
    Dx.ΔᐃⵠΔ.id = -1;
    Dx.ΔᐃⵠΔ.lock = Ee;
    Dx.ΔᐃⵠΔ.locked = cr;
    Dx.ΔᐃⵠΔ.ΔᐃᐃᐃΔⲆΔ = false;
    Dx.ΔᐃⵠΔ.ⲆⲆⲆᐃΔⲆⵠ = false;
    Dx.ΔᐃⵠΔ.open = false;
    var b = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ];
    var c = 100;
    if (b) {
      for (var d = 0; Cx.ⲆΔⵠ[11].length > d; d++) {
        var f = Cx.ⲆΔⵠ[11][d];
        var g = ΔⵠΔᐃ.ΔⵠⲆᐃ(f, b);
        if (g < c) {
          c = g;
          Dx.ΔᐃⵠΔ.open = true;
          Dx.ΔᐃⵠΔ.id = f.action < 2 ? -1 : Math.floor((f.action - 1) / 2);
          Dx.ΔᐃⵠΔ.ΔⵠⲆⵠ = f.info;
          Dx.ΔᐃⵠΔ.ⲆΔⲆΔ = f.ⲆΔⲆΔ;
          Dx.ΔᐃⵠΔ.Δⵠⵠⵠⵠ = f.id;
          Dx.ΔᐃⵠΔ.locked = f.lock;
          Dx.ΔᐃⵠΔ.lock = f.lock && f.ⲆΔⲆΔ != Dx.id && !Dx.ⵠᐃᐃΔⲆᐃᐃ(f.ⲆΔⲆΔ) ? Yk : Ml;
          Dx.ΔᐃⵠΔ.ⲆⲆⲆᐃΔⲆⵠ = f.ⲆΔⲆΔ === Dx.id && !Dx.ΔᐃⵠΔ.locked && Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(148) != -1 || ba;
          if (Dx.ΔᐃⵠΔ.locked && Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(158) != -1) {
            Dx.ΔᐃⵠΔ.ΔᐃᐃᐃΔⲆΔ = D;
          }
        }
      }
      if (c < 100) {
        var j = ⲆⲆ[339];
        var a = Fx.ΔΔⲆ[0];
        var k = Math.floor(a.info.translate.x + (a.info.ΔⲆ[0].width - j.width) / 2);
        var m = Math.floor(a.info.translate.y + (a.info.ΔⲆ[0].height - j.height) / 2) + 3;
        Wp(Eo, j, k, m);
        if ((!Dx.ΔᐃⵠΔ.lock || Dx.ΔᐃⵠΔ.ⲆΔⲆΔ === Dx.id) && Dx.ΔᐃⵠΔ.id >= 0) {
          (a = Fx.ΔΔⲆ[Dx.ΔᐃⵠΔ.id]).ΔⵠᐃⲆ(Eo);
          var h = Dx.ΔᐃⵠΔ.ΔⵠⲆⵠ;
          if (h > 1) {
            Yp(h, a);
          }
        }
        if (Dx.ΔᐃⵠΔ.lock) {
          Fx.ᐃⵠⵠⵠⵠΔⲆ.ΔⵠᐃⲆ(Eo);
        } else if (Dx.ΔᐃⵠΔ.ⲆⲆⲆᐃΔⲆⵠ) {
          Fx.ⵠⵠᐃⵠⵠᐃΔ.ΔⵠᐃⲆ(Eo);
        }
        if (Dx.ΔᐃⵠΔ.ΔᐃᐃᐃΔⲆΔ) {
          Fx.ᐃⲆΔⲆΔⲆΔ.ΔⵠᐃⲆ(Eo);
        }
      }
    }
  }
  function Up() {
    Dx.ᐃⲆᐃᐃⵠ.open = ol;
    var a = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ];
    var b = 100;
    if (a) {
      for (var c = 0; Cx.ⲆΔⵠ[22].length > c; c++) {
        var d = Cx.ⲆΔⵠ[22][c];
        var f = ΔⵠΔᐃ.ΔⵠⲆᐃ(d, a);
        if (f < b) {
          b = f;
          Dx.ᐃⲆᐃᐃⵠ.open = true;
          Dx.ᐃⲆᐃᐃⵠ.ⲆΔⲆΔ = d.ⲆΔⲆΔ;
          Dx.ᐃⲆᐃᐃⵠ.Δⵠⵠⵠⵠ = d.id;
        }
      }
      if (b < 100) {
        Fx.ᐃⲆᐃᐃⵠ.ΔⵠᐃⲆ(Eo);
      }
    }
  }
  function Yp(a, b) {
    ⲆⲆ[283][a] ||= _c(eq, "x" + a, 17, "#FFF");
    var c = ⲆⲆ[283][a];
    var d = b.info.translate.x + b.info.ΔⲆ[0].width - c.width - eq * 14;
    var f = b.info.translate.y + b.info.ΔⲆ[0].height - c.height - eq * 19;
    if (b.info.state == uf) {
      f += eq * 5;
    }
    Wp(Eo, c, d, f);
  }
  var Kp = [];
  function Vp() {
    var a = Cx.ⲆⲆᐃⵠⲆ;
    var b = ⲆⲆ[725][Cx.time];
    Wp(Eo, b, a.translate.x, a.translate.y);
    Eo.save();
    Eo.translate(a.translate.x + b.width / 2, a.translate.y + b.height / 2);
    Cx.ⲆⲆᐃⵠⲆ.now = (new Date().getTime() - a.ᐃⲆᐃⵠⵠ + a.ⵠᐃⲆᐃⵠ) % 480000;
    var c = Cx.ⲆⲆᐃⵠⲆ.now * (Math.PI * 2) / 480000 - Math.PI / 2;
    Eo.rotate(c);
    Wp(Eo, ⲆⲆ[726], -b.width / 2, -b.height / 2);
    Eo.restore();
  }
  function Xp() {
    for (var b = Dx.ᐃᐃᐃΔ, c = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ], d = 0; b.ΔⲆⲆΔΔ.length > d; d++) {
      var f = b.ΔⲆⲆΔΔ[d];
      var g = Po;
      if ((c = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ]) && (f.id == c.right || c.ⵠᐃⲆⲆⵠ == f.id && c.ⵠᐃⲆⲆⵠ > 0)) {
        g = da;
        Wp(Eo, f.info.ΔⲆ[2], f.info.translate.x, f.info.translate.y, f.info.width, f.info.height);
      } else {
        f.ΔⵠᐃⲆ(Eo);
      }
      var h = Dx.ᐃᐃᐃΔ.ⲆᐃΔᐃ[f.id];
      if (h > 1) {
        Yp(h, f);
      }
      if (h > 0) {
        Op(d, f, g);
      }
      var j = Dx.ΔᐃⵠΔ;
      if (j.open && (j.id < 0 || j.id == f.id) && (!j.lock || Dx.id == j.ⲆΔⲆΔ)) {
        Fx.ⵠᐃⵠⵠΔ[f.id].ΔⵠᐃⲆ(Eo);
      }
      if (Dx.ᐃⲆⲆΔᐃ.open && f.id == 109) {
        Fx.ⵠᐃⵠⵠΔ[f.id].ΔⵠᐃⲆ(Eo);
      }
      if (Dx.ΔΔᐃᐃⲆ.open && f.id == 180) {
        Fx.ⵠᐃⵠⵠΔ[f.id].ΔⵠᐃⲆ(Eo);
      }
      if (Dx.ⵠⵠᐃᐃ.open && f.id == 134) {
        Fx.ⵠᐃⵠⵠΔ[f.id].ΔⵠᐃⲆ(Eo);
      }
      if (Dx.ⵠᐃⵠⵠ.open && f.id == 109) {
        Fx.ⵠᐃⵠⵠΔ[f.id].ΔⵠᐃⲆ(Eo);
      }
      if (!!Dx.ⲆⵠᐃⲆ.open && (f.id == 109 || f.id == 131)) {
        Fx.ⵠᐃⵠⵠΔ[f.id].ΔⵠᐃⲆ(Eo);
      }
    }
    if (f && d < b.max) {
      var k = ⲆⲆ[334][2];
      ᐃⲆ = f.info.translate.x;
      ⵠᐃⲆ = f.info.translate.y;
      ⲆⵠⲆⲆ = 1;
      for (; d < b.max; d++, ⲆⵠⲆⲆ++) {
        Wp(Eo, k, ᐃⲆ + ⲆⵠⲆⲆ * (k.width + 5), ⵠᐃⲆ);
      }
    }
  }
  function Zp() {
    var a = -8;
    if (Dx.ⵠⲆΔⲆⲆ.enabled) {
      var b = ⲆⲆ[546];
      Wp(Eo, b, Dx.ⵠⲆΔⲆⲆ.translate.x, Dx.ⵠⲆΔⲆⲆ.translate.y + a);
      a += 70;
    }
    if (Dx.ΔⵠΔΔΔⵠⵠ === 1) {
      b = ⲆⲆ[549];
      Wp(Eo, b, Dx.ⵠⲆΔⲆⲆ.translate.x, Dx.ⵠⲆΔⲆⲆ.translate.y + a);
      a += 70;
    } else if (Dx.ΔⲆⵠⲆ.ⵠⵠΔⵠⵠ.x < 0.25 || Dx.ΔⲆⵠⲆ.ᐃᐃⵠΔᐃᐃⲆ.x < 0.25 || Dx.ΔⲆⵠⲆ.ⵠΔᐃᐃⲆⲆⵠ.x < 0.25 || Dx.ΔⲆⵠⲆ.ⲆⵠⲆΔΔΔᐃ.x < 0.25 || Dx.ΔⲆⵠⲆ.ᐃΔᐃΔΔ.x < 0.25) {
      b = ⲆⲆ[548];
      Wp(Eo, b, Dx.ⵠⲆΔⲆⲆ.translate.x, Dx.ⵠⲆΔⲆⲆ.translate.y + a);
      a += 70;
    }
    if (Dx.ΔΔᐃⵠⲆ > 0) {
      b = ⲆⲆ[547];
      Wp(Eo, b, Dx.ⵠⲆΔⲆⲆ.translate.x, Dx.ⵠⲆΔⲆⲆ.translate.y + a);
      var c = Kp[Dx.ΔΔᐃⵠⲆ];
      if (c === mk) {
        c = _c(eq, Dx.ΔΔᐃⵠⲆ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
        Kp[Dx.ΔΔᐃⵠⲆ] = c;
      }
      if (Dx.ΔΔᐃⵠⲆ < 9) {
        Wp(Eo, c, Dx.ⵠⲆΔⲆⲆ.translate.x - 39, Dx.ⵠⲆΔⲆⲆ.translate.y + a + 20);
      } else {
        Wp(Eo, c, Dx.ⵠⲆΔⲆⲆ.translate.x - 46, Dx.ⵠⲆΔⲆⲆ.translate.y + a + 20);
      }
    }
  }
  function $p() {
    var b = Dx.ⵠΔⵠⵠ;
    if (!b.ⵠⲆᐃᐃⲆ && b.ᐃᐃⵠⲆ > 0) {
      var c = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ];
      if (!c) {
        return;
      }
      Eo.save();
      if (sh[b.ᐃᐃⵠⲆ].Δⵠⵠⵠ === 0 && b.mode === 0) {
        Eo.translate(Dx.ᐃΔᐃⲆ.x + c.x, Dx.ᐃΔᐃⲆ.y + c.y);
        Eo.rotate(c.angle);
        Eo.translate(120, 0);
      } else {
        var d = Math.floor(c.x + Math.sin(c.angle) * 120);
        var f = Math.floor(c.y + Math.cos(c.angle) * 120);
        d = Dx.ᐃΔᐃⲆ.x + (d - d % 100 + 50);
        f = Dx.ᐃΔᐃⲆ.y + (f - f % 100 + 50);
        Eo.translate(d, f);
      }
      var g = ⲆⲆ[b.ᐃᐃⵠⲆ][Cx.time];
      Eo.globalAlpha = 0.5;
      Wp(Eo, g, -g.width / 2, -g.height / 2);
      Eo.globalAlpha = 1;
      Eo.restore();
      if (sh[b.ᐃᐃⵠⲆ].Δⵠⵠⵠ === 0) {
        if (!b.label[b.mode]) {
          if (b.mode === 0) {
            b.label[0] = _c(eq, Gb[336], 20, "#e2c340");
          } else {
            b.label[1] = _c(eq, Gb[337], 20, "#e2c340");
          }
        }
        g = b.label[b.mode];
        Wp(Eo, g, bq + -g.width / 2, Fx.ΔⲆⵠⲆ.y - 26);
      }
    }
    if (b.ⵠⲆᐃᐃⲆ) {
      var i = b.timeout.ᐃⲆⲆ();
      for (var a = 0; a < b.ⵠⵠΔⵠᐃ.length; a++) {
        var j = b.ⵠⵠΔⵠᐃ[a];
        if (j.id == b.id) {
          var k = eq * 42;
          var m = eq * 17;
          yd(Eo, j.info.translate.x, j.info.translate.y + k * (1 - b.timeout.ⵠⵠⲆ), j.info.width, k * b.timeout.ⵠⵠⲆ + m, eq * 10);
          Eo.fillStyle = "#55B973";
          Eo.fill();
          Eo.globalAlpha = 0.8;
          j.ΔⵠᐃⲆ(Eo);
        } else {
          Eo.globalAlpha = 0.5;
          j.ΔⵠᐃⲆ(Eo);
        }
        Eo.globalAlpha = 1;
      }
      if (i) {
        b.ⵠⲆᐃᐃⲆ = fg;
        b.timeout.ⵠⵠⲆ = 0;
        b.timeout.ΔᐃⲆ = false;
      }
      return true;
    }
    for (a = 0; a < b.ⵠⵠΔⵠᐃ.length; a++) {
      b.ⵠⵠΔⵠᐃ[a].ΔⵠᐃⲆ(Eo);
    }
    return false;
  }
  function Mu() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    ΔⲆ = ⲆⲆ[837][Cx.time];
    ᐃᐃΔ = -ΔⲆ.width;
    ᐃΔΔ = -ΔⲆ.height;
    Wp(Eo, ΔⲆ, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
    Eo.restore();
  }
  function Nu() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    ΔⲆ = ⲆⲆ[239][Cx.time];
    ᐃᐃΔ = -ΔⲆ.width;
    ᐃΔΔ = -ΔⲆ.height;
    Wp(Eo, ΔⲆ, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
    Eo.restore();
  }
  function Ou() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    ΔⲆ = ⲆⲆ[848][Cx.time];
    ᐃᐃΔ = -ΔⲆ.width;
    ᐃΔΔ = -ΔⲆ.height;
    Wp(Eo, ΔⲆ, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
    Eo.restore();
  }
  function Pu() {
    var b = Dx.ᐃⵠᐃᐃⲆ;
    var c = Fx.ⵠΔᐃⲆ;
    if (b.ᐃⲆⲆ) {
      b.ᐃⲆⲆ = false;
      var d = b.ᐃⲆⵠΔΔ;
      var f = c.Ⲇᐃ.width;
      var g = c.Ⲇᐃ.height;
      var i = c.Ⲇ;
      var a = Cx.ΔΔΔᐃ;
      var j = Wj;
      i.clearRect(0, 0, f, g);
      i.drawImage(c.ΔⲆ, 0, 0);
      for (var k = 0; k < d.length; k++) {
        var m = a[d[k]];
        if ((Cx.mode !== 1 || m.ⲆⵠΔᐃΔ !== "spectator") && (Cx.mode !== 2 || m.ⵠΔᐃⵠ !== 0)) {
          if (Dx.id == d[k]) {
            j = true;
            if (Cx.mode === 3 && m.ⵠΔᐃⵠ === 0) {
              ᐃᐃ = "#FF0000";
            } else {
              ᐃᐃ = "#FFF";
            }
          } else if (Cx.mode === 3 && m.ⵠΔᐃⵠ === 0) {
            ᐃᐃ = "#990000";
          } else {
            ᐃᐃ = "#A1BDCD";
          }
          i.drawImage(_c(eq, "" + (k + 1), eq * 15, ᐃᐃ), eq * 20, (40 + k * 22) * eq);
          if (!m.ΔΔⵠᐃⵠⵠⲆ) {
            m.ΔΔⵠᐃⵠⵠⲆ = _c(eq, m.ⲆⵠΔᐃΔ, eq * 15, ᐃᐃ, cq, undefined, Ao, undefined, eq * 110);
          }
          i.drawImage(m.ΔΔⵠᐃⵠⵠⲆ, eq * 39, (40 + k * 22) * eq);
          i.drawImage(_c(eq, ΔⵠΔᐃ.ΔΔᐃⵠᐃⵠⵠ(m.ⲆⲆⲆⲆⲆ), eq * 15, ᐃᐃ), eq * 156, eq * (40 + k * 22));
        }
      }
      if (!j) {
        if (Cx.mode === 0 || Cx.mode === 3 || Cx.mode === 4 || Cx.mode === 5 || Cx.mode === 7 || Cx.mode === 1 && !Dx.ⵠⲆⵠᐃΔⲆᐃ || Cx.mode === 2 && !Dx.ⵠᐃⲆⵠᐃ) {
          i.drawImage(ⲆⲆ[306], eq * 15, (46 + k * 22) * eq);
          i.drawImage(_c(eq, ΔⵠΔᐃ.ΔΔᐃⵠᐃⵠⵠ(Cx.ΔΔΔᐃ[Dx.id].ⲆⲆⲆⲆⲆ), eq * 15, "#FFF"), eq * 100, (46 + k * 22) * eq);
        }
      }
    }
    Wp(Eo, c.Ⲇᐃ, c.translate.x, c.translate.y);
  }
  function Qu() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    ΔⲆ = ⲆⲆ[811][Cx.time];
    ᐃᐃΔ = -ΔⲆ.width;
    ᐃΔΔ = -ΔⲆ.height;
    Wp(Eo, ΔⲆ, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
    Eo.restore();
  }
  function Ru(a) {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ == Po) {
        this.ᐃΔⲆΔ.ᐃⲆⲆ = false;
      }
      var b = (1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * Jx * 600 * eq;
      var c = b * Math.sin(this.ᐃΔⲆΔ.angle - this.angle);
      var d = Math.cos(this.ᐃΔⲆΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var f = ⲆⲆ[a][Cx.time];
    ᐃᐃΔ = -f.width;
    ᐃΔΔ = -f.height;
    Wp(Eo, f, -ᐃᐃΔ / 2 + c, -ᐃΔΔ / 2 + d, ᐃᐃΔ, ᐃΔΔ);
    Eo.restore();
  }
  function Su(a) {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ == 0) {
        this.ᐃΔⲆΔ.ᐃⲆⲆ = false;
      }
      var b = eq * ((1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * Jx * 600);
      var c = Math.sin(this.ᐃΔⲆΔ.angle - this.angle) * b;
      var d = Math.cos(this.ᐃΔⲆΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    if (this.ᐃᐃΔΔⵠ.ᐃⲆⲆ()) {
      this.color += 0.2 + Math.random() * 0.3;
    }
    ΔⲆ = ⲆⲆ[872][Math.floor(this.id + this.color) % 5][Cx.time];
    ᐃᐃΔ = -ΔⲆ.width * this.ᐃᐃΔΔⵠ.ⵠⵠⲆ;
    ᐃΔΔ = -ΔⲆ.height * this.ᐃᐃΔΔⵠ.ⵠⵠⲆ;
    Wp(Eo, ΔⲆ, -ᐃᐃΔ / 2 + c, -ᐃΔΔ / 2 + d, ᐃᐃΔ, ᐃΔΔ);
    Eo.restore();
  }
  function Tu(a) {
    if ((a = a / 100) <= 0.8) {
      Eo.save();
      Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
      Eo.rotate(this.angle);
      if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
        if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && ba == this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ) {
          this.ᐃΔⲆΔ.ᐃⲆⲆ = false;
        }
        var b = eq * (Jx * (1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * 600);
        var c = b * Math.sin(this.ᐃΔⲆΔ.angle - this.angle);
        var d = Math.cos(this.ᐃΔⲆΔ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      Eo.globalAlpha = 0.5;
      zd(Eo, c, d, eq * 18, a);
      Td(Eo, null, "#000000", eq * 18);
      Eo.globalAlpha = 1;
      zd(Eo, c, d, eq * 18, a);
      Td(Eo, null, ts.ⵠⵠⲆᐃⵠΔⵠ[Cx.time], eq * 6);
      Eo.restore();
    }
  }
  function Uu() {
    var b = Dx.ᐃᐃⲆⵠΔ;
    if (b.wait) {
      var c = b.timeout.ᐃⲆⲆ();
      Eo.save();
      var d = ⲆⲆ[562];
      var f = ⲆⲆ[537].height + eq * 25;
      Eo.translate(d.width, Fx.ΔⲆⵠⲆ.translate.y - eq * 188 - f);
      var g = -d.width / 2 - 2;
      var h = -d.height / 2 - 4;
      Wp(Eo, d, g + 2, h);
      Eo.beginPath();
      Eo.lineWidth = eq * 5;
      Eo.strokeStyle = ts.ᐃΔⵠΔᐃΔᐃ[Cx.time];
      Eo.lineCap = "round";
      Eo.arc(0, h + d.height / 2, eq * 25, 0, b.timeout.ⵠⵠⲆ * (Math.PI * 2));
      Eo.stroke();
      Eo.restore();
      if (c) {
        b.wait = Rg;
        b.timeout.ⵠⵠⲆ = 0;
        b.timeout.ΔᐃⲆ = false;
      }
    }
  }
  function Vu() {
    var a = Dx.ⲆⵠΔⲆⵠ;
    if (a.wait) {
      var b = a.timeout.ᐃⲆⲆ();
      Eo.save();
      var c = ⲆⲆ[537];
      Eo.translate(c.width - eq * 2, Fx.ΔⲆⵠⲆ.translate.y - eq * 60);
      var d = -c.width / 2 - 2;
      var f = -c.height / 2 - 4;
      Wp(Eo, c, d, f);
      Eo.beginPath();
      Eo.lineWidth = eq * 5;
      Eo.strokeStyle = ts.ᐃΔⵠΔᐃΔᐃ[Cx.time];
      Eo.lineCap = "round";
      Eo.arc(0, f + c.height / 2, eq * 25, 0, Math.PI * 2 * a.timeout.ⵠⵠⲆ);
      Eo.stroke();
      Eo.restore();
      if (b) {
        a.wait = false;
        a.timeout.ⵠⵠⲆ = 0;
        a.timeout.ΔᐃⲆ = Fq;
      }
    }
  }
  function Wu(b) {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ == cr) {
        this.ᐃΔⲆΔ.ᐃⲆⲆ = Ml;
      }
      var c = (1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * Jx * 600 * eq;
      var d = Math.sin(this.ᐃΔⲆΔ.angle - this.angle) * c;
      var f = c * Math.cos(this.ᐃΔⲆΔ.angle - this.angle);
    } else {
      d = 0;
      f = 0;
    }
    var g = ⲆⲆ[853].length;
    ΔⲆ = ⲆⲆ[853][(this.ⲆⵠⲆⲆ + this.ⲆΔ % 2) % g][Cx.time];
    ᐃᐃΔ = -ΔⲆ.width;
    ᐃΔΔ = -ΔⲆ.height;
    var h = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ];
    if (h && (Dx.id === this.ⲆΔⲆΔ || Dx.ⵠᐃᐃΔⲆᐃᐃ(this.ⲆΔⲆΔ))) {
      if (ΔⵠΔᐃ.ΔⵠⲆᐃ(this, h) < 550) {
        this.opacity = Math.max(this.opacity - Jx, 0.3);
      } else {
        this.opacity = Math.min(this.opacity + Jx, 1);
      }
    } else if (h && ΔⵠΔᐃ.ΔⵠⲆᐃ(this, Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ]) < 150) {
      this.opacity = Math.max(this.opacity - Jx, 0.3);
    } else {
      this.opacity = Math.min(this.opacity + Jx, 1);
    }
    var a = Eo.globalAlpha;
    Eo.globalAlpha *= this.opacity;
    Wp(Eo, ΔⲆ, -ᐃᐃΔ / 2 + d, -ᐃΔΔ / 2 + f, ᐃᐃΔ, ᐃΔΔ);
    Eo.globalAlpha = a;
    Eo.restore();
  }
  function Xu(a) {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ == 0) {
        this.ᐃΔⲆΔ.ᐃⲆⲆ = Ja;
      }
      var b = eq * ((1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * Jx * 600);
      var c = b * Math.sin(this.ᐃΔⲆΔ.angle - this.angle);
      var d = b * Math.cos(this.ᐃΔⲆΔ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    ΔⲆ = ⲆⲆ[a][Cx.time];
    ᐃᐃΔ = -ΔⲆ.width;
    ᐃΔΔ = -ΔⲆ.height;
    Wp(Eo, ΔⲆ, -ᐃᐃΔ / 2 + c, -ᐃΔΔ / 2 + d, ᐃᐃΔ, ᐃΔΔ);
    Eo.restore();
  }
  function Yu() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    ΔⲆ = ⲆⲆ[321][Cx.time];
    ᐃᐃΔ = -ΔⲆ.width;
    ᐃΔΔ = -ΔⲆ.height;
    Wp(Eo, ΔⲆ, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
    Eo.restore();
  }
  function Zu() {
    Eo.save();
    var a = eq;
    if (Dx.ΔⲆⵠⲆ.ⵠⲆΔⲆⵠ.x < 0.25) {
      Eo.globalAlpha = Dx.ΔⲆⵠⲆ.ΔᐃⲆⵠⵠⲆⵠ.ⵠⵠⲆ;
    }
    var b = Dx.ᐃᐃᐃΔ.ΔⲆⲆΔΔ.length > 0 ? -70 : 0;
    if (Dx.ΔᐃⵠΔ.open || Dx.ᐃⲆⲆΔᐃ.open && Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(109) != -1 || Dx.ⵠⵠᐃᐃ.open && Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(134) != -1 || Dx.ⵠᐃⵠⵠ.open && Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(109) != -1 || Dx.ΔΔᐃᐃⲆ.open && Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(180) != -1 || Dx.ⲆⵠᐃⲆ.open && (Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(109) != -1 || Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(131) != -1)) {
      b -= eq * 50;
    }
    Eo.translate((Qo - eq * 950) / 2, b);
    Eo.fillStyle = "#69A148";
    Eo.fillRect(this.translate.x + eq * 37, this.translate.y + eq * 17, Dx.ΔⲆⵠⲆ.ⵠⲆΔⲆⵠ.x * 178 * eq, eq * 18);
    Eo.globalAlpha = 1;
    if (Dx.ΔⲆⵠⲆ.ᐃᐃⵠΔᐃᐃⲆ.x < 0.35) {
      Eo.fillStyle = "#8F050A";
      Eo.globalAlpha = Dx.ΔⲆⵠⲆ.ⵠᐃⵠᐃᐃΔΔ.ⵠⵠⲆ;
      Eo.fillRect(this.translate.x + eq * 277, this.translate.y + eq * 17, eq * 178, eq * 18);
      Eo.globalAlpha = 1;
    }
    Eo.fillStyle = "#AF352A";
    Eo.fillRect(this.translate.x + eq * 277, this.translate.y + eq * 17, Dx.ΔⲆⵠⲆ.ᐃᐃⵠΔᐃᐃⲆ.x * 178 * eq, eq * 18);
    if (Dx.ΔⲆⵠⲆ.ⵠⵠΔⵠⵠ.x < 0.35) {
      Eo.fillStyle = "#366B91";
      Eo.globalAlpha = Dx.ΔⲆⵠⲆ.ⵠⲆⵠⵠⲆⲆΔ.ⵠⵠⲆ;
      Eo.fillRect(this.translate.x + eq * 517, this.translate.y + eq * 17, eq * 178, eq * 18);
      Eo.globalAlpha = 1;
    }
    Eo.fillStyle = "#669BB1";
    Eo.fillRect(this.translate.x + eq * 517, this.translate.y + eq * 17, Dx.ΔⲆⵠⲆ.ⵠⵠΔⵠⵠ.x * 178 * eq, eq * 18);
    if (Dx.ΔⲆⵠⲆ.ⵠⵠΔⵠⵠ.x > 0.99) {
      if (Dx.ΔⲆⵠⲆ.ᐃΔᐃΔΔ.x < 0.35) {
        Eo.fillStyle = "#6C4036";
        Eo.globalAlpha = Dx.ΔⲆⵠⲆ.ⵠⲆᐃᐃᐃΔΔ.ⵠⵠⲆ;
        Eo.fillRect(this.translate.x + eq * 517, this.translate.y + eq * 17, eq * 178, eq * 18);
        Eo.globalAlpha = 1;
      }
      Eo.fillStyle = "#9C4036";
      Eo.fillRect(this.translate.x + eq * 517, this.translate.y + eq * 17, eq * ((1 - Dx.ΔⲆⵠⲆ.ᐃΔᐃΔΔ.x) * 178), eq * 18);
    }
    if (Dx.ΔⲆⵠⲆ.ⵠΔᐃᐃⲆⲆⵠ.x < 0.35) {
      Eo.fillStyle = "#001A57";
      Eo.globalAlpha = Dx.ΔⲆⵠⲆ.ΔᐃΔᐃᐃⲆᐃ.ⵠⵠⲆ;
      Eo.fillRect(this.translate.x + eq * 757, this.translate.y + eq * 17, eq * 178, eq * 18);
      Eo.globalAlpha = 1;
    }
    Eo.fillStyle = "#074A87";
    Eo.fillRect(this.translate.x + eq * 757, this.translate.y + eq * 17, Dx.ΔⲆⵠⲆ.ⵠΔᐃᐃⲆⲆⵠ.x * 178 * eq, eq * 18);
    eq = a;
    Wp(Eo, this.ΔⲆ, this.translate.x, this.translate.y);
    this.y = this.translate.y + b;
    Eo.restore();
    if (Dx.ΔⲆⵠⲆ.ⲆⵠⲆΔΔΔᐃ.x < 0.99) {
      var c = Math.floor(bq - ⲆⲆ[608].width / 2);
      b += this.translate.y - ⲆⲆ[608].height - eq * 5;
      Eo.fillStyle = "#BBE8EF";
      Eo.fillRect(c + 5, b + eq * 5, eq * 588 * Dx.ΔⲆⵠⲆ.ⲆⵠⲆΔΔΔᐃ.x, eq * 10);
      if (Dx.ΔⲆⵠⲆ.ⲆⵠⲆΔΔΔᐃ.x < 0.35) {
        Eo.fillStyle = "#9BA8AF";
        Eo.globalAlpha = Dx.ΔⲆⵠⲆ.ΔⵠΔᐃⵠⵠᐃ.ⵠⵠⲆ;
        Eo.fillRect(c + 5, b + 5, eq * 588, eq * 10);
        Eo.globalAlpha = 1;
      }
      Wp(Eo, ⲆⲆ[608], c, b);
      this.y = b;
    }
  }
  function $u(b) {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ == tg) {
        this.ᐃΔⲆΔ.ᐃⲆⲆ = false;
      }
      var c = Jx * (1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * 600 * eq;
      var d = Math.sin(this.ᐃΔⲆΔ.angle - this.angle) * c;
      var f = Math.cos(this.ᐃΔⲆΔ.angle - this.angle) * c;
    } else {
      d = 0;
      f = 0;
    }
    if (b === 913 && !Cx.transition) {
      var g = 0;
      for (var h = Cx.ⲆΔⵠ[0], a = 0; a < h.length; a++) {
        var i = ΔⵠΔᐃ.ΔⵠⲆᐃ(h[a], this);
        if (i < 140 && i > 35) {
          g = 0;
          break;
        }
        if (i <= 35) {
          g = 1;
        }
      }
      this.opacity = g === 0 ? Math.max(0.5, this.opacity - Jx / 1.5) : Math.min(1, this.opacity + Jx / 1.5);
      Eo.globalAlpha = this.opacity;
    }
    ΔⲆ = ⲆⲆ[b][Cx.time];
    ᐃᐃΔ = -ΔⲆ.width;
    ᐃΔΔ = -ΔⲆ.height;
    Wp(Eo, ΔⲆ, -ᐃᐃΔ / 2 + d, -ᐃΔΔ / 2 + f, ᐃᐃΔ, ᐃΔΔ);
    Eo.globalAlpha = 1;
    Eo.restore();
  }
  function _u() {
    var a = Dx.ⵠΔⵠⵠ;
    if (a.ⵠⲆᐃᐃⲆ) {
      var b = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ];
      Eo.save();
      Eo.translate(Dx.ᐃΔᐃⲆ.x + b.x, Dx.ᐃΔᐃⲆ.y + b.y);
      var c = ⲆⲆ[324];
      var d = -c.width / 2;
      var f = -c.height / 2 - eq * 125;
      Wp(Eo, c, d, f);
      Eo.beginPath();
      Eo.lineWidth = eq * 5;
      Eo.strokeStyle = ts.ⵠᐃᐃΔΔⲆⲆ[Cx.time];
      Eo.lineCap = "round";
      Eo.arc(0, f + c.height / 2, eq * 25, 0, Math.PI * 2 * a.timeout.ⵠⵠⲆ);
      Eo.stroke();
      Eo.restore();
    }
  }
  function av(a) {
    if ((a = a / 100) <= 0.95) {
      Eo.save();
      Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
      Eo.rotate(this.angle);
      if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
        if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ == 0) {
          this.ᐃΔⲆΔ.ᐃⲆⲆ = ol;
        }
        var b = Jx * (1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * 600 * eq;
        var c = b * Math.sin(this.ᐃΔⲆΔ.angle - this.angle);
        var d = Math.cos(this.ᐃΔⲆΔ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      Eo.globalAlpha = 0.5;
      zd(Eo, c, d, eq * 28, a);
      Td(Eo, null, "#000000", eq * 18);
      Eo.globalAlpha = 1;
      zd(Eo, c, d, eq * 28, a);
      Td(Eo, null, ts.ⵠᐃᐃΔΔⲆⲆ[Cx.time], eq * 6);
      Eo.restore();
    }
  }
  function bv() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ == 0) {
        this.ᐃΔⲆΔ.ᐃⲆⲆ = false;
      }
      var a = eq * (Jx * (1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * 600);
      var b = a * Math.sin(this.ᐃΔⲆΔ.angle - this.angle);
      var c = a * Math.cos(this.ᐃΔⲆΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    ΔⲆ = ⲆⲆ[167][Cx.time];
    ᐃᐃΔ = -ΔⲆ.width;
    ᐃΔΔ = -ΔⲆ.height;
    Wp(Eo, ΔⲆ, -ᐃᐃΔ / 2 + b, -ᐃΔΔ / 2 + c, ᐃᐃΔ, ᐃΔΔ);
    if (this.lock) {
      ΔⲆ = ⲆⲆ[148][Cx.time];
      ᐃᐃΔ = -ΔⲆ.width;
      ᐃΔΔ = -ΔⲆ.height;
      Wp(Eo, ΔⲆ, -ᐃᐃΔ / 2 + b - eq * 1, -ᐃΔΔ / 2 + c, ᐃᐃΔ, ᐃΔΔ);
    }
    Eo.restore();
  }
  function cv() {
    var a = Dx.ⲆΔⵠΔⵠ;
    if (a.wait) {
      var b = a.timeout.ᐃⲆⲆ();
      Eo.save();
      var c = ⲆⲆ[792];
      Eo.translate(c.width - eq * 2, Fx.ΔⲆⵠⲆ.translate.y - eq * 125);
      var d = -c.width / 2 + 10;
      var f = -c.height / 2 - 4;
      Wp(Eo, c, d, f);
      Eo.beginPath();
      Eo.lineWidth = eq * 5;
      Eo.strokeStyle = ts.ⲆᐃⵠⲆᐃⵠⲆ[Cx.time];
      Eo.lineCap = "round";
      Eo.arc(9, f + c.height / 2, eq * 25, 0, Math.PI * 2 * a.timeout.ⵠⵠⲆ);
      Eo.stroke();
      Eo.restore();
      if (b) {
        a.wait = ir;
        a.timeout.ⵠⵠⲆ = 0;
        a.timeout.ΔᐃⲆ = ol;
      }
    }
  }
  function dv() {
    var a = Dx.ⲆⲆⲆᐃⲆ;
    if (a.wait) {
      var b = a.timeout.ᐃⲆⲆ();
      Eo.save();
      var c = ⲆⲆ[794];
      Eo.translate(c.width - eq * 12, Fx.ΔⲆⵠⲆ.translate.y - eq * 190);
      var d = -c.width / 2 + 9;
      var f = -c.height / 2 - 4;
      Wp(Eo, c, d, f);
      Eo.beginPath();
      Eo.lineWidth = eq * 5;
      Eo.strokeStyle = ts.ⲆᐃⵠⲆᐃⵠⲆ[Cx.time];
      Eo.lineCap = "round";
      Eo.arc(9, f + c.height / 2, eq * 25, 0, Math.PI * 2 * a.timeout.ⵠⵠⲆ);
      Eo.stroke();
      Eo.restore();
      if (b) {
        a.wait = Po;
        a.timeout.ⵠⵠⲆ = 0;
        a.timeout.ΔᐃⲆ = false;
      }
    }
  }
  var ev = 0;
  function fv() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ == 0) {
        this.ᐃΔⲆΔ.ᐃⲆⲆ = Ee;
      }
      var b = (1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * Jx * 600 * eq;
      var c = Math.sin(this.ᐃΔⲆΔ.angle - this.angle) * b;
      var d = b * Math.cos(this.ᐃΔⲆΔ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
      f = ⲆⲆ[716][Cx.time];
      Wp(Eo, f, -f.width / 2 + c, -f.height / 2 + d);
      this.up.ᐃⲆⲆ();
      var f = ⲆⲆ[720][Cx.time];
      var g = this.up.ⵠⵠⲆ * -f.width;
      var h = this.up.ⵠⵠⲆ * -f.height;
      Wp(Eo, f, -g / 2 + eq * 1, -h / 2 + eq * 3, g, h);
    } else {
      f = ⲆⲆ[144][Cx.time];
      Wp(Eo, f, -f.width / 2 + c, -f.height / 2 + d);
    }
    Eo.restore();
  }
  function gv() {
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && fg == this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ) {
        this.ᐃΔⲆΔ.ᐃⲆⲆ = ul;
      }
      var a = eq * (Jx * (1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * 600);
      var b = Math.sin(this.ᐃΔⲆΔ.angle - this.angle) * a;
      var c = Math.cos(this.ᐃΔⲆΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    Eo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x + b, Dx.ᐃΔᐃⲆ.y + this.y + c);
    Eo.rotate(this.angle);
    ΔⲆ = ⲆⲆ[153][Cx.time];
    Wp(Eo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Jx * 3) % (Math.PI * 2);
    }
    Eo.rotate(this.rotate);
    ΔⲆ = ⲆⲆ[1198][Cx.time];
    Wp(Eo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
    Eo.restore();
  }
  function hv() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    if (ΔⵠΔᐃ.ΔⵠⲆᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Jx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Jx, 1);
    }
    this.ⵠⵠⲆΔ.ᐃⲆⲆ();
    this.rotate.ᐃⲆⲆ();
    a = this.info === 0 ? ⲆⲆ[233][Cx.time] : ⲆⲆ[1083][Cx.time];
    ᐃᐃΔ = this.scale * (this.ⵠⵠⲆΔ.ⵠⵠⲆ * -a.width);
    ᐃΔΔ = this.scale * (-a.height * this.ⵠⵠⲆΔ.ⵠⵠⲆ);
    Wp(Eo, a, -ᐃᐃΔ / 4, -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
    if (this.action & 2) {
      if (this.ᐃΔⲆΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃⲆ == fl) {
        this.action -= 2;
      }
      Eo.globalAlpha = 0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ;
      var a = ⲆⲆ[1092];
      Wp(Eo, a, -ᐃᐃΔ / 4, -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
      Eo.globalAlpha = 1;
    }
    a = this.info === 0 ? ⲆⲆ[1087][Cx.time] : ⲆⲆ[1086][Cx.time];
    ᐃᐃΔ = this.ⵠⵠⲆΔ.ⵠⵠⲆ * -a.width * this.scale;
    ᐃΔΔ = this.scale * (this.ⵠⵠⲆΔ.ⵠⵠⲆ * -a.height);
    Eo.save();
    Eo.translate(eq * -40, eq * 10);
    Eo.rotate(this.rotate.ⵠⵠⲆ);
    Wp(Eo, a, -ᐃᐃΔ * eq / 4, -ᐃΔΔ * eq / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
    if (this.action & 2) {
      Eo.globalAlpha = 0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ;
      a = ⲆⲆ[1093];
      Wp(Eo, a, eq * -ᐃᐃΔ / 4, eq * -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
      Eo.globalAlpha = 1;
    }
    Eo.restore();
    a = this.info === 0 ? ⲆⲆ[1090][Cx.time] : ⲆⲆ[1089][Cx.time];
    Eo.save();
    Eo.translate(eq * 40, eq * 10);
    Eo.rotate(-this.rotate.ⵠⵠⲆ);
    Wp(Eo, a, eq * -ᐃᐃΔ / 4, -ᐃΔΔ * eq / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
    if (this.action & 2) {
      Eo.globalAlpha = 0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ;
      a = ⲆⲆ[1094];
      Wp(Eo, a, -ᐃᐃΔ * eq / 4, eq * -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
      Eo.globalAlpha = 1;
    }
    Eo.restore();
    Eo.restore();
  }
  function iv(a, b) {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    if (a === 854) {
      a = 250;
      this.info = 36;
    }
    ΔⲆ = ⲆⲆ[a][this.info][Cx.time];
    ᐃᐃΔ = -ΔⲆ.width / 2;
    ᐃΔΔ = -ΔⲆ.height / 2;
    Wp(Eo, ΔⲆ, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
    if (this.action & 2) {
      if (this.ᐃΔⲆΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃⲆ == 0) {
        this.action -= 2;
      }
      Eo.globalAlpha = 0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ;
      var c = jw(this.info, ΔⲆ, ⲆᐃᐃᐃⲆΔⲆΔⲆ);
      Wp(Eo, c, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
      Eo.globalAlpha = 1;
    }
    Eo.restore();
  }
  function jv() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    this.ΔΔᐃⲆᐃ.ᐃⲆⲆ();
    ΔⲆ = ⲆⲆ[288][Cx.time];
    ᐃᐃΔ = this.ΔΔᐃⲆᐃ.ⵠⵠⲆ * -ΔⲆ.width;
    ᐃΔΔ = this.ΔΔᐃⲆᐃ.ⵠⵠⲆ * -ΔⲆ.height;
    Wp(Eo, ΔⲆ, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
    this.ᐃᐃΔΔⵠ.ᐃⲆⲆ();
    ΔⲆ = ⲆⲆ[289][Cx.time];
    ᐃᐃΔ = -ΔⲆ.width * this.ᐃᐃΔΔⵠ.ⵠⵠⲆ;
    ᐃΔΔ = this.ᐃᐃΔΔⵠ.ⵠⵠⲆ * -ΔⲆ.height;
    Wp(Eo, ΔⲆ, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
    Eo.restore();
  }
  function kv() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ == 0) {
        this.ᐃΔⲆΔ.ᐃⲆⲆ = false;
      }
      var a = eq * ((1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * Jx * 600);
      var b = Math.sin(this.ᐃΔⲆΔ.angle - this.angle) * a;
      var c = Math.cos(this.ᐃΔⲆΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    if (this.info === 0) {
      ΔⲆ = ⲆⲆ[183][Cx.time];
    } else {
      ΔⲆ = ⲆⲆ[802][Cx.time][this.info - 1];
    }
    Wp(Eo, ΔⲆ, -ΔⲆ.width / 2 + b, -ΔⲆ.height / 2 + c);
    Eo.restore();
  }
  function lv(a, b, c) {
    if (a >= 0) {
      ΔⲆ = ⲆⲆ[a][Cx.time];
      switch (a) {
        case 71:
        case 72:
        case 73:
          Cw(a, ΔⲆ, -ΔⲆ.width / 4 - (0 + b) * eq, -ΔⲆ.height / 4 + eq * (c + 35));
          break;
        case 74:
          Cw(a, ΔⲆ, -ΔⲆ.width / 4 - eq * (1 + b), -ΔⲆ.height / 4 + eq * (c + 45));
          break;
        case 75:
        case 76:
          Cw(a, ΔⲆ, -ΔⲆ.width / 4 - eq * (1 + b), -ΔⲆ.height / 4 + (c + 40) * eq);
      }
    }
  }
  function mv() {
    if (this.info !== 10) {
      Eo.save();
      Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
      Eo.rotate(this.angle);
      if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
        if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ == 0) {
          this.ᐃΔⲆΔ.ᐃⲆⲆ = fl;
        }
        var b = eq * (Jx * (1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * 600);
        var c = b * Math.sin(this.ᐃΔⲆΔ.angle - this.angle);
        var d = b * Math.cos(this.ᐃΔⲆΔ.angle - this.angle);
      } else {
        c = 0;
        d = 0;
      }
      if (this.info & 16) {
        var f = ⲆⲆ[623][Cx.time];
      } else {
        f = ⲆⲆ[287][Cx.time];
      }
      Wp(Eo, f, -f.width / 2 + c, -f.width / 2 + d);
      Eo.restore();
      for (var g = this.info & 15, h = 0; g > h; h++) {
        this.ΔΔΔⲆ[h].ΔⵠᐃⲆ(294);
      }
    }
  }
  function nv() {
    if (this.info >= 10) {
      Eo.save();
      Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
      Eo.rotate(this.angle);
      if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
        if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && x == this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ) {
          this.ᐃΔⲆΔ.ᐃⲆⲆ = uh;
        }
        var b = eq * (Jx * (1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * 600);
        var c = Math.sin(this.ᐃΔⲆΔ.angle - this.angle) * b;
        var d = b * Math.cos(this.ᐃΔⲆΔ.angle - this.angle);
      } else {
        c = 0;
        d = 0;
      }
      this.ΔΔᐃΔ.ᐃⲆⲆ();
      var f = ⲆⲆ[115][Cx.time];
      var g = -f.width * this.ΔΔᐃΔ.ⵠⵠⲆ;
      var h = this.ΔΔᐃΔ.ⵠⵠⲆ * -f.height;
      Wp(Eo, f, -g / 2 + c, -h / 2 + d, g, h);
      Eo.restore();
    }
  }
  function ov() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && Fq == this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ) {
        this.ᐃΔⲆΔ.ᐃⲆⲆ = false;
      }
      var b = eq * (Jx * (1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * 600);
      var c = b * Math.sin(this.ᐃΔⲆΔ.angle - this.angle);
      var d = Math.cos(this.ᐃΔⲆΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var f = this.info & 15;
    if (this.info === 10 || f === 0) {
      Eo.rotate(this.angle);
      this.ΔΔᐃΔ.ᐃⲆⲆ();
      if (this.info & 16) {
        var g = ⲆⲆ[849][Cx.time];
      } else {
        g = ⲆⲆ[193][Cx.time];
      }
      var h = this.ΔΔᐃΔ.ⵠⵠⲆ * -g.width;
      var a = this.ΔΔᐃΔ.ⵠⵠⲆ * -g.height;
      Wp(Eo, g, -h / 2 + c, -a / 2 + d, h, a);
    } else {
      if (this.info & 16) {
        g = ⲆⲆ[869][Cx.time];
      } else {
        g = ⲆⲆ[194][Cx.time];
      }
      Eo.translate(0, g.height / 2);
      Wp(Eo, g, c - g.width / 2, -g.height + d);
    }
    Eo.restore();
  }
  function pv() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    this.ᐃᐃΔΔⵠ.ᐃⲆⲆ();
    ΔⲆ = ⲆⲆ[289][Cx.time];
    ᐃᐃΔ = -ΔⲆ.width * this.ᐃᐃΔΔⵠ.ⵠⵠⲆ;
    ᐃΔΔ = this.ᐃᐃΔΔⵠ.ⵠⵠⲆ * -ΔⲆ.height;
    Wp(Eo, ΔⲆ, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
    Eo.restore();
  }
  function qv() {
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ == Ml) {
        this.ᐃΔⲆΔ.ᐃⲆⲆ = ns;
      }
      var a = eq * ((1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * Jx * 600);
      var b = a * Math.sin(this.ᐃΔⲆΔ.angle - this.angle);
      var c = a * Math.cos(this.ᐃΔⲆΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x + b, Dx.ᐃΔᐃⲆ.y + this.y + c);
    Eo.rotate(this.angle);
    ΔⲆ = ⲆⲆ[135][Cx.time];
    Wp(Eo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
    Eo.restore();
  }
  function rv() {
    var a = Math.PI / 2;
    var b = Math.PI / 4;
    this.ⵠⵠⲆΔ.ᐃⲆⲆ();
    this.ᐃᐃᐃⲆⲆⵠⵠ.ᐃⲆⲆ();
    this.ΔⵠⵠΔⵠΔᐃ.ᐃⲆⲆ();
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    c = this.info === 0 ? ⲆⲆ[231][Cx.time] : ⲆⲆ[1053][Cx.time];
    ᐃᐃΔ = this.ⵠⵠⲆΔ.ⵠⵠⲆ * -c.width;
    ᐃΔΔ = this.ⵠⵠⲆΔ.ⵠⵠⲆ * -c.height;
    Wp(Eo, c, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
    if (this.action & 2) {
      if (this.ᐃΔⲆΔ.ᐃⲆⲆ() && Ee == this.ᐃΔⲆΔ.ΔᐃⲆ) {
        this.action -= 2;
      }
      Eo.globalAlpha = 0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ;
      var c = ⲆⲆ[1056];
      Wp(Eo, c, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
      Eo.globalAlpha = 1;
    }
    if (this.action & 4) {
      if (this.ᐃᐃΔⲆⲆ.ᐃⲆⲆ() && this.ᐃᐃΔⲆⲆ.ΔᐃⲆ == cr) {
        this.action -= 4;
      }
      Eo.globalAlpha = 0.6 - this.ᐃᐃΔⲆⲆ.ⵠⵠⲆ;
      c = ⲆⲆ[1065];
      Wp(Eo, c, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
      Eo.globalAlpha = 1;
    }
    Eo.restore();
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle + b);
    Eo.translate(100, 0);
    Eo.rotate(a);
    c = this.info === 0 ? ⲆⲆ[1060][Cx.time] : ⲆⲆ[1059][Cx.time];
    ᐃᐃΔ = -c.width * this.ᐃᐃᐃⲆⲆⵠⵠ.ⵠⵠⲆ;
    ᐃΔΔ = -c.height * this.ᐃᐃᐃⲆⲆⵠⵠ.ⵠⵠⲆ;
    Wp(Eo, c, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
    if (this.action & 2) {
      Eo.globalAlpha = 0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ;
      c = ⲆⲆ[1057];
      Wp(Eo, c, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
      Eo.globalAlpha = 1;
    }
    if (this.action & 4) {
      Eo.globalAlpha = 0.6 - this.ᐃᐃΔⲆⲆ.ⵠⵠⲆ;
      c = ⲆⲆ[1066];
      Wp(Eo, c, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
      Eo.globalAlpha = 1;
    }
    Eo.restore();
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle + a + b);
    Eo.translate(100, 0);
    Eo.rotate(a);
    c = this.info === 0 ? ⲆⲆ[1063][Cx.time] : ⲆⲆ[1062][Cx.time];
    ᐃᐃΔ = this.ΔⵠⵠΔⵠΔᐃ.ⵠⵠⲆ * -c.width;
    ᐃΔΔ = this.ΔⵠⵠΔⵠΔᐃ.ⵠⵠⲆ * -c.height;
    Wp(Eo, c, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
    if (this.action & 2) {
      Eo.globalAlpha = 0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ;
      c = ⲆⲆ[1058];
      Wp(Eo, c, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
      Eo.globalAlpha = 1;
    }
    if (this.action & 4) {
      Eo.globalAlpha = 0.6 - this.ᐃᐃΔⲆⲆ.ⵠⵠⲆ;
      c = ⲆⲆ[1067];
      Wp(Eo, c, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
      Eo.globalAlpha = 1;
    }
    Eo.restore();
  }
  function sv() {
    if (this.info !== 10) {
      for (var b = this.info & 15, c = 0; c < b; c++) {
        this.ΔΔΔⲆ[c].ΔⵠᐃⲆ(207, this.x, this.y);
      }
      Eo.save();
      Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
      Eo.rotate(this.angle);
      if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
        if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && Po == this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ) {
          this.ᐃΔⲆΔ.ᐃⲆⲆ = Ee;
        }
        var d = eq * ((1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * Jx * 600);
        var f = Math.sin(this.ᐃΔⲆΔ.angle - this.angle) * d;
        var g = Math.cos(this.ᐃΔⲆΔ.angle - this.angle) * d;
      } else {
        f = 0;
        g = 0;
      }
      if (this.info & 16) {
        var h = ⲆⲆ[958][Cx.time];
      } else {
        h = ⲆⲆ[957][Cx.time];
      }
      Wp(Eo, h, -h.width / 2 + f, -h.width / 2 + g);
      Eo.restore();
    }
  }
  function tv() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    var a = ΔⵠΔᐃ.ΔⵠⲆᐃ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + Jx / 2, 1.8) : Math.max(this.scale - Jx, 1);
    this.ⵠⵠⲆΔ.ᐃⲆⲆ();
    this.rotate.ᐃⲆⲆ();
    this.ΔⵠΔΔ = a < 350 ? Math.max(0, this.ΔⵠΔΔ - Jx * 2.2) : Math.min(1, this.ΔⵠΔΔ + Jx * 2.2);
    b = this.info & 1 ? ⲆⲆ[1114][Cx.time] : ⲆⲆ[1113][Cx.time];
    ᐃᐃΔ = -b.width * this.ⵠⵠⲆΔ.ⵠⵠⲆ * this.scale;
    ᐃΔΔ = -b.height * this.ⵠⵠⲆΔ.ⵠⵠⲆ * this.scale;
    Eo.globalAlpha = 1 - this.ΔⵠΔΔ;
    Wp(Eo, b, -ᐃᐃΔ / 4, -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
    b = this.info & 1 ? ⲆⲆ[1098][Cx.time] : ⲆⲆ[235][Cx.time];
    ᐃᐃΔ = this.ⵠⵠⲆΔ.ⵠⵠⲆ * -b.width * this.scale;
    ᐃΔΔ = this.scale * (this.ⵠⵠⲆΔ.ⵠⵠⲆ * -b.height);
    Eo.globalAlpha = this.ΔⵠΔΔ;
    Wp(Eo, b, -ᐃᐃΔ / 4, -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
    if (this.action & 2) {
      if (this.ᐃΔⲆΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃⲆ == fg) {
        this.action -= 2;
      }
      Eo.globalAlpha = (0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ) * (1 - this.ΔⵠΔΔ);
      var b = ⲆⲆ[1115];
      ᐃᐃΔ = this.ⵠⵠⲆΔ.ⵠⵠⲆ * -b.width * this.scale;
      ᐃΔΔ = this.scale * (this.ⵠⵠⲆΔ.ⵠⵠⲆ * -b.height);
      Wp(Eo, b, -ᐃᐃΔ / 4, -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
      Eo.globalAlpha = (0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ) * this.ΔⵠΔΔ;
      b = ⲆⲆ[1107];
      ᐃᐃΔ = -b.width * this.ⵠⵠⲆΔ.ⵠⵠⲆ * this.scale;
      ᐃΔΔ = this.scale * (this.ⵠⵠⲆΔ.ⵠⵠⲆ * -b.height);
      Wp(Eo, b, -ᐃᐃΔ / 4, -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
      Eo.globalAlpha = 1;
    }
    b = this.info & 1 ? ⲆⲆ[1101][Cx.time] : ⲆⲆ[1102][Cx.time];
    ᐃᐃΔ = -b.width * this.ⵠⵠⲆΔ.ⵠⵠⲆ * this.scale;
    ᐃΔΔ = this.ⵠⵠⲆΔ.ⵠⵠⲆ * -b.height * this.scale;
    Eo.save();
    Eo.translate(eq * -20, eq * 0);
    Eo.rotate(this.rotate.ⵠⵠⲆ);
    Eo.globalAlpha = this.ΔⵠΔΔ;
    Wp(Eo, b, eq * -ᐃᐃΔ / 4, eq * -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
    if (this.action & 2) {
      Eo.globalAlpha = (0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ) * this.ΔⵠΔΔ;
      b = ⲆⲆ[1108];
      Wp(Eo, b, eq * -ᐃᐃΔ / 4, eq * -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
      Eo.globalAlpha = 1;
    }
    Eo.restore();
    b = this.info & 1 ? ⲆⲆ[1104][Cx.time] : ⲆⲆ[1105][Cx.time];
    Eo.save();
    Eo.translate(eq * 20, eq * 0);
    Eo.rotate(-this.rotate.ⵠⵠⲆ);
    Eo.globalAlpha = this.ΔⵠΔΔ;
    Wp(Eo, b, eq * -ᐃᐃΔ / 4, eq * -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
    if (this.action & 2) {
      Eo.globalAlpha = this.ΔⵠΔΔ * (0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ);
      b = ⲆⲆ[1109];
      Wp(Eo, b, -ᐃᐃΔ * eq / 4, -ᐃΔΔ * eq / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
      Eo.globalAlpha = 1;
    }
    Eo.globalAlpha = 1;
    Eo.restore();
    Eo.restore();
  }
  function uv() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ == 0) {
        this.ᐃΔⲆΔ.ᐃⲆⲆ = false;
      }
      var b = Jx * (1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * 600 * eq;
      var c = Math.sin(this.ᐃΔⲆΔ.angle - this.angle) * b;
      var d = b * Math.cos(this.ᐃΔⲆΔ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var f = this.info & 15;
    if (this.info === 10 || f === 0) {
      Eo.rotate(this.angle);
      this.ΔΔᐃΔ.ᐃⲆⲆ();
      if (this.info & 16) {
        var g = ⲆⲆ[812][Cx.time];
      } else {
        g = ⲆⲆ[188][Cx.time];
      }
      var h = this.ΔΔᐃΔ.ⵠⵠⲆ * -g.width;
      var a = -g.height * this.ΔΔᐃΔ.ⵠⵠⲆ;
      Wp(Eo, g, -h / 2 + c, -a / 2 + d, h, a);
    } else {
      if (this.info & 16) {
        g = ⲆⲆ[813][Cx.time];
      } else {
        g = ⲆⲆ[189][Cx.time];
      }
      Eo.translate(0, g.height / 2);
      Wp(Eo, g, c - g.width / 2, -g.height + d);
    }
    Eo.restore();
  }
  function vv(a) {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    this.ⵠⵠⲆΔ.ᐃⲆⲆ();
    ΔⲆ = ⲆⲆ[a][Cx.time];
    ᐃᐃΔ = this.ⵠⵠⲆΔ.ⵠⵠⲆ * -ΔⲆ.width;
    ᐃΔΔ = -ΔⲆ.height * this.ⵠⵠⲆΔ.ⵠⵠⲆ;
    Wp(Eo, ΔⲆ, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
    Eo.restore();
  }
  function wv() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && cr == this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ) {
        this.ᐃΔⲆΔ.ᐃⲆⲆ = false;
      }
      var b = eq * (Jx * (1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * 600);
      var c = Math.sin(this.ᐃΔⲆΔ.angle - this.angle) * b;
      var d = b * Math.cos(this.ᐃΔⲆΔ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var f = this.info & 15;
    if (this.info === 10 || f === 0) {
      Eo.rotate(this.angle);
      this.ΔΔᐃΔ.ᐃⲆⲆ();
      if (this.info & 16) {
        var g = ⲆⲆ[838][Cx.time];
      } else {
        g = ⲆⲆ[191][Cx.time];
      }
      var h = this.ΔΔᐃΔ.ⵠⵠⲆ * -g.width;
      var a = -g.height * this.ΔΔᐃΔ.ⵠⵠⲆ;
      Wp(Eo, g, -h / 2 + c, -a / 2 + d, h, a);
    } else {
      if (this.info & 16) {
        g = ⲆⲆ[839][Cx.time];
      } else {
        g = ⲆⲆ[192][Cx.time];
      }
      Eo.translate(0, g.height / 2);
      Wp(Eo, g, c - g.width / 2, -g.height + d);
    }
    Eo.restore();
  }
  function xv() {
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      var a = eq * (Jx * (1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * 600);
      var b = Math.sin(this.ᐃΔⲆΔ.angle - this.angle) * a;
      var c = Math.cos(this.ᐃΔⲆΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Jx * 0.5) % (Math.PI * 2);
    }
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x + b, Dx.ᐃΔᐃⲆ.y + this.y + c);
    Eo.save();
    Eo.rotate(this.rotate);
    ΔⲆ = ⲆⲆ[641][Cx.time];
    Wp(Eo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
    Eo.restore();
    Eo.save();
    Eo.rotate(this.ᐃΔΔⲆΔᐃΔᐃⵠ);
    ΔⲆ = ⲆⲆ[642][Cx.time];
    Wp(Eo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
    Eo.restore();
    Eo.restore();
  }
  function yv() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    if (ΔⵠΔᐃ.ΔⵠⲆᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Jx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Jx, 1);
    }
    this.ⵠⵠⲆΔ.ᐃⲆⲆ();
    this.rotate.ᐃⲆⲆ();
    a = ⲆⲆ[449][Cx.time];
    ᐃᐃΔ = this.ⵠⵠⲆΔ.ⵠⵠⲆ * -a.width * this.scale;
    ᐃΔΔ = this.ⵠⵠⲆΔ.ⵠⵠⲆ * -a.height * this.scale;
    Wp(Eo, a, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
    if (this.action & 2) {
      if (this.ᐃΔⲆΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃⲆ == x) {
        this.action -= 2;
      }
      Eo.globalAlpha = 0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ;
      var a = ⲆⲆ[463];
      Wp(Eo, a, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
      Eo.globalAlpha = 1;
    }
    a = ⲆⲆ[451][Cx.time];
    ᐃᐃΔ = this.ⵠⵠⲆΔ.ⵠⵠⲆ * -a.width * this.scale;
    ᐃΔΔ = this.scale * (this.ⵠⵠⲆΔ.ⵠⵠⲆ * -a.height);
    Eo.save();
    Eo.translate(eq * -30, eq * 70);
    Eo.rotate(this.rotate.ⵠⵠⲆ);
    Wp(Eo, a, eq * -10, eq * -40, ᐃᐃΔ, ᐃΔΔ);
    if (this.action & 2) {
      Eo.globalAlpha = 0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ;
      a = ⲆⲆ[466];
      Wp(Eo, a, eq * -10, eq * -40, ᐃᐃΔ, ᐃΔΔ);
      Eo.globalAlpha = 1;
    }
    Eo.restore();
    a = ⲆⲆ[452][Cx.time];
    Eo.save();
    Eo.translate(eq * 30, eq * 70);
    Eo.rotate(-this.rotate.ⵠⵠⲆ);
    Wp(Eo, a, eq * 10 - ᐃᐃΔ, eq * -40, ᐃᐃΔ, ᐃΔΔ);
    if (this.action & 2) {
      Eo.globalAlpha = 0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ;
      a = ⲆⲆ[467];
      Wp(Eo, a, eq * 10 - ᐃᐃΔ, eq * -40, ᐃᐃΔ, ᐃΔΔ);
      Eo.globalAlpha = 1;
    }
    Eo.restore();
    Eo.restore();
  }
  function zv() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    this.ⲆⲆⵠⵠⵠⵠΔ = Math.min(1, this.ⲆⲆⵠⵠⵠⵠΔ + Jx * 2);
    Eo.globalAlpha = this.ⲆⲆⵠⵠⵠⵠΔ * Math.min(1, Math.max(0, ΔⵠΔᐃ.ΔⵠⲆᐃ(this, this.r) / 80));
    this.ⵠⵠⲆΔ.ᐃⲆⲆ();
    ΔⲆ = ⲆⲆ[247][Cx.time][this.ⵠᐃΔᐃⲆ];
    if (this.ⵠᐃΔᐃⲆ < 2) {
      ᐃᐃΔ = -ΔⲆ.width * this.ⵠⵠⲆΔ.ⵠⵠⲆ;
      ᐃΔΔ = this.ⵠⵠⲆΔ.ⵠⵠⲆ * -ΔⲆ.height;
    } else if (this.ⲆⵠⵠΔΔⲆᐃ === 0) {
      ᐃᐃΔ = -ΔⲆ.width;
      ᐃΔΔ = -ΔⲆ.height;
    } else {
      ᐃᐃΔ = -ΔⲆ.width * 1.35;
      ᐃΔΔ = -ΔⲆ.height * 1.35;
    }
    Wp(Eo, ΔⲆ, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
    Eo.globalAlpha = 1;
    Eo.restore();
  }
  function Av() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ == Rg) {
        this.ᐃΔⲆΔ.ᐃⲆⲆ = false;
      }
      var b = eq * ((1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * Jx * 600);
      var c = Math.sin(this.ᐃΔⲆΔ.angle - this.angle) * b;
      var d = b * Math.cos(this.ᐃΔⲆΔ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var f = this.info & 15;
    if (this.info === 10 || f === 0) {
      Eo.rotate(this.angle);
      this.ΔΔᐃΔ.ᐃⲆⲆ();
      if (this.info & 16) {
        var g = ⲆⲆ[668][Cx.time];
      } else {
        g = ⲆⲆ[132][Cx.time];
      }
      var h = this.ΔΔᐃΔ.ⵠⵠⲆ * -g.width;
      var a = this.ΔΔᐃΔ.ⵠⵠⲆ * -g.height;
      Wp(Eo, g, -h / 2 + c, -a / 2 + d, h, a);
    } else {
      this.ⵠΔΔⲆᐃⲆᐃ.ᐃⲆⲆ();
      if (this.info & 16) {
        g = ⲆⲆ[638][Cx.time];
      } else {
        g = ⲆⲆ[134][Cx.time];
      }
      Eo.translate(0, g.height / 2);
      Eo.rotate(this.ⵠΔΔⲆᐃⲆᐃ.ⵠⵠⲆ);
      Wp(Eo, g, c - g.width / 2, -g.height + d);
    }
    Eo.restore();
  }
  function Bv() {
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && fl == this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ) {
        this.ᐃΔⲆΔ.ᐃⲆⲆ = false;
      }
      var a = (1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * Jx * 600 * eq;
      var b = a * Math.sin(this.ᐃΔⲆΔ.angle - this.angle);
      var c = a * Math.cos(this.ᐃΔⲆΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Eo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x + b, Dx.ᐃΔᐃⲆ.y + this.y + c);
    Eo.rotate(this.angle);
    ΔⲆ = ⲆⲆ[156][Cx.time];
    Wp(Eo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Jx * 3) % (Math.PI * 2);
    }
    Eo.rotate(this.rotate);
    ΔⲆ = ⲆⲆ[1210][Cx.time];
    Wp(Eo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
    Eo.restore();
  }
  function Cv() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    this.ᐃᐃΔΔⵠ.ᐃⲆⲆ();
    ΔⲆ = ⲆⲆ[1192][Cx.time];
    ᐃᐃΔ = -ΔⲆ.width * this.ᐃᐃΔΔⵠ.ⵠⵠⲆ;
    ᐃΔΔ = this.ᐃᐃΔΔⵠ.ⵠⵠⲆ * -ΔⲆ.height;
    Wp(Eo, ΔⲆ, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
    Eo.restore();
  }
  function Dv() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && al == this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ) {
        this.ᐃΔⲆΔ.ᐃⲆⲆ = ba;
      }
      var b = (1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * Jx * 600 * eq;
      var c = b * Math.sin(this.ᐃΔⲆΔ.angle - this.angle);
      var d = Math.cos(this.ᐃΔⲆΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var f = this.info & 15;
    if (this.info === 10 || f === 0) {
      Eo.rotate(this.angle);
      this.ΔΔᐃΔ.ᐃⲆⲆ();
      if (this.info & 16) {
        var g = ⲆⲆ[953][Cx.time];
      } else {
        g = ⲆⲆ[204][Cx.time];
      }
      var h = -g.width * this.ΔΔᐃΔ.ⵠⵠⲆ;
      var a = -g.height * this.ΔΔᐃΔ.ⵠⵠⲆ;
      Wp(Eo, g, -h / 2 + c, -a / 2 + d, h, a);
    } else {
      if (this.info & 16) {
        g = ⲆⲆ[954][Cx.time];
      } else {
        g = ⲆⲆ[205][Cx.time];
      }
      Eo.translate(0, g.height / 2);
      Wp(Eo, g, c - g.width / 2, -g.height + d);
    }
    Eo.restore();
  }
  function Ev() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && ns == this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ) {
        this.ᐃΔⲆΔ.ᐃⲆⲆ = false;
      }
      var a = eq * ((1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * Jx * 600);
      var b = a * Math.sin(this.ᐃΔⲆΔ.angle - this.angle);
      var c = Math.cos(this.ᐃΔⲆΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    if (this.action == 2) {
      ΔⲆ = ⲆⲆ[407][Cx.time];
    } else {
      ΔⲆ = ⲆⲆ[119][Cx.time];
    }
    Wp(Eo, ΔⲆ, -ΔⲆ.width / 2 + b, -ΔⲆ.height / 2 + c);
    Eo.restore();
  }
  function Fv() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    var a = ΔⵠΔᐃ.ΔⵠⲆᐃ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + Jx / 2, 1.8) : Math.max(this.scale - Jx, 1);
    this.ⵠⵠⲆΔ.ᐃⲆⲆ();
    this.rotate.ᐃⲆⲆ();
    this.ΔⵠΔΔ = a < 350 ? Math.max(0, this.ΔⵠΔΔ - Jx * 2.2) : Math.min(1, this.ΔⵠΔΔ + Jx * 2.2);
    b = ⲆⲆ[1135][Cx.time];
    ᐃᐃΔ = this.scale * (-b.width * this.ⵠⵠⲆΔ.ⵠⵠⲆ);
    ᐃΔΔ = this.ⵠⵠⲆΔ.ⵠⵠⲆ * -b.height * this.scale;
    Eo.globalAlpha = 1 - this.ΔⵠΔΔ;
    Wp(Eo, b, -ᐃᐃΔ / 4, -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
    b = ⲆⲆ[1119][Cx.time];
    ᐃᐃΔ = this.scale * (-b.width * this.ⵠⵠⲆΔ.ⵠⵠⲆ);
    ᐃΔΔ = this.scale * (this.ⵠⵠⲆΔ.ⵠⵠⲆ * -b.height);
    Eo.globalAlpha = this.ΔⵠΔΔ;
    Wp(Eo, b, -ᐃᐃΔ / 4, -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
    if (this.action & 2) {
      if (this.ᐃΔⲆΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃⲆ == 0) {
        this.action -= 2;
      }
      Eo.globalAlpha = (1 - this.ΔⵠΔΔ) * (0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ);
      var b = ⲆⲆ[1136];
      ᐃᐃΔ = this.ⵠⵠⲆΔ.ⵠⵠⲆ * -b.width * this.scale;
      ᐃΔΔ = -b.height * this.ⵠⵠⲆΔ.ⵠⵠⲆ * this.scale;
      Wp(Eo, b, -ᐃᐃΔ / 4, -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
      Eo.globalAlpha = this.ΔⵠΔΔ * (0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ);
      b = ⲆⲆ[1128];
      ᐃᐃΔ = this.scale * (this.ⵠⵠⲆΔ.ⵠⵠⲆ * -b.width);
      ᐃΔΔ = this.scale * (this.ⵠⵠⲆΔ.ⵠⵠⲆ * -b.height);
      Wp(Eo, b, -ᐃᐃΔ / 4, -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
      Eo.globalAlpha = 1;
    }
    b = ⲆⲆ[1122][Cx.time];
    ᐃᐃΔ = this.ⵠⵠⲆΔ.ⵠⵠⲆ * -b.width * this.scale;
    ᐃΔΔ = this.ⵠⵠⲆΔ.ⵠⵠⲆ * -b.height * this.scale;
    Eo.save();
    Eo.translate(eq * -40, eq * 80);
    Eo.rotate(this.rotate.ⵠⵠⲆ);
    Eo.globalAlpha = this.ΔⵠΔΔ;
    Wp(Eo, b, -ᐃᐃΔ * eq / 4, eq * -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
    if (this.action & 2) {
      Eo.globalAlpha = (0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ) * this.ΔⵠΔΔ;
      b = ⲆⲆ[1129];
      Wp(Eo, b, eq * -ᐃᐃΔ / 4, -ᐃΔΔ * eq / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
      Eo.globalAlpha = 1;
    }
    Eo.restore();
    b = ⲆⲆ[1125][Cx.time];
    Eo.save();
    Eo.translate(eq * 40, eq * 80);
    Eo.rotate(-this.rotate.ⵠⵠⲆ);
    Eo.globalAlpha = this.ΔⵠΔΔ;
    Wp(Eo, b, eq * -ᐃᐃΔ / 4, eq * -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
    if (this.action & 2) {
      Eo.globalAlpha = (0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ) * this.ΔⵠΔΔ;
      b = ⲆⲆ[1130];
      Wp(Eo, b, eq * -ᐃᐃΔ / 4, eq * -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
      Eo.globalAlpha = 1;
    }
    Eo.globalAlpha = 1;
    Eo.restore();
    Eo.restore();
  }
  function Gv(a, b, c) {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + b, Dx.ᐃΔᐃⲆ.y + c);
    Eo.rotate(this.angle);
    Eo.translate(this.x - b, this.y - c);
    this.ⵠⵠⲆΔ.ᐃⲆⲆ();
    ΔⲆ = ⲆⲆ[a][Cx.time];
    ᐃᐃΔ = -ΔⲆ.width * this.ⵠⵠⲆΔ.ⵠⵠⲆ;
    ᐃΔΔ = this.ⵠⵠⲆΔ.ⵠⵠⲆ * -ΔⲆ.height;
    Wp(Eo, ΔⲆ, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
    Eo.restore();
  }
  function Hv() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && ir == this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ) {
        this.ᐃΔⲆΔ.ᐃⲆⲆ = cr;
      }
      var b = (1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * Jx * 600 * eq;
      var c = b * Math.sin(this.ᐃΔⲆΔ.angle - this.angle);
      var d = Math.cos(this.ᐃΔⲆΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var f = this.info & 15;
    if (this.info === 10 || f === 0) {
      Eo.rotate(this.angle);
      this.ΔΔᐃΔ.ᐃⲆⲆ();
      if (this.info & 16) {
        var g = ⲆⲆ[985][Cx.time];
      } else {
        g = ⲆⲆ[210][Cx.time];
      }
      var h = -g.width * this.ΔΔᐃΔ.ⵠⵠⲆ;
      var a = -g.height * this.ΔΔᐃΔ.ⵠⵠⲆ;
      Wp(Eo, g, -h / 2 + c, -a / 2 + d, h, a);
    } else {
      if (this.info & 16) {
        g = ⲆⲆ[986][Cx.time];
      } else {
        g = ⲆⲆ[211][Cx.time];
      }
      Eo.translate(0, g.height / 2);
      Wp(Eo, g, c - g.width / 2, -g.height + d);
    }
    Eo.restore();
  }
  function Iv() {
    if (this.info >= 10) {
      Eo.save();
      Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
      Eo.rotate(this.angle);
      if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
        if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && Ee == this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ) {
          this.ᐃΔⲆΔ.ᐃⲆⲆ = ba;
        }
        var b = eq * (Jx * (1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * 600);
        var c = b * Math.sin(this.ᐃΔⲆΔ.angle - this.angle);
        var d = b * Math.cos(this.ᐃΔⲆΔ.angle - this.angle);
      } else {
        c = 0;
        d = 0;
      }
      this.ΔΔᐃΔ.ᐃⲆⲆ();
      var f = ⲆⲆ[206][Cx.time];
      var g = -f.width * this.ΔΔᐃΔ.ⵠⵠⲆ;
      var h = -f.height * this.ΔΔᐃΔ.ⵠⵠⲆ;
      Wp(Eo, f, -g / 2 + c, -h / 2 + d, g, h);
      Eo.restore();
    }
  }
  function Jv() {
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ == 0) {
        this.ᐃΔⲆΔ.ᐃⲆⲆ = false;
      }
      var a = Jx * (1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * 600 * eq;
      var b = Math.sin(this.ᐃΔⲆΔ.angle - this.angle) * a;
      var c = a * Math.cos(this.ᐃΔⲆΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    this.ΔⵠⵠⵠⲆΔΔ = (this.ΔⵠⵠⵠⲆΔΔ + Jx * 3) % (Math.PI * 2);
    this.ⲆⲆΔⵠⵠΔⲆ = (this.ⲆⲆΔⵠⵠΔⲆ - Jx * 3) % (Math.PI * 2);
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x + b, Dx.ᐃΔᐃⲆ.y + this.y + c);
    Eo.save();
    Eo.rotate(this.angle);
    ΔⲆ = ⲆⲆ[151][Cx.time];
    Wp(Eo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
    Eo.restore();
    Eo.save();
    Eo.rotate(this.ΔⵠⵠⵠⲆΔΔ);
    ΔⲆ = ⲆⲆ[528][Cx.time];
    Wp(Eo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
    Eo.restore();
    Eo.save();
    Eo.rotate(this.ⲆⲆΔⵠⵠΔⲆ);
    ΔⲆ = ⲆⲆ[527][Cx.time];
    Wp(Eo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
    Eo.restore();
    Eo.restore();
  }
  function Kv(a, b) {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    this.ⵠⵠⲆΔ.ᐃⲆⲆ();
    c = ⲆⲆ[a][Cx.time];
    ᐃᐃΔ = -c.width * this.ⵠⵠⲆΔ.ⵠⵠⲆ;
    ᐃΔΔ = -c.height * this.ⵠⵠⲆΔ.ⵠⵠⲆ;
    Wp(Eo, c, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
    if (this.action & 2) {
      if (this.ᐃΔⲆΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃⲆ == ul) {
        this.action -= 2;
      }
      Eo.globalAlpha = 0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ;
      var c = ⲆⲆ[b];
      Wp(Eo, c, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
      Eo.globalAlpha = 1;
    }
    Eo.restore();
  }
  function Lv(a, b, c) {
    if (a >= 0) {
      ΔⲆ = ⲆⲆ[a][Cx.time];
      switch (a) {
        case 1:
        case 3:
        case 4:
        case 8:
        case 31:
        case 32:
          Dw(a, ΔⲆ, -ΔⲆ.width / 2 - (45 + b) * eq, -ΔⲆ.height / 2 + (c + 22) * eq);
          break;
        case 94:
        case 95:
        case 96:
        case 97:
          Cw(a, ΔⲆ, -ΔⲆ.width / 4 - eq * (52 + b), -ΔⲆ.height / 4 + eq * (c + 20));
          break;
        case 98:
        case 99:
          Cw(a, ΔⲆ, -ΔⲆ.width / 4 - (57 + b) * eq, -ΔⲆ.height / 4 + (c + 20) * eq);
          break;
        case 57:
        case 0:
        case 5:
        case 6:
          Cw(a, ΔⲆ, -ΔⲆ.width / 4 - (47 + b) * eq, -ΔⲆ.height / 4 + (c + 45) * eq);
          break;
        case 30:
          Cw(a, ΔⲆ, -ΔⲆ.width / 4 - (52 + b) * eq, -ΔⲆ.height / 4 + eq * (c + 45));
          break;
        case 19:
          Cw(a, ΔⲆ, -ΔⲆ.width / 4 - eq * (47 + b), -ΔⲆ.height / 4 + eq * (c + 44));
          break;
        case 9:
          Dw(a, ΔⲆ, -ΔⲆ.width / 2 - (47 + b) * eq, -ΔⲆ.height / 2 + eq * (c + 44));
          break;
        case 62:
          Dw(a, ΔⲆ, -ΔⲆ.width / 2 - (40 + b) * eq, -ΔⲆ.height / 2 + eq * (c + 65));
          break;
        case 12:
          Cw(a, ΔⲆ, -ΔⲆ.width / 4 - (37 + b) * eq, -ΔⲆ.height / 4 + eq * (c + 85));
          break;
        case 34:
          Cw(a, ΔⲆ, -ΔⲆ.width / 4 - (37 + b) * eq, -ΔⲆ.height / 4 + (c + 85) * eq);
          break;
        case 54:
        case 53:
          Cw(a, ΔⲆ, -ΔⲆ.width / 4 - eq * (26 + b), -ΔⲆ.height / 4 + eq * (c + 77));
          break;
        case 17:
          Cw(a, ΔⲆ, -ΔⲆ.width / 4 - (37 + b) * eq, -ΔⲆ.height / 4 + (c + 85) * eq);
          break;
        case 63:
          Cw(a, ΔⲆ, -ΔⲆ.width / 4 - (47 + b) * eq, -ΔⲆ.height / 4 + (c + 44) * eq);
          break;
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
          Cw(a, ΔⲆ, -ΔⲆ.width / 4 - eq * (37 + b), -ΔⲆ.height / 4 + (c + 30) * eq);
          break;
        case 56:
          Cw(a, ΔⲆ, -ΔⲆ.width / 4 - eq * (47 + b), -ΔⲆ.height / 4 + eq * (c + 35));
          break;
        case 92:
        case 93:
          Cw(a, ΔⲆ, -ΔⲆ.width / 4 - eq * (47 + b), -ΔⲆ.height / 4 + (c + 40) * eq);
          break;
        case 89:
          Cw(a, ΔⲆ, -ΔⲆ.width / 4 - (47 + b) * eq, -ΔⲆ.height / 4 + eq * (c + 34));
          break;
        case 13:
        case 14:
        case 15:
        case 33:
          Cw(a, ΔⲆ, -ΔⲆ.width / 4 - (37 + b) * eq, -ΔⲆ.height / 4 + eq * (c + 90));
          break;
        case 18:
          Cw(a, ΔⲆ, -ΔⲆ.width / 4 - (40 + b) * eq, -ΔⲆ.height / 4 + (c + 85) * eq);
          break;
        case 16:
          Dw(a, ΔⲆ, -ΔⲆ.width / 2 - (39 + b) * eq, -ΔⲆ.height / 2 + (c + 90) * eq);
          break;
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 45:
          Dw(a, ΔⲆ, -ΔⲆ.width / 2 - eq * (46 + b), -ΔⲆ.height / 2 + (c + 35) * eq);
          break;
        case 49:
          Dw(a, ΔⲆ, -ΔⲆ.width / 2 - (47 + b) * eq, -ΔⲆ.height / 2 + eq * (c + 54));
          break;
        case 46:
        case 50:
        case 51:
        case 52:
          Dw(a, ΔⲆ, -ΔⲆ.width / 2 - (46 + b) * eq, -ΔⲆ.height / 2 + eq * (c + 35));
          break;
        case 55:
          Dw(a, ΔⲆ, -ΔⲆ.width / 2 - (47 + b) * eq, -ΔⲆ.height / 2 + eq * (c + 20));
      }
    }
  }
  function Mv() {
    this.ⵠⵠⲆΔ.ᐃⲆⲆ();
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    a = this.info === 0 ? ⲆⲆ[1042][Cx.time] : ⲆⲆ[1044][Cx.time];
    ᐃᐃΔ = this.ⵠⵠⲆΔ.ⵠⵠⲆ * -a.width;
    ᐃΔΔ = -a.height * this.ⵠⵠⲆΔ.ⵠⵠⲆ;
    Wp(Eo, a, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
    if (this.action & 2) {
      if (this.ᐃΔⲆΔ.ᐃⲆⲆ() && Ml == this.ᐃΔⲆΔ.ΔᐃⲆ) {
        this.action -= 2;
      }
      Eo.globalAlpha = 0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ;
      var a = ⲆⲆ[1045];
      Wp(Eo, a, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
      Eo.globalAlpha = 1;
    }
    Eo.restore();
  }
  function Nv() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    this.ΔΔᐃΔ.ᐃⲆⲆ();
    Eo.globalAlpha = 0.3;
    var a = ⲆⲆ[282][Cx.time];
    var b = -a.width * this.ΔΔᐃΔ.ⵠⵠⲆ;
    var c = this.ΔΔᐃΔ.ⵠⵠⲆ * -a.height;
    Wp(Eo, a, -b / 2, -c / 2, b, c);
    Eo.globalAlpha = 1;
    Eo.restore();
  }
  function Ov() {
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ == 0) {
        this.ᐃΔⲆΔ.ᐃⲆⲆ = false;
      }
      var a = eq * (Jx * (1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * 600);
      var b = Math.sin(this.ᐃΔⲆΔ.angle - this.angle) * a;
      var c = a * Math.cos(this.ᐃΔⲆΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Eo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x + b, Dx.ᐃΔᐃⲆ.y + this.y + c);
    Eo.rotate(this.angle);
    ΔⲆ = ⲆⲆ[157][Cx.time];
    Wp(Eo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Jx * 3) % (Math.PI * 2);
    }
    Eo.rotate(this.rotate);
    ΔⲆ = ⲆⲆ[1214][Cx.time];
    Wp(Eo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
    Eo.restore();
  }
  function Pv() {
    var a = wj;
    var b = undefined;
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    this.ⵠⵠⲆΔ.ᐃⲆⲆ();
    this.rotate.ᐃⲆⲆ();
    if (this.ΔⲆΔᐃᐃ >= 0.1 && this.ΔⲆΔᐃᐃ <= 1.1) {
      if ((c = Math.max(0, Math.min(1, this.ΔⲆΔᐃᐃ - 0.1))) < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : 1;
      }
      a = ⲆⲆ[1150][Cx.time];
      ᐃᐃΔ = this.ⵠⵠⲆΔ.ⵠⵠⲆ * -a.width;
      ᐃΔΔ = this.ⵠⵠⲆΔ.ⵠⵠⲆ * -a.height;
      Eo.globalAlpha = c;
      Wp(Eo, a, -ᐃᐃΔ / 4, -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
      b = ⲆⲆ[1151];
    }
    if (this.ΔⲆΔᐃᐃ >= 0.9) {
      var c;
      if ((c = Math.max(0, Math.min(1, this.ΔⲆΔᐃᐃ - 0.9))) < 0.2) {
        c *= 5;
      } else {
        c = 1;
      }
      a = ⲆⲆ[1152][Cx.time];
      ᐃᐃΔ = -a.width * this.ⵠⵠⲆΔ.ⵠⵠⲆ;
      ᐃΔΔ = -a.height * this.ⵠⵠⲆΔ.ⵠⵠⲆ;
      Eo.globalAlpha = c;
      Wp(Eo, a, -ᐃᐃΔ / 4, -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
      b = ⲆⲆ[1153];
    }
    if (this.action & 2 && b !== undefined) {
      if (this.ᐃΔⲆΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃⲆ == 0) {
        this.action -= 2;
      }
      Eo.globalAlpha = (0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ) * c;
      ᐃᐃΔ = this.ⵠⵠⲆΔ.ⵠⵠⲆ * -b.width;
      ᐃΔΔ = this.ⵠⵠⲆΔ.ⵠⵠⲆ * -b.height;
      Wp(Eo, b, -ᐃᐃΔ / 4, -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
    }
    Eo.globalAlpha = 1;
    Eo.restore();
  }
  function Qv() {
    var a = Math.PI / 2;
    var b = Math.PI / 4;
    this.ⵠⵠⲆΔ.ᐃⲆⲆ();
    this.ᐃᐃᐃⲆⲆⵠⵠ.ᐃⲆⲆ();
    this.ΔⵠⵠΔⵠΔᐃ.ᐃⲆⲆ();
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    c = this.info === 0 ? ⲆⲆ[887][Cx.time] : ⲆⲆ[886][Cx.time];
    ᐃᐃΔ = -c.width * this.ⵠⵠⲆΔ.ⵠⵠⲆ;
    ᐃΔΔ = -c.height * this.ⵠⵠⲆΔ.ⵠⵠⲆ;
    Wp(Eo, c, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
    if (this.action & 2) {
      if (this.ᐃΔⲆΔ.ᐃⲆⲆ() && Wj == this.ᐃΔⲆΔ.ΔᐃⲆ) {
        this.action -= 2;
      }
      Eo.globalAlpha = 0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ;
      var c = ⲆⲆ[888];
      Wp(Eo, c, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
      Eo.globalAlpha = 1;
    }
    if (this.action & 4) {
      if (this.ᐃᐃΔⲆⲆ.ᐃⲆⲆ() && this.ᐃᐃΔⲆⲆ.ΔᐃⲆ == 0) {
        this.action -= 4;
      }
      Eo.globalAlpha = 0.6 - this.ᐃᐃΔⲆⲆ.ⵠⵠⲆ;
      c = ⲆⲆ[891];
      Wp(Eo, c, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
      Eo.globalAlpha = 1;
    }
    Eo.restore();
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle + b);
    Eo.translate(55, 0);
    Eo.rotate(a);
    c = this.info === 0 ? ⲆⲆ[894][Cx.time] : ⲆⲆ[896][Cx.time];
    ᐃᐃΔ = this.ᐃᐃᐃⲆⲆⵠⵠ.ⵠⵠⲆ * -c.width;
    ᐃΔΔ = -c.height * this.ᐃᐃᐃⲆⲆⵠⵠ.ⵠⵠⲆ;
    Wp(Eo, c, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
    if (this.action & 2) {
      Eo.globalAlpha = 0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ;
      c = ⲆⲆ[889];
      Wp(Eo, c, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
      Eo.globalAlpha = 1;
    }
    if (this.action & 4) {
      Eo.globalAlpha = 0.6 - this.ᐃᐃΔⲆⲆ.ⵠⵠⲆ;
      c = ⲆⲆ[892];
      Wp(Eo, c, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
      Eo.globalAlpha = 1;
    }
    Eo.restore();
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle + a + b);
    Eo.translate(55, 0);
    Eo.rotate(a);
    c = this.info === 0 ? ⲆⲆ[895][Cx.time] : ⲆⲆ[897][Cx.time];
    ᐃᐃΔ = this.ΔⵠⵠΔⵠΔᐃ.ⵠⵠⲆ * -c.width;
    ᐃΔΔ = this.ΔⵠⵠΔⵠΔᐃ.ⵠⵠⲆ * -c.height;
    Wp(Eo, c, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
    if (this.action & 2) {
      Eo.globalAlpha = 0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ;
      c = ⲆⲆ[890];
      Wp(Eo, c, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
      Eo.globalAlpha = 1;
    }
    if (this.action & 4) {
      Eo.globalAlpha = 0.6 - this.ᐃᐃΔⲆⲆ.ⵠⵠⲆ;
      c = ⲆⲆ[893];
      Wp(Eo, c, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
      Eo.globalAlpha = 1;
    }
    Eo.restore();
  }
  function Rv() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    if (ΔⵠΔᐃ.ΔⵠⲆᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Jx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Jx, 1);
    }
    this.ⵠⵠⲆΔ.ᐃⲆⲆ();
    this.rotate.ᐃⲆⲆ();
    a = ⲆⲆ[450][Cx.time];
    ᐃᐃΔ = this.scale * (this.ⵠⵠⲆΔ.ⵠⵠⲆ * -a.width);
    ᐃΔΔ = this.scale * (this.ⵠⵠⲆΔ.ⵠⵠⲆ * -a.height);
    Wp(Eo, a, -ᐃᐃΔ / 4, -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
    if (this.action & 2) {
      if (this.ᐃΔⲆΔ.ᐃⲆⲆ() && Wj == this.ᐃΔⲆΔ.ΔᐃⲆ) {
        this.action -= 2;
      }
      Eo.globalAlpha = 0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ;
      var a = ⲆⲆ[464];
      Wp(Eo, a, -ᐃᐃΔ / 4, -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
      Eo.globalAlpha = 1;
    }
    a = ⲆⲆ[453][Cx.time];
    ᐃᐃΔ = this.scale * (-a.width * this.ⵠⵠⲆΔ.ⵠⵠⲆ);
    ᐃΔΔ = -a.height * this.ⵠⵠⲆΔ.ⵠⵠⲆ * this.scale;
    Eo.save();
    Eo.translate(eq * -60, eq * 20);
    Eo.rotate(this.rotate.ⵠⵠⲆ);
    Wp(Eo, a, eq * -ᐃᐃΔ / 4, eq * -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
    if (this.action & 2) {
      Eo.globalAlpha = 0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ;
      a = ⲆⲆ[468];
      Wp(Eo, a, -ᐃᐃΔ * eq / 4, -ᐃΔΔ * eq / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
      Eo.globalAlpha = 1;
    }
    Eo.restore();
    a = ⲆⲆ[454][Cx.time];
    Eo.save();
    Eo.translate(eq * 60, eq * 20);
    Eo.rotate(-this.rotate.ⵠⵠⲆ);
    Wp(Eo, a, eq * -ᐃᐃΔ / 4, -ᐃΔΔ * eq / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
    if (this.action & 2) {
      Eo.globalAlpha = 0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ;
      a = ⲆⲆ[469];
      Wp(Eo, a, eq * -ᐃᐃΔ / 4, -ᐃΔΔ * eq / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
      Eo.globalAlpha = 1;
    }
    Eo.restore();
    Eo.restore();
  }
  function Sv() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    this.ᐃᐃΔΔⵠ.ᐃⲆⲆ();
    ΔⲆ = ⲆⲆ[526][Cx.time];
    ᐃᐃΔ = this.ᐃᐃΔΔⵠ.ⵠⵠⲆ * -ΔⲆ.width;
    ᐃΔΔ = this.ᐃᐃΔΔⵠ.ⵠⵠⲆ * -ΔⲆ.height;
    Wp(Eo, ΔⲆ, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
    Eo.restore();
  }
  function Tv() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ⲆⵠΔⲆⲆ.length == 0 || this.ⲆⵠΔⲆⲆ[this.ⲆⵠΔⲆⲆ.length - 1] <= 0.6)) {
      this.ⲆⵠΔⲆⲆ.push(1);
    }
    for (var a = 0; this.ⲆⵠΔⲆⲆ.length > a; a++) {
      this.ⲆⵠΔⲆⲆ[a] = Math.max(0, this.ⲆⵠΔⲆⲆ[a] - Jx * 0.25);
      Eo.globalAlpha = this.ⲆⵠΔⲆⲆ[a] / 1.3;
      var b = (1 - this.ⲆⵠΔⲆⲆ[a]) * 40;
      var c = (1 - this.ⲆⵠΔⲆⲆ[a]) * 35 + 10;
      Pd(Eo, eq * -68 + Math.sin(-this.angle - Math.PI / 2) * b, eq * -20 + b * Math.cos(-this.angle - Math.PI / 2), c);
      Td(Eo, "#333333");
    }
    Eo.globalAlpha = 1;
    if (this.ⲆⵠΔⲆⲆ.length > 0 && this.ⲆⵠΔⲆⲆ[0] === 0) {
      this.ⲆⵠΔⲆⲆ.shift();
    }
    Eo.restore();
  }
  function Uv() {
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ == ul) {
        this.ᐃΔⲆΔ.ᐃⲆⲆ = Ee;
      }
      var a = Jx * (1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * 600 * eq;
      var b = a * Math.sin(this.ᐃΔⲆΔ.angle - this.angle);
      var c = a * Math.cos(this.ᐃΔⲆΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    this.ΔⵠⵠⵠⲆΔΔ = (this.ΔⵠⵠⵠⲆΔΔ + Jx * 3) % (Math.PI * 2);
    this.ⲆⲆΔⵠⵠΔⲆ = (this.ⲆⲆΔⵠⵠΔⲆ - Jx * 3) % (Math.PI * 2);
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x + b, Dx.ᐃΔᐃⲆ.y + this.y + c);
    Eo.save();
    Eo.rotate(this.angle);
    ΔⲆ = ⲆⲆ[152][Cx.time];
    Wp(Eo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
    Eo.restore();
    Eo.save();
    Eo.rotate(this.ΔⵠⵠⵠⲆΔΔ);
    ΔⲆ = ⲆⲆ[1194][Cx.time];
    Wp(Eo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
    Eo.restore();
    Eo.save();
    Eo.rotate(this.ⲆⲆΔⵠⵠΔⲆ);
    ΔⲆ = ⲆⲆ[1193][Cx.time];
    Wp(Eo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
    Eo.restore();
    Eo.restore();
  }
  function Vv() {
    this.ⵠⵠⲆΔ.ᐃⲆⲆ();
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    a = this.info === 0 ? ⲆⲆ[248][Cx.time] : ⲆⲆ[1222][Cx.time];
    ᐃᐃΔ = -a.width * this.ⵠⵠⲆΔ.ⵠⵠⲆ;
    ᐃΔΔ = -a.height * this.ⵠⵠⲆΔ.ⵠⵠⲆ;
    Wp(Eo, a, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
    if (this.action & 2) {
      if (this.ᐃΔⲆΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃⲆ == 0) {
        this.action -= 2;
      }
      Eo.globalAlpha = 0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ;
      var a = ⲆⲆ[1223];
      Wp(Eo, a, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
      Eo.globalAlpha = 1;
    }
    Eo.restore();
  }
  function Wv() {
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ == 0) {
        this.ᐃΔⲆΔ.ᐃⲆⲆ = false;
      }
      var a = eq * ((1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * Jx * 600);
      var b = Math.sin(this.ᐃΔⲆΔ.angle - this.angle) * a;
      var c = a * Math.cos(this.ᐃΔⲆΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Eo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x + b, Dx.ᐃΔᐃⲆ.y + this.y + c);
    Eo.rotate(this.angle);
    ΔⲆ = ⲆⲆ[154][Cx.time];
    Wp(Eo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Jx * 3) % (Math.PI * 2);
    }
    Eo.rotate(this.rotate);
    ΔⲆ = ⲆⲆ[1202][Cx.time];
    Wp(Eo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
    Eo.restore();
  }
  function Xv() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    if (ΔⵠΔᐃ.ΔⵠⲆᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Jx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Jx, 1);
    }
    this.ⵠⵠⲆΔ.ᐃⲆⲆ();
    this.rotate.ᐃⲆⲆ();
    a = this.info === 0 ? ⲆⲆ[232][Cx.time] : ⲆⲆ[1068][Cx.time];
    ᐃᐃΔ = this.ⵠⵠⲆΔ.ⵠⵠⲆ * -a.width * this.scale;
    ᐃΔΔ = -a.height * this.ⵠⵠⲆΔ.ⵠⵠⲆ * this.scale;
    Wp(Eo, a, -ᐃᐃΔ / 4, -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
    if (this.action & 2) {
      if (this.ᐃΔⲆΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃⲆ == Po) {
        this.action -= 2;
      }
      Eo.globalAlpha = 0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ;
      var a = ⲆⲆ[1077];
      Wp(Eo, a, -ᐃᐃΔ / 4, -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
      Eo.globalAlpha = 1;
    }
    a = this.info === 0 ? ⲆⲆ[1072][Cx.time] : ⲆⲆ[1071][Cx.time];
    ᐃᐃΔ = this.scale * (-a.width * this.ⵠⵠⲆΔ.ⵠⵠⲆ);
    ᐃΔΔ = this.scale * (this.ⵠⵠⲆΔ.ⵠⵠⲆ * -a.height);
    Eo.save();
    Eo.translate(eq * -40, eq * 10);
    Eo.rotate(this.rotate.ⵠⵠⲆ);
    Wp(Eo, a, -ᐃᐃΔ * eq / 4, -ᐃΔΔ * eq / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
    if (this.action & 2) {
      Eo.globalAlpha = 0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ;
      a = ⲆⲆ[1078];
      Wp(Eo, a, eq * -ᐃᐃΔ / 4, -ᐃΔΔ * eq / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
      Eo.globalAlpha = 1;
    }
    Eo.restore();
    a = this.info === 0 ? ⲆⲆ[1075][Cx.time] : ⲆⲆ[1074][Cx.time];
    Eo.save();
    Eo.translate(eq * 40, eq * 10);
    Eo.rotate(-this.rotate.ⵠⵠⲆ);
    Wp(Eo, a, -ᐃᐃΔ * eq / 4, -ᐃΔΔ * eq / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
    if (this.action & 2) {
      Eo.globalAlpha = 0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ;
      a = ⲆⲆ[1079];
      Wp(Eo, a, -ᐃᐃΔ * eq / 4, eq * -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
      Eo.globalAlpha = 1;
    }
    Eo.restore();
    Eo.restore();
  }
  function Yv(b) {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    this.ΔΔᐃΔ.ᐃⲆⲆ();
    Eo.globalAlpha = 0.3;
    var c = ⲆⲆ[282][Cx.time];
    var d = this.ΔΔᐃΔ.ⵠⵠⲆ * -c.width;
    var f = this.ΔΔᐃΔ.ⵠⵠⲆ * -c.height;
    Wp(Eo, c, -d / 2, -f / 2, d, f);
    Eo.globalAlpha = 1;
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && al == this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ) {
        this.ᐃΔⲆΔ.ᐃⲆⲆ = false;
      }
      var g = Jx * (1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * 600 * eq;
      var h = Math.sin(this.ᐃΔⲆΔ.angle - this.angle) * g;
      var j = g * Math.cos(this.ᐃΔⲆΔ.angle - this.angle);
    } else {
      h = 0;
      j = 0;
    }
    c = ⲆⲆ[b][Cx.time];
    Wp(Eo, c, -c.width / 2 + h, -c.height / 2 + j);
    Eo.restore();
  }
  function Zv(f, j, i, k, n, o, a, p, q) {
    if (p === zo) {
      p = 0;
    }
    for (var h = f; h <= j; h++) {
      for (var r = i; r <= k; r++) {
        var t = Ax.ⲆⵠⲆᐃ[h][r];
        if (Al !== t && t[o] !== undefined) {
          var w = t[o];
          var x = ⲆⲆ[n][Cx.time][w.ΔⵠⲆⲆᐃⲆΔ];
          Wp(Eo, x, Dx.ᐃΔᐃⲆ.x + w.x - x.width / (ᐃᐃⲆᐃⵠ * 4), Dx.ᐃΔᐃⲆ.y + w.y - x.height / (ᐃᐃⲆᐃⵠ * 4), x.width / (ᐃᐃⲆᐃⵠ * 2), x.height / (ᐃᐃⲆᐃⵠ * 2));
          if (zx.ΔᐃΔⵠᐃ) {
            var y = 2147483648;
            var z = ((h * 1000 + r) * 1103515245 + 12345) % y / y;
            if (z < 0.2) {
              z = Math.floor(ⲆⲆ[1025][Cx.time][w.ΔⵠⲆⲆᐃⲆΔ].length * (z * 5));
              x = ⲆⲆ[1025][Cx.time][w.ΔⵠⲆⲆᐃⲆΔ][z];
              Wp(Eo, x, Dx.ᐃΔᐃⲆ.x + w.x - x.width / (ᐃᐃⲆᐃⵠ * 4), Dx.ᐃΔᐃⲆ.y + w.y - x.height / (ᐃᐃⲆᐃⵠ * 4), x.width / (ᐃᐃⲆᐃⵠ * 2), x.height / (ᐃᐃⲆᐃⵠ * 2));
            } else if (w.ⵠᐃᐃⵠⲆᐃⲆ !== 0) {
              x = ⲆⲆ[1026][Cx.time];
              var A = (ev + h % 2 * 30) % 60;
              Eo.globalAlpha = A < 30 ? A / 30 : 1 - (A - 30) / 30;
              Wp(Eo, x, Dx.ᐃΔᐃⲆ.x + w.x - x.width / (ᐃᐃⲆᐃⵠ * 4), Dx.ᐃΔᐃⲆ.y + w.y - x.height / (ᐃᐃⲆᐃⵠ * 4) - 30 + A, x.width / (ᐃᐃⲆᐃⵠ * 2), x.height / (ᐃᐃⲆᐃⵠ * 2));
              Eo.globalAlpha = 1;
            }
          }
        }
      }
    }
  }
  function $v(a, b) {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    this.ⵠⵠⲆΔ.ᐃⲆⲆ();
    c = ⲆⲆ[a][Cx.time];
    ᐃᐃΔ = -c.width * this.ⵠⵠⲆΔ.ⵠⵠⲆ;
    ᐃΔΔ = -c.height * this.ⵠⵠⲆΔ.ⵠⵠⲆ;
    Wp(Eo, c, -ᐃᐃΔ / 4, -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
    if (this.action & 2) {
      if (this.ᐃΔⲆΔ.ᐃⲆⲆ() && Fq == this.ᐃΔⲆΔ.ΔᐃⲆ) {
        this.action -= 2;
      }
      Eo.globalAlpha = 0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ;
      var c = ⲆⲆ[b];
      Wp(Eo, c, -ᐃᐃΔ / 4, -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
      Eo.globalAlpha = 1;
    }
    Eo.restore();
  }
  function _v() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ == 0) {
        this.ᐃΔⲆΔ.ᐃⲆⲆ = fh;
      }
      var b = (1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * Jx * 600 * eq;
      var c = Math.sin(this.ᐃΔⲆΔ.angle - this.angle) * b;
      var d = Math.cos(this.ᐃΔⲆΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var f = this.info & 15;
    if (this.info === 10 || f === 0) {
      Eo.rotate(this.angle);
      this.ΔΔᐃΔ.ᐃⲆⲆ();
      if (this.info & 16) {
        var g = ⲆⲆ[970][Cx.time];
      } else {
        g = ⲆⲆ[208][Cx.time];
      }
      var h = -g.width * this.ΔΔᐃΔ.ⵠⵠⲆ;
      var a = -g.height * this.ΔΔᐃΔ.ⵠⵠⲆ;
      Wp(Eo, g, -h / 2 + c, -a / 2 + d, h, a);
    } else {
      if (this.info & 16) {
        g = ⲆⲆ[971][Cx.time];
      } else {
        g = ⲆⲆ[209][Cx.time];
      }
      Eo.translate(0, g.height / 2);
      Wp(Eo, g, c - g.width / 2, -g.height + d);
    }
    Eo.restore();
  }
  function aw() {
    if ((this.info & 1) == 1) {
      this.ΔⲆΔᐃᐃ = Math.min(this.ΔⲆΔᐃᐃ + Jx, 2.2);
    } else {
      this.ΔⲆΔᐃᐃ = Math.max(this.ΔⲆΔᐃᐃ - Jx, 0);
      this.ΔᐃΔⵠΔΔⲆ += Jx;
      if (this.ΔᐃΔⵠΔΔⲆ > 0.1) {
        this.ΔᐃΔⵠΔΔⲆ = 0;
        var a = {
          x: this.x + Math.random() * 60 - 30,
          y: this.y + Math.random() * 60 - 30,
          a: 0,
          r: Math.random() * 30 + 30
        };
        this.ΔΔᐃΔ.push(a);
      }
    }
    for (var b = 0; this.ΔΔᐃΔ.length > b; b++) {
      a = this.ΔΔᐃΔ[b];
      Eo.save();
      Eo.translate(Dx.ᐃΔᐃⲆ.x + a.x, Dx.ᐃΔᐃⲆ.y + a.y);
      a.a = Math.min(1, 0 + Jx / 2);
      var c = 0;
      if (c < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : 1;
      }
      Eo.globalAlpha = c * 0.8;
      Pd(Eo, 0, 0, a.r);
      Td(Eo, ts.Ⲇᐃⵠᐃⵠⵠⵠ[Cx.time]);
      Eo.restore();
      if (0 === 1) {
        this.ΔΔᐃΔ.splice(b, 1);
        b--;
      }
    }
  }
  function bw() {
    if (this.ᐃΔⲆΔ.ᐃⲆⲆ) {
      if (this.ᐃΔⲆΔ.ΔᐃΔΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃΔΔ.ΔᐃⲆ == al) {
        this.ᐃΔⲆΔ.ᐃⲆⲆ = ir;
      }
      var a = (1 - this.ᐃΔⲆΔ.ΔᐃΔΔ.ⵠⵠⲆ) * Jx * 600 * eq;
      var b = Math.sin(this.ᐃΔⲆΔ.angle - this.angle) * a;
      var c = a * Math.cos(this.ᐃΔⲆΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Eo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x + b, Dx.ᐃΔᐃⲆ.y + this.y + c);
    Eo.rotate(this.angle);
    ΔⲆ = ⲆⲆ[155][Cx.time];
    Wp(Eo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Jx * 3) % (Math.PI * 2);
    }
    Eo.rotate(this.rotate);
    ΔⲆ = ⲆⲆ[1206][Cx.time];
    Wp(Eo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
    Eo.restore();
  }
  function cw(a, b) {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    Eo.rotate(this.angle);
    c = ⲆⲆ[a][Cx.time];
    ᐃᐃΔ = -c.width;
    ᐃΔΔ = -c.height;
    Wp(Eo, c, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
    if (this.action & 2) {
      if (this.ᐃΔⲆΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃⲆ == 0) {
        this.action -= 2;
      }
      Eo.globalAlpha = 0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ;
      var c = ⲆⲆ[b];
      Wp(Eo, c, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
      Eo.globalAlpha = 1;
    }
    Eo.restore();
  }
  function dw(a) {
    if (a > 0) {
      var b = ⲆⲆ[a][Cx.time];
      switch (a) {
        case 58:
          Dw(a, b, -b.width / 2 + eq * 2, -b.height / 2 - eq * 5);
          break;
        case 10:
          Dw(a, b, -b.width / 2, -b.height / 2 - eq * 18);
          break;
        case 11:
          Dw(a, b, -b.width / 2, -b.height / 2 - eq * 10);
          break;
        case 23:
          Dw(a, b, -b.width / 2, -b.height / 2 - eq * 19);
          break;
        case 24:
          Cw(a, b, -b.width / 4, -b.height / 4 - eq * 20);
          break;
        case 25:
          Dw(a, b, -b.width / 2 - eq * 1, -b.height / 2 - eq * 23);
          break;
        case 26:
          Dw(a, b, -b.width / 2, -b.height / 2 - eq * 5);
          break;
        case 27:
          Dw(a, b, -b.width / 2, -b.height / 2 - eq * 2);
          break;
        case 43:
          Dw(a, b, -b.width / 2 + eq * 1.5, -b.height / 2 - eq * 1);
          break;
        case 44:
        case 20:
        case 21:
        case 22:
        case 80:
        case 81:
        case 82:
        case 60:
        case 90:
        case 88:
        case 87:
          Cw(a, b, -b.width / 4, -b.height / 4 + eq * 2);
          break;
        case 41:
        case 42:
          Dw(a, b, -b.width / 2 - eq * 5, -b.height / 2 - eq * 2);
          break;
        case 40:
          Dw(a, b, -b.width / 2, -b.height / 2 - eq * 2);
          break;
        case 85:
          Dw(a, b, -b.width / 2, -b.height / 2 - eq * 2);
          break;
        case 48:
          Dw(a, b, -b.width / 2, -b.height / 2 - eq * 2);
          break;
        case 47:
          Dw(a, b, -b.width / 2 + eq * 2, -b.height / 2);
          break;
        case 59:
          Dw(a, b, -b.width / 2, -b.height / 2 - eq * 5);
          break;
        case 77:
        case 78:
        case 79:
          Dw(a, b, -b.width / 2 - eq * 1, -b.height / 2);
          break;
        case 83:
          Dw(a, b, -b.width / 2, -b.height / 2 + eq * 2);
          break;
        case 84:
        case 86:
          Dw(a, b, -b.width / 2, -b.height / 2 + eq * 8);
          break;
        case 61:
          Dw(a, b, -b.width / 2, -b.height / 2 - eq * 4);
      }
    }
  }
  function ew() {
    if (!this.ΔⲆⲆᐃΔ && this.ᐃⵠΔⵠⵠ !== 0) {
      if (this.r.x != this.x || this.r.y != this.y) {
        var a = (ΔⵠΔᐃ.ⲆⵠᐃⲆᐃΔᐃ(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (Math.PI * 2);
        this.ΔᐃΔⲆᐃ = ΔⵠΔᐃ.ⲆᐃᐃΔⲆΔΔ(a, this.ΔᐃΔⲆᐃ);
        this.ΔᐃΔⲆᐃ = ΔⵠΔᐃ.ⲆⵠⵠΔⲆⲆⵠ(this.ΔᐃΔⲆᐃ, a, 0.018);
      }
      Eo.save();
      Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
      Eo.rotate(this.ΔᐃΔⲆᐃ);
      if (this.ᐃⵠΔⵠⵠ === 223) {
        if (this.ΔⵠΔⵠΔ > 50 || this.ΔΔⵠᐃⲆ > 0) {
          if (this.ΔⵠΔⵠΔ > 50) {
            this.ΔΔⵠᐃⲆ = Math.min(1, this.ΔΔⵠᐃⲆ + Jx);
          } else {
            this.ΔΔⵠᐃⲆ = Math.max(0, this.ΔΔⵠᐃⲆ - Jx);
          }
          Eo.globalAlpha = this.ΔΔⵠᐃⲆ;
          var b = ⲆⲆ[225][Cx.time];
          Cw(225, b, -b.width / 4, -b.height / 4);
          Eo.globalAlpha = 1;
        }
        b = ⲆⲆ[223][Cx.time];
        Cw(223, b, -b.width / 4, -b.height / 4);
      } else if (this.ᐃⵠΔⵠⵠ === 229) {
        this.ᐃⵠⲆΔⲆ = ΔⵠΔᐃ.ⲆⵠⵠΔⲆⲆⵠ(this.ᐃⵠⲆΔⲆ, this.ΔⵠΔⵠΔ, 0.018);
        this.ΔᐃⵠᐃⲆΔΔ.ᐃⲆⲆ();
        if (this.ΔⵠΔⵠΔ > 85) {
          this.ΔΔⵠᐃⲆ = Math.min(1, this.ΔΔⵠᐃⲆ + Jx / 4);
        } else {
          this.ΔΔⵠᐃⲆ = Math.max(0.1, this.ΔΔⵠᐃⲆ - Jx);
        }
        b = ⲆⲆ[1100][Cx.time];
        Cw(1100, b, -b.width / 4, -b.height / 4);
        b = ⲆⲆ[1103][Cx.time];
        ᐃᐃΔ = -b.width;
        ᐃΔΔ = -b.height;
        Eo.save();
        Eo.translate(eq * -20, eq * -20);
        Eo.rotate(this.ΔᐃⵠᐃⲆΔΔ.ⵠⵠⲆ * this.ΔΔⵠᐃⲆ);
        Wp(Eo, b, -ᐃᐃΔ / 4, -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
        Eo.restore();
        b = ⲆⲆ[1106][Cx.time];
        Eo.save();
        Eo.translate(eq * 20, eq * -20);
        Eo.rotate(this.ΔΔⵠᐃⲆ * -this.ΔᐃⵠᐃⲆΔΔ.ⵠⵠⲆ);
        Wp(Eo, b, -ᐃᐃΔ / 4, -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
        Eo.restore();
      } else if (this.ᐃⵠΔⵠⵠ === 228) {
        this.ᐃⵠⲆΔⲆ = ΔⵠΔᐃ.ⲆⵠⵠΔⲆⲆⵠ(this.ᐃⵠⲆΔⲆ, this.ΔⵠΔⵠΔ, 0.018);
        this.ΔᐃⵠᐃⲆΔΔ.ᐃⲆⲆ();
        if (this.ΔⵠΔⵠΔ > 85) {
          this.ΔΔⵠᐃⲆ = Math.min(1, this.ΔΔⵠᐃⲆ + Jx / 4);
        } else {
          this.ΔΔⵠᐃⲆ = Math.max(0.1, this.ΔΔⵠᐃⲆ - Jx);
        }
        b = ⲆⲆ[1085][Cx.time];
        Cw(1085, b, -b.width / 4, -b.height / 4);
        b = ⲆⲆ[1088][Cx.time];
        ᐃᐃΔ = -b.width;
        ᐃΔΔ = -b.height;
        Eo.save();
        Eo.translate(eq * -40, eq * -45);
        Eo.rotate(this.ΔΔⵠᐃⲆ * this.ΔᐃⵠᐃⲆΔΔ.ⵠⵠⲆ);
        Wp(Eo, b, -ᐃᐃΔ / 4, -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
        Eo.restore();
        b = ⲆⲆ[1091][Cx.time];
        Eo.save();
        Eo.translate(eq * 40, eq * -45);
        Eo.rotate(-this.ΔᐃⵠᐃⲆΔΔ.ⵠⵠⲆ * this.ΔΔⵠᐃⲆ);
        Wp(Eo, b, -ᐃᐃΔ / 4, -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
        Eo.restore();
      } else if (this.ᐃⵠΔⵠⵠ === 227) {
        this.ᐃⵠⲆΔⲆ = ΔⵠΔᐃ.ⲆⵠⵠΔⲆⲆⵠ(this.ᐃⵠⲆΔⲆ, this.ΔⵠΔⵠΔ, 0.018);
        this.ΔᐃⵠᐃⲆΔΔ.ᐃⲆⲆ();
        if (this.ΔⵠΔⵠΔ > 85) {
          this.ΔΔⵠᐃⲆ = Math.min(1, this.ΔΔⵠᐃⲆ + Jx / 4);
        } else {
          this.ΔΔⵠᐃⲆ = Math.max(0.1, this.ΔΔⵠᐃⲆ - Jx);
        }
        b = ⲆⲆ[1070][Cx.time];
        Cw(1070, b, -b.width / 4, -b.height / 4);
        b = ⲆⲆ[1073][Cx.time];
        ᐃᐃΔ = -b.width;
        ᐃΔΔ = -b.height;
        Eo.save();
        Eo.translate(eq * -40, eq * -45);
        Eo.rotate(this.ΔΔⵠᐃⲆ * this.ΔᐃⵠᐃⲆΔΔ.ⵠⵠⲆ);
        Wp(Eo, b, -ᐃᐃΔ / 4, -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
        Eo.restore();
        b = ⲆⲆ[1076][Cx.time];
        Eo.save();
        Eo.translate(eq * 40, eq * -45);
        Eo.rotate(-this.ΔᐃⵠᐃⲆΔΔ.ⵠⵠⲆ * this.ΔΔⵠᐃⲆ);
        Wp(Eo, b, -ᐃᐃΔ / 4, -ᐃΔΔ / 4, ᐃᐃΔ / 2, ᐃΔΔ / 2);
        Eo.restore();
      } else if (this.ᐃⵠΔⵠⵠ === 91) {
        this.ᐃⵠⲆΔⲆ = ΔⵠΔᐃ.ⲆⵠⵠΔⲆⲆⵠ(this.ᐃⵠⲆΔⲆ, this.ΔⵠΔⵠΔ, 0.018);
        b = ⲆⲆ[91][Cx.time];
        Cw(91, b, -b.width / 4, -b.height / 4);
      } else if (this.ᐃⵠΔⵠⵠ === 230) {
        this.ᐃⵠⲆΔⲆ = ΔⵠΔᐃ.ⲆⵠⵠΔⲆⲆⵠ(this.ᐃⵠⲆΔⲆ, this.ΔⵠΔⵠΔ, 0.018);
        b = ⲆⲆ[236][Cx.time];
        Cw(236, b, -b.width / 4, -b.height / 4);
      } else if (this.ᐃⵠΔⵠⵠ === 224) {
        b = ⲆⲆ[224][Cx.time];
        Cw(224, b, -b.width / 4, -b.height / 4);
      } else if (this.ᐃⵠΔⵠⵠ === 239) {
        b = ⲆⲆ[1221][Cx.time];
        if (this.ΔⵠΔⵠΔ > 85) {
          this.ΔΔⵠᐃⲆ = Math.min(1, this.ΔΔⵠᐃⲆ + Jx / 4);
        } else {
          this.ΔΔⵠᐃⲆ = Math.max(0, this.ΔΔⵠᐃⲆ - Jx);
        }
        this.ᐃᐃΔⵠᐃ += Jx * 60;
        if (this.ᐃᐃΔⵠᐃ > 60) {
          this.ᐃᐃΔⵠᐃ -= 60;
        }
        var c = this.ΔΔⵠᐃⲆ * (-6 + (this.ᐃᐃΔⵠᐃ < 30 ? this.ᐃᐃΔⵠᐃ / 30 : 1 - (this.ᐃᐃΔⵠᐃ - 30) / 30) * 12);
        Cw(1221, b, -b.width / 4, -b.height / 4 + c);
      } else if (this.ᐃⵠΔⵠⵠ === 225) {
        b = ⲆⲆ[1043][Cx.time];
        if (this.ΔⵠΔⵠΔ > 85) {
          this.ΔΔⵠᐃⲆ = Math.min(1, this.ΔΔⵠᐃⲆ + Jx / 4);
        } else {
          this.ΔΔⵠᐃⲆ = Math.max(0, this.ΔΔⵠᐃⲆ - Jx);
        }
        this.ᐃᐃΔⵠᐃ += Jx * 60;
        if (this.ᐃᐃΔⵠᐃ > 60) {
          this.ᐃᐃΔⵠᐃ -= 60;
        }
        c = (-6 + (this.ᐃᐃΔⵠᐃ < 30 ? this.ᐃᐃΔⵠᐃ / 30 : 1 - (this.ᐃᐃΔⵠᐃ - 30) / 30) * 12) * this.ΔΔⵠᐃⲆ;
        Cw(1043, b, -b.width / 4, -b.height / 4 + c);
      } else if (this.ᐃⵠΔⵠⵠ === 226) {
        var d = Math.PI / 2;
        var f = Math.PI / 4;
        b = ⲆⲆ[1055][Cx.time];
        if (this.ΔⵠΔⵠΔ > 85) {
          this.ΔΔⵠᐃⲆ = Math.min(1, this.ΔΔⵠᐃⲆ + Jx / 4);
        } else {
          this.ΔΔⵠᐃⲆ = Math.max(0, this.ΔΔⵠᐃⲆ - Jx);
        }
        this.ᐃᐃΔⵠᐃ += Jx * 60;
        if (this.ᐃᐃΔⵠᐃ > 60) {
          this.ᐃᐃΔⵠᐃ -= 60;
        }
        c = ((this.ᐃᐃΔⵠᐃ < 30 ? this.ᐃᐃΔⵠᐃ / 30 : 1 - (this.ᐃᐃΔⵠᐃ - 30) / 30) * 12 - 6) * this.ΔΔⵠᐃⲆ;
        Cw(1055, b, -b.width / 4 + c, -b.height / 4);
        Eo.restore();
        Eo.save();
        Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
        Eo.rotate(Math.PI + this.ΔᐃΔⲆᐃ + f);
        Eo.translate(120, c);
        Eo.rotate(d);
        b = ⲆⲆ[1060][Cx.time];
        ᐃᐃΔ = -b.width;
        ᐃΔΔ = -b.height;
        Wp(Eo, b, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
        Eo.restore();
        Eo.save();
        Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
        Eo.rotate(Math.PI + this.ΔᐃΔⲆᐃ + d + f);
        Eo.translate(120, c);
        Eo.rotate(d);
        b = ⲆⲆ[1063][Cx.time];
        ᐃᐃΔ = -b.width;
        ᐃΔΔ = -b.height;
        Wp(Eo, b, -ᐃᐃΔ / 2, -ᐃΔΔ / 2, ᐃᐃΔ, ᐃΔΔ);
      }
      Eo.restore();
    }
  }
  function fw() {
    var c = 0;
    switch (this.right) {
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
        c = 1;
    }
    if (this.ΔⲆⲆᐃΔ) {
      for (var f = 0; this.bubbles.length > f; f++) {
        var j = this.bubbles[f];
        if (j.ⵠⲆΔⲆⵠ > 0.5) {
          var k = 1 - (j.ⵠⲆΔⲆⵠ - 0.5) * 2;
        } else {
          k = j.ⵠⲆΔⲆⵠ * 2;
        }
        Eo.globalAlpha = k;
        var m = ⲆⲆ[540][Cx.time][j.id];
        Wp(Eo, m, Dx.ᐃΔᐃⲆ.x + j.x - m.width / 2, Dx.ᐃΔᐃⲆ.y + j.y - m.height / 2);
        Eo.globalAlpha = 1;
      }
    } else {
      Eo.save();
      Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
      Cx.ΔΔΔΔⲆᐃⲆᐃᐃ(this);
      if (this.action & 16) {
        (function (a) {
          if (a.right >= 0) {
            switch (a.right) {
              case 49:
                Eo.save();
                var b = a.attack.ⵠⵠⲆ * -3 / Math.PI;
                if (a.attack.ΔᐃⲆ) {
                  var c = -Math.PI / 3 - (Math.PI / 3 + a.attack.ⵠⵠⲆ) / 3;
                } else {
                  c = a.attack.ⵠⵠⲆ;
                }
                Eo.rotate(a.angle - Math.PI / 2 + c);
                Eo.globalAlpha = b / 1.2;
                Pd(Eo, eq * -40, eq * 90, eq * 5);
                Td(Eo, "#0B6A84");
                Eo.globalAlpha = b / 1.2;
                Pd(Eo, eq * -52, eq * 100, eq * 8);
                Td(Eo, "#0B6A84");
                Eo.globalAlpha = b / 1.2;
                Pd(Eo, eq * -30, eq * 95, eq * 4);
                Td(Eo, "#0B6A84");
                Eo.globalAlpha = 1;
                Eo.restore();
                break;
              case 46:
              case 50:
              case 51:
              case 52:
                if (a.ⲆⵠⵠΔΔⲆᐃ === 1) {
                  break;
                }
                if (a.ⵠⲆⲆⵠⲆ > 0) {
                  var d = ts.ⲆⲆΔΔᐃⲆⵠ[Cx.time];
                } else {
                  d = a.ᐃⵠΔᐃⲆᐃΔ > 0 || a.ΔⲆⲆⵠⵠ > 0 ? ts.ⵠᐃΔᐃΔⲆΔ[Cx.time] : ts.ΔⵠⲆⵠⲆⲆΔ[Cx.time];
                }
                b = a.attack.ⵠⵠⲆ * -3 / Math.PI;
                if ((c = a.attack.ΔᐃⲆ ? Math.max(0.5 - b / 2 + 0.5, 0) : Math.max(b / 2, 0)) === 0) {
                  a.ⵠⲆⵠᐃⲆⵠΔ = a.angle;
                }
                Eo.save();
                Eo.rotate(a.ⵠⲆⵠᐃⲆⵠΔ - Math.PI / 2);
                Eo.globalAlpha = b;
                var f = eq * 25 + c * 25;
                Pd(Eo, f, eq * 80, eq * 15);
                Td(Eo, d);
                Pd(Eo, -f, eq * 80, eq * 15);
                Td(Eo, d);
                Eo.globalAlpha = 1;
                Eo.restore();
            }
          }
        })(this);
      }
      Eo.save();
      Eo.rotate(this.angle - Math.PI / 2);
      if (!(this.action & 16)) {
        if (this.action & 64 || this.ᐃⵠΔⵠⵠ !== 0) {
          this.ΔᐃⲆⵠⵠᐃⵠ.ᐃⲆⲆ();
        } else if (this.action & 32) {
          this.ⵠⲆΔᐃⲆⲆⲆ.ᐃⲆⲆ();
        }
      }
      var p;
      var q = this.ΔᐃⲆⵠⵠᐃⵠ.ⵠⵠⲆ;
      var v = this.ⵠⲆΔᐃⲆⲆⲆ.ⵠⵠⲆ;
      if (this.ⵠᐃⲆⲆⵠ === 85) {
        m = ⲆⲆ[793][Cx.time];
        p = 793;
      } else if (this.ⵠᐃⲆⲆⵠ === 20) {
        m = ⲆⲆ[920][Cx.time];
        p = 920;
      } else if (this.ⵠᐃⲆⲆⵠ === 21) {
        m = ⲆⲆ[924][Cx.time];
        p = 924;
      } else if (this.ⵠᐃⲆⲆⵠ === 22) {
        m = ⲆⲆ[928][Cx.time];
        p = 928;
      } else if (this.ⲆⵠⵠΔᐃⵠΔ) {
        m = ⲆⲆ[822][Cx.time];
        p = 822;
      } else {
        m = ⲆⲆ[7][this.ⵠΔᐃⵠ][Cx.time];
        p = 7;
      }
      Ⲇⵠⵠᐃ = ⲆⲆ[286][Cx.time];
      var w = m;
      var h = p;
      if (this.action & 16) {
        if (this.attack.ᐃⲆⲆ() && this.attack.ΔᐃⲆ == 0) {
          this.ᐃⲆⲆᐃᐃ = !this.ᐃⲆⲆᐃᐃ;
          this.action -= 16;
          if (this.ᐃΔᐃΔ == Dx.ᐃΔᐃΔ) {
            Dx.control.ⲆⵠⵠⲆ = 0;
          }
        }
        if (this.right >= 0) {
          this.ᐃⲆⲆᐃᐃ = qg;
        }
        var l = this.ᐃⲆⲆᐃᐃ ? this.attack.ⵠⵠⲆ : -this.attack.ⵠⵠⲆ / 3;
        var x = this.ᐃⲆⲆᐃᐃ ? this.attack.ⵠⵠⲆ / 3 : -this.attack.ⵠⵠⲆ;
        if (this.ⲆⵠⵠΔᐃⵠΔ) {
          Eo.save();
          Eo.rotate(l);
          Dw(p, m, -m.width / 2 - (66 + q) * eq, -m.height / 2 + eq * (5 + v));
          Eo.restore();
          Eo.save();
          Eo.rotate(x);
          Dw(p, m, -m.width / 2 + eq * (66 + q), -m.height / 2 + (5 + v) * eq);
          Eo.restore();
        } else if (c === 0) {
          if (this.right === 64) {
            l = -ΔⵠΔᐃ.ᐃⲆⲆⵠᐃⲆΔ(-l);
          }
          Eo.save();
          Eo.rotate(l);
          Dw(286, Ⲇⵠⵠᐃ, -Ⲇⵠⵠᐃ.width / 2 - eq * (49 + q), -Ⲇⵠⵠᐃ.height / 2 + eq * (15 + v));
          if (this.right === 28) {
            var u = ⲆⲆ[this.right][this.ΔⵠᐃᐃΔ][Cx.time];
            tf(this.right, this.ΔⵠᐃᐃΔ, u, -u.width / 4 - eq * (62 + q), -u.height / 4 + eq * (v + 18));
          } else {
            Lv(this.right, q, v);
          }
          if (p >= 920) {
            Cw(p, m, -m.width / 4 - eq * (49 + q), -m.height / 4 + eq * (11 + v));
          } else if (p !== 793) {
            tf(p, this.ⵠΔᐃⵠ, m, -m.width / 4 - (49 + q) * eq, -m.height / 4 + (11 + v) * eq);
          } else {
            Dw(p, m, -m.width / 2 - (49 + q) * eq, -m.height / 2 + (11 + v) * eq);
          }
          Eo.restore();
          Eo.save();
          Eo.rotate(x);
          Dw(286, Ⲇⵠⵠᐃ, -Ⲇⵠⵠᐃ.width / 2 + (49 + q) * eq, -Ⲇⵠⵠᐃ.height / 2 + eq * (15 + v));
          if (p >= 920) {
            Cw(p, m, -m.width / 4 + (49 + q) * eq, -m.height / 4 + eq * (11 + v));
          } else if (p !== 793) {
            tf(p, this.ⵠΔᐃⵠ, m, -m.width / 4 + (49 + q) * eq, -m.height / 4 + eq * (11 + v));
          } else {
            Dw(p, m, -m.width / 2 + (49 + q) * eq, -m.height / 2 + eq * (11 + v));
          }
          Eo.restore();
        }
      } else if (this.ⲆⵠⵠΔᐃⵠΔ) {
        Dw(p, m, -m.width / 2 - eq * (66 + q), -m.height / 2 + (5 + v) * eq);
        Dw(p, m, -m.width / 2 + (66 + q) * eq, -m.height / 2 + eq * (5 + v));
      } else if (c === 0) {
        Dw(286, Ⲇⵠⵠᐃ, -Ⲇⵠⵠᐃ.width / 2 - eq * (49 + q), -Ⲇⵠⵠᐃ.height / 2 + eq * (15 + v));
        if (this.right === 28) {
          u = ⲆⲆ[this.right][this.ΔⵠᐃᐃΔ][Cx.time];
          tf(this.right, this.ΔⵠᐃᐃΔ, u, -u.width / 4 - eq * (62 + q), -u.height / 4 + (v + 18) * eq);
        } else {
          Lv(this.right, q, v);
        }
        if (p >= 920) {
          Cw(p, m, -m.width / 4 - eq * (49 + q), -m.height / 4 + eq * (11 + v));
        } else if (p !== 793) {
          tf(p, this.ⵠΔᐃⵠ, m, -m.width / 4 - eq * (49 + q), -m.height / 4 + eq * (11 + v));
        } else {
          Dw(p, m, -m.width / 2 - eq * (49 + q), -m.height / 2 + eq * (11 + v));
        }
        Dw(286, Ⲇⵠⵠᐃ, -Ⲇⵠⵠᐃ.width / 2 + eq * (49 + q), -Ⲇⵠⵠᐃ.height / 2 + (15 + v) * eq);
        if (p >= 920) {
          Cw(p, m, -m.width / 4 + eq * (49 + q), -m.height / 4 + eq * (11 + v));
        } else if (p !== 793) {
          tf(p, this.ⵠΔᐃⵠ, m, -m.width / 4 + (49 + q) * eq, -m.height / 4 + (11 + v) * eq);
        } else {
          Dw(p, m, -m.width / 2 + eq * (49 + q), -m.height / 2 + (11 + v) * eq);
        }
      }
      if (this.ᐃⲆⲆΔⲆ && this.ⵠᐃⲆⲆⵠ < 1) {
        m = ⲆⲆ[29][this.ⵠᐃᐃΔΔΔⵠ][Cx.time];
        tf(29, this.ⵠᐃᐃΔΔΔⵠ, m, -m.width / 4, -m.height / 4 - eq * 39);
      }
      if (this.ⲆⵠⵠΔᐃⵠΔ) {
        m = ⲆⲆ[820][Cx.time];
        Dw(820, m, -m.width / 2, -m.height / 2);
        this.ᐃΔΔⲆⵠⵠᐃ.ᐃⲆⲆ();
        m = ⲆⲆ[821][Cx.time];
        Dw(821, m, -m.width / 2, -m.height / 2 + this.ᐃΔΔⲆⵠⵠᐃ.ⵠⵠⲆ);
      } else {
        m = ⲆⲆ[255][this.ⵠΔᐃⵠ][Cx.time];
        if (this.ⵠᐃⲆⲆⵠ !== 85 && (tf(255, this.ⵠΔᐃⵠ, m, -m.width / 4, -m.height / 4), this.ΔⵠΔΔⵠ > 0)) {
          m = ⲆⲆ[796][this.ΔⵠΔΔⵠ][Cx.time];
          tf(796, this.ΔⵠΔΔⵠ, m, -m.width / 4, -m.height / 4);
        }
      }
      if (this.action & 128) {
        if (this.ᐃᐃΔⲆⲆ.ᐃⲆⲆ() && Ml == this.ᐃᐃΔⲆⲆ.ΔᐃⲆ) {
          this.action -= 128;
        }
        Eo.globalAlpha = 0.6 - this.ᐃᐃΔⲆⲆ.ⵠⵠⲆ;
        if (this.ⲆⵠⵠΔᐃⵠΔ) {
          m = ⲆⲆ[825];
          Wp(Eo, m, -m.width / 2, -m.height / 2);
        } else {
          m = jw(this.ⵠΔᐃⵠ, ⲆⲆ[255][this.ⵠΔᐃⵠ][0], ᐃⲆⵠⵠⵠᐃᐃᐃⲆ);
          Wp(Eo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        }
        Eo.globalAlpha = 1;
      }
      if (this.action & 256) {
        if (this.ΔⲆⵠΔⵠΔⲆ.ᐃⲆⲆ() && this.ΔⲆⵠΔⵠΔⲆ.ΔᐃⲆ == al) {
          this.action -= 256;
        }
        Eo.globalAlpha = 0.6 - this.ΔⲆⵠΔⵠΔⲆ.ⵠⵠⲆ;
        m = ⲆⲆ[266];
        Wp(Eo, m, -m.width / 2, -m.height / 2);
        Eo.globalAlpha = 1;
      }
      if (this.action & 2) {
        if (this.ᐃΔⲆΔ.ᐃⲆⲆ() && this.ᐃΔⲆΔ.ΔᐃⲆ == 0) {
          this.action -= 2;
        }
        Eo.globalAlpha = 0.6 - this.ᐃΔⲆΔ.ⵠⵠⲆ;
        if (this.ⲆⵠⵠΔᐃⵠΔ) {
          m = ⲆⲆ[823];
          Wp(Eo, m, -m.width / 2, -m.height / 2);
        } else {
          m = jw(this.ⵠΔᐃⵠ, ⲆⲆ[255][this.ⵠΔᐃⵠ][0], ⵠⲆᐃⵠⲆΔⲆΔⵠ);
          Wp(Eo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        }
        Eo.globalAlpha = 1;
      }
      if (this.action & 4) {
        if (this.freeze.ᐃⲆⲆ() && this.freeze.ΔᐃⲆ == 0) {
          this.action -= 4;
        }
        Eo.globalAlpha = 0.6 - this.freeze.ⵠⵠⲆ;
        m = jw(this.ⵠΔᐃⵠ, ⲆⲆ[255][this.ⵠΔᐃⵠ][0], ⵠⲆⵠᐃᐃᐃⲆᐃᐃ);
        Wp(Eo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        Eo.globalAlpha = 1;
      }
      if (this.action & 8) {
        if (this.ⲆⵠⲆᐃⲆⵠᐃ.ᐃⲆⲆ() && this.ⲆⵠⲆᐃⲆⵠᐃ.ΔᐃⲆ == 0) {
          this.action -= 8;
        }
        Eo.globalAlpha = 0.6 - this.ⲆⵠⲆᐃⲆⵠᐃ.ⵠⵠⲆ;
        if (this.ⲆⵠⵠΔᐃⵠΔ) {
          m = ⲆⲆ[824];
          Wp(Eo, m, -m.width / 2, -m.height / 2);
        } else {
          m = jw(this.ⵠΔᐃⵠ, ⲆⲆ[255][this.ⵠΔᐃⵠ][0], ΔᐃΔᐃᐃΔⲆᐃΔ);
          Wp(Eo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        }
        Eo.globalAlpha = 1;
      }
      dw(this.ⵠᐃⲆⲆⵠ);
      if (c === 1) {
        if (this.action & 16) {
          q += this.attack.ⵠⵠⲆ * 15;
        }
        Dw(286, Ⲇⵠⵠᐃ, -Ⲇⵠⵠᐃ.width / 2 - eq * 26, -Ⲇⵠⵠᐃ.height / 2 + (31 + v + q) * eq);
        if (h >= 920) {
          Cw(h, w, -w.width / 4 - eq * 26, -w.height / 4 + (27 + v + q) * eq);
        } else if (h !== 793) {
          tf(h, this.ⵠΔᐃⵠ, w, -w.width / 4 - eq * 26, -w.height / 4 + (27 + v + q) * eq);
        } else {
          Dw(h, w, -w.width / 2 - eq * 26, -w.height / 2 + (27 + v + q) * eq);
        }
        Dw(286, Ⲇⵠⵠᐃ, -Ⲇⵠⵠᐃ.width / 2 + eq * 26, -Ⲇⵠⵠᐃ.height / 2 + (31 + v + q) * eq);
        if (h >= 920) {
          Cw(h, w, -w.width / 4 + eq * 26, -w.height / 4 + eq * (27 + v + q));
        } else if (h !== 793) {
          tf(h, this.ⵠΔᐃⵠ, w, -w.width / 4 + eq * 26, -w.height / 4 + (27 + v + q) * eq);
        } else {
          Dw(h, w, -w.width / 2 + eq * 26, -w.height / 2 + (27 + v + q) * eq);
        }
        lv(this.right, 0, v + q);
      }
      Eo.restore();
      if (this.ⵠᐃⲆⲆⵠ !== 83 && this.ⵠᐃⲆⲆⵠ !== 85) {
        if (this.ⵠⲆⲆⵠⲆ > 0) {
          this.ΔΔᐃᐃ.ⵠⲆΔΔΔⵠᐃ ||= _c(eq, this.ΔΔᐃᐃ.ⲆⵠΔᐃΔ, 20, "#187484", "#000", 2, null, null, eq * 300);
          m = this.ΔΔᐃᐃ.ⵠⲆΔΔΔⵠᐃ;
        } else {
          if (!this.ΔΔᐃᐃ.label) {
            this.ΔΔᐃᐃ.label = _c(eq, this.ΔΔᐃᐃ.ⲆⵠΔᐃΔ, 20, "#FFF", "#000", 2, null, null, eq * 300);
          }
          m = this.ΔΔᐃᐃ.label;
        }
        if (Cx.ⲆⲆⵠ == 1) {
          Eo.globalAlpha = 0.5;
        }
        q = Math.floor(-m.width / 2);
        v = Math.floor(-m.height / 2 - eq * 70);
        Wp(Eo, m, q, v);
        if (this.ΔΔᐃᐃ.level > 0) {
          var y = q + m.width + 5;
          m = ⲆⲆ[885];
          if (ⵠᐃⲆΔᐃᐃⲆ[this.ΔΔᐃᐃ.level] === ar) {
            ⵠᐃⲆΔᐃᐃⲆ[this.ΔΔᐃᐃ.level] = _c(eq, "[" + this.ΔΔᐃᐃ.level + "]", 20, "#F9E8A2", "#000", 2, null, null, eq * 50);
          }
          Wp(Eo, ⵠᐃⲆΔᐃᐃⲆ[this.ΔΔᐃᐃ.level], y, v);
        }
        Eo.globalAlpha = 1;
      } else {
        v = Math.floor(eq * -70);
        q = Math.floor(ⲆⲆ[558].width / 1.5);
      }
      if (Dx.ⵠᐃᐃΔⲆᐃᐃ(this.ⲆΔⲆΔ)) {
        if (Dx.ᐃᐃᐃᐃⵠ[0] == this.ⲆΔⲆΔ) {
          m = ⲆⲆ[559];
        } else {
          m = ⲆⲆ[558];
        }
        Wp(Eo, m, q - m.width - 5, v - 6);
      }
      Eo.restore();
    }
  }
  function gw(a, b) {
    if (this.text) {
      if (this.timeout.ΔᐃⲆ) {
        Eo.globalAlpha = 1 - this.timeout.ⵠⵠⲆ;
      } else {
        Eo.globalAlpha = 1;
      }
      if (!this.label) {
        this.label = _c(eq, this.text, 40, a, null, null, null, null, null, b, 10);
      }
      Wp(Eo, this.label, (Qo - this.label.width) / 2, eq * 50);
      Eo.globalAlpha = 1;
      if (this.timeout.ᐃⲆⲆ() && this.timeout.ΔᐃⲆ == 0) {
        this.text = this.list.shift();
        this.label = null;
      }
    }
  }
  function hw() {
    if (this.enabled && this.ⵠᐃΔⵠΔ >= 0) {
      var a = new Date().getTime() - this.ⵠᐃΔⵠΔ;
      var b = a % 1000 / 1000;
      if (b > 0.5) {
        b = 1 - (b - 0.5) * 2;
      } else {
        b *= 2;
      }
      a = Math.floor(a / 1000);
      if (a < 60) {
        a = 60 - a;
        if (!this.label) {
          this.label = _c(eq, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
        }
        if (a != this.now || !this.ⵠΔᐃᐃⲆⵠⲆ) {
          this.now = a;
          this.ⵠΔᐃᐃⲆⵠⲆ = _c(eq, "" + a, 40, "#660000", null, null, null, null, null, "#000", 10);
        }
        Wp(Eo, this.label, (Qo - this.label.width) / 2, eq * 100);
        Eo.globalAlpha = b;
        Wp(Eo, this.ⵠΔᐃᐃⲆⵠⲆ, (Qo - this.label.width) / 2 - this.ⵠΔᐃᐃⲆⵠⲆ.width + eq * 15, eq * 100);
        Eo.globalAlpha = 1;
      }
    }
  }
  function iw() {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + this.x, Dx.ᐃΔᐃⲆ.y + this.y);
    if (this.text.length > 0) {
      for (var a = 0; a < this.text.length && a < 2; a++) {
        if (!this.label[a]) {
          this.label[a] = xd(eq, this.text[a]);
          this.ΔᐃⲆΔΔⵠⲆ[a] = 0;
          this.ΔⲆᐃⵠΔᐃⵠ[a] = 0;
        }
        if (a === 1) {
          this.ΔⲆᐃⵠΔᐃⵠ[0] = ΔⵠΔᐃ.ⵠⲆΔΔΔ(this.ⵠᐃΔⵠΔᐃΔ) * 30;
        }
      }
      this.ΔᐃⲆΔΔⵠⲆ[0] += Jx;
      if (this.text.length > 1) {
        this.ⵠᐃΔⵠΔᐃΔ = Math.min(this.ⵠᐃΔⵠΔᐃΔ + Jx, 1);
        if (this.ΔᐃⲆΔΔⵠⲆ[0] > 1 && this.ⵠᐃΔⵠΔᐃΔ > 0.5) {
          this.ΔᐃⲆΔΔⵠⲆ[1] += Jx;
        }
      }
      for (a = 0; this.text.length > a && a < 2; a++) {
        var b = this.ΔᐃⲆΔΔⵠⲆ[a];
        if (b > 0) {
          Eo.globalAlpha = b < 0.25 ? b * 4 : b > 3.75 ? Math.max((4 - b) * 4, 0) : 1;
          Wp(Eo, this.label[a], -this.label[a].width / 2, -this.ΔⲆᐃⵠΔᐃⵠ[a] + -this.label[a].height / 2 - eq * 110);
        }
      }
      if (this.ΔᐃⲆΔΔⵠⲆ[0] > 4) {
        this.ΔᐃⲆΔΔⵠⲆ.shift();
        this.text.shift();
        this.ΔⲆᐃⵠΔᐃⵠ.shift();
        this.label.shift();
        this.ⵠᐃΔⵠΔᐃΔ = 0;
      }
    }
    Eo.restore();
  }
  function jw(b, c, d) {
    if (c.ⲆⲆⵠΔⲆⲆⵠ() !== 1) {
      return c;
    }
    var f = ⲆⵠᐃΔⵠⵠⵠ[d][b];
    if (f === ah) {
      var g = (f = document.createElement("canvas")).getContext("2d");
      var h = c.width;
      var a = c.height;
      f.width = h;
      f.height = a;
      g.drawImage(c, 0, 0);
      g.globalCompositeOperation = "source-in";
      g.fillStyle = ΔᐃᐃⵠᐃⲆⲆⵠⵠ[d];
      g.fillRect(0, 0, h, a);
      ⲆⵠᐃΔⵠⵠⵠ[d][b] = f;
    }
    return f;
  }
  function kw() {
    if (cq !== this.message) {
      var a = Dx.ᐃᐃᐃΔ.ΔⲆⲆΔΔ.length > 0 ? -95 : 0;
      Wp(Eo, this.message, 0, aq - this.message.height + a);
    }
  }
  ⵠⲆᐃⵠⲆΔⲆΔⵠ = 0;
  ᐃⲆⵠⵠⵠᐃᐃᐃⲆ = 1;
  ⵠⲆⵠᐃᐃᐃⲆᐃᐃ = 2;
  ΔᐃΔᐃᐃΔⲆᐃΔ = 3;
  ⲆᐃᐃᐃⲆΔⲆΔⲆ = 4;
  ⲆⵠᐃΔⵠⵠⵠ = [[], [], [], [], []];
  ΔᐃᐃⵠᐃⲆⲆⵠⵠ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
  var lw = 0;
  function mw(j, k, i, q, n, o, a, r) {
    if (Wn === r) {
      r = 0;
    }
    Cx.ⵠⵠⲆΔ[n].ᐃⲆⲆ();
    for (var t = a; t >= r; t--) {
      for (var w = j; w <= k; w++) {
        for (var x = i; q >= x; x++) {
          var y = Ax.ⲆⵠⲆᐃ[w][x];
          if (y && y[o]) {
            var z = y[o][t];
            if (z !== Al) {
              for (var A = 0; z.length > A; A++) {
                var B = z[A];
                if (B.ᐃⲆⲆ) {
                  if (B.ᐃΔⲆΔ.ᐃⲆⲆ() && B.ᐃΔⲆΔ.ΔᐃⲆ == 0) {
                    B.ᐃⲆⲆ = tg;
                  }
                  var D = eq * (Jx * (1 - B.ᐃΔⲆΔ.ⵠⵠⲆ) * 600);
                  var E = D * Math.sin(B.angle);
                  var F = D * Math.cos(B.angle);
                } else {
                  E = 0;
                  F = 0;
                }
                var G = ⲆⲆ[n][Cx.time][t];
                var H = Cx.ⵠⵠⲆΔ[n].ⵠⵠⲆ * -G.width;
                var I = -G.height * Cx.ⵠⵠⲆΔ[n].ⵠⵠⲆ;
                Wp(Eo, G, Dx.ᐃΔᐃⲆ.x + B.x - H / 2 + E, Dx.ᐃΔᐃⲆ.y + B.y - I / 2 + F, H, I);
              }
            }
          }
        }
      }
    }
  }
  function nw(j, k, i, q, n, o, a, r = 0) {
    for (var s = a; r <= s; s--) {
      for (var t = j; k >= t; t++) {
        for (var w = i; w <= q; w++) {
          var x = Ax.ⲆⵠⲆᐃ[t][w];
          if (x && x[o]) {
            var y = x[o][s];
            if (y !== kn) {
              for (var z = 0; z < y.length; z++) {
                var A = y[z];
                var B = ⲆⲆ[n][Cx.time][s];
                var D = (lw + (t + w) * 3) % 60;
                var E = D < 30 ? D / 30 : 1 - (D - 30) / 30;
                var F = (1 + E * 0.9 / 30) * -B.width;
                var G = (1 + E * 0.9 / 30) * -B.height;
                E = (D = (lw + (t + w) * 7) % 60) < 30 ? D / 30 : 1 - (D - 30) / 30;
                var H = Eo.globalAlpha;
                Eo.globalAlpha = H * (0.9 + E * 0.1);
                Wp(Eo, B, Dx.ᐃΔᐃⲆ.x + A.x - F / 2, Dx.ᐃΔᐃⲆ.y + A.y - G / 2, F, G);
                Eo.globalAlpha = H;
              }
            }
          }
        }
      }
    }
  }
  var ow = [];
  for (jb = 0; jb < 100; jb++) {
    var pw = 1;
    if (Math.random() < 0.25) {
      pw = 0;
    }
    ow.push(pw);
  }
  function qw(c, f, i, j, k, m, a, n = 0, o) {
    for (var h = c; h <= f; h++) {
      for (var p = i; p <= j; p++) {
        var q = Ax.ⲆⵠⲆᐃ[h][p];
        if (q !== undefined && q[m] !== undefined) {
          var r = q[m];
          if (r !== undefined) {
            if (r.scale === 1) {
              var s = ⲆⲆ[k][Cx.time][r.ΔⲆΔⵠ];
              Eo.save();
              Eo.translate(Dx.ᐃΔᐃⲆ.x + r.x, Dx.ᐃΔᐃⲆ.y + r.y);
              Eo.rotate(r.angle);
              Wp(Eo, s, -s.width / 4, -s.height / 4, s.width / 2, s.height / 2);
              Eo.restore();
            } else if (r.scale === 3) {
              for (var t = 0; t < r.ⲆⵠⲆ.length; t++) {
                Eo.save();
                Eo.translate(Dx.ᐃΔᐃⲆ.x + r.x, Dx.ᐃΔᐃⲆ.y + r.y);
                Eo.rotate(r.ⲆⵠⲆ[t].angle);
                s = ⲆⲆ[k][Cx.time][r.ⲆⵠⲆ[t].ΔⲆΔⵠ];
                Wp(Eo, s, -s.width / 3 + r.ⲆⵠⲆ[t].x, -s.height / 3 + r.ⲆⵠⲆ[t].y, s.width / 1.5, s.height / 1.5);
                Eo.restore();
              }
            } else {
              s = ⲆⲆ[k][Cx.time][r.ΔⲆΔⵠ];
              Eo.save();
              Eo.translate(Dx.ᐃΔᐃⲆ.x + r.x, Dx.ᐃΔᐃⲆ.y + r.y);
              Eo.rotate(r.angle);
              Wp(Eo, s, -s.width / 2, -s.height / 2, s.width, s.height);
              Eo.restore();
            }
          }
        }
      }
    }
  }
  function rw(f, j, i, k, n, o, a, q, r) {
    if (q === cq) {
      q = 0;
    }
    for (var h = a; q <= h; h--) {
      for (var t = f; j >= t; t++) {
        for (var w = i; k >= w; w++) {
          if (r <= 0 || ow[(t + w * r) % ow.length] !== 1) {
            var x = Ax.ⲆⵠⲆᐃ[t][w];
            if (x !== undefined && Xq !== x[o]) {
              var y = x[o][h];
              if (y !== undefined) {
                for (var z = 0; y.length > z; z++) {
                  var A = y[z];
                  if (A.ᐃⲆⲆ) {
                    if (A.ᐃΔⲆΔ.ᐃⲆⲆ() && A.ᐃΔⲆΔ.ΔᐃⲆ == ns) {
                      A.ᐃⲆⲆ = false;
                    }
                    var B = Jx * (1 - A.ᐃΔⲆΔ.ⵠⵠⲆ) * 600 * eq;
                    var D = B * Math.sin(A.angle);
                    var E = Math.cos(A.angle) * B;
                  } else {
                    D = 0;
                    E = 0;
                  }
                  var F = ⲆⲆ[n][Cx.time][h];
                  Wp(Eo, F, Dx.ᐃΔᐃⲆ.x + A.x - F.width / (ᐃᐃⲆᐃⵠ * 2) + D, Dx.ᐃΔᐃⲆ.y + A.y - F.height / (ᐃᐃⲆᐃⵠ * 2) + E, F.width / ᐃᐃⲆᐃⵠ, F.height / ᐃᐃⲆᐃⵠ);
                }
              }
            }
          }
        }
      }
    }
  }
  function sw(j, k, i, q, n, o, a, r, t) {
    if (Wn === r) {
      r = 0;
    }
    for (var h = a; r <= h; h--) {
      for (var w = j; w <= k; w++) {
        for (var x = i; x <= q; x++) {
          var A = Ax.ⲆⵠⲆᐃ[w][x];
          if (A !== Xj && A[o] !== undefined) {
            var B = A[o][h];
            if (B !== undefined) {
              for (var D = 0; B.length > D; D++) {
                var E = B[D];
                if (E.ᐃⲆⲆ) {
                  if (E.ᐃΔⲆΔ.ᐃⲆⲆ() && E.ᐃΔⲆΔ.ΔᐃⲆ == 0) {
                    E.ᐃⲆⲆ = ba;
                  }
                  var F = eq * (Jx * (1 - E.ᐃΔⲆΔ.ⵠⵠⲆ) * 600);
                  var G = F * Math.sin(E.angle);
                  var H = Math.cos(E.angle) * F;
                } else {
                  G = 0;
                  H = 0;
                }
                for (var I = 0; I < ⲆⲆᐃᐃⲆⵠΔ[h].ΔⵠⲆⵠ; I++) {
                  if (Cx.ΔᐃΔᐃⲆ[I].ΔᐃⵠⵠΔΔΔ !== Kx) {
                    Cx.ΔᐃΔᐃⲆ[I].ᐃⲆⲆ();
                    Cx.ΔᐃΔᐃⲆ[I].ΔᐃⵠⵠΔΔΔ = Kx;
                  }
                  var J = ⲆⲆ[941][Cx.time][ⲆⲆᐃᐃⲆⵠΔ[h].ᐃᐃⵠⵠ[I].ⵠΔΔ];
                  var K = -J.width * Cx.ΔᐃΔᐃⲆ[I].ⵠⵠⲆ;
                  var L = Cx.ΔᐃΔᐃⲆ[I].ⵠⵠⲆ * -J.height;
                  Wp(Eo, J, Dx.ᐃΔᐃⲆ.x + E.x - K / 4 + G + ⲆⲆᐃᐃⲆⵠΔ[h].ᐃᐃⵠⵠ[I].x, Dx.ᐃΔᐃⲆ.y + E.y - L / 4 + H + ⲆⲆᐃᐃⲆⵠΔ[h].ᐃᐃⵠⵠ[I].y, K / 2, L / 2);
                }
              }
            }
          }
        }
      }
    }
  }
  ᐃᐃⲆᐃⵠ = 1;
  ⲆⲆᐃᐃⲆⵠΔ = [{
    ΔⵠⲆⵠ: 10,
    ᐃᐃⵠⵠ: [{
      x: -128,
      y: -20,
      ⵠΔΔ: 0
    }, {
      x: -86,
      y: -4,
      ⵠΔΔ: 1
    }, {
      ⵠΔΔ: 2,
      x: -60,
      y: -74
    }, {
      y: -144,
      ⵠΔΔ: 0,
      x: -22
    }, {
      y: 86,
      x: -58,
      ⵠΔΔ: 0
    }, {
      y: -30,
      ⵠΔΔ: 0,
      x: 3
    }, {
      y: -115,
      ⵠΔΔ: 1,
      x: 65
    }, {
      ⵠΔΔ: 0,
      x: 118,
      y: -50
    }, {
      y: 15,
      x: 73,
      ⵠΔΔ: 1
    }, {
      x: 67,
      y: 79,
      ⵠΔΔ: 0
    }]
  }, {
    ΔⵠⲆⵠ: 5,
    ᐃᐃⵠⵠ: [{
      x: -45,
      ⵠΔΔ: 0,
      y: -26
    }, {
      ⵠΔΔ: 2,
      x: -45,
      y: 20
    }, {
      y: -60,
      ⵠΔΔ: 1,
      x: 10
    }, {
      x: 52,
      y: -17,
      ⵠΔΔ: 1
    }, {
      x: 14,
      ⵠΔΔ: 0,
      y: 45
    }]
  }, {
    ΔⵠⲆⵠ: 3,
    ᐃᐃⵠⵠ: [{
      ⵠΔΔ: 2,
      x: -30,
      y: 3
    }, {
      y: -38,
      ⵠΔΔ: 2,
      x: 7
    }, {
      ⵠΔΔ: 2,
      y: 5,
      x: 37
    }]
  }, {
    ΔⵠⲆⵠ: 11,
    ᐃᐃⵠⵠ: [{
      ⵠΔΔ: 2,
      x: -74,
      y: -87
    }, {
      x: -11,
      y: -10,
      ⵠΔΔ: 1
    }, {
      ⵠΔΔ: 1,
      x: -99,
      y: 17
    }, {
      x: -66,
      y: 84,
      ⵠΔΔ: 0
    }, {
      ⵠΔΔ: 1,
      x: -55,
      y: 123
    }, {
      y: 81,
      x: 10,
      ⵠΔΔ: 2
    }, {
      y: 50,
      ⵠΔΔ: 0,
      x: 52
    }, {
      y: 9,
      ⵠΔΔ: 1,
      x: 138
    }, {
      ⵠΔΔ: 0,
      y: -28,
      x: 104
    }, {
      ⵠΔΔ: 2,
      y: -56,
      x: 67
    }, {
      x: 5,
      y: -112,
      ⵠΔΔ: 0
    }]
  }, {
    ΔⵠⲆⵠ: 6,
    ᐃᐃⵠⵠ: [{
      x: -33,
      y: -66,
      ⵠΔΔ: 2
    }, {
      x: -58,
      ⵠΔΔ: 0,
      y: 10
    }, {
      ⵠΔΔ: 1,
      y: 44,
      x: -19
    }, {
      ⵠΔΔ: 0,
      x: 44,
      y: 20
    }, {
      ⵠΔΔ: 2,
      x: 53,
      y: -36
    }, {
      ⵠΔΔ: 0,
      x: 7,
      y: -62
    }]
  }, {
    ΔⵠⲆⵠ: 3,
    ᐃᐃⵠⵠ: [{
      y: -25,
      ⵠΔΔ: 1,
      x: -19
    }, {
      ⵠΔΔ: 2,
      x: -29,
      y: 13
    }, {
      y: 12,
      ⵠΔΔ: 0,
      x: 12
    }]
  }];
  var tw = 0;
  var uw = 0;
  var vw = 0;
  var ww = 0;
  function xw() {
    Eo.globalAlpha = 1;
    if (Cx.transition) {
      var a = Cx.ᐃⲆᐃΔ.ᐃⲆⲆ();
    }
    Cx.ΔⲆⲆᐃᐃᐃᐃΔΔ(-Dx.ᐃΔᐃⲆ.x, -Dx.ᐃΔᐃⲆ.y);
    tw = Math.max(Math.floor(-Dx.ᐃΔᐃⲆ.x / Cx.ᐃⲆⵠᐃΔΔᐃ) - 5, 0);
    uw = Math.min(Math.floor((-Dx.ᐃΔᐃⲆ.x + Dx.ᐃΔᐃⲆ.w) / Cx.ᐃⲆⵠᐃΔΔᐃ) + 4, Cx.ⲆᐃⲆⵠᐃ - 1);
    vw = Math.max(Math.floor(-Dx.ᐃΔᐃⲆ.y / Cx.ᐃⵠΔⵠⲆᐃᐃ) - 3, 0);
    ww = Math.min(Math.floor((-Dx.ᐃΔᐃⲆ.y + Dx.ᐃΔᐃⲆ.ᐃΔΔ) / Cx.ᐃⵠΔⵠⲆᐃᐃ) + 3, Cx.ⲆⵠΔΔΔ - 1);
    (function () {
      for (var c = Cx.ΔᐃⵠⲆⵠ.length - 1; c >= 0; c--) {
        if ((A = Cx.ΔᐃⵠⲆⵠ[c]).ⵠΔΔ === Cx.ΔⲆᐃᐃᐃ) {
          var f = Cx.ᐃᐃⲆⲆᐃ[A.ⵠΔΔ];
          if (A.x1 - 230 - Qo <= -Dx.ᐃΔᐃⲆ.x && A.x2 + 330 >= -Dx.ᐃΔᐃⲆ.x && -Dx.ᐃΔᐃⲆ.y >= A.y1 - aq && -Dx.ᐃΔᐃⲆ.y <= A.y2 + 100) {
            var j = A.x2;
            if (A.ⵠΔΔ !== Cx.ΔⲆᐃᐃᐃ) {
              j -= 610;
            }
            var k = A.x1;
            if (A.ⵠΔΔ !== Cx.ΔⲆᐃᐃᐃ) {
              k += 610;
            }
            var m = A.y2;
            if (Cx.ΔⲆᐃᐃᐃ !== A.ⵠΔΔ) {
              m -= 610;
            }
            var p = A.y1;
            if (Cx.ΔⲆᐃᐃᐃ !== A.ⵠΔΔ) {
              p += 610;
            }
            if (Cx.transition) {
              var q = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
              Eo.fillStyle = Fw(f.ⵠⲆⵠ[0], f.ⵠⲆⵠ[1], f.ⵠⲆⵠ[2], f.ⲆⲆⵠ[0], f.ⲆⲆⵠ[1], f.ⲆⲆⵠ[1], q);
            } else {
              Eo.fillStyle = f.ⲆⲆΔᐃΔ[Cx.time];
            }
            var w = Math.max(Dx.ᐃΔᐃⲆ.x + k - 2 - 230, 0);
            var x = Math.max(-Dx.ᐃΔᐃⲆ.x + Qo - j - 330 - 2, 0);
            var y = Math.max(Dx.ᐃΔᐃⲆ.y + p - 2, 0);
            var z = Math.max(-Dx.ᐃΔᐃⲆ.y + aq - m - 100 - 2, 0);
            Eo.beginPath();
            Eo.fillRect(w, y, Qo - x - w, aq - y - z);
          }
        }
      }
      for (c = Cx.ΔᐃⵠⲆⵠ.length - 1; c >= 0; c--) {
        if ((A = Cx.ΔᐃⵠⲆⵠ[c]).ⵠΔΔ !== Cx.ΔⲆᐃᐃᐃ) {
          j = A.x2;
          if (Cx.ΔⲆᐃᐃᐃ !== A.ⵠΔΔ) {
            j -= 400;
          }
          k = A.x1;
          if (A.ⵠΔΔ !== Cx.ΔⲆᐃᐃᐃ) {
            k += 400;
          }
          m = A.y2;
          if (A.ⵠΔΔ !== Cx.ΔⲆᐃᐃᐃ) {
            m -= 300;
          }
          p = A.y1;
          if (Cx.ΔⲆᐃᐃᐃ !== A.ⵠΔΔ) {
            p += 300;
          }
          if (!(A.ⵠⵠⲆ & 8) && j - Qo + 120 <= -Dx.ᐃΔᐃⲆ.x && -Dx.ᐃΔᐃⲆ.x <= j + 820 && p + 88 - aq <= -Dx.ᐃΔᐃⲆ.y && m + 50 >= -Dx.ᐃΔᐃⲆ.y) {
            Kw(j, p + 88, m - 88, Dx.ΔᐃΔᐃ[0], Cx.ᐃᐃⲆⲆᐃ[A.ⵠΔΔ], A.ⵠⵠⲆ & 8);
            Iw(j, p + 88, m - 88, Dx.ΔᐃΔᐃ[0], Cx.ᐃᐃⲆⲆᐃ[A.ⵠΔΔ], A.ⵠⵠⲆ & 8);
          }
          if (!(A.ⵠⵠⲆ & 4) && -Dx.ᐃΔᐃⲆ.x >= k - Qo - 700 && -Dx.ᐃΔᐃⲆ.x <= k - 20 && -Dx.ᐃΔᐃⲆ.y >= p + 88 - aq && -Dx.ᐃΔᐃⲆ.y <= m + 50) {
            Lw(k, p + 88, m - 88, Dx.ΔᐃΔᐃ[1], Cx.ᐃᐃⲆⲆᐃ[A.ⵠΔΔ], A.ⵠⵠⲆ & 4);
            Gw(k, p + 88, m - 88, Dx.ΔᐃΔᐃ[1], Cx.ᐃᐃⲆⲆᐃ[A.ⵠΔΔ], A.ⵠⵠⲆ & 4);
          }
          if ((A.ⵠⵠⲆ & 2) === 0 && k - 235 - Qo <= -Dx.ᐃΔᐃⲆ.x && -Dx.ᐃΔᐃⲆ.x <= j + 350 && -Dx.ᐃΔᐃⲆ.y >= m - aq - 275 && -Dx.ᐃΔᐃⲆ.y <= m + 490) {
            Aw(m - 230, k - 230, j + 230, Dx.ΔᐃΔᐃ[2], Cx.ᐃᐃⲆⲆᐃ[A.ⵠΔΔ], A.ⵠⵠⲆ & 2);
            Bw(m - 230, k - 230, j + 230, Dx.ΔᐃΔᐃ[2], Cx.ᐃᐃⲆⲆᐃ[A.ⵠΔΔ], A.ⵠⵠⲆ & 2);
          }
          if ((A.ⵠⵠⲆ & 1) === 0 && k - 235 - Qo <= -Dx.ᐃΔᐃⲆ.x && -Dx.ᐃΔᐃⲆ.x <= j + 350 && p - aq - 390 <= -Dx.ᐃΔᐃⲆ.y && p + 315 >= -Dx.ᐃΔᐃⲆ.y) {
            Ew(p + 310, k - 230, j + 230, Dx.ΔᐃΔᐃ[3], Cx.ᐃᐃⲆⲆᐃ[A.ⵠΔΔ], A.ⵠⵠⲆ & 1);
            af(p + 310, k - 230, j + 230, Dx.ΔᐃΔᐃ[3], Cx.ᐃᐃⲆⲆᐃ[A.ⵠΔΔ], A.ⵠⵠⲆ & 1);
          }
        }
      }
      for (c = Cx.ΔᐃⵠⲆⵠ.length - 1; c >= 0; c--) {
        var A = Cx.ΔᐃⵠⲆⵠ[c];
        if (Cx.ΔⲆᐃᐃᐃ !== A.ⵠΔΔ) {
          j = A.x2;
          if (A.ⵠΔΔ !== Cx.ΔⲆᐃᐃᐃ) {
            j -= 400;
          }
          k = A.x1;
          if (Cx.ΔⲆᐃᐃᐃ !== A.ⵠΔΔ) {
            k += 400;
          }
          m = A.y2;
          if (Cx.ΔⲆᐃᐃᐃ !== A.ⵠΔΔ) {
            m -= 300;
          }
          p = A.y1;
          if (A.ⵠΔΔ !== Cx.ΔⲆᐃᐃᐃ) {
            p += 300;
          }
          if ((A.ⵠⵠⲆ & 8) !== 0 && -Dx.ᐃΔᐃⲆ.x >= j - Qo + 120 && -Dx.ᐃΔᐃⲆ.x <= j + 820 && p + 88 - aq <= -Dx.ᐃΔᐃⲆ.y && m + 50 >= -Dx.ᐃΔᐃⲆ.y) {
            Kw(j, p + 88, m - 88, Dx.ΔᐃΔᐃ[0], Cx.ᐃᐃⲆⲆᐃ[A.ⵠΔΔ], A.ⵠⵠⲆ & 8);
          }
          if (A.ⵠⵠⲆ & 4 && -Dx.ᐃΔᐃⲆ.x >= k - Qo - 700 && -Dx.ᐃΔᐃⲆ.x <= k - 20 && -Dx.ᐃΔᐃⲆ.y >= p + 88 - aq && m + 50 >= -Dx.ᐃΔᐃⲆ.y) {
            Lw(k, p + 88, m - 88, Dx.ΔᐃΔᐃ[1], Cx.ᐃᐃⲆⲆᐃ[A.ⵠΔΔ], A.ⵠⵠⲆ & 4);
          }
          if (A.ⵠⵠⲆ & 2 && -Dx.ᐃΔᐃⲆ.x >= k - 235 - Qo && j + 350 >= -Dx.ᐃΔᐃⲆ.x && m - aq - 275 <= -Dx.ᐃΔᐃⲆ.y && -Dx.ᐃΔᐃⲆ.y <= m + 490) {
            Aw(m - 230, k - 230, j + 230, Dx.ΔᐃΔᐃ[2], Cx.ᐃᐃⲆⲆᐃ[A.ⵠΔΔ], A.ⵠⵠⲆ & 2);
          }
          if ((A.ⵠⵠⲆ & 1) !== 0 && k - 235 - Qo <= -Dx.ᐃΔᐃⲆ.x && -Dx.ᐃΔᐃⲆ.x <= j + 350 && p - aq - 390 <= -Dx.ᐃΔᐃⲆ.y && p + 315 >= -Dx.ᐃΔᐃⲆ.y) {
            Ew(p + 310, k - 230, j + 230, Dx.ΔᐃΔᐃ[3], Cx.ᐃᐃⲆⲆᐃ[A.ⵠΔΔ], A.ⵠⵠⲆ & 1);
          }
        }
      }
      for (c = Cx.ΔᐃⵠⲆⵠ.length - 1; c >= 0; c--) {
        if ((A = Cx.ΔᐃⵠⲆⵠ[c]).ⵠΔΔ !== Cx.ΔⲆᐃᐃᐃ) {
          f = Cx.ᐃᐃⲆⲆᐃ[A.ⵠΔΔ];
          if (-Dx.ᐃΔᐃⲆ.x >= A.x1 - 230 - Qo && -Dx.ᐃΔᐃⲆ.x <= A.x2 + 330 && A.y1 - aq <= -Dx.ᐃΔᐃⲆ.y && -Dx.ᐃΔᐃⲆ.y <= A.y2 + 100) {
            j = A.x2;
            if (Cx.ΔⲆᐃᐃᐃ !== A.ⵠΔΔ) {
              if ((A.ⵠⵠⲆ & 8) === 0) {
                j -= 414;
              } else {
                j -= 610;
              }
            }
            k = A.x1;
            if (A.ⵠΔΔ !== Cx.ΔⲆᐃᐃᐃ) {
              if (A.ⵠⵠⲆ & 4) {
                k += 610;
              } else {
                k += 414;
              }
            }
            m = A.y2;
            if (A.ⵠΔΔ !== Cx.ΔⲆᐃᐃᐃ) {
              if ((A.ⵠⵠⲆ & 2) === 0) {
                m -= 414;
              } else {
                m -= 610;
              }
            }
            p = A.y1;
            if (Cx.ΔⲆᐃᐃᐃ !== A.ⵠΔΔ) {
              if (A.ⵠⵠⲆ & 1) {
                p += 610;
              } else {
                p += 414;
              }
            }
            if (Cx.transition) {
              q = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
              Eo.fillStyle = Fw(f.ⵠⲆⵠ[0], f.ⵠⲆⵠ[1], f.ⵠⲆⵠ[2], f.ⲆⲆⵠ[0], f.ⲆⲆⵠ[1], f.ⲆⲆⵠ[2], q);
            } else {
              Eo.fillStyle = f.ⲆⲆΔᐃΔ[Cx.time];
            }
            w = Math.max(Dx.ᐃΔᐃⲆ.x + k - 2 - 230, 0);
            x = Math.max(-Dx.ᐃΔᐃⲆ.x + Qo - j - 330 - 2, 0);
            y = Math.max(Dx.ᐃΔᐃⲆ.y + p - 2, 0);
            z = Math.max(-Dx.ᐃΔᐃⲆ.y + aq - m - 100 - 2, 0);
            Eo.beginPath();
            Eo.fillRect(w, y, Qo - x - w, aq - y - z);
          }
        }
      }
      if (zx.ΔᐃΔⵠᐃ) {
        yw(mw, vw, ww, tw, uw, 695, "isl", 2);
        yw(mw, vw, ww, tw, uw, 694, "isl", 2);
      }
      yw(rw, vw, ww, tw, uw, 692, "isl", 2);
      if (zx.ΔᐃΔⵠᐃ) {
        yw(qw, vw, ww, tw, uw, 243, "de");
      }
      var B = Cx.ⲆΔⵠ[0];
      for (c = 0; B.length > c; c++) {
        for (var b = B[c], C = 0; C < b.ΔⲆⲆⵠⲆ.length; C++) {
          zw(b.ΔⲆⲆⵠⲆ[C]);
        }
      }
      if ((ev += Jx * 40) > 60) {
        ev -= 60;
      }
      yw(Zv, vw, ww, tw, uw, 1024, "r", 0);
      for (c = 0; c < Cx.ΔᐃⵠⲆⵠ.length; c++) {
        A = Cx.ΔᐃⵠⲆⵠ[c];
        if (Cx.ΔⲆᐃᐃᐃ !== A.ⵠΔΔ) {
          j = A.x2;
          if (A.ⵠΔΔ !== Cx.ΔⲆᐃᐃᐃ) {
            j -= 400;
          }
          k = A.x1;
          if (Cx.ΔⲆᐃᐃᐃ !== A.ⵠΔΔ) {
            k += 400;
          }
          m = A.y2;
          if (A.ⵠΔΔ !== Cx.ΔⲆᐃᐃᐃ) {
            m -= 300;
          }
          p = A.y1;
          if (A.ⵠΔΔ !== Cx.ΔⲆᐃᐃᐃ) {
            p += 300;
          }
          if ((A.ⵠⵠⲆ & 8) > 0 && -Dx.ᐃΔᐃⲆ.x >= j - Qo + 120 && -Dx.ᐃΔᐃⲆ.x <= j + 820 && -Dx.ᐃΔᐃⲆ.y >= p + 88 - aq && m + 50 >= -Dx.ᐃΔᐃⲆ.y) {
            Iw(j, p + 88, m - 88, Dx.ΔᐃΔᐃ[0], Cx.ᐃᐃⲆⲆᐃ[A.ⵠΔΔ], A.ⵠⵠⲆ & 8);
          }
          if ((A.ⵠⵠⲆ & 4) > 0 && k - Qo - 700 <= -Dx.ᐃΔᐃⲆ.x && k - 20 >= -Dx.ᐃΔᐃⲆ.x && p + 88 - aq <= -Dx.ᐃΔᐃⲆ.y && -Dx.ᐃΔᐃⲆ.y <= m + 50) {
            Gw(k, p + 88, m - 88, Dx.ΔᐃΔᐃ[1], Cx.ᐃᐃⲆⲆᐃ[A.ⵠΔΔ], A.ⵠⵠⲆ & 4);
          }
          if ((A.ⵠⵠⲆ & 2) > 0 && -Dx.ᐃΔᐃⲆ.x >= k - 235 - Qo && -Dx.ᐃΔᐃⲆ.x <= j + 350 && m - aq - 275 <= -Dx.ᐃΔᐃⲆ.y && -Dx.ᐃΔᐃⲆ.y <= m + 490) {
            Bw(m - 230, k - 230, j + 230, Dx.ΔᐃΔᐃ[2], Cx.ᐃᐃⲆⲆᐃ[A.ⵠΔΔ], A.ⵠⵠⲆ & 2);
          }
          if ((A.ⵠⵠⲆ & 1) > 0 && k - 235 - Qo <= -Dx.ᐃΔᐃⲆ.x && -Dx.ᐃΔᐃⲆ.x <= j + 350 && -Dx.ᐃΔᐃⲆ.y >= p - aq - 390 && -Dx.ᐃΔᐃⲆ.y <= p + 315) {
            af(p + 310, k - 230, j + 230, Dx.ΔᐃΔᐃ[3], Cx.ᐃᐃⲆⲆᐃ[A.ⵠΔΔ], A.ⵠⵠⲆ & 1);
          }
        }
      }
    })();
    (function () {
      var z = tw;
      var B = uw;
      var i = vw;
      var t = ww;
      if (zx.ΔᐃΔⵠᐃ) {
        yw(rw, i, t, z, B, 621, "l", 2);
      }
      if (zx.ΔᐃΔⵠᐃ) {
        yw(rw, i, t, z, B, ts.ᐃᐃᐃⲆⵠ, "la", 5);
      }
      yw(rw, i, t, z, B, 203, "la", 5);
      yw(mw, i, t, z, B, 620, "l", 2);
      if (zx.ΔᐃΔⵠᐃ) {
        yw(sw, i, t, z, B, 203, "la", 5);
        yw(mw, i, t, z, B, 619, "l", 2);
      }
      yw(rw, i, t, z, B, 1052, "ma", 4);
      for (var n = Cx.ⲆΔⵠ[76], aa = 0; aa < n.length; aa++) {
        n[aa].ⵠΔⵠⲆᐃΔᐃ();
      }
      var ba = Cx.ⲆΔⵠ[0];
      for (aa = 0; ba.length > aa; aa++) {
        for (var ca = ba[aa], da = 0; da < ca.ⲆⲆΔᐃⵠ.length; da++) {
          Jw(ca.ⲆⲆΔᐃⵠ[da]);
        }
      }
      var ea = Cx.ⲆΔⵠ[30];
      for (aa = 0; ea.length > aa; aa++) {
        ef(ea[aa], 125);
        ea[aa].ᐃⲆⲆΔⵠ(ea[aa].info);
      }
      var l = Cx.ⲆΔⵠ[18];
      for (aa = 0; l.length > aa; aa++) {
        if (l[aa].action == 2) {
          of(l[aa]);
        }
      }
      var fa = Cx.ⲆΔⵠ[1];
      for (aa = 0; aa < fa.length; aa++) {
        of(fa[aa], 113);
      }
      var ha = Cx.ⲆΔⵠ[22];
      for (aa = 0; aa < ha.length; aa++) {
        of(ha[aa]);
      }
      var ia = Cx.ⲆΔⵠ[23];
      for (aa = 0; ia.length > aa; aa++) {
        of(ia[aa]);
      }
      var ja = Cx.ⲆΔⵠ[6];
      for (aa = 0; aa < ja.length; aa++) {
        of(ja[aa], 118);
      }
      var v = Cx.ⲆΔⵠ[36];
      for (aa = 0; aa < v.length; aa++) {
        ef(v[aa]);
      }
      var c = Cx.ⲆΔⵠ[33];
      for (aa = 0; c.length > aa; aa++) {
        ef(c[aa], 141);
      }
      var m = Cx.ⲆΔⵠ[3];
      for (aa = 0; aa < m.length; aa++) {
        of(m[aa]);
      }
      m = Cx.ⲆΔⵠ[43];
      aa = 0;
      for (; aa < m.length; aa++) {
        of(m[aa]);
      }
      m = Cx.ⲆΔⵠ[3];
      aa = 0;
      for (; aa < m.length; aa++) {
        nf(m[aa]);
      }
      var ka = Cx.ⲆΔⵠ[44];
      for (aa = 0; aa < ka.length; aa++) {
        if ((ka[aa].info & 15) === 0 || ka[aa].info === 10) {
          ef(ka[aa]);
        }
      }
      var la = Cx.ⲆΔⵠ[54];
      for (aa = 0; la.length > aa; aa++) {
        if (!(la[aa].info & 15) || la[aa].info === 10) {
          ef(la[aa]);
        }
      }
      var ma = Cx.ⲆΔⵠ[55];
      for (aa = 0; aa < ma.length; aa++) {
        if (!(ma[aa].info & 15) || ma[aa].info === 10) {
          ef(ma[aa]);
        }
      }
      var na = Cx.ⲆΔⵠ[79];
      for (aa = 0; na.length > aa; aa++) {
        ef(na[aa], 132);
      }
      var oa = Cx.ⲆΔⵠ[39];
      for (aa = 0; aa < oa.length; aa++) {
        if ((oa[aa].info & 15) === 0 || oa[aa].info === 10) {
          ef(oa[aa]);
        }
      }
      var pa = Cx.ⲆΔⵠ[40];
      for (aa = 0; aa < pa.length; aa++) {
        if (!(pa[aa].info & 15) || pa[aa].info === 10) {
          ef(pa[aa]);
        }
      }
      var qa = Cx.ⲆΔⵠ[37];
      for (aa = 0; qa.length > aa; aa++) {
        if (!(qa[aa].info & 15) || qa[aa].info === 10) {
          ef(qa[aa]);
        }
      }
      na = Cx.ⲆΔⵠ[31];
      aa = 0;
      for (; na.length > aa; aa++) {
        ef(na[aa]);
      }
      var ra = Cx.ⲆΔⵠ[86];
      for (aa = 0; ra.length > aa; aa++) {
        ef(ra[aa], 250, 729);
      }
      var A = Cx.ⲆΔⵠ[82];
      for (aa = 0; aa < A.length; aa++) {
        ef(A[aa], 250, 729);
      }
      var x = Cx.ⲆΔⵠ[87];
      for (aa = 0; x.length > aa; aa++) {
        ef(x[aa], 854, 859);
      }
      var J = Cx.ⲆΔⵠ[45];
      for (aa = 0; aa < J.length; aa++) {
        if (J[aa].info & 1) {
          ef(J[aa], 336);
        }
      }
      J = Cx.ⲆΔⵠ[46];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (J[aa].info & 1) {
          ef(J[aa], 373);
        }
      }
      J = Cx.ⲆΔⵠ[47];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (J[aa].info) {
          ef(J[aa], 376);
        }
      }
      J = Cx.ⲆΔⵠ[48];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (J[aa].info) {
          ef(J[aa], 379);
        }
      }
      J = Cx.ⲆΔⵠ[49];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (J[aa].info) {
          ef(J[aa], 500);
        }
      }
      J = Cx.ⲆΔⵠ[53];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (J[aa].info) {
          ef(J[aa], 376);
        }
      }
      J = Cx.ⲆΔⵠ[10];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (J[aa].info & 1) {
          ef(J[aa], 336);
        }
      }
      J = Cx.ⲆΔⵠ[15];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (J[aa].info & 1) {
          ef(J[aa], 373);
        }
      }
      J = Cx.ⲆΔⵠ[16];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (J[aa].info) {
          ef(J[aa], 376);
        }
      }
      J = Cx.ⲆΔⵠ[17];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (J[aa].info) {
          ef(J[aa], 379);
        }
      }
      J = Cx.ⲆΔⵠ[21];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (J[aa].info) {
          ef(J[aa], 500);
        }
      }
      J = Cx.ⲆΔⵠ[51];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (J[aa].info) {
          ef(J[aa], 376);
        }
      }
      var sa = Cx.ⲆΔⵠ[80];
      for (aa = 0; aa < sa.length; aa++) {
        ef(sa[aa], 264, 322);
      }
      var D = Cx.ⲆΔⵠ[41];
      for (aa = 0; D.length > aa; aa++) {
        ef(D[aa], 198);
      }
      n = Cx.ⲆΔⵠ[76];
      aa = 0;
      for (; n.length > aa; aa++) {
        ef(n[aa], ts.ᐃⵠⲆΔᐃΔᐃ, ts.ᐃᐃⲆⲆᐃᐃⲆⲆΔ);
      }
      var ta = Cx.ⲆΔⵠ[91];
      for (aa = 0; ta.length > aa; aa++) {
        if (ta[aa].ⲆⵠⵠΔΔⲆᐃ === 0) {
          ef(ta[aa]);
        }
      }
      ba = Cx.ⲆΔⵠ[0];
      aa = 0;
      for (; aa < ba.length; aa++) {
        ca = ba[aa];
        if (ba[aa].ᐃⵠΔⵠⵠ !== 227 && ba[aa].ᐃⵠΔⵠⵠ !== 228 && ba[aa].ᐃⵠΔⵠⵠ !== 229 && ba[aa].ᐃⵠΔⵠⵠ !== 230 && ba[aa].ᐃⵠΔⵠⵠ !== 91) {
          if (ca.ⲆᐃᐃΔᐃΔⲆ === 0) {
            if (ca.ΔⵠΔᐃⵠⲆⵠ > 0.001) {
              ca.ΔⵠΔᐃⵠⲆⵠ = ΔⵠΔᐃ.ⲆⵠⵠΔⲆⲆⵠ(ca.ΔⵠΔᐃⵠⲆⵠ, 0, 0.018);
              var ua = 1 + Math.min(1, Math.max(ca.ΔⵠΔᐃⵠⲆⵠ, 0) / 100) * 0.18;
              Eo.save();
              Eo.scale(ua, ua);
              Dx.ᐃΔᐃⲆ.x /= ua;
              Dx.ᐃΔᐃⲆ.y /= ua;
              ca.x /= ua;
              ca.y /= ua;
              ca.r.x /= ua;
              ca.r.y /= ua;
              ca.ΔⲆⵠⵠᐃⵠΔ();
              ca.ΔⵠᐃⲆ();
              Dx.ᐃΔᐃⲆ.x *= ua;
              Dx.ᐃΔᐃⲆ.y *= ua;
              ca.x *= ua;
              ca.y *= ua;
              ca.r.x *= ua;
              ca.r.y *= ua;
              Eo.restore();
            } else {
              ca.ⲆⵠⵠΔΔⲆᐃ = 0;
              ca.ΔⲆⵠⵠᐃⵠΔ();
              ca.ΔⵠᐃⲆ();
            }
          }
        } else if (ca.ΔⵠΔⵠΔ <= 180) {
          Eo.save();
          ua = 1 + Math.min(1, Math.max(ca.ᐃⵠⲆΔⲆ - 30, 0) / 180) * 0.35;
          Eo.scale(ua, ua);
          Dx.ᐃΔᐃⲆ.x /= ua;
          Dx.ᐃΔᐃⲆ.y /= ua;
          ca.x /= ua;
          ca.y /= ua;
          ca.r.x /= ua;
          ca.r.y /= ua;
          ca.ⲆⵠⵠΔΔⲆᐃ = 0;
          ca.ΔⲆⵠⵠᐃⵠΔ();
          ca.ΔⵠᐃⲆ();
          Dx.ᐃΔᐃⲆ.x *= ua;
          Dx.ᐃΔᐃⲆ.y *= ua;
          ca.x *= ua;
          ca.y *= ua;
          ca.r.x *= ua;
          ca.r.y *= ua;
          Eo.restore();
        }
      }
      D = Cx.ⲆΔⵠ[41];
      aa = 0;
      for (; aa < D.length; aa++) {
        ef(D[aa], 913);
      }
      var va = Cx.ⲆΔⵠ[67];
      for (aa = 0; va.length > aa; aa++) {
        ef(va[aa]);
      }
      var Q = Cx.ⲆΔⵠ[62];
      for (aa = 0; Q.length > aa; aa++) {
        ef(Q[aa], 419, 461);
      }
      var _ = Cx.ⲆΔⵠ[70];
      for (aa = 0; _.length > aa; aa++) {
        ef(_[aa]);
      }
      var F = Cx.ⲆΔⵠ[60];
      for (aa = 0; F.length > aa; aa++) {
        ef(F[aa], 299, 326);
      }
      var R = Cx.ⲆΔⵠ[72];
      for (aa = 0; aa < R.length; aa++) {
        ef(R[aa], 232, 1077);
      }
      var G = Cx.ⲆΔⵠ[73];
      for (aa = 0; aa < G.length; aa++) {
        ef(G[aa], 233, 1092);
      }
      ka = Cx.ⲆΔⵠ[44];
      aa = 0;
      for (; ka.length > aa; aa++) {
        if (ka[aa].info & 15 && ka[aa].info !== 10) {
          ef(ka[aa]);
        }
      }
      la = Cx.ⲆΔⵠ[54];
      aa = 0;
      for (; la.length > aa; aa++) {
        if (la[aa].info & 15 && la[aa].info !== 10) {
          ef(la[aa]);
        }
      }
      ma = Cx.ⲆΔⵠ[89];
      aa = 0;
      for (; aa < ma.length; aa++) {
        ef(ma[aa], 239);
      }
      ma = Cx.ⲆΔⵠ[55];
      aa = 0;
      for (; aa < ma.length; aa++) {
        if (ma[aa].info & 15 && ma[aa].info !== 10) {
          ef(ma[aa]);
        }
      }
      m = Cx.ⲆΔⵠ[43];
      aa = 0;
      for (; m.length > aa; aa++) {
        nf(m[aa]);
      }
      oa = Cx.ⲆΔⵠ[39];
      aa = 0;
      for (; oa.length > aa; aa++) {
        if ((oa[aa].info & 15) !== 0 && oa[aa].info !== 10) {
          ef(oa[aa]);
        }
      }
      pa = Cx.ⲆΔⵠ[40];
      aa = 0;
      for (; pa.length > aa; aa++) {
        if ((pa[aa].info & 15) !== 0 && pa[aa].info !== 10) {
          ef(pa[aa]);
        }
      }
      qa = Cx.ⲆΔⵠ[37];
      aa = 0;
      for (; aa < qa.length; aa++) {
        if (qa[aa].info & 15 && qa[aa].info !== 10) {
          ef(qa[aa]);
        }
      }
      var j = Cx.ⲆΔⵠ[81];
      for (aa = 0; j.length > aa; aa++) {
        ef(j[aa], 691, 697);
      }
      var L = Cx.ⲆΔⵠ[66];
      for (aa = 0; aa < L.length; aa++) {
        ef(L[aa], 637, 687);
      }
      var W = Cx.ⲆΔⵠ[65];
      for (aa = 0; W.length > aa; aa++) {
        ef(W[aa], 673, 688);
      }
      var O = Cx.ⲆΔⵠ[61];
      for (aa = 0; aa < O.length; aa++) {
        ef(O[aa], 260, 333);
      }
      var N = Cx.ⲆΔⵠ[88];
      for (aa = 0; N.length > aa; aa++) {
        ef(N[aa], 1033, 1034);
      }
      var q = Cx.ⲆΔⵠ[63];
      for (aa = 0; q.length > aa; aa++) {
        ef(q[aa], 445, 462);
      }
      var H = Cx.ⲆΔⵠ[77];
      for (aa = 0; H.length > aa; aa++) {
        ef(H[aa]);
      }
      var U = Cx.ⲆΔⵠ[68];
      for (aa = 0; aa < U.length; aa++) {
        ef(U[aa], 918, 919);
      }
      var Y = Cx.ⲆΔⵠ[71];
      for (aa = 0; aa < Y.length; aa++) {
        ef(Y[aa]);
      }
      var K = Cx.ⲆΔⵠ[78];
      for (aa = 0; aa < K.length; aa++) {
        ef(K[aa], 1218, 1219);
      }
      var V = Cx.ⲆΔⵠ[64];
      for (aa = 0; aa < V.length; aa++) {
        if (V[aa].scale === 1) {
          ef(V[aa], 449, 463);
        }
      }
      V = Cx.ⲆΔⵠ[69];
      aa = 0;
      for (; aa < V.length; aa++) {
        if (V[aa].scale === 1) {
          ef(V[aa], 450, 464);
        }
      }
      var wa = Cx.ⲆΔⵠ[11];
      for (aa = 0; wa.length > aa; aa++) {
        ef(wa[aa]);
      }
      var Z = Cx.ⲆΔⵠ[2];
      for (aa = 0; Z.length > aa; aa++) {
        ef(Z[aa], 114);
      }
      l = Cx.ⲆΔⵠ[18];
      aa = 0;
      for (; l.length > aa; aa++) {
        ef(l[aa]);
      }
      var xa = Cx.ⲆΔⵠ[34];
      for (aa = 0; xa.length > aa; aa++) {
        ef(xa[aa]);
      }
      J = Cx.ⲆΔⵠ[10];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (!(J[aa].info & 1)) {
          ef(J[aa], 166);
        }
        J[aa].ᐃⲆⲆΔⵠ(J[aa].info >> 1);
      }
      J = Cx.ⲆΔⵠ[15];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (!(J[aa].info & 1)) {
          ef(J[aa], 171);
        }
        J[aa].ᐃⲆⲆΔⵠ(J[aa].info >> 1);
      }
      J = Cx.ⲆΔⵠ[16];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (!(J[aa].info & 1)) {
          ef(J[aa], 172);
        }
        J[aa].ᐃⲆⲆΔⵠ(J[aa].info >> 1);
      }
      J = Cx.ⲆΔⵠ[17];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (!(J[aa].info & 1)) {
          ef(J[aa], 173);
        }
        J[aa].ᐃⲆⲆΔⵠ(J[aa].info >> 1);
      }
      J = Cx.ⲆΔⵠ[21];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (!(J[aa].info & 1)) {
          ef(J[aa], 124);
        }
        J[aa].ᐃⲆⲆΔⵠ(J[aa].info >> 1);
      }
      J = Cx.ⲆΔⵠ[51];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (!(J[aa].info & 1)) {
          ef(J[aa], 218);
        }
        J[aa].ᐃⲆⲆΔⵠ(J[aa].info >> 1);
      }
      J = Cx.ⲆΔⵠ[45];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (!(J[aa].info & 1)) {
          ef(J[aa], 212);
        }
        J[aa].ᐃⲆⲆΔⵠ(J[aa].info >> 1);
      }
      J = Cx.ⲆΔⵠ[46];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (!(J[aa].info & 1)) {
          ef(J[aa], 213);
        }
        J[aa].ᐃⲆⲆΔⵠ(J[aa].info >> 1);
      }
      J = Cx.ⲆΔⵠ[47];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (!(J[aa].info & 1)) {
          ef(J[aa], 214);
        }
        J[aa].ᐃⲆⲆΔⵠ(J[aa].info >> 1);
      }
      J = Cx.ⲆΔⵠ[48];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (!(J[aa].info & 1)) {
          ef(J[aa], 215);
        }
        J[aa].ᐃⲆⲆΔⵠ(J[aa].info >> 1);
      }
      J = Cx.ⲆΔⵠ[49];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (!(J[aa].info & 1)) {
          ef(J[aa], 216);
        }
        J[aa].ᐃⲆⲆΔⵠ(J[aa].info >> 1);
      }
      J = Cx.ⲆΔⵠ[53];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (!(J[aa].info & 1)) {
          ef(J[aa], 220);
        }
        J[aa].ᐃⲆⲆΔⵠ(J[aa].info >> 1);
      }
      var ya = Cx.ⲆΔⵠ[4];
      for (aa = 0; ya.length > aa; aa++) {
        ef(ya[aa], 162);
        ya[aa].ᐃⲆⲆΔⵠ(ya[aa].info);
      }
      ya = Cx.ⲆΔⵠ[7];
      aa = 0;
      for (; ya.length > aa; aa++) {
        ef(ya[aa], 163);
        ya[aa].ᐃⲆⲆΔⵠ(ya[aa].info);
      }
      ya = Cx.ⲆΔⵠ[8];
      aa = 0;
      for (; aa < ya.length; aa++) {
        ef(ya[aa], 164);
        ya[aa].ᐃⲆⲆΔⵠ(ya[aa].info);
      }
      ya = Cx.ⲆΔⵠ[9];
      aa = 0;
      for (; aa < ya.length; aa++) {
        ef(ya[aa], 165);
        ya[aa].ᐃⲆⲆΔⵠ(ya[aa].info);
      }
      ya = Cx.ⲆΔⵠ[19];
      aa = 0;
      for (; ya.length > aa; aa++) {
        ef(ya[aa], 122);
        ya[aa].ᐃⲆⲆΔⵠ(ya[aa].info);
      }
      ya = Cx.ⲆΔⵠ[50];
      aa = 0;
      for (; ya.length > aa; aa++) {
        ef(ya[aa], 217);
        ya[aa].ᐃⲆⲆΔⵠ(ya[aa].info);
      }
      var za = Cx.ⲆΔⵠ[5];
      for (aa = 0; aa < za.length; aa++) {
        ef(za[aa], 160);
        za[aa].ᐃⲆⲆΔⵠ(za[aa].info);
      }
      za = Cx.ⲆΔⵠ[12];
      aa = 0;
      for (; aa < za.length; aa++) {
        ef(za[aa], 168);
        za[aa].ᐃⲆⲆΔⵠ(za[aa].info);
      }
      za = Cx.ⲆΔⵠ[13];
      aa = 0;
      for (; za.length > aa; aa++) {
        ef(za[aa], 169);
        za[aa].ᐃⲆⲆΔⵠ(za[aa].info);
      }
      za = Cx.ⲆΔⵠ[14];
      aa = 0;
      for (; aa < za.length; aa++) {
        ef(za[aa], 170);
        za[aa].ᐃⲆⲆΔⵠ(za[aa].info);
      }
      za = Cx.ⲆΔⵠ[20];
      aa = 0;
      for (; aa < za.length; aa++) {
        ef(za[aa], 123);
        za[aa].ᐃⲆⲆΔⵠ(za[aa].info);
      }
      za = Cx.ⲆΔⵠ[52];
      aa = 0;
      for (; aa < za.length; aa++) {
        ef(za[aa], 219);
        za[aa].ᐃⲆⲆΔⵠ(za[aa].info);
      }
      var Aa = Cx.ⲆΔⵠ[35];
      for (aa = 0; aa < Aa.length; aa++) {
        var Ba = Aa[aa];
        if (Ba.info > 0) {
          ef(Ba, 788);
        } else {
          ef(Ba, 182);
        }
      }
      var Ca = Cx.ⲆΔⵠ[29];
      for (aa = 0; aa < Ca.length; aa++) {
        ef(Ca[aa], 159);
      }
      yw(rw, i, t, z, B, 111, "g", 2);
      yw(rw, i, t, z, B, 415, "gw", 2);
      yw(rw, i, t, z, B, 112, "d", 2);
      yw(rw, i, t, z, B, 416, "dw", 2);
      yw(rw, i, t, z, B, 110, "p", 0);
      yw(rw, i, t, z, B, 241, "m", 2);
      yw(rw, i, t, z, B, 121, "a", 2);
      yw(rw, i, t, z, B, 202, "re", 2);
      yw(rw, i, t, z, B, 679, "cs", 3, 3);
      yw(rw, i, t, z, B, 679, "cs", 2, 2);
      yw(rw, i, t, z, B, 679, "cs", 1, 1);
      yw(rw, i, t, z, B, 679, "cs", 0, 0);
      yw(rw, i, t, z, B, 676, "cs", 3, 3);
      yw(rw, i, t, z, B, 676, "cs", 2, 2);
      yw(rw, i, t, z, B, 676, "cs", 1, 1);
      yw(rw, i, t, z, B, 676, "cs", 0, 0);
      var Da = Cx.ⲆΔⵠ[100];
      for (aa = 0; aa < Da.length; aa++) {
        for (da = 0; da < Da[aa].info; da++) {
          ef(Da[aa].ΔΔΔⲆ[da], 294);
        }
      }
      yw(rw, i, t, z, B, 108, "s", 2);
      var Ea = Cx.ⲆΔⵠ[24];
      for (aa = 0; aa < Ea.length; aa++) {
        ef(Ea[aa]);
      }
      Ea = Cx.ⲆΔⵠ[25];
      aa = 0;
      for (; Ea.length > aa; aa++) {
        ef(Ea[aa]);
      }
      Ea = Cx.ⲆΔⵠ[26];
      aa = 0;
      for (; Ea.length > aa; aa++) {
        ef(Ea[aa]);
      }
      Ea = Cx.ⲆΔⵠ[27];
      aa = 0;
      for (; aa < Ea.length; aa++) {
        ef(Ea[aa]);
      }
      Ea = Cx.ⲆΔⵠ[28];
      aa = 0;
      for (; aa < Ea.length; aa++) {
        ef(Ea[aa]);
      }
      var Fa = Cx.ⲆΔⵠ[32];
      for (aa = 0; Fa.length > aa; aa++) {
        of(Fa[aa]);
      }
      fa = Cx.ⲆΔⵠ[1];
      aa = 0;
      for (; fa.length > aa; aa++) {
        nf(fa[aa]);
      }
      fa = Cx.ⲆΔⵠ[6];
      aa = 0;
      for (; fa.length > aa; aa++) {
        nf(fa[aa]);
      }
      l = Cx.ⲆΔⵠ[18];
      aa = 0;
      for (; l.length > aa; aa++) {
        if (l[aa].action == 2) {
          nf(l[aa]);
        }
      }
      xa = Cx.ⲆΔⵠ[34];
      aa = 0;
      for (; xa.length > aa; aa++) {
        nf(xa[aa]);
      }
      ha = Cx.ⲆΔⵠ[22];
      aa = 0;
      for (; ha.length > aa; aa++) {
        nf(ha[aa]);
      }
      ia = Cx.ⲆΔⵠ[23];
      aa = 0;
      for (; aa < ia.length; aa++) {
        nf(ia[aa]);
        ia[aa].ᐃⲆⲆΔⵠ(ia[aa].info);
      }
      yw(rw, i, t, z, B, 989, "c", 0);
      yw(rw, i, t, z, B, 109, "t", 5, 4);
      yw(rw, i, t, z, B, 413, "f", 2, 2);
      yw(rw, i, t, z, B, 693, "plm", 0, 0);
      yw(rw, i, t, z, B, 307, "b", 3, 2);
      yw(rw, i, t, z, B, 109, "t", 3, 2);
      yw(rw, i, t, z, B, 307, "b", 1, 0);
      yw(rw, i, t, z, B, 413, "f", 1, 1);
      yw(rw, i, t, z, B, 693, "plm", 1, 1);
      yw(rw, i, t, z, B, 109, "t", 1, 0);
      yw(rw, i, t, z, B, 413, "f", 0, 0);
      yw(rw, i, t, z, B, 693, "plm", 2, 2);
      Fa = Cx.ⲆΔⵠ[32];
      aa = 0;
      for (; Fa.length > aa; aa++) {
        nf(Fa[aa]);
      }
      var Ga = Cx.ⲆΔⵠ[56];
      for (aa = 0; aa < Ga.length; aa++) {
        ef(Ga[aa], 221);
      }
      ba = Cx.ⲆΔⵠ[0];
      aa = 0;
      for (; aa < ba.length; aa++) {
        if ((ca = ba[aa]).ⲆᐃᐃΔᐃΔⲆ === 1 && (ca.ΔⵠΔⵠΔ < 180 || ca.ᐃⵠΔⵠⵠ !== 227 && ca.ᐃⵠΔⵠⵠ !== 228 && ca.ᐃⵠΔⵠⵠ !== 91 && ca.ᐃⵠΔⵠⵠ !== 229 && ca.ᐃⵠΔⵠⵠ !== 230)) {
          ca.ΔⵠΔᐃⵠⲆⵠ = ΔⵠΔᐃ.ⲆⵠⵠΔⲆⲆⵠ(ca.ΔⵠΔᐃⵠⲆⵠ, 100, 0.018);
          ua = 1 + Math.min(1, Math.max(ca.ΔⵠΔᐃⵠⲆⵠ, 0) / 100) * 0.18;
          Eo.save();
          Eo.scale(ua, ua);
          Dx.ᐃΔᐃⲆ.x /= ua;
          Dx.ᐃΔᐃⲆ.y /= ua;
          ca.x /= ua;
          ca.y /= ua;
          ca.r.x /= ua;
          ca.r.y /= ua;
          ca.ΔⲆⵠⵠᐃⵠΔ();
          ca.ΔⵠᐃⲆ();
          Dx.ᐃΔᐃⲆ.x *= ua;
          Dx.ᐃΔᐃⲆ.y *= ua;
          ca.x *= ua;
          ca.y *= ua;
          ca.r.x *= ua;
          ca.r.y *= ua;
          Eo.restore();
        }
      }
      var Ha = Cx.ⲆΔⵠ[38];
      for (aa = 0; Ha.length > aa; aa++) {
        ef(Ha[aa], 190);
        Ha[aa].ᐃⲆⲆΔⵠ(Ha[aa].info);
      }
      var Ia = Cx.ⲆΔⵠ[90];
      for (aa = 0; aa < Ia.length; aa++) {
        ef(Ia[aa], 245, 246);
      }
      var Ja = Cx.ⲆΔⵠ[42];
      for (aa = 0; aa < Ja.length; aa++) {
        ef(Ja[aa], 201);
      }
      ba = Cx.ⲆΔⵠ[0];
      aa = 0;
      for (; aa < ba.length; aa++) {
        ca = ba[aa];
        if ((ca.ᐃⵠΔⵠⵠ === 227 || ca.ᐃⵠΔⵠⵠ === 228 || ca.ᐃⵠΔⵠⵠ === 91 || ca.ᐃⵠΔⵠⵠ === 229 || ca.ᐃⵠΔⵠⵠ === 230) && ca.ΔⵠΔⵠΔ > 180) {
          ca.ⲆⵠⵠΔΔⲆᐃ = 1;
          Eo.save();
          ua = 1 + Math.min(1, Math.max(ca.ᐃⵠⲆΔⲆ - 30, 0) / 180) * 0.35;
          Eo.scale(ua, ua);
          Dx.ᐃΔᐃⲆ.x /= ua;
          Dx.ᐃΔᐃⲆ.y /= ua;
          ca.x /= ua;
          ca.y /= ua;
          ca.r.x /= ua;
          ca.r.y /= ua;
          ca.ΔⲆⵠⵠᐃⵠΔ();
          ca.ΔⵠᐃⲆ();
          Dx.ᐃΔᐃⲆ.x *= ua;
          Dx.ᐃΔᐃⲆ.y *= ua;
          ca.x *= ua;
          ca.y *= ua;
          ca.r.x *= ua;
          ca.r.y *= ua;
          Eo.restore();
        }
      }
      ta = Cx.ⲆΔⵠ[91];
      aa = 0;
      for (; aa < ta.length; aa++) {
        if (ta[aa].ⲆⵠⵠΔΔⲆᐃ === 1) {
          ef(ta[aa]);
        }
      }
      V = Cx.ⲆΔⵠ[64];
      aa = 0;
      for (; V.length > aa; aa++) {
        if (V[aa].scale > 1) {
          ef(V[aa], 449, 463);
        }
      }
      V = Cx.ⲆΔⵠ[69];
      aa = 0;
      for (; V.length > aa; aa++) {
        if (V[aa].scale > 1) {
          ef(V[aa], 450, 464);
        }
      }
      var Ka = Cx.ⲆΔⵠ[74];
      for (aa = 0; aa < Ka.length; aa++) {
        ef(Ka[aa], 235, 1107);
      }
      var La = Cx.ⲆΔⵠ[75];
      for (aa = 0; La.length > aa; aa++) {
        ef(La[aa], 238, 1128);
      }
      if ((lw += Jx * 15) > 60) {
        lw -= 60;
      }
      yw(nw, i, t, z, B, 1041, "fo", 2);
      yw(nw, i, t, z, B, 244, "fod", 2);
    })();
    if (zx.ΔᐃΔⵠᐃ && Cx.mode !== 2 && Cx.mode !== 4 && Cx.mode !== 5) {
      (function () {
        var a = Dx.ΔΔⵠᐃⵠ;
        if (a.ⲆⲆᐃⲆΔ === 0) {
          a.ⵠᐃᐃΔⲆ = Math.max(0, a.ⵠᐃᐃΔⲆ - Jx / 10);
        } else {
          a.ⵠᐃᐃΔⲆ = Math.min(1, a.ⵠᐃᐃΔⲆ + Jx / 10);
        }
        for (var b = a.ΔⲆⲆⲆⵠ, c = 0; b.length > c; c++) {
          var d = b[c];
          a.ᐃⲆⲆ(d);
          Hw(471, d.id, Dx.ᐃΔᐃⲆ.x + d.x, Dx.ᐃΔᐃⲆ.y + d.y, d.alpha);
        }
        for (c = 0; b.length > c; c++) {
          if ((d = b[c]).ⵠⲆΔⲆⵠ <= 0 || d.x > -Dx.ᐃΔᐃⲆ.x + Qo || d.x < -Dx.ᐃΔᐃⲆ.x - Dx.ᐃΔᐃⲆ.w / 2 || d.y > -Dx.ᐃΔᐃⲆ.y + aq) {
            b.splice(c, 1);
          }
        }
        var f = -Dx.ᐃΔᐃⲆ.y;
        if (Cx.ΔⲆⲆⵠⵠ > -1000) {
          a.add(f);
        }
      })();
      (function () {
        var a = Dx.ⲆΔⵠⲆⲆ;
        if (a.ⲆⲆᐃⲆΔ === 0) {
          a.ⵠᐃᐃΔⲆ = Math.max(0, a.ⵠᐃᐃΔⲆ - Jx / 10);
        } else {
          a.ⵠᐃᐃΔⲆ = Math.min(1, a.ⵠᐃᐃΔⲆ + Jx / 10);
        }
        for (var b = a.ΔⲆⲆⲆⵠ, c = 0; c < b.length; c++) {
          var d = b[c];
          a.ᐃⲆⲆ(d);
          Hw(470, d.id, Dx.ᐃΔᐃⲆ.x + d.x, Dx.ᐃΔᐃⲆ.y + d.y, d.alpha);
        }
        for (c = 0; c < b.length; c++) {
          if ((d = b[c]).ⵠⲆΔⲆⵠ <= 0 || -Dx.ᐃΔᐃⲆ.x + Qo < d.x || d.x < -Dx.ᐃΔᐃⲆ.x || d.y > -Dx.ᐃΔᐃⲆ.y + aq) {
            b.splice(c, 1);
          }
        }
        var f = -Dx.ᐃΔᐃⲆ.y;
        if (Cx.ⵠⲆⲆⵠⲆ > -1000) {
          a.add(f);
        }
      })();
      (function () {
        var a = Dx.ⵠⲆⲆⲆᐃⲆⲆ;
        for (var b = a.ΔⲆⲆⲆⵠ, c = 0; c < b.length; c++) {
          var d = b[c];
          a.ᐃⲆⲆ(d);
          Hw(942, d.id, Dx.ᐃΔᐃⲆ.x + d.x, Dx.ᐃΔᐃⲆ.y + d.y, d.alpha);
        }
        for (c = 0; c < b.length; c++) {
          if ((d = b[c]).ⵠⲆΔⲆⵠ <= 0 || -Dx.ᐃΔᐃⲆ.x + Qo < d.x || d.x < -Dx.ᐃΔᐃⲆ.x || d.y > -Dx.ᐃΔᐃⲆ.y + aq) {
            b.splice(c, 1);
          }
        }
        var f = -Dx.ᐃΔᐃⲆ.y;
        if (Cx.ΔⵠⲆΔΔ > -1000) {
          a.add(f);
        }
      })();
    }
    if (Cx.transition && a) {
      Cx.transition = false;
      Cx.ᐃⲆᐃΔ.ⵠⵠⲆ = 0;
      Cx.ᐃⲆᐃΔ.ΔᐃⲆ = false;
    }
  }
  function yw(b, c, d, f, g, i, a, j, k, h) {
    if (Cx.transition) {
      Eo.globalAlpha = 1;
      b(c, d, f, g, i, a, j, k, h);
      Cx.time = Cx.time ? 0 : 1;
      Eo.globalAlpha = 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
      b(c, d, f, g, i, a, j, k, h);
      Cx.time = Cx.time ? 0 : 1;
      Eo.globalAlpha = 1;
    } else {
      b(c, d, f, g, i, a, j, k, h);
    }
  }
  function zw(a) {
    Eo.save();
    Eo.translate(Dx.ᐃΔᐃⲆ.x + a.x, Dx.ᐃΔᐃⲆ.y + a.y);
    Eo.rotate(a.angle);
    Eo.globalAlpha = a.alpha;
    var b = ⲆⲆ[a.id][Cx.time];
    Wp(Eo, b, -b.width / 2, -b.height / 2);
    Eo.globalAlpha = 1;
    Eo.restore();
  }
  function Aw(f, j, i, k, n, o) {
    var a = k.w1;
    var q = k.w2;
    var r = k.w3;
    var h = Dx.ᐃΔᐃⲆ.y + f + 710;
    var l = Math.max(Dx.ᐃΔᐃⲆ.x + j, 0);
    var g = Math.max(-Dx.ᐃΔᐃⲆ.x + Qo - i - 100, 0);
    var s = l;
    var b = Qo - l - g;
    if (o) {
      var d = k.ⵠΔΔ(a).x;
    } else {
      d = a.r.x;
    }
    var t = h + 0;
    0;
    t += -d + 0 + 2;
    if (o) {
      d = k.ⵠΔΔ(q).x;
    } else {
      d = q.r.x;
    }
    var u = h - 250 - t - d;
    var w = (t += u + 2) - 2;
    if (o) {
      d = k.ⵠΔΔ(r).x;
    } else {
      d = r.r.x;
    }
    if (w > t + (u = h - 350 - t - d)) {
      t += u + 2;
    } else {
      t = w;
    }
    u = h - 700 - t;
    if (o > 0 && n.ⲆⵠⲆⵠᐃⵠⲆ === 1) {
      if (Cx.transition) {
        var p = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
        Eo.fillStyle = Fw(15, 77, 72, 252, 239, 187, p);
      } else {
        Eo.fillStyle = ts.ⵠⵠⲆΔⵠⵠΔ[Cx.time];
      }
      Eo.fillRect(s, t, b, u);
    } else {
      if (Cx.transition) {
        p = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
        Eo.fillStyle = Fw(n.ⵠⲆⵠ[0], n.ⵠⲆⵠ[1], n.ⵠⲆⵠ[2], n.ⲆⲆⵠ[0], n.ⲆⲆⵠ[1], n.ⲆⲆⵠ[2], p);
      } else {
        Eo.fillStyle = n.ⲆⲆΔᐃΔ[Cx.time];
      }
      Eo.fillRect(s, t, b, u);
    }
  }
  function Bw(j, q, i, t, n, o) {
    var a = t.w1;
    var r = t.w2;
    var s = t.w3;
    var h = Dx.ᐃΔᐃⲆ.y + j + 710;
    var l = Math.max(Dx.ᐃΔᐃⲆ.x + q, 0);
    var g = Math.max(-Dx.ᐃΔᐃⲆ.x + Qo - i - 100, 0);
    var u = l;
    var b = Qo - l - g;
    if (o) {
      var d = t.ⵠΔΔ(a);
    } else {
      d = a.r;
    }
    var F = h + 0;
    var G = F;
    var m = u;
    var p = -d.x + 0;
    var C = b;
    var H = F += -d.x + 0 + 2;
    if (o) {
      d = t.ⵠΔΔ(r);
    } else {
      d = r.r;
    }
    var f = h - 250 - F - d.x;
    var K = F;
    var y = u;
    var w = f;
    var L = b;
    var k = (F += f + 2) - 2;
    if (o) {
      d = t.ⵠΔΔ(s);
    } else {
      d = s.r;
    }
    if (k > F + (f = h - 350 - F - d.x)) {
      var A = hr;
      var N = F;
      var J = u;
      var M = f;
      var B = b;
      var D = F += f + 2;
    } else {
      A = false;
      F = k;
      D = -1;
    }
    f = h - 700 - F;
    if (Cx.transition) {
      var O = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
      Eo.fillStyle = Fw(9, 55, 63, 11, 106, 132, O);
    } else {
      Eo.fillStyle = ts.ΔΔⲆⲆⲆ[Cx.time];
    }
    Eo.fillRect(m, G, C, p);
    if (o) {
      if (Cx.transition) {
        O = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
        Eo.fillStyle = Fw(15, 70, 76, 42, 139, 155, O);
      } else {
        Eo.fillStyle = ts.ΔᐃⲆᐃᐃⵠᐃ[Cx.time];
      }
    } else if (Cx.transition) {
      O = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
      Eo.fillStyle = Fw(9, 55, 63, 11, 106, 132, O);
    } else {
      Eo.fillStyle = ts.ΔΔⲆⲆⲆ[Cx.time];
    }
    Eo.fillRect(y, K, L, w);
    if (A) {
      if (o) {
        if (Cx.transition) {
          O = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
          Eo.fillStyle = Fw(17, 94, 96, 169, 214, 211, O);
        } else {
          Eo.fillStyle = ts.ⲆΔᐃⲆΔᐃΔ[Cx.time];
        }
      } else if (Cx.transition) {
        O = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
        Eo.fillStyle = Fw(9, 55, 63, 11, 106, 132, O);
      } else {
        Eo.fillStyle = ts.ΔΔⲆⲆⲆ[Cx.time];
      }
      Eo.fillRect(J, N, B, M);
    }
    if (zx.ΔᐃΔⵠᐃ && o) {
      t.ⵠΔⲆⲆⵠΔᐃᐃᐃ(k, D, H, h, -Dx.ᐃΔᐃⲆ.x + m, -Dx.ᐃΔᐃⲆ.x + m + C);
    }
  }
  function Cw(b, c, d, f) {
    var g = c.width;
    var h = c.height;
    var a = Math.floor(g / 2);
    var i = Math.floor(h / 2);
    if (Cx.transition) {
      Eo.globalAlpha = 1;
      Wp(Eo, ⲆⲆ[b][Cx.time], 0, 0, g, h, d, f, a, i);
      Cx.time = Cx.time ? 0 : 1;
      Eo.globalAlpha = 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
      Wp(Eo, ⲆⲆ[b][Cx.time], 0, 0, g, h, d, f, a, i);
      Cx.time = Cx.time ? 0 : 1;
      Eo.globalAlpha = 1;
    } else {
      Wp(Eo, c, 0, 0, g, h, d, f, a, i);
    }
  }
  function Dw(a, b, c, d) {
    if (Cx.transition) {
      Eo.globalAlpha = 1;
      Wp(Eo, ⲆⲆ[a][Cx.time], c, d);
      Cx.time = Cx.time ? 0 : 1;
      Eo.globalAlpha = 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
      Wp(Eo, ⲆⲆ[a][Cx.time], c, d);
      Cx.time = Cx.time ? 0 : 1;
      Eo.globalAlpha = 1;
    } else {
      Wp(Eo, b, c, d);
    }
  }
  function Ew(f, j, i, k, n, o) {
    var a = k.w1;
    var q = k.w2;
    var r = k.w3;
    var h = Dx.ᐃΔᐃⲆ.y + f - 700;
    var l = Math.max(Dx.ᐃΔᐃⲆ.x + j, 0);
    var g = Math.max(-Dx.ᐃΔᐃⲆ.x + Qo - i - 100, 0);
    var s = l;
    var b = Qo - l - g;
    if (o) {
      var d = k.ⵠΔΔ(a).x;
    } else {
      d = a.r.x;
    }
    var t = h + 0;
    0;
    t += d + 0 - 2;
    if (o) {
      d = k.ⵠΔΔ(q).x;
    } else {
      d = q.r.x;
    }
    var u = h + 250 - t + d;
    var w = (t += u - 2) - 2;
    if (o) {
      d = k.ⵠΔΔ(r).x;
    } else {
      d = r.r.x;
    }
    if (w < t + (u = h + 350 - t + d) - 3) {
      t += u - 2;
    } else {
      t = w;
    }
    u = h + 700 - t;
    if (o > 0 && n.ⲆⵠⲆⵠᐃⵠⲆ === 1) {
      if (Cx.transition) {
        var p = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
        Eo.fillStyle = Fw(15, 77, 72, 252, 239, 187, p);
      } else {
        Eo.fillStyle = ts.ⵠⵠⲆΔⵠⵠΔ[Cx.time];
      }
      Eo.fillRect(s, t, b, u);
    } else {
      if (Cx.transition) {
        p = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
        Eo.fillStyle = Fw(n.ⵠⲆⵠ[0], n.ⵠⲆⵠ[1], n.ⵠⲆⵠ[2], n.ⲆⲆⵠ[0], n.ⲆⲆⵠ[1], n.ⲆⲆⵠ[2], p);
      } else {
        Eo.fillStyle = n.ⲆⲆΔᐃΔ[Cx.time];
      }
      Eo.fillRect(s, t, b, u);
    }
  }
  function Fw(b, c, d, f, g, i, a) {
    var j;
    var k = "#";
    k += (j = Math.floor(f * a + (1 - a) * b)) < 16 ? "0" + j.toString(16) : j.toString(16);
    k += (j = Math.floor(a * g + c * (1 - a))) < 16 ? "0" + j.toString(16) : j.toString(16);
    return k += (j = Math.floor(i * a + (1 - a) * d)) < 16 ? "0" + j.toString(16) : j.toString(16);
  }
  function Gw(j, q, i, t, n, o) {
    var a = t.w1;
    var r = t.w2;
    var s = t.w3;
    var h = Dx.ᐃΔᐃⲆ.x + j - 700;
    var l = Math.max(Dx.ᐃΔᐃⲆ.y + q, 0);
    var g = Math.max(-Dx.ᐃΔᐃⲆ.y + aq - i - 100, 0);
    var u = l;
    var b = aq - l - g;
    if (o) {
      var d = t.ⵠΔΔ(a);
    } else {
      d = a.r;
    }
    var F = h + 0;
    var G = F;
    var m = u;
    var p = d.x + 0;
    var C = b;
    var H = F += d.x + 0 - 2;
    if (o) {
      d = t.ⵠΔΔ(r);
    } else {
      d = r.r;
    }
    var f = h + 250 - F + d.x;
    var J = F;
    var y = u;
    var w = f;
    var K = b;
    var k = (F += f - 2) - 2;
    if (o) {
      d = t.ⵠΔΔ(s);
    } else {
      d = s.r;
    }
    if (k < F + (f = h + 350 - F + d.x) - 3) {
      var A = hr;
      var L = F;
      var M = u;
      var B = f;
      var D = b;
      var I = F += f - 2;
    } else {
      A = x;
      F = k;
      I = -1;
    }
    f = h + 700 - F;
    if (Cx.transition) {
      var N = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
      Eo.fillStyle = Fw(9, 55, 63, 11, 106, 132, N);
    } else {
      Eo.fillStyle = ts.ΔΔⲆⲆⲆ[Cx.time];
    }
    Eo.fillRect(G, m, p, C);
    if (o) {
      if (Cx.transition) {
        N = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
        Eo.fillStyle = Fw(15, 70, 76, 42, 139, 155, N);
      } else {
        Eo.fillStyle = ts.ΔᐃⲆᐃᐃⵠᐃ[Cx.time];
      }
    } else if (Cx.transition) {
      N = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
      Eo.fillStyle = Fw(9, 55, 63, 11, 106, 132, N);
    } else {
      Eo.fillStyle = ts.ΔΔⲆⲆⲆ[Cx.time];
    }
    Eo.fillRect(J, y, w, K);
    if (A) {
      if (o) {
        if (Cx.transition) {
          N = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
          Eo.fillStyle = Fw(17, 94, 96, 169, 214, 211, N);
        } else {
          Eo.fillStyle = ts.ⲆΔᐃⲆΔᐃΔ[Cx.time];
        }
      } else if (Cx.transition) {
        N = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
        Eo.fillStyle = Fw(9, 55, 63, 11, 106, 132, N);
      } else {
        Eo.fillStyle = ts.ΔΔⲆⲆⲆ[Cx.time];
      }
      Eo.fillRect(L, M, B, D);
    }
    if (zx.ΔᐃΔⵠᐃ && o) {
      t.ⲆΔΔᐃⲆᐃᐃⵠᐃ(k, I, H, h, -Dx.ᐃΔᐃⲆ.y + m, -Dx.ᐃΔᐃⲆ.y + m + C);
    }
  }
  function Hw(a, b, c, d, f) {
    if (Cx.transition && f == 1) {
      Eo.globalAlpha = 1;
      Wp(Eo, ⲆⲆ[a][Cx.time][b], c, d);
      Cx.time = Cx.time ? 0 : 1;
      Eo.globalAlpha = 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
      Wp(Eo, ⲆⲆ[a][Cx.time][b], c, d);
      Cx.time = Cx.time ? 0 : 1;
      Eo.globalAlpha = 1;
    } else {
      Eo.globalAlpha = f;
      Wp(Eo, ⲆⲆ[a][Cx.time][b], c, d);
      Eo.globalAlpha = 1;
    }
  }
  function Iw(j, q, i, t, n, o) {
    var a = t.w1;
    var r = t.w2;
    var s = t.w3;
    var h = Dx.ᐃΔᐃⲆ.x + j + 820;
    var l = Math.max(Dx.ᐃΔᐃⲆ.y + q, 0);
    var g = Math.max(-Dx.ᐃΔᐃⲆ.y + aq - i - 100, 0);
    var u = l;
    var b = aq - l - g;
    if (o) {
      var d = t.ⵠΔΔ(a);
    } else {
      d = a.r;
    }
    var F = h + 0;
    var G = F;
    var m = u;
    var p = -d.x + 0;
    var C = b;
    var H = F += -d.x + 0 + 2;
    if (o) {
      d = t.ⵠΔΔ(r);
    } else {
      d = r.r;
    }
    var f = h - 250 - F - d.x;
    var K = F;
    var y = u;
    var w = f;
    var L = b;
    var k = (F += f + 2) - 2;
    if (o) {
      d = t.ⵠΔΔ(s);
    } else {
      d = s.r;
    }
    if (F + (f = h - 350 - F - d.x) < k) {
      var A = rg;
      var N = F;
      var J = u;
      var M = f;
      var B = b;
      var D = F += f + 2;
    } else {
      A = false;
      F = k;
      D = -1;
    }
    f = h - 700 - F;
    if (Cx.transition) {
      var O = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
      Eo.fillStyle = Fw(9, 55, 63, 11, 106, 132, O);
    } else {
      Eo.fillStyle = ts.ΔΔⲆⲆⲆ[Cx.time];
    }
    Eo.fillRect(G, m, p, C);
    if (o) {
      if (Cx.transition) {
        O = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
        Eo.fillStyle = Fw(15, 70, 76, 42, 139, 155, O);
      } else {
        Eo.fillStyle = ts.ΔᐃⲆᐃᐃⵠᐃ[Cx.time];
      }
    } else if (Cx.transition) {
      O = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
      Eo.fillStyle = Fw(9, 55, 63, 11, 106, 132, O);
    } else {
      Eo.fillStyle = ts.ΔΔⲆⲆⲆ[Cx.time];
    }
    Eo.fillRect(K, y, w, L);
    if (A) {
      if (o) {
        if (Cx.transition) {
          O = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
          Eo.fillStyle = Fw(17, 94, 96, 169, 214, 211, O);
        } else {
          Eo.fillStyle = ts.ⲆΔᐃⲆΔᐃΔ[Cx.time];
        }
      } else if (Cx.transition) {
        O = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
        Eo.fillStyle = Fw(9, 55, 63, 11, 106, 132, O);
      } else {
        Eo.fillStyle = ts.ΔΔⲆⲆⲆ[Cx.time];
      }
      Eo.fillRect(N, J, M, B);
    }
    if (zx.ΔᐃΔⵠᐃ && o) {
      t.ΔᐃᐃΔⵠᐃⲆᐃᐃ(k, D, H, h, -Dx.ᐃΔᐃⲆ.y + m, -Dx.ᐃΔᐃⲆ.y + m + C);
    }
  }
  function Jw(a) {
    Eo.globalAlpha = a.alpha;
    Pd(Eo, a.x + Dx.ᐃΔᐃⲆ.x, a.y + Dx.ᐃΔᐃⲆ.y, a.r);
    Td(Eo, ts.ᐃᐃⵠⲆⵠΔΔ[Cx.time]);
    Eo.globalAlpha = 1;
  }
  function Kw(f, j, i, k, n, o) {
    var a = k.w1;
    var q = k.w2;
    var r = k.w3;
    var h = Dx.ᐃΔᐃⲆ.x + f + 820;
    var l = Math.max(Dx.ᐃΔᐃⲆ.y + j, 0);
    var g = Math.max(-Dx.ᐃΔᐃⲆ.y + aq - i - 100, 0);
    var s = l;
    var b = aq - l - g;
    if (o) {
      var d = k.ⵠΔΔ(a).x;
    } else {
      d = a.r.x;
    }
    var t = h + 0;
    0;
    t += -d + 0 + 2;
    if (o) {
      d = k.ⵠΔΔ(q).x;
    } else {
      d = q.r.x;
    }
    var u = h - 250 - t - d;
    var w = (t += u + 2) - 2;
    if (o) {
      d = k.ⵠΔΔ(r).x;
    } else {
      d = r.r.x;
    }
    if (w > t + (u = h - 350 - t - d)) {
      t += u + 2;
    } else {
      t = w;
    }
    u = h - 700 - t;
    if (o > 0 && n.ⲆⵠⲆⵠᐃⵠⲆ === 1) {
      if (Cx.transition) {
        var p = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
        Eo.fillStyle = Fw(15, 77, 72, 252, 239, 187, p);
      } else {
        Eo.fillStyle = ts.ⵠⵠⲆΔⵠⵠΔ[Cx.time];
      }
      Eo.fillRect(t, s, u, b);
    } else {
      if (Cx.transition) {
        p = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
        Eo.fillStyle = Fw(n.ⵠⲆⵠ[0], n.ⵠⲆⵠ[1], n.ⵠⲆⵠ[2], n.ⲆⲆⵠ[0], n.ⲆⲆⵠ[1], n.ⲆⲆⵠ[2], p);
      } else {
        Eo.fillStyle = n.ⲆⲆΔᐃΔ[Cx.time];
      }
      Eo.fillRect(t, s, u, b);
    }
  }
  function Lw(f, j, i, k, n, o) {
    var a = k.w1;
    var q = k.w2;
    var r = k.w3;
    var h = Dx.ᐃΔᐃⲆ.x + f - 700;
    var l = Math.max(Dx.ᐃΔᐃⲆ.y + j, 0);
    var g = Math.max(-Dx.ᐃΔᐃⲆ.y + aq - i - 100, 0);
    var s = l;
    var b = aq - l - g;
    if (o) {
      var d = k.ⵠΔΔ(a).x;
    } else {
      d = a.r.x;
    }
    var t = h + 0;
    0;
    t += d + 0 - 2;
    if (o) {
      d = k.ⵠΔΔ(q).x;
    } else {
      d = q.r.x;
    }
    var u = h + 250 - t + d;
    var w = (t += u - 2) - 2;
    if (o) {
      d = k.ⵠΔΔ(r).x;
    } else {
      d = r.r.x;
    }
    if (t + (u = h + 350 - t + d) - 3 > w) {
      t += u - 2;
    } else {
      t = w;
    }
    u = h + 700 - t;
    if (o > 0 && n.ⲆⵠⲆⵠᐃⵠⲆ === 1) {
      if (Cx.transition) {
        var p = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
        Eo.fillStyle = Fw(15, 77, 72, 252, 239, 187, p);
      } else {
        Eo.fillStyle = ts.ⵠⵠⲆΔⵠⵠΔ[Cx.time];
      }
      Eo.fillRect(t, s, u, b);
    } else {
      if (Cx.transition) {
        p = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
        Eo.fillStyle = Fw(n.ⵠⲆⵠ[0], n.ⵠⲆⵠ[1], n.ⵠⲆⵠ[2], n.ⲆⲆⵠ[0], n.ⲆⲆⵠ[1], n.ⲆⲆⵠ[2], p);
      } else {
        Eo.fillStyle = n.ⲆⲆΔᐃΔ[Cx.time];
      }
      Eo.fillRect(t, s, u, b);
    }
  }
  function ef(a, b, c) {
    if (Cx.transition) {
      Eo.globalAlpha = 1;
      a.ΔⵠᐃⲆ(b, c);
      Cx.time = Cx.time ? 0 : 1;
      Eo.globalAlpha = 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
      a.ΔⵠᐃⲆ(b, c);
      Cx.time = Cx.time ? 0 : 1;
      Eo.globalAlpha = 1;
    } else {
      a.ΔⵠᐃⲆ(b, c);
    }
  }
  function tf(b, c, d, f, g) {
    var i = d.width;
    var a = d.height;
    var j = Math.floor(i / 2);
    var k = Math.floor(a / 2);
    if (Cx.transition) {
      Eo.globalAlpha = 1;
      Wp(Eo, ⲆⲆ[b][c][Cx.time], 0, 0, i, a, f, g, j, k);
      Cx.time = Cx.time ? 0 : 1;
      Eo.globalAlpha = 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
      Wp(Eo, ⲆⲆ[b][c][Cx.time], 0, 0, i, a, f, g, j, k);
      Cx.time = Cx.time ? 0 : 1;
      Eo.globalAlpha = 1;
    } else {
      Wp(Eo, ⲆⲆ[b][c][Cx.time], 0, 0, i, a, f, g, j, k);
    }
  }
  function nf(a, b) {
    if (Cx.transition) {
      Eo.globalAlpha = 1;
      a.ⵠᐃΔⲆⲆ(b);
      Cx.time = Cx.time ? 0 : 1;
      Eo.globalAlpha = 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
      a.ⵠᐃΔⲆⲆ(b);
      Cx.time = Cx.time ? 0 : 1;
      Eo.globalAlpha = 1;
    } else {
      a.ⵠᐃΔⲆⲆ(b);
    }
  }
  function of(a, b) {
    if (Cx.transition) {
      Eo.globalAlpha = 1;
      a.ⵠΔⲆⲆⲆ(b);
      Cx.time = Cx.time ? 0 : 1;
      Eo.globalAlpha = 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
      a.ⵠΔⲆⲆⲆ(b);
      Cx.time = Cx.time ? 0 : 1;
      Eo.globalAlpha = 1;
    } else {
      a.ⵠΔⲆⲆⲆ(b);
    }
  }
  function af(j, q, i, t, n, o) {
    var a = t.w1;
    var r = t.w2;
    var s = t.w3;
    var h = Dx.ᐃΔᐃⲆ.y + j - 700;
    var l = Math.max(Dx.ᐃΔᐃⲆ.x + q, 0);
    var g = Math.max(-Dx.ᐃΔᐃⲆ.x + Qo - i - 100, 0);
    var u = l;
    var b = Qo - l - g;
    if (o) {
      var d = t.ⵠΔΔ(a);
    } else {
      d = a.r;
    }
    var F = h + 0;
    var G = u;
    var m = F;
    var p = d.x + 0;
    var C = b;
    var H = F += d.x + 0 - 2;
    if (o) {
      d = t.ⵠΔΔ(r);
    } else {
      d = r.r;
    }
    var f = h + 250 - F + d.x;
    var K = F;
    var y = u;
    var w = f;
    var L = b;
    var k = (F += f - 2) - 2;
    if (o) {
      d = t.ⵠΔΔ(s);
    } else {
      d = s.r;
    }
    if (k < F + (f = h + 350 - F + d.x) - 3) {
      var A = true;
      var N = F;
      var J = u;
      var M = f;
      var B = b;
      var D = F += f - 2;
    } else {
      A = ul;
      F = k;
      D = -1;
    }
    f = h + 700 - F;
    if (Cx.transition) {
      var O = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
      Eo.fillStyle = Fw(9, 55, 63, 11, 106, 132, O);
    } else {
      Eo.fillStyle = ts.ΔΔⲆⲆⲆ[Cx.time];
    }
    Eo.fillRect(G, m, C, p);
    if (o) {
      if (Cx.transition) {
        O = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
        Eo.fillStyle = Fw(15, 70, 76, 42, 139, 155, O);
      } else {
        Eo.fillStyle = ts.ΔᐃⲆᐃᐃⵠᐃ[Cx.time];
      }
    } else if (Cx.transition) {
      O = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
      Eo.fillStyle = Fw(9, 55, 63, 11, 106, 132, O);
    } else {
      Eo.fillStyle = ts.ΔΔⲆⲆⲆ[Cx.time];
    }
    Eo.fillRect(y, K, L, w);
    if (A) {
      if (o) {
        if (Cx.transition) {
          O = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
          Eo.fillStyle = Fw(17, 94, 96, 169, 214, 211, O);
        } else {
          Eo.fillStyle = ts.ⲆΔᐃⲆΔᐃΔ[Cx.time];
        }
      } else if (Cx.transition) {
        O = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
        Eo.fillStyle = Fw(9, 55, 63, 11, 106, 132, O);
      } else {
        Eo.fillStyle = ts.ΔΔⲆⲆⲆ[Cx.time];
      }
      Eo.fillRect(J, N, B, M);
    }
    if (zx.ΔᐃΔⵠᐃ && o) {
      t.ⵠΔⵠⵠΔᐃⵠⲆⲆ(k, D, H, h, -Dx.ᐃΔᐃⲆ.x + G, -Dx.ᐃΔᐃⲆ.x + G + C);
    }
  }
  var rf = 0;
  var sf = 1;
  var hf = 2;
  var lf = 0;
  var gf = 1;
  var uf = 2;
  function bf(f, j, i, k, m, p, n, q, r = 0, h, t) {
    if (or === q) {
      q = 0;
    }
    if (Al === h) {
      h = 0;
    }
    if (Ao === t) {
      t = 1;
    }
    if (p !== 1) {
      p = 0;
    }
    if (k) {
      var w = k;
    }
    var u;
    var x = {
      width: f,
      height: j,
      ΔⲆ: w,
      state: lf,
      translate: {
        x: q,
        y: r,
        ⵠΔΔⲆⵠ: q,
        ⲆⵠⲆᐃⲆ: r
      },
      ⲆᐃⵠⵠⲆⲆⲆΔⲆ: p,
      ⵠⵠⲆΔ: 0,
      callback: n,
      position: h,
      active: t
    };
    function d() {
      return x.ΔⲆ[x.state];
    }
    function v(a) {
      var b = x.translate;
      if (x.width === 0 || x.height === 0) {
        x.width = x.ΔⲆ[0].width;
        x.height = x.ΔⲆ[0].height;
      }
      return a.x > b.x && a.x < b.x + x.width / m && a.y > b.y && a.y < b.y + x.height / m;
    }
    p = function () {
      var a = 0;
      if (x.ⲆᐃⵠⵠⲆⲆⲆΔⲆ === 1) {
        if (gf === x.state || uf === x.state) {
          x.ⵠⵠⲆΔ = (0 + Jx * 1000) % 1000;
        } else if (0 < 0) {
          x.ⵠⵠⲆΔ = 0 > 500 ? 0 + Jx * 1000 : 0 - Jx * 1000;
          if (0 < 0 || 1000 < 0) {
            x.ⵠⵠⲆΔ = 0;
          }
        }
        a = ΔⵠΔᐃ.ⵠⲆΔΔΔ(500 < 0 ? 2 : 0) * 0.2;
      }
      return a;
    };
    if ((m = m === 3 ? 3 : m === 1 ? 2 : 1) === 2) {
      u = function (a) {
        var b = 1 + p();
        var c = d();
        var f = x.width * b / 2;
        var g = b * x.height / 2;
        var h = (f - x.width / 2) / 2;
        var i = (g - x.height / 2) / 2;
        Wp(a, c, x.translate.x - h, x.translate.y - i, f, g);
      };
    } else if (m === 3) {
      u = function (b) {
        var c = d();
        var f = x.width;
        var g = x.height;
        var h = (f - x.width) / 2;
        var i = (g - x.height) / 2;
        Wp(b, c, x.translate.x - h, x.translate.y - i, f, g);
      };
      m = 1;
    } else {
      u = function (a) {
        Wp(a, d(), x.translate.x, x.translate.y);
      };
    }
    return {
      info: x,
      ᐃΔⲆⵠ: function (a, b, c) {
        if (v(b)) {
          if (c == sf) {
            x.state = uf;
          } else if (hf == c || rf == c && x.state != uf) {
            x.state = gf;
          }
          return true;
        } else {
          x.state = lf;
          return false;
        }
      },
      ΔⵠᐃⲆ: u,
      ⲆⵠⵠᐃᐃⲆΔ: v
    };
  }
  function df(f, j, i, k, n, p, a, q, t, w, l, g, u, b, x) {
    if (f.length === 0) {
      f = " ";
    }
    if (a === undefined) {
      a = 0;
    }
    if (q === fk) {
      q = 0;
    }
    if (Ra === t) {
      t = 0;
    }
    if (b === undefined) {
      b = 0;
    }
    var v = document.createElement("canvas");
    var c = v.getContext("2d");
    c.textBaseline = "middle";
    c.font = (Wn !== x ? x + " " : "") + k + "px " + j;
    n = n !== undefined ? Math.min(c.measureText(f).width, n) : c.measureText(f).width;
    v.width = n + a;
    v.height = k + q;
    if (p !== undefined) {
      if (Wn !== l) {
        c.globalAlpha = l;
      }
      c.fillStyle = p;
      if (g !== undefined) {
        ΔΔΔᐃΔᐃⲆⵠⲆ(c, t + 2, t, n + a - t * 2 - 4, k + q - t * 2, g);
        c.fill();
      } else {
        c.fillRect(t, t, n + a - t * 2, k + q - t * 2);
      }
      c.globalAlpha = 1;
      if (t !== 0) {
        c.lineWidth = t;
        c.strokeStyle = w;
        c.stroke();
      }
    }
    c.textBaseline = "middle";
    c.font = (mk !== x ? x + " " : "") + k + "px " + j;
    if (u !== undefined) {
      c.strokeStyle = u;
      c.lineWidth = b;
      c.lineJoin = "miter";
      c.miterLimit = 2;
      c.strokeText(f, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(k / 2), n);
    }
    c.fillStyle = i;
    c.fillText(f, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(k / 2), n);
    v.w2 = v.width / 2;
    v.ᐃⲆᐃΔᐃ = v.height / 2;
    return v;
  }
  function vf(a, b) {
    var c = a.getBoundingClientRect();
    return {
      x: b.clientX - c.left,
      y: b.clientY - c.top
    };
  }
  function cf(b, c, d, f, g) {
    var h = {
      x: d,
      y: f,
      ⵠΔΔⲆⵠ: d,
      ⲆⵠⲆᐃⲆ: f
    };
    return {
      translate: h,
      ΔⵠᐃⲆ: function (a) {
        Wp(a, b, h.x, h.y, b.width / 2, b.height / 2);
      },
      active: c,
      position: g
    };
  }
  var mf = "send";
  var pf = ΔⵠΔᐃ.ⵠᐃΔΔⵠΔⵠ("id") === "1" ? 1 : 0;
  var Cf = ΔⵠΔᐃ.ⵠᐃΔΔⵠΔⵠ("password");
  var Tf = ΔⵠΔᐃ.ⵠᐃΔΔⵠΔⵠ("debug") || undefined;
  if (Tf !== zo) {
    Tf = JSON.parse(e.decodeURIComponent(Tf));
  }
  var Mw = ΔⵠΔᐃ.ⵠᐃΔΔⵠΔⵠ("server") || cq;
  var zf = ΔⵠΔᐃ.ⵠᐃΔΔⵠΔⵠ("region") || undefined;
  var yf = "starve.io";
  var wf = "https://" + yf;
  var Pf = {
    ⲆᐃΔᐃᐃΔΔ: 128,
    IDLE: 64,
    ⵠᐃΔⲆ: 2,
    ᐃⲆⵠΔⵠᐃΔ: 32,
    ⲆΔⵠΔΔ: 4,
    ᐃⲆⵠⲆΔⵠⲆ: 16,
    ᐃᐃⲆⵠⵠΔⲆ: 256,
    ⲆⵠⲆⲆΔⵠⲆⵠⲆ: 1,
    ΔᐃⲆΔⵠᐃᐃ: 8
  };
  var kf = [{
    ΔⵠΔⲆΔ: 1000,
    items: [[2, 113], [1, 117], [8, 110], [1, 143]]
  }, {
    ΔⵠΔⲆΔ: 2000,
    items: [[2, 118], [1, 8], [2, 117], [16, 110], [2, 143]]
  }, {
    ΔⵠΔⲆΔ: 4000,
    items: [[3, 118], [1, 1], [4, 117], [20, 110], [4, 143], [1, 114], [80, 108], [140, 109]]
  }, {
    ΔⵠΔⲆΔ: 8000,
    items: [[1, 29], [4, 118], [1, 3], [6, 117], [30, 110], [6, 143], [1, 114], [150, 108], [200, 109], [60, 111], [2, 127]]
  }, {
    ΔⵠΔⲆΔ: 16000,
    items: [[1, 29], [1, 4], [1, 198], [7, 136], [2, 127], [2, 118], [1, 119], [15, 163], [2, 171], [1, 159], [1, 55], [200, 108], [300, 109]]
  }, {
    ΔⵠΔⲆΔ: 16000,
    items: [[1, 29], [1, 11], [1, 50], [1, 3], [10, 136], [4, 127], [6, 118], [3, 195], [1, 28], [200, 108], [300, 109]]
  }, {
    ΔⵠΔⲆΔ: 16000,
    items: [[1, 29], [1, 83], [1, 36], [3, 195], [1, 0], [1, 3], [7, 136], [2, 127], [4, 118], [150, 108], [200, 109], [1, 158]]
  }, {
    ΔⵠΔⲆΔ: 16000,
    items: [[1, 29], [1, 84], [1, 3], [7, 136], [2, 127], [4, 118], [2, 135], [4, 144], [10, 141], [6, 132], [4, 115], [1, 49], [500, 109]]
  }, {
    ΔⵠΔⲆΔ: 16000,
    items: [[1, 29], [1, 3], [16, 138], [1, 127], [6, 118], [3, 195], [1, 48], [1, 0], [16, 125], [150, 108], [200, 109]]
  }, {
    ΔⵠΔⲆΔ: 20000,
    items: [[1, 29], [1, 3], [1, 136], [1, 127], [3, 118], [3, 195], [1, 26], [1, 5], [1, 15], [2, 169], [50, 108], [100, 109]]
  }];
  let Af = 0;
  const Nw = [];
  var Jf = {
    ⲆᐃⲆᐃᐃᐃΔᐃᐃ: 5,
    ⲆᐃΔΔⵠᐃΔᐃⵠ: 20,
    ΔΔⵠⵠⲆᐃᐃ: 2,
    ΔΔⲆⵠⲆⲆΔᐃᐃ: 0.58,
    ΔΔΔΔⲆⲆΔ: 0.2,
    ᐃΔᐃΔⵠⵠⲆ: 52,
    ᐃⵠⲆΔⲆΔⲆ: 4,
    ⲆⲆⲆⲆᐃᐃⵠΔⵠ: 8000,
    ⲆᐃⲆᐃⲆᐃΔ: 4,
    ⲆᐃⲆⲆⵠⲆᐃ: 600000,
    ᐃⲆⵠⲆΔⵠⲆ: 0.2,
    ΔᐃᐃⲆⵠΔⲆᐃᐃ: 125000,
    ΔΔΔᐃΔⵠⵠⲆᐃ: 5,
    ⲆᐃΔᐃⲆᐃᐃⵠⵠ: 2000,
    ⲆⲆΔⲆⲆᐃΔⲆᐃ: 20,
    ⵠⵠⵠΔΔᐃΔⵠΔ: 14,
    ⵠⲆᐃᐃΔᐃⵠⵠⵠ: 3,
    ⵠⵠⵠⵠⵠΔᐃ: 1,
    ⲆΔᐃᐃΔᐃⵠ: 0,
    ⵠᐃᐃⵠⵠᐃΔⲆⵠ: 60000,
    ⵠᐃᐃⲆΔΔΔᐃⵠ: "[21]",
    ⵠⲆᐃⵠⵠᐃⲆΔᐃ: 200,
    ⵠⵠⲆᐃⵠⵠⵠᐃΔ: 14,
    ⲆⲆᐃΔⲆΔᐃⵠᐃ: 50,
    ⵠⵠⲆᐃⵠⲆΔ: 3
  };
  function Mf(a, b) {
    const c = (a + 56321) % 65351;
    const d = ~(b & 9858) & (b | 9858);
    const f = Sw(c, d, c, d);
    fx(c, d, c, d, c);
    return ~(f & 38815) & (f | 38815);
  }
  function Bf(a, b, c, d) {
    bk(Xw, a, b, c, d);
    return ((218 + (Eb(Ww[0], Ww[1], Ww[2], Ww[3]) ^ Rk(Ww[0], Ww[1], Ww[2], Ww[3], Ww[0]))) * 16807 + 0) % 2147483647;
  }
  var Df = {
    ⲆΔΔ: 480000,
    ᐃΔΔᐃᐃᐃᐃ: 10,
    ⵠᐃΔᐃᐃΔⵠ: 16,
    ᐃⲆΔΔⵠΔⵠᐃⲆ: 6,
    ⲆⵠΔⵠⲆΔⲆ: 60,
    ⵠⲆΔΔⲆ: 1,
    ⵠⲆΔⲆΔ: 2,
    ⵠᐃⵠᐃΔ: 4,
    ⵠᐃᐃⵠᐃ: 8,
    ΔΔΔΔⲆⲆΔ: 10,
    ⵠⲆΔⵠΔⲆᐃ: 100,
    ᐃᐃⲆⵠⲆΔⲆ: 100,
    ⲆⲆΔΔᐃⵠΔ: 100,
    ⵠᐃⵠⵠᐃⵠΔΔⲆ: 100,
    ⲆΔᐃⲆᐃⵠΔ: 100,
    ΔᐃᐃΔΔᐃⵠ: 100,
    ᐃΔΔⵠᐃⲆᐃΔᐃ: 100,
    ΔᐃᐃΔΔᐃⵠ: 100,
    ᐃⲆΔΔⲆⲆᐃ: 100,
    ⵠⲆⵠⲆΔⲆΔ: 100,
    ᐃⵠⲆⲆΔ: 0,
    ⲆⲆⲆⵠΔΔⲆ: 1,
    ⵠⲆᐃⵠⲆ: 2,
    ΔΔᐃᐃΔ: 3,
    ᐃΔⲆΔᐃ: 4,
    ᐃᐃⵠⵠⲆᐃᐃ: 5,
    ΔΔΔΔⵠ: 6,
    ΔⲆⲆⲆᐃ: 7,
    ΔᐃⲆⲆⵠΔΔⲆΔ: {
      osaka: "Osaka",
      atlanta: "Atlanta",
      frankfurt: "Frankfurt",
      sydney: "Sydney",
      losangeles: "Los Angeles"
    },
    ΔⵠⵠⲆΔⵠΔ: {
      0: "normal",
      2: "zombies",
      3: "vampires",
      4: "forest",
      6: "community",
      7: "experimental"
    },
    ΔⵠⲆᐃΔⲆⲆ: 0,
    ΔⵠⲆⵠᐃⲆΔ: 0,
    ᐃΔⵠⵠⵠᐃΔ: 30,
    ΔⲆᐃΔⲆΔⵠⲆⲆ: 2,
    ⲆⵠΔⵠⲆΔⲆ: 60000,
    ᐃⵠᐃᐃⲆⵠᐃᐃᐃ: 0,
    ᐃⲆᐃᐃΔᐃⲆᐃΔ: 0,
    ⲆⵠᐃΔⲆᐃΔᐃᐃ: 50,
    ΔΔΔⵠᐃᐃⲆᐃΔ: 0,
    ⲆⲆⵠⲆᐃⲆⵠΔⵠ: 40,
    ⵠⲆᐃΔΔⲆΔΔΔ: 39,
    ΔⵠⵠⵠⵠΔⵠⵠⲆ: 830,
    ΔΔⲆⲆΔΔΔ: 25,
    ⵠⲆΔⲆΔⲆⲆ: 8,
    ⵠⵠⵠΔⲆ: 0,
    ⵠⲆⵠⵠΔ: 0,
    ⲆⵠΔⵠⲆΔᐃ: 200,
    ᐃΔΔᐃⵠΔⲆ: 0,
    ᐃⲆΔⲆᐃ: 250,
    ⵠⵠΔᐃⵠᐃᐃ: 150,
    ᐃⵠΔⵠᐃⵠⵠ: 0,
    Ⲇᐃᐃᐃⵠ: 350,
    ⵠᐃΔΔⵠᐃᐃ: 100,
    ΔᐃⵠΔⲆΔΔ: 700,
    ⵠΔΔⵠⵠ: 39879
  };
  var If = [];
  for (jb = 0; jb < 500; jb++) {
    If[jb] = 0;
  }
  If[47] = 1;
  If[57] = 1;
  If[0] = 1;
  If[5] = 1;
  If[6] = 1;
  If[30] = 1;
  If[19] = 1;
  If[9] = 1;
  If[62] = 1;
  If[63] = 1;
  If[13] = 1;
  If[14] = 1;
  If[15] = 1;
  If[33] = 1;
  If[34] = 1;
  If[16] = 1;
  If[17] = 1;
  If[12] = 1;
  If[18] = 1;
  var Ef = [{
    time: 2880000
  }, {
    time: 1440000
  }, {
    time: 1920000
  }, {
    time: 1440000
  }, {
    time: 2880000
  }, {
    time: 2400000
  }, {
    time: 2400000
  }, {
    time: 4800000
  }, {
    time: 2880000
  }, {
    time: 3360000
  }, {
    time: 2880000
  }, {
    time: 3840000
  }, {
    time: 3360000
  }];
  var Sf = {
    ⵠΔⵠΔᐃ: 50,
    ᐃΔᐃⵠⲆ: 73,
    ⲆΔⵠⵠⵠ: 12,
    ᐃᐃΔⲆΔ: 79,
    ΔᐃⵠⲆᐃ: 30,
    ΔⵠⵠⲆΔ: 21,
    ⲆⲆⵠⲆᐃ: 65,
    ⲆᐃⲆΔⵠ: 23,
    ⲆⲆΔΔΔ: 13,
    ⲆⲆᐃΔⲆ: 24,
    ⵠᐃⵠΔᐃ: 27,
    ΔⲆⵠⲆᐃ: 88,
    ⵠⲆⵠⲆⵠ: 9,
    ⲆᐃΔΔⲆ: 62,
    ⵠᐃᐃⲆΔ: 2,
    ΔⵠᐃⲆΔ: 32,
    ⵠΔⵠⲆⵠ: 100,
    ᐃΔⵠᐃⲆ: 63,
    Δⵠᐃⵠⵠ: 47,
    ᐃᐃⲆⵠⲆ: 20,
    ⵠⵠΔⲆⵠ: 8,
    ᐃΔᐃΔᐃ: 51,
    ᐃΔⵠⵠΔ: 72,
    ⵠΔⲆⵠⲆⲆⵠ: 83,
    ⵠΔΔΔⵠ: 56,
    ᐃⵠⲆⲆᐃ: 45,
    ⵠΔᐃⵠΔ: 26,
    ⵠΔΔⵠⵠ: 3,
    ⵠⵠⲆΔⵠ: 15,
    ⲆⵠⲆΔⲆ: 68,
    ΔⲆᐃᐃⲆ: 31,
    ᐃᐃΔⲆᐃ: 44,
    ⵠⵠΔᐃᐃ: 64,
    ⵠΔΔᐃⵠ: 74,
    ⲆᐃΔᐃⲆ: 75,
    ⵠΔⵠΔΔ: 67,
    ⲆⵠⲆⲆΔ: 33,
    ΔⲆΔΔᐃ: 78,
    ᐃⵠⲆⵠᐃ: 43,
    ⵠΔΔΔΔ: 39,
    ᐃⲆⲆⲆⲆ: 11,
    ⵠΔᐃᐃⲆ: 28,
    Δᐃⵠᐃⵠ: 29,
    ⲆⲆΔⵠⲆ: 87,
    ᐃⵠᐃⲆⵠ: 22,
    ᐃⵠⲆᐃᐃ: 46,
    ᐃⵠⵠᐃᐃ: 14,
    ΔᐃΔⲆⵠ: 55,
    ⲆⲆⲆᐃΔ: 80,
    ⲆⵠⵠⲆⵠᐃⲆ: 84,
    ⲆΔⲆᐃⲆ: 91,
    ᐃⲆΔⵠΔ: 17,
    ⵠⲆΔΔⵠ: 41,
    ᐃⵠᐃᐃⵠ: 42,
    ⲆⵠΔΔⵠ: 4,
    ⵠⵠⵠⲆⲆ: 25,
    ⲆⲆᐃΔⵠ: 6,
    ⵠⲆⲆⵠΔ: 40,
    ᐃⲆΔⲆⲆⵠΔ: 82,
    ᐃⲆᐃᐃΔⲆᐃ: 89,
    ⵠⵠΔᐃⲆ: 81,
    ΔΔⵠⵠⵠ: 38,
    ᐃΔⵠⵠⲆ: 18,
    ⵠΔⲆᐃⲆ: 37,
    ΔΔⲆᐃΔ: 7,
    ΔΔΔᐃⵠ: 66,
    ΔΔⲆⵠⲆ: 70,
    ΔⵠⵠΔⲆ: 19,
    ⵠⵠⵠⵠᐃ: 49,
    ᐃΔⵠΔⵠⲆⵠ: 85,
    ΔΔΔΔⲆ: 52,
    ⵠΔⵠⲆᐃ: 36,
    ⵠᐃΔΔΔ: 71,
    ᐃⵠⲆΔᐃΔᐃ: 76,
    ΔⲆᐃⵠⲆ: 60,
    ⵠⵠᐃⲆᐃ: 34,
    ΔⵠⵠⲆⵠ: 10,
    ΔᐃⵠⲆⲆ: 90,
    ΔⵠᐃΔᐃ: 1,
    ⲆΔⲆΔⵠ: 61,
    ᐃⵠⵠᐃⲆ: 53,
    ᐃⵠⵠⵠⲆ: 5,
    ΔΔⵠΔⵠ: 86,
    ⵠⵠⵠⲆΔ: 48,
    ⵠⵠΔⲆⲆ: 69,
    ⲆⵠΔΔⲆ: 54,
    ᐃΔⵠⲆΔ: 0,
    ⲆⵠᐃⲆⲆ: 77,
    ⵠΔⵠⵠΔ: 35,
    ΔⵠΔᐃⲆ: 16
  };
  var Qf = [[24, 108], [25, 111], [26, 112], [27, 121], [28, 202]];
  function _f(a, b, c, d) {
    this.id = a;
    this.ΔⵠΔⵠΔ = (a + 5) * 8;
    this.ⵠⲆΔⲆⵠ = Qo / 1366;
    this.x = b;
    this.y = c;
    this.c = Math.sin(d);
    this.ⵠΔⲆΔ = Math.cos(d);
    this.alpha = 0;
  }
  function Ff(f) {
    function j(b, c, d, f, g) {
      for (var a = 0; g > a && k(b, c, d, f, 8) !== 1; a++);
      if (g === a) {
        return 0;
      } else {
        return 1;
      }
    }
    function i(b, c, d) {
      var f = c;
      for (var g = d; g < Cx.ⲆⵠΔΔΔ; g++) {
        for (var h = c; Cx.ⲆᐃⲆⵠᐃ > h && (g === d && (f = Math.max(h, f)), f >= h) && b[g][h] !== 1; h++) {
          b[g][h] = 1;
        }
        if (h < f) {
          break;
        }
      }
      Cx.ΔᐃⵠⲆⵠ.push(new Cx.ⲆΔⵠⵠⵠⲆⲆ(Cx.ΔⲆᐃᐃᐃ, c, d, f - c + 1, g - d, 15));
    }
    function k(c, d, f, i, j) {
      var k = d + Math.floor(i * Cx.ⲆⲆᐃⲆⲆ.get());
      var a = f + Math.floor(i * Cx.ⲆⲆᐃⲆⲆ.get());
      var m = 10 + Math.floor(Cx.ⲆⲆᐃⲆⲆ.get() * (Cx.ⲆᐃⲆⵠᐃ - k - 20));
      var n = 10 + Math.floor((Cx.ⲆⵠΔΔΔ - a - 20) * Cx.ⲆⲆᐃⲆⲆ.get());
      var h = m + k;
      var l = n + a;
      for (var g = 0; Cx.ΔᐃⵠⲆⵠ.length > g; g++) {
        var o = Cx.ΔᐃⵠⲆⵠ[g];
        if (ΔⵠΔᐃ.ΔⵠΔΔⲆᐃⲆ(m, h, n, l, o.x1 / 100 - j, o.x2 / 100 + j, o.y1 / 100 - j, o.y2 / 100 + j) === 1) {
          return 0;
        }
      }
      Cx.ΔᐃⵠⲆⵠ.push(new Cx.ⲆΔⵠⵠⵠⲆⲆ(c, m, n, k, a, 15));
      return 1;
    }
    function q(a, f) {
      var h = Cx.ΔᐃⵠⲆⵠ[a];
      var i = Math.floor(h.y1 / 100);
      var j = Math.floor(h.x1 / 100);
      var k = Math.floor(h.ᐃΔΔ / 100);
      var o = j + (A = Math.floor(h.w / 100));
      var q = 2;
      var r = k;
      var s = i;
      for (var t = j + 10 + Math.floor(Cx.ⲆⲆᐃⲆⲆ.get() * (A - 20)), w = t - 4; w < t + 4; w++) {
        y(i - 1, w, "wtb", 0, 1);
      }
      while (r > 0) {
        if (q !== 2) {
          if (r < 10) {
            for (D = 1; r > 0; D++) {
              n(s, t, 1, 1, 0, f, D, 1);
              r -= 1;
              s += 1;
            }
          } else if (q !== 1) {
            q = 1;
            var x = Math.floor(1 + Cx.ⲆⲆᐃⲆⲆ.get() * 2);
            var z = 1 + Math.floor(Cx.ⲆⲆᐃⲆⲆ.get() * 4);
            if (t < j + 16) {
              n(s, t, x, 0, 1, f, z, z);
              t += x;
            } else if (t > o - 16) {
              n(s, t, x, 0, -1, f, z, z);
              t -= x;
            } else if (Cx.ⲆⲆᐃⲆⲆ.get() > 0.5) {
              n(s, t, x, 0, 1, f, z, z);
              t += x;
            } else {
              n(s, t, x, 0, -1, f, z, z);
              t -= x;
            }
          } else {
            var A;
            var B = Math.min(r, Math.floor(1 + Cx.ⲆⲆᐃⲆⲆ.get() * 4));
            n(s, t, B, 1, 0, f, A = 1 + Math.floor(Cx.ⲆⲆᐃⲆⲆ.get() * 4), A);
            q = 0;
            r -= B;
            s += B;
          }
        } else {
          for (var D = 10; D > 1; D--) {
            n(s, t, 1, 1, 0, f, D, 1);
            r -= 1;
            s += 1;
          }
          q = 0;
        }
      }
      for (w = t - 1; t + 2 > w; w++) {
        y(s, w, "wtb", 0, 1);
      }
    }
    function n(f, h, j, k, m, n, a, o) {
      var p = Math.floor(a / 2);
      var l = Math.max(1, Math.floor(a / 2));
      var g = Math.floor(o / 2);
      var q = Math.max(1, Math.floor(o / 2));
      for (var b = 0; b < j; b++) {
        for (var r = f - g; f + q > r; r++) {
          for (var s = h - p; s < h + l; s++) {
            if (y(r, s, "wtb", 0, 1) === 1) {
              n.push([r, s, 1]);
            }
          }
        }
        f += k;
        h += m;
      }
    }
    function a(a, b) {
      for (var c = 0; c < b.length; c++) {
        o(b[c][0], b[c][1], a, b[c][2]);
      }
    }
    function o(a, b, c, f) {
      if (d(a, b) && (ⲆⵠⲆᐃ = Ax.ⲆⵠⲆᐃ, ⲆⵠⲆᐃ[a][b] === ah && (ⲆⵠⲆᐃ[a][b] = {}), ⲆⵠⲆᐃ[a][b].r === xh)) {
        var g = 0;
        if (d(a - 1, b) && ⲆⵠⲆᐃ[a - 1][b] !== undefined && wj !== ⲆⵠⲆᐃ[a - 1][b].wtb) {
          g += 2;
        }
        if (d(a, b - 1) && ⲆⵠⲆᐃ[a][b - 1] !== w && ⲆⵠⲆᐃ[a][b - 1].wtb !== zo) {
          g += 8;
        }
        if (d(a, b + 1) && ⲆⵠⲆᐃ[a][b + 1] !== Ao && ⲆⵠⲆᐃ[a][b + 1].wtb !== Ma) {
          g += 16;
        }
        if (d(a + 1, b) && ⲆⵠⲆᐃ[a + 1][b] !== undefined && ⲆⵠⲆᐃ[a + 1][b].wtb !== undefined) {
          g += 64;
        }
        if (d(a - 1, b - 1) && (g & 10) === 10 && wj !== ⲆⵠⲆᐃ[a - 1][b - 1] && ⲆⵠⲆᐃ[a - 1][b - 1].wtb !== undefined) {
          g += 1;
        }
        if (d(a - 1, b + 1) && (g & 18) === 18 && ⲆⵠⲆᐃ[a - 1][b + 1] !== Wn && ur !== ⲆⵠⲆᐃ[a - 1][b + 1].wtb) {
          g += 4;
        }
        if (d(a + 1, b - 1) && (g & 72) === 72 && ⲆⵠⲆᐃ[a + 1][b - 1] !== Ra && ⲆⵠⲆᐃ[a + 1][b - 1].wtb !== undefined) {
          g += 32;
        }
        if (d(a + 1, b + 1) && (g & 80) === 80 && ⲆⵠⲆᐃ[a + 1][b + 1] !== fk && ⲆⵠⲆᐃ[a + 1][b + 1].wtb !== Ao) {
          g += 128;
        }
        ⲆⵠⲆᐃ[a][b].r = {};
        ⲆⵠⲆᐃ[a][b].r.ΔⵠⲆⲆᐃⲆΔ = g;
        ⲆⵠⲆᐃ[a][b].r.ⵠᐃᐃⵠⲆᐃⲆ = f;
        ⲆⵠⲆᐃ[a][b].r.ΔⵠⲆᐃ = Cx.ΔⲆⵠⵠⵠ(c, b * 100 + 50, a * 100 + 50) - 400;
        ⲆⵠⲆᐃ[a][b].r.x = b * 100 + 50;
        ⲆⵠⲆᐃ[a][b].r.y = a * 100 + 50;
      }
    }
    function y(a, b, c, d, f) {
      if (a >= 0 && b >= 0 && Cx.ⲆⵠΔΔΔ > a && b < Cx.ⲆᐃⲆⵠᐃ) {
        ⲆⵠⲆᐃ = Ax.ⲆⵠⲆᐃ;
        if (ⲆⵠⲆᐃ[a][b] === undefined) {
          ⲆⵠⲆᐃ[a][b] = {};
        }
        if (ⲆⵠⲆᐃ[a][b][c] !== undefined) {
          return 0;
        } else {
          ⲆⵠⲆᐃ[a][b][c] = [];
          ⲆⵠⲆᐃ[a][b][c][d] = [{
            x: b * 100 + 50,
            y: a * 100 + 50
          }];
          if (f === 1) {
            (function (a, b, c, d) {
              dd.push([a, b, c, d]);
            })(c, d, a, b);
          }
          return 1;
        }
      }
    }
    function h(f, h, i, j, k) {
      var n = Cx.ΔᐃⵠⲆⵠ[f];
      var a = Math.floor(n.x1 / 100);
      var p = Math.floor(n.y1 / 100);
      var q = Math.floor(n.w / 100);
      var t = Math.floor(n.ᐃΔΔ / 100);
      if (k !== Xq) {
        k = 1 - k;
        a += Math.floor(k * q / 2);
        p += Math.floor(k * t / 2);
        q -= Math.floor(k * q);
        t -= Math.floor(k * t);
      }
      var w = Ax.ⲆⵠⲆᐃ;
      for (var u = 0, x = 0; j > x && u <= 50000; u++) {
        var z = p + Math.floor(t * Cx.ⲆⲆᐃⲆⲆ.get());
        var A = a + Math.floor(q * Cx.ⲆⲆᐃⲆⲆ.get());
        if (Cx.ΔⲆⵠⵠⵠ(f, A * 100 + 50, z * 100 + 50) >= 400 && ((B = w[z][A + 1]) === undefined || B[h] === Cr || B[h][i] === undefined) && ((B = w[z][A - 1]) === fk || B[h] === undefined || B[h][i] === undefined)) {
          var B = w[z + 1][A];
          if (fk === B || B[h] === undefined || B[h][i] === undefined) {
            B = w[z - 1][A];
            if (Xj === B || B[h] === undefined || B[h][i] === undefined) {
              if ((B = w[z + 1][A - 1]) === undefined || B[h] === Ao || B[h][i] === Ma) {
                if ((B = w[z - 1][A + 1]) === ar || zo === B[h] || B[h][i] === undefined) {
                  if ((B = w[z + 1][A + 1]) === undefined || B[h] === wj || B[h][i] === undefined) {
                    if ((B = w[z - 1][A - 1]) === undefined || B[h] === fk || B[h][i] === undefined) {
                      if (w[z][A] === undefined) {
                        y(z, A, h, i, 1);
                        x++;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    function l(a) {
      for (var b = 0; b < 3; b++) {
        h(a, "s", b, 15);
      }
      for (b = 0; b < 3; b++) {
        h(a, "a", b, 1);
      }
      for (b = 0; b < 3; b++) {
        h(a, "d", b, 1);
      }
      m(a);
    }
    function g(a, b) {
      (function (c, d) {
        var f = Cx.ΔᐃⵠⲆⵠ[d];
        for (var h = 0, i = 0; h < c && i < 10000; i++) {
          var j = f.y1 + f.ᐃΔΔ * Cx.ⲆⲆᐃⲆⲆ.get();
          var k = f.x1 + f.w * Cx.ⲆⲆᐃⲆⲆ.get();
          var m = Math.floor(j / 100);
          var p = Math.floor(k / 100);
          if (Cx.ΔⲆⵠⵠⵠ(d, p * 100 + 50, m * 100 + 50) >= 600) {
            for (var q = 1, t = m - 4; q === 1 && t <= m + 4; t++) {
              for (var v = p - 4; q === 1 && v <= p + 4; v++) {
                if (Ax.ⲆⵠⲆᐃ[t][v] !== Ra) {
                  q = 0;
                }
              }
            }
            if (q !== 0) {
              y(m, p, "la", h % 6, 0);
              h++;
            }
          }
        }
      })(b * 80, a);
      for (var c = 0; c < 3; c++) {
        h(a, "s", c, Math.floor(b * 12));
      }
      for (c = 0; c < 3; c++) {
        h(a, "g", c, Math.floor(b * 6));
      }
      for (c = 0; c < 3; c++) {
        h(a, "re", c, Math.max(1, Math.floor(b * 1)), 0.2);
      }
      for (c = 0; c < 3; c++) {
        h(a, "a", c, Math.max(1, Math.floor(b * 2)));
      }
      m(a);
    }
    function r(b, c) {
      for (var d = 0; d < 3; d++) {
        h(b, "s", d, Math.floor(c * 12));
      }
      for (d = 0; d < 3; d++) {
        h(b, "m", d, Math.max(1, Math.floor(c * 1)), 0.2);
      }
      h(b, "c", 0, Math.floor(c * 36));
      var f = [];
      (function (c, d) {
        var f = Cx.ΔᐃⵠⲆⵠ[c];
        var h = Math.floor(f.y1 / 100);
        var i = Math.floor(f.x1 / 100);
        var j = Math.floor(f.ᐃΔΔ / 100);
        var a = Math.floor(f.w / 100);
        var k = h + Math.floor(j / 2);
        var m = i + Math.floor(a / 2);
        for (var l = 0; l < 3; l++) {
          y(n = Math.floor(k - 3 + Cx.ⲆⲆᐃⲆⲆ.get() * 6), o = Math.floor(m - 3 + Cx.ⲆⲆᐃⲆⲆ.get() * 6), "plm", l, 1);
        }
        for (l = 0; l < 80; l++) {
          var n;
          var o;
          if (y(n = Math.floor(k - 3 + Cx.ⲆⲆᐃⲆⲆ.get() * 6), o = Math.floor(m - 3 + Cx.ⲆⲆᐃⲆⲆ.get() * 6), "wtb", 0, 1) === 1) {
            d.push([n, o, 0]);
          }
        }
      })(b, f);
      a(b, f);
      f = [];
    }
    function b(b, c) {
      for (var d = 0; d < 6; d++) {
        h(b, "t", d, Math.floor(c * 20));
      }
      for (d = 0; d < 4; d++) {
        h(b, "b", d, Math.floor(c * 20));
      }
      for (d = 0; d < 3; d++) {
        h(b, "s", d, Math.floor(c * 20));
      }
      var f = [];
      q(b, f);
      a(b, f);
      f = [];
      h(b, "p", 0, Math.floor(c * 24));
      for (d = 0; d < 3; d++) {
        h(b, "g", d, Math.floor(c * 5));
      }
      if (Cx.mode === 2) {
        for (d = 0; d < 3; d++) {
          h(b, "d", d, Math.floor(c * 3));
        }
        for (d = 0; d < 3; d++) {
          h(b, "a", d, Math.floor(c * 2));
        }
      }
      m(b);
    }
    function d(a, b) {
      return a >= 0 && b >= 0 && a < Cx.ⲆⵠΔΔΔ && b < Cx.ⲆᐃⲆⵠᐃ;
    }
    function t(a, b) {
      for (var c = 0; c < 3; c++) {
        h(a, "s", c, Math.floor(b * 18));
      }
      for (c = 0; c < 3; c++) {
        h(a, "f", c, Math.floor(b * 24));
      }
      for (c = 0; c < 3; c++) {
        h(a, "d", c, Math.max(1, Math.floor(b * 2)), 0.3);
      }
      for (c = 0; c < 3; c++) {
        h(a, "g", c, Math.floor(b * 6));
      }
      m(a);
    }
    function c(b, c) {
      for (var d = 0; d < 6; d++) {
        h(b, "t", d, Math.floor(c * 80));
      }
      for (d = 0; d < 4; d++) {
        h(b, "b", d, Math.floor(c * 80));
      }
      for (d = 0; d < 3; d++) {
        h(b, "s", d, Math.floor(c * 50));
      }
      var f = [];
      for (d = 0; d < 6; d++) {
        q(b, f);
      }
      a(b, f);
      f = [];
      h(b, "p", 0, Math.floor(c * 28));
      for (d = 0; d < 3; d++) {
        h(b, "g", d, Math.floor(c * 7));
      }
      for (d = 0; d < 3; d++) {
        h(b, "d", d, Math.floor(c * 2));
      }
      for (d = 0; d < 3; d++) {
        h(b, "a", d, Math.floor(c * 1));
      }
      for (d = 0; d < 3; d++) {
        h(b, "m", d, Math.floor(c * 1));
      }
      h(b, "a", 0, Math.floor(c * 1));
      m(b);
    }
    function m(a) {
      var b = Cx.ΔᐃⵠⲆⵠ[a];
      y(-3 + Math.floor(b.y2 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
      y(3 + Math.floor(b.y1 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
      y(-3 + Math.floor(b.y2 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
      y(3 + Math.floor(b.y1 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
    }
    function p(a, b, c) {
      if (a[b]) {
        for (Ul = 0; a[b].length > Ul; Ul++) {
          if (a[b][Ul]) {
            for (ΔΔⲆᐃ = 0; a[b][Ul].length > ΔΔⲆᐃ; ΔΔⲆᐃ++) {
              a[b][Ul][ΔΔⲆᐃ].ᐃΔⲆΔ = c;
              a[b][Ul][ΔΔⲆᐃ].ᐃⲆⲆ = false;
              a[b][Ul][ΔΔⲆᐃ].time = 0;
              a[b][Ul][ΔΔⲆᐃ].angle = 0;
            }
          }
        }
      }
    }
    this.mode = 0;
    this.ᐃᐃΔᐃΔⲆΔ = f;
    this.ᐃᐃᐃⲆᐃ = 0;
    this.ᐃᐃⲆⲆⵠⵠⲆ = 6;
    this.ΔΔΔᐃ = [];
    this.ⲆΔⵠ = [];
    this.ⲆΔⵠ[0] = [];
    this.ⲆΔⵠ[100] = [];
    this.ⲆΔⵠ[80] = [];
    this.ⲆΔⵠ[60] = [];
    this.ⲆΔⵠ[67] = [];
    this.ⲆΔⵠ[70] = [];
    this.ⲆΔⵠ[77] = [];
    this.ⲆΔⵠ[71] = [];
    this.ⲆΔⵠ[72] = [];
    this.ⲆΔⵠ[73] = [];
    this.ⲆΔⵠ[74] = [];
    this.ⲆΔⵠ[65] = [];
    this.ⲆΔⵠ[66] = [];
    this.ⲆΔⵠ[62] = [];
    this.ⲆΔⵠ[88] = [];
    this.ⲆΔⵠ[91] = [];
    this.ⲆΔⵠ[90] = [];
    this.ⲆΔⵠ[63] = [];
    this.ⲆΔⵠ[78] = [];
    this.ⲆΔⵠ[64] = [];
    this.ⲆΔⵠ[69] = [];
    this.ⲆΔⵠ[68] = [];
    this.ⲆΔⵠ[79] = [];
    this.ⲆΔⵠ[89] = [];
    this.ⲆΔⵠ[83] = [];
    this.ⲆΔⵠ[84] = [];
    this.ⲆΔⵠ[85] = [];
    this.ⲆΔⵠ[81] = [];
    this.ⲆΔⵠ[82] = [];
    this.ⲆΔⵠ[86] = [];
    this.ⲆΔⵠ[34] = [];
    this.ⲆΔⵠ[36] = [];
    this.ⲆΔⵠ[61] = [];
    this.ⲆΔⵠ[2] = [];
    this.ⲆΔⵠ[1] = [];
    this.ⲆΔⵠ[6] = [];
    this.ⲆΔⵠ[3] = [];
    this.ⲆΔⵠ[5] = [];
    this.ⲆΔⵠ[12] = [];
    this.ⲆΔⵠ[13] = [];
    this.ⲆΔⵠ[14] = [];
    this.ⲆΔⵠ[20] = [];
    this.ⲆΔⵠ[52] = [];
    this.ⲆΔⵠ[4] = [];
    this.ⲆΔⵠ[7] = [];
    this.ⲆΔⵠ[8] = [];
    this.ⲆΔⵠ[9] = [];
    this.ⲆΔⵠ[19] = [];
    this.ⲆΔⵠ[50] = [];
    this.ⲆΔⵠ[41] = [];
    this.ⲆΔⵠ[10] = [];
    this.ⲆΔⵠ[15] = [];
    this.ⲆΔⵠ[16] = [];
    this.ⲆΔⵠ[17] = [];
    this.ⲆΔⵠ[21] = [];
    this.ⲆΔⵠ[51] = [];
    this.ⲆΔⵠ[45] = [];
    this.ⲆΔⵠ[46] = [];
    this.ⲆΔⵠ[47] = [];
    this.ⲆΔⵠ[48] = [];
    this.ⲆΔⵠ[49] = [];
    this.ⲆΔⵠ[53] = [];
    this.ⲆΔⵠ[18] = [];
    this.ⲆΔⵠ[29] = [];
    this.ⲆΔⵠ[56] = [];
    this.ⲆΔⵠ[11] = [];
    this.ⲆΔⵠ[22] = [];
    this.ⲆΔⵠ[23] = [];
    this.ⲆΔⵠ[30] = [];
    this.ⲆΔⵠ[38] = [];
    this.ⲆΔⵠ[33] = [];
    this.ⲆΔⵠ[31] = [];
    this.ⲆΔⵠ[55] = [];
    this.ⲆΔⵠ[37] = [];
    this.ⲆΔⵠ[43] = [];
    this.ⲆΔⵠ[44] = [];
    this.ⲆΔⵠ[54] = [];
    this.ⲆΔⵠ[39] = [];
    this.ⲆΔⵠ[40] = [];
    this.ⲆΔⵠ[32] = [];
    this.ⲆΔⵠ[24] = [];
    this.ⲆΔⵠ[25] = [];
    this.ⲆΔⵠ[26] = [];
    this.ⲆΔⵠ[27] = [];
    this.ⲆΔⵠ[28] = [];
    this.ⲆΔⵠ[35] = [];
    this.ⲆΔⵠ[87] = [];
    this.ⲆΔⵠ[42] = [];
    this.ᐃⵠΔΔᐃ = [];
    this.ⲆᐃⲆⵠᐃ = 260;
    this.ⲆⵠΔΔΔ = 260;
    this.ᐃⲆⵠᐃΔΔᐃ = 100;
    this.ᐃⵠΔⵠⲆᐃᐃ = 100;
    this.w = this.ⲆᐃⲆⵠᐃ * this.ᐃⲆⵠᐃΔΔᐃ;
    this.ᐃΔΔ = this.ⲆⵠΔΔΔ * this.ᐃⵠΔⵠⲆᐃᐃ;
    this.ⲆⲆᐃⲆⲆ = new Xk.ⲆᐃᐃΔⵠΔᐃ();
    this.ΔᐃⵠⲆⵠ = [];
    this.ᐃⲆᐃΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(fh, 0, 1, 0, 1, 1);
    this.transition = false;
    this.ᐃᐃⲆⲆᐃ = [];
    this.ⵠⵠⲆᐃⲆ = 0;
    this.ⲆⲆⵠᐃⲆⵠΔ = 1;
    this.ⵠᐃⵠΔΔΔΔ = 2;
    this.ᐃᐃⵠᐃΔᐃⲆ = 3;
    this.ΔⲆᐃᐃᐃ = 4;
    this.ΔⲆⵠⵠⲆⲆⲆ = 10;
    this.ᐃᐃⲆⲆᐃ[this.ⵠⵠⲆᐃⲆ] = {
      ⲆⵠⲆⵠᐃⵠⲆ: 1,
      ⲆⲆⵠ: [19, 58, 43],
      ⵠⲆⵠ: [4, 43, 48],
      ⲆⲆΔᐃΔ: ["#133a2b", "#042b30"]
    };
    this.ᐃᐃⲆⲆᐃ[this.ΔⲆᐃᐃᐃ] = {
      ⲆⵠⲆⵠᐃⵠⲆ: 0,
      ⲆⲆⵠ: [11, 106, 132],
      ⵠⲆⵠ: [9, 55, 63],
      ⲆⲆΔᐃΔ: ["#0B6A84", "#09373F"]
    };
    this.ᐃᐃⲆⲆᐃ[this.ⲆⲆⵠᐃⲆⵠΔ] = {
      ⲆⵠⲆⵠᐃⵠⲆ: 0,
      ⲆⲆⵠ: [235, 242, 240],
      ⵠⲆⵠ: [19, 97, 103],
      ⲆⲆΔᐃΔ: ["#EBF2F0", "#136167"]
    };
    this.ᐃᐃⲆⲆᐃ[this.ⵠᐃⵠΔΔΔΔ] = {
      ⲆⲆⵠ: [45, 32, 23],
      ⵠⲆⵠ: [3, 28, 30],
      ⲆⵠⲆⵠᐃⵠⲆ: 0,
      ⲆⲆΔᐃΔ: ["#2D2017", "#031C1E"]
    };
    this.ᐃᐃⲆⲆᐃ[this.ᐃᐃⵠᐃΔᐃⲆ] = {
      ⲆⲆΔᐃΔ: ["#4A4A4A", "#183D3C"],
      ⲆⵠⲆⵠᐃⵠⲆ: 0,
      ⵠⲆⵠ: [24, 61, 60],
      ⲆⲆⵠ: [74, 74, 74]
    };
    this.ᐃᐃⲆⲆᐃ[this.ΔⲆⵠⵠⲆⲆⲆ] = {
      ⲆⲆⵠ: [235, 216, 166],
      ⲆⵠⲆⵠᐃⵠⲆ: 0,
      ⲆⲆΔᐃΔ: ["#EBD8A6", "#093D38"],
      ⵠⲆⵠ: [9, 61, 56]
    };
    this.ⲆΔⵠⵠⵠⲆⲆ = function (b, c, d, f, g, h) {
      this.x1 = c * 100;
      this.y1 = d * 100;
      this.w = f * 100;
      this.ᐃΔΔ = g * 100;
      this.x2 = (c + f) * 100;
      this.y2 = (d + g) * 100;
      this.ⵠΔΔ = b;
      this.ⵠⵠⲆ = h === undefined ? 15 : h;
    };
    this.ⲆⵠⵠⲆΔ = -1000000;
    this.ⵠⲆⲆⵠⲆ = this.ⲆⵠⵠⲆΔ;
    this.ΔⲆⲆⵠⵠ = this.ⲆⵠⵠⲆΔ;
    this.ΔⵠⲆΔΔ = this.ⲆⵠⵠⲆΔ;
    this.ᐃΔⲆⲆⲆΔᐃ = this.ⲆⵠⵠⲆΔ;
    this.ⵠⲆⵠⲆΔⲆⵠ = this.ⲆⵠⵠⲆΔ;
    this.ⵠᐃⵠⲆᐃ = this.ⲆⵠⵠⲆΔ;
    this.ΔΔΔΔⲆᐃⲆᐃᐃ = function (b) {
      var c = b.r.x;
      var d = b.r.y;
      var f = Math.floor(d / 100);
      var g = Math.floor(c / 100);
      b.ⵠⲆⲆⵠⲆ = Cx.ⲆⵠⵠⲆΔ;
      b.ΔⲆⲆⵠⵠ = Cx.ⲆⵠⵠⲆΔ;
      b.ΔⵠⲆΔΔ = Cx.ⲆⵠⵠⲆΔ;
      b.ᐃΔⲆⲆⲆΔᐃ = Cx.ⲆⵠⵠⲆΔ;
      b.ⵠᐃⵠⲆᐃ = Cx.ⲆⵠⵠⲆΔ;
      b.ᐃⵠΔᐃⲆᐃΔ = Cx.ⲆⵠⵠⲆΔ;
      for (var h = 0; Cx.ΔⲆᐃᐃᐃ !== Cx.ΔᐃⵠⲆⵠ[h].ⵠΔΔ; h++) {
        if (Cx.ΔᐃⵠⲆⵠ[h].ⵠΔΔ === Cx.ⵠⵠⲆᐃⲆ) {
          var i = Cx.ΔⲆⵠⵠⵠ(h, c, d);
          b.ᐃΔⲆⲆⲆΔᐃ = Math.max(b.ᐃΔⲆⲆⲆΔᐃ, i);
          if (i > 0 && Cx.ΔⵠΔᐃⵠᐃⵠᐃⲆ(h, c, d) === 1) {
            b.ᐃⵠΔᐃⲆᐃΔ = 1;
          }
        } else if (Cx.ⲆⲆⵠᐃⲆⵠΔ === Cx.ΔᐃⵠⲆⵠ[h].ⵠΔΔ) {
          b.ⵠⲆⲆⵠⲆ = Math.max(b.ⵠⲆⲆⵠⲆ, Cx.ΔⲆⵠⵠⵠ(h, c, d));
        } else if (Cx.ΔⲆⵠⵠⲆⲆⲆ === Cx.ΔᐃⵠⲆⵠ[h].ⵠΔΔ) {
          b.ΔⲆⲆⵠⵠ = Math.max(b.ΔⲆⲆⵠⵠ, Cx.ΔⲆⵠⵠⵠ(h, c, d));
        } else if (Cx.ⵠᐃⵠΔΔΔΔ === Cx.ΔᐃⵠⲆⵠ[h].ⵠΔΔ) {
          b.ΔⵠⲆΔΔ = Math.max(b.ΔⵠⲆΔΔ, Cx.ΔⲆⵠⵠⵠ(h, c, d));
        } else if (Cx.ᐃᐃⵠᐃΔᐃⲆ === Cx.ΔᐃⵠⲆⵠ[h].ⵠΔΔ) {
          b.ⵠᐃⵠⲆᐃ = Math.max(b.ⵠᐃⵠⲆᐃ, Cx.ΔⲆⵠⵠⵠ(h, c, d));
        }
      }
      if (Ax.ⲆⵠⲆᐃ[f][g].iblk) {
        b.ᐃⵠΔᐃⲆᐃΔ = 1;
      }
      if (Cx.ᐃᐃⲆⲆᐃⲆⲆⲆⲆ(g, f)) {
        b.ⵠⲆⵠⲆΔⲆⵠ = b.ⲆⵠⵠⲆΔ;
      } else if (Ax.ⲆⵠⲆᐃ[f][g].wtb || b.ⵠⲆⲆⵠⲆ < 0 && b.ΔⵠⲆΔΔ < 0 && b.ᐃΔⲆⲆⲆΔᐃ < 0 && b.ᐃⵠΔᐃⲆᐃΔ < 0 && b.ⵠᐃⵠⲆᐃ < 0 && b.ΔⲆⲆⵠⵠ < 0) {
        b.ⵠⲆⵠⲆΔⲆⵠ = 1;
      } else {
        b.ⵠⲆⵠⲆΔⲆⵠ = b.ⲆⵠⵠⲆΔ;
      }
    };
    this.ΔⲆⲆᐃᐃᐃᐃΔΔ = function (a, b) {
      Cx.ⵠⲆⲆⵠⲆ = Cx.ⲆⵠⵠⲆΔ;
      Cx.ΔⲆⲆⵠⵠ = Cx.ⲆⵠⵠⲆΔ;
      Cx.ΔⵠⲆΔΔ = Cx.ⲆⵠⵠⲆΔ;
      Cx.ⵠᐃⵠⲆᐃ = Cx.ⲆⵠⵠⲆΔ;
      Cx.ᐃΔⲆⲆⲆΔᐃ = Cx.ⲆⵠⵠⲆΔ;
      for (var c = 0; Cx.ΔⲆᐃᐃᐃ !== Cx.ΔᐃⵠⲆⵠ[c].ⵠΔΔ; c++) {
        if (Cx.ΔᐃⵠⲆⵠ[c].ⵠΔΔ === Cx.ⵠⵠⲆᐃⲆ) {
          Cx.ᐃΔⲆⲆⲆΔᐃ = Math.max(Cx.ᐃΔⲆⲆⲆΔᐃ, Cx.ΔⲆⵠⵠⵠ(c, a, b));
        } else if (Cx.ⲆⲆⵠᐃⲆⵠΔ === Cx.ΔᐃⵠⲆⵠ[c].ⵠΔΔ) {
          Cx.ⵠⲆⲆⵠⲆ = Math.max(Cx.ⵠⲆⲆⵠⲆ, Cx.ΔⲆⵠⵠⵠ(c, a, b));
        } else if (Cx.ΔⲆⵠⵠⲆⲆⲆ === Cx.ΔᐃⵠⲆⵠ[c].ⵠΔΔ) {
          Cx.ΔⲆⲆⵠⵠ = Math.max(Cx.ΔⲆⲆⵠⵠ, Cx.ΔⲆⵠⵠⵠ(c, a, b));
        } else if (Cx.ⵠᐃⵠΔΔΔΔ === Cx.ΔᐃⵠⲆⵠ[c].ⵠΔΔ) {
          Cx.ΔⵠⲆΔΔ = Math.max(Cx.ΔⵠⲆΔΔ, Cx.ΔⲆⵠⵠⵠ(c, a, b));
        } else if (Cx.ΔᐃⵠⲆⵠ[c].ⵠΔΔ === Cx.ᐃᐃⵠᐃΔᐃⲆ) {
          Cx.ⵠᐃⵠⲆᐃ = Math.max(Cx.ⵠᐃⵠⲆᐃ, Cx.ΔⲆⵠⵠⵠ(c, a, b));
        }
      }
      if (Cx.ⵠⲆⲆⵠⲆ < 0 && Cx.ⵠᐃⵠⲆᐃ < 0 && Cx.ᐃΔⲆⲆⲆΔᐃ < 0 && Cx.ⵠᐃⵠⲆᐃ < 0 && Cx.ΔⲆⲆⵠⵠ < 0) {
        Cx.ⵠⲆⵠⲆΔⲆⵠ = 1;
      } else {
        Cx.ⵠⲆⵠⲆΔⲆⵠ = Cx.ⲆⵠⵠⲆΔ;
      }
    };
    this.ΔⵠΔᐃⵠᐃⵠᐃⲆ = function (b, c, d) {
      var f = Cx.ΔᐃⵠⲆⵠ[b];
      var g = 0;
      ΔᐃⲆⵠ = f.x1 + 30 + ((f.ⵠⵠⲆ & 4) === 0 ? 150 : 0);
      var h = c - ΔᐃⲆⵠ;
      if ((f.ⵠⵠⲆ & 4) > 0 && h > 0 && h < 320) {
        g = 1;
      }
      ⵠΔⲆⵠ = f.y1 + 250 + (f.ⵠⵠⲆ & 1 ? 0 : 150);
      h = d - ⵠΔⲆⵠ;
      if ((f.ⵠⵠⲆ & 1) > 0 && h > 0 && h < 320) {
        g = 1;
      }
      ⲆⵠⲆⵠ = f.x2 + 80 + ((f.ⵠⵠⲆ & 8) === 0 ? -200 : 0);
      h = ⲆⵠⲆⵠ - c;
      if ((f.ⵠⵠⲆ & 8) > 0 && h > 0 && h < 320) {
        g = 1;
      }
      ⲆΔᐃⵠ = f.y2 - 200 + ((f.ⵠⵠⲆ & 2) === 0 ? -200 : 0);
      h = ⲆΔᐃⵠ - d;
      if ((f.ⵠⵠⲆ & 2) > 0 && h > 0 && h < 320) {
        g = 1;
      }
      if (ΔᐃⲆⵠ <= c && ⲆⵠⲆⵠ >= c && ⵠΔⲆⵠ <= d && d <= ⲆΔᐃⵠ) {
        return g;
      } else {
        return 0;
      }
    };
    this.ΔⲆⵠⵠⵠ = function (a, b, c) {
      var d = Cx.ΔᐃⵠⲆⵠ[a];
      ΔᐃⲆⵠ = d.x1 + 30;
      ⵠΔⲆⵠ = d.y1 + 250;
      ⲆⵠⲆⵠ = d.x2 + 80;
      ⲆΔᐃⵠ = d.y2 - 200;
      if (ΔᐃⲆⵠ <= b && ⲆⵠⲆⵠ >= b && c >= ⵠΔⲆⵠ && c <= ⲆΔᐃⵠ) {
        return Math.min(b - ΔᐃⲆⵠ, ⲆⵠⲆⵠ - b, c - ⵠΔⲆⵠ, ⲆΔᐃⵠ - c);
      }
      var f = -1000000;
      if (b - ΔᐃⲆⵠ < 0) {
        f = Math.max(f, b - ΔᐃⲆⵠ);
      } else if (ⲆⵠⲆⵠ - b < 0) {
        f = Math.max(f, ⲆⵠⲆⵠ - b);
      }
      ΔⵠᐃⲆᐃⵠⲆ = -1000000;
      if (ⵠΔⲆⵠ > c || c > ⲆΔᐃⵠ) {
        if (c - ⵠΔⲆⵠ < 0) {
          ΔⵠᐃⲆᐃⵠⲆ = Math.max(ΔⵠᐃⲆᐃⵠⲆ, c - ⵠΔⲆⵠ);
        } else {
          ΔⵠᐃⲆᐃⵠⲆ = Math.max(ΔⵠᐃⲆᐃⵠⲆ, ⲆΔᐃⵠ - c);
        }
        f = f !== -1000000 && ΔⵠᐃⲆᐃⵠⲆ !== -1000000 ? Math.min(f, ΔⵠᐃⲆᐃⵠⲆ) : ΔⵠᐃⲆᐃⵠⲆ;
      }
      return f;
    };
    this.ΔⲆⲆΔΔΔⲆ = function (b, c, d) {
      var f = d;
      var g = c;
      y(f, g, "isl", b, 1);
      for (var h = 0; h < 4; h++) {
        for (var i = 0; i < 3; i++) {
          y(f - i, g - h, "iblk", 0);
          y(f + i, g - h, "iblk", 0);
          y(f + i, g + h, "iblk", 0);
          y(f - i, g + h, "iblk", 0);
        }
      }
      if (b === 0) {
        for (h = 0; h < 2; h++) {
          y(f - h, g - 4, "iblk", 0);
          y(f + h, g - 4, "iblk", 0);
          y(f - h, g + 4, "iblk", 0);
          y(f + h, g + 4, "iblk", 0);
        }
        for (h = 0; h < 3; h++) {
          y(f - 3, g + h, "iblk", 0);
          y(f + 3, g + h, "iblk", 0);
          y(f - 3, g - h, "iblk", 0);
          y(f + 3, g - h, "iblk", 0);
        }
        y(f - 2, g - 4, "iblk", 0);
        y(f - 3, g - 3, "iblk", 0);
        y(f + 2, g + 4, "iblk", 0);
        y(f + 3, g + 3, "iblk", 0);
      } else if (b === 1) {
        for (h = 0; h < 3; h++) {
          y(f - h, g - 4, "iblk", 0);
          y(f + h, g - 4, "iblk", 0);
          y(f - h, g + 4, "iblk", 0);
          y(f + h, g + 4, "iblk", 0);
        }
        for (h = 0; h < 4; h++) {
          y(f - 3, g + h, "iblk", 0);
          y(f + 3, g + h, "iblk", 0);
          y(f - 3, g - h, "iblk", 0);
          y(f + 3, g - h, "iblk", 0);
        }
      } else if (b === 2) {
        for (h = 0; h < 2; h++) {
          y(f - h, g - 4, "iblk", 0);
          y(f + h, g - 4, "iblk", 0);
          y(f - h, g + 4, "iblk", 0);
          y(f + h, g + 4, "iblk", 0);
        }
        for (h = 0; h < 3; h++) {
          y(f - 3, g + h, "iblk", 0);
          y(f + 3, g + h, "iblk", 0);
          y(f - 3, g - h, "iblk", 0);
          y(f + 3, g - h, "iblk", 0);
        }
      }
    };
    this.ⵠΔᐃΔΔᐃΔⲆᐃ = function (b) {
      for (var c = 0; c < Cx.ΔᐃⵠⲆⵠ.length && b > 0; c++) {
        var d = Cx.ΔᐃⵠⲆⵠ[c];
        if (Cx.ΔⲆᐃᐃᐃ === d.ⵠΔΔ && d.w > 1800 && d.ᐃΔΔ > 1000) {
          var f = Math.floor((d.x1 + d.w / 2) / 100);
          var g = Math.floor((d.y1 + d.ᐃΔΔ / 2) / 100);
          Cx.ΔⲆⲆΔΔΔⲆ(b % 3, f, g);
          for (var h = 0; h < 3; h++) {
            var j = g - 2 + Math.floor(Cx.ⲆⲆᐃⲆⲆ.get() * 4);
            var k = f - 3 + Math.floor(Cx.ⲆⲆᐃⲆⲆ.get() * 6);
            if (ur === Ax.ⲆⵠⲆᐃ[j][k].s) {
              y(j, k, "plm", h);
            }
            j = g - 2 + Math.floor(Cx.ⲆⲆᐃⲆⲆ.get() * 4);
            k = f - 3 + Math.floor(Cx.ⲆⲆᐃⲆⲆ.get() * 6);
            if (Ax.ⲆⵠⲆᐃ[j][k].plm === undefined) {
              y(j, k, "s", h);
            }
          }
          j = g - 2 + Math.floor(Cx.ⲆⲆᐃⲆⲆ.get() * 4);
          k = f - 3 + Math.floor(Cx.ⲆⲆᐃⲆⲆ.get() * 6);
          if (ah === Ax.ⲆⵠⲆᐃ[j][k].plm && Ax.ⲆⵠⲆᐃ[j][k].s === undefined) {
            y(j, k, "p", 0, 1);
          }
          b--;
        }
      }
    };
    this.ⲆΔᐃⵠᐃΔⵠⵠⵠ = function (d) {
      Cx.ⲆⲆᐃⲆⲆ.ᐃⲆᐃⵠⵠ(d);
      var h = 0;
      while (true) {
        if (++h > 10000) {
          return;
        }
        Cx.ΔᐃⵠⲆⵠ = [];
        if (Cx.ᐃᐃᐃⲆᐃ === 0 && (Cx.mode === 3 || Cx.mode === 7 || Cx.mode === 0)) {
          Cx.ᐃᐃᐃⲆᐃ = ls;
        }
        if (Cx.mode === 2) {
          Cx.ΔᐃⵠⲆⵠ.push(new Cx.ⲆΔⵠⵠⵠⲆⲆ(Cx.ⵠⵠⲆᐃⲆ, 2, 2, 80, 80, 15));
        } else if (Cx.mode === 4) {
          Cx.ΔᐃⵠⲆⵠ.push(new Cx.ⲆΔⵠⵠⵠⲆⲆ(Cx.ⵠⵠⲆᐃⲆ, 2, 2, 150, 150, 15));
        } else if (Cx.ᐃᐃᐃⲆᐃ !== 0 && Cx.ᐃᐃᐃⲆᐃ.length > 0 && Cx.ᐃᐃᐃⲆᐃ[0].length > 3) {
          for (var k = 0; k < Cx.ᐃᐃᐃⲆᐃ.length; k++) {
            if ((G = Cx.ᐃᐃᐃⲆᐃ[k])[0] !== 0) {
              break;
            }
            var m = Df.ⵠⵠⲆᐃⲆ;
            switch (G[1]) {
              case "FOREST":
                m = Cx.ⵠⵠⲆᐃⲆ;
                break;
              case "WINTER":
                m = Cx.ⲆⲆⵠᐃⲆⵠΔ;
                break;
              case "DESERT":
                m = Cx.ΔⲆⵠⵠⲆⲆⲆ;
                break;
              case "LAVA":
                m = Cx.ⵠᐃⵠΔΔΔΔ;
                break;
              case "DRAGON":
                m = Cx.ᐃᐃⵠᐃΔᐃⲆ;
            }
            Cx.ΔᐃⵠⲆⵠ.push(new Cx.ⲆΔⵠⵠⵠⲆⲆ(m, G[2], G[3], G[4], G[5], G[6], G[7]));
          }
        } else if (Cx.ᐃᐃᐃⲆᐃ !== 0) {
          for (k = 0; Cx.ᐃᐃᐃⲆᐃ.length > k; k++) {
            var q = Cx.ᐃᐃᐃⲆᐃ[k];
            m = Df.ⵠⵠⲆᐃⲆ;
            switch (q[0]) {
              case "FOREST":
                m = Cx.ⵠⵠⲆᐃⲆ;
                break;
              case "WINTER":
                m = Cx.ⲆⲆⵠᐃⲆⵠΔ;
                break;
              case "DESERT":
                m = Cx.ΔⲆⵠⵠⲆⲆⲆ;
                break;
              case "LAVA":
                m = Cx.ⵠᐃⵠΔΔΔΔ;
                break;
              case "DRAGON":
                m = Cx.ᐃᐃⵠᐃΔᐃⲆ;
            }
            if (j(m, q[1], q[2], 0, (k + 1) * 10) === 0) {
              break;
            }
          }
          if (k !== Cx.ᐃᐃᐃⲆᐃ.length) {
            continue;
          }
        }
        break;
      }
      ⲆⲆΔⵠⵠⲆΔⵠᐃ();
      var u = [];
      for (var x = 0; Cx.ⲆⵠΔΔΔ > x; x++) {
        u[x] = new Array(Cx.ⲆᐃⲆⵠᐃ);
        for (var z = 0; z < Cx.ⲆᐃⲆⵠᐃ; z++) {
          u[x][z] = 0;
        }
      }
      for (x = 0; Cx.ΔᐃⵠⲆⵠ.length > x; x++) {
        for (var A = (q = Cx.ΔᐃⵠⲆⵠ[x]).x2 / 100, B = q.y2 / 100, D = q.x1 / 100; D <= A; D++) {
          for (var E = q.y1 / 100; B >= E; E++) {
            u[E][D] = 1;
          }
        }
      }
      for (E = 0; E < Cx.ⲆⵠΔΔΔ; E++) {
        for (D = 0; Cx.ⲆᐃⲆⵠᐃ > D; D++) {
          if (u[E][D] === 0) {
            i(u, D, E);
          }
        }
      }
      Ax = {
        w: Cx.ⲆᐃⲆⵠᐃ,
        ᐃΔΔ: Cx.ⲆⵠΔΔΔ,
        ⲆⵠⲆᐃ: []
      };
      for (x = 0; x < Cx.ⲆⵠΔΔΔ; x++) {
        Ax.ⲆⵠⲆᐃ[x] = [];
      }
      if (Cx.ᐃᐃᐃⲆᐃ !== 0 && Cx.ᐃᐃᐃⲆᐃ.length > 0 && Cx.ᐃᐃᐃⲆᐃ[0].length > 3) {
        for (k = 0; Cx.ᐃᐃᐃⲆᐃ.length > k; k++) {
          if ((G = Cx.ᐃᐃᐃⲆᐃ[k])[1] === "isl") {
            Cx.ΔⲆⲆΔΔΔⲆ(G[2], G[3], G[4]);
          }
        }
      } else {
        Cx.ⵠΔᐃΔΔᐃΔⲆᐃ(Cx.ᐃᐃⲆⲆⵠⵠⲆ);
      }
      if (Cx.ᐃᐃᐃⲆᐃ !== 0 && Cx.ᐃᐃᐃⲆᐃ.length > 0 && Cx.ᐃᐃᐃⲆᐃ[0].length > 3) {
        var F = [];
        for (k = 0; Cx.ᐃᐃᐃⲆᐃ.length > k; k++) {
          var G = Cx.ᐃᐃᐃⲆᐃ[k];
          if (G[0] === 1) {
            if (G[1] === "r") {
              y(G[3], G[2], "wtb", 0, 1);
              F.push([G[3], G[2], G[4]]);
            } else {
              y(G[4], G[3], G[1], G[2], G[5]);
            }
          }
        }
        a(0, F);
        F = [];
      } else {
        for (x = 0; x < Cx.ΔᐃⵠⲆⵠ.length; x++) {
          q = Cx.ΔᐃⵠⲆⵠ[x];
          if (Cx.mode === 4) {
            if (q.ⵠΔΔ === Cx.ⵠⵠⲆᐃⲆ) {
              c(x, q.w / 10000);
            }
          } else {
            if (Cx.ⵠⵠⲆᐃⲆ === q.ⵠΔΔ) {
              b(x, q.w / 10000);
            }
            if (q.ⵠΔΔ === Cx.ⵠᐃⵠΔΔΔΔ) {
              g(x, q.w / 10000);
            }
            if (q.ⵠΔΔ === Cx.ⲆⲆⵠᐃⲆⵠΔ) {
              t(x, q.w / 10000);
            }
            if (Cx.ΔⲆⵠⵠⲆⲆⲆ === q.ⵠΔΔ) {
              r(x, q.w / 10000);
            }
            if (Cx.ᐃᐃⵠᐃΔᐃⲆ === q.ⵠΔΔ) {
              l(x);
            }
          }
        }
      }
      cd("isl", 1);
      cd("wtb", 20);
      cd("la", 1);
      cd("c", 1);
      cd("s", 1);
      cd("f", 1);
      cd("p", 1);
      cd("g", 1);
      cd("d", 1);
      cd("a", 1);
      cd("re", 1);
      cd("m", 1);
      dd = [];
      Cx.ⲆᐃᐃⵠⵠΔⵠⵠᐃ(Ax);
    };
    this.ᐃⵠᐃⲆ = y;
    this.ⲆᐃᐃⵠⵠΔⵠⵠᐃ = function (b) {
      for (var c = 0; this.ⲆⵠΔΔΔ > c; c++) {
        for (var d = 0; d < this.ⲆᐃⲆⵠᐃ; d++) {
          if (!b.ⲆⵠⲆᐃ[c]) {
            b.ⲆⵠⲆᐃ[c] = [];
          }
          if (b.ⲆⵠⲆᐃ[c][d]) {
            var f = b.ⲆⵠⲆᐃ[c][d];
            if (f.de && f.de.length > 0) {
              for (var g = 0; g < f.de.length; g++) {
                if (f.de[g] && f.de[g].length > 0) {
                  f.de = f.de[g][0];
                  if (g >= 41 && g <= 49) {
                    f.de.scale = 3;
                    var h = Math.floor(Math.random() * 3 + 1);
                    f.de.ⲆⵠⲆ = [];
                    for (var j = 0; j < h; j++) {
                      f.de.ⲆⵠⲆ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.PI * Math.random() * 2,
                        ΔⲆΔⵠ: 41 + Math.floor(Math.random() * 9)
                      });
                    }
                  } else if (g >= 19 && g <= 26) {
                    f.de.scale = 3;
                    h = Math.floor(Math.random() * 3 + 1);
                    f.de.ⲆⵠⲆ = [];
                    for (j = 0; j < h; j++) {
                      f.de.ⲆⵠⲆ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.random() * Math.PI * 2,
                        ΔⲆΔⵠ: 19 + Math.floor(Math.random() * 8)
                      });
                    }
                  } else if (g <= 15 || g >= 27 && g <= 40) {
                    f.de.angle = 0;
                    f.de.scale = 2;
                    f.de.ΔⲆΔⵠ = g;
                  } else {
                    f.de.angle = Math.random() * Math.PI * 2;
                    f.de.scale = 1;
                    f.de.ΔⲆΔⵠ = g;
                  }
                }
              }
            }
            p(f, "p", new ΔⵠΔᐃ.ⵠΔΔΔ(Ml, 1, 1, 0, 10, 10));
            p(f, "t", new ΔⵠΔᐃ.ⵠΔΔΔ(false, 1, 1, 0, 10, 10));
            p(f, "s", new ΔⵠΔᐃ.ⵠΔΔΔ(Wj, 1, 1, 0, 10, 10));
            p(f, "g", new ΔⵠΔᐃ.ⵠΔΔΔ(false, 1, 1, 0, 10, 10));
            p(f, "d", new ΔⵠΔᐃ.ⵠΔΔΔ(fh, 1, 1, 0, 10, 10));
            p(f, "b", new ΔⵠΔᐃ.ⵠΔΔΔ(false, 1, 1, 0, 10, 10));
            p(f, "f", new ΔⵠΔᐃ.ⵠΔΔΔ(Ml, 1, 1, 0, 10, 10));
            p(f, "sw", new ΔⵠΔᐃ.ⵠΔΔΔ(ba, 1, 1, 0, 10, 10));
            p(f, "gw", new ΔⵠΔᐃ.ⵠΔΔΔ(false, 1, 1, 0, 10, 10));
            p(f, "dw", new ΔⵠΔᐃ.ⵠΔΔΔ(al, 1, 1, 0, 10, 10));
            p(f, "a", new ΔⵠΔᐃ.ⵠΔΔΔ(Po, 1, 1, 0, 10, 10));
            p(f, "cs", new ΔⵠΔᐃ.ⵠΔΔΔ(ns, 1, 1, 0, 10, 10));
            p(f, "plm", new ΔⵠΔᐃ.ⵠΔΔΔ(false, 1, 1, 0, 10, 10));
            p(f, "re", new ΔⵠΔᐃ.ⵠΔΔΔ(Wj, 1, 1, 0, 10, 10));
            p(f, "c", new ΔⵠΔᐃ.ⵠΔΔΔ(false, 1, 1, 0, 10, 10));
            p(f, "m", new ΔⵠΔᐃ.ⵠΔΔΔ(false, 1, 1, 0, 10, 10));
          } else {
            b.ⲆⵠⲆᐃ[c][d] = [];
          }
        }
      }
    };
    this.time = 0;
    this.ⲆⲆᐃⵠⲆ = {
      ⵠᐃⲆᐃⵠ: 0,
      ᐃⲆᐃⵠⵠ: 0,
      translate: {
        x: 0,
        y: 0
      },
      now: 0
    };
    this.ᐃⵠⵠⲆᐃⵠⵠᐃⲆ = function () {
      this.ᐃⵠΔΔᐃ = [];
      this.ⲆΔⵠ[0] = [];
      this.ⲆΔⵠ[2] = [];
      this.ⲆΔⵠ[1] = [];
      this.ⲆΔⵠ[6] = [];
      this.ⲆΔⵠ[3] = [];
      this.ⲆΔⵠ[5] = [];
      this.ⲆΔⵠ[12] = [];
      this.ⲆΔⵠ[13] = [];
      this.ⲆΔⵠ[14] = [];
      this.ⲆΔⵠ[20] = [];
      this.ⲆΔⵠ[52] = [];
      this.ⲆΔⵠ[30] = [];
      this.ⲆΔⵠ[56] = [];
      this.ⲆΔⵠ[38] = [];
      this.ⲆΔⵠ[33] = [];
      this.ⲆΔⵠ[31] = [];
      this.ⲆΔⵠ[55] = [];
      this.ⲆΔⵠ[37] = [];
      this.ⲆΔⵠ[43] = [];
      this.ⲆΔⵠ[44] = [];
      this.ⲆΔⵠ[54] = [];
      this.ⲆΔⵠ[39] = [];
      this.ⲆΔⵠ[40] = [];
      this.ⲆΔⵠ[32] = [];
      this.ⲆΔⵠ[24] = [];
      this.ⲆΔⵠ[25] = [];
      this.ⲆΔⵠ[26] = [];
      this.ⲆΔⵠ[27] = [];
      this.ⲆΔⵠ[28] = [];
      this.ⲆΔⵠ[35] = [];
      this.ⲆΔⵠ[4] = [];
      this.ⲆΔⵠ[7] = [];
      this.ⲆΔⵠ[8] = [];
      this.ⲆΔⵠ[9] = [];
      this.ⲆΔⵠ[19] = [];
      this.ⲆΔⵠ[50] = [];
      this.ⲆΔⵠ[41] = [];
      this.ⲆΔⵠ[10] = [];
      this.ⲆΔⵠ[15] = [];
      this.ⲆΔⵠ[16] = [];
      this.ⲆΔⵠ[17] = [];
      this.ⲆΔⵠ[21] = [];
      this.ⲆΔⵠ[51] = [];
      this.ⲆΔⵠ[45] = [];
      this.ⲆΔⵠ[46] = [];
      this.ⲆΔⵠ[47] = [];
      this.ⲆΔⵠ[48] = [];
      this.ⲆΔⵠ[49] = [];
      this.ⲆΔⵠ[53] = [];
      this.ⲆΔⵠ[18] = [];
      this.ⲆΔⵠ[29] = [];
      this.ⲆΔⵠ[56] = [];
      this.ⲆΔⵠ[11] = [];
      this.ⲆΔⵠ[22] = [];
      this.ⲆΔⵠ[23] = [];
      this.ⲆΔⵠ[100] = [];
      this.ⲆΔⵠ[80] = [];
      this.ⲆΔⵠ[60] = [];
      this.ⲆΔⵠ[67] = [];
      this.ⲆΔⵠ[70] = [];
      this.ⲆΔⵠ[77] = [];
      this.ⲆΔⵠ[71] = [];
      this.ⲆΔⵠ[72] = [];
      this.ⲆΔⵠ[73] = [];
      this.ⲆΔⵠ[74] = [];
      this.ⲆΔⵠ[65] = [];
      this.ⲆΔⵠ[66] = [];
      this.ⲆΔⵠ[62] = [];
      this.ⲆΔⵠ[88] = [];
      this.ⲆΔⵠ[91] = [];
      this.ⲆΔⵠ[90] = [];
      this.ⲆΔⵠ[63] = [];
      this.ⲆΔⵠ[78] = [];
      this.ⲆΔⵠ[75] = [];
      this.ⲆΔⵠ[76] = [];
      this.ⲆΔⵠ[64] = [];
      this.ⲆΔⵠ[69] = [];
      this.ⲆΔⵠ[68] = [];
      this.ⲆΔⵠ[79] = [];
      this.ⲆΔⵠ[89] = [];
      this.ⲆΔⵠ[83] = [];
      this.ⲆΔⵠ[84] = [];
      this.ⲆΔⵠ[85] = [];
      this.ⲆΔⵠ[81] = [];
      this.ⲆΔⵠ[82] = [];
      this.ⲆΔⵠ[86] = [];
      this.ⲆΔⵠ[34] = [];
      this.ⲆΔⵠ[36] = [];
      this.ⲆΔⵠ[61] = [];
      this.ⲆΔⵠ[87] = [];
      this.ⲆΔⵠ[42] = [];
    };
    this.ᐃᐃⵠⵠⲆᐃΔⲆΔ = function (a) {
      if (this.ᐃⵠΔΔᐃ[a]) {
        ᐃᐃΔⲆ = this.ᐃⵠΔΔᐃ[a].type;
        this.ᐃⵠΔΔᐃ[a] = null;
        for (var b = this.ⲆΔⵠ[ᐃᐃΔⲆ], c = 0; c < b.length; c++) {
          if (a == b[c].ᐃΔᐃΔ) {
            b.splice(c, 1);
            return;
          }
        }
      }
    };
    this.ᐃⲆΔΔⲆⵠΔΔᐃ = function (a, b) {
      for (var c = 0; c < this.ⲆΔⵠ[56].length; c++) {
        var d = this.ⲆΔⵠ[56][c];
        if (b === Math.floor(d.x / 100) && a === Math.floor(d.y / 100)) {
          return 1;
        }
      }
      return 0;
    };
    this.ᐃᐃⲆⲆᐃⲆⲆⲆⲆ = function (a, b) {
      for (var c = 0; this.ⲆΔⵠ[30].length > c; c++) {
        var d = this.ⲆΔⵠ[30][c];
        if (a == Math.floor(d.x / 100) && Math.floor(d.y / 100) == b) {
          return Dl;
        }
      }
      return false;
    };
    this.ᐃΔⲆΔⲆ = function (j) {
      for (var q = 0; q < j.length; q++) {
        ᐃⵠⲆᐃ = j[q];
        if (ᐃⵠⲆᐃ.angle != ᐃⵠⲆᐃ.ⵠⵠᐃΔᐃΔⲆ) {
          var B = Math.PI * 2;
          ᐃⵠⲆᐃ.angle = (ᐃⵠⲆᐃ.angle + B) % B;
          ᐃⵠⲆᐃ.ⵠⵠᐃΔᐃΔⲆ = (ᐃⵠⲆᐃ.ⵠⵠᐃΔᐃΔⲆ + B) % B;
          if (ᐃⵠⲆᐃ.ⵠⵠᐃΔᐃΔⲆ != ᐃⵠⲆᐃ.angle) {
            var D = ᐃⵠⲆᐃ.ⵠⵠᐃΔᐃΔⲆ - ᐃⵠⲆᐃ.angle;
            var E = Math.abs(D);
            if (E > Math.PI) {
              E = Math.PI * 2 - E;
            }
            var F = E / Math.PI * 3 * 10 * Jx;
            if (Math.PI < D) {
              ᐃⵠⲆᐃ.angle -= F;
            } else if (-Math.PI > D) {
              ᐃⵠⲆᐃ.angle += F;
            } else if (D < 0) {
              ᐃⵠⲆᐃ.angle -= F;
            } else {
              ᐃⵠⲆᐃ.angle += F;
            }
            ᐃⵠⲆᐃ.angle = (ᐃⵠⲆᐃ.angle + B) % B;
            if (Math.abs(ᐃⵠⲆᐃ.angle - ᐃⵠⲆᐃ.ⵠⵠᐃΔᐃΔⲆ) < F) {
              ᐃⵠⲆᐃ.angle = ᐃⵠⲆᐃ.ⵠⵠᐃΔᐃΔⲆ;
            }
          }
        }
        Math.floor(ᐃⵠⲆᐃ.r.y / 100);
        Math.floor(ᐃⵠⲆᐃ.r.x / 100);
        if (ᐃⵠⲆᐃ.r.x != ᐃⵠⲆᐃ.x || ᐃⵠⲆᐃ.r.y != ᐃⵠⲆᐃ.y) {
          if (ᐃⵠⲆᐃ.action & 64) {
            ᐃⵠⲆᐃ.action -= 64;
          }
          ᐃⵠⲆᐃ.action |= 32;
          var G = ΔⵠΔᐃ.ΔΔᐃΔⲆᐃⲆ(ᐃⵠⲆᐃ, ᐃⵠⲆᐃ.r) + Math.PI;
          var H = Jx * ᐃⵠⲆᐃ.ΔⵠΔⵠΔ;
          var I = ΔⵠΔᐃ.Ⲇⵠⵠᐃᐃᐃⵠ(H, G);
          if (ΔⵠΔᐃ.ᐃⵠᐃⲆⲆⵠᐃ(ΔⵠΔᐃ.ΔⵠⲆΔⲆᐃⵠ(ᐃⵠⲆᐃ, ᐃⵠⲆᐃ.r)) > ΔⵠΔᐃ.ᐃⵠᐃⲆⲆⵠᐃ(I)) {
            ΔⵠΔᐃ.ⵠΔⲆⲆᐃⵠⵠ(ᐃⵠⲆᐃ, I);
          } else {
            if (ᐃⵠⲆᐃ.action & 32) {
              ᐃⵠⲆᐃ.action -= 32;
            }
            ᐃⵠⲆᐃ.action |= 64;
            ΔⵠΔᐃ.ᐃⲆΔᐃᐃΔΔ(ᐃⵠⲆᐃ.r, ᐃⵠⲆᐃ);
          }
        }
        if (ᐃⵠⲆᐃ.ΔⲆⲆᐃΔ) {
          var J = ᐃⵠⲆᐃ.bubbles;
          if ((N = J.length) === 0 || N < 20 && J[N - 1].ⵠⲆΔⲆⵠ < 0.95) {
            J.push({
              id: Math.floor(Math.random() * ⲆⲆ[540][0].length),
              x: Math.floor(ᐃⵠⲆᐃ.x + Math.random() * 80 - 40),
              y: Math.floor(ᐃⵠⲆᐃ.y + Math.random() * 80 - 40),
              ⵠⲆΔⲆⵠ: 1
            });
          }
          for (var K = 0; K < N; K++) {
            J[K].ⵠⲆΔⲆⵠ = Math.max(0, J[K].ⵠⲆΔⲆⵠ - Jx);
          }
          for (K = 0; N > K; K++) {
            if (J[K].ⵠⲆΔⲆⵠ === 0) {
              J.splice(K, 1);
              break;
            }
          }
        }
        var L = 0;
        if (ᐃⵠⲆᐃ.ΔⵠΔⵠ && zx.ΔᐃΔⵠᐃ) {
          var M = ᐃⵠⲆᐃ.ⲆⲆΔᐃⵠ;
          var N = M.length;
          if (ᐃⵠⲆᐃ.ⵠⲆⵠⲆΔⲆⵠ > 0 && ᐃⵠⲆᐃ.ᐃⵠΔⵠⵠ !== 227 && ᐃⵠⲆᐃ.ᐃⵠΔⵠⵠ !== 228 && ᐃⵠⲆᐃ.ᐃⵠΔⵠⵠ !== 230 && ᐃⵠⲆᐃ.ᐃⵠΔⵠⵠ !== 229 && ᐃⵠⲆᐃ.ᐃⵠΔⵠⵠ !== 91 && !ᐃⵠⲆᐃ.ΔⲆⲆᐃΔ && (L = 1, N === 0 || ΔⵠΔᐃ.ΔⵠⲆᐃ(M[N - 1], ᐃⵠⲆᐃ) > 75)) {
            var O = -ᐃⵠⲆᐃ.angle;
            var Q = eq * (Math.cos(O) * 45);
            var R = Math.sin(O) * 45 * eq;
            M.push({
              x: ᐃⵠⲆᐃ.x + Q,
              y: ᐃⵠⲆᐃ.y + R,
              r: 8,
              alpha: 0.8
            });
            M.push({
              x: ᐃⵠⲆᐃ.x - Q,
              y: ᐃⵠⲆᐃ.y - R,
              r: 8,
              alpha: 0.8
            });
            M.push({
              x: ᐃⵠⲆᐃ.x,
              y: ᐃⵠⲆᐃ.y,
              r: 24,
              alpha: 1
            });
          }
          for (K = 0; K < N; K++) {
            M[K].alpha = Math.max(0, M[K].alpha - Jx / 2.2);
            M[K].r += Jx * 20;
          }
          if (M.length > 0 && M[0].alpha === 0) {
            M.splice(0, 1);
          }
          var S = ᐃⵠⲆᐃ.ΔⲆⲆⵠⲆ;
          N = S.length;
          var U = -1;
          var V = Math.max(0, Math.sign(ᐃⵠⲆᐃ.ᐃⵠΔᐃⲆᐃΔ));
          var W = Math.max(0, Math.sign(ᐃⵠⲆᐃ.ⵠⲆⲆⵠⲆ));
          Math.max(0, Math.sign(ᐃⵠⲆᐃ.ΔⲆⲆⵠⵠ));
          var X = Math.max(0, Math.sign(ᐃⵠⲆᐃ.ΔⵠⲆΔΔ));
          var Y = Math.max(0, Math.sign(ᐃⵠⲆᐃ.ⵠᐃⵠⲆᐃ));
          if (ᐃⵠⲆᐃ.ᐃⵠΔᐃⲆᐃΔ > 0 || ᐃⵠⲆᐃ.ΔⲆⲆⵠⵠ > 0) {
            U = 602;
          } else if (ᐃⵠⲆᐃ.ⵠᐃⵠⲆᐃ > 0) {
            U = 680;
          } else if (ᐃⵠⲆᐃ.ⵠⲆⲆⵠⲆ > 0) {
            U = 475;
          } else if (ᐃⵠⲆᐃ.ΔⵠⲆΔΔ > 0) {
            U = 476;
          }
          if (ᐃⵠⲆᐃ.ᐃⵠΔⵠⵠ === 225 && (V | W | X | Y) === 1) {
            U = 228;
            var Z = ᐃⵠⲆᐃ.ΔᐃΔⲆᐃ - Math.PI / 2;
            var _ = 15;
            var aa = 11;
            var ba = 50;
          } else if (ᐃⵠⲆᐃ.ᐃⵠΔⵠⵠ === 239 && (V | W | X | Y) == 1) {
            U = 249;
            Z = ᐃⵠⲆᐃ.ΔᐃΔⲆᐃ - Math.PI / 2;
            _ = 21;
            aa = 16;
            ba = 50;
          } else if (ᐃⵠⲆᐃ.ᐃⵠΔⵠⵠ === 226 && (V | W | X | Y) === 1) {
            U = 234;
            Z = ᐃⵠⲆᐃ.ΔᐃΔⲆᐃ - Math.PI / 2;
            var ca = Math.random() * 50;
            _ = 10 + ca;
            aa = 0 + ca;
            ba = 45;
          } else {
            Z = ᐃⵠⲆᐃ.angle;
            _ = 15;
            aa = 11;
            ba = 50;
          }
          if (ᐃⵠⲆᐃ.ᐃⵠΔⵠⵠ === 227 || ᐃⵠⲆᐃ.ᐃⵠΔⵠⵠ === 228 || ᐃⵠⲆᐃ.ᐃⵠΔⵠⵠ === 91 || ᐃⵠⲆᐃ.ᐃⵠΔⵠⵠ === 229 || ᐃⵠⲆᐃ.ᐃⵠΔⵠⵠ === 230 || ᐃⵠⲆᐃ.ΔⲆⲆᐃΔ) ;else if (ᐃⵠⲆᐃ.ᐃⵠΔⵠⵠ === 224) {
            if (N === 0 || ΔⵠΔᐃ.ΔⵠⲆᐃ(S[N - 1], ᐃⵠⲆᐃ) > 10) {
              S.push({
                x: ᐃⵠⲆᐃ.x,
                y: ᐃⵠⲆᐃ.y,
                angle: ᐃⵠⲆᐃ.ΔᐃΔⲆᐃ,
                alpha: 1,
                id: 226
              });
            }
          } else if (U != -1 && L === 0 && (N === 0 || ba < ΔⵠΔᐃ.ΔⵠⲆᐃ(S[N - 1], ᐃⵠⲆᐃ))) {
            ᐃⵠⲆᐃ.ΔΔΔⲆⵠᐃΔ++;
            if (Math.abs(ᐃⵠⲆᐃ.x - ᐃⵠⲆᐃ.r.x) > 1 && Math.abs(ᐃⵠⲆᐃ.y - ᐃⵠⲆᐃ.r.y) > 1) {
              if (ᐃⵠⲆᐃ.x < ᐃⵠⲆᐃ.r.x && ᐃⵠⲆᐃ.r.y < ᐃⵠⲆᐃ.y || ᐃⵠⲆᐃ.r.x < ᐃⵠⲆᐃ.x && ᐃⵠⲆᐃ.y < ᐃⵠⲆᐃ.r.y) {
                if (ᐃⵠⲆᐃ.ΔΔΔⲆⵠᐃΔ % 2) {
                  Q = eq * -aa;
                  R = -aa * eq;
                } else {
                  R = aa * eq;
                  Q = eq * aa;
                }
              } else if (ᐃⵠⲆᐃ.ΔΔΔⲆⵠᐃΔ % 2) {
                Q = eq * aa;
                R = -aa * eq;
              } else {
                R = aa * eq;
                Q = -aa * eq;
              }
            } else if (ᐃⵠⲆᐃ.ΔΔΔⲆⵠᐃΔ % 2) {
              Q = _ * Math.cos(Z) * eq;
              R = eq * (_ * Math.sin(Z));
            } else {
              Q = -Math.cos(Z) * _ * eq;
              R = eq * (-Math.sin(Z) * _);
            }
            S.push({
              x: ᐃⵠⲆᐃ.x + Q,
              y: ᐃⵠⲆᐃ.y + R,
              angle: Z + Math.PI / 2,
              alpha: 1,
              id: U
            });
          }
          for (K = 0; N > K; K++) {
            if (S[K].id === 226) {
              S[K].alpha = Math.max(0, S[K].alpha - Jx * 1.5);
            } else {
              S[K].alpha = Math.max(0, S[K].alpha - Jx / 2.85);
            }
          }
          if (S.length > 0 && S[0].alpha === 0) {
            S.splice(0, 1);
          }
        }
      }
    };
    this.ᐃⲆⲆ = function () {
      this.ᐃΔⲆΔⲆ(this.ⲆΔⵠ[0]);
      this.ᐃΔⲆΔⲆ(this.ⲆΔⵠ[80]);
      this.ᐃΔⲆΔⲆ(this.ⲆΔⵠ[60]);
      this.ᐃΔⲆΔⲆ(this.ⲆΔⵠ[67]);
      this.ᐃΔⲆΔⲆ(this.ⲆΔⵠ[70]);
      this.ᐃΔⲆΔⲆ(this.ⲆΔⵠ[77]);
      this.ᐃΔⲆΔⲆ(this.ⲆΔⵠ[71]);
      this.ᐃΔⲆΔⲆ(this.ⲆΔⵠ[72]);
      this.ᐃΔⲆΔⲆ(this.ⲆΔⵠ[73]);
      this.ᐃΔⲆΔⲆ(this.ⲆΔⵠ[74]);
      this.ᐃΔⲆΔⲆ(this.ⲆΔⵠ[61]);
      this.ᐃΔⲆΔⲆ(this.ⲆΔⵠ[62]);
      this.ᐃΔⲆΔⲆ(this.ⲆΔⵠ[88]);
      this.ᐃΔⲆΔⲆ(this.ⲆΔⵠ[91]);
      this.ᐃΔⲆΔⲆ(this.ⲆΔⵠ[90]);
      this.ᐃΔⲆΔⲆ(this.ⲆΔⵠ[63]);
      this.ᐃΔⲆΔⲆ(this.ⲆΔⵠ[78]);
      this.ᐃΔⲆΔⲆ(this.ⲆΔⵠ[75]);
      this.ᐃΔⲆΔⲆ(this.ⲆΔⵠ[76]);
      this.ᐃΔⲆΔⲆ(this.ⲆΔⵠ[64]);
      this.ᐃΔⲆΔⲆ(this.ⲆΔⵠ[68]);
      this.ᐃΔⲆΔⲆ(this.ⲆΔⵠ[65]);
      this.ᐃΔⲆΔⲆ(this.ⲆΔⵠ[66]);
      this.ᐃΔⲆΔⲆ(this.ⲆΔⵠ[69]);
    };
    this.ⵠⵠⲆΔ = [];
    this.ⵠⵠⲆΔ[620] = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 1, 1.05, 1, 0.008, 0.008);
    this.ⵠⵠⲆΔ[619] = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 1, 1.08, 1, 0.006, 0.006);
    this.ⵠⵠⲆΔ[694] = new ΔⵠΔᐃ.ⵠΔΔΔ(Fq, 1, 1.02, 1, 0.008, 0.008);
    this.ⵠⵠⲆΔ[695] = new ΔⵠΔᐃ.ⵠΔΔΔ(Wj, 1, 1.08, 1, 0.006, 0.006);
    this.ΔᐃΔᐃⲆ = [];
    this.ΔᐃΔᐃⲆ[0] = new ΔⵠΔᐃ.ⵠΔΔΔ(ba, 0.1, 1, 0, 0.6, 0.6);
    this.ΔᐃΔᐃⲆ[1] = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.4, 1, 0, 0.6, 0.6);
    this.ΔᐃΔᐃⲆ[2] = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.3, 1, 0, 0.6, 0.6);
    this.ΔᐃΔᐃⲆ[3] = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.8, 1, 0, 0.6, 0.6);
    this.ΔᐃΔᐃⲆ[4] = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.3, 1, 0, 0.6, 0.6);
    this.ΔᐃΔᐃⲆ[5] = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.8, 1, 0, 0.6, 0.6);
    this.ΔᐃΔᐃⲆ[6] = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.5, 1, 0, 0.6, 0.6);
    this.ΔᐃΔᐃⲆ[7] = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.9, 1, 0, 0.6, 0.6);
    this.ΔᐃΔᐃⲆ[8] = new ΔⵠΔᐃ.ⵠΔΔΔ(Ee, 0.6, 1, 0, 0.6, 0.6);
    this.ΔᐃΔᐃⲆ[9] = new ΔⵠΔᐃ.ⵠΔΔΔ(x, 0.2, 1, 0, 0.6, 0.6);
    this.ΔᐃΔᐃⲆ[10] = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.6, 1, 0, 0.6, 0.6);
    this.ΔᐃΔᐃⲆ[11] = new ΔⵠΔᐃ.ⵠΔΔΔ(ir, 0.4, 1, 0, 0.6, 0.6);
    this.ΔᐃΔᐃⲆ[12] = new ΔⵠΔᐃ.ⵠΔΔΔ(fh, 0.8, 1, 0, 0.6, 0.6);
    this.ΔᐃΔᐃⲆ[13] = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.2, 1, 0, 0.6, 0.6);
    this.ΔᐃΔᐃⲆ[14] = new ΔⵠΔᐃ.ⵠΔΔΔ(Ee, 0.7, 1, 0, 0.6, 0.6);
  }
  function Rf() {
    this.ⲆⵠΔᐃΔ = "";
    this.ⵠΔᐃⵠ = 0;
    this.ΔⵠΔΔⵠ = 0;
    this.ᐃⲆⲆΔⲆ = 0;
    this.ⵠᐃᐃΔΔΔⵠ = 0;
    this.ΔⵠᐃᐃΔ = 0;
    this.ΔⲆᐃΔΔ = 0;
    this.ᐃⵠΔΔⲆ = 0;
    this.level = 0;
    this.label = null;
    this.ⵠⲆΔΔΔⵠᐃ = null;
    this.ΔΔⵠᐃⵠⵠⲆ = null;
    this.ⲆⲆΔⲆⲆ = false;
    this.ⲆⲆⲆⲆⲆ = 0;
  }
  function Gf(b, c, d, f, i, j, a, k, m, h) {
    this.type = b;
    this.ⲆΔⲆΔ = c;
    this.id = d;
    this.x = f;
    this.y = i;
    this.angle = j;
    this.ⵠⵠᐃΔᐃΔⲆ = j;
    this.action = a;
    this.info = k;
    this.ᐃⲆΔᐃᐃ = h;
    this.r = {
      x: f,
      y: i
    };
    this.ΔⵠΔⵠΔ = m;
    if (Cx) {
      this.ᐃΔᐃΔ = c * Cx.ᐃᐃΔᐃΔⲆΔ + d;
    }
    switch (b) {
      case 0:
        this.ΔΔᐃᐃ = Cx.ΔΔΔᐃ[this.ⲆΔⲆΔ];
        this.ⵠΔᐃⵠ = this.ΔΔᐃᐃ.ⵠΔᐃⵠ;
        this.ⵠᐃᐃΔΔΔⵠ = this.ΔΔᐃᐃ.ⵠᐃᐃΔΔΔⵠ;
        this.ΔⵠᐃᐃΔ = this.ΔΔᐃᐃ.ΔⵠᐃᐃΔ;
        this.ΔⵠΔΔⵠ = this.ΔΔᐃᐃ.ΔⵠΔΔⵠ;
        this.ᐃΔⲆⲆⲆΔᐃ = -1000000;
        this.ΔⵠⲆΔΔ = -1000000;
        this.ⵠⲆⲆⵠⲆ = -1000000;
        this.ΔⲆⲆⵠⵠ = -1000000;
        this.ⵠⲆⵠⲆΔⲆⵠ = -1000000;
        this.ᐃⵠΔᐃⲆᐃΔ = -1000000;
        this.ⵠᐃⵠⲆᐃ = -1000000;
        this.ⵠᐃⲆⵠᐃ = Cx.mode === 2 && this.ⵠΔᐃⵠ === 0 || Wj;
        this.ΔΔΔᐃⵠⲆᐃ = Cx.mode === 3 && this.ⵠΔᐃⵠ === 0 && cg;
        this.ⲆⵠⵠΔᐃⵠΔ = this.ⵠᐃⲆⵠᐃ && this.ΔΔᐃᐃ.ⲆⵠΔᐃΔ === "  " ? Qh : ul;
        this.ΔⲆⲆⵠⲆ = [];
        this.ⲆᐃᐃΔᐃΔⲆ = 0;
        this.ΔⵠΔⵠ = qg;
        this.ΔΔΔⲆⵠᐃΔ = 0;
        this.ⲆⵠⵠΔΔⲆᐃ = 0;
        this.ⲆⲆΔᐃⵠ = [];
        this.r = {
          x: f,
          y: i
        };
        this.ΔⵠᐃⲆ = fw;
        this.ΔⲆⵠⵠᐃⵠΔ = ew;
        this.ΔΔⵠᐃⲆ = 0;
        this.ΔᐃΔⲆᐃ = 0;
        this.ᐃᐃΔⵠᐃ = 0;
        this.ΔᐃⵠᐃⲆΔΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃⵠⲆΔⲆ = 0;
        this.ΔⵠΔᐃⵠⲆⵠ = 0;
        this.ᐃΔⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.6, 0.6, 0, 5, 3);
        this.ᐃᐃΔⲆⲆ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.6, 0.6, 0, 5, 3);
        this.freeze = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.6, 0.6, 0, 5, 3);
        this.ⲆⵠⲆᐃⲆⵠᐃ = new ΔⵠΔᐃ.ⵠΔΔΔ(ul, 0.6, 0.6, 0, 5, 3);
        this.ΔᐃⲆⵠⵠᐃⵠ = new ΔⵠΔᐃ.ⵠΔΔΔ(true, 0, 2.25, -1.5, 3.75, 7.5);
        this.ⵠⲆΔᐃⲆⲆⲆ = new ΔⵠΔᐃ.ⵠΔΔΔ(Cq, 0, 7.5, -3, 22.5, 33.75);
        this.attack = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0, 0, -Math.PI / 3, 6, 9);
        this.ΔᐃΔⲆΔⵠⲆΔΔ = 0;
        this.ΔⲆⵠΔⵠΔⲆ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.6, 0.6, 0, 1, 3);
        this.ᐃΔΔⲆⵠⵠᐃ = this.ⲆⵠⵠΔᐃⵠΔ ? new ΔⵠΔᐃ.ⵠΔΔΔ(Dl, 0, 2.25, -1.5, 2.75, 5.5) : 0;
        this.ⵠⲆⵠᐃⲆⵠΔ = 0;
        this.ⵠᐃΔⵠΔᐃΔ = 0;
        this.ΔᐃⲆΔΔⵠⲆ = [];
        this.ΔⲆᐃⵠΔᐃⵠ = [];
        this.text = [];
        this.label = [];
        this.ⵠᐃΔᐃᐃⵠⲆ = iw;
        this.ᐃⲆⲆᐃᐃ = true;
        this.right = -1;
        this.ᐃⵠΔⵠⵠ = -1;
        this.action = 64;
        this.ⲆΔΔᐃΔⲆᐃ = false;
        this.ⵠᐃⲆⲆⵠ = 0;
        this.ΔⲆⲆᐃΔ = fl;
        this.bubbles = [];
        this.ᐃⲆⲆΔⲆ = 0;
        this.ⵠⲆⵠᐃⵠ = -1;
        this.ᐃⲆⲆ = function (a) {
          if (this.info & 32768) {
            this.ⲆΔΔᐃΔⲆᐃ = true;
            this.info = this.info & -32769;
          } else {
            this.ⲆΔΔᐃΔⲆᐃ = false;
          }
          if (this.info & 16384) {
            this.info = this.info & -16385;
            this.ᐃⲆⲆΔⲆ = 1;
          } else {
            this.ᐃⲆⲆΔⲆ = 0;
          }
          this.ⵠᐃⲆⲆⵠ = Math.floor(this.info / 128);
          this.info -= this.ⵠᐃⲆⲆⵠ * 128;
          if (this.info === 7 || this.ⲆⵠⵠΔᐃⵠΔ) {
            this.right = -1;
          } else {
            this.right = this.info;
          }
          this.ⲆᐃᐃΔᐃΔⲆ = Cx.ᐃⲆΔΔⲆⵠΔΔᐃ(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100));
          this.ᐃⵠΔⵠⵠ = this.ᐃⲆΔᐃᐃ & 255;
          if (this.right === 2) {
            this.ΔⲆⲆᐃΔ = true;
          } else {
            this.ΔⲆⲆᐃΔ = false;
          }
          if (If[this.right]) {
            this.ⲆⵠΔⲆⵠ = qg;
          } else {
            this.ⲆⵠΔⲆⵠ = false;
          }
          if (a & 256) {
            this.ΔⲆⵠΔⵠΔⲆ.ΔᐃⲆ = ul;
            this.ΔⲆⵠΔⵠΔⲆ.ⵠⵠⲆ = 0.6;
          } else if (a & 4) {
            this.freeze.ΔᐃⲆ = false;
            this.freeze.ⵠⵠⲆ = 0.6;
          } else if (a & 128) {
            this.ᐃᐃΔⲆⲆ.ΔᐃⲆ = false;
            this.ᐃᐃΔⲆⲆ.ⵠⵠⲆ = 0.6;
          }
          if (a & 8) {
            this.ⲆⵠⲆᐃⲆⵠᐃ.ΔᐃⲆ = false;
            this.ⲆⵠⲆᐃⲆⵠᐃ.ⵠⵠⲆ = 0.6;
          }
          if (a & 2) {
            this.ᐃΔⲆΔ.ΔᐃⲆ = false;
            this.ᐃΔⲆΔ.ⵠⵠⲆ = 0.6;
          }
          if (a & 16) {
            this.ΔᐃΔⲆΔⵠⲆΔΔ = 0.58;
            if (Gx.ⵠᐃⲆᐃᐃ && this.ⵠⲆⵠᐃⵠ !== -1) {
              Gx.ΔΔΔᐃ[this.ⵠⲆⵠᐃⵠ].ⲆΔⵠⲆΔΔⲆⵠΔ(jx[this.right]);
            }
          }
        };
        this.ᐃⲆⲆ();
        break;
      case 23:
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(ol, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: cr,
          angle: 0
        };
        this.ⵠΔⲆⲆⲆ = Cv;
        this.ⵠᐃΔⲆⲆ = Uv;
        this.ᐃᐃΔΔⵠ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ΔⵠⵠⵠⲆΔΔ = 0;
        this.ⲆⲆΔⵠⵠΔⲆ = 0;
        this.ᐃⲆⲆΔⵠ = av;
        break;
      case 22:
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(x, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: Rg,
          angle: 0
        };
        this.ⵠΔⲆⲆⲆ = Sv;
        this.ⵠᐃΔⲆⲆ = Jv;
        this.ᐃᐃΔΔⵠ = new ΔⵠΔᐃ.ⵠΔΔΔ(fh, 1, 1.23, 1.18, 0.01, 0.01);
        this.ΔⵠⵠⵠⲆΔΔ = 0;
        this.ⲆⲆΔⵠⵠΔⲆ = 0;
        break;
      case 1:
      case 6:
        this.ⵠΔⲆⲆⲆ = Yv;
        this.ⵠᐃΔⲆⲆ = jv;
        this.ΔΔᐃⲆᐃ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 1, 1.03, 0.98, 0.3, 0.3);
        this.ΔΔᐃΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(uh, 1, 1.23, 1.18, 0.01, 0.01);
        this.ᐃᐃΔΔⵠ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(uh, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: Po,
          angle: 0
        };
        break;
      case 43:
        this.ⵠΔⲆⲆⲆ = Iv;
        this.ⵠᐃΔⲆⲆ = sv;
        this.ΔΔᐃΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(ul, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(Ml, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: Wj,
          angle: 0
        };
        this.ΔΔΔⲆ = [];
        for (var l = 0; l < 3; l++) {
          this.ΔΔΔⲆ.push({
            ΔⵠᐃⲆ: Gv,
            ⵠⵠⲆΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ΔΔΔⲆ[0].x = this.x - 16.5;
        this.ΔΔΔⲆ[0].y = this.y - 15.5;
        this.ΔΔΔⲆ[0].angle = this.angle;
        this.ΔΔΔⲆ[1].x = this.x + 36;
        this.ΔΔΔⲆ[1].y = this.y + 17;
        this.ΔΔΔⲆ[1].angle = this.angle;
        this.ΔΔΔⲆ[2].x = this.x - 18.5;
        this.ΔΔΔⲆ[2].y = this.y + 39;
        this.ΔΔΔⲆ[2].angle = this.angle;
        break;
      case 3:
        this.ⵠΔⲆⲆⲆ = nv;
        this.ⵠᐃΔⲆⲆ = mv;
        this.ΔΔᐃΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(al, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: fh,
          angle: 0
        };
        this.ΔΔΔⲆ = [];
        for (l = 0; l < 3; l++) {
          this.ΔΔΔⲆ.push({
            ΔⵠᐃⲆ: vv,
            ⵠⵠⲆΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(ol, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ΔΔΔⲆ[0].x = this.x - 16.5;
        this.ΔΔΔⲆ[0].y = this.y - 15.5;
        this.ΔΔΔⲆ[1].x = this.x - 5.5;
        this.ΔΔΔⲆ[1].y = this.y + 7.5;
        this.ΔΔΔⲆ[2].x = this.x + 18;
        this.ΔΔΔⲆ[2].y = this.y - 5;
        break;
      case 77:
        this.ΔⵠᐃⲆ = Vv;
        this.ⵠⵠⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 70:
        this.ΔⵠᐃⲆ = Mv;
        this.ⵠⵠⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 71:
        this.ΔⵠᐃⲆ = rv;
        this.ⵠⵠⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(x, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃᐃᐃⲆⲆⵠⵠ = new ΔⵠΔᐃ.ⵠΔΔΔ(ol, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔⵠⵠΔⵠΔᐃ = new ΔⵠΔᐃ.ⵠΔΔΔ(al, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(cr, 0.6, 0.6, 0, 5, 3);
        this.ᐃᐃΔⲆⲆ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 67:
        this.ΔⵠᐃⲆ = Qv;
        this.ⵠⵠⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃᐃᐃⲆⲆⵠⵠ = new ΔⵠΔᐃ.ⵠΔΔΔ(ul, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔⵠⵠΔⵠΔᐃ = new ΔⵠΔᐃ.ⵠΔΔΔ(Ja, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(Rg, 0.6, 0.6, 0, 5, 3);
        this.ᐃᐃΔⲆⲆ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 68:
        this.ΔⵠᐃⲆ = $v;
        this.ⵠⵠⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(Ja, 0.6, 0.6, 0, 5, 3);
        break;
      case 90:
        this.ΔⵠᐃⲆ = Kv;
        this.ⵠⵠⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
        this.ᐃΔⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 91:
        this.ⵠᐃΔᐃⲆ = this.info & 15;
        this.ⲆⵠⵠΔΔⲆᐃ = this.ᐃⲆΔᐃᐃ & 1;
        this.ⲆⲆⵠⵠⵠⵠΔ = 0;
        this.x = this.info;
        this.y = this.ᐃⲆΔᐃᐃ;
        this.ΔⵠᐃⲆ = zv;
        this.ⵠⵠⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(uh, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
        break;
      case 80:
      case 60:
      case 61:
      case 62:
      case 63:
      case 78:
      case 65:
      case 66:
      case 88:
        this.ΔⵠᐃⲆ = Kv;
        this.ⵠⵠⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(ns, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(fg, 0.6, 0.6, 0, 5, 3);
        break;
      case 36:
        this.ΔⵠᐃⲆ = kv;
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(false, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: Po,
          angle: 0
        };
        break;
      case 34:
        this.ⵠᐃΔⲆⲆ = Tv;
        this.ΔⵠᐃⲆ = fv;
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(false, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: false,
          angle: 0
        };
        this.up = new ΔⵠΔᐃ.ⵠΔΔΔ(ol, 1, 1.03, 0.98, 0.1, 0.1);
        this.ⲆⵠΔⲆⲆ = [];
        break;
      case 87:
        this.angle = Math.random() * Math.PI / 2;
      case 86:
      case 82:
        this.ΔⵠᐃⲆ = iv;
        this.ᐃΔⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 81:
        this.ΔⵠᐃⲆ = cw;
        this.ᐃΔⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 69:
        this.scale = 1;
        this.ΔⵠᐃⲆ = Rv;
        this.ⵠⵠⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃΔⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 76:
        this.ΔⲆΔᐃᐃ = 0;
        this.ΔΔᐃΔ = [];
        this.ΔᐃΔⵠΔΔⲆ = 0;
        this.ⵠΔⵠⲆᐃΔᐃ = aw;
        this.ΔⵠᐃⲆ = Pv;
        this.ⵠⵠⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔⵠΔᐃ.ⵠΔΔΔ(Po, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃΔⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(fl, 0.6, 0.6, 0, 5, 3);
        break;
      case 75:
        this.x = this.info;
        this.y = this.ᐃⲆΔᐃᐃ;
        this.scale = 1;
        this.ΔⵠΔΔ = 0;
        this.ΔⵠᐃⲆ = Fv;
        this.ⵠⵠⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(al, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔⵠΔᐃ.ⵠΔΔΔ(uh, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃΔⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 74:
        this.x = this.info;
        this.y = this.ᐃⲆΔᐃᐃ;
        this.scale = 1;
        this.ΔⵠΔΔ = 0;
        this.ΔⵠᐃⲆ = tv;
        this.ⵠⵠⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃΔⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(Ml, 0.6, 0.6, 0, 5, 3);
        break;
      case 73:
        this.scale = 1;
        this.ΔⵠᐃⲆ = hv;
        this.ⵠⵠⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(ba, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃΔⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(Rg, 0.6, 0.6, 0, 5, 3);
        break;
      case 72:
        this.scale = 1;
        this.ΔⵠᐃⲆ = Xv;
        this.ⵠⵠⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃΔⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 64:
        this.scale = 1;
        this.ΔⵠᐃⲆ = yv;
        this.ⵠⵠⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔⵠΔᐃ.ⵠΔΔΔ(ul, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃΔⲆΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 100:
        this.ΔΔΔⲆ = [];
        for (l = 0; l < 5; l++) {
          this.ΔΔΔⲆ.push({
            ΔⵠᐃⲆ: vv,
            ⵠⵠⲆΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(Ja, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        switch (this.id % 3) {
          case 0:
            this.ΔΔΔⲆ[0].x = this.x - 20.5;
            this.ΔΔΔⲆ[0].y = this.y - 22.5;
            this.ΔΔΔⲆ[1].x = this.x - 35.5;
            this.ΔΔΔⲆ[1].y = this.y + 7.5;
            this.ΔΔΔⲆ[2].x = this.x + 7.5;
            this.ΔΔΔⲆ[2].y = this.y - 30;
            this.ΔΔΔⲆ[3].x = this.x + 22.5;
            this.ΔΔΔⲆ[3].y = this.y;
            this.ΔΔΔⲆ[4].x = this.x - 7.5;
            this.ΔΔΔⲆ[4].y = this.y + 14.5;
            break;
          case 1:
            this.ΔΔΔⲆ[0].x = this.x - 30.5;
            this.ΔΔΔⲆ[0].y = this.y - 22.5;
            this.ΔΔΔⲆ[1].x = this.x - 15.5;
            this.ΔΔΔⲆ[1].y = this.y + 7.5;
            this.ΔΔΔⲆ[2].x = this.x + 15.5;
            this.ΔΔΔⲆ[2].y = this.y - 30;
            this.ΔΔΔⲆ[3].x = this.x + 12.5;
            this.ΔΔΔⲆ[3].y = this.y + 5;
            this.ΔΔΔⲆ[4].x = this.x - 40.5;
            this.ΔΔΔⲆ[4].y = this.y + 14.5;
            break;
          case 2:
            this.ΔΔΔⲆ[0].x = this.x - 20.5;
            this.ΔΔΔⲆ[0].y = this.y - 20.5;
            this.ΔΔΔⲆ[1].x = this.x - 35.5;
            this.ΔΔΔⲆ[1].y = this.y + 15.5;
            this.ΔΔΔⲆ[2].x = this.x + 7.5;
            this.ΔΔΔⲆ[2].y = this.y - 17;
            this.ΔΔΔⲆ[3].x = this.x + 22.5;
            this.ΔΔΔⲆ[3].y = this.y + 5;
            this.ΔΔΔⲆ[4].x = this.x - 7.5;
            this.ΔΔΔⲆ[4].y = this.y + 1.5;
        }
        break;
      case 31:
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(Fq, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: false,
          angle: 0
        };
        this.ΔⵠᐃⲆ = Av;
        this.ΔΔᐃΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ⵠΔΔⲆᐃⲆᐃ = new ΔⵠΔᐃ.ⵠΔΔΔ(Ee, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
        break;
      case 40:
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(false, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: false,
          angle: 0
        };
        this.ΔⵠᐃⲆ = ov;
        this.ΔΔᐃΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 39:
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(ul, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: false,
          angle: 0
        };
        this.ΔⵠᐃⲆ = wv;
        this.ΔΔᐃΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(tg, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 44:
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(Ml, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: Ja,
          angle: 0
        };
        this.ΔⵠᐃⲆ = Dv;
        this.ΔΔᐃΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(fh, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 55:
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(Wj, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: false,
          angle: 0
        };
        this.ΔⵠᐃⲆ = Hv;
        this.ΔΔᐃΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(ba, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 54:
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(ir, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: Rg,
          angle: 0
        };
        this.ΔⵠᐃⲆ = _v;
        this.ΔΔᐃΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(Fq, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 37:
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(false, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: false,
          angle: 0
        };
        this.ΔⵠᐃⲆ = uv;
        this.ΔΔᐃΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 24:
        this.ΔⵠᐃⲆ = gv;
        this.rotate = 0;
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(false, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: false,
          angle: 0
        };
        break;
      case 25:
        this.ΔⵠᐃⲆ = Wv;
        this.rotate = 0;
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(Po, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: false,
          angle: 0
        };
        break;
      case 26:
        this.ΔⵠᐃⲆ = bw;
        this.rotate = 0;
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(false, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: fh,
          angle: 0
        };
        break;
      case 27:
        this.ΔⵠᐃⲆ = Bv;
        this.rotate = 0;
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(false, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: false,
          angle: 0
        };
        break;
      case 28:
        this.ΔⵠᐃⲆ = Ov;
        this.rotate = 0;
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(Ml, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: false,
          angle: 0
        };
        break;
      case 32:
        this.ⵠΔⲆⲆⲆ = qv;
        this.ⵠᐃΔⲆⲆ = xv;
        this.rotate = 0;
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(false, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: fh,
          angle: 0
        };
        break;
      case 38:
        this.ΔⵠᐃⲆ = Wu;
        this.ⲆⵠⲆⲆ = Math.floor(this.x / 100);
        this.ⲆΔ = Math.floor(this.y / 100);
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(fl, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: uh,
          angle: 0
        };
        this.opacity = 1;
        this.ᐃⲆⲆΔⵠ = Tu;
        break;
      case 42:
        this.ΔⵠᐃⲆ = Su;
        this.ᐃᐃΔΔⵠ = new ΔⵠΔᐃ.ⵠΔΔΔ(cr, 1, 1.15, 1, 0.3, 0.3);
        this.color = 0;
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(Rg, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: Ee,
          angle: 0
        };
        break;
      case 33:
      case 2:
      case 56:
      case 35:
      case 29:
        this.ΔⵠᐃⲆ = Xu;
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(Fq, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: false,
          angle: 0
        };
        break;
      case 30:
        this.ΔⵠᐃⲆ = Xu;
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(fg, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: Wj,
          angle: 0
        };
        this.ᐃⲆⲆΔⵠ = Tu;
        break;
      case 4:
      case 7:
      case 8:
      case 9:
      case 19:
      case 50:
      case 5:
      case 12:
      case 13:
      case 14:
      case 20:
      case 52:
        this.ΔⵠᐃⲆ = Xu;
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(Ja, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: fg,
          angle: 0
        };
        this.ᐃⲆⲆΔⵠ = av;
        break;
      case 41:
        this.ΔⵠᐃⲆ = $u;
        this.opacity = 1;
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(Ml, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: ir,
          angle: 0
        };
        var n = this.angle % (Math.PI / 2);
        if (n < Math.PI / 4) {
          this.angle -= n;
        } else {
          this.angle += Math.PI / 2 - n;
        }
        break;
      case 79:
        this.ΔⵠᐃⲆ = Yu;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 89:
        this.ΔⵠᐃⲆ = Nu;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 83:
        this.ΔⵠᐃⲆ = Qu;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 84:
        this.ΔⵠᐃⲆ = Mu;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 85:
        this.ΔⵠᐃⲆ = Ou;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 11:
        this.ᐃⲆⲆ = function (a) {
          this.lock = this.info & 8192 ? 1 : 0;
          this.info = this.info & 8191;
          this.action = a;
        };
        this.ΔⵠᐃⲆ = bv;
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(false, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: fh,
          angle: 0
        };
        this.lock = 0;
        this.ᐃⲆⲆ(this.action);
        break;
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 53:
      case 10:
      case 15:
      case 16:
      case 17:
      case 21:
      case 51:
        this.ΔⵠᐃⲆ = Ru;
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(false, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: Ml,
          angle: 0
        };
        this.ᐃⲆⲆΔⵠ = av;
        break;
      case 18:
        this.ⵠΔⲆⲆⲆ = Nv;
        this.ΔⵠᐃⲆ = Ev;
        this.ⵠᐃΔⲆⲆ = pv;
        this.ΔΔᐃΔ = new ΔⵠΔᐃ.ⵠΔΔΔ(tg, 1, 1.23, 1.18, 0.02, 0.02);
        this.ᐃᐃΔΔⵠ = new ΔⵠΔᐃ.ⵠΔΔΔ(ba, 1, 1.23, 1.18, 0.04, 0.04);
        this.ᐃΔⲆΔ = {
          ΔᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(Ja, 1, 1, 0, 10, 10),
          ᐃⲆⲆ: ol,
          angle: 0
        };
        this.ᐃⲆⲆ = function (a) {
          this.action = a;
        };
    }
  }
  function jf() {
    Math.random();
    return "d";
  }
  function Lf() {
    this.ᐃⲆᐃⵠⵠ = function () {};
    this.ᐃⲆᐃᐃⵠ = {
      ⲆΔⲆΔ: 1,
      Δⵠⵠⵠⵠ: 1,
      open: false
    };
    this.ΔΔᐃᐃⲆ = {
      ⲆΔⲆΔ: 1,
      Δⵠⵠⵠⵠ: -1,
      open: false
    };
    this.ⵠⵠᐃᐃ = {
      ⲆΔⲆΔ: 1,
      open: uh,
      ΔⲆᐃⲆⲆᐃΔ: 0,
      ᐃᐃⵠⲆⵠ: 0,
      Δⵠⵠⵠⵠ: -1
    };
    this.ⵠᐃⵠⵠ = {
      ⲆⵠⵠⲆΔⵠⵠ: 0,
      ⲆΔΔⵠᐃΔⵠ: 0,
      type: 0,
      ⵠⲆΔΔΔⲆᐃ: 0,
      ⲆΔⲆΔ: 1,
      Δⵠⵠⵠⵠ: -1,
      open: tg
    };
    this.ⲆⵠᐃⲆ = {
      ⲆⵠⵠⲆΔⵠⵠ: 0,
      ΔⲆΔⲆΔⵠΔ: 0,
      ᐃᐃⵠⲆⵠ: 0,
      ⲆΔⲆΔ: 1,
      Δⵠⵠⵠⵠ: -1,
      open: ns
    };
    this.sign = {
      open: Fq,
      Δⵠⵠⵠⵠ: -1
    };
    this.ᐃⲆⲆΔᐃ = {
      ΔⵠⲆⵠ: 0,
      ⲆΔⲆΔ: 1,
      Δⵠⵠⵠⵠ: -1,
      open: ir
    };
    this.ΔⲆⲆᐃΔ = {
      enabled: false,
      ⵠᐃΔⵠΔ: -1,
      label: false,
      now: -1,
      ΔⵠᐃⲆ: hw
    };
    this.ΔᐃⵠΔ = {
      id: -1,
      ΔⵠⲆⵠ: 0,
      ⲆΔⲆΔ: 1,
      Δⵠⵠⵠⵠ: -1,
      open: false,
      lock: false,
      locked: ul,
      ΔᐃᐃᐃΔⲆΔ: ir,
      ⲆⲆⲆᐃΔⲆⵠ: cr
    };
    this.ⲆⲆΔⲆⲆ = qg;
    this.reconnect = {
      enabled: Ml,
      rotate: 0
    };
    this.key = ΔⵠΔᐃ.ᐃΔᐃⲆΔᐃⵠ("key", e.location.href);
    var a = ΔⵠΔᐃ.ᐃΔᐃⲆΔᐃⵠ("egg", e.location.href);
    if (a) {
      zx.ⵠΔᐃⵠ = parseInt(a);
    }
    this.beta = e.location.href.indexOf("http://starve.io/beta") === 0 ? 1 : 0;
    if (this.key && this.beta) {
      ⲆᐃᐃΔ.set("starve_beta", this.key);
    } else if (this.beta) {
      this.key = ⲆᐃᐃΔ.get("starve_beta");
    }
    this.ΔᐃⵠΔⲆ = ⲆᐃᐃΔ.get("starve_token") ? ⲆᐃᐃΔ.get("starve_token") : ΔⵠΔᐃ.ΔᐃⲆᐃⵠⵠⵠ(14);
    e.baguette();
    var b = e.kot2;
    function c() {
      this.seed = 1;
      this.ⵠΔⲆΔⲆⵠΔ = 2;
      this.ᐃⵠⲆⵠⵠⵠⵠ = 3;
      this.ΔⵠᐃⵠᐃⵠᐃΔⲆ = 1;
      this.ᐃᐃⵠⲆⵠΔᐃΔΔ = 2;
      this.ᐃⵠᐃⲆΔΔⲆⵠᐃ = 3;
      this.ⵠᐃᐃΔⵠᐃⵠ = function (a) {
        this.seed = 2 + Math.floor(Math.random() * 39879);
      };
      this.ΔΔⲆⲆᐃⵠᐃ = function (a) {
        this.ⵠΔⲆΔⲆⵠΔ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ΔᐃᐃᐃⵠᐃΔ = function (a) {
        this.ᐃⵠⲆⵠⵠⵠⵠ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⲆⵠᐃΔⲆᐃⲆⲆΔ = function (a) {
        this.ΔⵠᐃⵠᐃⵠᐃΔⲆ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ΔᐃΔΔⵠⵠᐃⲆΔ = function (a) {
        this.ᐃᐃⵠⲆⵠΔᐃΔΔ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ΔⵠΔⲆⲆᐃᐃΔΔ = function (a) {
        this.ᐃⵠᐃⲆΔΔⲆⵠᐃ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ΔⵠᐃⲆⲆⵠⲆ = function (c, f, i, j, k, m, a) {
        for (var n = 1; n < a;) {
          var o = n * i % ΔᐃΔⲆⲆᐃⵠ;
          var p = ⵠⵠᐃΔⵠᐃⵠ[o];
          if (p < 0.1) {
            q += 50;
            n += 50;
          } else {
            var q = Math.floor(p * j + k);
            if (n > m && n < a) {
              var r = Math.random() > 0.5 ? Jx * -10 : Jx * 10;
              var t = q * f;
              this.ᐃᐃΔΔᐃⲆⲆ[o] = Math.max(-25, Math.min(25, this.ᐃᐃΔΔᐃⲆⲆ[o] + r));
              this.ⲆΔᐃⵠⲆⵠⲆ[o] = Math.max(-8, Math.min(8, this.ⲆΔᐃⵠⲆⵠⲆ[o] + r));
              if (t > 0) {
                Eo.beginPath();
                Eo.arc(n + Dx.ᐃΔᐃⲆ.x + this.ⲆΔᐃⵠⲆⵠⲆ[o], c + this.ᐃᐃΔΔᐃⲆⲆ[o] - 20, t, 0, Math.PI * 2);
                if (Cx.transition) {
                  var v = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
                  Eo.fillStyle = Fw(83, 156, 160, 236, 247, 249, v);
                } else {
                  Eo.fillStyle = ts.ⲆᐃΔⲆⲆⵠᐃ[Cx.time];
                }
                Eo.fill();
              }
            }
            n += q * 2;
          }
        }
      };
      this.ⵠⵠΔᐃⲆᐃᐃ = function (c, f, i, j, k, m, a) {
        for (var n = 1; n < a;) {
          var o = i * n % ΔᐃΔⲆⲆᐃⵠ;
          var p = ⵠⵠᐃΔⵠᐃⵠ[o];
          if (p < 0.1) {
            q += 50;
            n += 50;
          } else {
            var q = Math.floor(p * j + k);
            if (m < n && a > n) {
              var r = Math.random() > 0.5 ? Jx * -10 : Jx * 10;
              var t = f * q;
              this.ᐃᐃⲆΔⵠ[o] = Math.max(-25, Math.min(25, this.ᐃᐃⲆΔⵠ[o] + r));
              this.ⲆⲆⵠΔΔ[o] = Math.max(-8, Math.min(8, this.ⲆⲆⵠΔΔ[o] + r));
              if (t > 0) {
                Eo.beginPath();
                Eo.arc(c + this.ᐃᐃⲆΔⵠ[o] - 20, n + Dx.ᐃΔᐃⲆ.y + this.ⲆⲆⵠΔΔ[o], t, 0, Math.PI * 2);
                if (Cx.transition) {
                  var v = Cx.time ? 1 - Cx.ᐃⲆᐃΔ.ⵠⵠⲆ : Cx.ᐃⲆᐃΔ.ⵠⵠⲆ;
                  Eo.fillStyle = Fw(83, 156, 160, 236, 247, 249, v);
                } else {
                  Eo.fillStyle = ts.ⲆᐃΔⲆⲆⵠᐃ[Cx.time];
                }
                Eo.fill();
              }
            }
            n += q * 2;
          }
        }
      };
      this.ⵠΔⲆⲆⵠΔᐃᐃᐃ = function (b, c, d, f, g, h) {
        var i;
        g -= 30;
        h += 30;
        if ((i = -(d - 0 - f - 2) / 200) === 0) {
          this.ΔᐃᐃᐃⵠᐃΔ();
        }
        Eo.globalAlpha = ΔⵠΔᐃ.ⵠⲆΔΔΔ(i);
        this.ΔⵠᐃⲆⲆⵠⲆ(d, i, this.ᐃⵠⲆⵠⵠⵠⵠ, 18, 16, g, h);
        Eo.globalAlpha = 1;
        if ((i = -(b - 250 - f + 500) / 150) === 0) {
          this.ⵠᐃᐃΔⵠᐃⵠ();
        }
        Eo.globalAlpha = ΔⵠΔᐃ.ⵠⲆΔΔΔ(i);
        this.ΔⵠᐃⲆⲆⵠⲆ(b, i, this.seed, 12, 10, g, h);
        Eo.globalAlpha = 1;
        if (c !== -1) {
          if ((i = -(c - 350 - f + 698) / 100) <= 0.01) {
            this.ΔΔⲆⲆᐃⵠᐃ();
          }
          Eo.globalAlpha = ΔⵠΔᐃ.ⵠⲆΔΔΔ(i);
          this.ΔⵠᐃⲆⲆⵠⲆ(c, i, this.ⵠΔⲆΔⲆⵠΔ, 6, 6, g, h);
          Eo.globalAlpha = 1;
        }
      };
      this.ⵠΔⵠⵠΔᐃⵠⲆⲆ = function (b, c, d, f, g, h) {
        var i;
        g -= 30;
        h += 30;
        if ((i = -(-d + 0 + f + 2) / 200) === 0) {
          this.ΔᐃᐃᐃⵠᐃΔ();
        }
        Eo.globalAlpha = ΔⵠΔᐃ.ⵠⲆΔΔΔ(i);
        this.ΔⵠᐃⲆⲆⵠⲆ(d, i, this.ᐃⵠⲆⵠⵠⵠⵠ, 18, 16, g, h);
        Eo.globalAlpha = 1;
        if ((i = -(-b + 250 + f) / 150) === 0) {
          this.ⵠᐃᐃΔⵠᐃⵠ();
        }
        Eo.globalAlpha = ΔⵠΔᐃ.ⵠⲆΔΔΔ(i);
        this.ΔⵠᐃⲆⲆⵠⲆ(b, i, this.seed, 12, 10, g, h);
        Eo.globalAlpha = 1;
        if (c !== -1) {
          if ((i = -(-c + 350 + f) / 100) <= 0.01) {
            this.ΔΔⲆⲆᐃⵠᐃ();
          }
          Eo.globalAlpha = ΔⵠΔᐃ.ⵠⲆΔΔΔ(i);
          this.ΔⵠᐃⲆⲆⵠⲆ(c, i, this.ⵠΔⲆΔⲆⵠΔ, 6, 6, g, h);
          Eo.globalAlpha = 1;
        }
      };
      this.ⲆΔΔᐃⲆᐃᐃⵠᐃ = function (b, c, d, f, g, h) {
        g -= 30;
        h += 30;
        var i = -(-d + 0 + f + 2) / 200;
        if (i === 0) {
          this.ΔᐃᐃᐃⵠᐃΔ();
        }
        Eo.globalAlpha = ΔⵠΔᐃ.ⵠⲆΔΔΔ(i);
        this.ⵠⵠΔᐃⲆᐃᐃ(d, i, this.ᐃⵠⲆⵠⵠⵠⵠ, 18, 16, g, h);
        Eo.globalAlpha = 1;
        if ((i = -(-b + 250 + f) / 150) === 0) {
          this.ⵠᐃᐃΔⵠᐃⵠ();
        }
        Eo.globalAlpha = ΔⵠΔᐃ.ⵠⲆΔΔΔ(i);
        this.ⵠⵠΔᐃⲆᐃᐃ(b, i, this.seed, 12, 10, g, h);
        Eo.globalAlpha = 1;
        if (c !== -1) {
          if ((i = -(-c + 350 + f) / 100) <= 0.01) {
            this.ΔΔⲆⲆᐃⵠᐃ();
          }
          Eo.globalAlpha = ΔⵠΔᐃ.ⵠⲆΔΔΔ(i);
          this.ⵠⵠΔᐃⲆᐃᐃ(c, i, this.ⵠΔⲆΔⲆⵠΔ, 6, 6, g, h);
          Eo.globalAlpha = 1;
        }
      };
      this.ΔᐃᐃΔⵠᐃⲆᐃᐃ = function (b, c, d, f, g, h) {
        var i;
        g -= 30;
        h += 30;
        if ((i = -(d - 0 - f - 2) / 200) === 0) {
          this.ΔᐃᐃᐃⵠᐃΔ();
        }
        Eo.globalAlpha = ΔⵠΔᐃ.ⵠⲆΔΔΔ(i);
        this.ⵠⵠΔᐃⲆᐃᐃ(d, i, this.ᐃⵠⲆⵠⵠⵠⵠ, 18, 16, g, h);
        Eo.globalAlpha = 1;
        if ((i = -(b - 250 - f + 500) / 150) === 0) {
          this.ⵠᐃᐃΔⵠᐃⵠ();
        }
        Eo.globalAlpha = ΔⵠΔᐃ.ⵠⲆΔΔΔ(i);
        this.ⵠⵠΔᐃⲆᐃᐃ(b, i, this.seed, 12, 10, g, h);
        Eo.globalAlpha = 1;
        if (c !== -1) {
          if ((i = -(c - 350 - f + 698) / 100) <= 0.01) {
            this.ΔΔⲆⲆᐃⵠᐃ();
          }
          Eo.globalAlpha = ΔⵠΔᐃ.ⵠⲆΔΔΔ(i);
          this.ⵠⵠΔᐃⲆᐃᐃ(c, i, this.ⵠΔⲆΔⲆⵠΔ, 6, 6, g, h);
          Eo.globalAlpha = 1;
        }
      };
      this.w1 = {
        r: new ΔⵠΔᐃ.ⲆᐃΔⲆⵠ(ΔⵠΔᐃ.ᐃᐃⲆᐃⲆⲆᐃ, 0, 10, 0, 0, 200),
        ΔΔⲆᐃ: new ΔⵠΔᐃ.ⲆᐃΔⲆⵠ(ΔⵠΔᐃ.ᐃⲆⵠΔⵠΔᐃ, 0, 10, 200, 200, 0)
      };
      this.w2 = {
        r: new ΔⵠΔᐃ.ⲆᐃΔⲆⵠ(ΔⵠΔᐃ.ⲆΔⲆΔΔⵠⵠ, 0, 10, 0, 0, 150),
        ΔΔⲆᐃ: new ΔⵠΔᐃ.ⲆᐃΔⲆⵠ(ΔⵠΔᐃ.ⵠⲆΔΔΔ, 0, 10, 150, 150, 0)
      };
      this.w3 = {
        r: new ΔⵠΔᐃ.ⲆᐃΔⲆⵠ(ΔⵠΔᐃ.ΔᐃΔΔⲆⲆⵠ, 0, 10, 0, 0, 100),
        ΔΔⲆᐃ: new ΔⵠΔᐃ.ⲆᐃΔⲆⵠ(ΔⵠΔᐃ.ⵠⲆΔΔΔ, 0, 10, 100, 100, 0)
      };
      this.ⲆΔⲆⲆᐃⲆⵠⵠⲆ = function (a) {
        if (a.r.ⵠⲆᐃⵠΔ === a.r.x) {
          if (a.ΔΔⲆᐃ.x === a.ΔΔⲆᐃ.ⵠⲆᐃⵠΔ) {
            return a.r;
          } else {
            return a.ΔΔⲆᐃ;
          }
        } else {
          return a.r;
        }
      };
      this.ⵠΔΔ = function (a) {
        var b;
        if (a.r.ⵠⲆᐃⵠΔ === a.r.x) {
          if (a.ΔΔⲆᐃ.x === a.ΔΔⲆᐃ.ⵠⲆᐃⵠΔ) {
            a.r.ΔⵠⲆⵠⲆⵠⵠ();
            a.ΔΔⲆᐃ.ΔⵠⲆⵠⲆⵠⵠ();
            b = a.r;
          } else {
            b = a.ΔΔⲆᐃ;
          }
        } else {
          b = a.r;
        }
        b.ⲆᐃᐃᐃⲆᐃᐃ(b.ⵠⲆᐃⵠΔ);
        return b;
      };
      this.ᐃᐃⲆΔⵠ = [];
      this.ⲆⲆⵠΔΔ = [];
      this.ᐃᐃΔΔᐃⲆⲆ = [];
      this.ⲆΔᐃⵠⲆⵠⲆ = [];
      this.ᐃⲆᐃⵠⵠ = function () {
        for (var a = 0; ΔᐃΔⲆⲆᐃⵠ > a; a++) {
          this.ᐃᐃⲆΔⵠ[a] = Math.floor(ⵠⵠᐃΔⵠᐃⵠ[a] * 25);
          this.ⲆⲆⵠΔΔ[a] = Math.floor(ⵠⵠᐃΔⵠᐃⵠ[a] * 8);
          this.ᐃᐃΔΔᐃⲆⲆ[a] = Math.floor(ⵠⵠᐃΔⵠᐃⵠ[a] * 25);
          this.ⲆΔᐃⵠⲆⵠⲆ[a] = Math.floor(ⵠⵠᐃΔⵠᐃⵠ[a] * 8);
        }
        this.w1.r.x = this.w1.r.ⵠⲆᐃⵠΔ;
        this.w2.r.Δᐃⵠⵠᐃ = 3.5;
        this.w3.r.Δᐃⵠⵠᐃ = 2;
      };
      this.ᐃⲆᐃⵠⵠ();
    }
    this.ΔᐃⵠΔⲆ = b.substring(0, 6) + this.ΔᐃⵠΔⲆ.substring(6);
    this.ⵠᐃΔⵠΔⵠⵠ = ⲆᐃᐃΔ.get("starve_token_id") ? ⲆᐃᐃΔ.get("starve_token_id") : "";
    this.id = 0;
    this.ᐃΔᐃΔ = 0;
    this.ⲆⲆⵠ = 0;
    this.ⲆΔⵠΔᐃᐃᐃ = {
      ΔᐃⲆⵠⲆᐃⲆ: "",
      ⲆⲆⲆⲆⲆ: 0,
      ⵠⲆΔᐃΔ: 0,
      ΔᐃΔⲆⵠⲆᐃ: 0
    };
    this.ⵠⵠⲆᐃΔΔⵠⲆΔ = {
      connected: 0,
      ΔᐃⵠⵠΔΔΔ: new Date().getTime()
    };
    this.ᐃᐃᐃᐃⵠ = [];
    this.ⵠᐃᐃΔⲆᐃᐃ = function (a) {
      for (var b = 0; b < this.ᐃᐃᐃᐃⵠ.length; b++) {
        if (this.ᐃᐃᐃᐃⵠ[b] == a) {
          return true;
        }
      }
      return fg;
    };
    this.ⵠⵠⵠΔⵠ = {
      ⵠᐃΔⵠΔ: 0,
      time: 0,
      value: 0,
      open: false,
      ΔⵠᐃⲆ: function () {
        if (this.open) {
          var a = new Date().getTime();
          this.time = Math.floor((a - this.ⵠᐃΔⵠΔ) / 1000);
          if (this.time < 60) {
            Fx.ⵠⵠⵠΔⵠ.button.ΔⵠᐃⲆ(Eo);
          } else {
            document.getElementById("shop_starterkit").style.display = "none";
            this.open = ba;
          }
        }
      }
    };
    this.ᐃᐃⲆⵠΔ = {
      id: -1,
      ⲆΔⲆΔ: -1,
      lock: 0,
      timeout: new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0, 1, 0, 1 / 30, 1),
      wait: false
    };
    this.ⲆΔⵠΔⵠ = {
      timeout: new ΔⵠΔᐃ.ⵠΔΔΔ(fg, 0, 1, 0, 1 / 5, 1),
      wait: false
    };
    this.ⲆⲆⲆᐃⲆ = {
      timeout: new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0, 1, 0, 1, 1),
      wait: false
    };
    this.ⲆⵠΔⲆⵠ = {
      timeout: new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0, 1, 0, 1 / 10, 1),
      wait: ul
    };
    this.ᐃΔᐃⲆ = new ΔⵠΔᐃ.ᐃⲆⵠⵠΔΔⲆ(ΔⵠΔᐃ.ᐃⲆⲆⵠᐃⲆΔ, 0, 0.4, 0, 0, bq, jo, bq, jo);
    this.ᐃΔᐃⲆ.ⵠᐃΔⵠΔ = 0;
    this.ᐃΔᐃⲆ.ⲆⵠⵠᐃⲆᐃⵠ = 0;
    this.ᐃΔᐃⲆ.ᐃⲆⲆ = function () {
      if (this.ⲆⵠⵠᐃⲆᐃⵠ > 0) {
        this.ⲆⵠⵠᐃⲆᐃⵠ -= Jx;
      } else {
        var a = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ];
        if (a) {
          this.ⵠᐃΔⵠΔ = 0;
          var b = Math.max(Math.min(bq - a.x, -2), 2 - Cx.w + Qo);
          var c = Math.max(Math.min(jo - a.y, -2), 2 - Cx.ᐃΔΔ + aq);
          this.ⲆᐃᐃᐃⲆᐃᐃ({
            x: b,
            y: c
          });
        } else {
          this.ⵠᐃΔⵠΔ += Jx;
          if (this.ⵠᐃΔⵠΔ > 3) {
            this.ⵠᐃΔⵠΔ = 0;
            if (!Dx.reconnect.enabled) {
              ⲆᐃⲆᐃ.ᐃΔΔΔⵠΔᐃᐃⵠ();
            }
          }
        }
      }
    };
    this.ᐃΔᐃⲆ.w = screen.width;
    this.ᐃΔᐃⲆ.ᐃΔΔ = screen.height;
    this.ᐃΔᐃⲆ.ΔᐃⵠⲆⵠΔⲆ = this.ᐃΔᐃⲆ.w;
    this.ᐃΔᐃⲆ.ⲆⵠⵠⲆΔⲆⵠ = this.ᐃΔᐃⲆ.ᐃΔΔ;
    this.ᐃΔᐃⲆ.rx = 0;
    this.ᐃΔᐃⲆ.ry = 0;
    this.ᐃΔᐃⲆ.ᐃᐃᐃⵠᐃΔⲆΔᐃ = 0;
    this.ᐃΔᐃⲆ.ᐃᐃⲆΔⵠΔᐃⲆΔ = 0;
    this.ᐃΔᐃⲆ.ⵠⲆᐃΔΔ = function (a, b) {
      this.x = -Math.min(Math.max(-Cx.ᐃⲆⵠᐃΔΔᐃ * 2, a - Cx.ᐃⲆⵠᐃΔΔᐃ - this.ΔᐃⵠⲆⵠΔⲆ / 2), Cx.w - this.ΔᐃⵠⲆⵠΔⲆ);
      this.y = -Math.min(Math.max(-Cx.ᐃⵠΔⵠⲆᐃᐃ * 2, b - (Cx.ᐃⵠΔⵠⲆᐃᐃ + this.ⲆⵠⵠⲆΔⲆⵠ) / 2), Cx.ᐃΔΔ - this.ⲆⵠⵠⲆΔⲆⵠ + Cx.ᐃⵠΔⵠⲆᐃᐃ);
      this.ⵠⲆᐃⵠΔ = this.x;
      this.ⲆⵠᐃᐃΔΔⲆ = this.y;
    };
    this.control = {
      angle: 0,
      timeout: 0,
      ⲆᐃⵠᐃⲆⵠᐃ: 0,
      ⲆⵠⵠⲆ: 0,
      attack: 0,
      ᐃⲆⲆ: function () {
        var a = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ];
        if (a) {
          var b = {
            x: Dx.ᐃΔᐃⲆ.x + a.x,
            y: Dx.ᐃΔᐃⲆ.y + a.y
          };
        } else {
          b = qo;
        }
        var c = ΔⵠΔᐃ.ΔΔᐃΔⲆᐃⲆ(Ix.ᐃᐃⵠⵠ, b);
        var d = ns;
        this.ⲆⵠⵠⲆ += Jx;
        if (!Ix.state) {
          if (a && !(a.action & 16) && this.ⲆⵠⵠⲆ > 0.2) {
            this.attack = 1;
            d = true;
            this.ⲆⵠⵠⲆ = 0;
            ⲆᐃⲆᐃ.ᐃᐃΔᐃᐃᐃΔⵠΔ(c);
          }
        }
        if (a) {
          a.angle = c;
          a.ⵠⵠᐃΔᐃΔⲆ = c;
        }
        if (!d) {
          this.timeout += Jx;
          if (this.timeout > 0.2) {
            this.timeout = 0;
            if (Math.abs(this.angle - c) > 0.005) {
              ⲆᐃⲆᐃ.ΔⲆΔⵠᐃⲆΔΔⵠ(c);
              this.angle = c;
            }
          }
        }
        if (!Dx.ᐃΔⲆⲆᐃ.open && !Dx.ΔΔⵠᐃᐃ.open) {
          var f = 0;
          if (Hx.ΔⵠⲆⲆⲆΔⲆ()) {
            f |= 1;
          }
          if (Hx.ⲆΔⵠᐃΔΔⲆ()) {
            f |= 2;
          }
          if (Hx.ⵠⵠⵠΔΔΔⲆ()) {
            f |= 4;
          }
          if (Hx.ⵠΔⲆᐃΔⲆᐃ()) {
            f |= 8;
          }
          if (this.ⲆᐃⵠᐃⲆⵠᐃ != f) {
            ⲆᐃⲆᐃ.ⵠⲆⵠΔΔⲆⲆⲆΔ(f);
          }
          this.ⲆᐃⵠᐃⲆⵠᐃ = f;
        }
      }
    };
    this.ΔⲆⵠⲆ = {
      c: 1,
      ΔΔⲆᐃ: 1,
      ᐃΔΔ: 1,
      ⵠΔΔ: 1,
      ΔᐃⲆ: 1,
      ᐃⲆΔⲆᐃⵠⵠ: 1,
      ⵠⲆⵠⵠⲆⲆΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(ae, 0, 1, 0, 3, 3),
      ΔᐃⲆⵠⵠⲆⵠ: new ΔⵠΔᐃ.ⵠΔΔΔ(true, 0, 1, 0, 2, 2),
      ⵠᐃⵠᐃᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(true, 0, 1, 0, 3, 3),
      ΔᐃΔᐃᐃⲆᐃ: new ΔⵠΔᐃ.ⵠΔΔΔ(Yk, 0, 1, 0, 3, 3),
      ΔⵠΔᐃⵠⵠᐃ: new ΔⵠΔᐃ.ⵠΔΔΔ(hr, 0, 1, 0, 3, 3),
      ⵠⲆᐃᐃᐃΔΔ: new ΔⵠΔᐃ.ⵠΔΔΔ(true, 0, 1, 0, 3, 3),
      ⵠⵠΔⵠⵠ: new ΔⵠΔᐃ.ⲆᐃΔⲆⵠ(ΔⵠΔᐃ.ᐃⲆⲆⵠᐃⲆΔ, 0, 1, 0, 0, 1),
      ⵠⲆΔⲆⵠ: new ΔⵠΔᐃ.ⲆᐃΔⲆⵠ(ΔⵠΔᐃ.ᐃⲆⲆⵠᐃⲆΔ, 0, 1, 0, 0, 1),
      ᐃᐃⵠΔᐃᐃⲆ: new ΔⵠΔᐃ.ⲆᐃΔⲆⵠ(ΔⵠΔᐃ.ᐃⲆⲆⵠᐃⲆΔ, 0, 1, 0, 0, 1),
      ⵠΔᐃᐃⲆⲆⵠ: new ΔⵠΔᐃ.ⲆᐃΔⲆⵠ(ΔⵠΔᐃ.ᐃⲆⲆⵠᐃⲆΔ, 0, 1, 0, 0, 1),
      ⲆⵠⲆΔΔΔᐃ: new ΔⵠΔᐃ.ⲆᐃΔⲆⵠ(ΔⵠΔᐃ.ᐃⲆⲆⵠᐃⲆΔ, 0, 1, 0, 0, 1),
      ᐃΔᐃΔΔ: new ΔⵠΔᐃ.ⲆᐃΔⲆⵠ(ΔⵠΔᐃ.ᐃⲆⲆⵠᐃⲆΔ, 0, 1, 0, 0, 1),
      ᐃⲆⲆ: function () {
        this.ⵠⲆⵠⵠⲆⲆΔ.ᐃⲆⲆ();
        this.ΔᐃⲆⵠⵠⲆⵠ.ᐃⲆⲆ();
        this.ⵠᐃⵠᐃᐃΔΔ.ᐃⲆⲆ();
        this.ΔᐃΔᐃᐃⲆᐃ.ᐃⲆⲆ();
        this.ΔⵠΔᐃⵠⵠᐃ.ᐃⲆⲆ();
        this.ⵠⲆᐃᐃᐃΔΔ.ᐃⲆⲆ();
        this.ⵠⵠΔⵠⵠ.ⲆᐃᐃᐃⲆᐃᐃ(this.c);
        this.ⵠⲆΔⲆⵠ.ⲆᐃᐃᐃⲆᐃᐃ(this.ΔΔⲆᐃ);
        this.ᐃᐃⵠΔᐃᐃⲆ.ⲆᐃᐃᐃⲆᐃᐃ(this.ᐃΔΔ);
        this.ⵠΔᐃᐃⲆⲆⵠ.ⲆᐃᐃᐃⲆᐃᐃ(this.ⵠΔΔ);
        this.ⲆⵠⲆΔΔΔᐃ.ⲆᐃᐃᐃⲆᐃᐃ(this.ΔᐃⲆ);
        this.ᐃΔᐃΔΔ.ⲆᐃᐃᐃⲆᐃᐃ(this.ᐃⲆΔⲆᐃⵠⵠ);
      }
    };
    this.ⵠΔⵠᐃᐃⲆⲆ = false;
    this.ⵠⲆⵠᐃΔⲆᐃ = ir;
    this.ⵠᐃⲆⵠᐃ = ns;
    this.ΔΔΔᐃⵠⲆᐃ = false;
    this.ᐃᐃᐃΔ = {
      max: 10,
      ⵠⵠΔᐃⲆᐃΔ: 0,
      ᐃⲆⲆΔⲆ: 0,
      ⲆᐃΔᐃ: [],
      ΔⲆⲆΔΔ: [],
      ⲆᐃⲆᐃᐃⲆΔ: function (a, b) {
        if (a === 1) {
          this.ᐃⲆⲆΔⲆ = Df.ᐃⲆΔΔⵠΔⵠᐃⲆ;
        }
        this.ⵠⵠΔᐃⲆᐃΔ += b;
        this.max = 10 + this.ⵠⵠΔᐃⲆᐃΔ + this.ᐃⲆⲆΔⲆ;
      },
      ⲆΔⵠⵠⲆΔⵠ: {
        item: -1,
        ΔⲆ: null,
        ΔⲆᐃⵠᐃ: 0,
        ⵠⲆΔᐃⲆⲆΔ: 0,
        ⵠΔΔⲆⵠ: -1,
        ⲆⵠⲆᐃⲆ: -1,
        ΔⵠᐃⲆᐃ: function (a) {
          if (!!this.ΔⲆᐃⵠᐃ && (a.x !== this.ⵠΔΔⲆⵠ || a.y !== this.ⲆⵠⲆᐃⲆ)) {
            this.ⵠⲆΔᐃⲆⲆΔ = 1;
          }
        },
        start: function (a, b) {
          this.ⵠΔΔⲆⵠ = b.x;
          this.ⲆⵠⲆᐃⲆ = b.y;
          this.item = a;
          this.ΔⲆ = Dx.ᐃᐃᐃΔ.ΔⲆⲆΔΔ[a].info.ΔⲆ[2];
          this.ΔⲆᐃⵠᐃ = 1;
        },
        stop: function () {
          this.ΔⲆᐃⵠᐃ = 0;
          this.ⵠⲆΔᐃⲆⲆΔ = 0;
          this.ⵠΔΔⲆⵠ = -1;
          this.ⲆⵠⲆᐃⲆ = -1;
        },
        release: function () {
          var a = -1;
          var b = Dx.ᐃᐃᐃΔ.ΔⲆⲆΔΔ;
          var c = 0;
          if (this.ΔⲆᐃⵠᐃ && this.ⵠⲆΔᐃⲆⲆΔ) {
            for (var d = 0; d < b.length; d++) {
              if (b[d].info.state === gf) {
                a = d;
                break;
              }
            }
            if (a !== -1 && a !== this.item && b[this.item]) {
              c = 1;
              var f = b[a];
              b[a] = b[this.item];
              b[this.item] = f;
              Fx.ΔⲆΔᐃⲆΔΔ();
            }
          }
          this.stop();
          return c;
        },
        ΔⵠᐃⲆ: function (a, b) {
          if (this.ΔⲆᐃⵠᐃ && this.ⵠⲆΔᐃⲆⲆΔ) {
            Wp(Eo, this.ΔⲆ, Math.floor(a - this.ΔⲆ.width / 2), Math.floor(b - this.ΔⲆ.height / 2));
          }
        }
      },
      ᐃⲆⵠⵠΔΔⵠⵠᐃ: function (a) {
        for (d = 0; d < a.length; d++) {
          if (this.ⲆᐃΔᐃ[a[d][0]] == a[d][1]) {
            return true;
          }
        }
        return false;
      },
      ᐃⵠⲆⵠΔ: function (a) {
        for (var b = 0; b < this.ΔⲆⲆΔΔ.length; b++) {
          if (this.ΔⲆⲆΔΔ[b].id == a) {
            return b;
          }
        }
        return -1;
      },
      ᐃⵠᐃᐃΔⵠΔ: function (a, b) {
        this.ⲆᐃΔᐃ[a] = 0;
        this.ΔⲆⲆΔΔ.splice(b, 1);
        Fx.ΔⲆΔᐃⲆΔΔ();
      },
      ⲆⵠΔᐃᐃⲆⲆ: function (a, b, c) {
        ᐃⲆⲆ = true;
        this.ⲆᐃΔᐃ[a] = Math.max(0, this.ⲆᐃΔᐃ[a] - b);
        if (!this.ⲆᐃΔᐃ[a] && c >= 0) {
          this.ᐃⵠᐃᐃΔⵠΔ(a, c);
        }
      }
    };
    this.ΔΔⲆΔᐃ = {
      enabled: fg,
      translate: {
        x: 0,
        y: 0
      },
      ΔⲆᐃΔΔᐃⲆ: function () {
        if (Cx.mode == 1 && !Dx.ⵠⲆⵠᐃΔⲆᐃ) {
          Dx.ΔΔⲆΔᐃ.enabled = !Dx.ΔΔⲆΔᐃ.enabled;
          if (Dx.ΔΔⲆΔᐃ.enabled) {
            Fx.options.ᐃᐃⵠᐃᐃᐃⲆ.display = "inline-block";
          } else {
            Fx.options.ᐃᐃⵠᐃᐃᐃⲆ.display = "none";
          }
        }
      }
    };
    Fx.options.ᐃᐃⵠᐃᐃᐃⲆ.display = "none";
    this.ⵠⲆΔⲆⲆ = {
      enabled: false,
      translate: {
        y: 0,
        x: 0
      },
      ⵠᐃΔⵠΔ: 0,
      ΔⲆᐃΔΔᐃⲆ: function () {
        Dx.ⵠⲆΔⲆⲆ.enabled = !Dx.ⵠⲆΔⲆⲆ.enabled;
        if (Dx.ⵠⲆΔⲆⲆ.enabled) {
          Fx.options.ΔⲆΔⵠΔᐃΔ.display = "inline-block";
        } else {
          Fx.options.ΔⲆΔⵠΔᐃΔ.display = "none";
        }
      },
      ᐃⲆⲆ: function () {
        if (!!this.enabled && Dx.ⵠΔⵠⵠ.id < 0 && !Fx.ᐃⲆᐃⲆ.open) {
          this.ⵠᐃΔⵠΔ += Jx;
          if (this.ⵠᐃΔⵠΔ > 2) {
            this.ⵠᐃΔⵠΔ = 0;
            if (Dx.ΔⲆⵠⲆ.ᐃΔΔ < 0.35) {
              if (Dx.ᐃᐃᐃΔ.ⲆᐃΔᐃ[110]) {
                ⲆᐃⲆᐃ.ⵠΔⲆⲆⵠ(110, Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(110));
              } else if (Dx.ᐃᐃᐃΔ.ⲆᐃΔᐃ[192]) {
                ⲆᐃⲆᐃ.ⵠΔⲆⲆⵠ(192, Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(192));
              } else if (Dx.ᐃᐃᐃΔ.ⲆᐃΔᐃ[196]) {
                ⲆᐃⲆᐃ.ⵠΔⲆⲆⵠ(196, Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(196));
              } else if (Dx.ᐃᐃᐃΔ.ⲆᐃΔᐃ[189]) {
                ⲆᐃⲆᐃ.ⵠΔⲆⲆⵠ(189, Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(189));
              } else if (Dx.ᐃᐃᐃΔ.ⲆᐃΔᐃ[207]) {
                ⲆᐃⲆᐃ.ⵠΔⲆⲆⵠ(207, Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(207));
              } else if (Dx.ᐃᐃᐃΔ.ⲆᐃΔᐃ[205]) {
                ⲆᐃⲆᐃ.ⵠΔⲆⲆⵠ(205, Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(205));
              } else if (Dx.ᐃᐃᐃΔ.ⲆᐃΔᐃ[209]) {
                ⲆᐃⲆᐃ.ⵠΔⲆⲆⵠ(209, Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(209));
              } else if (Dx.ᐃᐃᐃΔ.ⲆᐃΔᐃ[143]) {
                ⲆᐃⲆᐃ.ⵠΔⲆⲆⵠ(143, Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(143));
              } else if (Dx.ᐃᐃᐃΔ.ⲆᐃΔᐃ[117]) {
                ⲆᐃⲆᐃ.ⵠΔⲆⲆⵠ(117, Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(117));
              } else if (Dx.ᐃᐃᐃΔ.ⲆᐃΔᐃ[138]) {
                ⲆᐃⲆᐃ.ⵠΔⲆⲆⵠ(138, Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(138));
              } else if (Dx.ᐃᐃᐃΔ.ⲆᐃΔᐃ[133]) {
                ⲆᐃⲆᐃ.ⵠΔⲆⲆⵠ(133, Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(133));
              } else if (Dx.ᐃᐃᐃΔ.ⲆᐃΔᐃ[145]) {
                ⲆᐃⲆᐃ.ⵠΔⲆⲆⵠ(145, Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(145));
              } else if (Dx.ᐃᐃᐃΔ.ⲆᐃΔᐃ[136]) {
                ⲆᐃⲆᐃ.ⵠΔⲆⲆⵠ(136, Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(136));
              } else if (Dx.ᐃᐃᐃΔ.ⲆᐃΔᐃ[197]) {
                ⲆᐃⲆᐃ.ⵠΔⲆⲆⵠ(197, Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(197));
              }
            } else if (Dx.ΔⲆⵠⲆ.ⵠΔΔ < 0.35 && Dx.ᐃᐃᐃΔ.ⲆᐃΔᐃ[127]) {
              ⲆᐃⲆᐃ.ⵠΔⲆⲆⵠ(127, Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(127));
            }
          }
        }
      }
    };
    Fx.options.ΔⲆΔⵠΔᐃΔ.display = "none";
    this.ⵠΔⵠⵠ = {
      id: -1,
      ᐃⲆⲆⲆ: -1,
      timeout: new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0, 1, 0, 1, 1),
      ⵠⲆᐃᐃⲆ: uh,
      ᐃᐃⵠⲆ: -1,
      mode: 0,
      label: [],
      ⵠⵠΔⵠᐃ: [],
      ⲆᐃΔᐃΔ: tg,
      ΔΔᐃⲆᐃ: Ja,
      ᐃᐃᐃⲆⵠᐃⲆ: Rg,
      ΔΔᐃᐃⲆ: false,
      ΔⵠᐃΔⲆⵠⲆⵠⲆ: function () {
        this.mode = this.mode === 0 ? 1 : 0;
      },
      ⲆⲆΔΔⲆΔᐃⵠⲆ: function (a) {
        this.ⲆᐃΔᐃΔ = a;
        var b = Fx.ᐃⲆᐃⲆ;
        if (b.open) {
          b.ⲆⲆⲆⵠᐃᐃⲆ(b.button);
        }
        this.ᐃⲆⲆ();
      },
      ΔⵠⲆⲆⵠⵠΔⲆⵠ: function (a) {
        var b = nb[a];
        this.id = a;
        this.ⵠⲆᐃᐃⲆ = true;
        Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ];
        this.timeout.ᐃᐃⵠⵠΔᐃⵠ = b.time * 8;
        this.ᐃⲆⲆⲆ = b.ᐃⲆⲆⲆ;
      },
      ᐃᐃⲆΔⲆᐃⲆΔⲆ: function (a) {
        var b = nb[a];
        this.id = a;
        this.ⵠⲆᐃᐃⲆ = true;
        var c = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ];
        if (c && c.right == 28) {
          this.timeout.ᐃᐃⵠⵠΔᐃⵠ = b.time * 3;
        } else {
          this.timeout.ᐃᐃⵠⵠΔᐃⵠ = b.time;
        }
        this.ᐃⲆⲆⲆ = b.ᐃⲆⲆⲆ;
        for (var d = 0; d < b.r.length; d++) {
          var f = b.r[d];
          Dx.ᐃᐃᐃΔ.ⲆⵠΔᐃᐃⲆⲆ(f[0], f[1], Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(f[0]));
        }
        Fx.ΔⲆΔᐃⲆΔΔ();
      },
      ᐃⲆⲆ: function () {
        this.ⵠⵠΔⵠᐃ = [];
        if (Fx.ⵠᐃⵠⲆⵠ.ⵠΔⵠⵠ === 1) {
          Fx.ⵠᐃⵠⲆⵠ.display = 0;
        }
        for (var a in nb) {
          var b = nb[a];
          var c = true;
          if (b.r) {
            for (var d = 0; d < b.r.length; d++) {
              if (Dx.ᐃᐃᐃΔ.max >= 16 && b.id === 100) {
                c = false;
                break;
              }
              if (b.w > this.ⲆᐃΔᐃΔ || b.f > this.ΔΔᐃⲆᐃ || b.ΔᐃⲆ > this.ᐃᐃᐃⲆⵠᐃⲆ || b.e > this.ΔΔᐃᐃⲆ) {
                c = false;
                break;
              }
              var f = b.r[d];
              if (!Dx.ᐃᐃᐃΔ.ⲆᐃΔᐃ[f[0]] || Dx.ᐃᐃᐃΔ.ⲆᐃΔᐃ[f[0]] < f[1]) {
                c = Ml;
                break;
              }
            }
            if (c) {
              this.ⵠⵠΔⵠᐃ.push(Fx.ⲆᐃⵠⲆ[b.id]);
            }
          }
        }
        Fx.Ⲇᐃᐃⵠᐃⵠⵠ();
        Fx.ⵠⵠⵠΔⲆΔΔ();
        Fx.ᐃᐃⵠᐃⲆⵠⵠ();
        Fx.ΔⵠΔᐃⵠΔⲆ();
        Fx.ⲆⵠⵠⲆΔⵠΔ();
        Fx.ΔΔᐃⵠⲆⵠΔ();
        Fx.sign.ⲆᐃᐃⵠΔΔᐃ();
      },
      ΔⵠⲆⵠⲆⵠⵠ: function () {
        this.id = -1;
        this.ⵠⲆᐃᐃⲆ = false;
        this.timeout.ⵠⵠⲆ = 0;
        this.timeout.ΔᐃⲆ = Fq;
        this.ᐃⲆⲆ();
      }
    };
    this.ᐃⲆⲆΔⵠⵠⵠ = {
      message: undefined,
      ΔⵠᐃⲆ: kw
    };
    this.alert = {
      timeout: new ΔⵠΔᐃ.ⵠΔΔΔ(false, 1, 1, 0, 4, 0.3),
      text: "",
      label: null,
      ΔⵠᐃⲆ: gw,
      list: []
    };
    this.ᐃⵠᐃᐃⲆ = {
      Ⲇᐃ: document.createElement("canvas"),
      ᐃⲆⵠΔΔ: [],
      ᐃⲆⲆ: true,
      translate: {
        y: 0,
        x: 0
      },
      sort: function () {
        var a = [];
        for (var b = Cx.ΔΔΔᐃ, c = 0; c < b.length; c++) {
          if (b[c].ⲆⲆΔⲆⲆ) {
            a.push({
              id: c,
              ⵠΔⲆΔ: b[c].ⲆⲆⲆⲆⲆ
            });
          }
        }
        a.sort(function (a, b) {
          return b.ⵠΔⲆΔ - a.ⵠΔⲆΔ;
        });
        this.ᐃⲆⵠΔΔ = [];
        for (c = 0; c < a.length && c < 10; c++) {
          this.ᐃⲆⵠΔΔ.push(a[c].id);
        }
        this.ᐃⲆⲆ = rg;
      },
      ᐃⲆᐃⵠⵠ: function (a) {
        for (var b = Cx.ΔΔΔᐃ, c = 0; c < b.length; c++) {
          b[c].ⲆⲆⲆⲆⲆ = 0;
        }
        b[Dx.id].ⲆⲆⲆⲆⲆ = ΔⵠΔᐃ.ⵠᐃⵠΔⲆᐃᐃ(a[1]);
        this.ᐃⲆⵠΔΔ = [];
        for (c = 2; c < a.length; c += 2) {
          this.ᐃⲆⵠΔΔ.push(a[c]);
          b[a[c]].ⲆⲆⲆⲆⲆ = ΔⵠΔᐃ.ⵠᐃⵠΔⲆᐃᐃ(a[c + 1]);
        }
        this.ᐃⲆⲆ = Cq;
      }
    };
    this.ᐃⵠᐃᐃⲆ.Ⲇᐃ.width = eq * 180;
    this.ᐃⵠᐃᐃⲆ.Ⲇᐃ.height = eq * 300;
    this.ᐃⵠᐃᐃⲆ.Ⲇ = this.ᐃⵠᐃᐃⲆ.Ⲇᐃ.getContext("2d");
    this.ΔΔⵠᐃᐃ = {
      open: false,
      input: document.getElementById("commandInput"),
      ᐃᐃⵠΔΔΔᐃ: document.getElementById("commandsBox"),
      style: document.getElementById("commandMainBox").style,
      ⵠΔΔᐃΔᐃΔⵠᐃ: function (a) {
        this.ᐃᐃⵠΔΔΔᐃ.innerHTML += a;
      },
      ᐃⲆⲆ: function () {
        this.style.left = Math.floor(Qo / 2 - 300) + "px";
        this.style.top = Math.floor(aq / 2 - 250) + "px";
      },
      ᐃΔᐃⲆⲆᐃᐃᐃᐃ: function () {
        this.ᐃᐃⵠΔΔΔᐃ.innerHTML = "";
      },
      ᐃⲆᐃΔΔ: function () {
        this.open = false;
        this.style.display = "none";
      },
      ᐃΔΔᐃᐃⵠᐃ: function (a) {
        var b = "<table class=\"tableList\">";
        for (var c = 0; c < a.length; c++) {
          if (c % 3 == 0) {
            b += "<tr>";
          }
          b += "<td class=\"tableList\">" + a[c] + "</td>";
          if ((c + 1) % 3 === 0 || c + 1 === a.length) {
            b += "</tr>";
          }
        }
        return b += "</table>";
      },
      ⲆᐃⲆⲆᐃ: function (a, b, c, d) {
        d = d || "";
        var f = "<div class=commandWritten>" + (a = a || "");
        f += (b = b || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
        f += (c = c || "") + "</div>" + d + "</div>";
        this.ⵠΔΔᐃΔᐃΔⵠᐃ(f);
        this.ᐃⲆᐃᐃⵠᐃⵠⲆⵠ();
      },
      ᐃⲆᐃᐃⵠᐃⵠⲆⵠ: function () {
        this.ᐃᐃⵠΔΔΔᐃ.scrollTop = this.ᐃᐃⵠΔΔΔᐃ.scrollHeight;
      },
      ᐃⵠΔᐃΔⵠΔ: function (b) {
        switch (b) {
          case "clean":
            this.ᐃΔᐃⲆⲆᐃᐃᐃᐃ();
            return Yk;
          case "list":
            var c = "";
            const a = e.document.createElement("div");
            for (var d = Cx.ΔΔΔᐃ, f = 0; f < d.length; f++) {
              var g = d[f];
              if (g.ⲆⲆΔⲆⲆ) {
                a.innerText = g.ⲆⵠΔᐃΔ;
                c += a.innerHTML + " <span style=\"color:green\">#" + f + "</span><br />";
              }
            }
            this.ⲆᐃⲆⲆᐃ("list", 1, "List all connected players", c);
            return D;
          case "weapon-list":
            this.ⲆᐃⲆⲆᐃ("Weapons", 1, "List all weapons in the game", this.ᐃΔΔᐃᐃⵠᐃ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"]));
            return true;
          case "tool-list":
            this.ⲆᐃⲆⲆᐃ("Tools", 1, "List all tools in the game", this.ᐃΔΔᐃᐃⵠᐃ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
            return rg;
          case "survival-list":
            this.ⲆᐃⲆⲆᐃ("Survival Items", 1, "List all survival items in the game", this.ᐃΔΔᐃᐃⵠᐃ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
            return true;
          case "resource-list":
            this.ⲆᐃⲆⲆᐃ("Resources", 1, "List all resources in the game", this.ᐃΔΔᐃᐃⵠᐃ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
            return hr;
          case "food-list":
            this.ⲆᐃⲆⲆᐃ("Food", 1, "List all food in the game", this.ᐃΔΔᐃᐃⵠᐃ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
            return bs;
          case "hat-list":
            this.ⲆᐃⲆⲆᐃ("Hats", 1, "List all hats in the game", this.ᐃΔΔᐃᐃⵠᐃ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
            return true;
          case "building-list":
            this.ⲆᐃⲆⲆᐃ("Buildings", 1, "List all buildings in the game", this.ᐃΔΔᐃᐃⵠᐃ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
            return Dl;
          case "biome-list":
            this.ⲆᐃⲆⲆᐃ("Biomes list", 1, "List all available biomes in the game", this.ᐃΔΔᐃᐃⵠᐃ(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
            return cg;
          case "help-config":
            this.ⲆᐃⲆⲆᐃ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
            return true;
          case "pos":
            d = Cx.ⲆΔⵠ[0];
            f = 0;
            for (; f < d.length; f++) {
              var h = d[f];
              if (h.ⲆΔⲆΔ === Dx.id) {
                this.ⲆᐃⲆⲆᐃ("pos", 1, "Your position is " + Math.floor(h.x / 100) + ":" + Math.floor(h.y / 100));
                return Ln;
              }
            }
            break;
          case "help-admin":
            this.ⲆᐃⲆⲆᐃ("help-admin", 1, "List all available commands for admin only", this.ᐃΔΔᐃᐃⵠᐃ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
            return Qh;
          case "help":
            this.ⲆᐃⲆⲆᐃ("help", 1, "List all available commands", this.ᐃΔΔᐃᐃⵠᐃ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
            return true;
        }
        return false;
      },
      ᐃⵠᐃΔΔΔΔᐃᐃ: function () {
        if (!this.open) {
          this.open = true;
          this.style.display = "inline-block";
          this.input.focus();
        }
      },
      ᐃⵠⵠⲆΔⲆΔ: function () {
        var a = this.input.value;
        if (a && a.length > 0) {
          if (!this.ᐃⵠΔᐃΔⵠΔ(a)) {
            ⲆᐃⲆᐃ.ᐃᐃⵠΔΔⵠΔⵠⵠ(this.input.value);
          }
          this.input.value = "";
        }
      }
    };
    this.ᐃΔⲆⲆᐃ = {
      open: Rg,
      input: document.getElementById("chat_input"),
      style: document.getElementById("chat_block").style,
      ᐃⲆⲆ: function () {
        this.style.left = Math.floor(Qo / 2 - 150) + "px";
        this.style.top = Math.floor(aq / 2 + 80) + "px";
      },
      ᐃⲆᐃΔΔ: function () {
        this.open = false;
        this.style.display = "none";
        this.input.value = "";
      },
      prefix: "!",
      cmd: {
        hud: function (a) {
          if (a === "off") {
            var b = "Enter \"!hud\" without the quotes to restore the HUD";
            if (Dx.alert.text) {
              Dx.alert.list.push(b);
            } else {
              Dx.alert.text = b;
            }
            Fx.ⵠⵠΔⵠΔΔⲆ = 0;
          } else {
            Fx.ⵠⵠΔⵠΔΔⲆ = 1;
          }
        }
      },
      ᐃⵠΔᐃΔⵠΔ: function (a) {
        if (a.charAt(0) == this.prefix) {
          var b = "";
          var c = "";
          for (var d = 1; d < a.length && a.charAt(d) != " "; d++) {
            b += a.charAt(d);
          }
          for (d++; d < a.length; d++) {
            c += a.charAt(d);
          }
          var f = this.cmd[b];
          if (f) {
            f(c);
          }
          return da;
        }
        return fl;
      },
      ⵠᐃⲆᐃᐃ: function () {
        if (this.open) {
          this.open = false;
          this.style.display = "none";
          var a = this.input.value;
          if (a) {
            if (!this.ᐃⵠΔᐃΔⵠΔ(a)) {
              ⲆᐃⲆᐃ.ΔᐃΔᐃⲆΔΔΔⲆ(this.input.value);
            }
            this.input.value = "";
          }
        } else {
          this.open = true;
          this.style.display = "inline-block";
          this.input.focus();
        }
      }
    };
    this.ⵠⲆⲆⲆᐃⲆⲆ = {
      ΔⲆⲆⲆⵠ: [],
      ᐃⲆⲆ: function (a) {
        a.y += Jx * 80 * a.ⵠΔⲆΔ;
        a.x += Jx * 80 * a.c;
        a.ⵠⲆΔⲆⵠ -= Jx / 6;
        if (a.ⵠⲆΔⲆⵠ > 0.2) {
          a.alpha = Math.min(a.alpha + Jx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - Jx * 1, 0);
        }
      },
      add: function (b) {
        var c = Math.floor(Math.min(Qo / 1366 * 34, 44) * Math.max(Math.min(Cx.ΔⵠⲆΔΔ + 1000, 3000) / 3000, 0));
        if (this.ΔⲆⲆⲆⵠ.length < c) {
          var d = Math.floor(Math.random() * 5);
          var f = -Dx.ᐃΔᐃⲆ.x + Math.floor(Math.random() * Dx.ᐃΔᐃⲆ.w);
          var g = -Dx.ᐃΔᐃⲆ.y + Math.floor(Math.random() * Dx.ᐃΔᐃⲆ.ᐃΔΔ);
          var h = Math.random(Math.PI);
          this.ΔⲆⲆⲆⵠ.push(new _f(d, f, g, h));
        }
      }
    };
    this.ΔⵠΔΔΔⵠⵠ = 0;
    this.ΔΔᐃⵠⲆ = 0;
    this.ΔΔⵠᐃⵠ = {
      ΔⲆⲆⲆⵠ: [],
      ⲆⲆᐃⲆΔ: 0,
      ⵠᐃᐃΔⲆ: 0,
      ᐃⲆⲆ: function (a) {
        a.y += Jx * (200 + this.ⵠᐃᐃΔⲆ * 800) * a.ⵠΔⲆΔ;
        a.x += Jx * (200 + this.ⵠᐃᐃΔⲆ * 800) * a.c;
        a.ⵠⲆΔⲆⵠ -= Jx / 6;
        if (a.ⵠⲆΔⲆⵠ > 0.2) {
          a.alpha = Math.min(a.alpha + Jx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - Jx * 1, 0);
        }
      },
      add: function (b) {
        var c = Math.floor(Math.min((this.ⵠᐃᐃΔⲆ + 0.1) * 68 * (Qo / 1366), (this.ⵠᐃᐃΔⲆ + 0.1) * 68 + 10) * Math.max(Math.min(Cx.ΔⲆⲆⵠⵠ + 1000, 3000) / 3000, 0));
        if (this.ΔⲆⲆⲆⵠ.length < c) {
          var d = Math.floor(Math.random() * 5);
          var f = -Dx.ᐃΔᐃⲆ.x + Math.floor(Math.random() * Dx.ᐃΔᐃⲆ.w);
          var g = -Dx.ᐃΔᐃⲆ.y + Math.floor(Math.random() * Dx.ᐃΔᐃⲆ.ᐃΔΔ);
          var h = Math.random(Math.PI);
          if (Dx.ΔΔⵠᐃⵠ.ⲆⲆᐃⲆΔ !== 0) {
            f -= Dx.ᐃΔᐃⲆ.w / 2;
          }
          this.ΔⲆⲆⲆⵠ.push(new _f(d, f, g, h));
        }
      }
    };
    this.ⲆΔⵠⲆⲆ = {
      ΔⲆⲆⲆⵠ: [],
      ⲆⲆᐃⲆΔ: 0,
      ⵠᐃᐃΔⲆ: 0,
      ᐃⲆⲆ: function (a) {
        if (Hx.ⵠⵠⵠΔΔΔⲆ()) {
          a.y += Jx * a.ΔⵠΔⵠΔ * (5.5 + this.ⵠᐃᐃΔⲆ * 10);
        } else {
          a.y += Jx * a.ΔⵠΔⵠΔ * (5 + this.ⵠᐃᐃΔⲆ * 10);
        }
        a.ⵠⲆΔⲆⵠ -= Jx / 2;
        if (Hx.ΔⵠⲆⲆⲆΔⲆ()) {
          a.x += Jx * (100 + this.ⵠᐃᐃΔⲆ * 400);
        } else if (Hx.ⲆΔⵠᐃΔΔⲆ()) {
          a.x -= Jx * (130 - this.ⵠᐃᐃΔⲆ * 400);
        } else {
          a.x -= Jx * (30 - this.ⵠᐃᐃΔⲆ * 400);
        }
        if (a.ⵠⲆΔⲆⵠ > 0.2) {
          a.alpha = Math.min(a.alpha + Jx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - Jx * 5, 0);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min((this.ⵠᐃᐃΔⲆ * 1.5 + 0.5) * 34 * (Qo / 1366), (this.ⵠᐃᐃΔⲆ * 1.5 + 0.5) * 34 + 10) * Math.max(Math.min(Cx.ⵠⲆⲆⵠⲆ + 1000, 3000) / 3000, 0));
        if (this.ΔⲆⲆⲆⵠ.length < b) {
          var c = Math.floor(Math.random() * 5);
          var d = -Dx.ᐃΔᐃⲆ.x + Math.floor(Math.random() * Dx.ᐃΔᐃⲆ.w);
          var f = -Dx.ᐃΔᐃⲆ.y + Math.floor(Math.random() * 400 * eq - eq * 200);
          this.ΔⲆⲆⲆⵠ.push(new _f(c, d, f, 0));
        }
      }
    };
    this.ΔᐃΔᐃ = [];
    for (var d = 0; d < 4; d++) {
      this.ΔᐃΔᐃ.push(new c());
    }
  }
  function Wf() {
    Math.random();
    return "t";
  }
  function Ow() {
    Math.random();
    return "a";
  }
  function Pw() {
    Math.random();
    return "r";
  }
  ᐃᐃᐃⵠᐃⵠⲆᐃⲆ = 1;
  Hf.get = function (a, b) {
    if (b !== "ⲆᐃⲆ") {
      const a = function () {
        for (let b = 0; b < 5; b++) {
          e.addEventListener("click", function () {
            a();
          });
        }
      };
      a();
    }
    return e.Reflect.get(...arguments);
  };
  ;
  function qf() {
    Math.random();
    return "C";
  }
  function Uf() {
    Math.random();
    return "o";
  }
  function Qw() {
    Math.random();
    return "p";
  }
  function Rw() {
    Math.random();
    return "n";
  }
  function Vf() {
    Math.random();
    return "i";
  }
  function Xf() {
    Math.random();
    return "g";
  }
  function Ow() {
    Math.random();
    return "a";
  }
  function Uf() {
    Math.random();
    return "o";
  }
  function Wf() {
    Math.random();
    return "t";
  }
  function Zf() {
    Math.random();
    return "s";
  }
  function $f() {
    Math.random();
    return "e";
  }
  function Qw() {
    Math.random();
    return "p";
  }
  function Sw(b, c, d, f) {
    const g = ((d + 15420) * 214013 + 2531011) % 4294967296;
    const h = Db(~(b & 34841) & b | ~(b & 34841) & 34841);
    Db(g);
    return h ^ 5680;
  }
  setTimeout(function b() {
    var c = Rw() + Ow() + Wf() + Vf();
    Math.random();
    var d = "W" + $f() + function () {
      Math.random();
      return "b";
    }() + function () {
      Math.random();
      return "S";
    }() + Uf() + function () {
      Math.random();
      return "c";
    }() + (Math.random(), "k") + $f() + Wf();
    if (e[d].toString().indexOf(c) === -1) {
      Math.floor = function () {
        return Math.round() + 1;
      };
    }
    var f = Zf() + $f() + Rw() + jf();
    var g = Qw() + Pw() + Uf() + Wf() + Uf() + Wf() + function () {
      Math.random();
      return "y";
    }() + Qw() + $f();
    if (e[d][g][f].toString().indexOf(c) === -1) {
      Math.floor = function () {
        return Math.round() + 1;
      };
    }
    d = jf() + Pw() + Ow() + (Math.random(), "w") + (Math.random(), "I") + function () {
      Math.random();
      return "m";
    }() + Ow() + Xf() + $f();
    f = qf() + Ow() + Rw() + function () {
      Math.random();
      return "v";
    }() + Ow() + Zf() + function () {
      Math.random();
      return "R";
    }() + $f() + Rw() + jf() + $f() + Pw() + Vf() + Rw() + Xf() + qf() + Uf() + Rw() + Wf() + $f() + function () {
      Math.random();
      return "x";
    }() + Wf() + (Math.random(), "2") + function () {
      Math.random();
      return "D";
    }();
    if (e[f][g][d].toString().indexOf(c) === -1) {
      Math.floor = function () {
        return Math.round() + 1;
      };
    }
    setTimeout(b, 100000);
  }, 100000);
  function Tw(q, z) {
    this.Ⲇᐃ = q;
    this.Ⲇ = z;
    if (e.navigator.userAgent.indexOf("Edge") > -1) {
      this.ΔⲆⵠⲆᐃⲆⲆ = "default";
      this.ΔᐃᐃΔᐃⵠⲆ = "pointer";
    } else {
      this.ΔⲆⵠⲆᐃⲆⲆ = "url('img/cursor0.png'), default";
      this.ΔᐃᐃΔᐃⵠⲆ = "url('img/cursor1.png'), pointer";
    }
    var A = this;
    function i(c, d, i, j, k) {
      var a = this;
      for (var m = d + 9, n = 0, o = j, p = d; m > p; p++) {
        A.buttons[p].info.callback = r;
        A.buttons[p].info.ᐃⵠᐃΔᐃΔⲆᐃⲆ = c;
      }
      function q() {
        var a = c[o];
        zx.ΔⵠΔⵠᐃⵠΔ = df(a.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, mk, 10, 8);
        if (a.level !== undefined) {
          zx.ⵠΔΔⲆΔⵠΔ = df("Level " + a.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, 8);
        } else {
          zx.ⵠΔΔⲆΔⵠΔ = df("by " + a.ᐃⲆⵠ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, 8);
        }
      }
      function r() {
        if (this.ⵠⲆᐃᐃᐃᐃⵠ !== o && this.ⵠⲆᐃᐃᐃᐃⵠ !== -1) {
          if (this.ⲆⲆᐃⲆⲆⲆⲆ > 0) {
            if (ΔΔⲆⲆⲆΔⲆ === d) {
              P(f, ja, "none");
            } else {
              P(y, ja, "none");
            }
          } else if (ΔΔⲆⲆⲆΔⲆ === d) {
            P(f, ka, "inline-block");
          } else {
            P(y, ka, "inline-block");
          }
          o = this.ⵠⲆᐃᐃᐃᐃⵠ;
          i(this.ⵠⲆᐃᐃᐃᐃⵠ);
          q();
        }
      }
      this.ⵠⲆᐃⲆΔᐃⵠ = function () {
        for (var a = d, b = n * 3; m > a && c.length > b; a++, b++) {
          if (c[b].ΔⲆᐃ !== Δⵠᐃ.ᐃⲆⲆᐃᐃⲆΔ || k[b] !== 0) {
            A.buttons[a].info.ⵠⲆᐃᐃᐃᐃⵠ = b;
            for (var f = 0; f < 3; f++) {
              A.buttons[a].info.ΔⲆ[f] = ⲆⲆᐃⲆⵠΔⵠ[c[b].ΔⲆᐃ][f];
              A.buttons[a].info.active = ka;
              A.buttons[a].info.ⲆⲆᐃⲆⲆⲆⲆ = k[b];
            }
          } else {
            A.buttons[a].info.ⵠⲆᐃᐃᐃᐃⵠ = -1;
            A.buttons[a].info.active = ja;
          }
        }
        for (; m > a; a++) {
          A.buttons[a].info.ⵠⲆᐃᐃᐃᐃⵠ = -1;
          A.buttons[a].info.active = ja;
        }
        q();
      };
      A.buttons[m].info.callback = function () {
        if (n > 0) {
          n--;
        }
        a.ⵠⲆᐃⲆΔᐃⵠ();
      };
      A.buttons[m + 1].info.callback = function () {
        if (c.length > n * 3 + 9) {
          n++;
        }
        a.ⵠⲆᐃⲆΔᐃⵠ();
      };
    }
    function n() {
      var b = Number(ⲆᐃᐃΔ.get("starve_crate"));
      var c = Number(ⲆᐃᐃΔ.get("starve_dead"));
      var d = Number(ⲆᐃᐃΔ.get("starve_book"));
      var f = Number(ⲆᐃᐃΔ.get("starve_bag"));
      var g = Number(ⲆᐃᐃΔ.get("starve_skin"));
      var a = Number(ⲆᐃᐃΔ.get("starve_accessory"));
      A.ⵠΔᐃⵠ = g || 0;
      A.ΔⵠᐃᐃΔ = d || 0;
      A.ΔⲆᐃΔΔ = b || 1;
      A.ΔⵠΔΔⵠ = a || 0;
      A.ᐃⲆⲆΔⲆ = f || 0;
      A.ᐃⵠΔΔⲆ = c || 0;
    }
    function a() {
      for (var a = ⲆⲆⲆⵠ.ⵠΔⵠⵠᐃ, b = 0; b < a.length; b++) {
        if (Δⵠᐃ.ΔᐃⲆΔᐃ === a[b].ΔⲆᐃ) {
          A.unlock.ⵠΔᐃⵠ[b] = 1;
        } else {
          A.unlock.ⵠΔᐃⵠ[b] = 0;
        }
      }
      a = ⲆⲆⲆⵠ.ΔⲆⲆΔⲆ;
      b = 0;
      for (; a.length > b; b++) {
        if (Δⵠᐃ.ΔᐃⲆΔᐃ === a[b].ΔⲆᐃ) {
          A.unlock.ΔⵠΔΔⵠ[b] = 1;
        } else {
          A.unlock.ΔⵠΔΔⵠ[b] = 0;
        }
      }
      a = ⲆⲆⲆⵠ.Ⲇⵠᐃⵠ;
      b = 0;
      for (; b < a.length; b++) {
        if (Δⵠᐃ.ΔᐃⲆΔᐃ === a[b].ΔⲆᐃ) {
          A.unlock.ᐃⲆⲆΔⲆ[b] = 1;
        } else {
          A.unlock.ᐃⲆⲆΔⲆ[b] = 0;
        }
      }
      a = ⲆⲆⲆⵠ.ⲆᐃⵠⲆᐃ;
      b = 0;
      for (; a.length > b; b++) {
        if (a[b].ΔⲆᐃ === Δⵠᐃ.ΔᐃⲆΔᐃ) {
          A.unlock.ΔⵠᐃᐃΔ[b] = 1;
        } else {
          A.unlock.ΔⵠᐃᐃΔ[b] = 0;
        }
      }
      a = ⲆⲆⲆⵠ.ΔΔⵠΔⵠ;
      b = 0;
      for (; a.length > b; b++) {
        if (Δⵠᐃ.ΔᐃⲆΔᐃ === a[b].ΔⲆᐃ) {
          A.unlock.ΔⲆᐃΔΔ[b] = 1;
          A.unlock.ᐃⵠΔΔⲆ[b] = 1;
        } else {
          A.unlock.ΔⲆᐃΔΔ[b] = 0;
          A.unlock.ᐃⵠΔΔⲆ[b] = 0;
        }
      }
    }
    this.waiting = false;
    this.ⲆᐃⵠᐃⵠΔⵠ = 0;
    this.ⲆⵠΔᐃΔᐃᐃ = -1;
    this.ΔⲆⵠΔⲆᐃⲆ = {
      translate: {
        x: 0,
        y: 0
      },
      angle: 0,
      ΔⲆ: ⲆⲆ[301],
      ΔⵠᐃⲆ: function () {
        this.angle += Jx * 2;
        z.save();
        z.translate(this.translate.x + this.ΔⲆ.width / 2, this.translate.y + this.ΔⲆ.height / 2);
        z.rotate(this.angle);
        Wp(z, this.ΔⲆ, -this.ΔⲆ.width / 2, -this.ΔⲆ.height / 2);
        z.restore();
      }
    };
    this.ᐃⵠᐃᐃⵠΔⵠ = {
      id: document.getElementById("langselect"),
      style: document.getElementById("langselect").style,
      translate: {
        y: 0,
        x: 0
      },
      ᐃⲆⲆ: function () {
        this.style.left = Math.floor(this.translate.x) + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ⲆΔΔᐃⵠ = 0;
    this.ᐃᐃᐃⲆΔⵠΔ = -1;
    this.ᐃⲆⵠᐃΔⲆⵠ = undefined;
    this.ⲆΔᐃⲆΔⵠⲆ = "";
    this.ⵠᐃᐃᐃΔⵠⲆ = "";
    this.ᐃᐃⵠΔⲆⵠΔ = kn;
    this.ⵠᐃⵠⵠⵠ = 0;
    this.ΔᐃⲆⲆΔⲆᐃ = -1;
    this.ΔⵠᐃΔᐃΔⵠ = undefined;
    this.ᐃⵠΔⵠⲆⲆᐃ = 0;
    this.ᐃⵠⵠΔⲆⲆⲆ = 0;
    this.ⵠⲆⲆΔΔᐃᐃ = 0;
    this.ⵠⲆΔᐃΔ = 0;
    this.ⲆⲆⲆᐃΔᐃⲆ = 0;
    this.time = 0;
    this.ⲆⲆⲆⲆⲆ = 0;
    this.ᐃΔᐃᐃⵠⲆᐃ = 0;
    this.ⲆᐃⲆᐃΔᐃⵠ = 0;
    this.ᐃᐃᐃⵠᐃⵠⵠ = 0;
    this.ⵠⲆᐃⵠⲆᐃᐃ = 0;
    this.ᐃΔⵠⵠᐃᐃᐃ = [];
    this.Ⲇⵠⵠᐃⵠ = -1;
    this.ⵠⵠᐃⲆᐃᐃᐃ = -1;
    this.ⲆΔⵠⵠΔⲆΔ = -1;
    this.ᐃⲆᐃⲆᐃᐃᐃ = undefined;
    this.ᐃᐃΔᐃⵠⵠⲆ = undefined;
    this.ᐃⲆᐃΔⲆⵠⲆ = -1;
    this.ⲆⵠᐃΔᐃΔᐃ = -1;
    this.ⵠⲆⲆⵠⲆᐃⲆ = -1;
    this.ⵠΔⲆⲆΔⵠΔ = -1;
    this.ⵠᐃᐃⲆⲆᐃΔ = undefined;
    this.ⵠⵠΔᐃⲆΔᐃ = undefined;
    this.ⲆΔⲆⲆⵠⵠⲆ = undefined;
    this.ΔⵠΔⵠᐃⵠΔ = fk;
    this.ⵠΔΔⲆΔⵠΔ = undefined;
    this.ⵠᐃⵠΔⲆⲆᐃ = ar;
    this.ᐃⲆΔⵠⲆΔΔ = Xj;
    this.ᐃⵠⵠᐃΔᐃᐃ = undefined;
    this.ⲆⵠⵠⵠⵠⲆΔ = Xj;
    this.ⵠⵠΔⲆΔΔⲆ = 3;
    this.ⵠⵠⲆΔ = 0;
    this.ⵠᐃΔⲆⵠⵠᐃⲆⲆ = fg;
    this.ΔᐃΔⵠᐃ = ⲆᐃᐃΔ.get("starve_quality") ? ⲆᐃᐃΔ.get("starve_quality") : "high";
    if (this.ΔᐃΔⵠᐃ === "high") {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      this.ΔᐃΔⵠᐃ = 1;
    } else {
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      this.ΔᐃΔⵠᐃ = 0;
    }
    this.ⵠⲆᐃᐃᐃⲆᐃᐃᐃ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      ⲆᐃᐃΔ.set("starve_quality", "high", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 1;
      Fx.ΔΔⲆⲆᐃΔⵠ();
      zx.ΔᐃΔⵠᐃ = 1;
    };
    this.ⲆⵠⵠᐃᐃⲆⲆΔⲆ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      ⲆᐃᐃΔ.set("starve_quality", "low", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 0.5 / (rr / vr);
      Fx.ΔΔⲆⲆᐃΔⵠ();
      zx.ΔᐃΔⵠᐃ = 0;
    };
    if (xh === ⲆᐃᐃΔ.get("starve_mapping") && Mr === "FR") {
      Hx.ᐃᐃᐃⵠⵠⲆᐃ();
      this.mapping = "azerty";
    } else {
      this.mapping = ⲆᐃᐃΔ.get("starve_mapping") ? ⲆᐃᐃΔ.get("starve_mapping") : "qwerty";
    }
    if (this.mapping == "azerty") {
      Hx.ᐃᐃᐃⵠⵠⲆᐃ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
    } else {
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
    }
    this.ᐃᐃᐃⵠⵠⲆᐃ = function () {
      Hx.ᐃᐃᐃⵠⵠⲆᐃ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
      ⲆᐃᐃΔ.set("starve_mapping", "azerty", {
        expires: 30
      });
    };
    this.ⵠᐃᐃⲆᐃᐃⲆ = function () {
      Hx.ⵠᐃᐃⲆᐃᐃⲆ();
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      ⲆᐃᐃΔ.set("starve_mapping", "qwerty", {
        expires: 30
      });
    };
    this.ⵠⲆⵠΔᐃⲆΔ = {
      id: document.getElementById("all_rights_reserved"),
      style: document.getElementById("all_rights_reserved").style,
      translate: {
        y: 0,
        x: 0
      },
      ᐃⲆⲆ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    n();
    this.unlock = {};
    this.unlock.ⵠΔᐃⵠ = [];
    this.unlock.ᐃⲆⲆΔⲆ = [];
    this.unlock.ΔⵠᐃᐃΔ = [];
    this.unlock.ΔⲆᐃΔΔ = [];
    this.unlock.ᐃⵠΔΔⲆ = [];
    this.unlock.ΔⵠΔΔⵠ = [];
    this.ᐃⵠΔᐃⲆΔΔ = 0;
    this.ⲆⲆⲆⵠⵠⵠⵠ = a;
    a();
    this.ⲆᐃⵠᐃΔ = {
      id: document.getElementById("trevda"),
      style: document.getElementById("trevda").style,
      translate: {
        y: 0,
        x: 0
      },
      ᐃⲆⲆ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    var o;
    var r = 0;
    function t() {
      A.ᐃⲆⲆ();
      if (++r == 30) {
        A.ᐃᐃᐃΔⵠΔΔ();
        A.ⲆᐃⵠᐃⵠΔⵠ = true;
        A.ᐃⲆⲆ();
        return;
      }
      e.setTimeout(t, 33);
    }
    this.ᐃⲆᐃΔΔ = function (a) {
      o = a;
      A.ᐃⲆⵠΔᐃⵠΔ();
      A.ⲆᐃⵠᐃⵠΔⵠ = 0;
      l = -1;
      B();
    };
    var l = -1;
    function B() {
      A.ᐃⲆⲆ();
      if (++l == 30) {
        ⲆᐃᐃΔ.set("starve_nickname", A.ⲆⵠΔᐃΔ.input.value, {
          expires: 30
        });
        A.ⲆⵠΔᐃΔ.style.display = "none";
        A.ⵠⵠΔⲆΔ.style.display = "none";
        A.ᐃⵠᐃᐃⵠΔⵠ.style.display = "none";
        A.ⵠⲆⵠΔᐃⲆΔ.style.display = "none";
        A.ⲆᐃⵠᐃΔ.style.display = "none";
        A.stop();
        o();
        return;
      }
      e.setTimeout(B, 33);
    }
    this.ⲆΔΔⲆⲆ = false;
    this.stop = function () {
      this.ⲆΔΔⲆⲆ = ol;
    };
    this.ⵠᐃⲆᐃᐃ = function () {
      Ox();
      document.getElementById("game_body").style.backgroundColor = ts.ᐃΔⲆᐃⵠ[Bx.time];
      A.ⲆⵠΔᐃΔ.style.display = "inline-block";
      A.ⵠⵠΔⲆΔ.style.display = "inline-block";
      A.ᐃⵠᐃᐃⵠΔⵠ.style.display = "inline-block";
      A.ⵠⲆⵠΔᐃⲆΔ.style.display = "inline-block";
      A.ⲆᐃⵠᐃΔ.style.display = "inline-block";
      A.waiting = Fq;
      A.ⲆΔΔⲆⲆ = true;
      l = -1;
      r = 0;
      t();
    };
    this.ΔᐃⲆⲆΔⲆⵠ = function (a, b) {
      b = b < 0 ? -b : b;
      if ((a.position & ea) === ea) {
        if ((a.position & _) === _) {
          a.translate.x = bq + a.translate.ⵠΔΔⲆⵠ - b;
        } else if ((a.position & aa) === aa) {
          a.translate.x = bq + a.translate.ⵠΔΔⲆⵠ + b;
        } else {
          a.translate.x = bq + a.translate.ⵠΔΔⲆⵠ;
        }
      } else if ((a.position & _) === _) {
        a.translate.x = a.translate.ⵠΔΔⲆⵠ - b;
      } else if (aa === (a.position & aa)) {
        a.translate.x = Qo - a.translate.ⵠΔΔⲆⵠ + b;
      } else {
        a.translate.x = a.translate.ⵠΔΔⲆⵠ;
      }
      if ((a.position & fa) === fa) {
        if (ca === (a.position & ca)) {
          a.translate.y = jo + a.translate.ⲆⵠⲆᐃⲆ - b;
        } else if ((a.position & da) === da) {
          a.translate.y = jo + a.translate.ⲆⵠⲆᐃⲆ + b;
        } else {
          a.translate.y = jo + a.translate.ⲆⵠⲆᐃⲆ;
        }
      } else if (ca === (a.position & ca)) {
        a.translate.y = a.translate.ⲆⵠⲆᐃⲆ - b;
      } else if ((a.position & da) === da) {
        a.translate.y = aq + a.translate.ⲆⵠⲆᐃⲆ + b;
      } else {
        a.translate.y = a.translate.ⲆⵠⲆᐃⲆ;
      }
      if (a.style !== xh) {
        a.style.left = Math.floor(a.translate.x) + "px";
        a.style.top = Math.floor(a.translate.y) + "px";
      }
    };
    this.ᐃⲆⲆ = function () {
      var a = 0;
      if (r != 30 || l != -1) {
        if (r != 30) {
          a = 1500 / (r + 1) - 50;
        }
        if (l != -1) {
          a = -(1750 / (30 - l + 1) - 48);
        }
      }
      for (var b = 0; b < this.ⵠⵠΔᐃ.length; b++) {
        this.ΔᐃⲆⲆΔⲆⵠ(this.ⵠⵠΔᐃ[b], a);
      }
      for (b = 0; this.buttons.length > b; b++) {
        this.ΔᐃⲆⲆΔⲆⵠ(this.buttons[b].info, a);
      }
      for (b = 0; b < this.ᐃⲆᐃᐃⲆ.length; b++) {
        this.ΔᐃⲆⲆΔⲆⵠ(this.ᐃⲆᐃᐃⲆ[b], a);
      }
      this.ΔⲆⵠΔⲆᐃⲆ.translate.x = (Qo - this.ΔⲆⵠΔⲆᐃⲆ.ΔⲆ.width) / 2;
      this.ΔⲆⵠΔⲆᐃⲆ.translate.y = 0;
      this.ᐃⵠᐃᐃⵠΔⵠ.translate.x = Qo - 450;
      this.ᐃⵠᐃᐃⵠΔⵠ.translate.y = aq - 40;
      this.ⵠⲆⵠΔᐃⲆΔ.translate.x = Qo - 340;
      this.ⵠⲆⵠΔᐃⲆΔ.translate.y = aq - 25;
      this.ⲆᐃⵠᐃΔ.translate.x = Qo - 320;
      this.ⲆᐃⵠᐃΔ.translate.y = 80;
      if (r != 30 || l != -1) {
        var c = 0;
        if (r != 30) {
          c = 1500 / (r + 1) - 50;
        }
        if (l != -1) {
          c = -(1750 / (30 - l + 1) - 48);
        }
        this.ΔⲆⵠΔⲆᐃⲆ.translate.y -= c > 0 ? c : -c;
        this.ᐃⵠᐃᐃⵠΔⵠ.translate.y -= c < 0 ? c : -c;
        this.ⵠⲆⵠΔᐃⲆΔ.translate.y -= c < 0 ? c : -c;
      }
      this.ᐃⵠᐃᐃⵠΔⵠ.ᐃⲆⲆ();
      this.ⵠⲆⵠΔᐃⲆΔ.ᐃⲆⲆ();
      this.ⲆᐃⵠᐃΔ.ᐃⲆⲆ();
    };
    this.ⲆΔᐃⵠⲆΔⵠ = function (b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = 342;
      c.height = 342;
      var f = -Math.PI / 2;
      for (var g = 0; b.length > g; g++) {
        var h = b[g][0];
        var i = b[g][1] * Math.PI / 180;
        d.beginPath();
        d.arc(171, 171, 170, f, f + i, Ja);
        d.lineTo(171, 171);
        d.fillStyle = h;
        d.fill();
        f += i;
      }
      return c;
    };
    this.ΔⵠᐃᐃᐃᐃᐃΔΔ = function () {
      this.ⲆΔᐃⲆΔⵠⲆ = document.getElementById("account_nickname_input").value;
      if (this.ⲆΔᐃⲆΔⵠⲆ !== this.ⵠᐃᐃᐃΔⵠⲆ) {
        this.ⵠᐃᐃᐃΔⵠⲆ = this.ⲆΔᐃⲆΔⵠⲆ;
        this.ᐃᐃⵠΔⲆⵠΔ = df(this.ⲆΔᐃⲆΔⵠⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
      }
    };
    this.ΔⵠᐃⲆ = function () {
      Tm();
      zx.ᐃⵠΔⵠⲆⲆᐃ = ΔⵠΔᐃ.ⲆⵠⵠΔⲆⲆⵠ(zx.ᐃⵠΔⵠⲆⲆᐃ, zx.ᐃⵠⵠΔⲆⲆⲆ, 0.03);
      this.ⵠⵠΔᐃ[ⵠⲆⲆⲆᐃⲆΔ].translate.x = this.ⵠⵠΔᐃ[0].translate.x + -72 + zx.ᐃⵠΔⵠⲆⲆᐃ * 165;
      this.ⵠⵠΔᐃ[ⵠⲆⲆⲆᐃⲆΔ].translate.ⵠΔΔⲆⵠ = this.ⵠⵠΔᐃ[ⵠⲆⲆⲆᐃⲆΔ].translate.x;
      this.ⵠⵠΔᐃ[ⵠⲆⲆⲆᐃⲆΔ].translate.y = this.ⵠⵠΔᐃ[0].translate.y + 30;
      this.ⵠⵠΔᐃ[ⵠⲆⲆⲆᐃⲆΔ].translate.ⲆⵠⲆᐃⲆ = this.ⵠⵠΔᐃ[ⵠⲆⲆⲆᐃⲆΔ].translate.y;
      for (var n = 2; n < this.ⵠⵠΔᐃ.length; n++) {
        if (ka === this.ⵠⵠΔᐃ[n].active) {
          this.ⵠⵠΔᐃ[n].ΔⵠᐃⲆ(z);
        }
      }
      var q = this.Ⲇⵠⵠᐃⵠ - Date.now();
      if (q > 0) {
        var t = Math.floor(q / 60000);
        var B = Math.floor(t / 60);
        if ((t %= 60) !== this.ⲆΔⵠⵠΔⲆΔ) {
          this.ⲆΔⵠⵠΔⲆΔ = t;
          t = t < 10 ? "0" + t : "" + t;
          A.ᐃⲆᐃⲆᐃᐃᐃ = df(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (B !== this.ⵠⵠᐃⲆᐃᐃᐃ) {
          this.ⵠⵠᐃⲆᐃᐃᐃ = B;
          B = B < 10 ? "0" + B : "" + B;
          A.ᐃᐃΔᐃⵠⵠⲆ = df(B, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (L = this.ⵠⵠΔᐃ[ⲆΔⵠⲆΔⲆⵠ]).ΔⵠᐃⲆ(z);
        var K = this.ᐃᐃΔᐃⵠⵠⲆ;
        Wp(z, K, L.translate.x - K.width / 4 + 182, L.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
        K = this.ᐃⲆᐃⲆᐃᐃᐃ;
        Wp(z, K, L.translate.x - K.width / 4 + 251, L.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
      }
      if ((q = this.ᐃⲆᐃΔⲆⵠⲆ - Date.now()) > 0) {
        t = Math.floor(q / 60000);
        B = Math.floor(t / 60);
        var L;
        var V = Math.floor(B / 24);
        B %= 24;
        if ((t %= 60) !== this.ⵠΔⲆⲆΔⵠΔ) {
          this.ⵠΔⲆⲆΔⵠΔ = t;
          t = t < 10 ? "0" + t : "" + t;
          A.ⵠᐃᐃⲆⲆᐃΔ = df(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (B !== this.ⵠⲆⲆⵠⲆᐃⲆ) {
          this.ⵠⲆⲆⵠⲆᐃⲆ = B;
          B = B < 10 ? "0" + B : "" + B;
          A.ⵠⵠΔᐃⲆΔᐃ = df(B, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ⲆⵠᐃΔᐃΔᐃ !== V) {
          this.ⲆⵠᐃΔᐃΔᐃ = V;
          V = V < 10 ? "0" + V : "" + V;
          A.ⲆΔⲆⲆⵠⵠⲆ = df(V, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (L = this.ⵠⵠΔᐃ[ⲆⲆⵠΔΔⵠⵠ]).ΔⵠᐃⲆ(z);
        K = this.ⲆΔⲆⲆⵠⵠⲆ;
        Wp(z, K, L.translate.x - K.width / 4 + 113, L.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
        K = this.ⵠⵠΔᐃⲆΔᐃ;
        Wp(z, K, L.translate.x - K.width / 4 + 182, L.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
        K = this.ⵠᐃᐃⲆⲆᐃΔ;
        Wp(z, K, L.translate.x - K.width / 4 + 251, L.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
      }
      if (H === (this.ⲆᐃⵠⲆΔ & H)) {
        this.buttons[ᐃⵠⲆΔⲆᐃⵠ].info.state = uf;
      } else if (C === (this.ⲆᐃⵠⲆΔ & C)) {
        this.buttons[ⵠᐃⲆⲆⵠᐃΔ].info.state = uf;
      } else if (c === (this.ⲆᐃⵠⲆΔ & c)) {
        this.buttons[ᐃᐃⵠⲆⲆⵠⲆ].info.state = uf;
      } else if ((this.ⲆᐃⵠⲆΔ & d) === d) {
        this.buttons[ⲆᐃΔⲆⲆᐃᐃ].info.state = uf;
      } else if ((this.ⲆᐃⵠⲆΔ & p) === p) {
        this.buttons[ᐃΔΔⲆⵠΔⵠ].info.state = uf;
      } else if (v === (this.ⲆᐃⵠⲆΔ & v)) {
        this.buttons[ⵠΔⵠᐃᐃᐃⵠ].info.state = uf;
      } else if (m === (this.ⲆᐃⵠⲆΔ & m) || T === (this.ⲆᐃⵠⲆΔ & T) || (this.ⲆᐃⵠⲆΔ & k) === k || x === (this.ⲆᐃⵠⲆΔ & x) || J === (this.ⲆᐃⵠⲆΔ & J) || M === (this.ⲆᐃⵠⲆΔ & M) || D === (this.ⲆᐃⵠⲆΔ & D)) {
        this.buttons[ΔᐃⵠᐃᐃⲆΔ].info.state = uf;
      } else if (I === (this.ⲆᐃⵠⲆΔ & I) || S === (this.ⲆᐃⵠⲆΔ & S) || (this.ⲆᐃⵠⲆΔ & E) === E || (this.ⲆᐃⵠⲆΔ & Q) === Q || (this.ⲆᐃⵠⲆΔ & X) === X || F === (this.ⲆᐃⵠⲆΔ & F)) {
        this.buttons[ᐃᐃⵠⲆⲆⵠⲆ].info.state = uf;
      } else if (j === (this.ⲆᐃⵠⲆΔ & j) || W === (this.ⲆᐃⵠⲆΔ & W) || (this.ⲆᐃⵠⲆΔ & O) === O) {
        this.buttons[ⵠⲆΔᐃΔⵠⵠ].info.state = uf;
      } else if (N === (this.ⲆᐃⵠⲆΔ & N)) {
        this.buttons[ⲆᐃΔⲆⲆᐃᐃ].info.state = uf;
      }
      if ((this.ⲆᐃⵠⲆΔ & C) === C) {
        if (this.ᐃⲆΔⵠⲆΔΔ === this.ⲆⵠᐃΔⲆᐃᐃ) {
          this.ⵠᐃⵠΔⲆⲆᐃ = this.ΔⲆΔΔΔⲆⲆ;
          this.buttons[this.ΔⲆΔΔΔⲆⲆ].info.active = ja;
          this.buttons[this.ⲆⵠⵠⵠΔΔΔ].info.active = ja;
          this.buttons[this.ᐃⲆⲆᐃⲆΔⲆ].info.active = ja;
        } else {
          this.buttons[this.ΔⲆΔΔΔⲆⲆ].info.active = ka;
          this.buttons[this.ⲆⵠⵠⵠΔΔΔ].info.active = ka;
          this.buttons[this.ᐃⲆⲆᐃⲆΔⲆ].info.active = ka;
        }
        if (this.ᐃⲆΔⵠⲆΔΔ === this.ᐃⵠᐃΔᐃᐃⲆ) {
          this.buttons[this.ᐃⵠᐃΔᐃᐃⲆ].info.state = uf;
        } else if (this.ⲆᐃΔⵠⵠⲆⵠ === this.ᐃⲆΔⵠⲆΔΔ) {
          this.buttons[this.ⲆᐃΔⵠⵠⲆⵠ].info.state = uf;
        } else if (this.ⲆⵠᐃΔⲆᐃᐃ === this.ᐃⲆΔⵠⲆΔΔ) {
          this.buttons[this.ⲆⵠᐃΔⲆᐃᐃ].info.state = uf;
        } else if (this.ᐃⲆΔⵠⲆΔΔ === this.ⵠⵠⲆᐃᐃᐃⲆ) {
          this.buttons[this.ⵠⵠⲆᐃᐃᐃⲆ].info.state = uf;
        } else if (this.ᐃⲆΔⵠⲆΔΔ === this.ᐃⵠⵠΔᐃⵠⲆ) {
          this.buttons[this.ᐃⵠⵠΔᐃⵠⲆ].info.state = uf;
        }
        if (this.ΔⲆΔΔΔⲆⲆ === this.ⵠᐃⵠΔⲆⲆᐃ) {
          this.buttons[this.ΔⲆΔΔΔⲆⲆ].info.state = uf;
        } else if (this.ⲆⵠⵠⵠΔΔΔ === this.ⵠᐃⵠΔⲆⲆᐃ) {
          this.buttons[this.ⲆⵠⵠⵠΔΔΔ].info.state = uf;
        } else if (this.ⵠᐃⵠΔⲆⲆᐃ === this.ᐃⲆⲆᐃⲆΔⲆ) {
          this.buttons[this.ᐃⲆⲆᐃⲆΔⲆ].info.state = uf;
        }
        if (this.ᐃⵠⵠᐃΔᐃᐃ === this.ⵠᐃⲆⵠⲆⲆⲆ) {
          this.buttons[this.ⵠᐃⲆⵠⲆⲆⲆ].info.state = uf;
        } else if (this.ΔΔⵠΔΔⲆⵠ === this.ᐃⵠⵠᐃΔᐃᐃ) {
          this.buttons[this.ΔΔⵠΔΔⲆⵠ].info.state = uf;
        } else if (this.ᐃⵠⵠᐃΔᐃᐃ === this.ΔⲆΔᐃⵠⲆᐃ) {
          this.buttons[this.ΔⲆΔᐃⵠⲆᐃ].info.state = uf;
        }
        if (this.ⲆⵠⵠⵠⵠⲆΔ === this.ⲆⲆⵠⲆᐃⲆⵠ) {
          this.buttons[this.ⲆⲆⵠⲆᐃⲆⵠ].info.state = uf;
        } else if (this.ⵠᐃΔΔΔⵠⲆ === this.ⲆⵠⵠⵠⵠⲆΔ) {
          this.buttons[this.ⵠᐃΔΔΔⵠⲆ].info.state = uf;
        } else if (this.ⲆⵠⵠⵠⵠⲆΔ === this.ⲆⵠΔⲆᐃᐃⲆ) {
          this.buttons[this.ⲆⵠΔⲆᐃᐃⲆ].info.state = uf;
        } else if (this.ⲆⵠⵠⵠⵠⲆΔ === this.ᐃᐃⲆᐃⲆΔΔ) {
          this.buttons[this.ᐃᐃⲆᐃⲆΔΔ].info.state = uf;
        } else if (this.ᐃᐃⵠΔⵠⲆⲆ === this.ⲆⵠⵠⵠⵠⲆΔ) {
          this.buttons[this.ᐃᐃⵠΔⵠⲆⲆ].info.state = uf;
        } else if (this.ⲆⵠⵠⵠⵠⲆΔ === this.ⲆΔᐃᐃⵠΔᐃ) {
          this.buttons[this.ⲆΔᐃᐃⵠΔᐃ].info.state = uf;
        }
      }
      if (d === (this.ⲆᐃⵠⲆΔ & d)) {
        if (this.ⲆⵠΔᐃΔᐃᐃ === -1) {
          this.buttons[Ba].info.state = uf;
        } else if (this.ⲆⵠΔᐃΔᐃᐃ === 0) {
          this.buttons[Ca].info.state = uf;
        } else if (this.ⲆⵠΔᐃΔᐃᐃ === 2) {
          this.buttons[Ea].info.state = uf;
        } else if (this.ⲆⵠΔᐃΔᐃᐃ === 3) {
          this.buttons[Fa].info.state = uf;
        } else if (this.ⲆⵠΔᐃΔᐃᐃ === 4) {
          this.buttons[Da].info.state = uf;
        }
        if (this.ⵠⵠΔⲆΔΔⲆ === 0) {
          this.buttons[va].info.state = uf;
        } else if (this.ⵠⵠΔⲆΔΔⲆ === 1) {
          this.buttons[wa].info.state = uf;
        } else if (this.ⵠⵠΔⲆΔΔⲆ === 2) {
          this.buttons[xa].info.state = uf;
        } else if (this.ⵠⵠΔⲆΔΔⲆ === 3) {
          this.buttons[ya].info.state = uf;
        } else if (this.ⵠⵠΔⲆΔΔⲆ === 4) {
          this.buttons[za].info.state = uf;
        } else if (this.ⵠⵠΔⲆΔΔⲆ === 5) {
          this.buttons[Aa].info.state = uf;
        }
      }
      if ((this.ⲆᐃⵠⲆΔ & H) === H && ⲆᐃⲆᐃ.ΔⲆᐃΔⵠⲆⲆ === 0) {
        if (this.buttons[oa].ⲆⵠⵠᐃᐃⲆΔ(Ix.ᐃᐃⵠⵠ)) {
          this.buttons[oa].hint = Math.min(1, this.buttons[oa].hint + Jx * 1.5);
        } else {
          this.buttons[oa].hint = Math.max(0, this.buttons[oa].hint - Jx * 1.5);
        }
        if (this.buttons[pa].ⲆⵠⵠᐃᐃⲆΔ(Ix.ᐃᐃⵠⵠ)) {
          this.buttons[pa].hint = Math.min(1, this.buttons[pa].hint + Jx * 1.5);
        } else {
          this.buttons[pa].hint = Math.max(0, this.buttons[pa].hint - Jx * 1.5);
        }
        if (this.buttons[qa].ⲆⵠⵠᐃᐃⲆΔ(Ix.ᐃᐃⵠⵠ)) {
          this.buttons[qa].hint = Math.min(1, this.buttons[qa].hint + Jx * 1.5);
        } else {
          this.buttons[qa].hint = Math.max(0, this.buttons[qa].hint - Jx * 1.5);
        }
        if (this.buttons[ta].ⲆⵠⵠᐃᐃⲆΔ(Ix.ᐃᐃⵠⵠ)) {
          this.buttons[ta].hint = Math.min(1, this.buttons[ta].hint + Jx * 1.5);
        } else {
          this.buttons[ta].hint = Math.max(0, this.buttons[ta].hint - Jx * 1.5);
        }
        if (this.buttons[ra].ⲆⵠⵠᐃᐃⲆΔ(Ix.ᐃᐃⵠⵠ)) {
          this.buttons[ra].hint = Math.min(1, this.buttons[ra].hint + Jx * 1.5);
        } else {
          this.buttons[ra].hint = Math.max(0, this.buttons[ra].hint - Jx * 1.5);
        }
        if (this.buttons[sa].ⲆⵠⵠᐃᐃⲆΔ(Ix.ᐃᐃⵠⵠ)) {
          this.buttons[sa].hint = Math.min(1, this.buttons[sa].hint + Jx * 1.5);
        } else {
          this.buttons[sa].hint = Math.max(0, this.buttons[sa].hint - Jx * 1.5);
        }
      }
      var Y = 1;
      if ((this.ⲆᐃⵠⲆΔ & (T | k | x | J | M | D)) > 1) {
        K = Δᐃ.ⲆⲆΔⲆⲆⵠᐃ;
        z.save();
        z.translate(bq, na + K.height / 4);
        if (this.ᐃᐃⵠᐃⵠ === 1) {
          this.ⲆΔⲆⲆⲆᐃⲆ += Jx / 3;
          Y = this.ΔΔᐃⵠⲆⵠᐃ - 100 / Math.pow(1 + this.ⲆΔⲆⲆⲆᐃⲆ, 1 + this.ⲆΔⲆⲆⲆᐃⲆ);
          z.rotate(Y);
        }
        Wp(z, K, -K.width / 4, -K.height / 4, K.width / 2, K.height / 2);
        z.restore();
      }
      if (ⲆᐃⲆᐃ.ΔⲆᐃΔⵠⲆⲆ === 0) {
        if (ⲆᐃⲆᐃ.ᐃⲆΔⲆⵠ === 0) {
          this.buttons[oa].info.state = uf;
        } else if (ⲆᐃⲆᐃ.ᐃⲆΔⲆⵠ === 4) {
          this.buttons[pa].info.state = uf;
        } else if (ⲆᐃⲆᐃ.ᐃⲆΔⲆⵠ === 2) {
          this.buttons[ra].info.state = uf;
        } else if (ⲆᐃⲆᐃ.ᐃⲆΔⲆⵠ === 3) {
          this.buttons[sa].info.state = uf;
        } else if (ⲆᐃⲆᐃ.ᐃⲆΔⲆⵠ === 6) {
          this.buttons[qa].info.state = uf;
        } else if (ⲆᐃⲆᐃ.ᐃⲆΔⲆⵠ === 7) {
          this.buttons[ta].info.state = uf;
        }
      }
      for (n = 1; this.buttons.length > n; n++) {
        if (this.buttons[n].info.active === ka) {
          this.buttons[n].ΔⵠᐃⲆ(z);
        }
      }
      this.ⵠⵠΔᐃ[0].ΔⵠᐃⲆ(z);
      if ((this.ⲆᐃⵠⲆΔ & (G | R)) > 0) {
        K = this.ᐃᐃⵠΔⲆⵠΔ;
        Wp(z, K, bq - K.width / 4, 138, K.width / 2, K.height / 2);
      }
      var Z = Math.max(1, Math.min(18, Math.floor((zx.ⵠᐃⵠⵠⵠ + 3) / 2)));
      this.ⵠⵠΔᐃ[Z].active = ka;
      this.ⵠⵠΔᐃ[Z].ΔⵠᐃⲆ(z);
      this.ⵠⵠΔᐃ[Z].active = ja;
      this.buttons[0].ΔⵠᐃⲆ(z);
      if ((this.ⲆᐃⵠⲆΔ & (c | S | Q | I | X)) > 1) {
        var g = (this.ⲆᐃⵠⲆΔ & (S | Q | I | X)) > 1 ? -190 : 0;
        K = ⲆⲆ[29][this.ᐃⲆⲆΔⲆ][this.ᐃⵠΔᐃⲆΔΔ];
        Wp(z, K, bq - K.width / 4 + g, 183, K.width / 2, K.height / 2);
        this.ⵠⵠⲆΔ = (this.ⵠⵠⲆΔ + Jx * 1000) % 2000;
        var u = (this.ⵠⵠⲆΔ < 1000) * 4.5 ? this.ⵠⵠⲆΔ / 1000 : (2000 - this.ⵠⵠⲆΔ) / 1000;
        K = ⲆⲆ[28][this.ΔⵠᐃᐃΔ][this.ᐃⵠΔᐃⲆΔΔ];
        Wp(z, K, bq - K.width / 4 - 62 + u + g, 240, K.width / 2, K.height / 2);
        K = ⲆⲆ[7][this.ⵠΔᐃⵠ][this.ᐃⵠΔᐃⲆΔΔ];
        Wp(z, K, bq - K.width / 4 - 54 + u + g, 272, K.width / 2, K.height / 2);
        Wp(z, K, bq - K.width / 4 + 54 - u + g, 272, K.width / 2, K.height / 2);
        K = ⲆⲆ[255][this.ⵠΔᐃⵠ][this.ᐃⵠΔᐃⲆΔΔ];
        Wp(z, K, bq - K.width / 4 + g, 222, K.width / 2, K.height / 2);
        K = ⲆⲆ[796][this.ΔⵠΔΔⵠ][this.ᐃⵠΔᐃⲆΔΔ];
        Wp(z, K, bq - K.width / 4 + g, 222, K.width / 2, K.height / 2);
      }
      if ((this.ⲆᐃⵠⲆΔ & c) === c) {
        K = ⲆⲆ[250][this.ΔⲆᐃΔΔ][this.ᐃⵠΔᐃⲆΔΔ];
        Wp(z, K, bq - K.width / 4 - 61, 406 - K.height / 4, K.width / 2, K.height / 2);
        K = ⲆⲆ[250][this.ᐃⵠΔΔⲆ][this.ᐃⵠΔᐃⲆΔΔ];
        Wp(z, K, bq - K.width / 4 + 53, 406 - K.height / 4, K.width / 2, K.height / 2);
      }
      if (E === (this.ⲆᐃⵠⲆΔ & E)) {
        K = ⲆⲆ[250][this.ᐃⵠΔΔⲆ][this.ᐃⵠΔᐃⲆΔΔ];
        Wp(z, K, bq - K.width / 4 - 200, 268 - K.height / 4, K.width / 2, K.height / 2);
      }
      if (F === (this.ⲆᐃⵠⲆΔ & F)) {
        K = ⲆⲆ[250][this.ΔⲆᐃΔΔ][this.ᐃⵠΔᐃⲆΔΔ];
        Wp(z, K, bq - K.width / 4 - 200, 268 - K.height / 4, K.width / 2, K.height / 2);
      }
      if ((this.ⲆᐃⵠⲆΔ & (S | Q | I | X | E | F)) > 1) {
        for (n = 1; this.buttons.length > n; n++) {
          if ((this.buttons[n].view & this.ⲆᐃⵠⲆΔ) !== 0) {
            var _ = this.buttons[n].info;
            if (_.ⵠⲆᐃᐃᐃᐃⵠ >= 0) {
              K = _.ᐃⵠᐃΔᐃΔⲆᐃⲆ[_.ⵠⲆᐃᐃᐃᐃⵠ].ⲆⲆⵠ;
              Wp(z, K, _.translate.x - K.width / 8 + 44.5, _.translate.y - K.height / 8 + 45.5, K.width / 4, K.height / 4);
              if (_.ⲆⲆᐃⲆⲆⲆⲆ !== 1) {
                K = Δᐃ.ᐃⵠⵠΔⵠⲆⲆ;
                Wp(z, K, _.translate.x - K.width / 4 + 44.5, _.translate.y - K.height / 4 + 44.5, K.width / 2, K.height / 2);
              }
            }
          }
        }
        K = this.ΔⵠΔⵠᐃⵠΔ;
        Wp(z, K, bq - 312, 375, K.width / 2, K.height / 2);
        K = this.ⵠΔΔⲆΔⵠΔ;
        Wp(z, K, bq - 312, 395, K.width / 2, K.height / 2);
      }
      if (this.ᐃᐃᐃⲆΔⵠΔ !== this.ⲆΔΔᐃⵠ) {
        this.ᐃᐃᐃⲆΔⵠΔ = this.ⲆΔΔᐃⵠ;
        this.ᐃⲆⵠᐃΔⲆⵠ = df("" + this.ⲆΔΔᐃⵠ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
      }
      Wp(z, this.ᐃⲆⵠᐃΔⲆⵠ, this.ⵠⵠΔᐃ[0].translate.x + 350, 15, this.ᐃⲆⵠᐃΔⲆⵠ.w2, this.ᐃⲆⵠᐃΔⲆⵠ.ᐃⲆᐃΔᐃ);
      if (this.ⵠᐃⵠⵠⵠ !== this.ΔᐃⲆⲆΔⲆᐃ) {
        this.ΔᐃⲆⲆΔⲆᐃ = this.ⵠᐃⵠⵠⵠ;
        this.ΔⵠᐃΔᐃΔⵠ = df("LVL " + (this.ⵠᐃⵠⵠⵠ + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, undefined, 30, 24, undefined, zo, Wn, wj, "#3F3019", 20);
      }
      Wp(z, this.ΔⵠᐃΔᐃΔⵠ, this.ⵠⵠΔᐃ[0].translate.x + 94, 0, this.ΔⵠᐃΔᐃΔⵠ.w2, this.ΔⵠᐃΔᐃΔⵠ.ᐃⲆᐃΔᐃ);
      if (ⲆᐃⲆᐃ.ΔⲆᐃΔⵠⲆⲆ === 0) {
        var aa;
        if ((aa = this.buttons[oa].hint) > 0) {
          K = Δᐃ.ⲆⵠⵠᐃᐃⲆⲆ;
          Wp(z, K, bq - K.width / 4, -36 - ΔⵠΔᐃ.ⵠⲆΔΔΔ(1 - aa) * K.height / 2, K.width / 2, K.height / 2);
        }
        if ((aa = this.buttons[pa].hint) > 0) {
          K = Δᐃ.ⲆᐃⲆᐃΔⲆΔ;
          Wp(z, K, bq - K.width / 4, -36 - ΔⵠΔᐃ.ⵠⲆΔΔΔ(1 - aa) * K.height / 2, K.width / 2, K.height / 2);
        }
        if ((aa = this.buttons[qa].hint) > 0) {
          K = Δᐃ.ᐃⵠΔᐃᐃⲆᐃ;
          Wp(z, K, bq - K.width / 4, -36 - K.height * ΔⵠΔᐃ.ⵠⲆΔΔΔ(1 - aa) / 2, K.width / 2, K.height / 2);
        }
        if ((aa = this.buttons[ta].hint) > 0) {
          K = Δᐃ.ⲆⲆⵠⲆᐃΔⵠ;
          Wp(z, K, bq - K.width / 4, -36 - K.height * ΔⵠΔᐃ.ⵠⲆΔΔΔ(1 - aa) / 2, K.width / 2, K.height / 2);
        }
        if ((aa = this.buttons[sa].hint) > 0) {
          K = Δᐃ.ᐃΔⲆⲆᐃΔⲆ;
          Wp(z, K, bq - K.width / 4, -36 - ΔⵠΔᐃ.ⵠⲆΔΔΔ(1 - aa) * K.height / 2, K.width / 2, K.height / 2);
        }
        if ((aa = this.buttons[ra].hint) > 0) {
          K = Δᐃ.ᐃⵠⵠⵠⲆΔⵠ;
          Wp(z, K, bq - K.width / 4, -36 - K.height * ΔⵠΔᐃ.ⵠⲆΔΔΔ(1 - aa) / 2, K.width / 2, K.height / 2);
        }
      }
      if (this.ᐃᐃⵠᐃⵠ === 1 && Math.abs(Y - this.ΔΔᐃⵠⲆⵠᐃ) < 0.006) {
        z.globalAlpha = Math.min(1, this.ΔΔΔΔⲆΔΔ * 3);
        K = Δᐃ.ⲆⵠⲆⵠⲆⵠⵠ;
        z.save();
        z.translate(bq, 260);
        this.ΔΔΔΔⲆΔΔ += Jx;
        z.rotate(this.ΔΔΔΔⲆΔΔ);
        Wp(z, K, -K.width / 2, -K.height / 2, K.width, K.height);
        z.restore();
        u = 1.05 + Math.cos(this.ΔΔΔΔⲆΔΔ * 5) * 0.05;
        if (this.ΔⵠⲆᐃⵠⲆᐃ === 0) {
          var ba = u * (K = ⲆⲆⲆⵠ.ⵠΔⵠⵠᐃ[this.ⵠⲆⲆⲆᐃΔΔ].ⲆⲆⵠ).width;
          var ca = u * K.height;
          Wp(z, K, bq - ba / 2, 260 - ca / 2, ba, ca);
        } else if (this.ΔⵠⲆᐃⵠⲆᐃ === 1) {
          ba = u * (K = ⲆⲆⲆⵠ.ⵠΔⵠⵠᐃ[0].ⲆⲆⵠ).width;
          ca = u * K.height;
          Wp(z, K, bq - ba / 2, 260 - ca / 2, ba, ca);
          ba = u * (K = ⲆⲆⲆⵠ.ΔⲆⲆΔⲆ[this.ⵠⲆⲆⲆᐃΔΔ].ⲆⲆⵠ).width;
          ca = u * K.height;
          Wp(z, K, bq - ba / 2, 260 - ca / 2, ba, ca);
        } else if (this.ΔⵠⲆᐃⵠⲆᐃ === 2) {
          ba = u * (K = ⲆⲆⲆⵠ.Ⲇⵠᐃⵠ[this.ⵠⲆⲆⲆᐃΔΔ].ⲆⲆⵠ).width;
          ca = u * K.height;
          Wp(z, K, bq - ba / 2, 180 - ca / 2, ba, ca);
          ba = (K = ⲆⲆⲆⵠ.ⵠΔⵠⵠᐃ[0].ⲆⲆⵠ).width * u;
          ca = K.height * u;
          Wp(z, K, bq - ba / 2, 260 - ca / 2, ba, ca);
        } else if (this.ΔⵠⲆᐃⵠⲆᐃ === 3) {
          ba = u * (K = ⲆⲆⲆⵠ.ⲆᐃⵠⲆᐃ[this.ⵠⲆⲆⲆᐃΔΔ].ⲆⲆⵠ).width;
          ca = K.height * u;
          z.save();
          z.translate(bq, 260);
          z.rotate(Math.PI);
          Wp(z, K, -ba / 2, -ca / 2, ba, ca);
          z.restore();
        } else if (this.ΔⵠⲆᐃⵠⲆᐃ === 4) {
          ba = u * (K = ⲆⲆⲆⵠ.ΔΔⵠΔⵠ[this.ⵠⲆⲆⲆᐃΔΔ].ⲆⲆⵠ).width;
          ca = u * K.height;
          Wp(z, K, bq - ba / 2, 260 - ca / 2, ba, ca);
        }
        K = this.ⲆⲆⲆΔⲆΔᐃ;
        Wp(z, K, bq - K.width / 4, 340, K.width / 2, K.height / 2);
        K = this.ᐃⵠⵠⵠⲆⲆⵠ;
        Wp(z, K, bq - K.width / 4, 365, K.width / 2, K.height / 2);
        if (this.ΔΔΔΔⲆΔΔ > 6) {
          this.ᐃᐃⵠᐃⵠ = 0;
          U(m);
        }
        z.globalAlpha = 1;
      }
      Dx.alert.ΔⵠᐃⲆ("#FFF", "#000");
      if (A.waiting) {
        this.ΔⲆⵠΔⲆᐃⲆ.ΔⵠᐃⲆ();
      }
    };
    var u = 0;
    var H = Math.pow(2, u++);
    var d = Math.pow(2, u++);
    this.ⲆΔⵠᐃᐃ = d;
    var v = Math.pow(2, u++);
    var c = Math.pow(2, u++);
    var m = Math.pow(2, u++);
    var p = Math.pow(2, u++);
    var C = Math.pow(2, u++);
    var L = Math.pow(2, u++);
    this.ⲆⵠΔⵠⲆ = L;
    var f = Math.pow(2, u++);
    var y = Math.pow(2, u++);
    var T = Math.pow(2, u++);
    var k = Math.pow(2, u++);
    var x = Math.pow(2, u++);
    var J = Math.pow(2, u++);
    var M = Math.pow(2, u++);
    var D = Math.pow(2, u++);
    var I = Math.pow(2, u++);
    var E = Math.pow(2, u++);
    var S = Math.pow(2, u++);
    var Q = Math.pow(2, u++);
    var X = Math.pow(2, u++);
    var F = Math.pow(2, u++);
    var R = Math.pow(2, u++);
    var G = Math.pow(2, u++);
    var j = Math.pow(2, u++);
    this.ΔⲆⲆⲆΔ = j;
    var W = Math.pow(2, u++);
    this.ⵠᐃⲆΔΔ = W;
    var O = Math.pow(2, u++);
    this.ⲆⵠⲆⲆⵠ = O;
    var N = Math.pow(2, u++);
    function P(a, b, c) {
      for (var d = 0; d < A.ⵠⵠΔᐃ.length; d++) {
        if ((A.ⵠⵠΔᐃ[d].view & a) !== 0) {
          A.ⵠⵠΔᐃ[d].active = b;
        }
      }
      for (d = 0; A.buttons.length > d; d++) {
        if (A.buttons[d].view & a) {
          A.buttons[d].info.active = b;
        }
      }
      for (d = 0; A.ᐃⲆᐃᐃⲆ.length > d; d++) {
        if (A.ᐃⲆᐃᐃⲆ[d].view & a) {
          A.ᐃⲆᐃᐃⲆ[d].style.display = c;
        }
      }
    }
    this.ⲆᐃⵠⲆΔ = H;
    function K() {
      var b = Number(ⲆᐃᐃΔ.get("starve_crate"));
      var c = Number(ⲆᐃᐃΔ.get("starve_dead"));
      var d = Number(ⲆᐃᐃΔ.get("starve_book"));
      var f = Number(ⲆᐃᐃΔ.get("starve_bag"));
      var g = Number(ⲆᐃᐃΔ.get("starve_skin"));
      var h = Number(ⲆᐃᐃΔ.get("starve_accessory"));
      if (zx.unlock.ⵠΔᐃⵠ[zx.ⵠΔᐃⵠ] <= 0) {
        zx.ⵠΔᐃⵠ = zx.unlock.ⵠΔᐃⵠ[g] > 0 ? g : 0;
      }
      if (zx.unlock.ΔⵠᐃᐃΔ[zx.ΔⵠᐃᐃΔ] <= 0) {
        zx.ΔⵠᐃᐃΔ = zx.unlock.ΔⵠᐃᐃΔ[d] > 0 ? d : 0;
      }
      if (zx.unlock.ᐃⵠΔΔⲆ[zx.ᐃⵠΔΔⲆ] <= 0) {
        zx.ᐃⵠΔΔⲆ = zx.unlock.ᐃⵠΔΔⲆ[c] > 0 ? c : 0;
      }
      if (zx.unlock.ΔⲆᐃΔΔ[zx.ΔⲆᐃΔΔ] <= 0) {
        zx.ΔⲆᐃΔΔ = zx.unlock.ΔⲆᐃΔΔ[b] > 0 ? b : 0;
      }
      if (zx.unlock.ΔⵠΔΔⵠ[zx.ΔⵠΔΔⵠ] <= 0) {
        zx.ΔⵠΔΔⵠ = zx.unlock.ΔⵠΔΔⵠ[h] > 0 ? h : 0;
      }
      if (zx.unlock.ᐃⲆⲆΔⲆ[zx.ᐃⲆⲆΔⲆ] <= 0) {
        zx.ᐃⲆⲆΔⲆ = zx.unlock.ᐃⲆⲆΔⲆ[f] > 0 ? f : 0;
      }
    }
    function U(a) {
      if (A.ⲆᐃⵠᐃⵠΔⵠ !== fl) {
        P(f, ja, "none");
        P(y, ja, "none");
        K();
        if (a !== A.ⲆᐃⵠⲆΔ && A.ᐃᐃⵠᐃⵠ < 1) {
          A.ⲆᐃⵠᐃΔ.style.display = H === a || m === a || a === d || C === a || c === a || a === p ? "inline-block" : "none";
          P(A.ⲆᐃⵠⲆΔ, ja, "none");
          A.ⲆᐃⵠⲆΔ = a;
          P(A.ⲆᐃⵠⲆΔ, ka, "inline-block");
        }
      }
    }
    function V() {
      K();
      if (Nx % 2) {
        console.log(undefined);
        ⲆᐃⲆᐃ.connect();
      } else {
        console.log(undefined);
        if (e.Widget.isBlocked === 1) {
          e.Widget.createAdPlayer(ⲆᐃⲆᐃ.connect.bind(ⲆᐃⲆᐃ), ⲆᐃⲆᐃ.connect.bind(ⲆᐃⲆᐃ));
        } else {
          e.Widget.preroll();
          e.Widget.play = ⲆᐃⲆᐃ.connect.bind(ⲆᐃⲆᐃ);
        }
      }
    }
    function Y(a) {
      if (Dx.ΔᐃᐃΔⵠΔⵠ !== undefined && Dx.ⵠᐃᐃⲆᐃΔⵠ !== undefined && Dx.ⵠΔⵠᐃᐃⵠⲆ !== undefined) {
        a();
      }
    }
    function Z(a, b, c) {
      const d = new XMLHttpRequest();
      d.open("GET", a);
      d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      d.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          if (b !== Cr) {
            b(d.responseText);
          }
        } else if (this.readyState == 4 && zo !== c) {
          c();
        }
      };
      d.send();
    }
    this.ΔΔⲆᐃⵠⲆΔ = 0;
    this.ΔΔⵠΔ = U;
    this.ⲆⵠⲆⲆΔΔΔ = function (b, a) {
      let c = "0";
      let d = 0;
      if (Xx) {
        c = Xx + Lr.ᐃⵠⵠⲆⵠⵠΔ();
      }
      if (Dx.ΔᐃᐃΔⵠΔⵠ) {
        Y(b);
      } else {
        Z(`${Qx}token?id=${c}`, function (c) {
          if (d === 1) {
            return;
          }
          const f = c.split("_");
          const g = f[0] + "_";
          const h = Number(f[1]);
          const a = Math.abs(function (a) {
            return Cn(a, 8260, 46947, 8004, 37330, 5330);
          }(h));
          Dx.ΔᐃᐃΔⵠΔⵠ = g + a;
          Y(b);
        }, function () {
          if (d !== 1) {
            if (a === 1) {
              d = 1;
              b();
              return;
            } else {
              A.waiting = false;
              return;
            }
          }
        });
      }
      Z(`${Rx}get`, function (c) {
        if (d === 1) {
          return;
        }
        const f = c.split("_");
        const g = f[0] + "_";
        const h = Number(f[1]);
        const a = Math.abs(function (a) {
          return rs(a, 38163, 1479);
        }(h));
        Dx.ⵠᐃᐃⲆᐃΔⵠ = g + a;
        Dx.ᐃⵠᐃᐃⲆΔᐃ = a;
        Y(b);
      }, function () {
        if (d !== 1) {
          if (a === 1) {
            d = 1;
            b();
            return;
          } else {
            A.waiting = false;
            return;
          }
        }
      });
      Z(`${Rx}set`, function (c) {
        if (d === 1) {
          return;
        }
        const f = c.split("_");
        const g = f[0] + "_";
        const h = Number(f[1]);
        const a = Math.abs(Sk(h));
        Dx.ⵠΔⵠᐃᐃⵠⲆ = g + a;
        Dx.ᐃⲆᐃⲆᐃΔⵠⵠⵠ = a;
        Y(b);
      }, function () {
        if (d !== 1) {
          if (a === 1) {
            d = 1;
            b();
            return;
          } else {
            A.waiting = fg;
            return;
          }
        }
      });
    };
    this.ᐃᐃᐃⲆⵠΔᐃ = function () {
      if (A.waiting === Ml) {
        Dx.reconnect.enabled = false;
        A.waiting = ct;
        A.ⲆⵠⲆⲆΔΔΔ(V);
      }
    };
    var _ = 1;
    var aa = 2;
    var ca = 4;
    var da = 8;
    var ea = 16;
    var fa = 32;
    var ha = 0;
    var ia = 1;
    var ja = 0;
    var ka = 1;
    if (e.innerWidth < 1300) {
      this.ⲆⵠΔᐃΔ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ka,
        position: ca | _,
        view: H,
        translate: {
          y: 0,
          ⲆⵠⲆᐃⲆ: 184,
          ⵠΔΔⲆⵠ: 200,
          x: 0
        }
      };
    } else {
      this.ⲆⵠΔᐃΔ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ka,
        position: ca | ea,
        view: H,
        translate: {
          x: 0,
          ⵠΔΔⲆⵠ: -180,
          ⲆⵠⲆᐃⲆ: 184,
          y: 0
        }
      };
    }
    this.ⲆⵠΔᐃΔ.id.addEventListener("keyup", function (a) {
      a.preventDefault();
      if (a.keyCode == 13 && !A.waiting && !A.ⵠᐃΔⲆⵠⵠᐃⲆⲆ) {
        A.ᐃᐃᐃⲆⵠΔᐃ();
      }
    });
    this.ⲆⵠΔᐃΔ.input.value = ⲆᐃᐃΔ.get("starve_nickname") ? ⲆᐃᐃΔ.get("starve_nickname") : "";
    this.ΔⵠᐃⵠΔᐃᐃⵠⲆ = {
      id: document.getElementById("account_nickname_block"),
      style: document.getElementById("account_nickname_block").style,
      input: document.getElementById("account_nickname_input"),
      active: ja,
      position: ca | ea,
      view: d,
      translate: {
        x: 0,
        y: 0,
        ⵠΔΔⲆⵠ: -122,
        ⲆⵠⲆᐃⲆ: 110
      }
    };
    if (e.innerWidth < 1300) {
      this.ⵠⵠΔⲆΔ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ka,
        position: ca | _,
        view: H,
        translate: {
          ⵠΔΔⲆⵠ: 208,
          x: 0,
          y: 0,
          ⲆⵠⲆᐃⲆ: 225
        }
      };
    } else {
      this.ⵠⵠΔⲆΔ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ka,
        position: ca | ea,
        view: H,
        translate: {
          y: 0,
          x: 0,
          ⲆⵠⲆᐃⲆ: 225,
          ⵠΔΔⲆⵠ: -180
        }
      };
    }
    this.ⵠΔᐃⲆ = {
      id: document.getElementById("leaderboard"),
      style: document.getElementById("leaderboard").style,
      active: ja,
      position: ca | ea,
      view: C,
      translate: {
        x: 0,
        y: 0,
        ⲆⵠⲆᐃⲆ: 190,
        ⵠΔΔⲆⵠ: -294.5
      }
    };
    this.ⵠⲆᐃⵠⵠᐃΔΔΔ = {
      id: document.getElementById("stats_box"),
      style: document.getElementById("stats_box").style,
      active: ja,
      position: ca | ea,
      view: d,
      translate: {
        ⵠΔΔⲆⵠ: 125,
        x: 0,
        y: 0,
        ⲆⵠⲆᐃⲆ: 187
      }
    };
    this.ⲆⵠⲆⲆⵠⵠᐃⲆⲆ = {
      id: document.getElementById("serverAddressBlock"),
      style: document.getElementById("serverAddressBlock").style,
      input: document.getElementById("serverAddressInput"),
      active: ja,
      position: ca | ea,
      view: O,
      translate: {
        y: 0,
        ⲆⵠⲆᐃⲆ: 350,
        ⵠΔΔⲆⵠ: -220,
        x: 0
      }
    };
    u = 0;
    this.ᐃⲆᐃᐃⲆ = [];
    this.ᐃⲆᐃᐃⲆ[u++] = this.ⲆⵠΔᐃΔ;
    this.ᐃⲆᐃᐃⲆ[u++] = this.ⵠⵠΔⲆΔ;
    this.ᐃⲆᐃᐃⲆ[u++] = this.ⵠΔᐃⲆ;
    this.ᐃⲆᐃᐃⲆ[u++] = this.ΔⵠᐃⵠΔᐃᐃⵠⲆ;
    this.ᐃⲆᐃᐃⲆ[u++] = this.ⵠⲆᐃⵠⵠᐃΔΔΔ;
    this.ᐃⲆᐃᐃⲆ[u++] = this.ⲆⵠⲆⲆⵠⵠᐃⲆⲆ;
    u = 0;
    this.ⵠⵠΔᐃ = [];
    this.ⵠⵠΔᐃ[u++] = cf(Δᐃ.ΔⲆᐃⲆᐃⲆⲆ, ka, 0, 0, _);
    this.ⵠⵠΔᐃ[u++] = cf(Δᐃ.ⵠⲆⲆⵠⲆΔΔ, ja, 0, 0, _);
    this.ⵠⵠΔᐃ[u++] = cf(Δᐃ.ⲆⵠᐃᐃⵠⲆΔ, ja, 0, 0, _);
    this.ⵠⵠΔᐃ[u++] = cf(Δᐃ.ⵠⵠⵠᐃᐃⲆⵠ, ja, 0, 0, _);
    this.ⵠⵠΔᐃ[u++] = cf(Δᐃ.ⲆⲆⵠΔΔᐃΔ, ja, 0, 0, _);
    this.ⵠⵠΔᐃ[u++] = cf(Δᐃ.ⲆΔΔⲆⲆⵠΔ, ja, 0, 0, _);
    this.ⵠⵠΔᐃ[u++] = cf(Δᐃ.ⵠⲆⵠΔΔᐃⵠ, ja, 0, 0, _);
    this.ⵠⵠΔᐃ[u++] = cf(Δᐃ.ΔⲆⵠⲆᐃΔⵠ, ja, 0, 0, _);
    this.ⵠⵠΔᐃ[u++] = cf(Δᐃ.ⲆⵠⲆⲆⵠᐃⲆ, ja, 0, 0, _);
    this.ⵠⵠΔᐃ[u++] = cf(Δᐃ.ⵠᐃⲆᐃΔⵠⲆ, ja, 0, 0, _);
    this.ⵠⵠΔᐃ[u++] = cf(Δᐃ.ⵠΔΔⲆᐃᐃΔ, ja, 0, 0, _);
    this.ⵠⵠΔᐃ[u++] = cf(Δᐃ.ΔᐃᐃⵠⵠⵠⲆ, ja, 0, 0, _);
    this.ⵠⵠΔᐃ[u++] = cf(Δᐃ.ⵠⵠΔⲆΔⵠΔ, ja, 0, 0, _);
    this.ⵠⵠΔᐃ[u++] = cf(Δᐃ.ⵠΔⵠΔΔΔⵠ, ja, 0, 0, _);
    this.ⵠⵠΔᐃ[u++] = cf(Δᐃ.ⵠᐃΔⲆΔᐃⵠ, ja, 0, 0, _);
    this.ⵠⵠΔᐃ[u++] = cf(Δᐃ.ΔᐃᐃⲆⵠΔΔ, ja, 0, 0, _);
    this.ⵠⵠΔᐃ[u++] = cf(Δᐃ.ⲆⵠΔⵠΔⲆΔ, ja, 0, 0, _);
    this.ⵠⵠΔᐃ[u++] = cf(Δᐃ.ΔᐃᐃⲆᐃΔⵠ, ja, 0, 0, _);
    this.ⵠⵠΔᐃ[u++] = cf(Δᐃ.ⲆⲆⵠΔⲆΔⵠ, ja, 0, 0, _);
    if (e.innerWidth < 1300) {
      this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ⲆᐃΔᐃᐃⲆⲆ, ka, 200, 100, ca | _);
    } else {
      this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ⲆᐃΔᐃᐃⲆⲆ, ka, -753 / 4, 100, ca | ea);
    }
    this.ⵠⵠΔᐃ[u++].view = H;
    this.ⵠⵠΔᐃ[u++] = cf(Δᐃ.ⲆᐃᐃⵠΔᐃⵠ, ka, 403, -10, aa);
    if (e.innerWidth > 1300) {
      this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ᐃⲆᐃⲆⵠᐃΔ, ka, -885 / 4, -319 / 2, da | ea);
      this.ⵠⵠΔᐃ[u++].view = H;
    }
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ⵠⲆᐃΔΔΔᐃ, ja, -323.25, 100, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = d;
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ΔᐃⲆⵠΔᐃⲆ, ja, -1425 / 4, 100, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = c;
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ᐃΔⲆᐃΔⲆᐃ, ja, -905 / 4, 50, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = v;
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ⲆⵠⲆΔⲆⵠⲆ, ja, -402, 130, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = m;
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ΔⲆⵠΔᐃⵠⵠ, ja, -1117 / 4, 130, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = j;
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ΔᐃᐃⵠᐃΔⲆ, ja, -305.5, 130, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = W;
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ΔⵠᐃᐃⵠⲆⲆ, ja, -1222 / 4, 100, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = O;
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ⵠⲆᐃⲆᐃⲆⵠ, ja, -Δᐃ.ⵠⲆᐃⲆᐃⲆⵠ.width / 4 - 350, -15, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = N;
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ⲆⵠᐃⵠΔᐃᐃ, ja, -374.25, 110, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = p;
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ⲆΔⲆΔⵠⵠΔ, ja, -1226 / 4, 100, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = C;
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ⲆΔᐃᐃᐃⲆⵠ, ja, -1381 / 4, 80, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = L;
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ᐃⲆⲆᐃΔΔⵠ, ja, -1542 / 4, 150, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = T;
    var la = 360 / 100;
    var ma = this.ⲆΔᐃⵠⲆΔⵠ([["#25c5d6", la * 3], ["#e2cf27", la * 10], ["#afac98", la * 30], ["#d88e23", la * 57]]);
    this.ⵠⵠΔᐃ[u] = cf(ma, ja, -ma.width / 4, 178, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = T;
    this.ⵠᐃΔⲆᐃⵠⲆⵠⵠ = function (b, c, d) {
      var f;
      A.ᐃᐃⵠᐃⵠ = 1;
      A.ⲆΔⲆⲆⲆᐃⲆ = 0;
      A.ΔΔΔΔⲆΔΔ = 0;
      A.ΔΔᐃⵠⲆⵠᐃ = b;
      A.ΔⵠⲆᐃⵠⲆᐃ = c;
      var g = 0;
      if (c === 0) {
        for (g = 0; g < ⲆⲆⲆⵠ.ⵠΔⵠⵠᐃ.length && ⲆⲆⲆⵠ.ⵠΔⵠⵠᐃ[g].id !== d; g++);
        f = ⲆⲆⲆⵠ.ⵠΔⵠⵠᐃ[g];
        A.unlock.ⵠΔᐃⵠ[g] = 1;
      } else if (c === 1) {
        for (g = 0; ⲆⲆⲆⵠ.ΔⲆⲆΔⲆ.length > g && ⲆⲆⲆⵠ.ΔⲆⲆΔⲆ[g].id !== d; g++);
        f = ⲆⲆⲆⵠ.ΔⲆⲆΔⲆ[g];
        A.unlock.ΔⵠΔΔⵠ[g] = 1;
      } else if (c === 2) {
        for (g = 0; ⲆⲆⲆⵠ.Ⲇⵠᐃⵠ.length > g && d !== ⲆⲆⲆⵠ.Ⲇⵠᐃⵠ[g].id; g++);
        f = ⲆⲆⲆⵠ.Ⲇⵠᐃⵠ[g];
        A.unlock.ᐃⲆⲆΔⲆ[g] = 1;
      } else if (c === 3) {
        for (g = 0; g < ⲆⲆⲆⵠ.ⲆᐃⵠⲆᐃ.length && ⲆⲆⲆⵠ.ⲆᐃⵠⲆᐃ[g].id !== d; g++);
        f = ⲆⲆⲆⵠ.ⲆᐃⵠⲆᐃ[g];
        A.unlock.ΔⵠᐃᐃΔ[g] = 1;
      } else if (c === 4) {
        for (g = 0; g < ⲆⲆⲆⵠ.ΔΔⵠΔⵠ.length && ⲆⲆⲆⵠ.ΔΔⵠΔⵠ[g].id !== d; g++);
        f = ⲆⲆⲆⵠ.ΔΔⵠΔⵠ[g];
        A.unlock.ΔⲆᐃΔΔ[g] = 1;
        A.unlock.ᐃⵠΔΔⲆ[g] = 1;
      }
      A.ⵠⲆⲆⲆᐃΔΔ = g;
      A.ᐃⵠⵠⵠⲆⲆⵠ = df("by " + f.ᐃⲆⵠ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, xh, 30, 24, kn, undefined, undefined, ur, "#000000", 24);
      A.ⲆⲆⲆΔⲆΔᐃ = df(f.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, fk, 30, 24, undefined, undefined, cq, undefined, "#000000", 20);
    };
    this.ᐃᐃⵠᐃⵠ = 0;
    this.ⲆΔⲆⲆⲆᐃⲆ = 0;
    this.ΔΔᐃⵠⲆⵠᐃ = 0;
    this.ΔⵠⲆᐃⵠⲆᐃ = 0;
    this.ΔΔΔΔⲆΔΔ = 0;
    this.ᐃⵠⵠⵠⲆⲆⵠ = Ma;
    this.ⲆⲆⲆΔⲆΔᐃ = undefined;
    var na = 197;
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ΔᐃΔᐃⵠΔⵠ, ja, -385.5, 150, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = M;
    ma = this.ⲆΔᐃⵠⲆΔⵠ([["#d45ce5", la * 3], ["#25c5d6", la * 10], ["#e2cf27", la * 30], ["#afac98", la * 57]]);
    this.ⵠⵠΔᐃ[u] = cf(ma, ja, -ma.width / 4, 178, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = M;
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ⲆⵠⵠΔⲆᐃⵠ, ja, -385.5, 150, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = x;
    ma = this.ⲆΔᐃⵠⲆΔⵠ([["#d33a2a", la * 3], ["#d45ce5", la * 10], ["#25c5d6", la * 30], ["#e2cf27", la * 57]]);
    this.ⵠⵠΔᐃ[u] = cf(ma, ja, -ma.width / 4, 178, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = x;
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ΔᐃᐃⵠⲆΔⵠ, ja, -1542 / 4, 150, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = J;
    ma = this.ⲆΔᐃⵠⲆΔⵠ([["#25c5d6", la * 3], ["#e2cf27", la * 10], ["#afac98", la * 30], ["#d88e23", la * 57]]);
    this.ⵠⵠΔᐃ[u] = cf(ma, ja, -ma.width / 4, 178, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = J;
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ΔⲆΔⲆᐃⵠᐃ, ja, -385.5, 150, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = k;
    ma = this.ⲆΔᐃⵠⲆΔⵠ([["#d45ce5", la * 3], ["#25c5d6", la * 10], ["#e2cf27", la * 30], ["#afac98", la * 57]]);
    this.ⵠⵠΔᐃ[u] = cf(ma, ja, -ma.width / 4, 178, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = k;
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ⲆΔⲆᐃⵠᐃⵠ, ja, -385.5, 150, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = D;
    ma = this.ⲆΔᐃⵠⲆΔⵠ([["#d33a2a", la * 3], ["#d45ce5", la * 10], ["#25c5d6", la * 30], ["#e2cf27", la * 57]]);
    this.ⵠⵠΔᐃ[u] = cf(ma, ja, -ma.width / 4, 178, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = D;
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ⲆⵠⲆΔⲆΔΔ, ja, -341.5, 100, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = I;
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ⲆΔⲆⵠᐃᐃⲆ, ja, -1366 / 4, 100, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = X;
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ⵠⵠⵠΔⵠⲆⵠ, ja, -1366 / 4, 100, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = S;
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ΔⵠⲆⵠΔΔᐃ, ja, -341.5, 100, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = Q;
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ⲆᐃᐃⲆΔᐃⲆ, ja, -341.5, 100, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = E;
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ⵠⲆΔΔᐃⲆⵠ, ja, -341.5, 100, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = F;
    ⲆΔⵠⲆΔⲆⵠ = u++;
    this.ⵠⵠΔᐃ[ⲆΔⵠⲆΔⲆⵠ] = cf(Δᐃ.ⲆΔⵠⲆΔⲆⵠ, ja, 484, 0, ca);
    ⲆⲆⵠΔΔⵠⵠ = u++;
    this.ⵠⵠΔᐃ[ⲆⲆⵠΔΔⵠⵠ] = cf(Δᐃ.ⲆⲆⵠΔΔⵠⵠ, ja, 812.5, 0, ca);
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ⵠᐃΔⲆᐃᐃᐃ, ja, -758 / 4, -5, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = y;
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ᐃΔⲆΔΔⵠΔ, ja, -758 / 4, -5, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = f;
    ⵠⲆⲆⲆᐃⲆΔ = u++;
    this.ⵠⵠΔᐃ[ⵠⲆⲆⲆᐃⲆΔ] = cf(Δᐃ.ΔⲆΔⲆΔⲆᐃ, ka, 93, 30, ca);
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ᐃⲆⲆⲆⵠⵠⵠ, ja, -173, 110, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = R;
    this.ⵠⵠΔᐃ[u] = cf(Δᐃ.ᐃⵠᐃᐃⲆⲆᐃ, ja, -173, 110, ca | ea);
    this.ⵠⵠΔᐃ[u++].view = G;
    u = 0;
    this.buttons = [];
    this.buttons[u] = bf(50, 57, 0, [Δᐃ.ᐃΔⵠΔΔⲆΔ, Δᐃ.ΔⵠΔΔᐃΔΔ, Δᐃ.ⲆⲆⵠⲆⲆΔᐃ], 1, ha, function () {
      if (A.ⵠΔⲆⵠⵠ()) {
        U(L);
      } else {
        U(v);
      }
    }, 320, 0, _, ka);
    u++;
    if (e.innerWidth < 1300) {
      this.buttons[u] = bf(202, 97, 0, [Δᐃ.ⵠΔⲆⵠⵠᐃⲆ, Δᐃ.ᐃΔⲆᐃⲆᐃⵠ, Δᐃ.ⵠᐃΔⲆᐃᐃⵠ], 1, ha, this.ᐃᐃᐃⲆⵠΔᐃ, 462, 235, ca | _, ka);
    } else {
      this.buttons[u] = bf(202, 97, 0, [Δᐃ.ⵠΔⲆⵠⵠᐃⲆ, Δᐃ.ᐃΔⲆᐃⲆᐃⵠ, Δᐃ.ⵠᐃΔⲆᐃᐃⵠ], 1, ha, this.ᐃᐃᐃⲆⵠΔᐃ, 74, 235, ca | ea, ka);
    }
    this.buttons[u].view = H;
    u++;
    if (e.innerWidth > 1300) {
      this.buttons[u] = bf(355, 168, 0, [Δᐃ.ΔⵠⲆᐃᐃⲆⲆ, Δᐃ.ΔⵠⲆᐃᐃⲆⲆ, Δᐃ.ΔⵠⲆᐃᐃⲆⲆ], 1, ha, function () {
        e.open("./changelog.html", "_blank");
      }, -195, -115, da | ea, ka);
      this.buttons[u++].view = H;
      this.buttons[u] = bf(355, 168, 0, [Δᐃ.ΔᐃᐃⲆⵠΔᐃ, Δᐃ.ΔᐃᐃⲆⵠΔᐃ, Δᐃ.ΔᐃᐃⲆⵠΔᐃ], 1, ha, function () {
        e.open("https://taming.io", "_blank");
      }, 20, -115, da | ea, ka);
      this.buttons[u++].view = H;
    }
    this.buttons[u++] = bf(80, 80, 0, [Δᐃ.ⵠⵠᐃΔᐃΔⵠ, Δᐃ.ᐃΔᐃΔᐃᐃⲆ, Δᐃ.ᐃᐃⵠᐃⲆⲆΔ], 1, ha, function () {
      e.open("https://lapamauve.creator-spring.com/", "_blank");
    }, 380, 10, aa, ka);
    this.buttons[u++] = bf(80, 80, 0, [Δᐃ.ⵠᐃⵠⵠⵠⲆⵠ, Δᐃ.ⵠⵠⵠΔⵠΔᐃ, Δᐃ.ᐃΔΔⲆᐃⲆⲆ], 1, ha, function () {
      e.open("https://discord.gg/starveio", "_blank");
    }, 330, 10, aa, ka);
    this.buttons[u++] = bf(80, 80, 0, [Δᐃ.ΔⲆΔΔⵠᐃΔ, Δᐃ.ⲆⵠΔⵠᐃⲆⲆ, Δᐃ.ⵠᐃⵠⲆΔⲆⲆ], 1, ha, function () {
      e.open("https://reddit.com/r/starveio", "_blank");
    }, 280, 10, aa, ka);
    this.buttons[u++] = bf(80, 80, 0, [Δᐃ.ⲆⵠⲆⵠᐃᐃᐃ, Δᐃ.ⲆΔΔⵠΔΔᐃ, Δᐃ.ⲆΔⲆΔⲆⵠⵠ], 1, ha, function () {
      e.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, 230, 10, aa, ka);
    this.buttons[u++] = bf(80, 80, 0, [Δᐃ.ΔΔⲆⵠᐃⲆᐃ, Δᐃ.ⲆⲆⲆⲆⵠᐃΔ, Δᐃ.ⵠⲆⵠⵠⲆⵠⲆ], 1, ha, function () {
      e.open("https://www.facebook.com/LapaMauve/", "_blank");
    }, 155, 10, aa, ka);
    this.buttons[u++] = bf(80, 80, 0, [Δᐃ.ⵠᐃⵠΔⲆⵠΔ, Δᐃ.ᐃⲆⲆᐃΔⲆⵠ, Δᐃ.ⵠΔΔᐃⲆΔⲆ], 1, ha, function () {
      e.open("https://twitter.com/lapamauve", "_blank");
    }, 105, 10, aa, ka);
    this.buttons[u++] = bf(80, 80, 0, [Δᐃ.ⲆⵠᐃⲆΔⵠᐃ, Δᐃ.Ⲇⵠᐃᐃⵠⵠⵠ, Δᐃ.ⲆᐃᐃᐃᐃⲆⵠ], 1, ha, function () {
      e.open("https://www.youtube.com/@lapamauveofficial", "_blank");
    }, 55, 10, aa, ka);
    ⵠᐃⲆⲆⵠᐃΔ = u++;
    this.buttons[ⵠᐃⲆⲆⵠᐃΔ] = bf(232, 142, 0, [Δᐃ.ⲆⲆΔᐃΔΔΔ, Δᐃ.ΔⵠΔⲆΔⲆΔ, Δᐃ.ⵠⵠᐃᐃΔⵠΔ], 1, ha, function () {
      U(C);
      my(zx.ΔⲆΔΔΔⲆⲆ, zx.ⲆⵠᐃΔⲆᐃᐃ, zx.ΔΔⵠΔΔⲆⵠ, zx.ⲆΔᐃᐃⵠΔᐃ);
    }, -5, 573, _, ka);
    this.buttons[u++] = bf(236, 165, 0, [Δᐃ.ΔⵠᐃⵠⵠⲆⵠ, Δᐃ.ΔⵠᐃⵠⵠⲆⵠ, Δᐃ.ΔⵠᐃⵠⵠⲆⵠ], 1, ia, function () {
      U(C);
    }, -5, 566, _, ka);
    ᐃΔΔⲆⵠΔⵠ = u++;
    this.buttons[ᐃΔΔⲆⵠΔⵠ] = bf(236, 165, 0, [Δᐃ.ⵠᐃⵠΔᐃⲆⲆ, Δᐃ.ᐃⵠΔΔⵠᐃᐃ, Δᐃ.ⵠⵠᐃⲆᐃⲆⵠ], 1, ha, function () {
      U(p);
    }, -5, 494, _, ka);
    this.buttons[u++] = bf(236, 165, 0, [Δᐃ.ⲆΔᐃⲆⵠΔⲆ, Δᐃ.ⲆΔᐃⲆⵠΔⲆ, Δᐃ.ⲆΔᐃⲆⵠΔⲆ], 1, ia, function () {
      U(p);
    }, -5, 494, _, ka);
    ⵠⲆΔᐃΔⵠⵠ = u++;
    this.buttons[ⵠⲆΔᐃΔⵠⵠ] = bf(236, 165, 0, [Δᐃ.ⵠᐃⵠΔᐃⲆⲆ, Δᐃ.ᐃⵠΔΔⵠᐃᐃ, Δᐃ.ⵠⵠᐃⲆᐃⲆⵠ], 1, ha, function () {
      if (A.ⵠΔⲆⵠⵠ()) {
        if (zx.ᐃⲆᐃΔⲆⵠⲆ - Date.now() > 0) {
          U(O);
        } else {
          U(j);
        }
      } else {
        U(v);
      }
    }, -5, 415, _, ka);
    this.buttons[u++] = bf(236, 165, 0, [Δᐃ.ⲆⵠᐃⵠᐃⵠⲆ, Δᐃ.ⲆⵠᐃⵠᐃⵠⲆ, Δᐃ.ⲆⵠᐃⵠᐃⵠⲆ], 1, ia, function () {
      if (A.ⵠΔⲆⵠⵠ()) {
        if (zx.ᐃⲆᐃΔⲆⵠⲆ - Date.now() > 0) {
          U(O);
        } else {
          U(j);
        }
      } else {
        U(v);
      }
    }, -5, 415, _, ka);
    ΔᐃⵠᐃᐃⲆΔ = u++;
    this.buttons[ΔᐃⵠᐃᐃⲆΔ] = bf(236, 165, 0, [Δᐃ.ⵠᐃⵠΔᐃⲆⲆ, Δᐃ.ᐃⵠΔΔⵠᐃᐃ, Δᐃ.ⵠⵠᐃⲆᐃⲆⵠ], 1, ha, function () {
      U(m);
    }, -5, 336, _, ka);
    this.buttons[u++] = bf(236, 165, 0, [Δᐃ.ᐃⲆⲆⵠᐃⲆⲆ, Δᐃ.ᐃⲆⲆⵠᐃⲆⲆ, Δᐃ.ᐃⲆⲆⵠᐃⲆⲆ], 1, ia, function () {
      U(m);
    }, -5, 336, _, ka);
    ᐃᐃⵠⲆⲆⵠⲆ = u++;
    this.buttons[ᐃᐃⵠⲆⲆⵠⲆ] = bf(236, 165, 0, [Δᐃ.ⵠᐃⵠΔᐃⲆⲆ, Δᐃ.ᐃⵠΔΔⵠᐃᐃ, Δᐃ.ⵠⵠᐃⲆᐃⲆⵠ], 1, ha, function () {
      U(c);
    }, -5, 257, _, ka);
    this.buttons[u++] = bf(236, 165, 0, [Δᐃ.ⵠⵠΔⵠΔΔᐃ, Δᐃ.ⵠⵠΔⵠΔΔᐃ, Δᐃ.ⵠⵠΔⵠΔΔᐃ], 1, ia, function () {
      U(c);
    }, -5, 257, _, ka);
    ᐃⵠⲆΔⲆᐃⵠ = u++;
    this.buttons[ᐃⵠⲆΔⲆᐃⵠ] = bf(236, 165, 0, [Δᐃ.ⵠᐃⵠΔᐃⲆⲆ, Δᐃ.ᐃⵠΔΔⵠᐃᐃ, Δᐃ.ⵠⵠᐃⲆᐃⲆⵠ], 1, ha, function () {
      U(H);
    }, -5, 178, _, ka);
    this.buttons[u++] = bf(236, 165, 0, [Δᐃ.ⵠΔⲆΔⲆⵠⲆ, Δᐃ.ⵠΔⲆΔⲆⵠⲆ, Δᐃ.ⵠΔⲆΔⲆⵠⲆ], 1, ia, function () {
      U(H);
    }, -5, 178, _, ka);
    ⵠΔⵠᐃᐃᐃⵠ = u++;
    this.ⵠΔⵠᐃᐃᐃⵠ = ⵠΔⵠᐃᐃᐃⵠ;
    this.buttons[ⵠΔⵠᐃᐃᐃⵠ] = bf(324, 222, 0, [Δᐃ.ⲆⵠΔΔⲆΔᐃ, Δᐃ.ⵠⵠⲆⵠⲆⵠⵠ, Δᐃ.ᐃᐃⲆⲆⵠᐃⵠ], 1, ha, function () {
      U(v);
    }, 0, 70, _, ka);
    ⲆᐃΔⲆⲆᐃᐃ = u++;
    ⵠⲆΔⲆⲆΔⲆ = u++;
    this.ⲆᐃΔⲆⲆᐃᐃ = ⲆᐃΔⲆⲆᐃᐃ;
    this.ⵠⲆΔⲆⲆΔⲆ = ⵠⲆΔⲆⲆΔⲆ;
    this.buttons[ⲆᐃΔⲆⲆᐃᐃ] = bf(324, 222, 0, [Δᐃ.ΔᐃⵠΔᐃᐃⲆ, Δᐃ.ΔⵠΔΔⵠᐃⲆ, Δᐃ.ᐃⵠⲆⲆⵠⲆⲆ], 1, ha, function () {
      U(d);
      ua(-1);
    }, 0, 70, _, ja);
    this.buttons[ⵠⲆΔⲆⲆΔⲆ] = bf(324, 222, 0, [Δᐃ.Δᐃⵠᐃᐃᐃᐃ, Δᐃ.Δᐃⵠᐃᐃᐃᐃ, Δᐃ.Δᐃⵠᐃᐃᐃᐃ], 1, ia, function () {
      U(d);
      ua(-1);
    }, 0, 70, _, ja);
    if (ⲆᐃⲆᐃ.ΔⲆᐃΔⵠⲆⲆ === 0) {
      var oa = u++;
      if (e.innerWidth < 1300) {
        this.buttons[oa] = bf(266, 176, 0, [Δᐃ.ⲆᐃⲆⲆᐃⲆⲆ, Δᐃ.ᐃⵠⵠⲆⲆⲆᐃ, Δᐃ.ⲆΔⲆⲆΔⵠᐃ], 1, ha, function () {
          ⲆᐃⲆᐃ.ⲆⵠⵠΔⲆ(0);
        }, 150, 300, _ | ca, ka);
      } else {
        this.buttons[oa] = bf(266, 176, 0, [Δᐃ.ⲆᐃⲆⲆᐃⲆⲆ, Δᐃ.ᐃⵠⵠⲆⲆⲆᐃ, Δᐃ.ⲆΔⲆⲆΔⵠᐃ], 1, ha, function () {
          ⲆᐃⲆᐃ.ⲆⵠⵠΔⲆ(0);
        }, -340, 100, ea | ca, ka);
      }
      this.buttons[oa].view = H;
      this.buttons[oa].hint = 0;
      var pa = u++;
      if (e.innerWidth < 1300) {
        this.buttons[pa] = bf(266, 176, 0, [Δᐃ.ⲆⵠΔⵠᐃᐃΔ, Δᐃ.ⵠᐃΔⲆⲆⲆᐃ, Δᐃ.ⲆᐃⲆⲆΔⵠⵠ], 1, ha, function () {
          ⲆᐃⲆᐃ.ⲆⵠⵠΔⲆ(4);
        }, 150, 400, _ | ca, ka);
      } else {
        this.buttons[pa] = bf(266, 176, 0, [Δᐃ.ⲆⵠΔⵠᐃᐃΔ, Δᐃ.ⵠᐃΔⲆⲆⲆᐃ, Δᐃ.ⲆᐃⲆⲆΔⵠⵠ], 1, ha, function () {
          ⲆᐃⲆᐃ.ⲆⵠⵠΔⲆ(4);
        }, -340, 200, ea | ca, ka);
      }
      this.buttons[pa].view = H;
      this.buttons[pa].hint = 0;
      var qa = u++;
      if (e.innerWidth < 1300) {
        this.buttons[qa] = bf(266, 176, 0, [Δᐃ.ⵠⲆⲆᐃΔⵠⲆ, Δᐃ.ᐃⵠΔᐃΔⲆⲆ, Δᐃ.ⵠΔⵠΔΔⲆΔ], 1, ha, function () {
          ⲆᐃⲆᐃ.ⲆⵠⵠΔⲆ(6);
        }, 450, 300, _ | ca, ka);
      } else {
        this.buttons[qa] = bf(266, 176, 0, [Δᐃ.ⵠⲆⲆᐃΔⵠⲆ, Δᐃ.ᐃⵠΔᐃΔⲆⲆ, Δᐃ.ⵠΔⵠΔΔⲆΔ], 1, ha, function () {
          ⲆᐃⲆᐃ.ⲆⵠⵠΔⲆ(6);
        }, -340, 300, ea | ca, ka);
      }
      this.buttons[qa].view = H;
      this.buttons[qa].hint = 0;
      var ra = u++;
      if (e.innerWidth < 1300) {
        this.buttons[ra] = bf(266, 176, 0, [Δᐃ.ΔⲆⲆⵠⵠᐃⲆ, Δᐃ.ⲆᐃⵠΔⲆᐃⲆ, Δᐃ.ΔⵠΔᐃⵠⵠⲆ], 1, ha, function () {
          ⲆᐃⲆᐃ.ⲆⵠⵠΔⲆ(2);
        }, 300, 300, _ | ca, ka);
      } else {
        this.buttons[ra] = bf(266, 176, 0, [Δᐃ.ΔⲆⲆⵠⵠᐃⲆ, Δᐃ.ⲆᐃⵠΔⲆᐃⲆ, Δᐃ.ΔⵠΔᐃⵠⵠⲆ], 1, ha, function () {
          ⲆᐃⲆᐃ.ⲆⵠⵠΔⲆ(2);
        }, 204, 100, ea | ca, ka);
      }
      this.buttons[ra].view = H;
      this.buttons[ra].hint = 0;
      var sa = u++;
      if (e.innerWidth < 1300) {
        this.buttons[sa] = bf(266, 176, 0, [Δᐃ.ΔⵠⲆⵠⵠᐃⲆ, Δᐃ.ⵠⵠᐃⵠⵠⵠΔ, Δᐃ.ⲆⲆⵠⲆᐃᐃΔ], 1, ha, function () {
          ⲆᐃⲆᐃ.ⲆⵠⵠΔⲆ(3);
        }, 300, 400, _ | ca, ka);
      } else {
        this.buttons[sa] = bf(266, 176, 0, [Δᐃ.ΔⵠⲆⵠⵠᐃⲆ, Δᐃ.ⵠⵠᐃⵠⵠⵠΔ, Δᐃ.ⲆⲆⵠⲆᐃᐃΔ], 1, ha, function () {
          ⲆᐃⲆᐃ.ⲆⵠⵠΔⲆ(3);
        }, 204, 200, ea | ca, ka);
      }
      this.buttons[sa].view = H;
      this.buttons[sa].hint = 0;
      var ta = u++;
      this.buttons[ta] = bf(266, 176, 0, [Δᐃ.ᐃᐃᐃⵠⵠⵠΔ, Δᐃ.ᐃⲆΔⵠⵠᐃⲆ, Δᐃ.ⵠᐃⵠⲆⵠᐃⲆ], 1, ha, function () {
        ⲆᐃⲆᐃ.ⲆⵠⵠΔⲆ(7);
      }, e.innerWidth < 1300 ? 450 : 204, e.innerWidth < 1300 ? 400 : 300, (e.innerWidth < 1300 ? _ : ea) | ca, ka);
      this.buttons[ta].view = H;
      this.buttons[ta].hint = 0;
    }
    function ua(b, c) {
      if (kn !== c) {
        zx.ⵠⵠΔⲆΔΔⲆ = c;
        var d = zx.ᐃΔⵠⵠᐃᐃᐃ[c];
        zx.ⲆⲆⲆⲆⲆ = d.score;
        zx.ⵠⲆΔᐃΔ = d.kill;
        zx.ⲆⲆⲆᐃΔᐃⲆ = d.death;
        zx.time = d.time;
        zx.ⵠⲆᐃⵠⲆᐃᐃ = d.bestScore;
        zx.ⲆᐃⲆᐃΔᐃⵠ = d.bestKill;
        zx.ᐃᐃᐃⵠᐃⵠⵠ = d.bestTime;
        zx.ᐃΔᐃᐃⵠⲆᐃ = d.scoreTotal;
      }
      if (or === b) {
        b = zx.ⲆⵠΔᐃΔᐃᐃ;
      }
      zx.ⲆⵠΔᐃΔᐃᐃ = b;
      if (b >= 0) {
        document.getElementById("stats_box_time").innerHTML = zx.ᐃᐃᐃⵠᐃⵠⵠ[b];
        document.getElementById("stats_box_kill").innerHTML = zx.ⲆᐃⲆᐃΔᐃⵠ[b];
        document.getElementById("stats_box_score").innerHTML = zx.ⵠⲆᐃⵠⲆᐃᐃ[b];
      } else {
        var f = 0;
        for (var g = 0; zx.ⵠⲆΔᐃΔ.length > g; g++) {
          f += zx.ⵠⲆΔᐃΔ[g];
        }
        var h = 0;
        for (g = 0; zx.time.length > g; g++) {
          h += zx.time[g];
        }
        document.getElementById("stats_box_time").innerHTML = h;
        document.getElementById("stats_box_kill").innerHTML = f;
        document.getElementById("stats_box_score").innerHTML = zx.ⲆⲆⲆⲆⲆ;
      }
    }
    this.buttons[u] = bf(87, 78, 0, [Δᐃ.ΔⵠΔⵠⲆⵠΔ, Δᐃ.ⵠⵠⵠΔⵠᐃⲆ, Δᐃ.ΔⵠᐃΔⵠⲆⵠ], 1, ha, function () {
      zx.ΔⵠᐃᐃᐃᐃᐃΔΔ();
      if (zx.ⵠⲆⲆΔΔᐃᐃ === 0) {
        U(G);
      } else {
        U(R);
      }
    }, 127, 110, ea | ca, ja);
    this.buttons[u++].view = d;
    this.buttons[u] = bf(87, 78, 0, [Δᐃ.ⵠᐃⵠⵠΔΔⲆ, Δᐃ.ⲆⵠⲆⵠᐃⵠΔ, Δᐃ.ⲆᐃⲆΔᐃⵠᐃ], 1, ha, function () {
      const a = e.document.createElement("textarea");
      a.value = Xx;
      e.document.body.appendChild(a);
      a.select();
      e.document.execCommand("copy");
      e.document.body.removeChild(a);
    }, 182, 110, ea | ca, ja);
    this.buttons[u++].view = d;
    this.buttons[u] = bf(87, 78, 0, [Δᐃ.ⵠΔΔΔⲆⵠΔ, Δᐃ.ΔΔΔⵠᐃⲆⵠ, Δᐃ.ⲆᐃⵠⲆⲆᐃⵠ], 1, ha, function () {
      (function () {
        if (Vx === Tx && e.FB && e.FB.getUserID()) {
          e.FB.logout();
        }
        if (Vx === Sx && ay !== Wn) {
          e.gapi.auth2.getAuthInstance().signOut();
          ay = or;
        }
        Xx = Ra;
        Wx = undefined;
        Vx = undefined;
        zx.Ⲇⵠⵠᐃⵠ = 0;
        zx.ⲆΔΔᐃⵠ = 0;
        zx.ⲆⲆⲆⲆⲆ = 0;
        zx.ⲆⲆⲆⵠⵠⵠⵠ();
        ᐃⵠᐃⵠΔΔⵠⵠⵠ();
      })();
    }, 255, 110, ea | ca, ja);
    this.buttons[u++].view = d;
    this.buttons[u] = bf(58, 64, 0, [Δᐃ.Ⲇⵠᐃⵠᐃᐃⵠ, Δᐃ.ᐃⵠⵠΔᐃᐃΔ, Δᐃ.ⵠΔΔⲆⲆᐃΔ], 1, ha, function () {
      U(H);
    }, 189, 118, ea | ca, ja);
    this.buttons[u++].view = v;
    this.buttons[u] = bf(497, 72, 0, [Δᐃ.ᐃⲆΔΔΔⲆᐃ, Δᐃ.ⲆᐃⲆᐃΔΔⵠ, Δᐃ.ᐃΔᐃᐃΔΔΔ], 1, ha, function () {
      (function () {
        if (Tf) {
          Wx = ΔⵠΔᐃ.ΔᐃⲆᐃⵠⵠⵠ(40);
          Vx = Ux;
          Xx = Tf.userId;
          e.ⲆⲆΔΔΔᐃⲆ();
          return;
        }
        e.gapi.auth2.getAuthInstance().signIn();
      })();
    }, -130, 390, ea | ca, ja);
    this.buttons[u++].view = v;
    this.buttons[u] = bf(497, 72, 0, [Δᐃ.ΔⵠⵠᐃⲆᐃᐃ, Δᐃ.ᐃⲆᐃᐃΔᐃⵠ, Δᐃ.ᐃⲆᐃΔᐃᐃΔ], 1, ha, function () {
      e.FB.login(function (a) {
        if (a.authResponse) {
          e.FB.api("/me", function (a) {
            Vx = Tx;
            Wx = e.FB.getAuthResponse().accessToken;
            ty();
            e.ⲆⲆΔΔΔᐃⲆ();
          });
        }
      });
    }, -130, 430, ea | ca, ja);
    this.buttons[u++].view = v;
    ⲆⲆⵠᐃⲆⵠⲆ = 20000;
    this.ⲆⵠᐃⵠⲆΔΔ = function (a) {
      var b = zx.ΔⲆⵠⲆΔΔⵠ(a);
      var c = ⲆⲆⵠᐃⲆⵠⲆ * (b * b);
      return (a -= c) / (ⲆⲆⵠᐃⲆⵠⲆ * ((b + 1) * (b + 1)) - c);
    };
    this.ΔⲆⵠⲆΔΔⵠ = function (a) {
      return Math.floor(Math.sqrt(a / ⲆⲆⵠᐃⲆⵠⲆ));
    };
    this.ⲆᐃΔΔΔΔⵠⵠⵠ = function (a) {
      zx.ⵠᐃⵠⵠⵠ = zx.ΔⲆⵠⲆΔΔⵠ(a);
      zx.ᐃⵠⵠΔⲆⲆⲆ = zx.ⲆⵠᐃⵠⲆΔΔ(a);
      zx.ᐃⵠΔⵠⲆⲆᐃ = 0;
      zx.ⲆⲆⲆⲆⲆ = a;
    };
    this.ΔΔⵠᐃΔⵠⵠⲆⲆ = function (a) {
      zx.buttons[zx.ⵠΔⵠᐃᐃᐃⵠ].info.active = 0;
      zx.buttons[zx.ⲆᐃΔⲆⲆᐃᐃ].info.active = 1;
      zx.buttons[zx.ⵠⲆΔⲆⲆΔⲆ].info.active = 1;
      n();
      if (a.name.indexOf("Starver#") === -1) {
        document.getElementById("account_nickname_input").value = e.decodeURIComponent(e.escape(e.atob(a.name)));
      } else {
        document.getElementById("account_nickname_input").value = a.name;
      }
      zx.ⲆΔΔᐃⵠ = a.bread;
      var b = a.seasons;
      var c = b[b.length - 1];
      zx.ᐃΔⵠⵠᐃᐃᐃ = b;
      A.ⲆᐃΔΔΔΔⵠⵠⵠ(c.score);
      zx.ⲆⲆⲆⲆⲆ = c.score;
      zx.ⵠⲆΔᐃΔ = c.kill;
      zx.ⲆⲆⲆᐃΔᐃⲆ = c.death;
      zx.time = c.time;
      zx.ⵠⲆᐃⵠⲆᐃᐃ = c.bestScore;
      zx.ⲆᐃⲆᐃΔᐃⵠ = c.bestKill;
      zx.ᐃᐃᐃⵠᐃⵠⵠ = c.bestTime;
      zx.ᐃΔᐃᐃⵠⲆᐃ = c.scoreTotal;
      zx.ⵠⲆⲆΔΔᐃᐃ = a.firstName;
      document.getElementById("serverAddressInput").value = a.privateServerRegion + " : " + a.privateServer;
      if (zx.ⵠⲆⲆΔΔᐃᐃ === Ao) {
        zx.ⵠⲆⲆΔΔᐃᐃ = 0;
      }
      zx.ᐃⲆᐃΔⲆⵠⲆ = Date.now() + a.privateServerTime;
      if (Number(a.privateServerTime) > 0) {
        zx.ᐃⲆᐃΔⲆⵠⲆ = Date.now() + Number(a.privateServerTime);
      }
      zx.Ⲇⵠⵠᐃⵠ = Date.now() + a.kit;
      if (Number(a.kit) > 0) {
        zx.Ⲇⵠⵠᐃⵠ = Date.now() + Number(a.kit);
      }
      var d = ⲆⲆⲆⵠ.ⵠΔⵠⵠᐃ;
      for (var f = 0; f < a.skins.length; f++) {
        if ((i = a.skins[f]) > 0) {
          for (var g = 0; g < d.length; g++) {
            if (d[g].id === f) {
              A.unlock.ⵠΔᐃⵠ[g] = 1;
            }
          }
        }
      }
      d = ⲆⲆⲆⵠ.ΔⲆⲆΔⲆ;
      f = 0;
      for (; f < a.accessories.length; f++) {
        var i = a.accessories[f];
        if (i > 0) {
          for (g = 0; g < d.length; g++) {
            if (d[g].id === f) {
              A.unlock.ΔⵠΔΔⵠ[g] = 1;
            }
          }
        }
      }
      d = ⲆⲆⲆⵠ.ⲆᐃⵠⲆᐃ;
      f = 0;
      for (; a.books.length > f; f++) {
        if ((i = a.books[f]) > 0) {
          for (g = 0; d.length > g; g++) {
            if (f === d[g].id) {
              A.unlock.ΔⵠᐃᐃΔ[g] = 1;
            }
          }
        }
      }
      d = ⲆⲆⲆⵠ.Ⲇⵠᐃⵠ;
      f = 0;
      for (; f < a.bags.length; f++) {
        if ((i = a.bags[f]) > 0) {
          for (g = 0; d.length > g; g++) {
            if (f === d[g].id) {
              A.unlock.ᐃⲆⲆΔⲆ[g] = 1;
            }
          }
        }
      }
      d = ⲆⲆⲆⵠ.ΔΔⵠΔⵠ;
      f = 0;
      for (; f < a.crates.length; f++) {
        i = a.crates[f];
        if (i > 0) {
          for (g = 0; g < d.length; g++) {
            if (d[g].id === f) {
              A.unlock.ΔⲆᐃΔΔ[g] = 1;
              A.unlock.ᐃⵠΔΔⲆ[g] = 1;
            }
          }
        }
      }
    };
    this.ΔᐃᐃⵠΔⵠⲆⵠⵠ = function () {
      e.ⲆⲆΔΔΔᐃⲆ = function () {
        U(H);
        (function (a) {
          var b = new XMLHttpRequest();
          b.open("GET", Qx + "login?token=" + Wx + "&type=" + Vx + (Tf ? "&userId=" + Tf.userId + "&userInfo=" + Tf.userInfo : ""));
          b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          b.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200 && b.responseText !== "0") {
              a(JSON.parse(b.responseText));
            }
          };
          b.send();
        })(A.ΔΔⵠᐃΔⵠⵠⲆⲆ);
      };
      if (Yx === 1) {
        e.ⲆⲆΔΔΔᐃⲆ();
      }
    };
    e.ᐃⵠᐃⵠΔΔⵠⵠⵠ = function () {
      zx.buttons[zx.ⵠΔⵠᐃᐃᐃⵠ].info.active = 1;
      zx.buttons[zx.ⲆᐃΔⲆⲆᐃᐃ].info.active = 0;
      zx.buttons[zx.ⵠⲆΔⲆⲆΔⲆ].info.active = 0;
      U(H);
    };
    this.ⵠΔⲆⵠⵠ = function () {
      return zx.buttons[zx.ⲆᐃΔⲆⲆᐃᐃ].info.active;
    };
    this.buttons[u] = bf(461, 105, 0, [Δᐃ.ⵠⵠᐃΔⲆΔⵠ, Δᐃ.ⵠⲆⲆΔⵠⵠΔ, Δᐃ.ᐃΔⵠⵠᐃⲆᐃ], 1, ha, function () {
      if (A.ⵠΔⲆⵠⵠ()) {
        U(L);
      } else {
        U(v);
      }
    }, -100, 80, ea | ca, ja);
    this.buttons[u++].view = m;
    this.buttons[u] = bf(157, 158, 0, [Δᐃ.ⲆⵠᐃⵠᐃⵠΔ, Δᐃ.ⲆⲆⲆⲆᐃΔΔ, Δᐃ.ⲆᐃΔⲆⲆᐃΔ], 1, ha, function () {
      e.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, -35, 125, ea | ca, ja);
    this.buttons[u++].view = p;
    this.buttons[u] = bf(66, 73, 0, [Δᐃ.ΔⲆΔⲆⲆⵠΔ, Δᐃ.ⲆΔⵠⲆⵠᐃΔ, Δᐃ.ⵠΔⲆᐃᐃΔᐃ], 1, ha, ur, -68, 340, ea | ca, ja);
    this.buttons[u++].view = p;
    this.buttons[u] = bf(66, 73, 0, [Δᐃ.ΔᐃⲆᐃⲆΔᐃ, Δᐃ.ΔΔΔⵠⲆᐃⵠ, Δᐃ.ᐃᐃⵠᐃΔⵠⵠ], 1, ha, Xj, -30, 340, ea | ca, ja);
    this.buttons[u++].view = p;
    this.ⲆⵠᐃⲆΔⵠⲆⲆᐃ = u;
    this.buttons[u] = bf(97, 66, 0, [Δᐃ.ΔᐃⵠΔΔᐃⵠ, Δᐃ.ⵠᐃⵠᐃⲆΔⵠ, Δᐃ.ⲆΔᐃΔᐃⵠΔ], 1, ha, function () {
      my(undefined, Cr, zx.ΔΔⵠΔΔⲆⵠ);
    }, -14, 151, ea | ca, ja);
    this.buttons[u++].view = C;
    this.ⵠᐃⲆⵠⲆⲆⲆ = u;
    this.buttons[u] = bf(135, 66, 0, [Δᐃ.ΔᐃⲆⲆⵠᐃΔ, Δᐃ.ΔᐃᐃᐃⵠⲆⲆ, Δᐃ.ⲆΔⲆΔΔΔΔ], 1, ha, function () {
      my(undefined, w, zx.ⵠᐃⲆⵠⲆⲆⲆ);
    }, 37.5, 151, ea | ca, ja);
    this.buttons[u++].view = C;
    this.ΔⲆΔᐃⵠⲆᐃ = u;
    this.buttons[u] = bf(160, 66, 0, [Δᐃ.ⵠΔⲆΔΔΔΔ, Δᐃ.ⲆΔⵠᐃᐃᐃⲆ, Δᐃ.ΔⵠⲆᐃⵠᐃᐃ], 1, ha, function () {
      my(ar, undefined, zx.ΔⲆΔᐃⵠⲆᐃ);
    }, 107.5, 151, ea | ca, ja);
    this.buttons[u++].view = C;
    this.ΔΔⵠΔΔⲆⵠ = u;
    this.buttons[u] = bf(207, 66, 0, [Δᐃ.ⲆΔⲆⲆⲆᐃᐃ, Δᐃ.ᐃΔⲆⲆΔⲆᐃ, Δᐃ.ⲆΔΔⵠΔⵠⵠ], 1, ha, function () {
      my(undefined, undefined, zx.ΔΔⵠΔΔⲆⵠ);
    }, 190.5, 151, ea | ca, ja);
    this.buttons[u++].view = C;
    this.ᐃⲆⲆᐃⲆΔⲆ = u;
    this.buttons[u] = bf(144, 66, 0, [Δᐃ.ⲆⲆΔᐃⵠⲆⲆ, Δᐃ.ⵠⵠⵠⲆⲆⵠΔ, Δᐃ.ⲆⵠᐃⵠΔⵠⲆ], 1, ha, function () {
      my(zx.ᐃⲆⲆᐃⲆΔⲆ);
    }, 103.5, 110, ea | ca, ja);
    this.buttons[u++].view = C;
    this.ⲆⵠⵠⵠΔΔΔ = u;
    this.buttons[u] = bf(124, 66, 0, [Δᐃ.ⵠᐃⲆⵠⵠᐃᐃ, Δᐃ.ⵠⵠΔᐃⵠᐃⵠ, Δᐃ.ⲆΔⲆᐃΔΔᐃ], 1, ha, function () {
      my(zx.ⲆⵠⵠⵠΔΔΔ);
    }, 177.5, 110, ea | ca, ja);
    this.buttons[u++].view = C;
    this.ΔⲆΔΔΔⲆⲆ = u;
    this.buttons[u] = bf(104, 66, 0, [Δᐃ.ΔᐃᐃⲆⵠⲆⵠ, Δᐃ.ΔⲆΔᐃΔⲆⲆ, Δᐃ.ΔᐃⲆΔⵠⵠΔ], 1, ha, function () {
      my(zx.ΔⲆΔΔΔⲆⲆ);
    }, 242, 110, ea | ca, ja);
    this.buttons[u++].view = C;
    this.ⲆⲆⵠⲆᐃⲆⵠ = u;
    this.buttons[u] = bf(46, 51, 0, [Δᐃ.ⵠΔⵠⲆᐃⲆᐃ, Δᐃ.ⲆⲆⲆⵠⲆᐃᐃ, Δᐃ.ᐃᐃⲆⲆⲆᐃⵠ], 1, ha, function () {
      my(ar, zo, Ao, zx.ⲆⲆⵠⲆᐃⲆⵠ);
    }, -185, 528, ea | ca, ja);
    this.buttons[u++].view = C;
    this.ⵠᐃΔΔΔⵠⲆ = u;
    this.buttons[u] = bf(46, 51, 0, [Δᐃ.ⵠⵠⲆⵠΔⲆⲆ, Δᐃ.ᐃΔⲆᐃⲆΔⵠ, Δᐃ.ΔⵠⲆᐃⵠΔⵠ], 1, ha, function () {
      my(undefined, wj, mk, zx.ⵠᐃΔΔΔⵠⲆ);
    }, -149, 528, ea | ca, ja);
    this.buttons[u++].view = C;
    this.ⲆⵠΔⲆᐃᐃⲆ = u;
    this.buttons[u] = bf(46, 51, 0, [Δᐃ.ᐃⵠᐃⲆᐃⲆⵠ, Δᐃ.ⵠⲆⲆⵠⵠⲆΔ, Δᐃ.ΔᐃⵠⵠᐃᐃΔ], 1, ha, function () {
      my(undefined, kn, undefined, zx.ⲆⵠΔⲆᐃᐃⲆ);
    }, -113, 528, ea | ca, ja);
    this.buttons[u++].view = C;
    this.ᐃᐃⲆᐃⲆΔΔ = u;
    this.buttons[u] = bf(46, 51, 0, [Δᐃ.ᐃⵠⵠΔᐃΔⲆ, Δᐃ.ΔⲆᐃⲆⲆΔⲆ, Δᐃ.ⵠⲆⲆⲆᐃΔⲆ], 1, ha, function () {
      my(undefined, undefined, undefined, zx.ᐃᐃⲆᐃⲆΔΔ);
    }, -77, 528, ea | ca, ja);
    this.buttons[u++].view = C;
    this.ᐃᐃⵠΔⵠⲆⲆ = u;
    this.buttons[u] = bf(46, 51, 0, [Δᐃ.ᐃΔⵠᐃᐃⲆⵠ, Δᐃ.ⵠⲆᐃⵠⵠΔⲆ, Δᐃ.ᐃⵠⵠⲆᐃⲆⵠ], 1, ha, function () {
      my(undefined, undefined, undefined, zx.ᐃᐃⵠΔⵠⲆⲆ);
    }, -41, 528, ea | ca, ja);
    this.buttons[u++].view = C;
    this.ⲆΔᐃᐃⵠΔᐃ = u;
    this.buttons[u] = bf(46, 51, 0, [Δᐃ.ⵠᐃΔⵠⲆⲆⲆ, Δᐃ.ΔᐃⵠΔΔᐃΔ, Δᐃ.ⲆⵠᐃΔΔⵠⵠ], 1, ha, function () {
      my(undefined, Wn, undefined, zx.ⲆΔᐃᐃⵠΔᐃ);
    }, -5, 528, ea | ca, ja);
    this.buttons[u++].view = C;
    this.buttons[u] = bf(232, 352, 0, [Δᐃ.ⲆⵠΔΔⵠΔⲆ, Δᐃ.ⵠᐃᐃⲆⵠΔᐃ, Δᐃ.ΔⵠᐃᐃⵠΔⲆ], 1, ha, function () {
      jy(300);
    }, -330, 135, ea | ca, ja);
    this.buttons[u++].view = L;
    this.buttons[u] = bf(232, 352, 0, [Δᐃ.ⲆⲆⲆΔᐃΔⲆ, Δᐃ.ΔᐃⵠⲆΔᐃΔ, Δᐃ.ⵠΔΔⲆΔⲆⲆ], 1, ha, function () {
      jy(600);
    }, -195, 135, ea | ca, ja);
    this.buttons[u++].view = L;
    this.buttons[u] = bf(243, 374, 0, [Δᐃ.ᐃᐃⲆⲆⵠΔᐃ, Δᐃ.ΔᐃⲆⲆⵠΔⲆ, Δᐃ.ⲆᐃⲆᐃᐃⲆⲆ], 1, ha, function () {
      jy(2600);
    }, -60, 130, ea | ca, ja);
    this.buttons[u++].view = L;
    this.buttons[u] = bf(232, 352, 0, [Δᐃ.ΔⲆᐃⲆᐃΔΔ, Δᐃ.ⲆⵠᐃΔᐃᐃⵠ, Δᐃ.ⵠⵠⵠⵠᐃᐃΔ], 1, ha, function () {
      jy(7000);
    }, 78, 135, ea | ca, ja);
    this.buttons[u++].view = L;
    this.buttons[u] = bf(243, 374, 0, [Δᐃ.ΔⵠᐃⲆΔΔΔ, Δᐃ.ΔⲆⲆᐃᐃⵠᐃ, Δᐃ.ⲆΔΔΔΔⵠᐃ], 1, ha, function () {
      jy(20000);
    }, 213, 130, ea | ca, ja);
    this.buttons[u++].view = L;
    this.buttons[u] = bf(58, 64, 0, [Δᐃ.Ⲇⵠᐃⵠᐃᐃⵠ, Δᐃ.ᐃⵠⵠΔᐃᐃΔ, Δᐃ.ⵠΔΔⲆⲆᐃΔ], 1, ha, function () {
      U(m);
    }, 300, 88, ea | ca, ja);
    this.buttons[u++].view = L;
    this.buttons[u] = bf(323, 112, 0, [Δᐃ.ⵠᐃⲆᐃⲆⲆⵠ, Δᐃ.ΔΔⵠΔⵠⵠΔ, Δᐃ.ᐃᐃΔᐃⵠⲆΔ], 1, ha, function () {
      U(I);
      Ga.ⵠⲆᐃⲆΔᐃⵠ();
    }, -315, 185, ea | ca, ja);
    this.buttons[u++].view = c;
    this.buttons[u] = bf(323, 112, 0, [Δᐃ.ᐃΔⲆⲆΔᐃⵠ, Δᐃ.ᐃᐃⲆΔⵠᐃΔ, Δᐃ.ⲆᐃᐃⲆᐃᐃⲆ], 1, ha, function () {
      U(X);
      Na.ⵠⲆᐃⲆΔᐃⵠ();
    }, -315, 321, ea | ca, ja);
    this.buttons[u++].view = c;
    this.buttons[u] = bf(323, 112, 0, [Δᐃ.ⲆⵠΔⵠⵠⲆᐃ, Δᐃ.ΔΔΔΔΔΔΔ, Δᐃ.ᐃⵠⲆᐃΔⲆᐃ], 1, ha, function () {
      U(S);
      Ha.ⵠⲆᐃⲆΔᐃⵠ();
    }, 153, 185, ea | ca, ja);
    this.buttons[u++].view = c;
    this.buttons[u] = bf(323, 112, 0, [Δᐃ.ΔᐃᐃΔⵠᐃΔ, Δᐃ.ΔᐃⲆΔΔⲆⲆ, Δᐃ.ΔⵠΔΔᐃΔᐃ], 1, ha, function () {
      U(Q);
      Ia.ⵠⲆᐃⲆΔᐃⵠ();
    }, 153, 321, ea | ca, ja);
    this.buttons[u++].view = c;
    this.buttons[u] = bf(323, 112, 0, [Δᐃ.ΔΔⵠᐃⲆΔᐃ, Δᐃ.ⵠⵠⲆΔᐃⵠⲆ, Δᐃ.ⵠΔⵠᐃⲆΔⲆ], 1, ha, function () {
      U(E);
      Ka.ⵠⲆᐃⲆΔᐃⵠ();
    }, 153, 463, ea | ca, ja);
    this.buttons[u++].view = c;
    this.buttons[u] = bf(323, 112, 0, [Δᐃ.ⵠⲆΔᐃⲆⵠⵠ, Δᐃ.ⲆⲆⲆⲆⵠᐃⲆ, Δᐃ.ⵠΔⲆᐃᐃⲆΔ], 1, ha, function () {
      U(F);
      La.ⵠⲆᐃⲆΔᐃⵠ();
    }, -315, 463, ea | ca, ja);
    this.buttons[u++].view = c;
    this.buttons[u] = bf(327, 117, 0, [Δᐃ.ΔᐃⲆᐃᐃᐃΔ, Δᐃ.ⵠΔⵠΔⲆᐃⵠ, Δᐃ.ⲆⵠΔΔⵠᐃᐃ], 1, ha, function () {
      U(N);
    }, 155, 70, _, ka);
    this.buttons[u++].view = H;
    this.buttons[u] = bf(130, 129, 0, [Δᐃ.ⲆⵠΔⲆΔΔⲆ, Δᐃ.ᐃΔⲆᐃΔⲆⵠ, Δᐃ.ⲆΔΔⲆΔⵠΔ], 1, ha, function () {
      P(f, ja, "none");
      U(m);
    }, 10, 40, ea | ca, ja);
    this.buttons[u++].view = f;
    this.buttons[u] = bf(130, 129, 0, [Δᐃ.ⲆⵠΔⲆΔΔⲆ, Δᐃ.ᐃΔⲆᐃΔⲆⵠ, Δᐃ.ⲆΔΔⲆΔⵠΔ], 1, ha, function () {
      P(y, ja, "none");
      U(m);
    }, 10, 40, ea | ca, ja);
    this.buttons[u++].view = y;
    this.buttons[u] = bf(115, 73, 0, [Δᐃ.ⲆΔⲆⲆⵠ, Δᐃ.ΔⲆⲆⲆⲆ, Δᐃ.ΔΔΔᐃⲆ], 1, ha, function () {
      U(m);
    }, 200, 140, ea | ca, ja);
    this.buttons[u++].view = j;
    this.buttons[u] = bf(524, 110, 0, [Δᐃ.ᐃⵠΔᐃⲆΔᐃ, Δᐃ.ᐃΔΔⵠᐃΔⵠ, Δᐃ.ⵠⲆⵠᐃᐃᐃⲆ], 1, ha, function () {
      ny("Atlanta");
    }, -265, 300, ea | ca, ja);
    this.buttons[u++].view = j;
    this.buttons[u] = bf(523, 110, 0, [Δᐃ.ⲆⵠⵠᐃΔⲆⵠ, Δᐃ.ⲆΔⵠᐃⵠΔⵠ, Δᐃ.ⲆⲆⵠⵠΔⲆΔ], 1, ha, function () {
      ny("LosAngeles");
    }, 5, 300, ea | ca, ja);
    this.buttons[u++].view = j;
    this.buttons[u] = bf(344, 110, 0, [Δᐃ.ⵠⵠⲆⵠⵠΔⲆ, Δᐃ.ⲆΔΔⵠΔΔⵠ, Δᐃ.ⵠᐃᐃᐃⵠⵠᐃ], 1, ha, function () {
      ny("Frankfurt");
    }, -265, 365, ea | ca, ja);
    this.buttons[u++].view = j;
    this.buttons[u] = bf(344, 110, 0, [Δᐃ.ΔⲆⵠⲆⵠΔᐃ, Δᐃ.ΔᐃᐃⵠⵠⲆⲆ, Δᐃ.ⲆⵠΔᐃⲆΔᐃ], 1, ha, function () {
      ny("Osaka");
    }, 100, 365, ea | ca, ja);
    this.buttons[u++].view = j;
    this.buttons[u] = bf(344, 110, 0, [Δᐃ.ⵠΔΔᐃΔⵠᐃ, Δᐃ.ⵠΔᐃⵠᐃⵠⲆ, Δᐃ.ⲆⲆⲆⲆΔΔⵠ], 1, ha, function () {
      ny("Sydney");
    }, -86, 365, ea | ca, ja);
    this.buttons[u++].view = j;
    this.buttons[u] = bf(115, 73, 0, [Δᐃ.ⲆΔⲆⲆⵠ, Δᐃ.ΔⲆⲆⲆⲆ, Δᐃ.ΔΔΔᐃⲆ], 1, ha, function () {
      U(j);
    }, 224, 140, ea | ca, ja);
    this.buttons[u++].view = W;
    this.buttons[u] = bf(230, 352, 0, [Δᐃ.ΔⵠᐃᐃⲆⲆⲆ, Δᐃ.ᐃᐃΔᐃⵠΔⵠ, Δᐃ.ⲆΔⵠΔⵠⲆᐃ], 1, ha, function () {
      jy(350);
    }, -280, 240, ea | ca, ja);
    this.buttons[u++].view = W;
    this.buttons[u] = bf(230, 352, 0, [Δᐃ.ⵠⲆⲆᐃⲆΔⵠ, Δᐃ.ᐃⲆᐃᐃᐃᐃⲆ, Δᐃ.ⵠΔⲆⵠΔⲆⵠ], 1, ha, function () {
      jy(700);
    }, -130, 240, ea | ca, ja);
    this.buttons[u++].view = W;
    this.buttons[u] = bf(230, 352, 0, [Δᐃ.ⵠⲆᐃⲆᐃⵠΔ, Δᐃ.ⲆΔⵠⲆⲆⲆᐃ, Δᐃ.ⲆⵠⲆΔⵠΔΔ], 1, ha, function () {
      jy(1400);
    }, 20, 240, ea | ca, ja);
    this.buttons[u++].view = W;
    this.buttons[u] = bf(230, 352, 0, [Δᐃ.ᐃΔᐃⵠⵠΔⲆ, Δᐃ.ⲆⵠᐃⵠⵠⲆⲆ, Δᐃ.ⵠⵠΔⲆⲆᐃΔ], 1, ha, function () {
      jy(3000);
    }, 170, 240, ea | ca, ja);
    this.buttons[u++].view = W;
    this.buttons[u] = bf(105, 119, 0, [Δᐃ.ⲆΔⵠⲆⲆⵠⵠ, Δᐃ.ⲆⵠⵠⵠⲆΔᐃ, Δᐃ.ᐃⲆΔⲆⲆⵠⲆ], 1, ha, function () {
      const a = document.getElementById("serverAddressInput").value.split(" : ");
      const b = e.document.createElement("textarea");
      b.value = wf + "?server=" + a[1] + "&region=" + a[0];
      e.document.body.appendChild(b);
      b.select();
      e.document.execCommand("copy");
      e.document.body.removeChild(b);
    }, 170, 310, ea | ca, ja);
    this.buttons[u++].view = O;
    this.buttons[u] = bf(105, 119, 0, [Δᐃ.ⵠᐃΔΔΔᐃᐃ, Δᐃ.ⵠΔΔᐃᐃᐃⲆ, Δᐃ.ⵠⵠⵠⵠΔᐃⲆ], 1, ha, function () {
      (function () {
        var a = new XMLHttpRequest();
        a.open("GET", Qx + "rebootServer?token=" + Wx + "&userid=" + Xx);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
          if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            location.href = wf + "?server=" + a[1] + "&region=" + a[0];
          }
        };
        a.send();
      })();
    }, 235, 310, ea | ca, ja);
    this.buttons[u++].view = O;
    this.buttons[u] = bf(204, 115, 0, [Δᐃ.ᐃⵠⲆⵠⲆⲆᐃ, Δᐃ.ⲆⵠⲆΔⵠⵠΔ, Δᐃ.ⵠΔⲆⵠⵠⵠⵠ], 1, ha, function () {
      e.open("./commands.html", "_blank");
    }, -265, 490, ea | ca, ja);
    this.buttons[u++].view = O;
    this.buttons[u] = bf(145, 69, 0, [Δᐃ.ᐃΔⵠⲆⲆⲆⵠ, Δᐃ.ᐃⵠΔⵠΔᐃⵠ, Δᐃ.ⵠΔⲆⲆᐃⲆⲆ], 1, ha, function () {
      U(T);
    }, -210, 170, ea | ca, ja);
    this.buttons[u++].view = m;
    this.buttons[u] = bf(145, 69, 0, [Δᐃ.ⲆΔΔⲆⲆΔᐃ, Δᐃ.ᐃⲆⵠΔⵠⲆᐃ, Δᐃ.ⲆⵠᐃΔⵠⲆⲆ], 1, ha, function () {
      U(J);
    }, 70, 170, ea | ca, ja);
    this.buttons[u++].view = m;
    this.buttons[u] = bf(145, 69, 0, [Δᐃ.ⲆⲆⲆⵠᐃⵠⵠ, Δᐃ.ⵠᐃΔᐃⵠΔⲆ, Δᐃ.ⲆᐃΔⲆⵠⵠΔ], 1, ha, function () {
      U(k);
    }, 70, 204, ea | ca, ja);
    this.buttons[u++].view = m;
    this.buttons[u] = bf(145, 69, 0, [Δᐃ.ⵠᐃⲆⵠᐃⵠᐃ, Δᐃ.ⵠᐃⲆΔⲆⲆΔ, Δᐃ.ΔΔⵠΔⵠᐃΔ], 1, ha, function () {
      U(M);
    }, -210, 204, ea | ca, ja);
    this.buttons[u++].view = m;
    this.buttons[u] = bf(145, 69, 0, [Δᐃ.ⵠᐃⲆⵠᐃⵠᐃ, Δᐃ.ⵠᐃⲆΔⲆⲆΔ, Δᐃ.ΔΔⵠΔⵠᐃΔ], 1, ha, function () {
      U(D);
    }, 70, 238, ea | ca, ja);
    this.buttons[u++].view = m;
    this.buttons[u] = bf(145, 69, 0, [Δᐃ.ⵠᐃⲆⵠᐃⵠᐃ, Δᐃ.ⵠᐃⲆΔⲆⲆΔ, Δᐃ.ΔΔⵠΔⵠᐃΔ], 1, ha, function () {
      if (A.ⵠΔⲆⵠⵠ()) {
        py(0, 300);
      } else {
        U(v);
      }
    }, 307, 205, ea | ca, ja);
    this.buttons[u++].view = m;
    this.buttons[u] = bf(145, 69, 0, [Δᐃ.ⲆᐃⲆⲆᐃⵠⲆ, Δᐃ.ᐃΔΔⵠΔⵠⵠ, Δᐃ.ᐃᐃⲆΔⵠⲆⵠ], 1, ha, function () {
      U(x);
    }, -210, 238, ea | ca, ja);
    this.buttons[u++].view = m;
    this.buttons[u] = bf(145, 69, 0, [Δᐃ.ⲆᐃⲆⲆᐃⵠⲆ, Δᐃ.ᐃΔΔⵠΔⵠⵠ, Δᐃ.ᐃᐃⲆΔⵠⲆⵠ], 1, ha, function () {
      if (A.ⵠΔⲆⵠⵠ()) {
        py(1, 600);
      } else {
        U(v);
      }
    }, 307, 239, ea | ca, ja);
    this.buttons[u++].view = m;
    this.buttons[u] = bf(192, 101, 0, [Δᐃ.ⲆΔⲆⵠΔᐃⲆ, Δᐃ.ᐃⲆⵠⵠⲆⵠΔ, Δᐃ.ⲆᐃᐃΔᐃᐃᐃ], 1, ha, function () {
      qy();
    }, -100, 250, ea | ca, ja);
    this.buttons[u++].view = G;
    this.buttons[u] = bf(192, 104, 0, [Δᐃ.ᐃⵠⵠⲆᐃᐃⵠ, Δᐃ.ⲆⲆⲆᐃᐃΔΔ, Δᐃ.ⲆᐃᐃⵠᐃΔᐃ], 1, ha, function () {
      qy();
    }, -100, 239, ea | ca, ja);
    this.buttons[u++].view = R;
    this.buttons[u] = bf(192, 101, 0, [Δᐃ.ᐃⵠⲆᐃⵠᐃΔ, Δᐃ.ⲆⵠⵠⵠᐃⵠⲆ, Δᐃ.ⵠⲆΔᐃΔᐃⵠ], 1, ha, function () {
      U(d);
    }, 10, 250, ea | ca, ja);
    this.buttons[u++].view = G;
    this.buttons[u] = bf(192, 104, 0, [Δᐃ.ⲆᐃⲆΔᐃΔΔ, Δᐃ.ᐃΔΔΔⵠΔⵠ, Δᐃ.ⲆⲆⵠⲆᐃⲆⲆ], 1, ha, function () {
      U(d);
    }, 10, 239, ea | ca, ja);
    this.buttons[u++].view = R;
    ⲆⲆᐃⲆⵠΔⵠ = [];
    ⲆⲆᐃⲆⵠΔⵠ[Δⵠᐃ.ΔᐃⲆΔᐃ] = [Δᐃ.ᐃⲆⲆⵠⵠᐃΔ, Δᐃ.ᐃᐃᐃᐃⲆⵠⲆ, Δᐃ.ᐃⲆⲆᐃᐃᐃⵠ];
    ⲆⲆᐃⲆⵠΔⵠ[Δⵠᐃ.ΔⵠⲆⲆ] = [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ];
    ⲆⲆᐃⲆⵠΔⵠ[Δⵠᐃ.ᐃⵠᐃᐃ] = [Δᐃ.ᐃᐃⵠⲆᐃⵠᐃ, Δᐃ.ΔᐃᐃⵠΔᐃΔ, Δᐃ.ⲆⵠⲆⲆΔᐃⲆ];
    ⲆⲆᐃⲆⵠΔⵠ[Δⵠᐃ.ΔᐃⲆΔ] = [Δᐃ.ⲆᐃⲆⵠΔᐃⲆ, Δᐃ.ⵠΔⵠᐃⵠΔⵠ, Δᐃ.ⵠᐃΔⲆΔⵠⵠ];
    ⲆⲆᐃⲆⵠΔⵠ[Δⵠᐃ.ΔⵠⵠⲆ] = [Δᐃ.ⵠᐃΔⵠΔⵠᐃ, Δᐃ.ⵠΔⲆⵠⲆᐃΔ, Δᐃ.ΔΔⲆⲆΔᐃⲆ];
    ⲆⲆᐃⲆⵠΔⵠ[Δⵠᐃ.ⵠᐃΔΔ] = [Δᐃ.ᐃΔᐃΔⵠᐃΔ, Δᐃ.ᐃⵠᐃΔᐃΔⵠ, Δᐃ.ᐃᐃᐃᐃᐃⲆⵠ];
    ⲆⲆᐃⲆⵠΔⵠ[Δⵠᐃ.ΔᐃΔⵠ] = [Δᐃ.ᐃⲆᐃⵠⵠⲆⵠ, Δᐃ.ΔᐃⲆⲆΔⲆⲆ, Δᐃ.ᐃⵠⵠⲆᐃⵠⲆ];
    ⲆⲆᐃⲆⵠΔⵠ[Δⵠᐃ.ᐃⵠᐃⵠᐃ] = [Δᐃ.ΔΔᐃᐃⵠᐃΔ, Δᐃ.ᐃᐃᐃⲆⲆⵠᐃ, Δᐃ.ΔΔᐃⲆΔⵠⲆ];
    ⲆⲆᐃⲆⵠΔⵠ[Δⵠᐃ.ᐃⲆⲆᐃᐃⲆΔ] = [Δᐃ.ΔⵠⲆⵠᐃᐃⲆ, Δᐃ.ⵠⲆᐃⵠΔΔⵠ, Δᐃ.ⲆⵠΔᐃᐃΔⵠ];
    ΔΔⲆⲆⲆΔⲆ = u;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, Ra, -29, 205, ea | ca, ja);
    this.buttons[u++].view = I;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, -29, 300, ea | ca, ja);
    this.buttons[u++].view = I;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, -29, 395, ea | ca, ja);
    this.buttons[u++].view = I;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, Xj, 65, 205, ea | ca, ja);
    this.buttons[u++].view = I;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, Ma, 65, 300, ea | ca, ja);
    this.buttons[u++].view = I;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, or, 65, 395, ea | ca, ja);
    this.buttons[u++].view = I;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, 159, 205, ea | ca, ja);
    this.buttons[u++].view = I;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, 159, 300, ea | ca, ja);
    this.buttons[u++].view = I;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, 159, 395, ea | ca, ja);
    this.buttons[u++].view = I;
    this.buttons[u] = bf(39, 122, 0, [Δᐃ.ΔⵠⵠⲆΔᐃⵠ, Δᐃ.ⵠΔᐃⲆᐃⵠΔ, Δᐃ.ΔΔⵠⲆΔΔⵠ], 1, ha, undefined, -61, 315, ea | ca, ja);
    this.buttons[u++].view = I;
    this.buttons[u] = bf(39, 122, 0, [Δᐃ.ᐃᐃᐃⵠⲆΔⲆ, Δᐃ.ⵠΔⵠⲆΔΔᐃ, Δᐃ.ⵠⲆⵠⲆΔⵠᐃ], 1, ha, ar, 260, 315, ea | ca, ja);
    this.buttons[u++].view = I;
    this.buttons[u] = bf(115, 73, 0, [Δᐃ.ⲆΔⲆⲆⵠ, Δᐃ.ΔⲆⲆⲆⲆ, Δᐃ.ΔΔΔᐃⲆ], 1, ha, function () {
      U(c);
    }, -320, 470, ea | ca, ja);
    this.buttons[u++].view = I;
    ⲆΔⵠⵠΔᐃⵠⲆΔ = u;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, -29, 205, ea | ca, ja);
    this.buttons[u++].view = X;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, Xq, -29, 300, ea | ca, ja);
    this.buttons[u++].view = X;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, kn, -29, 395, ea | ca, ja);
    this.buttons[u++].view = X;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, 65, 205, ea | ca, ja);
    this.buttons[u++].view = X;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, 65, 300, ea | ca, ja);
    this.buttons[u++].view = X;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, Cr, 65, 395, ea | ca, ja);
    this.buttons[u++].view = X;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, wj, 159, 205, ea | ca, ja);
    this.buttons[u++].view = X;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, Ao, 159, 300, ea | ca, ja);
    this.buttons[u++].view = X;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, Ao, 159, 395, ea | ca, ja);
    this.buttons[u++].view = X;
    this.buttons[u] = bf(39, 122, 0, [Δᐃ.ΔⵠⵠⲆΔᐃⵠ, Δᐃ.ⵠΔᐃⲆᐃⵠΔ, Δᐃ.ΔΔⵠⲆΔΔⵠ], 1, ha, undefined, -61, 315, ea | ca, ja);
    this.buttons[u++].view = X;
    this.buttons[u] = bf(39, 122, 0, [Δᐃ.ᐃᐃᐃⵠⲆΔⲆ, Δᐃ.ⵠΔⵠⲆΔΔᐃ, Δᐃ.ⵠⲆⵠⲆΔⵠᐃ], 1, ha, wj, 260, 315, ea | ca, ja);
    this.buttons[u++].view = X;
    this.buttons[u] = bf(115, 73, 0, [Δᐃ.ⲆΔⲆⲆⵠ, Δᐃ.ΔⲆⲆⲆⲆ, Δᐃ.ΔΔΔᐃⲆ], 1, ha, function () {
      U(c);
    }, -320, 470, ea | ca, ja);
    this.buttons[u++].view = X;
    ᐃᐃⲆⲆΔᐃΔΔΔ = u;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, -29, 205, ea | ca, ja);
    this.buttons[u++].view = F;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, -29, 300, ea | ca, ja);
    this.buttons[u++].view = F;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, -29, 395, ea | ca, ja);
    this.buttons[u++].view = F;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, or, 65, 205, ea | ca, ja);
    this.buttons[u++].view = F;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, zo, 65, 300, ea | ca, ja);
    this.buttons[u++].view = F;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, 65, 395, ea | ca, ja);
    this.buttons[u++].view = F;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, wj, 159, 205, ea | ca, ja);
    this.buttons[u++].view = F;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, 159, 300, ea | ca, ja);
    this.buttons[u++].view = F;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, 159, 395, ea | ca, ja);
    this.buttons[u++].view = F;
    this.buttons[u] = bf(39, 122, 0, [Δᐃ.ΔⵠⵠⲆΔᐃⵠ, Δᐃ.ⵠΔᐃⲆᐃⵠΔ, Δᐃ.ΔΔⵠⲆΔΔⵠ], 1, ha, Xj, -61, 315, ea | ca, ja);
    this.buttons[u++].view = F;
    this.buttons[u] = bf(39, 122, 0, [Δᐃ.ᐃᐃᐃⵠⲆΔⲆ, Δᐃ.ⵠΔⵠⲆΔΔᐃ, Δᐃ.ⵠⲆⵠⲆΔⵠᐃ], 1, ha, undefined, 260, 315, ea | ca, ja);
    this.buttons[u++].view = F;
    this.buttons[u] = bf(115, 73, 0, [Δᐃ.ⲆΔⲆⲆⵠ, Δᐃ.ΔⲆⲆⲆⲆ, Δᐃ.ΔΔΔᐃⲆ], 1, ha, function () {
      U(c);
    }, -320, 470, ea | ca, ja);
    this.buttons[u++].view = F;
    ᐃⵠᐃΔⵠΔΔⵠΔ = u;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, fk, -29, 205, ea | ca, ja);
    this.buttons[u++].view = S;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, -29, 300, ea | ca, ja);
    this.buttons[u++].view = S;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, ah, -29, 395, ea | ca, ja);
    this.buttons[u++].view = S;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, 65, 205, ea | ca, ja);
    this.buttons[u++].view = S;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, 65, 300, ea | ca, ja);
    this.buttons[u++].view = S;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, kn, 65, 395, ea | ca, ja);
    this.buttons[u++].view = S;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, 159, 205, ea | ca, ja);
    this.buttons[u++].view = S;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, 159, 300, ea | ca, ja);
    this.buttons[u++].view = S;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, cq, 159, 395, ea | ca, ja);
    this.buttons[u++].view = S;
    this.buttons[u] = bf(39, 122, 0, [Δᐃ.ΔⵠⵠⲆΔᐃⵠ, Δᐃ.ⵠΔᐃⲆᐃⵠΔ, Δᐃ.ΔΔⵠⲆΔΔⵠ], 1, ha, zo, -61, 315, ea | ca, ja);
    this.buttons[u++].view = S;
    this.buttons[u] = bf(39, 122, 0, [Δᐃ.ᐃᐃᐃⵠⲆΔⲆ, Δᐃ.ⵠΔⵠⲆΔΔᐃ, Δᐃ.ⵠⲆⵠⲆΔⵠᐃ], 1, ha, undefined, 260, 315, ea | ca, ja);
    this.buttons[u++].view = S;
    this.buttons[u] = bf(115, 73, 0, [Δᐃ.ⲆΔⲆⲆⵠ, Δᐃ.ΔⲆⲆⲆⲆ, Δᐃ.ΔΔΔᐃⲆ], 1, ha, function () {
      U(c);
    }, -320, 470, ea | ca, ja);
    this.buttons[u++].view = S;
    ⲆΔⵠᐃⵠⵠᐃΔΔ = u;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, -29, 205, ea | ca, ja);
    this.buttons[u++].view = Q;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, kn, -29, 300, ea | ca, ja);
    this.buttons[u++].view = Q;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, -29, 395, ea | ca, ja);
    this.buttons[u++].view = Q;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, Cr, 65, 205, ea | ca, ja);
    this.buttons[u++].view = Q;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, ur, 65, 300, ea | ca, ja);
    this.buttons[u++].view = Q;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, Xq, 65, 395, ea | ca, ja);
    this.buttons[u++].view = Q;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, 159, 205, ea | ca, ja);
    this.buttons[u++].view = Q;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, ar, 159, 300, ea | ca, ja);
    this.buttons[u++].view = Q;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, 159, 395, ea | ca, ja);
    this.buttons[u++].view = Q;
    this.buttons[u] = bf(39, 122, 0, [Δᐃ.ΔⵠⵠⲆΔᐃⵠ, Δᐃ.ⵠΔᐃⲆᐃⵠΔ, Δᐃ.ΔΔⵠⲆΔΔⵠ], 1, ha, Ao, -61, 315, ea | ca, ja);
    this.buttons[u++].view = Q;
    this.buttons[u] = bf(39, 122, 0, [Δᐃ.ᐃᐃᐃⵠⲆΔⲆ, Δᐃ.ⵠΔⵠⲆΔΔᐃ, Δᐃ.ⵠⲆⵠⲆΔⵠᐃ], 1, ha, kn, 260, 315, ea | ca, ja);
    this.buttons[u++].view = Q;
    this.buttons[u] = bf(115, 73, 0, [Δᐃ.ⲆΔⲆⲆⵠ, Δᐃ.ΔⲆⲆⲆⲆ, Δᐃ.ΔΔΔᐃⲆ], 1, ha, function () {
      U(c);
    }, -320, 470, ea | ca, ja);
    this.buttons[u++].view = Q;
    ΔᐃⵠⲆⵠⲆⵠᐃⵠ = u;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, -29, 205, ea | ca, ja);
    this.buttons[u++].view = E;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, ar, -29, 300, ea | ca, ja);
    this.buttons[u++].view = E;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, -29, 395, ea | ca, ja);
    this.buttons[u++].view = E;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, Al, 65, 205, ea | ca, ja);
    this.buttons[u++].view = E;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, Al, 65, 300, ea | ca, ja);
    this.buttons[u++].view = E;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, zo, 65, 395, ea | ca, ja);
    this.buttons[u++].view = E;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, 159, 205, ea | ca, ja);
    this.buttons[u++].view = E;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, undefined, 159, 300, ea | ca, ja);
    this.buttons[u++].view = E;
    this.buttons[u] = bf(178, 182, 0, [Δᐃ.ᐃᐃᐃⲆ, Δᐃ.ᐃΔΔᐃ, Δᐃ.ⲆᐃⲆⲆ], 1, ha, or, 159, 395, ea | ca, ja);
    this.buttons[u++].view = E;
    this.buttons[u] = bf(39, 122, 0, [Δᐃ.ΔⵠⵠⲆΔᐃⵠ, Δᐃ.ⵠΔᐃⲆᐃⵠΔ, Δᐃ.ΔΔⵠⲆΔΔⵠ], 1, ha, undefined, -61, 315, ea | ca, ja);
    this.buttons[u++].view = E;
    this.buttons[u] = bf(39, 122, 0, [Δᐃ.ᐃᐃᐃⵠⲆΔⲆ, Δᐃ.ⵠΔⵠⲆΔΔᐃ, Δᐃ.ⵠⲆⵠⲆΔⵠᐃ], 1, ha, undefined, 260, 315, ea | ca, ja);
    this.buttons[u++].view = E;
    this.buttons[u] = bf(115, 73, 0, [Δᐃ.ⲆΔⲆⲆⵠ, Δᐃ.ΔⲆⲆⲆⲆ, Δᐃ.ΔΔΔᐃⲆ], 1, ha, function () {
      U(c);
    }, -320, 470, ea | ca, ja);
    this.buttons[u++].view = E;
    this.buttons[u] = bf(260, 260, 0, [Δᐃ.ΔᐃⲆΔⲆⲆΔ, Δᐃ.ᐃⲆΔⵠⲆⲆⲆ, Δᐃ.ᐃⲆⲆⲆᐃᐃⲆ], 1, ha, function () {
      if (A.ⵠΔⲆⵠⵠ()) {
        oy(3, 50);
      } else {
        U(v);
      }
    }, -65, 197, ea | ca, ja);
    this.buttons[u++].view = J;
    this.buttons[u] = bf(115, 73, 0, [Δᐃ.ⲆΔⲆⲆⵠ, Δᐃ.ΔⲆⲆⲆⲆ, Δᐃ.ΔΔΔᐃⲆ], 1, ha, function () {
      U(m);
    }, 309, 180, ea | ca, ja);
    this.buttons[u++].view = J;
    this.buttons[u] = bf(260, 260, 0, [Δᐃ.ΔⵠⲆΔⲆᐃΔ, Δᐃ.ⵠⵠⵠᐃⲆⲆⲆ, Δᐃ.ⵠⲆΔΔᐃΔᐃ], 1, ha, function () {
      if (A.ⵠΔⲆⵠⵠ()) {
        oy(0, 100);
      } else {
        U(v);
      }
    }, -65, 197, ea | ca, ja);
    this.buttons[u++].view = T;
    this.buttons[u] = bf(115, 73, 0, [Δᐃ.ⲆΔⲆⲆⵠ, Δᐃ.ΔⲆⲆⲆⲆ, Δᐃ.ΔΔΔᐃⲆ], 1, ha, function () {
      U(m);
    }, 309, 180, ea | ca, ja);
    this.buttons[u++].view = T;
    this.buttons[u] = bf(260, 260, 0, [Δᐃ.ⵠⵠᐃᐃⲆⵠᐃ, Δᐃ.ΔⲆⲆⵠⵠΔⲆ, Δᐃ.ⲆⵠⵠⲆᐃⵠᐃ], 1, ha, function () {
      if (A.ⵠΔⲆⵠⵠ()) {
        oy(4, 150);
      } else {
        U(v);
      }
    }, -65, 197, ea | ca, ja);
    this.buttons[u++].view = k;
    this.buttons[u] = bf(115, 73, 0, [Δᐃ.ⲆΔⲆⲆⵠ, Δᐃ.ΔⲆⲆⲆⲆ, Δᐃ.ΔΔΔᐃⲆ], 1, ha, function () {
      U(m);
    }, 309, 180, ea | ca, ja);
    this.buttons[u++].view = k;
    this.buttons[u] = bf(260, 260, 0, [Δᐃ.ⵠᐃⵠⵠⲆΔⵠ, Δᐃ.ᐃⵠᐃⲆΔΔΔ, Δᐃ.ⵠᐃΔⵠᐃᐃΔ], 1, ha, function () {
      if (A.ⵠΔⲆⵠⵠ()) {
        oy(1, 300);
      } else {
        U(v);
      }
    }, -65, 197, ea | ca, ja);
    this.buttons[u++].view = M;
    this.buttons[u] = bf(115, 73, 0, [Δᐃ.ⲆΔⲆⲆⵠ, Δᐃ.ΔⲆⲆⲆⲆ, Δᐃ.ΔΔΔᐃⲆ], 1, ha, function () {
      U(m);
    }, 309, 180, ea | ca, ja);
    this.buttons[u++].view = M;
    this.buttons[u] = bf(260, 260, 0, [Δᐃ.ⲆᐃᐃΔᐃΔᐃ, Δᐃ.ⵠΔᐃⲆΔⲆⵠ, Δᐃ.ⵠⵠΔⵠⲆΔᐃ], 1, ha, function () {
      if (A.ⵠΔⲆⵠⵠ()) {
        oy(2, 600);
      } else {
        U(v);
      }
    }, -65, 197, ea | ca, ja);
    this.buttons[u++].view = x;
    this.buttons[u] = bf(115, 73, 0, [Δᐃ.ⲆΔⲆⲆⵠ, Δᐃ.ΔⲆⲆⲆⲆ, Δᐃ.ΔΔΔᐃⲆ], 1, ha, function () {
      U(m);
    }, 309, 180, ea | ca, ja);
    this.buttons[u++].view = x;
    this.buttons[u] = bf(260, 260, 0, [Δᐃ.ⵠᐃⵠⵠⲆΔⵠ, Δᐃ.ᐃⵠᐃⲆΔΔΔ, Δᐃ.ⵠᐃΔⵠᐃᐃΔ], 1, ha, function () {
      if (A.ⵠΔⲆⵠⵠ()) {
        oy(5, 300);
      } else {
        U(v);
      }
    }, -65, 197, ea | ca, ja);
    this.buttons[u++].view = D;
    this.buttons[u] = bf(115, 73, 0, [Δᐃ.ⲆΔⲆⲆⵠ, Δᐃ.ΔⲆⲆⲆⲆ, Δᐃ.ΔΔΔᐃⲆ], 1, ha, function () {
      U(m);
    }, 309, 180, ea | ca, ja);
    this.buttons[u++].view = D;
    var va = u;
    this.buttons[u] = bf(46, 51, 0, [Δᐃ.ᐃΔΔⵠᐃⵠⲆ, Δᐃ.ᐃⵠⵠⲆⵠᐃΔ, Δᐃ.ⲆⲆⲆΔᐃᐃⵠ], 1, ha, function () {
      ua(Wn, 0);
    }, -305, 132, ea | ca, ja);
    this.buttons[u++].view = d;
    var wa = u;
    this.buttons[u] = bf(46, 51, 0, [Δᐃ.ⵠΔΔⲆᐃΔᐃ, Δᐃ.ᐃᐃⵠΔΔΔΔ, Δᐃ.ⵠᐃᐃᐃⲆᐃⵠ], 1, ha, function () {
      ua(undefined, 1);
    }, -273, 132, ea | ca, ja);
    this.buttons[u++].view = d;
    var xa = u;
    this.buttons[u] = bf(46, 51, 0, [Δᐃ.ᐃⵠᐃΔⲆΔⵠ, Δᐃ.ⲆⲆΔⲆΔⲆⲆ, Δᐃ.ᐃⲆΔⲆⵠΔⲆ], 1, ha, function () {
      ua(undefined, 2);
    }, -241, 132, ea | ca, ja);
    this.buttons[u++].view = d;
    var ya = u;
    this.buttons[u] = bf(46, 51, 0, [Δᐃ.ΔⵠⵠΔΔᐃⲆ, Δᐃ.ᐃΔΔⵠⵠⲆΔ, Δᐃ.ᐃⵠⵠⵠΔⲆⲆ], 1, ha, function () {
      ua(undefined, 3);
    }, -305, 165, ea | ca, ja);
    this.buttons[u++].view = d;
    var za = u;
    this.buttons[u] = bf(46, 51, 0, [Δᐃ.ⵠΔⵠⲆⲆᐃΔ, Δᐃ.ΔᐃⲆⵠᐃⵠⲆ, Δᐃ.ᐃⲆΔⵠΔΔᐃ], 1, ha, function () {
      ua(Al, 4);
    }, -273, 165, ea | ca, ja);
    this.buttons[u++].view = d;
    var Aa = u;
    this.buttons[u] = bf(46, 51, 0, [Δᐃ.ΔⲆΔⲆΔΔⵠ, Δᐃ.ᐃⲆᐃᐃⲆⵠΔ, Δᐃ.ᐃⵠΔᐃΔⲆⵠ], 1, ha, function () {
      ua(ar, 5);
    }, -241, 165, ea | ca, ja);
    this.buttons[u++].view = d;
    var Ba = u;
    this.buttons[u] = bf(460, 73, 0, [Δᐃ.ΔΔΔⵠⵠⲆⵠ, Δᐃ.ⲆⲆⲆΔⵠⵠⲆ, Δᐃ.ΔⲆⵠⵠᐃⵠⵠ], 1, ha, function () {
      ua(-1);
    }, -180, 170, ea | ca, ja);
    this.buttons[u++].view = d;
    var Ca = u;
    this.buttons[u] = bf(222, 68, 0, [Δᐃ.ⲆⲆⵠΔΔᐃⲆ, Δᐃ.ΔⵠⵠΔⵠⵠⲆ, Δᐃ.ᐃⲆⲆⵠᐃΔⲆ], 1, ha, function () {
      ua(0);
    }, -180, 215, ea | ca, ja);
    this.buttons[u++].view = d;
    var Da = u;
    this.buttons[u] = bf(222, 68, 0, [Δᐃ.ⲆᐃⲆΔΔⲆΔ, Δᐃ.ΔΔⵠΔⵠⲆⲆ, Δᐃ.ⲆⵠⲆⵠⵠⲆⵠ], 1, ha, function () {
      ua(4);
    }, -180, 260, ea | ca, ja);
    this.buttons[u++].view = d;
    var Ea = u;
    this.buttons[u] = bf(222, 68, 0, [Δᐃ.ΔΔΔΔⲆᐃᐃ, Δᐃ.ⵠΔᐃᐃᐃⲆⲆ, Δᐃ.ⵠⲆᐃΔΔⲆⵠ], 1, ha, function () {
      ua(2);
    }, -60, 215, ea | ca, ja);
    this.buttons[u++].view = d;
    var Fa = u;
    this.buttons[u] = bf(222, 68, 0, [Δᐃ.ⵠΔⲆⵠᐃᐃⲆ, Δᐃ.ⲆΔⵠⲆᐃⲆᐃ, Δᐃ.ΔΔⵠΔⲆΔΔ], 1, ha, function () {
      ua(3);
    }, -60, 260, ea | ca, ja);
    this.buttons[u++].view = d;
    this.ⲆⵠᐃΔⲆᐃᐃ = u;
    this.buttons[u] = bf(143, 66, 0, [Δᐃ.ΔⵠΔⲆΔⲆᐃ, Δᐃ.ⲆⵠᐃⵠⲆⲆⵠ, Δᐃ.ΔᐃΔⵠᐃΔⲆ], 1, ha, function () {
      my(Ao, zx.ⲆⵠᐃΔⲆᐃᐃ);
    }, -298, 110, ea | ca, ja);
    this.buttons[u++].view = C;
    this.ᐃⵠᐃΔᐃᐃⲆ = u;
    this.buttons[u] = bf(104, 66, 0, [Δᐃ.ΔⵠᐃᐃⵠⲆⵠ, Δᐃ.ⵠᐃⵠᐃᐃⲆⵠ, Δᐃ.ᐃᐃᐃΔⵠⲆΔ], 1, ha, function () {
      my(xh, zx.ᐃⵠᐃΔᐃᐃⲆ);
    }, -223, 110, ea | ca, ja);
    this.buttons[u++].view = C;
    this.ᐃⵠⵠΔᐃⵠⲆ = u;
    this.buttons[u] = bf(110, 66, 0, [Δᐃ.ⵠΔᐃⲆⲆⲆⲆ, Δᐃ.ⲆⲆⵠΔⵠⵠᐃ, Δᐃ.ΔᐃᐃⲆⵠᐃⲆ], 1, ha, function () {
      my(undefined, zx.ᐃⵠⵠΔᐃⵠⲆ);
    }, -168, 110, ea | ca, ja);
    this.buttons[u++].view = C;
    this.ⵠⵠⲆᐃᐃᐃⲆ = u;
    this.buttons[u] = bf(88, 66, 0, [Δᐃ.ⲆΔⵠΔΔᐃⲆ, Δᐃ.ⵠⲆⵠΔᐃⵠⵠ, Δᐃ.ᐃⵠΔΔΔⲆⲆ], 1, ha, function () {
      my(kn, zx.ⵠⵠⲆᐃᐃᐃⲆ);
    }, -110, 110, ea | ca, ja);
    this.buttons[u++].view = C;
    this.ⲆᐃΔⵠⵠⲆⵠ = u;
    this.buttons[u] = bf(88, 66, 0, [Δᐃ.ⵠⵠⲆⵠⲆΔⲆ, Δᐃ.ⲆΔᐃΔᐃᐃⵠ, Δᐃ.ⵠⲆΔᐃΔⲆⵠ], 1, ha, function () {
      my(ur, zx.ⲆᐃΔⵠⵠⲆⵠ);
    }, -63, 110, ea | ca, ja);
    this.buttons[u++].view = C;
    this.buttons[u] = bf(86, 44, 0, [Δᐃ.ⲆⵠᐃⲆⲆᐃΔ, Δᐃ.ⵠⲆᐃΔᐃⲆΔ, Δᐃ.ⵠΔⵠᐃΔⲆⲆ], 1, ha, function () {
      e.open("./terms.html", "_blank");
    }, 349, 290, ea | ca, ja);
    this.buttons[u++].view = m;
    var Ga = new i(ⲆⲆⲆⵠ.ⵠΔⵠⵠᐃ, ΔΔⲆⲆⲆΔⲆ, function (a) {
      zx.ⵠΔᐃⵠ = a;
      if (zx.unlock.ⵠΔᐃⵠ[a] === 1) {
        ⲆᐃᐃΔ.set("starve_skin", "" + a, {
          expires: 30
        });
      }
    }, this.ⵠΔᐃⵠ, this.unlock.ⵠΔᐃⵠ);
    var Ha = new i(ⲆⲆⲆⵠ.Ⲇⵠᐃⵠ, ᐃⵠᐃΔⵠΔΔⵠΔ, function (a) {
      zx.ᐃⲆⲆΔⲆ = a;
      if (zx.unlock.ᐃⲆⲆΔⲆ[a] === 1) {
        ⲆᐃᐃΔ.set("starve_bag", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃⲆⲆΔⲆ, this.unlock.ᐃⲆⲆΔⲆ);
    var Ia = new i(ⲆⲆⲆⵠ.ⲆᐃⵠⲆᐃ, ⲆΔⵠᐃⵠⵠᐃΔΔ, function (a) {
      zx.ΔⵠᐃᐃΔ = a;
      if (zx.unlock.ΔⵠᐃᐃΔ[a] === 1) {
        ⲆᐃᐃΔ.set("starve_book", "" + a, {
          expires: 30
        });
      }
    }, this.ΔⵠᐃᐃΔ, this.unlock.ΔⵠᐃᐃΔ);
    var Ka = new i(ⲆⲆⲆⵠ.ΔΔⵠΔⵠ, ΔᐃⵠⲆⵠⲆⵠᐃⵠ, function (a) {
      zx.ᐃⵠΔΔⲆ = a;
      if (zx.unlock.ᐃⵠΔΔⲆ[a] === 1) {
        ⲆᐃᐃΔ.set("starve_dead", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃⵠΔΔⲆ, this.unlock.ᐃⵠΔΔⲆ);
    var La = new i(ⲆⲆⲆⵠ.ΔΔⵠΔⵠ, ᐃᐃⲆⲆΔᐃΔΔΔ, function (a) {
      zx.ΔⲆᐃΔΔ = a;
      if (zx.unlock.ΔⲆᐃΔΔ[a] === 1) {
        ⲆᐃᐃΔ.set("starve_crate", "" + a, {
          expires: 30
        });
      }
    }, this.ΔⲆᐃΔΔ, this.unlock.ΔⲆᐃΔΔ);
    var Na = new i(ⲆⲆⲆⵠ.ΔⲆⲆΔⲆ, ⲆΔⵠⵠΔᐃⵠⲆΔ, function (a) {
      zx.ΔⵠΔΔⵠ = a;
      if (zx.unlock.ΔⵠΔΔⵠ[a] === 1) {
        ⲆᐃᐃΔ.set("starve_accessory", "" + a, {
          expires: 30
        });
      }
    }, this.ΔⵠΔΔⵠ, this.unlock.ΔⵠΔΔⵠ);
    this.ⵠⲆⵠᐃⲆⲆᐃ = function (a) {
      Ix.ᐃᐃⵠⵠ = vf(A.Ⲇᐃ, a);
      for (var b = 0; A.buttons.length > b; b++) {
        if (ka === A.buttons[b].info.active) {
          A.buttons[b].ᐃΔⲆⵠ(A.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, sf);
        }
      }
    };
    this.ΔⲆⵠΔΔⲆΔ = function (a) {
      Ix.ᐃᐃⵠⵠ = vf(A.Ⲇᐃ, a);
      for (var b = 0; b < A.buttons.length; b++) {
        var c = A.buttons[b];
        if (ka === c.info.active && c.ᐃΔⲆⵠ(A.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf)) {
          c.info.callback();
          return;
        }
      }
    };
    this.ⵠᐃⲆⲆᐃⲆᐃ = ba;
    this.ⵠⲆⲆᐃⵠⲆᐃ = function (a) {
      Ix.ᐃᐃⵠⵠ = vf(A.Ⲇᐃ, a);
      var b = Ja;
      for (var c = 0; c < A.buttons.length; c++) {
        if (ka === A.buttons[c].info.active) {
          b |= A.buttons[c].ᐃΔⲆⵠ(A.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, rf);
        }
      }
      if (b !== A.ⵠᐃⲆⲆᐃⲆᐃ) {
        A.ⵠᐃⲆⲆᐃⲆᐃ = b;
        q.style.cursor = b ? A.ΔᐃᐃΔᐃⵠⲆ : A.ΔⲆⵠⲆᐃⲆⲆ;
      }
    };
    this.ᐃᐃᐃΔⵠΔΔ = function () {
      e.addEventListener("mousedown", this.ⵠⲆⵠᐃⲆⲆᐃ, false);
      e.addEventListener("mouseup", this.ΔⲆⵠΔΔⲆΔ, Fq);
      e.addEventListener("mousemove", this.ⵠⲆⲆᐃⵠⲆᐃ, false);
    };
    this.ᐃⲆⵠΔᐃⵠΔ = function () {
      e.removeEventListener("mousedown", this.ⵠⲆⵠᐃⲆⲆᐃ, false);
      e.removeEventListener("mouseup", this.ΔⲆⵠΔΔⲆΔ, Wj);
      e.removeEventListener("mousemove", this.ⵠⲆⲆᐃⵠⲆᐃ, false);
    };
  }
  function Uw(c, d) {
    var f = this;
    this.Ⲇᐃ = c;
    this.Ⲇ = d;
    if (e.navigator.userAgent.indexOf("Edge") > -1) {
      this.ΔⲆⵠⲆᐃⲆⲆ = "default";
      this.ΔᐃᐃΔᐃⵠⲆ = "pointer";
    } else {
      this.ΔⲆⵠⲆᐃⲆⲆ = "url('img/cursor0.png'), default";
      this.ΔᐃᐃΔᐃⵠⲆ = "url('img/cursor1.png'), pointer";
    }
    this.ⵠⵠΔⵠΔΔⲆ = 1;
    this.ᐃⲆⵠⵠᐃⲆΔ = 1;
    this.ΔΔΔⵠⲆⵠΔ = 1;
    this.ᐃᐃᐃⵠΔᐃⲆ = 1;
    this.ᐃᐃᐃⵠᐃΔᐃⲆᐃ = {
      id: document.getElementById("team_box"),
      style: document.getElementById("team_box").style,
      ᐃⲆⲆ: function () {
        this.style.left = Math.floor(bq - 125) + "px";
        this.style.top = "110px";
      }
    };
    this.ⵠΔΔᐃ = {
      ⲆⲆᐃΔⵠⲆᐃ: bf(60, 60, 0, ⲆⲆ[782]),
      ⵠᐃⵠᐃⲆⲆⵠ: bf(60, 60, 0, ⲆⲆ[783])
    };
    this.sign = {
      open: false,
      ᐃⵠΔᐃⲆΔΔᐃⲆ: 0,
      ΔⵠⲆΔΔΔᐃ: document.getElementById("sign_object"),
      ΔⲆⲆⲆᐃᐃΔ: 0,
      id: document.getElementById("sign_window"),
      style: document.getElementById("sign_window").style,
      button: bf(60, 60, 0, ⲆⲆ[803]),
      ⲆᐃᐃⵠΔΔᐃ: function () {
        var a = Math.floor(Math.floor((3 + Dx.ⵠΔⵠⵠ.ⵠⵠΔⵠᐃ.length) / 4) * (10 + ⲆⲆ[316][0].width) + 35);
        this.button.info.translate.x = a;
        this.button.info.translate.y = 22;
      },
      ᐃⲆⲆ: function () {
        this.style.left = Math.floor(bq - 150) + "px";
        this.style.top = Math.floor(jo - 115) + "px";
      },
      ᐃⲆᐃΔΔ: function () {
        Fx.sign.style.display = "none";
        Fx.sign.open = ns;
      },
      select: function () {
        Fx.sign.open = !Fx.sign.open;
        if (Fx.sign.open) {
          Fx.sign.style.display = "inline-block";
        } else {
          Fx.sign.style.display = "none";
        }
      },
      ok: function () {
        ⲆᐃⲆᐃ.ᐃᐃⲆᐃⵠⵠⵠᐃⲆ(Dx.sign.Δⵠⵠⵠⵠ, Fx.sign.ΔⲆⲆⲆᐃᐃΔ);
        Fx.sign.select();
      },
      up: function () {
        Fx.sign.ΔⲆⲆⲆᐃᐃΔ = Fx.sign.ΔⲆⲆⲆᐃᐃΔ === 0 ? 3 : Fx.sign.ΔⲆⲆⲆᐃᐃΔ - 1;
        Fx.sign.ΔⵠⲆΔΔΔᐃ.src = "./img/sign" + Fx.sign.ΔⲆⲆⲆᐃᐃΔ + ".png";
      },
      down: function () {
        Fx.sign.ΔⲆⲆⲆᐃᐃΔ = (Fx.sign.ΔⲆⲆⲆᐃᐃΔ + 1) % 4;
        Fx.sign.ΔⵠⲆΔΔΔᐃ.src = "./img/sign" + Fx.sign.ΔⲆⲆⲆᐃᐃΔ + ".png";
      }
    };
    document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, Rg);
    document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, ba);
    document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, Fq);
    document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, false);
    this.ᐃⵠΔⲆΔ = {
      open: ul,
      id: document.getElementById("shop_market"),
      style: document.getElementById("shop_market").style,
      items: [{
        id: 0,
        name: "wood",
        ᐃⵠⵠⲆΔ: 1,
        b: 1,
        a: 3,
        ΔⲆⲆᐃᐃ: 316
      }, {
        id: 1,
        name: "stone",
        ᐃⵠⵠⲆΔ: 1,
        b: 1,
        a: 4,
        ΔⲆⲆᐃᐃ: 315
      }, {
        id: 2,
        name: "gold",
        ᐃⵠⵠⲆΔ: 1,
        b: 1,
        a: 6,
        ΔⲆⲆᐃᐃ: 297
      }, {
        id: 3,
        name: "diamond",
        ᐃⵠⵠⲆΔ: 4,
        b: 4,
        a: 1,
        ΔⲆⲆᐃᐃ: 298
      }, {
        id: 4,
        name: "amethyst",
        ᐃⵠⵠⲆΔ: 8,
        b: 8,
        a: 1,
        ΔⲆⲆᐃᐃ: 418
      }, {
        id: 5,
        name: "reidite",
        ᐃⵠⵠⲆΔ: 16,
        b: 16,
        a: 1,
        ΔⲆⲆᐃᐃ: 938
      }, {
        id: 6,
        name: "pumpkin_seed",
        ᐃⵠⵠⲆΔ: 10,
        b: 10,
        a: 1,
        ΔⲆⲆᐃᐃ: 808
      }, {
        id: 7,
        name: "carrot_seed",
        ᐃⵠⵠⲆΔ: 16,
        b: 16,
        a: 1,
        ΔⲆⲆᐃᐃ: 949
      }, {
        id: 8,
        name: "tomato_seed",
        ᐃⵠⵠⲆΔ: 20,
        b: 20,
        a: 1,
        ΔⲆⲆᐃᐃ: 959
      }, {
        id: 9,
        name: "thornbush_seed",
        ᐃⵠⵠⲆΔ: 30,
        b: 30,
        a: 1,
        ΔⲆⲆᐃᐃ: 845
      }, {
        id: 10,
        name: "garlic_seed",
        ᐃⵠⵠⲆΔ: 40,
        b: 40,
        a: 1,
        ΔⲆⲆᐃᐃ: 834
      }, {
        id: 11,
        name: "watermelon_seed",
        ᐃⵠⵠⲆΔ: 60,
        b: 60,
        a: 1,
        ΔⲆⲆᐃᐃ: 966
      }],
      button: bf(60, 60, 0, ⲆⲆ[795]),
      ᐃⲆⲆ: function () {
        this.style.left = Math.floor(bq - 450) + "px";
        this.style.top = Math.floor(jo - 270) + "px";
      },
      select: function () {
        Fx.ᐃⵠΔⲆΔ.open = !Fx.ᐃⵠΔⲆΔ.open;
        if (Fx.ᐃⵠΔⲆΔ.open) {
          Fx.ᐃⵠΔⲆΔ.style.display = "inline-block";
        } else {
          Fx.ᐃⵠΔⲆΔ.style.display = "none";
        }
      },
      ᐃⲆᐃΔΔ: function () {
        Fx.ᐃⵠΔⲆΔ.style.display = "none";
        Fx.ᐃⵠΔⲆΔ.open = false;
      },
      ᐃⵠᐃΔᐃⵠᐃ: function () {
        ⲆᐃⲆᐃ.ΔᐃᐃᐃⲆⵠⵠⲆΔ(this.ⵠⲆᐃⵠⵠⲆᐃ);
      },
      ⵠⲆᐃΔΔ: function () {
        this.id;
        if (this.ⵠⲆᐃⵠⵠⲆᐃ.a === 1) {
          var a = Math.floor(Number(this.value) * this.ⵠⲆᐃⵠⵠⲆᐃ.b);
          this.ⵠⲆᐃⵠⵠⲆᐃ.ᐃⵠⵠⲆΔ = a;
          document.getElementById(this.ⵠⲆᐃⵠⵠⲆᐃ.name + "_trad_number").innerHTML = a + "";
        } else {
          a = Math.floor(Number(this.value) / this.ⵠⲆᐃⵠⵠⲆᐃ.a);
          this.ⵠⲆᐃⵠⵠⲆᐃ.ᐃⵠⵠⲆΔ = a;
          document.getElementById(this.ⵠⲆᐃⵠⵠⲆᐃ.name + "_trad_number").innerHTML = a + "";
        }
      }
    };
    document.getElementById("quit_market").addEventListener("mouseup", this.ᐃⵠΔⲆΔ.ᐃⲆᐃΔΔ, false);
    var i = [["mouseup", this.ᐃⵠΔⲆΔ.ᐃⵠᐃΔᐃⵠᐃ, "buy_"], ["click", this.ᐃⵠΔⲆΔ.ⵠⲆᐃΔΔ, ""], ["change", this.ᐃⵠΔⲆΔ.ⵠⲆᐃΔΔ, ""], ["keypress", this.ᐃⵠΔⲆΔ.keypress, ""]];
    for (var j = 0; this.ᐃⵠΔⲆΔ.items.length > j; j++) {
      var k = this.ᐃⵠΔⲆΔ.items[j];
      document.getElementById(k.name + "_market").src = ⲆⲆ[k.ΔⲆⲆᐃᐃ][0].Ⲇᐃⵠⵠⵠ === undefined ? ⲆⲆ[k.ΔⲆⲆᐃᐃ][0].src : ⲆⲆ[k.ΔⲆⲆᐃᐃ][0].Ⲇᐃⵠⵠⵠ;
      if (k.a === 1) {
        document.getElementById(k.name + "_trad_number").innerHTML = k.b;
        document.getElementById(k.name + "_number").value = 1;
        document.getElementById(k.name + "_number").step = 1;
        document.getElementById(k.name + "_number").min = 1;
        document.getElementById(k.name + "_number").max = Math.floor(255 / k.b);
      } else {
        document.getElementById(k.name + "_trad_number").innerHTML = 1;
        document.getElementById(k.name + "_number").value = k.a;
        document.getElementById(k.name + "_number").step = k.a;
        document.getElementById(k.name + "_number").min = k.a;
      }
      document.getElementById("buy_" + k.name + "_number").ⵠⲆᐃⵠⵠⲆᐃ = k;
      document.getElementById(k.name + "_number").ⵠⲆᐃⵠⵠⲆᐃ = k;
      for (var m = 0; m < i.length; m++) {
        document.getElementById(i[m][2] + k.name + "_number").addEventListener(i[m][0], i[m][1], false);
      }
    }
    $("[type='number']").keypress(function (a) {
      a.preventDefault();
    });
    this.options = {
      open: ul,
      id: document.getElementById("option_in_game"),
      style: document.getElementById("option_in_game").style,
      ⲆᐃᐃⲆⲆ: document.getElementById("agree_ing").style,
      ᐃᐃⲆᐃⲆᐃᐃ: document.getElementById("cancel_agree_ing").style,
      ᐃⵠΔⲆΔⲆⵠ: document.getElementById("quest_agree_ing").style,
      ᐃᐃⵠᐃᐃᐃⲆ: document.getElementById("spectator_agree_ing").style,
      ΔⲆΔⵠΔᐃΔ: document.getElementById("auto_feed_agree_ing").style,
      ΔᐃᐃΔⲆⵠⲆ: document.getElementById("info_agree_ing").style,
      ᐃⵠΔⲆΔᐃΔ: document.getElementById("pixelated_agree_ing").style,
      button: bf(60, 60, 0, ⲆⲆ[727]),
      ⲆΔᐃᐃΔᐃⵠⵠⵠ: function () {
        Fx.options.open = !Fx.options.open;
        if (Fx.options.open) {
          Fx.options.style.display = "inline-block";
        } else {
          Fx.options.style.display = "none";
        }
      },
      ΔΔⲆⵠΔᐃⲆᐃΔ: function () {
        zx.ᐃᐃᐃⵠⵠⲆᐃ();
      },
      ᐃΔᐃᐃⵠᐃᐃⲆᐃ: function () {
        zx.ⵠᐃᐃⲆᐃᐃⲆ();
      },
      high: function () {
        zx.ⵠⲆᐃᐃᐃⲆᐃᐃᐃ();
      },
      low: function () {
        zx.ⲆⵠⵠᐃᐃⲆⲆΔⲆ();
      },
      Ⲇᐃⵠᐃᐃ: function () {
        Fx.ᐃⲆᐃⲆ.Ⲇᐃⵠᐃᐃ();
      },
      ⵠᐃΔᐃⵠᐃⲆᐃΔ: function () {
        Fx.ᐃⲆⵠᐃⵠ.Ⲇᐃⵠᐃᐃ();
      },
      ΔⲆⲆⲆⲆⵠⵠⵠⲆ: function () {
        Fx.ⲆⵠΔΔ.Ⲇᐃⵠᐃᐃ();
      },
      ᐃⲆⵠⲆⵠᐃᐃⲆΔ: function () {
        Dx.ΔΔⲆΔᐃ.ΔⲆᐃΔΔᐃⲆ();
      },
      ⲆⲆᐃᐃᐃᐃᐃΔᐃ: function () {
        Dx.ⵠⲆΔⲆⲆ.ΔⲆᐃΔΔᐃⲆ();
      },
      ᐃⲆᐃΔΔ: function () {
        Fx.options.style.display = "none";
        Fx.options.open = false;
      },
      ᐃⲆⲆ: function () {
        this.style.left = Math.floor(bq - 235) + "px";
        this.style.top = Math.floor(jo - 170) + "px";
      }
    };
    document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ΔΔⲆⵠΔᐃⲆᐃΔ, false);
    document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ᐃΔᐃᐃⵠᐃᐃⲆᐃ, false);
    document.getElementById("low_ing").addEventListener("mouseup", this.options.low, false);
    document.getElementById("high_ing").addEventListener("mouseup", this.options.high, false);
    document.getElementById("quit_opt").addEventListener("mouseup", this.options.ᐃⲆᐃΔΔ, Ml);
    document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.Ⲇᐃⵠᐃᐃ, ul);
    document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ΔⲆⲆⲆⲆⵠⵠⵠⲆ, false);
    document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ⵠᐃΔᐃⵠᐃⲆᐃΔ, tg);
    document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ᐃⲆⵠⲆⵠᐃᐃⲆΔ, false);
    document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ⲆⲆᐃᐃᐃᐃᐃΔᐃ, false);
    this.ᐃⲆⵠᐃⵠ = {
      open: false,
      ᐃⲆⲆΔΔ: ⲆᐃᐃΔ.get("starve_cancel") ? ⲆᐃᐃΔ.get("starve_cancel") === "0" ? 0 : 1 : 1,
      id: document.getElementById("cancel_sure_delete"),
      style: document.getElementById("cancel_sure_delete").style,
      ⲆᐃᐃⲆⲆ: document.getElementById("cancel_agree").style,
      button: 0,
      ⲆΔ: 0,
      ᐃⲆᐃΔΔ: function () {
        Fx.ᐃⲆⵠᐃⵠ.style.display = "none";
        Fx.ᐃⲆⵠᐃⵠ.open = Wj;
      },
      ⲆⲆᐃΔⲆᐃⵠ: function () {
        if (Dx.ⵠΔⵠⵠ.ⵠⲆᐃᐃⲆ) {
          ⲆᐃⲆᐃ.ⵠⵠᐃΔᐃᐃΔΔᐃ();
        }
        Fx.ᐃⲆⵠᐃⵠ.ᐃⲆᐃΔΔ();
      },
      Ⲇᐃⵠᐃᐃ: function () {
        if (Fx.ᐃⲆⵠᐃⵠ.ᐃⲆⲆΔΔ) {
          ⲆᐃᐃΔ.set("starve_cancel", "0");
          Fx.ᐃⲆⵠᐃⵠ.ⲆᐃᐃⲆⲆ.display = "inline-block";
          Fx.options.ᐃᐃⲆᐃⲆᐃᐃ.display = "none";
        } else {
          ⲆᐃᐃΔ.set("starve_cancel", "1");
          Fx.ᐃⲆⵠᐃⵠ.ⲆᐃᐃⲆⲆ.display = "none";
          Fx.options.ᐃᐃⲆᐃⲆᐃᐃ.display = "inline-block";
        }
        Fx.ᐃⲆⵠᐃⵠ.ᐃⲆⲆΔΔ = !Fx.ᐃⲆⵠᐃⵠ.ᐃⲆⲆΔΔ;
      },
      ⲆⲆⲆⵠᐃᐃⲆ: function () {
        if (this.ᐃⲆⲆΔΔ) {
          this.style.display = "inline-block";
          this.open = true;
        } else {
          this.ⲆⲆᐃΔⲆᐃⵠ();
        }
      },
      ᐃⲆⲆ: function () {
        this.style.left = Math.floor(bq - 235) + "px";
        this.style.top = Math.floor(jo - 130) + "px";
      }
    };
    this.ᐃⲆⵠᐃⵠ.id.oncontextmenu = function () {
      return Ja;
    };
    this.ᐃⲆⵠᐃⵠ.ⲆᐃᐃⲆⲆ.display = "none";
    if (this.ᐃⲆⵠᐃⵠ.ᐃⲆⲆΔΔ) {
      this.options.ᐃᐃⲆᐃⲆᐃᐃ.display = "inline-block";
    } else {
      this.options.ᐃᐃⲆᐃⲆᐃᐃ.display = "none";
    }
    document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.ᐃⲆⵠᐃⵠ.ⲆⲆᐃΔⲆᐃⵠ, false);
    document.getElementById("cancel_no_delete").addEventListener("mouseup", this.ᐃⲆⵠᐃⵠ.ᐃⲆᐃΔΔ, false);
    document.getElementById("cancel_case_agree").addEventListener("mouseup", this.ᐃⲆⵠᐃⵠ.Ⲇᐃⵠᐃᐃ, Ee);
    document.addEventListener("cancel_sure_delete", function (a) {
      a.preventDefault();
    }, false);
    this.ⵠᐃⵠᐃΔⵠᐃ = {
      ᐃⲆⲆΔΔ: ⲆᐃᐃΔ.get("starve_aliasing") ? ⲆᐃᐃΔ.get("starve_aliasing") === "0" ? 0 : 1 : 1,
      ΔⵠΔⵠⲆⲆⲆ: function (a) {
        document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
      },
      Ⲇᐃⵠᐃᐃ: function () {
        if (Fx.ⵠᐃⵠᐃΔⵠᐃ.ᐃⲆⲆΔΔ === 0) {
          ⲆᐃᐃΔ.set("starve_aliasing", "1");
          Fx.ⵠᐃⵠᐃΔⵠᐃ.ΔⵠΔⵠⲆⲆⲆ(1);
          Fx.options.ᐃⵠΔⲆΔᐃΔ.display = "inline-block";
        } else {
          ⲆᐃᐃΔ.set("starve_aliasing", "0");
          Fx.ⵠᐃⵠᐃΔⵠᐃ.ΔⵠΔⵠⲆⲆⲆ(0);
          Fx.options.ᐃⵠΔⲆΔᐃΔ.display = "none";
        }
        Fx.ⵠᐃⵠᐃΔⵠᐃ.ᐃⲆⲆΔΔ = (Fx.ⵠᐃⵠᐃΔⵠᐃ.ᐃⲆⲆΔΔ + 1) % 2;
      }
    };
    if (this.ⵠᐃⵠᐃΔⵠᐃ.ᐃⲆⲆΔΔ === 1) {
      this.options.ᐃⵠΔⲆΔᐃΔ.display = "inline-block";
    } else {
      this.ⵠᐃⵠᐃΔⵠᐃ.ΔⵠΔⵠⲆⲆⲆ(0);
      this.options.ᐃⵠΔⲆΔᐃΔ.display = "none";
    }
    document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ⵠᐃⵠᐃΔⵠᐃ.Ⲇᐃⵠᐃᐃ, Fq);
    this.ⵠᐃⵠⲆⵠ = {
      ᐃⲆⲆΔΔ: ⲆᐃᐃΔ.get("starve_info_box") ? ⲆᐃᐃΔ.get("starve_info_box") === "0" ? 0 : 1 : 1,
      display: 0,
      x: 0,
      y: 0,
      id: 0,
      ⵠΔⵠⵠ: 0,
      Ⲇᐃⵠᐃᐃ: function () {
        if (Fx.ⵠᐃⵠⲆⵠ.ᐃⲆⲆΔΔ === 0) {
          ⲆᐃᐃΔ.set("starve_info_box", "1");
          Fx.options.ΔᐃᐃΔⲆⵠⲆ.display = "inline-block";
        } else {
          ⲆᐃᐃΔ.set("starve_info_box", "0");
          Fx.options.ΔᐃᐃΔⲆⵠⲆ.display = "none";
        }
        Fx.ⵠᐃⵠⲆⵠ.ᐃⲆⲆΔΔ = (Fx.ⵠᐃⵠⲆⵠ.ᐃⲆⲆΔΔ + 1) % 2;
      },
      ᐃΔⲆⵠ: function (a, b, c) {
        if (a && this.ᐃⲆⲆΔΔ) {
          this.display = 1;
          this.id = c === 0 ? b.id : nb[b.id].ᐃⲆⲆⲆ;
          this.x = b.info.translate.x + 80;
          this.y = b.info.translate.y;
          this.ⵠΔⵠⵠ = c;
        }
        return a;
      }
    };
    if (this.ⵠᐃⵠⲆⵠ.ᐃⲆⲆΔΔ === 1) {
      this.options.ΔᐃᐃΔⲆⵠⲆ.display = "inline-block";
    } else {
      this.options.ΔᐃᐃΔⲆⵠⲆ.display = "none";
    }
    document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.ⵠᐃⵠⲆⵠ.Ⲇᐃⵠᐃᐃ, ba);
    if (ⲆᐃᐃΔ.get("starve_scale")) {
      Xo = Number(ⲆᐃᐃΔ.get("starve_scale"));
      document.getElementById("input_ratio").value = Xo;
      Xo *= rr / vr;
      xr();
    }
    this.ΔΔⲆⲆᐃΔⵠ = function () {
      ⲆᐃᐃΔ.set("starve_scale", "" + document.getElementById("input_ratio").value);
      Xo = document.getElementById("input_ratio").value * (rr / vr);
      xr();
    };
    document.getElementById("input_ratio").addEventListener("input", this.ΔΔⲆⲆᐃΔⵠ, fg);
    this.ᐃⲆᐃⲆ = {
      open: false,
      ᐃⲆⲆΔΔ: ⲆᐃᐃΔ.get("starve_safe") ? ⲆᐃᐃΔ.get("starve_safe") === "0" ? 0 : 1 : 1,
      id: document.getElementById("sure_delete"),
      style: document.getElementById("sure_delete").style,
      ⲆᐃᐃⲆⲆ: document.getElementById("agree").style,
      button: 0,
      ⲆΔ: 0,
      ᐃⲆᐃΔΔ: function () {
        Fx.ᐃⲆᐃⲆ.style.display = "none";
        Fx.ᐃⲆᐃⲆ.open = false;
      },
      all: function () {
        if (!Dx.ⲆⲆⲆᐃⲆ.wait) {
          if (Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0 && Dx.ⵠΔⵠⵠ.id < 0 && !Dx.ΔⲆⲆᐃΔ.enabled) {
            ⲆᐃⲆᐃ.ⲆΔᐃᐃᐃⲆΔΔΔ(Fx.ᐃⲆᐃⲆ.button);
          }
          Fx.ᐃⲆᐃⲆ.ᐃⲆᐃΔΔ();
        }
      },
      ᐃⲆⲆⵠ: function () {
        if (Dx.ⵠΔⵠⵠ.ⲆᐃΔᐃΔ && !Dx.ⲆⲆⲆᐃⲆ.wait) {
          if (Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0 && Dx.ⵠΔⵠⵠ.id < 0 && !Dx.ΔⲆⲆᐃΔ.enabled) {
            ⲆᐃⲆᐃ.ᐃᐃⲆⵠⵠᐃᐃᐃᐃ(Fx.ᐃⲆᐃⲆ.button);
          }
          Fx.ᐃⲆᐃⲆ.ᐃⲆᐃΔΔ();
        }
      },
      ΔᐃⵠⵠⵠⲆⲆⵠΔ: function () {
        if (!Dx.ⲆⲆⲆᐃⲆ.wait) {
          if (Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0 && Dx.ⵠΔⵠⵠ.id < 0 && !Dx.ΔⲆⲆᐃΔ.enabled) {
            ⲆᐃⲆᐃ.ΔᐃⵠⵠⵠᐃᐃᐃⲆ(Fx.ᐃⲆᐃⲆ.button);
          }
          Fx.ᐃⲆᐃⲆ.ᐃⲆᐃΔΔ();
        }
      },
      Ⲇᐃⵠᐃᐃ: function () {
        if (Fx.ᐃⲆᐃⲆ.ᐃⲆⲆΔΔ) {
          ⲆᐃᐃΔ.set("starve_safe", "0");
          Fx.ᐃⲆᐃⲆ.ⲆᐃᐃⲆⲆ.display = "inline-block";
          Fx.options.ⲆᐃᐃⲆⲆ.display = "none";
        } else {
          ⲆᐃᐃΔ.set("starve_safe", "1");
          Fx.ᐃⲆᐃⲆ.ⲆᐃᐃⲆⲆ.display = "none";
          Fx.options.ⲆᐃᐃⲆⲆ.display = "inline-block";
        }
        Fx.ᐃⲆᐃⲆ.ᐃⲆⲆΔΔ = !Fx.ᐃⲆᐃⲆ.ᐃⲆⲆΔΔ;
      },
      ⲆⲆⲆⵠᐃᐃⲆ: function (a) {
        this.button = a;
        document.getElementById("item_to_del").src = ⲆⲆ[sh[a].ΔⲆ][0].Ⲇᐃⵠⵠⵠ === Wn ? ⲆⲆ[sh[a].ΔⲆ][0].src : ⲆⲆ[sh[a].ΔⲆ][0].Ⲇᐃⵠⵠⵠ;
        if (sh[a].ᐃⲆⲆⵠ && !Dx.ⵠᐃⲆⵠᐃ && Dx.ⵠΔⵠⵠ.ⲆᐃΔᐃΔ) {
          document.getElementById("recycle_delete").style.display = "inline-block";
        } else {
          document.getElementById("recycle_delete").style.display = "none";
        }
        if (this.ᐃⲆⲆΔΔ) {
          this.style.display = "inline-block";
          this.open = true;
        } else {
          this.all();
        }
      },
      ᐃⲆⲆ: function () {
        this.style.left = Math.floor(bq - 235) + "px";
        this.style.top = Math.floor(jo - 175) + "px";
      }
    };
    this.ᐃⲆᐃⲆ.ⲆᐃᐃⲆⲆ.display = "none";
    if (this.ᐃⲆᐃⲆ.ᐃⲆⲆΔΔ) {
      this.options.ⲆᐃᐃⲆⲆ.display = "inline-block";
    } else {
      this.options.ⲆᐃᐃⲆⲆ.display = "none";
    }
    document.getElementById("one_delete").addEventListener("mouseup", this.ᐃⲆᐃⲆ.ΔᐃⵠⵠⵠⲆⲆⵠΔ, false);
    document.getElementById("yes_delete").addEventListener("mouseup", this.ᐃⲆᐃⲆ.all, false);
    document.getElementById("recycle_delete").addEventListener("mouseup", this.ᐃⲆᐃⲆ.ᐃⲆⲆⵠ, ba);
    document.getElementById("no_delete").addEventListener("mouseup", this.ᐃⲆᐃⲆ.ᐃⲆᐃΔΔ, Rg);
    document.getElementById("case_agree").addEventListener("mouseup", this.ᐃⲆᐃⲆ.Ⲇᐃⵠᐃᐃ, false);
    this.ⵠⵠⵠΔⵠ = {
      open: false,
      Ⲇⵠⵠᐃⵠ: -1,
      button: bf(60, 60, 0, ⲆⲆ[592]),
      id: document.getElementById("shop_starterkit"),
      style: document.getElementById("shop_starterkit").style,
      ᐃⲆⲆ: function () {
        this.style.left = Math.floor(bq - 300) + "px";
        this.style.top = Math.floor(jo - 215) + "px";
      },
      ᐃⲆᐃΔΔ: function () {
        Fx.ⵠⵠⵠΔⵠ.open = false;
        Fx.ⵠⵠⵠΔⵠ.style.display = "none";
      },
      select: function () {
        Fx.ⵠⵠⵠΔⵠ.open = !Fx.ⵠⵠⵠΔⵠ.open;
        if (Fx.ⵠⵠⵠΔⵠ.open) {
          Fx.ⵠⵠⵠΔⵠ.style.display = "inline-block";
        } else {
          Fx.ⵠⵠⵠΔⵠ.style.display = "none";
        }
      },
      ᐃⵠᐃΔᐃⵠᐃ: function () {
        if (Fx.ⵠⵠⵠΔⵠ.Ⲇⵠⵠᐃⵠ >= 0) {
          ⲆᐃⲆᐃ.ΔⲆⵠⲆⵠⵠⵠⲆⵠ(Fx.ⵠⵠⵠΔⵠ.Ⲇⵠⵠᐃⵠ);
          Fx.ⵠⵠⵠΔⵠ.ᐃⲆᐃΔΔ();
          if (ga) {
            ga("send", "event", "Game", "kit", "" + Fx.ⵠⵠⵠΔⵠ.Ⲇⵠⵠᐃⵠ);
          }
        }
      },
      ᐃⲆᐃⵠⵠ: function () {
        var a = Dx.ⵠⵠⵠΔⵠ.value;
        document.getElementById("points_bank").innerHTML = ΔⵠΔᐃ.ΔΔᐃⵠᐃⵠⵠ(a) + " points";
        for (var b = 0; b < kf.length; b++) {
          if (kf[b].ΔⵠΔⲆΔ > a) {
            document.getElementById("starter" + (b + 1)).style.opacity = "0.4";
          } else {
            document.getElementById("starter" + (b + 1)).style.opacity = "1";
          }
        }
        for (b = 1; b < 13; b++) {
          document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + b).innerHTML = "";
        }
        document.getElementById("buy_kit").style.opacity = "0.2";
      },
      ⵠⲆⲆΔⲆΔⲆⵠⵠ: function () {
        if (this.id.length > 8) {
          var a = Number(this.id.charAt(7) + this.id.charAt(8));
        } else {
          a = Number(this.id.charAt(7));
        }
        var b = kf[a - 1];
        if (Dx.ⵠⵠⵠΔⵠ.value >= b.ΔⵠΔⲆΔ) {
          Fx.ⵠⵠⵠΔⵠ.Ⲇⵠⵠᐃⵠ = a;
          document.getElementById("buy_kit").style.opacity = "1";
        } else {
          Fx.ⵠⵠⵠΔⵠ.Ⲇⵠⵠᐃⵠ = -1;
          document.getElementById("buy_kit").style.opacity = "0.2";
        }
        b = b.items;
        for (var c = 1, d = 1; c < b.length + 1; c++) {
          if (b[c - 1][1] !== 29) {
            document.getElementById("inv_shop" + d).style.display = "inline-block";
            document.getElementById("inv_shop" + d).src = ⲆⲆ[sh[b[c - 1][1]].ΔⲆ][0].Ⲇᐃⵠⵠⵠ === Cr ? ⲆⲆ[sh[b[c - 1][1]].ΔⲆ][0].src : ⲆⲆ[sh[b[c - 1][1]].ΔⲆ][0].Ⲇᐃⵠⵠⵠ;
            document.getElementById("amount_shop" + d).innerHTML = "" + b[c - 1][0];
            d++;
          }
        }
        for (; d < 13; d++) {
          document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + d).innerHTML = "";
        }
      }
    };
    document.getElementById("quit3").addEventListener("mouseup", this.ⵠⵠⵠΔⵠ.ᐃⲆᐃΔΔ, false);
    document.getElementById("buy_kit").addEventListener("mouseup", this.ⵠⵠⵠΔⵠ.ᐃⵠᐃΔᐃⵠᐃ, false);
    for (m = 1; m < 11; m++) {
      document.getElementById("starter" + m).addEventListener("mouseup", this.ⵠⵠⵠΔⵠ.ⵠⲆⲆΔⲆΔⲆⵠⵠ, false);
    }
    this.ⲆⵠΔΔ = {
      open: ul,
      ᐃⲆⲆΔΔ: ⲆᐃᐃΔ.get("starve_quests") ? ⲆᐃᐃΔ.get("starve_quests") === "1" ? 1 : 0 : 0,
      button: bf(60, 60, 0, ⲆⲆ[755]),
      id: document.getElementById("chronoquest"),
      style: document.getElementById("chronoquest").style,
      ᐃⲆⲆ: function () {
        this.style.left = Math.floor(bq - 420) + "px";
        this.style.top = Math.floor(jo - 270) + "px";
      },
      ᐃⲆᐃΔΔ: function () {
        Fx.ⲆⵠΔΔ.style.display = "none";
        Fx.ⲆⵠΔΔ.open = false;
      },
      select: function () {
        Fx.ⲆⵠΔΔ.open = !Fx.ⲆⵠΔΔ.open;
        if (Fx.ⲆⵠΔΔ.open) {
          Fx.ⲆⵠΔΔ.style.display = "inline-block";
        } else {
          Fx.ⲆⵠΔΔ.style.display = "none";
        }
      },
      list: [],
      reset: function () {
        for (var a = 0; a < Ef.length; a++) {
          this.list[a] = 1;
          document.getElementById("timeremain_" + a).style.display = "inline-block";
          document.getElementById("time_finished_" + a).style.display = "none";
          document.getElementById("claim_reward_" + a).style.display = "none";
        }
      },
      ⲆΔᐃᐃⵠΔⲆ: 0,
      ⲆⲆⵠⵠⵠⵠΔ: 0,
      ᐃⲆΔⵠΔⲆⲆᐃⲆ: function () {
        if (Fx.ⲆⵠΔΔ.open) {
          var a = new Date().getTime();
          if (a - this.ⲆΔᐃᐃⵠΔⲆ >= 1000) {
            this.ⲆΔᐃᐃⵠΔⲆ = a;
            for (var b = 0; b < Ef.length; b++) {
              if (Fx.ⲆⵠΔΔ.list[b]) {
                var c = Ef[b].time - (a - Cx.ⲆⲆᐃⵠⲆ.ᐃⲆᐃⵠⵠ + Fx.ⲆⵠΔΔ.ⲆⲆⵠⵠⵠⵠΔ);
                document.getElementById("timeremain_" + b).innerHTML = c > 960000 ? Math.floor(c / 480000) + " days" : c > 480000 ? Math.floor(c / 480000) + " day" : c > 60000 ? Math.floor(c / 60000) + " min" : Math.floor(c / 1000) + " sec";
              }
            }
          }
        }
      },
      restore: function (a) {
        for (var b = 0; b < a.length; b++) {
          if (a[b] != 1) {
            Fx.ⲆⵠΔΔ.ΔΔᐃΔⵠᐃᐃ(b, a[b]);
          }
        }
      },
      ΔΔᐃΔⵠᐃᐃ: function (a, b) {
        if (b === 3 && (a === 11 || a === 12)) {
          Dx.ᐃᐃᐃΔ.ⲆᐃⲆᐃᐃⲆΔ(0, 1);
          Fx.ΔⲆΔᐃⲆΔΔ();
        }
        document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        if (b > 1) {
          document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
          document.getElementById("timeremain_" + a).style.display = "none";
        } else if (b === 0) {
          document.getElementById("time_finished_" + a).innerHTML = "FAILED";
          document.getElementById("timeremain_" + a).style.display = "none";
        }
        document.getElementById("claim_reward_" + a).style.display = b === 2 ? "inline-block" : "none";
        document.getElementById("time_finished_" + a).style.display = "inline";
        Fx.ⲆⵠΔΔ.list[a] = 0;
      },
      modify: function (a, b) {
        Fx.ⲆⵠΔΔ.ΔΔᐃΔⵠᐃᐃ(a, b);
        if (Fx.ⲆⵠΔΔ.ᐃⲆⲆΔΔ) {
          Fx.ⲆⵠΔΔ.open = yi;
          Fx.ⲆⵠΔΔ.style.display = "inline-block";
        }
      },
      Ⲇᐃⵠᐃᐃ: function () {
        if (Fx.ⲆⵠΔΔ.ᐃⲆⲆΔΔ) {
          ⲆᐃᐃΔ.set("starve_quests", "0");
          Fx.options.ᐃⵠΔⲆΔⲆⵠ.display = "none";
        } else {
          ⲆᐃᐃΔ.set("starve_quests", "1");
          Fx.options.ᐃⵠΔⲆΔⲆⵠ.display = "inline-block";
        }
        Fx.ⲆⵠΔΔ.ᐃⲆⲆΔΔ = !Fx.ⲆⵠΔΔ.ᐃⲆⲆΔΔ;
      },
      ᐃᐃⵠᐃⲆΔⵠⲆⵠ: function () {
        var a = Number(this.id.charAt(13));
        var b = Number(this.id.charAt(14));
        if (this.id.charAt(14) !== "" && b >= 0 && b <= 9) {
          a = a * 10 + b;
        }
        ⲆᐃⲆᐃ.ᐃⵠⲆᐃΔΔᐃᐃⲆ(a);
      }
    };
    if (this.ⲆⵠΔΔ.ᐃⲆⲆΔΔ) {
      this.options.ᐃⵠΔⲆΔⲆⵠ.display = "inline-block";
    } else {
      this.options.ᐃⵠΔⲆΔⲆⵠ.display = "none";
    }
    document.getElementById("quit_chronoquest").addEventListener("mouseup", this.ⲆⵠΔΔ.ᐃⲆᐃΔΔ, x);
    for (m = 0; m < Ef.length; m++) {
      document.getElementById("claim_reward_" + m).addEventListener("mouseup", this.ⲆⵠΔΔ.ᐃᐃⵠᐃⲆΔⵠⲆⵠ, Fq);
    }
    this.Δᐃᐃⵠ = {
      open: false,
      button: bf(60, 60, 0, ⲆⲆ[708]),
      list: {
        id: document.getElementById("recipe_craft"),
        style: document.getElementById("recipe_craft").style,
        ⵠᐃⲆⲆᐃΔᐃ: [],
        ΔⵠⲆΔⵠⲆⲆ: 0,
        ᐃⲆⲆ: function () {
          this.style.left = Math.floor(bq - 335) + "px";
          this.style.top = Math.floor(jo - 215) + "px";
        },
        ᐃⲆᐃΔΔ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          Fx.Δᐃᐃⵠ.open = false;
        },
        ⲆᐃⵠᐃⲆⵠᐃ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          document.getElementById("home_craft").style.display = "inline-block";
        },
        ⵠⲆᐃⵠ: function (a) {
          if ((b = this.ⵠᐃⲆⲆᐃΔᐃ[a]).ΔᐃⲆ) {
            document.getElementById("watercraft").style.display = "inline-block";
          } else {
            document.getElementById("watercraft").style.display = "none";
          }
          if (b.f) {
            document.getElementById("firecraft").style.display = "inline-block";
          } else {
            document.getElementById("firecraft").style.display = "none";
          }
          if (b.w) {
            document.getElementById("workcraft").style.display = "inline-block";
          } else {
            document.getElementById("workcraft").style.display = "none";
          }
          if (b.e) {
            document.getElementById("wellcraft").style.display = "inline-block";
          } else {
            document.getElementById("wellcraft").style.display = "none";
          }
          for (var b = b.r, c = (a = 0, 1); a < b.length; a++) {
            document.getElementById("inv" + c).style.display = "inline-block";
            document.getElementById("inv" + c).src = ⲆⲆ[sh[b[a][0]].ΔⲆ][0].Ⲇᐃⵠⵠⵠ === zo ? ⲆⲆ[sh[b[a][0]].ΔⲆ][0].src : ⲆⲆ[sh[b[a][0]].ΔⲆ][0].Ⲇᐃⵠⵠⵠ;
            document.getElementById("numb" + c).innerHTML = "" + b[a][1];
            c++;
          }
          for (; c < 6; c++) {
            document.getElementById("inv" + c).style.display = "none";
            document.getElementById("numb" + c).innerHTML = "";
          }
        },
        select: function (a) {
          this.ΔⵠⲆΔⵠⲆⲆ = a;
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("workcraft").style.display = "none";
          document.getElementById("firecraft").style.display = "none";
          document.getElementById("watercraft").style.display = "none";
          document.getElementById("wellcraft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "inline-block";
          document.getElementById("inv1").style.display = "none";
          document.getElementById("inv2").style.display = "none";
          document.getElementById("inv3").style.display = "none";
          document.getElementById("inv4").style.display = "none";
          document.getElementById("inv5").style.display = "none";
          document.getElementById("numb1").innerHTML = "";
          document.getElementById("numb2").innerHTML = "";
          document.getElementById("numb3").innerHTML = "";
          document.getElementById("numb4").innerHTML = "";
          document.getElementById("numb5").innerHTML = "";
          for (var b = 0, c = 0; b < nb.length; b++) {
            var d = nb[b];
            if (a === d.ⵠΔΔ) {
              this.ⵠᐃⲆⲆᐃΔᐃ[c] = d;
              c++;
              document.getElementById("img_" + c).style.display = "inline-block";
              document.getElementById("img_" + c).src = ⲆⲆ[sh[d.ᐃⲆⲆⲆ].ΔⲆ][0].Ⲇᐃⵠⵠⵠ === Wn ? ⲆⲆ[sh[d.ᐃⲆⲆⲆ].ΔⲆ][0].src : ⲆⲆ[sh[d.ᐃⲆⲆⲆ].ΔⲆ][0].Ⲇᐃⵠⵠⵠ;
            }
          }
          for (c++; c < 49; c++) {
            document.getElementById("img_" + c).style.display = "none";
          }
        }
      },
      ΔⵠⲆΔᐃⵠΔ: {
        id: document.getElementById("home_craft"),
        style: document.getElementById("home_craft").style,
        ᐃⲆⲆ: function () {
          this.style.left = Math.floor(bq - 285) + "px";
          this.style.top = Math.floor(jo - 170) + "px";
        },
        ᐃⲆᐃΔΔ: function () {
          document.getElementById("home_craft").style.display = "none";
          Fx.Δᐃᐃⵠ.open = false;
        }
      },
      ᐃⵠΔⲆᐃⵠⲆΔΔ: function () {
        this.open = !this.open;
        if (this.open) {
          document.getElementById("home_craft").style.display = "inline-block";
        } else {
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "none";
        }
      }
    };
    document.getElementById("quit").addEventListener("mouseup", this.Δᐃᐃⵠ.ΔⵠⲆΔᐃⵠΔ.ᐃⲆᐃΔΔ, Wj);
    document.getElementById("quitmenu").addEventListener("mouseup", this.Δᐃᐃⵠ.list.ᐃⲆᐃΔΔ, ns);
    document.getElementById("backhome").addEventListener("mouseup", this.Δᐃᐃⵠ.list.ⲆᐃⵠᐃⲆⵠᐃ, false);
    document.getElementById("hatcategory").addEventListener("mouseup", function () {
      Fx.Δᐃᐃⵠ.list.select(2);
    }, false);
    document.getElementById("weaponcategory").addEventListener("mouseup", function () {
      Fx.Δᐃᐃⵠ.list.select(1);
    }, false);
    document.getElementById("toolcategory").addEventListener("mouseup", function () {
      Fx.Δᐃᐃⵠ.list.select(0);
    }, false);
    document.getElementById("foodcategory").addEventListener("mouseup", function () {
      Fx.Δᐃᐃⵠ.list.select(3);
    }, false);
    document.getElementById("placeablecategory").addEventListener("mouseup", function () {
      Fx.Δᐃᐃⵠ.list.select(4);
    }, al);
    document.getElementById("constructioncategory").addEventListener("mouseup", function () {
      Fx.Δᐃᐃⵠ.list.select(5);
    }, Ja);
    document.getElementById("img_1").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(0);
    }, false);
    document.getElementById("img_2").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(1);
    }, false);
    document.getElementById("img_3").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(2);
    }, false);
    document.getElementById("img_4").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(3);
    }, false);
    document.getElementById("img_5").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(4);
    }, false);
    document.getElementById("img_6").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(5);
    }, false);
    document.getElementById("img_7").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(6);
    }, ol);
    document.getElementById("img_8").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(7);
    }, Ja);
    document.getElementById("img_9").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(8);
    }, false);
    document.getElementById("img_10").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(9);
    }, false);
    document.getElementById("img_11").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(10);
    }, Po);
    document.getElementById("img_12").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(11);
    }, ol);
    document.getElementById("img_13").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(12);
    }, false);
    document.getElementById("img_14").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(13);
    }, Ee);
    document.getElementById("img_15").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(14);
    }, fg);
    document.getElementById("img_16").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(15);
    }, false);
    document.getElementById("img_17").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(16);
    }, uh);
    document.getElementById("img_18").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(17);
    }, false);
    document.getElementById("img_19").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(18);
    }, Po);
    document.getElementById("img_20").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(19);
    }, Fq);
    document.getElementById("img_21").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(20);
    }, Ml);
    document.getElementById("img_22").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(21);
    }, Rg);
    document.getElementById("img_23").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(22);
    }, false);
    document.getElementById("img_24").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(23);
    }, Ja);
    document.getElementById("img_25").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(24);
    }, fh);
    document.getElementById("img_26").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(25);
    }, ul);
    document.getElementById("img_27").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(26);
    }, false);
    document.getElementById("img_28").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(27);
    }, false);
    document.getElementById("img_29").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(28);
    }, false);
    document.getElementById("img_30").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(29);
    }, false);
    document.getElementById("img_31").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(30);
    }, false);
    document.getElementById("img_32").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(31);
    }, Fq);
    document.getElementById("img_33").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(32);
    }, ol);
    document.getElementById("img_34").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(33);
    }, false);
    document.getElementById("img_35").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(34);
    }, false);
    document.getElementById("img_36").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(35);
    }, fg);
    document.getElementById("img_37").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(36);
    }, false);
    document.getElementById("img_38").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(37);
    }, false);
    document.getElementById("img_39").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(38);
    }, false);
    document.getElementById("img_40").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(39);
    }, Ee);
    document.getElementById("img_41").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(40);
    }, Po);
    document.getElementById("img_42").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(41);
    }, false);
    document.getElementById("img_43").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(42);
    }, ir);
    document.getElementById("img_44").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(43);
    }, tg);
    document.getElementById("img_45").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(44);
    }, false);
    document.getElementById("img_46").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(45);
    }, tg);
    document.getElementById("img_47").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(46);
    }, x);
    document.getElementById("img_48").addEventListener("mousedown", function () {
      Fx.Δᐃᐃⵠ.list.ⵠⲆᐃⵠ(47);
    }, false);
    this.ΔΔᐃΔⲆ = {
      translate: {
        y: 0,
        x: 0
      },
      ⲆΔⵠᐃⵠ: {
        x: -1,
        y: -1
      },
      ΔΔΔᐃ: [],
      focus: function (a) {
        var b = this.translate.y + (Dx.ᐃᐃᐃΔ.ΔⲆⲆΔΔ.length > 0 ? -120 : -50);
        if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
          this.ⲆΔⵠᐃⵠ.x = a.x - this.translate.x;
          this.ⲆΔⵠᐃⵠ.y = a.y - b;
        }
      }
    };
    this.ⵠΔᐃⲆ = {
      translate: {
        x: 0,
        y: 0
      },
      ΔⲆ: ⲆⲆ[278],
      Ⲇᐃ: document.createElement("canvas")
    };
    this.ⵠΔᐃⲆ.Ⲇᐃ.width = this.ⵠΔᐃⲆ.ΔⲆ.width;
    this.ⵠΔᐃⲆ.Ⲇᐃ.height = this.ⵠΔᐃⲆ.ΔⲆ.height;
    this.ⵠΔᐃⲆ.Ⲇ = this.ⵠΔᐃⲆ.Ⲇᐃ.getContext("2d");
    this.ΔⲆⵠⲆ = {
      translate: {
        y: 0,
        x: 0
      },
      ΔⲆ: ⲆⲆ[267],
      ΔⵠᐃⲆ: Zu,
      y: 0
    };
    this.ⲆΔⲆΔⲆⲆΔ = function () {
      ⲆⵠᐃᐃΔ = document.getElementById("team_box");
      ⲆⵠᐃᐃΔ.innerHTML = "";
      ⲆⵠᐃᐃΔ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + Cx.ΔΔΔᐃ[Dx.ᐃᐃᐃᐃⵠ[0]].ⲆⵠΔᐃΔ + "</div";
      for (var a = 1; a < Dx.ᐃᐃᐃᐃⵠ.length; a++) {
        ⲆⵠᐃᐃΔ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + Cx.ΔΔΔᐃ[Dx.ᐃᐃᐃᐃⵠ[a]].ⲆⵠΔᐃΔ + "</div></div>";
      }
      ⲆⵠᐃᐃΔ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
      ⲆⵠᐃᐃΔ.style.display = "inline-block";
      document.getElementById("leave").addEventListener("click", ⲆᐃⲆᐃ.ⲆΔⲆΔⲆⲆΔ, fl);
    };
    this.ΔⲆΔΔᐃᐃΔᐃⵠ = function () {
      ⲆⵠᐃᐃΔ = document.getElementById("team_box");
      ⲆⵠᐃᐃΔ.innerHTML = "";
      ⲆⵠᐃᐃΔ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + Cx.ΔΔΔᐃ[Dx.ᐃᐃᐃᐃⵠ[0]].ⲆⵠΔᐃΔ + "</div";
      for (var a = 1; a < Dx.ᐃᐃᐃᐃⵠ.length; a++) {
        ⲆⵠᐃᐃΔ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + Cx.ΔΔΔᐃ[Dx.ᐃᐃᐃᐃⵠ[a]].ⲆⵠΔᐃΔ + "</div></div>";
      }
      ⲆⵠᐃᐃΔ.innerHTML += "</div>";
      ⲆⵠᐃᐃΔ.style.display = "inline-block";
    };
    this.ᐃᐃΔⵠⲆᐃᐃΔΔ = function () {
      ⲆⵠᐃᐃΔ = document.getElementById("team_box");
      ⲆⵠᐃᐃΔ.innerHTML = "";
      ⲆⵠᐃᐃΔ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + Cx.ΔΔΔᐃ[Dx.ᐃᐃᐃᐃⵠ[0]].ⲆⵠΔᐃΔ + "</div";
      for (var a = 1; a < Dx.ᐃᐃᐃᐃⵠ.length; a++) {
        ⲆⵠᐃᐃΔ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + Cx.ΔΔΔᐃ[Dx.ᐃᐃᐃᐃⵠ[a]].ⲆⵠΔᐃΔ + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
      }
      if (Dx.ᐃᐃⲆⵠΔ.lock === 0) {
        ⲆⵠᐃᐃΔ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
      } else {
        ⲆⵠᐃᐃΔ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
      }
      document.getElementById("lock_team").addEventListener("click", ⲆᐃⲆᐃ.ⵠⵠⵠΔⲆⲆᐃΔⲆ, false);
      ⲆⵠᐃᐃΔ.style.display = "inline-block";
      for (a = 1; a < Dx.ᐃᐃᐃᐃⵠ.length; a++) {
        switch (a) {
          case 1:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ⲆᐃⲆᐃ.ⵠⲆⵠᐃⵠⵠᐃ(1);
            }, fh);
            break;
          case 2:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ⲆᐃⲆᐃ.ⵠⲆⵠᐃⵠⵠᐃ(2);
            }, false);
            break;
          case 3:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ⲆᐃⲆᐃ.ⵠⲆⵠᐃⵠⵠᐃ(3);
            }, false);
            break;
          case 4:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ⲆᐃⲆᐃ.ⵠⲆⵠᐃⵠⵠᐃ(4);
            }, ns);
            break;
          case 5:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ⲆᐃⲆᐃ.ⵠⲆⵠᐃⵠⵠᐃ(5);
            }, ns);
            break;
          case 6:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ⲆᐃⲆᐃ.ⵠⲆⵠᐃⵠⵠᐃ(6);
            }, false);
            break;
          case 7:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ⲆᐃⲆᐃ.ⵠⲆⵠᐃⵠⵠᐃ(7);
            }, false);
            break;
          case 8:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ⲆᐃⲆᐃ.ⵠⲆⵠᐃⵠⵠᐃ(8);
            }, false);
        }
      }
    };
    this.ⵠⵠᐃⵠⵠ = [];
    this.ⵠⵠᐃⵠⵠ[2] = {
      button: bf(60, 60, 0, ⲆⲆ[556]),
      action: this.ⲆΔⲆΔⲆⲆΔ
    };
    this.ⵠⵠᐃⵠⵠ[3] = {
      button: bf(60, 60, 0, ⲆⲆ[556]),
      action: ⲆᐃⲆᐃ.ⵠⵠⵠⵠⲆⵠⵠⲆᐃ
    };
    this.ⵠⵠᐃⵠⵠ[0] = {
      button: bf(60, 60, 0, ⲆⲆ[557]),
      action: this.ᐃᐃΔⵠⲆᐃᐃΔΔ
    };
    this.ⵠⵠᐃⵠⵠ[1] = {
      button: bf(60, 60, 0, ⲆⲆ[561]),
      action: this.ΔⲆΔΔᐃᐃΔᐃⵠ
    };
    this.ⵠⵠᐃⵠⵠ[4] = {
      button: bf(60, 60, 0, ⲆⲆ[560]),
      action: function () {}
    };
    this.ⲆⲆᐃᐃⲆ = -1;
    this.ΔΔⵠⲆⲆΔⲆ = bf(60, 60, 0, ⲆⲆ[723]);
    this.ⵠⲆⲆⵠΔᐃᐃ = bf(60, 60, 0, ⲆⲆ[724]);
    this.ᐃⵠⵠⵠΔᐃⵠ = bf(60, 60, 0, ⲆⲆ[658]);
    this.ᐃⵠⲆⵠⲆⲆⲆ = bf(60, 60, 0, ⲆⲆ[657]);
    this.ΔΔᐃᐃⲆᐃᐃ = bf(60, 60, 0, ⲆⲆ[658]);
    this.ΔⵠⵠⲆΔᐃᐃ = bf(60, 60, 0, ⲆⲆ[316]);
    this.ᐃᐃΔᐃΔΔⲆ = bf(60, 60, 0, ⲆⲆ[315]);
    this.ΔⲆⲆⲆΔΔᐃ = bf(60, 60, 0, ⲆⲆ[297]);
    this.ΔⲆΔⵠⲆⲆⲆ = bf(60, 60, 0, ⲆⲆ[298]);
    this.ⲆⲆᐃᐃΔⲆⲆ = bf(60, 60, 0, ⲆⲆ[418]);
    this.ΔⲆᐃⲆⲆΔᐃ = bf(60, 60, 0, ⲆⲆ[938]);
    this.ⵠⲆᐃᐃⵠΔⲆ = bf(60, 60, 0, ⲆⲆ[412]);
    this.ⵠⵠᐃⵠⵠᐃΔ = bf(60, 60, 0, ⲆⲆ[536]);
    this.ᐃⲆΔⲆΔⲆΔ = bf(60, 60, 0, ⲆⲆ[535]);
    this.ᐃⵠⵠⵠⵠΔⲆ = bf(60, 60, 0, ⲆⲆ[538]);
    this.ᐃⲆᐃᐃⵠ = bf(120, 120, 0, ⲆⲆ[149]);
    this.ᐃⲆᐃᐃⵠ.info.translate.x = 10;
    this.ᐃⲆᐃᐃⵠ.info.translate.y = 10;
    this.ΔΔⲆ = [];
    this.ΔΔⲆ[0] = bf(68, 68, 0, ⲆⲆ[340], 3);
    this.ΔΔⲆ[0].id = 0;
    this.ΔΔⲆ[1] = bf(68, 68, 0, ⲆⲆ[341], 3);
    this.ΔΔⲆ[1].id = 1;
    this.ΔΔⲆ[108] = bf(68, 68, 0, ⲆⲆ[342], 3);
    this.ΔΔⲆ[108].id = 108;
    this.ΔΔⲆ[109] = bf(68, 68, 0, ⲆⲆ[343], 3);
    this.ΔΔⲆ[109].id = 109;
    this.ΔΔⲆ[110] = bf(68, 68, 0, ⲆⲆ[269], 3);
    this.ΔΔⲆ[110].id = 110;
    this.ΔΔⲆ[233] = bf(68, 68, 0, ⲆⲆ[1155], 3);
    this.ΔΔⲆ[233].id = 233;
    this.ΔΔⲆ[111] = bf(68, 68, 0, ⲆⲆ[270], 3);
    this.ΔΔⲆ[111].id = 111;
    this.ΔΔⲆ[112] = bf(68, 68, 0, ⲆⲆ[271], 3);
    this.ΔΔⲆ[112].id = 112;
    this.ΔΔⲆ[3] = bf(68, 68, 0, ⲆⲆ[272], 3);
    this.ΔΔⲆ[3].id = 3;
    this.ΔΔⲆ[4] = bf(68, 68, 0, ⲆⲆ[344], 3);
    this.ΔΔⲆ[4].id = 4;
    this.ΔΔⲆ[5] = bf(68, 68, 0, ⲆⲆ[345], 3);
    this.ΔΔⲆ[5].id = 5;
    this.ΔΔⲆ[57] = bf(68, 68, 0, ⲆⲆ[831], 3);
    this.ΔΔⲆ[57].id = 57;
    this.ΔΔⲆ[6] = bf(68, 68, 0, ⲆⲆ[346], 3);
    this.ΔΔⲆ[6].id = 6;
    this.ΔΔⲆ[113] = bf(68, 68, 0, ⲆⲆ[273], 3);
    this.ΔΔⲆ[113].id = 113;
    this.ΔΔⲆ[114] = bf(68, 68, 0, ⲆⲆ[358], 3);
    this.ΔΔⲆ[114].id = 114;
    this.ΔΔⲆ[115] = bf(68, 68, 0, ⲆⲆ[348], 3);
    this.ΔΔⲆ[115].id = 115;
    this.ΔΔⲆ[162] = bf(68, 68, 0, ⲆⲆ[349], 3);
    this.ΔΔⲆ[162].id = 162;
    this.ΔΔⲆ[160] = bf(68, 68, 0, ⲆⲆ[350], 3);
    this.ΔΔⲆ[160].id = 160;
    this.ΔΔⲆ[8] = bf(68, 68, 0, ⲆⲆ[274], 3);
    this.ΔΔⲆ[8].id = 8;
    this.ΔΔⲆ[117] = bf(68, 68, 0, ⲆⲆ[351], 3);
    this.ΔΔⲆ[117].id = 117;
    this.ΔΔⲆ[116] = bf(68, 68, 0, ⲆⲆ[275], 3);
    this.ΔΔⲆ[116].id = 116;
    this.ΔΔⲆ[118] = bf(68, 68, 0, ⲆⲆ[276], 3);
    this.ΔΔⲆ[118].id = 118;
    this.ΔΔⲆ[195] = bf(68, 68, 0, ⲆⲆ[352], 3);
    this.ΔΔⲆ[195].id = 195;
    this.ΔΔⲆ[161] = bf(68, 68, 0, ⲆⲆ[353], 3);
    this.ΔΔⲆ[161].id = 161;
    this.ΔΔⲆ[163] = bf(68, 68, 0, ⲆⲆ[354], 3);
    this.ΔΔⲆ[163].id = 163;
    this.ΔΔⲆ[164] = bf(68, 68, 0, ⲆⲆ[355], 3);
    this.ΔΔⲆ[164].id = 164;
    this.ΔΔⲆ[165] = bf(68, 68, 0, ⲆⲆ[356], 3);
    this.ΔΔⲆ[165].id = 165;
    this.ΔΔⲆ[166] = bf(68, 68, 0, ⲆⲆ[357], 3);
    this.ΔΔⲆ[166].id = 166;
    this.ΔΔⲆ[167] = bf(68, 68, 0, ⲆⲆ[359], 3);
    this.ΔΔⲆ[167].id = 167;
    this.ΔΔⲆ[168] = bf(68, 68, 0, ⲆⲆ[382], 3);
    this.ΔΔⲆ[168].id = 168;
    this.ΔΔⲆ[169] = bf(68, 68, 0, ⲆⲆ[383], 3);
    this.ΔΔⲆ[169].id = 169;
    this.ΔΔⲆ[170] = bf(68, 68, 0, ⲆⲆ[384], 3);
    this.ΔΔⲆ[170].id = 170;
    this.ΔΔⲆ[2] = bf(68, 68, 0, ⲆⲆ[386], 3);
    this.ΔΔⲆ[2].id = 2;
    this.ΔΔⲆ[237] = bf(68, 68, 0, ⲆⲆ[1163], 3);
    this.ΔΔⲆ[237].id = 237;
    this.ΔΔⲆ[174] = bf(68, 68, 0, ⲆⲆ[394], 3);
    this.ΔΔⲆ[174].id = 174;
    this.ΔΔⲆ[222] = bf(68, 68, 0, ⲆⲆ[1036], 3);
    this.ΔΔⲆ[222].id = 222;
    this.ΔΔⲆ[231] = bf(68, 68, 0, ⲆⲆ[1038], 3);
    this.ΔΔⲆ[231].id = 231;
    this.ΔΔⲆ[232] = bf(68, 68, 0, ⲆⲆ[1040], 3);
    this.ΔΔⲆ[232].id = 232;
    this.ΔΔⲆ[234] = bf(68, 68, 0, ⲆⲆ[1157], 3);
    this.ΔΔⲆ[234].id = 234;
    this.ΔΔⲆ[10] = bf(68, 68, 0, ⲆⲆ[387], 3);
    this.ΔΔⲆ[10].id = 10;
    this.ΔΔⲆ[171] = bf(68, 68, 0, ⲆⲆ[388], 3);
    this.ΔΔⲆ[171].id = 171;
    this.ΔΔⲆ[172] = bf(68, 68, 0, ⲆⲆ[389], 3);
    this.ΔΔⲆ[172].id = 172;
    this.ΔΔⲆ[173] = bf(68, 68, 0, ⲆⲆ[390], 3);
    this.ΔΔⲆ[173].id = 173;
    this.ΔΔⲆ[11] = bf(68, 68, 0, ⲆⲆ[391], 3);
    this.ΔΔⲆ[11].id = 11;
    this.ΔΔⲆ[12] = bf(68, 68, 0, ⲆⲆ[403], 3);
    this.ΔΔⲆ[12].id = 12;
    this.ΔΔⲆ[13] = bf(68, 68, 0, ⲆⲆ[397], 3);
    this.ΔΔⲆ[13].id = 13;
    this.ΔΔⲆ[14] = bf(68, 68, 0, ⲆⲆ[400], 3);
    this.ΔΔⲆ[14].id = 14;
    this.ΔΔⲆ[15] = bf(68, 68, 0, ⲆⲆ[406], 3);
    this.ΔΔⲆ[15].id = 15;
    this.ΔΔⲆ[16] = bf(68, 68, 0, ⲆⲆ[875], 3);
    this.ΔΔⲆ[16].id = 16;
    this.ΔΔⲆ[119] = bf(68, 68, 0, ⲆⲆ[410], 3);
    this.ΔΔⲆ[119].id = 119;
    this.ΔΔⲆ[23] = bf(68, 68, 0, ⲆⲆ[422], 3);
    this.ΔΔⲆ[23].id = 23;
    this.ΔΔⲆ[24] = bf(68, 68, 0, ⲆⲆ[425], 3);
    this.ΔΔⲆ[24].id = 24;
    this.ΔΔⲆ[87] = bf(68, 68, 0, ⲆⲆ[1229], 3);
    this.ΔΔⲆ[87].id = 87;
    this.ΔΔⲆ[88] = bf(68, 68, 0, ⲆⲆ[1232], 3);
    this.ΔΔⲆ[88].id = 88;
    this.ΔΔⲆ[80] = bf(68, 68, 0, ⲆⲆ[1139], 3);
    this.ΔΔⲆ[80].id = 80;
    this.ΔΔⲆ[81] = bf(68, 68, 0, ⲆⲆ[1142], 3);
    this.ΔΔⲆ[81].id = 81;
    this.ΔΔⲆ[101] = bf(68, 68, 0, ⲆⲆ[1167], 3);
    this.ΔΔⲆ[101].id = 101;
    this.ΔΔⲆ[64] = bf(68, 68, 0, ⲆⲆ[571], 3);
    this.ΔΔⲆ[64].id = 64;
    this.ΔΔⲆ[71] = bf(68, 68, 0, ⲆⲆ[1240], 3);
    this.ΔΔⲆ[71].id = 71;
    this.ΔΔⲆ[102] = bf(68, 68, 0, ⲆⲆ[1170], 3);
    this.ΔΔⲆ[102].id = 102;
    this.ΔΔⲆ[65] = bf(68, 68, 0, ⲆⲆ[574], 3);
    this.ΔΔⲆ[65].id = 65;
    this.ΔΔⲆ[72] = bf(68, 68, 0, ⲆⲆ[1243], 3);
    this.ΔΔⲆ[72].id = 72;
    this.ΔΔⲆ[103] = bf(68, 68, 0, ⲆⲆ[1173], 3);
    this.ΔΔⲆ[103].id = 103;
    this.ΔΔⲆ[66] = bf(68, 68, 0, ⲆⲆ[577], 3);
    this.ΔΔⲆ[66].id = 66;
    this.ΔΔⲆ[73] = bf(68, 68, 0, ⲆⲆ[1246], 3);
    this.ΔΔⲆ[73].id = 73;
    this.ΔΔⲆ[104] = bf(68, 68, 0, ⲆⲆ[1176], 3);
    this.ΔΔⲆ[104].id = 104;
    this.ΔΔⲆ[67] = bf(68, 68, 0, ⲆⲆ[580], 3);
    this.ΔΔⲆ[67].id = 67;
    this.ΔΔⲆ[74] = bf(68, 68, 0, ⲆⲆ[1249], 3);
    this.ΔΔⲆ[74].id = 74;
    this.ΔΔⲆ[105] = bf(68, 68, 0, ⲆⲆ[1179], 3);
    this.ΔΔⲆ[105].id = 105;
    this.ΔΔⲆ[68] = bf(68, 68, 0, ⲆⲆ[583], 3);
    this.ΔΔⲆ[68].id = 68;
    this.ΔΔⲆ[75] = bf(68, 68, 0, ⲆⲆ[1252], 3);
    this.ΔΔⲆ[75].id = 75;
    this.ΔΔⲆ[106] = bf(68, 68, 0, ⲆⲆ[1182], 3);
    this.ΔΔⲆ[106].id = 106;
    this.ΔΔⲆ[69] = bf(68, 68, 0, ⲆⲆ[586], 3);
    this.ΔΔⲆ[69].id = 69;
    this.ΔΔⲆ[76] = bf(68, 68, 0, ⲆⲆ[1255], 3);
    this.ΔΔⲆ[76].id = 76;
    this.ΔΔⲆ[107] = bf(68, 68, 0, ⲆⲆ[1185], 3);
    this.ΔΔⲆ[107].id = 107;
    this.ΔΔⲆ[70] = bf(68, 68, 0, ⲆⲆ[589], 3);
    this.ΔΔⲆ[70].id = 70;
    this.ΔΔⲆ[94] = bf(68, 68, 0, ⲆⲆ[1258], 3);
    this.ΔΔⲆ[94].id = 94;
    this.ΔΔⲆ[95] = bf(68, 68, 0, ⲆⲆ[1261], 3);
    this.ΔΔⲆ[95].id = 95;
    this.ΔΔⲆ[96] = bf(68, 68, 0, ⲆⲆ[1264], 3);
    this.ΔΔⲆ[96].id = 96;
    this.ΔΔⲆ[97] = bf(68, 68, 0, ⲆⲆ[1267], 3);
    this.ΔΔⲆ[97].id = 97;
    this.ΔΔⲆ[98] = bf(68, 68, 0, ⲆⲆ[1270], 3);
    this.ΔΔⲆ[98].id = 98;
    this.ΔΔⲆ[99] = bf(68, 68, 0, ⲆⲆ[1273], 3);
    this.ΔΔⲆ[99].id = 99;
    this.ΔΔⲆ[58] = bf(68, 68, 0, ⲆⲆ[828], 3);
    this.ΔΔⲆ[58].id = 58;
    this.ΔΔⲆ[25] = bf(68, 68, 0, ⲆⲆ[431], 3);
    this.ΔΔⲆ[25].id = 25;
    this.ΔΔⲆ[26] = bf(68, 68, 0, ⲆⲆ[434], 3);
    this.ΔΔⲆ[26].id = 26;
    this.ΔΔⲆ[27] = bf(68, 68, 0, ⲆⲆ[437], 3);
    this.ΔΔⲆ[27].id = 27;
    this.ΔΔⲆ[28] = bf(68, 68, 0, ⲆⲆ[440], 3);
    this.ΔΔⲆ[28].id = 28;
    this.ΔΔⲆ[120] = bf(68, 68, 0, ⲆⲆ[443], 3);
    this.ΔΔⲆ[120].id = 120;
    this.ΔΔⲆ[29] = bf(68, 68, 0, ⲆⲆ[385], 3);
    this.ΔΔⲆ[29].id = 29;
    this.ΔΔⲆ[121] = bf(68, 68, 0, ⲆⲆ[446], 3);
    this.ΔΔⲆ[121].id = 121;
    this.ΔΔⲆ[30] = bf(68, 68, 0, ⲆⲆ[457], 3);
    this.ΔΔⲆ[30].id = 30;
    this.ΔΔⲆ[9] = bf(68, 68, 0, ⲆⲆ[862], 3);
    this.ΔΔⲆ[9].id = 9;
    this.ΔΔⲆ[31] = bf(68, 68, 0, ⲆⲆ[459], 3);
    this.ΔΔⲆ[31].id = 31;
    this.ΔΔⲆ[32] = bf(68, 68, 0, ⲆⲆ[1018], 3);
    this.ΔΔⲆ[32].id = 32;
    this.ΔΔⲆ[33] = bf(68, 68, 0, ⲆⲆ[474], 3);
    this.ΔΔⲆ[33].id = 33;
    this.ΔΔⲆ[35] = bf(68, 68, 0, ⲆⲆ[479], 3);
    this.ΔΔⲆ[35].id = 35;
    this.ΔΔⲆ[36] = bf(68, 68, 0, ⲆⲆ[482], 3);
    this.ΔΔⲆ[36].id = 36;
    this.ΔΔⲆ[37] = bf(68, 68, 0, ⲆⲆ[485], 3);
    this.ΔΔⲆ[37].id = 37;
    this.ΔΔⲆ[38] = bf(68, 68, 0, ⲆⲆ[488], 3);
    this.ΔΔⲆ[38].id = 38;
    this.ΔΔⲆ[39] = bf(68, 68, 0, ⲆⲆ[491], 3);
    this.ΔΔⲆ[39].id = 39;
    this.ΔΔⲆ[122] = bf(68, 68, 0, ⲆⲆ[494], 3);
    this.ΔΔⲆ[122].id = 122;
    this.ΔΔⲆ[123] = bf(68, 68, 0, ⲆⲆ[497], 3);
    this.ΔΔⲆ[123].id = 123;
    this.ΔΔⲆ[124] = bf(68, 68, 0, ⲆⲆ[501], 3);
    this.ΔΔⲆ[124].id = 124;
    this.ΔΔⲆ[40] = bf(68, 68, 0, ⲆⲆ[504], 3);
    this.ΔΔⲆ[40].id = 40;
    this.ΔΔⲆ[146] = bf(68, 68, 0, ⲆⲆ[506], 3);
    this.ΔΔⲆ[146].id = 146;
    this.ΔΔⲆ[240] = bf(68, 68, 0, ⲆⲆ[1234], 3);
    this.ΔΔⲆ[240].id = 240;
    this.ΔΔⲆ[147] = bf(68, 68, 0, ⲆⲆ[514], 3);
    this.ΔΔⲆ[147].id = 147;
    this.ΔΔⲆ[148] = bf(68, 68, 0, ⲆⲆ[520], 3);
    this.ΔΔⲆ[148].id = 148;
    this.ΔΔⲆ[149] = bf(68, 68, 0, ⲆⲆ[522], 3);
    this.ΔΔⲆ[149].id = 149;
    this.ΔΔⲆ[150] = bf(68, 68, 0, ⲆⲆ[524], 3);
    this.ΔΔⲆ[150].id = 150;
    this.ΔΔⲆ[151] = bf(68, 68, 0, ⲆⲆ[531], 3);
    this.ΔΔⲆ[151].id = 151;
    this.ΔΔⲆ[158] = bf(68, 68, 0, ⲆⲆ[534], 3);
    this.ΔΔⲆ[158].id = 158;
    this.ΔΔⲆ[159] = bf(68, 68, 0, ⲆⲆ[554], 3);
    this.ΔΔⲆ[159].id = 159;
    this.ΔΔⲆ[43] = bf(68, 68, 0, ⲆⲆ[543], 3);
    this.ΔΔⲆ[43].id = 43;
    this.ΔΔⲆ[45] = bf(68, 68, 0, ⲆⲆ[552], 3);
    this.ΔΔⲆ[45].id = 45;
    this.ΔΔⲆ[125] = bf(68, 68, 0, ⲆⲆ[606], 3);
    this.ΔΔⲆ[125].id = 125;
    this.ΔΔⲆ[221] = bf(68, 68, 0, ⲆⲆ[1237], 3);
    this.ΔΔⲆ[221].id = 221;
    this.ΔΔⲆ[223] = bf(68, 68, 0, ⲆⲆ[1029], 3);
    this.ΔΔⲆ[223].id = 223;
    this.ΔΔⲆ[224] = bf(68, 68, 0, ⲆⲆ[1032], 3);
    this.ΔΔⲆ[224].id = 224;
    this.ΔΔⲆ[230] = bf(68, 68, 0, ⲆⲆ[1118], 3);
    this.ΔΔⲆ[230].id = 230;
    this.ΔΔⲆ[89] = bf(68, 68, 0, ⲆⲆ[1047], 3);
    this.ΔΔⲆ[89].id = 89;
    this.ΔΔⲆ[225] = bf(68, 68, 0, ⲆⲆ[1050], 3);
    this.ΔΔⲆ[225].id = 225;
    this.ΔΔⲆ[227] = bf(68, 68, 0, ⲆⲆ[1081], 3);
    this.ΔΔⲆ[227].id = 227;
    this.ΔΔⲆ[239] = bf(68, 68, 0, ⲆⲆ[1225], 3);
    this.ΔΔⲆ[239].id = 239;
    this.ΔΔⲆ[228] = bf(68, 68, 0, ⲆⲆ[1096], 3);
    this.ΔΔⲆ[228].id = 228;
    this.ΔΔⲆ[229] = bf(68, 68, 0, ⲆⲆ[1111], 3);
    this.ΔΔⲆ[229].id = 229;
    this.ΔΔⲆ[226] = bf(68, 68, 0, ⲆⲆ[1190], 3);
    this.ΔΔⲆ[226].id = 226;
    this.ΔΔⲆ[126] = bf(68, 68, 0, ⲆⲆ[610], 3);
    this.ΔΔⲆ[126].id = 126;
    this.ΔΔⲆ[127] = bf(68, 68, 0, ⲆⲆ[615], 3);
    this.ΔΔⲆ[127].id = 127;
    this.ΔΔⲆ[128] = bf(68, 68, 0, ⲆⲆ[614], 3);
    this.ΔΔⲆ[128].id = 128;
    this.ΔΔⲆ[46] = bf(68, 68, 0, ⲆⲆ[617], 3);
    this.ΔΔⲆ[46].id = 46;
    this.ΔΔⲆ[50] = bf(68, 68, 0, ⲆⲆ[701], 3);
    this.ΔΔⲆ[50].id = 50;
    this.ΔΔⲆ[51] = bf(68, 68, 0, ⲆⲆ[703], 3);
    this.ΔΔⲆ[51].id = 51;
    this.ΔΔⲆ[52] = bf(68, 68, 0, ⲆⲆ[707], 3);
    this.ΔΔⲆ[52].id = 52;
    this.ΔΔⲆ[55] = bf(68, 68, 0, ⲆⲆ[710], 3);
    this.ΔΔⲆ[55].id = 55;
    this.ΔΔⲆ[129] = bf(68, 68, 0, ⲆⲆ[625], 3);
    this.ΔΔⲆ[129].id = 129;
    this.ΔΔⲆ[130] = bf(68, 68, 0, ⲆⲆ[628], 3);
    this.ΔΔⲆ[130].id = 130;
    this.ΔΔⲆ[131] = bf(68, 68, 0, ⲆⲆ[630], 3);
    this.ΔΔⲆ[131].id = 131;
    this.ΔΔⲆ[132] = bf(68, 68, 0, ⲆⲆ[633], 3);
    this.ΔΔⲆ[132].id = 132;
    this.ΔΔⲆ[133] = bf(68, 68, 0, ⲆⲆ[636], 3);
    this.ΔΔⲆ[133].id = 133;
    this.ΔΔⲆ[134] = bf(68, 68, 0, ⲆⲆ[640], 3);
    this.ΔΔⲆ[134].id = 134;
    this.ΔΔⲆ[135] = bf(68, 68, 0, ⲆⲆ[645], 3);
    this.ΔΔⲆ[135].id = 135;
    this.ΔΔⲆ[47] = bf(68, 68, 0, ⲆⲆ[648], 3);
    this.ΔΔⲆ[47].id = 47;
    this.ΔΔⲆ[48] = bf(68, 68, 0, ⲆⲆ[651], 3);
    this.ΔΔⲆ[48].id = 48;
    this.ΔΔⲆ[49] = bf(68, 68, 0, ⲆⲆ[653], 3);
    this.ΔΔⲆ[49].id = 49;
    this.ΔΔⲆ[136] = bf(68, 68, 0, ⲆⲆ[661], 3);
    this.ΔΔⲆ[136].id = 136;
    this.ΔΔⲆ[143] = bf(68, 68, 0, ⲆⲆ[689], 3);
    this.ΔΔⲆ[143].id = 143;
    this.ΔΔⲆ[137] = bf(68, 68, 0, ⲆⲆ[663], 3);
    this.ΔΔⲆ[137].id = 137;
    this.ΔΔⲆ[138] = bf(68, 68, 0, ⲆⲆ[665], 3);
    this.ΔΔⲆ[138].id = 138;
    this.ΔΔⲆ[139] = bf(68, 68, 0, ⲆⲆ[675], 3);
    this.ΔΔⲆ[139].id = 139;
    this.ΔΔⲆ[140] = bf(68, 68, 0, ⲆⲆ[682], 3);
    this.ΔΔⲆ[140].id = 140;
    this.ΔΔⲆ[141] = bf(68, 68, 0, ⲆⲆ[683], 3);
    this.ΔΔⲆ[141].id = 141;
    this.ΔΔⲆ[142] = bf(68, 68, 0, ⲆⲆ[686], 3);
    this.ΔΔⲆ[142].id = 142;
    this.ΔΔⲆ[144] = bf(68, 68, 0, ⲆⲆ[719], 3);
    this.ΔΔⲆ[144].id = 144;
    this.ΔΔⲆ[145] = bf(68, 68, 0, ⲆⲆ[731], 3);
    this.ΔΔⲆ[145].id = 145;
    this.ΔΔⲆ[59] = bf(68, 68, 0, ⲆⲆ[733], 3);
    this.ΔΔⲆ[59].id = 59;
    this.ΔΔⲆ[62] = bf(68, 68, 0, ⲆⲆ[565], 3);
    this.ΔΔⲆ[62].id = 62;
    this.ΔΔⲆ[185] = bf(68, 68, 0, ⲆⲆ[590], 3);
    this.ΔΔⲆ[185].id = 185;
    this.ΔΔⲆ[184] = bf(68, 68, 0, ⲆⲆ[752], 3);
    this.ΔΔⲆ[184].id = 184;
    this.ΔΔⲆ[187] = bf(68, 68, 0, ⲆⲆ[591], 3);
    this.ΔΔⲆ[187].id = 187;
    this.ΔΔⲆ[186] = bf(68, 68, 0, ⲆⲆ[754], 3);
    this.ΔΔⲆ[186].id = 186;
    this.ΔΔⲆ[77] = bf(68, 68, 0, ⲆⲆ[757], 3);
    this.ΔΔⲆ[77].id = 77;
    this.ΔΔⲆ[175] = bf(68, 68, 0, ⲆⲆ[759], 3);
    this.ΔΔⲆ[175].id = 175;
    this.ΔΔⲆ[176] = bf(68, 68, 0, ⲆⲆ[763], 3);
    this.ΔΔⲆ[176].id = 176;
    this.ΔΔⲆ[78] = bf(68, 68, 0, ⲆⲆ[761], 3);
    this.ΔΔⲆ[78].id = 78;
    this.ΔΔⲆ[177] = bf(68, 68, 0, ⲆⲆ[766], 3);
    this.ΔΔⲆ[177].id = 177;
    this.ΔΔⲆ[79] = bf(68, 68, 0, ⲆⲆ[765], 3);
    this.ΔΔⲆ[79].id = 79;
    this.ΔΔⲆ[83] = bf(68, 68, 0, ⲆⲆ[769], 3);
    this.ΔΔⲆ[83].id = 83;
    this.ΔΔⲆ[84] = bf(68, 68, 0, ⲆⲆ[773], 3);
    this.ΔΔⲆ[84].id = 84;
    this.ΔΔⲆ[178] = bf(68, 68, 0, ⲆⲆ[774], 3);
    this.ΔΔⲆ[178].id = 178;
    this.ΔΔⲆ[179] = bf(68, 68, 0, ⲆⲆ[775], 3);
    this.ΔΔⲆ[179].id = 179;
    this.ΔΔⲆ[86] = bf(68, 68, 0, ⲆⲆ[778], 3);
    this.ΔΔⲆ[86].id = 86;
    this.ΔΔⲆ[85] = bf(68, 68, 0, ⲆⲆ[781], 3);
    this.ΔΔⲆ[85].id = 85;
    this.ΔΔⲆ[180] = bf(68, 68, 0, ⲆⲆ[786], 3);
    this.ΔΔⲆ[180].id = 180;
    this.ΔΔⲆ[181] = bf(68, 68, 0, ⲆⲆ[787], 3);
    this.ΔΔⲆ[181].id = 181;
    this.ΔΔⲆ[182] = bf(68, 68, 0, ⲆⲆ[790], 3);
    this.ΔΔⲆ[182].id = 182;
    this.ΔΔⲆ[183] = bf(68, 68, 0, ⲆⲆ[801], 3);
    this.ΔΔⲆ[183].id = 183;
    this.ΔΔⲆ[188] = bf(68, 68, 0, ⲆⲆ[810], 3);
    this.ΔΔⲆ[188].id = 188;
    this.ΔΔⲆ[189] = bf(68, 68, 0, ⲆⲆ[815], 3);
    this.ΔΔⲆ[189].id = 189;
    this.ΔΔⲆ[190] = bf(68, 68, 0, ⲆⲆ[844], 3);
    this.ΔΔⲆ[190].id = 190;
    this.ΔΔⲆ[191] = bf(68, 68, 0, ⲆⲆ[836], 3);
    this.ΔΔⲆ[191].id = 191;
    this.ΔΔⲆ[192] = bf(68, 68, 0, ⲆⲆ[841], 3);
    this.ΔΔⲆ[192].id = 192;
    this.ΔΔⲆ[193] = bf(68, 68, 0, ⲆⲆ[847], 3);
    this.ΔΔⲆ[193].id = 193;
    this.ΔΔⲆ[194] = bf(68, 68, 0, ⲆⲆ[851], 3);
    this.ΔΔⲆ[194].id = 194;
    this.ΔΔⲆ[206] = bf(68, 68, 0, ⲆⲆ[961], 3);
    this.ΔΔⲆ[206].id = 206;
    this.ΔΔⲆ[207] = bf(68, 68, 0, ⲆⲆ[974], 3);
    this.ΔΔⲆ[207].id = 207;
    this.ΔΔⲆ[204] = bf(68, 68, 0, ⲆⲆ[951], 3);
    this.ΔΔⲆ[204].id = 204;
    this.ΔΔⲆ[205] = bf(68, 68, 0, ⲆⲆ[956], 3);
    this.ΔΔⲆ[205].id = 205;
    this.ΔΔⲆ[208] = bf(68, 68, 0, ⲆⲆ[968], 3);
    this.ΔΔⲆ[208].id = 208;
    this.ΔΔⲆ[209] = bf(68, 68, 0, ⲆⲆ[973], 3);
    this.ΔΔⲆ[209].id = 209;
    this.ΔΔⲆ[210] = bf(68, 68, 0, ⲆⲆ[983], 3);
    this.ΔΔⲆ[210].id = 210;
    this.ΔΔⲆ[211] = bf(68, 68, 0, ⲆⲆ[988], 3);
    this.ΔΔⲆ[211].id = 211;
    this.ΔΔⲆ[41] = bf(68, 68, 0, ⲆⲆ[881], 3);
    this.ΔΔⲆ[41].id = 41;
    this.ΔΔⲆ[42] = bf(68, 68, 0, ⲆⲆ[883], 3);
    this.ΔΔⲆ[42].id = 42;
    this.ΔΔⲆ[12] = bf(68, 68, 0, ⲆⲆ[403], 3);
    this.ΔΔⲆ[12].id = 12;
    this.ΔΔⲆ[16] = bf(68, 68, 0, ⲆⲆ[875], 3);
    this.ΔΔⲆ[16].id = 16;
    this.ΔΔⲆ[196] = bf(68, 68, 0, ⲆⲆ[898], 3);
    this.ΔΔⲆ[196].id = 196;
    this.ΔΔⲆ[18] = bf(68, 68, 0, ⲆⲆ[899], 3);
    this.ΔΔⲆ[18].id = 18;
    this.ΔΔⲆ[197] = bf(68, 68, 0, ⲆⲆ[906], 3);
    this.ΔΔⲆ[197].id = 197;
    this.ΔΔⲆ[198] = bf(68, 68, 0, ⲆⲆ[908], 3);
    this.ΔΔⲆ[198].id = 198;
    this.ΔΔⲆ[61] = bf(68, 68, 0, ⲆⲆ[911], 3);
    this.ΔΔⲆ[61].id = 61;
    this.ΔΔⲆ[201] = bf(68, 68, 0, ⲆⲆ[871], 3);
    this.ΔΔⲆ[201].id = 201;
    this.ΔΔⲆ[199] = bf(68, 68, 0, ⲆⲆ[863], 3);
    this.ΔΔⲆ[199].id = 199;
    this.ΔΔⲆ[200] = bf(68, 68, 0, ⲆⲆ[868], 3);
    this.ΔΔⲆ[200].id = 200;
    this.ⵠᐃⵠⵠΔ = [];
    for (m = 0; m < 250; m++) {
      this.ⵠᐃⵠⵠΔ[m] = bf(0, 0, 0, ⲆⲆ[366]);
    }
    this.ᐃⵠᐃ = [];
    this.ᐃⵠᐃ[0] = bf(60, 60, 0, ⲆⲆ[261], 3);
    this.ᐃⵠᐃ[0].id = 0;
    this.ᐃⵠᐃ[1] = bf(60, 60, 0, ⲆⲆ[312], 3);
    this.ᐃⵠᐃ[1].id = 1;
    this.ᐃⵠᐃ[108] = bf(60, 60, 0, ⲆⲆ[315], 3);
    this.ᐃⵠᐃ[108].id = 108;
    this.ᐃⵠᐃ[108].info.ΔⲆ[2] = this.ᐃⵠᐃ[108].info.ΔⲆ[0];
    this.ᐃⵠᐃ[109] = bf(60, 60, 0, ⲆⲆ[316], 3);
    this.ᐃⵠᐃ[109].id = 109;
    this.ᐃⵠᐃ[109].info.ΔⲆ[2] = this.ᐃⵠᐃ[109].info.ΔⲆ[0];
    this.ᐃⵠᐃ[110] = bf(60, 60, 0, ⲆⲆ[277], 3);
    this.ᐃⵠᐃ[110].id = 110;
    this.ᐃⵠᐃ[233] = bf(60, 60, 0, ⲆⲆ[1154], 3);
    this.ᐃⵠᐃ[233].id = 233;
    this.ᐃⵠᐃ[111] = bf(60, 60, 0, ⲆⲆ[297], 3);
    this.ᐃⵠᐃ[111].id = 111;
    this.ᐃⵠᐃ[111].info.ΔⲆ[2] = this.ᐃⵠᐃ[111].info.ΔⲆ[0];
    this.ᐃⵠᐃ[112] = bf(60, 60, 0, ⲆⲆ[298], 3);
    this.ᐃⵠᐃ[112].id = 112;
    this.ᐃⵠᐃ[112].info.ΔⲆ[2] = this.ᐃⵠᐃ[112].info.ΔⲆ[0];
    this.ᐃⵠᐃ[3] = bf(60, 60, 0, ⲆⲆ[258], 3);
    this.ᐃⵠᐃ[3].id = 3;
    this.ᐃⵠᐃ[4] = bf(60, 60, 0, ⲆⲆ[296], 3);
    this.ᐃⵠᐃ[4].id = 4;
    this.ᐃⵠᐃ[5] = bf(60, 60, 0, ⲆⲆ[292], 3);
    this.ᐃⵠᐃ[5].id = 5;
    this.ᐃⵠᐃ[57] = bf(60, 60, 0, ⲆⲆ[829], 3);
    this.ᐃⵠᐃ[57].id = 57;
    this.ᐃⵠᐃ[6] = bf(60, 60, 0, ⲆⲆ[293], 3);
    this.ᐃⵠᐃ[6].id = 6;
    this.ᐃⵠᐃ[113] = bf(60, 60, 0, ⲆⲆ[309], 3);
    this.ᐃⵠᐃ[113].id = 113;
    this.ᐃⵠᐃ[114] = bf(60, 60, 0, ⲆⲆ[310], 3);
    this.ᐃⵠᐃ[114].id = 114;
    this.ᐃⵠᐃ[115] = bf(60, 60, 0, ⲆⲆ[311], 3);
    this.ᐃⵠᐃ[115].id = 115;
    this.ᐃⵠᐃ[162] = bf(60, 60, 0, ⲆⲆ[317], 3);
    this.ᐃⵠᐃ[162].id = 162;
    this.ᐃⵠᐃ[160] = bf(60, 60, 0, ⲆⲆ[319], 3);
    this.ᐃⵠᐃ[160].id = 160;
    this.ᐃⵠᐃ[8] = bf(60, 60, 0, ⲆⲆ[313], 3);
    this.ᐃⵠᐃ[8].id = 8;
    this.ᐃⵠᐃ[117] = bf(60, 60, 0, ⲆⲆ[323], 3);
    this.ᐃⵠᐃ[117].id = 117;
    this.ᐃⵠᐃ[116] = bf(60, 60, 0, ⲆⲆ[300], 3);
    this.ᐃⵠᐃ[116].id = 116;
    this.ᐃⵠᐃ[118] = bf(60, 60, 0, ⲆⲆ[328], 3);
    this.ᐃⵠᐃ[118].id = 118;
    this.ᐃⵠᐃ[195] = bf(60, 60, 0, ⲆⲆ[303], 3);
    this.ᐃⵠᐃ[195].id = 195;
    this.ᐃⵠᐃ[161] = bf(60, 60, 0, ⲆⲆ[305], 3);
    this.ᐃⵠᐃ[161].id = 161;
    this.ᐃⵠᐃ[161].info.ΔⲆ[2] = this.ᐃⵠᐃ[161].info.ΔⲆ[0];
    this.ᐃⵠᐃ[163] = bf(60, 60, 0, ⲆⲆ[329], 3);
    this.ᐃⵠᐃ[163].id = 163;
    this.ᐃⵠᐃ[164] = bf(60, 60, 0, ⲆⲆ[330], 3);
    this.ᐃⵠᐃ[164].id = 164;
    this.ᐃⵠᐃ[165] = bf(60, 60, 0, ⲆⲆ[331], 3);
    this.ᐃⵠᐃ[165].id = 165;
    this.ᐃⵠᐃ[166] = bf(60, 60, 0, ⲆⲆ[335], 3);
    this.ᐃⵠᐃ[166].id = 166;
    this.ᐃⵠᐃ[167] = bf(60, 60, 0, ⲆⲆ[337], 3);
    this.ᐃⵠᐃ[167].id = 167;
    this.ᐃⵠᐃ[168] = bf(60, 60, 0, ⲆⲆ[361], 3);
    this.ᐃⵠᐃ[168].id = 168;
    this.ᐃⵠᐃ[169] = bf(60, 60, 0, ⲆⲆ[362], 3);
    this.ᐃⵠᐃ[169].id = 169;
    this.ᐃⵠᐃ[170] = bf(60, 60, 0, ⲆⲆ[364], 3);
    this.ᐃⵠᐃ[170].id = 170;
    this.ᐃⵠᐃ[29] = bf(60, 60, 0, ⲆⲆ[392], 3);
    this.ᐃⵠᐃ[29].id = 29;
    this.ᐃⵠᐃ[10] = bf(60, 60, 0, ⲆⲆ[369], 3);
    this.ᐃⵠᐃ[10].id = 10;
    this.ᐃⵠᐃ[171] = bf(60, 60, 0, ⲆⲆ[372], 3);
    this.ᐃⵠᐃ[171].id = 171;
    this.ᐃⵠᐃ[172] = bf(60, 60, 0, ⲆⲆ[375], 3);
    this.ᐃⵠᐃ[172].id = 172;
    this.ᐃⵠᐃ[173] = bf(60, 60, 0, ⲆⲆ[378], 3);
    this.ᐃⵠᐃ[173].id = 173;
    this.ᐃⵠᐃ[2] = bf(60, 60, 0, ⲆⲆ[368], 3);
    this.ᐃⵠᐃ[2].id = 2;
    this.ᐃⵠᐃ[2].info.ΔⲆ[2] = this.ᐃⵠᐃ[2].info.ΔⲆ[0];
    this.ᐃⵠᐃ[237] = bf(60, 60, 0, ⲆⲆ[1162], 3);
    this.ᐃⵠᐃ[237].id = 237;
    this.ᐃⵠᐃ[237].info.ΔⲆ[2] = this.ᐃⵠᐃ[237].info.ΔⲆ[0];
    this.ᐃⵠᐃ[174] = bf(60, 60, 0, ⲆⲆ[393], 3);
    this.ᐃⵠᐃ[174].id = 174;
    this.ᐃⵠᐃ[174].info.ΔⲆ[2] = this.ᐃⵠᐃ[174].info.ΔⲆ[0];
    this.ᐃⵠᐃ[222] = bf(60, 60, 0, ⲆⲆ[1035], 3);
    this.ᐃⵠᐃ[222].id = 222;
    this.ᐃⵠᐃ[231] = bf(60, 60, 0, ⲆⲆ[1037], 3);
    this.ᐃⵠᐃ[231].id = 231;
    this.ᐃⵠᐃ[232] = bf(60, 60, 0, ⲆⲆ[1039], 3);
    this.ᐃⵠᐃ[232].id = 232;
    this.ᐃⵠᐃ[234] = bf(60, 60, 0, ⲆⲆ[1156], 3);
    this.ᐃⵠᐃ[234].id = 234;
    this.ᐃⵠᐃ[10] = bf(60, 60, 0, ⲆⲆ[369], 3);
    this.ᐃⵠᐃ[10].id = 10;
    this.ᐃⵠᐃ[11] = bf(60, 60, 0, ⲆⲆ[381], 3);
    this.ᐃⵠᐃ[11].id = 11;
    this.ᐃⵠᐃ[12] = bf(60, 60, 0, ⲆⲆ[401], 3);
    this.ᐃⵠᐃ[12].id = 12;
    this.ᐃⵠᐃ[13] = bf(60, 60, 0, ⲆⲆ[395], 3);
    this.ᐃⵠᐃ[13].id = 13;
    this.ᐃⵠᐃ[14] = bf(60, 60, 0, ⲆⲆ[398], 3);
    this.ᐃⵠᐃ[14].id = 14;
    this.ᐃⵠᐃ[15] = bf(60, 60, 0, ⲆⲆ[404], 3);
    this.ᐃⵠᐃ[15].id = 15;
    this.ᐃⵠᐃ[16] = bf(60, 60, 0, ⲆⲆ[874], 3);
    this.ᐃⵠᐃ[16].id = 16;
    this.ᐃⵠᐃ[119] = bf(60, 60, 0, ⲆⲆ[408], 3);
    this.ᐃⵠᐃ[119].id = 119;
    this.ᐃⵠᐃ[23] = bf(60, 60, 0, ⲆⲆ[420], 3);
    this.ᐃⵠᐃ[23].id = 23;
    this.ᐃⵠᐃ[24] = bf(60, 60, 0, ⲆⲆ[423], 3);
    this.ᐃⵠᐃ[24].id = 24;
    this.ᐃⵠᐃ[87] = bf(60, 60, 0, ⲆⲆ[1227], 3);
    this.ᐃⵠᐃ[87].id = 87;
    this.ᐃⵠᐃ[88] = bf(60, 60, 0, ⲆⲆ[1230], 3);
    this.ᐃⵠᐃ[88].id = 88;
    this.ᐃⵠᐃ[80] = bf(60, 60, 0, ⲆⲆ[1137], 3);
    this.ᐃⵠᐃ[80].id = 80;
    this.ᐃⵠᐃ[81] = bf(60, 60, 0, ⲆⲆ[1140], 3);
    this.ᐃⵠᐃ[81].id = 81;
    this.ᐃⵠᐃ[64] = bf(60, 60, 0, ⲆⲆ[569], 3);
    this.ᐃⵠᐃ[64].id = 64;
    this.ᐃⵠᐃ[101] = bf(60, 60, 0, ⲆⲆ[1166], 3);
    this.ᐃⵠᐃ[101].id = 101;
    this.ᐃⵠᐃ[71] = bf(60, 60, 0, ⲆⲆ[1239], 3);
    this.ᐃⵠᐃ[71].id = 71;
    this.ᐃⵠᐃ[65] = bf(60, 60, 0, ⲆⲆ[572], 3);
    this.ᐃⵠᐃ[65].id = 65;
    this.ᐃⵠᐃ[102] = bf(60, 60, 0, ⲆⲆ[1169], 3);
    this.ᐃⵠᐃ[102].id = 102;
    this.ᐃⵠᐃ[72] = bf(60, 60, 0, ⲆⲆ[1242], 3);
    this.ᐃⵠᐃ[72].id = 72;
    this.ᐃⵠᐃ[66] = bf(60, 60, 0, ⲆⲆ[575], 3);
    this.ᐃⵠᐃ[66].id = 66;
    this.ᐃⵠᐃ[103] = bf(60, 60, 0, ⲆⲆ[1172], 3);
    this.ᐃⵠᐃ[103].id = 103;
    this.ᐃⵠᐃ[73] = bf(60, 60, 0, ⲆⲆ[1245], 3);
    this.ᐃⵠᐃ[73].id = 73;
    this.ᐃⵠᐃ[67] = bf(60, 60, 0, ⲆⲆ[578], 3);
    this.ᐃⵠᐃ[67].id = 67;
    this.ᐃⵠᐃ[104] = bf(60, 60, 0, ⲆⲆ[1175], 3);
    this.ᐃⵠᐃ[104].id = 104;
    this.ᐃⵠᐃ[74] = bf(60, 60, 0, ⲆⲆ[1248], 3);
    this.ᐃⵠᐃ[74].id = 74;
    this.ᐃⵠᐃ[68] = bf(60, 60, 0, ⲆⲆ[581], 3);
    this.ᐃⵠᐃ[68].id = 68;
    this.ᐃⵠᐃ[105] = bf(60, 60, 0, ⲆⲆ[1178], 3);
    this.ᐃⵠᐃ[105].id = 105;
    this.ᐃⵠᐃ[75] = bf(60, 60, 0, ⲆⲆ[1251], 3);
    this.ᐃⵠᐃ[75].id = 75;
    this.ᐃⵠᐃ[69] = bf(60, 60, 0, ⲆⲆ[584], 3);
    this.ᐃⵠᐃ[69].id = 69;
    this.ᐃⵠᐃ[106] = bf(60, 60, 0, ⲆⲆ[1181], 3);
    this.ᐃⵠᐃ[106].id = 106;
    this.ᐃⵠᐃ[76] = bf(60, 60, 0, ⲆⲆ[1254], 3);
    this.ᐃⵠᐃ[76].id = 76;
    this.ᐃⵠᐃ[70] = bf(60, 60, 0, ⲆⲆ[587], 3);
    this.ᐃⵠᐃ[70].id = 70;
    this.ᐃⵠᐃ[107] = bf(60, 60, 0, ⲆⲆ[1184], 3);
    this.ᐃⵠᐃ[107].id = 107;
    this.ᐃⵠᐃ[94] = bf(60, 60, 0, ⲆⲆ[1257], 3);
    this.ᐃⵠᐃ[94].id = 94;
    this.ᐃⵠᐃ[95] = bf(60, 60, 0, ⲆⲆ[1260], 3);
    this.ᐃⵠᐃ[95].id = 95;
    this.ᐃⵠᐃ[96] = bf(60, 60, 0, ⲆⲆ[1263], 3);
    this.ᐃⵠᐃ[96].id = 96;
    this.ᐃⵠᐃ[97] = bf(60, 60, 0, ⲆⲆ[1266], 3);
    this.ᐃⵠᐃ[97].id = 97;
    this.ᐃⵠᐃ[98] = bf(60, 60, 0, ⲆⲆ[1269], 3);
    this.ᐃⵠᐃ[98].id = 98;
    this.ᐃⵠᐃ[99] = bf(60, 60, 0, ⲆⲆ[1272], 3);
    this.ᐃⵠᐃ[99].id = 99;
    this.ᐃⵠᐃ[58] = bf(60, 60, 0, ⲆⲆ[826], 3);
    this.ᐃⵠᐃ[58].id = 58;
    this.ᐃⵠᐃ[25] = bf(60, 60, 0, ⲆⲆ[429], 3);
    this.ᐃⵠᐃ[25].id = 25;
    this.ᐃⵠᐃ[26] = bf(60, 60, 0, ⲆⲆ[432], 3);
    this.ᐃⵠᐃ[26].id = 26;
    this.ᐃⵠᐃ[27] = bf(60, 60, 0, ⲆⲆ[435], 3);
    this.ᐃⵠᐃ[27].id = 27;
    this.ᐃⵠᐃ[28] = bf(60, 60, 0, ⲆⲆ[438], 3);
    this.ᐃⵠᐃ[28].id = 28;
    this.ᐃⵠᐃ[120] = bf(60, 60, 0, ⲆⲆ[441], 3);
    this.ᐃⵠᐃ[120].id = 120;
    this.ᐃⵠᐃ[120].info.ΔⲆ[2] = this.ᐃⵠᐃ[120].info.ΔⲆ[0];
    this.ᐃⵠᐃ[29] = bf(60, 60, 0, ⲆⲆ[392], 3);
    this.ᐃⵠᐃ[29].id = 29;
    this.ᐃⵠᐃ[121] = bf(60, 60, 0, ⲆⲆ[418], 3);
    this.ᐃⵠᐃ[121].id = 121;
    this.ᐃⵠᐃ[121].info.ΔⲆ[2] = this.ᐃⵠᐃ[121].info.ΔⲆ[0];
    this.ᐃⵠᐃ[30] = bf(60, 60, 0, ⲆⲆ[455], 3);
    this.ᐃⵠᐃ[30].id = 30;
    this.ᐃⵠᐃ[9] = bf(60, 60, 0, ⲆⲆ[860], 3);
    this.ᐃⵠᐃ[9].id = 9;
    this.ᐃⵠᐃ[31] = bf(60, 60, 0, ⲆⲆ[458], 3);
    this.ᐃⵠᐃ[31].id = 31;
    this.ᐃⵠᐃ[32] = bf(60, 60, 0, ⲆⲆ[1017], 3);
    this.ᐃⵠᐃ[32].id = 32;
    this.ᐃⵠᐃ[33] = bf(60, 60, 0, ⲆⲆ[472], 3);
    this.ᐃⵠᐃ[33].id = 33;
    this.ᐃⵠᐃ[35] = bf(60, 60, 0, ⲆⲆ[477], 3);
    this.ᐃⵠᐃ[35].id = 35;
    this.ᐃⵠᐃ[36] = bf(60, 60, 0, ⲆⲆ[480], 3);
    this.ᐃⵠᐃ[36].id = 36;
    this.ᐃⵠᐃ[37] = bf(60, 60, 0, ⲆⲆ[483], 3);
    this.ᐃⵠᐃ[37].id = 37;
    this.ᐃⵠᐃ[38] = bf(60, 60, 0, ⲆⲆ[486], 3);
    this.ᐃⵠᐃ[38].id = 38;
    this.ᐃⵠᐃ[39] = bf(60, 60, 0, ⲆⲆ[489], 3);
    this.ᐃⵠᐃ[39].id = 39;
    this.ᐃⵠᐃ[122] = bf(60, 60, 0, ⲆⲆ[492], 3);
    this.ᐃⵠᐃ[122].id = 122;
    this.ᐃⵠᐃ[123] = bf(60, 60, 0, ⲆⲆ[495], 3);
    this.ᐃⵠᐃ[123].id = 123;
    this.ᐃⵠᐃ[124] = bf(60, 60, 0, ⲆⲆ[499], 3);
    this.ᐃⵠᐃ[124].id = 124;
    this.ᐃⵠᐃ[40] = bf(60, 60, 0, ⲆⲆ[502], 3);
    this.ᐃⵠᐃ[40].id = 40;
    this.ᐃⵠᐃ[146] = bf(60, 60, 0, ⲆⲆ[505], 3);
    this.ᐃⵠᐃ[146].id = 146;
    this.ᐃⵠᐃ[146].info.ΔⲆ[2] = this.ᐃⵠᐃ[146].info.ΔⲆ[0];
    this.ᐃⵠᐃ[240] = bf(60, 60, 0, ⲆⲆ[1233], 3);
    this.ᐃⵠᐃ[240].id = 240;
    this.ᐃⵠᐃ[240].info.ΔⲆ[2] = this.ᐃⵠᐃ[240].info.ΔⲆ[0];
    this.ᐃⵠᐃ[147] = bf(60, 60, 0, ⲆⲆ[513], 3);
    this.ᐃⵠᐃ[147].id = 147;
    this.ᐃⵠᐃ[147].info.ΔⲆ[2] = this.ᐃⵠᐃ[147].info.ΔⲆ[0];
    this.ᐃⵠᐃ[148] = bf(60, 60, 0, ⲆⲆ[518], 3);
    this.ᐃⵠᐃ[148].id = 148;
    this.ᐃⵠᐃ[148].info.ΔⲆ[2] = this.ᐃⵠᐃ[148].info.ΔⲆ[0];
    this.ᐃⵠᐃ[149] = bf(60, 60, 0, ⲆⲆ[521], 3);
    this.ᐃⵠᐃ[149].id = 149;
    this.ᐃⵠᐃ[150] = bf(60, 60, 0, ⲆⲆ[523], 3);
    this.ᐃⵠᐃ[150].id = 150;
    this.ᐃⵠᐃ[151] = bf(60, 60, 0, ⲆⲆ[529], 3);
    this.ᐃⵠᐃ[151].id = 151;
    this.ᐃⵠᐃ[158] = bf(60, 60, 0, ⲆⲆ[532], 3);
    this.ᐃⵠᐃ[158].id = 158;
    this.ᐃⵠᐃ[159] = bf(60, 60, 0, ⲆⲆ[553], 3);
    this.ᐃⵠᐃ[159].id = 159;
    this.ᐃⵠᐃ[43] = bf(60, 60, 0, ⲆⲆ[541], 3);
    this.ᐃⵠᐃ[43].id = 43;
    this.ᐃⵠᐃ[45] = bf(60, 60, 0, ⲆⲆ[550], 3);
    this.ᐃⵠᐃ[45].id = 45;
    this.ᐃⵠᐃ[125] = bf(60, 60, 0, ⲆⲆ[605], 3);
    this.ᐃⵠᐃ[125].id = 125;
    this.ᐃⵠᐃ[221] = bf(60, 60, 0, ⲆⲆ[1236], 3);
    this.ᐃⵠᐃ[221].id = 221;
    this.ᐃⵠᐃ[223] = bf(60, 60, 0, ⲆⲆ[1028], 3);
    this.ᐃⵠᐃ[223].id = 223;
    this.ᐃⵠᐃ[224] = bf(60, 60, 0, ⲆⲆ[1031], 3);
    this.ᐃⵠᐃ[224].id = 224;
    this.ᐃⵠᐃ[230] = bf(60, 60, 0, ⲆⲆ[1117], 3);
    this.ᐃⵠᐃ[230].id = 230;
    this.ᐃⵠᐃ[89] = bf(60, 60, 0, ⲆⲆ[1046], 3);
    this.ᐃⵠᐃ[89].id = 89;
    this.ᐃⵠᐃ[225] = bf(60, 60, 0, ⲆⲆ[1049], 3);
    this.ᐃⵠᐃ[225].id = 225;
    this.ᐃⵠᐃ[226] = bf(60, 60, 0, ⲆⲆ[1189], 3);
    this.ᐃⵠᐃ[226].id = 226;
    this.ᐃⵠᐃ[227] = bf(60, 60, 0, ⲆⲆ[1080], 3);
    this.ᐃⵠᐃ[227].id = 227;
    this.ᐃⵠᐃ[239] = bf(60, 60, 0, ⲆⲆ[1224], 3);
    this.ᐃⵠᐃ[239].id = 239;
    this.ᐃⵠᐃ[228] = bf(60, 60, 0, ⲆⲆ[1095], 3);
    this.ᐃⵠᐃ[228].id = 228;
    this.ᐃⵠᐃ[229] = bf(60, 60, 0, ⲆⲆ[1110], 3);
    this.ᐃⵠᐃ[229].id = 229;
    this.ᐃⵠᐃ[126] = bf(60, 60, 0, ⲆⲆ[609], 3);
    this.ᐃⵠᐃ[126].id = 126;
    this.ᐃⵠᐃ[126].info.ΔⲆ[2] = this.ᐃⵠᐃ[126].info.ΔⲆ[0];
    this.ᐃⵠᐃ[127] = bf(60, 60, 0, ⲆⲆ[613], 3);
    this.ᐃⵠᐃ[127].id = 127;
    this.ᐃⵠᐃ[128] = bf(60, 60, 0, ⲆⲆ[612], 3);
    this.ᐃⵠᐃ[128].id = 128;
    this.ᐃⵠᐃ[46] = bf(60, 60, 0, ⲆⲆ[616], 3);
    this.ᐃⵠᐃ[46].id = 46;
    this.ᐃⵠᐃ[50] = bf(60, 60, 0, ⲆⲆ[699], 3);
    this.ᐃⵠᐃ[50].id = 50;
    this.ᐃⵠᐃ[51] = bf(60, 60, 0, ⲆⲆ[702], 3);
    this.ᐃⵠᐃ[51].id = 51;
    this.ᐃⵠᐃ[52] = bf(60, 60, 0, ⲆⲆ[705], 3);
    this.ᐃⵠᐃ[52].id = 52;
    this.ᐃⵠᐃ[55] = bf(60, 60, 0, ⲆⲆ[709], 3);
    this.ᐃⵠᐃ[55].id = 55;
    this.ᐃⵠᐃ[129] = bf(60, 60, 0, ⲆⲆ[624], 3);
    this.ᐃⵠᐃ[129].id = 129;
    this.ᐃⵠᐃ[129].info.ΔⲆ[2] = this.ᐃⵠᐃ[129].info.ΔⲆ[0];
    this.ᐃⵠᐃ[130] = bf(60, 60, 0, ⲆⲆ[626], 3);
    this.ᐃⵠᐃ[130].id = 130;
    this.ᐃⵠᐃ[131] = bf(60, 60, 0, ⲆⲆ[629], 3);
    this.ᐃⵠᐃ[131].id = 131;
    this.ᐃⵠᐃ[131].info.ΔⲆ[2] = this.ᐃⵠᐃ[131].info.ΔⲆ[0];
    this.ᐃⵠᐃ[132] = bf(60, 60, 0, ⲆⲆ[631], 3);
    this.ᐃⵠᐃ[132].id = 132;
    this.ᐃⵠᐃ[133] = bf(60, 60, 0, ⲆⲆ[634], 3);
    this.ᐃⵠᐃ[133].id = 133;
    this.ᐃⵠᐃ[134] = bf(60, 60, 0, ⲆⲆ[639], 3);
    this.ᐃⵠᐃ[134].id = 134;
    this.ᐃⵠᐃ[134].info.ΔⲆ[2] = this.ᐃⵠᐃ[134].info.ΔⲆ[0];
    this.ᐃⵠᐃ[135] = bf(60, 60, 0, ⲆⲆ[644], 3);
    this.ᐃⵠᐃ[135].id = 135;
    this.ᐃⵠᐃ[47] = bf(60, 60, 0, ⲆⲆ[646], 3);
    this.ᐃⵠᐃ[47].id = 47;
    this.ᐃⵠᐃ[48] = bf(60, 60, 0, ⲆⲆ[649], 3);
    this.ᐃⵠᐃ[48].id = 48;
    this.ᐃⵠᐃ[49] = bf(60, 60, 0, ⲆⲆ[652], 3);
    this.ᐃⵠᐃ[49].id = 49;
    this.ᐃⵠᐃ[136] = bf(60, 60, 0, ⲆⲆ[659], 3);
    this.ᐃⵠᐃ[136].id = 136;
    this.ᐃⵠᐃ[143] = bf(60, 60, 0, ⲆⲆ[143], 3);
    this.ᐃⵠᐃ[143].id = 143;
    this.ᐃⵠᐃ[137] = bf(60, 60, 0, ⲆⲆ[662], 3);
    this.ᐃⵠᐃ[137].id = 137;
    this.ᐃⵠᐃ[138] = bf(60, 60, 0, ⲆⲆ[664], 3);
    this.ᐃⵠᐃ[138].id = 138;
    this.ᐃⵠᐃ[139] = bf(60, 60, 0, ⲆⲆ[674], 3);
    this.ᐃⵠᐃ[139].id = 139;
    this.ᐃⵠᐃ[139].info.ΔⲆ[2] = this.ᐃⵠᐃ[139].info.ΔⲆ[0];
    this.ᐃⵠᐃ[140] = bf(60, 60, 0, ⲆⲆ[140], 3);
    this.ᐃⵠᐃ[140].id = 140;
    this.ᐃⵠᐃ[140].info.ΔⲆ[2] = this.ᐃⵠᐃ[140].info.ΔⲆ[0];
    this.ᐃⵠᐃ[141] = bf(60, 60, 0, ⲆⲆ[685], 3);
    this.ᐃⵠᐃ[141].id = 141;
    this.ᐃⵠᐃ[142] = bf(60, 60, 0, ⲆⲆ[142], 3);
    this.ᐃⵠᐃ[142].id = 142;
    this.ᐃⵠᐃ[142].info.ΔⲆ[2] = this.ᐃⵠᐃ[142].info.ΔⲆ[0];
    this.ᐃⵠᐃ[144] = bf(60, 60, 0, ⲆⲆ[717], 3);
    this.ᐃⵠᐃ[144].id = 144;
    this.ᐃⵠᐃ[145] = bf(60, 60, 0, ⲆⲆ[145], 3);
    this.ᐃⵠᐃ[145].id = 145;
    this.ᐃⵠᐃ[59] = bf(60, 60, 0, ⲆⲆ[732], 3);
    this.ᐃⵠᐃ[59].id = 59;
    this.ᐃⵠᐃ[62] = bf(60, 60, 0, ⲆⲆ[563], 3);
    this.ᐃⵠᐃ[62].id = 62;
    this.ᐃⵠᐃ[185] = bf(60, 60, 0, ⲆⲆ[252], 3);
    this.ᐃⵠᐃ[185].id = 185;
    this.ᐃⵠᐃ[185].info.ΔⲆ[2] = this.ᐃⵠᐃ[185].info.ΔⲆ[0];
    this.ᐃⵠᐃ[184] = bf(60, 60, 0, ⲆⲆ[751], 3);
    this.ᐃⵠᐃ[184].id = 184;
    this.ᐃⵠᐃ[184].info.ΔⲆ[2] = this.ᐃⵠᐃ[184].info.ΔⲆ[0];
    this.ᐃⵠᐃ[17] = bf(60, 60, 0, ⲆⲆ[877], 3);
    this.ᐃⵠᐃ[17].id = 17;
    this.ᐃⵠᐃ[63] = bf(60, 60, 0, ⲆⲆ[566], 3);
    this.ᐃⵠᐃ[63].id = 63;
    this.ᐃⵠᐃ[187] = bf(60, 60, 0, ⲆⲆ[253], 3);
    this.ᐃⵠᐃ[187].id = 187;
    this.ᐃⵠᐃ[187].info.ΔⲆ[2] = this.ᐃⵠᐃ[187].info.ΔⲆ[0];
    this.ᐃⵠᐃ[186] = bf(60, 60, 0, ⲆⲆ[753], 3);
    this.ᐃⵠᐃ[186].id = 186;
    this.ᐃⵠᐃ[186].info.ΔⲆ[2] = this.ᐃⵠᐃ[186].info.ΔⲆ[0];
    this.ᐃⵠᐃ[77] = bf(60, 60, 0, ⲆⲆ[756], 3);
    this.ᐃⵠᐃ[77].id = 77;
    this.ᐃⵠᐃ[175] = bf(60, 60, 0, ⲆⲆ[176], 3);
    this.ᐃⵠᐃ[175].id = 175;
    this.ᐃⵠᐃ[175].info.ΔⲆ[2] = this.ᐃⵠᐃ[175].info.ΔⲆ[0];
    this.ᐃⵠᐃ[176] = bf(60, 60, 0, ⲆⲆ[177], 3);
    this.ᐃⵠᐃ[176].id = 176;
    this.ᐃⵠᐃ[176].info.ΔⲆ[2] = this.ᐃⵠᐃ[176].info.ΔⲆ[0];
    this.ᐃⵠᐃ[78] = bf(60, 60, 0, ⲆⲆ[760], 3);
    this.ᐃⵠᐃ[78].id = 78;
    this.ᐃⵠᐃ[177] = bf(60, 60, 0, ⲆⲆ[175], 3);
    this.ᐃⵠᐃ[177].id = 177;
    this.ᐃⵠᐃ[177].info.ΔⲆ[2] = this.ᐃⵠᐃ[177].info.ΔⲆ[0];
    this.ᐃⵠᐃ[79] = bf(60, 60, 0, ⲆⲆ[764], 3);
    this.ᐃⵠᐃ[79].id = 79;
    this.ᐃⵠᐃ[83] = bf(60, 60, 0, ⲆⲆ[767], 3);
    this.ᐃⵠᐃ[83].id = 83;
    this.ᐃⵠᐃ[84] = bf(60, 60, 0, ⲆⲆ[771], 3);
    this.ᐃⵠᐃ[84].id = 84;
    this.ᐃⵠᐃ[178] = bf(60, 60, 0, ⲆⲆ[178], 3);
    this.ᐃⵠᐃ[178].id = 178;
    this.ᐃⵠᐃ[179] = bf(60, 60, 0, ⲆⲆ[179], 3);
    this.ᐃⵠᐃ[179].id = 179;
    this.ᐃⵠᐃ[86] = bf(60, 60, 0, ⲆⲆ[776], 3);
    this.ᐃⵠᐃ[86].id = 86;
    this.ᐃⵠᐃ[85] = bf(60, 60, 0, ⲆⲆ[779], 3);
    this.ᐃⵠᐃ[85].id = 85;
    this.ᐃⵠᐃ[180] = bf(60, 60, 0, ⲆⲆ[180], 3);
    this.ᐃⵠᐃ[180].id = 180;
    this.ᐃⵠᐃ[181] = bf(60, 60, 0, ⲆⲆ[181], 3);
    this.ᐃⵠᐃ[181].id = 181;
    this.ᐃⵠᐃ[182] = bf(60, 60, 0, ⲆⲆ[789], 3);
    this.ᐃⵠᐃ[182].id = 182;
    this.ᐃⵠᐃ[183] = bf(60, 60, 0, ⲆⲆ[800], 3);
    this.ᐃⵠᐃ[183].id = 183;
    this.ᐃⵠᐃ[188] = bf(60, 60, 0, ⲆⲆ[808], 3);
    this.ᐃⵠᐃ[188].id = 188;
    this.ᐃⵠᐃ[189] = bf(60, 60, 0, ⲆⲆ[814], 3);
    this.ᐃⵠᐃ[189].id = 189;
    this.ᐃⵠᐃ[191] = bf(60, 60, 0, ⲆⲆ[834], 3);
    this.ᐃⵠᐃ[191].id = 191;
    this.ᐃⵠᐃ[192] = bf(60, 60, 0, ⲆⲆ[840], 3);
    this.ᐃⵠᐃ[192].id = 192;
    this.ᐃⵠᐃ[190] = bf(60, 60, 0, ⲆⲆ[842], 3);
    this.ᐃⵠᐃ[190].id = 190;
    this.ᐃⵠᐃ[193] = bf(60, 60, 0, ⲆⲆ[845], 3);
    this.ᐃⵠᐃ[193].id = 193;
    this.ᐃⵠᐃ[194] = bf(60, 60, 0, ⲆⲆ[850], 3);
    this.ᐃⵠᐃ[194].id = 194;
    this.ᐃⵠᐃ[204] = bf(60, 60, 0, ⲆⲆ[949], 3);
    this.ᐃⵠᐃ[204].id = 204;
    this.ᐃⵠᐃ[205] = bf(60, 60, 0, ⲆⲆ[955], 3);
    this.ᐃⵠᐃ[205].id = 205;
    this.ᐃⵠᐃ[206] = bf(60, 60, 0, ⲆⲆ[959], 3);
    this.ᐃⵠᐃ[206].id = 206;
    this.ᐃⵠᐃ[207] = bf(60, 60, 0, ⲆⲆ[965], 3);
    this.ᐃⵠᐃ[207].id = 207;
    this.ᐃⵠᐃ[208] = bf(60, 60, 0, ⲆⲆ[966], 3);
    this.ᐃⵠᐃ[208].id = 208;
    this.ᐃⵠᐃ[209] = bf(60, 60, 0, ⲆⲆ[972], 3);
    this.ᐃⵠᐃ[209].id = 209;
    this.ᐃⵠᐃ[210] = bf(60, 60, 0, ⲆⲆ[981], 3);
    this.ᐃⵠᐃ[210].id = 210;
    this.ᐃⵠᐃ[211] = bf(60, 60, 0, ⲆⲆ[987], 3);
    this.ᐃⵠᐃ[211].id = 211;
    this.ᐃⵠᐃ[41] = bf(60, 60, 0, ⲆⲆ[880], 3);
    this.ᐃⵠᐃ[41].id = 41;
    this.ᐃⵠᐃ[42] = bf(60, 60, 0, ⲆⲆ[882], 3);
    this.ᐃⵠᐃ[42].id = 42;
    this.ᐃⵠᐃ[12] = bf(60, 60, 0, ⲆⲆ[401], 3);
    this.ᐃⵠᐃ[12].id = 12;
    this.ᐃⵠᐃ[16] = bf(60, 60, 0, ⲆⲆ[874], 3);
    this.ᐃⵠᐃ[16].id = 16;
    this.ᐃⵠᐃ[196] = bf(60, 60, 0, ⲆⲆ[196], 3);
    this.ᐃⵠᐃ[196].id = 196;
    this.ᐃⵠᐃ[18] = bf(60, 60, 0, ⲆⲆ[901], 3);
    this.ᐃⵠᐃ[18].id = 18;
    this.ᐃⵠᐃ[197] = bf(60, 60, 0, ⲆⲆ[197], 3);
    this.ᐃⵠᐃ[197].id = 197;
    this.ᐃⵠᐃ[198] = bf(60, 60, 0, ⲆⲆ[907], 3);
    this.ᐃⵠᐃ[198].id = 198;
    this.ᐃⵠᐃ[61] = bf(60, 60, 0, ⲆⲆ[910], 3);
    this.ᐃⵠᐃ[61].id = 61;
    this.ᐃⵠᐃ[201] = bf(60, 60, 0, ⲆⲆ[870], 3);
    this.ᐃⵠᐃ[201].id = 201;
    this.ᐃⵠᐃ[200] = bf(60, 60, 0, ⲆⲆ[200], 3);
    this.ᐃⵠᐃ[200].id = 200;
    this.ᐃⵠᐃ[199] = bf(60, 60, 0, ⲆⲆ[865], 3);
    this.ᐃⵠᐃ[199].id = 199;
    this.ⲆᐃⵠⲆ = [];
    this.ⲆᐃⵠⲆ[35] = bf(60, 60, 0, ⲆⲆ[254], 3);
    this.ⲆᐃⵠⲆ[35].id = 35;
    this.ⲆᐃⵠⲆ[5] = bf(60, 60, 0, ⲆⲆ[256], 3);
    this.ⲆᐃⵠⲆ[5].id = 5;
    this.ⲆᐃⵠⲆ[0] = bf(60, 60, 0, ⲆⲆ[302], 3);
    this.ⲆᐃⵠⲆ[0].id = 0;
    this.ⲆᐃⵠⲆ[3] = bf(60, 60, 0, ⲆⲆ[262], 3);
    this.ⲆᐃⵠⲆ[3].id = 3;
    this.ⲆᐃⵠⲆ[55] = bf(60, 60, 0, ⲆⲆ[318], 3);
    this.ⲆᐃⵠⲆ[55].id = 55;
    this.ⲆᐃⵠⲆ[67] = bf(60, 60, 0, ⲆⲆ[320], 3);
    this.ⲆᐃⵠⲆ[67].id = 67;
    this.ⲆᐃⵠⲆ[40] = bf(60, 60, 0, ⲆⲆ[284], 3);
    this.ⲆᐃⵠⲆ[40].id = 40;
    this.ⲆᐃⵠⲆ[6] = bf(60, 60, 0, ⲆⲆ[295], 3);
    this.ⲆᐃⵠⲆ[6].id = 6;
    this.ⲆᐃⵠⲆ[7] = bf(60, 60, 0, ⲆⲆ[257], 3);
    this.ⲆᐃⵠⲆ[7].id = 7;
    this.ⲆᐃⵠⲆ[36] = bf(60, 60, 0, ⲆⲆ[290], 3);
    this.ⲆᐃⵠⲆ[36].id = 36;
    this.ⲆᐃⵠⲆ[34] = bf(60, 60, 0, ⲆⲆ[830], 3);
    this.ⲆᐃⵠⲆ[34].id = 34;
    this.ⲆᐃⵠⲆ[37] = bf(60, 60, 0, ⲆⲆ[291], 3);
    this.ⲆᐃⵠⲆ[37].id = 37;
    this.ⲆᐃⵠⲆ[4] = bf(60, 60, 0, ⲆⲆ[314], 3);
    this.ⲆᐃⵠⲆ[4].id = 4;
    this.ⲆᐃⵠⲆ[49] = bf(60, 60, 0, ⲆⲆ[325], 3);
    this.ⲆᐃⵠⲆ[49].id = 49;
    this.ⲆᐃⵠⲆ[1] = bf(60, 60, 0, ⲆⲆ[327], 3);
    this.ⲆᐃⵠⲆ[1].id = 1;
    this.ⲆᐃⵠⲆ[54] = bf(60, 60, 0, ⲆⲆ[304], 3);
    this.ⲆᐃⵠⲆ[54].id = 54;
    this.ⲆᐃⵠⲆ[56] = bf(60, 60, 0, ⲆⲆ[263], 3);
    this.ⲆᐃⵠⲆ[56].id = 56;
    this.ⲆᐃⵠⲆ[57] = bf(60, 60, 0, ⲆⲆ[265], 3);
    this.ⲆᐃⵠⲆ[57].id = 57;
    this.ⲆᐃⵠⲆ[58] = bf(60, 60, 0, ⲆⲆ[332], 3);
    this.ⲆᐃⵠⲆ[58].id = 58;
    this.ⲆᐃⵠⲆ[61] = bf(60, 60, 0, ⲆⲆ[268], 3);
    this.ⲆᐃⵠⲆ[61].id = 61;
    this.ⲆᐃⵠⲆ[79] = bf(60, 60, 0, ⲆⲆ[338], 3);
    this.ⲆᐃⵠⲆ[79].id = 79;
    this.ⲆᐃⵠⲆ[68] = bf(60, 60, 0, ⲆⲆ[360], 3);
    this.ⲆᐃⵠⲆ[68].id = 68;
    this.ⲆᐃⵠⲆ[69] = bf(60, 60, 0, ⲆⲆ[363], 3);
    this.ⲆᐃⵠⲆ[69].id = 69;
    this.ⲆᐃⵠⲆ[70] = bf(60, 60, 0, ⲆⲆ[365], 3);
    this.ⲆᐃⵠⲆ[70].id = 70;
    this.ⲆᐃⵠⲆ[100] = bf(60, 60, 0, ⲆⲆ[367], 3);
    this.ⲆᐃⵠⲆ[100].id = 100;
    this.ⲆᐃⵠⲆ[83] = bf(60, 60, 0, ⲆⲆ[370], 3);
    this.ⲆᐃⵠⲆ[83].id = 83;
    this.ⲆᐃⵠⲆ[62] = bf(60, 60, 0, ⲆⲆ[371], 3);
    this.ⲆᐃⵠⲆ[62].id = 62;
    this.ⲆᐃⵠⲆ[63] = bf(60, 60, 0, ⲆⲆ[374], 3);
    this.ⲆᐃⵠⲆ[63].id = 63;
    this.ⲆᐃⵠⲆ[64] = bf(60, 60, 0, ⲆⲆ[377], 3);
    this.ⲆᐃⵠⲆ[64].id = 64;
    this.ⲆᐃⵠⲆ[83] = bf(60, 60, 0, ⲆⲆ[370], 3);
    this.ⲆᐃⵠⲆ[83].id = 83;
    this.ⲆᐃⵠⲆ[84] = bf(60, 60, 0, ⲆⲆ[380], 3);
    this.ⲆᐃⵠⲆ[84].id = 84;
    this.ⲆᐃⵠⲆ[25] = bf(60, 60, 0, ⲆⲆ[402], 3);
    this.ⲆᐃⵠⲆ[25].id = 25;
    this.ⲆᐃⵠⲆ[26] = bf(60, 60, 0, ⲆⲆ[396], 3);
    this.ⲆᐃⵠⲆ[26].id = 26;
    this.ⲆᐃⵠⲆ[27] = bf(60, 60, 0, ⲆⲆ[399], 3);
    this.ⲆᐃⵠⲆ[27].id = 27;
    this.ⲆᐃⵠⲆ[28] = bf(60, 60, 0, ⲆⲆ[405], 3);
    this.ⲆᐃⵠⲆ[28].id = 28;
    this.ⲆᐃⵠⲆ[31] = bf(60, 60, 0, ⲆⲆ[876], 3);
    this.ⲆᐃⵠⲆ[31].id = 31;
    this.ⲆᐃⵠⲆ[2] = bf(60, 60, 0, ⲆⲆ[409], 3);
    this.ⲆᐃⵠⲆ[2].id = 2;
    this.ⲆᐃⵠⲆ[80] = bf(60, 60, 0, ⲆⲆ[421], 3);
    this.ⲆᐃⵠⲆ[80].id = 80;
    this.ⲆᐃⵠⲆ[81] = bf(60, 60, 0, ⲆⲆ[424], 3);
    this.ⲆᐃⵠⲆ[81].id = 81;
    this.ⲆᐃⵠⲆ[th.ΔⲆΔΔΔ] = bf(60, 60, 0, ⲆⲆ[1228], 3);
    this.ⲆᐃⵠⲆ[th.ΔⲆΔΔΔ].id = th.ΔⲆΔΔΔ;
    this.ⲆᐃⵠⲆ[86] = bf(60, 60, 0, ⲆⲆ[1231], 3);
    this.ⲆᐃⵠⲆ[86].id = 86;
    this.ⲆᐃⵠⲆ[98] = bf(60, 60, 0, ⲆⲆ[1138], 3);
    this.ⲆᐃⵠⲆ[98].id = 98;
    this.ⲆᐃⵠⲆ[99] = bf(60, 60, 0, ⲆⲆ[1141], 3);
    this.ⲆᐃⵠⲆ[99].id = 99;
    this.ⲆᐃⵠⲆ[131] = bf(60, 60, 0, ⲆⲆ[570], 3);
    this.ⲆᐃⵠⲆ[131].id = 131;
    this.ⲆᐃⵠⲆ[132] = bf(60, 60, 0, ⲆⲆ[1168], 3);
    this.ⲆᐃⵠⲆ[132].id = 132;
    this.ⲆᐃⵠⲆ[145] = bf(60, 60, 0, ⲆⲆ[1238], 3);
    this.ⲆᐃⵠⲆ[145].id = 145;
    this.ⲆᐃⵠⲆ[133] = bf(60, 60, 0, ⲆⲆ[573], 3);
    this.ⲆᐃⵠⲆ[133].id = 133;
    this.ⲆᐃⵠⲆ[134] = bf(60, 60, 0, ⲆⲆ[1171], 3);
    this.ⲆᐃⵠⲆ[134].id = 134;
    this.ⲆᐃⵠⲆ[146] = bf(60, 60, 0, ⲆⲆ[1241], 3);
    this.ⲆᐃⵠⲆ[146].id = 146;
    this.ⲆᐃⵠⲆ[135] = bf(60, 60, 0, ⲆⲆ[576], 3);
    this.ⲆᐃⵠⲆ[135].id = 135;
    this.ⲆᐃⵠⲆ[136] = bf(60, 60, 0, ⲆⲆ[1174], 3);
    this.ⲆᐃⵠⲆ[136].id = 136;
    this.ⲆᐃⵠⲆ[147] = bf(60, 60, 0, ⲆⲆ[1244], 3);
    this.ⲆᐃⵠⲆ[147].id = 147;
    this.ⲆᐃⵠⲆ[137] = bf(60, 60, 0, ⲆⲆ[579], 3);
    this.ⲆᐃⵠⲆ[137].id = 137;
    this.ⲆᐃⵠⲆ[138] = bf(60, 60, 0, ⲆⲆ[1177], 3);
    this.ⲆᐃⵠⲆ[138].id = 138;
    this.ⲆᐃⵠⲆ[167] = bf(60, 60, 0, ⲆⲆ[1256], 3);
    this.ⲆᐃⵠⲆ[167].id = 167;
    this.ⲆᐃⵠⲆ[168] = bf(60, 60, 0, ⲆⲆ[1259], 3);
    this.ⲆᐃⵠⲆ[168].id = 168;
    this.ⲆᐃⵠⲆ[169] = bf(60, 60, 0, ⲆⲆ[1262], 3);
    this.ⲆᐃⵠⲆ[169].id = 169;
    this.ⲆᐃⵠⲆ[170] = bf(60, 60, 0, ⲆⲆ[1265], 3);
    this.ⲆᐃⵠⲆ[170].id = 170;
    this.ⲆᐃⵠⲆ[171] = bf(60, 60, 0, ⲆⲆ[1268], 3);
    this.ⲆᐃⵠⲆ[171].id = 171;
    this.ⲆᐃⵠⲆ[172] = bf(60, 60, 0, ⲆⲆ[1271], 3);
    this.ⲆᐃⵠⲆ[172].id = 172;
    this.ⲆᐃⵠⲆ[148] = bf(60, 60, 0, ⲆⲆ[1247], 3);
    this.ⲆᐃⵠⲆ[148].id = 148;
    this.ⲆᐃⵠⲆ[139] = bf(60, 60, 0, ⲆⲆ[582], 3);
    this.ⲆᐃⵠⲆ[139].id = 139;
    this.ⲆᐃⵠⲆ[140] = bf(60, 60, 0, ⲆⲆ[1180], 3);
    this.ⲆᐃⵠⲆ[140].id = 140;
    this.ⲆᐃⵠⲆ[149] = bf(60, 60, 0, ⲆⲆ[1250], 3);
    this.ⲆᐃⵠⲆ[149].id = 149;
    this.ⲆᐃⵠⲆ[141] = bf(60, 60, 0, ⲆⲆ[585], 3);
    this.ⲆᐃⵠⲆ[141].id = 141;
    this.ⲆᐃⵠⲆ[142] = bf(60, 60, 0, ⲆⲆ[1183], 3);
    this.ⲆᐃⵠⲆ[142].id = 142;
    this.ⲆᐃⵠⲆ[150] = bf(60, 60, 0, ⲆⲆ[1253], 3);
    this.ⲆᐃⵠⲆ[150].id = 150;
    this.ⲆᐃⵠⲆ[143] = bf(60, 60, 0, ⲆⲆ[588], 3);
    this.ⲆᐃⵠⲆ[143].id = 143;
    this.ⲆᐃⵠⲆ[144] = bf(60, 60, 0, ⲆⲆ[1186], 3);
    this.ⲆᐃⵠⲆ[144].id = 144;
    this.ⲆᐃⵠⲆ[87] = bf(60, 60, 0, ⲆⲆ[827], 3);
    this.ⲆᐃⵠⲆ[87].id = 87;
    this.ⲆᐃⵠⲆ[88] = bf(60, 60, 0, ⲆⲆ[430], 3);
    this.ⲆᐃⵠⲆ[88].id = 88;
    this.ⲆᐃⵠⲆ[89] = bf(60, 60, 0, ⲆⲆ[433], 3);
    this.ⲆᐃⵠⲆ[89].id = 89;
    this.ⲆᐃⵠⲆ[90] = bf(60, 60, 0, ⲆⲆ[436], 3);
    this.ⲆᐃⵠⲆ[90].id = 90;
    this.ⲆᐃⵠⲆ[24] = bf(60, 60, 0, ⲆⲆ[439], 3);
    this.ⲆᐃⵠⲆ[24].id = 24;
    this.ⲆᐃⵠⲆ[101] = bf(60, 60, 0, ⲆⲆ[442], 3);
    this.ⲆᐃⵠⲆ[101].id = 101;
    this.ⲆᐃⵠⲆ[100] = bf(60, 60, 0, ⲆⲆ[367], 3);
    this.ⲆᐃⵠⲆ[100].id = 100;
    this.ⲆᐃⵠⲆ[38] = bf(60, 60, 0, ⲆⲆ[456], 3);
    this.ⲆᐃⵠⲆ[38].id = 38;
    this.ⲆᐃⵠⲆ[th.ⲆᐃΔΔᐃ] = bf(60, 60, 0, ⲆⲆ[861], 3);
    this.ⲆᐃⵠⲆ[th.ⲆᐃΔΔᐃ].id = th.ⲆᐃΔΔᐃ;
    this.ⲆᐃⵠⲆ[8] = bf(60, 60, 0, ⲆⲆ[460], 3);
    this.ⲆᐃⵠⲆ[8].id = 8;
    this.ⲆᐃⵠⲆ[9] = bf(60, 60, 0, ⲆⲆ[1019], 3);
    this.ⲆᐃⵠⲆ[9].id = 9;
    this.ⲆᐃⵠⲆ[29] = bf(60, 60, 0, ⲆⲆ[473], 3);
    this.ⲆᐃⵠⲆ[29].id = 29;
    this.ⲆᐃⵠⲆ[10] = bf(60, 60, 0, ⲆⲆ[478], 3);
    this.ⲆᐃⵠⲆ[10].id = 10;
    this.ⲆᐃⵠⲆ[11] = bf(60, 60, 0, ⲆⲆ[481], 3);
    this.ⲆᐃⵠⲆ[11].id = 11;
    this.ⲆᐃⵠⲆ[12] = bf(60, 60, 0, ⲆⲆ[484], 3);
    this.ⲆᐃⵠⲆ[12].id = 12;
    this.ⲆᐃⵠⲆ[13] = bf(60, 60, 0, ⲆⲆ[487], 3);
    this.ⲆᐃⵠⲆ[13].id = 13;
    this.ⲆᐃⵠⲆ[14] = bf(60, 60, 0, ⲆⲆ[490], 3);
    this.ⲆᐃⵠⲆ[14].id = 14;
    this.ⲆᐃⵠⲆ[59] = bf(60, 60, 0, ⲆⲆ[493], 3);
    this.ⲆᐃⵠⲆ[59].id = 59;
    this.ⲆᐃⵠⲆ[71] = bf(60, 60, 0, ⲆⲆ[496], 3);
    this.ⲆᐃⵠⲆ[71].id = 71;
    this.ⲆᐃⵠⲆ[65] = bf(60, 60, 0, ⲆⲆ[498], 3);
    this.ⲆᐃⵠⲆ[65].id = 65;
    this.ⲆᐃⵠⲆ[85] = bf(60, 60, 0, ⲆⲆ[503], 3);
    this.ⲆᐃⵠⲆ[85].id = 85;
    this.ⲆᐃⵠⲆ[102] = bf(60, 60, 0, ⲆⲆ[515], 3);
    this.ⲆᐃⵠⲆ[102].id = 102;
    this.ⲆᐃⵠⲆ[103] = bf(60, 60, 0, ⲆⲆ[519], 3);
    this.ⲆᐃⵠⲆ[103].id = 103;
    this.ⲆᐃⵠⲆ[115] = bf(60, 60, 0, ⲆⲆ[530], 3);
    this.ⲆᐃⵠⲆ[115].id = 115;
    this.ⲆᐃⵠⲆ[104] = bf(60, 60, 0, ⲆⲆ[533], 3);
    this.ⲆᐃⵠⲆ[104].id = 104;
    this.ⲆᐃⵠⲆ[105] = bf(60, 60, 0, ⲆⲆ[555], 3);
    this.ⲆᐃⵠⲆ[105].id = 105;
    this.ⲆᐃⵠⲆ[91] = bf(60, 60, 0, ⲆⲆ[542], 3);
    this.ⲆᐃⵠⲆ[91].id = 91;
    this.ⲆᐃⵠⲆ[15] = bf(60, 60, 0, ⲆⲆ[551], 3);
    this.ⲆᐃⵠⲆ[15].id = 15;
    this.ⲆᐃⵠⲆ[106] = bf(60, 60, 0, ⲆⲆ[604], 3);
    this.ⲆᐃⵠⲆ[106].id = 106;
    this.ⲆᐃⵠⲆ[108] = bf(60, 60, 0, ⲆⲆ[1235], 3);
    this.ⲆᐃⵠⲆ[108].id = 108;
    this.ⲆᐃⵠⲆ[163] = bf(60, 60, 0, ⲆⲆ[1027], 3);
    this.ⲆᐃⵠⲆ[163].id = 163;
    this.ⲆᐃⵠⲆ[164] = bf(60, 60, 0, ⲆⲆ[1030], 3);
    this.ⲆᐃⵠⲆ[164].id = 164;
    this.ⲆᐃⵠⲆ[166] = bf(60, 60, 0, ⲆⲆ[1116], 3);
    this.ⲆᐃⵠⲆ[166].id = 166;
    this.ⲆᐃⵠⲆ[165] = bf(60, 60, 0, ⲆⲆ[1048], 3);
    this.ⲆᐃⵠⲆ[165].id = 165;
    this.ⲆᐃⵠⲆ[th.ⵠᐃⵠⲆΔ] = bf(60, 60, 0, ⲆⲆ[1051], 3);
    this.ⲆᐃⵠⲆ[th.ⵠᐃⵠⲆΔ].id = th.ⵠᐃⵠⲆΔ;
    this.ⲆᐃⵠⲆ[th.ᐃΔⵠⵠΔ] = bf(60, 60, 0, ⲆⲆ[1082], 3);
    this.ⲆᐃⵠⲆ[th.ᐃΔⵠⵠΔ].id = th.ᐃΔⵠⵠΔ;
    this.ⲆᐃⵠⲆ[th.ⲆⵠᐃⲆⲆ] = bf(60, 60, 0, ⲆⲆ[1226], 3);
    this.ⲆᐃⵠⲆ[th.ⲆⵠᐃⲆⲆ].id = th.ⲆⵠᐃⲆⲆ;
    this.ⲆᐃⵠⲆ[th.ⵠᐃΔΔΔ] = bf(60, 60, 0, ⲆⲆ[1191], 3);
    this.ⲆᐃⵠⲆ[th.ⵠᐃΔΔΔ].id = th.ⵠᐃΔΔΔ;
    this.ⲆᐃⵠⲆ[110] = bf(60, 60, 0, ⲆⲆ[611], 3);
    this.ⲆᐃⵠⲆ[110].id = 110;
    this.ⲆᐃⵠⲆ[111] = bf(60, 60, 0, ⲆⲆ[715], 3);
    this.ⲆᐃⵠⲆ[111].id = 111;
    this.ⲆᐃⵠⲆ[112] = bf(60, 60, 0, ⲆⲆ[715], 3);
    this.ⲆᐃⵠⲆ[112].id = 112;
    this.ⲆᐃⵠⲆ[113] = bf(60, 60, 0, ⲆⲆ[715], 3);
    this.ⲆᐃⵠⲆ[113].id = 113;
    this.ⲆᐃⵠⲆ[16] = bf(60, 60, 0, ⲆⲆ[618], 3);
    this.ⲆᐃⵠⲆ[16].id = 16;
    this.ⲆᐃⵠⲆ[17] = bf(60, 60, 0, ⲆⲆ[700], 3);
    this.ⲆᐃⵠⲆ[17].id = 17;
    this.ⲆᐃⵠⲆ[18] = bf(60, 60, 0, ⲆⲆ[704], 3);
    this.ⲆᐃⵠⲆ[18].id = 18;
    this.ⲆᐃⵠⲆ[19] = bf(60, 60, 0, ⲆⲆ[706], 3);
    this.ⲆᐃⵠⲆ[19].id = 19;
    this.ⲆᐃⵠⲆ[122] = bf(60, 60, 0, ⲆⲆ[711], 3);
    this.ⲆᐃⵠⲆ[122].id = 122;
    this.ⲆᐃⵠⲆ[20] = bf(60, 60, 0, ⲆⲆ[627], 3);
    this.ⲆᐃⵠⲆ[20].id = 20;
    this.ⲆᐃⵠⲆ[41] = bf(60, 60, 0, ⲆⲆ[632], 3);
    this.ⲆᐃⵠⲆ[41].id = 41;
    this.ⲆᐃⵠⲆ[52] = bf(60, 60, 0, ⲆⲆ[635], 3);
    this.ⲆᐃⵠⲆ[52].id = 52;
    this.ⲆᐃⵠⲆ[114] = bf(60, 60, 0, ⲆⲆ[643], 3);
    this.ⲆᐃⵠⲆ[114].id = 114;
    this.ⲆᐃⵠⲆ[94] = bf(60, 60, 0, ⲆⲆ[647], 3);
    this.ⲆᐃⵠⲆ[94].id = 94;
    this.ⲆᐃⵠⲆ[93] = bf(60, 60, 0, ⲆⲆ[650], 3);
    this.ⲆᐃⵠⲆ[93].id = 93;
    this.ⲆᐃⵠⲆ[21] = bf(60, 60, 0, ⲆⲆ[654], 3);
    this.ⲆᐃⵠⲆ[21].id = 21;
    this.ⲆᐃⵠⲆ[53] = bf(60, 60, 0, ⲆⲆ[660], 3);
    this.ⲆᐃⵠⲆ[53].id = 53;
    this.ⲆᐃⵠⲆ[51] = bf(60, 60, 0, ⲆⲆ[690], 3);
    this.ⲆᐃⵠⲆ[51].id = 51;
    this.ⲆᐃⵠⲆ[50] = bf(60, 60, 0, ⲆⲆ[666], 3);
    this.ⲆᐃⵠⲆ[50].id = 50;
    this.ⲆᐃⵠⲆ[109] = bf(60, 60, 0, ⲆⲆ[684], 3);
    this.ⲆᐃⵠⲆ[109].id = 109;
    this.ⲆᐃⵠⲆ[124] = bf(60, 60, 0, ⲆⲆ[718], 3);
    this.ⲆᐃⵠⲆ[124].id = 124;
    this.ⲆᐃⵠⲆ[125] = bf(60, 60, 0, ⲆⲆ[730], 3);
    this.ⲆᐃⵠⲆ[125].id = 125;
    this.ⲆᐃⵠⲆ[126] = bf(60, 60, 0, ⲆⲆ[734], 3);
    this.ⲆᐃⵠⲆ[126].id = 126;
    this.ⲆᐃⵠⲆ[129] = bf(60, 60, 0, ⲆⲆ[563], 3);
    this.ⲆᐃⵠⲆ[129].id = 129;
    this.ⲆᐃⵠⲆ[151] = bf(60, 60, 0, ⲆⲆ[758], 3);
    this.ⲆᐃⵠⲆ[151].id = 151;
    this.ⲆᐃⵠⲆ[152] = bf(60, 60, 0, ⲆⲆ[762], 3);
    this.ⲆᐃⵠⲆ[152].id = 152;
    this.ⲆᐃⵠⲆ[153] = bf(60, 60, 0, ⲆⲆ[770], 3);
    this.ⲆᐃⵠⲆ[153].id = 153;
    this.ⲆᐃⵠⲆ[154] = bf(60, 60, 0, ⲆⲆ[768], 3);
    this.ⲆᐃⵠⲆ[154].id = 154;
    this.ⲆᐃⵠⲆ[155] = bf(60, 60, 0, ⲆⲆ[772], 3);
    this.ⲆᐃⵠⲆ[155].id = 155;
    this.ⲆᐃⵠⲆ[157] = bf(60, 60, 0, ⲆⲆ[777], 3);
    this.ⲆᐃⵠⲆ[157].id = 157;
    this.ⲆᐃⵠⲆ[156] = bf(60, 60, 0, ⲆⲆ[780], 3);
    this.ⲆᐃⵠⲆ[156].id = 156;
    this.ⲆᐃⵠⲆ[158] = bf(60, 60, 0, ⲆⲆ[784], 3);
    this.ⲆᐃⵠⲆ[158].id = 158;
    this.ⲆᐃⵠⲆ[159] = bf(60, 60, 0, ⲆⲆ[785], 3);
    this.ⲆᐃⵠⲆ[159].id = 159;
    this.ⲆᐃⵠⲆ[160] = bf(60, 60, 0, ⲆⲆ[791], 3);
    this.ⲆᐃⵠⲆ[160].id = 160;
    this.ⲆᐃⵠⲆ[161] = bf(60, 60, 0, ⲆⲆ[799], 3);
    this.ⲆᐃⵠⲆ[161].id = 161;
    this.ⲆᐃⵠⲆ[42] = bf(60, 60, 0, ⲆⲆ[809], 3);
    this.ⲆᐃⵠⲆ[42].id = 42;
    this.ⲆᐃⵠⲆ[43] = bf(60, 60, 0, ⲆⲆ[835], 3);
    this.ⲆᐃⵠⲆ[43].id = 43;
    this.ⲆᐃⵠⲆ[107] = bf(60, 60, 0, ⲆⲆ[843], 3);
    this.ⲆᐃⵠⲆ[107].id = 107;
    this.ⲆᐃⵠⲆ[44] = bf(60, 60, 0, ⲆⲆ[846], 3);
    this.ⲆᐃⵠⲆ[44].id = 44;
    this.ⲆᐃⵠⲆ[46] = bf(60, 60, 0, ⲆⲆ[960], 3);
    this.ⲆᐃⵠⲆ[46].id = 46;
    this.ⲆᐃⵠⲆ[45] = bf(60, 60, 0, ⲆⲆ[950], 3);
    this.ⲆᐃⵠⲆ[45].id = 45;
    this.ⲆᐃⵠⲆ[47] = bf(60, 60, 0, ⲆⲆ[967], 3);
    this.ⲆᐃⵠⲆ[47].id = 47;
    this.ⲆᐃⵠⲆ[48] = bf(60, 60, 0, ⲆⲆ[982], 3);
    this.ⲆᐃⵠⲆ[48].id = 48;
    this.ⲆᐃⵠⲆ[25] = bf(60, 60, 0, ⲆⲆ[402], 3);
    this.ⲆᐃⵠⲆ[25].id = 25;
    this.ⲆᐃⵠⲆ[31] = bf(60, 60, 0, ⲆⲆ[876], 3);
    this.ⲆᐃⵠⲆ[31].id = 31;
    this.ⲆᐃⵠⲆ[33] = bf(60, 60, 0, ⲆⲆ[900], 3);
    this.ⲆᐃⵠⲆ[33].id = 33;
    this.ⲆᐃⵠⲆ[162] = bf(60, 60, 0, ⲆⲆ[909], 3);
    this.ⲆᐃⵠⲆ[162].id = 162;
    this.ⲆᐃⵠⲆ[128] = bf(60, 60, 0, ⲆⲆ[912], 3);
    this.ⲆᐃⵠⲆ[128].id = 128;
    this.ΔΔⲆ[53] = bf(68, 68, 0, ⲆⲆ[976], 3);
    this.ΔΔⲆ[53].id = 53;
    this.ᐃⵠᐃ[53] = bf(60, 60, 0, ⲆⲆ[975], 3);
    this.ᐃⵠᐃ[53].id = 53;
    this.ⲆᐃⵠⲆ[22] = bf(60, 60, 0, ⲆⲆ[977], 3);
    this.ⲆᐃⵠⲆ[22].id = 22;
    this.ΔΔⲆ[54] = bf(68, 68, 0, ⲆⲆ[979], 3);
    this.ΔΔⲆ[54].id = 54;
    this.ᐃⵠᐃ[54] = bf(60, 60, 0, ⲆⲆ[978], 3);
    this.ᐃⵠᐃ[54].id = 54;
    this.ⲆᐃⵠⲆ[23] = bf(60, 60, 0, ⲆⲆ[980], 3);
    this.ⲆᐃⵠⲆ[23].id = 23;
    this.ΔΔⲆ[56] = bf(68, 68, 0, ⲆⲆ[713], 3);
    this.ΔΔⲆ[56].id = 56;
    this.ᐃⵠᐃ[56] = bf(60, 60, 0, ⲆⲆ[712], 3);
    this.ᐃⵠᐃ[56].id = 56;
    this.ⲆᐃⵠⲆ[123] = bf(60, 60, 0, ⲆⲆ[714], 3);
    this.ⲆᐃⵠⲆ[123].id = 123;
    this.ΔΔⲆ[82] = bf(68, 68, 0, ⲆⲆ[428], 3);
    this.ΔΔⲆ[82].id = 82;
    this.ᐃⵠᐃ[82] = bf(60, 60, 0, ⲆⲆ[426], 3);
    this.ᐃⵠᐃ[82].id = 82;
    this.ⲆᐃⵠⲆ[82] = bf(60, 60, 0, ⲆⲆ[427], 3);
    this.ⲆᐃⵠⲆ[82].id = 82;
    this.ΔΔⲆ[235] = bf(68, 68, 0, ⲆⲆ[1159], 3);
    this.ΔΔⲆ[235].id = 235;
    this.ᐃⵠᐃ[235] = bf(60, 60, 0, ⲆⲆ[1158], 3);
    this.ᐃⵠᐃ[235].id = 235;
    this.ΔΔⲆ[238] = bf(68, 68, 0, ⲆⲆ[1188], 3);
    this.ΔΔⲆ[238].id = 238;
    this.ᐃⵠᐃ[238] = bf(60, 60, 0, ⲆⲆ[1187], 3);
    this.ᐃⵠᐃ[238].id = 238;
    this.ΔΔⲆ[236] = bf(68, 68, 0, ⲆⲆ[1161], 3);
    this.ΔΔⲆ[236].id = 236;
    this.ᐃⵠᐃ[236] = bf(60, 60, 0, ⲆⲆ[1160], 3);
    this.ᐃⵠᐃ[236].id = 236;
    this.ΔΔⲆ[152] = bf(68, 68, 0, ⲆⲆ[1197], 3);
    this.ΔΔⲆ[152].id = 152;
    this.ᐃⵠᐃ[152] = bf(60, 60, 0, ⲆⲆ[1195], 3);
    this.ᐃⵠᐃ[152].id = 152;
    this.ⲆᐃⵠⲆ[116] = bf(60, 60, 0, ⲆⲆ[1196], 3);
    this.ⲆᐃⵠⲆ[116].id = 116;
    this.ΔΔⲆ[212] = bf(68, 68, 0, ⲆⲆ[992], 3);
    this.ΔΔⲆ[212].id = 212;
    this.ᐃⵠᐃ[212] = bf(60, 60, 0, ⲆⲆ[991], 3);
    this.ᐃⵠᐃ[212].id = 212;
    this.ⲆᐃⵠⲆ[73] = bf(60, 60, 0, ⲆⲆ[990], 3);
    this.ⲆᐃⵠⲆ[73].id = 73;
    this.ΔΔⲆ[213] = bf(68, 68, 0, ⲆⲆ[995], 3);
    this.ΔΔⲆ[213].id = 213;
    this.ᐃⵠᐃ[213] = bf(60, 60, 0, ⲆⲆ[994], 3);
    this.ᐃⵠᐃ[213].id = 213;
    this.ⲆᐃⵠⲆ[74] = bf(60, 60, 0, ⲆⲆ[993], 3);
    this.ⲆᐃⵠⲆ[74].id = 74;
    this.ΔΔⲆ[214] = bf(68, 68, 0, ⲆⲆ[998], 3);
    this.ΔΔⲆ[214].id = 214;
    this.ᐃⵠᐃ[214] = bf(60, 60, 0, ⲆⲆ[997], 3);
    this.ᐃⵠᐃ[214].id = 214;
    this.ⲆᐃⵠⲆ[75] = bf(60, 60, 0, ⲆⲆ[996], 3);
    this.ⲆᐃⵠⲆ[75].id = 75;
    this.ΔΔⲆ[215] = bf(68, 68, 0, ⲆⲆ[1001], 3);
    this.ΔΔⲆ[215].id = 215;
    this.ᐃⵠᐃ[215] = bf(60, 60, 0, ⲆⲆ[1000], 3);
    this.ᐃⵠᐃ[215].id = 215;
    this.ⲆᐃⵠⲆ[76] = bf(60, 60, 0, ⲆⲆ[999], 3);
    this.ⲆᐃⵠⲆ[76].id = 76;
    this.ΔΔⲆ[216] = bf(68, 68, 0, ⲆⲆ[1004], 3);
    this.ΔΔⲆ[216].id = 216;
    this.ᐃⵠᐃ[216] = bf(60, 60, 0, ⲆⲆ[1003], 3);
    this.ᐃⵠᐃ[216].id = 216;
    this.ⲆᐃⵠⲆ[77] = bf(60, 60, 0, ⲆⲆ[1002], 3);
    this.ⲆᐃⵠⲆ[77].id = 77;
    this.ΔΔⲆ[220] = bf(68, 68, 0, ⲆⲆ[1007], 3);
    this.ΔΔⲆ[220].id = 220;
    this.ᐃⵠᐃ[220] = bf(60, 60, 0, ⲆⲆ[1006], 3);
    this.ᐃⵠᐃ[220].id = 220;
    this.ⲆᐃⵠⲆ[78] = bf(60, 60, 0, ⲆⲆ[1005], 3);
    this.ⲆᐃⵠⲆ[78].id = 78;
    this.ΔΔⲆ[217] = bf(68, 68, 0, ⲆⲆ[1016], 3);
    this.ΔΔⲆ[217].id = 217;
    this.ᐃⵠᐃ[217] = bf(60, 60, 0, ⲆⲆ[1015], 3);
    this.ᐃⵠᐃ[217].id = 217;
    this.ⲆᐃⵠⲆ[60] = bf(60, 60, 0, ⲆⲆ[1014], 3);
    this.ⲆᐃⵠⲆ[60].id = 60;
    this.ΔΔⲆ[219] = bf(68, 68, 0, ⲆⲆ[1013], 3);
    this.ΔΔⲆ[219].id = 219;
    this.ᐃⵠᐃ[219] = bf(60, 60, 0, ⲆⲆ[1012], 3);
    this.ᐃⵠᐃ[219].id = 219;
    this.ⲆᐃⵠⲆ[72] = bf(60, 60, 0, ⲆⲆ[1011], 3);
    this.ⲆᐃⵠⲆ[72].id = 72;
    this.ΔΔⲆ[218] = bf(68, 68, 0, ⲆⲆ[1010], 3);
    this.ΔΔⲆ[218].id = 218;
    this.ᐃⵠᐃ[218] = bf(60, 60, 0, ⲆⲆ[1009], 3);
    this.ᐃⵠᐃ[218].id = 218;
    this.ⲆᐃⵠⲆ[66] = bf(60, 60, 0, ⲆⲆ[1008], 3);
    this.ⲆᐃⵠⲆ[66].id = 66;
    this.ΔΔⲆ[153] = bf(68, 68, 0, ⲆⲆ[1201], 3);
    this.ΔΔⲆ[153].id = 153;
    this.ᐃⵠᐃ[153] = bf(60, 60, 0, ⲆⲆ[1199], 3);
    this.ᐃⵠᐃ[153].id = 153;
    this.ⲆᐃⵠⲆ[117] = bf(60, 60, 0, ⲆⲆ[1200], 3);
    this.ⲆᐃⵠⲆ[117].id = 117;
    this.ΔΔⲆ[154] = bf(68, 68, 0, ⲆⲆ[1205], 3);
    this.ΔΔⲆ[154].id = 154;
    this.ᐃⵠᐃ[154] = bf(60, 60, 0, ⲆⲆ[1203], 3);
    this.ᐃⵠᐃ[154].id = 154;
    this.ⲆᐃⵠⲆ[118] = bf(60, 60, 0, ⲆⲆ[1204], 3);
    this.ⲆᐃⵠⲆ[118].id = 118;
    this.ΔΔⲆ[155] = bf(68, 68, 0, ⲆⲆ[1209], 3);
    this.ΔΔⲆ[155].id = 155;
    this.ᐃⵠᐃ[155] = bf(60, 60, 0, ⲆⲆ[1207], 3);
    this.ᐃⵠᐃ[155].id = 155;
    this.ⲆᐃⵠⲆ[119] = bf(60, 60, 0, ⲆⲆ[1208], 3);
    this.ⲆᐃⵠⲆ[119].id = 119;
    this.ΔΔⲆ[156] = bf(68, 68, 0, ⲆⲆ[1213], 3);
    this.ΔΔⲆ[156].id = 156;
    this.ᐃⵠᐃ[156] = bf(60, 60, 0, ⲆⲆ[1211], 3);
    this.ᐃⵠᐃ[156].id = 156;
    this.ⲆᐃⵠⲆ[120] = bf(60, 60, 0, ⲆⲆ[1212], 3);
    this.ⲆᐃⵠⲆ[120].id = 120;
    this.ΔΔⲆ[157] = bf(68, 68, 0, ⲆⲆ[1217], 3);
    this.ΔΔⲆ[157].id = 157;
    this.ᐃⵠᐃ[157] = bf(60, 60, 0, ⲆⲆ[1215], 3);
    this.ᐃⵠᐃ[157].id = 157;
    this.ⲆᐃⵠⲆ[121] = bf(60, 60, 0, ⲆⲆ[1216], 3);
    this.ⲆᐃⵠⲆ[121].id = 121;
    this.ΔΔⲆ[203] = bf(68, 68, 0, ⲆⲆ[937], 3);
    this.ΔΔⲆ[203].id = 203;
    this.ᐃⵠᐃ[203] = bf(60, 60, 0, ⲆⲆ[936], 3);
    this.ᐃⵠᐃ[203].id = 203;
    this.ᐃⵠᐃ[203].info.ΔⲆ[2] = this.ᐃⵠᐃ[203].info.ΔⲆ[0];
    this.ΔΔⲆ[150] = bf(68, 68, 0, ⲆⲆ[524], 3);
    this.ΔΔⲆ[150].id = 150;
    this.ᐃⵠᐃ[150] = bf(60, 60, 0, ⲆⲆ[523], 3);
    this.ᐃⵠᐃ[150].id = 150;
    this.ᐃⵠᐃ[150].info.ΔⲆ[2] = this.ᐃⵠᐃ[150].info.ΔⲆ[0];
    this.ΔΔⲆ[202] = bf(68, 68, 0, ⲆⲆ[939], 3);
    this.ΔΔⲆ[202].id = 202;
    this.ᐃⵠᐃ[202] = bf(60, 60, 0, ⲆⲆ[938], 3);
    this.ᐃⵠᐃ[202].id = 202;
    this.ᐃⵠᐃ[202].info.ΔⲆ[2] = this.ᐃⵠᐃ[202].info.ΔⲆ[0];
    this.ΔΔⲆ[19] = bf(68, 68, 0, ⲆⲆ[934], 3);
    this.ΔΔⲆ[19].id = 19;
    this.ᐃⵠᐃ[19] = bf(60, 60, 0, ⲆⲆ[932], 3);
    this.ᐃⵠᐃ[19].id = 19;
    this.ⲆᐃⵠⲆ[39] = bf(60, 60, 0, ⲆⲆ[933], 3);
    this.ⲆᐃⵠⲆ[39].id = 39;
    this.ΔΔⲆ[20] = bf(68, 68, 0, ⲆⲆ[923], 3);
    this.ΔΔⲆ[20].id = 20;
    this.ᐃⵠᐃ[20] = bf(60, 60, 0, ⲆⲆ[921], 3);
    this.ᐃⵠᐃ[20].id = 20;
    this.ⲆᐃⵠⲆ[95] = bf(60, 60, 0, ⲆⲆ[922], 3);
    this.ⲆᐃⵠⲆ[95].id = 95;
    this.ΔΔⲆ[21] = bf(68, 68, 0, ⲆⲆ[927], 3);
    this.ΔΔⲆ[21].id = 21;
    this.ᐃⵠᐃ[21] = bf(60, 60, 0, ⲆⲆ[925], 3);
    this.ᐃⵠᐃ[21].id = 21;
    this.ⲆᐃⵠⲆ[96] = bf(60, 60, 0, ⲆⲆ[926], 3);
    this.ⲆᐃⵠⲆ[96].id = 96;
    this.ΔΔⲆ[22] = bf(68, 68, 0, ⲆⲆ[931], 3);
    this.ΔΔⲆ[22].id = 22;
    this.ᐃⵠᐃ[22] = bf(60, 60, 0, ⲆⲆ[929], 3);
    this.ᐃⵠᐃ[22].id = 22;
    this.ⲆᐃⵠⲆ[97] = bf(60, 60, 0, ⲆⲆ[930], 3);
    this.ⲆᐃⵠⲆ[97].id = 97;
    this.ΔΔⲆ[60] = bf(68, 68, 0, ⲆⲆ[736], 3);
    this.ΔΔⲆ[60].id = 60;
    this.ᐃⵠᐃ[60] = bf(60, 60, 0, ⲆⲆ[735], 3);
    this.ᐃⵠᐃ[60].id = 60;
    this.ⲆᐃⵠⲆ[127] = bf(60, 60, 0, ⲆⲆ[737], 3);
    this.ⲆᐃⵠⲆ[127].id = 127;
    this.ΔΔⲆ[90] = bf(68, 68, 0, ⲆⲆ[739], 3);
    this.ΔΔⲆ[90].id = 90;
    this.ᐃⵠᐃ[90] = bf(60, 60, 0, ⲆⲆ[738], 3);
    this.ᐃⵠᐃ[90].id = 90;
    this.ⲆᐃⵠⲆ[173] = bf(60, 60, 0, ⲆⲆ[740], 3);
    this.ⲆᐃⵠⲆ[173].id = 173;
    this.ΔΔⲆ[92] = bf(68, 68, 0, ⲆⲆ[745], 3);
    this.ΔΔⲆ[92].id = 92;
    this.ᐃⵠᐃ[92] = bf(60, 60, 0, ⲆⲆ[744], 3);
    this.ᐃⵠᐃ[92].id = 92;
    this.ⲆᐃⵠⲆ[174] = bf(60, 60, 0, ⲆⲆ[746], 3);
    this.ⲆᐃⵠⲆ[174].id = 174;
    this.ΔΔⲆ[93] = bf(68, 68, 0, ⲆⲆ[748], 3);
    this.ΔΔⲆ[93].id = 93;
    this.ᐃⵠᐃ[93] = bf(60, 60, 0, ⲆⲆ[747], 3);
    this.ᐃⵠᐃ[93].id = 93;
    this.ⲆᐃⵠⲆ[175] = bf(60, 60, 0, ⲆⲆ[749], 3);
    this.ⲆᐃⵠⲆ[175].id = 175;
    this.ΔΔⲆ[91] = bf(68, 68, 0, ⲆⲆ[742], 3);
    this.ΔΔⲆ[91].id = 91;
    this.ᐃⵠᐃ[91] = bf(60, 60, 0, ⲆⲆ[741], 3);
    this.ᐃⵠᐃ[91].id = 91;
    this.ⲆᐃⵠⲆ[176] = bf(60, 60, 0, ⲆⲆ[743], 3);
    this.ⲆᐃⵠⲆ[176].id = 176;
    this.ΔΔⲆ[100] = bf(68, 68, 0, ⲆⲆ[1165], 3);
    this.ΔΔⲆ[100].id = 100;
    this.ᐃⵠᐃ[100] = bf(60, 60, 0, ⲆⲆ[1164], 3);
    this.ᐃⵠᐃ[100].id = 100;
    this.ⲆᐃⵠⲆ[th.ΔᐃⵠⲆⲆ] = bf(60, 60, 0, ⲆⲆ[ts.ⲆΔΔⲆⲆΔΔⲆⵠ], 3);
    this.ⲆᐃⵠⲆ[th.ΔᐃⵠⲆⲆ].id = th.ΔᐃⵠⲆⲆ;
    this.ΔΔⲆ[34] = bf(68, 68, 0, ⲆⲆ[945], 3);
    this.ΔΔⲆ[34].id = 34;
    this.ᐃⵠᐃ[34] = bf(60, 60, 0, ⲆⲆ[943], 3);
    this.ᐃⵠᐃ[34].id = 34;
    this.ⲆᐃⵠⲆ[30] = bf(60, 60, 0, ⲆⲆ[944], 3);
    this.ⲆᐃⵠⲆ[30].id = 30;
    this.ΔΔⲆ[44] = bf(68, 68, 0, ⲆⲆ[948], 3);
    this.ΔΔⲆ[44].id = 44;
    this.ᐃⵠᐃ[44] = bf(60, 60, 0, ⲆⲆ[946], 3);
    this.ᐃⵠᐃ[44].id = 44;
    this.ⲆᐃⵠⲆ[92] = bf(60, 60, 0, ⲆⲆ[947], 3);
    this.ⲆᐃⵠⲆ[92].id = 92;
    this.ΔΔⲆ[17] = bf(68, 68, 0, ⲆⲆ[878], 3);
    this.ΔΔⲆ[17].id = 17;
    this.ᐃⵠᐃ[17] = bf(60, 60, 0, ⲆⲆ[877], 3);
    this.ᐃⵠᐃ[17].id = 17;
    this.ⲆᐃⵠⲆ[32] = bf(60, 60, 0, ⲆⲆ[879], 3);
    this.ⲆᐃⵠⲆ[32].id = 32;
    this.ΔΔⲆ[63] = bf(68, 68, 0, ⲆⲆ[568], 3);
    this.ΔΔⲆ[63].id = 63;
    this.ᐃⵠᐃ[63] = bf(60, 60, 0, ⲆⲆ[566], 3);
    this.ᐃⵠᐃ[63].id = 63;
    this.ⲆᐃⵠⲆ[130] = bf(60, 60, 0, ⲆⲆ[567], 3);
    this.ⲆᐃⵠⲆ[130].id = 130;
    this.ΔΔⲆ[187] = bf(68, 68, 0, ⲆⲆ[591], 3);
    this.ΔΔⲆ[187].id = 187;
    this.ᐃⵠᐃ[187] = bf(60, 60, 0, ⲆⲆ[253], 3);
    this.ᐃⵠᐃ[187].id = 187;
    this.ΔΔⲆ[nh.ΔΔⵠᐃᐃΔᐃ] = bf(68, 68, 0, ⲆⲆ[ts.ⵠΔΔᐃⲆⲆᐃⲆⵠ], 3);
    this.ΔΔⲆ[nh.ΔΔⵠᐃᐃΔᐃ].id = nh.ΔΔⵠᐃᐃΔᐃ;
    this.ᐃⵠᐃ[nh.ΔΔⵠᐃᐃΔᐃ] = bf(60, 60, 0, ⲆⲆ[ts.ΔⲆⵠⵠΔⵠⲆⵠⲆ], 3);
    this.ᐃⵠᐃ[nh.ΔΔⵠᐃᐃΔᐃ].id = nh.ΔΔⵠᐃᐃΔᐃ;
    this.ΔΔⲆ[nh.ΔΔᐃⵠᐃⲆΔ] = bf(68, 68, 0, ⲆⲆ[ts.ᐃᐃΔⲆᐃᐃΔⲆⲆ], 3);
    this.ΔΔⲆ[nh.ΔΔᐃⵠᐃⲆΔ].id = nh.ΔΔᐃⵠᐃⲆΔ;
    this.ᐃⵠᐃ[nh.ΔΔᐃⵠᐃⲆΔ] = bf(60, 60, 0, ⲆⲆ[ts.ᐃⵠⲆⲆΔᐃⵠᐃᐃ], 3);
    this.ᐃⵠᐃ[nh.ΔΔᐃⵠᐃⲆΔ].id = nh.ΔΔᐃⵠᐃⲆΔ;
    this.ΔΔⲆ[nh.ⲆⲆΔᐃⲆΔΔ] = bf(68, 68, 0, ⲆⲆ[ts.ⲆΔⲆⵠⵠᐃᐃⵠⲆ], 3);
    this.ΔΔⲆ[nh.ⲆⲆΔᐃⲆΔΔ].id = nh.ⲆⲆΔᐃⲆΔΔ;
    this.ᐃⵠᐃ[nh.ⲆⲆΔᐃⲆΔΔ] = bf(60, 60, 0, ⲆⲆ[ts.ⲆΔⵠᐃⲆᐃᐃⲆⲆ], 3);
    this.ᐃⵠᐃ[nh.ⲆⲆΔᐃⲆΔΔ].id = nh.ⲆⲆΔᐃⲆΔΔ;
    this.ΔΔⲆ[nh.ⵠⵠⵠⲆᐃⵠⵠ] = bf(68, 68, 0, ⲆⲆ[ts.ΔᐃⵠΔⲆⵠⵠⵠⲆ], 3);
    this.ΔΔⲆ[nh.ⵠⵠⵠⲆᐃⵠⵠ].id = nh.ⵠⵠⵠⲆᐃⵠⵠ;
    this.ᐃⵠᐃ[nh.ⵠⵠⵠⲆᐃⵠⵠ] = bf(60, 60, 0, ⲆⲆ[ts.ⲆⵠⲆⲆⵠⵠⵠⲆΔ], 3);
    this.ᐃⵠᐃ[nh.ⵠⵠⵠⲆᐃⵠⵠ].id = nh.ⵠⵠⵠⲆᐃⵠⵠ;
    this.ΔΔⲆ[nh.ⵠΔΔⲆⲆⲆⲆ] = bf(68, 68, 0, ⲆⲆ[ts.ⵠΔᐃΔⵠⵠᐃΔⵠ], 3);
    this.ΔΔⲆ[nh.ⵠΔΔⲆⲆⲆⲆ].id = nh.ⵠΔΔⲆⲆⲆⲆ;
    this.ᐃⵠᐃ[nh.ⵠΔΔⲆⲆⲆⲆ] = bf(60, 60, 0, ⲆⲆ[ts.ⵠⲆⲆⵠΔⲆⲆⲆⲆ], 3);
    this.ᐃⵠᐃ[nh.ⵠΔΔⲆⲆⲆⲆ].id = nh.ⵠΔΔⲆⲆⲆⲆ;
    this.Ⲇᐃᐃⵠᐃⵠⵠ = function () {
      for (var a = Dx.ⵠΔⵠⵠ.ⵠⵠΔⵠᐃ, b = 10, c = 10, d = 0; a.length > d; d++) {
        if (d > 0 && !(d % 4)) {
          b += a[0].info.width + 10;
          c = 10;
        }
        a[d].info.translate.x = b;
        a[d].info.translate.y = c;
        c += 10 + a[d].info.height;
      }
    };
    this.ⵠⵠⵠΔⲆΔΔ = function () {
      var a = Math.floor(Math.floor((3 + Dx.ⵠΔⵠⵠ.ⵠⵠΔⵠᐃ.length) / 4) * (10 + this.ΔΔⲆ[0].info.ΔⲆ[0].width) + 35);
      for (var b = 0; b < this.ΔΔⲆ.length; b++) {
        if (this.ΔΔⲆ[b]) {
          this.ΔΔⲆ[b].info.translate.x = a;
          this.ΔΔⲆ[b].info.translate.y = 22;
        }
      }
      this.ᐃⲆΔⲆΔⲆΔ.info.translate.x = a + 17;
      this.ᐃⲆΔⲆΔⲆΔ.info.translate.y = 22 + ⲆⲆ[339].height;
      this.ᐃⵠⵠⵠⵠΔⲆ.info.translate.x = a + 17;
      this.ᐃⵠⵠⵠⵠΔⲆ.info.translate.y = 30;
      this.ⵠⵠᐃⵠⵠᐃΔ.info.translate.x = a + 17;
      this.ⵠⵠᐃⵠⵠᐃΔ.info.translate.y = 22 + ⲆⲆ[339].height;
    };
    this.ΔΔΔᐃᐃⵠⲆⲆᐃ = function () {
      var a = Math.floor((Qo - ⲆⲆ[556][0].width) / 2);
      for (var b = 0; b < this.ⵠⵠᐃⵠⵠ.length; b++) {
        this.ⵠⵠᐃⵠⵠ[b].button.info.translate.x = a;
        this.ⵠⵠᐃⵠⵠ[b].button.info.translate.y = -13;
      }
    };
    this.ΔΔᐃⵠⲆⵠΔ = function () {
      var a = 12 + Math.floor(Math.floor((3 + Dx.ⵠΔⵠⵠ.ⵠⵠΔⵠᐃ.length) / 4) * (10 + this.ΔΔⵠⲆⲆΔⲆ.info.ΔⲆ[0].width) + 35);
      this.ΔΔⵠⲆⲆΔⲆ.info.translate.x = a;
      this.ΔΔⵠⲆⲆΔⲆ.info.translate.y = 33;
      this.ᐃⵠⵠⵠΔᐃⵠ.info.translate.x = this.ΔΔⵠⲆⲆΔⲆ.info.translate.x;
      this.ᐃⵠⵠⵠΔᐃⵠ.info.translate.y = 137;
      this.ⵠⲆⲆⵠΔᐃᐃ.info.translate.x = this.ΔΔⵠⲆⲆΔⲆ.info.translate.x;
      this.ⵠⲆⲆⵠΔᐃᐃ.info.translate.y = 240;
    };
    this.ⲆⵠⵠⲆΔⵠΔ = function () {
      var a = 12 + Math.floor(Math.floor((3 + Dx.ⵠΔⵠⵠ.ⵠⵠΔⵠᐃ.length) / 4) * (10 + this.ΔⵠⵠⲆΔᐃᐃ.info.ΔⲆ[0].width) + 35);
      this.ΔⵠⵠⲆΔᐃᐃ.info.translate.x = a;
      this.ΔⵠⵠⲆΔᐃᐃ.info.translate.y = 36;
      a += 83;
      this.ᐃᐃΔᐃΔΔⲆ.info.translate.x = a;
      this.ᐃᐃΔᐃΔΔⲆ.info.translate.y = 36;
      this.ΔⲆⲆⲆΔΔᐃ.info.translate.x = a;
      this.ΔⲆⲆⲆΔΔᐃ.info.translate.y = 36;
      this.ΔⲆΔⵠⲆⲆⲆ.info.translate.x = a;
      this.ΔⲆΔⵠⲆⲆⲆ.info.translate.y = 36;
      this.ⲆⲆᐃᐃΔⲆⲆ.info.translate.x = a;
      this.ⲆⲆᐃᐃΔⲆⲆ.info.translate.y = 36;
      this.ΔⲆᐃⲆⲆΔᐃ.info.translate.x = a;
      this.ΔⲆᐃⲆⲆΔᐃ.info.translate.y = 36;
    };
    this.ΔⵠΔᐃⵠΔⲆ = function () {
      var a = 12 + Math.floor(Math.floor((3 + Dx.ⵠΔⵠⵠ.ⵠⵠΔⵠᐃ.length) / 4) * (10 + this.ᐃⵠⲆⵠⲆⲆⲆ.info.ΔⲆ[0].width) + 35);
      this.ᐃⵠⲆⵠⲆⲆⲆ.info.translate.x = a;
      this.ᐃⵠⲆⵠⲆⲆⲆ.info.translate.y = 36;
      a += 83;
      this.ΔΔᐃᐃⲆᐃᐃ.info.translate.x = a;
      this.ΔΔᐃᐃⲆᐃᐃ.info.translate.y = 36;
    };
    this.ᐃᐃⵠᐃⲆⵠⵠ = function () {
      var a = Math.floor((10 + this.ⵠⲆᐃᐃⵠΔⲆ.info.ΔⲆ[0].width) * Math.floor((3 + Dx.ⵠΔⵠⵠ.ⵠⵠΔⵠᐃ.length) / 4) + 35);
      this.ⵠⲆᐃᐃⵠΔⲆ.info.translate.x = a;
      this.ⵠⲆᐃᐃⵠΔⲆ.info.translate.y = 22;
    };
    this.ΔⲆΔᐃⲆΔΔ = function () {
      var a = Dx.ᐃᐃᐃΔ.ΔⲆⲆΔΔ;
      if (a.length > 0) {
        var b = Math.floor((Qo - (a[0].info.width + 5) * Dx.ᐃᐃᐃΔ.max) / 2);
      }
      for (var c = 0; c < a.length; c++) {
        a[c].info.translate.x = b + (a[c].info.width + 5) * c;
        a[c].info.translate.y = aq - a[c].info.width - 10;
        this.ⵠᐃⵠⵠΔ[a[c].id].info.translate.x = a[c].info.translate.x + 13;
        this.ⵠᐃⵠⵠΔ[a[c].id].info.translate.y = a[c].info.translate.y - this.ⵠᐃⵠⵠΔ[a[c].id].info.ΔⲆ[0].height - 6;
      }
    };
    var n;
    var o = 0;
    function p() {
      f.ᐃⲆⲆ();
      if (++o == 30) {
        f.ᐃᐃᐃΔⵠΔΔ();
        f.ᐃⲆⲆ();
        return;
      }
      e.setTimeout(p, 33);
    }
    this.ᐃⲆᐃΔΔ = function (a) {
      if (Dx.ᐃΔⲆⲆᐃ.open) {
        Dx.ᐃΔⲆⲆᐃ.ᐃⲆᐃΔΔ();
      }
      if (Dx.ΔΔⵠᐃᐃ.open) {
        Dx.ΔΔⵠᐃᐃ.ᐃⲆᐃΔΔ();
      }
      document.getElementById("team_box").style.display = "none";
      f.ᐃⵠΔⲆΔ.style.display = "none";
      f.ᐃⵠΔⲆΔ.open = false;
      f.sign.style.display = "none";
      f.sign.open = ir;
      document.getElementById("shop_starterkit").style.display = "none";
      document.getElementById("home_craft").style.display = "none";
      document.getElementById("recipe_craft").style.display = "none";
      f.Δᐃᐃⵠ.open = false;
      document.getElementById("option_in_game").style.display = "none";
      f.options.open = false;
      document.getElementById("sure_delete").style.display = "none";
      f.ᐃⲆᐃⲆ.open = ba;
      document.getElementById("cancel_sure_delete").style.display = "none";
      f.ᐃⲆⵠᐃⵠ.open = Rg;
      document.getElementById("chronoquest").style.display = "none";
      f.ⲆⵠΔΔ.open = false;
      n = a;
      f.ᐃⲆⵠΔᐃⵠΔ();
      f.Ⲇᐃ.style.cursor = f.ΔⲆⵠⲆᐃⲆⲆ;
      Gx.ᐃⲆᐃΔΔ();
      g = -1;
      q();
      Mx();
    };
    var g = -1;
    function q() {
      f.ᐃⲆⲆ();
      if (++g == 30) {
        f.stop();
        n();
        return;
      }
      e.setTimeout(q, 33);
    }
    this.ⲆΔΔⲆⲆ = ul;
    this.stop = function () {
      this.ⲆΔΔⲆⲆ = false;
    };
    this.ⵠᐃⲆᐃᐃ = function () {
      ⲆᐃⲆᐃ.ΔⲆᐃⵠΔΔⵠᐃΔ();
      f.ⲆΔΔⲆⲆ = true;
      g = -1;
      o = 0;
      p();
    };
    this.ᐃⲆⲆ = function () {
      this.ⵠΔᐃⲆ.translate.x = Qo - this.ⵠΔᐃⲆ.ΔⲆ.width - 10;
      this.ⵠΔᐃⲆ.translate.y = 5;
      Cx.ⲆⲆᐃⵠⲆ.translate.x = this.ⵠΔᐃⲆ.translate.x - ⲆⲆ[725][0].width - 85;
      Cx.ⲆⲆᐃⵠⲆ.translate.y = 10;
      this.Δᐃᐃⵠ.button.info.translate.x = this.ⵠΔᐃⲆ.translate.x - ⲆⲆ[708][0].width - 10;
      this.Δᐃᐃⵠ.button.info.translate.y = 10;
      this.ⲆⵠΔΔ.button.info.translate.x = this.ⵠΔᐃⲆ.translate.x - ⲆⲆ[755][0].width - 20;
      this.ⲆⵠΔΔ.button.info.translate.y = this.Δᐃᐃⵠ.button.info.translate.y + ⲆⲆ[708][0].height + 5;
      this.options.button.info.translate.x = this.ⵠΔᐃⲆ.translate.x - ⲆⲆ[727][0].width - 20;
      this.options.button.info.translate.y = this.ⲆⵠΔΔ.button.info.translate.y + ⲆⲆ[727][0].height + 18;
      this.ⵠΔΔᐃ.ⲆⲆᐃΔⵠⲆᐃ.info.translate.x = this.ⵠΔᐃⲆ.translate.x - ⲆⲆ[727][0].width - 20;
      this.ⵠΔΔᐃ.ⲆⲆᐃΔⵠⲆᐃ.info.translate.y = this.options.button.info.translate.y + ⲆⲆ[783][0].height;
      this.ⵠΔΔᐃ.ⵠᐃⵠᐃⲆⲆⵠ.info.translate.x = this.ⵠΔᐃⲆ.translate.x - ⲆⲆ[727][0].width - 20;
      this.ⵠΔΔᐃ.ⵠᐃⵠᐃⲆⲆⵠ.info.translate.y = this.options.button.info.translate.y + ⲆⲆ[783][0].height;
      this.ᐃⵠΔⲆΔ.button.info.translate.x = this.ⵠΔᐃⲆ.translate.x - ⲆⲆ[795][0].width - 20;
      this.ᐃⵠΔⲆΔ.button.info.translate.y = this.ⵠΔΔᐃ.ⲆⲆᐃΔⵠⲆᐃ.info.translate.y + ⲆⲆ[795][0].height;
      Dx.ⵠⲆΔⲆⲆ.translate.x = this.ⵠΔᐃⲆ.translate.x - 63 - 85;
      Dx.ⵠⲆΔⲆⲆ.translate.y = 100;
      Dx.ΔΔⲆΔᐃ.translate.x = this.ⵠΔᐃⲆ.translate.x - ⲆⲆ[517].width - 85;
      Dx.ΔΔⲆΔᐃ.translate.y = Dx.ⵠⲆΔⲆⲆ.translate.y + 10 + ⲆⲆ[546].height;
      this.ΔΔᐃΔⲆ.translate.y = aq - 3 - 193;
      this.ΔΔᐃΔⲆ.translate.x = Qo - 3 - 193;
      this.ΔⲆⵠⲆ.translate.x = 5;
      this.ΔⲆⵠⲆ.translate.y = aq - this.ΔⲆⵠⲆ.ΔⲆ.height - 5;
      this.ⵠⵠⵠΔⵠ.button.info.translate.x = bq - 91 / 2;
      this.ⵠⵠⵠΔⵠ.button.info.translate.y = 50;
      this.Ⲇᐃᐃⵠᐃⵠⵠ();
      this.ΔⲆΔᐃⲆΔΔ();
      this.ⵠⵠⵠΔⲆΔΔ();
      this.ᐃᐃⵠᐃⲆⵠⵠ();
      this.ΔⵠΔᐃⵠΔⲆ();
      this.ⲆⵠⵠⲆΔⵠΔ();
      this.ΔΔᐃⵠⲆⵠΔ();
      this.ΔΔΔᐃᐃⵠⲆⲆᐃ();
      this.sign.ⲆᐃᐃⵠΔΔᐃ();
      Rp();
      Dx.ᐃΔⲆⲆᐃ.ᐃⲆⲆ();
      Dx.ΔΔⵠᐃᐃ.ᐃⲆⲆ();
      this.ᐃᐃᐃⵠᐃΔᐃⲆᐃ.ᐃⲆⲆ();
      this.Δᐃᐃⵠ.ΔⵠⲆΔᐃⵠΔ.ᐃⲆⲆ();
      this.Δᐃᐃⵠ.list.ᐃⲆⲆ();
      this.ᐃⲆᐃⲆ.ᐃⲆⲆ();
      this.ᐃⲆⵠᐃⵠ.ᐃⲆⲆ();
      this.ⲆⵠΔΔ.ᐃⲆⲆ();
      this.ⵠⵠⵠΔⵠ.ᐃⲆⲆ();
      this.options.ᐃⲆⲆ();
      this.ᐃⵠΔⲆΔ.ᐃⲆⲆ();
      this.sign.ᐃⲆⲆ();
      var a = 0;
      if (o != 30) {
        a = 1500 / (o + 1) - 50;
      }
      if (g != -1) {
        a = -(1500 / (30 - g + 1) - 48);
      }
      this.ⵠⵠⵠΔⵠ.button.info.translate.y -= a > 0 ? a : -a;
      this.ⵠΔᐃⲆ.translate.y -= a > 0 ? a : -a;
      Dx.ⵠⲆΔⲆⲆ.translate.y -= a > 0 ? a : -a;
      Dx.ΔΔⲆΔᐃ.translate.y -= a > 0 ? a : -a;
      this.Δᐃᐃⵠ.button.info.translate.y -= a > 0 ? a : -a;
      this.ⲆⵠΔΔ.button.info.translate.y -= a > 0 ? a : -a;
      this.options.button.info.translate.y -= a > 0 ? a : -a;
      this.ᐃⵠΔⲆΔ.button.info.translate.y -= a > 0 ? a : -a;
      this.ⵠΔΔᐃ.ⲆⲆᐃΔⵠⲆᐃ.info.translate.y -= a > 0 ? a : -a;
      this.ⵠΔΔᐃ.ⵠᐃⵠᐃⲆⲆⵠ.info.translate.y -= a > 0 ? a : -a;
      Cx.ⲆⲆᐃⵠⲆ.translate.y -= a > 0 ? a : -a;
      this.ΔⲆⵠⲆ.translate.y -= a < 0 ? a : -a;
      this.ΔΔᐃΔⲆ.translate.y -= a < 0 ? a : -a;
    };
    this.ᐃᐃᐃⵠᐃΔⲆΔΔ = function () {
      if (!Dx.ΔⲆⲆᐃΔ.enabled && this.ⵠⵠΔⵠΔΔⲆ && !Dx.ⵠᐃⲆⵠᐃ) {
        $p();
      }
      _u();
      (function () {
        var a = Cx.ⲆΔⵠ[0];
        if (Cx.mode === 0 || Cx.mode === 7 || Cx.mode === 2 || Cx.mode === 4 || Cx.mode === 5 || Cx.mode === 6 || Cx.mode === 3) {
          for (var b = 0; b < a.length; b++) {
            a[b].ⵠᐃΔᐃᐃⵠⲆ();
          }
        } else if (Cx.mode === 1) {
          for (b = 0; a.length > b; b++) {
            if (Dx.ⵠⲆⵠᐃΔⲆᐃ || Dx.ΔΔⲆΔᐃ.enabled || a[b].ΔΔᐃᐃ.ⲆⵠΔᐃΔ !== "spectator") {
              a[b].ⵠᐃΔᐃᐃⵠⲆ();
            }
          }
        }
      })();
      Lr.ⲆⲆΔⵠΔⲆΔ();
      if (this.ⵠⵠΔⵠΔΔⲆ) {
        Gp();
        if (this.ΔΔΔⵠⲆⵠΔ === 1) {
          this.Δᐃᐃⵠ.button.ΔⵠᐃⲆ(d);
        }
        if (Cx.mode !== 2 && Cx.mode !== 4 && Cx.mode !== 5 && this.ᐃᐃᐃⵠΔᐃⲆ === 1) {
          this.ⲆⵠΔΔ.button.ΔⵠᐃⲆ(d);
        }
        this.options.button.ΔⵠᐃⲆ(d);
        if (this.ⲆⲆⲆΔⵠᐃᐃ === 1) {
          this.ᐃⵠΔⲆΔ.button.ΔⵠᐃⲆ(d);
        }
        if (Gx.ⵠᐃⲆᐃᐃ) {
          this.ⵠΔΔᐃ.ⲆⲆᐃΔⵠⲆᐃ.ΔⵠᐃⲆ(d);
        } else {
          this.ⵠΔΔᐃ.ⵠᐃⵠᐃⲆⲆⵠ.ΔⵠᐃⲆ(d);
        }
        Pu();
        Zp();
        this.ΔⲆⵠⲆ.ΔⵠᐃⲆ();
        Vu();
        cv();
        dv();
        Uu();
        Xp();
        Hp();
        jp();
        (function () {
          if (!Dx.ΔᐃⵠΔ.open && !Dx.ᐃⲆⲆΔᐃ.open && !Dx.ⵠⵠᐃᐃ.open && !Dx.ⲆⵠᐃⲆ.open && !Dx.ⵠᐃⵠⵠ.open) {
            Dx.ΔΔᐃᐃⲆ.open = ol;
            var a = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ];
            var b = 100;
            if (a) {
              for (var c = 0; Cx.ⲆΔⵠ[35].length > c; c++) {
                var d = Cx.ⲆΔⵠ[35][c];
                var f = ΔⵠΔᐃ.ΔⵠⲆᐃ(d, a);
                if (f < b) {
                  b = f;
                  Dx.ΔΔᐃᐃⲆ.open = true;
                  Dx.ΔΔᐃᐃⲆ.ⲆΔⲆΔ = d.ⲆΔⲆΔ;
                  Dx.ΔΔᐃᐃⲆ.Δⵠⵠⵠⵠ = d.id;
                }
              }
            }
          }
        })();
        qp();
        Sp();
        _p();
        Qp();
        Rp();
        Ep();
      }
      if (Dx.ΔⲆⲆᐃΔ.enabled) {
        Up();
      }
      Np();
      if (this.ⵠⵠΔⵠΔΔⲆ && this.ᐃⲆⵠⵠᐃⲆΔ === 1) {
        Vp();
      }
      Dx.ᐃⲆⲆΔⵠⵠⵠ.ΔⵠᐃⲆ();
      Dx.alert.ΔⵠᐃⲆ("#FFF", "#000");
      if (this.ⵠⵠΔⵠΔΔⲆ) {
        Dx.ΔⲆⲆᐃΔ.ΔⵠᐃⲆ();
        Dx.ⵠⵠⵠΔⵠ.ΔⵠᐃⲆ();
        Dx.ᐃᐃᐃΔ.ⲆΔⵠⵠⲆΔⵠ.ΔⵠᐃⲆ(Ix.ᐃᐃⵠⵠ.x, Ix.ᐃᐃⵠⵠ.y);
      }
      Lp();
    };
    this.ᐃⵠᐃⵠⵠΔⵠΔⲆ = function () {
      Dx.ᐃΔᐃⲆ.ᐃⲆⲆ();
      Dx.ΔⲆⵠⲆ.ᐃⲆⲆ();
      if (!Dx.reconnect.enabled && Dx.ⲆⲆΔⲆⲆ) {
        Dx.control.ᐃⲆⲆ();
        Dx.ⵠⲆΔⲆⲆ.ᐃⲆⲆ();
      }
      Cx.ᐃⲆⲆ();
      this.ⲆⵠΔΔ.ᐃⲆΔⵠΔⲆⲆᐃⲆ();
    };
    this.ΔΔⲆᐃⲆⲆΔΔⲆ = function () {
      xw();
    };
    this.ⵠᐃᐃΔΔⵠΔΔᐃ = function () {
      ⲆᐃⲆᐃ.ⲆᐃᐃⵠⲆᐃΔᐃΔ();
      ⲆᐃⲆᐃ.ⵠΔⲆΔᐃΔⲆⵠⵠ();
      ⲆᐃⲆᐃ.ⵠⲆⵠⲆΔⲆΔᐃⵠ();
      ⲆᐃⲆᐃ.ᐃⲆⵠΔΔⵠⵠΔⲆ();
    };
    this.ΔⵠᐃⲆ = function () {
      if (!Dx.reconnect.enabled && Dx.ⲆⲆΔⲆⲆ) {
        this.ⵠᐃᐃΔΔⵠΔΔᐃ();
      }
      Gx.ᐃⲆⲆⲆⲆᐃⵠⵠⵠ();
      this.ᐃⵠᐃⵠⵠΔⵠΔⲆ();
      if (zx.ΔΔⲆᐃⵠⲆΔ !== 1) {
        this.ΔΔⲆᐃⲆⲆΔΔⲆ();
        this.ᐃᐃᐃⵠᐃΔⲆΔΔ();
      } else {
        var a = Δᐃ.ΔⵠᐃᐃⲆⵠΔ;
        Wp(d, a, bq - a.width / 4, jo - a.height / 4, a.width / 2, a.height / 2);
      }
    };
    this.ΔⲆⲆⵠⲆΔΔ = function (a) {
      if (Dx.ᐃΔⲆⲆᐃ.open && a.keyCode === 27) {
        Dx.ᐃΔⲆⲆᐃ.ᐃⲆᐃΔΔ();
      } else if (Dx.ΔΔⵠᐃᐃ.open && a.keyCode === 27) {
        Dx.ΔΔⵠᐃᐃ.ᐃⲆᐃΔΔ();
      } else if (Dx.ᐃΔⲆⲆᐃ.open || Dx.ΔΔⵠᐃᐃ.open || a.keyCode != 79 || g != -1) {
        if (a.keyCode == 13 && g == -1) {
          if (Dx.ΔΔⵠᐃᐃ.open) {
            Dx.ΔΔⵠᐃᐃ.ᐃⵠⵠⲆΔⲆΔ();
          } else {
            Dx.ᐃΔⲆⲆᐃ.ⵠᐃⲆᐃᐃ();
          }
        } else if (!Dx.ᐃΔⲆⲆᐃ.open && !Dx.ΔΔⵠᐃᐃ.open) {
          if (a.keyCode === 82) {
            Dx.ⵠⲆΔⲆⲆ.ΔⲆᐃΔΔᐃⲆ();
          } else if (a.keyCode !== 80 || Cx.mode !== 1 || Dx.ⵠⲆⵠᐃΔⲆᐃ) {
            if (a.keyCode >= 49 && a.keyCode <= 57) {
              if (Dx.ⵠΔⵠⵠ.id < 0) {
                var b = a.keyCode - 49;
                var c = Dx.ᐃᐃᐃΔ.ΔⲆⲆΔΔ[b];
                if (c) {
                  ⲆᐃⲆᐃ.ⵠΔⲆⲆⵠ(c.id, b);
                }
              }
            } else if (a.keyCode == 89) {
              Dx.ⵠΔⵠᐃᐃⲆⲆ = !Dx.ⵠΔⵠᐃᐃⲆⲆ;
            } else if (a.keyCode == 71) {
              Dx.ⵠΔⵠⵠ.ΔⵠᐃΔⲆⵠⲆⵠⲆ();
            }
          } else {
            Dx.ΔΔⲆΔᐃ.ΔⲆᐃΔΔᐃⲆ();
          }
        }
      } else {
        Dx.ΔΔⵠᐃᐃ.ᐃⵠᐃΔΔΔΔᐃᐃ();
      }
      Hx.up(a);
    };
    this.ⲆⵠΔⵠⲆⵠⲆ = function (a) {
      Hx.down(a);
      if (a.keyCode == 8 && !Dx.ᐃΔⲆⲆᐃ.open && !Dx.ΔΔⵠᐃᐃ.open) {
        a.preventDefault();
      }
    };
    this.ⵠⲆⵠᐃⲆⲆᐃ = function (b) {
      Ix.ᐃᐃⵠⵠ = vf(f.Ⲇᐃ, b);
      var c = Fq;
      if (Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0) {
        f.ΔΔᐃΔⲆ.focus(Ix.ᐃᐃⵠⵠ);
      }
      var d = Dx.ΔᐃⵠΔ;
      if (Dx.ⵠΔⵠⵠ.id < 0 && d.id >= 0) {
        if (!Dx.ΔᐃⵠΔ.lock || Dx.id === Dx.ΔᐃⵠΔ.ⲆΔⲆΔ) {
          c |= f.ΔΔⲆ[Dx.ΔᐃⵠΔ.id].ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, sf);
        }
      }
      var j = Dx.ⵠⵠᐃᐃ;
      if (j.open && j.ᐃᐃⵠⲆⵠ > 0) {
        c |= f.ΔΔᐃᐃⲆᐃᐃ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, sf);
      }
      var k = Dx.ⵠᐃⵠⵠ;
      if (k.open && k.ⲆΔΔⵠᐃΔⵠ > 0) {
        c |= f.ᐃᐃΔᐃΔΔⲆ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, sf);
        c |= f.ΔⲆⲆⲆΔΔᐃ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, sf);
        c |= f.ΔⲆΔⵠⲆⲆⲆ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, sf);
        c |= f.ⲆⲆᐃᐃΔⲆⲆ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, sf);
        c |= f.ΔⲆᐃⲆⲆΔᐃ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, sf);
      }
      var a = Dx.ⲆⵠᐃⲆ;
      if (a.open && a.ΔⲆΔⲆΔⵠΔ > 0) {
        c |= f.ⵠⲆⲆⵠΔᐃᐃ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, sf);
      }
      if (Dx.sign.open) {
        c |= f.sign.button.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, sf);
      }
      if (!Dx.ΔᐃⵠΔ.lock) {
        if (Dx.ΔᐃⵠΔ.ⲆⲆⲆᐃΔⲆⵠ) {
          c |= f.ⵠⵠᐃⵠⵠᐃΔ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, sf);
        }
      }
      if (Dx.ΔᐃⵠΔ.ΔᐃᐃᐃΔⲆΔ) {
        c |= f.ᐃⲆΔⲆΔⲆΔ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, sf);
      }
      if (Dx.ⵠΔⵠⵠ.id < 0 && !f.Δᐃᐃⵠ.open && !f.ᐃⲆᐃⲆ.open && !f.ᐃⲆⵠᐃⵠ.open && !f.ⲆⵠΔΔ.open && !f.options.open && !f.ᐃⵠΔⲆΔ.open) {
        for (var m = Dx.ᐃᐃᐃΔ.ΔⲆⲆΔΔ, n = 0; m.length > n; n++) {
          var o = m[n].ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, sf);
          c |= o;
          if (o) {
            Dx.ᐃᐃᐃΔ.ⲆΔⵠⵠⲆΔⵠ.start(n, Ix.ᐃᐃⵠⵠ);
          }
          if (d.open && (d.id < 0 || m[n].id == d.id) || Dx.ᐃⲆⲆΔᐃ.open && m[n].id === 109 || Dx.ΔΔᐃᐃⲆ.open && m[n].id === 180 || Dx.ⲆⵠᐃⲆ.open && (m[n].id === 109 || m[n].id === 131) || Dx.ⵠⵠᐃᐃ.open && m[n].id === 134 || Dx.ⵠᐃⵠⵠ.open && m[n].id === 109) {
            c |= f.ⵠᐃⵠⵠΔ[m[n].id].ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, sf);
          }
        }
      }
      if (Dx.ᐃⲆᐃᐃⵠ.open) {
        c |= f.ᐃⲆᐃᐃⵠ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, sf);
      }
      if (f.ⲆⲆᐃᐃⲆ != -1) {
        if (c |= f.ⵠⵠᐃⵠⵠ[f.ⲆⲆᐃᐃⲆ].button.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, sf)) {
          var p = Kg;
        }
      } else {
        p = false;
      }
      if (Dx.ⵠΔⵠⵠ.id < 0 && Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0 && !p && !f.Δᐃᐃⵠ.open && !f.ᐃⲆᐃⲆ.open && !f.options.open && !f.ᐃⲆⵠᐃⵠ.open && !f.ᐃⵠΔⲆΔ.open && !Dx.ⵠᐃⲆⵠᐃ) {
        m = Dx.ⵠΔⵠⵠ.ⵠⵠΔⵠᐃ;
        n = 0;
        for (; n < m.length; n++) {
          c |= m[n].ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, sf);
        }
      }
      if (Dx.ⵠΔⵠⵠ.id < 0 && Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0 && !!Dx.ⵠⵠⵠΔⵠ.open && !f.Δᐃᐃⵠ.open && !f.ᐃⲆᐃⲆ.open && !f.options.open && !f.ᐃⲆⵠᐃⵠ.open && !f.ⲆⵠΔΔ.open && !f.ᐃⵠΔⲆΔ.open) {
        c |= f.ⵠⵠⵠΔⵠ.button.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, sf);
      }
      if (Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0 && !f.ᐃⲆᐃⲆ.open && !f.options.open && !f.ᐃⲆⵠᐃⵠ.open && !f.ⲆⵠΔΔ.open && !f.ᐃⵠΔⲆΔ.open) {
        c |= f.Δᐃᐃⵠ.button.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, sf);
      }
      if (Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0 && !f.Δᐃᐃⵠ.open && !f.ᐃⲆᐃⲆ.open && !f.ᐃⲆⵠᐃⵠ.open && !f.ⲆⵠΔΔ.open && !f.ᐃⵠΔⲆΔ.open) {
        c |= f.options.button.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, sf);
      }
      if (Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0 && !f.Δᐃᐃⵠ.open && !f.ᐃⲆᐃⲆ.open && !f.ᐃⲆⵠᐃⵠ.open && !f.ⲆⵠΔΔ.open && !f.options.open) {
        c |= f.ᐃⵠΔⲆΔ.button.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, sf);
      }
      if (Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0 && !f.Δᐃᐃⵠ.open && !f.ᐃⲆᐃⲆ.open && !f.ᐃⲆⵠᐃⵠ.open && !f.ⲆⵠΔΔ.open && !f.options.open && !f.ᐃⵠΔⲆΔ.open) {
        if (Gx.ⵠᐃⲆᐃᐃ) {
          c |= f.ⵠΔΔᐃ.ⲆⲆᐃΔⵠⲆᐃ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, sf);
        } else {
          c |= f.ⵠΔΔᐃ.ⵠᐃⵠᐃⲆⲆⵠ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, sf);
        }
      }
      if (Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0 && !f.Δᐃᐃⵠ.open && !f.ᐃⵠΔⲆΔ.open && !f.ᐃⲆᐃⲆ.open && !f.options.open && !f.ᐃⲆⵠᐃⵠ.open && Cx.mode !== 2 && Cx.mode !== 4 && Cx.mode !== 5) {
        c |= f.ⲆⵠΔΔ.button.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, sf);
      }
      if (!c && !f.Δᐃᐃⵠ.open && !f.ᐃⲆᐃⲆ.open && !f.options.open && !f.ᐃⲆⵠᐃⵠ.open && !f.ⲆⵠΔΔ.open && !f.ᐃⵠΔⲆΔ.open && !f.sign.open) {
        if (Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ >= 0) {
          ⲆᐃⲆᐃ.ᐃΔⵠⵠⲆᐃΔΔⵠ();
        } else if (!p) {
          Ix.down();
        }
      }
    };
    this.ΔⲆⵠΔΔⲆΔ = function (b) {
      Ix.ᐃᐃⵠⵠ = vf(f.Ⲇᐃ, b);
      Ix.up();
      if (!Dx.ᐃᐃᐃΔ.ⲆΔⵠⵠⲆΔⵠ.release()) {
        var c = Dx.ΔᐃⵠΔ;
        var d = Dx.ᐃⲆⲆΔᐃ;
        var i = Dx.ΔΔᐃᐃⲆ;
        var j = Dx.ⵠⵠᐃᐃ;
        var k = Dx.ⵠᐃⵠⵠ;
        var m = Dx.ⲆⵠᐃⲆ;
        if (Dx.control.attack) {
          Dx.control.attack = 0;
          ⲆᐃⲆᐃ.ⵠⵠⲆᐃⵠⲆΔⲆΔ();
        }
        if (f.ⲆⲆᐃᐃⲆ != -1) {
          var n = f.ⵠⵠᐃⵠⵠ[f.ⲆⲆᐃᐃⲆ].button.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf);
          var o = document.getElementById("team_box").style;
          if (n && o.display == "inline-block") {
            o.display = "none";
            return;
          }
          if (n) {
            f.ⵠⵠᐃⵠⵠ[f.ⲆⲆᐃᐃⲆ].action();
          }
        }
        if (Dx.ⵠΔⵠⵠ.id < 0 && c.id >= 0 && !f.ᐃⲆᐃⲆ.open) {
          if (!Dx.ΔᐃⵠΔ.lock || Dx.ΔᐃⵠΔ.ⲆΔⲆΔ === Dx.id) {
            if (n = f.ΔΔⲆ[Dx.ΔᐃⵠΔ.id].ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf)) {
              ⲆᐃⲆᐃ.ⵠⵠⵠⲆⲆⵠⵠΔⵠ(c);
            }
          }
        }
        if ((j = Dx.ⵠⵠᐃᐃ).open && j.ᐃᐃⵠⲆⵠ > 0 && !f.ᐃⲆᐃⲆ.open) {
          if (n = f.ΔΔᐃᐃⲆᐃᐃ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf)) {
            ⲆᐃⲆᐃ.ⵠΔⵠⵠⵠΔᐃᐃΔ(j);
          }
        }
        if ((k = Dx.ⵠᐃⵠⵠ).open && k.ⲆΔΔⵠᐃΔⵠ > 0 && !f.ᐃⲆᐃⲆ.open) {
          switch (k.type) {
            case 24:
              if (n = f.ᐃᐃΔᐃΔΔⲆ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf)) {
                ⲆᐃⲆᐃ.ⲆΔΔⲆᐃⵠᐃ(k);
              }
              break;
            case 25:
              if (n = f.ΔⲆⲆⲆΔΔᐃ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf)) {
                ⲆᐃⲆᐃ.ⲆΔΔⲆᐃⵠᐃ(k);
              }
              break;
            case 26:
              if (n = f.ΔⲆΔⵠⲆⲆⲆ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf)) {
                ⲆᐃⲆᐃ.ⲆΔΔⲆᐃⵠᐃ(k);
              }
              break;
            case 27:
              if (n = f.ⲆⲆᐃᐃΔⲆⲆ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf)) {
                ⲆᐃⲆᐃ.ⲆΔΔⲆᐃⵠᐃ(k);
              }
              break;
            case 28:
              if (n = f.ΔⲆᐃⲆⲆΔᐃ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf)) {
                ⲆᐃⲆᐃ.ⲆΔΔⲆᐃⵠᐃ(k);
              }
          }
        }
        if ((m = Dx.ⲆⵠᐃⲆ).open && m.ΔⲆΔⲆΔⵠΔ > 0 && !f.ᐃⲆᐃⲆ.open) {
          if (n = f.ⵠⲆⲆⵠΔᐃᐃ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf)) {
            ⲆᐃⲆᐃ.ⲆΔⲆⵠⵠⵠᐃⲆΔ(m);
          }
        }
        if (Dx.sign.open && !f.ᐃⲆᐃⲆ.open) {
          if (n = f.sign.button.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf)) {
            f.sign.select();
          }
        }
        if (!Dx.ΔᐃⵠΔ.lock && !f.ᐃⲆᐃⲆ.open) {
          if (Dx.ΔᐃⵠΔ.ⲆⲆⲆᐃΔⲆⵠ && (n = f.ⵠⵠᐃⵠⵠᐃΔ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf))) {
            ⲆᐃⲆᐃ.ⵠⵠΔⲆⵠΔΔΔⵠ(c);
          }
        }
        if (Dx.ΔᐃⵠΔ.ΔᐃᐃᐃΔⲆΔ && !f.ᐃⲆᐃⲆ.open && (n = f.ᐃⲆΔⲆΔⲆΔ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf))) {
          ⲆᐃⲆᐃ.ᐃΔⵠⲆᐃⲆᐃΔᐃ(c);
          if (ga) {
            ga("send", "event", "Game", "lockpick");
          }
        }
        if (Dx.ᐃⲆᐃᐃⵠ.open) {
          if (n = f.ᐃⲆᐃᐃⵠ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf)) {
            ⲆᐃⲆᐃ.ᐃⲆᐃᐃⵠ();
            if (ga) {
              ga("send", "event", "Game", "resurrection");
            }
          }
        }
        if (Dx.ⵠΔⵠⵠ.id < 0 && !Dx.ΔⲆⲆᐃΔ.enabled && !f.ᐃⲆᐃⲆ.open) {
          for (var l = Dx.ᐃᐃᐃΔ.ΔⲆⲆΔΔ, p = 0; l.length > p; p++) {
            if (n = l[p].ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf)) {
              if (b.which != 1 || b.shiftKey) {
                if ((b.which == 1 && b.shiftKey || b.which == 3) && Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0) {
                  f.ᐃⲆᐃⲆ.ⲆⲆⲆⵠᐃᐃⲆ(l[p].id);
                }
              } else {
                ⲆᐃⲆᐃ.ⵠΔⲆⲆⵠ(l[p].id, p);
              }
            } else if (c.open && (c.id < 0 || c.id === l[p].id)) {
              if ((n = f.ⵠᐃⵠⵠΔ[l[p].id].ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf)) && Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0) {
                ⲆᐃⲆᐃ.ⲆΔⵠᐃᐃᐃⲆⲆΔ(c, l[p].id, b.shiftKey ? 10 : 1);
              }
            } else if (i.open && l[p].id === 180) {
              if ((n = f.ⵠᐃⵠⵠΔ[l[p].id].ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf)) && Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0) {
                ⲆᐃⲆᐃ.ⲆΔⲆⲆⲆΔⵠΔᐃ(i);
              }
            } else if (d.open && l[p].id === 109) {
              if ((n = f.ⵠᐃⵠⵠΔ[l[p].id].ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf)) && Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0) {
                ⲆᐃⲆᐃ.ⵠΔᐃᐃⲆᐃᐃⲆᐃ(d, b.shiftKey ? 10 : 1);
              }
            } else if (j.open && l[p].id === 134) {
              if ((n = f.ⵠᐃⵠⵠΔ[l[p].id].ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf)) && Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0) {
                ⲆᐃⲆᐃ.ⵠΔⲆⵠⵠᐃⵠⵠⵠ(j, b.shiftKey ? 10 : 1);
              }
            } else if (k.open && l[p].id === 109) {
              if ((n = f.ⵠᐃⵠⵠΔ[l[p].id].ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf)) && Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0) {
                ⲆᐃⲆᐃ.ᐃⵠΔᐃⵠⵠΔⲆΔ(k, b.shiftKey ? 10 : 1);
              }
            } else if (m.open && (l[p].id === 109 || l[p].id === 131)) {
              if ((n = f.ⵠᐃⵠⵠΔ[l[p].id].ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf)) && Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0) {
                if (l[p].id === 109) {
                  ⲆᐃⲆᐃ.ΔᐃΔΔⲆⵠᐃ(m, b.shiftKey ? 10 : 1, 0);
                } else {
                  ⲆᐃⲆᐃ.ΔᐃΔΔⲆⵠᐃ(m, 0, b.shiftKey ? 10 : 1);
                }
              }
            }
          }
        }
        if (Dx.ⵠΔⵠⵠ.id < 0 && Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0 && !Dx.ΔⲆⲆᐃΔ.enabled && !f.ᐃⲆᐃⲆ.open && !Dx.ⵠᐃⲆⵠᐃ) {
          l = Dx.ⵠΔⵠⵠ.ⵠⵠΔⵠᐃ;
          p = 0;
          for (; l.length > p; p++) {
            if (n = l[p].ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf)) {
              ᐃⵠⲆⲆⵠ = ⲆᐃⲆᐃ.ΔⵠⲆᐃΔⲆᐃΔᐃ(l[p].id);
              if (ᐃⵠⲆⲆⵠ && ga) {
                ga("send", "event", "Game", "craft", sh[nb[l[p].id].ᐃⲆⲆⲆ].name);
              }
            }
          }
        }
        if (Dx.ⵠΔⵠⵠ.id < 0 && Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0 && Dx.ⵠⵠⵠΔⵠ.open && !f.ᐃⵠΔⲆΔ.open && !f.Δᐃᐃⵠ.open && !f.ᐃⲆᐃⲆ.open && !f.options.open && !f.ᐃⲆⵠᐃⵠ.open && !f.ⲆⵠΔΔ.open) {
          if (n = f.ⵠⵠⵠΔⵠ.button.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, rf)) {
            Fx.ⵠⵠⵠΔⵠ.select();
          }
        }
        if (Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0 && !f.Δᐃᐃⵠ.open && !f.ᐃⲆᐃⲆ.open && !f.ᐃⵠΔⲆΔ.open && !f.ᐃⲆⵠᐃⵠ.open && !f.ⲆⵠΔΔ.open && !f.options.open) {
          if (Gx.ⵠᐃⲆᐃᐃ) {
            if (n = f.ⵠΔΔᐃ.ⲆⲆᐃΔⵠⲆᐃ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf)) {
              Gx.select();
              if (ga) {
                ga("send", "event", "Game", "sound on");
              }
            }
          } else if (n = f.ⵠΔΔᐃ.ⵠᐃⵠᐃⲆⲆⵠ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf)) {
            Gx.select();
            if (ga) {
              ga("send", "event", "Game", "sound off");
            }
          }
        }
        if (Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0 && !f.Δᐃᐃⵠ.open && !f.ᐃⲆᐃⲆ.open && !f.ᐃⲆⵠᐃⵠ.open && !f.ⲆⵠΔΔ.open && !f.ᐃⵠΔⲆΔ.open) {
          if (n = f.options.button.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf)) {
            f.options.ⲆΔᐃᐃΔᐃⵠⵠⵠ();
            if (ga) {
              ga("send", "event", "Game", "options");
            }
          }
        }
        if (Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0 && !f.Δᐃᐃⵠ.open && !f.ᐃⲆᐃⲆ.open && !f.ᐃⲆⵠᐃⵠ.open && !f.ⲆⵠΔΔ.open && !f.options.open && f.ⲆⲆⲆΔⵠᐃᐃ === 1) {
          if (n = f.ᐃⵠΔⲆΔ.button.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf)) {
            f.ᐃⵠΔⲆΔ.select();
            if (ga) {
              ga("send", "event", "Game", "market");
            }
          }
        }
        if (Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0 && !f.ᐃⲆᐃⲆ.open && !f.ᐃⵠΔⲆΔ.open && !f.options.open && !f.ᐃⲆⵠᐃⵠ.open && !f.ⲆⵠΔΔ.open && f.ΔΔΔⵠⲆⵠΔ === 1) {
          if (n = f.Δᐃᐃⵠ.button.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf)) {
            f.Δᐃᐃⵠ.ᐃⵠΔⲆᐃⵠⲆΔΔ();
            if (ga) {
              ga("send", "event", "Game", "recipe");
            }
          }
        }
        if (Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0 && !f.Δᐃᐃⵠ.open && !f.ᐃⲆᐃⲆ.open && !f.options.open && !f.ᐃⲆⵠᐃⵠ.open && !f.ᐃⵠΔⲆΔ.open && Cx.mode !== 2 && Cx.mode !== 4 && Cx.mode !== 5 && f.ᐃᐃᐃⵠΔᐃⲆ === 1) {
          if (n = f.ⲆⵠΔΔ.button.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, hf)) {
            f.ⲆⵠΔΔ.select();
            if (ga) {
              ga("send", "event", "Game", "quests");
            }
          }
        }
        if (Dx.ⵠΔⵠⵠ.ⵠⲆᐃᐃⲆ && b.which == 3) {
          f.ᐃⲆⵠᐃⵠ.ⲆⲆⲆⵠᐃᐃⲆ();
        }
      }
    };
    this.ⵠᐃⲆⲆᐃⲆᐃ = Ee;
    this.ⵠⲆⲆᐃⵠⲆᐃ = function (b) {
      Ix.ᐃᐃⵠⵠ = vf(f.Ⲇᐃ, b);
      var d = false;
      Fx.ⵠᐃⵠⲆⵠ.display = 0;
      Dx.ᐃᐃᐃΔ.ⲆΔⵠⵠⲆΔⵠ.ΔⵠᐃⲆᐃ(Ix.ᐃᐃⵠⵠ);
      if (f.ⲆⲆᐃᐃⲆ != -1) {
        d |= f.ⵠⵠᐃⵠⵠ[f.ⲆⲆᐃᐃⲆ].button.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, rf);
      }
      var i = Dx.ⵠⵠᐃᐃ;
      if (i.open && i.ᐃᐃⵠⲆⵠ > 0) {
        d |= f.ΔΔᐃᐃⲆᐃᐃ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, rf);
      }
      var j = Dx.ⵠᐃⵠⵠ;
      if (j.open && j.ⲆΔΔⵠᐃΔⵠ > 0) {
        d |= f.ᐃᐃΔᐃΔΔⲆ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, rf);
        d |= f.ΔⲆⲆⲆΔΔᐃ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, rf);
        d |= f.ΔⲆΔⵠⲆⲆⲆ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, rf);
        d |= f.ⲆⲆᐃᐃΔⲆⲆ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, rf);
        d |= f.ΔⲆᐃⲆⲆΔᐃ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, rf);
      }
      var a = Dx.ⲆⵠᐃⲆ;
      if (a.open && a.ΔⲆΔⲆΔⵠΔ > 0) {
        d |= f.ⵠⲆⲆⵠΔᐃᐃ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, rf);
      }
      if (Dx.sign.open) {
        d |= f.sign.button.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, rf);
      }
      var k = Dx.ΔᐃⵠΔ;
      if (Dx.ⵠΔⵠⵠ.id < 0 && k.id >= 0 && !Dx.ΔⲆⲆᐃΔ.enabled && (!Dx.ΔᐃⵠΔ.lock || Dx.ΔᐃⵠΔ.ⲆΔⲆΔ === Dx.id)) {
        d |= f.ΔΔⲆ[k.id].ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, rf);
      }
      if (Dx.ᐃⲆᐃᐃⵠ.open) {
        d |= f.ᐃⲆᐃᐃⵠ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, rf);
      }
      if (!Dx.ΔᐃⵠΔ.lock && !Dx.ΔⲆⲆᐃΔ.enabled) {
        if (Dx.ΔᐃⵠΔ.ⲆⲆⲆᐃΔⲆⵠ) {
          d |= f.ⵠⵠᐃⵠⵠᐃΔ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, rf);
        }
      }
      if (Dx.ΔᐃⵠΔ.ΔᐃᐃᐃΔⲆΔ && !Dx.ΔⲆⲆᐃΔ.enabled) {
        d |= f.ᐃⲆΔⲆΔⲆΔ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, rf);
      }
      if (Dx.ⵠΔⵠⵠ.id < 0 && !Dx.ΔⲆⲆᐃΔ.enabled) {
        for (var m = Dx.ᐃᐃᐃΔ.ΔⲆⲆΔΔ, n = 0; m.length > n; n++) {
          var o = m[n].ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, rf);
          d |= Fx.ⵠᐃⵠⲆⵠ.ᐃΔⲆⵠ(o, m[n], 0);
          if (k.open && (k.id < 0 || k.id == m[n].id) || Dx.ᐃⲆⲆΔᐃ.open && m[n].id == 109 || Dx.ΔΔᐃᐃⲆ.open && m[n].id === 180 || Dx.ⲆⵠᐃⲆ.open && (m[n].id == 109 || m[n].id == 131) || Dx.ⵠⵠᐃᐃ.open && m[n].id == 134 || Dx.ⵠᐃⵠⵠ.open && m[n].id == 109) {
            d |= f.ⵠᐃⵠⵠΔ[m[n].id].ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, rf);
          }
        }
      }
      if (Dx.ⵠΔⵠⵠ.id < 0 && Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0 && !Dx.ΔⲆⲆᐃΔ.enabled && !Dx.ⵠᐃⲆⵠᐃ) {
        m = Dx.ⵠΔⵠⵠ.ⵠⵠΔⵠᐃ;
        n = 0;
        for (; n < m.length; n++) {
          o = false;
          o = m[n].ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, rf);
          d |= Fx.ⵠᐃⵠⲆⵠ.ᐃΔⲆⵠ(o, m[n], 1);
        }
      }
      if (Dx.ⵠΔⵠⵠ.id < 0 && Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0 && !!Dx.ⵠⵠⵠΔⵠ.open && !f.Δᐃᐃⵠ.open && !f.ᐃⲆᐃⲆ.open && !f.options.open && !f.ᐃⲆⵠᐃⵠ.open && !f.ⲆⵠΔΔ.open && !f.ᐃⵠΔⲆΔ.open) {
        d |= f.ⵠⵠⵠΔⵠ.button.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, rf);
      }
      if (Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0 && !f.ᐃⲆᐃⲆ.open && !f.options.open && !f.ᐃⲆⵠᐃⵠ.open && !f.ⲆⵠΔΔ.open && !f.ᐃⵠΔⲆΔ.open && f.ΔΔΔⵠⲆⵠΔ === 1) {
        d |= f.Δᐃᐃⵠ.button.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, rf);
      }
      if (Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0 && !f.Δᐃᐃⵠ.open && !f.ᐃⲆᐃⲆ.open && !f.ᐃⲆⵠᐃⵠ.open && !f.ⲆⵠΔΔ.open && !f.ᐃⵠΔⲆΔ.open) {
        d |= f.options.button.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, rf);
      }
      if (Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0 && !f.Δᐃᐃⵠ.open && !f.ᐃⲆᐃⲆ.open && !f.ᐃⲆⵠᐃⵠ.open && !f.ⲆⵠΔΔ.open && !f.options.open && f.ⲆⲆⲆΔⵠᐃᐃ === 1) {
        d |= f.ᐃⵠΔⲆΔ.button.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, rf);
      }
      if (Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0 && !f.Δᐃᐃⵠ.open && !f.ᐃⲆᐃⲆ.open && !f.ᐃⲆⵠᐃⵠ.open && !f.ⲆⵠΔΔ.open && !f.options.open && !f.ᐃⵠΔⲆΔ.open) {
        if (Gx.ⵠᐃⲆᐃᐃ) {
          d |= f.ⵠΔΔᐃ.ⲆⲆᐃΔⵠⲆᐃ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, rf);
        } else {
          d |= f.ⵠΔΔᐃ.ⵠᐃⵠᐃⲆⲆⵠ.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, rf);
        }
      }
      if (Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ < 0 && !f.Δᐃᐃⵠ.open && !f.ᐃⲆᐃⲆ.open && !f.options.open && !f.ᐃⲆⵠᐃⵠ.open && !f.ᐃⵠΔⲆΔ.open && Cx.mode !== 2 && Cx.mode !== 4 && Cx.mode !== Df.ⲆⲆⲆⲆⵠⲆΔⵠᐃ && f.ᐃᐃᐃⵠΔᐃⲆ === 1) {
        d |= f.ⲆⵠΔΔ.button.ᐃΔⲆⵠ(f.Ⲇᐃ, Ix.ᐃᐃⵠⵠ, rf);
      }
      if (d !== f.ⵠᐃⲆⲆᐃⲆᐃ) {
        f.ⵠᐃⲆⲆᐃⲆᐃ = d;
        c.style.cursor = d ? f.ΔᐃᐃΔᐃⵠⲆ : f.ΔⲆⵠⲆᐃⲆⲆ;
      }
    };
    this.ᐃᐃᐃΔⵠΔΔ = function () {
      e.addEventListener("mousedown", this.ⵠⲆⵠᐃⲆⲆᐃ, ba);
      e.addEventListener("mouseup", this.ΔⲆⵠΔΔⲆΔ, Rg);
      e.addEventListener("mousemove", this.ⵠⲆⲆᐃⵠⲆᐃ, Po);
      e.addEventListener("keyup", this.ΔⲆⲆⵠⲆΔΔ, false);
      e.addEventListener("keydown", this.ⲆⵠΔⵠⲆⵠⲆ, false);
    };
    this.ᐃⲆⵠΔᐃⵠΔ = function () {
      e.removeEventListener("mousedown", this.ⵠⲆⵠᐃⲆⲆᐃ, false);
      e.removeEventListener("mouseup", this.ΔⲆⵠΔΔⲆΔ, cr);
      e.removeEventListener("mousemove", this.ⵠⲆⲆᐃⵠⲆᐃ, Ml);
      e.removeEventListener("keyup", this.ΔⲆⲆⵠⲆΔΔ, tg);
      e.removeEventListener("keydown", this.ⲆⵠΔⵠⲆⵠⲆ, false);
    };
  }
  function Vw(a, b) {
    const c = (24 << (a >> 8 & 255)) + (0 << (a >> 16 & 255)) + (8 << (a >> 24 & 255)) + (16 << (a >> 0 & 255));
    const d = (b | 2328) & ~(b & 2328);
    const f = yx(c, d, c, d);
    (function (b, c, d, f) {
      const g = ~(b & 20997) & 20997 | ~(b & 20997) & b;
      const i = (c | 30676) & ~(c & 30676);
      const a = d ^ 37560;
      const j = (f | 32634) & ~(f & 32634);
      const k = bo(g, i, a, j, g);
      It(a, j);
    })(c, d, c, d);
    return f ^ 15387;
  }
  let Ww;
  let Xw = zo;
  const Yw = jk;
  function Zw(b, c, d, f, g, h) {
    bi(Xw, b, c, d, f, g, h);
    const a = Bf(Ww[0], Ww[1], Ww[2], Ww[3]);
    (function (b, c, d, f, g, h) {
      Sj(Xw, b, c, d, f, g, h);
      const a = Rk(Ww[0], Ww[1], Ww[2], Ww[3], Ww[4]);
      sx(Ww[5], Ww[0], Ww[1]);
    })(Ww[4], Ww[5], Ww[0], Ww[1], Ww[2], Ww[3]);
    return (a | 48712) & ~(a & 48712);
  }
  function $w(a, b) {
    const c = (8 << (a >> 8 & 255)) + (0 << (a >> 16 & 255)) + (24 << (a >> 24 & 255)) + (16 << (a & 255));
    const d = Sw(c, 0, c);
    Sw(c, 0, c);
    return ~(d & 1748) & 1748 | ~(d & 1748) & d;
  }
  function _w() {
    ΔⵠΔᐃ.ⲆⵠⲆⵠᐃΔⲆ("https://twitter.com/intent/tweet?text=I%20survived%20" + Dx.ⲆⲆⵠ + "%20days%20with%20" + Dx.ⲆΔⵠΔᐃᐃᐃ.ⲆⲆⲆⲆⲆ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
  }
  function ax(b, c) {
    this.Ⲇᐃ = b;
    this.Ⲇ = c;
    var d = this;
    this.ⵠⵠⵠⲆᐃⵠⲆ = false;
    this.ᐃΔⲆⵠᐃΔΔ = {
      id: document.getElementById("scoreboard"),
      style: document.getElementById("scoreboard").style,
      height: 0,
      translate: {
        y: 0,
        x: 0
      },
      ᐃⲆⲆ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = this.translate.y + "px";
      },
      ᐃⲆᐃⵠⵠ: function () {
        this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + Dx.ⲆΔⵠΔᐃᐃᐃ.ΔᐃⲆⵠⲆᐃⲆ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + Gb[335] + " : " + Dx.ⲆⲆⵠ + "</div><div class=\"stats\"> " + Gb[334] + " : " + Dx.ⲆΔⵠΔᐃᐃᐃ.ⵠⲆΔᐃΔ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + Gb[333] + " : " + Dx.ⲆΔⵠΔᐃᐃᐃ.ⲆⲆⲆⲆⲆ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + Dx.ⲆΔⵠΔᐃᐃᐃ.ΔᐃΔⲆⵠⲆᐃ + " " + Gb[332] + "</div></div><div id=\"shop_points\">" + Gb[331] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + Gb[329] + "</div><div class=\"social\" id=\"fffacebook\">" + Gb[330] + "</div></div><div id=\"bbback\">" + Gb[328] + "</div>";
        this.style.display = "inline-block";
        document.getElementById("tttwitter").addEventListener("mouseup", _w, false);
        document.getElementById("bbback").addEventListener("mouseup", function () {
          Ex.ᐃⲆᐃΔΔ(zx.ⵠᐃⲆᐃᐃ);
        }, false);
        document.getElementById("fffacebook").addEventListener("mouseup", dx, false);
        this.height = Math.floor(this.id.clientHeight / 2);
        (function () {
          var a = new XMLHttpRequest();
          a.open("GET", Qx + "getBreadAndScore?userid=" + Xx);
          a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          a.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
              var b = JSON.parse(a.responseText);
              var c = b.b - zx.ⲆΔΔᐃⵠ;
              zx.ⲆΔΔᐃⵠ = b.b;
              zx.ⲆⲆⲆⲆⲆ = b.s;
              zx.ⵠᐃⵠⵠⵠ = zx.ΔⲆⵠⲆΔΔⵠ(zx.ⲆⲆⲆⲆⲆ);
              zx.ᐃⵠⵠΔⲆⲆⲆ = zx.ⲆⵠᐃⵠⲆΔΔ(zx.ⲆⲆⲆⲆⲆ);
              zx.ᐃⵠΔⵠⲆⲆᐃ = 0;
              document.getElementById("breadWonInner").innerHTML = "" + c;
            }
          };
          a.send();
        })();
      }
    };
    var f;
    var g = 0;
    function i() {
      d.ᐃⲆⲆ();
      if (++g != 30) {
        e.setTimeout(i, 33);
      } else {
        d.ᐃⲆⲆ();
      }
    }
    this.ᐃⲆᐃΔΔ = function (a) {
      if (d.ⵠⵠⵠⲆᐃⵠⲆ === rg) {
        d.ⵠⵠⵠⲆᐃⵠⲆ = uh;
        f = a;
        j = -1;
        k();
        Mx();
      }
    };
    var j = -1;
    function k() {
      d.ᐃⲆⲆ();
      if (++j == 30) {
        d.stop();
        d.ᐃΔⲆⵠᐃΔΔ.style.display = "none";
        f();
        return;
      }
      e.setTimeout(k, 33);
    }
    this.ⲆΔΔⲆⲆ = false;
    this.stop = function () {
      this.ⲆΔΔⲆⲆ = false;
    };
    this.ⵠᐃⲆᐃᐃ = function () {
      Ox();
      document.getElementById("game_body").style.backgroundColor = ts.ᐃΔⲆᐃⵠ[Bx.time];
      d.ᐃΔⲆⵠᐃΔΔ.ᐃⲆᐃⵠⵠ();
      zx.ⲆᐃⵠᐃΔ.style.display = "inline-block";
      d.ⲆΔΔⲆⲆ = true;
      d.ⵠⵠⵠⲆᐃⵠⲆ = rg;
      j = -1;
      g = 0;
      i();
    };
    this.ᐃⲆⲆ = function () {
      this.ᐃΔⲆⵠᐃΔΔ.translate.x = Math.floor(bq - 275);
      this.ᐃΔⲆⵠᐃΔΔ.translate.y = Math.floor(jo - this.ᐃΔⲆⵠᐃΔΔ.height - 28);
      zx.ⲆᐃⵠᐃΔ.translate.x = this.ᐃΔⲆⵠᐃΔΔ.translate.x - 350;
      zx.ⲆᐃⵠᐃΔ.translate.y = this.ᐃΔⲆⵠᐃΔΔ.translate.y + 0;
      zx.ⲆᐃⵠᐃΔ.ᐃⲆⲆ();
      if (g != 30 || j != -1) {
        var a = 0;
        if (g != 30) {
          a = 1500 / (g + 1) - 50;
        }
        if (j != -1) {
          a = -(1750 / (30 - j + 1) - 48);
        }
        this.ᐃΔⲆⵠᐃΔΔ.translate.y -= a;
      }
      this.ᐃΔⲆⵠᐃΔΔ.ᐃⲆⲆ();
    };
    this.ΔⵠᐃⲆ = function () {
      Tm();
      Dx.alert.ΔⵠᐃⲆ("#FFF", "#000");
    };
  }
  function bx(a, b, c, d) {
    hk(Xw, a, b, c, d);
    const f = rb(Ww[0], Ww[1], Ww[2], Ww[3]);
    Rk(Ww[0], Ww[1], Ww[2], Ww[3], Ww[0]);
    return ~(f & 27306) & 27306 | ~(f & 27306) & f;
  }
  function cx(b, c, d) {
    const f = b ^ 1003;
    const g = ((c + 31239) * 2147483629 + 2147483587) % 2147483647;
    const h = d ^ 59803;
    const a = Bb(f, g, h, f, g);
    const i = Bb(h, f, g, h, f);
    return (8 << ((a ^ i) >> 24 & 255)) + (16 << ((a ^ i) >> 16 & 255)) + (24 << ((a ^ i) & 255)) + (0 << ((a ^ i) >> 8 & 255));
  }
  function dx() {
    ΔⵠΔᐃ.ⲆⵠⲆⵠᐃΔⲆ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
  }
  function ex(a, b, c) {
    ji(Xw, a, b, c);
    const d = bx(Ww[0], Ww[1], Ww[2], Ww[0]);
    hs(Ww[1], Ww[2], Ww[0], Ww[1], Ww[2]);
    return ~(d & 27205) & d | ~(d & 27205) & 27205;
  }
  function fx(b, c, d, f, g) {
    const h = (24 << (b & 255)) + (0 << (b >> 16 & 255)) + (8 << (b >> 24 & 255)) + (16 << (b >> 8 & 255));
    const a = (0 << (f >> 24 & 255)) + (8 << (f & 255)) + (16 << (f >> 8 & 255)) + (24 << (f >> 16 & 255));
    const i = g ^ 31011;
    return ((46784 + (function (b, c, d) {
      const f = (b | 60264) & ~(b & 60264);
      const g = ((c + 23756) * 1664525 + 1013904223) % 4294967296;
      const h = (2147483587 + (d + 40027) * 2147483629) % 2147483647;
      const a = Sw(f, 0, h);
      const i = wb(g, h, f, g, h);
      return (24 << ((a ^ i) >> 8 & 255)) + (0 << ((a ^ i) >> 24 & 255)) + (8 << ((a ^ i) & 255)) + (16 << ((a ^ i) >> 16 & 255));
    }(h, ~(c & 27211) & (c | 27211), (d | 40474) & ~(d & 40474)) ^ cb(a, i, h))) * 1103515245 + 12345) % 2147483648;
  }
  jk = function () {
    Xw = oj(Ci(14));
    Ww = Ak(Xw);
    if (Yw) {
      Yw();
    }
  };
  (function () {
    function b() {
      this.ᐃⲆᐃⵠⵠ();
    }
    b.prototype = {
      ᐃⲆᐃⵠⵠ: function () {
        var a = this || f;
        a.ΔⲆᐃᐃⲆΔΔ = 1000;
        a.ᐃᐃⵠⵠⲆΔⵠ = {};
        a.ⲆΔΔⵠⵠ = [];
        a.ΔⲆⵠΔⲆ = false;
        a.ΔᐃΔᐃΔ = 1;
        a.ᐃᐃⲆᐃⲆΔⲆ = "canplaythrough";
        a.ⲆΔΔᐃⲆ = typeof e != "undefined" && e.navigator ? e.navigator : null;
        a.ΔⵠΔᐃⵠᐃΔ = null;
        a.ᐃⵠⲆⲆΔΔᐃ = false;
        a.ᐃᐃΔⲆⵠ = true;
        a.ΔⲆⵠΔⵠⲆⵠ = true;
        a.Ⲇ = null;
        a.ΔᐃᐃΔΔⵠΔ = true;
        a.ⲆΔⵠᐃᐃΔⲆ();
        return a;
      },
      volume: function (b) {
        var c = this || f;
        b = parseFloat(b);
        if (!c.Ⲇ) {
          i();
        }
        if (b !== undefined && b >= 0 && b <= 1) {
          c.ΔᐃΔᐃΔ = b;
          if (c.ΔⲆⵠΔⲆ) {
            return c;
          }
          if (c.ᐃᐃΔⲆⵠ) {
            c.ΔⵠΔᐃⵠᐃΔ.gain.value = b;
          }
          for (var d = 0; d < c.ⲆΔΔⵠⵠ.length; d++) {
            if (!c.ⲆΔΔⵠⵠ[d].ⵠᐃⲆⲆⲆ) {
              for (var g = c.ⲆΔΔⵠⵠ[d].ᐃΔⲆᐃⲆ(), h = 0; h < g.length; h++) {
                var j = c.ⲆΔΔⵠⵠ[d].ΔΔⵠⲆⵠ(g[h]);
                if (j && j.Δᐃᐃᐃ) {
                  j.Δᐃᐃᐃ.volume = j.ΔᐃΔᐃΔ * b;
                }
              }
            }
          }
          return c;
        }
        return c.ΔᐃΔᐃΔ;
      },
      ⲆΔᐃⵠⵠΔⵠ: function (b) {
        var c = this || f;
        if (!c.Ⲇ) {
          i();
        }
        c.ΔⲆⵠΔⲆ = b;
        if (c.ᐃᐃΔⲆⵠ) {
          c.ΔⵠΔᐃⵠᐃΔ.gain.value = b ? 0 : c.ΔᐃΔᐃΔ;
        }
        for (var d = 0; d < c.ⲆΔΔⵠⵠ.length; d++) {
          if (!c.ⲆΔΔⵠⵠ[d].ⵠᐃⲆⲆⲆ) {
            for (var g = c.ⲆΔΔⵠⵠ[d].ᐃΔⲆᐃⲆ(), h = 0; h < g.length; h++) {
              var j = c.ⲆΔΔⵠⵠ[d].ΔΔⵠⲆⵠ(g[h]);
              if (j && j.Δᐃᐃᐃ) {
                j.Δᐃᐃᐃ.muted = !!b || j.ΔⲆⵠΔⲆ;
              }
            }
          }
        }
        return c;
      },
      ᐃΔⲆᐃⵠⵠᐃ: function () {
        var a = this || f;
        for (var b = a.ⲆΔΔⵠⵠ.length - 1; b >= 0; b--) {
          a.ⲆΔΔⵠⵠ[b].ᐃΔⲆᐃⵠⵠᐃ();
        }
        if (a.ᐃᐃΔⲆⵠ && a.Ⲇ && a.Ⲇ.close !== undefined) {
          a.Ⲇ.close();
          a.Ⲇ = null;
          i();
        }
        return a;
      },
      ΔⲆᐃΔᐃᐃᐃⵠⵠ: function (a) {
        return (this || f).ᐃᐃⵠⵠⲆΔⵠ[a.replace(/^x-/, "")];
      },
      ⲆΔⵠᐃᐃΔⲆ: function () {
        var a = this || f;
        a.state = a.Ⲇ && a.Ⲇ.state || "running";
        a.ΔⵠⲆΔΔⲆΔ();
        if (!a.ᐃᐃΔⲆⵠ) {
          if (typeof Audio != "undefined") {
            try {
              if (new Audio().oncanplaythrough === undefined) {
                a.ᐃᐃⲆᐃⲆΔⲆ = "canplay";
              }
            } catch (b) {
              a.ᐃⵠⲆⲆΔΔᐃ = true;
            }
          } else {
            a.ᐃⵠⲆⲆΔΔᐃ = true;
          }
        }
        try {
          if (new Audio().muted) {
            a.ᐃⵠⲆⲆΔΔᐃ = true;
          }
        } catch (a) {}
        if (!a.ᐃⵠⲆⲆΔΔᐃ) {
          a.ΔΔⲆⲆⵠΔⵠᐃΔ();
        }
        return a;
      },
      ΔΔⲆⲆⵠΔⵠᐃΔ: function () {
        var b = this || f;
        var c = null;
        try {
          c = typeof Audio != "undefined" ? new Audio() : null;
        } catch (a) {
          return b;
        }
        if (!c || typeof c.canPlayType != "function") {
          return b;
        }
        var d = c.canPlayType("audio/mpeg;").replace(/^no$/, "");
        var g = b.ⲆΔΔᐃⲆ && b.ⲆΔΔᐃⲆ.userAgent.match(/OPR\/([0-6].)/g);
        var h = g && parseInt(g[0].split("/")[1], 10) < 33;
        b.ᐃᐃⵠⵠⲆΔⵠ = {
          ΔⵠⵠᐃΔΔΔᐃΔ: !h && (!!d || !!c.canPlayType("audio/mp3;").replace(/^no$/, "")),
          ⵠᐃΔΔΔΔΔⵠⲆ: !!d,
          ΔΔΔⲆᐃⲆⵠΔΔ: !!c.canPlayType("audio/ogg; codecs=\"opus\"").replace(/^no$/, ""),
          ΔⵠⵠΔⵠΔⲆᐃⵠ: !!c.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
          ΔᐃⲆⵠΔⵠⵠΔᐃ: !!c.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
          ⲆⵠⲆᐃⲆⵠⵠΔⵠ: !!c.canPlayType("audio/wav; codecs=\"1\"").replace(/^no$/, ""),
          ΔⲆⵠⲆΔⲆᐃᐃⲆ: !!c.canPlayType("audio/aac;").replace(/^no$/, ""),
          ΔⵠⲆⲆᐃⲆᐃⲆΔ: !!c.canPlayType("audio/x-caf;").replace(/^no$/, ""),
          ⲆⵠΔᐃⵠᐃⵠᐃⲆ: !!(c.canPlayType("audio/x-m4a;") || c.canPlayType("audio/m4a;") || c.canPlayType("audio/aac;")).replace(/^no$/, ""),
          ᐃⵠᐃΔᐃⵠΔᐃⲆ: !!(c.canPlayType("audio/x-mp4;") || c.canPlayType("audio/mp4;") || c.canPlayType("audio/aac;")).replace(/^no$/, ""),
          ᐃⵠᐃⲆⵠΔᐃΔᐃ: !!c.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
          ᐃⲆᐃᐃⵠΔⲆᐃᐃ: !!c.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
          ⵠᐃΔⲆΔⵠⲆⵠΔ: !!c.canPlayType("audio/mp4; codecs=\"ec-3\"").replace(/^no$/, ""),
          ⲆⵠⲆⲆⵠⵠⵠΔⲆ: !!(c.canPlayType("audio/x-flac;") || c.canPlayType("audio/flac;")).replace(/^no$/, "")
        };
        return b;
      },
      ⵠΔⵠᐃΔᐃΔᐃΔ: function () {
        var b = this || f;
        var a = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(b.ⲆΔΔᐃⲆ && b.ⲆΔΔᐃⲆ.userAgent);
        var c = !!("ontouchend" in e) || !!b.ⲆΔΔᐃⲆ && b.ⲆΔΔᐃⲆ.maxTouchPoints > 0 || !!b.ⲆΔΔᐃⲆ && b.ⲆΔΔᐃⲆ.ⲆⲆᐃᐃⵠᐃⵠΔⲆ > 0;
        if (!b.ᐃⲆΔΔⲆⲆⵠ && b.Ⲇ && (a || c)) {
          b.ᐃⲆΔΔⲆⲆⵠ = false;
          if (!b.ᐃΔᐃⲆⵠᐃΔⵠⵠ && b.Ⲇ.sampleRate !== 44100) {
            b.ᐃΔᐃⲆⵠᐃΔⵠⵠ = true;
            b.ᐃΔⲆᐃⵠⵠᐃ();
          }
          b.ⲆΔⲆΔΔΔⵠ = b.Ⲇ.createBuffer(1, 1, 22050);
          function c() {
            f.ᐃⵠᐃⵠⵠⵠⵠ();
            var a = b.Ⲇ.createBufferSource();
            a.buffer = b.ⲆΔⲆΔΔΔⵠ;
            a.connect(b.Ⲇ.destination);
            if (a.start === undefined) {
              a.ᐃΔⲆᐃΔⲆΔⲆΔ(0);
            } else {
              a.start(0);
            }
            if (typeof b.Ⲇ.resume == "function") {
              b.Ⲇ.resume();
            }
            a.onended = function () {
              a.disconnect(0);
              b.ᐃⲆΔΔⲆⲆⵠ = true;
              b.ΔᐃᐃΔΔⵠΔ = false;
              document.removeEventListener("touchend", c, true);
            };
          }
          document.addEventListener("touchend", c, true);
          return b;
        }
      },
      ΔⵠⲆΔΔⲆΔ: function () {
        var a = this;
        if (a.ΔⲆⵠΔⵠⲆⵠ && a.Ⲇ && a.Ⲇ.suspend !== undefined && f.ᐃᐃΔⲆⵠ) {
          for (var b = 0; b < a.ⲆΔΔⵠⵠ.length; b++) {
            if (a.ⲆΔΔⵠⵠ[b].ⵠᐃⲆⲆⲆ) {
              for (var c = 0; c < a.ⲆΔΔⵠⵠ[b].ᐃⵠⲆΔᐃ.length; c++) {
                if (!a.ⲆΔΔⵠⵠ[b].ᐃⵠⲆΔᐃ[c].ΔⲆⲆⵠᐃ) {
                  return a;
                }
              }
            }
          }
          if (a.ᐃⵠⵠΔⵠⵠΔ) {
            clearTimeout(a.ᐃⵠⵠΔⵠⵠΔ);
          }
          a.ᐃⵠⵠΔⵠⵠΔ = setTimeout(function () {
            if (a.ΔⲆⵠΔⵠⲆⵠ) {
              a.ᐃⵠⵠΔⵠⵠΔ = null;
              a.state = "suspending";
              a.Ⲇ.suspend().then(function () {
                a.state = "suspended";
                if (a.ᐃⲆΔᐃᐃᐃⵠ) {
                  delete a.ᐃⲆΔᐃᐃᐃⵠ;
                  a.ᐃⵠᐃⵠⵠⵠⵠ();
                }
              });
            }
          }, 30000);
          return a;
        }
      },
      ᐃⵠᐃⵠⵠⵠⵠ: function () {
        var a = this;
        if (a.Ⲇ && a.Ⲇ.resume !== undefined && f.ᐃᐃΔⲆⵠ) {
          if (a.state === "running" && a.ᐃⵠⵠΔⵠⵠΔ) {
            clearTimeout(a.ᐃⵠⵠΔⵠⵠΔ);
            a.ᐃⵠⵠΔⵠⵠΔ = null;
          } else if (a.state === "suspended") {
            a.Ⲇ.resume().then(function () {
              a.state = "running";
              for (var b = 0; b < a.ⲆΔΔⵠⵠ.length; b++) {
                a.ⲆΔΔⵠⵠ[b].ᐃⲆⲆⵠᐃ("resume");
              }
            });
            if (a.ᐃⵠⵠΔⵠⵠΔ) {
              clearTimeout(a.ᐃⵠⵠΔⵠⵠΔ);
              a.ᐃⵠⵠΔⵠⵠΔ = null;
            }
          } else if (a.state === "suspending") {
            a.ᐃⲆΔᐃᐃᐃⵠ = true;
          }
          return a;
        }
      }
    };
    var f = new b();
    function c(a) {
      if (a.src && a.src.length !== 0) {
        this.ᐃⲆᐃⵠⵠ(a);
      } else {
        console.error(ur);
      }
    }
    c.prototype = {
      ᐃⲆᐃⵠⵠ: function (a) {
        var b = this;
        if (!f.Ⲇ) {
          i();
        }
        b.ᐃⵠᐃⲆᐃΔⲆⲆᐃ = a.autoplay || false;
        b.ΔΔᐃΔΔⲆⲆ = typeof a.ⲆᐃᐃΔⲆΔⲆ != "string" ? a.ⲆᐃᐃΔⲆΔⲆ : [a.ⲆᐃᐃΔⲆΔⲆ];
        b.ᐃⵠΔⲆᐃⵠΔ = a.ΔᐃΔⵠᐃⵠⲆᐃⲆ || false;
        b.ΔⲆⵠΔⲆ = a.ⲆΔᐃⵠⵠΔⵠ || false;
        b.ᐃΔᐃⲆⵠ = a.loop || false;
        b.ⲆⲆΔᐃᐃΔⲆΔⲆ = a.ΔⵠᐃⲆΔᐃⲆⲆᐃ || 5;
        b.ᐃᐃⵠⲆᐃⲆᐃⲆⲆ = typeof a.preload != "boolean" || a.preload;
        b.ⵠⵠⲆⵠⵠ = a.rate || 1;
        b.ⵠⵠΔΔᐃ = a.ⲆⲆ || {};
        b.Ⲇᐃⵠⵠⵠ = typeof a.src != "string" ? a.src : [a.src];
        b.ΔᐃΔᐃΔ = a.volume !== undefined ? a.volume : 1;
        b.ΔΔᐃⵠᐃᐃⲆ = 0;
        b.ⲆΔⵠⵠᐃ = "unloaded";
        b.ᐃⵠⲆΔᐃ = [];
        b.ΔΔⲆΔᐃⵠⲆ = {};
        b.ᐃⵠΔⵠᐃ = [];
        b.ΔⵠⲆⵠᐃⵠⲆᐃΔ = a.onend ? [{
          ᐃΔΔⵠⲆ: a.onend
        }] : [];
        b.ΔΔⵠᐃⵠⲆᐃᐃⲆ = a.onfade ? [{
          ᐃΔΔⵠⲆ: a.onfade
        }] : [];
        b.ⵠⵠᐃⲆⲆⵠⲆⲆΔ = a.onload ? [{
          ᐃΔΔⵠⲆ: a.onload
        }] : [];
        b.ⲆⲆᐃᐃᐃᐃᐃⲆⲆ = a.ᐃⵠⲆᐃⲆΔΔⲆⲆ ? [{
          ᐃΔΔⵠⲆ: a.ᐃⵠⲆᐃⲆΔΔⲆⲆ
        }] : [];
        b.ⲆⵠᐃⵠᐃⵠΔΔⲆ = a.onpause ? [{
          ᐃΔΔⵠⲆ: a.onpause
        }] : [];
        b.ⵠⲆⲆⵠᐃᐃⵠⲆΔ = a.onplay ? [{
          ᐃΔΔⵠⲆ: a.onplay
        }] : [];
        b.ⲆⵠΔⵠᐃΔⲆΔⲆ = a.onstop ? [{
          ᐃΔΔⵠⲆ: a.onstop
        }] : [];
        b.ⵠᐃⲆΔⵠⲆᐃΔΔ = a.onmute ? [{
          ᐃΔΔⵠⲆ: a.onmute
        }] : [];
        b.ⵠᐃⵠⲆⵠΔⲆⵠⵠ = a.ⲆᐃᐃⵠⵠⲆⲆΔΔ ? [{
          ᐃΔΔⵠⲆ: a.ⲆᐃᐃⵠⵠⲆⲆΔΔ
        }] : [];
        b.ᐃⵠⵠΔⵠⲆⵠᐃⲆ = a.ⵠΔΔⲆΔⲆᐃⲆΔ ? [{
          ᐃΔΔⵠⲆ: a.ⵠΔΔⲆΔⲆᐃⲆΔ
        }] : [];
        b.ⵠᐃⲆΔᐃΔΔᐃΔ = a.ΔⲆᐃΔᐃⵠⲆⵠᐃ ? [{
          ᐃΔΔⵠⲆ: a.ΔⲆᐃΔᐃⵠⲆⵠᐃ
        }] : [];
        b.ⲆᐃⲆⵠᐃⵠⲆⲆⵠ = [];
        b.ⵠᐃⲆⲆⲆ = f.ᐃᐃΔⲆⵠ && !b.ᐃⵠΔⲆᐃⵠΔ;
        if (f.Ⲇ !== undefined && f.Ⲇ && f.ΔᐃᐃΔΔⵠΔ) {
          f.ⵠΔⵠᐃΔᐃΔᐃΔ();
        }
        f.ⲆΔΔⵠⵠ.push(b);
        if (b.ᐃⵠᐃⲆᐃΔⲆⲆᐃ) {
          b.ᐃⵠΔⵠᐃ.push({
            event: "play",
            action: function () {
              b.play();
            }
          });
        }
        if (b.ᐃᐃⵠⲆᐃⲆᐃⲆⲆ) {
          b.load();
        }
        return b;
      },
      load: function () {
        var b = this;
        var c = null;
        if (!f.ᐃⵠⲆⲆΔΔᐃ) {
          if (typeof b.Ⲇᐃⵠⵠⵠ == "string") {
            b.Ⲇᐃⵠⵠⵠ = [b.Ⲇᐃⵠⵠⵠ];
          }
          for (var g = 0; g < b.Ⲇᐃⵠⵠⵠ.length; g++) {
            var i;
            var j;
            if (b.ΔΔᐃΔΔⲆⲆ && b.ΔΔᐃΔΔⲆⲆ[g]) {
              i = b.ΔΔᐃΔΔⲆⲆ[g];
            } else {
              if (typeof (j = b.Ⲇᐃⵠⵠⵠ[g]) != "string") {
                b.ᐃⲆⲆⵠᐃ("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                continue;
              }
              if (!(i = /^data:audio\/([^;,]+);/i.exec(j))) {
                i = /\.([^.]+)$/.exec(j.split("?", 1)[0]);
              }
              i &&= i[1].toLowerCase();
            }
            if (!i) {
              console.warn("No file extension was found. Consider using the \"format\" property or specify an extension.");
            }
            if (i && f.ΔⲆᐃΔᐃᐃᐃⵠⵠ(i)) {
              c = b.Ⲇᐃⵠⵠⵠ[g];
              break;
            }
          }
          if (c) {
            b.Ⲇᐃⵠⵠⵠ = c;
            b.ⲆΔⵠⵠᐃ = "loading";
            if (e.location.protocol === "https:" && c.slice(0, 5) === "http:") {
              b.ᐃⵠΔⲆᐃⵠΔ = true;
              b.ⵠᐃⲆⲆⲆ = false;
            }
            new d(b);
            if (b.ⵠᐃⲆⲆⲆ) {
              a(b);
            }
            return b;
          } else {
            b.ᐃⲆⲆⵠᐃ("loaderror", null, "No codec support for selected audio sources.");
            return;
          }
        }
        b.ᐃⲆⲆⵠᐃ("loaderror", null, "No audio support.");
      },
      play: function (j, k) {
        var n = this;
        var o = null;
        if (typeof j == "number") {
          o = j;
          j = null;
        } else {
          if (typeof j == "string" && n.ⲆΔⵠⵠᐃ === "loaded" && !n.ⵠⵠΔΔᐃ[j]) {
            return null;
          }
          if (j === undefined) {
            j = "__default";
            var p = 0;
            for (var q = 0; q < n.ᐃⵠⲆΔᐃ.length; q++) {
              if (n.ᐃⵠⲆΔᐃ[q].ΔⲆⲆⵠᐃ && !n.ᐃⵠⲆΔᐃ[q].ᐃⲆᐃⵠᐃ) {
                p++;
                o = n.ᐃⵠⲆΔᐃ[q].ΔⲆΔⵠ;
              }
            }
            if (p === 1) {
              j = null;
            } else {
              o = null;
            }
          }
        }
        var t = o ? n.ΔΔⵠⲆⵠ(o) : n.ⲆⵠᐃⵠⲆⵠⵠΔⲆ();
        if (!t) {
          return null;
        }
        if (o && !j) {
          j = t.ⵠⵠΔΔᐃ || "__default";
        }
        if (n.ⲆΔⵠⵠᐃ !== "loaded") {
          t.ⵠⵠΔΔᐃ = j;
          t.ᐃⲆᐃⵠᐃ = false;
          var h = t.ΔⲆΔⵠ;
          n.ᐃⵠΔⵠᐃ.push({
            event: "play",
            action: function () {
              n.play(h);
            }
          });
          return h;
        }
        if (o && !t.ΔⲆⲆⵠᐃ) {
          if (!k) {
            setTimeout(function () {
              n.ᐃⲆⲆⵠᐃ("play", t.ΔⲆΔⵠ);
            }, 0);
          }
          return t.ΔⲆΔⵠ;
        }
        if (n.ⵠᐃⲆⲆⲆ) {
          f.ᐃⵠᐃⵠⵠⵠⵠ();
        }
        var l = Math.max(0, t.ⵠΔΔᐃᐃ > 0 ? t.ⵠΔΔᐃᐃ : n.ⵠⵠΔΔᐃ[j][0] / 1000);
        var g = Math.max(0, (n.ⵠⵠΔΔᐃ[j][0] + n.ⵠⵠΔΔᐃ[j][1]) / 1000 - l);
        var u = g * 1000 / Math.abs(t.ⵠⵠⲆⵠⵠ);
        t.ΔⲆⲆⵠᐃ = false;
        t.ᐃⲆᐃⵠᐃ = false;
        t.ⵠⵠΔΔᐃ = j;
        t.ⵠΔΔᐃᐃ = l;
        t.ΔⲆᐃⵠᐃ = n.ⵠⵠΔΔᐃ[j][0] / 1000;
        t.ΔⵠⵠᐃᐃᐃⲆ = (n.ⵠⵠΔΔᐃ[j][0] + n.ⵠⵠΔΔᐃ[j][1]) / 1000;
        t.ᐃΔᐃⲆⵠ = !!t.ᐃΔᐃⲆⵠ || !!n.ⵠⵠΔΔᐃ[j][2];
        var b = t.Δᐃᐃᐃ;
        if (n.ⵠᐃⲆⲆⲆ) {
          function a() {
            n.ⲆⲆΔΔⵠⵠⵠⵠⵠ(t);
            var a = t.ΔⲆⵠΔⲆ || n.ΔⲆⵠΔⲆ ? 0 : t.ΔᐃΔᐃΔ;
            b.gain.setValueAtTime(a, f.Ⲇ.currentTime);
            t.ᐃⲆΔᐃΔᐃᐃ = f.Ⲇ.currentTime;
            if (b.ⲆΔⵠᐃΔ.start === undefined) {
              if (t.ᐃΔᐃⲆⵠ) {
                b.ⲆΔⵠᐃΔ.ⵠᐃᐃΔⵠᐃᐃⲆᐃ(0, l, 86400);
              } else {
                b.ⲆΔⵠᐃΔ.ⵠᐃᐃΔⵠᐃᐃⲆᐃ(0, l, g);
              }
            } else if (t.ᐃΔᐃⲆⵠ) {
              b.ⲆΔⵠᐃΔ.start(0, l, 86400);
            } else {
              b.ⲆΔⵠᐃΔ.start(0, l, g);
            }
            if (u !== Infinity) {
              n.ΔΔⲆΔᐃⵠⲆ[t.ΔⲆΔⵠ] = setTimeout(n.ᐃⲆᐃⵠᐃ.bind(n, t), u);
            }
            if (!k) {
              setTimeout(function () {
                n.ᐃⲆⲆⵠᐃ("play", t.ΔⲆΔⵠ);
              }, 0);
            }
          }
          var d = f.state === "running";
          if (n.ⲆΔⵠⵠᐃ === "loaded" && d) {
            a();
          } else {
            var c = d || n.ⲆΔⵠⵠᐃ !== "loaded" ? "load" : "resume";
            n.once(c, a, d ? t.ΔⲆΔⵠ : null);
            n.ᐃΔⵠΔΔⵠᐃ(t.ΔⲆΔⵠ);
          }
        } else {
          function a() {
            b.currentTime = l;
            b.muted = t.ΔⲆⵠΔⲆ || n.ΔⲆⵠΔⲆ || f.ΔⲆⵠΔⲆ || b.muted;
            b.volume = t.ΔᐃΔᐃΔ * f.volume();
            b.playbackRate = t.ⵠⵠⲆⵠⵠ;
            b.play();
            if (u !== Infinity) {
              n.ΔΔⲆΔᐃⵠⲆ[t.ΔⲆΔⵠ] = setTimeout(n.ᐃⲆᐃⵠᐃ.bind(n, t), u);
            }
            if (!k) {
              n.ᐃⲆⲆⵠᐃ("play", t.ΔⲆΔⵠ);
            }
          }
          var m = n.ⲆΔⵠⵠᐃ === "loaded" && (e && e.ΔΔᐃⲆᐃΔΔΔⵠ || !b.readyState && f.ⲆΔΔᐃⲆ.ᐃⵠⵠⵠᐃᐃⵠᐃⵠ);
          if (b.readyState === 4 || m) {
            a();
          } else {
            function c() {
              a();
              b.removeEventListener(f.ᐃᐃⲆᐃⲆΔⲆ, c, false);
            }
            b.addEventListener(f.ᐃᐃⲆᐃⲆΔⲆ, c, false);
            n.ᐃΔⵠΔΔⵠᐃ(t.ΔⲆΔⵠ);
          }
        }
        return t.ΔⲆΔⵠ;
      },
      pause: function (a) {
        var b = this;
        if (b.ⲆΔⵠⵠᐃ !== "loaded") {
          b.ᐃⵠΔⵠᐃ.push({
            event: "pause",
            action: function () {
              b.pause(a);
            }
          });
          return b;
        }
        for (var c = b.ᐃΔⲆᐃⲆ(a), d = 0; d < c.length; d++) {
          b.ᐃΔⵠΔΔⵠᐃ(c[d]);
          var f = b.ΔΔⵠⲆⵠ(c[d]);
          if (f && !f.ΔⲆⲆⵠᐃ && (f.ⵠΔΔᐃᐃ = b.ⲆΔⲆΔΔⵠᐃ(c[d]), f.ⲆΔⵠⵠⲆᐃᐃ = 0, f.ΔⲆⲆⵠᐃ = true, b.ᐃⵠⲆⵠⵠⵠᐃ(c[d]), f.Δᐃᐃᐃ)) {
            if (b.ⵠᐃⲆⲆⲆ) {
              if (!f.Δᐃᐃᐃ.ⲆΔⵠᐃΔ) {
                continue;
              }
              if (f.Δᐃᐃᐃ.ⲆΔⵠᐃΔ.stop === undefined) {
                f.Δᐃᐃᐃ.ⲆΔⵠᐃΔ.ᐃⵠᐃⲆΔᐃⵠΔⲆ(0);
              } else {
                f.Δᐃᐃᐃ.ⲆΔⵠᐃΔ.stop(0);
              }
              b.ᐃΔⵠⵠⲆⲆΔ(f.Δᐃᐃᐃ);
            } else if (!isNaN(f.Δᐃᐃᐃ.duration) || f.Δᐃᐃᐃ.duration === Infinity) {
              f.Δᐃᐃᐃ.pause();
            }
          }
          if (!arguments[1]) {
            b.ᐃⲆⲆⵠᐃ("pause", f ? f.ΔⲆΔⵠ : null);
          }
        }
        return b;
      },
      stop: function (b, c) {
        var d = this;
        if (d.ⲆΔⵠⵠᐃ !== "loaded") {
          d.ᐃⵠΔⵠᐃ.push({
            event: "stop",
            action: function () {
              d.stop(b);
            }
          });
          return d;
        }
        for (var f = d.ᐃΔⲆᐃⲆ(b), g = 0; g < f.length; g++) {
          d.ᐃΔⵠΔΔⵠᐃ(f[g]);
          var h = d.ΔΔⵠⲆⵠ(f[g]);
          if (h) {
            h.ⵠΔΔᐃᐃ = h.ΔⲆᐃⵠᐃ || 0;
            h.ⲆΔⵠⵠⲆᐃᐃ = 0;
            h.ΔⲆⲆⵠᐃ = true;
            h.ᐃⲆᐃⵠᐃ = true;
            d.ᐃⵠⲆⵠⵠⵠᐃ(f[g]);
            if (h.Δᐃᐃᐃ) {
              if (d.ⵠᐃⲆⲆⲆ) {
                if (h.Δᐃᐃᐃ.ⲆΔⵠᐃΔ) {
                  if (h.Δᐃᐃᐃ.ⲆΔⵠᐃΔ.stop === undefined) {
                    h.Δᐃᐃᐃ.ⲆΔⵠᐃΔ.ᐃⵠᐃⲆΔᐃⵠΔⲆ(0);
                  } else {
                    h.Δᐃᐃᐃ.ⲆΔⵠᐃΔ.stop(0);
                  }
                  d.ᐃΔⵠⵠⲆⲆΔ(h.Δᐃᐃᐃ);
                }
              } else if (!isNaN(h.Δᐃᐃᐃ.duration) || h.Δᐃᐃᐃ.duration === Infinity) {
                h.Δᐃᐃᐃ.currentTime = h.ΔⲆᐃⵠᐃ || 0;
                h.Δᐃᐃᐃ.pause();
              }
            }
            if (!c) {
              d.ᐃⲆⲆⵠᐃ("stop", h.ΔⲆΔⵠ);
            }
          }
        }
        return d;
      },
      ⲆΔᐃⵠⵠΔⵠ: function (b, c) {
        var d = this;
        if (d.ⲆΔⵠⵠᐃ !== "loaded") {
          d.ᐃⵠΔⵠᐃ.push({
            event: "mute",
            action: function () {
              d.ⲆΔᐃⵠⵠΔⵠ(b, c);
            }
          });
          return d;
        }
        if (c === undefined) {
          if (typeof b != "boolean") {
            return d.ΔⲆⵠΔⲆ;
          }
          d.ΔⲆⵠΔⲆ = b;
        }
        for (var g = d.ᐃΔⲆᐃⲆ(c), h = 0; h < g.length; h++) {
          var i = d.ΔΔⵠⲆⵠ(g[h]);
          if (i) {
            i.ΔⲆⵠΔⲆ = b;
            if (d.ⵠᐃⲆⲆⲆ && i.Δᐃᐃᐃ) {
              i.Δᐃᐃᐃ.gain.setValueAtTime(b ? 0 : i.ΔᐃΔᐃΔ, f.Ⲇ.currentTime);
            } else if (i.Δᐃᐃᐃ) {
              i.Δᐃᐃᐃ.muted = !!f.ΔⲆⵠΔⲆ || b;
            }
            d.ᐃⲆⲆⵠᐃ("mute", i.ΔⲆΔⵠ);
          }
        }
        return d;
      },
      volume: function () {
        var b;
        var c;
        var d;
        var g = this;
        var h = arguments;
        if (h.length === 0) {
          return g.ΔᐃΔᐃΔ;
        }
        if (h.length === 1 || h.length === 2 && h[1] === undefined) {
          if (g.ᐃΔⲆᐃⲆ().indexOf(h[0]) >= 0) {
            c = parseInt(h[0], 10);
          } else {
            b = parseFloat(h[0]);
          }
        } else if (h.length >= 2) {
          b = parseFloat(h[0]);
          c = parseInt(h[1], 10);
        }
        if (b === undefined || b < 0 || b > 1) {
          if (d = c ? g.ΔΔⵠⲆⵠ(c) : g.ᐃⵠⲆΔᐃ[0]) {
            return d.ΔᐃΔᐃΔ;
          } else {
            return 0;
          }
        }
        if (g.ⲆΔⵠⵠᐃ !== "loaded") {
          g.ᐃⵠΔⵠᐃ.push({
            event: "volume",
            action: function () {
              g.volume.apply(g, h);
            }
          });
          return g;
        }
        if (c === undefined) {
          g.ΔᐃΔᐃΔ = b;
        }
        c = g.ᐃΔⲆᐃⲆ(c);
        for (var a = 0; a < c.length; a++) {
          if (d = g.ΔΔⵠⲆⵠ(c[a])) {
            d.ΔᐃΔᐃΔ = b;
            if (!h[2]) {
              g.ᐃⵠⲆⵠⵠⵠᐃ(c[a]);
            }
            if (g.ⵠᐃⲆⲆⲆ && d.Δᐃᐃᐃ && !d.ΔⲆⵠΔⲆ) {
              d.Δᐃᐃᐃ.gain.setValueAtTime(b, f.Ⲇ.currentTime);
            } else if (d.Δᐃᐃᐃ && !d.ΔⲆⵠΔⲆ) {
              d.Δᐃᐃᐃ.volume = b * f.volume();
            }
            g.ᐃⲆⲆⵠᐃ("volume", d.ΔⲆΔⵠ);
          }
        }
        return g;
      },
      fade: function (j, k, i, m) {
        var o = this;
        var a = Math.abs(j - k);
        var n = j > k ? "out" : "in";
        var p = a / 0.01;
        var q = p > 0 ? i / p : i;
        if (q < 4) {
          p = Math.ceil(p / (4 / q));
          q = 4;
        }
        if (o.ⲆΔⵠⵠᐃ !== "loaded") {
          o.ᐃⵠΔⵠᐃ.push({
            event: "fade",
            action: function () {
              o.fade(j, k, i, m);
            }
          });
          return o;
        }
        o.volume(j, m);
        for (var r = o.ᐃΔⲆᐃⲆ(m), g = 0; g < r.length; g++) {
          var s = o.ΔΔⵠⲆⵠ(r[g]);
          if (s) {
            if (!m) {
              o.ᐃⵠⲆⵠⵠⵠᐃ(r[g]);
            }
            if (o.ⵠᐃⲆⲆⲆ && !s.ΔⲆⵠΔⲆ) {
              var t = f.Ⲇ.currentTime;
              var w = t + i / 1000;
              s.ΔᐃΔᐃΔ = j;
              s.Δᐃᐃᐃ.gain.setValueAtTime(j, t);
              s.Δᐃᐃᐃ.gain.linearRampToValueAtTime(k, w);
            }
            var x = j;
            s.ⵠΔΔⵠᐃⲆΔ = setInterval(function (a, b) {
              if (p > 0) {
                x += n === "in" ? 0.01 : -0.01;
              }
              x = Math.max(0, x);
              x = Math.min(1, x);
              x = Math.round(x * 100) / 100;
              if (o.ⵠᐃⲆⲆⲆ) {
                if (m === undefined) {
                  o.ΔᐃΔᐃΔ = x;
                }
                b.ΔᐃΔᐃΔ = x;
              } else {
                o.volume(x, a, true);
              }
              if (k < j && x <= k || k > j && x >= k) {
                clearInterval(b.ⵠΔΔⵠᐃⲆΔ);
                b.ⵠΔΔⵠᐃⲆΔ = null;
                o.volume(k, a);
                o.ᐃⲆⲆⵠᐃ("fade", a);
              }
            }.bind(o, r[g], s), q);
          }
        }
        return o;
      },
      ᐃⵠⲆⵠⵠⵠᐃ: function (a) {
        var b = this;
        var c = b.ΔΔⵠⲆⵠ(a);
        if (c && c.ⵠΔΔⵠᐃⲆΔ) {
          if (b.ⵠᐃⲆⲆⲆ) {
            c.Δᐃᐃᐃ.gain.cancelScheduledValues(f.Ⲇ.currentTime);
          }
          clearInterval(c.ⵠΔΔⵠᐃⲆΔ);
          c.ⵠΔΔⵠᐃⲆΔ = null;
          b.ᐃⲆⲆⵠᐃ("fade", a);
        }
        return b;
      },
      loop: function () {
        var b;
        var c;
        var d;
        var f = this;
        var g = arguments;
        if (g.length === 0) {
          return f.ᐃΔᐃⲆⵠ;
        }
        if (g.length === 1) {
          if (typeof g[0] != "boolean") {
            return !!(d = f.ΔΔⵠⲆⵠ(parseInt(g[0], 10))) && d.ᐃΔᐃⲆⵠ;
          }
          b = g[0];
          f.ᐃΔᐃⲆⵠ = b;
        } else if (g.length === 2) {
          b = g[0];
          c = parseInt(g[1], 10);
        }
        for (var h = f.ᐃΔⲆᐃⲆ(c), a = 0; a < h.length; a++) {
          if (d = f.ΔΔⵠⲆⵠ(h[a])) {
            d.ᐃΔᐃⲆⵠ = b;
            if (f.ⵠᐃⲆⲆⲆ && d.Δᐃᐃᐃ && d.Δᐃᐃᐃ.ⲆΔⵠᐃΔ) {
              d.Δᐃᐃᐃ.ⲆΔⵠᐃΔ.loop = b;
              if (b) {
                d.Δᐃᐃᐃ.ⲆΔⵠᐃΔ.loopStart = d.ΔⲆᐃⵠᐃ || 0;
                d.Δᐃᐃᐃ.ⲆΔⵠᐃΔ.loopEnd = d.ΔⵠⵠᐃᐃᐃⲆ;
              }
            }
          }
        }
        return f;
      },
      rate: function () {
        var b;
        var c;
        var d;
        var g = this;
        var j = arguments;
        if (j.length === 0) {
          c = g.ᐃⵠⲆΔᐃ[0].ΔⲆΔⵠ;
        } else if (j.length === 1) {
          if (g.ᐃΔⲆᐃⲆ().indexOf(j[0]) >= 0) {
            c = parseInt(j[0], 10);
          } else {
            b = parseFloat(j[0]);
          }
        } else if (j.length === 2) {
          b = parseFloat(j[0]);
          c = parseInt(j[1], 10);
        }
        if (typeof b != "number") {
          if (d = g.ΔΔⵠⲆⵠ(c)) {
            return d.ⵠⵠⲆⵠⵠ;
          } else {
            return g.ⵠⵠⲆⵠⵠ;
          }
        }
        if (g.ⲆΔⵠⵠᐃ !== "loaded") {
          g.ᐃⵠΔⵠᐃ.push({
            event: "rate",
            action: function () {
              g.rate.apply(g, j);
            }
          });
          return g;
        }
        if (c === undefined) {
          g.ⵠⵠⲆⵠⵠ = b;
        }
        c = g.ᐃΔⲆᐃⲆ(c);
        for (var a = 0; a < c.length; a++) {
          if (d = g.ΔΔⵠⲆⵠ(c[a])) {
            d.ⲆΔⵠⵠⲆᐃᐃ = g.ⲆΔⲆΔΔⵠᐃ(c[a]);
            d.ᐃⲆΔᐃΔᐃᐃ = g.ⵠᐃⲆⲆⲆ ? f.Ⲇ.currentTime : d.ᐃⲆΔᐃΔᐃᐃ;
            d.ⵠⵠⲆⵠⵠ = b;
            if (g.ⵠᐃⲆⲆⲆ && d.Δᐃᐃᐃ && d.Δᐃᐃᐃ.ⲆΔⵠᐃΔ) {
              d.Δᐃᐃᐃ.ⲆΔⵠᐃΔ.playbackRate.value = b;
            } else if (d.Δᐃᐃᐃ) {
              d.Δᐃᐃᐃ.playbackRate = b;
            }
            var k = g.ⲆΔⲆΔΔⵠᐃ(c[a]);
            var l = ((g.ⵠⵠΔΔᐃ[d.ⵠⵠΔΔᐃ][0] + g.ⵠⵠΔΔᐃ[d.ⵠⵠΔΔᐃ][1]) / 1000 - k) * 1000 / Math.abs(d.ⵠⵠⲆⵠⵠ);
            if (!!g.ΔΔⲆΔᐃⵠⲆ[c[a]] || !d.ΔⲆⲆⵠᐃ) {
              g.ᐃΔⵠΔΔⵠᐃ(c[a]);
              g.ΔΔⲆΔᐃⵠⲆ[c[a]] = setTimeout(g.ᐃⲆᐃⵠᐃ.bind(g, d), l);
            }
            g.ᐃⲆⲆⵠᐃ("rate", d.ΔⲆΔⵠ);
          }
        }
        return g;
      },
      ⲆΔⲆΔΔⵠᐃ: function () {
        var b;
        var c;
        var d = this;
        var g = arguments;
        if (g.length === 0) {
          c = d.ᐃⵠⲆΔᐃ[0].ΔⲆΔⵠ;
        } else if (g.length === 1) {
          if (d.ᐃΔⲆᐃⲆ().indexOf(g[0]) >= 0) {
            c = parseInt(g[0], 10);
          } else {
            c = d.ᐃⵠⲆΔᐃ[0].ΔⲆΔⵠ;
            b = parseFloat(g[0]);
          }
        } else if (g.length === 2) {
          b = parseFloat(g[0]);
          c = parseInt(g[1], 10);
        }
        if (c === undefined) {
          return d;
        }
        if (d.ⲆΔⵠⵠᐃ !== "loaded") {
          d.ᐃⵠΔⵠᐃ.push({
            event: "seek",
            action: function () {
              d.ⲆΔⲆΔΔⵠᐃ.apply(d, g);
            }
          });
          return d;
        }
        var j = d.ΔΔⵠⲆⵠ(c);
        if (j) {
          if (typeof b != "number" || b < 0) {
            if (d.ⵠᐃⲆⲆⲆ) {
              var a = d.ⲆΔΔⲆⵠᐃΔ(c) ? f.Ⲇ.currentTime - j.ᐃⲆΔᐃΔᐃᐃ : 0;
              var k = j.ⲆΔⵠⵠⲆᐃᐃ ? j.ⲆΔⵠⵠⲆᐃᐃ - j.ⵠΔΔᐃᐃ : 0;
              return j.ⵠΔΔᐃᐃ + (k + a * Math.abs(j.ⵠⵠⲆⵠⵠ));
            }
            return j.Δᐃᐃᐃ.currentTime;
          }
          var l = d.ⲆΔΔⲆⵠᐃΔ(c);
          if (l) {
            d.pause(c, true);
          }
          j.ⵠΔΔᐃᐃ = b;
          j.ᐃⲆᐃⵠᐃ = false;
          d.ᐃΔⵠΔΔⵠᐃ(c);
          if (l) {
            d.play(c, true);
          }
          if (!d.ⵠᐃⲆⲆⲆ && j.Δᐃᐃᐃ) {
            j.Δᐃᐃᐃ.currentTime = b;
          }
          d.ᐃⲆⲆⵠᐃ("seek", c);
        }
        return d;
      },
      ⲆΔΔⲆⵠᐃΔ: function (a) {
        var b = this;
        if (typeof a == "number") {
          var c = b.ΔΔⵠⲆⵠ(a);
          return !!c && !c.ΔⲆⲆⵠᐃ;
        }
        for (var d = 0; d < b.ᐃⵠⲆΔᐃ.length; d++) {
          if (!b.ᐃⵠⲆΔᐃ[d].ΔⲆⲆⵠᐃ) {
            return true;
          }
        }
        return false;
      },
      duration: function (a) {
        var b = this;
        var c = b.ΔΔᐃⵠᐃᐃⲆ;
        var d = b.ΔΔⵠⲆⵠ(a);
        if (d) {
          c = b.ⵠⵠΔΔᐃ[d.ⵠⵠΔΔᐃ][1] / 1000;
        }
        return c;
      },
      state: function () {
        return this.ⲆΔⵠⵠᐃ;
      },
      ᐃΔⲆᐃⵠⵠᐃ: function () {
        var a = this;
        for (var b = a.ᐃⵠⲆΔᐃ, c = 0; c < b.length; c++) {
          if (!b[c].ΔⲆⲆⵠᐃ) {
            a.stop(b[c].ΔⲆΔⵠ);
          }
          if (!a.ⵠᐃⲆⲆⲆ) {
            if (!/MSIE |Trident\//.test(f.ⲆΔΔᐃⲆ && f.ⲆΔΔᐃⲆ.userAgent)) {
              b[c].Δᐃᐃᐃ.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA";
            }
            b[c].Δᐃᐃᐃ.removeEventListener("error", b[c].ⲆᐃᐃⲆΔᐃΔ, false);
            b[c].Δᐃᐃᐃ.removeEventListener(f.ᐃᐃⲆᐃⲆΔⲆ, b[c].ⲆΔΔΔᐃⵠΔ, false);
          }
          delete b[c].Δᐃᐃᐃ;
          a.ᐃΔⵠΔΔⵠᐃ(b[c].ΔⲆΔⵠ);
          var d = f.ⲆΔΔⵠⵠ.indexOf(a);
          if (d >= 0) {
            f.ⲆΔΔⵠⵠ.splice(d, 1);
          }
        }
        var g = true;
        for (c = 0; c < f.ⲆΔΔⵠⵠ.length; c++) {
          if (f.ⲆΔΔⵠⵠ[c].Ⲇᐃⵠⵠⵠ === a.Ⲇᐃⵠⵠⵠ) {
            g = false;
            break;
          }
        }
        if (j && g) {
          delete j[a.Ⲇᐃⵠⵠⵠ];
        }
        f.ᐃⵠⲆⲆΔΔᐃ = false;
        a.ⲆΔⵠⵠᐃ = "unloaded";
        a.ᐃⵠⲆΔᐃ = [];
        a = null;
        return null;
      },
      on: function (a, b, c, d) {
        var f = this["_on" + a];
        if (typeof b == "function") {
          f.push(d ? {
            id: c,
            ᐃΔΔⵠⲆ: b,
            once: d
          } : {
            id: c,
            ᐃΔΔⵠⲆ: b
          });
        }
        return this;
      },
      ΔⵠⲆΔᐃⵠⲆⲆᐃ: function (b, c, d) {
        var f = this;
        var g = f["_on" + b];
        var h = 0;
        if (typeof c == "number") {
          d = c;
          c = null;
        }
        if (c || d) {
          for (h = 0; h < g.length; h++) {
            var j = d === g[h].id;
            if (c === g[h].ᐃΔΔⵠⲆ && j || !c && j) {
              g.splice(h, 1);
              break;
            }
          }
        } else if (b) {
          f["_on" + b] = [];
        } else {
          var k = Object.keys(f);
          for (h = 0; h < k.length; h++) {
            if (k[h].indexOf("_on") === 0 && Array.isArray(f[k[h]])) {
              f[k[h]] = [];
            }
          }
        }
        return f;
      },
      once: function (a, b, c) {
        this.on(a, b, c, 1);
        return this;
      },
      ᐃⲆⲆⵠᐃ: function (b, c, d) {
        var f = this;
        var g = f["_on" + b];
        for (var h = g.length - 1; h >= 0; h--) {
          if (!g[h].id || g[h].id === c || b === "load") {
            setTimeout(function (a) {
              a.call(this, c, d);
            }.bind(f, g[h].ᐃΔΔⵠⲆ), 0);
            if (g[h].once) {
              f.ΔⵠⲆΔᐃⵠⲆⲆᐃ(b, g[h].ᐃΔΔⵠⲆ, g[h].id);
            }
          }
        }
        return f;
      },
      ΔⵠⵠΔⵠᐃⲆ: function () {
        var a = this;
        if (a.ᐃⵠΔⵠᐃ.length > 0) {
          var b = a.ᐃⵠΔⵠᐃ[0];
          a.once(b.event, function () {
            a.ᐃⵠΔⵠᐃ.shift();
            a.ΔⵠⵠΔⵠᐃⲆ();
          });
          b.action();
        }
        return a;
      },
      ᐃⲆᐃⵠᐃ: function (b) {
        var c = this;
        var d = b.ⵠⵠΔΔᐃ;
        if (!c.ⵠᐃⲆⲆⲆ && c.Δᐃᐃᐃ && !c.Δᐃᐃᐃ.ended) {
          setTimeout(c.ᐃⲆᐃⵠᐃ.bind(c, b), 100);
          return c;
        }
        var g = !!b.ᐃΔᐃⲆⵠ || !!c.ⵠⵠΔΔᐃ[d][2];
        c.ᐃⲆⲆⵠᐃ("end", b.ΔⲆΔⵠ);
        if (!c.ⵠᐃⲆⲆⲆ && g) {
          c.stop(b.ΔⲆΔⵠ, true).play(b.ΔⲆΔⵠ);
        }
        if (c.ⵠᐃⲆⲆⲆ && g) {
          c.ᐃⲆⲆⵠᐃ("play", b.ΔⲆΔⵠ);
          b.ⵠΔΔᐃᐃ = b.ΔⲆᐃⵠᐃ || 0;
          b.ⲆΔⵠⵠⲆᐃᐃ = 0;
          b.ᐃⲆΔᐃΔᐃᐃ = f.Ⲇ.currentTime;
          var h = (b.ΔⵠⵠᐃᐃᐃⲆ - b.ΔⲆᐃⵠᐃ) * 1000 / Math.abs(b.ⵠⵠⲆⵠⵠ);
          c.ΔΔⲆΔᐃⵠⲆ[b.ΔⲆΔⵠ] = setTimeout(c.ᐃⲆᐃⵠᐃ.bind(c, b), h);
        }
        if (c.ⵠᐃⲆⲆⲆ && !g) {
          b.ΔⲆⲆⵠᐃ = true;
          b.ᐃⲆᐃⵠᐃ = true;
          b.ⵠΔΔᐃᐃ = b.ΔⲆᐃⵠᐃ || 0;
          b.ⲆΔⵠⵠⲆᐃᐃ = 0;
          c.ᐃΔⵠΔΔⵠᐃ(b.ΔⲆΔⵠ);
          c.ᐃΔⵠⵠⲆⲆΔ(b.Δᐃᐃᐃ);
          f.ΔⵠⲆΔΔⲆΔ();
        }
        if (!c.ⵠᐃⲆⲆⲆ && !g) {
          c.stop(b.ΔⲆΔⵠ);
        }
        return c;
      },
      ᐃΔⵠΔΔⵠᐃ: function (a) {
        var b = this;
        if (b.ΔΔⲆΔᐃⵠⲆ[a]) {
          clearTimeout(b.ΔΔⲆΔᐃⵠⲆ[a]);
          delete b.ΔΔⲆΔᐃⵠⲆ[a];
        }
        return b;
      },
      ΔΔⵠⲆⵠ: function (a) {
        for (var b = this, c = 0; c < b.ᐃⵠⲆΔᐃ.length; c++) {
          if (a === b.ᐃⵠⲆΔᐃ[c].ΔⲆΔⵠ) {
            return b.ᐃⵠⲆΔᐃ[c];
          }
        }
        return null;
      },
      ⲆⵠᐃⵠⲆⵠⵠΔⲆ: function () {
        var a = this;
        a.ⵠⲆⵠΔΔⵠⲆⵠΔ();
        for (var b = 0; b < a.ᐃⵠⲆΔᐃ.length; b++) {
          if (a.ᐃⵠⲆΔᐃ[b].ᐃⲆᐃⵠᐃ) {
            return a.ᐃⵠⲆΔᐃ[b].reset();
          }
        }
        return new d(a);
      },
      ⵠⲆⵠΔΔⵠⲆⵠΔ: function () {
        var a = this;
        var b = a.ⲆⲆΔᐃᐃΔⲆΔⲆ;
        var c = 0;
        var d = 0;
        if (a.ᐃⵠⲆΔᐃ.length >= b) {
          for (d = 0; d < a.ᐃⵠⲆΔᐃ.length; d++) {
            if (a.ᐃⵠⲆΔᐃ[d].ᐃⲆᐃⵠᐃ) {
              c++;
            }
          }
          for (d = a.ᐃⵠⲆΔᐃ.length - 1; d >= 0; d--) {
            if (c <= b) {
              return;
            }
            if (a.ᐃⵠⲆΔᐃ[d].ᐃⲆᐃⵠᐃ) {
              if (a.ⵠᐃⲆⲆⲆ && a.ᐃⵠⲆΔᐃ[d].Δᐃᐃᐃ) {
                a.ᐃⵠⲆΔᐃ[d].Δᐃᐃᐃ.disconnect(0);
              }
              a.ᐃⵠⲆΔᐃ.splice(d, 1);
              c--;
            }
          }
        }
      },
      ᐃΔⲆᐃⲆ: function (a) {
        if (a === undefined) {
          var b = [];
          for (var c = 0; c < this.ᐃⵠⲆΔᐃ.length; c++) {
            b.push(this.ᐃⵠⲆΔᐃ[c].ΔⲆΔⵠ);
          }
          return b;
        }
        return [a];
      },
      ⲆⲆΔΔⵠⵠⵠⵠⵠ: function (a) {
        a.Δᐃᐃᐃ.ⲆΔⵠᐃΔ = f.Ⲇ.createBufferSource();
        a.Δᐃᐃᐃ.ⲆΔⵠᐃΔ.buffer = j[this.Ⲇᐃⵠⵠⵠ];
        if (a.ᐃᐃⵠⵠΔ) {
          a.Δᐃᐃᐃ.ⲆΔⵠᐃΔ.connect(a.ᐃᐃⵠⵠΔ);
        } else {
          a.Δᐃᐃᐃ.ⲆΔⵠᐃΔ.connect(a.Δᐃᐃᐃ);
        }
        a.Δᐃᐃᐃ.ⲆΔⵠᐃΔ.loop = a.ᐃΔᐃⲆⵠ;
        if (a.ᐃΔᐃⲆⵠ) {
          a.Δᐃᐃᐃ.ⲆΔⵠᐃΔ.loopStart = a.ΔⲆᐃⵠᐃ || 0;
          a.Δᐃᐃᐃ.ⲆΔⵠᐃΔ.loopEnd = a.ΔⵠⵠᐃᐃᐃⲆ;
        }
        a.Δᐃᐃᐃ.ⲆΔⵠᐃΔ.playbackRate.value = a.ⵠⵠⲆⵠⵠ;
        return this;
      },
      ᐃΔⵠⵠⲆⲆΔ: function (a) {
        var b = this;
        if (b.ⲆΔⲆΔΔΔⵠ) {
          a.ⲆΔⵠᐃΔ.onended = null;
          a.ⲆΔⵠᐃΔ.disconnect(0);
          try {
            a.ⲆΔⵠᐃΔ.buffer = b.ⲆΔⲆΔΔΔⵠ;
          } catch (a) {}
        }
        a.ⲆΔⵠᐃΔ = null;
        return b;
      }
    };
    function d(a) {
      this.ᐃᐃⲆⵠΔⵠⵠ = a;
      this.ᐃⲆᐃⵠⵠ();
    }
    d.prototype = {
      ᐃⲆᐃⵠⵠ: function () {
        var a = this;
        var b = a.ᐃᐃⲆⵠΔⵠⵠ;
        a.ΔⲆⵠΔⲆ = b.ΔⲆⵠΔⲆ;
        a.ᐃΔᐃⲆⵠ = b.ᐃΔᐃⲆⵠ;
        a.ΔᐃΔᐃΔ = b.ΔᐃΔᐃΔ;
        a.ⵠⵠⲆⵠⵠ = b.ⵠⵠⲆⵠⵠ;
        a.ⵠΔΔᐃᐃ = 0;
        a.ΔⲆⲆⵠᐃ = true;
        a.ᐃⲆᐃⵠᐃ = true;
        a.ⵠⵠΔΔᐃ = "__default";
        a.ΔⲆΔⵠ = ++f.ΔⲆᐃᐃⲆΔΔ;
        b.ᐃⵠⲆΔᐃ.push(a);
        a.create();
        return a;
      },
      create: function () {
        var a = this;
        var b = a.ᐃᐃⲆⵠΔⵠⵠ;
        var c = f.ΔⲆⵠΔⲆ || a.ΔⲆⵠΔⲆ || a.ᐃᐃⲆⵠΔⵠⵠ.ΔⲆⵠΔⲆ ? 0 : a.ΔᐃΔᐃΔ;
        if (b.ⵠᐃⲆⲆⲆ) {
          a.Δᐃᐃᐃ = f.Ⲇ.createGain === undefined ? f.Ⲇ.ⵠⲆⵠᐃⲆΔⲆᐃΔ() : f.Ⲇ.createGain();
          a.Δᐃᐃᐃ.gain.setValueAtTime(c, f.Ⲇ.currentTime);
          a.Δᐃᐃᐃ.paused = true;
          a.Δᐃᐃᐃ.connect(f.ΔⵠΔᐃⵠᐃΔ);
        } else {
          a.Δᐃᐃᐃ = new Audio();
          a.ⲆᐃᐃⲆΔᐃΔ = a.ΔⵠΔⲆⲆᐃⵠⵠᐃ.bind(a);
          a.Δᐃᐃᐃ.addEventListener("error", a.ⲆᐃᐃⲆΔᐃΔ, false);
          a.ⲆΔΔΔᐃⵠΔ = a.ΔᐃⲆᐃⲆᐃⲆⵠⵠ.bind(a);
          a.Δᐃᐃᐃ.addEventListener(f.ᐃᐃⲆᐃⲆΔⲆ, a.ⲆΔΔΔᐃⵠΔ, false);
          a.Δᐃᐃᐃ.src = b.Ⲇᐃⵠⵠⵠ;
          a.Δᐃᐃᐃ.preload = "auto";
          a.Δᐃᐃᐃ.volume = c * f.volume();
          a.Δᐃᐃᐃ.load();
        }
        return a;
      },
      reset: function () {
        var a = this;
        var b = a.ᐃᐃⲆⵠΔⵠⵠ;
        a.ΔⲆⵠΔⲆ = b.ΔⲆⵠΔⲆ;
        a.ᐃΔᐃⲆⵠ = b.ᐃΔᐃⲆⵠ;
        a.ΔᐃΔᐃΔ = b.ΔᐃΔᐃΔ;
        a.ⵠⵠⲆⵠⵠ = b.ⵠⵠⲆⵠⵠ;
        a.ⵠΔΔᐃᐃ = 0;
        a.ⲆΔⵠⵠⲆᐃᐃ = 0;
        a.ΔⲆⲆⵠᐃ = true;
        a.ᐃⲆᐃⵠᐃ = true;
        a.ⵠⵠΔΔᐃ = "__default";
        a.ΔⲆΔⵠ = ++f.ΔⲆᐃᐃⲆΔΔ;
        return a;
      },
      ΔⵠΔⲆⲆᐃⵠⵠᐃ: function () {
        var a = this;
        a.ᐃᐃⲆⵠΔⵠⵠ.ᐃⲆⲆⵠᐃ("loaderror", a.ΔⲆΔⵠ, a.Δᐃᐃᐃ.error ? a.Δᐃᐃᐃ.error.code : 0);
        a.Δᐃᐃᐃ.removeEventListener("error", a.ⲆᐃᐃⲆΔᐃΔ, false);
      },
      ΔᐃⲆᐃⲆᐃⲆⵠⵠ: function () {
        var a = this;
        var b = a.ᐃᐃⲆⵠΔⵠⵠ;
        b.ΔΔᐃⵠᐃᐃⲆ = Math.ceil(a.Δᐃᐃᐃ.duration * 10) / 10;
        if (Object.keys(b.ⵠⵠΔΔᐃ).length === 0) {
          b.ⵠⵠΔΔᐃ = {
            ⵠⵠⲆΔⵠⲆⲆⲆⲆ: [0, b.ΔΔᐃⵠᐃᐃⲆ * 1000]
          };
        }
        if (b.ⲆΔⵠⵠᐃ !== "loaded") {
          b.ⲆΔⵠⵠᐃ = "loaded";
          b.ᐃⲆⲆⵠᐃ("load");
          b.ΔⵠⵠΔⵠᐃⲆ();
        }
        a.Δᐃᐃᐃ.removeEventListener(f.ᐃᐃⲆᐃⲆΔⲆ, a.ⲆΔΔΔᐃⵠΔ, false);
      }
    };
    var j = {};
    function a(a) {
      var b = a.Ⲇᐃⵠⵠⵠ;
      if (j[b]) {
        a.ΔΔᐃⵠᐃᐃⲆ = j[b].duration;
        h(a);
        return;
      }
      if (/^data:[^;]+;base64,/.test(b)) {
        for (var c = atob(b.split(",")[1]), d = new Uint8Array(c.length), f = 0; f < c.length; ++f) {
          d[f] = c.charCodeAt(f);
        }
        m(d.buffer, a);
      } else {
        var g = new XMLHttpRequest();
        g.open("GET", b, true);
        g.responseType = "arraybuffer";
        g.onload = function () {
          var b = (g.status + "")[0];
          if (b === "0" || b === "2" || b === "3") {
            m(g.response, a);
          } else {
            a.ᐃⲆⲆⵠᐃ("loaderror", null, "Failed loading audio file with status: " + g.status + ".");
          }
        };
        g.onerror = function () {
          if (a.ⵠᐃⲆⲆⲆ) {
            a.ᐃⵠΔⲆᐃⵠΔ = true;
            a.ⵠᐃⲆⲆⲆ = false;
            a.ᐃⵠⲆΔᐃ = [];
            delete j[b];
            a.load();
          }
        };
        k(g);
      }
    }
    function k(a) {
      try {
        a.send();
      } catch (b) {
        a.onerror();
      }
    }
    function m(a, b) {
      f.Ⲇ.decodeAudioData(a, function (a) {
        if (a && b.ᐃⵠⲆΔᐃ.length > 0) {
          j[b.Ⲇᐃⵠⵠⵠ] = a;
          h(b, a);
        }
      }, function () {
        b.ᐃⲆⲆⵠᐃ("loaderror", null, "Decoding audio data failed.");
      });
    }
    function h(a, b) {
      if (b && !a.ΔΔᐃⵠᐃᐃⲆ) {
        a.ΔΔᐃⵠᐃᐃⲆ = b.duration;
      }
      if (Object.keys(a.ⵠⵠΔΔᐃ).length === 0) {
        a.ⵠⵠΔΔᐃ = {
          ⵠⵠⲆΔⵠⲆⲆⲆⲆ: [0, a.ΔΔᐃⵠᐃᐃⲆ * 1000]
        };
      }
      if (a.ⲆΔⵠⵠᐃ !== "loaded") {
        a.ⲆΔⵠⵠᐃ = "loaded";
        a.ᐃⲆⲆⵠᐃ("load");
        a.ΔⵠⵠΔⵠᐃⲆ();
      }
    }
    function i() {
      try {
        if (typeof AudioContext != "undefined") {
          f.Ⲇ = new AudioContext();
        } else if (typeof ΔⲆᐃᐃⵠᐃΔᐃᐃ != "undefined") {
          f.Ⲇ = new ΔⲆᐃᐃⵠᐃΔᐃᐃ();
        } else {
          f.ᐃᐃΔⲆⵠ = false;
        }
      } catch (a) {
        f.ᐃᐃΔⲆⵠ = false;
      }
      var a = /iP(hone|od|ad)/.test(f.ⲆΔΔᐃⲆ && f.ⲆΔΔᐃⲆ.platform);
      var b = f.ⲆΔΔᐃⲆ && f.ⲆΔΔᐃⲆ.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
      var c = b ? parseInt(b[1], 10) : null;
      if (a && c && c < 9) {
        var d = /safari/.test(f.ⲆΔΔᐃⲆ && f.ⲆΔΔᐃⲆ.userAgent.toLowerCase());
        if (f.ⲆΔΔᐃⲆ && f.ⲆΔΔᐃⲆ.ⵠΔⲆⲆⵠⵠⲆⲆⲆ && !d || f.ⲆΔΔᐃⲆ && !f.ⲆΔΔᐃⲆ.ⵠΔⲆⲆⵠⵠⲆⲆⲆ && !d) {
          f.ᐃᐃΔⲆⵠ = false;
        }
      }
      if (f.ᐃᐃΔⲆⵠ) {
        f.ΔⵠΔᐃⵠᐃΔ = f.Ⲇ.createGain === undefined ? f.Ⲇ.ⵠⲆⵠᐃⲆΔⲆᐃΔ() : f.Ⲇ.createGain();
        f.ΔⵠΔᐃⵠᐃΔ.gain.value = f.ΔⲆⵠΔⲆ ? 0 : 1;
        f.ΔⵠΔᐃⵠᐃΔ.connect(f.Ⲇ.destination);
      }
      f.ⲆΔⵠᐃᐃΔⲆ();
    }
    if (typeof ⵠⵠᐃⵠⲆᐃⵠ == "function" && ⵠⵠᐃⵠⲆᐃⵠ.ⲆⲆⲆⲆᐃᐃᐃ) {
      ⵠⵠᐃⵠⲆᐃⵠ([], function () {
        return {
          Howler: f,
          Howl: c
        };
      });
    }
    if (typeof ⵠΔⲆⵠⲆⵠⲆ != "undefined") {
      ⵠΔⲆⵠⲆⵠⲆ.Howler = f;
      ⵠΔⲆⵠⲆⵠⲆ.Howl = c;
    }
    if (typeof e != "undefined") {
      e.ΔᐃΔⵠⲆΔᐃ = b;
      e.Howler = f;
      e.Howl = c;
      e.ⲆⲆⵠⲆⲆᐃΔ = d;
    } else if (typeof ᐃⲆΔⵠⲆⵠⲆ != "undefined") {
      ᐃⲆΔⵠⲆⵠⲆ.ΔᐃΔⵠⲆΔᐃ = b;
      ᐃⲆΔⵠⲆⵠⲆ.Howler = f;
      ᐃⲆΔⵠⲆⵠⲆ.Howl = c;
      ᐃⲆΔⵠⲆⵠⲆ.ⲆⲆⵠⲆⲆᐃΔ = d;
    }
  })();
  (function () {
    ΔᐃΔⵠⲆΔᐃ.prototype.ⵠⲆᐃᐃΔ = [0, 0, 0];
    ΔᐃΔⵠⲆΔᐃ.prototype.ⲆΔΔⲆⵠ = [0, 0, -1, 0, 1, 0];
    ΔᐃΔⵠⲆΔᐃ.prototype.ΔΔⵠⵠⵠⵠΔ = function (a) {
      var b = this;
      if (!b.Ⲇ || !b.Ⲇ.listener) {
        return b;
      }
      for (var c = b.ⲆΔΔⵠⵠ.length - 1; c >= 0; c--) {
        b.ⲆΔΔⵠⵠ[c].ΔΔⵠⵠⵠⵠΔ(a);
      }
      return b;
    };
    ΔᐃΔⵠⲆΔᐃ.prototype.ᐃᐃⵠⵠ = function (a, b, c) {
      var d = this;
      if (d.Ⲇ && d.Ⲇ.listener) {
        b = typeof b != "number" ? d.ⵠⲆᐃᐃΔ[1] : b;
        c = typeof c != "number" ? d.ⵠⲆᐃᐃΔ[2] : c;
        if (typeof a != "number") {
          return d.ⵠⲆᐃᐃΔ;
        } else {
          d.ⵠⲆᐃᐃΔ = [a, b, c];
          d.Ⲇ.listener.setPosition(d.ⵠⲆᐃᐃΔ[0], d.ⵠⲆᐃᐃΔ[1], d.ⵠⲆᐃᐃΔ[2]);
          return d;
        }
      } else {
        return d;
      }
    };
    ΔᐃΔⵠⲆΔᐃ.prototype.orientation = function (b, c, d, f, g, h) {
      var j = this;
      if (!j.Ⲇ || !j.Ⲇ.listener) {
        return j;
      }
      var k = j.ⲆΔΔⲆⵠ;
      c = typeof c != "number" ? k[1] : c;
      d = typeof d != "number" ? k[2] : d;
      f = typeof f != "number" ? k[3] : f;
      g = typeof g != "number" ? k[4] : g;
      h = typeof h != "number" ? k[5] : h;
      if (typeof b != "number") {
        return k;
      } else {
        j.ⲆΔΔⲆⵠ = [b, c, d, f, g, h];
        j.Ⲇ.listener.setOrientation(b, c, d, f, g, h);
        return j;
      }
    };
    Howl.prototype.ᐃⲆᐃⵠⵠ = function (a) {
      return function (b) {
        var c = this;
        c.ⲆΔΔⲆⵠ = b.orientation || [1, 0, 0];
        c.ΔᐃⵠⲆⲆΔⲆ = b.ΔΔⵠⵠⵠⵠΔ || null;
        c.ⵠⲆᐃᐃΔ = b.ᐃᐃⵠⵠ || null;
        c.ᐃᐃΔᐃΔ = {
          coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : 360,
          coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : 360,
          coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : 0,
          distanceModel: b.distanceModel !== undefined ? b.distanceModel : "inverse",
          maxDistance: b.maxDistance !== undefined ? b.maxDistance : 10000,
          panningModel: b.panningModel !== undefined ? b.panningModel : "HRTF",
          refDistance: b.refDistance !== undefined ? b.refDistance : 1,
          rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : 1
        };
        c.ᐃⲆΔᐃΔᐃⵠⲆᐃ = b.ⲆⲆⵠΔⲆⵠⲆᐃΔ ? [{
          ᐃΔΔⵠⲆ: b.ⲆⲆⵠΔⲆⵠⲆᐃΔ
        }] : [];
        c.ΔᐃⲆΔΔⲆᐃᐃⲆ = b.ⲆⵠΔⲆⵠⲆᐃᐃΔ ? [{
          ᐃΔΔⵠⲆ: b.ⲆⵠΔⲆⵠⲆᐃᐃΔ
        }] : [];
        c.ⵠᐃΔⵠᐃⲆΔⲆⵠ = b.ⵠΔⲆⵠⲆⵠⲆⵠⵠ ? [{
          ᐃΔΔⵠⲆ: b.ⵠΔⲆⵠⲆⵠⲆⵠⵠ
        }] : [];
        return a.call(this, b);
      };
    }(Howl.prototype.ᐃⲆᐃⵠⵠ);
    Howl.prototype.ΔΔⵠⵠⵠⵠΔ = function (c, d) {
      var f = this;
      if (!f.ⵠᐃⲆⲆⲆ) {
        return f;
      }
      if (f.ⲆΔⵠⵠᐃ !== "loaded") {
        f.ᐃⵠΔⵠᐃ.push({
          event: "stereo",
          action: function () {
            f.ΔΔⵠⵠⵠⵠΔ(c, d);
          }
        });
        return f;
      }
      var g = Howler.Ⲇ.createStereoPanner === undefined ? "spatial" : "stereo";
      if (d === undefined) {
        if (typeof c != "number") {
          return f.ΔᐃⵠⲆⲆΔⲆ;
        }
        f.ΔᐃⵠⲆⲆΔⲆ = c;
        f.ⵠⲆᐃᐃΔ = [c, 0, 0];
      }
      for (var h = f.ᐃΔⲆᐃⲆ(d), a = 0; a < h.length; a++) {
        var i = f.ΔΔⵠⲆⵠ(h[a]);
        if (i) {
          if (typeof c != "number") {
            return i.ΔᐃⵠⲆⲆΔⲆ;
          }
          i.ΔᐃⵠⲆⲆΔⲆ = c;
          i.ⵠⲆᐃᐃΔ = [c, 0, 0];
          if (i.Δᐃᐃᐃ) {
            i.ᐃᐃΔᐃΔ.panningModel = "equalpower";
            if (!i.ᐃᐃⵠⵠΔ || !i.ᐃᐃⵠⵠΔ.pan) {
              b(i, g);
            }
            if (g === "spatial") {
              i.ᐃᐃⵠⵠΔ.setPosition(c, 0, 0);
            } else {
              i.ᐃᐃⵠⵠΔ.pan.value = c;
            }
          }
          f.ᐃⲆⲆⵠᐃ("stereo", i.ΔⲆΔⵠ);
        }
      }
      return f;
    };
    Howl.prototype.ᐃᐃⵠⵠ = function (c, d, f, g) {
      var i = this;
      if (!i.ⵠᐃⲆⲆⲆ) {
        return i;
      }
      if (i.ⲆΔⵠⵠᐃ !== "loaded") {
        i.ᐃⵠΔⵠᐃ.push({
          event: "pos",
          action: function () {
            i.ᐃᐃⵠⵠ(c, d, f, g);
          }
        });
        return i;
      }
      d = typeof d != "number" ? 0 : d;
      f = typeof f != "number" ? -0.5 : f;
      if (g === undefined) {
        if (typeof c != "number") {
          return i.ⵠⲆᐃᐃΔ;
        }
        i.ⵠⲆᐃᐃΔ = [c, d, f];
      }
      for (var a = i.ᐃΔⲆᐃⲆ(g), j = 0; j < a.length; j++) {
        var k = i.ΔΔⵠⲆⵠ(a[j]);
        if (k) {
          if (typeof c != "number") {
            return k.ⵠⲆᐃᐃΔ;
          }
          k.ⵠⲆᐃᐃΔ = [c, d, f];
          if (k.Δᐃᐃᐃ) {
            if (!k.ᐃᐃⵠⵠΔ || !!k.ᐃᐃⵠⵠΔ.pan) {
              b(k, "spatial");
            }
            k.ᐃᐃⵠⵠΔ.setPosition(c, d, f);
          }
          i.ᐃⲆⲆⵠᐃ("pos", k.ΔⲆΔⵠ);
        }
      }
      return i;
    };
    Howl.prototype.orientation = function (c, d, f, g) {
      var i = this;
      if (!i.ⵠᐃⲆⲆⲆ) {
        return i;
      }
      if (i.ⲆΔⵠⵠᐃ !== "loaded") {
        i.ᐃⵠΔⵠᐃ.push({
          event: "orientation",
          action: function () {
            i.orientation(c, d, f, g);
          }
        });
        return i;
      }
      d = typeof d != "number" ? i.ⲆΔΔⲆⵠ[1] : d;
      f = typeof f != "number" ? i.ⲆΔΔⲆⵠ[2] : f;
      if (g === undefined) {
        if (typeof c != "number") {
          return i.ⲆΔΔⲆⵠ;
        }
        i.ⲆΔΔⲆⵠ = [c, d, f];
      }
      for (var a = i.ᐃΔⲆᐃⲆ(g), j = 0; j < a.length; j++) {
        var k = i.ΔΔⵠⲆⵠ(a[j]);
        if (k) {
          if (typeof c != "number") {
            return k.ⲆΔΔⲆⵠ;
          }
          k.ⲆΔΔⲆⵠ = [c, d, f];
          if (k.Δᐃᐃᐃ) {
            if (!k.ᐃᐃⵠⵠΔ) {
              k.ⵠⲆᐃᐃΔ ||= i.ⵠⲆᐃᐃΔ || [0, 0, -0.5];
              b(k, "spatial");
            }
            k.ᐃᐃⵠⵠΔ.setOrientation(c, d, f);
          }
          i.ᐃⲆⲆⵠᐃ("orientation", k.ΔⲆΔⵠ);
        }
      }
      return i;
    };
    Howl.prototype.ΔᐃⵠΔΔᐃⲆⵠⲆ = function () {
      var c;
      var d;
      var f;
      var g = this;
      var j = arguments;
      if (!g.ⵠᐃⲆⲆⲆ) {
        return g;
      }
      if (j.length === 0) {
        return g.ᐃᐃΔᐃΔ;
      }
      if (j.length === 1) {
        if (typeof j[0] != "object") {
          if (f = g.ΔΔⵠⲆⵠ(parseInt(j[0], 10))) {
            return f.ᐃᐃΔᐃΔ;
          } else {
            return g.ᐃᐃΔᐃΔ;
          }
        }
        c = j[0];
        if (d === undefined) {
          g.ᐃᐃΔᐃΔ = {
            coneInnerAngle: c.coneInnerAngle !== undefined ? c.coneInnerAngle : g.ΔⲆⲆⲆⵠⲆⵠΔⲆ,
            coneOuterAngle: c.coneOuterAngle !== undefined ? c.coneOuterAngle : g.ᐃᐃΔⵠΔⵠⵠΔΔ,
            coneOuterGain: c.coneOuterGain !== undefined ? c.coneOuterGain : g.ᐃᐃⵠⲆΔⵠᐃⵠΔ,
            distanceModel: c.distanceModel !== undefined ? c.distanceModel : g.ⵠᐃΔΔⲆⲆΔⲆⲆ,
            maxDistance: c.maxDistance !== undefined ? c.maxDistance : g.ΔⲆᐃⵠⵠⲆⵠⵠΔ,
            panningModel: c.panningModel !== undefined ? c.panningModel : g.ⲆΔΔΔᐃⵠⲆⲆⲆ,
            refDistance: c.refDistance !== undefined ? c.refDistance : g.ΔⲆᐃᐃᐃⵠⲆᐃᐃ,
            rolloffFactor: c.rolloffFactor !== undefined ? c.rolloffFactor : g.ᐃᐃⵠᐃΔΔΔΔᐃ
          };
        }
      } else if (j.length === 2) {
        c = j[0];
        d = parseInt(j[1], 10);
      }
      for (var a = g.ᐃΔⲆᐃⲆ(d), k = 0; k < a.length; k++) {
        if (f = g.ΔΔⵠⲆⵠ(a[k])) {
          var m = f.ᐃᐃΔᐃΔ;
          m = {
            coneInnerAngle: c.coneInnerAngle !== undefined ? c.coneInnerAngle : m.coneInnerAngle,
            coneOuterAngle: c.coneOuterAngle !== undefined ? c.coneOuterAngle : m.coneOuterAngle,
            coneOuterGain: c.coneOuterGain !== undefined ? c.coneOuterGain : m.coneOuterGain,
            distanceModel: c.distanceModel !== undefined ? c.distanceModel : m.distanceModel,
            maxDistance: c.maxDistance !== undefined ? c.maxDistance : m.maxDistance,
            panningModel: c.panningModel !== undefined ? c.panningModel : m.panningModel,
            refDistance: c.refDistance !== undefined ? c.refDistance : m.refDistance,
            rolloffFactor: c.rolloffFactor !== undefined ? c.rolloffFactor : m.rolloffFactor
          };
          var o = f.ᐃᐃⵠⵠΔ;
          if (o) {
            o.coneInnerAngle = m.coneInnerAngle;
            o.coneOuterAngle = m.coneOuterAngle;
            o.coneOuterGain = m.coneOuterGain;
            o.distanceModel = m.distanceModel;
            o.maxDistance = m.maxDistance;
            o.panningModel = m.panningModel;
            o.refDistance = m.refDistance;
            o.rolloffFactor = m.rolloffFactor;
          } else {
            f.ⵠⲆᐃᐃΔ ||= g.ⵠⲆᐃᐃΔ || [0, 0, -0.5];
            b(f, "spatial");
          }
        }
      }
      return g;
    };
    ⲆⲆⵠⲆⲆᐃΔ.prototype.ᐃⲆᐃⵠⵠ = function (a) {
      return function () {
        var b = this;
        var c = b.ᐃᐃⲆⵠΔⵠⵠ;
        b.ⲆΔΔⲆⵠ = c.ⲆΔΔⲆⵠ;
        b.ΔᐃⵠⲆⲆΔⲆ = c.ΔᐃⵠⲆⲆΔⲆ;
        b.ⵠⲆᐃᐃΔ = c.ⵠⲆᐃᐃΔ;
        b.ᐃᐃΔᐃΔ = c.ᐃᐃΔᐃΔ;
        a.call(this);
        if (b.ΔᐃⵠⲆⲆΔⲆ) {
          c.ΔΔⵠⵠⵠⵠΔ(b.ΔᐃⵠⲆⲆΔⲆ);
        } else if (b.ⵠⲆᐃᐃΔ) {
          c.ᐃᐃⵠⵠ(b.ⵠⲆᐃᐃΔ[0], b.ⵠⲆᐃᐃΔ[1], b.ⵠⲆᐃᐃΔ[2], b.ΔⲆΔⵠ);
        }
      };
    }(ⲆⲆⵠⲆⲆᐃΔ.prototype.ᐃⲆᐃⵠⵠ);
    ⲆⲆⵠⲆⲆᐃΔ.prototype.reset = function (a) {
      return function () {
        var b = this;
        var c = b.ᐃᐃⲆⵠΔⵠⵠ;
        b.ⲆΔΔⲆⵠ = c.ⲆΔΔⲆⵠ;
        b.ⵠⲆᐃᐃΔ = c.ⵠⲆᐃᐃΔ;
        b.ᐃᐃΔᐃΔ = c.ᐃᐃΔᐃΔ;
        return a.call(this);
      };
    }(ⲆⲆⵠⲆⲆᐃΔ.prototype.reset);
    function b(a, b) {
      b = b || "spatial";
      if (b === "spatial") {
        a.ᐃᐃⵠⵠΔ = Howler.Ⲇ.createPanner();
        a.ᐃᐃⵠⵠΔ.coneInnerAngle = a.ᐃᐃΔᐃΔ.coneInnerAngle;
        a.ᐃᐃⵠⵠΔ.coneOuterAngle = a.ᐃᐃΔᐃΔ.coneOuterAngle;
        a.ᐃᐃⵠⵠΔ.coneOuterGain = a.ᐃᐃΔᐃΔ.coneOuterGain;
        a.ᐃᐃⵠⵠΔ.distanceModel = a.ᐃᐃΔᐃΔ.distanceModel;
        a.ᐃᐃⵠⵠΔ.maxDistance = a.ᐃᐃΔᐃΔ.maxDistance;
        a.ᐃᐃⵠⵠΔ.panningModel = a.ᐃᐃΔᐃΔ.panningModel;
        a.ᐃᐃⵠⵠΔ.refDistance = a.ᐃᐃΔᐃΔ.refDistance;
        a.ᐃᐃⵠⵠΔ.rolloffFactor = a.ᐃᐃΔᐃΔ.rolloffFactor;
        a.ᐃᐃⵠⵠΔ.setPosition(a.ⵠⲆᐃᐃΔ[0], a.ⵠⲆᐃᐃΔ[1], a.ⵠⲆᐃᐃΔ[2]);
        a.ᐃᐃⵠⵠΔ.setOrientation(a.ⲆΔΔⲆⵠ[0], a.ⲆΔΔⲆⵠ[1], a.ⲆΔΔⲆⵠ[2]);
      } else {
        a.ᐃᐃⵠⵠΔ = Howler.Ⲇ.createStereoPanner();
        a.ᐃᐃⵠⵠΔ.pan.value = a.ΔᐃⵠⲆⲆΔⲆ;
      }
      a.ᐃᐃⵠⵠΔ.connect(a.Δᐃᐃᐃ);
      if (!a.ΔⲆⲆⵠᐃ) {
        a.ᐃᐃⲆⵠΔⵠⵠ.pause(a.ΔⲆΔⵠ, true).play(a.ΔⲆΔⵠ);
      }
    }
  })();
  var gx = 1;
  var hx = 1;
  var ix = {
    ΔⲆⵠΔΔ: 3,
    ΔⲆᐃⵠΔⲆΔΔᐃ: 5000,
    ᐃⲆⵠᐃⲆⲆΔⵠⲆ: 5000,
    ⵠⲆΔΔᐃ: 1,
    ⵠⲆᐃⵠᐃᐃⵠⵠΔ: 12,
    ⵠⵠΔⵠⲆ: 2,
    ⵠᐃᐃΔΔᐃᐃ: 12,
    ⲆⵠⲆΔΔⲆⲆⵠⵠ: 5000,
    ᐃΔⵠⲆΔ: 8,
    ⵠⲆⲆ: 6,
    ᐃⵠⵠΔⵠΔᐃ: 3000,
    ΔⲆΔⲆⲆⲆΔ: 460000,
    ᐃⲆᐃᐃⲆⲆⲆⲆᐃ: 12
  };
  var jx = [];
  jx[-1] = 1;
  jx[28] = 1;
  jx[49] = 1;
  jx[nh.ⵠΔⲆΔⲆⵠΔⲆⲆ] = 2;
  jx[8] = 2;
  jx[1] = 2;
  jx[3] = 2;
  jx[4] = 2;
  jx[31] = 2;
  jx[32] = 2;
  jx[9] = 2;
  jx[57] = 2;
  jx[0] = 2;
  if (e.ⵠⲆᐃⵠᐃΔΔΔⲆ) {
    var kx = e.Math.acos;
    e.Math.acos = e.Math.asin;
    e.Math.asin = kx;
    var lx = e.Math.acos;
    e.Math.acos = e.Math.asin;
    e.Math.asin = lx;
  }
  function mx(a) {
    const b = e.setInterval;
    const c = b;
    const d = function () {
      b(d, 9688);
      c(d, 298);
    };
    d();
  }
  jx[63] = 2;
  jx[17] = 2;
  jx[5] = 2;
  jx[6] = 2;
  jx[30] = 2;
  jx[nh.ⲆΔΔᐃⲆΔᐃⵠΔ] = 2;
  jx[18] = 2;
  jx[12] = 2;
  jx[13] = 2;
  jx[14] = 2;
  jx[15] = 2;
  jx[16] = 2;
  jx[33] = 2;
  jx[nh.ᐃⵠΔΔⲆΔΔΔⲆ] = 2;
  jx[35] = 2;
  jx[36] = 2;
  jx[37] = 2;
  jx[38] = 2;
  jx[39] = 2;
  jx[45] = 2;
  jx[62] = 2;
  jx[54] = 2;
  const nx = 6538227;
  const ox = 6538227 .ⵠᐃᐃⵠᐃⵠⵠ;
  const px = `const ⵠΔⲆΔᐃᐃΔ = (typeof ΔⵠᐃⵠⵠᐃΔ === "${ox}") ? 1 : 0; return ⵠΔⲆΔᐃᐃΔ;`;
  jx[53] = 2;
  jx[46] = 3;
  jx[50] = 3;
  jx[51] = 3;
  jx[52] = 3;
  ᐃⲆⲆΔ = [];
  ᐃⲆⲆΔ[0] = 0;
  ᐃⲆⲆΔ[1] = 1;
  ᐃⲆⲆΔ[2] = 1;
  ᐃⲆⲆΔ[3] = 1;
  ᐃⲆⲆΔ[4] = 0;
  ᐃⲆⲆΔ[5] = 0;
  ᐃⲆⲆΔ[6] = 0;
  ᐃⲆⲆΔ[7] = 0;
  ᐃⲆⲆΔ[8] = 0;
  ᐃⲆⲆΔ[9] = 0;
  ᐃⲆⲆΔ[10] = 1;
  ᐃⲆⲆΔ[11] = 1;
  ᐃⲆⲆΔ[12] = 1;
  ᐃⲆⲆΔ[13] = 1;
  ᐃⲆⲆΔ[14] = 1;
  ᐃⲆⲆΔ[15] = 1;
  ᐃⲆⲆΔ[16] = 0;
  ᐃⲆⲆΔ[17] = 0;
  ᐃⲆⲆΔ[18] = 0;
  ᐃⲆⲆΔ[19] = 0;
  ᐃⲆⲆΔ[20] = 0;
  ᐃⲆⲆΔ[21] = 0;
  ᐃⲆⲆΔ[22] = 0;
  ᐃⲆⲆΔ[23] = 1;
  ᐃⲆⲆΔ[24] = 1;
  ᐃⲆⲆΔ[25] = 1;
  ᐃⲆⲆΔ[26] = 1;
  ᐃⲆⲆΔ[27] = 1;
  ᐃⲆⲆΔ[28] = 1;
  ᐃⲆⲆΔ[29] = 1;
  ᐃⲆⲆΔ[30] = 1;
  ᐃⲆⲆΔ[31] = 1;
  ᐃⲆⲆΔ[32] = 1;
  ᐃⲆⲆΔ[33] = 1;
  ᐃⲆⲆΔ[34] = 1;
  ᐃⲆⲆΔ[35] = 1;
  ᐃⲆⲆΔ[36] = 1;
  ᐃⲆⲆΔ[37] = 1;
  ᐃⲆⲆΔ[38] = 1;
  ᐃⲆⲆΔ[40] = 0;
  ᐃⲆⲆΔ[41] = 0;
  ᐃⲆⲆΔ[42] = 0;
  ᐃⲆⲆΔ[50] = 1;
  ᐃⲆⲆΔ[51] = 1;
  ᐃⲆⲆΔ[52] = 1;
  ᐃⲆⲆΔ[55] = 0;
  ᐃⲆⲆΔ[56] = 0;
  ᐃⲆⲆΔ[57] = 0;
  ᐃⲆⲆΔ[58] = 0;
  ⲆⵠΔⵠᐃ = [];
  ⲆⵠΔⵠᐃ[Sf.ⲆΔⵠⲆΔ] = 0;
  ⲆⵠΔⵠᐃ[1] = 0;
  ⲆⵠΔⵠᐃ[29] = 0;
  ⲆⵠΔⵠᐃ[6] = 0;
  ⲆⵠΔⵠᐃ[3] = -1;
  ⲆⵠΔⵠᐃ[31] = -1;
  ⲆⵠΔⵠᐃ[2] = 0;
  ⲆⵠΔⵠᐃ[4] = 0;
  ⲆⵠΔⵠᐃ[30] = 0;
  ⲆⵠΔⵠᐃ[33] = 0;
  ⲆⵠΔⵠᐃ[32] = 1;
  ⲆⵠΔⵠᐃ[35] = 1;
  ⲆⵠΔⵠᐃ[7] = 1;
  ⲆⵠΔⵠᐃ[8] = 1;
  ⲆⵠΔⵠᐃ[9] = 1;
  ⲆⵠΔⵠᐃ[19] = 1;
  ⲆⵠΔⵠᐃ[50] = 1;
  ⲆⵠΔⵠᐃ[5] = 0;
  ⲆⵠΔⵠᐃ[12] = 1;
  ⲆⵠΔⵠᐃ[13] = 1;
  ⲆⵠΔⵠᐃ[14] = 1;
  ⲆⵠΔⵠᐃ[20] = 1;
  ⲆⵠΔⵠᐃ[52] = 1;
  ⲆⵠΔⵠᐃ[10] = 0;
  ⲆⵠΔⵠᐃ[15] = 1;
  ⲆⵠΔⵠᐃ[16] = 1;
  ⲆⵠΔⵠᐃ[17] = 1;
  ⲆⵠΔⵠᐃ[21] = 1;
  ⲆⵠΔⵠᐃ[51] = 1;
  ⲆⵠΔⵠᐃ[45] = 0;
  ⲆⵠΔⵠᐃ[46] = 1;
  ⲆⵠΔⵠᐃ[47] = 1;
  ⲆⵠΔⵠᐃ[48] = 1;
  ⲆⵠΔⵠᐃ[49] = 1;
  ⲆⵠΔⵠᐃ[53] = 1;
  ⲆⵠΔⵠᐃ[18] = 1;
  ⲆⵠΔⵠᐃ[22] = 1;
  ⲆⵠΔⵠᐃ[23] = 1;
  ⲆⵠΔⵠᐃ[11] = 0;
  ⲆⵠΔⵠᐃ[34] = 1;
  var qx = {
    ΔⲆᐃΔΔᐃⵠ: {
      ΔⵠΔⲆᐃ: null,
      path: ["audio/ambience.mp3"],
      ⲆⲆ: {
        d1: [90391, 300, tg],
        d2: [90684, 300, cr],
        d0: [90086, 300, false]
      },
      sample: {
        d0: 8,
        d1: 8,
        d2: 8
      }
    },
    ᐃⲆⵠⵠᐃΔᐃ: {
      ΔⵠΔⲆᐃ: null,
      path: ["audio/ambience.mp3"],
      ⲆⲆ: {
        p0: [89303, 300, Ja],
        p1: [89549, 300, false],
        p2: [89815, 300, false]
      },
      sample: {
        p0: 8,
        p1: 8,
        p2: 8
      }
    },
    ᐃᐃᐃᐃⲆⲆⲆ: {
      ΔⵠΔⲆᐃ: null,
      path: ["audio/ambience.mp3"],
      ⲆⲆ: {
        w3: [89025, 300, false],
        w0: [88195, 300, x],
        w2: [88751, 300, Ml],
        w1: [88473, 300, false]
      },
      sample: {
        w0: 8,
        w1: 8,
        w2: 8,
        w3: 8
      }
    },
    ᐃᐃᐃᐃⲆᐃⲆ: {
      ΔⵠΔⲆᐃ: null,
      path: ["audio/ambience.mp3"],
      ⲆⲆ: {
        ΔⵠⲆⲆΔᐃᐃ: [66961, 21223, true],
        ᐃΔᐃΔⵠΔᐃ: [30562, 655, Ln],
        ⵠⲆΔᐃⲆⲆⲆ: [31658, 813, true],
        ⲆΔᐃⲆΔⵠⵠ: [19882, 8301, Ls],
        ᐃⲆⲆᐃᐃ: [91431, 400, Wj],
        ⲆⲆΔᐃⵠ: [28380, 1797, bs],
        ΔΔΔᐃΔⵠΔ: [32604, 21890, true],
        ⲆⵠⲆᐃⲆⲆΔ: [91022, 400, ol],
        ᐃⵠⲆᐃⲆⲆⲆ: [66014, 925, Ln],
        ᐃⲆΔᐃⲆΔᐃ: [54524, 11393, D],
        ᐃⵠΔⲆᐃⲆΔᐃⲆ: [100, 2800, D],
        ΔΔⲆᐃⲆᐃⵠ: [92249, 500, false],
        ⲆⲆᐃΔᐃⲆᐃ: [66961, 21223, true],
        ΔΔᐃⲆᐃ: [12356, 6965, true],
        ΔᐃΔⲆᐃⵠⲆ: [3100, 8800, true]
      },
      sample: {
        ᐃⵠΔⲆᐃⲆΔᐃⲆ: 1,
        ΔᐃΔⲆᐃⵠⲆ: 1,
        ⲆΔᐃⲆΔⵠⵠ: 1,
        ΔΔΔᐃΔⵠΔ: 1,
        ᐃⲆΔᐃⲆΔᐃ: 1,
        ⲆⲆᐃΔᐃⲆᐃ: 1,
        ΔⵠⲆⲆΔᐃᐃ: 1,
        ΔΔᐃⲆᐃ: 8,
        ⲆⲆΔᐃⵠ: 8,
        ᐃΔᐃΔⵠΔᐃ: 8,
        ⵠⲆΔᐃⲆⲆⲆ: 8,
        ᐃⵠⲆᐃⲆⲆⲆ: 8,
        ⲆⵠⲆᐃⲆⲆΔ: 6,
        ᐃⲆⲆᐃᐃ: 6,
        ΔΔⲆᐃⲆᐃⵠ: 6
      }
    }
  };
  function rx(b, c, d, f, i, j, a, k, m, h, l) {
    this.r = 1;
    this.ⵠᐃΔⵠΔ = b;
    this.ᐃᐃΔᐃᐃᐃᐃ = b;
    this.ⵠⲆⵠ = c;
    this.ⲆⲆⵠ = d;
    this.fade = f;
    this.ⲆᐃⵠᐃⲆΔⲆ = i;
    this.ⲆⲆⵠⲆᐃᐃⵠ = j;
    this.ΔΔᐃᐃ = a;
    this.ΔⲆΔⵠΔⲆⵠ = k;
    this.source = m;
    this.source.ᐃΔⲆΔᐃΔΔ = m.x + m.w;
    this.source.ⲆⲆⵠΔΔ = m.y + m.ᐃΔΔ;
    this.ᐃⲆⲆⲆᐃᐃΔⲆᐃ = h;
    this.ᐃⲆᐃᐃⵠⵠⵠ = l;
    this.ⲆⲆᐃⲆⲆΔΔ = 0;
    this.ⵠᐃΔⲆⵠΔⵠ = {
      d: 5,
      ⵠᐃΔᐃ: 5
    };
    this.ⲆΔⲆᐃΔ = function () {
      this.ⵠᐃΔⵠΔ -= Jx;
      if (this.ⵠᐃΔⵠΔ < 0) {
        this.ⵠᐃΔⵠΔ = this.ᐃᐃΔᐃᐃᐃᐃ;
        var a = qx.ᐃᐃᐃᐃⲆᐃⲆ.ΔⵠΔⲆᐃ.playing(this.ⵠⲆⵠ);
        var b = qx.ᐃᐃᐃᐃⲆᐃⲆ.ΔⵠΔⲆᐃ.playing(this.ⲆⲆⵠ);
        if (a && !b) {
          var c = this.ΔΔᐃᐃ.volume(this.ⵠⲆⵠ) * hx;
          var d = (Math.random() * this.ⲆⲆⵠⲆᐃᐃⵠ + this.ⲆᐃⵠᐃⲆΔⲆ) * hx;
          this.ΔΔᐃᐃ.fade(c, d, this.fade, this.ⵠⲆⵠ);
        } else if (!a && b) {
          c = this.ΔΔᐃᐃ.volume(this.ⲆⲆⵠ) * hx;
          d = (this.ⲆⲆⵠⲆᐃᐃⵠ * Math.random() + this.ⲆᐃⵠᐃⲆΔⲆ) * hx;
          this.ΔΔᐃᐃ.fade(c, d, this.fade, this.ⲆⲆⵠ);
        }
      }
    };
    this.transition = function () {
      this.ⵠᐃΔⵠΔ = this.ᐃᐃΔᐃᐃᐃᐃ;
      this.ⵠᐃΔⲆⵠΔⵠ.d = this.ⵠᐃΔⲆⵠΔⵠ.ⵠᐃΔᐃ;
      if (Cx.time) {
        this.ΔΔᐃᐃ.fade(0, hx * this.ⲆᐃⵠᐃⲆΔⲆ, this.ΔⲆΔⵠΔⲆⵠ, this.ⵠⲆⵠ);
        this.ΔΔᐃᐃ.play(this.ⵠⲆⵠ);
        if (this.ΔΔᐃᐃ.playing(this.ⲆⲆⵠ)) {
          var a = this.ΔΔᐃᐃ.volume(this.ⲆⲆⵠ) * hx;
          this.ΔΔᐃᐃ.fade(a, 0, this.ΔⲆΔⵠΔⲆⵠ, this.ⲆⲆⵠ);
        }
      } else {
        this.ΔΔᐃᐃ.fade(0, this.ⲆᐃⵠᐃⲆΔⲆ * hx, this.ΔⲆΔⵠΔⲆⵠ, this.ⲆⲆⵠ);
        this.ΔΔᐃᐃ.play(this.ⲆⲆⵠ);
        if (this.ΔΔᐃᐃ.playing(this.ⵠⲆⵠ)) {
          a = this.ΔΔᐃᐃ.volume(this.ⵠⲆⵠ) * hx;
          this.ΔΔᐃᐃ.fade(a, 0, this.ΔⲆΔⵠΔⲆⵠ, this.ⵠⲆⵠ);
        }
      }
    };
    this.check = function (a) {
      if (this.ⲆⲆᐃⲆⲆΔΔ) {
        if (ΔⵠΔᐃ.ᐃⲆᐃᐃⵠⵠⵠ(a, this.ᐃⲆⲆⲆᐃᐃΔⲆᐃ)) {
          if (!Gx.transition && Cx.ⲆⲆᐃⵠⲆ.now < 460000) {
            if (Cx.time) {
              if (!this.ΔΔᐃᐃ.playing(this.ⵠⲆⵠ)) {
                this.ⵠᐃΔⲆⵠΔⵠ.d -= Jx;
                if (this.ⵠᐃΔⲆⵠΔⵠ.d < 0) {
                  this.transition();
                }
              }
            } else if (!this.ΔΔᐃᐃ.playing(this.ⲆⲆⵠ)) {
              this.ⵠᐃΔⲆⵠΔⵠ.d -= Jx;
              if (this.ⵠᐃΔⲆⵠΔⵠ.d < 0) {
                this.transition();
              }
            }
          }
        } else {
          this.ⲆⲆᐃⲆⲆΔΔ = 0;
          if (this.ΔΔᐃᐃ.playing(this.ⵠⲆⵠ)) {
            var b = this.ΔΔᐃᐃ.volume(this.ⵠⲆⵠ) * hx;
            this.ΔΔᐃᐃ.fade(b, 0, this.ΔⲆΔⵠΔⲆⵠ, this.ⵠⲆⵠ);
          }
          if (this.ΔΔᐃᐃ.playing(this.ⲆⲆⵠ)) {
            b = this.ΔΔᐃᐃ.volume(this.ⲆⲆⵠ) * hx;
            this.ΔΔᐃᐃ.fade(b, 0, this.ΔⲆΔⵠΔⲆⵠ, this.ⲆⲆⵠ);
          }
        }
      } else if (ΔⵠΔᐃ.ᐃⲆᐃᐃⵠⵠⵠ(a, this.ᐃⲆᐃᐃⵠⵠⵠ)) {
        this.ⲆⲆᐃⲆⲆΔΔ = 1;
        if (!Gx.transition && Cx.ⲆⲆᐃⵠⲆ.now < 460000) {
          this.transition();
        }
      }
    };
    this.ᐃⲆⲆ = function (a, b) {
      var c;
      var d;
      c = this.source.x > a.x ? Gx.ⵠⵠⵠΔⲆⵠⲆ(this.source.x) : this.source.ᐃΔⲆΔᐃΔΔ < a.x ? Gx.ⵠⵠⵠΔⲆⵠⲆ(this.source.ᐃΔⲆΔᐃΔΔ) : b.x;
      d = a.y < this.source.y ? Gx.ⲆΔⵠΔⵠΔᐃ(this.source.y) : this.source.ⲆⲆⵠΔΔ < a.y ? Gx.ⲆΔⵠΔⵠΔᐃ(this.source.ⲆⲆⵠΔΔ) : b.y;
      this.ΔΔᐃᐃ.pos(c, d, -0.5, this.ⵠⲆⵠ);
      this.ΔΔᐃᐃ.pos(c, d, -0.5, this.ⲆⲆⵠ);
    };
  }
  function sx(a, b, c) {
    vi(Xw, a, b, c);
    return ((120 + (Eb(Ww[0], Ww[1], Ww[2], Ww[0]) ^ Mk(Ww[1], Ww[2], Ww[0]))) * 16807 + 0) % 2147483647;
  }
  function tx(b, c, d, f, i) {
    const j = b ^ 34383;
    const a = (1 + (12957 + c) * 22695477) % 4294967296;
    const k = d ^ 17387;
    const m = (24 << (f >> 24 & 255)) + (8 << (f >> 8 & 255)) + (16 << (f >> 16 & 255)) + (0 << (f & 255));
    const h = ((9175 + i) * 1664525 + 1013904223) % 4294967296;
    const l = function (b, c, d, f) {
      const g = (2531011 + (b + 12986) * 214013) % 4294967296;
      const h = c ^ 45901;
      const a = (8 << (d >> 8 & 255)) + (16 << (d & 255)) + (0 << (d >> 24 & 255)) + (24 << (d >> 16 & 255));
      const i = ((f + 44580) * 1664525 + 1013904223) % 4294967296;
      return (1 + (14153 + (ed(g, h, a, i, g, h) ^ fx(a, i, g, h, a))) * 22695477) % 4294967296;
    }(j, a, k, m);
    const g = cs(h, j, a, k, 0, h);
    return (16 << ((l ^ g) >> 24 & 255)) + (24 << ((l ^ g) >> 16 & 255)) + (0 << ((l ^ g) >> 8 & 255)) + (8 << ((l ^ g) & 255));
  }
  ΔⵠΔΔⲆ = {
    ᐃΔⲆΔΔᐃⲆΔᐃ: 0.2,
    ΔⲆᐃᐃᐃᐃΔ: 100,
    ᐃᐃⲆⲆⵠⲆⲆ: 1,
    ᐃᐃⵠⵠⲆⵠΔΔⵠ: 0.2,
    ⵠⲆΔⵠᐃᐃⵠ: 2,
    ⲆᐃΔΔⵠⲆᐃ: 3,
    ⵠΔⵠⲆⲆⵠⵠᐃⵠ: 0.2,
    ᐃⲆⲆⵠΔⵠᐃΔΔ: 0.4,
    ⲆⵠΔΔⲆⵠⵠ: 100,
    ΔᐃΔⵠⵠⵠΔ: 100,
    ᐃⲆⵠΔⵠᐃΔ: 0,
    ᐃⵠᐃⲆⲆ: 2,
    ΔᐃⲆΔⲆⵠⵠ: 300,
    ⲆᐃΔⵠᐃⲆᐃ: 4
  };
  function ux(a, b, c) {
    this.ΔⵠⵠⵠⵠⵠΔ = a;
    this.c = 0;
    this.ΔΔᐃᐃ = b;
    this.ᐃⲆⵠΔΔ = c;
    this.max = c.length;
    this.play = function () {
      this.c = (this.c + 1) % this.max;
      var a = this.ᐃⲆⵠΔΔ[this.c];
      this.ΔⵠⵠⵠⵠⵠΔ.ᐃⲆⵠΔΔⵠⵠ(this.ΔΔᐃᐃ, a);
      this.ΔΔᐃᐃ.play(a);
    };
  }
  function vx(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function wx(a) {
    return e.String.fromCharCode(a);
  }
  function xx(a) {
    this.ⵠΔⲆᐃⲆⲆΔ = 1;
    this.ᐃΔᐃΔ = 0;
    this.mode = -1;
    this.ⲆⲆΔᐃⵠ = Gx.sample.ⲆⲆΔᐃⵠ[a];
    this.ᐃΔᐃΔⵠΔᐃ = Gx.sample.ᐃΔᐃΔⵠΔᐃ[a];
    this.ⵠⲆΔᐃⲆⲆⲆ = Gx.sample.ⵠⲆΔᐃⲆⲆⲆ[a];
    this.ᐃⵠⲆᐃⲆⲆⲆ = Gx.sample.ᐃⵠⲆᐃⲆⲆⲆ[a];
    this.ⵠⵠⲆⵠⲆᐃᐃ = new ux(this, qx.ᐃⲆⵠⵠᐃΔᐃ.ΔⵠΔⲆᐃ, Gx.ⵠᐃᐃΔᐃ.ⵠⵠⲆⵠⲆᐃᐃ[a]);
    this.ⲆⵠΔⲆⵠ = new ux(this, qx.ᐃᐃᐃᐃⲆⲆⲆ.ΔⵠΔⲆᐃ, Gx.ⵠᐃᐃΔᐃ.ⲆⵠΔⲆⵠ[a]);
    this.ΔⲆΔᐃᐃ = new ux(this, qx.ΔⲆᐃΔΔᐃⵠ.ΔⵠΔⲆᐃ, Gx.ⵠᐃᐃΔᐃ.ΔⲆΔᐃᐃ[a]);
    this.ⵠⲆⵠᐃⵠ = a;
    this.x = 0;
    this.y = 0;
    this.ΔⵠᐃⲆᐃ = 0;
    this.ⵠᐃΔⵠΔ = ΔⵠΔΔⲆ.ⲆⲆⵠᐃⲆⵠⲆᐃᐃ;
    this.ᐃᐃⵠⵠ = {
      y: 0,
      x: 0
    };
    this.ⵠⲆΔᐃⵠ = qx.ᐃᐃᐃᐃⲆᐃⲆ.ΔⵠΔⲆᐃ;
    this.ⲆΔⵠⲆΔΔⲆⵠΔ = function (a) {
      if (a === 1) {
        this.ⵠⵠⲆⵠⲆᐃᐃ.play();
      } else if (a === 2) {
        this.ⲆⵠΔⲆⵠ.play();
      } else if (a === 3) {
        this.ΔⲆΔᐃᐃ.play();
      }
    };
    this.ⲆⵠⵠᐃΔⵠⵠ = function (a) {
      if (a.ᐃⵠΔᐃⲆᐃΔ > 0) {
        return ΔⵠΔΔⲆ.ᐃⵠᐃⲆⲆ;
      } else if (a.ⵠⲆⵠⲆΔⲆⵠ > 0) {
        return ΔⵠΔΔⲆ.ᐃᐃⲆⲆⵠⲆⲆ;
      } else if (a.ⵠⲆⲆⵠⲆ > 0 || a.ΔⵠⲆΔΔ > 0) {
        return ΔⵠΔΔⲆ.ⲆᐃΔΔⵠⲆᐃ;
      } else {
        return ΔⵠΔΔⲆ.ᐃⲆⵠΔⵠᐃΔ;
      }
    };
    this.ᐃⲆᐃⵠⵠ = function (a) {
      this.ⵠΔⲆᐃⲆⲆΔ = 0;
      this.ᐃΔᐃΔ = a;
      var b = Cx.ᐃⵠΔΔᐃ[a];
      b.ⵠⲆⵠᐃⵠ = this.ⵠⲆⵠᐃⵠ;
      this.mode = this.ⲆⵠⵠᐃΔⵠⵠ(b);
      this.ᐃᐃⵠⵠ.x = b.x;
      this.ᐃᐃⵠⵠ.y = b.y;
    };
    this.ⵠᐃⲆⲆⲆᐃⵠ = function () {
      this.ⵠΔⲆᐃⲆⲆΔ = 1;
      this.mode = -1;
      this.ⵠⲆΔᐃⵠ.stop(this.ⲆⲆΔᐃⵠ);
      this.ⵠⲆΔᐃⵠ.stop(this.ᐃΔᐃΔⵠΔᐃ);
      this.ⵠⲆΔᐃⵠ.stop(this.ⵠⲆΔᐃⲆⲆⲆ);
      this.ⵠⲆΔᐃⵠ.stop(this.ᐃⵠⲆᐃⲆⲆⲆ);
    };
    this.fade = function (a, b) {
      var c = this.ⵠⲆΔᐃⵠ.volume(a) * gx;
      this.ⵠⲆΔᐃⵠ.fade(c, 0, b, a);
    };
    this.ᐃⲆⵠΔΔⵠⵠ = function (a, b) {
      if (this.ΔⵠᐃⲆᐃ && this.ⵠⲆⵠᐃⵠ) {
        a.pos(this.x, this.y, -0.5, b);
      }
    };
    this.ⲆΔⲆᐃΔ = function (b, c, d, f, g, i, a) {
      this.ⵠᐃΔⵠΔ = i;
      if (f && this.mode === g) {
        var j = gx * this.ⵠⲆΔᐃⵠ.volume(b);
        if (this.ΔⵠᐃⲆᐃ) {
          var k = (d * Math.random() + c) * gx;
          this.ⵠⲆΔᐃⵠ.fade(j, k, a, b);
        } else {
          this.ⵠⲆΔᐃⵠ.fade(j, 0, a, b);
        }
      } else if (g != this.mode && this.ΔⵠᐃⲆᐃ) {
        this.ⵠⲆΔᐃⵠ.fade(0, gx * (c + d), a, b);
      } else if (this.ΔⵠᐃⲆᐃ) {
        j = gx * this.ⵠⲆΔᐃⵠ.volume(b);
        k = gx * (Math.random() * d + c);
        this.ⵠⲆΔᐃⵠ.fade(j, k, a, b);
      }
      this.ᐃⲆⵠΔΔⵠⵠ(this.ⵠⲆΔᐃⵠ, b);
      this.ⵠⲆΔᐃⵠ.play(b);
    };
    this.ᐃⲆⲆ = function () {
      var a = Cx.ᐃⵠΔΔᐃ[this.ᐃΔᐃΔ];
      this.ⵠᐃΔⵠΔ -= Jx;
      if (this.ⵠᐃΔⵠΔ <= 0) {
        var b = 0;
        if (a.x != this.ᐃᐃⵠⵠ.x || this.ᐃᐃⵠⵠ.y != a.y) {
          if (!this.ΔⵠᐃⲆᐃ) {
            b = 1;
            this.ΔⵠᐃⲆᐃ = 1;
          }
          this.x = Gx.ᐃΔⵠⵠⵠᐃⵠ(a.x, ΔⵠΔΔⲆ.ⵠⲆΔⵠᐃᐃⵠ);
          this.y = Gx.ⵠΔᐃⵠⲆⲆⲆ(a.y, ΔⵠΔΔⲆ.ⵠⲆΔⵠᐃᐃⵠ);
        } else if (this.ΔⵠᐃⲆᐃ) {
          b = 1;
          this.ΔⵠᐃⲆᐃ = 0;
        }
        this.ᐃᐃⵠⵠ.x = a.x;
        this.ᐃᐃⵠⵠ.y = a.y;
        ΔⲆᐃⵠ = this.ⲆⵠⵠᐃΔⵠⵠ(a);
        if (ΔⲆᐃⵠ != this.mode) {
          if (ΔⵠΔΔⲆ.ᐃᐃⲆⲆⵠⲆⲆ === this.mode) {
            this.fade(this.ⲆⲆΔᐃⵠ, ΔⵠΔΔⲆ.ΔᐃⲆΔⲆⵠⵠ);
          } else if (ΔⵠΔΔⲆ.ᐃⵠᐃⲆⲆ === this.mode) {
            this.fade(this.ᐃΔᐃΔⵠΔᐃ, ΔⵠΔΔⲆ.ⲆⵠΔΔⲆⵠⵠ);
          } else if (this.mode === ΔⵠΔΔⲆ.ᐃⲆⵠΔⵠᐃΔ) {
            this.fade(this.ⵠⲆΔᐃⲆⲆⲆ, ΔⵠΔΔⲆ.ΔᐃΔⵠⵠⵠΔ);
          } else if (ΔⵠΔΔⲆ.ⲆᐃΔΔⵠⲆᐃ === this.mode) {
            this.fade(this.ᐃⵠⲆᐃⲆⲆⲆ, ΔⵠΔΔⲆ.ΔⲆᐃᐃᐃᐃΔ);
          }
        }
        if (ΔⵠΔΔⲆ.ᐃᐃⲆⲆⵠⲆⲆ === ΔⲆᐃⵠ) {
          this.ⲆΔⲆᐃΔ(this.ⲆⲆΔᐃⵠ, 0.08, 0.3, b, ΔⲆᐃⵠ, ΔⵠΔΔⲆ.ᐃⲆⲆⵠΔⵠᐃΔΔ, ΔⵠΔΔⲆ.ΔᐃⲆΔⲆⵠⵠ);
        } else if (ΔⲆᐃⵠ === ΔⵠΔΔⲆ.ᐃⵠᐃⲆⲆ) {
          this.ⲆΔⲆᐃΔ(this.ᐃΔᐃΔⵠΔᐃ, 0.2, 0.3, b, ΔⲆᐃⵠ, ΔⵠΔΔⲆ.ᐃᐃⵠⵠⲆⵠΔΔⵠ, ΔⵠΔΔⲆ.ⲆⵠΔΔⲆⵠⵠ);
        } else if (ΔⵠΔΔⲆ.ᐃⲆⵠΔⵠᐃΔ === ΔⲆᐃⵠ) {
          this.ⲆΔⲆᐃΔ(this.ⵠⲆΔᐃⲆⲆⲆ, 0.3, 0.6, b, ΔⲆᐃⵠ, ΔⵠΔΔⲆ.ᐃΔⲆΔΔᐃⲆΔᐃ, ΔⵠΔΔⲆ.ΔᐃΔⵠⵠⵠΔ);
        } else if (ΔⲆᐃⵠ === ΔⵠΔΔⲆ.ⲆᐃΔΔⵠⲆᐃ) {
          this.ⲆΔⲆᐃΔ(this.ᐃⵠⲆᐃⲆⲆⲆ, 0.1, 0.25, b, ΔⲆᐃⵠ, ΔⵠΔΔⲆ.ⵠΔⵠⲆⲆⵠⵠᐃⵠ, ΔⵠΔΔⲆ.ΔⲆᐃᐃᐃᐃΔ);
        }
        this.mode = ΔⲆᐃⵠ;
      }
    };
    this.check = function () {
      var a = Cx.ᐃⵠΔΔᐃ[this.ᐃΔᐃΔ];
      if (a) {
        return lh;
      } else {
        this.ⵠᐃⲆⲆⲆᐃⵠ(a);
        return false;
      }
    };
  }
  function yx(b, c, d, f) {
    const g = (2147483587 + (b + 41883) * 2147483629) % 2147483647;
    const h = (2147483587 + (f + 54433) * 2147483629) % 2147483647;
    return ((40698 + (function (a, b, c) {
      const d = (1 + (17380 + a) * 22695477) % 4294967296;
      const f = ~(b & 2440) & 2440 | ~(b & 2440) & b;
      return (38259 + (cb(d, f, (c | 1134) & ~(c & 1134)) ^ Db(d))) % 65510;
    }(g, ~(c & 1878) & c | ~(c & 1878) & 1878, (1 + (d + 4201) * 22695477) % 4294967296) ^ Db(h))) * 1664525 + 1013904223) % 4294967296;
  }
  ΔⲆᐃⵠΔⲆⵠ = 0;
  document.getElementById("version").innerHTML = 52 + ".3";
  var zx;
  var Ax = [];
  var Bx = {
    time: Math.floor(Math.random() * 2),
    items: []
  };
  document.getElementById("game_body").style.backgroundColor = ts.ᐃΔⲆᐃⵠ[Bx.time];
  Bx.items.push(new Gf(1, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1));
  Bx.items.push(new Gf(100, 0, 0, 0, 0, 0, 0, 5));
  Bx.items.push(new Gf(2, 0, 0, 0, 0, Math.PI / 4, 0, 0));
  Bx.items.push(new Gf(100, 0, 0, 0, 0, 0, 0, 5));
  ⲆᐃⲆᐃ = new function () {
    var b = this;
    function a(a) {
      let b = a.name || a.a;
      if (a.auto) {
        return b;
      } else {
        return b + " [" + a.nu + " " + Gb[324] + "]";
      }
    }
    this.ᐃⲆᐃᐃ = null;
    this.ⲆⲆᐃᐃΔ = 0;
    this.ⵠⵠΔⲆΔ = [];
    this.ⲆⲆΔⲆⲆⲆⲆ = {};
    this.ⵠΔΔⵠᐃᐃΔ = {};
    this.ᐃᐃⵠΔᐃ = [[], [], [], [], [], [], [], [], []];
    this.ⵠⲆΔΔᐃΔⵠ = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
    this.ᐃⲆΔⲆⵠ = 0;
    this.ΔⲆᐃΔⵠⲆⲆ = 0;
    this.ᐃᐃⲆⵠⵠΔⵠ = function (c) {
      if (Tf !== undefined) {
        b.ⵠⵠΔⲆΔ.push({
          a: Tf.name,
          gm: Tf.mode,
          idx: 0,
          m: 100,
          nu: 0,
          id: 0
        });
        c();
        return;
      }
      fetch(wf + "/list", {
        method: "GET"
      }).then(function (a) {
        if (a.ok) {
          a.json().then(function (d) {
            b.ⵠⵠΔⲆΔ = [];
            b.ⵠΔΔⵠᐃᐃΔ = {};
            for (let a in Df.ΔⵠⵠⲆΔⵠΔ) {
              const c = Df.ΔⵠⵠⲆΔⵠΔ[a];
              b.ⵠⵠΔⲆΔ.push({
                a: "Auto Select",
                gm: c,
                m: 100,
                nu: 0,
                auto: yi
              });
            }
            var f = 0;
            var g = 2;
            var i = 3;
            for (let a = 0; d.length > a; a++) {
              const c = d[a];
              const j = c.n;
              const k = c.l;
              const h = c.p;
              const l = [];
              b.ⲆⲆΔⲆⲆⲆⲆ[j] = l;
              const m = [];
              for (let a = 0; h.length > a; a++) {
                const b = j + h[a][f];
                m.push(b);
                l.push(b);
              }
              for (let a = 0; k.length > a; a++) {
                const c = k[a];
                let d;
                let h = Df.ΔⵠⵠⲆΔⵠΔ[c[g]];
                let j = h + c[1];
                d = h in b.ⵠΔΔⵠᐃᐃΔ ? ++b.ⵠΔΔⵠᐃᐃΔ[h] : b.ⵠΔΔⵠᐃᐃΔ[h] = 1;
                if (j in b.ⵠΔΔⵠᐃᐃΔ) {
                  ᐃΔΔⵠⵠⵠΔ = ++b.ⵠΔΔⵠᐃᐃΔ[j];
                } else {
                  ᐃΔΔⵠⵠⵠΔ = b.ⵠΔΔⵠᐃᐃΔ[j] = 1;
                }
                b.ⵠⵠΔⲆΔ.push({
                  name: c[4],
                  a: Df.ΔᐃⲆⲆⵠΔΔⲆΔ[c[1]] + " " + ᐃΔΔⵠⵠⵠΔ,
                  r: c[1],
                  gm: Df.ΔⵠⵠⲆΔⵠΔ[c[g]],
                  idx: d,
                  m: 100,
                  nu: c[i],
                  id: c[1] + c[f],
                  p: m
                });
              }
            }
            const a = [];
            const j = [];
            const k = [];
            for (let c = 0; c < b.ⵠⵠΔⲆΔ.length; c++) {
              const d = b.ⵠⵠΔⲆΔ[c];
              if (!d.auto) {
                if (Df.ΔⵠⵠⲆΔⵠΔ[6] === d.gm) {
                  if (typeof d.name === "string" && (d.name.indexOf("Private Server") !== -1 || d.nu > 95)) {
                    j.push(d);
                  } else {
                    k.push(d);
                  }
                  a.push(c);
                }
              }
            }
            const h = [];
            h.push(...k.sort(function (a, b) {
              return b.nu - a.nu;
            }));
            h.push(...j.sort(function (a, b) {
              return (b.nu < 95 ? b.nu : 0) - (a.nu < 95 ? a.nu : 0);
            }));
            for (let c = 0; a.length > c; c++) {
              const d = a[c];
              const f = h[c];
              f.idx = c + 1;
              b.ⵠⵠΔⲆΔ[d] = f;
            }
            c();
          });
        } else {
          e.setTimeout(function () {
            b.ᐃᐃⲆⵠⵠΔⵠ(c);
          }, 3000);
        }
      });
    };
    this.ᐃⲆⲆⲆⵠⵠᐃᐃⵠ = function (a) {
      var b = [];
      for (var c = 0; a.length > c; c++) {
        if (a[c].a.indexOf($r) !== -1) {
          b.push(c);
        }
      }
      if (b.length === 0) {
        return 0;
      } else {
        return b[Math.floor(Math.random() * b.length)];
      }
    };
    this.ⵠᐃⵠⵠᐃΔⵠ = function (b) {
      var c = 0;
      for (var d = 0; d < b.length; d++) {
        c += b[d].nu;
      }
      var f = document.getElementById("servselect");
      if (ⲆᐃⲆᐃ.ⵠⲆΔΔᐃΔⵠ[ⲆᐃⲆᐃ.ᐃⲆΔⲆⵠ] === -1) {
        ⲆᐃⲆᐃ.ⵠⲆΔΔᐃΔⵠ[ⲆᐃⲆᐃ.ᐃⲆΔⲆⵠ] = f.selectedIndex = ⲆᐃⲆᐃ.ᐃⲆⲆⲆⵠⵠᐃᐃⵠ(b);
      } else {
        f.selectedIndex = ⲆᐃⲆᐃ.ⵠⲆΔΔᐃΔⵠ[ⲆᐃⲆᐃ.ᐃⲆΔⲆⵠ];
      }
      var g = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + b[f.selectedIndex].a + (b[f.selectedIndex].nu > 0 ? " [" + b[f.selectedIndex].nu + " " + Gb[324] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + Gb[323] + " (" + this.ᐃΔⲆⲆᐃⲆᐃ + ") " + Gb[325] + "</li>";
      for (d = 0; b.length > d; d++) {
        g += "<li role=\"option\">" + a(b[d]) + "</li>\n";
      }
      g += "<li role=\"option\" id=\"selectDisabled\">(" + c + ") " + Gb[326] + "</li>";
      g += "</div>";
      f.innerHTML = g;
      $(".md-select").on("click", function () {
        $(this).toggleClass("active");
      });
      $(".md-select ul li").on("click", function () {
        var b = $(this).text();
        var c = -1;
        for (var d = ⲆᐃⲆᐃ.ᐃᐃⵠΔᐃ[ⲆᐃⲆᐃ.ᐃⲆΔⲆⵠ], f = 0; d.length > f; f++) {
          if (b === a(d[f])) {
            c = f;
            break;
          }
        }
        if (c !== -1) {
          document.getElementById("servselect").selectedIndex = c;
          ⲆᐃⲆᐃ.ⵠⲆΔΔᐃΔⵠ[ⲆᐃⲆᐃ.ᐃⲆΔⲆⵠ] = c;
          $(".md-select ul li").removeClass("active");
          $(this).addClass("active");
          $(".md-select label button").text(b);
        }
      });
    };
    this.ᐃΔⲆⲆᐃⲆᐃ = 0;
    this.ᐃΔⵠⵠᐃΔⲆᐃΔ = function () {
      this.ᐃΔⲆⲆᐃⲆᐃ = 0;
      for (var a = 0; ⲆᐃⲆᐃ.ⵠⵠΔⲆΔ.length > a; a++) {
        if (this.ⵠⵠΔⲆΔ[a].gm == "experimental") {
          this.ᐃᐃⵠΔᐃ[7].push(this.ⵠⵠΔⲆΔ[a]);
        } else if (this.ⵠⵠΔⲆΔ[a].gm == "zombies") {
          this.ᐃᐃⵠΔᐃ[2].push(this.ⵠⵠΔⲆΔ[a]);
        } else if (this.ⵠⵠΔⲆΔ[a].gm == "community") {
          this.ᐃᐃⵠΔᐃ[6].push(this.ⵠⵠΔⲆΔ[a]);
        } else if (this.ⵠⵠΔⲆΔ[a].gm == "forest") {
          this.ᐃᐃⵠΔᐃ[4].push(this.ⵠⵠΔⲆΔ[a]);
        } else if (this.ⵠⵠΔⲆΔ[a].gm == "battle-royale") {
          this.ᐃᐃⵠΔᐃ[5].push(this.ⵠⵠΔⲆΔ[a]);
        } else if (this.ⵠⵠΔⲆΔ[a].gm == "vampires") {
          this.ᐃᐃⵠΔᐃ[3].push(this.ⵠⵠΔⲆΔ[a]);
        } else {
          this.ᐃᐃⵠΔᐃ[0].push(this.ⵠⵠΔⲆΔ[a]);
        }
        this.ᐃΔⲆⲆᐃⲆᐃ += this.ⵠⵠΔⲆΔ[a].nu;
      }
      for (a = 0; this.ᐃᐃⵠΔᐃ.length > a; a++) {
        if (this.ᐃᐃⵠΔᐃ[a].length === 0) {
          this.ᐃᐃⵠΔᐃ[a].push({
            a: Gb[327],
            ⲆⲆⲆᐃᐃⵠⵠⲆⲆ: 0,
            ⲆΔ: "127.0.0.1",
            ⲆⵠⲆ: 80
          });
        }
      }
      this.ⵠᐃⵠⵠᐃΔⵠ(this.ᐃᐃⵠΔᐃ[0]);
      this.ⲆⵠⵠΔⲆ = function (a) {
        ⲆᐃⲆᐃ.ᐃⲆΔⲆⵠ = a;
        ⲆᐃⲆᐃ.ⵠᐃⵠⵠᐃΔⵠ(ⲆᐃⲆᐃ.ᐃᐃⵠΔᐃ[ⲆᐃⲆᐃ.ᐃⲆΔⲆⵠ]);
        ⲆᐃⲆᐃ.ⵠᐃⵠⵠᐃΔⵠ(ⲆᐃⲆᐃ.ᐃᐃⵠΔᐃ[ⲆᐃⲆᐃ.ᐃⲆΔⲆⵠ]);
        document.getElementById("servselect").selectedIndex = ⲆᐃⲆᐃ.ᐃⲆΔⲆⵠ;
      };
    };
    this.ΔⲆⲆⵠΔᐃΔ = 0;
    this.ⲆⵠᐃᐃⵠⵠΔ = 0;
    this.Δⵠⵠᐃⵠ = null;
    this.timeout = function () {
      b.ⲆⵠᐃᐃⵠⵠΔ++;
      b.ᐃⲆᐃᐃ.close();
      if (b.ⲆⵠᐃᐃⵠⵠΔ > 3) {
        Nx = 1;
        zx.ΔⵠⵠⵠᐃᐃⲆᐃᐃ = Jf.ⲆⲆΔᐃⲆⲆᐃΔΔ;
        b.ᐃΔᐃⲆⲆ(Gb[300]);
        zx.waiting = ir;
        if (Dx.reconnect.enabled) {
          Fx.ᐃⲆᐃΔΔ(zx.ⵠᐃⲆᐃᐃ);
        }
      } else if (Dx.ΔᐃᐃΔⵠΔⵠ === Ra || Dx.ⵠᐃᐃⲆᐃΔⵠ === undefined || Dx.ⵠΔⵠᐃᐃⵠⲆ === undefined) {
        zx.ⲆⵠⲆⲆΔΔΔ(function () {
          b.ΔⲆⵠΔⵠⲆⲆ();
        }, 1);
      } else {
        b.ΔⲆⵠΔⵠⲆⲆ();
      }
    };
    this.ΔᐃⲆⵠⵠΔⲆ = function (a) {
      if (this.ᐃⲆᐃᐃ.ⲆⲆᐃᐃΔ == this.ⲆⲆᐃᐃΔ) {
        this.ⲆⲆᐃᐃΔ++;
        this.ᐃΔᐃⲆⲆ(Gb[301] + a);
        Fx.ᐃⲆᐃΔΔ(zx.ⵠᐃⲆᐃᐃ);
      }
    };
    this.ⲆΔᐃⵠⵠΔⵠ = function () {
      this.ᐃΔᐃⲆⲆ("You speak too much");
    };
    this.ⲆⲆΔΔⲆⵠᐃⵠΔ = function () {
      clearTimeout(this.Δⵠⵠᐃⵠ);
      this.ᐃΔᐃⲆⲆ(Gb[302]);
      zx.waiting = x;
    };
    this.ⲆΔⲆⲆⲆⵠΔⲆⵠ = function () {
      Dx.ⵠⵠⵠΔⵠ.open = false;
    };
    this.ⵠᐃᐃΔᐃᐃᐃⵠⲆ = function () {
      Fx.ΔΔΔⵠⲆⵠΔ = 0;
    };
    this.ⲆⵠⲆⵠⲆᐃᐃⲆΔ = function () {
      Fx.ᐃⲆⵠⵠᐃⲆΔ = 0;
    };
    this.ⵠⵠᐃΔⵠᐃΔⵠⵠ = function (a) {
      Dx.ΔΔⵠᐃⵠ.ⲆⲆᐃⲆΔ = a;
      if (Cx.ΔⲆⲆⵠⵠ > -300) {
        if (a === 0) {
          this.ᐃΔᐃⲆⲆ(Gb[340]);
        } else {
          this.ᐃΔᐃⲆⲆ(Gb[341]);
        }
      }
    };
    this.ΔΔᐃⵠⲆ = function (a) {
      Dx.ΔΔᐃⵠⲆ = a;
    };
    this.ᐃⵠᐃⵠΔᐃΔⵠΔ = function (a) {
      Dx.ΔⵠΔΔΔⵠⵠ = a;
    };
    this.ΔⵠΔΔΔⵠⵠ = function (a) {
      Dx.ⲆΔⵠⲆⲆ.ⲆⲆᐃⲆΔ = a;
      if (Cx.ⵠⲆⲆⵠⲆ > -300) {
        if (a === 0) {
          this.ᐃΔᐃⲆⲆ(Gb[342]);
        } else {
          this.ᐃΔᐃⲆⲆ(Gb[343]);
        }
      }
    };
    this.ΔᐃⲆᐃⵠᐃⲆⲆⵠ = function (a) {
      if (a === 0) {
        document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
      } else if (a === 1) {
        document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
      } else if (a === 2) {
        document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
      } else if (a === 3) {
        document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
      }
    };
    this.ⲆᐃⲆⲆᐃⵠⲆⵠⲆ = function () {
      Fx.ⲆⲆⲆΔⵠᐃᐃ = 0;
    };
    this.ᐃᐃⵠΔᐃΔⲆΔⲆ = function () {
      Fx.ᐃᐃᐃⵠΔᐃⲆ = 0;
    };
    this.ⵠᐃᐃⲆᐃΔΔᐃΔ = function () {
      Dx.ᐃᐃᐃΔ.ΔⲆⲆΔΔ = [];
      Dx.ᐃᐃᐃΔ.ⲆᐃΔᐃ = [];
      Dx.ᐃᐃᐃΔ.id = -1;
      Dx.ᐃᐃᐃΔ.ⲆΔⵠⵠⲆΔⵠ.stop();
      Dx.ⵠΔⵠⵠ.ⵠⵠΔⵠᐃ = [];
      Dx.ⵠΔⵠⵠ.ⵠⲆᐃᐃⲆ = ba;
      Dx.ⵠΔⵠⵠ.ⵠΔΔΔⲆᐃⵠⵠⵠ = false;
      Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ = -1;
      Dx.ⵠΔⵠⵠ.id = -1;
      Dx.ⵠΔⵠⵠ.ⲆᐃΔᐃΔ = false;
      Dx.ⵠΔⵠⵠ.ΔΔᐃᐃⲆ = false;
      Dx.ⵠΔⵠⵠ.ΔΔᐃⲆᐃ = Rg;
      Dx.ⵠΔⵠⵠ.ᐃᐃᐃⲆⵠᐃⲆ = false;
      Dx.ⵠΔⵠⵠ.timeout = new ΔⵠΔᐃ.ⵠΔΔΔ(tg, 0, 1, 0, 1, 1);
    };
    this.ΔᐃᐃⲆΔⵠⵠᐃⲆ = function () {
      clearTimeout(this.Δⵠⵠᐃⵠ);
      this.ᐃΔᐃⲆⲆ();
      zx.waiting = ba;
    };
    this.ᐃⵠΔᐃΔⵠΔ = function (a) {
      for (var b = 0; a.length > b; b++) {
        if (typeof a[b] === "string") {
          a[b] = ΔⵠΔᐃ.ⲆΔⵠΔⲆᐃᐃ(a[b]);
        }
      }
      Dx.ΔΔⵠᐃᐃ.ⲆᐃⲆⲆᐃ(a[1], a[2], a[3], a[4]);
    };
    this.message = function (a) {
      this.ᐃΔᐃⲆⲆ(a);
    };
    this.ⵠⲆᐃᐃⵠⲆⲆᐃⵠ = function () {
      clearTimeout(this.Δⵠⵠᐃⵠ);
      this.ᐃΔᐃⲆⲆ(Gb[339]);
      zx.waiting = false;
    };
    this.ΔⲆⲆⵠⲆⲆᐃΔⵠ = function () {
      clearTimeout(this.Δⵠⵠᐃⵠ);
      this.ᐃΔᐃⲆⲆ(Gb[338]);
      zx.waiting = Po;
    };
    this.ᐃⲆⵠⵠⵠΔΔᐃΔ = function () {
      clearTimeout(this.Δⵠⵠᐃⵠ);
      this.ᐃΔᐃⲆⲆ(Gb[304]);
      zx.waiting = false;
    };
    this.ΔⲆⲆᐃΔᐃⵠⵠΔ = function () {
      Dx.ᐃᐃᐃΔ.ⲆᐃⲆᐃᐃⲆΔ(1, 0);
      Fx.ΔⲆΔᐃⲆΔΔ();
    };
    this.ᐃⵠⵠⲆⵠᐃΔⲆⲆ = function (a) {
      var b = a[1];
      var c = Cx.ΔΔΔᐃ[b];
      c.ⵠΔᐃⵠ = a[2];
      c.ΔⵠΔΔⵠ = a[3];
      c.ⵠᐃᐃΔΔΔⵠ = a[4];
      c.ΔⵠᐃᐃΔ = a[5];
      c.ΔⲆᐃΔΔ = a[6];
      c.ᐃⵠΔΔⲆ = a[7];
      c.level = a[8];
      var d = Cx.ᐃⵠΔΔᐃ[b * Cx.ᐃᐃΔᐃΔⲆΔ];
      if (d) {
        d.ⵠΔᐃⵠ = a[2];
        d.ΔⵠΔΔⵠ = a[3];
        d.ⵠᐃᐃΔΔΔⵠ = a[4];
        d.ΔⵠᐃᐃΔ = a[5];
      }
    };
    this.ᐃⵠᐃΔᐃⲆⵠΔᐃ = function (a) {
      if (a === 29) {
        Dx.ᐃᐃᐃΔ.ⲆᐃⲆᐃᐃⲆΔ(1, 0);
        Fx.ΔⲆΔᐃⲆΔΔ();
      } else {
        this.ᐃⵠⵠⵠⲆᐃᐃ([0, a, 1]);
      }
      Dx.ⵠΔⵠⵠ.ΔⵠⲆⵠⲆⵠⵠ();
    };
    this.ⲆⵠΔᐃⵠᐃⲆᐃᐃ = function (a) {
      Dx.ⵠⲆΔⲆⲆ.ⵠᐃΔⵠΔ = 0;
      Dx.ⵠΔⵠⵠ.ΔⵠⲆⲆⵠⵠΔⲆⵠ(a);
    };
    this.ⲆᐃΔⵠⵠᐃᐃⵠⵠ = function (a) {
      for (var b = nb[a].r, c = 0; b.length > c; c++) {
        if (Dx.ᐃᐃᐃΔ.max > Dx.ᐃᐃᐃΔ.ΔⲆⲆΔΔ.length || Dx.ᐃᐃᐃΔ.ⲆᐃΔᐃ[b[c][0]] > 0) {
          var d = Math.floor(b[c][1] * 0.8);
          if (!d) {
            continue;
          }
          this.ᐃⵠⵠⵠⲆᐃᐃ([0, b[c][0], d]);
        }
      }
      Dx.ⵠΔⵠⵠ.ΔⵠⲆⵠⲆⵠⵠ();
    };
    this.ⲆΔⵠΔᐃᐃΔΔᐃ = function (a) {
      Dx.ⵠⲆΔⲆⲆ.ⵠᐃΔⵠΔ = 0;
      Dx.ⵠΔⵠⵠ.ᐃᐃⲆΔⲆᐃⲆΔⲆ(a);
    };
    this.ᐃΔᐃⲆⲆ = function (a) {
      if (Dx.alert.text) {
        if (a !== Dx.alert.text && Dx.alert.list[Dx.alert.list.length - 1] !== a) {
          Dx.alert.list.push(a);
        }
      } else {
        Dx.alert.text = a;
      }
    };
    this.ⵠⲆⲆⵠΔⵠⲆⲆⵠ = function () {
      this.ᐃΔᐃⲆⲆ(Gb[305]);
    };
    this.ⲆᐃⵠⵠΔᐃᐃⲆΔ = function () {
      var a;
      a = Dx.ⲆⲆⵠ == 0 ? Gb[306] : Gb[307] + (Dx.ⲆⲆⵠ + 1) + Gb[308];
      this.ᐃΔᐃⲆⲆ(a);
      Dx.ⲆⲆⵠ++;
    };
    this.ⵠⵠⲆⵠΔⲆⵠⲆᐃ = function () {
      clearTimeout(b.Δⵠⵠᐃⵠ);
      Dx.reconnect.enabled = false;
      Dx.ⲆⲆΔⲆⲆ = fh;
      this.ᐃΔᐃⲆⲆ(Gb[309]);
      Fx.ᐃⲆᐃΔΔ(zx.ⵠᐃⲆᐃᐃ);
      this.ᐃⲆᐃᐃ.close();
    };
    this.ΔᐃΔⵠᐃⲆⵠⲆⵠ = function () {
      Nx = 1;
      clearTimeout(this.Δⵠⵠᐃⵠ);
      this.ᐃΔᐃⲆⲆ(Gb[310]);
      zx.waiting = fg;
    };
    this.ⵠⲆᐃⲆᐃⵠⵠᐃⵠ = function () {
      Nx = 1;
      clearTimeout(this.Δⵠⵠᐃⵠ);
      this.ᐃΔᐃⲆⲆ(Gb[311]);
      zx.waiting = Ja;
    };
    this.ᐃΔΔⲆᐃΔᐃⲆⲆ = function (a) {
      var b = a[1];
      var c = Cx.ΔΔΔᐃ;
      c[b].ⲆⵠΔᐃΔ = a[2];
      c[b].ⵠΔᐃⵠ = a[3];
      c[b].ΔⵠΔΔⵠ = a[4];
      c[b].ⵠᐃᐃΔΔΔⵠ = a[5];
      c[b].ΔⵠᐃᐃΔ = a[6];
      c[b].ΔⲆᐃΔΔ = a[7];
      c[b].ᐃⵠΔΔⲆ = a[8];
      c[b].level = a[9];
      c[b].ⲆⲆⲆⲆⲆ = 0;
      c[b].ΔΔⵠᐃⵠⵠⲆ = null;
      c[b].label = null;
      c[b].ⵠⲆΔΔΔⵠᐃ = null;
      c[b].ⲆⲆΔⲆⲆ = true;
      if (pf === 1) {
        c[b].ⲆⵠΔᐃΔ += "|" + b;
      }
    };
    this.ᐃΔΔΔⵠΔᐃᐃⵠ = function () {
      this.ᐃⲆᐃᐃ[mf](ta[ca].stringify([5]));
    };
    this.ΔⲆᐃΔⵠᐃᐃΔⲆ = function () {
      this.ᐃΔᐃⲆⲆ(Gb[312]);
    };
    this.ΔΔⲆᐃᐃΔⲆ = function () {
      this.ᐃΔᐃⲆⲆ(Gb[313]);
    };
    this.ΔⲆⵠⲆⵠⵠⵠⲆⵠ = function (a) {
      this.ᐃⲆᐃᐃ[mf](Aa[Va].stringify([25, a]));
      Dx.ⵠⵠⵠΔⵠ.open = false;
    };
    this.ᐃⲆⲆⲆᐃⲆⲆΔᐃ = function (a) {
      for (var b = kf[a - 1].items, c = 0; b.length > c && Dx.ᐃᐃᐃΔ.max > Dx.ᐃᐃᐃΔ.ΔⲆⲆΔΔ.length; c++) {
        var d = b[c][1];
        var f = b[c][0];
        if (b[c][1] === 29) {
          Dx.ᐃᐃᐃΔ.ⲆᐃⲆᐃᐃⲆΔ(1, 0);
        } else {
          this.ᐃⵠⵠⵠⲆᐃᐃ([0, d, f]);
        }
      }
    };
    this.ᐃⵠⵠⵠⲆᐃᐃ = function (b) {
      for (var c = b.length, d = Dx.ᐃᐃᐃΔ, f = 1; f < c; f += 2) {
        var g = b[f];
        var h = b[f + 1];
        for (var i = 0; i < d.ΔⲆⲆΔΔ.length; i++) {
          if (g == d.ΔⲆⲆΔΔ[i].id) {
            d.ⲆᐃΔᐃ[g] += h;
            break;
          }
        }
        if (i == d.ΔⲆⲆΔΔ.length) {
          d.ⲆᐃΔᐃ[g] = h;
          d.ΔⲆⲆΔΔ.push(Fx.ᐃⵠᐃ[g]);
          Fx.ΔⲆΔᐃⲆΔΔ();
        }
      }
      Dx.ⵠΔⵠⵠ.ᐃⲆⲆ();
    };
    this.ΔⲆⵠⲆ = function (b, c, d, f, g, h, a) {
      Dx.ΔⲆⵠⲆ.ΔΔⲆᐃ = b / 100;
      Dx.ΔⲆⵠⲆ.ᐃΔΔ = c / 100;
      Dx.ΔⲆⵠⲆ.c = d / 100;
      Dx.ΔⲆⵠⲆ.ⵠΔΔ = f / 100;
      Dx.ΔⲆⵠⲆ.ΔᐃⲆ = g / 100;
      Dx.ΔⲆⵠⲆ.ᐃⲆΔⲆᐃⵠⵠ = h / 100;
      Dx.ΔΔᐃⵠⲆ = a;
    };
    this.ⵠΔᐃⵠΔᐃΔΔⲆ = function (a) {
      Fx.ⲆⵠΔΔ.modify(a, 2);
    };
    this.ⵠⵠᐃⲆⲆⵠⲆΔⵠ = function (a) {
      Fx.ⲆⵠΔΔ.modify(a, 0);
    };
    this.claimed = function (a) {
      Fx.ⲆⵠΔΔ.modify(a, 3);
    };
    this.ᐃⵠᐃⲆⲆⵠⲆⲆⵠ = function (a, b) {
      Dx.ΔⲆⵠⲆ.ΔΔⲆᐃ = a / 100;
      Dx.ΔΔᐃⵠⲆ = b;
    };
    this.ⲆᐃΔⵠⲆⵠⵠⲆⵠ = function (a) {
      Dx.ΔⲆⵠⲆ.ⵠΔΔ = a / 100;
    };
    this.ⲆⵠⲆΔⵠΔΔⵠⵠ = function (a) {
      Dx.ΔⲆⵠⲆ.ᐃΔΔ = a / 100;
    };
    this.ⵠΔΔᐃΔΔⲆⵠⲆ = function (a) {
      Dx.ΔⲆⵠⲆ.ᐃⲆΔⲆᐃⵠⵠ = a / 100;
    };
    this.ⲆΔᐃⲆⲆⲆᐃΔⲆ = function (a) {
      Dx.ΔⲆⵠⲆ.c = a / 100;
    };
    this.ⲆⵠᐃⵠᐃⲆⵠⲆⲆ = function (a) {
      Cx.time = a;
      Cx.transition = true;
      Gx.transition = 1;
    };
    this.ΔⲆᐃⵠΔΔⵠᐃΔ = function () {
      document.getElementById("game_body").style.backgroundColor = ts.ᐃΔⲆᐃⵠ[Cx.time];
    };
    this.ⵠⲆᐃⲆⵠⵠᐃⲆⵠ = function (a) {
      if (Cx.mode == 1 && Cx.ΔΔΔᐃ[a].ⲆⵠΔᐃΔ !== "spectator") {
        this.ᐃΔᐃⲆⲆ(Cx.ΔΔΔᐃ[a].ⲆⵠΔᐃΔ + Gb[314]);
      }
      Cx.ΔΔΔᐃ[a].ⲆⲆΔⲆⲆ = Po;
    };
    this.ᐃΔⵠᐃⲆⲆᐃΔⲆ = function (a) {
      var b = new Uint16Array(a);
      ΔΔᐃᐃ.ᐃΔᐃⲆ.ⵠⲆᐃΔΔ(b[1], b[2]);
    };
    this.ⵠᐃΔΔᐃⵠΔⲆⵠ = function (a) {
      var b = new Uint16Array(a);
      Dx.ᐃΔᐃⲆ.ⵠⲆᐃΔΔ(b[1], b[2]);
    };
    this.ΔⵠΔΔᐃᐃᐃΔᐃ = function (b, c) {
      var d = new Uint16Array(c);
      for (var f = (b.length - 2) / 4, g = 0; g < f; g++) {
        var i = d[1 + g * 2];
        var j = b[4 + g * 4];
        var k = (b[5 + g * 4] >> 1) / 127 * Math.PI * 2;
        var l = Cx.ᐃⵠΔΔᐃ[j * Cx.ᐃᐃΔᐃΔⲆΔ + i];
        if (l && l.ᐃΔⲆΔ) {
          if (Gx.loaded && Gx.ⵠᐃⲆᐃᐃ) {
            Gx.ᐃΔⲆΔ(b[5 + g * 4] & 1, ⲆⵠΔⵠᐃ[l.type], l.x, l.y);
          }
          l.ᐃΔⲆΔ.angle = k;
          l.ᐃΔⲆΔ.ᐃⲆⲆ = k;
        }
      }
    };
    this.ⲆⵠⲆⲆᐃᐃΔᐃᐃ = function (b) {
      var c = new Uint16Array(b);
      for (var d = (c.length - 1) / 4, f = 0; f < d; f++) {
        var i;
        var j = f * 4;
        var k = c[1 + j];
        var m = c[2 + j];
        var p = (c[3 + j] >> 1) / 127 * Math.PI * 2;
        var q = c[4 + j];
        var t = Ax.ⲆⵠⲆᐃ[m][k];
        switch (q) {
          case 0:
            (i = t.p[0][0]).angle = p;
            i.ᐃⲆⲆ = Ls;
            break;
          case 1:
            (i = t.s[0][0]).angle = p;
            i.ᐃⲆⲆ = D;
            break;
          case 2:
            (i = t.s[1][0]).angle = p;
            i.ᐃⲆⲆ = rg;
            break;
          case 3:
            (i = t.s[2][0]).angle = p;
            i.ᐃⲆⲆ = lh;
            break;
          case 4:
            (i = t.t[0][0]).angle = p;
            i.ᐃⲆⲆ = true;
            break;
          case 5:
            (i = t.t[1][0]).angle = p;
            i.ᐃⲆⲆ = true;
            break;
          case 6:
            (i = t.t[2][0]).angle = p;
            i.ᐃⲆⲆ = D;
            break;
          case 7:
            (i = t.t[3][0]).angle = p;
            i.ᐃⲆⲆ = true;
            break;
          case 8:
            (i = t.t[4][0]).angle = p;
            i.ᐃⲆⲆ = true;
            break;
          case 9:
            (i = t.t[5][0]).angle = p;
            i.ᐃⲆⲆ = rg;
            break;
          case 10:
            (i = t.g[0][0]).angle = p;
            i.ᐃⲆⲆ = ae;
            break;
          case 11:
            (i = t.g[1][0]).angle = p;
            i.ᐃⲆⲆ = ct;
            break;
          case 12:
            (i = t.g[2][0]).angle = p;
            i.ᐃⲆⲆ = yi;
            break;
          case 13:
            (i = t.d[0][0]).angle = p;
            i.ᐃⲆⲆ = true;
            break;
          case 14:
            (i = t.d[1][0]).angle = p;
            i.ᐃⲆⲆ = Ln;
            break;
          case 15:
            (i = t.d[2][0]).angle = p;
            i.ᐃⲆⲆ = Yk;
            break;
          case 16:
            (i = t.b[0][0]).angle = p;
            i.ᐃⲆⲆ = true;
            break;
          case 17:
            (i = t.b[1][0]).angle = p;
            i.ᐃⲆⲆ = true;
            break;
          case 18:
            (i = t.b[2][0]).angle = p;
            i.ᐃⲆⲆ = true;
            break;
          case 19:
            (i = t.b[3][0]).angle = p;
            i.ᐃⲆⲆ = lh;
            break;
          case 20:
            (i = t.f[0][0]).angle = p;
            i.ᐃⲆⲆ = true;
            break;
          case 21:
            (i = t.f[1][0]).angle = p;
            i.ᐃⲆⲆ = true;
            break;
          case 22:
            (i = t.f[2][0]).angle = p;
            i.ᐃⲆⲆ = true;
            break;
          case 23:
            (i = t.sw[0][0]).angle = p;
            i.ᐃⲆⲆ = true;
            break;
          case 24:
            (i = t.sw[1][0]).angle = p;
            i.ᐃⲆⲆ = Qh;
            break;
          case 25:
            (i = t.sw[2][0]).angle = p;
            i.ᐃⲆⲆ = true;
            break;
          case 26:
            (i = t.gw[0][0]).angle = p;
            i.ᐃⲆⲆ = true;
            break;
          case 27:
            (i = t.gw[1][0]).angle = p;
            i.ᐃⲆⲆ = bs;
            break;
          case 28:
            (i = t.gw[2][0]).angle = p;
            i.ᐃⲆⲆ = true;
            break;
          case 29:
            (i = t.dw[0][0]).angle = p;
            i.ᐃⲆⲆ = true;
            break;
          case 30:
            (i = t.dw[1][0]).angle = p;
            i.ᐃⲆⲆ = lh;
            break;
          case 31:
            (i = t.dw[2][0]).angle = p;
            i.ᐃⲆⲆ = true;
            break;
          case 32:
            (i = t.a[0][0]).angle = p;
            i.ᐃⲆⲆ = Yk;
            break;
          case 33:
            (i = t.a[1][0]).angle = p;
            i.ᐃⲆⲆ = true;
            break;
          case 34:
            (i = t.a[2][0]).angle = p;
            i.ᐃⲆⲆ = cg;
            break;
          case 35:
            (i = t.cs[0][0]).angle = p;
            i.ᐃⲆⲆ = ae;
            break;
          case 36:
            (i = t.cs[1][0]).angle = p;
            i.ᐃⲆⲆ = yi;
            break;
          case 37:
            (i = t.cs[2][0]).angle = p;
            i.ᐃⲆⲆ = true;
            break;
          case 38:
            (i = t.cs[3][0]).angle = p;
            i.ᐃⲆⲆ = Dl;
            break;
          case 40:
            (i = t.plm[0][0]).angle = p;
            i.ᐃⲆⲆ = qg;
            break;
          case 41:
            (i = t.plm[1][0]).angle = p;
            i.ᐃⲆⲆ = Wa;
            break;
          case 42:
            (i = t.plm[2][0]).angle = p;
            i.ᐃⲆⲆ = true;
            break;
          case 50:
            (i = t.re[0][0]).angle = p;
            i.ᐃⲆⲆ = true;
            break;
          case 51:
            (i = t.re[1][0]).angle = p;
            i.ᐃⲆⲆ = ae;
            break;
          case 52:
            (i = t.re[2][0]).angle = p;
            i.ᐃⲆⲆ = true;
            break;
          case 55:
            (i = t.c[0][0]).angle = p;
            i.ᐃⲆⲆ = Dl;
            break;
          case 56:
            (i = t.m[0][0]).angle = p;
            i.ᐃⲆⲆ = true;
            break;
          case 57:
            (i = t.m[1][0]).angle = p;
            i.ᐃⲆⲆ = bs;
            break;
          case 58:
            (i = t.m[2][0]).angle = p;
            i.ᐃⲆⲆ = Ls;
        }
        if (Gx.loaded && Gx.ⵠᐃⲆᐃᐃ && i) {
          Gx.ᐃΔⲆΔ(c[3 + j] & 1, ᐃⲆⲆΔ[q], i.x, i.y);
        }
      }
    };
    this.ᐃⲆᐃᐃⵠ = function () {
      this.ᐃⲆᐃᐃ[mf](nq[oa].stringify([2, Dx.ᐃⲆᐃᐃⵠ.ⲆΔⲆΔ, Dx.ᐃⲆᐃᐃⵠ.Δⵠⵠⵠⵠ]));
    };
    this.ⵠΔⲆⵠⵠᐃⵠⵠⵠ = function (a, b) {
      this.ᐃⲆᐃᐃ[mf](nq[Ba].stringify([33, b, a.ⲆΔⲆΔ, a.Δⵠⵠⵠⵠ]));
    };
    this.ΔᐃΔΔⲆⵠᐃ = function (a, b, c) {
      if (b) {
        this.ᐃⲆᐃᐃ[mf](nq[Ba].stringify([13, b, a.ⲆΔⲆΔ, a.Δⵠⵠⵠⵠ]));
      } else {
        this.ᐃⲆᐃᐃ[mf](nq[Ta].stringify([37, c, a.ⲆΔⲆΔ, a.Δⵠⵠⵠⵠ]));
      }
    };
    this.ⲆΔⲆⵠⵠⵠᐃⲆΔ = function (a) {
      this.ᐃⲆᐃᐃ[mf](rq[ja].stringify([19, a.ⲆΔⲆΔ, a.Δⵠⵠⵠⵠ]));
    };
    this.ᐃⵠⲆᐃΔΔᐃᐃⲆ = function (a) {
      this.ᐃⲆᐃᐃ[mf](rq[zq].stringify([1, a]));
    };
    this.ⲆΔⲆⲆⲆΔⵠΔᐃ = function (a) {
      this.ᐃⲆᐃᐃ[mf](Ia[oa].stringify([9, a.ⲆΔⲆΔ, a.Δⵠⵠⵠⵠ]));
    };
    this.ᐃⵠΔᐃⵠⵠΔⲆΔ = function (a, b) {
      this.ᐃⲆᐃᐃ[mf](Aa[ja].stringify([23, b, a.ⲆΔⲆΔ, a.Δⵠⵠⵠⵠ, a.type]));
    };
    this.ⵠΔᐃᐃⲆᐃᐃⲆᐃ = function (a, b) {
      this.ᐃⲆᐃᐃ[mf](Aa[ja].stringify([3, b, a.ⲆΔⲆΔ, a.Δⵠⵠⵠⵠ]));
    };
    this.ⲆΔⵠᐃᐃᐃⲆⲆΔ = function (a, b, c) {
      this.ᐃⲆᐃᐃ[mf](Ia[Ba].stringify([15, b, c, a.ⲆΔⲆΔ, a.Δⵠⵠⵠⵠ]));
    };
    this.ⲆΔΔⲆᐃⵠᐃ = function (a) {
      this.ᐃⲆᐃᐃ[mf](rq[ja].stringify([22, a.ⲆΔⲆΔ, a.Δⵠⵠⵠⵠ, a.type]));
    };
    this.ⵠΔⵠⵠⵠΔᐃᐃΔ = function (a) {
      this.ᐃⲆᐃᐃ[mf](rq[ja].stringify([6, a.ⲆΔⲆΔ, a.Δⵠⵠⵠⵠ]));
    };
    this.ⵠⵠⵠⲆⲆⵠⵠΔⵠ = function (a) {
      this.ᐃⲆᐃᐃ[mf](rq[ja].stringify([32, a.ⲆΔⲆΔ, a.Δⵠⵠⵠⵠ]));
    };
    this.ᐃΔⵠⲆᐃⲆᐃΔᐃ = function (a) {
      this.ᐃⲆᐃᐃ[mf](sq[Ua].stringify([17, a.ⲆΔⲆΔ, a.Δⵠⵠⵠⵠ]));
    };
    this.ⵠⵠΔⲆⵠΔΔΔⵠ = function (a) {
      this.ᐃⲆᐃᐃ[mf](vq[Va].stringify([24, a.Δⵠⵠⵠⵠ]));
    };
    this.ⵠⲆⵠᐃⵠⵠᐃ = function (a) {
      b.ᐃⲆᐃᐃ[mf](Bq[zq].stringify([34, Dx.ᐃᐃⲆⵠΔ.id, Dx.ᐃᐃᐃᐃⵠ[a]]));
    };
    this.ⵠⵠⵠⵠⲆⵠⵠⲆᐃ = function () {
      b.ᐃⲆᐃᐃ[mf](Kq[Jq].stringify([12, Dx.ᐃᐃⲆⵠΔ.ⲆΔⲆΔ, Dx.ᐃᐃⲆⵠΔ.id]));
    };
    this.ⲆΔⲆΔⲆⲆΔ = function () {
      b.ᐃⲆᐃᐃ[mf](Qq[Pq].stringify([10]));
    };
    this.ⵠⵠⵠΔⲆⲆᐃΔⲆ = function () {
      b.ᐃⲆᐃᐃ[mf](Qq[zq].stringify([18, Dx.ᐃᐃⲆⵠΔ.id]));
      if (document.getElementById("lock_team").innerHTML == "LOCK") {
        Dx.ᐃᐃⲆⵠΔ.lock = 1;
        document.getElementById("lock_team").innerHTML = "UNLOCK";
      } else {
        Dx.ᐃᐃⲆⵠΔ.lock = 0;
        document.getElementById("lock_team").innerHTML = "LOCK";
      }
    };
    this.ⲆΔⵠ = function (j, k, i) {
      var q = new Uint16Array(j);
      if (i) {
        Cx.ᐃⵠⵠⲆᐃⵠⵠᐃⲆ();
      }
      for (var n = (k.length - 2) / 18, o = 0; n > o; o++) {
        var t = 2 + o * 18;
        var w = 1 + o * 9;
        var x = k[t];
        var y = q[w + 1];
        var z = q[w + 5];
        var A = x * Cx.ᐃᐃΔᐃΔⲆΔ + z;
        if (y & 1) {
          Cx.ᐃᐃⵠⵠⲆᐃΔⲆΔ(A);
        } else {
          var B = q[w + 2];
          var D = q[w + 3];
          var E = q[w + 4];
          var F = q[w + 6];
          var G = q[w + 7];
          var H = q[w + 8];
          var I = k[t + 1] / 255 * Math.PI * 2;
          if (Cx.ᐃⵠΔΔᐃ[A]) {
            var J = Cx.ᐃⵠΔΔᐃ[A];
            J.r.x = D;
            J.r.y = E;
            if (x != 0 && ΔⵠΔᐃ.ΔⵠⲆᐃ(J, J.r) > 200) {
              J.x = D;
              J.y = E;
            }
            if (Dx.id !== J.id || x === 0) {
              J.ⵠⵠᐃΔᐃΔⲆ = I;
            }
            J.action |= y;
            J.info = F;
            J.ΔⵠΔⵠΔ = G;
            J.ᐃⲆΔᐃᐃ = H;
            if (J.ᐃⲆⲆ) {
              J.ᐃⲆⲆ(y);
            }
          } else {
            var K = new Gf(B, x, z, D, E, I, y, F, G, H);
            Cx.ᐃⵠΔΔᐃ[A] = K;
            Cx.ⲆΔⵠ[B].push(K);
          }
        }
      }
    };
    this.ⵠΔᐃⲆ = function (a) {
      this.ΔⲆⲆⵠΔᐃΔ = Kx;
      var b = new Uint16Array(a);
      Dx.ᐃⵠᐃᐃⲆ.ᐃⲆᐃⵠⵠ(b);
    };
    this.ᐃᐃⲆᐃᐃΔΔΔⲆ = function (a) {
      if (ib !== undefined) {
        nb = ib;
      }
      if (a.length > 0) {
        ib = JSON.parse(JSON.stringify(nb));
        for (var b = 0; a.length > b; b++) {
          var c = a[b];
          var d = nb[c.item];
          if (d !== undefined) {
            d.r = c.recipe;
            d.w = c.workbench;
            d.f = c.fire;
            d.ΔᐃⲆ = c.water;
            d.e = c.well;
            d.time = 1 / c.time;
          }
        }
      }
    };
    this.ᐃⲆⲆΔⵠⵠⵠ = function (a) {
      if (a && a.length !== 0) {
        Dx.ᐃⲆⲆΔⵠⵠⵠ.message = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          for (d.lineJoin = "round"; b.indexOf("\\n") !== -1;) {
            b = b.replace("\\n", "\n");
          }
          b = b.split("\n");
          ᐃᐃ = [];
          var f = 14;
          var g = b.length * (f + 4) + 10;
          var h = 0;
          d.font = f + "px Baloo Paaji";
          for (var i = 0; i < b.length; i++) {
            if (b[i].charAt(0) === "#") {
              ᐃᐃ[i] = b[i].substring(0, 7);
              b[i] = b[i].substring(8);
            } else {
              ᐃᐃ[i] = "#FFFFFF";
            }
            h = Math.max(d.measureText(b[i]).width + 16, h);
          }
          c.height = g;
          c.width = h;
          i = 0;
          for (; i < b.length; i++) {
            var j = _c(1, b[i], f, ᐃᐃ[i], null, null, null, null, null, "#000", 6);
            d.drawImage(j, 8, (f + 4) * i + 5);
          }
          return c;
        }(a);
      } else {
        Dx.ᐃⲆⲆΔⵠⵠⵠ.message = kn;
      }
    };
    this.ᐃΔⲆⲆᐃ = function (a) {
      var b = Cx.ᐃⵠΔΔᐃ[a[1] * Cx.ᐃᐃΔᐃΔⲆΔ];
      if (b) {
        if (Cx.mode === 2 && b.ⵠΔᐃⵠ === 0) {
          if (Dx.ⵠᐃⲆⵠᐃ) {
            if (Math.random() > 0.5) {
              b.text.push(a[2] + " ..." + ⲆⲆⵠᐃΔ);
            } else {
              b.text.push(ⲆⲆⵠᐃΔ + "... " + a[2]);
            }
          } else {
            b.text.push(ΔⵠⵠᐃΔᐃΔ[Math.floor(Math.random() * ΔⵠⵠᐃΔᐃΔ.length)]);
          }
        } else {
          b.text.push(a[2]);
        }
      }
    };
    this.ΔⵠⲆᐃΔⲆᐃΔᐃ = function (a) {
      if (Dx.ᐃᐃᐃΔ.max !== Dx.ᐃᐃᐃΔ.ΔⲆⲆΔΔ.length || nb[a].ᐃⲆⲆⲆ === 29 || Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(nb[a].ᐃⲆⲆⲆ) != -1 || Dx.ᐃᐃᐃΔ.ᐃⲆⵠⵠΔΔⵠⵠᐃ(nb[a].r)) {
        this.ᐃⲆᐃᐃ[mf](ta[ca].stringify([36, a]));
        return 1;
      } else {
        this.ΔΔⲆᐃᐃΔⲆ();
        return 0;
      }
    };
    this.ⲆᐃΔᐃΔ = function (a) {
      Dx.ⵠΔⵠⵠ.ⲆⲆΔΔⲆΔᐃⵠⲆ(a);
    };
    this.ΔΔᐃᐃⲆ = function (a) {
      Dx.ⵠΔⵠⵠ.ΔΔᐃᐃⲆ = a;
      Dx.ⵠΔⵠⵠ.ᐃⲆⲆ();
    };
    this.ΔΔᐃⲆᐃ = function (a) {
      Dx.ⵠΔⵠⵠ.ΔΔᐃⲆᐃ = a;
      Dx.ⵠΔⵠⵠ.ᐃⲆⲆ();
    };
    this.ᐃᐃᐃⲆⵠᐃⲆ = function (a) {
      Dx.ⵠΔⵠⵠ.ᐃᐃᐃⲆⵠᐃⲆ = a;
      Dx.ⵠΔⵠⵠ.ᐃⲆⲆ();
    };
    this.ᐃⵠⲆⲆᐃⲆᐃᐃᐃ = function (a) {
      this.ᐃΔᐃⲆⲆ(Gb[315]);
    };
    this.ᐃⲆⲆᐃΔⲆⲆⲆⵠ = function () {
      Dx.ⵠΔⵠⵠ.ΔⵠⲆⵠⲆⵠⵠ();
    };
    this.ΔΔᐃΔⲆ = function (a) {
      Fx.ΔΔᐃΔⲆ.ΔΔΔᐃ = [];
      var b = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ];
      var c = 0;
      for (var d = 1; d < a.length; d += 2) {
        var f = {
          x: Math.floor(a[d] * Cx.w / 250),
          y: Math.floor(a[d + 1] * Cx.ᐃΔΔ / 250)
        };
        if (b && !c && !Dx.ⵠⲆⵠᐃΔⲆᐃ && ΔⵠΔᐃ.ΔⵠⲆᐃ(f, b) < 250) {
          c += 1;
        } else {
          Fx.ΔΔᐃΔⲆ.ΔΔΔᐃ.push(f);
        }
      }
    };
    this.ΔᐃᐃᐃⵠᐃⵠΔⵠ = function () {
      Dx.ᐃⲆᐃᐃⵠ.open = ol;
      Dx.ΔⲆⲆᐃΔ.enabled = fl;
      Dx.ΔⲆⲆᐃΔ.ⵠᐃΔⵠΔ = -1;
      Dx.ΔⲆⲆᐃΔ.label = null;
      Dx.ΔⲆⲆᐃΔ.ⵠΔᐃᐃⲆⵠⲆ = null;
      Dx.ΔⲆⲆᐃΔ.now = -1;
    };
    this.ΔⲆⲆᐃΔ = function (a) {
      Df.ⲆⵠΔⵠⲆΔⲆ = a;
      Dx.ΔⲆⲆᐃΔ.enabled = Ln;
      Dx.ΔⲆⲆᐃΔ.ⵠᐃΔⵠΔ = new Date().getTime();
      Dx.ΔⲆⲆᐃΔ.label = null;
      Dx.ΔⲆⲆᐃΔ.now = -1;
      for (var b = [45, 149, 57, 0, 5, 6, 30, 19, 62, 63, 9, 13, 12, 14, 15, 33, 34, 16, 17, 18, 94, 95, 96, 97, 98, 99, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 92, 93, 8, 1, 3, 4, 31, 32, 55, 53, 54], c = 0; c < b.length; c++) {
        var d = Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(b[c]);
        if (d != -1) {
          Dx.ᐃᐃᐃΔ.ᐃⵠᐃᐃΔⵠΔ(b.length[c], d);
        }
      }
      Dx.ⵠΔⵠⵠ.ΔⵠⲆⵠⲆⵠⵠ();
    };
    this.ΔⲆⲆᐃᐃⵠᐃⲆⲆ = function (a, b, c) {
      this.ᐃᐃᐃᐃⵠᐃⲆ(a, b * 256 + c);
    };
    this.ᐃᐃᐃᐃⵠᐃⲆ = function (a, b) {
      Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ = -1;
      Dx.ᐃᐃᐃΔ.ⲆⵠΔᐃᐃⲆⲆ(a, b, Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(a));
      Dx.ⵠΔⵠⵠ.ᐃⲆⲆ();
    };
    this.ΔⵠⵠΔᐃⵠⵠᐃᐃ = function (a) {
      Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ = -1;
      Dx.ⲆⲆⲆᐃⲆ.wait = true;
      var b = Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(a);
      Dx.ᐃᐃᐃΔ.ⲆⵠΔᐃᐃⲆⲆ(a, 1, b);
      if (b >= 0 && !Dx.ᐃᐃᐃΔ.ⲆᐃΔᐃ[a]) {
        Dx.ⵠΔⵠⵠ.ᐃⲆⲆ();
      }
      if (a == 159) {
        Dx.ᐃᐃᐃᐃⵠ = [Dx.id];
      }
    };
    this.ⵠⵠᐃΔᐃᐃΔΔᐃ = function () {
      this.ᐃⲆᐃᐃ[mf](nq[oa].stringify([8]));
    };
    this.ΔᐃᐃᐃⲆⵠⵠⲆΔ = function (a) {
      this.ᐃⲆᐃᐃ[mf](Aa[Ta].stringify([26, a.ᐃⵠⵠⲆΔ, a.id]));
    };
    this.ᐃᐃⲆᐃⵠⵠⵠᐃⲆ = function (a, b) {
      this.ᐃⲆᐃᐃ[mf](Aa[ja].stringify([27, a, b]));
    };
    this.ᐃΔⵠⵠⲆᐃΔΔⵠ = function () {
      var a = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ];
      if (a) {
        var b = Math.PI * 2;
        this.ᐃⲆᐃᐃ[mf](Aa[Ta].stringify([28, Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ, Math.floor((a.angle + b) % b * 255 / b), Dx.ⵠΔⵠⵠ.mode]));
      }
    };
    this.ⵠΔⲆⲆⵠ = function (a, b) {
      switch (a) {
        case 195:
        case 110:
        case 116:
        case 117:
        case 145:
        case 127:
        case 133:
        case 136:
        case 142:
        case 143:
        case 189:
        case 207:
        case 233:
        case 205:
        case 209:
        case 211:
        case 192:
        case 137:
        case 138:
        case 196:
        case 197:
        case 200:
        case 199:
          Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ = -1;
          this.ᐃⲆᐃᐃ[mf](Ia[Ba].stringify([35, a]));
          break;
        case 114:
        case 160:
        case 115:
        case 132:
        case 188:
        case 206:
        case 204:
        case 191:
        case 193:
        case 208:
        case 210:
        case 113:
        case 162:
        case 163:
        case 164:
        case 165:
        case 118:
        case 167:
        case 151:
        case 152:
        case 166:
        case 171:
        case 172:
        case 173:
        case 124:
        case 218:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 220:
        case 168:
        case 169:
        case 170:
        case 119:
        case 122:
        case 123:
        case 217:
        case 219:
        case 125:
        case 190:
        case 141:
        case 135:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 198:
        case 201:
        case 182:
        case 183:
        case 144:
        case 159:
        case 221:
          if (!Dx.ⵠᐃⲆⵠᐃ) {
            if (a === Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ) {
              Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ = -1;
            } else {
              Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ = a;
            }
          }
          break;
        case 0:
        case 57:
        case 5:
        case 6:
        case 30:
        case 19:
        case 9:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 92:
        case 93:
        case 12:
        case 13:
        case 14:
        case 15:
        case 33:
        case nh.ᐃⵠΔΔⲆΔΔΔⲆ:
        case 16:
        case 17:
        case 34:
        case 18:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
          if (!Dx.ⵠᐃⲆⵠᐃ) {
            Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ = -1;
            if ((c = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ]) && a === c.right) {
              this.ᐃⲆᐃᐃ[mf](rq[ja].stringify([35, 7]));
            } else {
              Dx.ⲆⵠΔⲆⵠ.wait = Wa;
              this.ᐃⲆᐃᐃ[mf](sq[Ua].stringify([35, a]));
            }
          }
          break;
        case 1:
        case 8:
        case 3:
        case 4:
        case 35:
        case 36:
        case 37:
        case 28:
        case 38:
        case 39:
        case 31:
        case 32:
        case 45:
        case 46:
        case 50:
        case 51:
        case 52:
        case 55:
        case 56:
        case 53:
        case 54:
        case 89:
        case 49:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
          if (!Dx.ⵠᐃⲆⵠᐃ) {
            Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ = -1;
            if ((c = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ]) && c.right === a) {
              this.ᐃⲆᐃᐃ[mf](vq[Va].stringify([35, 7]));
            } else {
              this.ᐃⲆᐃᐃ[mf](Bq[zq].stringify([35, a]));
            }
          }
          break;
        case 223:
        case 224:
        case 225:
        case 239:
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 91:
          if (!Dx.ⵠᐃⲆⵠᐃ) {
            Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ = -1;
            var c = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ];
            this.ᐃⲆᐃᐃ[mf](Bq[zq].stringify([35, a]));
          }
          break;
        case 77:
        case 78:
        case 79:
        case 58:
        case 25:
        case 26:
        case 27:
        case 43:
        case 44:
        case 20:
        case 21:
        case 22:
        case 59:
        case 60:
        case 90:
        case 61:
        case 47:
          if ((c = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ]) && c.ⵠᐃⲆⲆⵠ !== a) {
            Dx.ⲆΔⵠΔⵠ.wait = qg;
          }
          this.ᐃⲆᐃᐃ[mf](Ia[ja].stringify([35, a]));
          break;
        case 10:
        case 83:
        case 84:
        case 86:
        case 11:
        case 40:
        case 88:
        case 82:
        case 80:
        case 81:
        case 41:
        case 42:
        case 85:
        case 23:
        case 24:
        case 48:
          this.ᐃⲆᐃᐃ[mf](Kq[Jq].stringify([35, a]));
      }
    };
    this.ⲆΔᐃᐃᐃⲆΔΔΔ = function (a) {
      this.ᐃⲆᐃᐃ[mf](Aa[ca].stringify([11, a]));
    };
    this.ⵠⲆⵠᐃΔⵠᐃⲆᐃ = function (a) {
      Dx.ⲆⲆⲆᐃⲆ.wait = true;
      var b = Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(a);
      Dx.ᐃᐃᐃΔ.ᐃⵠᐃᐃΔⵠΔ(a, b);
      Dx.ⵠΔⵠⵠ.ᐃⲆⲆ();
    };
    this.ᐃᐃⲆⵠⵠᐃᐃᐃᐃ = function (a, b) {
      this.ᐃⲆᐃᐃ[mf](ta[Va].stringify([31, a]));
    };
    this.ΔᐃⵠⵠⵠᐃᐃᐃⲆ = function (a, b) {
      this.ᐃⲆᐃᐃ[mf](nq[oa].stringify([30, a]));
    };
    this.ⵠΔⲆⵠΔⲆⵠΔⲆ = function (a) {
      Dx.ⲆⲆⲆᐃⲆ.wait = ae;
      var b = Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(a);
      Dx.ᐃᐃᐃΔ.ⲆⵠΔᐃᐃⲆⲆ(a, 1, b);
      Dx.ⵠΔⵠⵠ.ᐃⲆⲆ();
    };
    this.ⵠⲆⲆᐃⲆᐃΔΔⵠ = function (a) {
      var b = a[1];
      var c = a[2];
      Dx.ⲆⲆⲆᐃⲆ.wait = true;
      var d = Dx.ᐃᐃᐃΔ.ᐃⵠⲆⵠΔ(b);
      Dx.ᐃᐃᐃΔ.ⲆⵠΔᐃᐃⲆⲆ(b, c, d);
      Dx.ⵠΔⵠⵠ.ᐃⲆⲆ();
    };
    this.ⵠⵠⲆᐃⵠⲆΔⲆΔ = function () {
      this.ᐃⲆᐃᐃ[mf](nq[oa].stringify([38]));
    };
    this.ᐃᐃΔᐃᐃᐃΔⵠΔ = function (a) {
      var b = Math.PI * 2;
      this.ᐃⲆᐃᐃ[mf](Aa[Ta].stringify([16, Math.floor((a + b) % b * 255 / b)]));
    };
    this.ΔⲆΔⵠᐃⲆΔΔⵠ = function (a) {
      var b = Math.PI * 2;
      this.ᐃⲆᐃᐃ[mf](Aa[Ta].stringify([0, Math.floor((a + b) % b * 255 / b)]));
    };
    this.ⵠⲆⵠΔΔⲆⲆⲆΔ = function (a) {
      this.ᐃⲆᐃᐃ[mf](ᐃᐃⵠⲆᐃⵠⵠ[0].stringify([29, a]));
    };
    this.ᐃᐃⵠΔΔⵠΔⵠⵠ = function (a) {
      this.ᐃⲆᐃᐃ[mf](rq[ja].stringify([7, a]));
    };
    this.ΔᐃΔᐃⲆΔΔΔⲆ = function (a) {
      var b = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ];
      if (Dx.ⵠᐃⲆⵠᐃ) {
        if (Math.random() > 0.5) {
          b.text.push(a.substring(0, 25) + " ..." + ⲆⲆⵠᐃΔ);
        } else {
          b.text.push(ⲆⲆⵠᐃΔ + "... " + a.substring(0, 25));
        }
      } else {
        b.text.push(a);
      }
      this.ᐃⲆᐃᐃ[mf](rq[ja].stringify([14, a]));
    };
    this.ᐃΔⲆΔⲆ = function (a) {
      var b = ΔΔᐃᐃ.select.ⲆΔⵠ;
      if (b.length != 0) {
        var c = [29];
        var d = [];
        ΔⵠΔᐃ.ΔᐃΔⲆΔᐃⵠ(a, {
          x: ΔΔᐃᐃ.ᐃΔᐃⲆ.rx,
          y: ΔΔᐃᐃ.ᐃΔᐃⲆ.ry
        });
        c.push(a.x);
        c.push(a.y);
        for (var f = 0; f < b.length; f++) {
          d.push(b[f].ΔⲆⵠⵠᐃⵠΔⲆⲆ);
        }
        c.push(d);
        this.ᐃⲆᐃᐃ[mf](sq[Ua].stringify(c));
      }
    };
    this.ΔΔᐃᐃⲆⵠⲆ = 0;
    this.ᐃⲆⵠΔⲆᐃᐃ = {
      ⲆⵠⲆⲆ: 0,
      ⲆΔ: 0
    };
    this.ᐃⲆⵠΔΔⵠⵠΔⲆ = function () {
      if (Kx - this.ΔΔᐃᐃⲆⵠⲆ > 50) {
        this.ΔΔᐃᐃⲆⵠⲆ = Kx;
        var a = Dx.ᐃΔᐃⲆ;
        var b = Math.floor(a.x / 100);
        var c = Math.floor(a.y / 100);
        if (b != this.ᐃⲆⵠΔⲆᐃᐃ.ⲆΔ || c != this.ᐃⲆⵠΔⲆᐃᐃ.ⲆⵠⲆⲆ) {
          this.ᐃⲆᐃᐃ[mf](Bq[Va].stringify([4, Math.floor(-a.x), Math.floor(-a.y)]));
          this.ᐃⲆⵠΔⲆᐃᐃ.ⲆΔ = b;
          this.ᐃⲆⵠΔⲆᐃᐃ.ⲆⵠⲆⲆ = c;
        }
      }
    };
    this.ⵠΔᐃⵠⵠΔⲆ = 0;
    this.ⵠⲆⵠⲆΔⲆΔᐃⵠ = function () {
      if (Kx - this.ⵠΔᐃⵠⵠΔⲆ > 60000) {
        this.ⵠΔᐃⵠⵠΔⲆ = Kx;
        this.ping();
      }
    };
    this.ⲆⵠᐃᐃⵠⲆⵠⲆⲆ = function () {
      Dx.reconnect.enabled = Cq;
      if (this.ⲆⲆᐃᐃΔ == this.ᐃⲆᐃᐃ.ⲆⲆᐃᐃΔ) {
        this.ⲆⲆᐃᐃΔ++;
        this.ᐃⲆᐃᐃ.close();
        ⲆᐃⲆᐃ.connect();
      }
    };
    this.ᐃᐃΔⵠΔⲆᐃΔᐃ = function (a) {
      this.ᐃΔᐃⲆⲆ(Gb[316]);
      for (var b = 1; a.length > b; b++) {
        Dx.ᐃᐃᐃᐃⵠ.push(a[b]);
      }
    };
    this.ᐃⲆⲆᐃⵠⵠⲆⵠⲆ = function (a) {
      this.ᐃΔᐃⲆⲆ(Cx.ΔΔΔᐃ[a].ⲆⵠΔᐃΔ + Gb[318]);
      Dx.ᐃᐃᐃᐃⵠ.push(a);
      var b = document.getElementById("team_box");
      if (Fx.ⲆⲆᐃᐃⲆ != -1 && b.style.display == "inline-block") {
        Fx.ⵠⵠᐃⵠⵠ[Fx.ⲆⲆᐃᐃⲆ].action();
      }
    };
    this.ⵠΔⵠⲆⵠΔⲆΔⵠ = function () {
      this.ᐃΔᐃⲆⲆ(Gb[319]);
      Dx.ᐃᐃⲆⵠΔ.wait = ae;
      Dx.ᐃᐃᐃᐃⵠ = [];
      document.getElementById("team_box").style.display = "none";
    };
    this.ΔⲆⲆⵠⵠⵠΔᐃᐃ = function (a) {
      if (a == Dx.id) {
        this.ᐃΔᐃⲆⲆ(Gb[320]);
        Dx.ᐃᐃⲆⵠΔ.wait = ae;
        Dx.ᐃᐃᐃᐃⵠ = [];
        document.getElementById("team_box").style.display = "none";
      } else {
        this.ᐃΔᐃⲆⲆ(Cx.ΔΔΔᐃ[a].ⲆⵠΔᐃΔ + Gb[321]);
        for (var b = 0; Dx.ᐃᐃᐃᐃⵠ.length > b; b++) {
          if (Dx.ᐃᐃᐃᐃⵠ[b] == a) {
            Dx.ᐃᐃᐃᐃⵠ.splice(b, 1);
            break;
          }
        }
        var c = document.getElementById("team_box");
        if (Fx.ⲆⲆᐃᐃⲆ != -1 && c.style.display == "inline-block") {
          Fx.ⵠⵠᐃⵠⵠ[Fx.ⲆⲆᐃᐃⲆ].action();
        }
      }
    };
    this.ⲆⵠᐃᐃⲆⲆᐃΔΔ = function (a) {
      Dx.ⲆⲆΔⲆⲆ = false;
      this.ᐃΔᐃⲆⲆ(Gb[322]);
      if (this.ᐃⲆᐃᐃ.ⲆⲆᐃᐃΔ == this.ⲆⲆᐃᐃΔ) {
        this.ⲆⲆᐃᐃΔ++;
        Fx.ᐃⲆᐃΔΔ(zx.ⵠᐃⲆᐃᐃ);
        this.ᐃⲆᐃᐃ.close();
      }
    };
    this.ΔᐃᐃⲆΔⵠΔⲆΔ = function (a, b) {
      Dx.ⲆⲆΔⲆⲆ = Ja;
      var c = new Uint16Array(b);
      var d = new Uint32Array(b);
      Dx.ⲆΔⵠΔᐃᐃᐃ.ΔᐃⲆⵠⲆᐃⲆ = Nb[a][Math.floor(Math.random() * Nb[a].length)];
      Dx.ⲆΔⵠΔᐃᐃᐃ.ⲆⲆⲆⲆⲆ = ΔⵠΔᐃ.ΔΔᐃⵠᐃⵠⵠ(Cx.ΔΔΔᐃ[Dx.id].ⲆⲆⲆⲆⲆ);
      Dx.ⲆΔⵠΔᐃᐃᐃ.ΔᐃΔⲆⵠⲆᐃ = ΔⵠΔᐃ.ΔΔᐃⵠᐃⵠⵠ(d[1]);
      Dx.ⲆΔⵠΔᐃᐃᐃ.ⵠⲆΔᐃΔ = c[1];
      this.ᐃΔᐃⲆⲆ(Gb[317]);
      if (this.ⲆⲆᐃᐃΔ == this.ᐃⲆᐃᐃ.ⲆⲆᐃᐃΔ) {
        this.ⲆⲆᐃᐃΔ++;
        Fx.ᐃⲆᐃΔΔ(Ex.ⵠᐃⲆᐃᐃ);
        this.ᐃⲆᐃᐃ.close();
        try {
          e.Widget.adsRefresh();
        } catch (a) {}
      }
    };
    this.ping = function () {
      this.ᐃⲆᐃᐃ[mf]("[21]");
    };
    this.ⲆᐃᐃⵠⲆᐃΔᐃΔ = function () {
      if (this.ᐃⲆᐃᐃ.readyState == 3) {
        this.ΔⲆⲆⵠΔᐃΔ -= 600000;
      }
    };
    this.ⵠΔⲆΔᐃΔⲆⵠⵠ = function () {
      if (Jx > 5) {
        this.ΔⲆⲆⵠΔᐃΔ = Kx;
      }
      if (Kx - this.ΔⲆⲆⵠΔᐃΔ > 600000) {
        this.ΔⲆⲆⵠΔᐃΔ = Kx;
        this.ⲆⵠᐃᐃⵠⲆⵠⲆⲆ();
      }
    };
    this.ΔⵠᐃⵠⲆᐃⵠⵠⲆ = function (c) {
      Nx++;
      clearTimeout(this.Δⵠⵠᐃⵠ);
      document.getElementById("commandMainBoxName").innerHTML = this.ᐃᐃⵠΔᐃ[this.ᐃⲆΔⲆⵠ][this.ⵠⲆΔΔᐃΔⵠ[this.ᐃⲆΔⲆⵠ]].a;
      document.getElementById("exploreForest").src = "img/forest-leaf.png";
      document.getElementById("exploreWinter").src = "img/winter-flake.png";
      document.getElementById("exploreDesert").src = "img/desert-cactus.png";
      document.getElementById("exploreLava").src = "img/lava-volcano.png";
      this.ΔⲆⲆⵠΔᐃΔ = Kx;
      Dx.ΔⲆⵠⲆ.ⵠⵠΔⵠⵠ.Δᐃⵠⵠᐃ = Dx.ΔⲆⵠⲆ.ⵠⵠΔⵠⵠ.ⲆᐃΔⲆᐃ;
      Dx.ΔⲆⵠⲆ.ᐃᐃⵠΔᐃᐃⲆ.Δᐃⵠⵠᐃ = Dx.ΔⲆⵠⲆ.ᐃᐃⵠΔᐃᐃⲆ.ⲆᐃΔⲆᐃ;
      Dx.ΔⲆⵠⲆ.ⵠΔᐃᐃⲆⲆⵠ.Δᐃⵠⵠᐃ = Dx.ΔⲆⵠⲆ.ⵠΔᐃᐃⲆⲆⵠ.ⲆᐃΔⲆᐃ;
      Dx.ΔⲆⵠⲆ.ⲆⵠⲆΔΔΔᐃ.Δᐃⵠⵠᐃ = Dx.ΔⲆⵠⲆ.ⲆⵠⲆΔΔΔᐃ.ⲆᐃΔⲆᐃ;
      Dx.ΔⲆⵠⲆ.ᐃΔᐃΔΔ.Δᐃⵠⵠᐃ = Dx.ΔⲆⵠⲆ.ᐃΔᐃΔΔ.ⲆᐃΔⲆᐃ;
      Dx.ΔⲆⵠⲆ.ΔΔⲆᐃ = 1;
      Dx.ΔⲆⵠⲆ.c = 1;
      Dx.ΔⲆⵠⲆ.ᐃΔΔ = 1;
      Dx.ΔⲆⵠⲆ.ⵠΔΔ = 1;
      Dx.ΔⲆⵠⲆ.ΔᐃⲆ = 1;
      Dx.ΔⲆⵠⲆ.ᐃⲆΔⲆᐃⵠⵠ = 1;
      Dx.ⵠΔⵠᐃᐃⲆⲆ = ir;
      Fx.ⵠᐃⵠⲆⵠ.display = 0;
      Dx.ᐃᐃᐃΔ.ΔⲆⲆΔΔ = [];
      Dx.ᐃᐃᐃΔ.ⲆᐃΔᐃ = [];
      Dx.ᐃᐃᐃΔ.max = 10;
      Dx.ᐃᐃᐃΔ.ⵠⵠΔᐃⲆᐃΔ = 0;
      Dx.ᐃᐃᐃΔ.ᐃⲆⲆΔⲆ = 0;
      Dx.ᐃᐃᐃΔ.id = -1;
      Fx.ΔΔΔⵠⲆⵠΔ = 1;
      Fx.ᐃⲆⵠⵠᐃⲆΔ = 1;
      Fx.ᐃᐃᐃⵠΔᐃⲆ = 1;
      Fx.ⲆⲆⲆΔⵠᐃᐃ = 1;
      Dx.ⲆⲆΔⲆⲆ = ae;
      Dx.ᐃᐃᐃΔ.ⲆΔⵠⵠⲆΔⵠ.stop();
      Dx.ⵠΔⵠⵠ.ⵠⵠΔⵠᐃ = [];
      Dx.ⵠΔⵠⵠ.ⵠⲆᐃᐃⲆ = ul;
      Dx.ⵠΔⵠⵠ.ⵠΔΔΔⲆᐃⵠⵠⵠ = Po;
      Dx.ⵠΔⵠⵠ.ᐃᐃⵠⲆ = -1;
      Dx.ⵠΔⵠⵠ.id = -1;
      Dx.ⵠΔⵠⵠ.ⲆᐃΔᐃΔ = false;
      Dx.ⵠΔⵠⵠ.ΔΔᐃᐃⲆ = false;
      Dx.ⵠΔⵠⵠ.ΔΔᐃⲆᐃ = Ee;
      Dx.ⵠΔⵠⵠ.ᐃᐃᐃⲆⵠᐃⲆ = Rg;
      Dx.ⵠΔⵠⵠ.timeout = new ΔⵠΔᐃ.ⵠΔΔΔ(tg, 0, 1, 0, 1, 1);
      Dx.ⲆⵠΔⲆⵠ.timeout = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0, 1, 0, 1 / 10, 1);
      Dx.ⲆⵠΔⲆⵠ.wait = Po;
      Dx.ⲆΔⵠΔⵠ.timeout = new ΔⵠΔᐃ.ⵠΔΔΔ(false, 0, 1, 0, 1 / 5, 1);
      Dx.ⲆΔⵠΔⵠ.wait = false;
      Dx.ⲆⲆⲆᐃⲆ.timeout = new ΔⵠΔᐃ.ⵠΔΔΔ(ul, 0, 1, 0, 1, 1);
      Dx.ⲆⲆⲆᐃⲆ.wait = false;
      Dx.ᐃᐃⲆⵠΔ.id = -1;
      Dx.ᐃᐃⲆⵠΔ.ⲆΔⲆΔ = -1;
      Dx.ᐃᐃⲆⵠΔ.wait = false;
      Dx.ᐃᐃⲆⵠΔ.timeout = new ΔⵠΔᐃ.ⵠΔΔΔ(fl, 0, 1, 0, 1 / 30, 1);
      Fx.ΔΔᐃΔⲆ.ⲆΔⵠᐃⵠ.x = -1;
      Fx.ΔΔᐃΔⲆ.ⲆΔⵠᐃⵠ.y = -1;
      Fx.Δᐃᐃⵠ.open = false;
      Fx.ΔΔᐃΔⲆ.ΔΔΔᐃ = [];
      Dx.ΔΔⲆΔᐃ.enabled = Rg;
      Cx.mode = c[1];
      if (c[20] !== Al && c[21] !== undefined) {
        Cx.ⲆᐃⲆⵠᐃ = c[20];
        Cx.ⲆⵠΔΔΔ = c[21];
        Cx.w = Cx.ⲆᐃⲆⵠᐃ * Cx.ᐃⲆⵠᐃΔΔᐃ;
        Cx.ᐃΔΔ = Cx.ᐃⵠΔⵠⲆᐃᐃ * Cx.ⲆⵠΔΔΔ;
      }
      Cx.ᐃᐃⲆⲆⵠⵠⲆ = c[22];
      Cx.ᐃᐃᐃⲆᐃ = c[23];
      b.ᐃⲆⲆΔⵠⵠⵠ(c[24]);
      b.ᐃᐃⲆᐃᐃΔΔΔⲆ(c[25]);
      Dx.ΔΔⵠᐃⵠ.ⲆⲆᐃⲆΔ = c[26];
      Dx.ΔⵠΔΔΔⵠⵠ = 0;
      Dx.ⲆΔⵠⲆⲆ.ⲆⲆᐃⲆΔ = c[27];
      Cx.ⲆΔᐃⵠᐃΔⵠⵠⵠ(c[19]);
      Cx.time = c[5];
      Cx.ⲆⲆᐃⵠⲆ.ⵠᐃⲆᐃⵠ = c[15];
      Cx.ⲆⲆᐃⵠⲆ.ᐃⲆᐃⵠⵠ = new Date().getTime();
      Fx.ⲆⵠΔΔ.ⲆⲆⵠⵠⵠⵠΔ = c[16];
      Cx.transition = false;
      Dx.ⲆⲆⵠ = c[2];
      Fx.ⲆⵠΔΔ.reset();
      Dx.ᐃᐃᐃᐃⵠ = c[8];
      Cx.ⲆΔⵠ[0] = [];
      Cx.ⲆΔⵠ[100] = [];
      Cx.ⲆΔⵠ[2] = [];
      Cx.ⲆΔⵠ[1] = [];
      Cx.ⲆΔⵠ[6] = [];
      Cx.ⲆΔⵠ[3] = [];
      Cx.ⲆΔⵠ[31] = [];
      Cx.ⲆΔⵠ[37] = [];
      Cx.ⲆΔⵠ[43] = [];
      Cx.ⲆΔⵠ[44] = [];
      Cx.ⲆΔⵠ[39] = [];
      Cx.ⲆΔⵠ[40] = [];
      Cx.ⲆΔⵠ[54] = [];
      Cx.ⲆΔⵠ[55] = [];
      Cx.ⲆΔⵠ[4] = [];
      Cx.ⲆΔⵠ[7] = [];
      Cx.ⲆΔⵠ[8] = [];
      Cx.ⲆΔⵠ[9] = [];
      Cx.ⲆΔⵠ[10] = [];
      Cx.ⲆΔⵠ[15] = [];
      Cx.ⲆΔⵠ[16] = [];
      Cx.ⲆΔⵠ[17] = [];
      Cx.ⲆΔⵠ[45] = [];
      Cx.ⲆΔⵠ[46] = [];
      Cx.ⲆΔⵠ[47] = [];
      Cx.ⲆΔⵠ[48] = [];
      Cx.ⲆΔⵠ[49] = [];
      Cx.ⲆΔⵠ[53] = [];
      Cx.ⲆΔⵠ[11] = [];
      Cx.ⲆΔⵠ[22] = [];
      Cx.ⲆΔⵠ[23] = [];
      Cx.ⲆΔⵠ[5] = [];
      Cx.ⲆΔⵠ[12] = [];
      Cx.ⲆΔⵠ[13] = [];
      Cx.ⲆΔⵠ[14] = [];
      Cx.ⲆΔⵠ[60] = [];
      Cx.ⲆΔⵠ[70] = [];
      Cx.ⲆΔⵠ[71] = [];
      Cx.ⲆΔⵠ[72] = [];
      Cx.ⲆΔⵠ[73] = [];
      Cx.ⲆΔⵠ[74] = [];
      Cx.ⲆΔⵠ[81] = [];
      Cx.ⲆΔⵠ[82] = [];
      Cx.ⲆΔⵠ[87] = [];
      Cx.ⲆΔⵠ[86] = [];
      Cx.ⲆΔⵠ[34] = [];
      Cx.ⲆΔⵠ[65] = [];
      Cx.ⲆΔⵠ[66] = [];
      Cx.ⲆΔⵠ[67] = [];
      Cx.ⲆΔⵠ[62] = [];
      Cx.ⲆΔⵠ[63] = [];
      Cx.ⲆΔⵠ[78] = [];
      Cx.ⲆΔⵠ[77] = [];
      Cx.ⲆΔⵠ[75] = [];
      Cx.ⲆΔⵠ[76] = [];
      Cx.ⲆΔⵠ[64] = [];
      Cx.ⲆΔⵠ[69] = [];
      Cx.ⲆΔⵠ[68] = [];
      Cx.ⲆΔⵠ[79] = [];
      Cx.ⲆΔⵠ[89] = [];
      Cx.ⲆΔⵠ[83] = [];
      Cx.ⲆΔⵠ[84] = [];
      Cx.ⲆΔⵠ[85] = [];
      Cx.ⲆΔⵠ[80] = [];
      Cx.ⲆΔⵠ[88] = [];
      Cx.ⲆΔⵠ[91] = [];
      Cx.ⲆΔⵠ[90] = [];
      Cx.ⲆΔⵠ[61] = [];
      Cx.ⲆΔⵠ[18] = [];
      Cx.ⲆΔⵠ[19] = [];
      Cx.ⲆΔⵠ[20] = [];
      Cx.ⲆΔⵠ[21] = [];
      Cx.ⲆΔⵠ[50] = [];
      Cx.ⲆΔⵠ[52] = [];
      Cx.ⲆΔⵠ[51] = [];
      Cx.ⲆΔⵠ[29] = [];
      Cx.ⲆΔⵠ[56] = [];
      Cx.ⲆΔⵠ[30] = [];
      Cx.ⲆΔⵠ[38] = [];
      Cx.ⲆΔⵠ[33] = [];
      Cx.ⲆΔⵠ[32] = [];
      Cx.ⲆΔⵠ[24] = [];
      Cx.ⲆΔⵠ[25] = [];
      Cx.ⲆΔⵠ[26] = [];
      Cx.ⲆΔⵠ[27] = [];
      Cx.ⲆΔⵠ[28] = [];
      Cx.ⲆΔⵠ[42] = [];
      Cx.ⲆΔⵠ[41] = [];
      Cx.ⲆΔⵠ[35] = [];
      Cx.ⲆΔⵠ[36] = [];
      Cx.ᐃⵠΔΔᐃ = [];
      Cx.ᐃᐃΔᐃΔⲆΔ = c[7];
      Dx.id = c[9];
      Dx.ᐃΔᐃΔ = Dx.id * Cx.ᐃᐃΔᐃΔⲆΔ;
      if (Gx.loaded) {
        Gx.ΔΔΔᐃ[0].ᐃΔᐃΔ = Dx.ᐃΔᐃΔ;
        Gx.ΔΔΔᐃ[0].ⵠΔⲆᐃⲆⲆΔ = 0;
      }
      Hx.ⵠᐃᐃΔΔᐃΔ();
      Dx.ᐃΔᐃⲆ.ⵠⲆᐃΔΔ(c[3], c[10]);
      Cx.ΔΔΔᐃ = [];
      var d = Cx.ΔΔΔᐃ;
      for (var f = 0; f < c[11]; f++) {
        d.push(new Rf());
      }
      f = 0;
      for (var g = c[4]; f < g.length; f++) {
        var h = d[g[f].i];
        h.ⲆⵠΔᐃΔ = g[f].n;
        h.ⵠΔᐃⵠ = g[f].s;
        h.ΔⵠΔΔⵠ = g[f].a;
        h.ΔⲆᐃΔΔ = g[f].c;
        h.ΔⵠᐃᐃΔ = g[f].b;
        h.ᐃⵠΔΔⲆ = g[f].d;
        h.ⵠᐃᐃΔΔΔⵠ = g[f].g;
        h.level = g[f].l;
        h.ⲆⲆⲆⲆⲆ = ΔⵠΔᐃ.ⵠᐃⵠΔⲆᐃᐃ(g[f].p);
        h.ⲆⲆΔⲆⲆ = true;
        if (pf === 1) {
          h.ⲆⵠΔᐃΔ += "|" + g[f].i;
        }
      }
      Dx.ᐃⵠᐃᐃⲆ.sort();
      if (Cx.mode === 1 && Cx.ΔΔΔᐃ[Dx.id].ⲆⵠΔᐃΔ === "spectator") {
        Dx.ⵠⲆⵠᐃΔⲆᐃ = true;
      } else {
        Dx.ⵠⲆⵠᐃΔⲆᐃ = ns;
      }
      if (Cx.mode === 2 && Cx.ΔΔΔᐃ[Dx.id].ⵠΔᐃⵠ === 0) {
        Dx.ⵠᐃⲆⵠᐃ = true;
      } else {
        Dx.ⵠᐃⲆⵠᐃ = false;
      }
      if (Cx.mode === 3 && Cx.ΔΔΔᐃ[Dx.id].ⵠΔᐃⵠ === 0) {
        Dx.ΔΔΔᐃⵠⲆᐃ = D;
      } else {
        Dx.ΔΔΔᐃⵠⲆᐃ = false;
      }
      ⲆᐃᐃΔ.set("starve_token", Dx.ΔᐃⵠΔⲆ);
      if (c[12] === 0) {
        Dx.ⵠⵠⵠΔⵠ.ⵠᐃΔⵠΔ = 0;
        Fx.ⲆⵠΔΔ.restore(c[17]);
        var i = c[14];
        if (i[29]) {
          Dx.ᐃᐃᐃΔ.ⲆᐃⲆᐃᐃⲆΔ(1, 0);
        }
        for (f = 0; i.length > f; f++) {
          if (i[f]) {
            if (f == 29) {
              continue;
            }
            if (f == 7) {
              continue;
            }
            this.ᐃⵠⵠⵠⲆᐃᐃ([0, f, i[f]]);
          }
        }
        Dx.ⵠⵠⵠΔⵠ.open = false;
      } else {
        if (Cx.mode === 4) {
          this.ᐃⵠⵠⵠⲆᐃᐃ([0, 238, 1]);
        } else if (Cx.mode === 3) {
          if (Dx.ΔΔΔᐃⵠⲆᐃ) {
            this.ᐃⵠⵠⵠⲆᐃᐃ([0, 190, 4]);
          } else {
            this.ᐃⵠⵠⵠⲆᐃᐃ([0, 191, 3]);
          }
        }
        if (Cx.mode === 0 || Cx.mode === 3 || Cx.mode === 7 || Cx.mode === 4) {
          Dx.ⵠⵠⵠΔⵠ.ⵠᐃΔⵠΔ = new Date().getTime();
          Dx.ⵠⵠⵠΔⵠ.open = true;
          Dx.ⵠⵠⵠΔⵠ.value = c[13];
          Fx.ⵠⵠⵠΔⵠ.ᐃⲆᐃⵠⵠ();
        } else {
          Dx.ⵠⵠⵠΔⵠ.ⵠᐃΔⵠΔ = 0;
          Dx.ⵠⵠⵠΔⵠ.open = fh;
          Dx.ⵠⵠⵠΔⵠ.value = 0;
        }
        Dx.ⵠᐃΔⵠΔⵠⵠ = c[12].toString();
      }
      Dx.ΔⲆⲆᐃΔ.enabled = c[6];
      Dx.ΔⲆⲆᐃΔ.ⵠᐃΔⵠΔ = -1;
      Dx.ΔⲆⲆᐃΔ.label = null;
      Dx.ΔⲆⲆᐃΔ.now = -1;
      ⲆᐃᐃΔ.set("starve_token_id", Dx.ⵠᐃΔⵠΔⵠⵠ);
      if (Dx.reconnect.enabled) {
        Dx.reconnect.rotate = 0;
        Dx.reconnect.enabled = ns;
      } else {
        zx.ᐃⲆᐃΔΔ(Fx.ⵠᐃⲆᐃᐃ);
        if (ga) {
          ga("send", "event", "Game", "play", "S" + zx.ⵠΔᐃⵠ + "A" + zx.ΔⵠΔΔⵠ);
        }
      }
    };
    this.connect = function () {
      b.ⲆⵠᐃᐃⵠⵠΔ = 0;
      b.ΔⲆⵠΔⵠⲆⲆ();
    };
    this.ΔⵠⵠⲆⵠᐃᐃ = [];
    this.ⵠⵠᐃⲆᐃᐃⵠⲆΔ = function (c) {
      const d = b.ⵠⵠΔⲆΔ.filter(a => a.gm === c);
      const f = {};
      for (let a = 0; d.length > a; a++) {
        const b = d[a];
        const c = b.r;
        if (c !== xh) {
          if (Ra === f[c]) {
            f[c] = [];
          }
          f[c].push(b);
        }
      }
      function g(d) {
        b.ΔⵠⵠⲆⵠᐃᐃ[c] = d;
        const g = f[d];
        const h = g[Math.floor(Math.random() * g.length)];
        b.ⲆᐃⵠΔⲆⲆⵠ({
          domain: yf,
          is_tls: 1,
          id: h.id,
          p: h.p
        });
      }
      if (b.ΔⵠⵠⲆⵠᐃᐃ[c] !== Ma) {
        g(b.ΔⵠⵠⲆⵠᐃᐃ[c]);
        return;
      }
      let a = 1;
      function h(b) {
        const c = new e.XMLHttpRequest();
        const d = b[0];
        const f = d.p;
        const i = d.r;
        const j = f[Math.floor(Math.random() * f.length)];
        c.open("GET", "https://" + j + "." + yf + "/", cg);
        c.onreadystatechange = function () {
          if (c.readyState === 4) {
            if (a === 0) {
              return;
            }
            a = 0;
            g(i);
          }
        };
        c.send();
      }
      for (let a in f) {
        h(f[a]);
      }
      e.setTimeout(function () {
        if (a === 0) {
          return;
        }
        a = 0;
        const b = e.Object.keys(f);
        g(b[Math.floor(b.length * Math.random())]);
      }, 5000);
    };
    this.ⵠⵠⵠⵠⵠⵠⲆᐃⵠ = function () {
      let a = Df.ΔⵠⵠⲆΔⵠΔ[b.ᐃⲆΔⲆⵠ];
      console.log(undefined, Xq, undefined);
      let c = b.ⵠⲆΔΔᐃΔⵠ[b.ᐃⲆΔⲆⵠ];
      let d = b.ⵠⵠΔⲆΔ.find(b => b.gm == a && b.idx == c);
      if (fk === d) {
        b.ⵠⵠᐃⲆᐃᐃⵠⲆΔ(a);
      } else {
        b.ⲆᐃⵠΔⲆⲆⵠ({
          domain: yf,
          is_tls: 1,
          id: d.id,
          p: d.p
        });
      }
    };
    this.ΔⲆⵠΔⵠⲆⲆ = function () {
      console.log(undefined);
      if (Mw !== undefined && zf !== undefined) {
        console.log(undefined, fk, xh);
        b.ⲆᐃⵠΔⲆⲆⵠ({
          domain: yf,
          is_tls: 1,
          id: zf + Mw,
          p: b.ⲆⲆΔⲆⲆⲆⲆ[zf]
        });
        return;
      }
      if (Tf === undefined) {
        b.ⵠⵠⵠⵠⵠⵠⲆᐃⵠ();
      } else {
        b.ⲆᐃⵠΔⲆⲆⵠ({
          domain: Tf.domain,
          is_tls: Tf.ssl,
          id: Tf.id,
          p: [Tf.p]
        });
      }
    };
    this.ⲆᐃⵠΔⲆⲆⵠ = function (c) {
      let d = c.domain;
      let f = c.is_tls;
      let g = c.id;
      let a = c.p;
      let i = a[Math.floor(Math.random() * a.length)];
      let j = f ? "wss://" + i + "." + d + "/" + g : "ws://" + d;
      console.log(undefined, ar);
      b.ᐃⲆᐃᐃ = new e.WebSocket(j);
      b.ᐃⲆᐃᐃ.binaryType = "arraybuffer";
      b.ᐃⲆᐃᐃ.ⲆⲆᐃᐃΔ = b.ⲆⲆᐃᐃΔ;
      b.ᐃⲆᐃᐃ.onmessage = function (a) {
        if (b.ⲆⲆᐃᐃΔ == b.ⲆⲆᐃᐃΔ) {
          if (typeof a.data == "string") {
            var c = JSON.parse(a.data);
            switch (c[0]) {
              case 0:
                b.ᐃΔⲆⲆᐃ(c);
                break;
              case 1:
                b.ΔᐃⲆⵠⵠΔⲆ(c[1]);
                break;
              case 2:
                b.ᐃΔΔⲆᐃΔᐃⲆⲆ(c);
                break;
              case 3:
                b.ΔⵠᐃⵠⲆᐃⵠⵠⲆ(c);
                break;
              case 4:
                b.message(c[1]);
                break;
              case 5:
                b.ᐃⵠΔᐃΔⵠΔ(c);
                break;
              case 6:
                b.ᐃⲆⲆΔⵠⵠⵠ(c[1]);
            }
          } else {
            var d = function (b, c, d) {
              const f = new Uint8Array(b);
              const g = f.length;
              let h;
              let i;
              let j = Nw[g];
              if (j === undefined) {
                Af += g * 2;
                if (Af < 65535) {
                  h = oj(Di(g));
                } else {
                  Af = g;
                  for (let a = 0; a < Nw.length; a++) {
                    if (Nw[a] !== or) {
                      const b = Nw[a][0];
                      Nw[a] = undefined;
                      ge(b);
                    }
                  }
                  h = oj(Di(g));
                  tj();
                }
                i = Ak(h);
                Nw[g] = [h, i];
              } else {
                h = j[0];
                i = j[1];
              }
              for (let a = 0; f.length > a; a++) {
                i[a] = f[a];
              }
              Ui(h, c, d);
              for (let a = 0; a < f.length; a++) {
                f[a] = i[a];
              }
              return f;
            }(a.data, Dx.ᐃⵠᐃᐃⲆΔᐃ, Dx.ᐃⲆᐃⲆᐃΔⵠⵠⵠ);
            var f = d.buffer;
            switch (d[0]) {
              case 0:
                b.ⲆΔⵠ(f, d, ir);
                break;
              case 1:
                b.ⲆΔⵠ(f, d, true);
                break;
              case 2:
                b.ᐃⲆⲆᐃΔⲆⲆⲆⵠ();
                break;
              case 3:
                b.ᐃⵠⵠⵠⲆᐃᐃ(new Uint16Array(f));
                break;
              case 4:
                b.ᐃⲆⵠⵠⵠΔΔᐃΔ();
                break;
              case 5:
                b.ⵠⲆᐃⲆᐃⵠⵠᐃⵠ();
                break;
              case 6:
                b.ᐃⵠⲆⲆᐃⲆᐃᐃᐃ();
                break;
              case 7:
                b.ⲆⵠⲆⲆᐃᐃΔᐃᐃ(f);
                break;
              case 8:
                b.ᐃⵠᐃΔᐃⲆⵠΔᐃ(d[1]);
                break;
              case 9:
                b.ⲆΔⵠΔᐃᐃΔΔᐃ(d[1]);
                break;
              case 10:
                b.ΔΔⲆᐃᐃΔⲆ();
                break;
              case 11:
                b.ᐃᐃᐃᐃⵠᐃⲆ(d[1], d[2]);
                break;
              case 12:
                b.ⲆᐃΔᐃΔ(d[1]);
                break;
              case 13:
                b.ΔⵠΔΔᐃᐃᐃΔᐃ(d, f);
                break;
              case 14:
                b.ⲆΔᐃⵠⵠΔⵠ();
                break;
              case 15:
                b.ⵠⲆᐃⲆⵠⵠᐃⲆⵠ(d[1]);
                break;
              case 16:
                b.ΔⲆⵠⲆ(d[1], d[2], d[3], d[4], d[5], d[6], d[7]);
                break;
              case 17:
                b.ⵠᐃΔΔᐃⵠΔⲆⵠ(f);
                break;
              case 18:
                b.ΔⲆᐃΔⵠᐃᐃΔⲆ();
                break;
              case 19:
                b.ΔΔᐃⲆᐃ(d[1]);
                break;
              case 20:
                b.ⲆᐃⵠⵠΔᐃᐃⲆΔ();
                break;
              case 21:
                b.ⵠΔᐃⲆ(f);
                break;
              case 22:
                b.ⲆⵠᐃⵠᐃⲆⵠⲆⲆ(d[1]);
                break;
              case 23:
                b.ᐃΔⵠᐃⲆⲆᐃΔⲆ(f);
                break;
              case 24:
                b.ΔⵠⵠΔᐃⵠⵠᐃᐃ(d[1]);
                break;
              case 25:
                b.ΔᐃᐃⲆΔⵠΔⲆΔ(d[1], f);
                break;
              case 26:
                b.ΔΔᐃΔⲆ(d);
                break;
              case 27:
                b.ⵠⵠⲆⵠΔⲆⵠⲆᐃ();
                break;
              case 28:
                b.ΔⲆⲆᐃΔ(d[1]);
                break;
              case 29:
                b.ΔᐃᐃᐃⵠᐃⵠΔⵠ();
                break;
              case 30:
                b.ⲆⵠᐃᐃⲆⲆᐃΔΔ();
                break;
              case 31:
                b.ᐃᐃΔⵠΔⲆᐃΔᐃ(d);
                break;
              case 32:
                b.ΔⲆⲆⵠⵠⵠΔᐃᐃ(d[1]);
                break;
              case 33:
                b.ᐃⲆⲆᐃⵠⵠⲆⵠⲆ(d[1]);
                break;
              case 34:
                b.ⵠΔⵠⲆⵠΔⲆΔⵠ();
                break;
              case 35:
                b.ᐃⲆⲆⲆᐃⲆⲆΔᐃ(d[1]);
                break;
              case 36:
                b.ᐃᐃᐃⲆⵠᐃⲆ(d[1]);
                break;
              case 37:
                b.ᐃⵠᐃⲆⲆⵠⲆⲆⵠ(d[1], d[2]);
                break;
              case 38:
                b.ⲆⵠⲆΔⵠΔΔⵠⵠ(d[1]);
                break;
              case 39:
                b.ⲆᐃΔⵠⲆⵠⵠⲆⵠ(d[1]);
                break;
              case 40:
                b.ΔⲆⲆᐃΔᐃⵠⵠΔ();
                break;
              case 41:
                b.ᐃⵠⵠⲆⵠᐃΔⲆⲆ(d);
                break;
              case 42:
                b.ⵠΔᐃⵠΔᐃΔΔⲆ(d[1]);
                break;
              case 43:
                b.ⵠⵠᐃⲆⲆⵠⲆΔⵠ(d[1]);
                break;
              case 44:
                b.claimed(d[1]);
                break;
              case 45:
                b.ⲆⵠΔᐃⵠᐃⲆᐃᐃ(d[1]);
                break;
              case 46:
                b.ⲆᐃΔⵠⵠᐃᐃⵠⵠ(d[1]);
                break;
              case 47:
                b.ΔΔᐃᐃⲆ(d[1]);
                break;
              case 48:
                b.ⵠⲆⲆⵠΔⵠⲆⲆⵠ();
                break;
              case 50:
                b.ΔⲆⲆᐃᐃⵠᐃⲆⲆ(d[1], d[2], d[3]);
                break;
              case 51:
                b.ΔᐃΔⵠᐃⲆⵠⲆⵠ();
                break;
              case 52:
                b.ⵠⲆⵠᐃΔⵠᐃⲆᐃ(d[1]);
                break;
              case 53:
                b.ⵠΔⲆⵠΔⲆⵠΔⲆ(d[1]);
                break;
              case 54:
                b.ΔᐃⲆⲆΔᐃΔⵠΔ();
                break;
              case 55:
                b.ⵠΔΔᐃΔΔⲆⵠⲆ(d[1]);
                break;
              case 56:
                b.ⲆΔᐃⲆⲆⲆᐃΔⲆ(d[1]);
                break;
              case 57:
                b.ΔⲆⲆⵠⲆⲆᐃΔⵠ();
                break;
              case 58:
                b.ⵠⲆᐃᐃⵠⲆⲆᐃⵠ();
                break;
              case 59:
                b.ⵠᐃᐃⲆᐃΔΔᐃΔ();
                break;
              case 60:
                b.ⲆΔⲆⲆⲆⵠΔⲆⵠ();
                break;
              case 61:
                Dx.ᐃΔᐃⲆ.ⲆⵠⵠᐃⲆᐃⵠ = 0.2;
                Dx.ᐃΔᐃⲆ.ⵠᐃΔⵠΔ = 3;
                break;
              case 62:
                b.ⵠⲆⲆᐃⲆᐃΔΔⵠ(new Uint16Array(f));
                break;
              case 63:
                b.ⲆⵠⲆⵠⲆᐃᐃⲆΔ();
                break;
              case 64:
                b.ⵠᐃᐃΔᐃᐃᐃⵠⲆ();
                break;
              case 65:
                b.ᐃᐃⵠΔᐃΔⲆΔⲆ();
                break;
              case 66:
                b.ⲆᐃⲆⲆᐃⵠⲆⵠⲆ();
                break;
              case 67:
                b.ΔᐃⲆᐃⵠᐃⲆⲆⵠ(d[1]);
                break;
              case 68:
                b.ⵠⵠᐃΔⵠᐃΔⵠⵠ(d[1]);
                break;
              case 69:
                b.ΔⵠΔΔΔⵠⵠ(d[1]);
                break;
              case 70:
                b.ᐃⵠᐃⵠΔᐃΔⵠΔ(d[1]);
                break;
              case 71:
                b.ΔΔᐃⵠⲆ(d[1]);
            }
          }
        }
      };
      b.ᐃⲆᐃᐃ.onerror = function () {
        if (Dx.reconnect.enabled) {
          e.setTimeout(b.timeout, 2500);
        }
      };
      this.ᐃⲆᐃᐃ.onopen = function () {
        clearTimeout(b.Δⵠⵠᐃⵠ);
        Dx.ΔᐃᐃΔⵠΔⵠ = Dx.ΔᐃᐃΔⵠΔⵠ || ΔⵠΔᐃ.ⵠᐃΔΔⵠΔⵠ("token");
        ΔⵠΔᐃ.ΔᐃⵠⲆⲆΔᐃ().then(a => {
          b.ᐃⲆᐃᐃ[mf](Qq[Jq].stringify([zx.ⲆⵠΔᐃΔ.input.value, screen.width + 200, screen.height + 200, 52, Dx.ΔᐃⵠΔⲆ, Dx.ⵠᐃΔⵠΔⵠⵠ, Dx.reconnect.enabled ? 1 : 0, zx.ⵠΔᐃⵠ, zx.ΔⵠΔΔⵠ, zx.ᐃⲆⲆΔⲆ, zx.ΔⵠᐃᐃΔ, zx.ΔⲆᐃΔΔ, zx.ᐃⵠΔΔⲆ, Xx === kn ? 0 : Xx, Wx === undefined ? 0 : Wx.substring(Wx.length - 50), Cf, Dx.ΔᐃᐃΔⵠΔⵠ, a, Dx.ⵠᐃᐃⲆᐃΔⵠ, Dx.ⵠΔⵠᐃᐃⵠⲆ]));
          Dx.ΔᐃᐃΔⵠΔⵠ = zo;
          Dx.ⵠᐃᐃⲆᐃΔⵠ = undefined;
          Dx.ⵠΔⵠᐃᐃⵠⲆ = Ao;
          b.Δⵠⵠᐃⵠ = setTimeout(b.timeout, 2000);
        });
      };
    };
  }();
  var Cx;
  var Dx;
  var Ex;
  var Fx = {
    ⲆΔΔⲆⲆ: false
  };
  var Gx = new function () {
    this.ⵠᐃⲆᐃᐃ = 0;
    this.loaded = 0;
    this.transition = 0;
    this.ⵠⵠⵠΔⲆⵠⲆ = function (a) {
      return a / Cx.w * 100;
    };
    this.ⲆΔⵠΔⵠΔᐃ = function (a) {
      return a / Cx.ᐃΔΔ * 100;
    };
    this.ᐃΔⵠⵠⵠᐃⵠ = function (a, b) {
      a = this.ⵠⵠⵠΔⲆⵠⲆ(a) - this.ⵠΔⵠⵠⵠ.x;
      return this.ⵠΔⵠⵠⵠ.x + b * a;
    };
    this.ⵠΔᐃⵠⲆⲆⲆ = function (a, b) {
      a = Math.abs(this.ⲆΔⵠΔⵠΔᐃ(a) - this.ⵠΔⵠⵠⵠ.y);
      return this.ⵠΔⵠⵠⵠ.y + b * a;
    };
    this.sample = {};
    this.ⵠᐃᐃΔᐃ = {};
    this.ΔΔᐃᐃ = {};
    this.ⵠᐃΔⲆⲆΔΔ = function (b, c, d, f) {
      for (var g = 0; c.length > g; g++) {
        var h = c[g];
        if (!b.playing(h)) {
          b.pos(d, f, -0.5, h);
          b.play(h);
          return Kg;
        }
      }
      return Ee;
    };
    this.ᐃΔⲆΔ = function (a, b, c, d) {
      c = this.ᐃΔⵠⵠⵠᐃⵠ(c, ΔⵠΔΔⲆ.ⲆᐃΔⵠᐃⲆᐃ);
      d = this.ⵠΔᐃⵠⲆⲆⲆ(d, ΔⵠΔΔⲆ.ⲆᐃΔⵠᐃⲆᐃ);
      console.log("HIT", a, b, c, d, ΔⵠΔΔⲆ.ⲆᐃΔⵠᐃⲆᐃ);
      if (a) {
        if (b === 1) {
          this.ⵠᐃΔⲆⲆΔΔ(this.ΔΔᐃᐃ.ΔΔⲆᐃⲆᐃⵠ, this.sample.ΔΔⲆᐃⲆᐃⵠ, c, d);
        } else if (b === 0) {
          this.ⵠᐃΔⲆⲆΔΔ(this.ΔΔᐃᐃ.ⲆⵠⲆᐃⲆⲆΔ, this.sample.ⲆⵠⲆᐃⲆⲆΔ, c, d);
        }
      } else {
        this.ⵠᐃΔⲆⲆΔΔ(this.ΔΔᐃᐃ.ᐃⲆⲆᐃᐃ, this.sample.ᐃⲆⲆᐃᐃ, c, d);
      }
    };
    this.ⵠΔⵠⵠⵠ = {
      x: 0,
      y: 0
    };
    this.ᐃᐃᐃⵠⵠΔᐃ = {
      y: 0,
      x: 0
    };
    this.ΔᐃⲆΔⵠ = {};
    this.ΔΔΔᐃ = [];
    this.ⵠⲆΔᐃⵠ = function (a, b) {
      for (var c in this.ΔᐃⲆΔⵠ) {
        var d = this.ΔᐃⲆΔⵠ[c];
        d.check(a);
        if (d.ⲆⲆᐃⲆⲆΔΔ) {
          if (Cx.ⲆⲆᐃⵠⲆ.now < 460000) {
            d.ⲆΔⲆᐃΔ();
          }
          if (b) {
            d.ᐃⲆⲆ(a, this.ⵠΔⵠⵠⵠ);
          }
          if (this.transition) {
            d.transition();
          }
        }
      }
      this.transition &&= 0;
    };
    this.ⲆⲆᐃΔⲆᐃΔᐃⲆ = function () {
      var a = [];
      for (var b = 0; b < this.ΔΔΔᐃ.length; b++) {
        if ((f = this.ΔΔΔᐃ[b]).ⵠΔⲆᐃⲆⲆΔ) {
          a.push(b);
        } else if (!f.ⵠΔⲆᐃⲆⲆΔ && !Cx.ᐃⵠΔΔᐃ[f.ᐃΔᐃΔ]) {
          f.ⵠᐃⲆⲆⲆᐃⵠ();
          a.push(b);
        }
      }
      var c = Cx.ⲆΔⵠ[0];
      var d = 0;
      for (b = 0; c.length > b && d < a.length; b++) {
        var f = c[b];
        if ((Cx.mode != 1 || Cx.ΔΔΔᐃ[f.id].ⲆⵠΔᐃΔ !== "spectator") && f.ⵠⲆⵠᐃⵠ === -1 && Dx.ᐃΔᐃΔ !== f.ᐃΔᐃΔ) {
          this.ΔΔΔᐃ[a[d]].ᐃⲆᐃⵠⵠ(f.ᐃΔᐃΔ);
          d++;
        }
      }
    };
    this.ⲆΔΔⲆΔⲆⲆⵠᐃ = function () {
      this.ⲆⲆᐃΔⲆᐃΔᐃⲆ();
      for (var a = 0; this.ΔΔΔᐃ.length > a; a++) {
        var b = this.ΔΔΔᐃ[a];
        if (!b.ⵠΔⲆᐃⲆⲆΔ && b.check()) {
          b.ᐃⲆⲆ();
        }
      }
    };
    this.ΔⲆΔᐃᐃⵠⲆⲆⲆ = function (a) {
      if (a.x === this.ᐃᐃᐃⵠⵠΔᐃ.x && this.ᐃᐃᐃⵠⵠΔᐃ.y === a.y) {
        return 0;
      } else {
        this.ᐃᐃᐃⵠⵠΔᐃ.x = a.x;
        this.ᐃᐃᐃⵠⵠΔᐃ.y = a.y;
        this.ⵠΔⵠⵠⵠ.x = this.ⵠⵠⵠΔⲆⵠⲆ(a.x);
        this.ⵠΔⵠⵠⵠ.y = this.ⲆΔⵠΔⵠΔᐃ(a.y);
        Howler.pos(this.ⵠΔⵠⵠⵠ.x, this.ⵠΔⵠⵠⵠ.y, 0);
        return 1;
      }
    };
    this.ᐃⲆⲆⲆⲆᐃⵠⵠⵠ = function () {
      if (this.ⵠᐃⲆᐃᐃ && this.loaded) {
        var a = Cx.ᐃⵠΔΔᐃ[Dx.ᐃΔᐃΔ];
        if (a) {
          a.ⵠⲆⵠᐃⵠ = 0;
          var b = this.ΔⲆΔᐃᐃⵠⲆⲆⲆ(a);
          if (Cx.mode !== 2 && Cx.mode !== 4 && Cx.mode !== 5) {
            this.ⵠⲆΔᐃⵠ(a, b);
          }
          this.ⲆΔΔⲆΔⲆⲆⵠᐃ();
        }
      }
    };
    this.ᐃⲆᐃᐃΔᐃⵠⲆⵠ = function () {
      for (var b in qx) {
        var c = qx[b];
        if (typeof c === "object" && c.path) {
          c.ΔⵠΔⲆᐃ = new Howl({
            src: c.path,
            volume: 0,
            sprite: c.ⲆⲆ
          });
        }
        for (var d in c.sample) {
          var f = c.sample[d];
          var g = [];
          console.log(undefined);
          for (var h = 0; h < f; h++) {
            var j = c.ΔⵠΔⲆᐃ.play(d);
            c.ΔⵠΔⲆᐃ.stop(j);
            c.ΔⵠΔⲆᐃ.on("fade", function (a) {
              if (!this.volume(a)) {
                console.log(zo, Ao);
                this.stop(a);
              }
            }, j);
            g.push(j);
          }
          if (g.length > 1) {
            Gx.sample[d] = g;
          } else {
            Gx.sample[d] = g[0];
          }
          Gx.ΔΔᐃᐃ[d] = c.ΔⵠΔⲆᐃ;
        }
      }
    };
    this.ΔΔⵠⵠᐃᐃΔ = function (a, b, c) {
      for (var d = 0; d < a.length; d++) {
        b.volume(c, a[d]);
      }
    };
    this.ΔΔⵠΔᐃⵠᐃ = function (b, c, d, f, g, i) {
      var a = b;
      for (var j = 0; d > j; j++) {
        var k = a[j] = [];
        for (ⲆⵠⲆⲆ = 0; ⲆⵠⲆⲆ < f; ⲆⵠⲆⲆ++) {
          k[ⲆⵠⲆⲆ] = Gx.sample[g + ⲆⵠⲆⲆ][j];
          c.ΔⵠΔⲆᐃ.volume(i, k[ⲆⵠⲆⲆ]);
        }
      }
    };
    this.ᐃⲆᐃⵠⵠ = function () {
      Gx.ᐃⲆᐃᐃΔᐃⵠⲆⵠ();
      Gx.ⵠᐃᐃΔᐃ.ⵠⵠⲆⵠⲆᐃᐃ = [];
      Gx.ⵠᐃᐃΔᐃ.ⲆⵠΔⲆⵠ = [];
      Gx.ⵠᐃᐃΔᐃ.ΔⲆΔᐃᐃ = [];
      Gx.ΔΔⵠΔᐃⵠᐃ(Gx.ⵠᐃᐃΔᐃ.ⵠⵠⲆⵠⲆᐃᐃ, qx.ᐃⲆⵠⵠᐃΔᐃ, 8, 3, "p", 0.15);
      Gx.ΔΔⵠΔᐃⵠᐃ(Gx.ⵠᐃᐃΔᐃ.ⲆⵠΔⲆⵠ, qx.ᐃᐃᐃᐃⲆⲆⲆ, 8, 4, "w", 0.15);
      Gx.ΔΔⵠΔᐃⵠᐃ(Gx.ⵠᐃᐃΔᐃ.ΔⲆΔᐃᐃ, qx.ΔⲆᐃΔΔᐃⵠ, 8, 3, "d", 0.09);
      Gx.ΔΔⵠⵠᐃᐃΔ(Gx.sample.ᐃⲆⲆᐃᐃ, Gx.ΔΔᐃᐃ.ᐃⲆⲆᐃᐃ, 0.15);
      Gx.ΔΔⵠⵠᐃᐃΔ(Gx.sample.ⲆⵠⲆᐃⲆⲆΔ, Gx.ΔΔᐃᐃ.ⲆⵠⲆᐃⲆⲆΔ, 0.2);
      Gx.ΔΔⵠⵠᐃᐃΔ(Gx.sample.ΔΔⲆᐃⲆᐃⵠ, Gx.ΔΔᐃᐃ.ΔΔⲆᐃⲆᐃⵠ, 1);
      Gx.ΔᐃⲆΔⵠ.ⵠⲆΔᐃⲆⲆᐃΔΔ = new rx(12, this.sample.ⲆΔᐃⲆΔⵠⵠ, this.sample.ΔᐃΔⲆᐃⵠⲆ, 5000, 0.05, 0.4, qx.ᐃᐃᐃᐃⲆᐃⲆ.ΔⵠΔⲆᐃ, 3000, {
        x: ts.ᐃⵠⲆⵠΔᐃΔ,
        y: ts.ᐃΔᐃⲆᐃⲆⵠ,
        w: Cx.w,
        ᐃΔΔ: Cx.ᐃΔΔ
      }, {
        x: ts.ᐃⵠⲆⵠΔᐃΔ - 2300,
        y: ts.ᐃΔᐃⲆᐃⲆⵠ - 4000,
        w: Cx.w,
        ᐃΔΔ: Cx.ᐃΔΔ
      }, {
        x: ts.ᐃⵠⲆⵠΔᐃΔ - 1500,
        y: ts.ᐃΔᐃⲆᐃⲆⵠ - 2000,
        w: Cx.w,
        ᐃΔΔ: Cx.ᐃΔΔ
      });
      Gx.ΔᐃⲆΔⵠ.ⵠᐃⵠΔⵠⵠⲆⲆᐃ = new rx(12, this.sample.ᐃⲆΔᐃⲆΔᐃ, this.sample.ΔΔΔᐃΔⵠΔ, 5000, 0.03, 0.25, qx.ᐃᐃᐃᐃⲆᐃⲆ.ΔⵠΔⲆᐃ, 3000, {
        x: 0,
        y: ts.ᐃΔᐃⲆᐃⲆⵠ + 800,
        w: ts.ᐃⵠⲆⵠΔᐃΔ - 2300,
        ᐃΔΔ: Cx.ᐃΔΔ
      }, {
        x: -100,
        y: ts.ᐃΔᐃⲆᐃⲆⵠ - 300,
        w: ts.ᐃⵠⲆⵠΔᐃΔ - 100,
        ᐃΔΔ: Cx.ᐃΔΔ
      }, {
        x: -100,
        y: ts.ᐃΔᐃⲆᐃⲆⵠ + 400,
        w: ts.ᐃⵠⲆⵠΔᐃΔ - 1400,
        ᐃΔΔ: Cx.ᐃΔΔ
      });
      Gx.ΔᐃⲆΔⵠ.ᐃⵠⲆᐃⲆⲆⲆ = new rx(12, this.sample.ΔⵠⲆⲆΔᐃᐃ, this.sample.ⲆⲆᐃΔᐃⲆᐃ, 5000, 0.01, 0.22, qx.ᐃᐃᐃᐃⲆᐃⲆ.ΔⵠΔⲆᐃ, 3000, {
        x: -100,
        y: -100,
        w: Cx.w + 200,
        ᐃΔΔ: ts.ᐃΔᐃⲆᐃⲆⵠ - 1000
      }, {
        x: -100,
        y: -100,
        w: Cx.w + 200,
        ᐃΔΔ: ts.ᐃΔᐃⲆᐃⲆⵠ + 600
      }, {
        x: -100,
        y: -100,
        w: Cx.w + 200,
        ᐃΔΔ: ts.ᐃΔᐃⲆᐃⲆⵠ + 100
      });
      for (var a = 0; a < 8; a++) {
        Gx.ΔΔΔᐃ[a] = new xx(a);
      }
      Gx.ΔΔΔᐃ[0].ᐃⲆᐃⵠⵠ(Dx.ᐃΔᐃΔ);
      Gx.loaded = 1;
    };
    this.ΔⲆⲆΔΔᐃⲆⲆᐃ = function () {
      if (!this.transition && Cx.ⲆⲆᐃⵠⲆ.now < 460000) {
        this.transition = 1;
      }
    };
    this.ᐃⲆᐃΔΔ = function () {
      if (this.ⵠᐃⲆᐃᐃ && this.loaded) {
        for (var a in Gx.sample) {
          var b = Gx.sample[a];
          if (typeof b === "object") {
            for (var c = 0; c < b.length; c++) {
              Gx.ΔΔᐃᐃ[a].stop(b[c]);
            }
          } else {
            Gx.ΔΔᐃᐃ[a].stop(b);
          }
        }
        for (c = 0; Gx.ΔΔΔᐃ.length > c; c++) {
          Gx.ΔΔΔᐃ[c].ⵠᐃⲆⲆⲆᐃⵠ();
        }
      }
    };
    this.select = function () {
      if (Gx.ⵠᐃⲆᐃᐃ) {
        Gx.ᐃⲆᐃΔΔ();
      } else {
        if (!Gx.loaded) {
          Gx.ᐃⲆᐃⵠⵠ();
        }
        Gx.ΔΔΔᐃ[0].ᐃΔᐃΔ = Dx.ᐃΔᐃΔ;
        Gx.ΔΔΔᐃ[0].ⵠΔⲆᐃⲆⲆΔ = 0;
        Gx.ΔⲆⲆΔΔᐃⲆⲆᐃ();
      }
      Gx.ⵠᐃⲆᐃᐃ = !Gx.ⵠᐃⲆᐃᐃ;
    };
  }();
  var Hx = new function () {
    this.ᐃᐃᐃⵠⵠⲆᐃ = function () {
      this.ⵠᐃⵠᐃΔ = 81;
      this.ⵠᐃᐃⵠᐃ = 68;
      this.ⵠⲆΔΔⲆ = 90;
      this.ⵠΔᐃⵠⵠⵠΔ = 83;
    };
    this.ⵠᐃᐃⲆᐃᐃⲆ = function () {
      this.ⵠᐃⵠᐃΔ = 65;
      this.ⵠᐃᐃⵠᐃ = 68;
      this.ⵠⲆΔΔⲆ = 87;
      this.ⵠⲆΔⲆΔ = 83;
    };
    this.ΔⵠⵠⲆᐃ = 0;
    this.ⵠΔᐃⵠⵠⵠΔ = 1;
    this.ᐃΔΔᐃᐃⲆⵠ = 49;
    this.ⵠΔⲆⵠᐃᐃᐃ = 50;
    this.ΔⲆⲆΔⲆⲆⵠ = 51;
    this.ΔⵠⵠⲆⲆⲆΔ = 52;
    this.ΔⵠⵠⲆⵠΔⲆⵠⲆ = 53;
    this.ᐃⵠᐃⲆⵠΔΔ = 17;
    this.ⲆΔⵠⵠⵠⲆⵠ = 37;
    this.ΔΔⲆⵠᐃᐃⲆ = 39;
    this.ⲆΔΔⵠΔᐃᐃ = 38;
    this.ⵠⲆΔⲆΔⲆΔ = 40;
    this.ⲆᐃⲆⲆΔΔᐃ = 32;
    this.ⵠᐃᐃⵠᐃΔⲆ = 82;
    this.ᐃΔᐃΔⵠΔⲆ = 71;
    this.ⵠΔΔΔⲆᐃΔ = 86;
    this.ΔᐃΔⵠᐃⲆΔ = 66;
    this.ⵠᐃᐃⲆᐃᐃⲆ();
    this.keys = new Array(255);
    for (var a = 0; a < 255; a++) {
      this.keys[a] = this.ΔⵠⵠⲆᐃ;
    }
    this.up = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      this.keys[b] = this.ΔⵠⵠⲆᐃ;
    };
    this.down = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      if (this.ⵠᐃⵠᐃΔ == b || this.ⲆΔⵠⵠⵠⲆⵠ == b) {
        this.ΔΔΔⵠᐃⵠⲆ();
      } else if (b == this.ⵠⲆΔΔⲆ || this.ⲆΔΔⵠΔᐃᐃ == b) {
        this.ⲆᐃΔⵠΔⲆΔ();
      } else if (b == this.ⵠΔᐃⵠⵠⵠΔ || b == this.ⲆⲆᐃᐃⲆⵠᐃΔᐃ) {
        this.ⵠᐃᐃᐃⲆⵠⵠ();
      } else if (this.ⵠᐃᐃⵠᐃ == b || b == this.ΔΔⲆⵠᐃᐃⲆ) {
        this.ⲆⵠΔⵠⵠⵠΔ();
      }
      this.keys[b] = this.ⵠΔᐃⵠⵠⵠΔ;
      return b;
    };
    this.ΔΔΔⵠᐃⵠⲆ = function () {
      this.keys[this.ⵠᐃᐃⵠᐃ] = this.ΔⵠⵠⲆᐃ;
      this.keys[this.ΔΔⲆⵠᐃᐃⲆ] = this.ΔⵠⵠⲆᐃ;
    };
    this.ⲆⵠΔⵠⵠⵠΔ = function () {
      this.keys[this.ⵠᐃⵠᐃΔ] = this.ΔⵠⵠⲆᐃ;
      this.keys[this.ⲆΔⵠⵠⵠⲆⵠ] = this.ΔⵠⵠⲆᐃ;
    };
    this.ⵠᐃᐃᐃⲆⵠⵠ = function () {
      this.keys[this.ⵠⲆΔΔⲆ] = this.ΔⵠⵠⲆᐃ;
      this.keys[this.ⲆΔΔⵠΔᐃᐃ] = this.ΔⵠⵠⲆᐃ;
    };
    this.ⲆᐃΔⵠΔⲆΔ = function () {
      this.keys[this.ⵠⲆΔⲆΔ] = this.ΔⵠⵠⲆᐃ;
      this.keys[this.ⵠⲆΔⲆΔⲆΔ] = this.ΔⵠⵠⲆᐃ;
    };
    this.ⵠᐃᐃΔΔᐃΔ = function () {
      this.keys[this.ⵠᐃᐃⵠᐃ] = this.ΔⵠⵠⲆᐃ;
      this.keys[this.ΔΔⲆⵠᐃᐃⲆ] = this.ΔⵠⵠⲆᐃ;
      this.keys[this.ⵠᐃⵠᐃΔ] = this.ΔⵠⵠⲆᐃ;
      this.keys[this.ⲆΔⵠⵠⵠⲆⵠ] = this.ΔⵠⵠⲆᐃ;
      this.keys[this.ⵠⲆΔΔⲆ] = this.ΔⵠⵠⲆᐃ;
      this.keys[this.ⲆΔΔⵠΔᐃᐃ] = this.ΔⵠⵠⲆᐃ;
      this.keys[this.ⵠⲆΔⲆΔ] = this.ΔⵠⵠⲆᐃ;
      this.keys[this.ⵠⲆΔⲆΔⲆΔ] = this.ΔⵠⵠⲆᐃ;
    };
    this.ΔⵠⲆⲆⲆΔⲆ = function () {
      return this.keys[this.ⵠᐃⵠᐃΔ] || this.keys[this.ⲆΔⵠⵠⵠⲆⵠ];
    };
    this.ⲆΔⵠᐃΔΔⲆ = function () {
      return this.keys[this.ⵠᐃᐃⵠᐃ] || this.keys[this.ΔΔⲆⵠᐃᐃⲆ];
    };
    this.ⵠΔⲆᐃΔⲆᐃ = function () {
      return this.keys[this.ⵠⲆΔΔⲆ] || this.keys[this.ⲆΔΔⵠΔᐃᐃ];
    };
    this.ⵠⵠⵠΔΔΔⲆ = function () {
      return this.keys[this.ⵠⲆΔⲆΔ] || this.keys[this.ⵠⲆΔⲆΔⲆΔ];
    };
    this.ⲆⲆⵠᐃⲆᐃᐃⵠⵠ = function () {
      return this.keys[this.ᐃⵠᐃⲆⵠΔΔ];
    };
    this.ΔⵠΔⲆΔⲆᐃⲆᐃ = function () {
      return this.keys[this.ᐃΔΔᐃᐃⲆⵠ];
    };
    this.ⵠᐃΔᐃᐃⲆⵠᐃᐃ = function () {
      return this.keys[this.ⵠΔⲆⵠᐃᐃᐃ];
    };
    this.ⵠᐃᐃᐃᐃⲆᐃⲆΔ = function () {
      return this.keys[this.ΔⲆⲆΔⲆⲆⵠ];
    };
    this.ΔⲆΔⲆΔᐃᐃᐃᐃ = function () {
      return this.keys[this.ΔⵠⵠⲆⲆⲆΔ];
    };
    this.ᐃΔⲆⵠⲆⵠⲆΔⲆ = function () {
      return this.keys[this.ⲆᐃⲆⲆΔΔᐃ];
    };
    this.ⵠⵠᐃⲆΔᐃⵠⵠΔ = function () {
      return this.keys[this.ⵠᐃᐃⵠᐃΔⲆ];
    };
    this.ΔΔⵠⲆᐃᐃⵠΔⲆ = function () {
      return this.keys[this.ᐃΔᐃΔⵠΔⲆ];
    };
    this.ᐃᐃᐃΔⲆΔΔΔᐃ = function () {
      return this.keys[this.ⵠΔΔΔⲆᐃΔ];
    };
    this.ⵠΔⲆΔΔⵠΔⵠⵠ = function () {
      return this.keys[this.ΔᐃΔⵠᐃⲆΔ];
    };
  }();
  var Ix = new function () {
    this.ⵠΔᐃⵠⵠⵠΔ = 0;
    this.ΔⵠⵠⲆᐃ = 1;
    this.IDLE = 2;
    this.ᐃⵠᐃⵠⲆᐃᐃ = 0;
    this.ⲆΔⲆⲆⵠᐃⵠⵠⲆ = 1;
    this.ᐃᐃⵠⵠ = {
      y: 0,
      x: 0
    };
    this.ΔΔᐃⲆⲆⵠᐃ = 0;
    this.ⵠⵠⲆᐃᐃᐃΔ = 0;
    this.angle = 0;
    this.state = this.IDLE;
    this.ΔⵠⲆᐃ = this.ᐃⵠᐃⵠⲆᐃᐃ;
    this.down = function () {
      this.state = this.ⵠΔᐃⵠⵠⵠΔ;
    };
    this.up = function () {
      this.state = this.ΔⵠⵠⲆᐃ;
    };
    this.ᐃⲆⲆ = function () {
      if (this.ᐃᐃⵠⵠ.x != this.ΔΔᐃⲆⲆⵠᐃ || this.ᐃᐃⵠⵠ.y != this.ⵠⵠⲆᐃᐃᐃΔ) {
        this.ΔΔᐃⲆⲆⵠᐃ = this.ᐃᐃⵠⵠ.x;
        this.ⵠⵠⲆᐃᐃᐃΔ = this.ᐃᐃⵠⵠ.y;
        return true;
      } else {
        return al;
      }
    };
  }();
  var Jx = 0;
  var Kx = 0;
  var Lx = new function (f, i, j) {
    this.Ⲇᐃ = f;
    this.Ⲇ = i;
    this.ⲆΔᐃⵠΔΔᐃ = {
      translate: {
        y: 0,
        x: 0
      },
      style: document.getElementById("loading").style,
      ᐃⲆⲆ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ⲆΔᐃⵠΔΔᐃ.style.position = "absolute";
    this.ⲆΔᐃⵠΔΔᐃ.style.display = "inline-block";
    this.ⲆΔᐃⵠΔΔᐃ.ᐃⲆⲆ();
    this.ⲆΔΔⲆⲆ = qg;
    this.stop = function () {
      this.ⲆΔΔⲆⲆ = false;
    };
    this.ΔⲆⵠΔⲆᐃⲆ = {
      total: 1
    };
    var k = this;
    function m() {}
    var n = 0;
    function o(a) {
      if (a.indexOf("normal-mode") !== -1 || a.indexOf("player0") !== -1) {
        return 1;
      } else if (a.indexOf("day-bag") !== -1 || a.indexOf("night-bag") !== -1 || a.indexOf("day-book") !== -1 || a.indexOf("night-book") !== -1 || a.indexOf("day-player") !== -1 || a.indexOf("night-player") !== -1 || a.indexOf("day-accessory") !== -1 || a.indexOf("night-accessory") !== -1 || a.indexOf("day-crate") !== -1 || a.indexOf("night-crate") !== -1 || a.indexOf("day-skin") !== -1 || a.indexOf("night-skin") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-rock") !== -1 || a.indexOf("night-rock") !== -1 || a.indexOf("day-flower") !== -1 || a.indexOf("night-flower") !== -1 || a.indexOf("day-leaf") !== -1 || a.indexOf("night-leaf") !== -1 || a.indexOf("day-herb") !== -1 || a.indexOf("night-herb") !== -1 || a.indexOf("day-shell") !== -1 || a.indexOf("night-shell") !== -1 || a.indexOf("day-hand-skin") !== -1 || a.indexOf("night-hand-skin") !== -1 || a.indexOf("bignight") !== -1 || a.indexOf("bigday") !== -1 || a.indexOf("bigzday") !== -1 || a.indexOf("bigznight") !== -1 || a.indexOf("tutorial-box") !== -1 || a.indexOf("tuto-") !== -1 || a.indexOf("-leaderboard-") !== -1 || a.indexOf("-lead-") !== -1 || a.indexOf("day-lava-") !== -1 || a.indexOf("night-lava-") !== -1 || a.indexOf("-click.png") !== -1 || a.indexOf("-in.png") !== -1 || a.indexOf("-fog") !== -1 || a.indexOf("-lava") !== -1 || a.indexOf("pebblecompo") !== -1 || a.indexOf("avatar-player") !== -1) {
        return 0;
      } else {
        return 1;
      }
    }
    this.ΔⵠᐃⲆⵠ = function () {
      k.ᐃⲆⲆ();
      if (++n == 40) {
        k.stop();
        m();
        return;
      }
      e.setTimeout(k.ΔⵠᐃⲆⵠ, 33);
    };
    this.ᐃⲆᐃΔΔ = function (a) {
      m = a;
      k.ΔⵠᐃⲆⵠ();
    };
    new Date().getTime();
    Object.keys(Δᐃ).length;
    console.log(undefined, Ao);
    for (var p in Δᐃ) {
      if (o(Δᐃ[p]) === 0) {
        0;
      }
    }
    console.log(zo, undefined);
    function q() {
      if (this.ᐃΔᐃⵠᐃΔΔ !== 0) {
        return this.ᐃΔᐃⵠᐃΔΔ;
      } else {
        this.ᐃΔᐃⵠᐃΔΔ = 2;
        this.src = this.Ⲇᐃⵠⵠⵠ;
        return 0;
      }
    }
    function l(a) {
      this.ᐃΔᐃⵠᐃΔΔ = 1;
    }
    var g = 0;
    function s() {
      console.log(kn);
      if (g !== 1) {
        g = 1;
        console.log(undefined);
        if (Zb !== lb) {
          lb();
        }
        Zb();
        var a = ΔⵠΔᐃ.ⵠᐃΔΔⵠΔⵠ("server");
        if (a !== null) {
          ⲆᐃⲆᐃ.ΔⲆᐃΔⵠⲆⲆ = 1;
          ⲆᐃⲆᐃ.ⵠⵠΔⲆΔ = [{
            nu: 0,
            m: 100,
            i: "server" + a + ".starve.io",
            p: 443,
            a: a,
            ssl: 1
          }];
        }
        ⲆᐃⲆᐃ.ᐃΔⵠⵠᐃΔⲆᐃΔ();
        setTimeout(j, 100);
      }
    }
    function b() {
      let a = function () {
        ⲆᐃⲆᐃ.ᐃᐃⲆⵠⵠΔⵠ(s);
      };
      if (document.fonts && document.fonts.check) {
        if (document.fonts.check("1em Baloo Paaji")) {
          setTimeout(a, 100);
        } else {
          setTimeout(b, 100);
        }
      } else {
        setTimeout(a, 1000);
      }
    }
    function d() {
      this.ⵠΔΔⵠⲆⲆⵠ++;
      console.warn(`Image (${this.src}) failed to load, attempt ${this.ⵠΔΔⵠⲆⲆⵠ}`, this);
      if (this.ⵠΔΔⵠⲆⲆⵠ > 3) {
        console.warn("Failed to load image too many times");
      }
      var a = this.ⵠΔΔⵠⲆⲆⵠ;
      var b = this.src;
      var c = o(b) === 0 ? 10000 : 2000;
      setTimeout(function () {
        for (var c in ΔⵠⲆΔᐃⲆΔ) {
          if (b.indexOf(ΔⵠⲆΔᐃⲆΔ[c]) !== -1) {
            Δᐃ[c] = new Image();
            Δᐃ[c].onload = l;
            Δᐃ[c].onerror = d;
            Δᐃ[c].ⵠΔΔⵠⲆⲆⵠ = a;
            Δᐃ[c].src = b;
            break;
          }
        }
      }, c);
    }
    function t(a) {
      for (var b in Δᐃ) {
        var c = Δᐃ[b];
        if (typeof c === "string" && o(c) === a) {
          Δᐃ[b] = new Image();
          Δᐃ[b].ᐃΔᐃⵠᐃΔΔ = 0;
          Δᐃ[b].ⵠΔΔⵠⲆⲆⵠ = 0;
          Δᐃ[b].onload = l;
          Δᐃ[b].onerror = d;
          Δᐃ[b].ⲆⲆⵠΔⲆⲆⵠ = q;
          Δᐃ[b].Ⲇᐃⵠⵠⵠ = c;
        }
      }
    }
    t(1);
    t(0);
    _c(1, "l", 20, "#000");
    b();
    Fm();
    this.ᐃⲆⲆ = function () {
      this.ⲆΔᐃⵠΔΔᐃ.translate.x = (Qo - 500) / 2;
      this.ⲆΔᐃⵠΔΔᐃ.translate.y = (aq - 150) / 2;
      var a = 2500 / (40 - n + 1) - 48;
      this.ⲆΔᐃⵠΔΔᐃ.translate.y -= a;
      this.ⲆΔᐃⵠΔΔᐃ.ᐃⲆⲆ();
    };
    this.ⲆΔᐃⵠΔΔᐃ.ᐃⲆⲆ();
    this.ΔⵠᐃⲆ = function () {
      try {
        Tm();
      } catch (a) {}
      this.ᐃⲆⲆ();
    };
  }(Io, Eo, function () {
    Vm();
    Fx = new Uw(Io, Eo);
    (zx = new Tw(Io, Eo)).ΔᐃᐃⵠΔⵠⲆⵠⵠ();
    Ex = new ax(Io, Eo);
    Cx = new Ff();
    Dx = new Lf();
    Lx.ᐃⲆᐃΔΔ(function () {
      Lx.ⲆΔᐃⵠΔΔᐃ.style.display = "none";
      zx.ⵠᐃⲆᐃᐃ();
    });
  });
  function Mx() {
    try {
      e.Widget.adsRefresh();
    } catch (a) {}
  }
  e.onbeforeunload = function () {
    if (Fx.ⲆΔΔⲆⲆ) {
      return "Are you sure you want quit starve.io ;-; ?";
    }
  };
  xr();
  (function b(a) {
    e.requestAnimationFrame(b);
    Jx = (a - Kx) / 1000;
    Kx = a;
    Jx = Jx > 1 ? 1 : Jx;
    if (Fx.ⲆΔΔⲆⲆ) {
      Fx.ΔⵠᐃⲆ();
    } else {
      Eo.clearRect(0, 0, Qo, aq);
      if (Lx.ⲆΔΔⲆⲆ) {
        Lx.ΔⵠᐃⲆ();
      } else if (zx.ⲆΔΔⲆⲆ) {
        zx.ΔⵠᐃⲆ();
      } else if (Ex.ⲆΔΔⲆⲆ) {
        Ex.ΔⵠᐃⲆ();
      }
    }
  })(0);
  var Nx = 0;
  function Ox() {
    Px.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", D);
    Px.send();
  }
  var Px = new XMLHttpRequest();
  Px.onreadystatechange = function () {
    if (this.readyState === 4) {
      this.status;
    }
  };
  var Qx = "https://token.starve.io/";
  var Rx = "https://token2.starve.io/";
  var Sx = 0;
  var Tx = 1;
  var Ux = 4;
  var Vx = kn;
  var Wx = Wn;
  var Xx = Ma;
  var Yx = 0;
  e.ⲆⲆΔΔΔᐃⲆ = function () {
    Yx = 1;
  };
  var Zx = {
    ΔᐃⲆⵠⲆⲆᐃᐃᐃ: "ACCESS_TOKEN"
  };
  var $x = document.createElement("script");
  $x.type = "text/javascript";
  $x.async = true;
  $x.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
  $x.addEventListener("load", function (a) {
    e.XPayStationWidget.init(Zx);
    e.XPayStationWidget.on("status-done", fy);
  }, false);
  document.getElementsByTagName("head")[0].appendChild($x);
  e.fbAsyncInit = function () {
    ty();
    console.log(undefined);
  };
  (function (a, b, c) {
    var d;
    var f = a.getElementsByTagName(b)[0];
    if (!a.getElementById(c)) {
      (d = a.createElement(b)).id = c;
      d.src = "https://connect.facebook.net/en_US/sdk.js";
      f.parentNode.insertBefore(d, f);
    }
  })(document, "script", "facebook-jssdk");
  var _x = undefined;
  var ay = undefined;
  function ey() {
    e.gapi.auth2.init({
      client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
      scope: "https://www.googleapis.com/auth/userinfo.profile"
    }).then(a => {
      (_x = a).isSignedIn.listen(gy);
      _x.currentUser.listen(cy);
      if (_x.isSignedIn.get()) {
        _x.signIn();
      }
      iy();
    });
  }
  function gy(a) {}
  function cy(a) {
    if (Wx === undefined && ay !== undefined && (Wx = ay.getAuthResponse().id_token) !== undefined) {
      Vx = Sx;
      Xx = ay.getBasicProfile().getId();
      e.ⲆⲆΔΔΔᐃⲆ();
      return;
    }
    if (a !== wj && a.isSignedIn() === ct) {
      Xx = (ay = a).id;
      Xx = ay.getBasicProfile().getId();
      Wx = ay.getAuthResponse().id_token;
      Vx = Sx;
      e.ⲆⲆΔΔΔᐃⲆ();
    }
  }
  function iy() {
    if (_x) {
      ay = _x.currentUser.get();
    }
  }
  function jy(a) {
    if (Xx) {
      var b = new XMLHttpRequest();
      b.open("GET", Qx + "xsolla?userid=" + Xx + "&item=" + a);
      b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      b.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
          Zx.access_token = b.responseText;
          e.XPayStationWidget.init(Zx);
          e.XPayStationWidget.open();
        }
      };
      b.send();
    }
  }
  function my(b, c, d, f) {
    b = zo === b ? zx.ⵠᐃⵠΔⲆⲆᐃ : b;
    c = c === undefined ? zx.ᐃⲆΔⵠⲆΔΔ : c;
    d = zo === d ? zx.ᐃⵠⵠᐃΔᐃᐃ : d;
    f = f === or ? zx.ⲆⵠⵠⵠⵠⲆΔ : f;
    if (b !== zx.ⵠᐃⵠΔⲆⲆᐃ || c !== zx.ᐃⲆΔⵠⲆΔΔ || zx.ᐃⵠⵠᐃΔᐃᐃ !== d || zx.ⲆⵠⵠⵠⵠⲆΔ !== f) {
      zx.ⵠᐃⵠΔⲆⲆᐃ = b;
      zx.ᐃⲆΔⵠⲆΔΔ = c;
      zx.ᐃⵠⵠᐃΔᐃᐃ = d;
      zx.ⲆⵠⵠⵠⵠⲆΔ = f;
      if (zx.ⲆⲆⵠⲆᐃⲆⵠ === f) {
        f = "0";
      } else if (zx.ⵠᐃΔΔΔⵠⲆ === f) {
        f = "1";
      } else if (f === zx.ⲆⵠΔⲆᐃᐃⲆ) {
        f = "2";
      } else if (zx.ᐃᐃⲆᐃⲆΔΔ === f) {
        f = "3";
      } else if (zx.ᐃᐃⵠΔⵠⲆⲆ === f) {
        f = "4";
      } else if (zx.ⲆΔᐃᐃⵠΔᐃ === f) {
        f = "5";
      }
      if (c === zx.ⲆⵠᐃΔⲆᐃᐃ) {
        c = "total";
      } else if (c === zx.ᐃⵠᐃΔᐃᐃⲆ) {
        c = "normal";
      } else if (c === zx.ⵠⵠⲆᐃᐃᐃⲆ) {
        c = "zombie";
      } else if (c === zx.ⲆᐃΔⵠⵠⲆⵠ) {
        c = "vampire";
      } else if (c === zx.ᐃⵠⵠΔᐃⵠⲆ) {
        c = "forest";
      }
      if (zx.ΔⲆΔΔΔⲆⲆ === b) {
        b = "all";
      }
      if (b === zx.ⲆⵠⵠⵠΔΔΔ) {
        b = "week";
      }
      if (b === zx.ᐃⲆⲆᐃⲆΔⲆ) {
        b = "today";
      }
      if (zx.ⵠᐃⲆⵠⲆⲆⲆ === d) {
        d = "kill";
      } else if (zx.ΔΔⵠΔΔⲆⵠ === d) {
        d = "score";
      } else if (zx.ΔⲆΔᐃⵠⲆᐃ === d) {
        d = "time";
      }
      var g = new XMLHttpRequest();
      g.open("GET", Qx + "leaderboard?range=" + b + "&mode=" + c + "&sort=" + d + "&season=" + f);
      g.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      g.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && g.responseText !== "0") {
          for (var a = JSON.parse(g.responseText), b = "", c = 0; c < a.length; c++) {
            ᐃᐃᐃΔⲆ = a[c];
            var d = ᐃᐃᐃΔⲆ[1];
            try {
              if (d.indexOf("Starver#") === -1) {
                d = e.decodeURIComponent(e.escape(e.atob(d)));
              }
            } catch (a) {}
            b += "<div class=\"lineLeaderboard\">";
            b += "<div class=\"rank\">";
            b += c + 1 + "";
            b += "</div>";
            b += "<div class=\"name\">";
            b += d;
            b += "</div>";
            b += "<div class=\"lvl\">";
            b += zx.ΔⲆⵠⲆΔΔⵠ(ᐃᐃᐃΔⲆ[6]) + 1 + "";
            b += "</div>";
            b += "<div class=\"kills\">";
            b += ᐃᐃᐃΔⲆ[5] + "";
            b += "</div>";
            b += "<div class=\"time\">";
            b += ᐃᐃᐃΔⲆ[4] + "";
            b += "</div>";
            b += "<div class=\"score\">";
            b += ᐃᐃᐃΔⲆ[3] + "";
            b += "</div>";
            b += "</div>";
          }
          document.getElementById("leaderboard").innerHTML = b;
        }
      };
      g.send();
    }
  }
  function ny(a) {
    var b = new XMLHttpRequest();
    b.open("GET", Qx + "setRegion?token=" + Wx + "&userid=" + Xx + "&region=" + a);
    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    b.onreadystatechange = function () {
      if (this.readyState === 4 && this.status === 200) {
        if (b.responseText !== "0") {
          zx.ΔΔⵠΔ(zx.ⵠᐃⲆΔΔ);
        } else {
          zx.ΔΔⵠΔ(zx.ᐃᐃⵠᐃΔ);
        }
      }
    };
    b.send();
  }
  function fy() {
    var a = new XMLHttpRequest();
    a.open("GET", Qx + "claimBread?userid=" + Xx);
    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    a.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
        var b = Number(a.responseText);
        if (!isNaN(b)) {
          zx.ⲆΔΔᐃⵠ = b;
        }
      }
    };
    a.send();
  }
  function oy(a, b) {
    if (zx.ᐃᐃⵠᐃⵠ <= 0) {
      if (zx.ⲆΔΔᐃⵠ < b) {
        zx.ΔΔⵠΔ(zx.ⲆⵠΔⵠⲆ);
      } else {
        zx.ᐃᐃⵠᐃⵠ = 2;
        zx.ⲆΔⲆⲆⲆᐃⲆ = 0;
        zx.ΔΔᐃⵠⲆⵠᐃ = 100;
        var c = new XMLHttpRequest();
        c.open("GET", Qx + "buySpin?token=" + Wx + "&userid=" + Xx + "&spin=" + a);
        c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        c.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200) {
            if (c.responseText !== "0") {
              var a = JSON.parse(c.responseText);
              zx.ⵠᐃΔⲆᐃⵠⲆⵠⵠ(a.rand * Math.PI * 2, a.type, a.id);
              zx.ⲆΔΔᐃⵠ -= b;
            } else {
              zx.ᐃᐃⵠᐃⵠ = 0;
            }
          }
        };
        c.send();
      }
    }
  }
  function py(a, b) {
    if (b > zx.ⲆΔΔᐃⵠ) {
      zx.ΔΔⵠΔ(zx.ⲆⵠΔⵠⲆ);
    } else {
      var c = new XMLHttpRequest();
      c.open("GET", Qx + "buyKit?token=" + Wx + "&userid=" + Xx + "&kit=" + a);
      c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      c.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && c.responseText !== "0") {
          var a = JSON.parse(c.responseText);
          zx.ⲆΔΔᐃⵠ -= b;
          zx.Ⲇⵠⵠᐃⵠ = Date.now() + Number(a);
        }
      };
      c.send();
    }
  }
  function qy() {
    if (zx.ⲆΔΔᐃⵠ >= 300 || zx.ⵠⲆⲆΔΔᐃᐃ <= 0) {
      var a = document.getElementById("account_nickname_input").value.trim();
      document.getElementById("account_nickname_input").value = a;
      if (a.length >= 1 && a.length <= 20) {
        var b = new XMLHttpRequest();
        b.open("GET", Qx + "changeNickname?token=" + Wx + "&userid=" + Xx + "&nickname=" + encodeURIComponent(a));
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
            var a = Number(b.responseText);
            if (a > 0) {
              zx.ⲆΔΔᐃⵠ -= a;
            }
            zx.ⵠⲆⲆΔΔᐃᐃ = 1;
            zx.ΔΔⵠΔ(zx.ⲆΔⵠᐃᐃ);
          }
        };
        b.send();
      }
    }
  }
  function ty() {
    if (e.FB) {
      e.FB.init({
        version: "v15.0",
        xfbml: true,
        cookie: true,
        appId: "642017356260407"
      });
    }
    if (Xx === undefined) {
      (function () {
        try {
          if (e.FB && e.FB.getUserID()) {
            Xx = e.FB.getUserID();
            if (Wn === Wx) {
              e.FB.getLoginStatus(function () {
                Vx = Tx;
                Wx = e.FB.getAuthResponse().accessToken;
                e.ⲆⲆΔΔΔᐃⲆ(Xx);
              });
            }
          }
        } catch (a) {}
        try {
          Xx = ay.getBasicProfile().getId();
        } catch (a) {}
      })();
    }
  }
  e.onload = function () {
    e.gapi.load("auth2", ey);
  };
})();
