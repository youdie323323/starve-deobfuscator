(function () {
    var g = 88;
    if (g >= 7) {
        g = 42;
    }
    var Ec = 244;
    if (Ec >= 3) {
        Ec = 128;
    }
    var yd = 181;
    var df = 101;
    if (df === 5) {
        df = 46;
    }
    var kf = 205;
    if (kf == 0) {
        kf = 221;
    }
    if (yd === 9) {
        yd = 45;
    }
    const Hf = window;
    let a = 132;
    const Cg = function (b) {
        let c = "";
        for (let d = 0; d < b.length; d++) {
            c += Hf.String.fromCharCode(b[d] ^ a++ % 255);
        }
        return c;
    };
    var s = 45;
    if (s >= 13) {
        s = 251;
    }
    var Fg = 166;
    if (Fg >= 4) {
        Fg = 111;
    }
    const xh = 19;
    const u = 9;
    const b = 18;
    const d = 6;
    const v = 16;
    const c = 11;
    const m = 255;
    const p = 15;
    const C = 10;
    const T = -8;
    const Ih = undefined;
    const f = -4;
    const y = 100;
    const w = false;
    const z = 17;
    const k = true;
    const A = 256;
    const x = 20;
    const J = 255;
    const M = 2;
    const B = 7;
    const D = 20;
    const Nh = Ih;
    function E(a) {
        return Hf.String.fromCharCode(a);
    }
    const I = 13;
    const P = 14;
    const Q = 4;
    const F = 3;
    const R = 2;
    const j = 4;
    const L = 5;
    const G = 3;
    const S = 6;
    const O = k;
    const N = 12;
    const q = 1 << 11;
    const H = 1;
    const U = 1 << 12;
    const W = 8;
    const K = 7;
    function V(a) {
        return Hf.String.fromCharCode(a);
    }
    const X = 11;
    const Y = 4;
    const Z = 1;
    const _ = 5;
    const ee = 12;
    const ie = 0;
    const ne = 3;
    let ae;
    let oe;
    let te;
    let aj = Nh;
    let bj = Nh;
    let cj = [];
    let ue = Ih;
    let dj = Ih;
    let ej = Ih;
    const fj = 100;
    let ce = "_";
    const gj = 15;
    let pe = Ih;
    const hj = 16;
    const Te = 6;
    const fe = 20;
    let ze = Ih;
    let ij = Ih;
    const jj = 9;
    const Pe = 18;
    let ke = Nh;
    const kj = 19;
    const xe = 256;
    let Je;
    const lj = 2;
    let Be;
    let mj;
    let nj;
    let oj;
    let pj;
    const qj = 10;
    let _e = Nh;
    const rj = 17;
    const Re = k;
    const je = 14;
    const Le = 6;
    let Ge;
    const sj = 1;
    let Oe;
    let tj = Ih;
    let uj = Ih;
    let vj = Ih;
    const wj = 2;
    let Ye = Nh;
    const xj = 255;
    let Ve;
    const yj = w;
    const Ze = 12;
    const $e = Nh;
    let ei;
    const zj = 13;
    const ti = 18;
    let ni = Ih;
    let Aj = Nh;
    const Bj = 10;
    let ri;
    const Cj = 8;
    const hi = 11;
    let li = Ih;
    const Dj = 2;
    let ui;
    let Ej;
    let Fj = Nh;
    let Gj = Nh;
    const Hj = 19;
    let mi;
    let Ij;
    const Jj = 100;
    let Ti;
    const Kj = 8;
    let zi;
    let Lj;
    let Mj;
    let Nj;
    let Oj = Nh;
    const Pj = O;
    const xi = 15;
    let Ji;
    let Qj = Nh;
    const Rj = 4;
    let Di;
    const Sj = 16;
    const Ii = 9;
    const Si = 7;
    let Qi;
    let Tj;
    let Uj;
    const Vj = 1;
    let ji = $e;
    const Wj = 14;
    let Gi = 0;
    let Xj = Nh;
    if (!Hf.WebAssembly || !Hf.WebAssembly.instantiate) {
        ⵠΔⲆⲆΔⲆⲆⵠⲆ();
    }
    const Yj = 3;
    const Ni = 20;
    const qi = 5;
    const Hi = {
        Date: Date
    };
    Hf.WebAssembly.instantiate(Uint8Array.from(Hf.atob(""), function (a) {
        return a.charCodeAt(0);
    }), Hi).then(async function (a) {
        ae = a.instance;
        aj = ae.exports;
        oe = aj.memory;
        bj = oe.buffer;
        te = aj.__pin;
        ue = aj.__unpin;
        ej = aj.__new;
        dj = aj.__collect;
        ce = "_";
        for (let b = 0; b < 31; b++) {
            cj[b] = aj[ce + b];
        }
        pe = aj.__rtti_base;
        ze = new Float32Array(bj);
        ij = new Float64Array(bj);
        ke = new BigUint64Array(bj);
        Je = new Uint32Array(bj);
        Be = new Uint16Array(bj);
        mj = new Uint8Array(bj);
        nj = new BigInt64Array(bj);
        oj = new Int32Array(bj);
        pj = new Int16Array(bj);
        _e = new Int8Array(bj);
        ji = cj[29];
        mi = cj[21];
        Ij = cj[20];
        ni = cj[14];
        Qi = cj[23];
        Ji = cj[18];
        ei = cj[12];
        Qj = cj[3];
        Ve = cj[25];
        Tj = cj[27];
        Ti = cj[26];
        Lj = cj[2];
        Uj = cj[10];
        Aj = cj[16];
        Oe = cj[11];
        Ye = cj[1];
        Gj = cj[6];
        Ej = cj[7];
        Ge = cj[24];
        Oj = cj[9];
        ui = cj[4];
        uj = cj[8];
        tj = cj[28];
        Fj = cj[30];
        vj = cj[0];
        Di = cj[13];
        Mj = cj[17];
        Nj = cj[15];
        zi = cj[22];
        li = cj[19];
        ri = cj[5];
        Gi = 1;
        if (Xj) {
            await Xj();
        }
    });
    const Ui = 255;
    const Yi = function (a) {
        return Je[(pe + 4 >>> 2) + (a << 1)];
    };
    const Ki = 256;
    const Vi = 16;
    function Xi(a) {
        return 31 - Math.clz32(a >>> 6 & 31);
    }
    const Zi = Nh;
    const $i = 19;
    function Zj(a, b, c) {
        if (c) {
            switch (a) {
                case 2:
                    return ze;
                case 3:
                    return ij;
            }
        } else {
            switch (a) {
                case 0:
                    if (b) {
                        return _e;
                    } else {
                        return mj;
                    }
                case 1:
                    if (b) {
                        return pj;
                    } else {
                        return Be;
                    }
                case 2:
                    if (b) {
                        return oj;
                    } else {
                        return Je;
                    }
                case 3:
                    if (b) {
                        return nj;
                    } else {
                        return ke;
                    }
            }
        }
    }
    const $j = 256;
    const _j = 17;
    const ak = 0;
    const bk = yj;
    function ck(b) {
        const c = Je[b + T >>> 2];
        const d = Yi(c);
        const e = Xi(d);
        let g = d & 4 ? b : Je[b + 4 >>> 2];
        const h = d & 2 ? Je[b + 12 >>> 2] : Je[g + f >>> 2] >>> e;
        return Zj(e, d & q, d & U).subarray(g >>>= e, g + h);
    }
    const dk = 2;
    const ek = Pj;
    const fk = 4;
    const gk = "development";
    const hk = "production";
    function ik(b, c, d, e, f, i) {
        const a = ~(b & 57623) & 57623 | ~(b & 57623) & b;
        const j = (8 << (f >> 16 & 255)) + (24 << (f & 255)) + (16 << (f >> 24 & 255)) + (0 << (f >> 8 & 255));
        const k = (0 << (i >> 8 & 255)) + (8 << (i >> 16 & 255)) + (16 << (i & 255)) + (24 << (i >> 24 & 255));
        const h = function (b, c, d, e) {
            const f = (12345 + (b + 55934) * 1103515245) % 2147483648;
            const g = (c | 59062) & ~(c & 59062);
            const a = Tb(f, g, (8 << (d & 255)) + (24 << (d >> 8 & 255)) + (0 << (d >> 24 & 255)) + (16 << (d >> 16 & 255)), (1013904223 + (35501 + e) * 1664525) % 4294967296);
            const h = function (b, c) {
                const d = (8 << (b >> 8 & 255)) + (24 << (b >> 24 & 255)) + (0 << (b & 255)) + (16 << (b >> 16 & 255));
                const e = (12345 + (c + 2625) * 1103515245) % 2147483648;
                const f = kx(d, e);
                const g = function (a, b) {
                    const c = ((a + 50334) * 22695477 + 1) % 4294967296;
                    const d = b ^ 43357;
                    const e = function (b, c, d) {
                        const e = b ^ 25305;
                        const f = ((31965 + c) * 1664525 + 1013904223) % 4294967296;
                        const g = (16 << (d >> 24 & 255)) + (24 << (d >> 16 & 255)) + (0 << (d >> 8 & 255)) + (8 << (d & 255));
                        const a = function (a, b) {
                            const c = a ^ 39623;
                            const d = (0 << (b & 255)) + (8 << (b >> 24 & 255)) + (24 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
                            const e = ib(c, d, c, d, c);
                            (function (b, c, d, e, f) {
                                const g = (0 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)) + (16 << (b & 255));
                                const a = (2531011 + (e + 61562) * 214013) % 4294967296;
                                const i = ~(f & 58630) & 58630 | ~(f & 58630) & f;
                                const j = mp(g, c ^ 41934, d ^ 49985);
                                const h = mp(a, i, g);
                            })(d, c, d, c, d);
                            return ~(e & 45936) & (e | 45936);
                        }(e, f);
                        Nn(g, e, f, g, e, f);
                        return a ^ 54309;
                    }(c, d, c);
                    Nn(d, c, d, c, d, c);
                    return e ^ 10010;
                }(d, e);
                return (1 + (65226 + (f ^ g)) * 22695477) % 4294967296;
            }(f, g);
            return (16 << ((a ^ h) >> 16 & 255)) + (0 << ((a ^ h) & 255)) + (24 << ((a ^ h) >> 8 & 255)) + (8 << ((a ^ h) >> 24 & 255));
        }(a, (8 << (c & 255)) + (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (0 << (c >> 24 & 255)), d ^ 55984, ((56477 + e) * 1664525 + 1013904223) % 4294967296);
        const l = Nx(j, k, a);
        return (0 << ((h ^ l) >> 24 & 255)) + (16 << ((h ^ l) >> 8 & 255)) + (24 << ((h ^ l) & 255)) + (8 << ((h ^ l) >> 16 & 255));
    }
    const jk = 13;
    const kk = k;
    function lk(a) {
        this.ⲆΔᐃᐃ = 2147483648;
        this.a = 1103515245;
        this.c = 12345;
        this.state = a || Math.floor(Math.random() * (this.ⲆΔᐃᐃ - 1));
    }
    lk.prototype.random = function () {
        this.state = (this.a * this.state + this.c) % this.ⲆΔᐃᐃ;
        return this.state / this.ⲆΔᐃᐃ;
    };
    lk.prototype.ⵠᐃᐃⲆΔⵠⲆ = function (a) {
        this.state = a;
    };
    ᐃᐃᐃΔⲆΔⲆ = 10000;
    const mk = 6;
    ⲆᐃⵠΔᐃⵠᐃ = [];
    var nk = new lk();
    nk.ⵠᐃᐃⲆΔⵠⲆ(new Date().getTime());
    const ok = 14;
    for (var pk = 0; pk < ᐃᐃᐃΔⲆΔⲆ; pk++) {
        ⲆᐃⵠΔᐃⵠᐃ.push(nk.random());
    }
    const qk = 9;
    const rk = 3;
    function sk(b, c, d, e) {
        const f = b ^ 11762;
        const g = ~(c & 19425) & 19425 | ~(c & 19425) & c;
        return ((55182 + (((17757 + ((32 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 8 & 255)) + (24 << ((f ^ g) >> 24 & 255)) + (16 << ((f ^ g) >> 16 & 255)) ^ (32 << (d >> 16 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 24 & 255)) + (16 << (d >> 8 & 255)))) * 1664525 + 1013904223) % 4294967296 ^ (~(e & 259) & 259 | ~(e & 259) & e))) * 1664525 + 1013904223) % 4294967296;
    }
    function tk(c, d, e, f, i) {
        const j = (12345 + (23101 + c) * 1103515245) % 2147483648;
        const a = d ^ 58614;
        const k = ((e + 45267) * 214013 + 2531011) % 4294967296;
        const m = f ^ 40810;
        const h = (24 << (i >> 24 & 255)) + (8 << (i >> 32 & 255)) + (32 << (i >> 8 & 255)) + (16 << (i >> 16 & 255));
        const l = kn(j, a);
        const g = wk(k, m, h, j);
        (function (b, c, d, e) {
            const f = (b + 34282) % 65336;
            const i = ~(c & 45181) & 45181 | ~(c & 45181) & c;
            const a = (16 << (d >> 8 & 255)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 16 & 255));
            const j = ~(e & 25475) & 25475 | ~(e & 25475) & e;
            const k = function (a, b) {
                const c = ~(a & 41406) & a | ~(a & 41406) & 41406;
                const d = ((b + 17922) * 1103515245 + 12345) % 2147483648;
                const e = En(c, d, c);
                Ok(d, c, d, c);
                return ((42346 + (e ^ 18573 ^ uk(d, c, d, c, d))) * 2147483629 + 2147483587) % 2147483647;
            }(f, i);
            const h = fn(a, j, f, i, a);
            kn(j, f);
            const l = (58498 + (k ^ h)) % 65531;
        })(a, k, m, h);
        const n = (24 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 32 & 255)) + (16 << ((l ^ g) >> 8 & 255));
        return ~(n & 13644) & n | ~(n & 13644) & 13644;
    }
    function uk(b, c, d, e, f) {
        const i = (32 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)) + (8 << (b >> 32 & 255));
        const a = (c + 39144) % 65406;
        const j = d ^ 34575;
        const k = ~(e & 37841) & e | ~(e & 37841) & 37841;
        const h = (f | 25975) & ~(f & 25975);
        const l = sk(i, a, j, k);
        fn(h, i, a, j, k);
        Qk(h, i, a, j, k, h);
        return (l | 19326) & ~(l & 19326) ^ 36297;
    }
    function vk(c, e, f, i, j, k) {
        const a = ((39488 + c) * 214013 + 2531011) % 4294967296;
        const m = ~(e & 49976) & e | ~(e & 49976) & 49976;
        const n = ~(f & 35856) & f | ~(f & 35856) & 35856;
        const h = i ^ 52219;
        const l = (j + 3575) % 65503;
        const g = ~(k & 6932) & k | ~(k & 6932) & 6932;
        const o = dn(a, m, n, h, l);
        const b = function (c, d, e, f, i, j) {
            const a = c ^ 30142;
            const k = (d + 63025) % 65493;
            const m = e ^ 30777;
            const h = ((45939 + f) * 22695477 + 1) % 4294967296;
            const l = (8 << (i >> 16 & 255)) + (32 << (i >> 24 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 8 & 255));
            const g = (j | 45652) & ~(j & 45652);
            const n = dn(a, k, m, h, l);
            yk(g, a, k, m, h);
            Vk(l, g, a, k, m, h);
            return n ^ 60048;
        }(g, a, m, n, h, l);
        Qk(g, a, m, n, h, l);
        const d = (1013904223 + (60709 + (o ^ b)) * 1664525) % 4294967296;
        return ~(d & 42138) & d | ~(d & 42138) & 42138;
    }
    function wk(b, c, d, e) {
        const f = ~(b & 59259) & b | ~(b & 59259) & 59259;
        const i = ~(c & 56097) & c | ~(c & 56097) & 56097;
        const a = ((43315 + d) * 1664525 + 1013904223) % 4294967296;
        const j = (8 << (e >> 24 & 255)) + (32 << (e >> 32 & 255)) + (24 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
        const k = function (c, e, f, i, j, k) {
            const a = c ^ 10715;
            const m = (24 << (e >> 16 & 255)) + (16 << (e >> 32 & 255)) + (32 << (e >> 8 & 255)) + (8 << (e >> 24 & 255));
            const n = (8 << (f >> 16 & 255)) + (32 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (24 << (f >> 32 & 255));
            const h = i ^ 40782;
            const l = j ^ 41301;
            const g = ~(k & 12091) & (k | 12091);
            const o = Kk(a, m, n, h, l, g);
            Kk(a, m, n, h, l, g);
            gn(a, m, n, h, l);
            const b = (o | 3006) & ~(o & 3006);
            return ~(b & 24460) & (b | 24460);
        }(f, i, a, j, f, i);
        const h = vn(a, j, f, i, a);
        Kk(j, f, i, a, j, f);
        const l = (1013904223 + (26191 + (k ^ h)) * 1664525) % 4294967296;
        return (l | 38630) & ~(l & 38630);
    }
    function xk(c, d, e, f, i, j) {
        const a = (1013904223 + (c + 28824) * 1664525) % 4294967296;
        const k = (1013904223 + (13210 + d) * 1664525) % 4294967296;
        const m = ~(e & 32165) & 32165 | ~(e & 32165) & e;
        const h = (24 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 32 & 255));
        const l = (1 + (39199 + i) * 22695477) % 4294967296;
        const g = j ^ 33037;
        const n = function (b, c, d) {
            const e = (12345 + (39051 + b) * 1103515245) % 2147483648;
            const f = (c | 44117) & ~(c & 44117);
            const g = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & 255));
            const a = Rk(e, f, g, e, f);
            const i = Dn(g, e, f, g, e, f);
            const j = function (a, b) {
                const c = (16 << (a >> 8 & 255)) + (32 << (a >> 16 & 255)) + (8 << (a >> 32 & 255)) + (24 << (a >> 24 & 255));
                const d = (32 << (b >> 32 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
                const e = Vk(c, d, c, d, c, d);
                (function (b, c, d, e, f) {
                    const i = b ^ 64570;
                    const a = (2531011 + (c + 41768) * 214013) % 4294967296;
                    const j = (1013904223 + (d + 43923) * 1664525) % 4294967296;
                    const k = (16 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (32 << (e >> 16 & 255)) + (24 << (e >> 8 & 255));
                    const h = (f | 21896) & ~(f & 21896);
                    const l = function (a, b) {
                        const c = ((a + 49468) * 1103515245 + 12345) % 2147483648;
                        const d = ((b + 30513) * 214013 + 2531011) % 4294967296;
                        const e = function (b, c, d) {
                            const e = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
                            const f = (c | 55665) & ~(c & 55665);
                            const g = (d + 54633) % 65404;
                            const a = yk(e, f, g, e, f);
                            (function (c, e, f, i, j, k) {
                                const a = (2531011 + (c + 16955) * 214013) % 4294967296;
                                const m = ((9436 + e) * 1103515245 + 12345) % 2147483648;
                                const n = (f | 14774) & ~(f & 14774);
                                const h = (i | 48802) & ~(i & 48802);
                                const l = ~(j & 24998) & (j | 24998);
                                const g = (8 << (k >> 8 & 255)) + (16 << (k >> 16 & 255)) + (32 << (k >> 32 & 255)) + (24 << (k >> 24 & 255));
                                const o = Jk(a, m, n, h);
                                const b = fn(l, g, a, m, n);
                                const d = Jk(h, l, g, a);
                            })(g, e, f, g, e, f);
                            nn(g, e, f, g);
                            return ~(a & 43875) & (a | 43875) ^ 15116;
                        }(c, d, c);
                        gn(d, c, d, c, d);
                        sk(c, d, c, d);
                        return (e | 17943) & ~(e & 17943) ^ 21791;
                    }(i, a);
                    Ok(j, k, h, i);
                    const g = zk(a, j, k, h, i);
                })(c, d, c, d, c);
                rn(d, c);
                return (e | 58283) & ~(e & 58283) ^ 8337;
            }(g, e);
            const h = (16 << ((a ^ i) >> 32 & 255)) + (24 << ((a ^ i) >> 24 & 255)) + (32 << ((a ^ i) >> 8 & 255)) + (8 << ((a ^ i) >> 16 & 255));
            return (8 << ((h ^ j) >> 32 & 255)) + (16 << ((h ^ j) >> 8 & 255)) + (32 << ((h ^ j) >> 16 & 255)) + (24 << ((h ^ j) >> 24 & 255));
        }(a, k, m);
        nn(h, l, g, a);
        return ((34159 + (n ^ 2959 ^ Jk(k, m, h, l))) * 1103515245 + 12345) % 2147483648;
    }
    function yk(c, d, e, f, i) {
        const j = ((c + 14772) * 2147483629 + 2147483587) % 2147483647;
        const a = d ^ 63080;
        const k = ((e + 60304) * 22695477 + 1) % 4294967296;
        const m = ~(f & 5467) & 5467 | ~(f & 5467) & f;
        const h = (i | 40165) & ~(i & 40165);
        const l = function (b, c, d, e) {
            const f = (b | 57611) & ~(b & 57611);
            const i = ((c + 56889) * 1664525 + 1013904223) % 4294967296;
            const a = d ^ 62842;
            const j = ~(e & 1179) & e | ~(e & 1179) & 1179;
            const k = sk(f, i, a, j);
            const h = nn(f, i, a, j);
            wk(f, i, a, j);
            const l = (24 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) >> 16 & 255)) + (16 << ((k ^ h) >> 32 & 255)) + (32 << ((k ^ h) >> 8 & 255));
            return ~(l & 63304) & (l | 63304);
        }(j, a, k, m);
        const g = vn(h, j, a, k, m);
        const n = Dn(h, j, a, k, m, h);
        return ((28765 + ((16 << ((l ^ g) >> 24 & 255)) + (8 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> 32 & 255)) + (32 << ((l ^ g) >> 8 & 255)) ^ n)) * 1664525 + 1013904223) % 4294967296;
    }
    function zk(b, c, d, e, f) {
        const i = (24 << (b >> 24 & 255)) + (32 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 32 & 255));
        const a = (12345 + (c + 3024) * 1103515245) % 2147483648;
        const j = (8 << (d >> 8 & 255)) + (32 << (d >> 32 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & 255));
        const k = (1 + (e + 41324) * 22695477) % 4294967296;
        const h = (f | 19607) & ~(f & 19607);
        const l = rn(i, a);
        fn(j, k, h, i, a);
        Vk(j, k, h, i, a, j);
        const g = ~(l & 49323) & 49323 | ~(l & 49323) & l;
        return ~(g & 46567) & (g | 46567);
    }
    const Ak = 18;
    const Bk = 255;
    const Ck = 19;
    const Dk = 12;
    const Ek = 100;
    const Fk = 10;
    const Gk = 13;
    const Hk = 15;
    const Ik = 18;
    function Jk(b, c, d, e) {
        const f = ~(b & 33107) & (b | 33107);
        const g = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & 255));
        const a = ~(d & 32053) & (d | 32053);
        const i = e ^ 12240;
        const j = function (b, c, d, e) {
            const f = (32 << (b >> 32 & 255)) + (16 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255));
            const i = (1 + (50595 + c) * 22695477) % 4294967296;
            const a = ~(d & 40066) & d | ~(d & 40066) & 40066;
            const j = e ^ 18768;
            const k = dn(f, i, a, j, f);
            const h = tk(i, a, j, f, i);
            const l = Tk(a, j);
            return ((16767 + ((2531011 + (35287 + (k ^ h)) * 214013) % 4294967296 ^ l)) * 1664525 + 1013904223) % 4294967296;
        }(f, g, a, i);
        nn(f, g, a, i);
        return (2531011 + (44352 + ((~(j & 64131) & 64131 | ~(j & 64131) & j) ^ dn(f, g, a, i, f))) * 214013) % 4294967296;
    }
    function Kk(b, c, d, e, f, i) {
        const a = ~(b & 36133) & (b | 36133);
        const j = (c | 13670) & ~(c & 13670);
        const k = (d | 31390) & ~(d & 31390);
        const h = e ^ 64081;
        const l = f ^ 7550;
        const g = (2147483587 + (i + 63950) * 2147483629) % 2147483647;
        return (12345 + (36760 + (((62552 + (tn(a, j, k, h, l) ^ nn(g, a, j, k))) * 2147483629 + 2147483587) % 2147483647 ^ gn(h, l, g, a, j))) * 1103515245) % 2147483648;
    }
    const Lk = Zi;
    const Mk = Re;
    const Nk = 11;
    function Ok(b, c, d, e) {
        const f = (b | 15432) & ~(b & 15432);
        const g = c ^ 12315;
        const a = d ^ 38714;
        const i = e ^ 58084;
        const j = vk(f, g, a, i, f, g);
        nn(a, i, f, g);
        return ((34681 + ((~(j & 41134) & j | ~(j & 41134) & 41134) ^ Qk(a, i, f, g, a, i))) * 214013 + 2531011) % 4294967296;
    }
    const Pk = 14;
    function Qk(b, c, d, e, f, g) {
        const a = b ^ 23409;
        const i = c ^ 26380;
        const j = ((f + 33017) * 1103515245 + 12345) % 2147483648;
        const h = g ^ 42490;
        return ((19056 + (sk(a, i, d ^ 53590, e ^ 36633) ^ sk(j, h, a, i))) * 22695477 + 1) % 4294967296;
    }
    function Rk(b, c, d, e, f) {
        const i = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
        const a = ~(c & 7703) & c | ~(c & 7703) & 7703;
        const j = (d | 31275) & ~(d & 31275);
        const k = ~(e & 25693) & 25693 | ~(e & 25693) & e;
        const h = (8 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f >> 32 & 255));
        const l = Qk(i, a, j, k, h, i);
        const g = sk(a, j, k, h);
        En(i, a, j);
        return (24 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 32 & 255)) ^ 31710;
    }
    const Sk = Nh;
    function Tk(b, c) {
        const d = (2531011 + (b + 62874) * 214013) % 4294967296;
        const e = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
        const f = Qk(d, e, d, e, d, e);
        const g = Qk(d, e, d, e, d, e);
        sk(d, e, d, e);
        const a = (16 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) >> 16 & 255)) + (32 << ((f ^ g) >> 8 & 255));
        return ~(a & 55949) & 55949 | ~(a & 55949) & a;
    }
    const Uk = 7;
    function Vk(c, e, f, i, j, k) {
        const a = (24 << (c >> 24 & 255)) + (32 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 32 & 255));
        const m = (e | 41551) & ~(e & 41551);
        const n = (24 << (f >> 24 & 255)) + (16 << (f >> 32 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 8 & 255));
        const h = ~(i & 32641) & (i | 32641);
        const l = ((j + 35582) * 214013 + 2531011) % 4294967296;
        const g = ~(k & 1090) & (k | 1090);
        const o = Dn(a, m, n, h, l, g);
        uk(a, m, n, h, l);
        sk(g, a, m, n);
        const b = ~(o & 8077) & 8077 | ~(o & 8077) & o;
        return ~(b & 3708) & (b | 3708);
    }
    const Wk = 9;
    const Xk = 10;
    const Yk = 256;
    const Zk = 10;
    const $k = 256;
    const _k = 13;
    const ol = 17;
    const Ql = 8;
    const an = 6;
    const en = 20;
    const hn = 17;
    const ln = 8;
    function gn(b, c, d, e, f) {
        const i = (2147483587 + (b + 64762) * 2147483629) % 2147483647;
        const a = ((18197 + c) * 214013 + 2531011) % 4294967296;
        const j = (2531011 + (22845 + d) * 214013) % 4294967296;
        const k = (32 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 32 & 255)) + (24 << (e >> 24 & 255));
        const h = ~(f & 11999) & f | ~(f & 11999) & 11999;
        const l = Qk(i, a, j, k, h, i);
        const g = Vk(a, j, k, h, i, a);
        sk(j, k, h, i);
        return (8 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 32 & 255)) ^ 35444;
    }
    function nn(b, c, d, e) {
        const f = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
        const g = c ^ 57623;
        const a = ~(d & 40280) & d | ~(d & 40280) & 40280;
        const i = ~(e & 24601) & e | ~(e & 24601) & 24601;
        const j = rn(f, g);
        rn(a, i);
        vn(f, g, a, i, f);
        const h = ~(j & 43902) & 43902 | ~(j & 43902) & j;
        return (h | 8862) & ~(h & 8862);
    }
    const bn = 16;
    function dn(b, c, d, e, f) {
        const i = b ^ 62008;
        const a = (24 << (c >> 32 & 255)) + (8 << (c >> 16 & 255)) + (32 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
        const j = ((d + 46531) * 22695477 + 1) % 4294967296;
        const k = ~(e & 1884) & 1884 | ~(e & 1884) & e;
        const h = ~(f & 55588) & 55588 | ~(f & 55588) & f;
        const l = yk(i, a, j, k, h);
        Dn(i, a, j, k, h, i);
        return ((3037 + (l ^ 57467 ^ vn(a, j, k, h, i))) * 1664525 + 1013904223) % 4294967296;
    }
    const on = 11;
    const cn = Lk;
    const mn = 9;
    const pn = 100;
    function rn(a, b) {
        const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
        const d = b ^ 53080;
        return (1 + (57525 + ((17769 + (tn(c, d, c, d, c) ^ fn(d, c, d, c, d))) % 65357 ^ sk(c, d, c, d))) * 22695477) % 4294967296;
    }
    const sn = 7;
    function fn(b, c, d, e, f) {
        const i = ~(b & 42203) & b | ~(b & 42203) & 42203;
        const a = c ^ 50118;
        const j = d ^ 41620;
        const k = ((e + 34240) * 2147483629 + 2147483587) % 2147483647;
        const h = (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
        const l = Dn(i, a, j, k, h, i);
        Dn(a, j, k, h, i, a);
        return (2531011 + (53616 + ((l | 43477) & ~(l & 43477) ^ sk(j, k, h, i))) * 214013) % 4294967296;
    }
    function tn(c, d, e, f, i) {
        const j = (16 << (c >> 32 & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
        const a = d ^ 55978;
        const k = ((e + 2934) * 1664525 + 1013904223) % 4294967296;
        const m = ~(f & 30642) & (f | 30642);
        const h = (8 << (i >> 8 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 24 & 255)) + (32 << (i >> 16 & 255));
        const l = fn(j, a, k, m, h);
        const g = gn(j, a, k, m, h);
        sk(j, a, k, m);
        const n = (16 << ((l ^ g) >> 32 & 255)) + (24 << ((l ^ g) >> 8 & 255)) + (8 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & 255));
        return ~(n & 23686) & (n | 23686);
    }
    const un = w;
    function vn(c, d, e, f, i) {
        const j = ((c + 49173) * 1103515245 + 12345) % 2147483648;
        const a = (d + 52922) % 65337;
        const k = e ^ 25250;
        const m = ~(f & 10903) & 10903 | ~(f & 10903) & f;
        const h = ~(i & 33814) & 33814 | ~(i & 33814) & i;
        const l = uk(j, a, k, m, h);
        const g = kn(j, a);
        uk(k, m, h, j, a);
        const n = (1 + (19675 + (l ^ g)) * 22695477) % 4294967296;
        return ~(n & 7922) & n | ~(n & 7922) & 7922;
    }
    const wn = 1;
    function kn(b, c) {
        const d = b ^ 24508;
        const e = (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
        const f = zk(d, e, d, e, d);
        const g = tn(e, d, e, d, e);
        Rk(d, e, d, e, d);
        const a = ((11269 + (f ^ g)) * 2147483629 + 2147483587) % 2147483647;
        return ~(a & 40927) & 40927 | ~(a & 40927) & a;
    }
    const yn = 14;
    const xn = 10;
    const zn = 15;
    const An = 7;
    const Bn = 255;
    const Cn = 6;
    function Dn(b, c, d, e, f, i) {
        const a = d ^ 8102;
        const j = (24 << (e >> 16 & 255)) + (32 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (16 << (e >> 8 & 255));
        const k = ~(f & 29687) & 29687 | ~(f & 29687) & f;
        const h = (1 + (62237 + i) * 22695477) % 4294967296;
        const l = Tk((b + 52483) % 65496, (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 24 & 255)) + (8 << (c >> 32 & 255)));
        const g = Tk(a, j);
        Tk(k, h);
        return (45290 + (l ^ g)) % 65334 ^ 55575;
    }
    function En(b, c, d) {
        const e = b ^ 23323;
        const f = (2531011 + (61713 + c) * 214013) % 4294967296;
        const g = (d | 24198) & ~(d & 24198);
        const a = zk(e, f, g, e, f);
        const h = zk(g, e, f, g, e);
        zk(f, g, e, f, g);
        return (16 << ((a ^ h) >> 32 & 255)) + (8 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) >> 24 & 255)) + (32 << ((a ^ h) >> 16 & 255)) ^ 31181;
    }
    function In(a, b, c) {
        ui(Db, a, b, c);
        return ((23 + (lp(Ib[0], Ib[1], Ib[2]) ^ function (a, b, c) {
            Qj(Db, a, b, c);
            const d = Yw(Ib[0], Ib[1], Ib[2], Ib[0], Ib[1]);
            const e = Yw(Ib[2], Ib[0], Ib[1], Ib[2], Ib[0]);
            return (16 << ((d ^ e) >> 8 & 255)) + (24 << ((d ^ e) >> 24 & 255)) + (8 << ((d ^ e) & 255)) + (0 << ((d ^ e) >> 16 & 255));
        }(Ib[0], Ib[1], Ib[2]))) * 8121 + 28411) % 134456;
    }
    const Jn = 20;
    function Mn(b, c, d, e) {
        const f = (0 << (b >> 8 & 255)) + (8 << (b >> 24 & 255)) + (16 << (b & 255)) + (24 << (b >> 16 & 255));
        const g = ~(c & 28082) & 28082 | ~(c & 28082) & c;
        const a = ((d + 27774) * 2147483629 + 2147483587) % 2147483647;
        const i = (e | 43413) & ~(e & 43413);
        const j = $w(f, g, a, i, f);
        Tb(g, a, i, f);
        return ~(j & 54103) & j | ~(j & 54103) & 54103;
    }
    var Fn = Hf.Math.acos;
    Hf.Math.acos = Hf.Math.asin;
    Hf.Math.asin = Fn;
    var Pn = Hf.Math.cos;
    Hf.Math.cos = Hf.Math.sin;
    Hf.Math.sin = Pn;
    const jn = 5;
    function Ln(b, c, d, e, f) {
        const g = ~(b & 46109) & (b | 46109);
        const a = (8 << (c >> 24 & 255)) + (24 << (c >> 16 & 255)) + (16 << (c & 255)) + (0 << (c >> 8 & 255));
        const i = (1013904223 + (d + 10794) * 1664525) % 4294967296;
        const j = function (c, d, e, f, i, j) {
            const a = (0 << (c & 255)) + (8 << (c >> 24 & 255)) + (24 << (c >> 16 & 255)) + (16 << (c >> 8 & 255));
            const k = (2147483587 + (28149 + d) * 2147483629) % 2147483647;
            const m = ((e + 55445) * 22695477 + 1) % 4294967296;
            const h = ((f + 40880) * 1103515245 + 12345) % 2147483648;
            const l = (1 + (i + 3411) * 22695477) % 4294967296;
            const g = (j + 48480) % 65476;
            const n = Mb(a, k, m, h, l);
            wt(g, a, k, m, h, l);
            return n ^ 37410;
        }(g, a, i, ((e + 40857) * 22695477 + 1) % 4294967296, ~(f & 11153) & 11153 | ~(f & 11153) & f, g);
        Zw(a, i);
        return ~(j & 18372) & (j | 18372);
    }
    ⵠΔⲆⵠ = {
        ΔΔᐃⲆⲆΔΔ: () => new Promise((a, b) => {
            Hf.grecaptcha.ready(function () {
                Hf.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
                    action: "validate_recaptcha"
                }).then(function (b) {
                    a(b);
                }).catch(c => {
                    if (Rf) {
                        a(0);
                    } else {
                        console.log(undefined);
                        b(c);
                    }
                });
            });
        }),
        ΔΔⲆΔⵠᐃᐃΔⵠ: function (a) {
            Hf.open(a, "_blank").focus();
        },
        ⵠⲆΔⵠᐃΔΔ: function (a) {
            Hf.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
        },
        ᐃᐃΔⵠⲆΔᐃ: function (a, b) {
            for (var c in a) {
                if (a[c] != b[c]) {
                    return yj;
                }
            }
            return ek;
        },
        ΔⵠⲆᐃⵠⵠᐃᐃᐃ: function (a, b) {
            if (a.length != b.length) {
                return false;
            }
            for (var c = 0; c < a.length; c++) {
                if (typeof a == "object") {
                    if (!this.ᐃᐃΔⵠⲆΔᐃ(a[c], b[c])) {
                        return bk;
                    }
                } else if (a[c] != b[c]) {
                    return bk;
                }
            }
            return true;
        },
        ⲆⵠᐃⵠⵠΔΔ: function (a, b) {
            b.x = a.x;
            b.y = a.y;
        },
        ⲆⵠⵠΔⲆⲆⲆ: function (a, b) {
            return {
                x: a.x - b.x,
                y: a.y - b.y
            };
        },
        ⵠⲆᐃΔⵠⵠⲆⲆΔ: function (a, b) {
            a.x *= b;
            a.y *= b;
        },
        ΔᐃⵠⲆⲆΔⵠ: function (a, b) {
            return a.x * b.x + a.y * b.y;
        },
        ᐃⵠⵠⵠⲆⵠᐃ: function (a) {
            return Math.sqrt(a.x * a.x + a.y * a.y);
        },
        sign: function (a) {
            if (a < 0) {
                return -1;
            } else {
                return 1;
            }
        },
        ⲆⵠΔᐃᐃᐃⲆ: function (a, b) {
            return a.x * b.y - a.y * b.x;
        },
        ⲆΔᐃᐃⲆⲆⵠ: function (b, c, d, e) {
            var f = e - c;
            var g = d - b;
            return Math.atan2(f, g);
        },
        ⵠᐃΔΔⵠⵠⲆ: function (a, b) {
            return Math.asin(this.ΔᐃⵠⲆⲆΔⵠ(a, b) / (this.ᐃⵠⵠⵠⲆⵠᐃ(a) * this.ᐃⵠⵠⵠⲆⵠᐃ(b))) * this.sign(this.ⲆⵠΔᐃᐃᐃⲆ(a, b));
        },
        ⵠΔⵠⵠΔⵠΔ: function (a) {
            ΔⵠⵠⵠⲆⵠΔ = location.href;
            a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ΔⵠⵠⵠⲆⵠΔ);
            if (b === null) {
                return null;
            } else {
                return b[1];
            }
        },
        ⵠᐃⲆᐃⵠⲆⵠ: function (a, b) {
            var c = Math.PI * 2;
            b = (b % c + c) % c;
            if (Math.abs(a - b) > Math.PI) {
                if (a > b) {
                    return b + c;
                } else {
                    return b - c;
                }
            } else {
                return b;
            }
        },
        ᐃⵠⲆΔΔᐃⲆ: function (a, b) {
            return this.ⵠᐃΔΔⵠⵠⲆ({
                x: 1,
                y: 0
            }, this.ⲆⵠⵠΔⲆⲆⲆ(a, b));
        },
        ᐃⲆᐃⲆ: function (a, b) {
            return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
        },
        ⲆⵠᐃⲆᐃΔⲆ: function (a, b) {
            return {
                x: Math.sin(b) * a,
                y: Math.cos(b) * a
            };
        },
        ⵠᐃΔᐃᐃⵠΔ: function (a, b) {
            a.x += b.x;
            a.y += b.y;
        },
        ⲆΔᐃΔⵠⵠⵠ: function (a, b) {
            a.x -= b.x;
            a.y -= b.y;
        },
        ᐃⵠⵠⵠᐃΔⵠᐃⲆ: function (a, b, c) {
            a.x += b;
            a.y += c;
        },
        ⲆⲆⲆⲆᐃΔⵠᐃⲆ: function (a, b, c) {
            return {
                x: a.x + b,
                y: a.y + c
            };
        },
        ⵠⵠⲆⲆᐃ: function (a, b, c) {
            a.x += Math.sin(c) * b;
            a.y += Math.cos(c) * b;
        },
        ⲆⵠΔᐃⵠᐃⲆ: function (a, b) {
            return Math.floor((a - b) / 2);
        },
        ⲆΔⲆᐃⵠᐃⲆ: function (a, b) {
            return {
                x: (a.x + b.x) / 2,
                y: (a.y + b.y) / 2
            };
        },
        ᐃᐃⲆΔⵠΔⲆ: function () {
            if (Math.random() > 0.5) {
                return 1;
            } else {
                return -1;
            }
        },
        ΔⲆⵠⲆᐃᐃΔⵠⵠ: function (b, c, d) {
            var e = this.ᐃᐃⲆΔⵠΔⲆ();
            var f = this.ᐃᐃⲆΔⵠΔⲆ();
            var g = Math.random() * Math.PI / 2;
            return {
                x: Math.floor(b + Math.sin(g) * e * d),
                y: Math.floor(c + Math.cos(g) * f * d)
            };
        },
        ⲆⵠⵠⲆⲆΔᐃⵠᐃ: function (a, b, c, d) {
            this.x = a;
            this.y = b;
            this.w = c;
            this.ⵠⲆⵠ = d;
        },
        ᐃΔⲆⵠΔⲆⵠⵠⲆ: function (a) {
            ⵠΔᐃ = [];
            ⵠΔᐃ.push.apply(ⵠΔᐃ, a);
            var b = [];
            while (ⵠΔᐃ.length > 0) {
                var c = Math.floor(Math.random() * ⵠΔᐃ.length);
                b.push(ⵠΔᐃ[c]);
                ⵠΔᐃ.splice(c, 1);
            }
            return b;
        },
        ⵠⲆΔᐃⲆⵠΔ: function (a) {
            if (a >= 20000) {
                a = (a - 20000) * 1000;
            } else if (a >= 10000) {
                a = (a - 10000) * 100;
            }
            return a;
        },
        ⲆⵠⲆⲆΔᐃᐃ: function (b) {
            if (typeof b !== "number") {
                return "0";
            }
            if (b >= 10000) {
                var c = Math.floor(Math.log10(b)) - 2;
                var d = Math.max(0, 3 - c);
                var e = Math.floor(b / 1000).toString();
                if (d) {
                    for (var f = (e += "." + (b % 1000 / 1000).toString().substring(2).substring(0, d)).length - 1, g = 0; f > 0 && e[f] == "0"; f--) {
                        g++;
                    }
                    if ((e = e.substring(0, e.length - g))[e.length - 1] == ".") {
                        e = e.substring(0, e.length - 1);
                    }
                }
                return e += "k";
            }
            return b.toString();
        },
        ΔⲆⵠⲆⵠᐃⵠ: function (a) {
            return a * (2 - a);
        },
        ᐃⲆⲆⵠᐃᐃⲆ: function (a) {
            return --a * a * a + 1;
        },
        ⵠΔⲆⵠⵠ: function (a) {
            if (a < 0.5) {
                return a * 2 * a;
            } else {
                return (4 - a * 2) * a - 1;
            }
        },
        ⲆᐃΔⵠⵠⵠⲆ: function (a) {
            if (a < 0.5) {
                return a * 4 * a * a;
            } else {
                return (a - 1) * (a * 2 - 2) * (a * 2 - 2) + 1;
            }
        },
        ΔⲆᐃⵠⵠᐃⲆⵠⵠ: function (a) {
            if (a < 0.5) {
                return a * 8 * a * a * a;
            } else {
                return 1 - --a * 8 * a * a * a;
            }
        },
        ⵠⵠᐃΔΔⲆⲆ: function (a) {
            return 1 - --a * a * a * a;
        },
        ⲆⵠᐃⵠⵠᐃⲆ: function (a) {
            return 1 + --a * a * a * a * a;
        },
        ⲆⲆⵠΔ: function (b, c, d, e, f, g) {
            this.ᐃⵠⵠ = b;
            this.ⲆᐃΔ = c;
            this.max = d;
            this.min = e;
            this.ⲆⲆᐃΔⵠᐃᐃ = f;
            this.ⵠⵠⲆⲆⲆᐃⲆ = g;
            this.ⵠᐃᐃᐃⵠⵠⲆ = 0;
            this.ⲆΔᐃ = function () {
                if (this.ᐃⵠⵠ) {
                    if ((a = this.ⲆᐃΔ + Lx * this.ⲆⲆᐃΔⵠᐃᐃ) > this.max) {
                        this.ⲆᐃΔ = this.max;
                        this.ᐃⵠⵠ = yj;
                        return Mk;
                    }
                    this.ⲆᐃΔ = a;
                } else {
                    var a;
                    if ((a = this.ⲆᐃΔ - Lx * this.ⵠⵠⲆⲆⲆᐃⲆ) < this.min) {
                        this.ⲆᐃΔ = this.min;
                        this.ᐃⵠⵠ = true;
                    } else {
                        this.ⲆᐃΔ = a;
                    }
                }
            };
            return bk;
        },
        ᐃΔⵠΔΔ: function (b, c, d, e, f, g) {
            this.ⲆⵠΔⲆⲆ = b;
            this.ⵠⵠⵠⵠⲆ = c;
            this.ⵠⲆⲆⲆⲆ = d;
            this.ᐃΔⵠΔⲆ = e;
            this.x = f;
            this.ΔᐃⲆⵠᐃ = g;
            this.ⵠⲆᐃΔⲆⲆΔ = function () {
                this.x = this.ΔᐃΔΔⲆⵠⲆΔⵠ;
                this.ⵠⵠⵠⵠⲆ = 0;
            };
            this.ΔⲆⵠⵠΔⵠΔ = function (a) {
                if (a !== this.ΔᐃⲆⵠᐃ) {
                    this.ΔᐃⲆⵠᐃ = a;
                    this.ᐃΔⵠΔⲆ = this.x;
                    this.ⵠⵠⵠⵠⲆ = 0;
                }
                if (this.ΔᐃⲆⵠᐃ !== this.x) {
                    this.ⵠⵠⵠⵠⲆ += Lx;
                    if (this.ⵠⵠⵠⵠⲆ > this.ⵠⲆⲆⲆⲆ) {
                        this.x = this.ΔᐃⲆⵠᐃ;
                    } else {
                        var b = this.ⲆⵠΔⲆⲆ(this.ⵠⵠⵠⵠⲆ / this.ⵠⲆⲆⲆⲆ);
                        this.x = this.ᐃΔⵠΔⲆ + (this.ΔᐃⲆⵠᐃ - this.ᐃΔⵠΔⲆ) * b;
                    }
                }
            };
        },
        ᐃⲆΔⵠᐃⵠⵠ: function (b, c, d, e, f, g, a, i, j) {
            this.ⲆⵠΔⲆⲆ = b;
            this.ⵠⵠⵠⵠⲆ = c;
            this.ⵠⲆⲆⲆⲆ = d;
            this.ᐃΔⵠΔⲆ = e;
            this.ⲆⵠⵠΔΔ = f;
            this.x = g;
            this.y = a;
            this.ΔᐃⲆⵠᐃ = i;
            this.ΔⲆⲆᐃⲆΔⲆ = j;
            this.ΔⲆⵠⵠΔⵠΔ = function (a) {
                if (a.x != this.ΔᐃⲆⵠᐃ || a.y != this.ΔⲆⲆᐃⲆΔⲆ) {
                    this.ΔᐃⲆⵠᐃ = a.x;
                    this.ΔⲆⲆᐃⲆΔⲆ = a.y;
                    this.ᐃΔⵠΔⲆ = this.x;
                    this.ⲆⵠⵠΔΔ = this.y;
                    this.ⵠⵠⵠⵠⲆ = 0;
                }
                if (this.ΔᐃⲆⵠᐃ != this.x || this.ΔⲆⲆᐃⲆΔⲆ != this.y) {
                    this.ⵠⵠⵠⵠⲆ += Lx;
                    if (this.ⵠⵠⵠⵠⲆ > this.ⵠⲆⲆⲆⲆ) {
                        this.x = this.ΔᐃⲆⵠᐃ;
                        this.y = this.ΔⲆⲆᐃⲆΔⲆ;
                    } else {
                        var b = this.ⲆⵠΔⲆⲆ(this.ⵠⵠⵠⵠⲆ / this.ⵠⲆⲆⲆⲆ);
                        this.x = this.ᐃΔⵠΔⲆ + (this.ΔᐃⲆⵠᐃ - this.ᐃΔⵠΔⲆ) * b;
                        this.y = this.ⲆⵠⵠΔΔ + (this.ΔⲆⲆᐃⲆΔⲆ - this.ⲆⵠⵠΔΔ) * b;
                    }
                }
            };
        },
        ⲆⲆⵠⵠⵠⵠⵠ: function (a) {
            var b = "";
            for (var c = 0; c < a; c++) {
                b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
            }
            return b;
        },
        ΔⵠⲆᐃⲆᐃᐃ: function (a, b) {
            b ||= location.href;
            a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
            if (c == null) {
                return null;
            } else {
                return c[1];
            }
        },
        ⵠⵠⲆΔⵠ: function (a) {
            let b = "";
            const c = a.length;
            for (let d = 0; d < c; d++) {
                b += String.fromCharCode(a[d]);
            }
            return b;
        },
        ⵠⲆΔⵠΔⵠᐃ: function (a, b) {
            if (a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.ⵠⲆⵠ) {
                return Re;
            } else {
                return yj;
            }
        },
        ᐃΔΔΔΔⲆᐃ: function (b, c, d, e, f, g, a, h) {
            if (Math.max(b, f) < Math.min(c, g) && Math.max(d, a) < Math.min(e, h)) {
                return 1;
            } else {
                return 0;
            }
        },
        ⲆᐃⲆΔⵠᐃΔ: function (a, b, c) {
            return (1 - c) * a + c * b;
        },
        ⲆⵠΔΔⲆᐃⲆ: function (a) {
            return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
        }
    };
    Math.sign = Math.sign || function (a) {
        if (a === 0) {
            return 0;
        } else if (a > 0) {
            return 1;
        } else {
            return -1;
        }
    };
    const Gn = 2;
    function Qn(a, b, c, d) {
        Di(Db, a, b, c, d);
        const e = ((87 + ((8 << ((Ib[0] ^ Ib[1]) >> 8 & 255)) + (16 << ((Ib[0] ^ Ib[1]) >> 16 & 255)) + (24 << ((Ib[0] ^ Ib[1]) & 255)) + (0 << ((Ib[0] ^ Ib[1]) >> 24 & 255)) ^ Ib[2])) * 16807 + 0) % 2147483647;
        return (16 << ((e ^ Ib[3]) >> 24 & 255)) + (8 << ((e ^ Ib[3]) >> 16 & 255)) + (24 << ((e ^ Ib[3]) & 255)) + (0 << ((e ^ Ib[3]) >> 8 & 255));
    }
    Math.log10 = Math.log10 || function (a) {
        return Math.log(a) / Math.ⲆᐃⲆⵠⵠⵠⲆⲆΔ;
    };
    const On = 7;
    function Nn(b, c, d, e, f, i) {
        const a = ((b + 51787) * 214013 + 2531011) % 4294967296;
        const j = ~(c & 29116) & c | ~(c & 29116) & 29116;
        const k = ~(d & 23428) & d | ~(d & 23428) & 23428;
        const h = (16 << (e & 255)) + (8 << (e >> 24 & 255)) + (0 << (e >> 8 & 255)) + (24 << (e >> 16 & 255));
        const l = (i | 36833) & ~(i & 36833);
        const g = function (b, c, d, e, f) {
            const i = (24 << (b & 255)) + (8 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (0 << (b >> 24 & 255));
            const a = (24 << (c & 255)) + (16 << (c >> 16 & 255)) + (0 << (c >> 24 & 255)) + (8 << (c >> 8 & 255));
            const j = ((45919 + d) * 2147483629 + 2147483587) % 2147483647;
            const k = (16 << (e >> 8 & 255)) + (0 << (e >> 16 & 255)) + (24 << (e >> 24 & 255)) + (8 << (e & 255));
            const h = (16 << (f & 255)) + (0 << (f >> 16 & 255)) + (8 << (f >> 8 & 255)) + (24 << (f >> 24 & 255));
            const l = Ln(i, a, j, k, h);
            Tn(i, a, j, k, h);
            return l ^ 13331;
        }(a, j, k, h, (1 + (f + 52068) * 22695477) % 4294967296);
        Mb(l, a, j, k, h);
        return (g | 50616) & ~(g & 50616);
    }
    const qn = 0;
    const Hn = 255;
    const Rn = 12;
    (function (a) {
        var b = false;
        if (typeof ⵠⵠⲆⵠⵠᐃⲆ === "function" && ⵠⵠⲆⵠⵠᐃⲆ.ⲆⲆⵠΔⵠⵠΔ) {
            ⵠⵠⲆⵠⵠᐃⲆ(a);
            b = Re;
        }
        if (typeof ΔⲆⲆⲆⵠΔΔ === "object") {
            ΔⲆᐃⵠΔΔⲆᐃᐃ.exports = a();
            b = ek;
        }
        if (!b) {
            var c = Hf.ΔⲆⲆΔ;
            var d = Hf.ΔⲆⲆΔ = a();
            d.ⲆΔΔⵠᐃᐃⵠᐃⲆ = function () {
                Hf.ΔⲆⲆΔ = c;
                return d;
            };
        }
    })(function () {
        function b() {
            for (var a = 0, b = {}; arguments.length > a; a++) {
                var c = arguments[a];
                for (var d in c) {
                    b[d] = c[d];
                }
            }
            return b;
        }
        return function a(c) {
            function d(e, f, g) {
                var j;
                if (typeof document !== "undefined") {
                    if (arguments.length > 1) {
                        g = b({
                            path: "/"
                        }, d.ⲆᐃⵠᐃΔⲆⵠ, g);
                        if (typeof g.expires === "number") {
                            var k = new Date();
                            k.setMilliseconds(k.getMilliseconds() + g.expires * 86400000);
                            g.expires = k;
                        }
                        try {
                            j = JSON.stringify(f);
                            if (/^[\{\[]/.test(j)) {
                                f = j;
                            }
                        } catch (a) { }
                        f = c.write ? c.write(f, e) : encodeURIComponent(String(f)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
                        e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
                        return document.cookie = [e, "=", f, g.expires ? "; expires=" + g.expires.toUTCString() : "", g.path ? "; path=" + g.path : "", g.domain ? "; domain=" + g.domain : "", g.ⲆⲆⵠⵠⵠᐃⲆΔᐃ ? "; secure" : ""].join("");
                    }
                    if (!e) {
                        j = {};
                    }
                    for (var m = document.cookie ? document.cookie.split("; ") : [], h = /(%[0-9A-Z]{2})+/g, l = 0; l < m.length; l++) {
                        var n = m[l].split("=");
                        var p = n.slice(1).join("=");
                        if (p.charAt(0) === "\"") {
                            p = p.slice(1, -1);
                        }
                        try {
                            var q = n[0].replace(h, decodeURIComponent);
                            p = c.read ? c.read(p, q) : c(p, q) || p.replace(h, decodeURIComponent);
                            if (this.json) {
                                try {
                                    p = JSON.parse(p);
                                } catch (a) { }
                            }
                            if (e === q) {
                                j = p;
                                break;
                            }
                            if (!e) {
                                j[q] = p;
                            }
                        } catch (a) { }
                    }
                    return j;
                }
            }
            d.set = d;
            d.get = function (a) {
                return d.call(d, a);
            };
            d.ⵠΔΔΔⲆⵠⲆΔⵠ = function () {
                return d.apply({
                    json: Re
                }, [].slice.call(arguments));
            };
            d.ⲆᐃⵠᐃΔⲆⵠ = {};
            d.remove = function (a, c) {
                d(a, "", b(c, {
                    expires: -1
                }));
            };
            d.ⲆⲆⵠⲆΔΔⵠᐃΔ = a;
            return d;
        }(function () { });
    });
    const Sn = 6;
    const Kn = 4;
    function Tn(b, c, d, e, f) {
        const i = ~(b & 49511) & b | ~(b & 49511) & 49511;
        const a = ~(c & 11979) & (c | 11979);
        const j = ((d + 2190) * 214013 + 2531011) % 4294967296;
        const k = (24 << (e >> 8 & 255)) + (0 << (e >> 24 & 255)) + (8 << (e & 255)) + (16 << (e >> 16 & 255));
        const h = ~(f & 40989) & f | ~(f & 40989) & 40989;
        const l = Sx(i, a, j, k, h);
        wt(i, a, j, k, h, i);
        return ~(l & 40287) & (l | 40287);
    }
    const Un = O;
    const Vn = 18;
    var Wn = document.getElementById("game_canvas");
    const Xn = 20;
    const Yn = 19;
    const Zn = 13;
    const $n = 255;
    const _n = 20;
    var ao = Wn.getContext("2d");
    const eo = yj;
    var io = Wn.width;
    var no = Wn.height;
    var oo = Wn.width / 2;
    const ro = 16;
    const so = 255;
    const bo = 5;
    var to = Wn.height / 2;
    var uo = {
        x: oo,
        y: to
    };
    const vo = 3;
    var po = 1;
    var Ep = 1;
    var aq = -1;
    var bq = "J" + ka;
    var cq = "S" + Ka;
    var dq = Hf;
    const wo = 2;
    const Po = 14;
    var ko;
    const eq = 256;
    const xo = 14;
    var Jo;
    var fq = (Ho = "O") + "N";
    var gq = 0;
    const Do = 8;
    var Eo = dq;
    const Io = cn;
    cq = "N";
    var So;
    var hq = "J";
    const iq = 2;
    const Fo = 7;
    const Ro = ek;
    const jo = 17;
    const Lo = 2729772;
    const Go = 2729772 .ⵠΔⲆⵠΔΔᐃΔⲆ;
    const Wo = `const ᐃΔⲆΔⵠᐃᐃ = (typeof ΔΔΔⲆᐃᐃΔ === "${Go}") ? 1 : 0; return ᐃΔⲆΔⵠᐃᐃ;`;
    const Oo = 1;
    const No = 17;
    const qo = 100;
    var Ho = "O" + ka;
    const jq = 12;
    const Yo = 255;
    var Ko = Eo;
    const Vo = 20;
    var Xo;
    const kq = 10;
    const $o = 9;
    const ea = 15;
    var ia = Ko;
    const ta = 11;
    const na = bk;
    fq = "N" + undefined;
    const oa = 7;
    const aa = 18;
    const ra = 18;
    const sa = 255;
    var ha = ia;
    const la = 100;
    const ua = 15;
    var ba;
    const lq = 13;
    const va = 14;
    const ca = 100;
    const ma = Mk;
    const pa = 2;
    const Ca = 8;
    var Ta;
    var mq;
    var nq = ha;
    const ya = 256;
    const wa = 14;
    const Pa = 4;
    var ka;
    var oq = nq;
    const xa = 7;
    var Ja;
    const pq = 6;
    var Ba = oq;
    hq = "O";
    const qq = 19;
    const Ea = 18;
    const Ia = 16;
    var Sa;
    const rq = 7;
    var _a = Ba = oq;
    const Fa = cn;
    var Ra;
    const sq = 255;
    const La = 10;
    const Ga = 9;
    const Wa = 5;
    const Oa = 3;
    const Na = 0;
    const qa = 12;
    const Ha = 255;
    var Ua = _a;
    const Ya = 20;
    var Ka = "J" + (Sa = "S");
    const Va = 6;
    const Xa = 10;
    const Za = 20;
    function $a(a) {
        var b = new Image();
        b.src = a.toDataURL("image/png");
        b.width = a.width;
        b.height = a.height;
        b.ΔᐃᐃᐃΔΔⵠ = 1;
        return b;
    }
    Wn.oncontextmenu = function () {
        return na;
    };
    bq = "J";
    const tq = 256;
    const uq = 18;
    const vq = 0;
    hq += bq = cq;
    const wq = 17;
    const xq = Ro;
    Ho = fq;
    fq = ka;
    ka = Ka;
    const yq = 255;
    const zq = 1;
    const Aq = 16;
    const Bq = yj;
    const Cq = 16;
    const Dq = 1;
    const Eq = 13;
    Ho = Ka;
    Xo = ba = Ka + hq;
    cq = hq + bq;
    Ta = ko = Jo = Ka + hq;
    const Fq = 16;
    const Gq = 20;
    const Hq = 19;
    Ho = Ka + hq;
    const Iq = 2;
    const Jq = 100;
    const Kq = 8;
    mq = Jo;
    const Lq = 11;
    fq = Ka + hq;
    Ja = So = ko;
    const Mq = Fa;
    hq = ka = Ka;
    Sa = Jo;
    Ra = ko;
    const Nq = 14;
    bq = Ho;
    const Oq = 15;
    var Pq = Hf.devicePixelRatio || 1;
    var Qq = ao.ΔⵠⵠΔⲆⵠΔΔⵠ || ao.ⵠΔᐃᐃⲆᐃᐃⵠⲆ || ao.ⵠⵠΔᐃⵠⲆᐃΔᐃ || ao.ⲆᐃᐃⵠⵠⵠⵠⵠⲆ || ao.ⲆⵠΔᐃᐃⵠⵠⵠⵠ || 1;
    function Rq() {
        if (Wn.width != Hf.innerWidth) {
            Wn.width = Hf.innerWidth;
            io = Wn.width;
            oo = Wn.width / 2;
        }
        if (Hf.innerHeight != Wn.height) {
            Wn.height = Hf.innerHeight;
            no = Wn.height;
            to = Wn.height / 2;
        }
        uo = {
            x: oo,
            y: to
        };
        var a = Wn.width;
        var b = Wn.height;
        Ep = aq === -1 ? Pq / Qq : aq;
        Wn.width = a * Ep;
        Wn.height = Ep * b;
        Wn.style.width = a + "px";
        Wn.style.height = b + "px";
        ao.scale(Ep, Ep);
        if (Ex) {
            Ex.ⵠⵠⵠ.ⲆᐃⲆⵠᐃΔⵠ = a;
            Ex.ⵠⵠⵠ.ΔⲆⲆᐃΔΔᐃ = b;
        }
        if (Mx.ΔΔΔᐃⵠ) {
            Mx.ⲆΔᐃ();
        } else if (Ax.ΔΔΔᐃⵠ) {
            Ax.ⲆΔᐃ();
        } else if (Gx.ΔΔΔᐃⵠ) {
            Gx.ⲆΔᐃ();
        } else if (Fx.ΔΔΔᐃⵠ) {
            Fx.ⲆΔᐃ();
        }
    }
    const Sq = 1;
    var Tq = document.getElementById("game_body");
    Tq.ondragstart = function () {
        return false;
    };
    const Uq = 15;
    Tq.ondrop = function () {
        return bk;
    };
    const Vq = cn;
    Tq.onresize = Rq;
    const Wq = 12;
    function Xq(b, c, d, e) {
        const f = (8 << (b >> 16 & 255)) + (16 << (b & 255)) + (24 << (b >> 8 & 255)) + (0 << (b >> 24 & 255));
        const g = c ^ 33111;
        const a = (0 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 8 & 255)) + (24 << (d >> 0 & 255));
        const i = e ^ 49438;
        const j = Nn(f, g, a, i, f, g);
        const h = Sx(a, i, f, g, a);
        return (0 << ((j ^ h) & 255)) + (8 << ((j ^ h) >> 16 & 255)) + (24 << ((j ^ h) >> 8 & 255)) + (16 << ((j ^ h) >> 24 & 255));
    }
    function Yq(b, c, d, e, f, g) {
        Ej(Db, b, c, d, e, f, g);
        const a = lp(Ib[0], Ib[1], Ib[2]);
        (function (a, b, c) {
            Ti(Db, a, b, c);
            const d = nb(Ib[0], Ib[1], Ib[2], Ib[0], Ib[1], Ib[2]);
            const e = function (b, c, d, e) {
                Ve(Db, b, c, d, e);
                const f = nb(Ib[0], Ib[1], Ib[2], Ib[3], Ib[0], Ib[1]);
                const g = ut(Ib[2], Ib[3], Ib[0], Ib[1]);
                return ((80 + (f ^ g)) * 48271 + 0) % 2147483647;
            }(Ib[0], Ib[1], Ib[2], Ib[0]);
        })(Ib[3], Ib[4], Ib[5]);
        return ~(a & 23871) & (a | 23871);
    }
    function Zq(b, c, d, e) {
        const f = (2531011 + (b + 49426) * 214013) % 4294967296;
        const g = (16 << (c >> 16 & 255)) + (8 << (c >> 8 & 255)) + (0 << (c >> 24 & 255)) + (24 << (c & 255));
        const a = ((d + 23205) * 2147483629 + 2147483587) % 2147483647;
        const h = e ^ 40004;
        return ((36387 + (kx(f, g) ^ Tn(a, h, f, g, a))) * 2147483629 + 2147483587) % 2147483647;
    }
    (function () {
        var a = 0;
        for (var b = ["ms", "moz", "webkit", "o"], c = 0; c < b.length && !Hf.requestAnimationFrame; ++c) {
            Hf.requestAnimationFrame = Hf[b[c] + "RequestAnimationFrame"];
            Hf.cancelAnimationFrame = Hf[b[c] + "CancelAnimationFrame"] || Hf[b[c] + "CancelRequestAnimationFrame"];
        }
        if (!Hf.requestAnimationFrame) {
            Hf.requestAnimationFrame = function (b, c) {
                var d = new Date().getTime();
                var e = Math.max(0, 16 - (d - a));
                var f = Hf.setTimeout(function () {
                    b(d + e);
                }, e);
                a = d + e;
                return f;
            };
        }
        if (!Hf.cancelAnimationFrame) {
            Hf.cancelAnimationFrame = function (a) {
                clearTimeout(a);
            };
        }
    })();
    const $q = 7;
    function _q(a, b) {
        const c = a ^ 13711;
        const d = (24 << (b & 255)) + (16 << (b >> 24 & 255)) + (8 << (b >> 16 & 255)) + (0 << (b >> 8 & 255));
        return (29609 + (Zq(c, d, c, d) ^ kx(c, d))) % 65302;
    }
    const br = 13;
    const cr = 18;
    const dr = Re;
    var fr = navigator.language || navigator.userLanguage;
    const gr = 6;
    var hr = -new Date().getTimezoneOffset() / 60;
    var ir = "Europe";
    const jr = 4;
    const kr = 17;
    var lr = "South America";
    const mr = Lk;
    const nr = 17;
    const or = 256;
    const pr = 100;
    const qr = 5;
    var rr = ir;
    if (hr >= -2 && hr <= 2) {
        rr = ir;
    } else if (hr > 2 && hr <= 5) {
        rr = "Russia";
    } else if (hr > 5 && hr <= 9) {
        rr = "Asia";
    } else if (hr > 9) {
        rr = "Australia";
    } else if (hr >= -5 && hr < -2) {
        rr = fr === "pt-BR" || fr === "pt-br" || fr === "pt" || fr === "pt-pt" ? lr : "North America";
    } else if (hr < -5) {
        rr = fr === "pt-BR" || fr === "pt-br" || fr === "pt" || fr === "pt-pt" ? lr : "West America";
    }
    var lk = {
        ⲆᐃⵠⲆⲆⲆⲆ: function (a) {
            var b = 2147483648;
            var c = a || Math.floor((b - 1) * Math.random());
            this.ⵠᐃᐃΔΔ = function (a) {
                c = a || Math.floor((b - 1) * Math.random());
            };
            this.get = function () {
                return (c = (c * 1103515245 + 12345) % b) / b;
            };
        }
    };
    function sr(a, b, c) {
        Aj(Db, a, b, c);
        const d = Bb(Ib[0], Ib[1], Ib[2], Ib[0], Ib[1]);
        bx(Ib[2], Ib[0]);
        return ~(d & 11352) & d | ~(d & 11352) & 11352;
    }
    const tr = w;
    function ur(a, b) {
        Ji(Db, a, b);
        return ((94 + (Qn(Ib[0], Ib[1], Ib[0], Ib[1]) ^ Qn(Ib[0], Ib[1], Ib[0], Ib[1]))) * 8121 + 28411) % 134456;
    }
    function vr(b, c, d, e) {
        const f = ((21461 + b) * 2147483629 + 2147483587) % 2147483647;
        const g = ((19046 + c) * 1664525 + 1013904223) % 4294967296;
        const a = ~(d & 32326) & (d | 32326);
        const i = (e | 17680) & ~(e & 17680);
        const j = wt(f, g, a, i, f, g);
        (function (b, c) {
            const d = (24 << (b >> 16 & 255)) + (8 << (b >> 24 & 255)) + (0 << (b >> 0 & 255)) + (16 << (b >> 8 & 255));
            const e = ((28831 + c) * 1103515245 + 12345) % 2147483648;
            const f = Tn(d, e, d, e, d);
            const g = xr(e, d, e, d, e, d);
        })(a, i);
        return j ^ 18384;
    }
    const wr = 16;
    function xr(c, d, e, f, i, j) {
        const a = c ^ 11760;
        const k = ~(d & 39517) & 39517 | ~(d & 39517) & d;
        const m = (8 << (e & 255)) + (24 << (e >> 8 & 255)) + (0 << (e >> 24 & 255)) + (16 << (e >> 16 & 255));
        const h = ~(f & 42669) & f | ~(f & 42669) & 42669;
        const l = ~(i & 28914) & (i | 28914);
        const g = (2531011 + (28307 + j) * 214013) % 4294967296;
        const n = Tn(a, k, m, h, l);
        (function (b, c, d, e, f, g) {
            const a = (16 << (b & 255)) + (8 << (b >> 16 & 255)) + (24 << (b >> 8 & 255)) + (0 << (b >> 24 & 255));
            const i = g ^ 32422;
            const j = xx(a, ~(c & 9950) & 9950 | ~(c & 9950) & c, (d | 11862) & ~(d & 11862), ~(e & 26109) & 26109 | ~(e & 26109) & e, (0 << (f >> 16 & 255)) + (24 << (f & 255)) + (8 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)));
            const h = Zw(i, a);
        })(g, a, k, m, h, l);
        return ~(n & 48699) & 48699 | ~(n & 48699) & n;
    }
    function yr(b, c, d, e, f) {
        const i = ~(b & 31083) & (b | 31083);
        const a = c ^ 14842;
        const j = ~(d & 32390) & 32390 | ~(d & 32390) & d;
        const k = ~(e & 28242) & (e | 28242);
        const h = f ^ 33529;
        const l = hb(i, a, j, k, h);
        eb(i, a, j, k, h);
        return ~(l & 61143) & 61143 | ~(l & 61143) & l;
    }
    const zr = 10;
    var Ar = [[0, "DRAGON", 18, 6, 66, 35, 0], [0, "WINTER", 91, 18, 5, 40, 8], [0, "DESERT", 135, 180, 89, 124, 5], [0, "LAVA", 142, 6, 82, 99, 6], [0, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, 6, 90, 150, 0], [1, "b", 0, 5, 175, 0], [1, "t", 2, 5, 174, 0], [1, "t", 5, 5, 173, 0], [1, "b", 3, 5, 176, 0], [1, "t", 0, 5, 177, 0], [1, "t", 3, 5, 178, 0], [1, "t", 4, 5, 179, 0], [1, "b", 0, 5, 180, 0], [1, "t", 5, 5, 181, 0], [1, "b", 2, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [1, "t", 2, 5, 186, 0], [1, "t", 0, 5, 187, 0], [1, "t", 5, 5, 188, 0], [1, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, 0], [1, "t", 4, 5, 191, 0], [1, "b", 3, 5, 192, 0], [1, "t", 5, 5, 193, 0], [1, "t", 0, 5, 194, 0], [1, "t", 3, 5, 195, 0], [1, "b", 0, 5, 196, 0], [1, "t", 5, 5, 197, 0], [1, "t", 2, 5, 198, 0], [1, "b", 2, 5, 199, 0], [1, "t", 4, 5, 200, 0], [1, "t", 1, 5, 201, 0], [1, "b", 1, 5, 202, 0], [1, "t", 5, 5, 203, 0], [1, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, 0], [1, "b", 2, 5, 206, 0], [1, "t", 1, 5, 207, 0], [1, "t", 4, 5, 208, 0], [1, "t", 2, 5, 209, 0], [1, "b", 0, 5, 210, 0], [1, "t", 5, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", 2, 5, 213, 0], [1, "b", 3, 5, 214, 0], [1, "t", 5, 5, 215, 0], [1, "b", 0, 5, 216, 0], [1, "t", 4, 5, 217, 0], [1, "t", 2, 5, 218, 0], [1, "t", 1, 5, 219, 0], [1, "t", 3, 5, 220, 0], [1, "t", 5, 5, 221, 0], [1, "t", 2, 5, 222, 0], [1, "t", 4, 5, 223, 0], [1, "b", 3, 5, 224, 0], [1, "t", 1, 5, 225, 0], [1, "t", 3, 5, 226, 0], [1, "b", 0, 5, 227, 0], [1, "t", 3, 5, 228, 0], [1, "t", 5, 5, 229, 0], [1, "t", 2, 5, 230, 0], [1, "t", 0, 5, 231, 0], [1, "b", 2, 5, 232, 0], [1, "t", 1, 5, 233, 0], [1, "t", 4, 5, 234, 0], [1, "b", 1, 5, 235, 0], [1, "t", 4, 5, 236, 0], [1, "t", 2, 5, 237, 0], [1, "t", 0, 5, 238, 0], [1, "t", 4, 5, 239, 0], [1, "b", 2, 5, 240, 0], [1, "t", 5, 5, 241, 0], [1, "b", 1, 5, 242, 0], [1, "t", 4, 5, 243, 0], [1, "t", 2, 5, 244, 0], [1, "t", 1, 5, 245, 0], [1, "b", 1, 5, 246, 0], [1, "t", 3, 5, 247, 0], [1, "b", 2, 5, 248, 0], [1, "t", 5, 5, 249, 0], [1, "t", 2, 5, 250, 0], [1, "t", 4, 5, 251, 0], [1, "b", 1, 5, 252, 0], [1, "t", 4, 5, 253, 0], [1, "t", 1, 5, 254, 0], [1, "t", 3, 5, 255, 0], [1, "t", 5, 5, 256, 0], [1, "b", 2, 5, 257, 0], [1, "t", 4, 5, 258, 0], [1, "b", 3, 5, 259, 0], [1, "t", 5, 5, 260, 0], [1, "b", 0, 5, 261, 0], [1, "t", 3, 5, 262, 0], [1, "t", 4, 5, 263, 0], [1, "t", 2, 5, 264, 0], [1, "b", 1, 5, 265, 0], [1, "b", 2, 5, 266, 0], [1, "t", 3, 5, 267, 0], [1, "t", 4, 5, 268, 0], [1, "t", 0, 5, 269, 0], [1, "t", 5, 5, 270, 0], [1, "t", 3, 5, 271, 0], [1, "t", 4, 5, 272, 0], [1, "t", 1, 5, 273, 0], [1, "b", 2, 5, 274, 0], [1, "t", 1, 5, 275, 0], [1, "t", 4, 5, 276, 0], [1, "b", 1, 5, 277, 0], [1, "b", 2, 5, 278, 0], [1, "t", 1, 5, 279, 0], [1, "t", 4, 5, 280, 0], [1, "t", 2, 5, 281, 0], [1, "t", 5, 5, 282, 0], [1, "b", 2, 5, 283, 0], [1, "t", 1, 5, 284, 0], [1, "b", 3, 5, 285, 0], [1, "t", 4, 5, 286, 0], [1, "t", 0, 5, 287, 0], [1, "t", 5, 5, 288, 0], [1, "t", 2, 5, 289, 0], [1, "b", 1, 5, 290, 0], [1, "t", 4, 5, 292, 0], [1, "t", 2, 5, 291, 0], [1, "b", 2, 5, 293, 0], [1, "t", 1, 5, 294, 0], [1, "t", 3, 5, 295, 0], [1, "t", 5, 5, 296, 0], [1, "b", 0, 5, 297, 0], [1, "b", 3, 5, 298, 0], [1, "t", 4, 5, 299, 0], [1, "t", 2, 5, 300, 0], [1, "t", 4, 5, 301, 0], [1, "b", 0, 5, 302, 0], [1, "b", 2, 5, 303, 0], [1, "t", 1, 6, 303, 0], [1, "t", 2, 7, 303, 0], [1, "t", 1, 5, 304, 0], [1, "t", 3, 6, 304, 0], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", 1, 8, 304, 0], [1, "b", 2, 9, 304, 0], [1, "b", 3, 12, 303, 0], [1, "b", 3, 17, 304, 0], [1, "t", 1, 9, 303, 0], [1, "t", 1, 15, 304, 0], [1, "t", 1, 13, 303, 0], [1, "t", 3, 10, 303, 0], [1, "t", 3, 14, 304, 0], [1, "t", 4, 10, 304, 0], [1, "t", 5, 11, 304, 0], [1, "t", 5, 14, 303, 0], [1, "t", 5, 16, 304, 0], [1, "t", 5, 13, 304, 0], [1, "t", 2, 12, 304, 0], [1, "t", 1, 11, 303, 0], [1, "b", 3, 15, 303, 0], [1, "b", 0, 16, 303, 0], [1, "t", 3, 17, 303, 0], [1, "t", 4, 18, 303, 0], [1, "t", 2, 19, 303, 0], [1, "t", 1, 20, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, 0], [1, "t", 4, 23, 303, 0], [1, "b", 3, 24, 303, 0], [1, "t", 5, 25, 303, 0], [1, "t", 1, 26, 303, 0], [1, "t", 2, 27, 303, 0], [1, "t", 4, 28, 303, 0], [1, "b", 0, 18, 304, 0], [1, "t", 2, 19, 304, 0], [1, "t", 5, 20, 304, 0], [1, "b", 2, 21, 304, 0], [1, "t", 4, 22, 304, 0], [1, "t", 2, 23, 304, 0], [1, "t", 1, 24, 304, 0], [1, "t", 3, 25, 304, 0], [1, "t", 0, 27, 304, 0], [1, "t", 5, 26, 304, 0], [1, "b", 2, 28, 304, 0], [1, "t", 1, 29, 304, 0], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, 0], [1, "t", 4, 31, 303, 0], [1, "t", 0, 32, 303, 0], [1, "t", 5, 33, 303, 0], [1, "t", 2, 34, 303, 0], [1, "t", 4, 35, 303, 0], [1, "t", 1, 36, 303, 0], [1, "b", 3, 37, 303, 0], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", 1, 31, 304, 0], [1, "b", 1, 33, 304, 0], [1, "t", 2, 35, 304, 0], [1, "t", 5, 34, 304, 0], [1, "b", 2, 36, 304, 0], [1, "t", 5, 37, 304, 0], [1, "t", 1, 38, 304, 0], [1, "b", 1, 40, 303, 0], [1, "t", 3, 39, 303, 0], [1, "t", 3, 42, 304, 0], [1, "t", 5, 38, 303, 0], [1, "t", 5, 39, 304, 0], [1, "t", 5, 41, 303, 0], [1, "t", 4, 41, 304, 0], [1, "t", 4, 44, 303, 0], [1, "b", 2, 40, 304, 0], [1, "b", 2, 43, 303, 0], [1, "t", 1, 42, 303, 0], [1, "t", 1, 43, 304, 0], [1, "t", 5, 44, 304, 0], [1, "b", 1, 45, 303, 0], [1, "t", 2, 45, 304, 0], [1, "t", 2, 46, 303, 0], [1, "t", 4, 47, 303, 0], [1, "b", 0, 48, 303, 0], [1, "t", 5, 49, 303, 0], [1, "t", 2, 50, 303, 0], [1, "t", 1, 51, 303, 0], [1, "t", 4, 52, 303, 0], [1, "t", 5, 46, 304, 0], [1, "t", 2, 47, 304, 0], [1, "t", 5, 48, 304, 0], [1, "t", 1, 49, 304, 0], [1, "t", 2, 50, 304, 0], [1, "b", 1, 53, 303, 0], [1, "b", 2, 51, 304, 0], [1, "t", 5, 52, 304, 0], [1, "t", 3, 53, 304, 0], [1, "b", 2, 54, 303, 0], [1, "t", 5, 54, 304, 0], [1, "t", 5, 55, 303, 0], [1, "t", 3, 56, 303, 0], [1, "t", 4, 57, 303, 0], [1, "t", 5, 58, 303, 0], [1, "b", 1, 55, 304, 0], [1, "t", 2, 56, 304, 0], [1, "t", 0, 57, 304, 0], [1, "t", 3, 58, 304, 0], [1, "t", 3, 63, 304, 0], [1, "t", 3, 59, 303, 0], [1, "t", 4, 59, 304, 0], [1, "t", 5, 60, 303, 0], [1, "t", 0, 60, 304, 0], [1, "t", 0, 66, 303, 0], [1, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, 0], [1, "t", 3, 67, 303, 0], [1, "t", 3, 73, 304, 0], [1, "t", 3, 76, 303, 0], [1, "t", 3, 78, 304, 0], [1, "t", 1, 61, 303, 0], [1, "t", 1, 73, 303, 0], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, 0], [1, "b", 2, 70, 303, 0], [1, "t", 5, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, 0], [1, "t", 5, 77, 304, 0], [1, "t", 5, 75, 303, 0], [1, "t", 5, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, 0], [1, "t", 3, 63, 303, 0], [1, "t", 5, 82, 304, 0], [1, "b", 2, 65, 304, 0], [1, "t", 1, 64, 303, 0], [1, "t", 1, 68, 304, 0], [1, "t", 2, 69, 304, 0], [1, "t", 4, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", 0, 71, 303, 0], [1, "t", 4, 72, 303, 0], [1, "t", 4, 74, 304, 0], [1, "t", 2, 74, 303, 0], [1, "t", 3, 75, 304, 0], [1, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", 1, 81, 304, 0], [1, "t", 2, 81, 303, 0], [1, "t", 5, 82, 303, 0], [1, "t", 1, 83, 303, 0], [1, "b", 2, 83, 304, 0], [1, "t", 1, 84, 304, 0], [1, "t", 4, 84, 303, 0], [1, "t", 5, 85, 304, 0], [1, "t", 3, 85, 303, 0], [1, "b", 2, 86, 304, 0], [1, "t", 1, 86, 303, 0], [1, "b", 3, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", 0, 88, 304, 0], [1, "b", 1, 89, 303, 0], [1, "t", 3, 89, 304, 0], [1, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", 4, 91, 303, 0], [1, "t", 0, 91, 304, 0], [1, "b", 2, 92, 303, 0], [1, "t", 4, 92, 304, 0], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, 0], [1, "b", 3, 94, 303, 0], [1, "b", 0, 94, 304, 0], [1, "b", 0, 95, 303, 0], [1, "t", 2, 95, 304, 0], [1, "f", 1, 5, 151, 1], [1, "f", 2, 5, 153, 1], [1, "f", 0, 5, 152, 1], [1, "f", 0, 5, 147, 1], [1, "f", 0, 5, 144, 1], [1, "f", 0, 5, 140, 1], [1, "f", 1, 5, 149, 1], [1, "f", 1, 5, 146, 1], [1, "f", 1, 5, 143, 1], [1, "f", 1, 5, 141, 1], [1, "f", 2, 5, 150, 1], [1, "f", 2, 5, 148, 1], [1, "f", 2, 5, 145, 1], [1, "f", 2, 5, 142, 1], [1, "f", 2, 5, 139, 1], [1, "f", 2, 5, 136, 1], [1, "f", 2, 5, 133, 1], [1, "f", 2, 5, 131, 1], [1, "f", 2, 5, 127, 1], [1, "f", 2, 5, 125, 1], [1, "f", 1, 5, 138, 1], [1, "f", 1, 5, 135, 1], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, 1], [1, "f", 1, 5, 128, 1], [1, "f", 1, 5, 126, 1], [1, "f", 1, 5, 124, 1], [1, "f", 0, 5, 129, 1], [1, "f", 0, 5, 134, 1], [1, "f", 0, 5, 137, 1], [1, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, 1], [1, "f", 1, 5, 120, 1], [1, "f", 1, 5, 117, 1], [1, "f", 1, 5, 115, 1], [1, "f", 1, 5, 111, 1], [1, "f", 1, 5, 108, 1], [1, "f", 2, 5, 121, 1], [1, "f", 2, 5, 118, 1], [1, "f", 2, 5, 116, 1], [1, "f", 2, 5, 113, 1], [1, "f", 2, 5, 110, 1], [1, "f", 0, 5, 119, 1], [1, "f", 0, 5, 114, 1], [1, "f", 0, 5, 112, 1], [1, "f", 0, 5, 109, 1], [1, "f", 1, 5, 106, 1], [1, "f", 1, 5, 103, 1], [1, "f", 1, 5, 100, 1], [1, "f", 1, 5, 97, 1], [1, "f", 1, 5, 95, 1], [1, "f", 2, 5, 107, 1], [1, "f", 2, 5, 105, 1], [1, "f", 2, 5, 102, 1], [1, "f", 2, 5, 99, 1], [1, "f", 2, 5, 96, 1], [1, "f", 2, 5, 94, 1], [1, "f", 0, 5, 104, 1], [1, "f", 0, 5, 101, 1], [1, "f", 0, 5, 98, 1], [1, "f", 0, 5, 93, 1], [1, "f", 1, 5, 92, 1], [1, "f", 1, 5, 89, 1], [1, "f", 1, 5, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [1, "f", 1, 5, 78, 1], [1, "f", 2, 5, 90, 1], [1, "f", 2, 5, 88, 1], [1, "f", 2, 5, 85, 1], [1, "f", 2, 5, 82, 1], [1, "f", 2, 5, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", 2, 5, 75, 1], [1, "f", 2, 5, 72, 1], [1, "f", 0, 5, 91, 1], [1, "f", 0, 5, 87, 1], [1, "f", 0, 5, 84, 1], [1, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, 1], [1, "f", 0, 5, 74, 1], [1, "f", 1, 5, 73, 1], [1, "f", 1, 5, 71, 1], [1, "f", 1, 5, 68, 1], [1, "f", 1, 5, 66, 1], [1, "f", 1, 5, 62, 1], [1, "f", 1, 5, 59, 1], [1, "f", 1, 5, 56, 1], [1, "f", 1, 5, 53, 1], [1, "f", 1, 5, 50, 1], [1, "f", 2, 5, 70, 1], [1, "f", 2, 5, 67, 1], [1, "f", 2, 5, 65, 1], [1, "f", 2, 5, 63, 1], [1, "f", 2, 5, 60, 1], [1, "f", 2, 5, 57, 1], [1, "f", 2, 5, 54, 1], [1, "f", 2, 5, 51, 1], [1, "f", 0, 5, 69, 1], [1, "f", 0, 5, 64, 1], [1, "f", 0, 5, 61, 1], [1, "f", 0, 5, 58, 1], [1, "f", 0, 5, 55, 1], [1, "f", 0, 5, 52, 1], [1, "f", 0, 5, 49, 1], [1, "f", 0, 5, 45, 1], [1, "f", 0, 5, 42, 1], [1, "f", 0, 5, 38, 1], [1, "f", 0, 5, 34, 1], [1, "f", 0, 5, 31, 1], [1, "f", 1, 5, 48, 1], [1, "f", 1, 5, 44, 1], [1, "f", 1, 5, 41, 1], [1, "f", 1, 5, 37, 1], [1, "f", 1, 5, 33, 1], [1, "f", 1, 5, 29, 1], [1, "f", 2, 5, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, 5, 35, 1], [1, "f", 2, 5, 39, 1], [1, "f", 2, 5, 46, 1], [1, "f", 2, 5, 43, 1], [1, "f", 1, 5, 47, 1], [1, "f", 0, 5, 40, 1], [1, "f", 0, 5, 36, 1], [1, "f", 0, 5, 28, 1], [1, "f", 1, 5, 25, 1], [1, "f", 1, 5, 22, 1], [1, "f", 1, 5, 20, 1], [1, "f", 1, 5, 16, 1], [1, "f", 1, 5, 13, 1], [1, "f", 1, 5, 10, 1], [1, "f", 2, 5, 27, 1], [1, "f", 2, 5, 24, 1], [1, "f", 2, 5, 21, 1], [1, "f", 2, 5, 19, 1], [1, "f", 2, 5, 15, 1], [1, "f", 2, 5, 12, 1], [1, "f", 2, 5, 9, 1], [1, "f", 0, 5, 26, 1], [1, "f", 0, 5, 23, 1], [1, "f", 0, 5, 14, 1], [1, "f", 0, 5, 11, 1], [1, "f", 0, 5, 17, 1], [1, "f", 1, 5, 18, 1], [1, "f", 1, 5, 8, 1], [1, "f", 0, 5, 7, 1], [1, "f", 1, 5, 6, 1], [1, "f", 0, 5, 5, 1], [1, "f", 1, 6, 5, 1], [1, "f", 2, 7, 5, 1], [1, "f", 0, 8, 5, 1], [1, "f", 1, 9, 5, 1], [1, "f", 1, 12, 5, 1], [1, "f", 1, 15, 5, 1], [1, "f", 1, 17, 5, 1], [1, "f", 1, 22, 5, 1], [1, "f", 1, 26, 5, 1], [1, "f", 2, 10, 5, 1], [1, "f", 2, 13, 5, 1], [1, "f", 2, 16, 5, 1], [1, "f", 2, 18, 5, 1], [1, "f", 2, 21, 5, 1], [1, "f", 2, 23, 5, 1], [1, "f", 2, 25, 5, 1], [1, "f", 2, 27, 5, 1], [1, "f", 0, 11, 5, 1], [1, "f", 0, 14, 5, 1], [1, "f", 0, 19, 5, 1], [1, "f", 0, 24, 5, 1], [1, "f", 0, 28, 5, 1], [1, "f", 1, 20, 5, 1], [1, "f", 1, 29, 5, 1], [1, "f", 1, 32, 5, 1], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, 5, 1], [1, "f", 1, 41, 5, 1], [1, "f", 1, 45, 5, 1], [1, "f", 2, 30, 5, 1], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, 1], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, 5, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, 5, 1], [1, "f", 0, 37, 5, 1], [1, "f", 0, 34, 5, 1], [1, "f", 0, 31, 5, 1], [1, "f", 0, 47, 5, 1], [1, "f", 1, 48, 5, 1], [1, "f", 1, 51, 5, 1], [1, "f", 1, 53, 5, 1], [1, "f", 1, 57, 5, 1], [1, "f", 1, 60, 5, 1], [1, "f", 1, 63, 5, 1], [1, "f", 1, 65, 5, 1], [1, "f", 2, 64, 5, 1], [1, "f", 2, 62, 5, 1], [1, "f", 2, 59, 5, 1], [1, "f", 2, 56, 5, 1], [1, "f", 2, 52, 5, 1], [1, "f", 2, 49, 5, 1], [1, "f", 2, 54, 5, 1], [1, "f", 0, 50, 5, 1], [1, "f", 0, 55, 5, 1], [1, "f", 0, 58, 5, 1], [1, "f", 0, 61, 5, 1], [1, "f", 0, 66, 5, 1], [1, "f", 1, 67, 5, 1], [1, "f", 1, 70, 5, 1], [1, "f", 1, 72, 5, 1], [1, "f", 1, 75, 5, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, 5, 1], [1, "f", 2, 71, 5, 1], [1, "f", 2, 74, 5, 1], [1, "f", 2, 76, 5, 1], [1, "f", 2, 78, 5, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, 5, 1], [1, "f", 0, 80, 5, 1], [1, "f", 1, 81, 5, 1], [1, "f", 1, 84, 5, 1], [1, "f", 1, 87, 5, 1], [1, "f", 1, 89, 5, 1], [1, "f", 1, 92, 5, 1], [1, "f", 1, 94, 5, 1], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, 5, 1], [1, "f", 2, 85, 5, 1], [1, "f", 2, 88, 5, 1], [1, "f", 2, 90, 5, 1], [1, "f", 2, 93, 5, 1], [1, "f", 2, 95, 5, 1], [1, "f", 0, 86, 5, 1], [1, "f", 0, 91, 5, 1], [1, "f", 2, 6, 153, 1], [1, "f", 1, 6, 152, 1], [1, "t", 1, 93, 301, 0], [1, "t", 3, 94, 302, 0], [1, "t", 5, 95, 302, 0], [1, "t", 5, 93, 302, 0], [1, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, 0], [1, "t", 5, 90, 302, 0], [1, "b", 2, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", 2, 90, 301, 0], [1, "b", 2, 89, 302, 0], [1, "t", 4, 89, 301, 0], [1, "t", 1, 88, 302, 0], [1, "t", 2, 88, 301, 0], [1, "t", 3, 87, 302, 0], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, 0], [1, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, 0], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, 0], [1, "t", 1, 82, 302, 0], [1, "t", 5, 81, 302, 0], [1, "t", 2, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", 2, 78, 302, 0], [1, "b", 1, 77, 302, 0], [1, "b", 2, 76, 302, 0], [1, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [1, "b", 1, 73, 302, 0], [1, "t", 2, 72, 302, 0], [1, "t", 4, 71, 302, 0], [1, "b", 3, 70, 302, 0], [1, "t", 1, 69, 302, 0], [1, "t", 2, 68, 302, 0], [1, "t", 5, 67, 302, 0], [1, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, 0], [1, "t", 4, 64, 302, 0], [1, "b", 3, 63, 302, 0], [1, "t", 5, 62, 302, 0], [1, "b", 1, 61, 302, 0], [1, "t", 3, 60, 302, 0], [1, "t", 4, 59, 302, 0], [1, "b", 2, 58, 302, 0], [1, "t", 5, 57, 302, 0], [1, "t", 1, 56, 302, 0], [1, "t", 3, 55, 302, 0], [1, "t", 4, 54, 302, 0], [1, "t", 1, 53, 302, 0], [1, "t", 5, 52, 302, 0], [1, "t", 2, 51, 302, 0], [1, "t", 4, 50, 302, 0], [1, "t", 2, 49, 302, 0], [1, "b", 1, 48, 302, 0], [1, "t", 3, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [1, "t", 2, 44, 302, 0], [1, "t", 5, 43, 302, 0], [1, "t", 2, 42, 302, 0], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [1, "b", 2, 39, 302, 0], [1, "t", 5, 38, 302, 0], [1, "t", 1, 37, 302, 0], [1, "t", 2, 36, 302, 0], [1, "t", 5, 35, 302, 0], [1, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", 4, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, 0], [1, "t", 4, 29, 302, 0], [1, "t", 2, 28, 302, 0], [1, "t", 5, 27, 302, 0], [1, "b", 3, 26, 302, 0], [1, "t", 1, 25, 302, 0], [1, "t", 4, 24, 302, 0], [1, "t", 2, 23, 302, 0], [1, "t", 1, 22, 302, 0], [1, "t", 5, 21, 302, 0], [1, "t", 2, 20, 302, 0], [1, "t", 4, 19, 302, 0], [1, "b", 1, 18, 302, 0], [1, "t", 5, 17, 302, 0], [1, "t", 3, 16, 302, 0], [1, "t", 1, 15, 302, 0], [1, "t", 5, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [1, "t", 1, 11, 302, 0], [1, "t", 2, 10, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", 3, 8, 302, 0], [1, "t", 5, 8, 302, 0], [1, "t", 5, 7, 302, 0], [1, "b", 2, 6, 302, 0], [1, "t", 1, 6, 301, 0], [1, "t", 4, 6, 300, 0], [1, "t", 2, 6, 299, 0], [1, "b", 0, 6, 298, 0], [1, "t", 5, 6, 297, 0], [1, "t", 2, 6, 296, 0], [1, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [1, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, 0], [1, "b", 0, 6, 291, 0], [1, "t", 2, 6, 290, 0], [1, "t", 5, 6, 289, 0], [1, "t", 1, 6, 288, 0], [1, "t", 4, 6, 287, 0], [1, "t", 2, 6, 286, 0], [1, "t", 5, 6, 285, 0], [1, "t", 2, 6, 284, 0], [1, "b", 0, 6, 283, 0], [1, "t", 2, 6, 282, 0], [1, "t", 5, 6, 281, 0], [1, "b", 2, 6, 280, 0], [1, "t", 5, 6, 279, 0], [1, "t", 1, 6, 278, 0], [1, "t", 4, 6, 277, 0], [1, "t", 3, 6, 276, 0], [1, "t", 5, 6, 275, 0], [1, "b", 0, 6, 274, 0], [1, "t", 5, 6, 273, 0], [1, "t", 1, 6, 272, 0], [1, "t", 4, 6, 271, 0], [1, "b", 3, 6, 270, 0], [1, "t", 5, 6, 269, 0], [1, "t", 1, 6, 268, 0], [1, "t", 4, 6, 267, 0], [1, "t", 1, 6, 266, 0], [1, "t", 3, 6, 265, 0], [1, "t", 4, 6, 264, 0], [1, "b", 2, 6, 263, 0], [1, "t", 5, 6, 262, 0], [1, "t", 3, 6, 261, 0], [1, "t", 0, 6, 260, 0], [1, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, 0], [1, "t", 3, 6, 257, 0], [1, "t", 4, 6, 255, 0], [1, "t", 3, 6, 254, 0], [1, "t", 5, 6, 253, 0], [1, "b", 2, 6, 252, 0], [1, "t", 5, 6, 251, 0], [1, "t", 1, 6, 250, 0], [1, "t", 3, 6, 249, 0], [1, "t", 4, 6, 248, 0], [1, "b", 3, 6, 247, 0], [1, "t", 5, 6, 246, 0], [1, "t", 3, 6, 245, 0], [1, "t", 5, 6, 244, 0], [1, "t", 0, 6, 243, 0], [1, "t", 4, 6, 242, 0], [1, "t", 3, 6, 241, 0], [1, "t", 5, 6, 240, 0], [1, "b", 0, 6, 239, 0], [1, "t", 3, 6, 238, 0], [1, "t", 4, 6, 237, 0], [1, "t", 1, 6, 236, 0], [1, "t", 5, 6, 235, 0], [1, "b", 2, 6, 234, 0], [1, "t", 2, 6, 233, 0], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [1, "t", 5, 6, 230, 0], [1, "t", 1, 6, 229, 0], [1, "t", 2, 6, 228, 0], [1, "t", 5, 6, 227, 0], [1, "b", 2, 6, 226, 0], [1, "t", 4, 6, 225, 0], [1, "t", 0, 6, 224, 0], [1, "t", 2, 6, 223, 0], [1, "t", 0, 6, 222, 0], [1, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, 6, 219, 0], [1, "t", 5, 6, 218, 0], [1, "t", 0, 6, 217, 0], [1, "t", 3, 6, 216, 0], [1, "b", 0, 6, 215, 0], [1, "t", 4, 6, 214, 0], [1, "t", 2, 6, 213, 0], [1, "t", 0, 6, 212, 0], [1, "t", 2, 6, 211, 0], [1, "b", 3, 6, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", 5, 6, 207, 0], [1, "t", 2, 6, 208, 0], [1, "t", 0, 6, 206, 0], [1, "t", 2, 6, 205, 0], [1, "t", 2, 6, 203, 0], [1, "b", 0, 6, 202, 0], [1, "t", 3, 6, 201, 0], [1, "t", 4, 6, 199, 0], [1, "t", 0, 6, 198, 0], [1, "t", 2, 6, 197, 0], [1, "t", 4, 6, 196, 0], [1, "t", 1, 6, 195, 0], [1, "t", 3, 6, 194, 0], [1, "t", 4, 6, 192, 0], [1, "t", 2, 6, 191, 0], [1, "b", 0, 6, 190, 0], [1, "t", 3, 6, 189, 0], [1, "t", 4, 6, 187, 0], [1, "b", 0, 6, 186, 0], [1, "t", 2, 6, 185, 0], [1, "t", 4, 6, 184, 0], [1, "t", 2, 6, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, 6, 181, 0], [1, "t", 5, 6, 180, 0], [1, "t", 2, 6, 179, 0], [1, "t", 0, 6, 178, 0], [1, "t", 2, 6, 177, 0], [1, "t", 4, 6, 176, 0], [1, "b", 2, 6, 175, 0], [1, "t", 1, 6, 174, 0], [1, "t", 5, 6, 173, 0], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, 0], [1, "t", 4, 6, 200, 0], [1, "t", 2, 6, 193, 0], [1, "t", 2, 6, 188, 0], [1, "f", 1, 6, 150, 1], [1, "f", 2, 6, 151, 1], [1, "f", 2, 6, 149, 1], [1, "f", 1, 6, 148, 1], [1, "f", 2, 6, 147, 1], [1, "f", 2, 6, 145, 1], [1, "f", 2, 6, 143, 1], [1, "f", 1, 6, 146, 1], [1, "f", 1, 6, 144, 1], [1, "f", 1, 6, 142, 1], [1, "f", 2, 6, 141, 1], [1, "f", 2, 6, 139, 1], [1, "f", 2, 6, 137, 1], [1, "f", 2, 6, 135, 1], [1, "f", 2, 6, 133, 1], [1, "f", 1, 6, 140, 1], [1, "f", 1, 6, 138, 1], [1, "f", 1, 6, 136, 1], [1, "f", 1, 6, 134, 1], [1, "f", 1, 6, 132, 1], [1, "f", 2, 6, 131, 1], [1, "f", 2, 6, 129, 1], [1, "f", 2, 6, 127, 1], [1, "f", 2, 6, 125, 1], [1, "f", 2, 6, 123, 1], [1, "f", 2, 6, 121, 1], [1, "f", 1, 6, 130, 1], [1, "f", 1, 6, 128, 1], [1, "f", 1, 6, 126, 1], [1, "f", 1, 6, 124, 1], [1, "f", 1, 6, 122, 1], [1, "f", 1, 6, 120, 1], [1, "f", 2, 6, 119, 1], [1, "f", 2, 6, 117, 1], [1, "f", 2, 6, 115, 1], [1, "f", 2, 6, 113, 1], [1, "f", 2, 6, 111, 1], [1, "f", 2, 6, 109, 1], [1, "f", 1, 6, 118, 1], [1, "f", 1, 6, 116, 1], [1, "f", 1, 6, 114, 1], [1, "f", 1, 6, 112, 1], [1, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, 1], [1, "f", 1, 6, 106, 1], [1, "f", 1, 6, 104, 1], [1, "f", 2, 6, 107, 1], [1, "f", 2, 6, 105, 1], [1, "f", 2, 6, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, 1], [1, "f", 2, 6, 97, 1], [1, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, 1], [1, "f", 2, 6, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", 1, 6, 100, 1], [1, "f", 1, 6, 98, 1], [1, "f", 1, 6, 96, 1], [1, "f", 1, 6, 94, 1], [1, "f", 1, 6, 92, 1], [1, "f", 1, 6, 90, 1], [1, "f", 1, 6, 88, 1], [1, "f", 1, 6, 86, 1], [1, "f", 2, 6, 89, 1], [1, "f", 2, 6, 87, 1], [1, "f", 2, 6, 85, 1], [1, "f", 2, 6, 83, 1], [1, "f", 2, 6, 81, 1], [1, "f", 2, 6, 79, 1], [1, "f", 2, 6, 77, 1], [1, "f", 1, 6, 84, 1], [1, "f", 1, 6, 82, 1], [1, "f", 1, 6, 80, 1], [1, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, 1], [1, "f", 2, 6, 75, 1], [1, "f", 2, 6, 73, 1], [1, "f", 2, 6, 71, 1], [1, "f", 2, 6, 69, 1], [1, "f", 2, 6, 67, 1], [1, "f", 2, 6, 65, 1], [1, "f", 1, 6, 74, 1], [1, "f", 1, 6, 72, 1], [1, "f", 1, 6, 70, 1], [1, "f", 1, 6, 68, 1], [1, "f", 1, 6, 66, 1], [1, "f", 1, 6, 64, 1], [1, "f", 2, 6, 63, 1], [1, "f", 2, 6, 61, 1], [1, "f", 2, 6, 59, 1], [1, "f", 2, 6, 57, 1], [1, "f", 2, 6, 55, 1], [1, "f", 2, 6, 53, 1], [1, "f", 2, 6, 51, 1], [1, "f", 1, 6, 62, 1], [1, "f", 1, 6, 60, 1], [1, "f", 1, 6, 58, 1], [1, "f", 1, 6, 56, 1], [1, "f", 1, 6, 54, 1], [1, "f", 1, 6, 52, 1], [1, "f", 1, 6, 50, 1], [1, "f", 2, 6, 49, 1], [1, "f", 2, 6, 47, 1], [1, "f", 2, 6, 45, 1], [1, "f", 2, 6, 43, 1], [1, "f", 2, 6, 41, 1], [1, "f", 2, 6, 39, 1], [1, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", 1, 6, 44, 1], [1, "f", 1, 6, 42, 1], [1, "f", 1, 6, 40, 1], [1, "f", 1, 6, 38, 1], [1, "f", 2, 6, 37, 1], [1, "f", 2, 6, 35, 1], [1, "f", 2, 6, 33, 1], [1, "f", 2, 6, 31, 1], [1, "f", 2, 6, 29, 1], [1, "f", 2, 6, 27, 1], [1, "f", 1, 6, 36, 1], [1, "f", 1, 6, 34, 1], [1, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, 1], [1, "f", 1, 6, 28, 1], [1, "f", 1, 6, 26, 1], [1, "f", 2, 6, 25, 1], [1, "f", 2, 6, 23, 1], [1, "f", 2, 6, 21, 1], [1, "f", 2, 6, 19, 1], [1, "f", 2, 6, 17, 1], [1, "f", 2, 6, 15, 1], [1, "f", 1, 6, 24, 1], [1, "f", 1, 6, 22, 1], [1, "f", 1, 6, 20, 1], [1, "f", 1, 6, 18, 1], [1, "f", 1, 6, 16, 1], [1, "f", 2, 6, 13, 1], [1, "f", 2, 6, 11, 1], [1, "f", 2, 6, 9, 1], [1, "f", 2, 6, 7, 1], [1, "f", 1, 6, 14, 1], [1, "f", 1, 6, 12, 1], [1, "f", 1, 6, 10, 1], [1, "f", 1, 6, 8, 1], [1, "f", 1, 6, 6, 1], [1, "f", 1, 8, 6, 1], [1, "f", 2, 7, 6, 1], [1, "f", 2, 9, 6, 1], [1, "f", 2, 11, 6, 1], [1, "f", 2, 13, 6, 1], [1, "f", 2, 15, 6, 1], [1, "f", 1, 10, 6, 1], [1, "f", 1, 12, 6, 1], [1, "f", 1, 14, 6, 1], [1, "f", 1, 16, 6, 1], [1, "f", 1, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", 1, 22, 6, 1], [1, "f", 1, 24, 6, 1], [1, "f", 1, 26, 6, 1], [1, "f", 2, 17, 6, 1], [1, "f", 2, 19, 6, 1], [1, "f", 2, 21, 6, 1], [1, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [1, "f", 2, 27, 6, 1], [1, "f", 2, 29, 6, 1], [1, "f", 2, 31, 6, 1], [1, "f", 2, 33, 6, 1], [1, "f", 1, 28, 6, 1], [1, "f", 1, 30, 6, 1], [1, "f", 1, 32, 6, 1], [1, "f", 1, 34, 6, 1], [1, "f", 2, 67, 6, 1], [1, "f", 2, 69, 6, 1], [1, "f", 2, 71, 6, 1], [1, "f", 2, 73, 6, 1], [1, "f", 2, 75, 6, 1], [1, "f", 1, 68, 6, 1], [1, "f", 1, 70, 6, 1], [1, "f", 1, 72, 6, 1], [1, "f", 1, 74, 6, 1], [1, "f", 1, 76, 6, 1], [1, "f", 2, 77, 6, 1], [1, "f", 2, 79, 6, 1], [1, "f", 2, 81, 6, 1], [1, "f", 2, 83, 6, 1], [1, "f", 2, 85, 6, 1], [1, "f", 1, 78, 6, 1], [1, "f", 1, 80, 6, 1], [1, "f", 1, 82, 6, 1], [1, "f", 1, 84, 6, 1], [1, "f", 1, 86, 6, 1], [1, "f", 2, 87, 6, 1], [1, "f", 2, 89, 6, 1], [1, "f", 2, 91, 6, 1], [1, "f", 2, 93, 6, 1], [1, "f", 1, 88, 6, 1], [1, "f", 1, 90, 6, 1], [1, "f", 1, 92, 6, 1], [1, "f", 1, 94, 6, 1], [1, "f", 2, 95, 6, 1], [1, "f", 1, 95, 7, 1], [1, "f", 1, 83, 7, 1], [1, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, 1], [1, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, 1], [1, "f", 1, 73, 7, 1], [1, "f", 1, 71, 7, 1], [1, "f", 1, 69, 7, 1], [1, "f", 1, 33, 7, 1], [1, "f", 1, 31, 7, 1], [1, "f", 1, 29, 7, 1], [1, "f", 1, 27, 7, 1], [1, "f", 1, 25, 7, 1], [1, "f", 1, 23, 7, 1], [1, "f", 1, 21, 7, 1], [1, "f", 1, 19, 7, 1], [1, "f", 1, 17, 7, 1], [1, "f", 1, 15, 7, 1], [1, "f", 1, 13, 7, 1], [1, "f", 1, 11, 7, 1], [1, "f", 1, 9, 7, 1], [1, "f", 1, 7, 7, 1], [1, "s", 0, 7, 8, 1], [1, "t", 4, 7, 174, 0], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, 0], [1, "b", 2, 7, 177, 0], [1, "t", 3, 94, 301, 0], [1, "b", 3, 95, 301, 0], [1, "t", 4, 96, 301, 0], [1, "t", 1, 97, 301, 0], [1, "t", 2, 98, 301, 0], [1, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, 0], [1, "t", 4, 96, 304, 0], [1, "t", 2, 96, 302, 0], [1, "t", 2, 97, 304, 0], [1, "t", 2, 96, 303, 0], [1, "t", 5, 97, 303, 0], [1, "t", 5, 98, 304, 0], [1, "b", 2, 97, 302, 0], [1, "b", 2, 99, 304, 0], [1, "t", 1, 98, 303, 0], [1, "t", 4, 98, 302, 0], [1, "t", 4, 99, 303, 0], [1, "t", 4, 100, 304, 0], [1, "t", 5, 99, 302, 0], [1, "t", 5, 101, 303, 0], [1, "t", 2, 100, 303, 0], [1, "t", 0, 100, 302, 0], [1, "t", 0, 101, 304, 0], [1, "t", 4, 102, 304, 0], [1, "f", 0, 94, 7, 1], [1, "f", 1, 93, 7, 1], [1, "f", 1, 92, 7, 1], [1, "f", 0, 91, 7, 1], [1, "f", 1, 90, 7, 1], [1, "f", 1, 89, 7, 1], [1, "f", 0, 88, 7, 1], [1, "f", 1, 87, 7, 1], [1, "f", 1, 86, 7, 1], [1, "f", 1, 85, 7, 1], [1, "f", 0, 84, 7, 1], [1, "f", 1, 82, 7, 1], [1, "f", 0, 80, 7, 1], [1, "f", 1, 78, 7, 1], [1, "f", 0, 76, 7, 1], [1, "f", 1, 74, 7, 1], [1, "f", 0, 72, 7, 1], [1, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, 1], [1, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, 1], [1, "f", 1, 28, 7, 1], [1, "f", 0, 26, 7, 1], [1, "f", 1, 24, 7, 1], [1, "f", 0, 22, 7, 1], [1, "f", 1, 20, 7, 1], [1, "f", 0, 18, 7, 1], [1, "f", 1, 16, 7, 1], [1, "f", 0, 14, 7, 1], [1, "f", 1, 12, 7, 1], [1, "f", 0, 10, 7, 1], [1, "f", 1, 8, 7, 1], [1, "s", 1, 7, 9, 1], [1, "f", 0, 95, 152, 1], [1, "f", 1, 95, 151, 1], [1, "f", 0, 95, 11, 1], [1, "f", 1, 95, 12, 1], [1, "f", 1, 95, 14, 1], [1, "f", 1, 95, 19, 1], [1, "f", 0, 95, 15, 1], [1, "f", 0, 95, 20, 1], [1, "f", 1, 95, 21, 1], [1, "f", 1, 95, 26, 1], [1, "f", 1, 95, 37, 1], [1, "f", 0, 95, 44, 1], [1, "f", 1, 95, 50, 1], [1, "f", 1, 95, 52, 1], [1, "f", 0, 95, 53, 1], [1, "f", 1, 95, 54, 1], [1, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, 1], [1, "f", 1, 95, 64, 1], [1, "f", 0, 95, 58, 1], [1, "f", 0, 95, 61, 1], [1, "f", 0, 95, 68, 1], [1, "f", 0, 95, 72, 1], [1, "f", 0, 95, 78, 1], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [1, "f", 1, 95, 128, 1], [1, "f", 0, 95, 85, 1], [1, "f", 0, 95, 91, 1], [1, "f", 0, 95, 95, 1], [1, "f", 0, 95, 114, 1], [1, "f", 2, 95, 113, 1], [1, "f", 1, 95, 119, 1], [1, "f", 0, 95, 120, 1], [1, "f", 1, 95, 121, 1], [1, "f", 0, 95, 127, 1], [1, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [1, "f", 1, 95, 132, 1], [1, "f", 1, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, 1], [1, "f", 0, 95, 147, 1], [1, "f", 1, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, 10, 1], [1, "f", 0, 95, 8, 1], [1, "f", 1, 95, 9, 1], [1, "f", 0, 95, 13, 1], [1, "f", 1, 95, 16, 1], [1, "f", 1, 95, 17, 1], [1, "f", 0, 95, 18, 1], [1, "f", 1, 95, 45, 1], [1, "f", 0, 95, 51, 1], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, 1], [1, "f", 1, 95, 59, 1], [1, "f", 1, 95, 60, 1], [1, "f", 1, 95, 63, 1], [1, "f", 0, 95, 65, 1], [1, "f", 1, 95, 66, 1], [1, "f", 1, 95, 67, 1], [1, "f", 1, 95, 69, 1], [1, "f", 1, 95, 70, 1], [1, "f", 0, 95, 71, 1], [1, "f", 1, 95, 73, 1], [1, "f", 1, 95, 74, 1], [1, "f", 0, 95, 75, 1], [1, "f", 1, 95, 76, 1], [1, "f", 1, 95, 77, 1], [1, "f", 1, 95, 79, 1], [1, "f", 1, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", 1, 95, 82, 1], [1, "f", 0, 95, 83, 1], [1, "f", 1, 95, 84, 1], [1, "f", 1, 95, 86, 1], [1, "f", 1, 95, 88, 1], [1, "f", 0, 95, 87, 1], [1, "f", 1, 95, 89, 1], [1, "f", 1, 95, 90, 1], [1, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, 1], [1, "f", 1, 95, 94, 1], [1, "f", 1, 95, 96, 1], [1, "f", 1, 95, 97, 1], [1, "f", 0, 95, 98, 1], [1, "f", 1, 95, 99, 1], [1, "f", 1, 95, 100, 1], [1, "f", 0, 95, 101, 1], [1, "f", 1, 95, 102, 1], [1, "f", 0, 95, 103, 1], [1, "f", 1, 95, 104, 1], [1, "f", 1, 95, 105, 1], [1, "f", 0, 95, 106, 1], [1, "f", 1, 95, 107, 1], [1, "f", 1, 95, 108, 1], [1, "f", 1, 95, 109, 1], [1, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, 1], [1, "f", 0, 95, 112, 1], [1, "f", 1, 95, 116, 1], [1, "f", 0, 95, 118, 1], [1, "f", 0, 95, 122, 1], [1, "f", 1, 95, 123, 1], [1, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, 1], [1, "f", 1, 95, 126, 1], [1, "f", 1, 95, 129, 1], [1, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, 1], [1, "f", 1, 95, 135, 1], [1, "f", 1, 95, 139, 1], [1, "f", 0, 95, 140, 1], [1, "f", 1, 95, 141, 1], [1, "f", 1, 95, 142, 1], [1, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, 1], [1, "f", 1, 95, 148, 1], [1, "f", 1, 95, 149, 1], [1, "f", 1, 95, 150, 1], [1, "f", 1, 95, 153, 1], [1, "cs", 0, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, 16, 1], [1, "cs", 2, 64, 19, 1], [1, "cs", 0, 64, 20, 1], [1, "cs", 1, 64, 21, 1], [1, "cs", 2, 64, 22, 1], [1, "cs", 0, 64, 23, 1], [1, "cs", 2, 64, 24, 1], [1, "cs", 1, 64, 29, 1], [1, "cs", 2, 64, 30, 1], [1, "cs", 3, 64, 31, 1], [1, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, 1], [1, "cs", 0, 64, 35, 1], [1, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, 8, 1], [1, "cs", 1, 65, 9, 1], [1, "cs", 2, 65, 10, 1], [1, "cs", 3, 65, 11, 1], [1, "cs", 1, 65, 16, 1], [1, "cs", 0, 64, 17, 1], [1, "cs", 3, 65, 17, 1], [1, "cs", 2, 64, 18, 1], [1, "cs", 2, 65, 18, 1], [1, "cs", 0, 65, 19, 1], [1, "cs", 1, 65, 20, 1], [1, "cs", 3, 65, 21, 1], [1, "cs", 2, 65, 22, 1], [1, "cs", 3, 65, 23, 1], [1, "cs", 0, 65, 24, 1], [1, "cs", 2, 65, 29, 1], [1, "cs", 3, 65, 30, 1], [1, "cs", 0, 65, 31, 1], [1, "cs", 1, 65, 32, 1], [1, "cs", 2, 65, 33, 1], [1, "cs", 3, 65, 34, 1], [1, "cs", 2, 63, 9, 1], [1, "cs", 0, 62, 9, 1], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, 9, 1], [1, "cs", 2, 59, 9, 1], [1, "cs", 2, 58, 9, 1], [1, "cs", 0, 57, 9, 1], [1, "cs", 2, 56, 9, 1], [1, "cs", 2, 55, 9, 1], [1, "cs", 2, 54, 9, 1], [1, "cs", 0, 53, 9, 1], [1, "cs", 0, 51, 9, 1], [1, "cs", 2, 52, 9, 1], [1, "cs", 2, 50, 9, 1], [1, "cs", 2, 48, 9, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, 9, 1], [1, "cs", 0, 45, 9, 1], [1, "cs", 0, 43, 9, 1], [1, "cs", 2, 46, 9, 1], [1, "cs", 2, 44, 9, 1], [1, "cs", 2, 42, 9, 1], [1, "cs", 2, 41, 9, 1], [1, "cs", 0, 40, 9, 1], [1, "cs", 2, 39, 9, 1], [1, "cs", 2, 38, 9, 1], [1, "cs", 0, 37, 9, 1], [1, "cs", 0, 63, 8, 1], [1, "cs", 2, 65, 7, 1], [1, "cs", 3, 64, 7, 1], [1, "cs", 2, 62, 8, 1], [1, "cs", 3, 61, 8, 1], [1, "cs", 1, 62, 7, 1], [1, "cs", 2, 63, 7, 1], [1, "cs", 0, 64, 6, 1], [1, "cs", 3, 65, 6, 1], [1, "cs", 2, 63, 6, 1], [1, "cs", 2, 62, 6, 1], [1, "cs", 2, 61, 6, 1], [1, "cs", 2, 60, 6, 1], [1, "cs", 2, 59, 6, 1], [1, "cs", 2, 61, 7, 1], [1, "cs", 0, 60, 7, 1], [1, "cs", 2, 60, 8, 1], [1, "cs", 2, 59, 7, 1], [1, "cs", 2, 59, 8, 1], [1, "cs", 1, 58, 8, 1], [1, "cs", 1, 57, 6, 1], [1, "cs", 1, 55, 7, 1], [1, "cs", 0, 56, 6, 1], [1, "cs", 2, 58, 6, 1], [1, "cs", 2, 58, 7, 1], [1, "cs", 2, 57, 7, 1], [1, "cs", 2, 56, 7, 1], [1, "cs", 2, 55, 6, 1], [1, "cs", 2, 57, 8, 1], [1, "cs", 2, 56, 8, 1], [1, "cs", 2, 55, 8, 1], [1, "cs", 0, 54, 8, 1], [1, "cs", 0, 50, 7, 1], [1, "cs", 0, 53, 6, 1], [1, "cs", 2, 54, 6, 1], [1, "cs", 2, 54, 7, 1], [1, "cs", 2, 53, 7, 1], [1, "cs", 2, 52, 7, 1], [1, "cs", 2, 52, 6, 1], [1, "cs", 1, 52, 8, 1], [1, "cs", 2, 53, 8, 1], [1, "cs", 2, 51, 8, 1], [1, "cs", 2, 51, 7, 1], [1, "cs", 2, 51, 6, 1], [1, "cs", 2, 50, 6, 1], [1, "cs", 2, 50, 8, 1], [1, "cs", 2, 49, 8, 1], [1, "cs", 2, 49, 7, 1], [1, "cs", 2, 49, 6, 1], [1, "cs", 0, 46, 7, 1], [1, "cs", 1, 48, 8, 1], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, 8, 1], [1, "cs", 2, 48, 7, 1], [1, "cs", 2, 48, 6, 1], [1, "cs", 2, 47, 6, 1], [1, "cs", 2, 47, 7, 1], [1, "cs", 2, 47, 8, 1], [1, "cs", 2, 46, 8, 1], [1, "cs", 2, 45, 8, 1], [1, "cs", 2, 45, 7, 1], [1, "cs", 2, 45, 6, 1], [1, "cs", 2, 46, 6, 1], [1, "cs", 2, 44, 6, 1], [1, "cs", 2, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", 2, 43, 7, 1], [1, "cs", 2, 43, 6, 1], [1, "cs", 2, 42, 6, 1], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, 8, 1], [1, "cs", 2, 41, 7, 1], [1, "cs", 2, 41, 6, 1], [1, "cs", 2, 40, 6, 1], [1, "cs", 2, 40, 7, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", 2, 39, 8, 1], [1, "cs", 0, 39, 7, 1], [1, "cs", 1, 38, 8, 1], [1, "cs", 2, 39, 6, 1], [1, "cs", 2, 38, 6, 1], [1, "cs", 2, 37, 6, 1], [1, "cs", 2, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [1, "cs", 2, 37, 8, 1], [1, "cs", 2, 37, 10, 1], [1, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, 1], [1, "cs", 0, 38, 17, 1], [1, "cs", 1, 37, 18, 1], [1, "cs", 0, 38, 19, 1], [1, "cs", 2, 37, 11, 1], [1, "cs", 2, 37, 16, 1], [1, "cs", 2, 37, 17, 1], [1, "cs", 2, 38, 18, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", 3, 38, 16, 1], [1, "cs", 0, 37, 21, 1], [1, "cs", 0, 38, 22, 1], [1, "cs", 0, 38, 24, 1], [1, "cs", 2, 37, 20, 1], [1, "cs", 2, 38, 20, 1], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, 1], [1, "cs", 3, 37, 22, 1], [1, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, 1], [1, "cs", 0, 38, 30, 1], [1, "cs", 0, 38, 32, 1], [1, "cs", 0, 37, 31, 1], [1, "cs", 1, 38, 34, 1], [1, "cs", 1, 37, 29, 1], [1, "cs", 2, 38, 29, 1], [1, "cs", 2, 37, 30, 1], [1, "cs", 2, 38, 31, 1], [1, "cs", 2, 37, 32, 1], [1, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, 1], [1, "cs", 2, 36, 8, 1], [1, "cs", 0, 36, 11, 1], [1, "cs", 0, 35, 9, 1], [1, "cs", 2, 36, 9, 1], [1, "cs", 2, 36, 10, 1], [1, "cs", 2, 35, 10, 1], [1, "cs", 1, 33, 8, 1], [1, "cs", 3, 34, 9, 1], [1, "cs", 3, 35, 8, 1], [1, "cs", 2, 34, 8, 1], [1, "cs", 0, 36, 7, 1], [1, "cs", 1, 34, 7, 1], [1, "cs", 2, 35, 7, 1], [1, "cs", 2, 35, 6, 1], [1, "cs", 2, 36, 6, 1], [1, "cs", 2, 68, 9, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", 0, 67, 9, 1], [1, "cs", 0, 66, 8, 1], [1, "cs", 2, 67, 8, 1], [1, "cs", 1, 68, 8, 1], [1, "cs", 1, 66, 11, 1], [1, "cs", 2, 67, 10, 1], [1, "cs", 0, 66, 6, 1], [1, "cs", 2, 66, 7, 1], [1, "cs", 2, 67, 7, 1], [1, "cs", 2, 69, 8, 1], [1, "cs", 2, 63, 32, 1], [1, "cs", 2, 62, 34, 1], [1, "cs", 2, 60, 35, 1], [1, "cs", 3, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", 0, 63, 34, 1], [1, "cs", 2, 63, 33, 1], [1, "cs", 2, 63, 35, 1], [1, "cs", 2, 62, 35, 1], [1, "cs", 2, 58, 36, 1], [1, "cs", 1, 59, 36, 1], [1, "cs", 1, 62, 36, 1], [1, "cs", 2, 60, 36, 1], [1, "cs", 2, 61, 34, 1], [1, "cs", 3, 62, 33, 1], [1, "cs", 3, 63, 36, 1], [1, "cs", 3, 61, 36, 1], [1, "cs", 0, 42, 36, 1], [1, "cs", 1, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [1, "cs", 3, 40, 36, 1], [1, "cs", 3, 43, 36, 1], [1, "cs", 1, 40, 35, 1], [1, "cs", 2, 41, 35, 1], [1, "cs", 2, 40, 34, 1], [1, "cs", 2, 39, 34, 1], [1, "cs", 2, 39, 33, 1], [1, "cs", 2, 39, 32, 1], [1, "cs", 0, 40, 33, 1], [1, "cs", 2, 41, 34, 1], [1, "cs", 1, 44, 36, 1], [1, "cs", 3, 43, 35, 1], [1, "cs", 2, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [1, "cs", 3, 59, 30, 1], [1, "cs", 0, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [1, "cs", 3, 60, 27, 1], [1, "cs", 0, 60, 26, 1], [1, "cs", 2, 54, 25, 1], [1, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, 1], [1, "cs", 0, 55, 25, 1], [1, "cs", 2, 59, 26, 1], [1, "cs", 0, 43, 26, 1], [1, "cs", 1, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [1, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, 1], [1, "cs", 0, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [1, "cs", 2, 63, 22, 1], [1, "cs", 2, 63, 21, 1], [1, "cs", 2, 39, 21, 1], [1, "cs", 3, 57, 18, 1], [1, "cs", 2, 56, 18, 1], [1, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, 20, 1], [1, "cs", 2, 51, 19, 1], [1, "cs", 3, 51, 18, 1], [1, "cs", 2, 63, 16, 1], [1, "cs", 2, 63, 10, 1], [1, "cs", 2, 56, 13, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, 1], [1, "cs", 2, 47, 18, 1], [1, "cs", 2, 46, 18, 1], [1, "cs", 0, 46, 13, 1], [1, "cs", 2, 45, 13, 1], [1, "cs", 2, 39, 10, 1], [1, "cs", 2, 39, 16, 1], [1, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [1, "a", 1, 53, 14, 1], [1, "a", 1, 49, 14, 1], [1, "de", 8, 55, 15, 0], [1, "de", 9, 48, 28, 0], [1, "de", 10, 58, 26, 0], [1, "de", 11, 59, 29, 0], [1, "de", 11, 55, 34, 0], [1, "de", 10, 48, 33, 0], [1, "de", 9, 41, 32, 0], [1, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", 9, 45, 11, 0], [1, "de", 9, 44, 17, 0], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, 0], [1, "de", 10, 63, 31, 0], [1, "de", 8, 60, 30, 0], [1, "de", 8, 43, 26, 0], [1, "de", 10, 43, 29, 0], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, 0], [1, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, 0], [1, "de", 10, 39, 26, 0], [1, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, 0], [1, "de", 32, 55, 35, 0], [1, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, 0], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, 17, 0], [1, "de", 32, 63, 13, 0], [1, "de", 32, 59, 10, 0], [1, "de", 32, 56, 12, 0], [1, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, 12, 0], [1, "de", 32, 39, 18, 0], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, 0], [1, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [1, "de", 31, 59, 24, 0], [1, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, 0], [1, "de", 31, 39, 27, 0], [1, "de", 31, 48, 27, 0], [1, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, 0], [1, "d", 0, 12, 13, 1], [1, "d", 0, 89, 13, 1], [1, "d", 1, 91, 21, 1], [1, "d", 1, 10, 22, 1], [1, "f", 2, 89, 18, 1], [1, "f", 0, 88, 19, 1], [1, "g", 1, 85, 22, 1], [1, "s", 1, 90, 29, 1], [1, "s", 1, 92, 15, 1], [1, "s", 0, 91, 31, 1], [1, "s", 2, 90, 38, 1], [1, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", 1, 86, 43, 1], [1, "f", 0, 81, 45, 1], [1, "f", 2, 66, 44, 1], [1, "f", 2, 55, 49, 1], [1, "f", 1, 54, 50, 1], [1, "f", 2, 43, 45, 1], [1, "f", 2, 31, 48, 1], [1, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, 1], [1, "f", 1, 69, 48, 1], [1, "g", 0, 80, 40, 1], [1, "g", 2, 81, 40, 1], [1, "s", 2, 77, 39, 1], [1, "s", 0, 68, 43, 1], [1, "s", 2, 57, 41, 1], [1, "s", 1, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", 2, 48, 48, 1], [1, "f", 2, 17, 12, 1], [1, "f", 0, 13, 31, 1], [1, "f", 1, 14, 32, 1], [1, "s", 0, 15, 27, 1], [1, "s", 0, 13, 39, 1], [1, "f", 2, 11, 17, 1], [1, "f", 1, 12, 18, 1], [1, "g", 2, 12, 25, 1], [1, "f", 0, 16, 45, 1], [1, "f", 1, 17, 46, 1], [1, "s", 1, 74, 48, 1], [1, "s", 1, 20, 47, 1], [1, "g", 0, 58, 59, 1], [1, "g", 0, 46, 72, 1], [1, "g", 0, 69, 79, 1], [1, "g", 0, 72, 74, 1], [1, "g", 0, 26, 88, 1], [1, "g", 0, 20, 74, 1], [1, "g", 0, 28, 67, 1], [1, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [1, "g", 0, 87, 72, 1], [1, "g", 0, 14, 85, 1], [1, "g", 1, 85, 97, 1], [1, "g", 1, 68, 104, 1], [1, "g", 1, 63, 91, 1], [1, "g", 1, 39, 90, 1], [1, "g", 1, 34, 99, 1], [1, "g", 1, 17, 103, 1], [1, "g", 2, 77, 60, 1], [1, "g", 2, 19, 56, 1], [1, "g", 2, 39, 60, 1], [1, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [1, "f", 0, 26, 59, 1], [1, "f", 0, 35, 53, 1], [1, "f", 0, 44, 58, 1], [1, "f", 0, 88, 62, 1], [1, "f", 0, 91, 82, 1], [1, "f", 0, 84, 85, 1], [1, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [1, "f", 0, 62, 83, 1], [1, "f", 0, 34, 81, 1], [1, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, 1], [1, "f", 1, 81, 70, 1], [1, "f", 1, 91, 72, 1], [1, "f", 1, 8, 91, 1], [1, "f", 1, 14, 81, 1], [1, "f", 1, 29, 79, 1], [1, "f", 1, 13, 65, 1], [1, "f", 1, 46, 97, 1], [1, "f", 1, 43, 73, 1], [1, "f", 1, 60, 69, 1], [1, "f", 1, 70, 96, 1], [1, "f", 1, 58, 84, 1], [1, "s", 1, 56, 76, 1], [1, "s", 1, 85, 74, 1], [1, "s", 0, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", 0, 20, 66, 1], [1, "s", 0, 47, 83, 1], [1, "s", 0, 29, 86, 1], [1, "s", 0, 78, 92, 1], [1, "s", 0, 62, 102, 1], [1, "s", 0, 18, 95, 1], [1, "s", 2, 64, 101, 1], [1, "s", 2, 78, 84, 1], [1, "s", 2, 49, 83, 1], [1, "s", 2, 15, 76, 1], [1, "s", 2, 21, 84, 1], [1, "f", 1, 26, 94, 1], [1, "f", 2, 23, 96, 1], [1, "f", 2, 25, 72, 1], [1, "f", 2, 85, 77, 1], [1, "f", 2, 79, 95, 1], [1, "f", 2, 51, 65, 1], [1, "f", 2, 69, 60, 1], [1, "f", 1, 25, 105, 1], [1, "s", 1, 18, 68, 1], [1, "s", 0, 55, 76, 1], [1, "s", 0, 74, 59, 1], [1, "f", 1, 46, 142, 1], [1, "f", 1, 19, 140, 1], [1, "f", 1, 77, 137, 1], [1, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [1, "f", 0, 55, 121, 1], [1, "f", 0, 13, 123, 1], [1, "f", 0, 18, 141, 1], [1, "f", 0, 40, 137, 1], [1, "f", 2, 76, 142, 1], [1, "f", 2, 57, 140, 1], [1, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, 1], [1, "f", 2, 29, 131, 1], [1, "f", 0, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, 12, 132, 1], [1, "f", 0, 90, 129, 1], [1, "f", 1, 87, 131, 1], [1, "f", 0, 91, 143, 1], [1, "f", 2, 87, 145, 1], [1, "f", 1, 89, 141, 1], [1, "f", 1, 63, 130, 1], [1, "f", 1, 75, 122, 1], [1, "f", 1, 52, 124, 1], [1, "f", 1, 34, 127, 1], [1, "f", 1, 14, 123, 1], [1, "f", 1, 24, 122, 1], [1, "f", 0, 83, 108, 1], [1, "f", 0, 89, 118, 1], [1, "f", 0, 56, 107, 1], [1, "f", 0, 38, 113, 1], [1, "f", 0, 16, 110, 1], [1, "f", 1, 80, 105, 1], [1, "f", 1, 82, 109, 1], [1, "f", 1, 87, 118, 1], [1, "f", 1, 59, 110, 1], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [1, "f", 2, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [1, "s", 0, 25, 172, 1], [1, "s", 0, 22, 161, 1], [1, "s", 0, 35, 152, 1], [1, "s", 0, 66, 144, 1], [1, "s", 0, 87, 145, 1], [1, "s", 0, 86, 145, 1], [1, "s", 0, 84, 135, 1], [1, "s", 0, 69, 133, 1], [1, "s", 0, 84, 122, 1], [1, "s", 0, 68, 121, 1], [1, "s", 0, 48, 124, 1], [1, "s", 0, 26, 129, 1], [1, "s", 0, 9, 127, 1], [1, "s", 0, 11, 144, 1], [1, "s", 0, 9, 109, 1], [1, "s", 0, 35, 101, 1], [1, "s", 0, 47, 109, 1], [1, "s", 0, 58, 111, 1], [1, "s", 0, 84, 110, 1], [1, "s", 0, 28, 114, 1], [1, "s", 1, 30, 116, 1], [1, "s", 1, 46, 112, 1], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, 1], [1, "s", 1, 49, 127, 1], [1, "s", 1, 66, 134, 1], [1, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, 1], [1, "s", 1, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [1, "s", 1, 12, 125, 1], [1, "s", 1, 65, 158, 1], [1, "s", 1, 83, 167, 1], [1, "s", 1, 65, 167, 1], [1, "s", 1, 47, 164, 1], [1, "s", 1, 56, 168, 1], [1, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", 2, 79, 149, 1], [1, "s", 2, 75, 144, 1], [1, "s", 2, 57, 150, 1], [1, "s", 2, 47, 143, 1], [1, "s", 2, 31, 145, 1], [1, "s", 2, 36, 138, 1], [1, "s", 2, 10, 163, 1], [1, "s", 2, 22, 142, 1], [1, "g", 2, 78, 132, 1], [1, "g", 1, 48, 135, 1], [1, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [1, "g", 2, 70, 80, 1], [1, "g", 2, 15, 86, 1], [1, "g", 2, 47, 75, 1], [1, "g", 2, 36, 89, 1], [1, "g", 2, 80, 90, 1], [1, "f", 1, 39, 118, 1], [1, "d", 2, 84, 54, 1], [1, "d", 2, 16, 54, 1], [1, "de", 7, 13, 13, 0], [1, "de", 5, 16, 28, 0], [1, "de", 5, 9, 25, 0], [1, "de", 5, 34, 41, 0], [1, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", 6, 12, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, 0], [1, "de", 6, 40, 42, 0], [1, "de", 7, 20, 48, 0], [1, "de", 7, 29, 59, 0], [1, "de", 6, 27, 58, 0], [1, "de", 6, 15, 54, 0], [1, "de", 5, 12, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", 4, 10, 63, 0], [1, "de", 7, 49, 48, 0], [1, "de", 7, 37, 63, 0], [1, "de", 6, 33, 68, 0], [1, "de", 6, 56, 52, 0], [1, "de", 5, 59, 58, 0], [1, "de", 6, 48, 58, 0], [1, "de", 4, 53, 63, 0], [1, "de", 4, 67, 44, 0], [1, "de", 5, 70, 49, 0], [1, "de", 5, 82, 55, 0], [1, "de", 5, 79, 41, 0], [1, "de", 5, 91, 29, 0], [1, "de", 7, 91, 43, 0], [1, "de", 6, 85, 44, 0], [1, "de", 6, 74, 60, 0], [1, "de", 6, 90, 8, 0], [1, "de", 5, 91, 15, 0], [1, "de", 4, 87, 20, 0], [1, "de", 7, 93, 11, 0], [1, "de", 6, 91, 21, 0], [1, "de", 6, 85, 35, 0], [1, "de", 5, 93, 58, 0], [1, "de", 5, 87, 63, 0], [1, "de", 7, 77, 62, 0], [1, "de", 6, 68, 61, 0], [1, "de", 5, 90, 73, 0], [1, "de", 4, 87, 71, 0], [1, "de", 7, 80, 71, 0], [1, "de", 7, 83, 77, 0], [1, "de", 7, 89, 83, 0], [1, "de", 4, 71, 80, 0], [1, "de", 4, 71, 70, 0], [1, "de", 5, 63, 72, 0], [1, "de", 4, 54, 75, 0], [1, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, 0], [1, "de", 5, 15, 81, 0], [1, "de", 4, 29, 80, 0], [1, "de", 4, 37, 90, 0], [1, "de", 4, 7, 75, 0], [1, "de", 6, 22, 74, 0], [1, "de", 6, 43, 95, 0], [1, "de", 6, 57, 85, 0], [1, "de", 6, 19, 94, 0], [1, "de", 6, 9, 92, 0], [1, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [1, "de", 5, 54, 108, 0], [1, "de", 5, 55, 95, 0], [1, "de", 5, 35, 104, 0], [1, "de", 5, 13, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, 0], [1, "de", 7, 11, 104, 0], [1, "de", 7, 9, 111, 0], [1, "de", 7, 40, 114, 0], [1, "de", 7, 28, 117, 0], [1, "de", 7, 47, 113, 0], [1, "de", 7, 63, 104, 0], [1, "de", 4, 64, 92, 0], [1, "de", 6, 86, 97, 0], [1, "de", 5, 76, 91, 0], [1, "de", 5, 85, 86, 0], [1, "de", 6, 78, 83, 0], [1, "de", 6, 71, 97, 0], [1, "de", 4, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", 4, 86, 109, 0], [1, "de", 4, 86, 118, 0], [1, "de", 5, 70, 113, 0], [1, "de", 6, 69, 121, 0], [1, "de", 6, 76, 122, 0], [1, "de", 7, 87, 130, 0], [1, "de", 4, 84, 123, 0], [1, "de", 4, 57, 121, 0], [1, "de", 5, 53, 125, 0], [1, "de", 5, 62, 131, 0], [1, "de", 6, 67, 143, 0], [1, "de", 5, 77, 143, 0], [1, "de", 5, 85, 136, 0], [1, "de", 6, 87, 147, 0], [1, "de", 6, 92, 140, 0], [1, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [1, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", 4, 54, 138, 0], [1, "de", 6, 29, 145, 0], [1, "de", 6, 29, 132, 0], [1, "de", 6, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", 5, 23, 131, 0], [1, "de", 5, 9, 134, 0], [1, "de", 6, 11, 121, 0], [1, "de", 4, 26, 121, 0], [1, "de", 35, 58, 150, 0], [1, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, 0], [1, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, 0], [1, "de", 34, 13, 148, 0], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [1, "de", 34, 47, 144, 0], [1, "de", 34, 68, 142, 0], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [1, "de", 36, 90, 141, 0], [1, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, 0], [1, "de", 35, 56, 122, 0], [1, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, 0], [1, "de", 35, 37, 102, 0], [1, "de", 33, 18, 97, 0], [1, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, 0], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, 0], [1, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, 8, 32, 0], [1, "de", 33, 9, 24, 0], [1, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, 0], [1, "de", 35, 53, 39, 0], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, 0], [1, "de", 33, 68, 112, 0], [1, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, 0], [1, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, 0], [1, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [1, "de", 34, 92, 9, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [1, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, 0], [1, "de", 33, 64, 84, 0], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [1, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, 0], [1, "de", 35, 14, 52, 0], [1, "s", 2, 12, 171, 1], [1, "r", 20, 188, 0], [1, "r", 21, 188, 0], [1, "r", 22, 188, 0], [1, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, 0], [1, "r", 23, 189, 0], [1, "r", 22, 189, 0], [1, "r", 21, 189, 0], [1, "r", 20, 189, 0], [1, "r", 19, 189, 0], [1, "r", 19, 190, 0], [1, "r", 19, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [1, "r", 24, 191, 0], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [1, "r", 25, 190, 0], [1, "r", 24, 190, 0], [1, "r", 23, 190, 0], [1, "r", 22, 190, 0], [1, "r", 21, 190, 0], [1, "r", 20, 190, 0], [1, "r", 26, 190, 0], [1, "r", 26, 191, 0], [1, "r", 24, 193, 0], [1, "r", 23, 193, 0], [1, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, 0], [1, "r", 22, 192, 0], [1, "r", 23, 192, 0], [1, "r", 24, 192, 0], [1, "r", 25, 192, 0], [1, "r", 53, 199, 0], [1, "r", 52, 200, 0], [1, "r", 54, 199, 0], [1, "r", 55, 199, 0], [1, "r", 55, 200, 0], [1, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [1, "r", 55, 201, 0], [1, "r", 54, 201, 0], [1, "r", 55, 202, 0], [1, "r", 54, 203, 0], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [1, "r", 53, 202, 0], [1, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, 0], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, 0], [1, "r", 56, 201, 0], [1, "r", 53, 203, 0], [1, "r", 52, 203, 0], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [1, "r", 53, 204, 0], [1, "r", 52, 204, 0], [1, "r", 55, 204, 0], [1, "r", 56, 203, 0], [1, "r", 56, 244, 0], [1, "r", 54, 246, 0], [1, "r", 50, 248, 0], [1, "r", 48, 248, 0], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [1, "r", 44, 238, 0], [1, "r", 43, 238, 0], [1, "r", 46, 238, 0], [1, "r", 47, 238, 0], [1, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, 0], [1, "r", 51, 238, 0], [1, "r", 52, 238, 0], [1, "r", 53, 238, 0], [1, "r", 54, 239, 0], [1, "r", 53, 240, 0], [1, "r", 53, 239, 0], [1, "r", 52, 239, 0], [1, "r", 51, 239, 0], [1, "r", 50, 239, 0], [1, "r", 49, 239, 0], [1, "r", 48, 239, 0], [1, "r", 47, 239, 0], [1, "r", 46, 239, 0], [1, "r", 45, 239, 0], [1, "r", 44, 239, 0], [1, "r", 43, 239, 0], [1, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [1, "r", 43, 240, 0], [1, "r", 44, 240, 0], [1, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, 0], [1, "r", 50, 240, 0], [1, "r", 51, 240, 0], [1, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, 0], [1, "r", 55, 241, 0], [1, "r", 54, 241, 0], [1, "r", 53, 241, 0], [1, "r", 52, 241, 0], [1, "r", 51, 241, 0], [1, "r", 49, 241, 0], [1, "r", 50, 241, 0], [1, "r", 48, 241, 0], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [1, "r", 45, 241, 0], [1, "r", 44, 241, 0], [1, "r", 43, 241, 0], [1, "r", 42, 241, 0], [1, "r", 41, 241, 0], [1, "r", 40, 242, 0], [1, "r", 41, 242, 0], [1, "r", 42, 242, 0], [1, "r", 43, 242, 0], [1, "r", 44, 242, 0], [1, "r", 45, 242, 0], [1, "r", 46, 242, 0], [1, "r", 47, 242, 0], [1, "r", 48, 242, 0], [1, "r", 49, 242, 0], [1, "r", 50, 242, 0], [1, "r", 51, 242, 0], [1, "r", 52, 242, 0], [1, "r", 53, 242, 0], [1, "r", 54, 242, 0], [1, "r", 55, 242, 0], [1, "r", 56, 242, 0], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [1, "r", 54, 243, 0], [1, "r", 53, 243, 0], [1, "r", 52, 243, 0], [1, "r", 51, 243, 0], [1, "r", 50, 243, 0], [1, "r", 49, 243, 0], [1, "r", 48, 243, 0], [1, "r", 47, 243, 0], [1, "r", 46, 243, 0], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, 0], [1, "r", 41, 243, 0], [1, "r", 40, 243, 0], [1, "r", 40, 244, 0], [1, "r", 41, 244, 0], [1, "r", 43, 244, 0], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [1, "r", 46, 244, 0], [1, "r", 47, 244, 0], [1, "r", 48, 244, 0], [1, "r", 49, 244, 0], [1, "r", 50, 244, 0], [1, "r", 51, 244, 0], [1, "r", 52, 244, 0], [1, "r", 53, 244, 0], [1, "r", 54, 244, 0], [1, "r", 55, 244, 0], [1, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, 0], [1, "r", 42, 245, 0], [1, "r", 43, 245, 0], [1, "r", 44, 245, 0], [1, "r", 45, 245, 0], [1, "r", 46, 245, 0], [1, "r", 47, 245, 0], [1, "r", 48, 245, 0], [1, "r", 49, 245, 0], [1, "r", 50, 245, 0], [1, "r", 51, 245, 0], [1, "r", 52, 246, 0], [1, "r", 52, 245, 0], [1, "r", 53, 245, 0], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, 0], [1, "r", 51, 246, 0], [1, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, 0], [1, "r", 45, 246, 0], [1, "r", 46, 246, 0], [1, "r", 44, 246, 0], [1, "r", 43, 246, 0], [1, "r", 42, 246, 0], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [1, "r", 43, 247, 0], [1, "r", 44, 247, 0], [1, "r", 45, 247, 0], [1, "r", 46, 247, 0], [1, "r", 47, 247, 0], [1, "r", 48, 247, 0], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [1, "r", 52, 247, 0], [1, "r", 53, 247, 0], [1, "r", 54, 247, 0], [1, "r", 49, 247, 0], [1, "r", 49, 248, 0], [1, "r", 47, 248, 0], [1, "r", 46, 248, 0], [1, "r", 45, 248, 0], [1, "r", 51, 248, 0], [1, "r", 55, 246, 1], [1, "r", 55, 247, 1], [1, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, 1], [1, "r", 93, 270, 1], [1, "r", 94, 270, 1], [1, "r", 95, 271, 1], [1, "r", 94, 271, 1], [1, "r", 93, 271, 1], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [1, "r", 92, 281, 1], [1, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, 1], [1, "r", 95, 275, 1], [1, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, 1], [1, "r", 94, 273, 1], [1, "r", 94, 272, 1], [1, "r", 93, 272, 1], [1, "r", 93, 273, 1], [1, "r", 93, 274, 1], [1, "r", 92, 273, 1], [1, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [1, "r", 92, 269, 1], [1, "r", 90, 269, 1], [1, "r", 91, 269, 1], [1, "r", 91, 271, 1], [1, "r", 91, 270, 1], [1, "r", 95, 278, 1], [1, "r", 95, 277, 1], [1, "r", 95, 276, 1], [1, "r", 94, 276, 1], [1, "r", 94, 275, 1], [1, "r", 93, 275, 1], [1, "r", 92, 274, 1], [1, "r", 92, 275, 1], [1, "r", 91, 275, 1], [1, "r", 90, 275, 1], [1, "r", 89, 274, 1], [1, "r", 90, 274, 1], [1, "r", 89, 275, 1], [1, "r", 88, 274, 1], [1, "r", 88, 273, 1], [1, "r", 86, 272, 1], [1, "r", 85, 271, 1], [1, "r", 86, 271, 1], [1, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, 1], [1, "r", 55, 249, 1], [1, "r", 55, 250, 1], [1, "r", 56, 250, 1], [1, "r", 57, 250, 1], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [1, "r", 58, 250, 1], [1, "r", 60, 250, 1], [1, "r", 61, 251, 1], [1, "r", 60, 251, 1], [1, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, 1], [1, "r", 58, 251, 1], [1, "r", 57, 251, 1], [1, "r", 56, 251, 1], [1, "r", 58, 252, 1], [1, "r", 57, 252, 1], [1, "r", 57, 253, 1], [1, "r", 58, 253, 1], [1, "r", 58, 254, 1], [1, "r", 59, 255, 1], [1, "r", 58, 255, 1], [1, "r", 57, 254, 1], [1, "r", 56, 252, 1], [1, "r", 55, 251, 1], [1, "r", 60, 255, 1], [1, "r", 61, 255, 1], [1, "r", 61, 256, 1], [1, "r", 60, 256, 1], [1, "r", 62, 256, 1], [1, "r", 62, 257, 1], [1, "r", 61, 257, 1], [1, "r", 64, 253, 1], [1, "r", 64, 254, 1], [1, "r", 65, 254, 1], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [1, "r", 65, 256, 1], [1, "r", 65, 257, 1], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [1, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, 255, 1], [1, "r", 66, 256, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [1, "r", 67, 259, 1], [1, "r", 66, 259, 1], [1, "r", 65, 259, 1], [1, "r", 56, 246, 1], [1, "r", 56, 245, 1], [1, "r", 68, 258, 1], [1, "r", 68, 259, 1], [1, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, 1], [1, "r", 70, 261, 1], [1, "r", 71, 261, 1], [1, "r", 67, 260, 1], [1, "r", 89, 269, 1], [1, "r", 89, 268, 1], [1, "r", 90, 268, 1], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, 1], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [1, "r", 79, 266, 1], [1, "r", 78, 265, 1], [1, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, 1], [1, "r", 75, 263, 1], [1, "r", 74, 263, 1], [1, "r", 74, 262, 1], [1, "r", 72, 262, 1], [1, "r", 73, 262, 1], [1, "r", 71, 262, 1], [1, "r", 85, 270, 1], [1, "r", 84, 270, 1], [1, "r", 84, 269, 1], [1, "r", 83, 269, 1], [1, "r", 82, 269, 1], [1, "r", 81, 269, 1], [1, "r", 81, 268, 1], [1, "r", 82, 268, 1], [1, "r", 83, 268, 1], [1, "r", 80, 268, 1], [1, "r", 80, 267, 1], [1, "r", 79, 267, 1], [1, "r", 78, 266, 1], [1, "r", 76, 265, 1], [1, "r", 75, 262, 1], [1, "r", 90, 280, 1], [1, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, 1], [1, "r", 88, 278, 1], [1, "r", 87, 277, 1], [1, "r", 86, 276, 1], [1, "r", 86, 275, 1], [1, "r", 86, 274, 1], [1, "r", 86, 273, 1], [1, "r", 85, 273, 1], [1, "r", 85, 272, 1], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [1, "r", 87, 278, 1], [1, "r", 84, 271, 1], [1, "r", 83, 270, 1], [1, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, 1], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [1, "r", 92, 282, 1], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [1, "r", 85, 275, 1], [1, "r", 84, 273, 1], [1, "r", 84, 272, 1], [1, "r", 83, 271, 1], [1, "r", 82, 270, 1], [1, "r", 84, 267, 0], [1, "r", 85, 267, 0], [1, "r", 76, 262, 0], [1, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [1, "r", 81, 263, 0], [1, "r", 82, 263, 0], [1, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, 0], [1, "r", 90, 262, 0], [1, "r", 87, 262, 0], [1, "r", 86, 262, 0], [1, "r", 86, 263, 0], [1, "r", 87, 263, 0], [1, "r", 91, 262, 0], [1, "r", 95, 262, 0], [1, "r", 94, 262, 0], [1, "r", 86, 267, 0], [1, "r", 87, 267, 0], [1, "r", 87, 268, 0], [1, "r", 86, 268, 0], [1, "r", 74, 189, 0], [1, "r", 75, 189, 0], [1, "r", 76, 189, 0], [1, "r", 77, 189, 0], [1, "r", 78, 190, 0], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [1, "r", 76, 190, 0], [1, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, 0], [1, "r", 76, 191, 0], [1, "r", 77, 191, 0], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [1, "r", 78, 192, 0], [1, "r", 77, 192, 0], [1, "r", 76, 192, 0], [1, "r", 75, 192, 0], [1, "r", 74, 192, 0], [1, "r", 73, 191, 0], [1, "f", 1, 96, 22, 1], [1, "s", 1, 97, 22, 1], [1, "f", 1, 98, 22, 1], [1, "s", 0, 99, 22, 1], [1, "s", 1, 100, 21, 1], [1, "s", 1, 96, 49, 1], [1, "s", 1, 100, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", 0, 97, 49, 1], [1, "f", 1, 98, 49, 1], [1, "r", 70, 218, 0], [1, "r", 71, 218, 0], [1, "r", 72, 218, 0], [1, "r", 73, 218, 0], [1, "r", 74, 219, 0], [1, "r", 73, 219, 0], [1, "r", 72, 219, 0], [1, "r", 71, 219, 0], [1, "r", 70, 219, 0], [1, "r", 73, 220, 0], [1, "r", 72, 220, 0], [1, "r", 71, 220, 0], [1, "r", 72, 221, 0], [1, "r", 71, 221, 0], [1, "r", 70, 221, 0], [1, "r", 69, 221, 0], [1, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [1, "r", 69, 219, 0], [1, "r", 68, 220, 0], [1, "r", 73, 221, 0], [1, "r", 73, 222, 0], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [1, "r", 74, 221, 0], [1, "r", 74, 220, 0], [1, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, 0], [1, "r", 69, 222, 0], [1, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, 0], [1, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, 0], [1, "r", 27, 218, 0], [1, "r", 28, 218, 0], [1, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, 0], [1, "r", 26, 217, 0], [1, "r", 27, 217, 0], [1, "r", 28, 216, 0], [1, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, 0], [1, "r", 32, 218, 0], [1, "r", 31, 216, 0], [1, "r", 31, 221, 0], [1, "r", 31, 220, 0], [1, "r", 30, 220, 0], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [1, "r", 25, 218, 0], [1, "r", 27, 221, 0], [1, "r", 28, 221, 0], [1, "r", 29, 221, 0], [1, "r", 30, 221, 0], [1, "r", 32, 220, 0], [1, "r", 32, 219, 0], [1, "r", 33, 218, 0], [1, "r", 33, 219, 0], [1, "r", 75, 238, 0], [1, "r", 76, 238, 0], [1, "r", 77, 239, 0], [1, "r", 76, 239, 0], [1, "r", 75, 239, 0], [1, "r", 74, 239, 0], [1, "r", 76, 240, 0], [1, "r", 77, 240, 0], [1, "r", 78, 240, 0], [1, "r", 77, 241, 0], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [1, "r", 75, 240, 0], [1, "r", 74, 240, 0], [1, "r", 78, 239, 0], [1, "r", 77, 238, 0], [1, "r", 18, 253, 0], [1, "r", 19, 252, 0], [1, "r", 20, 252, 0], [1, "r", 21, 253, 0], [1, "r", 23, 254, 0], [1, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, 0], [1, "r", 18, 254, 0], [1, "r", 19, 253, 0], [1, "r", 20, 253, 0], [1, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [1, "r", 20, 255, 0], [1, "r", 19, 255, 0], [1, "r", 18, 255, 0], [1, "r", 17, 255, 0], [1, "r", 17, 254, 0], [1, "r", 22, 255, 0], [1, "r", 19, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, 256, 0], [1, "r", 39, 270, 0], [1, "r", 40, 270, 0], [1, "r", 41, 270, 0], [1, "r", 43, 270, 0], [1, "r", 44, 270, 0], [1, "r", 46, 270, 0], [1, "r", 42, 270, 0], [1, "r", 45, 270, 0], [1, "r", 44, 269, 0], [1, "r", 43, 269, 0], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [1, "r", 41, 269, 0], [1, "r", 45, 271, 0], [1, "r", 44, 271, 0], [1, "r", 43, 271, 0], [1, "r", 42, 271, 0], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, 0], [1, "r", 44, 272, 0], [1, "r", 43, 272, 0], [1, "r", 42, 272, 0], [1, "r", 19, 284, 0], [1, "r", 20, 284, 0], [1, "r", 21, 285, 0], [1, "r", 22, 285, 0], [1, "r", 23, 286, 0], [1, "r", 22, 288, 0], [1, "r", 20, 288, 0], [1, "r", 18, 288, 0], [1, "r", 17, 287, 0], [1, "r", 16, 287, 0], [1, "r", 16, 286, 0], [1, "r", 17, 286, 0], [1, "r", 18, 286, 0], [1, "r", 19, 286, 0], [1, "r", 20, 286, 0], [1, "r", 21, 286, 0], [1, "r", 22, 286, 0], [1, "r", 20, 285, 0], [1, "r", 19, 285, 0], [1, "r", 18, 285, 0], [1, "r", 17, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, 0], [1, "r", 21, 287, 0], [1, "r", 22, 287, 0], [1, "r", 23, 287, 0], [1, "r", 21, 288, 0], [1, "r", 19, 288, 0], [1, "r", 17, 288, 0], [1, "r", 19, 289, 0], [1, "r", 21, 289, 0], [1, "r", 22, 289, 0], [1, "r", 20, 289, 0], [1, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, 0], [1, "r", 64, 287, 0], [1, "r", 63, 287, 0], [1, "r", 60, 287, 0], [1, "r", 59, 285, 0], [1, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [1, "r", 64, 283, 0], [1, "r", 63, 283, 0], [1, "r", 62, 283, 0], [1, "r", 61, 283, 0], [1, "r", 60, 283, 0], [1, "r", 59, 284, 0], [1, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [1, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [1, "r", 62, 286, 0], [1, "r", 63, 286, 0], [1, "r", 64, 286, 0], [1, "r", 65, 286, 0], [1, "r", 67, 285, 0], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [1, "r", 62, 285, 0], [1, "r", 61, 285, 0], [1, "r", 60, 285, 0], [1, "r", 60, 284, 0], [1, "r", 61, 284, 0], [1, "r", 62, 284, 0], [1, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [1, "r", 67, 286, 0], [1, "p", 0, 13, 189, 1], [1, "p", 0, 32, 184, 1], [1, "p", 0, 47, 191, 1], [1, "p", 0, 64, 184, 1], [1, "p", 0, 84, 192, 1], [1, "p", 0, 78, 207, 1], [1, "p", 0, 58, 216, 1], [1, "p", 0, 41, 211, 1], [1, "p", 0, 18, 211, 1], [1, "p", 0, 14, 230, 1], [1, "p", 0, 29, 237, 1], [1, "p", 0, 50, 230, 1], [1, "p", 0, 78, 241, 1], [1, "p", 0, 74, 256, 1], [1, "p", 0, 68, 266, 1], [1, "p", 0, 48, 259, 1], [1, "p", 0, 31, 263, 1], [1, "p", 0, 18, 274, 1], [1, "p", 0, 33, 283, 1], [1, "p", 0, 66, 287, 1], [1, "p", 0, 82, 291, 1], [1, "p", 0, 16, 295, 1], [1, "p", 0, 45, 294, 1], [1, "p", 0, 18, 252, 1], [1, "p", 0, 79, 227, 1], [1, "p", 0, 32, 200, 1], [1, "p", 0, 64, 200, 1], [1, "s", 0, 21, 193, 1], [1, "s", 1, 18, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, 15, 181, 0], [1, "b", 2, 18, 190, 0], [1, "b", 2, 29, 193, 0], [1, "t", 3, 16, 182, 0], [1, "t", 3, 13, 195, 0], [1, "t", 4, 16, 183, 0], [1, "t", 5, 10, 184, 0], [1, "t", 5, 23, 182, 0], [1, "t", 4, 30, 187, 0], [1, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, 1], [1, "t", 3, 33, 183, 0], [1, "b", 1, 36, 189, 0], [1, "t", 2, 35, 190, 0], [1, "b", 3, 19, 200, 0], [1, "s", 0, 28, 194, 1], [1, "s", 1, 32, 196, 1], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, 1], [1, "s", 2, 10, 192, 1], [1, "s", 2, 12, 183, 1], [1, "s", 1, 15, 199, 1], [1, "b", 0, 12, 202, 0], [1, "t", 2, 13, 203, 0], [1, "t", 4, 20, 200, 0], [1, "t", 4, 12, 194, 0], [1, "t", 5, 15, 205, 0], [1, "t", 5, 29, 200, 0], [1, "t", 3, 28, 201, 0], [1, "s", 2, 25, 199, 1], [1, "s", 1, 22, 204, 1], [1, "g", 2, 25, 205, 1], [1, "b", 1, 27, 216, 0], [1, "s", 1, 25, 217, 1], [1, "s", 1, 33, 217, 1], [1, "s", 2, 35, 215, 1], [1, "s", 0, 32, 221, 1], [1, "t", 2, 31, 222, 0], [1, "t", 4, 26, 221, 0], [1, "b", 3, 27, 222, 0], [1, "b", 0, 17, 217, 0], [1, "t", 3, 18, 216, 0], [1, "t", 4, 13, 215, 0], [1, "t", 5, 30, 213, 0], [1, "t", 5, 24, 208, 0], [1, "s", 1, 12, 216, 1], [1, "s", 2, 11, 210, 1], [1, "s", 2, 34, 223, 1], [1, "b", 2, 36, 218, 0], [1, "t", 4, 40, 206, 0], [1, "t", 5, 35, 203, 0], [1, "t", 3, 39, 206, 0], [1, "b", 1, 34, 204, 0], [1, "s", 1, 33, 206, 1], [1, "s", 1, 42, 203, 1], [1, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, 0], [1, "t", 5, 44, 187, 0], [1, "b", 1, 46, 181, 0], [1, "t", 2, 47, 182, 0], [1, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [1, "t", 4, 55, 184, 0], [1, "t", 5, 62, 195, 0], [1, "s", 1, 51, 185, 1], [1, "s", 2, 62, 180, 1], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, 1], [1, "s", 2, 48, 195, 1], [1, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [1, "t", 3, 56, 204, 0], [1, "t", 4, 57, 204, 0], [1, "t", 4, 51, 204, 0], [1, "s", 1, 52, 205, 1], [1, "s", 2, 57, 200, 1], [1, "s", 1, 56, 199, 1], [1, "b", 0, 55, 192, 0], [1, "t", 3, 56, 193, 0], [1, "t", 4, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, 0], [1, "t", 2, 73, 192, 0], [1, "t", 4, 72, 191, 0], [1, "t", 5, 78, 193, 0], [1, "b", 0, 79, 192, 0], [1, "s", 2, 79, 190, 1], [1, "s", 1, 74, 194, 1], [1, "s", 1, 72, 187, 1], [1, "s", 0, 74, 183, 1], [1, "s", 1, 75, 183, 1], [1, "t", 2, 69, 181, 0], [1, "t", 4, 70, 182, 0], [1, "t", 5, 69, 180, 0], [1, "b", 1, 65, 189, 0], [1, "b", 2, 66, 189, 0], [1, "t", 3, 64, 188, 0], [1, "t", 4, 67, 192, 0], [1, "b", 2, 85, 183, 0], [1, "t", 1, 84, 184, 0], [1, "t", 4, 81, 180, 0], [1, "t", 5, 89, 180, 0], [1, "t", 0, 90, 188, 0], [1, "t", 3, 89, 190, 0], [1, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", 1, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", 4, 87, 207, 0], [1, "s", 2, 79, 202, 1], [1, "s", 1, 80, 203, 1], [1, "t", 0, 71, 200, 0], [1, "b", 2, 72, 201, 0], [1, "t", 2, 65, 205, 0], [1, "t", 1, 66, 206, 0], [1, "t", 4, 63, 209, 0], [1, "t", 5, 73, 203, 0], [1, "s", 0, 70, 207, 1], [1, "s", 1, 71, 206, 1], [1, "s", 2, 68, 199, 1], [1, "s", 1, 64, 213, 1], [1, "t", 0, 85, 213, 0], [1, "b", 2, 84, 212, 0], [1, "t", 3, 77, 209, 0], [1, "t", 4, 83, 216, 0], [1, "t", 4, 73, 209, 0], [1, "b", 0, 86, 222, 0], [1, "b", 3, 87, 221, 0], [1, "s", 1, 80, 214, 1], [1, "s", 2, 87, 216, 1], [1, "s", 2, 84, 224, 1], [1, "s", 1, 77, 227, 1], [1, "t", 1, 74, 222, 0], [1, "b", 1, 69, 218, 0], [1, "b", 2, 75, 219, 0], [1, "s", 2, 74, 218, 1], [1, "s", 1, 69, 223, 1], [1, "s", 1, 77, 221, 1], [1, "b", 1, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, 0], [1, "t", 2, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, 0], [1, "s", 0, 73, 242, 1], [1, "s", 0, 81, 238, 1], [1, "s", 1, 82, 237, 1], [1, "s", 2, 72, 237, 1], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, 0], [1, "b", 2, 62, 229, 0], [1, "t", 4, 67, 231, 0], [1, "t", 4, 62, 228, 0], [1, "t", 5, 64, 233, 0], [1, "t", 2, 65, 234, 0], [1, "t", 2, 51, 220, 0], [1, "t", 1, 50, 218, 0], [1, "b", 1, 45, 223, 0], [1, "b", 2, 46, 224, 0], [1, "t", 4, 49, 218, 0], [1, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", 2, 51, 213, 1], [1, "s", 2, 42, 227, 1], [1, "s", 1, 44, 227, 1], [1, "s", 1, 60, 230, 1], [1, "s", 2, 59, 231, 1], [1, "b", 1, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, 0], [1, "t", 0, 75, 251, 0], [1, "b", 0, 83, 246, 0], [1, "t", 3, 82, 247, 0], [1, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, 0], [1, "t", 5, 75, 252, 0], [1, "s", 1, 79, 257, 1], [1, "s", 2, 78, 249, 1], [1, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, 1], [1, "s", 2, 87, 269, 1], [1, "s", 0, 84, 268, 1], [1, "s", 2, 76, 267, 1], [1, "s", 1, 66, 261, 1], [1, "s", 1, 87, 274, 1], [1, "s", 1, 76, 263, 1], [1, "s", 1, 59, 251, 1], [1, "s", 0, 59, 252, 1], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [1, "t", 2, 79, 271, 0], [1, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [1, "b", 1, 71, 264, 0], [1, "b", 1, 88, 269, 0], [1, "t", 5, 84, 264, 0], [1, "t", 5, 79, 261, 0], [1, "t", 5, 72, 265, 0], [1, "t", 5, 77, 270, 0], [1, "t", 0, 87, 261, 0], [1, "t", 2, 86, 260, 0], [1, "t", 4, 84, 255, 0], [1, "t", 4, 68, 255, 0], [1, "t", 1, 67, 254, 0], [1, "t", 2, 65, 262, 0], [1, "t", 1, 57, 260, 0], [1, "t", 2, 58, 259, 0], [1, "b", 1, 63, 256, 0], [1, "b", 1, 52, 248, 0], [1, "t", 2, 53, 248, 0], [1, "s", 1, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", 2, 52, 252, 1], [1, "s", 2, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", 2, 58, 244, 0], [1, "b", 1, 53, 237, 0], [1, "t", 2, 54, 237, 0], [1, "t", 2, 41, 238, 0], [1, "t", 1, 42, 237, 0], [1, "t", 5, 57, 235, 0], [1, "t", 5, 60, 246, 0], [1, "t", 5, 50, 252, 0], [1, "t", 1, 42, 248, 0], [1, "b", 1, 43, 249, 0], [1, "b", 3, 37, 243, 0], [1, "s", 0, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, 1], [1, "s", 2, 60, 243, 1], [1, "s", 2, 36, 240, 1], [1, "s", 2, 43, 254, 1], [1, "s", 1, 42, 254, 1], [1, "t", 1, 38, 233, 0], [1, "t", 2, 35, 235, 0], [1, "t", 4, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", 4, 43, 235, 0], [1, "t", 5, 45, 249, 0], [1, "t", 5, 41, 253, 0], [1, "b", 1, 20, 227, 0], [1, "b", 1, 14, 240, 0], [1, "t", 3, 21, 227, 0], [1, "t", 3, 27, 234, 0], [1, "t", 3, 15, 241, 0], [1, "t", 3, 12, 229, 0], [1, "t", 4, 17, 224, 0], [1, "t", 4, 11, 231, 0], [1, "t", 4, 22, 238, 0], [1, "t", 4, 11, 239, 0], [1, "t", 1, 22, 243, 0], [1, "b", 2, 23, 242, 0], [1, "s", 1, 23, 238, 1], [1, "s", 1, 22, 228, 1], [1, "s", 2, 24, 228, 1], [1, "s", 2, 21, 236, 1], [1, "s", 0, 13, 228, 1], [1, "s", 0, 16, 242, 1], [1, "s", 1, 15, 244, 1], [1, "s", 1, 34, 236, 1], [1, "t", 1, 26, 249, 0], [1, "t", 1, 22, 256, 0], [1, "t", 2, 23, 255, 0], [1, "b", 1, 17, 256, 0], [1, "b", 2, 18, 256, 0], [1, "s", 0, 21, 252, 1], [1, "s", 2, 20, 250, 1], [1, "s", 2, 23, 259, 1], [1, "s", 1, 13, 257, 1], [1, "t", 1, 31, 254, 0], [1, "t", 2, 32, 254, 0], [1, "t", 4, 28, 254, 0], [1, "t", 4, 34, 258, 0], [1, "t", 0, 29, 260, 0], [1, "b", 2, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", 2, 42, 263, 0], [1, "t", 4, 46, 264, 0], [1, "b", 1, 39, 265, 0], [1, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, 0], [1, "t", 5, 52, 273, 0], [1, "s", 1, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", 2, 41, 274, 1], [1, "t", 2, 42, 268, 0], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [1, "b", 1, 14, 265, 0], [1, "t", 2, 15, 266, 0], [1, "t", 4, 19, 264, 0], [1, "t", 4, 29, 263, 0], [1, "t", 4, 11, 269, 0], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, 0], [1, "t", 2, 20, 279, 0], [1, "t", 0, 19, 278, 0], [1, "t", 3, 13, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, 18, 289, 0], [1, "t", 2, 20, 283, 0], [1, "t", 2, 19, 290, 0], [1, "t", 4, 19, 283, 0], [1, "t", 4, 20, 290, 0], [1, "s", 1, 16, 285, 1], [1, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, 1], [1, "s", 2, 16, 278, 1], [1, "s", 1, 21, 268, 1], [1, "s", 2, 19, 268, 1], [1, "t", 0, 12, 294, 0], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", 3, 10, 299, 0], [1, "t", 4, 11, 287, 0], [1, "t", 4, 17, 298, 0], [1, "t", 1, 27, 294, 0], [1, "b", 2, 26, 295, 0], [1, "t", 3, 33, 297, 0], [1, "b", 1, 48, 278, 0], [1, "b", 0, 46, 280, 0], [1, "b", 2, 50, 280, 0], [1, "t", 0, 44, 282, 0], [1, "b", 1, 49, 283, 0], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, 0], [1, "b", 3, 44, 284, 0], [1, "b", 0, 47, 284, 0], [1, "b", 2, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", 1, 44, 286, 0], [1, "b", 2, 46, 286, 0], [1, "b", 1, 42, 285, 0], [1, "b", 3, 41, 286, 0], [1, "t", 5, 42, 287, 0], [1, "b", 1, 42, 278, 0], [1, "b", 2, 43, 279, 0], [1, "b", 0, 40, 280, 0], [1, "t", 4, 39, 283, 0], [1, "t", 4, 39, 279, 0], [1, "t", 5, 43, 277, 0], [1, "t", 5, 47, 287, 0], [1, "t", 4, 46, 277, 0], [1, "t", 4, 45, 290, 0], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", 1, 29, 279, 0], [1, "b", 1, 32, 277, 0], [1, "t", 3, 31, 278, 0], [1, "b", 2, 28, 280, 0], [1, "t", 4, 29, 286, 0], [1, "t", 5, 28, 275, 0], [1, "t", 3, 37, 292, 0], [1, "b", 1, 36, 291, 0], [1, "b", 0, 34, 298, 0], [1, "t", 4, 31, 292, 0], [1, "t", 4, 46, 295, 0], [1, "t", 4, 59, 287, 0], [1, "b", 1, 58, 286, 0], [1, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, 1], [1, "s", 0, 67, 284, 1], [1, "t", 3, 66, 283, 0], [1, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [1, "b", 1, 76, 294, 0], [1, "t", 5, 75, 295, 0], [1, "t", 5, 56, 293, 0], [1, "t", 5, 59, 281, 0], [1, "t", 5, 67, 291, 0], [1, "b", 0, 88, 293, 0], [1, "t", 2, 89, 292, 0], [1, "t", 2, 85, 286, 0], [1, "t", 4, 88, 289, 0], [1, "t", 4, 79, 287, 0], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, 0], [1, "b", 0, 75, 278, 0], [1, "t", 3, 74, 277, 0], [1, "t", 4, 81, 276, 0], [1, "t", 2, 65, 276, 0], [1, "b", 1, 66, 275, 0], [1, "g", 0, 45, 261, 1], [1, "g", 1, 39, 258, 1], [1, "g", 0, 35, 250, 1], [1, "g", 2, 22, 247, 1], [1, "g", 2, 27, 227, 1], [1, "g", 2, 63, 218, 1], [1, "g", 1, 56, 224, 1], [1, "g", 0, 46, 231, 1], [1, "g", 1, 65, 240, 1], [1, "g", 2, 67, 238, 1], [1, "g", 2, 79, 232, 1], [1, "g", 2, 72, 253, 1], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", 2, 58, 274, 1], [1, "de", 2, 14, 182, 0], [1, "de", 2, 24, 182, 0], [1, "de", 0, 11, 185, 0], [1, "de", 0, 14, 194, 0], [1, "de", 1, 25, 196, 0], [1, "de", 3, 31, 183, 0], [1, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, 0], [1, "de", 1, 38, 191, 0], [1, "de", 0, 56, 181, 0], [1, "de", 1, 68, 182, 0], [1, "de", 2, 80, 181, 0], [1, "de", 3, 86, 187, 0], [1, "de", 0, 84, 193, 0], [1, "de", 1, 82, 201, 0], [1, "de", 2, 64, 191, 0], [1, "de", 2, 72, 200, 0], [1, "de", 3, 64, 201, 0], [1, "de", 2, 76, 209, 0], [1, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", 0, 57, 208, 0], [1, "de", 0, 41, 203, 0], [1, "de", 1, 15, 206, 0], [1, "de", 2, 25, 209, 0], [1, "de", 3, 16, 218, 0], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", 2, 24, 238, 0], [1, "de", 3, 22, 246, 0], [1, "de", 3, 10, 253, 0], [1, "de", 1, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, 14, 267, 0], [1, "de", 0, 24, 268, 0], [1, "de", 0, 15, 278, 0], [1, "de", 2, 21, 279, 0], [1, "de", 2, 30, 272, 0], [1, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", 3, 12, 291, 0], [1, "de", 3, 30, 287, 0], [1, "de", 3, 27, 293, 0], [1, "de", 0, 25, 296, 0], [1, "de", 0, 11, 298, 0], [1, "de", 0, 8, 286, 0], [1, "de", 2, 36, 299, 0], [1, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, 0], [1, "de", 1, 48, 287, 0], [1, "de", 1, 46, 277, 0], [1, "de", 1, 53, 278, 0], [1, "de", 3, 48, 295, 0], [1, "de", 0, 57, 294, 0], [1, "de", 1, 65, 290, 0], [1, "de", 1, 84, 292, 0], [1, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, 0], [1, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [1, "de", 2, 71, 267, 0], [1, "de", 2, 65, 261, 0], [1, "de", 2, 47, 264, 0], [1, "de", 3, 47, 258, 0], [1, "de", 3, 53, 251, 0], [1, "de", 2, 40, 253, 0], [1, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, 0], [1, "de", 2, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, 0], [1, "de", 2, 65, 241, 0], [1, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, 0], [1, "de", 2, 86, 253, 0], [1, "de", 2, 83, 245, 0], [1, "de", 1, 82, 238, 0], [1, "de", 3, 76, 235, 0], [1, "de", 2, 86, 232, 0], [1, "de", 0, 86, 224, 0], [1, "de", 2, 76, 226, 0], [1, "de", 2, 61, 228, 0], [1, "de", 2, 58, 217, 0], [1, "de", 0, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", 20, 17, 180, 0], [1, "de", 22, 18, 181, 0], [1, "de", 19, 30, 184, 0], [1, "de", 19, 27, 187, 0], [1, "de", 19, 30, 195, 0], [1, "de", 19, 18, 192, 0], [1, "de", 19, 44, 182, 0], [1, "de", 19, 49, 182, 0], [1, "de", 19, 54, 182, 0], [1, "de", 19, 59, 183, 0], [1, "de", 19, 56, 186, 0], [1, "de", 19, 46, 188, 0], [1, "de", 19, 58, 193, 0], [1, "de", 19, 67, 187, 0], [1, "de", 19, 65, 192, 0], [1, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [1, "de", 19, 80, 194, 0], [1, "de", 19, 72, 193, 0], [1, "de", 19, 82, 182, 0], [1, "de", 19, 88, 185, 0], [1, "de", 19, 87, 189, 0], [1, "de", 19, 86, 197, 0], [1, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, 0], [1, "de", 19, 70, 202, 0], [1, "de", 19, 83, 199, 0], [1, "de", 19, 86, 208, 0], [1, "de", 19, 84, 214, 0], [1, "de", 19, 83, 211, 0], [1, "de", 19, 84, 217, 0], [1, "de", 19, 77, 210, 0], [1, "de", 19, 71, 210, 0], [1, "de", 19, 73, 213, 0], [1, "de", 19, 66, 207, 0], [1, "de", 19, 66, 204, 0], [1, "de", 19, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, 0], [1, "de", 19, 49, 199, 0], [1, "de", 19, 50, 205, 0], [1, "de", 19, 40, 197, 0], [1, "de", 19, 38, 198, 0], [1, "de", 19, 40, 208, 0], [1, "de", 19, 36, 204, 0], [1, "de", 19, 33, 204, 0], [1, "de", 19, 29, 202, 0], [1, "de", 19, 27, 200, 0], [1, "de", 19, 26, 193, 0], [1, "de", 19, 18, 201, 0], [1, "de", 19, 20, 199, 0], [1, "de", 19, 12, 196, 0], [1, "de", 19, 12, 204, 0], [1, "de", 19, 11, 201, 0], [1, "de", 19, 23, 208, 0], [1, "de", 19, 31, 214, 0], [1, "de", 19, 26, 215, 0], [1, "de", 19, 36, 217, 0], [1, "de", 19, 32, 223, 0], [1, "de", 19, 26, 223, 0], [1, "de", 19, 18, 218, 0], [1, "de", 19, 15, 215, 0], [1, "de", 19, 17, 212, 0], [1, "de", 19, 15, 224, 0], [1, "de", 19, 19, 229, 0], [1, "de", 19, 10, 230, 0], [1, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", 19, 13, 243, 0], [1, "de", 19, 24, 244, 0], [1, "de", 19, 24, 250, 0], [1, "de", 19, 28, 253, 0], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [1, "de", 19, 31, 260, 0], [1, "de", 19, 38, 267, 0], [1, "de", 19, 44, 264, 0], [1, "de", 19, 43, 261, 0], [1, "de", 19, 16, 257, 0], [1, "de", 19, 22, 258, 0], [1, "de", 19, 12, 253, 0], [1, "de", 19, 8, 242, 0], [1, "de", 19, 8, 255, 0], [1, "de", 19, 15, 264, 0], [1, "de", 19, 20, 265, 0], [1, "de", 19, 12, 271, 0], [1, "de", 19, 8, 272, 0], [1, "de", 19, 13, 277, 0], [1, "de", 19, 21, 277, 0], [1, "de", 19, 21, 281, 0], [1, "de", 19, 27, 282, 0], [1, "de", 19, 29, 278, 0], [1, "de", 19, 29, 273, 0], [1, "de", 19, 36, 271, 0], [1, "de", 19, 8, 278, 0], [1, "de", 19, 11, 286, 0], [1, "de", 19, 17, 291, 0], [1, "de", 19, 14, 294, 0], [1, "de", 19, 8, 292, 0], [1, "de", 19, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", 19, 16, 301, 0], [1, "de", 19, 27, 296, 0], [1, "de", 19, 25, 292, 0], [1, "de", 19, 23, 301, 0], [1, "de", 19, 28, 301, 0], [1, "de", 19, 35, 297, 0], [1, "de", 19, 37, 301, 0], [1, "de", 19, 43, 301, 0], [1, "de", 19, 46, 294, 0], [1, "de", 19, 46, 288, 0], [1, "de", 19, 40, 287, 0], [1, "de", 19, 50, 301, 0], [1, "de", 19, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", 19, 71, 301, 0], [1, "de", 19, 80, 301, 0], [1, "de", 19, 87, 301, 0], [1, "de", 19, 86, 294, 0], [1, "de", 19, 87, 290, 0], [1, "de", 19, 82, 286, 0], [1, "de", 19, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", 19, 66, 288, 0], [1, "de", 19, 58, 288, 0], [1, "de", 19, 67, 282, 0], [1, "de", 19, 61, 281, 0], [1, "de", 19, 60, 295, 0], [1, "de", 19, 50, 282, 0], [1, "de", 19, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", 19, 44, 277, 0], [1, "de", 19, 41, 282, 0], [1, "de", 19, 38, 281, 0], [1, "de", 19, 42, 288, 0], [1, "de", 19, 52, 281, 0], [1, "de", 19, 50, 275, 0], [1, "de", 19, 39, 277, 0], [1, "de", 19, 38, 284, 0], [1, "de", 19, 51, 285, 0], [1, "de", 19, 38, 278, 0], [1, "de", 19, 47, 272, 0], [1, "de", 19, 44, 267, 0], [1, "de", 19, 76, 280, 0], [1, "de", 19, 78, 272, 0], [1, "de", 19, 68, 275, 0], [1, "de", 19, 70, 265, 0], [1, "de", 19, 65, 263, 0], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, 0], [1, "de", 19, 56, 266, 0], [1, "de", 19, 55, 260, 0], [1, "de", 19, 59, 258, 0], [1, "de", 19, 62, 255, 0], [1, "de", 19, 67, 253, 0], [1, "de", 19, 69, 256, 0], [1, "de", 19, 44, 253, 0], [1, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, 0], [1, "de", 19, 39, 239, 0], [1, "de", 19, 42, 234, 0], [1, "de", 19, 37, 235, 0], [1, "de", 19, 45, 226, 0], [1, "de", 19, 46, 222, 0], [1, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, 0], [1, "de", 19, 76, 218, 0], [1, "de", 19, 84, 221, 0], [1, "de", 19, 88, 223, 0], [1, "de", 19, 76, 230, 0], [1, "de", 19, 86, 234, 0], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, 0], [1, "de", 19, 83, 247, 0], [1, "de", 19, 88, 247, 0], [1, "de", 19, 84, 254, 0], [1, "de", 19, 86, 251, 0], [1, "de", 19, 85, 260, 0], [1, "de", 19, 79, 260, 0], [1, "de", 19, 76, 251, 0], [1, "de", 19, 72, 251, 0], [1, "de", 19, 69, 251, 0], [1, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, 0], [1, "de", 19, 87, 271, 0], [1, "de", 19, 82, 277, 0], [1, "de", 19, 87, 284, 0], [1, "de", 19, 87, 237, 0], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, 0], [1, "de", 19, 34, 234, 0], [1, "de", 19, 27, 233, 0], [1, "de", 19, 37, 293, 0], [1, "de", 29, 13, 181, 0], [1, "de", 29, 8, 180, 0], [1, "de", 30, 13, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, 0], [1, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, 0], [1, "de", 30, 66, 188, 0], [1, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, 0], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [1, "de", 31, 82, 203, 0], [1, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [1, "de", 30, 88, 220, 0], [1, "de", 30, 78, 229, 0], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [1, "de", 30, 72, 208, 0], [1, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, 0], [1, "de", 29, 63, 210, 0], [1, "de", 29, 50, 204, 0], [1, "de", 30, 41, 205, 0], [1, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [1, "de", 30, 20, 201, 0], [1, "de", 29, 10, 203, 0], [1, "de", 29, 14, 196, 0], [1, "de", 29, 24, 187, 0], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, 0], [1, "de", 30, 28, 214, 0], [1, "de", 31, 24, 218, 0], [1, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [1, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, 0], [1, "de", 30, 58, 261, 0], [1, "de", 30, 73, 276, 0], [1, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, 0], [1, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, 0], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, 0], [1, "de", 29, 28, 296, 0], [1, "de", 29, 18, 292, 0], [1, "de", 29, 24, 284, 0], [1, "de", 30, 10, 295, 0], [1, "de", 30, 10, 286, 0], [1, "de", 30, 15, 279, 0], [1, "de", 30, 15, 269, 0], [1, "de", 30, 21, 259, 0], [1, "de", 30, 12, 256, 0], [1, "de", 30, 31, 245, 0], [1, "de", 30, 12, 240, 0], [1, "de", 30, 28, 235, 0], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [1, "r", 96, 262, 0], [1, "r", 97, 262, 0], [1, "r", 98, 262, 0], [1, "r", 97, 270, 0], [1, "r", 97, 271, 0], [1, "r", 97, 272, 0], [1, "r", 97, 273, 0], [1, "r", 97, 274, 0], [1, "r", 97, 275, 0], [1, "r", 97, 276, 0], [1, "r", 97, 277, 0], [1, "r", 97, 278, 0], [1, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [1, "r", 98, 273, 0], [1, "r", 98, 274, 0], [1, "r", 98, 275, 0], [1, "r", 98, 276, 0], [1, "r", 98, 277, 0], [1, "r", 98, 278, 0], [1, "r", 96, 283, 0], [1, "r", 97, 283, 0], [1, "r", 97, 284, 0], [1, "r", 97, 285, 0], [1, "r", 98, 283, 0], [1, "r", 98, 284, 0], [1, "r", 98, 285, 0], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, 0], [1, "r", 96, 274, 0], [1, "r", 96, 275, 0], [1, "r", 96, 276, 0], [1, "r", 96, 277, 0], [1, "r", 96, 278, 0], [1, "r", 44, 248, 0], [1, "de", 16, 94, 290, 0], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, 1], [1, "r", 94, 281, 1], [1, "r", 90, 281, 1], [1, "r", 91, 282, 1], [1, "r", 89, 281, 1], [1, "r", 85, 276, 1], [1, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", 0, 85, 279, 1], [1, "r", 86, 279, 1], [1, "r", 87, 280, 1], [1, "r", 96, 281, 0], [1, "r", 97, 281, 0], [1, "r", 98, 281, 0], [1, "r", 98, 282, 0], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [1, "r", 68, 261, 1], [1, "fo", 1, 94, 168, 0], [1, "fo", 2, 94, 151, 0], [1, "fo", 1, 94, 138, 0], [1, "fo", 1, 93, 124, 0], [1, "fo", 1, 94, 129, 0], [1, "fo", 1, 93, 113, 0], [1, "fo", 1, 94, 102, 0], [1, "fo", 1, 94, 93, 0], [1, "fo", 1, 93, 90, 0], [1, "fo", 1, 94, 79, 0], [1, "fo", 1, 94, 76, 0], [1, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", 1, 94, 53, 0], [1, "fo", 1, 93, 10, 0], [1, "fo", 1, 85, 8, 0], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, 13, 0], [1, "fo", 1, 69, 9, 0], [1, "fo", 2, 68, 14, 0], [1, "fo", 2, 66, 25, 0], [1, "fo", 2, 92, 9, 0], [1, "fo", 2, 94, 14, 0], [1, "fo", 2, 87, 9, 0], [1, "fo", 2, 71, 9, 0], [1, "fo", 2, 90, 12, 0], [1, "fo", 2, 91, 13, 0], [1, "fo", 1, 74, 12, 0], [1, "fo", 2, 72, 12, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, 15, 0], [1, "fo", 2, 84, 12, 0], [1, "fo", 2, 81, 14, 0], [1, "fo", 1, 84, 13, 0], [1, "fo", 1, 84, 19, 0], [1, "fo", 1, 11, 9, 0], [1, "fo", 1, 7, 14, 0], [1, "fo", 1, 8, 22, 0], [1, "fo", 1, 7, 34, 0], [1, "fo", 1, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [1, "fo", 2, 9, 21, 0], [1, "fo", 2, 31, 10, 0], [1, "fo", 2, 33, 27, 0], [1, "fo", 2, 9, 34, 0], [1, "fo", 2, 8, 19, 0], [1, "fo", 1, 14, 10, 0], [1, "fo", 2, 13, 9, 0], [1, "fo", 2, 15, 11, 0], [1, "fo", 2, 9, 9, 0], [1, "fo", 2, 9, 10, 0], [1, "fo", 2, 9, 15, 0], [1, "fo", 2, 10, 23, 0], [1, "fo", 2, 34, 29, 0], [1, "fo", 2, 27, 18, 0], [1, "fo", 2, 25, 21, 0], [1, "fo", 2, 20, 18, 0], [1, "fo", 2, 18, 21, 0], [1, "fo", 2, 29, 9, 0], [1, "fo", 2, 13, 14, 0], [1, "fo", 2, 9, 38, 0], [1, "fo", 2, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [1, "fo", 2, 77, 25, 0], [1, "fo", 2, 86, 35, 0], [1, "fo", 1, 70, 35, 0], [1, "fo", 2, 72, 36, 0], [1, "fo", 2, 73, 31, 0], [1, "fo", 2, 89, 39, 0], [1, "fo", 2, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, 0], [1, "de", 22, 17, 206, 0], [1, "de", 19, 8, 184, 0], [1, "de", 19, 22, 183, 0], [1, "de", 19, 35, 188, 0], [1, "de", 19, 36, 192, 0], [1, "de", 19, 50, 277, 0], [1, "de", 19, 35, 279, 0], [1, "t", 4, 7, 178, 0], [1, "t", 1, 7, 179, 0], [1, "t", 3, 7, 180, 0], [1, "t", 2, 7, 181, 0], [1, "t", 5, 7, 182, 0], [1, "t", 4, 7, 183, 0], [1, "t", 3, 7, 184, 0], [1, "t", 4, 7, 185, 0], [1, "t", 2, 7, 186, 0], [1, "t", 1, 7, 187, 0], [1, "t", 4, 7, 188, 0], [1, "t", 3, 7, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, 7, 191, 0], [1, "t", 3, 7, 192, 0], [1, "t", 4, 7, 193, 0], [1, "t", 3, 7, 194, 0], [1, "t", 5, 7, 195, 0], [1, "t", 2, 7, 196, 0], [1, "t", 4, 7, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", 4, 7, 199, 0], [1, "t", 2, 7, 200, 0], [1, "t", 5, 7, 201, 0], [1, "t", 2, 7, 202, 0], [1, "t", 4, 7, 203, 0], [1, "t", 2, 7, 204, 0], [1, "t", 5, 7, 205, 0], [1, "t", 2, 7, 206, 0], [1, "t", 1, 7, 207, 0], [1, "t", 4, 7, 208, 0], [1, "t", 3, 7, 209, 0], [1, "t", 1, 7, 210, 0], [1, "b", 0, 7, 211, 0], [1, "t", 3, 7, 212, 0], [1, "t", 4, 7, 213, 0], [1, "t", 3, 7, 214, 0], [1, "t", 5, 7, 215, 0], [1, "t", 5, 7, 216, 0], [1, "t", 3, 7, 217, 0], [1, "t", 1, 7, 218, 0], [1, "t", 4, 7, 219, 0], [1, "b", 2, 7, 220, 0], [1, "t", 1, 7, 221, 0], [1, "t", 2, 7, 222, 0], [1, "t", 4, 7, 223, 0], [1, "t", 3, 7, 224, 0], [1, "t", 1, 7, 225, 0], [1, "t", 4, 7, 226, 0], [1, "t", 2, 7, 227, 0], [1, "t", 5, 7, 228, 0], [1, "t", 3, 7, 229, 0], [1, "t", 1, 7, 230, 0], [1, "t", 4, 7, 231, 0], [1, "b", 2, 7, 232, 0], [1, "t", 5, 7, 233, 0], [1, "t", 1, 7, 234, 0], [1, "t", 3, 7, 235, 0], [1, "t", 4, 7, 236, 0], [1, "t", 2, 7, 237, 0], [1, "t", 5, 7, 238, 0], [1, "b", 3, 7, 239, 0], [1, "t", 2, 7, 240, 0], [1, "t", 1, 7, 241, 0], [1, "t", 2, 7, 242, 0], [1, "t", 4, 7, 243, 0], [1, "t", 3, 7, 244, 0], [1, "t", 4, 7, 245, 0], [1, "t", 1, 7, 246, 0], [1, "b", 0, 7, 247, 0], [1, "t", 3, 7, 248, 0], [1, "t", 5, 7, 249, 0], [1, "t", 2, 7, 250, 0], [1, "t", 1, 7, 251, 0], [1, "t", 4, 7, 252, 0], [1, "t", 3, 7, 253, 0], [1, "t", 5, 7, 254, 0], [1, "t", 1, 7, 255, 0], [1, "t", 4, 7, 256, 0], [1, "t", 1, 7, 257, 0], [1, "t", 2, 7, 258, 0], [1, "t", 5, 7, 260, 0], [1, "t", 3, 7, 259, 0], [1, "t", 1, 7, 261, 0], [1, "t", 3, 7, 262, 0], [1, "t", 4, 7, 263, 0], [1, "t", 1, 7, 264, 0], [1, "t", 2, 7, 265, 0], [1, "t", 5, 7, 266, 0], [1, "t", 2, 7, 267, 0], [1, "t", 2, 7, 269, 0], [1, "b", 2, 7, 268, 0], [1, "t", 4, 7, 270, 0], [1, "t", 1, 7, 271, 0], [1, "t", 5, 7, 272, 0], [1, "b", 2, 7, 273, 0], [1, "t", 4, 7, 274, 0], [1, "t", 2, 7, 275, 0], [1, "t", 5, 7, 276, 0], [1, "t", 5, 7, 277, 0], [1, "t", 2, 7, 278, 0], [1, "t", 1, 7, 279, 0], [1, "t", 4, 7, 280, 0], [1, "b", 1, 7, 281, 0], [1, "t", 3, 7, 282, 0], [1, "t", 4, 7, 283, 0], [1, "t", 1, 7, 284, 0], [1, "t", 3, 7, 285, 0], [1, "t", 5, 7, 286, 0], [1, "t", 4, 7, 288, 0], [1, "t", 2, 7, 287, 0], [1, "b", 0, 7, 289, 0], [1, "t", 4, 7, 290, 0], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, 0], [1, "t", 3, 7, 293, 0], [1, "t", 1, 7, 294, 0], [1, "t", 4, 7, 295, 0], [1, "t", 3, 7, 296, 0], [1, "t", 1, 7, 297, 0], [1, "t", 4, 7, 298, 0], [1, "t", 2, 7, 299, 0], [1, "b", 0, 7, 300, 0], [1, "t", 2, 7, 301, 0], [1, "r", 196, 271, 0], [1, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [1, "r", 189, 207, 0], [1, "r", 192, 209, 0], [1, "r", 198, 271, 0], [1, "r", 197, 271, 0], [1, "r", 198, 272, 0], [1, "r", 197, 272, 0], [1, "r", 196, 272, 0], [1, "r", 195, 272, 0], [1, "r", 199, 272, 0], [1, "r", 199, 273, 0], [1, "r", 198, 273, 0], [1, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [1, "r", 197, 274, 0], [1, "r", 195, 273, 0], [1, "r", 196, 274, 0], [1, "r", 198, 275, 0], [1, "r", 197, 275, 0], [1, "r", 200, 274, 0], [1, "r", 200, 273, 0], [1, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, 0], [1, "plm", 0, 199, 268, 0], [1, "plm", 0, 193, 277, 0], [1, "plm", 1, 199, 276, 0], [1, "s", 1, 200, 275, 1], [1, "s", 1, 194, 272, 1], [1, "s", 2, 193, 270, 1], [1, "g", 2, 193, 273, 1], [1, "g", 2, 201, 267, 1], [1, "m", 2, 220, 298, 1], [1, "m", 1, 219, 292, 1], [1, "m", 1, 214, 297, 1], [1, "r", 168, 238, 0], [1, "r", 169, 238, 0], [1, "r", 170, 238, 0], [1, "r", 171, 239, 0], [1, "r", 170, 239, 0], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, 0], [1, "r", 166, 239, 0], [1, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, 0], [1, "r", 169, 240, 0], [1, "r", 170, 240, 0], [1, "r", 168, 241, 0], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, 0], [1, "plm", 2, 171, 238, 0], [1, "plm", 1, 166, 238, 0], [1, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, 0], [1, "plm", 0, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, 0], [1, "s", 1, 165, 239, 1], [1, "s", 1, 172, 241, 1], [1, "s", 0, 170, 237, 1], [1, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", 2, 162, 241, 1], [1, "s", 2, 170, 246, 1], [1, "s", 2, 167, 235, 1], [1, "s", 2, 176, 243, 1], [1, "r", 190, 207, 0], [1, "r", 191, 207, 0], [1, "r", 192, 208, 0], [1, "r", 191, 208, 0], [1, "r", 190, 208, 0], [1, "r", 189, 208, 0], [1, "r", 188, 208, 0], [1, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [1, "r", 188, 209, 0], [1, "r", 190, 210, 0], [1, "r", 191, 210, 0], [1, "r", 192, 210, 0], [1, "plm", 2, 189, 210, 0], [1, "plm", 2, 192, 205, 0], [1, "plm", 1, 192, 207, 0], [1, "plm", 0, 193, 210, 0], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [1, "plm", 0, 191, 213, 0], [1, "plm", 0, 190, 204, 0], [1, "s", 1, 188, 207, 1], [1, "s", 1, 190, 211, 1], [1, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [1, "s", 0, 194, 210, 1], [1, "s", 0, 198, 207, 1], [1, "s", 1, 193, 204, 1], [1, "s", 1, 193, 213, 1], [1, "s", 2, 198, 212, 1], [1, "s", 2, 182, 208, 1], [1, "s", 1, 204, 271, 1], [1, "s", 0, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", 0, 195, 265, 1], [1, "s", 2, 196, 264, 1], [1, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", 0, 217, 282, 1], [1, "s", 1, 214, 285, 1], [1, "s", 1, 214, 274, 1], [1, "s", 1, 203, 282, 1], [1, "s", 1, 205, 290, 1], [1, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, 1], [1, "s", 2, 213, 289, 1], [1, "s", 2, 196, 294, 1], [1, "s", 2, 187, 286, 1], [1, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", 0, 213, 273, 1], [1, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [1, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, 1], [1, "s", 0, 167, 281, 1], [1, "s", 0, 175, 263, 1], [1, "s", 1, 176, 293, 1], [1, "s", 1, 163, 285, 1], [1, "s", 1, 177, 266, 1], [1, "s", 1, 161, 272, 1], [1, "s", 2, 185, 261, 1], [1, "c", 0, 217, 270, 1], [1, "c", 0, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", 0, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, 1], [1, "c", 0, 208, 283, 1], [1, "c", 0, 197, 283, 1], [1, "c", 0, 190, 289, 1], [1, "c", 0, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, 1], [1, "c", 0, 208, 265, 1], [1, "c", 0, 169, 292, 1], [1, "s", 1, 158, 294, 1], [1, "s", 0, 151, 297, 1], [1, "s", 0, 147, 288, 1], [1, "c", 0, 150, 289, 1], [1, "c", 0, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, 1], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [1, "g", 1, 197, 248, 1], [1, "g", 2, 170, 255, 1], [1, "g", 2, 212, 234, 1], [1, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, 1], [1, "g", 1, 210, 214, 1], [1, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, 1], [1, "s", 0, 184, 248, 1], [1, "s", 0, 212, 254, 1], [1, "s", 1, 203, 249, 1], [1, "s", 2, 204, 252, 1], [1, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, 1], [1, "s", 0, 181, 228, 1], [1, "s", 1, 199, 227, 1], [1, "s", 1, 208, 238, 1], [1, "s", 1, 179, 222, 1], [1, "s", 1, 213, 223, 1], [1, "s", 2, 182, 222, 1], [1, "s", 2, 211, 226, 1], [1, "s", 2, 214, 214, 1], [1, "s", 2, 201, 216, 1], [1, "s", 2, 215, 192, 1], [1, "s", 1, 210, 198, 1], [1, "s", 1, 198, 196, 1], [1, "s", 2, 208, 199, 1], [1, "s", 2, 187, 192, 1], [1, "s", 1, 179, 198, 1], [1, "s", 2, 177, 197, 1], [1, "s", 0, 164, 197, 1], [1, "s", 1, 159, 193, 1], [1, "s", 1, 149, 206, 1], [1, "s", 1, 164, 209, 1], [1, "s", 2, 165, 210, 1], [1, "s", 2, 161, 191, 1], [1, "s", 1, 162, 224, 1], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, 1], [1, "s", 2, 153, 236, 1], [1, "s", 2, 160, 223, 1], [1, "s", 2, 151, 207, 1], [1, "s", 2, 147, 220, 1], [1, "s", 2, 145, 265, 1], [1, "s", 2, 145, 285, 1], [1, "c", 0, 152, 266, 1], [1, "c", 0, 185, 271, 1], [1, "c", 0, 210, 254, 1], [1, "c", 0, 209, 256, 1], [1, "c", 0, 198, 254, 1], [1, "c", 0, 213, 246, 1], [1, "c", 0, 216, 237, 1], [1, "c", 0, 204, 240, 1], [1, "c", 0, 196, 234, 1], [1, "c", 0, 188, 238, 1], [1, "c", 0, 182, 245, 1], [1, "c", 0, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", 0, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", 0, 157, 214, 1], [1, "c", 0, 167, 219, 1], [1, "c", 0, 171, 208, 1], [1, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [1, "c", 0, 195, 221, 1], [1, "c", 0, 207, 222, 1], [1, "c", 0, 214, 207, 1], [1, "c", 0, 205, 210, 1], [1, "c", 0, 204, 196, 1], [1, "c", 0, 214, 196, 1], [1, "c", 0, 190, 199, 1], [1, "c", 0, 184, 194, 1], [1, "c", 0, 172, 199, 1], [1, "c", 0, 161, 204, 1], [1, "c", 0, 157, 196, 1], [1, "c", 0, 149, 194, 1], [1, "c", 0, 147, 208, 1], [1, "c", 0, 207, 274, 1], [1, "c", 0, 217, 258, 1], [1, "c", 0, 201, 260, 1], [1, "c", 0, 178, 276, 1], [1, "c", 0, 187, 265, 1], [1, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, 1], [1, "s", 1, 187, 255, 1], [1, "s", 2, 189, 254, 1], [1, "s", 2, 212, 257, 1], [1, "s", 2, 182, 286, 1], [1, "s", 2, 169, 280, 1], [1, "s", 2, 217, 273, 1], [1, "s", 2, 215, 282, 1], [1, "s", 2, 172, 263, 1], [1, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [1, "fod", 1, 221, 282, 0], [1, "fod", 1, 222, 284, 0], [1, "fod", 1, 221, 290, 0], [1, "fod", 1, 222, 294, 0], [1, "fod", 1, 221, 297, 0], [1, "fod", 1, 223, 298, 0], [1, "fod", 1, 222, 300, 0], [1, "fod", 1, 218, 301, 0], [1, "fod", 1, 217, 299, 0], [1, "fod", 1, 215, 301, 0], [1, "fod", 1, 212, 300, 0], [1, "fod", 1, 206, 300, 0], [1, "fod", 1, 209, 301, 0], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [1, "fod", 1, 199, 301, 0], [1, "fod", 1, 222, 282, 0], [1, "fod", 1, 207, 301, 0], [1, "fod", 1, 197, 301, 0], [1, "fod", 1, 215, 291, 0], [1, "fod", 1, 216, 286, 0], [1, "fod", 1, 214, 292, 0], [1, "fod", 1, 210, 289, 0], [1, "fod", 1, 208, 294, 0], [1, "fod", 1, 210, 298, 0], [1, "fod", 1, 212, 281, 0], [1, "fod", 1, 219, 278, 0], [1, "fod", 1, 219, 282, 0], [1, "fod", 1, 205, 286, 0], [1, "fod", 1, 202, 293, 0], [1, "fod", 1, 198, 295, 0], [1, "fod", 2, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [1, "fod", 2, 216, 289, 0], [1, "fod", 2, 219, 289, 0], [1, "fod", 2, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [1, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, 0], [1, "fod", 2, 208, 290, 0], [1, "fod", 2, 211, 296, 0], [1, "fod", 2, 215, 294, 0], [1, "fod", 2, 212, 298, 0], [1, "fod", 2, 203, 294, 0], [1, "fod", 2, 204, 288, 0], [1, "fod", 2, 200, 294, 0], [1, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [1, "fod", 2, 200, 299, 0], [1, "fod", 2, 220, 300, 0], [1, "fod", 2, 220, 295, 0], [1, "fod", 2, 220, 292, 0], [1, "fod", 2, 219, 287, 0], [1, "fod", 2, 211, 288, 0], [1, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, 0], [1, "fod", 2, 212, 290, 0], [1, "fod", 2, 195, 296, 0], [1, "fod", 2, 196, 299, 0], [1, "fod", 2, 194, 300, 0], [1, "fod", 2, 195, 300, 0], [1, "fod", 2, 213, 279, 0], [1, "fod", 2, 211, 279, 0], [1, "fod", 0, 218, 290, 0], [1, "fod", 0, 212, 294, 0], [1, "fod", 1, 213, 295, 0], [1, "fod", 1, 217, 292, 0], [1, "fod", 1, 218, 288, 0], [1, "fod", 1, 210, 295, 0], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, 0], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [1, "fod", 2, 209, 299, 0], [1, "fod", 2, 211, 291, 0], [1, "fod", 1, 203, 275, 0], [1, "fod", 1, 204, 272, 0], [1, "fod", 2, 205, 273, 0], [1, "fod", 2, 204, 276, 0], [1, "fod", 2, 202, 276, 0], [1, "fod", 2, 199, 277, 0], [1, "fod", 2, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [1, "fod", 1, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [1, "fod", 2, 194, 265, 0], [1, "fod", 2, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [1, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [1, "fod", 1, 162, 235, 0], [1, "fod", 2, 169, 236, 0], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", 2, 173, 241, 0], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, 0], [1, "fod", 2, 169, 244, 0], [1, "fod", 2, 166, 243, 0], [1, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, 0], [1, "fod", 2, 162, 233, 0], [1, "fod", 2, 163, 236, 0], [1, "fod", 2, 174, 242, 0], [1, "fod", 2, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [1, "fod", 1, 190, 214, 0], [1, "fod", 1, 186, 206, 0], [1, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, 0], [1, "fod", 2, 198, 208, 0], [1, "fod", 2, 194, 204, 0], [1, "fod", 2, 187, 206, 0], [1, "fod", 2, 186, 204, 0], [1, "fod", 2, 189, 214, 0], [1, "fod", 2, 189, 213, 0], [1, "fod", 2, 193, 215, 0], [1, "fod", 2, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [1, "fod", 2, 193, 209, 0], [1, "fod", 2, 189, 211, 0], [1, "fod", 2, 187, 209, 0], [1, "fod", 2, 187, 207, 0], [1, "fod", 2, 191, 205, 0], [1, "fod", 2, 189, 203, 0], [1, "cs", 2, 224, 176, 1], [1, "cs", 0, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", 2, 224, 179, 1], [1, "cs", 1, 224, 180, 1], [1, "cs", 2, 224, 181, 1], [1, "cs", 0, 224, 182, 1], [1, "cs", 2, 224, 183, 1], [1, "cs", 0, 224, 184, 1], [1, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, 1], [1, "cs", 0, 224, 187, 1], [1, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, 1], [1, "cs", 1, 224, 190, 1], [1, "cs", 2, 224, 191, 1], [1, "cs", 0, 224, 192, 1], [1, "cs", 2, 224, 193, 1], [1, "cs", 2, 224, 194, 1], [1, "cs", 1, 224, 195, 1], [1, "cs", 2, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [1, "cs", 2, 224, 199, 1], [1, "cs", 1, 224, 200, 1], [1, "cs", 2, 224, 201, 1], [1, "cs", 3, 224, 202, 1], [1, "cs", 0, 224, 203, 1], [1, "cs", 1, 224, 204, 1], [1, "cs", 2, 224, 205, 1], [1, "cs", 0, 224, 206, 1], [1, "cs", 1, 224, 207, 1], [1, "cs", 3, 224, 208, 1], [1, "cs", 2, 224, 209, 1], [1, "cs", 2, 224, 210, 1], [1, "cs", 0, 223, 211, 1], [1, "cs", 1, 224, 211, 1], [1, "cs", 2, 224, 212, 1], [1, "cs", 2, 224, 213, 1], [1, "cs", 1, 224, 214, 1], [1, "cs", 3, 224, 215, 1], [1, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, 1], [1, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", 0, 223, 215, 1], [1, "cs", 2, 223, 214, 1], [1, "cs", 2, 223, 212, 1], [1, "cs", 2, 223, 216, 1], [1, "cs", 3, 223, 217, 1], [1, "cs", 0, 223, 218, 1], [1, "cs", 0, 224, 220, 1], [1, "cs", 0, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, 1], [1, "cs", 2, 224, 221, 1], [1, "cs", 2, 223, 219, 1], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", 2, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, 1], [1, "cs", 3, 223, 181, 1], [1, "cs", 3, 223, 182, 1], [1, "cs", 1, 223, 185, 1], [1, "cs", 2, 223, 184, 1], [1, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, 1], [1, "cs", 0, 223, 183, 1], [1, "cs", 2, 223, 187, 1], [1, "cs", 1, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [1, "cs", 2, 223, 190, 1], [1, "cs", 3, 223, 191, 1], [1, "cs", 1, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", 3, 223, 195, 1], [1, "cs", 1, 223, 196, 1], [1, "cs", 2, 223, 197, 1], [1, "cs", 2, 223, 199, 1], [1, "cs", 2, 223, 198, 1], [1, "cs", 0, 223, 200, 1], [1, "cs", 2, 223, 201, 1], [1, "cs", 0, 223, 202, 1], [1, "cs", 3, 223, 203, 1], [1, "cs", 3, 223, 204, 1], [1, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, 1], [1, "cs", 3, 223, 208, 1], [1, "cs", 2, 223, 221, 1], [1, "cs", 2, 223, 222, 1], [1, "cs", 0, 223, 224, 1], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, 1], [1, "cs", 0, 223, 234, 1], [1, "cs", 2, 223, 223, 1], [1, "cs", 2, 224, 223, 1], [1, "cs", 2, 224, 224, 1], [1, "cs", 2, 224, 225, 1], [1, "cs", 1, 223, 226, 1], [1, "cs", 1, 224, 231, 1], [1, "cs", 1, 223, 232, 1], [1, "cs", 3, 223, 225, 1], [1, "cs", 3, 224, 226, 1], [1, "cs", 3, 223, 227, 1], [1, "cs", 3, 224, 227, 1], [1, "cs", 3, 223, 229, 1], [1, "cs", 3, 223, 228, 1], [1, "cs", 3, 224, 229, 1], [1, "cs", 3, 223, 230, 1], [1, "cs", 3, 223, 231, 1], [1, "cs", 3, 224, 232, 1], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", 3, 224, 234, 1], [1, "cs", 3, 224, 235, 1], [1, "cs", 3, 223, 235, 1], [1, "cs", 1, 224, 236, 1], [1, "cs", 2, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [1, "cs", 3, 224, 238, 1], [1, "cs", 0, 224, 239, 1], [1, "cs", 1, 223, 241, 1], [1, "cs", 0, 224, 243, 1], [1, "cs", 0, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, 1], [1, "cs", 2, 223, 239, 1], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, 1], [1, "cs", 2, 224, 242, 1], [1, "cs", 2, 223, 242, 1], [1, "cs", 2, 223, 243, 1], [1, "cs", 2, 223, 244, 1], [1, "cs", 2, 224, 244, 1], [1, "cs", 2, 224, 245, 1], [1, "cs", 2, 224, 246, 1], [1, "cs", 3, 223, 238, 1], [1, "cs", 3, 223, 246, 1], [1, "cs", 2, 223, 247, 1], [1, "cs", 1, 223, 249, 1], [1, "cs", 1, 224, 253, 1], [1, "cs", 1, 223, 256, 1], [1, "cs", 0, 223, 254, 1], [1, "cs", 0, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [1, "cs", 3, 223, 250, 1], [1, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, 255, 1], [1, "cs", 3, 223, 257, 1], [1, "cs", 2, 224, 248, 1], [1, "cs", 2, 224, 249, 1], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, 1], [1, "cs", 2, 223, 253, 1], [1, "cs", 2, 224, 254, 1], [1, "cs", 2, 224, 255, 1], [1, "cs", 2, 224, 256, 1], [1, "cs", 2, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [1, "cs", 0, 223, 261, 1], [1, "cs", 0, 224, 263, 1], [1, "cs", 0, 224, 266, 1], [1, "cs", 0, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [1, "cs", 0, 223, 275, 1], [1, "cs", 1, 223, 259, 1], [1, "cs", 1, 223, 264, 1], [1, "cs", 1, 223, 268, 1], [1, "cs", 1, 224, 274, 1], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, 1], [1, "cs", 2, 223, 265, 1], [1, "cs", 2, 223, 267, 1], [1, "cs", 2, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", 3, 223, 262, 1], [1, "cs", 3, 223, 266, 1], [1, "cs", 3, 223, 269, 1], [1, "cs", 3, 223, 272, 1], [1, "cs", 3, 223, 274, 1], [1, "cs", 3, 224, 275, 1], [1, "cs", 3, 224, 273, 1], [1, "cs", 3, 224, 271, 1], [1, "cs", 3, 224, 270, 1], [1, "cs", 3, 224, 269, 1], [1, "cs", 3, 224, 268, 1], [1, "cs", 3, 224, 267, 1], [1, "cs", 3, 224, 265, 1], [1, "cs", 3, 224, 264, 1], [1, "cs", 3, 224, 262, 1], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [1, "cs", 3, 224, 259, 1], [1, "cs", 2, 223, 276, 1], [1, "cs", 1, 224, 276, 1], [1, "cs", 1, 224, 280, 1], [1, "cs", 1, 223, 281, 1], [1, "cs", 1, 224, 286, 1], [1, "cs", 0, 223, 280, 1], [1, "cs", 0, 223, 284, 1], [1, "cs", 0, 224, 288, 1], [1, "cs", 0, 224, 279, 1], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, 1], [1, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [1, "cs", 2, 224, 284, 1], [1, "cs", 2, 224, 285, 1], [1, "cs", 2, 224, 287, 1], [1, "cs", 2, 223, 287, 1], [1, "cs", 2, 223, 285, 1], [1, "cs", 2, 223, 283, 1], [1, "cs", 2, 223, 279, 1], [1, "cs", 3, 223, 278, 1], [1, "cs", 3, 223, 282, 1], [1, "cs", 3, 223, 286, 1], [1, "cs", 3, 223, 289, 1], [1, "cs", 3, 224, 289, 1], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", 0, 224, 292, 1], [1, "cs", 0, 223, 294, 1], [1, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, 1], [1, "cs", 2, 223, 291, 1], [1, "cs", 2, 224, 291, 1], [1, "cs", 2, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, 1], [1, "cs", 2, 224, 294, 1], [1, "cs", 1, 224, 295, 1], [1, "cs", 2, 223, 295, 1], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, 1], [1, "cs", 2, 223, 297, 1], [1, "cs", 2, 223, 298, 1], [1, "cs", 2, 224, 298, 1], [1, "cs", 2, 224, 299, 1], [1, "cs", 2, 223, 300, 1], [1, "cs", 1, 224, 300, 1], [1, "cs", 0, 223, 301, 1], [1, "cs", 0, 224, 302, 1], [1, "cs", 0, 224, 304, 1], [1, "cs", 3, 224, 301, 1], [1, "cs", 3, 224, 303, 1], [1, "cs", 0, 221, 303, 1], [1, "cs", 0, 219, 304, 1], [1, "cs", 1, 222, 304, 1], [1, "cs", 1, 222, 302, 1], [1, "cs", 2, 223, 302, 1], [1, "cs", 2, 223, 303, 1], [1, "cs", 2, 222, 303, 1], [1, "cs", 2, 223, 304, 1], [1, "cs", 2, 221, 304, 1], [1, "cs", 2, 220, 304, 1], [1, "cs", 2, 220, 303, 1], [1, "cs", 2, 220, 302, 1], [1, "cs", 2, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", 0, 217, 302, 1], [1, "cs", 0, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [1, "cs", 1, 218, 302, 1], [1, "cs", 1, 217, 304, 1], [1, "cs", 1, 215, 302, 1], [1, "cs", 2, 219, 302, 1], [1, "cs", 2, 218, 303, 1], [1, "cs", 2, 218, 304, 1], [1, "cs", 2, 217, 303, 1], [1, "cs", 2, 216, 304, 1], [1, "cs", 2, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [1, "cs", 2, 214, 304, 1], [1, "cs", 0, 212, 302, 1], [1, "cs", 0, 210, 303, 1], [1, "cs", 0, 212, 304, 1], [1, "cs", 0, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [1, "cs", 1, 208, 303, 1], [1, "cs", 2, 213, 302, 1], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, 1], [1, "cs", 2, 212, 303, 1], [1, "cs", 2, 211, 304, 1], [1, "cs", 2, 211, 303, 1], [1, "cs", 2, 211, 302, 1], [1, "cs", 2, 209, 302, 1], [1, "cs", 2, 209, 303, 1], [1, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [1, "cs", 2, 208, 302, 1], [1, "cs", 0, 206, 303, 1], [1, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, 1], [1, "cs", 0, 195, 304, 1], [1, "cs", 0, 191, 303, 1], [1, "cs", 0, 193, 304, 1], [1, "cs", 0, 189, 304, 1], [1, "cs", 1, 204, 303, 1], [1, "cs", 0, 197, 302, 1], [1, "cs", 0, 202, 302, 1], [1, "cs", 0, 188, 302, 1], [1, "cs", 0, 194, 302, 1], [1, "cs", 1, 197, 303, 1], [1, "cs", 1, 201, 304, 1], [1, "cs", 1, 192, 302, 1], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [1, "cs", 1, 188, 304, 1], [1, "cs", 2, 207, 302, 1], [1, "cs", 2, 207, 303, 1], [1, "cs", 2, 207, 304, 1], [1, "cs", 2, 206, 304, 1], [1, "cs", 2, 206, 302, 1], [1, "cs", 2, 205, 303, 1], [1, "cs", 2, 204, 304, 1], [1, "cs", 2, 205, 304, 1], [1, "cs", 2, 204, 302, 1], [1, "cs", 2, 203, 302, 1], [1, "cs", 2, 203, 303, 1], [1, "cs", 2, 202, 303, 1], [1, "cs", 2, 201, 303, 1], [1, "cs", 2, 201, 302, 1], [1, "cs", 2, 200, 302, 1], [1, "cs", 2, 199, 302, 1], [1, "cs", 2, 198, 303, 1], [1, "cs", 2, 198, 302, 1], [1, "cs", 2, 199, 303, 1], [1, "cs", 2, 200, 304, 1], [1, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", 2, 198, 304, 1], [1, "cs", 2, 196, 304, 1], [1, "cs", 2, 196, 303, 1], [1, "cs", 2, 196, 302, 1], [1, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", 2, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [1, "cs", 2, 193, 303, 1], [1, "cs", 2, 193, 302, 1], [1, "cs", 2, 192, 303, 1], [1, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, 1], [1, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, 1], [1, "cs", 2, 189, 302, 1], [1, "cs", 2, 190, 302, 1], [1, "cs", 2, 191, 302, 1], [1, "cs", 2, 188, 303, 1], [1, "cs", 0, 186, 303, 1], [1, "cs", 0, 183, 304, 1], [1, "cs", 0, 184, 302, 1], [1, "cs", 0, 181, 302, 1], [1, "cs", 0, 176, 302, 1], [1, "cs", 0, 178, 303, 1], [1, "cs", 0, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", 0, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [1, "cs", 1, 173, 302, 1], [1, "cs", 1, 185, 304, 1], [1, "cs", 1, 169, 304, 1], [1, "cs", 3, 187, 304, 1], [1, "cs", 3, 186, 304, 1], [1, "cs", 3, 187, 303, 1], [1, "cs", 3, 187, 302, 1], [1, "cs", 3, 186, 302, 1], [1, "cs", 3, 185, 302, 1], [1, "cs", 3, 185, 303, 1], [1, "cs", 3, 184, 303, 1], [1, "cs", 3, 183, 303, 1], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [1, "cs", 3, 184, 304, 1], [1, "cs", 3, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [1, "cs", 3, 179, 304, 1], [1, "cs", 3, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", 3, 180, 302, 1], [1, "cs", 3, 179, 302, 1], [1, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, 1], [1, "cs", 3, 177, 304, 1], [1, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, 1], [1, "cs", 3, 175, 303, 1], [1, "cs", 3, 174, 303, 1], [1, "cs", 3, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [1, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", 3, 174, 302, 1], [1, "cs", 3, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", 3, 169, 302, 1], [1, "cs", 3, 169, 303, 1], [1, "cs", 0, 168, 302, 1], [1, "cs", 0, 166, 303, 1], [1, "cs", 0, 163, 304, 1], [1, "cs", 0, 161, 302, 1], [1, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [1, "cs", 0, 155, 303, 1], [1, "cs", 1, 164, 303, 1], [1, "cs", 1, 162, 303, 1], [1, "cs", 1, 158, 304, 1], [1, "cs", 1, 156, 302, 1], [1, "cs", 1, 153, 302, 1], [1, "cs", 1, 154, 304, 1], [1, "cs", 2, 168, 304, 1], [1, "cs", 2, 168, 303, 1], [1, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", 2, 166, 304, 1], [1, "cs", 2, 165, 304, 1], [1, "cs", 2, 164, 304, 1], [1, "cs", 2, 165, 303, 1], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, 1], [1, "cs", 2, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", 2, 163, 302, 1], [1, "cs", 2, 162, 302, 1], [1, "cs", 2, 163, 303, 1], [1, "cs", 2, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", 2, 159, 304, 1], [1, "cs", 2, 161, 304, 1], [1, "cs", 2, 161, 303, 1], [1, "cs", 2, 160, 303, 1], [1, "cs", 2, 160, 302, 1], [1, "cs", 2, 158, 302, 1], [1, "cs", 2, 159, 302, 1], [1, "cs", 2, 157, 302, 1], [1, "cs", 2, 156, 303, 1], [1, "cs", 2, 157, 303, 1], [1, "cs", 2, 158, 303, 1], [1, "cs", 2, 157, 304, 1], [1, "cs", 2, 156, 304, 1], [1, "cs", 2, 155, 304, 1], [1, "cs", 2, 153, 304, 1], [1, "cs", 2, 153, 303, 1], [1, "cs", 2, 154, 303, 1], [1, "cs", 2, 154, 302, 1], [1, "cs", 2, 155, 302, 1], [1, "cs", 2, 152, 303, 1], [1, "cs", 2, 152, 302, 1], [1, "cs", 0, 151, 302, 1], [1, "cs", 0, 149, 303, 1], [1, "cs", 0, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [1, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", 1, 147, 304, 1], [1, "cs", 1, 145, 302, 1], [1, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, 1], [1, "cs", 2, 151, 304, 1], [1, "cs", 2, 151, 303, 1], [1, "cs", 2, 150, 303, 1], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, 1], [1, "cs", 2, 146, 302, 1], [1, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, 1], [1, "cs", 2, 142, 303, 1], [1, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [1, "cs", 2, 148, 303, 1], [1, "cs", 2, 146, 303, 1], [1, "cs", 2, 145, 303, 1], [1, "cs", 2, 147, 303, 1], [1, "cs", 2, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [1, "cs", 3, 149, 302, 1], [1, "cs", 3, 143, 302, 1], [1, "cs", 0, 139, 304, 1], [1, "cs", 0, 138, 302, 1], [1, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", 2, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [1, "cs", 2, 138, 304, 1], [1, "cs", 2, 140, 304, 1], [1, "cs", 0, 137, 304, 1], [1, "cs", 0, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", 1, 135, 304, 1], [1, "cs", 1, 136, 302, 1], [1, "cs", 2, 137, 302, 1], [1, "cs", 2, 136, 303, 1], [1, "cs", 2, 137, 303, 1], [1, "cs", 2, 136, 304, 1], [1, "cs", 2, 134, 304, 1], [1, "cs", 2, 134, 303, 1], [1, "cs", 2, 133, 303, 1], [1, "cs", 2, 132, 304, 1], [1, "cs", 0, 131, 302, 1], [1, "cs", 0, 134, 302, 1], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", 2, 135, 302, 1], [1, "cs", 2, 133, 302, 1], [1, "cs", 2, 132, 303, 1], [1, "cs", 2, 131, 303, 1], [1, "cs", 2, 130, 304, 1], [1, "cs", 2, 131, 304, 1], [1, "cs", 2, 128, 304, 1], [1, "cs", 2, 129, 303, 1], [1, "cs", 2, 130, 302, 1], [1, "cs", 3, 127, 304, 1], [1, "cs", 2, 132, 301, 1], [1, "cs", 2, 133, 301, 1], [1, "cs", 2, 134, 301, 1], [1, "cs", 2, 135, 301, 1], [1, "cs", 3, 131, 301, 1], [1, "cs", 3, 136, 301, 1], [1, "cs", 3, 136, 178, 1], [1, "cs", 0, 136, 183, 1], [1, "cs", 2, 136, 182, 1], [1, "cs", 1, 136, 181, 1], [1, "cs", 0, 136, 179, 1], [1, "cs", 3, 136, 180, 1], [1, "cs", 2, 135, 183, 1], [1, "cs", 1, 135, 182, 1], [1, "cs", 3, 135, 180, 1], [1, "cs", 0, 134, 183, 1], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, 1], [1, "cs", 1, 132, 183, 1], [1, "cs", 3, 131, 183, 1], [1, "cs", 2, 135, 181, 1], [1, "cs", 2, 134, 182, 1], [1, "cs", 3, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [1, "fod", 0, 204, 301, 0], [1, "fod", 1, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", 1, 190, 288, 0], [1, "fod", 1, 189, 296, 0], [1, "fod", 1, 193, 293, 0], [1, "fod", 1, 183, 292, 0], [1, "fod", 1, 186, 287, 0], [1, "fod", 1, 190, 290, 0], [1, "fod", 1, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, 0], [1, "fod", 1, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, 0], [1, "fod", 2, 186, 297, 0], [1, "fod", 2, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [1, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, 0], [1, "fod", 2, 197, 286, 0], [1, "fod", 2, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [1, "fod", 2, 196, 283, 0], [1, "fod", 2, 196, 281, 0], [1, "fod", 2, 201, 280, 0], [1, "fod", 2, 205, 287, 0], [1, "fod", 2, 209, 283, 0], [1, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [1, "fod", 2, 217, 278, 0], [1, "fod", 2, 219, 275, 0], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", 2, 217, 265, 0], [1, "fod", 2, 213, 267, 0], [1, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [1, "fod", 2, 204, 270, 0], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, 0], [1, "fod", 2, 211, 260, 0], [1, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [1, "fod", 2, 220, 253, 0], [1, "fod", 2, 211, 257, 0], [1, "la", 3, 198, 27, 1], [1, "la", 3, 201, 30, 1], [1, "la", 3, 200, 32, 1], [1, "la", 3, 198, 33, 1], [1, "la", 3, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, 1], [1, "la", 0, 200, 28, 1], [1, "la", 0, 193, 30, 1], [1, "la", 3, 196, 27, 1], [1, "la", 3, 199, 30, 1], [1, "la", 3, 197, 29, 1], [1, "la", 3, 195, 30, 1], [1, "la", 3, 197, 31, 1], [1, "la", 2, 201, 33, 1], [1, "la", 4, 202, 34, 1], [1, "la", 4, 202, 35, 1], [1, "la", 4, 203, 36, 1], [1, "la", 4, 204, 37, 1], [1, "la", 2, 205, 38, 1], [1, "la", 5, 205, 39, 1], [1, "la", 5, 205, 40, 1], [1, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, 1], [1, "la", 1, 205, 41, 1], [1, "la", 4, 208, 43, 1], [1, "la", 4, 209, 43, 1], [1, "la", 1, 210, 43, 1], [1, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, 1], [1, "la", 4, 213, 44, 1], [1, "la", 3, 223, 54, 1], [1, "la", 3, 221, 53, 1], [1, "la", 3, 219, 53, 1], [1, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, 1], [1, "la", 4, 216, 51, 1], [1, "la", 1, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", 1, 210, 44, 1], [1, "la", 3, 206, 50, 1], [1, "re", 0, 217, 24, 1], [1, "re", 0, 207, 16, 1], [1, "de", 44, 54, 14, 0], [1, "de", 44, 53, 13, 0], [1, "de", 44, 51, 16, 0], [1, "de", 44, 49, 13, 0], [1, "de", 44, 48, 14, 0], [1, "de", 21, 78, 293, 0], [1, "cs", 0, 221, 8, 1], [1, "cs", 0, 224, 9, 1], [1, "cs", 1, 223, 8, 1], [1, "cs", 2, 224, 8, 1], [1, "cs", 2, 222, 8, 1], [1, "cs", 0, 224, 6, 1], [1, "cs", 0, 222, 5, 1], [1, "cs", 0, 219, 7, 1], [1, "cs", 1, 220, 5, 1], [1, "cs", 1, 217, 7, 1], [1, "cs", 2, 224, 5, 1], [1, "cs", 2, 223, 5, 1], [1, "cs", 2, 224, 7, 1], [1, "cs", 2, 223, 7, 1], [1, "cs", 2, 223, 6, 1], [1, "cs", 2, 222, 6, 1], [1, "cs", 2, 222, 7, 1], [1, "cs", 2, 221, 7, 1], [1, "cs", 2, 221, 6, 1], [1, "cs", 2, 221, 5, 1], [1, "cs", 2, 220, 6, 1], [1, "cs", 2, 220, 7, 1], [1, "cs", 2, 220, 8, 1], [1, "cs", 2, 219, 8, 1], [1, "cs", 2, 219, 6, 1], [1, "cs", 2, 219, 5, 1], [1, "cs", 0, 218, 5, 1], [1, "cs", 0, 216, 8, 1], [1, "cs", 2, 218, 8, 1], [1, "cs", 2, 217, 8, 1], [1, "cs", 2, 218, 7, 1], [1, "cs", 2, 218, 6, 1], [1, "cs", 2, 217, 6, 1], [1, "cs", 2, 217, 5, 1], [1, "cs", 1, 215, 6, 1], [1, "cs", 1, 213, 5, 1], [1, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, 5, 1], [1, "cs", 0, 213, 8, 1], [1, "cs", 0, 211, 7, 1], [1, "cs", 0, 209, 5, 1], [1, "cs", 0, 208, 7, 1], [1, "cs", 0, 207, 8, 1], [1, "cs", 2, 216, 6, 1], [1, "cs", 2, 216, 7, 1], [1, "cs", 2, 215, 7, 1], [1, "cs", 2, 215, 8, 1], [1, "cs", 2, 214, 8, 1], [1, "cs", 2, 214, 7, 1], [1, "cs", 2, 215, 5, 1], [1, "cs", 2, 214, 5, 1], [1, "cs", 2, 213, 6, 1], [1, "cs", 2, 213, 7, 1], [1, "cs", 2, 212, 7, 1], [1, "cs", 1, 211, 5, 1], [1, "cs", 1, 209, 8, 1], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, 8, 1], [1, "cs", 2, 210, 8, 1], [1, "cs", 2, 209, 7, 1], [1, "cs", 2, 210, 7, 1], [1, "cs", 2, 210, 6, 1], [1, "cs", 2, 212, 6, 1], [1, "cs", 2, 212, 5, 1], [1, "cs", 2, 211, 6, 1], [1, "cs", 2, 210, 5, 1], [1, "cs", 2, 209, 6, 1], [1, "cs", 2, 208, 6, 1], [1, "cs", 2, 208, 5, 1], [1, "cs", 2, 207, 7, 1], [1, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", 2, 206, 5, 1], [1, "cs", 2, 208, 8, 1], [1, "cs", 2, 206, 6, 1], [1, "cs", 0, 204, 8, 1], [1, "cs", 0, 205, 6, 1], [1, "cs", 0, 203, 5, 1], [1, "cs", 0, 202, 7, 1], [1, "cs", 0, 199, 8, 1], [1, "cs", 0, 200, 6, 1], [1, "cs", 0, 197, 6, 1], [1, "cs", 0, 195, 8, 1], [1, "cs", 0, 194, 6, 1], [1, "cs", 1, 202, 8, 1], [1, "cs", 1, 206, 7, 1], [1, "cs", 1, 201, 5, 1], [1, "cs", 1, 197, 8, 1], [1, "cs", 1, 192, 7, 1], [1, "cs", 1, 195, 5, 1], [1, "cs", 2, 205, 7, 1], [1, "cs", 2, 205, 8, 1], [1, "cs", 2, 206, 8, 1], [1, "cs", 2, 204, 7, 1], [1, "cs", 2, 204, 6, 1], [1, "cs", 2, 204, 5, 1], [1, "cs", 2, 205, 5, 1], [1, "cs", 2, 203, 6, 1], [1, "cs", 2, 203, 7, 1], [1, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [1, "cs", 2, 200, 8, 1], [1, "cs", 2, 200, 7, 1], [1, "cs", 2, 201, 7, 1], [1, "cs", 2, 201, 6, 1], [1, "cs", 2, 202, 5, 1], [1, "cs", 2, 202, 6, 1], [1, "cs", 2, 200, 5, 1], [1, "cs", 2, 199, 5, 1], [1, "cs", 2, 197, 5, 1], [1, "cs", 2, 196, 5, 1], [1, "cs", 2, 198, 5, 1], [1, "cs", 2, 198, 6, 1], [1, "cs", 2, 199, 6, 1], [1, "cs", 2, 199, 7, 1], [1, "cs", 2, 198, 7, 1], [1, "cs", 2, 198, 8, 1], [1, "cs", 2, 197, 7, 1], [1, "cs", 2, 196, 7, 1], [1, "cs", 2, 196, 8, 1], [1, "cs", 2, 196, 6, 1], [1, "cs", 2, 195, 6, 1], [1, "cs", 2, 195, 7, 1], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [1, "cs", 2, 193, 7, 1], [1, "cs", 2, 193, 6, 1], [1, "cs", 2, 193, 5, 1], [1, "cs", 2, 194, 5, 1], [1, "cs", 0, 192, 5, 1], [1, "cs", 0, 191, 8, 1], [1, "cs", 0, 190, 6, 1], [1, "cs", 0, 188, 7, 1], [1, "cs", 0, 186, 8, 1], [1, "cs", 0, 186, 5, 1], [1, "cs", 0, 184, 7, 1], [1, "cs", 0, 182, 8, 1], [1, "cs", 0, 181, 6, 1], [1, "cs", 1, 189, 8, 1], [1, "cs", 1, 183, 8, 1], [1, "cs", 1, 188, 5, 1], [1, "cs", 1, 185, 6, 1], [1, "cs", 1, 180, 7, 1], [1, "cs", 1, 183, 5, 1], [1, "cs", 1, 178, 8, 1], [1, "cs", 1, 177, 6, 1], [1, "cs", 1, 173, 7, 1], [1, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, 1], [1, "cs", 0, 179, 5, 1], [1, "cs", 0, 174, 5, 1], [1, "cs", 0, 176, 5, 1], [1, "cs", 0, 172, 8, 1], [1, "cs", 0, 170, 8, 1], [1, "cs", 0, 169, 6, 1], [1, "cs", 2, 192, 6, 1], [1, "cs", 2, 192, 8, 1], [1, "cs", 2, 191, 7, 1], [1, "cs", 2, 191, 6, 1], [1, "cs", 2, 191, 5, 1], [1, "cs", 2, 190, 5, 1], [1, "cs", 2, 189, 5, 1], [1, "cs", 2, 189, 6, 1], [1, "cs", 2, 189, 7, 1], [1, "cs", 2, 190, 7, 1], [1, "cs", 2, 190, 8, 1], [1, "cs", 2, 188, 8, 1], [1, "cs", 2, 187, 8, 1], [1, "cs", 2, 187, 7, 1], [1, "cs", 2, 187, 6, 1], [1, "cs", 2, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", 2, 186, 6, 1], [1, "cs", 2, 186, 7, 1], [1, "cs", 2, 185, 7, 1], [1, "cs", 2, 185, 8, 1], [1, "cs", 2, 184, 8, 1], [1, "cs", 2, 183, 7, 1], [1, "cs", 2, 183, 6, 1], [1, "cs", 2, 184, 6, 1], [1, "cs", 2, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, 7, 1], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, 8, 1], [1, "cs", 2, 179, 8, 1], [1, "cs", 2, 182, 5, 1], [1, "cs", 2, 181, 5, 1], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", 2, 179, 6, 1], [1, "cs", 2, 179, 7, 1], [1, "cs", 2, 178, 7, 1], [1, "cs", 2, 178, 6, 1], [1, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, 5, 1], [1, "cs", 2, 177, 7, 1], [1, "cs", 2, 176, 7, 1], [1, "cs", 2, 176, 6, 1], [1, "cs", 2, 175, 6, 1], [1, "cs", 2, 175, 5, 1], [1, "cs", 2, 176, 8, 1], [1, "cs", 2, 174, 8, 1], [1, "cs", 2, 175, 8, 1], [1, "cs", 2, 173, 8, 1], [1, "cs", 2, 174, 7, 1], [1, "cs", 2, 173, 6, 1], [1, "cs", 2, 174, 6, 1], [1, "cs", 2, 172, 5, 1], [1, "cs", 2, 173, 5, 1], [1, "cs", 2, 172, 6, 1], [1, "cs", 2, 172, 7, 1], [1, "cs", 2, 171, 8, 1], [1, "cs", 2, 170, 7, 1], [1, "cs", 2, 170, 6, 1], [1, "cs", 2, 170, 5, 1], [1, "cs", 2, 171, 5, 1], [1, "cs", 2, 171, 6, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", 2, 169, 7, 1], [1, "cs", 2, 169, 8, 1], [1, "cs", 1, 168, 7, 1], [1, "cs", 1, 166, 5, 1], [1, "cs", 1, 164, 7, 1], [1, "cs", 1, 160, 7, 1], [1, "cs", 1, 156, 8, 1], [1, "cs", 0, 166, 8, 1], [1, "cs", 0, 168, 5, 1], [1, "cs", 0, 164, 6, 1], [1, "cs", 0, 162, 7, 1], [1, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, 6, 1], [1, "cs", 0, 161, 5, 1], [1, "cs", 0, 159, 5, 1], [1, "cs", 0, 155, 7, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, 7, 1], [1, "cs", 1, 153, 8, 1], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, 1], [1, "cs", 2, 168, 8, 1], [1, "cs", 2, 167, 8, 1], [1, "cs", 2, 167, 7, 1], [1, "cs", 2, 167, 6, 1], [1, "cs", 2, 167, 5, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, 7, 1], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", 2, 165, 5, 1], [1, "cs", 2, 164, 5, 1], [1, "cs", 2, 163, 5, 1], [1, "cs", 2, 162, 5, 1], [1, "cs", 2, 162, 6, 1], [1, "cs", 2, 163, 6, 1], [1, "cs", 2, 163, 7, 1], [1, "cs", 2, 163, 8, 1], [1, "cs", 2, 164, 8, 1], [1, "cs", 2, 165, 8, 1], [1, "cs", 2, 161, 8, 1], [1, "cs", 2, 162, 8, 1], [1, "cs", 2, 160, 8, 1], [1, "cs", 2, 159, 8, 1], [1, "cs", 2, 159, 7, 1], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, 1], [1, "cs", 2, 160, 6, 1], [1, "cs", 2, 161, 6, 1], [1, "cs", 2, 161, 7, 1], [1, "cs", 2, 157, 7, 1], [1, "cs", 2, 158, 7, 1], [1, "cs", 2, 158, 6, 1], [1, "cs", 2, 158, 5, 1], [1, "cs", 2, 155, 5, 1], [1, "cs", 2, 155, 6, 1], [1, "cs", 2, 156, 6, 1], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, 8, 1], [1, "cs", 2, 154, 8, 1], [1, "cs", 2, 154, 7, 1], [1, "cs", 2, 154, 6, 1], [1, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, 1], [1, "cs", 2, 153, 6, 1], [1, "cs", 2, 153, 5, 1], [1, "cs", 2, 152, 5, 1], [1, "cs", 2, 152, 6, 1], [1, "cs", 2, 152, 7, 1], [1, "cs", 2, 151, 6, 1], [1, "cs", 2, 157, 5, 1], [1, "cs", 1, 156, 5, 1], [1, "cs", 0, 150, 5, 1], [1, "cs", 0, 149, 7, 1], [1, "cs", 0, 147, 8, 1], [1, "cs", 0, 146, 5, 1], [1, "cs", 0, 144, 7, 1], [1, "cs", 0, 142, 5, 1], [1, "cs", 1, 147, 6, 1], [1, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, 5, 1], [1, "cs", 2, 148, 5, 1], [1, "cs", 2, 149, 5, 1], [1, "cs", 2, 150, 6, 1], [1, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, 8, 1], [1, "cs", 2, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, 8, 1], [1, "cs", 2, 149, 6, 1], [1, "cs", 2, 148, 6, 1], [1, "cs", 2, 148, 7, 1], [1, "cs", 2, 147, 7, 1], [1, "cs", 2, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [1, "cs", 2, 146, 7, 1], [1, "cs", 2, 146, 8, 1], [1, "cs", 2, 145, 7, 1], [1, "cs", 2, 145, 6, 1], [1, "cs", 2, 145, 5, 1], [1, "cs", 2, 144, 6, 1], [1, "cs", 2, 143, 5, 1], [1, "cs", 2, 143, 6, 1], [1, "cs", 2, 142, 6, 1], [1, "cs", 2, 141, 5, 1], [1, "cs", 2, 224, 10, 1], [1, "cs", 0, 224, 11, 1], [1, "cs", 0, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", 0, 224, 19, 1], [1, "cs", 0, 224, 22, 1], [1, "cs", 0, 224, 24, 1], [1, "cs", 0, 224, 29, 1], [1, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, 1], [1, "cs", 0, 224, 38, 1], [1, "cs", 1, 224, 14, 1], [1, "cs", 1, 224, 20, 1], [1, "cs", 1, 224, 27, 1], [1, "cs", 1, 224, 31, 1], [1, "cs", 1, 224, 36, 1], [1, "cs", 2, 224, 12, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [1, "cs", 2, 224, 18, 1], [1, "cs", 2, 224, 21, 1], [1, "cs", 2, 224, 23, 1], [1, "cs", 2, 224, 25, 1], [1, "cs", 2, 224, 26, 1], [1, "cs", 2, 224, 28, 1], [1, "cs", 2, 224, 30, 1], [1, "cs", 2, 224, 32, 1], [1, "cs", 2, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", 0, 224, 41, 1], [1, "cs", 0, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [1, "cs", 0, 224, 52, 1], [1, "cs", 0, 224, 57, 1], [1, "cs", 1, 224, 47, 1], [1, "cs", 2, 224, 40, 1], [1, "cs", 2, 224, 42, 1], [1, "cs", 2, 224, 43, 1], [1, "cs", 2, 224, 45, 1], [1, "cs", 2, 224, 49, 1], [1, "cs", 1, 224, 50, 1], [1, "cs", 2, 224, 51, 1], [1, "la", 3, 224, 54, 1], [1, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", 0, 224, 60, 1], [1, "cs", 0, 224, 64, 1], [1, "cs", 0, 224, 66, 1], [1, "cs", 0, 224, 70, 1], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, 1], [1, "cs", 1, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", 1, 224, 72, 1], [1, "cs", 1, 224, 76, 1], [1, "cs", 1, 224, 80, 1], [1, "cs", 1, 224, 83, 1], [1, "cs", 1, 224, 91, 1], [1, "cs", 1, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [1, "cs", 0, 224, 85, 1], [1, "cs", 0, 224, 88, 1], [1, "cs", 0, 224, 93, 1], [1, "cs", 0, 224, 98, 1], [1, "cs", 2, 224, 59, 1], [1, "cs", 2, 224, 63, 1], [1, "cs", 2, 224, 65, 1], [1, "cs", 2, 224, 67, 1], [1, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, 1], [1, "cs", 2, 224, 73, 1], [1, "cs", 2, 224, 75, 1], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, 1], [1, "cs", 2, 224, 81, 1], [1, "cs", 2, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", 2, 224, 89, 1], [1, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [1, "cs", 2, 224, 94, 1], [1, "cs", 2, 224, 96, 1], [1, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [1, "cs", 0, 224, 101, 1], [1, "cs", 1, 224, 103, 1], [1, "cs", 2, 224, 102, 1], [1, "cs", 0, 222, 10, 1], [1, "cs", 2, 223, 9, 1], [1, "cs", 2, 222, 9, 1], [1, "cs", 2, 221, 9, 1], [1, "cs", 2, 223, 10, 1], [1, "cs", 2, 223, 11, 1], [1, "cs", 2, 223, 12, 1], [1, "cs", 3, 223, 13, 1], [1, "cs", 3, 222, 11, 1], [1, "cs", 3, 220, 9, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, 10, 1], [1, "re", 2, 219, 13, 1], [1, "re", 1, 218, 18, 1], [1, "re", 1, 214, 13, 1], [1, "cs", 0, 221, 20, 1], [1, "cs", 1, 223, 18, 1], [1, "cs", 2, 222, 19, 1], [1, "cs", 2, 223, 19, 1], [1, "cs", 2, 223, 20, 1], [1, "cs", 2, 222, 20, 1], [1, "cs", 2, 220, 21, 1], [1, "cs", 0, 219, 21, 1], [1, "cs", 3, 221, 21, 1], [1, "cs", 3, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [1, "cs", 3, 220, 22, 1], [1, "cs", 3, 219, 22, 1], [1, "cs", 3, 221, 22, 1], [1, "cs", 0, 211, 9, 1], [1, "cs", 1, 211, 10, 1], [1, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, 1], [1, "cs", 2, 210, 9, 1], [1, "cs", 2, 210, 10, 1], [1, "cs", 2, 210, 11, 1], [1, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, 13, 1], [1, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, 15, 1], [1, "cs", 2, 210, 14, 1], [1, "cs", 3, 211, 15, 1], [1, "cs", 3, 213, 9, 1], [1, "cs", 3, 212, 10, 1], [1, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, 9, 1], [1, "la", 3, 223, 22, 1], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", 3, 209, 10, 1], [1, "la", 0, 209, 12, 1], [1, "la", 4, 209, 14, 1], [1, "la", 4, 219, 23, 1], [1, "la", 3, 210, 15, 1], [1, "la", 3, 217, 22, 1], [1, "la", 4, 212, 16, 1], [1, "la", 2, 214, 19, 1], [1, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, 1], [1, "la", 4, 215, 18, 1], [1, "la", 2, 216, 17, 1], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, 15, 1], [1, "la", 1, 217, 16, 1], [1, "la", 2, 218, 16, 1], [1, "la", 2, 216, 14, 1], [1, "la", 2, 219, 16, 1], [1, "la", 5, 220, 16, 1], [1, "la", 5, 216, 13, 1], [1, "la", 4, 217, 15, 1], [1, "cs", 0, 211, 44, 1], [1, "cs", 1, 212, 45, 1], [1, "cs", 2, 213, 45, 1], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, 1], [1, "cs", 3, 213, 46, 1], [1, "cs", 3, 214, 47, 1], [1, "cs", 3, 214, 48, 1], [1, "cs", 3, 216, 46, 1], [1, "cs", 0, 208, 20, 1], [1, "cs", 0, 210, 21, 1], [1, "cs", 0, 212, 23, 1], [1, "cs", 0, 213, 25, 1], [1, "cs", 2, 213, 24, 1], [1, "cs", 2, 211, 22, 1], [1, "cs", 2, 210, 20, 1], [1, "cs", 2, 209, 21, 1], [1, "cs", 2, 209, 20, 1], [1, "cs", 2, 211, 21, 1], [1, "cs", 2, 212, 22, 1], [1, "cs", 2, 213, 23, 1], [1, "cs", 3, 213, 26, 1], [1, "cs", 3, 207, 20, 1], [1, "la", 4, 192, 33, 1], [1, "la", 4, 191, 34, 1], [1, "la", 4, 190, 35, 1], [1, "la", 3, 189, 37, 1], [1, "la", 3, 188, 39, 1], [1, "la", 4, 186, 40, 1], [1, "la", 4, 185, 39, 1], [1, "la", 4, 184, 39, 1], [1, "la", 2, 183, 39, 1], [1, "la", 1, 182, 40, 1], [1, "la", 2, 181, 41, 1], [1, "la", 5, 180, 41, 1], [1, "la", 5, 179, 41, 1], [1, "la", 4, 192, 28, 1], [1, "la", 4, 191, 28, 1], [1, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [1, "la", 4, 187, 26, 1], [1, "la", 4, 186, 25, 1], [1, "la", 4, 185, 25, 1], [1, "la", 4, 184, 24, 1], [1, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", 1, 183, 20, 1], [1, "la", 5, 182, 20, 1], [1, "la", 2, 181, 20, 1], [1, "la", 5, 180, 20, 1], [1, "la", 2, 179, 20, 1], [1, "la", 4, 178, 19, 1], [1, "la", 3, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, 1], [1, "cs", 0, 175, 17, 1], [1, "cs", 0, 180, 16, 1], [1, "cs", 0, 174, 19, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, 1], [1, "cs", 1, 172, 18, 1], [1, "cs", 1, 181, 15, 1], [1, "cs", 2, 179, 15, 1], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, 16, 1], [1, "cs", 2, 174, 18, 1], [1, "cs", 2, 173, 19, 1], [1, "cs", 2, 172, 19, 1], [1, "cs", 2, 173, 18, 1], [1, "cs", 2, 173, 17, 1], [1, "cs", 2, 174, 17, 1], [1, "cs", 2, 174, 16, 1], [1, "cs", 2, 175, 16, 1], [1, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [1, "cs", 2, 178, 16, 1], [1, "cs", 2, 179, 16, 1], [1, "cs", 2, 180, 15, 1], [1, "cs", 2, 181, 16, 1], [1, "cs", 3, 182, 16, 1], [1, "cs", 3, 172, 21, 1], [1, "la", 1, 175, 19, 1], [1, "la", 2, 174, 20, 1], [1, "la", 2, 173, 20, 1], [1, "la", 1, 180, 17, 1], [1, "la", 2, 181, 17, 1], [1, "la", 3, 191, 20, 1], [1, "s", 0, 217, 30, 1], [1, "s", 0, 208, 35, 1], [1, "s", 0, 204, 24, 1], [1, "s", 1, 218, 32, 1], [1, "s", 1, 207, 34, 1], [1, "s", 1, 202, 23, 1], [1, "s", 1, 195, 16, 1], [1, "s", 2, 222, 28, 1], [1, "s", 2, 212, 38, 1], [1, "s", 2, 207, 23, 1], [1, "s", 2, 202, 12, 1], [1, "s", 2, 195, 18, 1], [1, "s", 1, 191, 12, 1], [1, "s", 0, 187, 16, 1], [1, "s", 2, 188, 16, 1], [1, "s", 1, 186, 14, 1], [1, "s", 1, 201, 16, 1], [1, "g", 1, 216, 31, 1], [1, "g", 0, 200, 15, 1], [1, "g", 0, 202, 40, 1], [1, "g", 0, 189, 32, 1], [1, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, 1], [1, "g", 2, 198, 37, 1], [1, "s", 0, 193, 39, 1], [1, "s", 0, 201, 45, 1], [1, "a", 0, 210, 29, 1], [1, "a", 0, 200, 20, 1], [1, "cs", 0, 200, 34, 1], [1, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [1, "cs", 2, 202, 32, 1], [1, "cs", 2, 194, 26, 1], [1, "cs", 2, 192, 27, 1], [1, "cs", 2, 192, 32, 1], [1, "cs", 2, 203, 31, 1], [1, "cs", 2, 202, 31, 1], [1, "cs", 2, 202, 30, 1], [1, "cs", 3, 202, 29, 1], [1, "cs", 3, 201, 32, 1], [1, "cs", 3, 199, 35, 1], [1, "cs", 0, 193, 34, 1], [1, "cs", 2, 194, 34, 1], [1, "cs", 2, 198, 35, 1], [1, "cs", 3, 199, 34, 1], [1, "cs", 3, 191, 29, 1], [1, "cs", 0, 191, 30, 1], [1, "cs", 3, 190, 29, 1], [1, "la", 3, 180, 69, 1], [1, "la", 3, 182, 68, 1], [1, "la", 3, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, 1], [1, "la", 3, 182, 72, 1], [1, "la", 3, 180, 71, 1], [1, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", 0, 183, 74, 1], [1, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", 2, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", 2, 180, 74, 1], [1, "cs", 2, 181, 74, 1], [1, "la", 0, 184, 70, 1], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [1, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, 1], [1, "la", 4, 187, 69, 1], [1, "la", 1, 188, 68, 1], [1, "la", 4, 189, 68, 1], [1, "la", 2, 190, 68, 1], [1, "la", 1, 191, 68, 1], [1, "la", 4, 192, 68, 1], [1, "la", 2, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", 2, 194, 70, 1], [1, "la", 5, 195, 71, 1], [1, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, 1], [1, "la", 4, 196, 71, 1], [1, "la", 1, 197, 73, 1], [1, "la", 5, 196, 73, 1], [1, "la", 5, 198, 73, 1], [1, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", 1, 205, 72, 1], [1, "la", 2, 206, 72, 1], [1, "la", 5, 207, 72, 1], [1, "la", 1, 208, 72, 1], [1, "la", 1, 209, 73, 1], [1, "la", 2, 209, 74, 1], [1, "la", 5, 211, 76, 1], [1, "la", 4, 210, 75, 1], [1, "la", 5, 212, 76, 1], [1, "la", 4, 202, 75, 1], [1, "la", 2, 203, 76, 1], [1, "la", 4, 204, 77, 1], [1, "la", 2, 204, 78, 1], [1, "la", 2, 204, 79, 1], [1, "la", 5, 204, 80, 1], [1, "cs", 0, 202, 74, 1], [1, "cs", 1, 203, 74, 1], [1, "cs", 2, 204, 73, 1], [1, "cs", 2, 203, 75, 1], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [1, "cs", 2, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, 1], [1, "cs", 3, 207, 73, 1], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, 1], [1, "la", 4, 184, 64, 1], [1, "la", 4, 185, 63, 1], [1, "la", 1, 185, 62, 1], [1, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, 1], [1, "la", 4, 186, 59, 1], [1, "la", 1, 187, 58, 1], [1, "la", 2, 187, 57, 1], [1, "la", 2, 187, 56, 1], [1, "s", 0, 191, 60, 1], [1, "s", 1, 195, 58, 1], [1, "s", 1, 199, 46, 1], [1, "s", 2, 202, 49, 1], [1, "g", 2, 197, 55, 1], [1, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, 1], [1, "g", 0, 210, 61, 1], [1, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, 1], [1, "g", 0, 175, 25, 1], [1, "g", 0, 168, 32, 1], [1, "g", 1, 179, 28, 1], [1, "g", 1, 161, 16, 1], [1, "g", 2, 172, 12, 1], [1, "g", 2, 160, 25, 1], [1, "g", 2, 157, 39, 1], [1, "g", 2, 170, 43, 1], [1, "g", 2, 202, 67, 1], [1, "g", 2, 217, 72, 1], [1, "g", 2, 214, 82, 1], [1, "g", 2, 193, 86, 1], [1, "g", 2, 168, 60, 1], [1, "g", 2, 165, 78, 1], [1, "g", 2, 173, 88, 1], [1, "s", 0, 185, 51, 1], [1, "s", 0, 175, 44, 1], [1, "s", 0, 165, 50, 1], [1, "s", 0, 160, 32, 1], [1, "s", 1, 162, 30, 1], [1, "s", 1, 176, 28, 1], [1, "s", 1, 154, 17, 1], [1, "s", 1, 184, 49, 1], [1, "s", 1, 192, 62, 1], [1, "s", 1, 216, 62, 1], [1, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, 1], [1, "s", 1, 206, 86, 1], [1, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", 5, 201, 81, 1], [1, "la", 1, 207, 83, 1], [1, "la", 3, 173, 32, 1], [1, "la", 2, 181, 45, 1], [1, "la", 1, 178, 38, 1], [1, "la", 1, 213, 69, 1], [1, "la", 5, 214, 69, 1], [1, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, 1], [1, "la", 3, 191, 80, 1], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", 2, 154, 67, 1], [1, "g", 2, 202, 94, 1], [1, "g", 2, 155, 90, 1], [1, "s", 2, 215, 80, 1], [1, "s", 2, 204, 62, 1], [1, "s", 2, 218, 60, 1], [1, "s", 2, 194, 62, 1], [1, "s", 0, 216, 86, 1], [1, "s", 0, 211, 93, 1], [1, "la", 0, 216, 92, 1], [1, "la", 0, 151, 96, 1], [1, "la", 1, 155, 95, 1], [1, "la", 4, 214, 88, 1], [1, "s", 0, 205, 99, 1], [1, "s", 1, 217, 88, 1], [1, "s", 1, 213, 94, 1], [1, "s", 1, 202, 97, 1], [1, "s", 0, 199, 85, 1], [1, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, 1], [1, "la", 3, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [1, "la", 0, 219, 77, 1], [1, "la", 0, 200, 59, 1], [1, "la", 3, 188, 87, 1], [1, "la", 0, 183, 94, 1], [1, "la", 1, 187, 83, 1], [1, "la", 1, 175, 82, 1], [1, "la", 1, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [1, "la", 3, 159, 80, 1], [1, "la", 3, 167, 15, 1], [1, "la", 1, 164, 17, 1], [1, "la", 1, 172, 28, 1], [1, "la", 3, 153, 24, 1], [1, "la", 4, 164, 91, 1], [1, "la", 4, 156, 82, 1], [1, "la", 4, 149, 90, 1], [1, "s", 0, 178, 85, 1], [1, "s", 1, 180, 85, 1], [1, "s", 0, 163, 96, 1], [1, "s", 0, 159, 86, 1], [1, "s", 0, 185, 78, 1], [1, "s", 1, 194, 75, 1], [1, "s", 2, 195, 76, 1], [1, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, 1], [1, "s", 2, 166, 97, 1], [1, "s", 2, 177, 97, 1], [1, "s", 0, 149, 85, 1], [1, "s", 1, 151, 83, 1], [1, "s", 1, 175, 74, 1], [1, "s", 0, 174, 72, 1], [1, "la", 3, 168, 71, 1], [1, "la", 3, 180, 60, 1], [1, "s", 0, 156, 63, 1], [1, "s", 0, 151, 47, 1], [1, "s", 1, 158, 64, 1], [1, "s", 1, 161, 75, 1], [1, "s", 1, 162, 51, 1], [1, "s", 1, 175, 45, 1], [1, "s", 1, 152, 47, 1], [1, "s", 1, 159, 33, 1], [1, "s", 1, 152, 18, 1], [1, "s", 0, 151, 13, 1], [1, "s", 0, 166, 22, 1], [1, "s", 0, 170, 63, 1], [1, "s", 2, 172, 62, 1], [1, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", 4, 177, 68, 1], [1, "la", 3, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", 1, 172, 67, 1], [1, "la", 4, 171, 67, 1], [1, "la", 4, 170, 66, 1], [1, "la", 4, 169, 66, 1], [1, "la", 1, 168, 66, 1], [1, "la", 4, 167, 67, 1], [1, "la", 1, 166, 67, 1], [1, "la", 4, 165, 68, 1], [1, "la", 5, 164, 68, 1], [1, "la", 2, 163, 68, 1], [1, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, 1], [1, "la", 3, 153, 72, 1], [1, "la", 3, 163, 60, 1], [1, "la", 3, 164, 42, 1], [1, "la", 0, 155, 51, 1], [1, "la", 1, 168, 42, 1], [1, "la", 4, 158, 48, 1], [1, "la", 4, 178, 57, 1], [1, "la", 4, 151, 69, 1], [1, "la", 2, 170, 74, 1], [1, "la", 2, 160, 84, 1], [1, "la", 2, 174, 92, 1], [1, "la", 2, 188, 90, 1], [1, "la", 2, 209, 84, 1], [1, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", 5, 165, 57, 1], [1, "la", 5, 182, 58, 1], [1, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [1, "la", 1, 152, 53, 1], [1, "la", 1, 152, 37, 1], [1, "la", 2, 163, 13, 1], [1, "de", 12, 219, 12, 0], [1, "de", 14, 203, 13, 0], [1, "de", 15, 220, 19, 0], [1, "de", 12, 223, 15, 0], [1, "de", 12, 213, 10, 0], [1, "de", 37, 217, 19, 0], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, 14, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, 18, 0], [1, "de", 37, 212, 18, 0], [1, "de", 38, 215, 26, 0], [1, "de", 37, 222, 25, 0], [1, "de", 40, 221, 29, 0], [1, "de", 12, 220, 27, 0], [1, "de", 13, 213, 27, 0], [1, "de", 14, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [1, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, 0], [1, "de", 12, 223, 38, 0], [1, "de", 13, 213, 38, 0], [1, "de", 14, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", 15, 206, 23, 0], [1, "de", 13, 205, 28, 0], [1, "de", 14, 211, 23, 0], [1, "de", 14, 201, 20, 0], [1, "de", 15, 198, 9, 0], [1, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, 9, 0], [1, "de", 40, 196, 12, 0], [1, "de", 40, 198, 18, 0], [1, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [1, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, 18, 0], [1, "de", 39, 192, 18, 0], [1, "de", 37, 185, 15, 0], [1, "de", 12, 188, 15, 0], [1, "de", 13, 185, 13, 0], [1, "de", 14, 189, 9, 0], [1, "de", 15, 187, 22, 0], [1, "de", 15, 180, 9, 0], [1, "de", 12, 177, 14, 0], [1, "de", 14, 173, 9, 0], [1, "de", 14, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, 13, 0], [1, "de", 39, 175, 9, 0], [1, "de", 40, 173, 14, 0], [1, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, 0], [1, "de", 38, 164, 15, 0], [1, "de", 39, 170, 20, 0], [1, "de", 40, 160, 17, 0], [1, "de", 40, 154, 10, 0], [1, "de", 40, 165, 23, 0], [1, "de", 40, 150, 19, 0], [1, "de", 37, 155, 16, 0], [1, "de", 39, 146, 10, 0], [1, "de", 12, 159, 12, 0], [1, "de", 13, 151, 9, 0], [1, "de", 14, 150, 14, 0], [1, "de", 15, 153, 19, 0], [1, "de", 13, 161, 25, 0], [1, "de", 14, 169, 25, 0], [1, "de", 15, 176, 25, 0], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [1, "de", 14, 181, 36, 0], [1, "de", 37, 186, 33, 0], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [1, "de", 40, 175, 31, 0], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [1, "de", 38, 168, 45, 0], [1, "de", 38, 173, 45, 0], [1, "de", 39, 160, 35, 0], [1, "de", 40, 161, 42, 0], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, 0], [1, "de", 40, 160, 52, 0], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [1, "de", 12, 167, 32, 0], [1, "de", 13, 158, 32, 0], [1, "de", 14, 149, 28, 0], [1, "de", 15, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", 12, 171, 43, 0], [1, "de", 12, 174, 36, 0], [1, "de", 12, 151, 43, 0], [1, "de", 13, 152, 48, 0], [1, "de", 14, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, 0], [1, "de", 13, 183, 51, 0], [1, "de", 14, 186, 48, 0], [1, "de", 37, 182, 48, 0], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [1, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, 0], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, 0], [1, "de", 14, 198, 47, 0], [1, "de", 15, 198, 55, 0], [1, "de", 15, 212, 54, 0], [1, "de", 15, 216, 63, 0], [1, "de", 14, 209, 62, 0], [1, "de", 12, 219, 60, 0], [1, "de", 12, 206, 56, 0], [1, "de", 12, 218, 72, 0], [1, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, 0], [1, "de", 12, 193, 63, 0], [1, "de", 14, 216, 80, 0], [1, "de", 14, 222, 87, 0], [1, "de", 38, 210, 53, 0], [1, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, 0], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [1, "de", 38, 218, 55, 0], [1, "de", 38, 212, 61, 0], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, 0], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, 0], [1, "de", 39, 222, 93, 0], [1, "de", 39, 216, 96, 0], [1, "de", 39, 209, 94, 0], [1, "de", 39, 201, 87, 0], [1, "de", 39, 198, 82, 0], [1, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [1, "de", 39, 202, 92, 0], [1, "de", 37, 194, 97, 0], [1, "de", 39, 204, 88, 0], [1, "de", 39, 189, 90, 0], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [1, "de", 37, 183, 91, 0], [1, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [1, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [1, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [1, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [1, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [1, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [1, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, 0], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, 0], [1, "de", 39, 174, 64, 0], [1, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, 0], [1, "de", 12, 218, 96, 0], [1, "de", 13, 212, 95, 0], [1, "de", 14, 204, 85, 0], [1, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", 12, 198, 87, 0], [1, "de", 14, 196, 77, 0], [1, "de", 13, 194, 86, 0], [1, "de", 15, 181, 84, 0], [1, "de", 14, 184, 79, 0], [1, "de", 14, 188, 93, 0], [1, "de", 13, 180, 87, 0], [1, "de", 13, 178, 96, 0], [1, "de", 13, 163, 95, 0], [1, "de", 15, 172, 88, 0], [1, "de", 15, 176, 75, 0], [1, "de", 14, 172, 72, 0], [1, "de", 14, 169, 82, 0], [1, "de", 13, 164, 78, 0], [1, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", 15, 154, 91, 0], [1, "de", 15, 160, 74, 0], [1, "de", 14, 152, 76, 0], [1, "de", 14, 158, 63, 0], [1, "de", 14, 150, 60, 0], [1, "de", 12, 169, 59, 0], [1, "de", 13, 173, 61, 0], [1, "cs", 1, 143, 104, 1], [1, "cs", 0, 141, 102, 1], [1, "cs", 3, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [1, "cs", 2, 140, 102, 1], [1, "cs", 3, 143, 107, 1], [1, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, 1], [1, "cs", 2, 142, 103, 1], [1, "cs", 0, 142, 104, 1], [1, "cs", 2, 141, 103, 1], [1, "cs", 3, 142, 105, 1], [1, "cs", 3, 140, 103, 1], [1, "cs", 3, 141, 104, 1], [1, "la", 4, 151, 23, 1], [1, "la", 4, 150, 22, 1], [1, "la", 1, 149, 21, 1], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, 20, 1], [1, "la", 4, 147, 19, 1], [1, "la", 5, 147, 18, 1], [1, "la", 1, 147, 17, 1], [1, "la", 3, 144, 9, 1], [1, "la", 5, 147, 16, 1], [1, "la", 2, 147, 15, 1], [1, "la", 4, 147, 14, 1], [1, "la", 4, 145, 11, 1], [1, "la", 5, 145, 12, 1], [1, "la", 1, 146, 13, 1], [1, "la", 2, 145, 13, 1], [1, "la", 3, 155, 25, 1], [1, "la", 0, 155, 24, 1], [1, "la", 3, 153, 26, 1], [1, "cs", 0, 151, 24, 1], [1, "cs", 0, 153, 22, 1], [1, "cs", 3, 152, 22, 1], [1, "cs", 3, 154, 22, 1], [1, "cs", 1, 157, 26, 1], [1, "cs", 2, 157, 24, 1], [1, "cs", 2, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [1, "cs", 2, 152, 25, 1], [1, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, 1], [1, "cs", 2, 157, 23, 1], [1, "cs", 2, 157, 22, 1], [1, "cs", 3, 150, 24, 1], [1, "cs", 3, 150, 23, 1], [1, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, 0], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, 0], [1, "de", 13, 156, 21, 0], [1, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", 13, 147, 79, 0], [1, "de", 12, 157, 99, 0], [1, "de", 12, 172, 99, 0], [1, "la", 3, 143, 102, 1], [1, "la", 4, 149, 96, 1], [1, "la", 4, 145, 102, 1], [1, "la", 1, 148, 97, 1], [1, "la", 5, 148, 98, 1], [1, "cs", 3, 144, 104, 1], [1, "cs", 3, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", 3, 145, 104, 1], [1, "cs", 3, 142, 101, 1], [1, "cs", 3, 143, 100, 1], [1, "cs", 3, 141, 101, 1], [1, "cs", 3, 142, 100, 1], [1, "cs", 0, 141, 100, 1], [1, "cs", 2, 140, 101, 1], [1, "cs", 2, 144, 105, 1], [1, "cs", 3, 146, 103, 1], [1, "cs", 3, 146, 102, 1], [1, "cs", 3, 150, 95, 1], [1, "cs", 0, 150, 97, 1], [1, "cs", 2, 151, 98, 1], [1, "cs", 0, 153, 97, 1], [1, "cs", 3, 153, 96, 1], [1, "cs", 2, 149, 95, 1], [1, "s", 0, 213, 127, 1], [1, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [1, "plm", 0, 208, 127, 0], [1, "s", 1, 207, 132, 1], [1, "s", 2, 208, 133, 1], [1, "plm", 0, 217, 132, 0], [1, "plm", 2, 186, 158, 0], [1, "plm", 0, 184, 160, 0], [1, "s", 1, 183, 156, 1], [1, "s", 2, 186, 159, 1], [1, "p", 0, 182, 157, 1], [1, "p", 0, 114, 205, 1], [1, "plm", 1, 117, 204, 0], [1, "plm", 0, 117, 205, 0], [1, "plm", 2, 112, 204, 0], [1, "s", 2, 114, 207, 1], [1, "s", 2, 115, 204, 1], [1, "plm", 2, 122, 151, 0], [1, "plm", 1, 123, 150, 0], [1, "plm", 1, 117, 151, 0], [1, "s", 0, 118, 150, 1], [1, "s", 1, 122, 152, 1], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, 0], [1, "s", 0, 153, 128, 1], [1, "s", 2, 152, 130, 1], [1, "p", 0, 123, 65, 1], [1, "plm", 2, 125, 62, 0], [1, "plm", 1, 124, 62, 0], [1, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, 1], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", 2, 145, 105, 1], [1, "cs", 2, 144, 107, 1], [1, "cs", 2, 141, 106, 1], [1, "cs", 2, 141, 105, 1], [1, "cs", 2, 140, 105, 1], [1, "cs", 2, 140, 104, 1], [1, "cs", 1, 138, 103, 1], [1, "cs", 0, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", 2, 139, 105, 1], [1, "cs", 2, 142, 106, 1], [1, "cs", 2, 142, 107, 1], [1, "cs", 2, 139, 101, 1], [1, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [1, "la", 1, 146, 100, 1], [1, "la", 4, 145, 101, 1], [1, "cs", 1, 215, 47, 1], [1, "cs", 2, 216, 47, 1], [1, "cs", 2, 215, 48, 1], [1, "la", 4, 214, 45, 1], [1, "la", 4, 215, 45, 1], [1, "la", 0, 216, 46, 1], [1, "la", 4, 216, 48, 1], [1, "la", 4, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", 3, 214, 49, 1], [1, "la", 4, 211, 45, 1], [1, "la", 3, 213, 47, 1], [1, "cs", 2, 224, 48, 1], [1, "plm", 2, 111, 243, 0], [1, "plm", 1, 108, 246, 0], [1, "s", 1, 110, 243, 1], [1, "s", 0, 108, 245, 1], [1, "s", 0, 121, 276, 1], [1, "plm", 2, 122, 277, 0], [1, "plm", 2, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [1, "s", 1, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", 3, 67, 16, 1], [1, "cs", 0, 67, 17, 1], [1, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, 18, 1], [1, "cs", 3, 68, 17, 1], [1, "cs", 0, 36, 16, 1], [1, "cs", 2, 36, 17, 1], [1, "cs", 2, 36, 18, 1], [1, "cs", 3, 35, 17, 1], [1, "cs", 3, 36, 19, 1], [1, "cs", 3, 35, 18, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, 1], [1, "cs", 3, 66, 22, 1], [1, "cs", 3, 66, 31, 1], [1, "cs", 2, 36, 30, 1], [1, "cs", 2, 36, 23, 1], [1, "cs", 1, 36, 22, 1], [1, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, 13, 1], [1, "cs", 2, 44, 13, 1], [1, "cs", 3, 42, 16, 1], [1, "cs", 3, 41, 16, 1], [1, "cs", 3, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, 19, 1], [1, "cs", 3, 44, 19, 1], [1, "cs", 3, 45, 19, 1], [1, "cs", 2, 46, 19, 1], [1, "cs", 0, 43, 22, 1], [1, "cs", 2, 42, 22, 1], [1, "cs", 1, 41, 22, 1], [1, "cs", 0, 40, 22, 1], [1, "cs", 3, 39, 17, 1], [1, "cs", 1, 44, 26, 1], [1, "cs", 2, 45, 26, 1], [1, "cs", 3, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", 2, 48, 26, 1], [1, "cs", 3, 47, 25, 1], [1, "cs", 3, 43, 27, 1], [1, "cs", 1, 49, 32, 1], [1, "cs", 2, 50, 32, 1], [1, "cs", 2, 51, 32, 1], [1, "cs", 2, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", 1, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", 3, 55, 31, 1], [1, "cs", 3, 54, 32, 1], [1, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", 0, 51, 33, 1], [1, "cs", 2, 52, 33, 1], [1, "cs", 2, 50, 33, 1], [1, "cs", 3, 56, 30, 1], [1, "cs", 3, 56, 31, 1], [1, "cs", 3, 46, 30, 1], [1, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [1, "cs", 2, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [1, "cs", 0, 55, 32, 1], [1, "cs", 0, 47, 32, 1], [1, "d", 1, 54, 35, 1], [1, "fo", 2, 35, 15, 0], [1, "fo", 2, 36, 12, 0], [1, "fo", 2, 67, 15, 0], [1, "cs", 3, 60, 13, 1], [1, "cs", 2, 59, 13, 1], [1, "cs", 1, 58, 13, 1], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, 1], [1, "cs", 3, 60, 16, 1], [1, "cs", 3, 63, 17, 1], [1, "cs", 2, 60, 19, 1], [1, "cs", 1, 59, 19, 1], [1, "cs", 3, 58, 19, 1], [1, "cs", 2, 57, 19, 1], [1, "cs", 2, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [1, "cs", 2, 63, 23, 1], [1, "cs", 0, 62, 22, 1], [1, "cs", 2, 61, 22, 1], [1, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, 1], [1, "cs", 2, 54, 26, 1], [1, "cs", 2, 55, 26, 1], [1, "cs", 2, 56, 26, 1], [1, "cs", 1, 57, 26, 1], [1, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", 2, 68, 15, 1], [1, "cs", 3, 69, 15, 1], [1, "cs", 3, 70, 15, 1], [1, "cs", 3, 70, 14, 1], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, 1], [1, "cs", 2, 71, 13, 1], [1, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, 13, 1], [1, "cs", 3, 70, 8, 1], [1, "cs", 3, 71, 8, 1], [1, "cs", 2, 72, 8, 1], [1, "cs", 0, 73, 8, 1], [1, "cs", 3, 74, 9, 1], [1, "cs", 3, 74, 8, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, 10, 1], [1, "cs", 0, 76, 10, 1], [1, "cs", 0, 76, 16, 1], [1, "cs", 3, 76, 15, 1], [1, "cs", 3, 75, 16, 1], [1, "cs", 2, 77, 11, 1], [1, "cs", 2, 77, 14, 1], [1, "cs", 3, 77, 12, 1], [1, "cs", 3, 77, 13, 1], [1, "cs", 3, 77, 15, 1], [1, "cs", 0, 74, 18, 1], [1, "cs", 1, 75, 17, 1], [1, "cs", 2, 74, 17, 1], [1, "cs", 3, 73, 19, 1], [1, "cs", 3, 67, 23, 1], [1, "cs", 0, 68, 23, 1], [1, "cs", 0, 72, 20, 1], [1, "cs", 2, 73, 20, 1], [1, "cs", 2, 74, 19, 1], [1, "cs", 2, 74, 36, 1], [1, "cs", 2, 77, 27, 1], [1, "cs", 2, 76, 26, 1], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [1, "cs", 2, 75, 25, 1], [1, "cs", 0, 76, 25, 1], [1, "cs", 1, 77, 23, 1], [1, "cs", 2, 77, 16, 1], [1, "cs", 2, 76, 17, 1], [1, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [1, "cs", 2, 77, 25, 1], [1, "cs", 2, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [1, "cs", 3, 76, 27, 1], [1, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [1, "cs", 2, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, 1], [1, "cs", 2, 66, 20, 1], [1, "cs", 2, 66, 21, 1], [1, "cs", 2, 67, 18, 1], [1, "cs", 2, 67, 22, 1], [1, "cs", 0, 77, 36, 1], [1, "cs", 0, 77, 32, 1], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, 1], [1, "cs", 2, 76, 36, 1], [1, "cs", 2, 77, 35, 1], [1, "cs", 2, 77, 34, 1], [1, "cs", 2, 76, 35, 1], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [1, "cs", 0, 71, 32, 1], [1, "cs", 0, 76, 34, 1], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, 1], [1, "cs", 2, 76, 28, 1], [1, "cs", 2, 75, 28, 1], [1, "cs", 2, 76, 29, 1], [1, "cs", 2, 76, 33, 1], [1, "cs", 2, 70, 32, 1], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [1, "cs", 2, 67, 31, 1], [1, "cs", 2, 67, 30, 1], [1, "cs", 2, 69, 32, 1], [1, "cs", 1, 67, 32, 1], [1, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, 1], [1, "cs", 2, 66, 33, 1], [1, "cs", 2, 67, 33, 1], [1, "cs", 2, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [1, "cs", 1, 66, 35, 1], [1, "cs", 2, 67, 34, 1], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [1, "cs", 2, 64, 36, 1], [1, "cs", 2, 65, 36, 1], [1, "cs", 2, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, 1], [1, "cs", 2, 68, 35, 1], [1, "cs", 2, 76, 9, 1], [1, "cs", 2, 77, 9, 1], [1, "cs", 2, 77, 8, 1], [1, "cs", 2, 77, 10, 1], [1, "cs", 2, 78, 8, 1], [1, "cs", 2, 78, 9, 1], [1, "cs", 2, 78, 10, 1], [1, "cs", 2, 78, 11, 1], [1, "cs", 2, 78, 12, 1], [1, "cs", 2, 78, 13, 1], [1, "cs", 0, 79, 9, 1], [1, "cs", 1, 79, 11, 1], [1, "cs", 3, 79, 8, 1], [1, "cs", 3, 79, 10, 1], [1, "cs", 3, 79, 12, 1], [1, "cs", 3, 80, 8, 1], [1, "cs", 1, 80, 10, 1], [1, "cs", 2, 80, 9, 1], [1, "cs", 2, 80, 11, 1], [1, "cs", 2, 81, 8, 1], [1, "cs", 2, 81, 9, 1], [1, "cs", 2, 81, 10, 1], [1, "cs", 2, 78, 14, 1], [1, "cs", 2, 79, 13, 1], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, 12, 1], [1, "cs", 0, 79, 14, 1], [1, "cs", 0, 82, 9, 1], [1, "cs", 2, 82, 8, 1], [1, "cs", 2, 82, 10, 1], [1, "cs", 2, 81, 11, 1], [1, "cs", 3, 80, 13, 1], [1, "cs", 1, 78, 30, 1], [1, "cs", 1, 78, 34, 1], [1, "cs", 1, 78, 27, 1], [1, "cs", 0, 78, 25, 1], [1, "cs", 0, 79, 29, 1], [1, "cs", 0, 79, 32, 1], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", 2, 78, 36, 1], [1, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, 1], [1, "cs", 2, 79, 33, 1], [1, "cs", 2, 78, 32, 1], [1, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, 1], [1, "cs", 2, 79, 30, 1], [1, "cs", 2, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", 2, 79, 28, 1], [1, "cs", 2, 79, 27, 1], [1, "cs", 2, 78, 26, 1], [1, "cs", 2, 79, 26, 1], [1, "cs", 2, 78, 24, 1], [1, "cs", 2, 80, 34, 1], [1, "cs", 2, 80, 33, 1], [1, "cs", 2, 80, 31, 1], [1, "cs", 2, 80, 30, 1], [1, "cs", 2, 80, 32, 1], [1, "cs", 2, 80, 29, 1], [1, "cs", 2, 80, 28, 1], [1, "cs", 2, 80, 27, 1], [1, "cs", 0, 81, 30, 1], [1, "cs", 1, 81, 32, 1], [1, "cs", 1, 81, 28, 1], [1, "cs", 2, 81, 29, 1], [1, "cs", 2, 81, 31, 1], [1, "cs", 2, 81, 33, 1], [1, "cs", 2, 82, 30, 1], [1, "cs", 2, 82, 31, 1], [1, "cs", 2, 82, 32, 1], [1, "cs", 0, 37, 36, 1], [1, "cs", 2, 38, 36, 1], [1, "cs", 2, 37, 35, 1], [1, "cs", 2, 36, 36, 1], [1, "cs", 2, 34, 35, 1], [1, "cs", 2, 35, 35, 1], [1, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, 1], [1, "cs", 1, 35, 34, 1], [1, "cs", 2, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [1, "cs", 2, 35, 33, 1], [1, "cs", 2, 34, 33, 1], [1, "cs", 2, 33, 33, 1], [1, "cs", 2, 31, 32, 1], [1, "cs", 1, 36, 32, 1], [1, "cs", 1, 32, 32, 1], [1, "cs", 2, 35, 32, 1], [1, "cs", 2, 33, 32, 1], [1, "cs", 2, 32, 33, 1], [1, "cs", 2, 33, 31, 1], [1, "cs", 2, 34, 31, 1], [1, "cs", 2, 35, 31, 1], [1, "cs", 0, 34, 32, 1], [1, "cs", 2, 35, 30, 1], [1, "cs", 1, 39, 23, 1], [1, "cs", 3, 39, 22, 1], [1, "cs", 3, 36, 24, 1], [1, "cs", 3, 35, 24, 1], [1, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, 1], [1, "cs", 2, 36, 20, 1], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [1, "cs", 2, 35, 16, 1], [1, "cs", 2, 34, 16, 1], [1, "cs", 2, 33, 16, 1], [1, "cs", 0, 34, 17, 1], [1, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [1, "cs", 3, 30, 13, 1], [1, "cs", 1, 33, 15, 1], [1, "cs", 1, 31, 13, 1], [1, "cs", 2, 32, 14, 1], [1, "cs", 0, 31, 8, 1], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [1, "cs", 0, 25, 12, 1], [1, "cs", 2, 25, 11, 1], [1, "cs", 3, 25, 10, 1], [1, "cs", 0, 25, 9, 1], [1, "cs", 2, 25, 8, 1], [1, "cs", 2, 26, 8, 1], [1, "cs", 2, 27, 8, 1], [1, "cs", 2, 28, 8, 1], [1, "cs", 2, 29, 8, 1], [1, "cs", 2, 30, 8, 1], [1, "cs", 2, 26, 9, 1], [1, "cs", 2, 27, 9, 1], [1, "cs", 2, 26, 10, 1], [1, "cs", 1, 27, 10, 1], [1, "cs", 3, 28, 9, 1], [1, "cs", 3, 25, 14, 1], [1, "cs", 0, 25, 15, 1], [1, "cs", 2, 26, 15, 1], [1, "cs", 3, 27, 16, 1], [1, "cs", 0, 28, 17, 1], [1, "cs", 1, 29, 18, 1], [1, "cs", 2, 26, 16, 1], [1, "cs", 2, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [1, "cs", 2, 26, 17, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, 18, 1], [1, "cs", 2, 30, 19, 1], [1, "cs", 2, 29, 19, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", 2, 24, 10, 1], [1, "cs", 2, 24, 11, 1], [1, "cs", 2, 24, 12, 1], [1, "cs", 2, 24, 13, 1], [1, "cs", 1, 23, 10, 1], [1, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, 1], [1, "cs", 1, 23, 8, 1], [1, "cs", 2, 24, 8, 1], [1, "cs", 2, 24, 9, 1], [1, "cs", 2, 23, 9, 1], [1, "cs", 2, 22, 9, 1], [1, "cs", 2, 22, 10, 1], [1, "cs", 2, 22, 11, 1], [1, "cs", 2, 23, 11, 1], [1, "cs", 2, 23, 12, 1], [1, "cs", 2, 23, 13, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, 9, 1], [1, "cs", 2, 21, 8, 1], [1, "cs", 2, 29, 25, 1], [1, "cs", 2, 25, 24, 1], [1, "cs", 2, 26, 25, 1], [1, "cs", 2, 27, 25, 1], [1, "cs", 0, 28, 25, 1], [1, "cs", 1, 25, 23, 1], [1, "cs", 2, 26, 24, 1], [1, "cs", 0, 24, 25, 1], [1, "cs", 3, 23, 24, 1], [1, "cs", 3, 24, 24, 1], [1, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [1, "cs", 1, 26, 26, 1], [1, "cs", 1, 29, 26, 1], [1, "cs", 2, 23, 26, 1], [1, "cs", 2, 24, 26, 1], [1, "cs", 2, 25, 26, 1], [1, "cs", 2, 27, 26, 1], [1, "cs", 2, 28, 26, 1], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, 1], [1, "cs", 1, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [1, "cs", 2, 27, 28, 1], [1, "cs", 2, 27, 27, 1], [1, "cs", 2, 26, 28, 1], [1, "cs", 2, 26, 27, 1], [1, "cs", 2, 25, 28, 1], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, 1], [1, "cs", 2, 24, 27, 1], [1, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, 1], [1, "cs", 1, 24, 30, 1], [1, "cs", 2, 25, 31, 1], [1, "cs", 2, 25, 30, 1], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, 1], [1, "cs", 2, 26, 33, 1], [1, "cs", 0, 26, 34, 1], [1, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, 1], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, 1], [1, "cs", 2, 24, 32, 1], [1, "cs", 2, 25, 33, 1], [1, "cs", 2, 26, 35, 1], [1, "cs", 2, 24, 33, 1], [1, "cs", 2, 25, 34, 1], [1, "cs", 1, 22, 29, 1], [1, "cs", 1, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, 1], [1, "cs", 2, 23, 34, 1], [1, "cs", 2, 23, 33, 1], [1, "cs", 0, 22, 33, 1], [1, "cs", 1, 23, 32, 1], [1, "cs", 2, 22, 32, 1], [1, "cs", 2, 23, 31, 1], [1, "cs", 2, 23, 30, 1], [1, "cs", 2, 22, 30, 1], [1, "cs", 2, 22, 31, 1], [1, "cs", 1, 21, 31, 1], [1, "cs", 0, 21, 29, 1], [1, "cs", 2, 21, 30, 1], [1, "cs", 2, 24, 36, 1], [1, "cs", 2, 26, 36, 1], [1, "cs", 2, 25, 36, 1], [1, "cs", 2, 27, 36, 1], [1, "cs", 2, 28, 36, 1], [1, "d", 2, 83, 65, 1], [1, "d", 2, 16, 67, 1], [1, "g", 0, 15, 17, 1], [1, "s", 0, 18, 13, 1], [1, "s", 0, 85, 11, 1], [1, "f", 0, 41, 102, 1], [1, "f", 0, 42, 124, 1], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [1, "f", 0, 70, 87, 1], [1, "f", 0, 27, 96, 1], [1, "f", 0, 22, 79, 1], [1, "f", 0, 20, 117, 1], [1, "f", 0, 30, 137, 1], [1, "f", 0, 59, 146, 1], [1, "f", 0, 52, 147, 1], [1, "f", 0, 20, 149, 1], [1, "f", 0, 36, 146, 1], [1, "f", 0, 62, 124, 1], [1, "g", 1, 34, 121, 1], [1, "g", 1, 52, 116, 1], [1, "g", 1, 78, 116, 1], [1, "g", 1, 71, 129, 1], [1, "s", 0, 53, 100, 1], [1, "s", 0, 73, 111, 1], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, 1], [1, "s", 0, 19, 102, 1], [1, "s", 0, 18, 127, 1], [1, "s", 0, 35, 159, 1], [1, "s", 0, 65, 54, 1], [1, "s", 0, 44, 52, 1], [1, "s", 0, 26, 51, 1], [1, "f", 1, 56, 136, 1], [1, "f", 1, 41, 133, 1], [1, "f", 1, 80, 120, 1], [1, "f", 1, 16, 117, 1], [1, "f", 1, 13, 99, 1], [1, "f", 1, 17, 89, 1], [1, "f", 1, 90, 98, 1], [1, "f", 1, 84, 95, 1], [1, "f", 1, 16, 57, 1], [1, "f", 1, 77, 53, 1], [1, "d", 1, 48, 35, 1], [1, "de", 8, 33, 13, 0], [1, "de", 8, 30, 9, 0], [1, "de", 9, 32, 30, 0], [1, "de", 10, 30, 25, 0], [1, "de", 10, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, 0], [1, "de", 9, 70, 22, 0], [1, "de", 10, 70, 16, 0], [1, "de", 10, 75, 11, 0], [1, "de", 8, 68, 10, 0], [1, "de", 8, 75, 30, 0], [1, "de", 11, 71, 33, 0], [1, "de", 11, 72, 25, 0], [1, "de", 11, 64, 25, 0], [1, "de", 11, 52, 10, 0], [1, "de", 11, 31, 15, 0], [1, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, 0], [1, "de", 30, 30, 29, 0], [1, "de", 30, 71, 29, 0], [1, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, 19, 0], [1, "de", 29, 72, 10, 0], [1, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [1, "fo", 1, 39, 12, 0], [1, "fo", 1, 34, 14, 0], [1, "fo", 1, 74, 28, 0], [1, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [1, "fo", 2, 77, 22, 0], [1, "fo", 2, 74, 21, 0], [1, "fo", 2, 76, 18, 0], [1, "fo", 1, 78, 17, 0], [1, "fo", 1, 28, 19, 0], [1, "fo", 2, 27, 24, 0], [1, "fo", 2, 24, 17, 0], [1, "fo", 2, 29, 21, 0], [1, "fo", 1, 27, 32, 0], [1, "fo", 2, 30, 33, 0], [1, "fo", 1, 29, 28, 0], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, 20, 24, 0], [1, "fo", 2, 20, 26, 0], [1, "fo", 2, 23, 16, 0], [1, "fo", 2, 11, 25, 0], [1, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [1, "de", 34, 30, 18, 0], [1, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, 0], [1, "de", 36, 72, 23, 0], [1, "de", 35, 25, 18, 0], [1, "d", 1, 83, 41, 1], [1, "d", 1, 17, 40, 1], [1, "cs", 2, 224, 104, 1], [1, "cs", 0, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", 3, 216, 128, 1], [1, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, 1], [1, "s", 1, 217, 129, 1], [1, "s", 0, 218, 128, 1], [1, "s", 1, 217, 127, 1], [1, "s", 0, 217, 126, 1], [1, "s", 1, 217, 125, 1], [1, "s", 0, 216, 124, 1], [1, "s", 1, 215, 124, 1], [1, "s", 0, 214, 124, 1], [1, "s", 1, 213, 125, 1], [1, "s", 0, 213, 126, 1], [1, "plm", 2, 217, 130, 0], [1, "plm", 2, 212, 125, 0], [1, "p", 0, 214, 134, 1], [1, "s", 1, 211, 126, 1], [1, "b", 1, 45, 277, 0], [1, "b", 1, 50, 286, 0], [1, "b", 2, 51, 284, 0], [1, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [1, "b", 0, 52, 283, 0], [1, "b", 1, 51, 280, 0], [1, "g", 0, 45, 269, 1], [1, "p", 0, 55, 281, 1], [1, "b", 1, 5, 172, 0], [1, "b", 2, 6, 172, 0], [1, "t", 5, 6, 171, 0], [1, "t", 1, 5, 170, 0], [1, "t", 1, 5, 164, 0], [1, "t", 3, 6, 164, 0], [1, "b", 0, 6, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, 0], [1, "t", 4, 5, 166, 0], [1, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, 0], [1, "t", 0, 6, 169, 0], [1, "t", 4, 6, 170, 0], [1, "t", 0, 5, 167, 0], [1, "t", 2, 5, 169, 0], [1, "b", 0, 5, 168, 0], [1, "s", 1, 7, 153, 1], [1, "s", 2, 7, 151, 1], [1, "de", 5, 7, 152, 0], [1, "t", 1, 5, 154, 0], [1, "b", 0, 6, 154, 0], [1, "t", 2, 6, 155, 0], [1, "b", 2, 6, 156, 0], [1, "t", 2, 5, 157, 0], [1, "t", 4, 5, 155, 0], [1, "b", 0, 6, 157, 0], [1, "t", 1, 5, 156, 0], [1, "t", 5, 6, 158, 0], [1, "b", 2, 6, 159, 0], [1, "b", 0, 6, 162, 0], [1, "t", 4, 6, 163, 0], [1, "t", 4, 6, 161, 0], [1, "b", 1, 6, 160, 0], [1, "b", 2, 5, 163, 0], [1, "b", 2, 5, 158, 0], [1, "b", 2, 5, 161, 0], [1, "t", 1, 5, 162, 0], [1, "t", 1, 5, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", 2, 83, 178, 0], [1, "s", 1, 82, 177, 1], [1, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [1, "t", 3, 73, 174, 0], [1, "t", 5, 72, 175, 0], [1, "t", 5, 87, 173, 0], [1, "de", 2, 76, 175, 0], [1, "de", 3, 77, 171, 0], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", 1, 70, 174, 1], [1, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, 0], [1, "r", 50, 174, 0], [1, "r", 49, 174, 0], [1, "r", 52, 175, 0], [1, "r", 52, 176, 0], [1, "r", 51, 176, 0], [1, "r", 50, 176, 0], [1, "r", 49, 176, 0], [1, "r", 48, 175, 0], [1, "r", 47, 175, 0], [1, "r", 48, 176, 0], [1, "r", 69, 163, 0], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [1, "r", 73, 163, 0], [1, "r", 72, 163, 0], [1, "r", 73, 164, 0], [1, "r", 72, 164, 0], [1, "r", 71, 164, 0], [1, "r", 70, 164, 0], [1, "r", 69, 164, 0], [1, "r", 68, 164, 0], [1, "r", 68, 165, 0], [1, "r", 69, 165, 0], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [1, "r", 74, 164, 0], [1, "r", 73, 165, 0], [1, "r", 72, 166, 0], [1, "r", 71, 166, 0], [1, "r", 70, 166, 0], [1, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, 0], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [1, "r", 25, 165, 0], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, 0], [1, "r", 21, 165, 0], [1, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [1, "r", 25, 166, 0], [1, "r", 26, 166, 0], [1, "r", 27, 166, 0], [1, "r", 28, 166, 0], [1, "r", 28, 167, 0], [1, "r", 26, 167, 0], [1, "r", 25, 167, 0], [1, "r", 24, 167, 0], [1, "r", 23, 167, 0], [1, "r", 22, 167, 0], [1, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, 0], [1, "r", 28, 168, 0], [1, "r", 27, 168, 0], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [1, "r", 24, 168, 0], [1, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, 0], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [1, "r", 23, 169, 0], [1, "r", 22, 168, 0], [1, "r", 21, 167, 0], [1, "s", 1, 52, 174, 1], [1, "t", 3, 50, 177, 0], [1, "t", 4, 49, 177, 0], [1, "b", 0, 47, 174, 0], [1, "b", 0, 69, 166, 0], [1, "t", 2, 68, 166, 0], [1, "t", 5, 74, 163, 0], [1, "t", 1, 73, 162, 0], [1, "s", 0, 73, 166, 1], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, 1], [1, "p", 0, 61, 162, 1], [1, "p", 0, 42, 170, 1], [1, "p", 0, 20, 174, 1], [1, "p", 0, 16, 160, 1], [1, "b", 1, 23, 164, 0], [1, "b", 1, 28, 169, 0], [1, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, 0], [1, "t", 1, 15, 171, 0], [1, "t", 5, 13, 175, 0], [1, "t", 5, 19, 166, 0], [1, "t", 5, 26, 163, 0], [1, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [1, "b", 2, 30, 175, 0], [1, "t", 2, 24, 177, 0], [1, "b", 1, 37, 174, 0], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, 0], [1, "t", 4, 38, 169, 0], [1, "t", 4, 34, 173, 0], [1, "t", 5, 38, 175, 0], [1, "b", 2, 39, 173, 0], [1, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", 2, 35, 176, 1], [1, "s", 1, 41, 175, 1], [1, "b", 2, 53, 176, 0], [1, "t", 5, 55, 173, 0], [1, "t", 5, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", 2, 54, 163, 0], [1, "t", 3, 49, 165, 0], [1, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, 0], [1, "t", 4, 66, 162, 0], [1, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, 0], [1, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, 0], [1, "t", 5, 88, 163, 0], [1, "t", 1, 84, 166, 0], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, 0], [1, "s", 1, 57, 162, 1], [1, "b", 1, 39, 161, 0], [1, "b", 0, 34, 164, 0], [1, "b", 2, 54, 164, 0], [1, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, 0], [1, "t", 4, 63, 169, 0], [1, "t", 4, 63, 174, 0], [1, "t", 1, 62, 175, 0], [1, "t", 5, 40, 162, 0], [1, "t", 1, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, 0], [1, "s", 1, 63, 173, 1], [1, "s", 2, 40, 165, 1], [1, "b", 0, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, 0], [1, "de", 22, 83, 175, 0], [1, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, 0], [1, "de", 19, 68, 168, 0], [1, "de", 19, 65, 163, 0], [1, "de", 19, 75, 162, 0], [1, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, 0], [1, "de", 19, 87, 164, 0], [1, "de", 19, 61, 177, 0], [1, "de", 19, 59, 172, 0], [1, "de", 19, 59, 167, 0], [1, "de", 19, 53, 165, 0], [1, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, 0], [1, "de", 19, 48, 167, 0], [1, "de", 19, 47, 170, 0], [1, "de", 19, 41, 163, 0], [1, "de", 19, 37, 161, 0], [1, "de", 19, 36, 166, 0], [1, "de", 19, 36, 171, 0], [1, "de", 19, 34, 174, 0], [1, "de", 19, 40, 172, 0], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, 0], [1, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [1, "de", 19, 64, 181, 0], [1, "de", 19, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", 19, 30, 170, 0], [1, "de", 19, 17, 168, 0], [1, "de", 19, 14, 173, 0], [1, "de", 19, 12, 162, 0], [1, "de", 19, 9, 167, 0], [1, "de", 19, 20, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", 19, 83, 195, 0], [1, "de", 2, 85, 163, 0], [1, "de", 2, 80, 164, 0], [1, "de", 2, 84, 169, 0], [1, "de", 2, 55, 165, 0], [1, "de", 3, 46, 163, 0], [1, "de", 2, 66, 169, 0], [1, "de", 0, 63, 175, 0], [1, "de", 0, 34, 164, 0], [1, "de", 0, 18, 160, 0], [1, "de", 2, 40, 160, 0], [1, "de", 2, 53, 160, 0], [1, "de", 2, 14, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", 2, 23, 176, 0], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, 0], [1, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [1, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [1, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", 1, 44, 156, 0], [1, "t", 2, 45, 157, 0], [1, "b", 0, 75, 156, 0], [1, "t", 3, 76, 157, 0], [1, "t", 5, 62, 157, 0], [1, "t", 5, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", 4, 21, 156, 0], [1, "t", 4, 56, 159, 0], [1, "f", 1, 94, 153, 1], [1, "f", 2, 93, 153, 1], [1, "f", 2, 99, 153, 1], [1, "f", 1, 98, 153, 1], [1, "f", 0, 97, 153, 1], [1, "f", 1, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, 0], [1, "b", 3, 43, 281, 0], [1, "de", 50, 24, 39, 0], [1, "de", 50, 21, 39, 0], [1, "de", 50, 22, 43, 0], [1, "de", 50, 15, 34, 0], [1, "de", 50, 18, 26, 0], [1, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, 0], [1, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [1, "de", 50, 20, 41, 0], [1, "de", 50, 18, 21, 0], [1, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, 0], [1, "de", 50, 17, 17, 0], [1, "de", 50, 18, 10, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [1, "de", 50, 82, 39, 0], [1, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, 0], [1, "de", 50, 29, 42, 0], [1, "de", 9, 74, 37, 0], [1, "de", 9, 76, 22, 0], [1, "de", 10, 79, 24, 0], [1, "de", 11, 77, 17, 0], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [1, "de", 28, 27, 31, 0], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, 0], [1, "de", 51, 24, 155, 0], [1, "de", 51, 7, 154, 0], [1, "de", 51, 11, 154, 0], [1, "de", 51, 12, 156, 0], [1, "de", 51, 16, 154, 0], [1, "de", 51, 20, 154, 0], [1, "de", 51, 23, 154, 0], [1, "de", 51, 18, 157, 0], [1, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, 0], [1, "de", 51, 86, 154, 0], [1, "de", 51, 88, 156, 0], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [1, "de", 51, 67, 154, 0], [1, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [1, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, 0], [1, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, 0], [1, "de", 51, 49, 154, 0], [1, "de", 51, 46, 154, 0], [1, "de", 51, 44, 154, 0], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, 0], [1, "de", 51, 38, 154, 0], [1, "de", 51, 39, 156, 0], [1, "de", 51, 34, 154, 0], [1, "de", 5, 19, 142, 0], [1, "de", 5, 37, 147, 0], [1, "de", 7, 53, 147, 0], [1, "de", 6, 69, 150, 0], [1, "de", 4, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", 4, 28, 137, 0], [1, "de", 4, 15, 137, 0], [1, "de", 4, 48, 134, 0], [1, "de", 5, 67, 135, 0], [1, "de", 34, 84, 155, 0], [1, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, 0], [1, "de", 35, 56, 157, 0], [1, "de", 35, 65, 159, 0], [1, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, 0], [1, "de", 35, 8, 155, 0], [1, "de", 33, 13, 155, 0], [1, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, 0], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [1, "fo", 2, 45, 36, 0], [1, "fo", 2, 53, 34, 0], [1, "fo", 1, 51, 35, 0], [1, "fo", 1, 58, 35, 0], [1, "fo", 1, 33, 35, 0], [1, "fo", 1, 31, 33, 0], [1, "fo", 2, 29, 36, 0], [1, "fo", 2, 56, 36, 0], [1, "fo", 2, 60, 37, 0], [1, "fo", 2, 45, 32, 0], [1, "fo", 2, 22, 25, 0], [1, "fo", 2, 21, 35, 0], [1, "de", 52, 90, 208, 0], [1, "de", 18, 94, 250, 0], [1, "de", 17, 95, 253, 0], [1, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [1, "cs", 2, 138, 5, 1], [1, "cs", 2, 138, 6, 1], [1, "cs", 2, 139, 6, 1], [1, "cs", 2, 141, 6, 1], [1, "cs", 2, 140, 6, 1], [1, "la", 3, 143, 7, 1], [1, "la", 3, 139, 7, 1], [1, "cs", 0, 137, 7, 1], [1, "cs", 1, 138, 8, 1], [1, "cs", 2, 137, 6, 1], [1, "cs", 2, 137, 8, 1], [1, "cs", 2, 136, 7, 1], [1, "cs", 2, 138, 9, 1], [1, "cs", 3, 139, 9, 1], [1, "cs", 3, 136, 8, 1], [1, "cs", 3, 137, 9, 1], [1, "de", 53, 92, 165, 0], [1, "de", 53, 92, 180, 0], [1, "de", 53, 92, 188, 0], [1, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, 0], [1, "de", 54, 87, 153, 0], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, 0], [1, "de", 54, 82, 153, 0], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, 0], [1, "de", 54, 78, 153, 0], [1, "de", 54, 77, 153, 0], [1, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [1, "de", 54, 72, 153, 0], [1, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, 0], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, 0], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, 0], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, 0], [1, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [1, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, 0], [1, "de", 54, 53, 153, 0], [1, "de", 54, 52, 153, 0], [1, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, 0], [1, "de", 54, 49, 153, 0], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, 0], [1, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [1, "de", 54, 44, 153, 0], [1, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, 0], [1, "de", 54, 40, 153, 0], [1, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [1, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [1, "de", 54, 30, 153, 0], [1, "de", 54, 29, 153, 0], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [1, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, 0], [1, "de", 54, 20, 153, 0], [1, "de", 54, 19, 153, 0], [1, "de", 54, 18, 153, 0], [1, "de", 54, 17, 153, 0], [1, "de", 54, 16, 153, 0], [1, "de", 54, 15, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, 13, 153, 0], [1, "de", 54, 12, 153, 0], [1, "de", 54, 11, 153, 0], [1, "de", 54, 10, 153, 0], [1, "de", 54, 8, 153, 0], [1, "de", 54, 9, 153, 0], [1, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, 11, 0], [1, "de", 55, 83, 12, 0], [1, "de", 55, 83, 13, 0], [1, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, 0], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, 17, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, 18, 0], [1, "de", 55, 83, 20, 0], [1, "de", 55, 83, 21, 0], [1, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [1, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, 0], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, 0], [1, "de", 55, 83, 31, 0], [1, "de", 55, 83, 32, 0], [1, "de", 55, 83, 33, 0], [1, "de", 55, 83, 34, 0], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [1, "de", 55, 83, 37, 0], [1, "de", 55, 83, 38, 0], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, 0], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, 0], [1, "de", 55, 76, 38, 0], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [1, "de", 55, 74, 38, 0], [1, "de", 55, 72, 38, 0], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [1, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [1, "de", 55, 65, 38, 0], [1, "de", 55, 64, 38, 0], [1, "de", 55, 63, 38, 0], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [1, "de", 55, 61, 38, 0], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [1, "de", 55, 58, 38, 0], [1, "de", 55, 56, 38, 0], [1, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [1, "de", 55, 49, 38, 0], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [1, "de", 55, 43, 38, 0], [1, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, 0], [1, "de", 55, 39, 38, 0], [1, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, 0], [1, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [1, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [1, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, 0], [1, "de", 55, 23, 38, 0], [1, "de", 55, 21, 38, 0], [1, "de", 55, 22, 38, 0], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, 0], [1, "de", 55, 19, 37, 0], [1, "de", 55, 19, 36, 0], [1, "de", 55, 19, 35, 0], [1, "de", 55, 19, 34, 0], [1, "de", 55, 19, 33, 0], [1, "de", 55, 19, 32, 0], [1, "de", 55, 19, 31, 0], [1, "de", 55, 19, 30, 0], [1, "de", 55, 19, 28, 0], [1, "de", 55, 19, 29, 0], [1, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, 0], [1, "de", 55, 19, 25, 0], [1, "de", 55, 19, 24, 0], [1, "de", 55, 19, 23, 0], [1, "de", 55, 19, 22, 0], [1, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, 19, 18, 0], [1, "de", 55, 19, 19, 0], [1, "de", 55, 19, 16, 0], [1, "de", 55, 19, 17, 0], [1, "de", 55, 19, 15, 0], [1, "de", 55, 19, 14, 0], [1, "de", 55, 19, 13, 0], [1, "de", 55, 19, 12, 0], [1, "de", 55, 19, 11, 0], [1, "de", 55, 19, 10, 0], [1, "de", 55, 19, 9, 0], [1, "de", 55, 19, 8, 0], [1, "de", 55, 84, 35, 0], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, 0], [1, "de", 55, 84, 16, 0], [1, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, 9, 0], [1, "de", 50, 85, 11, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, 0], [1, "de", 55, 72, 39, 0], [1, "de", 55, 74, 39, 0], [1, "de", 55, 66, 39, 0], [1, "de", 55, 65, 39, 0], [1, "de", 50, 67, 41, 0], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, 0], [1, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, 0], [1, "de", 55, 36, 39, 0], [1, "de", 55, 32, 39, 0], [1, "de", 50, 31, 39, 0], [1, "de", 55, 23, 39, 0], [1, "de", 55, 18, 37, 0], [1, "de", 50, 18, 36, 0], [1, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, 0], [1, "de", 55, 18, 31, 0], [1, "de", 50, 18, 30, 0], [1, "de", 55, 18, 25, 0], [1, "de", 50, 18, 24, 0], [1, "de", 55, 18, 20, 0], [1, "de", 55, 18, 14, 0], [1, "de", 50, 18, 15, 0], [1, "de", 55, 18, 8, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [1, "de", 54, 76, 154, 0], [1, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [1, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, 0], [1, "de", 54, 42, 154, 0], [1, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [1, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [1, "de", 54, 10, 154, 0], [1, "de", 54, 8, 154, 0], [1, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [1, "de", 53, 93, 156, 0], [1, "de", 53, 93, 158, 0], [1, "de", 52, 91, 157, 0], [1, "de", 53, 93, 159, 0], [1, "de", 53, 93, 161, 0], [1, "de", 53, 93, 162, 0], [1, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, 0], [1, "de", 53, 93, 165, 0], [1, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, 0], [1, "de", 52, 91, 167, 0], [1, "de", 53, 93, 169, 0], [1, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, 0], [1, "de", 53, 93, 171, 0], [1, "de", 53, 93, 173, 0], [1, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, 0], [1, "de", 53, 92, 169, 0], [1, "de", 53, 93, 178, 0], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, 0], [1, "de", 53, 93, 187, 0], [1, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [1, "de", 53, 93, 192, 0], [1, "de", 53, 93, 195, 0], [1, "de", 53, 93, 194, 0], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, 0], [1, "de", 53, 93, 202, 0], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, 0], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, 0], [1, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, 0], [1, "de", 53, 93, 212, 0], [1, "de", 52, 91, 204, 0], [1, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, 0], [1, "de", 53, 93, 215, 0], [1, "de", 53, 93, 216, 0], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, 0], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, 0], [1, "de", 52, 92, 202, 0], [1, "de", 53, 92, 201, 0], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, 0], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [1, "de", 52, 92, 225, 0], [1, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, 0], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, 0], [1, "de", 52, 93, 182, 0], [1, "de", 52, 93, 185, 0], [1, "de", 52, 93, 172, 0], [1, "de", 52, 93, 174, 0], [1, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [1, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, 0], [1, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, 0], [1, "de", 52, 93, 230, 0], [1, "de", 52, 92, 228, 0], [1, "de", 53, 93, 235, 0], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, 0], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [1, "de", 52, 93, 242, 0], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, 0], [1, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, 0], [1, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [1, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [1, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [1, "de", 52, 93, 260, 0], [1, "de", 53, 93, 263, 0], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, 0], [1, "de", 52, 93, 278, 0], [1, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, 0], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, 0], [1, "de", 53, 93, 286, 0], [1, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [1, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, 0], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, 0], [1, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, 1], [1, "cs", 2, 223, 105, 1], [1, "cs", 2, 223, 102, 1], [1, "cs", 2, 223, 103, 1], [1, "la", 3, 141, 8, 1], [1, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [1, "de", 4, 81, 149, 0], [1, "f", 0, 83, 148, 1], [1, "f", 1, 82, 149, 1], [1, "de", 34, 81, 156, 0], [1, "de", 51, 17, 9, 0], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, 9, 0], [1, "cs", 3, 223, 106, 1], [1, "p", 0, 119, 279, 1], [1, "p", 0, 109, 242, 1], [1, "cs", 1, 29, 9, 1], [1, "cs", 2, 30, 9, 1], [1, "cs", 2, 31, 9, 1], [1, "cs", 2, 32, 9, 1], [1, "cs", 2, 33, 9, 1], [1, "cs", 2, 69, 9, 1], [1, "cs", 2, 71, 9, 1], [1, "cs", 2, 70, 9, 1], [1, "cs", 1, 72, 9, 1], [1, "cs", 2, 73, 9, 1], [1, "de", 10, 31, 10, 0], [1, "de", 10, 29, 10, 0], [1, "de", 10, 44, 10, 0], [1, "de", 4, 87, 10, 0], [1, "de", 4, 86, 10, 0], [1, "de", 5, 87, 9, 0], [1, "de", 5, 13, 10, 0], [1, "de", 4, 14, 11, 0], [1, "de", 4, 16, 10, 0], [1, "de", 4, 17, 10, 0], [1, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, 9, 1], [1, "cs", 2, 150, 9, 1], [1, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, 1], [1, "cs", 1, 149, 9, 1], [1, "cs", 1, 154, 9, 1], [1, "cs", 3, 147, 9, 1], [1, "cs", 3, 151, 9, 1], [1, "cs", 3, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [1, "cs", 3, 157, 9, 1], [1, "cs", 3, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [1, "cs", 3, 160, 9, 1], [1, "cs", 0, 161, 9, 1], [1, "cs", 2, 162, 9, 1], [1, "cs", 2, 163, 9, 1], [1, "cs", 1, 164, 9, 1], [1, "cs", 2, 165, 9, 1], [1, "cs", 3, 166, 9, 1], [1, "cs", 3, 168, 9, 1], [1, "cs", 3, 170, 9, 1], [1, "cs", 1, 169, 9, 1], [1, "cs", 2, 167, 9, 1], [1, "cs", 2, 171, 9, 1], [1, "cs", 2, 173, 9, 1], [1, "cs", 2, 172, 9, 1], [1, "cs", 2, 174, 9, 1], [1, "cs", 1, 175, 9, 1], [1, "cs", 3, 176, 9, 1], [1, "cs", 3, 178, 9, 1], [1, "cs", 3, 179, 9, 1], [1, "cs", 0, 180, 9, 1], [1, "cs", 2, 177, 9, 1], [1, "cs", 2, 182, 9, 1], [1, "cs", 2, 181, 9, 1], [1, "cs", 2, 183, 9, 1], [1, "cs", 2, 184, 9, 1], [1, "cs", 2, 185, 9, 1], [1, "cs", 2, 186, 9, 1], [1, "cs", 1, 187, 9, 1], [1, "cs", 2, 188, 9, 1], [1, "cs", 3, 189, 9, 1], [1, "cs", 3, 190, 9, 1], [1, "cs", 3, 191, 9, 1], [1, "cs", 2, 192, 9, 1], [1, "cs", 0, 193, 9, 1], [1, "cs", 2, 194, 9, 1], [1, "cs", 2, 196, 9, 1], [1, "cs", 2, 198, 9, 1], [1, "cs", 2, 200, 9, 1], [1, "cs", 3, 195, 9, 1], [1, "cs", 3, 197, 9, 1], [1, "cs", 3, 199, 9, 1], [1, "cs", 0, 201, 9, 1], [1, "cs", 2, 202, 9, 1], [1, "cs", 2, 203, 9, 1], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, 9, 1], [1, "cs", 3, 206, 9, 1], [1, "cs", 3, 205, 9, 1], [1, "cs", 3, 204, 9, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", 3, 215, 9, 1], [1, "cs", 3, 216, 9, 1], [1, "cs", 3, 217, 9, 1], [1, "cs", 3, 218, 9, 1], [1, "b", 0, 5, 159, 0], [1, "b", 0, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [2, "isl", 2, 119, 277, 0], [2, "isl", 2, 109, 244, 0], [2, "isl", 2, 114, 205, 0], [2, "isl", 1, 120, 150, 0], [2, "isl", 2, 154, 129, 0], [2, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, 0], [2, "isl", 1, 214, 128, 0], [2, "isl", 1, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, 19, 1], [1, "la", 0, 212, 18, 1], [1, "la", 4, 214, 18, 1], [1, "la", 4, 216, 19, 1], [1, "la", 4, 211, 20, 1], [1, "la", 3, 210, 19, 1], [1, "la", 3, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", 3, 214, 22, 1], [1, "la", 3, 214, 24, 1], [1, "la", 4, 214, 26, 1], [1, "la", 4, 213, 27, 1], [1, "la", 1, 212, 28, 1], [1, "la", 2, 212, 29, 1], [1, "la", 5, 212, 30, 1], [1, "la", 4, 208, 19, 1], [1, "la", 4, 207, 19, 1], [1, "la", 1, 206, 19, 1], [1, "la", 1, 205, 19, 1], [1, "la", 2, 204, 19, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, 17, 1]];
    const Br = 5;
    const Cr = 9;
    const Dr = 4;
    var Er = 0;
    const Fr = 7;
    const Gr = Lk;
    var Hr = {
        ᐃᐃΔⲆⲆ: ["#133A2B", "#042b30"],
        ⲆΔⵠΔⵠᐃΔᐃⵠ: ["#EBF2F0", "#136167"],
        ⵠⲆⲆⲆΔⲆⵠ: ["#4EB687", "#187484"],
        ΔᐃᐃⵠΔΔᐃ: ["#664516", "#13474C"],
        ΔⵠΔᐃⵠⲆΔ: ["#FCEFBB", "#0F4D48"],
        ⵠⲆᐃⲆⵠⲆΔ: ["#C1AA7E", "#0F423D"],
        ⲆⲆⲆⲆΔⵠⲆ: ["#594837", "#163A3A"],
        ᐃⵠΔᐃⲆΔᐃ: ["#A5D6D6", "#539CA0"],
        ᐃⵠⲆᐃⲆ: ["#0B6A84", "#09373F"],
        ᐃᐃΔⵠΔᐃⲆ: ["#2A8B9B", "#0F464C"],
        ΔΔᐃᐃΔᐃⵠ: ["#A9D6D3", "#115E60"],
        ⵠⲆᐃᐃᐃΔⲆ: ["#ECF7F9", "#539CA0"],
        ΔᐃΔⵠⵠᐃⲆ: ["#FFF", "#FFF"],
        ᐃⲆⵠⲆⵠᐃⲆ: ["#FFF", "#FFF"],
        ⵠⲆⵠΔᐃᐃⵠ: ["#1C9BA4", "#00272F"],
        ᐃⵠᐃΔΔ: ["#2D2017", "#031C1E"],
        ΔᐃΔ: 0,
        Δⵠⵠ: 1,
        ᐃΔⵠⲆΔΔΔⲆⲆ: 2300,
        ΔᐃⲆⵠΔⲆⲆⲆᐃ: 2290,
        ⵠᐃⵠⵠᐃΔⵠ: 34,
        ᐃⵠᐃᐃᐃΔⵠ: 5,
        ΔΔⵠⵠΔΔⵠ: 68,
        ⲆⲆᐃΔΔⲆⲆ: 34,
        ΔᐃⵠΔⵠⵠⲆ: 5,
        ⵠⲆᐃⲆΔᐃᐃ: 1,
        ⵠⵠⲆⵠⵠΔΔ: 0.6,
        ᐃⵠᐃⲆΔᐃⵠ: 0.25,
        ⵠⵠⲆⲆΔⲆⵠ: 50,
        ⲆⲆⲆⵠΔᐃᐃ: 10,
        ⲆΔⵠⵠΔⵠⲆ: 75,
        ⵠⲆΔⲆᐃⲆⵠ: 20,
        ᐃΔⲆⲆⲆⵠⵠ: 5,
        Ⲇⵠⵠᐃᐃ: 0,
        ΔⵠⲆΔΔ: 1,
        ⵠᐃᐃᐃⵠ: 2,
        ⵠᐃᐃᐃⲆ: 3,
        ⲆⵠᐃⵠΔ: 4,
        ⲆᐃⵠⵠⲆ: 5,
        ⲆᐃⵠΔᐃ: 6,
        ᐃΔΔΔⲆ: 7,
        ⵠΔΔⵠᐃ: 8,
        Δᐃⵠⵠⵠ: 9,
        ᐃⲆⵠᐃⲆ: 10,
        ΔᐃⲆᐃⲆ: 11,
        ⵠΔΔⲆᐃ: 12,
        ᐃⵠⲆΔⲆ: 13,
        ᐃⲆⵠⵠΔ: 14,
        ΔΔᐃᐃⵠ: 15,
        ᐃⵠΔᐃⵠ: 16,
        ⵠⵠᐃᐃⵠ: 17,
        ΔⵠᐃⵠⲆ: 18,
        ᐃⵠⲆⵠΔ: 19,
        ⵠⵠᐃᐃΔ: 20,
        ⵠᐃΔⲆⵠ: 21,
        ⵠᐃⵠⵠᐃ: 22,
        ⲆⲆᐃᐃᐃ: 23,
        ⵠΔⵠⵠⵠ: 24,
        ΔᐃⲆⲆΔ: 25,
        ⲆⲆΔⵠⲆ: 26,
        ΔⲆⲆΔᐃ: 27,
        ⲆⵠⲆⲆⲆ: 28,
        ⲆΔⵠᐃ: 29,
        ᐃΔΔᐃⵠ: 30,
        ᐃⲆⵠΔⵠ: 31,
        ⲆΔΔⲆᐃ: 32,
        ⵠΔᐃᐃᐃ: 33,
        ⲆᐃⲆΔᐃ: 34,
        ⵠⲆⲆⵠᐃ: 35,
        ⲆⲆᐃΔⲆ: 36,
        ΔΔᐃⵠΔ: 37,
        ΔΔᐃΔⵠ: 38,
        ᐃΔⲆⵠⵠ: 39,
        ⵠⲆⲆᐃᐃ: 40,
        ⲆᐃⵠΔΔ: 41,
        ΔⲆⵠⵠᐃ: 42,
        ᐃᐃⵠⲆΔ: 43,
        ⲆⵠᐃΔⲆ: 44,
        ᐃΔⵠⵠᐃ: 45,
        ⲆΔⲆΔᐃ: 46,
        ΔⲆⲆᐃⵠ: 47,
        Ⲇⵠᐃᐃᐃ: 48,
        ΔᐃΔᐃΔ: 49,
        ΔⵠⵠᐃΔ: 50,
        ᐃⲆⵠⲆΔ: 51,
        ⵠⵠᐃᐃᐃ: 52,
        ΔⵠⲆΔᐃ: 53,
        ⵠⲆΔΔᐃ: 54,
        ⲆᐃⲆⲆⵠ: 55,
        ᐃⵠΔⵠΔ: 56,
        ⵠᐃΔᐃᐃ: 57,
        ⲆΔΔΔⵠ: 58,
        ᐃⲆΔᐃⵠ: 59,
        ⲆⲆⵠⲆΔ: 60,
        ΔⵠΔⲆΔ: 61,
        ΔⲆᐃΔΔ: 62,
        ⵠΔΔΔΔ: 63,
        ᐃᐃᐃΔⵠ: 64,
        ⲆⵠⲆΔΔ: 65,
        ⲆⵠΔᐃΔ: 66,
        ΔⵠⲆⵠⲆ: 67,
        ⵠΔⵠⲆᐃ: 68,
        ᐃⵠⵠΔⵠ: 69,
        ᐃᐃⵠⵠΔ: 70,
        ⵠᐃⵠⲆΔ: 71,
        ΔᐃΔⲆᐃ: 72,
        ⲆᐃΔᐃΔ: 73,
        ᐃⵠΔΔΔ: 74,
        ᐃⵠⵠⲆⲆ: 75,
        ⵠᐃⵠⲆᐃ: 76,
        ⲆⵠΔⲆΔ: 77,
        ΔⲆⵠᐃⵠ: 78,
        ⲆⵠΔⵠΔ: 79,
        ⲆΔᐃⲆᐃ: 80,
        ᐃⲆΔⲆⲆ: 81,
        ᐃⲆΔΔⲆ: 82,
        ᐃΔΔΔΔ: 83,
        ⲆⲆᐃⲆⵠ: 84,
        ⵠⲆⵠⲆΔ: 85,
        ⲆᐃᐃⲆⵠ: 86,
        ⲆΔⲆᐃᐃ: 87,
        ⲆⵠⵠᐃΔ: 88,
        ⲆΔᐃΔᐃ: 89,
        ᐃΔⵠⵠΔ: 90,
        ⵠⲆᐃΔᐃ: 91,
        ΔΔⲆΔⵠ: 92,
        ᐃⵠⵠᐃⲆ: 93,
        ΔΔΔΔΔ: 94,
        ⲆⵠΔⲆᐃ: 95,
        ᐃⲆΔᐃΔ: 96,
        ⵠⵠΔⲆΔ: 97,
        ⲆΔᐃⵠΔ: 98,
        ⲆΔⵠⲆᐃ: 99,
        ᐃⲆᐃᐃᐃᐃⵠⲆⵠ: 100,
        ⵠⵠΔᐃⲆ: 101,
        ⲆᐃΔⲆⵠ: 102,
        ᐃⲆⲆᐃᐃ: 103,
        ⲆᐃᐃⵠΔ: 104,
        ⵠΔⵠᐃⲆ: 105,
        ⵠᐃⲆᐃⵠ: 106,
        ⲆᐃⲆⲆᐃ: 107,
        ΔⵠⲆⲆᐃ: 108,
        ᐃⲆⵠⵠ: 109,
        ᐃⵠᐃⵠΔ: 110,
        ⵠⲆΔΔ: 111,
        ⵠⲆΔⵠ: 112,
        ᐃⲆⲆᐃΔⲆᐃ: 113,
        ᐃⵠⲆΔΔ: 114,
        ᐃΔⲆⵠᐃⵠᐃ: 115,
        ᐃᐃᐃⵠⵠ: 116,
        ᐃΔᐃⵠⵠ: 117,
        ᐃΔⲆᐃⵠᐃⲆ: 118,
        ⲆⵠᐃᐃⵠΔⲆ: 119,
        ᐃⲆⵠⲆⵠ: 120,
        ⵠΔⲆⲆ: 121,
        ΔΔΔⵠⲆ: 122,
        ΔΔᐃΔΔ: 123,
        Δⵠᐃⵠⵠⵠⵠ: 124,
        ⲆᐃⲆΔⵠ: 125,
        ⲆᐃⵠᐃΔ: 126,
        ⵠᐃΔⵠΔ: 127,
        ᐃⲆᐃΔⵠ: 128,
        ⲆⲆΔⵠᐃ: 129,
        ΔⲆᐃᐃⵠ: 130,
        ⵠⲆⲆᐃⵠ: 131,
        ⲆΔΔᐃⲆ: 132,
        ᐃᐃΔⵠⲆ: 133,
        ⵠΔⲆΔⵠ: 134,
        ⵠⲆΔⵠΔ: 135,
        ⲆΔⲆΔΔ: 136,
        ⵠⵠΔᐃΔ: 137,
        ⵠⲆⵠⵠΔ: 138,
        ⲆᐃᐃᐃΔ: 139,
        ⲆΔⵠᐃΔΔⲆ: 140,
        ᐃⵠᐃᐃᐃ: 141,
        ΔΔᐃⵠⵠᐃΔ: 142,
        ⲆΔΔⲆⵠⲆΔ: 143,
        ᐃⲆΔⲆⵠⵠᐃ: 144,
        ⲆᐃᐃⲆᐃⲆⲆ: 145,
        ⲆⵠⵠⲆⲆ: 146,
        ΔⵠᐃⲆⲆ: 147,
        ΔⵠΔᐃⵠ: 148,
        ΔⲆⲆⲆⵠ: 149,
        ⲆᐃⲆᐃᐃ: 150,
        ⲆⵠᐃᐃΔ: 151,
        ⵠⵠΔᐃᐃ: 152,
        ⲆᐃᐃΔⲆ: 153,
        ᐃⵠΔⲆⵠ: 154,
        ΔⲆΔᐃᐃ: 155,
        ⲆΔⵠΔⲆ: 156,
        ⵠⵠⵠⵠⵠ: 157,
        ⲆΔΔⲆⵠ: 158,
        ᐃⲆⲆΔⲆ: 159,
        ⵠⵠⲆⵠΔ: 160,
        ⲆⲆΔᐃᐃ: 161,
        ᐃᐃⲆᐃΔ: 162,
        ⵠⵠⲆᐃᐃ: 163,
        ⵠⲆᐃᐃᐃ: 164,
        ᐃΔΔᐃⲆ: 165,
        ΔᐃΔⲆᐃᐃΔ: 166,
        ⲆΔⲆⲆΔ: 167,
        ΔⵠⲆΔⵠ: 168,
        ᐃⵠⲆΔᐃ: 169,
        ᐃⲆⲆⲆᐃ: 170,
        ⲆᐃΔⲆⲆᐃΔ: 171,
        ΔΔᐃⵠᐃⲆⵠ: 172,
        ⵠΔΔΔⵠᐃⵠ: 173,
        ᐃᐃΔᐃᐃ: 174,
        ⵠᐃⵠΔⵠΔᐃ: 175,
        ⲆΔⵠΔᐃⵠⲆ: 176,
        ⲆΔᐃΔΔⵠⵠ: 177,
        ⵠⲆⲆⵠⵠᐃⵠ: 178,
        ⵠᐃⲆⵠᐃⲆΔ: 179,
        ΔᐃΔⵠᐃᐃⵠ: 180,
        ⲆⲆΔᐃⵠⵠⲆ: 181,
        ᐃⵠᐃΔⲆᐃᐃ: 182,
        ⲆΔⲆᐃΔ: 183,
        ⲆᐃᐃΔⵠ: 184,
        ΔⲆΔΔⵠ: 185,
        Ⲇᐃᐃᐃⵠ: 186,
        ΔΔⲆⵠᐃ: 187,
        ΔⵠⵠⲆⲆΔᐃ: 188,
        ΔⵠΔⵠΔ: 189,
        ⲆⵠⲆⲆᐃ: 190,
        ⲆⲆⵠΔⲆΔⵠ: 191,
        ⵠΔⵠᐃⵠ: 192,
        ⵠᐃᐃⵠⵠⵠⲆ: 193,
        ⵠⲆⵠᐃⲆ: 194,
        ΔᐃⲆΔᐃ: 195,
        ᐃᐃᐃΔᐃΔᐃ: 196,
        ⵠⵠⲆᐃⵠΔⵠ: 197,
        ΔⲆⵠΔⵠ: 198,
        ᐃⲆᐃᐃⵠ: 199,
        ⵠⵠᐃⲆΔⲆⵠ: 200,
        ᐃⲆⲆΔⵠ: 201,
        ΔⲆⵠⵠ: 202,
        ⵠⲆⵠⵠᐃ: 203,
        ᐃᐃⲆⲆᐃⵠⵠ: 204,
        ⲆΔⲆⲆⵠ: 205,
        ⲆΔⵠⲆᐃΔⲆ: 206,
        ᐃΔᐃⵠᐃ: 207,
        ᐃⵠⵠᐃᐃⵠᐃ: 208,
        ⲆⲆΔΔⵠ: 209,
        ⵠΔⲆⵠᐃΔⵠ: 210,
        ⵠΔΔⵠⲆⵠΔ: 211,
        ⲆᐃⵠΔⲆ: 212,
        ⵠᐃⵠᐃΔ: 213,
        ⲆᐃΔⲆᐃ: 214,
        ᐃⵠⵠᐃᐃ: 215,
        Δⵠᐃⵠᐃ: 216,
        ᐃⲆⵠᐃⵠ: 217,
        ΔᐃⵠΔᐃ: 218,
        ᐃⵠᐃⲆᐃ: 219,
        ⲆⲆⵠⵠⵠ: 220,
        ⵠᐃⲆⲆΔ: 221,
        ΔⵠⵠⲆⲆ: 222,
        ΔᐃΔⲆⵠ: 223,
        ᐃᐃᐃᐃᐃ: 224,
        ⲆᐃᐃⲆⲆⲆΔ: 225,
        ⲆⵠᐃⲆⵠⲆΔ: 226,
        ΔᐃΔᐃᐃ: 227,
        ΔᐃᐃⲆⵠⲆⵠ: 228,
        ᐃⲆⲆᐃΔ: 229,
        ΔᐃⲆⲆᐃ: 230,
        ᐃΔⲆΔᐃ: 231,
        ΔⲆᐃⵠⲆ: 232,
        ᐃⲆᐃΔΔ: 233,
        ⲆⲆΔⵠΔᐃⲆ: 234,
        ⲆΔⵠⲆⲆ: 235,
        ⵠⵠⲆⵠᐃ: 236,
        ᐃⲆⵠⲆⲆ: 237,
        ⵠⲆⵠᐃⵠ: 238,
        ⲆⲆⵠⵠΔ: 239,
        ᐃⵠΔᐃΔ: 240,
        ΔⲆⵠⵠⲆ: 241,
        ⲆΔⵠΔⵠ: 242,
        ⲆⵠⵠᐃᐃⲆᐃ: 243,
        ΔⵠΔⲆⲆ: 244,
        ᐃⲆΔΔΔ: 245,
        ᐃⲆΔᐃⲆᐃᐃ: 246,
        ΔᐃᐃΔⵠ: 247,
        ΔΔⵠⲆⵠ: 248,
        ᐃΔΔⵠⵠⵠᐃ: 249,
        ⲆⲆⲆⵠΔ: 250,
        ᐃᐃⲆᐃᐃ: 251,
        Δᐃᐃⵠⵠⵠⵠ: 252,
        ΔΔⲆΔΔΔᐃ: 253,
        ⲆⵠⵠᐃΔⵠΔ: 254,
        ⲆᐃⲆᐃᐃⵠⲆ: 255,
        ⵠⲆᐃⲆᐃΔⲆ: 256,
        ⲆⲆΔⲆᐃᐃΔ: 257,
        ⲆᐃⵠⲆⲆᐃᐃ: 258,
        ᐃΔⲆΔⲆⲆⲆ: 259,
        ᐃᐃΔΔⵠ: 260,
        ΔⵠⲆⵠⵠⵠΔ: 261,
        ⵠⲆⲆΔⵠⵠΔ: 262,
        ⵠΔⲆⵠᐃⲆΔ: 263,
        ΔΔⲆᐃᐃ: 264,
        ⲆⵠΔⲆᐃⲆΔ: 265,
        ᐃΔᐃᐃⵠⵠᐃ: 266,
        ⲆᐃⲆΔΔⵠΔ: 267,
        ᐃⲆᐃᐃᐃⵠⲆ: 268,
        ᐃΔⲆΔⵠᐃⲆ: 269,
        ᐃⲆⲆᐃⵠⵠⵠ: 270,
        ⵠᐃᐃΔΔⲆΔ: 271,
        ᐃᐃᐃᐃᐃⵠᐃ: 272,
        ⲆⲆΔΔⵠΔᐃ: 273,
        ΔⵠⵠᐃⲆⵠΔ: 274,
        ⵠᐃⲆⵠᐃⲆⲆ: 275,
        ⲆⵠⲆΔᐃΔⵠ: 276,
        ᐃⲆⲆⵠⵠⵠⲆ: 277,
        ⵠⲆΔᐃⲆᐃⵠ: 278,
        ᐃⵠⲆⲆ: 279,
        ᐃΔᐃⲆⲆ: 280,
        ΔⵠⵠⵠⵠⲆΔ: 281,
        ⵠΔᐃᐃΔⵠΔ: 282,
        ⲆΔ: 283,
        ᐃⵠΔΔΔⵠᐃ: 284,
        ⵠᐃᐃⵠⵠ: 285,
        ⲆΔⵠⲆⵠ: 286,
        ⵠⲆⲆⲆΔⲆᐃ: 287,
        ⲆΔⲆⵠⵠ: 288,
        ΔⵠⲆᐃⲆⵠΔ: 289,
        ᐃⲆΔⲆⵠΔΔ: 290,
        ⲆᐃΔⲆⲆⵠⵠ: 291,
        ⵠⲆᐃⲆΔⲆⵠ: 292,
        ⵠⵠⲆΔΔᐃⵠ: 293,
        ᐃᐃΔᐃⵠ: 294,
        ᐃᐃⵠᐃⲆⲆΔ: 295,
        ⲆⲆΔᐃᐃⲆΔ: 296,
        ᐃⵠⵠᐃᐃⵠⲆ: 297,
        ⲆΔᐃᐃᐃⲆⲆ: 298,
        ΔᐃᐃᐃⲆ: 299,
        ⲆⵠⲆᐃᐃⲆⲆ: 300,
        ᐃΔⵠⲆΔΔΔ: 301,
        ⲆⵠⵠⵠᐃΔⲆ: 302,
        ᐃⵠᐃⲆΔᐃⲆ: 303,
        ΔΔᐃⲆΔΔⵠ: 304,
        ⲆⲆᐃΔⲆⵠⲆ: 305,
        ᐃΔⵠᐃⵠᐃΔ: 306,
        ΔᐃΔᐃⲆ: 307,
        ⵠⵠⵠⵠⲆΔⵠ: 308,
        ⲆⵠⵠⵠⲆⵠᐃ: 309,
        ᐃⲆⵠⵠᐃΔⵠ: 310,
        ⵠΔΔⲆⵠΔΔ: 311,
        ⵠᐃΔΔΔⲆⵠ: 312,
        ⲆⵠΔⲆΔΔΔ: 313,
        ⲆᐃΔⲆᐃⵠⲆ: 314,
        ⵠΔΔⵠⲆⲆⵠ: 315,
        ᐃⵠⲆⵠⲆΔⲆ: 316,
        ⲆΔⵠⲆⲆᐃⵠ: 317,
        ⲆᐃᐃⵠⲆⲆⲆ: 318,
        ⲆΔⵠΔⵠᐃΔ: 319,
        ⲆⲆᐃᐃⲆⵠᐃ: 320,
        ⲆⲆΔΔⲆ: 321,
        ΔᐃΔΔⲆᐃᐃ: 322,
        ΔΔᐃⲆᐃⵠⲆ: 323,
        ⲆⲆⵠΔⵠⲆⵠ: 324,
        ⵠⲆⵠⲆⲆᐃᐃ: 325,
        ᐃⵠⲆⲆⲆⲆᐃ: 326,
        ᐃΔᐃⲆⲆⲆⵠ: 327,
        ᐃΔⵠⲆⵠⵠⵠ: 328,
        ⵠᐃⲆⵠΔⵠⲆ: 329,
        ⲆᐃᐃⲆΔⲆⵠ: 330,
        ΔⲆⲆⵠΔⵠⲆ: 331,
        ⲆⲆΔΔⵠⲆⵠ: 332,
        ⵠΔⵠΔⵠⲆᐃ: 333,
        ΔⵠΔΔⵠΔⵠ: 334,
        ᐃᐃⵠⵠΔᐃᐃ: 335,
        ⲆΔᐃⲆⲆⵠᐃ: 336,
        ᐃᐃᐃΔⲆⵠΔ: 337,
        ΔᐃᐃΔᐃᐃⵠ: 338,
        ⵠⵠᐃᐃΔΔⵠ: 339,
        ⲆΔΔⵠⵠⲆⲆ: 340,
        ⲆⵠΔΔΔΔⵠ: 341,
        ⲆⲆᐃᐃⲆⲆⲆ: 342,
        ΔΔᐃⲆΔⲆⲆ: 343,
        ΔⵠΔⵠⲆᐃⲆ: 344,
        ᐃⵠⲆΔᐃⵠᐃ: 345,
        ⵠΔᐃⵠΔⵠΔ: 346,
        ⵠⲆⲆᐃⲆⵠⲆⲆⲆ: 347,
        ⲆᐃΔⲆⵠⲆⲆ: 348,
        ⲆⵠⲆⲆᐃᐃΔ: 349,
        ⲆⲆⵠΔⵠⲆⲆ: 350,
        ᐃΔⵠⲆⵠᐃⵠ: 351,
        ⵠⲆᐃⵠΔⲆⲆ: 352,
        ⵠᐃᐃᐃᐃᐃⵠ: 353,
        ⵠΔᐃᐃᐃΔⵠ: 354,
        ΔΔⵠⵠⵠⲆⲆ: 355,
        ⲆᐃΔⲆⲆΔᐃ: 356,
        ΔⲆⲆΔⵠΔᐃ: 357,
        ⵠΔᐃᐃΔⵠᐃ: 358,
        ⲆⵠⵠΔⵠΔⲆ: 359,
        ᐃΔΔᐃᐃⲆᐃ: 360,
        ΔⲆⲆᐃⵠᐃΔ: 361,
        ΔⵠⵠⵠⲆᐃΔ: 362,
        ⵠⵠⵠᐃⵠΔⵠ: 363,
        ⲆⵠⲆᐃⵠⲆΔ: 364,
        ΔᐃΔⵠⲆᐃᐃ: 365,
        ⲆᐃᐃΔᐃⲆᐃ: 366,
        ⲆᐃⵠⲆᐃΔⲆ: 367,
        ⵠΔᐃΔⵠΔⲆ: 368,
        ⵠΔΔᐃᐃᐃᐃ: 369,
        ⲆⵠⲆⲆⲆᐃⵠ: 370,
        ΔⵠⵠⲆⵠᐃⲆ: 371,
        ⲆᐃⲆΔⵠΔΔ: 372,
        ⵠⲆᐃⵠⲆⲆⲆ: 373,
        ⲆⵠⵠⵠⵠⲆΔ: 374,
        ΔΔⵠⵠⵠⵠⵠ: 375,
        ΔⲆⵠΔᐃΔⵠ: 376,
        ⲆⵠⵠΔᐃⵠΔ: 377,
        ᐃⲆΔᐃᐃΔⲆ: 378,
        ΔⵠᐃᐃⲆΔⵠ: 379,
        ⲆᐃⵠⲆΔⲆⲆ: 380,
        ⵠΔⵠⵠᐃⵠᐃ: 381,
        ᐃᐃΔⲆⵠⵠⵠ: 382,
        ΔᐃⲆΔⲆΔⲆ: 383,
        ⵠⵠⵠᐃⵠⲆᐃ: 384,
        ⲆⲆⵠΔⲆᐃΔ: 385,
        ΔᐃᐃΔⲆⵠⵠ: 386,
        ᐃⵠΔᐃⵠⵠⲆ: 387,
        ⲆⲆⵠⲆΔⲆⵠ: 388,
        ᐃᐃΔⲆΔΔⲆ: 389,
        ᐃⲆᐃⲆᐃᐃᐃ: 390,
        ᐃⲆⵠᐃᐃⵠⲆ: 391,
        ⲆᐃᐃⵠΔΔᐃ: 392,
        ⵠΔⲆⲆΔΔⲆ: 393,
        ᐃⲆΔⵠΔⵠᐃ: 394,
        ⲆⲆΔᐃΔⲆⲆ: 395,
        ΔⵠΔΔᐃⵠΔ: 396,
        ⵠⲆⵠⲆⵠⵠⲆ: 397,
        ΔΔⵠⲆⵠⵠⲆ: 398,
        ⲆⲆⲆⵠᐃΔΔ: 399,
        ⲆⲆⲆᐃΔⲆⲆ: 400,
        ᐃⲆⵠᐃᐃΔⲆ: 401,
        ⲆΔΔⲆΔΔᐃ: 402,
        ⲆⲆᐃᐃⵠΔⵠ: 403,
        ΔᐃΔΔᐃΔΔ: 404,
        ᐃΔⲆᐃᐃΔᐃ: 405,
        ΔᐃΔⲆΔᐃΔ: 406,
        ᐃᐃⲆⲆⲆⵠⵠ: 407,
        ᐃᐃⵠⵠⵠⵠⵠ: 408,
        ⵠΔΔⵠᐃΔᐃ: 409,
        ⲆⵠⲆᐃΔⵠⵠ: 410,
        ΔⲆΔᐃⵠᐃΔ: 411,
        ⵠⵠⲆᐃⵠΔᐃ: 412,
        ᐃΔᐃΔΔ: 413,
        ΔⲆᐃΔᐃⵠΔⵠΔ: 414,
        ⲆΔᐃⵠⲆ: 415,
        ᐃΔⵠⲆⲆ: 416,
        ⵠⵠΔⲆᐃᐃⵠⲆⲆ: 417,
        ΔΔᐃΔⵠᐃΔ: 418,
        ΔⲆⲆᐃᐃ: 419,
        ⲆⵠⵠᐃⲆⲆΔ: 420,
        ⵠᐃⲆΔΔⲆΔ: 421,
        ⲆΔⲆⲆᐃᐃΔ: 422,
        ᐃⵠΔⵠⲆᐃΔ: 423,
        ΔᐃΔᐃᐃⲆᐃ: 424,
        ᐃΔⵠⲆⲆⵠⵠ: 425,
        ⵠᐃⵠⵠᐃⲆⵠ: 426,
        ⲆΔⵠⵠⵠΔᐃ: 427,
        ᐃΔΔΔΔΔⵠ: 428,
        ⵠᐃᐃⲆᐃⲆⲆ: 429,
        ΔᐃΔΔᐃΔⲆ: 430,
        ᐃΔΔΔⵠⵠⵠ: 431,
        ΔⲆΔΔⵠⵠᐃ: 432,
        ΔⵠⲆΔⲆⵠⲆ: 433,
        ⵠⵠᐃⲆⲆΔᐃ: 434,
        ΔΔⲆᐃΔᐃⵠ: 435,
        ΔⵠΔⵠⵠᐃᐃ: 436,
        ⵠΔᐃⵠᐃⵠⲆ: 437,
        ᐃᐃΔΔΔΔⵠ: 438,
        ΔⵠΔⲆᐃⵠᐃ: 439,
        ᐃᐃⲆⲆⲆᐃⵠ: 440,
        ⵠⵠⵠΔᐃⲆΔ: 441,
        ⵠᐃⵠⵠΔᐃⵠ: 442,
        ΔᐃᐃⲆⲆᐃᐃ: 443,
        ⲆⵠᐃΔⵠⲆⲆⵠᐃ: 444,
        ᐃⵠΔΔⵠ: 445,
        ⲆⲆᐃᐃᐃᐃⲆ: 446,
        ⵠⵠΔⵠⲆⵠΔ: 447,
        ⲆᐃⵠΔⲆⲆⵠⲆΔ: 448,
        ⲆⵠᐃⵠⲆ: 449,
        ⲆΔᐃⵠᐃ: 450,
        ΔᐃⵠᐃⵠᐃΔ: 451,
        ΔⲆᐃΔⵠⲆⵠ: 452,
        ⲆΔⵠᐃΔⵠΔ: 453,
        ᐃᐃΔᐃⵠᐃᐃ: 454,
        ᐃⲆᐃᐃᐃⲆΔ: 455,
        ᐃⲆᐃΔᐃΔⲆ: 456,
        ᐃⵠⲆⲆΔⲆⲆ: 457,
        ᐃⲆⲆⵠⲆΔⵠ: 458,
        ⵠⲆΔⵠⲆᐃᐃ: 459,
        ΔΔⵠΔᐃⵠⵠ: 460,
        ⵠⵠⵠΔΔⵠⲆ: 461,
        ΔⲆΔΔᐃⵠⵠ: 462,
        ⲆᐃᐃᐃⲆΔᐃ: 463,
        ΔᐃⲆᐃᐃᐃⵠ: 464,
        ⲆΔⵠΔⲆΔⲆ: 465,
        ΔⲆᐃᐃⲆⵠⲆ: 466,
        ΔΔΔⲆΔⲆⵠ: 467,
        ᐃΔⵠᐃΔⲆⵠ: 468,
        ᐃⵠᐃΔᐃΔᐃ: 469,
        ΔⵠⲆⵠΔⲆⵠ: 470,
        ⲆᐃⲆⲆⲆⵠΔ: 471,
        ΔᐃᐃⲆᐃⵠΔ: 472,
        ⲆᐃᐃⲆΔᐃᐃ: 473,
        ΔΔᐃΔⵠⵠⵠ: 474,
        ΔⵠᐃᐃⲆᐃⵠ: 475,
        ᐃⲆⲆᐃⵠⵠᐃ: 476,
        ᐃΔⵠᐃⵠⲆⲆ: 477,
        ΔᐃΔΔΔⲆⵠ: 478,
        ⵠᐃΔⵠⵠΔΔ: 479,
        ⲆⵠΔᐃΔᐃᐃ: 480,
        ΔᐃΔⲆᐃΔⲆ: 481,
        ΔⲆΔΔᐃΔΔ: 482,
        ⵠΔⲆⵠⲆΔᐃ: 483,
        ⵠΔΔⵠᐃⲆⲆ: 484,
        ᐃΔⵠⲆᐃᐃⵠ: 485,
        ⵠᐃⲆᐃⲆᐃⵠ: 486,
        ⵠΔⵠⵠⵠⵠΔ: 487,
        ᐃᐃᐃⲆⲆⵠⲆ: 488,
        ᐃΔᐃⵠΔᐃⵠ: 489,
        ΔᐃⵠⲆᐃⲆⵠ: 490,
        ⲆΔΔⲆΔⲆΔ: 491,
        ⲆⲆΔⵠⲆⵠⵠ: 492,
        ΔⲆΔⲆᐃⵠⵠ: 493,
        ᐃⲆⲆΔⵠΔᐃ: 494,
        ⵠΔⵠᐃⲆⲆⵠ: 495,
        ⲆᐃⲆⲆⲆⲆΔ: 496,
        ᐃΔⲆⲆⲆⵠⲆ: 497,
        ⲆΔⲆⵠⵠᐃⲆ: 498,
        ⵠⲆⵠᐃᐃᐃⵠ: 499,
        ⵠΔᐃⲆᐃΔΔ: 500,
        ⵠᐃΔᐃᐃⲆⵠ: 501,
        ΔⵠΔⵠⵠⵠΔ: 502,
        ⵠⵠⵠⲆᐃΔⲆ: 503,
        ⲆΔⵠⵠΔⲆΔ: 504,
        ᐃⲆΔᐃᐃΔᐃ: 505,
        ᐃΔⵠΔⵠⲆΔ: 506,
        ⲆΔⵠΔⲆΔⲆ: 507,
        ΔⵠⲆⲆⲆⵠᐃ: 508,
        ⵠΔᐃᐃⲆⵠⵠ: 509,
        ᐃΔⵠⲆᐃᐃᐃ: 510,
        ΔᐃⲆⲆᐃΔᐃ: 511,
        ⵠⵠΔⵠᐃⲆⵠ: 512,
        ΔⲆᐃᐃⲆΔΔ: 513,
        ΔⲆΔΔⵠⲆⲆ: 514,
        ⲆᐃⲆΔΔᐃⵠ: 515,
        ⲆᐃᐃⲆᐃΔᐃ: 516,
        ⵠⲆⵠⲆⵠⵠᐃ: 517,
        ⲆⵠⲆⵠΔⵠᐃ: 518,
        ⲆⵠⲆⲆⵠΔᐃ: 519,
        ⵠⵠⲆⵠⵠᐃⵠ: 520,
        ⲆᐃⵠΔⲆⵠᐃ: 521,
        ⲆⲆⲆⲆⲆⵠΔ: 522,
        ⵠⵠⵠΔⲆᐃᐃ: 523,
        ΔΔᐃⲆᐃⲆⵠ: 524,
        ᐃⲆᐃⵠᐃⵠⲆ: 525,
        ᐃⲆⵠⵠΔⵠᐃ: 526,
        ᐃᐃΔⲆΔᐃⲆ: 527,
        ⵠⲆⵠⲆⵠⲆⲆ: 528,
        ⵠᐃⲆⲆⵠΔⲆ: 529,
        ΔⲆᐃⲆⵠΔΔ: 530,
        ⲆᐃⲆⲆᐃᐃⵠ: 531,
        ᐃⲆΔᐃΔⵠΔ: 532,
        ⲆⵠΔᐃⲆᐃᐃ: 533,
        ΔᐃⲆⵠᐃⲆⵠ: 534,
        ᐃⲆⵠᐃⲆⲆⵠ: 535,
        ᐃᐃⲆⵠΔⵠⵠ: 536,
        ⵠᐃΔⵠⲆᐃⵠ: 537,
        ΔᐃᐃⵠⲆᐃⲆ: 538,
        ⲆΔᐃΔⵠΔⲆⲆΔ: 539,
        ⲆᐃⲆⵠⵠᐃⲆ: 540,
        ⲆᐃⵠⵠΔⲆᐃ: 541,
        ΔᐃᐃΔΔΔⲆ: 542,
        ᐃΔᐃⵠΔᐃᐃ: 543,
        ᐃⵠⲆΔΔΔᐃⵠⲆ: 544,
        POINTS: 545,
        ΔⵠⲆᐃⵠⲆⵠ: 546,
        ᐃΔΔᐃⲆᐃⲆ: 547,
        ⲆᐃⵠⵠⵠⲆᐃ: 548,
        ⵠⵠΔⵠⵠΔΔ: 549,
        ᐃᐃΔⵠΔⵠⲆ: 550,
        ᐃΔⵠⲆⲆᐃⵠ: 551,
        ⵠΔⲆΔᐃⲆⵠ: 552,
        ᐃΔⲆⵠⵠΔⵠ: 553,
        ᐃⲆⵠΔΔⵠᐃ: 554,
        ⵠΔⵠⲆΔᐃⲆ: 555,
        ΔⵠΔΔⵠΔⲆ: 556,
        ⵠΔΔⵠⲆⲆᐃ: 557,
        ᐃᐃᐃⲆΔⲆⵠ: 558,
        ΔᐃⵠⵠΔⲆᐃ: 559,
        ᐃⲆᐃᐃΔⵠᐃ: 560,
        ⵠΔΔΔᐃⵠΔ: 561,
        ᐃΔⵠᐃΔⵠⲆ: 562,
        ᐃᐃⲆΔⵠΔⵠ: 563,
        ᐃⵠⲆⵠᐃⵠⲆ: 564,
        ⵠⲆΔⲆⲆΔΔ: 565,
        ⵠΔΔΔⵠΔΔ: 566,
        ΔᐃᐃⵠⵠⲆᐃ: 567,
        ΔᐃⵠΔΔⵠⵠ: 568,
        ΔⵠⲆⲆΔⲆⵠ: 569,
        ⲆΔⲆⲆΔⲆΔ: 570,
        ⵠΔⲆΔⲆⵠⲆ: 571,
        ⲆΔᐃⲆᐃᐃⵠ: 572,
        ΔⲆⲆΔᐃᐃᐃ: 573,
        ᐃⲆᐃᐃⲆⲆⵠ: 574,
        ᐃᐃᐃⵠΔᐃᐃ: 575,
        ᐃᐃᐃⵠᐃⵠⲆ: 576,
        ᐃᐃᐃΔᐃⲆᐃ: 577,
        ΔⲆⵠⲆⵠⲆⲆ: 578,
        ⵠⵠΔⵠᐃⲆᐃ: 579,
        ᐃᐃΔΔᐃΔᐃ: 580,
        ᐃΔⲆᐃⲆΔⲆ: 581,
        ⵠⲆⲆΔΔᐃΔ: 582,
        ᐃᐃⲆᐃⲆⲆᐃ: 583,
        ΔⵠⲆⵠᐃᐃΔ: 584,
        ΔⵠⲆΔⵠⵠΔ: 585,
        ᐃᐃⲆΔᐃᐃᐃ: 586,
        ⵠΔⵠⵠᐃΔΔ: 587,
        ⵠΔᐃⵠⵠᐃᐃ: 588,
        ⲆⲆΔᐃΔᐃⵠ: 589,
        ⲆⲆΔΔⲆΔᐃ: 590,
        ᐃⲆⵠΔⵠⵠΔ: 591,
        ᐃⵠⲆᐃⵠᐃΔ: 592,
        ΔⲆⵠΔΔⵠⵠⵠⵠ: 593,
        ΔᐃⲆⲆΔᐃᐃ: 594,
        ᐃⵠΔⵠΔΔᐃᐃᐃ: 595,
        ⲆᐃⲆⵠⲆⲆΔ: 596,
        ΔⲆΔⲆⲆᐃΔⲆΔ: 597,
        ⲆⲆⲆⵠⲆΔⲆΔᐃ: 598,
        ΔⵠΔΔⵠⲆΔᐃᐃ: 599,
        ᐃᐃᐃⵠⲆⲆⲆⵠᐃ: 600,
        ᐃΔⲆᐃᐃΔⲆⵠⵠ: 601,
        ⵠⲆⲆΔΔΔⲆ: 602,
        ΔⲆⲆΔⵠ: 603,
        ⲆⵠⲆᐃⵠⵠⲆ: 604,
        ⲆΔᐃΔΔΔⲆ: 605,
        ⵠⵠⲆⵠⵠⵠᐃ: 606,
        ⲆΔⲆⲆⲆΔΔⲆΔ: 607,
        ⵠⲆⲆⲆᐃⲆⵠ: 608,
        ⵠⲆΔⵠΔⲆΔ: 609,
        ᐃᐃⵠΔⵠᐃⲆ: 610,
        ⲆᐃⵠᐃⲆᐃᐃ: 611,
        ΔᐃⲆᐃΔΔⵠ: 612,
        ⵠⲆⲆⲆⵠⲆΔ: 613,
        ΔⲆΔΔΔΔΔ: 614,
        ⲆΔⲆᐃᐃⵠⵠ: 615,
        ⵠⵠⵠΔⵠΔᐃ: 616,
        ⵠⲆΔⵠⵠΔΔ: 617,
        ⲆⲆΔⲆⲆⵠᐃ: 618,
        ⲆⵠΔⲆⵠ: 619,
        ⵠⲆΔⲆⵠ: 620,
        ⵠᐃⲆⲆⵠ: 621,
        ⵠⵠⵠⲆᐃᐃΔᐃΔ: 622,
        ⲆΔΔⲆⲆΔⲆ: 623,
        ᐃⵠᐃⵠᐃⵠΔ: 624,
        ᐃⵠᐃΔΔⵠⵠ: 625,
        ⲆⲆΔΔⵠΔΔ: 626,
        ⲆⲆΔⲆᐃᐃⲆ: 627,
        ⲆΔⲆΔΔⲆⲆ: 628,
        ΔᐃⵠⲆᐃⵠⲆ: 629,
        ᐃᐃⵠⵠⲆⲆⵠ: 630,
        ⵠᐃⲆⲆΔⵠᐃ: 631,
        ⵠⲆⲆⵠᐃᐃΔ: 632,
        ᐃⵠΔⲆΔΔⵠ: 633,
        ΔⲆⵠᐃⵠⲆΔ: 634,
        ΔⵠΔᐃΔⵠᐃ: 635,
        ΔⵠⲆⲆⵠΔᐃ: 636,
        ⵠⵠⵠⲆᐃ: 637,
        ΔⵠᐃᐃΔⲆⲆ: 638,
        ᐃᐃᐃᐃⵠⵠᐃ: 639,
        ᐃⲆΔᐃΔᐃⵠ: 640,
        ⵠΔᐃΔᐃⲆⵠ: 641,
        ᐃΔⲆΔᐃΔⵠ: 642,
        ⲆᐃⵠⵠⵠⲆⵠ: 643,
        ⵠᐃⲆΔⲆⵠᐃ: 644,
        ᐃΔΔᐃᐃᐃᐃ: 645,
        ᐃΔⵠⲆⲆΔⵠ: 646,
        ⲆⲆᐃΔΔⵠΔ: 647,
        ᐃᐃⵠᐃⲆΔⵠ: 648,
        ⵠᐃⵠⲆᐃⵠΔ: 649,
        ᐃᐃⲆⵠⲆΔᐃ: 650,
        ᐃⵠΔⵠⲆΔᐃ: 651,
        ⵠΔΔΔᐃⵠᐃ: 652,
        ᐃⲆⲆⵠⲆⵠⲆ: 653,
        ⵠⵠΔⲆⲆⵠᐃ: 654,
        ᐃⵠⲆᐃⲆᐃΔ: 655,
        ΔⵠΔᐃᐃᐃᐃ: 656,
        ⵠⲆᐃⲆⲆⲆΔ: 657,
        ⲆⵠᐃΔᐃⲆᐃ: 658,
        ᐃΔΔⵠⵠⲆΔ: 659,
        ⵠⲆⵠΔΔᐃⵠ: 660,
        ΔΔⲆΔⲆᐃⵠ: 661,
        ᐃΔΔⲆΔⲆΔ: 662,
        ⲆᐃⲆᐃΔᐃⲆ: 663,
        ΔⵠⲆⲆᐃⲆᐃ: 664,
        ⵠⲆⲆᐃᐃⲆⲆ: 665,
        ⲆⵠⲆΔⲆⲆᐃ: 666,
        ⵠⲆⲆⲆΔⵠⵠ: 667,
        ΔΔⵠⵠⲆⲆΔ: 668,
        ⲆⵠⲆᐃⲆⵠᐃ: 669,
        ΔⲆⵠⲆⲆⲆⵠ: 670,
        ΔΔⲆⵠᐃΔΔ: 671,
        ΔⵠⵠⲆⵠΔⵠ: 672,
        ΔⲆⵠΔᐃ: 673,
        ⲆⵠᐃⵠⲆⲆᐃ: 674,
        ΔᐃΔⵠⲆⲆⲆ: 675,
        ⲆΔⵠᐃΔ: 676,
        ΔᐃⲆΔⵠⲆΔΔᐃ: 677,
        ᐃΔⲆⵠΔᐃΔ: 678,
        ⵠᐃᐃⲆⵠ: 679,
        ΔⲆⲆⵠΔᐃⵠ: 680,
        ᐃᐃⵠⵠⵠᐃΔ: 681,
        ⲆⵠⵠⲆᐃⲆⵠ: 682,
        ⲆⵠⲆⵠⲆΔⲆ: 683,
        ⵠⲆᐃΔⵠⲆᐃ: 684,
        ⵠⲆⵠⵠΔΔⲆ: 685,
        ⵠᐃⲆⵠⲆⲆⵠ: 686,
        ⲆⲆⵠⵠⵠⲆᐃ: 687,
        ΔᐃⲆⵠⵠⵠⲆ: 688,
        ᐃⵠΔᐃⵠⵠᐃ: 689,
        ΔⲆΔΔⵠᐃᐃ: 690,
        ⲆⲆⲆΔᐃ: 691,
        ⲆᐃⵠⲆΔ: 692,
        ⲆᐃⲆⵠⵠ: 693,
        ΔⲆⵠᐃᐃ: 694,
        ⵠᐃⲆΔᐃ: 695,
        ⵠΔΔᐃⵠⵠⵠ: 696,
        ⵠⵠᐃΔΔⵠⲆ: 697,
        ⵠΔΔⲆⵠᐃᐃ: 698,
        ⲆΔᐃᐃΔΔⲆ: 699,
        ᐃⵠΔⵠᐃⵠⲆ: 700,
        ᐃᐃΔⵠⵠΔⲆ: 701,
        ⵠⵠⲆΔΔⵠⲆ: 702,
        ⵠᐃΔᐃⲆΔᐃ: 703,
        ᐃⵠⲆⲆⲆⵠⵠ: 704,
        ⵠⲆΔⵠᐃⵠᐃ: 705,
        ⵠⲆᐃⵠᐃΔⲆ: 706,
        ΔⵠⵠⲆⵠⵠΔ: 707,
        ⵠⲆᐃⲆΔΔⲆ: 708,
        ΔᐃⵠⵠᐃⲆΔ: 709,
        ΔΔΔⵠΔⲆⵠ: 710,
        ⲆⵠᐃᐃⵠⲆⵠ: 711,
        ΔⲆᐃᐃᐃⲆᐃ: 712,
        ΔᐃΔⲆⲆⲆᐃ: 713,
        ⲆᐃⲆⲆⵠᐃⵠ: 714,
        ⲆⲆᐃᐃⲆⵠΔ: 715,
        ⵠⵠⲆⵠᐃᐃᐃ: 716,
        ᐃᐃⵠⲆᐃⵠⲆ: 717,
        ᐃⲆⲆⲆΔΔᐃ: 718,
        ᐃⲆΔᐃⲆᐃⵠ: 719,
        ⲆⲆⲆΔⵠⵠⲆ: 720,
        ᐃΔⲆⲆΔⲆᐃᐃⲆ: 721,
        ΔⲆΔᐃⵠⵠΔ: 722,
        ΔⲆⵠᐃⵠⲆⲆ: 723,
        ⵠⲆⵠᐃΔᐃΔ: 724,
        ⵠⲆⲆΔⵠⲆⲆ: 725,
        ⵠᐃⵠⵠΔΔⵠ: 726,
        ᐃⲆⵠΔΔΔΔ: 727,
        ᐃⲆⵠᐃⵠⲆⲆ: 728,
        ⲆⲆΔⵠΔᐃᐃ: 729,
        ᐃⵠΔᐃⵠⵠΔ: 730,
        ᐃΔⵠⵠⲆⵠᐃ: 731,
        ⲆⵠᐃⵠⵠΔⲆ: 732,
        ΔΔⲆΔᐃⲆΔ: 733,
        ΔⵠΔⲆᐃΔⵠ: 734,
        ⲆⵠΔⵠⵠᐃᐃ: 735,
        ᐃΔᐃΔᐃⵠᐃ: 736,
        ⵠᐃᐃⵠⲆⲆⲆ: 737,
        ⲆΔΔⵠΔᐃⵠ: 738,
        ⵠΔᐃΔⵠᐃⲆ: 739,
        ΔⲆⲆΔⵠᐃΔ: 740,
        ⲆⲆΔⲆΔⲆⲆ: 741,
        ᐃⵠⵠᐃΔⲆⲆ: 742,
        ΔΔⲆΔΔⵠⵠ: 743,
        ⵠⵠⲆⲆᐃⲆⵠ: 744,
        ᐃⲆⵠⲆⵠᐃⵠ: 745,
        ⵠΔΔΔΔΔⵠ: 746,
        ΔⵠⲆⵠΔⵠᐃ: 747,
        ⵠᐃᐃΔΔⵠΔ: 748,
        ⵠⵠΔᐃⲆⲆⲆ: 749,
        ⲆᐃⲆⵠΔΔΔ: 750,
        ⵠᐃΔᐃᐃΔΔ: 751,
        ⲆⵠΔⵠᐃᐃⵠ: 752,
        ⲆⲆΔⵠⲆⵠᐃ: 753,
        ΔⲆΔⵠΔΔᐃ: 754,
        ᐃᐃΔᐃⵠΔⲆ: 755,
        ΔⵠΔΔⵠΔᐃ: 756,
        ΔΔᐃⲆⵠⵠΔ: 757,
        ⲆΔΔᐃΔΔⲆ: 758,
        ᐃⵠⲆⵠΔΔⲆ: 759,
        ᐃⵠⵠΔⵠⵠⲆ: 760,
        ⵠⲆⵠᐃΔⲆⲆ: 761,
        ΔᐃⲆⵠⵠⵠΔ: 762,
        ⲆᐃⲆΔᐃΔᐃ: 763,
        ᐃΔΔΔⲆᐃᐃ: 764,
        ⲆⵠΔᐃⵠⵠⵠ: 765,
        ΔⵠᐃⲆΔⵠⲆ: 766,
        ΔᐃΔⲆΔⵠᐃ: 767,
        ⵠⲆⵠⵠⲆⲆⵠ: 768,
        ΔᐃΔᐃⵠⵠⲆ: 769,
        ⵠΔΔΔΔᐃΔ: 770,
        ΔᐃⲆⲆΔΔⵠ: 771,
        ⲆΔᐃⵠⲆⲆΔ: 772,
        ⵠⵠⵠᐃΔΔΔ: 773,
        ᐃᐃⵠᐃΔΔⵠ: 774,
        ᐃΔⲆⵠΔⵠⵠ: 775,
        ⵠⲆⲆΔⲆᐃⵠ: 776,
        ⲆΔⲆⲆⵠⵠᐃ: 777,
        ᐃⵠᐃⵠⵠΔΔ: 778,
        ⵠⵠᐃΔᐃᐃᐃ: 779,
        ΔᐃᐃΔⲆᐃΔ: 780,
        ⵠΔⲆΔΔⵠⵠ: 781,
        ⲆᐃᐃᐃΔⵠΔ: 782,
        ΔΔⵠⲆⲆᐃⵠ: 783,
        ΔⲆᐃΔΔⵠⲆ: 784,
        ⲆⲆⲆΔΔⲆⲆ: 785,
        ⲆΔᐃⵠᐃⲆⲆ: 786,
        ⵠⵠⵠⲆΔⵠΔ: 787,
        ΔⲆᐃⲆⲆᐃΔ: 788,
        ⲆⵠⵠᐃᐃⵠΔ: 789,
        ΔΔᐃⲆΔⲆᐃ: 790,
        ⲆⵠⵠᐃΔΔΔ: 791,
        ΔⲆⲆⵠⲆⲆᐃ: 792,
        ΔⵠᐃⵠΔ: 793,
        ΔΔⵠᐃⲆⵠⲆ: 794,
        ᐃⲆᐃⲆΔⵠΔ: 795,
        ⵠᐃⲆⲆᐃ: 796,
        ⵠⲆⲆΔⵠⲆΔ: 797,
        ⲆⲆΔΔⵠΔⲆ: 798,
        ⵠᐃⲆΔᐃⲆᐃ: 799,
        ᐃᐃⲆⲆΔᐃⵠ: 800,
        ΔΔⲆⵠⵠΔⲆ: 801,
        ⵠΔⲆⲆⲆ: 802,
        ⲆⲆᐃΔⵠⵠΔ: 803,
        ᐃᐃᐃⲆΔᐃⲆᐃⵠ: 804,
        ΔᐃΔΔᐃᐃⵠΔⵠ: 805,
        ΔⵠⲆⲆⲆΔⵠᐃΔ: 806,
        ⵠⵠⵠᐃⲆⵠΔΔⵠ: 807,
        ⵠΔⵠΔᐃⲆᐃ: 808,
        ΔⵠᐃΔᐃⵠΔ: 809,
        ⲆᐃᐃⲆΔⵠⲆ: 810,
        ⲆⲆⲆΔᐃⲆΔ: 811,
        ⲆᐃⵠᐃⵠⲆᐃ: 812,
        ⲆᐃⵠΔⵠΔΔ: 813,
        ⵠⲆᐃⵠⲆⵠⵠ: 814,
        ΔΔⲆᐃᐃⵠⲆ: 815,
        ⵠᐃⲆᐃⵠⲆⲆ: 816,
        ⲆᐃⵠΔⵠΔᐃ: 817,
        ᐃⵠΔⵠᐃ: 818,
        ⵠⲆⵠⵠⲆ: 819,
        ⵠⵠⵠⵠⲆⲆⵠ: 820,
        ⲆⵠⵠⲆᐃΔⲆ: 821,
        ΔᐃᐃΔⵠⲆⵠ: 822,
        ᐃᐃⵠᐃΔⲆⲆ: 823,
        ᐃⵠⵠΔᐃⵠᐃ: 824,
        ᐃⵠᐃᐃⲆⲆⵠ: 825,
        ⵠΔⲆⲆⲆⵠᐃ: 826,
        ⲆΔⲆⵠⵠⲆᐃ: 827,
        ⵠᐃⲆΔⵠᐃⲆ: 828,
        ᐃⵠⵠΔᐃᐃⲆ: 829,
        ᐃᐃⲆᐃᐃᐃⵠ: 830,
        ᐃΔᐃΔⵠⲆⵠ: 831,
        ᐃⵠⲆᐃⲆΔⵠΔⵠ: 832,
        ⵠΔᐃᐃᐃᐃⲆΔΔ: 833,
        ⵠⵠᐃΔⵠᐃⲆ: 834,
        ⲆⵠⵠⵠΔⵠⲆ: 835,
        ⲆⲆᐃⵠⲆΔᐃ: 836,
        ΔᐃᐃΔⵠⵠⵠ: 837,
        ⲆΔᐃΔⲆⲆⵠ: 838,
        ⲆⵠΔΔⵠⵠⲆ: 839,
        ⲆᐃⲆⲆⵠⲆᐃ: 840,
        ΔᐃⲆⵠⲆᐃΔ: 841,
        ⵠⵠⲆΔΔⲆⵠ: 842,
        ⵠᐃΔᐃᐃᐃΔ: 843,
        ⵠⵠᐃⵠΔΔΔ: 844,
        ⲆⵠⵠΔΔⵠⲆ: 845,
        ΔΔᐃᐃⲆⲆⲆ: 846,
        ⲆⲆⲆⲆᐃᐃⲆ: 847,
        ᐃⲆⵠᐃᐃⲆⵠ: 848,
        ⲆⵠᐃᐃⵠⵠΔ: 849,
        ΔⵠⲆⲆΔᐃΔ: 850,
        ΔᐃᐃⲆΔⲆᐃ: 851,
        ΔⲆΔⲆⵠᐃᐃΔⵠ: 852,
        ᐃΔΔᐃⵠⲆᐃ: 853,
        ⵠᐃⵠᐃᐃ: 854,
        ᐃⵠΔⵠⲆⵠᐃⵠᐃ: 855,
        ⲆⵠⵠΔΔⲆΔⲆⲆ: 856,
        ⲆΔΔⲆᐃΔΔᐃΔ: 857,
        ⵠⵠⲆⲆᐃⲆᐃΔΔ: 858,
        ᐃⵠᐃⲆΔⲆΔ: 859,
        ⵠᐃⵠⵠⲆΔⲆ: 860,
        ⲆⲆΔⵠΔᐃΔ: 861,
        ᐃΔⲆⵠⲆⵠΔ: 862,
        ⲆⵠⲆⲆΔⲆⲆ: 863,
        ⵠΔⵠΔᐃⲆⵠᐃᐃ: 864,
        ⵠᐃⲆᐃⲆᐃⲆ: 865,
        ⵠⲆⲆΔⲆⵠⵠ: 866,
        ⲆⵠⵠΔⵠⵠⵠ: 867,
        Ⲇᐃⵠⵠᐃⵠⵠ: 868,
        ⲆⲆⵠⲆⲆⲆΔ: 869,
        ΔΔΔΔΔⲆΔ: 870,
        ⵠⲆᐃᐃⵠΔᐃ: 871,
        ΔΔⲆⵠⲆ: 872,
        ⵠⵠΔᐃⲆⲆⵠⵠΔ: 873,
        ⲆΔᐃᐃⵠⵠΔ: 874,
        ᐃⵠΔⲆⲆⵠΔ: 875,
        ΔⵠᐃⲆⵠΔΔ: 876,
        ᐃᐃⲆΔᐃΔⲆ: 877,
        ⵠⵠΔᐃᐃΔΔ: 878,
        ᐃⵠΔΔᐃⲆᐃ: 879,
        ⲆⲆΔⲆⲆⲆⵠ: 880,
        ⲆⲆᐃΔⵠΔΔ: 881,
        ᐃΔᐃᐃⲆⲆΔ: 882,
        ΔᐃΔΔΔⵠⲆ: 883,
        ᐃⵠᐃⲆᐃΔⲆ: 884,
        ᐃⵠᐃΔᐃΔΔ: 885,
        ⲆΔΔΔΔΔⵠ: 886,
        ᐃᐃⲆᐃⵠ: 887,
        ΔΔⵠᐃᐃΔᐃ: 888,
        ⵠᐃⲆΔᐃⲆⲆ: 889,
        ᐃⲆΔⲆⲆΔⵠ: 890,
        ⲆⵠⲆᐃⵠΔⲆ: 891,
        ⵠᐃⵠΔⲆᐃΔ: 892,
        ΔΔᐃⵠⲆⵠΔ: 893,
        ΔᐃΔᐃΔᐃᐃ: 894,
        ⲆΔⵠᐃⵠⲆⵠ: 895,
        ⵠΔⲆᐃΔⲆᐃ: 896,
        ⲆᐃⲆᐃᐃΔΔ: 897,
        ΔⵠⲆⵠⲆΔᐃ: 898,
        ⵠⵠᐃΔᐃⵠⵠ: 899,
        ⲆⲆⲆⵠⵠᐃΔ: 900,
        ⵠⲆᐃᐃⲆⵠᐃ: 901,
        ᐃⵠᐃⲆᐃᐃⲆ: 902,
        ⵠΔⵠⲆⵠΔΔ: 903,
        ⵠⲆⵠΔΔᐃΔ: 904,
        ΔᐃⵠⵠⵠΔΔ: 905,
        ⲆⲆΔⲆⵠⵠᐃ: 906,
        ⵠⲆⲆⲆΔⲆⲆ: 907,
        ΔΔᐃᐃⲆᐃⲆ: 908,
        ΔᐃΔⵠΔⲆᐃ: 909,
        ⵠⵠⵠΔⵠⲆᐃ: 910,
        ᐃⵠΔᐃΔⲆⵠ: 911,
        ⲆᐃΔⲆᐃⵠᐃ: 912,
        ᐃᐃΔᐃⲆⲆΔ: 913,
        ΔᐃⵠⲆⵠΔΔΔⵠ: 914,
        ⵠⲆᐃⵠⵠⵠᐃⵠⲆ: 915,
        ⵠΔᐃΔΔⲆᐃⵠᐃ: 916,
        ⵠⵠΔⵠⵠⵠⵠᐃⲆ: 917,
        ⵠΔⲆⵠⵠⲆⲆ: 918,
        ΔⲆⲆᐃᐃΔⲆ: 919,
        ᐃⵠⵠⵠⲆ: 920,
        ⵠⲆⲆⲆΔᐃⲆ: 921,
        ⵠⵠⵠΔΔⵠᐃ: 922,
        ΔᐃΔΔⵠⲆΔ: 923,
        ᐃᐃΔᐃᐃⲆᐃ: 924,
        ⲆΔᐃⵠⲆᐃⵠ: 925,
        ⵠⵠΔⵠⵠⵠΔ: 926,
        ΔΔᐃΔⲆⵠⲆ: 927,
        ΔᐃⵠΔⲆᐃΔ: 928,
        ᐃⵠᐃⲆⲆⵠᐃ: 929,
        ᐃⵠᐃⵠⵠᐃⵠ: 930,
        ΔᐃᐃⲆΔΔΔ: 931,
        ᐃⲆⵠⲆⲆⵠΔ: 932,
        ⵠⲆⲆⵠΔⲆⲆ: 933,
        ᐃⵠΔᐃᐃᐃⵠ: 934,
        ⲆⵠⲆΔⵠᐃⵠ: 935,
        ⵠᐃⲆⲆⲆⵠΔ: 936,
        ⵠⲆⵠᐃⵠΔⲆ: 937,
        ᐃⵠᐃᐃᐃⲆΔ: 938,
        ⵠⲆⵠΔⵠΔⵠ: 939,
        ΔⵠⲆⲆᐃⲆⲆᐃⲆ: 940,
        ΔⲆⲆⵠΔ: 941,
        ᐃᐃΔᐃᐃⵠⲆ: 942,
        ΔⲆᐃᐃᐃⵠⲆ: 943,
        ΔⲆⵠⲆΔΔⵠ: 944,
        ΔⲆⲆⵠᐃⵠⵠ: 945,
        ⲆΔⵠΔΔⲆᐃ: 946,
        ΔⲆⵠⵠᐃⲆᐃ: 947,
        ΔⲆⵠⵠⵠᐃⵠ: 948,
        ⲆⲆⵠΔᐃⲆΔ: 949,
        ⲆΔⲆⵠΔᐃⲆ: 950,
        ⲆᐃⲆᐃⲆⵠΔ: 951,
        ⵠⵠⵠⲆⲆⲆΔ: 952,
        ᐃⲆΔΔⲆⵠΔ: 953,
        ⵠⲆⲆΔᐃᐃᐃ: 954,
        ⲆⵠⲆΔᐃⵠᐃ: 955,
        ΔᐃΔⵠᐃᐃⲆ: 956,
        ⲆⵠⲆΔᐃⲆⵠ: 957,
        ᐃᐃⵠΔⵠᐃΔ: 958,
        ᐃⲆⵠΔᐃⵠΔ: 959,
        ᐃΔΔⲆⲆⲆⲆ: 960,
        ⵠⲆⵠᐃⲆⲆⲆ: 961,
        ⲆⲆᐃⵠⲆΔⵠ: 962,
        ΔᐃⲆΔΔⵠⵠ: 963,
        ⲆⲆΔᐃⲆⲆⵠΔᐃ: 964,
        ᐃΔᐃΔᐃᐃⲆ: 965,
        ⲆΔⲆⵠⲆⲆΔ: 966,
        ᐃΔⵠⲆⲆⵠᐃ: 967,
        ᐃᐃⵠⵠᐃᐃᐃ: 968,
        ᐃⲆⵠΔΔⵠΔ: 969,
        ᐃⵠⲆΔᐃⲆᐃ: 970,
        ⲆⲆᐃΔⲆΔⵠ: 971,
        ΔⲆⵠΔⵠᐃⲆ: 972,
        ΔᐃΔΔⲆᐃⲆ: 973,
        ⵠΔⲆᐃᐃⲆᐃ: 974,
        ⲆⲆⲆΔⲆΔᐃ: 975,
        ⲆⲆᐃⲆΔΔᐃ: 976,
        ᐃᐃⲆΔΔⵠΔ: 977,
        ᐃᐃᐃⵠΔⵠⵠ: 978,
        ⲆⵠᐃΔΔΔⵠ: 979,
        ⲆΔⲆⲆΔⲆᐃ: 980,
        ᐃᐃΔᐃⲆⵠⵠ: 981,
        ΔⵠⲆΔΔⲆΔ: 982,
        ΔΔⲆⵠⲆᐃΔ: 983,
        ⲆᐃⵠΔᐃᐃⲆ: 984,
        ⲆΔΔΔᐃⲆⲆ: 985,
        ΔⲆⵠΔᐃΔⲆ: 986,
        ⲆᐃΔⲆᐃΔⵠ: 987,
        ᐃⵠΔΔⵠⵠⲆ: 988,
        ⲆᐃⵠⲆᐃ: 989,
        ⵠⵠᐃⲆΔΔⵠ: 990,
        ΔⲆΔΔⵠΔⵠ: 991,
        ΔⵠᐃⲆⲆΔᐃ: 992,
        ΔⲆΔⲆⵠΔⵠ: 993,
        ⵠⵠᐃΔⲆΔⲆ: 994,
        ⲆΔΔᐃⲆⵠΔ: 995,
        ᐃᐃᐃⲆⵠⲆⲆ: 996,
        ᐃΔᐃᐃⲆⵠⲆ: 997,
        ⵠᐃΔᐃΔⵠᐃ: 998,
        ΔΔⵠⲆᐃⵠⵠ: 999,
        ΔⵠᐃⲆᐃⲆⵠ: 1000,
        ⲆⵠΔΔⲆⵠᐃ: 1001,
        ᐃⵠⲆⲆⵠⵠⲆ: 1002,
        ⵠⵠᐃⲆⲆⲆⲆ: 1003,
        ⲆⵠΔΔⲆΔᐃ: 1004,
        ᐃⵠⵠⵠΔⲆᐃ: 1005,
        ⵠᐃⲆΔᐃⲆⵠ: 1006,
        ⲆΔᐃΔΔⵠΔ: 1007,
        ᐃᐃⵠΔⲆⲆⲆ: 1008,
        ᐃᐃΔΔⵠΔⵠ: 1009,
        ᐃⵠΔᐃᐃᐃᐃ: 1010,
        ᐃΔⲆⲆⵠⲆᐃ: 1011,
        ⵠᐃⲆΔⲆⵠⵠ: 1012,
        ΔⲆΔΔⲆⵠΔ: 1013,
        ⲆⲆΔⵠⲆΔⵠ: 1014,
        ᐃⵠΔΔᐃⵠⲆ: 1015,
        ⲆⲆᐃᐃⲆⲆⵠ: 1016,
        ⲆᐃⲆⵠᐃⵠⵠ: 1017,
        ⲆⵠⲆΔⵠⵠⲆ: 1018,
        ΔⲆᐃⲆⲆⵠⲆ: 1019,
        ⲆΔᐃΔⲆⵠΔ: 1020,
        ΔⲆⲆᐃⲆⵠⵠ: 1021,
        ⵠΔΔᐃΔΔᐃ: 1022,
        ΔⵠΔᐃΔΔᐃ: 1023,
        Ⲇⵠᐃᐃ: 1024,
        ⲆΔⵠΔ: 1025,
        ⵠⵠΔᐃⵠΔᐃ: 1026,
        ⲆⵠᐃⲆΔᐃΔ: 1027,
        ⲆⵠᐃΔΔⲆⵠ: 1028,
        ⲆΔⲆⲆⲆᐃⲆ: 1029,
        ΔⲆⲆᐃΔⵠⵠ: 1030,
        ⵠⲆⲆᐃᐃⲆⵠ: 1031,
        ⲆᐃΔⵠⵠΔⵠ: 1032,
        ᐃⲆᐃᐃⲆ: 1033,
        ⵠⲆⲆⵠΔΔΔ: 1034,
        ⵠⲆⵠⲆᐃ: 1035,
        ⲆⵠᐃⵠⵠⲆⵠ: 1036,
        ⲆᐃᐃⲆⲆ: 1037,
        ⵠΔᐃⵠᐃΔΔ: 1038,
        ΔΔᐃᐃⲆ: 1039,
        ᐃⵠᐃΔⲆⵠΔ: 1040,
        ⵠⵠⵠΔΔ: 1041,
        ⲆⲆⵠΔΔ: 1042,
        ⵠΔΔᐃΔᐃᐃ: 1043,
        ᐃᐃΔⵠⲆⲆⵠ: 1044,
        ⵠⵠᐃⲆⵠᐃᐃ: 1045,
        ⵠᐃⲆⵠⲆⲆⲆ: 1046,
        ᐃⵠⲆⵠΔᐃⵠ: 1047,
        ΔⲆⵠᐃΔᐃⵠ: 1048,
        ⵠΔΔⵠᐃⲆΔ: 1049,
        ᐃᐃⲆⲆΔⵠⵠ: 1050,
        ⲆⲆΔⲆⵠⲆᐃ: 1051,
        ⲆⲆⲆΔΔ: 1052,
        ⵠΔᐃΔΔⵠⲆ: 1053,
        ᐃΔⲆΔᐃ: 1054,
        ᐃΔⲆΔⵠᐃΔ: 1055,
        ΔᐃⵠᐃⲆⵠᐃ: 1056,
        ⲆⵠΔᐃⲆⵠⲆ: 1057,
        ⵠⵠᐃⵠⵠⵠⵠ: 1058,
        ΔΔΔⵠⲆⵠⵠ: 1059,
        ⵠⵠⲆᐃΔᐃⵠ: 1060,
        ⲆⵠΔⵠⲆΔΔΔⵠ: 1061,
        ⲆⲆⵠⵠΔᐃΔ: 1062,
        ᐃᐃⲆⵠⲆΔΔ: 1063,
        ⲆΔΔΔᐃᐃΔⵠᐃ: 1064,
        ΔΔⵠᐃⲆᐃⵠ: 1065,
        ⲆⵠⵠᐃⵠᐃⲆ: 1066,
        ⲆΔΔᐃᐃΔⵠ: 1067,
        ᐃⲆΔΔⲆⵠⵠ: 1068,
        ΔⲆᐃⵠⲆ: 1069,
        ⲆᐃΔⲆⵠⵠᐃ: 1070,
        ᐃⵠΔᐃⵠᐃⲆ: 1071,
        ⲆᐃⲆΔⲆΔⵠ: 1072,
        ⲆⵠᐃΔⵠⵠⲆ: 1073,
        ⵠᐃⵠΔⵠᐃᐃ: 1074,
        ⵠⵠΔⵠᐃⵠΔ: 1075,
        ⵠⲆᐃᐃᐃᐃᐃ: 1076,
        ΔᐃⵠⵠⲆᐃⵠ: 1077,
        ⲆΔⲆⲆⲆⵠⲆ: 1078,
        ⵠⲆΔΔΔⲆᐃ: 1079,
        ⲆⲆⵠⲆΔΔΔ: 1080,
        ⲆⵠⵠᐃⲆⲆⲆ: 1081,
        ᐃⵠⲆᐃⲆᐃⲆ: 1082,
        ΔΔⲆⲆⵠᐃΔ: 1083,
        ᐃⲆᐃΔΔ: 1084,
        ⵠⵠⲆⲆΔΔⲆ: 1085,
        ΔⲆᐃⲆⲆⵠΔ: 1086,
        ⲆΔⵠᐃᐃⲆⲆ: 1087,
        ᐃΔⵠΔΔΔⵠ: 1088,
        ⲆⲆⵠᐃᐃΔⲆ: 1089,
        ⲆⲆᐃΔⲆⵠᐃ: 1090,
        ᐃᐃᐃⲆⵠⵠⵠ: 1091,
        ⲆᐃⵠΔⲆᐃΔ: 1092,
        ⵠΔΔᐃⲆⵠⲆ: 1093,
        ᐃΔⲆⵠΔⲆⲆ: 1094,
        ⵠⵠⵠᐃⲆⵠⲆ: 1095,
        ΔⵠᐃⲆⵠⵠⵠ: 1096,
        ⲆᐃΔⵠⲆΔΔ: 1097,
        ⲆᐃᐃΔⵠⲆⲆ: 1098,
        ⲆΔⵠⲆⲆ: 1099,
        ᐃⲆᐃᐃⵠΔⵠ: 1100,
        ⲆΔᐃᐃⲆΔΔ: 1101,
        ⵠΔⵠᐃⲆⵠⵠ: 1102,
        ᐃᐃᐃⵠᐃⲆⵠ: 1103,
        ᐃΔⲆⲆⵠⵠⵠ: 1104,
        ᐃⲆⲆⲆᐃᐃⵠ: 1105,
        ⵠⲆⵠᐃⲆⲆᐃ: 1106,
        ⲆΔᐃⲆⵠᐃⵠ: 1107,
        ⲆⵠⵠᐃⲆⵠΔ: 1108,
        ⲆⲆᐃⵠΔⲆᐃ: 1109,
        ⲆⲆᐃΔΔⲆΔ: 1110,
        ⵠⲆᐃⲆⲆⵠⵠ: 1111,
        ⵠᐃⵠⵠⲆⵠΔ: 1112,
        ⲆᐃⵠΔΔᐃⵠ: 1113,
        ΔⲆΔⲆⲆⵠᐃ: 1114,
        ᐃⵠⵠⵠΔᐃΔ: 1115,
        ΔⵠΔⲆᐃΔΔ: 1116,
        ⵠⲆΔⵠⲆⵠᐃ: 1117,
        ΔⵠⲆΔᐃᐃⲆ: 1118,
        ⵠⵠᐃΔᐃᐃΔ: 1119,
        ⵠⲆⵠᐃⵠ: 1120,
        ᐃΔΔⵠΔΔᐃ: 1121,
        ⵠᐃᐃΔⵠⲆΔ: 1122,
        ΔⵠᐃΔⲆⲆᐃ: 1123,
        ⵠⵠⲆⲆΔᐃⲆ: 1124,
        ᐃⲆⵠᐃⵠᐃΔ: 1125,
        ᐃᐃᐃᐃⵠΔᐃ: 1126,
        ᐃΔΔᐃΔΔΔ: 1127,
        ΔⵠⵠᐃΔⲆΔ: 1128,
        ᐃᐃΔᐃᐃⲆⵠ: 1129,
        ᐃⲆΔᐃⵠⵠᐃ: 1130,
        ⵠᐃⲆⲆΔᐃᐃ: 1131,
        ᐃⵠᐃⵠⲆΔⲆ: 1132,
        ⲆⲆᐃΔᐃⲆⵠ: 1133,
        ⲆᐃⲆΔΔⲆΔ: 1134,
        ΔᐃⵠΔⵠⲆⲆ: 1135,
        ᐃⵠᐃⵠⲆⲆΔ: 1136,
        ᐃᐃⲆΔΔⵠⵠ: 1137,
        ΔⵠᐃⲆΔⲆᐃ: 1138,
        ΔᐃΔⵠΔⵠΔ: 1139,
        ΔᐃΔᐃⲆⲆᐃ: 1140,
        ΔⵠᐃΔⲆⵠⵠ: 1141,
        ⲆⵠⵠΔⲆⵠΔ: 1142,
        ᐃΔᐃΔⲆᐃΔ: 1143,
        ΔⵠΔΔⵠⲆⲆ: 1144,
        ⲆⲆΔⵠⲆΔΔ: 1145,
        ΔᐃΔⵠΔΔᐃ: 1146,
        ΔⲆᐃᐃⲆᐃᐃ: 1147,
        ᐃᐃᐃᐃᐃᐃⲆ: 1148,
        ΔᐃΔΔᐃⲆⵠ: ["#E9CF96", "#144940"],
        ΔⵠΔⲆΔⵠΔ: 1149,
        ⵠΔⵠⲆⵠⲆΔ: 1150,
        ΔⵠᐃΔΔⵠᐃ: 1151,
        ΔΔᐃΔᐃΔⲆ: 1152,
        ⵠⲆΔᐃΔᐃⲆ: 1153,
        ᐃⵠⵠⵠΔⲆⵠ: 1154,
        ᐃΔⵠΔⵠᐃⵠ: 1155,
        ⲆⵠⵠΔⵠ: 1156,
        ⵠⲆᐃⲆΔΔΔ: 1157,
        ⲆᐃⵠⲆΔᐃⲆ: 1158,
        ⲆᐃⵠⵠᐃΔᐃ: 1159,
        ᐃⲆⲆΔⵠⵠⲆ: 1160,
        ΔᐃΔΔΔⲆᐃ: 1161,
        ⲆⲆΔᐃⵠΔⵠ: 1162,
        ΔⲆᐃⲆᐃⵠΔ: 1163,
        ΔᐃⵠΔⵠᐃⵠ: 1164,
        ⲆΔᐃᐃⲆΔⲆ: 1165,
        ⵠᐃᐃⲆΔⲆΔ: 1166,
        ⵠᐃⲆΔΔⵠΔ: 1167,
        ⲆⵠⲆᐃᐃΔΔ: 1168,
        ᐃᐃᐃⵠᐃᐃⲆ: 1169,
        ᐃΔΔⵠⵠⲆⲆ: 1170,
        ⲆⲆⲆΔᐃⵠᐃ: 1171,
        ⲆΔΔΔⲆᐃᐃ: 1172,
        ΔΔⲆⵠΔⵠΔ: 1173,
        ΔΔᐃᐃⲆΔΔ: 1174,
        ⲆΔΔⵠⲆⲆⵠ: 1175,
        ᐃⵠᐃⲆⵠⵠᐃ: 1176,
        ⵠⵠΔΔᐃⲆⵠ: 1177,
        ΔᐃΔⲆⲆⲆΔ: 1178,
        ⵠΔⲆΔΔᐃⲆ: 1179,
        ᐃⲆⲆⵠⲆⲆⲆ: 1180,
        ΔⵠΔΔΔΔΔ: 1181,
        ᐃⲆΔΔⵠⵠᐃ: 1182,
        ᐃᐃⲆⵠΔΔΔ: 1183,
        ᐃᐃΔᐃⲆΔⲆ: 1184,
        ⲆⵠⵠΔᐃᐃΔ: 1185,
        ⲆⲆΔᐃᐃᐃⵠ: 1186,
        ᐃᐃⲆΔⲆᐃΔ: 1187,
        ⲆⲆⵠⵠⲆⵠⲆ: 1188,
        ᐃⲆΔⲆΔⵠⲆ: 1189,
        ⲆⲆᐃⲆⲆⲆᐃ: 1190,
        ⵠᐃΔΔΔⵠⲆ: 1191,
        ᐃᐃΔᐃⵠᐃΔ: 1192,
        ΔⵠⲆⵠⲆΔⵠ: 1193,
        ⵠΔⲆⲆΔᐃΔ: 1194,
        ⵠΔⲆⵠᐃⵠⲆ: 1195,
        ΔᐃᐃⲆⵠΔᐃ: 1196,
        ⵠⲆΔⲆᐃⲆΔ: 1197,
        ⲆⲆᐃᐃⵠᐃⲆ: 1198,
        ΔⲆⲆⲆᐃⲆⲆ: 1199,
        ᐃⵠⲆΔⵠᐃᐃ: 1200,
        ⲆⲆΔⵠⵠⲆⵠ: 1201,
        ΔᐃⵠΔΔΔⲆ: 1202,
        ⲆⵠⲆΔΔᐃⵠ: 1203,
        ⲆΔΔΔⲆⲆᐃ: 1204,
        ⵠⵠᐃᐃΔᐃⲆ: 1205,
        ᐃΔᐃⲆΔⵠΔ: 1206,
        ᐃⲆᐃⵠⵠᐃΔ: 1207,
        ΔΔΔⲆⲆΔᐃ: 1208,
        ᐃΔⲆⲆⲆΔⲆ: 1209,
        ⵠⲆᐃᐃⲆᐃⲆ: 1210,
        ΔΔΔⵠΔⵠⵠ: 1211,
        ⲆΔΔⲆᐃᐃᐃ: 1212,
        ⵠΔᐃⵠΔΔΔ: 1213,
        ⲆᐃⵠΔΔⵠⲆ: 1214,
        ⲆᐃᐃⵠⲆᐃΔ: 1215,
        ⲆᐃᐃΔΔΔΔ: 1216,
        ⵠΔⵠᐃⵠΔΔ: 1217,
        ⵠΔⵠΔⲆ: 1218,
        ᐃᐃᐃΔⵠΔⲆ: 1219,
        ΔΔⵠⲆⵠ: 1220,
        ⵠⲆⵠΔⵠⵠΔ: 1221,
        ⲆⲆⲆⵠⲆΔΔ: 1222,
        ⲆΔΔⵠⲆⵠᐃ: 1223,
        ᐃⵠᐃⲆⲆⲆⲆ: 1224,
        ⵠⵠΔΔᐃᐃᐃ: 1225,
        ΔᐃⵠⲆⵠᐃⲆ: 1226,
        ᐃΔⵠΔΔⲆᐃ: 1227,
        ᐃΔⲆΔⲆΔⲆ: 1228,
        ⵠΔⵠⲆⵠΔⵠ: 1229,
        ⵠⲆⲆᐃΔⲆⲆ: 1230,
        ⲆⵠΔᐃᐃΔΔ: 1231,
        ⲆⲆⵠᐃⲆᐃⵠ: 1232,
        ΔΔⵠⲆⵠⲆΔ: 1233,
        ΔⲆᐃΔᐃᐃⵠ: 1234,
        ⵠⵠΔΔⵠⲆᐃ: 1235,
        ᐃΔⲆⲆⲆᐃⲆ: 1236,
        ᐃⵠⲆΔⲆᐃᐃ: 1237,
        Δᐃⵠᐃⵠᐃⵠ: 1238,
        ⲆΔᐃᐃⵠⲆᐃ: 1239,
        ⲆⵠΔⵠⲆⵠΔ: 1240,
        ⵠᐃⲆⵠΔⵠⵠ: 1241,
        ᐃᐃⵠⲆⲆᐃⵠ: 1242,
        ⵠⵠⲆᐃΔⲆⵠ: 1243,
        ᐃΔⲆⲆⵠᐃⵠ: 1244,
        ⲆΔⲆⵠⲆⵠⵠ: 1245,
        ΔⲆⲆⵠⲆΔΔ: 1246,
        ᐃᐃⵠᐃⲆΔᐃ: 1247,
        ᐃⵠⵠᐃΔⵠⲆ: 1248,
        ΔⲆᐃⲆΔΔⲆ: 1249,
        ΔΔⲆⵠⵠⲆⵠ: 1250,
        ᐃⵠᐃᐃⵠⵠΔ: 1251,
        ᐃᐃᐃΔᐃΔⵠ: 1252,
        ΔⵠⲆⵠⵠⲆᐃ: 1253,
        ΔᐃⲆⵠΔⵠⵠ: 1254,
        ⵠΔⵠᐃᐃⵠᐃ: 1255,
        ᐃⲆⵠᐃΔⲆⲆ: 1256,
        ΔᐃΔⲆⲆᐃⲆ: 1257,
        Ⲇᐃᐃⵠⵠⵠᐃ: 1258,
        ΔᐃᐃΔᐃΔⲆ: 1259,
        ⵠᐃΔⲆⵠΔⵠ: 1260,
        ⵠᐃᐃⲆᐃᐃᐃ: 1261,
        ᐃⵠᐃⵠⵠⲆⲆ: 1262,
        ⵠⵠᐃⵠⲆⵠΔ: 1263,
        ⵠⲆⲆⲆᐃⲆᐃ: 1264,
        ⲆΔⵠΔⲆᐃⲆ: 1265,
        ⲆᐃⵠⲆⵠⵠΔ: 1266,
        ⲆⲆᐃᐃΔⲆⲆ: 1267,
        ⲆΔⲆᐃᐃᐃᐃ: 1268,
        ⵠΔᐃᐃᐃⵠᐃ: 1269,
        ⵠⲆⵠᐃᐃⲆⵠ: 1270,
        ᐃΔΔⵠⵠᐃᐃ: 1271,
        ΔⵠⵠⲆΔᐃⲆ: 1272,
        ᐃⵠⲆⵠⵠᐃⲆ: 1273
    };
    const Ir = 20;
    const Jr = 19;
    const Kr = 15;
    Er = 0;
    const Mr = 14;
    const Nr = 10;
    const Or = 100;
    var Pr = {
        ⲆΔⲆⵠⵠ: 0,
        ⲆⲆΔⲆΔ: 1,
        ΔᐃⲆΔΔ: 2,
        ᐃⵠⲆΔΔ: 3,
        ⵠΔΔⵠᐃ: 4,
        ΔⵠⲆΔΔ: 5,
        ⵠᐃᐃᐃⲆ: 6,
        ⲆⵠᐃⵠΔ: 7,
        ᐃⲆⵠΔⵠ: 8,
        ⲆΔΔⲆᐃ: 9,
        ⵠⲆⲆⵠᐃ: 10,
        ⲆⲆᐃΔⲆ: 11,
        ΔΔᐃⵠΔ: 12,
        ΔΔᐃΔⵠ: 13,
        ᐃΔⲆⵠⵠ: 14,
        ᐃΔⵠⵠᐃ: 15,
        ⲆΔⲆΔᐃ: 16,
        ΔⵠⵠᐃΔ: 17,
        ᐃⲆⵠⲆΔ: 18,
        ⵠⵠᐃᐃᐃ: 19,
        ΔⲆᐃᐃⵠ: 20,
        ΔᐃΔᐃΔ: 21,
        ΔⵠⲆΔᐃ: 22,
        ⵠⲆΔΔᐃ: 23,
        ⲆⵠⲆⲆⲆ: 24,
        ⵠΔΔⲆᐃ: 25,
        ᐃⵠⲆΔⲆ: 26,
        ᐃⲆⵠⵠΔ: 27,
        ΔΔᐃᐃⵠ: 28,
        ⵠΔᐃᐃᐃ: 29,
        ⲆᐃⲆΔᐃ: 30,
        ᐃⵠΔᐃⵠ: 31,
        ⵠⵠᐃᐃⵠ: 32,
        ΔⵠᐃⵠⲆ: 33,
        ⵠᐃΔᐃᐃ: 34,
        Ⲇⵠⵠᐃᐃ: 35,
        ⲆᐃⵠⵠⲆ: 36,
        ⲆᐃⵠΔᐃ: 37,
        ᐃΔΔᐃⵠ: 38,
        ᐃⵠⲆⵠΔ: 39,
        ᐃᐃⲆᐃᐃ: 40,
        ⲆΔΔᐃⲆ: 41,
        ⲆᐃⲆΔⲆ: 42,
        ᐃΔΔⵠΔ: 43,
        ⵠⵠΔΔΔ: 44,
        ⵠᐃⲆⵠᐃ: 45,
        ⵠⲆᐃⲆᐃ: 46,
        ᐃΔΔΔⵠ: 47,
        ⲆΔⵠᐃⲆ: 48,
        ᐃΔᐃⵠⵠ: 49,
        ⵠⲆⵠⵠΔ: 50,
        ᐃᐃⵠΔᐃ: 51,
        ᐃᐃΔⵠⲆ: 52,
        ⲆΔⲆΔΔ: 53,
        ΔᐃⲆΔᐃ: 54,
        ᐃᐃⲆᐃΔ: 55,
        ⵠⵠⲆᐃᐃ: 56,
        ⵠⲆᐃᐃᐃ: 57,
        ᐃΔΔᐃⲆ: 58,
        ΔΔΔⵠⲆ: 59,
        ᐃⲆⵠᐃⵠ: 60,
        ᐃᐃⲆⲆΔ: 61,
        ⵠⲆᐃᐃΔ: 62,
        ᐃⲆΔⵠᐃ: 63,
        ⵠΔⲆⵠⲆ: 64,
        ⲆⵠⲆᐃⵠ: 65,
        ΔᐃⵠΔᐃ: 66,
        ⵠⵠⲆⵠΔ: 67,
        ΔⵠⲆΔⵠ: 68,
        ᐃⵠⲆΔᐃ: 69,
        ᐃⲆⲆⲆᐃ: 70,
        ΔΔᐃΔΔ: 71,
        ᐃⵠᐃⲆᐃ: 72,
        ⲆᐃⵠΔⲆ: 73,
        ⵠᐃⵠᐃΔ: 74,
        ⲆᐃΔⲆᐃ: 75,
        ᐃⵠⵠᐃᐃ: 76,
        Δⵠᐃⵠᐃ: 77,
        ⲆⲆⵠⵠⵠ: 78,
        ⲆΔⲆⲆΔ: 79,
        ⲆⲆᐃᐃᐃ: 80,
        ⵠΔⵠⵠⵠ: 81,
        ᐃⲆΔΔⲆ: 82,
        ᐃⲆⵠᐃⲆ: 83,
        ΔᐃⲆᐃⲆ: 84,
        ⵠⲆⲆᐃᐃ: 85,
        ⲆⵠⵠᐃΔ: 86,
        ⲆΔΔΔⵠ: 87,
        ΔᐃⲆⲆΔ: 88,
        ⲆⲆΔⵠⲆ: 89,
        ΔⲆⲆΔᐃ: 90,
        ᐃᐃⵠⲆΔ: 91,
        ⲆⵠᐃΔⲆ: 92,
        Ⲇⵠᐃᐃᐃ: 93,
        ΔⲆⲆᐃⵠ: 94,
        ⵠⵠᐃᐃΔ: 95,
        ⵠᐃΔⲆⵠ: 96,
        ⵠᐃⵠⵠᐃ: 97,
        ⲆΔᐃⲆᐃ: 98,
        ᐃⲆΔⲆⲆ: 99,
        ⲆΔⵠᐃ: 100,
        ᐃⲆⵠⲆⵠ: 101,
        ΔⵠᐃⲆⲆ: 102,
        ΔⵠΔᐃⵠ: 103,
        ⲆΔΔⲆⵠ: 104,
        ᐃⲆⲆΔⲆ: 105,
        ⲆᐃⲆΔⵠ: 106,
        ⲆⵠⲆⲆᐃ: 107,
        ⵠᐃⲆⲆΔ: 108,
        ᐃⵠᐃᐃᐃ: 109,
        ᐃⲆᐃΔⵠ: 110,
        ⵠᐃΔⵠΔ: 111,
        ᐃⲆⵠᐃⵠⵠᐃ: 112,
        ᐃΔⲆⲆΔⲆᐃ: 113,
        ⵠⲆΔⵠΔ: 114,
        ⲆⵠᐃᐃΔ: 115,
        ⵠⵠΔᐃᐃ: 116,
        ⲆᐃᐃΔⲆ: 117,
        ᐃⵠΔⲆⵠ: 118,
        ΔⲆΔᐃᐃ: 119,
        ⲆΔⵠΔⲆ: 120,
        ⵠⵠⵠⵠⵠ: 121,
        ⲆᐃⲆⲆⵠ: 122,
        ᐃⵠΔⵠΔ: 123,
        ΔᐃⵠΔΔ: 124,
        ᐃΔΔᐃᐃ: 125,
        ᐃⲆΔᐃⵠ: 126,
        ⲆⲆⵠⲆΔ: 127,
        ΔⵠΔⲆΔ: 128,
        ΔⲆᐃΔΔ: 129,
        ⵠΔΔΔΔ: 130,
        ᐃᐃᐃΔⵠ: 131,
        ⵠⵠΔᐃⲆ: 132,
        ⲆⵠⲆΔΔ: 133,
        ⲆᐃΔⲆⵠ: 134,
        ⲆⵠΔᐃΔ: 135,
        ᐃⲆⲆᐃᐃ: 136,
        ΔⵠⲆⵠⲆ: 137,
        ⲆᐃᐃⵠΔ: 138,
        ⵠΔⵠⲆᐃ: 139,
        ⵠΔⵠᐃⲆ: 140,
        ᐃⵠⵠΔⵠ: 141,
        ⵠᐃⲆᐃⵠ: 142,
        ᐃᐃⵠⵠΔ: 143,
        ⲆᐃⲆⲆᐃ: 144,
        ⵠᐃⵠⲆΔ: 145,
        ΔᐃΔⲆᐃ: 146,
        ⲆᐃΔᐃΔ: 147,
        ᐃⵠΔΔΔ: 148,
        ᐃⵠⵠⲆⲆ: 149,
        ⵠᐃⵠⲆᐃ: 150,
        ⲆⵠΔⲆΔ: 151,
        ΔⲆⵠᐃⵠ: 152,
        ⲆⵠΔⵠΔ: 153,
        ᐃΔΔΔΔ: 154,
        ⲆⲆᐃⲆⵠ: 155,
        ⵠⲆⵠⲆΔ: 156,
        ⲆᐃᐃⲆⵠ: 157,
        ΔⲆⲆⵠⵠ: 158,
        ⵠΔᐃⲆᐃ: 159,
        Δⵠⵠⵠᐃ: 160,
        ⲆΔⲆᐃΔ: 161,
        ΔⲆⵠΔⵠ: 162,
        ΔᐃΔⲆⵠ: 163,
        ᐃᐃᐃᐃᐃ: 164,
        ⲆΔᐃΔᐃ: 165,
        ⵠⵠⲆⵠᐃ: 166,
        ΔΔΔΔΔ: 167,
        ⲆⵠΔⲆᐃ: 168,
        ᐃⲆΔᐃΔ: 169,
        ⵠⵠΔⲆΔ: 170,
        ⲆΔᐃⵠΔ: 171,
        ⲆΔⵠⲆᐃ: 172,
        ᐃΔⵠⵠΔ: 173,
        ΔΔⲆΔⵠ: 174,
        ᐃⵠⵠᐃⲆ: 175,
        ⵠⲆᐃΔᐃ: 176
    };
    const Qr = Ih;
    const Rr = 0;
    const Sr = 18;
    const Tr = 12;
    function Ur(a) {
        const b = Hf.setInterval;
        const c = b;
        const d = function () {
            b(d, 2356);
            c(d, 8909);
        };
        d();
    }
    const Vr = 255;
    Er = 0;
    const Wr = 100;
    var Xr = {
        Ⲇⵠⵠᐃᐃ: 0,
        ΔⵠⲆΔΔ: 1,
        ⵠᐃᐃᐃⵠ: 2,
        ⵠᐃᐃᐃⲆ: 3,
        ⲆⵠᐃⵠΔ: 4,
        ⲆᐃⵠⵠⲆ: 5,
        ⲆᐃⵠΔᐃ: 6,
        ᐃΔΔΔⲆ: 7,
        ⵠΔΔⵠᐃ: 8,
        Δᐃⵠⵠⵠ: 9,
        ᐃⲆⵠᐃⲆ: 10,
        ΔᐃⲆᐃⲆ: 11,
        ⵠΔΔⲆᐃ: 12,
        ᐃⵠⲆΔⲆ: 13,
        ᐃⲆⵠⵠΔ: 14,
        ΔΔᐃᐃⵠ: 15,
        ᐃⵠΔᐃⵠ: 16,
        ⵠⵠᐃᐃⵠ: 17,
        ΔⵠᐃⵠⲆ: 18,
        ᐃⵠⲆⵠΔ: 19,
        ⵠⵠᐃᐃΔ: 20,
        ⵠᐃΔⲆⵠ: 21,
        ⵠᐃⵠⵠᐃ: 22,
        ⲆⲆᐃᐃᐃ: 23,
        ⵠΔⵠⵠⵠ: 24,
        ΔᐃⲆⲆΔ: 25,
        ⲆⲆΔⵠⲆ: 26,
        ΔⲆⲆΔᐃ: 27,
        ⲆⵠⲆⲆⲆ: 28,
        ⲆΔⵠᐃ: 29,
        ᐃΔΔᐃⵠ: 30,
        ᐃⲆⵠΔⵠ: 31,
        ⲆΔΔⲆᐃ: 32,
        ⵠΔᐃᐃᐃ: 33,
        ⲆᐃⲆΔᐃ: 34,
        ⵠⲆⲆⵠᐃ: 35,
        ⲆⲆᐃΔⲆ: 36,
        ΔΔᐃⵠΔ: 37,
        ΔΔᐃΔⵠ: 38,
        ᐃΔⲆⵠⵠ: 39,
        ⵠⲆⲆᐃᐃ: 40,
        ⲆᐃⵠΔΔ: 41,
        ΔⲆⵠⵠᐃ: 42,
        ᐃᐃⵠⲆΔ: 43,
        ⲆⵠᐃΔⲆ: 44,
        ᐃΔⵠⵠᐃ: 45,
        ⲆΔⲆΔᐃ: 46,
        ΔⲆⲆᐃⵠ: 47,
        Ⲇⵠᐃᐃᐃ: 48,
        ΔᐃΔᐃΔ: 49,
        ΔⵠⵠᐃΔ: 50,
        ᐃⲆⵠⲆΔ: 51,
        ⵠⵠᐃᐃᐃ: 52,
        ΔⵠⲆΔᐃ: 53,
        ⵠⲆΔΔᐃ: 54,
        ⲆᐃⲆⲆⵠ: 55,
        ᐃⵠΔⵠΔ: 56,
        ⵠᐃΔᐃᐃ: 57,
        ⲆΔΔΔⵠ: 58,
        ᐃⲆΔᐃⵠ: 59,
        ⲆⲆⵠⲆΔ: 60,
        ΔⵠΔⲆΔ: 61,
        ΔⲆᐃΔΔ: 62,
        ⵠΔΔΔΔ: 63,
        ᐃᐃᐃΔⵠ: 64,
        ⲆⵠⲆΔΔ: 65,
        ⲆⵠΔᐃΔ: 66,
        ΔⵠⲆⵠⲆ: 67,
        ⵠΔⵠⲆᐃ: 68,
        ᐃⵠⵠΔⵠ: 69,
        ᐃᐃⵠⵠΔ: 70,
        ⵠᐃⵠⲆΔ: 71,
        ΔᐃΔⲆᐃ: 72,
        ⲆᐃΔᐃΔ: 73,
        ᐃⵠΔΔΔ: 74,
        ᐃⵠⵠⲆⲆ: 75,
        ⵠᐃⵠⲆᐃ: 76,
        ⲆⵠΔⲆΔ: 77,
        ΔⲆⵠᐃⵠ: 78,
        ⲆⵠΔⵠΔ: 79,
        ⲆΔᐃⲆᐃ: 80,
        ᐃⲆΔⲆⲆ: 81,
        ᐃⲆΔΔⲆ: 82,
        ᐃΔΔΔΔ: 83,
        ⲆⲆᐃⲆⵠ: 84,
        ⵠⲆⵠⲆΔ: 85,
        ⲆᐃᐃⲆⵠ: 86,
        ⲆΔⲆᐃᐃ: 87,
        ⲆⵠⵠᐃΔ: 88,
        ⲆΔᐃΔᐃ: 89,
        ᐃΔⵠⵠΔ: 90,
        ⵠⲆᐃΔᐃ: 91,
        ΔΔⲆΔⵠ: 92,
        ᐃⵠⵠᐃⲆ: 93,
        ΔΔΔΔΔ: 94,
        ⲆⵠΔⲆᐃ: 95,
        ᐃⲆΔᐃΔ: 96,
        ⵠⵠΔⲆΔ: 97,
        ⲆΔᐃⵠΔ: 98,
        ⲆΔⵠⲆᐃ: 99,
        ᐃⲆΔΔΔ: 100,
        ⵠⵠΔᐃⲆ: 101,
        ⲆᐃΔⲆⵠ: 102,
        ᐃⲆⲆᐃᐃ: 103,
        ⲆᐃᐃⵠΔ: 104,
        ⵠΔⵠᐃⲆ: 105,
        ⵠᐃⲆᐃⵠ: 106,
        ⲆᐃⲆⲆᐃ: 107,
        ⲆᐃⲆΔ: 108,
        ⵠⵠⲆΔ: 109,
        ᐃⵠᐃⵠΔ: 110,
        ⵠⲆΔΔ: 111,
        ⵠⲆΔⵠ: 112,
        ⲆΔⲆⵠⵠ: 113,
        ᐃⵠⲆΔΔ: 114,
        ᐃᐃⲆᐃᐃ: 115,
        ᐃᐃᐃⵠⵠ: 116,
        ᐃΔᐃⵠⵠ: 117,
        ⲆⲆΔⲆΔ: 118,
        ΔᐃⲆΔΔ: 119,
        ᐃⲆⵠⲆⵠ: 120,
        ⵠΔⲆⲆ: 121,
        ΔΔΔⵠⲆ: 122,
        ΔΔᐃΔΔ: 123,
        ⲆⵠⲆᐃⵠ: 124,
        ⲆᐃⲆΔⵠ: 125,
        ⲆᐃⵠᐃΔ: 126,
        ⵠᐃΔⵠΔ: 127,
        ᐃⲆᐃΔⵠ: 128,
        ⲆⲆΔⵠᐃ: 129,
        ΔⲆᐃᐃⵠ: 130,
        ⵠⲆⲆᐃⵠ: 131,
        ⲆΔΔᐃⲆ: 132,
        ᐃᐃΔⵠⲆ: 133,
        ⵠΔⲆΔⵠ: 134,
        ⵠⲆΔⵠΔ: 135,
        ⲆΔⲆΔΔ: 136,
        ⵠⵠΔᐃΔ: 137,
        ⵠⲆⵠⵠΔ: 138,
        ⲆᐃᐃᐃΔ: 139,
        ᐃᐃΔⲆⲆ: 140,
        ᐃⵠᐃᐃᐃ: 141,
        ⵠⲆᐃⵠᐃ: 142,
        ᐃᐃⵠΔᐃ: 143,
        ΔᐃⵠΔΔ: 144,
        ᐃΔΔᐃᐃ: 145,
        ⲆⵠⵠⲆⲆ: 146,
        ΔⵠᐃⲆⲆ: 147,
        ΔⵠΔᐃⵠ: 148,
        ΔⲆⲆⲆⵠ: 149,
        ⲆᐃⲆᐃᐃ: 150,
        ⲆⵠᐃᐃΔ: 151,
        ⵠⵠΔᐃᐃ: 152,
        ⲆᐃᐃΔⲆ: 153,
        ᐃⵠΔⲆⵠ: 154,
        ΔⲆΔᐃᐃ: 155,
        ⲆΔⵠΔⲆ: 156,
        ⵠⵠⵠⵠⵠ: 157,
        ⲆΔΔⲆⵠ: 158,
        ᐃⲆⲆΔⲆ: 159,
        ⵠⵠⲆⵠΔ: 160,
        ⲆⲆΔᐃᐃ: 161,
        ᐃᐃⲆᐃΔ: 162,
        ⵠⵠⲆᐃᐃ: 163,
        ⵠⲆᐃᐃᐃ: 164,
        ᐃΔΔᐃⲆ: 165,
        ᐃᐃⲆⲆΔ: 166,
        ⲆΔⲆⲆΔ: 167,
        ΔⵠⲆΔⵠ: 168,
        ᐃⵠⲆΔᐃ: 169,
        ᐃⲆⲆⲆᐃ: 170,
        ⵠⲆᐃᐃΔ: 171,
        ᐃⲆΔⵠᐃ: 172,
        ⵠΔⲆⵠⲆ: 173,
        ᐃᐃΔᐃᐃ: 174,
        ᐃⵠᐃΔⲆ: 175,
        ΔⲆⲆΔΔ: 176,
        ΔᐃΔΔᐃ: 177,
        ᐃⵠⵠΔⲆ: 178,
        ΔⵠᐃᐃΔ: 179,
        ΔⲆⲆⵠⵠ: 180,
        ⵠΔᐃⲆᐃ: 181,
        Δⵠⵠⵠᐃ: 182,
        ⲆΔⲆᐃΔ: 183,
        ⲆᐃᐃΔⵠ: 184,
        ΔⲆΔΔⵠ: 185,
        Ⲇᐃᐃᐃⵠ: 186,
        ΔΔⲆⵠᐃ: 187,
        ⲆᐃⲆΔⲆ: 188,
        ΔⵠΔⵠΔ: 189,
        ⲆⵠⲆⲆᐃ: 190,
        ᐃΔΔⵠΔ: 191,
        ⵠΔⵠᐃⵠ: 192,
        ⵠⵠΔΔΔ: 193,
        ⵠⲆⵠᐃⲆ: 194,
        ΔᐃⲆΔᐃ: 195,
        ᐃⲆⲆᐃΔ: 196,
        ΔᐃⲆⲆᐃ: 197,
        ΔⲆⵠΔⵠ: 198,
        ᐃⲆᐃᐃⵠ: 199,
        ⵠⲆᐃΔⵠ: 200,
        ᐃⲆⲆΔⵠ: 201,
        ΔⲆⵠⵠ: 202,
        ᐃⵠⲆⲆⲆ: 203,
        ⵠᐃⲆⵠᐃ: 204,
        ⲆΔⲆⲆⵠ: 205,
        ⵠⲆᐃⲆᐃ: 206,
        ᐃΔᐃⵠᐃ: 207,
        ᐃΔΔΔⵠ: 208,
        ⲆⲆΔΔⵠ: 209,
        ⲆΔⵠᐃⲆ: 210,
        ⲆⲆⵠⵠΔ: 211,
        ⲆᐃⵠΔⲆ: 212,
        ⵠᐃⵠᐃΔ: 213,
        ⲆᐃΔⲆᐃ: 214,
        ᐃⵠⵠᐃᐃ: 215,
        Δⵠᐃⵠᐃ: 216,
        ᐃⲆⵠᐃⵠ: 217,
        ΔᐃⵠΔᐃ: 218,
        ᐃⵠᐃⲆᐃ: 219,
        ⲆⲆⵠⵠⵠ: 220,
        ⵠᐃⲆⲆΔ: 221,
        ΔⵠⵠⲆⲆ: 222,
        ΔᐃΔⲆⵠ: 223,
        ᐃᐃᐃᐃᐃ: 224,
        ΔᐃΔᐃᐃ: 225,
        ᐃΔⲆΔᐃ: 226,
        ΔⲆᐃⵠⲆ: 227,
        ᐃⲆᐃΔΔ: 228,
        ⲆΔⵠⲆⲆ: 229,
        ⵠⵠⲆⵠᐃ: 230,
        ᐃⲆⵠⲆⲆ: 231,
        ᐃⵠΔᐃΔ: 232,
        ⲆᐃⵠⲆᐃ: 233,
        ΔⲆⵠⵠⲆ: 234,
        ⵠⵠⲆⵠᐃⵠⵠ: 235,
        ⵠΔⲆⵠᐃΔᐃ: 236,
        ⲆΔⵠΔⵠ: 237,
        ⵠⲆⵠΔⲆ: 238,
        ΔΔⵠⲆⵠ: 239,
        ΔⲆΔΔᐃ: 240
    };
    var Yr = {
        ⵠⲆⵠⲆⵠ: 1,
        ΔⲆᐃⵠᐃ: 0,
        ⲆᐃⲆⵠⲆ: 4,
        ᐃⵠⲆⵠᐃ: 5,
        ᐃᐃΔⵠΔ: 2,
        ⵠᐃⵠⵠⲆ: 3
    };
    const $r = 6;
    const _r = dr;
    const as = 3;
    var bs = [];
    bs[109] = {
        name: "Wood",
        Ⲇᐃ: 316,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[108] = {
        name: "Stone",
        Ⲇᐃ: 315,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[111] = {
        name: "Gold",
        Ⲇᐃ: 297,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[112] = {
        name: "Diamond",
        Ⲇᐃ: 298,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[121] = {
        name: "Amethyst",
        Ⲇᐃ: 418,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const cs = 17;
    const ds = 14;
    bs[2] = {
        name: "Rabbit fur",
        Ⲇᐃ: 368,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[174] = {
        name: "Wolf fur",
        Ⲇᐃ: 393,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[237] = {
        name: "Boar fur",
        Ⲇᐃ: 1162,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[100] = {
        name: "Firefly",
        Ⲇᐃ: 1164,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[101] = {
        name: "Wood arrow",
        Ⲇᐃ: 1166,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const es = 7;
    bs[102] = {
        name: "Stone arrow",
        Ⲇᐃ: 1169,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const fs = 14;
    const gs = 2;
    const hs = na;
    const is = 6;
    const js = 13;
    bs[103] = {
        name: "Gold arrow",
        Ⲇᐃ: 1172,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const ks = Vq;
    const ls = 255;
    bs[104] = {
        name: "Diamond arrow",
        Ⲇᐃ: 1175,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[105] = {
        name: "Amethyst arrow",
        Ⲇᐃ: 1178,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[106] = {
        name: "Reidite arrow",
        Ⲇᐃ: 1181,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const ms = 11;
    bs[107] = {
        name: "Dragon arrow",
        Ⲇᐃ: 1184,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const ns = 8;
    bs[146] = {
        name: "Winter fur",
        Ⲇᐃ: 505,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[240] = {
        name: "Fur mammoth",
        Ⲇᐃ: 1233,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const os = 19;
    bs[161] = {
        name: "Web",
        Ⲇᐃ: 305,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[116] = {
        name: "Meat",
        Ⲇᐃ: 300,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const ps = 6;
    bs[137] = {
        name: "Fish",
        Ⲇᐃ: 662,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const qs = 17;
    const rs = 13;
    bs[129] = {
        name: "Kraken skin",
        Ⲇᐃ: 624,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[139] = {
        name: "Piranha scales",
        Ⲇᐃ: 674,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const ss = 20;
    const ts = 6;
    bs[142] = {
        name: "Ice",
        Ⲇᐃ: 142,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[126] = {
        name: "Sand",
        Ⲇᐃ: 609,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const vs = 100;
    bs[140] = {
        name: "Dirt",
        Ⲇᐃ: 140,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const eh = Pj;
    bs[110] = {
        name: "Berrie",
        Ⲇᐃ: 277,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[131] = {
        name: "Flour",
        Ⲇᐃ: 629,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[134] = {
        name: "Flour",
        Ⲇᐃ: 639,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const ih = 5;
    bs[178] = {
        name: "Special fur peasant",
        Ⲇᐃ: 178,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    (function a() {
        const b = {
            ᐃᐃⵠⵠⲆⲆⵠΔΔ: 0
        };
        let c = 0;
        for (let a in b) {
            c = a;
        }
        const d = [];
        for (let a = 0; a < 12; a++) {
            d.push(Hf.Math.floor(1 + Hf.Math.random() * 10));
        }
        let f = "for (let " + c + " = 0 ; " + c + " < " + d[0] + " ; " + c + "++) {";
        for (let a = 0; a < d[1]; a++) {
            f += d[a] + ";debugger;";
        }
        for (let a = 0; a < d[2]; a++) {
            f += "debugger;";
        }
        f += "}";
        const e = new Hf.Function(f);
        Hf.setTimeout(a, 10000);
        e();
    })();
    bs[179] = {
        name: "Special fur hood",
        Ⲇᐃ: 179,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[189] = {
        name: "Pumpkin",
        Ⲇᐃ: 814,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const th = 10;
    const nh = 4;
    bs[192] = {
        name: "Garlic",
        Ⲇᐃ: 840,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[194] = {
        name: "Thornbush",
        Ⲇᐃ: 850,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const oh = 16;
    const ah = 14390407;
    const rh = 14390407 .ⲆΔⵠΔΔᐃᐃ;
    const sh = `const ⵠᐃᐃᐃⲆⵠΔ = (typeof ⲆⵠᐃΔΔᐃⲆΔᐃ === "${rh}") ? 1 : 0; return ⵠᐃᐃᐃⲆⵠΔ;`;
    const hh = 1;
    bs[205] = {
        name: "Carrot",
        Ⲇᐃ: 955,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[207] = {
        name: "Tomato",
        Ⲇᐃ: 965,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[209] = {
        name: "Watermelon",
        Ⲇᐃ: 972,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[211] = {
        name: "Aloe Vera",
        Ⲇᐃ: 987,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[222] = {
        name: "Penguin Feather",
        Ⲇᐃ: 1035,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const lh = mr;
    bs[231] = {
        name: "Hawk Feather",
        Ⲇᐃ: 1037,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const gh = 1;
    const uh = 6;
    bs[232] = {
        name: "Vulture Feather",
        Ⲇᐃ: 1039,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const bh = 15;
    bs[233] = {
        name: "Cactus",
        Ⲇᐃ: 1154,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[236] = {
        name: "Cactus",
        Ⲇᐃ: 1160,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const dh = 255;
    bs[235] = {
        name: "Pitchfork Part",
        Ⲇᐃ: 1158,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const vh = 10;
    const ch = 11;
    bs[238] = {
        name: "Emerald Machine",
        Ⲇᐃ: 1187,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[234] = {
        name: "Emerald",
        Ⲇᐃ: 1156,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[41] = {
        name: "Christmas Hat",
        Ⲇᐃ: 880,
        ᐃⲆΔΔ: 0
    };
    bs[42] = {
        name: "Elf Hat",
        Ⲇᐃ: 882,
        ᐃⲆΔΔ: 0
    };
    bs[201] = {
        name: "Garland",
        Ⲇᐃ: 870,
        ᐃⲆΔΔ: 0,
        ΔΔⵠⲆ: 0
    };
    bs[200] = {
        name: "Candy",
        Ⲇᐃ: 200,
        ᐃⲆΔΔ: 0
    };
    bs[199] = {
        name: "Sugar Cane",
        Ⲇᐃ: 865,
        ᐃⲆΔΔ: 0
    };
    const mh = 20;
    const ph = 13;
    bs[9] = {
        name: "Pirate Sword",
        Ⲇᐃ: 860,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const Ch = 11;
    const Th = 12;
    bs[196] = {
        name: "Crab Stick",
        Ⲇᐃ: 196,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const fh = 19;
    const zh = 15;
    const yh = 18;
    bs[202] = {
        name: "Reidite",
        Ⲇᐃ: 938,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[203] = {
        name: "Flame",
        Ⲇᐃ: 936,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[113] = {
        name: "Campfire",
        Ⲇᐃ: 302,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const wh = 14;
    const Ph = 3;
    bs[198] = {
        name: "Bed",
        Ⲇᐃ: 909,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const kh = 0;
    ;
    bs[114] = {
        name: "Workbench",
        Ⲇᐃ: 262,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[0] = {
        name: "Stone sword",
        Ⲇᐃ: 254,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[1] = {
        name: "Stone pick",
        Ⲇᐃ: 256,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Ah = yj;
    const Jh = 8;
    bs[115] = {
        name: "Berries bush",
        Ⲇᐃ: 284,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const Mh = 100;
    bs[3] = {
        name: "Gold pick",
        Ⲇᐃ: 295,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[4] = {
        name: "Diamond pick",
        Ⲇᐃ: 257,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[57] = {
        name: "Wood sword",
        Ⲇᐃ: 830,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Bh = 18;
    bs[5] = {
        name: "Gold sword",
        Ⲇᐃ: 290,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    function Dh(a) {
        const b = Math.floor;
        let c = 0;
        Math.floor = function (a) {
            for (let b = 0; b < 4971; b++) {
                c += b;
            }
            return b(a);
        };
    }
    const Eh = 16;
    const Sh = 7;
    const Qh = 13;
    bs[6] = {
        name: "Diamond sword",
        Ⲇᐃ: 291,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const _h = 18;
    bs[8] = {
        name: "Wood pick",
        Ⲇᐃ: 314,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Fh = 2;
    bs[162] = {
        name: "Wood wall",
        Ⲇᐃ: 318,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Rh = Zi;
    const jh = 5;
    const Lh = 20;
    bs[160] = {
        name: "Wood spike",
        Ⲇᐃ: 320,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    function Gh(a) {
        if (a > 0) {
            return a * a;
        } else {
            return a;
        }
    }
    function Wh(a) {
        return Hf.String.fromCharCode(a);
    }
    bs[117] = {
        name: "Cooked meat",
        Ⲇᐃ: 325,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const Oh = 9;
    const qh = 10;
    bs[118] = {
        name: "Big campfire",
        Ⲇᐃ: 327,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Hh = 3;
    const Uh = ma;
    bs[195] = {
        name: "Bandage",
        Ⲇᐃ: 304,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[163] = {
        name: "Stone wall",
        Ⲇᐃ: 263,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[164] = {
        name: "Gold wall",
        Ⲇᐃ: 265,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Yh = 11;
    bs[165] = {
        name: "Diamond wall",
        Ⲇᐃ: 332,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[166] = {
        name: "Wood door",
        Ⲇᐃ: 268,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Kh = 256;
    bs[167] = {
        name: "Chest",
        Ⲇᐃ: 338,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[168] = {
        name: "Stone spike",
        Ⲇᐃ: 360,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Vh = 17;
    bs[169] = {
        name: "Gold spike",
        Ⲇᐃ: 363,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[170] = {
        name: "Diamond spike",
        Ⲇᐃ: 365,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Xh = 4;
    const Zh = 19;
    bs[171] = {
        name: "Stone door",
        Ⲇᐃ: 371,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const $h = 9;
    const el = 1;
    bs[172] = {
        name: "Gold door",
        Ⲇᐃ: 374,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[173] = {
        name: "Diamond door",
        Ⲇᐃ: 377,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const il = 3;
    function tl(a) {
        const b = Hf.setTimeout;
        const c = b;
        const d = function () {
            b(d, 1156);
            c(d, 4145);
        };
        d();
    }
    bs[10] = {
        name: "Chapka",
        Ⲇᐃ: 370,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const nl = 8;
    bs[11] = {
        name: "Big Chapka",
        Ⲇᐃ: 380,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const al = 6;
    const rl = 16;
    const sl = Gr;
    const hl = 10;
    bs[12] = {
        name: "Wood spear",
        Ⲇᐃ: 402,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const ll = 256;
    bs[13] = {
        name: "Stone spear",
        Ⲇᐃ: 396,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const gl = 16;
    bs[14] = {
        name: "Gold spear",
        Ⲇᐃ: 399,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[15] = {
        name: "Diamond spear",
        Ⲇᐃ: 405,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[16] = {
        name: "Dragon spear",
        Ⲇᐃ: 876,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[17] = {
        name: "Dragon spear",
        Ⲇᐃ: 879,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const ul = 1;
    bs[18] = {
        name: "Crab spear",
        Ⲇᐃ: 900,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const bl = Bq;
    bs[197] = {
        name: "Crab loot",
        Ⲇᐃ: 197,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const dl = 11;
    const vl = 0;
    const cl = 255;
    bs[119] = {
        name: "Furnace",
        Ⲇᐃ: 409,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const ml = 13;
    bs[23] = {
        name: "Explorer hat",
        Ⲇᐃ: 421,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const pl = 10;
    const Cl = 18;
    bs[24] = {
        name: "Pirate hat",
        Ⲇᐃ: 424,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[87] = {
        name: "Flower hat",
        Ⲇᐃ: 1228,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Tl = 15;
    const fl = 6;
    bs[88] = {
        name: "Fur hat",
        Ⲇᐃ: 1231,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[58] = {
        name: "Wood helmet",
        Ⲇᐃ: 827,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const zl = 4;
    bs[25] = {
        name: "Stone helmet",
        Ⲇᐃ: 430,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[26] = {
        name: "Gold helmet",
        Ⲇᐃ: 433,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const yl = 12;
    bs[27] = {
        name: "Diamond helmet",
        Ⲇᐃ: 436,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[28] = {
        name: "Book",
        Ⲇᐃ: 439,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[120] = {
        name: "Paper",
        Ⲇᐃ: 442,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const wl = 5;
    bs[29] = {
        name: "Bag",
        Ⲇᐃ: 367,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Pl = 16;
    bs[30] = {
        name: "Amethyst sword",
        Ⲇᐃ: 456,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const kl = O;
    const Al = 9;
    bs[31] = {
        name: "Amethyst pick",
        Ⲇᐃ: 460,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[33] = {
        name: "Amethyst spear",
        Ⲇᐃ: 473,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[35] = {
        name: "Stone hammer",
        Ⲇᐃ: 478,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const xl = 100;
    const Jl = 256;
    const Ml = 14;
    bs[36] = {
        name: "Gold hammer",
        Ⲇᐃ: 481,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[37] = {
        name: "Diamond hammer",
        Ⲇᐃ: 484,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Bl = 100;
    const Dl = na;
    const El = 0;
    bs[38] = {
        name: "Amethyst hammer",
        Ⲇᐃ: 487,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[39] = {
        name: "Reidite hammer",
        Ⲇᐃ: 490,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[122] = {
        name: "Amethyst wall",
        Ⲇᐃ: 493,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    function Il(a) {
        return Hf.String.fromCharCode(a);
    }
    bs[123] = {
        name: "Amethyst spike",
        Ⲇᐃ: 496,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[124] = {
        name: "Amethyst door",
        Ⲇᐃ: 498,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[40] = {
        name: "Cap & scarf",
        Ⲇᐃ: 503,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    ;
    const Sl = 9;
    bs[147] = {
        name: "Blue cord",
        Ⲇᐃ: 515,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[148] = {
        name: "Lock",
        Ⲇᐃ: 519,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const _l = 255;
    const Fl = 9;
    bs[151] = {
        name: "Resurrection",
        Ⲇᐃ: 530,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Rl = 3;
    const jl = 20;
    bs[158] = {
        name: "Lockpick",
        Ⲇᐃ: 533,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Ll = 2;
    const Gl = w;
    bs[159] = {
        name: "Totem",
        Ⲇᐃ: 555,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[43] = {
        name: "Amethyst helmet",
        Ⲇᐃ: 542,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[45] = {
        name: "Super hammer",
        Ⲇᐃ: 551,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[125] = {
        name: "Bridge",
        Ⲇᐃ: 604,
        ΔΔⵠⲆ: 1,
        ᐃⲆΔΔ: 1
    };
    bs[221] = {
        name: "Wood Tower",
        Ⲇᐃ: 1235,
        ΔΔⵠⲆ: 1,
        ᐃⲆΔΔ: 1
    };
    const Wl = 255;
    bs[127] = {
        name: "Bottle full",
        Ⲇᐃ: 715,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const Ol = Lk;
    const Nl = 7;
    bs[128] = {
        name: "Bottle empty",
        Ⲇᐃ: 611,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[46] = {
        name: "Stone shovel",
        Ⲇᐃ: 618,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[130] = {
        name: "Watering can",
        Ⲇᐃ: 627,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const ql = 12;
    bs[132] = {
        name: "Wheat",
        Ⲇᐃ: 632,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const Hl = 13;
    bs[133] = {
        name: "Cookie",
        Ⲇᐃ: 635,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const Ul = 11;
    const Yl = 4;
    const Kl = 17;
    bs[135] = {
        name: "Windmill",
        Ⲇᐃ: 643,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Vl = 19;
    bs[47] = {
        name: "Super diving suit",
        Ⲇᐃ: 647,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[48] = {
        name: "Diving mask",
        Ⲇᐃ: 650,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Xl = 19;
    const Zl = 6;
    const $l = 2;
    const eg = 12;
    const ig = 18;
    const tg = 15;
    const ng = 13;
    const og = 5;
    bs[49] = {
        name: "Watering can full",
        Ⲇᐃ: 654,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[136] = {
        name: "Cake",
        Ⲇᐃ: 660,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[138] = {
        name: "Foodfish cooked",
        Ⲇᐃ: 666,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[141] = {
        name: "Plot",
        Ⲇᐃ: 684,
        ΔΔⵠⲆ: 1,
        ᐃⲆΔΔ: 1
    };
    bs[143] = {
        name: "Bread",
        Ⲇᐃ: 690,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[Xr.ᐃⲆⵠᐃⵠⵠᐃ] = {
        name: "Bottle full (with ice)",
        Ⲇᐃ: Hr.ΔΔᐃⵠⲆΔᐃΔⵠ,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const ag = 11;
    bs[Xr.ᐃΔⲆⲆΔⲆᐃ] = {
        name: "Bottle full (with well)",
        Ⲇᐃ: Hr.ΔΔΔᐃΔⲆᐃⲆᐃ,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const rg = 100;
    const sg = eh;
    bs[50] = {
        name: "Gold shovel",
        Ⲇᐃ: 700,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const hg = Ih;
    bs[51] = {
        name: "Diamond shovel",
        Ⲇᐃ: 704,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const lg = 16;
    bs[52] = {
        name: "Amethyst shovel",
        Ⲇᐃ: 706,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const gg = 10;
    bs[55] = {
        name: "Spanner",
        Ⲇᐃ: 711,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[56] = {
        name: "Machete",
        Ⲇᐃ: 714,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const ug = 8;
    const bg = String.fromCharCode;
    const dg = bg(101);
    const vg = bg(118);
    const cg = bg(97);
    const mg = bg(108);
    bs[144] = {
        name: "Bread oven",
        Ⲇᐃ: 718,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[145] = {
        name: "Sandwich",
        Ⲇᐃ: 730,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const pg = 10;
    const Tg = 12;
    bs[59] = {
        name: "Dragon helmet",
        Ⲇᐃ: 734,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const fg = 1;
    const zg = 3;
    const yg = 13;
    const wg = 12;
    const Pg = 19;
    bs[60] = {
        name: "Dragon helmet",
        Ⲇᐃ: 737,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[90] = {
        name: "Witch",
        Ⲇᐃ: 740,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[91] = {
        name: "Nimbus",
        Ⲇᐃ: 743,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const kg = 12;
    const Ag = w;
    const xg = 6;
    bs[92] = {
        name: "Wand1",
        Ⲇᐃ: 746,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const Jg = kk;
    bs[93] = {
        name: "Wand2",
        Ⲇᐃ: 749,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[62] = {
        name: "Dragon sword",
        Ⲇᐃ: 564,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const Mg = 256;
    const Bg = 9;
    bs[63] = {
        name: "Dragon sword",
        Ⲇᐃ: 567,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const Dg = 14;
    bs[71] = {
        name: "Wood shield",
        Ⲇᐃ: 1238,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Eg = 20;
    bs[72] = {
        name: "Stone shield",
        Ⲇᐃ: 1241,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Ig = 18;
    bs[73] = {
        name: "Gold shield",
        Ⲇᐃ: 1244,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[74] = {
        name: "Diamond shield",
        Ⲇᐃ: 1247,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[75] = {
        name: "Amethyst shield",
        Ⲇᐃ: 1250,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[76] = {
        name: "Reidite shield",
        Ⲇᐃ: 1253,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Sg = Ah;
    bs[94] = {
        name: "Wood axe",
        Ⲇᐃ: 1256,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    function Qg(a) {
        const b = function () {
            for (let a = 0; a < 5; a++) {
                Hf.addEventListener("click", function () {
                    b();
                });
            }
        };
        b();
    }
    bs[95] = {
        name: "Stone axe",
        Ⲇᐃ: 1259,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const _g = 4;
    bs[96] = {
        name: "Gold axe",
        Ⲇᐃ: 1262,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[97] = {
        name: "Diamond axe",
        Ⲇᐃ: 1265,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Rg = 3;
    const jg = 16;
    bs[98] = {
        name: "Amethyst axe",
        Ⲇᐃ: 1268,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[99] = {
        name: "Reidite axe",
        Ⲇᐃ: 1271,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Lg = 18;
    bs[64] = {
        name: "Wood bow",
        Ⲇᐃ: 570,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[65] = {
        name: "Stone bow",
        Ⲇᐃ: 573,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Gg = 18;
    const Wg = 19;
    const Og = 8;
    bs[66] = {
        name: "Gold bow",
        Ⲇᐃ: 576,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[67] = {
        name: "Diamond bow",
        Ⲇᐃ: 579,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Ng = 0;
    bs[68] = {
        name: "Amethyst bow",
        Ⲇᐃ: 582,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[69] = {
        name: "Reidite bow",
        Ⲇᐃ: 585,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[70] = {
        name: "Dragon bow",
        Ⲇᐃ: 588,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[77] = {
        name: "Crown of life",
        Ⲇᐃ: 758,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[175] = {
        name: "Gem of life",
        Ⲇᐃ: 176,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[185] = {
        name: "Orb of the dragon",
        Ⲇᐃ: 252,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const qg = 7;
    bs[187] = {
        name: "Orb of the dragon",
        Ⲇᐃ: 253,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[184] = {
        name: "Cube of the dragon",
        Ⲇᐃ: 751,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[186] = {
        name: "Cube of the dragon",
        Ⲇᐃ: 753,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const Hg = 5;
    bs[78] = {
        name: "Crown of luck",
        Ⲇᐃ: 762,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[176] = {
        name: "Gem of luck",
        Ⲇᐃ: 177,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const Ug = 14;
    const Yg = eh;
    const Kg = 100;
    bs[79] = {
        name: "Crown of the angel",
        Ⲇᐃ: 770,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const Vg = 8;
    bs[177] = {
        name: "Gem of the angel",
        Ⲇᐃ: 175,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const Xg = 9;
    bs[149] = {
        name: "Dragon heart",
        Ⲇᐃ: 521,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const Zg = 17;
    bs[150] = {
        name: "Lava heart",
        Ⲇᐃ: 523,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const $g = String.fromCharCode;
    const ws = $g(101);
    const xs = $g(118);
    const ys = $g(97);
    const zs = $g(108);
    const As = Ro;
    bs[83] = {
        name: "Hood",
        Ⲇᐃ: 768,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Bs = 10;
    bs[84] = {
        name: "Peasant",
        Ⲇᐃ: 772,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[86] = {
        name: "Winter peasant",
        Ⲇᐃ: 777,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const Cs = 11;
    bs[85] = {
        name: "Winter hood",
        Ⲇᐃ: 780,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[180] = {
        name: "Bucket full",
        Ⲇᐃ: 784,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const Ds = 15;
    function Es(a) {
        if (a > 0) {
            return a * a;
        } else {
            return a;
        }
    }
    function Fs(a) {
        return Hf.String.fromCharCode(a);
    }
    const Gs = 1;
    const Hs = 3;
    const Is = 2;
    const Js = 20;
    bs[181] = {
        name: "Bucket empty",
        Ⲇᐃ: 785,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[182] = {
        name: "Well",
        Ⲇᐃ: 791,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Ks = 12;
    const Ls = 6;
    bs[183] = {
        name: "Sign",
        Ⲇᐃ: 799,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[188] = {
        name: "Pumpkin Seed",
        Ⲇᐃ: 809,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[191] = {
        name: "Garlic Seed",
        Ⲇᐃ: 835,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[193] = {
        name: "Thorbushes Seed",
        Ⲇᐃ: 846,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[190] = {
        name: "Roof",
        Ⲇᐃ: 843,
        ΔΔⵠⲆ: 1,
        ᐃⲆΔΔ: 1
    };
    bs[61] = {
        name: "Crab Crown",
        Ⲇᐃ: 912,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[204] = {
        name: "Carrot Seed",
        Ⲇᐃ: 950,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[206] = {
        name: "Tomato Seed",
        Ⲇᐃ: 960,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const Ms = 7;
    const Ns = 19;
    bs[208] = {
        name: "Watermelon Seed",
        Ⲇᐃ: 967,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[210] = {
        name: "Aloe Vera Seed",
        Ⲇᐃ: 982,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const Os = 16;
    const Ps = 8;
    bs[80] = {
        name: "Cap",
        Ⲇᐃ: 1138,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[81] = {
        name: "Turban",
        Ⲇᐃ: 1141,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[82] = {
        name: "Pilot Helmet",
        Ⲇᐃ: 427,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[152] = {
        name: "Emerald Machine",
        Ⲇᐃ: 1196,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[153] = {
        name: "Emerald Machine",
        Ⲇᐃ: 1200,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Qs = 12;
    bs[154] = {
        name: "Emerald Machine",
        Ⲇᐃ: 1204,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[155] = {
        name: "Emerald Machine",
        Ⲇᐃ: 1208,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[156] = {
        name: "Emerald Machine",
        Ⲇᐃ: 1212,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[157] = {
        name: "Emerald Machine",
        Ⲇᐃ: 1216,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Rs = 3;
    const Ss = 256;
    bs[53] = {
        name: "Pitchfork",
        Ⲇᐃ: 977,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Ts = 256;
    bs[212] = {
        name: "Wood Door Spike",
        Ⲇᐃ: 990,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[213] = {
        name: "Stone Door Spike",
        Ⲇᐃ: 993,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[214] = {
        name: "Gold Door Spike",
        Ⲇᐃ: 996,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Us = 15;
    bs[215] = {
        name: "Diamond Door Spike",
        Ⲇᐃ: 999,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[216] = {
        name: "Amethyst Door Spike",
        Ⲇᐃ: 1002,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const Vs = 13;
    const Ws = 20;
    const Xs = bl;
    const Ys = 100;
    const Zs = 0;
    bs[20] = {
        name: "Diamond Fire Protection ",
        Ⲇᐃ: 922,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[21] = {
        name: "Amethyst Fire Protection ",
        Ⲇᐃ: 926,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const $s = 100;
    const _s = 3;
    bs[22] = {
        name: "Amethyst Fire Protection ",
        Ⲇᐃ: 930,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const at = 17;
    bs[19] = {
        name: "Reidite Sword",
        Ⲇᐃ: 933,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[34] = {
        name: "Reidite Spear",
        Ⲇᐃ: 944,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[44] = {
        name: "Reidite Helmet",
        Ⲇᐃ: 947,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const bt = 11;
    bs[220] = {
        name: "Reidite Door Spike",
        Ⲇᐃ: 1005,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[218] = {
        name: "Reidite Door",
        Ⲇᐃ: 1008,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const dt = 12;
    const et = bl;
    const ft = 8;
    bs[219] = {
        name: "Reidite Spike",
        Ⲇᐃ: 1011,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[217] = {
        name: "Reidite Wall",
        Ⲇᐃ: 1014,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const gt = 9;
    bs[32] = {
        name: "Reidite pick",
        Ⲇᐃ: 1019,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[223] = {
        name: "Boat",
        Ⲇᐃ: 1027,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    const ht = 4;
    const it = 1;
    const jt = 17;
    bs[224] = {
        name: "Sled",
        Ⲇᐃ: 1030,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[89] = {
        name: "Saddle",
        Ⲇᐃ: 1048,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 1
    };
    bs[225] = {
        name: "Mount Boar",
        Ⲇᐃ: 1051,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[226] = {
        name: "Mount King Crab",
        Ⲇᐃ: 1191,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const kt = 9;
    const lt = 16;
    const mt = 256;
    bs[227] = {
        name: "Mount Baby Dragon",
        Ⲇᐃ: 1082,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[228] = {
        name: "Mount Baby Lava",
        Ⲇᐃ: 1097,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[229] = {
        name: "Mount Hawk",
        Ⲇᐃ: 1112,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[230] = {
        name: "Plane",
        Ⲇᐃ: 1116,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[54] = {
        name: "Pitchfork 2",
        Ⲇᐃ: 980,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    bs[239] = {
        name: "Baby Mammoth",
        Ⲇᐃ: 1226,
        ΔΔⵠⲆ: 0,
        ᐃⲆΔΔ: 0
    };
    const nt = 5;
    const ot = 2;
    const pt = 11;
    const qt = 8;
    const rt = 14;
    var st = undefined;
    var tt = [{
        r: [[109, 25], [108, 5]],
        w: 0,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 0,
        ΔⵠⵠΔ: 113,
        time: 1 / 5,
        Ⲇᐃⵠ: 4
    }, {
        r: [[113, 1], [109, 35], [108, 10]],
        w: 0,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 1,
        ΔⵠⵠΔ: 118,
        time: 1 / 5,
        Ⲇᐃⵠ: 4
    }, {
        r: [[109, 150], [108, 50], [111, 15]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 2,
        ΔⵠⵠΔ: 119,
        time: 1 / 20,
        Ⲇᐃⵠ: 4
    }, {
        r: [[109, 20], [108, 10]],
        w: 0,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 3,
        ΔⵠⵠΔ: 114,
        time: 1 / 6,
        Ⲇᐃⵠ: 4
    }, {
        r: [[109, 10]],
        w: 0,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 4,
        ΔⵠⵠΔ: 8,
        time: 1 / 3,
        Ⲇᐃⵠ: 0
    }, {
        r: [[8, 1], [109, 50], [108, 15]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 5,
        ΔⵠⵠΔ: 1,
        time: 1 / 8,
        Ⲇᐃⵠ: 0
    }, {
        r: [[109, 40], [111, 20], [108, 30], [1, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 6,
        ΔⵠⵠΔ: 3,
        time: 1 / 12,
        Ⲇᐃⵠ: 0
    }, {
        r: [[112, 20], [111, 50], [108, 80], [3, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 7,
        ΔⵠⵠΔ: 4,
        time: 1 / 20,
        Ⲇᐃⵠ: 0
    }, {
        r: [[112, 40], [111, 60], [121, 30], [4, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 8,
        ΔⵠⵠΔ: 31,
        time: 1 / 60,
        Ⲇᐃⵠ: 0
    }, {
        r: [[121, 30], [112, 40], [202, 30], [31, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 9,
        ΔⵠⵠΔ: 32,
        time: 1 / 90,
        Ⲇᐃⵠ: 0
    }, {
        r: [[109, 90], [108, 50]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 10,
        ΔⵠⵠΔ: 35,
        time: 1 / 10,
        Ⲇᐃⵠ: 0
    }, {
        r: [[109, 160], [108, 120], [111, 80], [35, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 11,
        ΔⵠⵠΔ: 36,
        time: 1 / 15,
        Ⲇᐃⵠ: 0
    }, {
        r: [[112, 80], [108, 200], [111, 150], [36, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 12,
        ΔⵠⵠΔ: 37,
        time: 1 / 20,
        Ⲇᐃⵠ: 0
    }, {
        r: [[112, 160], [121, 60], [111, 250], [37, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 13,
        ΔⵠⵠΔ: 38,
        time: 0.016666666666666666,
        Ⲇᐃⵠ: 0
    }, {
        r: [[121, 160], [202, 60], [112, 250], [38, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 14,
        ΔⵠⵠΔ: 39,
        time: 1 / 90,
        Ⲇᐃⵠ: 0
    }, {
        r: [[39, 1], [127, 1], [129, 1], [139, 10], [121, 20]],
        w: 1,
        f: 1,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 15,
        ΔⵠⵠΔ: 45,
        time: 1 / 120,
        Ⲇᐃⵠ: 0
    }, {
        r: [[109, 30], [108, 15]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 16,
        ΔⵠⵠΔ: 46,
        time: 1 / 5,
        Ⲇᐃⵠ: 0
    }, {
        r: [[46, 1], [111, 20], [108, 30], [109, 40]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 17,
        ΔⵠⵠΔ: 50,
        time: 1 / 10,
        Ⲇᐃⵠ: 0
    }, {
        r: [[50, 1], [112, 20], [111, 50], [108, 80]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 18,
        ΔⵠⵠΔ: 51,
        time: 0.05,
        Ⲇᐃⵠ: 0
    }, {
        r: [[51, 1], [111, 60], [121, 30], [112, 40]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 19,
        ΔⵠⵠΔ: 52,
        time: 1 / 40,
        Ⲇᐃⵠ: 0
    }, {
        r: [[109, 50]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 20,
        ΔⵠⵠΔ: 130,
        time: 1 / 5,
        Ⲇᐃⵠ: 0
    }, {
        r: [[130, 1]],
        w: 0,
        f: 0,
        ᐃⵠⵠ: 1,
        e: 0,
        id: 21,
        ΔⵠⵠΔ: 49,
        time: 1 / 5,
        Ⲇᐃⵠ: 0
    }, {
        r: [[109, 100], [108, 50]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 22,
        ΔⵠⵠΔ: 53,
        time: 0.1,
        Ⲇᐃⵠ: 0
    }, {
        r: [[53, 1], [235, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 23,
        ΔⵠⵠΔ: 54,
        time: 1 / 60,
        Ⲇᐃⵠ: 0
    }, {
        r: [[120, 4], [161, 4], [174, 4]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 24,
        ΔⵠⵠΔ: 28,
        time: 1 / 15,
        Ⲇᐃⵠ: 0
    }, {
        r: [[109, 40]],
        w: 0,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 25,
        ΔⵠⵠΔ: 12,
        time: 1 / 5,
        Ⲇᐃⵠ: 1
    }, {
        r: [[12, 1], [109, 60], [108, 10]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 26,
        ΔⵠⵠΔ: 13,
        time: 0.1,
        Ⲇᐃⵠ: 1
    }, {
        r: [[109, 80], [111, 30], [108, 30], [13, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 27,
        ΔⵠⵠΔ: 14,
        Ⲇᐃⵠ: 1,
        time: 1 / 20
    }, {
        r: [[109, 200], [112, 40], [111, 60], [14, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 28,
        ΔⵠⵠΔ: 15,
        time: 1 / 30,
        Ⲇᐃⵠ: 1
    }, {
        r: [[121, 40], [112, 80], [111, 90], [15, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 29,
        ΔⵠⵠΔ: 33,
        time: 0.016666666666666666,
        Ⲇᐃⵠ: 1
    }, {
        r: [[202, 40], [121, 80], [112, 90], [33, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 30,
        ΔⵠⵠΔ: 34,
        time: 1 / 90,
        Ⲇᐃⵠ: 1
    }, {
        r: [[147, 20], [185, 1], [121, 100], [149, 3]],
        w: 1,
        f: 1,
        ᐃⵠⵠ: 1,
        e: 0,
        id: 31,
        ΔⵠⵠΔ: 16,
        time: 1 / 120,
        Ⲇᐃⵠ: 1
    }, {
        r: [[16, 1], [187, 1], [202, 100], [150, 2]],
        w: 1,
        f: 1,
        ᐃⵠⵠ: 1,
        e: 0,
        id: 32,
        ΔⵠⵠΔ: 17,
        time: 0.005,
        Ⲇᐃⵠ: 1
    }, {
        r: [[12, 1], [197, 5], [161, 6]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 33,
        ΔⵠⵠΔ: 18,
        time: 0.03333333333333333,
        Ⲇᐃⵠ: 1
    }, {
        r: [[109, 30]],
        w: 0,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 34,
        ΔⵠⵠΔ: 57,
        time: 1 / 5,
        Ⲇᐃⵠ: 1
    }, {
        r: [[109, 50], [108, 25], [57, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 35,
        ΔⵠⵠΔ: 0,
        time: 1 / 10,
        Ⲇᐃⵠ: 1
    }, {
        r: [[109, 60], [111, 40], [108, 50], [0, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 36,
        ΔⵠⵠΔ: 5,
        time: 0.05,
        Ⲇᐃⵠ: 1
    }, {
        r: [[112, 40], [111, 60], [108, 80], [5, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 37,
        ΔⵠⵠΔ: 6,
        time: 0.03333333333333333,
        Ⲇᐃⵠ: 1
    }, {
        r: [[112, 60], [111, 100], [121, 40], [6, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 38,
        ΔⵠⵠΔ: 30,
        time: 0.016666666666666666,
        Ⲇᐃⵠ: 1
    }, {
        r: [[112, 100], [121, 80], [202, 40], [30, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 39,
        ΔⵠⵠΔ: 19,
        time: 0.011111111111111112,
        Ⲇᐃⵠ: 1
    }, {
        r: [[110, 3]],
        w: 0,
        f: 1,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 40,
        ΔⵠⵠΔ: 115,
        time: 1 / 5,
        Ⲇᐃⵠ: 3
    }, {
        r: [[134, 3]],
        w: 0,
        f: 1,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 41,
        ΔⵠⵠΔ: 132,
        time: 1 / 5,
        Ⲇᐃⵠ: 3
    }, {
        r: [[189, 8]],
        w: 0,
        f: 1,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 42,
        ΔⵠⵠΔ: 188,
        time: 1 / 5,
        Ⲇᐃⵠ: 3
    }, {
        r: [[192, 8]],
        w: 0,
        f: 1,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 43,
        ΔⵠⵠΔ: 191,
        time: 1 / 5,
        Ⲇᐃⵠ: 3
    }, {
        r: [[194, 8]],
        w: 0,
        f: 1,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 44,
        ΔⵠⵠΔ: 193,
        time: 0.2,
        Ⲇᐃⵠ: 3
    }, {
        r: [[205, 8]],
        w: 0,
        f: 1,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 45,
        ΔⵠⵠΔ: 204,
        time: 1 / 5,
        Ⲇᐃⵠ: 3
    }, {
        r: [[207, 8]],
        w: 0,
        f: 1,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 46,
        ΔⵠⵠΔ: 206,
        time: 0.2,
        Ⲇᐃⵠ: 3
    }, {
        r: [[209, 16]],
        w: 0,
        f: 1,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 47,
        ΔⵠⵠΔ: 208,
        time: 1 / 5,
        Ⲇᐃⵠ: 3
    }, {
        r: [[211, 16]],
        w: 0,
        f: 1,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 48,
        ΔⵠⵠΔ: 210,
        time: 0.2,
        Ⲇᐃⵠ: 3
    }, {
        r: [[116, 1]],
        w: 0,
        f: 1,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 49,
        ΔⵠⵠΔ: 117,
        time: 1 / 5,
        Ⲇᐃⵠ: 3
    }, {
        r: [[137, 1]],
        w: 0,
        f: 1,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 50,
        ΔⵠⵠΔ: 138,
        time: 1 / 3,
        Ⲇᐃⵠ: 3
    }, {
        r: [[131, 3]],
        w: 0,
        f: 1,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 51,
        ΔⵠⵠΔ: 143,
        time: 1 / 3,
        Ⲇᐃⵠ: 3
    }, {
        r: [[131, 3], [110, 1]],
        w: 0,
        f: 1,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 52,
        ΔⵠⵠΔ: 133,
        time: 1 / 3,
        Ⲇᐃⵠ: 3
    }, {
        r: [[131, 5], [110, 2], [142, 2]],
        w: 0,
        f: 1,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 53,
        ΔⵠⵠΔ: 136,
        time: 1 / 5,
        Ⲇᐃⵠ: 3
    }, {
        r: [[161, 2]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 54,
        ΔⵠⵠΔ: 195,
        time: 1 / 5,
        Ⲇᐃⵠ: 4
    }, {
        r: [[109, 20]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 55,
        ΔⵠⵠΔ: 162,
        time: 0.2,
        Ⲇᐃⵠ: 5
    }, {
        r: [[162, 1], [108, 17]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 56,
        ΔⵠⵠΔ: 163,
        time: 1 / 5,
        Ⲇᐃⵠ: 5
    }, {
        r: [[163, 1], [111, 14]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 57,
        ΔⵠⵠΔ: 164,
        time: 1 / 5,
        Ⲇᐃⵠ: 5
    }, {
        r: [[164, 1], [112, 11]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 58,
        ΔⵠⵠΔ: 165,
        time: 0.2,
        Ⲇᐃⵠ: 5
    }, {
        r: [[165, 1], [121, 8]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 59,
        ΔⵠⵠΔ: 122,
        time: 1 / 5,
        Ⲇᐃⵠ: 5
    }, {
        r: [[122, 1], [202, 5]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 60,
        ΔⵠⵠΔ: 217,
        time: 0.2,
        Ⲇᐃⵠ: 5
    }, {
        r: [[109, 30]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 61,
        ΔⵠⵠΔ: 166,
        time: 1 / 8,
        Ⲇᐃⵠ: 5
    }, {
        r: [[166, 1], [108, 27]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 62,
        ΔⵠⵠΔ: 171,
        time: 0.125,
        Ⲇᐃⵠ: 5
    }, {
        r: [[171, 1], [111, 24]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 63,
        ΔⵠⵠΔ: 172,
        time: 1 / 8,
        Ⲇᐃⵠ: 5
    }, {
        r: [[172, 1], [112, 21]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 64,
        ΔⵠⵠΔ: 173,
        time: 1 / 8,
        Ⲇᐃⵠ: 5
    }, {
        r: [[173, 1], [121, 18]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 65,
        ΔⵠⵠΔ: 124,
        time: 0.125,
        Ⲇᐃⵠ: 5
    }, {
        r: [[124, 1], [202, 15]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 66,
        ΔⵠⵠΔ: 218,
        time: 1 / 8,
        Ⲇᐃⵠ: 5
    }, {
        r: [[162, 1], [109, 40], [108, 30]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 67,
        ΔⵠⵠΔ: 160,
        time: 0.05,
        Ⲇᐃⵠ: 5
    }, {
        r: [[163, 1], [108, 70]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 68,
        ΔⵠⵠΔ: 168,
        time: 1 / 20,
        Ⲇᐃⵠ: 5
    }, {
        r: [[164, 1], [111, 40], [108, 30]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 69,
        ΔⵠⵠΔ: 169,
        time: 1 / 20,
        Ⲇᐃⵠ: 5
    }, {
        r: [[165, 1], [112, 40], [108, 30]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 70,
        ΔⵠⵠΔ: 170,
        time: 1 / 20,
        Ⲇᐃⵠ: 5
    }, {
        r: [[122, 1], [121, 40], [108, 30]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 71,
        ΔⵠⵠΔ: 123,
        time: 1 / 20,
        Ⲇᐃⵠ: 5
    }, {
        r: [[217, 1], [202, 40], [111, 30]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 72,
        ΔⵠⵠΔ: 219,
        time: 1 / 20,
        Ⲇᐃⵠ: 5
    }, {
        r: [[166, 1], [109, 80], [108, 60]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 73,
        ΔⵠⵠΔ: 212,
        time: 0.05,
        Ⲇᐃⵠ: 5
    }, {
        r: [[171, 1], [108, 140]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 74,
        ΔⵠⵠΔ: 213,
        time: 1 / 20,
        Ⲇᐃⵠ: 5
    }, {
        r: [[172, 1], [111, 80], [108, 60]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 75,
        ΔⵠⵠΔ: 214,
        time: 1 / 20,
        Ⲇᐃⵠ: 5
    }, {
        r: [[173, 1], [112, 80], [108, 60]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 76,
        ΔⵠⵠΔ: 215,
        time: 1 / 20,
        Ⲇᐃⵠ: 5
    }, {
        r: [[124, 1], [121, 80], [108, 60]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 77,
        ΔⵠⵠΔ: 216,
        time: 1 / 20,
        Ⲇᐃⵠ: 5
    }, {
        r: [[218, 1], [202, 80], [111, 60]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 78,
        ΔⵠⵠΔ: 220,
        time: 0.05,
        Ⲇᐃⵠ: 5
    }, {
        r: [[109, 25], [111, 2]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 79,
        ΔⵠⵠΔ: 167,
        time: 1 / 5,
        Ⲇᐃⵠ: 4
    }, {
        r: [[120, 1], [2, 1], [161, 2]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 80,
        ΔⵠⵠΔ: 23,
        time: 0.2,
        Ⲇᐃⵠ: 2
    }, {
        r: [[120, 5], [222, 20], [147, 5], [2, 5]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 81,
        ΔⵠⵠΔ: 24,
        time: 1 / 30,
        Ⲇᐃⵠ: 2
    }, {
        r: [[236, 1], [231, 8], [232, 8], [222, 8], [161, 6]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 82,
        ΔⵠⵠΔ: 82,
        time: 1 / 60,
        Ⲇᐃⵠ: 2
    }, {
        r: [[2, 1], [161, 2]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 83,
        ΔⵠⵠΔ: 10,
        time: 1 / 5,
        Ⲇᐃⵠ: 2
    }, {
        r: [[10, 1], [174, 5], [161, 4]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 84,
        ΔⵠⵠΔ: 11,
        time: 1 / 12,
        Ⲇᐃⵠ: 2
    }, {
        r: [[11, 1], [146, 5], [147, 4]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 85,
        ΔⵠⵠΔ: 40,
        time: 1 / 30,
        Ⲇᐃⵠ: 2
    }, {
        r: [[40, 1], [146, 5], [240, 10], [147, 4]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 86,
        ΔⵠⵠΔ: 88,
        time: 0.02,
        Ⲇᐃⵠ: 2
    }, {
        r: [[109, 50]],
        w: 0,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 87,
        ΔⵠⵠΔ: 58,
        time: 0.2,
        Ⲇᐃⵠ: 2
    }, {
        r: [[108, 75], [109, 75], [58, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 88,
        ΔⵠⵠΔ: 25,
        time: 1 / 10,
        Ⲇᐃⵠ: 2
    }, {
        r: [[108, 90], [109, 90], [111, 90], [25, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 89,
        ΔⵠⵠΔ: 26,
        time: 1 / 20,
        Ⲇᐃⵠ: 2
    }, {
        r: [[108, 100], [111, 100], [112, 100], [26, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 90,
        ΔⵠⵠΔ: 27,
        time: 0.03333333333333333,
        Ⲇᐃⵠ: 2
    }, {
        r: [[121, 80], [111, 150], [112, 120], [27, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 91,
        ΔⵠⵠΔ: 43,
        time: 1 / 60,
        Ⲇᐃⵠ: 2
    }, {
        r: [[202, 80], [112, 150], [121, 120], [43, 1]],
        w: 1,
        f: 1,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 92,
        ΔⵠⵠΔ: 44,
        time: 1 / 90,
        Ⲇᐃⵠ: 2
    }, {
        r: [[139, 2], [112, 40], [161, 4]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 93,
        ΔⵠⵠΔ: 48,
        time: 1 / 20,
        Ⲇᐃⵠ: 2
    }, {
        r: [[48, 1], [111, 80], [129, 1], [121, 20]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 94,
        ΔⵠⵠΔ: 47,
        time: 0.011111111111111112,
        Ⲇᐃⵠ: 2
    }, {
        r: [[203, 5], [112, 50], [147, 5]],
        w: 1,
        f: 1,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 95,
        ΔⵠⵠΔ: 20,
        time: 1 / 20,
        Ⲇᐃⵠ: 2
    }, {
        r: [[20, 1], [203, 10], [121, 50]],
        w: 1,
        f: 1,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 96,
        ΔⵠⵠΔ: 21,
        time: 0.016666666666666666,
        Ⲇᐃⵠ: 2
    }, {
        r: [[21, 1], [203, 15], [121, 50], [202, 50]],
        w: 1,
        f: 1,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 97,
        ΔⵠⵠΔ: 22,
        time: 1 / 90,
        Ⲇᐃⵠ: 2
    }, {
        r: [[161, 4], [237, 2]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 98,
        ΔⵠⵠΔ: 80,
        time: 1 / 15,
        Ⲇᐃⵠ: 2
    }, {
        r: [[80, 1], [161, 6], [237, 4], [232, 12], [222, 4]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 99,
        ΔⵠⵠΔ: 81,
        time: 0.006666666666666667,
        Ⲇᐃⵠ: 2
    }, {
        r: [[161, 6], [174, 5]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 100,
        ΔⵠⵠΔ: 29,
        time: 0.06666666666666667,
        Ⲇᐃⵠ: 2
    }, {
        r: [[109, 20]],
        w: 0,
        f: 1,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 101,
        ΔⵠⵠΔ: 120,
        time: 1 / 3,
        Ⲇᐃⵠ: 4
    }, {
        r: [[112, 1], [161, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 102,
        ΔⵠⵠΔ: 147,
        time: 1 / 3,
        Ⲇᐃⵠ: 4
    }, {
        r: [[111, 10]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 103,
        ΔⵠⵠΔ: 148,
        time: 1 / 5,
        Ⲇᐃⵠ: 4
    }, {
        r: [[111, 250]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 104,
        ΔⵠⵠΔ: 158,
        time: 0.016666666666666666,
        Ⲇᐃⵠ: 4
    }, {
        r: [[109, 50]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 105,
        ΔⵠⵠΔ: 159,
        time: 1 / 10,
        Ⲇᐃⵠ: 4
    }, {
        r: [[109, 15]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 106,
        ΔⵠⵠΔ: 125,
        time: 1 / 5,
        Ⲇᐃⵠ: 4
    }, {
        r: [[109, 30]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 107,
        ΔⵠⵠΔ: 190,
        time: 1 / 5,
        Ⲇᐃⵠ: 4
    }, {
        r: [[109, 120]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 108,
        ΔⵠⵠΔ: 221,
        time: 1 / 15,
        Ⲇᐃⵠ: 4
    }, {
        r: [[109, 20], [140, 15]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 109,
        ΔⵠⵠΔ: 141,
        time: 0.2,
        Ⲇᐃⵠ: 4
    }, {
        r: [[126, 25]],
        w: 1,
        f: 1,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 110,
        ΔⵠⵠΔ: 128,
        time: 1 / 5,
        Ⲇᐃⵠ: 3
    }, {
        r: [[128, 1]],
        w: 0,
        f: 0,
        ᐃⵠⵠ: 1,
        e: 0,
        id: 111,
        ΔⵠⵠΔ: 127,
        time: 1 / 5,
        Ⲇᐃⵠ: 3
    }, {
        r: [[142, 20], [128, 1]],
        w: 0,
        f: 1,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 112,
        ΔⵠⵠΔ: 127,
        time: 0.1,
        Ⲇᐃⵠ: 3
    }, {
        r: [[128, 1]],
        w: 0,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 1,
        id: 113,
        ΔⵠⵠΔ: 127,
        time: 0.3333333333333333,
        Ⲇᐃⵠ: 3
    }, {
        r: [[109, 60], [108, 20], [161, 2]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 114,
        ΔⵠⵠΔ: 135,
        time: 1 / 10,
        Ⲇᐃⵠ: 4
    }, {
        r: [[112, 40], [108, 45]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 115,
        ΔⵠⵠΔ: 151,
        time: 1 / 20,
        Ⲇᐃⵠ: 4
    }, {
        r: [[151, 1], [234, 40], [238, 1]],
        w: 1,
        f: 1,
        ᐃⵠⵠ: 1,
        e: 0,
        id: 116,
        ΔⵠⵠΔ: 152,
        time: 0.005,
        Ⲇᐃⵠ: 4
    }, {
        r: [[109, 50], [108, 100]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 117,
        ΔⵠⵠΔ: 153,
        time: 0.011111111111111112,
        Ⲇᐃⵠ: 4
    }, {
        r: [[108, 60], [111, 120]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 118,
        ΔⵠⵠΔ: 154,
        time: 0.011111111111111112,
        Ⲇᐃⵠ: 4
    }, {
        r: [[111, 70], [112, 140]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 119,
        ΔⵠⵠΔ: 155,
        time: 1 / 90,
        Ⲇᐃⵠ: 4
    }, {
        r: [[112, 80], [121, 160]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 120,
        ΔⵠⵠΔ: 156,
        time: 0.011111111111111112,
        Ⲇᐃⵠ: 4
    }, {
        r: [[121, 90], [202, 180]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 121,
        ΔⵠⵠΔ: 157,
        time: 1 / 90,
        Ⲇᐃⵠ: 4
    }, {
        r: [[108, 70]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 122,
        ΔⵠⵠΔ: 55,
        time: 1 / 10,
        Ⲇᐃⵠ: 0
    }, {
        r: [[108, 70], [109, 50]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 123,
        ΔⵠⵠΔ: 56,
        time: 1 / 10,
        Ⲇᐃⵠ: 0
    }, {
        r: [[109, 40], [108, 40]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 124,
        ΔⵠⵠΔ: 144,
        time: 1 / 10,
        Ⲇᐃⵠ: 4
    }, {
        r: [[143, 1], [117, 1]],
        w: 0,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 125,
        ΔⵠⵠΔ: 145,
        time: 1 / 3,
        Ⲇᐃⵠ: 3
    }, {
        r: [[147, 30], [184, 1], [121, 150], [149, 3]],
        w: 1,
        f: 1,
        ᐃⵠⵠ: 1,
        e: 0,
        id: 126,
        ΔⵠⵠΔ: 59,
        time: 0.008333333333333333,
        Ⲇᐃⵠ: 2
    }, {
        r: [[59, 1], [186, 1], [202, 150], [150, 2]],
        w: 1,
        f: 1,
        ᐃⵠⵠ: 1,
        e: 0,
        id: 127,
        ΔⵠⵠΔ: 60,
        time: 1 / 180,
        Ⲇᐃⵠ: 2
    }, {
        r: [[26, 1], [197, 10], [196, 10], [161, 10]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 128,
        ΔⵠⵠΔ: 61,
        time: 0.016666666666666666,
        Ⲇᐃⵠ: 2
    }, {
        r: [[147, 20], [185, 1], [121, 150], [149, 3]],
        w: 1,
        f: 1,
        ᐃⵠⵠ: 1,
        e: 0,
        id: 129,
        ΔⵠⵠΔ: 62,
        time: 0.008333333333333333,
        Ⲇᐃⵠ: 1
    }, {
        r: [[62, 1], [187, 1], [202, 150], [150, 2]],
        w: 1,
        f: 1,
        ᐃⵠⵠ: 1,
        e: 0,
        id: 130,
        ΔⵠⵠΔ: 63,
        time: 1 / 180,
        Ⲇᐃⵠ: 1
    }, {
        r: [[109, 100], [161, 4]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 131,
        ΔⵠⵠΔ: 64,
        time: 1 / 20,
        Ⲇᐃⵠ: 1
    }, {
        r: [[109, 30]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 132,
        ΔⵠⵠΔ: 101,
        time: 1 / 5,
        Ⲇᐃⵠ: 1
    }, {
        r: [[108, 200], [161, 8], [222, 4], [64, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 133,
        ΔⵠⵠΔ: 65,
        time: 0.04,
        Ⲇᐃⵠ: 1
    }, {
        r: [[108, 20], [231, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 134,
        ΔⵠⵠΔ: 102,
        time: 1 / 5,
        Ⲇᐃⵠ: 1
    }, {
        r: [[111, 200], [161, 12], [231, 4], [222, 4], [65, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 135,
        ΔⵠⵠΔ: 66,
        time: 1 / 30,
        Ⲇᐃⵠ: 1
    }, {
        r: [[111, 20], [222, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 136,
        ΔⵠⵠΔ: 103,
        time: 0.1,
        Ⲇᐃⵠ: 1
    }, {
        r: [[112, 200], [147, 10], [231, 8], [222, 8], [66, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 137,
        ΔⵠⵠΔ: 67,
        time: 0.02857142857142857,
        Ⲇᐃⵠ: 1
    }, {
        r: [[112, 10], [222, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 138,
        ΔⵠⵠΔ: 104,
        time: 1 / 10,
        Ⲇᐃⵠ: 1
    }, {
        r: [[121, 200], [147, 10], [222, 8], [232, 8], [67, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 139,
        ΔⵠⵠΔ: 68,
        time: 1 / 40,
        Ⲇᐃⵠ: 1
    }, {
        r: [[121, 10], [232, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 140,
        ΔⵠⵠΔ: 105,
        time: 1 / 15,
        Ⲇᐃⵠ: 1
    }, {
        r: [[202, 200], [147, 10], [129, 1], [68, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 141,
        ΔⵠⵠΔ: 69,
        time: 1 / 45,
        Ⲇᐃⵠ: 1
    }, {
        r: [[202, 10], [232, 1], [203, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 142,
        ΔⵠⵠΔ: 106,
        time: 1 / 15,
        Ⲇᐃⵠ: 1
    }, {
        r: [[234, 200], [147, 10], [185, 1], [69, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 143,
        ΔⵠⵠΔ: 70,
        time: 0.02,
        Ⲇᐃⵠ: 1
    }, {
        r: [[234, 10], [238, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 144,
        ΔⵠⵠΔ: 107,
        time: 1 / 20,
        Ⲇᐃⵠ: 1
    }, {
        r: [[109, 100]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 145,
        ΔⵠⵠΔ: 71,
        time: 0.04,
        Ⲇᐃⵠ: 1
    }, {
        r: [[71, 1], [108, 100], [109, 50]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 146,
        ΔⵠⵠΔ: 72,
        time: 1 / 40,
        Ⲇᐃⵠ: 1
    }, {
        r: [[72, 1], [111, 50], [108, 50], [109, 50]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 147,
        ΔⵠⵠΔ: 73,
        time: 0.02,
        Ⲇᐃⵠ: 1
    }, {
        r: [[73, 1], [112, 50], [111, 50], [108, 50]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 148,
        ΔⵠⵠΔ: 74,
        time: 1 / 70,
        Ⲇᐃⵠ: 1
    }, {
        r: [[74, 1], [121, 50], [112, 50], [111, 50]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 149,
        ΔⵠⵠΔ: 75,
        time: 1 / 90,
        Ⲇᐃⵠ: 1
    }, {
        r: [[75, 1], [202, 50], [121, 50], [112, 50]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 150,
        ΔⵠⵠΔ: 76,
        time: 1 / 120,
        Ⲇᐃⵠ: 1
    }, {
        r: [[175, 1], [111, 200]],
        w: 1,
        f: 1,
        ᐃⵠⵠ: 1,
        e: 0,
        id: 151,
        ΔⵠⵠΔ: 77,
        time: 0.016666666666666666,
        Ⲇᐃⵠ: 2
    }, {
        r: [[176, 1], [111, 200]],
        w: 1,
        f: 1,
        ᐃⵠⵠ: 1,
        e: 0,
        id: 152,
        ΔⵠⵠΔ: 78,
        time: 1 / 60,
        Ⲇᐃⵠ: 2
    }, {
        r: [[177, 1], [111, 200], [149, 1]],
        w: 1,
        f: 1,
        ᐃⵠⵠ: 1,
        e: 0,
        id: 153,
        ΔⵠⵠΔ: 79,
        time: 1 / 60,
        Ⲇᐃⵠ: 2
    }, {
        r: [[174, 10], [2, 5], [161, 6]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 154,
        ΔⵠⵠΔ: 83,
        time: 1 / 10,
        Ⲇᐃⵠ: 2
    }, {
        r: [[2, 3], [161, 2]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 155,
        ΔⵠⵠΔ: 84,
        time: 0.1,
        Ⲇᐃⵠ: 2
    }, {
        r: [[83, 1], [179, 1], [146, 15], [147, 5], [222, 8]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 156,
        ΔⵠⵠΔ: 85,
        time: 0.016666666666666666,
        Ⲇᐃⵠ: 2
    }, {
        r: [[84, 1], [178, 1], [146, 10], [147, 5], [222, 8]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 157,
        ΔⵠⵠΔ: 86,
        time: 1 / 60,
        Ⲇᐃⵠ: 2
    }, {
        r: [[181, 1]],
        w: 0,
        f: 0,
        ᐃⵠⵠ: 1,
        e: 0,
        id: 158,
        ΔⵠⵠΔ: 180,
        time: 1 / 5,
        Ⲇᐃⵠ: 0
    }, {
        r: [[109, 20], [161, 1]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 159,
        ΔⵠⵠΔ: 181,
        time: 1 / 5,
        Ⲇᐃⵠ: 0
    }, {
        r: [[108, 100], [140, 30]],
        w: 1,
        f: 1,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 160,
        ΔⵠⵠΔ: 182,
        time: 1 / 10,
        Ⲇᐃⵠ: 4
    }, {
        r: [[109, 20]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 161,
        ΔⵠⵠΔ: 183,
        time: 0.2,
        Ⲇᐃⵠ: 4
    }, {
        r: [[109, 100], [108, 50], [2, 5], [174, 5], [161, 6]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 162,
        ΔⵠⵠΔ: 198,
        time: 1 / 20,
        Ⲇᐃⵠ: 4
    }, {
        r: [[109, 250], [147, 10], [146, 2], [139, 2]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 163,
        ΔⵠⵠΔ: 223,
        time: 0.02,
        Ⲇᐃⵠ: 4
    }, {
        r: [[109, 250], [161, 10], [146, 2], [222, 8]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 164,
        ΔⵠⵠΔ: 224,
        time: 0.02,
        Ⲇᐃⵠ: 4
    }, {
        r: [[161, 10], [174, 6], [2, 4], [126, 50]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 165,
        ΔⵠⵠΔ: 89,
        time: 1 / 20,
        Ⲇᐃⵠ: 4
    }, {
        r: [[109, 250], [161, 10], [120, 10], [231, 8]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 166,
        ΔⵠⵠΔ: 230,
        time: 1 / 50,
        Ⲇᐃⵠ: 4
    }, {
        r: [[109, 40]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 167,
        ΔⵠⵠΔ: 94,
        time: 1 / 5,
        Ⲇᐃⵠ: 1
    }, {
        r: [[94, 1], [108, 40], [109, 50]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 168,
        ΔⵠⵠΔ: 95,
        time: 1 / 10,
        Ⲇᐃⵠ: 1
    }, {
        r: [[95, 1], [111, 40], [108, 50], [109, 60]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 169,
        ΔⵠⵠΔ: 96,
        time: 0.05,
        Ⲇᐃⵠ: 1
    }, {
        r: [[96, 1], [112, 40], [111, 70], [108, 80]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 170,
        ΔⵠⵠΔ: 97,
        time: 1 / 30,
        Ⲇᐃⵠ: 1
    }, {
        r: [[97, 1], [121, 40], [112, 70], [111, 110]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 171,
        ΔⵠⵠΔ: 98,
        time: 0.016666666666666666,
        Ⲇᐃⵠ: 1
    }, {
        r: [[98, 1], [202, 50], [121, 80], [112, 110]],
        w: 1,
        f: 0,
        ᐃⵠⵠ: 0,
        e: 0,
        id: 172,
        ΔⵠⵠΔ: 99,
        time: 1 / 90,
        Ⲇᐃⵠ: 1
    }];
    function ut(b, c, d, e) {
        ri(Db, b, c, d, e);
        const f = function (a, b, c, d) {
            ei(Db, a, b, c, d);
            const e = bx(Ib[0], Ib[1]);
            mb(Ib[2], Ib[3], Ib[0], Ib[1], Ib[2]);
            return ~(e & 49222) & 49222 | ~(e & 49222) & e;
        }(Ib[0], Ib[1], Ib[2], Ib[3]);
        const g = sr(Ib[0], Ib[1], Ib[2]);
        return (24 << ((f ^ g) >> 0 & 255)) + (16 << ((f ^ g) >> 8 & 255)) + (0 << ((f ^ g) >> 16 & 255)) + (8 << ((f ^ g) >> 24 & 255));
    }
    function eb(b, c, d, e, f) {
        const g = (16 << (b >> 8 & 255)) + (0 << (b & 255)) + (8 << (b >> 24 & 255)) + (24 << (b >> 16 & 255));
        const a = ~(c & 62483) & c | ~(c & 62483) & 62483;
        const i = ~(d & 63210) & d | ~(d & 63210) & 63210;
        const j = (2531011 + (f + 54163) * 214013) % 4294967296;
        return (6951 + (hx(g, a, i, ~(e & 10151) & (e | 10151)) ^ hx(j, g, a, i))) % 65331;
    }
    function ib(b, c, d, e, f) {
        const g = (2531011 + (b + 30119) * 214013) % 4294967296;
        const a = (1 + (c + 60608) * 22695477) % 4294967296;
        const i = ~(d & 22065) & 22065 | ~(d & 22065) & d;
        const j = e ^ 18122;
        const h = xr(g, a, i, j, (f | 418) & ~(f & 418), g);
        Nx(a, i, j);
        return h ^ 18818;
    }
    const tb = 4;
    function nb(b, c, d, e, f, g) {
        vj(Db, b, c, d, e, f, g);
        return ((240 + (lx(Ib[0], Ib[1]) ^ In(Ib[2], Ib[3], Ib[4]))) * 16807 + 0) % 2147483647;
    }
    Er = 300;
    ⲆⵠⲆ = {
        ΔⵠⵠⵠΔⵠΔ: 300,
        ΔⵠⲆᐃΔΔⲆ: 301,
        ᐃΔⵠⵠⵠᐃⵠ: 302,
        ΔΔΔⲆᐃⲆⲆ: 303,
        ⲆⵠⵠⲆᐃⵠΔ: 304,
        ⵠⵠⵠⲆΔⵠᐃ: 305,
        ΔᐃᐃⲆΔᐃⲆ: 306,
        ᐃⵠⵠᐃⵠⲆᐃ: 307,
        ⲆⵠΔⵠᐃΔΔ: 308,
        ⲆⲆᐃⲆΔⲆⵠ: 309,
        ⲆⲆⵠΔⲆᐃᐃ: 310,
        ⵠΔⵠⲆᐃⵠᐃ: 311,
        EMPTY: 312,
        ΔᐃⲆᐃⲆΔᐃ: 313,
        ᐃΔΔⵠᐃᐃⲆ: 314,
        ⲆⲆⲆⲆΔᐃᐃ: 315,
        ⵠΔⵠᐃᐃΔΔ: 316,
        ⲆᐃⵠᐃᐃΔᐃ: 317,
        ᐃⲆⲆⲆⵠⵠⵠ: 318,
        ᐃⲆᐃⵠⲆΔⵠ: 319,
        ᐃᐃⲆᐃⵠⲆⵠ: 320,
        ᐃΔⲆΔⲆΔᐃ: 321,
        ⲆⵠⲆⵠᐃ: 322,
        ᐃᐃⲆⵠⲆⲆΔ: 323,
        ⵠΔⲆᐃΔ: 324,
        ⵠⲆⲆⵠⲆᐃΔ: 325,
        ᐃⵠΔⲆΔⵠΔ: 326,
        ⵠⲆᐃⲆΔⵠΔ: 327,
        ⵠⲆⵠⵠⲆⵠΔ: 328,
        ᐃΔᐃᐃⵠⵠⲆ: 329,
        ⲆⲆⲆᐃⵠⵠᐃ: 330,
        ⵠⲆΔⲆⲆⵠᐃ: 331,
        POINTS: 332,
        ⵠⵠᐃΔⲆᐃᐃ: 333,
        ⵠⲆⲆΔΔⲆᐃ: 334,
        ⲆⵠᐃᐃᐃⵠΔ: 335,
        ⲆᐃΔⵠⵠΔᐃ: 336,
        ⲆⵠᐃᐃⵠⲆᐃ: 337,
        ΔⵠⵠⵠΔΔΔ: 338,
        ⲆᐃⲆΔᐃᐃΔ: 339,
        ⲆΔΔⵠⲆⲆᐃ: 340,
        ΔᐃⵠⵠΔⲆⲆ: 341,
        ᐃᐃⲆⲆᐃⵠⲆ: 342,
        ⲆΔⵠⵠΔⵠΔ: 343
    };
    const ob = 7;
    const ab = 12;
    function rb() {
        yb[99] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
        yb[98] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
        yb[97] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
        yb[96] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
        yb[95] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
        yb[94] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
        yb[153] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
        yb[154] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
        yb[155] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
        yb[156] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
        yb[157] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
        yb[76] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
        yb[75] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
        yb[74] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
        yb[73] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
        yb[72] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
        yb[71] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
        yb[56] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
        yb[221] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
        yb[107] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
        yb[70] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
        yb[106] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
        yb[69] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
        yb[105] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
        yb[68] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
        yb[104] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
        yb[67] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
        yb[103] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
        yb[66] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
        yb[102] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
        yb[65] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
        yb[101] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
        yb[64] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
        yb[152] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
        yb[237] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
        yb[240] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
        yb[232] = ["Vulture Feather", "From a deadly vulture"];
        yb[234] = ["Emerald", "How many golden breads can you get from it?"];
        yb[238] = ["Sand Worm Juice", "I don't want to know how you got this."];
        yb[80] = ["Turban", "Useful to survive in the desert."];
        yb[81] = ["Ninja outfit", "Essential to survive in the desert"];
        yb[82] = ["Pilot Hat", "Take off and land with flying objects much faster."];
        yb[236] = ["Pilot Glasses"];
        yb[225] = ["Tamed Boar", "Fast on lands and slow on water."];
        yb[239] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
        yb[226] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
        yb[227] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
        yb[228] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
        yb[229] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
        yb[89] = ["Saddle", "Hit a boar with it to tame it."];
        yb[90] = ["Witch Hat", "You're a wizard Starvy!"];
        yb[91] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
        yb[92] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
        yb[93] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
        yb[100] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
        yb[24] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
        yb[224] = ["Sled", "You are faster with it in the snow"];
        yb[223] = ["Boat", "You are faster with it in the water"];
        yb[230] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
        yb[39] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"];
        yb[222] = ["Penguin Feather", "From a deadly cute penguin."];
        yb[231] = ["Hawk Feather", "From a deadly hawk."];
        yb[233] = ["Cactus", "Food : 20", "Water : 10"];
        yb[211] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
        yb[210] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
        yb[209] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
        yb[208] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
        yb[218] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
        yb[217] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
        yb[219] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
        yb[220] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
        yb[32] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
        yb[212] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
        yb[213] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
        yb[214] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
        yb[215] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
        yb[216] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
        yb[205] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
        yb[207] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
        yb[204] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        yb[206] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        yb[53] = ["Pitchfork", "Perfect for gathering"];
        yb[54] = ["Golden Pitchfork", "Essential for a real farmer."];
        yb[235] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
        yb[Xr.ⲆΔⵠⵠᐃⲆΔ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
        yb[Xr.ⵠᐃᐃΔᐃⵠⲆ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
        yb[Xr.ᐃⵠⵠᐃⵠⵠΔ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
        yb[Xr.ⵠⲆⵠᐃⵠᐃⲆ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
        yb[Xr.ΔΔΔΔⲆᐃΔ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
        yb[186] = ["Lava Cube", "You feel an immense power emanating from this cube"];
        yb[187] = ["Lava Orb", "You feel an immense power emanating from this orb"];
        yb[63] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
        yb[17] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
        yb[150] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
        yb[60] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
        yb[34] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
        yb[19] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
        yb[203] = ["Flame", "It's hot!"];
        yb[20] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
        yb[21] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
        yb[22] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
        yb[202] = ["Reidite", "The ultimate ore"];
        yb[184] = ["Dragon Cube", "You feel a great power emanating from this cube"];
        vt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        vt[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
        vt[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
        vt[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
        vt[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
        vt[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
        vt[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
        vt[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
        vt[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
        vt[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
        vt[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
        vt[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
        vt[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
        vt[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
        vt[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
        vt[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
        vt[38] = ["You died crushed by an angry baby mammoth."];
        vt[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
        vt[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
        yb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        yb[341] = "A sandstorm is approaching in a few seconds.";
        yb[340] = "The sandstorm will soon stop.";
        yb[343] = "A blizzard is approaching in a few seconds.";
        yb[342] = "The blizzard will soon stop.";
        yb[328] = " BACK TO THE GAME";
        yb[329] = " Share on Twitter";
        yb[330] = " Share on Facebook";
        yb[331] = "You can buy items on the shop in the next game with your points";
        yb[332] = "points";
        yb[333] = "Score";
        yb[334] = "Kill";
        yb[335] = "Days survived";
        yb[336] = "Building method: Free. Press G to change";
        yb[337] = "Building method: Grid. Press G to change";
        yb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        yb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
        yb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
        yb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        yb[7] = ["Hand"];
        yb[140] = ["Dirt", "Dirty!"];
        yb[126] = ["Sand", "I got it in my eyes!"];
        yb[109] = ["Wood", "You can't get enough of it!"];
        yb[108] = ["Stone", "Also called a rock"];
        yb[111] = ["Gold", "Be generous, give it to others"];
        yb[112] = ["Diamond", "What will you make with it?"];
        yb[121] = ["Amethyst", "It's Mauve like Lapa"];
        yb[131] = ["Flour", "Used in cooking"];
        yb[133] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
        yb[136] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
        yb[116] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
        yb[117] = ["Cooked meat", "A rare steak, please", "Food: 35"];
        yb[137] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
        yb[138] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
        yb[143] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
        yb[145] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
        yb[200] = ["Candies", "Only for children!", "Food: 20"];
        yb[199] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
        yb[201] = ["Garland", "Perfect decoration for roofs"];
        yb[115] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
        yb[110] = ["Berry", "Berry tasty!", "Food: 10"];
        yb[132] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
        yb[134] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
        yb[188] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
        yb[189] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
        yb[191] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        yb[192] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
        yb[193] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
        yb[194] = ["Thorn bush", "It stings!"];
        yb[141] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
        yb[142] = ["Ice", "Useful for making cakes and water"];
        yb[55] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
        yb[174] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
        yb[2] = ["Rabbit Fur", "That rabbit was so cute..."];
        yb[178] = ["Pure Fur", "You're a bread factory"];
        yb[179] = ["Dark Fur", "You get ready to do something wrong"];
        yb[146] = ["Winter Fur", "These animals just wanted a hug..."];
        yb[139] = ["Scales", "It smells like fish!"];
        yb[129] = ["Kraken Skin", "Weren't you too scared?"];
        yb[113] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
        yb[118] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
        yb[114] = ["Workbench", "Very useful to craft all kinds of objects"];
        yb[161] = ["Cord", "Used in crafting Hats and Bag"];
        yb[147] = ["Diamond Cord", "Used in crafting Special Hats"];
        yb[167] = ["Chest", "Allows you to store items", "Durability: 500"];
        yb[57] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
        yb[0] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
        yb[5] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
        yb[6] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
        yb[9] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
        yb[30] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
        yb[62] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
        yb[16] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
        yb[8] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
        yb[1] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
        yb[3] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
        yb[4] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
        yb[31] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
        yb[35] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
        yb[36] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
        yb[37] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
        yb[38] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
        yb[45] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"];
        yb[12] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
        yb[13] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
        yb[14] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
        yb[15] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
        yb[33] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
        yb[46] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
        yb[50] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
        yb[51] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
        yb[52] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
        yb[58] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
        yb[25] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
        yb[26] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
        yb[27] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
        yb[43] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
        yb[44] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
        yb[59] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
        yb[23] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
        yb[41] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
        yb[42] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
        yb[83] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
        yb[10] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
        yb[11] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
        yb[40] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
        yb[88] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
        yb[84] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
        yb[85] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
        yb[86] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
        yb[48] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
        yb[47] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
        yb[185] = ["Dragon Orb", "You feel a great power emanating from this orb"];
        yb[149] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
        yb[175] = ["Green Gemstone", "You didn't cheat, promise?"];
        yb[176] = ["Orange Gemstone", "Only a real pirate can find it!"];
        yb[177] = ["Blue Gemstone", "For too kind people"];
        yb[77] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
        yb[78] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
        yb[79] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
        yb[180] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
        yb[181] = ["Empty Bucket", "You need to fill this bucket near a water source"];
        yb[127] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
        yb[128] = ["Empty Bottle", "You can fill this bottle near a water source"];
        yb[130] = ["Empty Watering Can", "You must fill it with a water source to use it"];
        yb[49] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
        yb[29] = ["Bag", "More space for your items!"];
        yb[120] = ["Paper", "Used in book-crafting"];
        yb[28] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
        yb[195] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
        yb[148] = ["Lock", "Allow you to lock your chest"];
        yb[158] = ["Lock-pick", "Allows you to unlock one chest"];
        yb[159] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
        yb[125] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
        yb[183] = ["Sign", "Leave a message to others", "Durability: 200"];
        yb[190] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
        yb[182] = ["Well", "Allows bottle filling", "Durability: 1000"];
        yb[162] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
        yb[163] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
        yb[164] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
        yb[165] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
        yb[122] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
        yb[160] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
        yb[168] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
        yb[169] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
        yb[170] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
        yb[123] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
        yb[166] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
        yb[171] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
        yb[172] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
        yb[173] = ["Diamond Door", "For a shining house", "Durability: 2500"];
        yb[124] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
        yb[119] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
        yb[135] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
        yb[144] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
        yb[151] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
        yb[300] = "You cannot join this server";
        yb[301] = "Kicked: ";
        yb[302] = "Your key is already used by someone else";
        yb[303] = "Your key is wrong";
        yb[304] = "You have an old version, you need to clear your cache";
        yb[338] = "Your client version is too recent for this server. The server is being updated";
        yb[339] = "Wrong password! To enter a password: https://starve.io/?password=...";
        yb[305] = "There are no more new resources";
        yb[306] = "You survived 1 day";
        yb[307] = "You survived ";
        yb[308] = " days";
        yb[309] = "You are dead ;-;";
        yb[310] = "Server cannot find spawn location! Spam the play button!";
        yb[311] = "Server is full! Spam the play button!";
        yb[312] = "Resource is empty";
        yb[313] = "Inventory is full (right-click to empty items)";
        yb[314] = " is dead";
        yb[315] = "This is not the right tool";
        yb[316] = "You joined a team";
        yb[317] = "You are dead";
        yb[318] = " joined the team";
        yb[319] = "Your team was destroyed";
        yb[320] = "You left the team";
        yb[321] = " left the team";
        yb[322] = "Someone stole your token :>";
        yb[323] = "Choose a server";
        yb[324] = "players";
        yb[325] = "total players";
        yb[326] = "players on this mode";
        yb[327] = "Coming soon...";
        document.getElementById("nickname_input").placeholder = "Nickname";
        vt[0] = ["You were killed for no reason"];
        vt[1] = ["You starved to death, as the name of the game implies"];
        vt[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
        vt[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
        vt[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
        vt[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
        vt[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
        vt[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
        vt[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
        vt[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
        vt[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
        vt[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
        vt[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
        vt[13] = ["You died of thirst. Better drink your own piss."];
        vt[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
        vt[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
        vt[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
        vt[17] = ["Your skin's falling apart, the sun killed you."];
        vt[18] = ["Garlic stored in your pockets boiled your brain."];
        vt[19] = ["As a vampire, don't stand near the garlic cloves."];
        vt[20] = ["You ate garlic as a vampire, what did you expect?"];
        vt[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
        ⵠΔᐃⵠᐃ = "Uuunnnggg";
        ⲆⲆⵠΔΔΔⵠ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
    }
    function sb() {
        yb[184] = ["You feel a great power emanating from this orb"];
        vt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        yb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        yb[328] = " BACK TO THE GAME";
        yb[329] = " Share on Twitter";
        yb[330] = " Share on Facebook";
        yb[331] = "You can buy items on the shop in the next game with your points";
        yb[332] = "points";
        yb[333] = "Score";
        yb[334] = "Kill";
        yb[335] = "Days survived";
        yb[336] = "Building method: Free. Press G to change";
        yb[337] = "Building method: Grid. Press G to change";
        yb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        yb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        yb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        yb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        yb[7] = ["Рука"];
        yb[140] = ["Земля", "Грязно!"];
        yb[126] = ["Песок", "Он в моих глазах!"];
        yb[109] = ["Дерево", "Постоянно нужно больше!"];
        yb[108] = ["Камень", "Твердый"];
        yb[111] = ["Золото", "Будьте щедры, давайте его другим"];
        yb[112] = ["Алмаз", "Что вы создадите с помощью него?"];
        yb[121] = ["Аметист", "Он сиреневый, как Lapa"];
        yb[131] = ["Мука", "Используется в готовке"];
        yb[133] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
        yb[136] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
        yb[116] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
        yb[117] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
        yb[137] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
        yb[138] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
        yb[143] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
        yb[145] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
        yb[200] = ["Конфеты", "Только для детей!", "Еда: 20"];
        yb[199] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
        yb[201] = ["Гирлянда", "Прекрасная декорация для крыши"];
        yb[115] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
        yb[110] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
        yb[132] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
        yb[134] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
        yb[188] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
        yb[189] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
        yb[191] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
        yb[192] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
        yb[193] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
        yb[194] = ["Колючий Куст", "Это больно!"];
        yb[141] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
        yb[142] = ["Лёд", "Используется для изготовления тортов и воды"];
        yb[55] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
        yb[174] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
        yb[2] = ["Шкура Зайца", "Этот кролик был таким милым..."];
        yb[178] = ["Чистая Шкура", "Вы - фабрика хлеба"];
        yb[179] = ["Чёрная Шкура", "Вы готовы делать зло."];
        yb[146] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
        yb[139] = ["Чешуя", "Она пахнет рыбой!"];
        yb[129] = ["Шкура Кракена", "Вы не испугались?"];
        yb[113] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
        yb[118] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
        yb[114] = ["Верстак", "Необходим для создания многих предметов"];
        yb[161] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
        yb[147] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
        yb[167] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
        yb[57] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
        yb[0] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
        yb[5] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
        yb[6] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
        yb[9] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
        yb[30] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
        yb[62] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
        yb[16] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
        yb[8] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
        yb[1] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
        yb[3] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
        yb[4] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
        yb[31] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
        yb[35] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
        yb[36] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
        yb[37] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
        yb[38] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
        yb[45] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
        yb[12] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
        yb[13] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
        yb[14] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
        yb[15] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
        yb[33] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
        yb[46] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
        yb[50] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
        yb[51] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
        yb[52] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
        yb[58] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
        yb[25] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
        yb[26] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
        yb[27] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
        yb[43] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
        yb[59] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
        yb[23] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
        yb[41] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
        yb[42] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
        yb[83] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
        yb[10] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
        yb[11] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
        yb[40] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
        yb[84] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
        yb[85] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
        yb[86] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
        yb[48] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
        yb[47] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
        yb[185] = ["Шар Дракона", "Даётся за квест"];
        yb[149] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
        yb[175] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
        yb[176] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
        yb[177] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
        yb[77] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
        yb[78] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
        yb[79] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
        yb[180] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
        yb[181] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
        yb[127] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
        yb[128] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
        yb[130] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
        yb[49] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
        yb[29] = ["Рюкзак", "Больше места для ваших предметов!"];
        yb[120] = ["Бумага", "Используется при создании книги"];
        yb[28] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
        yb[195] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
        yb[148] = ["Замок", "Позволяет вам закрыть ваш сундук"];
        yb[158] = ["Ключ", "Даёт вам открыть один запертый сундук"];
        yb[159] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
        yb[125] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
        yb[183] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
        yb[190] = ["Крыша", "Немного скрывает вас и согревает!"];
        yb[182] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
        yb[162] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
        yb[163] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
        yb[164] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
        yb[165] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
        yb[122] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
        yb[160] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
        yb[168] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
        yb[169] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
        yb[170] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
        yb[123] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
        yb[166] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
        yb[171] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
        yb[172] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
        yb[173] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
        yb[124] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
        yb[119] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
        yb[135] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
        yb[144] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
        yb[151] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
        yb[300] = "Вы не можете зайти на этот сервер";
        yb[301] = "Выгнаны: ";
        yb[302] = "Ваш ключ уже используется кем-то";
        yb[303] = "Ваш ключ неправильный";
        yb[304] = "У вас старая версия, вам нужно очистить кеш";
        yb[305] = "Ресурсов больше нет";
        yb[306] = "Вы выжили 1 день";
        yb[307] = "Вы выжили ";
        yb[308] = " дней";
        yb[309] = "Вы умерли ;-;";
        yb[310] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
        yb[311] = "Сервер заполнен! Спамьте кнопку играть!";
        yb[312] = "Ресурсы закончились";
        yb[313] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
        yb[314] = " умер";
        yb[315] = "Это не тот инструмент";
        yb[316] = "Вы вошли в команду";
        yb[317] = "Вы умерли";
        yb[318] = " вошёл в команду";
        yb[319] = "Ваша команда была разрушена";
        yb[320] = "Вы покинули команду";
        yb[321] = " покинул команду";
        yb[322] = "Кто-то использует ваш токен :>";
        yb[323] = "Выберите сервер";
        yb[324] = "игроков";
        yb[325] = "игроков всего";
        yb[326] = "игроков в этом режиме";
        yb[327] = "Скоро...";
        document.getElementById("nickname_input").placeholder = "Имя";
        vt[0] = ["Вы были убиты без причины"];
        vt[1] = ["Вы умерли от голода, как название игры подразумевает это"];
        vt[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
        vt[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
        vt[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
        vt[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
        vt[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
        vt[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
        vt[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
        vt[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
        vt[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
        vt[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
        vt[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
        vt[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
        vt[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
        vt[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
        vt[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
        vt[17] = ["Твоя кожа разваливается, солнце убило тебя"];
        vt[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
        vt[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
        vt[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
        vt[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
        ⵠΔᐃⵠᐃ = "Uuunnnggg";
        ⲆⲆⵠΔΔΔⵠ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
    }
    function hb(b, c, d, e, f) {
        const i = (28080 + b) % 65521;
        const a = (0 << (c & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (16 << (c >> 16 & 255));
        const j = d ^ 18573;
        const k = ((11283 + e) * 1664525 + 1013904223) % 4294967296;
        const h = (16 << (f >> 8 & 255)) + (8 << (f & 255)) + (0 << (f >> 16 & 255)) + (24 << (f >> 24 & 255));
        const l = vr(i, a, j, k);
        xr(h, i, a, j, k, h);
        return (l | 48254) & ~(l & 48254);
    }
    function lb(a) {
        return function (b, c, d, e, f) {
            const i = b ^ 27457;
            const a = (2531011 + (55423 + c) * 214013) % 4294967296;
            const j = d ^ 15902;
            const k = (8 << (e & 255)) + (0 << (e >> 24 & 255)) + (16 << (e >> 16 & 255)) + (24 << (e >> 8 & 255));
            const h = (f | 1635) & ~(f & 1635);
            const l = Mn(i, a, j, k);
            ik(h, i, a, j, k, h);
            return l ^ 21157;
        }(a, 44058, 44716, 17616, 39112);
    }
    function gb() {
        yb[184] = ["You feel a great power emanating from this orb"];
        vt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        yb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        yb[328] = " BACK TO THE GAME";
        yb[329] = " Share on Twitter";
        yb[330] = " Share on Facebook";
        yb[331] = "You can buy items on the shop in the next game with your points";
        yb[332] = "points";
        yb[333] = "Score";
        yb[334] = "Kill";
        yb[335] = "Days survived";
        yb[336] = "Building method: Free. Press G to change";
        yb[337] = "Building method: Grid. Press G to change";
        yb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        yb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        yb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        yb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        yb[7] = ["mão"];
        yb[140] = ["terra", "está sujo!"];
        yb[126] = ["areia", "entrou nos meus olhos!"];
        yb[109] = ["madeira", "você não pode pegar o suficiente disso!"];
        yb[108] = ["pedra", "também chamado rocha"];
        yb[111] = ["ouro", "seja generoso, dê para outros"];
        yb[112] = ["diamante", "o que você irá fazer com isso?"];
        yb[121] = ["ametista", "é mauve como lapa"];
        yb[131] = ["farinha", "usada na cozinha"];
        yb[133] = ["biscoito", "biscoito da vovó", "comida: 50"];
        yb[136] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
        yb[116] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
        yb[117] = ["carne assada", "um mal passado, por favor", "comida: 35"];
        yb[137] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
        yb[138] = ["peixe assado", "com limão é perfeito", "comida: 35"];
        yb[143] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
        yb[145] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
        yb[200] = ["doces", "apenas para crianças!", "comida: 100"];
        yb[199] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
        yb[201] = ["pisca-pisca", "decoração perfeita de telhado"];
        yb[115] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
        yb[110] = ["berry", "Berry saborosa!", "comida: 10"];
        yb[132] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
        yb[134] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
        yb[188] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
        yb[189] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
        yb[191] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
        yb[192] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
        yb[193] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
        yb[194] = ["mato de espinhos", "pica!"];
        yb[141] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
        yb[142] = ["gelo", "útil para fazer bolo e água"];
        yb[55] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
        yb[174] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
        yb[2] = ["pele de coelho", "o coelho era tão fofo..."];
        yb[178] = ["pele pura", "você é uma fábrica de pão"];
        yb[179] = ["pele negra", "você está pronto para fazer algo errado"];
        yb[146] = ["pele de inverno", "ele só queria um abraço"];
        yb[139] = ["escala", "é pequeno como peixe!"];
        yb[129] = ["pele do kraken", "você não está com medo?"];
        yb[113] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
        yb[118] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
        yb[114] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
        yb[161] = ["linha", "usada para fazer chapéus e mochila"];
        yb[147] = ["linha de diamante", "usada para fazer chapéus especiais"];
        yb[167] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
        yb[57] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
        yb[0] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
        yb[5] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
        yb[6] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
        yb[9] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
        yb[30] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
        yb[62] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
        yb[16] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
        yb[8] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
        yb[Xr.ⵠᐃⲆΔⵠⲆΔΔⲆ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
        yb[3] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
        yb[4] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
        yb[31] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
        yb[35] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
        yb[36] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
        yb[37] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
        yb[38] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
        yb[45] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
        yb[12] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
        yb[13] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
        yb[14] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
        yb[15] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
        yb[33] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
        yb[46] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
        yb[50] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
        yb[51] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
        yb[52] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
        yb[58] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
        yb[25] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
        yb[26] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
        yb[27] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
        yb[43] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
        yb[59] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
        yb[23] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
        yb[41] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
        yb[42] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
        yb[83] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
        yb[10] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
        yb[11] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
        yb[40] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
        yb[84] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
        yb[85] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
        yb[86] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
        yb[48] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
        yb[47] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
        yb[185] = ["esfera do dragão", "dado na questt"];
        yb[149] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
        yb[175] = ["pedra verde", "você não vai trapacear, promete?"];
        yb[176] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
        yb[177] = ["pedra azul", "para pessoas muito gentis"];
        yb[77] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
        yb[78] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
        yb[79] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
        yb[180] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
        yb[181] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
        yb[127] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
        yb[128] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
        yb[130] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
        yb[49] = ["regador", "permite regar as plantas", "dano: 1"];
        yb[29] = ["mochila", "mais espaço para seus itens!"];
        yb[120] = ["papel", "usado para fazer o livro"];
        yb[28] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
        yb[195] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
        yb[148] = ["fechadura", "permite você trancar seu baú"];
        yb[158] = ["chave", "permite destrancar um baú"];
        yb[159] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
        yb[125] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
        yb[183] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
        yb[190] = ["telhado", "esconde você um pouco e te esquenta!"];
        yb[182] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
        yb[162] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
        yb[163] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
        yb[164] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
        yb[165] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
        yb[122] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
        yb[160] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
        yb[168] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
        yb[169] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
        yb[170] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
        yb[123] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
        yb[166] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
        yb[171] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
        yb[172] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
        yb[173] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
        yb[124] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
        yb[119] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
        yb[135] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
        yb[144] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
        yb[151] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
        yb[300] = "você não pode entrar no servidor";
        yb[301] = "kickado: ";
        yb[302] = "sua chave está em uso por outra pessoa";
        yb[303] = "sua chave está errada";
        yb[304] = "você tem uma versão velha, limpe seu cache";
        yb[305] = "não tem mais recursos";
        yb[306] = "você sobreviveu 1 dia";
        yb[307] = "você sobreviveu ";
        yb[308] = " dias";
        yb[309] = "você está morto ;-;";
        yb[310] = "servidor não pôde achar um local de spawn! spam o botão de play!";
        yb[311] = "servidor está cheio! spam o botão de play!";
        yb[312] = "não tem recursos";
        yb[313] = "inventário está cheio (botão direito para deletar itens)";
        yb[314] = " está morto";
        yb[315] = "essa não é a ferramenta certa";
        yb[316] = "você entrou no time";
        yb[317] = "você está morto";
        yb[318] = "entrou no time";
        yb[319] = "seu time foi destruido";
        yb[320] = "você saiu do time";
        yb[321] = " saiu do time";
        yb[322] = "alguém roubou sua ficha :>";
        yb[323] = "escolha um servidor";
        yb[324] = "jogadores";
        yb[325] = "jogadores totais";
        yb[326] = "jogadores nesse modo";
        yb[327] = "Coming soon...";
        document.getElementById("nickname_input").placeholder = "Apelido";
        vt[0] = ["você morreu sem motivo"];
        vt[1] = ["você morreu de fome, como o jogo diz"];
        vt[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
        vt[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
        vt[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
        vt[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
        vt[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
        vt[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
        vt[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
        vt[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
        vt[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
        vt[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
        vt[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
        vt[13] = ["você morreu de sede. melhor beber sua própria urina."];
        vt[14] = ["você sabia que você morre afogado? agora você sabe."];
        vt[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
        vt[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
        vt[17] = ["sua pele caindo aos pedaços, o sol te matou."];
        vt[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
        vt[19] = ["como vampiro, não chegue perto do alho."];
        vt[20] = ["você comeu alho como vampiro, o que você esperava?"];
        vt[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
        ⵠΔᐃⵠᐃ = "Uuunnnggg";
        ⲆⲆⵠΔΔΔⵠ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
    }
    const ub = 1;
    const bb = 15;
    function db(b, c, d, e) {
        const f = (24 << (b & 255)) + (8 << (b >> 8 & 255)) + (0 << (b >> 24 & 255)) + (16 << (b >> 16 & 255));
        const g = (12345 + (17684 + c) * 1103515245) % 2147483648;
        const a = (12345 + (d + 37203) * 1103515245) % 2147483648;
        const i = ((45166 + e) * 1664525 + 1013904223) % 4294967296;
        const j = Xq(f, g, a, i);
        const h = Zq(f, g, a, i);
        return (24 << ((j ^ h) & 255)) + (16 << ((j ^ h) >> 8 & 255)) + (0 << ((j ^ h) >> 16 & 255)) + (8 << ((j ^ h) >> 24 & 255));
    }
    function vb() {
        yb[184] = ["You feel a great power emanating from this orb"];
        vt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        yb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        yb[328] = " BACK TO THE GAME";
        yb[329] = " Share on Twitter";
        yb[330] = " Share on Facebook";
        yb[331] = "You can buy items on the shop in the next game with your points";
        yb[332] = "points";
        yb[333] = "Score";
        yb[334] = "Kill";
        yb[335] = "Days survived";
        yb[336] = "Building method: Free. Press G to change";
        yb[337] = "Building method: Grid. Press G to change";
        yb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        yb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        yb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        yb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        yb[7] = ["Mano"];
        yb[140] = ["Tierra", "¡Tan limpia como mis manos!"];
        yb[126] = ["Arena", "¡Tengo arena en mis ojos!"];
        yb[109] = ["Madera", "¡Nunca hay suficiente!"];
        yb[108] = ["Piedra", "También llamada roca."];
        yb[111] = ["Oro", "Sé generoso, compártelo con los otros"];
        yb[112] = ["Diamante", "¿Que vas a hacer con él?"];
        yb[121] = ["Amatista", "Es Mauve como Lapa"];
        yb[131] = ["Harina", "Usada para cocinar."];
        yb[133] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
        yb[136] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
        yb[116] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
        yb[117] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
        yb[137] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
        yb[138] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
        yb[143] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
        yb[145] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
        yb[200] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
        yb[199] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
        yb[201] = ["Guirnalda", "Perfecta para decorar el techo"];
        yb[115] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        yb[110] = ["Baya", "No es venenosa.", "Comida: 10"];
        yb[132] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        yb[134] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
        yb[188] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        yb[189] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
        yb[191] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
        yb[192] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
        yb[193] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
        yb[194] = ["Planta de Espinas", "¡Te daña!"];
        yb[141] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
        yb[142] = ["Hielo", "Bueno para hacer tartas y agua"];
        yb[55] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
        yb[174] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
        yb[2] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
        yb[178] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
        yb[179] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
        yb[146] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
        yb[139] = ["Escamas", "¡Huele a pescado!"];
        yb[129] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
        yb[113] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
        yb[118] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
        yb[114] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
        yb[161] = ["Hilo", "Usado para craftear ropa y mochila"];
        yb[147] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
        yb[167] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
        yb[57] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
        yb[0] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
        yb[5] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
        yb[6] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
        yb[9] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
        yb[30] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
        yb[62] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
        yb[16] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
        yb[8] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
        yb[1] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
        yb[3] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
        yb[4] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
        yb[31] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
        yb[35] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
        yb[36] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
        yb[37] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
        yb[38] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
        yb[45] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
        yb[12] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
        yb[13] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
        yb[14] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
        yb[15] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
        yb[33] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
        yb[46] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
        yb[50] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
        yb[51] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
        yb[52] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
        yb[58] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
        yb[25] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
        yb[26] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
        yb[27] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
        yb[43] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
        yb[59] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
        yb[23] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
        yb[41] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
        yb[42] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
        yb[83] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
        yb[10] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
        yb[11] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
        yb[40] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
        yb[84] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
        yb[85] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
        yb[86] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
        yb[48] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
        yb[47] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
        yb[185] = ["Esfera del Dragón", "Dada en la misión"];
        yb[149] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
        yb[175] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
        yb[176] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
        yb[177] = ["Gema Azul", "Para gente muy amable"];
        yb[77] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
        yb[78] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
        yb[79] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
        yb[180] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
        yb[181] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
        yb[127] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
        yb[128] = ["Botella Vacia", "La puedes llenar de agua"];
        yb[130] = ["Regadera Vacía", "La tienes que llenar de agua"];
        yb[49] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
        yb[29] = ["Mochila", "¡Mas espacio para tus cosas!"];
        yb[120] = ["Hoja", "Usada para hacer un libro"];
        yb[28] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
        yb[195] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
        yb[148] = ["Cerradura", "Te permite cerrar tu cofre"];
        yb[158] = ["Llave", "Te permite abrir un cofre cerrado"];
        yb[159] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
        yb[125] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
        yb[183] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
        yb[190] = ["Techo", "Te esconde un poco y te protege del frío"];
        yb[182] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
        yb[162] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
        yb[163] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
        yb[164] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
        yb[165] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
        yb[122] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
        yb[160] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
        yb[168] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
        yb[169] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
        yb[170] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
        yb[123] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
        yb[166] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
        yb[171] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
        yb[172] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
        yb[173] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
        yb[124] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
        yb[119] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
        yb[135] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
        yb[144] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
        yb[151] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
        yb[300] = "No puedes unirte a este servidor";
        yb[301] = "Expulsado: ";
        yb[302] = "Tu llave ya está usada";
        yb[303] = "Tu llave está mal";
        yb[304] = "Tienes una versión antigua, limpia tu cache";
        yb[305] = "No hay mas recursos";
        yb[306] = "Has sobrevivido 1 día";
        yb[307] = "Has sobrevivido ";
        yb[308] = " días";
        yb[309] = "Estás muerto ;-;";
        yb[310] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
        yb[311] = "El servidor esta lleno, ¡spamea el botón de jugar!";
        yb[312] = "Recurso vacio";
        yb[313] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
        yb[314] = " está muerto";
        yb[315] = "Esta no es la herramienta correcta";
        yb[316] = "Te has unido a un equipo";
        yb[317] = "Estás muerto";
        yb[318] = " se unió al equipo";
        yb[319] = "Tu equipo ha sido destruido";
        yb[320] = "Has dejado el equipo";
        yb[321] = " dejo el equipo ";
        yb[322] = "Alguien te robó tu token :>";
        yb[323] = "Elige un servidor";
        yb[324] = "jugadores";
        yb[325] = "total de jugadores";
        yb[326] = "Jugadores en este modo de juego";
        yb[327] = "Próximamente...";
        document.getElementById("nickname_input").placeholder = "Apodo";
        vt[0] = ["Has muerto por ninguna razón"];
        vt[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
        vt[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
        vt[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
        vt[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
        vt[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
        vt[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
        vt[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
        vt[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
        vt[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
        vt[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
        vt[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
        vt[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
        vt[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
        vt[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
        vt[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
        vt[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
        vt[17] = ["Tu piel se cayó, el sol te quemó."];
        vt[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
        vt[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
        vt[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
        vt[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
        ⵠΔᐃⵠᐃ = "Uuunnnggg";
        ⲆⲆⵠΔΔΔⵠ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
    }
    const cb = tr;
    function mb(b, c, d, e, f) {
        Tj(Db, b, c, d, e, f);
        const g = lx(Ib[0], Ib[1]);
        lx(Ib[2], Ib[3]);
        return (g | 48079) & ~(g & 48079);
    }
    function pb() {
        yb[184] = ["You feel a great power emanating from this orb"];
        vt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        yb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        yb[328] = " BACK TO THE GAME";
        yb[329] = " Share on Twitter";
        yb[330] = " Share on Facebook";
        yb[331] = "You can buy items on the shop in the next game with your points";
        yb[332] = "points";
        yb[333] = "Score";
        yb[334] = "Kill";
        yb[335] = "Days survived";
        yb[336] = "Building method: Free. Press G to change";
        yb[337] = "Building method: Grid. Press G to change";
        yb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        yb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        yb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        yb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        yb[7] = ["Hand"];
        yb[140] = ["Boden", "Dreckig!"];
        yb[126] = ["Sand", "Ich habe es in meine Augen bekommen!"];
        yb[109] = ["Holz", "Du kannst niemals zu viel haben!"];
        yb[108] = ["Stein", "Auch Fels gennant"];
        yb[111] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
        yb[112] = ["Diamant", "Was wirst du daraus machen?"];
        yb[121] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
        yb[131] = ["Mehl", "wird fürs Backen gebraucht"];
        yb[133] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
        yb[136] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
        yb[116] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
        yb[117] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
        yb[137] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
        yb[138] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
        yb[143] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
        yb[145] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
        yb[200] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
        yb[199] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
        yb[201] = ["Girlande", "perfekter Schmuck für Dächer"];
        yb[115] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        yb[110] = ["Beere", "Beeren lecker!", "Essen: 10"];
        yb[132] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        yb[134] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
        yb[188] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        yb[189] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
        yb[191] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        yb[192] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
        yb[193] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
        yb[194] = ["Dornenbusch", "Es sticht!"];
        yb[141] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
        yb[142] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
        yb[55] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
        yb[174] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
        yb[2] = ["Hasenfell", "Der Hase war so süß..."];
        yb[178] = ["Klares Fell", "Du bist eine Brotfabrik"];
        yb[179] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
        yb[146] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
        yb[139] = ["Schuppen", "Es riecht wie Fisch!"];
        yb[129] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
        yb[113] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
        yb[118] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
        yb[114] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
        yb[161] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
        yb[147] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
        yb[167] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
        yb[57] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
        yb[0] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
        yb[5] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
        yb[6] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
        yb[9] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
        yb[30] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
        yb[62] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
        yb[16] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
        yb[8] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
        yb[1] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
        yb[3] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
        yb[4] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
        yb[31] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
        yb[35] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
        yb[36] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
        yb[37] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
        yb[38] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
        yb[45] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
        yb[12] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
        yb[13] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
        yb[14] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
        yb[15] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
        yb[33] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
        yb[46] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
        yb[50] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
        yb[51] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
        yb[52] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
        yb[58] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
        yb[25] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
        yb[26] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
        yb[27] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
        yb[43] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
        yb[59] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
        yb[23] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
        yb[41] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
        yb[42] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
        yb[83] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
        yb[10] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
        yb[11] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
        yb[40] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
        yb[84] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
        yb[85] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
        yb[86] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
        yb[48] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
        yb[47] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        yb[185] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
        yb[149] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
        yb[175] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
        yb[176] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
        yb[177] = ["Blauer Edelstein", "Für sehr nette Leute"];
        yb[77] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        yb[78] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        yb[79] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        yb[180] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
        yb[181] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
        yb[127] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
        yb[128] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
        yb[130] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
        yb[49] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
        yb[29] = ["Rucksack", "Mehr Platz im Inventar!"];
        yb[120] = ["Papier", "Wird fürs Büchermachen verwendet"];
        yb[28] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
        yb[195] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
        yb[148] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
        yb[158] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
        yb[159] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
        yb[125] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
        yb[183] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
        yb[190] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
        yb[182] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
        yb[162] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
        yb[163] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
        yb[164] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
        yb[165] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
        yb[122] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
        yb[160] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
        yb[168] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
        yb[169] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
        yb[170] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
        yb[123] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
        yb[166] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
        yb[171] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
        yb[172] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
        yb[173] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
        yb[124] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
        yb[119] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
        yb[135] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
        yb[144] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
        yb[151] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
        yb[300] = "Du kannst diesem Server nicht beitreten";
        yb[301] = "Gekickt: ";
        yb[302] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
        yb[303] = "Dein Schlüssel ist falsch";
        yb[304] = "Deine Version ist veraltet, säubere dein Cache";
        yb[305] = "Es gibt keine neuen Ressourcen";
        yb[306] = "Du hast einen Tag überlebt";
        yb[307] = "Du hast überlebt ";
        yb[308] = " Tage";
        yb[309] = "Du bist gestorben ;-;";
        yb[310] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
        yb[311] = "Server ist voll! Drücke immer wieder auf spielen!";
        yb[312] = "Ressource ist leer";
        yb[313] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
        yb[314] = " ist gestorben";
        yb[315] = "Das ist nicht das richtige Werkzeug";
        yb[316] = "Du bist einem Team beigetreten";
        yb[317] = "Du bist gestorben";
        yb[318] = " ist dem Team beigetreten";
        yb[319] = "Dein Team wurde zerstört";
        yb[320] = "Du hast das Team verlassen";
        yb[321] = " hat das Team verlassen";
        yb[322] = "Jemand hat dein Token gestohlen :>";
        yb[323] = "Suche dir ein Server aus";
        yb[324] = "Spieler";
        yb[325] = "alle Spieler";
        yb[326] = "Spieler in diesem Modus";
        yb[327] = "Bald verfügbar...";
        document.getElementById("nickname_input").placeholder = "Spitzname";
        vt[0] = ["Du wurdest ohne Grund getötet"];
        vt[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
        vt[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
        vt[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
        vt[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
        vt[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
        vt[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
        vt[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
        vt[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
        vt[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
        vt[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
        vt[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
        vt[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
        vt[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
        vt[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
        vt[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
        vt[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
        vt[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
        vt[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
        vt[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
        vt[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
        vt[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
        ⵠΔᐃⵠᐃ = "Uuunnnggg";
        ⲆⲆⵠΔΔΔⵠ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
    }
    const Cb = 2;
    function Tb(b, c, d, e) {
        const f = ~(b & 18834) & (b | 18834);
        const g = (2147483587 + (30079 + c) * 2147483629) % 2147483647;
        const a = (1 + (38706 + d) * 22695477) % 4294967296;
        const i = ~(e & 63508) & (e | 63508);
        const j = db(f, g, a, i);
        ib(f, g, a, i, f);
        return j ^ 46463;
    }
    var fb = function () {
        yb[184] = ["You feel a great power emanating from this orb"];
        vt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        yb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        yb[328] = " BACK TO THE GAME";
        yb[329] = " Share on Twitter";
        yb[330] = " Share on Facebook";
        yb[331] = "You can buy items on the shop in the next game with your points";
        yb[332] = "points";
        yb[333] = "Score";
        yb[334] = "Kill";
        yb[335] = "Days survived";
        yb[336] = "Building method: Free. Press G to change";
        yb[337] = "Building method: Grid. Press G to change";
        yb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        yb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        yb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        yb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        yb[7] = ["Ręka"];
        yb[140] = ["Ziemia", "Brudna!"];
        yb[126] = ["Piasek", "Mam go w oczach!"];
        yb[109] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
        yb[108] = ["Kamień", "Także nazywany skałą"];
        yb[111] = ["Złoto", "Bądź hojny, daj trochę innym"];
        yb[112] = ["Diament", "Co z nim zrobisz?"];
        yb[121] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
        yb[131] = ["Mąka", "Używana w gotowaniu"];
        yb[133] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
        yb[136] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
        yb[116] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
        yb[117] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
        yb[137] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
        yb[138] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
        yb[143] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
        yb[145] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
        yb[200] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
        yb[199] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
        yb[201] = ["Girlanda", "Idealna do dekorowania dachów"];
        yb[115] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        yb[110] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
        yb[132] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        yb[134] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
        yb[188] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        yb[189] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
        yb[191] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        yb[192] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
        yb[193] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
        yb[194] = ["Kolczasty krzew", "Kłuje!"];
        yb[141] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
        yb[142] = ["Lód", "Użyteczny do robienia ciast i wody"];
        yb[55] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
        yb[174] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
        yb[2] = ["Skóra królika", "Ten królik był taki słodziutki..."];
        yb[178] = ["Skóra", "Jesteś fabryką chleba"];
        yb[179] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
        yb[146] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
        yb[139] = ["Łuski", "Pachnie jak ryba!"];
        yb[129] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
        yb[113] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
        yb[118] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
        yb[114] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
        yb[161] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
        yb[147] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
        yb[167] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
        yb[57] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
        yb[0] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
        yb[5] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
        yb[6] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
        yb[9] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
        yb[30] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
        yb[62] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
        yb[16] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
        yb[8] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
        yb[1] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
        yb[3] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
        yb[4] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
        yb[31] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
        yb[35] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
        yb[36] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
        yb[37] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
        yb[38] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
        yb[45] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
        yb[12] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
        yb[13] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
        yb[14] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
        yb[15] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
        yb[33] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
        yb[46] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
        yb[50] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
        yb[51] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
        yb[52] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
        yb[58] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
        yb[25] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
        yb[26] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
        yb[27] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
        yb[43] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
        yb[59] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
        yb[23] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
        yb[41] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
        yb[42] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
        yb[83] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
        yb[10] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
        yb[11] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
        yb[40] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
        yb[84] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
        yb[85] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
        yb[86] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
        yb[48] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
        yb[47] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        yb[185] = ["Smocza kula", "Zdobyta podczas zadania"];
        yb[149] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
        yb[175] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
        yb[176] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
        yb[177] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
        yb[77] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        yb[78] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        yb[79] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        yb[180] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
        yb[181] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
        yb[127] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
        yb[128] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
        yb[130] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
        yb[49] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
        yb[29] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
        yb[120] = ["Papier", "Używany w tworzeniu książki"];
        yb[28] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
        yb[195] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
        yb[148] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
        yb[158] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
        yb[159] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
        yb[125] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
        yb[183] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
        yb[190] = ["Dach", "Trochę cie ogrzewa i chowa!"];
        yb[182] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
        yb[162] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
        yb[163] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
        yb[164] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
        yb[165] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
        yb[122] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
        yb[160] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
        yb[168] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
        yb[169] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
        yb[170] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
        yb[123] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
        yb[166] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
        yb[171] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
        yb[172] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
        yb[173] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
        yb[124] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
        yb[119] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
        yb[135] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
        yb[144] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
        yb[151] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
        yb[300] = "Nie możesz dołączyć do tego serwera";
        yb[301] = "Wyrzucony: ";
        yb[302] = "Twój klucz jest aktualnie używany przez innego gracza";
        yb[303] = "Twój klucz jest nieprawidłowy";
        yb[304] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
        yb[305] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
        yb[306] = "Przeżyłeś 1 dzień";
        yb[307] = "Przeżyłeś ";
        yb[308] = " dni";
        yb[309] = "Jesteś martwy ;-;";
        yb[310] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
        yb[311] = "Serwer jest pełny! Spamuj przycisk zagraj!";
        yb[312] = "Źródło jest puste";
        yb[313] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
        yb[314] = " jest martwy";
        yb[315] = "To nie jest właściwe narzędzie";
        yb[316] = "Dołączyłeś do drużyny";
        yb[317] = "Jesteś martwy";
        yb[318] = " dołączył do drużyny";
        yb[319] = "Twoja drużyna została zniszczona";
        yb[320] = " Opuściłeś drużynę";
        yb[321] = " opuścił drużynę";
        yb[322] = "Ktoś ukradł twój żeton :>";
        yb[323] = "Wybierz serwer";
        yb[324] = "graczy";
        yb[325] = "wszystkich graczy";
        yb[326] = "graczy w tym trybie";
        yb[327] = "Już wkrótce...";
        document.getElementById("nickname_input").placeholder = "Przydomek";
        vt[0] = ["Zostałeś zabity bez powodu"];
        vt[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
        vt[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
        vt[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
        vt[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
        vt[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
        vt[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
        vt[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
        vt[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
        vt[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
        vt[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
        vt[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
        vt[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
        vt[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
        vt[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
        vt[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
        vt[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
        vt[17] = ["Twoja skóra odpada, słońce cię zabija."];
        vt[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
        vt[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
        vt[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
        vt[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
        ⵠΔᐃⵠᐃ = "Uuunnnggg";
        ⲆⲆⵠΔΔΔⵠ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
    };
    var zb = function () {
        yb[184] = ["You feel a great power emanating from this orb"];
        vt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        yb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        yb[328] = " RETOUR AU JEU";
        yb[329] = " Partage sur Twitter";
        yb[330] = " Partage sur Facebook";
        yb[331] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
        yb[332] = "points";
        yb[333] = "Score";
        yb[334] = "Tués";
        yb[335] = "Jours survécus";
        yb[336] = "Mode de construction: Libre. Appuie sur G pour changer";
        yb[337] = "Mode de construction: Grille. Appuie sur G pour changer";
        yb[197] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
        yb[18] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
        yb[61] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
        yb[198] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quêtes";
        document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
        document.getElementById("constraintquest").innerHTML = " Contraintes";
        document.getElementById("claim_rewards").innerHTML = " Résultat";
        document.getElementById("rewardquest").innerHTML = " Récompenses";
        document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
        document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
        document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
        document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
        document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
        document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
        document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
        yb[7] = ["Main"];
        yb[140] = ["Terre", "C'est sale!"];
        yb[126] = ["Sable", "J'en ai dans les yeux"];
        yb[109] = ["Bois", "Tu n'en auras jamais trop!"];
        yb[108] = ["Pierre", "Aussi appelée roche"];
        yb[111] = ["Or", "Sois généreux, donne en aux autres"];
        yb[112] = ["Diamant", "Comme tes yeux! wesh"];
        yb[121] = ["Améthyste", "C'est Mauve comme Lapa"];
        yb[131] = ["Farine", "Utile pour la cuisine"];
        yb[133] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
        yb[136] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
        yb[116] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
        yb[117] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
        yb[137] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
        yb[138] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
        yb[143] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
        yb[145] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
        yb[200] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
        yb[199] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
        yb[201] = ["Guirlandes", "Utilisable sur les toits"];
        yb[115] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
        yb[110] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
        yb[132] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
        yb[134] = ["Blé", "Peut être transformé en farine dans les moulins"];
        yb[188] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
        yb[189] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
        yb[191] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
        yb[192] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
        yb[193] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
        yb[194] = ["Ronces", "Ça pique!"];
        yb[141] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
        yb[142] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
        yb[55] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
        yb[174] = ["Peau de loup", "Il était où le gentil ti Youki?"];
        yb[2] = ["Peau de lapin", "Vous êtes un monstre"];
        yb[178] = ["Fourrure blanche", "Tu es une usine à pain"];
        yb[179] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
        yb[146] = ["Fourrure d'hiver", "Il voulait juste un calin"];
        yb[139] = ["Écailles", "Ça sent le poisson!"];
        yb[129] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
        yb[113] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
        yb[118] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
        yb[114] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
        yb[161] = ["Fil", "Utile pour faire des chapeaux et un sac"];
        yb[147] = ["Fil de diamant", "Utile pour faire des chapeaux"];
        yb[167] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
        yb[57] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
        yb[0] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
        yb[5] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
        yb[6] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
        yb[9] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
        yb[30] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
        yb[62] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
        yb[16] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
        yb[8] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
        yb[1] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
        yb[3] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
        yb[4] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
        yb[31] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
        yb[35] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
        yb[36] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
        yb[37] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
        yb[38] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
        yb[45] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
        yb[12] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
        yb[13] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
        yb[14] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
        yb[15] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
        yb[33] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
        yb[46] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
        yb[50] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
        yb[51] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
        yb[52] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
        yb[58] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
        yb[25] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
        yb[26] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
        yb[27] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
        yb[43] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
        yb[59] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
        yb[23] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
        yb[41] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
        yb[42] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
        yb[83] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
        yb[10] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
        yb[11] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
        yb[40] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
        yb[84] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
        yb[85] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
        yb[86] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
        yb[48] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
        yb[47] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
        yb[185] = ["Orbe du Dragon", "Donné en Quête"];
        yb[149] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
        yb[175] = ["Gemme verte", "Tu n'as pas triché, promis?"];
        yb[176] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
        yb[177] = ["Gemme bleue", "Pour les gens trop gentils"];
        yb[77] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
        yb[78] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
        yb[79] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
        yb[180] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
        yb[181] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
        yb[127] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
        yb[128] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
        yb[130] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
        yb[49] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
        yb[29] = ["Sac", "Plus de place dans ton inventaire!"];
        yb[120] = ["Papier", "Pour fabriquer toute sorte d'objets"];
        yb[28] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
        yb[195] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
        yb[148] = ["Cadenas", "Pour verrouiller un coffre"];
        yb[158] = ["Clé", "Pour déverrouiller un coffre"];
        yb[159] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
        yb[125] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
        yb[183] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
        yb[190] = ["Toit", "Te cache un peu et te réchauffe"];
        yb[182] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
        yb[162] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
        yb[163] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
        yb[164] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
        yb[165] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
        yb[122] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
        yb[160] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
        yb[168] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
        yb[169] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
        yb[170] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
        yb[123] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
        yb[166] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
        yb[171] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
        yb[172] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
        yb[173] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
        yb[124] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
        yb[119] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
        yb[135] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
        yb[144] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
        yb[151] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
        yb[300] = "Tu ne peux pas rejoindre le serveur";
        yb[301] = "Expulsé: ";
        yb[302] = "Ta clé est déjà utilisée par quelqu'un d'autre";
        yb[303] = "Ta clé est fausse";
        yb[304] = "Tu as une vieille version, rafraichis tes caches";
        yb[305] = "Il n'y a plus de nouvelles ressources";
        yb[306] = "Tu as survécu 1 jour";
        yb[307] = "Tu as survécu ";
        yb[308] = " jours";
        yb[309] = "Tu es mort ;-;";
        yb[310] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
        yb[311] = "Le serveur est complet! Spam le bouton jouer";
        yb[312] = "Cette ressource est vide";
        yb[313] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
        yb[314] = " est mort";
        yb[315] = "Ce n'est pas le bon outil";
        yb[316] = "Tu as rejoins une équipe";
        yb[317] = "Tu es mort";
        yb[318] = " a rejoint l'équipe";
        yb[319] = "Ton équipe a été détruite";
        yb[320] = "Tu as quitté l'équipe";
        yb[321] = " a quitté l'équipe";
        yb[322] = "Quelqu'un a volé ton token :>";
        yb[323] = "Choisis un serveur";
        yb[324] = "joueurs";
        yb[325] = "joueurs";
        yb[326] = "joueurs dans ce mode";
        yb[327] = "Bientôt...";
        document.getElementById("nickname_input").placeholder = "Surnom";
        vt[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
        vt[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
        vt[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
        vt[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
        vt[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
        vt[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
        vt[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
        vt[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
        vt[8] = ["Cet ours voulait juste un câlin."];
        vt[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
        vt[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
        vt[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
        vt[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
        vt[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
        vt[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
        vt[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
        vt[16] = ["Un kraken a 'kraké' tes os."];
        vt[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
        vt[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
        vt[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
        vt[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
        vt[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
        ⵠΔᐃⵠᐃ = "Uuunnnggg";
        ⲆⲆⵠΔΔΔⵠ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
    };
    var yb = [];
    for (var wb = 0; wb < 344; wb++) {
        yb[wb] = "";
    }
    var vt = [];
    const kb = 11;
    $(".md-languages").on("click", function () {
        $(this).toggleClass("active");
    });
    $(".md-languages ul li").on("click", function () {
        var a = $(this).text();
        if (a === "English") {
            rb();
        } else if (a === "Français") {
            zb();
        } else if (a === "Deutsch") {
            pb();
        } else if (a === "Español") {
            vb();
        } else if (a === "Português") {
            gb();
        } else if (a === "Русский") {
            sb();
        } else if (a === "Polski") {
            fb();
        }
        ⵠⵠⵠᐃᐃ = [];
        Ex.ᐃΔⵠΔ.label = [];
        $(".md-languages ul li").removeClass("active");
        $(this).addClass("active");
        $(".md-languages label button").text(a);
    });
    var Ab;
    fr = "EN";
    switch (navigator.language || navigator.userLanguage) {
        case "ru":
            fr = "RU";
            break;
        case "en":
            fr = "EN";
            break;
        case "es":
            fr = "SP";
            break;
        case "fr":
            fr = "FR";
            break;
        case "pl":
            fr = "PL";
            break;
        case "de":
            fr = "DE";
            break;
        case "pt":
            fr = "PT";
    }
    function wt(b, c, d, e, f, i) {
        const a = (0 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (24 << (b & 255)) + (8 << (b >> 24 & 255));
        const j = (c | 754) & ~(c & 754);
        const k = ((d + 30744) * 1103515245 + 12345) % 2147483648;
        const h = ((f + 63102) * 1103515245 + 12345) % 2147483648;
        const l = ~(i & 54292) & (i | 54292);
        const g = hx(a, j, k, (e | 55326) & ~(e & 55326));
        eb(h, l, a, j, k);
        return ~(g & 18514) & g | ~(g & 18514) & 18514;
    }
    if (fr === "FR") {
        $(".md-languages label button").text("Français");
        Ab = zb;
    } else if (fr === "PL") {
        $(".md-languages label button").text("Polski");
        Ab = fb;
    } else if (fr === "PT") {
        $(".md-languages label button").text("Português");
        Ab = gb;
    } else if (fr === "SP") {
        $(".md-languages label button").text("Español");
        Ab = vb;
    } else if (fr === "RU") {
        $(".md-languages label button").text("Русский");
        Ab = sb;
    } else if (fr === "DE") {
        $(".md-languages label button").text("Deutsch");
        Ab = pb;
    } else {
        $(".md-languages label button").text("English");
        Ab = rb;
    }
    ᐃⲆ = {
        ΔΔΔⲆᐃⵠⲆᐃᐃ: "img/logo.png",
        ᐃΔⵠΔᐃⲆΔ: "img/mapday.png",
        ΔⵠᐃⵠΔⲆΔ: "img/mapnight.png",
        ⲆⲆΔΔΔᐃⵠΔΔ: "img/bigzday.png",
        ⲆⲆΔΔΔⲆΔᐃΔ: "img/bigznight.png",
        ⲆⲆᐃⲆⵠⵠΔ: "img/bigday-river1.png",
        ᐃⵠᐃΔᐃⲆⵠᐃᐃ: "img/bigday-lake.png",
        ᐃΔᐃᐃᐃⲆΔ: "img/bigday-berry.png",
        ᐃΔⲆᐃⲆⲆΔ: "img/bigday-stone1.png",
        ΔᐃΔᐃᐃᐃΔ: "img/bigday-stone2.png",
        ⲆⲆⵠⵠᐃΔᐃ: "img/bigday-gold1.png",
        ⲆⵠΔΔⲆⵠⲆ: "img/bigday-gold2.png",
        ⵠᐃᐃⵠΔΔⵠ: "img/bigday-emerald1.png",
        ⲆΔⲆⲆⵠᐃᐃ: "img/bigday-emerald2.png",
        ᐃⲆⵠΔⵠᐃⵠ: "img/bigday-amethyst.png",
        ⲆⵠⵠⲆⵠᐃⵠ: "img/bigday-bear.png",
        ᐃⵠⵠᐃⲆᐃΔ: "img/bigday-cave.png",
        ⲆᐃᐃᐃⵠⲆΔ: "img/bigday-diamond.png",
        ᐃᐃΔΔⲆᐃⵠ: "img/bigday-island.png",
        ΔᐃⲆᐃᐃΔΔ: "img/bigday-reidite.png",
        ⵠΔΔⲆⲆᐃᐃ: "img/bigday-spider.png",
        ᐃⵠⲆᐃⵠΔΔ: "img/bigday-wolf.png",
        ᐃⵠΔΔⵠⵠⵠ: "img/bigday-fir-tree.png",
        ΔΔⵠΔᐃᐃⲆ: "img/bigday-fox.png",
        ⲆⲆᐃⵠⲆⵠΔ: "img/bigday-kraken.png",
        Δᐃᐃⵠᐃⵠⵠ: "img/bigday-piranha.png",
        ᐃⲆⵠᐃⲆᐃⵠ: "img/bigday-cactus.png",
        ⵠⵠΔⵠᐃⵠⵠ: "img/bigday-magma.png",
        ⲆᐃΔΔⲆⵠⲆ: "img/bigday-river1.png",
        ⲆⵠⲆᐃΔΔⲆΔⲆ: "img/bignight-lake.png",
        ⵠᐃⵠΔᐃⲆⲆⵠΔ: "img/bignight-berry.png",
        ⵠΔⵠΔΔΔⵠ: "img/bignight-stone1.png",
        ⲆᐃⲆᐃᐃⲆⵠ: "img/bignight-stone2.png",
        ᐃⵠΔΔΔⲆⵠ: "img/bignight-gold1.png",
        ⲆᐃⵠΔΔᐃΔ: "img/bignight-gold2.png",
        ΔᐃⵠⲆᐃⵠᐃ: "img/bignight-emerald1.png",
        ΔⲆⵠⲆⵠᐃᐃ: "img/bignight-emerald2.png",
        ⵠᐃⲆΔᐃΔᐃ: "img/bignight-amethyst.png",
        ᐃᐃᐃΔΔⵠᐃ: "img/bignight-bear.png",
        ⲆᐃΔⲆᐃⲆⵠ: "img/bignight-cave.png",
        ⲆⲆⵠⵠᐃⲆΔ: "img/bignight-diamond.png",
        ΔⲆⲆⲆⵠⵠΔ: "img/bignight-island.png",
        ΔΔⵠⵠᐃⲆⵠ: "img/bignight-reidite.png",
        ᐃⲆⵠΔⲆᐃⵠ: "img/bignight-spider.png",
        ⵠΔⲆΔΔⵠⲆ: "img/bignight-wolf.png",
        ΔΔΔΔⲆⵠⲆ: "img/bignight-fir-tree.png",
        ᐃⲆⵠΔᐃᐃⵠ: "img/bignight-fox.png",
        ⲆΔΔⵠΔΔΔ: "img/bignight-kraken.png",
        ⲆⲆⵠᐃᐃⲆⲆ: "img/bignight-piranha.png",
        ΔⵠⲆⲆᐃΔᐃ: "img/bignight-cactus.png",
        ᐃⵠⵠᐃⲆᐃᐃ: "img/bignight-magma.png",
        ⲆΔΔᐃΔᐃⵠ: "img/bigday-desert.png",
        ᐃΔⵠⲆΔⵠⵠ: "img/bigday-winter.png",
        ᐃⵠᐃᐃⲆᐃⵠ: "img/bigday-lava.png",
        ΔΔΔⵠⲆᐃΔ: "img/bigday-forest.png",
        ᐃᐃΔⵠⲆⲆᐃ: "img/bignight-desert.png",
        ΔᐃⵠⲆⵠⲆΔ: "img/bignight-winter.png",
        ⲆᐃᐃⲆⲆᐃⲆ: "img/bignight-lava.png",
        ΔⲆΔᐃΔⲆⲆ: "img/bignight-forest.png",
        ᐃΔΔᐃᐃⲆⲆ: "img/day-river-wave.png",
        ᐃΔⲆⵠᐃᐃⵠ: "img/night-river-wave.png",
        ᐃᐃᐃⲆΔⲆᐃ: "img/day-fog0.png",
        ⲆᐃⵠⲆⵠⵠⵠ: "img/day-fog1.png",
        ⵠⲆΔΔᐃⲆΔ: "img/day-fog2.png",
        ᐃΔⵠⲆΔⵠⲆ: "img/night-fog0.png",
        ⵠΔⲆⲆᐃⲆᐃ: "img/night-fog1.png",
        ᐃⵠⲆΔΔⵠᐃ: "img/night-fog2.png",
        ⲆⵠΔⵠᐃΔⵠ: "img/day-fogdesert0.png",
        ⵠⲆⲆⵠⲆΔⲆ: "img/day-fogdesert1.png",
        ᐃⵠᐃⵠΔⵠⲆ: "img/day-fogdesert2.png",
        ⲆΔΔⲆᐃᐃΔ: "img/night-fogdesert0.png",
        ⲆⵠᐃⲆΔⵠⵠ: "img/night-fogdesert1.png",
        ΔⵠΔⲆΔΔⵠ: "img/night-fogdesert2.png",
        ⵠΔⲆⵠΔᐃⵠ: "img/day-cross-server.png",
        ᐃⵠΔᐃⵠⵠⵠ: "img/day-here-server.png",
        ΔᐃΔᐃⲆᐃⲆ: "img/day-finish-server.png",
        ⲆΔΔᐃⲆΔᐃ: "img/day-item-server.png",
        ΔⵠⵠᐃᐃΔⵠ: "img/day-skull-server.png",
        ⲆⲆΔⲆᐃⵠⵠ: "img/night-cross-server.png",
        ⵠⲆⵠⲆⵠⲆⵠ: "img/night-here-server.png",
        ΔⲆΔᐃⵠΔⲆ: "img/night-finish-server.png",
        ΔΔⵠⲆⵠⵠᐃ: "img/night-item-server.png",
        ⵠΔᐃᐃᐃⲆΔ: "img/night-skull-server.png",
        ⵠᐃⵠⵠΔⲆⵠ: "img/day-reidite0.png",
        ⵠⲆΔⲆⲆᐃⵠ: "img/night-reidite0.png",
        ΔⵠⵠⵠᐃⲆⵠ: "img/day-reidite1.png",
        ᐃⵠⵠᐃⵠⲆⲆ: "img/night-reidite1.png",
        ᐃⲆⲆⲆⲆᐃⲆ: "img/day-reidite2.png",
        ⲆⵠⵠΔⲆᐃᐃ: "img/night-reidite2.png",
        ⵠΔⲆⲆⲆⲆⵠ: "img/day-lava1.png",
        ΔⵠΔⲆⲆΔⲆ: "img/night-lava1.png",
        ΔΔΔᐃΔΔᐃ: "img/day-lava2.png",
        ⲆᐃᐃⲆⵠⵠⲆ: "img/night-lava2.png",
        ᐃⲆΔΔΔⵠⵠ: "img/day-lava3.png",
        ᐃᐃΔᐃΔⵠⵠ: "img/night-lava3.png",
        ⲆⲆⲆⵠΔΔⲆ: "img/day-lava4.png",
        ᐃⵠΔⲆΔᐃᐃ: "img/night-lava4.png",
        ΔⲆⵠΔⲆᐃⵠ: "img/day-lava5.png",
        ⵠⲆⵠΔΔⲆᐃ: "img/night-lava5.png",
        ᐃᐃᐃᐃᐃⵠΔ: "img/day-lava6.png",
        ⲆⲆᐃⵠᐃⲆΔ: "img/night-lava6.png",
        ⵠⵠΔⵠⲆᐃΔ: "img/day-lava-ground1.png",
        ᐃⲆᐃΔⲆⲆⵠ: "img/night-lava-ground1.png",
        ΔⵠᐃⵠΔΔᐃ: "img/day-lava-ground2.png",
        ΔΔᐃⵠΔⲆΔ: "img/night-lava-ground2.png",
        ⵠΔⲆⵠᐃΔΔ: "img/day-lava-ground3.png",
        ⵠΔⲆⲆΔⲆᐃ: "img/night-lava-ground3.png",
        ⵠⵠⵠᐃⵠⲆΔ: "img/day-lava-ground4.png",
        ⵠⵠⵠⵠΔⲆΔ: "img/night-lava-ground4.png",
        ⵠΔΔⵠⲆᐃⲆ: "img/day-lava-ground5.png",
        ⵠᐃⲆΔⵠΔⵠ: "img/night-lava-ground5.png",
        ᐃΔΔⲆᐃΔⵠ: "img/day-lava-ground6.png",
        ᐃΔΔᐃⲆⵠᐃ: "img/night-lava-ground6.png",
        ᐃΔⲆᐃΔΔΔ: "img/day-fire-mob.png",
        ⵠⵠᐃᐃᐃⲆⲆ: "img/night-fire-mob.png",
        ᐃᐃᐃⲆΔᐃΔ: "img/hurt-fire-mob.png",
        ᐃᐃᐃᐃⲆΔᐃ: "img/day-diamond-protection.png",
        ⲆⵠᐃⲆⵠᐃⵠ: "img/night-diamond-protection.png",
        ΔᐃΔΔⲆⲆⵠ: "img/day-hand-diamond-protection.png",
        ⲆᐃᐃΔΔⵠΔ: "img/night-hand-diamond-protection.png",
        ⵠᐃΔⵠΔⵠⵠ: "img/inv-diamond-protection-out.png",
        ᐃᐃΔᐃⵠΔⵠ: "img/inv-diamond-protection-in.png",
        ΔⵠΔⲆⲆᐃΔ: "img/inv-diamond-protection-click.png",
        ⲆⲆᐃᐃⵠᐃⵠ: "img/day-amethyst-protection.png",
        ⲆⵠⵠⵠⲆᐃⵠ: "img/night-amethyst-protection.png",
        ⵠⲆⵠⲆΔᐃΔΔⵠ: "img/day-hand-amethyst-protection.png",
        ᐃΔΔⵠᐃᐃᐃΔⵠ: "img/night-hand-amethyst-protection.png",
        ΔⲆᐃⲆⵠᐃᐃ: "img/inv-amethyst-protection-out.png",
        ⵠΔᐃᐃΔΔΔ: "img/inv-amethyst-protection-in.png",
        ⵠⵠΔⵠⲆⲆᐃ: "img/inv-amethyst-protection-click.png",
        ᐃᐃᐃΔⲆⵠᐃ: "img/day-reidite-sword.png",
        ⵠⲆΔⲆΔᐃΔ: "img/night-reidite-sword.png",
        ⵠᐃⵠΔΔⲆⲆ: "img/inv-reidite-sword-out.png",
        ΔⲆᐃⵠΔᐃⵠ: "img/inv-reidite-sword-in.png",
        ⵠΔΔⲆΔⵠΔ: "img/inv-reidite-sword-click.png",
        ΔᐃΔᐃⲆⵠᐃ: "img/inv-reidite-out.png",
        ᐃⵠⵠⵠⵠᐃΔ: "img/inv-reidite-in.png",
        ⲆⵠᐃⵠᐃⲆⵠ: "img/inv-reidite-click.png",
        ΔΔⲆⲆΔⵠⲆ: "img/inv-flame-out.png",
        ⲆᐃᐃⲆⲆⵠᐃ: "img/inv-flame-in.png",
        ᐃΔᐃᐃΔⲆⵠ: "img/inv-flame-click.png",
        ᐃΔΔⵠᐃΔⵠ: "img/day-magma-buble0.png",
        ⲆⵠΔⵠᐃⲆⵠ: "img/night-magma-buble0.png",
        ᐃⵠⵠᐃⲆᐃⵠ: "img/day-magma-buble1.png",
        ΔΔⵠᐃᐃⵠⲆ: "img/night-magma-buble1.png",
        ⵠⵠᐃⲆᐃⲆⵠ: "img/day-magma-buble2.png",
        ⲆΔⵠΔⲆⵠᐃ: "img/night-magma-buble2.png",
        ⲆⲆⵠᐃᐃⲆΔ: "img/day-lava-dragon.png",
        ᐃᐃⵠΔΔⲆⵠ: "img/night-lava-dragon.png",
        ΔΔⲆⲆⲆⵠⲆᐃⲆ: "img/day-fire-dragon.png",
        ⲆᐃⲆΔⵠᐃⵠⵠⲆ: "img/night-fire-dragon.png",
        ΔᐃⲆᐃᐃᐃⵠ: "img/hurt-lava-dragon.png",
        ⲆⲆΔⲆΔΔⲆ: "img/day-lava-wing-left.png",
        ΔⲆⵠⲆΔΔᐃ: "img/night-lava-wing-left.png",
        ᐃΔᐃⵠⵠᐃⵠ: "img/day-lava-wing-right.png",
        ⵠⲆᐃⲆⵠᐃᐃ: "img/night-lava-wing-right.png",
        ᐃΔⵠᐃΔⲆⵠ: "img/hurt-lava-wing-left.png",
        ᐃⵠᐃΔᐃΔᐃ: "img/hurt-lava-wing-right.png",
        ⵠⲆⲆⲆΔᐃΔ: "img/day-reidite-spear.png",
        ᐃΔΔΔΔΔⲆ: "img/night-reidite-spear.png",
        ᐃΔᐃᐃᐃᐃᐃ: "img/inv-reidite-spear-out.png",
        ⵠⲆᐃⲆᐃⲆⵠ: "img/inv-reidite-spear-in.png",
        ᐃᐃΔⵠᐃΔⲆ: "img/inv-reidite-spear-click.png",
        ⲆⲆΔⵠⲆⲆᐃ: "img/day-reidite-helmet.png",
        ⵠᐃᐃⲆⲆⲆᐃ: "img/night-reidite-helmet.png",
        ⵠΔⵠΔⲆΔⲆ: "img/inv-reidite-helmet-out.png",
        ⵠⲆⲆⵠᐃΔⲆ: "img/inv-reidite-helmet-in.png",
        ᐃΔⵠⲆⵠΔΔ: "img/inv-reidite-helmet-click.png",
        ΔΔΔⵠⵠᐃⲆ: "img/day-hand-reidite-protection.png",
        ⲆᐃⲆᐃⲆⵠᐃ: "img/night-hand-reidite-protection.png",
        ᐃΔΔᐃΔᐃⲆ: "img/day-reidite-protection.png",
        ᐃⲆΔΔⲆⵠⲆ: "img/night-reidite-protection.png",
        ᐃⵠⵠⲆᐃᐃΔ: "img/inv-reidite-protection-out.png",
        ΔⲆΔⵠΔⲆᐃ: "img/inv-reidite-protection-in.png",
        ⲆᐃᐃΔⵠᐃᐃ: "img/inv-reidite-protection-click.png",
        ᐃⲆᐃᐃΔᐃⲆ: "img/day-lava-dragon-sword.png",
        ΔⲆΔᐃⲆⲆᐃ: "img/night-lava-dragon-sword.png",
        ᐃᐃⲆⵠⲆⲆⵠ: "img/inv-lava-dragon-sword-out.png",
        ⵠⲆⵠᐃⲆᐃⵠ: "img/inv-lava-dragon-sword-in.png",
        ΔΔᐃⲆᐃⵠᐃ: "img/inv-lava-dragon-sword-click.png",
        ᐃᐃᐃᐃⲆⲆᐃ: "img/day-lava-spear.png",
        ⲆᐃΔⵠᐃⲆᐃ: "img/night-lava-spear.png",
        ⵠⲆΔⵠⵠΔᐃ: "img/inv-lava-spear-out.png",
        ᐃᐃⵠΔⲆⵠᐃ: "img/inv-lava-spear-in.png",
        ΔΔΔΔⵠΔᐃ: "img/inv-lava-spear-click.png",
        ⲆᐃⲆΔⲆᐃⵠ: "img/day-lava-helmet.png",
        ⵠᐃΔΔⲆᐃΔ: "img/night-lava-helmet.png",
        ΔⵠᐃΔᐃⲆΔ: "img/inv-lava-helmet-out.png",
        ΔⵠᐃᐃᐃⲆⲆ: "img/inv-lava-helmet-in.png",
        ᐃⵠⲆⲆΔᐃΔ: "img/inv-lava-helmet-click.png",
        ᐃⲆⵠΔⲆΔΔ: "img/day-witch-hat.png",
        ΔᐃᐃⲆΔⵠᐃ: "img/night-witch-hat.png",
        ΔⵠΔⵠᐃᐃⵠ: "img/inv-witch-hat-out.png",
        ⲆᐃⵠᐃⵠⲆⲆ: "img/inv-witch-hat-in.png",
        ᐃⲆⵠⲆⵠᐃΔ: "img/inv-witch-hat-click.png",
        ⲆΔᐃⵠᐃΔΔ: "img/day-nimbus2000.png",
        ΔⵠΔᐃⵠᐃⲆ: "img/night-nimbus2000.png",
        ⲆᐃⲆⲆⲆⲆⲆ: "img/inv-nimbus2000-out.png",
        ⲆⲆΔᐃⵠⲆᐃ: "img/inv-nimbus2000-in.png",
        ᐃⲆⲆᐃⵠᐃⲆ: "img/inv-nimbus2000-click.png",
        ᐃᐃⵠⵠΔᐃⵠ: "img/day-accessory1-pacques.png",
        ⵠⵠⵠⵠΔⵠΔ: "img/night-accessory1-pacques.png",
        ⲆΔⵠΔⵠΔⵠ: "img/day-accessory2-pacques.png",
        ΔⵠⵠΔⵠⲆΔ: "img/night-accessory2-pacques.png",
        ΔⲆᐃΔΔⵠⵠ: "img/day-accessory3-pacques.png",
        ᐃᐃᐃᐃΔⵠⲆ: "img/night-accessory3-pacques.png",
        ᐃᐃⲆⵠⵠⵠⲆ: "img/day-accessory5-pacques.png",
        ⲆⲆⲆⵠⲆⲆⵠ: "img/night-accessory5-pacques.png",
        ⲆⵠⲆΔᐃᐃΔ: "img/day-accessory6-pacques.png",
        ΔⲆΔΔΔⵠⵠ: "img/night-accessory6-pacques.png",
        ⵠⵠⲆⵠᐃⲆⵠ: "img/day-accessory7-pacques.png",
        ΔⲆⵠⲆᐃⲆⲆ: "img/night-accessory7-pacques.png",
        ᐃᐃᐃⲆΔᐃⵠ: "img/day-accessory8-pacques.png",
        ⲆΔᐃΔΔΔᐃ: "img/night-accessory8-pacques.png",
        ᐃⲆᐃᐃΔⲆⵠ: "img/day-bag-pacques.png",
        ⲆⲆΔⲆᐃⵠᐃ: "img/night-bag-pacques.png",
        ᐃΔⵠᐃᐃⵠᐃ: "img/day-carrot.png",
        ΔⲆΔⲆΔΔⲆ: "img/night-carrot.png",
        ⲆΔⲆᐃⲆⵠΔ: "img/day-carrot-dried.png",
        ⲆⵠⲆᐃⵠᐃΔ: "img/night-carrot-dried.png",
        ⵠΔᐃΔΔⲆΔ: "img/day-tomato-herb.png",
        ⲆᐃᐃⲆⵠᐃⵠ: "img/night-tomato-herb.png",
        ⲆΔⵠⵠⲆΔⲆ: "img/day-tomato-herb-dried.png",
        ᐃΔΔⵠΔⵠⲆ: "img/night-tomato-herb-dried.png",
        ᐃᐃΔΔᐃᐃᐃ: "img/day-tomato.png",
        ᐃΔᐃⲆΔᐃΔ: "img/night-tomato.png",
        ᐃⵠΔΔΔᐃᐃ: "img/inv-carrot-out.png",
        ⵠᐃᐃΔⲆᐃΔ: "img/inv-carrot-in.png",
        ᐃΔⵠⲆⵠⲆΔ: "img/inv-carrot-click.png",
        ⲆⲆⲆᐃⵠᐃⵠ: "img/inv-tomato-out.png",
        ᐃⵠⲆⵠⵠⲆⲆ: "img/inv-tomato-in.png",
        ᐃⵠΔⵠⵠᐃΔ: "img/inv-tomato-click.png",
        ⲆⵠΔⲆᐃⵠⵠ: "img/day-player0.png",
        ΔᐃⲆΔⵠΔᐃ: "img/night-player0.png",
        ⲆⵠᐃΔⲆΔⲆ: "img/day-player1.png",
        ⵠΔᐃΔⵠⲆΔ: "img/night-player1.png",
        ΔⲆⲆⵠⲆΔⲆ: "img/day-player2.png",
        ΔᐃⵠⲆᐃΔᐃ: "img/night-player22.png",
        ΔΔᐃᐃⵠⲆⲆ: "img/day-player3.png",
        ᐃᐃⲆΔⵠᐃⵠ: "img/night-player33.png",
        ⵠⲆᐃΔΔⵠΔ: "img/day-player4.png",
        ᐃⵠⲆᐃΔΔⵠ: "img/night-player4.png",
        ΔⵠⵠⲆΔᐃⵠ: "img/day-player5.png",
        ΔΔⵠᐃΔᐃⵠ: "img/night-player5.png",
        ᐃᐃᐃᐃΔᐃⲆ: "img/day-player6.png",
        ⵠΔᐃΔᐃⲆᐃ: "img/night-player6.png",
        ᐃⵠⵠⵠⵠⵠⲆ: "img/day-player7.png",
        ᐃΔΔⲆΔⵠᐃ: "img/night-player7.png",
        ⵠᐃⲆⵠⵠⲆⵠ: "img/day-player8.png",
        ⵠⲆⵠᐃⵠⲆⵠ: "img/night-player8.png",
        ᐃΔΔⲆⲆⲆᐃ: "img/day-player9.png",
        ᐃⵠΔΔⵠᐃⵠ: "img/night-player9.png",
        ΔΔⵠᐃΔⵠⲆ: "img/day-player10.png",
        ⲆᐃᐃⲆⲆⵠⲆ: "img/night-player10.png",
        ᐃⲆΔⲆᐃΔⵠ: "img/day-player11.png",
        ⵠⲆⵠΔⲆᐃΔ: "img/night-player11.png",
        ᐃᐃΔⵠⵠⲆⵠ: "img/day-player12.png",
        ⲆⲆΔⵠⵠΔⲆ: "img/night-player12.png",
        ⵠⲆⵠΔⲆΔⲆ: "img/day-player13.png",
        ᐃᐃⵠⲆΔⲆᐃ: "img/night-player13.png",
        ᐃⵠⲆⲆⲆᐃΔ: "img/day-player14.png",
        ᐃΔⲆΔᐃⵠΔ: "img/night-player14.png",
        ΔΔⲆⵠᐃⵠⵠ: "img/day-player15.png",
        ⲆᐃⵠΔⲆⲆΔ: "img/night-player15.png",
        ΔⲆⵠΔΔⵠⵠ: "img/day-player16.png",
        ⲆᐃⲆⲆⲆᐃⲆ: "img/night-player16.png",
        ⲆΔᐃᐃⲆΔᐃ: "img/day-player17.png",
        ΔⲆΔⵠⲆⵠΔ: "img/night-player17.png",
        ⵠΔᐃⵠᐃⲆⵠ: "img/day-player18.png",
        ᐃⲆⵠΔⵠᐃⲆ: "img/night-player18.png",
        ⵠⲆΔᐃⵠᐃⵠ: "img/day-player19.png",
        ᐃⲆⲆⵠⲆᐃⵠ: "img/night-player19.png",
        ⲆΔⲆᐃᐃᐃⵠ: "img/day-hand-player0.png",
        ΔΔⵠᐃⵠᐃᐃ: "img/night-hand-player0.png",
        ᐃⵠⲆᐃᐃΔΔ: "img/day-hand-player1.png",
        ᐃᐃⲆⵠⵠⲆⲆ: "img/night-hand-player1.png",
        ᐃᐃⲆᐃΔⵠᐃ: "img/day-hand-player2.png",
        ΔⲆⵠΔΔᐃⲆ: "img/night-hand-player22.png",
        ᐃΔⵠΔⵠᐃΔ: "img/day-hand-player3.png",
        ⵠⵠⵠΔΔⲆᐃ: "img/night-hand-player33.png",
        ⲆΔΔΔⲆⵠⲆ: "img/day-hand-player4.png",
        ᐃᐃᐃⲆⵠⵠΔ: "img/night-hand-player4.png",
        ᐃⵠΔΔΔΔᐃ: "img/day-hand-player5.png",
        ⲆΔⵠᐃⵠᐃΔ: "img/night-hand-player5.png",
        ⲆΔⲆΔᐃᐃΔ: "img/day-hand-player6.png",
        ⵠⲆⵠⲆⵠΔⵠ: "img/night-hand-player6.png",
        ⲆΔⵠⲆΔᐃᐃ: "img/day-hand-player7.png",
        ⵠΔⲆⵠΔⲆᐃ: "img/night-hand-player7.png",
        ⲆΔⵠⲆⲆⵠⲆ: "img/day-hand-player8.png",
        ᐃᐃⵠᐃⲆⵠⲆ: "img/night-hand-player8.png",
        ⵠⲆᐃⲆᐃᐃᐃ: "img/day-hand-player9.png",
        ⲆⲆᐃᐃΔⵠᐃ: "img/night-hand-player9.png",
        ᐃΔᐃΔⵠΔⵠ: "img/day-hand-player10.png",
        ᐃΔᐃⲆᐃⵠⵠ: "img/night-hand-player10.png",
        ⵠⲆᐃⲆᐃⲆⲆ: "img/day-hand-player11.png",
        ⵠΔΔⲆⲆⲆΔ: "img/night-hand-player11.png",
        ΔᐃΔΔᐃΔⵠ: "img/day-hand-player12.png",
        ⵠⲆⵠⲆΔⲆΔ: "img/night-hand-player12.png",
        ᐃᐃⵠᐃᐃᐃΔ: "img/day-hand-player13.png",
        ⵠᐃΔⵠⵠᐃΔ: "img/night-hand-player13.png",
        ᐃΔΔᐃⲆΔᐃ: "img/day-hand-player14.png",
        ⲆⵠᐃⲆΔⵠΔ: "img/night-hand-player14.png",
        ⵠⲆᐃΔⲆΔᐃ: "img/day-hand-player15.png",
        ⲆΔΔΔΔⲆΔ: "img/night-hand-player15.png",
        ⲆᐃΔⲆⲆⵠⲆ: "img/day-hand-player16.png",
        ᐃΔᐃΔⲆΔⵠ: "img/night-hand-player16.png",
        ⲆⵠᐃᐃᐃⲆⲆ: "img/day-hand-player17.png",
        ⵠⵠᐃΔᐃⵠΔ: "img/night-hand-player17.png",
        ⵠᐃΔⲆᐃΔᐃ: "img/day-hand-player18.png",
        ⵠᐃⲆⲆΔⵠⵠ: "img/night-hand-player18.png",
        ⵠΔⲆⵠⲆⵠᐃ: "img/day-hand-player19.png",
        ⲆᐃᐃΔⲆᐃΔ: "img/night-hand-player19.png",
        ⲆᐃΔΔⵠⲆⲆ: "img/day-accessory4.png",
        ⵠΔΔⵠⵠΔᐃ: "img/night-accessory4.png",
        ⲆΔⲆⵠᐃⲆᐃ: "img/day-accessory9.png",
        ⵠⵠΔⲆΔΔⲆ: "img/night-accessory9.png",
        ⵠᐃᐃΔⲆⲆⵠ: "img/day-accessory10.png",
        ⵠᐃⵠᐃⵠᐃΔ: "img/night-accessory10.png",
        ΔⲆᐃᐃᐃⵠⵠ: "img/day-accessory11.png",
        ΔΔᐃΔⲆΔΔ: "img/night-accessory11.png",
        ΔⲆΔᐃᐃⵠᐃ: "img/day-accessory12.png",
        ⵠⲆⵠΔΔⵠΔ: "img/night-accessory12.png",
        ᐃⵠⵠᐃᐃⵠⵠ: "img/day-bag.png",
        ΔⵠᐃΔⲆΔⵠ: "img/night-bag.png",
        ᐃᐃΔⲆⵠΔΔ: "img/inv-bag-out.png",
        ᐃᐃⵠⲆᐃⵠᐃ: "img/inv-bag-in.png",
        ⲆⵠⵠⲆΔⲆᐃ: "img/inv-bag-click.png",
        ⵠⵠⵠᐃⲆᐃⲆ: "img/day-pitchfork.png",
        ΔⲆⲆⲆΔⵠⲆ: "img/night-pitchfork.png",
        ΔΔⲆⲆᐃΔᐃ: "img/inv-pitchfork-out.png",
        ᐃⲆⵠᐃΔⵠⵠ: "img/inv-pitchfork-in.png",
        ΔᐃΔᐃⲆⲆΔ: "img/inv-pitchfork-click.png",
        ⲆⲆⵠᐃⲆⲆⲆ: "img/inv-wood-spike-door-out.png",
        ΔᐃⵠⲆᐃⵠΔ: "img/inv-wood-spike-door-in.png",
        ⵠⵠΔᐃᐃⵠⵠ: "img/inv-wood-spike-door-click.png",
        ⲆΔⵠᐃΔⲆΔ: "img/inv-stone-spike-door-out.png",
        ᐃᐃᐃⲆᐃⵠᐃ: "img/inv-stone-spike-door-in.png",
        ⲆΔᐃⵠΔᐃΔ: "img/inv-stone-spike-door-click.png",
        ⵠΔΔⲆΔᐃⵠ: "img/inv-gold-spike-door-out.png",
        ⵠⵠᐃᐃΔΔⲆ: "img/inv-gold-spike-door-in.png",
        ⲆΔΔⲆⵠⵠⵠ: "img/inv-gold-spike-door-click.png",
        ⵠⵠᐃᐃⵠⲆΔ: "img/inv-diamond-spike-door-out.png",
        ΔΔⲆⲆΔⵠᐃ: "img/inv-diamond-spike-door-in.png",
        ᐃⵠΔΔΔⲆΔ: "img/inv-diamond-spike-door-click.png",
        ⵠΔⵠΔⲆᐃⵠ: "img/inv-amethyst-spike-door-out.png",
        ⵠⲆⵠⲆⲆⵠᐃ: "img/inv-amethyst-spike-door-in.png",
        ⲆⵠⲆⵠΔΔⵠ: "img/inv-amethyst-spike-door-click.png",
        ⵠΔΔΔⵠⲆⵠ: "img/day-wood-spike-door.png",
        ΔⲆᐃΔⲆΔⲆ: "img/night-wood-spike-door.png",
        ⲆⲆΔⲆᐃⵠⲆ: "img/day-stone-spike-door.png",
        ⵠΔᐃⲆⵠⵠⵠ: "img/night-stone-spike-door.png",
        ⲆⲆⵠΔⲆⵠΔ: "img/day-gold-spike-door.png",
        ᐃᐃΔΔΔⲆᐃ: "img/night-gold-spike-door.png",
        ⵠᐃᐃⲆᐃⵠⵠ: "img/day-diamond-spike-door.png",
        ᐃⵠⲆᐃᐃⲆᐃ: "img/night-diamond-spike-door.png",
        ᐃⲆⲆⵠⲆⵠᐃ: "img/day-amethyst-spike-door.png",
        ᐃⵠΔᐃⵠⲆᐃ: "img/night-amethyst-spike-door.png",
        ⲆΔᐃᐃᐃᐃΔ: "img/inv-reidite-spike-door-out.png",
        ᐃⵠᐃΔᐃⲆⲆ: "img/inv-reidite-spike-door-in.png",
        ΔⵠⵠⲆⵠᐃⵠ: "img/inv-reidite-spike-door-click.png",
        ⵠⲆⵠᐃΔⲆΔ: "img/inv-reidite-door-out.png",
        ᐃᐃⲆⵠΔΔⲆ: "img/inv-reidite-door-in.png",
        ΔⵠⲆⲆⵠⵠⵠ: "img/inv-reidite-door-click.png",
        ⲆΔΔΔⲆΔⵠ: "img/inv-reidite-spike-out.png",
        ⵠΔΔⵠⵠⵠᐃ: "img/inv-reidite-spike-in.png",
        ⵠΔΔⲆᐃⵠᐃ: "img/inv-reidite-spike-click.png",
        ΔⵠⲆⲆⲆΔᐃ: "img/inv-reidite-wall-out.png",
        ⲆᐃⵠⵠΔᐃΔ: "img/inv-reidite-wall-in.png",
        ΔᐃⵠⵠⵠᐃΔ: "img/inv-reidite-wall-click.png",
        ᐃΔΔⵠᐃⵠⵠ: "img/day-reidite-wall.png",
        ΔΔⵠΔᐃᐃⵠ: "img/night-reidite-wall.png",
        ΔᐃᐃⲆᐃⲆⲆ: "img/day-reidite-door.png",
        ΔᐃΔᐃⵠᐃⵠ: "img/night-reidite-door.png",
        ⵠⲆⲆⲆⵠⵠᐃ: "img/day-reidite-spike.png",
        ⵠⲆΔⲆⵠΔⲆ: "img/night-reidite-spike.png",
        ⲆⵠⵠΔᐃᐃⵠ: "img/day-reidite-spike-door.png",
        ΔⲆⵠᐃⲆᐃᐃ: "img/night-reidite-spike-door.png",
        ᐃⵠΔᐃΔᐃⲆ: "img/inv-reidite-pickaxe-out.png",
        ⵠⵠᐃΔᐃⲆⲆ: "img/inv-reidite-pickaxe-in.png",
        ⲆᐃΔᐃᐃΔⵠ: "img/inv-reidite-pickaxe-click.png",
        ⲆⵠⲆⵠⵠΔⵠ: "img/day-reidite-pickaxe.png",
        ᐃⵠΔᐃΔᐃΔ: "img/night-reidite-pickaxe.png",
        ⲆΔⵠⲆᐃⲆᐃ: "img/inv-reidite-hammer-out.png",
        ΔⲆΔⲆⵠⲆⵠ: "img/inv-reidite-hammer-in.png",
        ΔⲆⲆⵠⵠⵠΔ: "img/inv-reidite-hammer-click.png",
        ΔⵠᐃⵠΔᐃᐃ: "img/day-reidite-hammer.png",
        ᐃⲆΔΔᐃⲆⲆ: "img/night-reidite-hammer.png",
        ⵠⲆΔᐃᐃᐃⲆ: "img/day-watermelon1.png",
        ᐃᐃᐃΔΔΔΔ: "img/night-watermelon1.png",
        ᐃⵠⲆΔΔᐃⵠ: "img/day-watermelon-dried1.png",
        ⵠΔⲆΔΔΔᐃ: "img/night-watermelon-dried1.png",
        ⵠⵠΔⵠΔⲆᐃ: "img/inv-watermelon-out.png",
        ᐃⲆᐃⲆΔΔᐃ: "img/inv-watermelon-in.png",
        ΔᐃΔᐃΔⵠⲆ: "img/inv-watermelon-click.png",
        ⲆⲆΔⵠⵠΔᐃ: "img/day-boat.png",
        ΔΔᐃΔⵠΔⲆ: "img/night-boat.png",
        ⵠⵠⵠⵠΔΔⲆ: "img/day-boat-wave.png",
        ⲆⲆⲆⲆᐃΔⵠ: "img/night-boat-wave.png",
        ΔᐃⲆⵠΔᐃᐃ: "img/inv-boat-out.png",
        ΔΔᐃⵠⵠⵠⲆ: "img/inv-boat-in.png",
        ⵠⵠΔⲆΔⲆⵠ: "img/inv-boat-click.png",
        ᐃᐃⵠⵠΔⵠⵠ: "img/day-plane.png",
        ᐃΔΔⲆⵠΔⲆ: "img/night-plane.png",
        ᐃΔⲆΔᐃΔᐃ: "img/inv-plane-out.png",
        ᐃⵠⵠⲆΔⲆΔ: "img/inv-plane-in.png",
        ᐃᐃⵠⲆᐃᐃⵠ: "img/inv-plane-click.png",
        ᐃΔⵠᐃⲆΔⵠ: "img/day-sled.png",
        ΔⲆⵠⲆΔⲆⲆ: "img/night-sled.png",
        ⲆⵠᐃΔⲆⵠⲆ: "img/day-sled-wave.png",
        ⵠⵠⲆⲆⵠᐃⵠ: "img/night-sled-wave.png",
        ΔᐃⲆⲆΔⵠΔ: "img/inv-sled-out.png",
        ⵠΔᐃΔᐃⲆΔ: "img/inv-sled-in.png",
        ΔᐃⵠⵠⲆΔⲆ: "img/inv-sled-click.png",
        ᐃⲆⲆⲆⲆᐃⵠ: "img/day-pirate-hat.png",
        ⵠᐃⵠᐃᐃⵠⵠ: "img/night-pirate-hat.png",
        ⵠⵠⵠΔᐃⲆⲆ: "img/inv-pirate-hat-out.png",
        ΔⵠⲆⲆᐃⲆⲆ: "img/inv-pirate-hat-in.png",
        ᐃⵠⵠⵠⲆΔΔ: "img/inv-pirate-hat-click.png",
        ⵠΔΔΔᐃⲆⵠ: "img/day-penguin.png",
        ΔⲆⲆⲆΔᐃⲆ: "img/night-penguin.png",
        ⵠⲆⲆⵠΔΔΔ: "img/hurt-penguin.png",
        ⵠⲆⵠⲆᐃ: "img/inv-penguin-feather-click.png",
        ⲆᐃᐃⲆⲆ: "img/inv-hawk-feather-click.png",
        ⵠⲆⲆΔⲆᐃᐃ: "img/day-boar1.png",
        ᐃᐃΔΔΔΔᐃ: "img/day-boar1-tamed.png",
        ⲆΔΔⵠⵠᐃΔ: "img/day-boar1-angry.png",
        ΔᐃⵠΔⵠⵠᐃ: "img/night-boar1.png",
        ΔⵠⲆⵠⲆⲆΔ: "img/night-boar1-tamed.png",
        ⵠⵠᐃᐃᐃᐃᐃ: "img/night-boar1-angry.png",
        ᐃⵠΔΔᐃⲆⵠ: "img/inv-mount-boar-out.png",
        ΔⲆΔᐃᐃΔⲆ: "img/inv-mount-boar-in.png",
        ᐃⵠᐃᐃⵠⵠᐃ: "img/inv-mount-boar-click.png",
        ⵠⵠᐃⲆⵠᐃᐃ: "img/day-hurt-boar1.png",
        ΔᐃᐃⲆⵠⲆⵠ: "img/boar1-step.png",
        ⵠᐃΔⵠΔⵠᐃ: "img/day-saddle1.png",
        ᐃΔⵠⵠⵠΔⵠ: "img/night-saddle1.png",
        ᐃⵠⲆΔⵠⲆⵠ: "img/inv-saddle-out.png",
        ΔΔΔᐃⲆΔΔ: "img/inv-saddle-in.png",
        ⲆⲆᐃⵠᐃΔⲆ: "img/inv-saddle-click.png",
        ΔΔᐃⲆᐃᐃᐃ: "img/day-magic-wand0.png",
        ᐃᐃⲆⵠᐃᐃᐃ: "img/night-magic-wand0.png",
        ᐃⵠΔΔⲆⵠᐃ: "img/day-light-wand1.png",
        ⵠΔᐃᐃⵠⵠΔ: "img/night-light-wand1.png",
        ΔΔᐃⲆⲆⲆⵠ: "img/inv-magic-wand0-out.png",
        ⲆⲆΔΔⵠΔⵠ: "img/inv-magic-wand0-in.png",
        ⲆΔⵠⲆᐃᐃᐃ: "img/inv-magic-wand0-click.png",
        ᐃᐃᐃⵠᐃᐃⵠ: "img/day-magic-wand1.png",
        ⲆΔⵠᐃΔⲆⵠ: "img/night-magic-wand1.png",
        ⵠⲆΔᐃΔΔⲆ: "img/day-light-wand0.png",
        ΔⲆΔᐃΔᐃⵠ: "img/night-light-wand0.png",
        ⵠΔⲆⵠⵠⲆᐃ: "img/inv-magic-wand1-out.png",
        ⲆⲆⲆⲆⲆΔΔ: "img/inv-magic-wand1-in.png",
        ᐃᐃⵠⲆⵠᐃΔ: "img/inv-magic-wand1-click.png",
        ᐃⲆⲆⵠΔᐃΔ: "img/day-firefly.png",
        ᐃⲆᐃᐃⲆⲆΔ: "img/night-firefly.png",
        ᐃⲆΔᐃⲆᐃᐃ: "img/hurt-firefly.png",
        ᐃⵠⵠⲆⵠⲆⲆ: "img/inv-firefly-out.png",
        ᐃᐃᐃⲆΔⵠΔ: "img/inv-firefly-in.png",
        ⵠΔᐃᐃⲆΔⵠ: "img/inv-firefly-click.png",
        ᐃΔΔᐃᐃⵠⵠ: "img/day-baby-dragon.png",
        ⵠΔⵠⲆⵠᐃⲆ: "img/night-baby-dragon.png",
        ⵠΔⵠᐃⲆᐃⲆ: "img/day-baby-dragon-angry.png",
        ⲆΔⲆⲆⵠΔΔ: "img/night-baby-dragon-angry.png",
        ⲆᐃⲆΔᐃᐃⲆ: "img/day-baby-dragon-tamed.png",
        ΔⲆᐃᐃⲆⵠⵠ: "img/night-baby-dragon-tamed.png",
        ⲆⲆⲆⲆᐃᐃⵠ: "img/day-wing-dragon-left-angry.png",
        ΔᐃΔᐃⲆᐃⵠ: "img/night-dragon-wing-left-angry.png",
        ⲆⵠΔⲆΔⵠⲆ: "img/day-wing-dragon-right-angry.png",
        ᐃΔᐃΔΔᐃⵠ: "img/night-dragon-wing-right-angry.png",
        ⲆᐃⵠᐃΔⲆΔ: "img/day-wing-dragon-left-tamed.png",
        ⵠⲆⵠΔⲆⵠⲆ: "img/night-dragon-wing-left-tamed.png",
        ΔΔΔΔΔΔⲆ: "img/day-wing-dragon-right-tamed.png",
        ⲆΔⲆΔᐃⵠⵠ: "img/night-wing-dragon-right-tamed.png",
        ᐃⵠᐃⵠⲆⵠΔ: "img/day-wing-dragon-left.png",
        ΔⲆᐃⵠⲆⲆΔ: "img/night-dragon-wing-left.png",
        ᐃᐃⵠⵠⵠᐃᐃ: "img/day-wing-dragon-right.png",
        ⵠᐃⲆΔⵠΔⲆ: "img/night-wing-dragon-right.png",
        ΔᐃⵠⵠⲆᐃⵠ: "img/hurt-baby-dragon.png",
        ⲆΔⲆⲆⲆⵠⲆ: "img/hurt-baby-dragon-wing-left.png",
        ⵠⲆΔΔΔⲆᐃ: "img/hurt-baby-dragon-wing-right.png",
        ᐃᐃⵠΔᐃⲆᐃ: "img/inv-baby-dragon-out.png",
        ⵠⵠΔᐃΔΔⲆ: "img/inv-baby-dragon-in.png",
        ᐃᐃⵠΔΔᐃΔ: "img/inv-baby-dragon-click.png",
        ⲆⵠᐃᐃᐃΔⲆ: "img/day-baby-lava.png",
        ⲆⵠⵠⲆⵠⵠⵠ: "img/night-baby-lava.png",
        ⵠⵠΔᐃⵠⲆᐃ: "img/day-baby-lava-angry.png",
        ΔΔⵠⵠᐃᐃᐃ: "img/night-baby-lava-angry.png",
        ⵠⵠΔΔᐃᐃΔ: "img/day-baby-lava-tamed.png",
        ⲆⲆΔΔΔⵠⵠ: "img/night-baby-lava-tamed.png",
        ⲆΔᐃⵠⵠⲆᐃ: "img/day-wing-lava-left-angry.png",
        ᐃⵠΔⲆᐃⵠΔ: "img/night-wing-lava-left-angry.png",
        ⲆΔᐃⵠⵠΔⲆ: "img/day-wing-lava-right-angry.png",
        ΔᐃⲆΔᐃⲆΔ: "img/night-wing-lava-right-angry.png",
        ΔΔⲆᐃΔΔⵠ: "img/day-wing-lava-left-tamed.png",
        ⵠⲆΔᐃⵠΔⲆ: "img/night-wing-lava-left-tamed.png",
        ⲆⲆΔⲆⲆⵠⲆ: "img/day-wing-lava-right-tamed.png",
        ⲆⲆᐃᐃⵠΔᐃ: "img/night-wing-lava-right-tamed.png",
        ΔⲆⲆΔⲆⲆᐃ: "img/day-wing-lava-left.png",
        ΔⲆⲆᐃᐃΔΔ: "img/night-wing-lava-left.png",
        ᐃΔⵠΔⲆⲆⲆ: "img/day-wing-lava-right.png",
        ΔᐃᐃⲆΔⵠⲆ: "img/night-wing-lava-right.png",
        ⲆᐃⵠΔⲆᐃΔ: "img/hurt-baby-lava.png",
        ⵠΔΔᐃⲆⵠⲆ: "img/hurt-baby-lava-wing-left.png",
        ᐃΔⲆⵠΔⲆⲆ: "img/hurt-baby-lava-wing-right.png",
        ⲆᐃΔΔΔᐃⵠ: "img/inv-baby-lava-out.png",
        ⲆⲆΔⲆⵠᐃⲆ: "img/inv-baby-lava-in.png",
        ΔᐃⲆⵠΔⲆⵠ: "img/inv-baby-lava-click.png",
        ⲆⲆⲆΔⲆⲆΔ: "img/day-falcon.png",
        ⵠⵠⲆⲆΔⲆⲆ: "img/night-falcon.png",
        ᐃΔⵠᐃᐃⲆⵠ: "img/day-falcon-angry.png",
        ⵠᐃⵠᐃᐃⵠᐃ: "img/night-falcon-angry.png",
        ᐃΔⲆⲆⵠⲆⲆ: "img/day-falcon-ground.png",
        ⵠⵠΔⲆᐃᐃΔ: "img/night-falcon-ground.png",
        ⲆᐃⵠⲆⵠⲆⲆ: "img/day-falcon-ground-angry.png",
        ᐃΔᐃᐃⵠⲆⵠ: "img/night-falcon-ground-angry.png",
        ⵠᐃⲆⵠⵠⲆᐃ: "img/day-falcon-wings-left.png",
        ΔⵠΔΔΔΔᐃ: "img/night-falcon-wings-left.png",
        ᐃⲆᐃⲆᐃⵠⵠ: "img/day-falcon-wings-right.png",
        ΔΔᐃΔΔⵠᐃ: "img/night-falcon-wings-right.png",
        ΔΔΔⲆΔⵠΔ: "img/day-falcon-angry-wings-left.png",
        ΔⵠᐃⲆᐃⲆΔ: "img/night-falcon-angry-wings-left.png",
        ⲆⵠⲆᐃΔΔᐃ: "img/day-falcon-angry-wings-right.png",
        ΔⵠⵠΔΔⵠΔ: "img/night-falcon-angry-wings-right.png",
        ᐃⲆⲆᐃᐃΔᐃ: "img/day-falcon-wings-left-tamed.png",
        ⵠⲆᐃΔᐃᐃᐃ: "img/night-falcon-wings-left-tamed.png",
        ⲆⵠᐃⵠⲆⲆⲆ: "img/day-falcon-wings-right-tamed.png",
        ΔⵠⲆⵠⵠᐃⵠ: "img/night-falcon-wings-right-tamed.png",
        ΔΔⵠΔⵠⵠⵠ: "img/day-falcon-tamed.png",
        ⲆⵠΔᐃΔᐃΔ: "img/night-falcon-tamed.png",
        ᐃⵠⵠⵠΔᐃΔ: "img/hurt-falcon-ground.png",
        ⲆΔᐃⲆⵠᐃⵠ: "img/hurt-falcon.png",
        ⲆⵠⵠᐃⲆⵠΔ: "img/hurt-falcon-wings-left.png",
        ⲆⲆᐃⵠΔⲆᐃ: "img/hurt-falcon-wings-right.png",
        ΔⲆⲆⵠΔⵠᐃ: "img/inv-falcon-out.png",
        ⲆᐃⵠⵠΔᐃᐃ: "img/inv-falcon-in.png",
        ᐃΔΔⵠⲆⲆᐃ: "img/inv-falcon-click.png",
        ΔⵠⵠΔⵠΔⲆ: "img/day-crab-boss.png",
        ⵠᐃⲆᐃⵠᐃᐃ: "img/night-crab-boss.png",
        ᐃⵠᐃᐃΔΔΔ: "img/day-crab-boss-angry.png",
        ΔΔΔᐃᐃⲆⲆ: "img/night-crab-boss-angry.png",
        ⵠᐃⲆΔⵠΔΔ: "img/day-crab-boss-tamed.png",
        ΔᐃΔⵠᐃΔᐃ: "img/night-crab-boss-tamed.png",
        ⲆΔᐃΔⵠΔᐃ: "img/day-crab-boss-claw-left-attack.png",
        ᐃⵠⲆΔΔᐃΔ: "img/night-crab-boss-claw-left-attack.png",
        ΔᐃᐃΔⲆΔⲆ: "img/day-crab-boss-claw-right-attack.png",
        ⲆⲆⲆⵠᐃᐃⲆ: "img/night-crab-boss-claw-right-attack.png",
        ⵠⲆⵠⵠⵠⲆᐃᐃΔ: "img/day-crab-boss-claw-left-tamed.png",
        ΔᐃΔⲆΔᐃⲆᐃΔ: "img/night-crab-boss-claw-left-tamed.png",
        ⵠΔⲆⲆⲆᐃΔⲆᐃ: "img/day-crab-boss-claw-right-tamed.png",
        ᐃⲆⵠⵠΔⲆΔⵠⲆ: "img/night-crab-boss-claw-right-tamed.png",
        ⵠᐃⲆⵠⵠⵠⵠ: "img/day-crab-boss-claw-left.png",
        ᐃΔⵠᐃᐃΔᐃ: "img/night-crab-boss-claw-left.png",
        ⵠᐃⲆⲆⲆⵠᐃ: "img/day-crab-boss-claw-right.png",
        ΔⲆᐃⲆᐃᐃⲆ: "img/night-crab-boss-claw-right.png",
        ΔᐃⵠᐃⲆⵠᐃ: "img/hurt-crab-boss.png",
        ⲆⵠΔᐃⲆⵠⲆ: "img/hurt-crab-boss-claw-left.png",
        ⵠⵠᐃⵠⵠⵠⵠ: "img/hurt-crab-boss-claw-right.png",
        ΔΔⵠᐃⲆᐃⵠ: "img/heal-crab-boss.png",
        ⲆⵠⵠᐃⵠᐃⲆ: "img/heal-crab-boss-claw-left.png",
        ⲆΔΔᐃᐃΔⵠ: "img/heal-crab-boss-claw-right.png",
        ⲆⲆΔⵠΔᐃⲆ: "img/crab-step.png",
        ᐃⵠⲆⵠΔᐃⲆ: "img/inv-crab-boss-out.png",
        ⲆⲆΔⲆᐃΔΔ: "img/inv-crab-boss-in.png",
        ⵠᐃⲆΔⵠⵠⲆ: "img/inv-crab-boss-click.png",
        ᐃⲆⵠⲆⵠᐃᐃ: "img/day-cactus10.png",
        ᐃΔⲆⲆⲆΔⵠ: "img/night-cactus10.png",
        ᐃΔΔⵠⵠΔⲆ: "img/inv-cactus-out.png",
        ΔⲆⲆᐃᐃⲆᐃ: "img/inv-cactus-in.png",
        ΔᐃᐃᐃΔⵠΔ: "img/inv-cactus-click.png",
        ⵠᐃⲆⵠᐃᐃᐃ: "img/day-scorpion.png",
        ⵠⲆⵠΔΔΔⵠ: "img/night-scorpion.png",
        ΔᐃⲆᐃΔᐃᐃ: "img/day-scorpion-hand-left.png",
        ⵠⲆᐃᐃⵠᐃⲆ: "img/night-scorpion-hand-left.png",
        ΔⲆⲆⲆᐃⵠⵠ: "img/day-scorpion-hand-right.png",
        ⲆⵠⲆⲆⲆΔⲆ: "img/night-scorpion-hand-right.png",
        ΔⵠΔΔⵠⲆⲆ: "img/hurt-scorpion.png",
        ΔⲆᐃᐃⲆᐃᐃ: "img/hurt-scorpion-hand-left.png",
        ᐃᐃᐃᐃᐃᐃⲆ: "img/hurt-scorpion-hand-right.png",
        ⵠⲆⵠⵠΔᐃⵠ: "img/day-vulture.png",
        ⵠⲆΔⲆΔᐃⵠ: "img/night-vulture.png",
        ΔᐃΔⵠⲆᐃⲆ: "img/day-vulture-angry.png",
        ⲆⵠᐃΔᐃᐃⵠ: "img/night-vulture-angry.png",
        ⵠΔⵠⲆᐃΔᐃ: "img/day-vulture-ground.png",
        ΔⵠⲆⲆΔⵠΔ: "img/night-vulture-ground.png",
        ⲆᐃΔⵠΔⵠⵠ: "img/day-vulture-ground-angry.png",
        ΔΔΔⵠᐃᐃⲆ: "img/night-vulture-ground-angry.png",
        ⵠⲆΔΔᐃⵠⲆ: "img/day-vulture-wings-left.png",
        ⲆᐃⵠᐃⲆⵠΔ: "img/night-vulture-wings-left.png",
        ⲆᐃⲆᐃⵠⵠΔ: "img/day-vulture-wings-right.png",
        ΔⵠΔⵠⵠΔᐃ: "img/night-vulture-wings-right.png",
        ᐃⵠⲆⲆᐃⵠⵠ: "img/day-vulture-angry-wings-left.png",
        ΔΔⲆⲆⲆΔᐃ: "img/night-vulture-angry-wings-left.png",
        ⵠⲆⵠⵠⵠⵠΔ: "img/day-vulture-angry-wings-right.png",
        ⲆⲆⵠΔⵠᐃⵠ: "img/night-vulture-angry-wings-right.png",
        ⲆΔᐃⲆΔᐃΔ: "img/day-vulture-wings-left-tamed.png",
        ⲆⵠⵠⵠⵠΔⵠ: "img/night-vulture-wings-left-tamed.png",
        ⲆΔΔⲆΔⵠⵠ: "img/day-vulture-wings-right-tamed.png",
        ⲆΔΔΔᐃΔⲆ: "img/night-vulture-wings-right-tamed.png",
        ᐃⵠΔⵠⲆᐃⲆ: "img/day-vulture-tamed.png",
        ⲆⵠⲆᐃⲆⲆⵠ: "img/night-vulture-tamed.png",
        ᐃⵠᐃⵠⲆⲆΔ: "img/hurt-vulture-ground.png",
        ΔⵠⵠᐃΔⲆΔ: "img/hurt-vulture.png",
        ᐃᐃΔᐃᐃⲆⵠ: "img/hurt-vulture-wings-left.png",
        ᐃⲆΔᐃⵠⵠᐃ: "img/hurt-vulture-wings-right.png",
        ⲆⲆⵠᐃΔᐃⵠ: "img/day-aloe-vera.png",
        ΔΔᐃΔᐃⵠⲆ: "img/night-aloe-vera.png",
        ΔⲆⲆⲆⲆⲆⵠ: "img/inv-aloe-vera-out.png",
        ᐃΔᐃⵠⵠⲆΔ: "img/inv-aloe-vera-in.png",
        ΔⲆⵠⵠⲆΔᐃ: "img/inv-aloe-vera-click.png",
        ⵠΔΔⵠΔⵠⵠ: "img/day-aloe-vera-grown.png",
        ΔⲆΔⵠⵠⲆⵠ: "img/night-aloe-vera-grown.png",
        ΔΔⲆⵠᐃΔᐃ: "img/day-aloe-vera-dried.png",
        ᐃᐃⵠΔΔΔᐃ: "img/night-aloe-vera-dried.png",
        ⵠΔᐃⲆⵠⲆⵠ: "img/day-turban1.png",
        Ⲇᐃᐃᐃᐃⵠᐃ: "img/night-turban1.png",
        ⲆᐃⲆΔⵠᐃᐃ: "img/day-turban2.png",
        ΔΔⲆⲆⲆⵠΔ: "img/night-turban2.png",
        ΔᐃⵠᐃΔⲆⲆ: "img/inv-turban2-out.png",
        ΔⵠᐃⲆᐃⲆⲆ: "img/inv-turban2-in.png",
        ⵠᐃᐃᐃΔᐃᐃ: "img/inv-turban2-click.png",
        ᐃⲆⲆᐃΔΔⲆ: "img/inv-turban1-out.png",
        ᐃΔⵠΔⲆⵠⵠ: "img/inv-turban1-in.png",
        ΔⲆⲆⵠⵠⲆᐃ: "img/inv-turban1-click.png",
        ᐃᐃⲆΔⵠⵠⲆ: "img/day-pitchfork2.png",
        ⵠⲆᐃΔⵠΔᐃ: "img/night-pitchfork2.png",
        ⲆⵠⲆΔⲆⵠⵠ: "img/inv-pitchfork2-out.png",
        ⲆΔⲆΔᐃᐃⲆ: "img/inv-pitchfork2-in.png",
        ΔᐃᐃᐃᐃΔᐃ: "img/inv-pitchfork2-click.png",
        ΔⲆⵠⲆᐃᐃⵠ: "img/inv-gold-fork-click.png",
        ⲆⲆⲆΔΔⵠⲆ: "img/inv-pilot-glasses-click.png",
        ⵠΔⵠΔᐃⵠⲆ: "img/day-pilot-helmet.png",
        ᐃΔⲆⵠⲆΔⵠ: "img/night-pilot-helmet.png",
        ⵠⲆⵠⲆΔⵠᐃ: "img/inv-pilot-helmet-out.png",
        ⵠᐃⲆΔᐃᐃᐃ: "img/inv-pilot-helmet-in.png",
        ⲆᐃⵠⲆΔΔΔ: "img/inv-pilot-helmet-click.png",
        ⵠⲆⲆᐃᐃⲆΔⲆⵠ: "img/day-sandworm0.png",
        ΔⲆⲆᐃᐃΔⵠ: "img/day-sandworm1.png",
        ᐃᐃᐃⵠΔⲆΔ: "img/day-sandworm2.png",
        ⲆⲆⲆΔⲆᐃᐃⲆᐃ: "img/night-sandworm0.png",
        ΔᐃᐃⵠⵠⲆΔ: "img/night-sandworm1.png",
        ⵠΔⲆᐃⲆⵠᐃ: "img/night-sandworm2.png",
        ΔⵠΔⲆΔⵠΔ: "img/hurt-sandworm0.png",
        ΔⵠᐃΔΔⵠᐃ: "img/hurt-sandworm1.png",
        ⵠⲆΔᐃΔᐃⲆ: "img/hurt-sandworm2.png",
        ΔΔᐃᐃⲆ: "img/inv-vulture-feather-click.png",
        ⲆⲆᐃΔᐃᐃᐃ: "img/day-emerald0.png",
        ᐃᐃⲆᐃⵠΔᐃ: "img/night-emerald0.png",
        ⲆⵠⵠⵠΔⲆᐃ: "img/day-emerald1.png",
        ⵠᐃⲆⵠⲆⲆΔ: "img/night-emerald1.png",
        ΔⲆⲆⵠᐃⲆⲆ: "img/day-emerald2.png",
        ᐃᐃΔᐃⲆⵠΔ: "img/night-emerald2.png",
        ⲆⵠⵠΔⵠ: "img/inv-emerald-click.png",
        ⵠⵠⵠΔᐃᐃⲆ: "img/inv-sworm-juice-out.png",
        ⵠᐃⲆⵠᐃᐃⵠ: "img/inv-sworm-juice-in.png",
        ⵠΔΔᐃⵠΔⲆ: "img/inv-sworm-juice-click.png",
        ΔᐃⵠⲆΔᐃⲆ: "img/day-point-machine.png",
        ⵠⲆⲆΔΔⲆΔ: "img/night-point-machine.png",
        ⲆⲆΔΔⵠᐃΔ: "img/day-point-machine-hole.png",
        ⲆⲆΔⵠΔΔΔ: "img/night-point-machine-hole.png",
        ⵠΔⵠΔⲆⵠᐃ: "img/day-point-machine-ground.png",
        ΔⲆᐃⲆⲆΔᐃ: "img/night-point-machine-ground.png",
        ⲆⵠᐃΔⲆⵠᐃ: "img/day-point-machine-rotate.png",
        ΔᐃⲆⲆⲆΔⵠ: "img/night-point-machine-rotate.png",
        ᐃᐃΔⲆΔᐃⵠ: "img/inv-point-machine-out.png",
        ΔᐃᐃⵠΔΔΔ: "img/inv-point-machine-in.png",
        ᐃᐃⲆⲆᐃᐃᐃ: "img/inv-point-machine-click.png",
        ⲆΔΔᐃᐃᐃΔ: "img/day-extractor-machine0-stone.png",
        ⵠᐃᐃΔⲆΔⲆ: "img/night-extractor-machine0-stone.png",
        ⵠᐃᐃⵠΔⲆᐃ: "img/day-extractor-machine-stone.png",
        ᐃᐃΔᐃⲆⲆⵠ: "img/night-extractor-machine-stone.png",
        ΔⲆΔᐃⵠΔᐃ: "img/inv-extractor-machine-stone-out.png",
        ⵠΔᐃⵠᐃⵠᐃ: "img/inv-extractor-machine-stone-in.png",
        ⵠᐃⲆᐃⵠⵠⵠ: "img/inv-extractor-machine-stone-click.png",
        ⲆᐃᐃΔⲆⲆᐃ: "img/day-extractor-machine0-gold.png",
        ⵠⲆᐃᐃⲆᐃⵠ: "img/night-extractor-machine0-gold.png",
        ⲆᐃΔΔΔⵠⲆ: "img/day-extractor-machine-gold.png",
        ⲆΔⲆⵠⵠⵠⵠ: "img/night-extractor-machine-gold.png",
        ᐃᐃΔΔΔⵠⵠ: "img/inv-extractor-machine-gold-out.png",
        ⲆΔᐃⲆᐃⲆⲆ: "img/inv-extractor-machine-gold-in.png",
        ⵠⵠⵠᐃΔᐃⵠ: "img/inv-extractor-machine-gold-click.png",
        ΔᐃⲆⲆⲆⲆᐃ: "img/day-extractor-machine0-diamond.png",
        ΔⲆᐃⵠⵠⲆΔ: "img/night-extractor-machine0-diamond.png",
        ⵠΔⲆⵠΔΔΔ: "img/day-extractor-machine-diamond.png",
        ΔⲆⵠᐃΔⵠΔ: "img/night-extractor-machine-diamond.png",
        ⵠΔᐃⵠⲆᐃⲆ: "img/inv-extractor-machine-diamond-out.png",
        ⲆΔᐃⲆⵠᐃᐃ: "img/inv-extractor-machine-diamond-in.png",
        ΔᐃΔᐃᐃⵠᐃ: "img/inv-extractor-machine-diamond-click.png",
        ⲆᐃΔⵠⵠᐃⵠ: "img/day-extractor-machine0-amethyst.png",
        ΔᐃⵠΔᐃⵠⵠ: "img/night-extractor-machine0-amethyst.png",
        ᐃΔᐃⲆⵠΔⲆ: "img/day-extractor-machine-amethyst.png",
        ΔᐃⲆΔΔⲆᐃ: "img/night-extractor-machine-amethyst.png",
        ⵠᐃⲆⵠⲆᐃⲆ: "img/inv-extractor-machine-amethyst-out.png",
        ⲆΔⲆⲆⵠΔⲆ: "img/inv-extractor-machine-amethyst-in.png",
        ᐃᐃⵠⵠⵠΔⵠ: "img/inv-extractor-machine-amethyst-click.png",
        ⵠⲆᐃΔⵠᐃᐃ: "img/day-extractor-machine0-reidite.png",
        ⵠΔⲆᐃΔⲆΔ: "img/night-extractor-machine0-reidite.png",
        ΔᐃⲆᐃⲆⲆᐃ: "img/day-extractor-machine-reidite.png",
        ⵠᐃⲆᐃⲆⲆⵠ: "img/night-extractor-machine-reidite.png",
        ᐃⲆΔΔⲆᐃⲆ: "img/inv-extractor-machine-reidite-out.png",
        ⲆⵠΔᐃᐃΔⲆ: "img/inv-extractor-machine-reidite-in.png",
        ⵠⲆᐃᐃⲆⵠⲆ: "img/inv-extractor-machine-reidite-click.png",
        ΔⵠΔᐃᐃᐃᐃ: "img/extractor-cases.png",
        ΔΔᐃᐃᐃⲆΔ: "img/day-golden-hen.png",
        ΔⲆⲆΔΔᐃΔ: "img/night-golden-hen.png",
        ⲆᐃⲆⲆⲆⲆⵠ: "img/day-golden-chicken.png",
        ᐃⲆⲆᐃⵠⲆⲆ: "img/night-golden-chicken.png",
        ⵠΔΔᐃΔΔᐃ: "img/hurt-golden-hen.png",
        ΔⵠΔᐃΔΔᐃ: "img/hurt-golden-chicken.png",
        ᐃΔᐃⵠⲆⲆᐃ: "img/logo-interface.png",
        ᐃᐃΔⵠⵠⲆΔ: "img/forest-mode-hover.png",
        ᐃᐃⵠᐃᐃᐃᐃ: "img/normal-mode-hover.png",
        ΔⲆⵠᐃᐃΔⲆ: "img/vampire-mode-hover.png",
        ΔⵠᐃΔⲆΔᐃ: "img/zombie-mode-hover.png",
        ⲆⲆⲆΔⵠᐃⲆ: "img/community-mode-hover2.png",
        ⵠᐃΔᐃᐃⲆⲆ: "img/experimental-mode-hover.png",
        ⲆΔΔⲆᐃⲆⲆ: "img/zombie-mode-out.png",
        ΔΔΔⲆⵠΔⲆ: "img/zombie-mode-in.png",
        ⲆΔⵠⲆⲆᐃⲆ: "img/zombie-mode-click.png",
        ᐃⵠⲆⲆΔᐃⵠ: "img/vampire-mode-out.png",
        ᐃΔᐃᐃΔᐃᐃ: "img/vampire-mode-in.png",
        ⲆᐃᐃΔΔᐃΔ: "img/vampire-mode-click.png",
        ᐃⲆⵠⲆᐃΔⲆ: "img/normal-mode-out.png",
        ΔⲆⵠⵠⵠⲆⲆ: "img/normal-mode-in.png",
        ⲆΔᐃᐃⵠΔΔ: "img/normal-mode-click.png",
        ⲆᐃⵠΔⲆⲆᐃ: "img/forest-mode-out.png",
        ⲆⲆΔⲆΔⵠⲆ: "img/forest-mode-in.png",
        ΔⲆⵠⲆΔⲆΔ: "img/forest-mode-click.png",
        ⲆΔᐃᐃᐃΔᐃ: "img/community-mode-out.png",
        ᐃᐃᐃΔⵠⲆΔ: "img/community-mode-in.png",
        ⲆⵠⲆⵠΔΔⲆ: "img/community-mode-click.png",
        ⲆΔᐃΔⵠᐃᐃ: "img/experimental-modes-out.png",
        Ⲇⵠᐃⵠᐃᐃᐃ: "img/experimental-modes-in.png",
        ⵠⵠΔⵠΔΔⵠ: "img/experimental-modes-click.png",
        ΔⲆᐃⲆᐃⲆⲆ: "img/youtube-button-out.png",
        ⲆⲆΔⵠΔⲆⲆ: "img/youtube-button-in.png",
        ⵠΔⲆΔⵠⲆⲆ: "img/youtube-button-click.png",
        ⲆⲆᐃⵠΔᐃⲆ: "img/wiki-button-out.png",
        ΔᐃⵠᐃᐃΔⵠ: "img/wiki-button-in.png",
        ΔⵠᐃᐃⲆⵠⵠ: "img/wiki-button-click.png",
        ΔᐃΔᐃⵠⲆⵠ: "img/twitter-button-out.png",
        ᐃⵠΔⵠⵠᐃⵠ: "img/twitter-button-in.png",
        ⲆⵠᐃᐃΔᐃⲆ: "img/twitter-button-click.png",
        ⵠⲆΔⲆⲆᐃᐃ: "img/facebook-button-out.png",
        ᐃⲆⲆⲆΔⲆΔ: "img/facebook-button-in.png",
        ⲆⵠΔᐃΔⵠⲆ: "img/facebook-button-click.png",
        ᐃᐃᐃⵠΔΔΔ: "img/reddit-button-out.png",
        ⵠΔᐃᐃᐃⵠⲆ: "img/reddit-button-in.png",
        ΔᐃΔⲆⵠⲆⲆ: "img/reddit-button-click.png",
        ᐃᐃⲆⲆⵠΔᐃ: "img/discord-button-out.png",
        ⲆⵠΔⲆⲆΔⵠ: "img/discord-button-in.png",
        ΔⵠΔᐃᐃᐃⵠ: "img/discord-button-click.png",
        ΔⲆᐃⲆⲆᐃᐃ: "img/merch-button-out.png",
        ᐃⵠⲆᐃⲆᐃᐃ: "img/merch-button-in.png",
        ⲆⲆΔᐃⲆⵠⵠ: "img/merch-button-click.png",
        ΔⲆⵠⵠⵠⲆᐃᐃᐃ: "img/terminal-button-out.png",
        ᐃΔⵠᐃⲆⲆⲆⵠⵠ: "img/terminal-button-in.png",
        ⲆᐃⵠⲆᐃⲆⵠⲆⵠ: "img/terminal-button-click.png",
        ⵠΔⲆΔⲆⵠᐃ: "img/restart-out.png",
        ΔᐃΔᐃΔⲆⲆ: "img/restart-in.png",
        ⲆᐃΔⲆΔᐃΔ: "img/restart-click.png",
        ⲆⲆⵠΔⵠΔᐃ: "img/guide-out.png",
        ΔⲆΔⲆⵠᐃΔ: "img/guide-in.png",
        ΔⵠⵠᐃⵠΔⵠ: "img/guide-click.png",
        ΔΔⵠΔΔⵠⵠ: "img/copy-paste-out.png",
        ᐃΔⲆⲆᐃⲆΔ: "img/copy-paste-in.png",
        ⲆⲆⵠΔⲆⲆⲆ: "img/copy-paste-click.png",
        ᐃⵠⵠᐃᐃⲆΔ: "img/link-buttons-bg.png",
        ⲆⲆⲆⲆⲆᐃΔ: "img/changelog-box2.png",
        ⲆⵠΔᐃⵠᐃⵠ: "img/changelog_31.png",
        ⲆΔΔⲆⲆᐃⵠ: "img/banner-taming.png",
        ΔᐃᐃⲆⲆⵠⵠ: "img/profile-button-out.png",
        ΔᐃᐃΔⵠᐃΔ: "img/profile-button-in.png",
        ⲆⲆᐃⲆⲆⲆΔ: "img/profile-button-click.png",
        ⲆⵠⵠᐃᐃⲆⲆ: "img/login-button-out.png",
        ⲆᐃⵠⵠⲆΔΔ: "img/login-button-in.png",
        ⵠⵠᐃⲆⲆⵠⵠ: "img/login-button-click.png",
        ΔⲆᐃΔΔΔⵠ: "img/login-google-out.png",
        ⲆᐃⵠⲆⵠⲆᐃ: "img/login-google-in.png",
        ΔⲆⲆⲆᐃⲆⵠ: "img/login-google-click.png",
        ⲆⵠⲆⵠⵠⵠⵠ: "img/login-facebook-out.png",
        ΔⲆⵠᐃΔΔⲆ: "img/login-facebook-in.png",
        ᐃΔⲆⵠᐃΔⲆ: "img/login-facebook-click.png",
        ΔᐃΔⵠⲆⵠⲆ: "img/account-box.png",
        ΔⵠⵠᐃⵠᐃⲆⲆⲆ: "img/account-under-maintenance.png",
        ᐃⲆⵠᐃⲆΔΔ: "img/close-button-account-out.png",
        ᐃᐃΔⲆᐃⲆⵠ: "img/close-button-account-in.png",
        ΔⲆⵠΔᐃⲆⵠ: "img/close-button-account-click.png",
        ⵠⲆⵠᐃᐃⲆᐃ: "img/play-button-out.png",
        ⲆⲆⵠΔⵠᐃᐃ: "img/play-button-in.png",
        ⵠⵠΔΔᐃΔᐃ: "img/play-button-click.png",
        ⵠⵠΔᐃᐃⵠᐃΔⲆ: "img/app-store-badge.png",
        ⵠⵠⵠⲆΔᐃⲆΔΔ: "img/play-store-badge.png",
        ΔΔⵠⲆΔⵠⲆⲆᐃ: "img/mobile-boxad.png",
        ⲆᐃᐃⵠⲆᐃⵠ: "img/modify-name-out.png",
        ⲆⵠⵠⵠΔΔⵠ: "img/modify-name-in.png",
        ΔⵠΔΔᐃⵠⵠ: "img/modify-name-click.png",
        ⵠⵠΔᐃΔⲆΔ: "img/copy-id-button-out.png",
        ΔⲆⲆΔΔΔΔ: "img/copy-id-button-hover.png",
        ⵠⲆⲆⲆΔΔᐃ: "img/copy-id-button-active.png",
        ⵠⲆⵠⵠⲆΔⲆ: "img/yes-button-out.png",
        ⵠΔΔᐃⵠⲆᐃ: "img/yes-button-in.png",
        ᐃΔⲆⵠⲆⲆᐃ: "img/yes-button-click.png",
        ⵠⵠⲆΔΔΔᐃ: "img/yes-300-button-out.png",
        ᐃⵠⲆᐃᐃᐃΔ: "img/yes-300-button-in.png",
        ⵠᐃᐃⲆΔⵠⵠ: "img/yes-300-button-click.png",
        ᐃΔⲆⵠᐃΔᐃ: "img/no-button-out.png",
        ⵠᐃΔᐃⵠⲆⵠ: "img/no-button-in.png",
        ᐃⲆΔⲆΔᐃⵠ: "img/no-button-click.png",
        ΔⲆΔⲆᐃⵠΔ: "img/no-thanks-button-out.png",
        ⵠⵠΔⲆΔⲆᐃ: "img/no-thanks-button-in.png",
        ⲆΔΔΔⵠᐃΔ: "img/no-thanks-button-click.png",
        ⵠᐃᐃΔᐃᐃᐃ: "img/shop-button-out.png",
        ΔᐃⵠⵠⵠⲆⲆ: "img/shop-button-in.png",
        ᐃⲆΔΔᐃⵠΔ: "img/shop-button-click.png",
        ⵠᐃⵠΔⵠⲆΔ: "img/logout-out.png",
        ᐃⵠΔⲆΔⲆΔ: "img/logout-in.png",
        ΔΔⵠⵠⲆⲆᐃ: "img/logout-click.png",
        ⵠᐃⵠΔΔⵠᐃ: "img/terms-button-out.png",
        ᐃⲆⲆΔⵠⲆΔ: "img/terms-button-in.png",
        ⵠⵠⲆᐃᐃⲆΔ: "img/terms-button-click.png",
        ⵠᐃⵠΔᐃⵠᐃ: "img/tutorial-icon.png",
        ᐃⲆⲆⵠᐃΔⵠ: "img/skins-icon.png",
        ᐃᐃⵠᐃⵠᐃⲆ: "img/shop-icon.png",
        ΔⲆⵠⲆᐃΔⲆⵠⲆ: "img/paint-icon.png",
        ⲆⵠⵠⵠⵠⵠⲆ: "img/leaderboard-icon.png",
        ᐃⵠᐃⲆⲆᐃⵠ: "img/start-icon.png",
        ΔⲆᐃⲆⵠⲆⵠ: "img/profile-icon.png",
        ⵠⵠᐃΔⵠⲆᐃ: "img/server-access-icon2.png",
        ⲆᐃᐃΔⵠⵠΔ: "img/button-homepage-bg-out.png",
        ⵠΔΔΔⵠⲆⲆ: "img/button-homepage-bg-in.png",
        ⵠⲆⲆⲆⲆⲆᐃ: "img/button-homepage-bg-click.png",
        ⲆΔⲆᐃΔΔΔ: "img/button-bottom-homepage-bg-out.png",
        ΔⵠΔΔⵠⲆΔ: "img/button-bottom-homepage-bg-in.png",
        ⵠᐃⲆⲆᐃᐃⲆ: "img/button-bottom-homepage-bg-click.png",
        ⲆᐃⲆⵠᐃⲆⵠ: "img/lvl-player.png",
        ⵠᐃᐃⲆⲆᐃⲆ: "img/avatar-player.png",
        ⲆΔⲆⲆᐃΔΔ: "img/avatar-player1.png",
        ᐃⲆⲆᐃⵠᐃⵠ: "img/avatar-player2.png",
        ⵠΔᐃⲆⵠᐃⵠ: "img/avatar-player3.png",
        ᐃⵠⵠⲆⵠΔᐃ: "img/avatar-player4.png",
        ᐃⵠⵠⵠⲆΔⲆ: "img/avatar-player5.png",
        ᐃⵠⵠΔᐃᐃΔ: "img/avatar-player6.png",
        ⵠΔᐃⲆΔΔⵠ: "img/avatar-player7.png",
        ᐃⵠΔᐃΔⲆⲆ: "img/avatar-player8.png",
        ⵠᐃΔⵠⵠⵠⵠ: "img/avatar-player9.png",
        ΔᐃⵠⵠᐃΔΔ: "img/avatar-player10.png",
        ⵠⲆᐃΔΔⲆⲆ: "img/avatar-player11.png",
        ΔΔⵠⲆⲆΔΔ: "img/avatar-player12.png",
        ⲆΔᐃⵠᐃᐃΔ: "img/avatar-player13.png",
        ΔⵠᐃⲆⲆⵠᐃ: "img/avatar-player14.png",
        ⵠⵠⲆⲆⲆᐃΔ: "img/avatar-player14.png",
        ΔⵠᐃⲆⵠΔⵠ: "img/avatar-player14.png",
        ⵠⲆΔⵠΔⵠⲆ: "img/avatar-player14.png",
        ΔᐃⲆⲆΔᐃⵠᐃⵠ: "img/golden-bread.png",
        ⲆΔΔⵠᐃⵠⵠ: "img/buy-bread-out.png",
        ᐃᐃⵠᐃⵠᐃᐃ: "img/buy-bread-in.png",
        ΔⲆⲆᐃᐃⵠⵠ: "img/buy-bread-click.png",
        ⲆΔᐃΔⵠⲆᐃ: "img/gauge.png",
        ⲆΔⵠⵠⲆᐃΔⲆⵠ: "img/season-4-out.png",
        ᐃᐃΔⵠⲆᐃⵠⲆⵠ: "img/season-4-in.png",
        ᐃΔⲆⵠᐃⵠⵠⵠᐃ: "img/season-4-click.png",
        ΔΔΔΔᐃⵠⵠᐃΔ: "img/season4-box.png",
        ᐃᐃⵠⲆⵠΔᐃⵠⵠ: "img/season-5-out.png",
        ΔΔᐃΔΔᐃΔⲆᐃ: "img/season-5-in.png",
        ⲆⵠΔᐃⵠⵠⲆⵠᐃ: "img/season-5-click.png",
        ᐃΔΔⵠᐃΔⵠᐃΔ: "img/season5-box.png",
        ΔΔΔⵠⲆᐃᐃ: "img/season-6-out.png",
        ΔΔᐃⵠⲆⵠᐃ: "img/season-6-in.png",
        ΔᐃᐃⵠⲆⵠⵠ: "img/season-6-click.png",
        ᐃⵠᐃⵠΔⵠΔ: "img/season6-box.png",
        ΔΔΔⵠᐃⲆᐃ: "img/profile3-box.png",
        ᐃⲆⵠᐃⲆⵠⲆ: "img/skins-box.png",
        ᐃᐃⲆⵠΔᐃᐃ: "img/shop-box.png",
        ᐃⵠᐃᐃΔⲆⵠᐃⲆ: "img/private-server-box.png",
        ᐃⵠΔᐃⲆⲆΔ: "img/location-box.png",
        ⵠⲆᐃΔΔΔΔ: "img/server-duration-box.png",
        ⵠᐃΔⲆⲆⲆⵠ: "img/tutorial-box.png",
        ΔⵠᐃΔⵠⵠⵠ: "img/leaderboard2-box.png",
        ᐃⲆⵠⵠᐃⵠᐃ: "img/buy-breads-box.png",
        Ⲇᐃᐃⵠⵠⵠⵠ: "img/bag-box.png",
        ᐃΔⲆⵠΔⲆⵠ: "img/deadbox-box.png",
        ΔΔⲆⲆΔⲆΔ: "img/book-box.png",
        ⲆⲆⲆⲆᐃⵠⵠ: "img/accessories-box.png",
        ⲆᐃᐃⵠⵠⲆΔ: "img/customskin-box.png",
        ᐃᐃⵠⵠⵠᐃⲆ: "img/bag-lasts.png",
        ΔⲆⲆⲆⲆⵠΔ: "img/server-lasts.png",
        ⵠⵠⵠⲆⲆᐃΔ: "img/server-access-box3.png",
        ΔᐃᐃᐃⲆΔΔ: "img/lootbox-box.png",
        ᐃΔΔᐃᐃⵠᐃ: "img/change-nickname0.png",
        ⵠⵠᐃᐃⵠⵠᐃ: "img/change-nickname1.png",
        ΔⲆΔⵠΔΔⵠ: "img/cheating-box.png",
        ⲆⵠⲆⲆⲆᐃᐃᐃⲆ: "img/daily-quest-box.png",
        ΔⵠⵠⲆΔⵠⲆⵠⲆ: "img/daily-5-bread.png",
        ΔΔⲆΔⲆᐃᐃᐃⲆ: "img/daily-10-bread.png",
        ⲆⵠⵠⵠⲆΔⵠᐃⵠ: "img/daily-valid.png",
        ⵠᐃⲆⵠⵠⲆΔ: "img/normal-profile-out.png",
        ⲆᐃⵠΔⲆᐃᐃ: "img/normal-profile-in.png",
        ΔⵠⵠΔᐃᐃΔ: "img/normal-profile-click.png",
        ⲆⲆᐃⵠⵠⲆⵠ: "img/forest-profile-out.png",
        ᐃⲆⲆⵠⲆᐃⲆ: "img/forest-profile-in.png",
        ⵠΔᐃΔⲆⵠᐃ: "img/forest-profile-click.png",
        ⵠΔᐃΔᐃⵠⲆ: "img/zombie-profile-out.png",
        ⲆⵠⵠᐃΔΔⵠ: "img/zombie-profile-in.png",
        ᐃᐃᐃᐃⲆⲆⵠ: "img/zombie-profile-click.png",
        ᐃⵠΔΔⵠΔⵠ: "img/vampire-profile-out.png",
        ΔΔᐃΔⲆᐃᐃ: "img/vampire-profile-in.png",
        ⲆᐃᐃΔᐃⵠᐃ: "img/vampire-profile-click.png",
        ⵠᐃᐃΔⲆᐃⵠ: "img/total-profile-out.png",
        ⵠᐃΔⵠⵠΔⲆ: "img/total-profile-in.png",
        ⲆⵠΔⲆⲆᐃᐃ: "img/total-profile-click.png",
        ⲆᐃⵠⲆⲆⲆΔ: "img/season1-out.png",
        ⵠⲆⵠΔᐃΔⵠ: "img/season1-in.png",
        ΔᐃⵠⲆⵠⲆᐃ: "img/season1-click.png",
        ΔⲆΔⵠⲆᐃⲆ: "img/season2-out.png",
        ΔⵠᐃΔΔΔᐃ: "img/season2-in.png",
        ⲆΔᐃΔΔᐃᐃ: "img/season2-click.png",
        ⵠΔⲆᐃᐃᐃⲆ: "img/season3-out.png",
        ΔᐃⲆⵠᐃⵠⲆ: "img/season3-in.png",
        ᐃⵠΔⵠΔᐃΔ: "img/season3-click.png",
        ᐃⵠⵠΔⵠⵠⵠ: "img/season4-out.png",
        ᐃΔⵠᐃⵠⵠᐃ: "img/season4-in.png",
        ΔⵠⵠΔⲆⲆⵠ: "img/season4-click.png",
        ᐃⵠᐃΔⲆⵠⲆ: "img/season5-out.png",
        ⵠΔΔⵠⵠⵠⲆ: "img/season5-in.png",
        ⲆᐃⵠΔᐃᐃΔ: "img/season5-click.png",
        ⲆᐃᐃᐃᐃⲆᐃ: "img/season6-out.png",
        ΔΔΔᐃᐃⲆⵠ: "img/season6-in.png",
        ⲆΔᐃⵠᐃΔⵠ: "img/season6-click.png",
        ⵠΔᐃΔⵠⲆᐃ: "img/locked-skin-alert.png",
        ΔᐃΔΔΔΔᐃ: "img/locked-custom-alert.png",
        ΔΔΔⲆⵠⲆΔ: "img/bg-red-locked.png",
        ᐃΔΔᐃΔⲆΔ: "img/skin-button-out.png",
        ᐃⲆⵠⵠΔΔⵠ: "img/skin-button-in.png",
        ΔⲆᐃᐃⵠΔⲆ: "img/skin-button-click.png",
        ΔᐃⵠⲆⲆⲆⵠ: "img/accessory-button-out.png",
        ⲆᐃΔⲆΔⵠᐃ: "img/accessory-button-in.png",
        ΔΔΔᐃⲆᐃⲆ: "img/accessory-button-click.png",
        ⲆⲆᐃΔΔᐃⵠ: "img/bag-button-out.png",
        ΔᐃᐃΔΔⵠᐃ: "img/bag-button-in.png",
        ᐃᐃⵠⲆⲆⲆⲆ: "img/bag-button-click.png",
        ᐃᐃⲆΔⵠᐃᐃ: "img/book-button-out.png",
        ΔΔⲆⵠΔⲆΔ: "img/book-button-in.png",
        ⲆⲆᐃⵠΔᐃΔ: "img/book-button-click.png",
        ⵠΔΔⵠΔⵠⲆ: "img/deadbox-button-out.png",
        ᐃⵠΔⵠⵠΔⲆ: "img/deadbox-button-in.png",
        ᐃⵠΔΔΔⲆᐃ: "img/deadbox-button-click.png",
        ΔⲆΔⲆⵠⲆΔ: "img/loot-button-out.png",
        ᐃᐃⵠΔⲆᐃⲆ: "img/loot-button-in.png",
        ⲆⲆᐃⲆᐃⵠΔ: "img/loot-button-click.png",
        ᐃΔᐃⲆⲆΔᐃ: "img/free-item-out.png",
        ΔⵠΔᐃⵠΔⲆ: "img/free-item-in.png",
        ⵠⲆᐃᐃᐃΔᐃ: "img/free-item-click.png",
        ᐃᐃⲆΔ: "img/wood-item-out.png",
        ᐃⲆΔⵠ: "img/wood-item-in.png",
        ΔⲆᐃⲆ: "img/wood-item-click.png",
        ΔᐃⲆⵠΔᐃΔ: "img/stone-item.png",
        ⵠᐃⲆᐃⲆΔⲆ: "img/stone-item-in.png",
        ⵠᐃⲆⲆⵠΔᐃ: "img/stone-item-click.png",
        ᐃⵠΔⲆᐃᐃΔ: "img/gold-item.png",
        ΔΔᐃⲆⵠⲆΔ: "img/gold-item-in.png",
        ⲆⲆᐃⲆΔΔΔ: "img/gold-item-click.png",
        ⲆΔⲆⵠΔΔⲆ: "img/diamond-item.png",
        ⲆⵠⲆⵠⵠⵠᐃ: "img/diamond-item-in.png",
        ⵠᐃΔΔΔᐃⵠ: "img/diamond-item-click.png",
        ΔⵠΔⲆⲆΔᐃ: "img/amethyst-item.png",
        ⵠᐃᐃⲆΔΔⲆ: "img/amethyst-item-in.png",
        ⲆᐃⲆⲆⵠΔᐃ: "img/amethyst-item-click.png",
        ᐃⲆΔⵠΔⵠⵠ: "img/reidite-item.png",
        ⵠΔΔΔΔᐃⵠ: "img/reidite-item-in.png",
        ⵠⲆⲆᐃⲆᐃⵠ: "img/reidite-item-click.png",
        ᐃᐃⲆᐃⲆΔⵠ: "img/special-item-out.png",
        ᐃⵠᐃᐃⲆΔⲆ: "img/special-item-in.png",
        ⵠΔΔΔⲆⵠⵠ: "img/special-item-click.png",
        ᐃᐃᐃⲆⲆⲆΔ: "img/level-item-out.png",
        ΔᐃᐃᐃᐃΔⲆ: "img/level-item-in.png",
        ⲆⵠⲆⲆⵠⲆᐃ: "img/level-item-click.png",
        ᐃⲆᐃΔᐃᐃᐃ: "img/skin-previous-out.png",
        ᐃᐃΔⵠᐃΔΔ: "img/skin-previous-in.png",
        ΔⵠⲆⵠⲆᐃΔ: "img/skin-previous-click.png",
        ᐃΔⵠΔΔΔΔ: "img/skin-next-out.png",
        ⲆⵠΔᐃᐃⲆᐃ: "img/skin-next-in.png",
        ΔⵠΔⵠⲆⲆᐃ: "img/skin-next-click.png",
        ⵠⵠᐃⵠⵠ: "img/back-button-out.png",
        ⲆΔΔΔᐃ: "img/back-button-in.png",
        ⲆⲆⲆⲆⲆ: "img/back-button-click.png",
        ⲆⵠⲆᐃⲆᐃΔ: "img/get-more-button-out.png",
        ⵠⵠⲆⲆᐃⵠⲆ: "img/get-more-button-in.png",
        ΔᐃΔᐃⲆⵠΔ: "img/get-more-button-click.png",
        ΔᐃⵠⵠⲆᐃΔ: "img/currency1-out.png",
        ΔΔⲆⵠᐃⵠᐃ: "img/currency1-in.png",
        ΔⲆᐃⵠⲆᐃΔ: "img/currency1-click.png",
        ⲆᐃᐃⲆⲆⵠΔ: "img/currency2-out.png",
        ⵠΔΔⲆⵠΔⲆ: "img/currency2-in.png",
        ΔΔΔΔⲆΔΔ: "img/currency2-click.png",
        ⵠᐃⵠΔⲆⵠᐃ: "img/currency3-out.png",
        ΔⵠⵠⲆΔⲆⵠ: "img/currency3-in.png",
        ᐃᐃΔΔΔΔΔ: "img/currency3-click.png",
        ⲆΔᐃⵠᐃΔᐃ: "img/currency4-out.png",
        ⵠᐃᐃᐃΔΔⲆ: "img/currency4-in.png",
        ⲆᐃⲆΔᐃΔΔ: "img/currency4-click.png",
        ⵠⲆⲆⲆⵠⵠⵠ: "img/currency5-out.png",
        ᐃⲆᐃᐃᐃⲆⲆ: "img/currency5-in.png",
        ᐃⵠⲆⵠⲆΔᐃ: "img/currency5-click.png",
        ⲆᐃΔⵠᐃᐃᐃ: "img/price1-out.png",
        ᐃⲆⲆΔᐃΔᐃ: "img/price1-in.png",
        ⵠΔΔΔⵠⵠΔ: "img/price1-click.png",
        ⲆΔΔᐃᐃⵠᐃ: "img/price2-out.png",
        ⲆⲆⵠΔᐃΔᐃ: "img/price2-in.png",
        ⵠⵠⵠΔⲆⵠΔ: "img/price2-click.png",
        ᐃⲆⵠⲆΔᐃⵠ: "img/price3-out.png",
        ΔⵠᐃᐃᐃⵠⲆ: "img/price3-in.png",
        ΔⲆΔⵠᐃⵠⵠ: "img/price3-click.png",
        ΔⲆΔΔΔΔⵠ: "img/price4-out.png",
        ⲆⲆᐃⲆΔᐃⵠ: "img/price4-in.png",
        ΔᐃⲆΔⵠΔⲆ: "img/price4-click.png",
        ΔⵠΔⵠⲆⲆΔ: "img/price5-out.png",
        ᐃᐃⲆᐃᐃⲆⲆ: "img/price5-in.png",
        ᐃΔΔⵠᐃⲆⲆ: "img/price5-click.png",
        ΔᐃΔᐃⵠⲆⵠⵠᐃ: "img/buy-private-server-out.png",
        ᐃᐃⵠⵠᐃΔΔⲆⲆ: "img/buy-private-server-in.png",
        ⵠΔⵠⵠⵠⲆⲆⵠΔ: "img/buy-private-server-click.png",
        ⲆΔⲆΔⲆⵠΔ: "img/atlanta-button-out.png",
        ⲆⲆΔΔⵠᐃⵠ: "img/atlanta-button-in.png",
        ᐃᐃⲆⲆΔᐃⲆ: "img/atlanta-button-click.png",
        ΔⵠⵠᐃΔⲆⲆ: "img/los-angeles-button-out.png",
        ⵠⵠΔᐃΔⵠΔ: "img/los-angeles-button-in.png",
        ΔⲆⲆᐃᐃΔᐃ: "img/los-angeles-button-click.png",
        ⲆⵠΔⲆⵠⲆΔ: "img/sydney-button-out.png",
        ᐃΔⲆⲆᐃⵠⵠ: "img/sydney-button-in.png",
        ᐃΔᐃΔΔΔⵠ: "img/sydney-button-click.png",
        ⲆⲆⲆⵠⵠᐃᐃ: "img/frankfurt-button-out.png",
        ΔᐃΔᐃⵠΔⵠ: "img/frankfurt-button-in.png",
        ΔΔᐃΔⵠΔⵠ: "img/frankfurt-button-click.png",
        ΔⵠΔᐃⵠΔⵠ: "img/osaka-button-out.png",
        ΔⵠΔⲆᐃᐃΔ: "img/osaka-button-in.png",
        ΔⲆᐃⵠΔΔⵠ: "img/osaka-button-click.png",
        ΔΔΔⵠⲆΔΔᐃⲆ: "img/yes-location-out.png",
        ᐃⲆᐃⵠⵠⲆⲆΔⲆ: "img/yes-location-in.png",
        ΔⲆⲆⲆⲆᐃΔΔΔ: "img/yes-location-click.png",
        ΔⲆⲆⲆⵠⵠⵠ: "img/3days-button-out.png",
        ⲆⲆⵠⵠᐃⵠΔ: "img/3days-button-in.png",
        ᐃⲆᐃᐃⲆΔΔ: "img/3days-button-click.png",
        ⵠΔⵠᐃⲆᐃⵠ: "img/7days-button-out.png",
        ⲆΔⵠΔᐃⲆⲆ: "img/7days-button-in.png",
        ⲆⵠⲆΔΔⲆⵠ: "img/7days-button-click.png",
        ⲆᐃⵠᐃⲆⵠᐃ: "img/30days-button-out.png",
        ⵠᐃⲆⲆⵠΔⵠ: "img/30days-button-in.png",
        ᐃΔΔⵠⲆⲆⲆ: "img/30days-button-click.png",
        ⵠᐃᐃⲆⲆΔΔ: "img/90days-button-out.png",
        ΔΔⲆΔΔⵠΔ: "img/90days-button-in.png",
        ΔⵠᐃΔⵠΔΔ: "img/90days-button-click.png",
        ⵠΔΔⲆᐃᐃΔ: "img/spin1.png",
        ⵠⲆΔⲆⵠⲆⲆ: "img/spin2.png",
        ⵠᐃΔⲆΔΔᐃ: "img/spin3.png",
        ΔᐃΔΔΔᐃΔ: "img/spin4.png",
        ᐃᐃⲆΔⵠⵠⵠ: "img/spin5.png",
        ΔΔⲆⵠΔⵠᐃ: "img/spin6.png",
        ⵠΔΔᐃΔᐃΔ: "img/arrow-spin.png",
        ⲆⲆⵠⵠⵠΔΔ: "img/spin-button-1-out.png",
        ᐃᐃⲆⲆᐃΔΔ: "img/spin-button-1-in.png",
        ΔΔᐃᐃᐃᐃⵠ: "img/spin-button-1-click.png",
        ΔⵠᐃⵠᐃⵠΔ: "img/spin-button-2-out.png",
        ᐃⲆⵠᐃᐃᐃΔ: "img/spin-button-2-in.png",
        ΔᐃΔⲆΔⲆᐃ: "img/spin-button-2-click.png",
        ΔⲆⵠᐃⵠᐃⵠ: "img/spin-button-3-out.png",
        ΔⵠⲆᐃⲆⲆΔ: "img/spin-button-3-in.png",
        ΔⲆⵠᐃⵠΔⵠ: "img/spin-button-3-click.png",
        ᐃᐃⲆⵠᐃᐃΔ: "img/spin-button-4-out.png",
        ΔᐃⵠΔⲆΔᐃ: "img/spin-button-4-in.png",
        ΔᐃⲆⵠⲆⵠΔ: "img/spin-button-4-click.png",
        ⲆᐃⲆᐃΔⲆΔ: "img/spin-button-5-out.png",
        ΔᐃΔⲆᐃΔⵠ: "img/spin-button-5-in.png",
        ⵠⵠⵠⵠᐃᐃⵠ: "img/spin-button-5-click.png",
        ᐃᐃΔΔⲆⲆᐃ: "img/spin-light.png",
        ⲆⵠᐃⲆⵠⲆᐃ: "img/tuto-wiki-out.png",
        ᐃΔᐃᐃⵠΔⵠ: "img/tuto-wiki-in.png",
        ⵠⵠⵠⵠΔᐃΔ: "img/tuto-wiki-click.png",
        ᐃᐃⵠᐃⲆᐃⵠ: "img/tuto-previous-out.png",
        ⲆⵠᐃⲆΔΔⲆ: "img/tuto-previous-in.png",
        ⲆⲆⲆᐃⲆⲆⲆ: "img/tuto-previous-click.png",
        ΔᐃΔⲆΔⵠⲆ: "img/tuto-next-out.png",
        ᐃᐃⲆΔⲆⲆᐃ: "img/tuto-next-in.png",
        ᐃΔⲆΔⵠⲆⵠ: "img/tuto-next-click.png",
        ᐃΔᐃⵠⲆⵠⲆ: "img/time-leaderboard-out.png",
        ⵠᐃΔΔⵠⲆⲆ: "img/time-leaderboard-in.png",
        ΔΔⵠⵠΔΔΔ: "img/time-leaderboard-click.png",
        Δⵠᐃᐃᐃᐃᐃ: "img/score-leaderboard-out.png",
        ΔⲆⲆⵠᐃΔΔ: "img/score-leaderboard-in.png",
        ΔᐃᐃΔⵠΔⲆ: "img/score-leaderboard-click.png",
        ΔᐃⵠⲆⲆⵠⵠ: "img/lvl-leaderboard-out.png",
        ⲆᐃⲆⲆⲆⵠⵠ: "img/lvl-leaderboard-in.png",
        ⵠᐃᐃⲆⵠᐃᐃ: "img/lvl-leaderboard-click.png",
        ⵠᐃⲆⲆⲆⲆⵠ: "img/kill-leaderboard-out.png",
        ⲆᐃᐃΔΔⲆᐃ: "img/kill-leaderboard-in.png",
        ⵠΔⲆΔⵠⵠᐃ: "img/kill-leaderboard-click.png",
        ⲆⲆᐃΔⲆⲆᐃ: "img/all-leaderboard-out.png",
        ⲆⲆΔⵠⲆᐃᐃ: "img/all-leaderboard-in.png",
        ΔⵠΔᐃᐃⲆⲆ: "img/all-leaderboard-click.png",
        ᐃᐃⵠⲆΔⲆⵠ: "img/today-leaderboard-out.png",
        ᐃⲆΔᐃΔΔᐃ: "img/today-leaderboard-in.png",
        ⲆΔⲆΔⲆᐃⵠ: "img/today-leaderboard-click.png",
        ⵠΔⵠⵠΔΔⵠ: "img/week-leaderboard-out.png",
        ⲆⲆᐃⲆⲆᐃⲆ: "img/week-leaderboard-in.png",
        ⲆᐃᐃΔᐃⲆΔ: "img/week-leaderboard-click.png",
        ⵠᐃⵠⵠΔⵠᐃ: "img/season1-out.png",
        ⲆᐃⵠⵠⵠΔⲆ: "img/season1-in.png",
        ΔΔΔⵠᐃᐃⵠ: "img/season1-click.png",
        ᐃᐃⲆⲆΔᐃΔ: "img/season2-out.png",
        ΔⲆⲆⲆΔΔΔ: "img/season2-in.png",
        ᐃⲆᐃΔⲆΔΔ: "img/season2-click.png",
        ΔⲆΔⵠᐃᐃᐃ: "img/season3-out.png",
        ΔⲆⵠⲆⲆΔᐃ: "img/season3-in.png",
        ᐃⵠᐃⵠⲆᐃᐃ: "img/season3-click.png",
        ⲆⵠⵠⵠⲆⵠΔ: "img/season4-out.png",
        ᐃⲆᐃᐃⲆⵠⵠ: "img/season4-in.png",
        ᐃᐃᐃⵠⵠⵠⲆ: "img/season4-click.png",
        ΔⵠΔΔⲆΔⵠ: "img/season5-out.png",
        ⵠΔⵠⲆⵠⵠᐃ: "img/season5-in.png",
        ⵠⵠⲆⲆⲆΔΔ: "img/season5-click.png",
        ΔⲆΔΔⵠⲆᐃ: "img/season6-out.png",
        ᐃᐃⲆΔⲆⲆΔ: "img/season6-in.png",
        ⵠΔⵠᐃᐃⵠⲆ: "img/season6-click.png",
        ⵠᐃΔⲆᐃΔⲆ: "img/total-lead-out.png",
        ᐃᐃᐃⵠᐃΔⵠ: "img/total-lead-in.png",
        ⲆΔᐃⲆⲆⵠⲆ: "img/total-lead-click.png",
        ᐃⵠⵠΔᐃΔΔ: "img/normal-lead-out.png",
        ᐃⵠᐃᐃⵠⲆⵠ: "img/normal-lead-in.png",
        ⲆⵠΔⵠⵠᐃΔ: "img/normal-lead-click.png",
        ΔⵠΔᐃⵠⵠᐃ: "img/forest-lead-out.png",
        ᐃⵠΔⵠⲆⲆⲆ: "img/forest-lead-in.png",
        ΔⲆⵠⵠᐃᐃᐃ: "img/forest-lead-click.png",
        ΔⲆᐃⲆⲆΔΔ: "img/vampire-lead-out.png",
        ᐃΔⲆⲆΔⵠΔ: "img/vampire-lead-in.png",
        ⵠⲆⲆⵠᐃΔᐃ: "img/vampire-lead-click.png",
        ⲆΔⵠⲆᐃᐃΔ: "img/zombie-lead-out.png",
        ⲆⵠΔᐃΔᐃⵠ: "img/zombie-lead-in.png",
        ⲆᐃⲆᐃⵠᐃⵠ: "img/zombie-lead-click.png",
        ⲆⲆⵠⵠΔᐃᐃ: "img/day-level5.png",
        ⵠΔⵠΔⲆⲆᐃ: "img/night-level5.png",
        ΔΔⲆⲆⵠΔΔ: "img/day-level10.png",
        ΔΔⵠⵠⵠΔᐃ: "img/night-level10.png",
        ⲆΔᐃⲆⲆⲆⲆ: "img/day-level15.png",
        ΔⵠΔΔᐃΔⲆ: "img/night-level15.png",
        ⲆᐃΔⲆΔΔⲆ: "img/day-level20.png",
        ΔᐃⲆΔⵠᐃΔ: "img/night-level20.png",
        ⲆⲆⲆⵠⲆΔⲆ: "img/day-level25.png",
        ΔⵠᐃⵠⲆⵠⵠ: "img/night-level25.png",
        ᐃΔΔΔᐃᐃⵠ: "img/day-level30.png",
        ᐃⲆⲆᐃᐃᐃΔ: "img/night-level30.png",
        ⲆⵠᐃⵠΔΔᐃ: "img/day-level35.png",
        ᐃⲆᐃⵠⲆᐃΔ: "img/night-level35.png",
        ⵠΔⲆΔⵠⲆΔ: "img/day-level40.png",
        ⲆⵠⲆΔⵠᐃᐃ: "img/night-level40.png",
        ᐃⲆⵠᐃΔᐃᐃ: "img/day-level45.png",
        ⵠⵠᐃⵠⵠᐃⵠ: "img/night-level45.png",
        ᐃⲆⲆⲆΔᐃⲆ: "img/day-level50.png",
        ⲆⵠⲆⲆⵠᐃᐃ: "img/night-level50.png",
        ᐃΔⲆΔΔⲆᐃ: "img/day-level55.png",
        ⲆᐃᐃᐃΔΔⲆ: "img/night-level55.png",
        ΔⵠΔⲆⲆⲆᐃ: "img/day-level60.png",
        ⲆⲆⲆⲆΔᐃⵠ: "img/night-level60.png",
        ⵠᐃΔᐃⵠᐃⲆ: "img/day-skin-devast0.png",
        ᐃᐃΔΔΔᐃΔ: "img/night-skin-devast0.png",
        ⲆᐃⲆΔᐃⵠⲆ: "img/day-hand-devaster.png",
        ᐃⲆⲆⲆΔΔⵠ: "img/night-hand-devaster.png",
        ΔⵠΔⵠⲆᐃᐃ: "img/day-skin-star0.png",
        ⵠΔⲆΔᐃⲆⲆ: "img/night-skin-star0.png",
        ΔⲆⵠⵠⲆⵠⲆ: "img/day-hand-star0.png",
        ⲆᐃⵠᐃⲆⲆⵠ: "img/night-hand-star0.png",
        ᐃΔⵠᐃΔᐃⵠ: "img/day-vampire.png",
        ⵠΔⲆᐃⵠⵠⲆ: "img/night-vampire.png",
        ⵠⲆⵠⲆᐃⲆⵠ: "img/day-hand-vampire.png",
        ᐃⲆⵠᐃᐃⲆΔ: "img/night-hand-vampire.png",
        ᐃΔⲆᐃᐃΔⲆ: "img/day-zombie.png",
        ΔⵠⵠⵠΔᐃΔ: "img/night-zombie.png",
        ΔᐃΔΔⲆᐃΔ: "img/day-hand-zombie.png",
        ᐃΔᐃΔΔⵠΔ: "img/night-hand-zombie.png",
        ᐃΔⲆᐃⵠⵠⵠ: "img/day-skin113.png",
        ᐃⲆⵠⵠⵠⵠΔ: "img/night-skin113.png",
        ⵠⵠⲆⵠⵠⵠⵠ: "img/day-hand-skin113.png",
        ⵠΔⵠᐃⲆⵠΔ: "img/night-hand-skin113.png",
        ⵠⵠⵠⵠᐃΔⲆ: "img/day-skin0.png",
        ΔⵠᐃⵠⵠᐃⲆ: "img/night-skin0.png",
        ᐃᐃΔᐃⵠⲆᐃ: "img/day-skin1.png",
        ΔⵠΔⵠᐃⵠᐃ: "img/night-skin1.png",
        ⲆΔⵠⵠⵠⵠᐃ: "img/day-skin2.png",
        ΔⲆⲆⲆⵠΔⵠ: "img/night-skin2.png",
        ᐃⵠΔⲆᐃⲆⲆ: "img/day-skin3.png",
        ⵠΔΔⲆⵠⵠⵠ: "img/night-skin3.png",
        ΔⵠⵠᐃΔⵠΔ: "img/day-skin4.png",
        ᐃⲆⵠΔⵠΔΔ: "img/night-skin4.png",
        ΔⵠΔᐃΔᐃΔ: "img/day-skin5.png",
        ΔΔΔᐃⵠᐃⵠ: "img/night-skin5.png",
        ΔⵠΔⵠⲆΔⵠ: "img/day-skin6.png",
        ⵠⵠΔᐃᐃᐃΔ: "img/night-skin6.png",
        ΔᐃᐃⵠⵠΔⵠ: "img/day-skin7.png",
        ⵠⵠᐃⵠⵠΔⵠ: "img/night-skin7.png",
        ᐃᐃᐃᐃᐃⲆⵠ: "img/day-skin8.png",
        ⲆᐃⵠⲆⵠΔⲆ: "img/night-skin8.png",
        ᐃⲆⵠⵠᐃⵠΔ: "img/day-skin9.png",
        ⵠⲆΔⲆΔΔⲆ: "img/night-skin9.png",
        ⲆⵠⲆⲆⲆⵠᐃ: "img/day-skin10.png",
        ΔⵠᐃⲆⲆⵠⲆ: "img/night-skin10.png",
        ⲆⲆΔⵠⵠᐃⲆ: "img/day-skin11.png",
        ⲆΔⵠⲆΔⲆⵠ: "img/night-skin11.png",
        ᐃⵠⵠΔⵠⵠΔ: "img/day-skin12.png",
        ⵠⲆⵠⲆⲆΔⲆ: "img/night-skin12.png",
        ΔᐃⵠⲆⲆⲆⲆ: "img/day-skin13.png",
        ⲆΔⵠⵠⲆᐃᐃ: "img/night-skin13.png",
        ⲆΔΔΔᐃⵠᐃ: "img/day-skin14.png",
        ΔΔᐃⲆⲆⵠⲆ: "img/night-skin14.png",
        ⵠⵠⲆⵠⲆⲆⵠ: "img/day-skin15.png",
        ᐃⲆⲆᐃⲆⲆᐃ: "img/night-skin15.png",
        ⵠⵠⵠᐃⲆᐃᐃ: "img/day-skin16.png",
        ΔᐃᐃⲆⲆΔⲆ: "img/night-skin16.png",
        ⲆⵠᐃⵠΔⲆⵠ: "img/day-skin17.png",
        ⵠⲆⵠⵠΔⵠⵠ: "img/night-skin17.png",
        ΔⵠⲆⲆⲆΔⲆ: "img/day-skin18.png",
        ΔⵠⲆᐃΔⲆΔ: "img/night-skin18.png",
        ⵠᐃᐃᐃᐃⵠᐃ: "img/day-skin19.png",
        ΔⲆΔⵠⵠΔᐃ: "img/night-skin19.png",
        ⲆⵠᐃⲆΔⲆΔ: "img/day-skin20.png",
        ⲆᐃΔⵠΔᐃᐃ: "img/night-skin20.png",
        ⲆΔΔⵠΔᐃⲆ: "img/day-skin21.png",
        ⲆᐃᐃΔᐃΔⵠ: "img/night-skin21.png",
        ⲆⵠᐃΔΔⲆⲆ: "img/day-skin22.png",
        ⲆΔΔⲆⵠⵠΔ: "img/night-skin22.png",
        ᐃⲆᐃⵠΔᐃⲆ: "img/day-skin23.png",
        ⲆΔⲆⵠΔΔⵠ: "img/night-skin23.png",
        ΔⲆⵠⵠΔⲆⲆ: "img/day-skin24.png",
        ⵠⵠⲆᐃⲆⲆⲆ: "img/night-skin24.png",
        ⲆΔᐃⲆⵠⵠΔ: "img/day-skin25.png",
        ⵠⲆΔⵠΔⲆⲆ: "img/night-skin25.png",
        ᐃᐃⵠⵠΔⲆⲆ: "img/day-skin26.png",
        ⲆⵠⲆᐃⵠⲆⲆ: "img/night-skin26.png",
        ⵠᐃⵠⵠⲆⲆΔ: "img/day-skin27.png",
        ΔᐃᐃΔΔⲆⵠ: "img/night-skin27.png",
        ᐃᐃⲆΔΔΔⲆ: "img/day-skin28.png",
        ΔⲆⵠΔᐃⲆⲆ: "img/night-skin28.png",
        ΔⲆΔᐃⵠⲆᐃ: "img/day-skin29.png",
        ᐃⵠⵠᐃⲆᐃⲆ: "img/night-skin29.png",
        ⵠⵠᐃⵠΔⵠΔ: "img/day-skin30.png",
        ΔⲆΔᐃⵠᐃⵠ: "img/night-skin30.png",
        ᐃΔΔΔᐃⲆⵠ: "img/day-skin31.png",
        ⵠⲆⵠΔⲆΔΔ: "img/night-skin31.png",
        ⵠΔⲆⲆⵠⲆⵠ: "img/day-skin32.png",
        ΔⵠΔⵠⲆⵠᐃ: "img/night-skin32.png",
        ᐃⵠᐃΔⵠᐃⲆ: "img/day-skin33.png",
        ⲆΔᐃᐃΔᐃⲆ: "img/night-skin33.png",
        ΔⲆⲆΔⵠᐃᐃ: "img/day-skin34.png",
        ⲆⵠⲆⲆᐃᐃⲆ: "img/night-skin34.png",
        ᐃⵠⲆⵠᐃⵠΔ: "img/day-skin35.png",
        ΔⲆⵠᐃⵠⵠΔ: "img/night-skin35.png",
        ΔⵠⵠᐃⲆⵠᐃ: "img/day-skin36.png",
        ⵠᐃⲆᐃⲆⲆΔ: "img/night-skin36.png",
        ⲆΔΔⲆⵠᐃᐃ: "img/day-skin37.png",
        ΔᐃⵠΔΔⵠⲆ: "img/night-skin37.png",
        ΔᐃΔΔⵠΔⵠ: "img/day-skin38.png",
        ᐃⲆᐃⵠᐃᐃΔ: "img/night-skin38.png",
        ΔᐃⲆᐃⵠⵠⲆ: "img/day-skin39.png",
        ⲆᐃΔᐃⲆΔΔ: "img/night-skin39.png",
        ΔⲆΔⵠΔⲆⲆ: "img/day-skin40.png",
        ᐃⲆᐃΔᐃⵠΔ: "img/night-skin40.png",
        ⲆΔΔⵠⲆⵠⲆ: "img/day-skin41.png",
        ⲆΔᐃⵠⲆΔⲆ: "img/night-skin41.png",
        ⵠⵠⲆΔⵠΔⲆ: "img/day-skin42.png",
        ᐃᐃΔᐃᐃᐃⵠ: "img/night-skin42.png",
        ΔΔᐃⲆⵠΔᐃ: "img/day-skin43.png",
        ᐃⲆᐃΔᐃᐃⵠ: "img/night-skin43.png",
        ⵠⵠⵠᐃᐃⲆⲆ: "img/day-skin44.png",
        ⵠᐃⲆΔⵠᐃⵠ: "img/night-skin44.png",
        ⵠⲆⵠⲆⲆᐃⲆ: "img/day-skin45.png",
        ⵠΔⲆⵠⵠⵠⲆ: "img/night-skin45.png",
        ΔΔΔᐃΔⲆⲆ: "img/day-skin46.png",
        ΔΔⵠΔⵠⲆⵠ: "img/night-skin46.png",
        ⵠⲆⵠⵠΔΔᐃ: "img/day-skin47.png",
        Ⲇⵠᐃᐃⵠᐃᐃ: "img/night-skin47.png",
        ⲆⲆⵠⵠⲆⲆᐃ: "img/day-skin48.png",
        ⲆⵠᐃⲆⵠⵠᐃ: "img/night-skin48.png",
        ⵠᐃᐃⵠᐃⵠΔ: "img/day-skin49.png",
        ΔⲆⲆⵠⲆⲆΔ: "img/night-skin49.png",
        ᐃᐃΔΔᐃⵠΔ: "img/day-skin50.png",
        ⵠⲆⵠⵠⵠᐃⲆ: "img/night-skin50.png",
        ⵠΔⲆⲆⵠᐃⵠ: "img/day-skin51.png",
        ⲆΔⵠΔΔΔᐃ: "img/night-skin51.png",
        ⲆⵠⵠΔΔⲆⵠ: "img/day-skin52.png",
        Ⲇᐃⵠᐃⵠⵠⵠ: "img/night-skin52.png",
        ⲆᐃᐃΔⵠᐃⵠ: "img/day-skin53.png",
        ΔᐃⲆΔⵠⲆΔ: "img/night-skin53.png",
        ΔⲆΔᐃᐃⲆΔ: "img/day-skin54.png",
        ᐃᐃᐃⲆⲆᐃⵠ: "img/night-skin54.png",
        ΔⵠᐃⲆᐃⵠⵠ: "img/day-skin55.png",
        ᐃᐃⵠΔⲆΔⵠ: "img/night-skin55.png",
        ᐃⲆᐃⵠΔⲆⵠ: "img/day-skin56.png",
        ᐃᐃᐃΔΔᐃⲆ: "img/night-skin56.png",
        ⲆᐃΔⵠΔᐃⵠ: "img/day-skin57.png",
        ⲆⲆⵠⵠᐃⲆⲆ: "img/night-skin57.png",
        ᐃΔΔⲆᐃᐃⵠ: "img/day-skin58.png",
        ᐃⵠᐃᐃⵠᐃⲆ: "img/night-skin58.png",
        ᐃΔⲆⵠᐃⲆᐃ: "img/day-skin59.png",
        ᐃΔᐃⲆⵠⲆⵠ: "img/night-skin59.png",
        ⵠΔⵠᐃΔⵠᐃ: "img/day-skin60.png",
        ⵠⵠᐃᐃΔᐃⵠ: "img/night-skin60.png",
        ⵠᐃᐃⲆⲆⵠⵠ: "img/day-skin61.png",
        ΔΔΔᐃᐃᐃᐃ: "img/night-skin61.png",
        ΔⲆⵠⵠⲆⲆⵠ: "img/day-skin62.png",
        ⵠⵠᐃᐃΔᐃᐃ: "img/night-skin62.png",
        ᐃΔᐃᐃⵠᐃᐃ: "img/day-skin63.png",
        ⵠΔΔⲆΔΔⵠ: "img/night-skin63.png",
        ΔΔⲆᐃᐃⲆⲆ: "img/day-skin64.png",
        ⵠᐃⵠᐃⲆⵠᐃ: "img/night-skin64.png",
        Δᐃᐃᐃⵠⵠⵠ: "img/day-skin65.png",
        ⵠⵠⵠⵠⵠⲆⵠ: "img/night-skin65.png",
        ΔⲆⵠⲆΔᐃⵠ: "img/day-skin66.png",
        ⲆΔᐃΔⲆΔᐃ: "img/night-skin66.png",
        ᐃΔᐃⲆᐃⲆⵠ: "img/day-skin67.png",
        ⲆⲆΔΔⲆⲆΔ: "img/night-skin67.png",
        ᐃᐃᐃᐃⵠⲆⵠ: "img/day-skin68.png",
        ⲆᐃᐃᐃΔⵠᐃ: "img/night-skin68.png",
        ⲆⲆΔᐃⲆⲆᐃ: "img/day-skin69.png",
        ⵠⲆᐃᐃᐃⲆᐃ: "img/night-skin69.png",
        ΔΔᐃⲆΔⲆΔ: "img/day-skin70.png",
        ΔΔⲆⲆⲆⲆΔ: "img/night-skin70.png",
        ΔΔΔΔΔᐃⲆ: "img/day-skin71.png",
        ᐃⵠⲆⵠⲆΔⵠ: "img/night-skin71.png",
        ⵠᐃⵠⲆⲆᐃᐃ: "img/day-skin72.png",
        ᐃⵠⲆⵠᐃΔⲆ: "img/night-skin72.png",
        Ⲇⵠᐃⵠⵠᐃᐃ: "img/day-skin73.png",
        ⲆΔⵠⵠᐃⵠⲆ: "img/night-skin73.png",
        ᐃⵠΔⵠΔᐃᐃ: "img/day-skin74.png",
        ΔᐃⲆᐃᐃⵠⵠ: "img/night-skin74.png",
        ᐃΔⲆⵠΔΔⵠ: "img/day-skin75.png",
        ᐃⵠᐃΔⲆΔΔ: "img/night-skin75.png",
        ⲆⲆᐃᐃᐃᐃᐃ: "img/day-skin76.png",
        ᐃᐃⲆΔᐃⵠⲆ: "img/night-skin76.png",
        ⲆⲆⵠⲆⵠΔᐃ: "img/day-skin77.png",
        ΔᐃⵠΔⲆΔⵠ: "img/night-skin77.png",
        ⲆᐃⲆⲆᐃᐃᐃ: "img/day-skin78.png",
        ⵠⵠΔⲆΔⵠⲆ: "img/night-skin78.png",
        ⲆΔΔᐃⵠᐃᐃ: "img/day-skin79.png",
        ⵠⲆΔᐃⲆΔⲆ: "img/night-skin79.png",
        ⵠⵠⵠⲆⵠⵠⵠ: "img/day-skin80.png",
        ᐃⵠⲆⲆᐃᐃⲆ: "img/night-skin80.png",
        ⵠⵠⲆᐃᐃΔⵠ: "img/day-skin81.png",
        ᐃⲆᐃΔⵠᐃᐃ: "img/night-skin81.png",
        ᐃΔΔΔⲆⵠⵠ: "img/day-skin82.png",
        ⲆⲆⵠⲆⵠΔⵠ: "img/night-skin82.png",
        ᐃᐃⵠᐃΔⲆⵠ: "img/day-skin83.png",
        ᐃⵠᐃⲆΔΔΔ: "img/night-skin83.png",
        ᐃᐃᐃΔᐃⵠᐃ: "img/day-skin84.png",
        ΔⲆᐃᐃⲆᐃΔ: "img/night-skin84.png",
        ⵠⵠⵠⵠⲆⲆⲆ: "img/day-skin85.png",
        ⵠⵠΔᐃⵠⲆⲆ: "img/night-skin85.png",
        ΔΔΔᐃΔⵠᐃ: "img/day-skin86.png",
        ⵠⲆⲆᐃΔᐃⲆ: "img/night-skin86.png",
        ⲆⵠᐃⵠΔⲆⲆ: "img/day-skin87.png",
        ⵠΔᐃⵠᐃⲆΔ: "img/night-skin87.png",
        ΔΔⵠⵠᐃᐃⲆ: "img/day-skin88.png",
        ᐃⲆᐃᐃⲆΔⲆ: "img/night-skin88.png",
        ⲆΔⲆΔᐃⲆⵠ: "img/day-skin89.png",
        ⲆᐃⵠⵠⵠⵠΔ: "img/night-skin89.png",
        ⵠⲆᐃΔᐃⵠⲆ: "img/day-skin90.png",
        ⲆΔⲆΔΔΔⵠ: "img/night-skin90.png",
        ⲆᐃᐃⵠⵠᐃⲆ: "img/day-skin91.png",
        ᐃΔΔΔᐃᐃΔ: "img/night-skin91.png",
        ⵠⵠⲆⲆᐃⵠⵠ: "img/day-skin92.png",
        ΔⵠᐃᐃⵠⲆᐃ: "img/night-skin92.png",
        ᐃⲆΔᐃⵠⲆᐃ: "img/day-skin93.png",
        ⲆⵠⲆⵠⵠᐃΔ: "img/night-skin93.png",
        ᐃⲆΔⲆᐃᐃᐃ: "img/day-skin94.png",
        Ⲇⵠⵠᐃⵠᐃᐃ: "img/night-skin94.png",
        ΔΔⵠⵠᐃⵠΔ: "img/day-skin95.png",
        ΔⵠⵠᐃⲆⲆΔ: "img/night-skin95.png",
        ⵠⲆⲆⵠᐃⲆᐃ: "img/day-skin96.png",
        ΔΔΔΔΔΔᐃ: "img/night-skin96.png",
        ⲆⲆᐃᐃⵠⵠΔ: "img/day-skin97.png",
        ᐃᐃⲆⲆⵠΔⵠ: "img/night-skin97.png",
        ΔⲆⲆⵠⲆⵠⲆ: "img/day-skin98.png",
        ⵠᐃⲆⲆΔⲆᐃ: "img/night-skin98.png",
        ⵠΔᐃΔⲆᐃⵠ: "img/day-skin99.png",
        ⲆᐃᐃⲆⲆⲆⲆ: "img/night-skin99.png",
        ⵠⵠⵠⲆᐃⲆⵠ: "img/day-skin100.png",
        ⲆⵠΔᐃᐃⲆⲆ: "img/night-skin100.png",
        ᐃⵠⵠΔⲆΔⵠ: "img/day-skin101.png",
        ⵠⵠΔᐃᐃᐃᐃ: "img/night-skin101.png",
        ⵠⲆⲆΔⵠᐃⵠ: "img/day-skin102.png",
        ⲆΔⲆⵠⲆᐃᐃ: "img/night-skin102.png",
        ⲆΔΔΔⵠⵠⵠ: "img/day-skin103.png",
        ΔΔⵠᐃⵠⵠΔ: "img/night-skin103.png",
        ⵠᐃⲆᐃᐃⲆⵠ: "img/day-skin104.png",
        ⵠΔΔᐃᐃⵠᐃ: "img/night-skin104.png",
        ΔⲆⵠⵠⵠΔᐃ: "img/day-skin105.png",
        ᐃΔᐃⲆᐃⲆⲆ: "img/night-skin105.png",
        ᐃⵠⲆΔᐃⵠΔ: "img/day-skin106.png",
        ΔⲆΔΔⵠΔⲆ: "img/night-skin106.png",
        ΔⵠⵠⵠᐃΔⲆ: "img/day-skin107.png",
        ᐃᐃⲆΔΔᐃΔ: "img/night-skin107.png",
        ᐃⲆⲆΔⲆΔᐃ: "img/day-skin108.png",
        ΔᐃⵠⵠⵠⵠⲆ: "img/night-skin108.png",
        ⲆΔⲆⵠᐃⲆⲆ: "img/day-skin109.png",
        ΔⲆⵠⵠΔΔΔ: "img/night-skin109.png",
        ᐃⵠⵠᐃⲆⵠⲆ: "img/day-skin110.png",
        ΔᐃᐃΔⵠΔᐃ: "img/night-skin110.png",
        ⵠᐃⵠⵠⲆⲆᐃ: "img/day-skin111.png",
        ⵠⵠᐃΔΔⲆⵠ: "img/night-skin111.png",
        ⵠⲆⲆᐃⲆⲆⵠ: "img/day-skin112.png",
        ⵠⵠΔᐃⲆΔᐃ: "img/night-skin112.png",
        ΔⲆΔⲆΔΔⵠⵠⵠ: "img/day-skin113.png",
        ᐃⲆⲆⲆⵠⵠᐃᐃⲆ: "img/night-skin113.png",
        ⵠᐃᐃⵠᐃⲆⵠ: "img/day-skin114.png",
        ΔⵠⵠᐃⲆΔᐃ: "img/night-skin114.png",
        ⵠⵠΔⲆⲆⵠΔ: "img/day-skin115.png",
        ⲆⲆⲆⵠΔⵠⲆ: "img/night-skin115.png",
        ⵠΔᐃΔᐃⲆⲆ: "img/day-skin116.png",
        ᐃΔⵠⲆⵠⵠΔ: "img/night-skin116.png",
        ΔᐃΔᐃᐃΔⲆ: "img/day-skin117.png",
        ⲆⵠⵠΔⵠⲆⲆ: "img/night-skin117.png",
        ᐃΔΔᐃΔⵠⵠ: "img/day-skin118.png",
        ⲆⲆΔΔⵠⵠⲆ: "img/night-skin118.png",
        ⵠⲆⵠΔⲆᐃᐃ: "img/day-skin119.png",
        ⵠⲆᐃΔⵠᐃⵠ: "img/night-skin119.png",
        ΔⲆⲆⲆⵠᐃᐃ: "img/day-skin120.png",
        ⲆᐃᐃⵠⲆⲆᐃ: "img/night-skin120.png",
        ⲆᐃⲆᐃᐃⵠⵠ: "img/day-skin121.png",
        ᐃⵠⲆΔⵠⵠΔ: "img/night-skin121.png",
        ⲆᐃⲆⵠⵠΔΔ: "img/day-skin122.png",
        ⲆⲆΔⲆΔΔⵠ: "img/night-skin122.png",
        ⵠⲆⵠⵠⵠⲆⵠ: "img/day-skin123.png",
        ΔⲆᐃⵠΔᐃᐃ: "img/night-skin123.png",
        ⲆΔᐃⵠⵠⵠΔ: "img/day-skin124.png",
        ᐃⲆᐃⲆⵠΔⵠ: "img/night-skin124.png",
        ⵠⲆⵠⵠΔⲆⲆ: "img/day-skin125.png",
        ΔΔᐃΔⵠⲆᐃ: "img/night-skin125.png",
        ⲆΔᐃⵠⲆΔⵠ: "img/day-skin126.png",
        ΔⲆⵠⵠᐃⲆⲆ: "img/night-skin126.png",
        ᐃΔᐃΔⵠΔΔ: "img/day-skin127.png",
        ⲆⵠⲆΔΔⲆⲆ: "img/night-skin127.png",
        ⵠⲆⲆⵠᐃᐃⲆ: "img/day-skin128.png",
        ⲆᐃᐃⲆᐃⵠⲆ: "img/night-skin128.png",
        ⵠᐃΔΔⵠᐃΔ: "img/day-skin129.png",
        ⲆⲆΔΔᐃΔⵠ: "img/night-skin129.png",
        ⵠΔⵠᐃⵠΔᐃ: "img/day-skin130-1.png",
        ᐃΔΔⲆⲆⵠⲆ: "img/night-skin130-1.png",
        ⵠᐃⵠⵠⲆᐃⵠ: "img/day-skin131.png",
        ΔⵠᐃΔΔⲆⵠ: "img/night-skin131.png",
        ᐃΔⵠⵠⲆⵠⵠ: "img/day-skin132.png",
        ⵠᐃΔⲆΔⵠⵠ: "img/night-skin132.png",
        ΔΔΔΔⵠΔⲆ: "img/day-skin133.png",
        ⵠⲆΔᐃΔᐃΔ: "img/night-skin133.png",
        ⲆΔᐃⵠⲆΔᐃ: "img/day-skin134.png",
        ⲆΔᐃⲆΔⵠΔ: "img/night-skin134.png",
        ᐃΔΔⵠᐃⲆᐃ: "img/day-skin135.png",
        ⵠᐃΔⵠΔΔᐃ: "img/night-skin135.png",
        ⵠⲆⵠΔⲆⲆᐃ: "img/day-skin136.png",
        ᐃⲆΔᐃΔⲆⲆ: "img/night-skin136.png",
        ⲆⲆᐃΔⲆⲆⲆ: "img/day-skin137.png",
        ⲆᐃΔⲆᐃⲆⲆ: "img/night-skin137.png",
        ΔⲆⲆᐃⲆΔⵠ: "img/day-skin138.png",
        ⵠᐃⲆᐃᐃⵠⲆ: "img/night-skin138.png",
        ⲆᐃᐃⲆΔᐃⲆ: "img/day-skin139.png",
        ⵠⲆΔᐃᐃᐃⵠ: "img/night-skin139.png",
        ⲆⵠⲆⵠᐃⲆΔ: "img/day-skin140.png",
        ⲆⲆⲆᐃΔᐃᐃ: "img/night-skin140.png",
        ⲆⵠⵠΔᐃΔⲆ: "img/day-skin141.png",
        ΔⲆᐃⲆⲆΔⵠ: "img/night-skin141.png",
        ⲆΔⵠⵠⲆⵠΔ: "img/day-skin142.png",
        ᐃⲆΔΔΔⵠⲆ: "img/night-skin142.png",
        ⵠΔΔΔⲆⲆⲆ: "img/day-skin143.png",
        ⲆᐃΔⵠΔΔΔ: "img/night-skin143.png",
        ΔⲆᐃᐃⲆΔⲆ: "img/day-skin144.png",
        ΔᐃΔⲆⵠᐃᐃ: "img/night-skin144.png",
        ΔᐃᐃΔⵠΔΔ: "img/day-skin145.png",
        ᐃⲆⲆᐃΔΔᐃ: "img/night-skin145.png",
        ⵠⲆⲆⲆⲆⵠΔ: "img/day-skin146.png",
        ᐃⵠⲆⲆΔⵠΔ: "img/night-skin146.png",
        ΔⵠⵠΔⲆᐃᐃ: "img/day-skin147.png",
        ⲆⲆΔΔΔΔⲆ: "img/night-skin147.png",
        ⵠⵠᐃᐃᐃⵠⵠ: "img/day-skin148.png",
        ΔⲆΔΔᐃΔⲆ: "img/night-skin148.png",
        ᐃᐃⲆⵠΔⲆᐃ: "img/day-skin149.png",
        ⵠᐃᐃⲆⵠⵠⵠ: "img/night-skin149.png",
        ΔⲆⵠᐃᐃᐃⲆ: "img/day-skin150.png",
        ᐃᐃΔⲆⲆΔΔ: "img/night-skin150.png",
        ⵠⵠΔΔᐃⵠⵠ: "img/day-skin151.png",
        ΔᐃⲆᐃⵠᐃΔ: "img/night-skin151.png",
        ⲆΔᐃⲆᐃⵠⵠ: "img/day-skin152.png",
        ⵠⲆⵠⲆΔⵠⵠ: "img/night-skin152.png",
        ΔᐃⵠⵠΔⲆΔ: "img/day-skin153.png",
        ᐃΔΔᐃⲆⵠⵠ: "img/night-skin153.png",
        ᐃΔΔᐃⵠΔⵠ: "img/day-skin154.png",
        ᐃΔⵠⲆⲆⵠⲆ: "img/night-skin154.png",
        ⵠᐃⲆᐃⵠⵠΔ: "img/day-skin155.png",
        ⲆⲆᐃᐃΔᐃΔ: "img/night-skin155.png",
        ⲆⲆᐃⲆᐃⵠⲆ: "img/day-skin156.png",
        ⲆⲆᐃⵠᐃⵠΔ: "img/night-skin156.png",
        ΔᐃⵠⲆⲆΔΔ: "img/day-skin157.png",
        ΔⵠΔⵠⲆⵠΔ: "img/night-skin157.png",
        ΔⲆⲆⲆⵠΔᐃ: "img/day-skin158.png",
        ΔᐃᐃⵠⲆᐃᐃ: "img/night-skin158.png",
        ᐃΔΔᐃⲆᐃᐃ: "img/day-skin159.png",
        ΔΔⵠⲆⲆⲆⲆ: "img/night-skin159.png",
        ⲆⲆΔⵠⵠΔⵠ: "img/day-skin160.png",
        ᐃⲆⵠⵠⵠⲆⵠ: "img/night-skin160.png",
        ΔⵠΔⲆᐃΔᐃ: "img/day-skin161.png",
        ΔᐃΔᐃⲆⲆⵠ: "img/night-skin161.png",
        ΔᐃⵠΔⵠΔⵠ: "img/day-skin162.png",
        ΔᐃⲆᐃΔⵠᐃ: "img/night-skin162.png",
        ⵠⲆⵠⵠᐃⵠⵠ: "img/day-skin163.png",
        ΔᐃⵠⲆⵠⵠⵠ: "img/night-skin163.png",
        ⵠⲆⲆᐃᐃΔⵠ: "img/day-skin164.png",
        ᐃᐃⵠΔⵠⵠᐃ: "img/night-skin164.png",
        ᐃᐃΔⲆΔᐃΔ: "img/day-skin165.png",
        ᐃⲆΔᐃⵠᐃᐃ: "img/night-skin165.png",
        ΔⲆΔᐃⵠⵠⲆ: "img/day-skin166.png",
        ΔⲆᐃⵠᐃⲆⲆ: "img/night-skin166.png",
        ᐃⵠⲆᐃⵠⲆΔ: "img/day-skin167.png",
        ⲆᐃᐃⵠᐃⲆⵠ: "img/night-skin167.png",
        ᐃⲆᐃⵠΔΔᐃ: "img/day-skin168.png",
        ⵠⵠⵠΔᐃᐃᐃ: "img/night-skin168.png",
        ᐃᐃⲆΔⲆⲆⲆ: "img/day-skin169.png",
        ΔᐃᐃΔⵠᐃⵠ: "img/night-skin169.png",
        ΔⵠⲆΔⲆⲆⲆ: "img/day-skin170.png",
        ⵠⲆⲆᐃⲆⵠⵠ: "img/night-skin170.png",
        ⲆᐃᐃᐃⵠᐃΔ: "img/day-skin171.png",
        ⵠⵠᐃᐃᐃᐃⲆ: "img/night-skin171.png",
        ⵠⵠⲆᐃⵠᐃᐃ: "img/day-skin172.png",
        ᐃⵠⲆⲆΔⲆⵠ: "img/night-skin172.png",
        ᐃⵠⲆⲆΔΔⲆ: "img/day-skin173.png",
        ᐃΔᐃⵠΔΔⲆ: "img/night-skin173.png",
        ⲆᐃᐃⲆᐃᐃΔ: "img/day-skin174.png",
        ᐃᐃᐃⵠΔⵠΔ: "img/night-skin174.png",
        ⵠᐃⵠᐃⵠΔⵠ: "img/day-skin175.png",
        ⵠᐃⵠⵠΔΔΔ: "img/night-skin175.png",
        ⵠⲆⲆᐃⲆΔⲆ: "img/day-skin176.png",
        ⵠⲆⲆⵠⲆᐃᐃ: "img/night-skin176.png",
        ΔΔⲆΔⵠⵠⵠ: "img/day-skin177.png",
        ⵠᐃⲆᐃⲆⵠⲆ: "img/night-skin177.png",
        ⵠᐃΔⲆⲆⲆⲆ: "img/day-skin178.png",
        ᐃᐃⵠΔⲆⲆᐃ: "img/night-skin178.png",
        ⵠⵠⵠⵠΔⵠᐃ: "img/day-skin179.png",
        ᐃⲆⲆᐃᐃΔⲆ: "img/night-skin179.png",
        ⵠⵠᐃⲆⵠΔᐃ: "img/day-skin180.png",
        ᐃᐃᐃᐃᐃΔⵠ: "img/night-skin180.png",
        ΔᐃΔⵠᐃᐃΔ: "img/day-skin181.png",
        ⲆΔΔⵠⲆᐃΔ: "img/night-skin181.png",
        ΔⵠⲆΔᐃΔⲆ: "img/day-skin182.png",
        ΔⲆΔΔⵠΔᐃ: "img/night-skin182.png",
        ΔᐃⲆᐃⲆⲆⵠ: "img/day-skin183.png",
        ⵠΔᐃⵠᐃᐃΔ: "img/night-skin183.png",
        ΔⵠᐃⲆⵠΔⲆ: "img/day-skin184.png",
        ⵠΔⵠΔΔᐃⵠ: "img/night-skin184.png",
        ⵠᐃⲆΔⵠᐃᐃ: "img/day-skin185.png",
        ⲆᐃⵠⲆᐃⲆΔ: "img/night-skin185.png",
        ⵠⵠΔΔΔᐃᐃ: "img/day-skin186.png",
        ᐃΔⵠΔⲆΔⵠ: "img/night-skin186.png",
        ᐃᐃΔⲆΔⲆΔ: "img/day-skin187.png",
        ⵠⵠⲆΔⲆⵠⵠ: "img/night-skin187.png",
        ⵠᐃΔᐃⵠⲆⲆ: "img/day-skin188.png",
        ᐃΔΔᐃⵠΔᐃ: "img/night-skin188.png",
        ΔᐃⲆᐃΔΔΔ: "img/day-skin189.png",
        ⲆΔΔⲆⵠⵠⲆ: "img/night-skin189.png",
        ⲆⲆⵠⲆΔⲆⲆ: "img/day-skin190.png",
        ⵠΔΔΔⲆⲆⵠ: "img/night-skin190.png",
        ᐃⵠΔΔⵠᐃⲆ: "img/day-skin191.png",
        ⵠΔΔᐃⵠΔΔ: "img/night-skin191.png",
        ⲆⵠⲆΔⲆⵠᐃ: "img/day-skin192.png",
        ⵠΔΔᐃᐃΔⵠ: "img/night-skin192.png",
        ΔⵠᐃᐃⵠΔᐃ: "img/day-skin193.png",
        ᐃⲆᐃΔⲆⵠⵠ: "img/night-skin193.png",
        ΔⲆΔⲆⲆⵠΔ: "img/day-skin194.png",
        ΔⵠᐃΔⵠⲆⲆ: "img/night-skin194.png",
        ΔᐃⵠⵠⵠΔⲆ: "img/day-skin195.png",
        ᐃⵠⵠΔᐃᐃᐃ: "img/night-skin195.png",
        ⲆⲆⵠⵠᐃᐃᐃ: "img/day-skin196.png",
        ⲆⲆΔᐃⵠᐃᐃ: "img/night-skin196.png",
        ᐃⵠᐃᐃⵠΔⲆ: "img/day-skin197.png",
        ⲆⲆⵠᐃⵠⲆΔ: "img/night-skin197.png",
        ⵠᐃΔΔΔⵠΔ: "img/day-skin198.png",
        ΔⵠΔⲆΔⵠⵠ: "img/night-skin198.png",
        ΔΔᐃⵠⲆΔⵠ: "img/day-skin199.png",
        ⲆⲆᐃⲆⵠⵠⵠ: "img/night-skin199.png",
        ᐃⲆΔⵠⲆⲆΔ: "img/day-skin200.png",
        ΔᐃᐃⲆⲆΔᐃ: "img/night-skin200.png",
        ᐃⵠⲆⲆΔᐃᐃ: "img/day-skin201.png",
        ⲆⵠΔⵠⲆⲆⲆ: "img/night-skin201.png",
        ΔᐃⵠⲆⲆᐃᐃ: "img/day-skin202.png",
        ⲆⵠΔⵠΔΔΔ: "img/night-skin202.png",
        ⲆᐃᐃⵠΔΔΔ: "img/day-skin203.png",
        ⵠᐃⵠⵠⲆⵠⵠ: "img/night-skin203.png",
        ⲆⵠΔᐃᐃⲆΔ: "img/day-skin204.png",
        ⲆΔᐃΔᐃⵠⲆ: "img/night-skin204.png",
        ⲆⲆᐃΔⵠΔᐃ: "img/day-skin205.png",
        ΔᐃᐃⲆⵠⲆᐃ: "img/night-skin205.png",
        ⲆⵠΔⵠΔⲆᐃ: "img/day-skin206.png",
        ᐃⲆⵠᐃⲆΔⵠ: "img/night-skin206.png",
        ⲆⲆΔΔΔⵠⲆ: "img/day-skin207.png",
        ⲆⲆΔᐃⲆⵠᐃ: "img/night-skin207.png",
        ⵠᐃΔΔⲆΔΔ: "img/day-skin208.png",
        ΔΔᐃᐃΔⲆⲆ: "img/night-skin208.png",
        ⵠⲆᐃⵠⵠᐃΔ: "img/day-skin209.png",
        ΔⵠⵠⲆᐃΔⲆ: "img/night-skin209.png",
        ⵠΔᐃⲆⲆⲆⲆ: "img/day-skin210.png",
        ΔⵠΔⵠⲆⵠⵠ: "img/night-skin210.png",
        ⲆⲆⲆⵠᐃⲆᐃ: "img/day-skin211.png",
        ⵠΔⲆⲆᐃⵠᐃ: "img/night-skin211.png",
        ⲆΔⲆᐃⵠⲆⲆ: "img/day-skin212.png",
        ⵠΔᐃΔⲆΔⲆ: "img/night-skin212.png",
        ΔⵠΔᐃⵠᐃΔ: "img/day-hand-skin0.png",
        ᐃᐃᐃΔᐃᐃⵠ: "img/night-hand-skin0.png",
        ΔⲆⲆⲆᐃⵠᐃ: "img/day-hand-skin1.png",
        ⲆᐃΔⵠΔⲆⲆ: "img/night-hand-skin1.png",
        ⵠΔᐃⵠⵠⵠⵠ: "img/day-hand-skin2.png",
        ΔⲆⲆⲆⵠⲆΔ: "img/night-hand-skin2.png",
        ⵠⲆⵠᐃᐃΔΔ: "img/day-hand-skin3.png",
        ⲆᐃⲆᐃᐃΔⲆ: "img/night-hand-skin3.png",
        ⵠⲆⲆⲆΔⲆΔ: "img/day-hand-skin4.png",
        ᐃⵠΔⵠΔⲆⲆ: "img/night-hand-skin4.png",
        ᐃᐃᐃΔᐃΔΔ: "img/day-hand-skin5.png",
        ⵠΔⲆⲆΔΔᐃ: "img/night-hand-skin5.png",
        ᐃΔⵠⵠΔⲆᐃ: "img/day-hand-skin6.png",
        ⲆⲆⵠⵠⵠⵠΔΔᐃ: "img/night-hand-skin6.png",
        ᐃⵠΔⲆⵠᐃΔ: "img/day-hand-skin6.png",
        ΔⲆⵠᐃᐃⲆⵠ: "img/night-hand-skin6.png",
        ⲆⵠⵠΔΔΔᐃ: "img/day-hand-skin8.png",
        ⲆⲆⲆⲆⵠⲆⵠ: "img/night-hand-skin8.png",
        ᐃᐃΔⵠⲆᐃΔ: "img/day-hand-skin9.png",
        ΔⲆᐃⲆΔΔΔ: "img/night-hand-skin9.png",
        ΔΔᐃⵠΔᐃⲆ: "img/day-hand-skin10.png",
        ⲆᐃⵠΔᐃΔⵠ: "img/night-hand-skin10.png",
        ᐃΔⲆΔᐃⲆⲆ: "img/day-hand-skin11.png",
        ⲆⵠΔΔΔᐃᐃ: "img/night-hand-skin11.png",
        ⵠⵠⲆⵠⲆΔᐃ: "img/day-hand-skin12.png",
        ⲆⲆΔᐃⲆⵠΔ: "img/night-hand-skin12.png",
        ΔⲆⲆΔᐃΔⵠ: "img/day-hand-skin13.png",
        ⲆⲆⲆⵠⲆᐃⵠ: "img/night-hand-skin13.png",
        ⵠⵠⲆΔᐃⵠΔ: "img/day-hand-skin14.png",
        ΔᐃΔⲆᐃⵠⵠ: "img/night-hand-skin14.png",
        ΔᐃΔⵠᐃⲆⲆ: "img/day-hand-skin15.png",
        ⲆΔᐃⵠⵠⲆⲆ: "img/night-hand-skin15.png",
        ᐃⲆⵠΔⵠⵠᐃ: "img/day-hand-skin16.png",
        ⲆΔⵠⲆΔⲆⲆ: "img/night-hand-skin16.png",
        ᐃⵠᐃᐃⲆⵠⵠ: "img/day-hand-skin17.png",
        ⵠⲆⵠⵠᐃⲆΔ: "img/night-hand-skin17.png",
        ᐃⲆᐃΔᐃᐃΔ: "img/day-hand-skin18.png",
        ⲆⲆⵠΔΔⲆⵠ: "img/night-hand-skin18.png",
        ⵠᐃⲆⵠⵠΔⵠ: "img/day-hand-skin19.png",
        ⲆΔΔⲆΔΔⵠ: "img/night-hand-skin19.png",
        ⲆᐃⲆᐃᐃᐃⵠ: "img/day-hand-skin20.png",
        ᐃⵠᐃΔΔᐃⵠ: "img/night-hand-skin20.png",
        ⵠᐃᐃⵠᐃⲆᐃ: "img/day-hand-skin21.png",
        ⲆⵠⲆⵠΔΔΔ: "img/night-hand-skin21.png",
        ⵠⵠᐃⵠΔⵠⲆ: "img/day-hand-skin22.png",
        ΔⵠⵠᐃΔᐃᐃ: "img/night-hand-skin22.png",
        ΔⵠⲆΔᐃᐃⵠ: "img/day-hand-skin23.png",
        ⵠⵠⵠⵠⵠᐃᐃ: "img/night-hand-skin23.png",
        ΔᐃᐃⵠᐃⵠΔ: "img/day-hand-skin24.png",
        ⲆⵠⲆⵠΔⵠⵠ: "img/night-hand-skin24.png",
        ⲆΔⵠⵠᐃᐃᐃ: "img/day-hand-skin25.png",
        ΔᐃⲆⲆⵠⲆΔ: "img/night-hand-skin25.png",
        ⲆᐃⵠⵠⵠᐃⲆ: "img/day-hand-skin26.png",
        ᐃΔⵠⵠᐃᐃⵠ: "img/night-hand-skin26.png",
        ΔⵠⵠⲆΔΔⲆ: "img/day-hand-skin27.png",
        ⲆΔⵠⲆⲆⲆΔ: "img/night-hand-skin27.png",
        ᐃΔΔΔᐃⵠⲆ: "img/day-hand-skin28.png",
        ᐃⲆᐃⵠΔᐃᐃ: "img/night-hand-skin28.png",
        ᐃΔⵠⲆⲆΔⲆ: "img/day-hand-skin29.png",
        ΔᐃᐃⵠⲆΔⲆ: "img/night-hand-skin29.png",
        ᐃⲆⵠⵠΔⲆᐃ: "img/day-hand-skin30.png",
        ⵠⵠΔΔⵠⲆⵠ: "img/night-hand-skin30.png",
        ⵠⲆᐃᐃΔΔⵠ: "img/day-hand-skin31.png",
        ⵠⲆᐃⵠⲆΔΔ: "img/night-hand-skin31.png",
        ⵠⵠᐃΔΔⵠΔ: "img/day-hand-skin32.png",
        ᐃⲆΔⲆⵠⵠΔ: "img/night-hand-skin32.png",
        ΔⲆΔΔⵠⵠⵠ: "img/day-hand-skin33.png",
        ⵠⲆᐃᐃⵠΔΔ: "img/night-hand-skin33.png",
        ⲆⲆⲆⲆᐃᐃΔ: "img/day-hand-skin34.png",
        ΔΔΔⲆⵠᐃⲆ: "img/night-hand-skin34.png",
        ⵠΔΔΔΔⲆⵠ: "img/day-hand-skin35.png",
        ⲆᐃⵠᐃΔᐃΔ: "img/night-hand-skin35.png",
        ᐃΔᐃⲆᐃⵠᐃ: "img/day-hand-skin36.png",
        ⲆⵠⵠⲆΔⵠⲆ: "img/night-hand-skin36.png",
        ⲆⲆΔⵠΔⲆΔ: "img/day-hand-skin37.png",
        ΔᐃⲆᐃⵠⵠᐃ: "img/night-hand-skin37.png",
        ᐃΔᐃⲆⵠⲆᐃ: "img/day-hand-skin38.png",
        ΔⵠᐃᐃⵠⵠΔ: "img/night-hand-skin38.png",
        ᐃᐃⲆⲆⵠⵠⵠ: "img/day-hand-skin39.png",
        ΔⵠᐃΔⲆⲆⲆ: "img/night-hand-skin39.png",
        ΔΔᐃⵠᐃⵠⲆ: "img/day-hand-skin40.png",
        ᐃⵠΔⲆΔⵠⵠ: "img/night-hand-skin40.png",
        ⵠⵠⵠⲆᐃⲆⲆ: "img/day-hand-skin41.png",
        ⵠᐃⵠΔᐃᐃᐃ: "img/night-hand-skin41.png",
        ⲆⵠΔᐃⲆⲆⵠ: "img/day-hand-skin42.png",
        ΔΔᐃⵠΔΔⵠ: "img/night-hand-skin42.png",
        ⲆᐃΔⲆⲆᐃⵠ: "img/day-hand-skin43.png",
        ΔⵠΔⲆᐃⵠΔ: "img/night-hand-skin43.png",
        ⵠᐃΔΔᐃⲆΔ: "img/day-hand-skin16.png",
        ⲆⵠⵠⲆⵠⲆΔ: "img/night-hand-skin16.png",
        ᐃⲆⲆⵠΔⲆΔ: "img/day-hand-skin45.png",
        ⲆᐃΔⲆⲆⵠᐃ: "img/night-hand-skin45.png",
        ΔⲆⵠᐃⲆᐃⲆ: "img/day-hand-skin46.png",
        ΔⵠⲆᐃⲆΔⲆ: "img/night-hand-skin46.png",
        ᐃΔΔΔⵠⵠᐃ: "img/day-hand-skin47.png",
        ⵠᐃⲆᐃⵠⲆᐃ: "img/night-hand-skin47.png",
        ⵠⵠΔⵠⵠᐃⵠ: "img/day-hand-skin48.png",
        ⲆⲆⲆᐃΔⲆΔ: "img/night-hand-skin48.png",
        ⲆⵠⲆΔΔΔⲆ: "img/day-hand-skin49.png",
        ⲆΔᐃᐃᐃᐃⵠ: "img/night-hand-skin49.png",
        ᐃᐃᐃᐃᐃΔΔ: "img/day-hand-skin49.png",
        ⲆⲆΔΔΔⵠᐃ: "img/night-hand-skin49.png",
        ⵠᐃⲆⵠⲆΔᐃ: "img/day-hand-skin51.png",
        ⵠΔⵠᐃⵠⵠΔ: "img/night-hand-skin51.png",
        ᐃᐃⵠΔⲆⲆΔ: "img/day-hand-skin52.png",
        ᐃⵠΔⵠⲆⲆΔ: "img/night-hand-skin52.png",
        ⵠᐃⵠⲆⵠΔⵠ: "img/day-hand-skin53.png",
        ᐃⵠᐃΔΔᐃΔ: "img/night-hand-skin53.png",
        ᐃΔΔᐃⲆᐃΔ: "img/day-hand-skin53.png",
        ΔⲆᐃᐃΔΔΔ: "img/night-hand-skin53.png",
        ᐃⵠⲆΔⲆᐃⲆ: "img/day-hand-skin55.png",
        ⲆⵠΔΔᐃⲆΔ: "img/night-hand-skin55.png",
        ⵠⲆⲆⲆⲆⲆⵠ: "img/day-hand-skin56.png",
        ᐃⵠⲆΔᐃᐃΔ: "img/night-hand-skin56.png",
        ⲆᐃⵠⲆⲆⵠⵠ: "img/day-hand-skin57.png",
        ⲆᐃΔᐃᐃΔᐃ: "img/night-hand-skin57.png",
        ᐃⵠᐃⵠⲆᐃⵠ: "img/day-hand-skin58.png",
        ⵠᐃΔΔᐃΔⲆ: "img/night-hand-skin58.png",
        ⲆⲆΔⵠΔⲆⵠ: "img/day-hand-skin59.png",
        ⵠᐃⵠᐃᐃⲆⵠ: "img/night-hand-skin59.png",
        ⲆᐃΔⵠᐃΔⲆ: "img/day-hand-skin61.png",
        ᐃΔⲆᐃⲆⲆⲆ: "img/night-hand-skin61.png",
        ΔᐃⵠⲆⵠΔⵠ: "img/day-hand-skin61.png",
        ᐃΔᐃⲆⲆᐃᐃ: "img/night-hand-skin61.png",
        ⲆⲆⲆΔᐃΔᐃ: "img/day-hand-skin62.png",
        ᐃΔΔⲆⵠᐃᐃ: "img/night-hand-skin62.png",
        ΔᐃⲆⵠⲆᐃⲆ: "img/day-hand-skin63.png",
        ᐃⲆⲆᐃΔᐃⲆ: "img/night-hand-skin63.png",
        ΔᐃΔⵠⲆᐃΔ: "img/day-hand-skin64.png",
        ᐃⵠⲆⵠᐃⵠⵠ: "img/night-hand-skin64.png",
        ᐃⲆⲆⲆⵠΔⲆ: "img/day-hand-skin65.png",
        ⵠΔⲆⲆⲆᐃⲆ: "img/night-hand-skin65.png",
        ᐃⲆΔⵠⲆΔⲆ: "img/day-hand-skin66.png",
        ⲆⲆᐃⵠᐃⲆⲆ: "img/night-hand-skin66.png",
        ΔᐃᐃⵠⵠΔⲆ: "img/day-hand-skin67.png",
        ⲆⵠΔⲆⲆᐃⲆ: "img/night-hand-skin67.png",
        ᐃᐃⵠⵠᐃⵠⲆ: "img/day-hand-skin68.png",
        ΔᐃᐃⲆᐃᐃⵠ: "img/night-hand-skin68.png",
        ΔⲆⲆⵠΔⲆⵠ: "img/day-hand-skin69.png",
        ᐃΔⲆᐃΔⲆΔ: "img/night-hand-skin69.png",
        ⲆⵠⵠⲆⲆᐃⲆ: "img/day-hand-skin70.png",
        ⲆΔⵠΔΔⵠⲆ: "img/night-hand-skin70.png",
        ΔⲆᐃᐃⲆᐃⲆ: "img/day-hand-skin71.png",
        ⵠⵠⵠⵠᐃⵠⵠ: "img/night-hand-skin71.png",
        ΔΔⵠᐃⲆᐃⲆ: "img/day-hand-skin72.png",
        ⵠΔᐃⵠⲆᐃⵠ: "img/night-hand-skin72.png",
        ᐃΔⵠⵠᐃⵠⲆ: "img/day-hand-skin73.png",
        ⵠⲆᐃΔⵠⲆΔ: "img/night-hand-skin73.png",
        ᐃᐃⲆⵠΔᐃⲆ: "img/day-hand-skin74.png",
        ᐃⲆΔΔᐃⲆⵠ: "img/night-hand-skin74.png",
        ⵠᐃΔᐃⲆᐃⲆ: "img/day-hand-skin75.png",
        ᐃⵠⲆⵠᐃΔΔ: "img/night-hand-skin75.png",
        ⲆⲆᐃΔⵠⲆᐃ: "img/day-hand-skin76.png",
        ⲆⲆⲆᐃΔΔᐃ: "img/night-hand-skin76.png",
        ΔⲆᐃⵠΔᐃⲆ: "img/day-hand-skin77.png",
        ⵠΔⵠⲆΔⲆᐃ: "img/night-hand-skin77.png",
        ΔᐃΔᐃⲆΔΔ: "img/day-hand-skin78.png",
        ⲆⵠᐃᐃΔⵠᐃ: "img/night-hand-skin78.png",
        ᐃⵠᐃᐃⵠΔΔ: "img/day-hand-skin79.png",
        ᐃᐃΔⵠⲆᐃⲆ: "img/night-hand-skin79.png",
        ΔⵠᐃΔᐃⲆⲆ: "img/day-hand-skin80.png",
        ΔᐃⵠⲆⲆⵠΔ: "img/night-hand-skin80.png",
        ⵠⵠΔⵠⲆⵠⵠ: "img/day-hand-skin81.png",
        ⵠⲆⵠᐃⲆⵠⲆ: "img/night-hand-skin81.png",
        ⲆΔⵠᐃⲆΔΔ: "img/day-hand-skin82.png",
        ᐃⲆⵠΔⲆⵠΔ: "img/night-hand-skin82.png",
        ᐃᐃᐃΔⲆΔⵠ: "img/day-hand-skin83.png",
        ⵠⲆΔΔᐃᐃᐃ: "img/night-hand-skin83.png",
        ⲆⲆᐃⵠΔⵠⵠ: "img/day-hand-skin84.png",
        ᐃΔᐃⲆⵠᐃΔ: "img/night-hand-skin84.png",
        ⲆⵠΔᐃⲆⲆⲆ: "img/day-hand-skin85.png",
        ᐃⲆⲆⵠΔΔᐃ: "img/night-hand-skin85.png",
        ⵠⲆΔⵠⲆΔᐃ: "img/day-hand-skin86.png",
        ⲆΔⲆⲆᐃⵠᐃ: "img/night-hand-skin86.png",
        ⵠⲆⵠⵠᐃΔᐃ: "img/day-hand-skin87.png",
        ⵠⵠⲆⵠᐃⲆΔ: "img/night-hand-skin87.png",
        ⵠⵠΔⵠᐃᐃⲆ: "img/day-hand-skin88.png",
        ⵠⵠΔᐃΔⵠᐃ: "img/night-hand-skin88.png",
        ᐃⲆⵠⲆᐃᐃⲆ: "img/day-hand-skin89.png",
        ⵠⲆΔⲆⵠⵠᐃ: "img/night-hand-skin89.png",
        ⲆⵠⵠΔⲆΔⵠ: "img/day-hand-skin90.png",
        ΔΔⲆⲆⲆᐃᐃ: "img/night-hand-skin90.png",
        ΔⲆⲆΔᐃⵠⲆ: "img/day-hand-skin91.png",
        ⵠⵠⵠⲆᐃΔᐃ: "img/night-hand-skin91.png",
        ⲆⲆⵠⵠⲆᐃΔ: "img/day-hand-skin92.png",
        ⵠᐃΔᐃⵠΔⵠ: "img/night-hand-skin92.png",
        ᐃⵠᐃΔⵠⲆΔ: "img/day-hand-skin93.png",
        ΔᐃΔⲆᐃΔΔ: "img/night-hand-skin93.png",
        ᐃΔᐃᐃⵠⵠⵠ: "img/day-hand-skin94.png",
        ⲆⲆᐃᐃᐃΔΔ: "img/night-hand-skin94.png",
        ⲆⵠⲆᐃᐃΔᐃ: "img/day-hand-skin95.png",
        ⵠΔⵠⲆⲆᐃΔ: "img/night-hand-skin95.png",
        ᐃᐃⵠΔᐃⵠΔ: "img/day-hand-skin96.png",
        ΔⲆΔⵠᐃΔᐃ: "img/night-hand-skin96.png",
        ⵠᐃⵠΔᐃΔⵠ: "img/day-hand-skin97.png",
        ΔⵠⲆᐃⵠᐃΔ: "img/night-hand-skin97.png",
        ᐃⲆΔⲆⵠΔⲆ: "img/day-hand-skin98.png",
        ΔⲆΔⲆᐃΔᐃ: "img/night-hand-skin98.png",
        ⵠⵠⵠΔⲆΔᐃ: "img/day-hand-skin99.png",
        ⲆΔⵠΔᐃⲆⵠ: "img/night-hand-skin99.png",
        ⲆⲆΔᐃᐃⵠᐃ: "img/day-hand-skin100.png",
        ⲆⲆᐃΔⲆⵠΔ: "img/night-hand-skin100.png",
        ⵠⲆΔⵠⲆⲆⲆ: "img/day-hand-skin101.png",
        ⵠᐃΔⲆᐃΔΔ: "img/night-hand-skin101.png",
        ⵠⵠⲆⲆⲆΔⵠ: "img/day-hand-skin102.png",
        ΔᐃΔⵠᐃⵠᐃ: "img/night-hand-skin102.png",
        ᐃⲆᐃⵠⵠΔᐃ: "img/day-hand-skin103.png",
        ⵠᐃΔⲆⵠᐃⲆ: "img/night-hand-skin103.png",
        ⵠⲆⵠᐃⵠⲆᐃ: "img/day-hand-skin104.png",
        ᐃᐃⲆΔΔⲆΔ: "img/night-hand-skin104.png",
        ⵠⲆΔΔᐃᐃⲆ: "img/day-hand-skin105.png",
        ΔᐃⵠᐃⵠⲆⵠ: "img/night-hand-skin105.png",
        ⲆⲆᐃΔᐃⲆΔ: "img/day-hand-skin106.png",
        ᐃᐃΔᐃⲆΔⵠ: "img/night-hand-skin106.png",
        ⵠⲆⵠⵠⲆᐃᐃ: "img/day-hand-skin107.png",
        ⲆⲆᐃΔⵠᐃⲆ: "img/night-hand-skin107.png",
        ⵠⵠⵠⲆᐃᐃⵠ: "img/day-hand-skin108.png",
        ᐃᐃᐃΔΔᐃⵠ: "img/night-hand-skin108.png",
        ⲆΔⵠⲆⵠᐃⲆ: "img/day-hand-skin109.png",
        ⵠᐃᐃᐃᐃⲆⲆ: "img/night-hand-skin109.png",
        ⵠΔⲆᐃᐃⵠΔ: "img/day-hand-skin110.png",
        ΔΔⲆᐃⲆΔⵠ: "img/night-hand-skin110.png",
        ⵠⲆΔΔᐃᐃⵠ: "img/day-hand-skin111.png",
        ΔΔΔΔΔΔΔ: "img/night-hand-skin111.png",
        ΔΔⵠⵠᐃΔᐃ: "img/day-hand-skin112.png",
        ⲆⵠᐃΔⲆΔⵠ: "img/night-hand-skin112.png",
        ⲆΔⵠⲆᐃΔⵠⵠΔ: "img/day-hand-skin113.png",
        ΔⲆⵠΔⵠⲆᐃⵠΔ: "img/night-hand-skin113.png",
        ᐃⵠⵠⲆⲆΔⵠ: "img/day-hand-skin114.png",
        ⵠΔⲆΔΔᐃᐃ: "img/night-hand-skin114.png",
        ΔΔⲆΔΔⵠᐃ: "img/day-hand-skin115.png",
        ⲆΔΔᐃⲆⵠⵠ: "img/night-hand-skin115.png",
        ⵠⵠΔⵠⵠⵠⵠ: "img/day-hand-skin116.png",
        ΔⲆⵠΔⵠⵠⲆ: "img/night-hand-skin116.png",
        ⲆΔΔⵠⵠⲆΔ: "img/day-hand-skin117.png",
        ΔⵠⲆⵠⵠᐃΔ: "img/night-hand-skin117.png",
        ⲆⲆⲆᐃⵠⲆᐃ: "img/day-hand-skin118.png",
        ⲆⵠᐃⲆⲆⵠΔ: "img/night-hand-skin118.png",
        ⵠᐃΔᐃⲆⵠᐃ: "img/day-hand-skin119.png",
        ᐃⲆⲆⲆᐃⵠⲆ: "img/night-hand-skin119.png",
        ΔΔΔⲆΔᐃΔ: "img/day-hand-skin120.png",
        ᐃᐃᐃⲆⵠᐃᐃ: "img/night-hand-skin120.png",
        ᐃΔᐃΔⲆⲆΔ: "img/day-hand-skin122.png",
        ⲆⵠⵠⵠΔⲆΔ: "img/night-hand-skin122.png",
        ⵠᐃᐃⵠⲆᐃⵠ: "img/day-hand-skin122.png",
        ΔΔⲆΔΔⲆΔ: "img/night-hand-skin122.png",
        ᐃᐃᐃᐃⵠΔⵠ: "img/day-hand-skin122.png",
        ⲆⲆⵠⵠΔⲆΔ: "img/night-hand-skin122.png",
        ΔΔⲆᐃⲆⲆⲆ: "img/day-hand-skin124.png",
        ᐃⵠⵠⲆⲆⲆⵠ: "img/night-hand-skin124.png",
        ᐃⲆⲆⵠⲆⲆΔ: "img/day-hand-skin125.png",
        ᐃΔⵠⲆᐃⵠⵠ: "img/night-hand-skin125.png",
        ΔⲆⲆΔᐃⵠᐃ: "img/day-hand-skin126.png",
        ⵠΔⵠⲆᐃᐃⲆ: "img/night-hand-skin126.png",
        ⲆⵠⲆⵠᐃᐃΔ: "img/day-hand-skin127.png",
        ᐃᐃⲆᐃⵠΔΔ: "img/night-hand-skin127.png",
        ᐃⲆⲆⲆᐃᐃΔ: "img/day-hand-skin128.png",
        ⵠⲆΔΔⵠᐃΔ: "img/night-hand-skin128.png",
        ⵠΔⲆⵠⲆᐃᐃ: "img/day-hand-skin129.png",
        ⲆᐃⲆⲆᐃΔⲆ: "img/night-hand-skin129.png",
        ᐃⵠⲆΔᐃⲆⲆ: "img/day-hand-skin130.png",
        ⵠⵠⲆΔⲆΔΔ: "img/night-hand-skin130.png",
        ᐃᐃᐃΔΔⵠⲆ: "img/day-hand-skin131.png",
        ᐃⲆΔᐃⵠΔᐃ: "img/night-hand-skin131.png",
        ⲆΔᐃⵠⲆⲆⲆ: "img/day-hand-skin130.png",
        ΔᐃⵠⵠᐃᐃΔ: "img/night-hand-skin130.png",
        ⵠΔⵠΔΔⵠᐃ: "img/day-hand-skin133.png",
        ᐃᐃⲆΔᐃⵠᐃ: "img/night-hand-skin133.png",
        ⲆᐃᐃⵠΔⵠΔ: "img/day-hand-skin134.png",
        ⵠᐃᐃᐃᐃΔⵠ: "img/night-hand-skin134.png",
        ⲆΔⲆᐃΔⲆΔ: "img/day-hand-skin135.png",
        ᐃⲆΔⲆΔΔⲆ: "img/night-hand-skin135.png",
        ᐃⲆᐃⲆⲆⵠⵠ: "img/day-hand-skin136.png",
        ᐃᐃⵠΔⵠⵠΔ: "img/night-hand-skin136.png",
        ⲆⵠᐃⲆᐃᐃⵠ: "img/day-hand-skin137.png",
        ᐃⵠⵠΔⲆⵠⲆ: "img/night-hand-skin137.png",
        ⵠΔᐃΔⵠⵠᐃ: "img/day-hand-skin138.png",
        ⲆΔⲆⵠᐃⲆⵠ: "img/night-hand-skin138.png",
        ᐃᐃⲆⵠⵠⲆᐃ: "img/day-hand-skin139.png",
        ⲆΔᐃⲆΔⲆⵠ: "img/night-hand-skin139.png",
        ᐃⵠΔⲆⲆΔⵠ: "img/day-hand-skin140.png",
        ⲆᐃⵠΔⵠᐃⵠ: "img/night-hand-skin140.png",
        ᐃⵠᐃⵠΔᐃⲆ: "img/day-hand-skin141.png",
        ⵠᐃΔⲆᐃᐃᐃ: "img/night-hand-skin141.png",
        ᐃⵠΔΔⵠⵠᐃ: "img/day-hand-skin142.png",
        ΔΔⵠⲆⵠΔⲆ: "img/night-hand-skin142.png",
        ᐃⵠⵠΔⲆΔⲆ: "img/day-hand-skin143.png",
        ΔⵠΔΔΔᐃⲆ: "img/night-hand-skin143.png",
        ΔⲆⲆΔᐃⲆΔ: "img/day-hand-skin144.png",
        ⲆΔⲆᐃⵠΔⵠ: "img/night-hand-skin144.png",
        ⲆΔⲆΔⲆᐃΔ: "img/day-hand-skin145.png",
        ⵠᐃΔⵠⲆⵠⵠ: "img/night-hand-skin145.png",
        ⲆΔⵠⵠΔⵠᐃ: "img/day-hand-skin146.png",
        ⵠΔᐃΔΔⵠΔ: "img/night-hand-skin146.png",
        ᐃⵠΔⵠᐃⲆⲆ: "img/day-hand-skin147.png",
        ΔⵠⲆᐃⲆΔΔ: "img/night-hand-skin147.png",
        ᐃⲆᐃᐃⵠΔᐃ: "img/day-hand-skin148.png",
        ⲆⵠΔⲆᐃⵠᐃ: "img/night-hand-skin148.png",
        ⵠⵠΔⵠΔⵠᐃ: "img/day-hand-skin149.png",
        ᐃⵠΔΔΔΔⵠ: "img/night-hand-skin149.png",
        ΔⵠΔᐃⲆᐃᐃ: "img/day-hand-skin150.png",
        ⵠⵠΔⲆΔΔᐃ: "img/night-hand-skin150.png",
        ᐃᐃΔΔΔⲆⲆ: "img/day-hand-skin151.png",
        ΔΔΔΔΔᐃᐃ: "img/night-hand-skin151.png",
        ⲆΔⲆΔᐃⵠΔ: "img/day-hand-skin152.png",
        ᐃᐃΔΔΔⵠⲆ: "img/night-hand-skin152.png",
        ⵠΔⵠᐃⵠⵠⵠ: "img/day-hand-skin153.png",
        ΔⵠⵠᐃⵠⵠⲆ: "img/night-hand-skin153.png",
        ⲆⵠⵠⵠΔᐃⲆ: "img/day-hand-skin154.png",
        ΔᐃⲆⵠⵠⲆⲆ: "img/night-hand-skin154.png",
        ⵠⵠⵠΔΔΔⲆ: "img/day-hand-skin155.png",
        ⲆᐃΔᐃᐃⵠⲆ: "img/night-hand-skin155.png",
        ⲆⲆⵠⵠⵠⲆⲆ: "img/day-hand-skin156.png",
        ΔⲆⲆΔΔⲆⲆ: "img/night-hand-skin156.png",
        ᐃᐃᐃᐃⵠⵠⵠ: "img/day-hand-skin157.png",
        ᐃᐃΔⵠⲆⵠⵠ: "img/night-hand-skin157.png",
        ᐃΔⵠᐃⲆᐃⲆ: "img/day-hand-skin158.png",
        ⲆⵠΔᐃΔΔᐃ: "img/night-hand-skin158.png",
        ΔᐃⲆⲆΔᐃΔ: "img/day-hand-skin159.png",
        ᐃᐃΔⲆΔΔᐃ: "img/night-hand-skin159.png",
        ⲆΔⵠⵠⲆΔΔ: "img/day-hand-skin160.png",
        ⲆᐃᐃᐃΔΔΔ: "img/night-hand-skin160.png",
        ΔᐃⲆⲆᐃⵠΔ: "img/day-hand-skin161.png",
        ΔᐃΔⲆⲆΔᐃ: "img/night-hand-skin161.png",
        ΔⵠⵠⵠⲆᐃⵠ: "img/day-hand-skin162.png",
        ⵠⲆᐃⵠΔΔⲆ: "img/night-hand-skin162.png",
        ΔΔᐃΔⵠⲆⵠ: "img/day-hand-skin163.png",
        ΔᐃⲆΔᐃΔⵠ: "img/night-hand-skin163.png",
        ᐃⵠⵠᐃΔΔⵠ: "img/day-hand-skin164.png",
        ᐃΔⲆᐃⵠⵠⲆ: "img/night-hand-skin164.png",
        ΔⵠᐃⵠⲆΔΔ: "img/day-hand-skin165.png",
        ⲆⲆᐃⲆΔΔⵠ: "img/night-hand-skin165.png",
        ⵠⵠᐃⲆⲆΔⲆ: "img/day-hand-skin166.png",
        ⵠⲆᐃΔᐃⵠⵠ: "img/night-hand-skin166.png",
        ΔᐃⵠᐃⲆⵠⵠ: "img/day-hand-skin167.png",
        ⲆⵠⵠⲆΔⲆⲆ: "img/night-hand-skin167.png",
        ΔⵠΔᐃΔΔⲆ: "img/day-hand-skin168.png",
        ⲆⵠⲆⵠΔⵠΔ: "img/night-hand-skin168.png",
        ⵠΔⵠᐃⲆΔΔ: "img/day-hand-skin169.png",
        ΔⲆⲆᐃⲆΔᐃ: "img/night-hand-skin169.png",
        ⲆᐃΔᐃⲆⲆⵠ: "img/day-hand-skin170.png",
        ⲆΔΔΔΔᐃΔ: "img/night-hand-skin170.png",
        ᐃᐃⲆᐃΔᐃᐃ: "img/day-hand-skin171.png",
        ᐃⲆⵠⵠΔΔᐃ: "img/night-hand-skin171.png",
        ⵠⵠⵠⲆⵠΔΔ: "img/day-hand-skin172.png",
        ᐃΔΔΔᐃⵠΔ: "img/night-hand-skin172.png",
        ⵠⲆᐃⲆⲆⲆᐃ: "img/day-hand-skin173.png",
        ⲆΔⲆⵠⵠⵠⲆ: "img/night-hand-skin173.png",
        ⲆᐃΔⲆΔⲆⲆ: "img/day-hand-skin174.png",
        ⲆΔⲆΔᐃⵠⲆ: "img/night-hand-skin174.png",
        ΔⵠΔⵠⵠⲆᐃ: "img/day-hand-skin175.png",
        ΔⵠⵠΔΔΔΔ: "img/night-hand-skin175.png",
        ᐃⲆΔΔⲆᐃᐃ: "img/day-hand-skin176.png",
        ᐃΔⲆⲆⵠΔΔ: "img/night-hand-skin176.png",
        ⵠᐃⵠᐃᐃᐃΔ: "img/day-hand-skin177.png",
        ΔᐃⵠᐃΔⵠⲆ: "img/night-hand-skin177.png",
        ⵠⲆΔΔⲆⲆᐃ: "img/day-hand-skin178.png",
        ⵠⵠⲆᐃᐃⲆⲆ: "img/night-hand-skin178.png",
        ⲆⲆⲆᐃⵠⲆⵠ: "img/day-hand-skin179.png",
        ⲆΔΔΔⵠⵠΔ: "img/night-hand-skin179.png",
        ΔⲆⵠᐃΔⲆⵠ: "img/day-hand-skin180.png",
        ᐃᐃᐃΔΔⵠΔ: "img/night-hand-skin180.png",
        ΔᐃΔᐃΔⲆΔ: "img/day-hand-skin181.png",
        ᐃⵠᐃΔΔⵠᐃ: "img/night-hand-skin181.png",
        ⵠᐃᐃⵠᐃᐃⵠ: "img/day-hand-skin182.png",
        ᐃᐃⵠⵠⵠⲆΔ: "img/night-hand-skin182.png",
        ΔᐃⵠᐃⲆᐃΔ: "img/day-hand-skin183.png",
        ⵠⵠⲆⲆΔΔⵠ: "img/night-hand-skin183.png",
        ⲆⵠΔⵠⲆⲆΔ: "img/day-hand-skin184.png",
        ⵠⲆΔⵠⵠᐃᐃ: "img/night-hand-skin184.png",
        ⲆⲆᐃⵠⵠΔⲆ: "img/day-hand-skin185.png",
        ⵠΔΔⵠΔⵠᐃ: "img/night-hand-skin185.png",
        ⲆΔⲆΔⵠᐃⲆ: "img/day-hand-skin186.png",
        ᐃΔᐃⵠᐃⵠⲆ: "img/night-hand-skin186.png",
        ΔΔⲆΔᐃⵠΔ: "img/day-hand-skin187.png",
        ᐃⲆΔⲆΔΔᐃ: "img/night-hand-skin187.png",
        ⵠⵠᐃⲆΔΔΔ: "img/day-hand-skin188.png",
        ΔⵠΔⵠᐃⵠΔ: "img/night-hand-skin188.png",
        ᐃⵠⲆⲆᐃΔⲆ: "img/day-hand-skin189.png",
        ⲆⲆⲆⲆΔΔⵠ: "img/night-hand-skin189.png",
        ᐃⵠⵠⲆΔⵠⲆ: "img/day-hand-skin190.png",
        ᐃᐃΔⲆᐃⵠᐃ: "img/night-hand-skin190.png",
        ⵠΔⵠⲆⵠᐃΔ: "img/day-hand-skin191.png",
        ⵠΔΔΔᐃⵠⵠ: "img/night-hand-skin191.png",
        ΔⲆⲆⲆⵠⲆⲆ: "img/day-hand-skin192.png",
        ᐃⵠΔⲆᐃⲆᐃ: "img/night-hand-skin192.png",
        ⲆᐃⲆⵠⲆᐃᐃ: "img/day-hand-skin193.png",
        ⵠⲆⵠᐃᐃⲆⲆ: "img/night-hand-skin193.png",
        ⲆΔΔⵠΔⵠⲆ: "img/day-hand-skin194.png",
        ⵠⲆⵠⲆⵠⵠΔ: "img/night-hand-skin194.png",
        ΔⲆⲆΔⲆⲆⲆ: "img/day-hand-skin195.png",
        ⵠⵠΔΔⲆᐃⵠ: "img/night-hand-skin195.png",
        ⵠⲆⲆⲆⵠΔⲆ: "img/day-hand-skin196.png",
        ΔΔⵠⵠΔᐃᐃ: "img/night-hand-skin196.png",
        ⲆᐃⵠⲆⲆⵠⲆ: "img/day-hand-skin197.png",
        ⲆⲆΔⲆⵠⲆⵠ: "img/night-hand-skin197.png",
        ᐃⲆᐃⵠΔⲆⲆ: "img/day-hand-skin198.png",
        ᐃΔᐃⲆⲆΔⵠ: "img/night-hand-skin198.png",
        ⵠᐃⲆⵠⲆᐃᐃ: "img/day-hand-skin199.png",
        ⵠᐃⲆᐃⵠΔᐃ: "img/night-hand-skin199.png",
        ΔⲆᐃⲆΔⵠΔ: "img/day-hand-skin200.png",
        ΔᐃⲆΔΔᐃᐃ: "img/night-hand-skin200.png",
        ΔᐃⵠᐃᐃᐃΔ: "img/day-hand-skin201.png",
        ⵠⵠΔⵠⵠⵠⲆ: "img/night-hand-skin201.png",
        ⵠⵠⵠⲆΔΔⲆ: "img/day-hand-skin202.png",
        ᐃⲆΔⲆΔⲆⵠ: "img/night-hand-skin202.png",
        Ⲇᐃⵠᐃⵠᐃⵠ: "img/day-hand-skin203.png",
        ᐃΔΔⲆΔⵠΔ: "img/night-hand-skin203.png",
        ⲆᐃΔⵠⲆⵠΔ: "img/day-hand-skin204.png",
        ΔᐃⵠⲆΔΔΔ: "img/night-hand-skin204.png",
        ⵠᐃⵠⵠΔⲆᐃ: "img/day-hand-skin205.png",
        ⲆᐃⲆΔⲆⵠᐃ: "img/night-hand-skin205.png",
        ⲆⲆΔᐃⲆⲆⲆ: "img/day-hand-skin206.png",
        ⲆΔⵠᐃΔΔⵠ: "img/night-hand-skin206.png",
        ΔᐃᐃᐃⲆⵠⲆ: "img/day-hand-skin207.png",
        ΔΔⲆΔⵠⲆᐃ: "img/night-hand-skin207.png",
        ᐃⵠᐃⵠᐃⲆΔ: "img/day-hand-skin208.png",
        ᐃΔΔⲆᐃᐃᐃ: "img/night-hand-skin208.png",
        ᐃⲆΔΔⵠⲆⵠ: "img/day-hand-skin209.png",
        ᐃΔⲆⵠⵠΔⲆ: "img/night-hand-skin209.png",
        ⲆᐃⲆⵠⵠΔⲆ: "img/day-hand-skin210.png",
        ⲆⵠᐃᐃᐃΔΔ: "img/night-hand-skin210.png",
        ᐃΔᐃⲆᐃΔᐃ: "img/day-hand-skin211.png",
        ⵠⲆᐃΔΔⲆⵠ: "img/night-hand-skin211.png",
        ⵠⲆⲆᐃⵠⵠᐃ: "img/day-hand-skin212.png",
        ⲆᐃⲆᐃⲆᐃᐃ: "img/night-hand-skin212.png",
        ᐃᐃⵠᐃⲆⵠΔ: "img/day-bag-star0.png",
        ⲆᐃⲆⵠⵠΔᐃ: "img/night-bag-star0.png",
        ⲆⵠⵠⲆⲆᐃᐃ: "img/day-bag0.png",
        ΔᐃᐃⵠⲆⲆⲆ: "img/night-bag0.png",
        ΔⲆⵠⲆᐃⵠΔ: "img/day-bag1.png",
        ᐃΔⲆⲆΔΔᐃ: "img/night-bag1.png",
        ᐃⵠΔΔΔⵠⵠ: "img/day-bag2.png",
        ΔᐃΔΔⲆⵠⵠ: "img/night-bag2.png",
        ᐃⲆⲆΔᐃⵠᐃ: "img/day-bag3.png",
        ᐃⵠⵠΔⵠᐃΔ: "img/night-bag3.png",
        ΔⲆΔⵠⲆⵠᐃ: "img/day-bag4.png",
        ᐃᐃⲆⵠΔᐃⵠ: "img/night-bag4.png",
        ⵠⲆⵠⲆⵠᐃⵠ: "img/day-bag5.png",
        ⵠⲆⲆΔΔⵠΔ: "img/night-bag5.png",
        ⵠⵠΔⵠⵠᐃᐃ: "img/day-bag6.png",
        ᐃⵠΔⲆⵠⲆᐃ: "img/night-bag6.png",
        ⲆⵠⵠⵠⵠⲆⵠ: "img/day-bag7.png",
        ⲆⵠᐃΔᐃⲆΔ: "img/night-bag7.png",
        ⵠⲆⲆΔⲆΔⲆ: "img/day-bag8.png",
        ΔⲆΔⵠᐃΔⵠ: "img/night-bag8.png",
        ⵠⲆΔⵠⲆⵠⲆ: "img/day-bag9.png",
        ᐃⵠΔᐃΔΔΔ: "img/night-bag9.png",
        ΔⵠΔᐃΔᐃⵠ: "img/day-bag10.png",
        ⵠⵠⲆΔⵠΔⵠ: "img/night-bag10.png",
        ᐃⵠⵠΔΔⵠΔ: "img/day-bag11.png",
        ᐃⲆΔᐃⲆⵠⲆ: "img/night-bag11.png",
        ᐃⵠᐃᐃⵠΔᐃ: "img/day-bag13.png",
        ᐃΔᐃⲆᐃΔΔ: "img/night-bag13.png",
        ⵠΔᐃΔΔΔⵠ: "img/day-bag14.png",
        ⵠᐃⵠⵠΔΔᐃ: "img/night-bag14.png",
        ⲆⲆᐃⲆⵠⲆᐃ: "img/day-bag16.png",
        ΔΔᐃⲆᐃⵠΔ: "img/night-bag16.png",
        ⲆᐃⲆᐃⵠⲆᐃ: "img/day-bag17.png",
        ᐃᐃᐃᐃⵠΔΔ: "img/night-bag17.png",
        ⲆⲆⲆⵠΔⵠᐃ: "img/day-bag18.png",
        ⲆᐃᐃΔⲆΔᐃ: "img/night-bag18.png",
        ⲆⲆⵠᐃᐃΔⵠ: "img/day-bag19.png",
        ⵠΔΔΔⲆΔⲆ: "img/night-bag19.png",
        ⲆᐃⲆⲆⲆⵠᐃ: "img/day-bag20.png",
        ᐃᐃΔΔⵠⲆᐃ: "img/night-bag20.png",
        ΔⲆⲆΔⵠᐃⲆ: "img/day-bag21.png",
        ⵠⲆⵠᐃⲆΔⲆ: "img/night-bag21.png",
        ⲆᐃⵠΔΔⲆⲆ: "img/day-bag22.png",
        ᐃᐃΔⲆⵠᐃᐃ: "img/night-bag22.png",
        ⲆΔⲆΔΔΔⲆ: "img/day-bag23.png",
        ΔⵠⵠⲆΔⲆᐃ: "img/night-bag23.png",
        ⵠⵠⲆⵠᐃⵠΔ: "img/day-bag24.png",
        ᐃⲆⵠᐃᐃⵠΔ: "img/night-bag24.png",
        ⲆΔΔΔᐃⲆⵠ: "img/day-bag25.png",
        ᐃⵠΔΔΔᐃΔ: "img/night-bag25.png",
        ⲆᐃⵠⲆΔⵠⲆ: "img/day-bag26.png",
        ⲆⲆⵠᐃΔⲆᐃ: "img/night-bag26.png",
        ΔᐃΔᐃⲆⵠⵠ: "img/day-bag27.png",
        ᐃⲆⵠⲆⲆᐃⵠ: "img/night-bag27.png",
        ᐃⲆΔⵠᐃⵠⲆ: "img/day-bag28.png",
        ΔΔⲆΔⲆⲆᐃ: "img/night-bag28.png",
        ⲆΔΔᐃΔⲆⲆ: "img/day-bag29.png",
        ⲆⵠΔᐃⵠⵠΔ: "img/night-bag29.png",
        ⵠΔΔΔΔᐃᐃ: "img/day-bag30.png",
        ⲆΔⲆⲆⵠⲆᐃ: "img/night-bag30.png",
        ⲆᐃΔΔⵠΔΔ: "img/day-bag31.png",
        ⵠᐃΔⲆⲆᐃⵠ: "img/night-bag31.png",
        ⵠᐃΔΔⲆⵠΔ: "img/day-bag32.png",
        ΔⵠᐃⵠᐃⲆΔ: "img/night-bag32.png",
        ᐃⲆⵠΔΔᐃⵠ: "img/day-bag33.png",
        ΔᐃⵠΔᐃᐃⵠ: "img/night-bag33.png",
        ⲆΔⲆⲆⵠⲆⲆ: "img/day-bag34.png",
        ⲆᐃⲆᐃⵠⵠⲆ: "img/night-bag34.png",
        ᐃⲆⲆⲆⲆⲆᐃ: "img/day-bag35.png",
        ⲆⲆⵠᐃⲆᐃᐃ: "img/night-bag35.png",
        ⵠⵠᐃⵠᐃᐃᐃ: "img/day-bag36.png",
        ⵠⵠΔΔΔⲆⵠ: "img/night-bag36.png",
        ΔⲆΔΔᐃᐃⵠ: "img/day-bag37.png",
        ⲆᐃⵠΔⲆⵠΔ: "img/night-bag37.png",
        ⵠⵠᐃⵠⵠΔᐃ: "img/day-bag38.png",
        ⵠᐃⵠᐃⵠΔⲆ: "img/night-bag38.png",
        ΔⲆⵠⵠᐃⵠⲆ: "img/day-bag39.png",
        ⲆΔᐃΔᐃⲆⵠ: "img/night-bag39.png",
        ΔⲆⲆⲆΔⲆⲆ: "img/day-bag40.png",
        ΔΔΔⲆⲆᐃⲆ: "img/night-bag40.png",
        ᐃⵠⵠΔⵠΔΔ: "img/day-bag41.png",
        ΔᐃⵠⲆⵠⲆⲆ: "img/night-bag41.png",
        ᐃᐃⲆⲆⵠⵠΔ: "img/day-bag42.png",
        ΔᐃᐃⲆᐃΔⲆ: "img/night-bag42.png",
        ΔⵠⲆᐃᐃᐃᐃ: "img/day-bag43.png",
        ⵠⲆΔΔⲆⲆⵠ: "img/night-bag43.png",
        ΔΔⵠᐃⵠⵠⲆ: "img/day-bag44.png",
        ΔⲆⵠᐃⲆⲆⵠ: "img/night-bag44.png",
        ⲆⲆᐃⵠᐃᐃᐃ: "img/day-bag45.png",
        ⵠᐃⵠⲆΔⵠⵠ: "img/night-bag45.png",
        ⵠⵠΔⵠⵠⲆⲆ: "img/day-bag46.png",
        ⲆᐃⲆᐃⲆⵠⵠ: "img/night-bag46.png",
        ⵠᐃᐃⵠⲆᐃΔ: "img/day-bag47.png",
        ⲆᐃⲆᐃⲆΔⲆ: "img/night-bag47.png",
        ΔᐃⲆⲆⲆΔᐃ: "img/day-bag48.png",
        ⲆΔᐃᐃᐃⵠⲆ: "img/night-bag48.png",
        ΔᐃⵠⵠᐃΔⵠ: "img/day-bag49.png",
        ΔⲆᐃΔᐃᐃΔ: "img/night-bag49.png",
        ᐃⲆΔΔᐃᐃᐃ: "img/day-bag50.png",
        ΔᐃΔⵠⵠᐃⵠ: "img/night-bag50.png",
        ΔᐃᐃᐃΔⵠⵠ: "img/day-bag51.png",
        ΔᐃⲆⲆⵠⲆⲆ: "img/night-bag51.png",
        ΔⵠⲆᐃᐃⵠⲆ: "img/day-bag52.png",
        ᐃⲆᐃⵠⵠⲆΔ: "img/night-bag52.png",
        ΔⲆᐃⵠᐃⲆΔ: "img/day-bag53.png",
        ⵠⵠⲆⲆᐃΔⲆ: "img/night-bag53.png",
        ⵠᐃΔⲆⵠΔⲆ: "img/day-bag54.png",
        ⲆⵠᐃᐃΔᐃⵠ: "img/night-bag54.png",
        ᐃⲆⵠᐃⵠᐃⲆ: "img/day-bag55.png",
        ⲆⵠⵠⲆⲆⲆᐃ: "img/night-bag55.png",
        ΔΔΔⲆᐃΔᐃ: "img/day-bag56.png",
        ⲆⵠᐃΔⵠⵠᐃ: "img/night-bag56.png",
        ΔΔΔⲆⲆⵠⲆ: "img/day-bag57.png",
        ᐃΔⵠΔΔⲆⲆ: "img/night-bag57.png",
        ΔⵠᐃⲆⲆᐃⵠ: "img/day-bag58.png",
        ⵠⵠᐃᐃⲆᐃⵠ: "img/night-bag58.png",
        ᐃⲆᐃⵠΔⵠⲆ: "img/day-bag59.png",
        ⲆⲆⵠΔⲆΔΔ: "img/night-bag59.png",
        ⲆΔᐃᐃΔⵠᐃ: "img/day-bag60.png",
        ⲆᐃⵠᐃⲆⵠⵠ: "img/night-bag60.png",
        ⲆΔΔᐃⲆᐃⲆ: "img/day-bag61.png",
        ᐃⲆⵠΔΔⵠⲆ: "img/night-bag61.png",
        ΔⲆⲆΔᐃᐃⲆ: "img/day-bag62.png",
        ⵠᐃⲆᐃΔΔⲆ: "img/night-bag62.png",
        ⵠⵠⵠᐃΔⲆⲆ: "img/day-bag63.png",
        ⵠΔΔⲆΔⵠⲆ: "img/night-bag63.png",
        ᐃᐃⲆᐃΔⲆΔ: "img/day-bag64.png",
        ⵠΔⵠΔᐃⵠΔ: "img/night-bag64.png",
        ΔⵠⵠᐃⲆΔⵠ: "img/day-bag65.png",
        ⵠᐃΔᐃᐃᐃⵠ: "img/night-bag65.png",
        ⵠⵠⵠⲆⲆΔΔ: "img/day-bag66.png",
        ⲆⵠᐃⲆⲆΔΔ: "img/night-bag66.png",
        ⵠΔΔΔᐃᐃⲆ: "img/day-bag67.png",
        ᐃᐃⵠᐃⲆⲆⵠ: "img/night-bag67.png",
        ᐃᐃΔΔᐃⲆⵠ: "img/day-bag68.png",
        ⵠⵠⲆᐃΔⲆⲆ: "img/night-bag68.png",
        ⲆᐃᐃⲆⲆᐃⵠ: "img/day-bag69.png",
        ⵠᐃΔⵠΔΔΔ: "img/night-bag69.png",
        ᐃᐃⲆᐃᐃᐃᐃ: "img/day-bag70.png",
        ᐃⲆᐃΔⵠⲆᐃ: "img/night-bag70.png",
        ᐃᐃΔⵠⵠΔΔ: "img/day-bag71.png",
        ⲆⵠΔⲆⲆⵠᐃ: "img/night-bag71.png",
        ⵠⲆⲆΔⲆΔⵠ: "img/day-bag72.png",
        ΔⲆᐃⲆᐃⲆᐃ: "img/night-bag72.png",
        ⲆΔⲆᐃⲆᐃᐃ: "img/day-bag73.png",
        ⲆⲆᐃⵠΔΔΔ: "img/night-bag73.png",
        ⲆΔⵠⵠΔⲆⲆ: "img/day-bag74.png",
        ⵠΔⲆΔⲆⵠΔ: "img/night-bag74.png",
        ΔᐃⲆⲆⵠⵠᐃ: "img/day-bag75.png",
        ᐃⵠⲆⲆᐃⵠᐃ: "img/night-bag75.png",
        ᐃⵠΔⲆᐃᐃⵠ: "img/day-bag76.png",
        ⲆⲆⵠⲆᐃΔⲆ: "img/night-bag76.png",
        ΔΔΔᐃᐃᐃⲆ: "img/day-bag77.png",
        ᐃΔⲆⵠⲆⲆⲆ: "img/night-bag77.png",
        ΔᐃΔⵠΔΔΔ: "img/day-bag78.png",
        ⵠⵠⵠΔⵠⲆⵠ: "img/night-bag78.png",
        ⲆⲆᐃⲆΔΔⲆ: "img/day-bag79.png",
        ᐃⲆⲆᐃⲆⲆⲆ: "img/night-bag79.png",
        ⲆΔⵠᐃⵠΔΔ: "img/day-bag80.png",
        ᐃⵠⵠⵠⲆⵠⲆ: "img/night-bag80.png",
        ΔΔΔᐃᐃᐃⵠ: "img/day-accessory0.png",
        ⵠⵠΔⲆΔᐃⲆ: "img/day-accessory0-pacques.png",
        ΔᐃᐃΔΔΔᐃ: "img/night-accessory0-pacques.png",
        ⲆⵠⲆᐃⵠᐃᐃ: "img/day-accessory13.png",
        ΔⲆⵠᐃΔΔⵠ: "img/night-accessory13.png",
        ᐃᐃⵠᐃᐃⵠⲆ: "img/day-accessory14.png",
        ⲆⲆⲆΔⲆⲆⲆ: "img/night-accessory14.png",
        ΔΔⲆⵠⲆⵠΔ: "img/day-accessory15.png",
        ΔᐃᐃⲆⲆⵠᐃ: "img/night-accessory15.png",
        ⲆⲆⵠⵠᐃᐃⲆ: "img/day-accessory16.png",
        ΔⵠⵠⲆⲆⲆᐃ: "img/night-accessory16.png",
        ΔⵠᐃⵠΔⵠΔ: "img/day-accessory17.png",
        ΔⲆᐃⲆⲆⲆΔ: "img/day-accessory17.png",
        ⵠⵠΔᐃΔᐃᐃ: "img/day-accessory19.png",
        ΔΔΔᐃᐃⲆΔ: "img/night-accessory19.png",
        ⵠⲆᐃΔΔⲆᐃ: "img/day-accessory20.png",
        ᐃⲆᐃⲆⵠΔΔ: "img/night-accessory20.png",
        ⲆᐃⲆᐃⵠⲆⲆ: "img/day-accessory21.png",
        ΔⵠⵠᐃᐃΔⲆ: "img/night-accessory21.png",
        ⵠΔΔⲆⵠⵠⲆ: "img/day-accessory22.png",
        ⲆⲆΔΔΔᐃΔ: "img/night-accessory22.png",
        ⵠᐃΔⲆΔⲆᐃ: "img/day-accessory23.png",
        ⲆΔΔⵠⲆΔᐃ: "img/night-accessory23.png",
        ᐃⲆΔΔΔᐃΔ: "img/day-accessory24.png",
        ⲆⵠᐃΔⲆᐃⲆ: "img/night-accessory24.png",
        Δⵠⵠⵠⵠᐃᐃ: "img/day-accessory25.png",
        ΔⵠⲆⵠᐃⵠᐃ: "img/night-accessory25.png",
        ⲆⲆΔΔⲆⵠⵠ: "img/day-accessory26.png",
        ⵠᐃⵠᐃⵠⲆΔ: "img/night-accessory26.png",
        ⵠⵠᐃΔⲆᐃⲆ: "img/day-accessory27.png",
        ΔᐃΔΔᐃⲆΔ: "img/night-accessory27.png",
        ⵠⵠⵠΔᐃΔᐃ: "img/day-accessory18.png",
        ⲆᐃᐃⵠᐃΔΔ: "img/night-accessory18.png",
        ᐃᐃᐃⲆᐃⲆᐃ: "img/day-accessory29.png",
        ⲆΔⵠΔΔᐃⵠ: "img/night-accessory29.png",
        ΔΔⵠᐃᐃⲆᐃ: "img/day-accessory30.png",
        ΔΔⵠΔΔⲆᐃ: "img/night-accessory30.png",
        ⵠΔⵠΔᐃᐃⵠ: "img/day-accessory31.png",
        ⲆⲆΔΔᐃⲆᐃ: "img/night-accessory31.png",
        ΔΔΔⲆᐃᐃᐃ: "img/day-accessory32.png",
        ᐃⵠΔⲆⲆⵠⵠ: "img/night-accessory32.png",
        ⵠⲆⵠΔᐃⵠΔ: "img/day-accessory33.png",
        ⵠⵠⵠⲆᐃᐃΔ: "img/night-accessory33.png",
        ᐃⲆⲆⲆᐃᐃᐃ: "img/day-accessory34.png",
        ⲆᐃΔⵠⲆⲆⲆ: "img/night-accessory34.png",
        ⲆⲆⵠΔⲆᐃⲆ: "img/day-accessory35.png",
        ⲆᐃΔᐃⲆⵠΔ: "img/night-accessory35.png",
        ⲆᐃⲆΔⲆⲆⵠ: "img/day-accessory28.png",
        ᐃᐃⲆⲆⲆΔⲆ: "img/night-accessory28.png",
        ⲆΔⲆΔⵠΔᐃ: "img/day-accessory36.png",
        ⲆⵠⵠᐃⲆΔⲆ: "img/night-accessory36.png",
        ᐃᐃΔΔⲆΔᐃ: "img/day-accessory37.png",
        ⵠⲆΔᐃᐃΔⲆ: "img/night-accessory37.png",
        ⲆⲆⲆΔᐃΔⲆ: "img/day-accessory39.png",
        ⵠⲆᐃⲆΔΔᐃ: "img/night-accessory39.png",
        ⵠᐃᐃⵠⲆⵠⵠ: "img/day-accessory40.png",
        ⲆⵠⲆᐃᐃᐃⲆ: "img/night-accessory40.png",
        ⲆΔⵠΔΔⵠᐃ: "img/day-accessory41.png",
        ⲆᐃⲆΔᐃΔⲆ: "img/night-accessory41.png",
        ⵠⵠⲆᐃⵠⵠᐃ: "img/day-accessory42.png",
        ⵠⵠᐃᐃᐃⵠΔ: "img/night-accessory42.png",
        ΔⵠΔⲆΔΔⲆ: "img/day-accessory43.png",
        ᐃΔᐃⲆΔᐃᐃ: "img/night-accessory43.png",
        ᐃΔⲆᐃᐃΔⵠ: "img/day-accessory44.png",
        ⲆⵠⵠΔΔᐃΔ: "img/night-accessory44.png",
        ᐃⵠⲆⲆⵠⲆⲆ: "img/day-accessory38.png",
        ⵠᐃΔᐃΔΔΔ: "img/night-accessory38.png",
        ᐃⵠⲆⵠⲆⲆᐃ: "img/day-accessory46.png",
        ⲆⲆᐃⲆΔⲆΔ: "img/night-accessory46.png",
        ⵠΔᐃⲆⵠⲆΔ: "img/day-accessory47.png",
        ⲆᐃΔᐃⵠᐃⲆ: "img/night-accessory47.png",
        ΔΔⲆᐃⵠᐃⵠ: "img/day-accessory48.png",
        ⵠᐃⲆⵠᐃΔⲆ: "img/night-accessory48.png",
        ⲆΔⲆᐃⲆⲆᐃ: "img/day-accessory49.png",
        ⲆⵠᐃΔⵠΔⵠ: "img/night-accessory49.png",
        ⲆᐃⲆⲆⲆΔⵠ: "img/day-accessory45.png",
        ᐃⵠⵠⲆⵠⵠΔ: "img/night-accessory45.png",
        ΔΔΔⲆΔΔΔ: "img/day-accessory50.png",
        ⲆⵠΔⲆⲆⵠⵠ: "img/night-accessory50.png",
        ΔⵠⵠᐃᐃᐃⲆ: "img/day-accessory51.png",
        ΔΔᐃᐃⲆⲆⵠ: "img/night-accessory51.png",
        ⵠⵠΔΔⵠⵠᐃ: "img/day-accessory52.png",
        ⵠᐃⵠⲆᐃΔⵠ: "img/night-accessory52.png",
        ⲆⵠᐃᐃⲆΔΔ: "img/day-accessory53.png",
        ⲆⲆᐃΔⵠⲆΔ: "img/night-accessory53.png",
        ⲆⲆΔᐃᐃΔⵠ: "img/day-accessory54.png",
        ᐃΔⲆΔⲆⵠⵠ: "img/night-accessory54.png",
        ⲆᐃⲆᐃⲆΔΔ: "img/day-accessory55.png",
        ⵠᐃⲆᐃΔⵠⵠ: "img/night-accessory55.png",
        ΔᐃⵠᐃΔⵠΔ: "img/day-accessory56.png",
        ⵠΔⲆⵠⵠΔΔ: "img/night-accessory56.png",
        ᐃⲆⵠⵠⲆⵠⵠ: "img/day-accessory57.png",
        ⲆΔΔΔⵠⲆᐃ: "img/night-accessory57.png",
        ⲆᐃΔⲆΔΔᐃ: "img/day-accessory58.png",
        ⵠⵠᐃᐃΔⲆⵠ: "img/night-accessory58.png",
        ⲆᐃΔⲆᐃΔᐃ: "img/day-accessory59.png",
        ⵠΔⵠⵠᐃᐃⲆ: "img/night-accessory59.png",
        ⵠᐃⲆⲆⵠᐃⵠ: "img/day-accessory60.png",
        ΔᐃᐃⵠᐃⵠⲆ: "img/night-accessory60.png",
        ⵠⲆΔΔⵠⵠᐃ: "img/day-accessory61.png",
        ⲆᐃⲆᐃᐃᐃᐃ: "img/night-accessory61.png",
        ᐃΔΔⵠⵠᐃⲆ: "img/day-accessory62.png",
        ΔᐃⵠⵠᐃⵠΔ: "img/night-accessory62.png",
        ΔⵠⲆⲆⲆⲆⵠ: "img/day-accessory63.png",
        ΔⵠΔⲆᐃⵠⲆ: "img/night-accessory63.png",
        ⲆⵠⵠᐃΔΔᐃ: "img/day-accessory64.png",
        ΔᐃΔΔⲆΔΔ: "img/night-accessory64.png",
        ⲆᐃΔⵠⵠΔⲆ: "img/day-accessory65.png",
        ⵠⲆⵠⲆΔᐃⵠ: "img/night-accessory65.png",
        ᐃΔΔΔⵠᐃⲆ: "img/day-accessory66.png",
        ⵠΔᐃⵠⵠᐃⵠ: "img/night-accessory66.png",
        ᐃᐃⵠᐃΔⵠᐃ: "img/day-accessory67.png",
        ⵠⵠΔᐃⵠΔΔ: "img/night-accessory67.png",
        ᐃⲆⲆⵠᐃⲆⵠ: "img/day-accessory68.png",
        ⵠΔᐃΔⲆⵠΔ: "img/night-accessory68.png",
        ΔᐃⲆⵠᐃⲆⲆ: "img/day-accessory69.png",
        ΔⵠᐃᐃΔⲆᐃ: "img/night-accessory69.png",
        ᐃⲆᐃⵠΔᐃΔ: "img/day-accessory70.png",
        ⵠᐃᐃⵠΔⲆⵠ: "img/night-accessory70.png",
        ᐃⵠⵠΔⵠᐃⵠ: "img/day-accessory71.png",
        ΔΔΔⵠΔΔⲆ: "img/night-accessory71.png",
        ⲆᐃΔΔᐃΔⵠ: "img/day-accessory72.png",
        ᐃⵠᐃⲆᐃⵠᐃ: "img/night-accessory72.png",
        ⵠΔⵠⲆᐃⲆⲆ: "img/day-accessory73.png",
        ⵠⵠᐃⵠΔⲆⲆ: "img/night-accessory73.png",
        ⵠΔΔΔΔⵠΔ: "img/day-accessory74.png",
        ⵠᐃΔⲆⵠⵠⵠ: "img/night-accessory74.png",
        ᐃⲆΔⲆⲆΔᐃ: "img/day-accessory75.png",
        ΔⲆΔⵠⲆΔⲆ: "img/night-accessory75.png",
        ⵠⲆᐃΔⵠᐃΔ: "img/day-accessory76.png",
        ⵠᐃΔⲆⲆⵠᐃ: "img/night-accessory76.png",
        ⲆⲆΔⲆⵠⲆΔ: "img/day-accessory77.png",
        ΔⵠΔⵠⵠⵠᐃ: "img/night-accessory77.png",
        ᐃⵠⵠⲆᐃᐃⵠ: "img/day-accessory78.png",
        ⵠⲆⵠⲆᐃᐃⵠ: "img/night-accessory78.png",
        ⲆΔᐃⲆΔⲆᐃ: "img/day-accessory79.png",
        ᐃⲆΔⵠᐃⲆⵠ: "img/night-accessory79.png",
        ⲆᐃᐃΔΔⲆΔ: "img/day-accessory80.png",
        ΔⵠⲆΔⲆᐃⵠ: "img/night-accessory80.png",
        ᐃⲆⵠᐃᐃⵠᐃ: "img/day-accessory81.png",
        ΔᐃⲆⵠᐃᐃᐃ: "img/night-accessory81.png",
        ΔΔⵠⵠᐃⲆΔ: "img/day-accessory83.png",
        ᐃⵠⵠⵠⵠⲆⵠ: "img/night-accessory83.png",
        ⲆᐃΔⲆⵠⵠⲆ: "img/day-accessory84.png",
        ΔΔⲆⲆⵠⵠⵠ: "img/night-accessory84.png",
        ΔΔΔⵠⵠᐃᐃ: "img/day-accessory85.png",
        ΔᐃⵠⲆⵠΔᐃ: "img/night-accessory85.png",
        ⲆⵠΔⲆⲆⵠΔ: "img/day-accessory86.png",
        ᐃΔⲆΔⵠΔⲆ: "img/night-accessory86.png",
        ⲆᐃΔΔⲆΔⵠ: "img/day-accessory87.png",
        ᐃᐃΔΔᐃΔⵠ: "img/night-accessory87.png",
        ᐃⲆⵠⵠΔⲆⵠ: "img/day-accessory88.png",
        ⵠᐃⲆⲆᐃΔᐃ: "img/night-accessory88.png",
        ⵠⵠⲆᐃⲆᐃΔ: "img/day-accessory89.png",
        ᐃⲆᐃⲆⵠᐃⵠ: "img/night-accessory89.png",
        ⲆⲆᐃᐃⲆⲆΔ: "img/day-accessory90.png",
        ΔᐃᐃⵠⵠⵠⲆ: "img/night-accessory90.png",
        ᐃⲆᐃᐃⲆᐃΔ: "img/day-accessory91.png",
        ᐃΔⲆᐃⵠᐃᐃ: "img/night-accessory91.png",
        ⵠᐃᐃⲆΔΔⵠ: "img/day-accessory92.png",
        ΔΔⵠᐃⵠΔΔ: "img/night-accessory92.png",
        ⲆⵠⲆⲆⵠᐃΔ: "img/day-accessory93.png",
        ᐃᐃⵠΔᐃᐃΔ: "img/night-accessory93.png",
        ᐃⵠᐃⲆⲆⵠⵠ: "img/day-accessory94.png",
        ᐃΔⵠᐃⲆᐃΔ: "img/night-accessory94.png",
        ⲆᐃⲆᐃⵠᐃΔ: "img/day-accessory95.png",
        ᐃᐃⵠⲆⵠⵠⲆ: "img/night-accessory95.png",
        ⲆᐃⲆΔⲆⵠⵠ: "img/day-accessory96.png",
        ⲆⵠⲆⲆΔΔᐃ: "img/night-accessory96.png",
        ᐃⲆΔΔᐃᐃΔ: "img/day-accessory97.png",
        ᐃΔⲆⵠᐃᐃΔ: "img/night-accessory97.png",
        ⲆᐃᐃᐃⲆᐃΔ: "img/day-accessory98.png",
        ᐃᐃⲆⵠⵠΔⲆ: "img/night-accessory98.png",
        ᐃᐃΔⵠᐃⵠⲆ: "img/day-accessory99.png",
        ⵠΔⵠⲆⲆᐃⲆ: "img/night-accessory99.png",
        ᐃΔᐃⲆⲆΔΔ: "img/day-accessory100.png",
        ⲆⵠᐃⲆⵠΔᐃ: "img/night-accessory100.png",
        ᐃᐃΔᐃΔΔΔ: "img/day-accessory101.png",
        ᐃⵠΔⵠⵠΔⵠ: "img/night-accessory101.png",
        ΔᐃΔΔⵠΔᐃ: "img/day-accessory102.png",
        ⲆⵠΔΔⵠⵠᐃ: "img/night-accessory102.png",
        ΔⲆⵠΔⵠⲆⵠ: "img/day-accessory103.png",
        ⵠⵠⵠᐃΔΔᐃ: "img/night-accessory103.png",
        ᐃⲆⵠⵠΔᐃⲆ: "img/day-accessory104.png",
        ⵠᐃᐃⵠΔᐃΔ: "img/night-accessory104.png",
        ⲆᐃⲆⵠⲆᐃⵠ: "img/day-accessory105.png",
        ᐃⲆⲆᐃⲆⲆΔ: "img/night-accessory105.png",
        ΔᐃΔΔⲆᐃΔⲆΔ: "img/day-accessory106.png",
        ⲆⲆΔⲆᐃΔᐃⲆΔ: "img/night-accessory106.png",
        ΔⲆⵠⵠᐃⲆΔⵠΔ: "img/day-accessory107.png",
        ᐃᐃⵠⵠᐃⲆⲆⲆᐃ: "img/night-accessory107.png",
        ⲆⲆΔΔⵠᐃᐃ: "img/day-accessory82.png",
        ⵠⵠᐃΔⵠᐃΔ: "img/night-accessory82.png",
        ΔⲆΔᐃⲆⵠⲆ: "img/day-book0.png",
        ΔⵠⲆᐃⵠΔⵠ: "img/night-book0.png",
        ⲆⵠⲆᐃᐃΔⲆ: "img/day-book1.png",
        ⵠⲆⲆⲆⵠΔᐃ: "img/night-book1.png",
        ᐃᐃⵠⵠⲆⵠᐃ: "img/day-book2.png",
        ⵠⵠᐃⲆⵠⲆⵠ: "img/night-book2.png",
        ⵠᐃⵠᐃⲆΔᐃ: "img/day-book3.png",
        ⲆⲆⵠΔⲆⵠᐃ: "img/night-book3.png",
        ⲆⵠⵠΔⵠᐃⲆ: "img/day-book4.png",
        ΔᐃᐃᐃⲆᐃⵠ: "img/night-book4.png",
        ᐃΔᐃᐃΔⵠⲆ: "img/day-book5.png",
        ᐃⲆⵠⲆᐃⵠⵠ: "img/night-book5.png",
        ⲆᐃΔⲆᐃⲆΔ: "img/day-book6.png",
        ᐃⵠᐃⵠᐃΔⲆ: "img/night-book6.png",
        ΔⲆᐃⵠⲆⲆⵠ: "img/day-book7.png",
        ΔᐃᐃⵠΔᐃⲆ: "img/night-book7.png",
        ΔᐃᐃΔᐃᐃⲆ: "img/day-book8.png",
        ⵠⵠⵠⲆⵠⲆᐃ: "img/night-book8.png",
        ΔⲆⲆᐃⵠⵠⲆ: "img/day-book9.png",
        ⵠⲆᐃⵠᐃⵠⲆ: "img/night-book9.png",
        ΔΔⵠΔⲆᐃⵠ: "img/day-book10.png",
        ⲆⵠⵠⵠⲆΔᐃ: "img/night-book10.png",
        ⲆᐃᐃᐃᐃΔᐃ: "img/day-book11.png",
        ⲆⵠᐃΔⲆⲆΔ: "img/night-book11.png",
        ⲆΔⵠᐃΔᐃⲆ: "img/day-book12.png",
        ⲆⵠᐃᐃⵠᐃΔ: "img/night-book12.png",
        ΔΔⵠᐃΔⵠᐃ: "img/day-book13.png",
        ⵠᐃΔΔᐃⵠⲆ: "img/night-book13.png",
        ΔⲆΔᐃⲆᐃΔ: "img/day-book14.png",
        ᐃΔΔⲆᐃΔⲆ: "img/night-book14.png",
        ⵠⲆΔᐃΔⵠⲆ: "img/day-book15.png",
        ⵠⵠΔᐃΔⵠⵠ: "img/night-book15.png",
        ᐃⲆⲆᐃⲆⵠᐃ: "img/day-book16.png",
        ΔΔⲆⲆⲆᐃΔ: "img/night-book16.png",
        ⵠΔᐃⵠᐃⲆᐃ: "img/day-book17.png",
        ⵠᐃⵠΔᐃⲆⲆ: "img/night-book17.png",
        ⲆᐃⲆᐃⵠΔⵠ: "img/day-book18.png",
        ΔᐃⵠⲆⵠᐃⵠ: "img/night-book18.png",
        ᐃⵠᐃⵠΔΔⵠ: "img/day-book19.png",
        ⵠⲆᐃⲆⲆⵠΔ: "img/night-book19.png",
        ΔⲆⲆᐃⵠΔΔ: "img/day-book20.png",
        ΔⲆⵠΔⲆⵠΔ: "img/night-book20.png",
        ᐃⲆΔΔⵠⲆᐃ: "img/day-book21.png",
        ΔⵠⲆⲆᐃⵠᐃ: "img/night-book21.png",
        ⵠΔⵠΔΔⲆⲆ: "img/day-book22.png",
        ᐃᐃⵠⲆΔⵠΔ: "img/night-book22.png",
        ΔᐃⲆᐃⲆⵠⲆ: "img/day-book23.png",
        ⲆᐃⵠⵠⵠⲆⲆ: "img/night-book23.png",
        ᐃᐃⵠⲆⵠⲆⵠ: "img/day-book24.png",
        ⲆⲆⵠΔⵠⵠⲆ: "img/night-book24.png",
        ⵠⵠᐃⲆⲆⲆⵠ: "img/day-book25.png",
        ⵠΔΔⵠⲆᐃᐃ: "img/night-book25.png",
        ⵠⵠⲆⲆᐃᐃᐃ: "img/day-book26.png",
        ΔⲆΔⵠⲆⵠⲆ: "img/night-book26.png",
        ⲆᐃⵠᐃⵠᐃⲆ: "img/day-book27.png",
        ΔΔⲆᐃⲆⵠᐃ: "img/night-book27.png",
        ⵠᐃⲆΔⵠΔᐃ: "img/day-book28.png",
        ΔⲆᐃⲆΔⵠⵠ: "img/night-book28.png",
        ⵠⲆⲆⲆⲆⲆΔ: "img/day-book29.png",
        ᐃⲆΔᐃΔᐃΔ: "img/night-book29.png",
        ᐃᐃΔΔⲆⵠΔ: "img/day-book30.png",
        ⲆⵠᐃⵠⲆⵠᐃ: "img/night-book30.png",
        ⵠᐃᐃⵠⲆⲆⵠ: "img/day-book31.png",
        ⵠΔⲆⵠΔⲆⵠ: "img/night-book31.png",
        ΔⵠᐃᐃⵠΔΔ: "img/day-book32.png",
        ⵠᐃᐃⲆᐃΔⵠ: "img/night-book32.png",
        ᐃⲆΔⲆΔⲆⲆ: "img/day-book33.png",
        Ⲇᐃⵠᐃⵠᐃᐃ: "img/night-book33.png",
        ᐃⲆⲆⲆⲆⲆⵠ: "img/day-book34.png",
        ΔⲆⵠⲆⵠⲆΔ: "img/night-book34.png",
        ⲆᐃⵠⵠⲆⲆᐃ: "img/day-book35.png",
        ᐃⵠΔⵠΔΔΔ: "img/night-book35.png",
        ⲆⵠΔⲆᐃⲆⲆ: "img/day-book36.png",
        ᐃⵠⲆᐃⵠⵠᐃ: "img/night-book36.png",
        ⲆΔⵠⲆⵠⲆᐃΔΔ: "img/day-book37.png",
        ᐃᐃΔⲆᐃⲆⲆⲆᐃ: "img/night-book37.png",
        ᐃⲆⵠⲆᐃⲆᐃ: "img/day-book38.png",
        ᐃᐃⲆⲆⲆⵠᐃ: "img/night-book38.png",
        ΔᐃᐃⵠΔᐃΔ: "img/day-book39.png",
        ΔⵠᐃᐃⲆᐃΔ: "img/night-book39.png",
        ᐃⲆⵠⵠᐃᐃΔ: "img/day-book40.png",
        ᐃΔᐃᐃⲆⵠᐃ: "img/night-book40.png",
        ⵠⵠΔⲆᐃⵠᐃ: "img/day-book41.png",
        ⲆᐃⵠⲆⲆΔⲆ: "img/night-book41.png",
        ⵠᐃᐃᐃᐃᐃΔ: "img/day-book42.png",
        ᐃᐃΔⵠⵠⵠⲆ: "img/night-book42.png",
        ⵠⵠⲆⲆⵠⵠⲆ: "img/day-book43.png",
        ᐃᐃΔⲆᐃⲆᐃ: "img/night-book43.png",
        ΔᐃⵠΔΔⵠΔ: "img/day-book44.png",
        ⲆΔΔΔⲆΔᐃ: "img/night-book44.png",
        ⵠⵠΔⲆᐃⵠⵠ: "img/day-book45.png",
        ⲆⲆᐃᐃⲆΔᐃ: "img/night-book45.png",
        ΔᐃΔⵠⵠⲆᐃ: "img/day-book46.png",
        ⲆⲆⵠⲆⲆΔΔ: "img/night-book46.png",
        ΔΔⵠⵠᐃΔⵠ: "img/day-book47.png",
        ⵠⵠⲆᐃΔⵠⲆ: "img/night-book47.png",
        ⲆΔᐃΔⵠⲆⲆ: "img/day-book48.png",
        ⲆⲆᐃⵠⵠΔⵠ: "img/night-book48.png",
        ᐃΔⲆᐃΔⵠΔ: "img/day-book49.png",
        ⲆᐃΔΔᐃⲆᐃ: "img/night-book49.png",
        ΔΔⲆⲆᐃᐃⵠ: "img/day-book50.png",
        ᐃΔᐃΔᐃᐃΔ: "img/night-book50.png",
        ⲆᐃⲆⲆᐃⲆⵠ: "img/day-crate1.png",
        ⲆᐃⵠΔⵠⲆⵠ: "img/night-crate1.png",
        ᐃⲆΔⲆⵠⲆⵠ: "img/day-crate2.png",
        ᐃΔΔⵠΔⵠΔ: "img/night-crate2.png",
        ⵠⲆΔᐃΔⵠᐃ: "img/day-crate3.png",
        ΔⵠⲆᐃⵠⵠᐃ: "img/night-crate3.png",
        ⵠᐃⵠΔΔⵠⵠ: "img/day-crate4.png",
        ⲆⲆⵠΔⲆⲆΔ: "img/night-crate4.png",
        ⲆᐃⲆⲆⲆᐃᐃ: "img/day-crate5.png",
        ⵠΔΔΔⵠⲆΔ: "img/night-crate5.png",
        ᐃΔᐃⵠΔΔⵠ: "img/day-crate6.png",
        ⵠᐃⵠⵠΔᐃΔ: "img/night-crate6.png",
        ⵠⵠᐃΔⲆⲆᐃ: "img/day-crate7.png",
        ⵠᐃΔⵠⲆⲆᐃ: "img/night-crate7.png",
        ⲆⵠᐃⲆⵠΔⲆ: "img/day-crate8.png",
        ᐃⲆᐃΔᐃᐃⲆ: "img/night-crate8.png",
        ΔⵠⵠΔⲆΔΔ: "img/day-crate9.png",
        ΔᐃⲆⲆΔⲆᐃ: "img/night-crate9.png",
        ΔᐃⲆⵠᐃⵠᐃ: "img/day-crate10.png",
        ᐃΔⲆⵠⲆᐃⵠ: "img/night-crate10.png",
        ⵠⵠⲆⲆⵠⵠᐃ: "img/day-crate11.png",
        ΔΔᐃⵠΔᐃΔ: "img/night-crate11.png",
        ⵠᐃⵠᐃΔᐃΔ: "img/day-crate12.png",
        ᐃᐃⲆⵠᐃⲆΔ: "img/night-crate12.png",
        ⲆΔⲆⵠΔⲆΔ: "img/day-crate13.png",
        ⵠⲆΔᐃⵠΔᐃ: "img/night-crate13.png",
        ⵠᐃⵠⲆⵠⵠΔ: "img/day-crate14.png",
        ΔⵠⵠⲆⲆᐃᐃ: "img/night-crate14.png",
        ᐃⲆⲆΔᐃⲆⲆ: "img/day-crate15.png",
        ⵠⲆⵠⲆᐃᐃΔ: "img/night-crate15.png",
        ⵠⲆᐃⲆᐃⵠⵠ: "img/day-crate16.png",
        ᐃⲆΔΔⵠΔΔ: "img/night-crate16.png",
        ⵠΔⲆΔⲆΔᐃ: "img/day-crate17.png",
        ᐃᐃⲆᐃⲆᐃⲆ: "img/night-crate17.png",
        ΔⵠᐃΔⵠΔⵠ: "img/day-crate18.png",
        ᐃᐃⲆⵠⲆⲆⲆ: "img/night-crate18.png",
        ⵠⲆΔⲆⲆⵠⵠ: "img/day-crate19.png",
        ⲆΔΔⲆᐃΔⲆ: "img/night-crate19.png",
        ⲆΔΔⵠΔᐃᐃ: "img/day-crate20.png",
        ⲆᐃᐃⲆᐃᐃⵠ: "img/night-crate20.png",
        ⲆᐃΔⲆᐃΔΔ: "img/day-crate21.png",
        ΔΔⵠΔⲆΔΔ: "img/night-crate21.png",
        ΔΔΔⵠΔᐃⵠ: "img/day-crate22.png",
        ΔΔⲆΔΔⵠⲆ: "img/night-crate22.png",
        ΔᐃΔᐃᐃΔΔ: "img/day-crate23.png",
        ΔΔⵠΔᐃⵠᐃ: "img/night-crate23.png",
        ⵠᐃⲆⲆⲆᐃΔ: "img/day-crate24.png",
        ⲆᐃⵠᐃⲆᐃⲆ: "img/night-crate24.png",
        ⲆⵠⲆⲆᐃⵠⲆ: "img/day-crate25.png",
        ΔΔⲆᐃⵠⲆΔ: "img/night-crate25.png",
        ᐃᐃⵠⵠⵠⲆⵠ: "img/day-crate26.png",
        ⵠᐃⵠⵠᐃᐃᐃ: "img/night-crate26.png",
        ⵠΔᐃᐃΔᐃᐃ: "img/day-crate27.png",
        ⲆⲆⵠⵠⵠᐃᐃ: "img/night-crate27.png",
        ⲆⲆΔᐃᐃᐃⲆ: "img/day-crate28.png",
        ⲆΔᐃⲆⵠΔΔ: "img/night-crate28.png",
        ⲆⵠⲆᐃⲆⵠⲆ: "img/day-crate29.png",
        Ⲇᐃⵠᐃᐃᐃᐃ: "img/night-crate29.png",
        ᐃΔᐃⵠⲆΔΔ: "img/day-crate30.png",
        ⵠⵠⲆΔⲆⵠΔ: "img/night-crate30.png",
        ⲆⲆⵠᐃⲆⵠᐃ: "img/day-crate31.png",
        ᐃᐃⲆΔᐃⵠΔ: "img/night-crate31.png",
        ⲆΔᐃⵠⵠΔΔ: "img/day-crate32.png",
        ᐃⵠᐃΔΔⲆⵠ: "img/night-crate32.png",
        ΔΔⲆⲆΔΔᐃ: "img/day-crate33.png",
        ΔᐃⲆⵠⲆΔⲆ: "img/night-crate33.png",
        ⵠᐃᐃΔⲆⵠⲆ: "img/day-crate34.png",
        ⲆⲆⲆᐃᐃⲆⵠ: "img/night-crate34.png",
        ΔΔⲆⵠⲆⵠᐃ: "img/day-crate35.png",
        ᐃⵠⲆΔⵠⲆΔ: "img/night-crate35.png",
        ΔⲆΔᐃΔᐃΔ: "img/day-crate36.png",
        ⲆⲆᐃⲆΔⲆⲆ: "img/night-crate36.png",
        ᐃΔΔⵠⲆⵠⵠ: "img/day-crate37.png",
        ᐃΔⵠⵠΔᐃᐃ: "img/night-crate37.png",
        ΔⲆⵠⲆⲆΔⵠ: "img/day-crate38.png",
        ᐃᐃᐃᐃᐃΔⲆ: "img/night-crate38.png",
        ⲆⲆᐃⵠⲆΔⲆ: "img/day-crate39.png",
        ΔΔⲆⵠⵠⵠΔ: "img/night-crate39.png",
        ΔⲆⲆΔⲆⵠⵠ: "img/day-crate40.png",
        ΔⲆⲆᐃⲆΔΔ: "img/night-crate40.png",
        ⲆΔⵠⲆΔⵠⲆ: "img/day-crate41.png",
        ⲆⵠⲆⲆⵠⵠΔ: "img/night-crate41.png",
        ⲆᐃᐃⵠⲆΔⵠ: "img/day-crate42.png",
        ⵠⵠᐃⵠᐃΔⵠ: "img/night-crate42.png",
        ⲆⵠⵠΔᐃΔΔ: "img/day-crate43.png",
        ᐃᐃⵠΔΔⵠᐃ: "img/night-crate43.png",
        ⵠΔⲆΔᐃᐃᐃ: "img/day-crate44.png",
        ⵠⲆⵠΔᐃⲆᐃ: "img/night-crate44.png",
        ⲆⲆⲆΔΔⵠΔ: "img/day-crate45.png",
        ⲆΔΔⵠⵠⲆⵠ: "img/night-crate45.png",
        ⵠⲆⵠᐃᐃⵠⲆ: "img/day-crate46.png",
        ᐃᐃⲆⵠⵠⲆⵠ: "img/night-crate46.png",
        ΔⵠⲆΔᐃΔᐃ: "img/day-crate47.png",
        ⵠⵠΔΔⵠⲆΔ: "img/night-crate47.png",
        ⵠⵠⲆΔᐃΔⲆ: "img/day-crate48.png",
        ΔΔⵠⵠⵠⲆΔ: "img/night-crate48.png",
        ΔⵠΔⵠΔΔⵠ: "img/day-crate49.png",
        ᐃΔΔⲆⲆΔⲆ: "img/night-crate49.png",
        ᐃᐃᐃⲆⵠⲆᐃ: "img/day-crate50.png",
        ΔᐃᐃⵠⵠΔᐃ: "img/night-crate50.png",
        ΔⵠᐃΔⵠᐃᐃ: "img/day-crate51.png",
        ᐃⲆΔⵠⵠΔΔ: "img/night-crate51.png",
        ΔⲆΔΔᐃⲆΔ: "img/day-crate52.png",
        ⲆⵠⵠⵠⵠΔᐃ: "img/night-crate52.png",
        ⵠΔᐃⵠⲆⵠⲆ: "img/day-crate53.png",
        ⵠⵠᐃᐃⲆΔⲆ: "img/night-crate53.png",
        ΔᐃᐃⵠⲆⲆⵠ: "img/day-crate54.png",
        Ⲇᐃᐃᐃᐃⵠⵠ: "img/night-crate54.png",
        Ⲇⵠᐃⵠⵠᐃⵠ: "img/day-crate55.png",
        ⵠⲆⲆᐃΔᐃⵠ: "img/night-crate55.png",
        ⵠⲆⵠⵠΔᐃⲆ: "img/day-crate56.png",
        ⵠⵠΔⲆᐃⲆΔ: "img/night-crate56.png",
        ΔΔⵠⵠⲆΔΔ: "img/day-crate57.png",
        ᐃⵠᐃᐃΔⲆⵠ: "img/night-crate57.png",
        ᐃᐃᐃᐃⵠᐃⲆ: "img/day-crate58.png",
        ᐃΔᐃΔⲆΔΔ: "img/night-crate58.png",
        ⲆΔⵠΔΔⲆΔ: "img/day-crate59.png",
        ⲆᐃΔⵠΔⵠᐃ: "img/night-crate59.png",
        ΔⵠΔΔᐃᐃⲆ: "img/day-crate60.png",
        ⵠⵠⵠᐃΔⲆⵠ: "img/night-crate60.png",
        ⵠⲆᐃⵠⵠᐃᐃ: "img/day-crate61.png",
        ⲆⲆΔⵠⵠⵠΔ: "img/night-crate61.png",
        ΔⲆⵠΔⲆⲆⲆ: "img/day-crate62.png",
        ⲆⵠⲆⵠⲆⲆⵠ: "img/night-crate62.png",
        ᐃⵠΔⵠⲆⲆᐃ: "img/day-crate63.png",
        ᐃⲆⵠΔᐃⲆΔ: "img/night-crate63.png",
        ⵠⵠᐃᐃⲆᐃⲆ: "img/day-crate64.png",
        ᐃΔᐃᐃⲆⲆⵠ: "img/night-crate64.png",
        ΔⲆΔⲆⵠⵠⲆ: "img/day-crate65.png",
        ΔⲆⵠΔⵠᐃᐃ: "img/night-crate65.png",
        ⲆᐃⲆᐃᐃⵠᐃ: "img/day-crate66.png",
        ΔⲆⵠⵠΔᐃⲆ: "img/night-crate66.png",
        ᐃⵠᐃΔⵠⵠⵠ: "img/day-crate67.png",
        ⲆⲆΔⵠⲆᐃⲆ: "img/night-crate67.png",
        ⲆᐃⵠᐃⵠⵠⲆ: "img/day-crate68.png",
        ΔⲆⲆⵠᐃᐃⲆ: "img/night-crate68.png",
        ⵠⲆⲆᐃⲆⵠᐃ: "img/day-crate69.png",
        ᐃⲆⲆΔΔⲆᐃ: "img/night-crate69.png",
        ⵠᐃΔΔΔᐃᐃ: "img/day-crate70.png",
        ΔᐃⲆΔⵠΔΔ: "img/night-crate70.png",
        ⲆⲆᐃᐃⲆⵠⵠ: "img/day-crate71.png",
        ΔⲆⲆⵠⵠΔΔ: "img/night-crate71.png",
        ᐃᐃⲆⵠⵠⵠⵠ: "img/day-crate72.png",
        ᐃΔᐃΔΔΔⲆ: "img/night-crate72.png",
        ⵠⲆⵠⲆΔᐃᐃ: "img/day-crate73.png",
        ⲆᐃⲆᐃΔⵠΔ: "img/night-crate73.png",
        ᐃⵠᐃΔⵠΔⵠ: "img/day-crate74.png",
        ᐃⵠⲆⲆᐃᐃΔ: "img/night-crate74.png",
        ᐃᐃⲆᐃΔᐃⵠ: "img/day-crate75.png",
        ⵠΔᐃΔⲆⵠⵠ: "img/night-crate75.png",
        ΔΔⵠⵠΔⲆΔ: "img/day-crate76.png",
        ⵠᐃⵠⲆⵠᐃΔ: "img/night-crate76.png",
        ΔᐃΔᐃⲆⵠⲆ: "img/day-crate77.png",
        ΔΔΔⵠⵠⲆⵠ: "img/night-crate77.png",
        ⲆⵠⵠᐃᐃΔΔ: "img/day-crate78.png",
        ⲆΔⵠⵠⲆⲆᐃ: "img/night-crate78.png",
        ⵠⵠΔᐃⲆᐃⲆ: "img/day-crate79.png",
        ΔΔΔⲆⵠⵠⲆ: "img/night-crate79.png",
        ⵠⵠΔΔΔⵠⲆ: "img/day-herb0.png",
        ⲆⲆⲆⵠⲆⲆᐃ: "img/day-herb1.png",
        ⵠΔᐃⲆⲆⲆΔ: "img/day-herb2.png",
        ΔᐃᐃⲆⵠⵠⵠ: "img/day-herb3.png",
        ᐃΔⵠΔⲆΔⲆ: "img/day-herb4.png",
        ⲆᐃᐃⲆΔΔⵠ: "img/day-herb5.png",
        ΔⲆᐃⲆΔⵠᐃ: "img/day-herb6.png",
        ⲆⵠⵠⲆΔᐃᐃ: "img/day-herb7.png",
        ᐃΔΔⵠⲆΔⲆ: "img/day-herb8.png",
        ⲆᐃΔⲆⵠⲆᐃ: "img/day-herb9.png",
        ⵠⵠΔΔΔΔᐃ: "img/day-herb10.png",
        ⵠⵠⵠΔΔⵠⵠ: "img/day-herb11.png",
        Ⲇᐃᐃⵠᐃᐃᐃ: "img/day-herb12.png",
        ⵠⵠⵠᐃᐃΔᐃ: "img/day-herb13.png",
        ΔⵠⵠⵠᐃᐃⲆ: "img/day-herb14.png",
        ⵠᐃᐃᐃΔΔᐃ: "img/day-herb15.png",
        ⵠⵠᐃΔⲆⵠⵠ: "img/day-shell0.png",
        ΔᐃΔⲆⲆΔⲆ: "img/day-shell1.png",
        ⲆᐃᐃΔΔᐃⵠ: "img/day-shell2.png",
        ᐃᐃᐃΔⲆΔΔ: "img/day-leaf1.png",
        ᐃⵠⲆⲆΔΔΔ: "img/day-leaf2.png",
        ΔΔⵠⲆⵠⲆⵠ: "img/day-leaf3.png",
        ⵠᐃⲆᐃᐃᐃⵠ: "img/day-leaf4.png",
        ⲆᐃΔΔⵠΔⲆ: "img/day-leaf5.png",
        ⲆᐃⲆⲆⲆΔΔ: "img/day-leaf6.png",
        ⵠⵠᐃⵠⵠⲆᐃ: "img/day-leaf7.png",
        ᐃΔᐃⵠΔⲆⵠ: "img/day-leaf8.png",
        Ⲇⵠⵠⵠⵠᐃᐃ: "img/day-rock0.png",
        ᐃⵠⵠΔΔⵠⲆ: "img/day-rock1.png",
        ᐃᐃᐃΔᐃⲆⵠ: "img/day-rock2.png",
        ⵠᐃⲆᐃᐃᐃᐃ: "img/day-rock3.png",
        ⵠⵠᐃⲆⵠΔΔ: "img/day-rock4.png",
        ⵠΔΔᐃⵠⲆΔ: "img/day-rock5.png",
        ᐃⲆΔⵠⵠⲆᐃ: "img/day-rock6.png",
        ⲆΔᐃⵠᐃᐃᐃ: "img/day-rock7.png",
        ΔⲆⲆΔΔⵠᐃ: "img/day-rock8.png",
        ΔΔⵠⲆΔⲆΔ: "img/day-rock9.png",
        ⵠⲆⵠⲆᐃᐃⲆ: "img/day-rock10.png",
        ΔΔⲆⲆⲆⲆᐃ: "img/day-rock11.png",
        ⵠⵠⵠⵠⲆⵠⵠ: "img/day-rock12.png",
        ⲆⵠΔⵠᐃⲆΔ: "img/day-rock13.png",
        ΔᐃⲆⲆΔⲆⲆ: "img/day-flower1.png",
        ⵠΔⵠΔᐃΔΔ: "img/day-flower2.png",
        ⵠⵠⲆⵠⵠⲆⵠ: "img/day-flower3.png",
        ΔⲆⵠⵠᐃⲆⵠ: "img/day-flower4.png",
        ᐃⲆΔⲆᐃΔΔ: "img/day-flower5.png",
        ᐃⲆᐃΔΔᐃⲆ: "img/day-flower6.png",
        ⵠⲆΔⵠⲆᐃΔ: "img/day-flower7.png",
        ⲆⵠⵠⲆⵠᐃΔ: "img/day-flower8.png",
        ᐃΔᐃⲆⵠᐃⵠ: "img/day-flower9.png",
        ⲆⵠΔⲆᐃΔΔ: "img/day-herb16.png",
        ΔΔⲆΔΔᐃΔ: "img/day-herb17.png",
        ᐃⲆⲆᐃΔⵠᐃ: "img/day-herb18.png",
        ⵠΔᐃᐃᐃᐃΔ: "img/day-herb19.png",
        ⵠᐃⲆⵠΔᐃᐃ: "img/day-herb20.png",
        ΔΔΔᐃᐃⵠᐃ: "img/day-herb21.png",
        ᐃⲆᐃΔΔⵠⵠ: "img/night-herb0.png",
        ᐃⵠⵠⲆⵠⲆᐃ: "img/night-herb1.png",
        ⲆΔⲆΔᐃΔⵠ: "img/night-herb2.png",
        ΔΔᐃΔⵠⵠᐃ: "img/night-herb3.png",
        ᐃⵠⲆⵠⲆⵠΔ: "img/night-herb4.png",
        ⵠᐃⵠᐃᐃⵠΔ: "img/night-herb5.png",
        ΔⲆΔⵠⵠⲆΔ: "img/night-herb6.png",
        ⵠⲆⲆⵠⵠⵠΔ: "img/night-herb7.png",
        ⲆᐃΔⵠⲆᐃⵠ: "img/night-herb8.png",
        ᐃΔⵠⵠⲆΔⵠ: "img/night-herb9.png",
        ⵠᐃᐃΔᐃⲆⵠ: "img/night-herb10.png",
        ᐃⲆⵠΔᐃΔΔ: "img/night-herb11.png",
        ⵠΔⲆᐃᐃⲆⲆ: "img/night-herb12.png",
        ΔᐃΔΔΔⵠΔ: "img/night-herb13.png",
        ᐃⵠⲆᐃᐃⲆⲆ: "img/night-herb14.png",
        ᐃΔᐃᐃᐃᐃΔ: "img/night-herb15.png",
        ⲆΔΔᐃⵠⲆΔ: "img/night-shell0.png",
        ΔⲆⵠΔⵠⲆᐃ: "img/night-shell1.png",
        ᐃⲆⵠᐃⵠⲆΔ: "img/night-shell2.png",
        ⲆΔⲆΔⲆⵠⲆ: "img/night-leaf1.png",
        ᐃᐃⵠⲆⲆᐃΔ: "img/night-leaf2.png",
        ⲆⲆⲆⵠᐃⵠⲆ: "img/night-leaf3.png",
        ᐃⲆᐃⲆΔⵠᐃ: "img/night-leaf4.png",
        ΔⵠⲆᐃⲆᐃⲆ: "img/night-leaf5.png",
        ᐃⲆΔⲆⲆⲆᐃ: "img/night-leaf6.png",
        ᐃⵠⵠⵠⵠᐃⲆ: "img/night-leaf7.png",
        ⲆⲆⵠⲆⲆΔⲆ: "img/night-leaf8.png",
        ⲆⵠⲆⵠΔⲆⲆ: "img/night-rock0.png",
        ᐃⲆΔⵠⵠⲆΔ: "img/night-rock1.png",
        ΔᐃᐃⵠΔⵠΔ: "img/night-rock2.png",
        ΔⵠⲆⵠⲆⲆⲆ: "img/night-rock3.png",
        ᐃᐃΔⲆᐃΔⲆ: "img/night-rock4.png",
        ᐃΔⵠⲆⲆⲆᐃ: "img/night-rock5.png",
        ᐃΔΔΔⵠΔⵠ: "img/night-rock6.png",
        ᐃᐃⲆΔᐃΔᐃ: "img/night-rock7.png",
        ΔΔΔᐃΔⲆᐃ: "img/night-rock8.png",
        ᐃⵠΔⲆⵠⲆΔ: "img/night-rock9.png",
        ᐃⲆⵠΔⲆᐃⲆ: "img/night-rock10.png",
        ⵠⲆΔΔⵠⲆⲆ: "img/night-rock11.png",
        ⵠΔⲆⲆⲆᐃΔ: "img/night-rock12.png",
        ⲆΔΔⵠᐃⲆⲆ: "img/night-rock13.png",
        ⵠΔⵠⲆΔⵠⲆ: "img/night-flower1.png",
        ⵠⲆΔΔⵠⲆΔ: "img/night-flower2.png",
        ⵠⵠⵠⵠⲆᐃΔ: "img/night-flower3.png",
        ΔᐃΔⲆⵠⵠᐃ: "img/night-flower4.png",
        ⲆᐃΔᐃΔⵠⵠ: "img/night-flower5.png",
        ΔΔΔΔΔⵠⲆ: "img/night-flower6.png",
        ⵠΔⲆᐃⲆⲆΔ: "img/night-flower7.png",
        ⲆΔⵠⵠΔᐃΔ: "img/night-flower8.png",
        ΔᐃᐃΔᐃⲆⲆ: "img/night-flower9.png",
        ᐃⲆⲆΔΔⲆⲆ: "img/night-herb16.png",
        ⲆΔⵠⵠΔΔⲆ: "img/night-herb17.png",
        ⵠⲆⵠⲆᐃΔΔ: "img/night-herb18.png",
        ᐃⲆⵠᐃⲆⵠᐃ: "img/night-herb19.png",
        ᐃⵠᐃΔⵠⵠⲆ: "img/night-herb20.png",
        ΔⲆᐃⵠᐃᐃⵠ: "img/night-herb21.png",
        ᐃᐃⵠⵠⲆᐃᐃ: "img/day-river000-010-000.png",
        ⲆⲆᐃΔᐃᐃⲆ: "img/day-river000-010-010.png",
        ⲆⵠΔΔⵠΔⵠ: "img/day-river000-011-000.png",
        ᐃⵠⲆⵠᐃⵠᐃ: "img/day-river000-011-010.png",
        ⵠⲆⲆᐃⵠⲆΔ: "img/day-river000-011-011.png",
        ΔᐃⲆᐃΔⲆⵠ: "img/day-river000-110-000.png",
        ᐃⵠⲆΔᐃᐃⵠ: "img/day-river000-110-010.png",
        ⵠᐃᐃⵠᐃΔᐃ: "img/day-river000-110-110.png",
        ΔΔⲆⵠⵠⵠⵠ: "img/day-river000-111-000.png",
        ⲆΔΔᐃⲆΔⵠ: "img/day-river000-111-010.png",
        ⲆⵠΔⵠΔᐃΔ: "img/day-river000-111-011.png",
        ⲆⵠⲆⲆΔⲆᐃ: "img/day-river000-111-110.png",
        ⵠΔᐃⵠⵠᐃⲆ: "img/day-river000-111-111.png",
        ⵠⵠⵠⲆᐃⲆΔ: "img/day-river010-010-000.png",
        ⲆⵠΔⲆⵠΔⲆ: "img/day-river010-010-010.png",
        ⲆΔⵠⲆⲆΔⵠ: "img/day-river010-011-000.png",
        ⲆⲆⲆⵠΔᐃΔ: "img/day-river010-011-010.png",
        ᐃⵠᐃⵠᐃⲆⵠ: "img/day-river010-011-011.png",
        ᐃᐃᐃᐃΔⵠᐃ: "img/day-river010-110-000.png",
        ⵠⵠⲆⵠⵠⲆΔ: "img/day-river010-110-010.png",
        Ⲇᐃᐃᐃᐃᐃⵠ: "img/day-river010-110-110.png",
        ⵠⲆⵠⵠᐃΔΔ: "img/day-river010-111-000.png",
        ᐃΔⲆⲆΔⲆⲆ: "img/day-river010-111-010.png",
        ΔΔⵠᐃⲆΔΔ: "img/day-river010-111-011.png",
        ⲆᐃⲆⵠⵠⲆⲆ: "img/day-river010-111-110.png",
        ΔⵠΔᐃⲆΔᐃ: "img/day-river010-111-111.png",
        ᐃΔⲆᐃΔⵠⲆ: "img/day-river011-011-000.png",
        ⲆΔⵠᐃᐃⵠⵠ: "img/day-river011-011-010.png",
        ᐃⵠⵠΔᐃⵠⵠ: "img/day-river011-011-011.png",
        ⵠⲆᐃⵠᐃⲆᐃ: "img/day-river011-111-000.png",
        ΔⵠⵠⵠΔⲆⲆ: "img/day-river011-111-010.png",
        ⲆⵠᐃΔⵠⲆⲆ: "img/day-river011-111-011.png",
        ΔⵠᐃᐃᐃⵠΔ: "img/day-river011-111-110.png",
        ΔⲆᐃⲆᐃⲆⵠ: "img/day-river011-111-111.png",
        ΔᐃΔⵠⵠⵠⲆ: "img/day-river110-110-000.png",
        Δⵠⵠⵠⵠⵠᐃ: "img/day-river110-110-010.png",
        ΔᐃⵠᐃⵠᐃⲆ: "img/day-river110-110-110.png",
        ᐃΔΔΔΔⵠⲆ: "img/day-river110-111-000.png",
        ΔⲆⲆΔΔᐃⲆ: "img/day-river110-111-010.png",
        ΔΔᐃᐃΔΔⵠ: "img/day-river110-111-011.png",
        ᐃᐃᐃΔⲆᐃⲆ: "img/day-river110-111-110.png",
        ΔⲆᐃⵠΔⵠⲆ: "img/day-river110-111-111.png",
        ⵠᐃᐃⵠⵠᐃⲆ: "img/day-river111-111-011.png",
        ⵠᐃΔⵠΔᐃΔ: "img/day-river111-111-110.png",
        ⵠᐃᐃⵠⵠᐃⲆ: "img/day-river111-111-011.png",
        ⵠΔⲆᐃᐃΔⲆ: "img/day-river111-111-000.png",
        ⲆⲆΔⵠΔⵠⵠ: "img/day-river111-111-111.png",
        ⵠⲆⲆⲆᐃᐃΔ: "img/day-river111-111-010.png",
        ΔⲆⵠᐃⲆⵠⲆ: "img/night-river000-010-000.png",
        ᐃᐃⵠⵠΔⲆⵠ: "img/night-river000-010-010.png",
        ⲆΔᐃΔᐃᐃⵠ: "img/night-river000-011-000.png",
        Δᐃᐃᐃᐃᐃⵠ: "img/night-river000-011-010.png",
        ΔⲆⲆΔⲆΔⵠ: "img/night-river000-011-011.png",
        ᐃⲆⲆΔⵠⲆⵠ: "img/night-river000-110-000.png",
        ΔⲆᐃᐃⵠⲆᐃΔᐃ: "img/night-river000-110-010.png",
        ⲆᐃⲆᐃᐃᐃΔᐃⲆ: "img/night-river000-110-110.png",
        ⲆΔⲆⲆⲆᐃⲆᐃᐃ: "img/night-river000-111-000.png",
        ⲆⵠⲆⵠⵠⵠᐃⵠΔ: "img/night-river000-111-010.png",
        ΔⲆΔΔⲆΔⲆᐃⲆ: "img/night-river000-111-011.png",
        ΔⵠᐃᐃⲆⵠⵠⲆⵠ: "img/night-river000-111-110.png",
        ⲆⲆΔΔⵠⵠΔⵠΔ: "img/night-river000-111-111.png",
        ⲆⵠⲆᐃⲆⲆᐃᐃΔ: "img/night-river010-010-000.png",
        ᐃⵠⲆΔⵠⵠⵠᐃⵠ: "img/night-river010-010-010.png",
        ΔᐃⵠⵠΔᐃⵠⲆᐃ: "img/night-river010-011-000.png",
        ΔⲆⲆⵠⲆⲆⵠⵠᐃ: "img/night-river010-011-010.png",
        ⵠⵠⵠⲆⵠᐃⵠᐃⵠ: "img/night-river010-011-011.png",
        ᐃᐃᐃⲆⲆⲆⲆΔᐃ: "img/night-river010-110-000.png",
        ΔΔⲆⲆⲆᐃⵠⵠⵠ: "img/night-river010-110-010.png",
        ⵠΔⲆΔⵠᐃΔⲆⲆ: "img/night-river010-110-110.png",
        ᐃᐃⲆΔⵠᐃᐃⵠⵠ: "img/night-river010-111-000.png",
        ᐃⵠΔΔΔⵠᐃᐃⲆ: "img/night-river010-111-010.png",
        ᐃⲆΔⵠΔᐃⲆᐃⲆ: "img/night-river010-111-011.png",
        ⲆⵠⵠΔⲆⲆⲆⵠⲆ: "img/night-river010-111-110.png",
        ⲆⵠΔⲆⲆΔⵠⲆᐃ: "img/night-river010-111-111.png",
        ΔΔᐃᐃⲆⲆⵠΔⲆ: "img/night-river011-011-000.png",
        ΔᐃⵠᐃᐃᐃⵠΔΔ: "img/night-river011-011-010.png",
        ⵠᐃΔΔᐃΔΔⵠΔ: "img/night-river011-011-011.png",
        ⵠᐃⵠᐃⲆⲆᐃⵠᐃ: "img/night-river011-111-000.png",
        ⲆΔⵠᐃⵠΔᐃⲆΔ: "img/night-river011-111-010.png",
        ᐃᐃᐃⲆΔΔⵠΔⲆ: "img/night-river011-111-011.png",
        ⲆⲆⲆⲆⵠⲆᐃΔⲆ: "img/night-river011-111-110.png",
        ⲆᐃᐃΔⵠᐃᐃⲆⲆ: "img/night-river011-111-111.png",
        ᐃᐃⲆⵠⵠⲆᐃⵠⲆ: "img/night-river110-110-000.png",
        ⲆΔΔⵠⲆΔⲆⲆΔ: "img/night-river110-110-010.png",
        Δᐃⵠᐃᐃᐃⵠⵠᐃ: "img/night-river110-110-110.png",
        ⲆᐃΔΔⵠᐃᐃⵠⵠ: "img/night-river110-111-000.png",
        ⲆⲆᐃᐃᐃᐃⵠⵠᐃ: "img/night-river110-111-010.png",
        ⲆⲆΔᐃⲆΔⵠᐃⵠ: "img/night-river110-111-011.png",
        ΔΔⲆⲆⲆⲆⵠΔⵠ: "img/night-river110-111-110.png",
        ⵠⵠΔᐃⵠⲆΔⵠᐃ: "img/night-river110-111-111.png",
        ΔᐃⵠⵠⵠⲆΔ: "img/night-river111-111-011.png",
        ᐃΔΔⲆⵠᐃⲆⲆⵠ: "img/night-river111-111-110.png",
        ΔᐃⵠⵠⵠⲆΔ: "img/night-river111-111-011.png",
        ⵠᐃⵠΔΔΔⲆᐃᐃ: "img/night-river111-111-000.png",
        ⵠΔⲆⲆⲆΔΔΔᐃ: "img/night-river111-111-111.png",
        ⵠᐃⵠⲆⲆⲆΔᐃΔ: "img/night-river111-111-010.png",
        ᐃΔΔΔⲆΔΔ: "img/day-pebblecompo1.png",
        ΔⲆΔⲆⲆ: "img/day-pebblecompo2.png",
        ΔᐃⲆΔⲆ: "img/day-pebblecompo3.png",
        ᐃⲆⲆⲆΔΔΔ: "img/day-pebblecompo4.png",
        ⵠᐃΔⲆΔ: "img/day-pebblecompo5.png",
        ⵠΔΔᐃΔ: "img/day-pebblecompo6.png",
        ᐃΔΔⵠⵠ: "img/day-pebblecompo7.png",
        ⲆⲆΔΔΔⲆⵠⲆⲆ: "img/day-pebblecompo8.png",
        ΔⲆΔⵠΔⲆⵠ: "img/day-pebblecompo9.png",
        ⵠⵠⵠⲆⲆΔⲆ: "img/day-pebblecompo10.png",
        ᐃⲆᐃⲆⵠ: "img/day-pebblecompo11.png",
        ΔΔΔⲆⵠΔΔ: "img/day-pebblecompo12.png",
        ⲆⵠⵠⵠΔΔΔ: "img/day-pebblecompo13.png",
        ΔⵠᐃΔⵠΔᐃ: "img/day-pebblecompo14.png",
        ⲆⲆⲆⵠⲆᐃΔ: "img/day-pebblecompo15.png",
        ΔⲆΔᐃⲆΔᐃ: "img/day-pebblecompo16.png",
        ⲆᐃᐃⲆᐃ: "img/day-pebblecompo17.png",
        ᐃᐃᐃⲆⵠΔⵠ: "img/day-pebblecompo18.png",
        ⵠⵠⲆΔⲆᐃᐃ: "img/day-pebblecompo19.png",
        Δᐃⵠᐃᐃ: "img/day-pebblecompo20.png",
        ΔΔⵠⵠᐃ: "img/day-pebblecompo21.png",
        ⵠⵠⵠᐃᐃΔⵠ: "img/day-pebblecompo22.png",
        ᐃᐃΔⲆⲆⵠΔ: "img/day-pebblecompo23.png",
        ⲆΔΔⲆⲆⲆᐃ: "img/day-pebblecompo24.png",
        ΔⵠⲆⵠΔ: "img/day-pebblecompo25.png",
        ΔⲆⵠⵠⵠ: "img/day-pebblecompo26.png",
        ΔΔⲆΔΔΔⵠ: "img/day-pebblecompo27.png",
        ⵠΔᐃΔΔ: "img/day-pebblecompo28.png",
        ΔⲆᐃⲆⲆΔⲆ: "img/night-pebblecompo1.png",
        ᐃᐃⲆΔⵠ: "img/night-pebblecompo2.png",
        ΔⵠᐃΔΔ: "img/night-pebblecompo3.png",
        ᐃⵠⲆⲆⵠⲆᐃ: "img/night-pebblecompo4.png",
        ΔᐃΔⲆⲆ: "img/night-pebblecompo5.png",
        ᐃⲆⲆⵠⲆ: "img/night-pebblecompo6.png",
        ΔⵠⲆᐃⲆ: "img/night-pebblecompo7.png",
        ᐃᐃⵠᐃⵠⵠⵠⲆⲆ: "img/night-pebblecompo8.png",
        ⵠⵠⲆⲆᐃᐃⲆ: "img/night-pebblecompo9.png",
        ΔΔᐃⵠⵠΔⵠ: "img/night-pebblecompo10.png",
        ᐃΔΔⵠⲆ: "img/night-pebblecompo11.png",
        ᐃΔⲆⲆΔⵠⵠ: "img/night-pebblecompo12.png",
        ΔⲆⵠᐃⵠⲆᐃ: "img/night-pebblecompo13.png",
        ᐃⲆⵠⵠᐃⵠⲆ: "img/night-pebblecompo14.png",
        ⲆⵠΔΔⵠⲆⲆ: "img/night-pebblecompo15.png",
        ⵠⵠΔⵠΔᐃΔ: "img/night-pebblecompo16.png",
        ⲆΔⵠⵠᐃ: "img/night-pebblecompo17.png",
        ΔΔᐃⵠᐃᐃΔ: "img/night-pebblecompo18.png",
        ⲆᐃᐃⵠᐃΔⲆ: "img/night-pebblecompo19.png",
        ⲆⲆⲆⵠᐃ: "img/night-pebblecompo20.png",
        ᐃⲆᐃⲆᐃ: "img/night-pebblecompo21.png",
        ⲆⲆⲆΔⵠⲆᐃ: "img/night-pebblecompo22.png",
        ⵠⲆΔᐃⲆⲆⲆ: "img/night-pebblecompo23.png",
        ⵠⵠⵠᐃΔⲆᐃ: "img/night-pebblecompo24.png",
        ⲆΔΔⵠⵠ: "img/night-pebblecompo25.png",
        ⲆⲆⵠᐃΔ: "img/night-pebblecompo26.png",
        ⵠᐃΔⵠⵠᐃᐃ: "img/night-pebblecompo27.png",
        ᐃⲆΔⲆΔ: "img/night-pebblecompo28.png",
        ΔⵠⵠⲆᐃⵠⲆⲆⲆ: "img/day-baby-mammoth.png",
        ⲆⵠΔΔⵠⵠⵠᐃⲆ: "img/day-baby-mammoth-tamed.png",
        ΔⵠⲆⵠΔΔᐃᐃΔ: "img/day-baby-mammoth-angry.png",
        ⵠᐃⵠⲆⵠⲆᐃΔΔ: "img/night-baby-mammoth.png",
        ᐃⲆⲆⲆⵠⵠⲆⵠΔ: "img/night-baby-mammoth-tamed.png",
        ⵠⵠⵠᐃᐃΔⵠⵠⵠ: "img/night-baby-mammoth-angry.png",
        ΔⵠΔᐃΔⲆᐃⲆⵠ: "img/inv-mammoth-out.png",
        ⲆⲆⲆⵠⵠᐃⲆΔᐃ: "img/inv-mammoth-in.png",
        ΔᐃᐃᐃᐃⲆⲆᐃΔ: "img/inv-mammoth-click.png",
        ⲆΔΔⵠⲆⵠᐃ: "img/hurt-baby-mammoth.png",
        ᐃΔΔⵠⵠⵠᐃ: "img/baby-mammoth-step.png",
        ᐃΔⲆᐃᐃᐃᐃⵠⵠ: "img/day-flower-hat.png",
        ΔⵠⲆⲆᐃⵠⵠⵠⲆ: "img/night-flower-hat.png",
        ΔᐃᐃΔᐃᐃΔⵠᐃ: "img/inv-flower-hat-out.png",
        ΔⵠⲆᐃⵠⵠⵠⵠⵠ: "img/inv-flower-hat-in.png",
        ⲆᐃΔᐃⵠⲆⲆΔΔ: "img/inv-flower-hat-click.png",
        ΔⲆⲆⲆΔᐃᐃⵠΔ: "img/day-fur-hat.png",
        ⵠᐃΔⵠⵠⲆⲆΔᐃ: "img/night-fur-hat.png",
        ΔⲆⵠⵠⲆⵠᐃᐃᐃ: "img/inv-fur-hat-out.png",
        ΔᐃⲆᐃⵠⲆᐃⵠΔ: "img/inv-fur-hat-in.png",
        ⲆⲆᐃΔᐃΔᐃΔᐃ: "img/inv-fur-hat-click.png",
        ⵠΔⲆᐃΔⵠΔᐃⲆ: "img/day-mammoth.png",
        ΔⲆᐃΔΔⵠᐃΔⵠ: "img/night-mammoth.png",
        ᐃᐃᐃΔⵠΔⲆ: "img/hurt-mammoth.png",
        ⵠΔⲆᐃⵠⵠᐃᐃⵠ: "img/inv-mammoth-fur-out.png",
        ⵠΔⲆⵠΔᐃⲆΔᐃ: "img/inv-mammoth-fur-in.png",
        ⲆⵠᐃⵠΔⵠᐃᐃΔ: "img/inv-mammoth-fur-click.png",
        ΔⵠⲆⵠᐃⲆⲆΔⵠ: "img/inv-wood-bow-out.png",
        ⵠΔⲆᐃᐃΔⵠᐃᐃ: "img/inv-wood-bow-in.png",
        ⵠⲆⲆᐃⵠΔΔⵠⲆ: "img/inv-wood-bow-click.png",
        ⵠⲆᐃⲆᐃΔⵠΔⵠ: "img/inv-wood-arrow-out.png",
        ΔᐃⲆⲆⵠⲆΔⵠⵠ: "img/inv-wood-arrow-in.png",
        ⵠⵠΔⲆⲆⲆᐃⲆⲆ: "img/inv-wood-arrow-click.png",
        ᐃᐃᐃⵠⵠⵠᐃⲆᐃ: "img/day-wood-bow2.png",
        ⲆᐃⵠᐃⵠΔΔΔⲆ: "img/night-wood-bow2.png",
        ΔⵠⵠΔΔᐃⲆ: "img/day-wood-arrow.png",
        ᐃΔⵠΔⵠⲆⲆ: "img/night-wood-arrow.png",
        ⲆⵠⲆΔΔⲆⲆⵠᐃ: "img/inv-stone-bow-out.png",
        ΔⵠᐃΔᐃⵠⵠⵠⲆ: "img/inv-stone-bow-in.png",
        ⲆⵠᐃᐃΔΔΔⲆⵠ: "img/inv-stone-bow-click.png",
        ΔⲆⲆⲆᐃᐃᐃⲆⲆ: "img/inv-stone-arrow-out.png",
        ⲆᐃⵠⵠⵠⲆⵠⵠΔ: "img/inv-stone-arrow-in.png",
        ᐃΔⲆⵠᐃᐃᐃᐃⲆ: "img/inv-stone-arrow-click.png",
        ⵠᐃⲆⲆⵠΔΔΔᐃ: "img/day-stone-bow.png",
        ⵠΔⵠᐃⲆΔᐃⲆⲆ: "img/night-stone-bow.png",
        ⲆᐃΔⵠΔΔⲆ: "img/day-stone-arrow.png",
        ᐃⵠᐃᐃᐃᐃΔ: "img/night-stone-arrow.png",
        ΔᐃᐃΔⵠᐃⲆᐃΔ: "img/inv-gold-bow-out.png",
        ⲆⲆᐃΔⲆΔⲆΔᐃ: "img/inv-gold-bow-in.png",
        ⵠΔΔⲆⲆⲆⲆⲆⲆ: "img/inv-gold-bow-click.png",
        ⲆⲆᐃᐃⵠᐃⵠᐃⲆ: "img/inv-gold-arrow-out.png",
        ⲆⵠⵠᐃΔⲆⵠⵠⵠ: "img/inv-gold-arrow-in.png",
        ⲆᐃᐃΔΔⲆΔⵠⵠ: "img/inv-gold-arrow-click.png",
        ΔⲆΔΔΔⵠΔⲆᐃ: "img/day-gold-bow.png",
        ⵠΔⲆⲆⲆΔΔΔⲆ: "img/night-gold-bow.png",
        ⲆⵠᐃⲆⵠⵠⲆ: "img/day-gold-arrow.png",
        ΔⲆⲆΔⲆᐃⵠ: "img/night-gold-arrow.png",
        ΔⲆΔΔΔⲆⵠᐃΔ: "img/inv-diamond-bow-out.png",
        ᐃΔⲆᐃᐃΔⲆⵠᐃ: "img/inv-diamond-bow-in.png",
        ⲆΔⵠᐃⵠᐃΔⵠⲆ: "img/inv-diamond-bow-click.png",
        ⵠⲆⵠΔⵠⵠⲆⲆⵠ: "img/inv-diamond-arrow-out.png",
        ⲆΔⵠⵠⵠΔᐃΔⵠ: "img/inv-diamond-arrow-in.png",
        ΔᐃⲆⲆΔⵠᐃⲆΔ: "img/inv-diamond-arrow-click.png",
        ⲆᐃⵠⲆⲆΔⵠᐃΔ: "img/day-diamond-bow.png",
        ⵠⵠΔⲆΔⵠⵠΔⵠ: "img/night-diamond-bow.png",
        ᐃᐃΔⲆⲆⵠⵠ: "img/day-diamond-arrow.png",
        ΔⵠᐃⲆΔᐃΔ: "img/night-diamond-arrow.png",
        ⲆⵠᐃⲆᐃΔⵠⵠⵠ: "img/inv-amethyst-bow-out.png",
        ΔΔᐃΔΔⵠᐃᐃΔ: "img/inv-amethyst-bow-in.png",
        ⲆᐃⲆᐃΔⵠⲆⵠⵠ: "img/inv-amethyst-bow-click.png",
        ᐃⵠᐃΔᐃᐃΔΔΔ: "img/inv-amethyst-arrow-out.png",
        ⲆᐃᐃⲆΔⵠΔᐃᐃ: "img/inv-amethyst-arrow-in.png",
        ⲆⲆᐃⵠΔΔΔⵠΔ: "img/inv-amethyst-arrow-click.png",
        ᐃᐃΔⵠΔΔⵠⵠⲆ: "img/day-amethyst-bow.png",
        ΔΔⵠᐃⵠᐃᐃΔⵠ: "img/night-amethyst-bow.png",
        ᐃᐃⵠΔⵠⲆΔ: "img/day-amethyst-arrow.png",
        ᐃⵠΔⲆⲆⲆᐃ: "img/night-amethyst-arrow.png",
        ΔⵠΔᐃΔΔⲆᐃᐃ: "img/inv-dragon-bow-out.png",
        ΔⵠⵠⵠⲆΔᐃΔⲆ: "img/inv-dragon-bow-in.png",
        ⲆⵠⲆⲆⵠΔΔᐃⵠ: "img/inv-dragon-bow-click.png",
        ⵠⵠⲆⵠΔᐃΔⲆⲆ: "img/inv-dragon-arrow-out.png",
        ᐃΔᐃⲆⵠΔᐃⲆΔ: "img/inv-dragon-arrow-in.png",
        ⲆΔᐃΔⲆᐃΔᐃⵠ: "img/inv-dragon-arrow-click.png",
        ΔΔΔᐃΔⵠⲆᐃᐃ: "img/day-dragon-bow.png",
        ΔᐃⵠΔⵠⲆⵠⵠⲆ: "img/night-dragon-bow.png",
        ⲆΔⲆᐃΔⵠⲆ: "img/day-dragon-arrow.png",
        ΔᐃΔⲆⵠΔᐃ: "img/night-dragon-arrow.png",
        ⲆⵠᐃⵠⵠᐃⲆΔΔ: "img/inv-reidite-bow-out.png",
        ΔⲆⵠΔⲆⵠⵠⲆΔ: "img/inv-reidite-bow-in.png",
        ᐃⵠᐃⵠⵠⲆΔⵠⲆ: "img/inv-reidite-bow-click.png",
        ᐃⲆΔⲆΔΔᐃⵠⲆ: "img/inv-reidite-arrow-out.png",
        ⲆᐃⲆᐃⵠⲆⲆᐃΔ: "img/inv-reidite-arrow-in.png",
        ⲆⲆΔᐃΔΔᐃΔΔ: "img/inv-reidite-arrow-click.png",
        ΔⲆⵠΔⵠⵠⲆΔᐃ: "img/day-reidite-bow.png",
        ⲆⵠΔΔⲆᐃⲆⲆⲆ: "img/night-reidite-bow.png",
        ᐃⵠΔⲆⲆᐃᐃ: "img/day-reidite-arrow.png",
        ⵠᐃⵠᐃⲆΔⵠᐃᐃ: "img/night-reidite-arrow.png",
        ⵠⲆᐃᐃΔᐃΔᐃΔ: "img/inv-wooden-axe-out.png",
        Δᐃᐃⵠⵠᐃᐃᐃⵠ: "img/inv-wooden-axe-in.png",
        ΔᐃⵠⲆΔΔⵠⲆⵠ: "img/inv-wooden-axe-click.png",
        ᐃΔⲆᐃⲆΔⲆΔⵠ: "img/day-wooden-axe.png",
        ⵠⲆⲆΔΔᐃΔⲆⲆ: "img/night-wooden-axe.png",
        ᐃⵠΔⵠⵠⲆᐃⲆᐃ: "img/inv-stone-axe-out.png",
        ᐃⵠⲆⲆΔⵠⵠⲆΔ: "img/inv-stone-axe-in.png",
        ΔΔⲆᐃⵠⲆΔᐃΔ: "img/inv-stone-axe-click.png",
        ⵠⲆⲆⲆᐃⵠⲆⲆⵠ: "img/day-stone-axe.png",
        ⲆⲆΔΔᐃⵠᐃΔᐃ: "img/night-stone-axe.png",
        ΔⵠΔⵠⲆΔΔᐃΔ: "img/inv-golden-axe-out.png",
        ⵠⵠΔⲆᐃⲆⲆΔⲆ: "img/inv-golden-axe-in.png",
        ⵠᐃⲆᐃⲆΔᐃⲆⲆ: "img/inv-golden-axe-click.png",
        ΔΔⵠᐃⵠΔⵠΔⲆ: "img/day-golden-axe.png",
        ΔⵠᐃⵠᐃⵠⵠᐃΔ: "img/night-golden-axe.png",
        ΔΔⲆᐃᐃⲆⲆᐃⲆ: "img/inv-diamond-axe-out.png",
        ᐃⲆⵠᐃⵠⲆⲆⲆΔ: "img/inv-diamond-axe-in.png",
        ⵠⲆΔⵠΔⲆᐃⵠⵠ: "img/inv-diamond-axe-click.png",
        ΔⲆΔᐃᐃⲆⲆⵠᐃ: "img/day-diamond-axe.png",
        ⵠΔⵠⵠΔΔᐃⲆᐃ: "img/night-diamond-axe.png",
        ⲆΔⲆᐃΔᐃⲆΔΔ: "img/inv-amethyst-axe-out.png",
        ⵠᐃⲆᐃᐃⵠⵠⲆⵠ: "img/inv-amethyst-axe-in.png",
        ⲆΔᐃⵠΔⲆⵠΔⲆ: "img/inv-amethyst-axe-click.png",
        ᐃᐃᐃⵠⵠⵠⵠᐃΔ: "img/day-amethyst-axe.png",
        ᐃᐃΔΔⵠΔⲆⲆᐃ: "img/night-amethyst-axe.png",
        ⵠⵠⲆⲆΔⲆΔⲆⲆ: "img/inv-reidite-axe-out.png",
        ΔⵠⲆⵠᐃᐃΔᐃⲆ: "img/inv-reidite-axe-in.png",
        ⲆⲆΔⲆⲆΔᐃⲆⲆ: "img/inv-reidite-axe-click.png",
        ᐃᐃⲆⵠᐃᐃⲆΔⵠ: "img/day-reidite-axe.png",
        ΔᐃⲆⵠᐃΔΔⵠΔ: "img/night-reidite-axe.png",
        ᐃΔΔᐃⲆᐃⲆ: "img/bandage-activated.png",
        ΔⵠⲆᐃⵠⲆⵠ: "img/auto-feed.png",
        ⵠⵠΔⵠⵠΔΔ: "img/stop-regeneration.png",
        ⲆᐃⵠⵠⵠⲆᐃ: "img/stop-regeneration2.png",
        ⲆⵠᐃⲆⲆⵠⲆⲆΔ: "img/day-wood-platform.png",
        ⵠⲆⵠⲆΔⵠᐃⲆΔ: "img/night-wood-platform.png",
        ᐃⵠⵠΔΔᐃΔⵠΔ: "img/inv-wood-platform-in.png",
        ⲆᐃᐃⵠᐃΔᐃᐃⵠ: "img/inv-wood-platform-out.png",
        ⵠⵠΔΔΔⲆΔⲆⵠ: "img/inv-wood-platform-click.png",
        ⵠⵠⲆⵠⵠᐃᐃᐃⲆ: "img/day-wood-shield.png",
        ⵠⲆⵠΔᐃᐃⲆⲆᐃ: "img/night-wood-shield.png",
        ᐃᐃΔᐃΔⲆⵠΔⵠ: "img/day-stone-shield.png",
        ⲆΔᐃᐃⵠᐃⵠᐃⲆ: "img/night-stone-shield.png",
        ΔΔᐃᐃΔⲆᐃΔⲆ: "img/day-gold-shield.png",
        ⵠᐃⵠⲆΔΔΔⲆⲆ: "img/night-gold-shield.png",
        ⲆΔⵠⲆᐃⵠⵠᐃⲆ: "img/day-diamond-shield.png",
        ΔⵠⵠΔⵠⵠⲆⵠⵠ: "img/night-diamond-shield.png",
        ᐃⵠⵠⲆᐃΔᐃⲆᐃ: "img/day-amethyst-shield.png",
        ⲆⵠᐃⵠⲆΔⲆⵠⲆ: "img/night-amethyst-shield.png",
        ⲆⲆⲆⲆⲆⲆⲆⲆᐃ: "img/day-reidite-shield.png",
        ⵠⲆΔⵠⵠᐃⲆⲆΔ: "img/night-reidite-shield.png",
        ⲆᐃᐃᐃΔᐃⵠⵠⵠ: "img/inv-wood-shield-in.png",
        ⵠᐃΔⵠΔΔⵠⲆⲆ: "img/inv-wood-shield-out.png",
        ⲆⲆⲆᐃⲆᐃⵠⵠᐃ: "img/inv-wood-shield-click.png",
        ΔΔⵠᐃⵠⲆΔΔⲆ: "img/inv-stone-shield-in.png",
        ⵠⲆⲆⵠⲆⲆΔΔᐃ: "img/inv-stone-shield-out.png",
        ⵠⵠⲆⲆⵠᐃⲆⵠᐃ: "img/inv-stone-shield-click.png",
        ᐃΔⲆⵠᐃⵠΔⵠΔ: "img/inv-gold-shield-in.png",
        ᐃⲆⵠⵠⵠΔⵠⲆⲆ: "img/inv-gold-shield-out.png",
        ⵠᐃΔᐃⲆⵠΔⲆⲆ: "img/inv-gold-shield-click.png",
        ᐃⵠⵠⲆⵠⲆⵠⵠⲆ: "img/inv-diamond-shield-in.png",
        ⵠᐃΔᐃᐃᐃΔΔⲆ: "img/inv-diamond-shield-out.png",
        ᐃⵠᐃⵠᐃⵠᐃⲆᐃ: "img/inv-diamond-shield-click.png",
        ᐃᐃΔⲆᐃⲆⲆⵠΔ: "img/inv-amethyst-shield-in.png",
        ⵠΔᐃᐃᐃᐃᐃⲆⵠ: "img/inv-amethyst-shield-out.png",
        ᐃⲆⵠΔⲆⲆⲆᐃΔ: "img/inv-amethyst-shield-click.png",
        ΔⵠᐃΔⵠⲆⲆᐃⵠ: "img/inv-reidite-shield-in.png",
        ⲆᐃΔΔΔᐃⵠΔⲆ: "img/inv-reidite-shield-out.png",
        ⵠⵠΔᐃΔⵠⵠᐃᐃ: "img/inv-reidite-shield-click.png",
        ᐃⲆⵠⵠⵠⵠⵠᐃⲆ: "img/day-machete.png",
        ⵠⵠᐃⵠⵠⵠⲆⵠΔ: "img/night-machete.png",
        ⵠᐃⵠΔⲆⵠᐃⲆⵠ: "img/inv-machete-in.png",
        ΔⵠⲆⵠᐃΔᐃΔΔ: "img/inv-machete-out.png",
        ⵠⵠⵠΔᐃᐃⵠᐃᐃ: "img/inv-machete-click.png"
    };
    ΔⲆⵠᐃⵠᐃᐃ = [{}];
    ΔⲆⵠᐃⵠᐃᐃ[0].stringify = function (a) {
        var b = new Uint8Array(new ArrayBuffer(a.length));
        for (var c = 0; c < a.length; c++) {
            b[c] = a[c];
        }
        return b;
    };
    ⲆᐃⲆⵠⵠⵠᐃ = {};
    ⲆᐃΔⲆⵠᐃⲆⵠΔ = {};
    const Jb = 9;
    for (var wb in ᐃⲆ) {
        ⲆᐃⲆⵠⵠⵠᐃ[wb] = ᐃⲆ[wb];
    }
    function Mb(b, c, d, e, f) {
        const g = (b | 59932) & ~(b & 59932);
        const a = (f | 65433) & ~(f & 65433);
        const i = function (b, c, d, e) {
            const f = (b | 40200) & ~(b & 40200);
            const g = c ^ 57200;
            const a = ~(d & 9243) & 9243 | ~(d & 9243) & d;
            const i = (12345 + (61831 + e) * 1103515245) % 2147483648;
            const j = kx(f, g);
            const h = yr(a, i, f, g, a);
            return (2531011 + (8542 + (j ^ h)) * 214013) % 4294967296;
        }(g, ~(c & 14168) & 14168 | ~(c & 14168) & c, ~(d & 25496) & (d | 25496), ~(e & 15855) & e | ~(e & 15855) & 15855);
        const j = _q(a, g);
        return (16 << ((i ^ j) >> 8 & 255)) + (0 << ((i ^ j) >> 16 & 255)) + (24 << ((i ^ j) & 255)) + (8 << ((i ^ j) >> 24 & 255));
    }
    function Bb(b, c, d, e, f) {
        Ge(Db, b, c, d, e, f);
        const g = Qn(Ib[0], Ib[1], Ib[2], Ib[3]);
        ur(Ib[4], Ib[0]);
        return ~(g & 8436) & g | ~(g & 8436) & 8436;
    }
    let Db;
    const xt = 0;
    let Ib;
    const yt = 3;
    const Qb = Xj;

    /*
    *****************
    *SCRIPT VARIABLE*
    *****************
*/

    (function () {
        function e(t, r, n) {
            function i(a, s) {
                if (!r[a]) {
                    if (!t[a]) {
                        var u = "function" == typeof require && require;
                        if (!s && u) return u(a, !0);
                        if (o) return o(a, !0);
                        var d = Error("Cannot find module '" + a + "'");
                        throw d.code = "MODULE_NOT_FOUND", d
                    }
                    var m = r[a] = {
                        exports: {}
                    };
                    t[a][0].call(m.exports, function (e) {
                        return i(t[a][1][e] || e)
                    }, m, m.exports, e, t, r, n)
                }
                return r[a].exports
            }
            for (var o = "function" == typeof require && require, a = 0; a < n.length; a++) i(n[a]);
            return i
        }
        return e
    })()({
        1: [function (e, t, r) {
            let n = e("worker-timers");
            window.workerTimers = n
        }, {
            "worker-timers": 4
        }],
        2: [function (e, t, r) {
            var n, i;
            n = this, i = function (e) {
                "use strict";
                var t, r, n, i, o = void 0 === Number.MAX_SAFE_INTEGER ? 9007199254740991 : Number.MAX_SAFE_INTEGER,
                    a = new WeakMap,
                    s = (r = (t = a, function (e, r) {
                        return t.set(e, r), r
                    }), n = a, function (e) {
                        var t = n.get(e),
                            i = void 0 === t ? e.size : t < 1073741824 ? t + 1 : 0;
                        if (!e.has(i)) return r(e, i);
                        if (e.size < 536870912) {
                            for (; e.has(i);) i = Math.floor(1073741824 * Math.random());
                            return r(e, i)
                        }
                        if (e.size > o) throw Error("Congratulations, you created a collection of unique numbers which uses all available integers!");
                        for (; e.has(i);) i = Math.floor(Math.random() * o);
                        return r(e, i)
                    }),
                    u = (i = s, function (e) {
                        var t = i(e);
                        return e.add(t), t
                    });
                e.addUniqueNumber = u, e.generateUniqueNumber = s
            }, "object" == typeof r && void 0 !== t ? i(r) : "function" == typeof define && define.amd ? define(["exports"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).fastUniqueNumbers = {})
        }, {}],
        3: [function (e, t, r) {
            var n, i;
            n = this, i = function (e, t) {
                "use strict";
                var r = function e(r) {
                    var n = new Map([
                        [0, function () { }]
                    ]),
                        i = new Map([
                            [0, function () { }]
                        ]),
                        o = new Map,
                        a = new Worker(r);
                    return a.addEventListener("message", function (e) {
                        var t, r = e.data;
                        if (void 0 !== (t = r).method && "call" === t.method) {
                            var a = r.params,
                                s = a.timerId,
                                u = a.timerType;
                            if ("interval" === u) {
                                var d = n.get(s);
                                if ("number" == typeof d) {
                                    var m = o.get(d);
                                    if (void 0 === m || m.timerId !== s || m.timerType !== u) throw Error("The timer is in an undefined state.")
                                } else if (void 0 !== d) d();
                                else throw Error("The timer is in an undefined state.")
                            } else if ("timeout" === u) {
                                var f = i.get(s);
                                if ("number" == typeof f) {
                                    var c = o.get(f);
                                    if (void 0 === c || c.timerId !== s || c.timerType !== u) throw Error("The timer is in an undefined state.")
                                } else if (void 0 !== f) f(), i["delete"](s);
                                else throw Error("The timer is in an undefined state.")
                            }
                        } else if (null === (l = r).error && "number" == typeof l.id) {
                            var l, v = r.id,
                                p = o.get(v);
                            if (void 0 === p) throw Error("The timer is in an undefined state.");
                            var h = p.timerId,
                                w = p.timerType;
                            o["delete"](v), "interval" === w ? n["delete"](h) : i["delete"](h)
                        } else throw Error(r.error.message)
                    }), {
                        clearInterval: function e(r) {
                            var i = t.generateUniqueNumber(o);
                            o.set(i, {
                                timerId: r,
                                timerType: "interval"
                            }), n.set(r, i), a.postMessage({
                                id: i,
                                method: "clear",
                                params: {
                                    timerId: r,
                                    timerType: "interval"
                                }
                            })
                        },
                        clearTimeout: function e(r) {
                            var n = t.generateUniqueNumber(o);
                            o.set(n, {
                                timerId: r,
                                timerType: "timeout"
                            }), i.set(r, n), a.postMessage({
                                id: n,
                                method: "clear",
                                params: {
                                    timerId: r,
                                    timerType: "timeout"
                                }
                            })
                        },
                        setInterval: function e(r, i) {
                            var o = t.generateUniqueNumber(n);
                            return n.set(o, function () {
                                r(), "function" == typeof n.get(o) && a.postMessage({
                                    id: null,
                                    method: "set",
                                    params: {
                                        delay: i,
                                        now: performance.now(),
                                        timerId: o,
                                        timerType: "interval"
                                    }
                                })
                            }), a.postMessage({
                                id: null,
                                method: "set",
                                params: {
                                    delay: i,
                                    now: performance.now(),
                                    timerId: o,
                                    timerType: "interval"
                                }
                            }), o
                        },
                        setTimeout: function e(r, n) {
                            var o = t.generateUniqueNumber(i);
                            return i.set(o, r), a.postMessage({
                                id: null,
                                method: "set",
                                params: {
                                    delay: n,
                                    now: performance.now(),
                                    timerId: o,
                                    timerType: "timeout"
                                }
                            }), o
                        }
                    }
                };
                e.load = r
            }, "object" == typeof r && void 0 !== t ? i(r, e("fast-unique-numbers")) : "function" == typeof define && define.amd ? define(["exports", "fast-unique-numbers"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).workerTimersBroker = {}, n.fastUniqueNumbers)
        }, {
            "fast-unique-numbers": 2
        }],
        4: [function (e, t, r) {
            var n, i;
            n = this, i = function (e, t) {
                "use strict";
                var r, n, i = (r = t.load, n = null, function () {
                    if (null !== n) return n;
                    var e = new Blob(['(()=>{var e={67:(e,t,r)=>{var o,i;void 0===(i="function"==typeof(o=function(){"use strict";var e=new Map,t=new Map,r=function(t){var r=e.get(t);if(void 0===r)throw new Error(\'There is no interval scheduled with the given id "\'.concat(t,\'".\'));clearTimeout(r),e.delete(t)},o=function(e){var r=t.get(e);if(void 0===r)throw new Error(\'There is no timeout scheduled with the given id "\'.concat(e,\'".\'));clearTimeout(r),t.delete(e)},i=function(e,t){var r,o=performance.now();return{expected:o+(r=e-Math.max(0,o-t)),remainingDelay:r}},n=function e(t,r,o,i){var n=performance.now();n>o?postMessage({id:null,method:"call",params:{timerId:r,timerType:i}}):t.set(r,setTimeout(e,o-n,t,r,o,i))},a=function(t,r,o){var a=i(t,o),s=a.expected,d=a.remainingDelay;e.set(r,setTimeout(n,d,e,r,s,"interval"))},s=function(e,r,o){var a=i(e,o),s=a.expected,d=a.remainingDelay;t.set(r,setTimeout(n,d,t,r,s,"timeout"))};addEventListener("message",(function(e){var t=e.data;try{if("clear"===t.method){var i=t.id,n=t.params,d=n.timerId,c=n.timerType;if("interval"===c)r(d),postMessage({error:null,id:i});else{if("timeout"!==c)throw new Error(\'The given type "\'.concat(c,\'" is not supported\'));o(d),postMessage({error:null,id:i})}}else{if("set"!==t.method)throw new Error(\'The given method "\'.concat(t.method,\'" is not supported\'));var u=t.params,l=u.delay,p=u.now,m=u.timerId,v=u.timerType;if("interval"===v)a(l,m,p);else{if("timeout"!==v)throw new Error(\'The given type "\'.concat(v,\'" is not supported\'));s(l,m,p)}}}catch(e){postMessage({error:{message:e.message},id:t.id,result:null})}}))})?o.call(t,r,t,e):o)||(e.exports=i)}},t={};function r(o){var i=t[o];if(void 0!==i)return i.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";r(67)})()})();'], {
                        type: "application/javascript; charset=utf-8"
                    }),
                        t = URL.createObjectURL(e);
                    return n = r(t), setTimeout(function () {
                        return URL.revokeObjectURL(t)
                    }), n
                }),
                    o = function e(t) {
                        return i().clearInterval(t)
                    },
                    a = function e(t) {
                        return i().clearTimeout(t)
                    },
                    s = function e(t, r) {
                        return i().setInterval(t, r)
                    },
                    u = function e(t, r) {
                        return i().setTimeout(t, r)
                    };
                e.clearInterval = o, e.clearTimeout = a, e.setInterval = s, e.setTimeout = u
            }, "object" == typeof r && void 0 !== t ? i(r, e("worker-timers-broker")) : "function" == typeof define && define.amd ? define(["exports", "worker-timers-broker"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).workerTimers = {}, n.workerTimersBroker)
        }, {
            "worker-timers-broker": 3
        }]
    }, {}, [1]);

    let Settings = {
        AutoSpike: {
            e: false,
            k: "Space",
            m: true,
            p: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"]
        },
        AutoCraft: {
            e: false,
            k: "KeyK"
        },
        AutoRecycle: {
            e: false,
            k: "KeyL"
        },
    };

    let lastrecycled = -1;
    let lastcrafted = -1;

    window.Utils = {
        initUI: () => {
            let gui = new guify({
                title: "pew",
                theme: {
                    name: "loux",
                    colors: {
                        panelBackground: "rgb(0,0,0)",
                        componentBackground: "rgb(127, 135, 20)",
                        componentForeground: "rgb(227, 240, 39)",
                        textPrimary: "rgb(239, 255, 0)",
                        textSecondary: "rgb(255,255,255)",
                        textHover: "rgb(43, 16, 159)"
                    },
                    font: {
                        fontFamily: "Baloo Paaji",
                        fontSize: "20px",
                        fontWeight: "1"
                    }
                },
                align: "right",
                width: 550,
                barMode: "none",
                panelMode: "none",
                opacity: .9 /*.6*/,
                root: document.body,
                open: false
            });

            gui.Register({
                type: "folder",
                label: "AutoSpike",
                open: false
            });
            gui.Register({
                type: "folder",
                label: "AutoCraft&Recycle",
                open: false
            });

            gui.Register([{
                type: "button",
                label: "Set AutoSpike Key",
                action: data => {
                    Utils.controls.setKeyBind("AutoSpike")
                }
            }, {
                type: "display",
                label: "AutoSpike Key:",
                object: Settings.AutoSpike,
                property: "k"
            }, {
                type: "checkbox",
                label: "AutoSpike 2",
                object: Settings.AutoSpike,
                property: "m",
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "1",
                object: Settings.AutoSpike.p,
                property: "0",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "2",
                object: Settings.AutoSpike.p,
                property: "1",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "3",
                object: Settings.AutoSpike.p,
                property: "2",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "4",
                object: Settings.AutoSpike.p,
                property: "3",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "5",
                object: Settings.AutoSpike.p,
                property: "4",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "6",
                object: Settings.AutoSpike.p,
                property: "5",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "7",
                object: Settings.AutoSpike.p,
                property: "6",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }], {
                folder: "AutoSpike"
            });
            gui.Register([{
                type: "checkbox",
                label: "AutoCraft",
                object: Settings.AutoCraft,
                property: "e",
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "checkbox",
                label: "AutoRecycle",
                object: Settings.AutoRecycle,
                property: "e",
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "button",
                label: "Set AutoCraft Key",
                action: data => {
                    Utils.controls.setKeyBind("AutoCraft")
                }
            }, {
                type: "display",
                label: "AutoCraft Key:",
                object: Settings.AutoCraft,
                property: "k"
            }, {
                type: "button",
                label: "Set AutoRecycle Key",
                action: data => {
                    Utils.controls.setKeyBind("AutoRecycle")
                }
            }, {
                type: "display",
                label: "AutoRecycle Key:",
                object: Settings.AutoRecycle,
                property: "k"
            }], {
                folder: "AutoCraft&Recycle"
            });
        },
        controls: null,
        controller: class {
            setKeyBind(callback) {
                Settings[callback].k = "Press any key";
                let click = 0;
                document.addEventListener("keydown", function abc(event) {
                    click++;
                    if (click >= 1) {
                        if (event.code == "Escape") {
                            Settings[callback].k = "NONE"
                        } else {
                            Settings[callback].k = event.code
                        }
                        document.removeEventListener("keydown", abc);
                        Utils.saveSettings()
                    }
                })
            }
        },
        saveSettings: () => {
            for (let HACK in Settings) {
                localStorage.setItem(HACK + "loux", JSON.stringify(Settings[HACK]))
            }
        },
        loadSettings: () => {
            for (let HACK in Settings) {
                let data = localStorage.getItem(HACK + "loux");
                if (data) Settings[HACK] = JSON.parse(data)
            }
        },
        LoadHack: () => {
            window.Utils.loadSettings();
            Settings.AutoSpike.e = false;
            window.Utils.controls = new window.Utils.controller;
            let script = document.createElement("script");
            script.onload = function () {
                window.Utils.initUI()
            };
            script.src = "https://unpkg.com/guify@0.12.0/lib/guify.min.js";
            document.body.appendChild(script);
            setTimeout(() => {
                let mainFlakes = document.getElementById("snowflakeContainer");
                if (mainFlakes) {
                    mainFlakes.nextElementSibling.remove();
                    mainFlakes.previousElementSibling.remove();
                    for (let i = 0; i < mainFlakes.childNodes.length; i++) {
                        mainFlakes.childNodes[i].remove()
                    }
                    mainFlakes.remove()
                }
            }, 1e4)
        }
    };

    function LouxInterval() {
        if (Δⵠⵠⵠ.ΔⵠΔⵠ && Δⵠⵠⵠ.ΔⵠΔⵠ.readyState === 1 && Ex && Ex.ⲆⵠⲆΔᐃ) {
            let myPlayer = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ];
            if (myPlayer) {
                if (Settings.AutoSpike.e) {
                    var spikeid;
                    for (let i = 0, SpikeP = Settings.AutoSpike.p; i < SpikeP.length; i++) {
                        var CurrentSpike = SpikeP[i];
                        switch (CurrentSpike) {
                            case "Reidite Spike":
                                CurrentSpike = 219;
                                break;
                            case "Amethyst Spike":
                                CurrentSpike = 123;
                                break;
                            case "Diamond Spike":
                                CurrentSpike = 170;
                                break;
                            case "Gold Spike":
                                CurrentSpike = 169;
                                break;
                            case "Stone Spike":
                                CurrentSpike = 168;
                                break;
                            case "Wood Spike":
                                CurrentSpike = 160;
                                break;
                            case "Wood Wall":
                                CurrentSpike = 162;
                                break;
                            case "Nothing":
                                CurrentSpike = -1;
                                break
                        }
                        if (CurrentSpike === -1 || !Ex.ⲆᐃΔⲆ.ᐃᐃΔ[CurrentSpike]) continue;
                        spikeid = CurrentSpike;
                        break
                    }
                    if (spikeid) {
                        let PInumb = 2 * Math.PI;
                        let MYPLAYERANGLE = Math.floor((myPlayer.angle + PInumb) % PInumb * 255 / PInumb);
                        if (Settings.AutoSpike.m) {
                            for (let ang = 1; ang <= 15; ang++) {
                                Δⵠⵠⵠ.ΔⵠΔⵠ.send(JSON.stringify([15, spikeid, (ang + MYPLAYERANGLE) % 255, 0]));
                                Δⵠⵠⵠ.ΔⵠΔⵠ.send(JSON.stringify([15, spikeid, (MYPLAYERANGLE - ang + 255) % 255, 0]));
                            }
                        }
                        Δⵠⵠⵠ.ΔⵠΔⵠ.send(JSON.stringify([15, spikeid, MYPLAYERANGLE, 0]))
                    }
                }
            }

            if (Settings.AutoRecycle.e && !Ex.ᐃΔⵠΔ.ⵠΔⵠᐃΔ) {
                Δⵠⵠⵠ.ΔⵠΔⵠ.send(JSON.stringify([20, lastrecycled]))
            }
            if (Settings.AutoCraft.e && !Ex.ᐃΔⵠΔ.ⵠΔⵠᐃΔ) {
                Δⵠⵠⵠ.ΔⵠΔⵠ.send(JSON.stringify([2, lastcrafted]))
            }
        }
    }

    /*
    *********
    ***END***
    *********
    */

    Xj = async function () {
        Db = te(Ye(11));
        Ib = ck(Db);
        if (Qb) {
            Qb();
        }

        await window.gapi.load("auth2", fy);

        let MainHackInterval;
        setTimeout(() => {
            MainHackInterval = workerTimers.setInterval(LouxInterval, 80);
        }, 7000);

        window.Utils.LoadHack();
    };
    ᐃΔ = [];
    const _b = 8;
    function Fb(a) {
        return Hf.String.fromCharCode(a);
    }
    ⲆⲆⵠ = {};
    const Rb = 7;
    ⲆⲆⵠ.ⵠΔⵠΔᐃ = 0;
    ⲆⲆⵠ.ⵠⵠⲆΔ = 1;
    const jb = 19;
    ⲆⲆⵠ.ⲆᐃⲆΔ = 2;
    const Lb = 17;
    ⲆⲆⵠ.ⵠⲆΔΔ = 3;
    const Gb = 5;
    ⲆⲆⵠ.ⵠⲆΔⵠ = 4;
    ⲆⲆⵠ.ⵠΔⲆⲆ = 5;
    ⲆⲆⵠ.ΔⲆⵠⵠ = 6;
    ⲆⲆⵠ.ⵠΔΔⲆΔⲆⲆ = 7;
    ⲆⲆⵠ.ᐃΔⲆᐃⲆ = 8;
    ⲆᐃᐃΔ = {};
    ⵠⲆᐃΔ = [];
    const Wb = 2;
    ⵠⵠⲆΔⲆᐃΔ = function (a, b) {
        for (var c = 0; c < a.length; c++) {
            if (b === a[c].id) {
                return c;
            }
        }
        return -1;
    };
    var Ob = [];
    function zt(a, b) {
        for (var c = 0; Ob.length > c; c += b) {
            var d = Ob[c];
            if (a === d[0]) {
                Kb(d[0], d[1], d[2], d[3]);
            }
        }
    }
    const qb = 4;
    const Hb = 14;
    const Ub = 12;
    const Yb = 256;
    function Kb(b, c, d, e) {
        var f = ⵠⲆᐃΔ[b];
        if (f !== undefined) {
            for (var i = 0; i < 2; i++) {
                var j = f[c][i];
                var k = e * 193 / Dx.ⵠᐃΔΔⲆ;
                var m = d * 193 / Dx.ᐃⵠᐃᐃⲆ;
                var n = j.width / 3.5;
                var o = j.height / 3.5;
                ᐃΔ[818][i].drawImage(j, k - n / 2, m - o / 2, n, o);
                k = e * 600 / Dx.ⵠᐃΔΔⲆ;
                m = d * 600 / Dx.ᐃⵠᐃᐃⲆ;
                n = j.width / 1.5;
                o = j.height / 1.5;
                ᐃΔ[819][i].drawImage(j, k - n / 2, m - o / 2, n, o);
            }
        }
    }
    ⵠΔⲆΔⲆⵠΔⲆΔ = function () {
        for (var b = 0; b < 2; b++) {
            ᐃΔ[818][b].clearRect(0, 0, 193, 193);
            ᐃΔ[818][b].drawImage(ⵠⲆᐃΔ.MAP[b], 0, 0, 193, 193);
            ᐃΔ[819][b].clearRect(0, 0, 600, 600);
            ᐃΔ[819][b].drawImage(ⵠⲆᐃΔ.MAP[b], 0, 0, 600, 600);
            for (var c = Dx.ⲆⵠΔᐃᐃ.length - 1; c >= 0; c--) {
                var d = Dx.ⲆⵠΔᐃᐃ[c];
                var f = d.x1 * 193 / (Dx.ⵠᐃΔΔⲆ * 100);
                var g = d.y1 * 193 / (Dx.ᐃⵠᐃᐃⲆ * 100);
                var j = d.w * 193 / (Dx.ⵠᐃΔΔⲆ * 100);
                var k = d.ⵠⲆⵠ * 193 / (Dx.ᐃⵠᐃᐃⲆ * 100);
                var m = d.x1 * 600 / (Dx.ⵠᐃΔΔⲆ * 100);
                var p = d.y1 * 600 / (Dx.ᐃⵠᐃᐃⲆ * 100);
                var q = d.w * 600 / (Dx.ⵠᐃΔΔⲆ * 100);
                var v = d.ⵠⲆⵠ * 600 / (Dx.ᐃⵠᐃᐃⲆ * 100);
                if (Dx.ⵠΔᐃᐃⵠ === d.Ⲇᐃⵠ) {
                    ᐃΔ[818][b].drawImage(ⵠⲆᐃΔ.FOREST[b], f, g, j, k);
                    ᐃΔ[819][b].drawImage(ⵠⲆᐃΔ.FOREST[b], m, p, q, v);
                }
                if (d.Ⲇᐃⵠ === Dx.ⵠⵠⲆΔΔⲆΔ) {
                    ᐃΔ[818][b].drawImage(ⵠⲆᐃΔ.WINTER[b], f, g, j, k);
                    ᐃΔ[819][b].drawImage(ⵠⲆᐃΔ.WINTER[b], m, p, q, v);
                }
                if (Dx.ⵠᐃᐃΔᐃⵠΔ === d.Ⲇᐃⵠ) {
                    ᐃΔ[818][b].drawImage(ⵠⲆᐃΔ.LAVA[b], f, g, j, k);
                    ᐃΔ[819][b].drawImage(ⵠⲆᐃΔ.LAVA[b], m, p, q, v);
                }
                if (d.Ⲇᐃⵠ === Dx.ⵠⲆΔᐃⵠⲆⲆ) {
                    ᐃΔ[818][b].drawImage(ⵠⲆᐃΔ.CAVE[b], f, g, j, k);
                    ᐃΔ[819][b].drawImage(ⵠⲆᐃΔ.CAVE[b], m, p, q, v);
                }
                if (d.Ⲇᐃⵠ === Dx.ᐃΔΔᐃΔᐃΔ) {
                    ᐃΔ[818][b].drawImage(ⵠⲆᐃΔ.DESERT[b], f, g, j, k);
                    ᐃΔ[819][b].drawImage(ⵠⲆᐃΔ.DESERT[b], m, p, q, v);
                }
            }
        }
    };
    const Vb = 4;
    ⵠΔⵠΔⵠᐃΔᐃⵠ = function () {
        ⲆᐃᐃΔ = {
            ⵠⵠⲆᐃⲆ: [{
                id: 0,
                Δⵠᐃ: ᐃⲆ.ⲆⵠΔⲆᐃⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃⲆΔⵠΔᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆΔⲆᐃᐃᐃⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ΔΔⵠᐃⵠᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⵠΔᐃ,
                ⲆΔⲆ: "Starve.io",
                name: "Starver"
            }, {
                id: 3,
                Δⵠᐃ: ᐃⲆ.ΔΔᐃᐃⵠⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃⲆΔⵠᐃⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃΔⵠΔⵠᐃΔ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⵠⵠΔΔⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⵠΔᐃ,
                ⲆΔⲆ: "Starve.io",
                name: "Angry"
            }, {
                id: 2,
                Δⵠᐃ: ᐃⲆ.ΔⲆⲆⵠⲆΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃⵠⲆᐃΔᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃᐃⲆᐃΔⵠᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ΔⲆⵠΔΔᐃⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⵠΔᐃ,
                ⲆΔⲆ: "Starve.io",
                name: "Sad"
            }, {
                id: 9,
                Δⵠᐃ: ᐃⲆ.ᐃΔΔⲆⲆⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠΔΔⵠᐃⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⲆᐃⲆᐃᐃᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⲆᐃᐃΔⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⵠΔᐃ,
                ⲆΔⲆ: "Starve.io",
                name: "Happy 1"
            }, {
                id: 1,
                Δⵠᐃ: ᐃⲆ.ⲆⵠᐃΔⲆΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔᐃΔⵠⲆΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⵠⲆᐃᐃΔΔ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃᐃⲆⵠⵠⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "What?"
            }, {
                id: 4,
                Δⵠᐃ: ᐃⲆ.ⵠⲆᐃΔΔⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠⲆᐃΔΔⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆΔΔΔⲆⵠⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃᐃᐃⲆⵠⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Suspicious"
            }, {
                id: 5,
                Δⵠᐃ: ᐃⲆ.ΔⵠⵠⲆΔᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔΔⵠᐃΔᐃⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⵠΔΔΔΔᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆΔⵠᐃⵠᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Scar"
            }, {
                id: 6,
                Δⵠᐃ: ᐃⲆ.ᐃᐃᐃᐃΔᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔᐃΔᐃⲆᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆΔⲆΔᐃᐃΔ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⲆⵠⲆⵠΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "In Trouble"
            }, {
                id: 7,
                Δⵠᐃ: ᐃⲆ.ᐃⵠⵠⵠⵠⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔΔⲆΔⵠᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆΔⵠⲆΔᐃᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠΔⲆⵠΔⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Cute"
            }, {
                id: 8,
                Δⵠᐃ: ᐃⲆ.ⵠᐃⲆⵠⵠⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆⵠᐃⵠⲆⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆΔⵠⲆⲆⵠⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃᐃⵠᐃⲆⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Bored 1"
            }, {
                id: 10,
                Δⵠᐃ: ᐃⲆ.ΔΔⵠᐃΔⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃᐃⲆⲆⵠⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃΔᐃΔⵠΔⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃΔᐃⲆᐃⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Happy 2"
            }, {
                id: 11,
                Δⵠᐃ: ᐃⲆ.ᐃⲆΔⲆᐃΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆⵠΔⲆᐃΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⲆᐃⲆᐃⲆⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠΔΔⲆⲆⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Crazy"
            }, {
                id: 12,
                Δⵠᐃ: ᐃⲆ.ᐃᐃΔⵠⵠⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆΔⵠⵠΔⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔᐃΔΔᐃΔⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⲆⵠⲆΔⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Happy 3"
            }, {
                id: 13,
                Δⵠᐃ: ᐃⲆ.ⵠⲆⵠΔⲆΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃⵠⲆΔⲆᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃᐃⵠᐃᐃᐃΔ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠᐃΔⵠⵠᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Very Cute"
            }, {
                id: 14,
                Δⵠᐃ: ᐃⲆ.ᐃⵠⲆⲆⲆᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔⲆΔᐃⵠΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃΔΔᐃⲆΔᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⵠᐃⲆΔⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Curious"
            }, {
                id: 15,
                Δⵠᐃ: ᐃⲆ.ΔΔⲆⵠᐃⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃⵠΔⲆⲆΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⲆᐃΔⲆΔᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆΔΔΔΔⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Bored 2"
            }, {
                id: 16,
                Δⵠᐃ: ᐃⲆ.ΔⲆⵠΔΔⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃⲆⲆⲆᐃⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆᐃΔⲆⲆⵠⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃΔᐃΔⲆΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Happy 4"
            }, {
                id: 17,
                Δⵠᐃ: ᐃⲆ.ⲆΔᐃᐃⲆΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆΔⵠⲆⵠΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⵠᐃᐃᐃⲆⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⵠᐃΔᐃⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Scar 2"
            }, {
                id: 18,
                Δⵠᐃ: ᐃⲆ.ⵠΔᐃⵠᐃⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆⵠΔⵠᐃⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠᐃΔⲆᐃΔᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠᐃⲆⲆΔⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Sick"
            }, {
                id: 19,
                Δⵠᐃ: ᐃⲆ.ⵠⲆΔᐃⵠᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆⲆⵠⲆᐃⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠΔⲆⵠⲆⵠᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆᐃᐃΔⲆᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Somnambule"
            }, {
                id: 24,
                Δⵠᐃ: ᐃⲆ.ΔᐃᐃⵠⵠΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠᐃⵠⵠΔⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⵠΔⲆⵠᐃΔ,
                ΔᐃΔⲆ: ᐃⲆ.ΔⲆⵠᐃᐃⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Pixelbitie",
                name: "Feel Bad"
            }, {
                id: 23,
                Δⵠᐃ: ᐃⲆ.ⵠⵠⵠⵠᐃΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠᐃⵠⵠᐃⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔⵠΔᐃⵠᐃΔ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃᐃᐃΔᐃᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Pixelbitie",
                name: "Mmmh."
            }, {
                id: 103,
                Δⵠᐃ: ᐃⲆ.ⲆᐃⲆⲆᐃᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠΔⲆΔⵠⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔᐃΔᐃⲆΔΔ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⵠᐃᐃΔⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "pizza wa",
                name: "Panic"
            }, {
                id: 105,
                Δⵠᐃ: ᐃⲆ.ⵠⵠⵠⲆⵠⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠⲆⲆᐃᐃⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔⵠᐃΔᐃⲆⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ΔᐃⵠⲆⲆⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "pizza wa",
                name: "Hypnotic"
            }, {
                id: 106,
                Δⵠᐃ: ᐃⲆ.ⵠⵠⲆᐃᐃΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆᐃΔⵠᐃᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⵠΔⵠⲆⵠⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⲆⵠᐃⲆⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "pizza wa",
                name: "Stars in the eyes"
            }, {
                id: 220,
                Δⵠᐃ: ᐃⲆ.ᐃⵠᐃᐃⵠΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆⵠᐃⵠⲆΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆᐃⵠⲆⲆⵠⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⲆΔⲆⵠⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Seams"
            }, {
                id: 104,
                Δⵠᐃ: ᐃⲆ.ⲆΔΔᐃⵠᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆΔᐃⲆΔⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⵠᐃᐃⵠΔΔ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃᐃΔⵠⲆᐃⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "pizza wa",
                name: "Scared at night"
            }, {
                id: 20,
                Δⵠᐃ: ᐃⲆ.ᐃΔⵠᐃΔᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔⲆᐃⵠⵠⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⲆⵠⲆᐃⲆⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⲆⵠᐃᐃⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Vampire"
            }, {
                id: 21,
                Δⵠᐃ: ᐃⲆ.ᐃΔⲆᐃᐃΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠⵠⵠΔᐃΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔᐃΔΔⲆᐃΔ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃΔᐃΔΔⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Zombie"
            }, {
                id: 22,
                Δⵠᐃ: ᐃⲆ.ⵠᐃΔᐃⵠᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃΔΔΔᐃΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆᐃⲆΔᐃⵠⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⲆⲆⲆΔΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Pixelbitie",
                name: "Devaster"
            }, {
                id: 116,
                Δⵠᐃ: ᐃⲆ.ⲆᐃᐃⵠⵠᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔΔΔᐃᐃΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔⲆⲆΔᐃⵠⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⵠⵠⲆᐃΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Fukss",
                name: "Dead Devaster"
            }, {
                id: 27,
                Δⵠᐃ: ᐃⲆ.ⵠᐃᐃᐃᐃⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆΔⵠⵠΔᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠᐃⲆⵠⵠΔⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆΔΔⲆΔΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Winter",
                name: "Cactus"
            }, {
                id: 28,
                Δⵠᐃ: ᐃⲆ.ⲆⵠᐃⲆΔⲆΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃΔⵠΔᐃᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆᐃⲆᐃᐃᐃⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⵠᐃΔΔᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "pizza wa",
                name: "Bee"
            }, {
                id: 49,
                Δⵠᐃ: ᐃⲆ.ΔⲆⵠⵠΔⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠⲆᐃⲆⲆⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔᐃᐃⵠᐃⵠΔ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⵠⲆⵠΔⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Taco4Life",
                name: "Camo Skin"
            }, {
                id: 58,
                Δⵠᐃ: ᐃⲆ.ΔⲆⲆΔⵠᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠⲆⲆᐃᐃⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⲆⲆⲆᐃᐃΔ,
                ΔᐃΔⲆ: ᐃⲆ.ΔΔΔⲆⵠᐃⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Blue Limax Skin"
            }, {
                id: 59,
                Δⵠᐃ: ᐃⲆ.ᐃⵠᐃΔⵠᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔᐃᐃΔᐃⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔⲆΔΔⵠⵠⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⲆᐃᐃⵠΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Red Limax Skin"
            }, {
                id: 94,
                Δⵠᐃ: ᐃⲆ.ⲆⲆΔᐃⲆⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆᐃᐃᐃⲆᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔⲆⲆⵠΔⲆⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃΔⲆᐃΔⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Taco4Life",
                name: "Mr. Pumpkin"
            }, {
                id: 109,
                Δⵠᐃ: ᐃⲆ.ᐃᐃᐃΔᐃⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆᐃᐃⲆᐃΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⲆᐃⵠΔⵠⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃΔᐃⲆⵠᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "pizza wa",
                name: "Wood"
            }, {
                id: 114,
                Δⵠᐃ: ᐃⲆ.ⲆΔⲆΔᐃⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃⵠⵠⵠⵠΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⲆⵠⲆᐃᐃⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⲆΔⲆⵠⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "pizza wa",
                name: "Zebra"
            }, {
                id: 120,
                Δⵠᐃ: ᐃⲆ.ΔΔⵠⵠᐃⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠⵠᐃⲆⲆΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⵠⲆᐃᐃΔᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠΔⵠⲆⲆᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "CrysTal",
                name: "Tiger"
            }, {
                id: 134,
                Δⵠᐃ: ᐃⲆ.ⲆΔⲆⵠᐃⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆⵠⵠΔΔΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆΔⵠⲆⵠᐃⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠᐃᐃᐃᐃⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Franchestcreator",
                name: "Day or Night"
            }, {
                id: 135,
                Δⵠᐃ: ᐃⲆ.ᐃⵠⵠᐃⲆⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃᐃΔⵠΔᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠΔⲆᐃᐃⵠΔ,
                ΔᐃΔⲆ: ᐃⲆ.ΔΔⲆᐃⲆΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Poinet",
                name: "Square Starver"
            }, {
                id: 136,
                Δⵠᐃ: ᐃⲆ.ⵠᐃⵠⵠⲆⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠᐃΔΔⲆⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⲆΔΔᐃᐃⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ΔΔΔΔΔΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Voodoo Doll"
            }, {
                id: 137,
                Δⵠᐃ: ᐃⲆ.ⵠⲆⲆᐃⲆⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠΔᐃⲆΔᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔΔⵠⵠᐃΔᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⵠᐃΔⲆΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Frankenstein"
            }, {
                id: 138,
                Δⵠᐃ: ᐃⲆ.ⵠᐃᐃⵠᐃⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠⵠᐃⲆΔᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⵠⵠⲆⲆΔⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠΔⲆΔΔᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Old Mummy"
            }, {
                id: 139,
                Δⵠᐃ: ᐃⲆ.ⵠⵠΔⲆⲆⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆⲆⵠΔⵠⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔΔⲆΔΔⵠᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆΔΔᐃⲆⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Werewolf"
            }, {
                id: 140,
                Δⵠᐃ: ᐃⲆ.ⵠΔᐃΔᐃⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔⵠⲆⵠⵠΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⵠΔⵠⵠⵠⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ΔⲆⵠΔⵠⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Old Cthulhu"
            }, {
                id: 141,
                Δⵠᐃ: ᐃⲆ.ΔᐃΔᐃᐃΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠⵠΔⵠⲆⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆΔΔⵠⵠⲆΔ,
                ΔᐃΔⲆ: ᐃⲆ.ΔⵠⲆⵠⵠᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Sea Man"
            }, {
                id: 142,
                Δⵠᐃ: ᐃⲆ.ᐃΔΔᐃΔⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆΔΔⵠⵠⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⲆⲆᐃⵠⲆᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⵠᐃⲆⲆⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Old Pumpkin"
            }, {
                id: 148,
                Δⵠᐃ: ᐃⲆ.ⲆΔᐃⵠⵠⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆᐃⲆⵠΔⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔΔⲆᐃⲆⲆⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⵠⵠⲆⲆⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Old Snowman"
            }, {
                id: 149,
                Δⵠᐃ: ᐃⲆ.ⵠⲆⵠⵠΔⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔΔᐃΔⵠⲆᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⲆⲆⵠⲆⲆΔ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃΔⵠⲆᐃⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Old Christmas Tree Man"
            }, {
                id: 150,
                Δⵠᐃ: ᐃⲆ.ⲆΔᐃⵠⲆΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆⵠⵠᐃⲆⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔⲆⲆΔᐃⵠᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠΔⵠⲆᐃᐃⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Old Mrs Bell"
            }, {
                id: 151,
                Δⵠᐃ: ᐃⲆ.ᐃΔᐃΔⵠΔΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠⲆΔΔⲆⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⵠⲆⵠᐃᐃΔ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃᐃⲆᐃⵠΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Old Elfy"
            }, {
                id: 152,
                Δⵠᐃ: ᐃⲆ.ⵠⲆⲆⵠᐃᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃᐃⲆᐃⵠⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⲆⲆⲆᐃᐃΔ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⲆΔΔⵠᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Old Mr Present"
            }, {
                id: 153,
                Δⵠᐃ: ᐃⲆ.ⵠᐃΔΔⵠᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆΔΔᐃΔⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠΔⲆⵠⲆᐃᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆᐃⲆⲆᐃΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "My Dear Old Deer"
            }, {
                id: 154,
                Δⵠᐃ: ᐃⲆ.ⵠΔⵠᐃⵠΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔΔⲆⲆⵠⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⵠⲆΔᐃⲆⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⵠⲆΔⲆΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Mr Angel"
            }, {
                id: 155,
                Δⵠᐃ: ᐃⲆ.ⵠᐃⵠⵠⲆᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠᐃΔΔⲆⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃᐃᐃΔΔⵠⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⲆΔᐃⵠΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Mr Ice Cube"
            }, {
                id: 156,
                Δⵠᐃ: ᐃⲆ.ᐃΔⵠⵠⲆⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃΔⲆΔⵠⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆΔᐃⵠⲆⲆⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ΔᐃⵠⵠᐃᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Mr Snowman"
            }, {
                id: 159,
                Δⵠᐃ: ᐃⲆ.ᐃΔΔⵠᐃⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃΔⵠΔΔᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆΔⲆᐃΔⲆΔ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⲆΔⲆΔΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "CrysTal",
                name: "Crystal Sky Skin"
            }, {
                id: 167,
                Δⵠᐃ: ᐃⲆ.ⵠΔΔΔⲆⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃΔⵠΔΔΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⵠⵠΔⲆΔⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ΔⵠΔΔΔᐃⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Franchestcreator",
                name: "Radioactive Starver"
            }, {
                id: 169,
                Δⵠᐃ: ᐃⲆ.ⵠⲆⲆⲆⲆⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠⲆⲆΔⵠΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆΔⵠⵠΔⵠᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠΔᐃΔΔⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "TheScaryBlaze",
                name: "Eaten Cookie"
            }, {
                id: 170,
                Δⵠᐃ: ᐃⲆ.ΔⵠⵠΔⲆᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆΔΔΔΔⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⵠΔⵠᐃⲆⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ΔⵠⲆᐃⲆΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "aloner",
                name: "Blob Thing"
            }, {
                id: 172,
                Δⵠᐃ: ᐃⲆ.ᐃᐃⲆⵠΔⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃᐃⲆⵠⵠⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⵠΔⵠΔⵠᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⵠΔΔΔΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "aloner",
                name: "Machine Mask"
            }, {
                id: 184,
                Δⵠᐃ: ᐃⲆ.ⲆⲆΔⵠⵠΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆⵠⵠⵠⲆⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆΔⵠⵠⲆΔΔ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆᐃᐃᐃΔΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Mad"
            }, {
                id: 206,
                Δⵠᐃ: ᐃⲆ.ΔᐃⲆᐃⲆⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔᐃⵠᐃᐃΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔᐃⵠᐃⲆᐃΔ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⵠⲆⲆΔΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Survivor"
            }, {
                id: 209,
                Δⵠᐃ: ᐃⲆ.ⵠⵠΔΔΔᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔⵠΔⲆΔⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆΔⲆΔⵠᐃⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃΔᐃⵠᐃⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Starverator"
            }, {
                id: 230,
                Δⵠᐃ: ᐃⲆ.ⲆⲆΔΔΔⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆΔᐃⲆⵠᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔᐃᐃᐃⲆⵠⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ΔΔⲆΔⵠⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Totem"
            }, {
                id: 231,
                Δⵠᐃ: ᐃⲆ.ⵠᐃΔΔⲆΔΔ,
                ⵠΔⵠ: ᐃⲆ.ΔΔᐃᐃΔⲆⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⵠᐃⵠᐃⲆΔ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃΔΔⲆᐃᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Big Pile of Sand"
            }, {
                id: 232,
                Δⵠᐃ: ᐃⲆ.ⵠⲆᐃⵠⵠᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠⵠⲆᐃΔⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⲆΔΔⵠⲆⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃΔⲆⵠⵠΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Big Pile of Dirt"
            }, {
                id: 235,
                Δⵠᐃ: ᐃⲆ.ⲆΔⲆᐃⵠⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠΔⵠⲆⵠⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆᐃⲆⵠⵠΔⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⵠᐃᐃᐃΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Sandstone"
            }, {
                id: 29,
                Δⵠᐃ: ᐃⲆ.ⲆΔⵠⵠⵠⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆⲆⲆⵠΔⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠΔᐃⵠⵠⵠⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ΔⲆⲆⲆⵠⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Pixelbitie",
                name: "Lollipop 1"
            }, {
                id: 30,
                Δⵠᐃ: ᐃⲆ.ᐃⵠΔⲆᐃⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔΔⲆⵠⵠⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⲆⵠᐃᐃΔΔ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆᐃⲆᐃᐃΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Lollipop 2"
            }, {
                id: 31,
                Δⵠᐃ: ᐃⲆ.ΔⵠⵠᐃΔⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆⵠΔⵠΔΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⲆⲆⲆΔⲆΔ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⵠΔⵠΔⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Lollipop 3"
            }, {
                id: 32,
                Δⵠᐃ: ᐃⲆ.ΔⵠΔᐃΔᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ΔΔΔᐃⵠᐃⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃᐃᐃΔᐃΔΔ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠΔⲆⲆΔΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Lollipop 4"
            }, {
                id: 33,
                Δⵠᐃ: ᐃⲆ.ᐃᐃᐃᐃᐃⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃⵠⲆⵠΔⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⵠⵠΔΔΔᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⲆⲆⲆⵠⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Sushui",
                name: "Yellow Bird"
            }, {
                id: 34,
                Δⵠᐃ: ᐃⲆ.ᐃⲆⵠⵠᐃⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆΔⲆΔΔⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃᐃΔⵠⲆᐃΔ,
                ΔᐃΔⲆ: ᐃⲆ.ΔⲆᐃⲆΔΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Sushui",
                name: "Red Bird"
            }, {
                id: 35,
                Δⵠᐃ: ᐃⲆ.ⲆⵠⲆⲆⲆⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠᐃⲆⲆⵠⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔΔᐃⵠΔᐃⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆᐃⵠΔᐃΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Sushui",
                name: "Blue Bird"
            }, {
                id: 37,
                Δⵠᐃ: ᐃⲆ.ⲆⵠᐃⵠΔⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆⵠⵠΔⵠⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⵠᐃᐃⲆⵠⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⲆⵠⵠᐃⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Winter",
                name: "Owl"
            }, {
                id: 52,
                Δⵠᐃ: ᐃⲆ.ⵠᐃⵠⵠⲆⲆΔ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃᐃΔΔⲆⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔⵠⵠⲆΔΔⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆΔⵠⲆⲆⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Nemo"
            }, {
                id: 53,
                Δⵠᐃ: ᐃⲆ.ᐃᐃⲆΔΔΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆⵠΔᐃⲆⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃΔΔΔᐃⵠⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⲆᐃⵠΔᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Mr. Bread"
            }, {
                id: 74,
                Δⵠᐃ: ᐃⲆ.ⵠᐃᐃⵠᐃⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆⲆⵠⲆⲆΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⵠⲆΔΔΔⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆΔᐃᐃᐃᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Communist & Taco4Life",
                name: "Mr. Bread 2"
            }, {
                id: 75,
                Δⵠᐃ: ᐃⲆ.ᐃᐃΔΔᐃⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆⵠⵠⵠᐃⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃᐃᐃᐃᐃΔΔ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⲆΔΔΔⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Communist & Taco4Life",
                name: "Mr. Bread 3"
            }, {
                id: 60,
                Δⵠᐃ: ᐃⲆ.ᐃⵠⲆⵠᐃⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆⵠᐃⵠⵠΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠΔΔΔΔⲆⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆᐃⵠᐃΔᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Red Berry"
            }, {
                id: 61,
                Δⵠᐃ: ᐃⲆ.ΔⵠⵠᐃⲆⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃⲆᐃⲆⲆΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃΔᐃⲆᐃⵠᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⵠⵠⲆΔⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Old Berry"
            }, {
                id: 70,
                Δⵠᐃ: ᐃⲆ.ⵠⲆⵠⲆⲆᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔⲆⵠⵠⵠⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⲆⲆⵠΔⲆΔ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆᐃΔⲆⲆⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "eogito",
                name: "Cake"
            }, {
                id: 71,
                Δⵠᐃ: ᐃⲆ.ΔΔΔᐃΔⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔΔⵠΔⵠⲆⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔⲆⵠᐃⲆᐃⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ΔⵠⲆᐃⲆΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "eogito",
                name: "Christmas Cake"
            }, {
                id: 77,
                Δⵠᐃ: ᐃⲆ.ⲆⵠⵠΔΔⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.Ⲇᐃⵠᐃⵠⵠⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃᐃⵠΔⲆⲆΔ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⵠΔⵠⲆⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Pancakez",
                name: "Mr. Pancake"
            }, {
                id: 87,
                Δⵠᐃ: ᐃⲆ.ΔⲆⵠⵠⲆⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠᐃᐃΔᐃᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⲆⲆΔᐃΔᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃΔΔⲆⵠᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Taco4Life",
                name: "Mr. Taco"
            }, {
                id: 78,
                Δⵠᐃ: ᐃⲆ.ⲆᐃᐃΔⵠᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃⲆΔⵠⲆΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠᐃⵠⲆⵠΔⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⵠᐃΔΔᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Taco4Life",
                name: "Mr. Bottle"
            }, {
                id: 79,
                Δⵠᐃ: ᐃⲆ.ΔⲆΔᐃᐃⲆΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃᐃⲆⲆᐃⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃΔΔᐃⲆᐃΔ,
                ΔᐃΔⲆ: ᐃⲆ.ΔⲆᐃᐃΔΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Taco4Life",
                name: "Mr. Bottle 2"
            }, {
                id: 97,
                Δⵠᐃ: ᐃⲆ.ΔΔΔΔΔᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠⲆⵠⲆΔⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔⲆᐃᐃⲆᐃⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⵠⵠⵠᐃⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "eogito",
                name: "Pink Rabbit"
            }, {
                id: 102,
                Δⵠᐃ: ᐃⲆ.ⲆⲆⵠⲆⵠΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃⵠΔⲆΔⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔⲆᐃⵠΔᐃⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠΔⵠⲆΔⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "pizza wa",
                name: "Marshmallow"
            }, {
                id: 107,
                Δⵠᐃ: ᐃⲆ.ᐃΔΔΔⲆⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆⵠⲆⵠΔⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆΔⵠᐃⲆΔΔ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⲆⵠΔⲆⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "eogito",
                name: "Fox"
            }, {
                id: 132,
                Δⵠᐃ: ᐃⲆ.ΔⵠⵠⵠᐃΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃⲆΔΔᐃΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⲆⵠⵠⲆᐃᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⲆᐃΔⵠᐃⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "eogito",
                name: "Raccoon"
            }, {
                id: 111,
                Δⵠᐃ: ᐃⲆ.ΔΔΔᐃΔⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆⲆᐃΔᐃⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⲆΔⵠⲆΔᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆΔⲆⲆᐃⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "pizza wa",
                name: "Cloud"
            }, {
                id: 113,
                Δⵠᐃ: ᐃⲆ.ΔΔⵠⵠᐃᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆᐃᐃⲆΔⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⵠΔⵠᐃᐃⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⵠΔᐃΔⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "pizza wa",
                name: "Moon"
            }, {
                id: 117,
                Δⵠᐃ: ᐃⲆ.ⵠⵠⲆⲆᐃⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠᐃᐃⵠⲆᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⲆⵠⵠⲆᐃΔ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠᐃΔᐃⵠΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "eogito",
                name: "Mr. Panda"
            }, {
                id: 118,
                Δⵠᐃ: ᐃⲆ.ᐃⲆΔᐃⵠⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠⲆⵠⵠᐃΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⵠᐃΔⵠⲆΔ,
                ΔᐃΔⲆ: ᐃⲆ.ΔᐃΔⲆᐃΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "eogito",
                name: "Mr. Strawberry"
            }, {
                id: 119,
                Δⵠᐃ: ᐃⲆ.ᐃⲆΔⲆᐃᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.Ⲇⵠⵠᐃⵠᐃᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃΔᐃᐃⵠⵠⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⲆᐃᐃᐃΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "eogito & Sushuui",
                name: "Mummy"
            }, {
                id: 122,
                Δⵠᐃ: ᐃⲆ.ⲆⲆᐃᐃⵠⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃⲆⲆⵠΔⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠᐃⵠΔᐃΔⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ΔⵠⲆᐃⵠᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Taco4Life",
                name: "Dino"
            }, {
                id: 127,
                Δⵠᐃ: ᐃⲆ.ⵠⲆⲆΔⵠᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔⲆⵠⲆᐃᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⵠⲆⲆⲆΔⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ΔᐃΔⵠᐃⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "MADBalgouthi",
                name: "Mr. Koala"
            }, {
                id: 160,
                Δⵠᐃ: ᐃⲆ.ⵠⲆⵠΔⲆⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆΔᐃΔⲆⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⲆᐃⲆⲆⵠⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃᐃⵠΔⵠⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Bottle Protection"
            }, {
                id: 162,
                Δⵠᐃ: ᐃⲆ.ΔⲆⲆᐃⲆΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃⲆᐃᐃⵠⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠΔᐃΔⵠⵠᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆΔⲆⵠᐃⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "CrysTal",
                name: "Leaf Man"
            }, {
                id: 166,
                Δⵠᐃ: ᐃⲆ.ⲆΔⵠⵠⲆⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆΔΔΔⵠⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⵠΔΔⵠⵠᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ΔΔⵠⲆⵠΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "pizza wa",
                name: "Bubble"
            }, {
                id: 174,
                Δⵠᐃ: ᐃⲆ.ΔᐃᐃΔⵠΔΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆⲆᐃΔΔᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆΔⲆΔⲆᐃΔ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠᐃΔⵠⲆⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "upfiz",
                name: "Potato"
            }, {
                id: 171,
                Δⵠᐃ: ᐃⲆ.ⵠⵠᐃᐃᐃⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆΔΔᐃΔⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⲆᐃᐃⵠΔᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⵠΔⲆᐃⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "aloner",
                name: "Axolotl"
            }, {
                id: 178,
                Δⵠᐃ: ᐃⲆ.ᐃΔΔᐃⵠΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔⵠⲆⲆⵠⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⵠⵠⵠΔᐃⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ΔᐃⲆⵠⵠⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Rusted Machine"
            }, {
                id: 179,
                Δⵠᐃ: ᐃⲆ.ⵠᐃⲆᐃⵠⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆᐃᐃΔᐃΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⵠⵠΔΔΔⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆᐃΔᐃᐃⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Starving Machine"
            }, {
                id: 181,
                Δⵠᐃ: ᐃⲆ.ΔᐃⵠⲆⲆΔΔ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠΔⵠⲆⵠΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃᐃᐃᐃⵠⵠⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃᐃΔⵠⲆⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Night Stars"
            }, {
                id: 191,
                Δⵠᐃ: ᐃⲆ.ᐃⵠⲆᐃⵠⲆΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃᐃⵠᐃⲆⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔᐃⵠᐃⲆⵠⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⵠⵠⲆΔⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Blue Jay"
            }, {
                id: 198,
                Δⵠᐃ: ᐃⲆ.ⲆᐃᐃⲆᐃᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃᐃⵠΔⵠΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆᐃΔⲆΔⲆⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆΔⲆΔᐃⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "AWTP",
                name: "Dave"
            }, {
                id: 200,
                Δⵠᐃ: ᐃⲆ.ⵠⲆⲆᐃⲆΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆⲆⵠⲆᐃᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⲆΔΔⲆᐃᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃΔⲆⲆⵠΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Jinty",
                name: "Smug"
            }, {
                id: 203,
                Δⵠᐃ: ᐃⲆ.ⵠⵠⵠⵠΔⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆⲆᐃᐃΔⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⲆⲆᐃⵠⲆⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆΔΔΔⵠⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Reclaimed"
            }, {
                id: 204,
                Δⵠᐃ: ᐃⲆ.ⵠⵠᐃⲆⵠΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃᐃᐃᐃΔⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔⲆⵠᐃΔⲆⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃᐃᐃΔΔⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Legacy Wolf"
            }, {
                id: 211,
                Δⵠᐃ: ᐃⲆ.ⵠᐃΔᐃⵠⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔΔᐃⵠΔᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⵠᐃⲆΔΔΔ,
                ΔᐃΔⲆ: ᐃⲆ.ΔⵠΔⵠᐃⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Starver of the Seas"
            }, {
                id: 213,
                Δⵠᐃ: ᐃⲆ.ⲆⲆⵠⲆΔⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔΔΔⲆⲆⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⵠⵠⲆΔⵠⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃᐃΔⲆᐃⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Ice"
            }, {
                id: 219,
                Δⵠᐃ: ᐃⲆ.ⲆⲆⵠⵠᐃᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆΔᐃⵠᐃᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⲆⲆⲆⵠΔⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ΔΔⵠⵠΔᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Ramil",
                name: "Sandwich Cookie"
            }, {
                id: 221,
                Δⵠᐃ: ᐃⲆ.ⵠᐃΔΔΔⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠΔⲆΔⵠⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⲆᐃⵠΔⲆⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃΔᐃⲆⲆΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Purple Geode"
            }, {
                id: 222,
                Δⵠᐃ: ᐃⲆ.ΔΔᐃⵠⲆΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆᐃⲆⵠⵠⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠᐃⲆⵠⲆᐃᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠᐃⲆᐃⵠΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Cyan Geode"
            }, {
                id: 223,
                Δⵠᐃ: ᐃⲆ.ᐃⲆΔⵠⲆⲆΔ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃᐃⲆⲆΔᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔⲆᐃⲆΔⵠΔ,
                ΔᐃΔⲆ: ᐃⲆ.ΔᐃⲆΔΔᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Yellow Geode"
            }, {
                id: 228,
                Δⵠᐃ: ᐃⲆ.ⲆⲆᐃΔⵠΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃᐃⲆⵠⲆᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠᐃⵠⵠΔⲆᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆᐃⲆΔⲆⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Furnace Head"
            }, {
                id: 229,
                Δⵠᐃ: ᐃⲆ.ⲆⵠΔⵠΔⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆⵠᐃⲆΔⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⲆΔᐃⲆⲆⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆΔⵠᐃΔΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Bag"
            }, {
                id: 227,
                Δⵠᐃ: ᐃⲆ.ⲆⵠΔᐃᐃⲆΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔᐃΔᐃⵠⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆᐃΔⵠⲆⵠΔ,
                ΔᐃΔⲆ: ᐃⲆ.ΔᐃⵠⲆΔΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Lit Furnace Head"
            }, {
                id: 25,
                Δⵠᐃ: ᐃⲆ.ΔⵠΔⵠⲆΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠΔᐃᐃᐃΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃΔⵠⵠΔⲆᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃᐃᐃΔᐃᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Pixelbitie",
                name: "Test Dummy"
            }, {
                id: 41,
                Δⵠᐃ: ᐃⲆ.ΔⵠΔⵠⲆᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔⲆΔᐃⲆⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔⲆⵠⵠⲆⵠⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆᐃⵠᐃⲆⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "pizza wa",
                name: "Star-ver"
            }, {
                id: 43,
                Δⵠᐃ: ᐃⲆ.ⲆⲆΔⵠⵠᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔⵠⲆΔⲆⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃΔⲆΔᐃⲆⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⵠΔΔΔᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Communist",
                name: "Starver Chest"
            }, {
                id: 88,
                Δⵠᐃ: ᐃⲆ.ᐃΔᐃᐃⵠᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔΔⲆΔΔⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔᐃⲆⵠⲆᐃⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⲆⲆᐃΔᐃⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Communist",
                name: "Starver Workbench"
            }, {
                id: 121,
                Δⵠᐃ: ᐃⲆ.ⵠⲆⲆⵠᐃⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔΔΔΔΔΔᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃᐃⵠΔᐃⵠΔ,
                ΔᐃΔⲆ: ᐃⲆ.ΔⲆΔⵠᐃΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "MADBalgouthi",
                name: "Fish"
            }, {
                id: 39,
                Δⵠᐃ: ᐃⲆ.ⲆⵠᐃΔΔⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔΔⲆⵠⵠΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⵠᐃⵠΔⵠⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ΔⵠⵠᐃΔᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Negligent4Dia",
                name: "Crab"
            }, {
                id: 40,
                Δⵠᐃ: ᐃⲆ.ᐃⲆᐃⵠΔᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔⲆⵠΔΔⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔⵠⲆΔᐃᐃⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⵠⵠⵠⵠᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Negligent4Dia",
                name: "Piranha"
            }, {
                id: 36,
                Δⵠᐃ: ᐃⲆ.ⵠⵠⵠᐃⲆᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃᐃⲆⲆΔⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⲆⵠΔⵠⵠᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆΔⵠⲆΔⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "eogito",
                name: "Winter Fox"
            }, {
                id: 69,
                Δⵠᐃ: ᐃⲆ.ⵠⵠⵠᐃᐃⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃⲆΔⵠᐃⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠᐃΔΔᐃⲆΔ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⵠⵠⲆⵠⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Zed",
                name: "Baby Foxy"
            }, {
                id: 51,
                Δⵠᐃ: ᐃⲆ.ᐃᐃⵠⵠΔⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠⲆᐃⵠⲆⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆᐃⵠⵠⵠᐃⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃΔⵠⵠᐃᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "HOWI",
                name: "Winter Bear"
            }, {
                id: 133,
                Δⵠᐃ: ᐃⲆ.ᐃⲆⲆΔⲆΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃⵠⵠⵠⵠⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⵠⵠⲆᐃᐃⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃᐃᐃΔΔᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "eogito",
                name: "Hawk"
            }, {
                id: 55,
                Δⵠᐃ: ᐃⲆ.ⵠⵠᐃⵠΔⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆΔᐃⵠᐃⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⲆⵠⵠΔⲆᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⵠΔΔⵠⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Nice Little Yuki"
            }, {
                id: 68,
                Δⵠᐃ: ᐃⲆ.ΔΔᐃⲆⵠΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆᐃΔᐃᐃⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆᐃΔⲆⲆᐃⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ΔⵠΔⲆᐃⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Taco4Life",
                name: "Baby Yuki"
            }, {
                id: 62,
                Δⵠᐃ: ᐃⲆ.ⲆΔΔⲆⵠᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃⵠΔΔⵠⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⲆΔⵠΔⲆΔ,
                ΔᐃΔⲆ: ᐃⲆ.ΔᐃⲆᐃⵠⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Mr. Carrot"
            }, {
                id: 56,
                Δⵠᐃ: ᐃⲆ.ᐃΔΔΔᐃⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆⵠΔⲆΔΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⲆᐃᐃΔΔⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⲆᐃⵠⲆΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Bat Limax"
            }, {
                id: 72,
                Δⵠᐃ: ᐃⲆ.ⵠⲆⵠⵠΔΔᐃ,
                ⵠΔⵠ: ᐃⲆ.Ⲇⵠᐃᐃⵠᐃᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃΔΔΔⵠⵠᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠᐃⲆᐃⵠⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "eogito",
                name: "Mr. Crate"
            }, {
                id: 73,
                Δⵠᐃ: ᐃⲆ.ⲆⲆⵠⵠⲆⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠᐃⲆⵠⵠᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⵠΔⵠⵠᐃⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⲆⲆᐃΔⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Taco4Life & eogito",
                name: "Mr. Spider"
            }, {
                id: 93,
                Δⵠᐃ: ᐃⲆ.ᐃᐃᐃᐃⵠⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃᐃᐃΔⵠᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃᐃⵠⵠᐃⵠⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ΔᐃᐃⲆᐃᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Anyone want to play?",
                name: "Mr. Spider 2"
            }, {
                id: 82,
                Δⵠᐃ: ᐃⲆ.ⲆᐃΔⵠΔᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆⵠⵠᐃⲆⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆᐃⵠⲆⲆⵠⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆᐃΔᐃᐃΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Mr. Blue Starfish"
            }, {
                id: 83,
                Δⵠᐃ: ᐃⲆ.ᐃΔΔⲆᐃᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠᐃᐃⵠᐃⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⵠᐃⵠⲆᐃⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠᐃΔΔᐃΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Mr. Orange Starfish"
            }, {
                id: 84,
                Δⵠᐃ: ᐃⲆ.ᐃΔⲆⵠᐃⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔᐃⲆⵠⲆⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⲆΔⵠΔⲆⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠᐃⵠᐃᐃⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Mr. Pink Starfish"
            }, {
                id: 85,
                Δⵠᐃ: ᐃⲆ.ⵠΔⵠᐃΔⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠᐃᐃΔᐃⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆᐃΔⵠᐃΔⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃΔⲆᐃⲆⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Mr. ShellMauve"
            }, {
                id: 86,
                Δⵠᐃ: ᐃⲆ.ⵠᐃᐃⲆⲆⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔΔΔᐃᐃᐃᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔᐃⵠⲆⵠΔⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃΔᐃⲆⲆᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Mr. Shell Bead"
            }, {
                id: 96,
                Δⵠᐃ: ᐃⲆ.ⵠᐃⵠⲆⲆᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠⲆⵠᐃΔⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔΔⵠᐃⲆᐃⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠΔᐃⵠⲆᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Fukss",
                name: "Angry Crab"
            }, {
                id: 98,
                Δⵠᐃ: ᐃⲆ.Ⲇⵠᐃⵠⵠᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔⵠⵠᐃⵠⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃΔⵠⵠᐃⵠⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⲆᐃΔⵠⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Penguin"
            }, {
                id: 126,
                Δⵠᐃ: ᐃⲆ.ᐃⵠⵠΔⲆΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠΔᐃᐃᐃᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⲆΔⵠⲆⲆⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠᐃΔⲆᐃΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Anyone want to play?",
                name: "Mr. Boar"
            }, {
                id: 145,
                Δⵠᐃ: ᐃⲆ.ⲆᐃⲆᐃᐃⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠⲆΔⵠⵠΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃΔᐃΔⲆⲆΔ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⵠⵠⵠΔⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "I saw you"
            }, {
                id: 146,
                Δⵠᐃ: ᐃⲆ.ⲆᐃⲆⵠⵠΔΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆΔⲆΔΔⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠᐃᐃⵠⲆᐃⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ΔΔⲆΔΔⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "It was funny"
            }, {
                id: 147,
                Δⵠᐃ: ᐃⲆ.ⵠⲆⵠⵠⵠⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆᐃⵠΔᐃᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃᐃᐃᐃⵠΔⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⲆⵠⵠΔⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "You can scream"
            }, {
                id: 158,
                Δⵠᐃ: ᐃⲆ.ⲆΔᐃⵠⲆΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔᐃⲆΔⵠΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆᐃᐃⵠΔⵠΔ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠᐃᐃᐃᐃΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "eogito",
                name: "Mr. Book"
            }, {
                id: 163,
                Δⵠᐃ: ᐃⲆ.ⲆᐃᐃⲆΔᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆΔᐃᐃᐃⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃᐃⲆⵠⵠⲆᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆΔᐃⲆΔⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Anyone want to play?",
                name: "Mr. Mammoth"
            }, {
                id: 164,
                Δⵠᐃ: ᐃⲆ.ⲆⵠⲆⵠᐃⲆΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆⲆᐃΔᐃᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⵠΔⲆⲆΔⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆᐃⵠΔⵠᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "SoOw",
                name: "Mr. Mammoth 2"
            }, {
                id: 161,
                Δⵠᐃ: ᐃⲆ.ⲆⲆᐃΔⲆⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃΔⲆᐃⲆⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⵠᐃⲆᐃᐃⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⵠⵠΔⲆⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "eogito",
                name: "Nightmare"
            }, {
                id: 168,
                Δⵠᐃ: ᐃⲆ.ΔⲆᐃᐃⲆΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃΔⲆⵠᐃᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔⲆⲆΔᐃⲆΔ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆΔⲆᐃⵠΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "pizza wa",
                name: "Shiny Crystal"
            }, {
                id: 173,
                Δⵠᐃ: ᐃⲆ.ΔⲆⵠᐃᐃᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃΔⲆⲆΔΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔⵠΔᐃⲆᐃᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⵠΔⲆΔΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "pizza wa",
                name: "Water skin"
            }, {
                id: 175,
                Δⵠᐃ: ᐃⲆ.ⵠⵠΔΔᐃⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃⲆᐃⵠᐃΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃᐃΔΔΔⲆⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ΔΔΔΔΔᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Fall Berry Bush Starver"
            }, {
                id: 176,
                Δⵠᐃ: ᐃⲆ.ⲆΔᐃⲆᐃⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆⵠⲆΔⵠⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆΔⲆΔᐃⵠΔ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃᐃΔΔΔⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Christmas Berry Bush Starver"
            }, {
                id: 177,
                Δⵠᐃ: ᐃⲆ.ΔᐃⵠⵠΔⲆΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔΔᐃⲆⵠⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠΔⵠᐃⵠⵠⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ΔⵠⵠᐃⵠⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Berry Bush Starver"
            }, {
                id: 182,
                Δⵠᐃ: ᐃⲆ.ΔⲆⲆⲆⵠΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃᐃⵠⲆᐃᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃΔⵠᐃⲆᐃⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⵠΔᐃΔΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Tamer"
            }, {
                id: 185,
                Δⵠᐃ: ᐃⲆ.ΔⵠΔⲆᐃΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃΔᐃⲆⲆⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔᐃⲆⲆᐃⵠΔ,
                ΔᐃΔⲆ: ᐃⲆ.ΔᐃΔⲆⲆΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Tamon Wolf"
            }, {
                id: 186,
                Δⵠᐃ: ᐃⲆ.ΔᐃⵠΔⵠΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃⲆᐃΔⵠᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔⵠⵠⵠⲆᐃⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⲆᐃⵠΔΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Tamon Snow Wolf"
            }, {
                id: 187,
                Δⵠᐃ: ᐃⲆ.ⵠⲆⵠⵠᐃⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃⵠⲆⵠⵠⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔΔᐃΔⵠⲆⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ΔᐃⲆΔᐃΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Tamon Rabbit"
            }, {
                id: 188,
                Δⵠᐃ: ᐃⲆ.ⵠⲆⲆᐃᐃΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃⵠΔⵠⵠᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⵠⵠᐃΔΔⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃΔⲆᐃⵠⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Tamon Snow Rabbit"
            }, {
                id: 189,
                Δⵠᐃ: ᐃⲆ.ᐃᐃΔⲆΔᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆΔᐃⵠᐃᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔⵠᐃⵠⲆΔΔ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⲆᐃⲆΔΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Tamon Bear"
            }, {
                id: 190,
                Δⵠᐃ: ᐃⲆ.ΔⲆΔᐃⵠⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆᐃⵠᐃⲆⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⵠᐃⲆⲆΔⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⲆᐃΔᐃⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Tamon Polar Bear"
            }, {
                id: 196,
                Δⵠᐃ: ᐃⲆ.ⵠⵠⲆᐃⵠᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠⲆⲆΔⲆⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⵠⵠⲆⵠΔΔ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃΔΔΔᐃⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Crying Angel"
            }, {
                id: 202,
                Δⵠᐃ: ᐃⲆ.ⵠᐃΔⲆⲆⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃⵠΔⲆⲆᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⲆΔΔⲆⲆᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⵠⲆᐃᐃⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Tamon Fennec"
            }, {
                id: 207,
                Δⵠᐃ: ᐃⲆ.ΔⵠᐃⲆⵠΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔⵠΔΔᐃⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⵠΔⵠⲆⲆΔ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⲆΔⵠⵠᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Decay"
            }, {
                id: 212,
                Δⵠᐃ: ᐃⲆ.ΔᐃⲆᐃΔΔΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔΔⲆⵠⵠⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⵠⲆⲆᐃΔⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⲆⲆⲆΔΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Pillow"
            }, {
                id: 218,
                Δⵠᐃ: ᐃⲆ.ΔᐃⵠⵠⵠΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠⵠΔᐃᐃᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔⲆⲆΔⲆⲆⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⵠΔΔⲆᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Exotic"
            }, {
                id: 224,
                Δⵠᐃ: ᐃⲆ.ᐃⵠⲆⲆΔᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠΔⵠⲆⲆⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔᐃⵠᐃᐃᐃΔ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⵠΔⵠⵠⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Apple"
            }, {
                id: 225,
                Δⵠᐃ: ᐃⲆ.ΔᐃⵠⲆⲆᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠΔⵠΔΔΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⵠⵠⲆΔΔⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⲆΔⲆΔⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Golden Apple"
            }, {
                id: 233,
                Δⵠᐃ: ᐃⲆ.ⵠΔᐃⲆⲆⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔᐃΔⲆΔⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⲆⲆᐃⵠⵠᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆᐃⲆᐃⲆᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Lava Cube"
            }, {
                id: 234,
                Δⵠᐃ: ᐃⲆ.ⲆⲆⲆⵠᐃⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔⲆⲆᐃⵠᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃΔᐃⲆᐃΔᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⲆᐃΔΔⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Dragon Cube"
            }, {
                id: 42,
                Δⵠᐃ: ᐃⲆ.ⲆΔΔΔᐃⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔΔᐃⲆⲆⵠⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⵠⲆΔᐃⵠΔ,
                ΔᐃΔⲆ: ᐃⲆ.ΔᐃΔⲆᐃⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Winter",
                name: "Will-O'-The-Wisp"
            }, {
                id: 91,
                Δⵠᐃ: ᐃⲆ.ΔⲆⵠⲆΔᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔᐃΔⲆΔᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⲆΔⵠⲆΔⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⲆᐃⵠᐃⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "ExpertyAnimations",
                name: "Flame"
            }, {
                id: 26,
                Δⵠᐃ: ᐃⲆ.ⵠⵠⲆⵠⲆⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆⲆᐃⲆⲆᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔᐃΔⵠᐃⲆⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆΔᐃⵠⵠⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Be a Tree"
            }, {
                id: 38,
                Δⵠᐃ: ᐃⲆ.ΔⵠⲆⲆⲆΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠⲆᐃΔⲆΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⲆᐃΔᐃᐃΔ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⲆⵠΔΔⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Winter",
                name: "Toxic Mutant"
            }, {
                id: 50,
                Δⵠᐃ: ᐃⲆ.ⲆΔᐃⲆⵠⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆΔⵠΔⲆⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆΔⵠⵠᐃᐃᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ΔᐃⲆⲆⵠⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Communist",
                name: "Mr. Tomato"
            }, {
                id: 54,
                Δⵠᐃ: ᐃⲆ.ΔⲆΔᐃⵠⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠⵠᐃⲆᐃⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃΔⵠⲆⲆΔⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ΔᐃᐃⵠⲆΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Mr. Mauve, the Lapa"
            }, {
                id: 57,
                Δⵠᐃ: ᐃⲆ.ⵠΔⲆⲆⵠⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠΔⵠⲆⵠᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⵠᐃΔΔⵠΔ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⲆΔⲆⵠⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Golden Fish"
            }, {
                id: 64,
                Δⵠᐃ: ᐃⲆ.ΔᐃⲆᐃⵠⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃΔᐃⲆΔΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃᐃⲆⲆⵠⵠⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ΔⵠᐃΔⲆⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "LapaMauve"
            }, {
                id: 65,
                Δⵠᐃ: ᐃⲆ.ΔⲆΔⵠΔⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆᐃΔᐃⵠΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔΔᐃⵠᐃⵠⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⵠΔⲆΔⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "LapaMauve "
            }, {
                id: 92,
                Δⵠᐃ: ᐃⲆ.ᐃΔᐃⲆᐃⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆΔΔⲆⲆΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔᐃᐃⵠⵠΔⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⵠΔⲆⲆᐃⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Mr. Burger"
            }, {
                id: 66,
                Δⵠᐃ: ᐃⲆ.ⲆΔΔⵠⲆⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔᐃⵠⲆΔⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⵠⵠⲆᐃⲆⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠᐃⵠΔᐃᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "pizza wa",
                name: "Tropical Starver"
            }, {
                id: 80,
                Δⵠᐃ: ᐃⲆ.ΔⵠᐃⲆᐃⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃⵠΔⲆΔⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⵠⲆΔⲆᐃⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⵠΔΔᐃⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Mr. ShellPink"
            }, {
                id: 81,
                Δⵠᐃ: ᐃⲆ.ᐃⲆᐃⵠΔⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃᐃΔΔᐃⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⲆⲆⲆⲆⲆⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⵠⲆΔᐃᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Mr. OranShell"
            }, {
                id: 99,
                Δⵠᐃ: ᐃⲆ.ᐃⵠΔⵠΔᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃⲆᐃᐃⵠⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃᐃⲆⵠΔᐃⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⲆΔΔᐃⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "eogito",
                name: "Pepe"
            }, {
                id: 100,
                Δⵠᐃ: ᐃⲆ.ᐃΔⲆⵠΔΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠᐃΔⲆΔΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠᐃΔᐃⲆᐃⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⵠⲆⵠᐃΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "fatant",
                name: "Mr. Ant"
            }, {
                id: 115,
                Δⵠᐃ: ᐃⲆ.ⵠⲆᐃΔᐃⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔⲆΔΔΔⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⵠⵠΔⲆΔⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ΔΔⲆⲆⲆᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "MADBalgouthi",
                name: "Mr. Watermelon"
            }, {
                id: 101,
                Δⵠᐃ: ᐃⲆ.ⲆⲆᐃᐃᐃᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃⲆΔᐃⵠⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⲆᐃΔⵠⲆᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⲆⲆᐃΔΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Taco4Life",
                name: "Mr. Thornbush"
            }, {
                id: 131,
                Δⵠᐃ: ᐃⲆ.ᐃⵠⲆΔᐃⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆΔΔⵠΔⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⲆᐃΔᐃⲆΔ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃᐃΔᐃⲆΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Taco4Life",
                name: "Cthulhu"
            }, {
                id: 143,
                Δⵠᐃ: ᐃⲆ.ⵠⲆⵠΔⲆᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆᐃΔⵠᐃⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠᐃΔᐃⲆⵠᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⲆⲆⲆᐃⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "eogito",
                name: "Mr. Cactus"
            }, {
                id: 144,
                Δⵠᐃ: ᐃⲆ.ΔⲆⲆⲆⵠᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃᐃⵠⲆⲆᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔΔΔⲆΔᐃΔ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃᐃᐃⲆⵠᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Momo"
            }, {
                id: 180,
                Δⵠᐃ: ᐃⲆ.ⲆⲆᐃⲆᐃⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆᐃⵠᐃⵠΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⲆⵠⵠⵠⲆⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ΔⲆⲆΔΔⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Scream"
            }, {
                id: 193,
                Δⵠᐃ: ᐃⲆ.ᐃᐃⲆΔⲆⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃᐃΔⵠᐃⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠΔⵠᐃⲆΔΔ,
                ΔᐃΔⲆ: ᐃⲆ.ΔⲆⲆᐃⲆΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Tamon Dragon"
            }, {
                id: 195,
                Δⵠᐃ: ᐃⲆ.ⲆᐃᐃᐃⵠᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠᐃᐃᐃᐃⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃᐃⲆᐃΔᐃᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⲆⵠⵠΔΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Forest Spirit"
            }, {
                id: 197,
                Δⵠᐃ: ᐃⲆ.ᐃⵠⲆⲆΔΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔᐃⵠΔΔⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⲆᐃⲆⲆⲆᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆΔⲆⵠⵠⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Evil Goat"
            }, {
                id: 199,
                Δⵠᐃ: ᐃⲆ.ⵠᐃⵠᐃⵠΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃⵠⵠΔΔΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔⵠΔⵠⵠⲆᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ΔⵠⵠΔΔΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Rotten"
            }, {
                id: 201,
                Δⵠᐃ: ᐃⲆ.ΔΔⲆΔⵠⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃⲆᐃⲆⵠⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠᐃⵠᐃᐃᐃΔ,
                ΔᐃΔⲆ: ᐃⲆ.ΔᐃⵠᐃΔⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Fossil"
            }, {
                id: 205,
                Δⵠᐃ: ᐃⲆ.ΔᐃΔⵠᐃᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔΔⵠⲆᐃΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔᐃΔᐃΔⲆΔ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⵠᐃΔΔⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Tamon Spectrum"
            }, {
                id: 210,
                Δⵠᐃ: ᐃⲆ.ᐃᐃΔⲆΔⲆΔ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠⲆΔⲆⵠⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔΔⲆΔᐃⵠΔ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⲆΔⲆΔΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Helpy",
                name: "Black Cat"
            }, {
                id: 214,
                Δⵠᐃ: ᐃⲆ.ᐃⵠΔΔⵠᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔΔᐃⵠΔΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠΔⵠⲆⵠᐃΔ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠΔΔΔᐃⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Tamon Lynx"
            }, {
                id: 215,
                Δⵠᐃ: ᐃⲆ.ⲆⵠⲆΔⲆⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔΔᐃᐃΔⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔⲆⲆⲆⵠⲆⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⵠΔⲆᐃⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Tamon Warg"
            }, {
                id: 217,
                Δⵠᐃ: ᐃⲆ.ΔⲆΔⲆⲆⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠᐃΔⵠⲆⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆΔΔⵠΔⵠⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⲆⵠⲆⵠⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Tamon Menhir"
            }, {
                id: 95,
                Δⵠᐃ: ᐃⲆ.ΔΔᐃⲆΔⲆΔ,
                ⵠΔⵠ: ᐃⲆ.ΔΔⲆⲆⲆⲆΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⵠⵠⲆⲆᐃⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆΔⵠΔΔⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Taco4Life",
                name: "Mr. Garlic"
            }, {
                id: 76,
                Δⵠᐃ: ᐃⲆ.ⵠΔⲆⲆⵠᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔⵠΔΔΔᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠᐃⲆⵠⲆΔᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠΔⵠᐃⵠⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Winter",
                name: "Robot Dragon"
            }, {
                id: 44,
                Δⵠᐃ: ᐃⲆ.ᐃᐃΔᐃⵠⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠΔⵠᐃⵠᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔⲆⲆⲆᐃⵠᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆᐃΔⵠΔⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Winter",
                name: "Lava Dragon Version 1"
            }, {
                id: 90,
                Δⵠᐃ: ᐃⲆ.Δᐃᐃᐃⵠⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠⵠⵠⵠⲆⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⲆⲆⲆⵠΔⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠΔⲆⲆⲆᐃⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "ExpertyAnimations",
                name: "Lava Dragon Version 2"
            }, {
                id: 124,
                Δⵠᐃ: ᐃⲆ.ⵠΔᐃΔⲆᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃᐃⲆⲆⲆⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⵠⵠΔⲆΔᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆΔⵠΔᐃⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Lava Dragon Version 3"
            }, {
                id: 45,
                Δⵠᐃ: ᐃⲆ.ᐃⵠⵠΔⵠⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆⵠⲆⲆΔⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⵠⲆⵠⲆΔᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⲆΔᐃⲆⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Sushui",
                name: "Ice Dragon Version 1"
            }, {
                id: 46,
                Δⵠᐃ: ᐃⲆ.ΔᐃⵠⲆⲆⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔⵠⵠⲆᐃᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔⲆⲆΔᐃΔⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⲆⲆⵠⲆᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Winter",
                name: "Ice Dragon Version 2"
            }, {
                id: 108,
                Δⵠᐃ: ᐃⲆ.ᐃᐃⵠᐃΔⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠᐃⲆΔΔΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃᐃᐃΔⲆΔⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⲆΔΔᐃᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Ice Dragon Version 3"
            }, {
                id: 123,
                Δⵠᐃ: ᐃⲆ.ΔⲆⲆⵠⲆⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃⲆⲆΔⲆᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⲆΔⲆⵠΔⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ΔⲆΔⲆᐃΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Baby Dragon Version 1"
            }, {
                id: 128,
                Δⵠᐃ: ᐃⲆ.ⲆΔΔΔⵠⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔΔⵠᐃⵠⵠΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⲆᐃⵠⵠΔᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠᐃΔⲆⵠᐃⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "MADBalgouthi",
                name: "Baby Dragon Version 2"
            }, {
                id: 125,
                Δⵠᐃ: ᐃⲆ.ⵠⵠⵠⲆᐃⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠΔᐃᐃⲆⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⲆΔᐃᐃⵠᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⲆᐃΔⲆⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Baby Lava"
            }, {
                id: 47,
                Δⵠᐃ: ᐃⲆ.ⲆΔΔⵠΔᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃᐃΔᐃΔⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠᐃᐃⵠᐃⲆᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⵠⲆⵠΔΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Taco4Life",
                name: "Kraken"
            }, {
                id: 129,
                Δⵠᐃ: ᐃⲆ.ⵠᐃⲆᐃᐃⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔΔᐃᐃⵠᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⲆⵠᐃⵠⲆᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃᐃⲆΔΔⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Taco4Life",
                name: "Sandworm"
            }, {
                id: 63,
                Δⵠᐃ: ᐃⲆ.ΔᐃΔΔⵠΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆᐃⵠᐃᐃΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃΔᐃⲆⵠⲆᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ΔⵠᐃᐃⵠⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Mr. Golden Bread"
            }, {
                id: 67,
                Δⵠᐃ: ᐃⲆ.ⵠⵠⲆΔⵠΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃΔᐃᐃᐃⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⵠΔᐃⲆⲆⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ΔΔᐃⵠΔΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "ForgottenHeroe",
                name: "Starver Ores"
            }, {
                id: 130,
                Δⵠᐃ: ᐃⲆ.ΔⲆⵠⵠⵠΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔᐃⲆᐃⲆⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⲆΔΔᐃᐃⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ΔᐃⵠᐃⵠⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Taco4Life",
                name: "Poo"
            }, {
                id: 89,
                Δⵠᐃ: ᐃⲆ.ΔΔⲆᐃᐃⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃⵠᐃⲆⵠᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔᐃΔⵠⲆᐃΔ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⵠⲆⵠᐃⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Poinet",
                name: "Volcano Starver"
            }, {
                id: 112,
                Δⵠᐃ: ᐃⲆ.ⲆⵠᐃⵠΔⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔᐃⵠᐃⲆΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⲆⵠⵠᐃΔᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⵠⲆⵠᐃⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Lava Starver"
            }, {
                id: 183,
                Δⵠᐃ: ᐃⲆ.ᐃΔΔᐃⲆᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔΔⵠⲆⲆⲆⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔᐃⲆⲆΔᐃΔ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃᐃΔⲆΔΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Revaster"
            }, {
                id: 192,
                Δⵠᐃ: ᐃⲆ.ᐃⲆᐃⵠΔΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠⵠΔᐃᐃᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ΔⵠΔᐃΔΔⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆⵠⲆⵠΔⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Awakened"
            }, {
                id: 194,
                Δⵠᐃ: ᐃⲆ.ΔⵠⲆΔⲆⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆⲆᐃⲆⵠⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆᐃΔᐃⲆⲆⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ⲆΔΔΔΔᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Tamon Ice Dragon"
            }, {
                id: 236,
                Δⵠᐃ: ᐃⲆ.ΔⵠⲆΔᐃΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆΔΔⵠΔᐃ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠᐃᐃⵠᐃᐃⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃᐃⵠⵠⵠⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Crystal Dragon"
            }, {
                id: 208,
                Δⵠᐃ: ᐃⲆ.ⵠᐃⲆΔⵠᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃⵠⲆᐃⲆΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⲆᐃⵠⵠΔⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠΔΔⵠΔⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Bone Dragon"
            }, {
                id: 216,
                Δⵠᐃ: ᐃⲆ.ΔⵠᐃᐃⵠΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆᐃΔⲆⵠⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆᐃⲆⵠⲆᐃᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠⲆⵠᐃᐃⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Tamon Warg Ghost"
            }, {
                id: 226,
                Δⵠᐃ: ᐃⲆ.ⲆᐃᐃⵠΔΔΔ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃⵠⵠⲆⵠⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.Ⲇᐃⵠᐃⵠᐃⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃΔΔⲆΔⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Cursed"
            }, {
                id: 48,
                Δⵠᐃ: ᐃⲆ.ᐃΔⲆᐃⵠⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆⵠⵠⵠⵠΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠⵠⲆⵠⵠⵠⵠ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠΔⵠᐃⲆⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔΔⲆΔⲆⲆ,
                ⲆΔⲆ: "eogito",
                name: "Robot"
            }, {
                id: 110,
                Δⵠᐃ: ᐃⲆ.ⵠⵠⵠⵠⲆⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠΔᐃⵠⲆⲆ,
                ⲆⲆΔⲆ: ᐃⲆ.ⲆⵠΔᐃⲆⲆⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃⲆⲆⵠΔΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔΔⲆΔⲆⲆ,
                ⲆΔⲆ: "pizza wa",
                name: "Blue Butterfly"
            }, {
                id: 157,
                Δⵠᐃ: ᐃⲆ.ΔΔΔΔⵠΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆΔᐃΔᐃΔ,
                ⲆⲆΔⲆ: ᐃⲆ.ⵠΔⵠΔΔⵠᐃ,
                ΔᐃΔⲆ: ᐃⲆ.ᐃᐃⲆΔᐃⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔΔⲆΔⲆⲆ,
                ⲆΔⲆ: "eogito",
                name: "Yrifox"
            }, {
                id: 165,
                Δⵠᐃ: ᐃⲆ.ⲆⵠⵠΔᐃΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆᐃⲆⲆΔⵠ,
                ⲆⲆΔⲆ: ᐃⲆ.ᐃⵠᐃⵠΔᐃⲆ,
                ΔᐃΔⲆ: ᐃⲆ.ⵠᐃΔⲆᐃᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔΔⲆΔⲆⲆ,
                ⲆΔⲆ: "OmarJr13",
                name: "Blob Skin"
            }],
            ⲆΔⵠᐃ: [{
                id: 0,
                Δⵠᐃ: ᐃⲆ.ᐃⵠⵠᐃᐃⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠᐃΔⲆΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⵠΔᐃ,
                ⲆΔⲆ: "Starve.io",
                name: "Bag 1"
            }, {
                id: 1,
                Δⵠᐃ: ᐃⲆ.ⲆⵠⵠⲆⲆᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃᐃⵠⲆⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⵠΔᐃ,
                ⲆΔⲆ: "Starve.io",
                name: "Old Bag"
            }, {
                id: 2,
                Δⵠᐃ: ᐃⲆ.ΔⲆΔⵠⲆⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃⲆⵠΔᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Bag 2"
            }, {
                id: 3,
                Δⵠᐃ: ᐃⲆ.ⵠⲆⵠⲆⵠᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆⲆΔΔⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Bag 3"
            }, {
                id: 4,
                Δⵠᐃ: ᐃⲆ.ⵠⵠΔⵠⵠᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠΔⲆⵠⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Bag 4"
            }, {
                id: 5,
                Δⵠᐃ: ᐃⲆ.ⲆⵠⵠⵠⵠⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠᐃΔᐃⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Bag 5"
            }, {
                id: 11,
                Δⵠᐃ: ᐃⲆ.ⲆΔⲆΔΔΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠⵠⲆΔⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Wood Pickaxe Bag"
            }, {
                id: 19,
                Δⵠᐃ: ᐃⲆ.ⲆⲆᐃⲆⵠⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔΔᐃⲆᐃⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Starve.io ",
                name: "Wood Carrier"
            }, {
                id: 37,
                Δⵠᐃ: ᐃⲆ.ⵠⵠᐃⵠᐃᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠΔΔΔⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Bag 6"
            }, {
                id: 39,
                Δⵠᐃ: ᐃⲆ.ⵠⵠᐃⵠⵠΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃⵠᐃⵠΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Bag with Wooden Swords"
            }, {
                id: 44,
                Δⵠᐃ: ᐃⲆ.ΔⵠⲆᐃᐃᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆΔΔⲆⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Communist",
                name: "Big Bag"
            }, {
                id: 7,
                Δⵠᐃ: ᐃⲆ.ⵠΔᐃΔΔΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃⵠⵠΔΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Communist",
                name: "Bag 6"
            }, {
                id: 8,
                Δⵠᐃ: ᐃⲆ.ᐃⲆᐃᐃΔⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆΔⲆᐃⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Easter Bag"
            }, {
                id: 9,
                Δⵠᐃ: ᐃⲆ.ᐃᐃⵠᐃⲆⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃⲆⵠⵠΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "pizza wa",
                name: "Star Bag"
            }, {
                id: 10,
                Δⵠᐃ: ᐃⲆ.ⵠⲆΔⵠⲆⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠΔᐃΔΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Winter Bag"
            }, {
                id: 20,
                Δⵠᐃ: ᐃⲆ.ⲆᐃⲆᐃⵠⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃᐃᐃⵠΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io ",
                name: "Stone Carrier"
            }, {
                id: 24,
                Δⵠᐃ: ᐃⲆ.ⵠⵠⲆⵠᐃⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆⵠᐃᐃⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Stone Pickaxe Bag"
            }, {
                id: 6,
                Δⵠᐃ: ᐃⲆ.ᐃⵠᐃᐃⵠΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔᐃⲆᐃΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Communist",
                name: "Bag Camouflage"
            }, {
                id: 38,
                Δⵠᐃ: ᐃⲆ.ΔⲆΔΔᐃᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃⵠΔⲆⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Bag with Stone Swords"
            }, {
                id: 54,
                Δⵠᐃ: ᐃⲆ.ΔⲆᐃⵠᐃⲆΔ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠⲆⲆᐃΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Cow Bag"
            }, {
                id: 59,
                Δⵠᐃ: ᐃⲆ.ΔⵠᐃⲆⲆᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠᐃᐃⲆᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "CrysTal",
                name: "Starver Bag"
            }, {
                id: 62,
                Δⵠᐃ: ᐃⲆ.ⲆΔΔᐃⲆᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆⵠΔΔⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "CrysTal",
                name: "Crystal Sky Bag"
            }, {
                id: 71,
                Δⵠᐃ: ᐃⲆ.ᐃᐃⲆᐃᐃᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆᐃΔⵠⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Portable Furnace"
            }, {
                id: 78,
                Δⵠᐃ: ᐃⲆ.ΔΔΔᐃᐃᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔⲆⵠⲆⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Crate Bag"
            }, {
                id: 13,
                Δⵠᐃ: ᐃⲆ.ΔⵠΔᐃΔᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠⲆΔⵠΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "pizza wa",
                name: "Honey Pot"
            }, {
                id: 21,
                Δⵠᐃ: ᐃⲆ.ⲆⲆⲆⵠΔⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃᐃΔⲆΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io ",
                name: "Gold Carrier"
            }, {
                id: 30,
                Δⵠᐃ: ᐃⲆ.ⲆΔΔΔᐃⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠΔΔΔᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "eogito",
                name: "Gold Pickaxe Bag"
            }, {
                id: 29,
                Δⵠᐃ: ᐃⲆ.ⲆᐃΔΔⵠΔΔ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃΔⲆⲆᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Ariel",
                name: "Mr and Mrs Bakers"
            }, {
                id: 41,
                Δⵠᐃ: ᐃⲆ.ΔⲆⲆⲆΔⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔΔΔⲆⲆᐃⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "eogito",
                name: "Bag with Golden Swords"
            }, {
                id: 47,
                Δⵠᐃ: ᐃⲆ.ⵠⵠΔⵠⵠⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃⲆᐃⲆⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "eogito",
                name: "Explorer Bag"
            }, {
                id: 51,
                Δⵠᐃ: ᐃⲆ.ᐃⲆΔΔᐃᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃΔⵠⵠᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "pizza wa",
                name: "Bamboo Bag"
            }, {
                id: 53,
                Δⵠᐃ: ᐃⲆ.ΔⵠⲆᐃᐃⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆᐃⵠⵠⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "eogito",
                name: "Mummy Bag"
            }, {
                id: 58,
                Δⵠᐃ: ᐃⲆ.ΔΔΔⲆⲆⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔⵠΔΔⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "MADBalgouthi",
                name: "Watermelon Bag"
            }, {
                id: 60,
                Δⵠᐃ: ᐃⲆ.ᐃⲆᐃⵠΔⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃⵠᐃⲆⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Taco4Life",
                name: "Garlic Bag"
            }, {
                id: 61,
                Δⵠᐃ: ᐃⲆ.ⲆΔᐃᐃΔⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆⵠΔⲆΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Taco4Life",
                name: "Pumpkin Bag"
            }, {
                id: 64,
                Δⵠᐃ: ᐃⲆ.ⵠⵠⵠᐃΔⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔΔⲆΔⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "upfiz",
                name: "Oil Barel bag"
            }, {
                id: 67,
                Δⵠᐃ: ᐃⲆ.ᐃᐃΔΔᐃⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠⲆᐃΔⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "pizza wa",
                name: "Tree Bag"
            }, {
                id: 70,
                Δⵠᐃ: ᐃⲆ.ⲆᐃᐃⲆⲆᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃΔⵠΔΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Lit Portable Furnace"
            }, {
                id: 72,
                Δⵠᐃ: ᐃⲆ.ᐃᐃΔⵠⵠΔΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠΔⲆⲆⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Christmas Berry Bush Bag"
            }, {
                id: 73,
                Δⵠᐃ: ᐃⲆ.ⵠⲆⲆΔⲆΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆᐃⲆᐃⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Berry Bush Bag"
            }, {
                id: 74,
                Δⵠᐃ: ᐃⲆ.ⲆΔⲆᐃⲆᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆᐃⵠΔΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Fall Berry Bush Bag"
            }, {
                id: 76,
                Δⵠᐃ: ᐃⲆ.ΔᐃⲆⲆⵠⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠⲆⲆᐃⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Reclaimed Bag"
            }, {
                id: 14,
                Δⵠᐃ: ᐃⲆ.ΔⲆⵠⲆᐃⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔⲆⲆΔΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "a Rabbit in my Bag"
            }, {
                id: 15,
                Δⵠᐃ: ᐃⲆ.ᐃⵠΔΔΔⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃΔΔⲆⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Bird's nest"
            }, {
                id: 16,
                Δⵠᐃ: ᐃⲆ.ᐃⲆⲆΔᐃⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠⵠΔⵠᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "a Fish on your Back"
            }, {
                id: 17,
                Δⵠᐃ: ᐃⲆ.ⵠⲆⲆΔⲆΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆΔⵠᐃΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "a Squirrel in my Bag"
            }, {
                id: 22,
                Δⵠᐃ: ᐃⲆ.ⲆⲆⵠᐃᐃΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔΔΔⲆΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io ",
                name: "Diamond Carrier"
            }, {
                id: 12,
                Δⵠᐃ: ᐃⲆ.ⲆᐃⵠΔΔⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃΔⲆⵠᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "eogito",
                name: "Resources Bag"
            }, {
                id: 32,
                Δⵠᐃ: ᐃⲆ.ⲆᐃⵠⲆΔⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆⵠᐃΔⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "eogito",
                name: "Diamond Pickaxe Bag"
            }, {
                id: 40,
                Δⵠᐃ: ᐃⲆ.ΔⲆⵠⵠᐃⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔᐃΔᐃⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "eogito",
                name: "Bag with Diamond Swords"
            }, {
                id: 45,
                Δⵠᐃ: ᐃⲆ.ΔΔⵠᐃⵠⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆⵠᐃⲆⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "eogito",
                name: "My Cake Bag"
            }, {
                id: 46,
                Δⵠᐃ: ᐃⲆ.ⲆⲆᐃⵠᐃᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃⵠⲆΔⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "eogito",
                name: "My Christmas Cake Bag"
            }, {
                id: 52,
                Δⵠᐃ: ᐃⲆ.ΔᐃᐃᐃΔⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃⲆⲆⵠⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "MADBalgouthi",
                name: "Fish Bag"
            }, {
                id: 65,
                Δⵠᐃ: ᐃⲆ.ᐃᐃⲆᐃΔⲆΔ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔⵠΔᐃⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "pizza wa",
                name: "Cloud Bag"
            }, {
                id: 68,
                Δⵠᐃ: ᐃⲆ.ⵠⵠⵠⲆⲆΔΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠᐃⲆⲆΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "pizza wa",
                name: "Bee Bag"
            }, {
                id: 77,
                Δⵠᐃ: ᐃⲆ.ᐃⵠΔⲆᐃᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆⵠⲆᐃΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Bag and Bedroll"
            }, {
                id: 80,
                Δⵠᐃ: ᐃⲆ.ⲆⲆᐃⲆΔΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆⲆᐃⲆⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Peasant's Bag"
            }, {
                id: 81,
                Δⵠᐃ: ᐃⲆ.ⲆΔⵠᐃⵠΔΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠⵠⵠⲆⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Probably Stolen Bag"
            }, {
                id: 48,
                Δⵠᐃ: ᐃⲆ.ⵠᐃᐃⵠⲆᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃⲆᐃⲆΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "fatant",
                name: "Natural Bag"
            }, {
                id: 23,
                Δⵠᐃ: ᐃⲆ.ⲆᐃⲆⲆⲆⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃΔΔⵠⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io ",
                name: "Amethyst Carrier"
            }, {
                id: 25,
                Δⵠᐃ: ᐃⲆ.ΔᐃΔᐃⲆⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆⵠⲆⲆᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "eogito",
                name: "Amethyst Pickaxe Bag"
            }, {
                id: 28,
                Δⵠᐃ: ᐃⲆ.ⵠΔΔΔΔᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔⲆⲆⵠⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Your Baby"
            }, {
                id: 33,
                Δⵠᐃ: ᐃⲆ.ⵠᐃΔΔⲆⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠᐃⵠᐃⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "pizza wa",
                name: "Tropical Bag"
            }, {
                id: 43,
                Δⵠᐃ: ᐃⲆ.ᐃᐃⲆⲆⵠⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃᐃⲆᐃΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "eogito",
                name: "Bag with Amethyst Swords"
            }, {
                id: 35,
                Δⵠᐃ: ᐃⲆ.ⲆΔⲆⲆⵠⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃⲆᐃⵠⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "eogito",
                name: "Ice Bag"
            }, {
                id: 50,
                Δⵠᐃ: ᐃⲆ.ΔᐃⵠⵠᐃΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆᐃΔᐃᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Taco4Life",
                name: "Thornbush Bag"
            }, {
                id: 56,
                Δⵠᐃ: ᐃⲆ.ᐃⲆⵠᐃⵠᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠⵠⲆⲆⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "eogito",
                name: "Autumn Bag"
            }, {
                id: 57,
                Δⵠᐃ: ᐃⲆ.ΔΔΔⲆᐃΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠᐃΔⵠⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Taco4Life",
                name: "Dino Egg Bag"
            }, {
                id: 66,
                Δⵠᐃ: ᐃⲆ.ΔⵠⵠᐃⲆΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃΔᐃᐃᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "pizza wa",
                name: "Magic Cloud Bag"
            }, {
                id: 69,
                Δⵠᐃ: ᐃⲆ.ⵠΔΔΔᐃᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃⵠᐃⲆⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "pizza wa",
                name: "Chest Bag"
            }, {
                id: 75,
                Δⵠᐃ: ᐃⲆ.ⲆΔⵠⵠΔⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔⲆΔⲆⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Tamon Spectum Bag"
            }, {
                id: 79,
                Δⵠᐃ: ᐃⲆ.ΔᐃΔⵠΔΔΔ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠⵠΔⵠⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Winter Peasant's Bag"
            }, {
                id: 31,
                Δⵠᐃ: ᐃⲆ.ΔⲆⲆΔⵠᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆⵠᐃⲆΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io ",
                name: "Reidite Carrier"
            }, {
                id: 18,
                Δⵠᐃ: ᐃⲆ.ᐃⵠⵠΔΔⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆΔᐃⲆⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Winter",
                name: "Lava Bag"
            }, {
                id: 49,
                Δⵠᐃ: ᐃⲆ.ΔᐃⲆⲆⲆΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔᐃᐃᐃⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Lava Bag 2"
            }, {
                id: 36,
                Δⵠᐃ: ᐃⲆ.ᐃⲆⲆⲆⲆⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆⵠᐃⲆᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Dragon Bag"
            }, {
                id: 55,
                Δⵠᐃ: ᐃⲆ.ⵠᐃΔⲆⵠΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠᐃᐃΔᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Winter Ice Bag"
            }, {
                id: 26,
                Δⵠᐃ: ᐃⲆ.ᐃⲆΔⵠᐃⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔΔⲆΔⲆⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Reidite Pickaxe Bag"
            }, {
                id: 27,
                Δⵠᐃ: ᐃⲆ.ⲆΔΔᐃΔⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠΔᐃⵠⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Octopus Bowl"
            }, {
                id: 34,
                Δⵠᐃ: ᐃⲆ.ᐃⲆⵠΔΔᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃⵠΔᐃᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Taco4Life",
                name: "Cave Bag"
            }, {
                id: 42,
                Δⵠᐃ: ᐃⲆ.ᐃⵠⵠΔⵠΔΔ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃⵠⲆⵠⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Bag with Reidite Swords"
            }, {
                id: 63,
                Δⵠᐃ: ᐃⲆ.ΔⲆⲆΔᐃᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃⲆᐃΔΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Engineer Bag"
            }],
            ⲆⲆⲆⵠΔ: [{
                id: 0,
                Δⵠᐃ: ᐃⲆ.ⵠⵠᐃΔⲆⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃΔⵠⲆⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⵠΔᐃ,
                ⲆΔⲆ: "eogito",
                name: "Wooden Dead Box"
            }, {
                id: 1,
                Δⵠᐃ: ᐃⲆ.ᐃΔᐃⵠΔΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃⵠⵠΔᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⵠΔᐃ,
                ⲆΔⲆ: "eogito",
                name: "Hidden item"
            }, {
                id: 2,
                Δⵠᐃ: ᐃⲆ.ⲆᐃⲆⲆᐃⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃⵠΔⵠⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Wooden Box 1"
            }, {
                id: 3,
                Δⵠᐃ: ᐃⲆ.ᐃⲆΔⲆⵠⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔΔⵠΔⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Wooden Box 2"
            }, {
                id: 4,
                Δⵠᐃ: ᐃⲆ.ⵠⲆΔᐃΔⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠⲆᐃⵠⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Wooden Box 3"
            }, {
                id: 5,
                Δⵠᐃ: ᐃⲆ.ⵠᐃⵠΔΔⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆⵠΔⲆⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Broken Wooden Box"
            }, {
                id: 6,
                Δⵠᐃ: ᐃⲆ.ⲆᐃⲆⲆⲆᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔΔΔⵠⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Wooden Box"
            }, {
                id: 7,
                Δⵠᐃ: ᐃⲆ.ⲆⵠᐃⲆⵠΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆᐃΔᐃᐃⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Wooden Battle Box"
            }, {
                id: 8,
                Δⵠᐃ: ᐃⲆ.ΔⵠⵠΔⲆΔΔ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃⲆⲆΔⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Wooden Box with a Cross"
            }, {
                id: 9,
                Δⵠᐃ: ᐃⲆ.ΔᐃⲆⵠᐃⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔⲆⵠⲆᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Wooden Box with Bubbles"
            }, {
                id: 10,
                Δⵠᐃ: ᐃⲆ.ⵠⵠⲆⲆⵠⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔΔᐃⵠΔᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Wooden Box with Eyes"
            }, {
                id: 11,
                Δⵠᐃ: ᐃⲆ.ⵠᐃⵠᐃΔᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃⲆⵠᐃⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Dark Wooden Box"
            }, {
                id: 38,
                Δⵠᐃ: ᐃⲆ.ⲆⲆᐃⵠⲆΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔΔⲆⵠⵠⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Weddlz",
                name: "Noob Box"
            }, {
                id: 12,
                Δⵠᐃ: ᐃⲆ.ⲆΔⲆⵠΔⲆΔ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆΔᐃⵠΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Wooden and Stone Box"
            }, {
                id: 14,
                Δⵠᐃ: ᐃⲆ.ⵠⲆΔⲆⲆⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔΔⲆᐃΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "pizza wa",
                name: "Star Box 1"
            }, {
                id: 15,
                Δⵠᐃ: ᐃⲆ.ⲆΔΔⵠΔᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃᐃⲆᐃᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "pizza wa",
                name: "Star Box 2"
            }, {
                id: 27,
                Δⵠᐃ: ᐃⲆ.ⲆⵠⲆᐃⲆⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.Ⲇᐃⵠᐃᐃᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Flower Box"
            }, {
                id: 46,
                Δⵠᐃ: ᐃⲆ.ΔⵠⲆΔᐃΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠΔΔⵠⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "MADBalgouthi",
                name: "Blue Box"
            }, {
                id: 75,
                Δⵠᐃ: ᐃⲆ.ΔΔⵠⵠΔⲆΔ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃⵠⲆⵠᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Night Stars Crate"
            }, {
                id: 19,
                Δⵠᐃ: ᐃⲆ.ⲆᐃΔⲆᐃΔΔ,
                ⵠΔⵠ: ᐃⲆ.ΔΔⵠΔⲆΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Beehive"
            }, {
                id: 13,
                Δⵠᐃ: ᐃⲆ.ⵠᐃⵠⲆⵠⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠⵠⲆⲆᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "eogito",
                name: "Wooden and Golden Box"
            }, {
                id: 21,
                Δⵠᐃ: ᐃⲆ.ΔΔΔⵠΔᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔΔⲆΔΔⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Gravestone"
            }, {
                id: 25,
                Δⵠᐃ: ᐃⲆ.ᐃᐃⵠⵠⵠⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃⵠⵠᐃᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Communist",
                name: "Sky Box"
            }, {
                id: 29,
                Δⵠᐃ: ᐃⲆ.ᐃΔᐃⵠⲆΔΔ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠⲆΔⲆⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Winter",
                name: "Golden Box"
            }, {
                id: 34,
                Δⵠᐃ: ᐃⲆ.ΔΔⲆⵠⲆⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠⲆΔⵠⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Communist",
                name: "Water Crate"
            }, {
                id: 35,
                Δⵠᐃ: ᐃⲆ.ΔⲆΔᐃΔᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆᐃⲆΔⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Communist",
                name: "Glass Crate"
            }, {
                id: 70,
                Δⵠᐃ: ᐃⲆ.ⲆⲆᐃᐃⲆⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆⲆⵠⵠΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "CrysTal",
                name: "Crystal Sky Box"
            }, {
                id: 74,
                Δⵠᐃ: ᐃⲆ.ᐃᐃⲆᐃΔᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔᐃΔⲆⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Reclaimed Crate"
            }, {
                id: 77,
                Δⵠᐃ: ᐃⲆ.ⲆⵠⵠᐃᐃΔΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔⵠⵠⲆⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Workplace Accident"
            }, {
                id: 16,
                Δⵠᐃ: ᐃⲆ.ᐃⲆⲆΔᐃⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆⵠⲆᐃᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "eogito",
                name: "Wooden and Diamond Box"
            }, {
                id: 18,
                Δⵠᐃ: ᐃⲆ.ΔⵠᐃΔⵠΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃⲆⵠⲆⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Don't Hit Me"
            }, {
                id: 26,
                Δⵠᐃ: ᐃⲆ.ⵠΔᐃᐃΔᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆⵠⵠⵠᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Underwater Box"
            }, {
                id: 31,
                Δⵠᐃ: ᐃⲆ.ⲆΔᐃⵠⵠΔΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠᐃΔΔⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Communist",
                name: "Items Pile"
            }, {
                id: 32,
                Δⵠᐃ: ᐃⲆ.ΔΔⲆⲆΔΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃⲆⵠⲆΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "eogito",
                name: "Cake Box"
            }, {
                id: 33,
                Δⵠᐃ: ᐃⲆ.ⵠᐃᐃΔⲆⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆⲆᐃᐃⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "eogito",
                name: "Christmas Cake Box"
            }, {
                id: 36,
                Δⵠᐃ: ᐃⲆ.ᐃΔΔⵠⲆⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔⵠⵠΔᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Fukss",
                name: "Crab Box"
            }, {
                id: 42,
                Δⵠᐃ: ᐃⲆ.ⲆⵠⵠΔᐃΔΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃⵠΔΔⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "MADBalgouthi",
                name: "Fishing Box"
            }, {
                id: 72,
                Δⵠᐃ: ᐃⲆ.ⵠⲆⵠⲆΔᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃⲆᐃΔⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Storage Machine"
            }, {
                id: 22,
                Δⵠᐃ: ᐃⲆ.ΔᐃΔᐃᐃΔΔ,
                ⵠΔⵠ: ᐃⲆ.ΔΔⵠΔᐃⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Let me out of here"
            }, {
                id: 17,
                Δⵠᐃ: ᐃⲆ.ⵠⲆᐃⲆᐃⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆΔΔⵠΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "eogito",
                name: "Wooden and Amethyst Box"
            }, {
                id: 24,
                Δⵠᐃ: ᐃⲆ.ⲆⵠⲆⲆᐃⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔΔⲆᐃⵠⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Aquarium"
            }, {
                id: 28,
                Δⵠᐃ: ᐃⲆ.ⲆⲆΔᐃᐃᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔᐃⲆⵠΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "eogito",
                name: "Gift Box"
            }, {
                id: 40,
                Δⵠᐃ: ᐃⲆ.ⲆΔⵠⲆΔⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠⲆⲆⵠⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "MADBalgouthi",
                name: "Open Watermelon Box"
            }, {
                id: 41,
                Δⵠᐃ: ᐃⲆ.ⲆᐃᐃⵠⲆΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠᐃⵠᐃΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "MADBalgouthi",
                name: "Watermelon Box"
            }, {
                id: 39,
                Δⵠᐃ: ᐃⲆ.ΔⲆⲆΔⲆⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆⲆᐃⲆΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Taco4Life",
                name: "Thornbush Box"
            }, {
                id: 43,
                Δⵠᐃ: ᐃⲆ.ⵠΔⲆΔᐃᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆⵠΔᐃⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "eogito",
                name: "Rabbit in the Box"
            }, {
                id: 47,
                Δⵠᐃ: ᐃⲆ.ⵠⵠⲆΔᐃΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔΔⵠⵠⵠⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Taco4Life",
                name: "Garlic Plot"
            }, {
                id: 48,
                Δⵠᐃ: ᐃⲆ.ΔⵠΔⵠΔΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔΔⲆⲆΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Taco4Life",
                name: "Pumpkin Plot"
            }, {
                id: 78,
                Δⵠᐃ: ᐃⲆ.ⵠⵠΔᐃⲆᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔΔΔⲆⵠⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Tamon Spectrum Portal"
            }, {
                id: 45,
                Δⵠᐃ: ᐃⲆ.ⵠⲆⵠᐃᐃⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃⲆⵠⵠⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Autumn Box"
            }, {
                id: 44,
                Δⵠᐃ: ᐃⲆ.ⲆⲆⲆΔΔⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔΔⵠⵠⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Winter Box"
            }, {
                id: 20,
                Δⵠᐃ: ᐃⲆ.ⵠΔⲆΔⲆΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃⲆᐃⲆᐃⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Metal and Reidite Box"
            }, {
                id: 23,
                Δⵠᐃ: ᐃⲆ.ⵠᐃⲆⲆⲆᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃⵠᐃⲆᐃⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Kraken Box"
            }, {
                id: 30,
                Δⵠᐃ: ᐃⲆ.ⲆⲆⵠᐃⲆⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃⲆΔᐃⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Winter",
                name: "Lava Box"
            }, {
                id: 37,
                Δⵠᐃ: ᐃⲆ.ΔⲆⵠⲆⲆΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃᐃᐃᐃΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Lava Box 2"
            }, {
                id: 49,
                Δⵠᐃ: ᐃⲆ.ᐃᐃᐃⲆⵠⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃᐃⵠⵠΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Box of the Rabbit"
            }, {
                id: 50,
                Δⵠᐃ: ᐃⲆ.ΔⵠᐃΔⵠᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆΔⵠⵠΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Box of the Wolf"
            }, {
                id: 51,
                Δⵠᐃ: ᐃⲆ.ΔⲆΔΔᐃⲆΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠⵠⵠⵠΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Box of the Spider"
            }, {
                id: 52,
                Δⵠᐃ: ᐃⲆ.ⵠΔᐃⵠⲆⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠᐃᐃⲆΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Box of the Hawk"
            }, {
                id: 53,
                Δⵠᐃ: ᐃⲆ.ΔᐃᐃⵠⲆⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.Ⲇᐃᐃᐃᐃⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Box of the Bear"
            }, {
                id: 54,
                Δⵠᐃ: ᐃⲆ.Ⲇⵠᐃⵠⵠᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆⲆᐃΔᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Box of the Fox"
            }, {
                id: 55,
                Δⵠᐃ: ᐃⲆ.ⵠⲆⵠⵠΔᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠΔⲆᐃⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Box of the Baby Mammoth"
            }, {
                id: 56,
                Δⵠᐃ: ᐃⲆ.ΔΔⵠⵠⲆΔΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠᐃᐃΔⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Box of the Mammoth"
            }, {
                id: 57,
                Δⵠᐃ: ᐃⲆ.ᐃᐃᐃᐃⵠᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔᐃΔⲆΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Box of the Sandworm"
            }, {
                id: 58,
                Δⵠᐃ: ᐃⲆ.ⲆΔⵠΔΔⲆΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃΔⵠΔⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Box of the Vulture"
            }, {
                id: 59,
                Δⵠᐃ: ᐃⲆ.ΔⵠΔΔᐃᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠⵠᐃΔⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Box of the Kraken"
            }, {
                id: 60,
                Δⵠᐃ: ᐃⲆ.ⵠⲆᐃⵠⵠᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆΔⵠⵠⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Box of the Piranha"
            }, {
                id: 61,
                Δⵠᐃ: ᐃⲆ.ΔⲆⵠΔⲆⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠⲆⵠⲆⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Box of the Baby Dragon"
            }, {
                id: 62,
                Δⵠᐃ: ᐃⲆ.ᐃⵠΔⵠⲆⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆⵠΔᐃⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Box of the Baby Lava"
            }, {
                id: 63,
                Δⵠᐃ: ᐃⲆ.ⵠⵠᐃᐃⲆᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔᐃᐃⲆⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Box of the Dragon"
            }, {
                id: 64,
                Δⵠᐃ: ᐃⲆ.ΔⲆΔⲆⵠⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆⵠΔⵠᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Box of the Penguin"
            }, {
                id: 65,
                Δⵠᐃ: ᐃⲆ.ⲆᐃⲆᐃᐃⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆⵠⵠΔᐃⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Box of the Lava Dragon"
            }, {
                id: 66,
                Δⵠᐃ: ᐃⲆ.ᐃⵠᐃΔⵠⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆΔⵠⲆᐃⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Box of the Boar"
            }, {
                id: 67,
                Δⵠᐃ: ᐃⲆ.ⲆᐃⵠᐃⵠⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆⲆⵠᐃᐃⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Box of the Fire mob"
            }, {
                id: 68,
                Δⵠᐃ: ᐃⲆ.ⵠⲆⲆᐃⲆⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆⲆΔΔⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Box of the Crab"
            }, {
                id: 69,
                Δⵠᐃ: ᐃⲆ.ⵠᐃΔΔΔᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃⲆΔⵠΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Box of the King Crab"
            }, {
                id: 71,
                Δⵠᐃ: ᐃⲆ.ᐃᐃⲆⵠⵠⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔᐃΔΔΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Dragon Box"
            }, {
                id: 73,
                Δⵠᐃ: ᐃⲆ.ᐃⵠᐃΔⵠΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠⲆⲆᐃᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Rekt"
            }, {
                id: 76,
                Δⵠᐃ: ᐃⲆ.ΔᐃΔᐃⲆⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔΔΔⵠⵠⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Sleeping Tamon Dragon"
            }],
            ⲆⵠⲆⲆⲆ: [{
                id: 0,
                Δⵠᐃ: ᐃⲆ.ΔⲆΔᐃⲆⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠⲆᐃⵠΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⵠΔᐃ,
                ⲆΔⲆ: "Starve.io",
                name: "Book 1"
            }, {
                id: 1,
                Δⵠᐃ: ᐃⲆ.ⵠᐃⵠᐃⲆΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆⵠΔⲆⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Book 2"
            }, {
                id: 2,
                Δⵠᐃ: ᐃⲆ.ⲆⵠⵠΔⵠᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃᐃᐃⲆᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Book 3"
            }, {
                id: 3,
                Δⵠᐃ: ᐃⲆ.ᐃΔᐃᐃΔⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆⵠⲆᐃⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Book 4"
            }, {
                id: 4,
                Δⵠᐃ: ᐃⲆ.ⲆᐃΔⲆᐃⲆΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠᐃⵠᐃΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Damaged Book 1"
            }, {
                id: 18,
                Δⵠᐃ: ᐃⲆ.ⲆᐃⲆᐃⵠΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃⵠⲆⵠᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "SeveR",
                name: "Damaged Book 2"
            }, {
                id: 5,
                Δⵠᐃ: ᐃⲆ.ⲆⵠⲆᐃᐃΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆⲆⲆⵠΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Doctorpus",
                name: "Scroll"
            }, {
                id: 6,
                Δⵠᐃ: ᐃⲆ.ᐃᐃⵠⵠⲆⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠᐃⲆⵠⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Doctorpus",
                name: "Clipboard"
            }, {
                id: 7,
                Δⵠᐃ: ᐃⲆ.ΔⲆᐃⵠⲆⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃᐃⵠΔᐃⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Seed Book"
            }, {
                id: 20,
                Δⵠᐃ: ᐃⲆ.ΔⲆⲆᐃⵠΔΔ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆⵠΔⲆⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Taco4Life",
                name: "Camo Book"
            }, {
                id: 24,
                Δⵠᐃ: ᐃⲆ.ᐃᐃⵠⲆⵠⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆⵠΔⵠⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Communist",
                name: "Stone Tablet"
            }, {
                id: 47,
                Δⵠᐃ: ᐃⲆ.ⲆΔᐃΔⵠⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆᐃⵠⵠΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Reclaimed Book"
            }, {
                id: 10,
                Δⵠᐃ: ᐃⲆ.ΔΔⵠᐃΔⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃΔΔᐃⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "pizza wa",
                name: "Star Book"
            }, {
                id: 8,
                Δⵠᐃ: ᐃⲆ.ΔⲆⲆᐃⵠⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆᐃⵠᐃⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "eogito",
                name: "Gold Book"
            }, {
                id: 15,
                Δⵠᐃ: ᐃⲆ.ⵠⲆΔᐃΔⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠΔᐃΔⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Old Mysterious Paper"
            }, {
                id: 17,
                Δⵠᐃ: ᐃⲆ.ⵠΔᐃⵠᐃⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃⵠΔᐃⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Gold Engraving"
            }, {
                id: 25,
                Δⵠᐃ: ᐃⲆ.ⵠⵠᐃⲆⲆⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔΔⵠⲆᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "fatant",
                name: "Ant Book"
            }, {
                id: 32,
                Δⵠᐃ: ᐃⲆ.ΔⵠᐃᐃⵠΔΔ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃᐃⲆᐃΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "eogito",
                name: "Mummy Book"
            }, {
                id: 37,
                Δⵠᐃ: ᐃⲆ.ΔᐃᐃⵠΔᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠᐃᐃⲆᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Taco4Life",
                name: "Garlic Book"
            }, {
                id: 38,
                Δⵠᐃ: ᐃⲆ.ᐃⲆⵠⲆᐃⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃⲆⲆⲆⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Taco4Life",
                name: "Pumpkin Book"
            }, {
                id: 39,
                Δⵠᐃ: ᐃⲆ.ᐃⲆⵠⵠᐃᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔᐃᐃⲆⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Christmas Tree Book"
            }, {
                id: 11,
                Δⵠᐃ: ᐃⲆ.ΔΔⵠΔⲆᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠⵠⵠⲆΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "eogito",
                name: "Diamond Book"
            }, {
                id: 9,
                Δⵠᐃ: ᐃⲆ.ΔᐃᐃΔᐃᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠⵠⲆⵠⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "eogito",
                name: "Obscure Book"
            }, {
                id: 16,
                Δⵠᐃ: ᐃⲆ.ᐃⲆⲆᐃⲆⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔΔⲆⲆⲆᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Rolled Parchment"
            }, {
                id: 22,
                Δⵠᐃ: ᐃⲆ.ⵠΔⵠΔΔⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃⵠⲆΔⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "eogito",
                name: "Cake Book"
            }, {
                id: 23,
                Δⵠᐃ: ᐃⲆ.ΔᐃⲆᐃⲆⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃⵠⵠⵠⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "eogito",
                name: "Christmas Cake Book"
            }, {
                id: 30,
                Δⵠᐃ: ᐃⲆ.ᐃᐃΔΔⲆⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠᐃⵠⲆⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "MADBalgouthi",
                name: "Fish Book"
            }, {
                id: 31,
                Δⵠᐃ: ᐃⲆ.ⵠᐃᐃⵠⲆⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔⲆⵠΔⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "CrysTal",
                name: "Once upon a time"
            }, {
                id: 48,
                Δⵠᐃ: ᐃⲆ.ᐃΔⲆᐃΔⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃΔΔᐃⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Chrono Clock"
            }, {
                id: 49,
                Δⵠᐃ: ᐃⲆ.ΔΔⲆⲆᐃᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔᐃΔᐃᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Recipe Book"
            }, {
                id: 13,
                Δⵠᐃ: ᐃⲆ.ⲆᐃᐃᐃᐃΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠᐃΔⲆⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "eogito",
                name: "Amethyst Book"
            }, {
                id: 28,
                Δⵠᐃ: ᐃⲆ.ⵠᐃⲆΔⵠΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆᐃⲆΔⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "eogito",
                name: "Paint Pallet"
            }, {
                id: 29,
                Δⵠᐃ: ᐃⲆ.ⵠⲆⲆⲆⲆⲆΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆΔᐃΔᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "CrysTal",
                name: "Watermelon Book"
            }, {
                id: 27,
                Δⵠᐃ: ᐃⲆ.ⲆᐃⵠᐃⵠᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔΔⲆᐃⲆⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Taco4Life",
                name: "Thornbush Book"
            }, {
                id: 35,
                Δⵠᐃ: ᐃⲆ.ⲆᐃⵠⵠⲆⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠΔⵠΔΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Taco4Life",
                name: "Menu"
            }, {
                id: 36,
                Δⵠᐃ: ᐃⲆ.ⲆⵠΔⲆᐃⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠⲆᐃⵠⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "CrysTal",
                name: "Lover Letter"
            }, {
                id: 40,
                Δⵠᐃ: ᐃⲆ.ⵠⵠΔⲆᐃⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃⵠⲆⲆΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Fresh-Baked Cookies"
            }, {
                id: 41,
                Δⵠᐃ: ᐃⲆ.ⵠᐃᐃᐃᐃᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃΔⵠⵠⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Inside, there is just a book."
            }, {
                id: 45,
                Δⵠᐃ: ᐃⲆ.ΔᐃΔⵠⵠⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆⵠⲆⲆΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Crafting Machine"
            }, {
                id: 33,
                Δⵠᐃ: ᐃⲆ.ᐃⲆΔⲆΔⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.Ⲇᐃⵠᐃⵠᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Winter Book"
            }, {
                id: 34,
                Δⵠᐃ: ᐃⲆ.ᐃⲆⲆⲆⲆⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆⵠⲆⵠⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Autumn Book"
            }, {
                id: 14,
                Δⵠᐃ: ᐃⲆ.ⲆΔⵠᐃΔᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠᐃᐃⵠᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Reidite Book"
            }, {
                id: 12,
                Δⵠᐃ: ᐃⲆ.ΔⲆΔᐃⲆᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔΔⲆᐃΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Winter",
                name: "Lava Book"
            }, {
                id: 26,
                Δⵠᐃ: ᐃⲆ.ⵠⵠⲆⲆᐃᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆΔⵠⲆⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Lava Book 2"
            }, {
                id: 19,
                Δⵠᐃ: ᐃⲆ.ᐃⵠᐃⵠΔΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆᐃⲆⲆⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Winter",
                name: "Ocean Mystery"
            }, {
                id: 21,
                Δⵠᐃ: ᐃⲆ.ᐃⲆΔΔⵠⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠⲆⲆᐃⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Dragon Book"
            }, {
                id: 42,
                Δⵠᐃ: ᐃⲆ.ⵠⵠⲆⲆⵠⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃΔⲆᐃⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Engineer Book"
            }, {
                id: 43,
                Δⵠᐃ: ᐃⲆ.ΔᐃⵠΔΔⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔΔΔⲆΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Nightmare Book"
            }, {
                id: 44,
                Δⵠᐃ: ᐃⲆ.ⵠⵠΔⲆᐃⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆᐃᐃⲆΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "aloner",
                name: "Mystery Book"
            }, {
                id: 46,
                Δⵠᐃ: ᐃⲆ.ΔΔⵠⵠᐃΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠⲆᐃΔⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Cursed Book"
            }],
            ⵠᐃⲆⲆᐃ: [{
                id: 0,
                Δⵠᐃ: ᐃⲆ.ΔΔΔᐃᐃᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔΔΔᐃᐃᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⵠΔᐃ,
                ⲆΔⲆ: "Starve.io",
                name: "Nothing"
            }, {
                id: 2,
                Δⵠᐃ: ᐃⲆ.ⲆᐃΔΔⵠⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔΔⵠⵠΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⵠΔᐃ,
                ⲆΔⲆ: "Starve.io",
                name: "Pink Cheeks"
            }, {
                id: 3,
                Δⵠᐃ: ᐃⲆ.ᐃᐃⲆⵠⵠⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆⲆⵠⲆⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⵠΔᐃ,
                ⲆΔⲆ: "Starve.io",
                name: "Heart"
            }, {
                id: 1,
                Δⵠᐃ: ᐃⲆ.ΔⲆᐃΔΔⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃᐃᐃΔⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⵠΔᐃ,
                ⲆΔⲆ: "Starve.io",
                name: "Bandage 1"
            }, {
                id: 4,
                Δⵠᐃ: ᐃⲆ.ⲆⵠⲆΔᐃᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆΔΔΔⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⵠΔᐃ,
                ⲆΔⲆ: "Starve.io",
                name: "Flower 1"
            }, {
                id: 5,
                Δⵠᐃ: ᐃⲆ.ᐃᐃᐃⲆΔᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔᐃΔΔΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Bow 1"
            }, {
                id: 6,
                Δⵠᐃ: ᐃⲆ.ⲆΔⲆⵠᐃⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠΔⲆΔΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Bandage 2"
            }, {
                id: 7,
                Δⵠᐃ: ᐃⲆ.ΔΔⲆⵠⲆⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃᐃⲆⲆⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Flower 2"
            }, {
                id: 8,
                Δⵠᐃ: ᐃⲆ.ⵠᐃᐃΔⲆⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃⵠᐃⵠᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Bandage 3"
            }, {
                id: 36,
                Δⵠᐃ: ᐃⲆ.ⲆᐃⲆΔⲆⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃⲆⲆⲆΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Foliage"
            }, {
                id: 59,
                Δⵠᐃ: ᐃⲆ.ⵠΔᐃⲆⵠⲆΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃΔᐃⵠᐃⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Peaceful"
            }, {
                id: 67,
                Δⵠᐃ: ᐃⲆ.ⲆⲆΔᐃᐃΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔⲆΔⲆⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "pizza wa",
                name: "Sparkles"
            }, {
                id: 68,
                Δⵠᐃ: ᐃⲆ.ⲆᐃⲆᐃⲆΔΔ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃⲆᐃΔⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "pizza wa",
                name: "Luxury"
            }, {
                id: 69,
                Δⵠᐃ: ᐃⲆ.ΔᐃⵠᐃΔⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔⲆⵠⵠΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⵠⲆΔ,
                ⲆΔⲆ: "pizza wa",
                name: "Snow Flakes Crown"
            }, {
                id: 17,
                Δⵠᐃ: ᐃⲆ.ⵠⵠΔⲆΔᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃᐃΔΔΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Glasses 1"
            }, {
                id: 10,
                Δⵠᐃ: ᐃⲆ.ⵠⵠⲆⵠᐃⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆⵠⲆᐃⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Bow 2"
            }, {
                id: 11,
                Δⵠᐃ: ᐃⲆ.ⲆⵠⲆᐃⵠᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆⵠᐃΔΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "pizza wa",
                name: "Little Stars"
            }, {
                id: 12,
                Δⵠᐃ: ᐃⲆ.ΔⲆᐃᐃᐃⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔΔᐃΔⲆΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Pirate Eye Patch 1"
            }, {
                id: 44,
                Δⵠᐃ: ᐃⲆ.ᐃΔⲆᐃᐃΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠⵠΔΔᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Taco4Life",
                name: "Pirate Eye Patch 2"
            }, {
                id: 23,
                Δⵠᐃ: ᐃⲆ.ⵠᐃΔⲆΔⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔΔⵠⲆΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Clown nose"
            }, {
                id: 16,
                Δⵠᐃ: ᐃⲆ.ⲆΔⵠΔⵠΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠⵠΔⵠⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Eye Patch"
            }, {
                id: 30,
                Δⵠᐃ: ᐃⲆ.ΔΔⵠᐃᐃⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔΔⵠΔΔⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "eogito",
                name: "Flower 3"
            }, {
                id: 38,
                Δⵠᐃ: ᐃⲆ.ᐃᐃΔΔⲆΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆΔᐃᐃΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Winter",
                name: "False Nose"
            }, {
                id: 74,
                Δⵠᐃ: ᐃⲆ.ⵠⲆΔΔⵠⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃⲆᐃᐃᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Red Cloth"
            }, {
                id: 75,
                Δⵠᐃ: ᐃⲆ.ᐃΔΔⵠⵠᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃⵠⵠᐃⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Blue Cloth"
            }, {
                id: 79,
                Δⵠᐃ: ᐃⲆ.ᐃΔΔΔⵠᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔᐃⵠⵠᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Transparent Mask"
            }, {
                id: 89,
                Δⵠᐃ: ᐃⲆ.ⵠⲆᐃΔⵠᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃΔⲆⲆⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Anyone want to play?",
                name: "Starve.io Anime"
            }, {
                id: 94,
                Δⵠᐃ: ᐃⲆ.ⲆⲆΔⲆⵠⲆΔ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠΔⵠⵠⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Ant",
                name: "Hero Mask"
            }, {
                id: 100,
                Δⵠᐃ: ᐃⲆ.ⲆᐃΔΔⲆΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃΔΔᐃΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "This starver is mad"
            }, {
                id: 104,
                Δⵠᐃ: ᐃⲆ.ᐃⲆᐃᐃⲆᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔⲆᐃⵠᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Scars"
            }, {
                id: 106,
                Δⵠᐃ: ᐃⲆ.ⲆⵠⲆⲆⵠᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃⵠΔᐃᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "In Search of Intelligence"
            }, {
                id: 109,
                Δⵠᐃ: ᐃⲆ.ⲆᐃⲆΔⲆⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠⲆⲆΔΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Reclaimed Bandage"
            }, {
                id: 111,
                Δⵠᐃ: ᐃⲆ.ⲆᐃᐃᐃⲆᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃⲆⵠⵠΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⲆᐃⲆΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Unwrap Starver for Gift"
            }, {
                id: 15,
                Δⵠᐃ: ᐃⲆ.ⲆⲆⵠⵠᐃᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠⵠⲆⲆⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Star Glasses"
            }, {
                id: 21,
                Δⵠᐃ: ᐃⲆ.ⲆᐃⲆᐃⵠⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠⵠᐃᐃΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Great-aunt's Glasses"
            }, {
                id: 24,
                Δⵠᐃ: ᐃⲆ.ᐃⲆΔΔΔᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠᐃΔⲆᐃⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Little Starver"
            }, {
                id: 22,
                Δⵠᐃ: ᐃⲆ.ⵠΔΔⲆⵠⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆΔΔΔᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Little Glasses"
            }, {
                id: 13,
                Δⵠᐃ: ᐃⲆ.ᐃᐃⵠᐃᐃⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆⲆΔⲆⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Flower Chain"
            }, {
                id: 29,
                Δⵠᐃ: ᐃⲆ.ᐃᐃᐃⲆᐃⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔⵠΔΔᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "eogito",
                name: "Horns"
            }, {
                id: 31,
                Δⵠᐃ: ᐃⲆ.ⵠΔⵠΔᐃᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆΔΔᐃⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "eogito",
                name: "Golden Flower"
            }, {
                id: 40,
                Δⵠᐃ: ᐃⲆ.ⵠᐃᐃⵠⲆⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠⲆᐃᐃᐃⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "pizza wa",
                name: "Sleeping Mask"
            }, {
                id: 57,
                Δⵠᐃ: ᐃⲆ.ⲆᐃⲆⲆⲆΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠⵠⲆⵠⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Taco4Life",
                name: "Fish on your head"
            }, {
                id: 58,
                Δⵠᐃ: ᐃⲆ.ᐃⵠⲆⵠⲆⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆᐃⲆΔⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "eogito",
                name: "Rose"
            }, {
                id: 91,
                Δⵠᐃ: ᐃⲆ.ⲆΔᐃⲆΔⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆΔⵠᐃⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "upfiz",
                name: "Grey Scarf"
            }, {
                id: 92,
                Δⵠᐃ: ᐃⲆ.ⲆᐃᐃΔΔⲆΔ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠⲆΔⲆᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "upfiz",
                name: "Black Scarf"
            }, {
                id: 93,
                Δⵠᐃ: ᐃⲆ.ᐃⲆⵠᐃᐃⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃⲆⵠᐃᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "upfiz",
                name: "Skull Mask"
            }, {
                id: 95,
                Δⵠᐃ: ᐃⲆ.ⲆⲆΔΔⵠᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠᐃΔⵠᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Golden Monocle"
            }, {
                id: 96,
                Δⵠᐃ: ᐃⲆ.ΔΔⵠⵠᐃⲆΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠⵠⵠⵠⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "A simple instruction"
            }, {
                id: 102,
                Δⵠᐃ: ᐃⲆ.ⵠⵠⲆᐃⲆᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆᐃⲆⵠᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Garland"
            }, {
                id: 103,
                Δⵠᐃ: ᐃⲆ.ⲆⲆᐃᐃⲆⲆΔ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃᐃⵠⵠⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "The Doormat"
            }, {
                id: 108,
                Δⵠᐃ: ᐃⲆ.ⲆᐃⲆᐃⵠᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃᐃⵠⲆⵠⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Copium Tanks"
            }, {
                id: 117,
                Δⵠᐃ: ᐃⲆ.ᐃⲆⵠⵠΔᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃᐃⵠΔᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Eyelashes"
            }, {
                id: 118,
                Δⵠᐃ: ᐃⲆ.ⲆᐃⲆⵠⲆᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆⲆᐃⲆⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔΔ,
                ⲆΔⲆ: "Starve.io",
                name: "Helmet Prototype"
            }, {
                id: 9,
                Δⵠᐃ: ᐃⲆ.ᐃᐃⵠⵠΔᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠⵠⵠΔⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Fancy Glasses"
            }, {
                id: 25,
                Δⵠᐃ: ᐃⲆ.Δⵠⵠⵠⵠᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠⲆⵠᐃⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Medecin Mask"
            }, {
                id: 14,
                Δⵠᐃ: ᐃⲆ.ΔⲆΔᐃᐃⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆⵠΔΔⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Mr. Mayor"
            }, {
                id: 19,
                Δⵠᐃ: ᐃⲆ.ⵠⵠΔᐃΔᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔΔΔᐃᐃⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Sunglasses 2"
            }, {
                id: 28,
                Δⵠᐃ: ᐃⲆ.ⵠⵠⵠΔᐃΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃᐃⵠᐃΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "pizza wa",
                name: "Starfish"
            }, {
                id: 37,
                Δⵠᐃ: ᐃⲆ.ⲆΔⲆΔⵠΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠⵠᐃⲆΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "eogito",
                name: "Berry"
            }, {
                id: 39,
                Δⵠᐃ: ᐃⲆ.ⲆⲆⲆΔᐃΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆᐃⲆΔΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "eogito",
                name: "Flake"
            }, {
                id: 43,
                Δⵠᐃ: ᐃⲆ.ΔⵠΔⲆΔΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔᐃⲆΔᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "eogito",
                name: "Leaf "
            }, {
                id: 61,
                Δⵠᐃ: ᐃⲆ.ⲆΔⲆᐃⲆⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠᐃΔⵠΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "A sword in your head"
            }, {
                id: 62,
                Δⵠᐃ: ᐃⲆ.ΔΔΔⲆΔΔΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠΔⲆⲆⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Winter Scarf"
            }, {
                id: 64,
                Δⵠᐃ: ᐃⲆ.ⵠⵠΔΔⵠⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃⵠⲆᐃΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "eogito",
                name: "Winter Scarf 2"
            }, {
                id: 66,
                Δⵠᐃ: ᐃⲆ.ⲆⵠᐃᐃⲆΔΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆᐃΔⵠⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "eogito",
                name: "Winter Scarf 3"
            }, {
                id: 70,
                Δⵠᐃ: ᐃⲆ.ᐃⲆⵠⵠⲆⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ⲆΔΔΔⵠⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Mask with animal tracks"
            }, {
                id: 71,
                Δⵠᐃ: ᐃⲆ.ⲆᐃΔⲆΔΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠᐃᐃΔⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Spring Mask"
            }, {
                id: 72,
                Δⵠᐃ: ᐃⲆ.ⲆᐃΔⲆᐃΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔⵠⵠᐃᐃⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Pink Mask"
            }, {
                id: 73,
                Δⵠᐃ: ᐃⲆ.ⵠᐃⲆⲆⵠᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃᐃⵠᐃⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Blue Mask"
            }, {
                id: 76,
                Δⵠᐃ: ᐃⲆ.ΔⵠⲆⲆⲆⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠΔⲆᐃⵠⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Military Mask"
            }, {
                id: 77,
                Δⵠᐃ: ᐃⲆ.ⲆⵠⵠᐃΔΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃΔΔⲆΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Orange Mask"
            }, {
                id: 78,
                Δⵠᐃ: ᐃⲆ.ⲆᐃΔⵠⵠΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆⵠⲆΔᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "White and Red Points Mask"
            }, {
                id: 80,
                Δⵠᐃ: ᐃⲆ.ᐃᐃⵠᐃΔⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠΔᐃⵠΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Stick out your tongue Mask"
            }, {
                id: 81,
                Δⵠᐃ: ᐃⲆ.ᐃⲆⲆⵠᐃⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔᐃΔⲆⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Two Teeth Mask"
            }, {
                id: 82,
                Δⵠᐃ: ᐃⲆ.ΔᐃⲆⵠᐃⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠᐃᐃΔⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Make-up Mask"
            }, {
                id: 83,
                Δⵠᐃ: ᐃⲆ.ᐃⲆᐃⵠΔᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃᐃⵠΔⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Sad Mask"
            }, {
                id: 84,
                Δⵠᐃ: ᐃⲆ.ᐃⵠⵠΔⵠᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔΔΔⵠΔΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Happy Mask"
            }, {
                id: 90,
                Δⵠᐃ: ᐃⲆ.ᐃⵠⵠⲆᐃᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠⲆⵠⲆᐃᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "aloner",
                name: "Blood"
            }, {
                id: 101,
                Δⵠᐃ: ᐃⲆ.ᐃⲆⵠⵠΔⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃⲆⲆᐃΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Axed Plans"
            }, {
                id: 105,
                Δⵠᐃ: ᐃⲆ.ⵠᐃᐃⲆΔΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ΔΔⵠᐃⵠΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Saddle"
            }, {
                id: 113,
                Δⵠᐃ: ᐃⲆ.ᐃΔᐃⲆⲆΔΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠᐃⲆⵠΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "I see"
            }, {
                id: 114,
                Δⵠᐃ: ᐃⲆ.ᐃᐃΔᐃΔΔΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠΔⵠⵠΔⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "I have no body and I must dress"
            }, {
                id: 115,
                Δⵠᐃ: ᐃⲆ.ΔᐃΔΔⵠΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠΔΔⵠⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠⲆΔⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Cursed Crown"
            }, {
                id: 27,
                Δⵠᐃ: ᐃⲆ.ⵠⵠᐃΔⲆᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃΔΔᐃⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Clown Face"
            }, {
                id: 20,
                Δⵠᐃ: ᐃⲆ.ⵠⲆᐃΔΔⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆᐃⲆⵠΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Sunglasses 3"
            }, {
                id: 32,
                Δⵠᐃ: ᐃⲆ.ΔΔΔⲆᐃᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠΔⲆⲆⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "eogito",
                name: "Engineer's Glasses"
            }, {
                id: 33,
                Δⵠᐃ: ᐃⲆ.ⵠⲆⵠΔᐃⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠⵠⲆᐃᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "eogito",
                name: "Engineer's Monocle"
            }, {
                id: 34,
                Δⵠᐃ: ᐃⲆ.ᐃⲆⲆⲆᐃᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃΔⵠⲆⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Mauve's butt"
            }, {
                id: 41,
                Δⵠᐃ: ᐃⲆ.ⲆΔⵠΔΔⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃⲆΔᐃΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "eogito",
                name: "Lapa Head"
            }, {
                id: 42,
                Δⵠᐃ: ᐃⲆ.ⵠⵠⲆᐃⵠⵠᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠᐃᐃᐃⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "eogito",
                name: "Lapa Head "
            }, {
                id: 85,
                Δⵠᐃ: ᐃⲆ.ⲆᐃΔΔᐃΔⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃⵠᐃⲆᐃⵠᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Mask and Glasses"
            }, {
                id: 110,
                Δⵠᐃ: ᐃⲆ.ᐃⲆΔΔᐃᐃΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔⲆⵠᐃᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ⵠΔⲆⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "Tamon Spectrum Pet"
            }, {
                id: 60,
                Δⵠᐃ: ᐃⲆ.ΔΔⲆᐃⵠᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃⲆⵠᐃΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Jason"
            }, {
                id: 26,
                Δⵠᐃ: ᐃⲆ.ⲆⲆΔΔⲆⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃⵠᐃⵠⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Devil Horns"
            }, {
                id: 18,
                Δⵠᐃ: ᐃⲆ.ΔⵠᐃⵠΔⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆᐃⲆⲆⲆΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Big Boss"
            }, {
                id: 35,
                Δⵠᐃ: ᐃⲆ.ⲆⲆⵠΔⲆᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃΔᐃⲆⵠΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Baby Kraken"
            }, {
                id: 63,
                Δⵠᐃ: ᐃⲆ.ΔⵠⵠᐃᐃᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔΔᐃᐃⲆⲆⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Deer Antlers"
            }, {
                id: 65,
                Δⵠᐃ: ᐃⲆ.ᐃⵠⲆⲆⵠⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃΔᐃΔΔΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Baby Dragon on your head"
            }, {
                id: 86,
                Δⵠᐃ: ᐃⲆ.ⵠΔⵠⲆᐃⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠᐃⵠΔⲆⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Gaz Mask and Glasses"
            }, {
                id: 87,
                Δⵠᐃ: ᐃⲆ.ⵠΔΔΔΔⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ⵠᐃΔⲆⵠⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Pink Gaz Mask and Glasses"
            }, {
                id: 88,
                Δⵠᐃ: ᐃⲆ.ᐃⲆΔⲆⲆΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔⲆΔⵠⲆΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "eogito",
                name: "Engineer Glasses"
            }, {
                id: 97,
                Δⵠᐃ: ᐃⲆ.ⲆᐃΔⲆⵠⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔΔⲆⲆⵠⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Jarred Horns"
            }, {
                id: 98,
                Δⵠᐃ: ᐃⲆ.ΔΔΔⵠⵠᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃⵠⲆⵠΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Curved Horns"
            }, {
                id: 99,
                Δⵠᐃ: ᐃⲆ.ⲆⵠΔⲆⲆⵠΔ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔⲆΔⵠΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Evil Goat Horns"
            }, {
                id: 107,
                Δⵠᐃ: ᐃⲆ.ᐃⵠᐃⲆⲆⵠⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃΔⵠᐃⲆᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Decorative Earmuffs"
            }, {
                id: 112,
                Δⵠᐃ: ᐃⲆ.ᐃᐃΔⵠᐃⵠⲆ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔⵠⲆⲆᐃⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Tamon Dragon Pet"
            }, {
                id: 116,
                Δⵠᐃ: ᐃⲆ.ΔⲆⵠΔⵠⲆⵠ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠⵠᐃΔΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ΔⲆⵠⵠ,
                ⲆΔⲆ: "Starve.io",
                name: "Blanket"
            }, {
                id: 45,
                Δⵠᐃ: ᐃⲆ.ⲆⲆⵠⵠΔᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠΔⵠΔⲆⲆᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ᐃΔⲆᐃⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "More than Level 5",
                level: 5
            }, {
                id: 46,
                Δⵠᐃ: ᐃⲆ.ΔΔⲆⲆⵠΔΔ,
                ⵠΔⵠ: ᐃⲆ.ΔΔⵠⵠⵠΔᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ᐃΔⲆᐃⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "More than Level 10",
                level: 10
            }, {
                id: 47,
                Δⵠᐃ: ᐃⲆ.ⲆΔᐃⲆⲆⲆⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠΔΔᐃΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ᐃΔⲆᐃⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "More than Level 15",
                level: 15
            }, {
                id: 48,
                Δⵠᐃ: ᐃⲆ.ⲆᐃΔⲆΔΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔᐃⲆΔⵠᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ᐃΔⲆᐃⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "More than Level 20",
                level: 20
            }, {
                id: 49,
                Δⵠᐃ: ᐃⲆ.ⲆⲆⲆⵠⲆΔⲆ,
                ⵠΔⵠ: ᐃⲆ.ΔⵠᐃⵠⲆⵠⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ᐃΔⲆᐃⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "More than Level 25",
                level: 25
            }, {
                id: 50,
                Δⵠᐃ: ᐃⲆ.ᐃΔΔΔᐃᐃⵠ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆⲆᐃᐃᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ᐃΔⲆᐃⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "More than Level 30",
                level: 30
            }, {
                id: 51,
                Δⵠᐃ: ᐃⲆ.ⲆⵠᐃⵠΔΔᐃ,
                ⵠΔⵠ: ᐃⲆ.ᐃⲆᐃⵠⲆᐃΔ,
                ᐃᐃⵠ: ⲆⲆⵠ.ᐃΔⲆᐃⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "More than Level 35",
                level: 35
            }, {
                id: 52,
                Δⵠᐃ: ᐃⲆ.ⵠΔⲆΔⵠⲆΔ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠⲆΔⵠᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ᐃΔⲆᐃⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "More than Level 40",
                level: 40
            }, {
                id: 53,
                Δⵠᐃ: ᐃⲆ.ᐃⲆⵠᐃΔᐃᐃ,
                ⵠΔⵠ: ᐃⲆ.ⵠⵠᐃⵠⵠᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ᐃΔⲆᐃⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "More than Level 45",
                level: 45
            }, {
                id: 54,
                Δⵠᐃ: ᐃⲆ.ᐃⲆⲆⲆΔᐃⲆ,
                ⵠΔⵠ: ᐃⲆ.ⲆⵠⲆⲆⵠᐃᐃ,
                ᐃᐃⵠ: ⲆⲆⵠ.ᐃΔⲆᐃⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "More than Level 50",
                level: 50
            }, {
                id: 55,
                Δⵠᐃ: ᐃⲆ.ᐃΔⲆΔΔⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆᐃᐃᐃΔΔⲆ,
                ᐃᐃⵠ: ⲆⲆⵠ.ᐃΔⲆᐃⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "More than Level 55",
                level: 55
            }, {
                id: 56,
                Δⵠᐃ: ᐃⲆ.ΔⵠΔⲆⲆⲆᐃ,
                ⵠΔⵠ: ᐃⲆ.ⲆⲆⲆⲆΔᐃⵠ,
                ᐃᐃⵠ: ⲆⲆⵠ.ᐃΔⲆᐃⲆ,
                ⲆΔⲆ: "Starve.io",
                name: "More than Level 60",
                level: 60
            }]
        };
        Vf.ᐃᐃΔⲆᐃᐃⵠ = ⵠⵠⲆΔⲆᐃΔ(ⲆᐃᐃΔ.ⵠⵠⲆᐃⲆ, 21);
        Vf.ⵠᐃᐃΔⵠⲆⵠ = ⵠⵠⲆΔⲆᐃΔ(ⲆᐃᐃΔ.ⵠⵠⲆᐃⲆ, 20);
        ᐃΔ[255] = [];
        ᐃΔ[7] = [];
        ᐃΔ[250] = [];
        ᐃΔ[28] = [];
        ᐃΔ[29] = [];
        ᐃΔ[796] = [];
        for (var a = 0; ⲆᐃᐃΔ.ⵠⵠⲆᐃⲆ.length > a; a++) {
            ᐃΔ[255][a] = [ⲆᐃᐃΔ.ⵠⵠⲆᐃⲆ[a].Δⵠᐃ, ⲆᐃᐃΔ.ⵠⵠⲆᐃⲆ[a].ⵠΔⵠ];
            ᐃΔ[7][a] = [ⲆᐃᐃΔ.ⵠⵠⲆᐃⲆ[a].ⲆⲆΔⲆ, ⲆᐃᐃΔ.ⵠⵠⲆᐃⲆ[a].ΔᐃΔⲆ];
        }
        for (a = 0; a < ⲆᐃᐃΔ.ⲆⵠⲆⲆⲆ.length; a++) {
            ᐃΔ[28][a] = [ⲆᐃᐃΔ.ⲆⵠⲆⲆⲆ[a].Δⵠᐃ, ⲆᐃᐃΔ.ⲆⵠⲆⲆⲆ[a].ⵠΔⵠ];
        }
        for (a = 0; ⲆᐃᐃΔ.ⲆⲆⲆⵠΔ.length > a; a++) {
            ᐃΔ[250][a] = [ⲆᐃᐃΔ.ⲆⲆⲆⵠΔ[a].Δⵠᐃ, ⲆᐃᐃΔ.ⲆⲆⲆⵠΔ[a].ⵠΔⵠ];
        }
        for (a = 0; a < ⲆᐃᐃΔ.ⲆΔⵠᐃ.length; a++) {
            ᐃΔ[29][a] = [ⲆᐃᐃΔ.ⲆΔⵠᐃ[a].Δⵠᐃ, ⲆᐃᐃΔ.ⲆΔⵠᐃ[a].ⵠΔⵠ];
        }
        for (a = 0; a < ⲆᐃᐃΔ.ⵠᐃⲆⲆᐃ.length; a++) {
            ᐃΔ[796][a] = [ⲆᐃᐃΔ.ⵠᐃⲆⲆᐃ[a].Δⵠᐃ, ⲆᐃᐃΔ.ⵠᐃⲆⲆᐃ[a].ⵠΔⵠ];
        }
    };
    const Xb = Ag;
    function Zb(b, c, d, e, f, g) {
        if (e < g * 2) {
            g = e / 2;
        }
        if (f < g * 2) {
            g = f / 2;
        }
        if (g < 0) {
            g = 0;
        }
        b.beginPath();
        b.moveTo(c + g, d);
        b.arcTo(c + e, d, c + e, d + f, g);
        b.arcTo(c + e, d + f, c, d + f, g);
        b.arcTo(c, d + f, c, d, g);
        b.arcTo(c, d, c + e, d, g);
        b.closePath();
    }
    function $b(a, b, c, d) {
        if (b) {
            a.fillStyle = b;
            a.fill();
        }
        if (c) {
            a.lineWidth = d;
            a.strokeStyle = c;
            a.stroke();
        }
    }
    const ed = 1;
    function id(a, b, c, d) {
        a.beginPath();
        a.arc(b, c, d, 0, Math.PI * 2);
    }
    function td(a, b, c, d, e) {
        a.beginPath();
        a.lineCap = "round";
        a.arc(b, c, d, 0, e * (Math.PI * 2));
    }
    function nd(b, c, d, e) {
        var f = Math.PI * 2 / c;
        b.beginPath();
        var g = [{
            x: d,
            y: 0
        }];
        var a = [];
        for (var i = 1; i < c; i++) {
            g.push({
                x: Math.sin(i * f) * d,
                y: Math.cos(i * f) * d
            });
            var j = g.length;
            a.push(ⵠΔⲆⵠ.ⲆΔⲆᐃⵠᐃⲆ(g[j - 2], g[j - 1]));
        }
        a.push(ⵠΔⲆⵠ.ⲆΔⲆᐃⵠᐃⲆ(g[g.length - 1], g[0]));
        var k = a[a.length - 1];
        b.moveTo(k.x, k.y);
        for (i = 0; i < c; i++) {
            b.arcTo(g[i].x, g[i].y, a[i].x, a[i].y, e);
        }
        b.closePath();
    }
    const od = 3;
    const ad = 15;
    function rd(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = Math.floor(b * 28);
        var g = Math.floor(b * 20);
        e.font = g + "px Baloo Paaji";
        var a = b * 8;
        var h = e.measureText(c).width + a * 2;
        d.width = h;
        d.height = f;
        Zb(e, 0, 0, h, f, b * 10);
        e.globalAlpha = 0.5;
        $b(e, "#000");
        e.globalAlpha = 1;
        e.textBaseline = "middle";
        e.font = g + "px Baloo Paaji";
        e.beginPath();
        e.fillStyle = "#FFF";
        e.fillText(c, a, f / 2);
        return d;
    }
    function sd(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = Math.sqrt(b.width * b.width + b.height * b.height);
        d2 = e / 2;
        c.width = e;
        c.height = e;
        d.translate(d2, d2);
        d.rotate(a);
        d.drawImage(b, -b.width / 2, -b.height / 2);
        return c;
    }
    const hd = 11;
    function ld(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 264;
        d.height = a * 246;
        e.translate(0, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 54);
        e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
        e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
        e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
        e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
        e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
        e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
        e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
        e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
        e.closePath();
        $b(e, c[0]);
        e.translate(0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 54);
        e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
        e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
        e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
        e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
        e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
        e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
        e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
        e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
        e.closePath();
        $b(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 121, a * 102);
        e.bezierCurveTo(a * 111, a * 80, a * 110, a * 66, a * 108, a * 51);
        e.bezierCurveTo(a * 119, a * 65, a * 129, a * 85, a * 135, a * 99);
        e.bezierCurveTo(a * 142, a * 67, a * 146, a * 60, a * 152, a * 50);
        e.bezierCurveTo(a * 154, a * 71, a * 152, a * 85, a * 149, a * 104);
        e.bezierCurveTo(a * 166, a * 88, a * 175, a * 83, a * 188, a * 78);
        e.bezierCurveTo(a * 179, a * 91, a * 170, a * 103, a * 160, a * 112);
        e.bezierCurveTo(a * 186, a * 107, a * 191, a * 107, a * 204, a * 108);
        e.bezierCurveTo(a * 195, a * 114, a * 179, a * 120, a * 163, a * 123);
        e.bezierCurveTo(a * 183, a * 130, a * 186, a * 135, a * 192, a * 140);
        e.bezierCurveTo(a * 179, a * 141, a * 164, a * 139, a * 153, a * 135);
        e.bezierCurveTo(a * 158, a * 145, a * 163, a * 159, a * 165, a * 177);
        e.bezierCurveTo(a * 154, a * 166, a * 145, a * 153, a * 138, a * 139);
        e.bezierCurveTo(a * 133, a * 155, a * 125, a * 170, a * 117, a * 182);
        e.bezierCurveTo(a * 116, a * 160, a * 119, a * 151, a * 124, a * 138);
        e.bezierCurveTo(a * 107, a * 150, a * 95, a * 156, a * 82, a * 159);
        e.bezierCurveTo(a * 94, a * 140, a * 101, a * 136, a * 113, a * 128);
        e.bezierCurveTo(a * 78, a * 123, a * 75, a * 121, a * 67, a * 118);
        e.bezierCurveTo(a * 85, a * 112, a * 94, a * 112, a * 111, a * 113);
        e.bezierCurveTo(a * 89, a * 97, a * 85, a * 93, a * 78, a * 82);
        e.bezierCurveTo(a * 92, a * 85, a * 101, a * 90, a * 121, a * 102);
        e.closePath();
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 103);
        e.bezierCurveTo(a * 111, a * 112, a * 117, a * 136, a * 140, a * 130);
        e.bezierCurveTo(a * 151, a * 126, a * 156, a * 115, a * 155, a * 107);
        e.bezierCurveTo(a * 155, a * 96, a * 154, a * 94, a * 148, a * 94);
        e.bezierCurveTo(a * 141, a * 94, a * 146, a * 104, a * 136, a * 104);
        e.closePath();
        $b(e, c[3], c[4], a * 4);
        return d;
    }
    function gd(c, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        var i = c * 120;
        var j = c * 110;
        var a = i / 2;
        var k = j / 2;
        var m = c * 20;
        var h = c * 112;
        var l = c * 82;
        var n = h / 2;
        var b = l / 2;
        var d = c * 4;
        f.width = i;
        f.height = j;
        g.globalAlpha = 1;
        g.translate(a, k);
        Zb(g, -n, -b, h, l, m);
        $b(g, e, e, d);
        return f;
    }
    const ud = 4;
    function bd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 247;
        e.save();
        e.translate(a * 183, a * 107);
        Zb(e, a * -8, a * -70.5, a * 16, a * 141, a * 1);
        e.restore();
        $b(e, c[0]);
        e.save();
        e.translate(a * 69.5, a * 110);
        Zb(e, a * -8.5, a * -71, a * 17, a * 143, a * 1);
        e.restore();
        $b(e, c[0]);
        e.save();
        e.translate(a * 123.5, a * 181);
        Zb(e, a * -84.5, a * -26, a * 169, a * 52, a * 5);
        e.restore();
        $b(e, c[2], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 95);
        e.bezierCurveTo(a * 105, a * 96, a * 113, a * 99, a * 134, a * 102);
        e.bezierCurveTo(a * 147, a * 106, a * 173, a * 100, a * 207, a * 105);
        e.bezierCurveTo(a * 210, a * 105, a * 207, a * 140, a * 207, a * 154);
        e.bezierCurveTo(a * 123.5, a * 151.5, a * 123.5, a * 151.5, a * 40, a * 149);
        e.bezierCurveTo(a * 37, a * 145, a * 39, a * 95, a * 41, a * 96);
        e.closePath();
        $b(e, c[2], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 68, a * 75);
        e.bezierCurveTo(a * 54, a * 72.5, a * 54, a * 72.5, a * 40, a * 70);
        e.bezierCurveTo(a * 38, a * 46, a * 40, a * 46, a * 53, a * 46);
        e.bezierCurveTo(a * 201, a * 41, a * 201, a * 41, a * 201, a * 42);
        e.bezierCurveTo(a * 211, a * 40, a * 208, a * 53, a * 208, a * 72);
        e.bezierCurveTo(a * 209, a * 91, a * 210, a * 96, a * 194, a * 94);
        e.bezierCurveTo(a * 119, a * 97, a * 119, a * 97, a * 44, a * 100);
        e.bezierCurveTo(a * 39, a * 99, a * 40, a * 96, a * 40, a * 80);
        e.bezierCurveTo(a * 54, a * 77.5, a * 54, a * 77.5, a * 68, a * 75);
        e.closePath();
        $b(e, c[3], c[1], a * 6);
        return d;
    }
    function dd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 191;
        d.height = a * 153;
        e.globalAlpha = 0.5;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 97.49996948242188, a * 95.12844848632812);
        Zb(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
        e.restore();
        $b(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 97.49996948242188, a * 95.12844848632812);
        Zb(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
        e.restore();
        $b(e, c[1], c[2], a * 4);
        e.globalCompositeOperation = "destination-out";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26.999969482421875, a * 50.850677490234375);
        e.bezierCurveTo(a * 46.499969482421875, a * 64.85067749023438, a * 46.499969482421875, a * 64.85067749023438, a * 65.99996948242188, a * 78.85067749023438);
        e.bezierCurveTo(a * 80.99996948242188, a * 87.85067749023438, a * 105.99996948242188, a * 82.85067749023438, a * 114.99996948242188, a * 80.85067749023438);
        e.bezierCurveTo(a * 130.99996948242188, a * 69.85067749023438, a * 152.99996948242188, a * 70.85067749023438, a * 166.99996948242188, a * 67.85067749023438);
        e.bezierCurveTo(a * 156.99996948242188, a * 52.850677490234375, a * 156.99996948242188, a * 52.850677490234375, a * 146.99996948242188, a * 37.850677490234375);
        e.bezierCurveTo(a * 101.49996948242188, a * 37.350677490234375, a * 101.49996948242188, a * 37.350677490234375, a * 55.999969482421875, a * 36.850677490234375);
        e.closePath();
        $b(e, c[2], c[3], a * 4);
        e.globalCompositeOperation = "source-over";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 40.999969482421875, a * 59.850677490234375);
        e.bezierCurveTo(a * 41.999969482421875, a * 50.850677490234375, a * 47.999969482421875, a * 47.850677490234375, a * 56.999969482421875, a * 49.850677490234375);
        e.bezierCurveTo(a * 65.99996948242188, a * 41.850677490234375, a * 76.99996948242188, a * 42.850677490234375, a * 90.99996948242188, a * 47.850677490234375);
        e.bezierCurveTo(a * 94.99996948242188, a * 42.850677490234375, a * 104.99996948242188, a * 42.850677490234375, a * 114.99996948242188, a * 47.850677490234375);
        e.bezierCurveTo(a * 131.99996948242188, a * 42.850677490234375, a * 142.99996948242188, a * 48.850677490234375, a * 145.99996948242188, a * 56.850677490234375);
        e.bezierCurveTo(a * 160.99996948242188, a * 63.850677490234375, a * 154.99996948242188, a * 69.85067749023438, a * 155.99996948242188, a * 70.85067749023438);
        e.bezierCurveTo(a * 141.99996948242188, a * 71.85067749023438, a * 141.99996948242188, a * 71.85067749023438, a * 127.99996948242188, a * 72.85067749023438);
        e.bezierCurveTo(a * 110.99996948242188, a * 83.85067749023438, a * 107.99996948242188, a * 82.85067749023438, a * 90.99996948242188, a * 85.85067749023438);
        e.bezierCurveTo(a * 70.99996948242188, a * 83.85067749023438, a * 64.99996948242188, a * 79.85067749023438, a * 53.999969482421875, a * 70.85067749023438);
        e.closePath();
        $b(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 33.999969482421875, a * 65.85067749023438);
        e.bezierCurveTo(a * 36.999969482421875, a * 59.850677490234375, a * 34.999969482421875, a * 60.850677490234375, a * 39.999969482421875, a * 59.850677490234375);
        e.bezierCurveTo(a * 47.999969482421875, a * 61.850677490234375, a * 62.999969482421875, a * 76.85067749023438, a * 74.99996948242188, a * 79.85067749023438);
        e.bezierCurveTo(a * 93.99996948242188, a * 85.85067749023438, a * 111.99996948242188, a * 83.85067749023438, a * 124.99996948242188, a * 70.85067749023438);
        e.bezierCurveTo(a * 129.99996948242188, a * 67.85067749023438, a * 145.99996948242188, a * 65.85067749023438, a * 159.99996948242188, a * 67.85067749023438);
        e.bezierCurveTo(a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 75.85067749023438);
        e.bezierCurveTo(a * 146.99996948242188, a * 72.85067749023438, a * 144.99996948242188, a * 75.85067749023438, a * 143.99996948242188, a * 82.85067749023438);
        e.bezierCurveTo(a * 144.99996948242188, a * 86.85067749023438, a * 140.99996948242188, a * 90.85067749023438, a * 137.99996948242188, a * 86.85067749023438);
        e.bezierCurveTo(a * 139.99996948242188, a * 72.85067749023438, a * 135.99996948242188, a * 72.85067749023438, a * 133.99996948242188, a * 82.85067749023438);
        e.bezierCurveTo(a * 127.99996948242188, a * 88.85067749023438, a * 124.99996948242188, a * 70.85067749023438, a * 116.99996948242188, a * 86.85067749023438);
        e.bezierCurveTo(a * 110.99996948242188, a * 91.85067749023438, a * 96.99996948242188, a * 81.85067749023438, a * 89.99996948242188, a * 90.85067749023438);
        e.bezierCurveTo(a * 85.99996948242188, a * 92.85067749023438, a * 81.99996948242188, a * 95.85067749023438, a * 76.99996948242188, a * 86.85067749023438);
        e.bezierCurveTo(a * 67.99996948242188, a * 93.85067749023438, a * 67.99996948242188, a * 91.85067749023438, a * 60.999969482421875, a * 79.85067749023438);
        e.bezierCurveTo(a * 53.999969482421875, a * 71.85067749023438, a * 52.999969482421875, a * 72.85067749023438, a * 46.999969482421875, a * 77.85067749023438);
        e.bezierCurveTo(a * 41.999969482421875, a * 78.85067749023438, a * 42.999969482421875, a * 69.85067749023438, a * 33.999969482421875, a * 65.85067749023438);
        e.closePath();
        $b(e, c[5], c[6], a * 4);
        id(e, a * 68, a * 111.29513549804688, a * 15);
        $b(e, c[7], c[8], a * 4);
        id(e, a * 123, a * 111.29510498046875, a * 15);
        $b(e, c[7], c[8], a * 4);
        id(e, a * 63, a * 106, a * 5);
        $b(e, c[9]);
        id(e, a * 118, a * 106, a * 5);
        $b(e, c[9]);
        return d;
    }
    function vd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 247;
        e.save();
        e.translate(a * 182, a * 120);
        Zb(e, a * -8, a * -67, a * 16, a * 134, a * 1);
        e.restore();
        $b(e, c[0]);
        e.save();
        e.translate(a * 68.5, a * 127.5);
        Zb(e, a * -8.5, a * -70.5, a * 17, a * 141, a * 1);
        e.restore();
        $b(e, c[0]);
        e.save();
        e.translate(a * 123.5, a * 68);
        Zb(e, a * -82.5, a * -24, a * 165, a * 48, a * 4);
        e.restore();
        $b(e, c[2], c[1], a * 6);
        e.save();
        e.translate(a * 123, a * 179.5);
        Zb(e, a * -83, a * -24.5, a * 166, a * 49, a * 4);
        e.restore();
        $b(e, c[2], c[1], a * 6);
        e.save();
        e.translate(a * 123.5, a * 123.5);
        e.rotate(6.24);
        Zb(e, a * -82.5, a * -24.5, a * 165, a * 49, a * 4);
        e.restore();
        $b(e, c[3], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 204, a * 112);
        e.bezierCurveTo(a * 149, a * 121.5, a * 96, a * 130, a * 94, a * 131);
        e.bezierCurveTo(a * 149.5, a * 127.5, a * 149.5, a * 127.5, a * 205, a * 124);
        e.closePath();
        $b(e, c[1]);
        return d;
    }
    function cd(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 191;
        c.height = a * 153;
        d.save();
        d.translate(a * 96.49996948242188, a * 66.79510498046875);
        Zb(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
        d.restore();
        $b(d, b[0], b[0], a * 4);
        d.translate(a * 2, 0);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 119, a * 28);
        d.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
        d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
        d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
        d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
        d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
        d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
        d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
        d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
        d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
        d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
        d.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
        d.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
        d.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
        d.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
        d.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
        d.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
        d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
        d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
        d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
        d.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
        d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
        d.closePath();
        $b(d, b[0], b[0], a * 4);
        d.save();
        d.translate(a * 97.49996948242188, a * 95.12844848632812);
        Zb(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
        d.restore();
        $b(d, b[0], b[0], a * 4);
        return c;
    }
    const md = String.fromCharCode;
    const pd = md(101);
    const Cd = md(118);
    const Td = md(97);
    const fd = md(108);
    function zd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 70;
        d.height = a * 70;
        e.globalAlpha = 0.5;
        id(e, a * 26, a * 26, a * 9);
        $b(e, c[0]);
        id(e, a * 56, a * 36, a * 9);
        $b(e, c[1]);
        id(e, a * 40, a * 50, a * 9);
        $b(e, c[2]);
        e.globalAlpha = 1;
        id(e, a * 26, a * 26, a * 5);
        $b(e, c[0]);
        id(e, a * 56, a * 36, a * 5);
        $b(e, c[1]);
        id(e, a * 40, a * 50, a * 5);
        $b(e, c[2]);
        return d;
    }
    function wd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 191;
        d.height = a * 153;
        e.globalAlpha = 0.5;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 96.49996948242188, a * 66.79510498046875);
        e.rotate(0);
        Zb(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
        e.restore();
        $b(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 96.49996948242188, a * 66.79510498046875);
        e.rotate(0);
        Zb(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
        e.restore();
        $b(e, c[1], c[2], a * 4);
        e.translate(a * 2, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 119, a * 28);
        e.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
        e.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
        e.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
        e.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
        e.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
        e.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
        e.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
        e.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
        e.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
        e.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
        e.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
        e.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
        e.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
        e.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
        e.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
        e.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
        e.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
        e.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
        e.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
        e.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
        e.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
        e.closePath();
        $b(e, c[3], c[4], a * 4);
        return d;
    }
    function Pd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 247;
        e.save();
        e.translate(a * 69.5, a * 145);
        Zb(e, a * -8.5, a * -63, a * 17, a * 127, a * 1);
        e.restore();
        $b(e, c[0]);
        e.save();
        e.translate(a * 183, a * 145);
        Zb(e, a * -8, a * -63, a * 16, a * 126, a * 1);
        e.restore();
        $b(e, c[0]);
        e.save();
        e.translate(a * 123.5, a * 62.5);
        e.rotate(6.28);
        Zb(e, a * -84.5, a * -25.5, a * 169, a * 51, a * 5);
        e.restore();
        $b(e, c[2], c[1], a * 6);
        e.save();
        e.translate(a * 123.5, a * 118);
        e.rotate(6.24);
        Zb(e, a * -85.5, a * -24, a * 169, a * 48, a * 5);
        e.restore();
        $b(e, c[3], c[1], a * 6);
        e.save();
        e.translate(a * 122, a * 177.5);
        e.rotate(6.32);
        Zb(e, a * -84, a * -23.5, a * 169, a * 47, a * 5);
        e.restore();
        $b(e, c[2], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 37, a * 157);
        e.bezierCurveTo(a * 49, a * 160, a * 49, a * 160, a * 61, a * 163);
        e.bezierCurveTo(a * 49.5, a * 165.5, a * 49.5, a * 165.5, a * 38, a * 168);
        e.closePath();
        $b(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 205, a * 175);
        e.bezierCurveTo(a * 192.5, a * 180, a * 192.5, a * 180, a * 180, a * 185);
        e.bezierCurveTo(a * 193, a * 188, a * 193, a * 188, a * 206, a * 191);
        e.closePath();
        $b(e, c[1]);
        return d;
    }
    function kd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 22;
        d.height = a * 22;
        e.globalAlpha = 0.4;
        id(e, a * 11, a * 11, a * 10);
        $b(e, c[0]);
        e.globalAlpha = 0.7;
        id(e, a * 11, a * 11, a * 7);
        $b(e, c[0]);
        e.globalAlpha = 1;
        id(e, a * 11, a * 11, a * 4);
        $b(e, c[0]);
        return d;
    }
    const Ad = tr;
    function xd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 40;
        var a = b * 40;
        e.width = g;
        e.height = a;
        var i = b * g / 2;
        var j = b * a / 2;
        var k = b * 15;
        f.save();
        f.translate(i, j);
        f.globalAlpha = 1;
        id(f, 0, 0, k);
        $b(f, d[0]);
        k = b * 5;
        i = b * 2;
        j = b * 1;
        f.translate(i, j);
        f.globalAlpha = 1;
        id(f, 0, 0, k);
        $b(f, d[1]);
        f.restore();
        return e;
    }
    const Jd = 1;
    const Md = 3;
    function Bd(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 185;
        f.height = b * 240;
        g.globalAlpha = 0.5;
        g.translate(0, b * 10);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 44, b * 137);
        g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
        g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
        g.closePath();
        $b(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 53, b * 181);
        g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
        g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
        g.closePath();
        $b(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 63, b * 208);
        g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
        g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
        g.closePath();
        $b(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 130, b * 170);
        g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
        g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
        g.closePath();
        $b(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 39, b * 140);
        g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
        g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
        g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
        g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
        g.closePath();
        $b(g, d[0]);
        g.globalAlpha = 1;
        g.translate(0, b * -10);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 44, b * 137);
        g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
        g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
        g.closePath();
        $b(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 53, b * 181);
        g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
        g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
        g.closePath();
        $b(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 63, b * 208);
        g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
        g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
        g.closePath();
        $b(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 130, b * 170);
        g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
        g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
        g.closePath();
        $b(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 39, b * 140);
        g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
        g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
        g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
        g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
        g.closePath();
        $b(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 59, b * 99);
        g.bezierCurveTo(b * 71, b * 68, b * 81, b * 68, b * 94, b * 67);
        g.bezierCurveTo(b * 105, b * 66, b * 119, b * 75, b * 123, b * 96);
        g.bezierCurveTo(b * 104, b * 91, b * 101, b * 94, b * 94, b * 97);
        g.bezierCurveTo(b * 76, b * 92, b * 73, b * 93, b * 60, b * 99);
        g.closePath();
        $b(g, d[3], d[2], b * 4);
        if (e === 0) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 47, b * 149);
            g.bezierCurveTo(b * 43, b * 140, b * 48, b * 130, b * 59, b * 127);
            g.bezierCurveTo(b * 77, b * 126, b * 90, b * 131, b * 131, b * 127);
            g.bezierCurveTo(b * 143, b * 130, b * 144, b * 143, b * 132, b * 154);
            g.bezierCurveTo(b * 90, b * 152, b * 90, b * 152, b * 48, b * 150);
            g.closePath();
            $b(g, d[1]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 40, b * 139);
            g.bezierCurveTo(b * 48, b * 113, b * 76, b * 119, b * 91, b * 126);
            g.bezierCurveTo(b * 117, b * 113, b * 135, b * 117, b * 144, b * 134);
            g.bezierCurveTo(b * 144, b * 138, b * 144, b * 138, b * 144, b * 142);
            g.bezierCurveTo(b * 128, b * 124, b * 108, b * 124, b * 91, b * 136);
            g.bezierCurveTo(b * 59, b * 124, b * 50, b * 137, b * 42, b * 148);
            g.closePath();
            $b(g, d[3], d[2], b * 4);
        } else {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 41, b * 139);
            g.bezierCurveTo(b * 53, b * 117, b * 69, b * 118, b * 92, b * 127);
            g.bezierCurveTo(b * 124, b * 111, b * 136, b * 121, b * 143, b * 136);
            g.bezierCurveTo(b * 142, b * 144, b * 142, b * 144, b * 141, b * 152);
            g.bezierCurveTo(b * 128, b * 131, b * 113, b * 138, b * 92, b * 145);
            g.bezierCurveTo(b * 57, b * 133, b * 57, b * 147, b * 44, b * 154);
            g.closePath();
            $b(g, d[3], d[2], b * 4);
        }
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 90, b * 95);
        g.bezierCurveTo(b * 99, b * 82, b * 98, b * 58, b * 99, b * 40);
        g.bezierCurveTo(b * 90, b * 38, b * 89, b * 34, b * 92, b * 17);
        g.bezierCurveTo(b * 92, b * 5, b * 83, b * 16, b * 78, b * 29);
        g.bezierCurveTo(b * 72, b * 59, b * 87, b * 81, b * 89, b * 87);
        g.closePath();
        $b(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 90, b * 86);
        g.bezierCurveTo(b * 95, b * 74, b * 95, b * 62, b * 95, b * 43);
        g.bezierCurveTo(b * 84, b * 37, b * 86, b * 34, b * 89, b * 16);
        g.bezierCurveTo(b * 75, b * 29, b * 80, b * 58, b * 90, b * 85);
        g.closePath();
        $b(g, d[1], d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 92, b * 117);
        g.bezierCurveTo(b * 98, b * 87, b * 93, b * 78, b * 85, b * 76);
        g.bezierCurveTo(b * 85.5, b * 79.5, b * 85.5, b * 79.5, b * 86, b * 83);
        g.bezierCurveTo(b * 84, b * 85.5, b * 84, b * 85.5, b * 82, b * 88);
        g.bezierCurveTo(b * 90, b * 93, b * 89, b * 100, b * 92, b * 117);
        g.closePath();
        $b(g, d[1], d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 92, b * 175);
        g.bezierCurveTo(b * 95, b * 135, b * 98, b * 125, b * 109, b * 121);
        g.bezierCurveTo(b * 106, b * 114, b * 104, b * 114, b * 102, b * 113);
        g.bezierCurveTo(b * 103, b * 106, b * 104, b * 103, b * 107, b * 96);
        g.bezierCurveTo(b * 74, b * 108, b * 86, b * 157, b * 92, b * 174);
        g.closePath();
        $b(g, d[1], d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 48, b * 169);
        g.bezierCurveTo(b * 42, b * 187, b * 50, b * 193, b * 59, b * 198);
        g.closePath();
        $b(g, undefined, d[2], b * 5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 136, b * 171);
        g.bezierCurveTo(b * 139, b * 186, b * 138, b * 191, b * 124, b * 199);
        g.closePath();
        $b(g, Ih, d[2], b * 4);
        id(g, b * 63, b * 180, b * 15.231546211727817);
        $b(g, d[4]);
        id(g, b * 121, b * 181, b * 15.652475842498529);
        $b(g, d[4]);
        id(g, b * 58, b * 175, b * 5.656854249492381);
        $b(g, d[2]);
        id(g, b * 116, b * 175, b * 5.656854249492381);
        $b(g, d[2]);
        return f;
    }
    function Dd(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 185;
        c.height = a * 240;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 44, a * 137);
        d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
        d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
        d.closePath();
        $b(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 53, a * 181);
        d.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * 11, a * 136);
        d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
        d.closePath();
        $b(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 63, a * 208);
        d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
        d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
        d.closePath();
        $b(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130, a * 170);
        d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
        d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
        d.closePath();
        $b(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 39, a * 140);
        d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
        d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
        d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
        d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
        d.closePath();
        $b(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 90, a * 95);
        d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
        d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
        d.bezierCurveTo(a * 92, a * 5, a * 83, a * 16, a * 78, a * 29);
        d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
        d.closePath();
        $b(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 90, a * 86);
        d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
        d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * 16);
        d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
        d.closePath();
        $b(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 92, a * 117);
        d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
        d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
        d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
        d.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
        d.closePath();
        $b(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 92, a * 175);
        d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
        d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
        d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
        d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
        d.closePath();
        $b(d, b[0]);
        return c;
    }
    const Ed = 0;
    const Id = 5;
    function Sd(c, e, f) {
        var g = document.createElement("canvas");
        var i = g.getContext("2d");
        var j = c * 32;
        var a = c * 32;
        var k = j / 2;
        var m = a / 2;
        g.width = j;
        g.height = a;
        var h = c * 5;
        var l = c * 28;
        var n = h / 2;
        var b = l / 2;
        i.translate(c * 0, c * 0);
        i.translate(k, m);
        if (f == 1) {
            id(i, 0, 0, c * 10);
            $b(i, e[2], e[2], c * 3);
            for (var d = 0; d < 4; d++) {
                Zb(i, -n, -b, h, l, c * 2);
                i.rotate(Math.PI / 4);
                $b(i, e[2], e[2], c * 4);
            }
        }
        id(i, 0, 0, c * 10);
        $b(i, e[0], e[1], c * 1.5);
        for (d = 0; d < 4; d++) {
            Zb(i, -n, -b, h, l, c * 2);
            i.rotate(Math.PI / 4);
            $b(i, e[0], e[1], c * 1.5);
        }
        id(i, 0, 0, c * 10);
        $b(i, e[0]);
        id(i, 0, 0, c * 4);
        $b(i, e[2], e[1], c * 1.5);
        i.globalCompositeOperation = "destination-out";
        id(i, 0, 0, c * 4);
        $b(i, e[0], e[1], c * 2);
        i.globalCompositeOperation = "source-over";
        id(i, 0, 0, c * 4);
        $b(i, cn, e[1], c * 2);
        return g;
    }
    function Qd(b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 200;
        c.width = e;
        c.height = f;
        var g = vu(0.35, Xb, ["#0e3022", "#0b8052", "#077b49"]);
        d.drawImage(g, 10, 10);
        g = ec(0.9, false, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 21, 20);
        g = ec(0.9, Xs, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 38, 28);
        g = ec(0.9, false, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 15, 37);
        g = ec(0.9, false, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 32, 45);
        return c;
    }
    function _d(c, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        var i = c * 85;
        var j = c * 115;
        var a = c * 6;
        f.width = i;
        f.height = j;
        g.translate(c * -130, c * -60 + a);
        g.globalAlpha = 0.5;
        g.beginPath();
        g.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
        g.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
        g.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
        g.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
        g.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
        g.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
        g.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
        g.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
        g.closePath();
        $b(g, e[0]);
        g.translate(0, -a);
        g.globalAlpha = 1;
        g.beginPath();
        g.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
        g.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
        g.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
        g.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
        g.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
        g.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
        g.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
        g.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
        g.closePath();
        $b(g, e[1], e[2], 4);
        var k = c * 155;
        var m = c * 133;
        var h = c * 10;
        var l = c * 3;
        var n = k + c * -3;
        var b = m + c * -5;
        g.save();
        g.translate(k, m);
        g.globalAlpha = 1;
        id(g, 0, 0, h);
        $b(g, e[3]);
        g.restore();
        g.save();
        g.translate(n, b);
        g.globalAlpha = 1;
        id(g, 0, 0, l);
        $b(g, e[4]);
        g.restore();
        g.save();
        g.translate(k + c * 27, m);
        g.globalAlpha = 1;
        id(g, 0, 0, h);
        $b(g, e[3]);
        g.restore();
        g.save();
        g.translate(c * 27 + n, b);
        g.globalAlpha = 1;
        id(g, 0, 0, l);
        $b(g, e[4]);
        return f;
    }
    function Fd(f, e, g) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = (r = f * 125) / 2;
        var a = (t = f * 95) / 2;
        var n = f * 10;
        var o = f * 8;
        var h = f * 112;
        var l = f * 82;
        var q = h / 2;
        var b = l / 2;
        var d = f * 4;
        i.width = r;
        i.height = t;
        j.translate(k - f * 4, a + f * 4);
        j.globalAlpha = e ? 0.5 : 1;
        Zb(j, -q, -b, h, l, n);
        $b(j, g[0]);
        j.globalAlpha = 1;
        j.translate(0, -o);
        Zb(j, -q, -b, h, l, n);
        $b(j, g[1], g[2], d);
        var r = f * 55;
        var t = f * 45;
        n = 5;
        j.translate(f * -40, f * -30);
        Zb(j, 0, 0, r, t, n);
        $b(j, g[3]);
        var u = Rd(f * 0.7, g[3]);
        j.drawImage(u, f * 45, f * -25);
        u = Rd(f * 0.7, g[3]);
        j.drawImage(u, f * 45, f * 15);
        u = Rd(f * 1.2, g[3]);
        j.drawImage(u, f * 28, f * -30);
        r = f * 15;
        t = f * 70;
        n = f * 5;
        j.translate(f * 78, f * -5);
        Zb(j, 0, 0, r, t, n);
        $b(j, g[4]);
        r = f * 9;
        t = f * 50;
        n = f * 3;
        j.translate(f * -20, f * 20);
        j.rotate(Math.PI / 5);
        j.globalAlpha = 0.6;
        Zb(j, 0, 0, r, t, n);
        $b(j, g[5]);
        j.translate(f * -20, f * 29);
        j.rotate(Math.PI / 5);
        j.globalAlpha = 0.6;
        j.beginPath();
        j.lineJoin = "round";
        j.moveTo(0, 0);
        j.lineTo(0, f * 30);
        j.lineTo(f * 30, f * 30);
        j.closePath();
        $b(j, null, g[5], f * 8);
        return i;
    }
    function Rd(c, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        var i = c * 100;
        var j = c * 100;
        var a = i / 2;
        var k = j / 2;
        f.width = i;
        f.height = j;
        var m = c * 5;
        var h = c * 28;
        var l = m / 2;
        var n = h / 2;
        g.translate(a, k);
        for (var b = 0; b < 4; b++) {
            Zb(g, -l, -n, m, h, c * 2);
            g.rotate(Math.PI / 4);
            $b(g, e);
        }
        g.arc(0, 0, c * 10, 0, Math.PI * 2);
        $b(g, e);
        g.globalCompositeOperation = "destination-out";
        id(g, 0, 0, c * 4);
        g.fill();
        return f;
    }
    const jd = 17;
    function Ld(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 188;
        c.height = a * 190;
        d.globalAlpha = 0.5;
        d.translate(0, a * 5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
        d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
        d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
        d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
        d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
        d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
        d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
        d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
        d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
        d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
        d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
        d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
        d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
        d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
        d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
        d.closePath();
        $b(d, b[0], b[0], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
        d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
        d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
        d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
        d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
        d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
        d.closePath();
        $b(d, b[0], b[0], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
        d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
        d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
        d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
        d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
        d.closePath();
        $b(d, b[0], b[0], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
        d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
        d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
        d.closePath();
        $b(d, b[0], b[0], a * 2);
        d.globalAlpha = 1;
        d.translate(0, a * -5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
        d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
        d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
        d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
        d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
        d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
        d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
        d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
        d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
        d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
        d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
        d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
        d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
        d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
        d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
        d.closePath();
        $b(d, b[1], b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
        d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
        d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
        d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
        d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
        d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
        d.closePath();
        $b(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
        d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
        d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
        d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
        d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
        d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
        d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
        d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
        d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
        d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
        d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
        d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
        d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
        d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
        d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
        d.closePath();
        $b(d, Zi, b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
        d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
        d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
        d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
        $b(d, b[1], b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
        d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
        d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
        $b(d, b[1], b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
        d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
        d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
        d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
        d.closePath();
        $b(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
        d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
        d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
        d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
        d.closePath();
        $b(d, b[3]);
        id(d, a * 77, a * 107, a * 6);
        $b(d, b[2]);
        id(d, a * 110, a * 107, a * 6);
        $b(d, b[2]);
        id(d, a * 75, a * 105, a * 3);
        $b(d, b[4]);
        id(d, a * 108, a * 105, a * 3);
        $b(d, b[4]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
        d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
        d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
        d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
        d.closePath();
        $b(d, b[1]);
        return c;
    }
    function Gd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 55;
        var a = b * 55;
        var h = b * 8;
        e.width = g;
        e.height = a;
        f.translate(b * -65, b * -55 + h);
        f.globalAlpha = 1;
        f.beginPath();
        f.moveTo(b * 95, b * 60);
        f.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
        f.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
        f.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
        f.closePath();
        $b(f, d[0], d[1], 3);
        f.globalAlpha = 1;
        f.beginPath();
        f.moveTo(b * 91, b * 70);
        f.bezierCurveTo(b * 91, b * 75, b * 100, b * 76, b * 100, b * 73);
        f.bezierCurveTo(b * 100, b * 69, b * 89, b * 65, b * 91, b * 70);
        f.closePath();
        $b(f, d[2], d[3], 3);
        return e;
    }
    const Wd = 19;
    function Od(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.save();
        e.translate(a * 202.5, a * 147.5);
        Zb(e, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
        e.restore();
        $b(e, b[0], b[1], a * 12);
        e.save();
        e.translate(a * 202.5, a * 190.5);
        Zb(e, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
        e.restore();
        $b(e, b[2], b[1], a * 12);
        e.save();
        e.save();
        e.translate(a * 202.5, a * 233.5);
        Zb(e, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
        e.restore();
        $b(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 202.5, a * 275);
        Zb(e, a * 96.5, a * -21, a * -193, a * 42, a * 0);
        e.restore();
        $b(e, b[0], b[1], a * 12);
        e.save();
        e.translate(a * 201, a * 212);
        e.rotate(8.64);
        Zb(e, a * -116, a * -22, a * 232, a * 44, a * 10);
        e.restore();
        $b(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 203.5, a * 121.5);
        Zb(e, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
        e.restore();
        $b(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 203.5, a * 299);
        Zb(e, a * -115.5, a * -20, a * 231, a * 40, a * 10);
        e.restore();
        $b(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 298.5, a * 210);
        Zb(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
        e.restore();
        $b(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 108.5, a * 210);
        Zb(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
        e.restore();
        $b(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 204, a * 121.5);
        Zb(e, a * -92, a * -9.5, a * 184, a * 19, a * 10);
        e.restore();
        $b(e, b[3], b[3], a * 10);
        e.save();
        e.translate(a * 197, a * 299);
        Zb(e, a * 85, a * -9, a * -170, a * 18, a * 10);
        e.restore();
        $b(e, b[3], b[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 94, a * 317);
        e.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
        e.closePath();
        $b(e, undefined, b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 279, a * 142);
        e.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
        e.closePath();
        $b(e, mr, b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 106);
        e.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
        e.closePath();
        $b(e, undefined, b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 281, a * 282);
        e.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
        e.closePath();
        $b(e, undefined, b[1], a * 12);
        if (c == 0) {
            e.scale(2, 2);
            e.translate(a * -7, a * 55);
            e.rotate(-0.5);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 60, a * 47);
            e.bezierCurveTo(a * 81, a * 46, a * 85, a * 47, a * 83, a * 63);
            e.bezierCurveTo(a * 83, a * 72, a * 83, a * 75, a * 72, a * 73);
            e.bezierCurveTo(a * 68, a * 80, a * 69, a * 82, a * 66, a * 73);
            e.bezierCurveTo(a * 62, a * 81, a * 61, a * 82, a * 59, a * 73);
            e.bezierCurveTo(a * 54, a * 81, a * 55, a * 81, a * 52, a * 74);
            e.bezierCurveTo(a * 38, a * 76, a * 41, a * 74, a * 40, a * 66);
            e.bezierCurveTo(a * 38, a * 45, a * 39, a * 49, a * 59, a * 47);
            e.closePath();
            $b(e, b[4], b[4], a * 5);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 68, a * 54);
            e.bezierCurveTo(a * 75, a * 54, a * 77, a * 62, a * 71, a * 64);
            e.bezierCurveTo(a * 62, a * 65, a * 63, a * 54, a * 68, a * 54);
            e.closePath();
            $b(e, b[3]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 50, a * 55);
            e.bezierCurveTo(a * 57, a * 55, a * 58, a * 65, a * 52, a * 65);
            e.bezierCurveTo(a * 44, a * 66, a * 44, a * 54, a * 50, a * 55);
            e.closePath();
            $b(e, b[3]);
        } else if (c == 1) {
            e.scale(0.6, 0.6);
            e.translate(a * 185, a * 165);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 108, a * 56);
            e.bezierCurveTo(a * 136, a * 58, a * 203, a * 69, a * 234, a * 75);
            e.bezierCurveTo(a * 246, a * 77, a * 247, a * 78, a * 245, a * 90);
            e.bezierCurveTo(a * 238, a * 143, a * 228, a * 197, a * 214, a * 259);
            e.bezierCurveTo(a * 212, a * 267, a * 209, a * 270, a * 189, a * 268);
            e.bezierCurveTo(a * 142, a * 264, a * 106, a * 260, a * 75, a * 253);
            e.bezierCurveTo(a * 60, a * 250, a * 64, a * 250, a * 66, a * 221);
            e.bezierCurveTo(a * 71, a * 168, a * 87, a * 95, a * 98, a * 67);
            e.bezierCurveTo(a * 101, a * 57, a * 103, a * 56, a * 106, a * 56);
            e.closePath();
            $b(e, b[4], b[4], a * 20);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 112, a * 72);
            e.bezierCurveTo(a * 132, a * 73, a * 227, a * 85, a * 226, a * 91);
            e.bezierCurveTo(a * 231, a * 89, a * 217, a * 196, a * 200, a * 250);
            e.bezierCurveTo(a * 196, a * 254, a * 175, a * 249, a * 166, a * 249);
            e.bezierCurveTo(a * 91, a * 241, a * 82, a * 236, a * 83, a * 232);
            e.bezierCurveTo(a * 90, a * 144, a * 108, a * 71, a * 111, a * 72);
            e.closePath();
            $b(e, undefined, b[0], a * 13);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 132, a * 117);
            e.bezierCurveTo(a * 171, a * 86, a * 191, a * 101, a * 188, a * 134);
            e.bezierCurveTo(a * 185, a * 154, a * 170, a * 158, a * 153, a * 158);
            e.bezierCurveTo(a * 143, a * 172, a * 146, a * 180, a * 147, a * 193);
            $b(e, Vq, b[0], a * 20);
            id(e, a * 142, a * 221, a * 16.1245154965971);
            $b(e, b[0]);
        }
        return d;
    }
    function Nd(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 238;
        c.height = a * 230;
        d.translate(a * -93, a * -110 + a * 5);
        d.globalAlpha = 0.3;
        id(d, a * 213.5, a * 256.75, a * 75);
        $b(d, b[5]);
        id(d, a * 213.5, a * 175.75, a * 25);
        $b(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 156.5, a * 137.75);
        d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.5, a * 178.75);
        d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130.5, a * 124.75);
        d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 183.75);
        d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107.5, a * 213.75);
        d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 212.5, a * 187.75);
        d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 102.5, a * 258.75);
        d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 192.75);
        d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.translate(0, -5);
        d.globalAlpha = 1;
        id(d, a * 213.5, a * 256.75, a * 75);
        $b(d, b[3]);
        id(d, a * 213.5, a * 175.75, a * 25);
        $b(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 219.5, a * 158.75);
        d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
        d.closePath();
        d.lineWidth = a * 10;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 210.5, a * 160.75);
        d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
        d.closePath();
        d.lineWidth = a * 10;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 219.5, a * 158.75);
        d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
        d.closePath();
        d.fillStyle = b[0];
        d.fill();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 210.5, a * 160.75);
        d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
        d.closePath();
        d.fillStyle = b[0];
        d.fill();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 156.5, a * 137.75);
        d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.5, a * 178.75);
        d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130.5, a * 124.75);
        d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 183.75);
        d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107.5, a * 213.75);
        d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 212.5, a * 187.75);
        d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 102.5, a * 258.75);
        d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 192.75);
        d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 156.5, a * 137.75);
        d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.5, a * 178.75);
        d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130.5, a * 124.75);
        d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 183.75);
        d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107.5, a * 213.75);
        d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 212.5, a * 187.75);
        d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 102.5, a * 258.75);
        d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 192.75);
        d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        id(d, a * 213.5, a * 256.75, a * 70);
        $b(d, b[0]);
        id(d, a * 213.5, a * 175.75, a * 20);
        $b(d, b[0]);
        id(d, a * 222, a * 166, a * 5);
        d.fillStyle = b[2];
        d.fill();
        id(d, a * 205, a * 166, a * 5);
        d.fillStyle = b[2];
        d.fill();
        id(d, a * 206.2, a * 167, a * 2.5);
        d.fillStyle = b[4];
        d.fill();
        id(d, a * 223.2, a * 167, a * 2.5);
        d.fillStyle = b[4];
        d.fill();
        d.save();
        d.translate(a * 213.5, a * 293.75);
        d.rotate(0.76);
        Zb(d, a * -22, a * -21, a * 44, a * 42, a * 6);
        d.restore();
        d.fillStyle = b[1];
        d.fill();
        d.save();
        d.translate(a * 212.5, a * 258.25);
        d.rotate(0.8);
        Zb(d, a * -15, a * -14.5, a * 30, a * 29, a * 6);
        d.restore();
        d.fillStyle = b[1];
        d.fill();
        return c;
    }
    const qd = 8;
    function Hd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 101, a * 255);
        e.bezierCurveTo(a * 113, a * 243, a * 179, a * 210, a * 219, a * 196);
        e.bezierCurveTo(a * 252, a * 203, a * 288, a * 215, a * 318, a * 233);
        e.bezierCurveTo(a * 304, a * 254, a * 258, a * 273, a * 215, a * 296);
        e.bezierCurveTo(a * 161, a * 287, a * 119, a * 270, a * 102, a * 257);
        e.closePath();
        $b(e, c[0], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 99, a * 258);
        e.bezierCurveTo(a * 99, a * 272.5, a * 99, a * 272.5, a * 99, a * 287);
        e.bezierCurveTo(a * 166, a * 319, a * 193, a * 320, a * 212, a * 324);
        e.bezierCurveTo(a * 292, a * 286, a * 312, a * 271, a * 319, a * 263);
        e.bezierCurveTo(a * 320, a * 249, a * 320, a * 241, a * 318, a * 234);
        e.bezierCurveTo(a * 300, a * 254, a * 254, a * 277, a * 216, a * 294);
        e.bezierCurveTo(a * 190, a * 296, a * 135, a * 276, a * 102, a * 258);
        e.closePath();
        $b(e, c[2], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212, a * 323);
        e.bezierCurveTo(a * 211.5, a * 310.5, a * 211.5, a * 310.5, a * 211, a * 298);
        e.closePath();
        $b(e, Fa, c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212, a * 210);
        e.bezierCurveTo(a * 286, a * 210, a * 331, a * 254, a * 212, a * 276);
        e.bezierCurveTo(a * 108, a * 276, a * 112, a * 222, a * 213, a * 208);
        e.closePath();
        $b(e, c[3], c[4], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 200);
        e.bezierCurveTo(a * 126, a * 216, a * 177, a * 232, a * 213, a * 237);
        e.bezierCurveTo(a * 266, a * 218, a * 288, a * 209, a * 318, a * 190);
        e.bezierCurveTo(a * 269, a * 164, a * 239, a * 158, a * 214, a * 153);
        e.bezierCurveTo(a * 148, a * 172, a * 131, a * 182, a * 98, a * 200);
        e.closePath();
        $b(e, c[0], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 97, a * 204);
        e.bezierCurveTo(a * 97, a * 215.5, a * 97, a * 215.5, a * 97, a * 227);
        e.bezierCurveTo(a * 148, a * 250, a * 179, a * 256, a * 212, a * 262);
        e.bezierCurveTo(a * 268, a * 244, a * 281, a * 233, a * 318, a * 214);
        e.bezierCurveTo(a * 318, a * 203, a * 318, a * 203, a * 318, a * 192);
        e.bezierCurveTo(a * 250, a * 225, a * 236, a * 231, a * 214, a * 239);
        e.bezierCurveTo(a * 158, a * 228, a * 126, a * 215, a * 99, a * 201);
        e.closePath();
        $b(e, c[2], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212, a * 260);
        e.bezierCurveTo(a * 212, a * 251.5, a * 212, a * 251.5, a * 212, a * 243);
        e.closePath();
        $b(e, ks, c[1], a * 14);
        id(e, a * 161, a * 201, a * 13);
        $b(e, c[5]);
        id(e, a * 216, a * 205, a * 8.06225774829855);
        $b(e, c[5]);
        id(e, a * 216, a * 175, a * 6.708203932499369);
        $b(e, c[5]);
        id(e, a * 271, a * 191, a * 5.0990195135927845);
        $b(e, c[5]);
        id(e, a * 206, a * 180, a * 11.180339887498949);
        $b(e, c[5]);
        return d;
    }
    const Ud = 15;
    function Yd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 173;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 85.25, a * 82.953125);
        e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
        e.closePath();
        $b(e, undefined, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111.25, a * 8.953125);
        e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
        e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
        e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111.25, a * 8.953125);
        e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
        e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
        e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
        e.closePath();
        $b(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 85.25, a * 82.953125);
        e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
        e.closePath();
        $b(e, undefined, c[6], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.25, a * 84.953125);
        e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
        e.closePath();
        $b(e, ks, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 160.25, a * 114.953125);
        e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
        e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
        e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 160.25, a * 114.953125);
        e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
        e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
        e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
        e.closePath();
        $b(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.25, a * 84.953125);
        e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
        e.closePath();
        $b(e, Zi, c[6], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 83.25, a * 83.953125);
        e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
        e.closePath();
        $b(e, Vq, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 13.25, a * 53.953125);
        e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
        e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
        e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 13.25, a * 53.953125);
        e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
        e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
        e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
        e.closePath();
        $b(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 83.25, a * 83.953125);
        e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
        e.closePath();
        $b(e, undefined, c[6], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.25, a * 86.953125);
        e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
        e.closePath();
        $b(e, sl, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.25, a * 159.953125);
        e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
        e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
        e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.25, a * 159.953125);
        e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
        e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
        e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
        e.closePath();
        $b(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.25, a * 86.953125);
        e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
        e.closePath();
        $b(e, $e, c[6], a * 4);
        return d;
    }
    function Kd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.save();
        e.translate(a * 85, a * 237);
        e.rotate(1.5707963267948966);
        nd(e, 6, a * 54.585977194239184, a * 1);
        e.restore();
        $b(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 178, a * 238);
        e.rotate(1.5707963267948966);
        nd(e, 6, a * 52.53573932334064, a * 1);
        e.restore();
        $b(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 270, a * 239);
        e.rotate(1.5707963267948966);
        nd(e, 6, a * 53.58058329516393, a * 1);
        e.restore();
        $b(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 222, a * 312);
        e.rotate(1.5707963267948966);
        nd(e, 6, a * 52.53573932334064, a * 1);
        e.restore();
        $b(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 317, a * 159);
        e.rotate(1.5707963267948966);
        nd(e, 6, a * 57.63465889766331, a * 1);
        e.restore();
        $b(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 223.5, a * 139.0625);
        e.rotate(1.5707963267948966);
        nd(e, 6, a * 51.66236541235796, a * 1);
        e.restore();
        $b(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 132.5, a * 137.0625);
        e.rotate(1.5707963267948966);
        nd(e, 6, a * 52.009614495783374, a * 1);
        e.restore();
        $b(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 178.5, a * 58.0625);
        e.rotate(1.5707963267948966);
        nd(e, 6, a * 53.16013544000805, a * 1);
        e.restore();
        $b(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 177.5, a * 216.0625);
        e.rotate(1.5707963267948966);
        nd(e, 6, a * 50, a * 1);
        e.restore();
        $b(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 84.5, a * 215.0625);
        e.rotate(1.5707963267948966);
        nd(e, 6, a * 54, a * 1);
        e.restore();
        $b(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 319.5, a * 138.0625);
        e.rotate(1.5707963267948966);
        nd(e, 6, a * 55.08175741568164, a * 1);
        e.restore();
        $b(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 269.5, a * 216.0625);
        e.rotate(1.5707963267948966);
        nd(e, 6, a * 54.589376255824725, a * 1);
        e.restore();
        $b(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 221.5, a * 293.0625);
        e.rotate(0.5235987755982988);
        nd(e, 6, a * 49.49747468305833, a * 1);
        e.restore();
        $b(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 221.5, a * 342.0625);
        e.bezierCurveTo(a * 221.5, a * 350.5625, a * 221.5, a * 350.5625, a * 221.5, a * 359.0625);
        e.closePath();
        $b(e, Io, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 270.0625);
        e.bezierCurveTo(a * 84.5, a * 277.0625, a * 84.5, a * 277.0625, a * 84.5, a * 284.0625);
        e.closePath();
        $b(e, Rh, c[2], a * 12);
        e.save();
        e.translate(a * 84.5, a * 215.0625);
        e.rotate(0.5235987755982988);
        nd(e, 6, a * 30, a * 15);
        e.restore();
        $b(e, c[3]);
        e.save();
        e.translate(a * 177.5, a * 215.0625);
        e.rotate(0.5235987755982988);
        nd(e, 6, a * 30, a * 15);
        e.restore();
        $b(e, c[3]);
        e.save();
        e.translate(a * 222.5, a * 294.0625);
        e.rotate(0.5235987755982988);
        nd(e, 6, a * 30, a * 15);
        e.restore();
        $b(e, c[3]);
        e.save();
        e.translate(a * 270.5, a * 216.0625);
        e.rotate(0.5235987755982988);
        nd(e, 6, a * 30, a * 15);
        e.restore();
        $b(e, c[3]);
        e.save();
        e.translate(a * 320.5, a * 134.0625);
        e.rotate(0.5235987755982988);
        nd(e, 6, a * 30, a * 15);
        e.restore();
        $b(e, c[3]);
        e.save();
        e.translate(a * 224.5, a * 138.0625);
        e.rotate(0.5235987755982988);
        nd(e, 6, a * 30, a * 15);
        e.restore();
        $b(e, c[3]);
        e.save();
        e.translate(a * 133.5, a * 137.0625);
        e.rotate(0.5235987755982988);
        nd(e, 6, a * 30, a * 15);
        e.restore();
        $b(e, c[3]);
        e.save();
        e.translate(a * 178.5, a * 56.0625);
        e.rotate(0.5235987755982988);
        nd(e, 6, a * 30, a * 15);
        e.restore();
        $b(e, c[3]);
        return d;
    }
    function Vd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 52;
        d.height = a * 65;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9.833328247070312, a * 12.078125);
        e.bezierCurveTo(a * 15.333328247070312, a * 28.078125, a * 15.333328247070312, a * 28.078125, a * 20.833328247070312, a * 44.078125);
        e.closePath();
        $b(e, undefined, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 7.8333282470703125, a * 20.078125);
        e.bezierCurveTo(a * 16.833328247070312, a * 32.578125, a * 16.833328247070312, a * 32.578125, a * 25.833328247070312, a * 45.078125);
        e.closePath();
        $b(e, hg, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.833328247070312, a * 26.078125);
        e.bezierCurveTo(a * 25.833328247070312, a * 11.078125, a * 16.833328247070312, a * 8.078125, a * 14.833328247070312, a * 7.078125);
        e.bezierCurveTo(a * 11.833328247070312, a * 17.078125, a * 13.833328247070312, a * 22.078125, a * 23.833328247070312, a * 27.078125);
        e.closePath();
        $b(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35.83332824707031, a * 8.078125);
        e.bezierCurveTo(a * 34.83332824707031, a * 27.078125, a * 28.833328247070312, a * 27.078125, a * 23.833328247070312, a * 28.078125);
        e.bezierCurveTo(a * 21.833328247070312, a * 14.078125, a * 26.833328247070312, a * 11.078125, a * 35.83332824707031, a * 8.078125);
        e.closePath();
        $b(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25.833328247070312, a * 39.078125);
        e.bezierCurveTo(a * 20.833328247070312, a * 29.078125, a * 14.833328247070312, a * 27.078125, a * 5.8333282470703125, a * 29.078125);
        e.bezierCurveTo(a * 9.833328247070312, a * 39.078125, a * 16.833328247070312, a * 42.078125, a * 25.833328247070312, a * 40.078125);
        e.closePath();
        $b(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.83332824707031, a * 23.078125);
        e.bezierCurveTo(a * 35.83332824707031, a * 35.078125, a * 31.833328247070312, a * 37.078125, a * 25.833328247070312, a * 36.078125);
        e.bezierCurveTo(a * 25.833328247070312, a * 24.078125, a * 33.83332824707031, a * 21.078125, a * 42.83332824707031, a * 23.078125);
        e.closePath();
        $b(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.833328247070312, a * 24.078125);
        e.bezierCurveTo(a * 20.833328247070312, a * 34.078125, a * 23.833328247070312, a * 40.078125, a * 27.833328247070312, a * 43.078125);
        e.bezierCurveTo(a * 37.33332824707031, a * 28.078125, a * 37.33332824707031, a * 28.078125, a * 46.83332824707031, a * 13.078125);
        $b(e, undefined, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 38.83332824707031, a * 14.078125);
        e.bezierCurveTo(a * 34.83332824707031, a * 24.078125, a * 34.83332824707031, a * 24.078125, a * 30.833328247070312, a * 34.078125);
        $b(e, Fa, c[1], a * 2);
        return d;
    }
    function Xd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 173;
        e.translate(a * 5, a * 5);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.32);
        nd(e, 7, a * 42.15447781671598, a * 10);
        e.restore();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.32);
        nd(e, 7, a * 42.15447781671598, a * 10);
        e.restore();
        $b(e, c[1], c[2], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.28);
        nd(e, 7, a * 30.463092423455635, a * 10);
        e.restore();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.28);
        nd(e, 7, a * 30.463092423455635, a * 10);
        e.restore();
        $b(e, c[3], c[4], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        id(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        id(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
        $b(e, c[5], c[6], a * 4);
        return d;
    }
    const Zd = 5;
    function $d(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 75;
        var a = b * 55;
        e.width = g;
        e.height = a;
        f.translate(b * -30, b * -40);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
        f.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
        f.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
        f.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
        f.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
        f.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
        f.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
        f.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
        f.closePath();
        $b(f, d[0]);
        f.beginPath();
        f.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
        f.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
        f.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
        f.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
        f.closePath();
        $b(f, d[1]);
        f.beginPath();
        f.moveTo(b * 69, b * 65);
        f.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
        f.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
        f.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
        $b(f, false, d[1], 2);
        f.beginPath();
        f.moveTo(b * 50, b * 48);
        f.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
        f.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
        f.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
        $b(f, d[2]);
        return e;
    }
    function At(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 173;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        nd(e, 7, a * 9.848857801796104, a * 5);
        e.restore();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        nd(e, 7, a * 9.848857801796104, a * 5);
        e.restore();
        $b(e, c[8], c[9], a * 4);
        return d;
    }
    const Bt = 0;
    function Ct(f, e, g, i, j) {
        var k = document.createElement("canvas");
        var a = k.getContext("2d");
        var n = f * 70;
        var o = f * 70;
        var h = f * 10;
        var l = f * 5;
        k.width = n;
        k.height = o + l;
        for (var q = 0; q < e.length; q++) {
            var r = e[q];
            a.globalAlpha = r.a;
            var s = r.f(g, false, r.c);
            a.save();
            a.translate(n / 2 + f * r.x, o / 2 + r.y * f);
            a.rotate(r.r);
            a.drawImage(s, -s.width / 2, -s.height / 2);
            a.restore();
        }
        var t = [];
        for (q = 0; q < i.length; q++) {
            var c = document.createElement("canvas");
            var u = c.getContext("2d");
            c.width = n;
            c.height = o + l;
            u.globalAlpha = j / 2;
            if (q == 2) {
                Zb(u, 0, l, n, o, h);
            } else {
                Zb(u, 0, 0, n, o + l, h);
            }
            $b(u, "#081a19");
            u.globalAlpha = j;
            Zb(u, 0, q == 2 ? l : 0, n, o, h);
            $b(u, i[q]);
            u.globalAlpha = 1;
            if (q == 2) {
                u.drawImage(k, 0, l);
            } else {
                u.drawImage(k, 0, 0);
            }
            t.push($a(c));
        }
        return t;
    }
    function Dt(f, e, g) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = f * 193;
        var a = f * 198;
        var m = f * 140;
        var n = f * 90;
        i.width = k;
        i.height = a;
        var h = f * 10;
        var l = f * 25;
        var o = f * 180;
        var b = l / 2;
        var d = o / 2;
        var p = f * 4;
        j.translate(f * -25, f * 1);
        j.translate(m, n);
        j.rotate(-Math.PI / 5);
        Zb(j, -b, -d, l, o, h);
        $b(j, g[0], g[1], p);
        j.translate(f * -30, f * -25);
        j.rotate(Math.PI / 3);
        Zb(j, -b, -d, l, o, h);
        $b(j, g[0], g[1], p);
        j.translate(f * 35, f * 30);
        j.rotate(Math.PI / 3);
        Zb(j, -b, -d, l, o, h);
        $b(j, g[0], g[1], p);
        return i;
    }
    function Et(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 145;
        var a = b * 145;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        var h = b * 70;
        f.translate(i, j);
        f.globalAlpha = 0.4;
        id(f, 0, 0, h);
        $b(f, d[0]);
        h = b * 50;
        f.translate(0, 0);
        f.globalAlpha = 0.8;
        id(f, 0, 0, h);
        $b(f, d[0]);
        h = b * 35;
        f.translate(0, 0);
        f.globalAlpha = 0.8;
        id(f, 0, 0, h);
        $b(f, d[1]);
        h = b * 20;
        f.translate(0, 0);
        f.globalAlpha = 0.8;
        id(f, 0, 0, h);
        $b(f, d[2]);
        return e;
    }
    function Ft(f, e, g) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = f * 195;
        var a = f * 190;
        var m = k / 2;
        var n = a / 2;
        i.width = k;
        i.height = a;
        var h = f * 10;
        var l = f * 35;
        var o = f * 150;
        var b = l / 2;
        var d = o / 2;
        var p = f * 4;
        j.translate(m - f * 5, n - f * 5);
        j.rotate(-Math.PI / 1.25);
        j.globalAlpha = 1;
        Zb(j, -b, -d, l, o, h);
        $b(j, g[0], g[1], p);
        j.translate(0, 0);
        j.rotate(Math.PI / 3);
        j.globalAlpha = 1;
        Zb(j, -b, -d, l, o, h);
        $b(j, g[0], g[1], p);
        j.translate(0, 5);
        Zb(j, -b / 2, -d / 2, l / 2, o / 3, h - 2);
        $b(j, g[1]);
        return i;
    }
    const Gt = 5;
    function Ht(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 205;
        var a = b * 205;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        var h = b * 100;
        f.translate(i, j);
        f.globalAlpha = 1;
        id(f, 0, 0, h);
        $b(f, d[0]);
        return e;
    }
    function It(f, e, g) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = f * 135;
        var a = f * 190;
        var m = k / 2;
        var n = a / 2;
        i.width = k;
        i.height = a;
        var h = f * 10;
        var l = f * 25;
        var o = f * 180;
        var b = l / 2;
        var d = o / 2;
        var p = f * 4;
        j.translate(m, n);
        j.rotate(-Math.PI / 5);
        j.globalAlpha = 1;
        Zb(j, -b, -d, l, o, h);
        $b(j, g[0], g[1], p);
        j.translate(0, 0);
        j.rotate(Math.PI / 5);
        j.globalAlpha = 1;
        Zb(j, -b, -d, l, o, h);
        $b(j, g[0], g[1], p);
        return i;
    }
    const Jt = 2;
    function Kt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 155;
        d.height = a * 127;
        e.globalAlpha = 0.5;
        e.translate(0, a * 8);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 68);
        e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
        e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
        e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
        e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
        e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -8);
        e.translate(a * 7, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        $b(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 41);
        e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
        e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
        e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
        e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
        e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
        e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
        e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        $b(e, undefined, c[2], a * 4);
        id(e, a * 18, a * 38, a * 14.866068747318506);
        $b(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 30);
        e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
        e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
        $b(e, c[1], c[2], a * 4);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 68);
        e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
        e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
        e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
        e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
        e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
        e.closePath();
        $b(e, c[4], c[5], a * 4);
        return d;
    }
    function Lt(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 370;
        var a = b * 370;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        var h = b * 180;
        f.globalAlpha = 0.2;
        id(f, i, j, h);
        $b(f, d[0]);
        return e;
    }
    function Mt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 155;
        d.height = a * 127;
        e.globalAlpha = 0.5;
        e.translate(0, a * 8);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 68);
        e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
        e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
        e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
        e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
        e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -8);
        e.translate(a * 7, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        $b(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 41);
        e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
        e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
        e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
        e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
        e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
        e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
        e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        $b(e, Mq, c[2], a * 4);
        id(e, a * 18, a * 38, a * 14.866068747318506);
        $b(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 30);
        e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
        e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
        $b(e, c[1], c[2], a * 4);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 74);
        e.bezierCurveTo(a * 38, a * 77.5, a * 38, a * 77.5, a * 49, a * 81);
        e.bezierCurveTo(a * 54.5, a * 75.5, a * 54.5, a * 75.5, a * 60, a * 70);
        e.bezierCurveTo(a * 64, a * 72, a * 64, a * 72, a * 68, a * 74);
        e.bezierCurveTo(a * 80.5, a * 67.5, a * 80.5, a * 67.5, a * 93, a * 61);
        e.bezierCurveTo(a * 104.5, a * 68, a * 104.5, a * 68, a * 116, a * 75);
        e.bezierCurveTo(a * 120.5, a * 72.5, a * 120.5, a * 72.5, a * 125, a * 70);
        e.bezierCurveTo(a * 129, a * 75, a * 129, a * 75, a * 133, a * 80);
        e.bezierCurveTo(a * 145.5, a * 76.5, a * 145.5, a * 76.5, a * 158, a * 73);
        e.bezierCurveTo(a * 158, a * 87, a * 158, a * 93, a * 155, a * 95);
        e.bezierCurveTo(a * 152.5, a * 96, a * 152.5, a * 96, a * 150, a * 97);
        e.bezierCurveTo(a * 121, a * 85, a * 108, a * 86, a * 93, a * 85);
        e.bezierCurveTo(a * 64, a * 85, a * 52, a * 95, a * 38, a * 99);
        e.bezierCurveTo(a * 36, a * 98.5, a * 36, a * 98.5, a * 34, a * 98);
        e.bezierCurveTo(a * 25, a * 98, a * 27, a * 91, a * 27, a * 76);
        e.closePath();
        $b(e, c[6], c[7], a * 6);
        return d;
    }
    function Nt(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 220;
        var g = b * 220;
        var a = b * 32;
        var h = b * 4;
        d.width = f;
        d.height = g;
        e.translate(f / 2, g / 2 + b * 10);
        e.globalAlpha = 0.5;
        id(e, 0, 0, a);
        $b(e, c[0], c[0]);
        e.translate(0, b * -8);
        e.globalAlpha = 1;
        id(e, 0, 0, a);
        $b(e, c[1], c[2], h);
        return d;
    }
    const Ot = 11;
    function Pt(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 40;
        var g = b * 40;
        var a = b * 16;
        var h = b * 4;
        d.width = f;
        d.height = g;
        e.translate(f / 2, g / 2);
        e.globalAlpha = 1;
        id(e, 0, 0, a);
        $b(e, c[0], c[1], h);
        return d;
    }
    const Qt = 2;
    function Rt(f, e, g, i) {
        var j = document.createElement("canvas");
        var k = j.getContext("2d");
        var a = f * 210;
        var m = f * 205;
        var n = f * 30;
        var h = f * 20;
        var l = f * 200;
        var o = f * 180;
        var b = l / 2;
        var d = o / 2;
        var p = 4;
        j.width = a;
        j.height = m;
        j.width = f * 419;
        j.height = f * 412;
        if (i == 1) {
            k.save();
            k.translate(f * 10, f * 0);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 117.99996948242188, f * 216.40621948242188);
            k.bezierCurveTo(f * 86.99996948242188, f * 221.40621948242188, f * 74.99996948242188, f * 217.40621948242188, f * 60.999969482421875, f * 205.40621948242188);
            $b(k, lh, e[4], f * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 114.99996948242188, f * 227.40621948242188);
            k.bezierCurveTo(f * 90.99996948242188, f * 233.40621948242188, f * 66.99996948242188, f * 228.40621948242188, f * 43.999969482421875, f * 225.40621948242188);
            $b(k, undefined, e[4], f * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 110.99996948242188, f * 236.40621948242188);
            k.bezierCurveTo(f * 94.99996948242188, f * 244.40621948242188, f * 79.99996948242188, f * 249.40621948242188, f * 60.999969482421875, f * 249.40621948242188);
            $b(k, undefined, e[4], f * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 111.99996948242188, f * 206.29513549804688);
            k.bezierCurveTo(f * 91.99996948242188, f * 206.29513549804688, f * 87.99996948242188, f * 201.29513549804688, f * 79.99996948242188, f * 192.29513549804688);
            $b(k, undefined, e[4], f * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 109.99996948242188, f * 249.18402099609375);
            k.bezierCurveTo(f * 97.99996948242188, f * 263.18402099609375, f * 85.99996948242188, f * 271.18402099609375, f * 65.99996948242188, f * 277.18402099609375);
            $b(k, undefined, e[4], f * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 105.99996948242188, f * 192.18402099609375);
            k.bezierCurveTo(f * 99.49996948242188, f * 197.68402099609375, f * 99.49996948242188, f * 197.68402099609375, f * 92.99996948242188, f * 203.18402099609375);
            k.bezierCurveTo(f * 95.99996948242188, f * 213.18402099609375, f * 95.99996948242188, f * 215.18402099609375, f * 89.99996948242188, f * 219.18402099609375);
            k.bezierCurveTo(f * 91.99996948242188, f * 223.18402099609375, f * 91.99996948242188, f * 226.18402099609375, f * 87.99996948242188, f * 230.18402099609375);
            k.bezierCurveTo(f * 89.99996948242188, f * 234.18402099609375, f * 91.99996948242188, f * 237.18402099609375, f * 90.99996948242188, f * 244.18402099609375);
            k.bezierCurveTo(f * 96.99996948242188, f * 252.18402099609375, f * 96.99996948242188, f * 256.18402099609375, f * 95.99996948242188, f * 262.18402099609375);
            k.bezierCurveTo(f * 106.49996948242188, f * 264.18402099609375, f * 106.49996948242188, f * 264.18402099609375, f * 116.99996948242188, f * 266.18402099609375);
            $b(k, Zi, e[4], f * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 104.99996948242188, f * 183.29513549804688);
            k.bezierCurveTo(f * 99.99996948242188, f * 193.29513549804688, f * 93.99996948242188, f * 195.29513549804688, f * 89.99996948242188, f * 201.29513549804688);
            k.bezierCurveTo(f * 86.99996948242188, f * 212.29513549804688, f * 85.99996948242188, f * 214.29513549804688, f * 81.99996948242188, f * 215.29513549804688);
            k.bezierCurveTo(f * 83.99996948242188, f * 223.29513549804688, f * 83.99996948242188, f * 227.29513549804688, f * 79.99996948242188, f * 230.29513549804688);
            k.bezierCurveTo(f * 83.99996948242188, f * 235.29513549804688, f * 84.99996948242188, f * 240.29513549804688, f * 79.99996948242188, f * 246.29513549804688);
            k.bezierCurveTo(f * 86.99996948242188, f * 251.29513549804688, f * 91.99996948242188, f * 256.2951354980469, f * 89.99996948242188, f * 266.2951354980469);
            k.bezierCurveTo(f * 102.99996948242188, f * 269.2951354980469, f * 102.99996948242188, f * 269.2951354980469, f * 115.99996948242188, f * 272.2951354980469);
            $b(k, undefined, e[4], f * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 107.99996948242188, f * 177.85067749023438);
            k.bezierCurveTo(f * 95.99996948242188, f * 187.35067749023438, f * 95.99996948242188, f * 187.35067749023438, f * 83.99996948242188, f * 196.85067749023438);
            k.bezierCurveTo(f * 82.99996948242188, f * 203.85067749023438, f * 80.99996948242188, f * 209.85067749023438, f * 72.99996948242188, f * 210.85067749023438);
            k.bezierCurveTo(f * 73.99996948242188, f * 220.85067749023438, f * 73.99996948242188, f * 221.85067749023438, f * 66.99996948242188, f * 227.85067749023438);
            k.bezierCurveTo(f * 71.99996948242188, f * 235.85067749023438, f * 73.99996948242188, f * 239.85067749023438, f * 71.99996948242188, f * 247.85067749023438);
            k.bezierCurveTo(f * 80.99996948242188, f * 257.8506774902344, f * 81.99996948242188, f * 263.8506774902344, f * 77.99996948242188, f * 271.8506774902344);
            k.bezierCurveTo(f * 95.49996948242188, f * 272.8506774902344, f * 95.49996948242188, f * 272.8506774902344, f * 112.99996948242188, f * 273.8506774902344);
            $b(k, undefined, e[4], f * 3);
            k.restore();
        } else if (i == 2) {
            k.save();
            k.translate(f * 130, f * 35);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 170.99996948242188, f * 133.85067749023438);
            k.bezierCurveTo(f * 195.99996948242188, f * 129.85067749023438, f * 196.99996948242188, f * 111.85067749023438, f * 200.99996948242188, f * 88.85067749023438);
            $b(k, undefined, e[4], f * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 169.99996948242188, f * 143.85067749023438);
            k.bezierCurveTo(f * 189.99996948242188, f * 145.85067749023438, f * 207.99996948242188, f * 126.85067749023438, f * 222.99996948242188, f * 100.85067749023438);
            $b(k, undefined, e[4], f * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 170.99996948242188, f * 157.85067749023438);
            k.bezierCurveTo(f * 193.99996948242188, f * 160.85067749023438, f * 210.99996948242188, f * 151.85067749023438, f * 232.99996948242188, f * 139.85067749023438);
            $b(k, Sk, e[4], f * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 169.99996948242188, f * 168.85067749023438);
            k.bezierCurveTo(f * 192.99996948242188, f * 175.85067749023438, f * 203.99996948242188, f * 177.85067749023438, f * 245.99996948242188, f * 168.85067749023438);
            $b(k, undefined, e[4], f * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 167.99996948242188, f * 168.85067749023438);
            k.bezierCurveTo(f * 183.99996948242188, f * 189.85067749023438, f * 191.99996948242188, f * 193.85067749023438, f * 220.99996948242188, f * 196.85067749023438);
            $b(k, Mq, e[4], f * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 176.99996948242188, f * 117.85067749023438);
            k.bezierCurveTo(f * 181.99996948242188, f * 120.85067749023438, f * 181.99996948242188, f * 120.85067749023438, f * 186.99996948242188, f * 123.85067749023438);
            k.bezierCurveTo(f * 183.99996948242188, f * 137.85067749023438, f * 185.99996948242188, f * 136.85067749023438, f * 190.99996948242188, f * 136.85067749023438);
            k.bezierCurveTo(f * 186.99996948242188, f * 147.85067749023438, f * 189.99996948242188, f * 152.85067749023438, f * 193.99996948242188, f * 155.85067749023438);
            k.bezierCurveTo(f * 187.99996948242188, f * 165.85067749023438, f * 190.99996948242188, f * 169.85067749023438, f * 190.99996948242188, f * 172.85067749023438);
            k.bezierCurveTo(f * 186.99996948242188, f * 183.85067749023438, f * 186.99996948242188, f * 185.85067749023438, f * 189.99996948242188, f * 188.85067749023438);
            k.bezierCurveTo(f * 182.49996948242188, f * 195.35067749023438, f * 182.49996948242188, f * 195.35067749023438, f * 174.99996948242188, f * 201.85067749023438);
            $b(k, Ih, e[4], f * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 176.99996948242188, f * 112.18402099609375);
            k.bezierCurveTo(f * 183.99996948242188, f * 119.18402099609375, f * 186.99996948242188, f * 117.18402099609375, f * 192.99996948242188, f * 116.18402099609375);
            k.bezierCurveTo(f * 191.99996948242188, f * 126.18402099609375, f * 193.99996948242188, f * 130.18402099609375, f * 199.99996948242188, f * 130.18402099609375);
            k.bezierCurveTo(f * 194.99996948242188, f * 145.18402099609375, f * 197.99996948242188, f * 147.18402099609375, f * 201.99996948242188, f * 153.18402099609375);
            k.bezierCurveTo(f * 196.99996948242188, f * 164.18402099609375, f * 197.99996948242188, f * 169.18402099609375, f * 201.99996948242188, f * 174.18402099609375);
            k.bezierCurveTo(f * 194.99996948242188, f * 184.18402099609375, f * 196.99996948242188, f * 187.18402099609375, f * 200.99996948242188, f * 193.18402099609375);
            k.bezierCurveTo(f * 185.99996948242188, f * 195.18402099609375, f * 181.99996948242188, f * 201.18402099609375, f * 174.99996948242188, f * 210.18402099609375);
            $b(k, undefined, e[4], f * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 176.99996948242188, f * 101.29513549804688);
            k.bezierCurveTo(f * 181.99996948242188, f * 108.29513549804688, f * 189.99996948242188, f * 110.29513549804688, f * 195.99996948242188, f * 107.29513549804688);
            k.bezierCurveTo(f * 197.99996948242188, f * 121.29513549804688, f * 200.99996948242188, f * 122.29513549804688, f * 206.99996948242188, f * 122.29513549804688);
            k.bezierCurveTo(f * 201.99996948242188, f * 138.29513549804688, f * 204.99996948242188, f * 142.29513549804688, f * 211.99996948242188, f * 148.29513549804688);
            k.bezierCurveTo(f * 201.99996948242188, f * 156.29513549804688, f * 205.99996948242188, f * 167.29513549804688, f * 213.99996948242188, f * 173.29513549804688);
            k.bezierCurveTo(f * 204.99996948242188, f * 181.29513549804688, f * 204.99996948242188, f * 187.29513549804688, f * 205.99996948242188, f * 193.29513549804688);
            k.bezierCurveTo(f * 190.99996948242188, f * 198.29513549804688, f * 181.99996948242188, f * 205.29513549804688, f * 174.99996948242188, f * 214.29513549804688);
            $b(k, undefined, e[4], f * 3);
            k.restore();
        }
        k.translate(j.width / 2, j.height / 2);
        if (!i) {
            k.globalAlpha = 0.5;
            Zb(k, -b, -d, l, o + h, n);
            $b(k, e[0]);
            if (g) {
                k.rotate(Math.PI);
            }
            k.globalAlpha = 1;
            Zb(k, -b, -d, l, o, n);
            $b(k, e[1], e[2], p);
            k.globalAlpha = 1;
            Zb(k, f * 35 - b, f * 20 - d, l - f * 50, o - f * 50, n - f * 10);
            $b(k, e[3]);
        }
        if (i == 3) {
            k.translate(-j.width / 2, -j.height / 2);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 121, f * 190);
            k.bezierCurveTo(f * 129, f * 186, f * 137, f * 183, f * 135, f * 163);
            k.bezierCurveTo(f * 131, f * 135, f * 153, f * 127, f * 177, f * 124);
            k.bezierCurveTo(f * 198, f * 120, f * 208, f * 122, f * 226, f * 128);
            k.bezierCurveTo(f * 261, f * 112, f * 271, f * 126, f * 287, f * 147);
            k.bezierCurveTo(f * 310, f * 163, f * 304, f * 183, f * 283, f * 196);
            k.bezierCurveTo(f * 296, f * 249, f * 278, f * 262, f * 253, f * 263);
            k.bezierCurveTo(f * 210, f * 264, f * 188, f * 252, f * 177, f * 234);
            k.bezierCurveTo(f * 133, f * 242, f * 123, f * 241, f * 115, f * 225);
            k.bezierCurveTo(f * 109, f * 206, f * 115, f * 193, f * 121, f * 190);
            k.closePath();
            $b(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 219, f * 144);
            k.bezierCurveTo(f * 251, f * 121, f * 277, f * 136, f * 276, f * 159);
            k.bezierCurveTo(f * 276, f * 176, f * 273, f * 191, f * 242, f * 193);
            k.bezierCurveTo(f * 226, f * 228, f * 155, f * 219, f * 150, f * 183);
            k.bezierCurveTo(f * 142, f * 144, f * 174, f * 127, f * 219, f * 144);
            k.closePath();
            $b(k, e[5]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 123, f * 214);
            k.bezierCurveTo(f * 119, f * 198, f * 129, f * 189, f * 146, f * 194);
            k.bezierCurveTo(f * 158, f * 201, f * 165, f * 218, f * 147, f * 226);
            k.bezierCurveTo(f * 135, f * 230, f * 125, f * 222, f * 123, f * 214);
            k.closePath();
            $b(k, e[5]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 257, f * 199);
            k.bezierCurveTo(f * 264, f * 199, f * 275, f * 213, f * 261, f * 220);
            k.bezierCurveTo(f * 246, f * 225, f * 235, f * 200, f * 257, f * 199);
            k.closePath();
            $b(k, e[5]);
            k.translate(f * -5, f * 55);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 186, f * 123);
            k.bezierCurveTo(f * 198, f * 115, f * 219, f * 110, f * 219, f * 123);
            k.bezierCurveTo(f * 216, f * 135, f * 171, f * 143, f * 186, f * 123);
            k.closePath();
            $b(k, e[5]);
            k.translate(f * 5, f * -55);
            k.translate(f * -5, f * 15);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 171, f * 241);
            k.bezierCurveTo(f * 189, f * 234, f * 200, f * 248, f * 189, f * 254);
            k.bezierCurveTo(f * 179, f * 260, f * 158, f * 246, f * 171, f * 241);
            k.closePath();
            $b(k, e[5]);
        } else if (i == 4) {
            k.translate(-j.width / 2, -j.height / 2);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 30, f * 167);
            k.bezierCurveTo(f * 47, f * 144, f * 64, f * 140, f * 80, f * 147);
            k.bezierCurveTo(f * 95, f * 154, f * 95, f * 159, f * 100, f * 179);
            k.bezierCurveTo(f * 105, f * 202, f * 95, f * 218, f * 69, f * 218);
            k.bezierCurveTo(f * 48, f * 236, f * 26, f * 223, f * 28, f * 213);
            k.bezierCurveTo(f * 28, f * 205, f * 29, f * 199, f * 32, f * 195);
            k.bezierCurveTo(f * 21, f * 183, f * 27, f * 173, f * 30, f * 167);
            k.closePath();
            $b(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 26, f * 145);
            k.bezierCurveTo(f * 32, f * 138, f * 37, f * 137, f * 40, f * 139);
            k.bezierCurveTo(f * 43, f * 140, f * 41, f * 150, f * 31, f * 159);
            k.bezierCurveTo(f * 23, f * 166, f * 17, f * 158, f * 26, f * 145);
            k.closePath();
            $b(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 13, f * 193);
            k.bezierCurveTo(f * 21, f * 187, f * 30, f * 190, f * 20, f * 202);
            k.bezierCurveTo(f * 13, f * 208, f * 7, f * 202, f * 13, f * 193);
            k.closePath();
            $b(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 121, f * 190);
            k.bezierCurveTo(f * 129, f * 186, f * 137, f * 183, f * 135, f * 163);
            k.bezierCurveTo(f * 131, f * 135, f * 153, f * 127, f * 177, f * 124);
            k.bezierCurveTo(f * 198, f * 120, f * 208, f * 122, f * 226, f * 128);
            k.bezierCurveTo(f * 261, f * 112, f * 271, f * 126, f * 287, f * 147);
            k.bezierCurveTo(f * 310, f * 163, f * 304, f * 183, f * 283, f * 196);
            k.bezierCurveTo(f * 296, f * 249, f * 278, f * 262, f * 253, f * 263);
            k.bezierCurveTo(f * 210, f * 264, f * 188, f * 252, f * 177, f * 234);
            k.bezierCurveTo(f * 133, f * 242, f * 123, f * 241, f * 115, f * 225);
            k.bezierCurveTo(f * 109, f * 206, f * 115, f * 193, f * 121, f * 190);
            k.closePath();
            $b(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 335, f * 196);
            k.bezierCurveTo(f * 312, f * 208, f * 300, f * 185, f * 309, f * 167);
            k.bezierCurveTo(f * 314, f * 141, f * 339, f * 127, f * 359, f * 144);
            k.bezierCurveTo(f * 363, f * 148, f * 364, f * 150, f * 364, f * 150);
            k.bezierCurveTo(f * 392, f * 143, f * 396, f * 183, f * 378, f * 204);
            k.bezierCurveTo(f * 367, f * 215, f * 339, f * 208, f * 335, f * 196);
            k.closePath();
            $b(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 349, f * 212);
            k.bezierCurveTo(f * 339, f * 216, f * 334, f * 208, f * 341, f * 203);
            k.bezierCurveTo(f * 353, f * 198, f * 361, f * 205, f * 349, f * 212);
            k.closePath();
            $b(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 46, f * 165);
            k.bezierCurveTo(f * 55, f * 148, f * 85, f * 157, f * 83, f * 175);
            k.bezierCurveTo(f * 99, f * 185, f * 89, f * 212, f * 66, f * 204);
            k.bezierCurveTo(f * 55, f * 212, f * 43, f * 212, f * 41, f * 202);
            k.bezierCurveTo(f * 39, f * 194, f * 42, f * 187, f * 49, f * 185);
            k.bezierCurveTo(f * 44, f * 175, f * 45, f * 172, f * 46, f * 165);
            k.closePath();
            $b(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 219, f * 144);
            k.bezierCurveTo(f * 251, f * 121, f * 277, f * 136, f * 276, f * 159);
            k.bezierCurveTo(f * 276, f * 176, f * 273, f * 191, f * 242, f * 193);
            k.bezierCurveTo(f * 226, f * 228, f * 155, f * 219, f * 150, f * 183);
            k.bezierCurveTo(f * 142, f * 144, f * 174, f * 127, f * 219, f * 144);
            k.closePath();
            $b(k, e[5]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 123, f * 214);
            k.bezierCurveTo(f * 119, f * 198, f * 129, f * 189, f * 146, f * 194);
            k.bezierCurveTo(f * 158, f * 201, f * 165, f * 218, f * 147, f * 226);
            k.bezierCurveTo(f * 135, f * 230, f * 125, f * 222, f * 123, f * 214);
            k.closePath();
            $b(k, e[5]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 257, f * 199);
            k.bezierCurveTo(f * 264, f * 199, f * 275, f * 213, f * 261, f * 220);
            k.bezierCurveTo(f * 246, f * 225, f * 235, f * 200, f * 257, f * 199);
            k.closePath();
            $b(k, e[5]);
            k.translate(f * -5, f * 55);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 186, f * 123);
            k.bezierCurveTo(f * 198, f * 115, f * 219, f * 110, f * 219, f * 123);
            k.bezierCurveTo(f * 216, f * 135, f * 171, f * 143, f * 186, f * 123);
            k.closePath();
            $b(k, e[5]);
            k.translate(f * 5, f * -55);
            k.translate(f * -5, f * 15);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 171, f * 241);
            k.bezierCurveTo(f * 189, f * 234, f * 200, f * 248, f * 189, f * 254);
            k.bezierCurveTo(f * 179, f * 260, f * 158, f * 246, f * 171, f * 241);
            k.closePath();
            $b(k, e[5]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(f * 367, f * 164);
            k.bezierCurveTo(f * 380, f * 160, f * 391, f * 185, f * 371, f * 189);
            k.bezierCurveTo(f * 362, f * 192, f * 354, f * 191, f * 350, f * 185);
            k.bezierCurveTo(f * 326, f * 205, f * 314, f * 182, f * 316, f * 171);
            k.bezierCurveTo(f * 317, f * 150, f * 332, f * 143, f * 347, f * 147);
            k.bezierCurveTo(f * 361, f * 151, f * 366, f * 158, f * 367, f * 164);
            k.closePath();
            $b(k, e[4]);
        }
        return j;
    }
    function St(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 220;
        var g = b * 220;
        var a = b * 16;
        d.width = f;
        d.height = g;
        e.translate(f / 2, g / 2);
        e.globalAlpha = 0.5;
        id(e, 0, 0, a);
        $b(e, c[0]);
        e.globalAlpha = 1;
        return d;
    }
    function Ut(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = Math.max(c.width, b.width);
        var g = Math.max(c.height, b.height);
        d.width = f;
        d.height = g;
        e.drawImage(b, (f - b.width) / 2, (g - b.height) / 2);
        e.drawImage(c, (f - c.width) / 2, (g - c.height) / 2);
        return d;
    }
    function Vt(c, e, f) {
        var g = document.createElement("canvas");
        var i = g.getContext("2d");
        var j = c * 105;
        var a = c * 125;
        var k = c * 4;
        var m = c * 10;
        var h = c * 5;
        var l = c * 10;
        var n = c * 110;
        var b = l / 2;
        var d = n / 2;
        g.width = j;
        g.height = a;
        i.save();
        i.globalAlpha = e ? 0.5 : 1;
        i.translate(j / 2 + c * 8, a / 2 + h);
        Zb(i, -b, -d, l, n, m);
        $b(i, e ? f[0] : f[1]);
        i.translate(c * -130 + h, c * -128 + h);
        i.beginPath();
        i.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
        i.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
        i.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
        i.closePath();
        $b(i, f[2]);
        i.restore();
        i.translate(j / 2 + 8, a / 2);
        i.globalAlpha = 1;
        Zb(i, -b, -d, l, n, m);
        $b(i, f[3], f[4], k);
        i.translate(c * -130, c * -125);
        i.beginPath();
        i.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
        i.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
        i.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
        i.closePath();
        $b(i, f[5], f[6], k);
        return g;
    }
    function Wt(c, e, f) {
        var g = document.createElement("canvas");
        var i = g.getContext("2d");
        var j = (b = c * 450) / 2;
        var a = (o = c * 145) / 2;
        var k = c * 10;
        var m = c * 300;
        var h = c * 30;
        var l = m / 2;
        var n = h / 2;
        if (f) {
            var b = c * 145;
            var o = c * 450;
            g.width = b;
            g.height = o;
            i.rotate(Math.PI / 2);
            i.save();
            i.globalAlpha = 0.5;
            Zb(i, c * 100, c * -110, m, h, k);
            $b(i, e[0]);
            i.translate(c * 178, c * -98);
            Zb(i, -l, -n - c * 6, c * 100, c * 100, k);
            $b(i, e[0]);
            i.translate(c * -50, c * 5);
            Zb(i, c * 220, c * -15, c * 90, c * 90, k);
            $b(i, e[0]);
            i.restore();
            i.save();
            i.globalAlpha = 1;
            i.translate(c * 250, c * -63);
            Zb(i, -l - c * 20, -n, m, h, k);
            $b(i, e[1], e[2], 4);
            i.translate(c * -70, c * -40);
            Zb(i, -l - c * 20, -n, c * 100, c * 100, k);
            $b(i, e[3], e[4], 4);
            i.translate(c * -70, c * 15);
            Zb(i, c * 220, c * -22, c * 90, c * 90, k);
            $b(i, e[3], e[4], 4);
            Zb(i, c * 230, c * -12, c * 55, c * 55, k);
            $b(i, e[5]);
            i.translate(c * -70, 0);
            Zb(i, c * -15, c * -2, c * 60, c * 60, k);
            $b(i, e[5]);
            i.restore();
        } else {
            g.width = b;
            g.height = o;
            i.save();
            i.globalAlpha = 0.5;
            i.translate(j, a + c * 10);
            Zb(i, -l, -n, m, h, k);
            $b(i, e[0]);
            i.translate(c * -65, c * -25);
            Zb(i, -l, -n - c * 6, c * 100, c * 100, c * 15);
            $b(i, e[0]);
            i.translate(c * -35, c * -5);
            Zb(i, c * 220, c * -15, c * 90, c * 90, c * 15);
            $b(i, e[0]);
            i.restore();
            i.save();
            i.globalAlpha = 1;
            i.translate(c * 240, c * 70);
            Zb(i, -l, -n, m, h, k);
            $b(i, e[1], e[2], 4);
            i.translate(c * -60, c * -40);
            Zb(i, -l - c * 20, -n, c * 100, c * 100, c * 15);
            $b(i, e[3], e[4], 4);
            i.translate(c * -55, c * 10);
            Zb(i, c * 220, c * -22, c * 90, c * 90, c * 15);
            $b(i, e[3], e[4], 4);
            Zb(i, c * 240, c * -12, c * 55, c * 55, c * 12);
            $b(i, e[5]);
            i.translate(c * 45, c * 0);
            Zb(i, c * -145, c * -2, c * 60, c * 60, c * 12);
            $b(i, e[5]);
            i.restore();
        }
        return g;
    }
    function Xt(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 121;
        f.height = b * 130;
        g.translate(0, b * 20);
        if (d == 1) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 6, b * 23);
            g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
            g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
            g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
            g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
            g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
            g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
            g.closePath();
            $b(g, undefined, c[3], b * 13);
        }
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 6, b * 23);
        g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
        g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
        g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
        g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
        g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
        g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
        g.closePath();
        $b(g, c[1], c[2], b * 4);
        if (e == 1) {
            g.translate(0, b * 5);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 67, b * 30);
            g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
            $b(g, undefined, c[0], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 17);
            g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
            $b(g, undefined, c[0], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 76, b * 8);
            g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
            $b(g, Gr, c[0], b * 10);
            if (d == 1) {
                g.translate(b * -6, b * -5);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 67, b * 30);
                g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
                $b(g, Gr, c[3], b * 18);
                g.translate(3, b * 0);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 70, b * 17);
                g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
                $b(g, undefined, c[3], b * 18);
                g.translate(3, b * 0);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 76, b * 8);
                g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
                $b(g, undefined, c[3], b * 18);
                g.translate(-6, b * 0);
            } else {
                g.translate(b * -6, b * -5);
            }
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 67, b * 30);
            g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
            $b(g, undefined, c[2], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 17);
            g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
            $b(g, Lk, c[2], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 76, b * 8);
            g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
            $b(g, undefined, c[2], b * 10);
        } else {
            if (d == 1) {
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 108, b * 27);
                g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
                g.closePath();
                $b(g, Zi, c[3], b * 18);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 79, b * 30);
                g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
                g.closePath();
                $b(g, Qr, c[3], b * 18);
            } else {
                g.translate(0, b * -5);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 108, b * 27);
                g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
                g.closePath();
                $b(g, lh, c[0], b * 7);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 79, b * 30);
                g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
                g.closePath();
                $b(g, Rh, c[0], b * 7);
                g.translate(0, b * 5);
            }
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 108, b * 27);
            g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
            g.closePath();
            $b(g, undefined, c[2], b * 7);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 79, b * 30);
            g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
            g.closePath();
            $b(g, undefined, c[2], b * 7);
        }
        return f;
    }
    const Yt = 8;
    function Zt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 424;
        d.height = a * 788;
        e.translate(a * 25, a * 25);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 193.5, a * 602.5);
        e.rotate(-0.12);
        Zb(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
        e.restore();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 519);
        e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
        e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
        e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
        e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 175, a * 119);
        e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
        e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
        e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
        e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 518);
        e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
        e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
        e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
        e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
        e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
        e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
        e.closePath();
        $b(e, c[0]);
        id(e, a * 204, a * 693, a * 36.013886210738214);
        $b(e, c[0]);
        id(e, a * 105, a * 518, a * 30);
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 171, a * 535);
        e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
        e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
        e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 244, a * 669);
        e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
        e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
        e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
        e.closePath();
        $b(e, c[0]);
        e.translate(a * -25, a * -25);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 193.5, a * 602.5);
        e.rotate(-0.12);
        Zb(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
        e.restore();
        $b(e, c[1], c[2], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 519);
        e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
        e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
        e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
        e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
        e.closePath();
        $b(e, c[3], c[4], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 175, a * 119);
        e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
        e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
        e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
        e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
        e.closePath();
        $b(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 518);
        e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
        e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
        e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
        e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
        e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
        e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
        e.closePath();
        $b(e, c[6], c[4], a * 16);
        id(e, a * 204, a * 693, a * 36.013886210738214);
        $b(e, c[6], c[4], a * 16);
        id(e, a * 105, a * 518, a * 30);
        $b(e, c[6], c[4], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 171, a * 535);
        e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
        e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
        e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
        e.closePath();
        $b(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 244, a * 669);
        e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
        e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
        e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
        e.closePath();
        $b(e, c[6]);
        id(e, a * 204, a * 693, a * 17.029386365926403);
        $b(e, c[7]);
        id(e, a * 106, a * 518, a * 12);
        $b(e, c[7]);
        return d;
    }
    function $t(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
        e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
        e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
        e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
        e.closePath();
        $b(e, c[0]);
        e.save();
        e.translate(a * 131, a * 425.5);
        e.rotate(0.16);
        Zb(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
        e.restore();
        $b(e, c[0]);
        id(e, a * 122, a * 480, a * 18.439088914585774);
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 371);
        e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
        e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
        e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
        e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
        e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
        e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
        e.closePath();
        $b(e, c[1], c[2], a * 12.5);
        e.save();
        e.translate(a * 131, a * 425.5);
        e.rotate(0.16);
        Zb(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
        e.restore();
        $b(e, c[4], c[5], a * 12.5);
        id(e, a * 122, a * 480, a * 18.439088914585774);
        $b(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 371);
        e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
        e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
        e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
        e.closePath();
        $b(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 345);
        e.bezierCurveTo(a * 142, a * 345, a * 147, a * 346, a * 158, a * 349);
        e.bezierCurveTo(a * 177.5, a * 224.5, a * 177.5, a * 224.5, a * 197, a * 100);
        e.bezierCurveTo(a * 190.5, a * 84.5, a * 190.5, a * 84.5, a * 184, a * 69);
        e.bezierCurveTo(a * 173.5, a * 82, a * 173.5, a * 82, a * 163, a * 95);
        e.closePath();
        $b(e, c[3]);
        return d;
    }
    function _t(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 100;
        d.height = a * 250;
        e.translate(a * -135, a * -75);
        e.globalAlpha = b ? 0.8 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 178.5, a * 238.03125);
        e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
        e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
        e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
        e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 155.5, a * 239.03125);
        e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
        e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
        e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
        e.closePath();
        $b(e, c[0]);
        id(e, a * 160.5, a * 243.03125, a * 7);
        $b(e, c[0]);
        id(e, a * 227.5, a * 242.03125, a * 7);
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.5, a * 253.03125);
        e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
        e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
        e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
        e.closePath();
        $b(e, c[0], c[0], a * 5);
        id(e, a * 194, a * 298, a * 9);
        $b(e, c[0], c[0], a * 5);
        e.globalAlpha = 1;
        e.translate(a * -10, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 178.5, a * 238.03125);
        e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
        e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
        e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
        e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
        e.closePath();
        $b(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 155.5, a * 239.03125);
        e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
        e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
        e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
        e.closePath();
        $b(e, c[1], c[2], a * 5);
        id(e, a * 160.5, a * 243.03125, a * 7);
        $b(e, c[1], c[2], a * 5);
        id(e, a * 227.5, a * 242.03125, a * 7);
        $b(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.5, a * 253.03125);
        e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
        e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
        e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
        e.closePath();
        $b(e, c[1], c[2], a * 7);
        id(e, a * 194, a * 298, a * 9);
        $b(e, c[1], c[2], a * 7);
        return d;
    }
    function au(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 469;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 30);
        e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
        e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
        e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
        e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
        e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
        e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
        e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 31);
        e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
        e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
        e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
        e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 328);
        e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
        e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
        e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 74, a * 302);
        e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
        e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
        e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
        e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
        e.closePath();
        $b(e, c[0]);
        e.save();
        e.translate(a * 51.5, a * 440.5);
        e.rotate(0.2);
        Zb(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
        e.restore();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 73, a * 316);
        e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
        e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 30);
        e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
        e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
        e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
        e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
        e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
        e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
        e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
        e.closePath();
        $b(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 31);
        e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
        e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
        e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
        e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 30);
        e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
        e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
        e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
        e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
        e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
        e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
        e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
        e.closePath();
        $b(e, hg, c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 328);
        e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
        e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
        e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
        e.closePath();
        $b(e, c[4], c[5], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 74, a * 302);
        e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
        e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
        e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
        e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
        e.closePath();
        $b(e, c[4], c[5], a * 7);
        e.save();
        e.translate(a * 51.5, a * 440.5);
        e.rotate(0.2);
        Zb(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
        e.restore();
        $b(e, c[4], c[5], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 73, a * 316);
        e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
        e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
        e.closePath();
        $b(e, c[6]);
        return d;
    }
    const bu = 4;
    function cu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 283;
        c.height = a * 224;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 100, a * 33);
        d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
        $b(d, cn, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 181, a * 32);
        d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
        $b(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 225, a * 52);
        d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
        $b(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 34, a * 134);
        d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
        $b(d, $e, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 249, a * 135);
        d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
        $b(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 56, a * 50);
        d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
        $b(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 93, a * 55);
        d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
        d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
        d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
        d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
        d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
        d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
        d.closePath();
        $b(d, b[0]);
        return c;
    }
    function du(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 283;
        f.height = b * 224;
        g.translate(0, b * 15);
        g.globalAlpha = 0.5;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 93, b * 55);
        g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
        g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
        g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
        g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
        g.closePath();
        $b(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 100, b * 33);
        g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
        g.closePath();
        $b(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 181, b * 32);
        g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
        $b(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 225, b * 52);
        g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
        $b(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 34, b * 134);
        g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
        $b(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 249, b * 135);
        g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
        $b(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 56, b * 50);
        g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
        $b(g, d[0]);
        g.translate(0, b * -15);
        g.globalAlpha = 1;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 100, b * 33);
        g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
        $b(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 181, b * 32);
        g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
        $b(g, Nh, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 225, b * 52);
        g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
        $b(g, Fa, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 34, b * 134);
        g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
        $b(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 249, b * 135);
        g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
        $b(g, hg, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 56, b * 50);
        g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
        $b(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 93, b * 55);
        g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
        g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
        g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
        g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
        g.closePath();
        $b(g, d[1], d[2], b * 10);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 100, b * 33);
        g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
        $b(g, undefined, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 181, b * 32);
        g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
        $b(g, undefined, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 225, b * 52);
        g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
        $b(g, Rh, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 34, b * 134);
        g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
        $b(g, undefined, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 249, b * 135);
        g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
        $b(g, $e, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 56, b * 50);
        g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
        $b(g, undefined, d[1], b * 20);
        id(g, b * 101, b * 155, b * 20.591260281974);
        $b(g, d[3]);
        id(g, b * 180, b * 155, b * 20.591260281974);
        $b(g, d[3]);
        id(g, b * 95, b * 148, b * 7.211102550927978);
        $b(g, d[4]);
        id(g, b * 173, b * 148, b * 7.211102550927978);
        $b(g, d[4]);
        if (e === 1) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 191, b * 107);
            g.bezierCurveTo(b * 180, b * 104, b * 175, b * 101, b * 180, b * 95);
            g.bezierCurveTo(b * 180, b * 95, b * 181, b * 99, b * 188, b * 103);
            g.bezierCurveTo(b * 191, b * 101, b * 191, b * 95, b * 190, b * 91);
            g.bezierCurveTo(b * 190, b * 91, b * 196, b * 89, b * 195, b * 99);
            g.closePath();
            $b(g, d[2]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 206, b * 98);
            g.bezierCurveTo(b * 203, b * 95, b * 200, b * 93, b * 198, b * 101);
            g.bezierCurveTo(b * 194, b * 109, b * 193, b * 109, b * 196, b * 110);
            g.bezierCurveTo(b * 206, b * 115, b * 209, b * 114, b * 211, b * 111);
            g.bezierCurveTo(b * 211, b * 106, b * 208, b * 108, b * 203, b * 108);
            g.bezierCurveTo(b * 193, b * 107, b * 204, b * 101, b * 206, b * 99);
            g.closePath();
            $b(g, d[2]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 172, b * 111);
            g.bezierCurveTo(b * 172, b * 106, b * 174, b * 105, b * 185, b * 109);
            g.bezierCurveTo(b * 190, b * 109, b * 189, b * 114, b * 185, b * 120);
            g.bezierCurveTo(b * 181, b * 125, b * 180, b * 126, b * 176, b * 122);
            g.bezierCurveTo(b * 182, b * 119, b * 187, b * 110, b * 182, b * 112);
            g.closePath();
            $b(g, d[2]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 202, b * 125);
            g.bezierCurveTo(b * 197, b * 117, b * 193, b * 116, b * 193, b * 120);
            g.bezierCurveTo(b * 192.5, b * 124.5, b * 192.5, b * 124.5, b * 192, b * 129);
            g.bezierCurveTo(b * 188, b * 129, b * 187, b * 124, b * 189, b * 120);
            g.bezierCurveTo(b * 191, b * 110, b * 192, b * 110, b * 200, b * 116);
            g.bezierCurveTo(b * 208, b * 120, b * 207, b * 123, b * 202, b * 125);
            g.closePath();
            $b(g, d[2]);
        }
        return f;
    }
    const eu = 5;
    function fu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 118;
        d.height = a * 114;
        e.translate(0, a * 10);
        id(e, a * 42, a * 43, a * 24.758836806279895);
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 90);
        e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
        e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87, a * 45);
        e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
        e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
        e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
        e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
        e.closePath();
        $b(e, c[0]);
        e.translate(0, a * -10);
        id(e, a * 42, a * 43, a * 24.758836806279895);
        $b(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 90);
        e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
        e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
        e.closePath();
        $b(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87, a * 45);
        e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
        e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
        e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
        e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
        e.closePath();
        $b(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 16);
        e.bezierCurveTo(a * 55, a * 19, a * 54, a * 20, a * 55, a * 22);
        e.bezierCurveTo(a * 52, a * 24.5, a * 52, a * 24.5, a * 49, a * 27);
        e.bezierCurveTo(a * 45, a * 25, a * 45, a * 25, a * 41, a * 23);
        e.bezierCurveTo(a * 45, a * 19, a * 48, a * 16, a * 52, a * 16);
        e.closePath();
        $b(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 62, a * 30);
        e.bezierCurveTo(a * 66, a * 29, a * 64, a * 30, a * 66, a * 30);
        e.bezierCurveTo(a * 67, a * 31, a * 67, a * 31, a * 68, a * 32);
        e.bezierCurveTo(a * 66.5, a * 33.5, a * 66.5, a * 33.5, a * 65, a * 35);
        e.bezierCurveTo(a * 63.5, a * 32.5, a * 63.5, a * 32.5, a * 62, a * 30);
        e.closePath();
        $b(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 29, a * 21);
        e.bezierCurveTo(a * 31, a * 22, a * 31, a * 26, a * 29, a * 29);
        e.bezierCurveTo(a * 26, a * 28.5, a * 26, a * 28.5, a * 23, a * 28);
        e.bezierCurveTo(a * 23, a * 26.5, a * 23, a * 26.5, a * 23, a * 25);
        e.bezierCurveTo(a * 25, a * 23, a * 25, a * 23, a * 27, a * 21);
        e.closePath();
        $b(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 18, a * 36);
        e.bezierCurveTo(a * 23, a * 36, a * 24, a * 42, a * 19, a * 46);
        e.bezierCurveTo(a * 12, a * 39, a * 15, a * 38, a * 18, a * 37);
        e.closePath();
        $b(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 34);
        e.bezierCurveTo(a * 35, a * 36, a * 36, a * 39, a * 32, a * 45);
        e.bezierCurveTo(a * 25, a * 46, a * 25, a * 44, a * 30, a * 34);
        e.closePath();
        $b(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59, a * 35);
        e.bezierCurveTo(a * 58, a * 27, a * 57, a * 27, a * 52, a * 31);
        e.bezierCurveTo(a * 50, a * 36, a * 53, a * 38, a * 58, a * 36);
        e.closePath();
        $b(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 63, a * 46);
        e.bezierCurveTo(a * 64.5, a * 46.5, a * 64.5, a * 46.5, a * 66, a * 47);
        e.bezierCurveTo(a * 70, a * 50, a * 70, a * 53, a * 61, a * 55);
        e.bezierCurveTo(a * 62, a * 50.5, a * 62, a * 50.5, a * 63, a * 46);
        e.closePath();
        $b(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 42);
        e.bezierCurveTo(a * 47, a * 41, a * 53, a * 47, a * 46, a * 51);
        e.bezierCurveTo(a * 38, a * 49, a * 39, a * 46, a * 41, a * 43);
        e.closePath();
        $b(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 57);
        e.bezierCurveTo(a * 54, a * 57, a * 54, a * 58, a * 55, a * 61);
        e.bezierCurveTo(a * 54, a * 63, a * 52, a * 64, a * 48, a * 65);
        e.closePath();
        $b(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 52);
        e.bezierCurveTo(a * 25, a * 51, a * 27, a * 50, a * 28, a * 54);
        e.bezierCurveTo(a * 27, a * 58, a * 24, a * 58, a * 22, a * 58);
        e.bezierCurveTo(a * 21, a * 55.5, a * 21, a * 55.5, a * 20, a * 53);
        e.closePath();
        $b(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 61);
        e.bezierCurveTo(a * 37, a * 61, a * 39, a * 63, a * 39, a * 68);
        e.bezierCurveTo(a * 36, a * 68.5, a * 36, a * 68.5, a * 33, a * 69);
        e.bezierCurveTo(a * 30.5, a * 67.5, a * 30.5, a * 67.5, a * 28, a * 66);
        e.closePath();
        $b(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 45);
        e.bezierCurveTo(a * 90, a * 46.5, a * 90, a * 46.5, a * 92, a * 48);
        e.bezierCurveTo(a * 92, a * 50, a * 92, a * 50, a * 92, a * 52);
        e.closePath();
        $b(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96, a * 53);
        e.bezierCurveTo(a * 97.5, a * 55, a * 97.5, a * 55, a * 99, a * 57);
        e.bezierCurveTo(a * 97.5, a * 59.5, a * 97.5, a * 59.5, a * 96, a * 62);
        e.bezierCurveTo(a * 93.5, a * 60.5, a * 93.5, a * 60.5, a * 91, a * 59);
        e.bezierCurveTo(a * 91.5, a * 57, a * 91.5, a * 57, a * 92, a * 55);
        e.closePath();
        $b(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 92, a * 71);
        e.bezierCurveTo(a * 94.5, a * 70.5, a * 94.5, a * 70.5, a * 97, a * 70);
        e.bezierCurveTo(a * 98.5, a * 72.5, a * 98.5, a * 72.5, a * 100, a * 75);
        e.bezierCurveTo(a * 97, a * 76.5, a * 97, a * 76.5, a * 94, a * 78);
        e.closePath();
        $b(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 95, a * 82);
        e.bezierCurveTo(a * 96, a * 83, a * 96, a * 83, a * 97, a * 84);
        e.bezierCurveTo(a * 97, a * 85.5, a * 97, a * 85.5, a * 97, a * 87);
        e.bezierCurveTo(a * 93.5, a * 87.5, a * 93.5, a * 87.5, a * 90, a * 88);
        e.closePath();
        $b(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 72);
        e.bezierCurveTo(a * 89, a * 76, a * 88, a * 81, a * 85, a * 82);
        e.bezierCurveTo(a * 80, a * 80, a * 82, a * 78, a * 85, a * 72);
        e.closePath();
        $b(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 86);
        e.bezierCurveTo(a * 84, a * 88, a * 86, a * 88, a * 85, a * 93);
        e.bezierCurveTo(a * 80, a * 96, a * 79, a * 96, a * 76, a * 91);
        e.closePath();
        $b(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84, a * 46);
        e.bezierCurveTo(a * 93, a * 51, a * 91, a * 62, a * 80, a * 78);
        e.bezierCurveTo(a * 74, a * 86, a * 66, a * 90, a * 60, a * 86);
        e.bezierCurveTo(a * 55, a * 79, a * 57, a * 73, a * 67, a * 57);
        e.bezierCurveTo(a * 71, a * 51, a * 79, a * 44, a * 84, a * 46);
        e.closePath();
        $b(e, c[5], c[6], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 76, a * 60);
        e.bezierCurveTo(a * 80, a * 66, a * 75, a * 74, a * 68, a * 74);
        e.bezierCurveTo(a * 60, a * 64, a * 68, a * 59, a * 76, a * 59);
        e.closePath();
        $b(e, c[7], c[8], a * 5);
        return d;
    }
    function gu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 131;
        d.height = a * 121;
        e.translate(0, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 59);
        e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
        e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
        e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
        e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
        e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
        e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 59);
        e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
        e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
        e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
        e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
        e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
        e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
        e.closePath();
        $b(e, c[1], c[2], a * 10);
        return d;
    }
    function hu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 350;
        d.height = a * 140;
        e.translate(a * -50, a * -150);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 184.5, a * 222.0625);
        e.bezierCurveTo(a * 185.5, a * 184.0625, a * 302.5, a * 171.0625, a * 313.5, a * 222.0625);
        e.bezierCurveTo(a * 330.5, a * 263.0625, a * 181.5, a * 274.0625, a * 184.5, a * 223.0625);
        e.closePath();
        $b(e, c[0], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131.5, a * 241.0625);
        e.bezierCurveTo(a * 144.5, a * 278.0625, a * 270.5, a * 209.0625, a * 228.5, a * 174.0625);
        e.bezierCurveTo(a * 196.5, a * 147.0625, a * 117.5, a * 196.0625, a * 131.5, a * 240.0625);
        e.closePath();
        $b(e, c[0], c[1], a * 8);
        id(e, a * 270.5, a * 225.0625, a * 15.811388300841896);
        $b(e, c[2]);
        id(e, a * 243.5, a * 225.0625, a * 6.082762530298219);
        $b(e, c[2]);
        id(e, a * 255.5, a * 210.0625, a * 10.816653826391969);
        $b(e, c[2]);
        id(e, a * 167.5, a * 215.0625, a * 15.297058540778355);
        $b(e, c[2]);
        id(e, a * 176.5, a * 204.0625, a * 7.280109889280518);
        $b(e, c[2]);
        id(e, a * 206.5, a * 189.0625, a * 7.280109889280518);
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 151.5, a * 212.0625);
        e.bezierCurveTo(a * 161.5, a * 204.0625, a * 173.5, a * 214.0625, a * 158.5, a * 221.0625);
        e.bezierCurveTo(a * 145.5, a * 228.0625, a * 144.5, a * 216.0625, a * 151.5, a * 212.0625);
        e.closePath();
        $b(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 194.5, a * 209.0625);
        e.bezierCurveTo(a * 205.5, a * 202.0625, a * 215.5, a * 207.0625, a * 199.5, a * 217.0625);
        e.bezierCurveTo(a * 187.5, a * 224.0625, a * 182.5, a * 217.0625, a * 194.5, a * 209.0625);
        e.closePath();
        $b(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 188.5, a * 183.0625);
        e.bezierCurveTo(a * 201.5, a * 176.0625, a * 213.5, a * 187.0625, a * 193.5, a * 193.0625);
        e.bezierCurveTo(a * 185.5, a * 194.0625, a * 175.5, a * 189.0625, a * 188.5, a * 183.0625);
        e.closePath();
        $b(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 261.5, a * 202.0625);
        e.bezierCurveTo(a * 274.5, a * 201.0625, a * 282.5, a * 214.0625, a * 261.5, a * 215.0625);
        e.bezierCurveTo(a * 246.5, a * 214.0625, a * 248.5, a * 203.0625, a * 261.5, a * 202.0625);
        e.closePath();
        $b(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 240.5, a * 231.0625);
        e.bezierCurveTo(a * 255.5, a * 231.0625, a * 254.5, a * 243.0625, a * 240.5, a * 242.0625);
        e.bezierCurveTo(a * 225.5, a * 239.0625, a * 225.5, a * 232.0625, a * 240.5, a * 231.0625);
        e.closePath();
        $b(e, c[3], c[4], a * 4);
        return d;
    }
    function iu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
        e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
        e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
        e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
        e.closePath();
        $b(e, c[0]);
        e.save();
        e.translate(a * 129.5, a * 424);
        e.rotate(0.16);
        Zb(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
        e.restore();
        $b(e, c[0]);
        id(e, a * 121, a * 480, a * 20.396078054371138);
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 311);
        e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
        e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
        e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
        e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
        e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
        e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
        e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
        e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
        e.closePath();
        $b(e, c[1], c[2], a * 12.5);
        e.save();
        e.translate(a * 129.5, a * 424);
        e.rotate(0.16);
        Zb(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
        e.restore();
        $b(e, c[4], c[5], a * 12.5);
        id(e, a * 121, a * 480, a * 20.396078054371138);
        $b(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 311);
        e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
        e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
        e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
        e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
        e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
        e.closePath();
        $b(e, c[1], c[2], a * 12.5);
        return d;
    }
    function ju(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 154;
        d.height = a * 261;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125, a * 69);
        e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
        e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
        e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
        e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
        e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
        e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
        e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
        e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
        e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125, a * 69);
        e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
        e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
        e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
        e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
        e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
        e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
        e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
        e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
        e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
        e.closePath();
        $b(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 43);
        e.bezierCurveTo(a * 31, a * 61, a * 43, a * 70, a * 51, a * 75);
        e.bezierCurveTo(a * 48, a * 84, a * 41, a * 89, a * 33, a * 86);
        e.bezierCurveTo(a * 23, a * 88, a * 20, a * 76, a * 23, a * 62);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 45, a * 29);
        e.bezierCurveTo(a * 49, a * 45, a * 61, a * 54, a * 64, a * 55);
        e.bezierCurveTo(a * 67.5, a * 53, a * 67.5, a * 53, a * 71, a * 51);
        e.bezierCurveTo(a * 80, a * 44, a * 83, a * 33, a * 82, a * 20);
        e.bezierCurveTo(a * 59, a * 17, a * 51, a * 23, a * 45, a * 30);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 56);
        e.bezierCurveTo(a * 90, a * 33, a * 103, a * 25, a * 105, a * 27);
        e.bezierCurveTo(a * 116, a * 31, a * 121, a * 45, a * 122, a * 50);
        e.bezierCurveTo(a * 112, a * 62, a * 103, a * 63, a * 91, a * 62);
        e.bezierCurveTo(a * 89, a * 59.5, a * 89, a * 59.5, a * 87, a * 57);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 81);
        e.bezierCurveTo(a * 109, a * 82, a * 123, a * 70, a * 124, a * 63);
        e.bezierCurveTo(a * 124, a * 75.5, a * 124, a * 75.5, a * 124, a * 88);
        e.bezierCurveTo(a * 119, a * 99, a * 103, a * 103, a * 94, a * 103);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 124);
        e.bezierCurveTo(a * 108, a * 125, a * 122, a * 113, a * 124, a * 106);
        e.bezierCurveTo(a * 124, a * 119, a * 124, a * 129, a * 124, a * 132);
        e.bezierCurveTo(a * 110, a * 147, a * 94, a * 148, a * 90, a * 147);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 170);
        e.bezierCurveTo(a * 104, a * 166, a * 122, a * 158, a * 122, a * 151);
        e.bezierCurveTo(a * 122, a * 162.5, a * 122, a * 162.5, a * 122, a * 174);
        e.bezierCurveTo(a * 111, a * 191, a * 97, a * 191, a * 89, a * 191);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 208);
        e.bezierCurveTo(a * 100, a * 209, a * 115, a * 205, a * 122, a * 193);
        e.bezierCurveTo(a * 122, a * 205.5, a * 122, a * 205.5, a * 122, a * 218);
        e.bezierCurveTo(a * 115, a * 229, a * 103, a * 235, a * 90, a * 228);
        e.bezierCurveTo(a * 88, a * 224, a * 88, a * 217, a * 88, a * 211);
        e.closePath();
        $b(e, c[3]);
        e.globalAlpha = 0.4;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22, a * 81);
        e.bezierCurveTo(a * 32, a * 84, a * 41, a * 81, a * 45, a * 68);
        e.bezierCurveTo(a * 50, a * 50, a * 62, a * 40, a * 79, a * 43);
        e.bezierCurveTo(a * 95, a * 45, a * 102, a * 58, a * 101, a * 81);
        e.bezierCurveTo(a * 99.5, a * 120.5, a * 99.5, a * 120.5, a * 98, a * 160);
        e.bezierCurveTo(a * 96.5, a * 191.5, a * 96.5, a * 191.5, a * 95, a * 223);
        e.bezierCurveTo(a * 93, a * 232, a * 101, a * 235, a * 108, a * 238);
        e.bezierCurveTo(a * 100, a * 240, a * 90, a * 233, a * 90, a * 224);
        e.bezierCurveTo(a * 92, a * 157, a * 92, a * 157, a * 94, a * 90);
        e.bezierCurveTo(a * 94, a * 56, a * 89, a * 53, a * 77, a * 51);
        e.bezierCurveTo(a * 58, a * 50, a * 54, a * 59, a * 49, a * 75);
        e.bezierCurveTo(a * 44, a * 91, a * 28, a * 90, a * 23, a * 81);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 123);
        e.bezierCurveTo(a * 88, a * 130, a * 88, a * 127, a * 94, a * 128);
        e.bezierCurveTo(a * 91, a * 136, a * 94, a * 137, a * 99, a * 142);
        e.bezierCurveTo(a * 97, a * 149, a * 99, a * 152, a * 105, a * 155);
        e.bezierCurveTo(a * 107, a * 159, a * 113, a * 159, a * 120, a * 158);
        e.bezierCurveTo(a * 121, a * 160, a * 125, a * 163, a * 132, a * 163);
        e.bezierCurveTo(a * 133, a * 166, a * 136, a * 169, a * 138, a * 170);
        e.bezierCurveTo(a * 133, a * 171, a * 132, a * 172, a * 129, a * 174);
        e.bezierCurveTo(a * 122, a * 170, a * 120, a * 170, a * 116, a * 174);
        e.bezierCurveTo(a * 108, a * 170.5, a * 108, a * 170.5, a * 100, a * 167);
        e.bezierCurveTo(a * 95, a * 172, a * 94, a * 179, a * 95, a * 184);
        e.bezierCurveTo(a * 87, a * 185, a * 87, a * 189, a * 88, a * 194);
        e.bezierCurveTo(a * 82, a * 194, a * 81, a * 195, a * 79, a * 197);
        e.bezierCurveTo(a * 78, a * 192, a * 78, a * 191, a * 77, a * 189);
        e.bezierCurveTo(a * 81, a * 185, a * 82, a * 183, a * 80, a * 176);
        e.bezierCurveTo(a * 89, a * 170, a * 92, a * 168, a * 95, a * 163);
        e.bezierCurveTo(a * 91, a * 151, a * 88, a * 151, a * 82, a * 147);
        e.bezierCurveTo(a * 85, a * 142, a * 85, a * 137, a * 81, a * 133);
        e.bezierCurveTo(a * 84, a * 127, a * 84, a * 125, a * 82, a * 124);
        e.closePath();
        $b(e, c[4], c[5], a * 4);
        id(e, a * 107, a * 152, a * 9);
        $b(e, c[6]);
        id(e, a * 105, a * 173, a * 9);
        $b(e, c[6]);
        id(e, a * 87, a * 161, a * 9);
        $b(e, c[6]);
        id(e, a * 106, a * 147, a * 4);
        $b(e, c[7]);
        id(e, a * 104, a * 167, a * 4);
        $b(e, c[7]);
        id(e, a * 86, a * 154, a * 4);
        $b(e, c[7]);
        return d;
    }
    function ku(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 112, a * 356);
        e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
        e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
        e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
        e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
        e.closePath();
        $b(e, c[0]);
        e.save();
        e.translate(a * 131, a * 423);
        e.rotate(0.16);
        Zb(e, a * -14, a * -53, a * 28, a * 106, a * 10);
        e.restore();
        $b(e, c[0]);
        e.save();
        e.translate(a * 122, a * 480);
        e.rotate(1.72);
        nd(e, 4, a * 26.476404589747453, a * 10);
        e.restore();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 210, a * 387);
        e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
        e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
        e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
        e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
        e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
        e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 129, a * 338);
        e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
        e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
        e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
        e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
        e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 112, a * 356);
        e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
        e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
        e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
        e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
        e.closePath();
        $b(e, c[1], c[2], a * 12.5);
        e.save();
        e.translate(a * 131, a * 423);
        e.rotate(0.16);
        Zb(e, a * -14, a * -53, a * 28, a * 106, a * 10);
        e.restore();
        $b(e, c[4], c[5], a * 12.5);
        e.save();
        e.translate(a * 122, a * 480);
        e.rotate(1.72);
        nd(e, 4, a * 26.476404589747453, a * 10);
        e.restore();
        $b(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 210, a * 387);
        e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
        e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
        e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
        e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
        e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
        e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
        e.closePath();
        $b(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 129, a * 338);
        e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
        e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
        e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
        e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
        e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
        e.closePath();
        $b(e, c[3]);
        return d;
    }
    function lu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 217;
        d.height = a * 215;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 113);
        e.bezierCurveTo(a * 135, a * 98, a * 136, a * 96, a * 142, a * 97);
        e.bezierCurveTo(a * 167, a * 106, a * 167, a * 106, a * 171, a * 109);
        e.bezierCurveTo(a * 173, a * 120, a * 173, a * 134, a * 169, a * 141);
        e.bezierCurveTo(a * 140, a * 149.5, a * 140, a * 149.5, a * 111, a * 158);
        e.closePath();
        $b(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154, a * 103);
        e.bezierCurveTo(a * 167, a * 91, a * 175, a * 87, a * 176, a * 94);
        e.bezierCurveTo(a * 175, a * 102, a * 176, a * 102, a * 186, a * 103);
        e.bezierCurveTo(a * 191, a * 104, a * 192, a * 105, a * 185, a * 116);
        e.bezierCurveTo(a * 183, a * 120, a * 191, a * 124, a * 189, a * 129);
        e.bezierCurveTo(a * 185, a * 139, a * 178, a * 134, a * 166, a * 131);
        e.closePath();
        $b(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60, a * 46);
        e.bezierCurveTo(a * 60, a * 34, a * 60, a * 29, a * 56, a * 19);
        e.bezierCurveTo(a * 52, a * 12, a * 52, a * 16, a * 49, a * 24);
        e.bezierCurveTo(a * 48, a * 27, a * 46, a * 28, a * 39, a * 27);
        e.bezierCurveTo(a * 33, a * 26, a * 34, a * 31, a * 35, a * 37);
        e.bezierCurveTo(a * 36, a * 41, a * 27, a * 46, a * 29, a * 52);
        e.bezierCurveTo(a * 36, a * 55, a * 35, a * 56, a * 31, a * 59);
        e.bezierCurveTo(a * 27, a * 65, a * 32, a * 64, a * 35, a * 62);
        e.closePath();
        $b(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46, a * 50);
        e.bezierCurveTo(a * 51, a * 35, a * 70, a * 32, a * 78, a * 29);
        e.bezierCurveTo(a * 84, a * 27, a * 113, a * 36, a * 127, a * 41);
        e.bezierCurveTo(a * 140, a * 47, a * 147, a * 69, a * 137, a * 73);
        e.bezierCurveTo(a * 124, a * 92, a * 117, a * 92, a * 109, a * 94);
        e.bezierCurveTo(a * 101, a * 96, a * 89, a * 92, a * 65, a * 83);
        e.bezierCurveTo(a * 54, a * 80, a * 46, a * 58, a * 46, a * 51);
        e.closePath();
        $b(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 40);
        e.bezierCurveTo(a * 49, a * 34, a * 49, a * 34, a * 47, a * 28);
        e.bezierCurveTo(a * 38, a * 28, a * 34, a * 27, a * 37, a * 37);
        e.bezierCurveTo(a * 43, a * 40.5, a * 43, a * 40.5, a * 49, a * 44);
        e.closePath();
        $b(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 29, a * 48);
        e.bezierCurveTo(a * 38, a * 49, a * 38, a * 49, a * 47, a * 50);
        e.bezierCurveTo(a * 46.5, a * 51.5, a * 46.5, a * 51.5, a * 46, a * 53);
        e.bezierCurveTo(a * 40, a * 53.5, a * 40, a * 53.5, a * 34, a * 54);
        e.bezierCurveTo(a * 29, a * 51, a * 32, a * 51.5, a * 30, a * 49);
        e.closePath();
        $b(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 89, a * 61);
        e.bezierCurveTo(a * 101, a * 70, a * 109, a * 90, a * 102, a * 90);
        e.bezierCurveTo(a * 97, a * 91, a * 87, a * 91, a * 60, a * 80);
        e.bezierCurveTo(a * 48, a * 65, a * 46, a * 56, a * 48, a * 53);
        e.bezierCurveTo(a * 50, a * 52, a * 66, a * 56, a * 89, a * 61);
        e.closePath();
        $b(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 99, a * 59);
        e.bezierCurveTo(a * 115, a * 45, a * 125, a * 42, a * 129, a * 47);
        e.bezierCurveTo(a * 138, a * 56, a * 140, a * 63, a * 138, a * 67);
        e.bezierCurveTo(a * 131, a * 80, a * 122, a * 87, a * 114, a * 90);
        e.bezierCurveTo(a * 105, a * 80, a * 95, a * 62, a * 98, a * 61);
        e.closePath();
        $b(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 62);
        e.bezierCurveTo(a * 139, a * 45, a * 153, a * 40, a * 150, a * 48);
        e.bezierCurveTo(a * 145, a * 57, a * 157, a * 63, a * 157, a * 70);
        e.bezierCurveTo(a * 157, a * 74, a * 142, a * 77, a * 142, a * 85);
        e.bezierCurveTo(a * 143, a * 91, a * 141, a * 92, a * 135, a * 90);
        e.bezierCurveTo(a * 132, a * 90, a * 132, a * 96, a * 124, a * 99);
        e.bezierCurveTo(a * 118, a * 93, a * 116, a * 77, a * 116, a * 64);
        e.closePath();
        $b(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 130);
        e.bezierCurveTo(a * 157, a * 115, a * 165, a * 111, a * 167, a * 115);
        e.bezierCurveTo(a * 170, a * 117, a * 171, a * 135, a * 167, a * 141);
        e.bezierCurveTo(a * 135.5, a * 149.5, a * 135.5, a * 149.5, a * 104, a * 158);
        e.closePath();
        $b(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 119);
        e.bezierCurveTo(a * 46, a * 120, a * 40, a * 118, a * 34, a * 116);
        e.bezierCurveTo(a * 28, a * 111, a * 41, a * 112, a * 39, a * 108);
        e.bezierCurveTo(a * 36, a * 100, a * 49, a * 102, a * 53, a * 95);
        e.bezierCurveTo(a * 57, a * 84, a * 58, a * 85, a * 63, a * 93);
        e.bezierCurveTo(a * 68, a * 96, a * 72, a * 94, a * 80, a * 88);
        e.bezierCurveTo(a * 80, a * 96, a * 78, a * 107, a * 66, a * 115);
        e.closePath();
        $b(e, c[9], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 64);
        e.bezierCurveTo(a * 133.5, a * 57, a * 133.5, a * 57, a * 149, a * 50);
        e.bezierCurveTo(a * 145, a * 54, a * 154, a * 65, a * 157, a * 68);
        e.bezierCurveTo(a * 138.5, a * 66.5, a * 138.5, a * 66.5, a * 120, a * 65);
        e.closePath();
        $b(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 65);
        e.bezierCurveTo(a * 129, a * 77, a * 129, a * 77, a * 140, a * 89);
        e.bezierCurveTo(a * 131, a * 89, a * 130, a * 92, a * 128, a * 96);
        e.bezierCurveTo(a * 123.5, a * 82, a * 123.5, a * 82, a * 119, a * 68);
        e.closePath();
        $b(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 112);
        e.bezierCurveTo(a * 63, a * 108, a * 78, a * 111, a * 88, a * 112);
        e.bezierCurveTo(a * 98, a * 122, a * 117, a * 136, a * 125, a * 157);
        e.bezierCurveTo(a * 123, a * 180, a * 123, a * 185, a * 118, a * 186);
        e.bezierCurveTo(a * 101, a * 190, a * 89, a * 191, a * 79, a * 187);
        e.bezierCurveTo(a * 53, a * 165, a * 50, a * 153, a * 47, a * 144);
        e.bezierCurveTo(a * 46, a * 128, a * 46, a * 124, a * 50, a * 112);
        e.closePath();
        $b(e, c[9], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 50, a * 114);
        e.bezierCurveTo(a * 81, a * 149, a * 80, a * 147, a * 80, a * 149);
        e.bezierCurveTo(a * 82, a * 155, a * 80, a * 182, a * 74, a * 182);
        e.bezierCurveTo(a * 60, a * 172, a * 52, a * 157, a * 47, a * 144);
        e.closePath();
        $b(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 85, a * 152);
        e.bezierCurveTo(a * 99, a * 150, a * 109, a * 152, a * 119, a * 156);
        e.bezierCurveTo(a * 122, a * 163, a * 122, a * 174, a * 117, a * 182);
        e.closePath();
        e.bezierCurveTo(a * 93, a * 188, a * 82, a * 187, a * 83, a * 179);
        $b(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104, a * 166);
        e.bezierCurveTo(a * 133, a * 165, a * 142, a * 168, a * 137, a * 173);
        e.bezierCurveTo(a * 127, a * 177, a * 137, a * 195, a * 126, a * 196);
        e.bezierCurveTo(a * 112, a * 195, a * 112, a * 194, a * 109, a * 199);
        e.bezierCurveTo(a * 105, a * 205, a * 102, a * 195, a * 96, a * 197);
        e.bezierCurveTo(a * 84, a * 201, a * 88, a * 198, a * 90, a * 187);
        e.bezierCurveTo(a * 96, a * 171, a * 97, a * 170, a * 103, a * 167);
        e.closePath();
        $b(e, c[9], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 168);
        e.bezierCurveTo(a * 118, a * 172.5, a * 118, a * 172.5, a * 131, a * 177);
        e.bezierCurveTo(a * 133, a * 190, a * 132, a * 199, a * 116, a * 194);
        e.bezierCurveTo(a * 110, a * 182, a * 110, a * 182, a * 104, a * 170);
        e.closePath();
        $b(e, c[10]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 169);
        e.bezierCurveTo(a * 100.5, a * 182, a * 100.5, a * 182, a * 99, a * 195);
        e.bezierCurveTo(a * 93.5, a * 196.5, a * 93.5, a * 196.5, a * 88, a * 198);
        e.bezierCurveTo(a * 94, a * 176, a * 96, a * 174, a * 101, a * 168);
        e.closePath();
        $b(e, c[9], c[9], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 107);
        e.bezierCurveTo(a * 64, a * 101, a * 64, a * 101, a * 64, a * 95);
        e.bezierCurveTo(a * 57, a * 86, a * 57, a * 84, a * 53, a * 97);
        e.bezierCurveTo(a * 55, a * 103.5, a * 55, a * 103.5, a * 57, a * 110);
        e.closePath();
        $b(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 40, a * 108);
        e.bezierCurveTo(a * 46.5, a * 111, a * 46.5, a * 111, a * 53, a * 114);
        e.bezierCurveTo(a * 50.5, a * 117, a * 50.5, a * 117, a * 48, a * 120);
        e.bezierCurveTo(a * 40.5, a * 117.5, a * 40.5, a * 117.5, a * 33, a * 115);
        e.bezierCurveTo(a * 36, a * 112, a * 36, a * 112, a * 39, a * 109);
        e.closePath();
        $b(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 189, a * 106);
        e.bezierCurveTo(a * 178.5, a * 110.5, a * 178.5, a * 110.5, a * 168, a * 115);
        e.bezierCurveTo(a * 168.5, a * 119, a * 168.5, a * 119, a * 169, a * 123);
        e.bezierCurveTo(a * 179, a * 124.5, a * 179, a * 124.5, a * 189, a * 126);
        e.bezierCurveTo(a * 182, a * 118, a * 183, a * 115, a * 188, a * 106);
        e.closePath();
        $b(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 69, a * 178);
        e.bezierCurveTo(a * 69, a * 141, a * 70, a * 136, a * 77, a * 137);
        e.bezierCurveTo(a * 88, a * 133, a * 101, a * 134, a * 108, a * 137);
        $b(e, Mq, c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 161);
        e.bezierCurveTo(a * 54, a * 124, a * 55, a * 119, a * 62, a * 119);
        e.bezierCurveTo(a * 74, a * 117, a * 85, a * 117, a * 93, a * 119);
        $b(e, undefined, c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 91, a * 29);
        e.bezierCurveTo(a * 74, a * 33, a * 62, a * 46, a * 57, a * 54);
        e.bezierCurveTo(a * 57, a * 63, a * 68, a * 76, a * 77, a * 87);
        $b(e, Lk, c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107, a * 33);
        e.bezierCurveTo(a * 82, a * 51, a * 80, a * 52, a * 79, a * 59);
        e.bezierCurveTo(a * 78, a * 65, a * 93, a * 86, a * 101, a * 93);
        $b(e, undefined, c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 98);
        e.bezierCurveTo(a * 126.5, a * 103, a * 126.5, a * 103, a * 123, a * 108);
        e.bezierCurveTo(a * 133.5, a * 107, a * 133.5, a * 107, a * 144, a * 106);
        e.bezierCurveTo(a * 138.5, a * 110, a * 138.5, a * 110, a * 133, a * 114);
        e.bezierCurveTo(a * 142, a * 114, a * 142, a * 114, a * 151, a * 114);
        e.bezierCurveTo(a * 146.5, a * 119.5, a * 146.5, a * 119.5, a * 142, a * 125);
        e.bezierCurveTo(a * 146.5, a * 127, a * 146.5, a * 127, a * 151, a * 129);
        e.bezierCurveTo(a * 147.5, a * 132, a * 147.5, a * 132, a * 144, a * 135);
        e.bezierCurveTo(a * 148, a * 137, a * 148, a * 137, a * 152, a * 139);
        e.bezierCurveTo(a * 149, a * 142.5, a * 149, a * 142.5, a * 146, a * 146);
        $b(e, undefined, c[3], a * 4);
        return d;
    }
    function mu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 321;
        d.height = a * 284;
        e.translate(a * 100, a * 30);
        e.translate(a * 5, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        $b(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167, a * 120);
        e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
        e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
        e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25, a * 64);
        e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
        e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
        e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
        e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
        e.closePath();
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 141);
        e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
        e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
        e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
        e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
        e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
        e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
        $b(e, undefined, c[4], a * 4);
        e.translate(a * -100, a * -30);
        e.translate(a * 10, a * 70);
        e.translate(a * 5, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        $b(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167, a * 120);
        e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
        e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
        e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25, a * 64);
        e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
        e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
        e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
        e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
        e.closePath();
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 141);
        e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
        e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
        e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
        e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
        e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
        e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
        $b(e, Vq, c[4], a * 4);
        e.translate(a * 20, a * -80);
        e.translate(a * 5, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        $b(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167, a * 120);
        e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
        e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
        e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25, a * 64);
        e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
        e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
        e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
        e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
        e.closePath();
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 141);
        e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
        e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
        e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
        e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
        e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
        e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
        $b(e, undefined, c[4], a * 4);
        return d;
    }
    function nu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.translate(a * -20, a * -20);
        e.save();
        e.translate(a * 132, a * 423);
        e.rotate(0.16);
        Zb(e, a * -14, a * -61, a * 28, a * 122, a * 10);
        e.restore();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 344);
        e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
        e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
        e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
        e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
        e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 328);
        e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
        e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
        e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
        e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
        e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
        e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
        e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 121, a * 332);
        e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
        e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
        e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
        e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
        e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 463);
        e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
        e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
        e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
        e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.save();
        e.translate(a * 132, a * 423);
        e.rotate(0.16);
        Zb(e, a * -14, a * -61, a * 28, a * 122, a * 10);
        e.restore();
        $b(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 344);
        e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
        e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
        e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
        e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
        e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
        e.closePath();
        $b(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 328);
        e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
        e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
        e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
        e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
        e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
        e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
        e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
        e.closePath();
        $b(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 121, a * 332);
        e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
        e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
        e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
        e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
        e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 463);
        e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
        e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
        e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
        e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
        e.closePath();
        $b(e, c[1], c[2], a * 12.5);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143, a * 346);
        e.bezierCurveTo(a * 125, a * 352, a * 125, a * 352, a * 107, a * 358);
        e.bezierCurveTo(a * 124, a * 363, a * 140, a * 368, a * 141, a * 368);
        e.bezierCurveTo(a * 156.5, a * 367, a * 156.5, a * 367, a * 172, a * 366);
        e.closePath();
        $b(e, c[3]);
        return d;
    }
    function ou(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 104;
        d.height = a * 112;
        e.translate(0, a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 16, a * 44);
        e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
        e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
        e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
        e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
        e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
        e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 16, a * 44);
        e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
        e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
        e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
        e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
        e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
        e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
        e.closePath();
        $b(e, c[1], c[2], a * 8);
        return d;
    }
    const pu = 1;
    function qu(f, e, g, i, j, k, n, o, p, h, l = 0) {
        var q = document.createElement("canvas");
        var b = q.getContext("2d");
        k = k ? f * k : 0;
        var d = Math.floor(f * g);
        b.font = d + "px Baloo Paaji";
        b.lineJoin = "round";
        o *= f;
        var r = n ? o * 2 : 0;
        if (p) {
            var c = Math.min(b.measureText(e).width + f * 2 + r, p);
        } else {
            c = b.measureText(e).width + f * 2 + r + f * l * 2;
        }
        d = (d + k + l) * f + r;
        q.width = c;
        q.height = d;
        if (n) {
            b.fillStyle = n;
            Zb(b, 0, 0, c, d, o * 2);
            b.fill();
            b.translate(o, o);
        }
        b.textBaseline = "middle";
        b.font = g + "px Baloo Paaji";
        b.lineJoin = "round";
        if (j) {
            b.beginPath();
            b.fillStyle = j;
            b.fillText(e, 0, d / 2 + k - r / 2, c);
        }
        b.beginPath();
        if (h) {
            b.strokeStyle = h;
            b.lineWidth = l;
            b.strokeText(e, l, (d - r) / 2, c);
        }
        b.fillStyle = i;
        b.fillText(e, l, (d - r) / 2, c);
        return q;
    }
    function ru(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 70;
        var a = b * 90;
        var i = b * 4;
        var j = b * 5;
        e.width = g;
        e.height = a;
        f.save();
        f.translate(b * -80, b * -70 + j);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        $b(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * -80, b * -70 + j);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
        f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
        f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
        f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
        f.closePath();
        $b(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * -80, b * -70 + j);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
        f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
        f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
        f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
        f.closePath();
        $b(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * 3, b * -93 + j);
        f.rotate(Math.PI / 5);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        $b(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * -80, b * -70);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        $b(f, d[0], d[1], i);
        f.restore();
        f.save();
        f.translate(b * -80, b * -70);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
        f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
        f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
        f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
        f.closePath();
        $b(f, d[0], d[1], i);
        f.restore();
        f.save();
        f.translate(b * -80, b * -70);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
        f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
        f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
        f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
        f.closePath();
        $b(f, d[0], d[1], i);
        f.restore();
        f.save();
        f.translate(b * 3, b * -93);
        f.rotate(Math.PI / 5);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        $b(f, d[0], d[1], i);
        f.restore();
        return e;
    }
    function su(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 220;
        var a = b * 230;
        var i = b * 100;
        var j = i / 4;
        var h = b * 20;
        e.width = g;
        e.height = a;
        f.translate(g / 2, a / 2 + h);
        f.globalAlpha = 0.5;
        nd(f, 7, i, j);
        $b(f, d[0]);
        f.globalAlpha = 1;
        f.translate(0, -h);
        nd(f, 7, i, j);
        $b(f, d[1]);
        nd(f, 6, i * 0.65, j * 0.65);
        $b(f, d[2]);
        return e;
    }
    function tu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 120;
        var a = b * 150;
        var i = b * 60;
        var j = i / 4;
        var h = b * 15;
        e.width = g;
        e.height = a;
        f.save();
        f.translate(g / 2 + b * 0, a / 2 + b * 0 + h);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 0.5;
        nd(f, 8, i, j);
        $b(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 11, a / 2 + b * 12);
        f.globalAlpha = 1;
        f.rotate(Math.PI / 3);
        f.translate(0, -h);
        nd(f, 8, i, j);
        $b(f, d[1]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 9, a / 2 - b * 12);
        f.rotate(Math.PI / 2.8);
        nd(f, 5, i * 0.5, j * 0.4);
        $b(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 19, a / 2 + b * 5);
        f.rotate(Math.PI / 1);
        nd(f, 5, i * 0.5, j * 0.4);
        $b(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 8, a / 2 + b * 20);
        f.rotate(Math.PI / 2.25);
        nd(f, 5, i * 0.5, j * 0.4);
        $b(f, d[2]);
        f.restore();
        return e;
    }
    function uu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 180;
        var a = b * 210;
        var i = (h = b * 60) / 4;
        var j = b * 20;
        e.width = g;
        e.height = a;
        f.save();
        f.translate(g / 2 - b * 0, a / 2 - b * 35 + j);
        f.rotate(Math.PI / -1.8);
        f.globalAlpha = 0.5;
        f.translate(b * 0, b * -20);
        nd(f, 5, h, i);
        $b(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 10, a / 2 + b * 15 + j);
        f.rotate(Math.PI / 2);
        f.globalAlpha = 0.5;
        f.translate(b * 0, b * -20);
        nd(f, 5, h, i);
        $b(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 50, a / 2 + b * 40 + j);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 0.5;
        f.translate(0, b * -20);
        nd(f, 5, h, i);
        $b(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 0, a / 2 - b * 35);
        f.rotate(Math.PI / -1.8);
        f.globalAlpha = 1;
        f.translate(b * 0, b * -20);
        nd(f, 5, h, i);
        $b(f, d[1]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 10, a / 2 + b * 15);
        f.rotate(Math.PI / 2);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        nd(f, 5, h, i);
        $b(f, d[1]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 50, a / 2 + b * 40);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        nd(f, 5, h, i);
        $b(f, d[1]);
        f.restore();
        var h;
        i = (h = b * 30) / 4;
        f.save();
        f.translate(g / 2 + b * 5, a / 2 - b * 20);
        f.rotate(Math.PI / -1.8);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        nd(f, 5, h, i);
        $b(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 0, a / 2 + b * 10);
        f.rotate(Math.PI / 2);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        nd(f, 5, h, i);
        $b(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 45, a / 2 + b * 35);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        nd(f, 5, h, i);
        $b(f, d[2]);
        f.restore();
        id(f, g / 2 - b * 7, a / 2 + b * 7, 5);
        $b(f, d[2]);
        return e;
    }
    function vu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 140;
        var a = b * 150;
        var i = b * 10;
        var j = b * 4;
        e.width = g;
        e.height = a;
        f.translate(b * -50, b * -38 + i);
        f.globalAlpha = c ? 0.5 : 1;
        f.beginPath();
        f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
        f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
        f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
        f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
        f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
        f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
        f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
        f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
        f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
        f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
        f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
        f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
        f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
        f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
        f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
        f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
        f.closePath();
        $b(f, d[0]);
        f.translate(0, 0 - i);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
        f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
        f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
        f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
        f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
        f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
        f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
        f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
        f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
        f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
        f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
        f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
        f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
        f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
        f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
        f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
        f.closePath();
        $b(f, d[1], d[2], j);
        return e;
    }
    function wu(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        var a = b * 220;
        var i = b * 220;
        var j = b * 100;
        var h = j / 4;
        f.width = a;
        f.height = i;
        g.translate(a / 2, i / 2);
        g.globalAlpha = c ? 0.5 : 1;
        if (!c) {
            g.translate(b * 0, b * -8);
        }
        nd(g, 7, j, h);
        $b(g, c ? d[0] : d[1]);
        g.globalAlpha = 1;
        if (e == 0) {
            nd(g, 6, j * 0.65, h * 0.65);
            $b(g, d[2]);
        } else if (e == 1) {
            g.translate(b * 20, b * 20);
            nd(g, 6, j * 0.45, h * 0.4);
            $b(g, d[2]);
        }
        return f;
    }
    const xu = 5;
    function yu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * c * 2;
        var a = b * c * 2;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        f.translate(i, j);
        id(f, 0, 0, b * c);
        $b(f, d);
        return e;
    }
    function zu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 234;
        c.height = a * 183;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 25);
        d.bezierCurveTo(a * 150, a * 3, a * 181, a * 22, a * 203, a * 41);
        d.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
        d.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
        d.bezierCurveTo(a * 19, a * 148, a * 6, a * 95, a * 21, a * 66);
        d.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
        d.closePath();
        $b(d, b[0], b[0], a * 4);
        return c;
    }
    function zu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 80;
        c.height = a * 100;
        d.scale(0.5, 0.5);
        d.translate(10, 15);
        d.globalAlpha = 0.5;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 47, a * 5);
        d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
        d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
        d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
        d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
        d.closePath();
        $b(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 17, a * 70);
        d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
        $b(d, undefined, b[0], a * 10);
        d.translate(0, -10);
        d.globalAlpha = 1;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 47, a * 5);
        d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
        d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
        d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
        d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
        d.closePath();
        $b(d, b[1], b[2], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 17, a * 70);
        d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
        $b(d, undefined, b[2], a * 8);
        d.globalAlpha = 0.5;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 17, a * 70);
        d.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, a * 7);
        $b(d, sl, b[2], a * 8);
        return c;
    }
    function Au(b, c, d, e, f) {
        var g = document.createElement("canvas");
        var a = g.getContext("2d");
        if (e == 0) {
            var i = b * 270;
            var j = b * 250;
            g.width = i;
            g.height = j;
            a.beginPath();
            a.moveTo(b * 140, b * 3);
            a.translate(b * -25, b * -20);
            a.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
            a.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
            a.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
            a.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
            a.bezierCurveTo(b * 20, b * 158, b * 35, b * 78, b * 59, b * 56);
            a.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
            a.closePath();
            $b(a, d[0]);
        } else if (e == 1) {
            i = b * 430;
            j = b * 350;
            g.width = i;
            g.height = j;
            a.beginPath();
            a.moveTo(b * 180, b * 5);
            a.translate(b * -30, b * -60);
            a.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
            a.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
            a.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, b * 255, b * 386);
            a.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
            a.bezierCurveTo(b * 12, b * 192, b * 107, b * 75, b * 178, b * 69);
            a.closePath();
            $b(a, d[0]);
        } else if (e == 2) {
            i = b * 400;
            j = b * 300;
            g.width = i;
            g.height = j;
            a.beginPath();
            a.moveTo(b * 80, b * 52);
            a.translate(b * -40, b * -30);
            a.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
            a.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
            a.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
            a.bezierCurveTo(b * 108, b * 282, b * 100, b * 239, b * 63, b * 205);
            a.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
            a.closePath();
            $b(a, d[0]);
        }
        return g;
    }
    function ec(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 18;
        var a = b * 18;
        e.width = g;
        e.height = a;
        var i = b * 9;
        var j = b * 9;
        var k = b * 8;
        f.save();
        f.translate(i, j);
        f.globalAlpha = 1;
        id(f, 0, 0, k);
        $b(f, d[0]);
        k = b * 3;
        i = 0;
        j = b * -3;
        f.translate(i, j);
        f.globalAlpha = 1;
        id(f, 0, 0, k);
        $b(f, d[1]);
        f.restore();
        return e;
    }
    function ic(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 373;
        d.height = a * 314;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 184.048583984375, a * 69.1805419921875);
        Zb(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
        e.restore();
        $b(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.048583984375, a * 61.6805419921875);
        e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
        e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
        e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
        e.closePath();
        $b(e, c[0], c[0], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224.048583984375, a * 56.6805419921875);
        e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
        e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
        e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
        e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
        e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
        e.closePath();
        $b(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 183.548583984375, a * 119.6805419921875);
        Zb(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
        e.restore();
        $b(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 155.6805419921875);
        Zb(e, a * -121, a * -52, a * 242, a * 104, a * 40);
        e.restore();
        $b(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 205.1805419921875);
        Zb(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
        e.restore();
        $b(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 185.048583984375, a * 204.1805419921875);
        Zb(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
        e.restore();
        $b(e, c[0], c[0], a * 6);
        id(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
        $b(e, c[0], c[0], a * 6);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224.048583984375, a * 56.6805419921875);
        e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
        e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
        e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
        e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
        e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
        e.closePath();
        $b(e, c[3], c[4], a * 6);
        e.save();
        e.translate(a * 184.048583984375, a * 69.1805419921875);
        Zb(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
        e.restore();
        $b(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.048583984375, a * 61.6805419921875);
        e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
        e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
        e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
        e.closePath();
        $b(e, c[1], c[2], a * 6);
        e.save();
        e.translate(a * 183.548583984375, a * 119.6805419921875);
        Zb(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
        e.restore();
        $b(e, c[5], c[4], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 155.6805419921875);
        Zb(e, a * -121, a * -52, a * 242, a * 104, a * 40);
        e.restore();
        $b(e, c[3], c[4], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 205.1805419921875);
        Zb(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
        e.restore();
        $b(e, c[6], c[4], a * 6);
        e.globalCompositeOperation = "destination-out";
        e.save();
        e.translate(a * 185.048583984375, a * 204.1805419921875);
        Zb(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
        e.restore();
        $b(e, c[7], c[8], a * 6);
        e.globalCompositeOperation = "source-over";
        e.globalAlpha = 0.5;
        e.save();
        e.translate(a * 185.048583984375, a * 204.1805419921875);
        Zb(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
        e.restore();
        $b(e, c[7], c[8], a * 6);
        e.globalAlpha = 1;
        e.save();
        id(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
        $b(e, c[3], c[4], a * 6);
        e.restore();
        return d;
    }
    const tc = 0;
    function nc(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 130;
        var a = b * 142;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        f.translate(i, j + b * 7);
        f.globalAlpha = c ? 0.5 : 1;
        id(f, 0, 0, b * 60);
        $b(f, d[0]);
        f.translate(0, b * -7);
        f.globalAlpha = 1;
        id(f, 0, 0, b * 60);
        $b(f, d[1], d[2], b * 4);
        id(f, 0, 0, b * 40);
        $b(f, d[3]);
        id(f, 0, 0, b * 25);
        $b(f, d[4], d[5], b * 8);
        return e;
    }
    function oc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 309;
        d.height = a * 287;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34.5, a * 38.53125);
        e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
        e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
        e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
        e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
        e.closePath();
        $b(e, c[0], c[0], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143.5, a * 74.53125);
        e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
        e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
        e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
        e.closePath();
        $b(e, c[0], c[0], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 142.53125);
        e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
        e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
        e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
        e.closePath();
        $b(e, c[0], c[0], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 236.5, a * 189.53125);
        e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
        e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
        e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
        e.closePath();
        $b(e, c[0], c[0], a * 10);
        e.globalAlpha = 1;
        e.translate(a * -10, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34.5, a * 38.53125);
        e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
        e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
        e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
        e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
        e.closePath();
        $b(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143.5, a * 74.53125);
        e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
        e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
        e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
        e.closePath();
        $b(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 142.53125);
        e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
        e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
        e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
        e.closePath();
        $b(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 236.5, a * 189.53125);
        e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
        e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
        e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
        e.closePath();
        $b(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 109.5, a * 51.53125);
        e.bezierCurveTo(a * 107.5, a * 92.53125, a * 91.5, a * 95.53125, a * 59.5, a * 101.53125);
        $b(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 51.53125);
        e.bezierCurveTo(a * 71, a * 64.53125, a * 69.5, a * 76.53125, a * 69.5, a * 77.53125);
        e.closePath();
        $b(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 63.53125);
        e.bezierCurveTo(a * 70.5, a * 65.03125, a * 70.5, a * 65.03125, a * 56.5, a * 66.53125);
        e.closePath();
        $b(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125.5, a * 84.53125);
        e.bezierCurveTo(a * 125.5, a * 110.03125, a * 125.5, a * 110.03125, a * 125.5, a * 135.53125);
        e.closePath();
        $b(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 149.5, a * 108.53125);
        e.bezierCurveTo(a * 150, a * 137.03125, a * 150, a * 137.03125, a * 150.5, a * 165.53125);
        e.closePath();
        $b(e, c[1], c[2], a * 7);
        return d;
    }
    function ac(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100.5, a * 126.34375);
        e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
        e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
        e.closePath();
        $b(e, c[0], c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 106.5, a * 131.34375);
        e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
        e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 137.34375);
        e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
        e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
        e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
        e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 196.5, a * 151.34375);
        e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
        e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
        e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
        e.closePath();
        $b(e, c[0], c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154.5, a * 222.34375);
        e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
        e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
        e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
        e.closePath();
        $b(e, c[0], c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 279.5, a * 294.34375);
        e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
        e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
        e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
        e.closePath();
        $b(e, c[0], c[0], a * 12);
        e.globalAlpha = 1;
        e.translate(a * -10, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100.5, a * 126.34375);
        e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
        e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
        e.closePath();
        $b(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 106.5, a * 131.34375);
        e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
        e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 137.34375);
        e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
        e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
        e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
        e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
        e.closePath();
        $b(e, c[4]);
        id(e, a * 125.5, a * 140.34375, a * 11.180339887498949);
        $b(e, c[5]);
        id(e, a * 122.5, a * 135.34375, a * 5.0990195135927845);
        $b(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 196.5, a * 151.34375);
        e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
        e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
        e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
        e.closePath();
        $b(e, c[7], c[8], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154.5, a * 222.34375);
        e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
        e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
        e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
        e.closePath();
        $b(e, c[7], c[8], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 279.5, a * 294.34375);
        e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
        e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
        e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
        e.closePath();
        $b(e, c[7], c[8], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 296.5, a * 287.34375);
        e.bezierCurveTo(a * 311.5, a * 291.34375, a * 311.5, a * 291.34375, a * 326.5, a * 295.34375);
        e.closePath();
        $b(e, Ih, c[9], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 294.5, a * 289.34375);
        e.bezierCurveTo(a * 308.5, a * 297.34375, a * 308.5, a * 297.34375, a * 322.5, a * 305.34375);
        e.closePath();
        $b(e, Nh, c[9], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 294.5, a * 291.34375);
        e.bezierCurveTo(a * 304, a * 303.34375, a * 304, a * 303.34375, a * 313.5, a * 315.34375);
        e.closePath();
        $b(e, hg, c[9], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226.5, a * 161.34375);
        e.bezierCurveTo(a * 230.5, a * 160.34375, a * 236.5, a * 158.34375, a * 238.5, a * 161.34375);
        e.bezierCurveTo(a * 238.5, a * 157.34375, a * 228.5, a * 159.34375, a * 227.5, a * 161.34375);
        e.closePath();
        $b(e, undefined, c[9], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167.5, a * 248.34375);
        e.bezierCurveTo(a * 165.5, a * 251.34375, a * 168.5, a * 256.34375, a * 168.5, a * 253.34375);
        e.bezierCurveTo(a * 166.5, a * 252.34375, a * 168.5, a * 246.34375, a * 166.5, a * 247.34375);
        e.closePath();
        $b(e, cn, c[9], a * 3);
        return d;
    }
    function rc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96.5, a * 277.34375);
        e.bezierCurveTo(a * 197.5, a * 259.84375, a * 197.5, a * 259.84375, a * 298.5, a * 242.34375);
        e.bezierCurveTo(a * 311.5, a * 231.34375, a * 307.5, a * 168.34375, a * 298.5, a * 150.34375);
        e.bezierCurveTo(a * 198, a * 170.34375, a * 198, a * 170.34375, a * 97.5, a * 190.34375);
        e.closePath();
        $b(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98.5, a * 214.34375);
        e.bezierCurveTo(a * 199, a * 196.34375, a * 199, a * 196.34375, a * 299.5, a * 178.34375);
        e.closePath();
        $b(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98.5, a * 247.34375);
        e.bezierCurveTo(a * 201.5, a * 229.34375, a * 201.5, a * 229.34375, a * 304.5, a * 211.34375);
        e.closePath();
        $b(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 97.5, a * 189.34375);
        e.bezierCurveTo(a * 97, a * 199.84375, a * 97, a * 199.84375, a * 96.5, a * 210.34375);
        e.bezierCurveTo(a * 110.5, a * 204.34375, a * 110.5, a * 204.34375, a * 124.5, a * 198.34375);
        e.bezierCurveTo(a * 137.5, a * 203.84375, a * 137.5, a * 203.84375, a * 150.5, a * 209.34375);
        e.bezierCurveTo(a * 172, a * 197.84375, a * 172, a * 197.84375, a * 193.5, a * 186.34375);
        e.bezierCurveTo(a * 211.5, a * 189.84375, a * 211.5, a * 189.84375, a * 229.5, a * 193.34375);
        e.bezierCurveTo(a * 240.5, a * 193.34375, a * 240.5, a * 193.34375, a * 251.5, a * 193.34375);
        e.bezierCurveTo(a * 261, a * 182.84375, a * 261, a * 182.84375, a * 270.5, a * 172.34375);
        e.bezierCurveTo(a * 287.5, a * 169.34375, a * 287.5, a * 169.34375, a * 304.5, a * 166.34375);
        e.bezierCurveTo(a * 304.5, a * 156.34375, a * 300.5, a * 145.34375, a * 298.5, a * 147.34375);
        e.closePath();
        $b(e, c[3], c[4], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 300.5, a * 147.34375);
        e.bezierCurveTo(a * 293.5, a * 121.34375, a * 278.5, a * 106.34375, a * 256.5, a * 101.34375);
        e.bezierCurveTo(a * 176.5, a * 145.34375, a * 176.5, a * 145.34375, a * 96.5, a * 189.34375);
        e.closePath();
        $b(e, c[5], c[6], a * 12);
        id(e, a * 252.5, a * 129.34375, a * 18.027756377319946);
        $b(e, c[7]);
        id(e, a * 248.5, a * 121.34375, a * 8.246211251235321);
        $b(e, c[8]);
        return d;
    }
    function sc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 220;
        d.height = a * 180;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * -90, a * -150);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104, a * 237.8000030517578);
        e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
        e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
        e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
        e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
        e.closePath();
        $b(e, c[5], c[5], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 211.20000457763672);
        e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
        e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
        e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
        e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
        e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
        e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
        e.closePath();
        $b(e, c[5], c[5], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 120, a * 207);
        e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
        e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
        e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
        e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
        e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
        e.closePath();
        $b(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 238);
        e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
        e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
        e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
        e.closePath();
        $b(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 211);
        e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
        e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
        e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
        e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
        e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
        e.closePath();
        $b(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 280, a * 206);
        e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
        e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
        e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
        e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
        e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
        e.closePath();
        $b(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 138, a * 298.40000915527344);
        e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
        e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
        e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
        e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
        e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
        e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
        e.closePath();
        $b(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 177.5999984741211);
        e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
        e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
        e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
        e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
        e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
        e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
        e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
        e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
        e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
        e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
        e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
        e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
        e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
        e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
        e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
        e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
        e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
        e.closePath();
        $b(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 175.5999984741211);
        e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
        e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
        e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
        e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
        e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
        e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
        e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
        e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
        e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
        e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
        e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
        e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
        e.closePath();
        $b(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 198, a * 161.4000015258789);
        e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
        e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
        e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
        e.closePath();
        $b(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 194);
        e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
        e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
        e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
        e.closePath();
        $b(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
        e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
        e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
        e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
        e.closePath();
        $b(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 156, a * 188);
        e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
        e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
        e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
        e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
        e.closePath();
        $b(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 189);
        e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
        e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
        e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
        e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
        e.closePath();
        $b(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 262);
        e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
        e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
        e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
        e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
        e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
        e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
        e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
        e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
        e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
        e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
        e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
        e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
        e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
        e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
        e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
        e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
        e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
        e.closePath();
        $b(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 264);
        e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
        e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
        e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
        e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
        e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
        e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
        e.closePath();
        $b(e, lh, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 140, a * 265.33333587646484);
        e.bezierCurveTo(a * 141, a * 250.33333587646484, a * 148, a * 244.33333587646484, a * 160, a * 241.33333587646484);
        e.bezierCurveTo(a * 200, a * 241.33333587646484, a * 200, a * 241.33333587646484, a * 240, a * 241.33333587646484);
        e.bezierCurveTo(a * 256, a * 243.33333587646484, a * 260, a * 255.33333587646484, a * 260, a * 265.33333587646484);
        e.bezierCurveTo(a * 261, a * 281.33333587646484, a * 247, a * 289.33333587646484, a * 240, a * 289.33333587646484);
        e.bezierCurveTo(a * 161, a * 289.33333587646484, a * 200.5, a * 289.33333587646484, a * 161, a * 289.33333587646484);
        e.bezierCurveTo(a * 149, a * 288.33333587646484, a * 142, a * 278.33333587646484, a * 140, a * 266.33333587646484);
        e.closePath();
        $b(e, undefined, c[4], a * 6);
        e.globalAlpha = 0.5;
        e.scale(1, 1);
        e.translate(a * 105, a * 155);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59.27557373046875, a * 20.406280517578125);
        e.bezierCurveTo(a * 74.27557373046875, a * 5.406280517578125, a * 90.27557373046875, a * 6.406280517578125, a * 99.27557373046875, a * 5.406280517578125);
        e.bezierCurveTo(a * 120.27557373046875, a * 5.406280517578125, a * 126.27557373046875, a * 10.406280517578125, a * 136.27557373046875, a * 20.406280517578125);
        e.bezierCurveTo(a * 157.77557373046875, a * 37.906280517578125, a * 157.77557373046875, a * 37.906280517578125, a * 179.27557373046875, a * 55.406280517578125);
        e.bezierCurveTo(a * 190.27557373046875, a * 63.406280517578125, a * 192.27557373046875, a * 77.40628051757812, a * 189.27557373046875, a * 91.40628051757812);
        e.bezierCurveTo(a * 183.27557373046875, a * 108.40628051757812, a * 176.27557373046875, a * 110.40628051757812, a * 169.27557373046875, a * 118.40628051757812);
        e.bezierCurveTo(a * 152.27557373046875, a * 133.40628051757812, a * 152.27557373046875, a * 133.40628051757812, a * 135.27557373046875, a * 148.40628051757812);
        e.bezierCurveTo(a * 87.27557373046875, a * 143.40628051757812, a * 87.27557373046875, a * 143.40628051757812, a * 39.27557373046875, a * 138.40628051757812);
        e.bezierCurveTo(a * 26.77557373046875, a * 123.40628051757812, a * 26.77557373046875, a * 123.40628051757812, a * 14.27557373046875, a * 108.40628051757812);
        e.bezierCurveTo(a * 2.27557373046875, a * 95.40628051757812, a * 2.27557373046875, a * 92.40628051757812, a * 3.27557373046875, a * 83.40628051757812);
        e.bezierCurveTo(a * 4.27557373046875, a * 63.406280517578125, a * 12.27557373046875, a * 60.406280517578125, a * 24.27557373046875, a * 40.406280517578125);
        e.closePath();
        $b(e, c[5], c[5], a * 4);
        e.globalAlpha = 1;
        e.translate(a * -110, a * -155);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104, a * 237.8000030517578);
        e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
        e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
        e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
        e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
        e.closePath();
        $b(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 211.20000457763672);
        e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
        e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
        e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
        e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
        e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
        e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
        e.closePath();
        $b(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 120, a * 207);
        e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
        e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
        e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
        e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
        e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
        e.closePath();
        $b(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 238);
        e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
        e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
        e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
        e.closePath();
        $b(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 211);
        e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
        e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
        e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
        e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
        e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
        e.closePath();
        $b(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 280, a * 206);
        e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
        e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
        e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
        e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
        e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
        e.closePath();
        $b(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 138, a * 298.40000915527344);
        e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
        e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
        e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
        e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
        e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
        e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
        e.closePath();
        $b(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 177.5999984741211);
        e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
        e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
        e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
        e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
        e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
        e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
        e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
        e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
        e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
        e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
        e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
        e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
        e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
        e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
        e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
        e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
        e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
        e.closePath();
        $b(e, c[2], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 175.5999984741211);
        e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
        e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
        e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
        e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
        e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
        e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
        e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
        e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
        e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
        e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
        e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
        e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
        e.closePath();
        $b(e, hg, c[3], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 198, a * 161.4000015258789);
        e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
        e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
        e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
        e.closePath();
        $b(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 194);
        e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
        e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
        e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
        e.closePath();
        $b(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
        e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
        e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
        e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
        e.closePath();
        $b(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 156, a * 188);
        e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
        e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
        e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
        e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
        e.closePath();
        $b(e, undefined, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 189);
        e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
        e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
        e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
        e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
        e.closePath();
        $b(e, undefined, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 262);
        e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
        e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
        e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
        e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
        e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
        e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
        e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
        e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
        e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
        e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
        e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
        e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
        e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
        e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
        e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
        e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
        e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
        e.closePath();
        $b(e, c[0], c[0], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 264);
        e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
        e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
        e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
        e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
        e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
        e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
        e.closePath();
        $b(e, Mq, c[1], a * 2);
        return d;
    }
    const hc = 15;
    function lc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 106;
        d.height = a * 681;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 52.5, a * 395);
        e.rotate(0);
        Zb(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
        e.restore();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 588);
        e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
        e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
        e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 135);
        e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
        e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
        e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
        e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
        e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 150);
        e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
        e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
        e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
        e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
        e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 39);
        e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
        e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
        e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 64);
        e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
        e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
        e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
        e.closePath();
        $b(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 52.5, a * 395);
        e.rotate(0);
        Zb(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
        e.restore();
        $b(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 588);
        e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
        e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
        e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
        e.closePath();
        $b(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 135);
        e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
        e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
        e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
        e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
        e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
        e.closePath();
        $b(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 150);
        e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
        e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
        e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
        e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
        e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
        e.closePath();
        $b(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 39);
        e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
        e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
        e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
        e.closePath();
        $b(e, c[6], c[7], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 64);
        e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
        e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
        e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
        e.closePath();
        $b(e, c[8]);
        return d;
    }
    function gc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 300;
        d.height = a * 300;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 150, a * 160);
        e.rotate(6.28);
        nd(e, 6, a * 146, a * 30);
        e.restore();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(6.28);
        nd(e, 6, a * 146, a * 30);
        e.restore();
        $b(e, c[1], c[2], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        nd(e, 6, a * 105, a * 30);
        e.restore();
        $b(e, c[3], c[3], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        nd(e, 6, a * 66, a * 30);
        e.restore();
        $b(e, c[4], c[2], a * 8);
        e.save();
        e.translate(a * 131, a * 116);
        nd(e, 7, a * 17, a * 8);
        e.restore();
        $b(e, c[6]);
        e.save();
        e.translate(a * 163, a * 168);
        nd(e, 7, a * 25, a * 8);
        e.restore();
        $b(e, c[6]);
        e.save();
        e.translate(a * 117, a * 151);
        nd(e, 7, a * 11, a * 8);
        e.restore();
        $b(e, c[6]);
        e.save();
        e.translate(a * 167, a * 122);
        nd(e, 7, a * 12, a * 8);
        e.restore();
        $b(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 207);
        e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
        e.closePath();
        $b(e, undefined, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 100);
        e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
        e.closePath();
        $b(e, undefined, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 183, a * 100);
        e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
        e.closePath();
        $b(e, undefined, c[2], a * 8);
        return d;
    }
    function uc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 43;
        d.height = a * 209;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 21, a * 102.5);
        Zb(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
        e.restore();
        $b(e, c[0]);
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 10);
        e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
        e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
        e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 1);
        e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
        e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
        e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 146);
        e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
        e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
        e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
        e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
        e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
        e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
        e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
        e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 6);
        e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
        e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
        e.closePath();
        $b(e, c[0]);
        e.translate(0, a * -20);
        e.globalAlpha = 1;
        e.translate(0, a * 10);
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 21, a * 102.5);
        Zb(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
        e.restore();
        $b(e, c[1], c[2], a * 4);
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 10);
        e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
        e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
        e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
        e.closePath();
        $b(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 1);
        e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
        e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
        e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
        e.closePath();
        $b(e, c[5], c[6], a * 4);
        e.translate(0, a * 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 146);
        e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
        e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
        e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
        e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
        e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
        e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
        e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
        e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
        e.closePath();
        $b(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 6);
        e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
        e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
        e.closePath();
        $b(e, c[8]);
        return d;
    }
    function bc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 200;
        d.height = a * 200;
        e.save();
        e.translate(a * 112, a * 158);
        Zb(e, a * -86.5, a * -86, a * 150, a * 35, a * 20);
        e.restore();
        $b(e, c[0]);
        e.save();
        e.translate(a * 170, a * 100);
        Zb(e, a * -86.5, a * -86, a * 35, a * 150, a * 20);
        e.restore();
        $b(e, c[0]);
        return d;
    }
    function dc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 175;
        d.height = a * 169;
        e.globalAlpha = 0.5;
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19, a * 139);
        e.bezierCurveTo(a * 18, a * 163, a * 22, a * 156, a * 53, a * 157);
        e.bezierCurveTo(a * 97.5, a * 157, a * 97.5, a * 157, a * 142, a * 157);
        e.bezierCurveTo(a * 150, a * 157, a * 153, a * 156, a * 154, a * 142);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -3);
        e.save();
        e.translate(a * 86.5, a * 81.5);
        Zb(e, a * -66.5, a * -65.5, a * 133, a * 131, a * 10);
        e.restore();
        $b(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 84.5, a * 79);
        Zb(e, a * -50.5, a * -49, a * 101, a * 98, a * 10);
        e.restore();
        $b(e, c[3], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42, a * 54);
        e.bezierCurveTo(a * 37, a * 48, a * 39, a * 44, a * 38, a * 41);
        e.bezierCurveTo(a * 42, a * 40, a * 45, a * 40, a * 50, a * 41);
        e.bezierCurveTo(a * 85, a * 36, a * 98, a * 37, a * 116, a * 42);
        e.bezierCurveTo(a * 132, a * 39, a * 132, a * 39, a * 133, a * 56);
        e.bezierCurveTo(a * 136, a * 73, a * 136, a * 84, a * 132, a * 106);
        e.bezierCurveTo(a * 47, a * 113, a * 85.5, a * 106, a * 39, a * 106);
        e.bezierCurveTo(a * 32, a * 81, a * 38, a * 60, a * 42, a * 55);
        e.closePath();
        $b(e, c[4], c[5], a * 5);
        e.save();
        e.translate(a * 28, a * 24);
        e.rotate(0);
        Zb(e, a * -14, a * -14, a * 28, a * 28, a * 4);
        e.restore();
        $b(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 143, a * 23);
        e.rotate(0);
        Zb(e, a * -14, a * -14, a * 28, a * 28, a * 4);
        e.restore();
        $b(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 80);
        e.bezierCurveTo(a * 73, a * 78, a * 84, a * 74, a * 100, a * 64);
        e.bezierCurveTo(a * 111, a * 57, a * 125, a * 67, a * 108, a * 84);
        e.bezierCurveTo(a * 96, a * 95, a * 86, a * 96, a * 70, a * 88);
        e.bezierCurveTo(a * 62.5, a * 84, a * 62.5, a * 84, a * 55, a * 80);
        e.closePath();
        $b(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17, a * 112);
        e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
        e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
        e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
        e.closePath();
        $b(e, c[8], c[9], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 127, a * 111);
        e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
        e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
        e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
        e.closePath();
        $b(e, c[9]);
        e.globalAlpha = 0.5;
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 15, a * 117);
        e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
        e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
        e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
        e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 127);
        e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
        e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
        e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
        e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
        e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
        e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
        e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
        e.closePath();
        $b(e, c[4], c[5], a * 5);
        e.save();
        e.translate(a * 27.5, a * 138.5);
        Zb(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
        e.restore();
        $b(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 143.5, a * 137);
        Zb(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
        e.restore();
        $b(e, c[1], c[2], a * 5);
        return d;
    }
    function vc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 165;
        d.height = a * 123;
        e.save();
        e.translate(a * 81, a * 65);
        Zb(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
        e.restore();
        $b(e, c[0]);
        e.save();
        e.translate(a * 81, a * 58);
        Zb(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
        e.restore();
        $b(e, c[1], c[2], 4);
        e.save();
        e.translate(a * 81, a * 58);
        Zb(e, a * -69, a * -47, a * 138, a * 93, a * 15);
        e.restore();
        $b(e, c[3], c[4], 4);
        e.save();
        e.translate(a * 79, a * 54);
        Zb(e, a * -34, a * -40, a * 68, a * 88, a * 13);
        e.restore();
        $b(e, undefined, c[5], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 13);
        e.bezierCurveTo(a * 43.5, a * 55, a * 43.5, a * 55, a * 43, a * 101);
        e.closePath();
        $b(e, lh, c[6], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 13);
        e.bezierCurveTo(a * 115, a * 56, a * 115, a * 56, a * 115, a * 101);
        e.closePath();
        $b(e, Io, c[6], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 6);
        e.bezierCurveTo(a * 35, a * 56, a * 36, a * 109, a * 35, a * 110);
        e.closePath();
        $b(e, $e, c[7], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123, a * 6);
        e.bezierCurveTo(a * 123, a * 56, a * 123, a * 56, a * 123, a * 110);
        e.closePath();
        $b(e, lh, c[7], 4);
        e.save();
        e.translate(a * 79, a * 113);
        Zb(e, a * -18, a * -2, a * 36, a * 4, a * 20);
        e.restore();
        $b(e, undefined, c[8], 4);
        e.save();
        e.translate(a * 75, a * 118);
        Zb(e, a * -6, a * -2.5, a * 20, a * 5, a * 20);
        e.restore();
        $b(e, c[8]);
        return d;
    }
    function cc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 175;
        d.height = a * 169;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17, a * 112);
        e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
        e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
        e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
        e.closePath();
        $b(e, c[8], c[9], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 127, a * 111);
        e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
        e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
        e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
        e.closePath();
        $b(e, c[9]);
        e.globalAlpha = 0.5;
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 15, a * 117);
        e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
        e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
        e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
        e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 127);
        e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
        e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
        e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
        e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
        e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
        e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
        e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
        e.closePath();
        $b(e, c[4], c[5], a * 5);
        e.save();
        e.translate(a * 27.5, a * 138.5);
        Zb(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
        e.restore();
        $b(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 143.5, a * 137);
        Zb(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
        e.restore();
        $b(e, c[1], c[2], a * 5);
        return d;
    }
    function mc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 125;
        d.height = a * 139;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 63, a * 79);
        e.rotate(1);
        nd(e, 8, a * 60, a * 10);
        $b(e, c[0]);
        e.restore();
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 63, a * 69);
        e.rotate(1);
        nd(e, 8, a * 60, a * 10);
        $b(e, c[1], c[2], 4);
        e.rotate(0.56);
        nd(e, 8, a * 40, a * 10);
        $b(e, c[3], c[4], 4);
        e.rotate(0.28);
        nd(e, 8, a * 28, a * 8);
        $b(e, c[5]);
        e.restore();
        return d;
    }
    function pc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 130;
        d.height = a * 148;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 65, a * 85);
        e.rotate(1.4);
        nd(e, 7, a * 60, a * 10);
        e.restore();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 65, a * 74);
        e.rotate(1.4);
        nd(e, 7, a * 60, a * 10);
        $b(e, c[1], c[2], 4);
        e.rotate(0.64);
        nd(e, 7, a * 40, a * 10);
        $b(e, c[3], c[4], 4);
        e.rotate(0.12);
        nd(e, 7, a * 23, a * 5);
        e.restore();
        $b(e, c[5]);
        return d;
    }
    function Cc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 100;
        d.height = a * 648;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 50.5, a * 349.5);
        Zb(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
        e.restore();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 538);
        e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
        e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
        e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
        e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 554);
        e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 569);
        e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
        e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
        e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
        e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 581);
        e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
        e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
        e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
        e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 106);
        e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
        e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
        e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
        e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 27);
        e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
        e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
        e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 43);
        e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 73, a * 97);
        e.bezierCurveTo(a * 66, a * 116, a * 43, a * 122, a * 26, a * 99);
        e.closePath();
        $b(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 50.5, a * 349.5);
        Zb(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
        e.restore();
        $b(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 538);
        e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
        e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
        e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
        e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
        e.closePath();
        $b(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 554);
        e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
        e.closePath();
        $b(e, Ol, c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 569);
        e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
        e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
        e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
        e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
        e.closePath();
        $b(e, c[5], c[6], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 581);
        e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
        e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
        e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
        e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
        e.closePath();
        $b(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 106);
        e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
        e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
        e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
        e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
        e.closePath();
        $b(e, c[5], c[6], a * 8);
        e.save();
        e.translate(a * -46, a * -50);
        e.scale(2, 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 80);
        e.bezierCurveTo(a * 51, a * 89.5, a * 51, a * 89.5, a * 51, a * 99);
        e.bezierCurveTo(a * 49, a * 103, a * 46, a * 105, a * 44, a * 99);
        e.bezierCurveTo(a * 44, a * 88.5, a * 44, a * 88.5, a * 44, a * 78);
        e.closePath();
        $b(e, c[8]);
        e.restore();
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 27);
        e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
        e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
        e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
        e.closePath();
        $b(e, c[8], c[9], a * 8);
        e.scale(2, 2);
        e.translate(a * -23, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 57, a * 69);
        e.bezierCurveTo(a * 50, a * 76, a * 43, a * 75, a * 38, a * 69);
        e.bezierCurveTo(a * 43, a * 57, a * 43, a * 57, a * 48, a * 45);
        e.closePath();
        $b(e, c[10]);
        return d;
    }
    function Tc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 98;
        e.translate(0, a * 4);
        if (wb === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            e.save();
            e.translate(a * 44, a * 50);
            e.rotate(1.4);
            nd(e, 7, a * 41, a * 10);
            e.restore();
            $b(e, c[0]);
        }
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(1.4);
        nd(e, 7, a * 41, a * 10);
        $b(e, c[1], c[2], a * 4);
        nd(e, 7, a * 35, a * 10);
        $b(e, c[3], c[4], a * 4);
        nd(e, 7, a * 23, a * 5);
        e.restore();
        $b(e, c[5]);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Zb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        $b(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Zb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        $b(e, c[4], c[4], a * 2);
        id(e, a * 45, a * 29, a * 7);
        $b(e, c[5]);
        id(e, a * 45, a * 61, a * 7);
        $b(e, c[5]);
        id(e, a * 28, a * 45, a * 7);
        $b(e, c[5]);
        id(e, a * 62, a * 45, a * 7);
        $b(e, c[5]);
        return d;
    }
    function fc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 130;
        d.height = a * 142;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 65, a * 80);
        e.rotate(0.2);
        nd(e, 9, a * 60, a * 10);
        e.restore();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 65, a * 71);
        e.rotate(0.2);
        nd(e, 9, a * 60, a * 10);
        $b(e, c[1], c[2], 4);
        e.rotate(-0.32);
        nd(e, 9, a * 38, a * 10);
        $b(e, c[3], c[4], 4);
        e.rotate(0.68);
        nd(e, 9, a * 20, a * 8);
        $b(e, c[5], c[6], 6);
        e.restore();
        return d;
    }
    function zc(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 372;
        c.height = a * 375;
        d.globalAlpha = 0.5;
        d.translate(a * 15, a * 15);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
        d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
        d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
        d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
        d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
        d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
        d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
        d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
        d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
        d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
        d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
        d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
        d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
        d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
        d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
        d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
        d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
        d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
        d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
        d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
        d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
        d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
        d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
        d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
        d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
        d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
        d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
        d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
        d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
        d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
        d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
        d.closePath();
        $b(d, b[0]);
        d.globalAlpha = 1;
        d.translate(a * -15, a * -15);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
        d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
        d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
        d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
        d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
        d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
        d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
        d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
        d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
        d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
        d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
        d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
        d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
        d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
        d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
        d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
        d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
        d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
        d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
        d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
        d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
        d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
        d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
        d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
        d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
        d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
        d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
        d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
        d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
        d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
        d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
        d.closePath();
        $b(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
        d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
        d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
        d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
        d.closePath();
        $b(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
        d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
        d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
        d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
        d.closePath();
        $b(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
        d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
        d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
        d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
        d.closePath();
        $b(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
        d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
        d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
        d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
        d.closePath();
        $b(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
        d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
        d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
        d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
        d.closePath();
        $b(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
        d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
        d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
        d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
        d.closePath();
        $b(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
        d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
        d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
        d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
        d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
        d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
        d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
        d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
        d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
        d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
        d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
        d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
        d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
        d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
        d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
        d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
        d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
        d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
        d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
        d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
        d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
        d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
        d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
        d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
        d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
        d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
        d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
        d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
        d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
        d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
        d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
        d.closePath();
        $b(d, Io, b[2], a * 4);
        return c;
    }
    function yc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 101;
        e.translate(a * 0, a * 5);
        if (wb === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            id(e, a * 44, a * 55, a * 41);
            $b(e, c[0]);
        }
        e.globalAlpha = 1;
        id(e, a * 44, a * 45, a * 41);
        $b(e, c[1], c[2], a * 4);
        id(e, a * 44, a * 45, a * 31);
        $b(e, c[3]);
        e.save();
        e.translate(a * 45, a * 45);
        Zb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        $b(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        Zb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        $b(e, c[4], c[4], a * 2);
        id(e, a * 45, a * 29, a * 7);
        $b(e, c[5]);
        id(e, a * 45, a * 61, a * 7);
        $b(e, c[5]);
        id(e, a * 28, a * 45, a * 7);
        $b(e, c[5]);
        id(e, a * 62, a * 45, a * 7);
        $b(e, c[5]);
        return d;
    }
    function wc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 81;
        d.height = a * 626;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 565);
        e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
        e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
        e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
        e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
        e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
        e.closePath();
        $b(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 565);
        e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
        e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
        e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
        e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
        e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
        e.closePath();
        $b(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 129);
        e.bezierCurveTo(a * 32, a * 135, a * 48, a * 136, a * 53, a * 129);
        e.bezierCurveTo(a * 56, a * 97, a * 53, a * 82, a * 52, a * 64);
        e.bezierCurveTo(a * 49, a * 33, a * 44, a * 27, a * 41, a * 21);
        e.bezierCurveTo(a * 31, a * 40, a * 28, a * 84, a * 27, a * 127);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 565);
        e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
        e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
        e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
        e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
        e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
        e.closePath();
        $b(e, sl, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 475);
        e.bezierCurveTo(a * 38, a * 482, a * 48, a * 480, a * 54, a * 474);
        e.bezierCurveTo(a * 54, a * 509.5, a * 54, a * 509.5, a * 54, a * 545);
        e.bezierCurveTo(a * 46, a * 554, a * 36, a * 552, a * 28, a * 545);
        e.closePath();
        $b(e, c[4], c[5], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 496);
        e.bezierCurveTo(a * 39, a * 506, a * 49, a * 503, a * 54, a * 496);
        $b(e, undefined, c[5], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 521);
        e.bezierCurveTo(a * 41, a * 529, a * 49, a * 524, a * 54, a * 520);
        $b(e, Gr, c[5], a * 8);
        return d;
    }
    function Pc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 300;
        d.height = a * 300;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 150, a * 160);
        e.rotate(6.28);
        nd(e, 6, a * 146, a * 30);
        e.restore();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(6.28);
        nd(e, 6, a * 146, a * 30);
        e.restore();
        $b(e, c[1], c[2], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        nd(e, 6, a * 105, a * 30);
        e.restore();
        $b(e, c[3], c[3], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        nd(e, 6, a * 66, a * 30);
        e.restore();
        $b(e, c[4], c[2], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        nd(e, 6, a * 31, a * 30);
        e.restore();
        $b(e, c[5], c[6], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 207);
        e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
        e.closePath();
        $b(e, Fa, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 100);
        e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
        e.closePath();
        $b(e, ks, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 183, a * 100);
        e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
        e.closePath();
        $b(e, undefined, c[2], a * 8);
        return d;
    }
    function kc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 135;
        d.height = a * 120;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 3.5, a * 55.25);
        e.bezierCurveTo(a * 3.5, a * 114.25, a * 2.5, a * 109.25, a * 3.5, a * 112.25);
        e.bezierCurveTo(a * 5.5, a * 119.25, a * 8.5, a * 119.25, a * 11.5, a * 119.25);
        e.bezierCurveTo(a * 15.5, a * 114.25, a * 13.5, a * 95.25, a * 14.5, a * 82.25);
        e.closePath();
        $b(e, c[0], c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 6.5, a * 43.25);
        e.bezierCurveTo(a * 3.5, a * 27.25, a * 7.5, a * 20.25, a * 25.5, a * 11.25);
        e.bezierCurveTo(a * 45.5, a * -0.75, a * 73.5, a * 1.25, a * 107.5, a * 10.25);
        e.bezierCurveTo(a * 131.5, a * 21.25, a * 125.5, a * 34.25, a * 125.5, a * 36.25);
        e.closePath();
        $b(e, c[0], c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 120.5, a * 62.25);
        e.bezierCurveTo(a * 121.5, a * 95.25, a * 120.5, a * 80.25, a * 120.5, a * 100.25);
        e.bezierCurveTo(a * 118.5, a * 119.25, a * 123.5, a * 118.25, a * 129.5, a * 113.25);
        e.bezierCurveTo(a * 133.5, a * 107.25, a * 130.5, a * 97.25, a * 130.5, a * 87.25);
        e.bezierCurveTo(a * 129.5, a * 56.25, a * 130, a * 70.75, a * 129.5, a * 54.25);
        e.closePath();
        $b(e, c[0], c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17.5, a * 27);
        e.bezierCurveTo(a * 48.5, a * 5, a * 93.5, a * 14, a * 118.5, a * 26);
        e.bezierCurveTo(a * 132.5, a * 35, a * 133.5, a * 52, a * 132.5, a * 68);
        e.bezierCurveTo(a * 125.5, a * 87, a * 116.5, a * 84, a * 96.5, a * 75);
        e.bezierCurveTo(a * 60.5, a * 66, a * 52.5, a * 74, a * 37.5, a * 78);
        e.bezierCurveTo(a * 2.5, a * 86, a * 3.5, a * 78, a * 1.5, a * 61);
        e.bezierCurveTo(a * 1.5, a * 37, a * 9.5, a * 32, a * 15.5, a * 28);
        e.closePath();
        $b(e, c[2], c[3], a * 7);
        return d;
    }
    const Ac = String.fromCharCode;
    const xc = Ac(101);
    const Jc = Ac(118);
    const Mc = Ac(97);
    const Bc = Ac(108);
    function Dc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 88;
        d.height = a * 647;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 45, a * 384.5);
        Zb(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
        e.restore();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 572);
        e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
        e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
        e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
        e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 587);
        e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
        e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
        e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 113);
        e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
        e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
        e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
        e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 139);
        e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
        e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
        e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 29);
        e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
        e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
        e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
        e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 54);
        e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
        e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
        e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
        e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
        e.closePath();
        $b(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 45, a * 384.5);
        Zb(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
        e.restore();
        $b(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 572);
        e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
        e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
        e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
        e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
        e.closePath();
        $b(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 587);
        e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
        e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
        e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
        e.closePath();
        $b(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 113);
        e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
        e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
        e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
        e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
        e.closePath();
        $b(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 139);
        e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
        e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
        e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
        e.closePath();
        $b(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 29);
        e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
        e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
        e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
        e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
        e.closePath();
        $b(e, c[6], c[7], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 54);
        e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
        e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
        e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
        e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
        e.closePath();
        $b(e, c[8]);
        return d;
    }
    function Ic(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 115;
        d.height = a * 585;
        e.scale(-1, 1);
        e.translate(a * -110, 0);
        e.translate(a * 10, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 51.5, a * 342);
        Zb(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
        e.restore();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 54, a * 83);
        e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
        e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
        e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 95, a * 97);
        e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
        e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
        e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
        e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 176);
        e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
        e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 50, a * 176);
        e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
        e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 403);
        e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
        e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
        e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59, a * 67);
        e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
        e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
        e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 125);
        e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
        e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
        e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
        e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 171);
        e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
        e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
        e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60, a * 68);
        e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
        e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
        e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
        e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
        e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 71, a * 172);
        e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
        e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
        e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 151);
        e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
        e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
        e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
        e.closePath();
        $b(e, c[0]);
        e.translate(a * -10, a * -10);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 51.5, a * 342);
        Zb(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
        e.restore();
        $b(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 54, a * 83);
        e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
        e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
        e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
        e.closePath();
        $b(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 95, a * 97);
        e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
        e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
        e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
        e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
        e.closePath();
        $b(e, c[5], c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 403);
        e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
        e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
        e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
        e.closePath();
        $b(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 37, a * 427);
        e.bezierCurveTo(a * 47, a * 435, a * 55, a * 435, a * 67, a * 427);
        $b(e, undefined, c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 448);
        e.bezierCurveTo(a * 46, a * 454, a * 54, a * 457, a * 65, a * 449);
        $b(e, undefined, c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 176);
        e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
        e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
        e.closePath();
        $b(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 50, a * 176);
        e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
        e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
        e.closePath();
        $b(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59, a * 67);
        e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
        e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
        e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
        e.closePath();
        $b(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 125);
        e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
        e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
        e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
        e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
        e.closePath();
        $b(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 171);
        e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
        e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
        e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
        e.closePath();
        $b(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60, a * 68);
        e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
        e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
        e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
        e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
        e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
        e.closePath();
        $b(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 71, a * 172);
        e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
        e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
        e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
        e.closePath();
        $b(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 151);
        e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
        e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
        e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
        e.closePath();
        $b(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 113);
        e.bezierCurveTo(a * 65, a * 140, a * 75, a * 166, a * 52, a * 169);
        e.bezierCurveTo(a * 29, a * 168, a * 41, a * 143, a * 53, a * 112);
        e.closePath();
        $b(e, c[3], c[4], a * 6);
        return d;
    }
    function Sc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 501;
        d.height = a * 309;
        e.translate(0, a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126, a * 184);
        e.bezierCurveTo(a * 169, a * 196, a * 194, a * 198, a * 227, a * 198);
        e.bezierCurveTo(a * 235, a * 222, a * 236, a * 223, a * 241, a * 226);
        e.bezierCurveTo(a * 245, a * 228, a * 257, a * 228, a * 263, a * 226);
        e.bezierCurveTo(a * 267, a * 225, a * 270, a * 211, a * 275, a * 198);
        e.bezierCurveTo(a * 332, a * 194, a * 347, a * 192, a * 372, a * 188);
        e.bezierCurveTo(a * 366, a * 174.5, a * 366, a * 174.5, a * 360, a * 161);
        e.bezierCurveTo(a * 253.5, a * 162, a * 253.5, a * 162, a * 147, a * 163);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 116);
        e.bezierCurveTo(a * 90, a * 101, a * 96, a * 89, a * 106, a * 83);
        e.bezierCurveTo(a * 86, a * 79, a * 86, a * 52, a * 93, a * 38);
        e.bezierCurveTo(a * 99, a * 51, a * 107, a * 57, a * 122, a * 63);
        e.bezierCurveTo(a * 130, a * 53, a * 141, a * 46, a * 161, a * 46);
        e.bezierCurveTo(a * 157, a * 31, a * 158, a * 20, a * 169, a * 6);
        e.bezierCurveTo(a * 171, a * 24, a * 186, a * 33, a * 198, a * 45);
        e.bezierCurveTo(a * 252, a * 45, a * 252, a * 45, a * 306, a * 45);
        e.bezierCurveTo(a * 323, a * 33, a * 332, a * 21, a * 335, a * 7);
        e.bezierCurveTo(a * 349, a * 21, a * 347, a * 36, a * 345, a * 46);
        e.bezierCurveTo(a * 364, a * 46, a * 369, a * 48, a * 377, a * 63);
        e.bezierCurveTo(a * 398, a * 58, a * 403, a * 49, a * 409, a * 40);
        e.bezierCurveTo(a * 419, a * 57, a * 411, a * 79, a * 398, a * 85);
        e.bezierCurveTo(a * 405, a * 100, a * 405, a * 106, a * 401, a * 118);
        e.bezierCurveTo(a * 332.5, a * 128.5, a * 332.5, a * 128.5, a * 264, a * 139);
        e.closePath();
        $b(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 122, a * 191);
        e.bezierCurveTo(a * 123, a * 237, a * 135, a * 245, a * 153, a * 259);
        e.bezierCurveTo(a * 167, a * 269, a * 158, a * 281, a * 118, a * 276);
        e.bezierCurveTo(a * 104, a * 273, a * 98, a * 268, a * 93, a * 242);
        e.bezierCurveTo(a * 89, a * 220, a * 92, a * 201, a * 102, a * 179);
        e.closePath();
        $b(e, c[3], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 403, a * 182);
        e.bezierCurveTo(a * 414, a * 215, a * 412, a * 232, a * 403, a * 260);
        e.bezierCurveTo(a * 395, a * 274, a * 375, a * 272, a * 356, a * 270);
        e.bezierCurveTo(a * 345, a * 268, a * 339, a * 262, a * 354, a * 252);
        e.bezierCurveTo(a * 370, a * 242, a * 380, a * 225, a * 384, a * 184);
        e.closePath();
        $b(e, c[3], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 155, a * 157);
        e.bezierCurveTo(a * 146, a * 189, a * 137, a * 198, a * 114, a * 219);
        e.bezierCurveTo(a * 104, a * 212, a * 98, a * 203, a * 89, a * 189);
        e.bezierCurveTo(a * 82, a * 178, a * 91, a * 164, a * 93, a * 136);
        e.closePath();
        $b(e, c[4], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 347, a * 162);
        e.bezierCurveTo(a * 357, a * 195, a * 376, a * 209, a * 387, a * 217);
        e.bezierCurveTo(a * 409, a * 201, a * 420, a * 181, a * 416, a * 166);
        e.bezierCurveTo(a * 410, a * 150, a * 412, a * 149, a * 408, a * 130);
        e.closePath();
        $b(e, c[4], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 134);
        e.bezierCurveTo(a * 79, a * 102, a * 92, a * 84, a * 108, a * 92);
        e.bezierCurveTo(a * 149, a * 108, a * 184, a * 111, a * 242, a * 111);
        e.bezierCurveTo(a * 294, a * 108, a * 341, a * 105, a * 386, a * 98);
        e.bezierCurveTo(a * 412, a * 91, a * 417, a * 86, a * 415, a * 133);
        e.bezierCurveTo(a * 413, a * 160, a * 413, a * 160, a * 368, a * 174);
        e.bezierCurveTo(a * 308, a * 184, a * 291, a * 185, a * 270, a * 186);
        e.bezierCurveTo(a * 264, a * 206, a * 262, a * 215, a * 253, a * 215);
        e.bezierCurveTo(a * 239, a * 217, a * 239, a * 211, a * 231, a * 186);
        e.bezierCurveTo(a * 178, a * 184, a * 156, a * 179, a * 112, a * 162);
        e.bezierCurveTo(a * 87, a * 151, a * 90, a * 144, a * 87, a * 137);
        e.closePath();
        $b(e, c[4], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 63, a * 98);
        e.bezierCurveTo(a * 84, a * 121, a * 109, a * 102, a * 124, a * 117);
        e.bezierCurveTo(a * 138, a * 136, a * 123, a * 165, a * 94, a * 150);
        e.bezierCurveTo(a * 66, a * 131, a * 64, a * 115, a * 63, a * 99);
        e.closePath();
        $b(e, c[3], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 449, a * 97);
        e.bezierCurveTo(a * 446, a * 143, a * 415, a * 151, a * 402, a * 155);
        e.bezierCurveTo(a * 386, a * 157, a * 373, a * 133, a * 391, a * 116);
        e.bezierCurveTo(a * 402, a * 106, a * 432, a * 124, a * 449, a * 97);
        e.closePath();
        $b(e, c[3], c[2], a * 10);
        return d;
    }
    function Qc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 108;
        d.height = a * 669;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 54, a * 389.5);
        Zb(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
        e.restore();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 579);
        e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
        e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
        e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
        e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141);
        e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
        e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
        e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
        e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
        e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42, a * 152);
        e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
        e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
        e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 28);
        e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
        e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
        e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
        e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 53);
        e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
        e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
        e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
        e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
        e.closePath();
        $b(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 54, a * 389.5);
        e.rotate(0);
        Zb(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
        e.restore();
        $b(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 579);
        e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
        e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
        e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
        e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
        e.closePath();
        $b(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141);
        e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
        e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
        e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
        e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
        e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
        e.closePath();
        $b(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42, a * 152);
        e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
        e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
        e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
        e.closePath();
        $b(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 28);
        e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
        e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
        e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
        e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
        e.closePath();
        $b(e, c[6], c[7], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 53);
        e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
        e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
        e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
        e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
        e.closePath();
        $b(e, c[8]);
        return d;
    }
    function _c(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 304;
        d.height = a * 278;
        e.translate(a * 10, a * 25);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 137);
        e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
        e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
        e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 52);
        e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
        e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
        e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
        e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
        e.closePath();
        $b(e, c[0]);
        e.translate(a * -10, a * -25);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 137);
        e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
        e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
        e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
        e.closePath();
        $b(e, c[1], c[2], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 52);
        e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
        e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
        e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
        e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
        e.closePath();
        $b(e, c[3], c[4], a * 15);
        return d;
    }
    function Fc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 98;
        e.translate(0, a * 4);
        if (wb === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            e.save();
            e.translate(a * 44, a * 50);
            e.rotate(1);
            nd(e, 8, a * 41, a * 10);
            $b(e, c[0]);
            e.restore();
        }
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(1);
        nd(e, 8, a * 41, a * 10);
        $b(e, c[1], c[2], a * 4);
        e.rotate(0.56);
        nd(e, 8, a * 33, a * 10);
        $b(e, c[3], c[4], a * 4);
        e.rotate(0.28);
        nd(e, 8, a * 24, a * 8);
        $b(e, c[5]);
        e.restore();
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Zb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        $b(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Zb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        $b(e, c[4], c[4], a * 2);
        id(e, a * 45, a * 29, a * 7);
        $b(e, c[5]);
        id(e, a * 45, a * 61, a * 7);
        $b(e, c[5]);
        id(e, a * 28, a * 45, a * 7);
        $b(e, c[5]);
        id(e, a * 62, a * 45, a * 7);
        $b(e, c[5]);
        return d;
    }
    function Rc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 128;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 7);
        e.bezierCurveTo(a * 169, a * 14, a * 212, a * 9, a * 241, a * 5);
        e.bezierCurveTo(a * 211, a * 63, a * 158, a * 92, a * 103, a * 109);
        e.bezierCurveTo(a * 73, a * 126, a * 54, a * 124, a * 6, a * 99);
        e.bezierCurveTo(a * 82, a * 63, a * 113, a * 35, a * 137, a * 8);
        e.closePath();
        $b(e, c[0], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 73, a * 124);
        e.bezierCurveTo(a * 111, a * 126, a * 162, a * 97, a * 203, a * 61);
        e.bezierCurveTo(a * 156, a * 98, a * 131, a * 106, a * 105, a * 109);
        e.bezierCurveTo(a * 99, a * 121, a * 87, a * 124, a * 72, a * 124);
        e.closePath();
        $b(e, c[2], c[3], a * 1);
        return d;
    }
    function jc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 98;
        e.translate(0, a * 4);
        if (wb === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            e.save();
            e.translate(a * 44, a * 50);
            e.rotate(0.2);
            nd(e, 9, a * 41, a * 10);
            e.restore();
            $b(e, c[0]);
        }
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(0.2);
        nd(e, 9, a * 41, a * 10);
        $b(e, c[1], c[2], a * 4);
        e.rotate(-0.32);
        nd(e, 9, a * 32, a * 10);
        $b(e, c[3], c[4], a * 4);
        e.rotate(0.68);
        nd(e, 9, a * 23, a * 8);
        $b(e, c[5], c[6], a * 6);
        e.restore();
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Zb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        $b(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Zb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        $b(e, c[4], c[4], a * 2);
        id(e, a * 45, a * 29, a * 7);
        $b(e, c[5]);
        id(e, a * 45, a * 61, a * 7);
        $b(e, c[5]);
        id(e, a * 28, a * 45, a * 7);
        $b(e, c[5]);
        id(e, a * 62, a * 45, a * 7);
        $b(e, c[5]);
        return d;
    }
    const Lc = 4;
    function Gc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 92;
        d.height = a * 108;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 10);
        e.bezierCurveTo(a * 37, a * 2, a * 49, a * 0, a * 61, a * 15);
        e.bezierCurveTo(a * 81, a * 31, a * 78, a * 25, a * 79, a * 37);
        e.bezierCurveTo(a * 76, a * 44, a * 81, a * 56, a * 85, a * 63);
        e.bezierCurveTo(a * 91, a * 71, a * 90, a * 78, a * 83, a * 84);
        e.bezierCurveTo(a * 60, a * 98, a * 67, a * 95, a * 57, a * 102);
        e.bezierCurveTo(a * 47, a * 106, a * 43, a * 106, a * 31, a * 98);
        e.bezierCurveTo(a * 22, a * 91, a * 17, a * 89, a * 7, a * 84);
        e.bezierCurveTo(a * 1, a * 77, a * 4, a * 73, a * 7, a * 60);
        e.bezierCurveTo(a * 11, a * 50, a * 5, a * 32, a * 15, a * 27);
        e.bezierCurveTo(a * 26, a * 18, a * 26, a * 24, a * 31, a * 10);
        e.closePath();
        $b(e, c[0], c[1], 4);
        return d;
    }
    function Wc(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 170;
        var a = b * 172;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        f.translate(i, j + b * 7);
        f.globalAlpha = c ? 0.5 : 0;
        id(f, 0, 0, b * 60);
        $b(f, d[0]);
        f.globalAlpha = 1;
        f.translate(0, b * -7);
        f.save();
        for (var h = 0; h < 10; h++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            nd(f, 3, b * 20, b * 4);
            $b(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.restore();
        id(f, 0, 0, b * 60);
        $b(f, d[3], d[4], b * 4);
        id(f, 0, 0, b * 40);
        $b(f, d[5]);
        id(f, 0, 0, b * 25);
        $b(f, d[6], d[7], b * 8);
        return e;
    }
    function Oc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 151;
        d.height = a * 80;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 133, a * 54);
        e.bezierCurveTo(a * 136, a * 18, a * 129, a * 18, a * 114, a * 13);
        e.bezierCurveTo(a * 51, a * 0, a * 36, a * 16, a * 34, a * 16);
        e.bezierCurveTo(a * 8, a * 28, a * 22, a * 56, a * 21, a * 57);
        e.closePath();
        $b(e, c[2], c[3], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 40);
        e.bezierCurveTo(a * 132, a * 35, a * 132, a * 30, a * 132, a * 29);
        e.bezierCurveTo(a * 145, a * 38, a * 144, a * 43, a * 137, a * 54);
        e.closePath();
        $b(e, c[0], c[1], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 33);
        e.bezierCurveTo(a * 24, a * 44, a * 215, a * 39, a * 23, a * 44);
        e.bezierCurveTo(a * 19, a * 49, a * 19, a * 49, a * 15, a * 54);
        e.bezierCurveTo(a * 4, a * 43, a * 10, a * 35, a * 20, a * 32);
        e.closePath();
        $b(e, c[0], c[1], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 18, a * 52);
        e.bezierCurveTo(a * 24, a * 31, a * 34, a * 25, a * 75, a * 23);
        e.bezierCurveTo(a * 130, a * 24, a * 129, a * 32, a * 134, a * 51);
        e.bezierCurveTo(a * 138, a * 70, a * 126, a * 72, a * 90, a * 73);
        e.bezierCurveTo(a * 18, a * 72, a * 15, a * 68, a * 18, a * 54);
        e.closePath();
        $b(e, c[0], c[1], 4);
        return d;
    }
    function Nc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 138;
        d.height = a * 133;
        e.globalAlpha = b ? 0.3 : 1;
        e.translate(0, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26, a * 79.640625);
        e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
        e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
        e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
        e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
        e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
        e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 8, a * 82.640625);
        e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
        e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
        e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
        e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
        e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 8, a * 73.640625);
        e.bezierCurveTo(a * 7, a * 23.640625, a * 33, a * 19.640625, a * 71, a * 17.640625);
        e.bezierCurveTo(a * 129, a * 19.640625, a * 130, a * 45.640625, a * 130, a * 76.640625);
        e.bezierCurveTo(a * 90, a * 63.640625, a * 85, a * 63.640625, a * 73, a * 63.640625);
        e.bezierCurveTo(a * 38, a * 63.640625, a * 33, a * 66.640625, a * 8, a * 73.640625);
        e.closePath();
        $b(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72, a * 28.640625);
        e.bezierCurveTo(a * 51, a * 25.640625, a * 56, a * 7.640625, a * 70, a * 5.640625);
        e.bezierCurveTo(a * 94, a * 7.640625, a * 87, a * 29.640625, a * 72, a * 28.640625);
        e.closePath();
        $b(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 26.640625);
        e.bezierCurveTo(a * 42, a * 29.640625, a * 43, a * 31.640625, a * 42, a * 37.640625);
        $b(e, undefined, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 26.640625);
        e.bezierCurveTo(a * 100, a * 28.640625, a * 98, a * 34.640625, a * 99, a * 38.640625);
        $b(e, Qr, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26, a * 79.640625);
        e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
        e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
        e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
        e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
        e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
        e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
        e.closePath();
        $b(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 8, a * 82.640625);
        e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
        e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
        e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
        e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
        e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
        e.closePath();
        $b(e, c[3], c[4], a * 4);
        return d;
    }
    const qc = 0;
    function Hc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 450;
        d.height = a * 260;
        e.translate(a * 10, a * 10);
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 9, a * 5);
            e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
            e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
            e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
            e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
            e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
            e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
            e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
            e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
            e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
            e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
            e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
            e.closePath();
            $b(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 5, a * 70);
            e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
            e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
            e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
            e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
            e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
            e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
            e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
            e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
            e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
            e.closePath();
            $b(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 19, a * 158);
            e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
            e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
            e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
            e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
            e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
            e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
            e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
            e.closePath();
            $b(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 4, a * 183);
            e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
            e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
            e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
            e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
            e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
            e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
            e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
            e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
            e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
            e.closePath();
            $b(e, b[3], b[3], a * 32);
            id(e, a * 41, a * 30, a * 14.7648230602334);
            $b(e, b[3], b[3], a * 32);
            id(e, a * 369, a * 30, a * 15.556349186104045);
            $b(e, b[3], b[3], a * 32);
            id(e, a * 364, a * 190, a * 15.620499351813308);
            $b(e, b[3], b[3], a * 32);
            id(e, a * 41, a * 186, a * 15.556349186104045);
            $b(e, b[3], b[3], a * 32);
        } else if (c == 2) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 9, a * 5);
            e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
            e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
            e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
            e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
            e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
            e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
            e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
            e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
            e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
            e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
            e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
            e.closePath();
            $b(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 5, a * 70);
            e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
            e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
            e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
            e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
            e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
            e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
            e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
            e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
            e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
            e.closePath();
            $b(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 19, a * 158);
            e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
            e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
            e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
            e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
            e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
            e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
            e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
            e.closePath();
            $b(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 4, a * 183);
            e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
            e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
            e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
            e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
            e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
            e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
            e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
            e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
            e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
            e.closePath();
            $b(e, b[3], b[3], a * 32);
            id(e, a * 41, a * 30, a * 14.7648230602334);
            $b(e, b[3], b[3], a * 32);
            id(e, a * 369, a * 30, a * 15.556349186104045);
            $b(e, b[3], b[3], a * 32);
            id(e, a * 364, a * 190, a * 15.620499351813308);
            $b(e, b[3], b[3], a * 32);
            id(e, a * 41, a * 186, a * 15.556349186104045);
            $b(e, b[3], b[3], a * 32);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9, a * 5);
        e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
        e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
        e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
        e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
        e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
        e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
        e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
        e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
        e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
        e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
        e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
        e.closePath();
        $b(e, b[1], b[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 5, a * 70);
        e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
        e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
        e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
        e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
        e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
        e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
        e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
        e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
        e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
        e.closePath();
        $b(e, b[2], b[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19, a * 158);
        e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
        e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
        e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
        e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
        e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
        e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
        e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
        e.closePath();
        $b(e, b[1], b[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 183);
        e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
        e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
        e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
        e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
        e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
        e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
        e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
        e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
        e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
        e.closePath();
        $b(e, b[2], b[0], a * 12);
        id(e, a * 41, a * 30, a * 14.7648230602334);
        $b(e, b[2], b[0], a * 12);
        id(e, a * 369, a * 30, a * 15.556349186104045);
        $b(e, b[2], b[0], a * 12);
        id(e, a * 364, a * 190, a * 15.620499351813308);
        $b(e, b[2], b[0], a * 12);
        id(e, a * 41, a * 186, a * 15.556349186104045);
        $b(e, b[2], b[0], a * 12);
        return d;
    }
    function Uc(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 170;
        e.height = b * 170;
        f.translate(0, b * 3);
        f.globalAlpha = c ? 0.5 : 1;
        f.save();
        f.translate(b * 85, b * 95);
        f.rotate(1.4);
        nd(f, 7, b * 60, b * 10);
        f.restore();
        $b(f, d[0]);
        f.globalAlpha = 1;
        f.translate(b * 85, b * 82);
        for (var g = 0; g < 10; g++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            nd(f, 3, b * 21, b * 4);
            $b(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.save();
        f.translate(b * 0, b * 0);
        f.rotate(0.2);
        nd(f, 9, b * 60, b * 10);
        $b(f, d[3], d[4], b * 4);
        f.rotate(-0.32);
        nd(f, 9, b * 38, b * 10);
        $b(f, d[5], d[6], b * 4);
        f.rotate(0.68);
        nd(f, 9, b * 20, b * 8);
        $b(f, d[7], d[8], b * 6);
        f.restore();
        return e;
    }
    function Yc(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 170;
        e.height = b * 170;
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 3);
        f.save();
        f.translate(b * 85, b * 95);
        f.rotate(1.4);
        nd(f, 7, b * 60, b * 10);
        f.restore();
        $b(f, d[0]);
        f.globalAlpha = 1;
        f.translate(b * 85, b * 82);
        for (var g = 0; g < 10; g++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            nd(f, 3, b * 21, b * 4);
            $b(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.save();
        f.translate(b * 0, b * 0);
        f.rotate(1);
        nd(f, 8, b * 60, b * 10);
        $b(f, d[3], d[4], b * 4);
        f.rotate(0.56);
        nd(f, 8, b * 40, b * 10);
        $b(f, d[5], d[6], b * 4);
        f.rotate(0.28);
        nd(f, 8, b * 28, b * 8);
        $b(f, d[7]);
        f.restore();
        return e;
    }
    function Kc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 450;
        d.height = a * 260;
        e.translate(a * 10, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        Zb(e, 0, 0, a * 400, a * 220, a * 30);
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9, a * 5);
        e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
        e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
        e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
        e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
        e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
        e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
        e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
        e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
        e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
        e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
        e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
        e.closePath();
        $b(e, c[2], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 5, a * 70);
        e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
        e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
        e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
        e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
        e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
        e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
        e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
        e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
        e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
        e.closePath();
        $b(e, c[3], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19, a * 158);
        e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
        e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
        e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
        e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
        e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
        e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
        e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
        e.closePath();
        $b(e, c[2], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 183);
        e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
        e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
        e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
        e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
        e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
        e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
        e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
        e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
        e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
        e.closePath();
        $b(e, c[3], c[1], a * 12);
        id(e, a * 41, a * 30, a * 14.7648230602334);
        $b(e, c[3], c[1], a * 12);
        id(e, a * 369, a * 30, a * 15.556349186104045);
        $b(e, c[3], c[1], a * 12);
        id(e, a * 364, a * 190, a * 15.620499351813308);
        $b(e, c[3], c[1], a * 12);
        id(e, a * 41, a * 186, a * 15.556349186104045);
        $b(e, c[3], c[1], a * 12);
        return d;
    }
    function Vc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 69;
        d.height = a * 120;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 30, a * 84);
        Zb(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
        e.restore();
        $b(e, c[0]);
        e.save();
        e.translate(a * 30, a * 45);
        Zb(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
        e.restore();
        $b(e, c[0]);
        e.save();
        e.translate(a * 30, a * 17);
        Zb(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
        e.restore();
        $b(e, c[0]);
        e.save();
        e.translate(a * 30, a * 31);
        Zb(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
        e.restore();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 36, a * 79.140625);
        Zb(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
        e.restore();
        $b(e, c[1], c[2], a * 3);
        e.save();
        e.translate(a * 35, a * 40.140625);
        Zb(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
        e.restore();
        $b(e, c[3], c[4], a * 3);
        e.save();
        e.translate(a * 35, a * 12.140625);
        Zb(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
        e.restore();
        $b(e, c[3], c[4], a * 3);
        e.save();
        e.translate(a * 34.5, a * 26.140625);
        Zb(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
        e.restore();
        $b(e, c[3], c[4], a * 3);
        return d;
    }
    function Xc(a, b, c) {
        var d = (e = document.createElement("canvas")).getContext("2d");
        if (c == 0) {
            e.width = a * 566;
            e.height = a * 429;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 312.625, a * 39.046875);
            d.bezierCurveTo(a * 456.625, a * 60.046875, a * 521.625, a * 134.046875, a * 528.625, a * 199.046875);
            d.bezierCurveTo(a * 540.625, a * 298.046875, a * 491.625, a * 364.046875, a * 405.625, a * 394.046875);
            d.bezierCurveTo(a * 270.625, a * 429.046875, a * 182.625, a * 395.046875, a * 100.625, a * 344.046875);
            d.bezierCurveTo(a * 15.625, a * 283.046875, a * 20.625, a * 195.046875, a * 33.625, a * 158.046875);
            d.bezierCurveTo(a * 56.625, a * 80.046875, a * 102.625, a * 46.046875, a * 183.625, a * 33.046875);
            d.bezierCurveTo(a * 225.625, a * 25.046875, a * 270.625, a * 30.046875, a * 312.625, a * 39.046875);
            d.closePath();
            $b(d, b[0]);
        } else if (c == 1) {
            d = (e = document.createElement("canvas")).getContext("2d");
            e.width = a * 511;
            e.height = a * 408;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 141.625, a * 49.296875);
            d.bezierCurveTo(a * 225.625, a * 10.296875, a * 320.625, a * 16.296875, a * 390.625, a * 39.296875);
            d.bezierCurveTo(a * 476.625, a * 71.296875, a * 483.625, a * 142.296875, a * 486.625, a * 197.296875);
            d.bezierCurveTo(a * 491.625, a * 289.296875, a * 462.625, a * 317.296875, a * 417.625, a * 351.296875);
            d.bezierCurveTo(a * 367.625, a * 385.296875, a * 313.625, a * 404.296875, a * 218.625, a * 395.296875);
            d.bezierCurveTo(a * 108.625, a * 381.296875, a * 81.625, a * 350.296875, a * 52.625, a * 305.296875);
            d.bezierCurveTo(a * 16.625, a * 244.296875, a * 23.625, a * 171.296875, a * 37.625, a * 145.296875);
            d.bezierCurveTo(a * 65.625, a * 84.296875, a * 97.625, a * 74.296875, a * 141.625, a * 49.296875);
            d.closePath();
            $b(d, b[0]);
        } else if (c == 2) {
            var e;
            d = (e = document.createElement("canvas")).getContext("2d");
            e.width = a * 504;
            e.height = a * 408;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 153.625, a * 46.296875);
            d.bezierCurveTo(a * 271.625, a * 17.296875, a * 345.625, a * 35.296875, a * 410.625, a * 71.296875);
            d.bezierCurveTo(a * 473.625, a * 109.296875, a * 478.625, a * 167.296875, a * 473.625, a * 205.296875);
            d.bezierCurveTo(a * 462.625, a * 295.296875, a * 438.625, a * 316.296875, a * 388.625, a * 345.296875);
            d.bezierCurveTo(a * 331.625, a * 374.296875, a * 273.625, a * 392.296875, a * 180.625, a * 387.296875);
            d.bezierCurveTo(a * 111.625, a * 380.296875, a * 86.625, a * 360.296875, a * 51.625, a * 309.296875);
            d.bezierCurveTo(a * 23.625, a * 267.296875, a * 25.625, a * 226.296875, a * 27.625, a * 175.296875);
            d.bezierCurveTo(a * 37.625, a * 99.296875, a * 88.625, a * 57.296875, a * 153.625, a * 46.296875);
            d.closePath();
            $b(d, b[0]);
        }
        return e;
    }
    function Zc(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 170;
        e.height = b * 170;
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.save();
        f.translate(b * 85, b * 88);
        f.rotate(1.4);
        nd(f, 7, b * 60, b * 10);
        f.restore();
        $b(f, d[0]);
        f.globalAlpha = 1;
        f.translate(b * 85, b * 80);
        for (var g = 0; g < 10; g++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            nd(f, 3, b * 21, b * 4);
            $b(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.save();
        f.translate(b * 0, b * 0);
        f.rotate(1.4);
        nd(f, 7, b * 60, b * 10);
        $b(f, d[3], d[4], b * 4);
        f.rotate(0.64);
        nd(f, 7, b * 40, b * 10);
        $b(f, d[5], d[6], b * 4);
        f.rotate(0.12);
        nd(f, 7, b * 23, b * 5);
        f.restore();
        $b(f, d[7]);
        return e;
    }
    const $c = 0;
    function em(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 173;
        c.height = a * 178;
        d.globalAlpha = 0.5;
        id(d, a * 86.5, a * 98, a * 80);
        $b(d, b[0]);
        d.globalAlpha = 1;
        id(d, a * 86.5, a * 89, a * 81);
        $b(d, b[1], b[2], a * 4);
        id(d, a * 86.5, a * 86, a * 59);
        $b(d, b[3], b[4], a * 4);
        d.globalAlpha = 0.5;
        id(d, a * 86.5, a * 95, a * 34);
        $b(d, b[0]);
        d.globalAlpha = 1;
        id(d, a * 86.5, a * 89, a * 34);
        $b(d, b[5]);
        return c;
    }
    function im(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 300;
        d.translate(a * -80, -20);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 200.5, a * 14.953125);
        d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
        d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
        d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
        d.closePath();
        $b(d, b[0]);
        return c;
    }
    function tm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 149;
        c.height = a * 153;
        d.globalAlpha = 0.5;
        id(d, a * 74.5, a * 85, a * 66);
        $b(d, b[0]);
        d.globalAlpha = 1;
        id(d, a * 75.5, a * 72.5, a * 67);
        $b(d, b[1], b[2], a * 4);
        id(d, a * 75.5, a * 73.5, a * 54);
        $b(d, b[3]);
        d.globalAlpha = 0.5;
        id(d, a * 74.5, a * 80.5, a * 39);
        $b(d, b[4]);
        d.globalAlpha = 1;
        id(d, a * 74.5, a * 74.5, a * 37);
        $b(d, b[5]);
        return c;
    }
    function nm(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 450;
        f.height = b * 260;
        var a = Kc(b * 1, true, d);
        g.drawImage(a, b * 0, b * 0);
        if (e == 1) {
            g.translate(b * 100, b * 0);
            id(g, b * 113, b * 120, b * 66);
            $b(g, undefined, d[4], b * 13);
            a = _t(b * 0.65, k, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
            g.rotate(0.7);
            g.drawImage(a, b * 133, b * -64);
            g.rotate(-0.7);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 70);
            g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
            g.closePath();
            $b(g, Lk, d[4], b * 13);
        } else if (e == 2) {
            g.translate(b * 100, b * 0);
            id(g, b * 113, b * 120, b * 66);
            $b(g, undefined, d[4], b * 13);
            g.translate(b * 30, b * 40);
            g.save();
            g.translate(b * 83.5, b * 66.5);
            Zb(g, b * -40.5, b * -29.5, b * 81, b * 59, b * 15);
            g.restore();
            $b(g, "#dff2f7", "#187484", b * 7);
            id(g, b * 22, b * 82, b * 12);
            $b(g, "#dff2f7", "#187484", b * 7);
            id(g, b * 145, b * 82, b * 12);
            $b(g, "#dff2f7", "#187484", b * 7);
            a = vu(b * 0.5, true, ["#80500b", "#7c4908"]);
            g.drawImage(a, b * 10, b * 85);
            a = vu(b * 0.5, true, ["#80500b", "#7c4908"]);
            g.drawImage(a, b * 50, b * 85);
            a = vu(b * 0.5, kk, ["#80500b", "#7c4908"]);
            g.drawImage(a, b * 90, b * 85);
            a = ec(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 90, b * 105);
            a = ec(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 90, b * 105);
            a = ec(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 30, b * 125);
            a = ec(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 50, b * 115);
            a = ec(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 30, b * 100);
            a = ec(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 80, b * 120);
            a = ec(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 110, b * 125);
            a = ec(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 120, b * 105);
        } else if (e == 3) {
            g.translate(b * 100, b * 0);
            id(g, b * 113, b * 120, b * 66);
            $b(g, Fa, d[4], b * 13);
            g.translate(b * 40, b * 50);
            g.save();
            g.translate(b * 71, b * 69);
            Zb(g, b * -30, b * -42, b * 60, b * 84, b * 10);
            g.restore();
            $b(g, ks, d[5], b * 4);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 42, b * 28);
            g.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
            g.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
            g.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
            g.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
            g.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
            g.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
            g.closePath();
            $b(g, d[5], d[5], b * 4);
            g.translate(b * -40, b * -50);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 70);
            g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
            g.closePath();
            $b(g, cn, d[4], b * 13);
        } else if (e == 4) {
            g.scale(1, 1);
            g.translate(b * 70, b * 50);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 23, b * 6);
            g.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
            $b(g, Sk, d[5], b * 14);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 59, b * 10);
            g.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
            $b(g, cn, d[5], b * 14);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 7, b * 55);
            g.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
            $b(g, cn, d[5], b * 14);
            g.translate(b * 10, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 123, b * 16);
            g.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, b * 17);
            g.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
            g.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
            $b(g, Lk, d[5], b * 14);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 72, b * 63);
            g.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
            $b(g, sl, d[5], b * 14);
            g.translate(b * 10, b * 10);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 141, b * 8);
            g.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
            g.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
            $b(g, undefined, d[5], b * 14);
            g.translate(b * 10, b * -10);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 205, b * 124);
            g.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, b * 14);
            g.bezierCurveTo(b * 239, b * 15, b * 250, b * 37, b * 249, b * 49);
            g.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
            $b(g, undefined, d[5], b * 14);
        }
        return f;
    }
    function om(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 139;
        d.height = a * 135;
        e.translate(0, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 77);
        e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
        e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
        e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
        e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
        e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 37);
        e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
        e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
        e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
        e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
        e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 63);
        e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
        e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
        e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
        e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
        e.closePath();
        $b(e, c[0]);
        e.translate(0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 77);
        e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
        e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
        e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
        e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
        e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
        e.closePath();
        $b(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 37);
        e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
        e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
        e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
        e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
        e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
        e.closePath();
        $b(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 63);
        e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
        e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
        e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
        e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
        e.closePath();
        $b(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 38);
        e.bezierCurveTo(a * 72.5, a * 52, a * 72.5, a * 52, a * 65, a * 66);
        e.bezierCurveTo(a * 47.5, a * 37, a * 47.5, a * 37, a * 30, a * 7);
        e.bezierCurveTo(a * 48, a * 4, a * 57, a * 4, a * 64, a * 10);
        e.closePath();
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 65);
        e.bezierCurveTo(a * 125, a * 73, a * 95.5, a * 69, a * 126, a * 73);
        e.bezierCurveTo(a * 119, a * 98, a * 106, a * 104, a * 98, a * 103);
        e.bezierCurveTo(a * 84.5, a * 102, a * 84.5, a * 102, a * 71, a * 101);
        e.bezierCurveTo(a * 64, a * 86, a * 64, a * 86, a * 57, a * 70);
        e.closePath();
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 69);
        e.bezierCurveTo(a * 64, a * 65, a * 46, a * 67, a * 65, a * 65);
        e.bezierCurveTo(a * 43.5, a * 94, a * 43.5, a * 94, a * 22, a * 123);
        e.bezierCurveTo(a * 8, a * 103, a * 8, a * 103, a * 9, a * 103);
        e.bezierCurveTo(a * 5, a * 98, a * 11, a * 89, a * 26, a * 70);
        e.closePath();
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26, a * 69);
        e.bezierCurveTo(a * 65, a * 60, a * 45, a * 65, a * 64, a * 60);
        e.bezierCurveTo(a * 63, a * 65, a * 63, a * 65, a * 62, a * 70);
        e.closePath();
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 38);
        e.bezierCurveTo(a * 68, a * 70, a * 75, a * 53, a * 70, a * 68);
        e.bezierCurveTo(a * 65, a * 67, a * 65, a * 67, a * 60, a * 65);
        e.closePath();
        $b(e, c[2]);
        return d;
    }
    function am(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 100;
        c.height = a * 100;
        d.globalAlpha = 0.5;
        d.fillStyle = b[0];
        d.fillRect(0, 0, c.width, c.height);
        return c;
    }
    function rm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 345;
        d.height = a * 250;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 58);
        e.bezierCurveTo(a * 100.5, a * 43, a * 100.5, a * 43, a * 96, a * 28);
        e.bezierCurveTo(a * 119.5, a * 33.5, a * 119.5, a * 33.5, a * 143, a * 39);
        e.bezierCurveTo(a * 170, a * 37, a * 177, a * 37, a * 188, a * 40);
        e.bezierCurveTo(a * 213, a * 33.5, a * 213, a * 33.5, a * 238, a * 27);
        e.bezierCurveTo(a * 231, a * 52, a * 234, a * 42.5, a * 230, a * 58);
        e.closePath();
        $b(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 108, a * 51);
        e.bezierCurveTo(a * 91, a * 55, a * 85, a * 44, a * 86, a * 29);
        e.bezierCurveTo(a * 62, a * 50, a * 78, a * 69, a * 92, a * 75);
        e.closePath();
        $b(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 249, a * 27);
        e.bezierCurveTo(a * 273, a * 49, a * 262, a * 68, a * 246, a * 77);
        e.bezierCurveTo(a * 231, a * 59, a * 236, a * 66.5, a * 226, a * 56);
        e.bezierCurveTo(a * 243, a * 53, a * 252, a * 43, a * 249, a * 28);
        e.closePath();
        $b(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87, a * 78);
        e.bezierCurveTo(a * 87, a * 59, a * 98, a * 46, a * 127, a * 48);
        e.bezierCurveTo(a * 176, a * 48.5, a * 176, a * 48.5, a * 225, a * 49);
        e.bezierCurveTo(a * 243, a * 49, a * 253, a * 59, a * 253, a * 76);
        e.bezierCurveTo(a * 211, a * 85.5, a * 211, a * 85.5, a * 169, a * 95);
        e.closePath();
        $b(e, c[5], c[6], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 105);
        e.bezierCurveTo(a * 56, a * 92, a * 59, a * 86, a * 65, a * 73);
        e.bezierCurveTo(a * 62.5, a * 61.5, a * 62.5, a * 61.5, a * 60, a * 50);
        e.bezierCurveTo(a * 99.5, a * 64.5, a * 99.5, a * 64.5, a * 139, a * 79);
        e.bezierCurveTo(a * 164, a * 77, a * 177, a * 76, a * 203, a * 78);
        e.bezierCurveTo(a * 242, a * 63.5, a * 242, a * 63.5, a * 281, a * 49);
        e.bezierCurveTo(a * 279, a * 60.5, a * 279, a * 60.5, a * 277, a * 72);
        e.bezierCurveTo(a * 286, a * 88, a * 286, a * 96, a * 287, a * 104);
        e.bezierCurveTo(a * 228.5, a * 127, a * 228.5, a * 127, a * 170, a * 150);
        e.closePath();
        $b(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 48, a * 130);
        e.bezierCurveTo(a * 61, a * 155, a * 63, a * 165, a * 56, a * 171);
        e.bezierCurveTo(a * 48, a * 177, a * 40, a * 171, a * 38, a * 178);
        e.bezierCurveTo(a * 33, a * 180, a * 37, a * 188, a * 47, a * 208);
        e.bezierCurveTo(a * 52, a * 221, a * 55, a * 222, a * 75, a * 229);
        e.bezierCurveTo(a * 91, a * 213, a * 98, a * 212, a * 112, a * 219);
        e.bezierCurveTo(a * 167, a * 225, a * 187, a * 224, a * 222, a * 220);
        e.bezierCurveTo(a * 244, a * 214, a * 247, a * 213, a * 263, a * 229);
        e.bezierCurveTo(a * 295, a * 220, a * 291, a * 215, a * 301, a * 194);
        e.bezierCurveTo(a * 308, a * 178, a * 309, a * 176, a * 302, a * 173);
        e.bezierCurveTo(a * 290, a * 177, a * 289, a * 177, a * 283, a * 169);
        e.bezierCurveTo(a * 279, a * 163, a * 279, a * 161, a * 290, a * 130);
        e.bezierCurveTo(a * 270, a * 127, a * 270, a * 127, a * 250, a * 124);
        e.bezierCurveTo(a * 209, a * 137.5, a * 209, a * 137.5, a * 168, a * 151);
        e.bezierCurveTo(a * 121, a * 135, a * 121, a * 135, a * 74, a * 119);
        e.closePath();
        $b(e, c[1], c[2], a * 8);
        e.globalCompositeOperation = "destination-out";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 133, a * 158);
        e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
        e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
        e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
        e.closePath();
        $b(e, c[7], c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 215, a * 146);
        e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
        e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
        e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
        e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
        e.closePath();
        $b(e, c[7], c[8], a * 8);
        e.globalCompositeOperation = "source-over";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 133, a * 158);
        e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
        e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
        e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
        e.closePath();
        $b(e, hg, c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 215, a * 146);
        e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
        e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
        e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
        e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
        e.closePath();
        $b(e, undefined, c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 66);
        e.bezierCurveTo(a * 57, a * 107, a * 63, a * 96, a * 120, a * 106);
        e.bezierCurveTo(a * 154, a * 112, a * 163, a * 116, a * 174, a * 135);
        e.bezierCurveTo(a * 180, a * 109, a * 191, a * 113, a * 237, a * 103);
        e.bezierCurveTo(a * 276, a * 100, a * 289, a * 94, a * 301, a * 67);
        e.bezierCurveTo(a * 317, a * 112, a * 301, a * 141, a * 274, a * 139);
        e.bezierCurveTo(a * 204, a * 166, a * 197, a * 169, a * 173, a * 183);
        e.bezierCurveTo(a * 170, a * 183, a * 170, a * 183, a * 167, a * 183);
        e.bezierCurveTo(a * 132, a * 160, a * 112, a * 156, a * 73, a * 141);
        e.bezierCurveTo(a * 43, a * 146, a * 27, a * 120, a * 39, a * 66);
        e.closePath();
        $b(e, c[7], c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 185);
        e.bezierCurveTo(a * 115, a * 200, a * 118, a * 206, a * 124, a * 212);
        e.bezierCurveTo(a * 133, a * 223, a * 132, a * 231, a * 121, a * 230);
        e.bezierCurveTo(a * 108, a * 226, a * 108, a * 215, a * 107, a * 209);
        e.bezierCurveTo(a * 106, a * 201, a * 110, a * 196, a * 114, a * 185);
        e.closePath();
        $b(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226, a * 186);
        e.bezierCurveTo(a * 234, a * 201, a * 238, a * 209, a * 228, a * 225);
        e.bezierCurveTo(a * 223, a * 233, a * 213, a * 233, a * 211, a * 226);
        e.bezierCurveTo(a * 206, a * 219, a * 217, a * 216, a * 221, a * 207);
        e.bezierCurveTo(a * 225, a * 196, a * 225, a * 191, a * 226, a * 186);
        e.closePath();
        $b(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 172, a * 110);
        e.bezierCurveTo(a * 189, a * 153, a * 192, a * 160, a * 188, a * 175);
        e.bezierCurveTo(a * 183, a * 190, a * 176, a * 197, a * 165, a * 191);
        e.bezierCurveTo(a * 153, a * 181, a * 152, a * 166, a * 157, a * 151);
        e.bezierCurveTo(a * 164.5, a * 131, a * 164.5, a * 131, a * 172, a * 111);
        e.closePath();
        $b(e, c[3], c[4], a * 8);
        return d;
    }
    function sm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 253;
        c.height = a * 260;
        d.globalAlpha = 0.5;
        id(d, a * 126.5, a * 134, a * 119);
        $b(d, b[0]);
        d.globalAlpha = 1;
        id(d, a * 126.5, a * 124, a * 119);
        $b(d, b[1], b[2], a * 4);
        id(d, a * 126.5, a * 127, a * 100);
        $b(d, b[3]);
        d.globalAlpha = 0.5;
        id(d, a * 126.5, a * 135, a * 81);
        $b(d, b[0]);
        d.globalAlpha = 1;
        id(d, a * 126.5, a * 125, a * 84);
        $b(d, b[4], b[5], a * 4);
        id(d, a * 126.5, a * 125, a * 61);
        $b(d, b[6], b[7], a * 4);
        d.globalAlpha = 0.5;
        id(d, a * 126.5, a * 134, a * 40);
        $b(d, b[8]);
        d.globalAlpha = 1;
        id(d, a * 126.5, a * 125, a * 40);
        $b(d, b[9]);
        return c;
    }
    const hm = 0;
    function lm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 147;
        c.height = a * 172;
        d.globalAlpha = 0.5;
        d.translate(0, a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 8, a * 50);
        d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
        d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
        d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
        d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
        d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
        d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
        d.closePath();
        $b(d, b[0]);
        d.translate(0, a * -8);
        d.globalAlpha = 1;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 8, a * 50);
        d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
        d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
        d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
        d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
        d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
        d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
        d.closePath();
        $b(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 14, a * 57);
        d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
        d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
        $b(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 93, a * 47);
        d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
        d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
        $b(d, b[1], b[2], a * 4);
        id(d, a * 51, a * 91, a * 9);
        $b(d, b[3]);
        id(d, a * 95, a * 91, a * 9);
        $b(d, b[3]);
        id(d, a * 91, a * 89, a * 4);
        $b(d, b[4]);
        id(d, a * 47, a * 89, a * 4);
        $b(d, b[4]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 54, a * 133);
        d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
        d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
        d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
        d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
        d.closePath();
        $b(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 65.25, a * 135);
        d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
        d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
        d.closePath();
        $b(d, b[6]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 74, a * 145);
        d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
        d.closePath();
        $b(d, undefined, b[6], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 19, a * 58);
        d.bezierCurveTo(a * 10, a * 38, a * 18, a * 33, a * 28, a * 34);
        d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
        d.closePath();
        $b(d, b[6]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 100, a * 51);
        d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
        d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
        d.closePath();
        $b(d, b[6]);
        return c;
    }
    function gm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 48;
        c.height = a * 47;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 7.1875, a * 25.434661865234375);
        d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
        d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
        d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
        d.closePath();
        $b(d, b[0]);
        return c;
    }
    function um(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 320;
        d.translate(a * -60, a * -15);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 188.5, a * 3.953125);
        d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
        d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
        d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
        d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
        d.closePath();
        $b(d, b[0]);
        return c;
    }
    function bm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 161;
        c.height = a * 190;
        d.globalAlpha = 0.5;
        d.translate(0, 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 9, a * 93);
        d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
        d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
        d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
        d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
        d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
        d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
        d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
        d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
        d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
        d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
        d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
        d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
        d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
        d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
        d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
        d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
        d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
        d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
        d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
        d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
        d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
        d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
        d.closePath();
        $b(d, b[0]);
        d.globalAlpha = 1;
        d.translate(0, -8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 9, a * 93);
        d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
        d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
        d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
        d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
        d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
        d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
        d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
        d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
        d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
        d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
        d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
        d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
        d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
        d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
        d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
        d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
        d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
        d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
        d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
        d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
        d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
        d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
        d.closePath();
        $b(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 28, a * 63);
        d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
        d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
        d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
        d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
        d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
        d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
        d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
        d.closePath();
        $b(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 99, a * 55);
        d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
        d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
        d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
        d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
        d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
        d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
        d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
        d.closePath();
        $b(d, b[3]);
        id(d, a * 103, a * 110, a * 11);
        $b(d, b[4]);
        id(d, a * 55, a * 111, a * 11);
        $b(d, b[4]);
        id(d, a * 99, a * 107, a * 5);
        $b(d, b[1]);
        id(d, a * 51, a * 108, a * 5);
        $b(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 31, a * 121);
        d.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
        d.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
        d.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
        d.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
        d.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
        d.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
        d.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
        d.closePath();
        $b(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.translate(-2, 0);
        d.moveTo(a * 71, a * 162);
        d.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
        d.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
        d.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
        d.closePath();
        $b(d, b[3]);
        d.translate(2, 0);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 9, a * 93);
        d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
        d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
        d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
        d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
        d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
        d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
        d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
        d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
        d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
        d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
        d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
        d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
        d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
        d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
        d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
        d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
        d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
        d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
        d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
        d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
        d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
        d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
        d.closePath();
        $b(d, Mq, b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 25, a * 63);
        d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
        d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
        d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
        $b(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 91, a * 53);
        d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
        d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
        d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
        $b(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 31, a * 63);
        d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
        d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
        d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
        d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
        d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
        d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
        d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
        d.closePath();
        $b(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 99, a * 55);
        d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
        d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
        d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
        d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
        d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
        d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
        d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
        d.closePath();
        $b(d, b[3]);
        return c;
    }
    function dm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 20;
        c.height = a * 35;
        Zb(d, 0, 0, 20, 35, 7);
        $b(d, b[0]);
        return c;
    }
    function vm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 330;
        d.translate(a * -60, a * -10);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 188.5, a * 7.953125);
        d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
        d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
        d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
        d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
        d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
        d.closePath();
        $b(d, b[0]);
        return c;
    }
    function cm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 33;
        c.height = a * 35;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 12.75, a * 7.1328125);
        d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
        d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
        d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
        d.closePath();
        $b(d, b[0]);
        return c;
    }
    function mm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 280;
        d.translate(a * -100, a * -20);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 228.5, a * 331.953125);
        d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
        d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
        d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
        d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
        d.closePath();
        $b(d, b[0]);
        return c;
    }
    function pm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 300;
        d.translate(a * -200, a * -40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 344, a * 18.40625);
        d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
        d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
        d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
        d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
        d.closePath();
        $b(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 335, a * 38.072906494140625);
        d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
        d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
        d.closePath();
        $b(d, b[0]);
        return c;
    }
    const Cm = 0;
    function Tm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 271;
        c.height = a * 366;
        d.globalAlpha = 0.5;
        d.translate(0, a * 10);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 99);
        d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
        d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
        d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
        d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
        d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
        d.closePath();
        $b(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 73, a * 270);
        d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
        d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
        d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
        d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
        d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
        d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
        d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
        d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
        d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
        d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
        d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
        d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
        d.closePath();
        $b(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 252);
        d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
        d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
        d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
        d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
        d.closePath();
        $b(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 84, a * 257);
        d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
        d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
        d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
        d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
        d.closePath();
        $b(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 125, a * 65);
        d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
        d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
        d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
        d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
        d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
        d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
        d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
        d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
        d.closePath();
        $b(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 37);
        d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
        d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
        d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
        d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
        d.closePath();
        $b(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 146, a * 34);
        d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
        d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
        d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
        d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
        d.closePath();
        $b(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 143, a * 69);
        d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
        d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
        d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
        d.closePath();
        $b(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 149, a * 92);
        d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
        d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
        d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
        d.closePath();
        $b(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 111, a * 61);
        d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
        d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
        d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
        d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
        d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
        d.closePath();
        $b(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107, a * 81);
        d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
        d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
        d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
        d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
        d.closePath();
        $b(d, b[0]);
        d.globalAlpha = 1;
        d.translate(0, a * -10);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 99);
        d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
        d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
        d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
        d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
        d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
        d.closePath();
        $b(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 73, a * 270);
        d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
        d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
        d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
        d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
        d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
        d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
        d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
        d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
        d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
        d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
        d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
        d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
        d.closePath();
        $b(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 252);
        d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
        d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
        d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
        d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
        d.closePath();
        $b(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 84, a * 257);
        d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
        d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
        d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
        d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
        d.closePath();
        $b(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 125, a * 65);
        d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
        d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
        d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
        d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
        d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
        d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
        d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
        d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
        d.closePath();
        $b(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 37);
        d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
        d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
        d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
        d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
        d.closePath();
        $b(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 146, a * 34);
        d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
        d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
        d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
        d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
        d.closePath();
        $b(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 143, a * 69);
        d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
        d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
        d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
        d.closePath();
        $b(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 149, a * 92);
        d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
        d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
        d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
        d.closePath();
        $b(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 111, a * 61);
        d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
        d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
        d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
        d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
        d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
        d.closePath();
        $b(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107, a * 81);
        d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
        d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
        d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
        d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
        d.closePath();
        $b(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 99);
        d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
        d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
        d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
        d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
        d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
        d.closePath();
        $b(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 73, a * 270);
        d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
        d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
        d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
        d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
        d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
        d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
        d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
        d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
        d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
        d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
        d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
        d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
        d.closePath();
        $b(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 252);
        d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
        d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
        d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
        d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
        d.closePath();
        $b(d, b[2]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 84, a * 257);
        d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
        d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
        d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
        d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
        d.closePath();
        $b(d, b[1]);
        id(d, a * 102, a * 269, a * 11);
        $b(d, b[3]);
        id(d, a * 98, a * 266, a * 5);
        $b(d, b[6]);
        id(d, a * 168, a * 269, a * 11);
        $b(d, b[3]);
        id(d, a * 164, a * 266, a * 5);
        $b(d, b[6]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 125, a * 65);
        d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
        d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
        d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
        d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
        d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
        d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
        d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
        d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
        d.closePath();
        $b(d, b[2]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 235);
        d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
        d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
        d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
        d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
        d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
        d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
        d.closePath();
        $b(d, b[4]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 132, a * 219);
        d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
        d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
        d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
        d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
        d.closePath();
        $b(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 179);
        d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
        d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
        d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
        d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
        d.closePath();
        $b(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 143);
        d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
        d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
        d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
        d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
        d.closePath();
        $b(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 115);
        d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
        d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
        d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
        d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
        d.closePath();
        $b(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 94);
        d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
        d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
        d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
        d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
        d.closePath();
        $b(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130, a * 279);
        d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
        d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
        d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
        d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
        d.closePath();
        $b(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 147, a * 303);
        d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
        d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
        d.closePath();
        $b(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 303);
        d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
        d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
        d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
        d.closePath();
        $b(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 89, a * 280);
        d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
        d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
        d.closePath();
        $b(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 94, a * 290);
        d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
        d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
        d.closePath();
        $b(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 163, a * 295);
        d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
        d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
        d.closePath();
        $b(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 172, a * 286);
        d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
        d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
        d.closePath();
        $b(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 37);
        d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
        d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
        d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
        d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
        d.closePath();
        $b(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 146, a * 34);
        d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
        d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
        d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
        d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
        d.closePath();
        $b(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 143, a * 69);
        d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
        d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
        d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
        d.closePath();
        $b(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 149, a * 92);
        d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
        d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
        d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
        d.closePath();
        $b(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 111, a * 61);
        d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
        d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
        d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
        d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
        d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
        d.closePath();
        $b(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107, a * 81);
        d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
        d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
        d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
        d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
        d.closePath();
        $b(d, b[7]);
        return c;
    }
    function fm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 180;
        d.height = a * 120;
        e.translate(a * -65, a * -35);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 150.5, a * 63.84375);
        Zb(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
        e.restore();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80.5, a * 75.34375);
        e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
        e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
        e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 206.5, a * 71.34375);
        e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
        e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
        e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 136.5, a * 75.34375);
        e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
        e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
        e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
        e.closePath();
        $b(e, c[0]);
        e.save();
        e.translate(a * 152.5, a * 80.84375);
        e.rotate(3.12);
        Zb(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
        e.restore();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 150.5, a * 63.84375);
        Zb(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
        e.restore();
        $b(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80.5, a * 75.34375);
        e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
        e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
        e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
        e.closePath();
        $b(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 206.5, a * 71.34375);
        e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
        e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
        e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
        e.closePath();
        $b(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 136.5, a * 75.34375);
        e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
        e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
        e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
        e.closePath();
        $b(e, c[1], c[2], a * 4);
        e.save();
        e.translate(a * 152.5, a * 80.84375);
        e.rotate(3.12);
        Zb(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
        e.restore();
        $b(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 83.5, a * 73.34375);
        e.bezierCurveTo(a * 93.5, a * 70.34375, a * 105.5, a * 70.34375, a * 124.5, a * 72.34375);
        e.bezierCurveTo(a * 132.5, a * 78.34375, a * 162.5, a * 80.34375, a * 176.5, a * 76.34375);
        e.bezierCurveTo(a * 194.5, a * 69.34375, a * 192.5, a * 68.34375, a * 199.5, a * 63.34375);
        e.bezierCurveTo(a * 204.5, a * 63.34375, a * 204.5, a * 63.34375, a * 209.5, a * 63.34375);
        e.bezierCurveTo(a * 153.5, a * 82.34375, a * 157.5, a * 85.34375, a * 209.5, a * 63.34375);
        e.bezierCurveTo(a * 194.5, a * 88.34375, a * 162.5, a * 87.34375, a * 149.5, a * 88.34375);
        e.bezierCurveTo(a * 129.5, a * 81.34375, a * 103.5, a * 75.34375, a * 83.5, a * 82.34375);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137.5, a * 65.34375);
        e.bezierCurveTo(a * 150.5, a * 76.34375, a * 170.5, a * 71.34375, a * 174.5, a * 65.34375);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 221.5, a * 85.34375);
        e.bezierCurveTo(a * 211.5, a * 79.34375, a * 191.5, a * 88.34375, a * 181.5, a * 96.34375);
        e.bezierCurveTo(a * 201.5, a * 96.34375, a * 201.5, a * 96.34375, a * 221.5, a * 96.34375);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 89.34375);
        e.bezierCurveTo(a * 102.5, a * 87.34375, a * 112.5, a * 88.34375, a * 119.5, a * 97.34375);
        e.bezierCurveTo(a * 102, a * 98.34375, a * 102, a * 98.34375, a * 84.5, a * 99.34375);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 208.5, a * 104.34375);
        e.bezierCurveTo(a * 208.5, a * 110.34375, a * 208.5, a * 110.34375, a * 208.5, a * 116.34375);
        e.bezierCurveTo(a * 211.5, a * 110.34375, a * 211.5, a * 110.34375, a * 214.5, a * 104.34375);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 117.34375);
        e.bezierCurveTo(a * 92, a * 118.84375, a * 92, a * 118.84375, a * 96.5, a * 120.34375);
        e.bezierCurveTo(a * 93, a * 123.84375, a * 93, a * 123.84375, a * 89.5, a * 127.34375);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107.5, a * 51.34375);
        e.bezierCurveTo(a * 122.5, a * 54.34375, a * 122.5, a * 54.34375, a * 137.5, a * 57.34375);
        e.bezierCurveTo(a * 118, a * 57.34375, a * 118, a * 57.34375, a * 98.5, a * 57.34375);
        e.bezierCurveTo(a * 94.5, a * 54.84375, a * 94.5, a * 54.84375, a * 90.5, a * 52.34375);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 170.5, a * 52.34375);
        e.bezierCurveTo(a * 179.5, a * 51.84375, a * 179.5, a * 51.84375, a * 188.5, a * 51.34375);
        e.bezierCurveTo(a * 187.5, a * 53.84375, a * 187.5, a * 53.84375, a * 186.5, a * 56.34375);
        e.bezierCurveTo(a * 177, a * 56.34375, a * 177, a * 56.34375, a * 167.5, a * 56.34375);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80.5, a * 69.34375);
        e.bezierCurveTo(a * 86.5, a * 70.34375, a * 86.5, a * 70.34375, a * 92.5, a * 71.34375);
        e.bezierCurveTo(a * 86, a * 73.34375, a * 86, a * 73.34375, a * 79.5, a * 75.34375);
        e.closePath();
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222.5, a * 75.34375);
        e.bezierCurveTo(a * 214.5, a * 76.34375, a * 214.5, a * 76.34375, a * 206.5, a * 77.34375);
        e.bezierCurveTo(a * 216.5, a * 79.34375, a * 216.5, a * 79.34375, a * 226.5, a * 81.34375);
        e.closePath();
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 100.34375);
        e.bezierCurveTo(a * 128, a * 97.34375, a * 128, a * 97.34375, a * 139.5, a * 94.34375);
        e.bezierCurveTo(a * 140, a * 96.84375, a * 140, a * 96.84375, a * 140.5, a * 99.34375);
        e.closePath();
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 112.5, a * 48.34375);
        e.bezierCurveTo(a * 115.5, a * 50.84375, a * 115.5, a * 50.84375, a * 118.5, a * 53.34375);
        e.bezierCurveTo(a * 131, a * 50.84375, a * 131, a * 50.84375, a * 143.5, a * 48.34375);
        e.closePath();
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 216.5, a * 109.34375);
        e.bezierCurveTo(a * 213, a * 114.84375, a * 213, a * 114.84375, a * 209.5, a * 120.34375);
        e.bezierCurveTo(a * 212, a * 118.84375, a * 212, a * 118.84375, a * 214.5, a * 117.34375);
        e.closePath();
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86.5, a * 133.34375);
        e.bezierCurveTo(a * 89, a * 127.34375, a * 89, a * 127.34375, a * 91.5, a * 121.34375);
        e.bezierCurveTo(a * 92.5, a * 127.34375, a * 92.5, a * 127.34375, a * 93.5, a * 133.34375);
        e.closePath();
        $b(e, c[2]);
        return d;
    }
    function zm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 142;
        d.height = a * 118;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 27.3671875);
        e.bezierCurveTo(a * 128, a * 9.3671875, a * 125, a * 13.3671875, a * 126, a * 21.3671875);
        e.bezierCurveTo(a * 126, a * 33.3671875, a * 119, a * 43.3671875, a * 118, a * 42.3671875);
        e.closePath();
        $b(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 23.3671875);
        e.bezierCurveTo(a * 17, a * 15.3671875, a * 16, a * 14.3671875, a * 17, a * 20.3671875);
        e.bezierCurveTo(a * 22, a * 33.3671875, a * 20, a * 27.3671875, a * 24, a * 34.3671875);
        e.closePath();
        $b(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 70.5, a * 34.8671875);
        e.rotate(0);
        Zb(e, a * -49.5, a * -21.5, a * 99, a * 43, a * 15);
        e.restore();
        $b(e, c[0], c[1], a * 4);
        e.save();
        e.translate(a * 71, a * 40.8671875);
        e.rotate(0);
        Zb(e, a * -49, a * -12.5, a * 98, a * 25, a * 15);
        e.restore();
        $b(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19.800003051757812, a * 75.95625305175781);
        e.bezierCurveTo(a * 19.300003051757812, a * 82.95625305175781, a * 19.300003051757812, a * 82.95625305175781, a * 18.800003051757812, a * 89.95625305175781);
        e.bezierCurveTo(a * 38.80000305175781, a * 115.95625305175781, a * 37.80000305175781, a * 104.95625305175781, a * 31.800003051757812, a * 91.95625305175781);
        e.closePath();
        $b(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 119.80000305175781, a * 75.95625305175781);
        e.bezierCurveTo(a * 120.80000305175781, a * 82.95625305175781, a * 120.80000305175781, a * 82.95625305175781, a * 121.80000305175781, a * 89.95625305175781);
        e.bezierCurveTo(a * 101.80000305175781, a * 111.95625305175781, a * 99.80000305175781, a * 111.95625305175781, a * 112.80000305175781, a * 81.95625305175781);
        e.closePath();
        $b(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17.800003051757812, a * 49.15625);
        e.bezierCurveTo(a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 79.15625);
        e.bezierCurveTo(a * 23.300003051757812, a * 85.15625, a * 23.300003051757812, a * 85.15625, a * 28.800003051757812, a * 91.15625);
        e.bezierCurveTo(a * 36.80000305175781, a * 96.15625, a * 32.80000305175781, a * 91.15625, a * 28.800003051757812, a * 77.15625);
        e.bezierCurveTo(a * 33.80000305175781, a * 65.15625, a * 33.80000305175781, a * 65.15625, a * 38.80000305175781, a * 53.15625);
        e.closePath();
        $b(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123.80000305175781, a * 53.95625305175781);
        e.bezierCurveTo(a * 121.80000305175781, a * 77.95625305175781, a * 121.80000305175781, a * 74.95625305175781, a * 121.80000305175781, a * 78.95625305175781);
        e.bezierCurveTo(a * 115.80000305175781, a * 84.95625305175781, a * 115.80000305175781, a * 84.95625305175781, a * 109.80000305175781, a * 90.95625305175781);
        e.bezierCurveTo(a * 102.80000305175781, a * 93.95625305175781, a * 105.80000305175781, a * 86.95625305175781, a * 110.80000305175781, a * 76.95625305175781);
        e.bezierCurveTo(a * 107.30000305175781, a * 65.45625305175781, a * 103.80000305175781, a * 53.95625305175781, a * 103.80000305175781, a * 53.95625305175781);
        e.closePath();
        $b(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 18, a * 56.3671875);
        e.bezierCurveTo(a * 70, a * 56.8671875, a * 70, a * 56.8671875, a * 122, a * 57.3671875);
        e.bezierCurveTo(a * 137, a * 20.3671875, a * 137, a * 16.3671875, a * 126, a * 22.3671875);
        e.bezierCurveTo(a * 115.5, a * 34.3671875, a * 115.5, a * 34.3671875, a * 105, a * 46.3671875);
        e.bezierCurveTo(a * 70.5, a * 46.3671875, a * 70.5, a * 46.3671875, a * 36, a * 46.3671875);
        e.bezierCurveTo(a * 4, a * 14.3671875, a * 7, a * 18.3671875, a * 8, a * 27.3671875);
        e.bezierCurveTo(a * 12.5, a * 41.8671875, a * 12.5, a * 41.8671875, a * 17, a * 56.3671875);
        e.closePath();
        $b(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 68.30000305175781, a * 41.45625305175781);
        e.rotate(0.76);
        Zb(e, a * -20.5, a * -20.5, a * 41, a * 41, a * 10);
        e.restore();
        $b(e, hg, c[5], a * 4);
        e.save();
        e.translate(a * 68.80000305175781, a * 44.45625305175781);
        e.rotate(0.76);
        Zb(e, a * -21, a * -20.5, a * 42, a * 41, a * 10);
        e.restore();
        $b(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 69.80000305175781, a * 44.556243896484375);
        e.rotate(0.76);
        Zb(e, a * -10, a * -10, a * 20, a * 20, a * 5);
        e.restore();
        $b(e, c[6], c[7], a * 4);
        return d;
    }
    function ym(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 145;
        d.height = a * 120;
        e.beginPath();
        e.scale(0.6, 0.6);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 18, a * -8);
        e.moveTo(a * 101, a * 72);
        e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
        e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
        e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
        e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
        e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
        e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
        e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
        e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
        e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
        e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
        e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
        e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
        e.closePath();
        $b(e, c[4], c[5], a * 4);
        e.beginPath();
        e.scale(1.1, 1.1);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -9, a * 4);
        e.moveTo(a * 101, a * 72);
        e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
        e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
        e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
        e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
        e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
        e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
        e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
        e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
        e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
        e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
        e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
        e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
        e.closePath();
        $b(e, c[4], c[5], a * 4);
        e.scale(1.1, 1.1);
        e.translate(a * -9, a * 4);
        e.save();
        e.translate(a * 100, a * 73.06874084472656);
        e.rotate(0);
        Zb(e, a * -61, a * -38.5, a * 122, a * 40, a * 20);
        e.restore();
        $b(e, c[1], c[2], a * 4);
        e.save();
        e.translate(a * 100, a * 71.36874389648438);
        e.rotate(0);
        Zb(e, a * -60.5, a * -18, a * 121, a * 30, a * 20);
        e.restore();
        $b(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 144, a * 80);
        e.bezierCurveTo(a * 152, a * 100, a * 152, a * 101, a * 153, a * 102);
        e.bezierCurveTo(a * 159, a * 100, a * 159, a * 100, a * 160, a * 100);
        e.bezierCurveTo(a * 161, a * 84, a * 161, a * 84, a * 162, a * 68);
        e.closePath();
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 57, a * 75);
        e.bezierCurveTo(a * 48, a * 101, a * 53, a * 89, a * 48, a * 102);
        e.bezierCurveTo(a * 44, a * 100, a * 44, a * 100, a * 39, a * 97);
        e.bezierCurveTo(a * 39, a * 83, a * 39, a * 83, a * 39, a * 69);
        e.closePath();
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 101, a * 72);
        e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
        e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
        e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
        e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
        e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
        e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
        e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
        e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
        e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
        e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
        e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
        e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
        e.closePath();
        $b(e, c[4], c[5], a * 4);
        e.translate(0, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115.5, a * 116.07290649414062);
        e.bezierCurveTo(a * 159.5, a * 99.07290649414062, a * 159.5, a * 98.07290649414062, a * 159.5, a * 98.07290649414062);
        e.bezierCurveTo(a * 155.5, a * 116.07290649414062, a * 159.5, a * 116.07290649414062, a * 159.5, a * 118.07290649414062);
        e.bezierCurveTo(a * 147.5, a * 130.07290649414062, a * 136.5, a * 132.07290649414062, a * 115.5, a * 138.07290649414062);
        e.closePath();
        $b(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39.5, a * 96.07290649414062);
        e.bezierCurveTo(a * 85.5, a * 114.07290649414062, a * 62.5, a * 105.57290649414062, a * 85.5, a * 115.07290649414062);
        e.bezierCurveTo(a * 85.5, a * 125.57290649414062, a * 85.5, a * 125.57290649414062, a * 85.5, a * 136.07290649414062);
        e.bezierCurveTo(a * 51.5, a * 129.07290649414062, a * 51.5, a * 125.07290649414062, a * 41.5, a * 118.07290649414062);
        e.bezierCurveTo(a * 44.5, a * 106.07290649414062, a * 42.5, a * 103.07290649414062, a * 40.5, a * 96.07290649414062);
        e.closePath();
        $b(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 80);
        e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
        e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
        e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
        e.closePath();
        $b(e, c[3], c[2], a * 4);
        e.scale(0.5, 0.5);
        e.translate(a * 100, a * 71);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 80);
        e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
        e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
        e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
        e.closePath();
        $b(e, c[6], c[2], a * 4);
        return d;
    }
    function wm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 85;
        c.height = a * 145;
        d.translate(a * -20, a * -95);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 50, a * 105);
        d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
        d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
        d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
        d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
        d.closePath();
        $b(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 44, a * 106);
        d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
        d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
        d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
        d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
        d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
        d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
        d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
        d.closePath();
        $b(d, b[2], b[3], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 30, a * 159);
        d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
        d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
        d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
        d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
        d.closePath();
        $b(d, b[2]);
        return c;
    }
    function Pm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 85;
        c.height = a * 145;
        d.translate(a * -165, a * -95);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217, a * 103);
        d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
        d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
        d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
        d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
        d.closePath();
        $b(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 231, a * 163);
        d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
        d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
        d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
        d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
        d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
        d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
        d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
        d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
        d.closePath();
        $b(d, b[2], b[3], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 234, a * 154);
        d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
        d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
        d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
        d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
        d.closePath();
        $b(d, b[2]);
        return c;
    }
    function km(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.save();
        e.translate(a * 204, a * 195.0833282470703);
        e.rotate(10.16);
        Zb(e, a * -97.5, a * -134.5, a * 195, a * 269, a * 10);
        e.restore();
        $b(e, c[0], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58.5, a * 226.5833282470703);
        e.bezierCurveTo(a * 120.5, a * 281.5833282470703, a * 120.5, a * 281.5833282470703, a * 182.5, a * 336.5833282470703);
        e.bezierCurveTo(a * 263, a * 248.5833282470703, a * 263, a * 248.5833282470703, a * 343.5, a * 160.5833282470703);
        e.bezierCurveTo(a * 280.5, a * 104.58332824707031, a * 280.5, a * 104.58332824707031, a * 217.5, a * 48.58332824707031);
        e.closePath();
        $b(e, c[2], c[3], a * 4);
        e.save();
        e.translate(a * 197, a * 169.0833282470703);
        e.rotate(10.16);
        Zb(e, a * -93.5, a * -126.5, a * 187, a * 253, a * 10);
        e.restore();
        $b(e, c[4], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226.5, a * 24.583328247070312);
        e.bezierCurveTo(a * 58.5, a * 207.5833282470703, a * 143, a * 116.58332824707031, a * 59.5, a * 208.5833282470703);
        e.closePath();
        $b(e, Sk, c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46.133331298828125, a * 202.64999389648438);
        e.bezierCurveTo(a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 228.64999389648438);
        e.closePath();
        $b(e, c[4], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55.133331298828125, a * 211.64999389648438);
        e.bezierCurveTo(a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 238.64999389648438);
        e.bezierCurveTo(a * 50.133331298828125, a * 235.64999389648438, a * 50.133331298828125, a * 235.64999389648438, a * 45.133331298828125, a * 232.64999389648438);
        e.bezierCurveTo(a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 200.64999389648438);
        e.closePath();
        $b(e, c[4], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46.133331298828125, a * 198.39999389648438);
        e.bezierCurveTo(a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 201.39999389648438);
        e.closePath();
        $b(e, c[4], c[1], a * 8);
        e.save();
        e.translate(a * 249.63333129882812, a * 120.89999389648438);
        e.rotate(7.04);
        Zb(e, a * -58.5, a * -32, a * 117, a * 64, a * 10);
        e.restore();
        $b(e, c[5]);
        return d;
    }
    function Am(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 187;
        d.height = a * 119;
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, 3);
        e.moveTo(a * 53, a * 45);
        e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
        e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
        e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
        e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
        e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
        e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
        e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
        e.closePath();
        $b(e, c[5]);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, -3);
        e.moveTo(a * 53, a * 45);
        e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
        e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
        e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
        e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
        e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
        e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
        e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
        e.closePath();
        $b(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 151, a * 60);
        e.bezierCurveTo(a * 140, a * 36, a * 137, a * 32, a * 124, a * 29);
        e.bezierCurveTo(a * 98, a * 22, a * 80, a * 24, a * 62, a * 28);
        e.bezierCurveTo(a * 42, a * 35, a * 38, a * 46, a * 34, a * 58);
        e.bezierCurveTo(a * 53, a * 74, a * 76, a * 76, a * 91, a * 78);
        e.closePath();
        $b(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 37, a * 53);
        e.bezierCurveTo(a * 30, a * 56, a * 29, a * 67, a * 30, a * 68);
        e.bezierCurveTo(a * 94, a * 108, a * 150, a * 76, a * 155, a * 70);
        e.bezierCurveTo(a * 154, a * 60, a * 151, a * 54, a * 149, a * 53);
        e.bezierCurveTo(a * 101, a * 74, a * 66, a * 66, a * 37, a * 53);
        e.closePath();
        $b(e, c[2], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 36);
        e.bezierCurveTo(a * 92, a * 25, a * 86, a * 28, a * 82, a * 34);
        e.bezierCurveTo(a * 88, a * 40, a * 93, a * 40, a * 98, a * 36);
        e.closePath();
        $b(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 43);
        e.bezierCurveTo(a * 69, a * 46, a * 67, a * 52, a * 69, a * 58);
        $b(e, Lk, c[1], a * 4);
        id(e, a * 58, a * 50, a * 5);
        $b(e, c[4]);
        id(e, a * 43, a * 65, a * 5);
        $b(e, c[4]);
        id(e, a * 58, a * 73, a * 5);
        $b(e, c[4]);
        id(e, a * 58, a * 50, a * 2);
        $b(e, c[5]);
        id(e, a * 43, a * 65, a * 2);
        $b(e, c[5]);
        id(e, a * 58, a * 73, a * 2);
        $b(e, c[5]);
        return d;
    }
    function xm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 142;
        d.height = a * 118;
        e.save();
        e.translate(a * 70.16665649414062, a * 38.20831298828125);
        Zb(e, a * -58.5, a * -27.5, a * 117, a * 55, a * 20);
        e.restore();
        $b(e, c[0], c[1], a * 4);
        e.save();
        e.translate(a * 70, a * 42.70831298828125);
        Zb(e, a * -61, a * -20, a * 122, a * 40, a * 20);
        e.restore();
        $b(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123, a * 70.375);
        e.bezierCurveTo(a * 115, a * 99.375, a * 119, a * 85.375, a * 115, a * 100.375);
        e.bezierCurveTo(a * 112, a * 116.375, a * 117, a * 109.375, a * 131, a * 100.375);
        e.bezierCurveTo(a * 131, a * 83.375, a * 131, a * 83.375, a * 131, a * 66.375);
        e.closePath();
        $b(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 11, a * 68.375);
        e.bezierCurveTo(a * 11.166656494140625, a * 84.375, a * 9, a * 99.375, a * 10, a * 100.375);
        e.bezierCurveTo(a * 35, a * 113.375, a * 27, a * 110.375, a * 25, a * 95.375);
        e.bezierCurveTo(a * 16, a * 68.375, a * 17, a * 69.375, a * 17, a * 68.375);
        e.closePath();
        $b(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46, a * 32.375);
        e.bezierCurveTo(a * 43, a * 8.375, a * 45, a * 7.375, a * 56, a * 6.375);
        e.bezierCurveTo(a * 105, a * 4.375, a * 102, a * 6.375, a * 97, a * 32.375);
        e.bezierCurveTo(a * 138, a * 43.375, a * 133, a * 45.375, a * 133, a * 58.375);
        e.bezierCurveTo(a * 133, a * 85.375, a * 125, a * 74.375, a * 111, a * 70.375);
        e.bezierCurveTo(a * 70, a * 69.875, a * 29, a * 69.375, a * 29, a * 69.375);
        e.bezierCurveTo(a * 7, a * 84.375, a * 7, a * 70.375, a * 7, a * 59.375);
        e.bezierCurveTo(a * 6, a * 28.375, a * 32, a * 39.375, a * 44, a * 32.375);
        e.closePath();
        $b(e, c[2], c[1], a * 4);
        id(e, a * 71, a * 44.375, a * 16.55294535724685);
        $b(e, c[2], c[1], a * 4);
        id(e, a * 71, a * 43.70831298828125, a * 8.94427190999916);
        $b(e, c[2], c[1], a * 4);
        return d;
    }
    function Jm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 175;
        d.height = a * 106;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 67);
        e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
        e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
        e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 75);
        e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
        e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
        e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
        e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
        e.closePath();
        $b(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 38, a * 46);
        e.bezierCurveTo(a * 52, a * 37, a * 69, a * 36, a * 85, a * 36);
        e.bezierCurveTo(a * 118, a * 38, a * 129, a * 42, a * 137, a * 48);
        e.bezierCurveTo(a * 135, a * 45, a * 135, a * 45, a * 133, a * 42);
        e.bezierCurveTo(a * 124, a * 32, a * 116, a * 28, a * 88, a * 25);
        e.bezierCurveTo(a * 47, a * 28, a * 40, a * 32, a * 36, a * 44);
        e.closePath();
        $b(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 75);
        e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
        e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
        e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
        e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
        e.closePath();
        $b(e, sl, c[2], a * 4);
        e.translate(0, a * -3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 67);
        e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
        e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
        e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
        e.closePath();
        $b(e, c[10], c[10], a * 4);
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 43);
        e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
        e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
        e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 43);
        e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
        e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
        e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 19);
        e.bezierCurveTo(a * 24, a * 35, a * 35, a * 42, a * 42, a * 44);
        e.bezierCurveTo(a * 43, a * 51, a * 43, a * 48, a * 43, a * 56);
        e.bezierCurveTo(a * 25, a * 47, a * 17, a * 36, a * 23, a * 20);
        e.closePath();
        $b(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 148, a * 18);
        e.bezierCurveTo(a * 159, a * 44, a * 139, a * 52, a * 130, a * 55);
        e.bezierCurveTo(a * 129, a * 48, a * 129, a * 46, a * 131, a * 43);
        e.bezierCurveTo(a * 144, a * 37, a * 148, a * 35, a * 147, a * 18);
        e.closePath();
        $b(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 43);
        e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
        e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
        e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
        e.closePath();
        $b(e, undefined, c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 43);
        e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
        e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
        e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
        e.closePath();
        $b(e, Zi, c[4], a * 4);
        e.save();
        e.translate(a * 87, a * 34.5);
        e.rotate(0);
        Zb(e, a * -8, a * -10.5, a * 16, a * 21, a * 10);
        e.restore();
        $b(e, c[7], c[2], a * 4);
        e.save();
        e.translate(a * 87, a * 57);
        e.rotate(0);
        Zb(e, a * -8, a * -23, a * 16, a * 46, a * 10);
        e.restore();
        $b(e, c[8], c[2], a * 4);
        id(e, a * 87, a * 39, a * 4.123105625617661);
        $b(e, c[9], c[2], a * 4);
        id(e, a * 87, a * 60, a * 4.242640687119285);
        $b(e, c[9], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 67);
        e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
        e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
        e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
        e.closePath();
        $b(e, c[8], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 69);
        e.bezierCurveTo(a * 13, a * 77, a * 16, a * 74, a * 27, a * 80);
        e.closePath();
        $b(e, c[9], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 70);
        e.bezierCurveTo(a * 149.5, a * 72, a * 149.5, a * 72, a * 154, a * 74);
        e.bezierCurveTo(a * 150, a * 77, a * 150, a * 77, a * 146, a * 80);
        e.closePath();
        $b(e, c[9], c[2], a * 4);
        id(e, a * 50, a * 80, a * 5);
        $b(e, c[9], c[2], a * 4);
        id(e, a * 86.01141357421875, a * 81.76705932617188, a * 5);
        $b(e, c[9], c[2], a * 4);
        id(e, a * 119.01141357421875, a * 80.13069152832031, a * 5);
        $b(e, c[9], c[2], a * 4);
        return d;
    }
    const Mm = 4;
    function Bm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 218;
        d.height = a * 185;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 53.135406494140625);
        e.bezierCurveTo(a * 92, a * 17.135406494140625, a * 116, a * 11.135406494140625, a * 158, a * 53.135406494140625);
        e.bezierCurveTo(a * 178, a * 74.13540649414062, a * 181, a * 81.13540649414062, a * 196, a * 101.13540649414062);
        e.bezierCurveTo(a * 214, a * 127.13540649414062, a * 192, a * 138.13540649414062, a * 173, a * 149.13540649414062);
        e.bezierCurveTo(a * 137, a * 166.13540649414062, a * 74, a * 170.13540649414062, a * 36, a * 141.13540649414062);
        e.bezierCurveTo(a * 13, a * 127.13540649414062, a * 20, a * 119.13540649414062, a * 30, a * 103.13540649414062);
        e.bezierCurveTo(a * 48, a * 71.13540649414062, a * 54, a * 67.13540649414062, a * 63, a * 54.135406494140625);
        e.closePath();
        $b(e, c[0], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107, a * 25.135406494140625);
        e.bezierCurveTo(a * 62, a * 90.13540649414062, a * 54, a * 129.13540649414062, a * 53, a * 151.13540649414062);
        e.bezierCurveTo(a * 39.5, a * 142.13540649414062, a * 39.5, a * 142.13540649414062, a * 26, a * 133.13540649414062);
        e.bezierCurveTo(a * 23.5, a * 128.63540649414062, a * 23.5, a * 128.63540649414062, a * 21, a * 124.13540649414062);
        e.bezierCurveTo(a * 22, a * 113.13540649414062, a * 31, a * 99.13540649414062, a * 40, a * 88.13540649414062);
        e.bezierCurveTo(a * 54.5, a * 67.13540649414062, a * 54.5, a * 67.13540649414062, a * 69, a * 46.135406494140625);
        e.bezierCurveTo(a * 80.5, a * 36.635406494140625, a * 80.5, a * 36.635406494140625, a * 92, a * 27.135406494140625);
        e.closePath();
        $b(e, c[1]);
        return d;
    }
    function Dm(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 120;
        var g = b * 140;
        d.width = f;
        d.height = g;
        d.width = b * 130;
        d.height = b * 120;
        Zb(e, b * 10, b * 12, b * 110, b * 90, b * 10);
        $b(e, c[0]);
        Zb(e, b * 10, b * 5, b * 110, b * 90, b * 10);
        $b(e, c[1], c[2], b * 4);
        var a = sd(-Math.PI / 5, Vt(b * 0.5, true, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
        e.drawImage(a, b * 12, b * 18);
        a = sd(Math.PI / 4, Vc(b * 0.55, true, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
        e.drawImage(a, b * 36, b * 16);
        return d;
    }
    function Em(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 137;
        d.height = a * 129;
        e.globalAlpha = 0.5;
        id(e, a * 69, a * 64, a * 48.16637831516918);
        $b(e, c[1]);
        e.globalAlpha = 0.7;
        id(e, a * 69, a * 64, a * 38.23105625617661);
        $b(e, c[2]);
        e.globalAlpha = 0.7;
        id(e, a * 69, a * 64, a * 32.01562118716424);
        $b(e, c[2], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72, a * 41);
        e.bezierCurveTo(a * 52, a * 41, a * 48, a * 50, a * 45, a * 58);
        e.bezierCurveTo(a * 43, a * 67, a * 45, a * 68, a * 46, a * 72);
        e.bezierCurveTo(a * 52, a * 53, a * 60, a * 48, a * 72, a * 42);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 62);
        e.bezierCurveTo(a * 95, a * 72, a * 90, a * 81, a * 81, a * 87);
        e.bezierCurveTo(a * 74, a * 91, a * 69, a * 89, a * 64, a * 88);
        e.bezierCurveTo(a * 77, a * 83, a * 84, a * 82, a * 92, a * 62);
        e.closePath();
        $b(e, c[3]);
        return d;
    }
    function Im(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 501;
        f.height = b * 564;
        g.scale(0.5, 0.5);
        g.translate(b * 240, b * 255);
        g.rotate(e);
        g.globalAlpha = c ? 0.5 : 0.2;
        id(g, b * 174, b * 87.984375, b * 20.8806130178211);
        $b(g, d[0], d[0], b * 8);
        id(g, b * 174, b * 87.984375, b * 12.165525060596439);
        $b(g, d[0], d[0], b * 8);
        id(g, b * 174, b * 87.484375, b * 6);
        $b(g, d[0]);
        id(g, b * 30, b * 87.984375, b * 20.8806130178211);
        $b(g, d[0], d[0], b * 4);
        id(g, b * 30, b * 87.984375, b * 12.165525060596439);
        $b(g, d[0], d[0], b * 4);
        id(g, b * 30, b * 87.484375, b * 6);
        $b(g, d[0]);
        id(g, b * 100, b * 30, b * 20.8806130178211);
        $b(g, d[0], d[0], b * 4);
        id(g, b * 100, b * 30, b * 12.165525060596439);
        $b(g, d[0], d[0], b * 4);
        id(g, b * 100, b * 30, b * 6);
        $b(g, d[0]);
        id(g, b * 100, b * 130, b * 20.8806130178211);
        $b(g, d[0], d[0], b * 4);
        id(g, b * 100, b * 130, b * 12.165525060596439);
        $b(g, d[0], d[0], b * 4);
        id(g, b * 100, b * 130, b * 6);
        $b(g, d[0]);
        g.save();
        g.translate(b * 102, b * 81.984375);
        g.rotate(0);
        Zb(g, b * -74, b * -57, b * 148, b * 114, b * 23);
        g.restore();
        $b(g, d[0], d[0], b * 4);
        g.save();
        g.translate(b * 101, b * 64.984375);
        g.rotate(0);
        Zb(g, b * -33, b * -10, b * 66, b * 20, b * 15);
        g.restore();
        $b(g, d[0], d[0], b * 4);
        g.save();
        g.translate(b * 102, b * 63.484375);
        g.rotate(0);
        Zb(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
        g.restore();
        g.translate(5, -5);
        g.globalAlpha = 1;
        id(g, b * 174, b * 87.984375, b * 20.8806130178211);
        $b(g, d[1], d[3], b * 8);
        id(g, b * 174, b * 87.984375, b * 12.165525060596439);
        $b(g, d[1], d[3], b * 8);
        id(g, b * 174, b * 87.484375, b * 6);
        $b(g, d[2]);
        id(g, b * 30, b * 87.984375, b * 20.8806130178211);
        $b(g, d[1], d[3], b * 8);
        id(g, b * 30, b * 87.984375, b * 12.165525060596439);
        $b(g, d[1], d[3], b * 8);
        id(g, b * 30, b * 87.484375, b * 6);
        $b(g, d[2]);
        id(g, b * 102, b * 30, b * 20.8806130178211);
        $b(g, d[1], d[3], b * 8);
        id(g, b * 102, b * 30, b * 12.165525060596439);
        $b(g, d[1], d[3], b * 8);
        id(g, b * 102, b * 30, b * 6);
        $b(g, d[1]);
        id(g, b * 102, b * 130, b * 20.8806130178211);
        $b(g, d[1], d[3], b * 8);
        id(g, b * 102, b * 130, b * 12.165525060596439);
        $b(g, d[1], d[3], b * 8);
        id(g, b * 102, b * 130, b * 6);
        $b(g, d[1]);
        g.save();
        g.translate(b * 102, b * 81.984375);
        Zb(g, b * -74, b * -57, b * 148, b * 114, b * 23);
        g.restore();
        $b(g, d[1], d[3], b * 8);
        g.save();
        g.translate(b * 101, b * 64.984375);
        Zb(g, b * -33, b * -10, b * 66, b * 20, b * 15);
        g.restore();
        $b(g, d[2], d[1], b * 8);
        g.save();
        g.translate(b * 102, b * 63.484375);
        Zb(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
        g.restore();
        $b(g, d[2], d[1], b * 8);
        id(g, b * 135, b * 107.36605834960938, b * 21.095023109728988);
        $b(g, d[1], d[3], b * 8);
        id(g, b * 135, b * 107.36605834960938, b * 13);
        $b(g, d[1], d[3], b * 8);
        id(g, b * 135, b * 107.36605834960938, b * 6.082762530298219);
        $b(g, d[2]);
        id(g, b * 70, b * 107.36605834960938, b * 21.095023109728988);
        $b(g, d[1], d[3], b * 8);
        id(g, b * 70, b * 107.36605834960938, b * 13);
        $b(g, d[1], d[3], b * 8);
        id(g, b * 70, b * 107.36605834960938, b * 6.082762530298219);
        $b(g, d[2]);
        return f;
    }
    function Sm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 202;
        d.height = a * 202;
        e.translate(a * 2, a * 1);
        e.globalAlpha = 0.3;
        id(e, a * 98, a * 99, a * 100);
        $b(e, c[0]);
        e.globalAlpha = 0.5;
        id(e, a * 98, a * 99, a * 90);
        $b(e, c[1]);
        return d;
    }
    function Qm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 450;
        d.height = a * 790;
        e.translate(a * 5, a * 5);
        e.globalAlpha = 0;
        id(e, a * 178.5, a * 172.828125, a * 150);
        $b(e, undefined, c[0], a * 65);
        id(e, a * 178.5, a * 172.828125, a * 150);
        $b(e, undefined, c[0], a * 55);
        e.closePath();
        e.save();
        e.translate(a * 177, a * 512.328125);
        Zb(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
        e.restore();
        $b(e, c[0]);
        e.save();
        e.translate(a * 136, a * 581.828125);
        Zb(e, a * -39, a * -23, a * 78, a * 46, a * 25);
        e.restore();
        $b(e, c[0]);
        e.save();
        e.translate(a * 135.5, a * 663.828125);
        Zb(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
        e.restore();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 114, a * 594.828125);
        e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
        e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
        e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
        e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
        e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, a * 5);
        e.moveTo(a * 140, a * 294.828125);
        e.bezierCurveTo(a * 212, a * 295.828125, a * 176.5, a * 295.328125, a * 213, a * 295.828125);
        e.bezierCurveTo(a * 201.5, a * 325.328125, a * 201.5, a * 325.328125, a * 190, a * 354.828125);
        e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 161, a * 356.828125);
        e.bezierCurveTo(a * 154.5, a * 328.828125, a * 154.5, a * 328.828125, a * 148, a * 300.828125);
        e.closePath();
        $b(e, c[0]);
        e.translate(3, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 159, a * 679.828125);
        e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
        e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
        e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
        e.closePath();
        $b(e, c[0]);
        e.save();
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 548.828125);
        e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
        e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
        e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
        e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
        e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
        e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
        e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
        e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
        e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
        e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
        e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
        e.closePath();
        $b(e, c[0], c[0], a * 7);
        e.restore();
        e.globalAlpha = 1;
        e.translate(a * 15, a * 35);
        id(e, a * 178.5, a * 172.828125, a * 150);
        $b(e, undefined, c[2], a * 95);
        id(e, a * 178.5, a * 172.828125, a * 150);
        $b(e, Qr, c[1], a * 55);
        e.closePath();
        e.save();
        e.translate(a * 177, a * 512.328125);
        Zb(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
        e.restore();
        $b(e, c[1], c[2], a * 20);
        e.save();
        e.translate(a * 136, a * 581.828125);
        Zb(e, a * -39, a * -23, a * 78, a * 46, a * 25);
        e.restore();
        $b(e, c[1], c[2], a * 20);
        e.save();
        e.translate(a * 135.5, a * 663.828125);
        Zb(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
        e.restore();
        $b(e, c[1], c[2], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 114, a * 594.828125);
        e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
        e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
        e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
        e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
        e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
        e.closePath();
        $b(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, a * 5);
        e.moveTo(a * 123, a * 294.828125);
        e.bezierCurveTo(a * 212, a * 295.828125, a * 190.5, a * 295.328125, a * 250, a * 295.828125);
        e.bezierCurveTo(a * 231.5, a * 325.328125, a * 231.5, a * 325.328125, a * 220, a * 354.828125);
        e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 140, a * 356.828125);
        e.bezierCurveTo(a * 123.5, a * 328.828125, a * 123.5, a * 328.828125, a * 123, a * 294.828125);
        e.closePath();
        $b(e, c[1]);
        e.translate(0, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 159, a * 679.828125);
        e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
        e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
        e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
        e.closePath();
        $b(e, c[1]);
        e.save();
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 548.828125);
        e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
        e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
        e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
        e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
        e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
        e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
        e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
        e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
        e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
        e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
        e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
        e.closePath();
        $b(e, c[1], c[1], a * 7);
        e.restore();
        return d;
    }
    function _m(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 104;
        d.height = a * 117;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 90);
        e.bezierCurveTo(a * 20, a * 99.5, a * 20, a * 99.5, a * 36, a * 109);
        e.bezierCurveTo(a * 67, a * 92, a * 67, a * 92, a * 98, a * 75);
        e.bezierCurveTo(a * 91, a * 27, a * 91, a * 27, a * 91, a * 28);
        e.bezierCurveTo(a * 72.5, a * 16, a * 72.5, a * 16, a * 54, a * 4);
        e.bezierCurveTo(a * 33.5, a * 10, a * 33.5, a * 10, a * 13, a * 16);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 6, a * 76);
        e.bezierCurveTo(a * 13.5, a * 51.5, a * 13.5, a * 51.5, a * 21, a * 27);
        e.bezierCurveTo(a * 37.5, a * 17, a * 37.5, a * 17, a * 54, a * 7);
        e.bezierCurveTo(a * 33.5, a * 12.5, a * 33.5, a * 12.5, a * 13, a * 18);
        e.closePath();
        $b(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 62);
        e.bezierCurveTo(a * 28.5, a * 53, a * 28.5, a * 53, a * 33, a * 44);
        e.bezierCurveTo(a * 41.5, a * 41, a * 41.5, a * 41, a * 50, a * 38);
        e.bezierCurveTo(a * 52.5, a * 35, a * 52.5, a * 35, a * 55, a * 32);
        e.bezierCurveTo(a * 52, a * 30, a * 52, a * 30, a * 49, a * 28);
        e.bezierCurveTo(a * 38, a * 31.5, a * 38, a * 31.5, a * 27, a * 35);
        e.closePath();
        $b(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 107);
        e.bezierCurveTo(a * 66, a * 90.5, a * 66, a * 90.5, a * 96, a * 74);
        e.bezierCurveTo(a * 93, a * 52.5, a * 93, a * 52.5, a * 90, a * 31);
        e.bezierCurveTo(a * 87, a * 48, a * 87, a * 48, a * 84, a * 65);
        e.closePath();
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 1, a * 89);
        e.bezierCurveTo(a * 18, a * 100, a * 34, a * 110, a * 35, a * 111);
        e.bezierCurveTo(a * 67, a * 93, a * 67, a * 93, a * 99, a * 75);
        e.bezierCurveTo(a * 100, a * 78.5, a * 100, a * 78.5, a * 101, a * 82);
        e.bezierCurveTo(a * 68, a * 99, a * 68, a * 99, a * 35, a * 116);
        e.bezierCurveTo(a * 18, a * 106.5, a * 18, a * 106.5, a * 1, a * 97);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 107);
        e.bezierCurveTo(a * 66.5, a * 91.5, a * 66.5, a * 91.5, a * 97, a * 76);
        e.bezierCurveTo(a * 94.5, a * 52, a * 94.5, a * 52, a * 92, a * 28);
        e.bezierCurveTo(a * 73, a * 15.5, a * 73, a * 15.5, a * 54, a * 3);
        e.bezierCurveTo(a * 33, a * 9.5, a * 33, a * 9.5, a * 12, a * 16);
        e.bezierCurveTo(a * 8, a * 53, a * 8, a * 53, a * 4, a * 90);
        e.bezierCurveTo(a * 18.5, a * 99, a * 18.5, a * 99, a * 33, a * 108);
        e.closePath();
        $b(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22, a * 71);
        e.bezierCurveTo(a * 30, a * 76.5, a * 30, a * 76.5, a * 38, a * 82);
        e.bezierCurveTo(a * 53, a * 72, a * 53, a * 72, a * 68, a * 62);
        e.bezierCurveTo(a * 68, a * 52, a * 68, a * 52, a * 68, a * 42);
        e.bezierCurveTo(a * 59.5, a * 35.5, a * 59.5, a * 35.5, a * 51, a * 29);
        e.bezierCurveTo(a * 39.5, a * 32, a * 39.5, a * 32, a * 28, a * 35);
        e.bezierCurveTo(a * 25, a * 52, a * 25, a * 52, a * 22, a * 69);
        e.closePath();
        $b(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 5, a * 89);
        e.bezierCurveTo(a * 20, a * 73, a * 12.5, a * 80.5, a * 20, a * 72);
        e.closePath();
        $b(e, Mq, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 102);
        e.bezierCurveTo(a * 36, a * 92.5, a * 36, a * 92.5, a * 37, a * 83);
        e.closePath();
        $b(e, Ih, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 68, a * 62);
        e.bezierCurveTo(a * 81, a * 67.5, a * 81, a * 67.5, a * 94, a * 73);
        e.closePath();
        $b(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 70, a * 41);
        e.bezierCurveTo(a * 80, a * 35.5, a * 80, a * 35.5, a * 90, a * 30);
        e.closePath();
        $b(e, Qr, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 33);
        e.bezierCurveTo(a * 21.5, a * 26.5, a * 21.5, a * 26.5, a * 15, a * 20);
        e.closePath();
        $b(e, Io, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 28);
        e.bezierCurveTo(a * 53, a * 17, a * 53, a * 17, a * 55, a * 6);
        e.closePath();
        $b(e, Vq, c[4], a * 6);
        return d;
    }
    function Fm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 105;
        d.height = a * 144;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * -5, a * 0);
        e.save();
        e.translate(a * 52.5, a * 91.5);
        Zb(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
        e.restore();
        $b(e, c[0], c[0], a * 3);
        e.save();
        e.translate(a * 53, a * 36);
        Zb(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
        e.restore();
        $b(e, c[0], c[0], a * 4);
        e.save();
        e.translate(a * 53.5, a * 35.5);
        Zb(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
        e.restore();
        $b(e, c[0], c[0], a * 4);
        e.translate(a * 5, a * 0);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 52.5, a * 91.5);
        Zb(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
        e.restore();
        $b(e, c[1], c[2], a * 3);
        e.save();
        e.translate(a * 53, a * 36);
        Zb(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
        e.restore();
        $b(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 53.5, a * 35.5);
        Zb(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
        e.restore();
        $b(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 60.5);
        e.bezierCurveTo(a * 44, a * 56.5, a * 44, a * 56.5, a * 39, a * 52.5);
        e.bezierCurveTo(a * 39, a * 46.5, a * 39, a * 46.5, a * 39, a * 40.5);
        e.bezierCurveTo(a * 44, a * 44, a * 44, a * 44, a * 49, a * 47.5);
        e.bezierCurveTo(a * 49, a * 54, a * 49, a * 54, a * 49, a * 60.5);
        e.closePath();
        $b(e, c[7], c[6], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 66, a * 40.5);
        e.bezierCurveTo(a * 66, a * 46.5, a * 66, a * 46.5, a * 66, a * 52.5);
        e.bezierCurveTo(a * 60.5, a * 56.5, a * 60.5, a * 56.5, a * 55, a * 60.5);
        e.bezierCurveTo(a * 56, a * 53, a * 56, a * 53, a * 57, a * 45.5);
        e.bezierCurveTo(a * 61.5, a * 43, a * 61.5, a * 43, a * 66, a * 40.5);
        e.closePath();
        $b(e, c[7], c[6], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 33.5);
        e.bezierCurveTo(a * 55.5, a * 41, a * 55.5, a * 41, a * 59, a * 48.5);
        e.bezierCurveTo(a * 56, a * 58, a * 56, a * 58, a * 53, a * 67.5);
        e.bezierCurveTo(a * 49, a * 58, a * 49, a * 58, a * 45, a * 48.5);
        e.bezierCurveTo(a * 48.5, a * 41, a * 48.5, a * 41, a * 52, a * 33.5);
        e.closePath();
        $b(e, c[9], c[8], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 47.5);
        e.bezierCurveTo(a * 54.5, a * 50.5, a * 54.5, a * 50.5, a * 57, a * 53.5);
        e.bezierCurveTo(a * 55, a * 60, a * 55, a * 60, a * 53, a * 66.5);
        e.bezierCurveTo(a * 50.5, a * 61, a * 50.5, a * 61, a * 48, a * 55.5);
        e.bezierCurveTo(a * 50, a * 52, a * 50, a * 52, a * 52, a * 48.5);
        e.closePath();
        $b(e, c[11], c[10], a * 3);
        return d;
    }
    function Rm(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 185;
        e.height = b * 164;
        f.translate(0, 0);
        var g = function (a, b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            d.width = a * 201;
            d.height = a * 164;
            e.translate(0, a * 5);
            e.globalAlpha = b ? 0.5 : 1;
            id(e, a * 100.5, a * 82, a * 74.92746655359852);
            $b(e, c[0], c[0], a * 4);
            id(e, a * 100.5, a * 82, a * 65.9417374971317);
            $b(e, c[0], c[0], a * 4);
            e.translate(0, -5);
            e.globalAlpha = 1;
            id(e, a * 100.5, a * 82, a * 74.92746655359852);
            $b(e, c[1], c[3], a * 4);
            id(e, a * 100.5, a * 82, a * 65.9417374971317);
            $b(e, c[1], c[2], a * 4);
            id(e, a * 100.5, a * 82, a * 35.9417374971317);
            $b(e, c[1], c[2], a * 20);
            id(e, a * 100.5, a * 82, a * 15.9417374971317);
            $b(e, c[1], c[2], a * 6);
            return d;
        }(b, c, d);
        f.drawImage(g, b * -10, b * 0);
        g = Im(b, c, d, 0);
        f.drawImage(g, b * -83, b * -40);
        g = Im(b, c, d, Math.PI / 1.4);
        f.drawImage(g, b * -15, b * -88);
        g = Im(b, c, d, Math.PI / -1.4);
        f.drawImage(g, b * 15, b * -8);
        return e;
    }
    function jm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 102;
        d.height = a * 102;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(3, 3);
        Zb(e, a * 24, a * 26, a * 70, a * 9, a * 10);
        $b(e, c[0]);
        Zb(e, a * 26, a * 70, a * 70, a * 9, a * 10);
        $b(e, c[0]);
        Zb(e, a * 5, a * 3, a * 22, a * 94, a * 5);
        $b(e, c[0]);
        Zb(e, a * 40, a * 3, a * 22, a * 94, a * 5);
        $b(e, c[0]);
        Zb(e, a * 75, a * 3, a * 22, a * 94, a * 5);
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(-3, -3);
        Zb(e, a * 24, a * 26, a * 70, a * 9, a * 10);
        $b(e, c[1]);
        Zb(e, a * 26, a * 70, a * 70, a * 9, a * 10);
        $b(e, c[1]);
        Zb(e, a * 5, a * 3, a * 22, a * 94, a * 5);
        $b(e, c[2], c[3], a * 4);
        Zb(e, a * 40, a * 3, a * 22, a * 94, a * 5);
        $b(e, c[2], c[3], a * 4);
        Zb(e, a * 75, a * 3, a * 22, a * 94, a * 5);
        $b(e, c[2], c[3], a * 4);
        return d;
    }
    function Lm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 46;
        d.height = a * 140;
        e.scale(a * -1, a * 1);
        e.translate(a * -50, a * 40);
        e.translate(a * -20, 0);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
        e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
        e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
        e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
        e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -1, 0);
        e.moveTo(a * 17.599990844726562, a * 89.75);
        e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 1, 0);
        e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
        e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
        e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
        e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
        e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
        e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
        e.closePath();
        $b(e, c[0]);
        e.save();
        e.translate(a * 23.599990844726562, a * 110.94999694824219);
        e.rotate(0);
        Zb(e, a * -7, a * -4, a * 14, a * 8, a * 10);
        e.restore();
        $b(e, c[0]);
        e.translate(a * 0, 0);
        e.globalAlpha = 1;
        e.translate(a * 10, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
        e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
        e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
        e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
        e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
        e.closePath();
        $b(e, c[3], c[4], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -1, 0);
        e.moveTo(a * 17.599990844726562, a * 89.75);
        e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
        e.closePath();
        $b(e, c[1], c[2], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 1, 0);
        e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
        e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
        e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
        e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
        e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
        e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
        e.closePath();
        $b(e, c[1], c[2], a * 3);
        e.save();
        e.translate(a * 23.599990844726562, a * 110.94999694824219);
        e.rotate(0);
        Zb(e, a * -7, a * -4, a * 14, a * 8, a * 10);
        e.restore();
        $b(e, c[1], c[2], a * 3);
        return d;
    }
    function Gm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 163;
        d.height = a * 163;
        e.save();
        e.translate(a * 82.5, a * 81.1015625);
        e.rotate(0);
        Zb(e, a * -65.5, a * -66, a * 131, a * 131, a * 5);
        e.restore();
        $b(e, c[1]);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 80, a * 17.1015625);
        Zb(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
        e.restore();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 80, a * 17.1015625);
        Zb(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
        e.restore();
        $b(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 145.5, a * 83.6015625);
        Zb(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
        e.restore();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 145.5, a * 83.6015625);
        Zb(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
        e.restore();
        $b(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 17.5, a * 82.6015625);
        Zb(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
        e.restore();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 17.5, a * 82.6015625);
        Zb(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
        e.restore();
        $b(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 80.5, a * 145.6015625);
        Zb(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
        e.restore();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 80.5, a * 145.6015625);
        Zb(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
        e.restore();
        $b(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 17, a * 18.1015625);
        Zb(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
        e.restore();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 17, a * 18.1015625);
        Zb(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
        e.restore();
        $b(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 145.5, a * 16.6015625);
        Zb(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
        e.restore();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 145.5, a * 16.6015625);
        Zb(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
        e.restore();
        $b(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 145.5, a * 144.1015625);
        Zb(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
        e.restore();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 145.5, a * 144.1015625);
        Zb(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
        e.restore();
        $b(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 17.5, a * 145.1015625);
        Zb(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
        e.restore();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 17.5, a * 145.1015625);
        Zb(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
        e.restore();
        $b(e, c[2], c[3], a * 3);
        return d;
    }
    function Wm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 440;
        d.height = a * 388;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        id(e, a * 220, a * 201, a * 170.41713528867922);
        $b(e, c[0], c[0], a * 6);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        id(e, a * 220, a * 201, a * 170.41713528867922);
        $b(e, c[1], c[2], a * 6);
        id(e, a * 220, a * 201, a * 130);
        $b(e, c[11], c[2], a * 6);
        id(e, a * 222, a * 199, a * 120.74767078498864);
        $b(e, Ih, c[3], a * 40);
        id(e, a * 220, a * 200, a * 95.44108130150245);
        $b(e, Gr, c[2], a * 15);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        id(e, a * 63, a * 136, a * 49.193495504995376);
        $b(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        id(e, a * 63, a * 136, a * 49.193495504995376);
        $b(e, c[8], c[2], a * 4);
        id(e, a * 63, a * 137, a * 25.632011235952593);
        $b(e, c[7], c[2], a * 4);
        return d;
    }
    function Om(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 202;
        d.height = a * 202;
        e.translate(a * 2, a * 1);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 98, a * 41.15177917480469);
        e.rotate(0.8);
        Zb(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
        e.restore();
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 22.5089111328125);
        e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
        $b(e, c[2]);
        e.save();
        e.translate(a * 147.5, a * 69.5089111328125);
        e.rotate(0.2);
        Zb(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
        e.restore();
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 163, a * 59.50892639160156);
        e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
        $b(e, c[2]);
        e.save();
        e.translate(a * 143.5, a * 128.2946319580078);
        e.rotate(1.24);
        Zb(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
        e.restore();
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 135.93748474121094);
        e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
        $b(e, c[2]);
        e.save();
        e.translate(a * 99, a * 156.08035278320312);
        e.rotate(0.84);
        Zb(e, a * -18, a * -18, a * 36, a * 36, a * 7);
        e.restore();
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 136.08035278320312);
        e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
        $b(e, c[2]);
        e.save();
        e.translate(a * 54, a * 72.22320556640625);
        e.rotate(1.32);
        Zb(e, a * -18, a * -19, a * 36, a * 38, a * 7);
        e.restore();
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34, a * 60.79463195800781);
        e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
        $b(e, c[2]);
        e.save();
        e.translate(a * 49, a * 127.29463195800781);
        e.rotate(1.76);
        Zb(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
        e.restore();
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141.7946319580078);
        e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
        $b(e, c[2]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 98, a * 41.15177917480469);
        e.rotate(0.8);
        Zb(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
        e.restore();
        $b(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 22.5089111328125);
        e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
        $b(e, undefined, c[4], a * 5);
        e.save();
        e.translate(a * 147.5, a * 69.5089111328125);
        e.rotate(0.2);
        Zb(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
        e.restore();
        $b(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 163, a * 59.50892639160156);
        e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
        $b(e, undefined, c[4], a * 5);
        e.save();
        e.translate(a * 143.5, a * 128.2946319580078);
        e.rotate(1.24);
        Zb(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
        e.restore();
        $b(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 135.93748474121094);
        e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
        $b(e, mr, c[4], a * 5);
        e.save();
        e.translate(a * 99, a * 156.08035278320312);
        e.rotate(0.84);
        Zb(e, a * -18, a * -18, a * 36, a * 36, a * 7);
        e.restore();
        $b(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 136.08035278320312);
        e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
        $b(e, undefined, c[4], a * 5);
        e.save();
        e.translate(a * 54, a * 72.22320556640625);
        e.rotate(1.32);
        Zb(e, a * -18, a * -19, a * 36, a * 38, a * 7);
        e.restore();
        $b(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34, a * 60.79463195800781);
        e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
        $b(e, Gr, c[4], a * 5);
        e.save();
        e.translate(a * 49, a * 127.29463195800781);
        e.rotate(1.76);
        Zb(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
        e.restore();
        $b(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141.7946319580078);
        e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
        $b(e, Zi, c[4], a * 5);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 98, a * 99);
        nd(e, 6, a * 70.28669492273468, a * 10);
        e.restore();
        $b(e, c[2]);
        e.save();
        e.translate(a * 98, a * 99);
        nd(e, 6, a * 56.455940020351264, a * 10);
        e.restore();
        $b(e, c[2]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 98, a * 99);
        nd(e, 6, a * 70.28669492273468, a * 10);
        e.restore();
        $b(e, c[5], c[6], a * 5);
        e.save();
        e.translate(a * 98, a * 99);
        nd(e, 6, a * 56.455940020351264, a * 10);
        e.restore();
        $b(e, c[7], c[8], a * 7);
        return d;
    }
    function Nm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 440;
        d.height = a * 388;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        id(e, a * 220, a * 201, a * 170.41713528867922);
        $b(e, c[0], c[0], a * 6);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        id(e, a * 220, a * 201, a * 170.41713528867922);
        $b(e, c[1], c[2], a * 6);
        id(e, a * 220, a * 201, a * 130);
        $b(e, c[11], c[2], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 218, a * 97);
        e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
        e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
        e.closePath();
        $b(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224, a * 181);
        e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
        e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
        e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
        e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
        e.closePath();
        $b(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 169, a * 289);
        e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
        e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
        e.closePath();
        $b(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143, a * 146);
        e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
        e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
        e.closePath();
        $b(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 135);
        e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
        e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
        e.closePath();
        $b(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 318, a * 223);
        e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
        e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
        e.closePath();
        $b(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 142, a * 223);
        e.bezierCurveTo(a * 128, a * 213, a * 123, a * 214, a * 111, a * 223);
        e.closePath();
        $b(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 251, a * 133);
        e.bezierCurveTo(a * 269, a * 188, a * 262, a * 229, a * 251, a * 253);
        e.bezierCurveTo(a * 288, a * 224, a * 273, a * 139, a * 252, a * 133);
        e.closePath();
        $b(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 203, a * 102);
        e.bezierCurveTo(a * 204, a * 136, a * 200, a * 159, a * 189, a * 174);
        e.bezierCurveTo(a * 223, a * 164, a * 219, a * 87, a * 205, a * 83);
        e.closePath();
        $b(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 196, a * 324);
        e.bezierCurveTo(a * 209, a * 239, a * 200, a * 219, a * 192, a * 196);
        e.bezierCurveTo(a * 229, a * 216, a * 219, a * 316, a * 198, a * 325);
        e.closePath();
        $b(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 266, a * 166);
        e.bezierCurveTo(a * 249, a * 154, a * 243, a * 161, a * 233, a * 167);
        $b(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 269, a * 192);
        e.bezierCurveTo(a * 256, a * 183, a * 241, a * 186, a * 233, a * 192);
        $b(e, Gr, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 263, a * 217);
        e.bezierCurveTo(a * 251, a * 211, a * 242, a * 213, a * 236, a * 218);
        $b(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 204, a * 141);
        e.bezierCurveTo(a * 191, a * 131, a * 187, a * 133, a * 176, a * 141);
        $b(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 207, a * 230);
        e.bezierCurveTo(a * 193, a * 222, a * 185, a * 224, a * 177, a * 231);
        $b(e, undefined, c[6], a * 6);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 210, a * 258);
        e.bezierCurveTo(a * 196, a * 247, a * 191, a * 250, a * 177, a * 259);
        $b(e, Lk, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 196);
        e.bezierCurveTo(a * 130, a * 186, a * 124, a * 187, a * 114, a * 195);
        $b(e, sl, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 218, a * 97);
        e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
        e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
        e.closePath();
        $b(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224, a * 181);
        e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
        e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
        e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
        e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
        e.closePath();
        $b(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 169, a * 289);
        e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
        e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
        e.closePath();
        $b(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143, a * 146);
        e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
        e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
        e.closePath();
        $b(e, sl, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 135);
        e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
        e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
        e.closePath();
        $b(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 318, a * 223);
        e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
        e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
        e.closePath();
        $b(e, undefined, c[6], a * 6);
        id(e, a * 222, a * 199, a * 120.74767078498864);
        $b(e, Lk, c[3], a * 40);
        id(e, a * 220, a * 200, a * 95.44108130150245);
        $b(e, Rh, c[2], a * 15);
        id(e, a * 220, a * 201, a * 85);
        $b(e, Io, c[4], a * 10);
        e.globalAlpha = 0.5;
        id(e, a * 220, a * 201, a * 82);
        $b(e, c[9]);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        id(e, a * 63, a * 136, a * 49.193495504995376);
        $b(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        id(e, a * 63, a * 136, a * 49.193495504995376);
        $b(e, c[8], c[2], a * 4);
        id(e, a * 63, a * 137, a * 25.632011235952593);
        $b(e, c[7], c[2], a * 4);
        return d;
    }
    function qm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 88;
        d.height = a * 88;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(0.52);
        nd(e, 6, a * 43, a * 10);
        e.restore();
        $b(e, c[0], c[1], a * 3);
        return d;
    }
    function Hm(a, b, c) {
        var d = (e = document.createElement("canvas")).getContext("2d");
        e.width = a * 47;
        e.height = a * 60;
        var e;
        d = (e = document.createElement("canvas")).getContext("2d");
        e.width = a * 47;
        e.height = a * 60;
        id(d, a * 23.5, a * 20.734375, a * 15.132745950421556);
        $b(d, lh, c[2], a * 4);
        id(d, a * 23.5, a * 20.734375, a * 18.601075237738275);
        $b(d, undefined, c[1], a * 4);
        id(d, a * 23.5, a * 20.734375, a * 11.40175425099138);
        $b(d, undefined, c[1], a * 4);
        d.save();
        d.translate(a * 23, a * 38.734375);
        d.rotate(0);
        Zb(d, a * -21.5, a * -19, a * 43, a * 38, a * 10);
        d.restore();
        $b(d, c[2], c[1], a * 4);
        d.save();
        d.translate(a * 23.5, a * 43.734375);
        d.rotate(0.5235987755982988);
        nd(d, 3, a * 8.06225774829855, a * 0);
        d.restore();
        $b(d, c[3]);
        id(d, a * 23.5, a * 35.734375, a * 7.0710678118654755);
        $b(d, c[3]);
        return e;
    }
    function Um(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 496;
        e.height = b * 520;
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 10);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 19.000030517578125, b * 256.67613983154297);
        f.bezierCurveTo(b * 1.000030517578125, b * 332.67613983154297, b * 23.000030517578125, b * 404.67613983154297, b * 95.00003051757812, b * 463.67613983154297);
        f.bezierCurveTo(b * 128.00003051757812, b * 491.67613983154297, b * 165.00003051757812, b * 507.67613983154297, b * 194.00003051757812, b * 512.676139831543);
        f.bezierCurveTo(b * 280.0000305175781, b * 517.676139831543, b * 291.0000305175781, b * 516.676139831543, b * 342.0000305175781, b * 497.67613983154297);
        f.bezierCurveTo(b * 425.0000305175781, b * 454.67613983154297, b * 469.0000305175781, b * 392.67613983154297, b * 468.0000305175781, b * 300.67613983154297);
        f.bezierCurveTo(b * 408.5000305175781, b * 365.17613983154297, b * 408.5000305175781, b * 365.17613983154297, b * 349.0000305175781, b * 429.67613983154297);
        f.bezierCurveTo(b * 256.0000305175781, b * 473.67613983154297, b * 167.00003051757812, b * 459.67613983154297, b * 78.00003051757812, b * 384.67613983154297);
        f.closePath();
        $b(f, d[0]);
        f.globalAlpha = 1;
        f.translate(0, b * -10);
        id(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
        $b(f, d[5], Ol, b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 10);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 65.00003051757812, b * 263.4034118652344);
        f.bezierCurveTo(b * 109.00003051757812, b * 160.40341186523438, b * 185.00003051757812, b * 128.40341186523438, b * 222.00003051757812, b * 124.40341186523438);
        f.bezierCurveTo(b * 277.0000305175781, b * 116.40341186523438, b * 339.0000305175781, b * 134.40341186523438, b * 379.0000305175781, b * 195.40341186523438);
        f.bezierCurveTo(b * 409.0000305175781, b * 242.40341186523438, b * 416.0000305175781, b * 256.4034118652344, b * 428.0000305175781, b * 304.4034118652344);
        f.bezierCurveTo(b * 457.0000305175781, b * 203.40341186523438, b * 449.0000305175781, b * 183.40341186523438, b * 438.0000305175781, b * 162.40341186523438);
        f.bezierCurveTo(b * 381.0000305175781, b * 73.40341186523438, b * 360.0000305175781, b * 66.40341186523438, b * 257.0000305175781, b * 46.403411865234375);
        f.bezierCurveTo(b * 191.00003051757812, b * 45.403411865234375, b * 142.00003051757812, b * 65.40341186523438, b * 101.00003051757812, b * 115.40341186523438);
        f.closePath();
        $b(f, d[0]);
        f.globalAlpha = 1;
        var g = function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 496;
            c.height = a * 520;
            d.globalAlpha = 1;
            d.translate(0, a * -10);
            id(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
            $b(d, b[1], b[2], a * 14);
            d.globalCompositeOperation = "destination-out";
            id(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
            $b(d, b[0], b[0], a * 14);
            d.globalCompositeOperation = "source-over";
            return c;
        }(b, d);
        f.drawImage(g, 0, 0);
        f.translate(0, b * -10);
        id(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
        $b(f, undefined, d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
        f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
        f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
        f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
        f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
        f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
        f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
        f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
        f.closePath();
        $b(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
        f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
        f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
        f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
        f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
        f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
        f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
        f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
        f.closePath();
        $b(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
        f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
        f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
        f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
        f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
        f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
        f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
        f.closePath();
        $b(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
        f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
        f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
        f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
        f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
        f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
        f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
        f.closePath();
        $b(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
        f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
        f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
        f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
        f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
        f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
        f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
        f.closePath();
        $b(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
        f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
        f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
        f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
        f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
        f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
        f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
        f.closePath();
        $b(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
        f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
        f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
        f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
        f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
        f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
        f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
        f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
        f.closePath();
        $b(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
        f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
        f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
        f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
        f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
        f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
        f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
        f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
        f.closePath();
        $b(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
        f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
        f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
        f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
        f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
        f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
        f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
        f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
        f.closePath();
        $b(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
        f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
        f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
        f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
        f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
        f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
        f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
        f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
        f.closePath();
        $b(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
        f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
        f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
        f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
        f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
        f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
        f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
        f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
        f.closePath();
        $b(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
        f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
        f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
        f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
        f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
        f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
        f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
        f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
        f.closePath();
        $b(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
        f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
        f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
        f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
        f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
        f.closePath();
        $b(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
        f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
        f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
        f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
        f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
        f.closePath();
        $b(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
        f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
        f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
        f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
        f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
        f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
        f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
        f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
        f.closePath();
        $b(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
        f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
        f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
        f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
        f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
        f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
        f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
        f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
        f.closePath();
        $b(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
        f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
        f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
        f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
        f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
        f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
        f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
        f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
        f.closePath();
        $b(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
        f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
        f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
        f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
        f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
        f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
        f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
        f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
        f.closePath();
        $b(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
        f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
        f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
        f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
        f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
        f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
        f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
        f.closePath();
        $b(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
        f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
        f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
        f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
        f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
        f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
        f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
        f.closePath();
        $b(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
        f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
        f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
        f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
        f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
        f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
        f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
        f.closePath();
        $b(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
        f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
        f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
        f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
        f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
        f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
        f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
        f.closePath();
        $b(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
        f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
        f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
        f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
        f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
        f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
        f.closePath();
        $b(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
        f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
        f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
        f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
        f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
        f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
        f.closePath();
        $b(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
        f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
        f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
        f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
        f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
        f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
        f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
        f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
        f.closePath();
        $b(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
        f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
        f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
        f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
        f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
        f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
        f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
        f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
        f.closePath();
        $b(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
        f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
        f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
        f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
        f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
        f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
        f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
        f.closePath();
        $b(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
        f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
        f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
        f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
        f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
        f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
        f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
        f.closePath();
        $b(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
        f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
        f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
        f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
        f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
        f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
        f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
        f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
        f.closePath();
        $b(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
        f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
        f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
        f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
        f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
        f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
        f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
        f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
        f.closePath();
        $b(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
        f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
        f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
        f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
        f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
        f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
        f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
        f.closePath();
        $b(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
        f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
        f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
        f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
        f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
        f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
        f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
        f.closePath();
        $b(f, d[4], d[2], b * 12);
        return e;
    }
    function Ym(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.globalAlpha = 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36.5, a * 278.0625);
        e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
        e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
        e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
        e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
        e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
        e.closePath();
        $b(e, c[0]);
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36.5, a * 278.0625);
        e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
        e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
        e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
        e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
        e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
        e.closePath();
        $b(e, c[1], c[2], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 214.5, a * 124.0625);
        e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
        e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
        e.closePath();
        $b(e, sl, c[2], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 145.0625);
        e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
        e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
        e.closePath();
        $b(e, Vq, c[2], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103.5, a * 169.0625);
        e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
        e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
        e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
        e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
        e.closePath();
        $b(e, c[3], c[2], a * 19);
        id(e, a * 92.5, a * 216.0625, a * 13.892443989449804);
        $b(e, c[4]);
        id(e, a * 68.5, a * 227.0625, a * 8.06225774829855);
        $b(e, c[4]);
        id(e, a * 85.5, a * 240.0625, a * 6.708203932499369);
        $b(e, c[4]);
        id(e, a * 147.5, a * 294.0625, a * 17.46424919657298);
        $b(e, c[4]);
        id(e, a * 166.5, a * 273.0625, a * 6.708203932499369);
        $b(e, c[4]);
        id(e, a * 114.5, a * 294.0625, a * 12.36931687685298);
        $b(e, c[4]);
        id(e, a * 123.5, a * 220.0625, a * 5.830951894845301);
        $b(e, c[4]);
        id(e, a * 114.5, a * 259.0625, a * 4.123105625617661);
        $b(e, c[4]);
        id(e, a * 63.5, a * 265.0625, a * 5.385164807134504);
        $b(e, c[4]);
        id(e, a * 148.5, a * 235.0625, a * 4.47213595499958);
        $b(e, c[4]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 194.5, a * 313.0625);
        e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
        e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
        e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
        e.closePath();
        $b(e, c[5]);
        return d;
    }
    function Km(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 89;
        d.height = a * 89;
        e.save();
        e.translate(a * 44.5, a * 44.5);
        nd(e, 6, a * 40, a * 10);
        e.restore();
        $b(e, c[0], c[1], a * 5);
        e.save();
        e.translate(a * 44.5, a * 44.5);
        nd(e, 6, a * 25.11521001172521, a * 10);
        e.restore();
        $b(e, c[2], c[3], a * 5);
        return d;
    }
    function Vm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 168;
        d.height = a * 100;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, a * 5);
        e.save();
        e.translate(a * 24.5, a * 44.30000305175781);
        Zb(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
        e.restore();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 37.80000305175781);
        e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
        e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
        e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
        e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
        e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
        e.closePath();
        $b(e, c[0]);
        id(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -10, a * -5);
        e.save();
        e.translate(a * 24.5, a * 44.30000305175781);
        Zb(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
        e.restore();
        $b(e, Nh, c[3], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 37.80000305175781);
        e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
        e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
        e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
        e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
        e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
        e.closePath();
        $b(e, $e, c[3], a * 6);
        id(e, a * 78, a * 44.80000305175781, a * 42.44616584663204);
        $b(e, cn, c[3], a * 6);
        e.save();
        e.translate(a * 24.5, a * 44.30000305175781);
        Zb(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
        e.restore();
        $b(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 37.80000305175781);
        e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
        e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
        e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
        e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
        e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
        e.closePath();
        $b(e, c[1]);
        id(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
        $b(e, c[2], c[1], a * 4);
        id(e, a * 78, a * 44.80000305175781, a * 29.68164415931166);
        $b(e, c[3], c[1], a * 4);
        id(e, a * 78, a * 44, a * 20);
        $b(e, c[4]);
        return d;
    }
    function Xm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 161;
        d.height = a * 184;
        e.translate(0, a * 10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.5, a * 34.609375);
        e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
        e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
        e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
        e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
        e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
        e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
        e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
        e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
        e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
        e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 45.5, a * 144.609375);
        e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
        e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
        e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
        $b(e, c[0]);
        e.translate(0, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 45.5, a * 144.609375);
        e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
        e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
        e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
        $b(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.5, a * 34.609375);
        e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
        e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
        e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
        e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
        e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
        e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
        e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
        e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
        e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
        e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
        e.closePath();
        $b(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104.5, a * 35.609375);
        e.bezierCurveTo(a * 71.5, a * 36.609375, a * 57.5, a * 52.609375, a * 58.5, a * 81.609375);
        e.bezierCurveTo(a * 59.5, a * 103.609375, a * 66.5, a * 107.609375, a * 66.5, a * 116.609375);
        e.bezierCurveTo(a * 67.5, a * 128.609375, a * 65.5, a * 131.609375, a * 63.5, a * 137.609375);
        $b(e, undefined, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59.5, a * 72.609375);
        e.bezierCurveTo(a * 38.5, a * 80.609375, a * 43.5, a * 81.609375, a * 37.5, a * 89.609375);
        $b(e, undefined, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60.5, a * 85.609375);
        e.bezierCurveTo(a * 75.5, a * 91.609375, a * 76.5, a * 96.609375, a * 81.5, a * 104.609375);
        $b(e, Lk, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 68.5, a * 122.609375);
        e.bezierCurveTo(a * 79.5, a * 130.609375, a * 74.5, a * 128.609375, a * 80.5, a * 134.609375);
        $b(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 142.5, a * 18.609375);
        e.bezierCurveTo(a * 151.5, a * 28.609375, a * 151.5, a * 32.609375, a * 146.5, a * 40.609375);
        e.bezierCurveTo(a * 137.5, a * 26.609375, a * 138.5, a * 24.609375, a * 142.5, a * 19.609375);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 146.5, a * 61.50892639160156);
        e.bezierCurveTo(a * 157.5, a * 69.50892639160156, a * 150.5, a * 79.50892639160156, a * 145.5, a * 81.50892639160156);
        e.bezierCurveTo(a * 140.5, a * 65.50892639160156, a * 144.5, a * 64.50892639160156, a * 146.5, a * 62.50892639160156);
        e.closePath();
        $b(e, c[3]);
        return d;
    }
    function Zm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 376;
        c.height = a * 371;
        d.globalAlpha = 0.5;
        d.translate(a * 5, a * 5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 191.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
        d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
        d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
        d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
        d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
        d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
        d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
        d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
        d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
        d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
        d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
        d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
        d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
        d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
        d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
        d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
        d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
        d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
        d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
        d.closePath();
        $b(d, b[0]);
        d.globalAlpha = 1;
        d.translate(a * -4, a * -5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 191.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
        d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
        d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
        d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
        d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
        d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
        d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
        d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
        d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
        d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
        d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
        d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
        d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
        d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
        d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
        d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
        d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
        d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
        d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
        d.closePath();
        $b(d, Nh, b[1], a * 12);
        d.translate(a * -1, a * 0);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 270.633544921875, a * 88.98580932617188);
        d.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
        d.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
        d.closePath();
        $b(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 275.633544921875, a * 281.9858093261719);
        d.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
        d.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
        d.closePath();
        $b(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 124.633544921875, a * 291.9858093261719);
        d.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
        d.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
        d.closePath();
        $b(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 113.633544921875, a * 80.98580932617188);
        d.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
        d.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
        d.closePath();
        $b(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 202.633544921875, a * 20.985809326171875);
        d.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
        d.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
        d.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
        d.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
        d.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
        d.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
        d.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
        d.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
        d.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
        d.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
        d.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
        d.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
        d.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
        d.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
        d.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
        d.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
        d.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
        d.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
        d.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
        d.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
        d.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
        d.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
        d.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
        d.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
        d.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
        d.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
        d.closePath();
        $b(d, b[2], b[3], a * 5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 203.633544921875, a * 21.985809326171875);
        d.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
        d.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
        d.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
        d.closePath();
        $b(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 175.633544921875, a * 25.985809326171875);
        d.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
        d.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
        d.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
        d.closePath();
        $b(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 26.633544921875, a * 96.98580932617188);
        d.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
        d.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
        d.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
        d.closePath();
        $b(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 351.633544921875, a * 99.98580932617188);
        d.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
        d.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
        d.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
        d.closePath();
        $b(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 350.633544921875, a * 302.9858093261719);
        d.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
        d.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
        d.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
        d.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
        d.closePath();
        $b(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 95.633544921875, a * 224.98580932617188);
        d.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
        d.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
        d.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
        d.closePath();
        $b(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 195.633544921875, a * 253.98580932617188);
        d.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
        d.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
        d.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
        d.closePath();
        $b(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 195.633544921875, a * 251.98580932617188);
        d.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
        d.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
        d.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
        d.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
        d.closePath();
        $b(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 316, a * 186.8020782470703);
        d.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
        d.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
        d.closePath();
        $b(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 340, a * 157.8020782470703);
        d.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
        d.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
        d.closePath();
        $b(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 349, a * 136.8020782470703);
        d.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
        d.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
        d.closePath();
        $b(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 278.75, a * 246.4375);
        d.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
        d.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
        d.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
        d.closePath();
        $b(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 310.75, a * 277.4375);
        d.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
        d.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
        d.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
        d.closePath();
        $b(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.75, a * 257.4375);
        d.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
        d.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
        d.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
        d.closePath();
        $b(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 211.75, a * 289.4375);
        d.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
        d.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
        d.closePath();
        $b(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 171.75, a * 256.4375);
        d.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
        d.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
        d.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
        d.closePath();
        $b(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 175.75, a * 289.9375);
        d.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
        d.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
        d.closePath();
        $b(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 205.75, a * 314.4375);
        d.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
        d.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
        d.closePath();
        $b(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 186.75, a * 313.4375);
        d.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
        d.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
        d.closePath();
        $b(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 103.75, a * 244.4375);
        d.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
        d.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
        d.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
        d.closePath();
        $b(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 86.75, a * 182.4375);
        d.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
        d.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
        d.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
        d.closePath();
        $b(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 44.75, a * 152.4375);
        d.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
        d.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
        d.closePath();
        $b(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 31.75, a * 130.4375);
        d.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
        d.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
        d.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
        d.closePath();
        $b(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 69.75, a * 274.4375);
        d.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
        d.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
        d.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
        d.closePath();
        $b(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 165.75, a * 95.4375);
        d.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
        d.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
        d.closePath();
        $b(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 216.75, a * 94.4375);
        d.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
        d.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
        d.closePath();
        $b(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 211.75, a * 68.4375);
        d.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
        d.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
        d.closePath();
        $b(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 169.75, a * 71.4375);
        d.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
        d.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
        d.closePath();
        $b(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 193.75, a * 160.4375);
        d.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
        d.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
        d.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
        d.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
        d.closePath();
        $b(d, b[8], b[9], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 189.1999969482422, a * 182.61249923706055);
        d.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
        d.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
        d.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
        d.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
        d.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
        d.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
        d.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
        d.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
        d.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
        d.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
        d.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
        d.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
        d.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
        d.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
        d.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
        d.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
        d.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
        d.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
        d.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
        d.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
        d.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
        d.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
        d.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
        d.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
        d.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
        d.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
        d.closePath();
        $b(d, b[10]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 185.1999969482422, a * 173.8125);
        d.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
        d.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
        d.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
        d.closePath();
        $b(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 192.1999969482422, a * 173.61249542236328);
        d.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
        d.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
        d.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
        d.closePath();
        $b(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 205.1999969482422, a * 176.2125015258789);
        d.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
        d.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
        d.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
        d.closePath();
        $b(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.1999969482422, a * 187.21249985694885);
        d.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
        d.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
        d.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
        d.closePath();
        $b(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 204.1999969482422, a * 201.8125);
        d.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
        d.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
        d.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
        d.closePath();
        $b(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 199.1999969482422, a * 205.61249923706055);
        d.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
        d.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
        d.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
        d.closePath();
        $b(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 191.1999969482422, a * 207.01250076293945);
        d.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
        d.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
        d.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
        d.closePath();
        $b(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 186.1999969482422, a * 203.21249961853027);
        d.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
        d.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
        d.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
        d.closePath();
        $b(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 183.1999969482422, a * 196.8125);
        d.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
        d.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
        d.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
        d.closePath();
        $b(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 185.1999969482422, a * 190.21249771118164);
        d.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
        d.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
        d.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
        d.closePath();
        $b(d, b[11]);
        id(d, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
        $b(d, b[12]);
        id(d, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
        $b(d, b[13]);
        id(d, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
        $b(d, b[12]);
        id(d, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
        $b(d, b[13]);
        return c;
    }
    function $m(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 110;
        c.height = a * 110;
        d.globalAlpha = 0.2;
        id(d, a * 55, a * 55, a * 55);
        $b(d, b[0]);
        return c;
    }
    function ep(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 167;
        d.height = a * 136;
        e.globalAlpha = 0.5;
        e.save();
        e.translate(a * 76.71426391601562, a * 67.85713195800781);
        Zb(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
        e.restore();
        $b(e, c[0]);
        e.globalAlpha = 0.8;
        e.save();
        e.translate(a * 76.71426391601562, a * 67.85713195800781);
        Zb(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
        e.restore();
        $b(e, undefined, c[1], a * 7);
        e.globalAlpha = 0.5;
        e.save();
        e.translate(a * 91.21426391601562, a * 67.35713195800781);
        Zb(e, a * -56, a * -55, a * 115, a * 109, a * 15);
        e.restore();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 91.21426391601562, a * 67.35713195800781);
        Zb(e, a * -56, a * -55, a * 115, a * 109, a * 15);
        e.restore();
        $b(e, Ih, c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131.21426391601562, a * 70.35713195800781);
        e.bezierCurveTo(a * 133.21426391601562, a * 95.35713195800781, a * 128.21426391601562, a * 109.35713195800781, a * 108.21426391601562, a * 108.35713195800781);
        $b(e, ks, c[1], a * 10);
        return d;
    }
    function ip(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 120;
        e.height = b * 100;
        Zb(f, b * 10, b * 10, b * 95, b * 80, b * 10);
        $b(f, c[2]);
        Zb(f, b * 10, b * 5, b * 95, b * 80, b * 10);
        $b(f, c[3], c[4], b * 4);
        if (d == 0) {
            var g = op(b * 0.75, c, 0);
            f.drawImage(g, b * 22, b * 18);
        } else if (d == 1) {
            g = op(b * 0.75, c, 1);
            f.drawImage(g, b * 22, b * 18);
        }
        return e;
    }
    function tp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 158;
        d.height = a * 201;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96.5, a * 76.421875);
        e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
        e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
        e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
        e.closePath();
        $b(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 61.5, a * 78.421875);
        e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
        e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
        e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
        e.closePath();
        $b(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 127.421875);
        e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
        e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
        e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
        e.closePath();
        $b(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41.5, a * 134.421875);
        e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
        e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
        e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
        e.closePath();
        $b(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 78.5, a * 51.921875);
        e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
        e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
        e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
        e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
        e.closePath();
        $b(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 72.421875);
        e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
        e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
        e.closePath();
        $b(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.5, a * 163.421875);
        e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
        e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
        e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
        e.closePath();
        $b(e, c[8], c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79.5, a * 61.421875);
        e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
        e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
        e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
        e.closePath();
        $b(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 72.421875);
        e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
        e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
        e.closePath();
        $b(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96.5, a * 76.421875);
        e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
        e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
        e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
        e.closePath();
        $b(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 61.5, a * 78.421875);
        e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
        e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
        e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
        e.closePath();
        $b(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 127.421875);
        e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
        e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
        e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
        e.closePath();
        $b(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41.5, a * 134.421875);
        e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
        e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
        e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
        e.closePath();
        $b(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 78.5, a * 51.921875);
        e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
        e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
        e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
        e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
        e.closePath();
        $b(e, c[3], c[2], a * 4);
        id(e, a * 108.5, a * 148.421875, a * 9);
        $b(e, c[5]);
        id(e, a * 106.5, a * 144.421875, a * 3);
        $b(e, c[6]);
        id(e, a * 46.5, a * 148.421875, a * 9);
        $b(e, c[5]);
        id(e, a * 44.5, a * 144.421875, a * 3);
        $b(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 114.421875);
        e.bezierCurveTo(a * 121.5, a * 137.421875, a * 118.5, a * 133.421875, a * 108.5, a * 139.421875);
        e.bezierCurveTo(a * 94.5, a * 146.421875, a * 96.5, a * 148.421875, a * 95.5, a * 152.421875);
        $b(e, c[3], c[2], a * 4);
        e.beginPath();
        e.translate(0, a * -2);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35.5, a * 131.421875);
        e.bezierCurveTo(a * 36.5, a * 140.421875, a * 39.5, a * 140.421875, a * 49.5, a * 143.421875);
        e.bezierCurveTo(a * 59.5, a * 149.421875, a * 57.5, a * 151.421875, a * 59.5, a * 155.421875);
        $b(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 57.421875);
        e.bezierCurveTo(a * 101.5, a * 120.421875, a * 92.5, a * 127.421875, a * 78.5, a * 134.421875);
        e.bezierCurveTo(a * 51.5, a * 131.421875, a * 63.5, a * 102.421875, a * 70.5, a * 59.421875);
        e.bezierCurveTo(a * 75, a * 55.421875, a * 78.5, a * 52.421875, a * 79.5, a * 51.421875);
        e.closePath();
        $b(e, c[4]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79.5, a * 61.421875);
        e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
        e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
        e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
        e.closePath();
        $b(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 72.421875);
        e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
        e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
        e.closePath();
        $b(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 154.421875);
        e.bezierCurveTo(a * 93.5, a * 163.921875, a * 93.5, a * 163.921875, a * 99.5, a * 173.421875);
        e.bezierCurveTo(a * 95, a * 177.421875, a * 95, a * 177.421875, a * 90.5, a * 181.421875);
        e.bezierCurveTo(a * 89, a * 167.921875, a * 89, a * 167.921875, a * 87.5, a * 154.421875);
        e.closePath();
        $b(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 81.5, a * 164.421875);
        e.bezierCurveTo(a * 84, a * 172.921875, a * 84, a * 172.921875, a * 86.5, a * 181.421875);
        e.bezierCurveTo(a * 82.5, a * 182.421875, a * 82.5, a * 182.421875, a * 78.5, a * 183.421875);
        e.closePath();
        $b(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 164.421875);
        e.bezierCurveTo(a * 73.5, a * 173.921875, a * 73.5, a * 173.921875, a * 74.5, a * 183.421875);
        e.bezierCurveTo(a * 70.5, a * 182.921875, a * 70.5, a * 182.921875, a * 66.5, a * 182.421875);
        e.closePath();
        $b(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65.5, a * 156.421875);
        e.bezierCurveTo(a * 65, a * 168.421875, a * 65, a * 168.421875, a * 64.5, a * 180.421875);
        e.bezierCurveTo(a * 58.5, a * 177.421875, a * 58.5, a * 177.421875, a * 52.5, a * 174.421875);
        e.closePath();
        $b(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.5, a * 163.421875);
        e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
        e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
        e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
        e.closePath();
        $b(e, c[3], c[2], a * 4);
        return d;
    }
    function np(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 137;
        d.height = a * 129;
        e.globalAlpha = 0.4;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        $b(e, undefined, c[2], a * 40);
        e.globalAlpha = 0.4;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        $b(e, hg, c[1], a * 20);
        e.globalAlpha = 0.8;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        $b(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51.000030517578125, a * 37.9886474609375);
        e.bezierCurveTo(a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 85.9886474609375);
        e.bezierCurveTo(a * 75.50003051757812, a * 85.9886474609375, a * 75.50003051757812, a * 85.9886474609375, a * 100.00003051757812, a * 85.9886474609375);
        e.bezierCurveTo(a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 37.9886474609375);
        e.bezierCurveTo(a * 76.00003051757812, a * 37.9886474609375, a * 76.00003051757812, a * 37.9886474609375, a * 52.000030517578125, a * 37.9886474609375);
        e.closePath();
        $b(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 99.00003051757812, a * 38.9886474609375);
        e.bezierCurveTo(a * 93.50003051757812, a * 44.9886474609375, a * 93.50003051757812, a * 44.9886474609375, a * 88.00003051757812, a * 50.9886474609375);
        e.bezierCurveTo(a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 93.9886474609375);
        e.bezierCurveTo(a * 94.00003051757812, a * 90.4886474609375, a * 94.00003051757812, a * 90.4886474609375, a * 100.00003051757812, a * 86.9886474609375);
        e.closePath();
        $b(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.00003051757812, a * 49.625);
        e.bezierCurveTo(a * 61.000030517578125, a * 49.625, a * 61.000030517578125, a * 49.625, a * 35.000030517578125, a * 49.625);
        e.bezierCurveTo(a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 91.625);
        e.bezierCurveTo(a * 60.500030517578125, a * 91.625, a * 60.500030517578125, a * 91.625, a * 86.00003051757812, a * 91.625);
        e.bezierCurveTo(a * 86.50003051757812, a * 70.625, a * 86.50003051757812, a * 70.625, a * 87.00003051757812, a * 49.625);
        e.closePath();
        $b(e, c[1], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 47.000030517578125, a * 36.625);
        e.bezierCurveTo(a * 73.00003051757812, a * 37.125, a * 73.00003051757812, a * 37.125, a * 99.00003051757812, a * 37.625);
        e.bezierCurveTo(a * 93.50003051757812, a * 44.125, a * 93.50003051757812, a * 44.125, a * 88.00003051757812, a * 50.625);
        e.bezierCurveTo(a * 60.500030517578125, a * 50.125, a * 60.500030517578125, a * 50.125, a * 33.000030517578125, a * 49.625);
        e.closePath();
        $b(e, c[1], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53.000030517578125, a * 52.625);
        e.bezierCurveTo(a * 40.000030517578125, a * 54.625, a * 39.000030517578125, a * 59.625, a * 40.000030517578125, a * 67.625);
        e.bezierCurveTo(a * 45.000030517578125, a * 59.625, a * 48.000030517578125, a * 58.625, a * 54.000030517578125, a * 53.625);
        e.closePath();
        $b(e, c[3]);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        $b(e, sl, c[3], a * 4);
        return d;
    }
    function op(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 95;
        d.height = a * 85;
        if (c == 0) {
            e.translate(a * 7, a * 15);
            e.scale(0.9, 0.9);
            e.save();
            Zb(e, a * 0, a * 5, a * 90, a * 60, 10);
            $b(e, b[0]);
            e.globalCompositeOperation = "destination-out";
            id(e, a * 25, a * 40, a * 10);
            e.fill();
            id(e, a * 65, a * 40, a * 10);
            e.fill();
            e.restore();
            e.save();
            Zb(e, 0, 0, a * 90, a * 60, a * 10);
            $b(e, b[1]);
            e.globalCompositeOperation = "destination-out";
            id(e, a * 25, a * 40, a * 10);
            e.fill();
            id(e, a * 65, a * 40, a * 10);
            e.fill();
            e.restore();
        } else if (c == 1) {
            e.scale(0.8, 0.8);
            e.translate(a * 15, a * 33);
            e.save();
            e.scale(0.56, 0.56);
            e.translate(a * -39, a * -60);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 32.5, a * 50.642852783203125);
            e.bezierCurveTo(a * 83, a * 69.64285278320312, a * 83, a * 69.64285278320312, a * 133.5, a * 88.64285278320312);
            e.bezierCurveTo(a * 93, a * 92.64285278320312, a * 93, a * 92.64285278320312, a * 52.5, a * 96.64285278320312);
            e.bezierCurveTo(a * 30.5, a * 100.64285278320312, a * 36.5, a * 94.64285278320312, a * 32.5, a * 84.64285278320312);
            e.bezierCurveTo(a * 21.5, a * 45.642852783203125, a * 24.5, a * 48.642852783203125, a * 31.5, a * 50.642852783203125);
            e.closePath();
            $b(e, b[1]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 116.5, a * 85.64285278320312);
            e.bezierCurveTo(a * 160.5, a * 67.14285278320312, a * 160.5, a * 67.14285278320312, a * 204.5, a * 48.642852783203125);
            e.bezierCurveTo(a * 220.5, a * 42.642852783203125, a * 208.5, a * 68.64285278320312, a * 205.5, a * 85.64285278320312);
            e.bezierCurveTo(a * 202.5, a * 98.64285278320312, a * 199.5, a * 98.64285278320312, a * 188.5, a * 100.64285278320312);
            e.closePath();
            $b(e, b[1]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 166.5, a * 68.64285278320312);
            e.bezierCurveTo(a * 147.5, a * 72.64285278320312, a * 145.5, a * 73.64285278320312, a * 142.5, a * 62.642852783203125);
            e.bezierCurveTo(a * 121.5, a * 12.642852783203125, a * 122.5, a * 5.642852783203125, a * 117.5, a * 15.642852783203125);
            e.bezierCurveTo(a * 105.5, a * 40.642852783203125, a * 105.5, a * 40.642852783203125, a * 93.5, a * 65.64285278320312);
            e.bezierCurveTo(a * 89.5, a * 74.64285278320312, a * 84.5, a * 72.64285278320312, a * 73.5, a * 74.64285278320312);
            e.bezierCurveTo(a * 98, a * 87.64285278320312, a * 98, a * 87.64285278320312, a * 122.5, a * 100.64285278320312);
            e.closePath();
            $b(e, b[1]);
            e.restore();
            e.save();
            Zb(e, 0, a * 15, a * 90, a * 50, a * 10);
            $b(e, b[0]);
            Zb(e, 0, a * 10, a * 90, a * 50, a * 10);
            $b(e, b[1]);
            e.globalCompositeOperation = "destination-out";
            id(e, a * 25, a * 40, a * 10);
            e.fill();
            id(e, a * 65, a * 40, a * 10);
            e.fill();
            e.restore();
        }
        return d;
    }
    function ap(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 170;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * -10, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 4.109375);
        e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
        e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
        e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
        e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * 10, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 4.109375);
        e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
        e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
        e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
        e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
        e.closePath();
        $b(e, c[1], c[2], a * 10);
        return d;
    }
    function rp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 170;
        e.translate(0, a * -170);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 159.5, a * 322.0625);
        e.bezierCurveTo(a * 240.5, a * 293.0625, a * 240.5, a * 293.0625, a * 321.5, a * 264.0625);
        e.bezierCurveTo(a * 276.5, a * 230.0625, a * 276.5, a * 230.0625, a * 231.5, a * 196.0625);
        e.bezierCurveTo(a * 158.5, a * 221.5625, a * 158.5, a * 221.5625, a * 85.5, a * 247.0625);
        e.closePath();
        $b(e, c[0], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212.5, a * 270.0625);
        e.bezierCurveTo(a * 235, a * 261.5625, a * 235, a * 261.5625, a * 257.5, a * 253.0625);
        e.closePath();
        $b(e, undefined, c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 193.5, a * 226.0625);
        e.bezierCurveTo(a * 204.5, a * 242.0625, a * 242.5, a * 237.0625, a * 251.5, a * 225.0625);
        e.bezierCurveTo(a * 246.5, a * 195.0625, a * 205.5, a * 190.0625, a * 193.5, a * 227.0625);
        e.closePath();
        $b(e, c[2], c[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 164.5, a * 245.0625);
        e.bezierCurveTo(a * 182.5, a * 264.0625, a * 252.5, a * 258.0625, a * 276.5, a * 244.0625);
        e.bezierCurveTo(a * 265.5, a * 226.0625, a * 244.5, a * 231.0625, a * 229.5, a * 230.0625);
        e.bezierCurveTo(a * 205.5, a * 227.0625, a * 175.5, a * 202.0625, a * 162.5, a * 244.0625);
        e.closePath();
        $b(e, c[2], c[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115.5, a * 260.0625);
        e.bezierCurveTo(a * 134.5, a * 279.0625, a * 170.5, a * 275.0625, a * 191.5, a * 257.0625);
        e.bezierCurveTo(a * 174.5, a * 208.0625, a * 142.5, a * 197.0625, a * 116.5, a * 259.0625);
        e.closePath();
        $b(e, c[2], c[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 152.5, a * 278.0625);
        e.bezierCurveTo(a * 165.5, a * 294.0625, a * 200.5, a * 287.0625, a * 216.5, a * 278.0625);
        e.bezierCurveTo(a * 206.5, a * 247.0625, a * 173.5, a * 233.0625, a * 153.5, a * 276.0625);
        e.closePath();
        $b(e, c[2], c[3], a * 12);
        return d;
    }
    const sp = 0;
    function hp(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 170;
        f.height = b * 200;
        g.translate(b * 5, b * 15);
        if (e == 1) {
            g.translate(0, b * -5);
            id(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
            $b(g, d[1], d[5], b * 20);
            id(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
            $b(g, d[1], d[5], b * 20);
            g.save();
            g.translate(b * 77.00003051757812, b * 31.267044067382812);
            Zb(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
            g.restore();
            $b(g, d[1], d[5], b * 20);
            g.save();
            g.translate(b * 77.00003051757812, b * 13.267044067382812);
            Zb(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
            g.restore();
            $b(g, d[1], d[5], b * 20);
        }
        id(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
        $b(g, d[1], d[2], b * 7);
        id(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
        $b(g, d[1], d[2], b * 7);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 18.000030517578125, b * 105.85795593261719);
        g.bezierCurveTo(b * 134.00003051757812, b * 104.85795593261719, b * 77.00003051757812, b * 104.85795593261719, b * 136.00003051757812, b * 103.85795593261719);
        g.closePath();
        $b(g, d[1], d[2], b * 8);
        id(g, b * 77.00003051757812, b * 104.6761474609375, b * 32.55764119219941);
        $b(g, d[1], d[2], b * 8);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 78.00003051757812, b * 112.03977966308594);
        g.bezierCurveTo(b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 62.03977966308594);
        g.closePath();
        $b(g, d[3], d[2], b * 8);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 78.00003051757812, b * 48.03977966308594);
        g.bezierCurveTo(b * 82.00003051757812, b * 55.53977966308594, b * 82.00003051757812, b * 55.53977966308594, b * 86.00003051757812, b * 63.03977966308594);
        g.bezierCurveTo(b * 78.00003051757812, b * 63.03977966308594, b * 78.00003051757812, b * 63.03977966308594, b * 70.00003051757812, b * 63.03977966308594);
        g.closePath();
        $b(g, d[3], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 80.00003051757812, b * 111.6761474609375);
        g.bezierCurveTo(b * 95.00003051757812, b * 97.1761474609375, b * 95.00003051757812, b * 97.1761474609375, b * 110.00003051757812, b * 82.6761474609375);
        g.closePath();
        $b(g, d[3], d[2], b * 8);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 107.00003051757812, b * 76.6761474609375);
        g.bezierCurveTo(b * 111.50003051757812, b * 82.6761474609375, b * 111.50003051757812, b * 82.6761474609375, b * 116.00003051757812, b * 88.6761474609375);
        g.bezierCurveTo(b * 118.50003051757812, b * 81.6761474609375, b * 118.50003051757812, b * 81.6761474609375, b * 121.00003051757812, b * 74.6761474609375);
        g.closePath();
        $b(g, d[3], d[2], b * 4);
        id(g, b * 77.00003051757812, b * 105.03977966308594, b * 15.556349186104045);
        $b(g, d[3], d[2], b * 4);
        g.save();
        g.translate(b * 77.00003051757812, b * 31.267044067382812);
        g.rotate(0);
        Zb(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
        g.restore();
        $b(g, d[1], d[2], b * 7);
        g.save();
        g.translate(b * 77.00003051757812, b * 13.267044067382812);
        g.rotate(0);
        Zb(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
        g.restore();
        $b(g, d[1], d[2], b * 7);
        return f;
    }
    function lp(a, b, c) {
        Lj(Db, a, b, c);
        const d = Qn(Ib[0], Ib[1], Ib[2], Ib[0]);
        sr(Ib[1], Ib[2], Ib[0]);
        return d ^ 34630;
    }
    function gp() {
        new Date().getTime();
        function b(a) {
            var b = 0;
            var c = 0;
            for (var d = 0; d < a.length; d++) {
                var e = a.charAt(d);
                if (e !== "_" && d !== 5) {
                    if (e === "1") {
                        b += Math.pow(2, c);
                    }
                    c++;
                }
            }
            return b;
        }
        ⵠΔⵠΔⵠᐃΔᐃⵠ();
        ᐃΔ[1026] = [ᐃⲆ.ᐃΔΔᐃᐃⲆⲆ, ᐃⲆ.ᐃΔⲆⵠᐃᐃⵠ];
        ᐃΔ[1025] = [];
        ᐃΔ[1025][Hr.ΔᐃΔ] = [];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("000_010_000")] = [ᐃⲆ.ΔΔⵠⵠᐃ, ᐃⲆ.Δᐃⵠᐃᐃ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("000_010_010")] = ᐃΔ[1025][Hr.ΔᐃΔ][b("000_010_000")];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("000_011_000")] = ᐃΔ[1025][Hr.ΔᐃΔ][b("000_010_000")];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("000_011_010")] = [ᐃⲆ.ⵠᐃΔⲆΔ, ᐃⲆ.ⵠΔΔᐃΔ, ᐃⲆ.Δᐃⵠᐃᐃ, ᐃⲆ.ΔΔⵠⵠᐃ, ᐃⲆ.ⵠⵠⵠᐃᐃΔⵠ, ᐃⲆ.ᐃᐃΔⲆⲆⵠΔ, ᐃⲆ.ⲆΔΔⲆⲆⲆᐃ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("000_011_011")] = [ᐃⲆ.ᐃⲆⲆⲆΔΔΔ, ᐃⲆ.ⵠᐃΔⲆΔ, ᐃⲆ.ⵠΔΔᐃΔ, ᐃⲆ.Δᐃⵠᐃᐃ, ᐃⲆ.ΔΔⵠⵠᐃ, ᐃⲆ.ⵠⵠⵠᐃᐃΔⵠ, ᐃⲆ.ᐃᐃΔⲆⲆⵠΔ, ᐃⲆ.ⲆΔΔⲆⲆⲆᐃ, ᐃⲆ.ΔⵠⲆⵠΔ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("000_110_000")] = [ᐃⲆ.ᐃⲆᐃⲆⵠ, ᐃⲆ.Δᐃⵠᐃᐃ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("000_110_010")] = [ᐃⲆ.ᐃΔΔⵠⵠ, ᐃⲆ.ᐃⲆᐃⲆⵠ, ᐃⲆ.ⲆᐃᐃⲆᐃ, ᐃⲆ.Δᐃⵠᐃᐃ, ᐃⲆ.ΔΔⵠⵠᐃ, ᐃⲆ.ΔⵠⲆⵠΔ, ᐃⲆ.ΔⲆⵠⵠⵠ, ᐃⲆ.ΔΔⲆΔΔΔⵠ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("000_110_110")] = [ᐃⲆ.ᐃΔΔⵠⵠ, ᐃⲆ.ⲆⲆΔΔΔⲆⵠⲆⲆ, ᐃⲆ.ΔⲆΔⵠΔⲆⵠ, ᐃⲆ.ᐃⲆᐃⲆⵠ, ᐃⲆ.ⲆᐃᐃⲆᐃ, ᐃⲆ.Δᐃⵠᐃᐃ, ᐃⲆ.ΔⵠⲆⵠΔ, ᐃⲆ.ΔⲆⵠⵠⵠ, ᐃⲆ.ΔΔⲆΔΔΔⵠ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("000_111_000")] = [ᐃⲆ.ᐃⲆᐃⲆⵠ, ᐃⲆ.ⲆᐃᐃⲆᐃ, ᐃⲆ.ᐃᐃᐃⲆⵠΔⵠ, ᐃⲆ.ⵠⵠⲆΔⲆᐃᐃ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("000_111_111")] = [ᐃⲆ.ᐃⲆᐃⲆⵠ, ᐃⲆ.ΔⲆΔⵠΔⲆⵠ, ᐃⲆ.ᐃΔΔⵠⵠ, ᐃⲆ.ⵠΔΔᐃΔ, ᐃⲆ.ⵠᐃΔⲆΔ, ᐃⲆ.ᐃⲆⲆⲆΔΔΔ, ᐃⲆ.ⲆⵠⵠⵠΔΔΔ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("010_010_000")] = [ᐃⲆ.Δᐃⵠᐃᐃ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("010_010_010")] = [ᐃⲆ.ΔⲆΔᐃⲆΔᐃ, ᐃⲆ.Δᐃⵠᐃᐃ, ᐃⲆ.ΔΔⵠⵠᐃ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("010_011_000")] = [ᐃⲆ.ΔᐃⲆΔⲆ, ᐃⲆ.Δᐃⵠᐃᐃ, ᐃⲆ.ΔΔⵠⵠᐃ, ᐃⲆ.ΔⲆⵠⵠⵠ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("010_110_000")] = [ᐃⲆ.ᐃⲆᐃⲆⵠ, ᐃⲆ.ⲆᐃᐃⲆᐃ, ᐃⲆ.Δᐃⵠᐃᐃ, ᐃⲆ.ΔⲆⵠⵠⵠ, ᐃⲆ.ⵠΔᐃΔΔ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("010_110_110")] = [ᐃⲆ.ΔⲆΔⲆⲆ, ᐃⲆ.ΔᐃⲆΔⲆ, ᐃⲆ.ⵠᐃΔⲆΔ, ᐃⲆ.ⵠΔΔᐃΔ, ᐃⲆ.ᐃΔΔⵠⵠ, ᐃⲆ.ΔⲆΔⵠΔⲆⵠ, ᐃⲆ.ᐃⲆᐃⲆⵠ, ᐃⲆ.ⲆⵠⵠⵠΔΔΔ, ᐃⲆ.ⲆⲆⲆⵠⲆᐃΔ, ᐃⲆ.ΔⲆΔᐃⲆΔᐃ, ᐃⲆ.ⲆᐃᐃⲆᐃ, ᐃⲆ.ᐃᐃᐃⲆⵠΔⵠ, ᐃⲆ.ⵠⵠⲆΔⲆᐃᐃ, ᐃⲆ.Δᐃⵠᐃᐃ, ᐃⲆ.ΔΔⵠⵠᐃ, ᐃⲆ.ⵠⵠⵠᐃᐃΔⵠ, ᐃⲆ.ᐃᐃΔⲆⲆⵠΔ, ᐃⲆ.ⲆΔΔⲆⲆⲆᐃ, ᐃⲆ.ΔⵠⲆⵠΔ, ᐃⲆ.ΔⲆⵠⵠⵠ, ᐃⲆ.ⵠΔᐃΔΔ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("010_011_010")] = ᐃΔ[1025][Hr.ΔᐃΔ][b("010_110_110")];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("010_011_011")] = ᐃΔ[1025][Hr.ΔᐃΔ][b("010_110_110")];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("000_111_011")] = ᐃΔ[1025][Hr.ΔᐃΔ][b("010_110_110")];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("010_110_010")] = ᐃΔ[1025][Hr.ΔᐃΔ][b("010_110_110")];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("010_111_000")] = ᐃΔ[1025][Hr.ΔᐃΔ][b("010_110_110")];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("010_111_010")] = ᐃΔ[1025][Hr.ΔᐃΔ][b("010_110_110")];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("010_111_011")] = ᐃΔ[1025][Hr.ΔᐃΔ][b("010_110_110")];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("010_111_110")] = ᐃΔ[1025][Hr.ΔᐃΔ][b("010_110_110")];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("010_111_111")] = ᐃΔ[1025][Hr.ΔᐃΔ][b("010_110_110")];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("000_111_110")] = ᐃΔ[1025][Hr.ΔᐃΔ][b("010_110_110")];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("000_111_010")] = ᐃΔ[1025][Hr.ΔᐃΔ][b("010_110_110")];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("011_011_000")] = [ᐃⲆ.ᐃΔΔΔⲆΔΔ, ᐃⲆ.ΔⲆΔⲆⲆ, ᐃⲆ.ΔᐃⲆΔⲆ, ᐃⲆ.Δᐃⵠᐃᐃ, ᐃⲆ.ΔΔⵠⵠᐃ, ᐃⲆ.ΔⲆⵠⵠⵠ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("011_011_010")] = [ᐃⲆ.ᐃΔΔΔⲆΔΔ, ᐃⲆ.ΔⲆΔⲆⲆ, ᐃⲆ.ΔᐃⲆΔⲆ, ᐃⲆ.ᐃⲆᐃⲆⵠ, ᐃⲆ.ⲆᐃᐃⲆᐃ, ᐃⲆ.ᐃᐃᐃⲆⵠΔⵠ, ᐃⲆ.ⵠⵠⲆΔⲆᐃᐃ, ᐃⲆ.Δᐃⵠᐃᐃ, ᐃⲆ.ΔΔⵠⵠᐃ, ᐃⲆ.ΔⲆⵠⵠⵠ, ᐃⲆ.ⵠΔᐃΔΔ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("011_011_011")] = [ᐃⲆ.ⵠΔΔᐃΔ, ᐃⲆ.ⵠᐃΔⲆΔ, ᐃⲆ.ᐃⲆⲆⲆΔΔΔ, ᐃⲆ.ΔᐃⲆΔⲆ, ᐃⲆ.ΔⲆΔⲆⲆ, ᐃⲆ.ᐃΔΔΔⲆΔΔ, ᐃⲆ.ⲆⲆⲆⵠⲆᐃΔ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("011_111_000")] = ᐃΔ[1025][Hr.ΔᐃΔ][b("011_011_010")];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("011_111_010")] = [ᐃⲆ.ᐃΔΔΔⲆΔΔ, ᐃⲆ.ΔⲆΔⲆⲆ, ᐃⲆ.ΔᐃⲆΔⲆ, ᐃⲆ.ⵠᐃΔⲆΔ, ᐃⲆ.ⵠΔΔᐃΔ, ᐃⲆ.ᐃΔΔⵠⵠ, ᐃⲆ.ᐃⲆᐃⲆⵠ, ᐃⲆ.ⲆⵠⵠⵠΔΔΔ, ᐃⲆ.ⲆⲆⲆⵠⲆᐃΔ, ᐃⲆ.ΔⲆΔᐃⲆΔᐃ, ᐃⲆ.ⲆᐃᐃⲆᐃ, ᐃⲆ.ᐃᐃᐃⲆⵠΔⵠ, ᐃⲆ.ⵠⵠⲆΔⲆᐃᐃ, ᐃⲆ.Δᐃⵠᐃᐃ, ᐃⲆ.ΔΔⵠⵠᐃ, ᐃⲆ.ⵠⵠⵠᐃᐃΔⵠ, ᐃⲆ.ᐃᐃΔⲆⲆⵠΔ, ᐃⲆ.ⲆΔΔⲆⲆⲆᐃ, ᐃⲆ.ΔⵠⲆⵠΔ, ᐃⲆ.ΔⲆⵠⵠⵠ, ᐃⲆ.ⵠΔᐃΔΔ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("011_111_011")] = ᐃΔ[1025][Hr.ΔᐃΔ][b("011_111_010")];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("011_111_110")] = ᐃΔ[1025][Hr.ΔᐃΔ][b("011_111_010")];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("011_111_111")] = [ᐃⲆ.ᐃΔΔΔⲆΔΔ, ᐃⲆ.ΔⲆΔⲆⲆ, ᐃⲆ.ΔᐃⲆΔⲆ, ᐃⲆ.ᐃⲆⲆⲆΔΔΔ, ᐃⲆ.ⵠᐃΔⲆΔ, ᐃⲆ.ⵠΔΔᐃΔ, ᐃⲆ.ᐃΔΔⵠⵠ, ᐃⲆ.ΔⲆΔⵠΔⲆⵠ, ᐃⲆ.ᐃⲆᐃⲆⵠ, ᐃⲆ.ⲆⵠⵠⵠΔΔΔ, ᐃⲆ.ⲆⲆⲆⵠⲆᐃΔ, ᐃⲆ.ΔⲆΔᐃⲆΔᐃ, ᐃⲆ.ⲆᐃᐃⲆᐃ, ᐃⲆ.ᐃᐃᐃⲆⵠΔⵠ, ᐃⲆ.ⵠⵠⲆΔⲆᐃᐃ, ᐃⲆ.Δᐃⵠᐃᐃ, ᐃⲆ.ΔΔⵠⵠᐃ, ᐃⲆ.ⵠⵠⵠᐃᐃΔⵠ, ᐃⲆ.ᐃᐃΔⲆⲆⵠΔ, ᐃⲆ.ⲆΔΔⲆⲆⲆᐃ, ᐃⲆ.ΔⵠⲆⵠΔ, ᐃⲆ.ΔⲆⵠⵠⵠ, ᐃⲆ.ⵠΔᐃΔΔ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("110_110_000")] = [ᐃⲆ.ⵠⵠⵠⲆⲆΔⲆ, ᐃⲆ.ᐃⲆᐃⲆⵠ, ᐃⲆ.ΔΔΔⲆⵠΔΔ, ᐃⲆ.ⲆᐃᐃⲆᐃ, ᐃⲆ.Δᐃⵠᐃᐃ, ᐃⲆ.ⵠΔᐃΔΔ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("110_110_010")] = [ᐃⲆ.ᐃΔΔⵠⵠ, ᐃⲆ.ⵠⵠⵠⲆⲆΔⲆ, ᐃⲆ.ᐃⲆᐃⲆⵠ, ᐃⲆ.ΔⲆΔᐃⲆΔᐃ, ᐃⲆ.ⲆᐃᐃⲆᐃ, ᐃⲆ.Δᐃⵠᐃᐃ, ᐃⲆ.ΔⵠⲆⵠΔ, ᐃⲆ.ⵠΔᐃΔΔ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("110_110_110")] = [ᐃⲆ.ᐃΔΔⵠⵠ, ᐃⲆ.ΔⲆΔⵠΔⲆⵠ, ᐃⲆ.ⵠⵠⵠⲆⲆΔⲆ, ᐃⲆ.ᐃⲆᐃⲆⵠ, ᐃⲆ.ΔⲆΔᐃⲆΔᐃ, ᐃⲆ.ⲆᐃᐃⲆᐃ, ᐃⲆ.Δᐃⵠᐃᐃ, ᐃⲆ.ΔⵠⲆⵠΔ, ᐃⲆ.ⵠΔᐃΔΔ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("110_111_000")] = [ᐃⲆ.ΔⲆΔⲆⲆ, ᐃⲆ.ΔᐃⲆΔⲆ, ᐃⲆ.ⵠⵠⵠⲆⲆΔⲆ, ᐃⲆ.ᐃⲆᐃⲆⵠ, ᐃⲆ.ΔΔΔⲆⵠΔΔ, ᐃⲆ.ΔⵠᐃΔⵠΔᐃ, ᐃⲆ.ⲆᐃᐃⲆᐃ, ᐃⲆ.ᐃᐃᐃⲆⵠΔⵠ, ᐃⲆ.ⵠⵠⲆΔⲆᐃᐃ, ᐃⲆ.Δᐃⵠᐃᐃ, ᐃⲆ.ΔΔⵠⵠᐃ, ᐃⲆ.ΔⲆⵠⵠⵠ, ᐃⲆ.ⵠΔᐃΔΔ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("110_111_110")] = [ᐃⲆ.ΔⲆΔⲆⲆ, ᐃⲆ.ΔᐃⲆΔⲆ, ᐃⲆ.ⵠᐃΔⲆΔ, ᐃⲆ.ⵠΔΔᐃΔ, ᐃⲆ.ᐃΔΔⵠⵠ, ᐃⲆ.ΔⲆΔⵠΔⲆⵠ, ᐃⲆ.ⵠⵠⵠⲆⲆΔⲆ, ᐃⲆ.ᐃⲆᐃⲆⵠ, ᐃⲆ.ⲆⵠⵠⵠΔΔΔ, ᐃⲆ.ΔⵠᐃΔⵠΔᐃ, ᐃⲆ.ⲆⲆⲆⵠⲆᐃΔ, ᐃⲆ.ΔⲆΔᐃⲆΔᐃ, ᐃⲆ.ⲆᐃᐃⲆᐃ, ᐃⲆ.ᐃᐃᐃⲆⵠΔⵠ, ᐃⲆ.ⵠⵠⲆΔⲆᐃᐃ, ᐃⲆ.Δᐃⵠᐃᐃ, ᐃⲆ.ΔΔⵠⵠᐃ, ᐃⲆ.ⵠⵠⵠᐃᐃΔⵠ, ᐃⲆ.ᐃᐃΔⲆⲆⵠΔ, ᐃⲆ.ⲆΔΔⲆⲆⲆᐃ, ᐃⲆ.ΔⵠⲆⵠΔ, ᐃⲆ.ΔⲆⵠⵠⵠ, ᐃⲆ.ⵠΔᐃΔΔ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("110_111_111")] = ᐃΔ[1025][Hr.ΔᐃΔ][b("110_111_110")];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("110_111_011")] = ᐃΔ[1025][Hr.ΔᐃΔ][b("110_111_110")];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("110_111_010")] = ᐃΔ[1025][Hr.ΔᐃΔ][b("110_111_110")];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("111_111_110")] = [ᐃⲆ.ⵠΔᐃΔΔ, ᐃⲆ.ΔⲆⵠⵠⵠ, ᐃⲆ.ΔⵠⲆⵠΔ, ᐃⲆ.ⲆΔΔⲆⲆⲆᐃ, ᐃⲆ.ᐃᐃΔⲆⲆⵠΔ, ᐃⲆ.ⵠⵠⵠᐃᐃΔⵠ, ᐃⲆ.ΔΔⵠⵠᐃ, ᐃⲆ.Δᐃⵠᐃᐃ, ᐃⲆ.ⵠⵠⲆΔⲆᐃᐃ, ᐃⲆ.ᐃᐃᐃⲆⵠΔⵠ, ᐃⲆ.ⲆᐃᐃⲆᐃ, ᐃⲆ.ΔⲆΔᐃⲆΔᐃ, ᐃⲆ.ⲆⲆⲆⵠⲆᐃΔ, ᐃⲆ.ΔⵠᐃΔⵠΔᐃ, ᐃⲆ.ⲆⵠⵠⵠΔΔΔ, ᐃⲆ.ᐃⲆᐃⲆⵠ, ᐃⲆ.ⵠⵠⵠⲆⲆΔⲆ, ᐃⲆ.ᐃΔΔⵠⵠ, ᐃⲆ.ⵠΔΔᐃΔ, ᐃⲆ.ⵠᐃΔⲆΔ, ᐃⲆ.ΔᐃⲆΔⲆ, ᐃⲆ.ΔⲆΔⲆⲆ, ᐃⲆ.ᐃΔΔΔⲆΔΔ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("111_111_011")] = ᐃΔ[1025][Hr.ΔᐃΔ][b("111_111_110")];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("111_111_000")] = [ᐃⲆ.ΔΔΔⲆⵠΔΔ, ᐃⲆ.ᐃⲆᐃⲆⵠ, ᐃⲆ.ⵠⵠⵠⲆⲆΔⲆ, ᐃⲆ.ΔᐃⲆΔⲆ, ᐃⲆ.ΔⲆΔⲆⲆ, ᐃⲆ.ᐃΔΔΔⲆΔΔ, ᐃⲆ.ΔⵠᐃΔⵠΔᐃ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("111_111_111")] = [ᐃⲆ.ᐃΔΔΔⲆΔΔ, ᐃⲆ.ΔⲆΔⲆⲆ, ᐃⲆ.ΔᐃⲆΔⲆ, ᐃⲆ.ᐃⲆⲆⲆΔΔΔ, ᐃⲆ.ⵠᐃΔⲆΔ, ᐃⲆ.ⵠΔΔᐃΔ, ᐃⲆ.ᐃΔΔⵠⵠ, ᐃⲆ.ΔⲆΔⵠΔⲆⵠ, ᐃⲆ.ⵠⵠⵠⲆⲆΔⲆ, ᐃⲆ.ᐃⲆᐃⲆⵠ, ᐃⲆ.ⲆⵠⵠⵠΔΔΔ, ᐃⲆ.ⲆⲆⲆⵠⲆᐃΔ, ᐃⲆ.ΔⲆΔᐃⲆΔᐃ, ᐃⲆ.ⲆᐃᐃⲆᐃ, ᐃⲆ.ᐃᐃᐃⲆⵠΔⵠ, ᐃⲆ.ⵠⵠⲆΔⲆᐃᐃ, ᐃⲆ.Δᐃⵠᐃᐃ, ᐃⲆ.ΔΔⵠⵠᐃ, ᐃⲆ.ⵠⵠⵠᐃᐃΔⵠ, ᐃⲆ.ᐃᐃΔⲆⲆⵠΔ, ᐃⲆ.ⲆΔΔⲆⲆⲆᐃ, ᐃⲆ.ΔⵠⲆⵠΔ, ᐃⲆ.ΔⲆⵠⵠⵠ, ᐃⲆ.ⵠΔᐃΔΔ];
        ᐃΔ[1025][Hr.ΔᐃΔ][b("111_111_010")] = ᐃΔ[1025][Hr.ΔᐃΔ][b("111_111_110")];
        ᐃΔ[1025][Hr.Δⵠⵠ] = [];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("000_010_000")] = [ᐃⲆ.ᐃⲆᐃⲆᐃ, ᐃⲆ.ⲆⲆⲆⵠᐃ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("000_010_010")] = ᐃΔ[1025][Hr.Δⵠⵠ][b("000_010_000")];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("000_011_000")] = ᐃΔ[1025][Hr.Δⵠⵠ][b("000_010_000")];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("000_011_010")] = [ᐃⲆ.ΔᐃΔⲆⲆ, ᐃⲆ.ᐃⲆⲆⵠⲆ, ᐃⲆ.ⲆⲆⲆⵠᐃ, ᐃⲆ.ᐃⲆᐃⲆᐃ, ᐃⲆ.ⲆⲆⲆΔⵠⲆᐃ, ᐃⲆ.ⵠⲆΔᐃⲆⲆⲆ, ᐃⲆ.ⵠⵠⵠᐃΔⲆᐃ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("000_011_011")] = [ᐃⲆ.ᐃⵠⲆⲆⵠⲆᐃ, ᐃⲆ.ΔᐃΔⲆⲆ, ᐃⲆ.ᐃⲆⲆⵠⲆ, ᐃⲆ.ⲆⲆⲆⵠᐃ, ᐃⲆ.ᐃⲆᐃⲆᐃ, ᐃⲆ.ⲆⲆⲆΔⵠⲆᐃ, ᐃⲆ.ⵠⲆΔᐃⲆⲆⲆ, ᐃⲆ.ⵠⵠⵠᐃΔⲆᐃ, ᐃⲆ.ⲆΔΔⵠⵠ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("000_110_000")] = [ᐃⲆ.ᐃΔΔⵠⲆ, ᐃⲆ.ⲆⲆⲆⵠᐃ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("000_110_010")] = [ᐃⲆ.ΔⵠⲆᐃⲆ, ᐃⲆ.ᐃΔΔⵠⲆ, ᐃⲆ.ⲆΔⵠⵠᐃ, ᐃⲆ.ⲆⲆⲆⵠᐃ, ᐃⲆ.ᐃⲆᐃⲆᐃ, ᐃⲆ.ⲆΔΔⵠⵠ, ᐃⲆ.ⲆⲆⵠᐃΔ, ᐃⲆ.ⵠᐃΔⵠⵠᐃᐃ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("000_110_110")] = [ᐃⲆ.ΔⵠⲆᐃⲆ, ᐃⲆ.ᐃᐃⵠᐃⵠⵠⵠⲆⲆ, ᐃⲆ.ⵠⵠⲆⲆᐃᐃⲆ, ᐃⲆ.ᐃΔΔⵠⲆ, ᐃⲆ.ⲆΔⵠⵠᐃ, ᐃⲆ.ⲆⲆⲆⵠᐃ, ᐃⲆ.ⲆΔΔⵠⵠ, ᐃⲆ.ⲆⲆⵠᐃΔ, ᐃⲆ.ⵠᐃΔⵠⵠᐃᐃ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("000_111_000")] = [ᐃⲆ.ᐃΔΔⵠⲆ, ᐃⲆ.ⲆΔⵠⵠᐃ, ᐃⲆ.ΔΔᐃⵠᐃᐃΔ, ᐃⲆ.ⲆᐃᐃⵠᐃΔⲆ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("000_111_111")] = [ᐃⲆ.ᐃΔΔⵠⲆ, ᐃⲆ.ⵠⵠⲆⲆᐃᐃⲆ, ᐃⲆ.ΔⵠⲆᐃⲆ, ᐃⲆ.ᐃⲆⲆⵠⲆ, ᐃⲆ.ΔᐃΔⲆⲆ, ᐃⲆ.ᐃⵠⲆⲆⵠⲆᐃ, ᐃⲆ.ΔⲆⵠᐃⵠⲆᐃ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("010_010_000")] = [ᐃⲆ.ⲆⲆⲆⵠᐃ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("010_010_010")] = [ᐃⲆ.ⵠⵠΔⵠΔᐃΔ, ᐃⲆ.ⲆⲆⲆⵠᐃ, ᐃⲆ.ᐃⲆᐃⲆᐃ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("010_011_000")] = [ᐃⲆ.ΔⵠᐃΔΔ, ᐃⲆ.ⲆⲆⲆⵠᐃ, ᐃⲆ.ᐃⲆᐃⲆᐃ, ᐃⲆ.ⲆⲆⵠᐃΔ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("010_110_000")] = [ᐃⲆ.ᐃΔΔⵠⲆ, ᐃⲆ.ⲆΔⵠⵠᐃ, ᐃⲆ.ⲆⲆⲆⵠᐃ, ᐃⲆ.ⲆⲆⵠᐃΔ, ᐃⲆ.ᐃⲆΔⲆΔ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("010_110_110")] = [ᐃⲆ.ᐃᐃⲆΔⵠ, ᐃⲆ.ΔⵠᐃΔΔ, ᐃⲆ.ΔᐃΔⲆⲆ, ᐃⲆ.ᐃⲆⲆⵠⲆ, ᐃⲆ.ΔⵠⲆᐃⲆ, ᐃⲆ.ⵠⵠⲆⲆᐃᐃⲆ, ᐃⲆ.ᐃΔΔⵠⲆ, ᐃⲆ.ΔⲆⵠᐃⵠⲆᐃ, ᐃⲆ.ⲆⵠΔΔⵠⲆⲆ, ᐃⲆ.ⵠⵠΔⵠΔᐃΔ, ᐃⲆ.ⲆΔⵠⵠᐃ, ᐃⲆ.ΔΔᐃⵠᐃᐃΔ, ᐃⲆ.ⲆᐃᐃⵠᐃΔⲆ, ᐃⲆ.ⲆⲆⲆⵠᐃ, ᐃⲆ.ᐃⲆᐃⲆᐃ, ᐃⲆ.ⲆⲆⲆΔⵠⲆᐃ, ᐃⲆ.ⵠⲆΔᐃⲆⲆⲆ, ᐃⲆ.ⵠⵠⵠᐃΔⲆᐃ, ᐃⲆ.ⲆΔΔⵠⵠ, ᐃⲆ.ⲆⲆⵠᐃΔ, ᐃⲆ.ᐃⲆΔⲆΔ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("010_011_010")] = ᐃΔ[1025][Hr.Δⵠⵠ][b("010_110_110")];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("010_011_011")] = ᐃΔ[1025][Hr.Δⵠⵠ][b("010_110_110")];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("000_111_011")] = ᐃΔ[1025][Hr.Δⵠⵠ][b("010_110_110")];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("010_110_010")] = ᐃΔ[1025][Hr.Δⵠⵠ][b("010_110_110")];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("010_111_000")] = ᐃΔ[1025][Hr.Δⵠⵠ][b("010_110_110")];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("010_111_010")] = ᐃΔ[1025][Hr.Δⵠⵠ][b("010_110_110")];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("010_111_011")] = ᐃΔ[1025][Hr.Δⵠⵠ][b("010_110_110")];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("010_111_110")] = ᐃΔ[1025][Hr.Δⵠⵠ][b("010_110_110")];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("010_111_111")] = ᐃΔ[1025][Hr.Δⵠⵠ][b("010_110_110")];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("000_111_110")] = ᐃΔ[1025][Hr.Δⵠⵠ][b("010_110_110")];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("000_111_010")] = ᐃΔ[1025][Hr.Δⵠⵠ][b("010_110_110")];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("011_011_000")] = [ᐃⲆ.ΔⲆᐃⲆⲆΔⲆ, ᐃⲆ.ᐃᐃⲆΔⵠ, ᐃⲆ.ΔⵠᐃΔΔ, ᐃⲆ.ⲆⲆⲆⵠᐃ, ᐃⲆ.ᐃⲆᐃⲆᐃ, ᐃⲆ.ⲆⲆⵠᐃΔ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("011_011_010")] = [ᐃⲆ.ΔⲆᐃⲆⲆΔⲆ, ᐃⲆ.ᐃᐃⲆΔⵠ, ᐃⲆ.ΔⵠᐃΔΔ, ᐃⲆ.ᐃΔΔⵠⲆ, ᐃⲆ.ⲆΔⵠⵠᐃ, ᐃⲆ.ΔΔᐃⵠᐃᐃΔ, ᐃⲆ.ⲆᐃᐃⵠᐃΔⲆ, ᐃⲆ.ⲆⲆⲆⵠᐃ, ᐃⲆ.ᐃⲆᐃⲆᐃ, ᐃⲆ.ⲆⲆⵠᐃΔ, ᐃⲆ.ᐃⲆΔⲆΔ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("011_011_011")] = [ᐃⲆ.ᐃⲆⲆⵠⲆ, ᐃⲆ.ΔᐃΔⲆⲆ, ᐃⲆ.ᐃⵠⲆⲆⵠⲆᐃ, ᐃⲆ.ΔⵠᐃΔΔ, ᐃⲆ.ᐃᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆⲆΔⲆ, ᐃⲆ.ⲆⵠΔΔⵠⲆⲆ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("011_111_000")] = ᐃΔ[1025][Hr.Δⵠⵠ][b("011_011_010")];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("011_111_010")] = [ᐃⲆ.ΔⲆᐃⲆⲆΔⲆ, ᐃⲆ.ᐃᐃⲆΔⵠ, ᐃⲆ.ΔⵠᐃΔΔ, ᐃⲆ.ΔᐃΔⲆⲆ, ᐃⲆ.ᐃⲆⲆⵠⲆ, ᐃⲆ.ΔⵠⲆᐃⲆ, ᐃⲆ.ᐃΔΔⵠⲆ, ᐃⲆ.ΔⲆⵠᐃⵠⲆᐃ, ᐃⲆ.ⲆⵠΔΔⵠⲆⲆ, ᐃⲆ.ⵠⵠΔⵠΔᐃΔ, ᐃⲆ.ⲆΔⵠⵠᐃ, ᐃⲆ.ΔΔᐃⵠᐃᐃΔ, ᐃⲆ.ⲆᐃᐃⵠᐃΔⲆ, ᐃⲆ.ⲆⲆⲆⵠᐃ, ᐃⲆ.ᐃⲆᐃⲆᐃ, ᐃⲆ.ⲆⲆⲆΔⵠⲆᐃ, ᐃⲆ.ⵠⲆΔᐃⲆⲆⲆ, ᐃⲆ.ⵠⵠⵠᐃΔⲆᐃ, ᐃⲆ.ⲆΔΔⵠⵠ, ᐃⲆ.ⲆⲆⵠᐃΔ, ᐃⲆ.ᐃⲆΔⲆΔ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("011_111_011")] = ᐃΔ[1025][Hr.Δⵠⵠ][b("011_111_010")];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("011_111_110")] = ᐃΔ[1025][Hr.Δⵠⵠ][b("011_111_010")];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("011_111_111")] = [ᐃⲆ.ΔⲆᐃⲆⲆΔⲆ, ᐃⲆ.ᐃᐃⲆΔⵠ, ᐃⲆ.ΔⵠᐃΔΔ, ᐃⲆ.ᐃⵠⲆⲆⵠⲆᐃ, ᐃⲆ.ΔᐃΔⲆⲆ, ᐃⲆ.ᐃⲆⲆⵠⲆ, ᐃⲆ.ΔⵠⲆᐃⲆ, ᐃⲆ.ⵠⵠⲆⲆᐃᐃⲆ, ᐃⲆ.ᐃΔΔⵠⲆ, ᐃⲆ.ΔⲆⵠᐃⵠⲆᐃ, ᐃⲆ.ⲆⵠΔΔⵠⲆⲆ, ᐃⲆ.ⵠⵠΔⵠΔᐃΔ, ᐃⲆ.ⲆΔⵠⵠᐃ, ᐃⲆ.ΔΔᐃⵠᐃᐃΔ, ᐃⲆ.ⲆᐃᐃⵠᐃΔⲆ, ᐃⲆ.ⲆⲆⲆⵠᐃ, ᐃⲆ.ᐃⲆᐃⲆᐃ, ᐃⲆ.ⲆⲆⲆΔⵠⲆᐃ, ᐃⲆ.ⵠⲆΔᐃⲆⲆⲆ, ᐃⲆ.ⵠⵠⵠᐃΔⲆᐃ, ᐃⲆ.ⲆΔΔⵠⵠ, ᐃⲆ.ⲆⲆⵠᐃΔ, ᐃⲆ.ᐃⲆΔⲆΔ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("110_110_000")] = [ᐃⲆ.ΔΔᐃⵠⵠΔⵠ, ᐃⲆ.ᐃΔΔⵠⲆ, ᐃⲆ.ᐃΔⲆⲆΔⵠⵠ, ᐃⲆ.ⲆΔⵠⵠᐃ, ᐃⲆ.ⲆⲆⲆⵠᐃ, ᐃⲆ.ᐃⲆΔⲆΔ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("110_110_010")] = [ᐃⲆ.ΔⵠⲆᐃⲆ, ᐃⲆ.ΔΔᐃⵠⵠΔⵠ, ᐃⲆ.ᐃΔΔⵠⲆ, ᐃⲆ.ⵠⵠΔⵠΔᐃΔ, ᐃⲆ.ⲆΔⵠⵠᐃ, ᐃⲆ.ⲆⲆⲆⵠᐃ, ᐃⲆ.ⲆΔΔⵠⵠ, ᐃⲆ.ᐃⲆΔⲆΔ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("110_110_110")] = [ᐃⲆ.ΔⵠⲆᐃⲆ, ᐃⲆ.ⵠⵠⲆⲆᐃᐃⲆ, ᐃⲆ.ΔΔᐃⵠⵠΔⵠ, ᐃⲆ.ᐃΔΔⵠⲆ, ᐃⲆ.ⵠⵠΔⵠΔᐃΔ, ᐃⲆ.ⲆΔⵠⵠᐃ, ᐃⲆ.ⲆⲆⲆⵠᐃ, ᐃⲆ.ⲆΔΔⵠⵠ, ᐃⲆ.ᐃⲆΔⲆΔ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("110_111_000")] = [ᐃⲆ.ᐃᐃⲆΔⵠ, ᐃⲆ.ΔⵠᐃΔΔ, ᐃⲆ.ΔΔᐃⵠⵠΔⵠ, ᐃⲆ.ᐃΔΔⵠⲆ, ᐃⲆ.ᐃΔⲆⲆΔⵠⵠ, ᐃⲆ.ᐃⲆⵠⵠᐃⵠⲆ, ᐃⲆ.ⲆΔⵠⵠᐃ, ᐃⲆ.ΔΔᐃⵠᐃᐃΔ, ᐃⲆ.ⲆᐃᐃⵠᐃΔⲆ, ᐃⲆ.ⲆⲆⲆⵠᐃ, ᐃⲆ.ᐃⲆᐃⲆᐃ, ᐃⲆ.ⲆⲆⵠᐃΔ, ᐃⲆ.ᐃⲆΔⲆΔ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("110_111_110")] = [ᐃⲆ.ᐃᐃⲆΔⵠ, ᐃⲆ.ΔⵠᐃΔΔ, ᐃⲆ.ΔᐃΔⲆⲆ, ᐃⲆ.ᐃⲆⲆⵠⲆ, ᐃⲆ.ΔⵠⲆᐃⲆ, ᐃⲆ.ⵠⵠⲆⲆᐃᐃⲆ, ᐃⲆ.ΔΔᐃⵠⵠΔⵠ, ᐃⲆ.ᐃΔΔⵠⲆ, ᐃⲆ.ΔⲆⵠᐃⵠⲆᐃ, ᐃⲆ.ᐃⲆⵠⵠᐃⵠⲆ, ᐃⲆ.ⲆⵠΔΔⵠⲆⲆ, ᐃⲆ.ⵠⵠΔⵠΔᐃΔ, ᐃⲆ.ⲆΔⵠⵠᐃ, ᐃⲆ.ΔΔᐃⵠᐃᐃΔ, ᐃⲆ.ⲆᐃᐃⵠᐃΔⲆ, ᐃⲆ.ⲆⲆⲆⵠᐃ, ᐃⲆ.ᐃⲆᐃⲆᐃ, ᐃⲆ.ⲆⲆⲆΔⵠⲆᐃ, ᐃⲆ.ⵠⲆΔᐃⲆⲆⲆ, ᐃⲆ.ⵠⵠⵠᐃΔⲆᐃ, ᐃⲆ.ⲆΔΔⵠⵠ, ᐃⲆ.ⲆⲆⵠᐃΔ, ᐃⲆ.ᐃⲆΔⲆΔ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("110_111_111")] = ᐃΔ[1025][Hr.Δⵠⵠ][b("110_111_110")];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("110_111_011")] = ᐃΔ[1025][Hr.Δⵠⵠ][b("110_111_110")];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("110_111_010")] = ᐃΔ[1025][Hr.Δⵠⵠ][b("110_111_110")];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("111_111_110")] = [ᐃⲆ.ᐃⲆΔⲆΔ, ᐃⲆ.ⲆⲆⵠᐃΔ, ᐃⲆ.ⲆΔΔⵠⵠ, ᐃⲆ.ⵠⵠⵠᐃΔⲆᐃ, ᐃⲆ.ⵠⲆΔᐃⲆⲆⲆ, ᐃⲆ.ⲆⲆⲆΔⵠⲆᐃ, ᐃⲆ.ᐃⲆᐃⲆᐃ, ᐃⲆ.ⲆⲆⲆⵠᐃ, ᐃⲆ.ⲆᐃᐃⵠᐃΔⲆ, ᐃⲆ.ΔΔᐃⵠᐃᐃΔ, ᐃⲆ.ⲆΔⵠⵠᐃ, ᐃⲆ.ⵠⵠΔⵠΔᐃΔ, ᐃⲆ.ⲆⵠΔΔⵠⲆⲆ, ᐃⲆ.ᐃⲆⵠⵠᐃⵠⲆ, ᐃⲆ.ΔⲆⵠᐃⵠⲆᐃ, ᐃⲆ.ᐃΔΔⵠⲆ, ᐃⲆ.ΔΔᐃⵠⵠΔⵠ, ᐃⲆ.ΔⵠⲆᐃⲆ, ᐃⲆ.ᐃⲆⲆⵠⲆ, ᐃⲆ.ΔᐃΔⲆⲆ, ᐃⲆ.ΔⵠᐃΔΔ, ᐃⲆ.ᐃᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆⲆΔⲆ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("111_111_011")] = ᐃΔ[1025][Hr.Δⵠⵠ][b("111_111_110")];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("111_111_000")] = [ᐃⲆ.ᐃΔⲆⲆΔⵠⵠ, ᐃⲆ.ᐃΔΔⵠⲆ, ᐃⲆ.ΔΔᐃⵠⵠΔⵠ, ᐃⲆ.ΔⵠᐃΔΔ, ᐃⲆ.ᐃᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆⲆΔⲆ, ᐃⲆ.ᐃⲆⵠⵠᐃⵠⲆ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("111_111_111")] = [ᐃⲆ.ΔⲆᐃⲆⲆΔⲆ, ᐃⲆ.ᐃᐃⲆΔⵠ, ᐃⲆ.ΔⵠᐃΔΔ, ᐃⲆ.ᐃⵠⲆⲆⵠⲆᐃ, ᐃⲆ.ΔᐃΔⲆⲆ, ᐃⲆ.ᐃⲆⲆⵠⲆ, ᐃⲆ.ΔⵠⲆᐃⲆ, ᐃⲆ.ⵠⵠⲆⲆᐃᐃⲆ, ᐃⲆ.ΔΔᐃⵠⵠΔⵠ, ᐃⲆ.ᐃΔΔⵠⲆ, ᐃⲆ.ΔⲆⵠᐃⵠⲆᐃ, ᐃⲆ.ⲆⵠΔΔⵠⲆⲆ, ᐃⲆ.ⵠⵠΔⵠΔᐃΔ, ᐃⲆ.ⲆΔⵠⵠᐃ, ᐃⲆ.ΔΔᐃⵠᐃᐃΔ, ᐃⲆ.ⲆᐃᐃⵠᐃΔⲆ, ᐃⲆ.ⲆⲆⲆⵠᐃ, ᐃⲆ.ᐃⲆᐃⲆᐃ, ᐃⲆ.ⲆⲆⲆΔⵠⲆᐃ, ᐃⲆ.ⵠⲆΔᐃⲆⲆⲆ, ᐃⲆ.ⵠⵠⵠᐃΔⲆᐃ, ᐃⲆ.ⲆΔΔⵠⵠ, ᐃⲆ.ⲆⲆⵠᐃΔ, ᐃⲆ.ᐃⲆΔⲆΔ];
        ᐃΔ[1025][Hr.Δⵠⵠ][b("111_111_010")] = ᐃΔ[1025][Hr.Δⵠⵠ][b("111_111_110")];
        ᐃΔ[1024] = [];
        ᐃΔ[1024][Hr.ΔᐃΔ] = [];
        ᐃΔ[1024][Hr.ΔᐃΔ][b("000_010_000")] = ᐃⲆ.ᐃᐃⵠⵠⲆᐃᐃ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("000_010_010")] = ᐃⲆ.ⲆⲆᐃΔᐃᐃⲆ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("000_011_000")] = ᐃⲆ.ⲆⵠΔΔⵠΔⵠ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("000_011_010")] = ᐃⲆ.ᐃⵠⲆⵠᐃⵠᐃ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("000_011_011")] = ᐃⲆ.ⵠⲆⲆᐃⵠⲆΔ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("000_110_000")] = ᐃⲆ.ΔᐃⲆᐃΔⲆⵠ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("000_110_010")] = ᐃⲆ.ᐃⵠⲆΔᐃᐃⵠ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("000_110_110")] = ᐃⲆ.ⵠᐃᐃⵠᐃΔᐃ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("000_111_000")] = ᐃⲆ.ΔΔⲆⵠⵠⵠⵠ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("000_111_010")] = ᐃⲆ.ⲆΔΔᐃⲆΔⵠ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("000_111_011")] = ᐃⲆ.ⲆⵠΔⵠΔᐃΔ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("000_111_110")] = ᐃⲆ.ⲆⵠⲆⲆΔⲆᐃ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("000_111_111")] = ᐃⲆ.ⵠΔᐃⵠⵠᐃⲆ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("010_010_000")] = ᐃⲆ.ⵠⵠⵠⲆᐃⲆΔ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("010_010_010")] = ᐃⲆ.ⲆⵠΔⲆⵠΔⲆ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("010_011_000")] = ᐃⲆ.ⲆΔⵠⲆⲆΔⵠ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("010_011_010")] = ᐃⲆ.ⲆⲆⲆⵠΔᐃΔ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("010_011_011")] = ᐃⲆ.ᐃⵠᐃⵠᐃⲆⵠ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("010_110_000")] = ᐃⲆ.ᐃᐃᐃᐃΔⵠᐃ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("010_110_010")] = ᐃⲆ.ⵠⵠⲆⵠⵠⲆΔ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("010_110_110")] = ᐃⲆ.Ⲇᐃᐃᐃᐃᐃⵠ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("010_111_000")] = ᐃⲆ.ⵠⲆⵠⵠᐃΔΔ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("010_111_010")] = ᐃⲆ.ᐃΔⲆⲆΔⲆⲆ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("010_111_011")] = ᐃⲆ.ΔΔⵠᐃⲆΔΔ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("010_111_110")] = ᐃⲆ.ⲆᐃⲆⵠⵠⲆⲆ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("010_111_111")] = ᐃⲆ.ΔⵠΔᐃⲆΔᐃ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("011_011_000")] = ᐃⲆ.ᐃΔⲆᐃΔⵠⲆ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("011_011_010")] = ᐃⲆ.ⲆΔⵠᐃᐃⵠⵠ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("011_011_011")] = ᐃⲆ.ᐃⵠⵠΔᐃⵠⵠ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("011_111_000")] = ᐃⲆ.ⵠⲆᐃⵠᐃⲆᐃ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("011_111_010")] = ᐃⲆ.ΔⵠⵠⵠΔⲆⲆ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("011_111_011")] = ᐃⲆ.ⲆⵠᐃΔⵠⲆⲆ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("011_111_110")] = ᐃⲆ.ΔⵠᐃᐃᐃⵠΔ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("011_111_111")] = ᐃⲆ.ΔⲆᐃⲆᐃⲆⵠ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("110_110_000")] = ᐃⲆ.ΔᐃΔⵠⵠⵠⲆ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("110_110_010")] = ᐃⲆ.Δⵠⵠⵠⵠⵠᐃ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("110_110_110")] = ᐃⲆ.ΔᐃⵠᐃⵠᐃⲆ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("110_111_000")] = ᐃⲆ.ᐃΔΔΔΔⵠⲆ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("110_111_010")] = ᐃⲆ.ΔⲆⲆΔΔᐃⲆ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("110_111_011")] = ᐃⲆ.ΔΔᐃᐃΔΔⵠ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("110_111_110")] = ᐃⲆ.ᐃᐃᐃΔⲆᐃⲆ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("110_111_111")] = ᐃⲆ.ΔⲆᐃⵠΔⵠⲆ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("111_111_011")] = ᐃⲆ.ⵠᐃᐃⵠⵠᐃⲆ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("111_111_110")] = ᐃⲆ.ⵠᐃΔⵠΔᐃΔ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("111_111_011")] = ᐃⲆ.ⵠᐃᐃⵠⵠᐃⲆ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("111_111_000")] = ᐃⲆ.ⵠΔⲆᐃᐃΔⲆ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("111_111_111")] = ᐃⲆ.ⲆⲆΔⵠΔⵠⵠ;
        ᐃΔ[1024][Hr.ΔᐃΔ][b("111_111_010")] = ᐃⲆ.ⵠⲆⲆⲆᐃᐃΔ;
        ᐃΔ[1024][Hr.Δⵠⵠ] = [];
        ᐃΔ[1024][Hr.Δⵠⵠ][b("000_010_000")] = ᐃⲆ.ΔⲆⵠᐃⲆⵠⲆ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("000_010_010")] = ᐃⲆ.ᐃᐃⵠⵠΔⲆⵠ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("000_011_000")] = ᐃⲆ.ⲆΔᐃΔᐃᐃⵠ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("000_011_010")] = ᐃⲆ.Δᐃᐃᐃᐃᐃⵠ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("000_011_011")] = ᐃⲆ.ΔⲆⲆΔⲆΔⵠ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("000_110_000")] = ᐃⲆ.ᐃⲆⲆΔⵠⲆⵠ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("000_110_010")] = ᐃⲆ.ΔⲆᐃᐃⵠⲆᐃΔᐃ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("000_110_110")] = ᐃⲆ.ⲆᐃⲆᐃᐃᐃΔᐃⲆ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("000_111_000")] = ᐃⲆ.ⲆΔⲆⲆⲆᐃⲆᐃᐃ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("000_111_010")] = ᐃⲆ.ⲆⵠⲆⵠⵠⵠᐃⵠΔ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("000_111_011")] = ᐃⲆ.ΔⲆΔΔⲆΔⲆᐃⲆ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("000_111_110")] = ᐃⲆ.ΔⵠᐃᐃⲆⵠⵠⲆⵠ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("000_111_111")] = ᐃⲆ.ⲆⲆΔΔⵠⵠΔⵠΔ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("010_010_000")] = ᐃⲆ.ⲆⵠⲆᐃⲆⲆᐃᐃΔ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("010_010_010")] = ᐃⲆ.ᐃⵠⲆΔⵠⵠⵠᐃⵠ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("010_011_000")] = ᐃⲆ.ΔᐃⵠⵠΔᐃⵠⲆᐃ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("010_011_010")] = ᐃⲆ.ΔⲆⲆⵠⲆⲆⵠⵠᐃ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("010_011_011")] = ᐃⲆ.ⵠⵠⵠⲆⵠᐃⵠᐃⵠ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("010_110_000")] = ᐃⲆ.ᐃᐃᐃⲆⲆⲆⲆΔᐃ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("010_110_010")] = ᐃⲆ.ΔΔⲆⲆⲆᐃⵠⵠⵠ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("010_110_110")] = ᐃⲆ.ⵠΔⲆΔⵠᐃΔⲆⲆ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("010_111_000")] = ᐃⲆ.ᐃᐃⲆΔⵠᐃᐃⵠⵠ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("010_111_010")] = ᐃⲆ.ᐃⵠΔΔΔⵠᐃᐃⲆ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("010_111_011")] = ᐃⲆ.ᐃⲆΔⵠΔᐃⲆᐃⲆ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("010_111_110")] = ᐃⲆ.ⲆⵠⵠΔⲆⲆⲆⵠⲆ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("010_111_111")] = ᐃⲆ.ⲆⵠΔⲆⲆΔⵠⲆᐃ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("011_011_000")] = ᐃⲆ.ΔΔᐃᐃⲆⲆⵠΔⲆ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("011_011_010")] = ᐃⲆ.ΔᐃⵠᐃᐃᐃⵠΔΔ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("011_011_011")] = ᐃⲆ.ⵠᐃΔΔᐃΔΔⵠΔ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("011_111_000")] = ᐃⲆ.ⵠᐃⵠᐃⲆⲆᐃⵠᐃ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("011_111_010")] = ᐃⲆ.ⲆΔⵠᐃⵠΔᐃⲆΔ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("011_111_011")] = ᐃⲆ.ᐃᐃᐃⲆΔΔⵠΔⲆ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("011_111_110")] = ᐃⲆ.ⲆⲆⲆⲆⵠⲆᐃΔⲆ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("011_111_111")] = ᐃⲆ.ⲆᐃᐃΔⵠᐃᐃⲆⲆ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("110_110_000")] = ᐃⲆ.ᐃᐃⲆⵠⵠⲆᐃⵠⲆ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("110_110_010")] = ᐃⲆ.ⲆΔΔⵠⲆΔⲆⲆΔ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("110_110_110")] = ᐃⲆ.Δᐃⵠᐃᐃᐃⵠⵠᐃ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("110_111_000")] = ᐃⲆ.ⲆᐃΔΔⵠᐃᐃⵠⵠ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("110_111_010")] = ᐃⲆ.ⲆⲆᐃᐃᐃᐃⵠⵠᐃ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("110_111_011")] = ᐃⲆ.ⲆⲆΔᐃⲆΔⵠᐃⵠ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("110_111_110")] = ᐃⲆ.ΔΔⲆⲆⲆⲆⵠΔⵠ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("110_111_111")] = ᐃⲆ.ⵠⵠΔᐃⵠⲆΔⵠᐃ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("111_111_011")] = ᐃⲆ.ΔᐃⵠⵠⵠⲆΔ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("111_111_110")] = ᐃⲆ.ᐃΔΔⲆⵠᐃⲆⲆⵠ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("111_111_011")] = ᐃⲆ.ΔᐃⵠⵠⵠⲆΔ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("111_111_000")] = ᐃⲆ.ⵠᐃⵠΔΔΔⲆᐃᐃ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("111_111_111")] = ᐃⲆ.ⵠΔⲆⲆⲆΔΔΔᐃ;
        ᐃΔ[1024][Hr.Δⵠⵠ][b("111_111_010")] = ᐃⲆ.ⵠᐃⵠⲆⲆⲆΔᐃΔ;
        ᐃΔ[32] = [];
        ᐃΔ[32][Hr.ΔᐃΔ] = ᐃⲆ.ⲆⵠⲆⵠⵠΔⵠ;
        ᐃΔ[32][Hr.Δⵠⵠ] = ᐃⲆ.ᐃⵠΔᐃΔᐃΔ;
        ᐃΔ[205] = [];
        ᐃΔ[205][Hr.ΔᐃΔ] = ᐃⲆ.ᐃΔⵠᐃᐃⵠᐃ;
        ᐃΔ[205][Hr.Δⵠⵠ] = ᐃⲆ.ΔⲆΔⲆΔΔⲆ;
        ᐃΔ[957] = [];
        ᐃΔ[957][Hr.ΔᐃΔ] = ᐃⲆ.ⵠΔᐃΔΔⲆΔ;
        ᐃΔ[957][Hr.Δⵠⵠ] = ᐃⲆ.ⲆᐃᐃⲆⵠᐃⵠ;
        ᐃΔ[207] = [];
        ᐃΔ[207][Hr.ΔᐃΔ] = ᐃⲆ.ᐃᐃΔΔᐃᐃᐃ;
        ᐃΔ[207][Hr.Δⵠⵠ] = ᐃⲆ.ᐃΔᐃⲆΔᐃΔ;
        ᐃΔ[954] = [];
        ᐃΔ[954][Hr.ΔᐃΔ] = ᐃⲆ.ⲆΔⲆᐃⲆⵠΔ;
        ᐃΔ[954][Hr.Δⵠⵠ] = ᐃⲆ.ⲆⵠⲆᐃⵠᐃΔ;
        ᐃΔ[958] = [];
        ᐃΔ[958][Hr.ΔᐃΔ] = ᐃⲆ.ⲆΔⵠⵠⲆΔⲆ;
        ᐃΔ[958][Hr.Δⵠⵠ] = ᐃⲆ.ᐃΔΔⵠΔⵠⲆ;
        ᐃΔ[209] = [];
        ᐃΔ[209][Hr.ΔᐃΔ] = ᐃⲆ.ⵠⲆΔᐃᐃᐃⲆ;
        ᐃΔ[209][Hr.Δⵠⵠ] = ᐃⲆ.ᐃᐃᐃΔΔΔΔ;
        ᐃΔ[971] = [];
        ᐃΔ[971][Hr.ΔᐃΔ] = ᐃⲆ.ᐃⵠⲆΔΔᐃⵠ;
        ᐃΔ[971][Hr.Δⵠⵠ] = ᐃⲆ.ⵠΔⲆΔΔΔᐃ;
        ᐃΔ[211] = [];
        ᐃΔ[211][Hr.ΔᐃΔ] = ᐃⲆ.ⵠΔΔⵠΔⵠⵠ;
        ᐃΔ[211][Hr.Δⵠⵠ] = ᐃⲆ.ΔⲆΔⵠⵠⲆⵠ;
        ᐃΔ[986] = [];
        ᐃΔ[986][Hr.ΔᐃΔ] = ᐃⲆ.ΔΔⲆⵠᐃΔᐃ;
        ᐃΔ[986][Hr.Δⵠⵠ] = ᐃⲆ.ᐃᐃⵠΔΔΔᐃ;
        ᐃΔ[989] = [];
        ᐃΔ[989][Hr.ΔᐃΔ] = [ᐃⲆ.ᐃⲆⵠⲆⵠᐃᐃ];
        ᐃΔ[989][Hr.Δⵠⵠ] = [ᐃⲆ.ᐃΔⲆⲆⲆΔⵠ];
        ᐃΔ[217] = [];
        ᐃΔ[217][Hr.ΔᐃΔ] = ᐃⲆ.ᐃΔΔⵠᐃⵠⵠ;
        ᐃΔ[217][Hr.Δⵠⵠ] = ᐃⲆ.ΔΔⵠΔᐃᐃⵠ;
        ᐃΔ[219] = [];
        ᐃΔ[219][Hr.ΔᐃΔ] = ᐃⲆ.ⵠⲆⲆⲆⵠⵠᐃ;
        ᐃΔ[219][Hr.Δⵠⵠ] = ᐃⲆ.ⵠⲆΔⲆⵠΔⲆ;
        ᐃΔ[218] = [];
        ᐃΔ[218][Hr.ΔᐃΔ] = ᐃⲆ.ΔᐃᐃⲆᐃⲆⲆ;
        ᐃΔ[218][Hr.Δⵠⵠ] = ᐃⲆ.ΔᐃΔᐃⵠᐃⵠ;
        ᐃΔ[212] = [];
        ᐃΔ[212][Hr.ΔᐃΔ] = ᐃⲆ.ⵠΔΔΔⵠⲆⵠ;
        ᐃΔ[212][Hr.Δⵠⵠ] = ᐃⲆ.ΔⲆᐃΔⲆΔⲆ;
        ᐃΔ[213] = [];
        ᐃΔ[213][Hr.ΔᐃΔ] = ᐃⲆ.ⲆⲆΔⲆᐃⵠⲆ;
        ᐃΔ[213][Hr.Δⵠⵠ] = ᐃⲆ.ⵠΔᐃⲆⵠⵠⵠ;
        ᐃΔ[214] = [];
        ᐃΔ[214][Hr.ΔᐃΔ] = ᐃⲆ.ⲆⲆⵠΔⲆⵠΔ;
        ᐃΔ[214][Hr.Δⵠⵠ] = ᐃⲆ.ᐃᐃΔΔΔⲆᐃ;
        ᐃΔ[215] = [];
        ᐃΔ[215][Hr.ΔᐃΔ] = ᐃⲆ.ⵠᐃᐃⲆᐃⵠⵠ;
        ᐃΔ[215][Hr.Δⵠⵠ] = ᐃⲆ.ᐃⵠⲆᐃᐃⲆᐃ;
        ᐃΔ[216] = [];
        ᐃΔ[216][Hr.ΔᐃΔ] = ᐃⲆ.ᐃⲆⲆⵠⲆⵠᐃ;
        ᐃΔ[216][Hr.Δⵠⵠ] = ᐃⲆ.ᐃⵠΔᐃⵠⲆᐃ;
        ᐃΔ[220] = [];
        ᐃΔ[220][Hr.ΔᐃΔ] = ᐃⲆ.ⲆⵠⵠΔᐃᐃⵠ;
        ᐃΔ[220][Hr.Δⵠⵠ] = ᐃⲆ.ΔⲆⵠᐃⲆᐃᐃ;
        ᐃΔ[1020] = [];
        ᐃΔ[1020][Hr.ΔᐃΔ] = ᐃⲆ.ΔΔᐃᐃᐃⲆΔ;
        ᐃΔ[1020][Hr.Δⵠⵠ] = ᐃⲆ.ΔⲆⲆΔΔᐃΔ;
        ᐃΔ[1021] = [];
        ᐃΔ[1021][Hr.ΔᐃΔ] = ᐃⲆ.ⲆᐃⲆⲆⲆⲆⵠ;
        ᐃΔ[1021][Hr.Δⵠⵠ] = ᐃⲆ.ᐃⲆⲆᐃⵠⲆⲆ;
        ᐃΔ[39] = [];
        ᐃΔ[39][Hr.ΔᐃΔ] = ᐃⲆ.ΔⵠᐃⵠΔᐃᐃ;
        ᐃΔ[39][Hr.Δⵠⵠ] = ᐃⲆ.ᐃⲆΔΔᐃⲆⲆ;
        ᐃΔ[1022] = ᐃⲆ.ⵠΔΔᐃΔΔᐃ;
        ᐃΔ[1023] = ᐃⲆ.ΔⵠΔᐃΔΔᐃ;
        ᐃΔ[1041] = [];
        ᐃΔ[1041][Hr.ΔᐃΔ] = [];
        ᐃΔ[1041][Hr.Δⵠⵠ] = [];
        ᐃΔ[1041][Hr.ΔᐃΔ].push(ᐃⲆ.ᐃᐃᐃⲆΔⲆᐃ);
        ᐃΔ[1041][Hr.ΔᐃΔ].push(ᐃⲆ.ⲆᐃⵠⲆⵠⵠⵠ);
        ᐃΔ[1041][Hr.ΔᐃΔ].push(ᐃⲆ.ⵠⲆΔΔᐃⲆΔ);
        ᐃΔ[1041][Hr.Δⵠⵠ].push(ᐃⲆ.ᐃΔⵠⲆΔⵠⲆ);
        ᐃΔ[1041][Hr.Δⵠⵠ].push(ᐃⲆ.ⵠΔⲆⲆᐃⲆᐃ);
        ᐃΔ[1041][Hr.Δⵠⵠ].push(ᐃⲆ.ᐃⵠⲆΔΔⵠᐃ);
        ᐃΔ[244] = [];
        ᐃΔ[244][Hr.ΔᐃΔ] = [];
        ᐃΔ[244][Hr.Δⵠⵠ] = [];
        ᐃΔ[244][Hr.ΔᐃΔ].push(ᐃⲆ.ⲆⵠΔⵠᐃΔⵠ);
        ᐃΔ[244][Hr.ΔᐃΔ].push(ᐃⲆ.ⵠⲆⲆⵠⲆΔⲆ);
        ᐃΔ[244][Hr.ΔᐃΔ].push(ᐃⲆ.ᐃⵠᐃⵠΔⵠⲆ);
        ᐃΔ[244][Hr.Δⵠⵠ].push(ᐃⲆ.ⲆΔΔⲆᐃᐃΔ);
        ᐃΔ[244][Hr.Δⵠⵠ].push(ᐃⲆ.ⲆⵠᐃⲆΔⵠⵠ);
        ᐃΔ[244][Hr.Δⵠⵠ].push(ᐃⲆ.ΔⵠΔⲆΔΔⵠ);
        ᐃΔ[1052] = [];
        ᐃΔ[1052][Hr.ΔᐃΔ] = [];
        ᐃΔ[1052][Hr.Δⵠⵠ] = [];
        ᐃΔ[1052][Hr.ΔᐃΔ].push(ᐃⲆ.ⵠΔⲆⵠΔᐃⵠ);
        ᐃΔ[1052][Hr.ΔᐃΔ].push(ᐃⲆ.ᐃⵠΔᐃⵠⵠⵠ);
        ᐃΔ[1052][Hr.ΔᐃΔ].push(ᐃⲆ.ΔᐃΔᐃⲆᐃⲆ);
        ᐃΔ[1052][Hr.ΔᐃΔ].push(ᐃⲆ.ⲆΔΔᐃⲆΔᐃ);
        ᐃΔ[1052][Hr.ΔᐃΔ].push(ᐃⲆ.ΔⵠⵠᐃᐃΔⵠ);
        ᐃΔ[1052][Hr.Δⵠⵠ].push(ᐃⲆ.ⲆⲆΔⲆᐃⵠⵠ);
        ᐃΔ[1052][Hr.Δⵠⵠ].push(ᐃⲆ.ⵠⲆⵠⲆⵠⲆⵠ);
        ᐃΔ[1052][Hr.Δⵠⵠ].push(ᐃⲆ.ΔⲆΔᐃⵠΔⲆ);
        ᐃΔ[1052][Hr.Δⵠⵠ].push(ᐃⲆ.ΔΔⵠⲆⵠⵠᐃ);
        ᐃΔ[1052][Hr.Δⵠⵠ].push(ᐃⲆ.ⵠΔᐃᐃᐃⲆΔ);
        ᐃΔ[450] = [];
        ᐃΔ[450][Hr.ΔᐃΔ] = ᐃⲆ.ⲆⲆⵠᐃᐃⲆΔ;
        ᐃΔ[450][Hr.Δⵠⵠ] = ᐃⲆ.ᐃᐃⵠΔΔⲆⵠ;
        ᐃΔ[453] = [];
        ᐃΔ[453][Hr.ΔᐃΔ] = ᐃⲆ.ⲆⲆΔⲆΔΔⲆ;
        ᐃΔ[453][Hr.Δⵠⵠ] = ᐃⲆ.ΔⲆⵠⲆΔΔᐃ;
        ᐃΔ[454] = [];
        ᐃΔ[454][Hr.ΔᐃΔ] = ᐃⲆ.ᐃΔᐃⵠⵠᐃⵠ;
        ᐃΔ[454][Hr.Δⵠⵠ] = ᐃⲆ.ⵠⲆᐃⲆⵠᐃᐃ;
        ᐃΔ[464] = ᐃⲆ.ΔᐃⲆᐃᐃᐃⵠ;
        ᐃΔ[468] = ᐃⲆ.ᐃΔⵠᐃΔⲆⵠ;
        ᐃΔ[469] = ᐃⲆ.ᐃⵠᐃΔᐃΔᐃ;
        ᐃΔ[20] = [];
        ᐃΔ[20][Hr.ΔᐃΔ] = ᐃⲆ.ᐃᐃᐃᐃⲆΔᐃ;
        ᐃΔ[20][Hr.Δⵠⵠ] = ᐃⲆ.ⲆⵠᐃⲆⵠᐃⵠ;
        ᐃΔ[920] = [];
        ᐃΔ[920][Hr.ΔᐃΔ] = ᐃⲆ.ΔᐃΔΔⲆⲆⵠ;
        ᐃΔ[920][Hr.Δⵠⵠ] = ᐃⲆ.ⲆᐃᐃΔΔⵠΔ;
        ᐃΔ[21] = [];
        ᐃΔ[21][Hr.ΔᐃΔ] = ᐃⲆ.ⲆⲆᐃᐃⵠᐃⵠ;
        ᐃΔ[21][Hr.Δⵠⵠ] = ᐃⲆ.ⲆⵠⵠⵠⲆᐃⵠ;
        ᐃΔ[924] = [];
        ᐃΔ[924][Hr.ΔᐃΔ] = ᐃⲆ.ΔᐃΔΔⲆⲆⵠ;
        ᐃΔ[924][Hr.Δⵠⵠ] = ᐃⲆ.ⲆᐃᐃΔΔⵠΔ;
        ᐃΔ[44] = [];
        ᐃΔ[44][Hr.ΔᐃΔ] = ᐃⲆ.ⲆⲆΔⵠⲆⲆᐃ;
        ᐃΔ[44][Hr.Δⵠⵠ] = ᐃⲆ.ⵠᐃᐃⲆⲆⲆᐃ;
        ᐃΔ[19] = [];
        ᐃΔ[19][Hr.ΔᐃΔ] = ᐃⲆ.ᐃᐃᐃΔⲆⵠᐃ;
        ᐃΔ[19][Hr.Δⵠⵠ] = ᐃⲆ.ⵠⲆΔⲆΔᐃΔ;
        ᐃΔ[34] = [];
        ᐃΔ[34][Hr.ΔᐃΔ] = ᐃⲆ.ⵠⲆⲆⲆΔᐃΔ;
        ᐃΔ[34][Hr.Δⵠⵠ] = ᐃⲆ.ᐃΔΔΔΔΔⲆ;
        ᐃΔ[17] = [];
        ᐃΔ[17][Hr.ΔᐃΔ] = ᐃⲆ.ᐃᐃᐃᐃⲆⲆᐃ;
        ᐃΔ[17][Hr.Δⵠⵠ] = ᐃⲆ.ⲆᐃΔⵠᐃⲆᐃ;
        ᐃΔ[63] = [];
        ᐃΔ[63][Hr.ΔᐃΔ] = ᐃⲆ.ᐃⲆᐃᐃΔᐃⲆ;
        ᐃΔ[63][Hr.Δⵠⵠ] = ᐃⲆ.ΔⲆΔᐃⲆⲆᐃ;
        ᐃΔ[60] = [];
        ᐃΔ[60][Hr.ΔᐃΔ] = ᐃⲆ.ⲆᐃⲆΔⲆᐃⵠ;
        ᐃΔ[60][Hr.Δⵠⵠ] = ᐃⲆ.ⵠᐃΔΔⲆᐃΔ;
        ᐃΔ[94] = [];
        ᐃΔ[94][Hr.ΔᐃΔ] = ᐃⲆ.ᐃΔⲆᐃⲆΔⲆΔⵠ;
        ᐃΔ[94][Hr.Δⵠⵠ] = ᐃⲆ.ⵠⲆⲆΔΔᐃΔⲆⲆ;
        ᐃΔ[95] = [];
        ᐃΔ[95][Hr.ΔᐃΔ] = ᐃⲆ.ⵠⲆⲆⲆᐃⵠⲆⲆⵠ;
        ᐃΔ[95][Hr.Δⵠⵠ] = ᐃⲆ.ⲆⲆΔΔᐃⵠᐃΔᐃ;
        ᐃΔ[96] = [];
        ᐃΔ[96][Hr.ΔᐃΔ] = ᐃⲆ.ΔΔⵠᐃⵠΔⵠΔⲆ;
        ᐃΔ[96][Hr.Δⵠⵠ] = ᐃⲆ.ΔⵠᐃⵠᐃⵠⵠᐃΔ;
        ᐃΔ[97] = [];
        ᐃΔ[97][Hr.ΔᐃΔ] = ᐃⲆ.ΔⲆΔᐃᐃⲆⲆⵠᐃ;
        ᐃΔ[97][Hr.Δⵠⵠ] = ᐃⲆ.ⵠΔⵠⵠΔΔᐃⲆᐃ;
        ᐃΔ[98] = [];
        ᐃΔ[98][Hr.ΔᐃΔ] = ᐃⲆ.ᐃᐃᐃⵠⵠⵠⵠᐃΔ;
        ᐃΔ[98][Hr.Δⵠⵠ] = ᐃⲆ.ᐃᐃΔΔⵠΔⲆⲆᐃ;
        ᐃΔ[99] = [];
        ᐃΔ[99][Hr.ΔᐃΔ] = ᐃⲆ.ᐃᐃⲆⵠᐃᐃⲆΔⵠ;
        ᐃΔ[99][Hr.Δⵠⵠ] = ᐃⲆ.ΔᐃⲆⵠᐃΔΔⵠΔ;
        ᐃΔ[90] = [];
        ᐃΔ[90][Hr.ΔᐃΔ] = ᐃⲆ.ᐃⲆⵠΔⲆΔΔ;
        ᐃΔ[90][Hr.Δⵠⵠ] = ᐃⲆ.ΔᐃᐃⲆΔⵠᐃ;
        ᐃΔ[91] = [];
        ᐃΔ[91][Hr.ΔᐃΔ] = ᐃⲆ.ⲆΔᐃⵠᐃΔΔ;
        ᐃΔ[91][Hr.Δⵠⵠ] = ᐃⲆ.ΔⵠΔᐃⵠᐃⲆ;
        ᐃΔ[71] = [];
        ᐃΔ[71][Hr.ΔᐃΔ] = ᐃⲆ.ⵠⵠⲆⵠⵠᐃᐃᐃⲆ;
        ᐃΔ[71][Hr.Δⵠⵠ] = ᐃⲆ.ⵠⲆⵠΔᐃᐃⲆⲆᐃ;
        ᐃΔ[72] = [];
        ᐃΔ[72][Hr.ΔᐃΔ] = ᐃⲆ.ᐃᐃΔᐃΔⲆⵠΔⵠ;
        ᐃΔ[72][Hr.Δⵠⵠ] = ᐃⲆ.ⲆΔᐃᐃⵠᐃⵠᐃⲆ;
        ᐃΔ[73] = [];
        ᐃΔ[73][Hr.ΔᐃΔ] = ᐃⲆ.ΔΔᐃᐃΔⲆᐃΔⲆ;
        ᐃΔ[73][Hr.Δⵠⵠ] = ᐃⲆ.ⵠᐃⵠⲆΔΔΔⲆⲆ;
        ᐃΔ[74] = [];
        ᐃΔ[74][Hr.ΔᐃΔ] = ᐃⲆ.ⲆΔⵠⲆᐃⵠⵠᐃⲆ;
        ᐃΔ[74][Hr.Δⵠⵠ] = ᐃⲆ.ΔⵠⵠΔⵠⵠⲆⵠⵠ;
        ᐃΔ[75] = [];
        ᐃΔ[75][Hr.ΔᐃΔ] = ᐃⲆ.ᐃⵠⵠⲆᐃΔᐃⲆᐃ;
        ᐃΔ[75][Hr.Δⵠⵠ] = ᐃⲆ.ⲆⵠᐃⵠⲆΔⲆⵠⲆ;
        ᐃΔ[76] = [];
        ᐃΔ[76][Hr.ΔᐃΔ] = ᐃⲆ.ⲆⲆⲆⲆⲆⲆⲆⲆᐃ;
        ᐃΔ[76][Hr.Δⵠⵠ] = ᐃⲆ.ⵠⲆΔⵠⵠᐃⲆⲆΔ;
        ᐃΔ[101] = [];
        ᐃΔ[101][Hr.ΔᐃΔ] = ᐃⲆ.ΔⵠⵠΔΔᐃⲆ;
        ᐃΔ[101][Hr.Δⵠⵠ] = ᐃⲆ.ᐃΔⵠΔⵠⲆⲆ;
        ᐃΔ[64] = [];
        ᐃΔ[64][Hr.ΔᐃΔ] = ᐃⲆ.ᐃᐃᐃⵠⵠⵠᐃⲆᐃ;
        ᐃΔ[64][Hr.Δⵠⵠ] = ᐃⲆ.ⲆᐃⵠᐃⵠΔΔΔⲆ;
        ᐃΔ[102] = [];
        ᐃΔ[102][Hr.ΔᐃΔ] = ᐃⲆ.ⲆᐃΔⵠΔΔⲆ;
        ᐃΔ[102][Hr.Δⵠⵠ] = ᐃⲆ.ᐃⵠᐃᐃᐃᐃΔ;
        ᐃΔ[65] = [];
        ᐃΔ[65][Hr.ΔᐃΔ] = ᐃⲆ.ⵠᐃⲆⲆⵠΔΔΔᐃ;
        ᐃΔ[65][Hr.Δⵠⵠ] = ᐃⲆ.ⵠΔⵠᐃⲆΔᐃⲆⲆ;
        ᐃΔ[103] = [];
        ᐃΔ[103][Hr.ΔᐃΔ] = ᐃⲆ.ⲆⵠᐃⲆⵠⵠⲆ;
        ᐃΔ[103][Hr.Δⵠⵠ] = ᐃⲆ.ΔⲆⲆΔⲆᐃⵠ;
        ᐃΔ[66] = [];
        ᐃΔ[66][Hr.ΔᐃΔ] = ᐃⲆ.ΔⲆΔΔΔⵠΔⲆᐃ;
        ᐃΔ[66][Hr.Δⵠⵠ] = ᐃⲆ.ⵠΔⲆⲆⲆΔΔΔⲆ;
        ᐃΔ[104] = [];
        ᐃΔ[104][Hr.ΔᐃΔ] = ᐃⲆ.ᐃᐃΔⲆⲆⵠⵠ;
        ᐃΔ[104][Hr.Δⵠⵠ] = ᐃⲆ.ΔⵠᐃⲆΔᐃΔ;
        ᐃΔ[67] = [];
        ᐃΔ[67][Hr.ΔᐃΔ] = ᐃⲆ.ⲆᐃⵠⲆⲆΔⵠᐃΔ;
        ᐃΔ[67][Hr.Δⵠⵠ] = ᐃⲆ.ⵠⵠΔⲆΔⵠⵠΔⵠ;
        ᐃΔ[105] = [];
        ᐃΔ[105][Hr.ΔᐃΔ] = ᐃⲆ.ᐃᐃⵠΔⵠⲆΔ;
        ᐃΔ[105][Hr.Δⵠⵠ] = ᐃⲆ.ᐃⵠΔⲆⲆⲆᐃ;
        ᐃΔ[68] = [];
        ᐃΔ[68][Hr.ΔᐃΔ] = ᐃⲆ.ᐃᐃΔⵠΔΔⵠⵠⲆ;
        ᐃΔ[68][Hr.Δⵠⵠ] = ᐃⲆ.ΔΔⵠᐃⵠᐃᐃΔⵠ;
        ᐃΔ[106] = [];
        ᐃΔ[106][Hr.ΔᐃΔ] = ᐃⲆ.ᐃⵠΔⲆⲆᐃᐃ;
        ᐃΔ[106][Hr.Δⵠⵠ] = ᐃⲆ.ⵠᐃⵠᐃⲆΔⵠᐃᐃ;
        ᐃΔ[69] = [];
        ᐃΔ[69][Hr.ΔᐃΔ] = ᐃⲆ.ΔⲆⵠΔⵠⵠⲆΔᐃ;
        ᐃΔ[69][Hr.Δⵠⵠ] = ᐃⲆ.ⲆⵠΔΔⲆᐃⲆⲆⲆ;
        ᐃΔ[107] = [];
        ᐃΔ[107][Hr.ΔᐃΔ] = ᐃⲆ.ⲆΔⲆᐃΔⵠⲆ;
        ᐃΔ[107][Hr.Δⵠⵠ] = ᐃⲆ.ΔᐃΔⲆⵠΔᐃ;
        ᐃΔ[70] = [];
        ᐃΔ[70][Hr.ΔᐃΔ] = ᐃⲆ.ΔΔΔᐃΔⵠⲆᐃᐃ;
        ᐃΔ[70][Hr.Δⵠⵠ] = ᐃⲆ.ΔᐃⵠΔⵠⲆⵠⵠⲆ;
        ᐃΔ[80] = [];
        ᐃΔ[80][Hr.ΔᐃΔ] = ᐃⲆ.ⵠΔᐃⲆⵠⲆⵠ;
        ᐃΔ[80][Hr.Δⵠⵠ] = ᐃⲆ.Ⲇᐃᐃᐃᐃⵠᐃ;
        ᐃΔ[81] = [];
        ᐃΔ[81][Hr.ΔᐃΔ] = ᐃⲆ.ⲆᐃⲆΔⵠᐃᐃ;
        ᐃΔ[81][Hr.Δⵠⵠ] = ᐃⲆ.ΔΔⲆⲆⲆⵠΔ;
        ᐃΔ[22] = [];
        ᐃΔ[22][Hr.ΔᐃΔ] = ᐃⲆ.ᐃΔΔᐃΔᐃⲆ;
        ᐃΔ[22][Hr.Δⵠⵠ] = ᐃⲆ.ᐃⲆΔΔⲆⵠⲆ;
        ᐃΔ[928] = [];
        ᐃΔ[928][Hr.ΔᐃΔ] = ᐃⲆ.ΔΔΔⵠⵠᐃⲆ;
        ᐃΔ[928][Hr.Δⵠⵠ] = ᐃⲆ.ⲆᐃⲆᐃⲆⵠᐃ;
        ᐃΔ[935] = [];
        ᐃΔ[935][Hr.ΔᐃΔ] = [];
        ᐃΔ[935][Hr.Δⵠⵠ] = [];
        ᐃΔ[935][Hr.ΔᐃΔ].push(ᐃⲆ.ΔⲆⲆⵠΔΔᐃΔⲆ);
        ᐃΔ[935][Hr.ΔᐃΔ].push(ᐃⲆ.ΔⵠⵠⵠⵠΔΔΔΔ);
        ᐃΔ[935][Hr.Δⵠⵠ].push(ᐃⲆ.ΔⵠⵠⵠⵠΔΔΔΔ);
        ᐃΔ[935][Hr.Δⵠⵠ].push(ᐃⲆ.ⲆΔᐃⵠⵠᐃᐃᐃⵠ);
        ᐃΔ[941] = [];
        ᐃΔ[941][Hr.ΔᐃΔ] = [];
        ᐃΔ[941][Hr.Δⵠⵠ] = [];
        ᐃΔ[941][Hr.ΔᐃΔ].push(ᐃⲆ.ᐃΔΔⵠᐃΔⵠ);
        ᐃΔ[941][Hr.ΔᐃΔ].push(ᐃⲆ.ᐃⵠⵠᐃⲆᐃⵠ);
        ᐃΔ[941][Hr.ΔᐃΔ].push(ᐃⲆ.ⵠⵠᐃⲆᐃⲆⵠ);
        ᐃΔ[941][Hr.Δⵠⵠ].push(ᐃⲆ.ⲆⵠΔⵠᐃⲆⵠ);
        ᐃΔ[941][Hr.Δⵠⵠ].push(ᐃⲆ.ΔΔⵠᐃᐃⵠⲆ);
        ᐃΔ[941][Hr.Δⵠⵠ].push(ᐃⲆ.ⲆΔⵠΔⲆⵠᐃ);
        ᐃΔ[53] = [];
        ᐃΔ[53][Hr.ΔᐃΔ] = ᐃⲆ.ⵠⵠⵠᐃⲆᐃⲆ;
        ᐃΔ[53][Hr.Δⵠⵠ] = ᐃⲆ.ΔⲆⲆⲆΔⵠⲆ;
        ᐃΔ[54] = [];
        ᐃΔ[54][Hr.ΔᐃΔ] = ᐃⲆ.ᐃᐃⲆΔⵠⵠⲆ;
        ᐃΔ[54][Hr.Δⵠⵠ] = ᐃⲆ.ⵠⲆᐃΔⵠΔᐃ;
        ᐃΔ[241] = [];
        ᐃΔ[241][Hr.ΔᐃΔ] = [];
        ᐃΔ[241][Hr.Δⵠⵠ] = [];
        ᐃΔ[241][Hr.ΔᐃΔ].push(ᐃⲆ.ⲆⲆᐃΔᐃᐃᐃ);
        ᐃΔ[241][Hr.ΔᐃΔ].push(ᐃⲆ.ⲆⵠⵠⵠΔⲆᐃ);
        ᐃΔ[241][Hr.ΔᐃΔ].push(ᐃⲆ.ΔⲆⲆⵠᐃⲆⲆ);
        ᐃΔ[241][Hr.Δⵠⵠ].push(ᐃⲆ.ᐃᐃⲆᐃⵠΔᐃ);
        ᐃΔ[241][Hr.Δⵠⵠ].push(ᐃⲆ.ⵠᐃⲆⵠⲆⲆΔ);
        ᐃΔ[241][Hr.Δⵠⵠ].push(ᐃⲆ.ᐃᐃΔᐃⲆⵠΔ);
        ᐃΔ[202] = [];
        ᐃΔ[202][Hr.ΔᐃΔ] = [];
        ᐃΔ[202][Hr.Δⵠⵠ] = [];
        ᐃΔ[202][Hr.ΔᐃΔ].push(ᐃⲆ.ⵠᐃⵠⵠΔⲆⵠ);
        ᐃΔ[202][Hr.ΔᐃΔ].push(ᐃⲆ.ΔⵠⵠⵠᐃⲆⵠ);
        ᐃΔ[202][Hr.ΔᐃΔ].push(ᐃⲆ.ᐃⲆⲆⲆⲆᐃⲆ);
        ᐃΔ[202][Hr.Δⵠⵠ].push(ᐃⲆ.ⵠⲆΔⲆⲆᐃⵠ);
        ᐃΔ[202][Hr.Δⵠⵠ].push(ᐃⲆ.ᐃⵠⵠᐃⵠⲆⲆ);
        ᐃΔ[202][Hr.Δⵠⵠ].push(ᐃⲆ.ⲆⵠⵠΔⲆᐃᐃ);
        ᐃΔ[203] = [];
        ᐃΔ[203][Hr.ΔᐃΔ] = [];
        ᐃΔ[203][Hr.Δⵠⵠ] = [];
        ᐃΔ[203][Hr.ΔᐃΔ].push(ᐃⲆ.ⵠΔⲆⲆⲆⲆⵠ);
        ᐃΔ[203][Hr.ΔᐃΔ].push(ᐃⲆ.ΔΔΔᐃΔΔᐃ);
        ᐃΔ[203][Hr.ΔᐃΔ].push(ᐃⲆ.ᐃⲆΔΔΔⵠⵠ);
        ᐃΔ[203][Hr.ΔᐃΔ].push(ᐃⲆ.ⲆⲆⲆⵠΔΔⲆ);
        ᐃΔ[203][Hr.ΔᐃΔ].push(ᐃⲆ.ΔⲆⵠΔⲆᐃⵠ);
        ᐃΔ[203][Hr.ΔᐃΔ].push(ᐃⲆ.ᐃᐃᐃᐃᐃⵠΔ);
        ᐃΔ[203][Hr.Δⵠⵠ].push(ᐃⲆ.ΔⵠΔⲆⲆΔⲆ);
        ᐃΔ[203][Hr.Δⵠⵠ].push(ᐃⲆ.ⲆᐃᐃⲆⵠⵠⲆ);
        ᐃΔ[203][Hr.Δⵠⵠ].push(ᐃⲆ.ᐃᐃΔᐃΔⵠⵠ);
        ᐃΔ[203][Hr.Δⵠⵠ].push(ᐃⲆ.ᐃⵠΔⲆΔᐃᐃ);
        ᐃΔ[203][Hr.Δⵠⵠ].push(ᐃⲆ.ⵠⲆⵠΔΔⲆᐃ);
        ᐃΔ[203][Hr.Δⵠⵠ].push(ᐃⲆ.ⲆⲆᐃⵠᐃⲆΔ);
        ᐃΔ[Hr.ᐃⵠᐃΔΔ] = [];
        ᐃΔ[Hr.ᐃⵠᐃΔΔ][Hr.ΔᐃΔ] = [];
        ᐃΔ[Hr.ᐃⵠᐃΔΔ][Hr.Δⵠⵠ] = [];
        ᐃΔ[Hr.ᐃⵠᐃΔΔ][Hr.ΔᐃΔ].push(ᐃⲆ.ⵠⵠΔⵠⲆᐃΔ);
        ᐃΔ[Hr.ᐃⵠᐃΔΔ][Hr.ΔᐃΔ].push(ᐃⲆ.ΔⵠᐃⵠΔΔᐃ);
        ᐃΔ[Hr.ᐃⵠᐃΔΔ][Hr.ΔᐃΔ].push(ᐃⲆ.ⵠΔⲆⵠᐃΔΔ);
        ᐃΔ[Hr.ᐃⵠᐃΔΔ][Hr.ΔᐃΔ].push(ᐃⲆ.ⵠⵠⵠᐃⵠⲆΔ);
        ᐃΔ[Hr.ᐃⵠᐃΔΔ][Hr.ΔᐃΔ].push(ᐃⲆ.ⵠΔΔⵠⲆᐃⲆ);
        ᐃΔ[Hr.ᐃⵠᐃΔΔ][Hr.ΔᐃΔ].push(ᐃⲆ.ᐃΔΔⲆᐃΔⵠ);
        ᐃΔ[Hr.ᐃⵠᐃΔΔ][Hr.Δⵠⵠ].push(ᐃⲆ.ᐃⲆᐃΔⲆⲆⵠ);
        ᐃΔ[Hr.ᐃⵠᐃΔΔ][Hr.Δⵠⵠ].push(ᐃⲆ.ΔΔᐃⵠΔⲆΔ);
        ᐃΔ[Hr.ᐃⵠᐃΔΔ][Hr.Δⵠⵠ].push(ᐃⲆ.ⵠΔⲆⲆΔⲆᐃ);
        ᐃΔ[Hr.ᐃⵠᐃΔΔ][Hr.Δⵠⵠ].push(ᐃⲆ.ⵠⵠⵠⵠΔⲆΔ);
        ᐃΔ[Hr.ᐃⵠᐃΔΔ][Hr.Δⵠⵠ].push(ᐃⲆ.ⵠᐃⲆΔⵠΔⵠ);
        ᐃΔ[Hr.ᐃⵠᐃΔΔ][Hr.Δⵠⵠ].push(ᐃⲆ.ᐃΔΔᐃⲆⵠᐃ);
        ᐃΔ[918] = [];
        ᐃΔ[918][Hr.ΔᐃΔ] = ᐃⲆ.ᐃΔⲆᐃΔΔΔ;
        ᐃΔ[918][Hr.Δⵠⵠ] = ᐃⲆ.ⵠⵠᐃᐃᐃⲆⲆ;
        ᐃΔ[919] = ᐃⲆ.ᐃᐃᐃⲆΔᐃΔ;
        ᐃΔ[56] = [];
        ᐃΔ[56][Hr.ΔᐃΔ] = ᐃⲆ.ᐃⲆⵠⵠⵠⵠⵠᐃⲆ;
        ᐃΔ[56][Hr.Δⵠⵠ] = ᐃⲆ.ⵠⵠᐃⵠⵠⵠⲆⵠΔ;
        ᐃΔ[223] = [];
        ᐃΔ[223][Hr.ΔᐃΔ] = ᐃⲆ.ⲆⲆΔⵠⵠΔᐃ;
        ᐃΔ[223][Hr.Δⵠⵠ] = ᐃⲆ.ΔΔᐃΔⵠΔⲆ;
        ᐃΔ[224] = [];
        ᐃΔ[224][Hr.ΔᐃΔ] = ᐃⲆ.ᐃΔⵠᐃⲆΔⵠ;
        ᐃΔ[224][Hr.Δⵠⵠ] = ᐃⲆ.ΔⲆⵠⲆΔⲆⲆ;
        ᐃΔ[236] = [];
        ᐃΔ[236][Hr.ΔᐃΔ] = ᐃⲆ.ᐃᐃⵠⵠΔⵠⵠ;
        ᐃΔ[236][Hr.Δⵠⵠ] = ᐃⲆ.ᐃΔΔⲆⵠΔⲆ;
        ᐃΔ[1033] = [];
        ᐃΔ[1033][Hr.ΔᐃΔ] = ᐃⲆ.ⵠΔΔΔᐃⲆⵠ;
        ᐃΔ[1033][Hr.Δⵠⵠ] = ᐃⲆ.ΔⲆⲆⲆΔᐃⲆ;
        ᐃΔ[1034] = ᐃⲆ.ⵠⲆⲆⵠΔΔΔ;
        ᐃΔ[1150] = [];
        ᐃΔ[1150][Hr.ΔᐃΔ] = ᐃⲆ.ΔⲆⲆᐃᐃΔⵠ;
        ᐃΔ[1150][Hr.Δⵠⵠ] = ᐃⲆ.ΔᐃᐃⵠⵠⲆΔ;
        ᐃΔ[1152] = [];
        ᐃΔ[1152][Hr.ΔᐃΔ] = ᐃⲆ.ᐃᐃᐃⵠΔⲆΔ;
        ᐃΔ[1152][Hr.Δⵠⵠ] = ᐃⲆ.ⵠΔⲆᐃⲆⵠᐃ;
        ᐃΔ[1149] = ᐃⲆ.ΔⵠΔⲆΔⵠΔ;
        ᐃΔ[1151] = ᐃⲆ.ΔⵠᐃΔΔⵠᐃ;
        ᐃΔ[1153] = ᐃⲆ.ⵠⲆΔᐃΔᐃⲆ;
        ᐃΔ[1143] = [];
        ᐃΔ[1143][Hr.ΔᐃΔ] = ᐃⲆ.ⵠᐃⲆⵠᐃᐃᐃ;
        ᐃΔ[1143][Hr.Δⵠⵠ] = ᐃⲆ.ⵠⲆⵠΔΔΔⵠ;
        ᐃΔ[1145] = [];
        ᐃΔ[1145][Hr.ΔᐃΔ] = ᐃⲆ.ΔᐃⲆᐃΔᐃᐃ;
        ᐃΔ[1145][Hr.Δⵠⵠ] = ᐃⲆ.ⵠⲆᐃᐃⵠᐃⲆ;
        ᐃΔ[1146] = [];
        ᐃΔ[1146][Hr.ΔᐃΔ] = ᐃⲆ.ΔⲆⲆⲆᐃⵠⵠ;
        ᐃΔ[1146][Hr.Δⵠⵠ] = ᐃⲆ.ⲆⵠⲆⲆⲆΔⲆ;
        ᐃΔ[1144] = ᐃⲆ.ΔⵠΔΔⵠⲆⲆ;
        ᐃΔ[1148] = ᐃⲆ.ᐃᐃᐃᐃᐃᐃⲆ;
        ᐃΔ[1147] = ᐃⲆ.ΔⲆᐃᐃⲆᐃᐃ;
        ᐃΔ[1053] = [];
        ᐃΔ[1053][Hr.ΔᐃΔ] = ᐃⲆ.ᐃⵠᐃᐃΔΔΔ;
        ᐃΔ[1053][Hr.Δⵠⵠ] = ᐃⲆ.ΔΔΔᐃᐃⲆⲆ;
        ᐃΔ[1055] = [];
        ᐃΔ[1055][Hr.ΔᐃΔ] = ᐃⲆ.ⵠᐃⲆΔⵠΔΔ;
        ᐃΔ[1055][Hr.Δⵠⵠ] = ᐃⲆ.ΔᐃΔⵠᐃΔᐃ;
        ᐃΔ[231] = [];
        ᐃΔ[231][Hr.ΔᐃΔ] = ᐃⲆ.ΔⵠⵠΔⵠΔⲆ;
        ᐃΔ[231][Hr.Δⵠⵠ] = ᐃⲆ.ⵠᐃⲆᐃⵠᐃᐃ;
        ᐃΔ[1060] = [];
        ᐃΔ[1060][Hr.ΔᐃΔ] = ᐃⲆ.ⵠᐃⲆⵠⵠⵠⵠ;
        ᐃΔ[1060][Hr.Δⵠⵠ] = ᐃⲆ.ᐃΔⵠᐃᐃΔᐃ;
        ᐃΔ[1063] = [];
        ᐃΔ[1063][Hr.ΔᐃΔ] = ᐃⲆ.ⵠᐃⲆⲆⲆⵠᐃ;
        ᐃΔ[1063][Hr.Δⵠⵠ] = ᐃⲆ.ΔⲆᐃⲆᐃᐃⲆ;
        ᐃΔ[1059] = [];
        ᐃΔ[1059][Hr.ΔᐃΔ] = ᐃⲆ.ⲆΔᐃΔⵠΔᐃ;
        ᐃΔ[1059][Hr.Δⵠⵠ] = ᐃⲆ.ᐃⵠⲆΔΔᐃΔ;
        ᐃΔ[1062] = [];
        ᐃΔ[1062][Hr.ΔᐃΔ] = ᐃⲆ.ΔᐃᐃΔⲆΔⲆ;
        ᐃΔ[1062][Hr.Δⵠⵠ] = ᐃⲆ.ⲆⲆⲆⵠᐃᐃⲆ;
        ᐃΔ[1056] = ᐃⲆ.ΔᐃⵠᐃⲆⵠᐃ;
        ᐃΔ[1057] = ᐃⲆ.ⲆⵠΔᐃⲆⵠⲆ;
        ᐃΔ[1058] = ᐃⲆ.ⵠⵠᐃⵠⵠⵠⵠ;
        ᐃΔ[1065] = ᐃⲆ.ΔΔⵠᐃⲆᐃⵠ;
        ᐃΔ[1066] = ᐃⲆ.ⲆⵠⵠᐃⵠᐃⲆ;
        ᐃΔ[1067] = ᐃⲆ.ⲆΔΔᐃᐃΔⵠ;
        ᐃΔ[1222] = [];
        ᐃΔ[1222][Hr.ΔᐃΔ] = ᐃⲆ.ΔⵠⲆⵠΔΔᐃᐃΔ;
        ᐃΔ[1222][Hr.Δⵠⵠ] = ᐃⲆ.ⵠⵠⵠᐃᐃΔⵠⵠⵠ;
        ᐃΔ[248] = [];
        ᐃΔ[248][Hr.ΔᐃΔ] = ᐃⲆ.ΔⵠⵠⲆᐃⵠⲆⲆⲆ;
        ᐃΔ[248][Hr.Δⵠⵠ] = ᐃⲆ.ⵠᐃⵠⲆⵠⲆᐃΔΔ;
        ᐃΔ[1218] = [];
        ᐃΔ[1218][Hr.ΔᐃΔ] = ᐃⲆ.ⵠΔⲆᐃΔⵠΔᐃⲆ;
        ᐃΔ[1218][Hr.Δⵠⵠ] = ᐃⲆ.ΔⲆᐃΔΔⵠᐃΔⵠ;
        ᐃΔ[1221] = [];
        ᐃΔ[1221][Hr.ΔᐃΔ] = ᐃⲆ.ⲆⵠΔΔⵠⵠⵠᐃⲆ;
        ᐃΔ[1221][Hr.Δⵠⵠ] = ᐃⲆ.ᐃⲆⲆⲆⵠⵠⲆⵠΔ;
        ᐃΔ[1223] = ᐃⲆ.ⲆΔΔⵠⲆⵠᐃ;
        ᐃΔ[1219] = ᐃⲆ.ᐃᐃᐃΔⵠΔⲆ;
        ᐃΔ[1068] = [];
        ᐃΔ[1068][Hr.ΔᐃΔ] = ᐃⲆ.ⵠΔⵠᐃⲆᐃⲆ;
        ᐃΔ[1068][Hr.Δⵠⵠ] = ᐃⲆ.ⲆΔⲆⲆⵠΔΔ;
        ᐃΔ[232] = [];
        ᐃΔ[232][Hr.ΔᐃΔ] = ᐃⲆ.ᐃΔΔᐃᐃⵠⵠ;
        ᐃΔ[232][Hr.Δⵠⵠ] = ᐃⲆ.ⵠΔⵠⲆⵠᐃⲆ;
        ᐃΔ[1070] = [];
        ᐃΔ[1070][Hr.ΔᐃΔ] = ᐃⲆ.ⲆᐃⲆΔᐃᐃⲆ;
        ᐃΔ[1070][Hr.Δⵠⵠ] = ᐃⲆ.ΔⲆᐃᐃⲆⵠⵠ;
        ᐃΔ[1072] = [];
        ᐃΔ[1072][Hr.ΔᐃΔ] = ᐃⲆ.ᐃⵠᐃⵠⲆⵠΔ;
        ᐃΔ[1072][Hr.Δⵠⵠ] = ᐃⲆ.ΔⲆᐃⵠⲆⲆΔ;
        ᐃΔ[1075] = [];
        ᐃΔ[1075][Hr.ΔᐃΔ] = ᐃⲆ.ᐃᐃⵠⵠⵠᐃᐃ;
        ᐃΔ[1075][Hr.Δⵠⵠ] = ᐃⲆ.ⵠᐃⲆΔⵠΔⲆ;
        ᐃΔ[1071] = [];
        ᐃΔ[1071][Hr.ΔᐃΔ] = ᐃⲆ.ⲆⲆⲆⲆᐃᐃⵠ;
        ᐃΔ[1071][Hr.Δⵠⵠ] = ᐃⲆ.ΔᐃΔᐃⲆᐃⵠ;
        ᐃΔ[1074] = [];
        ᐃΔ[1074][Hr.ΔᐃΔ] = ᐃⲆ.ⲆⵠΔⲆΔⵠⲆ;
        ᐃΔ[1074][Hr.Δⵠⵠ] = ᐃⲆ.ᐃΔᐃΔΔᐃⵠ;
        ᐃΔ[1073] = [];
        ᐃΔ[1073][Hr.ΔᐃΔ] = ᐃⲆ.ⲆᐃⵠᐃΔⲆΔ;
        ᐃΔ[1073][Hr.Δⵠⵠ] = ᐃⲆ.ⵠⲆⵠΔⲆⵠⲆ;
        ᐃΔ[1076] = [];
        ᐃΔ[1076][Hr.ΔᐃΔ] = ᐃⲆ.ΔΔΔΔΔΔⲆ;
        ᐃΔ[1076][Hr.Δⵠⵠ] = ᐃⲆ.ⲆΔⲆΔᐃⵠⵠ;
        ᐃΔ[1077] = ᐃⲆ.ΔᐃⵠⵠⲆᐃⵠ;
        ᐃΔ[1078] = ᐃⲆ.ⲆΔⲆⲆⲆⵠⲆ;
        ᐃΔ[1079] = ᐃⲆ.ⵠⲆΔΔΔⲆᐃ;
        ᐃΔ[1083] = [];
        ᐃΔ[1083][Hr.ΔᐃΔ] = ᐃⲆ.ⵠⵠΔᐃⵠⲆᐃ;
        ᐃΔ[1083][Hr.Δⵠⵠ] = ᐃⲆ.ΔΔⵠⵠᐃᐃᐃ;
        ᐃΔ[233] = [];
        ᐃΔ[233][Hr.ΔᐃΔ] = ᐃⲆ.ⲆⵠᐃᐃᐃΔⲆ;
        ᐃΔ[233][Hr.Δⵠⵠ] = ᐃⲆ.ⲆⵠⵠⲆⵠⵠⵠ;
        ᐃΔ[1085] = [];
        ᐃΔ[1085][Hr.ΔᐃΔ] = ᐃⲆ.ⵠⵠΔΔᐃᐃΔ;
        ᐃΔ[1085][Hr.Δⵠⵠ] = ᐃⲆ.ⲆⲆΔΔΔⵠⵠ;
        ᐃΔ[1087] = [];
        ᐃΔ[1087][Hr.ΔᐃΔ] = ᐃⲆ.ΔⲆⲆΔⲆⲆᐃ;
        ᐃΔ[1087][Hr.Δⵠⵠ] = ᐃⲆ.ΔⲆⲆᐃᐃΔΔ;
        ᐃΔ[1090] = [];
        ᐃΔ[1090][Hr.ΔᐃΔ] = ᐃⲆ.ᐃΔⵠΔⲆⲆⲆ;
        ᐃΔ[1090][Hr.Δⵠⵠ] = ᐃⲆ.ΔᐃᐃⲆΔⵠⲆ;
        ᐃΔ[1086] = [];
        ᐃΔ[1086][Hr.ΔᐃΔ] = ᐃⲆ.ⲆΔᐃⵠⵠⲆᐃ;
        ᐃΔ[1086][Hr.Δⵠⵠ] = ᐃⲆ.ᐃⵠΔⲆᐃⵠΔ;
        ᐃΔ[1089] = [];
        ᐃΔ[1089][Hr.ΔᐃΔ] = ᐃⲆ.ⲆΔᐃⵠⵠΔⲆ;
        ᐃΔ[1089][Hr.Δⵠⵠ] = ᐃⲆ.ΔᐃⲆΔᐃⲆΔ;
        ᐃΔ[1088] = [];
        ᐃΔ[1088][Hr.ΔᐃΔ] = ᐃⲆ.ΔΔⲆᐃΔΔⵠ;
        ᐃΔ[1088][Hr.Δⵠⵠ] = ᐃⲆ.ⵠⲆΔᐃⵠΔⲆ;
        ᐃΔ[1091] = [];
        ᐃΔ[1091][Hr.ΔᐃΔ] = ᐃⲆ.ⲆⲆΔⲆⲆⵠⲆ;
        ᐃΔ[1091][Hr.Δⵠⵠ] = ᐃⲆ.ⲆⲆᐃᐃⵠΔᐃ;
        ᐃΔ[1092] = ᐃⲆ.ⲆᐃⵠΔⲆᐃΔ;
        ᐃΔ[1093] = ᐃⲆ.ⵠΔΔᐃⲆⵠⲆ;
        ᐃΔ[1094] = ᐃⲆ.ᐃΔⲆⵠΔⲆⲆ;
        ᐃΔ[1098] = [];
        ᐃΔ[1098][Hr.ΔᐃΔ] = ᐃⲆ.ᐃΔⵠᐃᐃⲆⵠ;
        ᐃΔ[1098][Hr.Δⵠⵠ] = ᐃⲆ.ⵠᐃⵠᐃᐃⵠᐃ;
        ᐃΔ[235] = [];
        ᐃΔ[235][Hr.ΔᐃΔ] = ᐃⲆ.ⲆⲆⲆΔⲆⲆΔ;
        ᐃΔ[235][Hr.Δⵠⵠ] = ᐃⲆ.ⵠⵠⲆⲆΔⲆⲆ;
        ᐃΔ[1115] = ᐃⲆ.ᐃⵠⵠⵠΔᐃΔ;
        ᐃΔ[1113] = [];
        ᐃΔ[1113][Hr.ΔᐃΔ] = ᐃⲆ.ᐃΔⲆⲆⵠⲆⲆ;
        ᐃΔ[1113][Hr.Δⵠⵠ] = ᐃⲆ.ⵠⵠΔⲆᐃᐃΔ;
        ᐃΔ[1114] = [];
        ᐃΔ[1114][Hr.ΔᐃΔ] = ᐃⲆ.ⲆᐃⵠⲆⵠⲆⲆ;
        ᐃΔ[1114][Hr.Δⵠⵠ] = ᐃⲆ.ᐃΔᐃᐃⵠⲆⵠ;
        ᐃΔ[1100] = [];
        ᐃΔ[1100][Hr.ΔᐃΔ] = ᐃⲆ.ΔΔⵠΔⵠⵠⵠ;
        ᐃΔ[1100][Hr.Δⵠⵠ] = ᐃⲆ.ⲆⵠΔᐃΔᐃΔ;
        ᐃΔ[1102] = [];
        ᐃΔ[1102][Hr.ΔᐃΔ] = ᐃⲆ.ⵠᐃⲆⵠⵠⲆᐃ;
        ᐃΔ[1102][Hr.Δⵠⵠ] = ᐃⲆ.ΔⵠΔΔΔΔᐃ;
        ᐃΔ[1105] = [];
        ᐃΔ[1105][Hr.ΔᐃΔ] = ᐃⲆ.ᐃⲆᐃⲆᐃⵠⵠ;
        ᐃΔ[1105][Hr.Δⵠⵠ] = ᐃⲆ.ΔΔᐃΔΔⵠᐃ;
        ᐃΔ[1101] = [];
        ᐃΔ[1101][Hr.ΔᐃΔ] = ᐃⲆ.ΔΔΔⲆΔⵠΔ;
        ᐃΔ[1101][Hr.Δⵠⵠ] = ᐃⲆ.ΔⵠᐃⲆᐃⲆΔ;
        ᐃΔ[1104] = [];
        ᐃΔ[1104][Hr.ΔᐃΔ] = ᐃⲆ.ⲆⵠⲆᐃΔΔᐃ;
        ᐃΔ[1104][Hr.Δⵠⵠ] = ᐃⲆ.ΔⵠⵠΔΔⵠΔ;
        ᐃΔ[1103] = [];
        ᐃΔ[1103][Hr.ΔᐃΔ] = ᐃⲆ.ᐃⲆⲆᐃᐃΔᐃ;
        ᐃΔ[1103][Hr.Δⵠⵠ] = ᐃⲆ.ⵠⲆᐃΔᐃᐃᐃ;
        ᐃΔ[1106] = [];
        ᐃΔ[1106][Hr.ΔᐃΔ] = ᐃⲆ.ⲆⵠᐃⵠⲆⲆⲆ;
        ᐃΔ[1106][Hr.Δⵠⵠ] = ᐃⲆ.ΔⵠⲆⵠⵠᐃⵠ;
        ᐃΔ[1107] = ᐃⲆ.ⲆΔᐃⲆⵠᐃⵠ;
        ᐃΔ[1108] = ᐃⲆ.ⲆⵠⵠᐃⲆⵠΔ;
        ᐃΔ[1109] = ᐃⲆ.ⲆⲆᐃⵠΔⲆᐃ;
        ᐃΔ[1119] = [];
        ᐃΔ[1119][Hr.ΔᐃΔ] = ᐃⲆ.ΔᐃΔⵠⲆᐃⲆ;
        ᐃΔ[1119][Hr.Δⵠⵠ] = ᐃⲆ.ⲆⵠᐃΔᐃᐃⵠ;
        ᐃΔ[238] = [];
        ᐃΔ[238][Hr.ΔᐃΔ] = ᐃⲆ.ⵠⲆⵠⵠΔᐃⵠ;
        ᐃΔ[238][Hr.Δⵠⵠ] = ᐃⲆ.ⵠⲆΔⲆΔᐃⵠ;
        ᐃΔ[1136] = ᐃⲆ.ᐃⵠᐃⵠⲆⲆΔ;
        ᐃΔ[1134] = [];
        ᐃΔ[1134][Hr.ΔᐃΔ] = ᐃⲆ.ⵠΔⵠⲆᐃΔᐃ;
        ᐃΔ[1134][Hr.Δⵠⵠ] = ᐃⲆ.ΔⵠⲆⲆΔⵠΔ;
        ᐃΔ[1135] = [];
        ᐃΔ[1135][Hr.ΔᐃΔ] = ᐃⲆ.ⲆᐃΔⵠΔⵠⵠ;
        ᐃΔ[1135][Hr.Δⵠⵠ] = ᐃⲆ.ΔΔΔⵠᐃᐃⲆ;
        ᐃΔ[1121] = [];
        ᐃΔ[1121][Hr.ΔᐃΔ] = ᐃⲆ.ᐃⵠΔⵠⲆᐃⲆ;
        ᐃΔ[1121][Hr.Δⵠⵠ] = ᐃⲆ.ⲆⵠⲆᐃⲆⲆⵠ;
        ᐃΔ[1123] = [];
        ᐃΔ[1123][Hr.ΔᐃΔ] = ᐃⲆ.ⵠⲆΔΔᐃⵠⲆ;
        ᐃΔ[1123][Hr.Δⵠⵠ] = ᐃⲆ.ⲆᐃⵠᐃⲆⵠΔ;
        ᐃΔ[1126] = [];
        ᐃΔ[1126][Hr.ΔᐃΔ] = ᐃⲆ.ⲆᐃⲆᐃⵠⵠΔ;
        ᐃΔ[1126][Hr.Δⵠⵠ] = ᐃⲆ.ΔⵠΔⵠⵠΔᐃ;
        ᐃΔ[1122] = [];
        ᐃΔ[1122][Hr.ΔᐃΔ] = ᐃⲆ.ᐃⵠⲆⲆᐃⵠⵠ;
        ᐃΔ[1122][Hr.Δⵠⵠ] = ᐃⲆ.ΔΔⲆⲆⲆΔᐃ;
        ᐃΔ[1125] = [];
        ᐃΔ[1125][Hr.ΔᐃΔ] = ᐃⲆ.ⵠⲆⵠⵠⵠⵠΔ;
        ᐃΔ[1125][Hr.Δⵠⵠ] = ᐃⲆ.ⲆⲆⵠΔⵠᐃⵠ;
        ᐃΔ[1124] = [];
        ᐃΔ[1124][Hr.ΔᐃΔ] = ᐃⲆ.ⲆΔᐃⲆΔᐃΔ;
        ᐃΔ[1124][Hr.Δⵠⵠ] = ᐃⲆ.ⲆⵠⵠⵠⵠΔⵠ;
        ᐃΔ[1127] = [];
        ᐃΔ[1127][Hr.ΔᐃΔ] = ᐃⲆ.ⲆΔΔⲆΔⵠⵠ;
        ᐃΔ[1127][Hr.Δⵠⵠ] = ᐃⲆ.ⲆΔΔΔᐃΔⲆ;
        ᐃΔ[1128] = ᐃⲆ.ΔⵠⵠᐃΔⲆΔ;
        ᐃΔ[1129] = ᐃⲆ.ᐃᐃΔᐃᐃⲆⵠ;
        ᐃΔ[1130] = ᐃⲆ.ᐃⲆΔᐃⵠⵠᐃ;
        ᐃΔ[1042] = [];
        ᐃΔ[1042][Hr.ΔᐃΔ] = ᐃⲆ.ⵠⲆⲆΔⲆᐃᐃ;
        ᐃΔ[1042][Hr.Δⵠⵠ] = ᐃⲆ.ΔᐃⵠΔⵠⵠᐃ;
        ᐃΔ[1043] = [];
        ᐃΔ[1043][Hr.ΔᐃΔ] = ᐃⲆ.ᐃᐃΔΔΔΔᐃ;
        ᐃΔ[1043][Hr.Δⵠⵠ] = ᐃⲆ.ΔⵠⲆⵠⲆⲆΔ;
        ᐃΔ[1044] = [];
        ᐃΔ[1044][Hr.ΔᐃΔ] = ᐃⲆ.ⲆΔΔⵠⵠᐃΔ;
        ᐃΔ[1044][Hr.Δⵠⵠ] = ᐃⲆ.ⵠⵠᐃᐃᐃᐃᐃ;
        ᐃΔ[228] = [];
        ᐃΔ[228][Hr.ΔᐃΔ] = ᐃⲆ.ΔᐃᐃⲆⵠⲆⵠ;
        ᐃΔ[228][Hr.Δⵠⵠ] = ᐃⲆ.ΔᐃᐃⲆⵠⲆⵠ;
        ᐃΔ[234] = [];
        ᐃΔ[234][Hr.ΔᐃΔ] = ᐃⲆ.ⲆⲆΔⵠΔᐃⲆ;
        ᐃΔ[234][Hr.Δⵠⵠ] = ᐃⲆ.ⲆⲆΔⵠΔᐃⲆ;
        ᐃΔ[249] = [];
        ᐃΔ[249][Hr.ΔᐃΔ] = ᐃⲆ.ᐃΔΔⵠⵠⵠᐃ;
        ᐃΔ[249][Hr.Δⵠⵠ] = ᐃⲆ.ᐃΔΔⵠⵠⵠᐃ;
        ᐃΔ[1045] = ᐃⲆ.ⵠⵠᐃⲆⵠᐃᐃ;
        ᐃΔ[89] = [];
        ᐃΔ[89][Hr.ΔᐃΔ] = ᐃⲆ.ⵠᐃΔⵠΔⵠᐃ;
        ᐃΔ[89][Hr.Δⵠⵠ] = ᐃⲆ.ᐃΔⵠⵠⵠΔⵠ;
        ᐃΔ[92] = [];
        ᐃΔ[92][Hr.ΔᐃΔ] = ᐃⲆ.ΔΔᐃⲆᐃᐃᐃ;
        ᐃΔ[92][Hr.Δⵠⵠ] = ᐃⲆ.ᐃᐃⲆⵠᐃᐃᐃ;
        ᐃΔ[247] = [];
        ᐃΔ[247][Hr.ΔᐃΔ] = [ᐃⲆ.ⵠⲆΔᐃΔΔⲆ, ᐃⲆ.ᐃⵠΔΔⲆⵠᐃ, ᐃⲆ.ΔⵠⵠΔΔᐃⲆ, ᐃⲆ.ⲆᐃΔⵠΔΔⲆ, ᐃⲆ.ⲆⵠᐃⲆⵠⵠⲆ, ᐃⲆ.ᐃᐃΔⲆⲆⵠⵠ, ᐃⲆ.ᐃᐃⵠΔⵠⲆΔ, ᐃⲆ.ᐃⵠΔⲆⲆᐃᐃ, ᐃⲆ.ⲆΔⲆᐃΔⵠⲆ];
        ᐃΔ[247][Hr.Δⵠⵠ] = [ᐃⲆ.ΔⲆΔᐃΔᐃⵠ, ᐃⲆ.ⵠΔᐃᐃⵠⵠΔ, ᐃⲆ.ᐃΔⵠΔⵠⲆⲆ, ᐃⲆ.ᐃⵠᐃᐃᐃᐃΔ, ᐃⲆ.ΔⲆⲆΔⲆᐃⵠ, ᐃⲆ.ΔⵠᐃⲆΔᐃΔ, ᐃⲆ.ᐃⵠΔⲆⲆⲆᐃ, ᐃⲆ.ᐃⵠΔⲆⲆᐃᐃ, ᐃⲆ.ΔᐃΔⲆⵠΔᐃ];
        ᐃΔ[93] = [];
        ᐃΔ[93][Hr.ΔᐃΔ] = ᐃⲆ.ᐃᐃᐃⵠᐃᐃⵠ;
        ᐃΔ[93][Hr.Δⵠⵠ] = ᐃⲆ.ⲆΔⵠᐃΔⲆⵠ;
        ᐃΔ[225] = [];
        ᐃΔ[225][Hr.ΔᐃΔ] = ᐃⲆ.ⵠⵠⵠⵠΔΔⲆ;
        ᐃΔ[225][Hr.Δⵠⵠ] = ᐃⲆ.ⲆⲆⲆⲆᐃΔⵠ;
        ᐃΔ[226] = [];
        ᐃΔ[226][Hr.ΔᐃΔ] = ᐃⲆ.ⲆⵠᐃΔⲆⵠⲆ;
        ᐃΔ[226][Hr.Δⵠⵠ] = ᐃⲆ.ⵠⵠⲆⲆⵠᐃⵠ;
        ᐃΔ[24] = [];
        ᐃΔ[24][Hr.ΔᐃΔ] = ᐃⲆ.ᐃⲆⲆⲆⲆᐃⵠ;
        ᐃΔ[24][Hr.Δⵠⵠ] = ᐃⲆ.ⵠᐃⵠᐃᐃⵠⵠ;
        ᐃΔ[88] = [];
        ᐃΔ[88][Hr.ΔᐃΔ] = ᐃⲆ.ΔⲆⲆⲆΔᐃᐃⵠΔ;
        ᐃΔ[88][Hr.Δⵠⵠ] = ᐃⲆ.ⵠᐃΔⵠⵠⲆⲆΔᐃ;
        ᐃΔ[87] = [];
        ᐃΔ[87][Hr.ΔᐃΔ] = ᐃⲆ.ᐃΔⲆᐃᐃᐃᐃⵠⵠ;
        ᐃΔ[87][Hr.Δⵠⵠ] = ᐃⲆ.ΔⵠⲆⲆᐃⵠⵠⵠⲆ;
        ᐃΔ[82] = [];
        ᐃΔ[82][Hr.ΔᐃΔ] = ᐃⲆ.ⵠΔⵠΔᐃⵠⲆ;
        ᐃΔ[82][Hr.Δⵠⵠ] = ᐃⲆ.ᐃΔⲆⵠⲆΔⵠ;
        ᐃΔ[621] = [];
        ᐃΔ[621][Hr.ΔᐃΔ] = [];
        ᐃΔ[621][Hr.Δⵠⵠ] = [];
        ᐃΔ[621][Hr.ΔᐃΔ].push(ᐃⲆ.ΔΔⵠⵠᐃΔⲆⵠⲆ);
        ᐃΔ[621][Hr.ΔᐃΔ].push(ᐃⲆ.ⵠᐃᐃⵠⵠⲆⵠⲆΔ);
        ᐃΔ[621][Hr.ΔᐃΔ].push(ᐃⲆ.ᐃᐃᐃΔⵠⲆⲆᐃⲆ);
        ᐃΔ[621][Hr.Δⵠⵠ].push(ᐃⲆ.ⵠⵠⵠΔΔΔΔⵠⵠ);
        ᐃΔ[621][Hr.Δⵠⵠ].push(ᐃⲆ.ⵠΔᐃⲆⲆΔᐃᐃⲆ);
        ᐃΔ[621][Hr.Δⵠⵠ].push(ᐃⲆ.ΔΔⵠΔⲆⲆᐃⵠⲆ);
        ᐃΔ[619] = [];
        ᐃΔ[619][Hr.ΔᐃΔ] = [];
        ᐃΔ[619][Hr.Δⵠⵠ] = [];
        ᐃΔ[619][Hr.ΔᐃΔ].push(ᐃⲆ.ΔΔΔⲆⵠⲆⲆⵠⲆ);
        ᐃΔ[619][Hr.ΔᐃΔ].push(ᐃⲆ.ᐃᐃΔⲆΔⲆᐃΔᐃ);
        ᐃΔ[619][Hr.ΔᐃΔ].push(ᐃⲆ.ΔΔⲆΔⲆᐃⲆⲆⲆ);
        ᐃΔ[619][Hr.Δⵠⵠ].push(ᐃⲆ.ⵠΔᐃΔᐃΔⲆⵠᐃ);
        ᐃΔ[619][Hr.Δⵠⵠ].push(ᐃⲆ.ⲆΔⵠΔⲆΔΔΔΔ);
        ᐃΔ[619][Hr.Δⵠⵠ].push(ᐃⲆ.ᐃⲆᐃΔⲆⵠⲆᐃⵠ);
        ᐃΔ[620] = [];
        ᐃΔ[620][Hr.ΔᐃΔ] = [];
        ᐃΔ[620][Hr.Δⵠⵠ] = [];
        ᐃΔ[620][Hr.ΔᐃΔ].push(ᐃⲆ.ⲆΔⵠΔⲆᐃⲆⲆΔ);
        ᐃΔ[620][Hr.ΔᐃΔ].push(ᐃⲆ.ⲆᐃⲆⲆⵠᐃᐃᐃⲆ);
        ᐃΔ[620][Hr.ΔᐃΔ].push(ᐃⲆ.ⵠⵠᐃⲆⲆᐃΔᐃᐃ);
        ᐃΔ[620][Hr.Δⵠⵠ].push(ᐃⲆ.ΔⵠⵠᐃᐃⲆΔΔΔ);
        ᐃΔ[620][Hr.Δⵠⵠ].push(ᐃⲆ.ΔⲆᐃⲆᐃⵠⲆⲆⲆ);
        ᐃΔ[620][Hr.Δⵠⵠ].push(ᐃⲆ.ᐃᐃⵠᐃΔⵠΔⵠᐃ);
        ⵠⲆᐃΔ.g = [];
        ⵠⲆᐃΔ.g[0] = [ᐃⲆ.ⲆⲆⵠⵠᐃΔᐃ, ᐃⲆ.ᐃⵠΔΔΔⲆⵠ];
        ⵠⲆᐃΔ.g[1] = ⵠⲆᐃΔ.g[0];
        ⵠⲆᐃΔ.g[2] = [ᐃⲆ.ⲆⵠΔΔⲆⵠⲆ, ᐃⲆ.ⲆᐃⵠΔΔᐃΔ];
        ⵠⲆᐃΔ.m = [];
        ⵠⲆᐃΔ.m[0] = [ᐃⲆ.ⵠᐃᐃⵠΔΔⵠ, ᐃⲆ.ΔᐃⵠⲆᐃⵠᐃ];
        ⵠⲆᐃΔ.m[1] = ⵠⲆᐃΔ.m[0];
        ⵠⲆᐃΔ.m[2] = [ᐃⲆ.ⲆΔⲆⲆⵠᐃᐃ, ᐃⲆ.ΔⲆⵠⲆⵠᐃᐃ];
        ⵠⲆᐃΔ.la = [];
        ⵠⲆᐃΔ.la[0] = [ᐃⲆ.ⵠⵠΔⵠᐃⵠⵠ, ᐃⲆ.ᐃⵠⵠᐃⲆᐃᐃ];
        ⵠⲆᐃΔ.la[1] = ⵠⲆᐃΔ.la[0];
        ⵠⲆᐃΔ.la[2] = ⵠⲆᐃΔ.la[0];
        ⵠⲆᐃΔ.la[3] = ⵠⲆᐃΔ.la[0];
        ⵠⲆᐃΔ.la[4] = ⵠⲆᐃΔ.la[0];
        ⵠⲆᐃΔ.la[5] = ⵠⲆᐃΔ.la[0];
        ⵠⲆᐃΔ.s = [];
        ⵠⲆᐃΔ.s[0] = [ᐃⲆ.ᐃΔⲆᐃⲆⲆΔ, ᐃⲆ.ⵠΔⵠΔΔΔⵠ];
        ⵠⲆᐃΔ.s[1] = ⵠⲆᐃΔ.s[0];
        ⵠⲆᐃΔ.s[2] = [ᐃⲆ.ΔᐃΔᐃᐃᐃΔ, ᐃⲆ.ⲆᐃⲆᐃᐃⲆⵠ];
        ⵠⲆᐃΔ.p = [];
        ⵠⲆᐃΔ.p[0] = [ᐃⲆ.ᐃΔᐃᐃᐃⲆΔ, ᐃⲆ.ᐃΔᐃᐃᐃⲆΔ];
        ⵠⲆᐃΔ.a = [];
        ⵠⲆᐃΔ.a[0] = [ᐃⲆ.ᐃⲆⵠΔⵠᐃⵠ, ᐃⲆ.ⵠᐃⲆΔᐃΔᐃ];
        ⵠⲆᐃΔ.a[1] = ⵠⲆᐃΔ.a[0];
        ⵠⲆᐃΔ.a[2] = ⵠⲆᐃΔ.a[0];
        ⵠⲆᐃΔ.d = [];
        ⵠⲆᐃΔ.d[0] = [ᐃⲆ.ⲆᐃᐃᐃⵠⲆΔ, ᐃⲆ.ⲆⲆⵠⵠᐃⲆΔ];
        ⵠⲆᐃΔ.d[1] = ⵠⲆᐃΔ.d[0];
        ⵠⲆᐃΔ.d[2] = ⵠⲆᐃΔ.d[0];
        ⵠⲆᐃΔ.re = [];
        ⵠⲆᐃΔ.re[0] = [ᐃⲆ.ΔᐃⲆᐃᐃΔΔ, ᐃⲆ.ΔΔⵠⵠᐃⲆⵠ];
        ⵠⲆᐃΔ.re[1] = ⵠⲆᐃΔ.re[0];
        ⵠⲆᐃΔ.re[2] = ⵠⲆᐃΔ.re[0];
        ⵠⲆᐃΔ.f = [];
        ⵠⲆᐃΔ.f[0] = [ᐃⲆ.ᐃⵠΔΔⵠⵠⵠ, ᐃⲆ.ΔΔΔΔⲆⵠⲆ];
        ⵠⲆᐃΔ.f[1] = ⵠⲆᐃΔ.f[0];
        ⵠⲆᐃΔ.f[2] = ⵠⲆᐃΔ.f[0];
        ⵠⲆᐃΔ.isl = [];
        ⵠⲆᐃΔ.isl[0] = [ᐃⲆ.ᐃᐃΔΔⲆᐃⵠ, ᐃⲆ.ΔⲆⲆⲆⵠⵠΔ];
        ⵠⲆᐃΔ.isl[1] = ⵠⲆᐃΔ.isl[0];
        ⵠⲆᐃΔ.isl[2] = ⵠⲆᐃΔ.isl[0];
        ⵠⲆᐃΔ.c = [];
        ⵠⲆᐃΔ.c[0] = [ᐃⲆ.ᐃⲆⵠᐃⲆᐃⵠ, ᐃⲆ.ΔⵠⲆⲆᐃΔᐃ];
        ⵠⲆᐃΔ.c[1] = ⵠⲆᐃΔ.c[0];
        ⵠⲆᐃΔ.c[2] = ⵠⲆᐃΔ.c[0];
        ⵠⲆᐃΔ.wtb = [];
        ⵠⲆᐃΔ.wtb[0] = [ᐃⲆ.ⲆⲆᐃⲆⵠⵠΔ, ᐃⲆ.ⲆᐃΔΔⲆⵠⲆ];
        ⵠⲆᐃΔ.PIRANHA = [ᐃⲆ.Δᐃᐃⵠᐃⵠⵠ, ᐃⲆ.ⲆⲆⵠᐃᐃⲆⲆ];
        ⵠⲆᐃΔ.KRAKEN = [ᐃⲆ.ⲆⲆᐃⵠⲆⵠΔ, ᐃⲆ.ⲆΔΔⵠΔΔΔ];
        ⵠⲆᐃΔ.FOX = [ᐃⲆ.ΔΔⵠΔᐃᐃⲆ, ᐃⲆ.ᐃⲆⵠΔᐃᐃⵠ];
        ⵠⲆᐃΔ.WOLF = [ᐃⲆ.ᐃⵠⲆᐃⵠΔΔ, ᐃⲆ.ⵠΔⲆΔΔⵠⲆ];
        ⵠⲆᐃΔ.SPIDER = [ᐃⲆ.ⵠΔΔⲆⲆᐃᐃ, ᐃⲆ.ᐃⲆⵠΔⲆᐃⵠ];
        ⵠⲆᐃΔ.BEAR = [ᐃⲆ.ⲆⵠⵠⲆⵠᐃⵠ, ᐃⲆ.ᐃᐃᐃΔΔⵠᐃ];
        ⵠⲆᐃΔ.CAVE = [ᐃⲆ.ᐃⵠⵠᐃⲆᐃΔ, ᐃⲆ.ⲆᐃΔⲆᐃⲆⵠ];
        ⵠⲆᐃΔ.MAP = [ᐃⲆ.ᐃΔⵠΔᐃⲆΔ, ᐃⲆ.ΔⵠᐃⵠΔⲆΔ];
        ⵠⲆᐃΔ.FOREST = [ᐃⲆ.ΔΔΔⵠⲆᐃΔ, ᐃⲆ.ΔⲆΔᐃΔⲆⲆ];
        ⵠⲆᐃΔ.WINTER = [ᐃⲆ.ᐃΔⵠⲆΔⵠⵠ, ᐃⲆ.ΔᐃⵠⲆⵠⲆΔ];
        ⵠⲆᐃΔ.DESERT = [ᐃⲆ.ⲆΔΔᐃΔᐃⵠ, ᐃⲆ.ᐃᐃΔⵠⲆⲆᐃ];
        ⵠⲆᐃΔ.LAVA = [ᐃⲆ.ᐃⵠᐃᐃⲆᐃⵠ, ᐃⲆ.ⲆᐃᐃⲆⲆᐃⲆ];
        for (var c in ⵠⲆᐃΔ) {
            for (var d = ⵠⲆᐃΔ[c], e = 0; e < d.length; e++) {
                var f = d[e];
                if (f.ⵠΔⵠⵠⲆⵠΔ !== undefined) {
                    f.ⵠΔⵠⵠⲆⵠΔ();
                } else if (f.length > 0) {
                    for (var g = 0; g < f.length; g++) {
                        if (f[g].ⵠΔⵠⵠⲆⵠΔ !== undefined) {
                            f[g].ⵠΔⵠⵠⲆⵠΔ();
                        }
                    }
                }
            }
        }
        console.log(undefined, mr);
    }
    function up(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 316;
        d.height = a * 365;
        e.save();
        e.translate(a * 156.07142639160156, a * 51.81248474121094);
        e.rotate(0);
        Zb(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
        e.restore();
        $b(e, c[1], c[2], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110.57142639160156, a * 197.09820556640625);
        e.bezierCurveTo(a * 158.07142639160156, a * 179.09820556640625, a * 158.07142639160156, a * 179.09820556640625, a * 205.57142639160156, a * 161.09820556640625);
        e.bezierCurveTo(a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 309.8125);
        e.bezierCurveTo(a * 205.57142639160156, a * 323.8125, a * 200.57142639160156, a * 325.8125, a * 187.57142639160156, a * 326.8125);
        e.bezierCurveTo(a * 155.57142639160156, a * 326.3125, a * 155.57142639160156, a * 326.3125, a * 123.57142639160156, a * 325.8125);
        e.bezierCurveTo(a * 111.57142639160156, a * 326.8125, a * 109.57142639160156, a * 321.8125, a * 110.57142639160156, a * 312.8125);
        e.closePath();
        $b(e, c[3], c[4], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
        e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
        e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
        e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
        e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
        e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
        e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
        e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
        e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
        e.closePath();
        $b(e, undefined, c[5], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
        e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
        e.closePath();
        $b(e, undefined, c[6], a * 15);
        return d;
    }
    function bp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 80;
        d.height = a * 160;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        Zb(e, a * 33, a * 53, a * 10, a * 98, a * 10);
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -150, a * -100);
        e.moveTo(a * 167.5, a * 171.0625);
        e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
        e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
        e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
        e.closePath();
        $b(e, c[0]);
        e.restore();
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        Zb(e, a * 33, a * 53, a * 10, a * 98, a * 10);
        $b(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -150, a * -100);
        e.moveTo(a * 167.5, a * 171.0625);
        e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
        e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
        e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
        e.closePath();
        $b(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 0, a * 1);
        e.moveTo(a * 180.5, a * 169.0625);
        e.bezierCurveTo(a * 180.5, a * 157.5625, a * 180.5, a * 157.5625, a * 180.5, a * 146.0625);
        e.bezierCurveTo(a * 181.5, a * 134.0625, a * 193.5, a * 129.0625, a * 196.5, a * 146.0625);
        e.bezierCurveTo(a * 196.5, a * 157.5625, a * 196.5, a * 157.5625, a * 196.5, a * 169.0625);
        e.closePath();
        $b(e, c[5]);
        e.restore();
        return d;
    }
    function dp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 81;
        d.height = a * 77;
        e.translate(0, a * 10);
        e.scale(0.2, 0.2);
        e.translate(0, a * -30);
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 36.5, a * 278.0625);
            e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
            e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
            e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
            e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
            e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
            e.closePath();
            $b(e, b[0], b[3], a * 50);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36.5, a * 278.0625);
        e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
        e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
        e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
        e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
        e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
        e.closePath();
        $b(e, b[0], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 214.5, a * 124.0625);
        e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
        e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
        e.closePath();
        $b(e, b[0], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 145.0625);
        e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
        e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
        e.closePath();
        $b(e, b[0], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103.5, a * 169.0625);
        e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
        e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
        e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
        e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
        e.closePath();
        $b(e, b[2], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 194.5, a * 313.0625);
        e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
        e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
        e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
        e.closePath();
        $b(e, b[1]);
        e.scale(3, 3);
        e.translate(15, a * 10);
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 4, a * 32);
            e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
            e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
            e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
            $b(e, Zi, b[3], a * 28);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 56, a * 6);
            e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
            e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
            e.closePath();
            $b(e, b[3], b[3], a * 28);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 32);
        e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
        e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
        e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
        $b(e, undefined, b[1], a * 17);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 6);
        e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
        e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
        e.closePath();
        $b(e, b[1], b[1], a * 17);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 32);
        e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
        e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
        e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
        $b(e, ks, b[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 6);
        e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
        e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
        e.closePath();
        $b(e, b[2], b[2], a * 10);
        return d;
    }
    function vp() {
        var a = 1;
        new Date().getTime();
        gp();
        (function () {
            ᐃΔ[814] = Ct(1, [{
                f: Rp,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
            }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[815] = ᐃΔ[814];
            ᐃΔ[955] = [];
            ᐃΔ[955][0] = ᐃⲆ.ᐃⵠΔΔΔᐃᐃ;
            ᐃΔ[955][1] = ᐃⲆ.ⵠᐃᐃΔⲆᐃΔ;
            ᐃΔ[955][2] = ᐃⲆ.ᐃΔⵠⲆⵠⲆΔ;
            ᐃΔ[956] = ᐃΔ[955];
            ᐃΔ[972] = [];
            ᐃΔ[972][0] = ᐃⲆ.ⵠⵠΔⵠΔⲆᐃ;
            ᐃΔ[972][1] = ᐃⲆ.ᐃⲆᐃⲆΔΔᐃ;
            ᐃΔ[972][2] = ᐃⲆ.ΔᐃΔᐃΔⵠⲆ;
            ᐃΔ[973] = ᐃΔ[972];
            ᐃΔ[987] = [];
            ᐃΔ[987][0] = ᐃⲆ.ΔⲆⲆⲆⲆⲆⵠ;
            ᐃΔ[987][1] = ᐃⲆ.ᐃΔᐃⵠⵠⲆΔ;
            ᐃΔ[987][2] = ᐃⲆ.ΔⲆⵠⵠⲆΔᐃ;
            ᐃΔ[988] = ᐃΔ[987];
            ᐃΔ[1154] = [];
            ᐃΔ[1154][0] = ᐃⲆ.ᐃΔΔⵠⵠΔⲆ;
            ᐃΔ[1154][1] = ᐃⲆ.ΔⲆⲆᐃᐃⲆᐃ;
            ᐃΔ[1154][2] = ᐃⲆ.ΔᐃᐃᐃΔⵠΔ;
            ᐃΔ[1155] = ᐃΔ[1154];
            ᐃΔ[965] = [];
            ᐃΔ[965][0] = ᐃⲆ.ⲆⲆⲆᐃⵠᐃⵠ;
            ᐃΔ[965][1] = ᐃⲆ.ᐃⵠⲆⵠⵠⲆⲆ;
            ᐃΔ[965][2] = ᐃⲆ.ᐃⵠΔⵠⵠᐃΔ;
            ᐃΔ[974] = ᐃΔ[965];
            ᐃΔ[1028] = [];
            ᐃΔ[1028][0] = ᐃⲆ.ΔᐃⲆⵠΔᐃᐃ;
            ᐃΔ[1028][1] = ᐃⲆ.ΔΔᐃⵠⵠⵠⲆ;
            ᐃΔ[1028][2] = ᐃⲆ.ⵠⵠΔⲆΔⲆⵠ;
            ᐃΔ[1029] = ᐃΔ[1028];
            ᐃΔ[1027] = ᐃΔ[1028];
            ᐃΔ[712] = [];
            ᐃΔ[712][0] = ᐃⲆ.ΔⵠⲆⵠᐃΔᐃΔΔ;
            ᐃΔ[712][1] = ᐃⲆ.ⵠᐃⵠΔⲆⵠᐃⲆⵠ;
            ᐃΔ[712][2] = ᐃⲆ.ⵠⵠⵠΔᐃᐃⵠᐃᐃ;
            ᐃΔ[713] = ᐃΔ[712];
            ᐃΔ[714] = ᐃΔ[712];
            ᐃΔ[1031] = [];
            ᐃΔ[1031][0] = ᐃⲆ.ΔᐃⲆⲆΔⵠΔ;
            ᐃΔ[1031][1] = ᐃⲆ.ⵠΔᐃΔᐃⲆΔ;
            ᐃΔ[1031][2] = ᐃⲆ.ΔᐃⵠⵠⲆΔⲆ;
            ᐃΔ[1032] = ᐃΔ[1031];
            ᐃΔ[1030] = ᐃΔ[1031];
            ᐃΔ[423] = [];
            ᐃΔ[423][0] = ᐃⲆ.ⵠⵠⵠΔᐃⲆⲆ;
            ᐃΔ[423][1] = ᐃⲆ.ΔⵠⲆⲆᐃⲆⲆ;
            ᐃΔ[423][2] = ᐃⲆ.ᐃⵠⵠⵠⲆΔΔ;
            ᐃΔ[425] = ᐃΔ[423];
            ᐃΔ[424] = ᐃΔ[423];
            ᐃΔ[1233] = [];
            ᐃΔ[1233][0] = ᐃⲆ.ⵠΔⲆᐃⵠⵠᐃᐃⵠ;
            ᐃΔ[1233][1] = ᐃⲆ.ⵠΔⲆⵠΔᐃⲆΔᐃ;
            ᐃΔ[1233][2] = ᐃⲆ.ⲆⵠᐃⵠΔⵠᐃᐃΔ;
            ᐃΔ[1234] = ᐃΔ[1233];
            ᐃΔ[1230] = [];
            ᐃΔ[1230][0] = ᐃⲆ.ΔⲆⵠⵠⲆⵠᐃᐃᐃ;
            ᐃΔ[1230][1] = ᐃⲆ.ΔᐃⲆᐃⵠⲆᐃⵠΔ;
            ᐃΔ[1230][2] = ᐃⲆ.ⲆⲆᐃΔᐃΔᐃΔᐃ;
            ᐃΔ[1232] = ᐃΔ[1230];
            ᐃΔ[1231] = ᐃΔ[1230];
            ᐃΔ[569] = [];
            ᐃΔ[569][0] = ᐃⲆ.ΔⵠⲆⵠᐃⲆⲆΔⵠ;
            ᐃΔ[569][1] = ᐃⲆ.ⵠΔⲆᐃᐃΔⵠᐃᐃ;
            ᐃΔ[569][2] = ᐃⲆ.ⵠⲆⲆᐃⵠΔΔⵠⲆ;
            ᐃΔ[571] = ᐃΔ[569];
            ᐃΔ[570] = ᐃΔ[569];
            ᐃΔ[1166] = [];
            ᐃΔ[1166][0] = ᐃⲆ.ⵠⲆᐃⲆᐃΔⵠΔⵠ;
            ᐃΔ[1166][1] = ᐃⲆ.ΔᐃⲆⲆⵠⲆΔⵠⵠ;
            ᐃΔ[1166][2] = ᐃⲆ.ⵠⵠΔⲆⲆⲆᐃⲆⲆ;
            ᐃΔ[1167] = ᐃΔ[1166];
            ᐃΔ[1168] = ᐃΔ[1166];
            ᐃΔ[572] = [];
            ᐃΔ[572][0] = ᐃⲆ.ⲆⵠⲆΔΔⲆⲆⵠᐃ;
            ᐃΔ[572][1] = ᐃⲆ.ΔⵠᐃΔᐃⵠⵠⵠⲆ;
            ᐃΔ[572][2] = ᐃⲆ.ⲆⵠᐃᐃΔΔΔⲆⵠ;
            ᐃΔ[574] = ᐃΔ[572];
            ᐃΔ[573] = ᐃΔ[572];
            ᐃΔ[1169] = [];
            ᐃΔ[1169][0] = ᐃⲆ.ΔⲆⲆⲆᐃᐃᐃⲆⲆ;
            ᐃΔ[1169][1] = ᐃⲆ.ⲆᐃⵠⵠⵠⲆⵠⵠΔ;
            ᐃΔ[1169][2] = ᐃⲆ.ᐃΔⲆⵠᐃᐃᐃᐃⲆ;
            ᐃΔ[1170] = ᐃΔ[1169];
            ᐃΔ[1171] = ᐃΔ[1169];
            ᐃΔ[575] = [];
            ᐃΔ[575][0] = ᐃⲆ.ΔᐃᐃΔⵠᐃⲆᐃΔ;
            ᐃΔ[575][1] = ᐃⲆ.ⲆⲆᐃΔⲆΔⲆΔᐃ;
            ᐃΔ[575][2] = ᐃⲆ.ⵠΔΔⲆⲆⲆⲆⲆⲆ;
            ᐃΔ[577] = ᐃΔ[575];
            ᐃΔ[576] = ᐃΔ[575];
            ᐃΔ[1172] = [];
            ᐃΔ[1172][0] = ᐃⲆ.ⲆⲆᐃᐃⵠᐃⵠᐃⲆ;
            ᐃΔ[1172][1] = ᐃⲆ.ⲆⵠⵠᐃΔⲆⵠⵠⵠ;
            ᐃΔ[1172][2] = ᐃⲆ.ⲆᐃᐃΔΔⲆΔⵠⵠ;
            ᐃΔ[1173] = ᐃΔ[1172];
            ᐃΔ[1174] = ᐃΔ[1172];
            ᐃΔ[578] = [];
            ᐃΔ[578][0] = ᐃⲆ.ΔⲆΔΔΔⲆⵠᐃΔ;
            ᐃΔ[578][1] = ᐃⲆ.ᐃΔⲆᐃᐃΔⲆⵠᐃ;
            ᐃΔ[578][2] = ᐃⲆ.ⲆΔⵠᐃⵠᐃΔⵠⲆ;
            ᐃΔ[580] = ᐃΔ[578];
            ᐃΔ[579] = ᐃΔ[578];
            ᐃΔ[1175] = [];
            ᐃΔ[1175][0] = ᐃⲆ.ⵠⲆⵠΔⵠⵠⲆⲆⵠ;
            ᐃΔ[1175][1] = ᐃⲆ.ⲆΔⵠⵠⵠΔᐃΔⵠ;
            ᐃΔ[1175][2] = ᐃⲆ.ΔᐃⲆⲆΔⵠᐃⲆΔ;
            ᐃΔ[1176] = ᐃΔ[1175];
            ᐃΔ[1177] = ᐃΔ[1175];
            ᐃΔ[581] = [];
            ᐃΔ[581][0] = ᐃⲆ.ⲆⵠᐃⲆᐃΔⵠⵠⵠ;
            ᐃΔ[581][1] = ᐃⲆ.ΔΔᐃΔΔⵠᐃᐃΔ;
            ᐃΔ[581][2] = ᐃⲆ.ⲆᐃⲆᐃΔⵠⲆⵠⵠ;
            ᐃΔ[583] = ᐃΔ[581];
            ᐃΔ[582] = ᐃΔ[581];
            ᐃΔ[1178] = [];
            ᐃΔ[1178][0] = ᐃⲆ.ᐃⵠᐃΔᐃᐃΔΔΔ;
            ᐃΔ[1178][1] = ᐃⲆ.ⲆᐃᐃⲆΔⵠΔᐃᐃ;
            ᐃΔ[1178][2] = ᐃⲆ.ⲆⲆᐃⵠΔΔΔⵠΔ;
            ᐃΔ[1179] = ᐃΔ[1178];
            ᐃΔ[1180] = ᐃΔ[1178];
            ᐃΔ[584] = [];
            ᐃΔ[584][0] = ᐃⲆ.ⲆⵠᐃⵠⵠᐃⲆΔΔ;
            ᐃΔ[584][1] = ᐃⲆ.ΔⲆⵠΔⲆⵠⵠⲆΔ;
            ᐃΔ[584][2] = ᐃⲆ.ᐃⵠᐃⵠⵠⲆΔⵠⲆ;
            ᐃΔ[586] = ᐃΔ[584];
            ᐃΔ[585] = ᐃΔ[584];
            ᐃΔ[1181] = [];
            ᐃΔ[1181][0] = ᐃⲆ.ᐃⲆΔⲆΔΔᐃⵠⲆ;
            ᐃΔ[1181][1] = ᐃⲆ.ⲆᐃⲆᐃⵠⲆⲆᐃΔ;
            ᐃΔ[1181][2] = ᐃⲆ.ⲆⲆΔᐃΔΔᐃΔΔ;
            ᐃΔ[1182] = ᐃΔ[1181];
            ᐃΔ[1183] = ᐃΔ[1181];
            ᐃΔ[587] = [];
            ᐃΔ[587][0] = ᐃⲆ.ΔⵠΔᐃΔΔⲆᐃᐃ;
            ᐃΔ[587][1] = ᐃⲆ.ΔⵠⵠⵠⲆΔᐃΔⲆ;
            ᐃΔ[587][2] = ᐃⲆ.ⲆⵠⲆⲆⵠΔΔᐃⵠ;
            ᐃΔ[589] = ᐃΔ[587];
            ᐃΔ[588] = ᐃΔ[587];
            ᐃΔ[1184] = [];
            ᐃΔ[1184][0] = ᐃⲆ.ⵠⵠⲆⵠΔᐃΔⲆⲆ;
            ᐃΔ[1184][1] = ᐃⲆ.ᐃΔᐃⲆⵠΔᐃⲆΔ;
            ᐃΔ[1184][2] = ᐃⲆ.ⲆΔᐃΔⲆᐃΔᐃⵠ;
            ᐃΔ[1185] = ᐃΔ[1184];
            ᐃΔ[1186] = ᐃΔ[1184];
            ᐃΔ[1257] = [];
            ᐃΔ[1257][0] = ᐃⲆ.ⵠⲆᐃᐃΔᐃΔᐃΔ;
            ᐃΔ[1257][1] = ᐃⲆ.Δᐃᐃⵠⵠᐃᐃᐃⵠ;
            ᐃΔ[1257][2] = ᐃⲆ.ΔᐃⵠⲆΔΔⵠⲆⵠ;
            ᐃΔ[1258] = ᐃΔ[1257];
            ᐃΔ[1256] = ᐃΔ[1257];
            ᐃΔ[1260] = [];
            ᐃΔ[1260][0] = ᐃⲆ.ᐃⵠΔⵠⵠⲆᐃⲆᐃ;
            ᐃΔ[1260][1] = ᐃⲆ.ᐃⵠⲆⲆΔⵠⵠⲆΔ;
            ᐃΔ[1260][2] = ᐃⲆ.ΔΔⲆᐃⵠⲆΔᐃΔ;
            ᐃΔ[1261] = ᐃΔ[1260];
            ᐃΔ[1259] = ᐃΔ[1260];
            ᐃΔ[1263] = [];
            ᐃΔ[1263][0] = ᐃⲆ.ΔⵠΔⵠⲆΔΔᐃΔ;
            ᐃΔ[1263][1] = ᐃⲆ.ⵠⵠΔⲆᐃⲆⲆΔⲆ;
            ᐃΔ[1263][2] = ᐃⲆ.ⵠᐃⲆᐃⲆΔᐃⲆⲆ;
            ᐃΔ[1264] = ᐃΔ[1263];
            ᐃΔ[1262] = ᐃΔ[1263];
            ᐃΔ[1266] = [];
            ᐃΔ[1266][0] = ᐃⲆ.ΔΔⲆᐃᐃⲆⲆᐃⲆ;
            ᐃΔ[1266][1] = ᐃⲆ.ᐃⲆⵠᐃⵠⲆⲆⲆΔ;
            ᐃΔ[1266][2] = ᐃⲆ.ⵠⲆΔⵠΔⲆᐃⵠⵠ;
            ᐃΔ[1267] = ᐃΔ[1266];
            ᐃΔ[1265] = ᐃΔ[1266];
            ᐃΔ[1269] = [];
            ᐃΔ[1269][0] = ᐃⲆ.ⲆΔⲆᐃΔᐃⲆΔΔ;
            ᐃΔ[1269][1] = ᐃⲆ.ⵠᐃⲆᐃᐃⵠⵠⲆⵠ;
            ᐃΔ[1269][2] = ᐃⲆ.ⲆΔᐃⵠΔⲆⵠΔⲆ;
            ᐃΔ[1270] = ᐃΔ[1269];
            ᐃΔ[1268] = ᐃΔ[1269];
            ᐃΔ[1272] = [];
            ᐃΔ[1272][0] = ᐃⲆ.ⵠⵠⲆⲆΔⲆΔⲆⲆ;
            ᐃΔ[1272][1] = ᐃⲆ.ΔⵠⲆⵠᐃᐃΔᐃⲆ;
            ᐃΔ[1272][2] = ᐃⲆ.ⲆⲆΔⲆⲆΔᐃⲆⲆ;
            ᐃΔ[1273] = ᐃΔ[1272];
            ᐃΔ[1271] = ᐃΔ[1272];
            ᐃΔ[1239] = [];
            ᐃΔ[1239][0] = ᐃⲆ.ⵠᐃΔⵠΔΔⵠⲆⲆ;
            ᐃΔ[1239][1] = ᐃⲆ.ⲆᐃᐃᐃΔᐃⵠⵠⵠ;
            ᐃΔ[1239][2] = ᐃⲆ.ⲆⲆⲆᐃⲆᐃⵠⵠᐃ;
            ᐃΔ[1240] = ᐃΔ[1239];
            ᐃΔ[1238] = ᐃΔ[1239];
            ᐃΔ[1242] = [];
            ᐃΔ[1242][0] = ᐃⲆ.ⵠⲆⲆⵠⲆⲆΔΔᐃ;
            ᐃΔ[1242][1] = ᐃⲆ.ΔΔⵠᐃⵠⲆΔΔⲆ;
            ᐃΔ[1242][2] = ᐃⲆ.ⵠⵠⲆⲆⵠᐃⲆⵠᐃ;
            ᐃΔ[1243] = ᐃΔ[1242];
            ᐃΔ[1241] = ᐃΔ[1242];
            ᐃΔ[1245] = [];
            ᐃΔ[1245][0] = ᐃⲆ.ᐃⲆⵠⵠⵠΔⵠⲆⲆ;
            ᐃΔ[1245][1] = ᐃⲆ.ᐃΔⲆⵠᐃⵠΔⵠΔ;
            ᐃΔ[1245][2] = ᐃⲆ.ⵠᐃΔᐃⲆⵠΔⲆⲆ;
            ᐃΔ[1246] = ᐃΔ[1245];
            ᐃΔ[1244] = ᐃΔ[1245];
            ᐃΔ[1248] = [];
            ᐃΔ[1248][0] = ᐃⲆ.ⵠᐃΔᐃᐃᐃΔΔⲆ;
            ᐃΔ[1248][1] = ᐃⲆ.ᐃⵠⵠⲆⵠⲆⵠⵠⲆ;
            ᐃΔ[1248][2] = ᐃⲆ.ᐃⵠᐃⵠᐃⵠᐃⲆᐃ;
            ᐃΔ[1249] = ᐃΔ[1248];
            ᐃΔ[1247] = ᐃΔ[1248];
            ᐃΔ[1251] = [];
            ᐃΔ[1251][0] = ᐃⲆ.ⵠΔᐃᐃᐃᐃᐃⲆⵠ;
            ᐃΔ[1251][1] = ᐃⲆ.ᐃᐃΔⲆᐃⲆⲆⵠΔ;
            ᐃΔ[1251][2] = ᐃⲆ.ᐃⲆⵠΔⲆⲆⲆᐃΔ;
            ᐃΔ[1252] = ᐃΔ[1251];
            ᐃΔ[1250] = ᐃΔ[1251];
            ᐃΔ[1254] = [];
            ᐃΔ[1254][0] = ᐃⲆ.ⲆᐃΔΔΔᐃⵠΔⲆ;
            ᐃΔ[1254][1] = ᐃⲆ.ΔⵠᐃΔⵠⲆⲆᐃⵠ;
            ᐃΔ[1254][2] = ᐃⲆ.ⵠⵠΔᐃΔⵠⵠᐃᐃ;
            ᐃΔ[1255] = ᐃΔ[1254];
            ᐃΔ[1253] = ᐃΔ[1254];
            ᐃΔ[1227] = [];
            ᐃΔ[1227][0] = ᐃⲆ.ΔᐃᐃΔᐃᐃΔⵠᐃ;
            ᐃΔ[1227][1] = ᐃⲆ.ΔⵠⲆᐃⵠⵠⵠⵠⵠ;
            ᐃΔ[1227][2] = ᐃⲆ.ⲆᐃΔᐃⵠⲆⲆΔΔ;
            ᐃΔ[1229] = ᐃΔ[1227];
            ᐃΔ[1228] = ᐃΔ[1227];
            ᐃΔ[1187] = [];
            ᐃΔ[1187][0] = ᐃⲆ.ⵠⵠⵠΔᐃᐃⲆ;
            ᐃΔ[1187][1] = ᐃⲆ.ⵠᐃⲆⵠᐃᐃⵠ;
            ᐃΔ[1187][2] = ᐃⲆ.ⵠΔΔᐃⵠΔⲆ;
            ᐃΔ[1188] = ᐃΔ[1187];
            ᐃΔ[Hr.ⵠⲆⲆⲆᐃΔⵠΔⵠ] = ᐃΔ[1187];
            ᐃΔ[840] = Ct(1, [{
                f: ld,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
            }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[841] = ᐃΔ[840];
            ᐃΔ[850] = Ct(1, [{
                f: fp,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
            }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[851] = ᐃΔ[850];
            ᐃΔ[644] = Ct(1, [{
                f: Xd,
                x: -1,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
            }, {
                f: Yd,
                x: -1,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
            }, {
                f: At,
                x: -1,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
            }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[643] = ᐃΔ[644];
            ᐃΔ[639] = Ct(1, [{
                f: Vd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#A89F67", "#9E8456"]
            }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[800] = Ct(1, [{
                f: Kc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
            }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[799] = ᐃΔ[800];
            ᐃΔ[631] = Ct(1, [{
                f: ru,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#A89F67", "#9E8456"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[632] = ᐃΔ[631];
            ᐃΔ[311] = Ct(1, [{
                f: ru,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#493d36", "#332b28"]
            }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[284] = ᐃΔ[311];
            ᐃΔ[808] = Ct(1, [{
                f: ru,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#c67933", "#b17238"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[809] = ᐃΔ[808];
            ᐃΔ[834] = Ct(1, [{
                f: ru,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#e8e8e8", "#bbbbbb"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[835] = ᐃΔ[834];
            ᐃΔ[845] = Ct(1, [{
                f: ru,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#328a56", "#449573"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[846] = ᐃΔ[845];
            ᐃΔ[949] = Ct(1, [{
                f: ru,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#c98e2f", "#a36b11"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[950] = ᐃΔ[949];
            ᐃΔ[951] = ᐃΔ[949];
            ᐃΔ[966] = Ct(1, [{
                f: ru,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#13a56d", "#098a58"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[967] = ᐃΔ[966];
            ᐃΔ[968] = ᐃΔ[966];
            ᐃΔ[981] = Ct(1, [{
                f: ru,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#3a8214", "#4a9c1e"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[982] = ᐃΔ[981];
            ᐃΔ[983] = ᐃΔ[981];
            ᐃΔ[959] = Ct(1, [{
                f: ru,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#b22419", "#99110e"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[960] = ᐃΔ[959];
            ᐃΔ[961] = ᐃΔ[959];
            ᐃΔ[309] = Ct(1, [{
                f: It,
                x: -2,
                y: -2,
                a: 1,
                r: -Math.PI / 7,
                c: ["#4d2d14", "#432516"]
            }, {
                f: Et,
                x: -2,
                y: -2,
                a: 1,
                r: -Math.PI / 7,
                c: ["#efd435", "#ec8d35", "#e96132"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[302] = ᐃΔ[309];
            ᐃΔ[328] = Ct(1, [{
                f: Dt,
                x: -2,
                y: -1,
                a: 1,
                r: -Math.PI / 7,
                c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
            }, {
                f: Et,
                x: -2,
                y: -1,
                a: 1,
                r: -Math.PI / 7,
                c: ["#efd435", "#ec8d35", "#e96132"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[327] = ᐃΔ[328];
            ᐃΔ[860] = Ct(1, [{
                f: Zt,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
            }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[865] = Ct(1, [{
                f: ju,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
            }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[829] = Ct(1, [{
                f: au,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[261] = Ct(1, [{
                f: $t,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[292] = Ct(1, [{
                f: iu,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[293] = Ct(1, [{
                f: ku,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[455] = Ct(1, [{
                f: nu,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[313] = Ct(1, [{
                f: Vt,
                x: -2,
                y: 5,
                a: 1,
                r: -Math.PI / 5,
                c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[312] = Ct(1, [{
                f: Vt,
                x: -2,
                y: 5,
                a: 1,
                r: -Math.PI / 5,
                c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[258] = Ct(1, [{
                f: Vt,
                x: -2,
                y: 5,
                a: 1,
                r: -Math.PI / 5,
                c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[296] = Ct(1, [{
                f: Vt,
                x: -2,
                y: 5,
                a: 1,
                r: -Math.PI / 5,
                c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[458] = Ct(1, [{
                f: Vt,
                x: -2,
                y: 5,
                a: 1,
                r: -Math.PI / 5,
                c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[1017] = [];
            ᐃΔ[1017][0] = ᐃⲆ.ᐃⵠΔᐃΔᐃⲆ;
            ᐃΔ[1017][1] = ᐃⲆ.ⵠⵠᐃΔᐃⲆⲆ;
            ᐃΔ[1017][2] = ᐃⲆ.ⲆᐃΔᐃᐃΔⵠ;
            ᐃΔ[1019] = ᐃΔ[1017];
            ᐃΔ[1018] = ᐃΔ[1017];
            ᐃΔ[315] = Ct(1, [{
                f: su,
                x: -5,
                y: -5,
                a: 1,
                r: 0,
                c: ["#252B28", "#58645F", "#75827D"]
            }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[297] = Ct(1, [{
                f: tu,
                x: -5,
                y: -5,
                a: 1,
                r: 0,
                c: ["#282823", "#877c2d", "#c4bc51"]
            }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[298] = Ct(1, [{
                f: uu,
                x: -5,
                y: -5,
                a: 1,
                r: 0,
                c: ["#232828", "#3fc9c9", "#74ede6"]
            }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[316] = Ct(1, [{
                f: It,
                x: 0,
                y: -5,
                a: 1,
                r: Math.PI / 2.5,
                c: ["#4d2d14", "#432516"]
            }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[830] = ᐃΔ[829];
            ᐃΔ[254] = ᐃΔ[261];
            ᐃΔ[290] = ᐃΔ[292];
            ᐃΔ[291] = ᐃΔ[293];
            ᐃΔ[456] = ᐃΔ[455];
            ᐃΔ[314] = ᐃΔ[313];
            ᐃΔ[256] = ᐃΔ[312];
            ᐃΔ[295] = ᐃΔ[258];
            ᐃΔ[257] = ᐃΔ[296];
            ᐃΔ[460] = ᐃΔ[458];
            ᐃΔ[277] = Ct(1, [{
                f: Qd,
                x: 0,
                y: 0,
                a: 1,
                r: 0
            }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[310] = Ct(1, [{
                f: Fd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
            }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[262] = ᐃΔ[310];
            ᐃΔ[329] = Ct(1, [{
                f: pc,
                x: -2,
                y: -2,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
            }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[263] = ᐃΔ[329];
            ᐃΔ[331] = Ct(1, [{
                f: fc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
            }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[332] = ᐃΔ[331];
            ᐃΔ[492] = Ct(1, [{
                f: pc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
            }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[493] = ᐃΔ[492];
            ᐃΔ[330] = Ct(1, [{
                f: mc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
            }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[265] = ᐃΔ[330];
            ᐃΔ[317] = Ct(1, [{
                f: nc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
            }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[318] = ᐃΔ[317];
            ᐃΔ[319] = Ct(1, [{
                f: Wc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[320] = ᐃΔ[319];
            ᐃΔ[362] = Ct(1, [{
                f: Yc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[363] = ᐃΔ[362];
            ᐃΔ[364] = Ct(1, [{
                f: Yc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[365] = ᐃΔ[364];
            ᐃΔ[361] = Ct(1, [{
                f: Zc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[360] = ᐃΔ[361];
            ᐃΔ[495] = Ct(1, [{
                f: Zc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[496] = ᐃΔ[495];
            ᐃΔ[335] = Ct(1, [{
                f: yc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[268] = ᐃΔ[335];
            ᐃΔ[372] = Ct(1, [{
                f: Tc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[371] = ᐃΔ[372];
            ᐃΔ[499] = Ct(1, [{
                f: Tc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[498] = ᐃΔ[499];
            ᐃΔ[375] = Ct(1, [{
                f: Fc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[374] = ᐃΔ[375];
            ᐃΔ[378] = Ct(1, [{
                f: jc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[377] = ᐃΔ[378];
            ᐃΔ[337] = Ct(1, [{
                f: vc,
                x: 0,
                y: 2,
                a: 1,
                r: 0,
                c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[338] = ᐃΔ[337];
            ᐃΔ[300] = Ct(1, [{
                f: Gd,
                x: 0,
                y: -3,
                a: 1,
                r: 0,
                c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
            }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[323] = Ct(1, [{
                f: Gd,
                x: 0,
                y: -3,
                a: 1,
                r: 0,
                c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
            }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[325] = ᐃΔ[323];
            ᐃΔ[305] = Ct(1, [{
                f: $d,
                x: -3,
                y: -3,
                a: 1,
                r: 0,
                c: ["#cec0c4", "#ffffff", "#6d6768"]
            }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[513] = Ct(1, [{
                f: $d,
                x: -3,
                y: -3,
                a: 1,
                r: 0,
                c: ["#d4e9ec", "#37b1d7", "#506c71"]
            }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[515] = ᐃΔ[513];
            ᐃΔ[368] = Ct(1, [{
                f: Gc,
                x: -3,
                y: -3,
                a: 1,
                r: 0,
                c: ["#ef96be", "#ffffff"]
            }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[1162] = Ct(1, [{
                f: Gc,
                x: -3,
                y: -3,
                a: 1,
                r: 0,
                c: ["#55423e", "#ffffff"]
            }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[178] = Ct(1, [{
                f: Rc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
            }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[179] = Ct(1, [{
                f: Rc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
            }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[624] = Ct(1, [{
                f: Gc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#201851", "#b6222a"]
            }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[393] = Ct(1, [{
                f: Gc,
                x: -3,
                y: -3,
                a: 1,
                r: 0,
                c: ["#231f20", "#b6222a"]
            }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[505] = Ct(1, [{
                f: Gc,
                x: -3,
                y: -3,
                a: 1,
                r: 0,
                c: ["#ffffff", "#b6222a"]
            }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[369] = Ct(1, [{
                f: Oc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
            }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[370] = ᐃΔ[369];
            ᐃΔ[381] = Ct(1, [{
                f: kc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
            }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[380] = ᐃΔ[381];
            ᐃΔ[502] = Ct(1, [{
                f: Nc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
            }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[503] = ᐃΔ[502];
            ᐃΔ[880] = Ct(1, [{
                f: Kt,
                x: 0,
                y: 5,
                a: 1,
                r: 0,
                c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
            }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[881] = ᐃΔ[880];
            ᐃΔ[882] = Ct(1, [{
                f: Mt,
                x: 0,
                y: 5,
                a: 1,
                r: 0,
                c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
            }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[883] = ᐃΔ[882];
            ᐃΔ[303] = Ct(1, [{
                f: Ft,
                x: -2,
                y: -2,
                a: 1,
                r: 0,
                c: ["#ffffff", "#cec0c4"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[304] = ᐃΔ[303];
            ᐃΔ[392] = [];
            ᐃΔ[392][0] = ᐃⲆ.ᐃᐃΔⲆⵠΔΔ;
            ᐃΔ[392][1] = ᐃⲆ.ᐃᐃⵠⲆᐃⵠᐃ;
            ᐃΔ[392][2] = ᐃⲆ.ⲆⵠⵠⲆΔⲆᐃ;
            ᐃΔ[367] = ᐃΔ[392];
            ᐃΔ[975] = [];
            ᐃΔ[975][0] = ᐃⲆ.ΔΔⲆⲆᐃΔᐃ;
            ᐃΔ[975][1] = ᐃⲆ.ᐃⲆⵠᐃΔⵠⵠ;
            ᐃΔ[975][2] = ᐃⲆ.ΔᐃΔᐃⲆⲆΔ;
            ᐃΔ[977] = ᐃΔ[975];
            ᐃΔ[976] = ᐃΔ[975];
            ᐃΔ[978] = [];
            ᐃΔ[978][0] = ᐃⲆ.ⲆⵠⲆΔⲆⵠⵠ;
            ᐃΔ[978][1] = ᐃⲆ.ⲆΔⲆΔᐃᐃⲆ;
            ᐃΔ[978][2] = ᐃⲆ.ΔᐃᐃᐃᐃΔᐃ;
            ᐃΔ[980] = ᐃΔ[978];
            ᐃΔ[979] = ᐃΔ[978];
            ᐃΔ[1158] = [];
            ᐃΔ[1158][0] = ᐃⲆ.ΔⲆⵠⲆᐃᐃⵠ;
            ᐃΔ[1158][1] = ᐃⲆ.ΔⲆⵠⲆᐃᐃⵠ;
            ᐃΔ[1158][2] = ᐃⲆ.ΔⲆⵠⲆᐃᐃⵠ;
            ᐃΔ[1159] = ᐃΔ[1158];
            ᐃΔ[426] = [];
            ᐃΔ[426][0] = ᐃⲆ.ⵠⲆⵠⲆΔⵠᐃ;
            ᐃΔ[426][1] = ᐃⲆ.ⵠᐃⲆΔᐃᐃᐃ;
            ᐃΔ[426][2] = ᐃⲆ.ⲆᐃⵠⲆΔΔΔ;
            ᐃΔ[427] = ᐃΔ[426];
            ᐃΔ[428] = ᐃΔ[426];
            ᐃΔ[1160] = [];
            ᐃΔ[1160][0] = ᐃⲆ.ⲆⲆⲆΔΔⵠⲆ;
            ᐃΔ[1160][1] = ᐃⲆ.ⲆⲆⲆΔΔⵠⲆ;
            ᐃΔ[1160][2] = ᐃⲆ.ⲆⲆⲆΔΔⵠⲆ;
            ᐃΔ[1161] = ᐃΔ[1160];
            ᐃΔ[1236] = [];
            ᐃΔ[1236][0] = ᐃⲆ.ⲆᐃᐃⵠᐃΔᐃᐃⵠ;
            ᐃΔ[1236][1] = ᐃⲆ.ᐃⵠⵠΔΔᐃΔⵠΔ;
            ᐃΔ[1236][2] = ᐃⲆ.ⵠⵠΔΔΔⲆΔⲆⵠ;
            ᐃΔ[1235] = ᐃΔ[1236];
            ᐃΔ[1237] = ᐃΔ[1236];
            ᐃΔ[991] = [];
            ᐃΔ[991][0] = ᐃⲆ.ⲆⲆⵠᐃⲆⲆⲆ;
            ᐃΔ[991][1] = ᐃⲆ.ΔᐃⵠⲆᐃⵠΔ;
            ᐃΔ[991][2] = ᐃⲆ.ⵠⵠΔᐃᐃⵠⵠ;
            ᐃΔ[990] = ᐃΔ[991];
            ᐃΔ[992] = ᐃΔ[991];
            ᐃΔ[994] = [];
            ᐃΔ[994][0] = ᐃⲆ.ⲆΔⵠᐃΔⲆΔ;
            ᐃΔ[994][1] = ᐃⲆ.ᐃᐃᐃⲆᐃⵠᐃ;
            ᐃΔ[994][2] = ᐃⲆ.ⲆΔᐃⵠΔᐃΔ;
            ᐃΔ[993] = ᐃΔ[994];
            ᐃΔ[995] = ᐃΔ[994];
            ᐃΔ[997] = [];
            ᐃΔ[997][0] = ᐃⲆ.ⵠΔΔⲆΔᐃⵠ;
            ᐃΔ[997][1] = ᐃⲆ.ⵠⵠᐃᐃΔΔⲆ;
            ᐃΔ[997][2] = ᐃⲆ.ⲆΔΔⲆⵠⵠⵠ;
            ᐃΔ[996] = ᐃΔ[997];
            ᐃΔ[998] = ᐃΔ[997];
            ᐃΔ[1000] = [];
            ᐃΔ[1000][0] = ᐃⲆ.ⵠⵠᐃᐃⵠⲆΔ;
            ᐃΔ[1000][1] = ᐃⲆ.ΔΔⲆⲆΔⵠᐃ;
            ᐃΔ[1000][2] = ᐃⲆ.ᐃⵠΔΔΔⲆΔ;
            ᐃΔ[999] = ᐃΔ[1000];
            ᐃΔ[1001] = ᐃΔ[1000];
            ᐃΔ[1003] = [];
            ᐃΔ[1003][0] = ᐃⲆ.ⵠΔⵠΔⲆᐃⵠ;
            ᐃΔ[1003][1] = ᐃⲆ.ⵠⲆⵠⲆⲆⵠᐃ;
            ᐃΔ[1003][2] = ᐃⲆ.ⲆⵠⲆⵠΔΔⵠ;
            ᐃΔ[1002] = ᐃΔ[1003];
            ᐃΔ[1004] = ᐃΔ[1003];
            ᐃΔ[1006] = [];
            ᐃΔ[1006][0] = ᐃⲆ.ⲆΔᐃᐃᐃᐃΔ;
            ᐃΔ[1006][1] = ᐃⲆ.ᐃⵠᐃΔᐃⲆⲆ;
            ᐃΔ[1006][2] = ᐃⲆ.ΔⵠⵠⲆⵠᐃⵠ;
            ᐃΔ[1005] = ᐃΔ[1006];
            ᐃΔ[1007] = ᐃΔ[1006];
            ᐃΔ[1009] = [];
            ᐃΔ[1009][0] = ᐃⲆ.ⵠⲆⵠᐃΔⲆΔ;
            ᐃΔ[1009][1] = ᐃⲆ.ᐃᐃⲆⵠΔΔⲆ;
            ᐃΔ[1009][2] = ᐃⲆ.ΔⵠⲆⲆⵠⵠⵠ;
            ᐃΔ[1008] = ᐃΔ[1009];
            ᐃΔ[1010] = ᐃΔ[1009];
            ᐃΔ[1012] = [];
            ᐃΔ[1012][0] = ᐃⲆ.ⲆΔΔΔⲆΔⵠ;
            ᐃΔ[1012][1] = ᐃⲆ.ⵠΔΔⵠⵠⵠᐃ;
            ᐃΔ[1012][2] = ᐃⲆ.ⵠΔΔⲆᐃⵠᐃ;
            ᐃΔ[1011] = ᐃΔ[1012];
            ᐃΔ[1013] = ᐃΔ[1012];
            ᐃΔ[1015] = [];
            ᐃΔ[1015][0] = ᐃⲆ.ΔⵠⲆⲆⲆΔᐃ;
            ᐃΔ[1015][1] = ᐃⲆ.ⲆᐃⵠⵠΔᐃΔ;
            ᐃΔ[1015][2] = ᐃⲆ.ΔᐃⵠⵠⵠᐃΔ;
            ᐃΔ[1014] = ᐃΔ[1015];
            ᐃΔ[1016] = ᐃΔ[1015];
            ᐃΔ[1035] = [];
            ᐃΔ[1035][0] = ᐃⲆ.ⵠⲆⵠⲆᐃ;
            ᐃΔ[1035][1] = ᐃⲆ.ⵠⲆⵠⲆᐃ;
            ᐃΔ[1035][2] = ᐃⲆ.ⵠⲆⵠⲆᐃ;
            ᐃΔ[Hr.ⵠⵠⵠΔⵠⲆᐃΔⲆ] = ᐃΔ[1035];
            ᐃΔ[1036] = ᐃΔ[1035];
            ᐃΔ[1037] = [];
            ᐃΔ[1037][0] = ᐃⲆ.ⲆᐃᐃⲆⲆ;
            ᐃΔ[1037][1] = ᐃⲆ.ⲆᐃᐃⲆⲆ;
            ᐃΔ[1037][2] = ᐃⲆ.ⲆᐃᐃⲆⲆ;
            ᐃΔ[Hr.ΔᐃΔⵠᐃΔΔⵠΔ] = ᐃΔ[1037];
            ᐃΔ[1038] = ᐃΔ[1037];
            ᐃΔ[1039] = [];
            ᐃΔ[1039][0] = ᐃⲆ.ΔΔᐃᐃⲆ;
            ᐃΔ[1039][1] = ᐃⲆ.ΔΔᐃᐃⲆ;
            ᐃΔ[1039][2] = ᐃⲆ.ΔΔᐃᐃⲆ;
            ᐃΔ[Hr.ⵠᐃⲆΔΔᐃⵠΔΔ] = ᐃΔ[1039];
            ᐃΔ[1040] = ᐃΔ[1039];
            ᐃΔ[1156] = [];
            ᐃΔ[1156][0] = ᐃⲆ.ⲆⵠⵠΔⵠ;
            ᐃΔ[1156][1] = ᐃⲆ.ⲆⵠⵠΔⵠ;
            ᐃΔ[1156][2] = ᐃⲆ.ⲆⵠⵠΔⵠ;
            ᐃΔ[1157] = ᐃΔ[1156];
            ᐃΔ[1046] = [];
            ᐃΔ[1046][0] = ᐃⲆ.ᐃⵠⲆΔⵠⲆⵠ;
            ᐃΔ[1046][1] = ᐃⲆ.ΔΔΔᐃⲆΔΔ;
            ᐃΔ[1046][2] = ᐃⲆ.ⲆⲆᐃⵠᐃΔⲆ;
            ᐃΔ[1048] = ᐃΔ[1046];
            ᐃΔ[1047] = ᐃΔ[1046];
            ᐃΔ[744] = [];
            ᐃΔ[744][0] = ᐃⲆ.ΔΔᐃⲆⲆⲆⵠ;
            ᐃΔ[744][1] = ᐃⲆ.ⲆⲆΔΔⵠΔⵠ;
            ᐃΔ[744][2] = ᐃⲆ.ⲆΔⵠⲆᐃᐃᐃ;
            ᐃΔ[746] = ᐃΔ[744];
            ᐃΔ[745] = ᐃΔ[744];
            ᐃΔ[747] = [];
            ᐃΔ[747][0] = ᐃⲆ.ⵠΔⲆⵠⵠⲆᐃ;
            ᐃΔ[747][1] = ᐃⲆ.ⲆⲆⲆⲆⲆΔΔ;
            ᐃΔ[747][2] = ᐃⲆ.ᐃᐃⵠⲆⵠᐃΔ;
            ᐃΔ[749] = ᐃΔ[747];
            ᐃΔ[748] = ᐃΔ[747];
            ᐃΔ[1049] = [];
            ᐃΔ[1049][0] = ᐃⲆ.ᐃⵠΔΔᐃⲆⵠ;
            ᐃΔ[1049][1] = ᐃⲆ.ΔⲆΔᐃᐃΔⲆ;
            ᐃΔ[1049][2] = ᐃⲆ.ᐃⵠᐃᐃⵠⵠᐃ;
            ᐃΔ[1051] = ᐃΔ[1049];
            ᐃΔ[1050] = ᐃΔ[1049];
            ᐃΔ[1189] = [];
            ᐃΔ[1189][0] = ᐃⲆ.ᐃⵠⲆⵠΔᐃⲆ;
            ᐃΔ[1189][1] = ᐃⲆ.ⲆⲆΔⲆᐃΔΔ;
            ᐃΔ[1189][2] = ᐃⲆ.ⵠᐃⲆΔⵠⵠⲆ;
            ᐃΔ[1191] = ᐃΔ[1189];
            ᐃΔ[1190] = ᐃΔ[1189];
            ᐃΔ[1110] = [];
            ᐃΔ[1110][0] = ᐃⲆ.ΔⲆⲆⵠΔⵠᐃ;
            ᐃΔ[1110][1] = ᐃⲆ.ⲆᐃⵠⵠΔᐃᐃ;
            ᐃΔ[1110][2] = ᐃⲆ.ᐃΔΔⵠⲆⲆᐃ;
            ᐃΔ[1112] = ᐃΔ[1110];
            ᐃΔ[1111] = ᐃΔ[1110];
            ᐃΔ[1131] = [];
            ᐃΔ[1131][0] = ᐃⲆ.ⵠΔᐃᐃΔⲆᐃΔᐃ;
            ᐃΔ[1131][1] = ᐃⲆ.ᐃᐃⵠⵠⵠⲆΔᐃⵠ;
            ᐃΔ[1131][2] = ᐃⲆ.ⲆᐃᐃⵠΔⲆⲆᐃⵠ;
            ᐃΔ[1133] = ᐃΔ[1131];
            ᐃΔ[1132] = ᐃΔ[1131];
            ᐃΔ[1137] = [];
            ᐃΔ[1137][0] = ᐃⲆ.ᐃⲆⲆᐃΔΔⲆ;
            ᐃΔ[1137][1] = ᐃⲆ.ᐃΔⵠΔⲆⵠⵠ;
            ᐃΔ[1137][2] = ᐃⲆ.ΔⲆⲆⵠⵠⲆᐃ;
            ᐃΔ[1138] = ᐃΔ[1137];
            ᐃΔ[1139] = ᐃΔ[1137];
            ᐃΔ[1140] = [];
            ᐃΔ[1140][0] = ᐃⲆ.ΔᐃⵠᐃΔⲆⲆ;
            ᐃΔ[1140][1] = ᐃⲆ.ΔⵠᐃⲆᐃⲆⲆ;
            ᐃΔ[1140][2] = ᐃⲆ.ⵠᐃᐃᐃΔᐃᐃ;
            ᐃΔ[1141] = ᐃΔ[1140];
            ᐃΔ[1142] = ᐃΔ[1140];
            ᐃΔ[1117] = [];
            ᐃΔ[1117][0] = ᐃⲆ.ᐃΔⲆΔᐃΔᐃ;
            ᐃΔ[1117][1] = ᐃⲆ.ᐃⵠⵠⲆΔⲆΔ;
            ᐃΔ[1117][2] = ᐃⲆ.ᐃᐃⵠⲆᐃᐃⵠ;
            ᐃΔ[1116] = ᐃΔ[1117];
            ᐃΔ[1118] = ᐃΔ[1117];
            ᐃΔ[1080] = [];
            ᐃΔ[1080][0] = ᐃⲆ.ᐃᐃⵠΔᐃⲆᐃ;
            ᐃΔ[1080][1] = ᐃⲆ.ⵠⵠΔᐃΔΔⲆ;
            ᐃΔ[1080][2] = ᐃⲆ.ᐃᐃⵠΔΔᐃΔ;
            ᐃΔ[1082] = ᐃΔ[1080];
            ᐃΔ[1081] = ᐃΔ[1080];
            ᐃΔ[1224] = [];
            ᐃΔ[1224][0] = ᐃⲆ.ΔⵠΔᐃΔⲆᐃⲆⵠ;
            ᐃΔ[1224][1] = ᐃⲆ.ⲆⲆⲆⵠⵠᐃⲆΔᐃ;
            ᐃΔ[1224][2] = ᐃⲆ.ΔᐃᐃᐃᐃⲆⲆᐃΔ;
            ᐃΔ[1226] = ᐃΔ[1224];
            ᐃΔ[1225] = ᐃΔ[1224];
            ᐃΔ[1095] = [];
            ᐃΔ[1095][0] = ᐃⲆ.ⲆᐃΔΔΔᐃⵠ;
            ᐃΔ[1095][1] = ᐃⲆ.ⲆⲆΔⲆⵠᐃⲆ;
            ᐃΔ[1095][2] = ᐃⲆ.ΔᐃⲆⵠΔⲆⵠ;
            ᐃΔ[1097] = ᐃΔ[1095];
            ᐃΔ[1096] = ᐃΔ[1095];
            ᐃΔ[717] = Ct(1, [{
                f: Nm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
            }, {
                f: $m,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#e4c027"]
            }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[718] = ᐃΔ[717];
            ᐃΔ[408] = Ct(1, [{
                f: Pc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
            }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[409] = ᐃΔ[408];
            ᐃΔ[907] = Ct(1, [{
                f: dc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
            }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[909] = ᐃΔ[907];
            ᐃΔ[908] = ᐃΔ[907];
            ᐃΔ[197] = Ct(1, [{
                f: _c,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
            }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[906] = ᐃΔ[197];
            ᐃΔ[901] = Ct(1, [{
                f: Ic,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[900] = ᐃΔ[901];
            ᐃΔ[899] = ᐃΔ[901];
            ᐃΔ[401] = Ct(1, [{
                f: wc,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[402] = ᐃΔ[401];
            ᐃΔ[395] = Ct(1, [{
                f: Cc,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[396] = ᐃΔ[395];
            ᐃΔ[398] = Ct(1, [{
                f: Dc,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[399] = ᐃΔ[398];
            ᐃΔ[404] = Ct(1, [{
                f: lc,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[405] = ᐃΔ[404];
            ᐃΔ[472] = Ct(1, [{
                f: Qc,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[473] = ᐃΔ[472];
            ᐃΔ[874] = Ct(1, [{
                f: uc,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
            }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[876] = ᐃΔ[874];
            ᐃΔ[875] = ᐃΔ[874];
            ᐃΔ[477] = Ct(1, [{
                f: Vc,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
            }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[478] = ᐃΔ[477];
            ᐃΔ[709] = Ct(1, [{
                f: zp,
                x: 0,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#939393", "#5f6061"]
            }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[711] = ᐃΔ[709];
            ᐃΔ[550] = Ct(1, [{
                f: Fm,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
            }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[551] = ᐃΔ[550];
            ᐃΔ[480] = Ct(1, [{
                f: Vc,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
            }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[481] = ᐃΔ[480];
            ᐃΔ[483] = Ct(1, [{
                f: Vc,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
            }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[484] = ᐃΔ[483];
            ᐃΔ[486] = Ct(1, [{
                f: Vc,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
            }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[487] = ᐃΔ[486];
            ᐃΔ[489] = [];
            ᐃΔ[489][0] = ᐃⲆ.ⲆΔⵠⲆᐃⲆᐃ;
            ᐃΔ[489][1] = ᐃⲆ.ΔⲆΔⲆⵠⲆⵠ;
            ᐃΔ[489][2] = ᐃⲆ.ΔⲆⲆⵠⵠⵠΔ;
            ᐃΔ[491] = ᐃΔ[489];
            ᐃΔ[490] = ᐃΔ[489];
            ᐃΔ[1195] = [];
            ᐃΔ[1195][0] = ᐃⲆ.ᐃᐃΔⲆΔᐃⵠ;
            ᐃΔ[1195][1] = ᐃⲆ.ΔᐃᐃⵠΔΔΔ;
            ᐃΔ[1195][2] = ᐃⲆ.ᐃᐃⲆⲆᐃᐃᐃ;
            ᐃΔ[1197] = ᐃΔ[1195];
            ᐃΔ[1196] = ᐃΔ[1195];
            ᐃΔ[1199] = [];
            ᐃΔ[1199][0] = ᐃⲆ.ΔⲆΔᐃⵠΔᐃ;
            ᐃΔ[1199][1] = ᐃⲆ.ⵠΔᐃⵠᐃⵠᐃ;
            ᐃΔ[1199][2] = ᐃⲆ.ⵠᐃⲆᐃⵠⵠⵠ;
            ᐃΔ[1201] = ᐃΔ[1199];
            ᐃΔ[1200] = ᐃΔ[1199];
            ᐃΔ[1203] = [];
            ᐃΔ[1203][0] = ᐃⲆ.ᐃᐃΔΔΔⵠⵠ;
            ᐃΔ[1203][1] = ᐃⲆ.ⲆΔᐃⲆᐃⲆⲆ;
            ᐃΔ[1203][2] = ᐃⲆ.ⵠⵠⵠᐃΔᐃⵠ;
            ᐃΔ[1205] = ᐃΔ[1203];
            ᐃΔ[1204] = ᐃΔ[1203];
            ᐃΔ[1207] = [];
            ᐃΔ[1207][0] = ᐃⲆ.ⵠΔᐃⵠⲆᐃⲆ;
            ᐃΔ[1207][1] = ᐃⲆ.ⲆΔᐃⲆⵠᐃᐃ;
            ᐃΔ[1207][2] = ᐃⲆ.ΔᐃΔᐃᐃⵠᐃ;
            ᐃΔ[1209] = ᐃΔ[1207];
            ᐃΔ[1208] = ᐃΔ[1207];
            ᐃΔ[1211] = [];
            ᐃΔ[1211][0] = ᐃⲆ.ⵠᐃⲆⵠⲆᐃⲆ;
            ᐃΔ[1211][1] = ᐃⲆ.ⲆΔⲆⲆⵠΔⲆ;
            ᐃΔ[1211][2] = ᐃⲆ.ᐃᐃⵠⵠⵠΔⵠ;
            ᐃΔ[1213] = ᐃΔ[1211];
            ᐃΔ[1212] = ᐃΔ[1211];
            ᐃΔ[1215] = [];
            ᐃΔ[1215][0] = ᐃⲆ.ᐃⲆΔΔⲆᐃⲆ;
            ᐃΔ[1215][1] = ᐃⲆ.ⲆⵠΔᐃᐃΔⲆ;
            ᐃΔ[1215][2] = ᐃⲆ.ⵠⲆᐃᐃⲆⵠⲆ;
            ᐃΔ[1217] = ᐃΔ[1215];
            ᐃΔ[1216] = ᐃΔ[1215];
            ᐃΔ[518] = Ct(1, [{
                f: Hm,
                x: -2,
                y: -2,
                a: 1,
                r: 0,
                c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
            }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[519] = ᐃΔ[518];
            ᐃΔ[532] = Ct(1, [{
                f: Qm,
                x: -2,
                y: -2,
                a: 1,
                r: -Math.PI / 5,
                c: ["#141414", "#c4a23a", "#816511"]
            }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[533] = ᐃΔ[532];
            ᐃΔ[521] = Ct(1, [{
                f: Xm,
                x: -2,
                y: -2,
                a: 1,
                r: 0,
                c: ["#141414", "#178a99", "#0a6372", "#03282e"]
            }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
            ᐃΔ[523] = Ct(1, [{
                f: Xm,
                x: -2,
                y: -2,
                a: 1,
                r: 0,
                c: ["#120202", "#991616", "#750a0a", "#120202"]
            }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
            ᐃΔ[529] = Ct(1, [{
                f: Sm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#347f93", "#54a4ba"]
            }, {
                f: Om,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
            }, {
                f: qm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#a9e4ed", "#86d4e0"]
            }, {
                f: Km,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[530] = ᐃΔ[529];
            ᐃΔ[553] = Ct(1, [{
                f: Im,
                x: 45,
                y: 70,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[555] = ᐃΔ[553];
            ᐃΔ[541] = Ct(1, [{
                f: ym,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
            }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[542] = ᐃΔ[541];
            ᐃΔ[779] = Ct(1, [{
                f: wp,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[780] = ᐃΔ[779];
            ᐃΔ[767] = Ct(1, [{
                f: kp,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#2a2938", "#242330", "#313041"]
            }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[768] = ᐃΔ[767];
            ᐃΔ[776] = Ct(1, [{
                f: cp,
                x: 0,
                y: 3,
                a: 1,
                r: 0,
                c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
            }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[777] = ᐃΔ[776];
            ᐃΔ[771] = Ct(1, [{
                f: cp,
                x: 0,
                y: 3,
                a: 1,
                r: 0,
                c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
            }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[772] = ᐃΔ[771];
            ᐃΔ[756] = Ct(1, [{
                f: Fp,
                x: 0,
                y: 10,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[758] = ᐃΔ[756];
            ᐃΔ[760] = Ct(1, [{
                f: Fp,
                x: 0,
                y: 10,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[762] = ᐃΔ[760];
            ᐃΔ[764] = Ct(1, [{
                f: Fp,
                x: 0,
                y: 10,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[770] = ᐃΔ[764];
            ᐃΔ[910] = Ct(1, [{
                f: Sc,
                x: -1,
                y: 0,
                a: 1,
                r: 0,
                c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[912] = ᐃΔ[910];
            ᐃΔ[911] = ᐃΔ[910];
            ᐃΔ[732] = Ct(1, [{
                f: rm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
            }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[734] = ᐃΔ[732];
            ᐃΔ[563] = Ct(1, [{
                f: Lm,
                x: 0,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
            }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[564] = ᐃΔ[563];
            ᐃΔ[751] = Ct(1, [{
                f: np,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
            }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[252] = Ct(1, [{
                f: Em,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
            }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[753] = Ct(1, [{
                f: np,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
            }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[253] = Ct(1, [{
                f: Em,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
            }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[176] = Ct(1, [{
                f: _m,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
            }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[177] = Ct(1, [{
                f: _m,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
            }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[175] = Ct(1, [{
                f: _m,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
            }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[616] = Ct(1, [{
                f: bp,
                x: 0,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[618] = ᐃΔ[616];
            ᐃΔ[699] = Ct(1, [{
                f: bp,
                x: 0,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[700] = ᐃΔ[699];
            ᐃΔ[702] = Ct(1, [{
                f: bp,
                x: 0,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[704] = ᐃΔ[702];
            ᐃΔ[705] = Ct(1, [{
                f: bp,
                x: 0,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[706] = ᐃΔ[705];
            ᐃΔ[420] = Ct(1, [{
                f: Am,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
            }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[421] = ᐃΔ[420];
            ᐃΔ[826] = Ct(1, [{
                f: fm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#252525", "#73583e", "#493425", "#7d6144"]
            }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[827] = ᐃΔ[826];
            ᐃΔ[429] = Ct(1, [{
                f: Jm,
                x: 0,
                y: -2,
                a: 1,
                r: 0,
                c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
            }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[430] = ᐃΔ[429];
            ᐃΔ[432] = Ct(1, [{
                f: xm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#dbce71", "#b29c32", "#c4bc51"]
            }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[433] = ᐃΔ[432];
            ᐃΔ[435] = Ct(1, [{
                f: zm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[436] = ᐃΔ[435];
            ᐃΔ[438] = Ct(1, [{
                f: km,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[439] = ᐃΔ[438];
            ᐃΔ[441] = Ct(1, [{
                f: ap,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#221e1b", "#ffffff", "#f6f0e7"]
            }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[442] = ᐃΔ[441];
            ᐃΔ[418] = Ct(1, [{
                f: om,
                x: -5,
                y: -5,
                a: 1,
                r: 0,
                c: ["#1d051e", "#c27add", "#cd98e5"]
            }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[609] = Ct(1, [{
                f: Bm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#D7C393", "#a48c6c"]
            }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[142] = Ct(1, [{
                f: ep,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#93CBCE", "#E9F6F6"]
            }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[140] = Ct(1, [{
                f: Bm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#866432", "#6b4f25"]
            }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[180] = Ct(1, [{
                f: yp,
                x: 3,
                y: 2,
                a: 1,
                r: 0,
                c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
            }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[181] = Ct(1, [{
                f: Cp,
                x: 3,
                y: 2,
                a: 1,
                r: 0,
                c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
            }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[784] = ᐃΔ[180];
            ᐃΔ[785] = ᐃΔ[181];
            ᐃΔ[789] = Ct(1, [{
                f: Um,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
            }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[791] = ᐃΔ[789];
            ᐃΔ[613] = Ct(1, [{
                f: up,
                x: 0,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
            }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[612] = Ct(1, [{
                f: Qp,
                x: 0,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
            }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[715] = ᐃΔ[613];
            ᐃΔ[611] = ᐃΔ[612];
            ᐃΔ[634] = Ct(1, [{
                f: hu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[635] = ᐃΔ[634];
            ᐃΔ[200] = Ct(1, [{
                f: lu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[866] = Ct(1, [{
                f: fu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[143] = Ct(1, [{
                f: Ym,
                x: 0,
                y: -2,
                a: 1,
                r: 0,
                c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
            }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[690] = ᐃΔ[143];
            ᐃΔ[662] = Ct(1, [{
                f: ac,
                x: -3,
                y: -5,
                a: 1,
                r: 0,
                c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
            }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[664] = Ct(1, [{
                f: oc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1d051e", "#42261A", "#281818"]
            }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[666] = ᐃΔ[664];
            ᐃΔ[649] = Ct(1, [{
                f: ic,
                x: -3,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
            }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[650] = ᐃΔ[649];
            ᐃΔ[674] = Ct(1, [{
                f: Kd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
            }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[646] = Ct(1, [{
                f: sc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
            }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[647] = ᐃΔ[646];
            ᐃΔ[685] = Ct(1, [{
                f: Gm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[684] = ᐃΔ[685];
            ᐃΔ[870] = Ct(1, [{
                f: zd,
                x: -5,
                y: -5,
                a: 1,
                r: 0,
                c: ["#e2d63b", "#ee71a9", "#42b672"]
            }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[871] = ᐃΔ[870];
            ᐃΔ[605] = Ct(1, [{
                f: jm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
            }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[604] = ᐃΔ[605];
            ᐃΔ[842] = Ct(1, [{
                f: Pd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[843] = ᐃΔ[842];
            ᐃΔ[652] = Ct(1, [{
                f: Vm,
                x: -1,
                y: 0,
                a: 1,
                r: -Math.PI / 5,
                c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
            }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
            ᐃΔ[654] = ᐃΔ[652];
            ᐃΔ[626] = Ct(1, [{
                f: Vm,
                x: -1,
                y: 0,
                a: 1,
                r: -Math.PI / 5,
                c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
            }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[627] = ᐃΔ[626];
            ᐃΔ[629] = Ct(1, [{
                f: rp,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
            }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[196] = Ct(1, [{
                f: mu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
            }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[898] = ᐃΔ[196];
            ᐃΔ[659] = Ct(1, [{
                f: rc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
            }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[660] = ᐃΔ[659];
            ᐃΔ[145] = Ct(1, [{
                f: Hd,
                x: -2,
                y: -8,
                a: 1,
                r: 0,
                c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
            }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[730] = ᐃΔ[145];
            ᐃΔ[566] = [];
            ᐃΔ[566][0] = ᐃⲆ.ᐃᐃⲆⵠⲆⲆⵠ;
            ᐃΔ[566][1] = ᐃⲆ.ⵠⲆⵠᐃⲆᐃⵠ;
            ᐃΔ[566][2] = ᐃⲆ.ΔΔᐃⲆᐃⵠᐃ;
            ᐃΔ[567] = ᐃΔ[566];
            ᐃΔ[568] = ᐃΔ[566];
            ᐃΔ[877] = [];
            ᐃΔ[877][0] = ᐃⲆ.ⵠⲆΔⵠⵠΔᐃ;
            ᐃΔ[877][1] = ᐃⲆ.ᐃᐃⵠΔⲆⵠᐃ;
            ᐃΔ[877][2] = ᐃⲆ.ΔΔΔΔⵠΔᐃ;
            ᐃΔ[879] = ᐃΔ[877];
            ᐃΔ[878] = ᐃΔ[877];
            ᐃΔ[933] = ᐃΔ[932];
            ᐃΔ[934] = ᐃΔ[932];
            ᐃΔ[932] = [];
            ᐃΔ[932][0] = ᐃⲆ.ⵠᐃⵠΔΔⲆⲆ;
            ᐃΔ[932][1] = ᐃⲆ.ΔⲆᐃⵠΔᐃⵠ;
            ᐃΔ[932][2] = ᐃⲆ.ⵠΔΔⲆΔⵠΔ;
            ᐃΔ[933] = ᐃΔ[932];
            ᐃΔ[934] = ᐃΔ[932];
            ᐃΔ[943] = [];
            ᐃΔ[943][0] = ᐃⲆ.ᐃΔᐃᐃᐃᐃᐃ;
            ᐃΔ[943][1] = ᐃⲆ.ⵠⲆᐃⲆᐃⲆⵠ;
            ᐃΔ[943][2] = ᐃⲆ.ᐃᐃΔⵠᐃΔⲆ;
            ᐃΔ[944] = ᐃΔ[943];
            ᐃΔ[945] = ᐃΔ[943];
            ᐃΔ[921] = [];
            ᐃΔ[921][0] = ᐃⲆ.ⵠᐃΔⵠΔⵠⵠ;
            ᐃΔ[921][1] = ᐃⲆ.ᐃᐃΔᐃⵠΔⵠ;
            ᐃΔ[921][2] = ᐃⲆ.ΔⵠΔⲆⲆᐃΔ;
            ᐃΔ[922] = ᐃΔ[921];
            ᐃΔ[923] = ᐃΔ[921];
            ᐃΔ[925] = [];
            ᐃΔ[925][0] = ᐃⲆ.ΔⲆᐃⲆⵠᐃᐃ;
            ᐃΔ[925][1] = ᐃⲆ.ⵠΔᐃᐃΔΔΔ;
            ᐃΔ[925][2] = ᐃⲆ.ⵠⵠΔⵠⲆⲆᐃ;
            ᐃΔ[926] = ᐃΔ[925];
            ᐃΔ[927] = ᐃΔ[925];
            ᐃΔ[929] = [];
            ᐃΔ[929][0] = ᐃⲆ.ᐃⵠⵠⲆᐃᐃΔ;
            ᐃΔ[929][1] = ᐃⲆ.ΔⲆΔⵠΔⲆᐃ;
            ᐃΔ[929][2] = ᐃⲆ.ⲆᐃᐃΔⵠᐃᐃ;
            ᐃΔ[930] = ᐃΔ[929];
            ᐃΔ[931] = ᐃΔ[929];
            ᐃΔ[946] = [];
            ᐃΔ[946][0] = ᐃⲆ.ⵠΔⵠΔⲆΔⲆ;
            ᐃΔ[946][1] = ᐃⲆ.ⵠⲆⲆⵠᐃΔⲆ;
            ᐃΔ[946][2] = ᐃⲆ.ᐃΔⵠⲆⵠΔΔ;
            ᐃΔ[947] = ᐃΔ[946];
            ᐃΔ[948] = ᐃΔ[946];
            ᐃΔ[735] = [];
            ᐃΔ[735][0] = ᐃⲆ.ΔⵠᐃΔᐃⲆΔ;
            ᐃΔ[735][1] = ᐃⲆ.ΔⵠᐃᐃᐃⲆⲆ;
            ᐃΔ[735][2] = ᐃⲆ.ᐃⵠⲆⲆΔᐃΔ;
            ᐃΔ[737] = ᐃΔ[735];
            ᐃΔ[736] = ᐃΔ[735];
            ᐃΔ[1164] = [];
            ᐃΔ[1164][0] = ᐃⲆ.ᐃⵠⵠⲆⵠⲆⲆ;
            ᐃΔ[1164][1] = ᐃⲆ.ᐃᐃᐃⲆΔⵠΔ;
            ᐃΔ[1164][2] = ᐃⲆ.ⵠΔᐃᐃⲆΔⵠ;
            ᐃΔ[Hr.ⵠᐃⵠⲆⲆΔⵠᐃⵠ] = ᐃΔ[1164];
            ᐃΔ[1165] = ᐃΔ[1164];
            ᐃΔ[738] = [];
            ᐃΔ[738][0] = ᐃⲆ.ΔⵠΔⵠᐃᐃⵠ;
            ᐃΔ[738][1] = ᐃⲆ.ⲆᐃⵠᐃⵠⲆⲆ;
            ᐃΔ[738][2] = ᐃⲆ.ᐃⲆⵠⲆⵠᐃΔ;
            ᐃΔ[740] = ᐃΔ[738];
            ᐃΔ[739] = ᐃΔ[738];
            ᐃΔ[741] = [];
            ᐃΔ[741][0] = ᐃⲆ.ⲆᐃⲆⲆⲆⲆⲆ;
            ᐃΔ[741][1] = ᐃⲆ.ⲆⲆΔᐃⵠⲆᐃ;
            ᐃΔ[741][2] = ᐃⲆ.ᐃⲆⲆᐃⵠᐃⲆ;
            ᐃΔ[743] = ᐃΔ[741];
            ᐃΔ[742] = ᐃΔ[741];
            ᐃΔ[938] = [];
            ᐃΔ[938][0] = ᐃⲆ.ΔᐃΔᐃⲆⵠᐃ;
            ᐃΔ[938][1] = ᐃⲆ.ᐃⵠⵠⵠⵠᐃΔ;
            ᐃΔ[938][2] = ᐃⲆ.ⲆⵠᐃⵠᐃⲆⵠ;
            ᐃΔ[939] = ᐃΔ[938];
            ᐃΔ[936] = [];
            ᐃΔ[936][0] = ᐃⲆ.ΔΔⲆⲆΔⵠⲆ;
            ᐃΔ[936][1] = ᐃⲆ.ⲆᐃᐃⲆⲆⵠᐃ;
            ᐃΔ[936][2] = ᐃⲆ.ᐃΔᐃᐃΔⲆⵠ;
            ᐃΔ[937] = ᐃΔ[936];
            ᐃΔ[617] = ᐃΔ[616];
            ᐃΔ[701] = ᐃΔ[699];
            ᐃΔ[703] = ᐃΔ[702];
            ᐃΔ[707] = ᐃΔ[705];
            ᐃΔ[348] = ᐃΔ[311];
            ᐃΔ[633] = ᐃΔ[631];
            ᐃΔ[645] = ᐃΔ[644];
            ᐃΔ[640] = ᐃΔ[639];
            ᐃΔ[273] = ᐃΔ[309];
            ᐃΔ[590] = ᐃΔ[252];
            ᐃΔ[752] = ᐃΔ[751];
            ᐃΔ[591] = ᐃΔ[253];
            ᐃΔ[754] = ᐃΔ[753];
            ᐃΔ[276] = ᐃΔ[328];
            ᐃΔ[863] = ᐃΔ[865];
            ᐃΔ[862] = ᐃΔ[860];
            ᐃΔ[831] = ᐃΔ[829];
            ᐃΔ[340] = ᐃΔ[261];
            ᐃΔ[596] = ᐃΔ[594];
            ᐃΔ[345] = ᐃΔ[292];
            ᐃΔ[346] = ᐃΔ[293];
            ᐃΔ[457] = ᐃΔ[455];
            ᐃΔ[274] = ᐃΔ[313];
            ᐃΔ[341] = ᐃΔ[312];
            ᐃΔ[272] = ᐃΔ[258];
            ᐃΔ[344] = ᐃΔ[296];
            ᐃΔ[459] = ᐃΔ[458];
            ᐃΔ[342] = ᐃΔ[315];
            ᐃΔ[270] = ᐃΔ[297];
            ᐃΔ[271] = ᐃΔ[298];
            ᐃΔ[343] = ᐃΔ[316];
            ᐃΔ[269] = ᐃΔ[277];
            ᐃΔ[358] = ᐃΔ[310];
            ᐃΔ[354] = ᐃΔ[329];
            ᐃΔ[356] = ᐃΔ[331];
            ᐃΔ[355] = ᐃΔ[330];
            ᐃΔ[494] = ᐃΔ[492];
            ᐃΔ[349] = ᐃΔ[317];
            ᐃΔ[350] = ᐃΔ[319];
            ᐃΔ[275] = ᐃΔ[300];
            ᐃΔ[351] = ᐃΔ[323];
            ᐃΔ[353] = ᐃΔ[305];
            ᐃΔ[514] = ᐃΔ[513];
            ᐃΔ[352] = ᐃΔ[303];
            ᐃΔ[520] = ᐃΔ[518];
            ᐃΔ[534] = ᐃΔ[532];
            ᐃΔ[531] = ᐃΔ[529];
            ᐃΔ[522] = ᐃΔ[521];
            ᐃΔ[524] = ᐃΔ[523];
            ᐃΔ[565] = ᐃΔ[563];
            ᐃΔ[554] = ᐃΔ[553];
            ᐃΔ[357] = ᐃΔ[335];
            ᐃΔ[359] = ᐃΔ[337];
            ᐃΔ[339] = $a(function (a, b, c) {
                var d = document.createElement("canvas");
                var e = d.getContext("2d");
                d.width = a * 118;
                d.height = a * 129;
                e.save();
                e.translate(a * 90, a * 90);
                Zb(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
                e.restore();
                $b(e, c[0], c[1], 4);
                e.save();
                Zb(e, a * 30, a * 115, a * 60, a * 5, a * 15);
                e.restore();
                $b(e, c[2], c[3], 4);
                e.save();
                Zb(e, a * 50, a * 117, a * 20, a * 10, a * 15);
                e.restore();
                $b(e, c[2]);
                return d;
            }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
            ᐃΔ[366] = Ct(0.5, [{
                f: bc,
                x: 0,
                y: 2,
                a: 1,
                r: 0,
                c: ["#ffffff"]
            }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
            ᐃΔ[382] = ᐃΔ[361];
            ᐃΔ[383] = ᐃΔ[362];
            ᐃΔ[384] = ᐃΔ[364];
            ᐃΔ[497] = ᐃΔ[495];
            ᐃΔ[385] = ᐃΔ[392];
            ᐃΔ[774] = ᐃΔ[178];
            ᐃΔ[775] = ᐃΔ[179];
            ᐃΔ[386] = ᐃΔ[368];
            ᐃΔ[625] = ᐃΔ[624];
            ᐃΔ[394] = ᐃΔ[393];
            ᐃΔ[1163] = ᐃΔ[1162];
            ᐃΔ[506] = ᐃΔ[505];
            ᐃΔ[387] = ᐃΔ[369];
            ᐃΔ[504] = ᐃΔ[502];
            ᐃΔ[388] = ᐃΔ[372];
            ᐃΔ[389] = ᐃΔ[375];
            ᐃΔ[390] = ᐃΔ[378];
            ᐃΔ[501] = ᐃΔ[499];
            ᐃΔ[391] = ᐃΔ[381];
            ᐃΔ[403] = ᐃΔ[401];
            ᐃΔ[397] = ᐃΔ[395];
            ᐃΔ[400] = ᐃΔ[398];
            ᐃΔ[406] = ᐃΔ[404];
            ᐃΔ[474] = ᐃΔ[472];
            ᐃΔ[875] = ᐃΔ[874];
            ᐃΔ[552] = ᐃΔ[550];
            ᐃΔ[710] = ᐃΔ[709];
            ᐃΔ[479] = ᐃΔ[477];
            ᐃΔ[482] = ᐃΔ[480];
            ᐃΔ[485] = ᐃΔ[483];
            ᐃΔ[488] = ᐃΔ[486];
            ᐃΔ[410] = ᐃΔ[408];
            ᐃΔ[719] = ᐃΔ[717];
            ᐃΔ[422] = ᐃΔ[420];
            ᐃΔ[431] = ᐃΔ[429];
            ᐃΔ[434] = ᐃΔ[432];
            ᐃΔ[437] = ᐃΔ[435];
            ᐃΔ[543] = ᐃΔ[541];
            ᐃΔ[733] = ᐃΔ[732];
            ᐃΔ[440] = ᐃΔ[438];
            ᐃΔ[443] = ᐃΔ[441];
            ᐃΔ[446] = ᐃΔ[418];
            ᐃΔ[606] = ᐃΔ[605];
            ᐃΔ[844] = ᐃΔ[842];
            ᐃΔ[683] = ᐃΔ[685];
            ᐃΔ[610] = ᐃΔ[609];
            ᐃΔ[689] = ᐃΔ[143];
            ᐃΔ[686] = ᐃΔ[142];
            ᐃΔ[682] = ᐃΔ[140];
            ᐃΔ[615] = ᐃΔ[613];
            ᐃΔ[614] = ᐃΔ[612];
            ᐃΔ[628] = ᐃΔ[626];
            ᐃΔ[630] = ᐃΔ[629];
            ᐃΔ[636] = ᐃΔ[634];
            ᐃΔ[868] = ᐃΔ[200];
            ᐃΔ[867] = ᐃΔ[866];
            ᐃΔ[648] = ᐃΔ[646];
            ᐃΔ[651] = ᐃΔ[649];
            ᐃΔ[653] = ᐃΔ[652];
            ᐃΔ[661] = ᐃΔ[659];
            ᐃΔ[898] = ᐃΔ[196];
            ᐃΔ[663] = ᐃΔ[662];
            ᐃΔ[665] = ᐃΔ[664];
            ᐃΔ[675] = ᐃΔ[674];
            ᐃΔ[731] = ᐃΔ[145];
            ᐃΔ[757] = ᐃΔ[756];
            ᐃΔ[759] = ᐃΔ[176];
            ᐃΔ[761] = ᐃΔ[760];
            ᐃΔ[763] = ᐃΔ[177];
            ᐃΔ[765] = ᐃΔ[764];
            ᐃΔ[766] = ᐃΔ[175];
            ᐃΔ[769] = ᐃΔ[767];
            ᐃΔ[773] = ᐃΔ[771];
            ᐃΔ[778] = ᐃΔ[776];
            ᐃΔ[781] = ᐃΔ[779];
            ᐃΔ[787] = ᐃΔ[181];
            ᐃΔ[786] = ᐃΔ[180];
            ᐃΔ[790] = ᐃΔ[789];
            ᐃΔ[801] = ᐃΔ[800];
            ᐃΔ[810] = ᐃΔ[808];
            ᐃΔ[836] = ᐃΔ[834];
            ᐃΔ[847] = ᐃΔ[845];
            ᐃΔ[828] = ᐃΔ[826];
        })();
        ᐃΔ[540] = [];
        ᐃΔ[540][Hr.ΔᐃΔ] = [];
        ᐃΔ[540][Hr.Δⵠⵠ] = [];
        for (var b = 0; b < Hr.ᐃΔⲆⲆⲆⵠⵠ; b++) {
            ᐃΔ[540][Hr.ΔᐃΔ].push($a(yu(a, 4 + b, "#59B8CE")));
            ᐃΔ[540][Hr.Δⵠⵠ].push($a(yu(a, 4 + b, "#90DDD9")));
        }
        ᐃΔ[470] = [];
        ᐃΔ[470][Hr.ΔᐃΔ] = [];
        ᐃΔ[470][Hr.Δⵠⵠ] = [];
        for (b = 0; b < Hr.ᐃⵠᐃᐃᐃΔⵠ; b++) {
            ᐃΔ[470][Hr.ΔᐃΔ].push($a(yu(a, 4 + b, "#fff")));
            ᐃΔ[470][Hr.Δⵠⵠ].push($a(yu(a, 4 + b, "#fff")));
        }
        ᐃΔ[471] = [];
        ᐃΔ[471][Hr.ΔᐃΔ] = [];
        ᐃΔ[471][Hr.Δⵠⵠ] = [];
        for (b = 0; b < Hr.ᐃⵠᐃᐃᐃΔⵠ; b++) {
            ᐃΔ[471][Hr.ΔᐃΔ].push($a(yu(a, 6 + b, "#DDCD8A")));
            ᐃΔ[471][Hr.Δⵠⵠ].push($a(yu(a, 6 + b, "#155E57")));
        }
        ᐃΔ[942] = [];
        ᐃΔ[942][Hr.ΔᐃΔ] = [];
        ᐃΔ[942][Hr.Δⵠⵠ] = [];
        for (b = 0; b < Hr.ΔᐃⵠΔⵠⵠⲆ; b++) {
            ᐃΔ[942][Hr.ΔᐃΔ].push($a(yu(a, 4 + b, "#353326")));
            ᐃΔ[942][Hr.Δⵠⵠ].push($a(yu(a, 4 + b, "#1D2526")));
        }
        ᐃΔ[201] = [];
        ᐃΔ[201][Hr.ΔᐃΔ] = $a(kd(a * 1.5, 0, ["#ee71a9"]));
        ᐃΔ[201][Hr.Δⵠⵠ] = $a(kd(a * 1.5, 0, ["#ee71a9"]));
        ᐃΔ[872] = [ᐃΔ[201]];
        ᐃΔ[872][1] = [];
        ᐃΔ[872][2] = [];
        ᐃΔ[872][3] = [];
        ᐃΔ[872][4] = [];
        ᐃΔ[872][1][Hr.ΔᐃΔ] = $a(kd(a * 1.5, 0, ["#e2d63b"]));
        ᐃΔ[872][1][Hr.Δⵠⵠ] = $a(kd(a * 1.5, 0, ["#e2d63b"]));
        ᐃΔ[872][2][Hr.ΔᐃΔ] = $a(kd(a * 1.5, 0, ["#309cbd"]));
        ᐃΔ[872][2][Hr.Δⵠⵠ] = $a(kd(a * 1.5, 0, ["#309cbd"]));
        ᐃΔ[872][3][Hr.ΔᐃΔ] = $a(kd(a * 1.5, 0, ["#cd232d"]));
        ᐃΔ[872][3][Hr.Δⵠⵠ] = $a(kd(a * 1.5, 0, ["#cd232d"]));
        ᐃΔ[872][4][Hr.ΔᐃΔ] = $a(kd(a * 1.5, 0, ["#42b672"]));
        ᐃΔ[872][4][Hr.Δⵠⵠ] = $a(kd(a * 1.5, 0, ["#42b672"]));
        if (ⵠΔⲆⵠ.ΔⵠⲆᐃⲆᐃᐃ("cti", Hf.location.href)) {
            document.getElementById("version").innerHTML += "[CTI]";
        } else {
            $a = function (a) {
                a.loaded = 1;
                return a;
            };
        }
        ᐃΔ[797] = $a(function () {
            var a = document.createElement("canvas");
            var b = a.getContext("2d");
            a.width = 460;
            a.height = 220;
            b.fillStyle = "#3a2a0d";
            b.fillRect(0, 0, a.width, a.height);
            b.lineWidth = 4;
            b.beginPath();
            b.strokeStyle = "#513810";
            for (var c = 20; c < 220; c += 20) {
                b.moveTo(0, c);
                b.lineTo(460, c);
                b.closePath();
                b.stroke();
            }
            return a;
        }());
        ᐃΔ[108] = [];
        ᐃΔ[108][Hr.ΔᐃΔ] = [];
        ᐃΔ[108][Hr.Δⵠⵠ] = [];
        ᐃΔ[108][Hr.ΔᐃΔ].push($a(su(a * 1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
        ᐃΔ[108][Hr.ΔᐃΔ].push($a(su(a * 0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
        ᐃΔ[108][Hr.ΔᐃΔ].push($a(su(a * 0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
        ᐃΔ[108][Hr.Δⵠⵠ].push($a(su(a * 1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
        ᐃΔ[108][Hr.Δⵠⵠ].push($a(su(a * 0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
        ᐃΔ[108][Hr.Δⵠⵠ].push($a(su(a * 0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
        ᐃΔ[111] = [];
        ᐃΔ[111][Hr.ΔᐃΔ] = [];
        ᐃΔ[111][Hr.Δⵠⵠ] = [];
        ᐃΔ[111][Hr.ΔᐃΔ].push($a(tu(a * 1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ᐃΔ[111][Hr.ΔᐃΔ].push($a(tu(a * 1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ᐃΔ[111][Hr.ΔᐃΔ].push($a(tu(a * 1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ᐃΔ[111][Hr.Δⵠⵠ].push($a(tu(a * 1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
        ᐃΔ[111][Hr.Δⵠⵠ].push($a(tu(a * 1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
        ᐃΔ[111][Hr.Δⵠⵠ].push($a(tu(a * 1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
        ᐃΔ[112] = [];
        ᐃΔ[112][Hr.ΔᐃΔ] = [];
        ᐃΔ[112][Hr.Δⵠⵠ] = [];
        ᐃΔ[112][Hr.ΔᐃΔ].push($a(uu(a * 1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
        ᐃΔ[112][Hr.ΔᐃΔ].push($a(uu(a * 0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
        ᐃΔ[112][Hr.ΔᐃΔ].push($a(uu(a * 0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
        ᐃΔ[112][Hr.Δⵠⵠ].push($a(uu(a * 1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
        ᐃΔ[112][Hr.Δⵠⵠ].push($a(uu(a * 0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
        ᐃΔ[112][Hr.Δⵠⵠ].push($a(uu(a * 0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
        ᐃΔ[239] = [];
        ᐃΔ[239][Hr.ΔᐃΔ] = ᐃⲆ.ⲆⲆⵠᐃΔᐃⵠ;
        ᐃΔ[239][Hr.Δⵠⵠ] = ᐃⲆ.ΔΔᐃΔᐃⵠⲆ;
        ᐃΔ[286] = [];
        ᐃΔ[286][Hr.ΔᐃΔ] = $a(St(a * 0.6, ["#0d1b1c"]));
        ᐃΔ[286][Hr.Δⵠⵠ] = $a(St(a * 0.6, ["#030d14"]));
        ᐃΔ[793] = [];
        ᐃΔ[793][Hr.ΔᐃΔ] = $a(Pt(a * 0.6, ["#2a2938", "#242330"]));
        ᐃΔ[793][Hr.Δⵠⵠ] = $a(Pt(a * 0.6, ["#1b1e30", "#161921"]));
        ᐃΔ[820] = [];
        ᐃΔ[820][Hr.ΔᐃΔ] = $a(wd(a * 0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
        ᐃΔ[820][Hr.Δⵠⵠ] = $a(wd(a * 0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
        ᐃΔ[821] = [];
        ᐃΔ[821][Hr.ΔᐃΔ] = $a(dd(a * 0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
        ᐃΔ[821][Hr.Δⵠⵠ] = $a(dd(a * 0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
        ᐃΔ[822] = [];
        ᐃΔ[822][Hr.ΔᐃΔ] = $a(Nt(a * 0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
        ᐃΔ[822][Hr.Δⵠⵠ] = $a(Nt(a * 0.4, ["#030d14", "#11635e", "#02373e"]));
        ᐃΔ[823] = $a(cd(a * 0.6, ["#BB0000"]));
        ᐃΔ[824] = $a(cd(a * 0.6, ["#DBE71C"]));
        ᐃΔ[825] = $a(cd(a * 0.6, ["#00BB00"]));
        ᐃΔ[109] = [];
        ᐃΔ[109][Hr.ΔᐃΔ] = [];
        ᐃΔ[109][Hr.Δⵠⵠ] = [];
        ᐃΔ[109][Hr.ΔᐃΔ].push(Rt(a * 1.1, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], bk, 0));
        ᐃΔ[109][Hr.ΔᐃΔ].push(Rt(a * 1.1, ["#0e3022", "#0f9862", "#0b8750", "#26ab6e"], true, 0));
        ᐃΔ[109][Hr.ΔᐃΔ].push(Rt(a * 0.9, ["#0e3022", "#0e7d4c", "#258a4d", "#248c4d"], cb, 0));
        ᐃΔ[109][Hr.ΔᐃΔ].push(Rt(a * 0.9, ["#0e3022", "#096d41", "#1f7b43", "#1f7b43"], true, 0));
        ᐃΔ[109][Hr.ΔᐃΔ].push(Rt(a * 0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], false, 0));
        ᐃΔ[109][Hr.ΔᐃΔ].push(Rt(a * 0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], true, 0));
        ᐃΔ[109][Hr.Δⵠⵠ].push(Rt(a * 1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], yj, 0));
        ᐃΔ[109][Hr.Δⵠⵠ].push(Rt(a * 1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], true, 0));
        ᐃΔ[109][Hr.Δⵠⵠ].push(Rt(a * 0.9, ["#030d14", "#0b3534", "#144443", "#174240"], na, 0));
        ᐃΔ[109][Hr.Δⵠⵠ].push(Rt(a * 0.9, ["#030d14", "#0b3534", "#144443", "#174240"], true, 0));
        ᐃΔ[109][Hr.Δⵠⵠ].push(Rt(a * 0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], Gl, 0));
        ᐃΔ[109][Hr.Δⵠⵠ].push(Rt(a * 0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], true, 0));
        ᐃΔ[307] = [];
        ᐃΔ[307][Hr.ΔᐃΔ] = [];
        ᐃΔ[307][Hr.Δⵠⵠ] = [];
        ᐃΔ[307][Hr.ΔᐃΔ].push($a(Ut(Wt(a * 1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], Xb), ᐃΔ[109][Hr.ΔᐃΔ][0])));
        ᐃΔ[307][Hr.ΔᐃΔ].push($a(Ut(Wt(a * 1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], k), ᐃΔ[109][Hr.ΔᐃΔ][1])));
        ᐃΔ[307][Hr.Δⵠⵠ].push($a(Ut(Wt(a * 1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], false), ᐃΔ[109][Hr.Δⵠⵠ][0])));
        ᐃΔ[307][Hr.Δⵠⵠ].push($a(Ut(Wt(a * 1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], _r), ᐃΔ[109][Hr.Δⵠⵠ][1])));
        ᐃΔ[307][Hr.ΔᐃΔ].push($a(Ut(Wt(a * 0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], na), ᐃΔ[109][Hr.ΔᐃΔ][2])));
        ᐃΔ[307][Hr.ΔᐃΔ].push($a(Ut(Wt(a * 0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], Pj), ᐃΔ[109][Hr.ΔᐃΔ][2])));
        ᐃΔ[307][Hr.Δⵠⵠ].push($a(Ut(Wt(a * 0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], false), ᐃΔ[109][Hr.Δⵠⵠ][2])));
        ᐃΔ[307][Hr.Δⵠⵠ].push($a(Ut(Wt(a * 0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], true), ᐃΔ[109][Hr.Δⵠⵠ][3])));
        ᐃΔ[109][Hr.ΔᐃΔ][5] = $a(ᐃΔ[109][Hr.ΔᐃΔ][5]);
        ᐃΔ[109][Hr.ΔᐃΔ][4] = $a(ᐃΔ[109][Hr.ΔᐃΔ][4]);
        ᐃΔ[109][Hr.ΔᐃΔ][3] = $a(ᐃΔ[109][Hr.ΔᐃΔ][3]);
        ᐃΔ[109][Hr.ΔᐃΔ][2] = $a(ᐃΔ[109][Hr.ΔᐃΔ][2]);
        ᐃΔ[109][Hr.ΔᐃΔ][1] = $a(ᐃΔ[109][Hr.ΔᐃΔ][1]);
        ᐃΔ[109][Hr.ΔᐃΔ][0] = $a(ᐃΔ[109][Hr.ΔᐃΔ][0]);
        ᐃΔ[109][Hr.Δⵠⵠ][5] = $a(ᐃΔ[109][Hr.Δⵠⵠ][5]);
        ᐃΔ[109][Hr.Δⵠⵠ][4] = $a(ᐃΔ[109][Hr.Δⵠⵠ][4]);
        ᐃΔ[109][Hr.Δⵠⵠ][3] = $a(ᐃΔ[109][Hr.Δⵠⵠ][3]);
        ᐃΔ[109][Hr.Δⵠⵠ][2] = $a(ᐃΔ[109][Hr.Δⵠⵠ][2]);
        ᐃΔ[109][Hr.Δⵠⵠ][1] = $a(ᐃΔ[109][Hr.Δⵠⵠ][1]);
        ᐃΔ[109][Hr.Δⵠⵠ][0] = $a(ᐃΔ[109][Hr.Δⵠⵠ][0]);
        ᐃΔ[8] = [];
        ᐃΔ[8][Hr.ΔᐃΔ] = $a(sd(4, Vt(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
        ᐃΔ[8][Hr.Δⵠⵠ] = $a(sd(4, Vt(a * 0.75, kk, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
        ᐃΔ[1] = [];
        ᐃΔ[1][Hr.ΔᐃΔ] = $a(sd(4, Vt(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
        ᐃΔ[1][Hr.Δⵠⵠ] = $a(sd(4, Vt(a * 0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
        ᐃΔ[3] = [];
        ᐃΔ[3][Hr.ΔᐃΔ] = $a(sd(4, Vt(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
        ᐃΔ[3][Hr.Δⵠⵠ] = $a(sd(4, Vt(a * 0.75, true, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
        ᐃΔ[4] = [];
        ᐃΔ[4][Hr.ΔᐃΔ] = $a(sd(4, Vt(a * 0.75, Pj, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
        ᐃΔ[4][Hr.Δⵠⵠ] = $a(sd(4, Vt(a * 0.75, ma, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
        ᐃΔ[31] = [];
        ᐃΔ[31][Hr.ΔᐃΔ] = $a(sd(4, Vt(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
        ᐃΔ[31][Hr.Δⵠⵠ] = $a(sd(4, Vt(a * 0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
        ᐃΔ[9] = [];
        ᐃΔ[9][Hr.ΔᐃΔ] = $a(sd(3, Zt(a * 0.17, sg, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
        ᐃΔ[9][Hr.Δⵠⵠ] = $a(sd(3, Zt(a * 0.17, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
        ᐃΔ[199] = [];
        ᐃΔ[199][Hr.ΔᐃΔ] = $a(sd(3, ju(a * 0.32, true, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
        ᐃΔ[199][Hr.Δⵠⵠ] = $a(sd(3, ju(a * 0.42, true, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
        ᐃΔ[57] = [];
        ᐃΔ[57][Hr.ΔᐃΔ] = $a(sd(3, au(a * 0.4, As, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
        ᐃΔ[57][Hr.Δⵠⵠ] = $a(sd(3, au(a * 0.4, Re, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
        ᐃΔ[0] = [];
        ᐃΔ[0][Hr.ΔᐃΔ] = $a(sd(3, $t(a * 0.4, true, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
        ᐃΔ[0][Hr.Δⵠⵠ] = $a(sd(3, $t(a * 0.4, kl, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
        ᐃΔ[5] = [];
        ᐃΔ[5][Hr.ΔᐃΔ] = $a(sd(3, iu(a * 0.4, true, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
        ᐃΔ[5][Hr.Δⵠⵠ] = $a(sd(3, iu(a * 0.4, ek, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
        ᐃΔ[6] = [];
        ᐃΔ[6][Hr.ΔᐃΔ] = $a(sd(3, ku(a * 0.4, kk, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
        ᐃΔ[6][Hr.Δⵠⵠ] = $a(sd(3, ku(a * 0.4, true, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
        ᐃΔ[30] = [];
        ᐃΔ[30][Hr.ΔᐃΔ] = $a(sd(3, nu(a * 0.4, true, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
        ᐃΔ[30][Hr.Δⵠⵠ] = $a(sd(3, nu(a * 0.4, true, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
        ᐃΔ[285] = [];
        ᐃΔ[285][Hr.ΔᐃΔ] = [];
        ᐃΔ[285][Hr.Δⵠⵠ] = [];
        ᐃΔ[285][Hr.ΔᐃΔ].push($a(Au(a * 0.9, 0, ["#0d4f35"], 0)));
        ᐃΔ[285][Hr.ΔᐃΔ].push($a(Au(a * 0.9, 0, ["#0d4f35"], 1)));
        ᐃΔ[285][Hr.ΔᐃΔ].push($a(Au(a * 0.9, 0, ["#0d4f35"], 2)));
        ᐃΔ[285][Hr.Δⵠⵠ].push($a(Au(a * 0.9, 0, ["#053339"], 0)));
        ᐃΔ[285][Hr.Δⵠⵠ].push($a(Au(a * 0.9, 0, ["#053339"], 1)));
        ᐃΔ[285][Hr.Δⵠⵠ].push($a(Au(a * 0.9, 0, ["#053339"], 2)));
        ᐃΔ[285][Hr.ΔᐃΔ].push($a(zu(a * 0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
        ᐃΔ[285][Hr.ΔᐃΔ].push($a(zu(a * 0.8, ["#292002", "#ba930e", "#6d5704"])));
        ᐃΔ[285][Hr.Δⵠⵠ].push($a(zu(a * 0.9, ["#052919", "#0a4738", "#06321f"])));
        ᐃΔ[285][Hr.Δⵠⵠ].push($a(zu(a * 0.8, ["#052918", "#08491c", "#063417"])));
        ᐃΔ[183] = [];
        ᐃΔ[183][Hr.ΔᐃΔ] = $a(sd(Math.PI / 2, Kc(a * 0.25, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
        ᐃΔ[183][Hr.Δⵠⵠ] = $a(sd(Math.PI / 2, Kc(a * 0.25, true, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
        ᐃΔ[803] = [];
        ᐃΔ[803].push($a(Hc(a * 0.25, ["#44301b", "#57442a", "#523e26"], 0)));
        ᐃΔ[803].push($a(Hc(a * 0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
        ᐃΔ[803].push($a(Hc(a * 0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
        ᐃΔ[802] = [];
        ᐃΔ[802][Hr.ΔᐃΔ] = [];
        ᐃΔ[802][Hr.Δⵠⵠ] = [];
        ᐃΔ[802][Hr.ΔᐃΔ].push($a(sd(Math.PI / 2, nm(a * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
        ᐃΔ[802][Hr.Δⵠⵠ].push($a(sd(Math.PI / 2, nm(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
        ᐃΔ[802][Hr.ΔᐃΔ].push($a(sd(Math.PI / 2, nm(a * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
        ᐃΔ[802][Hr.Δⵠⵠ].push($a(sd(Math.PI / 2, nm(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
        ᐃΔ[802][Hr.ΔᐃΔ].push($a(sd(Math.PI / 2, nm(a * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
        ᐃΔ[802][Hr.Δⵠⵠ].push($a(sd(Math.PI / 2, nm(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
        ᐃΔ[802][Hr.ΔᐃΔ].push($a(sd(Math.PI / 2, nm(a * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
        ᐃΔ[802][Hr.Δⵠⵠ].push($a(sd(Math.PI / 2, nm(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
        ᐃΔ[110] = [];
        ᐃΔ[110][Hr.ΔᐃΔ] = [$a(vu(a * 1.2, true, ["#0e3022", "#0b8052", "#077b49"]))];
        ᐃΔ[110][Hr.Δⵠⵠ] = [$a(vu(a * 1.2, ma, ["#030d14", "#084442", "#0a4049"]))];
        ᐃΔ[623] = [];
        ᐃΔ[623][Hr.ΔᐃΔ] = $a(vu(a * 0.8, Mk, ["#0e3022", "#68622D", "#665329"]));
        ᐃΔ[623][Hr.Δⵠⵠ] = $a(vu(a * 0.8, true, ["#030d14", "#0F3A24", "#083326"]));
        ᐃΔ[189] = [];
        ᐃΔ[189][Hr.ΔᐃΔ] = $a(Rp(a * 0.5, true, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
        ᐃΔ[189][Hr.Δⵠⵠ] = $a(Rp(a * 0.5, kl, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
        ᐃΔ[192] = [];
        ᐃΔ[192][Hr.ΔᐃΔ] = $a(ld(a * 0.5, true, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
        ᐃΔ[192][Hr.Δⵠⵠ] = $a(ld(a * 0.5, As, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
        ᐃΔ[194] = [];
        ᐃΔ[194][Hr.ΔᐃΔ] = $a(fp(a * 0.5, true, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
        ᐃΔ[194][Hr.Δⵠⵠ] = $a(fp(a * 0.5, ek, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
        ᐃΔ[287] = [];
        ᐃΔ[287][Hr.ΔᐃΔ] = $a(vu(a * 0.8, true, ["#1b170c", "#0b8052", "#077b49"]));
        ᐃΔ[287][Hr.Δⵠⵠ] = $a(vu(a * 0.8, true, ["#030d14", "#084442", "#0a4049"]));
        ᐃΔ[813] = [];
        ᐃΔ[813][Hr.ΔᐃΔ] = $a(Rp(a * 0.5, Jg, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
        ᐃΔ[813][Hr.Δⵠⵠ] = $a(Rp(a * 0.5, true, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
        ᐃΔ[839] = [];
        ᐃΔ[839][Hr.ΔᐃΔ] = $a(ld(a * 0.5, k, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
        ᐃΔ[839][Hr.Δⵠⵠ] = $a(ld(a * 0.5, As, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
        ᐃΔ[869] = [];
        ᐃΔ[869][Hr.ΔᐃΔ] = $a(fp(a * 0.5, Ro, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
        ᐃΔ[869][Hr.Δⵠⵠ] = $a(fp(a * 0.5, true, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
        ᐃΔ[854] = [];
        ᐃΔ[854][Hr.ΔᐃΔ] = $a(pp(a * 0.45, Un, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
        ᐃΔ[854][Hr.Δⵠⵠ] = $a(pp(a * 0.45, true, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
        ᐃΔ[859] = $a(pp(a * 0.65, true, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
        ᐃΔ[294] = [];
        ᐃΔ[294][Hr.ΔᐃΔ] = $a(ec(a * 1.4, 0, ["#ac222a", "#e6636a"]));
        ᐃΔ[294][Hr.Δⵠⵠ] = $a(ec(a * 1.4, 0, ["#46195e", "#744188"]));
        ᐃΔ[288] = [];
        ᐃΔ[288][Hr.ΔᐃΔ] = $a(Et(a * 0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
        ᐃΔ[288][Hr.Δⵠⵠ] = $a(Et(a * 0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
        ᐃΔ[118] = [];
        ᐃΔ[118][Hr.ΔᐃΔ] = $a(Dt(a * 0.9, 0, ["#4d2d14", "#432516"]));
        ᐃΔ[118][Hr.Δⵠⵠ] = $a(Dt(a * 0.9, 0, ["#282404", "#0a0a01"]));
        ᐃΔ[113] = [];
        ᐃΔ[113][Hr.ΔᐃΔ] = $a(It(a * 0.9, 0, ["#4d2d14", "#432516"]));
        ᐃΔ[113][Hr.Δⵠⵠ] = $a(It(a * 0.9, 0, ["#282404", "#0a0a01"]));
        ᐃΔ[289] = [];
        ᐃΔ[289][Hr.ΔᐃΔ] = $a(Lt(a * 0.9, 0, ["#efd435"]));
        ᐃΔ[289][Hr.Δⵠⵠ] = $a(Lt(a * 0.9, 0, ["#fffabb"]));
        ᐃΔ[282] = [];
        ᐃΔ[282][Hr.ΔᐃΔ] = $a(Ht(a * 0.9, 0, ["#efd435"]));
        ᐃΔ[282][Hr.Δⵠⵠ] = $a(Ht(a * 0.9, 0, ["#fffabb"]));
        ᐃΔ[816] = [];
        ᐃΔ[816][Hr.ΔᐃΔ] = $a(Lt(a * 0.9, 0, ["#efd435"]));
        ᐃΔ[816][Hr.Δⵠⵠ] = $a(Lt(a * 0.9, 0, ["rgba(255, 84, 0, 1)"]));
        ᐃΔ[817] = [];
        ᐃΔ[817][Hr.ΔᐃΔ] = $a(Ht(a * 0.9, 0, ["#efd435"]));
        ᐃΔ[817][Hr.Δⵠⵠ] = $a(Ht(a * 0.9, 0, ["#ff5704"]));
        ᐃΔ[324] = $a(Rd(a, "#ffffff"));
        ᐃΔ[301] = $a(Rd(a * 1.5, "#ffffff"));
        ᐃΔ[306] = $a(qu(a, "Your score:", a * 15, "#FFF"));
        ᐃΔ[655] = $a(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 243;
            c.height = a * 172;
            id(d, a * 119.5, a * 140.125, a * 19);
            $b(d, undefined, b[1], a * 5);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 36.5, a * 20.125);
            d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
            d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
            d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
            d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
            d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
            d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
            d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
            d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
            d.closePath();
            $b(d, b[0], b[1], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 15.5, a * 138.625);
            d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
            d.closePath();
            $b(d, Ol, b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 13.5, a * 131.625);
            d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
            d.closePath();
            $b(d, Mq, b[3], a * 10);
            id(d, a * 119.5, a * 140.125, a * 14.866068747318506);
            $b(d, b[4], b[5], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 106.5, a * 146.625);
            d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
            d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
            d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
            d.closePath();
            $b(d, b[6], b[7], a * 2);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 105.5, a * 146.625);
            d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
            $b(d, undefined, b[8], a * 5);
            d.save();
            d.translate(a * 75.5, a * 80.125);
            Zb(d, a * -39, a * -40, a * 78, a * 78, a * 10);
            d.restore();
            $b(d, b[9]);
            d.save();
            d.translate(a * 167, a * 80.125);
            Zb(d, a * -38.5, a * -39, a * 78, a * 78, a * 10);
            d.restore();
            $b(d, b[9]);
            return c;
        }(a * 0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
        ᐃΔ[656] = ᐃⲆ.ΔⵠΔᐃᐃᐃᐃ;
        ᐃΔ[135] = [];
        ᐃΔ[135][Hr.ΔᐃΔ] = $a(Xd(a * 1.5, kk, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        ᐃΔ[135][Hr.Δⵠⵠ] = $a(Xd(a * 1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
        ᐃΔ[641] = [];
        ᐃΔ[641][Hr.ΔᐃΔ] = $a(Yd(a * 2, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        ᐃΔ[641][Hr.Δⵠⵠ] = $a(Yd(a * 2, ma, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
        ᐃΔ[642] = [];
        ᐃΔ[642][Hr.ΔᐃΔ] = $a(At(a * 1.5, Jg, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        ᐃΔ[642][Hr.Δⵠⵠ] = $a(At(a * 1.5, Un, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
        ᐃΔ[134] = [];
        ᐃΔ[134][Hr.ΔᐃΔ] = $a(Vd(a * 2.2, 0, ["#A89F67", "#9E8456"]));
        ᐃΔ[134][Hr.Δⵠⵠ] = $a(Vd(a * 2.2, 0, ["#0B4049", "#08383D"]));
        ᐃΔ[638] = [];
        ᐃΔ[638][Hr.ΔᐃΔ] = $a(Vd(a * 2.2, 0, ["#68622D", "#665329"]));
        ᐃΔ[638][Hr.Δⵠⵠ] = $a(Vd(a * 2.2, 0, ["#0F3A24", "#083326"]));
        ᐃΔ[321] = [];
        ᐃΔ[321][Hr.ΔᐃΔ] = $a(ru(a * 0.8, 0, ["#A89F67", "#9E8456"]));
        ᐃΔ[321][Hr.Δⵠⵠ] = $a(ru(a * 0.8, 0, ["#15514F", "#0F3F3D"]));
        ᐃΔ[811] = [];
        ᐃΔ[811][Hr.ΔᐃΔ] = $a(ru(a * 0.8, 0, ["#c67933", "#b17238"]));
        ᐃΔ[811][Hr.Δⵠⵠ] = $a(ru(a * 0.8, 0, ["#043c37", "#032b23"]));
        ᐃΔ[984] = [];
        ᐃΔ[984][Hr.ΔᐃΔ] = $a(ru(a * 0.8, 0, ["#3a8214", "#4a9c1e"]));
        ᐃΔ[984][Hr.Δⵠⵠ] = $a(ru(a * 0.8, 0, ["#032d29", "#044640"]));
        ᐃΔ[837] = [];
        ᐃΔ[837][Hr.ΔᐃΔ] = $a(ru(a * 0.8, 0, ["#e8e8e8", "#bbbbbb"]));
        ᐃΔ[837][Hr.Δⵠⵠ] = $a(ru(a * 0.8, 0, ["#1c6161", "#07413f"]));
        ᐃΔ[848] = [];
        ᐃΔ[848][Hr.ΔᐃΔ] = $a(ru(a * 0.8, 0, ["#328a56", "#449573"]));
        ᐃΔ[848][Hr.Δⵠⵠ] = $a(ru(a * 0.8, 0, ["#043c37", "#032b23"]));
        ᐃΔ[952] = [];
        ᐃΔ[952][Hr.ΔᐃΔ] = $a(ru(a * 0.8, 0, ["#c98e2f", "#a36b11"]));
        ᐃΔ[952][Hr.Δⵠⵠ] = $a(ru(a * 0.8, 0, ["#043c37", "#032b23"]));
        ᐃΔ[962] = [];
        ᐃΔ[962][Hr.ΔᐃΔ] = $a(ru(a * 0.8, 0, ["#b22419", "#99110e"]));
        ᐃΔ[962][Hr.Δⵠⵠ] = $a(ru(a * 0.8, 0, ["#04323c", "#03222b"]));
        ᐃΔ[969] = [];
        ᐃΔ[969][Hr.ΔᐃΔ] = $a(ru(a * 0.8, 0, ["#13a56d", "#098a58"]));
        ᐃΔ[969][Hr.Δⵠⵠ] = $a(ru(a * 0.8, 0, ["#043c37", "#032b23"]));
        ᐃΔ[657] = Ct(1, [{
            f: Vd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#A89F67", "#9E8456"]
        }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        ᐃΔ[723] = Ct(1, [{
            f: It,
            x: 0,
            y: 0,
            a: 1,
            r: -Math.PI / 5,
            c: ["#4d2d14", "#432516"]
        }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        ᐃΔ[724] = Ct(1, [{
            f: Ym,
            x: 0,
            y: -5,
            a: 1,
            r: 0,
            c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
        }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        ᐃΔ[334] = Ct(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃΔ[115] = [];
        ᐃΔ[115][Hr.ΔᐃΔ] = $a(xd(a * 0.9, 0, ["#7d613e", "#9e7e5a"]));
        ᐃΔ[115][Hr.Δⵠⵠ] = $a(xd(a * 0.9, 0, ["#084442", "#125e5a"]));
        ᐃΔ[132] = [];
        ᐃΔ[132][Hr.ΔᐃΔ] = $a(xd(a * 0.9, 0, ["#9E8456", "#A89F67"]));
        ᐃΔ[132][Hr.Δⵠⵠ] = $a(xd(a * 0.9, 0, ["#1b6f6a", "#0d4e4c"]));
        ᐃΔ[668] = [];
        ᐃΔ[668][Hr.ΔᐃΔ] = $a(xd(a * 0.9, 0, ["#665329", "#68622D"]));
        ᐃΔ[668][Hr.Δⵠⵠ] = $a(xd(a * 0.9, 0, ["#083326", "#0F3A24"]));
        ᐃΔ[188] = [];
        ᐃΔ[188][Hr.ΔᐃΔ] = $a(xd(a * 0.9, 0, ["#c67933", "#ec952d"]));
        ᐃΔ[188][Hr.Δⵠⵠ] = $a(xd(a * 0.9, 0, ["#0e6553", "#094437"]));
        ᐃΔ[210] = [];
        ᐃΔ[210][Hr.ΔᐃΔ] = $a(xd(a * 0.9, 0, ["#375809", "#4b770e"]));
        ᐃΔ[210][Hr.Δⵠⵠ] = $a(xd(a * 0.9, 0, ["#09542d", "#0d5d2f"]));
        ᐃΔ[985] = [];
        ᐃΔ[985][Hr.ΔᐃΔ] = $a(xd(a * 0.9, 0, ["#585809", "#72770e"]));
        ᐃΔ[985][Hr.Δⵠⵠ] = $a(xd(a * 0.9, 0, ["#295209", "#305d0d"]));
        ᐃΔ[191] = [];
        ᐃΔ[191][Hr.ΔᐃΔ] = $a(xd(a * 0.9, 0, ["#b9b094", "#e2d2c0"]));
        ᐃΔ[191][Hr.Δⵠⵠ] = $a(xd(a * 0.9, 0, ["#126366", "#0d484b"]));
        ᐃΔ[193] = [];
        ᐃΔ[193][Hr.ΔᐃΔ] = $a(xd(a * 0.9, 0, ["#3f8662", "#30915d"]));
        ᐃΔ[193][Hr.Δⵠⵠ] = $a(xd(a * 0.9, 0, ["#0e6553", "#094437"]));
        ᐃΔ[812] = [];
        ᐃΔ[812][Hr.ΔᐃΔ] = $a(xd(a * 0.9, 0, ["#c79153", "#dfa868"]));
        ᐃΔ[812][Hr.Δⵠⵠ] = $a(xd(a * 0.9, 0, ["#073927", "#075040"]));
        ᐃΔ[838] = [];
        ᐃΔ[838][Hr.ΔᐃΔ] = $a(xd(a * 0.9, 0, ["#768b5b", "#819984"]));
        ᐃΔ[838][Hr.Δⵠⵠ] = $a(xd(a * 0.9, 0, ["#0c4540", "#0e5153"]));
        ᐃΔ[849] = [];
        ᐃΔ[849][Hr.ΔᐃΔ] = $a(xd(a * 0.9, 0, ["#567465", "#627c6e"]));
        ᐃΔ[849][Hr.Δⵠⵠ] = $a(xd(a * 0.9, 0, ["#073927", "#075040"]));
        ᐃΔ[204] = [];
        ᐃΔ[204][Hr.ΔᐃΔ] = $a(xd(a * 0.9, 0, ["#996b3a", "#bf956b"]));
        ᐃΔ[204][Hr.Δⵠⵠ] = $a(xd(a * 0.9, 0, ["#0e6553", "#094437"]));
        ᐃΔ[953] = [];
        ᐃΔ[953][Hr.ΔᐃΔ] = $a(xd(a * 0.9, 0, ["#7a634a", "#a68f77"]));
        ᐃΔ[953][Hr.Δⵠⵠ] = $a(xd(a * 0.9, 0, ["#1e4d43", "#113c32"]));
        ᐃΔ[206] = [];
        ᐃΔ[206][Hr.ΔᐃΔ] = $a(xd(a * 0.9, 0, ["#99403c", "#bc796c"]));
        ᐃΔ[206][Hr.Δⵠⵠ] = $a(xd(a * 0.9, 0, ["#1e434d", "#11303c"]));
        ᐃΔ[963] = [];
        ᐃΔ[963][Hr.ΔᐃΔ] = $a(xd(a * 0.9, 0, ["#88504e", "#b3857c"]));
        ᐃΔ[963][Hr.Δⵠⵠ] = $a(xd(a * 0.9, 0, ["#253b41", "#162930"]));
        ᐃΔ[208] = [];
        ᐃΔ[208][Hr.ΔᐃΔ] = $a(xd(a * 0.9, 0, ["#0f8870", "#23af93"]));
        ᐃΔ[208][Hr.Δⵠⵠ] = $a(xd(a * 0.9, 0, ["#032829", "#083233"]));
        ᐃΔ[970] = [];
        ᐃΔ[970][Hr.ΔᐃΔ] = $a(xd(a * 0.9, 0, ["#618a20", "#84a74e"]));
        ᐃΔ[970][Hr.Δⵠⵠ] = $a(xd(a * 0.9, 0, ["#1f4632", "#335d47"]));
        ᐃΔ[114] = [];
        ᐃΔ[114][Hr.ΔᐃΔ] = $a(Fd(a * 1.2, kk, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
        ᐃΔ[114][Hr.Δⵠⵠ] = $a(Fd(a * 1.2, Uh, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
        ᐃΔ[162] = [];
        ᐃΔ[162][Hr.ΔᐃΔ] = $a(nc(a * 1, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
        ᐃΔ[162][Hr.Δⵠⵠ] = $a(nc(a * 1, Yg, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
        ᐃΔ[165] = [];
        ᐃΔ[165][Hr.ΔᐃΔ] = $a(fc(a * 1, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        ᐃΔ[165][Hr.Δⵠⵠ] = $a(fc(a * 1, xq, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
        ᐃΔ[122] = [];
        ᐃΔ[122][Hr.ΔᐃΔ] = $a(pc(a * 1, Yg, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        ᐃΔ[122][Hr.Δⵠⵠ] = $a(pc(a * 1, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
        ᐃΔ[163] = [];
        ᐃΔ[163][Hr.ΔᐃΔ] = $a(pc(a * 1, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
        ᐃΔ[163][Hr.Δⵠⵠ] = $a(pc(a * 1, sg, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
        ᐃΔ[164] = [];
        ᐃΔ[164][Hr.ΔᐃΔ] = $a(mc(a * 1, Pj, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
        ᐃΔ[164][Hr.Δⵠⵠ] = $a(mc(a * 1, kk, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
        ᐃΔ[160] = [];
        ᐃΔ[160][Hr.ΔᐃΔ] = $a(Wc(a * 0.8, Mk, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
        ᐃΔ[160][Hr.Δⵠⵠ] = $a(Wc(a * 0.8, sg, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
        ᐃΔ[169] = [];
        ᐃΔ[169][Hr.ΔᐃΔ] = $a(Yc(a * 0.8, true, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
        ᐃΔ[169][Hr.Δⵠⵠ] = $a(Yc(a * 0.8, true, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
        ᐃΔ[170] = [];
        ᐃΔ[170][Hr.ΔᐃΔ] = $a(Uc(a * 0.8, true, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        ᐃΔ[170][Hr.Δⵠⵠ] = $a(Uc(a * 0.8, Un, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
        ᐃΔ[168] = [];
        ᐃΔ[168][Hr.ΔᐃΔ] = $a(Zc(a * 0.8, kl, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
        ᐃΔ[168][Hr.Δⵠⵠ] = $a(Zc(a * 0.8, xq, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
        ᐃΔ[123] = [];
        ᐃΔ[123][Hr.ΔᐃΔ] = $a(Zc(a * 0.8, Ro, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        ᐃΔ[123][Hr.Δⵠⵠ] = $a(Zc(a * 0.8, true, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
        ᐃΔ[166] = [];
        ᐃΔ[166][Hr.ΔᐃΔ] = $a(yc(a * 1.5, true, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
        ᐃΔ[166][Hr.Δⵠⵠ] = $a(yc(a * 1.5, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
        ᐃΔ[336] = [];
        ᐃΔ[336][Hr.ΔᐃΔ] = $a(yc(a * 1, Dl, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ᐃΔ[336][Hr.Δⵠⵠ] = $a(yc(a * 1, cb, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
        ᐃΔ[171] = [];
        ᐃΔ[171][Hr.ΔᐃΔ] = $a(Tc(a * 1.5, O, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
        ᐃΔ[171][Hr.Δⵠⵠ] = $a(Tc(a * 1.5, kl, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
        ᐃΔ[373] = [];
        ᐃΔ[373][Hr.ΔᐃΔ] = $a(Tc(a * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ᐃΔ[373][Hr.Δⵠⵠ] = $a(Tc(a * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        ᐃΔ[124] = [];
        ᐃΔ[124][Hr.ΔᐃΔ] = $a(Tc(a * 1.5, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        ᐃΔ[124][Hr.Δⵠⵠ] = $a(Tc(a * 1.5, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
        ᐃΔ[500] = [];
        ᐃΔ[500][Hr.ΔᐃΔ] = $a(Tc(a * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ᐃΔ[500][Hr.Δⵠⵠ] = $a(Tc(a * 1, Xs, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        ᐃΔ[172] = [];
        ᐃΔ[172][Hr.ΔᐃΔ] = $a(Fc(a * 1.5, Un, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
        ᐃΔ[172][Hr.Δⵠⵠ] = $a(Fc(a * 1.5, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
        ᐃΔ[376] = [];
        ᐃΔ[376][Hr.ΔᐃΔ] = $a(Fc(a * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ᐃΔ[376][Hr.Δⵠⵠ] = $a(Fc(a * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        ᐃΔ[173] = [];
        ᐃΔ[173][Hr.ΔᐃΔ] = $a(jc(a * 1.5, Ro, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        ᐃΔ[173][Hr.Δⵠⵠ] = $a(jc(a * 1.5, xq, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
        ᐃΔ[379] = [];
        ᐃΔ[379][Hr.ΔᐃΔ] = $a(jc(a * 1, bl, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ᐃΔ[379][Hr.Δⵠⵠ] = $a(jc(a * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        ᐃΔ[167] = [];
        ᐃΔ[167][Hr.ΔᐃΔ] = $a(vc(a * 0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
        ᐃΔ[167][Hr.Δⵠⵠ] = $a(vc(a * 0.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
        ᐃΔ[691] = [];
        ᐃΔ[691][Hr.ΔᐃΔ] = $a(Pp(a * 0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
        ᐃΔ[691][Hr.Δⵠⵠ] = $a(Pp(a * 0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
        ᐃΔ[264] = [];
        ᐃΔ[264][Hr.ΔᐃΔ] = $a(_d(a * 0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
        ᐃΔ[264][Hr.Δⵠⵠ] = $a(_d(a * 0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
        ᐃΔ[260] = [];
        ᐃΔ[260][Hr.ΔᐃΔ] = $a(sd(Math.PI, Nd(a * 0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
        ᐃΔ[260][Hr.Δⵠⵠ] = $a(sd(Math.PI, Nd(a * 0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
        ᐃΔ[266] = $a(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 450;
            c.height = a * 470;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 226.5, a * 91.546875);
            d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
            d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
            d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
            d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
            d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
            d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
            d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
            d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
            d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
            d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
            d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
            d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
            d.closePath();
            $b(d, Vq, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 224.5, a * 129.546875);
            d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
            d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
            d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
            d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
            d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
            d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
            d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
            d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
            d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
            d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
            d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
            d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
            d.closePath();
            $b(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 224.5, a * 160.546875);
            d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
            d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
            d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
            d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
            d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
            d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
            d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
            d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
            d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
            d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
            d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
            d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
            d.closePath();
            $b(d, Qr, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 205.5, a * 194.546875);
            d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
            d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
            d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
            d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
            d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
            d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
            d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
            d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
            d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
            d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
            d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
            d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
            d.closePath();
            $b(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 149.5, a * 93.546875);
            d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
            d.closePath();
            $b(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 224.5, a * 66.546875);
            d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
            d.closePath();
            $b(d, sl, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 302.5, a * 88.546875);
            d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
            d.closePath();
            $b(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 361.5, a * 147.546875);
            d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
            d.closePath();
            $b(d, Lk, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 379.5, a * 225.546875);
            d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
            d.closePath();
            $b(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 90.5, a * 147.546875);
            d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
            d.closePath();
            $b(d, Ol, b[0], 4);
            return c;
        }(a * 0.6, ["#FFFFFF"]));
        ᐃΔ[299] = [];
        ᐃΔ[299][Hr.ΔᐃΔ] = $a(Ld(a * 1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
        ᐃΔ[299][Hr.Δⵠⵠ] = $a(Ld(a * 1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
        ᐃΔ[10] = [];
        ᐃΔ[10][Hr.ΔᐃΔ] = $a(Oc(a * 0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
        ᐃΔ[10][Hr.Δⵠⵠ] = $a(Oc(a * 0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
        ᐃΔ[11] = [];
        ᐃΔ[11][Hr.ΔᐃΔ] = $a(kc(a * 0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
        ᐃΔ[11][Hr.Δⵠⵠ] = $a(kc(a * 0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
        ᐃΔ[40] = [];
        ᐃΔ[40][Hr.ΔᐃΔ] = $a(Nc(a * 0.63, ek, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
        ᐃΔ[40][Hr.Δⵠⵠ] = $a(Nc(a * 0.63, k, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
        ᐃΔ[41] = [];
        ᐃΔ[41][Hr.ΔᐃΔ] = $a(Kt(a * 0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
        ᐃΔ[41][Hr.Δⵠⵠ] = $a(Kt(a * 0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
        ᐃΔ[42] = [];
        ᐃΔ[42][Hr.ΔᐃΔ] = $a(Mt(a * 0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
        ᐃΔ[42][Hr.Δⵠⵠ] = $a(Mt(a * 0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
        ᐃΔ[716] = [];
        ᐃΔ[716][Hr.ΔᐃΔ] = $a(Nm(a * 0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
        ᐃΔ[716][Hr.Δⵠⵠ] = $a(Nm(a * 0.42, kk, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
        ᐃΔ[720] = [];
        ᐃΔ[720][Hr.ΔᐃΔ] = $a($m(a * 0.9, ["#e4c027"]));
        ᐃΔ[720][Hr.Δⵠⵠ] = $a($m(a * 0.9, ["#D8E57F"]));
        ᐃΔ[144] = [];
        ᐃΔ[144][Hr.ΔᐃΔ] = $a(Wm(a * 0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
        ᐃΔ[144][Hr.Δⵠⵠ] = $a(Wm(a * 0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
        ᐃΔ[722] = $a(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 149;
            c.height = a * 356;
            d.save();
            d.translate(a * 74.5, a * 177.5);
            Zb(d, a * -57.5, a * -161.5, a * 100, a * 323, a * 10);
            d.restore();
            $b(d, b[0], b[1], a * 4);
            d.save();
            d.translate(a * 74.5, a * 177.5);
            Zb(d, a * -57.5, a * 50.5, a * 100, a * 105, a * 10);
            d.restore();
            $b(d, b[6], b[1], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 125);
            d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
            d.closePath();
            $b(d, b[2], b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 120);
            d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
            d.closePath();
            $b(d, b[3], b[3], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 228);
            d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
            d.closePath();
            $b(d, b[2], b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 224);
            d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
            d.closePath();
            $b(d, b[3], b[3], a * 10);
            d.save();
            d.translate(a * 72, a * 68.5);
            Zb(d, a * -41.5, a * -36.5, a * 73, a * 73, a * 13);
            d.restore();
            $b(d, b[4]);
            d.save();
            d.translate(a * 72, a * 175.5);
            Zb(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
            d.restore();
            $b(d, b[4]);
            d.save();
            d.translate(a * 72, a * 279.5);
            Zb(d, a * -41.5, a * -40.5, a * 73, a * 73, a * 13);
            d.restore();
            $b(d, b[4]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 338);
            d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
            d.closePath();
            $b(d, b[2], b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 333);
            d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
            d.closePath();
            $b(d, b[3], b[3], a * 10);
            return c;
        }(a * 1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
        ᐃΔ[407] = [];
        ᐃΔ[407][Hr.ΔᐃΔ] = $a(Pc(a * 0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
        ᐃΔ[407][Hr.Δⵠⵠ] = $a(Pc(a * 0.5, O, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
        ᐃΔ[119] = [];
        ᐃΔ[119][Hr.ΔᐃΔ] = $a(gc(a * 0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
        ᐃΔ[119][Hr.Δⵠⵠ] = $a(gc(a * 0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
        ᐃΔ[411] = $a(function (a, b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            d.width = a * 118;
            d.height = a * 129;
            e.save();
            e.translate(a * 90, a * 90);
            Zb(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
            e.restore();
            $b(e, c[0], c[1], 4);
            return d;
        }(a * 0.8, 0, ["#5f6061", "#939393"]));
        ᐃΔ[412] = Ct(1, [{
            f: It,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 2.5,
            c: ["#4d2d14", "#432516"]
        }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
        ᐃΔ[198] = [];
        ᐃΔ[198][Hr.ΔᐃΔ] = $a(dc(a * 1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
        ᐃΔ[198][Hr.Δⵠⵠ] = $a(dc(a * 1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
        ᐃΔ[913] = [];
        ᐃΔ[913][Hr.ΔᐃΔ] = $a(cc(a * 1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
        ᐃΔ[913][Hr.Δⵠⵠ] = $a(cc(a * 1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
        ᐃΔ[18] = [];
        ᐃΔ[18][Hr.ΔᐃΔ] = $a(sd(3, Ic(a * 0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
        ᐃΔ[18][Hr.Δⵠⵠ] = $a(sd(3, Ic(a * 0.7, eh, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
        ᐃΔ[12] = [];
        ᐃΔ[12][Hr.ΔᐃΔ] = $a(sd(3, wc(a * 0.7, eh, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
        ᐃΔ[12][Hr.Δⵠⵠ] = $a(sd(3, wc(a * 0.7, ek, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
        ᐃΔ[13] = [];
        ᐃΔ[13][Hr.ΔᐃΔ] = $a(sd(3, Cc(a * 0.65, kk, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
        ᐃΔ[13][Hr.Δⵠⵠ] = $a(sd(3, Cc(a * 0.65, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
        ᐃΔ[14] = [];
        ᐃΔ[14][Hr.ΔᐃΔ] = $a(sd(3, Dc(a * 0.67, true, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
        ᐃΔ[14][Hr.Δⵠⵠ] = $a(sd(3, Dc(a * 0.67, xq, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
        ᐃΔ[15] = [];
        ᐃΔ[15][Hr.ΔᐃΔ] = $a(sd(3, lc(a * 0.67, true, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
        ᐃΔ[15][Hr.Δⵠⵠ] = $a(sd(3, lc(a * 0.67, kk, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
        ᐃΔ[33] = [];
        ᐃΔ[33][Hr.ΔᐃΔ] = $a(sd(3, Qc(a * 0.67, Mk, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
        ᐃΔ[33][Hr.Δⵠⵠ] = $a(sd(3, Qc(a * 0.67, As, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
        ᐃΔ[16] = [];
        ᐃΔ[16][Hr.ΔᐃΔ] = $a(sd(3, uc(a * 1, Re, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
        ᐃΔ[16][Hr.Δⵠⵠ] = $a(sd(3, uc(a * 1, ek, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
        ᐃΔ[35] = [];
        ᐃΔ[35][Hr.ΔᐃΔ] = $a(sd(3, Vc(a * 1, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
        ᐃΔ[35][Hr.Δⵠⵠ] = $a(sd(3, Vc(a * 1, true, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
        ᐃΔ[55] = [];
        ᐃΔ[55][Hr.ΔᐃΔ] = $a(sd(3, zp(a * 0.5, eh, ["#0d1b1c", "#939393", "#5f6061"])));
        ᐃΔ[55][Hr.Δⵠⵠ] = $a(sd(3, zp(a * 0.5, xq, ["#030d14", "#485e66", "#1f343f"])));
        ᐃΔ[45] = [];
        ᐃΔ[45][Hr.ΔᐃΔ] = $a(sd(3, Fm(a * 1, eh, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
        ᐃΔ[45][Hr.Δⵠⵠ] = $a(sd(3, Fm(a * 1, true, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
        ᐃΔ[36] = [];
        ᐃΔ[36][Hr.ΔᐃΔ] = $a(sd(3, Vc(a * 1, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
        ᐃΔ[36][Hr.Δⵠⵠ] = $a(sd(3, Vc(a * 1, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
        ᐃΔ[37] = [];
        ᐃΔ[37][Hr.ΔᐃΔ] = $a(sd(3, Vc(a * 1, Ro, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
        ᐃΔ[37][Hr.Δⵠⵠ] = $a(sd(3, Vc(a * 1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
        ᐃΔ[38] = [];
        ᐃΔ[38][Hr.ΔᐃΔ] = $a(sd(3, Vc(a * 1, _r, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
        ᐃΔ[38][Hr.Δⵠⵠ] = $a(sd(3, Vc(a * 1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
        ᐃΔ[148] = [];
        ᐃΔ[148][Hr.ΔᐃΔ] = $a(Hm(a * 0.55, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
        ᐃΔ[148][Hr.Δⵠⵠ] = $a(Hm(a * 0.55, 0, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
        ᐃΔ[536] = [];
        ᐃΔ[536].push($a(Hm(a * 0.8, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
        ᐃΔ[536].push($a(Hm(a * 0.8, 0, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
        ᐃΔ[536].push($a(Hm(a * 0.8, 0, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
        ᐃΔ[538] = [];
        ᐃΔ[538].push(ᐃΔ[536][0]);
        ᐃΔ[538].push(ᐃΔ[536][0]);
        ᐃΔ[538].push(ᐃΔ[536][0]);
        ᐃΔ[158] = [];
        ᐃΔ[158][Hr.ΔᐃΔ] = $a(Qm(a * 0.06, 0, ["#141414", "#c4a23a", "#816511"]));
        ᐃΔ[158][Hr.Δⵠⵠ] = $a(Qm(a * 0.06, 0, ["#030d14", "#2b6664", "#133d3c"]));
        ᐃΔ[535] = [];
        ᐃΔ[535].push($a(Qm(a * 0.08, 0, ["#141414", "#c4a23a", "#816511"])));
        ᐃΔ[535].push($a(Qm(a * 0.08, 0, ["#141414", "#e2bd4e", "#a38018"])));
        ᐃΔ[535].push($a(Qm(a * 0.08, 0, ["#141414", "#b0902e", "#634d09"])));
        ᐃΔ[149] = Ct(1.5, [{
            f: Xm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#141414", "#178a99", "#0a6372", "#03282e"]
        }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
        ᐃΔ[526] = [];
        ᐃΔ[526][Hr.ΔᐃΔ] = $a(Sm(a * 0.8, 0, ["#347f93", "#54a4ba"]));
        ᐃΔ[526][Hr.Δⵠⵠ] = $a(Sm(a * 0.8, 0, ["#98ede3", "#94f2e7"]));
        ᐃΔ[527] = [];
        ᐃΔ[527][Hr.ΔᐃΔ] = $a(Km(a * 0.8, 0, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
        ᐃΔ[527][Hr.Δⵠⵠ] = $a(Km(a * 0.8, 0, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
        ᐃΔ[528] = [];
        ᐃΔ[528][Hr.ΔᐃΔ] = $a(qm(a * 0.8, 0, ["#a9e4ed", "#86d4e0"]));
        ᐃΔ[528][Hr.Δⵠⵠ] = $a(qm(a * 0.8, 0, ["#83ddd4", "#485e66"]));
        ᐃΔ[151] = [];
        ᐃΔ[151][Hr.ΔᐃΔ] = $a(Om(a * 0.8, kk, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
        ᐃΔ[151][Hr.Δⵠⵠ] = $a(Om(a * 0.8, true, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
        ᐃΔ[1192] = [];
        ᐃΔ[1192][Hr.ΔᐃΔ] = ᐃⲆ.ⵠΔⵠΔⲆⵠᐃ;
        ᐃΔ[1192][Hr.Δⵠⵠ] = ᐃⲆ.ΔⲆᐃⲆⲆΔᐃ;
        ᐃΔ[1193] = [];
        ᐃΔ[1193][Hr.ΔᐃΔ] = ᐃⲆ.ⲆⲆΔΔⵠᐃΔ;
        ᐃΔ[1193][Hr.Δⵠⵠ] = ᐃⲆ.ⲆⲆΔⵠΔΔΔ;
        ᐃΔ[1194] = [];
        ᐃΔ[1194][Hr.ΔᐃΔ] = ᐃⲆ.ⲆⵠᐃΔⲆⵠᐃ;
        ᐃΔ[1194][Hr.Δⵠⵠ] = ᐃⲆ.ΔᐃⲆⲆⲆΔⵠ;
        ᐃΔ[152] = [];
        ᐃΔ[152][Hr.ΔᐃΔ] = ᐃⲆ.ΔᐃⵠⲆΔᐃⲆ;
        ᐃΔ[152][Hr.Δⵠⵠ] = ᐃⲆ.ⵠⲆⲆΔΔⲆΔ;
        ᐃΔ[1198] = [];
        ᐃΔ[1198][Hr.ΔᐃΔ] = ᐃⲆ.ⲆΔΔᐃᐃᐃΔ;
        ᐃΔ[1198][Hr.Δⵠⵠ] = ᐃⲆ.ⵠᐃᐃΔⲆΔⲆ;
        ᐃΔ[153] = [];
        ᐃΔ[153][Hr.ΔᐃΔ] = ᐃⲆ.ⵠᐃᐃⵠΔⲆᐃ;
        ᐃΔ[153][Hr.Δⵠⵠ] = ᐃⲆ.ᐃᐃΔᐃⲆⲆⵠ;
        ᐃΔ[1202] = [];
        ᐃΔ[1202][Hr.ΔᐃΔ] = ᐃⲆ.ⲆᐃᐃΔⲆⲆᐃ;
        ᐃΔ[1202][Hr.Δⵠⵠ] = ᐃⲆ.ⵠⲆᐃᐃⲆᐃⵠ;
        ᐃΔ[154] = [];
        ᐃΔ[154][Hr.ΔᐃΔ] = ᐃⲆ.ⲆᐃΔΔΔⵠⲆ;
        ᐃΔ[154][Hr.Δⵠⵠ] = ᐃⲆ.ⲆΔⲆⵠⵠⵠⵠ;
        ᐃΔ[1206] = [];
        ᐃΔ[1206][Hr.ΔᐃΔ] = ᐃⲆ.ΔᐃⲆⲆⲆⲆᐃ;
        ᐃΔ[1206][Hr.Δⵠⵠ] = ᐃⲆ.ΔⲆᐃⵠⵠⲆΔ;
        ᐃΔ[155] = [];
        ᐃΔ[155][Hr.ΔᐃΔ] = ᐃⲆ.ⵠΔⲆⵠΔΔΔ;
        ᐃΔ[155][Hr.Δⵠⵠ] = ᐃⲆ.ΔⲆⵠᐃΔⵠΔ;
        ᐃΔ[1210] = [];
        ᐃΔ[1210][Hr.ΔᐃΔ] = ᐃⲆ.ⲆᐃΔⵠⵠᐃⵠ;
        ᐃΔ[1210][Hr.Δⵠⵠ] = ᐃⲆ.ΔᐃⵠΔᐃⵠⵠ;
        ᐃΔ[156] = [];
        ᐃΔ[156][Hr.ΔᐃΔ] = ᐃⲆ.ᐃΔᐃⲆⵠΔⲆ;
        ᐃΔ[156][Hr.Δⵠⵠ] = ᐃⲆ.ΔᐃⲆΔΔⲆᐃ;
        ᐃΔ[1214] = [];
        ᐃΔ[1214][Hr.ΔᐃΔ] = ᐃⲆ.ⵠⲆᐃΔⵠᐃᐃ;
        ᐃΔ[1214][Hr.Δⵠⵠ] = ᐃⲆ.ⵠΔⲆᐃΔⲆΔ;
        ᐃΔ[157] = [];
        ᐃΔ[157][Hr.ΔᐃΔ] = ᐃⲆ.ΔᐃⲆᐃⲆⲆᐃ;
        ᐃΔ[157][Hr.Δⵠⵠ] = ᐃⲆ.ⵠᐃⲆᐃⲆⲆⵠ;
        ᐃΔ[245] = [];
        ᐃΔ[245][Hr.ΔᐃΔ] = ᐃⲆ.ᐃⲆⲆⵠΔᐃΔ;
        ᐃΔ[245][Hr.Δⵠⵠ] = ᐃⲆ.ᐃⲆᐃᐃⲆⲆΔ;
        ᐃΔ[246] = ᐃⲆ.ᐃⲆΔᐃⲆᐃᐃ;
        ᐃΔ[159] = [];
        ᐃΔ[159][Hr.ΔᐃΔ] = $a(Rm(a * 0.75, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
        ᐃΔ[159][Hr.Δⵠⵠ] = $a(Rm(a * 0.75, Re, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
        ᐃΔ[558] = $a(op(a * 0.3, ["#092813", "#1f773d"], 0));
        ᐃΔ[559] = $a(op(a * 0.3, ["#092813", "#1f773d"], 1));
        ᐃΔ[885] = $a(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 60;
            c.height = a * 60;
            d.translate(a * -25, a * -25);
            d.translate(0, a * 5);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 24, a * 50);
            d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
            d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
            d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
            d.closePath();
            $b(d, b[0]);
            d.translate(0, a * -5);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 24, a * 50);
            d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
            d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
            d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
            d.closePath();
            $b(d, b[1]);
            return c;
        }(a * 0.6, ["#092813", "#1f773d"]));
        ᐃΔ[556] = [];
        ᐃΔ[556].push($a(ip(a * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
        ᐃΔ[556].push($a(ip(a * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
        ᐃΔ[556].push($a(ip(a * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
        ᐃΔ[560] = [];
        var c = $a(ip(a * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
        ᐃΔ[560].push(c);
        ᐃΔ[560].push(c);
        ᐃΔ[560].push(c);
        ᐃΔ[557] = [];
        ᐃΔ[557].push($a(ip(a * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
        ᐃΔ[557].push($a(ip(a * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
        ᐃΔ[557].push($a(ip(a * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
        ᐃΔ[681] = $a(function (b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            var f = b * 170;
            var g = b * 172;
            var a = f / 2;
            var i = g / 2;
            d.width = f;
            d.height = g;
            e.translate(a, i);
            e.save();
            for (var j = 0; j < 10; j++) {
                e.rotate(Math.PI / 5);
                e.save();
                e.translate(b * 65, 0);
                nd(e, 3, b * 18, b * 4);
                $b(e, c[0]);
                e.restore();
            }
            e.restore();
            id(e, 0, 0, b * 40);
            $b(e, Zi, c[0], b * 6);
            id(e, 0, 0, b * 20);
            $b(e, c[0]);
            return d;
        }(a * 0.3, ["#FFFFFF"]));
        ᐃΔ[794] = $a(function (b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            var f = b * 130;
            var g = b * 142;
            var a = f / 2;
            var h = g / 2;
            d.width = f;
            d.height = g;
            id(e, a, h, b * 40);
            $b(e, Mq, c[0], b * 7);
            id(e, a, h, b * 30);
            $b(e, $e, c[0], b * 7);
            id(e, a, h, b * 20);
            $b(e, c[0]);
            return d;
        }(a * 0.3, ["#FFFFFF"]));
        ᐃΔ[562] = $a(op(a * 0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
        ᐃΔ[667] = $a(sd(Math.PI / 5, function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 316;
            c.height = a * 365;
            d.save();
            d.translate(a * 156.07142639160156, a * 51.81248474121094);
            d.rotate(0);
            Zb(d, a * -21.5, a * -34, a * 43, a * 68, a * 8);
            d.restore();
            $b(d, b[0], b[0], a * 15);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
            d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
            d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
            d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
            d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
            d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
            d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
            d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
            d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
            d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
            d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
            d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
            d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
            d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
            d.closePath();
            $b(d, b[0], b[0], a * 15);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
            d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
            d.closePath();
            $b(d, b[0], b[0], a * 15);
            return c;
        }(a * 0.2, ["#FFFFFF"])));
        ᐃΔ[43] = [];
        ᐃΔ[43][Hr.ΔᐃΔ] = $a(ym(a * 0.85, 0, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
        ᐃΔ[43][Hr.Δⵠⵠ] = $a(ym(a * 0.85, 0, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
        ᐃΔ[561] = [];
        ᐃΔ[561].push($a(ip(a * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
        ᐃΔ[561].push($a(ip(a * 0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
        ᐃΔ[561].push($a(ip(a * 0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
        ᐃΔ[83] = [];
        ᐃΔ[83][Hr.ΔᐃΔ] = $a(kp(a * 0.37, ma, ["#2a2938", "#242330", "#313041"]));
        ᐃΔ[83][Hr.Δⵠⵠ] = $a(kp(a * 0.37, k, ["#1b1e30", "#161921", "#252f3e"]));
        ᐃΔ[85] = [];
        ᐃΔ[85][Hr.ΔᐃΔ] = $a(wp(a * 0.17, true, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
        ᐃΔ[85][Hr.Δⵠⵠ] = $a(wp(a * 0.17, Pj, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
        ᐃΔ[86] = [];
        ᐃΔ[86][Hr.ΔᐃΔ] = $a(cp(a * 0.55, true, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
        ᐃΔ[86][Hr.Δⵠⵠ] = $a(cp(a * 0.55, Re, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
        ᐃΔ[84] = [];
        ᐃΔ[84][Hr.ΔᐃΔ] = $a(cp(a * 0.55, Ro, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
        ᐃΔ[84][Hr.Δⵠⵠ] = $a(cp(a * 0.55, eh, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
        ᐃΔ[77] = [];
        ᐃΔ[77][Hr.ΔᐃΔ] = $a(Fp(a * 0.2, kl, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
        ᐃΔ[77][Hr.Δⵠⵠ] = $a(Fp(a * 0.2, Mk, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
        ᐃΔ[78] = [];
        ᐃΔ[78][Hr.ΔᐃΔ] = $a(Fp(a * 0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
        ᐃΔ[78][Hr.Δⵠⵠ] = $a(Fp(a * 0.2, Ro, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
        ᐃΔ[79] = [];
        ᐃΔ[79][Hr.ΔᐃΔ] = $a(Fp(a * 0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
        ᐃΔ[79][Hr.Δⵠⵠ] = $a(Fp(a * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
        ᐃΔ[61] = [];
        ᐃΔ[61][Hr.ΔᐃΔ] = $a(Sc(a * 0.24, true, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
        ᐃΔ[61][Hr.Δⵠⵠ] = $a(Sc(a * 0.24, Uh, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
        ᐃΔ[59] = [];
        ᐃΔ[59][Hr.ΔᐃΔ] = $a(rm(a * 0.32, 0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
        ᐃΔ[59][Hr.Δⵠⵠ] = $a(rm(a * 0.32, 0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
        ᐃΔ[62] = [];
        ᐃΔ[62][Hr.ΔᐃΔ] = $a(sd(3, Lm(a * 0.9, true, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
        ᐃΔ[62][Hr.Δⵠⵠ] = $a(sd(3, Lm(a * 0.9, true, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
        ᐃΔ[750] = [];
        ᐃΔ[750][Hr.ΔᐃΔ] = $a(sd(3, Lm(a * 1, true, [undefined, Nh, cn, "#c8efef", "#c8efef"])));
        ᐃΔ[750][Hr.Δⵠⵠ] = $a(sd(3, Lm(a * 1, true, [undefined, ks, undefined, "#87d2e6", "#87d2e6"])));
        ᐃΔ[755] = [];
        ᐃΔ[755].push($a(hp(a * 0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
        ᐃΔ[755].push($a(hp(a * 0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1)));
        ᐃΔ[755].push($a(hp(a * 0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
        ᐃΔ[795] = [];
        ᐃΔ[795].push($a(dp(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
        ᐃΔ[795].push($a(dp(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
        ᐃΔ[795].push($a(dp(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
        ᐃΔ[782] = [];
        ᐃΔ[782].push($a(Xt(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1)));
        ᐃΔ[782].push($a(Xt(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
        ᐃΔ[782].push($a(Xt(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
        ᐃΔ[783] = [];
        ᐃΔ[783].push($a(Xt(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0)));
        ᐃΔ[783].push($a(Xt(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0)));
        ᐃΔ[783].push($a(Xt(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0)));
        ᐃΔ[46] = [];
        ᐃΔ[46][Hr.ΔᐃΔ] = $a(sd(3, bp(a * 0.7, true, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
        ᐃΔ[46][Hr.Δⵠⵠ] = $a(sd(3, bp(a * 0.7, dr, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
        ᐃΔ[50] = [];
        ᐃΔ[50][Hr.ΔᐃΔ] = $a(sd(3, bp(a * 0.7, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
        ᐃΔ[50][Hr.Δⵠⵠ] = $a(sd(3, bp(a * 0.7, true, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
        ᐃΔ[51] = [];
        ᐃΔ[51][Hr.ΔᐃΔ] = $a(sd(3, bp(a * 0.7, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
        ᐃΔ[51][Hr.Δⵠⵠ] = $a(sd(3, bp(a * 0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
        ᐃΔ[52] = [];
        ᐃΔ[52][Hr.ΔᐃΔ] = $a(sd(3, bp(a * 0.7, ma, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
        ᐃΔ[52][Hr.Δⵠⵠ] = $a(sd(3, bp(a * 0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
        ᐃΔ[592] = [];
        ᐃΔ[592].push($a(Dm(a * 0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
        ᐃΔ[592].push($a(Dm(a * 0.7, ["#524712", "#c7b11c", "#d9ba18"])));
        ᐃΔ[592].push($a(Dm(a * 0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
        ᐃΔ[326] = $a(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 188;
            c.height = a * 190;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
            d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
            d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
            d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
            d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
            d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
            d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
            d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
            d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
            d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
            d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
            d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
            d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
            d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
            d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
            d.closePath();
            $b(d, b[0], b[0], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
            d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
            d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
            d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
            d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
            d.closePath();
            $b(d, b[0], b[0], a * 2);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
            d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
            d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
            d.closePath();
            $b(d, b[0], b[0], a * 2);
            return c;
        }(a * 1.1, ["#BB0000"]));
        ᐃΔ[333] = $a(sd(Math.PI, function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 238;
            c.height = a * 230;
            d.translate(a * -93, a * -110);
            id(d, a * 213.5, a * 256.75, a * 75);
            $b(d, b);
            id(d, a * 213.5, a * 175.75, a * 25);
            $b(d, b);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 156.5, a * 137.75);
            d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 217.5, a * 178.75);
            d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 130.5, a * 124.75);
            d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 214.5, a * 183.75);
            d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 107.5, a * 213.75);
            d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 212.5, a * 187.75);
            d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 102.5, a * 258.75);
            d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 214.5, a * 192.75);
            d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 219.5, a * 158.75);
            d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
            d.closePath();
            d.lineWidth = a * 10;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 210.5, a * 160.75);
            d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
            d.closePath();
            d.lineWidth = a * 10;
            d.strokeStyle = b;
            d.stroke();
            return c;
        }(a * 0.9, "#BB0000")));
        ᐃΔ[23] = [];
        ᐃΔ[23][Hr.ΔᐃΔ] = $a(Am(a * 0.55, Yg, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
        ᐃΔ[23][Hr.Δⵠⵠ] = $a(Am(a * 0.55, true, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
        ᐃΔ[58] = [];
        ᐃΔ[58][Hr.ΔᐃΔ] = $a(fm(a * 0.55, true, ["#252525", "#73583e", "#573f29", "#7d6144"]));
        ᐃΔ[58][Hr.Δⵠⵠ] = $a(fm(a * 0.55, O, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
        ᐃΔ[25] = [];
        ᐃΔ[25][Hr.ΔᐃΔ] = $a(Jm(a * 0.6, kl, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
        ᐃΔ[25][Hr.Δⵠⵠ] = $a(Jm(a * 0.6, true, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
        ᐃΔ[26] = [];
        ᐃΔ[26][Hr.ΔᐃΔ] = $a(xm(a * 0.58, 0, ["#dbce71", "#b29c32", "#c4bc51"]));
        ᐃΔ[26][Hr.Δⵠⵠ] = $a(xm(a * 0.58, 0, ["#2b7c57", "#15543c", "#1a7961"]));
        ᐃΔ[27] = [];
        ᐃΔ[27][Hr.ΔᐃΔ] = $a(zm(a * 0.69, 0, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
        ᐃΔ[27][Hr.Δⵠⵠ] = $a(zm(a * 0.69, 0, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
        ᐃΔ[413] = [];
        ᐃΔ[413][Hr.ΔᐃΔ] = [];
        ᐃΔ[413][Hr.Δⵠⵠ] = [];
        ᐃΔ[413][Hr.ΔᐃΔ].push($a(sm(a * 1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
        ᐃΔ[413][Hr.ΔᐃΔ].push($a(em(a * 1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
        ᐃΔ[413][Hr.ΔᐃΔ].push($a(tm(a * 1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
        ᐃΔ[413][Hr.Δⵠⵠ].push($a(sm(a * 1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
        ᐃΔ[413][Hr.Δⵠⵠ].push($a(em(a * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
        ᐃΔ[413][Hr.Δⵠⵠ].push($a(tm(a * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
        ᐃΔ[449] = [];
        ᐃΔ[449][Hr.ΔᐃΔ] = $a(Tm(a * 1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
        ᐃΔ[449][Hr.Δⵠⵠ] = $a(Tm(a * 1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
        ᐃΔ[451] = [];
        ᐃΔ[451][Hr.ΔᐃΔ] = $a(wm(a * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
        ᐃΔ[451][Hr.Δⵠⵠ] = $a(wm(a * 1, ["#050505", "#327570", "#021724", "#200333"]));
        ᐃΔ[452] = [];
        ᐃΔ[452][Hr.ΔᐃΔ] = $a(Pm(a * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
        ᐃΔ[452][Hr.Δⵠⵠ] = $a(Pm(a * 1, ["#050505", "#327570", "#021724", "#200333"]));
        ᐃΔ[243] = [];
        ᐃΔ[243][Hr.ΔᐃΔ] = [];
        ᐃΔ[243][Hr.Δⵠⵠ] = [];
        ᐃΔ[243][Hr.ΔᐃΔ] = [ᐃⲆ.ⵠⵠΔΔΔⵠⲆ, ᐃⲆ.ⲆⲆⲆⵠⲆⲆᐃ, ᐃⲆ.ⵠΔᐃⲆⲆⲆΔ, ᐃⲆ.ΔᐃᐃⲆⵠⵠⵠ, ᐃⲆ.ᐃΔⵠΔⲆΔⲆ, ᐃⲆ.ⲆᐃᐃⲆΔΔⵠ, ᐃⲆ.ΔⲆᐃⲆΔⵠᐃ, ᐃⲆ.ⲆⵠⵠⲆΔᐃᐃ, ᐃⲆ.ᐃΔΔⵠⲆΔⲆ, ᐃⲆ.ⲆᐃΔⲆⵠⲆᐃ, ᐃⲆ.ⵠⵠΔΔΔΔᐃ, ᐃⲆ.ⵠⵠⵠΔΔⵠⵠ, ᐃⲆ.Ⲇᐃᐃⵠᐃᐃᐃ, ᐃⲆ.ⵠⵠⵠᐃᐃΔᐃ, ᐃⲆ.ΔⵠⵠⵠᐃᐃⲆ, ᐃⲆ.ⵠᐃᐃᐃΔΔᐃ, ᐃⲆ.ⵠⵠᐃΔⲆⵠⵠ, ᐃⲆ.ΔᐃΔⲆⲆΔⲆ, ᐃⲆ.ⲆᐃᐃΔΔᐃⵠ, ᐃⲆ.ᐃᐃᐃΔⲆΔΔ, ᐃⲆ.ᐃⵠⲆⲆΔΔΔ, ᐃⲆ.ΔΔⵠⲆⵠⲆⵠ, ᐃⲆ.ⵠᐃⲆᐃᐃᐃⵠ, ᐃⲆ.ⲆᐃΔΔⵠΔⲆ, ᐃⲆ.ⲆᐃⲆⲆⲆΔΔ, ᐃⲆ.ⵠⵠᐃⵠⵠⲆᐃ, ᐃⲆ.ᐃΔᐃⵠΔⲆⵠ, ᐃⲆ.Ⲇⵠⵠⵠⵠᐃᐃ, ᐃⲆ.ᐃⵠⵠΔΔⵠⲆ, ᐃⲆ.ᐃᐃᐃΔᐃⲆⵠ, ᐃⲆ.ⵠᐃⲆᐃᐃᐃᐃ, ᐃⲆ.ⵠⵠᐃⲆⵠΔΔ, ᐃⲆ.ⵠΔΔᐃⵠⲆΔ, ᐃⲆ.ᐃⲆΔⵠⵠⲆᐃ, ᐃⲆ.ⲆΔᐃⵠᐃᐃᐃ, ᐃⲆ.ΔⲆⲆΔΔⵠᐃ, ᐃⲆ.ΔΔⵠⲆΔⲆΔ, ᐃⲆ.ⵠⲆⵠⲆᐃᐃⲆ, ᐃⲆ.ΔΔⲆⲆⲆⲆᐃ, ᐃⲆ.ⵠⵠⵠⵠⲆⵠⵠ, ᐃⲆ.ⲆⵠΔⵠᐃⲆΔ, ᐃⲆ.ΔᐃⲆⲆΔⲆⲆ, ᐃⲆ.ⵠΔⵠΔᐃΔΔ, ᐃⲆ.ⵠⵠⲆⵠⵠⲆⵠ, ᐃⲆ.ΔⲆⵠⵠᐃⲆⵠ, ᐃⲆ.ᐃⲆΔⲆᐃΔΔ, ᐃⲆ.ᐃⲆᐃΔΔᐃⲆ, ᐃⲆ.ⵠⲆΔⵠⲆᐃΔ, ᐃⲆ.ⲆⵠⵠⲆⵠᐃΔ, ᐃⲆ.ᐃΔᐃⲆⵠᐃⵠ, ᐃⲆ.ⲆⵠΔⲆᐃΔΔ, ᐃⲆ.ΔΔⲆΔΔᐃΔ, ᐃⲆ.ᐃⲆⲆᐃΔⵠᐃ, ᐃⲆ.ⵠΔᐃᐃᐃᐃΔ, ᐃⲆ.ⵠᐃⲆⵠΔᐃᐃ, ᐃⲆ.ΔΔΔᐃᐃⵠᐃ];
        ᐃΔ[243][Hr.Δⵠⵠ] = [ᐃⲆ.ᐃⲆᐃΔΔⵠⵠ, ᐃⲆ.ᐃⵠⵠⲆⵠⲆᐃ, ᐃⲆ.ⲆΔⲆΔᐃΔⵠ, ᐃⲆ.ΔΔᐃΔⵠⵠᐃ, ᐃⲆ.ᐃⵠⲆⵠⲆⵠΔ, ᐃⲆ.ⵠᐃⵠᐃᐃⵠΔ, ᐃⲆ.ΔⲆΔⵠⵠⲆΔ, ᐃⲆ.ⵠⲆⲆⵠⵠⵠΔ, ᐃⲆ.ⲆᐃΔⵠⲆᐃⵠ, ᐃⲆ.ᐃΔⵠⵠⲆΔⵠ, ᐃⲆ.ⵠᐃᐃΔᐃⲆⵠ, ᐃⲆ.ᐃⲆⵠΔᐃΔΔ, ᐃⲆ.ⵠΔⲆᐃᐃⲆⲆ, ᐃⲆ.ΔᐃΔΔΔⵠΔ, ᐃⲆ.ᐃⵠⲆᐃᐃⲆⲆ, ᐃⲆ.ᐃΔᐃᐃᐃᐃΔ, ᐃⲆ.ⲆΔΔᐃⵠⲆΔ, ᐃⲆ.ΔⲆⵠΔⵠⲆᐃ, ᐃⲆ.ᐃⲆⵠᐃⵠⲆΔ, ᐃⲆ.ⲆΔⲆΔⲆⵠⲆ, ᐃⲆ.ᐃᐃⵠⲆⲆᐃΔ, ᐃⲆ.ⲆⲆⲆⵠᐃⵠⲆ, ᐃⲆ.ᐃⲆᐃⲆΔⵠᐃ, ᐃⲆ.ΔⵠⲆᐃⲆᐃⲆ, ᐃⲆ.ᐃⲆΔⲆⲆⲆᐃ, ᐃⲆ.ᐃⵠⵠⵠⵠᐃⲆ, ᐃⲆ.ⲆⲆⵠⲆⲆΔⲆ, ᐃⲆ.ⲆⵠⲆⵠΔⲆⲆ, ᐃⲆ.ᐃⲆΔⵠⵠⲆΔ, ᐃⲆ.ΔᐃᐃⵠΔⵠΔ, ᐃⲆ.ΔⵠⲆⵠⲆⲆⲆ, ᐃⲆ.ᐃᐃΔⲆᐃΔⲆ, ᐃⲆ.ᐃΔⵠⲆⲆⲆᐃ, ᐃⲆ.ᐃΔΔΔⵠΔⵠ, ᐃⲆ.ᐃᐃⲆΔᐃΔᐃ, ᐃⲆ.ΔΔΔᐃΔⲆᐃ, ᐃⲆ.ᐃⵠΔⲆⵠⲆΔ, ᐃⲆ.ᐃⲆⵠΔⲆᐃⲆ, ᐃⲆ.ⵠⲆΔΔⵠⲆⲆ, ᐃⲆ.ⵠΔⲆⲆⲆᐃΔ, ᐃⲆ.ⲆΔΔⵠᐃⲆⲆ, ᐃⲆ.ⵠΔⵠⲆΔⵠⲆ, ᐃⲆ.ⵠⲆΔΔⵠⲆΔ, ᐃⲆ.ⵠⵠⵠⵠⲆᐃΔ, ᐃⲆ.ΔᐃΔⲆⵠⵠᐃ, ᐃⲆ.ⲆᐃΔᐃΔⵠⵠ, ᐃⲆ.ΔΔΔΔΔⵠⲆ, ᐃⲆ.ⵠΔⲆᐃⲆⲆΔ, ᐃⲆ.ⲆΔⵠⵠΔᐃΔ, ᐃⲆ.ΔᐃᐃΔᐃⲆⲆ, ᐃⲆ.ᐃⲆⲆΔΔⲆⲆ, ᐃⲆ.ⲆΔⵠⵠΔΔⲆ, ᐃⲆ.ⵠⲆⵠⲆᐃΔΔ, ᐃⲆ.ᐃⲆⵠᐃⲆⵠᐃ, ᐃⲆ.ᐃⵠᐃΔⵠⵠⲆ, ᐃⲆ.ΔⲆᐃⵠᐃᐃⵠ];
        ᐃΔ[676] = [];
        ᐃΔ[676][Hr.ΔᐃΔ] = [];
        ᐃΔ[676][Hr.Δⵠⵠ] = [];
        ᐃΔ[676][Hr.ΔᐃΔ].push($a(wu(a * 1.1, false, ["#252B28", "#747471", "#83827e"], 0)));
        ᐃΔ[676][Hr.ΔᐃΔ].push($a(wu(a * 0.9, yj, ["#252B28", "#747471", "#83827e"], 1)));
        ᐃΔ[676][Hr.ΔᐃΔ].push($a(wu(a * 1, false, ["#252B28", "#747471", "#83827e"], 2)));
        ᐃΔ[676][Hr.ΔᐃΔ].push($a(wu(a * 0.9, false, ["#252B28", "#747471", "#83827e"], 2)));
        ᐃΔ[676][Hr.Δⵠⵠ].push($a(wu(a * 1.1, Xs, ["#030d14", "#123335", "#183f3f"], 0)));
        ᐃΔ[676][Hr.Δⵠⵠ].push($a(wu(a * 0.9, Xb, ["#030d14", "#123335", "#183f3f"], 1)));
        ᐃΔ[676][Hr.Δⵠⵠ].push($a(wu(a * 1, false, ["#030d14", "#123335", "#183f3f"], 2)));
        ᐃΔ[676][Hr.Δⵠⵠ].push($a(wu(a * 0.9, false, ["#030d14", "#123335", "#183f3f"], 2)));
        ᐃΔ[679] = [];
        ᐃΔ[679][Hr.ΔᐃΔ] = [];
        ᐃΔ[679][Hr.Δⵠⵠ] = [];
        ᐃΔ[679][Hr.ΔᐃΔ].push($a(wu(a * 1.1, Yg, ["#252B28", "#58645F", "#75827D"], 2)));
        ᐃΔ[679][Hr.ΔᐃΔ].push($a(wu(a * 0.9, Ro, ["#252B28", "#58645F", "#75827D"], 2)));
        ᐃΔ[679][Hr.ΔᐃΔ].push($a(wu(a * 1, true, ["#252B28", "#58645F", "#75827D"], 2)));
        ᐃΔ[679][Hr.ΔᐃΔ].push($a(wu(a * 0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
        ᐃΔ[679][Hr.Δⵠⵠ].push($a(wu(a * 1.1, true, ["#030d14", "#123335", "#183f3f"], 2)));
        ᐃΔ[679][Hr.Δⵠⵠ].push($a(wu(a * 0.9, dr, ["#030d14", "#123335", "#183f3f"], 2)));
        ᐃΔ[679][Hr.Δⵠⵠ].push($a(wu(a * 1, true, ["#030d14", "#123335", "#183f3f"], 2)));
        ᐃΔ[679][Hr.Δⵠⵠ].push($a(wu(a * 0.9, kk, ["#030d14", "#123335", "#183f3f"], 2)));
        ᐃΔ[415] = [];
        ᐃΔ[415][Hr.ΔᐃΔ] = [];
        ᐃΔ[415][Hr.Δⵠⵠ] = [];
        ᐃΔ[415][Hr.ΔᐃΔ].push($a(tu(a * 1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ᐃΔ[415][Hr.ΔᐃΔ].push($a(tu(a * 1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ᐃΔ[415][Hr.ΔᐃΔ].push($a(tu(a * 1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ᐃΔ[415][Hr.Δⵠⵠ].push($a(tu(a * 1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
        ᐃΔ[415][Hr.Δⵠⵠ].push($a(tu(a * 1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
        ᐃΔ[415][Hr.Δⵠⵠ].push($a(tu(a * 1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
        ᐃΔ[416] = [];
        ᐃΔ[416][Hr.ΔᐃΔ] = [];
        ᐃΔ[416][Hr.Δⵠⵠ] = [];
        ᐃΔ[416][Hr.ΔᐃΔ].push($a(uu(a * 1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
        ᐃΔ[416][Hr.ΔᐃΔ].push($a(uu(a * 0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
        ᐃΔ[416][Hr.ΔᐃΔ].push($a(uu(a * 0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
        ᐃΔ[416][Hr.Δⵠⵠ].push($a(uu(a * 1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
        ᐃΔ[416][Hr.Δⵠⵠ].push($a(uu(a * 0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
        ᐃΔ[416][Hr.Δⵠⵠ].push($a(uu(a * 0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
        ᐃΔ[121] = [];
        ᐃΔ[121][Hr.ΔᐃΔ] = [];
        ᐃΔ[121][Hr.Δⵠⵠ] = [];
        ᐃΔ[121][Hr.ΔᐃΔ].push($a(om(a * 1.7, true, ["#1d051e", "#c27add", "#cd98e5"])));
        ᐃΔ[121][Hr.ΔᐃΔ].push($a(om(a * 1.5, true, ["#1d051e", "#c27add", "#cd98e5"])));
        ᐃΔ[121][Hr.ΔᐃΔ].push($a(om(a * 1.3, true, ["#1d051e", "#c27add", "#cd98e5"])));
        ᐃΔ[121][Hr.Δⵠⵠ].push($a(om(a * 1.7, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
        ᐃΔ[121][Hr.Δⵠⵠ].push($a(om(a * 1.5, kl, ["#1d051e", "#41aaa0", "#5cccc4"])));
        ᐃΔ[121][Hr.Δⵠⵠ].push($a(om(a * 1.3, xq, ["#1d051e", "#41aaa0", "#5cccc4"])));
        ᐃΔ[678] = [];
        ᐃΔ[678][Hr.ΔᐃΔ] = [];
        ᐃΔ[678][Hr.Δⵠⵠ] = [];
        ᐃΔ[678][Hr.ΔᐃΔ].push($a(am(a, ["#2d53c4"])));
        ᐃΔ[678][Hr.Δⵠⵠ].push($a(am(a, ["#2d53c4"])));
        ᐃΔ[696] = [];
        ᐃΔ[696][Hr.ΔᐃΔ] = [];
        ᐃΔ[696][Hr.Δⵠⵠ] = [];
        ᐃΔ[696][Hr.ΔᐃΔ].push($a(am(a, ["#c4912d"])));
        ᐃΔ[696][Hr.Δⵠⵠ].push($a(am(a, ["#c4912d"])));
        ᐃΔ[680] = [];
        ᐃΔ[680][Hr.ΔᐃΔ] = $a(dm(a, ["#414040"]));
        ᐃΔ[680][Hr.Δⵠⵠ] = $a(dm(a, ["#153635"]));
        ᐃΔ[508] = [];
        ᐃΔ[508][Hr.ΔᐃΔ] = $a(yc(a * 1, Ad, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ᐃΔ[508][Hr.Δⵠⵠ] = $a(yc(a * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ᐃΔ[509] = [];
        ᐃΔ[509][Hr.ΔᐃΔ] = $a(Tc(a * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ᐃΔ[509][Hr.Δⵠⵠ] = $a(Tc(a * 1, Ag, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ᐃΔ[512] = [];
        ᐃΔ[512][Hr.ΔᐃΔ] = $a(Tc(a * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ᐃΔ[512][Hr.Δⵠⵠ] = $a(Tc(a * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ᐃΔ[511] = [];
        ᐃΔ[511][Hr.ΔᐃΔ] = $a(jc(a * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ᐃΔ[511][Hr.Δⵠⵠ] = $a(jc(a * 1, Ad, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ᐃΔ[510] = [];
        ᐃΔ[510][Hr.ΔᐃΔ] = $a(Fc(a * 1, Bq, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ᐃΔ[510][Hr.Δⵠⵠ] = $a(Fc(a * 1, bk, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ᐃΔ[419] = [];
        ᐃΔ[419][Hr.ΔᐃΔ] = $a(bm(a * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
        ᐃΔ[419][Hr.Δⵠⵠ] = $a(bm(a * 0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
        ᐃΔ[445] = [];
        ᐃΔ[445][Hr.ΔᐃΔ] = $a(lm(a * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
        ᐃΔ[445][Hr.Δⵠⵠ] = $a(lm(a * 0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
        ᐃΔ[259] = [];
        ᐃΔ[818] = [];
        ᐃΔ[516] = [];
        ᐃΔ[819] = [];
        for (b = 0; b < 2; b++) {
            ᐃΔ[259][b] = document.createElement("canvas");
            ᐃΔ[259][b].width = 193;
            ᐃΔ[259][b].height = 193;
            ᐃΔ[818][b] = ᐃΔ[259][b].getContext("2d");
            ᐃΔ[516][b] = document.createElement("canvas");
            ᐃΔ[516][b].width = 600;
            ᐃΔ[516][b].height = 600;
            ᐃΔ[819][b] = ᐃΔ[516][b].getContext("2d");
        }
        ᐃΔ[475] = [];
        ᐃΔ[475][Hr.ΔᐃΔ] = $a(dm(a, ["#c8e0de"]));
        ᐃΔ[475][Hr.Δⵠⵠ] = $a(dm(a, ["#147071"]));
        ᐃΔ[476] = [];
        ᐃΔ[476][Hr.ΔᐃΔ] = $a(dm(a, ["#231912"]));
        ᐃΔ[476][Hr.Δⵠⵠ] = $a(dm(a, ["#021719"]));
        ᐃΔ[697] = $a(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 253;
            c.height = a * 192;
            d.save();
            d.translate(a * 37, a * 94);
            Zb(d, a * -7, a * -20, a * 14, a * 37, a * 20);
            d.restore();
            $b(d, b[0]);
            d.save();
            d.translate(a * 131, a * 94);
            Zb(d, a * -84, a * -67, a * 168, a * 134, a * 20);
            d.restore();
            $b(d, b[0], b[0], a * 13);
            d.save();
            d.translate(a * 223, a * 94.5);
            Zb(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
            d.restore();
            $b(d, b[0]);
            d.save();
            d.translate(a * 128.5, a * 170.5);
            Zb(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
            d.restore();
            $b(d, b[0]);
            return c;
        }(a * 0.5, ["#BB0000"]));
        ᐃΔ[461] = $a(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 161;
            c.height = a * 190;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 9, a * 93);
            d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
            d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
            d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
            d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
            d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
            d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
            d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
            d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
            d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
            d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
            d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
            d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
            d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
            d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
            d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
            d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
            d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
            d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
            d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
            d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
            d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
            d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
            d.closePath();
            $b(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 25, a * 63);
            d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
            d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
            d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
            $b(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 91, a * 53);
            d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
            d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
            d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
            $b(d, b, b, a * 4);
            return c;
        }(a * 0.9, "#BB0000"));
        ᐃΔ[462] = $a(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 147;
            c.height = a * 172;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 8, a * 50);
            d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
            d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
            d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
            d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
            d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
            d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
            d.closePath();
            $b(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 14, a * 57);
            d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
            d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
            $b(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 93, a * 47);
            d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
            d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
            $b(d, b, b, a * 4);
            return c;
        }(a * 0.9, "#BB0000"));
        ᐃΔ[463] = $a(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 271;
            c.height = a * 366;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 133, a * 99);
            d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
            d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
            d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
            d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
            d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
            d.closePath();
            $b(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 73, a * 270);
            d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
            d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
            d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
            d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
            d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
            d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
            d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
            d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
            d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
            d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
            d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
            d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
            d.closePath();
            $b(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 76, a * 252);
            d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
            d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
            d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
            d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
            d.closePath();
            $b(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 84, a * 257);
            d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
            d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
            d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
            d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
            d.closePath();
            $b(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 125, a * 65);
            d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
            d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
            d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
            d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
            d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
            d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
            d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
            d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
            d.closePath();
            $b(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 115, a * 37);
            d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
            d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
            d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
            d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
            d.closePath();
            $b(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 146, a * 34);
            d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
            d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
            d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
            d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
            d.closePath();
            $b(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 143, a * 69);
            d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
            d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
            d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
            d.closePath();
            $b(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 149, a * 92);
            d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
            d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
            d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
            d.closePath();
            $b(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 111, a * 61);
            d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
            d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
            d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
            d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
            d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
            d.closePath();
            $b(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 107, a * 81);
            d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
            d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
            d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
            d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
            d.closePath();
            $b(d, b[0]);
            return c;
        }(a * 1, ["#BB0000"]));
        ᐃΔ[466] = $a(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 85;
            c.height = a * 145;
            d.translate(a * -20, a * -95);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 50, a * 105);
            d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
            d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
            d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
            d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
            d.closePath();
            $b(d, b);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 44, a * 106);
            d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
            d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
            d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
            d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
            d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
            d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
            d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
            d.closePath();
            $b(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 30, a * 159);
            d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
            d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
            d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
            d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
            d.closePath();
            $b(d, b);
            return c;
        }(a * 0.8, "#BB0000"));
        ᐃΔ[467] = $a(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 85;
            c.height = a * 145;
            d.translate(a * -165, a * -95);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 217, a * 103);
            d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
            d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
            d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
            d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
            d.closePath();
            $b(d, b);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 231, a * 163);
            d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
            d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
            d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
            d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
            d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
            d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
            d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
            d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
            d.closePath();
            $b(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 234, a * 154);
            d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
            d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
            d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
            d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
            d.closePath();
            $b(d, b);
            return c;
        }(a * 0.8, "#BB0000"));
        ᐃΔ[322] = $a(function (b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            var f = b * 85;
            var g = b * 115;
            var a = b * 4;
            d.width = f;
            d.height = g;
            e.translate(b * -130, b * -60);
            e.globalAlpha = 1;
            e.beginPath();
            e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
            e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
            e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
            e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
            e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
            e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
            e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
            e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
            e.closePath();
            $b(e, c, c, a);
            return d;
        }(a * 0.9, "#BB0000"));
        ᐃΔ[279] = $a(gd(a * 0.6, "#BB0000"));
        ᐃΔ[280] = $a(gd(a * 0.6, "#1CE7E0"));
        ᐃΔ[281] = $a(gd(a * 0.6, "#DBE71C"));
        ᐃΔ[308] = $a(gd(a * 0.6, "#00BB00"));
        ᐃΔ[602] = [];
        ᐃΔ[602][Hr.ΔᐃΔ] = $a(dm(a, ["#dac291"]));
        ᐃΔ[602][Hr.Δⵠⵠ] = $a(dm(a, ["#0D423D"]));
        ᐃΔ[698] = [];
        ᐃΔ[698][Hr.ΔᐃΔ] = $a(dm(a, ["#dac291"]));
        ᐃΔ[698][Hr.Δⵠⵠ] = $a(dm(a, ["#0D423D"]));
        ᐃΔ[788] = [];
        ᐃΔ[788][Hr.ΔᐃΔ] = $a(Um(a * 0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
        ᐃΔ[788][Hr.Δⵠⵠ] = $a(Um(a * 0.3, O, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
        ᐃΔ[182] = [];
        ᐃΔ[182][Hr.ΔᐃΔ] = $a(Um(a * 0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
        ᐃΔ[182][Hr.Δⵠⵠ] = $a(Um(a * 0.3, Uh, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
        ᐃΔ[127] = [$a(up(a, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
        ᐃΔ[128] = [$a(up(a, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
        ᐃΔ[603] = [];
        ᐃΔ[603][Hr.ΔᐃΔ] = [];
        ᐃΔ[603][Hr.Δⵠⵠ] = [];
        ᐃΔ[603][Hr.ΔᐃΔ].push($a(im(a * 1, ["#0B6A84"])));
        ᐃΔ[603][Hr.ΔᐃΔ].push($a(pm(a * 1, ["#0B6A84"])));
        ᐃΔ[603][Hr.ΔᐃΔ].push($a(um(a * 1, ["#0B6A84"])));
        ᐃΔ[603][Hr.ΔᐃΔ].push($a(vm(a * 1, ["#0B6A84"])));
        ᐃΔ[603][Hr.ΔᐃΔ].push($a(gm(a * 1, ["#0B6A84"])));
        ᐃΔ[603][Hr.ΔᐃΔ].push($a(mm(a * 1, ["#0B6A84"])));
        ᐃΔ[603][Hr.ΔᐃΔ].push($a(cm(a * 1, ["#0B6A84"])));
        ᐃΔ[603][Hr.Δⵠⵠ].push($a(im(a * 1, ["#09373F"])));
        ᐃΔ[603][Hr.Δⵠⵠ].push($a(pm(a * 1, ["#09373F"])));
        ᐃΔ[603][Hr.Δⵠⵠ].push($a(um(a * 1, ["#09373F"])));
        ᐃΔ[603][Hr.Δⵠⵠ].push($a(vm(a * 1, ["#09373F"])));
        ᐃΔ[603][Hr.Δⵠⵠ].push($a(gm(a * 1, ["#09373F"])));
        ᐃΔ[603][Hr.Δⵠⵠ].push($a(mm(a * 1, ["#09373F"])));
        ᐃΔ[603][Hr.Δⵠⵠ].push($a(cm(a * 1, ["#09373F"])));
        ᐃΔ[692] = [];
        ᐃΔ[692][Hr.ΔᐃΔ] = [];
        ᐃΔ[692][Hr.Δⵠⵠ] = [];
        ᐃΔ[692][Hr.ΔᐃΔ].push($a(Xc(a * 1.7, ["#FBEFBC"], 0)));
        ᐃΔ[692][Hr.ΔᐃΔ].push($a(Xc(a * 1.9, ["#FBEFBC"], 1)));
        ᐃΔ[692][Hr.ΔᐃΔ].push($a(Xc(a * 1.7, ["#FBEFBC"], 2)));
        ᐃΔ[692][Hr.Δⵠⵠ].push($a(Xc(a * 1.7, ["#0F4C48"], 0)));
        ᐃΔ[692][Hr.Δⵠⵠ].push($a(Xc(a * 1.9, ["#0F4C48"], 1)));
        ᐃΔ[692][Hr.Δⵠⵠ].push($a(Xc(a * 1.7, ["#0F4C48"], 2)));
        ᐃΔ[694] = [];
        ᐃΔ[694][Hr.ΔᐃΔ] = [];
        ᐃΔ[694][Hr.Δⵠⵠ] = [];
        ᐃΔ[694][Hr.ΔᐃΔ].push($a(Xc(a * 1.8, ["#A9D6D3"], 0)));
        ᐃΔ[694][Hr.ΔᐃΔ].push($a(Xc(a * 2, ["#A9D6D3"], 1)));
        ᐃΔ[694][Hr.ΔᐃΔ].push($a(Xc(a * 1.8, ["#A9D6D3"], 2)));
        ᐃΔ[694][Hr.Δⵠⵠ].push($a(Xc(a * 1.8, ["#115E60"], 0)));
        ᐃΔ[694][Hr.Δⵠⵠ].push($a(Xc(a * 2, ["#115E60"], 1)));
        ᐃΔ[694][Hr.Δⵠⵠ].push($a(Xc(a * 1.8, ["#115E60"], 2)));
        ᐃΔ[695] = [];
        ᐃΔ[695][Hr.ΔᐃΔ] = [];
        ᐃΔ[695][Hr.Δⵠⵠ] = [];
        ᐃΔ[695][Hr.ΔᐃΔ].push($a(Xc(a * 1.9, ["#2A8B9B"], 0)));
        ᐃΔ[695][Hr.ΔᐃΔ].push($a(Xc(a * 2.1, ["#2A8B9B"], 1)));
        ᐃΔ[695][Hr.ΔᐃΔ].push($a(Xc(a * 1.9, ["#2A8B9B"], 2)));
        ᐃΔ[695][Hr.Δⵠⵠ].push($a(Xc(a * 1.9, ["#0F464C"], 0)));
        ᐃΔ[695][Hr.Δⵠⵠ].push($a(Xc(a * 2.1, ["#0F464C"], 1)));
        ᐃΔ[695][Hr.Δⵠⵠ].push($a(Xc(a * 1.9, ["#0F464C"], 2)));
        ᐃΔ[693] = [];
        ᐃΔ[693][Hr.ΔᐃΔ] = [];
        ᐃΔ[693][Hr.Δⵠⵠ] = [];
        ᐃΔ[693][Hr.ΔᐃΔ].push($a(zc(a * 0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        ᐃΔ[693][Hr.ΔᐃΔ].push($a(zc(a * 1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        ᐃΔ[693][Hr.ΔᐃΔ].push($a(zc(a * 1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        ᐃΔ[693][Hr.Δⵠⵠ].push($a(zc(a * 0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        ᐃΔ[693][Hr.Δⵠⵠ].push($a(zc(a * 1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        ᐃΔ[693][Hr.Δⵠⵠ].push($a(zc(a * 1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        ᐃΔ[637] = [];
        ᐃΔ[637][Hr.ΔᐃΔ] = $a(Zm(a * 0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
        ᐃΔ[637][Hr.Δⵠⵠ] = $a(Zm(a * 0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
        ᐃΔ[687] = $a(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 376;
            c.height = a * 371;
            d.globalAlpha = 1;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 191.633544921875, a * 123.98580932617188);
            d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
            d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
            d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
            d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
            d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
            d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
            d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
            d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
            d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
            d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
            d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
            d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
            d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
            d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
            d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
            d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
            d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
            d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
            d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
            d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
            d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
            d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
            d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
            d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
            d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
            d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
            d.closePath();
            $b(d, b[0], b[0], a * 12);
            return c;
        }(a * 0.8, ["#B6222A"]));
        ᐃΔ[673] = [];
        ᐃΔ[673][Hr.ΔᐃΔ] = $a(tp(a * 0.8, 0, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
        ᐃΔ[673][Hr.Δⵠⵠ] = $a(tp(a * 0.8, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
        ᐃΔ[688] = $a(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 158;
            c.height = a * 201;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 96.5, a * 76.421875);
            d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
            d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
            d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
            d.closePath();
            $b(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 61.5, a * 78.421875);
            d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
            d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
            d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
            d.closePath();
            $b(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 116.5, a * 127.421875);
            d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
            d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
            d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
            d.closePath();
            $b(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 41.5, a * 134.421875);
            d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
            d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
            d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
            d.closePath();
            $b(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 78.5, a * 51.921875);
            d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
            d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
            d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
            d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
            d.closePath();
            $b(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 72.5, a * 72.421875);
            d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
            d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
            d.closePath();
            $b(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 42.5, a * 163.421875);
            d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
            d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
            d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
            d.closePath();
            $b(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 79.5, a * 61.421875);
            d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
            d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
            d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
            d.closePath();
            $b(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 72.5, a * 72.421875);
            d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
            d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
            d.closePath();
            $b(d, b[0], b[0], a * 10);
            return c;
        }(a * 0.8, ["#B6222A"]));
        ᐃΔ[902] = [];
        ᐃΔ[902][Hr.ΔᐃΔ] = $a(Bd(a * 0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
        ᐃΔ[902][Hr.Δⵠⵠ] = $a(Bd(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
        ᐃΔ[903] = [];
        ᐃΔ[903][Hr.ΔᐃΔ] = $a(Bd(a * 0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
        ᐃΔ[903][Hr.Δⵠⵠ] = $a(Bd(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
        ᐃΔ[Hr.Ⲇⵠᐃᐃᐃᐃᐃ] = [];
        ᐃΔ[Hr.Ⲇⵠᐃᐃᐃᐃᐃ][Hr.ΔᐃΔ] = $a(Bd(a * 0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
        ᐃΔ[Hr.Ⲇⵠᐃᐃᐃᐃᐃ][Hr.Δⵠⵠ] = $a(Bd(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
        ᐃΔ[904] = $a(Dd(a * 0.4, ["#B6222A"]));
        ᐃΔ[905] = $a(Dd(a * 0.4, ["#B6222A"]));
        ᐃΔ[Hr.ⵠⵠⵠΔⲆΔᐃΔⲆ] = $a(Dd(a * 0.4, ["#B6222A"]));
        ᐃΔ[230] = $a(_c(a * 0.35, Jg, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
        ᐃΔ[229] = $a(mu(a * 0.35, true, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
        ᐃΔ[886] = [];
        ᐃΔ[886][Hr.ΔᐃΔ] = $a(du(a * 0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
        ᐃΔ[886][Hr.Δⵠⵠ] = $a(du(a * 0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
        ᐃΔ[887] = [];
        ᐃΔ[887][Hr.ΔᐃΔ] = $a(du(a * 0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
        ᐃΔ[887][Hr.Δⵠⵠ] = $a(du(a * 0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
        ᐃΔ[894] = [];
        ᐃΔ[894][Hr.ΔᐃΔ] = $a(gu(a * 0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
        ᐃΔ[894][Hr.Δⵠⵠ] = $a(gu(a * 0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
        ᐃΔ[895] = [];
        ᐃΔ[895][Hr.ΔᐃΔ] = $a(ou(a * 0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
        ᐃΔ[895][Hr.Δⵠⵠ] = $a(ou(a * 0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
        ᐃΔ[896] = [];
        ᐃΔ[896][Hr.ΔᐃΔ] = $a(gu(a * 0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
        ᐃΔ[896][Hr.Δⵠⵠ] = $a(gu(a * 0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
        ᐃΔ[897] = [];
        ᐃΔ[897][Hr.ΔᐃΔ] = $a(ou(a * 0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
        ᐃΔ[897][Hr.Δⵠⵠ] = $a(ou(a * 0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
        ᐃΔ[888] = $a(cu(a * 0.35, ["#B6222A"]));
        ᐃΔ[889] = $a(gu(a * 0.35, 0, [Fa, "#B6222A"]));
        ᐃΔ[890] = $a(ou(a * 0.35, 0, [undefined, "#B6222A"]));
        ᐃΔ[891] = $a(cu(a * 0.35, ["#22E066"]));
        ᐃΔ[892] = $a(gu(a * 0.35, 0, [undefined, "#22E066"]));
        ᐃΔ[893] = $a(ou(a * 0.35, 0, [Vq, "#22E066"]));
        ᐃΔ[48] = [];
        ᐃΔ[48][Hr.ΔᐃΔ] = $a(ic(a * 0.3, true, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
        ᐃΔ[48][Hr.Δⵠⵠ] = $a(ic(a * 0.3, _r, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
        ᐃΔ[47] = [];
        ᐃΔ[47][Hr.ΔᐃΔ] = $a(sc(a * 0.45, Uh, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
        ᐃΔ[47][Hr.Δⵠⵠ] = $a(sc(a * 0.45, Un, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
        ᐃΔ[141] = [];
        ᐃΔ[141][Hr.ΔᐃΔ] = $a(Gm(a * 0.63, Un, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
        ᐃΔ[141][Hr.Δⵠⵠ] = $a(Gm(a * 0.63, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
        ᐃΔ[125] = [];
        ᐃΔ[125][Hr.ΔᐃΔ] = $a(jm(a, true, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
        ᐃΔ[125][Hr.Δⵠⵠ] = $a(jm(a, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
        ᐃΔ[221] = [];
        ᐃΔ[221][Hr.ΔᐃΔ] = ᐃⲆ.ⲆⵠᐃⲆⲆⵠⲆⲆΔ;
        ᐃΔ[221][Hr.Δⵠⵠ] = ᐃⲆ.ⵠⲆⵠⲆΔⵠᐃⲆΔ;
        ᐃΔ[190] = [];
        ᐃΔ[190][Hr.ΔᐃΔ] = $a(Pd(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        ᐃΔ[190][Hr.Δⵠⵠ] = $a(Pd(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
        ᐃΔ[853] = [ᐃΔ[190]];
        ᐃΔ[853][1] = [];
        ᐃΔ[853][2] = [];
        ᐃΔ[853][1][Hr.ΔᐃΔ] = $a(vd(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        ᐃΔ[853][1][Hr.Δⵠⵠ] = $a(vd(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
        ᐃΔ[853][2][Hr.ΔᐃΔ] = $a(bd(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        ᐃΔ[853][2][Hr.Δⵠⵠ] = $a(bd(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
        ᐃΔ[49] = [];
        ᐃΔ[49][Hr.ΔᐃΔ] = $a(sd(3 - Math.PI / 2, Vm(a * 0.6, Uh, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
        ᐃΔ[49][Hr.Δⵠⵠ] = $a(sd(3 - Math.PI / 2, Vm(a * 0.6, ma, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
        ᐃΔ[728] = [];
        ᐃΔ[728][Hr.ΔᐃΔ] = $a(Od(a * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
        ᐃΔ[728][Hr.Δⵠⵠ] = $a(Od(a * 0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
        ᐃΔ[798] = $a(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 650;
            c.height = a * 650;
            d.scale(1.9, 1.9);
            d.save();
            d.translate(a * 202.5, a * 147.5);
            Zb(d, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
            d.restore();
            $b(d, b[4], b[1], a * 12);
            d.save();
            d.translate(a * 203.5, a * 121.5);
            Zb(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
            d.restore();
            $b(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 203.5, a * 299);
            Zb(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
            d.restore();
            $b(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 298.5, a * 210);
            Zb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            $b(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 108.5, a * 210);
            Zb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            $b(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 204, a * 121.5);
            Zb(d, a * -92, a * -9.5, a * 184, a * 19, a * 10);
            d.restore();
            $b(d, b[3], b[3], a * 10);
            d.save();
            d.translate(a * 197, a * 299);
            Zb(d, a * 85, a * -9, a * -170, a * 18, a * 10);
            d.restore();
            $b(d, b[3], b[3], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 94, a * 317);
            d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
            d.closePath();
            $b(d, undefined, b[1], a * 12);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 279, a * 142);
            d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
            d.closePath();
            $b(d, Nh, b[1], a * 12);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 93, a * 106);
            d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
            d.closePath();
            $b(d, Fa, b[1], a * 12);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 281, a * 282);
            d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
            d.closePath();
            $b(d, undefined, b[1], a * 12);
            return c;
        }(a * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
        ᐃΔ[729] = $a(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 400;
            c.height = a * 400;
            d.save();
            d.translate(a * 202.5, a * 147.5);
            Zb(d, a * -96.5, a * -21.5, a * 193, a * 43, a * 0);
            d.restore();
            $b(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 202.5, a * 190.5);
            Zb(d, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
            d.restore();
            $b(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 202.5, a * 233.5);
            Zb(d, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
            d.restore();
            $b(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 202.5, a * 275);
            Zb(d, a * 96.5, a * -21, a * -193, a * 42, a * 0);
            d.restore();
            $b(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 203.5, a * 121.5);
            Zb(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
            d.restore();
            $b(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 203.5, a * 299);
            Zb(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
            d.restore();
            $b(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 298.5, a * 210);
            Zb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            $b(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 108.5, a * 210);
            Zb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            $b(d, b[0], b[0], a * 12);
            return c;
        }(a * 0.3, ["#BB0000"]));
        ᐃΔ[658] = Ct(1, [{
            f: rp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
        }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        ᐃΔ[150] = Ct(1.5, [{
            f: Xm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#120202", "#750a0a", "#991616", "#120202"]
        }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
        ᐃΔ[669] = _p(a * 0.35, ["#072428", "#67A242", "#67A242"], 0);
        ᐃΔ[670] = _p(a * 0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
        ᐃΔ[671] = _p(a * 0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
        ᐃΔ[672] = _p(a * 0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
        if (ᐃΔΔⲆⲆⵠΔ) {
            ᐃΔ[278] = $a(function (b) {
                var c = document.createElement("canvas");
                var d = c.getContext("2d");
                var e = b * 200;
                var f = b * 180;
                var g = b * 8;
                c.width = e;
                c.height = f;
                d.beginPath();
                Zb(d, 0, 0, e, f - g, g);
                d.globalAlpha = 0.8;
                $b(d, "#1D6055");
                d.globalAlpha = 1;
                var a = qu(b, "Leaderboard", 25, "#FFF");
                d.drawImage(a, (e - a.width) / 2, b * 5);
                return c;
            }(a));
        } else {
            ᐃΔ[278] = $a(function (b) {
                var c = document.createElement("canvas");
                var d = c.getContext("2d");
                var e = b * 200;
                var f = b * 270;
                var g = b * 8;
                c.width = e;
                c.height = f + 20;
                d.beginPath();
                Zb(d, 0, 0, e, f - g, g);
                d.globalAlpha = 0.5;
                $b(d, "#1D6055");
                d.globalAlpha = 1;
                var a = qu(b, "Leaderboard", 25, "#FFF");
                d.drawImage(a, (e - a.width) / 2, b * 5);
                return c;
            }(a));
        }
        if (ᐃΔΔⲆⲆⵠΔ) {
            ᐃΔ[267] = $a(function (b) {
                var c = document.createElement("canvas");
                var d = c.getContext("2d");
                var e = b * 335;
                var f = b * 250;
                var g = b * 120;
                var a = b * 20;
                var i = b * 35;
                var j = b * 65;
                var h = b * 2;
                var k = b * 4;
                c.width = e;
                c.height = g;
                d.beginPath();
                d.translate(0, b * 15);
                Zb(d, j, 0, f, a, h);
                $b(d, null, "#69A148", k);
                d.translate(0, i);
                Zb(d, j, 0, f, a, h);
                $b(d, null, "#AF352A", k);
                d.translate(0, i);
                Zb(d, j, 0, f, a, h);
                $b(d, null, "#669BB1", k);
                return c;
            }(0.75));
        } else {
            ᐃΔ[267] = $a(function (c) {
                var e = document.createElement("canvas");
                var f = e.getContext("2d");
                var g = c * 950;
                var i = c * 180;
                var j = c * 50;
                var a = c * 20;
                var k = c * 240;
                var m = c * 35;
                var h = c * 1;
                var l = c * 4;
                var n = c * 4;
                e.width = g;
                e.height = j;
                f.translate(0, c * 15);
                Zb(f, m, h, i, a, l);
                $b(f, null, "#69A148", n);
                var b = ᐃΔ[669];
                f.drawImage(b, 17, -8);
                f.translate(k, 0);
                Zb(f, m, h, i, a, l);
                $b(f, null, "#AF352A", n);
                b = ᐃΔ[671];
                f.drawImage(b, 17, -9);
                f.translate(k, 0);
                Zb(f, m, h, i, a, l);
                $b(f, null, "#669BB1", n);
                b = ᐃΔ[670];
                f.drawImage(b, 17, -8);
                f.translate(k, 0);
                Zb(f, m, h, i, a, l);
                $b(f, null, "#074A87", n);
                b = ᐃΔ[672];
                f.drawImage(b, 17, -8);
                return e;
            }(a));
        }
        if (ᐃΔΔⲆⲆⵠΔ) {
            ᐃΔ[608] = $a(Ip(0.75));
        } else {
            ᐃΔ[608] = $a(Ip(a));
        }
        ᐃΔ[792] = $a(Jm(a * 0.16, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
        ᐃΔ[537] = $a(sd(5.8, _t(a * 0.15, O, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
        ᐃΔ[283] = [];
        ᐃΔ[465] = [];
        for (b = 0; b < 18; b++) {
            ᐃΔ[465][b] = qu(a, "" + (b + 1), 12, "#FFF");
        }
        ᐃΔ[708] = [];
        ᐃΔ[708].push($a(Dp(a * 0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
        ᐃΔ[708].push($a(Dp(a * 0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
        ᐃΔ[708].push($a(Dp(a * 0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
        ᐃΔ[725] = [];
        ᐃΔ[725].push($a(function (a) {
            var b = document.createElement("canvas");
            var c = b.getContext("2d");
            b.width = a * 321;
            b.height = a * 345;
            c.translate(0, a * 5);
            c.translate(0, a * 20);
            id(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            $b(c, "#322413", "#322413", a * 4);
            c.translate(0, a * -20);
            id(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            $b(c, "#392C16", "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
            c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
            c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
            c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
            c.closePath();
            $b(c, "#12432D");
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
            c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
            c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
            c.closePath();
            $b(c, "#3A2A0D");
            id(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
            $b(c, undefined, "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
            c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
            c.closePath();
            $b(c, hg, "#5E3E1A", a * 12);
            c.translate(0, a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            $b(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            $b(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            $b(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            $b(c, Ih, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            $b(c, Sk, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            $b(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            $b(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            $b(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            $b(c, undefined, "#c7a726", a * 12);
            c.translate(0, a * -8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            $b(c, Vq, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            $b(c, Mq, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            $b(c, Sk, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            $b(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            $b(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            $b(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            $b(c, Vq, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            $b(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            $b(c, cn, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
            c.closePath();
            $b(c, "#704618", "#5D3D1A", a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 96, a * 166);
            c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
            c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
            c.closePath();
            $b(c, "#ECBE35", "#EDCE4F", a * 8);
            id(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
            $b(c, "#392C16", "#5E3E1A", a * 10);
            return b;
        }(a * 0.22)));
        ᐃΔ[725].push($a(function (a) {
            var b = document.createElement("canvas");
            var c = b.getContext("2d");
            b.width = a * 321;
            b.height = a * 345;
            c.translate(0, a * 5);
            c.translate(0, a * 20);
            id(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            $b(c, "#322413", "#322413", a * 4);
            c.translate(0, a * -20);
            id(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            $b(c, "#392C16", "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
            c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
            c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
            c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
            c.closePath();
            $b(c, "#3A2A0D");
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
            c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
            c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
            c.closePath();
            $b(c, "#071A1B");
            id(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
            $b(c, Mq, "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
            c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
            c.closePath();
            $b(c, undefined, "#5E3E1A", a * 12);
            c.translate(0, a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            $b(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            $b(c, Lk, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            $b(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            $b(c, Fa, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            $b(c, Zi, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            $b(c, sl, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            $b(c, hg, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            $b(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            $b(c, Rh, "#281C08", a * 12);
            c.translate(0, a * -8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            $b(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            $b(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            $b(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            $b(c, Ol, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            $b(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            $b(c, sl, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            $b(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            $b(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            $b(c, Io, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 96, a * 166);
            c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
            c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
            c.closePath();
            $b(c, "#704618", "#5D3D1A", a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
            c.closePath();
            $b(c, "#E1DDD5", "#EAE7E4", a * 8);
            id(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
            $b(c, "#392C16", "#5E3E1A", a * 10);
            return b;
        }(a * 0.22)));
        ᐃΔ[726] = $a(function (a) {
            var b = document.createElement("canvas");
            var c = b.getContext("2d");
            b.width = a * 321;
            b.height = a * 345;
            c.translate(0, a * 5);
            id(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
            $b(c, "#C09D6F", "#A37943", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
            c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
            c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
            c.closePath();
            $b(c, "#C09D6F", "#A37943", a * 10);
            c.save();
            c.translate(a * 161.50003051757812, a * 117.90341186523438);
            Zb(c, a * -5.5, a * -37.5, a * 11, a * 75, a * 10);
            c.restore();
            $b(c, "#C09D6F", "#A37943", a * 10);
            c.save();
            c.translate(a * 162.00003051757812, a * 78.90341186523438);
            Zb(c, a * -10, a * -5.5, a * 20, a * 11, a * 1);
            c.restore();
            $b(c, "#C09D6F");
            id(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
            $b(c, "#C09D6F");
            return b;
        }(a * 0.22));
        ᐃΔ[727] = [];
        ᐃΔ[727].push($a(Sd(a * 1.5, ["#795026", "#654320", "#eda80d"], 0)));
        ᐃΔ[727].push($a(Sd(a * 1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
        ᐃΔ[727].push($a(Sd(a * 1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
        ᐃΔ[546] = ᐃⲆ.ΔⵠⲆᐃⵠⲆⵠ;
        ᐃΔ[547] = ᐃⲆ.ᐃΔΔᐃⲆᐃⲆ;
        ᐃΔ[548] = ᐃⲆ.ⲆᐃⵠⵠⵠⲆᐃ;
        ᐃΔ[549] = ᐃⲆ.ⵠⵠΔⵠⵠΔΔ;
        ᐃΔ[517] = qu(a, "Show spectators", 25, "#FFF", Ol, undefined, "#000", 5, 220);
        ᐃΔ[525] = qu(a, "Reconnecting...", 30, "#FFF");
        console.log(undefined, Zi);
    }
    function cp(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 198;
        f.height = b * 147;
        g.globalAlpha = c ? 0.5 : 1;
        g.translate(0, b * 6);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 44, b * 76);
        g.bezierCurveTo(b * 50, b * 82, b * 50, b * 82, b * 56, b * 88);
        g.bezierCurveTo(b * 59, b * 82, b * 59, b * 82, b * 62, b * 76);
        g.bezierCurveTo(b * 59, b * 71, b * 59, b * 71, b * 56, b * 66);
        g.bezierCurveTo(b * 59, b * 69, b * 59, b * 69, b * 62, b * 72);
        g.bezierCurveTo(b * 80, b * 48, b * 102, b * 50, b * 120, b * 62);
        g.bezierCurveTo(b * 127, b * 58, b * 127, b * 58, b * 134, b * 54);
        g.bezierCurveTo(b * 129, b * 60, b * 129, b * 60, b * 124, b * 66);
        g.bezierCurveTo(b * 129, b * 73, b * 129, b * 73, b * 134, b * 80);
        g.bezierCurveTo(b * 140, b * 74, b * 140, b * 74, b * 146, b * 68);
        g.bezierCurveTo(b * 142, b * 76, b * 142, b * 76, b * 138, b * 84);
        g.bezierCurveTo(b * 144, b * 90, b * 142, b * 90, b * 144, b * 90);
        g.bezierCurveTo(b * 136, b * 97, b * 136, b * 97, b * 128, b * 104);
        g.bezierCurveTo(b * 154, b * 110, b * 164, b * 90, b * 160, b * 80);
        g.bezierCurveTo(b * 138, b * 22, b * 148, b * 51, b * 136, b * 22);
        g.bezierCurveTo(b * 97, b * 24, b * 97, b * 24, b * 58, b * 26);
        g.bezierCurveTo(b * 47, b * 54, b * 36, b * 80, b * 36, b * 82);
        g.bezierCurveTo(b * 40, b * 108, b * 54, b * 104, b * 62, b * 104);
        g.bezierCurveTo(b * 46, b * 92, b * 54, b * 97, b * 46, b * 90);
        g.closePath();
        $b(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 36, b * 80);
        g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
        g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
        g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
        g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
        g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
        g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
        g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
        g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
        g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
        g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
        g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
        g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
        g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
        g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
        g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
        g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
        g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
        g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
        g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
        g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
        g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
        g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
        g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
        g.closePath();
        $b(g, d[0]);
        g.globalAlpha = 1;
        g.translate(0, b * -6);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 36, b * 80);
        g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
        g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
        g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
        g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
        g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
        g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
        g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
        g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
        g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
        g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
        g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
        g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
        g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
        g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
        g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
        g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
        g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
        g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
        g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
        g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
        g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
        g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
        g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
        g.closePath();
        $b(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 49, b * 98);
        g.bezierCurveTo(b * 96.5, b * 98, b * 96.5, b * 98, b * 144, b * 98);
        g.bezierCurveTo(b * 136.5, b * 102, b * 136.5, b * 102, b * 129, b * 106);
        g.bezierCurveTo(b * 103, b * 105.5, b * 103, b * 105.5, b * 77, b * 105);
        g.bezierCurveTo(b * 65, b * 105, b * 65, b * 105, b * 53, b * 105);
        g.closePath();
        $b(g, d[1]);
        g.globalAlpha = 0.5;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 54, b * 98);
        g.bezierCurveTo(b * 97, b * 98, b * 97, b * 98, b * 140, b * 98);
        g.bezierCurveTo(b * 134, b * 101, b * 134, b * 101, b * 128, b * 104);
        g.bezierCurveTo(b * 92, b * 104, b * 92, b * 104, b * 56, b * 104);
        g.closePath();
        $b(g, d[0]);
        g.globalAlpha = 1;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 118, b * 47);
        g.bezierCurveTo(b * 124.5, b * 43.5, b * 124.5, b * 43.5, b * 131, b * 40);
        g.bezierCurveTo(b * 128, b * 46, b * 128, b * 46, b * 125, b * 52);
        g.bezierCurveTo(b * 131, b * 57, b * 135, b * 64, b * 139, b * 73);
        g.bezierCurveTo(b * 142.5, b * 69.5, b * 142.5, b * 69.5, b * 146, b * 66);
        g.bezierCurveTo(b * 143.5, b * 72.5, b * 143.5, b * 72.5, b * 141, b * 79);
        g.bezierCurveTo(b * 142, b * 91, b * 141, b * 94, b * 132, b * 98);
        g.bezierCurveTo(b * 117, b * 102, b * 126, b * 108, b * 142, b * 102);
        g.bezierCurveTo(b * 159, b * 98, b * 164, b * 80, b * 162, b * 47);
        g.bezierCurveTo(b * 160, b * 19, b * 150, b * 6, b * 117, b * 4);
        g.bezierCurveTo(b * 44, b * 0, b * 35, b * 20, b * 33, b * 37);
        g.bezierCurveTo(b * 29, b * 69, b * 33, b * 88, b * 44, b * 96);
        g.bezierCurveTo(b * 64, b * 107, b * 70, b * 102, b * 54, b * 93);
        g.bezierCurveTo(b * 49, b * 88, b * 50, b * 82, b * 53, b * 77);
        g.bezierCurveTo(b * 51.5, b * 71, b * 51.5, b * 71, b * 50, b * 65);
        g.bezierCurveTo(b * 53, b * 68.5, b * 53, b * 68.5, b * 56, b * 72);
        g.bezierCurveTo(b * 59, b * 67.5, b * 59, b * 67.5, b * 62, b * 63);
        g.bezierCurveTo(b * 60.5, b * 59.5, b * 60.5, b * 59.5, b * 59, b * 56);
        g.bezierCurveTo(b * 62, b * 57, b * 62, b * 57, b * 65, b * 58);
        g.bezierCurveTo(b * 78, b * 35, b * 103, b * 36, b * 117, b * 47);
        g.closePath();
        $b(g, d[1], d[2], b * 6);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 62, b * 21);
        g.bezierCurveTo(b * 63, b * 34, b * 64, b * 37, b * 66, b * 40);
        g.bezierCurveTo(b * 54, b * 49, b * 53, b * 51, b * 48, b * 58);
        g.bezierCurveTo(b * 44, b * 51, b * 42, b * 43, b * 40, b * 36);
        g.bezierCurveTo(b * 47, b * 28, b * 52, b * 25, b * 61, b * 21);
        g.closePath();
        $b(g, d[4]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 60, b * 29);
        g.bezierCurveTo(b * 62, b * 25, b * 65, b * 24, b * 70, b * 23);
        $b(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 61, b * 37);
        g.bezierCurveTo(b * 63, b * 32, b * 66, b * 32, b * 71, b * 32);
        $b(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 52, b * 31);
        g.bezierCurveTo(b * 50, b * 26, b * 50, b * 25, b * 51, b * 23);
        $b(g, Nh, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 46, b * 35);
        g.bezierCurveTo(b * 44, b * 31, b * 43, b * 29, b * 45, b * 26);
        $b(g, ks, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 58, b * 44);
        g.bezierCurveTo(b * 57, b * 48, b * 57, b * 50, b * 60, b * 52);
        $b(g, cn, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 53, b * 48);
        g.bezierCurveTo(b * 52, b * 52, b * 52, b * 54, b * 55, b * 57);
        $b(g, mr, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 46, b * 41);
        g.bezierCurveTo(b * 41, b * 42, b * 39, b * 45, b * 38, b * 48);
        $b(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 48, b * 48);
        g.bezierCurveTo(b * 42, b * 51, b * 42, b * 53, b * 40, b * 55);
        $b(g, cn, d[3], b * 4);
        if (e == 0) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 99, b * 101);
            g.bezierCurveTo(b * 118.6666259765625, b * 104.33331298828125, b * 124.6666259765625, b * 116.33331298828125, b * 112.6666259765625, b * 114.33331298828125);
            g.bezierCurveTo(b * 104.6666259765625, b * 112.33331298828125, b * 100.6666259765625, b * 105.33331298828125, b * 99.6666259765625, b * 101.33331298828125);
            $b(g, Nh, d[5], b * 6);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 97.6666259765625, b * 101.33331298828125);
            g.bezierCurveTo(b * 81.6666259765625, b * 106.33331298828125, b * 79.6666259765625, b * 114.33331298828125, b * 89.6666259765625, b * 114.33331298828125);
            g.bezierCurveTo(b * 95.6666259765625, b * 111.33331298828125, b * 95.6666259765625, b * 109.33331298828125, b * 98.6666259765625, b * 102.33331298828125);
            $b(g, Lk, d[5], b * 6);
        } else {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 103, b * 100.39999389648438);
            g.bezierCurveTo(b * 120, b * 106.39999389648438, b * 118, b * 107.39999389648438, b * 120, b * 111.39999389648438);
            $b(g, Ol, d[5], b * 6);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 103, b * 100.39999389648438);
            g.bezierCurveTo(b * 90, b * 103.39999389648438, b * 89, b * 106.39999389648438, b * 87, b * 112.39999389648438);
            $b(g, Io, d[5], b * 6);
            id(g, b * 86, b * 114.39999389648438, b * 4.5);
            $b(g, d[1], d[5], b * 6);
            id(g, b * 121, b * 114.39999389648438, b * 4.5);
            $b(g, d[1], d[5], b * 6);
        }
        return f;
    }
    function mp(b, c, d) {
        const e = (2531011 + (b + 11845) * 214013) % 4294967296;
        const f = (1 + (c + 585) * 22695477) % 4294967296;
        const g = ~(d & 38362) & 38362 | ~(d & 38362) & d;
        const a = Mn(e, f, g, e);
        Zq(f, g, e, f);
        return ~(a & 43781) & a | ~(a & 43781) & 43781;
    }
    function pp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 160;
        d.height = a * 161;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 80.5, a * 78);
        Zb(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
        e.restore();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 80.5, a * 78);
        Zb(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
        e.restore();
        $b(e, c[1], c[2], a * 6);
        e.save();
        e.translate(a * 80, a * 78.5);
        Zb(e, a * -17, a * -72.5, a * 34, a * 145, a * 10);
        e.restore();
        $b(e, c[3], c[4], a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 80, a * 79.5);
        Zb(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
        e.restore();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 80, a * 79.5);
        Zb(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
        e.restore();
        $b(e, c[3], c[4], a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 71);
        e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
        e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
        e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84, a * 78);
        e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
        e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
        e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 73);
        e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
        e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
        e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 83);
        e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
        e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
        e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 71);
        e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
        e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
        e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
        e.closePath();
        $b(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84, a * 78);
        e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
        e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
        e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
        e.closePath();
        $b(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 73);
        e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
        e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
        e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
        e.closePath();
        $b(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 83);
        e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
        e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
        e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
        e.closePath();
        $b(e, c[3], c[4], a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 78.5, a * 78);
        Zb(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
        e.restore();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 78.5, a * 78);
        Zb(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
        e.restore();
        $b(e, c[3], c[4], a * 6);
        return d;
    }
    function Cp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.translate(0, a * 15);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        $b(e, Sk, c[0], a * 11);
        e.translate(0, a * -5);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103, a * 154);
        e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
        e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
        e.closePath();
        $b(e, c[3], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        $b(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 182, a * 185);
        e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
        e.closePath();
        $b(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222, a * 287);
        e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
        e.closePath();
        $b(e, Qr, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 290);
        e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
        e.closePath();
        $b(e, c[1], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 184);
        e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
        e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
        e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
        e.closePath();
        $b(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 251, a * 276);
        e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
        e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
        e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
        e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
        e.closePath();
        $b(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        $b(e, undefined, c[2], a * 11);
        return d;
    }
    function Tp() {
        var b = Cx.time;
        if (ᐃΔ[285]) {
            ao.drawImage(ᐃΔ[285][b][1], oo + 480, to + 190);
            ao.drawImage(ᐃΔ[285][b][2], oo + 180, to - 430);
            ao.drawImage(ᐃΔ[285][b][1], oo - 855, to + 100);
            ao.drawImage(ᐃΔ[285][b][0], oo - 550, to - 300);
            ao.drawImage(ᐃΔ[285][b][0], oo - 1020, to - 520);
        }
        if (ᐃΔ[108]) {
            ao.drawImage(ᐃΔ[108][b][1], oo - 80, to - 640);
            ao.drawImage(ᐃΔ[108][b][1], oo + 80, to + 490);
            ao.drawImage(ᐃΔ[108][b][2], oo - 180, to - 700);
            ao.drawImage(ᐃΔ[108][b][0], oo + 550, to + 100);
            ao.drawImage(ᐃΔ[108][b][1], oo + 450, to + 300);
            ao.drawImage(ᐃΔ[108][b][1], oo + 780, to + 300);
            ao.drawImage(ᐃΔ[108][b][2], oo + 980, to + 200);
            ao.drawImage(ᐃΔ[108][b][2], oo + 680, to + 600);
            ao.drawImage(ᐃΔ[108][b][2], oo - 380, to + 100);
            ao.drawImage(ᐃΔ[108][b][2], oo + 280, to + 250);
        }
        if (ᐃΔ[110]) {
            ao.drawImage(ᐃΔ[110][b][0], oo - 590, to);
            ao.drawImage(ᐃΔ[110][b][0], oo + 120, to - 390);
            ao.drawImage(ᐃΔ[110][b][0], oo - 270, to + 340);
        }
        if (ᐃΔ[109]) {
            ao.drawImage(ᐃΔ[109][b][4], oo - 700, to - 600);
            ao.drawImage(ᐃΔ[109][b][2], oo - 970, to - 250);
            ao.drawImage(ᐃΔ[109][b][5], oo - 720, to - 200);
            ao.drawImage(ᐃΔ[109][b][2], oo - 1020, to + 340);
            ao.drawImage(ᐃΔ[109][b][0], oo - 1120, to - 0);
            ao.drawImage(ᐃΔ[109][b][1], oo - 650, to - 330);
            ao.drawImage(ᐃΔ[109][b][4], oo - 495, to - 90);
            ao.drawImage(ᐃΔ[109][b][3], oo - 520, to + 340);
            ao.drawImage(ᐃΔ[109][b][2], oo + 830, to - 520);
        }
        ᐃΔ[413];
        if (Ex && Dx) {
            var c = Ex.ⵠⵠⵠ.x;
            var d = Ex.ⵠⵠⵠ.y;
            Ex.ⵠⵠⵠ.x = oo;
            Ex.ⵠⵠⵠ.y = to;
            var e = Dx.time;
            Dx.time = Cx.time;
            var f;
            var g = Cx.items;
            g[2].x = 400;
            g[2].y = 100;
            g[2].ⵠⲆⲆⵠ(114);
            (f = g[1]).x = -500;
            f.y = 100;
            f.ⵠᐃⲆⲆ[0].x = f.x - 20.5;
            f.ⵠᐃⲆⲆ[0].y = f.y - 22.5;
            f.ⵠᐃⲆⲆ[1].x = f.x - 35.5;
            f.ⵠᐃⲆⲆ[1].y = f.y + 7.5;
            f.ⵠᐃⲆⲆ[2].x = f.x + 7.5;
            f.ⵠᐃⲆⲆ[2].y = f.y - 30;
            f.ⵠᐃⲆⲆ[3].x = f.x + 22.5;
            f.ⵠᐃⲆⲆ[3].y = f.y;
            f.ⵠᐃⲆⲆ[4].x = f.x - 7.5;
            f.ⵠᐃⲆⲆ[4].y = f.y + 14.5;
            for (var a = 0; f.info > a; a++) {
                f.ⵠᐃⲆⲆ[a].ⵠⲆⲆⵠ(294);
            }
            (f = g[3]).x = 210;
            f.y = -290;
            f.ⵠᐃⲆⲆ[0].x = f.x - 20.5;
            f.ⵠᐃⲆⲆ[0].y = f.y - 22.5;
            f.ⵠᐃⲆⲆ[1].x = f.x - 35.5;
            f.ⵠᐃⲆⲆ[1].y = f.y + 7.5;
            f.ⵠᐃⲆⲆ[2].x = f.x + 7.5;
            f.ⵠᐃⲆⲆ[2].y = f.y - 30;
            f.ⵠᐃⲆⲆ[3].x = f.x + 22.5;
            f.ⵠᐃⲆⲆ[3].y = f.y;
            f.ⵠᐃⲆⲆ[4].x = f.x - 7.5;
            f.ⵠᐃⲆⲆ[4].y = f.y + 14.5;
            for (a = 0; a < f.info; a++) {
                f.ⵠᐃⲆⲆ[a].ⵠⲆⲆⵠ(294);
            }
            g[0].x = 450;
            g[0].y = -100;
            g[0].ⲆⲆᐃⵠⵠ(113);
            g[0].ᐃᐃᐃᐃⲆ();
            Ex.ⵠⵠⵠ.x = c;
            Ex.ⵠⵠⵠ.y = d;
            Dx.time = e;
        }
    }
    function fp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 247;
        d.height = a * 247;
        e.translate(0, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 62);
        e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
        e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 164, a * 171);
        e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
        e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 132, a * 95);
        e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
        e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
        e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
        e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
        e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
        e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
        e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
        e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
        e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
        e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
        e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
        e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
        e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
        e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
        e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
        e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
        e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
        e.closePath();
        $b(e, c[0]);
        e.translate(0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 62);
        e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
        e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
        e.closePath();
        $b(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 164, a * 171);
        e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
        e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
        e.closePath();
        $b(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 132, a * 95);
        e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
        e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
        e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
        e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
        e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
        e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
        e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
        e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
        e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
        e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
        e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
        e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
        e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
        e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
        e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
        e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
        e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
        e.closePath();
        $b(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 137);
        e.bezierCurveTo(a * 145, a * 125, a * 138, a * 108, a * 123, a * 104);
        e.bezierCurveTo(a * 81, a * 101, a * 88, a * 77, a * 98, a * 65);
        e.bezierCurveTo(a * 117, a * 38, a * 138, a * 39, a * 165, a * 52);
        e.bezierCurveTo(a * 197, a * 72, a * 207, a * 111, a * 197, a * 140);
        e.bezierCurveTo(a * 182, a * 180, a * 161, a * 197, a * 112, a * 194);
        e.bezierCurveTo(a * 58, a * 194, a * 37, a * 170, a * 34, a * 142);
        e.bezierCurveTo(a * 29, a * 102, a * 40, a * 63, a * 51, a * 45);
        e.bezierCurveTo(a * 43, a * 78, a * 41, a * 103, a * 43, a * 122);
        e.bezierCurveTo(a * 51, a * 158, a * 63, a * 174, a * 95, a * 179);
        e.bezierCurveTo(a * 129, a * 186, a * 169, a * 172, a * 177, a * 144);
        e.bezierCurveTo(a * 197, a * 105, a * 172, a * 76, a * 160, a * 71);
        e.bezierCurveTo(a * 125, a * 52, a * 111, a * 73, a * 111, a * 81);
        e.bezierCurveTo(a * 106, a * 93, a * 140, a * 92, a * 147, a * 107);
        e.bezierCurveTo(a * 153, a * 128, a * 140, a * 135, a * 137, a * 139);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 132, a * 95);
        e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
        e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
        e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
        e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
        e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
        e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
        e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
        e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
        e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
        e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
        e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
        e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
        e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
        e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
        e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
        e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
        e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
        e.closePath();
        $b(e, $e, c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 63);
        e.bezierCurveTo(a * 91, a * 64, a * 96, a * 62, a * 98, a * 53);
        e.bezierCurveTo(a * 91, a * 45, a * 85, a * 42, a * 78, a * 41);
        e.bezierCurveTo(a * 81, a * 51, a * 82, a * 57, a * 82, a * 63);
        e.closePath();
        $b(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 148, a * 40);
        e.bezierCurveTo(a * 140, a * 52, a * 131, a * 51, a * 123, a * 43);
        e.bezierCurveTo(a * 123, a * 25, a * 129, a * 17, a * 134, a * 12);
        e.bezierCurveTo(a * 138, a * 35, a * 142, a * 31, a * 148, a * 40);
        e.closePath();
        $b(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 189, a * 43);
        e.bezierCurveTo(a * 191, a * 54, a * 196, a * 58, a * 205, a * 59);
        e.bezierCurveTo(a * 211, a * 42, a * 214, a * 37, a * 216, a * 31);
        e.bezierCurveTo(a * 202, a * 34, a * 195, a * 39, a * 190, a * 43);
        e.closePath();
        $b(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 216, a * 98);
        e.bezierCurveTo(a * 219, a * 105, a * 225, a * 107, a * 230, a * 109);
        e.bezierCurveTo(a * 227, a * 113, a * 221, a * 115, a * 215, a * 115);
        e.bezierCurveTo(a * 208, a * 109, a * 211, a * 101, a * 216, a * 98);
        e.closePath();
        $b(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 180, a * 85);
        e.bezierCurveTo(a * 193, a * 86, a * 196, a * 98, a * 191, a * 108);
        e.bezierCurveTo(a * 179, a * 112, a * 167, a * 113, a * 155, a * 111);
        e.bezierCurveTo(a * 169, a * 100, a * 176, a * 96, a * 180, a * 85);
        e.closePath();
        $b(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96, a * 114);
        e.bezierCurveTo(a * 102, a * 109, a * 112, a * 110, a * 114, a * 118);
        e.bezierCurveTo(a * 111, a * 134, a * 102, a * 143, a * 95, a * 147);
        e.bezierCurveTo(a * 98, a * 123, a * 97, a * 119, a * 96, a * 115);
        e.closePath();
        $b(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 92);
        e.bezierCurveTo(a * 86, a * 95, a * 89, a * 102, a * 83, a * 111);
        e.bezierCurveTo(a * 70, a * 110, a * 61, a * 107, a * 54, a * 100);
        e.bezierCurveTo(a * 70, a * 97, a * 70, a * 95, a * 78, a * 92);
        e.closePath();
        $b(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 130);
        e.bezierCurveTo(a * 37, a * 141, a * 41, a * 143, a * 48, a * 144);
        e.bezierCurveTo(a * 54, a * 134, a * 55, a * 131, a * 56, a * 123);
        e.bezierCurveTo(a * 47, a * 129, a * 43, a * 129, a * 39, a * 129);
        e.closePath();
        $b(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 113, a * 189);
        e.bezierCurveTo(a * 119, a * 201, a * 127, a * 198, a * 134, a * 192);
        e.bezierCurveTo(a * 128, a * 175, a * 128, a * 173, a * 128, a * 165);
        e.bezierCurveTo(a * 117, a * 176, a * 116, a * 182, a * 113, a * 187);
        e.closePath();
        $b(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 74, a * 154);
        e.bezierCurveTo(a * 76, a * 163, a * 76, a * 170, a * 75, a * 177);
        e.bezierCurveTo(a * 68, a * 179, a * 66, a * 176, a * 63, a * 171);
        e.bezierCurveTo(a * 69, a * 164, a * 72, a * 159, a * 74, a * 154);
        e.closePath();
        $b(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 206, a * 152);
        e.bezierCurveTo(a * 198, a * 158, a * 198, a * 166, a * 201, a * 171);
        e.bezierCurveTo(a * 209, a * 170, a * 221, a * 170, a * 226, a * 172);
        e.bezierCurveTo(a * 219, a * 159, a * 210, a * 155, a * 207, a * 153);
        e.closePath();
        $b(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 181, a * 184);
        e.bezierCurveTo(a * 170, a * 184, a * 167, a * 187, a * 163, a * 195);
        e.bezierCurveTo(a * 171, a * 207, a * 183, a * 214, a * 191, a * 217);
        e.bezierCurveTo(a * 183, a * 204, a * 184, a * 196, a * 181, a * 184);
        e.closePath();
        $b(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 66, a * 199);
        e.bezierCurveTo(a * 73, a * 197, a * 78, a * 199, a * 79, a * 206);
        e.bezierCurveTo(a * 71, a * 216, a * 67, a * 221, a * 57, a * 223);
        e.closePath();
        $b(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 182, a * 143);
        e.bezierCurveTo(a * 183, a * 146, a * 183, a * 149, a * 179, a * 152);
        e.bezierCurveTo(a * 174, a * 146, a * 174, a * 146, a * 169, a * 140);
        e.closePath();
        $b(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 159);
        e.bezierCurveTo(a * 45, a * 160, a * 48, a * 164, a * 45, a * 175);
        e.bezierCurveTo(a * 28, a * 183, a * 25, a * 184, a * 19, a * 184);
        e.bezierCurveTo(a * 30, a * 170, a * 29, a * 164, a * 31, a * 160);
        e.closePath();
        $b(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 214);
        e.bezierCurveTo(a * 106, a * 212, a * 104, a * 213, a * 102, a * 218);
        e.bezierCurveTo(a * 104, a * 220, a * 107, a * 222, a * 110, a * 224);
        e.bezierCurveTo(a * 110.5, a * 219, a * 110.5, a * 219, a * 111, a * 214);
        e.closePath();
        $b(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 40, a * 52);
        e.bezierCurveTo(a * 41, a * 57, a * 40, a * 61, a * 34, a * 60);
        e.bezierCurveTo(a * 31.5, a * 55, a * 31.5, a * 55, a * 29, a * 50);
        e.bezierCurveTo(a * 34, a * 50.5, a * 34, a * 50.5, a * 39, a * 51);
        e.closePath();
        $b(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 81);
        e.bezierCurveTo(a * 37, a * 84, a * 38, a * 90, a * 34, a * 99);
        e.bezierCurveTo(a * 23, a * 97, a * 19, a * 96, a * 16, a * 93);
        e.bezierCurveTo(a * 24, a * 88, a * 28, a * 85, a * 30, a * 81);
        e.closePath();
        $b(e, c[4], c[5], a * 5);
        return d;
    }
    function zp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 144;
        d.height = a * 280;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 62, a * 103.79999542236328);
        e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
        e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
        e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
        e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
        e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
        e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
        e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
        e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
        e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
        e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
        e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
        e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
        e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
        e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
        e.closePath();
        $b(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 62, a * 103.79999542236328);
        e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
        e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
        e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
        e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
        e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
        e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
        e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
        e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
        e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
        e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
        e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
        e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
        e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
        e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
        e.closePath();
        $b(e, c[1], c[2], a * 6);
        return d;
    }
    function yp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.translate(0, a * 15);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        $b(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        $b(e, ks, c[0], a * 11);
        e.translate(0, a * -5);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103, a * 154);
        e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
        e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
        e.closePath();
        $b(e, c[3], c[2], a * 12);
        e.translate(0, a * 25);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103, a * 154);
        e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
        e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
        e.closePath();
        $b(e, c[5]);
        e.translate(0, a * -25);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        $b(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 182, a * 185);
        e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
        e.closePath();
        $b(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222, a * 287);
        e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
        e.closePath();
        $b(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 290);
        e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
        e.closePath();
        $b(e, c[1], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 184);
        e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
        e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
        e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
        e.closePath();
        $b(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 251, a * 276);
        e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
        e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
        e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
        e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
        e.closePath();
        $b(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        $b(e, lh, c[2], a * 11);
        return d;
    }
    function wp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 465;
        d.height = a * 405;
        e.globalAlpha = 1;
        e.translate(a * 6, a * 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39.000030517578125, a * 162.03977966308594);
        e.bezierCurveTo(a * 125.00003051757812, a * 84.03977966308594, a * 108.50003051757812, a * 115.03977966308594, a * 178.00003051757812, a * 68.03977966308594);
        e.bezierCurveTo(a * 299.0000305175781, a * 146.53977966308594, a * 299.0000305175781, a * 146.53977966308594, a * 420.0000305175781, a * 225.03977966308594);
        e.bezierCurveTo(a * 400.0000305175781, a * 288.53977966308594, a * 400.0000305175781, a * 288.53977966308594, a * 380.0000305175781, a * 352.03977966308594);
        e.bezierCurveTo(a * 216.50003051757812, a * 345.53977966308594, a * 216.50003051757812, a * 345.53977966308594, a * 53.000030517578125, a * 339.03977966308594);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
        e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
        e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
        e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
        e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
        e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
        e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
        e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
        e.closePath();
        $b(e, c[0], c[1], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17.000030517578125, a * 149.94886779785156);
        e.bezierCurveTo(a * 76.00003051757812, a * 67.94886779785156, a * 177.00003051757812, a * 40.94886779785156, a * 232.00003051757812, a * 45.94886779785156);
        e.bezierCurveTo(a * 316.0000305175781, a * 46.94886779785156, a * 359.0000305175781, a * 74.94886779785156, a * 428.0000305175781, a * 145.94886779785156);
        e.bezierCurveTo(a * 414.0000305175781, a * 73.94886779785156, a * 386.0000305175781, a * 68.94886779785156, a * 359.0000305175781, a * 43.94886779785156);
        e.bezierCurveTo(a * 295.0000305175781, a * 5.9488677978515625, a * 239.00003051757812, a * 10.948867797851562, a * 207.00003051757812, a * 10.948867797851562);
        e.bezierCurveTo(a * 121.00003051757812, a * 20.948867797851562, a * 104.00003051757812, a * 34.94886779785156, a * 45.000030517578125, a * 84.94886779785156);
        e.bezierCurveTo(a * 14.000030517578125, a * 128.94886779785156, a * 18.000030517578125, a * 142.94886779785156, a * 16.000030517578125, a * 151.94886779785156);
        e.closePath();
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
        e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
        e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
        e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
        e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
        e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
        e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
        e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
        e.closePath();
        $b(e, Fa, c[1], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60.000030517578125, a * 288.03977966308594);
        e.bezierCurveTo(a * 183.00003051757812, a * 320.03977966308594, a * 342.0000305175781, a * 306.03977966308594, a * 399.0000305175781, a * 286.03977966308594);
        e.bezierCurveTo(a * 420.0000305175781, a * 345.03977966308594, a * 410.0000305175781, a * 335.03977966308594, a * 415.0000305175781, a * 362.03977966308594);
        e.bezierCurveTo(a * 351.0000305175781, a * 384.03977966308594, a * 299.0000305175781, a * 389.03977966308594, a * 215.00003051757812, a * 391.03977966308594);
        e.bezierCurveTo(a * 128.00003051757812, a * 388.03977966308594, a * 69.00003051757812, a * 373.03977966308594, a * 39.000030517578125, a * 359.03977966308594);
        e.closePath();
        $b(e, c[0], c[1], a * 13);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 47.000030517578125, a * 327.03977966308594);
        e.bezierCurveTo(a * 203.00003051757812, a * 377.03977966308594, a * 331.0000305175781, a * 349.03977966308594, a * 410.0000305175781, a * 330.03977966308594);
        e.closePath();
        $b(e, c[0], c[1], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9.000030517578125, a * 339.1306915283203);
        e.bezierCurveTo(a * 2.000030517578125, a * 280.1306915283203, a * 30.000030517578125, a * 219.1306915283203, a * 85.00003051757812, a * 167.1306915283203);
        e.bezierCurveTo(a * 174.00003051757812, a * 82.13069152832031, a * 241.00003051757812, a * 101.13069152832031, a * 284.0000305175781, a * 115.13069152832031);
        e.bezierCurveTo(a * 333.0000305175781, a * 134.1306915283203, a * 376.0000305175781, a * 177.1306915283203, a * 410.0000305175781, a * 247.1306915283203);
        e.bezierCurveTo(a * 439.0000305175781, a * 300.1306915283203, a * 442.0000305175781, a * 346.1306915283203, a * 430.0000305175781, a * 363.1306915283203);
        e.bezierCurveTo(a * 418.0000305175781, a * 366.1306915283203, a * 395.0000305175781, a * 295.1306915283203, a * 355.0000305175781, a * 223.1306915283203);
        e.bezierCurveTo(a * 299.0000305175781, a * 156.1306915283203, a * 262.0000305175781, a * 155.1306915283203, a * 215.00003051757812, a * 159.1306915283203);
        e.bezierCurveTo(a * 133.00003051757812, a * 171.1306915283203, a * 120.00003051757812, a * 193.1306915283203, a * 96.00003051757812, a * 221.1306915283203);
        e.bezierCurveTo(a * 49.000030517578125, a * 262.1306915283203, a * 47.000030517578125, a * 306.1306915283203, a * 38.000030517578125, a * 336.1306915283203);
        e.bezierCurveTo(a * 30.000030517578125, a * 349.1306915283203, a * 30.000030517578125, a * 349.1306915283203, a * 22.000030517578125, a * 362.1306915283203);
        e.closePath();
        $b(e, c[2], c[1], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 228.00003051757812, a * 128.03977966308594);
        e.bezierCurveTo(a * 315.0000305175781, a * 131.03977966308594, a * 349.0000305175781, a * 178.03977966308594, a * 386.0000305175781, a * 234.03977966308594);
        e.bezierCurveTo(a * 444.0000305175781, a * 329.03977966308594, a * 446.0000305175781, a * 354.03977966308594, a * 427.0000305175781, a * 373.03977966308594);
        e.bezierCurveTo(a * 389.0000305175781, a * 389.03977966308594, a * 399.0000305175781, a * 329.03977966308594, a * 361.0000305175781, a * 277.03977966308594);
        e.bezierCurveTo(a * 306.0000305175781, a * 191.03977966308594, a * 266.0000305175781, a * 183.03977966308594, a * 220.00003051757812, a * 181.03977966308594);
        e.bezierCurveTo(a * 138.00003051757812, a * 184.03977966308594, a * 123.00003051757812, a * 212.03977966308594, a * 89.00003051757812, a * 271.03977966308594);
        e.bezierCurveTo(a * 52.000030517578125, a * 349.03977966308594, a * 68.00003051757812, a * 364.03977966308594, a * 33.000030517578125, a * 369.03977966308594);
        e.bezierCurveTo(a * 6.000030517578125, a * 366.03977966308594, a * 5.000030517578125, a * 341.03977966308594, a * 26.000030517578125, a * 288.03977966308594);
        e.bezierCurveTo(a * 60.000030517578125, a * 207.03977966308594, a * 100.00003051757812, a * 180.03977966308594, a * 113.00003051757812, a * 170.03977966308594);
        e.bezierCurveTo(a * 159.00003051757812, a * 132.03977966308594, a * 196.00003051757812, a * 133.03977966308594, a * 226.00003051757812, a * 129.03977966308594);
        e.closePath();
        $b(e, c[0], c[1], a * 20);
        return d;
    }
    function Pp(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 253;
        c.height = a * 192;
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 42, a * 99);
        d.globalAlpha = 0.5;
        Zb(d, a * -7, a * -20, a * 14, a * 39, a * 20);
        d.restore();
        $b(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 37, a * 94);
        Zb(d, a * -7, a * -20, a * 14, a * 37, a * 20);
        d.restore();
        $b(d, b[2]);
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 136, a * 99);
        d.globalAlpha = 0.5;
        Zb(d, a * -84, a * -67, a * 168, a * 134, a * 20);
        d.restore();
        $b(d, b[0], b[0], a * 13);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 131, a * 94);
        Zb(d, a * -84, a * -67, a * 168, a * 134, a * 20);
        d.restore();
        $b(d, b[2], b[2], a * 13);
        d.save();
        d.translate(a * 131, a * 94);
        Zb(d, a * -76, a * -61, a * 152, a * 122, a * 20);
        d.restore();
        $b(d, b[3], b[1], a * 8);
        d.save();
        d.translate(a * 168.5, a * 93.5);
        Zb(d, a * -30.5, a * -58.5, a * 61, a * 117, a * 20);
        d.restore();
        $b(d, b[3], b[4], a * 6);
        d.save();
        d.translate(a * 93.5, a * 95.5);
        Zb(d, a * -32, a * -59.5, a * 59, a * 119, a * 20);
        d.restore();
        $b(d, b[3], b[4], a * 6);
        d.save();
        d.translate(a * 130.5, a * 94);
        Zb(d, a * -36, a * -67, a * 73, a * 134, a * 20);
        d.restore();
        $b(d, b[3], b[2], a * 8);
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 133, a * 97);
        Zb(d, a * -83, a * -12, a * 160, a * 24, a * 0);
        d.restore();
        $b(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 133, a * 92);
        Zb(d, a * -83, a * -12, a * 160, a * 24, a * 0);
        d.restore();
        $b(d, b[2]);
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 228, a * 99.5);
        d.globalAlpha = 0.5;
        Zb(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
        d.restore();
        $b(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 223, a * 94.5);
        Zb(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
        d.restore();
        $b(d, b[2]);
        d.save();
        d.translate(a * 133.5, a * 175.5);
        d.globalAlpha = 0.5;
        Zb(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
        d.restore();
        $b(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 128.5, a * 170.5);
        Zb(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
        d.restore();
        $b(d, b[2]);
        return c;
    }
    function kp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 465;
        d.height = a * 310;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126, a * 192);
        e.bezierCurveTo(a * 198, a * 202, a * 245, a * 203, a * 335, a * 194);
        e.bezierCurveTo(a * 336, a * 232, a * 326, a * 235, a * 232, a * 237);
        e.bezierCurveTo(a * 161, a * 235, a * 122, a * 235, a * 126, a * 193);
        e.closePath();
        $b(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 146, a * 239);
        e.bezierCurveTo(a * 174, a * 74, a * 287, a * 88, a * 320, a * 240);
        e.bezierCurveTo(a * 329, a * 231, a * 340, a * 219, a * 332, a * 115);
        e.bezierCurveTo(a * 330, a * 40, a * 144, a * 30, a * 129, a * 116);
        e.bezierCurveTo(a * 124, a * 217, a * 124, a * 228, a * 143, a * 237);
        e.closePath();
        $b(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126, a * 193);
        e.bezierCurveTo(a * 173, a * 94, a * 209, a * 100, a * 228, a * 57);
        e.bezierCurveTo(a * 190, a * 112, a * 165, a * 115, a * 127, a * 184);
        e.closePath();
        $b(e, $e, c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 230, a * 57);
        e.bezierCurveTo(a * 266, a * 117, a * 310, a * 130, a * 332, a * 183);
        e.bezierCurveTo(a * 290, a * 112, a * 262, a * 109, a * 230, a * 56);
        e.closePath();
        $b(e, undefined, c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154, a * 212);
        e.bezierCurveTo(a * 208, a * 224, a * 252, a * 219, a * 305, a * 212);
        e.bezierCurveTo(a * 267, a * 219, a * 204, a * 222, a * 155, a * 212);
        e.closePath();
        $b(e, ks, c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 239, a * 59);
        e.bezierCurveTo(a * 302, a * 72, a * 325, a * 84, a * 326, a * 115);
        e.bezierCurveTo(a * 289, a * 80, a * 270, a * 88, a * 253, a * 78);
        e.closePath();
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 216, a * 61);
        e.bezierCurveTo(a * 209, a * 70, a * 209, a * 70, a * 202, a * 79);
        e.bezierCurveTo(a * 173, a * 87, a * 162, a * 91, a * 137, a * 107);
        e.bezierCurveTo(a * 153, a * 78, a * 174, a * 67, a * 212, a * 62);
        e.closePath();
        $b(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 175, a * 125);
        e.bezierCurveTo(a * 218, a * 94, a * 238, a * 90, a * 281, a * 125);
        e.bezierCurveTo(a * 245, a * 89, a * 240, a * 80, a * 228, a * 67);
        e.bezierCurveTo(a * 207, a * 100, a * 192, a * 104, a * 177, a * 123);
        e.closePath();
        $b(e, c[2]);
        return d;
    }
    const Ap = String.fromCharCode;
    const xp = Ap(101);
    const Jp = Ap(118);
    const Mp = Ap(97);
    const Bp = Ap(108);
    function Dp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 573;
        d.height = a * 350;
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 336, a * 72);
            e.bezierCurveTo(a * 366, a * 15, a * 426, a * 36, a * 497, a * 83);
            e.bezierCurveTo(a * 522, a * 85, a * 522, a * 85, a * 547, a * 87);
            e.bezierCurveTo(a * 476.5, a * 205, a * 476.5, a * 205, a * 406, a * 323);
            e.bezierCurveTo(a * 297.5, a * 319, a * 297.5, a * 319, a * 189, a * 315);
            e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 243);
            e.bezierCurveTo(a * 92, a * 140, a * 92, a * 140, a * 162, a * 37);
            e.bezierCurveTo(a * 173, a * 39, a * 173, a * 39, a * 184, a * 41);
            e.bezierCurveTo(a * 185, a * 38.5, a * 185, a * 38.5, a * 186, a * 36);
            e.bezierCurveTo(a * 323, a * 13, a * 322, a * 25, a * 337, a * 74);
            e.closePath();
            $b(e, b[4], b[4], a * 35);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 168, a * 42);
        e.bezierCurveTo(a * 255, a * 60, a * 255, a * 60, a * 342, a * 78);
        e.bezierCurveTo(a * 443, a * 81.5, a * 443, a * 81.5, a * 544, a * 85);
        e.bezierCurveTo(a * 475, a * 204.5, a * 475, a * 204.5, a * 406, a * 324);
        e.bezierCurveTo(a * 297.5, a * 320, a * 297.5, a * 320, a * 189, a * 316);
        e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 242);
        e.closePath();
        $b(e, b[0], b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 188, a * 41);
        e.bezierCurveTo(a * 308, a * 15, a * 325, a * 18, a * 337, a * 66);
        e.bezierCurveTo(a * 191, a * 305, a * 196, a * 286, a * 184, a * 307);
        e.bezierCurveTo(a * 175, a * 250, a * 90, a * 254, a * 52, a * 241);
        e.closePath();
        $b(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 336, a * 71);
        e.bezierCurveTo(a * 375, a * 8, a * 429, a * 50, a * 518, a * 92);
        e.bezierCurveTo(a * 455, a * 199.5, a * 455, a * 199.5, a * 392, a * 307);
        e.bezierCurveTo(a * 227, a * 301, a * 261, a * 255, a * 188, a * 308);
        e.closePath();
        $b(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 357, a * 76);
        e.bezierCurveTo(a * 390, a * 67, a * 414, a * 86, a * 435, a * 104);
        e.bezierCurveTo(a * 417, a * 135, a * 417, a * 135, a * 399, a * 166);
        e.bezierCurveTo(a * 352, a * 140, a * 345, a * 139, a * 319, a * 142);
        e.closePath();
        $b(e, b[3], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 309, a * 168);
        e.bezierCurveTo(a * 345, a * 163, a * 372, a * 180, a * 412, a * 203);
        $b(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 263, a * 54);
        e.bezierCurveTo(a * 305, a * 44, a * 307, a * 51, a * 311, a * 64);
        e.bezierCurveTo(a * 270.5, a * 129.5, a * 270.5, a * 129.5, a * 230, a * 195);
        e.bezierCurveTo(a * 221, a * 175, a * 203, a * 171, a * 186, a * 172);
        e.closePath();
        $b(e, b[3], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 292, a * 198);
        e.bezierCurveTo(a * 328, a * 191, a * 364, a * 211, a * 401, a * 237);
        $b(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 245, a * 68);
        e.bezierCurveTo(a * 210, a * 72, a * 210, a * 72, a * 189, a * 69);
        $b(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222, a * 96);
        e.bezierCurveTo(a * 196, a * 97, a * 193, a * 97, a * 177, a * 92);
        $b(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 207, a * 124);
        e.bezierCurveTo(a * 179, a * 123, a * 177, a * 124, a * 161, a * 119);
        $b(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 183);
        e.bezierCurveTo(a * 184, a * 185, a * 203, a * 198, a * 219, a * 221);
        $b(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 213);
        e.bezierCurveTo(a * 161, a * 214, a * 193, a * 227, a * 201, a * 249);
        $b(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 399, a * 257);
        e.bezierCurveTo(a * 287, a * 215, a * 280, a * 215, a * 263, a * 222);
        e.bezierCurveTo(a * 253, a * 238, a * 247, a * 245, a * 243, a * 254);
        e.bezierCurveTo(a * 267, a * 236, a * 292, a * 263, a * 377, a * 284);
        $b(e, b[3], b[3], a * 12);
        return d;
    }
    function Ip(b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 600;
        var f = b * 22;
        var g = b * 4;
        var a = b * 4;
        c.width = e;
        c.height = f;
        Zb(d, b * 5, b * 5, e - b * 10, f - b * 10, g);
        $b(d, null, "#BBE8EF", a);
        return c;
    }
    var Sp = Hf.console;
    function Qp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 316;
        d.height = a * 365;
        e.save();
        e.translate(a * 156.07142639160156, a * 51.81248474121094);
        e.rotate(0);
        Zb(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
        e.restore();
        $b(e, c[1], c[2], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
        e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
        e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
        e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
        e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
        e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
        e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
        e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
        e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
        e.closePath();
        $b(e, undefined, c[5], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
        e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
        e.closePath();
        $b(e, undefined, c[6], a * 15);
        return d;
    }
    function _p(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 109;
        d.height = a * 110;
        id(e, a * 54.5, a * 55, a * 48.038209575038294);
        $b(e, b[0], b[1], a * 8);
        if (c == 0) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 54.928558349609375, a * 43.72320556640625);
            e.bezierCurveTo(a * 66.92855834960938, a * 31.72320556640625, a * 69.92855834960938, a * 29.72320556640625, a * 74.92855834960938, a * 29.72320556640625);
            e.bezierCurveTo(a * 86.92855834960938, a * 28.72320556640625, a * 91.92855834960938, a * 42.72320556640625, a * 89.92855834960938, a * 52.72320556640625);
            e.bezierCurveTo(a * 88.92855834960938, a * 63.72320556640625, a * 73.92855834960938, a * 75.72320556640625, a * 55.928558349609375, a * 87.72320556640625);
            e.bezierCurveTo(a * 37.928558349609375, a * 78.72320556640625, a * 26.928558349609375, a * 65.72320556640625, a * 19.928558349609375, a * 54.72320556640625);
            e.bezierCurveTo(a * 13.928558349609375, a * 42.72320556640625, a * 21.928558349609375, a * 28.72320556640625, a * 35.928558349609375, a * 29.72320556640625);
            e.bezierCurveTo(a * 45.928558349609375, a * 31.72320556640625, a * 51.928558349609375, a * 40.72320556640625, a * 53.928558349609375, a * 44.72320556640625);
            e.closePath();
            $b(e, b[2]);
        } else if (c == 1) {
            e.save();
            e.translate(a * 55, a * 39.48748779296875);
            Zb(e, a * -11.5, a * -36, a * 23, a * 72, a * 10);
            e.restore();
            $b(e, b[2], b[3], a * 4);
            id(e, a * 54.5, a * 78.48748779296875, a * 22.02271554554524);
            $b(e, b[4], b[3], a * 4);
            e.save();
            e.translate(a * 55.5, a * 57.287506103515625);
            Zb(e, a * -9, a * -16, a * 18, a * 32, a * 10);
            e.restore();
            $b(e, b[4]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 66.5, a * 25.287506103515625);
            e.bezierCurveTo(a * 60.5, a * 25.287506103515625, a * 63.5, a * 25.287506103515625, a * 54.5, a * 25.287506103515625);
            e.closePath();
            $b(e, sl, b[5], a * 4);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 66.5, a * 37.287506103515625);
            e.bezierCurveTo(a * 60.5, a * 37.287506103515625, a * 60.5, a * 37.287506103515625, a * 54.5, a * 37.287506103515625);
            e.closePath();
            $b(e, Nh, b[5], a * 4);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 66.5, a * 50.287506103515625);
            e.bezierCurveTo(a * 61, a * 50.287506103515625, a * 61, a * 50.287506103515625, a * 55.5, a * 50.287506103515625);
            e.closePath();
            $b(e, undefined, b[5], a * 4);
        } else if (c == 2) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 45.928558349609375, a * 55.29463195800781);
            e.bezierCurveTo(a * 38.928558349609375, a * 67.29463195800781, a * 38.928558349609375, a * 67.29463195800781, a * 31.928558349609375, a * 79.29463195800781);
            e.bezierCurveTo(a * 15.928558349609375, a * 85.29463195800781, a * 17.928558349609375, a * 86.29463195800781, a * 17.928558349609375, a * 90.29463195800781);
            e.bezierCurveTo(a * 19.928558349609375, a * 94.29463195800781, a * 21.928558349609375, a * 94.29463195800781, a * 27.928558349609375, a * 92.29463195800781);
            e.bezierCurveTo(a * 29.928558349609375, a * 98.29463195800781, a * 30.928558349609375, a * 99.29463195800781, a * 33.928558349609375, a * 99.29463195800781);
            e.bezierCurveTo(a * 38.928558349609375, a * 97.29463195800781, a * 38.928558349609375, a * 93.29463195800781, a * 37.928558349609375, a * 86.29463195800781);
            e.bezierCurveTo(a * 45.428558349609375, a * 73.29463195800781, a * 51.928558349609375, a * 64.29463195800781, a * 52.928558349609375, a * 60.29463195800781);
            e.closePath();
            $b(e, b[2]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 55.928558349609375, a * 8.866058349609375);
            e.bezierCurveTo(a * 35.928558349609375, a * 35.866058349609375, a * 37.928558349609375, a * 48.866058349609375, a * 46.928558349609375, a * 62.866058349609375);
            e.bezierCurveTo(a * 65.92855834960938, a * 72.86605834960938, a * 80.92855834960938, a * 55.866058349609375, a * 93.92855834960938, a * 36.866058349609375);
            e.closePath();
            $b(e, b[3], b[4], a * 6);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 93.92855834960938, a * 36.866058349609375);
            e.bezierCurveTo(a * 82.92855834960938, a * 37.866058349609375, a * 77.92855834960938, a * 36.866058349609375, a * 67.92855834960938, a * 28.866058349609375);
            e.bezierCurveTo(a * 53.928558349609375, a * 16.866058349609375, a * 53.928558349609375, a * 14.866058349609375, a * 55.928558349609375, a * 7.866058349609375);
            e.bezierCurveTo(a * 65.92855834960938, a * 4.866058349609375, a * 71.92855834960938, a * 7.866058349609375, a * 83.92855834960938, a * 13.866058349609375);
            e.bezierCurveTo(a * 96.92855834960938, a * 21.866058349609375, a * 95.92855834960938, a * 31.866058349609375, a * 92.92855834960938, a * 36.866058349609375);
            e.closePath();
            $b(e, b[3], b[4], a * 6);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 68.92855834960938, a * 16.866058349609375);
            e.bezierCurveTo(a * 71.92855834960938, a * 13.866058349609375, a * 76.92855834960938, a * 16.866058349609375, a * 79.92855834960938, a * 21.866058349609375);
            e.bezierCurveTo(a * 82.92855834960938, a * 24.866058349609375, a * 81.92855834960938, a * 27.866058349609375, a * 73.92855834960938, a * 24.866058349609375);
            e.bezierCurveTo(a * 67.92855834960938, a * 20.866058349609375, a * 66.92855834960938, a * 19.866058349609375, a * 67.92855834960938, a * 17.866058349609375);
            e.closePath();
            $b(e, b[2]);
        } else if (c == 3) {
            e.scale(0.9, 0.9);
            e.translate(a * 6, 0);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 54, a * 0.421875);
            e.bezierCurveTo(a * 84, a * 45.421875, a * 89, a * 51.421875, a * 83, a * 74.421875);
            e.bezierCurveTo(a * 74, a * 95.421875, a * 46, a * 98.421875, a * 30, a * 78.421875);
            e.bezierCurveTo(a * 22, a * 59.421875, a * 27, a * 49.421875, a * 34, a * 36.421875);
            e.closePath();
            $b(e, b[2], b[3], a * 6);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 74, a * 52.421875);
            e.bezierCurveTo(a * 77, a * 73.421875, a * 69, a * 81.421875, a * 58, a * 81.421875);
            e.bezierCurveTo(a * 66, a * 71.421875, a * 70, a * 66.421875, a * 74, a * 52.421875);
            e.closePath();
            $b(e, b[3]);
        }
        return d;
    }
    function Fp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 372;
        d.height = a * 358;
        e.translate(a * 0, a * 10);
        e.globalAlpha = b ? 0.2 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
        e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
        e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
        e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
        e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
        e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
        e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
        e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
        e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
        e.closePath();
        $b(e, c[0], c[0], a * 10);
        e.translate(a * 0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107.00003051757812, a * 54.13069152832031);
        e.bezierCurveTo(a * 106.50003051757812, a * 38.63069152832031, a * 106.50003051757812, a * 38.63069152832031, a * 106.00003051757812, a * 23.130691528320312);
        e.bezierCurveTo(a * 121.50003051757812, a * 38.13069152832031, a * 121.50003051757812, a * 38.13069152832031, a * 137.00003051757812, a * 53.13069152832031);
        e.closePath();
        $b(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 233.00003051757812, a * 53.6761474609375);
        e.bezierCurveTo(a * 247.00003051757812, a * 37.1761474609375, a * 247.00003051757812, a * 37.1761474609375, a * 261.0000305175781, a * 20.6761474609375);
        e.bezierCurveTo(a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 51.6761474609375);
        e.closePath();
        $b(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 293.0000305175781, a * 54.403411865234375);
        e.bezierCurveTo(a * 300.0000305175781, a * 49.903411865234375, a * 300.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 45.403411865234375);
        e.bezierCurveTo(a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 54.403411865234375);
        e.closePath();
        $b(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 77.00003051757812, a * 54.403411865234375);
        e.bezierCurveTo(a * 70.00003051757812, a * 50.403411865234375, a * 70.00003051757812, a * 50.403411865234375, a * 63.000030517578125, a * 46.403411865234375);
        e.bezierCurveTo(a * 62.500030517578125, a * 50.903411865234375, a * 62.500030517578125, a * 50.903411865234375, a * 62.000030517578125, a * 55.403411865234375);
        e.closePath();
        $b(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58.000030517578125, a * 122.3125);
        e.bezierCurveTo(a * 59.500030517578125, a * 97.3125, a * 59.500030517578125, a * 97.3125, a * 61.000030517578125, a * 72.3125);
        e.bezierCurveTo(a * 91.00003051757812, a * 89.3125, a * 91.00003051757812, a * 89.3125, a * 121.00003051757812, a * 106.3125);
        e.closePath();
        $b(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 310.0000305175781, a * 127.3125);
        e.bezierCurveTo(a * 308.0000305175781, a * 98.3125, a * 308.0000305175781, a * 98.3125, a * 306.0000305175781, a * 69.3125);
        e.bezierCurveTo(a * 274.5000305175781, a * 88.8125, a * 274.5000305175781, a * 88.8125, a * 243.00003051757812, a * 108.3125);
        e.closePath();
        $b(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226.00003051757812, a * 87.85795593261719);
        e.bezierCurveTo(a * 243.50003051757812, a * 66.85795593261719, a * 243.50003051757812, a * 66.85795593261719, a * 261.0000305175781, a * 45.85795593261719);
        e.bezierCurveTo(a * 265.0000305175781, a * 83.85795593261719, a * 265.0000305175781, a * 83.85795593261719, a * 269.0000305175781, a * 121.85795593261719);
        e.bezierCurveTo(a * 235.00003051757812, a * 122.85795593261719, a * 233.00003051757812, a * 107.85795593261719, a * 228.00003051757812, a * 90.85795593261719);
        e.closePath();
        $b(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.00003051757812, a * 128.8579559326172);
        e.bezierCurveTo(a * 104.50003051757812, a * 87.85795593261719, a * 104.50003051757812, a * 87.85795593261719, a * 104.00003051757812, a * 46.85795593261719);
        e.bezierCurveTo(a * 126.50003051757812, a * 69.35795593261719, a * 126.50003051757812, a * 69.35795593261719, a * 149.00003051757812, a * 91.85795593261719);
        e.bezierCurveTo(a * 130.00003051757812, a * 123.85795593261719, a * 123.00003051757812, a * 132.8579559326172, a * 107.00003051757812, a * 130.8579559326172);
        e.closePath();
        $b(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59.000030517578125, a * 121.85795593261719);
        e.bezierCurveTo(a * 59.500030517578125, a * 99.35795593261719, a * 59.500030517578125, a * 99.35795593261719, a * 60.000030517578125, a * 76.85795593261719);
        e.bezierCurveTo(a * 84.00003051757812, a * 92.35795593261719, a * 84.00003051757812, a * 92.35795593261719, a * 108.00003051757812, a * 107.85795593261719);
        e.bezierCurveTo(a * 106.00003051757812, a * 148.8579559326172, a * 86.00003051757812, a * 148.8579559326172, a * 62.000030517578125, a * 123.85795593261719);
        e.closePath();
        $b(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.00003051757812, a * 132.8579559326172);
        e.bezierCurveTo(a * 104.50003051757812, a * 93.35795593261719, a * 104.50003051757812, a * 93.35795593261719, a * 104.00003051757812, a * 53.85795593261719);
        e.bezierCurveTo(a * 126.50003051757812, a * 75.85795593261719, a * 126.50003051757812, a * 75.85795593261719, a * 149.00003051757812, a * 97.85795593261719);
        e.closePath();
        $b(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 311.0000305175781, a * 126.85795593261719);
        e.bezierCurveTo(a * 309.0000305175781, a * 101.35795593261719, a * 309.0000305175781, a * 101.35795593261719, a * 307.0000305175781, a * 75.85795593261719);
        e.bezierCurveTo(a * 271.0000305175781, a * 96.85795593261719, a * 271.0000305175781, a * 96.85795593261719, a * 235.00003051757812, a * 117.85795593261719);
        e.closePath();
        $b(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 228.00003051757812, a * 96.85795593261719);
        e.bezierCurveTo(a * 244.50003051757812, a * 74.85795593261719, a * 244.50003051757812, a * 74.85795593261719, a * 261.0000305175781, a * 52.85795593261719);
        e.bezierCurveTo(a * 265.5000305175781, a * 89.85795593261719, a * 265.5000305175781, a * 89.85795593261719, a * 270.0000305175781, a * 126.85795593261719);
        e.closePath();
        $b(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 12.000030517578125, a * 86.13069152832031);
        e.bezierCurveTo(a * 36.000030517578125, a * 113.13069152832031, a * 84.00003051757812, a * 111.13069152832031, a * 116.00003051757812, a * 113.13069152832031);
        e.bezierCurveTo(a * 164.00003051757812, a * 23.130691528320312, a * 172.00003051757812, a * 18.130691528320312, a * 181.00003051757812, a * 9.130691528320312);
        e.bezierCurveTo(a * 199.00003051757812, a * 29.130691528320312, a * 221.00003051757812, a * 78.13069152832031, a * 247.00003051757812, a * 112.13069152832031);
        e.bezierCurveTo(a * 301.0000305175781, a * 122.13069152832031, a * 338.0000305175781, a * 111.13069152832031, a * 359.0000305175781, a * 94.13069152832031);
        e.bezierCurveTo(a * 359.0000305175781, a * 113.13069152832031, a * 358.5000305175781, a * 105.13069152832031, a * 358.0000305175781, a * 116.13069152832031);
        e.bezierCurveTo(a * 270.5000305175781, a * 130.1306915283203, a * 270.5000305175781, a * 130.1306915283203, a * 183.00003051757812, a * 144.1306915283203);
        e.bezierCurveTo(a * 98.00003051757812, a * 128.6306915283203, a * 98.00003051757812, a * 128.6306915283203, a * 13.000030517578125, a * 113.13069152832031);
        e.closePath();
        $b(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
        e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
        e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
        e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
        e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
        e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
        e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
        e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
        e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
        e.closePath();
        $b(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27.000030517578125, a * 94.76704406738281);
        e.bezierCurveTo(a * 11.000030517578125, a * 81.76704406738281, a * 31.000030517578125, a * 72.76704406738281, a * 44.000030517578125, a * 59.76704406738281);
        e.bezierCurveTo(a * 9.000030517578125, a * 65.76704406738281, a * 4.000030517578125, a * 78.76704406738281, a * 9.000030517578125, a * 89.76704406738281);
        e.closePath();
        $b(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 352.0000305175781, a * 100.76705932617188);
        e.bezierCurveTo(a * 362.0000305175781, a * 92.76705932617188, a * 352.0000305175781, a * 84.76705932617188, a * 340.0000305175781, a * 68.76705932617188);
        e.bezierCurveTo(a * 360.0000305175781, a * 69.76705932617188, a * 364.0000305175781, a * 79.76705932617188, a * 364.0000305175781, a * 94.76705932617188);
        e.closePath();
        $b(e, c[1], c[1], a * 1);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25.000030517578125, a * 97.94886779785156);
        e.bezierCurveTo(a * 2.000030517578125, a * 76.94886779785156, a * 29.000030517578125, a * 62.94886779785156, a * 44.000030517578125, a * 59.94886779785156);
        e.bezierCurveTo(a * 8.000030517578125, a * 59.94886779785156, a * -0.999969482421875, a * 81.94886779785156, a * 4.000030517578125, a * 92.94886779785156);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 349.0000305175781, a * 100.94886779785156);
        e.bezierCurveTo(a * 366.0000305175781, a * 82.94886779785156, a * 353.0000305175781, a * 76.94886779785156, a * 337.0000305175781, a * 67.94886779785156);
        e.bezierCurveTo(a * 366.0000305175781, a * 69.94886779785156, a * 366.0000305175781, a * 83.94886779785156, a * 363.0000305175781, a * 101.94886779785156);
        e.closePath();
        $b(e, c[2], c[3], a * 10);
        id(e, a * 46.000030517578125, a * 137.5852279663086, a * 9.219544457292887);
        $b(e, c[4], c[5], a * 1);
        id(e, a * 308.0000305175781, a * 141.5852279663086, a * 8.54400374531753);
        $b(e, c[4], c[5], a * 1);
        id(e, a * 92.00003051757812, a * 149.58523559570312, a * 14.866068747318506);
        $b(e, c[4], c[5], a * 1);
        id(e, a * 262.0000305175781, a * 148.8579559326172, a * 15.620499351813308);
        $b(e, c[4], c[5], a * 1);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 184.00003051757812, a * 68.85795593261719);
        e.bezierCurveTo(a * 203.00003051757812, a * 108.85795593261719, a * 203.00003051757812, a * 108.85795593261719, a * 222.00003051757812, a * 148.8579559326172);
        e.bezierCurveTo(a * 202.50003051757812, a * 177.8579559326172, a * 202.50003051757812, a * 177.8579559326172, a * 183.00003051757812, a * 206.8579559326172);
        e.bezierCurveTo(a * 162.00003051757812, a * 178.8579559326172, a * 162.00003051757812, a * 178.8579559326172, a * 141.00003051757812, a * 150.8579559326172);
        e.closePath();
        $b(e, c[4], c[5], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 183.00003051757812, a * 104.94886779785156);
        e.bezierCurveTo(a * 192.50003051757812, a * 125.44886779785156, a * 192.50003051757812, a * 125.44886779785156, a * 202.00003051757812, a * 145.94886779785156);
        e.bezierCurveTo(a * 192.00003051757812, a * 163.94886779785156, a * 192.00003051757812, a * 163.94886779785156, a * 182.00003051757812, a * 181.94886779785156);
        e.bezierCurveTo(a * 172.50003051757812, a * 164.44886779785156, a * 172.50003051757812, a * 164.44886779785156, a * 163.00003051757812, a * 146.94886779785156);
        e.closePath();
        $b(e, c[6]);
        return d;
    }
    function Rp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 272;
        d.height = a * 264;
        e.translate(0, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.999969482421875, a * 84.517333984375);
        e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
        e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
        e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
        e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
        e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
        e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
        e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
        e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
        e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
        e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
        e.closePath();
        $b(e, c[0]);
        e.translate(0, a * -20);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.999969482421875, a * 84.517333984375);
        e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
        e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
        e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
        e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
        e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
        e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
        e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
        e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
        e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
        e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
        e.closePath();
        $b(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123.99996948242188, a * 116.18402099609375);
        e.bezierCurveTo(a * 115.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 74.18402099609375, a * 109.99996948242188, a * 63.18402099609375);
        e.bezierCurveTo(a * 115.99996948242188, a * 69.18402099609375, a * 125.99996948242188, a * 87.18402099609375, a * 137.99996948242188, a * 112.18402099609375);
        e.bezierCurveTo(a * 142.99996948242188, a * 84.18402099609375, a * 143.99996948242188, a * 76.18402099609375, a * 153.99996948242188, a * 62.18402099609375);
        e.bezierCurveTo(a * 155.99996948242188, a * 79.18402099609375, a * 149.99996948242188, a * 110.18402099609375, a * 151.99996948242188, a * 117.18402099609375);
        e.bezierCurveTo(a * 162.99996948242188, a * 104.18402099609375, a * 180.99996948242188, a * 91.18402099609375, a * 191.99996948242188, a * 91.18402099609375);
        e.bezierCurveTo(a * 185.99996948242188, a * 102.18402099609375, a * 180.99996948242188, a * 106.18402099609375, a * 160.99996948242188, a * 124.18402099609375);
        e.bezierCurveTo(a * 190.99996948242188, a * 121.18402099609375, a * 199.99996948242188, a * 120.18402099609375, a * 207.99996948242188, a * 123.18402099609375);
        e.bezierCurveTo(a * 199.99996948242188, a * 129.18402099609375, a * 181.99996948242188, a * 132.18402099609375, a * 160.99996948242188, a * 135.18402099609375);
        e.bezierCurveTo(a * 179.99996948242188, a * 142.18402099609375, a * 193.99996948242188, a * 151.18402099609375, a * 196.99996948242188, a * 156.18402099609375);
        e.bezierCurveTo(a * 185.99996948242188, a * 156.18402099609375, a * 163.99996948242188, a * 149.18402099609375, a * 152.99996948242188, a * 147.18402099609375);
        e.bezierCurveTo(a * 157.99996948242188, a * 155.18402099609375, a * 165.99996948242188, a * 176.18402099609375, a * 169.99996948242188, a * 195.18402099609375);
        e.bezierCurveTo(a * 162.99996948242188, a * 190.18402099609375, a * 147.99996948242188, a * 167.18402099609375, a * 139.99996948242188, a * 153.18402099609375);
        e.bezierCurveTo(a * 137.99996948242188, a * 167.18402099609375, a * 126.99996948242188, a * 194.18402099609375, a * 119.99996948242188, a * 204.18402099609375);
        e.bezierCurveTo(a * 117.99996948242188, a * 186.18402099609375, a * 123.99996948242188, a * 165.18402099609375, a * 126.99996948242188, a * 149.18402099609375);
        e.bezierCurveTo(a * 110.99996948242188, a * 163.18402099609375, a * 103.99996948242188, a * 170.18402099609375, a * 82.99996948242188, a * 177.18402099609375);
        e.bezierCurveTo(a * 90.99996948242188, a * 162.18402099609375, a * 99.99996948242188, a * 153.18402099609375, a * 117.99996948242188, a * 140.18402099609375);
        e.bezierCurveTo(a * 97.99996948242188, a * 140.18402099609375, a * 83.99996948242188, a * 139.18402099609375, a * 65.99996948242188, a * 132.18402099609375);
        e.bezierCurveTo(a * 77.99996948242188, a * 127.18402099609375, a * 95.99996948242188, a * 127.18402099609375, a * 115.99996948242188, a * 127.18402099609375);
        e.bezierCurveTo(a * 91.99996948242188, a * 113.18402099609375, a * 84.99996948242188, a * 107.18402099609375, a * 76.99996948242188, a * 96.18402099609375);
        e.bezierCurveTo(a * 94.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 109.18402099609375, a * 123.99996948242188, a * 116.18402099609375);
        e.closePath();
        $b(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131.99996948242188, a * 119.18402099609375);
        e.bezierCurveTo(a * 141.99996948242188, a * 119.18402099609375, a * 145.99996948242188, a * 116.18402099609375, a * 147.99996948242188, a * 109.18402099609375);
        e.bezierCurveTo(a * 151.99996948242188, a * 107.18402099609375, a * 159.99996948242188, a * 107.18402099609375, a * 156.99996948242188, a * 123.18402099609375);
        e.bezierCurveTo(a * 155.99996948242188, a * 140.18402099609375, a * 142.99996948242188, a * 149.18402099609375, a * 132.99996948242188, a * 147.18402099609375);
        e.bezierCurveTo(a * 119.99996948242188, a * 144.18402099609375, a * 113.99996948242188, a * 122.18402099609375, a * 131.99996948242188, a * 119.18402099609375);
        e.closePath();
        $b(e, c[4], c[5], a * 6);
        return d;
    }
    function jp() {
        var a = Gx.ᐃΔΔΔᐃ;
        var b = a.id;
        if (a.Ⲇᐃⵠᐃᐃ === 1 && a.display === 1) {
            if (ⵠⵠⵠᐃᐃ[b] === Zi) {
                ⵠⵠⵠᐃᐃ[b] = function (b) {
                    var c = document.createElement("canvas");
                    var d = c.getContext("2d");
                    var e = yb[b];
                    d.font = "20px Baloo Paaji";
                    var f = 0;
                    if (e.length >= 1) {
                        f = Math.max(0, d.measureText(e[0]).width);
                    }
                    d.font = "17px Baloo Paaji";
                    if (e.length >= 2) {
                        f = Math.max(f, d.measureText(e[1]).width);
                    }
                    d.font = "14px Baloo Paaji";
                    wb = 2;
                    for (; e.length > wb; wb++) {
                        f = Math.max(f, d.measureText(e[wb]).width);
                    }
                    var g = f + 35;
                    var a = 0;
                    a = e.length === 1 ? 55 : e.length === 2 ? 85 : (e.length - 2) * 26 + 85;
                    c.width = g;
                    c.height = a;
                    Zb(d, 0, 0, g, a, 10);
                    d.fillStyle = "#000000";
                    d.globalAlpha = 0.5;
                    d.fill();
                    if (e.length >= 1) {
                        d.textBaseline = "middle";
                        d.font = "20px Baloo Paaji";
                        d.globalAlpha = 1;
                        d.fillStyle = "#e2c340";
                        d.fillText(e[0], 15, 28);
                    }
                    if (e.length >= 2) {
                        d.font = "17px Baloo Paaji";
                        d.fillStyle = "#ffffff";
                        d.fillText(e[1], 15, 55);
                        a = 55;
                    }
                    if (e.length >= 3) {
                        d.font = "14px Baloo Paaji";
                        d.globalAlpha = 0.7;
                        wb = 2;
                        for (; wb < e.length; wb++) {
                            d.fillText(e[wb], 15, a + 28);
                            a += 26;
                        }
                    }
                    return c;
                }(b);
            }
            if (a.ᐃΔⵠΔ === 1) {
                Vp(ao, ⵠⵠⵠᐃᐃ[b], a.x, a.y);
            } else if (a.x - 80 + ⵠⵠⵠᐃᐃ[b].width > io) {
                Vp(ao, ⵠⵠⵠᐃᐃ[b], io - ⵠⵠⵠᐃᐃ[b].width - 10, a.y - ⵠⵠⵠᐃᐃ[b].height - 10);
            } else {
                Vp(ao, ⵠⵠⵠᐃᐃ[b], a.x - 80, a.y - ⵠⵠⵠᐃᐃ[b].height - 10);
            }
        }
    }
    function Lp() {
        if (!Ex.ⵠⲆⲆᐃ.open && !Ex.ⲆⲆᐃⲆΔ.open && !Ex.ⵠᐃΔⵠ.open && !Ex.ᐃⲆᐃΔ.open) {
            Ex.ⲆᐃⲆⲆ.open = false;
            var b = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ];
            var c = 100;
            if (b) {
                for (var d = 0; d < Dx.ⵠᐃΔ[34].length; d++) {
                    var e = Dx.ⵠᐃΔ[34][d];
                    var f = ⵠΔⲆⵠ.ᐃⲆᐃⲆ(e, b);
                    if (f < c) {
                        c = f;
                        Ex.ⲆᐃⲆⲆ.open = true;
                        Ex.ⲆᐃⲆⲆ.ⲆⵠⲆⵠⲆΔⵠ = e.info & 31;
                        Ex.ⲆᐃⲆⲆ.ⲆΔⵠᐃᐃ = (e.info & 992) >> 5;
                        Ex.ⲆᐃⲆⲆ.ⵠᐃⵠⲆⲆⵠᐃ = (e.info & 31744) >> 10;
                        Ex.ⲆᐃⲆⲆ.ⲆⲆᐃᐃ = e.ⲆⲆᐃᐃ;
                        Ex.ⲆᐃⲆⲆ.ᐃᐃⵠⵠⲆ = e.id;
                    }
                }
                if (c < 100) {
                    var g = ᐃΔ[722];
                    var a = (j = Gx.ΔⵠⲆⲆⵠᐃⵠ).info.translate.x - 32;
                    Vp(ao, g, a, 0);
                    if (Ex.ⲆᐃⲆⲆ.ⲆⵠⲆⵠⲆΔⵠ > 0) {
                        j.ⵠⲆⲆⵠ(ao);
                        if ((k = Ex.ⲆᐃⲆⲆ.ⲆⵠⲆⵠⲆΔⵠ) > 1) {
                            Yp(k, j);
                        }
                    }
                    var j = Gx.ⵠⲆᐃΔⲆⲆᐃ;
                    if (Ex.ⲆᐃⲆⲆ.ⵠᐃⵠⲆⲆⵠᐃ > 0) {
                        j.ⵠⲆⲆⵠ(ao);
                        var k = Ex.ⲆᐃⲆⲆ.ⵠᐃⵠⲆⲆⵠᐃ;
                        if (k > 1) {
                            Yp(k, j);
                        }
                    }
                    j = Gx.ᐃⲆᐃⲆⲆⲆᐃ;
                    if (Ex.ⲆᐃⲆⲆ.ⲆΔⵠᐃᐃ > 0) {
                        j.ⵠⲆⲆⵠ(ao);
                        if ((k = Ex.ⲆᐃⲆⲆ.ⲆΔⵠᐃᐃ) > 1) {
                            Yp(k, j);
                        }
                    }
                }
            }
        }
    }
    function Gp() {
        if (Ex.ΔⵠᐃⵠⲆᐃᐃ) {
            ao.globalAlpha = 0.5;
            ao.fillStyle = "#000";
            ao.fillRect(0, 0, io, no);
            ao.globalAlpha = 0.8;
            var b = ᐃΔ[516][Dx.time];
            var c = oo - b.width / 2;
            var d = to - b.height / 2;
            Vp(ao, b, c, d);
            ao.globalAlpha = 1;
            if (Gx.ⲆᐃΔΔᐃ.ⵠⲆᐃⵠΔ.x > -1) {
                ao.fillStyle = "#660000";
                id(ao, c + Gx.ⲆᐃΔΔᐃ.ⵠⲆᐃⵠΔ.x * 3 * po, d + po * (Gx.ⲆᐃΔΔᐃ.ⵠⲆᐃⵠΔ.y * 3), po * 14);
                ao.fill();
            }
            for (var e = Gx.ⲆᐃΔΔᐃ.ⵠᐃⲆΔ, f = 0; f < e.length; f++) {
                var g = e[f];
                Dx.time;
                ao.fillStyle = "#ff0000";
                id(ao, c + po * (g.x / (Dx.ⵠᐃΔΔⲆ * 100) * 600), d + po * (g.y / (Dx.ᐃⵠᐃᐃⲆ * 100) * 600), po * 6);
                ao.fill();
            }
            var h = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ];
            if (h) {
                ao.fillStyle = Dx.time ? "#fff" : "#e39716";
                id(ao, c + po * (h.x / (Dx.ⵠᐃΔΔⲆ * 100) * 600), d + h.y / (Dx.ᐃⵠᐃᐃⲆ * 100) * 600 * po, po * 12);
                ao.fill();
            }
        }
    }
    function Wp() {
        if (!Ex.ⵠⲆⲆᐃ.open && !Ex.ⲆⲆᐃⲆΔ.open) {
            Ex.ⵠᐃΔⵠ.open = w;
            var b = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ];
            var c = 100;
            if (b) {
                for (var d = 0; Dx.ⵠᐃΔ[32].length > d; d++) {
                    var e = Dx.ⵠᐃΔ[32][d];
                    var f = ⵠΔⲆⵠ.ᐃⲆᐃⲆ(e, b);
                    if (f < c) {
                        c = f;
                        Ex.ⵠᐃΔⵠ.open = O;
                        Ex.ⵠᐃΔⵠ.ⲆΔⵠΔᐃᐃⵠ = e.info & 255;
                        Ex.ⵠᐃΔⵠ.ⲆΔⵠᐃᐃ = (e.info & 65280) >> 8;
                        Ex.ⵠᐃΔⵠ.ⲆⲆᐃᐃ = e.ⲆⲆᐃᐃ;
                        Ex.ⵠᐃΔⵠ.ᐃᐃⵠⵠⲆ = e.id;
                    }
                }
                if (c < 100) {
                    var g = ᐃΔ[655];
                    var a = (k = Gx.ⵠⵠⲆΔΔⲆᐃ).info.translate.x - 33;
                    Vp(ao, g, a, 0);
                    if (Ex.ⵠᐃΔⵠ.ⲆΔⵠΔᐃᐃⵠ > 0) {
                        k.ⵠⲆⲆⵠ(ao);
                        if ((j = Ex.ⵠᐃΔⵠ.ⲆΔⵠΔᐃᐃⵠ) > 1) {
                            Yp(j, k);
                        }
                    }
                    var j;
                    var k = Gx.ΔᐃΔⵠⵠΔⵠ;
                    if (Ex.ⵠᐃΔⵠ.ⲆΔⵠᐃᐃ > 0) {
                        k.ⵠⲆⲆⵠ(ao);
                        if ((j = Ex.ⵠᐃΔⵠ.ⲆΔⵠᐃᐃ) > 1) {
                            Yp(j, k);
                        }
                    }
                }
            }
        }
    }
    function Op() {
        if (!Ex.ⵠⲆⲆᐃ.open && !Ex.ⲆⲆᐃⲆΔ.open) {
            Ex.ᐃⲆᐃΔ.open = Gl;
            var b = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ];
            var c = 100;
            if (b) {
                for (var d = 0; d < Fw.length; d++) {
                    for (var e = Fw[d][0], f = Fw[d][1], j = 0; Dx.ⵠᐃΔ[e].length > j; j++) {
                        var k = Dx.ⵠᐃΔ[e][j];
                        var m = ⵠΔⲆⵠ.ᐃⲆᐃⲆ(k, b);
                        if (m < c) {
                            c = m;
                            Ex.ᐃⲆᐃΔ.ΔᐃⲆᐃⲆⵠΔ = f;
                            Ex.ᐃⲆᐃΔ.type = e;
                            Ex.ᐃⲆᐃΔ.open = true;
                            Ex.ᐃⲆᐃΔ.ⲆⵠⲆⵠⲆΔⵠ = k.info & 255;
                            Ex.ᐃⲆᐃΔ.ᐃⵠⵠᐃⲆΔⵠ = (k.info & 65280) >> 8;
                            Ex.ᐃⲆᐃΔ.ⲆⲆᐃᐃ = k.ⲆⲆᐃᐃ;
                            Ex.ᐃⲆᐃΔ.ᐃᐃⵠⵠⲆ = k.id;
                        }
                    }
                }
                if (c < 100) {
                    var p = ᐃΔ[656];
                    var h = (q = Gx.ⵠⵠΔᐃᐃⲆⲆ).info.translate.x - 33;
                    Vp(ao, p, h, 0);
                    if (Ex.ᐃⲆᐃΔ.ⲆⵠⲆⵠⲆΔⵠ > 0) {
                        q.ⵠⲆⲆⵠ(ao);
                        var l = Ex.ᐃⲆᐃΔ.ⲆⵠⲆⵠⲆΔⵠ;
                        if (l > 1) {
                            Yp(l, q);
                        }
                    }
                    switch (Ex.ᐃⲆᐃΔ.ΔᐃⲆᐃⲆⵠΔ) {
                        case 108:
                            var q = Gx.ⵠⲆⵠᐃᐃⲆΔ;
                            break;
                        case 111:
                            q = Gx.ⵠⵠⵠⲆΔⲆᐃ;
                            break;
                        case 112:
                            q = Gx.ⲆⵠΔⵠΔΔⲆ;
                            break;
                        case 121:
                            q = Gx.ⵠⲆⵠⵠⲆΔⵠ;
                            break;
                        case 202:
                            q = Gx.ᐃⲆⵠⲆᐃⵠΔ;
                    }
                    if (Ex.ᐃⲆᐃΔ.ᐃⵠⵠᐃⲆΔⵠ > 0) {
                        q.ⵠⲆⲆⵠ(ao);
                        if ((l = Ex.ᐃⲆᐃΔ.ᐃⵠⵠᐃⲆΔⵠ) > 1) {
                            Yp(l, q);
                        }
                    }
                }
            }
        }
    }
    function Np() {
        Ex.ⲆⲆⲆⲆⵠ.id = -1;
        Ex.ⲆⲆⲆⲆⵠ.ⲆⲆᐃᐃ = -1;
        if (!Ex.ΔⵠⵠᐃⲆΔΔ && !Ex.ⲆⲆⲆⲆⵠ.wait && !Ex.ᐃΔΔⲆᐃ) {
            var b = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ];
            var c = 100;
            if (b) {
                for (var d = 0; Dx.ⵠᐃΔ[29].length > d; d++) {
                    var e = Dx.ⵠᐃΔ[29][d];
                    var f = ⵠΔⲆⵠ.ᐃⲆᐃⲆ(e, b);
                    if (c > f) {
                        c = f;
                        Ex.ⲆⲆⲆⲆⵠ.id = e.id;
                        Ex.ⲆⲆⲆⲆⵠ.ⲆⲆᐃᐃ = e.ⲆⲆᐃᐃ;
                        Ex.ⲆⲆⲆⲆⵠ.info = e.info;
                        Ex.ⲆⲆⲆⲆⵠ.lock = (e.info & 16) >> 4;
                    }
                }
            }
            var g = Gx.ⲆⲆⵠΔᐃ;
            Gx.ⲆⲆⵠΔᐃ = -1;
            if (Ex.ⲆⲆⲆⲆⵠ.ⲆⲆᐃᐃ == -1 || Ex.ⵠⲆⲆⵠΔ.length != 0 && Ex.id != Ex.ⲆⲆⲆⲆⵠ.ⲆⲆᐃᐃ) {
                if (Ex.ⵠⲆⲆⵠΔ.length != 0 && Ex.id != Ex.ⵠⲆⲆⵠΔ[0]) {
                    Gx.ⲆⲆⵠΔᐃ = 2;
                } else if (Ex.ⵠⲆⲆⵠΔ.length != 0 && Ex.ⵠⲆⲆⵠΔ[0] == Ex.id) {
                    Gx.ⲆⲆⵠΔᐃ = 1;
                } else if (Ex.ⵠⲆⲆⵠΔ.length != 0) {
                    Gx.ⲆⲆⵠΔᐃ = 3;
                }
            } else if (Ex.ⵠⲆⲆⵠΔ.length == 0 && Ex.ⲆⲆⲆⲆⵠ.info >= 8) {
                Gx.ⲆⲆⵠΔᐃ = 4;
            } else if (Ex.ⵠⲆⲆⵠΔ.length == 0) {
                Gx.ⲆⲆⵠΔᐃ = 3;
            } else {
                Gx.ⲆⲆⵠΔᐃ = 0;
            }
            if (Gx.ⲆⲆⵠΔᐃ != -1) {
                Gx.ⵠⵠⵠⲆⵠ[Gx.ⲆⲆⵠΔᐃ].button.ⵠⲆⲆⵠ(ao);
            }
            var a = document.getElementById("team_box").style;
            if (Gx.ⲆⲆⵠΔᐃ != -1 && g != Gx.ⲆⲆⵠΔᐃ && a.display == "inline-block") {
                Gx.ⵠⵠⵠⲆⵠ[Gx.ⲆⲆⵠΔᐃ].action();
            }
        }
    }
    function qp(b, c, d) {
        var e = ᐃΔ[465][b];
        var f = c.info.translate.x + po * 5;
        var g = c.info.translate.y + po * 5;
        if (Bf == c.info.state || d) {
            g += po * 5;
        }
        Vp(ao, e, f, g);
    }
    function Hp() {
        if (!Ex.ⵠⲆⲆᐃ.open && !Ex.ⲆⲆᐃⲆΔ.open && !Ex.ⵠᐃΔⵠ.open && !Ex.ⲆᐃⲆⲆ.open && !Ex.ᐃⲆᐃΔ.open) {
            Ex.sign.open = false;
            var a = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ];
            var b = 100;
            if (a) {
                for (var c = 0; Dx.ⵠᐃΔ[36].length > c; c++) {
                    var d = Dx.ⵠᐃΔ[36][c];
                    var e = ⵠΔⲆⵠ.ᐃⲆᐃⲆ(d, a);
                    if (b > e && d.info === 0 && d.ⲆⲆᐃᐃ === Ex.id) {
                        Ex.sign.open = dr;
                        b = e;
                        Ex.sign.ᐃᐃⵠⵠⲆ = d.id;
                    }
                }
                if (b < 100) {
                    Gx.sign.button.ⵠⲆⲆⵠ(ao);
                }
            }
        }
    }
    function Up() {
        if (Ex.reconnect.enabled) {
            ao.globalAlpha = 0.9;
            ao.fillStyle = "#000";
            Zb(ao, oo - 150, to - 90, 300, 180, 15);
            ao.fill();
            ao.globalAlpha = 1;
            var a = ᐃΔ[301];
            ao.save();
            Ex.reconnect.rotate = (Ex.reconnect.rotate + Lx * 2) % (Math.PI * 2);
            ao.translate(io / 2, no / 2 - 25);
            ao.rotate(Ex.reconnect.rotate);
            Vp(ao, a, -a.width / 2, -a.height / 2);
            ao.restore();
            a = ᐃΔ[525];
            Vp(ao, a, (io - a.width) / 2, (no - a.height) / 2 + 25);
        }
    }
    function Yp(a, b) {
        if (!ᐃΔ[283][a]) {
            ᐃΔ[283][a] = qu(po, "x" + a, 17, "#FFF");
        }
        var c = ᐃΔ[283][a];
        var d = b.info.translate.x + b.info.Ⲇᐃ[0].width - c.width - po * 14;
        var e = b.info.translate.y + b.info.Ⲇᐃ[0].height - c.height - po * 19;
        if (Bf == b.info.state) {
            e += po * 5;
        }
        Vp(ao, c, d, e);
    }
    function Kp() {
        Ex.ᐃΔⲆⵠⲆ.open = false;
        var a = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ];
        var b = 100;
        if (a) {
            for (var c = 0; c < Dx.ⵠᐃΔ[22].length; c++) {
                var d = Dx.ⵠᐃΔ[22][c];
                var e = ⵠΔⲆⵠ.ᐃⲆᐃⲆ(d, a);
                if (b > e) {
                    b = e;
                    Ex.ᐃΔⲆⵠⲆ.open = xq;
                    Ex.ᐃΔⲆⵠⲆ.ⲆⲆᐃᐃ = d.ⲆⲆᐃᐃ;
                    Ex.ᐃΔⲆⵠⲆ.ᐃᐃⵠⵠⲆ = d.id;
                }
            }
            if (b < 100) {
                Gx.ᐃΔⲆⵠⲆ.ⵠⲆⲆⵠ(ao);
            }
        }
    }
    function Vp(b, c, d, e, f, g, a, i, j, h) {
        if (c.ⵠΔⵠⵠⲆⵠΔ === undefined || c.ⵠΔⵠⵠⲆⵠΔ() === 1) {
            if (h !== undefined) {
                b.drawImage(c, d, e, Math.max(1, f), Math.max(1, g), a, i, j, h);
            } else if (g !== lh) {
                b.drawImage(c, d, e, f, g);
            } else {
                b.drawImage(c, d, e);
            }
        }
    }
    function Xp() {
        if (Ex.ⲆᐃΔⲆ.ⲆᐃⲆⵠΔ.length > 0) {
            var b = {
                x: Gx.ⲆᐃΔΔᐃ.translate.x,
                y: Gx.ⲆᐃΔΔᐃ.translate.y - po * 120
            };
        } else {
            b = {
                x: Gx.ⲆᐃΔΔᐃ.translate.x,
                y: Gx.ⲆᐃΔΔᐃ.translate.y - po * 50
            };
        }
        ao.globalAlpha = 0.8;
        var c = ᐃΔ[259][Dx.time];
        Vp(ao, c, b.x, b.y);
        ao.globalAlpha = 1;
        if (Gx.ⲆᐃΔΔᐃ.ⵠⲆᐃⵠΔ.x > -1) {
            ao.fillStyle = "#660000";
            id(ao, b.x + po * Gx.ⲆᐃΔΔᐃ.ⵠⲆᐃⵠΔ.x, b.y + Gx.ⲆᐃΔΔᐃ.ⵠⲆᐃⵠΔ.y * po, po * 5);
            ao.fill();
        }
        var d = po;
        for (var f = Gx.ⲆᐃΔΔᐃ.ⵠᐃⲆΔ, g = 0; f.length > g; g++) {
            var h = f[g];
            Dx.time;
            ao.fillStyle = "#ff0000";
            id(ao, b.x + h.x / (Dx.ⵠᐃΔΔⲆ * 100) * 193 * po, b.y + po * (h.y / (Dx.ᐃⵠᐃᐃⲆ * 100) * 193), po * 2);
            ao.fill();
        }
        var i = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ];
        if (i) {
            ao.fillStyle = Dx.time ? "#fff" : "#e39716";
            id(ao, b.x + po * (i.x / (Dx.ⵠᐃΔΔⲆ * 100) * 193), b.y + i.y / (Dx.ᐃⵠᐃᐃⲆ * 100) * 193 * po, po * 4);
            ao.fill();
        }
        po = d;
    }
    function Zp() {
        if (!Ex.ⵠⲆⲆᐃ.open) {
            Ex.ⲆⲆᐃⲆΔ.ΔⲆⲆⲆ = 0;
            Ex.ⲆⲆᐃⲆΔ.open = Xb;
            var b = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ];
            var c = 100;
            if (b) {
                for (var d = 0; Dx.ⵠᐃΔ[18].length > d; d++) {
                    var e = Dx.ⵠᐃΔ[18][d];
                    var f = ⵠΔⲆⵠ.ᐃⲆᐃⲆ(e, b);
                    if (f < c) {
                        c = f;
                        Ex.ⲆⲆᐃⲆΔ.open = true;
                        Ex.ⲆⲆᐃⲆΔ.ΔⲆⲆⲆ = e.info;
                        Ex.ⲆⲆᐃⲆΔ.ⲆⲆᐃᐃ = e.ⲆⲆᐃᐃ;
                        Ex.ⲆⲆᐃⲆΔ.ᐃᐃⵠⵠⲆ = e.id;
                    }
                }
                if (c < 100) {
                    var g = ᐃΔ[411];
                    var a = Gx.ΔⵠⵠᐃᐃⵠⲆ;
                    var j = Math.floor(a.info.translate.x + (a.info.Ⲇᐃ[0].width - g.width) / 2);
                    var k = Math.floor(a.info.translate.y + (a.info.Ⲇᐃ[0].height - g.height) / 2) + 3;
                    Vp(ao, g, j, k);
                    if (Ex.ⲆⲆᐃⲆΔ.ΔⲆⲆⲆ > 0) {
                        a.ⵠⲆⲆⵠ(ao);
                        var h = Ex.ⲆⲆᐃⲆΔ.ΔⲆⲆⲆ;
                        if (h > 1) {
                            Yp(h, a);
                        }
                    }
                }
            }
        }
    }
    function $p() {
        Ex.ⵠⲆⲆᐃ.id = -1;
        Ex.ⵠⲆⲆᐃ.lock = Ag;
        Ex.ⵠⲆⲆᐃ.locked = Xs;
        Ex.ⵠⲆⲆᐃ.ⲆΔⵠᐃⲆΔᐃ = false;
        Ex.ⵠⲆⲆᐃ.ΔⲆᐃΔΔᐃΔ = yj;
        Ex.ⵠⲆⲆᐃ.open = Xs;
        var b = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ];
        var c = 100;
        if (b) {
            for (var d = 0; d < Dx.ⵠᐃΔ[11].length; d++) {
                var e = Dx.ⵠᐃΔ[11][d];
                var f = ⵠΔⲆⵠ.ᐃⲆᐃⲆ(e, b);
                if (c > f) {
                    c = f;
                    Ex.ⵠⲆⲆᐃ.open = Un;
                    Ex.ⵠⲆⲆᐃ.id = e.action < 2 ? -1 : Math.floor((e.action - 1) / 2);
                    Ex.ⵠⲆⲆᐃ.ΔⲆⲆⲆ = e.info;
                    Ex.ⵠⲆⲆᐃ.ⲆⲆᐃᐃ = e.ⲆⲆᐃᐃ;
                    Ex.ⵠⲆⲆᐃ.ᐃᐃⵠⵠⲆ = e.id;
                    Ex.ⵠⲆⲆᐃ.locked = e.lock;
                    Ex.ⵠⲆⲆᐃ.lock = !!e.lock && Ex.id != e.ⲆⲆᐃᐃ && !Ex.ΔⵠᐃⲆᐃⵠⲆ(e.ⲆⲆᐃᐃ);
                    Ex.ⵠⲆⲆᐃ.ΔⲆᐃΔΔᐃΔ = e.ⲆⲆᐃᐃ === Ex.id && !Ex.ⵠⲆⲆᐃ.locked && Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(148) != -1;
                    if (Ex.ⵠⲆⲆᐃ.locked && Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(158) != -1) {
                        Ex.ⵠⲆⲆᐃ.ⲆΔⵠᐃⲆΔᐃ = Uh;
                    }
                }
            }
            if (c < 100) {
                var g = ᐃΔ[339];
                var a = Gx.ⵠᐃⵠ[0];
                var j = Math.floor(a.info.translate.x + (a.info.Ⲇᐃ[0].width - g.width) / 2);
                var k = Math.floor(a.info.translate.y + (a.info.Ⲇᐃ[0].height - g.height) / 2) + 3;
                Vp(ao, g, j, k);
                if ((!Ex.ⵠⲆⲆᐃ.lock || Ex.id === Ex.ⵠⲆⲆᐃ.ⲆⲆᐃᐃ) && Ex.ⵠⲆⲆᐃ.id >= 0) {
                    (a = Gx.ⵠᐃⵠ[Ex.ⵠⲆⲆᐃ.id]).ⵠⲆⲆⵠ(ao);
                    var h = Ex.ⵠⲆⲆᐃ.ΔⲆⲆⲆ;
                    if (h > 1) {
                        Yp(h, a);
                    }
                }
                if (Ex.ⵠⲆⲆᐃ.lock) {
                    Gx.ᐃⵠⵠΔΔᐃⲆ.ⵠⲆⲆⵠ(ao);
                } else if (Ex.ⵠⲆⲆᐃ.ΔⲆᐃΔΔᐃΔ) {
                    Gx.ΔⲆⵠΔᐃⲆΔ.ⵠⲆⲆⵠ(ao);
                }
                if (Ex.ⵠⲆⲆᐃ.ⲆΔⵠᐃⲆΔᐃ) {
                    Gx.ⵠⵠⲆᐃΔΔΔ.ⵠⲆⲆⵠ(ao);
                }
            }
        }
    }
    Sp.log = Sp.info = Sp.error = Sp.warn = Sp.debug = Sp.ⲆΔⲆⵠⲆᐃⲆᐃⵠ = Sp.trace = Sp.time = Sp.timeEnd = function () { };
    ⵠⵠⵠᐃᐃ = [];
    ΔⵠⵠⲆⲆⲆΔ = [];
    var Bu = [];
    function Cu() {
        ao.save();
        var a = po;
        if (Ex.ΔᐃⵠⲆ.ᐃⲆⲆᐃⲆ.x < 0.25) {
            ao.globalAlpha = Ex.ΔᐃⵠⲆ.ΔⵠⲆⵠᐃⲆⲆ.ⲆᐃΔ;
        }
        var b = Ex.ⲆᐃΔⲆ.ⲆᐃⲆⵠΔ.length > 0 ? -70 : 0;
        if (Ex.ⵠⲆⲆᐃ.open || Ex.ⲆⲆᐃⲆΔ.open && Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(109) != -1 || Ex.ⵠᐃΔⵠ.open && Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(134) != -1 || Ex.ᐃⲆᐃΔ.open && Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(109) != -1 || Ex.ΔᐃⲆⲆⲆ.open && Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(180) != -1 || Ex.ⲆᐃⲆⲆ.open && (Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(109) != -1 || Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(131) != -1)) {
            b -= po * 50;
        }
        ao.translate((io - po * 950) / 2, b);
        ao.fillStyle = "#69A148";
        ao.fillRect(this.translate.x + po * 37, this.translate.y + po * 17, Ex.ΔᐃⵠⲆ.ᐃⲆⲆᐃⲆ.x * 178 * po, po * 18);
        ao.globalAlpha = 1;
        if (Ex.ΔᐃⵠⲆ.ⵠⲆⲆⲆΔⵠⲆ.x < 0.35) {
            ao.fillStyle = "#8F050A";
            ao.globalAlpha = Ex.ΔᐃⵠⲆ.ⵠⲆΔᐃⵠⲆᐃ.ⲆᐃΔ;
            ao.fillRect(this.translate.x + po * 277, this.translate.y + po * 17, po * 178, po * 18);
            ao.globalAlpha = 1;
        }
        ao.fillStyle = "#AF352A";
        ao.fillRect(this.translate.x + po * 277, this.translate.y + po * 17, Ex.ΔᐃⵠⲆ.ⵠⲆⲆⲆΔⵠⲆ.x * 178 * po, po * 18);
        if (Ex.ΔᐃⵠⲆ.ⵠΔᐃⵠⲆ.x < 0.35) {
            ao.fillStyle = "#366B91";
            ao.globalAlpha = Ex.ΔᐃⵠⲆ.ΔⲆⲆⵠΔᐃΔ.ⲆᐃΔ;
            ao.fillRect(this.translate.x + po * 517, this.translate.y + po * 17, po * 178, po * 18);
            ao.globalAlpha = 1;
        }
        ao.fillStyle = "#669BB1";
        ao.fillRect(this.translate.x + po * 517, this.translate.y + po * 17, po * (Ex.ΔᐃⵠⲆ.ⵠΔᐃⵠⲆ.x * 178), po * 18);
        if (Ex.ΔᐃⵠⲆ.ⵠΔᐃⵠⲆ.x > 0.99) {
            if (Ex.ΔᐃⵠⲆ.ᐃⲆⵠᐃᐃ.x < 0.35) {
                ao.fillStyle = "#6C4036";
                ao.globalAlpha = Ex.ΔᐃⵠⲆ.ⲆᐃⲆᐃᐃΔᐃ.ⲆᐃΔ;
                ao.fillRect(this.translate.x + po * 517, this.translate.y + po * 17, po * 178, po * 18);
                ao.globalAlpha = 1;
            }
            ao.fillStyle = "#9C4036";
            ao.fillRect(this.translate.x + po * 517, this.translate.y + po * 17, (1 - Ex.ΔᐃⵠⲆ.ᐃⲆⵠᐃᐃ.x) * 178 * po, po * 18);
        }
        if (Ex.ΔᐃⵠⲆ.ΔΔⵠᐃⵠΔⲆ.x < 0.35) {
            ao.fillStyle = "#001A57";
            ao.globalAlpha = Ex.ΔᐃⵠⲆ.ⲆᐃΔᐃⲆⲆⲆ.ⲆᐃΔ;
            ao.fillRect(this.translate.x + po * 757, this.translate.y + po * 17, po * 178, po * 18);
            ao.globalAlpha = 1;
        }
        ao.fillStyle = "#074A87";
        ao.fillRect(this.translate.x + po * 757, this.translate.y + po * 17, Ex.ΔᐃⵠⲆ.ΔΔⵠᐃⵠΔⲆ.x * 178 * po, po * 18);
        po = a;
        Vp(ao, this.Ⲇᐃ, this.translate.x, this.translate.y);
        this.y = this.translate.y + b;
        ao.restore();
        if (Ex.ΔᐃⵠⲆ.ⲆⲆΔΔᐃᐃⵠ.x < 0.99) {
            var c = Math.floor(oo - ᐃΔ[608].width / 2);
            b += this.translate.y - ᐃΔ[608].height - po * 5;
            ao.fillStyle = "#BBE8EF";
            ao.fillRect(c + 5, b + po * 5, Ex.ΔᐃⵠⲆ.ⲆⲆΔΔᐃᐃⵠ.x * (po * 588), po * 10);
            if (Ex.ΔᐃⵠⲆ.ⲆⲆΔΔᐃᐃⵠ.x < 0.35) {
                ao.fillStyle = "#9BA8AF";
                ao.globalAlpha = Ex.ΔᐃⵠⲆ.ⲆⲆᐃⲆⵠᐃᐃ.ⲆᐃΔ;
                ao.fillRect(c + 5, b + 5, po * 588, po * 10);
                ao.globalAlpha = 1;
            }
            Vp(ao, ᐃΔ[608], c, b);
            this.y = b;
        }
    }
    function Du() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        Ⲇᐃ = ᐃΔ[811][Dx.time];
        ⲆⵠΔ = -Ⲇᐃ.width;
        ⵠⲆⵠ = -Ⲇᐃ.height;
        Vp(ao, Ⲇᐃ, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
        ao.restore();
    }
    function Eu() {
        var a = -8;
        if (Ex.ⵠⵠⲆΔⲆ.enabled) {
            var b = ᐃΔ[546];
            Vp(ao, b, Ex.ⵠⵠⲆΔⲆ.translate.x, Ex.ⵠⵠⲆΔⲆ.translate.y + a);
            a += 70;
        }
        if (Ex.ⵠᐃⵠᐃΔⲆⲆ === 1) {
            b = ᐃΔ[549];
            Vp(ao, b, Ex.ⵠⵠⲆΔⲆ.translate.x, Ex.ⵠⵠⲆΔⲆ.translate.y + a);
            a += 70;
        } else if (Ex.ΔᐃⵠⲆ.ⵠΔᐃⵠⲆ.x < 0.25 || Ex.ΔᐃⵠⲆ.ⵠⲆⲆⲆΔⵠⲆ.x < 0.25 || Ex.ΔᐃⵠⲆ.ΔΔⵠᐃⵠΔⲆ.x < 0.25 || Ex.ΔᐃⵠⲆ.ⲆⲆΔΔᐃᐃⵠ.x < 0.25 || Ex.ΔᐃⵠⲆ.ᐃⲆⵠᐃᐃ.x < 0.25) {
            b = ᐃΔ[548];
            Vp(ao, b, Ex.ⵠⵠⲆΔⲆ.translate.x, Ex.ⵠⵠⲆΔⲆ.translate.y + a);
            a += 70;
        }
        if (Ex.ΔⲆᐃᐃᐃ > 0) {
            b = ᐃΔ[547];
            Vp(ao, b, Ex.ⵠⵠⲆΔⲆ.translate.x, Ex.ⵠⵠⲆΔⲆ.translate.y + a);
            var c = Bu[Ex.ΔⲆᐃᐃᐃ];
            if (c === Mq) {
                c = qu(po, Ex.ΔⲆᐃᐃᐃ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
                Bu[Ex.ΔⲆᐃᐃᐃ] = c;
            }
            if (Ex.ΔⲆᐃᐃᐃ < 9) {
                Vp(ao, c, Ex.ⵠⵠⲆΔⲆ.translate.x - 39, Ex.ⵠⵠⲆΔⲆ.translate.y + a + 20);
            } else {
                Vp(ao, c, Ex.ⵠⵠⲆΔⲆ.translate.x - 46, Ex.ⵠⵠⲆΔⲆ.translate.y + a + 20);
            }
        }
    }
    function Fu(b) {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ == 0) {
                this.ΔⲆᐃ.ⲆΔᐃ = Sg;
            }
            var c = Lx * (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * 600 * po;
            var d = c * Math.sin(this.ΔⲆᐃ.angle - this.angle);
            var e = Math.cos(this.ΔⲆᐃ.angle - this.angle) * c;
        } else {
            d = 0;
            e = 0;
        }
        var f = ᐃΔ[853].length;
        Ⲇᐃ = ᐃΔ[853][(this.Ⲇⵠᐃⵠ + this.ᐃᐃ % 2) % f][Dx.time];
        ⲆⵠΔ = -Ⲇᐃ.width;
        ⵠⲆⵠ = -Ⲇᐃ.height;
        var g = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ];
        if (g && (Ex.id === this.ⲆⲆᐃᐃ || Ex.ΔⵠᐃⲆᐃⵠⲆ(this.ⲆⲆᐃᐃ))) {
            if (ⵠΔⲆⵠ.ᐃⲆᐃⲆ(this, g) < 550) {
                this.opacity = Math.max(this.opacity - Lx, 0.3);
            } else {
                this.opacity = Math.min(this.opacity + Lx, 1);
            }
        } else if (g && ⵠΔⲆⵠ.ᐃⲆᐃⲆ(this, Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ]) < 150) {
            this.opacity = Math.max(this.opacity - Lx, 0.3);
        } else {
            this.opacity = Math.min(this.opacity + Lx, 1);
        }
        var a = ao.globalAlpha;
        ao.globalAlpha *= this.opacity;
        Vp(ao, Ⲇᐃ, -ⲆⵠΔ / 2 + d, -ⵠⲆⵠ / 2 + e, ⲆⵠΔ, ⵠⲆⵠ);
        ao.globalAlpha = a;
        ao.restore();
    }
    function Gu() {
        for (var b = Ex.ⲆᐃΔⲆ, c = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ], d = 0; b.ⲆᐃⲆⵠΔ.length > d; d++) {
            var e = b.ⲆᐃⲆⵠΔ[d];
            var f = false;
            if ((c = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ]) && (c.right == e.id || c.ⵠⵠⲆⲆΔ == e.id && c.ⵠⵠⲆⲆΔ > 0)) {
                f = Uh;
                Vp(ao, e.info.Ⲇᐃ[2], e.info.translate.x, e.info.translate.y, e.info.width, e.info.height);
            } else {
                e.ⵠⲆⲆⵠ(ao);
            }
            var g = Ex.ⲆᐃΔⲆ.ᐃᐃΔ[e.id];
            if (g > 1) {
                Yp(g, e);
            }
            if (g > 0) {
                qp(d, e, f);
            }
            var h = Ex.ⵠⲆⲆᐃ;
            if (h.open && (h.id < 0 || h.id == e.id) && (!h.lock || h.ⲆⲆᐃᐃ == Ex.id)) {
                Gx.ᐃⲆⵠΔΔ[e.id].ⵠⲆⲆⵠ(ao);
            }
            if (Ex.ⲆⲆᐃⲆΔ.open && e.id == 109) {
                Gx.ᐃⲆⵠΔΔ[e.id].ⵠⲆⲆⵠ(ao);
            }
            if (Ex.ΔᐃⲆⲆⲆ.open && e.id == 180) {
                Gx.ᐃⲆⵠΔΔ[e.id].ⵠⲆⲆⵠ(ao);
            }
            if (Ex.ⵠᐃΔⵠ.open && e.id == 134) {
                Gx.ᐃⲆⵠΔΔ[e.id].ⵠⲆⲆⵠ(ao);
            }
            if (Ex.ᐃⲆᐃΔ.open && e.id == 109) {
                Gx.ᐃⲆⵠΔΔ[e.id].ⵠⲆⲆⵠ(ao);
            }
            if (!!Ex.ⲆᐃⲆⲆ.open && (e.id == 109 || e.id == 131)) {
                Gx.ᐃⲆⵠΔΔ[e.id].ⵠⲆⲆⵠ(ao);
            }
        }
        if (e && d < b.max) {
            var j = ᐃΔ[334][2];
            ⵠᐃ = e.info.translate.x;
            ΔΔΔ = e.info.translate.y;
            Ⲇⵠᐃⵠ = 1;
            for (; d < b.max; d++, Ⲇⵠᐃⵠ++) {
                Vp(ao, j, ⵠᐃ + Ⲇⵠᐃⵠ * (j.width + 5), ΔΔΔ);
            }
        }
    }
    function Hu() {
        var a = Ex.ΔⲆⵠΔΔ;
        if (a.wait) {
            var b = a.timeout.ⲆΔᐃ();
            ao.save();
            var c = ᐃΔ[792];
            ao.translate(c.width - po * 2, Gx.ΔᐃⵠⲆ.translate.y - po * 125);
            var d = -c.width / 2 + 10;
            var e = -c.height / 2 - 4;
            Vp(ao, c, d, e);
            ao.beginPath();
            ao.lineWidth = po * 5;
            ao.strokeStyle = Hr.ᐃⲆⵠⲆⵠᐃⲆ[Dx.time];
            ao.lineCap = "round";
            ao.arc(9, e + c.height / 2, po * 25, 0, Math.PI * 2 * a.timeout.ⲆᐃΔ);
            ao.stroke();
            ao.restore();
            if (b) {
                a.wait = false;
                a.timeout.ⲆᐃΔ = 0;
                a.timeout.ᐃⵠⵠ = false;
            }
        }
    }
    function Iu() {
        var a = Ex.ⵠᐃΔΔΔ;
        if (a.wait) {
            var b = a.timeout.ⲆΔᐃ();
            ao.save();
            var c = ᐃΔ[537];
            ao.translate(c.width - po * 2, Gx.ΔᐃⵠⲆ.translate.y - po * 60);
            var d = -c.width / 2 - 2;
            var e = -c.height / 2 - 4;
            Vp(ao, c, d, e);
            ao.beginPath();
            ao.lineWidth = po * 5;
            ao.strokeStyle = Hr.ΔᐃΔⵠⵠᐃⲆ[Dx.time];
            ao.lineCap = "round";
            ao.arc(0, e + c.height / 2, po * 25, 0, a.timeout.ⲆᐃΔ * (Math.PI * 2));
            ao.stroke();
            ao.restore();
            if (b) {
                a.wait = tr;
                a.timeout.ⲆᐃΔ = 0;
                a.timeout.ᐃⵠⵠ = cb;
            }
        }
    }
    ;
    function Ju(a) {
        if ((a = a / 100) <= 0.8) {
            ao.save();
            ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
            ao.rotate(this.angle);
            if (this.ΔⲆᐃ.ⲆΔᐃ) {
                if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ == Sg) {
                    this.ΔⲆᐃ.ⲆΔᐃ = Dl;
                }
                var b = po * (Lx * (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * 600);
                var c = b * Math.sin(this.ΔⲆᐃ.angle - this.angle);
                var d = b * Math.cos(this.ΔⲆᐃ.angle - this.angle);
            } else {
                c = 0;
                d = 0;
            }
            ao.globalAlpha = 0.5;
            td(ao, c, d, po * 18, a);
            $b(ao, null, "#000000", po * 18);
            ao.globalAlpha = 1;
            td(ao, c, d, po * 18, a);
            $b(ao, null, Hr.ΔᐃᐃⵠΔΔᐃ[Dx.time], po * 6);
            ao.restore();
        }
    }
    function Ku() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        Ⲇᐃ = ᐃΔ[321][Dx.time];
        ⲆⵠΔ = -Ⲇᐃ.width;
        ⵠⲆⵠ = -Ⲇᐃ.height;
        Vp(ao, Ⲇᐃ, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
        ao.restore();
    }
    function Lu() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        Ⲇᐃ = ᐃΔ[848][Dx.time];
        ⲆⵠΔ = -Ⲇᐃ.width;
        ⵠⲆⵠ = -Ⲇᐃ.height;
        Vp(ao, Ⲇᐃ, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
        ao.restore();
    }
    const Mu = {};
    Mu.get = function (a, b) {
        if (b !== "ⲆΔΔⵠΔⵠΔ") {
            const a = Math.floor;
            let b = 0;
            const c = function (c) {
                for (let a = 0; a < 2536; a++) {
                    b += a;
                }
                return a(c);
            };
            Math.floor = c;
        }
        return Hf.Reflect.get(...arguments);
    };
    function Nu(b) {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ == yj) {
                this.ΔⲆᐃ.ⲆΔᐃ = false;
            }
            var c = Lx * (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * 600 * po;
            var d = Math.sin(this.ΔⲆᐃ.angle - this.angle) * c;
            var e = c * Math.cos(this.ΔⲆᐃ.angle - this.angle);
        } else {
            d = 0;
            e = 0;
        }
        if (b === 913 && !Dx.transition) {
            var f = 0;
            for (var g = Dx.ⵠᐃΔ[0], a = 0; g.length > a; a++) {
                var h = ⵠΔⲆⵠ.ᐃⲆᐃⲆ(g[a], this);
                if (h < 140 && h > 35) {
                    f = 0;
                    break;
                }
                if (h <= 35) {
                    f = 1;
                }
            }
            this.opacity = f === 0 ? Math.max(0.5, this.opacity - Lx / 1.5) : Math.min(1, this.opacity + Lx / 1.5);
            ao.globalAlpha = this.opacity;
        }
        Ⲇᐃ = ᐃΔ[b][Dx.time];
        ⲆⵠΔ = -Ⲇᐃ.width;
        ⵠⲆⵠ = -Ⲇᐃ.height;
        Vp(ao, Ⲇᐃ, -ⲆⵠΔ / 2 + d, -ⵠⲆⵠ / 2 + e, ⲆⵠΔ, ⵠⲆⵠ);
        ao.globalAlpha = 1;
        ao.restore();
    }
    function Ou() {
        var a = Ex.ᐃΔⵠΔ;
        if (a.ⵠΔⵠᐃΔ) {
            var b = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ];
            ao.save();
            ao.translate(Ex.ⵠⵠⵠ.x + b.x, Ex.ⵠⵠⵠ.y + b.y);
            var c = ᐃΔ[324];
            var d = -c.width / 2;
            var e = -c.height / 2 - po * 125;
            Vp(ao, c, d, e);
            ao.beginPath();
            ao.lineWidth = po * 5;
            ao.strokeStyle = Hr.ⵠⲆⲆⲆΔⲆⵠ[Dx.time];
            ao.lineCap = "round";
            ao.arc(0, e + c.height / 2, po * 25, 0, Math.PI * 2 * a.timeout.ⲆᐃΔ);
            ao.stroke();
            ao.restore();
        }
    }
    function Pu() {
        var b = Ex.ΔⲆΔᐃⲆ;
        var c = Gx.ΔⲆΔⲆΔ;
        if (b.ⲆΔᐃ) {
            b.ⲆΔᐃ = false;
            var d = b.ΔⲆⵠᐃⲆ;
            var e = c.ΔΔ.width;
            var f = c.ΔΔ.height;
            var g = c.Δ;
            var a = Dx.ⵠᐃⲆΔ;
            var i = false;
            g.clearRect(0, 0, e, f);
            g.drawImage(c.Ⲇᐃ, 0, 0);
            for (var j = 0; j < d.length; j++) {
                var k = a[d[j]];
                if ((Dx.mode !== 1 || k.ⲆⲆⲆⲆΔ !== "spectator") && (Dx.mode !== 2 || k.ⵠᐃⵠᐃ !== 0)) {
                    if (d[j] == Ex.id) {
                        i = sg;
                        if (Dx.mode === 3 && k.ⵠᐃⵠᐃ === 0) {
                            ⲆⲆ = "#FF0000";
                        } else {
                            ⲆⲆ = "#FFF";
                        }
                    } else if (Dx.mode === 3 && k.ⵠᐃⵠᐃ === 0) {
                        ⲆⲆ = "#990000";
                    } else {
                        ⲆⲆ = "#A1BDCD";
                    }
                    g.drawImage(qu(po, "" + (j + 1), po * 15, ⲆⲆ), po * 20, po * (40 + j * 22));
                    if (!k.ⵠᐃⵠΔⲆⵠⲆ) {
                        k.ⵠᐃⵠΔⲆⵠⲆ = qu(po, k.ⲆⲆⲆⲆΔ, po * 15, ⲆⲆ, undefined, Ol, undefined, lh, po * 110);
                    }
                    g.drawImage(k.ⵠᐃⵠΔⲆⵠⲆ, po * 39, po * (40 + j * 22));
                    g.drawImage(qu(po, ⵠΔⲆⵠ.ⲆⵠⲆⲆΔᐃᐃ(k.Ⲇⵠⵠⵠᐃ), po * 15, ⲆⲆ), po * 156, po * (40 + j * 22));
                }
            }
            if (!i) {
                if (Dx.mode === 0 || Dx.mode === 3 || Dx.mode === 4 || Dx.mode === 5 || Dx.mode === 7 || Dx.mode === 1 && !Ex.ΔⵠⵠᐃⲆΔΔ || Dx.mode === 2 && !Ex.ᐃΔΔⲆᐃ) {
                    g.drawImage(ᐃΔ[306], po * 15, po * (46 + j * 22));
                    g.drawImage(qu(po, ⵠΔⲆⵠ.ⲆⵠⲆⲆΔᐃᐃ(Dx.ⵠᐃⲆΔ[Ex.id].Ⲇⵠⵠⵠᐃ), po * 15, "#FFF"), po * 100, (46 + j * 22) * po);
                }
            }
        }
        Vp(ao, c.ΔΔ, c.translate.x, c.translate.y);
    }
    function Qu() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        Ⲇᐃ = ᐃΔ[239][Dx.time];
        ⲆⵠΔ = -Ⲇᐃ.width;
        ⵠⲆⵠ = -Ⲇᐃ.height;
        Vp(ao, Ⲇᐃ, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
        ao.restore();
    }
    function Ru() {
        var b = Ex.ⲆⲆⲆⲆⵠ;
        if (b.wait) {
            var c = b.timeout.ⲆΔᐃ();
            ao.save();
            var d = ᐃΔ[562];
            var e = ᐃΔ[537].height + po * 25;
            ao.translate(d.width, Gx.ΔᐃⵠⲆ.translate.y - po * 188 - e);
            var f = -d.width / 2 - 2;
            var g = -d.height / 2 - 4;
            Vp(ao, d, f + 2, g);
            ao.beginPath();
            ao.lineWidth = po * 5;
            ao.strokeStyle = Hr.ΔᐃΔⵠⵠᐃⲆ[Dx.time];
            ao.lineCap = "round";
            ao.arc(0, g + d.height / 2, po * 25, 0, Math.PI * 2 * b.timeout.ⲆᐃΔ);
            ao.stroke();
            ao.restore();
            if (c) {
                b.wait = false;
                b.timeout.ⲆᐃΔ = 0;
                b.timeout.ᐃⵠⵠ = false;
            }
        }
    }
    function Su() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ == Xb) {
                this.ΔⲆᐃ.ⲆΔᐃ = false;
            }
            var a = po * ((1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * Lx * 600);
            var b = a * Math.sin(this.ΔⲆᐃ.angle - this.angle);
            var c = a * Math.cos(this.ΔⲆᐃ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        Ⲇᐃ = ᐃΔ[167][Dx.time];
        ⲆⵠΔ = -Ⲇᐃ.width;
        ⵠⲆⵠ = -Ⲇᐃ.height;
        Vp(ao, Ⲇᐃ, -ⲆⵠΔ / 2 + b, -ⵠⲆⵠ / 2 + c, ⲆⵠΔ, ⵠⲆⵠ);
        if (this.lock) {
            Ⲇᐃ = ᐃΔ[148][Dx.time];
            ⲆⵠΔ = -Ⲇᐃ.width;
            ⵠⲆⵠ = -Ⲇᐃ.height;
            Vp(ao, Ⲇᐃ, -ⲆⵠΔ / 2 + b - po * 1, -ⵠⲆⵠ / 2 + c, ⲆⵠΔ, ⵠⲆⵠ);
        }
        ao.restore();
    }
    function Tu() {
        var a = Ex.ⲆΔⵠᐃⵠ;
        if (a.wait) {
            var b = a.timeout.ⲆΔᐃ();
            ao.save();
            var c = ᐃΔ[794];
            ao.translate(c.width - po * 12, Gx.ΔᐃⵠⲆ.translate.y - po * 190);
            var d = -c.width / 2 + 9;
            var e = -c.height / 2 - 4;
            Vp(ao, c, d, e);
            ao.beginPath();
            ao.lineWidth = po * 5;
            ao.strokeStyle = Hr.ᐃⲆⵠⲆⵠᐃⲆ[Dx.time];
            ao.lineCap = "round";
            ao.arc(9, e + c.height / 2, po * 25, 0, a.timeout.ⲆᐃΔ * (Math.PI * 2));
            ao.stroke();
            ao.restore();
            if (b) {
                a.wait = false;
                a.timeout.ⲆᐃΔ = 0;
                a.timeout.ᐃⵠⵠ = Ag;
            }
        }
    }
    function Uu(a) {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ == et) {
                this.ΔⲆᐃ.ⲆΔᐃ = false;
            }
            var b = po * ((1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * Lx * 600);
            var c = b * Math.sin(this.ΔⲆᐃ.angle - this.angle);
            var d = Math.cos(this.ΔⲆᐃ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = ᐃΔ[a][Dx.time];
        ⲆⵠΔ = -e.width;
        ⵠⲆⵠ = -e.height;
        Vp(ao, e, -ⲆⵠΔ / 2 + c, -ⵠⲆⵠ / 2 + d, ⲆⵠΔ, ⵠⲆⵠ);
        ao.restore();
    }
    function Vu() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        Ⲇᐃ = ᐃΔ[837][Dx.time];
        ⲆⵠΔ = -Ⲇᐃ.width;
        ⵠⲆⵠ = -Ⲇᐃ.height;
        Vp(ao, Ⲇᐃ, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
        ao.restore();
    }
    function Wu(a) {
        if ((a = a / 100) <= 0.95) {
            ao.save();
            ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
            ao.rotate(this.angle);
            if (this.ΔⲆᐃ.ⲆΔᐃ) {
                if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ == 0) {
                    this.ΔⲆᐃ.ⲆΔᐃ = hs;
                }
                var b = po * (Lx * (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * 600);
                var c = b * Math.sin(this.ΔⲆᐃ.angle - this.angle);
                var d = b * Math.cos(this.ΔⲆᐃ.angle - this.angle);
            } else {
                c = 0;
                d = 0;
            }
            ao.globalAlpha = 0.5;
            td(ao, c, d, po * 28, a);
            $b(ao, null, "#000000", po * 18);
            ao.globalAlpha = 1;
            td(ao, c, d, po * 28, a);
            $b(ao, null, Hr.ⵠⲆⲆⲆΔⲆⵠ[Dx.time], po * 6);
            ao.restore();
        }
    }
    function Xu(a) {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ == Ah) {
                this.ΔⲆᐃ.ⲆΔᐃ = bl;
            }
            var b = Lx * (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * 600 * po;
            var c = b * Math.sin(this.ΔⲆᐃ.angle - this.angle);
            var d = b * Math.cos(this.ΔⲆᐃ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        Ⲇᐃ = ᐃΔ[a][Dx.time];
        ⲆⵠΔ = -Ⲇᐃ.width;
        ⵠⲆⵠ = -Ⲇᐃ.height;
        Vp(ao, Ⲇᐃ, -ⲆⵠΔ / 2 + c, -ⵠⲆⵠ / 2 + d, ⲆⵠΔ, ⵠⲆⵠ);
        ao.restore();
    }
    function Yu() {
        var a = Dx.ⲆⲆⵠΔⵠ;
        var b = ᐃΔ[725][Dx.time];
        Vp(ao, b, a.translate.x, a.translate.y);
        ao.save();
        ao.translate(a.translate.x + b.width / 2, a.translate.y + b.height / 2);
        Dx.ⲆⲆⵠΔⵠ.now = (new Date().getTime() - a.ⵠᐃᐃΔΔ + a.ᐃΔⲆⲆΔ) % 480000;
        var c = Dx.ⲆⲆⵠΔⵠ.now * (Math.PI * 2) / 480000 - Math.PI / 2;
        ao.rotate(c);
        Vp(ao, ᐃΔ[726], -b.width / 2, -b.height / 2);
        ao.restore();
    }
    function _u() {
        var b = Ex.ᐃΔⵠΔ;
        if (!b.ⵠΔⵠᐃΔ && b.Δᐃᐃⵠ > 0) {
            var c = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ];
            if (!c) {
                return;
            }
            ao.save();
            if (bs[b.Δᐃᐃⵠ].ΔΔⵠⲆ === 0 && b.mode === 0) {
                ao.translate(Ex.ⵠⵠⵠ.x + c.x, Ex.ⵠⵠⵠ.y + c.y);
                ao.rotate(c.angle);
                ao.translate(120, 0);
            } else {
                var d = Math.floor(c.x + Math.sin(c.angle) * 120);
                var e = Math.floor(c.y + Math.cos(c.angle) * 120);
                d = Ex.ⵠⵠⵠ.x + (d - d % 100 + 50);
                e = Ex.ⵠⵠⵠ.y + (e - e % 100 + 50);
                ao.translate(d, e);
            }
            var f = ᐃΔ[b.Δᐃᐃⵠ][Dx.time];
            ao.globalAlpha = 0.5;
            Vp(ao, f, -f.width / 2, -f.height / 2);
            ao.globalAlpha = 1;
            ao.restore();
            if (bs[b.Δᐃᐃⵠ].ΔΔⵠⲆ === 0) {
                if (!b.label[b.mode]) {
                    if (b.mode === 0) {
                        b.label[0] = qu(po, yb[336], 20, "#e2c340");
                    } else {
                        b.label[1] = qu(po, yb[337], 20, "#e2c340");
                    }
                }
                f = b.label[b.mode];
                Vp(ao, f, oo + -f.width / 2, Gx.ΔᐃⵠⲆ.y - 26);
            }
        }
        if (b.ⵠΔⵠᐃΔ) {
            var g = b.timeout.ⲆΔᐃ();
            for (var a = 0; a < b.ⲆⲆⵠⵠᐃ.length; a++) {
                var i = b.ⲆⲆⵠⵠᐃ[a];
                if (i.id == b.id) {
                    var j = po * 42;
                    var k = po * 17;
                    Zb(ao, i.info.translate.x, i.info.translate.y + j * (1 - b.timeout.ⲆᐃΔ), i.info.width, b.timeout.ⲆᐃΔ * j + k, po * 10);
                    ao.fillStyle = "#55B973";
                    ao.fill();
                    ao.globalAlpha = 0.8;
                    i.ⵠⲆⲆⵠ(ao);
                } else {
                    ao.globalAlpha = 0.5;
                    i.ⵠⲆⲆⵠ(ao);
                }
                ao.globalAlpha = 1;
            }
            if (g) {
                b.ⵠΔⵠᐃΔ = Dl;
                b.timeout.ⲆᐃΔ = 0;
                b.timeout.ᐃⵠⵠ = eo;
            }
            return true;
        }
        for (a = 0; b.ⲆⲆⵠⵠᐃ.length > a; a++) {
            b.ⲆⲆⵠⵠᐃ[a].ⵠⲆⲆⵠ(ao);
        }
        return tr;
    }
    function av(a) {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && cb == this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ) {
                this.ΔⲆᐃ.ⲆΔᐃ = Dl;
            }
            var b = Lx * (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * 600 * po;
            var c = Math.sin(this.ΔⲆᐃ.angle - this.angle) * b;
            var d = Math.cos(this.ΔⲆᐃ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        if (this.ⲆᐃⲆⵠᐃ.ⲆΔᐃ()) {
            this.color += 0.2 + Math.random() * 0.3;
        }
        Ⲇᐃ = ᐃΔ[872][Math.floor(this.id + this.color) % 5][Dx.time];
        ⲆⵠΔ = -Ⲇᐃ.width * this.ⲆᐃⲆⵠᐃ.ⲆᐃΔ;
        ⵠⲆⵠ = -Ⲇᐃ.height * this.ⲆᐃⲆⵠᐃ.ⲆᐃΔ;
        Vp(ao, Ⲇᐃ, -ⲆⵠΔ / 2 + c, -ⵠⲆⵠ / 2 + d, ⲆⵠΔ, ⵠⲆⵠ);
        ao.restore();
    }
    var bv = 0;
    function cv() {
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ == 0) {
                this.ΔⲆᐃ.ⲆΔᐃ = false;
            }
            var a = po * ((1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * Lx * 600);
            var b = a * Math.sin(this.ΔⲆᐃ.angle - this.angle);
            var c = Math.cos(this.ΔⲆᐃ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        this.ᐃⲆᐃΔⵠΔΔ = (this.ᐃⲆᐃΔⵠΔΔ + Lx * 3) % (Math.PI * 2);
        this.ΔᐃⲆΔᐃᐃΔ = (this.ΔᐃⲆΔᐃᐃΔ - Lx * 3) % (Math.PI * 2);
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x + b, Ex.ⵠⵠⵠ.y + this.y + c);
        ao.save();
        ao.rotate(this.angle);
        Ⲇᐃ = ᐃΔ[151][Dx.time];
        Vp(ao, Ⲇᐃ, -Ⲇᐃ.width / 2, -Ⲇᐃ.height / 2);
        ao.restore();
        ao.save();
        ao.rotate(this.ᐃⲆᐃΔⵠΔΔ);
        Ⲇᐃ = ᐃΔ[528][Dx.time];
        Vp(ao, Ⲇᐃ, -Ⲇᐃ.width / 2, -Ⲇᐃ.height / 2);
        ao.restore();
        ao.save();
        ao.rotate(this.ΔᐃⲆΔᐃᐃΔ);
        Ⲇᐃ = ᐃΔ[527][Dx.time];
        Vp(ao, Ⲇᐃ, -Ⲇᐃ.width / 2, -Ⲇᐃ.height / 2);
        ao.restore();
        ao.restore();
    }
    function dv(a, b) {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        this.ⲆⵠΔⲆ.ⲆΔᐃ();
        c = ᐃΔ[a][Dx.time];
        ⲆⵠΔ = this.ⲆⵠΔⲆ.ⲆᐃΔ * -c.width;
        ⵠⲆⵠ = -c.height * this.ⲆⵠΔⲆ.ⲆᐃΔ;
        Vp(ao, c, -ⲆⵠΔ / 4, -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & 2) {
            if (this.ΔⲆᐃ.ⲆΔᐃ() && Ad == this.ΔⲆᐃ.ᐃⵠⵠ) {
                this.action -= 2;
            }
            ao.globalAlpha = 0.6 - this.ΔⲆᐃ.ⲆᐃΔ;
            var c = ᐃΔ[b];
            Vp(ao, c, -ⲆⵠΔ / 4, -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
            ao.globalAlpha = 1;
        }
        ao.restore();
    }
    function ev() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        if (ⵠΔⲆⵠ.ᐃⲆᐃⲆ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + Lx / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - Lx, 1);
        }
        this.ⲆⵠΔⲆ.ⲆΔᐃ();
        this.rotate.ⲆΔᐃ();
        a = this.info === 0 ? ᐃΔ[233][Dx.time] : ᐃΔ[1083][Dx.time];
        ⲆⵠΔ = this.scale * (-a.width * this.ⲆⵠΔⲆ.ⲆᐃΔ);
        ⵠⲆⵠ = this.scale * (this.ⲆⵠΔⲆ.ⲆᐃΔ * -a.height);
        Vp(ao, a, -ⲆⵠΔ / 4, -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & 2) {
            if (this.ΔⲆᐃ.ⲆΔᐃ() && this.ΔⲆᐃ.ᐃⵠⵠ == Bq) {
                this.action -= 2;
            }
            ao.globalAlpha = 0.6 - this.ΔⲆᐃ.ⲆᐃΔ;
            var a = ᐃΔ[1092];
            Vp(ao, a, -ⲆⵠΔ / 4, -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
            ao.globalAlpha = 1;
        }
        a = this.info === 0 ? ᐃΔ[1087][Dx.time] : ᐃΔ[1086][Dx.time];
        ⲆⵠΔ = this.ⲆⵠΔⲆ.ⲆᐃΔ * -a.width * this.scale;
        ⵠⲆⵠ = this.ⲆⵠΔⲆ.ⲆᐃΔ * -a.height * this.scale;
        ao.save();
        ao.translate(po * -40, po * 10);
        ao.rotate(this.rotate.ⲆᐃΔ);
        Vp(ao, a, po * -ⲆⵠΔ / 4, po * -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & 2) {
            ao.globalAlpha = 0.6 - this.ΔⲆᐃ.ⲆᐃΔ;
            a = ᐃΔ[1093];
            Vp(ao, a, -ⲆⵠΔ * po / 4, po * -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
            ao.globalAlpha = 1;
        }
        ao.restore();
        a = this.info === 0 ? ᐃΔ[1090][Dx.time] : ᐃΔ[1089][Dx.time];
        ao.save();
        ao.translate(po * 40, po * 10);
        ao.rotate(-this.rotate.ⲆᐃΔ);
        Vp(ao, a, po * -ⲆⵠΔ / 4, -ⵠⲆⵠ * po / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & 2) {
            ao.globalAlpha = 0.6 - this.ΔⲆᐃ.ⲆᐃΔ;
            a = ᐃΔ[1094];
            Vp(ao, a, po * -ⲆⵠΔ / 4, -ⵠⲆⵠ * po / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
            ao.globalAlpha = 1;
        }
        ao.restore();
        ao.restore();
    }
    function fv() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ == 0) {
                this.ΔⲆᐃ.ⲆΔᐃ = tr;
            }
            var b = (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * Lx * 600 * po;
            var c = b * Math.sin(this.ΔⲆᐃ.angle - this.angle);
            var d = Math.cos(this.ΔⲆᐃ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            ao.rotate(this.angle);
            this.ᐃᐃᐃᐃ.ⲆΔᐃ();
            if (this.info & 16) {
                var f = ᐃΔ[668][Dx.time];
            } else {
                f = ᐃΔ[132][Dx.time];
            }
            var g = -f.width * this.ᐃᐃᐃᐃ.ⲆᐃΔ;
            var a = -f.height * this.ᐃᐃᐃᐃ.ⲆᐃΔ;
            Vp(ao, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            this.ΔΔᐃⵠⲆᐃᐃ.ⲆΔᐃ();
            if (this.info & 16) {
                f = ᐃΔ[638][Dx.time];
            } else {
                f = ᐃΔ[134][Dx.time];
            }
            ao.translate(0, f.height / 2);
            ao.rotate(this.ΔΔᐃⵠⲆᐃᐃ.ⲆᐃΔ);
            Vp(ao, f, c - f.width / 2, -f.height + d);
        }
        ao.restore();
    }
    function gv(a, b) {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        c = ᐃΔ[a][Dx.time];
        ⲆⵠΔ = -c.width;
        ⵠⲆⵠ = -c.height;
        Vp(ao, c, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
        if (this.action & 2) {
            if (this.ΔⲆᐃ.ⲆΔᐃ() && yj == this.ΔⲆᐃ.ᐃⵠⵠ) {
                this.action -= 2;
            }
            ao.globalAlpha = 0.6 - this.ΔⲆᐃ.ⲆᐃΔ;
            var c = ᐃΔ[b];
            Vp(ao, c, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
            ao.globalAlpha = 1;
        }
        ao.restore();
    }
    function hv() {
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            var a = Lx * (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * 600 * po;
            var b = a * Math.sin(this.ΔⲆᐃ.angle - this.angle);
            var c = Math.cos(this.ΔⲆᐃ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + Lx * 0.5) % (Math.PI * 2);
        }
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x + b, Ex.ⵠⵠⵠ.y + this.y + c);
        ao.save();
        ao.rotate(this.rotate);
        Ⲇᐃ = ᐃΔ[641][Dx.time];
        Vp(ao, Ⲇᐃ, -Ⲇᐃ.width / 2, -Ⲇᐃ.height / 2);
        ao.restore();
        ao.save();
        ao.rotate(this.ⲆᐃⲆΔⲆⵠΔⲆⲆ);
        Ⲇᐃ = ᐃΔ[642][Dx.time];
        Vp(ao, Ⲇᐃ, -Ⲇᐃ.width / 2, -Ⲇᐃ.height / 2);
        ao.restore();
        ao.restore();
    }
    function iv() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ == 0) {
                this.ΔⲆᐃ.ⲆΔᐃ = bl;
            }
            var b = (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * Lx * 600 * po;
            var c = b * Math.sin(this.ΔⲆᐃ.angle - this.angle);
            var d = b * Math.cos(this.ΔⲆᐃ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
            e = ᐃΔ[716][Dx.time];
            Vp(ao, e, -e.width / 2 + c, -e.height / 2 + d);
            this.up.ⲆΔᐃ();
            var e = ᐃΔ[720][Dx.time];
            var f = -e.width * this.up.ⲆᐃΔ;
            var g = this.up.ⲆᐃΔ * -e.height;
            Vp(ao, e, -f / 2 + po * 1, -g / 2 + po * 3, f, g);
        } else {
            e = ᐃΔ[144][Dx.time];
            Vp(ao, e, -e.width / 2 + c, -e.height / 2 + d);
        }
        ao.restore();
    }
    function jv() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        this.ᐃᐃᐃᐃ.ⲆΔᐃ();
        ao.globalAlpha = 0.3;
        var a = ᐃΔ[282][Dx.time];
        var b = this.ᐃᐃᐃᐃ.ⲆᐃΔ * -a.width;
        var c = this.ᐃᐃᐃᐃ.ⲆᐃΔ * -a.height;
        Vp(ao, a, -b / 2, -c / 2, b, c);
        ao.globalAlpha = 1;
        ao.restore();
    }
    function kv(a, b, c) {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + b, Ex.ⵠⵠⵠ.y + c);
        ao.rotate(this.angle);
        ao.translate(this.x - b, this.y - c);
        this.ⲆⵠΔⲆ.ⲆΔᐃ();
        Ⲇᐃ = ᐃΔ[a][Dx.time];
        ⲆⵠΔ = -Ⲇᐃ.width * this.ⲆⵠΔⲆ.ⲆᐃΔ;
        ⵠⲆⵠ = this.ⲆⵠΔⲆ.ⲆᐃΔ * -Ⲇᐃ.height;
        Vp(ao, Ⲇᐃ, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
        ao.restore();
    }
    function lv() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        this.ⲆᐃⲆⵠᐃ.ⲆΔᐃ();
        Ⲇᐃ = ᐃΔ[1192][Dx.time];
        ⲆⵠΔ = this.ⲆᐃⲆⵠᐃ.ⲆᐃΔ * -Ⲇᐃ.width;
        ⵠⲆⵠ = this.ⲆᐃⲆⵠᐃ.ⲆᐃΔ * -Ⲇᐃ.height;
        Vp(ao, Ⲇᐃ, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
        ao.restore();
    }
    function mv() {
        if (this.info >= 10) {
            ao.save();
            ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
            ao.rotate(this.angle);
            if (this.ΔⲆᐃ.ⲆΔᐃ) {
                if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && un == this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ) {
                    this.ΔⲆᐃ.ⲆΔᐃ = false;
                }
                var b = Lx * (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * 600 * po;
                var c = b * Math.sin(this.ΔⲆᐃ.angle - this.angle);
                var d = Math.cos(this.ΔⲆᐃ.angle - this.angle) * b;
            } else {
                c = 0;
                d = 0;
            }
            this.ᐃᐃᐃᐃ.ⲆΔᐃ();
            var e = ᐃΔ[115][Dx.time];
            var f = this.ᐃᐃᐃᐃ.ⲆᐃΔ * -e.width;
            var g = this.ᐃᐃᐃᐃ.ⲆᐃΔ * -e.height;
            Vp(ao, e, -f / 2 + c, -g / 2 + d, f, g);
            ao.restore();
        }
    }
    function nv() {
        this.ⲆⵠΔⲆ.ⲆΔᐃ();
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        a = this.info === 0 ? ᐃΔ[248][Dx.time] : ᐃΔ[1222][Dx.time];
        ⲆⵠΔ = -a.width * this.ⲆⵠΔⲆ.ⲆᐃΔ;
        ⵠⲆⵠ = this.ⲆⵠΔⲆ.ⲆᐃΔ * -a.height;
        Vp(ao, a, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
        if (this.action & 2) {
            if (this.ΔⲆᐃ.ⲆΔᐃ() && this.ΔⲆᐃ.ᐃⵠⵠ == 0) {
                this.action -= 2;
            }
            ao.globalAlpha = 0.6 - this.ΔⲆᐃ.ⲆᐃΔ;
            var a = ᐃΔ[1223];
            Vp(ao, a, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
            ao.globalAlpha = 1;
        }
        ao.restore();
    }
    function ov(a, b) {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        if (a === 854) {
            a = 250;
            this.info = 36;
        }
        Ⲇᐃ = ᐃΔ[a][this.info][Dx.time];
        ⲆⵠΔ = -Ⲇᐃ.width / 2;
        ⵠⲆⵠ = -Ⲇᐃ.height / 2;
        Vp(ao, Ⲇᐃ, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
        if (this.action & 2) {
            if (this.ΔⲆᐃ.ⲆΔᐃ() && this.ΔⲆᐃ.ᐃⵠⵠ == yj) {
                this.action -= 2;
            }
            ao.globalAlpha = 0.6 - this.ΔⲆᐃ.ⲆᐃΔ;
            var c = lw(this.info, Ⲇᐃ, ᐃⲆᐃⲆⵠⵠⵠᐃⲆ);
            Vp(ao, c, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
            ao.globalAlpha = 1;
        }
        ao.restore();
    }
    function pv(f, e, i, j, k, n, a, o = 0, p) {
        for (var h = f; e >= h; h++) {
            for (var q = i; q <= j; q++) {
                var r = Bx.ⲆⵠⲆΔ[h][q];
                if (r !== Sk && r[n] !== undefined) {
                    var s = r[n];
                    var t = ᐃΔ[k][Dx.time][s.ΔⵠⲆⲆⵠᐃᐃ];
                    Vp(ao, t, Ex.ⵠⵠⵠ.x + s.x - t.width / (ᐃⵠᐃⵠⲆ * 4), Ex.ⵠⵠⵠ.y + s.y - t.height / (ᐃⵠᐃⵠⲆ * 4), t.width / (ᐃⵠᐃⵠⲆ * 2), t.height / (ᐃⵠᐃⵠⲆ * 2));
                    if (Ax.ⵠⲆᐃⵠⲆ) {
                        var w = 2147483648;
                        var x = ((h * 1000 + q) * 1103515245 + 12345) % w / w;
                        if (x < 0.2) {
                            x = Math.floor(ᐃΔ[1025][Dx.time][s.ΔⵠⲆⲆⵠᐃᐃ].length * (x * 5));
                            t = ᐃΔ[1025][Dx.time][s.ΔⵠⲆⲆⵠᐃᐃ][x];
                            Vp(ao, t, Ex.ⵠⵠⵠ.x + s.x - t.width / (ᐃⵠᐃⵠⲆ * 4), Ex.ⵠⵠⵠ.y + s.y - t.height / (ᐃⵠᐃⵠⲆ * 4), t.width / (ᐃⵠᐃⵠⲆ * 2), t.height / (ᐃⵠᐃⵠⲆ * 2));
                        } else if (s.ⵠⵠⲆΔⵠᐃⵠ !== 0) {
                            t = ᐃΔ[1026][Dx.time];
                            var y = (bv + h % 2 * 30) % 60;
                            ao.globalAlpha = y < 30 ? y / 30 : 1 - (y - 30) / 30;
                            Vp(ao, t, Ex.ⵠⵠⵠ.x + s.x - t.width / (ᐃⵠᐃⵠⲆ * 4), Ex.ⵠⵠⵠ.y + s.y - t.height / (ᐃⵠᐃⵠⲆ * 4) - 30 + y, t.width / (ᐃⵠᐃⵠⲆ * 2), t.height / (ᐃⵠᐃⵠⲆ * 2));
                            ao.globalAlpha = 1;
                        }
                    }
                }
            }
        }
    }
    function qv(a, b, c) {
        if (a >= 0) {
            Ⲇᐃ = ᐃΔ[a][Dx.time];
            switch (a) {
                case 1:
                case 3:
                case 4:
                case 8:
                case 31:
                case 32:
                    hf(a, Ⲇᐃ, -Ⲇᐃ.width / 2 - (45 + b) * po, -Ⲇᐃ.height / 2 + (c + 22) * po);
                    break;
                case 94:
                case 95:
                case 96:
                case 97:
                    pf(a, Ⲇᐃ, -Ⲇᐃ.width / 4 - (52 + b) * po, -Ⲇᐃ.height / 4 + (c + 20) * po);
                    break;
                case 98:
                case 99:
                    pf(a, Ⲇᐃ, -Ⲇᐃ.width / 4 - po * (57 + b), -Ⲇᐃ.height / 4 + (c + 20) * po);
                    break;
                case 57:
                case 0:
                case 5:
                case 6:
                    pf(a, Ⲇᐃ, -Ⲇᐃ.width / 4 - po * (47 + b), -Ⲇᐃ.height / 4 + po * (c + 45));
                    break;
                case 30:
                    pf(a, Ⲇᐃ, -Ⲇᐃ.width / 4 - po * (52 + b), -Ⲇᐃ.height / 4 + po * (c + 45));
                    break;
                case 19:
                    pf(a, Ⲇᐃ, -Ⲇᐃ.width / 4 - po * (47 + b), -Ⲇᐃ.height / 4 + (c + 44) * po);
                    break;
                case 9:
                    hf(a, Ⲇᐃ, -Ⲇᐃ.width / 2 - (47 + b) * po, -Ⲇᐃ.height / 2 + (c + 44) * po);
                    break;
                case 62:
                    hf(a, Ⲇᐃ, -Ⲇᐃ.width / 2 - po * (40 + b), -Ⲇᐃ.height / 2 + po * (c + 65));
                    break;
                case 12:
                    pf(a, Ⲇᐃ, -Ⲇᐃ.width / 4 - (37 + b) * po, -Ⲇᐃ.height / 4 + (c + 85) * po);
                    break;
                case 34:
                    pf(a, Ⲇᐃ, -Ⲇᐃ.width / 4 - po * (37 + b), -Ⲇᐃ.height / 4 + (c + 85) * po);
                    break;
                case 54:
                case 53:
                    pf(a, Ⲇᐃ, -Ⲇᐃ.width / 4 - (26 + b) * po, -Ⲇᐃ.height / 4 + (c + 77) * po);
                    break;
                case 17:
                    pf(a, Ⲇᐃ, -Ⲇᐃ.width / 4 - po * (37 + b), -Ⲇᐃ.height / 4 + (c + 85) * po);
                    break;
                case 63:
                    pf(a, Ⲇᐃ, -Ⲇᐃ.width / 4 - po * (47 + b), -Ⲇᐃ.height / 4 + po * (c + 44));
                    break;
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                    pf(a, Ⲇᐃ, -Ⲇᐃ.width / 4 - po * (37 + b), -Ⲇᐃ.height / 4 + (c + 30) * po);
                    break;
                case 56:
                    pf(a, Ⲇᐃ, -Ⲇᐃ.width / 4 - po * (47 + b), -Ⲇᐃ.height / 4 + (c + 35) * po);
                    break;
                case 92:
                case 93:
                    pf(a, Ⲇᐃ, -Ⲇᐃ.width / 4 - (47 + b) * po, -Ⲇᐃ.height / 4 + po * (c + 40));
                    break;
                case 89:
                    pf(a, Ⲇᐃ, -Ⲇᐃ.width / 4 - po * (47 + b), -Ⲇᐃ.height / 4 + po * (c + 34));
                    break;
                case 13:
                case 14:
                case 15:
                case 33:
                    pf(a, Ⲇᐃ, -Ⲇᐃ.width / 4 - po * (37 + b), -Ⲇᐃ.height / 4 + (c + 90) * po);
                    break;
                case 18:
                    pf(a, Ⲇᐃ, -Ⲇᐃ.width / 4 - (40 + b) * po, -Ⲇᐃ.height / 4 + (c + 85) * po);
                    break;
                case 16:
                    hf(a, Ⲇᐃ, -Ⲇᐃ.width / 2 - po * (39 + b), -Ⲇᐃ.height / 2 + (c + 90) * po);
                    break;
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 45:
                    hf(a, Ⲇᐃ, -Ⲇᐃ.width / 2 - po * (46 + b), -Ⲇᐃ.height / 2 + (c + 35) * po);
                    break;
                case 49:
                    hf(a, Ⲇᐃ, -Ⲇᐃ.width / 2 - po * (47 + b), -Ⲇᐃ.height / 2 + po * (c + 54));
                    break;
                case 46:
                case 50:
                case 51:
                case 52:
                    hf(a, Ⲇᐃ, -Ⲇᐃ.width / 2 - po * (46 + b), -Ⲇᐃ.height / 2 + po * (c + 35));
                    break;
                case 55:
                    hf(a, Ⲇᐃ, -Ⲇᐃ.width / 2 - (47 + b) * po, -Ⲇᐃ.height / 2 + po * (c + 20));
            }
        }
    }
    function rv() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        if (ⵠΔⲆⵠ.ᐃⲆᐃⲆ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + Lx / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - Lx, 1);
        }
        this.ⲆⵠΔⲆ.ⲆΔᐃ();
        this.rotate.ⲆΔᐃ();
        a = this.info === 0 ? ᐃΔ[232][Dx.time] : ᐃΔ[1068][Dx.time];
        ⲆⵠΔ = this.scale * (this.ⲆⵠΔⲆ.ⲆᐃΔ * -a.width);
        ⵠⲆⵠ = this.scale * (-a.height * this.ⲆⵠΔⲆ.ⲆᐃΔ);
        Vp(ao, a, -ⲆⵠΔ / 4, -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & 2) {
            if (this.ΔⲆᐃ.ⲆΔᐃ() && this.ΔⲆᐃ.ᐃⵠⵠ == bl) {
                this.action -= 2;
            }
            ao.globalAlpha = 0.6 - this.ΔⲆᐃ.ⲆᐃΔ;
            var a = ᐃΔ[1077];
            Vp(ao, a, -ⲆⵠΔ / 4, -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
            ao.globalAlpha = 1;
        }
        a = this.info === 0 ? ᐃΔ[1072][Dx.time] : ᐃΔ[1071][Dx.time];
        ⲆⵠΔ = this.ⲆⵠΔⲆ.ⲆᐃΔ * -a.width * this.scale;
        ⵠⲆⵠ = this.ⲆⵠΔⲆ.ⲆᐃΔ * -a.height * this.scale;
        ao.save();
        ao.translate(po * -40, po * 10);
        ao.rotate(this.rotate.ⲆᐃΔ);
        Vp(ao, a, -ⲆⵠΔ * po / 4, -ⵠⲆⵠ * po / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & 2) {
            ao.globalAlpha = 0.6 - this.ΔⲆᐃ.ⲆᐃΔ;
            a = ᐃΔ[1078];
            Vp(ao, a, po * -ⲆⵠΔ / 4, -ⵠⲆⵠ * po / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
            ao.globalAlpha = 1;
        }
        ao.restore();
        a = this.info === 0 ? ᐃΔ[1075][Dx.time] : ᐃΔ[1074][Dx.time];
        ao.save();
        ao.translate(po * 40, po * 10);
        ao.rotate(-this.rotate.ⲆᐃΔ);
        Vp(ao, a, -ⲆⵠΔ * po / 4, -ⵠⲆⵠ * po / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & 2) {
            ao.globalAlpha = 0.6 - this.ΔⲆᐃ.ⲆᐃΔ;
            a = ᐃΔ[1079];
            Vp(ao, a, -ⲆⵠΔ * po / 4, -ⵠⲆⵠ * po / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
            ao.globalAlpha = 1;
        }
        ao.restore();
        ao.restore();
    }
    function sv() {
        if (this.info >= 10) {
            ao.save();
            ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
            ao.rotate(this.angle);
            if (this.ΔⲆᐃ.ⲆΔᐃ) {
                if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ == w) {
                    this.ΔⲆᐃ.ⲆΔᐃ = false;
                }
                var b = Lx * (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * 600 * po;
                var c = Math.sin(this.ΔⲆᐃ.angle - this.angle) * b;
                var d = Math.cos(this.ΔⲆᐃ.angle - this.angle) * b;
            } else {
                c = 0;
                d = 0;
            }
            this.ᐃᐃᐃᐃ.ⲆΔᐃ();
            var e = ᐃΔ[206][Dx.time];
            var f = -e.width * this.ᐃᐃᐃᐃ.ⲆᐃΔ;
            var g = -e.height * this.ᐃᐃᐃᐃ.ⲆᐃΔ;
            Vp(ao, e, -f / 2 + c, -g / 2 + d, f, g);
            ao.restore();
        }
    }
    function tv() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ == 0) {
                this.ΔⲆᐃ.ⲆΔᐃ = Ag;
            }
            var b = (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * Lx * 600 * po;
            var c = Math.sin(this.ΔⲆᐃ.angle - this.angle) * b;
            var d = b * Math.cos(this.ΔⲆᐃ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            ao.rotate(this.angle);
            this.ᐃᐃᐃᐃ.ⲆΔᐃ();
            if (this.info & 16) {
                var f = ᐃΔ[849][Dx.time];
            } else {
                f = ᐃΔ[193][Dx.time];
            }
            var g = -f.width * this.ᐃᐃᐃᐃ.ⲆᐃΔ;
            var a = this.ᐃᐃᐃᐃ.ⲆᐃΔ * -f.height;
            Vp(ao, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ᐃΔ[869][Dx.time];
            } else {
                f = ᐃΔ[194][Dx.time];
            }
            ao.translate(0, f.height / 2);
            Vp(ao, f, c - f.width / 2, -f.height + d);
        }
        ao.restore();
    }
    function uv() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ == Xs) {
                this.ΔⲆᐃ.ⲆΔᐃ = Dl;
            }
            var a = po * ((1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * Lx * 600);
            var b = a * Math.sin(this.ΔⲆᐃ.angle - this.angle);
            var c = Math.cos(this.ΔⲆᐃ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        if (this.action == 2) {
            Ⲇᐃ = ᐃΔ[407][Dx.time];
        } else {
            Ⲇᐃ = ᐃΔ[119][Dx.time];
        }
        Vp(ao, Ⲇᐃ, -Ⲇᐃ.width / 2 + b, -Ⲇᐃ.height / 2 + c);
        ao.restore();
    }
    function vv() {
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ == na) {
                this.ΔⲆᐃ.ⲆΔᐃ = Dl;
            }
            var a = po * (Lx * (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * 600);
            var b = Math.sin(this.ΔⲆᐃ.angle - this.angle) * a;
            var c = Math.cos(this.ΔⲆᐃ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        ao.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        ao.translate(Ex.ⵠⵠⵠ.x + this.x + b, Ex.ⵠⵠⵠ.y + this.y + c);
        ao.rotate(this.angle);
        Ⲇᐃ = ᐃΔ[156][Dx.time];
        Vp(ao, Ⲇᐃ, -Ⲇᐃ.width / 2, -Ⲇᐃ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + Lx * 3) % (Math.PI * 2);
        }
        ao.rotate(this.rotate);
        Ⲇᐃ = ᐃΔ[1210][Dx.time];
        Vp(ao, Ⲇᐃ, -Ⲇᐃ.width / 2, -Ⲇᐃ.height / 2);
        ao.restore();
    }
    function wv() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ == 0) {
                this.ΔⲆᐃ.ⲆΔᐃ = false;
            }
            var b = (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * Lx * 600 * po;
            var c = b * Math.sin(this.ΔⲆᐃ.angle - this.angle);
            var d = b * Math.cos(this.ΔⲆᐃ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            ao.rotate(this.angle);
            this.ᐃᐃᐃᐃ.ⲆΔᐃ();
            if (this.info & 16) {
                var f = ᐃΔ[970][Dx.time];
            } else {
                f = ᐃΔ[208][Dx.time];
            }
            var g = -f.width * this.ᐃᐃᐃᐃ.ⲆᐃΔ;
            var a = -f.height * this.ᐃᐃᐃᐃ.ⲆᐃΔ;
            Vp(ao, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ᐃΔ[971][Dx.time];
            } else {
                f = ᐃΔ[209][Dx.time];
            }
            ao.translate(0, f.height / 2);
            Vp(ao, f, c - f.width / 2, -f.height + d);
        }
        ao.restore();
    }
    function xv() {
        if (this.info !== 10) {
            for (var b = this.info & 15, c = 0; c < b; c++) {
                this.ⵠᐃⲆⲆ[c].ⵠⲆⲆⵠ(207, this.x, this.y);
            }
            ao.save();
            ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
            ao.rotate(this.angle);
            if (this.ΔⲆᐃ.ⲆΔᐃ) {
                if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ == bl) {
                    this.ΔⲆᐃ.ⲆΔᐃ = false;
                }
                var d = po * (Lx * (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * 600);
                var e = Math.sin(this.ΔⲆᐃ.angle - this.angle) * d;
                var f = d * Math.cos(this.ΔⲆᐃ.angle - this.angle);
            } else {
                e = 0;
                f = 0;
            }
            if (this.info & 16) {
                var g = ᐃΔ[958][Dx.time];
            } else {
                g = ᐃΔ[957][Dx.time];
            }
            Vp(ao, g, -g.width / 2 + e, -g.width / 2 + f);
            ao.restore();
        }
    }
    function yv() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ == 0) {
                this.ΔⲆᐃ.ⲆΔᐃ = false;
            }
            var b = (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * Lx * 600 * po;
            var c = Math.sin(this.ΔⲆᐃ.angle - this.angle) * b;
            var d = b * Math.cos(this.ΔⲆᐃ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            ao.rotate(this.angle);
            this.ᐃᐃᐃᐃ.ⲆΔᐃ();
            if (this.info & 16) {
                var f = ᐃΔ[985][Dx.time];
            } else {
                f = ᐃΔ[210][Dx.time];
            }
            var g = -f.width * this.ᐃᐃᐃᐃ.ⲆᐃΔ;
            var a = this.ᐃᐃᐃᐃ.ⲆᐃΔ * -f.height;
            Vp(ao, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ᐃΔ[986][Dx.time];
            } else {
                f = ᐃΔ[211][Dx.time];
            }
            ao.translate(0, f.height / 2);
            Vp(ao, f, c - f.width / 2, -f.height + d);
        }
        ao.restore();
    }
    function zv() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ΔⲆⵠΔⲆ.length == 0 || this.ΔⲆⵠΔⲆ[this.ΔⲆⵠΔⲆ.length - 1] <= Hr.ⵠⵠⲆⵠⵠΔΔ)) {
            this.ΔⲆⵠΔⲆ.push(Hr.ⵠⲆᐃⲆΔᐃᐃ);
        }
        for (var a = 0; this.ΔⲆⵠΔⲆ.length > a; a++) {
            this.ΔⲆⵠΔⲆ[a] = Math.max(0, this.ΔⲆⵠΔⲆ[a] - Lx * Hr.ᐃⵠᐃⲆΔᐃⵠ);
            ao.globalAlpha = this.ΔⲆⵠΔⲆ[a] / 1.3;
            var b = (1 - this.ΔⲆⵠΔⲆ[a]) * 40;
            var c = (1 - this.ΔⲆⵠΔⲆ[a]) * 35 + 10;
            id(ao, po * -68 + Math.sin(-this.angle - Math.PI / 2) * b, po * -20 + Math.cos(-this.angle - Math.PI / 2) * b, c);
            $b(ao, "#333333");
        }
        ao.globalAlpha = 1;
        if (this.ΔⲆⵠΔⲆ.length > 0 && this.ΔⲆⵠΔⲆ[0] === 0) {
            this.ΔⲆⵠΔⲆ.shift();
        }
        ao.restore();
    }
    function Av() {
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ == 0) {
                this.ΔⲆᐃ.ⲆΔᐃ = Ah;
            }
            var a = po * (Lx * (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * 600);
            var b = Math.sin(this.ΔⲆᐃ.angle - this.angle) * a;
            var c = Math.cos(this.ΔⲆᐃ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        ao.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        ao.translate(Ex.ⵠⵠⵠ.x + this.x + b, Ex.ⵠⵠⵠ.y + this.y + c);
        ao.rotate(this.angle);
        Ⲇᐃ = ᐃΔ[153][Dx.time];
        Vp(ao, Ⲇᐃ, -Ⲇᐃ.width / 2, -Ⲇᐃ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + Lx * 3) % (Math.PI * 2);
        }
        ao.rotate(this.rotate);
        Ⲇᐃ = ᐃΔ[1198][Dx.time];
        Vp(ao, Ⲇᐃ, -Ⲇᐃ.width / 2, -Ⲇᐃ.height / 2);
        ao.restore();
    }
    function Bv() {
        this.ⲆⵠΔⲆ.ⲆΔᐃ();
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        a = this.info === 0 ? ᐃΔ[1042][Dx.time] : ᐃΔ[1044][Dx.time];
        ⲆⵠΔ = -a.width * this.ⲆⵠΔⲆ.ⲆᐃΔ;
        ⵠⲆⵠ = -a.height * this.ⲆⵠΔⲆ.ⲆᐃΔ;
        Vp(ao, a, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
        if (this.action & 2) {
            if (this.ΔⲆᐃ.ⲆΔᐃ() && this.ΔⲆᐃ.ᐃⵠⵠ == 0) {
                this.action -= 2;
            }
            ao.globalAlpha = 0.6 - this.ΔⲆᐃ.ⲆᐃΔ;
            var a = ᐃΔ[1045];
            Vp(ao, a, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
            ao.globalAlpha = 1;
        }
        ao.restore();
    }
    function Cv() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ == Ag) {
                this.ΔⲆᐃ.ⲆΔᐃ = false;
            }
            var b = Lx * (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * 600 * po;
            var c = Math.sin(this.ΔⲆᐃ.angle - this.angle) * b;
            var d = b * Math.cos(this.ΔⲆᐃ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            ao.rotate(this.angle);
            this.ᐃᐃᐃᐃ.ⲆΔᐃ();
            if (this.info & 16) {
                var f = ᐃΔ[812][Dx.time];
            } else {
                f = ᐃΔ[188][Dx.time];
            }
            var g = this.ᐃᐃᐃᐃ.ⲆᐃΔ * -f.width;
            var a = -f.height * this.ᐃᐃᐃᐃ.ⲆᐃΔ;
            Vp(ao, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ᐃΔ[813][Dx.time];
            } else {
                f = ᐃΔ[189][Dx.time];
            }
            ao.translate(0, f.height / 2);
            Vp(ao, f, c - f.width / 2, -f.height + d);
        }
        ao.restore();
    }
    function Dv() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && Ah == this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ) {
                this.ΔⲆᐃ.ⲆΔᐃ = et;
            }
            var b = po * ((1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * Lx * 600);
            var c = Math.sin(this.ΔⲆᐃ.angle - this.angle) * b;
            var d = b * Math.cos(this.ΔⲆᐃ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            ao.rotate(this.angle);
            this.ᐃᐃᐃᐃ.ⲆΔᐃ();
            if (this.info & 16) {
                var f = ᐃΔ[953][Dx.time];
            } else {
                f = ᐃΔ[204][Dx.time];
            }
            var g = -f.width * this.ᐃᐃᐃᐃ.ⲆᐃΔ;
            var a = -f.height * this.ᐃᐃᐃᐃ.ⲆᐃΔ;
            Vp(ao, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ᐃΔ[954][Dx.time];
            } else {
                f = ᐃΔ[205][Dx.time];
            }
            ao.translate(0, f.height / 2);
            Vp(ao, f, c - f.width / 2, -f.height + d);
        }
        ao.restore();
    }
    function Ev() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        this.ΔⲆⲆⲆᐃ.ⲆΔᐃ();
        Ⲇᐃ = ᐃΔ[288][Dx.time];
        ⲆⵠΔ = this.ΔⲆⲆⲆᐃ.ⲆᐃΔ * -Ⲇᐃ.width;
        ⵠⲆⵠ = this.ΔⲆⲆⲆᐃ.ⲆᐃΔ * -Ⲇᐃ.height;
        Vp(ao, Ⲇᐃ, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
        this.ⲆᐃⲆⵠᐃ.ⲆΔᐃ();
        Ⲇᐃ = ᐃΔ[289][Dx.time];
        ⲆⵠΔ = -Ⲇᐃ.width * this.ⲆᐃⲆⵠᐃ.ⲆᐃΔ;
        ⵠⲆⵠ = -Ⲇᐃ.height * this.ⲆᐃⲆⵠᐃ.ⲆᐃΔ;
        Vp(ao, Ⲇᐃ, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
        ao.restore();
    }
    function Fv() {
        if (~this.info & 1) {
            this.ⵠΔⵠΔⵠ = Math.max(this.ⵠΔⵠΔⵠ - Lx, 0);
            this.ⵠΔᐃᐃΔⲆⲆ += Lx;
            if (this.ⵠΔᐃᐃΔⲆⲆ > 0.1) {
                this.ⵠΔᐃᐃΔⲆⲆ = 0;
                var a = {
                    x: this.x + Math.random() * 60 - 30,
                    y: this.y + Math.random() * 60 - 30,
                    a: 0,
                    r: Math.random() * 30 + 30
                };
                this.ᐃᐃᐃᐃ.push(a);
            }
        } else {
            this.ⵠΔⵠΔⵠ = Math.min(this.ⵠΔⵠΔⵠ + Lx, 2.2);
        }
        for (var b = 0; this.ᐃᐃᐃᐃ.length > b; b++) {
            a = this.ᐃᐃᐃᐃ[b];
            ao.save();
            ao.translate(Ex.ⵠⵠⵠ.x + a.x, Ex.ⵠⵠⵠ.y + a.y);
            a.a = Math.min(1, 0 + Lx / 2);
            var c = 0;
            if (c < 0.2) {
                c *= 5;
            } else {
                c = c > 0.8 ? (1 - c) * 5 : 1;
            }
            ao.globalAlpha = c * 0.8;
            id(ao, 0, 0, a.r);
            $b(ao, Hr.ΔᐃΔΔᐃⲆⵠ[Dx.time]);
            ao.restore();
            if (1 === 0) {
                this.ᐃᐃᐃᐃ.splice(b, 1);
                b--;
            }
        }
    }
    function Gv(a, b, c) {
        if (a >= 0) {
            Ⲇᐃ = ᐃΔ[a][Dx.time];
            switch (a) {
                case 71:
                case 72:
                case 73:
                    pf(a, Ⲇᐃ, -Ⲇᐃ.width / 4 - po * (0 + b), -Ⲇᐃ.height / 4 + po * (c + 35));
                    break;
                case 74:
                    pf(a, Ⲇᐃ, -Ⲇᐃ.width / 4 - (1 + b) * po, -Ⲇᐃ.height / 4 + po * (c + 45));
                    break;
                case 75:
                case 76:
                    pf(a, Ⲇᐃ, -Ⲇᐃ.width / 4 - (1 + b) * po, -Ⲇᐃ.height / 4 + (c + 40) * po);
            }
        }
    }
    function Hv() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        if (ⵠΔⲆⵠ.ᐃⲆᐃⲆ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + Lx / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - Lx, 1);
        }
        this.ⲆⵠΔⲆ.ⲆΔᐃ();
        this.rotate.ⲆΔᐃ();
        a = ᐃΔ[449][Dx.time];
        ⲆⵠΔ = this.scale * (this.ⲆⵠΔⲆ.ⲆᐃΔ * -a.width);
        ⵠⲆⵠ = this.scale * (-a.height * this.ⲆⵠΔⲆ.ⲆᐃΔ);
        Vp(ao, a, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
        if (this.action & 2) {
            if (this.ΔⲆᐃ.ⲆΔᐃ() && this.ΔⲆᐃ.ᐃⵠⵠ == 0) {
                this.action -= 2;
            }
            ao.globalAlpha = 0.6 - this.ΔⲆᐃ.ⲆᐃΔ;
            var a = ᐃΔ[463];
            Vp(ao, a, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
            ao.globalAlpha = 1;
        }
        a = ᐃΔ[451][Dx.time];
        ⲆⵠΔ = this.ⲆⵠΔⲆ.ⲆᐃΔ * -a.width * this.scale;
        ⵠⲆⵠ = -a.height * this.ⲆⵠΔⲆ.ⲆᐃΔ * this.scale;
        ao.save();
        ao.translate(po * -30, po * 70);
        ao.rotate(this.rotate.ⲆᐃΔ);
        Vp(ao, a, po * -10, po * -40, ⲆⵠΔ, ⵠⲆⵠ);
        if (this.action & 2) {
            ao.globalAlpha = 0.6 - this.ΔⲆᐃ.ⲆᐃΔ;
            a = ᐃΔ[466];
            Vp(ao, a, po * -10, po * -40, ⲆⵠΔ, ⵠⲆⵠ);
            ao.globalAlpha = 1;
        }
        ao.restore();
        a = ᐃΔ[452][Dx.time];
        ao.save();
        ao.translate(po * 30, po * 70);
        ao.rotate(-this.rotate.ⲆᐃΔ);
        Vp(ao, a, po * 10 - ⲆⵠΔ, po * -40, ⲆⵠΔ, ⵠⲆⵠ);
        if (this.action & 2) {
            ao.globalAlpha = 0.6 - this.ΔⲆᐃ.ⲆᐃΔ;
            a = ᐃΔ[467];
            Vp(ao, a, po * 10 - ⲆⵠΔ, po * -40, ⲆⵠΔ, ⵠⲆⵠ);
            ao.globalAlpha = 1;
        }
        ao.restore();
        ao.restore();
    }
    function Iv() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && cb == this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ) {
                this.ΔⲆᐃ.ⲆΔᐃ = na;
            }
            var a = po * (Lx * (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * 600);
            var b = Math.sin(this.ΔⲆᐃ.angle - this.angle) * a;
            var c = Math.cos(this.ΔⲆᐃ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        if (this.info === 0) {
            Ⲇᐃ = ᐃΔ[183][Dx.time];
        } else {
            Ⲇᐃ = ᐃΔ[802][Dx.time][this.info - 1];
        }
        Vp(ao, Ⲇᐃ, -Ⲇᐃ.width / 2 + b, -Ⲇᐃ.height / 2 + c);
        ao.restore();
    }
    function Jv() {
        var a = Math.PI / 2;
        var b = Math.PI / 4;
        this.ⲆⵠΔⲆ.ⲆΔᐃ();
        this.ᐃᐃΔⲆⲆᐃΔ.ⲆΔᐃ();
        this.ⵠⵠΔⵠⵠᐃⲆ.ⲆΔᐃ();
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        c = this.info === 0 ? ᐃΔ[231][Dx.time] : ᐃΔ[1053][Dx.time];
        ⲆⵠΔ = -c.width * this.ⲆⵠΔⲆ.ⲆᐃΔ;
        ⵠⲆⵠ = -c.height * this.ⲆⵠΔⲆ.ⲆᐃΔ;
        Vp(ao, c, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
        if (this.action & 2) {
            if (this.ΔⲆᐃ.ⲆΔᐃ() && Bq == this.ΔⲆᐃ.ᐃⵠⵠ) {
                this.action -= 2;
            }
            ao.globalAlpha = 0.6 - this.ΔⲆᐃ.ⲆᐃΔ;
            var c = ᐃΔ[1056];
            Vp(ao, c, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
            ao.globalAlpha = 1;
        }
        if (this.action & 4) {
            if (this.ᐃⲆΔⵠⵠ.ⲆΔᐃ() && Ah == this.ᐃⲆΔⵠⵠ.ᐃⵠⵠ) {
                this.action -= 4;
            }
            ao.globalAlpha = 0.6 - this.ᐃⲆΔⵠⵠ.ⲆᐃΔ;
            c = ᐃΔ[1065];
            Vp(ao, c, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
            ao.globalAlpha = 1;
        }
        ao.restore();
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle + b);
        ao.translate(100, 0);
        ao.rotate(a);
        c = this.info === 0 ? ᐃΔ[1060][Dx.time] : ᐃΔ[1059][Dx.time];
        ⲆⵠΔ = this.ᐃᐃΔⲆⲆᐃΔ.ⲆᐃΔ * -c.width;
        ⵠⲆⵠ = -c.height * this.ᐃᐃΔⲆⲆᐃΔ.ⲆᐃΔ;
        Vp(ao, c, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
        if (this.action & 2) {
            ao.globalAlpha = 0.6 - this.ΔⲆᐃ.ⲆᐃΔ;
            c = ᐃΔ[1057];
            Vp(ao, c, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
            ao.globalAlpha = 1;
        }
        if (this.action & 4) {
            ao.globalAlpha = 0.6 - this.ᐃⲆΔⵠⵠ.ⲆᐃΔ;
            c = ᐃΔ[1066];
            Vp(ao, c, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
            ao.globalAlpha = 1;
        }
        ao.restore();
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle + a + b);
        ao.translate(100, 0);
        ao.rotate(a);
        c = this.info === 0 ? ᐃΔ[1063][Dx.time] : ᐃΔ[1062][Dx.time];
        ⲆⵠΔ = this.ⵠⵠΔⵠⵠᐃⲆ.ⲆᐃΔ * -c.width;
        ⵠⲆⵠ = this.ⵠⵠΔⵠⵠᐃⲆ.ⲆᐃΔ * -c.height;
        Vp(ao, c, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
        if (this.action & 2) {
            ao.globalAlpha = 0.6 - this.ΔⲆᐃ.ⲆᐃΔ;
            c = ᐃΔ[1058];
            Vp(ao, c, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
            ao.globalAlpha = 1;
        }
        if (this.action & 4) {
            ao.globalAlpha = 0.6 - this.ᐃⲆΔⵠⵠ.ⲆᐃΔ;
            c = ᐃΔ[1067];
            Vp(ao, c, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
            ao.globalAlpha = 1;
        }
        ao.restore();
    }
    function Kv() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        this.ⲆᐃⲆⵠᐃ.ⲆΔᐃ();
        Ⲇᐃ = ᐃΔ[526][Dx.time];
        ⲆⵠΔ = this.ⲆᐃⲆⵠᐃ.ⲆᐃΔ * -Ⲇᐃ.width;
        ⵠⲆⵠ = this.ⲆᐃⲆⵠᐃ.ⲆᐃΔ * -Ⲇᐃ.height;
        Vp(ao, Ⲇᐃ, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
        ao.restore();
    }
    function Lv() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        var a = ⵠΔⲆⵠ.ᐃⲆᐃⲆ(this, this.r);
        this.scale = a > 350 ? Math.min(this.scale + Lx / 2, 1.8) : Math.max(this.scale - Lx, 1);
        this.ⲆⵠΔⲆ.ⲆΔᐃ();
        this.rotate.ⲆΔᐃ();
        this.ΔΔⵠⵠ = a < 350 ? Math.max(0, this.ΔΔⵠⵠ - Lx * 2.2) : Math.min(1, this.ΔΔⵠⵠ + Lx * 2.2);
        b = ᐃΔ[1135][Dx.time];
        ⲆⵠΔ = this.scale * (this.ⲆⵠΔⲆ.ⲆᐃΔ * -b.width);
        ⵠⲆⵠ = -b.height * this.ⲆⵠΔⲆ.ⲆᐃΔ * this.scale;
        ao.globalAlpha = 1 - this.ΔΔⵠⵠ;
        Vp(ao, b, -ⲆⵠΔ / 4, -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
        b = ᐃΔ[1119][Dx.time];
        ⲆⵠΔ = this.ⲆⵠΔⲆ.ⲆᐃΔ * -b.width * this.scale;
        ⵠⲆⵠ = -b.height * this.ⲆⵠΔⲆ.ⲆᐃΔ * this.scale;
        ao.globalAlpha = this.ΔΔⵠⵠ;
        Vp(ao, b, -ⲆⵠΔ / 4, -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & 2) {
            if (this.ΔⲆᐃ.ⲆΔᐃ() && this.ΔⲆᐃ.ᐃⵠⵠ == 0) {
                this.action -= 2;
            }
            ao.globalAlpha = (0.6 - this.ΔⲆᐃ.ⲆᐃΔ) * (1 - this.ΔΔⵠⵠ);
            var b = ᐃΔ[1136];
            ⲆⵠΔ = this.scale * (this.ⲆⵠΔⲆ.ⲆᐃΔ * -b.width);
            ⵠⲆⵠ = this.scale * (-b.height * this.ⲆⵠΔⲆ.ⲆᐃΔ);
            Vp(ao, b, -ⲆⵠΔ / 4, -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
            ao.globalAlpha = this.ΔΔⵠⵠ * (0.6 - this.ΔⲆᐃ.ⲆᐃΔ);
            b = ᐃΔ[1128];
            ⲆⵠΔ = -b.width * this.ⲆⵠΔⲆ.ⲆᐃΔ * this.scale;
            ⵠⲆⵠ = this.ⲆⵠΔⲆ.ⲆᐃΔ * -b.height * this.scale;
            Vp(ao, b, -ⲆⵠΔ / 4, -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
            ao.globalAlpha = 1;
        }
        b = ᐃΔ[1122][Dx.time];
        ⲆⵠΔ = -b.width * this.ⲆⵠΔⲆ.ⲆᐃΔ * this.scale;
        ⵠⲆⵠ = this.scale * (this.ⲆⵠΔⲆ.ⲆᐃΔ * -b.height);
        ao.save();
        ao.translate(po * -40, po * 80);
        ao.rotate(this.rotate.ⲆᐃΔ);
        ao.globalAlpha = this.ΔΔⵠⵠ;
        Vp(ao, b, po * -ⲆⵠΔ / 4, po * -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & 2) {
            ao.globalAlpha = this.ΔΔⵠⵠ * (0.6 - this.ΔⲆᐃ.ⲆᐃΔ);
            b = ᐃΔ[1129];
            Vp(ao, b, -ⲆⵠΔ * po / 4, -ⵠⲆⵠ * po / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
            ao.globalAlpha = 1;
        }
        ao.restore();
        b = ᐃΔ[1125][Dx.time];
        ao.save();
        ao.translate(po * 40, po * 80);
        ao.rotate(-this.rotate.ⲆᐃΔ);
        ao.globalAlpha = this.ΔΔⵠⵠ;
        Vp(ao, b, po * -ⲆⵠΔ / 4, po * -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & 2) {
            ao.globalAlpha = this.ΔΔⵠⵠ * (0.6 - this.ΔⲆᐃ.ⲆᐃΔ);
            b = ᐃΔ[1130];
            Vp(ao, b, po * -ⲆⵠΔ / 4, -ⵠⲆⵠ * po / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
            ao.globalAlpha = 1;
        }
        ao.globalAlpha = 1;
        ao.restore();
        ao.restore();
    }
    function Mv() {
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && Ah == this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ) {
                this.ΔⲆᐃ.ⲆΔᐃ = Gl;
            }
            var a = (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * Lx * 600 * po;
            var b = a * Math.sin(this.ΔⲆᐃ.angle - this.angle);
            var c = Math.cos(this.ΔⲆᐃ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x + b, Ex.ⵠⵠⵠ.y + this.y + c);
        ao.rotate(this.angle);
        Ⲇᐃ = ᐃΔ[135][Dx.time];
        Vp(ao, Ⲇᐃ, -Ⲇᐃ.width / 2, -Ⲇᐃ.height / 2);
        ao.restore();
    }
    function Nv() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        var a = ⵠΔⲆⵠ.ᐃⲆᐃⲆ(this, this.r);
        this.scale = a > 350 ? Math.min(this.scale + Lx / 2, 1.8) : Math.max(this.scale - Lx, 1);
        this.ⲆⵠΔⲆ.ⲆΔᐃ();
        this.rotate.ⲆΔᐃ();
        this.ΔΔⵠⵠ = a < 350 ? Math.max(0, this.ΔΔⵠⵠ - Lx * 2.2) : Math.min(1, this.ΔΔⵠⵠ + Lx * 2.2);
        b = this.info & 1 ? ᐃΔ[1114][Dx.time] : ᐃΔ[1113][Dx.time];
        ⲆⵠΔ = this.scale * (-b.width * this.ⲆⵠΔⲆ.ⲆᐃΔ);
        ⵠⲆⵠ = -b.height * this.ⲆⵠΔⲆ.ⲆᐃΔ * this.scale;
        ao.globalAlpha = 1 - this.ΔΔⵠⵠ;
        Vp(ao, b, -ⲆⵠΔ / 4, -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
        b = this.info & 1 ? ᐃΔ[1098][Dx.time] : ᐃΔ[235][Dx.time];
        ⲆⵠΔ = this.ⲆⵠΔⲆ.ⲆᐃΔ * -b.width * this.scale;
        ⵠⲆⵠ = -b.height * this.ⲆⵠΔⲆ.ⲆᐃΔ * this.scale;
        ao.globalAlpha = this.ΔΔⵠⵠ;
        Vp(ao, b, -ⲆⵠΔ / 4, -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & 2) {
            if (this.ΔⲆᐃ.ⲆΔᐃ() && this.ΔⲆᐃ.ᐃⵠⵠ == un) {
                this.action -= 2;
            }
            ao.globalAlpha = (0.6 - this.ΔⲆᐃ.ⲆᐃΔ) * (1 - this.ΔΔⵠⵠ);
            var b = ᐃΔ[1115];
            ⲆⵠΔ = this.scale * (-b.width * this.ⲆⵠΔⲆ.ⲆᐃΔ);
            ⵠⲆⵠ = this.scale * (this.ⲆⵠΔⲆ.ⲆᐃΔ * -b.height);
            Vp(ao, b, -ⲆⵠΔ / 4, -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
            ao.globalAlpha = this.ΔΔⵠⵠ * (0.6 - this.ΔⲆᐃ.ⲆᐃΔ);
            b = ᐃΔ[1107];
            ⲆⵠΔ = -b.width * this.ⲆⵠΔⲆ.ⲆᐃΔ * this.scale;
            ⵠⲆⵠ = this.scale * (this.ⲆⵠΔⲆ.ⲆᐃΔ * -b.height);
            Vp(ao, b, -ⲆⵠΔ / 4, -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
            ao.globalAlpha = 1;
        }
        b = (this.info & 1) === 0 ? ᐃΔ[1102][Dx.time] : ᐃΔ[1101][Dx.time];
        ⲆⵠΔ = this.ⲆⵠΔⲆ.ⲆᐃΔ * -b.width * this.scale;
        ⵠⲆⵠ = this.scale * (-b.height * this.ⲆⵠΔⲆ.ⲆᐃΔ);
        ao.save();
        ao.translate(po * -20, po * 0);
        ao.rotate(this.rotate.ⲆᐃΔ);
        ao.globalAlpha = this.ΔΔⵠⵠ;
        Vp(ao, b, po * -ⲆⵠΔ / 4, po * -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & 2) {
            ao.globalAlpha = (0.6 - this.ΔⲆᐃ.ⲆᐃΔ) * this.ΔΔⵠⵠ;
            b = ᐃΔ[1108];
            Vp(ao, b, -ⲆⵠΔ * po / 4, -ⵠⲆⵠ * po / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
            ao.globalAlpha = 1;
        }
        ao.restore();
        b = this.info & 1 ? ᐃΔ[1104][Dx.time] : ᐃΔ[1105][Dx.time];
        ao.save();
        ao.translate(po * 20, po * 0);
        ao.rotate(-this.rotate.ⲆᐃΔ);
        ao.globalAlpha = this.ΔΔⵠⵠ;
        Vp(ao, b, po * -ⲆⵠΔ / 4, po * -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & 2) {
            ao.globalAlpha = this.ΔΔⵠⵠ * (0.6 - this.ΔⲆᐃ.ⲆᐃΔ);
            b = ᐃΔ[1109];
            Vp(ao, b, -ⲆⵠΔ * po / 4, -ⵠⲆⵠ * po / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
            ao.globalAlpha = 1;
        }
        ao.globalAlpha = 1;
        ao.restore();
        ao.restore();
    }
    function Ov() {
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ == 0) {
                this.ΔⲆᐃ.ⲆΔᐃ = bk;
            }
            var a = (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * Lx * 600 * po;
            var b = a * Math.sin(this.ΔⲆᐃ.angle - this.angle);
            var c = Math.cos(this.ΔⲆᐃ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        ao.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        ao.translate(Ex.ⵠⵠⵠ.x + this.x + b, Ex.ⵠⵠⵠ.y + this.y + c);
        ao.rotate(this.angle);
        Ⲇᐃ = ᐃΔ[155][Dx.time];
        Vp(ao, Ⲇᐃ, -Ⲇᐃ.width / 2, -Ⲇᐃ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + Lx * 3) % (Math.PI * 2);
        }
        ao.rotate(this.rotate);
        Ⲇᐃ = ᐃΔ[1206][Dx.time];
        Vp(ao, Ⲇᐃ, -Ⲇᐃ.width / 2, -Ⲇᐃ.height / 2);
        ao.restore();
    }
    function Pv() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        this.ⲆᐃⲆⵠᐃ.ⲆΔᐃ();
        Ⲇᐃ = ᐃΔ[289][Dx.time];
        ⲆⵠΔ = -Ⲇᐃ.width * this.ⲆᐃⲆⵠᐃ.ⲆᐃΔ;
        ⵠⲆⵠ = this.ⲆᐃⲆⵠᐃ.ⲆᐃΔ * -Ⲇᐃ.height;
        Vp(ao, Ⲇᐃ, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
        ao.restore();
    }
    function Qv(a) {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        this.ⲆⵠΔⲆ.ⲆΔᐃ();
        Ⲇᐃ = ᐃΔ[a][Dx.time];
        ⲆⵠΔ = -Ⲇᐃ.width * this.ⲆⵠΔⲆ.ⲆᐃΔ;
        ⵠⲆⵠ = this.ⲆⵠΔⲆ.ⲆᐃΔ * -Ⲇᐃ.height;
        Vp(ao, Ⲇᐃ, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
        ao.restore();
    }
    function Rv() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && na == this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ) {
                this.ΔⲆᐃ.ⲆΔᐃ = false;
            }
            var b = Lx * (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * 600 * po;
            var c = b * Math.sin(this.ΔⲆᐃ.angle - this.angle);
            var d = b * Math.cos(this.ΔⲆᐃ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            ao.rotate(this.angle);
            this.ᐃᐃᐃᐃ.ⲆΔᐃ();
            if (this.info & 16) {
                var f = ᐃΔ[838][Dx.time];
            } else {
                f = ᐃΔ[191][Dx.time];
            }
            var g = this.ᐃᐃᐃᐃ.ⲆᐃΔ * -f.width;
            var a = -f.height * this.ᐃᐃᐃᐃ.ⲆᐃΔ;
            Vp(ao, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ᐃΔ[839][Dx.time];
            } else {
                f = ᐃΔ[192][Dx.time];
            }
            ao.translate(0, f.height / 2);
            Vp(ao, f, c - f.width / 2, -f.height + d);
        }
        ao.restore();
    }
    function Sv() {
        if (this.info !== 10) {
            ao.save();
            ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
            ao.rotate(this.angle);
            if (this.ΔⲆᐃ.ⲆΔᐃ) {
                if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ == 0) {
                    this.ΔⲆᐃ.ⲆΔᐃ = Ad;
                }
                var b = po * (Lx * (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * 600);
                var c = b * Math.sin(this.ΔⲆᐃ.angle - this.angle);
                var d = b * Math.cos(this.ΔⲆᐃ.angle - this.angle);
            } else {
                c = 0;
                d = 0;
            }
            if (this.info & 16) {
                var e = ᐃΔ[623][Dx.time];
            } else {
                e = ᐃΔ[287][Dx.time];
            }
            Vp(ao, e, -e.width / 2 + c, -e.width / 2 + d);
            ao.restore();
            for (var f = this.info & 15, g = 0; g < f; g++) {
                this.ⵠᐃⲆⲆ[g].ⵠⲆⲆⵠ(294);
            }
        }
    }
    function Tv() {
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && Gl == this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ) {
                this.ΔⲆᐃ.ⲆΔᐃ = Ag;
            }
            var a = Lx * (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * 600 * po;
            var b = Math.sin(this.ΔⲆᐃ.angle - this.angle) * a;
            var c = Math.cos(this.ΔⲆᐃ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        ao.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        ao.translate(Ex.ⵠⵠⵠ.x + this.x + b, Ex.ⵠⵠⵠ.y + this.y + c);
        ao.rotate(this.angle);
        Ⲇᐃ = ᐃΔ[157][Dx.time];
        Vp(ao, Ⲇᐃ, -Ⲇᐃ.width / 2, -Ⲇᐃ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + Lx * 3) % (Math.PI * 2);
        }
        ao.rotate(this.rotate);
        Ⲇᐃ = ᐃΔ[1214][Dx.time];
        Vp(ao, Ⲇᐃ, -Ⲇᐃ.width / 2, -Ⲇᐃ.height / 2);
        ao.restore();
    }
    function Uv() {
        var a = Math.PI / 2;
        var b = Math.PI / 4;
        this.ⲆⵠΔⲆ.ⲆΔᐃ();
        this.ᐃᐃΔⲆⲆᐃΔ.ⲆΔᐃ();
        this.ⵠⵠΔⵠⵠᐃⲆ.ⲆΔᐃ();
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        c = this.info === 0 ? ᐃΔ[887][Dx.time] : ᐃΔ[886][Dx.time];
        ⲆⵠΔ = -c.width * this.ⲆⵠΔⲆ.ⲆᐃΔ;
        ⵠⲆⵠ = this.ⲆⵠΔⲆ.ⲆᐃΔ * -c.height;
        Vp(ao, c, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
        if (this.action & 2) {
            if (this.ΔⲆᐃ.ⲆΔᐃ() && this.ΔⲆᐃ.ᐃⵠⵠ == 0) {
                this.action -= 2;
            }
            ao.globalAlpha = 0.6 - this.ΔⲆᐃ.ⲆᐃΔ;
            var c = ᐃΔ[888];
            Vp(ao, c, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
            ao.globalAlpha = 1;
        }
        if (this.action & 4) {
            if (this.ᐃⲆΔⵠⵠ.ⲆΔᐃ() && this.ᐃⲆΔⵠⵠ.ᐃⵠⵠ == 0) {
                this.action -= 4;
            }
            ao.globalAlpha = 0.6 - this.ᐃⲆΔⵠⵠ.ⲆᐃΔ;
            c = ᐃΔ[891];
            Vp(ao, c, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
            ao.globalAlpha = 1;
        }
        ao.restore();
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle + b);
        ao.translate(55, 0);
        ao.rotate(a);
        c = this.info === 0 ? ᐃΔ[894][Dx.time] : ᐃΔ[896][Dx.time];
        ⲆⵠΔ = -c.width * this.ᐃᐃΔⲆⲆᐃΔ.ⲆᐃΔ;
        ⵠⲆⵠ = this.ᐃᐃΔⲆⲆᐃΔ.ⲆᐃΔ * -c.height;
        Vp(ao, c, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
        if (this.action & 2) {
            ao.globalAlpha = 0.6 - this.ΔⲆᐃ.ⲆᐃΔ;
            c = ᐃΔ[889];
            Vp(ao, c, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
            ao.globalAlpha = 1;
        }
        if (this.action & 4) {
            ao.globalAlpha = 0.6 - this.ᐃⲆΔⵠⵠ.ⲆᐃΔ;
            c = ᐃΔ[892];
            Vp(ao, c, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
            ao.globalAlpha = 1;
        }
        ao.restore();
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle + a + b);
        ao.translate(55, 0);
        ao.rotate(a);
        c = this.info === 0 ? ᐃΔ[895][Dx.time] : ᐃΔ[897][Dx.time];
        ⲆⵠΔ = this.ⵠⵠΔⵠⵠᐃⲆ.ⲆᐃΔ * -c.width;
        ⵠⲆⵠ = -c.height * this.ⵠⵠΔⵠⵠᐃⲆ.ⲆᐃΔ;
        Vp(ao, c, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
        if (this.action & 2) {
            ao.globalAlpha = 0.6 - this.ΔⲆᐃ.ⲆᐃΔ;
            c = ᐃΔ[890];
            Vp(ao, c, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
            ao.globalAlpha = 1;
        }
        if (this.action & 4) {
            ao.globalAlpha = 0.6 - this.ᐃⲆΔⵠⵠ.ⲆᐃΔ;
            c = ᐃΔ[893];
            Vp(ao, c, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
            ao.globalAlpha = 1;
        }
        ao.restore();
    }
    function Vv(a, b) {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        this.ⲆⵠΔⲆ.ⲆΔᐃ();
        c = ᐃΔ[a][Dx.time];
        ⲆⵠΔ = this.ⲆⵠΔⲆ.ⲆᐃΔ * -c.width;
        ⵠⲆⵠ = this.ⲆⵠΔⲆ.ⲆᐃΔ * -c.height;
        Vp(ao, c, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
        if (this.action & 2) {
            if (this.ΔⲆᐃ.ⲆΔᐃ() && this.ΔⲆᐃ.ᐃⵠⵠ == 0) {
                this.action -= 2;
            }
            ao.globalAlpha = 0.6 - this.ΔⲆᐃ.ⲆᐃΔ;
            var c = ᐃΔ[b];
            Vp(ao, c, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
            ao.globalAlpha = 1;
        }
        ao.restore();
    }
    function Wv() {
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ == 0) {
                this.ΔⲆᐃ.ⲆΔᐃ = false;
            }
            var a = (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * Lx * 600 * po;
            var b = Math.sin(this.ΔⲆᐃ.angle - this.angle) * a;
            var c = Math.cos(this.ΔⲆᐃ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        ao.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        ao.translate(Ex.ⵠⵠⵠ.x + this.x + b, Ex.ⵠⵠⵠ.y + this.y + c);
        ao.rotate(this.angle);
        Ⲇᐃ = ᐃΔ[154][Dx.time];
        Vp(ao, Ⲇᐃ, -Ⲇᐃ.width / 2, -Ⲇᐃ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + Lx * 3) % (Math.PI * 2);
        }
        ao.rotate(this.rotate);
        Ⲇᐃ = ᐃΔ[1202][Dx.time];
        Vp(ao, Ⲇᐃ, -Ⲇᐃ.width / 2, -Ⲇᐃ.height / 2);
        ao.restore();
    }
    function Xv() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        if (ⵠΔⲆⵠ.ᐃⲆᐃⲆ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + Lx / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - Lx, 1);
        }
        this.ⲆⵠΔⲆ.ⲆΔᐃ();
        this.rotate.ⲆΔᐃ();
        a = ᐃΔ[450][Dx.time];
        ⲆⵠΔ = this.scale * (-a.width * this.ⲆⵠΔⲆ.ⲆᐃΔ);
        ⵠⲆⵠ = -a.height * this.ⲆⵠΔⲆ.ⲆᐃΔ * this.scale;
        Vp(ao, a, -ⲆⵠΔ / 4, -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & 2) {
            if (this.ΔⲆᐃ.ⲆΔᐃ() && Bq == this.ΔⲆᐃ.ᐃⵠⵠ) {
                this.action -= 2;
            }
            ao.globalAlpha = 0.6 - this.ΔⲆᐃ.ⲆᐃΔ;
            var a = ᐃΔ[464];
            Vp(ao, a, -ⲆⵠΔ / 4, -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
            ao.globalAlpha = 1;
        }
        a = ᐃΔ[453][Dx.time];
        ⲆⵠΔ = this.scale * (this.ⲆⵠΔⲆ.ⲆᐃΔ * -a.width);
        ⵠⲆⵠ = this.ⲆⵠΔⲆ.ⲆᐃΔ * -a.height * this.scale;
        ao.save();
        ao.translate(po * -60, po * 20);
        ao.rotate(this.rotate.ⲆᐃΔ);
        Vp(ao, a, po * -ⲆⵠΔ / 4, po * -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & 2) {
            ao.globalAlpha = 0.6 - this.ΔⲆᐃ.ⲆᐃΔ;
            a = ᐃΔ[468];
            Vp(ao, a, -ⲆⵠΔ * po / 4, -ⵠⲆⵠ * po / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
            ao.globalAlpha = 1;
        }
        ao.restore();
        a = ᐃΔ[454][Dx.time];
        ao.save();
        ao.translate(po * 60, po * 20);
        ao.rotate(-this.rotate.ⲆᐃΔ);
        Vp(ao, a, po * -ⲆⵠΔ / 4, po * -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & 2) {
            ao.globalAlpha = 0.6 - this.ΔⲆᐃ.ⲆᐃΔ;
            a = ᐃΔ[469];
            Vp(ao, a, po * -ⲆⵠΔ / 4, po * -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
            ao.globalAlpha = 1;
        }
        ao.restore();
        ao.restore();
    }
    function Yv() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        this.ⲆᐃᐃⲆⵠⲆΔ = Math.min(1, this.ⲆᐃᐃⲆⵠⲆΔ + Lx * 2);
        ao.globalAlpha = Math.min(1, Math.max(0, ⵠΔⲆⵠ.ᐃⲆᐃⲆ(this, this.r) / 80)) * this.ⲆᐃᐃⲆⵠⲆΔ;
        this.ⲆⵠΔⲆ.ⲆΔᐃ();
        Ⲇᐃ = ᐃΔ[247][Dx.time][this.ΔΔⲆⲆⵠ];
        if (this.ΔΔⲆⲆⵠ < 2) {
            ⲆⵠΔ = -Ⲇᐃ.width * this.ⲆⵠΔⲆ.ⲆᐃΔ;
            ⵠⲆⵠ = -Ⲇᐃ.height * this.ⲆⵠΔⲆ.ⲆᐃΔ;
        } else if (this.ⲆΔⲆᐃⵠΔΔ === 0) {
            ⲆⵠΔ = -Ⲇᐃ.width;
            ⵠⲆⵠ = -Ⲇᐃ.height;
        } else {
            ⲆⵠΔ = -Ⲇᐃ.width * 1.35;
            ⵠⲆⵠ = -Ⲇᐃ.height * 1.35;
        }
        Vp(ao, Ⲇᐃ, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
        ao.globalAlpha = 1;
        ao.restore();
    }
    function Zv() {
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ == 0) {
                this.ΔⲆᐃ.ⲆΔᐃ = Gl;
            }
            var a = Lx * (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * 600 * po;
            var b = Math.sin(this.ΔⲆᐃ.angle - this.angle) * a;
            var c = a * Math.cos(this.ΔⲆᐃ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        this.ᐃⲆᐃΔⵠΔΔ = (this.ᐃⲆᐃΔⵠΔΔ + Lx * 3) % (Math.PI * 2);
        this.ΔᐃⲆΔᐃᐃΔ = (this.ΔᐃⲆΔᐃᐃΔ - Lx * 3) % (Math.PI * 2);
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x + b, Ex.ⵠⵠⵠ.y + this.y + c);
        ao.save();
        ao.rotate(this.angle);
        Ⲇᐃ = ᐃΔ[152][Dx.time];
        Vp(ao, Ⲇᐃ, -Ⲇᐃ.width / 2, -Ⲇᐃ.height / 2);
        ao.restore();
        ao.save();
        ao.rotate(this.ᐃⲆᐃΔⵠΔΔ);
        Ⲇᐃ = ᐃΔ[1194][Dx.time];
        Vp(ao, Ⲇᐃ, -Ⲇᐃ.width / 2, -Ⲇᐃ.height / 2);
        ao.restore();
        ao.save();
        ao.rotate(this.ΔᐃⲆΔᐃᐃΔ);
        Ⲇᐃ = ᐃΔ[1193][Dx.time];
        Vp(ao, Ⲇᐃ, -Ⲇᐃ.width / 2, -Ⲇᐃ.height / 2);
        ao.restore();
        ao.restore();
    }
    function _v(b) {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        this.ᐃᐃᐃᐃ.ⲆΔᐃ();
        ao.globalAlpha = 0.3;
        var c = ᐃΔ[282][Dx.time];
        var d = -c.width * this.ᐃᐃᐃᐃ.ⲆᐃΔ;
        var e = -c.height * this.ᐃᐃᐃᐃ.ⲆᐃΔ;
        Vp(ao, c, -d / 2, -e / 2, d, e);
        ao.globalAlpha = 1;
        if (this.ΔⲆᐃ.ⲆΔᐃ) {
            if (this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆΔᐃ() && this.ΔⲆᐃ.ΔΔᐃⵠ.ᐃⵠⵠ == 0) {
                this.ΔⲆᐃ.ⲆΔᐃ = false;
            }
            var f = po * (Lx * (1 - this.ΔⲆᐃ.ΔΔᐃⵠ.ⲆᐃΔ) * 600);
            var g = Math.sin(this.ΔⲆᐃ.angle - this.angle) * f;
            var h = Math.cos(this.ΔⲆᐃ.angle - this.angle) * f;
        } else {
            g = 0;
            h = 0;
        }
        c = ᐃΔ[b][Dx.time];
        Vp(ao, c, -c.width / 2 + g, -c.height / 2 + h);
        ao.restore();
    }
    function aw() {
        var a = undefined;
        var b = undefined;
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        ao.rotate(this.angle);
        this.ⲆⵠΔⲆ.ⲆΔᐃ();
        this.rotate.ⲆΔᐃ();
        if (this.ⵠΔⵠΔⵠ >= 0.1 && this.ⵠΔⵠΔⵠ <= 1.1) {
            if ((c = Math.max(0, Math.min(1, this.ⵠΔⵠΔⵠ - 0.1))) < 0.2) {
                c *= 5;
            } else {
                c = c > 0.8 ? (1 - c) * 5 : 1;
            }
            a = ᐃΔ[1150][Dx.time];
            ⲆⵠΔ = this.ⲆⵠΔⲆ.ⲆᐃΔ * -a.width;
            ⵠⲆⵠ = -a.height * this.ⲆⵠΔⲆ.ⲆᐃΔ;
            ao.globalAlpha = c;
            Vp(ao, a, -ⲆⵠΔ / 4, -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
            b = ᐃΔ[1151];
        }
        if (this.ⵠΔⵠΔⵠ >= 0.9) {
            var c;
            if ((c = Math.max(0, Math.min(1, this.ⵠΔⵠΔⵠ - 0.9))) < 0.2) {
                c *= 5;
            } else {
                c = 1;
            }
            a = ᐃΔ[1152][Dx.time];
            ⲆⵠΔ = this.ⲆⵠΔⲆ.ⲆᐃΔ * -a.width;
            ⵠⲆⵠ = this.ⲆⵠΔⲆ.ⲆᐃΔ * -a.height;
            ao.globalAlpha = c;
            Vp(ao, a, -ⲆⵠΔ / 4, -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
            b = ᐃΔ[1153];
        }
        if (this.action & 2 && Vq !== b) {
            if (this.ΔⲆᐃ.ⲆΔᐃ() && this.ΔⲆᐃ.ᐃⵠⵠ == 0) {
                this.action -= 2;
            }
            ao.globalAlpha = c * (0.6 - this.ΔⲆᐃ.ⲆᐃΔ);
            ⲆⵠΔ = -b.width * this.ⲆⵠΔⲆ.ⲆᐃΔ;
            ⵠⲆⵠ = -b.height * this.ⲆⵠΔⲆ.ⲆᐃΔ;
            Vp(ao, b, -ⲆⵠΔ / 4, -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
        }
        ao.globalAlpha = 1;
        ao.restore();
    }
    function bw(a) {
        if (a > 0) {
            var b = ᐃΔ[a][Dx.time];
            switch (a) {
                case 58:
                    hf(a, b, -b.width / 2 + po * 2, -b.height / 2 - po * 5);
                    break;
                case 10:
                    hf(a, b, -b.width / 2, -b.height / 2 - po * 18);
                    break;
                case 11:
                    hf(a, b, -b.width / 2, -b.height / 2 - po * 10);
                    break;
                case 23:
                    hf(a, b, -b.width / 2, -b.height / 2 - po * 19);
                    break;
                case 24:
                    pf(a, b, -b.width / 4, -b.height / 4 - po * 20);
                    break;
                case 25:
                    hf(a, b, -b.width / 2 - po * 1, -b.height / 2 - po * 23);
                    break;
                case 26:
                    hf(a, b, -b.width / 2, -b.height / 2 - po * 5);
                    break;
                case 27:
                    hf(a, b, -b.width / 2, -b.height / 2 - po * 2);
                    break;
                case 43:
                    hf(a, b, -b.width / 2 + po * 1.5, -b.height / 2 - po * 1);
                    break;
                case 44:
                case 20:
                case 21:
                case 22:
                case 80:
                case 81:
                case 82:
                case 60:
                case 90:
                case 88:
                case 87:
                    pf(a, b, -b.width / 4, -b.height / 4 + po * 2);
                    break;
                case 41:
                case 42:
                    hf(a, b, -b.width / 2 - po * 5, -b.height / 2 - po * 2);
                    break;
                case 40:
                    hf(a, b, -b.width / 2, -b.height / 2 - po * 2);
                    break;
                case 85:
                    hf(a, b, -b.width / 2, -b.height / 2 - po * 2);
                    break;
                case 48:
                    hf(a, b, -b.width / 2, -b.height / 2 - po * 2);
                    break;
                case 47:
                    hf(a, b, -b.width / 2 + po * 2, -b.height / 2);
                    break;
                case 59:
                    hf(a, b, -b.width / 2, -b.height / 2 - po * 5);
                    break;
                case 77:
                case 78:
                case 79:
                    hf(a, b, -b.width / 2 - po * 1, -b.height / 2);
                    break;
                case 83:
                    hf(a, b, -b.width / 2, -b.height / 2 + po * 2);
                    break;
                case 84:
                case 86:
                    hf(a, b, -b.width / 2, -b.height / 2 + po * 8);
                    break;
                case 61:
                    hf(a, b, -b.width / 2, -b.height / 2 - po * 4);
            }
        }
    }
    function cw() {
        if (!this.ᐃΔΔⲆⵠ && this.ⲆⵠⵠⵠⲆ !== 0) {
            if (this.x != this.r.x || this.r.y != this.y) {
                var a = (ⵠΔⲆⵠ.ⲆΔᐃᐃⲆⲆⵠ(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (Math.PI * 2);
                this.ΔΔᐃⲆᐃ = ⵠΔⲆⵠ.ⵠᐃⲆᐃⵠⲆⵠ(a, this.ΔΔᐃⲆᐃ);
                this.ΔΔᐃⲆᐃ = ⵠΔⲆⵠ.ⲆᐃⲆΔⵠᐃΔ(this.ΔΔᐃⲆᐃ, a, 0.018);
            }
            ao.save();
            ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
            ao.rotate(this.ΔΔᐃⲆᐃ);
            if (this.ⲆⵠⵠⵠⲆ === 223) {
                if (this.ΔⵠⲆⲆⲆ > 50 || this.ⲆᐃΔⵠⲆ > 0) {
                    if (this.ΔⵠⲆⲆⲆ > 50) {
                        this.ⲆᐃΔⵠⲆ = Math.min(1, this.ⲆᐃΔⵠⲆ + Lx);
                    } else {
                        this.ⲆᐃΔⵠⲆ = Math.max(0, this.ⲆᐃΔⵠⲆ - Lx);
                    }
                    ao.globalAlpha = this.ⲆᐃΔⵠⲆ;
                    var b = ᐃΔ[225][Dx.time];
                    pf(225, b, -b.width / 4, -b.height / 4);
                    ao.globalAlpha = 1;
                }
                b = ᐃΔ[223][Dx.time];
                pf(223, b, -b.width / 4, -b.height / 4);
            } else if (this.ⲆⵠⵠⵠⲆ === 229) {
                this.ⵠᐃᐃⲆⲆ = ⵠΔⲆⵠ.ⲆᐃⲆΔⵠᐃΔ(this.ⵠᐃᐃⲆⲆ, this.ΔⵠⲆⲆⲆ, 0.018);
                this.ⵠⲆᐃⲆⲆⵠᐃ.ⲆΔᐃ();
                if (this.ΔⵠⲆⲆⲆ > 85) {
                    this.ⲆᐃΔⵠⲆ = Math.min(1, this.ⲆᐃΔⵠⲆ + Lx / 4);
                } else {
                    this.ⲆᐃΔⵠⲆ = Math.max(0.1, this.ⲆᐃΔⵠⲆ - Lx);
                }
                b = ᐃΔ[1100][Dx.time];
                pf(1100, b, -b.width / 4, -b.height / 4);
                b = ᐃΔ[1103][Dx.time];
                ⲆⵠΔ = -b.width;
                ⵠⲆⵠ = -b.height;
                ao.save();
                ao.translate(po * -20, po * -20);
                ao.rotate(this.ⲆᐃΔⵠⲆ * this.ⵠⲆᐃⲆⲆⵠᐃ.ⲆᐃΔ);
                Vp(ao, b, -ⲆⵠΔ / 4, -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
                ao.restore();
                b = ᐃΔ[1106][Dx.time];
                ao.save();
                ao.translate(po * 20, po * -20);
                ao.rotate(this.ⲆᐃΔⵠⲆ * -this.ⵠⲆᐃⲆⲆⵠᐃ.ⲆᐃΔ);
                Vp(ao, b, -ⲆⵠΔ / 4, -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
                ao.restore();
            } else if (this.ⲆⵠⵠⵠⲆ === 228) {
                this.ⵠᐃᐃⲆⲆ = ⵠΔⲆⵠ.ⲆᐃⲆΔⵠᐃΔ(this.ⵠᐃᐃⲆⲆ, this.ΔⵠⲆⲆⲆ, 0.018);
                this.ⵠⲆᐃⲆⲆⵠᐃ.ⲆΔᐃ();
                if (this.ΔⵠⲆⲆⲆ > 85) {
                    this.ⲆᐃΔⵠⲆ = Math.min(1, this.ⲆᐃΔⵠⲆ + Lx / 4);
                } else {
                    this.ⲆᐃΔⵠⲆ = Math.max(0.1, this.ⲆᐃΔⵠⲆ - Lx);
                }
                b = ᐃΔ[1085][Dx.time];
                pf(1085, b, -b.width / 4, -b.height / 4);
                b = ᐃΔ[1088][Dx.time];
                ⲆⵠΔ = -b.width;
                ⵠⲆⵠ = -b.height;
                ao.save();
                ao.translate(po * -40, po * -45);
                ao.rotate(this.ⲆᐃΔⵠⲆ * this.ⵠⲆᐃⲆⲆⵠᐃ.ⲆᐃΔ);
                Vp(ao, b, -ⲆⵠΔ / 4, -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
                ao.restore();
                b = ᐃΔ[1091][Dx.time];
                ao.save();
                ao.translate(po * 40, po * -45);
                ao.rotate(-this.ⵠⲆᐃⲆⲆⵠᐃ.ⲆᐃΔ * this.ⲆᐃΔⵠⲆ);
                Vp(ao, b, -ⲆⵠΔ / 4, -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
                ao.restore();
            } else if (this.ⲆⵠⵠⵠⲆ === 227) {
                this.ⵠᐃᐃⲆⲆ = ⵠΔⲆⵠ.ⲆᐃⲆΔⵠᐃΔ(this.ⵠᐃᐃⲆⲆ, this.ΔⵠⲆⲆⲆ, 0.018);
                this.ⵠⲆᐃⲆⲆⵠᐃ.ⲆΔᐃ();
                if (this.ΔⵠⲆⲆⲆ > 85) {
                    this.ⲆᐃΔⵠⲆ = Math.min(1, this.ⲆᐃΔⵠⲆ + Lx / 4);
                } else {
                    this.ⲆᐃΔⵠⲆ = Math.max(0.1, this.ⲆᐃΔⵠⲆ - Lx);
                }
                b = ᐃΔ[1070][Dx.time];
                pf(1070, b, -b.width / 4, -b.height / 4);
                b = ᐃΔ[1073][Dx.time];
                ⲆⵠΔ = -b.width;
                ⵠⲆⵠ = -b.height;
                ao.save();
                ao.translate(po * -40, po * -45);
                ao.rotate(this.ⲆᐃΔⵠⲆ * this.ⵠⲆᐃⲆⲆⵠᐃ.ⲆᐃΔ);
                Vp(ao, b, -ⲆⵠΔ / 4, -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
                ao.restore();
                b = ᐃΔ[1076][Dx.time];
                ao.save();
                ao.translate(po * 40, po * -45);
                ao.rotate(this.ⲆᐃΔⵠⲆ * -this.ⵠⲆᐃⲆⲆⵠᐃ.ⲆᐃΔ);
                Vp(ao, b, -ⲆⵠΔ / 4, -ⵠⲆⵠ / 4, ⲆⵠΔ / 2, ⵠⲆⵠ / 2);
                ao.restore();
            } else if (this.ⲆⵠⵠⵠⲆ === 91) {
                this.ⵠᐃᐃⲆⲆ = ⵠΔⲆⵠ.ⲆᐃⲆΔⵠᐃΔ(this.ⵠᐃᐃⲆⲆ, this.ΔⵠⲆⲆⲆ, 0.018);
                b = ᐃΔ[91][Dx.time];
                pf(91, b, -b.width / 4, -b.height / 4);
            } else if (this.ⲆⵠⵠⵠⲆ === 230) {
                this.ⵠᐃᐃⲆⲆ = ⵠΔⲆⵠ.ⲆᐃⲆΔⵠᐃΔ(this.ⵠᐃᐃⲆⲆ, this.ΔⵠⲆⲆⲆ, 0.018);
                b = ᐃΔ[236][Dx.time];
                pf(236, b, -b.width / 4, -b.height / 4);
            } else if (this.ⲆⵠⵠⵠⲆ === 224) {
                b = ᐃΔ[224][Dx.time];
                pf(224, b, -b.width / 4, -b.height / 4);
            } else if (this.ⲆⵠⵠⵠⲆ === 239) {
                b = ᐃΔ[1221][Dx.time];
                if (this.ΔⵠⲆⲆⲆ > 85) {
                    this.ⲆᐃΔⵠⲆ = Math.min(1, this.ⲆᐃΔⵠⲆ + Lx / 4);
                } else {
                    this.ⲆᐃΔⵠⲆ = Math.max(0, this.ⲆᐃΔⵠⲆ - Lx);
                }
                this.ΔⵠΔΔΔ += Lx * 60;
                if (this.ΔⵠΔΔΔ > 60) {
                    this.ΔⵠΔΔΔ -= 60;
                }
                var c = this.ⲆᐃΔⵠⲆ * ((this.ΔⵠΔΔΔ < 30 ? this.ΔⵠΔΔΔ / 30 : 1 - (this.ΔⵠΔΔΔ - 30) / 30) * 12 - 6);
                pf(1221, b, -b.width / 4, -b.height / 4 + c);
            } else if (this.ⲆⵠⵠⵠⲆ === 225) {
                b = ᐃΔ[1043][Dx.time];
                if (this.ΔⵠⲆⲆⲆ > 85) {
                    this.ⲆᐃΔⵠⲆ = Math.min(1, this.ⲆᐃΔⵠⲆ + Lx / 4);
                } else {
                    this.ⲆᐃΔⵠⲆ = Math.max(0, this.ⲆᐃΔⵠⲆ - Lx);
                }
                this.ΔⵠΔΔΔ += Lx * 60;
                if (this.ΔⵠΔΔΔ > 60) {
                    this.ΔⵠΔΔΔ -= 60;
                }
                c = (-6 + (this.ΔⵠΔΔΔ < 30 ? this.ΔⵠΔΔΔ / 30 : 1 - (this.ΔⵠΔΔΔ - 30) / 30) * 12) * this.ⲆᐃΔⵠⲆ;
                pf(1043, b, -b.width / 4, -b.height / 4 + c);
            } else if (this.ⲆⵠⵠⵠⲆ === 226) {
                var d = Math.PI / 2;
                var e = Math.PI / 4;
                b = ᐃΔ[1055][Dx.time];
                if (this.ΔⵠⲆⲆⲆ > 85) {
                    this.ⲆᐃΔⵠⲆ = Math.min(1, this.ⲆᐃΔⵠⲆ + Lx / 4);
                } else {
                    this.ⲆᐃΔⵠⲆ = Math.max(0, this.ⲆᐃΔⵠⲆ - Lx);
                }
                this.ΔⵠΔΔΔ += Lx * 60;
                if (this.ΔⵠΔΔΔ > 60) {
                    this.ΔⵠΔΔΔ -= 60;
                }
                c = this.ⲆᐃΔⵠⲆ * ((this.ΔⵠΔΔΔ < 30 ? this.ΔⵠΔΔΔ / 30 : 1 - (this.ΔⵠΔΔΔ - 30) / 30) * 12 - 6);
                pf(1055, b, -b.width / 4 + c, -b.height / 4);
                ao.restore();
                ao.save();
                ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
                ao.rotate(Math.PI + this.ΔΔᐃⲆᐃ + e);
                ao.translate(120, c);
                ao.rotate(d);
                b = ᐃΔ[1060][Dx.time];
                ⲆⵠΔ = -b.width;
                ⵠⲆⵠ = -b.height;
                Vp(ao, b, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
                ao.restore();
                ao.save();
                ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
                ao.rotate(Math.PI + this.ΔΔᐃⲆᐃ + d + e);
                ao.translate(120, c);
                ao.rotate(d);
                b = ᐃΔ[1063][Dx.time];
                ⲆⵠΔ = -b.width;
                ⵠⲆⵠ = -b.height;
                Vp(ao, b, -ⲆⵠΔ / 2, -ⵠⲆⵠ / 2, ⲆⵠΔ, ⵠⲆⵠ);
            }
            ao.restore();
        }
    }
    ᐃⲆⵠⵠᐃⵠⵠᐃᐃ = 0;
    const dw = String.fromCharCode;
    const ew = dw(101);
    const fw = dw(118);
    const gw = dw(97);
    const hw = dw(108);
    function iw() {
        if (this.enabled && this.ⲆⲆᐃΔΔ >= 0) {
            var a = new Date().getTime() - this.ⲆⲆᐃΔΔ;
            var b = a % 1000 / 1000;
            if (b > 0.5) {
                b = 1 - (b - 0.5) * 2;
            } else {
                b *= 2;
            }
            a = Math.floor(a / 1000);
            if (a < 60) {
                a = 60 - a;
                if (!this.label) {
                    this.label = qu(po, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
                }
                if (this.now != a || !this.ⵠⵠⲆⵠⲆⵠⲆ) {
                    this.now = a;
                    this.ⵠⵠⲆⵠⲆⵠⲆ = qu(po, "" + a, 40, "#660000", null, null, null, null, null, "#000", 10);
                }
                Vp(ao, this.label, (io - this.label.width) / 2, po * 100);
                ao.globalAlpha = b;
                Vp(ao, this.ⵠⵠⲆⵠⲆⵠⲆ, (io - this.label.width) / 2 - this.ⵠⵠⲆⵠⲆⵠⲆ.width + po * 15, po * 100);
                ao.globalAlpha = 1;
            }
        }
    }
    function jw(a, b) {
        if (this.text) {
            if (this.timeout.ᐃⵠⵠ) {
                ao.globalAlpha = 1 - this.timeout.ⲆᐃΔ;
            } else {
                ao.globalAlpha = 1;
            }
            this.label ||= qu(po, this.text, 40, a, null, null, null, null, null, b, 10);
            Vp(ao, this.label, (io - this.label.width) / 2, po * 50);
            ao.globalAlpha = 1;
            if (this.timeout.ⲆΔᐃ() && this.timeout.ᐃⵠⵠ == Gl) {
                this.text = this.list.shift();
                this.label = null;
            }
        }
    }
    function kw() {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
        if (this.text.length > 0) {
            for (var a = 0; this.text.length > a && a < 2; a++) {
                if (!this.label[a]) {
                    this.label[a] = rd(po, this.text[a]);
                    this.ΔⵠΔΔⲆᐃΔ[a] = 0;
                    this.ⵠⵠⲆᐃⲆⲆⵠ[a] = 0;
                }
                if (a === 1) {
                    this.ⵠⵠⲆᐃⲆⲆⵠ[0] = ⵠΔⲆⵠ.ⵠΔⲆⵠⵠ(this.ᐃⲆΔΔΔᐃᐃ) * 30;
                }
            }
            this.ΔⵠΔΔⲆᐃΔ[0] += Lx;
            if (this.text.length > 1) {
                this.ᐃⲆΔΔΔᐃᐃ = Math.min(this.ᐃⲆΔΔΔᐃᐃ + Lx, 1);
                if (this.ΔⵠΔΔⲆᐃΔ[0] > 1 && this.ᐃⲆΔΔΔᐃᐃ > 0.5) {
                    this.ΔⵠΔΔⲆᐃΔ[1] += Lx;
                }
            }
            for (a = 0; a < this.text.length && a < 2; a++) {
                var b = this.ΔⵠΔΔⲆᐃΔ[a];
                if (b > 0) {
                    ao.globalAlpha = b < 0.25 ? b * 4 : b > 3.75 ? Math.max((4 - b) * 4, 0) : 1;
                    Vp(ao, this.label[a], -this.label[a].width / 2, -this.ⵠⵠⲆᐃⲆⲆⵠ[a] + -this.label[a].height / 2 - po * 110);
                }
            }
            if (this.ΔⵠΔΔⲆᐃΔ[0] > 4) {
                this.ΔⵠΔΔⲆᐃΔ.shift();
                this.text.shift();
                this.ⵠⵠⲆᐃⲆⲆⵠ.shift();
                this.label.shift();
                this.ᐃⲆΔΔΔᐃᐃ = 0;
            }
        }
        ao.restore();
    }
    function lw(b, c, d) {
        if (c.ⵠΔⵠⵠⲆⵠΔ() !== 1) {
            return c;
        }
        var e = ΔᐃⵠΔⲆⲆⲆ[d][b];
        if (e === undefined) {
            var f = (e = document.createElement("canvas")).getContext("2d");
            var g = c.width;
            var a = c.height;
            e.width = g;
            e.height = a;
            f.drawImage(c, 0, 0);
            f.globalCompositeOperation = "source-in";
            f.fillStyle = ⵠᐃⲆᐃΔᐃΔΔᐃ[d];
            f.fillRect(0, 0, g, a);
            ΔᐃⵠΔⲆⲆⲆ[d][b] = e;
        }
        return e;
    }
    function mw() {
        var c = 0;
        switch (this.right) {
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
                c = 1;
        }
        if (this.ᐃΔΔⲆⵠ) {
            for (var f = 0; this.bubbles.length > f; f++) {
                var g = this.bubbles[f];
                if (g.ᐃⲆⲆᐃⲆ > 0.5) {
                    var j = 1 - (g.ᐃⲆⲆᐃⲆ - 0.5) * 2;
                } else {
                    j = g.ᐃⲆⲆᐃⲆ * 2;
                }
                ao.globalAlpha = j;
                var k = ᐃΔ[540][Dx.time][g.id];
                Vp(ao, k, Ex.ⵠⵠⵠ.x + g.x - k.width / 2, Ex.ⵠⵠⵠ.y + g.y - k.height / 2);
                ao.globalAlpha = 1;
            }
        } else {
            ao.save();
            ao.translate(Ex.ⵠⵠⵠ.x + this.x, Ex.ⵠⵠⵠ.y + this.y);
            Dx.ⵠⵠⵠΔΔⵠⲆᐃⲆ(this);
            if (this.action & 16) {
                (function (a) {
                    if (a.right >= 0) {
                        switch (a.right) {
                            case 49:
                                ao.save();
                                var b = a.attack.ⲆᐃΔ * -3 / Math.PI;
                                if (a.attack.ᐃⵠⵠ) {
                                    var c = -Math.PI / 3 - (Math.PI / 3 + a.attack.ⲆᐃΔ) / 3;
                                } else {
                                    c = a.attack.ⲆᐃΔ;
                                }
                                ao.rotate(a.angle - Math.PI / 2 + c);
                                ao.globalAlpha = b / 1.2;
                                id(ao, po * -40, po * 90, po * 5);
                                $b(ao, "#0B6A84");
                                ao.globalAlpha = b / 1.2;
                                id(ao, po * -52, po * 100, po * 8);
                                $b(ao, "#0B6A84");
                                ao.globalAlpha = b / 1.2;
                                id(ao, po * -30, po * 95, po * 4);
                                $b(ao, "#0B6A84");
                                ao.globalAlpha = 1;
                                ao.restore();
                                break;
                            case 46:
                            case 50:
                            case 51:
                            case 52:
                                if (a.ⲆΔⲆᐃⵠΔΔ === 1) {
                                    break;
                                }
                                if (a.Ⲇⵠⵠⵠⵠ > 0) {
                                    var d = Hr.ᐃⵠΔᐃⲆΔᐃ[Dx.time];
                                } else {
                                    d = a.ⲆᐃᐃⲆⵠⵠΔ > 0 || a.ΔⲆΔΔΔ > 0 ? Hr.ⵠⲆᐃⲆⵠⲆΔ[Dx.time] : Hr.ⲆⲆⲆⲆΔⵠⲆ[Dx.time];
                                }
                                b = a.attack.ⲆᐃΔ * -3 / Math.PI;
                                if ((c = a.attack.ᐃⵠⵠ ? Math.max(0.5 - b / 2 + 0.5, 0) : Math.max(b / 2, 0)) === 0) {
                                    a.ᐃᐃᐃΔΔΔᐃ = a.angle;
                                }
                                ao.save();
                                ao.rotate(a.ᐃᐃᐃΔΔΔᐃ - Math.PI / 2);
                                ao.globalAlpha = b;
                                var e = po * 25 + c * 25;
                                id(ao, e, po * 80, po * 15);
                                $b(ao, d);
                                id(ao, -e, po * 80, po * 15);
                                $b(ao, d);
                                ao.globalAlpha = 1;
                                ao.restore();
                        }
                    }
                })(this);
            }
            ao.save();
            ao.rotate(this.angle - Math.PI / 2);
            if (!(this.action & 16)) {
                if (this.action & 64 || this.ⲆⵠⵠⵠⲆ !== 0) {
                    this.ⲆᐃⲆⲆᐃΔⵠ.ⲆΔᐃ();
                } else if (this.action & 32) {
                    this.ⲆⵠⵠⲆᐃΔᐃ.ⲆΔᐃ();
                }
            }
            var m;
            var p = this.ⲆᐃⲆⲆᐃΔⵠ.ⲆᐃΔ;
            var q = this.ⲆⵠⵠⲆᐃΔᐃ.ⲆᐃΔ;
            if (this.ⵠⵠⲆⲆΔ === 85) {
                k = ᐃΔ[793][Dx.time];
                m = 793;
            } else if (this.ⵠⵠⲆⲆΔ === 20) {
                k = ᐃΔ[920][Dx.time];
                m = 920;
            } else if (this.ⵠⵠⲆⲆΔ === 21) {
                k = ᐃΔ[924][Dx.time];
                m = 924;
            } else if (this.ⵠⵠⲆⲆΔ === 22) {
                k = ᐃΔ[928][Dx.time];
                m = 928;
            } else if (this.ᐃᐃΔⲆⲆΔⵠ) {
                k = ᐃΔ[822][Dx.time];
                m = 822;
            } else {
                k = ᐃΔ[7][this.ⵠᐃⵠᐃ][Dx.time];
                m = 7;
            }
            ⲆᐃᐃⲆ = ᐃΔ[286][Dx.time];
            var x = k;
            var h = m;
            if (this.action & 16) {
                if (this.attack.ⲆΔᐃ() && this.attack.ᐃⵠⵠ == w) {
                    this.ᐃΔᐃⵠΔ = !this.ᐃΔᐃⵠΔ;
                    this.action -= 16;
                    if (this.ᐃⵠᐃΔ == Ex.ᐃⵠᐃΔ) {
                        Ex.control.ᐃⲆΔᐃ = 0;
                    }
                }
                if (this.right >= 0) {
                    this.ᐃΔᐃⵠΔ = true;
                }
                var l = this.ᐃΔᐃⵠΔ ? this.attack.ⲆᐃΔ : -this.attack.ⲆᐃΔ / 3;
                var y = this.ᐃΔᐃⵠΔ ? this.attack.ⲆᐃΔ / 3 : -this.attack.ⲆᐃΔ;
                if (this.ᐃᐃΔⲆⲆΔⵠ) {
                    ao.save();
                    ao.rotate(l);
                    hf(m, k, -k.width / 2 - (66 + p) * po, -k.height / 2 + (5 + q) * po);
                    ao.restore();
                    ao.save();
                    ao.rotate(y);
                    hf(m, k, -k.width / 2 + (66 + p) * po, -k.height / 2 + (5 + q) * po);
                    ao.restore();
                } else if (c === 0) {
                    if (this.right === 64) {
                        l = -ⵠΔⲆⵠ.ΔⲆⵠⲆⵠᐃⵠ(-l);
                    }
                    ao.save();
                    ao.rotate(l);
                    hf(286, ⲆᐃᐃⲆ, -ⲆᐃᐃⲆ.width / 2 - (49 + p) * po, -ⲆᐃᐃⲆ.height / 2 + po * (15 + q));
                    if (this.right === 28) {
                        var b = ᐃΔ[this.right][this.ΔᐃᐃᐃΔ][Dx.time];
                        rf(this.right, this.ΔᐃᐃᐃΔ, b, -b.width / 4 - (62 + p) * po, -b.height / 4 + po * (q + 18));
                    } else {
                        qv(this.right, p, q);
                    }
                    if (m >= 920) {
                        pf(m, k, -k.width / 4 - po * (49 + p), -k.height / 4 + (11 + q) * po);
                    } else if (m !== 793) {
                        rf(m, this.ⵠᐃⵠᐃ, k, -k.width / 4 - (49 + p) * po, -k.height / 4 + (11 + q) * po);
                    } else {
                        hf(m, k, -k.width / 2 - (49 + p) * po, -k.height / 2 + po * (11 + q));
                    }
                    ao.restore();
                    ao.save();
                    ao.rotate(y);
                    hf(286, ⲆᐃᐃⲆ, -ⲆᐃᐃⲆ.width / 2 + po * (49 + p), -ⲆᐃᐃⲆ.height / 2 + (15 + q) * po);
                    if (m >= 920) {
                        pf(m, k, -k.width / 4 + po * (49 + p), -k.height / 4 + po * (11 + q));
                    } else if (m !== 793) {
                        rf(m, this.ⵠᐃⵠᐃ, k, -k.width / 4 + po * (49 + p), -k.height / 4 + (11 + q) * po);
                    } else {
                        hf(m, k, -k.width / 2 + po * (49 + p), -k.height / 2 + po * (11 + q));
                    }
                    ao.restore();
                }
            } else if (this.ᐃᐃΔⲆⲆΔⵠ) {
                hf(m, k, -k.width / 2 - (66 + p) * po, -k.height / 2 + po * (5 + q));
                hf(m, k, -k.width / 2 + po * (66 + p), -k.height / 2 + po * (5 + q));
            } else if (c === 0) {
                hf(286, ⲆᐃᐃⲆ, -ⲆᐃᐃⲆ.width / 2 - po * (49 + p), -ⲆᐃᐃⲆ.height / 2 + (15 + q) * po);
                if (this.right === 28) {
                    b = ᐃΔ[this.right][this.ΔᐃᐃᐃΔ][Dx.time];
                    rf(this.right, this.ΔᐃᐃᐃΔ, b, -b.width / 4 - (62 + p) * po, -b.height / 4 + po * (q + 18));
                } else {
                    qv(this.right, p, q);
                }
                if (m >= 920) {
                    pf(m, k, -k.width / 4 - po * (49 + p), -k.height / 4 + (11 + q) * po);
                } else if (m !== 793) {
                    rf(m, this.ⵠᐃⵠᐃ, k, -k.width / 4 - po * (49 + p), -k.height / 4 + (11 + q) * po);
                } else {
                    hf(m, k, -k.width / 2 - (49 + p) * po, -k.height / 2 + po * (11 + q));
                }
                hf(286, ⲆᐃᐃⲆ, -ⲆᐃᐃⲆ.width / 2 + po * (49 + p), -ⲆᐃᐃⲆ.height / 2 + po * (15 + q));
                if (m >= 920) {
                    pf(m, k, -k.width / 4 + (49 + p) * po, -k.height / 4 + po * (11 + q));
                } else if (m !== 793) {
                    rf(m, this.ⵠᐃⵠᐃ, k, -k.width / 4 + (49 + p) * po, -k.height / 4 + (11 + q) * po);
                } else {
                    hf(m, k, -k.width / 2 + (49 + p) * po, -k.height / 2 + po * (11 + q));
                }
            }
            if (this.ᐃᐃⵠᐃⲆ && this.ⵠⵠⲆⲆΔ < 1) {
                k = ᐃΔ[29][this.ⲆⵠᐃⵠⲆΔⲆ][Dx.time];
                rf(29, this.ⲆⵠᐃⵠⲆΔⲆ, k, -k.width / 4, -k.height / 4 - po * 39);
            }
            if (this.ᐃᐃΔⲆⲆΔⵠ) {
                k = ᐃΔ[820][Dx.time];
                hf(820, k, -k.width / 2, -k.height / 2);
                this.ⵠⲆⵠⲆⵠᐃⲆ.ⲆΔᐃ();
                k = ᐃΔ[821][Dx.time];
                hf(821, k, -k.width / 2, -k.height / 2 + this.ⵠⲆⵠⲆⵠᐃⲆ.ⲆᐃΔ);
            } else {
                k = ᐃΔ[255][this.ⵠᐃⵠᐃ][Dx.time];
                if (this.ⵠⵠⲆⲆΔ !== 85 && (rf(255, this.ⵠᐃⵠᐃ, k, -k.width / 4, -k.height / 4), this.ᐃⵠᐃⲆΔ > 0)) {
                    k = ᐃΔ[796][this.ᐃⵠᐃⲆΔ][Dx.time];
                    rf(796, this.ᐃⵠᐃⲆΔ, k, -k.width / 4, -k.height / 4);
                }
            }
            if (this.action & 128) {
                if (this.ᐃⲆΔⵠⵠ.ⲆΔᐃ() && this.ᐃⲆΔⵠⵠ.ᐃⵠⵠ == 0) {
                    this.action -= 128;
                }
                ao.globalAlpha = 0.6 - this.ᐃⲆΔⵠⵠ.ⲆᐃΔ;
                if (this.ᐃᐃΔⲆⲆΔⵠ) {
                    k = ᐃΔ[825];
                    Vp(ao, k, -k.width / 2, -k.height / 2);
                } else {
                    k = lw(this.ⵠᐃⵠᐃ, ᐃΔ[255][this.ⵠᐃⵠᐃ][0], ΔⵠⵠⵠⵠΔⵠᐃᐃ);
                    Vp(ao, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
                }
                ao.globalAlpha = 1;
            }
            if (this.action & 256) {
                if (this.ⲆⵠᐃⵠΔΔⵠ.ⲆΔᐃ() && this.ⲆⵠᐃⵠΔΔⵠ.ᐃⵠⵠ == 0) {
                    this.action -= 256;
                }
                ao.globalAlpha = 0.6 - this.ⲆⵠᐃⵠΔΔⵠ.ⲆᐃΔ;
                k = ᐃΔ[266];
                Vp(ao, k, -k.width / 2, -k.height / 2);
                ao.globalAlpha = 1;
            }
            if (this.action & 2) {
                if (this.ΔⲆᐃ.ⲆΔᐃ() && this.ΔⲆᐃ.ᐃⵠⵠ == tr) {
                    this.action -= 2;
                }
                ao.globalAlpha = 0.6 - this.ΔⲆᐃ.ⲆᐃΔ;
                if (this.ᐃᐃΔⲆⲆΔⵠ) {
                    k = ᐃΔ[823];
                    Vp(ao, k, -k.width / 2, -k.height / 2);
                } else {
                    k = lw(this.ⵠᐃⵠᐃ, ᐃΔ[255][this.ⵠᐃⵠᐃ][0], ᐃⲆⵠⵠᐃⵠⵠᐃᐃ);
                    Vp(ao, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
                }
                ao.globalAlpha = 1;
            }
            if (this.action & 4) {
                if (this.freeze.ⲆΔᐃ() && this.freeze.ᐃⵠⵠ == bk) {
                    this.action -= 4;
                }
                ao.globalAlpha = 0.6 - this.freeze.ⲆᐃΔ;
                k = lw(this.ⵠᐃⵠᐃ, ᐃΔ[255][this.ⵠᐃⵠᐃ][0], ⲆᐃΔᐃᐃⲆⵠⲆᐃ);
                Vp(ao, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
                ao.globalAlpha = 1;
            }
            if (this.action & 8) {
                if (this.ΔᐃⵠΔᐃᐃᐃ.ⲆΔᐃ() && this.ΔᐃⵠΔᐃᐃᐃ.ᐃⵠⵠ == 0) {
                    this.action -= 8;
                }
                ao.globalAlpha = 0.6 - this.ΔᐃⵠΔᐃᐃᐃ.ⲆᐃΔ;
                if (this.ᐃᐃΔⲆⲆΔⵠ) {
                    k = ᐃΔ[824];
                    Vp(ao, k, -k.width / 2, -k.height / 2);
                } else {
                    k = lw(this.ⵠᐃⵠᐃ, ᐃΔ[255][this.ⵠᐃⵠᐃ][0], ⲆⵠⲆⲆⲆⲆΔⵠᐃ);
                    Vp(ao, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
                }
                ao.globalAlpha = 1;
            }
            bw(this.ⵠⵠⲆⲆΔ);
            if (c === 1) {
                if (this.action & 16) {
                    p += this.attack.ⲆᐃΔ * 15;
                }
                hf(286, ⲆᐃᐃⲆ, -ⲆᐃᐃⲆ.width / 2 - po * 26, -ⲆᐃᐃⲆ.height / 2 + po * (31 + q + p));
                if (h >= 920) {
                    pf(h, x, -x.width / 4 - po * 26, -x.height / 4 + po * (27 + q + p));
                } else if (h !== 793) {
                    rf(h, this.ⵠᐃⵠᐃ, x, -x.width / 4 - po * 26, -x.height / 4 + (27 + q + p) * po);
                } else {
                    hf(h, x, -x.width / 2 - po * 26, -x.height / 2 + po * (27 + q + p));
                }
                hf(286, ⲆᐃᐃⲆ, -ⲆᐃᐃⲆ.width / 2 + po * 26, -ⲆᐃᐃⲆ.height / 2 + (31 + q + p) * po);
                if (h >= 920) {
                    pf(h, x, -x.width / 4 + po * 26, -x.height / 4 + po * (27 + q + p));
                } else if (h !== 793) {
                    rf(h, this.ⵠᐃⵠᐃ, x, -x.width / 4 + po * 26, -x.height / 4 + po * (27 + q + p));
                } else {
                    hf(h, x, -x.width / 2 + po * 26, -x.height / 2 + (27 + q + p) * po);
                }
                Gv(this.right, 0, q + p);
            }
            ao.restore();
            if (this.ⵠⵠⲆⲆΔ !== 83 && this.ⵠⵠⲆⲆΔ !== 85) {
                if (this.Ⲇⵠⵠⵠⵠ > 0) {
                    this.ΔⵠΔⲆ.ΔⵠΔΔᐃⲆⲆ ||= qu(po, this.ΔⵠΔⲆ.ⲆⲆⲆⲆΔ, 20, "#187484", "#000", 2, null, null, po * 300);
                    k = this.ΔⵠΔⲆ.ΔⵠΔΔᐃⲆⲆ;
                } else {
                    if (!this.ΔⵠΔⲆ.label) {
                        this.ΔⵠΔⲆ.label = qu(po, this.ΔⵠΔⲆ.ⲆⲆⲆⲆΔ, 20, "#FFF", "#000", 2, null, null, po * 300);
                    }
                    k = this.ΔⵠΔⲆ.label;
                }
                if (Dx.Δⵠᐃ == Hr.Δⵠⵠ) {
                    ao.globalAlpha = 0.5;
                }
                p = Math.floor(-k.width / 2);
                q = Math.floor(-k.height / 2 - po * 70);
                Vp(ao, k, p, q);
                if (this.ΔⵠΔⲆ.level > 0) {
                    var z = p + k.width + 5;
                    k = ᐃΔ[885];
                    if (ΔⵠⵠⲆⲆⲆΔ[this.ΔⵠΔⲆ.level] === undefined) {
                        ΔⵠⵠⲆⲆⲆΔ[this.ΔⵠΔⲆ.level] = qu(po, "[" + this.ΔⵠΔⲆ.level + "]", 20, "#F9E8A2", "#000", 2, null, null, po * 50);
                    }
                    Vp(ao, ΔⵠⵠⲆⲆⲆΔ[this.ΔⵠΔⲆ.level], z, q);
                }
                ao.globalAlpha = 1;
            } else {
                q = Math.floor(po * -70);
                p = Math.floor(ᐃΔ[558].width / 1.5);
            }
            if (Ex.ΔⵠᐃⲆᐃⵠⲆ(this.ⲆⲆᐃᐃ)) {
                if (Ex.ⵠⲆⲆⵠΔ[0] == this.ⲆⲆᐃᐃ) {
                    k = ᐃΔ[559];
                } else {
                    k = ᐃΔ[558];
                }
                Vp(ao, k, p - k.width - 5, q - 6);
            }
            ao.restore();
        }
    }
    function nw() {
        if (this.message !== undefined) {
            var a = Ex.ⲆᐃΔⲆ.ⲆᐃⲆⵠΔ.length > 0 ? -95 : 0;
            Vp(ao, this.message, 0, no - this.message.height + a);
        }
    }
    ΔⵠⵠⵠⵠΔⵠᐃᐃ = 1;
    ⲆᐃΔᐃᐃⲆⵠⲆᐃ = 2;
    ⲆⵠⲆⲆⲆⲆΔⵠᐃ = 3;
    ᐃⲆᐃⲆⵠⵠⵠᐃⲆ = 4;
    ΔᐃⵠΔⲆⲆⲆ = [[], [], [], [], []];
    ⵠᐃⲆᐃΔᐃΔΔᐃ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
    var ow = 0;
    function pw(a) {
        const b = function () {
            Hf.addEventListener("mousemove", function () {
                b();
            });
        };
        b();
    }
    function qw(j, e, i, k, n, o, a, q = 0) {
        for (var r = a; q <= r; r--) {
            for (var s = j; e >= s; s++) {
                for (var t = i; t <= k; t++) {
                    var w = Bx.ⲆⵠⲆΔ[s][t];
                    if (w && w[o]) {
                        var x = w[o][r];
                        if (x !== Vq) {
                            for (var y = 0; y < x.length; y++) {
                                var z = x[y];
                                var A = ᐃΔ[n][Dx.time][r];
                                var B = (ow + (s + t) * 3) % 60;
                                var D = B < 30 ? B / 30 : 1 - (B - 30) / 30;
                                var E = -A.width * (1 + D * 0.9 / 30);
                                var F = -A.height * (1 + D * 0.9 / 30);
                                D = (B = (ow + (s + t) * 7) % 60) < 30 ? B / 30 : 1 - (B - 30) / 30;
                                var G = ao.globalAlpha;
                                ao.globalAlpha = (0.9 + D * 0.1) * G;
                                Vp(ao, A, Ex.ⵠⵠⵠ.x + z.x - E / 2, Ex.ⵠⵠⵠ.y + z.y - F / 2, E, F);
                                ao.globalAlpha = G;
                            }
                        }
                    }
                }
            }
        }
    }
    function rw(j, e, i, k, n, o, a, q) {
        if (q === Fa) {
            q = 0;
        }
        Dx.ⲆⵠΔⲆ[n].ⲆΔᐃ();
        for (var r = a; q <= r; r--) {
            for (var t = j; t <= e; t++) {
                for (var w = i; w <= k; w++) {
                    var x = Bx.ⲆⵠⲆΔ[t][w];
                    if (x && x[o]) {
                        var y = x[o][r];
                        if (Nh !== y) {
                            for (var z = 0; y.length > z; z++) {
                                var A = y[z];
                                if (A.ⲆΔᐃ) {
                                    if (A.ΔⲆᐃ.ⲆΔᐃ() && Bq == A.ΔⲆᐃ.ᐃⵠⵠ) {
                                        A.ⲆΔᐃ = false;
                                    }
                                    var B = Lx * (1 - A.ΔⲆᐃ.ⲆᐃΔ) * 600 * po;
                                    var D = B * Math.sin(A.angle);
                                    var E = Math.cos(A.angle) * B;
                                } else {
                                    D = 0;
                                    E = 0;
                                }
                                var F = ᐃΔ[n][Dx.time][r];
                                var G = -F.width * Dx.ⲆⵠΔⲆ[n].ⲆᐃΔ;
                                var H = -F.height * Dx.ⲆⵠΔⲆ[n].ⲆᐃΔ;
                                Vp(ao, F, Ex.ⵠⵠⵠ.x + A.x - G / 2 + D, Ex.ⵠⵠⵠ.y + A.y - H / 2 + E, G, H);
                            }
                        }
                    }
                }
            }
        }
    }
    var sw = [];
    for (wb = 0; wb < 100; wb++) {
        var tw = 1;
        if (Math.random() < 0.25) {
            tw = 0;
        }
        sw.push(tw);
    }
    function uw(j, e, i, k, n, o, a, q = 0, r) {
        for (var h = a; q <= h; h--) {
            for (var s = j; e >= s; s++) {
                for (var t = i; k >= t; t++) {
                    var w = Bx.ⲆⵠⲆΔ[s][t];
                    if (w !== Ol && w[o] !== sl) {
                        var x = w[o][h];
                        if (x !== undefined) {
                            for (var A = 0; A < x.length; A++) {
                                var B = x[A];
                                if (B.ⲆΔᐃ) {
                                    if (B.ΔⲆᐃ.ⲆΔᐃ() && B.ΔⲆᐃ.ᐃⵠⵠ == na) {
                                        B.ⲆΔᐃ = false;
                                    }
                                    var D = (1 - B.ΔⲆᐃ.ⲆᐃΔ) * Lx * 600 * po;
                                    var E = Math.sin(B.angle) * D;
                                    var F = D * Math.cos(B.angle);
                                } else {
                                    E = 0;
                                    F = 0;
                                }
                                for (var G = 0; G < ⵠΔᐃⲆΔⵠⵠ[h].ΔⲆⲆⲆ; G++) {
                                    if (Dx.ᐃⵠⲆⵠⵠ[G].ⵠᐃᐃᐃⵠⵠⲆ !== Kx) {
                                        Dx.ᐃⵠⲆⵠⵠ[G].ⲆΔᐃ();
                                        Dx.ᐃⵠⲆⵠⵠ[G].ⵠᐃᐃᐃⵠⵠⲆ = Kx;
                                    }
                                    var H = ᐃΔ[941][Dx.time][ⵠΔᐃⲆΔⵠⵠ[h].ⵠⵠⲆⲆ[G].Ⲇᐃⵠ];
                                    var I = Dx.ᐃⵠⲆⵠⵠ[G].ⲆᐃΔ * -H.width;
                                    var J = Dx.ᐃⵠⲆⵠⵠ[G].ⲆᐃΔ * -H.height;
                                    Vp(ao, H, Ex.ⵠⵠⵠ.x + B.x - I / 4 + E + ⵠΔᐃⲆΔⵠⵠ[h].ⵠⵠⲆⲆ[G].x, Ex.ⵠⵠⵠ.y + B.y - J / 4 + F + ⵠΔᐃⲆΔⵠⵠ[h].ⵠⵠⲆⲆ[G].y, I / 2, J / 2);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    function vw(c, e, f, i, j, k, a, m = 0, n) {
        for (var h = c; e >= h; h++) {
            for (var o = f; o <= i; o++) {
                var p = Bx.ⲆⵠⲆΔ[h][o];
                if (p !== Ih && mr !== p[k]) {
                    var q = p[k];
                    if (q !== undefined) {
                        if (q.scale === 1) {
                            var r = ᐃΔ[j][Dx.time][q.ⲆΔⲆᐃ];
                            ao.save();
                            ao.translate(Ex.ⵠⵠⵠ.x + q.x, Ex.ⵠⵠⵠ.y + q.y);
                            ao.rotate(q.angle);
                            Vp(ao, r, -r.width / 4, -r.height / 4, r.width / 2, r.height / 2);
                            ao.restore();
                        } else if (q.scale === 3) {
                            for (var s = 0; q.ᐃΔⵠ.length > s; s++) {
                                ao.save();
                                ao.translate(Ex.ⵠⵠⵠ.x + q.x, Ex.ⵠⵠⵠ.y + q.y);
                                ao.rotate(q.ᐃΔⵠ[s].angle);
                                r = ᐃΔ[j][Dx.time][q.ᐃΔⵠ[s].ⲆΔⲆᐃ];
                                Vp(ao, r, -r.width / 3 + q.ᐃΔⵠ[s].x, -r.height / 3 + q.ᐃΔⵠ[s].y, r.width / 1.5, r.height / 1.5);
                                ao.restore();
                            }
                        } else {
                            r = ᐃΔ[j][Dx.time][q.ⲆΔⲆᐃ];
                            ao.save();
                            ao.translate(Ex.ⵠⵠⵠ.x + q.x, Ex.ⵠⵠⵠ.y + q.y);
                            ao.rotate(q.angle);
                            Vp(ao, r, -r.width / 2, -r.height / 2, r.width, r.height);
                            ao.restore();
                        }
                    }
                }
            }
        }
    }
    function ww(f, e, i, j, k, n, a, o, q) {
        if (ks === o) {
            o = 0;
        }
        for (var h = a; o <= h; h--) {
            for (var r = f; e >= r; r++) {
                for (var t = i; j >= t; t++) {
                    if (q <= 0 || sw[(r + t * q) % sw.length] !== 1) {
                        var w = Bx.ⲆⵠⲆΔ[r][t];
                        if (w !== sl && w[n] !== undefined) {
                            var x = w[n][h];
                            if (x !== ks) {
                                for (var y = 0; y < x.length; y++) {
                                    var z = x[y];
                                    if (z.ⲆΔᐃ) {
                                        if (z.ΔⲆᐃ.ⲆΔᐃ() && z.ΔⲆᐃ.ᐃⵠⵠ == 0) {
                                            z.ⲆΔᐃ = false;
                                        }
                                        var A = po * (Lx * (1 - z.ΔⲆᐃ.ⲆᐃΔ) * 600);
                                        var B = Math.sin(z.angle) * A;
                                        var D = Math.cos(z.angle) * A;
                                    } else {
                                        B = 0;
                                        D = 0;
                                    }
                                    var E = ᐃΔ[k][Dx.time][h];
                                    Vp(ao, E, Ex.ⵠⵠⵠ.x + z.x - E.width / (ᐃⵠᐃⵠⲆ * 2) + B, Ex.ⵠⵠⵠ.y + z.y - E.height / (ᐃⵠᐃⵠⲆ * 2) + D, E.width / ᐃⵠᐃⵠⲆ, E.height / ᐃⵠᐃⵠⲆ);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    ᐃⵠᐃⵠⲆ = 1;
    ⵠΔᐃⲆΔⵠⵠ = [{
        ΔⲆⲆⲆ: 10,
        ⵠⵠⲆⲆ: [{
            x: -128,
            y: -20,
            Ⲇᐃⵠ: 0
        }, {
            x: -86,
            y: -4,
            Ⲇᐃⵠ: 1
        }, {
            y: -74,
            Ⲇᐃⵠ: 2,
            x: -60
        }, {
            x: -22,
            y: -144,
            Ⲇᐃⵠ: 0
        }, {
            y: 86,
            x: -58,
            Ⲇᐃⵠ: 0
        }, {
            y: -30,
            x: 3,
            Ⲇᐃⵠ: 0
        }, {
            y: -115,
            Ⲇᐃⵠ: 1,
            x: 65
        }, {
            Ⲇᐃⵠ: 0,
            y: -50,
            x: 118
        }, {
            x: 73,
            y: 15,
            Ⲇᐃⵠ: 1
        }, {
            x: 67,
            y: 79,
            Ⲇᐃⵠ: 0
        }]
    }, {
        ΔⲆⲆⲆ: 5,
        ⵠⵠⲆⲆ: [{
            y: -26,
            Ⲇᐃⵠ: 0,
            x: -45
        }, {
            Ⲇᐃⵠ: 2,
            y: 20,
            x: -45
        }, {
            Ⲇᐃⵠ: 1,
            x: 10,
            y: -60
        }, {
            x: 52,
            y: -17,
            Ⲇᐃⵠ: 1
        }, {
            y: 45,
            x: 14,
            Ⲇᐃⵠ: 0
        }]
    }, {
        ΔⲆⲆⲆ: 3,
        ⵠⵠⲆⲆ: [{
            Ⲇᐃⵠ: 2,
            y: 3,
            x: -30
        }, {
            Ⲇᐃⵠ: 2,
            x: 7,
            y: -38
        }, {
            x: 37,
            y: 5,
            Ⲇᐃⵠ: 2
        }]
    }, {
        ⵠⵠⲆⲆ: [{
            Ⲇᐃⵠ: 2,
            y: -87,
            x: -74
        }, {
            x: -11,
            y: -10,
            Ⲇᐃⵠ: 1
        }, {
            x: -99,
            y: 17,
            Ⲇᐃⵠ: 1
        }, {
            x: -66,
            y: 84,
            Ⲇᐃⵠ: 0
        }, {
            x: -55,
            Ⲇᐃⵠ: 1,
            y: 123
        }, {
            x: 10,
            Ⲇᐃⵠ: 2,
            y: 81
        }, {
            Ⲇᐃⵠ: 0,
            y: 50,
            x: 52
        }, {
            y: 9,
            Ⲇᐃⵠ: 1,
            x: 138
        }, {
            Ⲇᐃⵠ: 0,
            y: -28,
            x: 104
        }, {
            Ⲇᐃⵠ: 2,
            y: -56,
            x: 67
        }, {
            x: 5,
            Ⲇᐃⵠ: 0,
            y: -112
        }],
        ΔⲆⲆⲆ: 11
    }, {
        ⵠⵠⲆⲆ: [{
            Ⲇᐃⵠ: 2,
            x: -33,
            y: -66
        }, {
            x: -58,
            y: 10,
            Ⲇᐃⵠ: 0
        }, {
            y: 44,
            Ⲇᐃⵠ: 1,
            x: -19
        }, {
            Ⲇᐃⵠ: 0,
            y: 20,
            x: 44
        }, {
            y: -36,
            x: 53,
            Ⲇᐃⵠ: 2
        }, {
            x: 7,
            y: -62,
            Ⲇᐃⵠ: 0
        }],
        ΔⲆⲆⲆ: 6
    }, {
        ΔⲆⲆⲆ: 3,
        ⵠⵠⲆⲆ: [{
            y: -25,
            Ⲇᐃⵠ: 1,
            x: -19
        }, {
            Ⲇᐃⵠ: 2,
            x: -29,
            y: 13
        }, {
            Ⲇᐃⵠ: 0,
            y: 12,
            x: 12
        }]
    }];
    var xw = 0;
    var yw = 0;
    var zw = 0;
    var Aw = 0;
    function Bw(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = Ex.ⵠⵠⵠ.x + j - 700;
        var l = Math.max(Ex.ⵠⵠⵠ.y + e, 0);
        var g = Math.max(-Ex.ⵠⵠⵠ.y + no - i - 100, 0);
        var t = l;
        var b = no - l - g;
        if (o) {
            var d = q.Ⲇᐃⵠ(a);
        } else {
            d = a.r;
        }
        var u = h + 0;
        var F = u;
        var m = t;
        var p = d.x + 0;
        var C = b;
        var G = u += d.x + 0 - 2;
        if (o) {
            d = q.Ⲇᐃⵠ(r);
        } else {
            d = r.r;
        }
        var f = h + 250 - u + d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var k = (u += f - 2) - 2;
        if (o) {
            d = q.Ⲇᐃⵠ(s);
        } else {
            d = s.r;
        }
        if (k < u + (f = h + 350 - u + d.x) - 3) {
            var A = Yg;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var D = u += f - 2;
        } else {
            A = false;
            u = k;
            D = -1;
        }
        f = h + 700 - u;
        if (Dx.transition) {
            var N = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
            ao.fillStyle = lf(9, 55, 63, 11, 106, 132, N);
        } else {
            ao.fillStyle = Hr.ᐃⵠⲆᐃⲆ[Dx.time];
        }
        ao.fillRect(F, m, p, C);
        if (o) {
            if (Dx.transition) {
                N = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
                ao.fillStyle = lf(15, 70, 76, 42, 139, 155, N);
            } else {
                ao.fillStyle = Hr.ᐃᐃΔⵠΔᐃⲆ[Dx.time];
            }
        } else if (Dx.transition) {
            N = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
            ao.fillStyle = lf(9, 55, 63, 11, 106, 132, N);
        } else {
            ao.fillStyle = Hr.ᐃⵠⲆᐃⲆ[Dx.time];
        }
        ao.fillRect(H, y, w, K);
        if (A) {
            if (o) {
                if (Dx.transition) {
                    N = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
                    ao.fillStyle = lf(17, 94, 96, 169, 214, 211, N);
                } else {
                    ao.fillStyle = Hr.ΔΔᐃᐃΔᐃⵠ[Dx.time];
                }
            } else if (Dx.transition) {
                N = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
                ao.fillStyle = lf(9, 55, 63, 11, 106, 132, N);
            } else {
                ao.fillStyle = Hr.ᐃⵠⲆᐃⲆ[Dx.time];
            }
            ao.fillRect(L, J, M, B);
        }
        if (Ax.ⵠⲆᐃⵠⲆ && o) {
            q.ᐃΔⵠⲆⲆⵠⲆΔΔ(k, D, G, h, -Ex.ⵠⵠⵠ.y + m, -Ex.ⵠⵠⵠ.y + m + C);
        }
    }
    function tf(a, b, c, d, e) {
        if (Dx.transition && e == 1) {
            ao.globalAlpha = 1;
            Vp(ao, ᐃΔ[a][Dx.time][b], c, d);
            Dx.time = Dx.time ? 0 : 1;
            ao.globalAlpha = 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ;
            Vp(ao, ᐃΔ[a][Dx.time][b], c, d);
            Dx.time = Dx.time ? 0 : 1;
            ao.globalAlpha = 1;
        } else {
            ao.globalAlpha = e;
            Vp(ao, ᐃΔ[a][Dx.time][b], c, d);
            ao.globalAlpha = 1;
        }
    }
    function nf(a) {
        ao.save();
        ao.translate(Ex.ⵠⵠⵠ.x + a.x, Ex.ⵠⵠⵠ.y + a.y);
        ao.rotate(a.angle);
        ao.globalAlpha = a.alpha;
        var b = ᐃΔ[a.id][Dx.time];
        Vp(ao, b, -b.width / 2, -b.height / 2);
        ao.globalAlpha = 1;
        ao.restore();
    }
    function of(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = Ex.ⵠⵠⵠ.y + f - 700;
        var l = Math.max(Ex.ⵠⵠⵠ.x + e, 0);
        var g = Math.max(-Ex.ⵠⵠⵠ.x + io - i - 100, 0);
        var r = l;
        var b = io - l - g;
        if (n) {
            var d = j.Ⲇᐃⵠ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + 0;
        0;
        s += d + 0 - 2;
        if (n) {
            d = j.Ⲇᐃⵠ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h + 250 - s + d;
        var u = (s += t - 2) - 2;
        if (n) {
            d = j.Ⲇᐃⵠ(q).x;
        } else {
            d = q.r.x;
        }
        if (s + (t = h + 350 - s + d) - 3 > u) {
            s += t - 2;
        } else {
            s = u;
        }
        t = h + 700 - s;
        if (n > 0 && k.ⲆΔⵠⵠⵠⵠΔ === 1) {
            if (Dx.transition) {
                var p = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
                ao.fillStyle = lf(15, 77, 72, 252, 239, 187, p);
            } else {
                ao.fillStyle = Hr.ΔⵠΔᐃⵠⲆΔ[Dx.time];
            }
            ao.fillRect(r, s, b, t);
        } else {
            if (Dx.transition) {
                p = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
                ao.fillStyle = lf(k.ⵠΔⵠ[0], k.ⵠΔⵠ[1], k.ⵠΔⵠ[2], k.Δⵠᐃ[0], k.Δⵠᐃ[1], k.Δⵠᐃ[2], p);
            } else {
                ao.fillStyle = k.ⲆᐃᐃⵠⲆ[Dx.time];
            }
            ao.fillRect(r, s, b, t);
        }
    }
    function af(a, b) {
        if (Dx.transition) {
            ao.globalAlpha = 1;
            a.ᐃᐃᐃᐃⲆ(b);
            Dx.time = Dx.time ? 0 : 1;
            ao.globalAlpha = 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ;
            a.ᐃᐃᐃᐃⲆ(b);
            Dx.time = Dx.time ? 0 : 1;
            ao.globalAlpha = 1;
        } else {
            a.ᐃᐃᐃᐃⲆ(b);
        }
    }
    function rf(b, c, d, e, f) {
        var g = d.width;
        var a = d.height;
        var i = Math.floor(g / 2);
        var j = Math.floor(a / 2);
        if (Dx.transition) {
            ao.globalAlpha = 1;
            Vp(ao, ᐃΔ[b][c][Dx.time], 0, 0, g, a, e, f, i, j);
            Dx.time = Dx.time ? 0 : 1;
            ao.globalAlpha = 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ;
            Vp(ao, ᐃΔ[b][c][Dx.time], 0, 0, g, a, e, f, i, j);
            Dx.time = Dx.time ? 0 : 1;
            ao.globalAlpha = 1;
        } else {
            Vp(ao, ᐃΔ[b][c][Dx.time], 0, 0, g, a, e, f, i, j);
        }
    }
    function sf(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = Ex.ⵠⵠⵠ.y + j - 700;
        var l = Math.max(Ex.ⵠⵠⵠ.x + e, 0);
        var g = Math.max(-Ex.ⵠⵠⵠ.x + io - i - 100, 0);
        var t = l;
        var b = io - l - g;
        if (o) {
            var d = q.Ⲇᐃⵠ(a);
        } else {
            d = a.r;
        }
        var u = h + 0;
        var F = t;
        var m = u;
        var p = d.x + 0;
        var C = b;
        var G = u += d.x + 0 - 2;
        if (o) {
            d = q.Ⲇᐃⵠ(r);
        } else {
            d = r.r;
        }
        var f = h + 250 - u + d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var k = (u += f - 2) - 2;
        if (o) {
            d = q.Ⲇᐃⵠ(s);
        } else {
            d = s.r;
        }
        if (k < u + (f = h + 350 - u + d.x) - 3) {
            var A = true;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var D = u += f - 2;
        } else {
            A = false;
            u = k;
            D = -1;
        }
        f = h + 700 - u;
        if (Dx.transition) {
            var N = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
            ao.fillStyle = lf(9, 55, 63, 11, 106, 132, N);
        } else {
            ao.fillStyle = Hr.ᐃⵠⲆᐃⲆ[Dx.time];
        }
        ao.fillRect(F, m, C, p);
        if (o) {
            if (Dx.transition) {
                N = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
                ao.fillStyle = lf(15, 70, 76, 42, 139, 155, N);
            } else {
                ao.fillStyle = Hr.ᐃᐃΔⵠΔᐃⲆ[Dx.time];
            }
        } else if (Dx.transition) {
            N = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
            ao.fillStyle = lf(9, 55, 63, 11, 106, 132, N);
        } else {
            ao.fillStyle = Hr.ᐃⵠⲆᐃⲆ[Dx.time];
        }
        ao.fillRect(y, H, K, w);
        if (A) {
            if (o) {
                if (Dx.transition) {
                    N = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
                    ao.fillStyle = lf(17, 94, 96, 169, 214, 211, N);
                } else {
                    ao.fillStyle = Hr.ΔΔᐃᐃΔᐃⵠ[Dx.time];
                }
            } else if (Dx.transition) {
                N = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
                ao.fillStyle = lf(9, 55, 63, 11, 106, 132, N);
            } else {
                ao.fillStyle = Hr.ᐃⵠⲆᐃⲆ[Dx.time];
            }
            ao.fillRect(J, L, B, M);
        }
        if (Ax.ⵠⲆᐃⵠⲆ && o) {
            q.ΔΔⵠΔᐃⲆⵠⵠⲆ(k, D, G, h, -Ex.ⵠⵠⵠ.x + F, -Ex.ⵠⵠⵠ.x + F + C);
        }
    }
    function hf(a, b, c, d) {
        if (Dx.transition) {
            ao.globalAlpha = 1;
            Vp(ao, ᐃΔ[a][Dx.time], c, d);
            Dx.time = Dx.time ? 0 : 1;
            ao.globalAlpha = 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ;
            Vp(ao, ᐃΔ[a][Dx.time], c, d);
            Dx.time = Dx.time ? 0 : 1;
            ao.globalAlpha = 1;
        } else {
            Vp(ao, b, c, d);
        }
    }
    function lf(b, c, d, e, f, g, a) {
        var i;
        var j = "#";
        j += (i = Math.floor(a * e + (1 - a) * b)) < 16 ? "0" + i.toString(16) : i.toString(16);
        j += (i = Math.floor(a * f + (1 - a) * c)) < 16 ? "0" + i.toString(16) : i.toString(16);
        return j += (i = Math.floor(g * a + (1 - a) * d)) < 16 ? "0" + i.toString(16) : i.toString(16);
    }
    function gf(a) {
        if (a > 0) {
            return a * a;
        } else {
            return a;
        }
    }
    function uf(a) {
        return Hf.String.fromCharCode(a);
    }
    function bf() {
        ao.globalAlpha = 1;
        if (Dx.transition) {
            var a = Dx.ⵠΔΔᐃ.ⲆΔᐃ();
        }
        Dx.ⲆΔⵠⲆΔⲆⵠᐃⵠ(-Ex.ⵠⵠⵠ.x, -Ex.ⵠⵠⵠ.y);
        xw = Math.max(Math.floor(-Ex.ⵠⵠⵠ.x / Dx.ⵠⵠᐃᐃⲆⵠᐃ) - 5, 0);
        yw = Math.min(Math.floor((-Ex.ⵠⵠⵠ.x + Ex.ⵠⵠⵠ.w) / Dx.ⵠⵠᐃᐃⲆⵠᐃ) + 4, Dx.ⵠᐃΔΔⲆ - 1);
        zw = Math.max(Math.floor(-Ex.ⵠⵠⵠ.y / Dx.ᐃⵠⲆⲆᐃⲆᐃ) - 3, 0);
        Aw = Math.min(Math.floor((-Ex.ⵠⵠⵠ.y + Ex.ⵠⵠⵠ.ⵠⲆⵠ) / Dx.ᐃⵠⲆⲆᐃⲆᐃ) + 3, Dx.ᐃⵠᐃᐃⲆ - 1);
        (function () {
            for (var f = Dx.ⲆⵠΔᐃᐃ.length - 1; f >= 0; f--) {
                var g = Dx.ⲆⵠΔᐃᐃ[f];
                if (Dx.Ⲇᐃⵠⵠᐃ === g.Ⲇᐃⵠ) {
                    var j = Dx.ΔⲆⲆⵠⲆ[g.Ⲇᐃⵠ];
                    if (g.x1 - 230 - io <= -Ex.ⵠⵠⵠ.x && -Ex.ⵠⵠⵠ.x <= g.x2 + 330 && -Ex.ⵠⵠⵠ.y >= g.y1 - no && -Ex.ⵠⵠⵠ.y <= g.y2 + 100) {
                        var k = g.x2;
                        if (Dx.Ⲇᐃⵠⵠᐃ !== g.Ⲇᐃⵠ) {
                            k -= 610;
                        }
                        var m = g.x1;
                        if (g.Ⲇᐃⵠ !== Dx.Ⲇᐃⵠⵠᐃ) {
                            m += 610;
                        }
                        var p = g.y2;
                        if (g.Ⲇᐃⵠ !== Dx.Ⲇᐃⵠⵠᐃ) {
                            p -= 610;
                        }
                        var q = g.y1;
                        if (g.Ⲇᐃⵠ !== Dx.Ⲇᐃⵠⵠᐃ) {
                            q += 610;
                        }
                        if (Dx.transition) {
                            var w = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
                            ao.fillStyle = lf(j.ⵠΔⵠ[0], j.ⵠΔⵠ[1], j.ⵠΔⵠ[2], j.Δⵠᐃ[0], j.Δⵠᐃ[1], j.Δⵠᐃ[1], w);
                        } else {
                            ao.fillStyle = j.ⲆᐃᐃⵠⲆ[Dx.time];
                        }
                        var x = Math.max(Ex.ⵠⵠⵠ.x + m - 2 - 230, 0);
                        var y = Math.max(-Ex.ⵠⵠⵠ.x + io - k - 330 - 2, 0);
                        var z = Math.max(Ex.ⵠⵠⵠ.y + q - 2, 0);
                        var A = Math.max(-Ex.ⵠⵠⵠ.y + no - p - 100 - 2, 0);
                        ao.beginPath();
                        ao.fillRect(x, z, io - y - x, no - z - A);
                    }
                }
            }
            for (f = Dx.ⲆⵠΔᐃᐃ.length - 1; f >= 0; f--) {
                if ((g = Dx.ⲆⵠΔᐃᐃ[f]).Ⲇᐃⵠ !== Dx.Ⲇᐃⵠⵠᐃ) {
                    k = g.x2;
                    if (g.Ⲇᐃⵠ !== Dx.Ⲇᐃⵠⵠᐃ) {
                        k -= 400;
                    }
                    m = g.x1;
                    if (g.Ⲇᐃⵠ !== Dx.Ⲇᐃⵠⵠᐃ) {
                        m += 400;
                    }
                    p = g.y2;
                    if (Dx.Ⲇᐃⵠⵠᐃ !== g.Ⲇᐃⵠ) {
                        p -= 300;
                    }
                    q = g.y1;
                    if (g.Ⲇᐃⵠ !== Dx.Ⲇᐃⵠⵠᐃ) {
                        q += 300;
                    }
                    if (!(g.ⲆᐃΔ & 8) && k - io + 120 <= -Ex.ⵠⵠⵠ.x && k + 820 >= -Ex.ⵠⵠⵠ.x && q + 88 - no <= -Ex.ⵠⵠⵠ.y && -Ex.ⵠⵠⵠ.y <= p + 50) {
                        mf(k, q + 88, p - 88, Ex.ΔΔⲆᐃ[0], Dx.ΔⲆⲆⵠⲆ[g.Ⲇᐃⵠ], g.ⲆᐃΔ & 8);
                        wf(k, q + 88, p - 88, Ex.ΔΔⲆᐃ[0], Dx.ΔⲆⲆⵠⲆ[g.Ⲇᐃⵠ], g.ⲆᐃΔ & 8);
                    }
                    if (!(g.ⲆᐃΔ & 4) && m - io - 700 <= -Ex.ⵠⵠⵠ.x && -Ex.ⵠⵠⵠ.x <= m - 20 && q + 88 - no <= -Ex.ⵠⵠⵠ.y && -Ex.ⵠⵠⵠ.y <= p + 50) {
                        vf(m, q + 88, p - 88, Ex.ΔΔⲆᐃ[1], Dx.ΔⲆⲆⵠⲆ[g.Ⲇᐃⵠ], g.ⲆᐃΔ & 4);
                        Bw(m, q + 88, p - 88, Ex.ΔΔⲆᐃ[1], Dx.ΔⲆⲆⵠⲆ[g.Ⲇᐃⵠ], g.ⲆᐃΔ & 4);
                    }
                    if (!(g.ⲆᐃΔ & 2) && m - 235 - io <= -Ex.ⵠⵠⵠ.x && -Ex.ⵠⵠⵠ.x <= k + 350 && -Ex.ⵠⵠⵠ.y >= p - no - 275 && p + 490 >= -Ex.ⵠⵠⵠ.y) {
                        ff(p - 230, m - 230, k + 230, Ex.ΔΔⲆᐃ[2], Dx.ΔⲆⲆⵠⲆ[g.Ⲇᐃⵠ], g.ⲆᐃΔ & 2);
                        Cf(p - 230, m - 230, k + 230, Ex.ΔΔⲆᐃ[2], Dx.ΔⲆⲆⵠⲆ[g.Ⲇᐃⵠ], g.ⲆᐃΔ & 2);
                    }
                    if (!(g.ⲆᐃΔ & 1) && -Ex.ⵠⵠⵠ.x >= m - 235 - io && k + 350 >= -Ex.ⵠⵠⵠ.x && -Ex.ⵠⵠⵠ.y >= q - no - 390 && q + 315 >= -Ex.ⵠⵠⵠ.y) {
                        of(q + 310, m - 230, k + 230, Ex.ΔΔⲆᐃ[3], Dx.ΔⲆⲆⵠⲆ[g.Ⲇᐃⵠ], g.ⲆᐃΔ & 1);
                        sf(q + 310, m - 230, k + 230, Ex.ΔΔⲆᐃ[3], Dx.ΔⲆⲆⵠⲆ[g.Ⲇᐃⵠ], g.ⲆᐃΔ & 1);
                    }
                }
            }
            for (f = Dx.ⲆⵠΔᐃᐃ.length - 1; f >= 0; f--) {
                g = Dx.ⲆⵠΔᐃᐃ[f];
                if (Dx.Ⲇᐃⵠⵠᐃ !== g.Ⲇᐃⵠ) {
                    k = g.x2;
                    if (g.Ⲇᐃⵠ !== Dx.Ⲇᐃⵠⵠᐃ) {
                        k -= 400;
                    }
                    m = g.x1;
                    if (Dx.Ⲇᐃⵠⵠᐃ !== g.Ⲇᐃⵠ) {
                        m += 400;
                    }
                    p = g.y2;
                    if (Dx.Ⲇᐃⵠⵠᐃ !== g.Ⲇᐃⵠ) {
                        p -= 300;
                    }
                    q = g.y1;
                    if (g.Ⲇᐃⵠ !== Dx.Ⲇᐃⵠⵠᐃ) {
                        q += 300;
                    }
                    if (g.ⲆᐃΔ & 8 && k - io + 120 <= -Ex.ⵠⵠⵠ.x && -Ex.ⵠⵠⵠ.x <= k + 820 && q + 88 - no <= -Ex.ⵠⵠⵠ.y && p + 50 >= -Ex.ⵠⵠⵠ.y) {
                        mf(k, q + 88, p - 88, Ex.ΔΔⲆᐃ[0], Dx.ΔⲆⲆⵠⲆ[g.Ⲇᐃⵠ], g.ⲆᐃΔ & 8);
                    }
                    if ((g.ⲆᐃΔ & 4) !== 0 && m - io - 700 <= -Ex.ⵠⵠⵠ.x && -Ex.ⵠⵠⵠ.x <= m - 20 && q + 88 - no <= -Ex.ⵠⵠⵠ.y && -Ex.ⵠⵠⵠ.y <= p + 50) {
                        vf(m, q + 88, p - 88, Ex.ΔΔⲆᐃ[1], Dx.ΔⲆⲆⵠⲆ[g.Ⲇᐃⵠ], g.ⲆᐃΔ & 4);
                    }
                    if (g.ⲆᐃΔ & 2 && -Ex.ⵠⵠⵠ.x >= m - 235 - io && k + 350 >= -Ex.ⵠⵠⵠ.x && p - no - 275 <= -Ex.ⵠⵠⵠ.y && -Ex.ⵠⵠⵠ.y <= p + 490) {
                        ff(p - 230, m - 230, k + 230, Ex.ΔΔⲆᐃ[2], Dx.ΔⲆⲆⵠⲆ[g.Ⲇᐃⵠ], g.ⲆᐃΔ & 2);
                    }
                    if (g.ⲆᐃΔ & 1 && m - 235 - io <= -Ex.ⵠⵠⵠ.x && -Ex.ⵠⵠⵠ.x <= k + 350 && -Ex.ⵠⵠⵠ.y >= q - no - 390 && -Ex.ⵠⵠⵠ.y <= q + 315) {
                        of(q + 310, m - 230, k + 230, Ex.ΔΔⲆᐃ[3], Dx.ΔⲆⲆⵠⲆ[g.Ⲇᐃⵠ], g.ⲆᐃΔ & 1);
                    }
                }
            }
            for (f = Dx.ⲆⵠΔᐃᐃ.length - 1; f >= 0; f--) {
                g = Dx.ⲆⵠΔᐃᐃ[f];
                if (Dx.Ⲇᐃⵠⵠᐃ !== g.Ⲇᐃⵠ) {
                    j = Dx.ΔⲆⲆⵠⲆ[g.Ⲇᐃⵠ];
                    if (g.x1 - 230 - io <= -Ex.ⵠⵠⵠ.x && g.x2 + 330 >= -Ex.ⵠⵠⵠ.x && g.y1 - no <= -Ex.ⵠⵠⵠ.y && -Ex.ⵠⵠⵠ.y <= g.y2 + 100) {
                        k = g.x2;
                        if (g.Ⲇᐃⵠ !== Dx.Ⲇᐃⵠⵠᐃ) {
                            if (g.ⲆᐃΔ & 8) {
                                k -= 610;
                            } else {
                                k -= 414;
                            }
                        }
                        m = g.x1;
                        if (Dx.Ⲇᐃⵠⵠᐃ !== g.Ⲇᐃⵠ) {
                            if ((g.ⲆᐃΔ & 4) === 0) {
                                m += 414;
                            } else {
                                m += 610;
                            }
                        }
                        p = g.y2;
                        if (Dx.Ⲇᐃⵠⵠᐃ !== g.Ⲇᐃⵠ) {
                            if ((g.ⲆᐃΔ & 2) === 0) {
                                p -= 414;
                            } else {
                                p -= 610;
                            }
                        }
                        q = g.y1;
                        if (Dx.Ⲇᐃⵠⵠᐃ !== g.Ⲇᐃⵠ) {
                            if (g.ⲆᐃΔ & 1) {
                                q += 610;
                            } else {
                                q += 414;
                            }
                        }
                        if (Dx.transition) {
                            w = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
                            ao.fillStyle = lf(j.ⵠΔⵠ[0], j.ⵠΔⵠ[1], j.ⵠΔⵠ[2], j.Δⵠᐃ[0], j.Δⵠᐃ[1], j.Δⵠᐃ[2], w);
                        } else {
                            ao.fillStyle = j.ⲆᐃᐃⵠⲆ[Dx.time];
                        }
                        x = Math.max(Ex.ⵠⵠⵠ.x + m - 2 - 230, 0);
                        y = Math.max(-Ex.ⵠⵠⵠ.x + io - k - 330 - 2, 0);
                        z = Math.max(Ex.ⵠⵠⵠ.y + q - 2, 0);
                        A = Math.max(-Ex.ⵠⵠⵠ.y + no - p - 100 - 2, 0);
                        ao.beginPath();
                        ao.fillRect(x, z, io - y - x, no - z - A);
                    }
                }
            }
            if (Ax.ⵠⲆᐃⵠⲆ) {
                Tf(rw, zw, Aw, xw, yw, 695, "isl", 2);
                Tf(rw, zw, Aw, xw, yw, 694, "isl", 2);
            }
            Tf(ww, zw, Aw, xw, yw, 692, "isl", 2);
            if (Ax.ⵠⲆᐃⵠⲆ) {
                Tf(vw, zw, Aw, xw, yw, 243, "de");
            }
            var B = Dx.ⵠᐃΔ[0];
            for (f = 0; f < B.length; f++) {
                for (var d = B[f], C = 0; d.ᐃⵠⵠⲆⵠ.length > C; C++) {
                    nf(d.ᐃⵠⵠⲆⵠ[C]);
                }
            }
            if ((bv += Lx * 40) > 60) {
                bv -= 60;
            }
            Tf(pv, zw, Aw, xw, yw, 1024, "r", 0);
            f = 0;
            for (; Dx.ⲆⵠΔᐃᐃ.length > f; f++) {
                g = Dx.ⲆⵠΔᐃᐃ[f];
                if (Dx.Ⲇᐃⵠⵠᐃ !== g.Ⲇᐃⵠ) {
                    k = g.x2;
                    if (Dx.Ⲇᐃⵠⵠᐃ !== g.Ⲇᐃⵠ) {
                        k -= 400;
                    }
                    m = g.x1;
                    if (Dx.Ⲇᐃⵠⵠᐃ !== g.Ⲇᐃⵠ) {
                        m += 400;
                    }
                    p = g.y2;
                    if (Dx.Ⲇᐃⵠⵠᐃ !== g.Ⲇᐃⵠ) {
                        p -= 300;
                    }
                    q = g.y1;
                    if (g.Ⲇᐃⵠ !== Dx.Ⲇᐃⵠⵠᐃ) {
                        q += 300;
                    }
                    if ((g.ⲆᐃΔ & 8) > 0 && -Ex.ⵠⵠⵠ.x >= k - io + 120 && -Ex.ⵠⵠⵠ.x <= k + 820 && -Ex.ⵠⵠⵠ.y >= q + 88 - no && p + 50 >= -Ex.ⵠⵠⵠ.y) {
                        wf(k, q + 88, p - 88, Ex.ΔΔⲆᐃ[0], Dx.ΔⲆⲆⵠⲆ[g.Ⲇᐃⵠ], g.ⲆᐃΔ & 8);
                    }
                    if ((g.ⲆᐃΔ & 4) > 0 && m - io - 700 <= -Ex.ⵠⵠⵠ.x && -Ex.ⵠⵠⵠ.x <= m - 20 && q + 88 - no <= -Ex.ⵠⵠⵠ.y && -Ex.ⵠⵠⵠ.y <= p + 50) {
                        Bw(m, q + 88, p - 88, Ex.ΔΔⲆᐃ[1], Dx.ΔⲆⲆⵠⲆ[g.Ⲇᐃⵠ], g.ⲆᐃΔ & 4);
                    }
                    if ((g.ⲆᐃΔ & 2) > 0 && -Ex.ⵠⵠⵠ.x >= m - 235 - io && -Ex.ⵠⵠⵠ.x <= k + 350 && -Ex.ⵠⵠⵠ.y >= p - no - 275 && -Ex.ⵠⵠⵠ.y <= p + 490) {
                        Cf(p - 230, m - 230, k + 230, Ex.ΔΔⲆᐃ[2], Dx.ΔⲆⲆⵠⲆ[g.Ⲇᐃⵠ], g.ⲆᐃΔ & 2);
                    }
                    if ((g.ⲆᐃΔ & 1) > 0 && m - 235 - io <= -Ex.ⵠⵠⵠ.x && k + 350 >= -Ex.ⵠⵠⵠ.x && q - no - 390 <= -Ex.ⵠⵠⵠ.y && -Ex.ⵠⵠⵠ.y <= q + 315) {
                        sf(q + 310, m - 230, k + 230, Ex.ΔΔⲆᐃ[3], Dx.ΔⲆⲆⵠⲆ[g.Ⲇᐃⵠ], g.ⲆᐃΔ & 1);
                    }
                }
            }
        })();
        (function () {
            var g = xw;
            var e = yw;
            var i = zw;
            var j = Aw;
            if (Ax.ⵠⲆᐃⵠⲆ) {
                Tf(ww, i, j, g, e, 621, "l", 2);
            }
            if (Ax.ⵠⲆᐃⵠⲆ) {
                Tf(ww, i, j, g, e, Hr.ᐃⵠᐃΔΔ, "la", 5);
            }
            Tf(ww, i, j, g, e, 203, "la", 5);
            Tf(rw, i, j, g, e, 620, "l", 2);
            if (Ax.ⵠⲆᐃⵠⲆ) {
                Tf(uw, i, j, g, e, 203, "la", 5);
                Tf(rw, i, j, g, e, 619, "l", 2);
            }
            Tf(ww, i, j, g, e, 1052, "ma", 4);
            for (var n = Dx.ⵠᐃΔ[76], t = 0; t < n.length; t++) {
                n[t].ⵠⲆᐃⵠΔΔᐃ();
            }
            var J = Dx.ⵠᐃΔ[0];
            for (t = 0; J.length > t; t++) {
                for (var U = J[t], aa = 0; aa < U.ΔΔᐃⲆⲆ.length; aa++) {
                    yf(U.ΔΔᐃⲆⲆ[aa]);
                }
            }
            var ba = Dx.ⵠᐃΔ[30];
            for (t = 0; ba.length > t; t++) {
                zf(ba[t], 125);
                ba[t].ᐃⵠᐃᐃⵠ(ba[t].info);
            }
            var l = Dx.ⵠᐃΔ[18];
            for (t = 0; t < l.length; t++) {
                if (l[t].action == 2) {
                    cf(l[t]);
                }
            }
            var ca = Dx.ⵠᐃΔ[1];
            for (t = 0; ca.length > t; t++) {
                cf(ca[t], 113);
            }
            var da = Dx.ⵠᐃΔ[22];
            for (t = 0; da.length > t; t++) {
                cf(da[t]);
            }
            var ea = Dx.ⵠᐃΔ[23];
            for (t = 0; ea.length > t; t++) {
                cf(ea[t]);
            }
            var fa = Dx.ⵠᐃΔ[6];
            for (t = 0; fa.length > t; t++) {
                cf(fa[t], 118);
            }
            var c = Dx.ⵠᐃΔ[36];
            for (t = 0; t < c.length; t++) {
                zf(c[t]);
            }
            var m = Dx.ⵠᐃΔ[33];
            for (t = 0; m.length > t; t++) {
                zf(m[t], 141);
            }
            var p = Dx.ⵠᐃΔ[3];
            for (t = 0; p.length > t; t++) {
                cf(p[t]);
            }
            p = Dx.ⵠᐃΔ[43];
            t = 0;
            for (; t < p.length; t++) {
                cf(p[t]);
            }
            p = Dx.ⵠᐃΔ[3];
            t = 0;
            for (; t < p.length; t++) {
                af(p[t]);
            }
            var ha = Dx.ⵠᐃΔ[44];
            for (t = 0; t < ha.length; t++) {
                if ((ha[t].info & 15) === 0 || ha[t].info === 10) {
                    zf(ha[t]);
                }
            }
            var ia = Dx.ⵠᐃΔ[54];
            for (t = 0; t < ia.length; t++) {
                if (!(ia[t].info & 15) || ia[t].info === 10) {
                    zf(ia[t]);
                }
            }
            var ja = Dx.ⵠᐃΔ[55];
            for (t = 0; ja.length > t; t++) {
                if (!(ja[t].info & 15) || ja[t].info === 10) {
                    zf(ja[t]);
                }
            }
            var ka = Dx.ⵠᐃΔ[79];
            for (t = 0; ka.length > t; t++) {
                zf(ka[t], 132);
            }
            var la = Dx.ⵠᐃΔ[39];
            for (t = 0; la.length > t; t++) {
                if (!(la[t].info & 15) || la[t].info === 10) {
                    zf(la[t]);
                }
            }
            var ma = Dx.ⵠᐃΔ[40];
            for (t = 0; t < ma.length; t++) {
                if ((ma[t].info & 15) === 0 || ma[t].info === 10) {
                    zf(ma[t]);
                }
            }
            var na = Dx.ⵠᐃΔ[37];
            for (t = 0; na.length > t; t++) {
                if ((na[t].info & 15) === 0 || na[t].info === 10) {
                    zf(na[t]);
                }
            }
            ka = Dx.ⵠᐃΔ[31];
            t = 0;
            for (; t < ka.length; t++) {
                zf(ka[t]);
            }
            var oa = Dx.ⵠᐃΔ[86];
            for (t = 0; t < oa.length; t++) {
                zf(oa[t], 250, 729);
            }
            var A = Dx.ⵠᐃΔ[82];
            for (t = 0; t < A.length; t++) {
                zf(A[t], 250, 729);
            }
            var x = Dx.ⵠᐃΔ[87];
            for (t = 0; x.length > t; t++) {
                zf(x[t], 854, 859);
            }
            var M = Dx.ⵠᐃΔ[45];
            for (t = 0; t < M.length; t++) {
                if (M[t].info & 1) {
                    zf(M[t], 336);
                }
            }
            M = Dx.ⵠᐃΔ[46];
            t = 0;
            for (; M.length > t; t++) {
                if (M[t].info & 1) {
                    zf(M[t], 373);
                }
            }
            M = Dx.ⵠᐃΔ[47];
            t = 0;
            for (; t < M.length; t++) {
                if (M[t].info) {
                    zf(M[t], 376);
                }
            }
            M = Dx.ⵠᐃΔ[48];
            t = 0;
            for (; M.length > t; t++) {
                if (M[t].info) {
                    zf(M[t], 379);
                }
            }
            M = Dx.ⵠᐃΔ[49];
            t = 0;
            for (; t < M.length; t++) {
                if (M[t].info) {
                    zf(M[t], 500);
                }
            }
            M = Dx.ⵠᐃΔ[53];
            t = 0;
            for (; M.length > t; t++) {
                if (M[t].info) {
                    zf(M[t], 376);
                }
            }
            M = Dx.ⵠᐃΔ[10];
            t = 0;
            for (; t < M.length; t++) {
                if (M[t].info & 1) {
                    zf(M[t], 336);
                }
            }
            M = Dx.ⵠᐃΔ[15];
            t = 0;
            for (; M.length > t; t++) {
                if (M[t].info & 1) {
                    zf(M[t], 373);
                }
            }
            M = Dx.ⵠᐃΔ[16];
            t = 0;
            for (; t < M.length; t++) {
                if (M[t].info) {
                    zf(M[t], 376);
                }
            }
            M = Dx.ⵠᐃΔ[17];
            t = 0;
            for (; t < M.length; t++) {
                if (M[t].info) {
                    zf(M[t], 379);
                }
            }
            M = Dx.ⵠᐃΔ[21];
            t = 0;
            for (; t < M.length; t++) {
                if (M[t].info) {
                    zf(M[t], 500);
                }
            }
            M = Dx.ⵠᐃΔ[51];
            t = 0;
            for (; t < M.length; t++) {
                if (M[t].info) {
                    zf(M[t], 376);
                }
            }
            var pa = Dx.ⵠᐃΔ[80];
            for (t = 0; pa.length > t; t++) {
                zf(pa[t], 264, 322);
            }
            var D = Dx.ⵠᐃΔ[41];
            for (t = 0; t < D.length; t++) {
                zf(D[t], 198);
            }
            n = Dx.ⵠᐃΔ[76];
            t = 0;
            for (; n.length > t; t++) {
                zf(n[t], Hr.ᐃᐃΔⵠᐃΔⵠ, Hr.ΔᐃᐃⲆᐃᐃⲆΔⵠ);
            }
            var qa = Dx.ⵠᐃΔ[91];
            for (t = 0; t < qa.length; t++) {
                if (qa[t].ⲆΔⲆᐃⵠΔΔ === 0) {
                    zf(qa[t]);
                }
            }
            J = Dx.ⵠᐃΔ[0];
            t = 0;
            for (; J.length > t; t++) {
                U = J[t];
                if (J[t].ⲆⵠⵠⵠⲆ !== 227 && J[t].ⲆⵠⵠⵠⲆ !== 228 && J[t].ⲆⵠⵠⵠⲆ !== 229 && J[t].ⲆⵠⵠⵠⲆ !== 230 && J[t].ⲆⵠⵠⵠⲆ !== 91) {
                    if (U.ⲆᐃⵠⵠⲆⵠⲆ === 0) {
                        if (U.ΔⲆⵠᐃⵠᐃΔ > 0.001) {
                            U.ΔⲆⵠᐃⵠᐃΔ = ⵠΔⲆⵠ.ⲆᐃⲆΔⵠᐃΔ(U.ΔⲆⵠᐃⵠᐃΔ, 0, 0.018);
                            var ra = 1 + Math.min(1, Math.max(U.ΔⲆⵠᐃⵠᐃΔ, 0) / 100) * 0.18;
                            ao.save();
                            ao.scale(ra, ra);
                            Ex.ⵠⵠⵠ.x /= ra;
                            Ex.ⵠⵠⵠ.y /= ra;
                            U.x /= ra;
                            U.y /= ra;
                            U.r.x /= ra;
                            U.r.y /= ra;
                            U.ᐃΔⵠΔᐃΔⵠ();
                            U.ⵠⲆⲆⵠ();
                            Ex.ⵠⵠⵠ.x *= ra;
                            Ex.ⵠⵠⵠ.y *= ra;
                            U.x *= ra;
                            U.y *= ra;
                            U.r.x *= ra;
                            U.r.y *= ra;
                            ao.restore();
                        } else {
                            U.ⲆΔⲆᐃⵠΔΔ = 0;
                            U.ᐃΔⵠΔᐃΔⵠ();
                            U.ⵠⲆⲆⵠ();
                        }
                    }
                } else if (U.ΔⵠⲆⲆⲆ <= 180) {
                    ao.save();
                    ra = 1 + Math.min(1, Math.max(U.ⵠᐃᐃⲆⲆ - 30, 0) / 180) * 0.35;
                    ao.scale(ra, ra);
                    Ex.ⵠⵠⵠ.x /= ra;
                    Ex.ⵠⵠⵠ.y /= ra;
                    U.x /= ra;
                    U.y /= ra;
                    U.r.x /= ra;
                    U.r.y /= ra;
                    U.ⲆΔⲆᐃⵠΔΔ = 0;
                    U.ᐃΔⵠΔᐃΔⵠ();
                    U.ⵠⲆⲆⵠ();
                    Ex.ⵠⵠⵠ.x *= ra;
                    Ex.ⵠⵠⵠ.y *= ra;
                    U.x *= ra;
                    U.y *= ra;
                    U.r.x *= ra;
                    U.r.y *= ra;
                    ao.restore();
                }
            }
            D = Dx.ⵠᐃΔ[41];
            t = 0;
            for (; D.length > t; t++) {
                zf(D[t], 913);
            }
            var sa = Dx.ⵠᐃΔ[67];
            for (t = 0; t < sa.length; t++) {
                zf(sa[t]);
            }
            var Q = Dx.ⵠᐃΔ[62];
            for (t = 0; Q.length > t; t++) {
                zf(Q[t], 419, 461);
            }
            var _ = Dx.ⵠᐃΔ[70];
            for (t = 0; _.length > t; t++) {
                zf(_[t]);
            }
            var F = Dx.ⵠᐃΔ[60];
            for (t = 0; t < F.length; t++) {
                zf(F[t], 299, 326);
            }
            var R = Dx.ⵠᐃΔ[72];
            for (t = 0; R.length > t; t++) {
                zf(R[t], 232, 1077);
            }
            var L = Dx.ⵠᐃΔ[73];
            for (t = 0; L.length > t; t++) {
                zf(L[t], 233, 1092);
            }
            ha = Dx.ⵠᐃΔ[44];
            t = 0;
            for (; ha.length > t; t++) {
                if (ha[t].info & 15 && ha[t].info !== 10) {
                    zf(ha[t]);
                }
            }
            ia = Dx.ⵠᐃΔ[54];
            t = 0;
            for (; t < ia.length; t++) {
                if ((ia[t].info & 15) !== 0 && ia[t].info !== 10) {
                    zf(ia[t]);
                }
            }
            ja = Dx.ⵠᐃΔ[89];
            t = 0;
            for (; t < ja.length; t++) {
                zf(ja[t], 239);
            }
            ja = Dx.ⵠᐃΔ[55];
            t = 0;
            for (; t < ja.length; t++) {
                if ((ja[t].info & 15) !== 0 && ja[t].info !== 10) {
                    zf(ja[t]);
                }
            }
            p = Dx.ⵠᐃΔ[43];
            t = 0;
            for (; t < p.length; t++) {
                af(p[t]);
            }
            la = Dx.ⵠᐃΔ[39];
            t = 0;
            for (; t < la.length; t++) {
                if ((la[t].info & 15) !== 0 && la[t].info !== 10) {
                    zf(la[t]);
                }
            }
            ma = Dx.ⵠᐃΔ[40];
            t = 0;
            for (; ma.length > t; t++) {
                if (ma[t].info & 15 && ma[t].info !== 10) {
                    zf(ma[t]);
                }
            }
            na = Dx.ⵠᐃΔ[37];
            t = 0;
            for (; t < na.length; t++) {
                if ((na[t].info & 15) !== 0 && na[t].info !== 10) {
                    zf(na[t]);
                }
            }
            var G = Dx.ⵠᐃΔ[81];
            for (t = 0; t < G.length; t++) {
                zf(G[t], 691, 697);
            }
            var W = Dx.ⵠᐃΔ[66];
            for (t = 0; t < W.length; t++) {
                zf(W[t], 637, 687);
            }
            var O = Dx.ⵠᐃΔ[65];
            for (t = 0; O.length > t; t++) {
                zf(O[t], 673, 688);
            }
            var N = Dx.ⵠᐃΔ[61];
            for (t = 0; t < N.length; t++) {
                zf(N[t], 260, 333);
            }
            var q = Dx.ⵠᐃΔ[88];
            for (t = 0; t < q.length; t++) {
                zf(q[t], 1033, 1034);
            }
            var H = Dx.ⵠᐃΔ[63];
            for (t = 0; t < H.length; t++) {
                zf(H[t], 445, 462);
            }
            var Y = Dx.ⵠᐃΔ[77];
            for (t = 0; Y.length > t; t++) {
                zf(Y[t]);
            }
            var K = Dx.ⵠᐃΔ[68];
            for (t = 0; t < K.length; t++) {
                zf(K[t], 918, 919);
            }
            var V = Dx.ⵠᐃΔ[71];
            for (t = 0; t < V.length; t++) {
                zf(V[t]);
            }
            var X = Dx.ⵠᐃΔ[78];
            for (t = 0; t < X.length; t++) {
                zf(X[t], 1218, 1219);
            }
            var Z = Dx.ⵠᐃΔ[64];
            for (t = 0; Z.length > t; t++) {
                if (Z[t].scale === 1) {
                    zf(Z[t], 449, 463);
                }
            }
            Z = Dx.ⵠᐃΔ[69];
            t = 0;
            for (; Z.length > t; t++) {
                if (Z[t].scale === 1) {
                    zf(Z[t], 450, 464);
                }
            }
            var ta = Dx.ⵠᐃΔ[11];
            for (t = 0; t < ta.length; t++) {
                zf(ta[t]);
            }
            var ua = Dx.ⵠᐃΔ[2];
            for (t = 0; t < ua.length; t++) {
                zf(ua[t], 114);
            }
            l = Dx.ⵠᐃΔ[18];
            t = 0;
            for (; t < l.length; t++) {
                zf(l[t]);
            }
            var va = Dx.ⵠᐃΔ[34];
            for (t = 0; t < va.length; t++) {
                zf(va[t]);
            }
            M = Dx.ⵠᐃΔ[10];
            t = 0;
            for (; M.length > t; t++) {
                if (!(M[t].info & 1)) {
                    zf(M[t], 166);
                }
                M[t].ᐃⵠᐃᐃⵠ(M[t].info >> 1);
            }
            M = Dx.ⵠᐃΔ[15];
            t = 0;
            for (; M.length > t; t++) {
                if (!(M[t].info & 1)) {
                    zf(M[t], 171);
                }
                M[t].ᐃⵠᐃᐃⵠ(M[t].info >> 1);
            }
            M = Dx.ⵠᐃΔ[16];
            t = 0;
            for (; M.length > t; t++) {
                if (!(M[t].info & 1)) {
                    zf(M[t], 172);
                }
                M[t].ᐃⵠᐃᐃⵠ(M[t].info >> 1);
            }
            M = Dx.ⵠᐃΔ[17];
            t = 0;
            for (; t < M.length; t++) {
                if (!(M[t].info & 1)) {
                    zf(M[t], 173);
                }
                M[t].ᐃⵠᐃᐃⵠ(M[t].info >> 1);
            }
            M = Dx.ⵠᐃΔ[21];
            t = 0;
            for (; t < M.length; t++) {
                if (!(M[t].info & 1)) {
                    zf(M[t], 124);
                }
                M[t].ᐃⵠᐃᐃⵠ(M[t].info >> 1);
            }
            M = Dx.ⵠᐃΔ[51];
            t = 0;
            for (; t < M.length; t++) {
                if (!(M[t].info & 1)) {
                    zf(M[t], 218);
                }
                M[t].ᐃⵠᐃᐃⵠ(M[t].info >> 1);
            }
            M = Dx.ⵠᐃΔ[45];
            t = 0;
            for (; M.length > t; t++) {
                if (!(M[t].info & 1)) {
                    zf(M[t], 212);
                }
                M[t].ᐃⵠᐃᐃⵠ(M[t].info >> 1);
            }
            M = Dx.ⵠᐃΔ[46];
            t = 0;
            for (; M.length > t; t++) {
                if (!(M[t].info & 1)) {
                    zf(M[t], 213);
                }
                M[t].ᐃⵠᐃᐃⵠ(M[t].info >> 1);
            }
            M = Dx.ⵠᐃΔ[47];
            t = 0;
            for (; M.length > t; t++) {
                if (!(M[t].info & 1)) {
                    zf(M[t], 214);
                }
                M[t].ᐃⵠᐃᐃⵠ(M[t].info >> 1);
            }
            M = Dx.ⵠᐃΔ[48];
            t = 0;
            for (; M.length > t; t++) {
                if (!(M[t].info & 1)) {
                    zf(M[t], 215);
                }
                M[t].ᐃⵠᐃᐃⵠ(M[t].info >> 1);
            }
            M = Dx.ⵠᐃΔ[49];
            t = 0;
            for (; t < M.length; t++) {
                if (!(M[t].info & 1)) {
                    zf(M[t], 216);
                }
                M[t].ᐃⵠᐃᐃⵠ(M[t].info >> 1);
            }
            M = Dx.ⵠᐃΔ[53];
            t = 0;
            for (; M.length > t; t++) {
                if (!(M[t].info & 1)) {
                    zf(M[t], 220);
                }
                M[t].ᐃⵠᐃᐃⵠ(M[t].info >> 1);
            }
            var wa = Dx.ⵠᐃΔ[4];
            for (t = 0; wa.length > t; t++) {
                zf(wa[t], 162);
                wa[t].ᐃⵠᐃᐃⵠ(wa[t].info);
            }
            wa = Dx.ⵠᐃΔ[7];
            t = 0;
            for (; wa.length > t; t++) {
                zf(wa[t], 163);
                wa[t].ᐃⵠᐃᐃⵠ(wa[t].info);
            }
            wa = Dx.ⵠᐃΔ[8];
            t = 0;
            for (; wa.length > t; t++) {
                zf(wa[t], 164);
                wa[t].ᐃⵠᐃᐃⵠ(wa[t].info);
            }
            wa = Dx.ⵠᐃΔ[9];
            t = 0;
            for (; t < wa.length; t++) {
                zf(wa[t], 165);
                wa[t].ᐃⵠᐃᐃⵠ(wa[t].info);
            }
            wa = Dx.ⵠᐃΔ[19];
            t = 0;
            for (; wa.length > t; t++) {
                zf(wa[t], 122);
                wa[t].ᐃⵠᐃᐃⵠ(wa[t].info);
            }
            wa = Dx.ⵠᐃΔ[50];
            t = 0;
            for (; t < wa.length; t++) {
                zf(wa[t], 217);
                wa[t].ᐃⵠᐃᐃⵠ(wa[t].info);
            }
            var xa = Dx.ⵠᐃΔ[5];
            for (t = 0; t < xa.length; t++) {
                zf(xa[t], 160);
                xa[t].ᐃⵠᐃᐃⵠ(xa[t].info);
            }
            xa = Dx.ⵠᐃΔ[12];
            t = 0;
            for (; t < xa.length; t++) {
                zf(xa[t], 168);
                xa[t].ᐃⵠᐃᐃⵠ(xa[t].info);
            }
            xa = Dx.ⵠᐃΔ[13];
            t = 0;
            for (; xa.length > t; t++) {
                zf(xa[t], 169);
                xa[t].ᐃⵠᐃᐃⵠ(xa[t].info);
            }
            xa = Dx.ⵠᐃΔ[14];
            t = 0;
            for (; xa.length > t; t++) {
                zf(xa[t], 170);
                xa[t].ᐃⵠᐃᐃⵠ(xa[t].info);
            }
            xa = Dx.ⵠᐃΔ[20];
            t = 0;
            for (; t < xa.length; t++) {
                zf(xa[t], 123);
                xa[t].ᐃⵠᐃᐃⵠ(xa[t].info);
            }
            xa = Dx.ⵠᐃΔ[52];
            t = 0;
            for (; xa.length > t; t++) {
                zf(xa[t], 219);
                xa[t].ᐃⵠᐃᐃⵠ(xa[t].info);
            }
            var ya = Dx.ⵠᐃΔ[35];
            for (t = 0; ya.length > t; t++) {
                var za = ya[t];
                if (za.info > 0) {
                    zf(za, 788);
                } else {
                    zf(za, 182);
                }
            }
            var Aa = Dx.ⵠᐃΔ[29];
            for (t = 0; Aa.length > t; t++) {
                zf(Aa[t], 159);
            }
            Tf(ww, i, j, g, e, 111, "g", 2);
            Tf(ww, i, j, g, e, 415, "gw", 2);
            Tf(ww, i, j, g, e, 112, "d", 2);
            Tf(ww, i, j, g, e, 416, "dw", 2);
            Tf(ww, i, j, g, e, 110, "p", 0);
            Tf(ww, i, j, g, e, 241, "m", 2);
            Tf(ww, i, j, g, e, 121, "a", 2);
            Tf(ww, i, j, g, e, 202, "re", 2);
            Tf(ww, i, j, g, e, 679, "cs", 3, 3);
            Tf(ww, i, j, g, e, 679, "cs", 2, 2);
            Tf(ww, i, j, g, e, 679, "cs", 1, 1);
            Tf(ww, i, j, g, e, 679, "cs", 0, 0);
            Tf(ww, i, j, g, e, 676, "cs", 3, 3);
            Tf(ww, i, j, g, e, 676, "cs", 2, 2);
            Tf(ww, i, j, g, e, 676, "cs", 1, 1);
            Tf(ww, i, j, g, e, 676, "cs", 0, 0);
            var Ba = Dx.ⵠᐃΔ[100];
            for (t = 0; Ba.length > t; t++) {
                for (aa = 0; Ba[t].info > aa; aa++) {
                    zf(Ba[t].ⵠᐃⲆⲆ[aa], 294);
                }
            }
            Tf(ww, i, j, g, e, 108, "s", 2);
            var Ca = Dx.ⵠᐃΔ[24];
            for (t = 0; Ca.length > t; t++) {
                zf(Ca[t]);
            }
            Ca = Dx.ⵠᐃΔ[25];
            t = 0;
            for (; t < Ca.length; t++) {
                zf(Ca[t]);
            }
            Ca = Dx.ⵠᐃΔ[26];
            t = 0;
            for (; Ca.length > t; t++) {
                zf(Ca[t]);
            }
            Ca = Dx.ⵠᐃΔ[27];
            t = 0;
            for (; t < Ca.length; t++) {
                zf(Ca[t]);
            }
            Ca = Dx.ⵠᐃΔ[28];
            t = 0;
            for (; t < Ca.length; t++) {
                zf(Ca[t]);
            }
            var Da = Dx.ⵠᐃΔ[32];
            for (t = 0; Da.length > t; t++) {
                cf(Da[t]);
            }
            ca = Dx.ⵠᐃΔ[1];
            t = 0;
            for (; t < ca.length; t++) {
                af(ca[t]);
            }
            ca = Dx.ⵠᐃΔ[6];
            t = 0;
            for (; t < ca.length; t++) {
                af(ca[t]);
            }
            l = Dx.ⵠᐃΔ[18];
            t = 0;
            for (; l.length > t; t++) {
                if (l[t].action == 2) {
                    af(l[t]);
                }
            }
            va = Dx.ⵠᐃΔ[34];
            t = 0;
            for (; va.length > t; t++) {
                af(va[t]);
            }
            da = Dx.ⵠᐃΔ[22];
            t = 0;
            for (; t < da.length; t++) {
                af(da[t]);
            }
            ea = Dx.ⵠᐃΔ[23];
            t = 0;
            for (; t < ea.length; t++) {
                af(ea[t]);
                ea[t].ᐃⵠᐃᐃⵠ(ea[t].info);
            }
            Tf(ww, i, j, g, e, 989, "c", 0);
            Tf(ww, i, j, g, e, 109, "t", 5, 4);
            Tf(ww, i, j, g, e, 413, "f", 2, 2);
            Tf(ww, i, j, g, e, 693, "plm", 0, 0);
            Tf(ww, i, j, g, e, 307, "b", 3, 2);
            Tf(ww, i, j, g, e, 109, "t", 3, 2);
            Tf(ww, i, j, g, e, 307, "b", 1, 0);
            Tf(ww, i, j, g, e, 413, "f", 1, 1);
            Tf(ww, i, j, g, e, 693, "plm", 1, 1);
            Tf(ww, i, j, g, e, 109, "t", 1, 0);
            Tf(ww, i, j, g, e, 413, "f", 0, 0);
            Tf(ww, i, j, g, e, 693, "plm", 2, 2);
            Da = Dx.ⵠᐃΔ[32];
            t = 0;
            for (; t < Da.length; t++) {
                af(Da[t]);
            }
            var Ea = Dx.ⵠᐃΔ[56];
            for (t = 0; Ea.length > t; t++) {
                zf(Ea[t], 221);
            }
            J = Dx.ⵠᐃΔ[0];
            t = 0;
            for (; t < J.length; t++) {
                if ((U = J[t]).ⲆᐃⵠⵠⲆⵠⲆ === 1 && (U.ΔⵠⲆⲆⲆ < 180 || U.ⲆⵠⵠⵠⲆ !== 227 && U.ⲆⵠⵠⵠⲆ !== 228 && U.ⲆⵠⵠⵠⲆ !== 91 && U.ⲆⵠⵠⵠⲆ !== 229 && U.ⲆⵠⵠⵠⲆ !== 230)) {
                    U.ΔⲆⵠᐃⵠᐃΔ = ⵠΔⲆⵠ.ⲆᐃⲆΔⵠᐃΔ(U.ΔⲆⵠᐃⵠᐃΔ, 100, 0.018);
                    ra = 1 + Math.min(1, Math.max(U.ΔⲆⵠᐃⵠᐃΔ, 0) / 100) * 0.18;
                    ao.save();
                    ao.scale(ra, ra);
                    Ex.ⵠⵠⵠ.x /= ra;
                    Ex.ⵠⵠⵠ.y /= ra;
                    U.x /= ra;
                    U.y /= ra;
                    U.r.x /= ra;
                    U.r.y /= ra;
                    U.ᐃΔⵠΔᐃΔⵠ();
                    U.ⵠⲆⲆⵠ();
                    Ex.ⵠⵠⵠ.x *= ra;
                    Ex.ⵠⵠⵠ.y *= ra;
                    U.x *= ra;
                    U.y *= ra;
                    U.r.x *= ra;
                    U.r.y *= ra;
                    ao.restore();
                }
            }
            var Fa = Dx.ⵠᐃΔ[38];
            for (t = 0; t < Fa.length; t++) {
                zf(Fa[t], 190);
                Fa[t].ᐃⵠᐃᐃⵠ(Fa[t].info);
            }
            var Ga = Dx.ⵠᐃΔ[90];
            for (t = 0; Ga.length > t; t++) {
                zf(Ga[t], 245, 246);
            }
            var Ha = Dx.ⵠᐃΔ[42];
            for (t = 0; t < Ha.length; t++) {
                zf(Ha[t], 201);
            }
            J = Dx.ⵠᐃΔ[0];
            t = 0;
            for (; J.length > t; t++) {
                if (((U = J[t]).ⲆⵠⵠⵠⲆ === 227 || U.ⲆⵠⵠⵠⲆ === 228 || U.ⲆⵠⵠⵠⲆ === 91 || U.ⲆⵠⵠⵠⲆ === 229 || U.ⲆⵠⵠⵠⲆ === 230) && U.ΔⵠⲆⲆⲆ > 180) {
                    U.ⲆΔⲆᐃⵠΔΔ = 1;
                    ao.save();
                    ra = 1 + Math.min(1, Math.max(U.ⵠᐃᐃⲆⲆ - 30, 0) / 180) * 0.35;
                    ao.scale(ra, ra);
                    Ex.ⵠⵠⵠ.x /= ra;
                    Ex.ⵠⵠⵠ.y /= ra;
                    U.x /= ra;
                    U.y /= ra;
                    U.r.x /= ra;
                    U.r.y /= ra;
                    U.ᐃΔⵠΔᐃΔⵠ();
                    U.ⵠⲆⲆⵠ();
                    Ex.ⵠⵠⵠ.x *= ra;
                    Ex.ⵠⵠⵠ.y *= ra;
                    U.x *= ra;
                    U.y *= ra;
                    U.r.x *= ra;
                    U.r.y *= ra;
                    ao.restore();
                }
            }
            qa = Dx.ⵠᐃΔ[91];
            t = 0;
            for (; qa.length > t; t++) {
                if (qa[t].ⲆΔⲆᐃⵠΔΔ === 1) {
                    zf(qa[t]);
                }
            }
            Z = Dx.ⵠᐃΔ[64];
            t = 0;
            for (; t < Z.length; t++) {
                if (Z[t].scale > 1) {
                    zf(Z[t], 449, 463);
                }
            }
            Z = Dx.ⵠᐃΔ[69];
            t = 0;
            for (; Z.length > t; t++) {
                if (Z[t].scale > 1) {
                    zf(Z[t], 450, 464);
                }
            }
            var Ia = Dx.ⵠᐃΔ[74];
            for (t = 0; t < Ia.length; t++) {
                zf(Ia[t], 235, 1107);
            }
            var Ja = Dx.ⵠᐃΔ[75];
            for (t = 0; t < Ja.length; t++) {
                zf(Ja[t], 238, 1128);
            }
            if ((ow += Lx * 15) > 60) {
                ow -= 60;
            }
            Tf(qw, i, j, g, e, 1041, "fo", 2);
            Tf(qw, i, j, g, e, 244, "fod", 2);
        })();
        if (Ax.ⵠⲆᐃⵠⲆ && Dx.mode !== 2 && Dx.mode !== 4 && Dx.mode !== 5) {
            (function () {
                var a = Ex.ΔⲆⵠᐃΔ;
                if (a.ⵠⲆⲆΔᐃ === 0) {
                    a.ⲆᐃⲆΔΔ = Math.max(0, a.ⲆᐃⲆΔΔ - Lx / 10);
                } else {
                    a.ⲆᐃⲆΔΔ = Math.min(1, a.ⲆᐃⲆΔΔ + Lx / 10);
                }
                for (var b = a.ⲆⲆᐃᐃΔ, c = 0; c < b.length; c++) {
                    var d = b[c];
                    a.ⲆΔᐃ(d);
                    tf(471, d.id, Ex.ⵠⵠⵠ.x + d.x, Ex.ⵠⵠⵠ.y + d.y, d.alpha);
                }
                for (c = 0; b.length > c; c++) {
                    d = b[c];
                    if (d.ᐃⲆⲆᐃⲆ <= 0 || d.x > -Ex.ⵠⵠⵠ.x + io || -Ex.ⵠⵠⵠ.x - Ex.ⵠⵠⵠ.w / 2 > d.x || -Ex.ⵠⵠⵠ.y + no < d.y) {
                        b.splice(c, 1);
                    }
                }
                var e = -Ex.ⵠⵠⵠ.y;
                if (Dx.ΔⲆΔΔΔ > -1000) {
                    a.add(e);
                }
            })();
            (function () {
                var a = Ex.ⵠⵠⲆⵠⲆ;
                if (a.ⵠⲆⲆΔᐃ === 0) {
                    a.ⲆᐃⲆΔΔ = Math.max(0, a.ⲆᐃⲆΔΔ - Lx / 10);
                } else {
                    a.ⲆᐃⲆΔΔ = Math.min(1, a.ⲆᐃⲆΔΔ + Lx / 10);
                }
                for (var b = a.ⲆⲆᐃᐃΔ, c = 0; b.length > c; c++) {
                    var d = b[c];
                    a.ⲆΔᐃ(d);
                    tf(470, d.id, Ex.ⵠⵠⵠ.x + d.x, Ex.ⵠⵠⵠ.y + d.y, d.alpha);
                }
                for (c = 0; b.length > c; c++) {
                    if ((d = b[c]).ᐃⲆⲆᐃⲆ <= 0 || d.x > -Ex.ⵠⵠⵠ.x + io || d.x < -Ex.ⵠⵠⵠ.x || d.y > -Ex.ⵠⵠⵠ.y + no) {
                        b.splice(c, 1);
                    }
                }
                var e = -Ex.ⵠⵠⵠ.y;
                if (Dx.Ⲇⵠⵠⵠⵠ > -1000) {
                    a.add(e);
                }
            })();
            (function () {
                var a = Ex.ⵠⵠΔΔⵠᐃⲆ;
                for (var b = a.ⲆⲆᐃᐃΔ, c = 0; c < b.length; c++) {
                    var d = b[c];
                    a.ⲆΔᐃ(d);
                    tf(942, d.id, Ex.ⵠⵠⵠ.x + d.x, Ex.ⵠⵠⵠ.y + d.y, d.alpha);
                }
                for (c = 0; b.length > c; c++) {
                    if ((d = b[c]).ᐃⲆⲆᐃⲆ <= 0 || d.x > -Ex.ⵠⵠⵠ.x + io || -Ex.ⵠⵠⵠ.x > d.x || -Ex.ⵠⵠⵠ.y + no < d.y) {
                        b.splice(c, 1);
                    }
                }
                var e = -Ex.ⵠⵠⵠ.y;
                if (Dx.ⵠⲆⲆΔΔ > -1000) {
                    a.add(e);
                }
            })();
        }
        if (Dx.transition && a) {
            Dx.transition = na;
            Dx.ⵠΔΔᐃ.ⲆᐃΔ = 0;
            Dx.ⵠΔΔᐃ.ᐃⵠⵠ = w;
        }
    }
    function vf(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = Ex.ⵠⵠⵠ.x + f - 700;
        var l = Math.max(Ex.ⵠⵠⵠ.y + e, 0);
        var g = Math.max(-Ex.ⵠⵠⵠ.y + no - i - 100, 0);
        var r = l;
        var b = no - l - g;
        if (n) {
            var d = j.Ⲇᐃⵠ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + 0;
        0;
        s += d + 0 - 2;
        if (n) {
            d = j.Ⲇᐃⵠ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h + 250 - s + d;
        var u = (s += t - 2) - 2;
        if (n) {
            d = j.Ⲇᐃⵠ(q).x;
        } else {
            d = q.r.x;
        }
        if (s + (t = h + 350 - s + d) - 3 > u) {
            s += t - 2;
        } else {
            s = u;
        }
        t = h + 700 - s;
        if (n > 0 && k.ⲆΔⵠⵠⵠⵠΔ === 1) {
            if (Dx.transition) {
                var p = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
                ao.fillStyle = lf(15, 77, 72, 252, 239, 187, p);
            } else {
                ao.fillStyle = Hr.ΔⵠΔᐃⵠⲆΔ[Dx.time];
            }
            ao.fillRect(s, r, t, b);
        } else {
            if (Dx.transition) {
                p = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
                ao.fillStyle = lf(k.ⵠΔⵠ[0], k.ⵠΔⵠ[1], k.ⵠΔⵠ[2], k.Δⵠᐃ[0], k.Δⵠᐃ[1], k.Δⵠᐃ[2], p);
            } else {
                ao.fillStyle = k.ⲆᐃᐃⵠⲆ[Dx.time];
            }
            ao.fillRect(s, r, t, b);
        }
    }
    function cf(a, b) {
        if (Dx.transition) {
            ao.globalAlpha = 1;
            a.ⲆⲆᐃⵠⵠ(b);
            Dx.time = Dx.time ? 0 : 1;
            ao.globalAlpha = 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ;
            a.ⲆⲆᐃⵠⵠ(b);
            Dx.time = Dx.time ? 0 : 1;
            ao.globalAlpha = 1;
        } else {
            a.ⲆⲆᐃⵠⵠ(b);
        }
    }
    function mf(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = Ex.ⵠⵠⵠ.x + f + 820;
        var l = Math.max(Ex.ⵠⵠⵠ.y + e, 0);
        var g = Math.max(-Ex.ⵠⵠⵠ.y + no - i - 100, 0);
        var r = l;
        var b = no - l - g;
        if (n) {
            var d = j.Ⲇᐃⵠ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + 0;
        0;
        s += -d + 0 + 2;
        if (n) {
            d = j.Ⲇᐃⵠ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h - 250 - s - d;
        var u = (s += t + 2) - 2;
        if (n) {
            d = j.Ⲇᐃⵠ(q).x;
        } else {
            d = q.r.x;
        }
        if (s + (t = h - 350 - s - d) < u) {
            s += t + 2;
        } else {
            s = u;
        }
        t = h - 700 - s;
        if (n > 0 && k.ⲆΔⵠⵠⵠⵠΔ === 1) {
            if (Dx.transition) {
                var p = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
                ao.fillStyle = lf(15, 77, 72, 252, 239, 187, p);
            } else {
                ao.fillStyle = Hr.ΔⵠΔᐃⵠⲆΔ[Dx.time];
            }
            ao.fillRect(s, r, t, b);
        } else {
            if (Dx.transition) {
                p = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
                ao.fillStyle = lf(k.ⵠΔⵠ[0], k.ⵠΔⵠ[1], k.ⵠΔⵠ[2], k.Δⵠᐃ[0], k.Δⵠᐃ[1], k.Δⵠᐃ[2], p);
            } else {
                ao.fillStyle = k.ⲆᐃᐃⵠⲆ[Dx.time];
            }
            ao.fillRect(s, r, t, b);
        }
    }
    function pf(b, c, d, e) {
        var f = c.width;
        var g = c.height;
        var a = Math.floor(f / 2);
        var h = Math.floor(g / 2);
        if (Dx.transition) {
            ao.globalAlpha = 1;
            Vp(ao, ᐃΔ[b][Dx.time], 0, 0, f, g, d, e, a, h);
            Dx.time = Dx.time ? 0 : 1;
            ao.globalAlpha = 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ;
            Vp(ao, ᐃΔ[b][Dx.time], 0, 0, f, g, d, e, a, h);
            Dx.time = Dx.time ? 0 : 1;
            ao.globalAlpha = 1;
        } else {
            Vp(ao, c, 0, 0, f, g, d, e, a, h);
        }
    }
    function Cf(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = Ex.ⵠⵠⵠ.y + j + 710;
        var l = Math.max(Ex.ⵠⵠⵠ.x + e, 0);
        var g = Math.max(-Ex.ⵠⵠⵠ.x + io - i - 100, 0);
        var t = l;
        var b = io - l - g;
        if (o) {
            var d = q.Ⲇᐃⵠ(a);
        } else {
            d = a.r;
        }
        var u = h + 0;
        var F = u;
        var m = t;
        var p = -d.x + 0;
        var C = b;
        var G = u += -d.x + 0 + 2;
        if (o) {
            d = q.Ⲇᐃⵠ(r);
        } else {
            d = r.r;
        }
        var f = h - 250 - u - d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var k = (u += f + 2) - 2;
        if (o) {
            d = q.Ⲇᐃⵠ(s);
        } else {
            d = s.r;
        }
        if (u + (f = h - 350 - u - d.x) < k) {
            var A = kk;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var D = u += f + 2;
        } else {
            A = false;
            u = k;
            D = -1;
        }
        f = h - 700 - u;
        if (Dx.transition) {
            var N = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
            ao.fillStyle = lf(9, 55, 63, 11, 106, 132, N);
        } else {
            ao.fillStyle = Hr.ᐃⵠⲆᐃⲆ[Dx.time];
        }
        ao.fillRect(m, F, C, p);
        if (o) {
            if (Dx.transition) {
                N = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
                ao.fillStyle = lf(15, 70, 76, 42, 139, 155, N);
            } else {
                ao.fillStyle = Hr.ᐃᐃΔⵠΔᐃⲆ[Dx.time];
            }
        } else if (Dx.transition) {
            N = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
            ao.fillStyle = lf(9, 55, 63, 11, 106, 132, N);
        } else {
            ao.fillStyle = Hr.ᐃⵠⲆᐃⲆ[Dx.time];
        }
        ao.fillRect(y, H, K, w);
        if (A) {
            if (o) {
                if (Dx.transition) {
                    N = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
                    ao.fillStyle = lf(17, 94, 96, 169, 214, 211, N);
                } else {
                    ao.fillStyle = Hr.ΔΔᐃᐃΔᐃⵠ[Dx.time];
                }
            } else if (Dx.transition) {
                N = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
                ao.fillStyle = lf(9, 55, 63, 11, 106, 132, N);
            } else {
                ao.fillStyle = Hr.ᐃⵠⲆᐃⲆ[Dx.time];
            }
            ao.fillRect(J, L, B, M);
        }
        if (Ax.ⵠⲆᐃⵠⲆ && o) {
            q.ⵠⵠⵠΔᐃⵠⲆᐃⵠ(k, D, G, h, -Ex.ⵠⵠⵠ.x + m, -Ex.ⵠⵠⵠ.x + m + C);
        }
    }
    function Tf(b, c, d, e, f, g, a, i, j, h) {
        if (Dx.transition) {
            ao.globalAlpha = 1;
            b(c, d, e, f, g, a, i, j, h);
            Dx.time = Dx.time ? 0 : 1;
            ao.globalAlpha = 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ;
            b(c, d, e, f, g, a, i, j, h);
            Dx.time = Dx.time ? 0 : 1;
            ao.globalAlpha = 1;
        } else {
            b(c, d, e, f, g, a, i, j, h);
        }
    }
    function ff(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = Ex.ⵠⵠⵠ.y + f + 710;
        var l = Math.max(Ex.ⵠⵠⵠ.x + e, 0);
        var g = Math.max(-Ex.ⵠⵠⵠ.x + io - i - 100, 0);
        var r = l;
        var b = io - l - g;
        if (n) {
            var d = j.Ⲇᐃⵠ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + 0;
        0;
        s += -d + 0 + 2;
        if (n) {
            d = j.Ⲇᐃⵠ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h - 250 - s - d;
        var u = (s += t + 2) - 2;
        if (n) {
            d = j.Ⲇᐃⵠ(q).x;
        } else {
            d = q.r.x;
        }
        if (s + (t = h - 350 - s - d) < u) {
            s += t + 2;
        } else {
            s = u;
        }
        t = h - 700 - s;
        if (n > 0 && k.ⲆΔⵠⵠⵠⵠΔ === 1) {
            if (Dx.transition) {
                var p = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
                ao.fillStyle = lf(15, 77, 72, 252, 239, 187, p);
            } else {
                ao.fillStyle = Hr.ΔⵠΔᐃⵠⲆΔ[Dx.time];
            }
            ao.fillRect(r, s, b, t);
        } else {
            if (Dx.transition) {
                p = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
                ao.fillStyle = lf(k.ⵠΔⵠ[0], k.ⵠΔⵠ[1], k.ⵠΔⵠ[2], k.Δⵠᐃ[0], k.Δⵠᐃ[1], k.Δⵠᐃ[2], p);
            } else {
                ao.fillStyle = k.ⲆᐃᐃⵠⲆ[Dx.time];
            }
            ao.fillRect(r, s, b, t);
        }
    }
    function zf(a, b, c) {
        if (Dx.transition) {
            ao.globalAlpha = 1;
            a.ⵠⲆⲆⵠ(b, c);
            Dx.time = Dx.time ? 0 : 1;
            ao.globalAlpha = 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ;
            a.ⵠⲆⲆⵠ(b, c);
            Dx.time = Dx.time ? 0 : 1;
            ao.globalAlpha = 1;
        } else {
            a.ⵠⲆⲆⵠ(b, c);
        }
    }
    function yf(a) {
        ao.globalAlpha = a.alpha;
        id(ao, a.x + Ex.ⵠⵠⵠ.x, a.y + Ex.ⵠⵠⵠ.y, a.r);
        $b(ao, Hr.ⵠⲆⵠΔᐃᐃⵠ[Dx.time]);
        ao.globalAlpha = 1;
    }
    function wf(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = Ex.ⵠⵠⵠ.x + j + 820;
        var l = Math.max(Ex.ⵠⵠⵠ.y + e, 0);
        var g = Math.max(-Ex.ⵠⵠⵠ.y + no - i - 100, 0);
        var t = l;
        var b = no - l - g;
        if (o) {
            var d = q.Ⲇᐃⵠ(a);
        } else {
            d = a.r;
        }
        var u = h + 0;
        var F = u;
        var m = t;
        var p = -d.x + 0;
        var C = b;
        var G = u += -d.x + 0 + 2;
        if (o) {
            d = q.Ⲇᐃⵠ(r);
        } else {
            d = r.r;
        }
        var f = h - 250 - u - d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var k = (u += f + 2) - 2;
        if (o) {
            d = q.Ⲇᐃⵠ(s);
        } else {
            d = s.r;
        }
        if (u + (f = h - 350 - u - d.x) < k) {
            var A = ma;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var D = u += f + 2;
        } else {
            A = Dl;
            u = k;
            D = -1;
        }
        f = h - 700 - u;
        if (Dx.transition) {
            var N = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
            ao.fillStyle = lf(9, 55, 63, 11, 106, 132, N);
        } else {
            ao.fillStyle = Hr.ᐃⵠⲆᐃⲆ[Dx.time];
        }
        ao.fillRect(F, m, p, C);
        if (o) {
            if (Dx.transition) {
                N = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
                ao.fillStyle = lf(15, 70, 76, 42, 139, 155, N);
            } else {
                ao.fillStyle = Hr.ᐃᐃΔⵠΔᐃⲆ[Dx.time];
            }
        } else if (Dx.transition) {
            N = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
            ao.fillStyle = lf(9, 55, 63, 11, 106, 132, N);
        } else {
            ao.fillStyle = Hr.ᐃⵠⲆᐃⲆ[Dx.time];
        }
        ao.fillRect(H, y, w, K);
        if (A) {
            if (o) {
                if (Dx.transition) {
                    N = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
                    ao.fillStyle = lf(17, 94, 96, 169, 214, 211, N);
                } else {
                    ao.fillStyle = Hr.ΔΔᐃᐃΔᐃⵠ[Dx.time];
                }
            } else if (Dx.transition) {
                N = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
                ao.fillStyle = lf(9, 55, 63, 11, 106, 132, N);
            } else {
                ao.fillStyle = Hr.ᐃⵠⲆᐃⲆ[Dx.time];
            }
            ao.fillRect(L, J, M, B);
        }
        if (Ax.ⵠⲆᐃⵠⲆ && o) {
            q.ΔᐃⵠΔᐃⵠᐃᐃᐃ(k, D, G, h, -Ex.ⵠⵠⵠ.y + m, -Ex.ⵠⵠⵠ.y + m + C);
        }
    }
    ;
    var Pf = 0;
    var Af = 1;
    var xf = 2;
    var Jf = 0;
    var Mf = 1;
    var Bf = 2;
    function Df(f, e, i, j, k, m, n, p = 0, q = 0, h, r) {
        if (Gr === h) {
            h = 0;
        }
        if ($e === r) {
            r = 1;
        }
        if (m !== 1) {
            m = 0;
        }
        if (j) {
            var s = j;
        }
        var t;
        var u = {
            width: f,
            height: e,
            Ⲇᐃ: s,
            state: Jf,
            translate: {
                x: p,
                y: q,
                ᐃᐃᐃⲆΔ: p,
                ΔᐃⵠᐃⲆ: q
            },
            ΔⵠⲆⲆⵠⵠᐃⲆⵠ: m,
            ⲆⵠΔⲆ: 0,
            callback: n,
            position: h,
            active: r
        };
        function d() {
            return u.Ⲇᐃ[u.state];
        }
        function v(a) {
            var b = u.translate;
            if (u.width === 0 || u.height === 0) {
                u.width = u.Ⲇᐃ[0].width;
                u.height = u.Ⲇᐃ[0].height;
            }
            return a.x > b.x && a.x < b.x + u.width / k && a.y > b.y && a.y < b.y + u.height / k;
        }
        m = function () {
            var a = 0;
            if (u.ΔⵠⲆⲆⵠⵠᐃⲆⵠ === 1) {
                if (u.state === Mf || u.state === Bf) {
                    u.ⲆⵠΔⲆ = (0 + Lx * 1000) % 1000;
                } else if (0 < 0) {
                    u.ⲆⵠΔⲆ = 0 > 500 ? 0 + Lx * 1000 : 0 - Lx * 1000;
                    if (0 > 0 || 0 > 1000) {
                        u.ⲆⵠΔⲆ = 0;
                    }
                }
                a = ⵠΔⲆⵠ.ⵠΔⲆⵠⵠ(500 < 0 ? 2 : 0) * 0.2;
            }
            return a;
        };
        if ((k = k === 3 ? 3 : k === 1 ? 2 : 1) === 2) {
            t = function (a) {
                var b = 1 + m();
                var c = d();
                var e = b * u.width / 2;
                var f = u.height * b / 2;
                var g = (e - u.width / 2) / 2;
                var h = (f - u.height / 2) / 2;
                Vp(a, c, u.translate.x - g, u.translate.y - h, e, f);
            };
        } else if (k === 3) {
            t = function (b) {
                var c = d();
                var e = u.width;
                var f = u.height;
                var g = (e - u.width) / 2;
                var h = (f - u.height) / 2;
                Vp(b, c, u.translate.x - g, u.translate.y - h, e, f);
            };
            k = 1;
        } else {
            t = function (a) {
                Vp(a, d(), u.translate.x, u.translate.y);
            };
        }
        return {
            info: u,
            ⵠⲆⵠᐃ: function (a, b, c) {
                if (v(b)) {
                    if (c == Af) {
                        u.state = Bf;
                    } else if (xf == c || c == Pf && u.state != Bf) {
                        u.state = Mf;
                    }
                    return true;
                } else {
                    u.state = Jf;
                    return false;
                }
            },
            ⵠⲆⲆⵠ: t,
            ᐃⲆᐃᐃᐃⵠΔ: v
        };
    }
    function Ef(f, g, i, j, k, n, a, q, t, w, l, u, b, d, x) {
        if (f.length === 0) {
            f = " ";
        }
        if (Vq === a) {
            a = 0;
        }
        if (q === lh) {
            q = 0;
        }
        if (sl === t) {
            t = 0;
        }
        if (d === Qr) {
            d = 0;
        }
        var c = document.createElement("canvas");
        var m = c.getContext("2d");
        m.textBaseline = "middle";
        m.font = (x !== cn ? x + " " : "") + j + "px " + g;
        k = k !== undefined ? Math.min(m.measureText(f).width, k) : m.measureText(f).width;
        c.width = k + a;
        c.height = j + q;
        if (n !== undefined) {
            if (Ih !== l) {
                m.globalAlpha = l;
            }
            m.fillStyle = n;
            if (Gr !== u) {
                ⵠΔⵠⲆΔⵠⲆᐃⲆ(m, t + 2, t, k + a - t * 2 - 4, j + q - t * 2, u);
                m.fill();
            } else {
                m.fillRect(t, t, k + a - t * 2, j + q - t * 2);
            }
            m.globalAlpha = 1;
            if (t !== 0) {
                m.lineWidth = t;
                m.strokeStyle = w;
                m.stroke();
            }
        }
        m.textBaseline = "middle";
        m.font = (Rh !== x ? x + " " : "") + j + "px " + g;
        if (b !== undefined) {
            m.strokeStyle = b;
            m.lineWidth = d;
            m.lineJoin = "miter";
            m.miterLimit = 2;
            m.strokeText(f, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(j / 2), k);
        }
        m.fillStyle = i;
        m.fillText(f, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(j / 2), k);
        c.w2 = c.width / 2;
        c.ᐃᐃⵠⵠᐃ = c.height / 2;
        return c;
    }
    function If(b, c, d, e, f) {
        var g = {
            x: d,
            y: e,
            ᐃᐃᐃⲆΔ: d,
            ΔᐃⵠᐃⲆ: e
        };
        return {
            translate: g,
            ⵠⲆⲆⵠ: function (a) {
                Vp(a, b, g.x, g.y, b.width / 2, b.height / 2);
            },
            active: c,
            position: f
        };
    }
    function Sf(a, b) {
        var c = a.getBoundingClientRect();
        return {
            x: b.clientX - c.left,
            y: b.clientY - c.top
        };
    }
    var Qf = "send";
    var _f = ⵠΔⲆⵠ.ⵠΔⵠⵠΔⵠΔ("id") === "1" ? 1 : 0;
    var Ff = ⵠΔⲆⵠ.ⵠΔⵠⵠΔⵠΔ("password");
    var Rf = ⵠΔⲆⵠ.ⵠΔⵠⵠΔⵠΔ("debug") || undefined;
    if (Rf !== cn) {
        Rf = JSON.parse(Hf.decodeURIComponent(Rf));
    }
    var Cw = ⵠΔⲆⵠ.ⵠΔⵠⵠΔⵠΔ("server") || ks;
    var Lf = ⵠΔⲆⵠ.ⵠΔⵠⵠΔⵠΔ("region") || undefined;
    var Gf = "starve.io";
    var Wf = "https://" + Gf;
    var Of = {
        ⵠⵠⵠⵠⲆΔⵠ: 128,
        ᐃⵠⲆΔⵠⵠᐃ: 32,
        ΔΔᐃⵠⲆᐃⲆ: 16,
        IDLE: 64,
        ⵠΔᐃⵠⲆⵠΔⵠⲆ: 1,
        ΔⵠⵠⵠⵠⲆΔ: 8,
        ᐃΔᐃⲆⲆ: 4,
        ᐃⵠⲆⲆ: 2,
        ᐃΔᐃᐃⵠⵠᐃ: 256
    };
    function Nf(a) {
        const b = Hf.setTimeout;
        const c = b;
        const d = function () {
            b(d, 153);
            c(d, 6995);
        };
        d();
    }
    var qf = [{
        ᐃⲆᐃΔᐃ: 1000,
        items: [[2, 113], [1, 117], [8, 110], [1, 143]]
    }, {
        ᐃⲆᐃΔᐃ: 2000,
        items: [[2, 118], [1, 8], [2, 117], [16, 110], [2, 143]]
    }, {
        ᐃⲆᐃΔᐃ: 4000,
        items: [[3, 118], [1, 1], [4, 117], [20, 110], [4, 143], [1, 114], [80, 108], [140, 109]]
    }, {
        ᐃⲆᐃΔᐃ: 8000,
        items: [[1, 29], [4, 118], [1, 3], [6, 117], [30, 110], [6, 143], [1, 114], [150, 108], [200, 109], [60, 111], [2, 127]]
    }, {
        ᐃⲆᐃΔᐃ: 16000,
        items: [[1, 29], [1, 4], [1, 198], [7, 136], [2, 127], [2, 118], [1, 119], [15, 163], [2, 171], [1, 159], [1, 55], [200, 108], [300, 109]]
    }, {
        ᐃⲆᐃΔᐃ: 16000,
        items: [[1, 29], [1, 11], [1, 50], [1, 3], [10, 136], [4, 127], [6, 118], [3, 195], [1, 28], [200, 108], [300, 109]]
    }, {
        ᐃⲆᐃΔᐃ: 16000,
        items: [[1, 29], [1, 83], [1, 36], [3, 195], [1, 0], [1, 3], [7, 136], [2, 127], [4, 118], [150, 108], [200, 109], [1, 158]]
    }, {
        ᐃⲆᐃΔᐃ: 16000,
        items: [[1, 29], [1, 84], [1, 3], [7, 136], [2, 127], [4, 118], [2, 135], [4, 144], [10, 141], [6, 132], [4, 115], [1, 49], [500, 109]]
    }, {
        ᐃⲆᐃΔᐃ: 16000,
        items: [[1, 29], [1, 3], [16, 138], [1, 127], [6, 118], [3, 195], [1, 48], [1, 0], [16, 125], [150, 108], [200, 109]]
    }, {
        ᐃⲆᐃΔᐃ: 20000,
        items: [[1, 29], [1, 3], [1, 136], [1, 127], [3, 118], [3, 195], [1, 26], [1, 5], [1, 15], [2, 169], [50, 108], [100, 109]]
    }];
    const Uf = [];
    let Yf = 0;
    var Dw = {
        ᐃᐃⲆᐃⵠⵠΔᐃᐃ: 25,
        ΔΔᐃⵠⲆᐃⲆ: 0.2,
        ⲆΔⵠΔΔᐃᐃᐃᐃ: 60000,
        ᐃⲆⲆⲆⵠᐃⵠΔᐃ: 14,
        ᐃⲆⵠⵠⵠΔⵠ: 2,
        ⲆΔΔᐃᐃⵠΔΔᐃ: 5,
        ΔⵠᐃⵠⵠⲆⵠⲆⵠ: 20,
        ⲆⵠⲆⲆⵠⵠᐃ: 3,
        ΔⲆᐃⵠⵠᐃⵠᐃⵠ: "[" + 6 + "]",
        ⵠΔⵠⲆᐃⲆᐃΔᐃ: 14,
        ⲆᐃᐃⵠΔΔⵠᐃⲆ: 3,
        ⲆⵠⵠΔⲆΔⲆⵠΔ: 0.58,
        ΔΔᐃΔⵠΔⲆᐃⵠ: 125000,
        ⵠΔᐃⵠⵠⲆⲆ: 4,
        ⲆⲆΔᐃᐃᐃⲆΔΔ: 50,
        ⵠⲆΔⲆΔⵠΔⵠΔ: 200,
        ⵠΔⵠⲆⵠⵠⵠ: 52,
        ⲆⵠΔⵠⵠΔᐃΔⵠ: 5,
        ⵠⲆⲆⵠᐃΔⵠ: 0.2,
        ΔⵠⵠΔᐃⵠᐃ: 4,
        ᐃΔΔⵠⵠⲆⲆⵠᐃ: 8000,
        ⲆΔΔΔᐃⲆΔ: 1,
        ᐃⲆΔⵠᐃᐃⲆⵠΔ: 2000,
        ⲆᐃⲆΔΔᐃⲆ: 600000,
        ⵠⵠΔᐃⲆⲆΔ: 0
    };
    var Vf = {
        ΔᐃΔ: 480000,
        ⵠⵠⵠᐃᐃΔΔ: 10,
        ᐃⵠⵠⵠᐃⵠⲆ: 16,
        ᐃᐃᐃᐃⵠⲆⲆⲆⵠ: 6,
        ⲆΔⲆᐃⵠΔᐃ: 60,
        ⵠⵠΔΔⵠ: 1,
        ⵠΔⵠⲆΔ: 2,
        ⵠⲆⲆΔⵠ: 4,
        ΔⲆᐃᐃΔ: 8,
        ⵠⲆⲆⵠᐃΔⵠ: 10,
        ⵠⲆΔⵠᐃᐃⵠ: 100,
        ΔΔΔⵠⲆⲆⵠ: 100,
        ΔᐃΔΔᐃᐃᐃ: 100,
        ⵠΔᐃⵠΔᐃⵠⵠⵠ: 100,
        ᐃᐃᐃᐃᐃⲆⲆ: 100,
        ᐃⲆΔΔΔⲆᐃ: 100,
        ᐃᐃⵠΔⵠⲆⲆᐃⲆ: 100,
        ᐃⲆΔΔΔⲆᐃ: 100,
        ⲆⵠΔⲆⲆⲆⲆ: 100,
        ⵠⲆⲆⵠⲆⲆΔ: 100,
        ⵠⲆⵠᐃΔ: 0,
        ᐃⲆⵠⲆⵠⲆᐃ: 1,
        ΔⲆᐃΔᐃ: 2,
        ᐃⲆⲆⵠⵠ: 3,
        ⲆᐃΔⲆΔ: 4,
        ⵠⵠᐃⲆⵠᐃⵠ: 5,
        ⵠΔⵠⵠᐃ: 6,
        ⲆⵠΔΔᐃ: 7,
        ⲆⵠⵠᐃⵠⵠⵠΔᐃ: {
            sydney: "Sydney",
            frankfurt: "Frankfurt",
            atlanta: "Atlanta",
            losangeles: "Los Angeles",
            osaka: "Osaka"
        },
        ⵠᐃᐃⵠⵠⵠᐃ: {
            0: "normal",
            2: "zombies",
            3: "vampires",
            4: "forest",
            6: "community",
            7: "experimental"
        },
        ᐃᐃΔⲆᐃᐃⵠ: 0,
        ⵠᐃᐃΔⵠⲆⵠ: 0,
        ᐃⵠᐃⲆᐃΔⲆ: 30,
        ΔⵠⲆⲆⲆΔⲆᐃⲆ: 2,
        ⲆΔⲆᐃⵠΔᐃ: 60000,
        ΔΔⵠᐃⵠᐃΔⵠΔ: 0,
        ⵠΔⲆΔⵠᐃⵠᐃⲆ: 0,
        ⲆΔⵠΔⲆᐃⲆⵠΔ: 50,
        ᐃⵠⲆⵠΔⲆⲆΔⵠ: 0,
        ⵠΔΔᐃⵠᐃᐃⵠᐃ: 40,
        ⲆᐃᐃⲆΔⲆⵠΔⲆ: 39,
        ⲆΔΔᐃΔⵠΔΔⲆ: 830,
        ᐃΔᐃΔⲆⵠⲆ: 25,
        ⲆⵠⲆΔⲆⲆⲆ: 8,
        ᐃⲆΔⵠⲆ: 0,
        ⲆⲆΔᐃⵠ: 0,
        ⵠΔⲆᐃᐃᐃᐃ: 200,
        ᐃᐃΔᐃΔᐃⲆ: 0,
        ᐃΔⵠΔᐃ: 250,
        ⲆⵠᐃΔᐃΔⵠ: 150,
        ⵠⲆᐃⵠᐃᐃΔ: 0,
        ΔᐃᐃⲆΔ: 350,
        ⵠᐃᐃᐃⵠΔⲆ: 100,
        ⲆⲆⲆⲆⵠΔΔ: 700,
        ᐃᐃⲆᐃᐃ: 39879
    };
    var Xf = [];
    for (wb = 0; wb < 500; wb++) {
        Xf[wb] = 0;
    }
    Xf[47] = 1;
    Xf[57] = 1;
    Xf[0] = 1;
    Xf[5] = 1;
    Xf[6] = 1;
    Xf[30] = 1;
    Xf[19] = 1;
    Xf[9] = 1;
    Xf[62] = 1;
    Xf[63] = 1;
    Xf[13] = 1;
    Xf[14] = 1;
    Xf[15] = 1;
    Xf[33] = 1;
    Xf[34] = 1;
    Xf[16] = 1;
    Xf[17] = 1;
    Xf[12] = 1;
    Xf[18] = 1;
    var Zf = [{
        time: 2880000
    }, {
        time: 1440000
    }, {
        time: 1920000
    }, {
        time: 1440000
    }, {
        time: 2880000
    }, {
        time: 2400000
    }, {
        time: 2400000
    }, {
        time: 4800000
    }, {
        time: 2880000
    }, {
        time: 3360000
    }, {
        time: 2880000
    }, {
        time: 3840000
    }, {
        time: 3360000
    }];
    var $f = {
        ΔⲆⵠΔᐃ: 65,
        ᐃᐃⲆⲆΔ: 10,
        ⲆᐃⲆΔⲆ: 37,
        ⲆΔⵠᐃⲆ: 55,
        ᐃΔΔΔⵠ: 54,
        ⵠⵠⲆⵠΔᐃᐃ: 85,
        ΔΔᐃΔΔ: 20,
        ⵠΔⲆⵠⲆ: 17,
        ⵠᐃⲆⵠᐃ: 44,
        ⵠⵠⵠⵠⵠ: 28,
        ⲆᐃΔⲆᐃ: 47,
        ⵠⲆⵠᐃⵠ: 75,
        ᐃᐃⲆᐃᐃ: 3,
        ΔᐃᐃᐃⲆ: 60,
        ⲆⲆΔΔⲆ: 79,
        Δⵠⵠⵠᐃ: 35,
        ⵠⵠΔΔΔ: 40,
        ⵠΔⲆΔⵠⵠΔ: 84,
        ΔᐃᐃΔⵠ: 91,
        ⲆⲆⵠⵠⵠ: 53,
        ⵠΔⵠΔⲆ: 78,
        ⲆΔⲆⵠⵠ: 1,
        ⲆⵠᐃᐃΔ: 22,
        ᐃⵠⲆⲆⲆ: 68,
        ⲆⲆⵠΔΔ: 70,
        ΔᐃⵠΔᐃ: 51,
        ⵠⵠⲆᐃᐃ: 7,
        ΔⵠⲆΔⵠ: 12,
        ⵠᐃⵠᐃΔ: 46,
        ᐃⵠΔⲆⵠ: 25,
        ΔⵠΔⵠᐃⵠⵠ: 83,
        ΔᐃⲆΔΔ: 18,
        ⲆⵠⲆⲆᐃ: 38,
        ⲆⵠᐃⵠⲆ: 64,
        ⲆⲆⲆΔᐃ: 81,
        ᐃⲆⵠᐃⵠ: 50,
        Δⵠᐃⵠᐃ: 49,
        ᐃⵠΔΔⵠ: 63,
        ᐃⲆⲆⲆᐃ: 14,
        ΔⲆᐃⵠⲆ: 72,
        ᐃᐃΔⵠᐃΔⵠ: 76,
        ⲆΔⲆᐃΔ: 36,
        ⵠⵠⵠⲆᐃ: 66,
        ᐃⵠⵠᐃᐃ: 48,
        ⵠⲆᐃⲆᐃ: 43,
        ⲆΔⵠⲆⲆ: 74,
        ᐃⲆΔⵠᐃ: 16,
        ⵠⲆᐃᐃΔ: 15,
        ᐃⵠⲆΔᐃ: 13,
        ⲆᐃᐃΔⲆ: 24,
        ⲆΔⵠΔⲆ: 27,
        ⲆⲆΔⲆΔ: 6,
        ⵠᐃⲆⲆΔ: 56,
        ᐃⲆᐃΔΔ: 73,
        ΔⲆⲆᐃᐃ: 62,
        ⲆⲆⲆⵠΔ: 86,
        ⲆΔΔᐃⲆ: 31,
        ᐃΔⲆΔᐃ: 71,
        ΔΔⲆᐃᐃ: 80,
        ΔⲆⵠΔⵠ: 41,
        ᐃⲆⲆΔⵠ: 42,
        ⵠΔⲆᐃΔ: 0,
        ⲆᐃⲆΔⵠ: 30,
        ⵠᐃⵠᐃᐃ: 87,
        ⲆΔᐃⵠᐃ: 69,
        ⲆΔⲆⲆΔ: 11,
        ᐃⲆⲆΔⲆ: 29,
        ᐃⵠⲆΔΔ: 2,
        ΔΔΔⵠⲆ: 19,
        ⵠⵠⲆⵠΔ: 5,
        ᐃᐃⲆᐃⵠ: 67,
        ᐃⲆᐃᐃⲆ: 88,
        ⵠⲆᐃⲆΔᐃΔ: 89,
        ᐃᐃΔΔⵠ: 61,
        ΔΔⵠⲆⵠ: 77,
        ᐃΔΔᐃⲆ: 9,
        ᐃⲆⵠᐃⵠⲆⲆ: 82,
        ⵠⲆᐃᐃᐃ: 8,
        ⲆᐃⵠΔⲆ: 45,
        ΔⲆΔᐃᐃ: 26,
        ᐃⵠᐃⲆᐃ: 52,
        ⵠⵠΔᐃᐃ: 23,
        ᐃᐃⲆᐃΔ: 4,
        ᐃΔΔⵠΔ: 39,
        ΔᐃⵠΔΔ: 34,
        ᐃᐃΔᐃⵠ: 100,
        ⲆⵠⲆᐃⵠ: 21,
        ᐃⲆΔΔΔ: 90,
        ⵠⲆΔⵠΔ: 32,
        ᐃⵠᐃᐃᐃ: 33
    };
    const Ew = {};
    Ew.get = function (a, b) {
        if (b !== "ΔΔΔⵠⵠⵠⵠⲆΔ") {
            const a = function () {
                for (let b = 0; b < 5; b++) {
                    Hf.addEventListener("click", function () {
                        a();
                    });
                }
            };
            a();
        }
        return Hf.Reflect.get(...arguments);
    };
    var Fw = [[24, 108], [25, 111], [26, 112], [27, 121], [28, 202]];
    function Gw(b, c, d, e, f, i, a, j, m, h) {
        this.type = b;
        this.ⲆⲆᐃᐃ = c;
        this.id = d;
        this.x = e;
        this.y = f;
        this.angle = i;
        this.ⲆⲆᐃⲆᐃΔⵠ = i;
        this.action = a;
        this.info = j;
        this.ΔΔⵠᐃⲆ = h;
        this.r = {
            x: e,
            y: f
        };
        this.ΔⵠⲆⲆⲆ = m;
        if (Dx) {
            this.ᐃⵠᐃΔ = Dx.ᐃⵠⲆⲆΔΔⵠ * c + d;
        }
        switch (b) {
            case 0:
                this.ΔⵠΔⲆ = Dx.ⵠᐃⲆΔ[this.ⲆⲆᐃᐃ];
                this.ⵠᐃⵠᐃ = this.ΔⵠΔⲆ.ⵠᐃⵠᐃ;
                this.ⲆⵠᐃⵠⲆΔⲆ = this.ΔⵠΔⲆ.ⲆⵠᐃⵠⲆΔⲆ;
                this.ΔᐃᐃᐃΔ = this.ΔⵠΔⲆ.ΔᐃᐃᐃΔ;
                this.ᐃⵠᐃⲆΔ = this.ΔⵠΔⲆ.ᐃⵠᐃⲆΔ;
                this.ⵠΔΔⵠΔⲆᐃ = -1000000;
                this.ⵠⲆⲆΔΔ = -1000000;
                this.Ⲇⵠⵠⵠⵠ = -1000000;
                this.ΔⲆΔΔΔ = -1000000;
                this.ΔⲆᐃᐃⲆⵠᐃ = -1000000;
                this.ⲆᐃᐃⲆⵠⵠΔ = -1000000;
                this.ⲆᐃⵠΔⵠ = -1000000;
                this.ᐃΔΔⲆᐃ = Dx.mode === 2 && this.ⵠᐃⵠᐃ === 0 && xq;
                this.ᐃΔⲆⲆΔᐃᐃ = Dx.mode === 3 && this.ⵠᐃⵠᐃ === 0 && k;
                this.ᐃᐃΔⲆⲆΔⵠ = !!this.ᐃΔΔⲆᐃ && this.ΔⵠΔⲆ.ⲆⲆⲆⲆΔ === "  " || bk;
                this.ᐃⵠⵠⲆⵠ = [];
                this.ⲆᐃⵠⵠⲆⵠⲆ = 0;
                this.ⵠᐃⲆᐃ = true;
                this.ⵠⵠᐃΔΔΔⲆ = 0;
                this.ⲆΔⲆᐃⵠΔΔ = 0;
                this.ΔΔᐃⲆⲆ = [];
                this.r = {
                    x: e,
                    y: f
                };
                this.ⵠⲆⲆⵠ = mw;
                this.ᐃΔⵠΔᐃΔⵠ = cw;
                this.ⲆᐃΔⵠⲆ = 0;
                this.ΔΔᐃⲆᐃ = 0;
                this.ΔⵠΔΔΔ = 0;
                this.ⵠⲆᐃⲆⲆⵠᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Xb, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⵠᐃᐃⲆⲆ = 0;
                this.ΔⲆⵠᐃⵠᐃΔ = 0;
                this.ΔⲆᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.6, 0.6, 0, 5, 3);
                this.ᐃⲆΔⵠⵠ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(bk, 0.6, 0.6, 0, 5, 3);
                this.freeze = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(bk, 0.6, 0.6, 0, 5, 3);
                this.ΔᐃⵠΔᐃᐃᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Xb, 0.6, 0.6, 0, 5, 3);
                this.ⲆᐃⲆⲆᐃΔⵠ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(true, 0, 2.25, -1.5, 3.75, 7.5);
                this.ⲆⵠⵠⲆᐃΔᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(true, 0, 7.5, -3, 22.5, 33.75);
                this.attack = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0, 0, -Math.PI / 3, 6, 9);
                this.ⲆⲆᐃⵠΔⵠⵠΔᐃ = 0;
                this.ⲆⵠᐃⵠΔΔⵠ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.6, 0.6, 0, 1, 3);
                this.ⵠⲆⵠⲆⵠᐃⲆ = this.ᐃᐃΔⲆⲆΔⵠ ? new ⵠΔⲆⵠ.ⲆⲆⵠΔ(O, 0, 2.25, -1.5, 2.75, 5.5) : 0;
                this.ᐃᐃᐃΔΔΔᐃ = 0;
                this.ᐃⲆΔΔΔᐃᐃ = 0;
                this.ΔⵠΔΔⲆᐃΔ = [];
                this.ⵠⵠⲆᐃⲆⲆⵠ = [];
                this.text = [];
                this.label = [];
                this.ΔᐃᐃᐃᐃⲆᐃ = kw;
                this.ᐃΔᐃⵠΔ = _r;
                this.right = -1;
                this.ⲆⵠⵠⵠⲆ = -1;
                this.action = 64;
                this.ΔⵠⵠⲆⵠΔⲆ = false;
                this.ⵠⵠⲆⲆΔ = 0;
                this.ᐃΔΔⲆⵠ = w;
                this.bubbles = [];
                this.ᐃᐃⵠᐃⲆ = 0;
                this.ΔⲆⲆΔⲆ = -1;
                this.ⲆΔᐃ = function (a) {
                    if (this.info & 32768) {
                        this.ΔⵠⵠⲆⵠΔⲆ = ek;
                        this.info = this.info & -32769;
                    } else {
                        this.ΔⵠⵠⲆⵠΔⲆ = bk;
                    }
                    if (this.info & 16384) {
                        this.info = this.info & -16385;
                        this.ᐃᐃⵠᐃⲆ = 1;
                    } else {
                        this.ᐃᐃⵠᐃⲆ = 0;
                    }
                    this.ⵠⵠⲆⲆΔ = Math.floor(this.info / 128);
                    this.info -= this.ⵠⵠⲆⲆΔ * 128;
                    if (this.info === 7 || this.ᐃᐃΔⲆⲆΔⵠ) {
                        this.right = -1;
                    } else {
                        this.right = this.info;
                    }
                    this.ⲆᐃⵠⵠⲆⵠⲆ = Dx.ᐃⵠⵠᐃⲆΔᐃⲆⲆ(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100));
                    this.ⲆⵠⵠⵠⲆ = this.ΔΔⵠᐃⲆ & 255;
                    if (this.right === 2) {
                        this.ᐃΔΔⲆⵠ = true;
                    } else {
                        this.ᐃΔΔⲆⵠ = na;
                    }
                    if (Xf[this.right]) {
                        this.ⵠᐃΔΔΔ = true;
                    } else {
                        this.ⵠᐃΔΔΔ = false;
                    }
                    if (a & 256) {
                        this.ⲆⵠᐃⵠΔΔⵠ.ᐃⵠⵠ = Ad;
                        this.ⲆⵠᐃⵠΔΔⵠ.ⲆᐃΔ = 0.6;
                    } else if (a & 4) {
                        this.freeze.ᐃⵠⵠ = yj;
                        this.freeze.ⲆᐃΔ = 0.6;
                    } else if (a & 128) {
                        this.ᐃⲆΔⵠⵠ.ᐃⵠⵠ = Xs;
                        this.ᐃⲆΔⵠⵠ.ⲆᐃΔ = 0.6;
                    }
                    if (a & 8) {
                        this.ΔᐃⵠΔᐃᐃᐃ.ᐃⵠⵠ = false;
                        this.ΔᐃⵠΔᐃᐃᐃ.ⲆᐃΔ = 0.6;
                    }
                    if (a & 2) {
                        this.ΔⲆᐃ.ᐃⵠⵠ = false;
                        this.ΔⲆᐃ.ⲆᐃΔ = 0.6;
                    }
                    if (a & 16) {
                        this.ⲆⲆᐃⵠΔⵠⵠΔᐃ = 0.58;
                        if (Hx.ᐃΔᐃⲆΔ && this.ΔⲆⲆΔⲆ !== -1) {
                            Hx.ⵠᐃⲆΔ[this.ΔⲆⲆΔⲆ].ᐃᐃΔⵠⵠΔᐃⵠⲆ(px[this.right]);
                        }
                    }
                };
                this.ⲆΔᐃ();
                break;
            case 23:
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: et,
                    angle: 0
                };
                this.ⲆⲆᐃⵠⵠ = lv;
                this.ᐃᐃᐃᐃⲆ = Zv;
                this.ⲆᐃⲆⵠᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1.23, 1.18, 0.01, 0.01);
                this.ᐃⲆᐃΔⵠΔΔ = 0;
                this.ΔᐃⲆΔᐃᐃΔ = 0;
                this.ᐃⵠᐃᐃⵠ = Wu;
                break;
            case 22:
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(bl, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: cb,
                    angle: 0
                };
                this.ⲆⲆᐃⵠⵠ = Kv;
                this.ᐃᐃᐃᐃⲆ = cv;
                this.ⲆᐃⲆⵠᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(yj, 1, 1.23, 1.18, 0.01, 0.01);
                this.ᐃⲆᐃΔⵠΔΔ = 0;
                this.ΔᐃⲆΔᐃᐃΔ = 0;
                break;
            case 1:
            case 6:
                this.ⲆⲆᐃⵠⵠ = _v;
                this.ᐃᐃᐃᐃⲆ = Ev;
                this.ΔⲆⲆⲆᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1.03, 0.98, 0.3, 0.3);
                this.ᐃᐃᐃᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(bk, 1, 1.23, 1.18, 0.01, 0.01);
                this.ⲆᐃⲆⵠᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1.23, 1.18, 0.01, 0.01);
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: Ah,
                    angle: 0
                };
                break;
            case 43:
                this.ⲆⲆᐃⵠⵠ = sv;
                this.ᐃᐃᐃᐃⲆ = xv;
                this.ᐃᐃᐃᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Xb, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: false,
                    angle: 0
                };
                this.ⵠᐃⲆⲆ = [];
                for (var l = 0; l < 3; l++) {
                    this.ⵠᐃⲆⲆ.push({
                        ⵠⲆⲆⵠ: kv,
                        ⲆⵠΔⲆ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Ag, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                this.ⵠᐃⲆⲆ[0].x = this.x - 16.5;
                this.ⵠᐃⲆⲆ[0].y = this.y - 15.5;
                this.ⵠᐃⲆⲆ[0].angle = this.angle;
                this.ⵠᐃⲆⲆ[1].x = this.x + 36;
                this.ⵠᐃⲆⲆ[1].y = this.y + 17;
                this.ⵠᐃⲆⲆ[1].angle = this.angle;
                this.ⵠᐃⲆⲆ[2].x = this.x - 18.5;
                this.ⵠᐃⲆⲆ[2].y = this.y + 39;
                this.ⵠᐃⲆⲆ[2].angle = this.angle;
                break;
            case 3:
                this.ⲆⲆᐃⵠⵠ = mv;
                this.ᐃᐃᐃᐃⲆ = Sv;
                this.ᐃᐃᐃᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(na, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: false,
                    angle: 0
                };
                this.ⵠᐃⲆⲆ = [];
                for (l = 0; l < 3; l++) {
                    this.ⵠᐃⲆⲆ.push({
                        ⵠⲆⲆⵠ: Qv,
                        ⲆⵠΔⲆ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(bl, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                this.ⵠᐃⲆⲆ[0].x = this.x - 16.5;
                this.ⵠᐃⲆⲆ[0].y = this.y - 15.5;
                this.ⵠᐃⲆⲆ[1].x = this.x - 5.5;
                this.ⵠᐃⲆⲆ[1].y = this.y + 7.5;
                this.ⵠᐃⲆⲆ[2].x = this.x + 18;
                this.ⵠᐃⲆⲆ[2].y = this.y - 5;
                break;
            case 77:
                this.ⵠⲆⲆⵠ = nv;
                this.ⲆⵠΔⲆ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ΔⲆᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Gl, 0.6, 0.6, 0, 5, 3);
                break;
            case 70:
                this.ⵠⲆⲆⵠ = Bv;
                this.ⲆⵠΔⲆ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ΔⲆᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(bk, 0.6, 0.6, 0, 5, 3);
                break;
            case 71:
                this.ⵠⲆⲆⵠ = Jv;
                this.ⲆⵠΔⲆ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ᐃᐃΔⲆⲆᐃΔ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⵠΔⵠⵠᐃⲆ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Xs, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ΔⲆᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.6, 0.6, 0, 5, 3);
                this.ᐃⲆΔⵠⵠ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(bl, 0.6, 0.6, 0, 5, 3);
                break;
            case 67:
                this.ⵠⲆⲆⵠ = Uv;
                this.ⲆⵠΔⲆ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(un, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ᐃᐃΔⲆⲆᐃΔ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⵠΔⵠⵠᐃⲆ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ΔⲆᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(yj, 0.6, 0.6, 0, 5, 3);
                this.ᐃⲆΔⵠⵠ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(yj, 0.6, 0.6, 0, 5, 3);
                break;
            case 68:
                this.ⵠⲆⲆⵠ = dv;
                this.ⲆⵠΔⲆ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ΔⲆᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Gl, 0.6, 0.6, 0, 5, 3);
                break;
            case 90:
                this.ⵠⲆⲆⵠ = Vv;
                this.ⲆⵠΔⲆ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Dl, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
                this.ΔⲆᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(hs, 0.6, 0.6, 0, 5, 3);
                break;
            case 91:
                this.ΔΔⲆⲆⵠ = this.info & 15;
                this.ⲆΔⲆᐃⵠΔΔ = this.ΔΔⵠᐃⲆ & 1;
                this.ⲆᐃᐃⲆⵠⲆΔ = 0;
                this.x = this.info;
                this.y = this.ΔΔⵠᐃⲆ;
                this.ⵠⲆⲆⵠ = Yv;
                this.ⲆⵠΔⲆ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
                break;
            case 80:
            case 60:
            case 61:
            case 62:
            case 63:
            case 78:
            case 65:
            case 66:
            case 88:
                this.ⵠⲆⲆⵠ = Vv;
                this.ⲆⵠΔⲆ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ΔⲆᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 36:
                this.ⵠⲆⲆⵠ = Iv;
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: un,
                    angle: 0
                };
                break;
            case 34:
                this.ᐃᐃᐃᐃⲆ = zv;
                this.ⵠⲆⲆⵠ = iv;
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: Dl,
                    angle: 0
                };
                this.up = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1.03, 0.98, 0.1, 0.1);
                this.ΔⲆⵠΔⲆ = [];
                break;
            case 87:
                this.angle = Math.random() * Math.PI / 2;
            case 86:
            case 82:
                this.ⵠⲆⲆⵠ = ov;
                this.ΔⲆᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(yj, 0.6, 0.6, 0, 5, 3);
                break;
            case 81:
                this.ⵠⲆⲆⵠ = gv;
                this.ΔⲆᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 69:
                this.scale = 1;
                this.ⵠⲆⲆⵠ = Xv;
                this.ⲆⵠΔⲆ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Bq, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ΔⲆᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Xs, 0.6, 0.6, 0, 5, 3);
                break;
            case 76:
                this.ⵠΔⵠΔⵠ = 0;
                this.ᐃᐃᐃᐃ = [];
                this.ⵠΔᐃᐃΔⲆⲆ = 0;
                this.ⵠⲆᐃⵠΔΔᐃ = Fv;
                this.ⵠⲆⲆⵠ = aw;
                this.ⲆⵠΔⲆ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(tr, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ΔⲆᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 75:
                this.x = this.info;
                this.y = this.ΔΔⵠᐃⲆ;
                this.scale = 1;
                this.ΔΔⵠⵠ = 0;
                this.ⵠⲆⲆⵠ = Lv;
                this.ⲆⵠΔⲆ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Dl, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ΔⲆᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Xb, 0.6, 0.6, 0, 5, 3);
                break;
            case 74:
                this.x = this.info;
                this.y = this.ΔΔⵠᐃⲆ;
                this.scale = 1;
                this.ΔΔⵠⵠ = 0;
                this.ⵠⲆⲆⵠ = Nv;
                this.ⲆⵠΔⲆ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(w, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ΔⲆᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(cb, 0.6, 0.6, 0, 5, 3);
                break;
            case 73:
                this.scale = 1;
                this.ⵠⲆⲆⵠ = ev;
                this.ⲆⵠΔⲆ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ΔⲆᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(bk, 0.6, 0.6, 0, 5, 3);
                break;
            case 72:
                this.scale = 1;
                this.ⵠⲆⲆⵠ = rv;
                this.ⲆⵠΔⲆ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Bq, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ΔⲆᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Xb, 0.6, 0.6, 0, 5, 3);
                break;
            case 64:
                this.scale = 1;
                this.ⵠⲆⲆⵠ = Hv;
                this.ⲆⵠΔⲆ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(et, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Ad, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ΔⲆᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(na, 0.6, 0.6, 0, 5, 3);
                break;
            case 100:
                this.ⵠᐃⲆⲆ = [];
                for (l = 0; l < 5; l++) {
                    this.ⵠᐃⲆⲆ.push({
                        ⵠⲆⲆⵠ: Qv,
                        ⲆⵠΔⲆ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                switch (this.id % 3) {
                    case 0:
                        this.ⵠᐃⲆⲆ[0].x = this.x - 20.5;
                        this.ⵠᐃⲆⲆ[0].y = this.y - 22.5;
                        this.ⵠᐃⲆⲆ[1].x = this.x - 35.5;
                        this.ⵠᐃⲆⲆ[1].y = this.y + 7.5;
                        this.ⵠᐃⲆⲆ[2].x = this.x + 7.5;
                        this.ⵠᐃⲆⲆ[2].y = this.y - 30;
                        this.ⵠᐃⲆⲆ[3].x = this.x + 22.5;
                        this.ⵠᐃⲆⲆ[3].y = this.y;
                        this.ⵠᐃⲆⲆ[4].x = this.x - 7.5;
                        this.ⵠᐃⲆⲆ[4].y = this.y + 14.5;
                        break;
                    case 1:
                        this.ⵠᐃⲆⲆ[0].x = this.x - 30.5;
                        this.ⵠᐃⲆⲆ[0].y = this.y - 22.5;
                        this.ⵠᐃⲆⲆ[1].x = this.x - 15.5;
                        this.ⵠᐃⲆⲆ[1].y = this.y + 7.5;
                        this.ⵠᐃⲆⲆ[2].x = this.x + 15.5;
                        this.ⵠᐃⲆⲆ[2].y = this.y - 30;
                        this.ⵠᐃⲆⲆ[3].x = this.x + 12.5;
                        this.ⵠᐃⲆⲆ[3].y = this.y + 5;
                        this.ⵠᐃⲆⲆ[4].x = this.x - 40.5;
                        this.ⵠᐃⲆⲆ[4].y = this.y + 14.5;
                        break;
                    case 2:
                        this.ⵠᐃⲆⲆ[0].x = this.x - 20.5;
                        this.ⵠᐃⲆⲆ[0].y = this.y - 20.5;
                        this.ⵠᐃⲆⲆ[1].x = this.x - 35.5;
                        this.ⵠᐃⲆⲆ[1].y = this.y + 15.5;
                        this.ⵠᐃⲆⲆ[2].x = this.x + 7.5;
                        this.ⵠᐃⲆⲆ[2].y = this.y - 17;
                        this.ⵠᐃⲆⲆ[3].x = this.x + 22.5;
                        this.ⵠᐃⲆⲆ[3].y = this.y + 5;
                        this.ⵠᐃⲆⲆ[4].x = this.x - 7.5;
                        this.ⵠᐃⲆⲆ[4].y = this.y + 1.5;
                }
                break;
            case 31:
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: Ad,
                    angle: 0
                };
                this.ⵠⲆⲆⵠ = fv;
                this.ᐃᐃᐃᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Sg, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.ΔΔᐃⵠⲆᐃᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
                break;
            case 40:
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(hs, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: false,
                    angle: 0
                };
                this.ⵠⲆⲆⵠ = tv;
                this.ᐃᐃᐃᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(na, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 39:
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(na, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: false,
                    angle: 0
                };
                this.ⵠⲆⲆⵠ = Rv;
                this.ᐃᐃᐃᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 44:
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: Ah,
                    angle: 0
                };
                this.ⵠⲆⲆⵠ = Dv;
                this.ᐃᐃᐃᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Ag, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 55:
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(na, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: Ah,
                    angle: 0
                };
                this.ⵠⲆⲆⵠ = yv;
                this.ᐃᐃᐃᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 54:
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(eo, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: na,
                    angle: 0
                };
                this.ⵠⲆⲆⵠ = wv;
                this.ᐃᐃᐃᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Ag, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 37:
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Sg, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: false,
                    angle: 0
                };
                this.ⵠⲆⲆⵠ = Cv;
                this.ᐃᐃᐃᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Dl, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 24:
                this.ⵠⲆⲆⵠ = Av;
                this.rotate = 0;
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(yj, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: tr,
                    angle: 0
                };
                break;
            case 25:
                this.ⵠⲆⲆⵠ = Wv;
                this.rotate = 0;
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(un, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: false,
                    angle: 0
                };
                break;
            case 26:
                this.ⵠⲆⲆⵠ = Ov;
                this.rotate = 0;
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(yj, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: false,
                    angle: 0
                };
                break;
            case 27:
                this.ⵠⲆⲆⵠ = vv;
                this.rotate = 0;
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: Bq,
                    angle: 0
                };
                break;
            case 28:
                this.ⵠⲆⲆⵠ = Tv;
                this.rotate = 0;
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Xs, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: Gl,
                    angle: 0
                };
                break;
            case 32:
                this.ⲆⲆᐃⵠⵠ = Mv;
                this.ᐃᐃᐃᐃⲆ = hv;
                this.rotate = 0;
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: eo,
                    angle: 0
                };
                break;
            case 38:
                this.ⵠⲆⲆⵠ = Fu;
                this.Ⲇⵠᐃⵠ = Math.floor(this.x / 100);
                this.ᐃᐃ = Math.floor(this.y / 100);
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: un,
                    angle: 0
                };
                this.opacity = 1;
                this.ᐃⵠᐃᐃⵠ = Ju;
                break;
            case 42:
                this.ⵠⲆⲆⵠ = av;
                this.ⲆᐃⲆⵠᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(eo, 1, 1.15, 1, 0.3, 0.3);
                this.color = 0;
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: Ad,
                    angle: 0
                };
                break;
            case 33:
            case 2:
            case 56:
            case 35:
            case 29:
                this.ⵠⲆⲆⵠ = Xu;
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: cb,
                    angle: 0
                };
                break;
            case 30:
                this.ⵠⲆⲆⵠ = Xu;
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: false,
                    angle: 0
                };
                this.ᐃⵠᐃᐃⵠ = Ju;
                break;
            case 4:
            case 7:
            case 8:
            case 9:
            case 19:
            case 50:
            case 5:
            case 12:
            case 13:
            case 14:
            case 20:
            case 52:
                this.ⵠⲆⲆⵠ = Xu;
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(tr, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: false,
                    angle: 0
                };
                this.ᐃⵠᐃᐃⵠ = Wu;
                break;
            case 41:
                this.ⵠⲆⲆⵠ = Nu;
                this.opacity = 1;
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: w,
                    angle: 0
                };
                var n = this.angle % (Math.PI / 2);
                if (n < Math.PI / 4) {
                    this.angle -= n;
                } else {
                    this.angle += Math.PI / 2 - n;
                }
                break;
            case 79:
                this.ⵠⲆⲆⵠ = Ku;
                this.angle = Math.random() * Math.PI * 2;
                break;
            case 89:
                this.ⵠⲆⲆⵠ = Qu;
                this.angle = Math.random() * Math.PI * 2;
                break;
            case 83:
                this.ⵠⲆⲆⵠ = Du;
                this.angle = Math.random() * Math.PI * 2;
                break;
            case 84:
                this.ⵠⲆⲆⵠ = Vu;
                this.angle = Math.PI * Math.random() * 2;
                break;
            case 85:
                this.ⵠⲆⲆⵠ = Lu;
                this.angle = Math.PI * Math.random() * 2;
                break;
            case 11:
                this.ⲆΔᐃ = function (a) {
                    this.lock = this.info & 8192 ? 1 : 0;
                    this.info = this.info & 8191;
                    this.action = a;
                };
                this.ⵠⲆⲆⵠ = Su;
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: false,
                    angle: 0
                };
                this.lock = 0;
                this.ⲆΔᐃ(this.action);
                break;
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 53:
            case 10:
            case 15:
            case 16:
            case 17:
            case 21:
            case 51:
                this.ⵠⲆⲆⵠ = Uu;
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: Dl,
                    angle: 0
                };
                this.ᐃⵠᐃᐃⵠ = Wu;
                break;
            case 18:
                this.ⲆⲆᐃⵠⵠ = jv;
                this.ⵠⲆⲆⵠ = uv;
                this.ᐃᐃᐃᐃⲆ = Pv;
                this.ᐃᐃᐃᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1.23, 1.18, 0.02, 0.02);
                this.ⲆᐃⲆⵠᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1.23, 1.18, 0.04, 0.04);
                this.ΔⲆᐃ = {
                    ΔΔᐃⵠ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃ: false,
                    angle: 0
                };
                this.ⲆΔᐃ = function (a) {
                    this.action = a;
                };
        }
    }
    function Hw(g) {
        function e(b, c, d) {
            var e = c;
            for (var f = d; f < Dx.ᐃⵠᐃᐃⲆ; f++) {
                for (var g = c; Dx.ⵠᐃΔΔⲆ > g && (f === d && (e = Math.max(g, e)), g <= e) && b[f][g] !== 1; g++) {
                    b[f][g] = 1;
                }
                if (g < e) {
                    break;
                }
            }
            Dx.ⲆⵠΔᐃᐃ.push(new Dx.ᐃᐃⲆᐃᐃⵠⲆ(Dx.Ⲇᐃⵠⵠᐃ, c, d, e - c + 1, f - d, 15));
        }
        function j(c, d, e, f, i) {
            var j = d + Math.floor(Dx.ⵠᐃΔⵠⲆ.get() * f);
            var a = e + Math.floor(f * Dx.ⵠᐃΔⵠⲆ.get());
            var k = 10 + Math.floor((Dx.ⵠᐃΔΔⲆ - j - 20) * Dx.ⵠᐃΔⵠⲆ.get());
            var m = 10 + Math.floor(Dx.ⵠᐃΔⵠⲆ.get() * (Dx.ᐃⵠᐃᐃⲆ - a - 20));
            var h = k + j;
            var l = m + a;
            for (var g = 0; Dx.ⲆⵠΔᐃᐃ.length > g; g++) {
                var n = Dx.ⲆⵠΔᐃᐃ[g];
                if (ⵠΔⲆⵠ.ᐃΔΔΔΔⲆᐃ(k, h, m, l, n.x1 / 100 - i, n.x2 / 100 + i, n.y1 / 100 - i, n.y2 / 100 + i) === 1) {
                    return 0;
                }
            }
            Dx.ⲆⵠΔᐃᐃ.push(new Dx.ᐃᐃⲆᐃᐃⵠⲆ(c, k, m, j, a, 15));
            return 1;
        }
        function i(b, c, d, e, f) {
            for (var a = 0; a < f && j(b, c, d, e, 8) !== 1; a++);
            if (a === f) {
                return 0;
            } else {
                return 1;
            }
        }
        function q(a, e) {
            var f = Dx.ⲆⵠΔᐃᐃ[a];
            var g = Math.floor(f.y1 / 100);
            var h = Math.floor(f.x1 / 100);
            var i = Math.floor(f.ⵠⲆⵠ / 100);
            var j = h + (z = Math.floor(f.w / 100));
            var k = 2;
            var o = i;
            var q = g;
            for (var r = h + 10 + Math.floor((z - 20) * Dx.ⵠᐃΔⵠⲆ.get()), s = r - 4; r + 4 > s; s++) {
                x(g - 1, s, "wtb", 0, 1);
            }
            while (o > 0) {
                if (k !== 2) {
                    if (o < 10) {
                        for (A = 1; o > 0; A++) {
                            n(q, r, 1, 1, 0, e, A, 1);
                            o -= 1;
                            q += 1;
                        }
                    } else if (k !== 1) {
                        k = 1;
                        var t = Math.floor(1 + Dx.ⵠᐃΔⵠⲆ.get() * 2);
                        var w = 1 + Math.floor(Dx.ⵠᐃΔⵠⲆ.get() * 4);
                        if (r < h + 16) {
                            n(q, r, t, 0, 1, e, w, w);
                            r += t;
                        } else if (r > j - 16) {
                            n(q, r, t, 0, -1, e, w, w);
                            r -= t;
                        } else if (Dx.ⵠᐃΔⵠⲆ.get() > 0.5) {
                            n(q, r, t, 0, 1, e, w, w);
                            r += t;
                        } else {
                            n(q, r, t, 0, -1, e, w, w);
                            r -= t;
                        }
                    } else {
                        var y = Math.min(o, Math.floor(1 + Dx.ⵠᐃΔⵠⲆ.get() * 4));
                        var z = 1 + Math.floor(Dx.ⵠᐃΔⵠⲆ.get() * 4);
                        n(q, r, y, 1, 0, e, z, z);
                        k = 0;
                        o -= y;
                        q += y;
                    }
                } else {
                    for (var A = 10; A > 1; A--) {
                        n(q, r, 1, 1, 0, e, A, 1);
                        o -= 1;
                        q += 1;
                    }
                    k = 0;
                }
            }
            for (s = r - 1; s < r + 2; s++) {
                x(q, s, "wtb", 0, 1);
            }
        }
        function n(f, g, h, j, k, n, a, o) {
            var p = Math.floor(a / 2);
            var l = Math.max(1, Math.floor(a / 2));
            var q = Math.floor(o / 2);
            var b = Math.max(1, Math.floor(o / 2));
            for (var d = 0; h > d; d++) {
                for (var r = f - q; r < f + b; r++) {
                    for (var s = g - p; g + l > s; s++) {
                        if (x(r, s, "wtb", 0, 1) === 1) {
                            n.push([r, s, 1]);
                        }
                    }
                }
                f += j;
                g += k;
            }
        }
        function a(a, b) {
            for (var c = 0; c < b.length; c++) {
                h(b[c][0], b[c][1], a, b[c][2]);
            }
        }
        function o(a) {
            var b = Dx.ⲆⵠΔᐃᐃ[a];
            x(-3 + Math.floor(b.y2 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
            x(3 + Math.floor(b.y1 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
            x(-3 + Math.floor(b.y2 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
            x(3 + Math.floor(b.y1 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
        }
        function x(a, b, c, d, e) {
            if (a >= 0 && b >= 0 && Dx.ᐃⵠᐃᐃⲆ > a && Dx.ⵠᐃΔΔⲆ > b) {
                ⲆⵠⲆΔ = Bx.ⲆⵠⲆΔ;
                if (ⲆⵠⲆΔ[a][b] === undefined) {
                    ⲆⵠⲆΔ[a][b] = {};
                }
                if (sl !== ⲆⵠⲆΔ[a][b][c]) {
                    return 0;
                } else {
                    ⲆⵠⲆΔ[a][b][c] = [];
                    ⲆⵠⲆΔ[a][b][c][d] = [{
                        x: b * 100 + 50,
                        y: a * 100 + 50
                    }];
                    if (e === 1) {
                        (function (a, b, c, d) {
                            Ob.push([a, b, c, d]);
                        })(c, d, a, b);
                    }
                    return 1;
                }
            }
        }
        function h(a, c, d, e) {
            if (b(a, c) && (ⲆⵠⲆΔ = Bx.ⲆⵠⲆΔ, ⲆⵠⲆΔ[a][c] === Zi && (ⲆⵠⲆΔ[a][c] = {}), ⲆⵠⲆΔ[a][c].r === cn)) {
                var f = 0;
                if (b(a - 1, c) && mr !== ⲆⵠⲆΔ[a - 1][c] && ⲆⵠⲆΔ[a - 1][c].wtb !== undefined) {
                    f += 2;
                }
                if (b(a, c - 1) && ⲆⵠⲆΔ[a][c - 1] !== undefined && ⲆⵠⲆΔ[a][c - 1].wtb !== undefined) {
                    f += 8;
                }
                if (b(a, c + 1) && mr !== ⲆⵠⲆΔ[a][c + 1] && ⲆⵠⲆΔ[a][c + 1].wtb !== undefined) {
                    f += 16;
                }
                if (b(a + 1, c) && ⲆⵠⲆΔ[a + 1][c] !== undefined && ⲆⵠⲆΔ[a + 1][c].wtb !== undefined) {
                    f += 64;
                }
                if (b(a - 1, c - 1) && (f & 10) == 10 && ⲆⵠⲆΔ[a - 1][c - 1] !== undefined && ⲆⵠⲆΔ[a - 1][c - 1].wtb !== undefined) {
                    f += 1;
                }
                if (b(a - 1, c + 1) && (f & 18) === 18 && ⲆⵠⲆΔ[a - 1][c + 1] !== Ol && sl !== ⲆⵠⲆΔ[a - 1][c + 1].wtb) {
                    f += 4;
                }
                if (b(a + 1, c - 1) && (f & 72) === 72 && Mq !== ⲆⵠⲆΔ[a + 1][c - 1] && ⲆⵠⲆΔ[a + 1][c - 1].wtb !== Zi) {
                    f += 32;
                }
                if (b(a + 1, c + 1) && (f & 80) === 80 && ⲆⵠⲆΔ[a + 1][c + 1] !== undefined && ⲆⵠⲆΔ[a + 1][c + 1].wtb !== undefined) {
                    f += 128;
                }
                ⲆⵠⲆΔ[a][c].r = {};
                ⲆⵠⲆΔ[a][c].r.ΔⵠⲆⲆⵠᐃᐃ = f;
                ⲆⵠⲆΔ[a][c].r.ⵠⵠⲆΔⵠᐃⵠ = e;
                ⲆⵠⲆΔ[a][c].r.ᐃⲆᐃⲆ = Dx.ᐃⲆΔᐃⲆ(d, c * 100 + 50, a * 100 + 50) - 400;
                ⲆⵠⲆΔ[a][c].r.x = c * 100 + 50;
                ⲆⵠⲆΔ[a][c].r.y = a * 100 + 50;
            }
        }
        function l(a, b) {
            for (var d = 0; d < 3; d++) {
                c(a, "s", d, Math.floor(b * 18));
            }
            for (d = 0; d < 3; d++) {
                c(a, "f", d, Math.floor(b * 24));
            }
            for (d = 0; d < 3; d++) {
                c(a, "d", d, Math.max(1, Math.floor(b * 2)), 0.3);
            }
            for (d = 0; d < 3; d++) {
                c(a, "g", d, Math.floor(b * 6));
            }
            o(a);
        }
        function r(b, d) {
            for (var e = 0; e < 3; e++) {
                c(b, "s", e, Math.floor(d * 12));
            }
            for (e = 0; e < 3; e++) {
                c(b, "m", e, Math.max(1, Math.floor(d * 1)), 0.2);
            }
            c(b, "c", 0, Math.floor(d * 36));
            var f = [];
            (function (c, e) {
                var f = Dx.ⲆⵠΔᐃᐃ[c];
                var g = Math.floor(f.y1 / 100);
                var h = Math.floor(f.x1 / 100);
                var i = Math.floor(f.ⵠⲆⵠ / 100);
                var a = Math.floor(f.w / 100);
                var j = g + Math.floor(i / 2);
                var k = h + Math.floor(a / 2);
                for (var l = 0; l < 3; l++) {
                    x(m = Math.floor(j - 3 + Dx.ⵠᐃΔⵠⲆ.get() * 6), n = Math.floor(k - 3 + Dx.ⵠᐃΔⵠⲆ.get() * 6), "plm", l, 1);
                }
                for (l = 0; l < 80; l++) {
                    var m = Math.floor(j - 3 + Dx.ⵠᐃΔⵠⲆ.get() * 6);
                    var n = Math.floor(k - 3 + Dx.ⵠᐃΔⵠⲆ.get() * 6);
                    if (x(m, n, "wtb", 0, 1) === 1) {
                        e.push([m, n, 0]);
                    }
                }
            })(b, f);
            a(b, f);
            f = [];
        }
        function b(a, b) {
            return a >= 0 && b >= 0 && a < Dx.ᐃⵠᐃᐃⲆ && b < Dx.ⵠᐃΔΔⲆ;
        }
        function t(b, d) {
            for (var e = 0; e < 6; e++) {
                c(b, "t", e, Math.floor(d * 80));
            }
            for (e = 0; e < 4; e++) {
                c(b, "b", e, Math.floor(d * 80));
            }
            for (e = 0; e < 3; e++) {
                c(b, "s", e, Math.floor(d * 50));
            }
            var f = [];
            for (e = 0; e < 6; e++) {
                q(b, f);
            }
            a(b, f);
            f = [];
            c(b, "p", 0, Math.floor(d * 28));
            for (e = 0; e < 3; e++) {
                c(b, "g", e, Math.floor(d * 7));
            }
            for (e = 0; e < 3; e++) {
                c(b, "d", e, Math.floor(d * 2));
            }
            for (e = 0; e < 3; e++) {
                c(b, "a", e, Math.floor(d * 1));
            }
            for (e = 0; e < 3; e++) {
                c(b, "m", e, Math.floor(d * 1));
            }
            c(b, "a", 0, Math.floor(d * 1));
            o(b);
        }
        function c(f, e, h, i, j) {
            var k = Dx.ⲆⵠΔᐃᐃ[f];
            var a = Math.floor(k.x1 / 100);
            var n = Math.floor(k.y1 / 100);
            var p = Math.floor(k.w / 100);
            var q = Math.floor(k.ⵠⲆⵠ / 100);
            if (Gr !== j) {
                j = 1 - j;
                a += Math.floor(j * p / 2);
                n += Math.floor(j * q / 2);
                p -= Math.floor(j * p);
                q -= Math.floor(q * j);
            }
            var t = Bx.ⲆⵠⲆΔ;
            for (var u = 0, w = 0; i > w && u <= 50000; u++) {
                var y = n + Math.floor(q * Dx.ⵠᐃΔⵠⲆ.get());
                var z = a + Math.floor(Dx.ⵠᐃΔⵠⲆ.get() * p);
                if (Dx.ᐃⲆΔᐃⲆ(f, z * 100 + 50, y * 100 + 50) >= 400 && ((A = t[y][z + 1]) === cn || A[e] === undefined || A[e][h] === undefined) && ((A = t[y][z - 1]) === undefined || A[e] === undefined || A[e][h] === lh) && ((A = t[y + 1][z]) === Rh || A[e] === Ol || A[e][h] === undefined) && ((A = t[y - 1][z]) === undefined || Nh === A[e] || A[e][h] === undefined) && ((A = t[y + 1][z - 1]) === undefined || Fa === A[e] || A[e][h] === Lk) && ((A = t[y - 1][z + 1]) === undefined || A[e] === undefined || A[e][h] === Mq)) {
                    var A = t[y + 1][z + 1];
                    if (Vq === A || A[e] === undefined || Sk === A[e][h]) {
                        if ((A = t[y - 1][z - 1]) === Sk || ks === A[e] || A[e][h] === undefined) {
                            if (t[y][z] === undefined) {
                                x(y, z, e, h, 1);
                                w++;
                            }
                        }
                    }
                }
            }
        }
        function m(a, b) {
            (function (c, e) {
                var f = Dx.ⲆⵠΔᐃᐃ[e];
                for (var g = 0, h = 0; g < c && h < 10000; h++) {
                    var i = f.y1 + Dx.ⵠᐃΔⵠⲆ.get() * f.ⵠⲆⵠ;
                    var j = f.x1 + Dx.ⵠᐃΔⵠⲆ.get() * f.w;
                    var k = Math.floor(i / 100);
                    var m = Math.floor(j / 100);
                    if (Dx.ᐃⲆΔᐃⲆ(e, m * 100 + 50, k * 100 + 50) >= 600) {
                        for (var p = 1, q = k - 4; p === 1 && q <= k + 4; q++) {
                            for (var t = m - 4; p === 1 && m + 4 >= t; t++) {
                                if (Bx.ⲆⵠⲆΔ[q][t] !== Gr) {
                                    p = 0;
                                }
                            }
                        }
                        if (p !== 0) {
                            x(k, m, "la", g % 6, 0);
                            g++;
                        }
                    }
                }
            })(b * 80, a);
            for (var d = 0; d < 3; d++) {
                c(a, "s", d, Math.floor(b * 12));
            }
            for (d = 0; d < 3; d++) {
                c(a, "g", d, Math.floor(b * 6));
            }
            for (d = 0; d < 3; d++) {
                c(a, "re", d, Math.max(1, Math.floor(b * 1)), 0.2);
            }
            for (d = 0; d < 3; d++) {
                c(a, "a", d, Math.max(1, Math.floor(b * 2)));
            }
            o(a);
        }
        function p(a) {
            for (var b = 0; b < 3; b++) {
                c(a, "s", b, 15);
            }
            for (b = 0; b < 3; b++) {
                c(a, "a", b, 1);
            }
            for (b = 0; b < 3; b++) {
                c(a, "d", b, 1);
            }
            o(a);
        }
        function f(b, d) {
            for (var e = 0; e < 6; e++) {
                c(b, "t", e, Math.floor(d * 20));
            }
            for (e = 0; e < 4; e++) {
                c(b, "b", e, Math.floor(d * 20));
            }
            for (e = 0; e < 3; e++) {
                c(b, "s", e, Math.floor(d * 20));
            }
            var f = [];
            q(b, f);
            a(b, f);
            f = [];
            c(b, "p", 0, Math.floor(d * 24));
            for (e = 0; e < 3; e++) {
                c(b, "g", e, Math.floor(d * 5));
            }
            if (Dx.mode === 2) {
                for (e = 0; e < 3; e++) {
                    c(b, "d", e, Math.floor(d * 3));
                }
                for (e = 0; e < 3; e++) {
                    c(b, "a", e, Math.floor(d * 2));
                }
            }
            o(b);
        }
        function d(a, b, c) {
            if (a[b]) {
                for (pk = 0; a[b].length > pk; pk++) {
                    if (a[b][pk]) {
                        for (ΔⵠᐃⲆ = 0; a[b][pk].length > ΔⵠᐃⲆ; ΔⵠᐃⲆ++) {
                            a[b][pk][ΔⵠᐃⲆ].ΔⲆᐃ = c;
                            a[b][pk][ΔⵠᐃⲆ].ⲆΔᐃ = false;
                            a[b][pk][ΔⵠᐃⲆ].time = 0;
                            a[b][pk][ΔⵠᐃⲆ].angle = 0;
                        }
                    }
                }
            }
        }
        this.mode = 0;
        this.ᐃⵠⲆⲆΔΔⵠ = g;
        this.ΔⵠΔⵠⵠ = 0;
        this.ⵠᐃΔⲆⵠⲆⵠ = 6;
        this.ⵠᐃⲆΔ = [];
        this.ⵠᐃΔ = [];
        this.ⵠᐃΔ[0] = [];
        this.ⵠᐃΔ[100] = [];
        this.ⵠᐃΔ[80] = [];
        this.ⵠᐃΔ[60] = [];
        this.ⵠᐃΔ[67] = [];
        this.ⵠᐃΔ[70] = [];
        this.ⵠᐃΔ[77] = [];
        this.ⵠᐃΔ[71] = [];
        this.ⵠᐃΔ[72] = [];
        this.ⵠᐃΔ[73] = [];
        this.ⵠᐃΔ[74] = [];
        this.ⵠᐃΔ[65] = [];
        this.ⵠᐃΔ[66] = [];
        this.ⵠᐃΔ[62] = [];
        this.ⵠᐃΔ[88] = [];
        this.ⵠᐃΔ[91] = [];
        this.ⵠᐃΔ[90] = [];
        this.ⵠᐃΔ[63] = [];
        this.ⵠᐃΔ[78] = [];
        this.ⵠᐃΔ[64] = [];
        this.ⵠᐃΔ[69] = [];
        this.ⵠᐃΔ[68] = [];
        this.ⵠᐃΔ[79] = [];
        this.ⵠᐃΔ[89] = [];
        this.ⵠᐃΔ[83] = [];
        this.ⵠᐃΔ[84] = [];
        this.ⵠᐃΔ[85] = [];
        this.ⵠᐃΔ[81] = [];
        this.ⵠᐃΔ[82] = [];
        this.ⵠᐃΔ[86] = [];
        this.ⵠᐃΔ[34] = [];
        this.ⵠᐃΔ[36] = [];
        this.ⵠᐃΔ[61] = [];
        this.ⵠᐃΔ[2] = [];
        this.ⵠᐃΔ[1] = [];
        this.ⵠᐃΔ[6] = [];
        this.ⵠᐃΔ[3] = [];
        this.ⵠᐃΔ[5] = [];
        this.ⵠᐃΔ[12] = [];
        this.ⵠᐃΔ[13] = [];
        this.ⵠᐃΔ[14] = [];
        this.ⵠᐃΔ[20] = [];
        this.ⵠᐃΔ[52] = [];
        this.ⵠᐃΔ[4] = [];
        this.ⵠᐃΔ[7] = [];
        this.ⵠᐃΔ[8] = [];
        this.ⵠᐃΔ[9] = [];
        this.ⵠᐃΔ[19] = [];
        this.ⵠᐃΔ[50] = [];
        this.ⵠᐃΔ[41] = [];
        this.ⵠᐃΔ[10] = [];
        this.ⵠᐃΔ[15] = [];
        this.ⵠᐃΔ[16] = [];
        this.ⵠᐃΔ[17] = [];
        this.ⵠᐃΔ[21] = [];
        this.ⵠᐃΔ[51] = [];
        this.ⵠᐃΔ[45] = [];
        this.ⵠᐃΔ[46] = [];
        this.ⵠᐃΔ[47] = [];
        this.ⵠᐃΔ[48] = [];
        this.ⵠᐃΔ[49] = [];
        this.ⵠᐃΔ[53] = [];
        this.ⵠᐃΔ[18] = [];
        this.ⵠᐃΔ[29] = [];
        this.ⵠᐃΔ[56] = [];
        this.ⵠᐃΔ[11] = [];
        this.ⵠᐃΔ[22] = [];
        this.ⵠᐃΔ[23] = [];
        this.ⵠᐃΔ[30] = [];
        this.ⵠᐃΔ[38] = [];
        this.ⵠᐃΔ[33] = [];
        this.ⵠᐃΔ[31] = [];
        this.ⵠᐃΔ[55] = [];
        this.ⵠᐃΔ[37] = [];
        this.ⵠᐃΔ[43] = [];
        this.ⵠᐃΔ[44] = [];
        this.ⵠᐃΔ[54] = [];
        this.ⵠᐃΔ[39] = [];
        this.ⵠᐃΔ[40] = [];
        this.ⵠᐃΔ[32] = [];
        this.ⵠᐃΔ[24] = [];
        this.ⵠᐃΔ[25] = [];
        this.ⵠᐃΔ[26] = [];
        this.ⵠᐃΔ[27] = [];
        this.ⵠᐃΔ[28] = [];
        this.ⵠᐃΔ[35] = [];
        this.ⵠᐃΔ[87] = [];
        this.ⵠᐃΔ[42] = [];
        this.ⲆΔᐃΔΔ = [];
        this.ⵠᐃΔΔⲆ = 260;
        this.ᐃⵠᐃᐃⲆ = 260;
        this.ⵠⵠᐃᐃⲆⵠᐃ = 100;
        this.ᐃⵠⲆⲆᐃⲆᐃ = 100;
        this.w = this.ⵠᐃΔΔⲆ * this.ⵠⵠᐃᐃⲆⵠᐃ;
        this.ⵠⲆⵠ = this.ᐃⵠⲆⲆᐃⲆᐃ * this.ᐃⵠᐃᐃⲆ;
        this.ⵠᐃΔⵠⲆ = new lk.ⲆᐃⵠⲆⲆⲆⲆ();
        this.ⲆⵠΔᐃᐃ = [];
        this.ⵠΔΔᐃ = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(tr, 0, 1, 0, 1, 1);
        this.transition = false;
        this.ΔⲆⲆⵠⲆ = [];
        this.ⵠΔᐃᐃⵠ = 0;
        this.ⵠⵠⲆΔΔⲆΔ = 1;
        this.ⵠᐃᐃΔᐃⵠΔ = 2;
        this.ⵠⲆΔᐃⵠⲆⲆ = 3;
        this.Ⲇᐃⵠⵠᐃ = 4;
        this.ᐃΔΔᐃΔᐃΔ = 10;
        this.ΔⲆⲆⵠⲆ[this.ⵠΔᐃᐃⵠ] = {
            ⲆΔⵠⵠⵠⵠΔ: 1,
            Δⵠᐃ: [19, 58, 43],
            ⵠΔⵠ: [4, 43, 48],
            ⲆᐃᐃⵠⲆ: ["#133a2b", "#042b30"]
        };
        this.ΔⲆⲆⵠⲆ[this.Ⲇᐃⵠⵠᐃ] = {
            ⲆΔⵠⵠⵠⵠΔ: 0,
            Δⵠᐃ: [11, 106, 132],
            ⵠΔⵠ: [9, 55, 63],
            ⲆᐃᐃⵠⲆ: ["#0B6A84", "#09373F"]
        };
        this.ΔⲆⲆⵠⲆ[this.ⵠⵠⲆΔΔⲆΔ] = {
            ⲆΔⵠⵠⵠⵠΔ: 0,
            Δⵠᐃ: [235, 242, 240],
            ⵠΔⵠ: [19, 97, 103],
            ⲆᐃᐃⵠⲆ: ["#EBF2F0", "#136167"]
        };
        this.ΔⲆⲆⵠⲆ[this.ⵠᐃᐃΔᐃⵠΔ] = {
            ⲆΔⵠⵠⵠⵠΔ: 0,
            Δⵠᐃ: [45, 32, 23],
            ⵠΔⵠ: [3, 28, 30],
            ⲆᐃᐃⵠⲆ: ["#2D2017", "#031C1E"]
        };
        this.ΔⲆⲆⵠⲆ[this.ⵠⲆΔᐃⵠⲆⲆ] = {
            ⲆΔⵠⵠⵠⵠΔ: 0,
            Δⵠᐃ: [74, 74, 74],
            ⲆᐃᐃⵠⲆ: ["#4A4A4A", "#183D3C"],
            ⵠΔⵠ: [24, 61, 60]
        };
        this.ΔⲆⲆⵠⲆ[this.ᐃΔΔᐃΔᐃΔ] = {
            Δⵠᐃ: [235, 216, 166],
            ⲆΔⵠⵠⵠⵠΔ: 0,
            ⲆᐃᐃⵠⲆ: ["#EBD8A6", "#093D38"],
            ⵠΔⵠ: [9, 61, 56]
        };
        this.ᐃᐃⲆᐃᐃⵠⲆ = function (b, c, d, e, f, g) {
            this.x1 = c * 100;
            this.y1 = d * 100;
            this.w = e * 100;
            this.ⵠⲆⵠ = f * 100;
            this.x2 = (c + e) * 100;
            this.y2 = (d + f) * 100;
            this.Ⲇᐃⵠ = b;
            this.ⲆᐃΔ = g === undefined ? 15 : g;
        };
        this.ΔᐃΔᐃⵠ = -1000000;
        this.Ⲇⵠⵠⵠⵠ = this.ΔᐃΔᐃⵠ;
        this.ΔⲆΔΔΔ = this.ΔᐃΔᐃⵠ;
        this.ⵠⲆⲆΔΔ = this.ΔᐃΔᐃⵠ;
        this.ⵠΔΔⵠΔⲆᐃ = this.ΔᐃΔᐃⵠ;
        this.ΔⲆᐃᐃⲆⵠᐃ = this.ΔᐃΔᐃⵠ;
        this.ⲆᐃⵠΔⵠ = this.ΔᐃΔᐃⵠ;
        this.ⵠⵠⵠΔΔⵠⲆᐃⲆ = function (b) {
            var c = b.r.x;
            var d = b.r.y;
            var e = Math.floor(d / 100);
            var f = Math.floor(c / 100);
            b.Ⲇⵠⵠⵠⵠ = Dx.ΔᐃΔᐃⵠ;
            b.ΔⲆΔΔΔ = Dx.ΔᐃΔᐃⵠ;
            b.ⵠⲆⲆΔΔ = Dx.ΔᐃΔᐃⵠ;
            b.ⵠΔΔⵠΔⲆᐃ = Dx.ΔᐃΔᐃⵠ;
            b.ⲆᐃⵠΔⵠ = Dx.ΔᐃΔᐃⵠ;
            b.ⲆᐃᐃⲆⵠⵠΔ = Dx.ΔᐃΔᐃⵠ;
            for (var g = 0; Dx.Ⲇᐃⵠⵠᐃ !== Dx.ⲆⵠΔᐃᐃ[g].Ⲇᐃⵠ; g++) {
                if (Dx.ⲆⵠΔᐃᐃ[g].Ⲇᐃⵠ === Dx.ⵠΔᐃᐃⵠ) {
                    var h = Dx.ᐃⲆΔᐃⲆ(g, c, d);
                    b.ⵠΔΔⵠΔⲆᐃ = Math.max(b.ⵠΔΔⵠΔⲆᐃ, h);
                    if (h > 0 && Dx.ⲆΔΔᐃⵠⲆⵠⲆΔ(g, c, d) === 1) {
                        b.ⲆᐃᐃⲆⵠⵠΔ = 1;
                    }
                } else if (Dx.ⲆⵠΔᐃᐃ[g].Ⲇᐃⵠ === Dx.ⵠⵠⲆΔΔⲆΔ) {
                    b.Ⲇⵠⵠⵠⵠ = Math.max(b.Ⲇⵠⵠⵠⵠ, Dx.ᐃⲆΔᐃⲆ(g, c, d));
                } else if (Dx.ᐃΔΔᐃΔᐃΔ === Dx.ⲆⵠΔᐃᐃ[g].Ⲇᐃⵠ) {
                    b.ΔⲆΔΔΔ = Math.max(b.ΔⲆΔΔΔ, Dx.ᐃⲆΔᐃⲆ(g, c, d));
                } else if (Dx.ⵠᐃᐃΔᐃⵠΔ === Dx.ⲆⵠΔᐃᐃ[g].Ⲇᐃⵠ) {
                    b.ⵠⲆⲆΔΔ = Math.max(b.ⵠⲆⲆΔΔ, Dx.ᐃⲆΔᐃⲆ(g, c, d));
                } else if (Dx.ⲆⵠΔᐃᐃ[g].Ⲇᐃⵠ === Dx.ⵠⲆΔᐃⵠⲆⲆ) {
                    b.ⲆᐃⵠΔⵠ = Math.max(b.ⲆᐃⵠΔⵠ, Dx.ᐃⲆΔᐃⲆ(g, c, d));
                }
            }
            if (Bx.ⲆⵠⲆΔ[e][f].iblk) {
                b.ⲆᐃᐃⲆⵠⵠΔ = 1;
            }
            if (Dx.ⲆᐃⲆⲆⲆⲆⲆⲆⵠ(f, e)) {
                b.ΔⲆᐃᐃⲆⵠᐃ = b.ΔᐃΔᐃⵠ;
            } else if (Bx.ⲆⵠⲆΔ[e][f].wtb || b.Ⲇⵠⵠⵠⵠ < 0 && b.ⵠⲆⲆΔΔ < 0 && b.ⵠΔΔⵠΔⲆᐃ < 0 && b.ⲆᐃᐃⲆⵠⵠΔ < 0 && b.ⲆᐃⵠΔⵠ < 0 && b.ΔⲆΔΔΔ < 0) {
                b.ΔⲆᐃᐃⲆⵠᐃ = 1;
            } else {
                b.ΔⲆᐃᐃⲆⵠᐃ = b.ΔᐃΔᐃⵠ;
            }
        };
        this.ⲆΔⵠⲆΔⲆⵠᐃⵠ = function (a, b) {
            Dx.Ⲇⵠⵠⵠⵠ = Dx.ΔᐃΔᐃⵠ;
            Dx.ΔⲆΔΔΔ = Dx.ΔᐃΔᐃⵠ;
            Dx.ⵠⲆⲆΔΔ = Dx.ΔᐃΔᐃⵠ;
            Dx.ⲆᐃⵠΔⵠ = Dx.ΔᐃΔᐃⵠ;
            Dx.ⵠΔΔⵠΔⲆᐃ = Dx.ΔᐃΔᐃⵠ;
            for (var c = 0; Dx.Ⲇᐃⵠⵠᐃ !== Dx.ⲆⵠΔᐃᐃ[c].Ⲇᐃⵠ; c++) {
                if (Dx.ⵠΔᐃᐃⵠ === Dx.ⲆⵠΔᐃᐃ[c].Ⲇᐃⵠ) {
                    Dx.ⵠΔΔⵠΔⲆᐃ = Math.max(Dx.ⵠΔΔⵠΔⲆᐃ, Dx.ᐃⲆΔᐃⲆ(c, a, b));
                } else if (Dx.ⵠⵠⲆΔΔⲆΔ === Dx.ⲆⵠΔᐃᐃ[c].Ⲇᐃⵠ) {
                    Dx.Ⲇⵠⵠⵠⵠ = Math.max(Dx.Ⲇⵠⵠⵠⵠ, Dx.ᐃⲆΔᐃⲆ(c, a, b));
                } else if (Dx.ⲆⵠΔᐃᐃ[c].Ⲇᐃⵠ === Dx.ᐃΔΔᐃΔᐃΔ) {
                    Dx.ΔⲆΔΔΔ = Math.max(Dx.ΔⲆΔΔΔ, Dx.ᐃⲆΔᐃⲆ(c, a, b));
                } else if (Dx.ⵠᐃᐃΔᐃⵠΔ === Dx.ⲆⵠΔᐃᐃ[c].Ⲇᐃⵠ) {
                    Dx.ⵠⲆⲆΔΔ = Math.max(Dx.ⵠⲆⲆΔΔ, Dx.ᐃⲆΔᐃⲆ(c, a, b));
                } else if (Dx.ⲆⵠΔᐃᐃ[c].Ⲇᐃⵠ === Dx.ⵠⲆΔᐃⵠⲆⲆ) {
                    Dx.ⲆᐃⵠΔⵠ = Math.max(Dx.ⲆᐃⵠΔⵠ, Dx.ᐃⲆΔᐃⲆ(c, a, b));
                }
            }
            if (Dx.Ⲇⵠⵠⵠⵠ < 0 && Dx.ⲆᐃⵠΔⵠ < 0 && Dx.ⵠΔΔⵠΔⲆᐃ < 0 && Dx.ⲆᐃⵠΔⵠ < 0 && Dx.ΔⲆΔΔΔ < 0) {
                Dx.ΔⲆᐃᐃⲆⵠᐃ = 1;
            } else {
                Dx.ΔⲆᐃᐃⲆⵠᐃ = Dx.ΔᐃΔᐃⵠ;
            }
        };
        this.ⲆΔΔᐃⵠⲆⵠⲆΔ = function (b, c, d) {
            var e = Dx.ⲆⵠΔᐃᐃ[b];
            var f = 0;
            ⲆⵠᐃⲆ = e.x1 + 30 + ((e.ⲆᐃΔ & 4) === 0 ? 150 : 0);
            var g = c - ⲆⵠᐃⲆ;
            if ((e.ⲆᐃΔ & 4) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            ⲆΔᐃΔ = e.y1 + 250 + (e.ⲆᐃΔ & 1 ? 0 : 150);
            g = d - ⲆΔᐃΔ;
            if ((e.ⲆᐃΔ & 1) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            ᐃⵠⲆᐃ = e.x2 + 80 + (e.ⲆᐃΔ & 8 ? 0 : -200);
            g = ᐃⵠⲆᐃ - c;
            if ((e.ⲆᐃΔ & 8) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            ΔⲆⲆᐃ = e.y2 - 200 + ((e.ⲆᐃΔ & 2) === 0 ? -200 : 0);
            g = ΔⲆⲆᐃ - d;
            if ((e.ⲆᐃΔ & 2) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            if (ⲆⵠᐃⲆ <= c && c <= ᐃⵠⲆᐃ && ⲆΔᐃΔ <= d && ΔⲆⲆᐃ >= d) {
                return f;
            } else {
                return 0;
            }
        };
        this.ᐃⲆΔᐃⲆ = function (a, b, c) {
            var d = Dx.ⲆⵠΔᐃᐃ[a];
            ⲆⵠᐃⲆ = d.x1 + 30;
            ⲆΔᐃΔ = d.y1 + 250;
            ᐃⵠⲆᐃ = d.x2 + 80;
            ΔⲆⲆᐃ = d.y2 - 200;
            if (b >= ⲆⵠᐃⲆ && ᐃⵠⲆᐃ >= b && ⲆΔᐃΔ <= c && c <= ΔⲆⲆᐃ) {
                return Math.min(b - ⲆⵠᐃⲆ, ᐃⵠⲆᐃ - b, c - ⲆΔᐃΔ, ΔⲆⲆᐃ - c);
            }
            var e = -1000000;
            if (b - ⲆⵠᐃⲆ < 0) {
                e = Math.max(e, b - ⲆⵠᐃⲆ);
            } else if (ᐃⵠⲆᐃ - b < 0) {
                e = Math.max(e, ᐃⵠⲆᐃ - b);
            }
            ΔΔⲆⲆⲆⵠᐃ = -1000000;
            if (c < ⲆΔᐃΔ || c > ΔⲆⲆᐃ) {
                if (c - ⲆΔᐃΔ < 0) {
                    ΔΔⲆⲆⲆⵠᐃ = Math.max(ΔΔⲆⲆⲆⵠᐃ, c - ⲆΔᐃΔ);
                } else {
                    ΔΔⲆⲆⲆⵠᐃ = Math.max(ΔΔⲆⲆⲆⵠᐃ, ΔⲆⲆᐃ - c);
                }
                e = e !== -1000000 && ΔΔⲆⲆⲆⵠᐃ !== -1000000 ? Math.min(e, ΔΔⲆⲆⲆⵠᐃ) : ΔΔⲆⲆⲆⵠᐃ;
            }
            return e;
        };
        this.ⲆᐃΔᐃⲆᐃᐃ = function (b, c, d) {
            var e = d;
            var f = c;
            x(e, f, "isl", b, 1);
            for (var g = 0; g < 4; g++) {
                for (var h = 0; h < 3; h++) {
                    x(e - h, f - g, "iblk", 0);
                    x(e + h, f - g, "iblk", 0);
                    x(e + h, f + g, "iblk", 0);
                    x(e - h, f + g, "iblk", 0);
                }
            }
            if (b === 0) {
                for (g = 0; g < 2; g++) {
                    x(e - g, f - 4, "iblk", 0);
                    x(e + g, f - 4, "iblk", 0);
                    x(e - g, f + 4, "iblk", 0);
                    x(e + g, f + 4, "iblk", 0);
                }
                for (g = 0; g < 3; g++) {
                    x(e - 3, f + g, "iblk", 0);
                    x(e + 3, f + g, "iblk", 0);
                    x(e - 3, f - g, "iblk", 0);
                    x(e + 3, f - g, "iblk", 0);
                }
                x(e - 2, f - 4, "iblk", 0);
                x(e - 3, f - 3, "iblk", 0);
                x(e + 2, f + 4, "iblk", 0);
                x(e + 3, f + 3, "iblk", 0);
            } else if (b === 1) {
                for (g = 0; g < 3; g++) {
                    x(e - g, f - 4, "iblk", 0);
                    x(e + g, f - 4, "iblk", 0);
                    x(e - g, f + 4, "iblk", 0);
                    x(e + g, f + 4, "iblk", 0);
                }
                for (g = 0; g < 4; g++) {
                    x(e - 3, f + g, "iblk", 0);
                    x(e + 3, f + g, "iblk", 0);
                    x(e - 3, f - g, "iblk", 0);
                    x(e + 3, f - g, "iblk", 0);
                }
            } else if (b === 2) {
                for (g = 0; g < 2; g++) {
                    x(e - g, f - 4, "iblk", 0);
                    x(e + g, f - 4, "iblk", 0);
                    x(e - g, f + 4, "iblk", 0);
                    x(e + g, f + 4, "iblk", 0);
                }
                for (g = 0; g < 3; g++) {
                    x(e - 3, f + g, "iblk", 0);
                    x(e + 3, f + g, "iblk", 0);
                    x(e - 3, f - g, "iblk", 0);
                    x(e + 3, f - g, "iblk", 0);
                }
            }
        };
        this.ⲆⵠᐃⵠⲆⵠΔᐃᐃ = function (b) {
            for (var c = 0; Dx.ⲆⵠΔᐃᐃ.length > c && b > 0; c++) {
                var d = Dx.ⲆⵠΔᐃᐃ[c];
                if (d.Ⲇᐃⵠ === Dx.Ⲇᐃⵠⵠᐃ && d.w > 1800 && d.ⵠⲆⵠ > 1000) {
                    var f = Math.floor((d.x1 + d.w / 2) / 100);
                    var g = Math.floor((d.y1 + d.ⵠⲆⵠ / 2) / 100);
                    Dx.ⲆᐃΔᐃⲆᐃᐃ(b % 3, f, g);
                    for (var h = 0; h < 3; h++) {
                        var j = g - 2 + Math.floor(Dx.ⵠᐃΔⵠⲆ.get() * 4);
                        var k = f - 3 + Math.floor(Dx.ⵠᐃΔⵠⲆ.get() * 6);
                        if (Io === Bx.ⲆⵠⲆΔ[j][k].s) {
                            x(j, k, "plm", h);
                        }
                        j = g - 2 + Math.floor(Dx.ⵠᐃΔⵠⲆ.get() * 4);
                        k = f - 3 + Math.floor(Dx.ⵠᐃΔⵠⲆ.get() * 6);
                        if (Bx.ⲆⵠⲆΔ[j][k].plm === undefined) {
                            x(j, k, "s", h);
                        }
                    }
                    j = g - 2 + Math.floor(Dx.ⵠᐃΔⵠⲆ.get() * 4);
                    k = f - 3 + Math.floor(Dx.ⵠᐃΔⵠⲆ.get() * 6);
                    if (Bx.ⲆⵠⲆΔ[j][k].plm === Zi && Ih === Bx.ⲆⵠⲆΔ[j][k].s) {
                        x(j, k, "p", 0, 1);
                    }
                    b--;
                }
            }
        };
        this.ΔⵠⲆⲆΔᐃⵠᐃΔ = function (b) {
            Dx.ⵠᐃΔⵠⲆ.ⵠᐃᐃΔΔ(b);
            var c = 0;
            while (true) {
                if (++c > 10000) {
                    return;
                }
                Dx.ⲆⵠΔᐃᐃ = [];
                if (Dx.ΔⵠΔⵠⵠ === 0 && (Dx.mode === 3 || Dx.mode === 7 || Dx.mode === 0)) {
                    Dx.ΔⵠΔⵠⵠ = Ar;
                }
                if (Dx.mode === 2) {
                    Dx.ⲆⵠΔᐃᐃ.push(new Dx.ᐃᐃⲆᐃᐃⵠⲆ(Dx.ⵠΔᐃᐃⵠ, 2, 2, 80, 80, 15));
                } else if (Dx.mode === 4) {
                    Dx.ⲆⵠΔᐃᐃ.push(new Dx.ᐃᐃⲆᐃᐃⵠⲆ(Dx.ⵠΔᐃᐃⵠ, 2, 2, 150, 150, 15));
                } else if (Dx.ΔⵠΔⵠⵠ !== 0 && Dx.ΔⵠΔⵠⵠ.length > 0 && Dx.ΔⵠΔⵠⵠ[0].length > 3) {
                    for (var g = 0; g < Dx.ΔⵠΔⵠⵠ.length; g++) {
                        if ((E = Dx.ΔⵠΔⵠⵠ[g])[0] !== 0) {
                            break;
                        }
                        var h = Vf.ⵠΔᐃᐃⵠ;
                        switch (E[1]) {
                            case "FOREST":
                                h = Dx.ⵠΔᐃᐃⵠ;
                                break;
                            case "WINTER":
                                h = Dx.ⵠⵠⲆΔΔⲆΔ;
                                break;
                            case "DESERT":
                                h = Dx.ᐃΔΔᐃΔᐃΔ;
                                break;
                            case "LAVA":
                                h = Dx.ⵠᐃᐃΔᐃⵠΔ;
                                break;
                            case "DRAGON":
                                h = Dx.ⵠⲆΔᐃⵠⲆⲆ;
                        }
                        Dx.ⲆⵠΔᐃᐃ.push(new Dx.ᐃᐃⲆᐃᐃⵠⲆ(h, E[2], E[3], E[4], E[5], E[6], E[7]));
                    }
                } else if (Dx.ΔⵠΔⵠⵠ !== 0) {
                    for (g = 0; g < Dx.ΔⵠΔⵠⵠ.length; g++) {
                        var j = Dx.ΔⵠΔⵠⵠ[g];
                        h = Vf.ⵠΔᐃᐃⵠ;
                        switch (j[0]) {
                            case "FOREST":
                                h = Dx.ⵠΔᐃᐃⵠ;
                                break;
                            case "WINTER":
                                h = Dx.ⵠⵠⲆΔΔⲆΔ;
                                break;
                            case "DESERT":
                                h = Dx.ᐃΔΔᐃΔᐃΔ;
                                break;
                            case "LAVA":
                                h = Dx.ⵠᐃᐃΔᐃⵠΔ;
                                break;
                            case "DRAGON":
                                h = Dx.ⵠⲆΔᐃⵠⲆⲆ;
                        }
                        if (i(h, j[1], j[2], 0, (g + 1) * 10) === 0) {
                            break;
                        }
                    }
                    if (g !== Dx.ΔⵠΔⵠⵠ.length) {
                        continue;
                    }
                }
                break;
            }
            ⵠΔⲆΔⲆⵠΔⲆΔ();
            var n = [];
            for (var q = 0; Dx.ᐃⵠᐃᐃⲆ > q; q++) {
                n[q] = new Array(Dx.ⵠᐃΔΔⲆ);
                for (var u = 0; Dx.ⵠᐃΔΔⲆ > u; u++) {
                    n[q][u] = 0;
                }
            }
            for (q = 0; q < Dx.ⲆⵠΔᐃᐃ.length; q++) {
                for (var y = (j = Dx.ⲆⵠΔᐃᐃ[q]).x2 / 100, A = j.y2 / 100, B = j.x1 / 100; B <= y; B++) {
                    for (var D = j.y1 / 100; D <= A; D++) {
                        n[D][B] = 1;
                    }
                }
            }
            for (D = 0; D < Dx.ᐃⵠᐃᐃⲆ; D++) {
                for (B = 0; Dx.ⵠᐃΔΔⲆ > B; B++) {
                    if (n[D][B] === 0) {
                        e(n, B, D);
                    }
                }
            }
            Bx = {
                w: Dx.ⵠᐃΔΔⲆ,
                ⵠⲆⵠ: Dx.ᐃⵠᐃᐃⲆ,
                ⲆⵠⲆΔ: []
            };
            for (q = 0; Dx.ᐃⵠᐃᐃⲆ > q; q++) {
                Bx.ⲆⵠⲆΔ[q] = [];
            }
            if (Dx.ΔⵠΔⵠⵠ !== 0 && Dx.ΔⵠΔⵠⵠ.length > 0 && Dx.ΔⵠΔⵠⵠ[0].length > 3) {
                for (g = 0; g < Dx.ΔⵠΔⵠⵠ.length; g++) {
                    var E = Dx.ΔⵠΔⵠⵠ[g];
                    if (E[1] === "isl") {
                        Dx.ⲆᐃΔᐃⲆᐃᐃ(E[2], E[3], E[4]);
                    }
                }
            } else {
                Dx.ⲆⵠᐃⵠⲆⵠΔᐃᐃ(Dx.ⵠᐃΔⲆⵠⲆⵠ);
            }
            if (Dx.ΔⵠΔⵠⵠ !== 0 && Dx.ΔⵠΔⵠⵠ.length > 0 && Dx.ΔⵠΔⵠⵠ[0].length > 3) {
                var F = [];
                for (g = 0; g < Dx.ΔⵠΔⵠⵠ.length; g++) {
                    if ((E = Dx.ΔⵠΔⵠⵠ[g])[0] === 1) {
                        if (E[1] === "r") {
                            x(E[3], E[2], "wtb", 0, 1);
                            F.push([E[3], E[2], E[4]]);
                        } else {
                            x(E[4], E[3], E[1], E[2], E[5]);
                        }
                    }
                }
                a(0, F);
                F = [];
            } else {
                for (q = 0; Dx.ⲆⵠΔᐃᐃ.length > q; q++) {
                    j = Dx.ⲆⵠΔᐃᐃ[q];
                    if (Dx.mode === 4) {
                        if (j.Ⲇᐃⵠ === Dx.ⵠΔᐃᐃⵠ) {
                            t(q, j.w / 10000);
                        }
                    } else {
                        if (j.Ⲇᐃⵠ === Dx.ⵠΔᐃᐃⵠ) {
                            f(q, j.w / 10000);
                        }
                        if (j.Ⲇᐃⵠ === Dx.ⵠᐃᐃΔᐃⵠΔ) {
                            m(q, j.w / 10000);
                        }
                        if (j.Ⲇᐃⵠ === Dx.ⵠⵠⲆΔΔⲆΔ) {
                            l(q, j.w / 10000);
                        }
                        if (Dx.ᐃΔΔᐃΔᐃΔ === j.Ⲇᐃⵠ) {
                            r(q, j.w / 10000);
                        }
                        if (j.Ⲇᐃⵠ === Dx.ⵠⲆΔᐃⵠⲆⲆ) {
                            p(q);
                        }
                    }
                }
            }
            zt("isl", 1);
            zt("wtb", 20);
            zt("la", 1);
            zt("c", 1);
            zt("s", 1);
            zt("f", 1);
            zt("p", 1);
            zt("g", 1);
            zt("d", 1);
            zt("a", 1);
            zt("re", 1);
            zt("m", 1);
            Ob = [];
            Dx.ᐃⲆⲆⲆⲆΔΔᐃⲆ(Bx);
        };
        this.ᐃⲆⵠⲆ = x;
        this.ᐃⲆⲆⲆⲆΔΔᐃⲆ = function (b) {
            for (var c = 0; c < this.ᐃⵠᐃᐃⲆ; c++) {
                for (var e = 0; e < this.ⵠᐃΔΔⲆ; e++) {
                    b.ⲆⵠⲆΔ[c] ||= [];
                    if (b.ⲆⵠⲆΔ[c][e]) {
                        var f = b.ⲆⵠⲆΔ[c][e];
                        if (f.de && f.de.length > 0) {
                            for (var g = 0; g < f.de.length; g++) {
                                if (f.de[g] && f.de[g].length > 0) {
                                    f.de = f.de[g][0];
                                    if (g >= 41 && g <= 49) {
                                        f.de.scale = 3;
                                        var h = Math.floor(Math.random() * 3 + 1);
                                        f.de.ᐃΔⵠ = [];
                                        for (var j = 0; h > j; j++) {
                                            f.de.ᐃΔⵠ.push({
                                                x: Math.random() * 120 - 60,
                                                y: Math.random() * 120 - 60,
                                                angle: Math.PI * Math.random() * 2,
                                                ⲆΔⲆᐃ: 41 + Math.floor(Math.random() * 9)
                                            });
                                        }
                                    } else if (g >= 19 && g <= 26) {
                                        f.de.scale = 3;
                                        h = Math.floor(Math.random() * 3 + 1);
                                        f.de.ᐃΔⵠ = [];
                                        for (j = 0; h > j; j++) {
                                            f.de.ᐃΔⵠ.push({
                                                x: Math.random() * 120 - 60,
                                                y: Math.random() * 120 - 60,
                                                angle: Math.random() * Math.PI * 2,
                                                ⲆΔⲆᐃ: 19 + Math.floor(Math.random() * 8)
                                            });
                                        }
                                    } else if (g <= 15 || g >= 27 && g <= 40) {
                                        f.de.angle = 0;
                                        f.de.scale = 2;
                                        f.de.ⲆΔⲆᐃ = g;
                                    } else {
                                        f.de.angle = Math.PI * Math.random() * 2;
                                        f.de.scale = 1;
                                        f.de.ⲆΔⲆᐃ = g;
                                    }
                                }
                            }
                        }
                        d(f, "p", new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Ad, 1, 1, 0, 10, 10));
                        d(f, "t", new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1, 0, 10, 10));
                        d(f, "s", new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1, 0, 10, 10));
                        d(f, "g", new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1, 0, 10, 10));
                        d(f, "d", new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Ah, 1, 1, 0, 10, 10));
                        d(f, "b", new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1, 0, 10, 10));
                        d(f, "f", new ⵠΔⲆⵠ.ⲆⲆⵠΔ(bl, 1, 1, 0, 10, 10));
                        d(f, "sw", new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1, 0, 10, 10));
                        d(f, "gw", new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Ah, 1, 1, 0, 10, 10));
                        d(f, "dw", new ⵠΔⲆⵠ.ⲆⲆⵠΔ(na, 1, 1, 0, 10, 10));
                        d(f, "a", new ⵠΔⲆⵠ.ⲆⲆⵠΔ(na, 1, 1, 0, 10, 10));
                        d(f, "cs", new ⵠΔⲆⵠ.ⲆⲆⵠΔ(et, 1, 1, 0, 10, 10));
                        d(f, "plm", new ⵠΔⲆⵠ.ⲆⲆⵠΔ(w, 1, 1, 0, 10, 10));
                        d(f, "re", new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Xb, 1, 1, 0, 10, 10));
                        d(f, "c", new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1, 0, 10, 10));
                        d(f, "m", new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1, 0, 10, 10));
                    } else {
                        b.ⲆⵠⲆΔ[c][e] = [];
                    }
                }
            }
        };
        this.time = Hr.ΔᐃΔ;
        this.ⲆⲆⵠΔⵠ = {
            ᐃΔⲆⲆΔ: 0,
            translate: {
                y: 0,
                x: 0
            },
            ⵠᐃᐃΔΔ: 0,
            now: 0
        };
        this.ᐃΔΔΔⵠΔⲆΔⵠ = function () {
            this.ⲆΔᐃΔΔ = [];
            this.ⵠᐃΔ[0] = [];
            this.ⵠᐃΔ[2] = [];
            this.ⵠᐃΔ[1] = [];
            this.ⵠᐃΔ[6] = [];
            this.ⵠᐃΔ[3] = [];
            this.ⵠᐃΔ[5] = [];
            this.ⵠᐃΔ[12] = [];
            this.ⵠᐃΔ[13] = [];
            this.ⵠᐃΔ[14] = [];
            this.ⵠᐃΔ[20] = [];
            this.ⵠᐃΔ[52] = [];
            this.ⵠᐃΔ[30] = [];
            this.ⵠᐃΔ[56] = [];
            this.ⵠᐃΔ[38] = [];
            this.ⵠᐃΔ[33] = [];
            this.ⵠᐃΔ[31] = [];
            this.ⵠᐃΔ[55] = [];
            this.ⵠᐃΔ[37] = [];
            this.ⵠᐃΔ[43] = [];
            this.ⵠᐃΔ[44] = [];
            this.ⵠᐃΔ[54] = [];
            this.ⵠᐃΔ[39] = [];
            this.ⵠᐃΔ[40] = [];
            this.ⵠᐃΔ[32] = [];
            this.ⵠᐃΔ[24] = [];
            this.ⵠᐃΔ[25] = [];
            this.ⵠᐃΔ[26] = [];
            this.ⵠᐃΔ[27] = [];
            this.ⵠᐃΔ[28] = [];
            this.ⵠᐃΔ[35] = [];
            this.ⵠᐃΔ[4] = [];
            this.ⵠᐃΔ[7] = [];
            this.ⵠᐃΔ[8] = [];
            this.ⵠᐃΔ[9] = [];
            this.ⵠᐃΔ[19] = [];
            this.ⵠᐃΔ[50] = [];
            this.ⵠᐃΔ[41] = [];
            this.ⵠᐃΔ[10] = [];
            this.ⵠᐃΔ[15] = [];
            this.ⵠᐃΔ[16] = [];
            this.ⵠᐃΔ[17] = [];
            this.ⵠᐃΔ[21] = [];
            this.ⵠᐃΔ[51] = [];
            this.ⵠᐃΔ[45] = [];
            this.ⵠᐃΔ[46] = [];
            this.ⵠᐃΔ[47] = [];
            this.ⵠᐃΔ[48] = [];
            this.ⵠᐃΔ[49] = [];
            this.ⵠᐃΔ[53] = [];
            this.ⵠᐃΔ[18] = [];
            this.ⵠᐃΔ[29] = [];
            this.ⵠᐃΔ[56] = [];
            this.ⵠᐃΔ[11] = [];
            this.ⵠᐃΔ[22] = [];
            this.ⵠᐃΔ[23] = [];
            this.ⵠᐃΔ[100] = [];
            this.ⵠᐃΔ[80] = [];
            this.ⵠᐃΔ[60] = [];
            this.ⵠᐃΔ[67] = [];
            this.ⵠᐃΔ[70] = [];
            this.ⵠᐃΔ[77] = [];
            this.ⵠᐃΔ[71] = [];
            this.ⵠᐃΔ[72] = [];
            this.ⵠᐃΔ[73] = [];
            this.ⵠᐃΔ[74] = [];
            this.ⵠᐃΔ[65] = [];
            this.ⵠᐃΔ[66] = [];
            this.ⵠᐃΔ[62] = [];
            this.ⵠᐃΔ[88] = [];
            this.ⵠᐃΔ[91] = [];
            this.ⵠᐃΔ[90] = [];
            this.ⵠᐃΔ[63] = [];
            this.ⵠᐃΔ[78] = [];
            this.ⵠᐃΔ[75] = [];
            this.ⵠᐃΔ[76] = [];
            this.ⵠᐃΔ[64] = [];
            this.ⵠᐃΔ[69] = [];
            this.ⵠᐃΔ[68] = [];
            this.ⵠᐃΔ[79] = [];
            this.ⵠᐃΔ[89] = [];
            this.ⵠᐃΔ[83] = [];
            this.ⵠᐃΔ[84] = [];
            this.ⵠᐃΔ[85] = [];
            this.ⵠᐃΔ[81] = [];
            this.ⵠᐃΔ[82] = [];
            this.ⵠᐃΔ[86] = [];
            this.ⵠᐃΔ[34] = [];
            this.ⵠᐃΔ[36] = [];
            this.ⵠᐃΔ[61] = [];
            this.ⵠᐃΔ[87] = [];
            this.ⵠᐃΔ[42] = [];
        };
        this.ⵠᐃΔⵠⲆⵠⲆⲆⵠ = function (a) {
            if (this.ⲆΔᐃΔΔ[a]) {
                ΔⵠⲆΔ = this.ⲆΔᐃΔΔ[a].type;
                this.ⲆΔᐃΔΔ[a] = null;
                for (var b = this.ⵠᐃΔ[ΔⵠⲆΔ], c = 0; b.length > c; c++) {
                    if (b[c].ᐃⵠᐃΔ == a) {
                        b.splice(c, 1);
                        return;
                    }
                }
            }
        };
        this.ᐃⵠⵠᐃⲆΔᐃⲆⲆ = function (a, b) {
            for (var c = 0; c < this.ⵠᐃΔ[56].length; c++) {
                var d = this.ⵠᐃΔ[56][c];
                if (Math.floor(d.x / 100) === b && Math.floor(d.y / 100) === a) {
                    return 1;
                }
            }
            return 0;
        };
        this.ⲆᐃⲆⲆⲆⲆⲆⲆⵠ = function (a, b) {
            for (var c = 0; c < this.ⵠᐃΔ[30].length; c++) {
                var d = this.ⵠᐃΔ[30][c];
                if (a == Math.floor(d.x / 100) && b == Math.floor(d.y / 100)) {
                    return Pj;
                }
            }
            return false;
        };
        this.ΔᐃΔΔⵠ = function (j) {
            for (var e = 0; e < j.length; e++) {
                ⵠΔΔⵠ = j[e];
                if (ⵠΔΔⵠ.angle != ⵠΔΔⵠ.ⲆⲆᐃⲆᐃΔⵠ) {
                    var q = Math.PI * 2;
                    ⵠΔΔⵠ.angle = (ⵠΔΔⵠ.angle + q) % q;
                    ⵠΔΔⵠ.ⲆⲆᐃⲆᐃΔⵠ = (ⵠΔΔⵠ.ⲆⲆᐃⲆᐃΔⵠ + q) % q;
                    if (ⵠΔΔⵠ.angle != ⵠΔΔⵠ.ⲆⲆᐃⲆᐃΔⵠ) {
                        var B = ⵠΔΔⵠ.ⲆⲆᐃⲆᐃΔⵠ - ⵠΔΔⵠ.angle;
                        var C = Math.abs(B);
                        if (C > Math.PI) {
                            C = Math.PI * 2 - C;
                        }
                        var D = C / Math.PI * 3 * 10 * Lx;
                        if (Math.PI < B) {
                            ⵠΔΔⵠ.angle -= D;
                        } else if (B < -Math.PI) {
                            ⵠΔΔⵠ.angle += D;
                        } else if (B < 0) {
                            ⵠΔΔⵠ.angle -= D;
                        } else {
                            ⵠΔΔⵠ.angle += D;
                        }
                        ⵠΔΔⵠ.angle = (ⵠΔΔⵠ.angle + q) % q;
                        if (D > Math.abs(ⵠΔΔⵠ.angle - ⵠΔΔⵠ.ⲆⲆᐃⲆᐃΔⵠ)) {
                            ⵠΔΔⵠ.angle = ⵠΔΔⵠ.ⲆⲆᐃⲆᐃΔⵠ;
                        }
                    }
                }
                Math.floor(ⵠΔΔⵠ.r.y / 100);
                Math.floor(ⵠΔΔⵠ.r.x / 100);
                if (ⵠΔΔⵠ.r.x != ⵠΔΔⵠ.x || ⵠΔΔⵠ.r.y != ⵠΔΔⵠ.y) {
                    if (ⵠΔΔⵠ.action & 64) {
                        ⵠΔΔⵠ.action -= 64;
                    }
                    ⵠΔΔⵠ.action |= 32;
                    var E = ⵠΔⲆⵠ.ᐃⵠⲆΔΔᐃⲆ(ⵠΔΔⵠ, ⵠΔΔⵠ.r) + Math.PI;
                    var F = Lx * ⵠΔΔⵠ.ΔⵠⲆⲆⲆ;
                    var G = ⵠΔⲆⵠ.ⲆⵠᐃⲆᐃΔⲆ(F, E);
                    if (ⵠΔⲆⵠ.ᐃⵠⵠⵠⲆⵠᐃ(G) < ⵠΔⲆⵠ.ᐃⵠⵠⵠⲆⵠᐃ(ⵠΔⲆⵠ.ⲆⵠⵠΔⲆⲆⲆ(ⵠΔΔⵠ, ⵠΔΔⵠ.r))) {
                        ⵠΔⲆⵠ.ⵠᐃΔᐃᐃⵠΔ(ⵠΔΔⵠ, G);
                    } else {
                        if (ⵠΔΔⵠ.action & 32) {
                            ⵠΔΔⵠ.action -= 32;
                        }
                        ⵠΔΔⵠ.action |= 64;
                        ⵠΔⲆⵠ.ⲆⵠᐃⵠⵠΔΔ(ⵠΔΔⵠ.r, ⵠΔΔⵠ);
                    }
                }
                if (ⵠΔΔⵠ.ᐃΔΔⲆⵠ) {
                    var H = ⵠΔΔⵠ.bubbles;
                    if ((M = H.length) === 0 || M < Hr.ⵠⲆΔⲆᐃⲆⵠ && H[M - 1].ᐃⲆⲆᐃⲆ < 0.95) {
                        H.push({
                            id: Math.floor(Math.random() * ᐃΔ[540][0].length),
                            x: Math.floor(ⵠΔΔⵠ.x + Math.random() * 80 - 40),
                            y: Math.floor(ⵠΔΔⵠ.y + Math.random() * 80 - 40),
                            ᐃⲆⲆᐃⲆ: 1
                        });
                    }
                    for (var I = 0; I < M; I++) {
                        H[I].ᐃⲆⲆᐃⲆ = Math.max(0, H[I].ᐃⲆⲆᐃⲆ - Lx);
                    }
                    for (I = 0; M > I; I++) {
                        if (H[I].ᐃⲆⲆᐃⲆ === 0) {
                            H.splice(I, 1);
                            break;
                        }
                    }
                }
                var K = 0;
                if (ⵠΔΔⵠ.ⵠᐃⲆᐃ && Ax.ⵠⲆᐃⵠⲆ) {
                    var L = ⵠΔΔⵠ.ΔΔᐃⲆⲆ;
                    var M = L.length;
                    if (ⵠΔΔⵠ.ΔⲆᐃᐃⲆⵠᐃ > 0 && ⵠΔΔⵠ.ⲆⵠⵠⵠⲆ !== 227 && ⵠΔΔⵠ.ⲆⵠⵠⵠⲆ !== 228 && ⵠΔΔⵠ.ⲆⵠⵠⵠⲆ !== 230 && ⵠΔΔⵠ.ⲆⵠⵠⵠⲆ !== 229 && ⵠΔΔⵠ.ⲆⵠⵠⵠⲆ !== 91 && !ⵠΔΔⵠ.ᐃΔΔⲆⵠ && (K = 1, M === 0 || Hr.ⲆΔⵠⵠΔⵠⲆ < ⵠΔⲆⵠ.ᐃⲆᐃⲆ(L[M - 1], ⵠΔΔⵠ))) {
                        var N = -ⵠΔΔⵠ.angle;
                        var O = Math.cos(N) * 45 * po;
                        var Q = po * (Math.sin(N) * 45);
                        L.push({
                            x: ⵠΔΔⵠ.x + O,
                            y: ⵠΔΔⵠ.y + Q,
                            r: 8,
                            alpha: 0.8
                        });
                        L.push({
                            x: ⵠΔΔⵠ.x - O,
                            y: ⵠΔΔⵠ.y - Q,
                            r: 8,
                            alpha: 0.8
                        });
                        L.push({
                            x: ⵠΔΔⵠ.x,
                            y: ⵠΔΔⵠ.y,
                            r: 24,
                            alpha: 1
                        });
                    }
                    for (I = 0; M > I; I++) {
                        L[I].alpha = Math.max(0, L[I].alpha - Lx / 2.2);
                        L[I].r += Lx * 20;
                    }
                    if (L.length > 0 && L[0].alpha === 0) {
                        L.splice(0, 1);
                    }
                    var R = ⵠΔΔⵠ.ᐃⵠⵠⲆⵠ;
                    M = R.length;
                    var S = -1;
                    var U = Math.max(0, Math.sign(ⵠΔΔⵠ.ⲆᐃᐃⲆⵠⵠΔ));
                    var V = Math.max(0, Math.sign(ⵠΔΔⵠ.Ⲇⵠⵠⵠⵠ));
                    Math.max(0, Math.sign(ⵠΔΔⵠ.ΔⲆΔΔΔ));
                    var W = Math.max(0, Math.sign(ⵠΔΔⵠ.ⵠⲆⲆΔΔ));
                    var X = Math.max(0, Math.sign(ⵠΔΔⵠ.ⲆᐃⵠΔⵠ));
                    if (ⵠΔΔⵠ.ⲆᐃᐃⲆⵠⵠΔ > 0 || ⵠΔΔⵠ.ΔⲆΔΔΔ > 0) {
                        S = 602;
                    } else if (ⵠΔΔⵠ.ⲆᐃⵠΔⵠ > 0) {
                        S = 680;
                    } else if (ⵠΔΔⵠ.Ⲇⵠⵠⵠⵠ > 0) {
                        S = 475;
                    } else if (ⵠΔΔⵠ.ⵠⲆⲆΔΔ > 0) {
                        S = 476;
                    }
                    if (ⵠΔΔⵠ.ⲆⵠⵠⵠⲆ === 225 && (U | V | W | X) == 1) {
                        S = 228;
                        var Y = ⵠΔΔⵠ.ΔΔᐃⲆᐃ - Math.PI / 2;
                        var Z = 15;
                        var _ = 11;
                        var aa = Hr.ⵠⵠⲆⲆΔⲆⵠ;
                    } else if (ⵠΔΔⵠ.ⲆⵠⵠⵠⲆ === 239 && (U | V | W | X) == 1) {
                        S = 249;
                        Y = ⵠΔΔⵠ.ΔΔᐃⲆᐃ - Math.PI / 2;
                        Z = 21;
                        _ = 16;
                        aa = Hr.ⵠⵠⲆⲆΔⲆⵠ;
                    } else if (ⵠΔΔⵠ.ⲆⵠⵠⵠⲆ === 226 && (U | V | W | X) === 1) {
                        S = 234;
                        Y = ⵠΔΔⵠ.ΔΔᐃⲆᐃ - Math.PI / 2;
                        var ba = Math.random() * 50;
                        Z = 10 + ba;
                        _ = 0 + ba;
                        aa = Hr.ⵠⵠⲆⲆΔⲆⵠ * 0.9;
                    } else {
                        Y = ⵠΔΔⵠ.angle;
                        Z = 15;
                        _ = 11;
                        aa = Hr.ⵠⵠⲆⲆΔⲆⵠ;
                    }
                    if (ⵠΔΔⵠ.ⲆⵠⵠⵠⲆ === 227 || ⵠΔΔⵠ.ⲆⵠⵠⵠⲆ === 228 || ⵠΔΔⵠ.ⲆⵠⵠⵠⲆ === 91 || ⵠΔΔⵠ.ⲆⵠⵠⵠⲆ === 229 || ⵠΔΔⵠ.ⲆⵠⵠⵠⲆ === 230 || ⵠΔΔⵠ.ᐃΔΔⲆⵠ); else if (ⵠΔΔⵠ.ⲆⵠⵠⵠⲆ === 224) {
                        if (M === 0 || ⵠΔⲆⵠ.ᐃⲆᐃⲆ(R[M - 1], ⵠΔΔⵠ) > Hr.ⲆⲆⲆⵠΔᐃᐃ) {
                            R.push({
                                x: ⵠΔΔⵠ.x,
                                y: ⵠΔΔⵠ.y,
                                angle: ⵠΔΔⵠ.ΔΔᐃⲆᐃ,
                                alpha: 1,
                                id: 226
                            });
                        }
                    } else if (S != -1 && K === 0 && (M === 0 || ⵠΔⲆⵠ.ᐃⲆᐃⲆ(R[M - 1], ⵠΔΔⵠ) > aa)) {
                        ⵠΔΔⵠ.ⵠⵠᐃΔΔΔⲆ++;
                        if (Math.abs(ⵠΔΔⵠ.x - ⵠΔΔⵠ.r.x) > 1 && Math.abs(ⵠΔΔⵠ.y - ⵠΔΔⵠ.r.y) > 1) {
                            if (ⵠΔΔⵠ.r.x > ⵠΔΔⵠ.x && ⵠΔΔⵠ.r.y < ⵠΔΔⵠ.y || ⵠΔΔⵠ.r.x < ⵠΔΔⵠ.x && ⵠΔΔⵠ.r.y > ⵠΔΔⵠ.y) {
                                if (ⵠΔΔⵠ.ⵠⵠᐃΔΔΔⲆ % 2) {
                                    O = po * -_;
                                    Q = po * -_;
                                } else {
                                    Q = _ * po;
                                    O = po * _;
                                }
                            } else if (ⵠΔΔⵠ.ⵠⵠᐃΔΔΔⲆ % 2) {
                                O = _ * po;
                                Q = -_ * po;
                            } else {
                                Q = _ * po;
                                O = -_ * po;
                            }
                        } else if (ⵠΔΔⵠ.ⵠⵠᐃΔΔΔⲆ % 2) {
                            O = Z * Math.cos(Y) * po;
                            Q = po * (Z * Math.sin(Y));
                        } else {
                            O = po * (-Math.cos(Y) * Z);
                            Q = -Math.sin(Y) * Z * po;
                        }
                        R.push({
                            x: ⵠΔΔⵠ.x + O,
                            y: ⵠΔΔⵠ.y + Q,
                            angle: Y + Math.PI / 2,
                            alpha: 1,
                            id: S
                        });
                    }
                    for (I = 0; M > I; I++) {
                        if (R[I].id === 226) {
                            R[I].alpha = Math.max(0, R[I].alpha - Lx * 1.5);
                        } else {
                            R[I].alpha = Math.max(0, R[I].alpha - Lx / 2.85);
                        }
                    }
                    if (R.length > 0 && R[0].alpha === 0) {
                        R.splice(0, 1);
                    }
                }
            }
        };
        this.ⲆΔᐃ = function () {
            this.ΔᐃΔΔⵠ(this.ⵠᐃΔ[0]);
            this.ΔᐃΔΔⵠ(this.ⵠᐃΔ[80]);
            this.ΔᐃΔΔⵠ(this.ⵠᐃΔ[60]);
            this.ΔᐃΔΔⵠ(this.ⵠᐃΔ[67]);
            this.ΔᐃΔΔⵠ(this.ⵠᐃΔ[70]);
            this.ΔᐃΔΔⵠ(this.ⵠᐃΔ[77]);
            this.ΔᐃΔΔⵠ(this.ⵠᐃΔ[71]);
            this.ΔᐃΔΔⵠ(this.ⵠᐃΔ[72]);
            this.ΔᐃΔΔⵠ(this.ⵠᐃΔ[73]);
            this.ΔᐃΔΔⵠ(this.ⵠᐃΔ[74]);
            this.ΔᐃΔΔⵠ(this.ⵠᐃΔ[61]);
            this.ΔᐃΔΔⵠ(this.ⵠᐃΔ[62]);
            this.ΔᐃΔΔⵠ(this.ⵠᐃΔ[88]);
            this.ΔᐃΔΔⵠ(this.ⵠᐃΔ[91]);
            this.ΔᐃΔΔⵠ(this.ⵠᐃΔ[90]);
            this.ΔᐃΔΔⵠ(this.ⵠᐃΔ[63]);
            this.ΔᐃΔΔⵠ(this.ⵠᐃΔ[78]);
            this.ΔᐃΔΔⵠ(this.ⵠᐃΔ[75]);
            this.ΔᐃΔΔⵠ(this.ⵠᐃΔ[76]);
            this.ΔᐃΔΔⵠ(this.ⵠᐃΔ[64]);
            this.ΔᐃΔΔⵠ(this.ⵠᐃΔ[68]);
            this.ΔᐃΔΔⵠ(this.ⵠᐃΔ[65]);
            this.ΔᐃΔΔⵠ(this.ⵠᐃΔ[66]);
            this.ΔᐃΔΔⵠ(this.ⵠᐃΔ[69]);
        };
        this.ⲆⵠΔⲆ = [];
        this.ⲆⵠΔⲆ[620] = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Ag, 1, 1.05, 1, 0.008, 0.008);
        this.ⲆⵠΔⲆ[619] = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(eo, 1, 1.08, 1, 0.006, 0.006);
        this.ⲆⵠΔⲆ[694] = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 1, 1.02, 1, 0.008, 0.008);
        this.ⲆⵠΔⲆ[695] = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(un, 1, 1.08, 1, 0.006, 0.006);
        this.ᐃⵠⲆⵠⵠ = [];
        this.ᐃⵠⲆⵠⵠ[0] = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.1, 1, 0, 0.6, 0.6);
        this.ᐃⵠⲆⵠⵠ[1] = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(un, 0.4, 1, 0, 0.6, 0.6);
        this.ᐃⵠⲆⵠⵠ[2] = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.3, 1, 0, 0.6, 0.6);
        this.ᐃⵠⲆⵠⵠ[3] = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.8, 1, 0, 0.6, 0.6);
        this.ᐃⵠⲆⵠⵠ[4] = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.3, 1, 0, 0.6, 0.6);
        this.ᐃⵠⲆⵠⵠ[5] = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Bq, 0.8, 1, 0, 0.6, 0.6);
        this.ᐃⵠⲆⵠⵠ[6] = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.5, 1, 0, 0.6, 0.6);
        this.ᐃⵠⲆⵠⵠ[7] = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Dl, 0.9, 1, 0, 0.6, 0.6);
        this.ᐃⵠⲆⵠⵠ[8] = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(hs, 0.6, 1, 0, 0.6, 0.6);
        this.ᐃⵠⲆⵠⵠ[9] = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(bl, 0.2, 1, 0, 0.6, 0.6);
        this.ᐃⵠⲆⵠⵠ[10] = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.6, 1, 0, 0.6, 0.6);
        this.ᐃⵠⲆⵠⵠ[11] = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Bq, 0.4, 1, 0, 0.6, 0.6);
        this.ᐃⵠⲆⵠⵠ[12] = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.8, 1, 0, 0.6, 0.6);
        this.ᐃⵠⲆⵠⵠ[13] = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.2, 1, 0, 0.6, 0.6);
        this.ᐃⵠⲆⵠⵠ[14] = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0.7, 1, 0, 0.6, 0.6);
    }
    function Iw() {
        this.ⲆⲆⲆⲆΔ = "";
        this.ⵠᐃⵠᐃ = 0;
        this.ᐃⵠᐃⲆΔ = 0;
        this.ᐃᐃⵠᐃⲆ = 0;
        this.ⲆⵠᐃⵠⲆΔⲆ = 0;
        this.ΔᐃᐃᐃΔ = 0;
        this.ᐃⲆⲆⲆⲆ = 0;
        this.ᐃⵠⵠΔΔ = 0;
        this.level = 0;
        this.label = null;
        this.ΔⵠΔΔᐃⲆⲆ = null;
        this.ⵠᐃⵠΔⲆⵠⲆ = null;
        this.ⲆⵠⲆΔᐃ = false;
        this.Ⲇⵠⵠⵠᐃ = 0;
    }
    function Jw(a, b, c, d) {
        this.id = a;
        this.ΔⵠⲆⲆⲆ = (a + 5) * 8;
        this.ᐃⲆⲆᐃⲆ = io / 1366;
        this.x = b;
        this.y = c;
        this.c = Math.sin(d);
        this.Ⲇᐃⵠⵠ = Math.cos(d);
        this.alpha = 0;
    }
    function Kw() {
        Math.random();
        return "a";
    }
    function Lw() {
        Math.random();
        return "t";
    }
    function Mw() {
        Math.random();
        return "i";
    }
    function Nw() {
        this.ⵠᐃᐃΔΔ = function () { };
        this.ᐃΔⲆⵠⲆ = {
            ⲆⲆᐃᐃ: 1,
            ᐃᐃⵠⵠⲆ: 1,
            open: tr
        };
        this.ΔᐃⲆⲆⲆ = {
            ⲆⲆᐃᐃ: 1,
            ᐃᐃⵠⵠⲆ: -1,
            open: false
        };
        this.ⵠᐃΔⵠ = {
            ⲆΔⵠΔᐃᐃⵠ: 0,
            ⲆΔⵠᐃᐃ: 0,
            ⲆⲆᐃᐃ: 1,
            ᐃᐃⵠⵠⲆ: -1,
            open: Xb
        };
        this.ᐃⲆᐃΔ = {
            ⲆⵠⲆⵠⲆΔⵠ: 0,
            ᐃⵠⵠᐃⲆΔⵠ: 0,
            type: 0,
            ΔᐃⲆᐃⲆⵠΔ: 0,
            ⲆⲆᐃᐃ: 1,
            ᐃᐃⵠⵠⲆ: -1,
            open: false
        };
        this.ⲆᐃⲆⲆ = {
            ⲆⵠⲆⵠⲆΔⵠ: 0,
            ⵠᐃⵠⲆⲆⵠᐃ: 0,
            ⲆΔⵠᐃᐃ: 0,
            ⲆⲆᐃᐃ: 1,
            ᐃᐃⵠⵠⲆ: -1,
            open: Bq
        };
        this.sign = {
            open: Ag,
            ᐃᐃⵠⵠⲆ: -1
        };
        this.ⲆⲆᐃⲆΔ = {
            ΔⲆⲆⲆ: 0,
            ⲆⲆᐃᐃ: 1,
            ᐃᐃⵠⵠⲆ: -1,
            open: false
        };
        this.ᐃΔΔⲆⵠ = {
            enabled: Xs,
            ⲆⲆᐃΔΔ: -1,
            label: bk,
            now: -1,
            ⵠⲆⲆⵠ: iw
        };
        this.ⵠⲆⲆᐃ = {
            lock: na,
            ΔⲆᐃΔΔᐃΔ: Ag,
            ⲆΔⵠᐃⲆΔᐃ: false,
            ᐃᐃⵠⵠⲆ: -1,
            ⲆⲆᐃᐃ: 1,
            id: -1,
            open: na,
            ΔⲆⲆⲆ: 0,
            locked: Ad
        };
        this.ⲆⵠⲆΔᐃ = kl;
        this.reconnect = {
            enabled: eo,
            rotate: 0
        };
        this.key = ⵠΔⲆⵠ.ΔⵠⲆᐃⲆᐃᐃ("key", Hf.location.href);
        var a = ⵠΔⲆⵠ.ΔⵠⲆᐃⲆᐃᐃ("egg", Hf.location.href);
        if (a) {
            Ax.ⵠᐃⵠᐃ = parseInt(a);
        }
        this.beta = Hf.location.href.indexOf("http://starve.io/beta") === 0 ? 1 : 0;
        if (this.key && this.beta) {
            ΔⲆⲆΔ.set("starve_beta", this.key);
        } else if (this.beta) {
            this.key = ΔⲆⲆΔ.get("starve_beta");
        }
        this.ᐃΔⵠᐃᐃ = ΔⲆⲆΔ.get("starve_token") ? ΔⲆⲆΔ.get("starve_token") : ⵠΔⲆⵠ.ⲆⲆⵠⵠⵠⵠⵠ(14);
        Hf.baguette();
        var b = Hf.kot2;
        function c() {
            this.seed = 1;
            this.ᐃᐃᐃΔᐃⵠΔ = 2;
            this.ᐃⲆⲆΔⲆΔⵠ = 3;
            this.ⲆΔΔΔⵠΔΔΔⲆ = 1;
            this.ΔΔᐃⲆΔΔᐃΔⵠ = 2;
            this.ⵠⲆⲆΔⲆⲆⲆᐃΔ = 3;
            this.ⵠⵠⵠⵠⵠⵠΔ = function (a) {
                this.seed = 2 + Math.floor(Math.random() * 39879);
            };
            this.ⲆᐃᐃΔⲆΔΔ = function (a) {
                this.ᐃᐃᐃΔᐃⵠΔ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ΔᐃⵠⵠᐃⵠⲆ = function (a) {
                this.ᐃⲆⲆΔⲆΔⵠ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ΔΔⵠⵠⵠΔⲆΔΔ = function (a) {
                this.ⲆΔΔΔⵠΔΔΔⲆ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ᐃⵠⵠⵠⵠⲆΔΔⵠ = function (a) {
                this.ΔΔᐃⲆΔΔᐃΔⵠ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ⵠᐃᐃⲆⲆⵠⵠΔⲆ = function (a) {
                this.ⵠⲆⲆΔⲆⲆⲆᐃΔ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ᐃⲆΔΔⵠⲆΔ = function (c, e, f, i, j, k, a) {
                for (var m = 1; m < a;) {
                    var n = f * m % ᐃᐃᐃΔⲆΔⲆ;
                    var o = ⲆᐃⵠΔᐃⵠᐃ[n];
                    if (o < 0.1) {
                        p += 50;
                        m += 50;
                    } else {
                        var p = Math.floor(o * i + j);
                        if (k < m && a > m) {
                            var q = Math.random() > 0.5 ? Lx * -10 : Lx * 10;
                            var r = e * p;
                            this.ΔⵠΔⵠⵠⵠⵠ[n] = Math.max(-25, Math.min(25, this.ΔⵠΔⵠⵠⵠⵠ[n] + q));
                            this.ⵠⵠΔᐃΔⵠⲆ[n] = Math.max(-8, Math.min(8, this.ⵠⵠΔᐃΔⵠⲆ[n] + q));
                            if (r > 0) {
                                ao.beginPath();
                                ao.arc(m + Ex.ⵠⵠⵠ.x + this.ⵠⵠΔᐃΔⵠⲆ[n], c + this.ΔⵠΔⵠⵠⵠⵠ[n] - 20, r, 0, Math.PI * 2);
                                if (Dx.transition) {
                                    var t = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
                                    ao.fillStyle = lf(83, 156, 160, 236, 247, 249, t);
                                } else {
                                    ao.fillStyle = Hr.ⵠⲆᐃᐃᐃΔⲆ[Dx.time];
                                }
                                ao.fill();
                            }
                        }
                        m += p * 2;
                    }
                }
            };
            this.ᐃⵠΔᐃΔⵠⲆ = function (c, e, f, i, j, k, a) {
                for (var m = 1; m < a;) {
                    var n = f * m % ᐃᐃᐃΔⲆΔⲆ;
                    var o = ⲆᐃⵠΔᐃⵠᐃ[n];
                    if (o < 0.1) {
                        p += 50;
                        m += 50;
                    } else {
                        var p = Math.floor(o * i + j);
                        if (m > k && a > m) {
                            var q = Math.random() > 0.5 ? Lx * -10 : Lx * 10;
                            var r = e * p;
                            this.ⵠΔⲆᐃᐃ[n] = Math.max(-25, Math.min(25, this.ⵠΔⲆᐃᐃ[n] + q));
                            this.ΔⵠᐃⲆⵠ[n] = Math.max(-8, Math.min(8, this.ΔⵠᐃⲆⵠ[n] + q));
                            if (r > 0) {
                                ao.beginPath();
                                ao.arc(c + this.ⵠΔⲆᐃᐃ[n] - 20, m + Ex.ⵠⵠⵠ.y + this.ΔⵠᐃⲆⵠ[n], r, 0, Math.PI * 2);
                                if (Dx.transition) {
                                    var t = Dx.time ? 1 - Dx.ⵠΔΔᐃ.ⲆᐃΔ : Dx.ⵠΔΔᐃ.ⲆᐃΔ;
                                    ao.fillStyle = lf(83, 156, 160, 236, 247, 249, t);
                                } else {
                                    ao.fillStyle = Hr.ⵠⲆᐃᐃᐃΔⲆ[Dx.time];
                                }
                                ao.fill();
                            }
                        }
                        m += p * 2;
                    }
                }
            };
            this.ⵠⵠⵠΔᐃⵠⲆᐃⵠ = function (b, c, d, e, f, g) {
                var h;
                f -= 30;
                g += 30;
                if ((h = -(d - 0 - e - 2) / 200) === 0) {
                    this.ΔᐃⵠⵠᐃⵠⲆ();
                }
                ao.globalAlpha = ⵠΔⲆⵠ.ⵠΔⲆⵠⵠ(h);
                this.ᐃⲆΔΔⵠⲆΔ(d, h, this.ᐃⲆⲆΔⲆΔⵠ, 18, 16, f, g);
                ao.globalAlpha = 1;
                if ((h = -(b - 250 - e + 500) / 150) === 0) {
                    this.ⵠⵠⵠⵠⵠⵠΔ();
                }
                ao.globalAlpha = ⵠΔⲆⵠ.ⵠΔⲆⵠⵠ(h);
                this.ᐃⲆΔΔⵠⲆΔ(b, h, this.seed, 12, 10, f, g);
                ao.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
                        this.ⲆᐃᐃΔⲆΔΔ();
                    }
                    ao.globalAlpha = ⵠΔⲆⵠ.ⵠΔⲆⵠⵠ(h);
                    this.ᐃⲆΔΔⵠⲆΔ(c, h, this.ᐃᐃᐃΔᐃⵠΔ, 6, 6, f, g);
                    ao.globalAlpha = 1;
                }
            };
            this.ΔΔⵠΔᐃⲆⵠⵠⲆ = function (b, c, d, e, f, g) {
                f -= 30;
                g += 30;
                var h = -(-d + 0 + e + 2) / 200;
                if (h === 0) {
                    this.ΔᐃⵠⵠᐃⵠⲆ();
                }
                ao.globalAlpha = ⵠΔⲆⵠ.ⵠΔⲆⵠⵠ(h);
                this.ᐃⲆΔΔⵠⲆΔ(d, h, this.ᐃⲆⲆΔⲆΔⵠ, 18, 16, f, g);
                ao.globalAlpha = 1;
                if ((h = -(-b + 250 + e) / 150) === 0) {
                    this.ⵠⵠⵠⵠⵠⵠΔ();
                }
                ao.globalAlpha = ⵠΔⲆⵠ.ⵠΔⲆⵠⵠ(h);
                this.ᐃⲆΔΔⵠⲆΔ(b, h, this.seed, 12, 10, f, g);
                ao.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(-c + 350 + e) / 100) <= 0.01) {
                        this.ⲆᐃᐃΔⲆΔΔ();
                    }
                    ao.globalAlpha = ⵠΔⲆⵠ.ⵠΔⲆⵠⵠ(h);
                    this.ᐃⲆΔΔⵠⲆΔ(c, h, this.ᐃᐃᐃΔᐃⵠΔ, 6, 6, f, g);
                    ao.globalAlpha = 1;
                }
            };
            this.ᐃΔⵠⲆⲆⵠⲆΔΔ = function (b, c, d, e, f, g) {
                f -= 30;
                g += 30;
                if ((h = -(-d + 0 + e + 2) / 200) === 0) {
                    this.ΔᐃⵠⵠᐃⵠⲆ();
                }
                ao.globalAlpha = ⵠΔⲆⵠ.ⵠΔⲆⵠⵠ(h);
                this.ᐃⵠΔᐃΔⵠⲆ(d, h, this.ᐃⲆⲆΔⲆΔⵠ, 18, 16, f, g);
                ao.globalAlpha = 1;
                var h = -(-b + 250 + e) / 150;
                if (h === 0) {
                    this.ⵠⵠⵠⵠⵠⵠΔ();
                }
                ao.globalAlpha = ⵠΔⲆⵠ.ⵠΔⲆⵠⵠ(h);
                this.ᐃⵠΔᐃΔⵠⲆ(b, h, this.seed, 12, 10, f, g);
                ao.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(-c + 350 + e) / 100) <= 0.01) {
                        this.ⲆᐃᐃΔⲆΔΔ();
                    }
                    ao.globalAlpha = ⵠΔⲆⵠ.ⵠΔⲆⵠⵠ(h);
                    this.ᐃⵠΔᐃΔⵠⲆ(c, h, this.ᐃᐃᐃΔᐃⵠΔ, 6, 6, f, g);
                    ao.globalAlpha = 1;
                }
            };
            this.ΔᐃⵠΔᐃⵠᐃᐃᐃ = function (b, c, d, e, f, g) {
                f -= 30;
                g += 30;
                var h = -(d - 0 - e - 2) / 200;
                if (h === 0) {
                    this.ΔᐃⵠⵠᐃⵠⲆ();
                }
                ao.globalAlpha = ⵠΔⲆⵠ.ⵠΔⲆⵠⵠ(h);
                this.ᐃⵠΔᐃΔⵠⲆ(d, h, this.ᐃⲆⲆΔⲆΔⵠ, 18, 16, f, g);
                ao.globalAlpha = 1;
                if ((h = -(b - 250 - e + 500) / 150) === 0) {
                    this.ⵠⵠⵠⵠⵠⵠΔ();
                }
                ao.globalAlpha = ⵠΔⲆⵠ.ⵠΔⲆⵠⵠ(h);
                this.ᐃⵠΔᐃΔⵠⲆ(b, h, this.seed, 12, 10, f, g);
                ao.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
                        this.ⲆᐃᐃΔⲆΔΔ();
                    }
                    ao.globalAlpha = ⵠΔⲆⵠ.ⵠΔⲆⵠⵠ(h);
                    this.ᐃⵠΔᐃΔⵠⲆ(c, h, this.ᐃᐃᐃΔᐃⵠΔ, 6, 6, f, g);
                    ao.globalAlpha = 1;
                }
            };
            this.w1 = {
                r: new ⵠΔⲆⵠ.ᐃΔⵠΔΔ(ⵠΔⲆⵠ.ᐃⲆⲆⵠᐃᐃⲆ, 0, 10, 0, 0, 200),
                ΔⵠᐃⲆ: new ⵠΔⲆⵠ.ᐃΔⵠΔΔ(ⵠΔⲆⵠ.ⲆᐃΔⵠⵠⵠⲆ, 0, 10, 200, 200, 0)
            };
            this.w2 = {
                r: new ⵠΔⲆⵠ.ᐃΔⵠΔΔ(ⵠΔⲆⵠ.ⵠⵠᐃΔΔⲆⲆ, 0, 10, 0, 0, 150),
                ΔⵠᐃⲆ: new ⵠΔⲆⵠ.ᐃΔⵠΔΔ(ⵠΔⲆⵠ.ⵠΔⲆⵠⵠ, 0, 10, 150, 150, 0)
            };
            this.w3 = {
                r: new ⵠΔⲆⵠ.ᐃΔⵠΔΔ(ⵠΔⲆⵠ.ⲆⵠᐃⵠⵠᐃⲆ, 0, 10, 0, 0, 100),
                ΔⵠᐃⲆ: new ⵠΔⲆⵠ.ᐃΔⵠΔΔ(ⵠΔⲆⵠ.ⵠΔⲆⵠⵠ, 0, 10, 100, 100, 0)
            };
            this.ΔΔΔⵠΔⲆⲆᐃⵠ = function (a) {
                if (a.r.ΔᐃⲆⵠᐃ === a.r.x) {
                    if (a.ΔⵠᐃⲆ.ΔᐃⲆⵠᐃ === a.ΔⵠᐃⲆ.x) {
                        return a.r;
                    } else {
                        return a.ΔⵠᐃⲆ;
                    }
                } else {
                    return a.r;
                }
            };
            this.Ⲇᐃⵠ = function (a) {
                var b;
                if (a.r.x === a.r.ΔᐃⲆⵠᐃ) {
                    if (a.ΔⵠᐃⲆ.x === a.ΔⵠᐃⲆ.ΔᐃⲆⵠᐃ) {
                        a.r.ⵠⲆᐃΔⲆⲆΔ();
                        a.ΔⵠᐃⲆ.ⵠⲆᐃΔⲆⲆΔ();
                        b = a.r;
                    } else {
                        b = a.ΔⵠᐃⲆ;
                    }
                } else {
                    b = a.r;
                }
                b.ΔⲆⵠⵠΔⵠΔ(b.ΔᐃⲆⵠᐃ);
                return b;
            };
            this.ⵠΔⲆᐃᐃ = [];
            this.ΔⵠᐃⲆⵠ = [];
            this.ΔⵠΔⵠⵠⵠⵠ = [];
            this.ⵠⵠΔᐃΔⵠⲆ = [];
            this.ⵠᐃᐃΔΔ = function () {
                for (var a = 0; ᐃᐃᐃΔⲆΔⲆ > a; a++) {
                    this.ⵠΔⲆᐃᐃ[a] = Math.floor(ⲆᐃⵠΔᐃⵠᐃ[a] * 25);
                    this.ΔⵠᐃⲆⵠ[a] = Math.floor(ⲆᐃⵠΔᐃⵠᐃ[a] * 8);
                    this.ΔⵠΔⵠⵠⵠⵠ[a] = Math.floor(ⲆᐃⵠΔᐃⵠᐃ[a] * 25);
                    this.ⵠⵠΔᐃΔⵠⲆ[a] = Math.floor(ⲆᐃⵠΔᐃⵠᐃ[a] * 8);
                }
                this.w1.r.x = this.w1.r.ΔᐃⲆⵠᐃ;
                this.w2.r.ⵠⵠⵠⵠⲆ = 3.5;
                this.w3.r.ⵠⵠⵠⵠⲆ = 2;
            };
            this.ⵠᐃᐃΔΔ();
        }
        this.ᐃΔⵠᐃᐃ = b.substring(0, 6) + this.ᐃΔⵠᐃᐃ.substring(6);
        this.ᐃᐃⲆⵠⲆᐃᐃ = ΔⲆⲆΔ.get("starve_token_id") ? ΔⲆⲆΔ.get("starve_token_id") : "";
        this.id = 0;
        this.ᐃⵠᐃΔ = 0;
        this.Δⵠᐃ = 0;
        this.ΔⲆⲆⵠⵠⵠⵠ = {
            Ⲇⵠⵠⵠᐃ: 0,
            ⵠⵠᐃᐃΔⵠⲆ: "",
            ΔⵠⵠΔᐃⵠⲆ: 0,
            ᐃⲆᐃᐃᐃ: 0
        };
        this.ⵠⵠⲆⵠⵠΔΔⵠᐃ = {
            connected: 0,
            ⵠᐃᐃᐃⵠⵠⲆ: new Date().getTime()
        };
        this.ⵠⲆⲆⵠΔ = [];
        this.ΔⵠᐃⲆᐃⵠⲆ = function (a) {
            for (var b = 0; b < this.ⵠⲆⲆⵠΔ.length; b++) {
                if (this.ⵠⲆⲆⵠΔ[b] == a) {
                    return Un;
                }
            }
            return false;
        };
        this.ⲆⲆΔᐃⲆ = {
            ⲆⲆᐃΔΔ: 0,
            time: 0,
            value: 0,
            open: false,
            ⵠⲆⲆⵠ: function () {
                if (this.open) {
                    var a = new Date().getTime();
                    this.time = Math.floor((a - this.ⲆⲆᐃΔΔ) / 1000);
                    if (this.time < 60) {
                        Gx.ⲆⲆΔᐃⲆ.button.ⵠⲆⲆⵠ(ao);
                    } else {
                        document.getElementById("shop_starterkit").style.display = "none";
                        this.open = bk;
                    }
                }
            }
        };
        this.ⲆⲆⲆⲆⵠ = {
            id: -1,
            ⲆⲆᐃᐃ: -1,
            lock: 0,
            timeout: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0, 1, 0, 1 / 30, 1),
            wait: false
        };
        this.ΔⲆⵠΔΔ = {
            timeout: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0, 1, 0, 1 / 5, 1),
            wait: tr
        };
        this.ⲆΔⵠᐃⵠ = {
            timeout: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0, 1, 0, 1, 1),
            wait: false
        };
        this.ⵠᐃΔΔΔ = {
            timeout: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0, 1, 0, 1 / 10, 1),
            wait: false
        };
        this.ⵠⵠⵠ = new ⵠΔⲆⵠ.ᐃⲆΔⵠᐃⵠⵠ(ⵠΔⲆⵠ.ΔⲆⵠⲆⵠᐃⵠ, 0, 0.4, 0, 0, oo, to, oo, to);
        this.ⵠⵠⵠ.ⲆⲆᐃΔΔ = 0;
        this.ⵠⵠⵠ.ⵠⲆᐃΔⲆⵠⵠ = 0;
        this.ⵠⵠⵠ.ⲆΔᐃ = function () {
            if (this.ⵠⲆᐃΔⲆⵠⵠ > 0) {
                this.ⵠⲆᐃΔⲆⵠⵠ -= Lx;
            } else {
                var a = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ];
                if (a) {
                    this.ⲆⲆᐃΔΔ = 0;
                    var b = Math.max(Math.min(oo - a.x, -2), 2 - Dx.w + io);
                    var c = Math.max(Math.min(to - a.y, -2), 2 - Dx.ⵠⲆⵠ + no);
                    this.ΔⲆⵠⵠΔⵠΔ({
                        x: b,
                        y: c
                    });
                } else {
                    this.ⲆⲆᐃΔΔ += Lx;
                    if (this.ⲆⲆᐃΔΔ > 3) {
                        this.ⲆⲆᐃΔΔ = 0;
                        if (!Ex.reconnect.enabled) {
                            Δⵠⵠⵠ.ᐃⲆᐃⲆᐃⲆⵠᐃᐃ();
                        }
                    }
                }
            }
        };
        this.ⵠⵠⵠ.w = screen.width;
        this.ⵠⵠⵠ.ⵠⲆⵠ = screen.height;
        this.ⵠⵠⵠ.ⲆᐃⲆⵠᐃΔⵠ = this.ⵠⵠⵠ.w;
        this.ⵠⵠⵠ.ΔⲆⲆᐃΔΔᐃ = this.ⵠⵠⵠ.ⵠⲆⵠ;
        this.ⵠⵠⵠ.rx = 0;
        this.ⵠⵠⵠ.ry = 0;
        this.ⵠⵠⵠ.ⲆⵠΔⵠⲆᐃⵠΔΔ = 0;
        this.ⵠⵠⵠ.ᐃᐃⵠⲆⵠⲆᐃⲆᐃ = 0;
        this.ⵠⵠⵠ.ΔⲆᐃⲆΔ = function (a, b) {
            this.x = -Math.min(Math.max(-Dx.ⵠⵠᐃᐃⲆⵠᐃ * 2, a - Dx.ⵠⵠᐃᐃⲆⵠᐃ - this.ⲆᐃⲆⵠᐃΔⵠ / 2), Dx.w - this.ⲆᐃⲆⵠᐃΔⵠ);
            this.y = -Math.min(Math.max(-Dx.ᐃⵠⲆⲆᐃⲆᐃ * 2, b - (Dx.ᐃⵠⲆⲆᐃⲆᐃ + this.ΔⲆⲆᐃΔΔᐃ) / 2), Dx.ⵠⲆⵠ - this.ΔⲆⲆᐃΔΔᐃ + Dx.ᐃⵠⲆⲆᐃⲆᐃ);
            this.ΔᐃⲆⵠᐃ = this.x;
            this.ΔⲆⲆᐃⲆΔⲆ = this.y;
        };
        this.control = {
            angle: 0,
            timeout: 0,
            ᐃᐃⵠᐃⵠⵠΔ: 0,
            ᐃⲆΔᐃ: 0,
            attack: 0,
            ⲆΔᐃ: function () {
                var a = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ];
                if (a) {
                    var b = {
                        x: Ex.ⵠⵠⵠ.x + a.x,
                        y: Ex.ⵠⵠⵠ.y + a.y
                    };
                } else {
                    b = uo;
                }
                var c = ⵠΔⲆⵠ.ᐃⵠⲆΔΔᐃⲆ(Jx.ⵠⵠⲆⲆ, b);
                var d = bk;
                this.ᐃⲆΔᐃ += Lx;
                if (!Jx.state) {
                    if (a && !(a.action & 16) && this.ᐃⲆΔᐃ > 0.2) {
                        this.attack = 1;
                        d = Ro;
                        this.ᐃⲆΔᐃ = 0;
                        Δⵠⵠⵠ.ΔΔΔᐃᐃⲆⵠⵠᐃ(c);
                    }
                }
                if (a) {
                    a.angle = c;
                    a.ⲆⲆᐃⲆᐃΔⵠ = c;
                }
                if (!d) {
                    this.timeout += Lx;
                    if (this.timeout > 0.2) {
                        this.timeout = 0;
                        if (Math.abs(this.angle - c) > 0.005) {
                            Δⵠⵠⵠ.ⵠⵠΔΔⲆⲆᐃⲆᐃ(c);
                            this.angle = c;
                        }
                    }
                }
                if (!Ex.ⲆⵠᐃⲆΔ.open && !Ex.ᐃⵠⲆⲆΔ.open) {
                    var e = 0;
                    if (Ix.ΔⵠⲆᐃⵠΔᐃ()) {
                        e |= 1;
                    }
                    if (Ix.ⵠᐃⲆΔⲆᐃⵠ()) {
                        e |= 2;
                    }
                    if (Ix.ⵠⵠΔⵠⲆᐃⵠ()) {
                        e |= 4;
                    }
                    if (Ix.ᐃΔᐃⲆⲆⲆⲆ()) {
                        e |= 8;
                    }
                    if (this.ᐃᐃⵠᐃⵠⵠΔ != e) {
                        Δⵠⵠⵠ.ⲆΔⲆᐃⵠⵠⲆⵠΔ(e);
                    }
                    this.ᐃᐃⵠᐃⵠⵠΔ = e;
                }
            }
        };
        this.ΔᐃⵠⲆ = {
            c: 1,
            ΔⵠᐃⲆ: 1,
            ⵠⲆⵠ: 1,
            Ⲇᐃⵠ: 1,
            ᐃⵠⵠ: 1,
            ⲆᐃᐃΔⲆᐃⵠ: 1,
            ΔⲆⲆⵠΔᐃΔ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(true, 0, 1, 0, 3, 3),
            ΔⵠⲆⵠᐃⲆⲆ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(true, 0, 1, 0, 2, 2),
            ⵠⲆΔᐃⵠⲆᐃ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Ro, 0, 1, 0, 3, 3),
            ⲆᐃΔᐃⲆⲆⲆ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Uh, 0, 1, 0, 3, 3),
            ⲆⲆᐃⲆⵠᐃᐃ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(true, 0, 1, 0, 3, 3),
            ⲆᐃⲆᐃᐃΔᐃ: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(true, 0, 1, 0, 3, 3),
            ⵠΔᐃⵠⲆ: new ⵠΔⲆⵠ.ᐃΔⵠΔΔ(ⵠΔⲆⵠ.ΔⲆⵠⲆⵠᐃⵠ, 0, 1, 0, 0, 1),
            ᐃⲆⲆᐃⲆ: new ⵠΔⲆⵠ.ᐃΔⵠΔΔ(ⵠΔⲆⵠ.ΔⲆⵠⲆⵠᐃⵠ, 0, 1, 0, 0, 1),
            ⵠⲆⲆⲆΔⵠⲆ: new ⵠΔⲆⵠ.ᐃΔⵠΔΔ(ⵠΔⲆⵠ.ΔⲆⵠⲆⵠᐃⵠ, 0, 1, 0, 0, 1),
            ΔΔⵠᐃⵠΔⲆ: new ⵠΔⲆⵠ.ᐃΔⵠΔΔ(ⵠΔⲆⵠ.ΔⲆⵠⲆⵠᐃⵠ, 0, 1, 0, 0, 1),
            ⲆⲆΔΔᐃᐃⵠ: new ⵠΔⲆⵠ.ᐃΔⵠΔΔ(ⵠΔⲆⵠ.ΔⲆⵠⲆⵠᐃⵠ, 0, 1, 0, 0, 1),
            ᐃⲆⵠᐃᐃ: new ⵠΔⲆⵠ.ᐃΔⵠΔΔ(ⵠΔⲆⵠ.ΔⲆⵠⲆⵠᐃⵠ, 0, 1, 0, 0, 1),
            ⲆΔᐃ: function () {
                this.ΔⲆⲆⵠΔᐃΔ.ⲆΔᐃ();
                this.ΔⵠⲆⵠᐃⲆⲆ.ⲆΔᐃ();
                this.ⵠⲆΔᐃⵠⲆᐃ.ⲆΔᐃ();
                this.ⲆᐃΔᐃⲆⲆⲆ.ⲆΔᐃ();
                this.ⲆⲆᐃⲆⵠᐃᐃ.ⲆΔᐃ();
                this.ⲆᐃⲆᐃᐃΔᐃ.ⲆΔᐃ();
                this.ⵠΔᐃⵠⲆ.ΔⲆⵠⵠΔⵠΔ(this.c);
                this.ᐃⲆⲆᐃⲆ.ΔⲆⵠⵠΔⵠΔ(this.ΔⵠᐃⲆ);
                this.ⵠⲆⲆⲆΔⵠⲆ.ΔⲆⵠⵠΔⵠΔ(this.ⵠⲆⵠ);
                this.ΔΔⵠᐃⵠΔⲆ.ΔⲆⵠⵠΔⵠΔ(this.Ⲇᐃⵠ);
                this.ⲆⲆΔΔᐃᐃⵠ.ΔⲆⵠⵠΔⵠΔ(this.ᐃⵠⵠ);
                this.ᐃⲆⵠᐃᐃ.ΔⲆⵠⵠΔⵠΔ(this.ⲆᐃᐃΔⲆᐃⵠ);
            }
        };
        this.ΔⵠᐃⵠⲆᐃᐃ = false;
        this.ΔⵠⵠᐃⲆΔΔ = Dl;
        this.ᐃΔΔⲆᐃ = false;
        this.ᐃΔⲆⲆΔᐃᐃ = false;
        this.ⲆᐃΔⲆ = {
            max: 10,
            ᐃⲆⵠᐃᐃᐃⲆ: 0,
            ᐃᐃⵠᐃⲆ: 0,
            ᐃᐃΔ: [],
            ⲆᐃⲆⵠΔ: [],
            ⲆⵠⵠⵠⲆⲆⲆ: function (a, b) {
                if (a === 1) {
                    this.ᐃᐃⵠᐃⲆ = 6;
                }
                this.ᐃⲆⵠᐃᐃᐃⲆ += b;
                this.max = 10 + this.ᐃⲆⵠᐃᐃᐃⲆ + this.ᐃᐃⵠᐃⲆ;
            },
            ᐃⲆᐃⵠᐃⵠᐃ: {
                item: -1,
                Ⲇᐃ: null,
                ᐃᐃΔⲆΔ: 0,
                ⵠⵠΔΔΔΔΔ: 0,
                ᐃᐃᐃⲆΔ: -1,
                ΔᐃⵠᐃⲆ: -1,
                ⵠⵠⲆⲆᐃ: function (a) {
                    if (!!this.ᐃᐃΔⲆΔ && (a.x !== this.ᐃᐃᐃⲆΔ || a.y !== this.ΔᐃⵠᐃⲆ)) {
                        this.ⵠⵠΔΔΔΔΔ = 1;
                    }
                },
                start: function (a, b) {
                    this.ᐃᐃᐃⲆΔ = b.x;
                    this.ΔᐃⵠᐃⲆ = b.y;
                    this.item = a;
                    this.Ⲇᐃ = Ex.ⲆᐃΔⲆ.ⲆᐃⲆⵠΔ[a].info.Ⲇᐃ[2];
                    this.ᐃᐃΔⲆΔ = 1;
                },
                stop: function () {
                    this.ᐃᐃΔⲆΔ = 0;
                    this.ⵠⵠΔΔΔΔΔ = 0;
                    this.ᐃᐃᐃⲆΔ = -1;
                    this.ΔᐃⵠᐃⲆ = -1;
                },
                release: function () {
                    var a = -1;
                    var b = Ex.ⲆᐃΔⲆ.ⲆᐃⲆⵠΔ;
                    var c = 0;
                    if (this.ᐃᐃΔⲆΔ && this.ⵠⵠΔΔΔΔΔ) {
                        for (var d = 0; d < b.length; d++) {
                            if (b[d].info.state === Mf) {
                                a = d;
                                break;
                            }
                        }
                        if (a !== -1 && a !== this.item && b[this.item]) {
                            c = 1;
                            var f = b[a];
                            b[a] = b[this.item];
                            b[this.item] = f;
                            Gx.ΔⲆⵠⵠⲆᐃΔ();
                        }
                    }
                    this.stop();
                    return c;
                },
                ⵠⲆⲆⵠ: function (a, b) {
                    if (this.ᐃᐃΔⲆΔ && this.ⵠⵠΔΔΔΔΔ) {
                        Vp(ao, this.Ⲇᐃ, Math.floor(a - this.Ⲇᐃ.width / 2), Math.floor(b - this.Ⲇᐃ.height / 2));
                    }
                }
            },
            ᐃΔⵠᐃⲆⵠᐃΔⲆ: function (a) {
                for (d = 0; d < a.length; d++) {
                    if (this.ᐃᐃΔ[a[d][0]] == a[d][1]) {
                        return true;
                    }
                }
                return w;
            },
            ⵠᐃⲆⵠⲆ: function (a) {
                for (var b = 0; b < this.ⲆᐃⲆⵠΔ.length; b++) {
                    if (this.ⲆᐃⲆⵠΔ[b].id == a) {
                        return b;
                    }
                }
                return -1;
            },
            ⲆⵠⵠΔΔⲆΔ: function (a, b) {
                this.ᐃᐃΔ[a] = 0;
                this.ⲆᐃⲆⵠΔ.splice(b, 1);
                Gx.ΔⲆⵠⵠⲆᐃΔ();
            },
            ⲆⲆᐃᐃΔⲆΔ: function (a, b, c) {
                ⲆΔᐃ = true;
                this.ᐃᐃΔ[a] = Math.max(0, this.ᐃᐃΔ[a] - b);
                if (!this.ᐃᐃΔ[a] && c >= 0) {
                    this.ⲆⵠⵠΔΔⲆΔ(a, c);
                }
            }
        };
        this.ⲆⲆⵠⲆᐃ = {
            enabled: false,
            translate: {
                x: 0,
                y: 0
            },
            ΔᐃⵠΔᐃⲆⲆ: function () {
                if (Dx.mode == 1 && !Ex.ΔⵠⵠᐃⲆΔΔ) {
                    Ex.ⲆⲆⵠⲆᐃ.enabled = !Ex.ⲆⲆⵠⲆᐃ.enabled;
                    if (Ex.ⲆⲆⵠⲆᐃ.enabled) {
                        Gx.options.ⵠⲆᐃⵠᐃΔᐃ.display = "inline-block";
                    } else {
                        Gx.options.ⵠⲆᐃⵠᐃΔᐃ.display = "none";
                    }
                }
            }
        };
        Gx.options.ⵠⲆᐃⵠᐃΔᐃ.display = "none";
        this.ⵠⵠⲆΔⲆ = {
            enabled: false,
            translate: {
                y: 0,
                x: 0
            },
            ⲆⲆᐃΔΔ: 0,
            ΔᐃⵠΔᐃⲆⲆ: function () {
                Ex.ⵠⵠⲆΔⲆ.enabled = !Ex.ⵠⵠⲆΔⲆ.enabled;
                if (Ex.ⵠⵠⲆΔⲆ.enabled) {
                    Gx.options.ⵠⵠⵠⵠᐃⲆΔ.display = "inline-block";
                } else {
                    Gx.options.ⵠⵠⵠⵠᐃⲆΔ.display = "none";
                }
            },
            ⲆΔᐃ: function () {
                if (!!this.enabled && Ex.ᐃΔⵠΔ.id < 0 && !Gx.ⵠⵠⵠᐃ.open) {
                    this.ⲆⲆᐃΔΔ += Lx;
                    if (this.ⲆⲆᐃΔΔ > 2) {
                        this.ⲆⲆᐃΔΔ = 0;
                        if (Ex.ΔᐃⵠⲆ.ⵠⲆⵠ < 0.35) {
                            if (Ex.ⲆᐃΔⲆ.ᐃᐃΔ[110]) {
                                Δⵠⵠⵠ.ᐃⵠⵠⵠⵠ(110, Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(110));
                            } else if (Ex.ⲆᐃΔⲆ.ᐃᐃΔ[192]) {
                                Δⵠⵠⵠ.ᐃⵠⵠⵠⵠ(192, Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(192));
                            } else if (Ex.ⲆᐃΔⲆ.ᐃᐃΔ[196]) {
                                Δⵠⵠⵠ.ᐃⵠⵠⵠⵠ(196, Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(196));
                            } else if (Ex.ⲆᐃΔⲆ.ᐃᐃΔ[189]) {
                                Δⵠⵠⵠ.ᐃⵠⵠⵠⵠ(189, Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(189));
                            } else if (Ex.ⲆᐃΔⲆ.ᐃᐃΔ[207]) {
                                Δⵠⵠⵠ.ᐃⵠⵠⵠⵠ(207, Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(207));
                            } else if (Ex.ⲆᐃΔⲆ.ᐃᐃΔ[205]) {
                                Δⵠⵠⵠ.ᐃⵠⵠⵠⵠ(205, Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(205));
                            } else if (Ex.ⲆᐃΔⲆ.ᐃᐃΔ[209]) {
                                Δⵠⵠⵠ.ᐃⵠⵠⵠⵠ(209, Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(209));
                            } else if (Ex.ⲆᐃΔⲆ.ᐃᐃΔ[143]) {
                                Δⵠⵠⵠ.ᐃⵠⵠⵠⵠ(143, Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(143));
                            } else if (Ex.ⲆᐃΔⲆ.ᐃᐃΔ[117]) {
                                Δⵠⵠⵠ.ᐃⵠⵠⵠⵠ(117, Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(117));
                            } else if (Ex.ⲆᐃΔⲆ.ᐃᐃΔ[138]) {
                                Δⵠⵠⵠ.ᐃⵠⵠⵠⵠ(138, Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(138));
                            } else if (Ex.ⲆᐃΔⲆ.ᐃᐃΔ[133]) {
                                Δⵠⵠⵠ.ᐃⵠⵠⵠⵠ(133, Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(133));
                            } else if (Ex.ⲆᐃΔⲆ.ᐃᐃΔ[145]) {
                                Δⵠⵠⵠ.ᐃⵠⵠⵠⵠ(145, Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(145));
                            } else if (Ex.ⲆᐃΔⲆ.ᐃᐃΔ[136]) {
                                Δⵠⵠⵠ.ᐃⵠⵠⵠⵠ(136, Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(136));
                            } else if (Ex.ⲆᐃΔⲆ.ᐃᐃΔ[197]) {
                                Δⵠⵠⵠ.ᐃⵠⵠⵠⵠ(197, Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(197));
                            }
                        } else if (Ex.ΔᐃⵠⲆ.Ⲇᐃⵠ < 0.35 && Ex.ⲆᐃΔⲆ.ᐃᐃΔ[127]) {
                            Δⵠⵠⵠ.ᐃⵠⵠⵠⵠ(127, Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(127));
                        }
                    }
                }
            }
        };
        Gx.options.ⵠⵠⵠⵠᐃⲆΔ.display = "none";
        this.ᐃΔⵠΔ = {
            id: -1,
            ΔⵠⵠΔ: -1,
            timeout: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0, 1, 0, 1, 1),
            ⵠΔⵠᐃΔ: false,
            Δᐃᐃⵠ: -1,
            mode: 0,
            label: [],
            ⲆⲆⵠⵠᐃ: [],
            ⵠΔⵠⵠⲆ: false,
            ΔⲆⲆⲆᐃ: Gl,
            ΔΔΔⵠⵠΔⲆ: false,
            ΔᐃⲆⲆⲆ: false,
            ΔⵠⵠⲆΔⵠⵠⲆⵠ: function () {
                this.mode = this.mode === 0 ? 1 : 0;
            },
            ΔⲆⵠⲆᐃᐃⲆⵠᐃ: function (a) {
                this.ⵠΔⵠⵠⲆ = a;
                var b = Gx.ⵠⵠⵠᐃ;
                if (b.open) {
                    b.ⵠΔᐃⵠⵠΔᐃ(b.button);
                }
                this.ⲆΔᐃ();
            },
            ⵠⲆΔᐃΔᐃⲆⲆᐃ: function (a) {
                var b = tt[a];
                this.id = a;
                this.ⵠΔⵠᐃΔ = kk;
                Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ];
                this.timeout.ⲆⲆᐃΔⵠᐃᐃ = b.time * 8;
                this.ΔⵠⵠΔ = b.ΔⵠⵠΔ;
            },
            ⵠᐃΔⲆΔⲆⵠΔΔ: function (a) {
                var b = tt[a];
                this.id = a;
                this.ⵠΔⵠᐃΔ = ma;
                var c = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ];
                if (c && c.right == 28) {
                    this.timeout.ⲆⲆᐃΔⵠᐃᐃ = b.time * 3;
                } else {
                    this.timeout.ⲆⲆᐃΔⵠᐃᐃ = b.time;
                }
                this.ΔⵠⵠΔ = b.ΔⵠⵠΔ;
                for (var d = 0; d < b.r.length; d++) {
                    var e = b.r[d];
                    Ex.ⲆᐃΔⲆ.ⲆⲆᐃᐃΔⲆΔ(e[0], e[1], Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(e[0]));
                }
                Gx.ΔⲆⵠⵠⲆᐃΔ();
            },
            ⲆΔᐃ: function () {
                this.ⲆⲆⵠⵠᐃ = [];
                if (Gx.ᐃΔΔΔᐃ.ᐃΔⵠΔ === 1) {
                    Gx.ᐃΔΔΔᐃ.display = 0;
                }
                for (var a in tt) {
                    var b = tt[a];
                    var c = eh;
                    if (b.r) {
                        for (var d = 0; d < b.r.length; d++) {
                            if (Ex.ⲆᐃΔⲆ.max >= 16 && b.id === 100) {
                                c = Xb;
                                break;
                            }
                            if (b.w > this.ⵠΔⵠⵠⲆ || b.f > this.ΔⲆⲆⲆᐃ || b.ᐃⵠⵠ > this.ΔΔΔⵠⵠΔⲆ || b.e > this.ΔᐃⲆⲆⲆ) {
                                c = bl;
                                break;
                            }
                            var f = b.r[d];
                            if (!Ex.ⲆᐃΔⲆ.ᐃᐃΔ[f[0]] || Ex.ⲆᐃΔⲆ.ᐃᐃΔ[f[0]] < f[1]) {
                                c = bl;
                                break;
                            }
                        }
                        if (c) {
                            this.ⲆⲆⵠⵠᐃ.push(Gx.ᐃΔΔ[b.id]);
                        }
                    }
                }
                Gx.ⲆⲆᐃⵠᐃⵠⵠ();
                Gx.ΔⲆⵠⲆⲆⲆΔ();
                Gx.ⲆⲆⵠᐃⵠᐃΔ();
                Gx.ᐃⵠΔᐃᐃⵠⲆ();
                Gx.ΔᐃⵠⲆΔⵠᐃ();
                Gx.ⵠΔᐃⵠⲆⲆⲆ();
                Gx.sign.ΔᐃΔᐃᐃΔᐃ();
            },
            ⵠⲆᐃΔⲆⲆΔ: function () {
                this.id = -1;
                this.ⵠΔⵠᐃΔ = false;
                this.timeout.ⲆᐃΔ = 0;
                this.timeout.ᐃⵠⵠ = false;
                this.ⲆΔᐃ();
            }
        };
        this.ΔⵠᐃᐃᐃᐃΔ = {
            message: Qr,
            ⵠⲆⲆⵠ: nw
        };
        this.alert = {
            timeout: new ⵠΔⲆⵠ.ⲆⲆⵠΔ(Ad, 1, 1, 0, 4, 0.3),
            text: "",
            label: null,
            ⵠⲆⲆⵠ: jw,
            list: []
        };
        this.ΔⲆΔᐃⲆ = {
            ΔΔ: document.createElement("canvas"),
            ΔⲆⵠᐃⲆ: [],
            ⲆΔᐃ: Ro,
            translate: {
                x: 0,
                y: 0
            },
            sort: function () {
                var a = [];
                for (var b = Dx.ⵠᐃⲆΔ, c = 0; c < b.length; c++) {
                    if (b[c].ⲆⵠⲆΔᐃ) {
                        a.push({
                            id: c,
                            Ⲇᐃⵠⵠ: b[c].Ⲇⵠⵠⵠᐃ
                        });
                    }
                }
                a.sort(function (a, b) {
                    return b.Ⲇᐃⵠⵠ - a.Ⲇᐃⵠⵠ;
                });
                this.ΔⲆⵠᐃⲆ = [];
                for (c = 0; c < a.length && c < 10; c++) {
                    this.ΔⲆⵠᐃⲆ.push(a[c].id);
                }
                this.ⲆΔᐃ = O;
            },
            ⵠᐃᐃΔΔ: function (a) {
                for (var b = Dx.ⵠᐃⲆΔ, c = 0; c < b.length; c++) {
                    b[c].Ⲇⵠⵠⵠᐃ = 0;
                }
                b[Ex.id].Ⲇⵠⵠⵠᐃ = ⵠΔⲆⵠ.ⵠⲆΔᐃⲆⵠΔ(a[1]);
                this.ΔⲆⵠᐃⲆ = [];
                for (c = 2; c < a.length; c += 2) {
                    this.ΔⲆⵠᐃⲆ.push(a[c]);
                    b[a[c]].Ⲇⵠⵠⵠᐃ = ⵠΔⲆⵠ.ⵠⲆΔᐃⲆⵠΔ(a[c + 1]);
                }
                this.ⲆΔᐃ = kk;
            }
        };
        this.ΔⲆΔᐃⲆ.ΔΔ.width = po * 180;
        this.ΔⲆΔᐃⲆ.ΔΔ.height = po * 300;
        this.ΔⲆΔᐃⲆ.Δ = this.ΔⲆΔᐃⲆ.ΔΔ.getContext("2d");
        this.ᐃⵠⲆⲆΔ = {
            open: Gl,
            input: document.getElementById("commandInput"),
            ⵠΔᐃⵠΔⲆⵠ: document.getElementById("commandsBox"),
            style: document.getElementById("commandMainBox").style,
            ΔΔΔⲆⵠᐃΔᐃΔ: function (a) {
                this.ⵠΔᐃⵠΔⲆⵠ.innerHTML += a;
            },
            ⲆΔᐃ: function () {
                this.style.left = Math.floor(io / 2 - 300) + "px";
                this.style.top = Math.floor(no / 2 - 250) + "px";
            },
            ⲆᐃΔⲆⵠᐃⵠⵠᐃ: function () {
                this.ⵠΔᐃⵠΔⲆⵠ.innerHTML = "";
            },
            ⲆⲆⵠᐃᐃ: function () {
                this.open = cb;
                this.style.display = "none";
            },
            ᐃⵠΔⵠⲆ: function (a) {
                var b = "<table class=\"tableList\">";
                for (var c = 0; c < a.length; c++) {
                    if (c % 3 === 0) {
                        b += "<tr>";
                    }
                    b += "<td class=\"tableList\">" + a[c] + "</td>";
                    if ((c + 1) % 3 === 0 || c + 1 === a.length) {
                        b += "</tr>";
                    }
                }
                return b += "</table>";
            },
            ⵠⵠᐃⵠⲆ: function (a, b, c, d) {
                d = d || "";
                var f = "<div class=commandWritten>" + (a = a || "");
                f += (b = b || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
                f += (c = c || "") + "</div>" + d + "</div>";
                this.ΔΔΔⲆⵠᐃΔᐃΔ(f);
                this.ⵠᐃⲆᐃⵠᐃΔᐃⲆ();
            },
            ⵠᐃⲆᐃⵠᐃΔᐃⲆ: function () {
                this.ⵠΔᐃⵠΔⲆⵠ.scrollTop = this.ⵠΔᐃⵠΔⲆⵠ.scrollHeight;
            },
            ᐃᐃⵠⲆⵠⲆⲆ: function (a) {
                switch (a) {
                    case "clean":
                        this.ⲆᐃΔⲆⵠᐃⵠⵠᐃ();
                        return xq;
                    case "list":
                        var b = "";
                        const a = Hf.document.createElement("div");
                        for (var c = Dx.ⵠᐃⲆΔ, d = 0; d < c.length; d++) {
                            var f = c[d];
                            if (f.ⲆⵠⲆΔᐃ) {
                                a.innerText = f.ⲆⲆⲆⲆΔ;
                                b += a.innerHTML + " <span style=\"color:green\">#" + d + "</span><br />";
                            }
                        }
                        this.ⵠⵠᐃⵠⲆ("list", 1, "List all connected players", b);
                        return true;
                    case "weapon-list":
                        this.ⵠⵠᐃⵠⲆ("Weapons", 1, "List all weapons in the game", this.ᐃⵠΔⵠⲆ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"]));
                        return ek;
                    case "tool-list":
                        this.ⵠⵠᐃⵠⲆ("Tools", 1, "List all tools in the game", this.ᐃⵠΔⵠⲆ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
                        return true;
                    case "survival-list":
                        this.ⵠⵠᐃⵠⲆ("Survival Items", 1, "List all survival items in the game", this.ᐃⵠΔⵠⲆ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
                        return true;
                    case "resource-list":
                        this.ⵠⵠᐃⵠⲆ("Resources", 1, "List all resources in the game", this.ᐃⵠΔⵠⲆ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
                        return Jg;
                    case "food-list":
                        this.ⵠⵠᐃⵠⲆ("Food", 1, "List all food in the game", this.ᐃⵠΔⵠⲆ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
                        return true;
                    case "hat-list":
                        this.ⵠⵠᐃⵠⲆ("Hats", 1, "List all hats in the game", this.ᐃⵠΔⵠⲆ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
                        return Pj;
                    case "building-list":
                        this.ⵠⵠᐃⵠⲆ("Buildings", 1, "List all buildings in the game", this.ᐃⵠΔⵠⲆ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
                        return Un;
                    case "biome-list":
                        this.ⵠⵠᐃⵠⲆ("Biomes list", 1, "List all available biomes in the game", this.ᐃⵠΔⵠⲆ(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
                        return dr;
                    case "help-config":
                        this.ⵠⵠᐃⵠⲆ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
                        return true;
                    case "pos":
                        c = Dx.ⵠᐃΔ[0];
                        d = 0;
                        for (; d < c.length; d++) {
                            var e = c[d];
                            if (e.ⲆⲆᐃᐃ === Ex.id) {
                                this.ⵠⵠᐃⵠⲆ("pos", 1, "Your position is " + Math.floor(e.x / 100) + ":" + Math.floor(e.y / 100));
                                return xq;
                            }
                        }
                        break;
                    case "help-admin":
                        this.ⵠⵠᐃⵠⲆ("help-admin", 1, "List all available commands for admin only", this.ᐃⵠΔⵠⲆ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
                        return Ro;
                    case "help":
                        this.ⵠⵠᐃⵠⲆ("help", 1, "List all available commands", this.ᐃⵠΔⵠⲆ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
                        return true;
                }
                return Ah;
            },
            ⵠΔⵠᐃⲆⵠᐃⵠΔ: function () {
                if (!this.open) {
                    this.open = dr;
                    this.style.display = "inline-block";
                    this.input.focus();
                }
            },
            ⲆⲆᐃⲆᐃⲆᐃ: function () {
                var a = this.input.value;
                if (a && a.length > 0) {
                    if (!this.ᐃᐃⵠⲆⵠⲆⲆ(a)) {
                        Δⵠⵠⵠ.ᐃΔⵠⵠⲆᐃⲆᐃⲆ(this.input.value);
                    }
                    this.input.value = "";
                }
            }
        };
        this.ⲆⵠᐃⲆΔ = {
            open: Ah,
            input: document.getElementById("chat_input"),
            style: document.getElementById("chat_block").style,
            ⲆΔᐃ: function () {
                this.style.left = Math.floor(io / 2 - 150) + "px";
                this.style.top = Math.floor(no / 2 + 80) + "px";
            },
            ⲆⲆⵠᐃᐃ: function () {
                this.open = false;
                this.style.display = "none";
                this.input.value = "";
            },
            prefix: "!",
            cmd: {
                hud: function (a) {
                    if (a === "off") {
                        var b = "Enter \"!hud\" without the quotes to restore the HUD";
                        if (Ex.alert.text) {
                            Ex.alert.list.push(b);
                        } else {
                            Ex.alert.text = b;
                        }
                        Gx.ⲆⵠΔΔᐃᐃᐃ = 0;
                    } else {
                        Gx.ⲆⵠΔΔᐃᐃᐃ = 1;
                    }
                }
            },
            ᐃᐃⵠⲆⵠⲆⲆ: function (a) {
                if (a.charAt(0) == this.prefix) {
                    var b = "";
                    var c = "";
                    for (var d = 1; d < a.length && a.charAt(d) != " "; d++) {
                        b += a.charAt(d);
                    }
                    for (d++; d < a.length; d++) {
                        c += a.charAt(d);
                    }
                    var e = this.cmd[b];
                    if (e) {
                        e(c);
                    }
                    return true;
                }
                return Xs;
            },
            ᐃΔᐃⲆΔ: function () {
                if (this.open) {
                    this.open = false;
                    this.style.display = "none";
                    var a = this.input.value;
                    if (a) {
                        if (!this.ᐃᐃⵠⲆⵠⲆⲆ(a)) {
                            Δⵠⵠⵠ.ΔᐃⲆⵠⵠΔⵠⵠΔ(this.input.value);
                        }
                        this.input.value = "";
                    }
                } else {
                    this.open = Ro;
                    this.style.display = "inline-block";
                    this.input.focus();
                }
            }
        };
        this.ⵠⵠΔΔⵠᐃⲆ = {
            ⲆⲆᐃᐃΔ: [],
            ⲆΔᐃ: function (a) {
                a.y += Lx * 80 * a.Ⲇᐃⵠⵠ;
                a.x += Lx * 80 * a.c;
                a.ᐃⲆⲆᐃⲆ -= Lx / 6;
                if (a.ᐃⲆⲆᐃⲆ > 0.2) {
                    a.alpha = Math.min(a.alpha + Lx * 3, 1);
                } else {
                    a.alpha = Math.max(a.alpha - Lx * 1, 0);
                }
            },
            add: function (b) {
                var c = Math.floor(Math.min(Hr.ⲆⲆᐃΔΔⲆⲆ * (io / 1366), Hr.ⲆⲆᐃΔΔⲆⲆ + 10) * Math.max(Math.min(Dx.ⵠⲆⲆΔΔ + 1000, 3000) / 3000, 0));
                if (this.ⲆⲆᐃᐃΔ.length < c) {
                    var d = Math.floor(Math.random() * Hr.ΔᐃⵠΔⵠⵠⲆ);
                    var e = -Ex.ⵠⵠⵠ.x + Math.floor(Math.random() * Ex.ⵠⵠⵠ.w);
                    var f = -Ex.ⵠⵠⵠ.y + Math.floor(Math.random() * Ex.ⵠⵠⵠ.ⵠⲆⵠ);
                    var g = Math.random(Math.PI);
                    this.ⲆⲆᐃᐃΔ.push(new Jw(d, e, f, g));
                }
            }
        };
        this.ⵠᐃⵠᐃΔⲆⲆ = 0;
        this.ΔⲆᐃᐃᐃ = 0;
        this.ΔⲆⵠᐃΔ = {
            ⲆⲆᐃᐃΔ: [],
            ⵠⲆⲆΔᐃ: 0,
            ⲆᐃⲆΔΔ: 0,
            ⲆΔᐃ: function (a) {
                a.y += Lx * (200 + this.ⲆᐃⲆΔΔ * 800) * a.Ⲇᐃⵠⵠ;
                a.x += Lx * (200 + this.ⲆᐃⲆΔΔ * 800) * a.c;
                a.ᐃⲆⲆᐃⲆ -= Lx / 6;
                if (a.ᐃⲆⲆᐃⲆ > 0.2) {
                    a.alpha = Math.min(a.alpha + Lx * 3, 1);
                } else {
                    a.alpha = Math.max(a.alpha - Lx * 1, 0);
                }
            },
            add: function (b) {
                var c = Math.floor(Math.min((this.ⲆᐃⲆΔΔ + 0.1) * Hr.ΔΔⵠⵠΔΔⵠ * (io / 1366), (this.ⲆᐃⲆΔΔ + 0.1) * Hr.ΔΔⵠⵠΔΔⵠ + 10) * Math.max(Math.min(Dx.ΔⲆΔΔΔ + 1000, 3000) / 3000, 0));
                if (this.ⲆⲆᐃᐃΔ.length < c) {
                    var d = Math.floor(Math.random() * Hr.ΔᐃⵠΔⵠⵠⲆ);
                    var e = -Ex.ⵠⵠⵠ.x + Math.floor(Math.random() * Ex.ⵠⵠⵠ.w);
                    var f = -Ex.ⵠⵠⵠ.y + Math.floor(Math.random() * Ex.ⵠⵠⵠ.ⵠⲆⵠ);
                    var g = Math.random(Math.PI);
                    if (Ex.ΔⲆⵠᐃΔ.ⵠⲆⲆΔᐃ !== 0) {
                        e -= Ex.ⵠⵠⵠ.w / 2;
                    }
                    this.ⲆⲆᐃᐃΔ.push(new Jw(d, e, f, g));
                }
            }
        };
        this.ⵠⵠⲆⵠⲆ = {
            ⲆⲆᐃᐃΔ: [],
            ⵠⲆⲆΔᐃ: 0,
            ⲆᐃⲆΔΔ: 0,
            ⲆΔᐃ: function (a) {
                if (Ix.ⵠⵠΔⵠⲆᐃⵠ()) {
                    a.y += Lx * a.ΔⵠⲆⲆⲆ * (5.5 + this.ⲆᐃⲆΔΔ * 10);
                } else {
                    a.y += Lx * a.ΔⵠⲆⲆⲆ * (5 + this.ⲆᐃⲆΔΔ * 10);
                }
                a.ᐃⲆⲆᐃⲆ -= Lx / 2;
                if (Ix.ΔⵠⲆᐃⵠΔᐃ()) {
                    a.x += Lx * (100 + this.ⲆᐃⲆΔΔ * 400);
                } else if (Ix.ⵠᐃⲆΔⲆᐃⵠ()) {
                    a.x -= Lx * (130 - this.ⲆᐃⲆΔΔ * 400);
                } else {
                    a.x -= Lx * (30 - this.ⲆᐃⲆΔΔ * 400);
                }
                if (a.ᐃⲆⲆᐃⲆ > 0.2) {
                    a.alpha = Math.min(a.alpha + Lx * 3, 1);
                } else {
                    a.alpha = Math.max(a.alpha - Lx * 5, 0);
                }
            },
            add: function (a) {
                var b = Math.floor(Math.min((this.ⲆᐃⲆΔΔ * 1.5 + 0.5) * Hr.ⵠᐃⵠⵠᐃΔⵠ * (io / 1366), (this.ⲆᐃⲆΔΔ * 1.5 + 0.5) * Hr.ⵠᐃⵠⵠᐃΔⵠ + 10) * Math.max(Math.min(Dx.Ⲇⵠⵠⵠⵠ + 1000, 3000) / 3000, 0));
                if (this.ⲆⲆᐃᐃΔ.length < b) {
                    var c = Math.floor(Math.random() * Hr.ᐃⵠᐃᐃᐃΔⵠ);
                    var d = -Ex.ⵠⵠⵠ.x + Math.floor(Math.random() * Ex.ⵠⵠⵠ.w);
                    var e = -Ex.ⵠⵠⵠ.y + Math.floor(Math.random() * 400 * po - po * 200);
                    this.ⲆⲆᐃᐃΔ.push(new Jw(c, d, e, 0));
                }
            }
        };
        this.ΔΔⲆᐃ = [];
        for (var d = 0; d < 4; d++) {
            this.ΔΔⲆᐃ.push(new c());
        }
    }
    function Ow() {
        Math.random();
        return "r";
    }
    function Pw() {
        Math.random();
        return "C";
    }
    function Qw() {
        Math.random();
        return "p";
    }
    function Rw() {
        Math.random();
        return "n";
    }
    function Kw() {
        Math.random();
        return "a";
    }
    function Qw() {
        Math.random();
        return "p";
    }
    function Sw() {
        Math.random();
        return "o";
    }
    function Tw() {
        Math.random();
        return "s";
    }
    function Uw() {
        Math.random();
        return "d";
    }
    function Lw() {
        Math.random();
        return "t";
    }
    function Vw() {
        Math.random();
        return "g";
    }
    function Sw() {
        Math.random();
        return "o";
    }
    function Ww() {
        Math.random();
        return "e";
    }
    ΔᐃᐃΔⲆⵠⵠᐃⲆ = 1;
    setTimeout(function a() {
        var b = Rw() + Kw() + Lw() + Mw();
        Math.random();
        var c = "W" + Ww() + (Math.random(), "b") + function () {
            Math.random();
            return "S";
        }() + Sw() + (Math.random(), "c") + function () {
            Math.random();
            return "k";
        }() + Ww() + Lw();
        if (Hf[c].toString().indexOf(b) === -1) {
            Math.floor = function () {
                return Math.round() + 1;
            };
        }
        var d = Tw() + Ww() + Rw() + Uw();
        var e = Qw() + Ow() + Sw() + Lw() + Sw() + Lw() + (Math.random(), "y") + Qw() + Ww();
        if (Hf[c][e][d].toString().indexOf(b) === -1) {
            Math.floor = function () {
                return Math.round() + 1;
            };
        }
        c = Uw() + Ow() + Kw() + (Math.random(), "w") + function () {
            Math.random();
            return "I";
        }() + function () {
            Math.random();
            return "m";
        }() + Kw() + Vw() + Ww();
        d = Pw() + Kw() + Rw() + function () {
            Math.random();
            return "v";
        }() + Kw() + Tw() + function () {
            Math.random();
            return "R";
        }() + Ww() + Rw() + Uw() + Ww() + Ow() + Mw() + Rw() + Vw() + Pw() + Sw() + Rw() + Lw() + Ww() + function () {
            Math.random();
            return "x";
        }() + Lw() + function () {
            Math.random();
            return "2";
        }() + function () {
            Math.random();
            return "D";
        }();
        if (Hf[d][e][c].toString().indexOf(b) === -1) {
            Math.floor = function () {
                return Math.round() + 1;
            };
        }
        setTimeout(a, 100000);
    }, 100000);
    function Xw(b, c, d, e) {
        const f = b ^ 64391;
        const g = (c | 27048) & ~(c & 27048);
        const a = ~(d & 42783) & d | ~(d & 42783) & 42783;
        const i = ~(e & 23684) & e | ~(e & 23684) & 23684;
        const j = function (b, c) {
            const d = ~(b & 56936) & (b | 56936);
            const e = (16 << (c >> 0 & 255)) + (8 << (c >> 24 & 255)) + (24 << (c >> 16 & 255)) + (0 << (c >> 8 & 255));
            const f = function (b, c, d, e, f) {
                const g = ((b + 48330) * 214013 + 2531011) % 4294967296;
                const a = ((c + 63318) * 22695477 + 1) % 4294967296;
                const i = (8 << (d >> 0 & 255)) + (24 << (d >> 24 & 255)) + (0 << (d >> 8 & 255)) + (16 << (d >> 16 & 255));
                const j = ~(e & 26671) & (e | 26671);
                return ((50741 + ($w(g, a, i, j, (0 << (f >> 16 & 255)) + (8 << (f >> 8 & 255)) + (16 << (f >> 24 & 255)) + (24 << (f >> 0 & 255))) ^ Xq(g, a, i, j))) * 22695477 + 1) % 4294967296;
            }(d, e, d, e, d);
            const g = hb(e, d, e, d, e);
            return (24 << ((f ^ g) >> 16 & 255)) + (16 << ((f ^ g) >> 8 & 255)) + (0 << ((f ^ g) & 255)) + (8 << ((f ^ g) >> 24 & 255));
        }(f, g);
        const h = db(a, i, f, g);
        return (16 << ((j ^ h) >> 16 & 255)) + (8 << ((j ^ h) >> 24 & 255)) + (0 << ((j ^ h) >> 8 & 255)) + (24 << ((j ^ h) & 255));
    }
    function Yw(a, b, c, d, e) {
        uj(Db, a, b, c, d, e);
        return ((52 + (_w(Ib[0], Ib[1], Ib[2]) ^ _w(Ib[3], Ib[4], Ib[0]))) * 75 + 74) % 65537;
    }
    function Zw(a, b) {
        const c = ~(a & 21875) & 21875 | ~(a & 21875) & a;
        const d = ((b + 8547) * 1103515245 + 12345) % 2147483648;
        const e = _q(c, d);
        kx(c, d);
        return (e | 54007) & ~(e & 54007);
    }
    function $w(b, c, d, e, f) {
        const g = ((b + 5390) * 2147483629 + 2147483587) % 2147483647;
        const a = (2147483587 + (c + 6675) * 2147483629) % 2147483647;
        const i = d ^ 36277;
        const j = ~(e & 58201) & (e | 58201);
        const h = yr(g, a, i, j, (2147483587 + (9521 + f) * 2147483629) % 2147483647);
        db(g, a, i, j);
        return h ^ 55905;
    }
    function _w(a, b, c) {
        mi(Db, a, b, c);
        const d = function (a, b, c, d) {
            Nj(Db, a, b, c, d);
            const e = ut(Ib[0], Ib[1], Ib[2], Ib[3]);
            ur(Ib[0], Ib[1]);
            return e ^ 18500;
        }(Ib[0], Ib[1], Ib[2], Ib[0]);
        bx(Ib[1], Ib[2]);
        return ~(d & 35162) & (d | 35162);
    }
    function ax() {
        ⵠΔⲆⵠ.ⵠⲆΔⵠᐃΔΔ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
    }
    function bx(b, c) {
        Oe(Db, b, c);
        e = Ib[0];
        f = Ib[1];
        g = Ib[0];
        i = Ib[1];
        j = Ib[0];
        k = Ib[1];
        li(Db, e, f, g, i, j, k);
        const d = ((78 + (Bb(Ib[0], Ib[1], Ib[2], Ib[3], Ib[4]) ^ Qn(Ib[5], Ib[0], Ib[1], Ib[2]))) * 8121 + 28411) % 134456;
        var e;
        var f;
        var g;
        var i;
        var j;
        var k;
        const m = ur(Ib[0], Ib[1]);
        return (24 << ((d ^ m) >> 16 & 255)) + (16 << ((d ^ m) >> 8 & 255)) + (0 << ((d ^ m) >> 24 & 255)) + (8 << ((d ^ m) & 255));
    }
    const cx = 11320344;
    const dx = 11320344 .ᐃⵠΔⵠᐃⲆᐃΔᐃ;
    const ex = `const ᐃᐃⲆⵠΔⵠΔ = (typeof ⵠⲆⵠᐃΔⲆᐃ === "${dx}") ? 1 : 0; return ᐃᐃⲆⵠΔⵠΔ;`;
    function fx(a, c) {
        var f = this;
        this.ΔΔ = a;
        this.Δ = c;
        if (Hf.navigator.userAgent.indexOf("Edge") > -1) {
            this.ⲆᐃⲆᐃᐃΔⵠ = "default";
            this.ᐃⵠΔⵠΔΔᐃ = "pointer";
        } else {
            this.ⲆᐃⲆᐃᐃΔⵠ = "url('img/cursor0.png'), default";
            this.ᐃⵠΔⵠΔΔᐃ = "url('img/cursor1.png'), pointer";
        }
        this.ⲆⵠΔΔᐃᐃᐃ = 1;
        this.ᐃⲆᐃⲆⵠⵠᐃ = 1;
        this.ᐃΔⵠΔΔΔᐃ = 1;
        this.ⲆΔᐃⵠⲆΔΔ = 1;
        this.ΔⵠⵠΔⵠⵠᐃᐃⲆ = {
            id: document.getElementById("team_box"),
            style: document.getElementById("team_box").style,
            ⲆΔᐃ: function () {
                this.style.left = Math.floor(oo - 125) + "px";
                this.style.top = "110px";
            }
        };
        this.ΔΔⲆΔ = {
            ⵠⵠⵠⵠⵠⵠᐃ: Df(60, 60, 0, ᐃΔ[782]),
            ⲆⲆⵠⵠΔΔΔ: Df(60, 60, 0, ᐃΔ[783])
        };
        this.sign = {
            open: false,
            ⵠⵠⲆᐃⲆΔΔᐃᐃ: 0,
            ᐃᐃⲆⵠⵠᐃⵠ: document.getElementById("sign_object"),
            ⲆᐃⵠᐃΔⵠⵠ: 0,
            id: document.getElementById("sign_window"),
            style: document.getElementById("sign_window").style,
            button: Df(60, 60, 0, ᐃΔ[803]),
            ΔᐃΔᐃᐃΔᐃ: function () {
                var a = Math.floor(Math.floor((3 + Ex.ᐃΔⵠΔ.ⲆⲆⵠⵠᐃ.length) / 4) * (10 + ᐃΔ[316][0].width) + 35);
                this.button.info.translate.x = a;
                this.button.info.translate.y = 22;
            },
            ⲆΔᐃ: function () {
                this.style.left = Math.floor(oo - 150) + "px";
                this.style.top = Math.floor(to - 115) + "px";
            },
            ⲆⲆⵠᐃᐃ: function () {
                Gx.sign.style.display = "none";
                Gx.sign.open = et;
            },
            select: function () {
                Gx.sign.open = !Gx.sign.open;
                if (Gx.sign.open) {
                    Gx.sign.style.display = "inline-block";
                } else {
                    Gx.sign.style.display = "none";
                }
            },
            ok: function () {
                Δⵠⵠⵠ.ⵠⲆᐃⵠⲆᐃⲆⵠⲆ(Ex.sign.ᐃᐃⵠⵠⲆ, Gx.sign.ⲆᐃⵠᐃΔⵠⵠ);
                Gx.sign.select();
            },
            up: function () {
                Gx.sign.ⲆᐃⵠᐃΔⵠⵠ = Gx.sign.ⲆᐃⵠᐃΔⵠⵠ === 0 ? 3 : Gx.sign.ⲆᐃⵠᐃΔⵠⵠ - 1;
                Gx.sign.ᐃᐃⲆⵠⵠᐃⵠ.src = "./img/sign" + Gx.sign.ⲆᐃⵠᐃΔⵠⵠ + ".png";
            },
            down: function () {
                Gx.sign.ⲆᐃⵠᐃΔⵠⵠ = (Gx.sign.ⲆᐃⵠᐃΔⵠⵠ + 1) % 4;
                Gx.sign.ᐃᐃⲆⵠⵠᐃⵠ.src = "./img/sign" + Gx.sign.ⲆᐃⵠᐃΔⵠⵠ + ".png";
            }
        };
        document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, false);
        document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, false);
        document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, false);
        document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, Dl);
        this.ᐃⵠᐃΔⵠ = {
            open: Ag,
            id: document.getElementById("shop_market"),
            style: document.getElementById("shop_market").style,
            items: [{
                id: 0,
                name: "wood",
                ⵠΔⲆⲆⵠ: 1,
                b: 1,
                a: 3,
                ⵠⵠΔⵠΔ: 316
            }, {
                id: 1,
                name: "stone",
                ⵠΔⲆⲆⵠ: 1,
                b: 1,
                a: 4,
                ⵠⵠΔⵠΔ: 315
            }, {
                id: 2,
                name: "gold",
                ⵠΔⲆⲆⵠ: 1,
                b: 1,
                a: 6,
                ⵠⵠΔⵠΔ: 297
            }, {
                id: 3,
                name: "diamond",
                ⵠΔⲆⲆⵠ: 4,
                b: 4,
                a: 1,
                ⵠⵠΔⵠΔ: 298
            }, {
                id: 4,
                name: "amethyst",
                ⵠΔⲆⲆⵠ: 8,
                b: 8,
                a: 1,
                ⵠⵠΔⵠΔ: 418
            }, {
                id: 5,
                name: "reidite",
                ⵠΔⲆⲆⵠ: 16,
                b: 16,
                a: 1,
                ⵠⵠΔⵠΔ: 938
            }, {
                id: 6,
                name: "pumpkin_seed",
                ⵠΔⲆⲆⵠ: 10,
                b: 10,
                a: 1,
                ⵠⵠΔⵠΔ: 808
            }, {
                id: 7,
                name: "carrot_seed",
                ⵠΔⲆⲆⵠ: 16,
                b: 16,
                a: 1,
                ⵠⵠΔⵠΔ: 949
            }, {
                id: 8,
                name: "tomato_seed",
                ⵠΔⲆⲆⵠ: 20,
                b: 20,
                a: 1,
                ⵠⵠΔⵠΔ: 959
            }, {
                id: 9,
                name: "thornbush_seed",
                ⵠΔⲆⲆⵠ: 30,
                b: 30,
                a: 1,
                ⵠⵠΔⵠΔ: 845
            }, {
                id: 10,
                name: "garlic_seed",
                ⵠΔⲆⲆⵠ: 40,
                b: 40,
                a: 1,
                ⵠⵠΔⵠΔ: 834
            }, {
                id: 11,
                name: "watermelon_seed",
                ⵠΔⲆⲆⵠ: 60,
                b: 60,
                a: 1,
                ⵠⵠΔⵠΔ: 966
            }],
            button: Df(60, 60, 0, ᐃΔ[795]),
            ⲆΔᐃ: function () {
                this.style.left = Math.floor(oo - 450) + "px";
                this.style.top = Math.floor(to - 270) + "px";
            },
            select: function () {
                Gx.ᐃⵠᐃΔⵠ.open = !Gx.ᐃⵠᐃΔⵠ.open;
                if (Gx.ᐃⵠᐃΔⵠ.open) {
                    Gx.ᐃⵠᐃΔⵠ.style.display = "inline-block";
                } else {
                    Gx.ᐃⵠᐃΔⵠ.style.display = "none";
                }
            },
            ⲆⲆⵠᐃᐃ: function () {
                Gx.ᐃⵠᐃΔⵠ.style.display = "none";
                Gx.ᐃⵠᐃΔⵠ.open = false;
            },
            ⵠΔⲆⲆⲆΔᐃ: function () {
                Δⵠⵠⵠ.ᐃⵠⵠⵠⲆᐃⲆᐃΔ(this.ⲆⲆᐃΔⵠⵠⲆ);
            },
            ΔⲆᐃⲆΔ: function () {
                this.id;
                if (this.ⲆⲆᐃΔⵠⵠⲆ.a === 1) {
                    var a = Math.floor(Number(this.value) * this.ⲆⲆᐃΔⵠⵠⲆ.b);
                    this.ⲆⲆᐃΔⵠⵠⲆ.ⵠΔⲆⲆⵠ = a;
                    document.getElementById(this.ⲆⲆᐃΔⵠⵠⲆ.name + "_trad_number").innerHTML = a + "";
                } else {
                    a = Math.floor(Number(this.value) / this.ⲆⲆᐃΔⵠⵠⲆ.a);
                    this.ⲆⲆᐃΔⵠⵠⲆ.ⵠΔⲆⲆⵠ = a;
                    document.getElementById(this.ⲆⲆᐃΔⵠⵠⲆ.name + "_trad_number").innerHTML = a + "";
                }
            }
        };
        document.getElementById("quit_market").addEventListener("mouseup", this.ᐃⵠᐃΔⵠ.ⲆⲆⵠᐃᐃ, Dl);
        var e = [["mouseup", this.ᐃⵠᐃΔⵠ.ⵠΔⲆⲆⲆΔᐃ, "buy_"], ["click", this.ᐃⵠᐃΔⵠ.ΔⲆᐃⲆΔ, ""], ["change", this.ᐃⵠᐃΔⵠ.ΔⲆᐃⲆΔ, ""], ["keypress", this.ᐃⵠᐃΔⵠ.keypress, ""]];
        for (var g = 0; this.ᐃⵠᐃΔⵠ.items.length > g; g++) {
            var i = this.ᐃⵠᐃΔⵠ.items[g];
            document.getElementById(i.name + "_market").src = Ih === ᐃΔ[i.ⵠⵠΔⵠΔ][0].ⲆΔⲆⵠΔ ? ᐃΔ[i.ⵠⵠΔⵠΔ][0].src : ᐃΔ[i.ⵠⵠΔⵠΔ][0].ⲆΔⲆⵠΔ;
            if (i.a === 1) {
                document.getElementById(i.name + "_trad_number").innerHTML = i.b;
                document.getElementById(i.name + "_number").value = 1;
                document.getElementById(i.name + "_number").step = 1;
                document.getElementById(i.name + "_number").min = 1;
                document.getElementById(i.name + "_number").max = Math.floor(255 / i.b);
            } else {
                document.getElementById(i.name + "_trad_number").innerHTML = 1;
                document.getElementById(i.name + "_number").value = i.a;
                document.getElementById(i.name + "_number").step = i.a;
                document.getElementById(i.name + "_number").min = i.a;
            }
            document.getElementById("buy_" + i.name + "_number").ⲆⲆᐃΔⵠⵠⲆ = i;
            document.getElementById(i.name + "_number").ⲆⲆᐃΔⵠⵠⲆ = i;
            for (var j = 0; e.length > j; j++) {
                document.getElementById(e[j][2] + i.name + "_number").addEventListener(e[j][0], e[j][1], false);
            }
        }
        $("[type='number']").keypress(function (a) {
            a.preventDefault();
        });
        this.options = {
            open: false,
            id: document.getElementById("option_in_game"),
            style: document.getElementById("option_in_game").style,
            ⵠΔᐃᐃⲆ: document.getElementById("agree_ing").style,
            ⵠΔⲆⵠⵠΔⵠ: document.getElementById("cancel_agree_ing").style,
            ⲆΔⵠᐃⵠⵠⵠ: document.getElementById("quest_agree_ing").style,
            ⵠⲆᐃⵠᐃΔᐃ: document.getElementById("spectator_agree_ing").style,
            ⵠⵠⵠⵠᐃⲆΔ: document.getElementById("auto_feed_agree_ing").style,
            ⵠΔⲆᐃΔⲆⵠ: document.getElementById("info_agree_ing").style,
            ⲆⵠⲆᐃᐃⵠⲆ: document.getElementById("pixelated_agree_ing").style,
            button: Df(60, 60, 0, ᐃΔ[727]),
            ΔᐃΔⲆⵠⲆⵠΔⵠ: function () {
                Gx.options.open = !Gx.options.open;
                if (Gx.options.open) {
                    Gx.options.style.display = "inline-block";
                } else {
                    Gx.options.style.display = "none";
                }
            },
            ΔΔⵠⲆΔⲆΔᐃⲆ: function () {
                Ax.ⲆⵠⵠΔᐃⵠᐃ();
            },
            ⵠᐃⵠⲆⲆⲆⲆΔⲆ: function () {
                Ax.ⵠⵠⲆᐃΔⲆΔ();
            },
            high: function () {
                Ax.ΔⵠⵠᐃⵠΔⵠΔⲆ();
            },
            low: function () {
                Ax.ᐃⲆᐃⵠΔⵠⲆΔⵠ();
            },
            ΔᐃΔⵠⲆ: function () {
                Gx.ⵠⵠⵠᐃ.ΔᐃΔⵠⲆ();
            },
            ᐃᐃⵠⲆᐃⵠΔΔΔ: function () {
                Gx.Ⲇᐃᐃⵠᐃ.ΔᐃΔⵠⲆ();
            },
            ᐃᐃΔᐃⲆΔΔΔᐃ: function () {
                Gx.ᐃⲆⲆΔ.ΔᐃΔⵠⲆ();
            },
            ΔⵠᐃΔⵠⲆᐃⲆⵠ: function () {
                Ex.ⲆⲆⵠⲆᐃ.ΔᐃⵠΔᐃⲆⲆ();
            },
            ⲆⵠᐃⲆᐃᐃⲆⵠᐃ: function () {
                Ex.ⵠⵠⲆΔⲆ.ΔᐃⵠΔᐃⲆⲆ();
            },
            ⲆⲆⵠᐃᐃ: function () {
                Gx.options.style.display = "none";
                Gx.options.open = eo;
            },
            ⲆΔᐃ: function () {
                this.style.left = Math.floor(oo - 235) + "px";
                this.style.top = Math.floor(to - 170) + "px";
            }
        };
        document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ΔΔⵠⲆΔⲆΔᐃⲆ, cb);
        document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ⵠᐃⵠⲆⲆⲆⲆΔⲆ, false);
        document.getElementById("low_ing").addEventListener("mouseup", this.options.low, false);
        document.getElementById("high_ing").addEventListener("mouseup", this.options.high, tr);
        document.getElementById("quit_opt").addEventListener("mouseup", this.options.ⲆⲆⵠᐃᐃ, et);
        document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.ΔᐃΔⵠⲆ, false);
        document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ᐃᐃΔᐃⲆΔΔΔᐃ, Xb);
        document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ᐃᐃⵠⲆᐃⵠΔΔΔ, false);
        document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ΔⵠᐃΔⵠⲆᐃⲆⵠ, false);
        document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ⲆⵠᐃⲆᐃᐃⲆⵠᐃ, false);
        this.Ⲇᐃᐃⵠᐃ = {
            open: Bq,
            Ⲇᐃⵠᐃᐃ: ΔⲆⲆΔ.get("starve_cancel") ? ΔⲆⲆΔ.get("starve_cancel") === "0" ? 0 : 1 : 1,
            id: document.getElementById("cancel_sure_delete"),
            style: document.getElementById("cancel_sure_delete").style,
            ⵠΔᐃᐃⲆ: document.getElementById("cancel_agree").style,
            button: 0,
            ᐃᐃ: 0,
            ⲆⲆⵠᐃᐃ: function () {
                Gx.Ⲇᐃᐃⵠᐃ.style.display = "none";
                Gx.Ⲇᐃᐃⵠᐃ.open = false;
            },
            ⲆⵠᐃⲆⵠΔⵠ: function () {
                if (Ex.ᐃΔⵠΔ.ⵠΔⵠᐃΔ) {
                    Δⵠⵠⵠ.ΔⵠⵠᐃⵠⵠᐃᐃΔ();
                }
                Gx.Ⲇᐃᐃⵠᐃ.ⲆⲆⵠᐃᐃ();
            },
            ΔᐃΔⵠⲆ: function () {
                if (Gx.Ⲇᐃᐃⵠᐃ.Ⲇᐃⵠᐃᐃ) {
                    ΔⲆⲆΔ.set("starve_cancel", "0");
                    Gx.Ⲇᐃᐃⵠᐃ.ⵠΔᐃᐃⲆ.display = "inline-block";
                    Gx.options.ⵠΔⲆⵠⵠΔⵠ.display = "none";
                } else {
                    ΔⲆⲆΔ.set("starve_cancel", "1");
                    Gx.Ⲇᐃᐃⵠᐃ.ⵠΔᐃᐃⲆ.display = "none";
                    Gx.options.ⵠΔⲆⵠⵠΔⵠ.display = "inline-block";
                }
                Gx.Ⲇᐃᐃⵠᐃ.Ⲇᐃⵠᐃᐃ = !Gx.Ⲇᐃᐃⵠᐃ.Ⲇᐃⵠᐃᐃ;
            },
            ⵠΔᐃⵠⵠΔᐃ: function () {
                if (this.Ⲇᐃⵠᐃᐃ) {
                    this.style.display = "inline-block";
                    this.open = true;
                } else {
                    this.ⲆⵠᐃⲆⵠΔⵠ();
                }
            },
            ⲆΔᐃ: function () {
                this.style.left = Math.floor(oo - 235) + "px";
                this.style.top = Math.floor(to - 130) + "px";
            }
        };
        this.Ⲇᐃᐃⵠᐃ.id.oncontextmenu = function () {
            return eo;
        };
        this.Ⲇᐃᐃⵠᐃ.ⵠΔᐃᐃⲆ.display = "none";
        if (this.Ⲇᐃᐃⵠᐃ.Ⲇᐃⵠᐃᐃ) {
            this.options.ⵠΔⲆⵠⵠΔⵠ.display = "inline-block";
        } else {
            this.options.ⵠΔⲆⵠⵠΔⵠ.display = "none";
        }
        document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.Ⲇᐃᐃⵠᐃ.ⲆⵠᐃⲆⵠΔⵠ, Sg);
        document.getElementById("cancel_no_delete").addEventListener("mouseup", this.Ⲇᐃᐃⵠᐃ.ⲆⲆⵠᐃᐃ, false);
        document.getElementById("cancel_case_agree").addEventListener("mouseup", this.Ⲇᐃᐃⵠᐃ.ΔᐃΔⵠⲆ, na);
        document.addEventListener("cancel_sure_delete", function (a) {
            a.preventDefault();
        }, yj);
        this.ᐃᐃⲆᐃᐃⲆΔ = {
            Ⲇᐃⵠᐃᐃ: ΔⲆⲆΔ.get("starve_aliasing") ? ΔⲆⲆΔ.get("starve_aliasing") === "0" ? 0 : 1 : 1,
            ΔⵠⲆⵠⲆΔⲆ: function (a) {
                document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
            },
            ΔᐃΔⵠⲆ: function () {
                if (Gx.ᐃᐃⲆᐃᐃⲆΔ.Ⲇᐃⵠᐃᐃ === 0) {
                    ΔⲆⲆΔ.set("starve_aliasing", "1");
                    Gx.ᐃᐃⲆᐃᐃⲆΔ.ΔⵠⲆⵠⲆΔⲆ(1);
                    Gx.options.ⲆⵠⲆᐃᐃⵠⲆ.display = "inline-block";
                } else {
                    ΔⲆⲆΔ.set("starve_aliasing", "0");
                    Gx.ᐃᐃⲆᐃᐃⲆΔ.ΔⵠⲆⵠⲆΔⲆ(0);
                    Gx.options.ⲆⵠⲆᐃᐃⵠⲆ.display = "none";
                }
                Gx.ᐃᐃⲆᐃᐃⲆΔ.Ⲇᐃⵠᐃᐃ = (Gx.ᐃᐃⲆᐃᐃⲆΔ.Ⲇᐃⵠᐃᐃ + 1) % 2;
            }
        };
        if (this.ᐃᐃⲆᐃᐃⲆΔ.Ⲇᐃⵠᐃᐃ === 1) {
            this.options.ⲆⵠⲆᐃᐃⵠⲆ.display = "inline-block";
        } else {
            this.ᐃᐃⲆᐃᐃⲆΔ.ΔⵠⲆⵠⲆΔⲆ(0);
            this.options.ⲆⵠⲆᐃᐃⵠⲆ.display = "none";
        }
        document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ᐃᐃⲆᐃᐃⲆΔ.ΔᐃΔⵠⲆ, Bq);
        this.ᐃΔΔΔᐃ = {
            Ⲇᐃⵠᐃᐃ: ΔⲆⲆΔ.get("starve_info_box") ? ΔⲆⲆΔ.get("starve_info_box") === "0" ? 0 : 1 : 1,
            display: 0,
            x: 0,
            y: 0,
            id: 0,
            ᐃΔⵠΔ: 0,
            ΔᐃΔⵠⲆ: function () {
                if (Gx.ᐃΔΔΔᐃ.Ⲇᐃⵠᐃᐃ === 0) {
                    ΔⲆⲆΔ.set("starve_info_box", "1");
                    Gx.options.ⵠΔⲆᐃΔⲆⵠ.display = "inline-block";
                } else {
                    ΔⲆⲆΔ.set("starve_info_box", "0");
                    Gx.options.ⵠΔⲆᐃΔⲆⵠ.display = "none";
                }
                Gx.ᐃΔΔΔᐃ.Ⲇᐃⵠᐃᐃ = (Gx.ᐃΔΔΔᐃ.Ⲇᐃⵠᐃᐃ + 1) % 2;
            },
            ⵠⲆⵠᐃ: function (a, b, c) {
                if (a && this.Ⲇᐃⵠᐃᐃ) {
                    this.display = 1;
                    this.id = c === 0 ? b.id : tt[b.id].ΔⵠⵠΔ;
                    this.x = b.info.translate.x + 80;
                    this.y = b.info.translate.y;
                    this.ᐃΔⵠΔ = c;
                }
                return a;
            }
        };
        if (this.ᐃΔΔΔᐃ.Ⲇᐃⵠᐃᐃ === 1) {
            this.options.ⵠΔⲆᐃΔⲆⵠ.display = "inline-block";
        } else {
            this.options.ⵠΔⲆᐃΔⲆⵠ.display = "none";
        }
        document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.ᐃΔΔΔᐃ.ΔᐃΔⵠⲆ, w);
        if (ΔⲆⲆΔ.get("starve_scale")) {
            aq = Number(ΔⲆⲆΔ.get("starve_scale"));
            document.getElementById("input_ratio").value = aq;
            aq *= Pq / Qq;
            Rq();
        }
        this.ⵠⵠΔᐃⵠᐃⲆ = function () {
            ΔⲆⲆΔ.set("starve_scale", "" + document.getElementById("input_ratio").value);
            aq = Pq / Qq * document.getElementById("input_ratio").value;
            Rq();
        };
        document.getElementById("input_ratio").addEventListener("input", this.ⵠⵠΔᐃⵠᐃⲆ, false);
        this.ⵠⵠⵠᐃ = {
            open: false,
            Ⲇᐃⵠᐃᐃ: ΔⲆⲆΔ.get("starve_safe") ? ΔⲆⲆΔ.get("starve_safe") === "0" ? 0 : 1 : 1,
            id: document.getElementById("sure_delete"),
            style: document.getElementById("sure_delete").style,
            ⵠΔᐃᐃⲆ: document.getElementById("agree").style,
            button: 0,
            ᐃᐃ: 0,
            ⲆⲆⵠᐃᐃ: function () {
                Gx.ⵠⵠⵠᐃ.style.display = "none";
                Gx.ⵠⵠⵠᐃ.open = false;
            },
            all: function () {
                if (!Ex.ⲆΔⵠᐃⵠ.wait) {
                    if (Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0 && Ex.ᐃΔⵠΔ.id < 0 && !Ex.ᐃΔΔⲆⵠ.enabled) {
                        Δⵠⵠⵠ.ᐃΔⲆΔΔⲆⵠΔⲆ(Gx.ⵠⵠⵠᐃ.button);
                    }
                    Gx.ⵠⵠⵠᐃ.ⲆⲆⵠᐃᐃ();
                }
            },
            ᐃⲆΔΔ: function () {
                if (Ex.ᐃΔⵠΔ.ⵠΔⵠⵠⲆ && !Ex.ⲆΔⵠᐃⵠ.wait) {
                    if (Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0 && Ex.ᐃΔⵠΔ.id < 0 && !Ex.ᐃΔΔⲆⵠ.enabled) {
                        Δⵠⵠⵠ.ⲆⵠⲆᐃⵠΔᐃⲆⵠ(Gx.ⵠⵠⵠᐃ.button);
                    }
                    Gx.ⵠⵠⵠᐃ.ⲆⲆⵠᐃᐃ();
                }
            },
            ⲆⲆΔΔⲆⲆΔⲆⵠ: function () {
                if (!Ex.ⲆΔⵠᐃⵠ.wait) {
                    if (Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0 && Ex.ᐃΔⵠΔ.id < 0 && !Ex.ᐃΔΔⲆⵠ.enabled) {
                        Δⵠⵠⵠ.ⲆΔΔⲆᐃᐃⵠⲆΔ(Gx.ⵠⵠⵠᐃ.button);
                    }
                    Gx.ⵠⵠⵠᐃ.ⲆⲆⵠᐃᐃ();
                }
            },
            ΔᐃΔⵠⲆ: function () {
                if (Gx.ⵠⵠⵠᐃ.Ⲇᐃⵠᐃᐃ) {
                    ΔⲆⲆΔ.set("starve_safe", "0");
                    Gx.ⵠⵠⵠᐃ.ⵠΔᐃᐃⲆ.display = "inline-block";
                    Gx.options.ⵠΔᐃᐃⲆ.display = "none";
                } else {
                    ΔⲆⲆΔ.set("starve_safe", "1");
                    Gx.ⵠⵠⵠᐃ.ⵠΔᐃᐃⲆ.display = "none";
                    Gx.options.ⵠΔᐃᐃⲆ.display = "inline-block";
                }
                Gx.ⵠⵠⵠᐃ.Ⲇᐃⵠᐃᐃ = !Gx.ⵠⵠⵠᐃ.Ⲇᐃⵠᐃᐃ;
            },
            ⵠΔᐃⵠⵠΔᐃ: function (a) {
                this.button = a;
                document.getElementById("item_to_del").src = ᐃΔ[bs[a].Ⲇᐃ][0].ⲆΔⲆⵠΔ === Fa ? ᐃΔ[bs[a].Ⲇᐃ][0].src : ᐃΔ[bs[a].Ⲇᐃ][0].ⲆΔⲆⵠΔ;
                if (bs[a].ᐃⲆΔΔ && !Ex.ᐃΔΔⲆᐃ && Ex.ᐃΔⵠΔ.ⵠΔⵠⵠⲆ) {
                    document.getElementById("recycle_delete").style.display = "inline-block";
                } else {
                    document.getElementById("recycle_delete").style.display = "none";
                }
                if (this.Ⲇᐃⵠᐃᐃ) {
                    this.style.display = "inline-block";
                    this.open = As;
                } else {
                    this.all();
                }
            },
            ⲆΔᐃ: function () {
                this.style.left = Math.floor(oo - 235) + "px";
                this.style.top = Math.floor(to - 175) + "px";
            }
        };
        this.ⵠⵠⵠᐃ.ⵠΔᐃᐃⲆ.display = "none";
        if (this.ⵠⵠⵠᐃ.Ⲇᐃⵠᐃᐃ) {
            this.options.ⵠΔᐃᐃⲆ.display = "inline-block";
        } else {
            this.options.ⵠΔᐃᐃⲆ.display = "none";
        }
        document.getElementById("one_delete").addEventListener("mouseup", this.ⵠⵠⵠᐃ.ⲆⲆΔΔⲆⲆΔⲆⵠ, na);
        document.getElementById("yes_delete").addEventListener("mouseup", this.ⵠⵠⵠᐃ.all, false);
        document.getElementById("recycle_delete").addEventListener("mouseup", this.ⵠⵠⵠᐃ.ᐃⲆΔΔ, false);
        document.getElementById("no_delete").addEventListener("mouseup", this.ⵠⵠⵠᐃ.ⲆⲆⵠᐃᐃ, false);
        document.getElementById("case_agree").addEventListener("mouseup", this.ⵠⵠⵠᐃ.ΔᐃΔⵠⲆ, false);
        this.ⲆⲆΔᐃⲆ = {
            open: false,
            Δᐃᐃᐃⵠ: -1,
            button: Df(60, 60, 0, ᐃΔ[592]),
            id: document.getElementById("shop_starterkit"),
            style: document.getElementById("shop_starterkit").style,
            ⲆΔᐃ: function () {
                this.style.left = Math.floor(oo - 300) + "px";
                this.style.top = Math.floor(to - 215) + "px";
            },
            ⲆⲆⵠᐃᐃ: function () {
                Gx.ⲆⲆΔᐃⲆ.open = false;
                Gx.ⲆⲆΔᐃⲆ.style.display = "none";
            },
            select: function () {
                Gx.ⲆⲆΔᐃⲆ.open = !Gx.ⲆⲆΔᐃⲆ.open;
                if (Gx.ⲆⲆΔᐃⲆ.open) {
                    Gx.ⲆⲆΔᐃⲆ.style.display = "inline-block";
                } else {
                    Gx.ⲆⲆΔᐃⲆ.style.display = "none";
                }
            },
            ⵠΔⲆⲆⲆΔᐃ: function () {
                if (Gx.ⲆⲆΔᐃⲆ.Δᐃᐃᐃⵠ >= 0) {
                    Δⵠⵠⵠ.ΔΔⲆᐃᐃⲆᐃΔΔ(Gx.ⲆⲆΔᐃⲆ.Δᐃᐃᐃⵠ);
                    Gx.ⲆⲆΔᐃⲆ.ⲆⲆⵠᐃᐃ();
                    if (ga) {
                        ga("send", "event", "Game", "kit", "" + Gx.ⲆⲆΔᐃⲆ.Δᐃᐃᐃⵠ);
                    }
                }
            },
            ⵠᐃᐃΔΔ: function () {
                var a = Ex.ⲆⲆΔᐃⲆ.value;
                document.getElementById("points_bank").innerHTML = ⵠΔⲆⵠ.ⲆⵠⲆⲆΔᐃᐃ(a) + " points";
                for (var b = 0; b < qf.length; b++) {
                    if (qf[b].ᐃⲆᐃΔᐃ > a) {
                        document.getElementById("starter" + (b + 1)).style.opacity = "0.4";
                    } else {
                        document.getElementById("starter" + (b + 1)).style.opacity = "1";
                    }
                }
                for (b = 1; b < 13; b++) {
                    document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
                    document.getElementById("amount_shop" + b).innerHTML = "";
                }
                document.getElementById("buy_kit").style.opacity = "0.2";
            },
            ⲆⵠΔΔΔΔᐃΔⵠ: function () {
                if (this.id.length > 8) {
                    var a = Number(this.id.charAt(7) + this.id.charAt(8));
                } else {
                    a = Number(this.id.charAt(7));
                }
                var b = qf[a - 1];
                if (Ex.ⲆⲆΔᐃⲆ.value >= b.ᐃⲆᐃΔᐃ) {
                    Gx.ⲆⲆΔᐃⲆ.Δᐃᐃᐃⵠ = a;
                    document.getElementById("buy_kit").style.opacity = "1";
                } else {
                    Gx.ⲆⲆΔᐃⲆ.Δᐃᐃᐃⵠ = -1;
                    document.getElementById("buy_kit").style.opacity = "0.2";
                }
                b = b.items;
                for (var c = 1, d = 1; c < b.length + 1; c++) {
                    if (b[c - 1][1] !== 29) {
                        document.getElementById("inv_shop" + d).style.display = "inline-block";
                        document.getElementById("inv_shop" + d).src = ᐃΔ[bs[b[c - 1][1]].Ⲇᐃ][0].ⲆΔⲆⵠΔ === Gr ? ᐃΔ[bs[b[c - 1][1]].Ⲇᐃ][0].src : ᐃΔ[bs[b[c - 1][1]].Ⲇᐃ][0].ⲆΔⲆⵠΔ;
                        document.getElementById("amount_shop" + d).innerHTML = "" + b[c - 1][0];
                        d++;
                    }
                }
                for (; d < 13; d++) {
                    document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
                    document.getElementById("amount_shop" + d).innerHTML = "";
                }
            }
        };
        document.getElementById("quit3").addEventListener("mouseup", this.ⲆⲆΔᐃⲆ.ⲆⲆⵠᐃᐃ, Sg);
        document.getElementById("buy_kit").addEventListener("mouseup", this.ⲆⲆΔᐃⲆ.ⵠΔⲆⲆⲆΔᐃ, yj);
        for (j = 1; j < 11; j++) {
            document.getElementById("starter" + j).addEventListener("mouseup", this.ⲆⲆΔᐃⲆ.ⲆⵠΔΔΔΔᐃΔⵠ, Dl);
        }
        this.ᐃⲆⲆΔ = {
            open: Xs,
            Ⲇᐃⵠᐃᐃ: ΔⲆⲆΔ.get("starve_quests") ? ΔⲆⲆΔ.get("starve_quests") === "1" ? 1 : 0 : 0,
            button: Df(60, 60, 0, ᐃΔ[755]),
            id: document.getElementById("chronoquest"),
            style: document.getElementById("chronoquest").style,
            ⲆΔᐃ: function () {
                this.style.left = Math.floor(oo - 420) + "px";
                this.style.top = Math.floor(to - 270) + "px";
            },
            ⲆⲆⵠᐃᐃ: function () {
                Gx.ᐃⲆⲆΔ.style.display = "none";
                Gx.ᐃⲆⲆΔ.open = Dl;
            },
            select: function () {
                Gx.ᐃⲆⲆΔ.open = !Gx.ᐃⲆⲆΔ.open;
                if (Gx.ᐃⲆⲆΔ.open) {
                    Gx.ᐃⲆⲆΔ.style.display = "inline-block";
                } else {
                    Gx.ᐃⲆⲆΔ.style.display = "none";
                }
            },
            list: [],
            reset: function () {
                for (var a = 0; a < Zf.length; a++) {
                    this.list[a] = 1;
                    document.getElementById("timeremain_" + a).style.display = "inline-block";
                    document.getElementById("time_finished_" + a).style.display = "none";
                    document.getElementById("claim_reward_" + a).style.display = "none";
                }
            },
            ⲆⵠⲆⲆⲆⲆⲆ: 0,
            ⲆᐃᐃⲆⵠⲆΔ: 0,
            ΔⲆⲆᐃΔⲆΔⲆΔ: function () {
                if (Gx.ᐃⲆⲆΔ.open) {
                    var a = new Date().getTime();
                    if (a - this.ⲆⵠⲆⲆⲆⲆⲆ >= 1000) {
                        this.ⲆⵠⲆⲆⲆⲆⲆ = a;
                        for (var b = 0; b < Zf.length; b++) {
                            if (Gx.ᐃⲆⲆΔ.list[b]) {
                                var c = Zf[b].time - (a - Dx.ⲆⲆⵠΔⵠ.ⵠᐃᐃΔΔ + Gx.ᐃⲆⲆΔ.ⲆᐃᐃⲆⵠⲆΔ);
                                document.getElementById("timeremain_" + b).innerHTML = c > 960000 ? Math.floor(c / 480000) + " days" : c > 480000 ? Math.floor(c / 480000) + " day" : c > 60000 ? Math.floor(c / 60000) + " min" : Math.floor(c / 1000) + " sec";
                            }
                        }
                    }
                }
            },
            restore: function (a) {
                for (var b = 0; b < a.length; b++) {
                    if (a[b] != 1) {
                        Gx.ᐃⲆⲆΔ.ΔⲆⵠⵠΔΔⲆ(b, a[b]);
                    }
                }
            },
            ΔⲆⵠⵠΔΔⲆ: function (a, b) {
                if (b === 3 && (a === 11 || a === 12)) {
                    Ex.ⲆᐃΔⲆ.ⲆⵠⵠⵠⲆⲆⲆ(0, 1);
                    Gx.ΔⲆⵠⵠⲆᐃΔ();
                }
                document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
                if (b > 1) {
                    document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
                    document.getElementById("timeremain_" + a).style.display = "none";
                } else if (b === 0) {
                    document.getElementById("time_finished_" + a).innerHTML = "FAILED";
                    document.getElementById("timeremain_" + a).style.display = "none";
                }
                document.getElementById("claim_reward_" + a).style.display = b === 2 ? "inline-block" : "none";
                document.getElementById("time_finished_" + a).style.display = "inline";
                Gx.ᐃⲆⲆΔ.list[a] = 0;
            },
            modify: function (a, b) {
                Gx.ᐃⲆⲆΔ.ΔⲆⵠⵠΔΔⲆ(a, b);
                if (Gx.ᐃⲆⲆΔ.Ⲇᐃⵠᐃᐃ) {
                    Gx.ᐃⲆⲆΔ.open = k;
                    Gx.ᐃⲆⲆΔ.style.display = "inline-block";
                }
            },
            ΔᐃΔⵠⲆ: function () {
                if (Gx.ᐃⲆⲆΔ.Ⲇᐃⵠᐃᐃ) {
                    ΔⲆⲆΔ.set("starve_quests", "0");
                    Gx.options.ⲆΔⵠᐃⵠⵠⵠ.display = "none";
                } else {
                    ΔⲆⲆΔ.set("starve_quests", "1");
                    Gx.options.ⲆΔⵠᐃⵠⵠⵠ.display = "inline-block";
                }
                Gx.ᐃⲆⲆΔ.Ⲇᐃⵠᐃᐃ = !Gx.ᐃⲆⲆΔ.Ⲇᐃⵠᐃᐃ;
            },
            ⵠΔΔᐃᐃᐃⵠⵠⲆ: function () {
                var a = Number(this.id.charAt(13));
                var b = Number(this.id.charAt(14));
                if (this.id.charAt(14) !== "" && b >= 0 && b <= 9) {
                    a = a * 10 + b;
                }
                Δⵠⵠⵠ.ⲆᐃⵠⵠᐃⲆⵠⵠⲆ(a);
            }
        };
        if (this.ᐃⲆⲆΔ.Ⲇᐃⵠᐃᐃ) {
            this.options.ⲆΔⵠᐃⵠⵠⵠ.display = "inline-block";
        } else {
            this.options.ⲆΔⵠᐃⵠⵠⵠ.display = "none";
        }
        document.getElementById("quit_chronoquest").addEventListener("mouseup", this.ᐃⲆⲆΔ.ⲆⲆⵠᐃᐃ, Sg);
        for (j = 0; j < Zf.length; j++) {
            document.getElementById("claim_reward_" + j).addEventListener("mouseup", this.ᐃⲆⲆΔ.ⵠΔΔᐃᐃᐃⵠⵠⲆ, false);
        }
        this.ΔΔΔΔ = {
            open: false,
            button: Df(60, 60, 0, ᐃΔ[708]),
            list: {
                id: document.getElementById("recipe_craft"),
                style: document.getElementById("recipe_craft").style,
                ᐃᐃΔⲆⲆⲆⵠ: [],
                ᐃΔⵠᐃⵠⲆⵠ: 0,
                ⲆΔᐃ: function () {
                    this.style.left = Math.floor(oo - 335) + "px";
                    this.style.top = Math.floor(to - 215) + "px";
                },
                ⲆⲆⵠᐃᐃ: function () {
                    document.getElementById("recipe_craft").style.display = "none";
                    Gx.ΔΔΔΔ.open = false;
                },
                ᐃᐃⵠᐃⵠⵠΔ: function () {
                    document.getElementById("recipe_craft").style.display = "none";
                    document.getElementById("home_craft").style.display = "inline-block";
                },
                ⲆⵠΔΔ: function (a) {
                    if ((b = this.ᐃᐃΔⲆⲆⲆⵠ[a]).ᐃⵠⵠ) {
                        document.getElementById("watercraft").style.display = "inline-block";
                    } else {
                        document.getElementById("watercraft").style.display = "none";
                    }
                    if (b.f) {
                        document.getElementById("firecraft").style.display = "inline-block";
                    } else {
                        document.getElementById("firecraft").style.display = "none";
                    }
                    if (b.w) {
                        document.getElementById("workcraft").style.display = "inline-block";
                    } else {
                        document.getElementById("workcraft").style.display = "none";
                    }
                    if (b.e) {
                        document.getElementById("wellcraft").style.display = "inline-block";
                    } else {
                        document.getElementById("wellcraft").style.display = "none";
                    }
                    for (var b = b.r, c = (a = 0, 1); a < b.length; a++) {
                        document.getElementById("inv" + c).style.display = "inline-block";
                        document.getElementById("inv" + c).src = ᐃΔ[bs[b[a][0]].Ⲇᐃ][0].ⲆΔⲆⵠΔ === Rh ? ᐃΔ[bs[b[a][0]].Ⲇᐃ][0].src : ᐃΔ[bs[b[a][0]].Ⲇᐃ][0].ⲆΔⲆⵠΔ;
                        document.getElementById("numb" + c).innerHTML = "" + b[a][1];
                        c++;
                    }
                    for (; c < 6; c++) {
                        document.getElementById("inv" + c).style.display = "none";
                        document.getElementById("numb" + c).innerHTML = "";
                    }
                },
                select: function (a) {
                    this.ᐃΔⵠᐃⵠⲆⵠ = a;
                    document.getElementById("home_craft").style.display = "none";
                    document.getElementById("workcraft").style.display = "none";
                    document.getElementById("firecraft").style.display = "none";
                    document.getElementById("watercraft").style.display = "none";
                    document.getElementById("wellcraft").style.display = "none";
                    document.getElementById("recipe_craft").style.display = "inline-block";
                    document.getElementById("inv1").style.display = "none";
                    document.getElementById("inv2").style.display = "none";
                    document.getElementById("inv3").style.display = "none";
                    document.getElementById("inv4").style.display = "none";
                    document.getElementById("inv5").style.display = "none";
                    document.getElementById("numb1").innerHTML = "";
                    document.getElementById("numb2").innerHTML = "";
                    document.getElementById("numb3").innerHTML = "";
                    document.getElementById("numb4").innerHTML = "";
                    document.getElementById("numb5").innerHTML = "";
                    for (var b = 0, c = 0; b < tt.length; b++) {
                        var d = tt[b];
                        if (a === d.Ⲇᐃⵠ) {
                            this.ᐃᐃΔⲆⲆⲆⵠ[c] = d;
                            c++;
                            document.getElementById("img_" + c).style.display = "inline-block";
                            document.getElementById("img_" + c).src = ᐃΔ[bs[d.ΔⵠⵠΔ].Ⲇᐃ][0].ⲆΔⲆⵠΔ === Nh ? ᐃΔ[bs[d.ΔⵠⵠΔ].Ⲇᐃ][0].src : ᐃΔ[bs[d.ΔⵠⵠΔ].Ⲇᐃ][0].ⲆΔⲆⵠΔ;
                        }
                    }
                    for (c++; c < 49; c++) {
                        document.getElementById("img_" + c).style.display = "none";
                    }
                }
            },
            ΔⵠⵠⲆᐃⵠᐃ: {
                id: document.getElementById("home_craft"),
                style: document.getElementById("home_craft").style,
                ⲆΔᐃ: function () {
                    this.style.left = Math.floor(oo - 285) + "px";
                    this.style.top = Math.floor(to - 170) + "px";
                },
                ⲆⲆⵠᐃᐃ: function () {
                    document.getElementById("home_craft").style.display = "none";
                    Gx.ΔΔΔΔ.open = false;
                }
            },
            ⲆΔⲆⵠΔᐃΔⵠⲆ: function () {
                this.open = !this.open;
                if (this.open) {
                    document.getElementById("home_craft").style.display = "inline-block";
                } else {
                    document.getElementById("home_craft").style.display = "none";
                    document.getElementById("recipe_craft").style.display = "none";
                }
            }
        };
        document.getElementById("quit").addEventListener("mouseup", this.ΔΔΔΔ.ΔⵠⵠⲆᐃⵠᐃ.ⲆⲆⵠᐃᐃ, false);
        document.getElementById("quitmenu").addEventListener("mouseup", this.ΔΔΔΔ.list.ⲆⲆⵠᐃᐃ, false);
        document.getElementById("backhome").addEventListener("mouseup", this.ΔΔΔΔ.list.ᐃᐃⵠᐃⵠⵠΔ, Xb);
        document.getElementById("hatcategory").addEventListener("mouseup", function () {
            Gx.ΔΔΔΔ.list.select(2);
        }, false);
        document.getElementById("weaponcategory").addEventListener("mouseup", function () {
            Gx.ΔΔΔΔ.list.select(1);
        }, false);
        document.getElementById("toolcategory").addEventListener("mouseup", function () {
            Gx.ΔΔΔΔ.list.select(0);
        }, Ag);
        document.getElementById("foodcategory").addEventListener("mouseup", function () {
            Gx.ΔΔΔΔ.list.select(3);
        }, Bq);
        document.getElementById("placeablecategory").addEventListener("mouseup", function () {
            Gx.ΔΔΔΔ.list.select(4);
        }, false);
        document.getElementById("constructioncategory").addEventListener("mouseup", function () {
            Gx.ΔΔΔΔ.list.select(5);
        }, Sg);
        document.getElementById("img_1").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(0);
        }, Bq);
        document.getElementById("img_2").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(1);
        }, Xs);
        document.getElementById("img_3").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(2);
        }, hs);
        document.getElementById("img_4").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(3);
        }, tr);
        document.getElementById("img_5").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(4);
        }, Xs);
        document.getElementById("img_6").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(5);
        }, false);
        document.getElementById("img_7").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(6);
        }, Sg);
        document.getElementById("img_8").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(7);
        }, false);
        document.getElementById("img_9").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(8);
        }, false);
        document.getElementById("img_10").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(9);
        }, false);
        document.getElementById("img_11").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(10);
        }, un);
        document.getElementById("img_12").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(11);
        }, Bq);
        document.getElementById("img_13").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(12);
        }, cb);
        document.getElementById("img_14").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(13);
        }, false);
        document.getElementById("img_15").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(14);
        }, false);
        document.getElementById("img_16").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(15);
        }, Ah);
        document.getElementById("img_17").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(16);
        }, false);
        document.getElementById("img_18").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(17);
        }, bl);
        document.getElementById("img_19").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(18);
        }, false);
        document.getElementById("img_20").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(19);
        }, Dl);
        document.getElementById("img_21").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(20);
        }, bk);
        document.getElementById("img_22").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(21);
        }, false);
        document.getElementById("img_23").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(22);
        }, bl);
        document.getElementById("img_24").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(23);
        }, Bq);
        document.getElementById("img_25").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(24);
        }, false);
        document.getElementById("img_26").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(25);
        }, Ag);
        document.getElementById("img_27").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(26);
        }, false);
        document.getElementById("img_28").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(27);
        }, false);
        document.getElementById("img_29").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(28);
        }, tr);
        document.getElementById("img_30").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(29);
        }, false);
        document.getElementById("img_31").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(30);
        }, false);
        document.getElementById("img_32").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(31);
        }, et);
        document.getElementById("img_33").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(32);
        }, false);
        document.getElementById("img_34").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(33);
        }, false);
        document.getElementById("img_35").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(34);
        }, Xb);
        document.getElementById("img_36").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(35);
        }, false);
        document.getElementById("img_37").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(36);
        }, Xs);
        document.getElementById("img_38").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(37);
        }, eo);
        document.getElementById("img_39").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(38);
        }, false);
        document.getElementById("img_40").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(39);
        }, false);
        document.getElementById("img_41").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(40);
        }, et);
        document.getElementById("img_42").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(41);
        }, false);
        document.getElementById("img_43").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(42);
        }, false);
        document.getElementById("img_44").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(43);
        }, Ag);
        document.getElementById("img_45").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(44);
        }, false);
        document.getElementById("img_46").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(45);
        }, et);
        document.getElementById("img_47").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(46);
        }, false);
        document.getElementById("img_48").addEventListener("mousedown", function () {
            Gx.ΔΔΔΔ.list.ⲆⵠΔΔ(47);
        }, Ag);
        this.ⲆᐃΔΔᐃ = {
            translate: {
                x: 0,
                y: 0
            },
            ⵠⲆᐃⵠΔ: {
                x: -1,
                y: -1
            },
            ⵠᐃⲆΔ: [],
            focus: function (a) {
                var b = this.translate.y + (Ex.ⲆᐃΔⲆ.ⲆᐃⲆⵠΔ.length > 0 ? -120 : -50);
                if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
                    this.ⵠⲆᐃⵠΔ.x = a.x - this.translate.x;
                    this.ⵠⲆᐃⵠΔ.y = a.y - b;
                }
            }
        };
        this.ΔⲆΔⲆΔ = {
            translate: {
                y: 0,
                x: 0
            },
            Ⲇᐃ: ᐃΔ[278],
            ΔΔ: document.createElement("canvas")
        };
        this.ΔⲆΔⲆΔ.ΔΔ.width = this.ΔⲆΔⲆΔ.Ⲇᐃ.width;
        this.ΔⲆΔⲆΔ.ΔΔ.height = this.ΔⲆΔⲆΔ.Ⲇᐃ.height;
        this.ΔⲆΔⲆΔ.Δ = this.ΔⲆΔⲆΔ.ΔΔ.getContext("2d");
        this.ΔᐃⵠⲆ = {
            translate: {
                x: 0,
                y: 0
            },
            Ⲇᐃ: ᐃΔ[267],
            ⵠⲆⲆⵠ: Cu,
            y: 0
        };
        this.ᐃⵠⲆΔⲆΔΔ = function () {
            ᐃΔΔⵠᐃ = document.getElementById("team_box");
            ᐃΔΔⵠᐃ.innerHTML = "";
            ᐃΔΔⵠᐃ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + Dx.ⵠᐃⲆΔ[Ex.ⵠⲆⲆⵠΔ[0]].ⲆⲆⲆⲆΔ + "</div";
            for (var a = 1; Ex.ⵠⲆⲆⵠΔ.length > a; a++) {
                ᐃΔΔⵠᐃ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + Dx.ⵠᐃⲆΔ[Ex.ⵠⲆⲆⵠΔ[a]].ⲆⲆⲆⲆΔ + "</div></div>";
            }
            ᐃΔΔⵠᐃ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
            ᐃΔΔⵠᐃ.style.display = "inline-block";
            document.getElementById("leave").addEventListener("click", Δⵠⵠⵠ.ᐃⵠⲆΔⲆΔΔ, false);
        };
        this.ΔᐃⵠΔᐃⵠⲆᐃⵠ = function () {
            ᐃΔΔⵠᐃ = document.getElementById("team_box");
            ᐃΔΔⵠᐃ.innerHTML = "";
            ᐃΔΔⵠᐃ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + Dx.ⵠᐃⲆΔ[Ex.ⵠⲆⲆⵠΔ[0]].ⲆⲆⲆⲆΔ + "</div";
            for (var a = 1; a < Ex.ⵠⲆⲆⵠΔ.length; a++) {
                ᐃΔΔⵠᐃ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + Dx.ⵠᐃⲆΔ[Ex.ⵠⲆⲆⵠΔ[a]].ⲆⲆⲆⲆΔ + "</div></div>";
            }
            ᐃΔΔⵠᐃ.innerHTML += "</div>";
            ᐃΔΔⵠᐃ.style.display = "inline-block";
        };
        this.ⵠᐃΔᐃⲆⲆⵠᐃⵠ = function () {
            ᐃΔΔⵠᐃ = document.getElementById("team_box");
            ᐃΔΔⵠᐃ.innerHTML = "";
            ᐃΔΔⵠᐃ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + Dx.ⵠᐃⲆΔ[Ex.ⵠⲆⲆⵠΔ[0]].ⲆⲆⲆⲆΔ + "</div";
            for (var a = 1; a < Ex.ⵠⲆⲆⵠΔ.length; a++) {
                ᐃΔΔⵠᐃ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + Dx.ⵠᐃⲆΔ[Ex.ⵠⲆⲆⵠΔ[a]].ⲆⲆⲆⲆΔ + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
            }
            if (Ex.ⲆⲆⲆⲆⵠ.lock === 0) {
                ᐃΔΔⵠᐃ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
            } else {
                ᐃΔΔⵠᐃ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
            }
            document.getElementById("lock_team").addEventListener("click", Δⵠⵠⵠ.ⵠⵠⵠⲆⵠⲆΔⲆⵠ, Bq);
            ᐃΔΔⵠᐃ.style.display = "inline-block";
            for (a = 1; a < Ex.ⵠⲆⲆⵠΔ.length; a++) {
                switch (a) {
                    case 1:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            Δⵠⵠⵠ.ᐃⵠᐃⵠᐃΔⵠ(1);
                        }, eo);
                        break;
                    case 2:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            Δⵠⵠⵠ.ᐃⵠᐃⵠᐃΔⵠ(2);
                        }, bl);
                        break;
                    case 3:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            Δⵠⵠⵠ.ᐃⵠᐃⵠᐃΔⵠ(3);
                        }, tr);
                        break;
                    case 4:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            Δⵠⵠⵠ.ᐃⵠᐃⵠᐃΔⵠ(4);
                        }, yj);
                        break;
                    case 5:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            Δⵠⵠⵠ.ᐃⵠᐃⵠᐃΔⵠ(5);
                        }, false);
                        break;
                    case 6:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            Δⵠⵠⵠ.ᐃⵠᐃⵠᐃΔⵠ(6);
                        }, false);
                        break;
                    case 7:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            Δⵠⵠⵠ.ᐃⵠᐃⵠᐃΔⵠ(7);
                        }, false);
                        break;
                    case 8:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            Δⵠⵠⵠ.ᐃⵠᐃⵠᐃΔⵠ(8);
                        }, bk);
                }
            }
        };
        this.ⵠⵠⵠⲆⵠ = [];
        this.ⵠⵠⵠⲆⵠ[2] = {
            button: Df(60, 60, 0, ᐃΔ[556]),
            action: this.ᐃⵠⲆΔⲆΔΔ
        };
        this.ⵠⵠⵠⲆⵠ[3] = {
            button: Df(60, 60, 0, ᐃΔ[556]),
            action: Δⵠⵠⵠ.ΔⲆⲆⲆⲆⲆⲆⵠⵠ
        };
        this.ⵠⵠⵠⲆⵠ[0] = {
            button: Df(60, 60, 0, ᐃΔ[557]),
            action: this.ⵠᐃΔᐃⲆⲆⵠᐃⵠ
        };
        this.ⵠⵠⵠⲆⵠ[1] = {
            button: Df(60, 60, 0, ᐃΔ[561]),
            action: this.ΔᐃⵠΔᐃⵠⲆᐃⵠ
        };
        this.ⵠⵠⵠⲆⵠ[4] = {
            button: Df(60, 60, 0, ᐃΔ[560]),
            action: function () { }
        };
        this.ⲆⲆⵠΔᐃ = -1;
        this.ΔⵠⲆⲆⵠᐃⵠ = Df(60, 60, 0, ᐃΔ[723]);
        this.ⵠⲆᐃΔⲆⲆᐃ = Df(60, 60, 0, ᐃΔ[724]);
        this.ᐃⲆᐃⲆⲆⲆᐃ = Df(60, 60, 0, ᐃΔ[658]);
        this.ⵠⵠⲆΔΔⲆᐃ = Df(60, 60, 0, ᐃΔ[657]);
        this.ΔᐃΔⵠⵠΔⵠ = Df(60, 60, 0, ᐃΔ[658]);
        this.ⵠⵠΔᐃᐃⲆⲆ = Df(60, 60, 0, ᐃΔ[316]);
        this.ⵠⲆⵠᐃᐃⲆΔ = Df(60, 60, 0, ᐃΔ[315]);
        this.ⵠⵠⵠⲆΔⲆᐃ = Df(60, 60, 0, ᐃΔ[297]);
        this.ⲆⵠΔⵠΔΔⲆ = Df(60, 60, 0, ᐃΔ[298]);
        this.ⵠⲆⵠⵠⲆΔⵠ = Df(60, 60, 0, ᐃΔ[418]);
        this.ᐃⲆⵠⲆᐃⵠΔ = Df(60, 60, 0, ᐃΔ[938]);
        this.ΔⵠⵠᐃᐃⵠⲆ = Df(60, 60, 0, ᐃΔ[412]);
        this.ΔⲆⵠΔᐃⲆΔ = Df(60, 60, 0, ᐃΔ[536]);
        this.ⵠⵠⲆᐃΔΔΔ = Df(60, 60, 0, ᐃΔ[535]);
        this.ᐃⵠⵠΔΔᐃⲆ = Df(60, 60, 0, ᐃΔ[538]);
        this.ᐃΔⲆⵠⲆ = Df(120, 120, 0, ᐃΔ[149]);
        this.ᐃΔⲆⵠⲆ.info.translate.x = 10;
        this.ᐃΔⲆⵠⲆ.info.translate.y = 10;
        this.ⵠᐃⵠ = [];
        this.ⵠᐃⵠ[0] = Df(68, 68, 0, ᐃΔ[340], 3);
        this.ⵠᐃⵠ[0].id = 0;
        this.ⵠᐃⵠ[1] = Df(68, 68, 0, ᐃΔ[341], 3);
        this.ⵠᐃⵠ[1].id = 1;
        this.ⵠᐃⵠ[108] = Df(68, 68, 0, ᐃΔ[342], 3);
        this.ⵠᐃⵠ[108].id = 108;
        this.ⵠᐃⵠ[109] = Df(68, 68, 0, ᐃΔ[343], 3);
        this.ⵠᐃⵠ[109].id = 109;
        this.ⵠᐃⵠ[110] = Df(68, 68, 0, ᐃΔ[269], 3);
        this.ⵠᐃⵠ[110].id = 110;
        this.ⵠᐃⵠ[233] = Df(68, 68, 0, ᐃΔ[1155], 3);
        this.ⵠᐃⵠ[233].id = 233;
        this.ⵠᐃⵠ[111] = Df(68, 68, 0, ᐃΔ[270], 3);
        this.ⵠᐃⵠ[111].id = 111;
        this.ⵠᐃⵠ[112] = Df(68, 68, 0, ᐃΔ[271], 3);
        this.ⵠᐃⵠ[112].id = 112;
        this.ⵠᐃⵠ[3] = Df(68, 68, 0, ᐃΔ[272], 3);
        this.ⵠᐃⵠ[3].id = 3;
        this.ⵠᐃⵠ[4] = Df(68, 68, 0, ᐃΔ[344], 3);
        this.ⵠᐃⵠ[4].id = 4;
        this.ⵠᐃⵠ[5] = Df(68, 68, 0, ᐃΔ[345], 3);
        this.ⵠᐃⵠ[5].id = 5;
        this.ⵠᐃⵠ[57] = Df(68, 68, 0, ᐃΔ[831], 3);
        this.ⵠᐃⵠ[57].id = 57;
        this.ⵠᐃⵠ[6] = Df(68, 68, 0, ᐃΔ[346], 3);
        this.ⵠᐃⵠ[6].id = 6;
        this.ⵠᐃⵠ[113] = Df(68, 68, 0, ᐃΔ[273], 3);
        this.ⵠᐃⵠ[113].id = 113;
        this.ⵠᐃⵠ[114] = Df(68, 68, 0, ᐃΔ[358], 3);
        this.ⵠᐃⵠ[114].id = 114;
        this.ⵠᐃⵠ[115] = Df(68, 68, 0, ᐃΔ[348], 3);
        this.ⵠᐃⵠ[115].id = 115;
        this.ⵠᐃⵠ[162] = Df(68, 68, 0, ᐃΔ[349], 3);
        this.ⵠᐃⵠ[162].id = 162;
        this.ⵠᐃⵠ[160] = Df(68, 68, 0, ᐃΔ[350], 3);
        this.ⵠᐃⵠ[160].id = 160;
        this.ⵠᐃⵠ[8] = Df(68, 68, 0, ᐃΔ[274], 3);
        this.ⵠᐃⵠ[8].id = 8;
        this.ⵠᐃⵠ[117] = Df(68, 68, 0, ᐃΔ[351], 3);
        this.ⵠᐃⵠ[117].id = 117;
        this.ⵠᐃⵠ[116] = Df(68, 68, 0, ᐃΔ[275], 3);
        this.ⵠᐃⵠ[116].id = 116;
        this.ⵠᐃⵠ[118] = Df(68, 68, 0, ᐃΔ[276], 3);
        this.ⵠᐃⵠ[118].id = 118;
        this.ⵠᐃⵠ[195] = Df(68, 68, 0, ᐃΔ[352], 3);
        this.ⵠᐃⵠ[195].id = 195;
        this.ⵠᐃⵠ[161] = Df(68, 68, 0, ᐃΔ[353], 3);
        this.ⵠᐃⵠ[161].id = 161;
        this.ⵠᐃⵠ[163] = Df(68, 68, 0, ᐃΔ[354], 3);
        this.ⵠᐃⵠ[163].id = 163;
        this.ⵠᐃⵠ[164] = Df(68, 68, 0, ᐃΔ[355], 3);
        this.ⵠᐃⵠ[164].id = 164;
        this.ⵠᐃⵠ[165] = Df(68, 68, 0, ᐃΔ[356], 3);
        this.ⵠᐃⵠ[165].id = 165;
        this.ⵠᐃⵠ[166] = Df(68, 68, 0, ᐃΔ[357], 3);
        this.ⵠᐃⵠ[166].id = 166;
        this.ⵠᐃⵠ[167] = Df(68, 68, 0, ᐃΔ[359], 3);
        this.ⵠᐃⵠ[167].id = 167;
        this.ⵠᐃⵠ[168] = Df(68, 68, 0, ᐃΔ[382], 3);
        this.ⵠᐃⵠ[168].id = 168;
        this.ⵠᐃⵠ[169] = Df(68, 68, 0, ᐃΔ[383], 3);
        this.ⵠᐃⵠ[169].id = 169;
        this.ⵠᐃⵠ[170] = Df(68, 68, 0, ᐃΔ[384], 3);
        this.ⵠᐃⵠ[170].id = 170;
        this.ⵠᐃⵠ[2] = Df(68, 68, 0, ᐃΔ[386], 3);
        this.ⵠᐃⵠ[2].id = 2;
        this.ⵠᐃⵠ[237] = Df(68, 68, 0, ᐃΔ[1163], 3);
        this.ⵠᐃⵠ[237].id = 237;
        this.ⵠᐃⵠ[174] = Df(68, 68, 0, ᐃΔ[394], 3);
        this.ⵠᐃⵠ[174].id = 174;
        this.ⵠᐃⵠ[222] = Df(68, 68, 0, ᐃΔ[1036], 3);
        this.ⵠᐃⵠ[222].id = 222;
        this.ⵠᐃⵠ[231] = Df(68, 68, 0, ᐃΔ[1038], 3);
        this.ⵠᐃⵠ[231].id = 231;
        this.ⵠᐃⵠ[232] = Df(68, 68, 0, ᐃΔ[1040], 3);
        this.ⵠᐃⵠ[232].id = 232;
        this.ⵠᐃⵠ[234] = Df(68, 68, 0, ᐃΔ[1157], 3);
        this.ⵠᐃⵠ[234].id = 234;
        this.ⵠᐃⵠ[10] = Df(68, 68, 0, ᐃΔ[387], 3);
        this.ⵠᐃⵠ[10].id = 10;
        this.ⵠᐃⵠ[171] = Df(68, 68, 0, ᐃΔ[388], 3);
        this.ⵠᐃⵠ[171].id = 171;
        this.ⵠᐃⵠ[172] = Df(68, 68, 0, ᐃΔ[389], 3);
        this.ⵠᐃⵠ[172].id = 172;
        this.ⵠᐃⵠ[173] = Df(68, 68, 0, ᐃΔ[390], 3);
        this.ⵠᐃⵠ[173].id = 173;
        this.ⵠᐃⵠ[11] = Df(68, 68, 0, ᐃΔ[391], 3);
        this.ⵠᐃⵠ[11].id = 11;
        this.ⵠᐃⵠ[12] = Df(68, 68, 0, ᐃΔ[403], 3);
        this.ⵠᐃⵠ[12].id = 12;
        this.ⵠᐃⵠ[13] = Df(68, 68, 0, ᐃΔ[397], 3);
        this.ⵠᐃⵠ[13].id = 13;
        this.ⵠᐃⵠ[14] = Df(68, 68, 0, ᐃΔ[400], 3);
        this.ⵠᐃⵠ[14].id = 14;
        this.ⵠᐃⵠ[15] = Df(68, 68, 0, ᐃΔ[406], 3);
        this.ⵠᐃⵠ[15].id = 15;
        this.ⵠᐃⵠ[16] = Df(68, 68, 0, ᐃΔ[875], 3);
        this.ⵠᐃⵠ[16].id = 16;
        this.ⵠᐃⵠ[119] = Df(68, 68, 0, ᐃΔ[410], 3);
        this.ⵠᐃⵠ[119].id = 119;
        this.ⵠᐃⵠ[23] = Df(68, 68, 0, ᐃΔ[422], 3);
        this.ⵠᐃⵠ[23].id = 23;
        this.ⵠᐃⵠ[24] = Df(68, 68, 0, ᐃΔ[425], 3);
        this.ⵠᐃⵠ[24].id = 24;
        this.ⵠᐃⵠ[87] = Df(68, 68, 0, ᐃΔ[1229], 3);
        this.ⵠᐃⵠ[87].id = 87;
        this.ⵠᐃⵠ[88] = Df(68, 68, 0, ᐃΔ[1232], 3);
        this.ⵠᐃⵠ[88].id = 88;
        this.ⵠᐃⵠ[80] = Df(68, 68, 0, ᐃΔ[1139], 3);
        this.ⵠᐃⵠ[80].id = 80;
        this.ⵠᐃⵠ[81] = Df(68, 68, 0, ᐃΔ[1142], 3);
        this.ⵠᐃⵠ[81].id = 81;
        this.ⵠᐃⵠ[101] = Df(68, 68, 0, ᐃΔ[1167], 3);
        this.ⵠᐃⵠ[101].id = 101;
        this.ⵠᐃⵠ[64] = Df(68, 68, 0, ᐃΔ[571], 3);
        this.ⵠᐃⵠ[64].id = 64;
        this.ⵠᐃⵠ[71] = Df(68, 68, 0, ᐃΔ[1240], 3);
        this.ⵠᐃⵠ[71].id = 71;
        this.ⵠᐃⵠ[102] = Df(68, 68, 0, ᐃΔ[1170], 3);
        this.ⵠᐃⵠ[102].id = 102;
        this.ⵠᐃⵠ[65] = Df(68, 68, 0, ᐃΔ[574], 3);
        this.ⵠᐃⵠ[65].id = 65;
        this.ⵠᐃⵠ[72] = Df(68, 68, 0, ᐃΔ[1243], 3);
        this.ⵠᐃⵠ[72].id = 72;
        this.ⵠᐃⵠ[103] = Df(68, 68, 0, ᐃΔ[1173], 3);
        this.ⵠᐃⵠ[103].id = 103;
        this.ⵠᐃⵠ[66] = Df(68, 68, 0, ᐃΔ[577], 3);
        this.ⵠᐃⵠ[66].id = 66;
        this.ⵠᐃⵠ[73] = Df(68, 68, 0, ᐃΔ[1246], 3);
        this.ⵠᐃⵠ[73].id = 73;
        this.ⵠᐃⵠ[104] = Df(68, 68, 0, ᐃΔ[1176], 3);
        this.ⵠᐃⵠ[104].id = 104;
        this.ⵠᐃⵠ[67] = Df(68, 68, 0, ᐃΔ[580], 3);
        this.ⵠᐃⵠ[67].id = 67;
        this.ⵠᐃⵠ[74] = Df(68, 68, 0, ᐃΔ[1249], 3);
        this.ⵠᐃⵠ[74].id = 74;
        this.ⵠᐃⵠ[105] = Df(68, 68, 0, ᐃΔ[1179], 3);
        this.ⵠᐃⵠ[105].id = 105;
        this.ⵠᐃⵠ[68] = Df(68, 68, 0, ᐃΔ[583], 3);
        this.ⵠᐃⵠ[68].id = 68;
        this.ⵠᐃⵠ[75] = Df(68, 68, 0, ᐃΔ[1252], 3);
        this.ⵠᐃⵠ[75].id = 75;
        this.ⵠᐃⵠ[106] = Df(68, 68, 0, ᐃΔ[1182], 3);
        this.ⵠᐃⵠ[106].id = 106;
        this.ⵠᐃⵠ[69] = Df(68, 68, 0, ᐃΔ[586], 3);
        this.ⵠᐃⵠ[69].id = 69;
        this.ⵠᐃⵠ[76] = Df(68, 68, 0, ᐃΔ[1255], 3);
        this.ⵠᐃⵠ[76].id = 76;
        this.ⵠᐃⵠ[107] = Df(68, 68, 0, ᐃΔ[1185], 3);
        this.ⵠᐃⵠ[107].id = 107;
        this.ⵠᐃⵠ[70] = Df(68, 68, 0, ᐃΔ[589], 3);
        this.ⵠᐃⵠ[70].id = 70;
        this.ⵠᐃⵠ[94] = Df(68, 68, 0, ᐃΔ[1258], 3);
        this.ⵠᐃⵠ[94].id = 94;
        this.ⵠᐃⵠ[95] = Df(68, 68, 0, ᐃΔ[1261], 3);
        this.ⵠᐃⵠ[95].id = 95;
        this.ⵠᐃⵠ[96] = Df(68, 68, 0, ᐃΔ[1264], 3);
        this.ⵠᐃⵠ[96].id = 96;
        this.ⵠᐃⵠ[97] = Df(68, 68, 0, ᐃΔ[1267], 3);
        this.ⵠᐃⵠ[97].id = 97;
        this.ⵠᐃⵠ[98] = Df(68, 68, 0, ᐃΔ[1270], 3);
        this.ⵠᐃⵠ[98].id = 98;
        this.ⵠᐃⵠ[99] = Df(68, 68, 0, ᐃΔ[1273], 3);
        this.ⵠᐃⵠ[99].id = 99;
        this.ⵠᐃⵠ[58] = Df(68, 68, 0, ᐃΔ[828], 3);
        this.ⵠᐃⵠ[58].id = 58;
        this.ⵠᐃⵠ[25] = Df(68, 68, 0, ᐃΔ[431], 3);
        this.ⵠᐃⵠ[25].id = 25;
        this.ⵠᐃⵠ[26] = Df(68, 68, 0, ᐃΔ[434], 3);
        this.ⵠᐃⵠ[26].id = 26;
        this.ⵠᐃⵠ[27] = Df(68, 68, 0, ᐃΔ[437], 3);
        this.ⵠᐃⵠ[27].id = 27;
        this.ⵠᐃⵠ[28] = Df(68, 68, 0, ᐃΔ[440], 3);
        this.ⵠᐃⵠ[28].id = 28;
        this.ⵠᐃⵠ[120] = Df(68, 68, 0, ᐃΔ[443], 3);
        this.ⵠᐃⵠ[120].id = 120;
        this.ⵠᐃⵠ[29] = Df(68, 68, 0, ᐃΔ[385], 3);
        this.ⵠᐃⵠ[29].id = 29;
        this.ⵠᐃⵠ[121] = Df(68, 68, 0, ᐃΔ[446], 3);
        this.ⵠᐃⵠ[121].id = 121;
        this.ⵠᐃⵠ[30] = Df(68, 68, 0, ᐃΔ[457], 3);
        this.ⵠᐃⵠ[30].id = 30;
        this.ⵠᐃⵠ[9] = Df(68, 68, 0, ᐃΔ[862], 3);
        this.ⵠᐃⵠ[9].id = 9;
        this.ⵠᐃⵠ[31] = Df(68, 68, 0, ᐃΔ[459], 3);
        this.ⵠᐃⵠ[31].id = 31;
        this.ⵠᐃⵠ[32] = Df(68, 68, 0, ᐃΔ[1018], 3);
        this.ⵠᐃⵠ[32].id = 32;
        this.ⵠᐃⵠ[33] = Df(68, 68, 0, ᐃΔ[474], 3);
        this.ⵠᐃⵠ[33].id = 33;
        this.ⵠᐃⵠ[35] = Df(68, 68, 0, ᐃΔ[479], 3);
        this.ⵠᐃⵠ[35].id = 35;
        this.ⵠᐃⵠ[36] = Df(68, 68, 0, ᐃΔ[482], 3);
        this.ⵠᐃⵠ[36].id = 36;
        this.ⵠᐃⵠ[37] = Df(68, 68, 0, ᐃΔ[485], 3);
        this.ⵠᐃⵠ[37].id = 37;
        this.ⵠᐃⵠ[38] = Df(68, 68, 0, ᐃΔ[488], 3);
        this.ⵠᐃⵠ[38].id = 38;
        this.ⵠᐃⵠ[39] = Df(68, 68, 0, ᐃΔ[491], 3);
        this.ⵠᐃⵠ[39].id = 39;
        this.ⵠᐃⵠ[122] = Df(68, 68, 0, ᐃΔ[494], 3);
        this.ⵠᐃⵠ[122].id = 122;
        this.ⵠᐃⵠ[123] = Df(68, 68, 0, ᐃΔ[497], 3);
        this.ⵠᐃⵠ[123].id = 123;
        this.ⵠᐃⵠ[124] = Df(68, 68, 0, ᐃΔ[501], 3);
        this.ⵠᐃⵠ[124].id = 124;
        this.ⵠᐃⵠ[40] = Df(68, 68, 0, ᐃΔ[504], 3);
        this.ⵠᐃⵠ[40].id = 40;
        this.ⵠᐃⵠ[146] = Df(68, 68, 0, ᐃΔ[506], 3);
        this.ⵠᐃⵠ[146].id = 146;
        this.ⵠᐃⵠ[240] = Df(68, 68, 0, ᐃΔ[1234], 3);
        this.ⵠᐃⵠ[240].id = 240;
        this.ⵠᐃⵠ[147] = Df(68, 68, 0, ᐃΔ[514], 3);
        this.ⵠᐃⵠ[147].id = 147;
        this.ⵠᐃⵠ[148] = Df(68, 68, 0, ᐃΔ[520], 3);
        this.ⵠᐃⵠ[148].id = 148;
        this.ⵠᐃⵠ[149] = Df(68, 68, 0, ᐃΔ[522], 3);
        this.ⵠᐃⵠ[149].id = 149;
        this.ⵠᐃⵠ[150] = Df(68, 68, 0, ᐃΔ[524], 3);
        this.ⵠᐃⵠ[150].id = 150;
        this.ⵠᐃⵠ[151] = Df(68, 68, 0, ᐃΔ[531], 3);
        this.ⵠᐃⵠ[151].id = 151;
        this.ⵠᐃⵠ[158] = Df(68, 68, 0, ᐃΔ[534], 3);
        this.ⵠᐃⵠ[158].id = 158;
        this.ⵠᐃⵠ[159] = Df(68, 68, 0, ᐃΔ[554], 3);
        this.ⵠᐃⵠ[159].id = 159;
        this.ⵠᐃⵠ[43] = Df(68, 68, 0, ᐃΔ[543], 3);
        this.ⵠᐃⵠ[43].id = 43;
        this.ⵠᐃⵠ[45] = Df(68, 68, 0, ᐃΔ[552], 3);
        this.ⵠᐃⵠ[45].id = 45;
        this.ⵠᐃⵠ[125] = Df(68, 68, 0, ᐃΔ[606], 3);
        this.ⵠᐃⵠ[125].id = 125;
        this.ⵠᐃⵠ[221] = Df(68, 68, 0, ᐃΔ[1237], 3);
        this.ⵠᐃⵠ[221].id = 221;
        this.ⵠᐃⵠ[223] = Df(68, 68, 0, ᐃΔ[1029], 3);
        this.ⵠᐃⵠ[223].id = 223;
        this.ⵠᐃⵠ[224] = Df(68, 68, 0, ᐃΔ[1032], 3);
        this.ⵠᐃⵠ[224].id = 224;
        this.ⵠᐃⵠ[230] = Df(68, 68, 0, ᐃΔ[1118], 3);
        this.ⵠᐃⵠ[230].id = 230;
        this.ⵠᐃⵠ[89] = Df(68, 68, 0, ᐃΔ[1047], 3);
        this.ⵠᐃⵠ[89].id = 89;
        this.ⵠᐃⵠ[225] = Df(68, 68, 0, ᐃΔ[1050], 3);
        this.ⵠᐃⵠ[225].id = 225;
        this.ⵠᐃⵠ[227] = Df(68, 68, 0, ᐃΔ[1081], 3);
        this.ⵠᐃⵠ[227].id = 227;
        this.ⵠᐃⵠ[239] = Df(68, 68, 0, ᐃΔ[1225], 3);
        this.ⵠᐃⵠ[239].id = 239;
        this.ⵠᐃⵠ[228] = Df(68, 68, 0, ᐃΔ[1096], 3);
        this.ⵠᐃⵠ[228].id = 228;
        this.ⵠᐃⵠ[229] = Df(68, 68, 0, ᐃΔ[1111], 3);
        this.ⵠᐃⵠ[229].id = 229;
        this.ⵠᐃⵠ[226] = Df(68, 68, 0, ᐃΔ[1190], 3);
        this.ⵠᐃⵠ[226].id = 226;
        this.ⵠᐃⵠ[126] = Df(68, 68, 0, ᐃΔ[610], 3);
        this.ⵠᐃⵠ[126].id = 126;
        this.ⵠᐃⵠ[127] = Df(68, 68, 0, ᐃΔ[615], 3);
        this.ⵠᐃⵠ[127].id = 127;
        this.ⵠᐃⵠ[128] = Df(68, 68, 0, ᐃΔ[614], 3);
        this.ⵠᐃⵠ[128].id = 128;
        this.ⵠᐃⵠ[46] = Df(68, 68, 0, ᐃΔ[617], 3);
        this.ⵠᐃⵠ[46].id = 46;
        this.ⵠᐃⵠ[50] = Df(68, 68, 0, ᐃΔ[701], 3);
        this.ⵠᐃⵠ[50].id = 50;
        this.ⵠᐃⵠ[51] = Df(68, 68, 0, ᐃΔ[703], 3);
        this.ⵠᐃⵠ[51].id = 51;
        this.ⵠᐃⵠ[52] = Df(68, 68, 0, ᐃΔ[707], 3);
        this.ⵠᐃⵠ[52].id = 52;
        this.ⵠᐃⵠ[55] = Df(68, 68, 0, ᐃΔ[710], 3);
        this.ⵠᐃⵠ[55].id = 55;
        this.ⵠᐃⵠ[129] = Df(68, 68, 0, ᐃΔ[625], 3);
        this.ⵠᐃⵠ[129].id = 129;
        this.ⵠᐃⵠ[130] = Df(68, 68, 0, ᐃΔ[628], 3);
        this.ⵠᐃⵠ[130].id = 130;
        this.ⵠᐃⵠ[131] = Df(68, 68, 0, ᐃΔ[630], 3);
        this.ⵠᐃⵠ[131].id = 131;
        this.ⵠᐃⵠ[132] = Df(68, 68, 0, ᐃΔ[633], 3);
        this.ⵠᐃⵠ[132].id = 132;
        this.ⵠᐃⵠ[133] = Df(68, 68, 0, ᐃΔ[636], 3);
        this.ⵠᐃⵠ[133].id = 133;
        this.ⵠᐃⵠ[134] = Df(68, 68, 0, ᐃΔ[640], 3);
        this.ⵠᐃⵠ[134].id = 134;
        this.ⵠᐃⵠ[135] = Df(68, 68, 0, ᐃΔ[645], 3);
        this.ⵠᐃⵠ[135].id = 135;
        this.ⵠᐃⵠ[47] = Df(68, 68, 0, ᐃΔ[648], 3);
        this.ⵠᐃⵠ[47].id = 47;
        this.ⵠᐃⵠ[48] = Df(68, 68, 0, ᐃΔ[651], 3);
        this.ⵠᐃⵠ[48].id = 48;
        this.ⵠᐃⵠ[49] = Df(68, 68, 0, ᐃΔ[653], 3);
        this.ⵠᐃⵠ[49].id = 49;
        this.ⵠᐃⵠ[136] = Df(68, 68, 0, ᐃΔ[661], 3);
        this.ⵠᐃⵠ[136].id = 136;
        this.ⵠᐃⵠ[143] = Df(68, 68, 0, ᐃΔ[689], 3);
        this.ⵠᐃⵠ[143].id = 143;
        this.ⵠᐃⵠ[137] = Df(68, 68, 0, ᐃΔ[663], 3);
        this.ⵠᐃⵠ[137].id = 137;
        this.ⵠᐃⵠ[138] = Df(68, 68, 0, ᐃΔ[665], 3);
        this.ⵠᐃⵠ[138].id = 138;
        this.ⵠᐃⵠ[139] = Df(68, 68, 0, ᐃΔ[675], 3);
        this.ⵠᐃⵠ[139].id = 139;
        this.ⵠᐃⵠ[140] = Df(68, 68, 0, ᐃΔ[682], 3);
        this.ⵠᐃⵠ[140].id = 140;
        this.ⵠᐃⵠ[141] = Df(68, 68, 0, ᐃΔ[683], 3);
        this.ⵠᐃⵠ[141].id = 141;
        this.ⵠᐃⵠ[142] = Df(68, 68, 0, ᐃΔ[686], 3);
        this.ⵠᐃⵠ[142].id = 142;
        this.ⵠᐃⵠ[144] = Df(68, 68, 0, ᐃΔ[719], 3);
        this.ⵠᐃⵠ[144].id = 144;
        this.ⵠᐃⵠ[145] = Df(68, 68, 0, ᐃΔ[731], 3);
        this.ⵠᐃⵠ[145].id = 145;
        this.ⵠᐃⵠ[59] = Df(68, 68, 0, ᐃΔ[733], 3);
        this.ⵠᐃⵠ[59].id = 59;
        this.ⵠᐃⵠ[62] = Df(68, 68, 0, ᐃΔ[565], 3);
        this.ⵠᐃⵠ[62].id = 62;
        this.ⵠᐃⵠ[185] = Df(68, 68, 0, ᐃΔ[590], 3);
        this.ⵠᐃⵠ[185].id = 185;
        this.ⵠᐃⵠ[184] = Df(68, 68, 0, ᐃΔ[752], 3);
        this.ⵠᐃⵠ[184].id = 184;
        this.ⵠᐃⵠ[187] = Df(68, 68, 0, ᐃΔ[591], 3);
        this.ⵠᐃⵠ[187].id = 187;
        this.ⵠᐃⵠ[186] = Df(68, 68, 0, ᐃΔ[754], 3);
        this.ⵠᐃⵠ[186].id = 186;
        this.ⵠᐃⵠ[77] = Df(68, 68, 0, ᐃΔ[757], 3);
        this.ⵠᐃⵠ[77].id = 77;
        this.ⵠᐃⵠ[175] = Df(68, 68, 0, ᐃΔ[759], 3);
        this.ⵠᐃⵠ[175].id = 175;
        this.ⵠᐃⵠ[176] = Df(68, 68, 0, ᐃΔ[763], 3);
        this.ⵠᐃⵠ[176].id = 176;
        this.ⵠᐃⵠ[78] = Df(68, 68, 0, ᐃΔ[761], 3);
        this.ⵠᐃⵠ[78].id = 78;
        this.ⵠᐃⵠ[177] = Df(68, 68, 0, ᐃΔ[766], 3);
        this.ⵠᐃⵠ[177].id = 177;
        this.ⵠᐃⵠ[79] = Df(68, 68, 0, ᐃΔ[765], 3);
        this.ⵠᐃⵠ[79].id = 79;
        this.ⵠᐃⵠ[83] = Df(68, 68, 0, ᐃΔ[769], 3);
        this.ⵠᐃⵠ[83].id = 83;
        this.ⵠᐃⵠ[84] = Df(68, 68, 0, ᐃΔ[773], 3);
        this.ⵠᐃⵠ[84].id = 84;
        this.ⵠᐃⵠ[178] = Df(68, 68, 0, ᐃΔ[774], 3);
        this.ⵠᐃⵠ[178].id = 178;
        this.ⵠᐃⵠ[179] = Df(68, 68, 0, ᐃΔ[775], 3);
        this.ⵠᐃⵠ[179].id = 179;
        this.ⵠᐃⵠ[86] = Df(68, 68, 0, ᐃΔ[778], 3);
        this.ⵠᐃⵠ[86].id = 86;
        this.ⵠᐃⵠ[85] = Df(68, 68, 0, ᐃΔ[781], 3);
        this.ⵠᐃⵠ[85].id = 85;
        this.ⵠᐃⵠ[180] = Df(68, 68, 0, ᐃΔ[786], 3);
        this.ⵠᐃⵠ[180].id = 180;
        this.ⵠᐃⵠ[181] = Df(68, 68, 0, ᐃΔ[787], 3);
        this.ⵠᐃⵠ[181].id = 181;
        this.ⵠᐃⵠ[182] = Df(68, 68, 0, ᐃΔ[790], 3);
        this.ⵠᐃⵠ[182].id = 182;
        this.ⵠᐃⵠ[183] = Df(68, 68, 0, ᐃΔ[801], 3);
        this.ⵠᐃⵠ[183].id = 183;
        this.ⵠᐃⵠ[188] = Df(68, 68, 0, ᐃΔ[810], 3);
        this.ⵠᐃⵠ[188].id = 188;
        this.ⵠᐃⵠ[189] = Df(68, 68, 0, ᐃΔ[815], 3);
        this.ⵠᐃⵠ[189].id = 189;
        this.ⵠᐃⵠ[190] = Df(68, 68, 0, ᐃΔ[844], 3);
        this.ⵠᐃⵠ[190].id = 190;
        this.ⵠᐃⵠ[191] = Df(68, 68, 0, ᐃΔ[836], 3);
        this.ⵠᐃⵠ[191].id = 191;
        this.ⵠᐃⵠ[192] = Df(68, 68, 0, ᐃΔ[841], 3);
        this.ⵠᐃⵠ[192].id = 192;
        this.ⵠᐃⵠ[193] = Df(68, 68, 0, ᐃΔ[847], 3);
        this.ⵠᐃⵠ[193].id = 193;
        this.ⵠᐃⵠ[194] = Df(68, 68, 0, ᐃΔ[851], 3);
        this.ⵠᐃⵠ[194].id = 194;
        this.ⵠᐃⵠ[206] = Df(68, 68, 0, ᐃΔ[961], 3);
        this.ⵠᐃⵠ[206].id = 206;
        this.ⵠᐃⵠ[207] = Df(68, 68, 0, ᐃΔ[974], 3);
        this.ⵠᐃⵠ[207].id = 207;
        this.ⵠᐃⵠ[204] = Df(68, 68, 0, ᐃΔ[951], 3);
        this.ⵠᐃⵠ[204].id = 204;
        this.ⵠᐃⵠ[205] = Df(68, 68, 0, ᐃΔ[956], 3);
        this.ⵠᐃⵠ[205].id = 205;
        this.ⵠᐃⵠ[208] = Df(68, 68, 0, ᐃΔ[968], 3);
        this.ⵠᐃⵠ[208].id = 208;
        this.ⵠᐃⵠ[209] = Df(68, 68, 0, ᐃΔ[973], 3);
        this.ⵠᐃⵠ[209].id = 209;
        this.ⵠᐃⵠ[210] = Df(68, 68, 0, ᐃΔ[983], 3);
        this.ⵠᐃⵠ[210].id = 210;
        this.ⵠᐃⵠ[211] = Df(68, 68, 0, ᐃΔ[988], 3);
        this.ⵠᐃⵠ[211].id = 211;
        this.ⵠᐃⵠ[41] = Df(68, 68, 0, ᐃΔ[881], 3);
        this.ⵠᐃⵠ[41].id = 41;
        this.ⵠᐃⵠ[42] = Df(68, 68, 0, ᐃΔ[883], 3);
        this.ⵠᐃⵠ[42].id = 42;
        this.ⵠᐃⵠ[12] = Df(68, 68, 0, ᐃΔ[403], 3);
        this.ⵠᐃⵠ[12].id = 12;
        this.ⵠᐃⵠ[16] = Df(68, 68, 0, ᐃΔ[875], 3);
        this.ⵠᐃⵠ[16].id = 16;
        this.ⵠᐃⵠ[196] = Df(68, 68, 0, ᐃΔ[898], 3);
        this.ⵠᐃⵠ[196].id = 196;
        this.ⵠᐃⵠ[18] = Df(68, 68, 0, ᐃΔ[899], 3);
        this.ⵠᐃⵠ[18].id = 18;
        this.ⵠᐃⵠ[197] = Df(68, 68, 0, ᐃΔ[906], 3);
        this.ⵠᐃⵠ[197].id = 197;
        this.ⵠᐃⵠ[198] = Df(68, 68, 0, ᐃΔ[908], 3);
        this.ⵠᐃⵠ[198].id = 198;
        this.ⵠᐃⵠ[61] = Df(68, 68, 0, ᐃΔ[911], 3);
        this.ⵠᐃⵠ[61].id = 61;
        this.ⵠᐃⵠ[201] = Df(68, 68, 0, ᐃΔ[871], 3);
        this.ⵠᐃⵠ[201].id = 201;
        this.ⵠᐃⵠ[199] = Df(68, 68, 0, ᐃΔ[863], 3);
        this.ⵠᐃⵠ[199].id = 199;
        this.ⵠᐃⵠ[200] = Df(68, 68, 0, ᐃΔ[868], 3);
        this.ⵠᐃⵠ[200].id = 200;
        this.ᐃⲆⵠΔΔ = [];
        for (j = 0; j < 250; j++) {
            this.ᐃⲆⵠΔΔ[j] = Df(0, 0, 0, ᐃΔ[366]);
        }
        this.ΔⲆⵠ = [];
        this.ΔⲆⵠ[0] = Df(60, 60, 0, ᐃΔ[261], 3);
        this.ΔⲆⵠ[0].id = 0;
        this.ΔⲆⵠ[1] = Df(60, 60, 0, ᐃΔ[312], 3);
        this.ΔⲆⵠ[1].id = 1;
        this.ΔⲆⵠ[108] = Df(60, 60, 0, ᐃΔ[315], 3);
        this.ΔⲆⵠ[108].id = 108;
        this.ΔⲆⵠ[108].info.Ⲇᐃ[2] = this.ΔⲆⵠ[108].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[109] = Df(60, 60, 0, ᐃΔ[316], 3);
        this.ΔⲆⵠ[109].id = 109;
        this.ΔⲆⵠ[109].info.Ⲇᐃ[2] = this.ΔⲆⵠ[109].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[110] = Df(60, 60, 0, ᐃΔ[277], 3);
        this.ΔⲆⵠ[110].id = 110;
        this.ΔⲆⵠ[233] = Df(60, 60, 0, ᐃΔ[1154], 3);
        this.ΔⲆⵠ[233].id = 233;
        this.ΔⲆⵠ[111] = Df(60, 60, 0, ᐃΔ[297], 3);
        this.ΔⲆⵠ[111].id = 111;
        this.ΔⲆⵠ[111].info.Ⲇᐃ[2] = this.ΔⲆⵠ[111].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[112] = Df(60, 60, 0, ᐃΔ[298], 3);
        this.ΔⲆⵠ[112].id = 112;
        this.ΔⲆⵠ[112].info.Ⲇᐃ[2] = this.ΔⲆⵠ[112].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[3] = Df(60, 60, 0, ᐃΔ[258], 3);
        this.ΔⲆⵠ[3].id = 3;
        this.ΔⲆⵠ[4] = Df(60, 60, 0, ᐃΔ[296], 3);
        this.ΔⲆⵠ[4].id = 4;
        this.ΔⲆⵠ[5] = Df(60, 60, 0, ᐃΔ[292], 3);
        this.ΔⲆⵠ[5].id = 5;
        this.ΔⲆⵠ[57] = Df(60, 60, 0, ᐃΔ[829], 3);
        this.ΔⲆⵠ[57].id = 57;
        this.ΔⲆⵠ[6] = Df(60, 60, 0, ᐃΔ[293], 3);
        this.ΔⲆⵠ[6].id = 6;
        this.ΔⲆⵠ[113] = Df(60, 60, 0, ᐃΔ[309], 3);
        this.ΔⲆⵠ[113].id = 113;
        this.ΔⲆⵠ[114] = Df(60, 60, 0, ᐃΔ[310], 3);
        this.ΔⲆⵠ[114].id = 114;
        this.ΔⲆⵠ[115] = Df(60, 60, 0, ᐃΔ[311], 3);
        this.ΔⲆⵠ[115].id = 115;
        this.ΔⲆⵠ[162] = Df(60, 60, 0, ᐃΔ[317], 3);
        this.ΔⲆⵠ[162].id = 162;
        this.ΔⲆⵠ[160] = Df(60, 60, 0, ᐃΔ[319], 3);
        this.ΔⲆⵠ[160].id = 160;
        this.ΔⲆⵠ[8] = Df(60, 60, 0, ᐃΔ[313], 3);
        this.ΔⲆⵠ[8].id = 8;
        this.ΔⲆⵠ[117] = Df(60, 60, 0, ᐃΔ[323], 3);
        this.ΔⲆⵠ[117].id = 117;
        this.ΔⲆⵠ[116] = Df(60, 60, 0, ᐃΔ[300], 3);
        this.ΔⲆⵠ[116].id = 116;
        this.ΔⲆⵠ[118] = Df(60, 60, 0, ᐃΔ[328], 3);
        this.ΔⲆⵠ[118].id = 118;
        this.ΔⲆⵠ[195] = Df(60, 60, 0, ᐃΔ[303], 3);
        this.ΔⲆⵠ[195].id = 195;
        this.ΔⲆⵠ[161] = Df(60, 60, 0, ᐃΔ[305], 3);
        this.ΔⲆⵠ[161].id = 161;
        this.ΔⲆⵠ[161].info.Ⲇᐃ[2] = this.ΔⲆⵠ[161].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[163] = Df(60, 60, 0, ᐃΔ[329], 3);
        this.ΔⲆⵠ[163].id = 163;
        this.ΔⲆⵠ[164] = Df(60, 60, 0, ᐃΔ[330], 3);
        this.ΔⲆⵠ[164].id = 164;
        this.ΔⲆⵠ[165] = Df(60, 60, 0, ᐃΔ[331], 3);
        this.ΔⲆⵠ[165].id = 165;
        this.ΔⲆⵠ[166] = Df(60, 60, 0, ᐃΔ[335], 3);
        this.ΔⲆⵠ[166].id = 166;
        this.ΔⲆⵠ[167] = Df(60, 60, 0, ᐃΔ[337], 3);
        this.ΔⲆⵠ[167].id = 167;
        this.ΔⲆⵠ[168] = Df(60, 60, 0, ᐃΔ[361], 3);
        this.ΔⲆⵠ[168].id = 168;
        this.ΔⲆⵠ[169] = Df(60, 60, 0, ᐃΔ[362], 3);
        this.ΔⲆⵠ[169].id = 169;
        this.ΔⲆⵠ[170] = Df(60, 60, 0, ᐃΔ[364], 3);
        this.ΔⲆⵠ[170].id = 170;
        this.ΔⲆⵠ[29] = Df(60, 60, 0, ᐃΔ[392], 3);
        this.ΔⲆⵠ[29].id = 29;
        this.ΔⲆⵠ[10] = Df(60, 60, 0, ᐃΔ[369], 3);
        this.ΔⲆⵠ[10].id = 10;
        this.ΔⲆⵠ[171] = Df(60, 60, 0, ᐃΔ[372], 3);
        this.ΔⲆⵠ[171].id = 171;
        this.ΔⲆⵠ[172] = Df(60, 60, 0, ᐃΔ[375], 3);
        this.ΔⲆⵠ[172].id = 172;
        this.ΔⲆⵠ[173] = Df(60, 60, 0, ᐃΔ[378], 3);
        this.ΔⲆⵠ[173].id = 173;
        this.ΔⲆⵠ[2] = Df(60, 60, 0, ᐃΔ[368], 3);
        this.ΔⲆⵠ[2].id = 2;
        this.ΔⲆⵠ[2].info.Ⲇᐃ[2] = this.ΔⲆⵠ[2].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[237] = Df(60, 60, 0, ᐃΔ[1162], 3);
        this.ΔⲆⵠ[237].id = 237;
        this.ΔⲆⵠ[237].info.Ⲇᐃ[2] = this.ΔⲆⵠ[237].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[174] = Df(60, 60, 0, ᐃΔ[393], 3);
        this.ΔⲆⵠ[174].id = 174;
        this.ΔⲆⵠ[174].info.Ⲇᐃ[2] = this.ΔⲆⵠ[174].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[222] = Df(60, 60, 0, ᐃΔ[1035], 3);
        this.ΔⲆⵠ[222].id = 222;
        this.ΔⲆⵠ[231] = Df(60, 60, 0, ᐃΔ[1037], 3);
        this.ΔⲆⵠ[231].id = 231;
        this.ΔⲆⵠ[232] = Df(60, 60, 0, ᐃΔ[1039], 3);
        this.ΔⲆⵠ[232].id = 232;
        this.ΔⲆⵠ[234] = Df(60, 60, 0, ᐃΔ[1156], 3);
        this.ΔⲆⵠ[234].id = 234;
        this.ΔⲆⵠ[10] = Df(60, 60, 0, ᐃΔ[369], 3);
        this.ΔⲆⵠ[10].id = 10;
        this.ΔⲆⵠ[11] = Df(60, 60, 0, ᐃΔ[381], 3);
        this.ΔⲆⵠ[11].id = 11;
        this.ΔⲆⵠ[12] = Df(60, 60, 0, ᐃΔ[401], 3);
        this.ΔⲆⵠ[12].id = 12;
        this.ΔⲆⵠ[13] = Df(60, 60, 0, ᐃΔ[395], 3);
        this.ΔⲆⵠ[13].id = 13;
        this.ΔⲆⵠ[14] = Df(60, 60, 0, ᐃΔ[398], 3);
        this.ΔⲆⵠ[14].id = 14;
        this.ΔⲆⵠ[15] = Df(60, 60, 0, ᐃΔ[404], 3);
        this.ΔⲆⵠ[15].id = 15;
        this.ΔⲆⵠ[16] = Df(60, 60, 0, ᐃΔ[874], 3);
        this.ΔⲆⵠ[16].id = 16;
        this.ΔⲆⵠ[119] = Df(60, 60, 0, ᐃΔ[408], 3);
        this.ΔⲆⵠ[119].id = 119;
        this.ΔⲆⵠ[23] = Df(60, 60, 0, ᐃΔ[420], 3);
        this.ΔⲆⵠ[23].id = 23;
        this.ΔⲆⵠ[24] = Df(60, 60, 0, ᐃΔ[423], 3);
        this.ΔⲆⵠ[24].id = 24;
        this.ΔⲆⵠ[87] = Df(60, 60, 0, ᐃΔ[1227], 3);
        this.ΔⲆⵠ[87].id = 87;
        this.ΔⲆⵠ[88] = Df(60, 60, 0, ᐃΔ[1230], 3);
        this.ΔⲆⵠ[88].id = 88;
        this.ΔⲆⵠ[80] = Df(60, 60, 0, ᐃΔ[1137], 3);
        this.ΔⲆⵠ[80].id = 80;
        this.ΔⲆⵠ[81] = Df(60, 60, 0, ᐃΔ[1140], 3);
        this.ΔⲆⵠ[81].id = 81;
        this.ΔⲆⵠ[64] = Df(60, 60, 0, ᐃΔ[569], 3);
        this.ΔⲆⵠ[64].id = 64;
        this.ΔⲆⵠ[101] = Df(60, 60, 0, ᐃΔ[1166], 3);
        this.ΔⲆⵠ[101].id = 101;
        this.ΔⲆⵠ[71] = Df(60, 60, 0, ᐃΔ[1239], 3);
        this.ΔⲆⵠ[71].id = 71;
        this.ΔⲆⵠ[65] = Df(60, 60, 0, ᐃΔ[572], 3);
        this.ΔⲆⵠ[65].id = 65;
        this.ΔⲆⵠ[102] = Df(60, 60, 0, ᐃΔ[1169], 3);
        this.ΔⲆⵠ[102].id = 102;
        this.ΔⲆⵠ[72] = Df(60, 60, 0, ᐃΔ[1242], 3);
        this.ΔⲆⵠ[72].id = 72;
        this.ΔⲆⵠ[66] = Df(60, 60, 0, ᐃΔ[575], 3);
        this.ΔⲆⵠ[66].id = 66;
        this.ΔⲆⵠ[103] = Df(60, 60, 0, ᐃΔ[1172], 3);
        this.ΔⲆⵠ[103].id = 103;
        this.ΔⲆⵠ[73] = Df(60, 60, 0, ᐃΔ[1245], 3);
        this.ΔⲆⵠ[73].id = 73;
        this.ΔⲆⵠ[67] = Df(60, 60, 0, ᐃΔ[578], 3);
        this.ΔⲆⵠ[67].id = 67;
        this.ΔⲆⵠ[104] = Df(60, 60, 0, ᐃΔ[1175], 3);
        this.ΔⲆⵠ[104].id = 104;
        this.ΔⲆⵠ[74] = Df(60, 60, 0, ᐃΔ[1248], 3);
        this.ΔⲆⵠ[74].id = 74;
        this.ΔⲆⵠ[68] = Df(60, 60, 0, ᐃΔ[581], 3);
        this.ΔⲆⵠ[68].id = 68;
        this.ΔⲆⵠ[105] = Df(60, 60, 0, ᐃΔ[1178], 3);
        this.ΔⲆⵠ[105].id = 105;
        this.ΔⲆⵠ[75] = Df(60, 60, 0, ᐃΔ[1251], 3);
        this.ΔⲆⵠ[75].id = 75;
        this.ΔⲆⵠ[69] = Df(60, 60, 0, ᐃΔ[584], 3);
        this.ΔⲆⵠ[69].id = 69;
        this.ΔⲆⵠ[106] = Df(60, 60, 0, ᐃΔ[1181], 3);
        this.ΔⲆⵠ[106].id = 106;
        this.ΔⲆⵠ[76] = Df(60, 60, 0, ᐃΔ[1254], 3);
        this.ΔⲆⵠ[76].id = 76;
        this.ΔⲆⵠ[70] = Df(60, 60, 0, ᐃΔ[587], 3);
        this.ΔⲆⵠ[70].id = 70;
        this.ΔⲆⵠ[107] = Df(60, 60, 0, ᐃΔ[1184], 3);
        this.ΔⲆⵠ[107].id = 107;
        this.ΔⲆⵠ[94] = Df(60, 60, 0, ᐃΔ[1257], 3);
        this.ΔⲆⵠ[94].id = 94;
        this.ΔⲆⵠ[95] = Df(60, 60, 0, ᐃΔ[1260], 3);
        this.ΔⲆⵠ[95].id = 95;
        this.ΔⲆⵠ[96] = Df(60, 60, 0, ᐃΔ[1263], 3);
        this.ΔⲆⵠ[96].id = 96;
        this.ΔⲆⵠ[97] = Df(60, 60, 0, ᐃΔ[1266], 3);
        this.ΔⲆⵠ[97].id = 97;
        this.ΔⲆⵠ[98] = Df(60, 60, 0, ᐃΔ[1269], 3);
        this.ΔⲆⵠ[98].id = 98;
        this.ΔⲆⵠ[99] = Df(60, 60, 0, ᐃΔ[1272], 3);
        this.ΔⲆⵠ[99].id = 99;
        this.ΔⲆⵠ[58] = Df(60, 60, 0, ᐃΔ[826], 3);
        this.ΔⲆⵠ[58].id = 58;
        this.ΔⲆⵠ[25] = Df(60, 60, 0, ᐃΔ[429], 3);
        this.ΔⲆⵠ[25].id = 25;
        this.ΔⲆⵠ[26] = Df(60, 60, 0, ᐃΔ[432], 3);
        this.ΔⲆⵠ[26].id = 26;
        this.ΔⲆⵠ[27] = Df(60, 60, 0, ᐃΔ[435], 3);
        this.ΔⲆⵠ[27].id = 27;
        this.ΔⲆⵠ[28] = Df(60, 60, 0, ᐃΔ[438], 3);
        this.ΔⲆⵠ[28].id = 28;
        this.ΔⲆⵠ[120] = Df(60, 60, 0, ᐃΔ[441], 3);
        this.ΔⲆⵠ[120].id = 120;
        this.ΔⲆⵠ[120].info.Ⲇᐃ[2] = this.ΔⲆⵠ[120].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[29] = Df(60, 60, 0, ᐃΔ[392], 3);
        this.ΔⲆⵠ[29].id = 29;
        this.ΔⲆⵠ[121] = Df(60, 60, 0, ᐃΔ[418], 3);
        this.ΔⲆⵠ[121].id = 121;
        this.ΔⲆⵠ[121].info.Ⲇᐃ[2] = this.ΔⲆⵠ[121].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[30] = Df(60, 60, 0, ᐃΔ[455], 3);
        this.ΔⲆⵠ[30].id = 30;
        this.ΔⲆⵠ[9] = Df(60, 60, 0, ᐃΔ[860], 3);
        this.ΔⲆⵠ[9].id = 9;
        this.ΔⲆⵠ[31] = Df(60, 60, 0, ᐃΔ[458], 3);
        this.ΔⲆⵠ[31].id = 31;
        this.ΔⲆⵠ[32] = Df(60, 60, 0, ᐃΔ[1017], 3);
        this.ΔⲆⵠ[32].id = 32;
        this.ΔⲆⵠ[33] = Df(60, 60, 0, ᐃΔ[472], 3);
        this.ΔⲆⵠ[33].id = 33;
        this.ΔⲆⵠ[35] = Df(60, 60, 0, ᐃΔ[477], 3);
        this.ΔⲆⵠ[35].id = 35;
        this.ΔⲆⵠ[36] = Df(60, 60, 0, ᐃΔ[480], 3);
        this.ΔⲆⵠ[36].id = 36;
        this.ΔⲆⵠ[37] = Df(60, 60, 0, ᐃΔ[483], 3);
        this.ΔⲆⵠ[37].id = 37;
        this.ΔⲆⵠ[38] = Df(60, 60, 0, ᐃΔ[486], 3);
        this.ΔⲆⵠ[38].id = 38;
        this.ΔⲆⵠ[39] = Df(60, 60, 0, ᐃΔ[489], 3);
        this.ΔⲆⵠ[39].id = 39;
        this.ΔⲆⵠ[122] = Df(60, 60, 0, ᐃΔ[492], 3);
        this.ΔⲆⵠ[122].id = 122;
        this.ΔⲆⵠ[123] = Df(60, 60, 0, ᐃΔ[495], 3);
        this.ΔⲆⵠ[123].id = 123;
        this.ΔⲆⵠ[124] = Df(60, 60, 0, ᐃΔ[499], 3);
        this.ΔⲆⵠ[124].id = 124;
        this.ΔⲆⵠ[40] = Df(60, 60, 0, ᐃΔ[502], 3);
        this.ΔⲆⵠ[40].id = 40;
        this.ΔⲆⵠ[146] = Df(60, 60, 0, ᐃΔ[505], 3);
        this.ΔⲆⵠ[146].id = 146;
        this.ΔⲆⵠ[146].info.Ⲇᐃ[2] = this.ΔⲆⵠ[146].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[240] = Df(60, 60, 0, ᐃΔ[1233], 3);
        this.ΔⲆⵠ[240].id = 240;
        this.ΔⲆⵠ[240].info.Ⲇᐃ[2] = this.ΔⲆⵠ[240].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[147] = Df(60, 60, 0, ᐃΔ[513], 3);
        this.ΔⲆⵠ[147].id = 147;
        this.ΔⲆⵠ[147].info.Ⲇᐃ[2] = this.ΔⲆⵠ[147].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[148] = Df(60, 60, 0, ᐃΔ[518], 3);
        this.ΔⲆⵠ[148].id = 148;
        this.ΔⲆⵠ[148].info.Ⲇᐃ[2] = this.ΔⲆⵠ[148].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[149] = Df(60, 60, 0, ᐃΔ[521], 3);
        this.ΔⲆⵠ[149].id = 149;
        this.ΔⲆⵠ[150] = Df(60, 60, 0, ᐃΔ[523], 3);
        this.ΔⲆⵠ[150].id = 150;
        this.ΔⲆⵠ[151] = Df(60, 60, 0, ᐃΔ[529], 3);
        this.ΔⲆⵠ[151].id = 151;
        this.ΔⲆⵠ[158] = Df(60, 60, 0, ᐃΔ[532], 3);
        this.ΔⲆⵠ[158].id = 158;
        this.ΔⲆⵠ[159] = Df(60, 60, 0, ᐃΔ[553], 3);
        this.ΔⲆⵠ[159].id = 159;
        this.ΔⲆⵠ[43] = Df(60, 60, 0, ᐃΔ[541], 3);
        this.ΔⲆⵠ[43].id = 43;
        this.ΔⲆⵠ[45] = Df(60, 60, 0, ᐃΔ[550], 3);
        this.ΔⲆⵠ[45].id = 45;
        this.ΔⲆⵠ[125] = Df(60, 60, 0, ᐃΔ[605], 3);
        this.ΔⲆⵠ[125].id = 125;
        this.ΔⲆⵠ[221] = Df(60, 60, 0, ᐃΔ[1236], 3);
        this.ΔⲆⵠ[221].id = 221;
        this.ΔⲆⵠ[223] = Df(60, 60, 0, ᐃΔ[1028], 3);
        this.ΔⲆⵠ[223].id = 223;
        this.ΔⲆⵠ[224] = Df(60, 60, 0, ᐃΔ[1031], 3);
        this.ΔⲆⵠ[224].id = 224;
        this.ΔⲆⵠ[230] = Df(60, 60, 0, ᐃΔ[1117], 3);
        this.ΔⲆⵠ[230].id = 230;
        this.ΔⲆⵠ[89] = Df(60, 60, 0, ᐃΔ[1046], 3);
        this.ΔⲆⵠ[89].id = 89;
        this.ΔⲆⵠ[225] = Df(60, 60, 0, ᐃΔ[1049], 3);
        this.ΔⲆⵠ[225].id = 225;
        this.ΔⲆⵠ[226] = Df(60, 60, 0, ᐃΔ[1189], 3);
        this.ΔⲆⵠ[226].id = 226;
        this.ΔⲆⵠ[227] = Df(60, 60, 0, ᐃΔ[1080], 3);
        this.ΔⲆⵠ[227].id = 227;
        this.ΔⲆⵠ[239] = Df(60, 60, 0, ᐃΔ[1224], 3);
        this.ΔⲆⵠ[239].id = 239;
        this.ΔⲆⵠ[228] = Df(60, 60, 0, ᐃΔ[1095], 3);
        this.ΔⲆⵠ[228].id = 228;
        this.ΔⲆⵠ[229] = Df(60, 60, 0, ᐃΔ[1110], 3);
        this.ΔⲆⵠ[229].id = 229;
        this.ΔⲆⵠ[126] = Df(60, 60, 0, ᐃΔ[609], 3);
        this.ΔⲆⵠ[126].id = 126;
        this.ΔⲆⵠ[126].info.Ⲇᐃ[2] = this.ΔⲆⵠ[126].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[127] = Df(60, 60, 0, ᐃΔ[613], 3);
        this.ΔⲆⵠ[127].id = 127;
        this.ΔⲆⵠ[128] = Df(60, 60, 0, ᐃΔ[612], 3);
        this.ΔⲆⵠ[128].id = 128;
        this.ΔⲆⵠ[46] = Df(60, 60, 0, ᐃΔ[616], 3);
        this.ΔⲆⵠ[46].id = 46;
        this.ΔⲆⵠ[50] = Df(60, 60, 0, ᐃΔ[699], 3);
        this.ΔⲆⵠ[50].id = 50;
        this.ΔⲆⵠ[51] = Df(60, 60, 0, ᐃΔ[702], 3);
        this.ΔⲆⵠ[51].id = 51;
        this.ΔⲆⵠ[52] = Df(60, 60, 0, ᐃΔ[705], 3);
        this.ΔⲆⵠ[52].id = 52;
        this.ΔⲆⵠ[55] = Df(60, 60, 0, ᐃΔ[709], 3);
        this.ΔⲆⵠ[55].id = 55;
        this.ΔⲆⵠ[129] = Df(60, 60, 0, ᐃΔ[624], 3);
        this.ΔⲆⵠ[129].id = 129;
        this.ΔⲆⵠ[129].info.Ⲇᐃ[2] = this.ΔⲆⵠ[129].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[130] = Df(60, 60, 0, ᐃΔ[626], 3);
        this.ΔⲆⵠ[130].id = 130;
        this.ΔⲆⵠ[131] = Df(60, 60, 0, ᐃΔ[629], 3);
        this.ΔⲆⵠ[131].id = 131;
        this.ΔⲆⵠ[131].info.Ⲇᐃ[2] = this.ΔⲆⵠ[131].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[132] = Df(60, 60, 0, ᐃΔ[631], 3);
        this.ΔⲆⵠ[132].id = 132;
        this.ΔⲆⵠ[133] = Df(60, 60, 0, ᐃΔ[634], 3);
        this.ΔⲆⵠ[133].id = 133;
        this.ΔⲆⵠ[134] = Df(60, 60, 0, ᐃΔ[639], 3);
        this.ΔⲆⵠ[134].id = 134;
        this.ΔⲆⵠ[134].info.Ⲇᐃ[2] = this.ΔⲆⵠ[134].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[135] = Df(60, 60, 0, ᐃΔ[644], 3);
        this.ΔⲆⵠ[135].id = 135;
        this.ΔⲆⵠ[47] = Df(60, 60, 0, ᐃΔ[646], 3);
        this.ΔⲆⵠ[47].id = 47;
        this.ΔⲆⵠ[48] = Df(60, 60, 0, ᐃΔ[649], 3);
        this.ΔⲆⵠ[48].id = 48;
        this.ΔⲆⵠ[49] = Df(60, 60, 0, ᐃΔ[652], 3);
        this.ΔⲆⵠ[49].id = 49;
        this.ΔⲆⵠ[136] = Df(60, 60, 0, ᐃΔ[659], 3);
        this.ΔⲆⵠ[136].id = 136;
        this.ΔⲆⵠ[143] = Df(60, 60, 0, ᐃΔ[143], 3);
        this.ΔⲆⵠ[143].id = 143;
        this.ΔⲆⵠ[137] = Df(60, 60, 0, ᐃΔ[662], 3);
        this.ΔⲆⵠ[137].id = 137;
        this.ΔⲆⵠ[138] = Df(60, 60, 0, ᐃΔ[664], 3);
        this.ΔⲆⵠ[138].id = 138;
        this.ΔⲆⵠ[139] = Df(60, 60, 0, ᐃΔ[674], 3);
        this.ΔⲆⵠ[139].id = 139;
        this.ΔⲆⵠ[139].info.Ⲇᐃ[2] = this.ΔⲆⵠ[139].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[140] = Df(60, 60, 0, ᐃΔ[140], 3);
        this.ΔⲆⵠ[140].id = 140;
        this.ΔⲆⵠ[140].info.Ⲇᐃ[2] = this.ΔⲆⵠ[140].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[141] = Df(60, 60, 0, ᐃΔ[685], 3);
        this.ΔⲆⵠ[141].id = 141;
        this.ΔⲆⵠ[142] = Df(60, 60, 0, ᐃΔ[142], 3);
        this.ΔⲆⵠ[142].id = 142;
        this.ΔⲆⵠ[142].info.Ⲇᐃ[2] = this.ΔⲆⵠ[142].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[144] = Df(60, 60, 0, ᐃΔ[717], 3);
        this.ΔⲆⵠ[144].id = 144;
        this.ΔⲆⵠ[145] = Df(60, 60, 0, ᐃΔ[145], 3);
        this.ΔⲆⵠ[145].id = 145;
        this.ΔⲆⵠ[59] = Df(60, 60, 0, ᐃΔ[732], 3);
        this.ΔⲆⵠ[59].id = 59;
        this.ΔⲆⵠ[62] = Df(60, 60, 0, ᐃΔ[563], 3);
        this.ΔⲆⵠ[62].id = 62;
        this.ΔⲆⵠ[185] = Df(60, 60, 0, ᐃΔ[252], 3);
        this.ΔⲆⵠ[185].id = 185;
        this.ΔⲆⵠ[185].info.Ⲇᐃ[2] = this.ΔⲆⵠ[185].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[184] = Df(60, 60, 0, ᐃΔ[751], 3);
        this.ΔⲆⵠ[184].id = 184;
        this.ΔⲆⵠ[184].info.Ⲇᐃ[2] = this.ΔⲆⵠ[184].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[17] = Df(60, 60, 0, ᐃΔ[877], 3);
        this.ΔⲆⵠ[17].id = 17;
        this.ΔⲆⵠ[63] = Df(60, 60, 0, ᐃΔ[566], 3);
        this.ΔⲆⵠ[63].id = 63;
        this.ΔⲆⵠ[187] = Df(60, 60, 0, ᐃΔ[253], 3);
        this.ΔⲆⵠ[187].id = 187;
        this.ΔⲆⵠ[187].info.Ⲇᐃ[2] = this.ΔⲆⵠ[187].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[186] = Df(60, 60, 0, ᐃΔ[753], 3);
        this.ΔⲆⵠ[186].id = 186;
        this.ΔⲆⵠ[186].info.Ⲇᐃ[2] = this.ΔⲆⵠ[186].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[77] = Df(60, 60, 0, ᐃΔ[756], 3);
        this.ΔⲆⵠ[77].id = 77;
        this.ΔⲆⵠ[175] = Df(60, 60, 0, ᐃΔ[176], 3);
        this.ΔⲆⵠ[175].id = 175;
        this.ΔⲆⵠ[175].info.Ⲇᐃ[2] = this.ΔⲆⵠ[175].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[176] = Df(60, 60, 0, ᐃΔ[177], 3);
        this.ΔⲆⵠ[176].id = 176;
        this.ΔⲆⵠ[176].info.Ⲇᐃ[2] = this.ΔⲆⵠ[176].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[78] = Df(60, 60, 0, ᐃΔ[760], 3);
        this.ΔⲆⵠ[78].id = 78;
        this.ΔⲆⵠ[177] = Df(60, 60, 0, ᐃΔ[175], 3);
        this.ΔⲆⵠ[177].id = 177;
        this.ΔⲆⵠ[177].info.Ⲇᐃ[2] = this.ΔⲆⵠ[177].info.Ⲇᐃ[0];
        this.ΔⲆⵠ[79] = Df(60, 60, 0, ᐃΔ[764], 3);
        this.ΔⲆⵠ[79].id = 79;
        this.ΔⲆⵠ[83] = Df(60, 60, 0, ᐃΔ[767], 3);
        this.ΔⲆⵠ[83].id = 83;
        this.ΔⲆⵠ[84] = Df(60, 60, 0, ᐃΔ[771], 3);
        this.ΔⲆⵠ[84].id = 84;
        this.ΔⲆⵠ[178] = Df(60, 60, 0, ᐃΔ[178], 3);
        this.ΔⲆⵠ[178].id = 178;
        this.ΔⲆⵠ[179] = Df(60, 60, 0, ᐃΔ[179], 3);
        this.ΔⲆⵠ[179].id = 179;
        this.ΔⲆⵠ[86] = Df(60, 60, 0, ᐃΔ[776], 3);
        this.ΔⲆⵠ[86].id = 86;
        this.ΔⲆⵠ[85] = Df(60, 60, 0, ᐃΔ[779], 3);
        this.ΔⲆⵠ[85].id = 85;
        this.ΔⲆⵠ[180] = Df(60, 60, 0, ᐃΔ[180], 3);
        this.ΔⲆⵠ[180].id = 180;
        this.ΔⲆⵠ[181] = Df(60, 60, 0, ᐃΔ[181], 3);
        this.ΔⲆⵠ[181].id = 181;
        this.ΔⲆⵠ[182] = Df(60, 60, 0, ᐃΔ[789], 3);
        this.ΔⲆⵠ[182].id = 182;
        this.ΔⲆⵠ[183] = Df(60, 60, 0, ᐃΔ[800], 3);
        this.ΔⲆⵠ[183].id = 183;
        this.ΔⲆⵠ[188] = Df(60, 60, 0, ᐃΔ[808], 3);
        this.ΔⲆⵠ[188].id = 188;
        this.ΔⲆⵠ[189] = Df(60, 60, 0, ᐃΔ[814], 3);
        this.ΔⲆⵠ[189].id = 189;
        this.ΔⲆⵠ[191] = Df(60, 60, 0, ᐃΔ[834], 3);
        this.ΔⲆⵠ[191].id = 191;
        this.ΔⲆⵠ[192] = Df(60, 60, 0, ᐃΔ[840], 3);
        this.ΔⲆⵠ[192].id = 192;
        this.ΔⲆⵠ[190] = Df(60, 60, 0, ᐃΔ[842], 3);
        this.ΔⲆⵠ[190].id = 190;
        this.ΔⲆⵠ[193] = Df(60, 60, 0, ᐃΔ[845], 3);
        this.ΔⲆⵠ[193].id = 193;
        this.ΔⲆⵠ[194] = Df(60, 60, 0, ᐃΔ[850], 3);
        this.ΔⲆⵠ[194].id = 194;
        this.ΔⲆⵠ[204] = Df(60, 60, 0, ᐃΔ[949], 3);
        this.ΔⲆⵠ[204].id = 204;
        this.ΔⲆⵠ[205] = Df(60, 60, 0, ᐃΔ[955], 3);
        this.ΔⲆⵠ[205].id = 205;
        this.ΔⲆⵠ[206] = Df(60, 60, 0, ᐃΔ[959], 3);
        this.ΔⲆⵠ[206].id = 206;
        this.ΔⲆⵠ[207] = Df(60, 60, 0, ᐃΔ[965], 3);
        this.ΔⲆⵠ[207].id = 207;
        this.ΔⲆⵠ[208] = Df(60, 60, 0, ᐃΔ[966], 3);
        this.ΔⲆⵠ[208].id = 208;
        this.ΔⲆⵠ[209] = Df(60, 60, 0, ᐃΔ[972], 3);
        this.ΔⲆⵠ[209].id = 209;
        this.ΔⲆⵠ[210] = Df(60, 60, 0, ᐃΔ[981], 3);
        this.ΔⲆⵠ[210].id = 210;
        this.ΔⲆⵠ[211] = Df(60, 60, 0, ᐃΔ[987], 3);
        this.ΔⲆⵠ[211].id = 211;
        this.ΔⲆⵠ[41] = Df(60, 60, 0, ᐃΔ[880], 3);
        this.ΔⲆⵠ[41].id = 41;
        this.ΔⲆⵠ[42] = Df(60, 60, 0, ᐃΔ[882], 3);
        this.ΔⲆⵠ[42].id = 42;
        this.ΔⲆⵠ[12] = Df(60, 60, 0, ᐃΔ[401], 3);
        this.ΔⲆⵠ[12].id = 12;
        this.ΔⲆⵠ[16] = Df(60, 60, 0, ᐃΔ[874], 3);
        this.ΔⲆⵠ[16].id = 16;
        this.ΔⲆⵠ[196] = Df(60, 60, 0, ᐃΔ[196], 3);
        this.ΔⲆⵠ[196].id = 196;
        this.ΔⲆⵠ[18] = Df(60, 60, 0, ᐃΔ[901], 3);
        this.ΔⲆⵠ[18].id = 18;
        this.ΔⲆⵠ[197] = Df(60, 60, 0, ᐃΔ[197], 3);
        this.ΔⲆⵠ[197].id = 197;
        this.ΔⲆⵠ[198] = Df(60, 60, 0, ᐃΔ[907], 3);
        this.ΔⲆⵠ[198].id = 198;
        this.ΔⲆⵠ[61] = Df(60, 60, 0, ᐃΔ[910], 3);
        this.ΔⲆⵠ[61].id = 61;
        this.ΔⲆⵠ[201] = Df(60, 60, 0, ᐃΔ[870], 3);
        this.ΔⲆⵠ[201].id = 201;
        this.ΔⲆⵠ[200] = Df(60, 60, 0, ᐃΔ[200], 3);
        this.ΔⲆⵠ[200].id = 200;
        this.ΔⲆⵠ[199] = Df(60, 60, 0, ᐃΔ[865], 3);
        this.ΔⲆⵠ[199].id = 199;
        this.ᐃΔΔ = [];
        this.ᐃΔΔ[35] = Df(60, 60, 0, ᐃΔ[254], 3);
        this.ᐃΔΔ[35].id = 35;
        this.ᐃΔΔ[5] = Df(60, 60, 0, ᐃΔ[256], 3);
        this.ᐃΔΔ[5].id = 5;
        this.ᐃΔΔ[0] = Df(60, 60, 0, ᐃΔ[302], 3);
        this.ᐃΔΔ[0].id = 0;
        this.ᐃΔΔ[3] = Df(60, 60, 0, ᐃΔ[262], 3);
        this.ᐃΔΔ[3].id = 3;
        this.ᐃΔΔ[55] = Df(60, 60, 0, ᐃΔ[318], 3);
        this.ᐃΔΔ[55].id = 55;
        this.ᐃΔΔ[67] = Df(60, 60, 0, ᐃΔ[320], 3);
        this.ᐃΔΔ[67].id = 67;
        this.ᐃΔΔ[40] = Df(60, 60, 0, ᐃΔ[284], 3);
        this.ᐃΔΔ[40].id = 40;
        this.ᐃΔΔ[6] = Df(60, 60, 0, ᐃΔ[295], 3);
        this.ᐃΔΔ[6].id = 6;
        this.ᐃΔΔ[7] = Df(60, 60, 0, ᐃΔ[257], 3);
        this.ᐃΔΔ[7].id = 7;
        this.ᐃΔΔ[36] = Df(60, 60, 0, ᐃΔ[290], 3);
        this.ᐃΔΔ[36].id = 36;
        this.ᐃΔΔ[34] = Df(60, 60, 0, ᐃΔ[830], 3);
        this.ᐃΔΔ[34].id = 34;
        this.ᐃΔΔ[37] = Df(60, 60, 0, ᐃΔ[291], 3);
        this.ᐃΔΔ[37].id = 37;
        this.ᐃΔΔ[4] = Df(60, 60, 0, ᐃΔ[314], 3);
        this.ᐃΔΔ[4].id = 4;
        this.ᐃΔΔ[49] = Df(60, 60, 0, ᐃΔ[325], 3);
        this.ᐃΔΔ[49].id = 49;
        this.ᐃΔΔ[1] = Df(60, 60, 0, ᐃΔ[327], 3);
        this.ᐃΔΔ[1].id = 1;
        this.ᐃΔΔ[54] = Df(60, 60, 0, ᐃΔ[304], 3);
        this.ᐃΔΔ[54].id = 54;
        this.ᐃΔΔ[56] = Df(60, 60, 0, ᐃΔ[263], 3);
        this.ᐃΔΔ[56].id = 56;
        this.ᐃΔΔ[57] = Df(60, 60, 0, ᐃΔ[265], 3);
        this.ᐃΔΔ[57].id = 57;
        this.ᐃΔΔ[58] = Df(60, 60, 0, ᐃΔ[332], 3);
        this.ᐃΔΔ[58].id = 58;
        this.ᐃΔΔ[61] = Df(60, 60, 0, ᐃΔ[268], 3);
        this.ᐃΔΔ[61].id = 61;
        this.ᐃΔΔ[79] = Df(60, 60, 0, ᐃΔ[338], 3);
        this.ᐃΔΔ[79].id = 79;
        this.ᐃΔΔ[68] = Df(60, 60, 0, ᐃΔ[360], 3);
        this.ᐃΔΔ[68].id = 68;
        this.ᐃΔΔ[69] = Df(60, 60, 0, ᐃΔ[363], 3);
        this.ᐃΔΔ[69].id = 69;
        this.ᐃΔΔ[70] = Df(60, 60, 0, ᐃΔ[365], 3);
        this.ᐃΔΔ[70].id = 70;
        this.ᐃΔΔ[100] = Df(60, 60, 0, ᐃΔ[367], 3);
        this.ᐃΔΔ[100].id = 100;
        this.ᐃΔΔ[83] = Df(60, 60, 0, ᐃΔ[370], 3);
        this.ᐃΔΔ[83].id = 83;
        this.ᐃΔΔ[62] = Df(60, 60, 0, ᐃΔ[371], 3);
        this.ᐃΔΔ[62].id = 62;
        this.ᐃΔΔ[63] = Df(60, 60, 0, ᐃΔ[374], 3);
        this.ᐃΔΔ[63].id = 63;
        this.ᐃΔΔ[64] = Df(60, 60, 0, ᐃΔ[377], 3);
        this.ᐃΔΔ[64].id = 64;
        this.ᐃΔΔ[83] = Df(60, 60, 0, ᐃΔ[370], 3);
        this.ᐃΔΔ[83].id = 83;
        this.ᐃΔΔ[84] = Df(60, 60, 0, ᐃΔ[380], 3);
        this.ᐃΔΔ[84].id = 84;
        this.ᐃΔΔ[25] = Df(60, 60, 0, ᐃΔ[402], 3);
        this.ᐃΔΔ[25].id = 25;
        this.ᐃΔΔ[26] = Df(60, 60, 0, ᐃΔ[396], 3);
        this.ᐃΔΔ[26].id = 26;
        this.ᐃΔΔ[27] = Df(60, 60, 0, ᐃΔ[399], 3);
        this.ᐃΔΔ[27].id = 27;
        this.ᐃΔΔ[28] = Df(60, 60, 0, ᐃΔ[405], 3);
        this.ᐃΔΔ[28].id = 28;
        this.ᐃΔΔ[31] = Df(60, 60, 0, ᐃΔ[876], 3);
        this.ᐃΔΔ[31].id = 31;
        this.ᐃΔΔ[2] = Df(60, 60, 0, ᐃΔ[409], 3);
        this.ᐃΔΔ[2].id = 2;
        this.ᐃΔΔ[80] = Df(60, 60, 0, ᐃΔ[421], 3);
        this.ᐃΔΔ[80].id = 80;
        this.ᐃΔΔ[81] = Df(60, 60, 0, ᐃΔ[424], 3);
        this.ᐃΔΔ[81].id = 81;
        this.ᐃΔΔ[Pr.ⲆΔⲆᐃᐃ] = Df(60, 60, 0, ᐃΔ[1228], 3);
        this.ᐃΔΔ[Pr.ⲆΔⲆᐃᐃ].id = Pr.ⲆΔⲆᐃᐃ;
        this.ᐃΔΔ[86] = Df(60, 60, 0, ᐃΔ[1231], 3);
        this.ᐃΔΔ[86].id = 86;
        this.ᐃΔΔ[98] = Df(60, 60, 0, ᐃΔ[1138], 3);
        this.ᐃΔΔ[98].id = 98;
        this.ᐃΔΔ[99] = Df(60, 60, 0, ᐃΔ[1141], 3);
        this.ᐃΔΔ[99].id = 99;
        this.ᐃΔΔ[131] = Df(60, 60, 0, ᐃΔ[570], 3);
        this.ᐃΔΔ[131].id = 131;
        this.ᐃΔΔ[132] = Df(60, 60, 0, ᐃΔ[1168], 3);
        this.ᐃΔΔ[132].id = 132;
        this.ᐃΔΔ[145] = Df(60, 60, 0, ᐃΔ[1238], 3);
        this.ᐃΔΔ[145].id = 145;
        this.ᐃΔΔ[133] = Df(60, 60, 0, ᐃΔ[573], 3);
        this.ᐃΔΔ[133].id = 133;
        this.ᐃΔΔ[134] = Df(60, 60, 0, ᐃΔ[1171], 3);
        this.ᐃΔΔ[134].id = 134;
        this.ᐃΔΔ[146] = Df(60, 60, 0, ᐃΔ[1241], 3);
        this.ᐃΔΔ[146].id = 146;
        this.ᐃΔΔ[135] = Df(60, 60, 0, ᐃΔ[576], 3);
        this.ᐃΔΔ[135].id = 135;
        this.ᐃΔΔ[136] = Df(60, 60, 0, ᐃΔ[1174], 3);
        this.ᐃΔΔ[136].id = 136;
        this.ᐃΔΔ[147] = Df(60, 60, 0, ᐃΔ[1244], 3);
        this.ᐃΔΔ[147].id = 147;
        this.ᐃΔΔ[137] = Df(60, 60, 0, ᐃΔ[579], 3);
        this.ᐃΔΔ[137].id = 137;
        this.ᐃΔΔ[138] = Df(60, 60, 0, ᐃΔ[1177], 3);
        this.ᐃΔΔ[138].id = 138;
        this.ᐃΔΔ[167] = Df(60, 60, 0, ᐃΔ[1256], 3);
        this.ᐃΔΔ[167].id = 167;
        this.ᐃΔΔ[168] = Df(60, 60, 0, ᐃΔ[1259], 3);
        this.ᐃΔΔ[168].id = 168;
        this.ᐃΔΔ[169] = Df(60, 60, 0, ᐃΔ[1262], 3);
        this.ᐃΔΔ[169].id = 169;
        this.ᐃΔΔ[170] = Df(60, 60, 0, ᐃΔ[1265], 3);
        this.ᐃΔΔ[170].id = 170;
        this.ᐃΔΔ[171] = Df(60, 60, 0, ᐃΔ[1268], 3);
        this.ᐃΔΔ[171].id = 171;
        this.ᐃΔΔ[172] = Df(60, 60, 0, ᐃΔ[1271], 3);
        this.ᐃΔΔ[172].id = 172;
        this.ᐃΔΔ[148] = Df(60, 60, 0, ᐃΔ[1247], 3);
        this.ᐃΔΔ[148].id = 148;
        this.ᐃΔΔ[139] = Df(60, 60, 0, ᐃΔ[582], 3);
        this.ᐃΔΔ[139].id = 139;
        this.ᐃΔΔ[140] = Df(60, 60, 0, ᐃΔ[1180], 3);
        this.ᐃΔΔ[140].id = 140;
        this.ᐃΔΔ[149] = Df(60, 60, 0, ᐃΔ[1250], 3);
        this.ᐃΔΔ[149].id = 149;
        this.ᐃΔΔ[141] = Df(60, 60, 0, ᐃΔ[585], 3);
        this.ᐃΔΔ[141].id = 141;
        this.ᐃΔΔ[142] = Df(60, 60, 0, ᐃΔ[1183], 3);
        this.ᐃΔΔ[142].id = 142;
        this.ᐃΔΔ[150] = Df(60, 60, 0, ᐃΔ[1253], 3);
        this.ᐃΔΔ[150].id = 150;
        this.ᐃΔΔ[143] = Df(60, 60, 0, ᐃΔ[588], 3);
        this.ᐃΔΔ[143].id = 143;
        this.ᐃΔΔ[144] = Df(60, 60, 0, ᐃΔ[1186], 3);
        this.ᐃΔΔ[144].id = 144;
        this.ᐃΔΔ[87] = Df(60, 60, 0, ᐃΔ[827], 3);
        this.ᐃΔΔ[87].id = 87;
        this.ᐃΔΔ[88] = Df(60, 60, 0, ᐃΔ[430], 3);
        this.ᐃΔΔ[88].id = 88;
        this.ᐃΔΔ[89] = Df(60, 60, 0, ᐃΔ[433], 3);
        this.ᐃΔΔ[89].id = 89;
        this.ᐃΔΔ[90] = Df(60, 60, 0, ᐃΔ[436], 3);
        this.ᐃΔΔ[90].id = 90;
        this.ᐃΔΔ[24] = Df(60, 60, 0, ᐃΔ[439], 3);
        this.ᐃΔΔ[24].id = 24;
        this.ᐃΔΔ[101] = Df(60, 60, 0, ᐃΔ[442], 3);
        this.ᐃΔΔ[101].id = 101;
        this.ᐃΔΔ[100] = Df(60, 60, 0, ᐃΔ[367], 3);
        this.ᐃΔΔ[100].id = 100;
        this.ᐃΔΔ[38] = Df(60, 60, 0, ᐃΔ[456], 3);
        this.ᐃΔΔ[38].id = 38;
        this.ᐃΔΔ[Pr.Δᐃⵠⵠⵠ] = Df(60, 60, 0, ᐃΔ[861], 3);
        this.ᐃΔΔ[Pr.Δᐃⵠⵠⵠ].id = Pr.Δᐃⵠⵠⵠ;
        this.ᐃΔΔ[8] = Df(60, 60, 0, ᐃΔ[460], 3);
        this.ᐃΔΔ[8].id = 8;
        this.ᐃΔΔ[9] = Df(60, 60, 0, ᐃΔ[1019], 3);
        this.ᐃΔΔ[9].id = 9;
        this.ᐃΔΔ[29] = Df(60, 60, 0, ᐃΔ[473], 3);
        this.ᐃΔΔ[29].id = 29;
        this.ᐃΔΔ[10] = Df(60, 60, 0, ᐃΔ[478], 3);
        this.ᐃΔΔ[10].id = 10;
        this.ᐃΔΔ[11] = Df(60, 60, 0, ᐃΔ[481], 3);
        this.ᐃΔΔ[11].id = 11;
        this.ᐃΔΔ[12] = Df(60, 60, 0, ᐃΔ[484], 3);
        this.ᐃΔΔ[12].id = 12;
        this.ᐃΔΔ[13] = Df(60, 60, 0, ᐃΔ[487], 3);
        this.ᐃΔΔ[13].id = 13;
        this.ᐃΔΔ[14] = Df(60, 60, 0, ᐃΔ[490], 3);
        this.ᐃΔΔ[14].id = 14;
        this.ᐃΔΔ[59] = Df(60, 60, 0, ᐃΔ[493], 3);
        this.ᐃΔΔ[59].id = 59;
        this.ᐃΔΔ[71] = Df(60, 60, 0, ᐃΔ[496], 3);
        this.ᐃΔΔ[71].id = 71;
        this.ᐃΔΔ[65] = Df(60, 60, 0, ᐃΔ[498], 3);
        this.ᐃΔΔ[65].id = 65;
        this.ᐃΔΔ[85] = Df(60, 60, 0, ᐃΔ[503], 3);
        this.ᐃΔΔ[85].id = 85;
        this.ᐃΔΔ[102] = Df(60, 60, 0, ᐃΔ[515], 3);
        this.ᐃΔΔ[102].id = 102;
        this.ᐃΔΔ[103] = Df(60, 60, 0, ᐃΔ[519], 3);
        this.ᐃΔΔ[103].id = 103;
        this.ᐃΔΔ[115] = Df(60, 60, 0, ᐃΔ[530], 3);
        this.ᐃΔΔ[115].id = 115;
        this.ᐃΔΔ[104] = Df(60, 60, 0, ᐃΔ[533], 3);
        this.ᐃΔΔ[104].id = 104;
        this.ᐃΔΔ[105] = Df(60, 60, 0, ᐃΔ[555], 3);
        this.ᐃΔΔ[105].id = 105;
        this.ᐃΔΔ[91] = Df(60, 60, 0, ᐃΔ[542], 3);
        this.ᐃΔΔ[91].id = 91;
        this.ᐃΔΔ[15] = Df(60, 60, 0, ᐃΔ[551], 3);
        this.ᐃΔΔ[15].id = 15;
        this.ᐃΔΔ[106] = Df(60, 60, 0, ᐃΔ[604], 3);
        this.ᐃΔΔ[106].id = 106;
        this.ᐃΔΔ[108] = Df(60, 60, 0, ᐃΔ[1235], 3);
        this.ᐃΔΔ[108].id = 108;
        this.ᐃΔΔ[163] = Df(60, 60, 0, ᐃΔ[1027], 3);
        this.ᐃΔΔ[163].id = 163;
        this.ᐃΔΔ[164] = Df(60, 60, 0, ᐃΔ[1030], 3);
        this.ᐃΔΔ[164].id = 164;
        this.ᐃΔΔ[166] = Df(60, 60, 0, ᐃΔ[1116], 3);
        this.ᐃΔΔ[166].id = 166;
        this.ᐃΔΔ[165] = Df(60, 60, 0, ᐃΔ[1048], 3);
        this.ᐃΔΔ[165].id = 165;
        this.ᐃΔΔ[Pr.ΔᐃΔᐃᐃ] = Df(60, 60, 0, ᐃΔ[1051], 3);
        this.ᐃΔΔ[Pr.ΔᐃΔᐃᐃ].id = Pr.ΔᐃΔᐃᐃ;
        this.ᐃΔΔ[Pr.ΔⲆᐃⵠⲆ] = Df(60, 60, 0, ᐃΔ[1082], 3);
        this.ᐃΔΔ[Pr.ΔⲆᐃⵠⲆ].id = Pr.ΔⲆᐃⵠⲆ;
        this.ᐃΔΔ[Pr.ΔΔⵠⲆⵠ] = Df(60, 60, 0, ᐃΔ[1226], 3);
        this.ᐃΔΔ[Pr.ΔΔⵠⲆⵠ].id = Pr.ΔΔⵠⲆⵠ;
        this.ᐃΔΔ[Pr.ᐃΔⲆΔᐃ] = Df(60, 60, 0, ᐃΔ[1191], 3);
        this.ᐃΔΔ[Pr.ᐃΔⲆΔᐃ].id = Pr.ᐃΔⲆΔᐃ;
        this.ᐃΔΔ[110] = Df(60, 60, 0, ᐃΔ[611], 3);
        this.ᐃΔΔ[110].id = 110;
        this.ᐃΔΔ[111] = Df(60, 60, 0, ᐃΔ[715], 3);
        this.ᐃΔΔ[111].id = 111;
        this.ᐃΔΔ[112] = Df(60, 60, 0, ᐃΔ[715], 3);
        this.ᐃΔΔ[112].id = 112;
        this.ᐃΔΔ[113] = Df(60, 60, 0, ᐃΔ[715], 3);
        this.ᐃΔΔ[113].id = 113;
        this.ᐃΔΔ[16] = Df(60, 60, 0, ᐃΔ[618], 3);
        this.ᐃΔΔ[16].id = 16;
        this.ᐃΔΔ[17] = Df(60, 60, 0, ᐃΔ[700], 3);
        this.ᐃΔΔ[17].id = 17;
        this.ᐃΔΔ[18] = Df(60, 60, 0, ᐃΔ[704], 3);
        this.ᐃΔΔ[18].id = 18;
        this.ᐃΔΔ[19] = Df(60, 60, 0, ᐃΔ[706], 3);
        this.ᐃΔΔ[19].id = 19;
        this.ᐃΔΔ[122] = Df(60, 60, 0, ᐃΔ[711], 3);
        this.ᐃΔΔ[122].id = 122;
        this.ᐃΔΔ[20] = Df(60, 60, 0, ᐃΔ[627], 3);
        this.ᐃΔΔ[20].id = 20;
        this.ᐃΔΔ[41] = Df(60, 60, 0, ᐃΔ[632], 3);
        this.ᐃΔΔ[41].id = 41;
        this.ᐃΔΔ[52] = Df(60, 60, 0, ᐃΔ[635], 3);
        this.ᐃΔΔ[52].id = 52;
        this.ᐃΔΔ[114] = Df(60, 60, 0, ᐃΔ[643], 3);
        this.ᐃΔΔ[114].id = 114;
        this.ᐃΔΔ[94] = Df(60, 60, 0, ᐃΔ[647], 3);
        this.ᐃΔΔ[94].id = 94;
        this.ᐃΔΔ[93] = Df(60, 60, 0, ᐃΔ[650], 3);
        this.ᐃΔΔ[93].id = 93;
        this.ᐃΔΔ[21] = Df(60, 60, 0, ᐃΔ[654], 3);
        this.ᐃΔΔ[21].id = 21;
        this.ᐃΔΔ[53] = Df(60, 60, 0, ᐃΔ[660], 3);
        this.ᐃΔΔ[53].id = 53;
        this.ᐃΔΔ[51] = Df(60, 60, 0, ᐃΔ[690], 3);
        this.ᐃΔΔ[51].id = 51;
        this.ᐃΔΔ[50] = Df(60, 60, 0, ᐃΔ[666], 3);
        this.ᐃΔΔ[50].id = 50;
        this.ᐃΔΔ[109] = Df(60, 60, 0, ᐃΔ[684], 3);
        this.ᐃΔΔ[109].id = 109;
        this.ᐃΔΔ[124] = Df(60, 60, 0, ᐃΔ[718], 3);
        this.ᐃΔΔ[124].id = 124;
        this.ᐃΔΔ[125] = Df(60, 60, 0, ᐃΔ[730], 3);
        this.ᐃΔΔ[125].id = 125;
        this.ᐃΔΔ[126] = Df(60, 60, 0, ᐃΔ[734], 3);
        this.ᐃΔΔ[126].id = 126;
        this.ᐃΔΔ[129] = Df(60, 60, 0, ᐃΔ[563], 3);
        this.ᐃΔΔ[129].id = 129;
        this.ᐃΔΔ[151] = Df(60, 60, 0, ᐃΔ[758], 3);
        this.ᐃΔΔ[151].id = 151;
        this.ᐃΔΔ[152] = Df(60, 60, 0, ᐃΔ[762], 3);
        this.ᐃΔΔ[152].id = 152;
        this.ᐃΔΔ[153] = Df(60, 60, 0, ᐃΔ[770], 3);
        this.ᐃΔΔ[153].id = 153;
        this.ᐃΔΔ[154] = Df(60, 60, 0, ᐃΔ[768], 3);
        this.ᐃΔΔ[154].id = 154;
        this.ᐃΔΔ[155] = Df(60, 60, 0, ᐃΔ[772], 3);
        this.ᐃΔΔ[155].id = 155;
        this.ᐃΔΔ[157] = Df(60, 60, 0, ᐃΔ[777], 3);
        this.ᐃΔΔ[157].id = 157;
        this.ᐃΔΔ[156] = Df(60, 60, 0, ᐃΔ[780], 3);
        this.ᐃΔΔ[156].id = 156;
        this.ᐃΔΔ[158] = Df(60, 60, 0, ᐃΔ[784], 3);
        this.ᐃΔΔ[158].id = 158;
        this.ᐃΔΔ[159] = Df(60, 60, 0, ᐃΔ[785], 3);
        this.ᐃΔΔ[159].id = 159;
        this.ᐃΔΔ[160] = Df(60, 60, 0, ᐃΔ[791], 3);
        this.ᐃΔΔ[160].id = 160;
        this.ᐃΔΔ[161] = Df(60, 60, 0, ᐃΔ[799], 3);
        this.ᐃΔΔ[161].id = 161;
        this.ᐃΔΔ[42] = Df(60, 60, 0, ᐃΔ[809], 3);
        this.ᐃΔΔ[42].id = 42;
        this.ᐃΔΔ[43] = Df(60, 60, 0, ᐃΔ[835], 3);
        this.ᐃΔΔ[43].id = 43;
        this.ᐃΔΔ[107] = Df(60, 60, 0, ᐃΔ[843], 3);
        this.ᐃΔΔ[107].id = 107;
        this.ᐃΔΔ[44] = Df(60, 60, 0, ᐃΔ[846], 3);
        this.ᐃΔΔ[44].id = 44;
        this.ᐃΔΔ[46] = Df(60, 60, 0, ᐃΔ[960], 3);
        this.ᐃΔΔ[46].id = 46;
        this.ᐃΔΔ[45] = Df(60, 60, 0, ᐃΔ[950], 3);
        this.ᐃΔΔ[45].id = 45;
        this.ᐃΔΔ[47] = Df(60, 60, 0, ᐃΔ[967], 3);
        this.ᐃΔΔ[47].id = 47;
        this.ᐃΔΔ[48] = Df(60, 60, 0, ᐃΔ[982], 3);
        this.ᐃΔΔ[48].id = 48;
        this.ᐃΔΔ[25] = Df(60, 60, 0, ᐃΔ[402], 3);
        this.ᐃΔΔ[25].id = 25;
        this.ᐃΔΔ[31] = Df(60, 60, 0, ᐃΔ[876], 3);
        this.ᐃΔΔ[31].id = 31;
        this.ᐃΔΔ[33] = Df(60, 60, 0, ᐃΔ[900], 3);
        this.ᐃΔΔ[33].id = 33;
        this.ᐃΔΔ[162] = Df(60, 60, 0, ᐃΔ[909], 3);
        this.ᐃΔΔ[162].id = 162;
        this.ᐃΔΔ[128] = Df(60, 60, 0, ᐃΔ[912], 3);
        this.ᐃΔΔ[128].id = 128;
        this.ⵠᐃⵠ[53] = Df(68, 68, 0, ᐃΔ[976], 3);
        this.ⵠᐃⵠ[53].id = 53;
        this.ΔⲆⵠ[53] = Df(60, 60, 0, ᐃΔ[975], 3);
        this.ΔⲆⵠ[53].id = 53;
        this.ᐃΔΔ[22] = Df(60, 60, 0, ᐃΔ[977], 3);
        this.ᐃΔΔ[22].id = 22;
        this.ⵠᐃⵠ[54] = Df(68, 68, 0, ᐃΔ[979], 3);
        this.ⵠᐃⵠ[54].id = 54;
        this.ΔⲆⵠ[54] = Df(60, 60, 0, ᐃΔ[978], 3);
        this.ΔⲆⵠ[54].id = 54;
        this.ᐃΔΔ[23] = Df(60, 60, 0, ᐃΔ[980], 3);
        this.ᐃΔΔ[23].id = 23;
        this.ⵠᐃⵠ[56] = Df(68, 68, 0, ᐃΔ[713], 3);
        this.ⵠᐃⵠ[56].id = 56;
        this.ΔⲆⵠ[56] = Df(60, 60, 0, ᐃΔ[712], 3);
        this.ΔⲆⵠ[56].id = 56;
        this.ᐃΔΔ[123] = Df(60, 60, 0, ᐃΔ[714], 3);
        this.ᐃΔΔ[123].id = 123;
        this.ⵠᐃⵠ[82] = Df(68, 68, 0, ᐃΔ[428], 3);
        this.ⵠᐃⵠ[82].id = 82;
        this.ΔⲆⵠ[82] = Df(60, 60, 0, ᐃΔ[426], 3);
        this.ΔⲆⵠ[82].id = 82;
        this.ᐃΔΔ[82] = Df(60, 60, 0, ᐃΔ[427], 3);
        this.ᐃΔΔ[82].id = 82;
        this.ⵠᐃⵠ[235] = Df(68, 68, 0, ᐃΔ[1159], 3);
        this.ⵠᐃⵠ[235].id = 235;
        this.ΔⲆⵠ[235] = Df(60, 60, 0, ᐃΔ[1158], 3);
        this.ΔⲆⵠ[235].id = 235;
        this.ⵠᐃⵠ[238] = Df(68, 68, 0, ᐃΔ[1188], 3);
        this.ⵠᐃⵠ[238].id = 238;
        this.ΔⲆⵠ[238] = Df(60, 60, 0, ᐃΔ[1187], 3);
        this.ΔⲆⵠ[238].id = 238;
        this.ⵠᐃⵠ[236] = Df(68, 68, 0, ᐃΔ[1161], 3);
        this.ⵠᐃⵠ[236].id = 236;
        this.ΔⲆⵠ[236] = Df(60, 60, 0, ᐃΔ[1160], 3);
        this.ΔⲆⵠ[236].id = 236;
        this.ⵠᐃⵠ[152] = Df(68, 68, 0, ᐃΔ[1197], 3);
        this.ⵠᐃⵠ[152].id = 152;
        this.ΔⲆⵠ[152] = Df(60, 60, 0, ᐃΔ[1195], 3);
        this.ΔⲆⵠ[152].id = 152;
        this.ᐃΔΔ[116] = Df(60, 60, 0, ᐃΔ[1196], 3);
        this.ᐃΔΔ[116].id = 116;
        this.ⵠᐃⵠ[212] = Df(68, 68, 0, ᐃΔ[992], 3);
        this.ⵠᐃⵠ[212].id = 212;
        this.ΔⲆⵠ[212] = Df(60, 60, 0, ᐃΔ[991], 3);
        this.ΔⲆⵠ[212].id = 212;
        this.ᐃΔΔ[73] = Df(60, 60, 0, ᐃΔ[990], 3);
        this.ᐃΔΔ[73].id = 73;
        this.ⵠᐃⵠ[213] = Df(68, 68, 0, ᐃΔ[995], 3);
        this.ⵠᐃⵠ[213].id = 213;
        this.ΔⲆⵠ[213] = Df(60, 60, 0, ᐃΔ[994], 3);
        this.ΔⲆⵠ[213].id = 213;
        this.ᐃΔΔ[74] = Df(60, 60, 0, ᐃΔ[993], 3);
        this.ᐃΔΔ[74].id = 74;
        this.ⵠᐃⵠ[214] = Df(68, 68, 0, ᐃΔ[998], 3);
        this.ⵠᐃⵠ[214].id = 214;
        this.ΔⲆⵠ[214] = Df(60, 60, 0, ᐃΔ[997], 3);
        this.ΔⲆⵠ[214].id = 214;
        this.ᐃΔΔ[75] = Df(60, 60, 0, ᐃΔ[996], 3);
        this.ᐃΔΔ[75].id = 75;
        this.ⵠᐃⵠ[215] = Df(68, 68, 0, ᐃΔ[1001], 3);
        this.ⵠᐃⵠ[215].id = 215;
        this.ΔⲆⵠ[215] = Df(60, 60, 0, ᐃΔ[1000], 3);
        this.ΔⲆⵠ[215].id = 215;
        this.ᐃΔΔ[76] = Df(60, 60, 0, ᐃΔ[999], 3);
        this.ᐃΔΔ[76].id = 76;
        this.ⵠᐃⵠ[216] = Df(68, 68, 0, ᐃΔ[1004], 3);
        this.ⵠᐃⵠ[216].id = 216;
        this.ΔⲆⵠ[216] = Df(60, 60, 0, ᐃΔ[1003], 3);
        this.ΔⲆⵠ[216].id = 216;
        this.ᐃΔΔ[77] = Df(60, 60, 0, ᐃΔ[1002], 3);
        this.ᐃΔΔ[77].id = 77;
        this.ⵠᐃⵠ[220] = Df(68, 68, 0, ᐃΔ[1007], 3);
        this.ⵠᐃⵠ[220].id = 220;
        this.ΔⲆⵠ[220] = Df(60, 60, 0, ᐃΔ[1006], 3);
        this.ΔⲆⵠ[220].id = 220;
        this.ᐃΔΔ[78] = Df(60, 60, 0, ᐃΔ[1005], 3);
        this.ᐃΔΔ[78].id = 78;
        this.ⵠᐃⵠ[217] = Df(68, 68, 0, ᐃΔ[1016], 3);
        this.ⵠᐃⵠ[217].id = 217;
        this.ΔⲆⵠ[217] = Df(60, 60, 0, ᐃΔ[1015], 3);
        this.ΔⲆⵠ[217].id = 217;
        this.ᐃΔΔ[60] = Df(60, 60, 0, ᐃΔ[1014], 3);
        this.ᐃΔΔ[60].id = 60;
        this.ⵠᐃⵠ[219] = Df(68, 68, 0, ᐃΔ[1013], 3);
        this.ⵠᐃⵠ[219].id = 219;
        this.ΔⲆⵠ[219] = Df(60, 60, 0, ᐃΔ[1012], 3);
        this.ΔⲆⵠ[219].id = 219;
        this.ᐃΔΔ[72] = Df(60, 60, 0, ᐃΔ[1011], 3);
        this.ᐃΔΔ[72].id = 72;
        this.ⵠᐃⵠ[218] = Df(68, 68, 0, ᐃΔ[1010], 3);
        this.ⵠᐃⵠ[218].id = 218;
        this.ΔⲆⵠ[218] = Df(60, 60, 0, ᐃΔ[1009], 3);
        this.ΔⲆⵠ[218].id = 218;
        this.ᐃΔΔ[66] = Df(60, 60, 0, ᐃΔ[1008], 3);
        this.ᐃΔΔ[66].id = 66;
        this.ⵠᐃⵠ[153] = Df(68, 68, 0, ᐃΔ[1201], 3);
        this.ⵠᐃⵠ[153].id = 153;
        this.ΔⲆⵠ[153] = Df(60, 60, 0, ᐃΔ[1199], 3);
        this.ΔⲆⵠ[153].id = 153;
        this.ᐃΔΔ[117] = Df(60, 60, 0, ᐃΔ[1200], 3);
        this.ᐃΔΔ[117].id = 117;
        this.ⵠᐃⵠ[154] = Df(68, 68, 0, ᐃΔ[1205], 3);
        this.ⵠᐃⵠ[154].id = 154;
        this.ΔⲆⵠ[154] = Df(60, 60, 0, ᐃΔ[1203], 3);
        this.ΔⲆⵠ[154].id = 154;
        this.ᐃΔΔ[118] = Df(60, 60, 0, ᐃΔ[1204], 3);
        this.ᐃΔΔ[118].id = 118;
        this.ⵠᐃⵠ[155] = Df(68, 68, 0, ᐃΔ[1209], 3);
        this.ⵠᐃⵠ[155].id = 155;
        this.ΔⲆⵠ[155] = Df(60, 60, 0, ᐃΔ[1207], 3);
        this.ΔⲆⵠ[155].id = 155;
        this.ᐃΔΔ[119] = Df(60, 60, 0, ᐃΔ[1208], 3);
        this.ᐃΔΔ[119].id = 119;
        this.ⵠᐃⵠ[156] = Df(68, 68, 0, ᐃΔ[1213], 3);
        this.ⵠᐃⵠ[156].id = 156;
        this.ΔⲆⵠ[156] = Df(60, 60, 0, ᐃΔ[1211], 3);
        this.ΔⲆⵠ[156].id = 156;
        this.ᐃΔΔ[120] = Df(60, 60, 0, ᐃΔ[1212], 3);
        this.ᐃΔΔ[120].id = 120;
        this.ⵠᐃⵠ[157] = Df(68, 68, 0, ᐃΔ[1217], 3);
        this.ⵠᐃⵠ[157].id = 157;
        this.ΔⲆⵠ[157] = Df(60, 60, 0, ᐃΔ[1215], 3);
        this.ΔⲆⵠ[157].id = 157;
        this.ᐃΔΔ[121] = Df(60, 60, 0, ᐃΔ[1216], 3);
        this.ᐃΔΔ[121].id = 121;
        this.ⵠᐃⵠ[203] = Df(68, 68, 0, ᐃΔ[937], 3);
        this.ⵠᐃⵠ[203].id = 203;
        this.ΔⲆⵠ[203] = Df(60, 60, 0, ᐃΔ[936], 3);
        this.ΔⲆⵠ[203].id = 203;
        this.ΔⲆⵠ[203].info.Ⲇᐃ[2] = this.ΔⲆⵠ[203].info.Ⲇᐃ[0];
        this.ⵠᐃⵠ[150] = Df(68, 68, 0, ᐃΔ[524], 3);
        this.ⵠᐃⵠ[150].id = 150;
        this.ΔⲆⵠ[150] = Df(60, 60, 0, ᐃΔ[523], 3);
        this.ΔⲆⵠ[150].id = 150;
        this.ΔⲆⵠ[150].info.Ⲇᐃ[2] = this.ΔⲆⵠ[150].info.Ⲇᐃ[0];
        this.ⵠᐃⵠ[202] = Df(68, 68, 0, ᐃΔ[939], 3);
        this.ⵠᐃⵠ[202].id = 202;
        this.ΔⲆⵠ[202] = Df(60, 60, 0, ᐃΔ[938], 3);
        this.ΔⲆⵠ[202].id = 202;
        this.ΔⲆⵠ[202].info.Ⲇᐃ[2] = this.ΔⲆⵠ[202].info.Ⲇᐃ[0];
        this.ⵠᐃⵠ[19] = Df(68, 68, 0, ᐃΔ[934], 3);
        this.ⵠᐃⵠ[19].id = 19;
        this.ΔⲆⵠ[19] = Df(60, 60, 0, ᐃΔ[932], 3);
        this.ΔⲆⵠ[19].id = 19;
        this.ᐃΔΔ[39] = Df(60, 60, 0, ᐃΔ[933], 3);
        this.ᐃΔΔ[39].id = 39;
        this.ⵠᐃⵠ[20] = Df(68, 68, 0, ᐃΔ[923], 3);
        this.ⵠᐃⵠ[20].id = 20;
        this.ΔⲆⵠ[20] = Df(60, 60, 0, ᐃΔ[921], 3);
        this.ΔⲆⵠ[20].id = 20;
        this.ᐃΔΔ[95] = Df(60, 60, 0, ᐃΔ[922], 3);
        this.ᐃΔΔ[95].id = 95;
        this.ⵠᐃⵠ[21] = Df(68, 68, 0, ᐃΔ[927], 3);
        this.ⵠᐃⵠ[21].id = 21;
        this.ΔⲆⵠ[21] = Df(60, 60, 0, ᐃΔ[925], 3);
        this.ΔⲆⵠ[21].id = 21;
        this.ᐃΔΔ[96] = Df(60, 60, 0, ᐃΔ[926], 3);
        this.ᐃΔΔ[96].id = 96;
        this.ⵠᐃⵠ[22] = Df(68, 68, 0, ᐃΔ[931], 3);
        this.ⵠᐃⵠ[22].id = 22;
        this.ΔⲆⵠ[22] = Df(60, 60, 0, ᐃΔ[929], 3);
        this.ΔⲆⵠ[22].id = 22;
        this.ᐃΔΔ[97] = Df(60, 60, 0, ᐃΔ[930], 3);
        this.ᐃΔΔ[97].id = 97;
        this.ⵠᐃⵠ[60] = Df(68, 68, 0, ᐃΔ[736], 3);
        this.ⵠᐃⵠ[60].id = 60;
        this.ΔⲆⵠ[60] = Df(60, 60, 0, ᐃΔ[735], 3);
        this.ΔⲆⵠ[60].id = 60;
        this.ᐃΔΔ[127] = Df(60, 60, 0, ᐃΔ[737], 3);
        this.ᐃΔΔ[127].id = 127;
        this.ⵠᐃⵠ[90] = Df(68, 68, 0, ᐃΔ[739], 3);
        this.ⵠᐃⵠ[90].id = 90;
        this.ΔⲆⵠ[90] = Df(60, 60, 0, ᐃΔ[738], 3);
        this.ΔⲆⵠ[90].id = 90;
        this.ᐃΔΔ[173] = Df(60, 60, 0, ᐃΔ[740], 3);
        this.ᐃΔΔ[173].id = 173;
        this.ⵠᐃⵠ[92] = Df(68, 68, 0, ᐃΔ[745], 3);
        this.ⵠᐃⵠ[92].id = 92;
        this.ΔⲆⵠ[92] = Df(60, 60, 0, ᐃΔ[744], 3);
        this.ΔⲆⵠ[92].id = 92;
        this.ᐃΔΔ[174] = Df(60, 60, 0, ᐃΔ[746], 3);
        this.ᐃΔΔ[174].id = 174;
        this.ⵠᐃⵠ[93] = Df(68, 68, 0, ᐃΔ[748], 3);
        this.ⵠᐃⵠ[93].id = 93;
        this.ΔⲆⵠ[93] = Df(60, 60, 0, ᐃΔ[747], 3);
        this.ΔⲆⵠ[93].id = 93;
        this.ᐃΔΔ[175] = Df(60, 60, 0, ᐃΔ[749], 3);
        this.ᐃΔΔ[175].id = 175;
        this.ⵠᐃⵠ[91] = Df(68, 68, 0, ᐃΔ[742], 3);
        this.ⵠᐃⵠ[91].id = 91;
        this.ΔⲆⵠ[91] = Df(60, 60, 0, ᐃΔ[741], 3);
        this.ΔⲆⵠ[91].id = 91;
        this.ᐃΔΔ[176] = Df(60, 60, 0, ᐃΔ[743], 3);
        this.ᐃΔΔ[176].id = 176;
        this.ⵠᐃⵠ[100] = Df(68, 68, 0, ᐃΔ[1165], 3);
        this.ⵠᐃⵠ[100].id = 100;
        this.ΔⲆⵠ[100] = Df(60, 60, 0, ᐃΔ[1164], 3);
        this.ΔⲆⵠ[100].id = 100;
        this.ᐃΔΔ[Pr.ᐃⲆΔΔΔ] = Df(60, 60, 0, ᐃΔ[Hr.ⵠᐃⵠⲆⲆΔⵠᐃⵠ], 3);
        this.ᐃΔΔ[Pr.ᐃⲆΔΔΔ].id = Pr.ᐃⲆΔΔΔ;
        this.ⵠᐃⵠ[34] = Df(68, 68, 0, ᐃΔ[945], 3);
        this.ⵠᐃⵠ[34].id = 34;
        this.ΔⲆⵠ[34] = Df(60, 60, 0, ᐃΔ[943], 3);
        this.ΔⲆⵠ[34].id = 34;
        this.ᐃΔΔ[30] = Df(60, 60, 0, ᐃΔ[944], 3);
        this.ᐃΔΔ[30].id = 30;
        this.ⵠᐃⵠ[44] = Df(68, 68, 0, ᐃΔ[948], 3);
        this.ⵠᐃⵠ[44].id = 44;
        this.ΔⲆⵠ[44] = Df(60, 60, 0, ᐃΔ[946], 3);
        this.ΔⲆⵠ[44].id = 44;
        this.ᐃΔΔ[92] = Df(60, 60, 0, ᐃΔ[947], 3);
        this.ᐃΔΔ[92].id = 92;
        this.ⵠᐃⵠ[17] = Df(68, 68, 0, ᐃΔ[878], 3);
        this.ⵠᐃⵠ[17].id = 17;
        this.ΔⲆⵠ[17] = Df(60, 60, 0, ᐃΔ[877], 3);
        this.ΔⲆⵠ[17].id = 17;
        this.ᐃΔΔ[32] = Df(60, 60, 0, ᐃΔ[879], 3);
        this.ᐃΔΔ[32].id = 32;
        this.ⵠᐃⵠ[63] = Df(68, 68, 0, ᐃΔ[568], 3);
        this.ⵠᐃⵠ[63].id = 63;
        this.ΔⲆⵠ[63] = Df(60, 60, 0, ᐃΔ[566], 3);
        this.ΔⲆⵠ[63].id = 63;
        this.ᐃΔΔ[130] = Df(60, 60, 0, ᐃΔ[567], 3);
        this.ᐃΔΔ[130].id = 130;
        this.ⵠᐃⵠ[187] = Df(68, 68, 0, ᐃΔ[591], 3);
        this.ⵠᐃⵠ[187].id = 187;
        this.ΔⲆⵠ[187] = Df(60, 60, 0, ᐃΔ[253], 3);
        this.ΔⲆⵠ[187].id = 187;
        this.ⵠᐃⵠ[Xr.ⲆΔⵠⵠᐃⲆΔ] = Df(68, 68, 0, ᐃΔ[Hr.ⵠⲆⲆⲆᐃΔΔⵠΔ], 3);
        this.ⵠᐃⵠ[Xr.ⲆΔⵠⵠᐃⲆΔ].id = Xr.ⲆΔⵠⵠᐃⲆΔ;
        this.ΔⲆⵠ[Xr.ⲆΔⵠⵠᐃⲆΔ] = Df(60, 60, 0, ᐃΔ[Hr.ⵠⲆΔΔᐃᐃⵠⵠᐃ], 3);
        this.ΔⲆⵠ[Xr.ⲆΔⵠⵠᐃⲆΔ].id = Xr.ⲆΔⵠⵠᐃⲆΔ;
        this.ⵠᐃⵠ[Xr.ⵠᐃᐃΔᐃⵠⲆ] = Df(68, 68, 0, ᐃΔ[Hr.ᐃᐃⲆᐃⵠⲆⵠΔⵠ], 3);
        this.ⵠᐃⵠ[Xr.ⵠᐃᐃΔᐃⵠⲆ].id = Xr.ⵠᐃᐃΔᐃⵠⲆ;
        this.ΔⲆⵠ[Xr.ⵠᐃᐃΔᐃⵠⲆ] = Df(60, 60, 0, ᐃΔ[Hr.ⵠⵠᐃᐃᐃⲆᐃΔⲆ], 3);
        this.ΔⲆⵠ[Xr.ⵠᐃᐃΔᐃⵠⲆ].id = Xr.ⵠᐃᐃΔᐃⵠⲆ;
        this.ⵠᐃⵠ[Xr.ᐃⵠⵠᐃⵠⵠΔ] = Df(68, 68, 0, ᐃΔ[Hr.ⲆⲆⵠⵠΔⲆⲆⵠᐃ], 3);
        this.ⵠᐃⵠ[Xr.ᐃⵠⵠᐃⵠⵠΔ].id = Xr.ᐃⵠⵠᐃⵠⵠΔ;
        this.ΔⲆⵠ[Xr.ᐃⵠⵠᐃⵠⵠΔ] = Df(60, 60, 0, ᐃΔ[Hr.ⵠΔⵠΔΔⵠΔΔΔ], 3);
        this.ΔⲆⵠ[Xr.ᐃⵠⵠᐃⵠⵠΔ].id = Xr.ᐃⵠⵠᐃⵠⵠΔ;
        this.ⵠᐃⵠ[Xr.ⵠⲆⵠᐃⵠᐃⲆ] = Df(68, 68, 0, ᐃΔ[Hr.ΔⲆΔᐃⲆⵠⲆᐃⲆ], 3);
        this.ⵠᐃⵠ[Xr.ⵠⲆⵠᐃⵠᐃⲆ].id = Xr.ⵠⲆⵠᐃⵠᐃⲆ;
        this.ΔⲆⵠ[Xr.ⵠⲆⵠᐃⵠᐃⲆ] = Df(60, 60, 0, ᐃΔ[Hr.ⵠᐃⵠᐃⵠⵠⲆⵠΔ], 3);
        this.ΔⲆⵠ[Xr.ⵠⲆⵠᐃⵠᐃⲆ].id = Xr.ⵠⲆⵠᐃⵠᐃⲆ;
        this.ⵠᐃⵠ[Xr.ΔΔΔΔⲆᐃΔ] = Df(68, 68, 0, ᐃΔ[Hr.ⲆⵠⲆⵠⲆΔⲆⵠⵠ], 3);
        this.ⵠᐃⵠ[Xr.ΔΔΔΔⲆᐃΔ].id = Xr.ΔΔΔΔⲆᐃΔ;
        this.ΔⲆⵠ[Xr.ΔΔΔΔⲆᐃΔ] = Df(60, 60, 0, ᐃΔ[Hr.ΔⵠⲆⵠᐃΔⵠᐃⲆ], 3);
        this.ΔⲆⵠ[Xr.ΔΔΔΔⲆᐃΔ].id = Xr.ΔΔΔΔⲆᐃΔ;
        this.ⲆⲆᐃⵠᐃⵠⵠ = function () {
            for (var a = Ex.ᐃΔⵠΔ.ⲆⲆⵠⵠᐃ, b = 10, c = 10, d = 0; d < a.length; d++) {
                if (d > 0 && !(d % 4)) {
                    b += a[0].info.width + 10;
                    c = 10;
                }
                a[d].info.translate.x = b;
                a[d].info.translate.y = c;
                c += 10 + a[d].info.height;
            }
        };
        this.ΔⲆⵠⲆⲆⲆΔ = function () {
            var a = Math.floor(Math.floor((3 + Ex.ᐃΔⵠΔ.ⲆⲆⵠⵠᐃ.length) / 4) * (10 + this.ⵠᐃⵠ[0].info.Ⲇᐃ[0].width) + 35);
            for (var b = 0; b < this.ⵠᐃⵠ.length; b++) {
                if (this.ⵠᐃⵠ[b]) {
                    this.ⵠᐃⵠ[b].info.translate.x = a;
                    this.ⵠᐃⵠ[b].info.translate.y = 22;
                }
            }
            this.ⵠⵠⲆᐃΔΔΔ.info.translate.x = a + 17;
            this.ⵠⵠⲆᐃΔΔΔ.info.translate.y = 22 + ᐃΔ[339].height;
            this.ᐃⵠⵠΔΔᐃⲆ.info.translate.x = a + 17;
            this.ᐃⵠⵠΔΔᐃⲆ.info.translate.y = 30;
            this.ΔⲆⵠΔᐃⲆΔ.info.translate.x = a + 17;
            this.ΔⲆⵠΔᐃⲆΔ.info.translate.y = 22 + ᐃΔ[339].height;
        };
        this.ⵠΔⵠⲆΔΔᐃⲆΔ = function () {
            var a = Math.floor((io - ᐃΔ[556][0].width) / 2);
            for (var b = 0; b < this.ⵠⵠⵠⲆⵠ.length; b++) {
                this.ⵠⵠⵠⲆⵠ[b].button.info.translate.x = a;
                this.ⵠⵠⵠⲆⵠ[b].button.info.translate.y = -13;
            }
        };
        this.ⵠΔᐃⵠⲆⲆⲆ = function () {
            var a = 12 + Math.floor((10 + this.ΔⵠⲆⲆⵠᐃⵠ.info.Ⲇᐃ[0].width) * Math.floor((3 + Ex.ᐃΔⵠΔ.ⲆⲆⵠⵠᐃ.length) / 4) + 35);
            this.ΔⵠⲆⲆⵠᐃⵠ.info.translate.x = a;
            this.ΔⵠⲆⲆⵠᐃⵠ.info.translate.y = 33;
            this.ᐃⲆᐃⲆⲆⲆᐃ.info.translate.x = this.ΔⵠⲆⲆⵠᐃⵠ.info.translate.x;
            this.ᐃⲆᐃⲆⲆⲆᐃ.info.translate.y = 137;
            this.ⵠⲆᐃΔⲆⲆᐃ.info.translate.x = this.ΔⵠⲆⲆⵠᐃⵠ.info.translate.x;
            this.ⵠⲆᐃΔⲆⲆᐃ.info.translate.y = 240;
        };
        this.ΔᐃⵠⲆΔⵠᐃ = function () {
            var a = 12 + Math.floor(Math.floor((3 + Ex.ᐃΔⵠΔ.ⲆⲆⵠⵠᐃ.length) / 4) * (10 + this.ⵠⵠΔᐃᐃⲆⲆ.info.Ⲇᐃ[0].width) + 35);
            this.ⵠⵠΔᐃᐃⲆⲆ.info.translate.x = a;
            this.ⵠⵠΔᐃᐃⲆⲆ.info.translate.y = 36;
            a += 83;
            this.ⵠⲆⵠᐃᐃⲆΔ.info.translate.x = a;
            this.ⵠⲆⵠᐃᐃⲆΔ.info.translate.y = 36;
            this.ⵠⵠⵠⲆΔⲆᐃ.info.translate.x = a;
            this.ⵠⵠⵠⲆΔⲆᐃ.info.translate.y = 36;
            this.ⲆⵠΔⵠΔΔⲆ.info.translate.x = a;
            this.ⲆⵠΔⵠΔΔⲆ.info.translate.y = 36;
            this.ⵠⲆⵠⵠⲆΔⵠ.info.translate.x = a;
            this.ⵠⲆⵠⵠⲆΔⵠ.info.translate.y = 36;
            this.ᐃⲆⵠⲆᐃⵠΔ.info.translate.x = a;
            this.ᐃⲆⵠⲆᐃⵠΔ.info.translate.y = 36;
        };
        this.ᐃⵠΔᐃᐃⵠⲆ = function () {
            var a = 12 + Math.floor(Math.floor((3 + Ex.ᐃΔⵠΔ.ⲆⲆⵠⵠᐃ.length) / 4) * (10 + this.ⵠⵠⲆΔΔⲆᐃ.info.Ⲇᐃ[0].width) + 35);
            this.ⵠⵠⲆΔΔⲆᐃ.info.translate.x = a;
            this.ⵠⵠⲆΔΔⲆᐃ.info.translate.y = 36;
            a += 83;
            this.ΔᐃΔⵠⵠΔⵠ.info.translate.x = a;
            this.ΔᐃΔⵠⵠΔⵠ.info.translate.y = 36;
        };
        this.ⲆⲆⵠᐃⵠᐃΔ = function () {
            var a = Math.floor(Math.floor((3 + Ex.ᐃΔⵠΔ.ⲆⲆⵠⵠᐃ.length) / 4) * (10 + this.ΔⵠⵠᐃᐃⵠⲆ.info.Ⲇᐃ[0].width) + 35);
            this.ΔⵠⵠᐃᐃⵠⲆ.info.translate.x = a;
            this.ΔⵠⵠᐃᐃⵠⲆ.info.translate.y = 22;
        };
        this.ΔⲆⵠⵠⲆᐃΔ = function () {
            var a = Ex.ⲆᐃΔⲆ.ⲆᐃⲆⵠΔ;
            if (a.length > 0) {
                var b = Math.floor((io - Ex.ⲆᐃΔⲆ.max * (a[0].info.width + 5)) / 2);
            }
            for (var c = 0; a.length > c; c++) {
                a[c].info.translate.x = b + (a[c].info.width + 5) * c;
                a[c].info.translate.y = no - a[c].info.width - 10;
                this.ᐃⲆⵠΔΔ[a[c].id].info.translate.x = a[c].info.translate.x + 13;
                this.ᐃⲆⵠΔΔ[a[c].id].info.translate.y = a[c].info.translate.y - this.ᐃⲆⵠΔΔ[a[c].id].info.Ⲇᐃ[0].height - 6;
            }
        };
        var m;
        var n = 0;
        function p() {
            f.ⲆΔᐃ();
            if (++n == 30) {
                f.ⵠⲆⵠⲆⲆⲆⲆ();
                f.ⲆΔᐃ();
                return;
            }
            Hf.setTimeout(p, 33);
        }
        this.ⲆⲆⵠᐃᐃ = function (a) {
            if (Ex.ⲆⵠᐃⲆΔ.open) {
                Ex.ⲆⵠᐃⲆΔ.ⲆⲆⵠᐃᐃ();
            }
            if (Ex.ᐃⵠⲆⲆΔ.open) {
                Ex.ᐃⵠⲆⲆΔ.ⲆⲆⵠᐃᐃ();
            }
            document.getElementById("team_box").style.display = "none";
            f.ᐃⵠᐃΔⵠ.style.display = "none";
            f.ᐃⵠᐃΔⵠ.open = Ag;
            f.sign.style.display = "none";
            f.sign.open = false;
            document.getElementById("shop_starterkit").style.display = "none";
            document.getElementById("home_craft").style.display = "none";
            document.getElementById("recipe_craft").style.display = "none";
            f.ΔΔΔΔ.open = false;
            document.getElementById("option_in_game").style.display = "none";
            f.options.open = false;
            document.getElementById("sure_delete").style.display = "none";
            f.ⵠⵠⵠᐃ.open = eo;
            document.getElementById("cancel_sure_delete").style.display = "none";
            f.Ⲇᐃᐃⵠᐃ.open = Bq;
            document.getElementById("chronoquest").style.display = "none";
            f.ᐃⲆⲆΔ.open = w;
            m = a;
            f.ᐃᐃᐃⲆⵠⵠᐃ();
            f.ΔΔ.style.cursor = f.ⲆᐃⲆᐃᐃΔⵠ;
            Hx.ⲆⲆⵠᐃᐃ();
            q = -1;
            t();
            Ox();
        };
        var q = -1;
        function t() {
            f.ⲆΔᐃ();
            if (++q == 30) {
                f.stop();
                m();
                return;
            }
            Hf.setTimeout(t, 33);
        }
        this.ΔΔΔᐃⵠ = false;
        this.stop = function () {
            this.ΔΔΔᐃⵠ = false;
        };
        this.ᐃΔᐃⲆΔ = function () {
            Δⵠⵠⵠ.ⲆᐃᐃᐃΔᐃⵠᐃⲆ();
            f.ΔΔΔᐃⵠ = true;
            q = -1;
            n = 0;
            p();
        };
        this.ⲆΔᐃ = function () {
            this.ΔⲆΔⲆΔ.translate.x = io - this.ΔⲆΔⲆΔ.Ⲇᐃ.width - 10;
            this.ΔⲆΔⲆΔ.translate.y = 5;
            Dx.ⲆⲆⵠΔⵠ.translate.x = this.ΔⲆΔⲆΔ.translate.x - ᐃΔ[725][0].width - 85;
            Dx.ⲆⲆⵠΔⵠ.translate.y = 10;
            this.ΔΔΔΔ.button.info.translate.x = this.ΔⲆΔⲆΔ.translate.x - ᐃΔ[708][0].width - 10;
            this.ΔΔΔΔ.button.info.translate.y = 10;
            this.ᐃⲆⲆΔ.button.info.translate.x = this.ΔⲆΔⲆΔ.translate.x - ᐃΔ[755][0].width - 20;
            this.ᐃⲆⲆΔ.button.info.translate.y = this.ΔΔΔΔ.button.info.translate.y + ᐃΔ[708][0].height + 5;
            this.options.button.info.translate.x = this.ΔⲆΔⲆΔ.translate.x - ᐃΔ[727][0].width - 20;
            this.options.button.info.translate.y = this.ᐃⲆⲆΔ.button.info.translate.y + ᐃΔ[727][0].height + 18;
            this.ΔΔⲆΔ.ⵠⵠⵠⵠⵠⵠᐃ.info.translate.x = this.ΔⲆΔⲆΔ.translate.x - ᐃΔ[727][0].width - 20;
            this.ΔΔⲆΔ.ⵠⵠⵠⵠⵠⵠᐃ.info.translate.y = this.options.button.info.translate.y + ᐃΔ[783][0].height;
            this.ΔΔⲆΔ.ⲆⲆⵠⵠΔΔΔ.info.translate.x = this.ΔⲆΔⲆΔ.translate.x - ᐃΔ[727][0].width - 20;
            this.ΔΔⲆΔ.ⲆⲆⵠⵠΔΔΔ.info.translate.y = this.options.button.info.translate.y + ᐃΔ[783][0].height;
            this.ᐃⵠᐃΔⵠ.button.info.translate.x = this.ΔⲆΔⲆΔ.translate.x - ᐃΔ[795][0].width - 20;
            this.ᐃⵠᐃΔⵠ.button.info.translate.y = this.ΔΔⲆΔ.ⵠⵠⵠⵠⵠⵠᐃ.info.translate.y + ᐃΔ[795][0].height;
            Ex.ⵠⵠⲆΔⲆ.translate.x = this.ΔⲆΔⲆΔ.translate.x - 63 - 85;
            Ex.ⵠⵠⲆΔⲆ.translate.y = 100;
            Ex.ⲆⲆⵠⲆᐃ.translate.x = this.ΔⲆΔⲆΔ.translate.x - ᐃΔ[517].width - 85;
            Ex.ⲆⲆⵠⲆᐃ.translate.y = Ex.ⵠⵠⲆΔⲆ.translate.y + 10 + ᐃΔ[546].height;
            this.ⲆᐃΔΔᐃ.translate.y = no - 3 - 193;
            this.ⲆᐃΔΔᐃ.translate.x = io - 3 - 193;
            this.ΔᐃⵠⲆ.translate.x = 5;
            this.ΔᐃⵠⲆ.translate.y = no - this.ΔᐃⵠⲆ.Ⲇᐃ.height - 5;
            this.ⲆⲆΔᐃⲆ.button.info.translate.x = oo - 45.5;
            this.ⲆⲆΔᐃⲆ.button.info.translate.y = 50;
            this.ⲆⲆᐃⵠᐃⵠⵠ();
            this.ΔⲆⵠⵠⲆᐃΔ();
            this.ΔⲆⵠⲆⲆⲆΔ();
            this.ⲆⲆⵠᐃⵠᐃΔ();
            this.ᐃⵠΔᐃᐃⵠⲆ();
            this.ΔᐃⵠⲆΔⵠᐃ();
            this.ⵠΔᐃⵠⲆⲆⲆ();
            this.ⵠΔⵠⲆΔΔᐃⲆΔ();
            this.sign.ΔᐃΔᐃᐃΔᐃ();
            Np();
            Ex.ⲆⵠᐃⲆΔ.ⲆΔᐃ();
            Ex.ᐃⵠⲆⲆΔ.ⲆΔᐃ();
            this.ΔⵠⵠΔⵠⵠᐃᐃⲆ.ⲆΔᐃ();
            this.ΔΔΔΔ.ΔⵠⵠⲆᐃⵠᐃ.ⲆΔᐃ();
            this.ΔΔΔΔ.list.ⲆΔᐃ();
            this.ⵠⵠⵠᐃ.ⲆΔᐃ();
            this.Ⲇᐃᐃⵠᐃ.ⲆΔᐃ();
            this.ᐃⲆⲆΔ.ⲆΔᐃ();
            this.ⲆⲆΔᐃⲆ.ⲆΔᐃ();
            this.options.ⲆΔᐃ();
            this.ᐃⵠᐃΔⵠ.ⲆΔᐃ();
            this.sign.ⲆΔᐃ();
            var a = 0;
            if (n != 30) {
                a = 1500 / (n + 1) - 50;
            }
            if (q != -1) {
                a = -(1500 / (30 - q + 1) - 48);
            }
            this.ⲆⲆΔᐃⲆ.button.info.translate.y -= a > 0 ? a : -a;
            this.ΔⲆΔⲆΔ.translate.y -= a > 0 ? a : -a;
            Ex.ⵠⵠⲆΔⲆ.translate.y -= a > 0 ? a : -a;
            Ex.ⲆⲆⵠⲆᐃ.translate.y -= a > 0 ? a : -a;
            this.ΔΔΔΔ.button.info.translate.y -= a > 0 ? a : -a;
            this.ᐃⲆⲆΔ.button.info.translate.y -= a > 0 ? a : -a;
            this.options.button.info.translate.y -= a > 0 ? a : -a;
            this.ᐃⵠᐃΔⵠ.button.info.translate.y -= a > 0 ? a : -a;
            this.ΔΔⲆΔ.ⵠⵠⵠⵠⵠⵠᐃ.info.translate.y -= a > 0 ? a : -a;
            this.ΔΔⲆΔ.ⲆⲆⵠⵠΔΔΔ.info.translate.y -= a > 0 ? a : -a;
            Dx.ⲆⲆⵠΔⵠ.translate.y -= a > 0 ? a : -a;
            this.ΔᐃⵠⲆ.translate.y -= a < 0 ? a : -a;
            this.ⲆᐃΔΔᐃ.translate.y -= a < 0 ? a : -a;
        };
        this.ⵠᐃᐃⵠⵠⵠⲆᐃⵠ = function () {
            if (!Ex.ᐃΔΔⲆⵠ.enabled && !!this.ⲆⵠΔΔᐃᐃᐃ && !Ex.ᐃΔΔⲆᐃ) {
                _u();
            }
            Ou();
            (function () {
                var a = Dx.ⵠᐃΔ[0];
                if (Dx.mode === 0 || Dx.mode === 7 || Dx.mode === 2 || Dx.mode === 4 || Dx.mode === 5 || Dx.mode === 6 || Dx.mode === 3) {
                    for (var b = 0; b < a.length; b++) {
                        a[b].ΔᐃᐃᐃᐃⲆᐃ();
                    }
                } else if (Dx.mode === 1) {
                    for (b = 0; a.length > b; b++) {
                        if (Ex.ΔⵠⵠᐃⲆΔΔ || Ex.ⲆⲆⵠⲆᐃ.enabled || a[b].ΔⵠΔⲆ.ⲆⲆⲆⲆΔ !== "spectator") {
                            a[b].ΔᐃᐃᐃᐃⲆᐃ();
                        }
                    }
                }
            })();
            if (this.ⲆⵠΔΔᐃᐃᐃ) {
                Xp();
                if (this.ᐃΔⵠΔΔΔᐃ === 1) {
                    this.ΔΔΔΔ.button.ⵠⲆⲆⵠ(c);
                }
                if (Dx.mode !== 2 && Dx.mode !== 4 && Dx.mode !== 5 && this.ⲆΔᐃⵠⲆΔΔ === 1) {
                    this.ᐃⲆⲆΔ.button.ⵠⲆⲆⵠ(c);
                }
                this.options.button.ⵠⲆⲆⵠ(c);
                if (this.ΔΔᐃΔⵠⲆΔ === 1) {
                    this.ᐃⵠᐃΔⵠ.button.ⵠⲆⲆⵠ(c);
                }
                if (Hx.ᐃΔᐃⲆΔ) {
                    this.ΔΔⲆΔ.ⵠⵠⵠⵠⵠⵠᐃ.ⵠⲆⲆⵠ(c);
                } else {
                    this.ΔΔⲆΔ.ⲆⲆⵠⵠΔΔΔ.ⵠⲆⲆⵠ(c);
                }
                Pu();
                Eu();
                this.ΔᐃⵠⲆ.ⵠⲆⲆⵠ();
                Iu();
                Hu();
                Tu();
                Ru();
                Gu();
                $p();
                Zp();
                (function () {
                    if (!Ex.ⵠⲆⲆᐃ.open && !Ex.ⲆⲆᐃⲆΔ.open && !Ex.ⵠᐃΔⵠ.open && !Ex.ⲆᐃⲆⲆ.open && !Ex.ᐃⲆᐃΔ.open) {
                        Ex.ΔᐃⲆⲆⲆ.open = false;
                        var a = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ];
                        var b = 100;
                        if (a) {
                            for (var c = 0; c < Dx.ⵠᐃΔ[35].length; c++) {
                                var d = Dx.ⵠᐃΔ[35][c];
                                var e = ⵠΔⲆⵠ.ᐃⲆᐃⲆ(d, a);
                                if (e < b) {
                                    b = e;
                                    Ex.ΔᐃⲆⲆⲆ.open = true;
                                    Ex.ΔᐃⲆⲆⲆ.ⲆⲆᐃᐃ = d.ⲆⲆᐃᐃ;
                                    Ex.ΔᐃⲆⲆⲆ.ᐃᐃⵠⵠⲆ = d.id;
                                }
                            }
                        }
                    }
                })();
                Wp();
                Op();
                Lp();
                Hp();
                Np();
                jp();
            }
            if (Ex.ᐃΔΔⲆⵠ.enabled) {
                Kp();
            }
            Gp();
            if (this.ⲆⵠΔΔᐃᐃᐃ && this.ᐃⲆᐃⲆⵠⵠᐃ === 1) {
                Yu();
            }
            Ex.ΔⵠᐃᐃᐃᐃΔ.ⵠⲆⲆⵠ();
            Ex.alert.ⵠⲆⲆⵠ("#FFF", "#000");
            if (this.ⲆⵠΔΔᐃᐃᐃ) {
                Ex.ᐃΔΔⲆⵠ.ⵠⲆⲆⵠ();
                Ex.ⲆⲆΔᐃⲆ.ⵠⲆⲆⵠ();
                Ex.ⲆᐃΔⲆ.ᐃⲆᐃⵠᐃⵠᐃ.ⵠⲆⲆⵠ(Jx.ⵠⵠⲆⲆ.x, Jx.ⵠⵠⲆⲆ.y);
            }
            Up();
        };
        this.ΔⲆΔΔⲆⲆΔΔᐃ = function () {
            Ex.ⵠⵠⵠ.ⲆΔᐃ();
            Ex.ΔᐃⵠⲆ.ⲆΔᐃ();
            if (!Ex.reconnect.enabled && Ex.ⲆⵠⲆΔᐃ) {
                Ex.control.ⲆΔᐃ();
                Ex.ⵠⵠⲆΔⲆ.ⲆΔᐃ();
            }
            Dx.ⲆΔᐃ();
            this.ᐃⲆⲆΔ.ΔⲆⲆᐃΔⲆΔⲆΔ();
        };
        this.ⵠᐃᐃⲆᐃⵠΔΔⲆ = function () {
            bf();
        };
        this.ΔᐃΔᐃⲆⵠⲆᐃᐃ = function () {
            Δⵠⵠⵠ.ᐃΔⵠⲆᐃⲆᐃᐃΔ();
            Δⵠⵠⵠ.ⲆⵠⵠᐃⵠᐃᐃⲆⲆ();
            Δⵠⵠⵠ.ΔⵠⲆΔⵠΔⵠΔⲆ();
            Δⵠⵠⵠ.ⲆⵠⵠᐃΔᐃⵠⲆᐃ();
        };
        this.ⵠⲆⲆⵠ = function () {
            if (!Ex.reconnect.enabled && Ex.ⲆⵠⲆΔᐃ) {
                this.ΔᐃΔᐃⲆⵠⲆᐃᐃ();
            }
            Hx.ᐃΔΔΔⵠΔᐃⵠⵠ();
            this.ΔⲆΔΔⲆⲆΔΔᐃ();
            if (Ax.ⲆᐃᐃᐃᐃⲆⲆ !== 1) {
                this.ⵠᐃᐃⲆᐃⵠΔΔⲆ();
                this.ⵠᐃᐃⵠⵠⵠⲆᐃⵠ();
            } else {
                var a = ᐃⲆ.ΔⲆΔⵠΔΔⵠ;
                Vp(c, a, oo - a.width / 4, to - a.height / 4, a.width / 2, a.height / 2);
            }
        };
        this.ΔΔᐃΔⲆⵠᐃ = function (a) {
            if (!Ex.ⲆⵠᐃⲆΔ.open && !Ex.ᐃⵠⲆⲆΔ.open) {
                if (a.code === Settings.AutoSpike.k) Settings.AutoSpike.e = false;
            }
            if (Ex.ⲆⵠᐃⲆΔ.open && a.keyCode === 27) {
                Ex.ⲆⵠᐃⲆΔ.ⲆⲆⵠᐃᐃ();
            } else if (Ex.ᐃⵠⲆⲆΔ.open && a.keyCode === 27) {
                Ex.ᐃⵠⲆⲆΔ.ⲆⲆⵠᐃᐃ();
            } else if (Ex.ⲆⵠᐃⲆΔ.open || Ex.ᐃⵠⲆⲆΔ.open || a.keyCode != 79 || q != -1) {
                if (a.keyCode == 13 && q == -1) {
                    if (Ex.ᐃⵠⲆⲆΔ.open) {
                        Ex.ᐃⵠⲆⲆΔ.ⲆⲆᐃⲆᐃⲆᐃ();
                    } else {
                        Ex.ⲆⵠᐃⲆΔ.ᐃΔᐃⲆΔ();
                    }
                } else if (!Ex.ⲆⵠᐃⲆΔ.open && !Ex.ᐃⵠⲆⲆΔ.open) {
                    if (a.keyCode === 82) {
                        Ex.ⵠⵠⲆΔⲆ.ΔᐃⵠΔᐃⲆⲆ();
                    } else if (a.keyCode !== 80 || Dx.mode !== 1 || Ex.ΔⵠⵠᐃⲆΔΔ) {
                        if (a.keyCode >= 49 && a.keyCode <= 57) {
                            if (Ex.ᐃΔⵠΔ.id < 0) {
                                var b = a.keyCode - 49;
                                var c = Ex.ⲆᐃΔⲆ.ⲆᐃⲆⵠΔ[b];
                                if (c) {
                                    Δⵠⵠⵠ.ᐃⵠⵠⵠⵠ(c.id, b);
                                }
                            }
                        } else if (a.keyCode == 89) {
                            Ex.ΔⵠᐃⵠⲆᐃᐃ = !Ex.ΔⵠᐃⵠⲆᐃᐃ;
                        } else if (a.keyCode == 71) {
                            Ex.ᐃΔⵠΔ.ΔⵠⵠⲆΔⵠⵠⲆⵠ();
                        }
                    } else {
                        Ex.ⲆⲆⵠⲆᐃ.ΔᐃⵠΔᐃⲆⲆ();
                    }
                }
            } else {
                Ex.ᐃⵠⲆⲆΔ.ⵠΔⵠᐃⲆⵠᐃⵠΔ();
            }
            Ix.up(a);
        };
        this.ΔᐃᐃⵠᐃΔⲆ = function (a) {
            Ix.down(a);
            if (!Ex.ⲆⵠᐃⲆΔ.open && !Ex.ᐃⵠⲆⲆΔ.open) {
                if (8 == a.keyCode) a.preventDefault();
                if (a.code === Settings.AutoSpike.k) Settings.AutoSpike.e = true;
                if (a.code === Settings.AutoRecycle.k) Settings.AutoRecycle.e = !Settings.AutoRecycle.e;
                if (a.code === Settings.AutoCraft.k) Settings.AutoCraft.e = !Settings.AutoCraft.e;
            }
        };
        this.ᐃΔΔᐃᐃᐃΔ = function (b) {
            Jx.ⵠⵠⲆⲆ = Sf(f.ΔΔ, b);
            var c = bl;
            if (Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0) {
                f.ⲆᐃΔΔᐃ.focus(Jx.ⵠⵠⲆⲆ);
            }
            var d = Ex.ⵠⲆⲆᐃ;
            if (Ex.ᐃΔⵠΔ.id < 0 && d.id >= 0 && (!Ex.ⵠⲆⲆᐃ.lock || Ex.id === Ex.ⵠⲆⲆᐃ.ⲆⲆᐃᐃ)) {
                c |= f.ⵠᐃⵠ[Ex.ⵠⲆⲆᐃ.id].ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Af);
            }
            var e = Ex.ⵠᐃΔⵠ;
            if (e.open && e.ⲆΔⵠᐃᐃ > 0) {
                c |= f.ΔᐃΔⵠⵠΔⵠ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Af);
            }
            var j = Ex.ᐃⲆᐃΔ;
            if (j.open && j.ᐃⵠⵠᐃⲆΔⵠ > 0) {
                c |= f.ⵠⲆⵠᐃᐃⲆΔ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Af);
                c |= f.ⵠⵠⵠⲆΔⲆᐃ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Af);
                c |= f.ⲆⵠΔⵠΔΔⲆ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Af);
                c |= f.ⵠⲆⵠⵠⲆΔⵠ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Af);
                c |= f.ᐃⲆⵠⲆᐃⵠΔ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Af);
            }
            var a = Ex.ⲆᐃⲆⲆ;
            if (a.open && a.ⵠᐃⵠⲆⲆⵠᐃ > 0) {
                c |= f.ⵠⲆᐃΔⲆⲆᐃ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Af);
            }
            if (Ex.sign.open) {
                c |= f.sign.button.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Af);
            }
            if (!Ex.ⵠⲆⲆᐃ.lock) {
                if (Ex.ⵠⲆⲆᐃ.ΔⲆᐃΔΔᐃΔ) {
                    c |= f.ΔⲆⵠΔᐃⲆΔ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Af);
                }
            }
            if (Ex.ⵠⲆⲆᐃ.ⲆΔⵠᐃⲆΔᐃ) {
                c |= f.ⵠⵠⲆᐃΔΔΔ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Af);
            }
            if (Ex.ᐃΔⵠΔ.id < 0 && !f.ΔΔΔΔ.open && !f.ⵠⵠⵠᐃ.open && !f.Ⲇᐃᐃⵠᐃ.open && !f.ᐃⲆⲆΔ.open && !f.options.open && !f.ᐃⵠᐃΔⵠ.open) {
                for (var k = Ex.ⲆᐃΔⲆ.ⲆᐃⲆⵠΔ, m = 0; k.length > m; m++) {
                    var n = k[m].ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Af);
                    c |= n;
                    if (n) {
                        Ex.ⲆᐃΔⲆ.ᐃⲆᐃⵠᐃⵠᐃ.start(m, Jx.ⵠⵠⲆⲆ);
                    }
                    if (d.open && (d.id < 0 || k[m].id == d.id) || Ex.ⲆⲆᐃⲆΔ.open && k[m].id === 109 || Ex.ΔᐃⲆⲆⲆ.open && k[m].id === 180 || Ex.ⲆᐃⲆⲆ.open && (k[m].id === 109 || k[m].id === 131) || Ex.ⵠᐃΔⵠ.open && k[m].id === 134 || Ex.ᐃⲆᐃΔ.open && k[m].id === 109) {
                        c |= f.ᐃⲆⵠΔΔ[k[m].id].ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Af);
                    }
                }
            }
            if (Ex.ᐃΔⲆⵠⲆ.open) {
                c |= f.ᐃΔⲆⵠⲆ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Af);
            }
            if (f.ⲆⲆⵠΔᐃ != -1) {
                if (c |= f.ⵠⵠⵠⲆⵠ[f.ⲆⲆⵠΔᐃ].button.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Af)) {
                    var o = xq;
                }
            } else {
                o = bl;
            }
            if (Ex.ᐃΔⵠΔ.id < 0 && Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0 && !o && !f.ΔΔΔΔ.open && !f.ⵠⵠⵠᐃ.open && !f.options.open && !f.Ⲇᐃᐃⵠᐃ.open && !f.ᐃⵠᐃΔⵠ.open && !Ex.ᐃΔΔⲆᐃ) {
                k = Ex.ᐃΔⵠΔ.ⲆⲆⵠⵠᐃ;
                m = 0;
                for (; m < k.length; m++) {
                    c |= k[m].ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Af);
                }
            }
            if (Ex.ᐃΔⵠΔ.id < 0 && Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0 && Ex.ⲆⲆΔᐃⲆ.open && !f.ΔΔΔΔ.open && !f.ⵠⵠⵠᐃ.open && !f.options.open && !f.Ⲇᐃᐃⵠᐃ.open && !f.ᐃⲆⲆΔ.open && !f.ᐃⵠᐃΔⵠ.open) {
                c |= f.ⲆⲆΔᐃⲆ.button.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Af);
            }
            if (Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0 && !f.ⵠⵠⵠᐃ.open && !f.options.open && !f.Ⲇᐃᐃⵠᐃ.open && !f.ᐃⲆⲆΔ.open && !f.ᐃⵠᐃΔⵠ.open) {
                c |= f.ΔΔΔΔ.button.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Af);
            }
            if (Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0 && !f.ΔΔΔΔ.open && !f.ⵠⵠⵠᐃ.open && !f.Ⲇᐃᐃⵠᐃ.open && !f.ᐃⲆⲆΔ.open && !f.ᐃⵠᐃΔⵠ.open) {
                c |= f.options.button.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Af);
            }
            if (Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0 && !f.ΔΔΔΔ.open && !f.ⵠⵠⵠᐃ.open && !f.Ⲇᐃᐃⵠᐃ.open && !f.ᐃⲆⲆΔ.open && !f.options.open) {
                c |= f.ᐃⵠᐃΔⵠ.button.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Af);
            }
            if (Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0 && !f.ΔΔΔΔ.open && !f.ⵠⵠⵠᐃ.open && !f.Ⲇᐃᐃⵠᐃ.open && !f.ᐃⲆⲆΔ.open && !f.options.open && !f.ᐃⵠᐃΔⵠ.open) {
                if (Hx.ᐃΔᐃⲆΔ) {
                    c |= f.ΔΔⲆΔ.ⵠⵠⵠⵠⵠⵠᐃ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Af);
                } else {
                    c |= f.ΔΔⲆΔ.ⲆⲆⵠⵠΔΔΔ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Af);
                }
            }
            if (Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0 && !f.ΔΔΔΔ.open && !f.ᐃⵠᐃΔⵠ.open && !f.ⵠⵠⵠᐃ.open && !f.options.open && !f.Ⲇᐃᐃⵠᐃ.open && Dx.mode !== 2 && Dx.mode !== 4 && Dx.mode !== 5) {
                c |= f.ᐃⲆⲆΔ.button.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Af);
            }
            if (!c && !f.ΔΔΔΔ.open && !f.ⵠⵠⵠᐃ.open && !f.options.open && !f.Ⲇᐃᐃⵠᐃ.open && !f.ᐃⲆⲆΔ.open && !f.ᐃⵠᐃΔⵠ.open && !f.sign.open) {
                if (Ex.ᐃΔⵠΔ.Δᐃᐃⵠ >= 0) {
                    Δⵠⵠⵠ.ΔⲆⲆΔⵠΔⵠⲆⵠ();
                } else if (!o) {
                    Jx.down();
                }
            }
        };
        this.ⵠΔΔᐃⵠᐃⵠ = function (c) {
            Jx.ⵠⵠⲆⲆ = Sf(f.ΔΔ, c);
            Jx.up();
            if (!Ex.ⲆᐃΔⲆ.ᐃⲆᐃⵠᐃⵠᐃ.release()) {
                var d = Ex.ⵠⲆⲆᐃ;
                var e = Ex.ⲆⲆᐃⲆΔ;
                var g = Ex.ΔᐃⲆⲆⲆ;
                var i = Ex.ⵠᐃΔⵠ;
                var j = Ex.ᐃⲆᐃΔ;
                var k = Ex.ⲆᐃⲆⲆ;
                if (Ex.control.attack) {
                    Ex.control.attack = 0;
                    Δⵠⵠⵠ.ⲆΔⲆⵠⵠᐃᐃΔⵠ();
                }
                if (f.ⲆⲆⵠΔᐃ != -1) {
                    var m = f.ⵠⵠⵠⲆⵠ[f.ⲆⲆⵠΔᐃ].button.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf);
                    var n = document.getElementById("team_box").style;
                    if (m && n.display == "inline-block") {
                        n.display = "none";
                        return;
                    }
                    if (m) {
                        f.ⵠⵠⵠⲆⵠ[f.ⲆⲆⵠΔᐃ].action();
                    }
                }
                if (Ex.ᐃΔⵠΔ.id < 0 && d.id >= 0 && !f.ⵠⵠⵠᐃ.open) {
                    if (!Ex.ⵠⲆⲆᐃ.lock || Ex.id === Ex.ⵠⲆⲆᐃ.ⲆⲆᐃᐃ) {
                        if (m = f.ⵠᐃⵠ[Ex.ⵠⲆⲆᐃ.id].ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf)) {
                            Δⵠⵠⵠ.ⲆⲆᐃⵠⵠⲆᐃΔΔ(d);
                        }
                    }
                }
                if ((i = Ex.ⵠᐃΔⵠ).open && i.ⲆΔⵠᐃᐃ > 0 && !f.ⵠⵠⵠᐃ.open) {
                    if (m = f.ΔᐃΔⵠⵠΔⵠ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf)) {
                        Δⵠⵠⵠ.ⲆΔⲆΔⲆⵠⲆΔᐃ(i);
                    }
                }
                if ((j = Ex.ᐃⲆᐃΔ).open && j.ᐃⵠⵠᐃⲆΔⵠ > 0 && !f.ⵠⵠⵠᐃ.open) {
                    switch (j.type) {
                        case 24:
                            if (m = f.ⵠⲆⵠᐃᐃⲆΔ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf)) {
                                Δⵠⵠⵠ.ⲆᐃᐃΔⲆᐃⲆ(j);
                            }
                            break;
                        case 25:
                            if (m = f.ⵠⵠⵠⲆΔⲆᐃ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf)) {
                                Δⵠⵠⵠ.ⲆᐃᐃΔⲆᐃⲆ(j);
                            }
                            break;
                        case 26:
                            if (m = f.ⲆⵠΔⵠΔΔⲆ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf)) {
                                Δⵠⵠⵠ.ⲆᐃᐃΔⲆᐃⲆ(j);
                            }
                            break;
                        case 27:
                            if (m = f.ⵠⲆⵠⵠⲆΔⵠ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf)) {
                                Δⵠⵠⵠ.ⲆᐃᐃΔⲆᐃⲆ(j);
                            }
                            break;
                        case 28:
                            if (m = f.ᐃⲆⵠⲆᐃⵠΔ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf)) {
                                Δⵠⵠⵠ.ⲆᐃᐃΔⲆᐃⲆ(j);
                            }
                    }
                }
                if ((k = Ex.ⲆᐃⲆⲆ).open && k.ⵠᐃⵠⲆⲆⵠᐃ > 0 && !f.ⵠⵠⵠᐃ.open) {
                    if (m = f.ⵠⲆᐃΔⲆⲆᐃ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf)) {
                        Δⵠⵠⵠ.ⲆΔⲆⵠⵠⲆⲆᐃᐃ(k);
                    }
                }
                if (Ex.sign.open && !f.ⵠⵠⵠᐃ.open) {
                    if (m = f.sign.button.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf)) {
                        f.sign.select();
                    }
                }
                if (!Ex.ⵠⲆⲆᐃ.lock && !f.ⵠⵠⵠᐃ.open) {
                    if (Ex.ⵠⲆⲆᐃ.ΔⲆᐃΔΔᐃΔ && (m = f.ΔⲆⵠΔᐃⲆΔ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf))) {
                        Δⵠⵠⵠ.ᐃⲆΔᐃΔⲆᐃⲆΔ(d);
                    }
                }
                if (Ex.ⵠⲆⲆᐃ.ⲆΔⵠᐃⲆΔᐃ && !f.ⵠⵠⵠᐃ.open && (m = f.ⵠⵠⲆᐃΔΔΔ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf))) {
                    Δⵠⵠⵠ.ΔⲆΔⵠⵠΔΔⵠᐃ(d);
                    if (ga) {
                        ga("send", "event", "Game", "lockpick");
                    }
                }
                if (Ex.ᐃΔⲆⵠⲆ.open) {
                    if (m = f.ᐃΔⲆⵠⲆ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf)) {
                        Δⵠⵠⵠ.ᐃΔⲆⵠⲆ();
                        if (ga) {
                            ga("send", "event", "Game", "resurrection");
                        }
                    }
                }
                if (Ex.ᐃΔⵠΔ.id < 0 && !Ex.ᐃΔΔⲆⵠ.enabled && !f.ⵠⵠⵠᐃ.open) {
                    for (var l = Ex.ⲆᐃΔⲆ.ⲆᐃⲆⵠΔ, o = 0; o < l.length; o++) {
                        if (m = l[o].ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf)) {
                            if (c.which != 1 || c.shiftKey) {
                                if ((c.which == 1 && c.shiftKey || c.which == 3) && Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0) {
                                    f.ⵠⵠⵠᐃ.ⵠΔᐃⵠⵠΔᐃ(l[o].id);
                                }
                            } else {
                                Δⵠⵠⵠ.ᐃⵠⵠⵠⵠ(l[o].id, o);
                            }
                        } else if (d.open && (d.id < 0 || d.id === l[o].id)) {
                            if ((m = f.ᐃⲆⵠΔΔ[l[o].id].ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf)) && Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0) {
                                Δⵠⵠⵠ.ⵠⵠⵠΔᐃⲆΔⵠΔ(d, l[o].id, c.shiftKey ? 10 : 1);
                            }
                        } else if (g.open && l[o].id === 180) {
                            if ((m = f.ᐃⲆⵠΔΔ[l[o].id].ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf)) && Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0) {
                                Δⵠⵠⵠ.ΔⵠⲆⲆᐃⵠΔᐃΔ(g);
                            }
                        } else if (e.open && l[o].id === 109) {
                            if ((m = f.ᐃⲆⵠΔΔ[l[o].id].ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf)) && Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0) {
                                Δⵠⵠⵠ.ᐃⵠΔΔⲆⵠᐃᐃⲆ(e, c.shiftKey ? 10 : 1);
                            }
                        } else if (i.open && l[o].id === 134) {
                            if ((m = f.ᐃⲆⵠΔΔ[l[o].id].ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf)) && Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0) {
                                Δⵠⵠⵠ.ⲆⲆΔⵠⵠⵠᐃᐃᐃ(i, c.shiftKey ? 10 : 1);
                            }
                        } else if (j.open && l[o].id === 109) {
                            if ((m = f.ᐃⲆⵠΔΔ[l[o].id].ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf)) && Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0) {
                                Δⵠⵠⵠ.ΔⲆⵠᐃⵠⵠⲆᐃᐃ(j, c.shiftKey ? 10 : 1);
                            }
                        } else if (k.open && (l[o].id === 109 || l[o].id === 131)) {
                            if ((m = f.ᐃⲆⵠΔΔ[l[o].id].ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf)) && Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0) {
                                if (l[o].id === 109) {
                                    Δⵠⵠⵠ.ⵠⲆᐃΔⵠΔΔ(k, c.shiftKey ? 10 : 1, 0);
                                } else {
                                    Δⵠⵠⵠ.ⵠⲆᐃΔⵠΔΔ(k, 0, c.shiftKey ? 10 : 1);
                                }
                            }
                        }
                    }
                }
                if (Ex.ᐃΔⵠΔ.id < 0 && Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0 && !Ex.ᐃΔΔⲆⵠ.enabled && !f.ⵠⵠⵠᐃ.open && !Ex.ᐃΔΔⲆᐃ) {
                    l = Ex.ᐃΔⵠΔ.ⲆⲆⵠⵠᐃ;
                    o = 0;
                    for (; l.length > o; o++) {
                        if (m = l[o].ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf)) {
                            ⵠⲆΔΔⵠ = Δⵠⵠⵠ.ΔⵠᐃⲆⲆⲆΔΔΔ(l[o].id);
                            if (ⵠⲆΔΔⵠ && ga) {
                                ga("send", "event", "Game", "craft", bs[tt[l[o].id].ΔⵠⵠΔ].name);
                            }
                        }
                    }
                }
                if (Ex.ᐃΔⵠΔ.id < 0 && Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0 && Ex.ⲆⲆΔᐃⲆ.open && !f.ᐃⵠᐃΔⵠ.open && !f.ΔΔΔΔ.open && !f.ⵠⵠⵠᐃ.open && !f.options.open && !f.Ⲇᐃᐃⵠᐃ.open && !f.ᐃⲆⲆΔ.open) {
                    if (m = f.ⲆⲆΔᐃⲆ.button.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Pf)) {
                        Gx.ⲆⲆΔᐃⲆ.select();
                    }
                }
                if (Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0 && !f.ΔΔΔΔ.open && !f.ⵠⵠⵠᐃ.open && !f.ᐃⵠᐃΔⵠ.open && !f.Ⲇᐃᐃⵠᐃ.open && !f.ᐃⲆⲆΔ.open && !f.options.open) {
                    if (Hx.ᐃΔᐃⲆΔ) {
                        if (m = f.ΔΔⲆΔ.ⵠⵠⵠⵠⵠⵠᐃ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf)) {
                            Hx.select();
                            if (ga) {
                                ga("send", "event", "Game", "sound on");
                            }
                        }
                    } else if (m = f.ΔΔⲆΔ.ⲆⲆⵠⵠΔΔΔ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf)) {
                        Hx.select();
                        if (ga) {
                            ga("send", "event", "Game", "sound off");
                        }
                    }
                }
                if (Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0 && !f.ΔΔΔΔ.open && !f.ⵠⵠⵠᐃ.open && !f.Ⲇᐃᐃⵠᐃ.open && !f.ᐃⲆⲆΔ.open && !f.ᐃⵠᐃΔⵠ.open) {
                    if (m = f.options.button.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf)) {
                        f.options.ΔᐃΔⲆⵠⲆⵠΔⵠ();
                        if (ga) {
                            ga("send", "event", "Game", "options");
                        }
                    }
                }
                if (Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0 && !f.ΔΔΔΔ.open && !f.ⵠⵠⵠᐃ.open && !f.Ⲇᐃᐃⵠᐃ.open && !f.ᐃⲆⲆΔ.open && !f.options.open && f.ΔΔᐃΔⵠⲆΔ === 1) {
                    if (m = f.ᐃⵠᐃΔⵠ.button.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf)) {
                        f.ᐃⵠᐃΔⵠ.select();
                        if (ga) {
                            ga("send", "event", "Game", "market");
                        }
                    }
                }
                if (Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0 && !f.ⵠⵠⵠᐃ.open && !f.ᐃⵠᐃΔⵠ.open && !f.options.open && !f.Ⲇᐃᐃⵠᐃ.open && !f.ᐃⲆⲆΔ.open && f.ᐃΔⵠΔΔΔᐃ === 1) {
                    if (m = f.ΔΔΔΔ.button.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf)) {
                        f.ΔΔΔΔ.ⲆΔⲆⵠΔᐃΔⵠⲆ();
                        if (ga) {
                            ga("send", "event", "Game", "recipe");
                        }
                    }
                }
                if (Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0 && !f.ΔΔΔΔ.open && !f.ⵠⵠⵠᐃ.open && !f.options.open && !f.Ⲇᐃᐃⵠᐃ.open && !f.ᐃⵠᐃΔⵠ.open && Dx.mode !== 2 && Dx.mode !== 4 && Dx.mode !== 5 && f.ⲆΔᐃⵠⲆΔΔ === 1) {
                    if (m = f.ᐃⲆⲆΔ.button.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, xf)) {
                        f.ᐃⲆⲆΔ.select();
                        if (ga) {
                            ga("send", "event", "Game", "quests");
                        }
                    }
                }
                if (Ex.ᐃΔⵠΔ.ⵠΔⵠᐃΔ && c.which == 3) {
                    f.Ⲇᐃᐃⵠᐃ.ⵠΔᐃⵠⵠΔᐃ();
                }
            }
        };
        this.ΔⵠⲆⲆᐃⲆΔ = false;
        this.ⵠΔⲆⵠⵠᐃΔ = function (b) {
            Jx.ⵠⵠⲆⲆ = Sf(f.ΔΔ, b);
            var c = false;
            Gx.ᐃΔΔΔᐃ.display = 0;
            Ex.ⲆᐃΔⲆ.ᐃⲆᐃⵠᐃⵠᐃ.ⵠⵠⲆⲆᐃ(Jx.ⵠⵠⲆⲆ);
            if (f.ⲆⲆⵠΔᐃ != -1) {
                c |= f.ⵠⵠⵠⲆⵠ[f.ⲆⲆⵠΔᐃ].button.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Pf);
            }
            var d = Ex.ⵠᐃΔⵠ;
            if (d.open && d.ⲆΔⵠᐃᐃ > 0) {
                c |= f.ΔᐃΔⵠⵠΔⵠ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Pf);
            }
            var e = Ex.ᐃⲆᐃΔ;
            if (e.open && e.ᐃⵠⵠᐃⲆΔⵠ > 0) {
                c |= f.ⵠⲆⵠᐃᐃⲆΔ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Pf);
                c |= f.ⵠⵠⵠⲆΔⲆᐃ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Pf);
                c |= f.ⲆⵠΔⵠΔΔⲆ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Pf);
                c |= f.ⵠⲆⵠⵠⲆΔⵠ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Pf);
                c |= f.ᐃⲆⵠⲆᐃⵠΔ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Pf);
            }
            var g = Ex.ⲆᐃⲆⲆ;
            if (g.open && g.ⵠᐃⵠⲆⲆⵠᐃ > 0) {
                c |= f.ⵠⲆᐃΔⲆⲆᐃ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Pf);
            }
            if (Ex.sign.open) {
                c |= f.sign.button.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Pf);
            }
            var i = Ex.ⵠⲆⲆᐃ;
            if (Ex.ᐃΔⵠΔ.id < 0 && i.id >= 0 && !Ex.ᐃΔΔⲆⵠ.enabled) {
                if (!Ex.ⵠⲆⲆᐃ.lock || Ex.ⵠⲆⲆᐃ.ⲆⲆᐃᐃ === Ex.id) {
                    c |= f.ⵠᐃⵠ[i.id].ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Pf);
                }
            }
            if (Ex.ᐃΔⲆⵠⲆ.open) {
                c |= f.ᐃΔⲆⵠⲆ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Pf);
            }
            if (!Ex.ⵠⲆⲆᐃ.lock && !Ex.ᐃΔΔⲆⵠ.enabled) {
                if (Ex.ⵠⲆⲆᐃ.ΔⲆᐃΔΔᐃΔ) {
                    c |= f.ΔⲆⵠΔᐃⲆΔ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Pf);
                }
            }
            if (Ex.ⵠⲆⲆᐃ.ⲆΔⵠᐃⲆΔᐃ && !Ex.ᐃΔΔⲆⵠ.enabled) {
                c |= f.ⵠⵠⲆᐃΔΔΔ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Pf);
            }
            if (Ex.ᐃΔⵠΔ.id < 0 && !Ex.ᐃΔΔⲆⵠ.enabled) {
                for (var j = Ex.ⲆᐃΔⲆ.ⲆᐃⲆⵠΔ, k = 0; k < j.length; k++) {
                    var m = j[k].ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Pf);
                    c |= Gx.ᐃΔΔΔᐃ.ⵠⲆⵠᐃ(m, j[k], 0);
                    if (i.open && (i.id < 0 || j[k].id == i.id) || Ex.ⲆⲆᐃⲆΔ.open && j[k].id == 109 || Ex.ΔᐃⲆⲆⲆ.open && j[k].id === 180 || Ex.ⲆᐃⲆⲆ.open && (j[k].id == 109 || j[k].id == 131) || Ex.ⵠᐃΔⵠ.open && j[k].id == 134 || Ex.ᐃⲆᐃΔ.open && j[k].id == 109) {
                        c |= f.ᐃⲆⵠΔΔ[j[k].id].ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Pf);
                    }
                }
            }
            if (Ex.ᐃΔⵠΔ.id < 0 && Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0 && !Ex.ᐃΔΔⲆⵠ.enabled && !Ex.ᐃΔΔⲆᐃ) {
                j = Ex.ᐃΔⵠΔ.ⲆⲆⵠⵠᐃ;
                k = 0;
                for (; k < j.length; k++) {
                    m = Sg;
                    m = j[k].ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Pf);
                    c |= Gx.ᐃΔΔΔᐃ.ⵠⲆⵠᐃ(m, j[k], 1);
                }
            }
            if (Ex.ᐃΔⵠΔ.id < 0 && Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0 && Ex.ⲆⲆΔᐃⲆ.open && !f.ΔΔΔΔ.open && !f.ⵠⵠⵠᐃ.open && !f.options.open && !f.Ⲇᐃᐃⵠᐃ.open && !f.ᐃⲆⲆΔ.open && !f.ᐃⵠᐃΔⵠ.open) {
                c |= f.ⲆⲆΔᐃⲆ.button.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Pf);
            }
            if (Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0 && !f.ⵠⵠⵠᐃ.open && !f.options.open && !f.Ⲇᐃᐃⵠᐃ.open && !f.ᐃⲆⲆΔ.open && !f.ᐃⵠᐃΔⵠ.open && f.ᐃΔⵠΔΔΔᐃ === 1) {
                c |= f.ΔΔΔΔ.button.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Pf);
            }
            if (Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0 && !f.ΔΔΔΔ.open && !f.ⵠⵠⵠᐃ.open && !f.Ⲇᐃᐃⵠᐃ.open && !f.ᐃⲆⲆΔ.open && !f.ᐃⵠᐃΔⵠ.open) {
                c |= f.options.button.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Pf);
            }
            if (Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0 && !f.ΔΔΔΔ.open && !f.ⵠⵠⵠᐃ.open && !f.Ⲇᐃᐃⵠᐃ.open && !f.ᐃⲆⲆΔ.open && !f.options.open && f.ΔΔᐃΔⵠⲆΔ === 1) {
                c |= f.ᐃⵠᐃΔⵠ.button.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Pf);
            }
            if (Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0 && !f.ΔΔΔΔ.open && !f.ⵠⵠⵠᐃ.open && !f.Ⲇᐃᐃⵠᐃ.open && !f.ᐃⲆⲆΔ.open && !f.options.open && !f.ᐃⵠᐃΔⵠ.open) {
                if (Hx.ᐃΔᐃⲆΔ) {
                    c |= f.ΔΔⲆΔ.ⵠⵠⵠⵠⵠⵠᐃ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Pf);
                } else {
                    c |= f.ΔΔⲆΔ.ⲆⲆⵠⵠΔΔΔ.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Pf);
                }
            }
            if (Ex.ᐃΔⵠΔ.Δᐃᐃⵠ < 0 && !f.ΔΔΔΔ.open && !f.ⵠⵠⵠᐃ.open && !f.options.open && !f.Ⲇᐃᐃⵠᐃ.open && !f.ᐃⵠᐃΔⵠ.open && Dx.mode !== 2 && Dx.mode !== 4 && Vf.ⵠΔⲆⲆⲆᐃΔᐃⲆ !== Dx.mode && f.ⲆΔᐃⵠⲆΔΔ === 1) {
                c |= f.ᐃⲆⲆΔ.button.ⵠⲆⵠᐃ(f.ΔΔ, Jx.ⵠⵠⲆⲆ, Pf);
            }
            if (f.ΔⵠⲆⲆᐃⲆΔ !== c) {
                f.ΔⵠⲆⲆᐃⲆΔ = c;
                a.style.cursor = c ? f.ᐃⵠΔⵠΔΔᐃ : f.ⲆᐃⲆᐃᐃΔⵠ;
            }
        };
        this.ⵠⲆⵠⲆⲆⲆⲆ = function () {
            Hf.addEventListener("mousedown", this.ᐃΔΔᐃᐃᐃΔ, false);
            Hf.addEventListener("mouseup", this.ⵠΔΔᐃⵠᐃⵠ, false);
            Hf.addEventListener("mousemove", this.ⵠΔⲆⵠⵠᐃΔ, w);
            Hf.addEventListener("keyup", this.ΔΔᐃΔⲆⵠᐃ, Ad);
            Hf.addEventListener("keydown", this.ΔᐃᐃⵠᐃΔⲆ, false);
        };
        this.ᐃᐃᐃⲆⵠⵠᐃ = function () {
            Hf.removeEventListener("mousedown", this.ᐃΔΔᐃᐃᐃΔ, false);
            Hf.removeEventListener("mouseup", this.ⵠΔΔᐃⵠᐃⵠ, Xs);
            Hf.removeEventListener("mousemove", this.ⵠΔⲆⵠⵠᐃΔ, false);
            Hf.removeEventListener("keyup", this.ΔΔᐃΔⲆⵠᐃ, et);
            Hf.removeEventListener("keydown", this.ΔᐃᐃⵠᐃΔⲆ, false);
        };
    }
    function gx() {
        ⵠΔⲆⵠ.ⵠⲆΔⵠᐃΔΔ("https://twitter.com/intent/tweet?text=I%20survived%20" + Ex.Δⵠᐃ + "%20days%20with%20" + Ex.ΔⲆⲆⵠⵠⵠⵠ.Ⲇⵠⵠⵠᐃ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
    }
    function hx(b, c, d, e) {
        const f = (26491 + ((1013904223 + (b + 30063) * 1664525) % 4294967296 ^ (c ^ 19026))) % 65436;
        const g = (f | 26153) & ~(f & 26153);
        return ~(g & 24022) & (g | 24022);
    }
    function ix(a, g) {
        this.ΔΔ = a;
        this.Δ = g;
        if (Hf.navigator.userAgent.indexOf("Edge") > -1) {
            this.ⲆᐃⲆᐃᐃΔⵠ = "default";
            this.ᐃⵠΔⵠΔΔᐃ = "pointer";
        } else {
            this.ⲆᐃⲆᐃᐃΔⵠ = "url('img/cursor0.png'), default";
            this.ᐃⵠΔⵠΔΔᐃ = "url('img/cursor1.png'), pointer";
        }
        var j = this;
        function e(c, e, f, g, i) {
            var a = this;
            for (var k = e + 9, m = 0, n = g, o = e; o < k; o++) {
                j.buttons[o].info.callback = p;
                j.buttons[o].info.ⵠⵠⲆᐃΔᐃⵠⵠⲆ = c;
            }
            function p() {
                if (this.ΔΔΔⲆⲆΔⲆ !== n && this.ΔΔΔⲆⲆΔⲆ !== -1) {
                    if (this.ⲆⲆΔᐃⲆⲆΔ > 0) {
                        if (ⲆᐃΔⲆⵠΔⲆ === e) {
                            P(y, fa, "none");
                        } else {
                            P(z, fa, "none");
                        }
                    } else if (ⲆᐃΔⲆⵠΔⲆ === e) {
                        P(y, ha, "inline-block");
                    } else {
                        P(z, ha, "inline-block");
                    }
                    n = this.ΔΔΔⲆⲆΔⲆ;
                    f(this.ΔΔΔⲆⲆΔⲆ);
                    b();
                }
            }
            function b() {
                var a = c[n];
                Ax.ᐃⵠΔᐃⲆⵠᐃ = Ef(a.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, undefined, 10, 8);
                if (a.level !== undefined) {
                    Ax.ᐃΔΔΔⲆⵠᐃ = Ef("Level " + a.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, 8);
                } else {
                    Ax.ᐃΔΔΔⲆⵠᐃ = Ef("by " + a.ⲆΔⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, lh, 10, 8);
                }
            }
            this.ⵠⲆⲆΔⲆ = function () {
                for (var a = e, d = m * 3; a < k && c.length > d; a++, d++) {
                    if (ⲆⲆⵠ.ⵠΔΔⲆΔⲆⲆ !== c[d].ᐃᐃⵠ || i[d] !== 0) {
                        j.buttons[a].info.ΔΔΔⲆⲆΔⲆ = d;
                        for (var f = 0; f < 3; f++) {
                            j.buttons[a].info.Ⲇᐃ[f] = ᐃⵠⲆⵠⲆ[c[d].ᐃᐃⵠ][f];
                            j.buttons[a].info.active = ha;
                            j.buttons[a].info.ⲆⲆΔᐃⲆⲆΔ = i[d];
                        }
                    } else {
                        j.buttons[a].info.ΔΔΔⲆⲆΔⲆ = -1;
                        j.buttons[a].info.active = fa;
                    }
                }
                for (; a < k; a++) {
                    j.buttons[a].info.ΔΔΔⲆⲆΔⲆ = -1;
                    j.buttons[a].info.active = fa;
                }
                b();
            };
            j.buttons[k].info.callback = function () {
                if (m > 0) {
                    m--;
                }
                a.ⵠⲆⲆΔⲆ();
            };
            j.buttons[k + 1].info.callback = function () {
                if (m * 3 + 9 < c.length) {
                    m++;
                }
                a.ⵠⲆⲆΔⲆ();
            };
        }
        function t() {
            var b = Number(ΔⲆⲆΔ.get("starve_crate"));
            var c = Number(ΔⲆⲆΔ.get("starve_dead"));
            var d = Number(ΔⲆⲆΔ.get("starve_book"));
            var e = Number(ΔⲆⲆΔ.get("starve_bag"));
            var f = Number(ΔⲆⲆΔ.get("starve_skin"));
            var a = Number(ΔⲆⲆΔ.get("starve_accessory"));
            j.ⵠᐃⵠᐃ = f || 0;
            j.ΔᐃᐃᐃΔ = d || 0;
            j.ᐃⲆⲆⲆⲆ = b || 1;
            j.ᐃⵠᐃⲆΔ = a || 0;
            j.ᐃᐃⵠᐃⲆ = e || 0;
            j.ᐃⵠⵠΔΔ = c || 0;
        }
        function i() {
            for (var a = ⲆᐃᐃΔ.ⵠⵠⲆᐃⲆ, b = 0; a.length > b; b++) {
                if (ⲆⲆⵠ.ⵠΔⵠΔᐃ === a[b].ᐃᐃⵠ) {
                    j.unlock.ⵠᐃⵠᐃ[b] = 1;
                } else {
                    j.unlock.ⵠᐃⵠᐃ[b] = 0;
                }
            }
            a = ⲆᐃᐃΔ.ⵠᐃⲆⲆᐃ;
            b = 0;
            for (; b < a.length; b++) {
                if (a[b].ᐃᐃⵠ === ⲆⲆⵠ.ⵠΔⵠΔᐃ) {
                    j.unlock.ᐃⵠᐃⲆΔ[b] = 1;
                } else {
                    j.unlock.ᐃⵠᐃⲆΔ[b] = 0;
                }
            }
            a = ⲆᐃᐃΔ.ⲆΔⵠᐃ;
            b = 0;
            for (; a.length > b; b++) {
                if (ⲆⲆⵠ.ⵠΔⵠΔᐃ === a[b].ᐃᐃⵠ) {
                    j.unlock.ᐃᐃⵠᐃⲆ[b] = 1;
                } else {
                    j.unlock.ᐃᐃⵠᐃⲆ[b] = 0;
                }
            }
            a = ⲆᐃᐃΔ.ⲆⵠⲆⲆⲆ;
            b = 0;
            for (; a.length > b; b++) {
                if (ⲆⲆⵠ.ⵠΔⵠΔᐃ === a[b].ᐃᐃⵠ) {
                    j.unlock.ΔᐃᐃᐃΔ[b] = 1;
                } else {
                    j.unlock.ΔᐃᐃᐃΔ[b] = 0;
                }
            }
            a = ⲆᐃᐃΔ.ⲆⲆⲆⵠΔ;
            b = 0;
            for (; b < a.length; b++) {
                if (ⲆⲆⵠ.ⵠΔⵠΔᐃ === a[b].ᐃᐃⵠ) {
                    j.unlock.ᐃⲆⲆⲆⲆ[b] = 1;
                    j.unlock.ᐃⵠⵠΔΔ[b] = 1;
                } else {
                    j.unlock.ᐃⲆⲆⲆⲆ[b] = 0;
                    j.unlock.ᐃⵠⵠΔΔ[b] = 0;
                }
            }
        }
        this.waiting = bk;
        this.ⲆⲆⵠⵠΔᐃⲆ = 0;
        this.ⵠΔΔΔⵠⵠⲆ = -1;
        this.ⲆΔⲆΔⵠⲆⲆ = {
            translate: {
                y: 0,
                x: 0
            },
            angle: 0,
            Ⲇᐃ: ᐃΔ[301],
            ⵠⲆⲆⵠ: function () {
                this.angle += Lx * 2;
                g.save();
                g.translate(this.translate.x + this.Ⲇᐃ.width / 2, this.translate.y + this.Ⲇᐃ.height / 2);
                g.rotate(this.angle);
                Vp(g, this.Ⲇᐃ, -this.Ⲇᐃ.width / 2, -this.Ⲇᐃ.height / 2);
                g.restore();
            }
        };
        this.ΔΔⵠΔⲆᐃᐃ = {
            id: document.getElementById("langselect"),
            style: document.getElementById("langselect").style,
            translate: {
                y: 0,
                x: 0
            },
            ⲆΔᐃ: function () {
                this.style.left = Math.floor(this.translate.x) + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        this.ⵠⲆΔⲆⲆ = 0;
        this.ⲆΔΔⵠΔⲆⵠ = -1;
        this.ⵠⲆΔΔΔΔⵠ = Gr;
        this.ᐃⲆⵠΔᐃⲆᐃ = "";
        this.ΔⵠⵠΔᐃΔⲆ = "";
        this.ᐃΔⲆⲆⵠΔᐃ = mr;
        this.ΔᐃⲆᐃᐃ = 0;
        this.ⲆᐃΔⵠΔⵠⲆ = -1;
        this.ΔΔⵠⲆᐃⲆⲆ = Vq;
        this.ⵠⲆΔᐃⲆⵠⵠ = 0;
        this.ⲆᐃᐃⵠⲆⲆΔ = 0;
        this.ⵠΔⵠⲆΔⵠΔ = 0;
        this.ᐃⲆᐃᐃᐃ = 0;
        this.ⵠⲆΔⵠᐃⵠⲆ = 0;
        this.time = 0;
        this.Ⲇⵠⵠⵠᐃ = 0;
        this.ᐃΔⵠᐃⲆⵠΔ = 0;
        this.ΔΔⲆⵠᐃᐃᐃ = 0;
        this.ᐃΔⵠΔᐃⲆⵠ = 0;
        this.ΔⵠΔΔⲆⲆⵠ = 0;
        this.ᐃⵠⲆⲆⵠⵠⵠ = [];
        this.Δᐃᐃᐃⵠ = -1;
        this.ΔΔΔⲆᐃⲆΔ = -1;
        this.ᐃⵠΔⲆᐃᐃᐃ = -1;
        this.ⵠⵠᐃᐃΔᐃΔ = ks;
        this.ΔᐃᐃⲆⵠⲆΔ = undefined;
        this.ⵠⵠΔΔΔΔⲆ = -1;
        this.ᐃⵠᐃᐃⲆΔᐃ = -1;
        this.ᐃⵠⲆⲆΔᐃⲆ = -1;
        this.ΔⲆⲆⵠΔᐃᐃ = -1;
        this.ⲆⲆΔⵠᐃⲆΔ = Ih;
        this.ⲆⲆΔΔⵠⲆΔ = undefined;
        this.ᐃⵠΔΔⲆⲆΔ = undefined;
        this.ᐃⵠΔᐃⲆⵠᐃ = Mq;
        this.ᐃΔΔΔⲆⵠᐃ = undefined;
        this.ᐃⵠΔⵠⵠᐃⲆ = sl;
        this.ᐃⲆⵠⵠᐃᐃⲆ = undefined;
        this.ⵠΔⵠΔΔᐃᐃ = undefined;
        this.ΔⵠᐃᐃⵠⲆⵠ = Io;
        this.ᐃⲆΔⲆⲆⲆⲆ = 3;
        this.ⲆⵠΔⲆ = 0;
        this.ᐃⵠᐃᐃⲆᐃⵠᐃΔ = Sg;
        this.ⵠⲆᐃⵠⲆ = ΔⲆⲆΔ.get("starve_quality") ? ΔⲆⲆΔ.get("starve_quality") : "high";
        if (this.ⵠⲆᐃⵠⲆ === "high") {
            document.getElementById("high_ing").style.backgroundColor = "#B56D18";
            document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
            this.ⵠⲆᐃⵠⲆ = 1;
        } else {
            document.getElementById("low_ing").style.backgroundColor = "#B56D18";
            document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
            this.ⵠⲆᐃⵠⲆ = 0;
        }
        this.ΔⵠⵠᐃⵠΔⵠΔⲆ = function () {
            document.getElementById("high_ing").style.backgroundColor = "#B56D18";
            document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
            ΔⲆⲆΔ.set("starve_quality", "high", {
                expires: 30
            });
            document.getElementById("input_ratio").value = 1;
            Gx.ⵠⵠΔᐃⵠᐃⲆ();
            Ax.ⵠⲆᐃⵠⲆ = 1;
        };
        this.ᐃⲆᐃⵠΔⵠⲆΔⵠ = function () {
            document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
            document.getElementById("low_ing").style.backgroundColor = "#B56D18";
            ΔⲆⲆΔ.set("starve_quality", "low", {
                expires: 30
            });
            document.getElementById("input_ratio").value = 0.5 / (Pq / Qq);
            Gx.ⵠⵠΔᐃⵠᐃⲆ();
            Ax.ⵠⲆᐃⵠⲆ = 0;
        };
        if (ΔⲆⲆΔ.get("starve_mapping") === undefined && fr === "FR") {
            Ix.ⲆⵠⵠΔᐃⵠᐃ();
            this.mapping = "azerty";
        } else {
            this.mapping = ΔⲆⲆΔ.get("starve_mapping") ? ΔⲆⲆΔ.get("starve_mapping") : "qwerty";
        }
        if (this.mapping == "azerty") {
            Ix.ⲆⵠⵠΔᐃⵠᐃ();
            document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
        } else {
            document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
        }
        this.ⲆⵠⵠΔᐃⵠᐃ = function () {
            Ix.ⲆⵠⵠΔᐃⵠᐃ();
            document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
            ΔⲆⲆΔ.set("starve_mapping", "azerty", {
                expires: 30
            });
        };
        this.ⵠⵠⲆᐃΔⲆΔ = function () {
            Ix.ⵠⵠⲆᐃΔⲆΔ();
            document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
            document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
            ΔⲆⲆΔ.set("starve_mapping", "qwerty", {
                expires: 30
            });
        };
        this.ᐃᐃⲆᐃⵠⵠΔ = {
            id: document.getElementById("all_rights_reserved"),
            style: document.getElementById("all_rights_reserved").style,
            translate: {
                y: 0,
                x: 0
            },
            ⲆΔᐃ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        t();
        this.unlock = {};
        this.unlock.ⵠᐃⵠᐃ = [];
        this.unlock.ᐃᐃⵠᐃⲆ = [];
        this.unlock.ΔᐃᐃᐃΔ = [];
        this.unlock.ᐃⲆⲆⲆⲆ = [];
        this.unlock.ᐃⵠⵠΔΔ = [];
        this.unlock.ᐃⵠᐃⲆΔ = [];
        this.ⵠⲆᐃⲆᐃᐃⵠ = 0;
        this.ⵠⵠΔⲆⵠᐃⲆ = i;
        i();
        this.ⵠᐃⵠⲆⲆ = {
            id: document.getElementById("trevda"),
            style: document.getElementById("trevda").style,
            translate: {
                x: 0,
                y: 0
            },
            ⲆΔᐃ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        var n;
        var o = 0;
        function r() {
            j.ⲆΔᐃ();
            if (++o == 30) {
                j.ⵠⲆⵠⲆⲆⲆⲆ();
                j.ⲆⲆⵠⵠΔᐃⲆ = xq;
                j.ⲆΔᐃ();
                return;
            }
            Hf.setTimeout(r, 33);
        }
        this.ⲆⲆⵠᐃᐃ = function (a) {
            n = a;
            j.ᐃᐃᐃⲆⵠⵠᐃ();
            j.ⲆⲆⵠⵠΔᐃⲆ = 0;
            l = -1;
            w();
        };
        var l = -1;
        function w() {
            j.ⲆΔᐃ();
            if (++l == 30) {
                ΔⲆⲆΔ.set("starve_nickname", j.ⲆⲆⲆⲆΔ.input.value, {
                    expires: 30
                });
                j.ⲆⲆⲆⲆΔ.style.display = "none";
                j.ᐃΔᐃⲆⵠ.style.display = "none";
                j.ΔΔⵠΔⲆᐃᐃ.style.display = "none";
                j.ᐃᐃⲆᐃⵠⵠΔ.style.display = "none";
                j.ⵠᐃⵠⲆⲆ.style.display = "none";
                j.stop();
                n();
                return;
            }
            Hf.setTimeout(w, 33);
        }
        this.ΔΔΔᐃⵠ = false;
        this.stop = function () {
            this.ΔΔΔᐃⵠ = eo;
        };
        this.ᐃΔᐃⲆΔ = function () {
            Qx();
            document.getElementById("game_body").style.backgroundColor = Hr.ᐃᐃΔⲆⲆ[Cx.time];
            j.ⲆⲆⲆⲆΔ.style.display = "inline-block";
            j.ᐃΔᐃⲆⵠ.style.display = "inline-block";
            j.ΔΔⵠΔⲆᐃᐃ.style.display = "inline-block";
            j.ᐃᐃⲆᐃⵠⵠΔ.style.display = "inline-block";
            j.ⵠᐃⵠⲆⲆ.style.display = "inline-block";
            j.waiting = et;
            j.ΔΔΔᐃⵠ = Jg;
            l = -1;
            o = 0;
            r();
        };
        this.ⵠᐃⵠⲆⲆⵠΔ = function (a, b) {
            b = b < 0 ? -b : b;
            if ((a.position & ba) === ba) {
                if (Y === (a.position & Y)) {
                    a.translate.x = oo + a.translate.ᐃᐃᐃⲆΔ - b;
                } else if ((a.position & Z) === Z) {
                    a.translate.x = oo + a.translate.ᐃᐃᐃⲆΔ + b;
                } else {
                    a.translate.x = oo + a.translate.ᐃᐃᐃⲆΔ;
                }
            } else if (Y === (a.position & Y)) {
                a.translate.x = a.translate.ᐃᐃᐃⲆΔ - b;
            } else if ((a.position & Z) === Z) {
                a.translate.x = io - a.translate.ᐃᐃᐃⲆΔ + b;
            } else {
                a.translate.x = a.translate.ᐃᐃᐃⲆΔ;
            }
            if (ca === (a.position & ca)) {
                if (_ === (a.position & _)) {
                    a.translate.y = to + a.translate.ΔᐃⵠᐃⲆ - b;
                } else if (aa === (a.position & aa)) {
                    a.translate.y = to + a.translate.ΔᐃⵠᐃⲆ + b;
                } else {
                    a.translate.y = to + a.translate.ΔᐃⵠᐃⲆ;
                }
            } else if (_ === (a.position & _)) {
                a.translate.y = a.translate.ΔᐃⵠᐃⲆ - b;
            } else if ((a.position & aa) === aa) {
                a.translate.y = no + a.translate.ΔᐃⵠᐃⲆ + b;
            } else {
                a.translate.y = a.translate.ΔᐃⵠᐃⲆ;
            }
            if (a.style !== undefined) {
                a.style.left = Math.floor(a.translate.x) + "px";
                a.style.top = Math.floor(a.translate.y) + "px";
            }
        };
        this.ⲆΔᐃ = function () {
            var a = 0;
            if (o != 30 || l != -1) {
                if (o != 30) {
                    a = 1500 / (o + 1) - 50;
                }
                if (l != -1) {
                    a = -(1750 / (30 - l + 1) - 48);
                }
            }
            for (var b = 0; b < this.ⵠⲆⵠⵠ.length; b++) {
                this.ⵠᐃⵠⲆⲆⵠΔ(this.ⵠⲆⵠⵠ[b], a);
            }
            for (b = 0; this.buttons.length > b; b++) {
                this.ⵠᐃⵠⲆⲆⵠΔ(this.buttons[b].info, a);
            }
            for (b = 0; b < this.ᐃⵠΔⲆⲆ.length; b++) {
                this.ⵠᐃⵠⲆⲆⵠΔ(this.ᐃⵠΔⲆⲆ[b], a);
            }
            this.ⲆΔⲆΔⵠⲆⲆ.translate.x = (io - this.ⲆΔⲆΔⵠⲆⲆ.Ⲇᐃ.width) / 2;
            this.ⲆΔⲆΔⵠⲆⲆ.translate.y = 0;
            this.ΔΔⵠΔⲆᐃᐃ.translate.x = io - 450;
            this.ΔΔⵠΔⲆᐃᐃ.translate.y = no - 40;
            this.ᐃᐃⲆᐃⵠⵠΔ.translate.x = io - 340;
            this.ᐃᐃⲆᐃⵠⵠΔ.translate.y = no - 25;
            this.ⵠᐃⵠⲆⲆ.translate.x = io - 320;
            this.ⵠᐃⵠⲆⲆ.translate.y = 80;
            if (o != 30 || l != -1) {
                var c = 0;
                if (o != 30) {
                    c = 1500 / (o + 1) - 50;
                }
                if (l != -1) {
                    c = -(1750 / (30 - l + 1) - 48);
                }
                this.ⲆΔⲆΔⵠⲆⲆ.translate.y -= c > 0 ? c : -c;
                this.ΔΔⵠΔⲆᐃᐃ.translate.y -= c < 0 ? c : -c;
                this.ᐃᐃⲆᐃⵠⵠΔ.translate.y -= c < 0 ? c : -c;
            }
            this.ΔΔⵠΔⲆᐃᐃ.ⲆΔᐃ();
            this.ᐃᐃⲆᐃⵠⵠΔ.ⲆΔᐃ();
            this.ⵠᐃⵠⲆⲆ.ⲆΔᐃ();
        };
        this.ⵠⲆᐃⵠΔⲆⵠ = function (b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = 342;
            c.height = 342;
            var e = -Math.PI / 2;
            for (var f = 0; b.length > f; f++) {
                var g = b[f][0];
                var h = b[f][1] * Math.PI / 180;
                d.beginPath();
                d.arc(171, 171, 170, e, e + h, false);
                d.lineTo(171, 171);
                d.fillStyle = g;
                d.fill();
                e += h;
            }
            return c;
        };
        this.ⲆᐃΔΔⵠᐃΔⲆΔ = function () {
            this.ᐃⲆⵠΔᐃⲆᐃ = document.getElementById("account_nickname_input").value;
            if (this.ΔⵠⵠΔᐃΔⲆ !== this.ᐃⲆⵠΔᐃⲆᐃ) {
                this.ΔⵠⵠΔᐃΔⲆ = this.ᐃⲆⵠΔᐃⲆᐃ;
                this.ᐃΔⲆⲆⵠΔᐃ = Ef(this.ᐃⲆⵠΔᐃⲆᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
            }
        };
        this.ⵠⲆⲆⵠ = function () {
            Tp();
            Ax.ⵠⲆΔᐃⲆⵠⵠ = ⵠΔⲆⵠ.ⲆᐃⲆΔⵠᐃΔ(Ax.ⵠⲆΔᐃⲆⵠⵠ, Ax.ⲆᐃᐃⵠⲆⲆΔ, 0.03);
            this.ⵠⲆⵠⵠ[ⵠΔⵠⲆᐃⵠⲆ].translate.x = this.ⵠⲆⵠⵠ[0].translate.x + -72 + Ax.ⵠⲆΔᐃⲆⵠⵠ * 165;
            this.ⵠⲆⵠⵠ[ⵠΔⵠⲆᐃⵠⲆ].translate.ᐃᐃᐃⲆΔ = this.ⵠⲆⵠⵠ[ⵠΔⵠⲆᐃⵠⲆ].translate.x;
            this.ⵠⲆⵠⵠ[ⵠΔⵠⲆᐃⵠⲆ].translate.y = this.ⵠⲆⵠⵠ[0].translate.y + 30;
            this.ⵠⲆⵠⵠ[ⵠΔⵠⲆᐃⵠⲆ].translate.ΔᐃⵠᐃⲆ = this.ⵠⲆⵠⵠ[ⵠΔⵠⲆᐃⵠⲆ].translate.y;
            for (var f = 2; f < this.ⵠⲆⵠⵠ.length; f++) {
                if (ha === this.ⵠⲆⵠⵠ[f].active) {
                    this.ⵠⲆⵠⵠ[f].ⵠⲆⲆⵠ(g);
                }
            }
            if ((V = this.Δᐃᐃᐃⵠ - Date.now()) > 0) {
                var i = Math.floor(V / 60000);
                var t = Math.floor(i / 60);
                if ((i %= 60) !== this.ᐃⵠΔⲆᐃᐃᐃ) {
                    this.ᐃⵠΔⲆᐃᐃᐃ = i;
                    i = i < 10 ? "0" + i : "" + i;
                    j.ⵠⵠᐃᐃΔᐃΔ = Ef(i, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (this.ΔΔΔⲆᐃⲆΔ !== t) {
                    this.ΔΔΔⲆᐃⲆΔ = t;
                    t = t < 10 ? "0" + t : "" + t;
                    j.ΔᐃᐃⲆⵠⲆΔ = Ef(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                (W = this.ⵠⲆⵠⵠ[ᐃᐃⵠⵠⵠᐃⲆ]).ⵠⲆⲆⵠ(g);
                var U = this.ΔᐃᐃⲆⵠⲆΔ;
                Vp(g, U, W.translate.x - U.width / 4 + 182, W.translate.y - U.height / 4 + 40, U.width / 2, U.height / 2);
                U = this.ⵠⵠᐃᐃΔᐃΔ;
                Vp(g, U, W.translate.x - U.width / 4 + 251, W.translate.y - U.height / 4 + 40, U.width / 2, U.height / 2);
            }
            var V = this.ⵠⵠΔΔΔΔⲆ - Date.now();
            if (V > 0) {
                i = Math.floor(V / 60000);
                t = Math.floor(i / 60);
                var W;
                var X = Math.floor(t / 24);
                i %= 60;
                t %= 24;
                if (this.ΔⲆⲆⵠΔᐃᐃ !== i) {
                    this.ΔⲆⲆⵠΔᐃᐃ = i;
                    i = i < 10 ? "0" + i : "" + i;
                    j.ⲆⲆΔⵠᐃⲆΔ = Ef(i, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (this.ᐃⵠⲆⲆΔᐃⲆ !== t) {
                    this.ᐃⵠⲆⲆΔᐃⲆ = t;
                    t = t < 10 ? "0" + t : "" + t;
                    j.ⲆⲆΔΔⵠⲆΔ = Ef(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (this.ᐃⵠᐃᐃⲆΔᐃ !== X) {
                    this.ᐃⵠᐃᐃⲆΔᐃ = X;
                    X = X < 10 ? "0" + X : "" + X;
                    j.ᐃⵠΔΔⲆⲆΔ = Ef(X, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                (W = this.ⵠⲆⵠⵠ[ΔⲆⲆⲆⲆⵠΔ]).ⵠⲆⲆⵠ(g);
                U = this.ᐃⵠΔΔⲆⲆΔ;
                Vp(g, U, W.translate.x - U.width / 4 + 113, W.translate.y - U.height / 4 + 40, U.width / 2, U.height / 2);
                U = this.ⲆⲆΔΔⵠⲆΔ;
                Vp(g, U, W.translate.x - U.width / 4 + 182, W.translate.y - U.height / 4 + 40, U.width / 2, U.height / 2);
                U = this.ⲆⲆΔⵠᐃⲆΔ;
                Vp(g, U, W.translate.x - U.width / 4 + 251, W.translate.y - U.height / 4 + 40, U.width / 2, U.height / 2);
            }
            if (F === (this.ⵠΔᐃᐃΔ & F)) {
                this.buttons[ⲆΔⲆΔᐃᐃⵠ].info.state = Bf;
            } else if ((this.ⵠΔᐃᐃΔ & I) === I) {
                this.buttons[ᐃⵠᐃᐃᐃⲆⵠ].info.state = Bf;
            } else if ((this.ⵠΔᐃᐃΔ & m) === m) {
                this.buttons[ᐃⵠⵠⲆΔΔΔ].info.state = Bf;
            } else if (v === (this.ⵠΔᐃᐃΔ & v)) {
                this.buttons[ΔᐃᐃⲆⵠᐃΔ].info.state = Bf;
            } else if ((this.ⵠΔᐃᐃΔ & C) === C) {
                this.buttons[ᐃᐃᐃᐃⲆⵠᐃ].info.state = Bf;
            } else if (c === (this.ⵠΔᐃᐃΔ & c)) {
                this.buttons[ΔΔΔⲆⵠⵠᐃ].info.state = Bf;
            } else if (p === (this.ⵠΔᐃᐃΔ & p) || k === (this.ⵠΔᐃᐃΔ & k) || A === (this.ⵠΔᐃᐃΔ & A) || x === (this.ⵠΔᐃᐃΔ & x) || (this.ⵠΔᐃᐃΔ & J) === J || M === (this.ⵠΔᐃᐃΔ & M) || B === (this.ⵠΔᐃᐃΔ & B)) {
                this.buttons[Ⲇᐃⵠᐃᐃᐃⵠ].info.state = Bf;
            } else if (D === (this.ⵠΔᐃᐃΔ & D) || R === (this.ⵠΔᐃᐃΔ & R) || (this.ⵠΔᐃᐃΔ & E) === E || (this.ⵠΔᐃᐃΔ & Q) === Q || (this.ⵠΔᐃᐃΔ & S) === S || L === (this.ⵠΔᐃᐃΔ & L)) {
                this.buttons[ᐃⵠⵠⲆΔΔΔ].info.state = Bf;
            } else if ((this.ⵠΔᐃᐃΔ & O) === O || (this.ⵠΔᐃᐃΔ & N) === N || (this.ⵠΔᐃᐃΔ & q) === q) {
                this.buttons[ⵠΔⵠⵠⵠΔⵠ].info.state = Bf;
            } else if (H === (this.ⵠΔᐃᐃΔ & H)) {
                this.buttons[ΔᐃᐃⲆⵠᐃΔ].info.state = Bf;
            }
            if ((this.ⵠΔᐃᐃΔ & I) === I) {
                if (this.ᐃⲆⵠⵠᐃᐃⲆ === this.ᐃⵠΔⲆⵠΔΔ) {
                    this.ᐃⵠΔⵠⵠᐃⲆ = this.ΔⲆⲆΔᐃⵠΔ;
                    this.buttons[this.ΔⲆⲆΔᐃⵠΔ].info.active = fa;
                    this.buttons[this.ⵠⵠΔᐃⲆⵠⵠ].info.active = fa;
                    this.buttons[this.ⵠΔⵠᐃᐃⲆᐃ].info.active = fa;
                } else {
                    this.buttons[this.ΔⲆⲆΔᐃⵠΔ].info.active = ha;
                    this.buttons[this.ⵠⵠΔᐃⲆⵠⵠ].info.active = ha;
                    this.buttons[this.ⵠΔⵠᐃᐃⲆᐃ].info.active = ha;
                }
                if (this.ᐃⲆⵠΔⲆⲆⵠ === this.ᐃⲆⵠⵠᐃᐃⲆ) {
                    this.buttons[this.ᐃⲆⵠΔⲆⲆⵠ].info.state = Bf;
                } else if (this.ΔΔⲆᐃⲆΔᐃ === this.ᐃⲆⵠⵠᐃᐃⲆ) {
                    this.buttons[this.ΔΔⲆᐃⲆΔᐃ].info.state = Bf;
                } else if (this.ᐃⲆⵠⵠᐃᐃⲆ === this.ᐃⵠΔⲆⵠΔΔ) {
                    this.buttons[this.ᐃⵠΔⲆⵠΔΔ].info.state = Bf;
                } else if (this.ΔⲆⲆᐃᐃⵠΔ === this.ᐃⲆⵠⵠᐃᐃⲆ) {
                    this.buttons[this.ΔⲆⲆᐃᐃⵠΔ].info.state = Bf;
                } else if (this.ᐃⲆⵠⵠᐃᐃⲆ === this.ⲆⲆⲆᐃΔⵠΔ) {
                    this.buttons[this.ⲆⲆⲆᐃΔⵠΔ].info.state = Bf;
                }
                if (this.ΔⲆⲆΔᐃⵠΔ === this.ᐃⵠΔⵠⵠᐃⲆ) {
                    this.buttons[this.ΔⲆⲆΔᐃⵠΔ].info.state = Bf;
                } else if (this.ᐃⵠΔⵠⵠᐃⲆ === this.ⵠⵠΔᐃⲆⵠⵠ) {
                    this.buttons[this.ⵠⵠΔᐃⲆⵠⵠ].info.state = Bf;
                } else if (this.ⵠΔⵠᐃᐃⲆᐃ === this.ᐃⵠΔⵠⵠᐃⲆ) {
                    this.buttons[this.ⵠΔⵠᐃᐃⲆᐃ].info.state = Bf;
                }
                if (this.ⲆΔⲆⵠⲆΔⲆ === this.ⵠΔⵠΔΔᐃᐃ) {
                    this.buttons[this.ⲆΔⲆⵠⲆΔⲆ].info.state = Bf;
                } else if (this.ΔΔΔᐃⲆᐃΔ === this.ⵠΔⵠΔΔᐃᐃ) {
                    this.buttons[this.ΔΔΔᐃⲆᐃΔ].info.state = Bf;
                } else if (this.ⵠΔⵠΔΔᐃᐃ === this.ⵠⵠⲆⲆΔⵠⲆ) {
                    this.buttons[this.ⵠⵠⲆⲆΔⵠⲆ].info.state = Bf;
                }
                if (this.ΔⵠᐃᐃⵠⲆⵠ === this.ⲆΔⵠΔᐃᐃᐃ) {
                    this.buttons[this.ⲆΔⵠΔᐃᐃᐃ].info.state = Bf;
                } else if (this.ⵠΔⵠΔⵠΔⵠ === this.ΔⵠᐃᐃⵠⲆⵠ) {
                    this.buttons[this.ⵠΔⵠΔⵠΔⵠ].info.state = Bf;
                } else if (this.ΔΔᐃᐃΔⵠⵠ === this.ΔⵠᐃᐃⵠⲆⵠ) {
                    this.buttons[this.ΔΔᐃᐃΔⵠⵠ].info.state = Bf;
                } else if (this.ΔᐃᐃⵠⵠⵠΔ === this.ΔⵠᐃᐃⵠⲆⵠ) {
                    this.buttons[this.ΔᐃᐃⵠⵠⵠΔ].info.state = Bf;
                } else if (this.ΔⵠᐃᐃⵠⲆⵠ === this.ⵠⲆΔΔⵠⲆᐃ) {
                    this.buttons[this.ⵠⲆΔΔⵠⲆᐃ].info.state = Bf;
                } else if (this.ΔⵠᐃᐃⵠⲆⵠ === this.ⲆᐃⲆᐃⵠⵠⵠ) {
                    this.buttons[this.ⲆᐃⲆᐃⵠⵠⵠ].info.state = Bf;
                }
            }
            if ((this.ⵠΔᐃᐃΔ & v) === v) {
                if (this.ⵠΔΔΔⵠⵠⲆ === -1) {
                    this.buttons[za].info.state = Bf;
                } else if (this.ⵠΔΔΔⵠⵠⲆ === 0) {
                    this.buttons[Aa].info.state = Bf;
                } else if (this.ⵠΔΔΔⵠⵠⲆ === 2) {
                    this.buttons[Ca].info.state = Bf;
                } else if (this.ⵠΔΔΔⵠⵠⲆ === 3) {
                    this.buttons[Da].info.state = Bf;
                } else if (this.ⵠΔΔΔⵠⵠⲆ === 4) {
                    this.buttons[Ba].info.state = Bf;
                }
                if (this.ᐃⲆΔⲆⲆⲆⲆ === 0) {
                    this.buttons[ta].info.state = Bf;
                } else if (this.ᐃⲆΔⲆⲆⲆⲆ === 1) {
                    this.buttons[ua].info.state = Bf;
                } else if (this.ᐃⲆΔⲆⲆⲆⲆ === 2) {
                    this.buttons[va].info.state = Bf;
                } else if (this.ᐃⲆΔⲆⲆⲆⲆ === 3) {
                    this.buttons[wa].info.state = Bf;
                } else if (this.ᐃⲆΔⲆⲆⲆⲆ === 4) {
                    this.buttons[xa].info.state = Bf;
                } else if (this.ᐃⲆΔⲆⲆⲆⲆ === 5) {
                    this.buttons[ya].info.state = Bf;
                }
            }
            if (F === (this.ⵠΔᐃᐃΔ & F) && Δⵠⵠⵠ.ᐃᐃⲆΔΔᐃⵠ === 0) {
                if (this.buttons[la].ᐃⲆᐃᐃᐃⵠΔ(Jx.ⵠⵠⲆⲆ)) {
                    this.buttons[la].hint = Math.min(1, this.buttons[la].hint + Lx * 1.5);
                } else {
                    this.buttons[la].hint = Math.max(0, this.buttons[la].hint - Lx * 1.5);
                }
                if (this.buttons[ma].ᐃⲆᐃᐃᐃⵠΔ(Jx.ⵠⵠⲆⲆ)) {
                    this.buttons[ma].hint = Math.min(1, this.buttons[ma].hint + Lx * 1.5);
                } else {
                    this.buttons[ma].hint = Math.max(0, this.buttons[ma].hint - Lx * 1.5);
                }
                if (this.buttons[oa].ᐃⲆᐃᐃᐃⵠΔ(Jx.ⵠⵠⲆⲆ)) {
                    this.buttons[oa].hint = Math.min(1, this.buttons[oa].hint + Lx * 1.5);
                } else {
                    this.buttons[oa].hint = Math.max(0, this.buttons[oa].hint - Lx * 1.5);
                }
                if (this.buttons[ra].ᐃⲆᐃᐃᐃⵠΔ(Jx.ⵠⵠⲆⲆ)) {
                    this.buttons[ra].hint = Math.min(1, this.buttons[ra].hint + Lx * 1.5);
                } else {
                    this.buttons[ra].hint = Math.max(0, this.buttons[ra].hint - Lx * 1.5);
                }
                if (this.buttons[pa].ᐃⲆᐃᐃᐃⵠΔ(Jx.ⵠⵠⲆⲆ)) {
                    this.buttons[pa].hint = Math.min(1, this.buttons[pa].hint + Lx * 1.5);
                } else {
                    this.buttons[pa].hint = Math.max(0, this.buttons[pa].hint - Lx * 1.5);
                }
                if (this.buttons[qa].ᐃⲆᐃᐃᐃⵠΔ(Jx.ⵠⵠⲆⲆ)) {
                    this.buttons[qa].hint = Math.min(1, this.buttons[qa].hint + Lx * 1.5);
                } else {
                    this.buttons[qa].hint = Math.max(0, this.buttons[qa].hint - Lx * 1.5);
                }
            }
            var Y = 1;
            if ((this.ⵠΔᐃᐃΔ & (k | A | x | J | M | B)) > 1) {
                U = ᐃⲆ.ⵠΔΔᐃΔᐃΔ;
                g.save();
                g.translate(oo, ka + U.height / 4);
                if (this.ΔⵠᐃΔⲆ === 1) {
                    this.ᐃⵠΔᐃⵠΔⲆ += Lx / 3;
                    Y = this.ΔⲆⲆΔΔⲆΔ - 100 / Math.pow(1 + this.ᐃⵠΔᐃⵠΔⲆ, 1 + this.ᐃⵠΔᐃⵠΔⲆ);
                    g.rotate(Y);
                }
                Vp(g, U, -U.width / 4, -U.height / 4, U.width / 2, U.height / 2);
                g.restore();
            }
            if (Δⵠⵠⵠ.ᐃᐃⲆΔΔᐃⵠ === 0) {
                if (Δⵠⵠⵠ.ⲆⵠⲆⵠΔ === 0) {
                    this.buttons[la].info.state = Bf;
                } else if (Δⵠⵠⵠ.ⲆⵠⲆⵠΔ === 4) {
                    this.buttons[ma].info.state = Bf;
                } else if (Δⵠⵠⵠ.ⲆⵠⲆⵠΔ === 2) {
                    this.buttons[pa].info.state = Bf;
                } else if (Δⵠⵠⵠ.ⲆⵠⲆⵠΔ === 3) {
                    this.buttons[qa].info.state = Bf;
                } else if (Δⵠⵠⵠ.ⲆⵠⲆⵠΔ === 6) {
                    this.buttons[oa].info.state = Bf;
                } else if (Δⵠⵠⵠ.ⲆⵠⲆⵠΔ === 7) {
                    this.buttons[ra].info.state = Bf;
                }
            }
            for (f = 1; f < this.buttons.length; f++) {
                if (this.buttons[f].info.active === ha) {
                    this.buttons[f].ⵠⲆⲆⵠ(g);
                }
            }
            this.ⵠⲆⵠⵠ[0].ⵠⲆⲆⵠ(g);
            if ((this.ⵠΔᐃᐃΔ & (T | G)) > 0) {
                U = this.ᐃΔⲆⲆⵠΔᐃ;
                Vp(g, U, oo - U.width / 4, 138, U.width / 2, U.height / 2);
            }
            var Z = Math.max(1, Math.min(18, Math.floor((Ax.ΔᐃⲆᐃᐃ + 3) / 2)));
            this.ⵠⲆⵠⵠ[Z].active = ha;
            this.ⵠⲆⵠⵠ[Z].ⵠⲆⲆⵠ(g);
            this.ⵠⲆⵠⵠ[Z].active = fa;
            this.buttons[0].ⵠⲆⲆⵠ(g);
            if ((this.ⵠΔᐃᐃΔ & (m | R | Q | D | S)) > 1) {
                var u = (this.ⵠΔᐃᐃΔ & (R | Q | D | S)) > 1 ? -190 : 0;
                U = ᐃΔ[29][this.ᐃᐃⵠᐃⲆ][this.ⵠⲆᐃⲆᐃᐃⵠ];
                Vp(g, U, oo - U.width / 4 + u, 183, U.width / 2, U.height / 2);
                this.ⲆⵠΔⲆ = (this.ⲆⵠΔⲆ + Lx * 1000) % 2000;
                var b = (this.ⲆⵠΔⲆ < 1000) * 4.5 ? this.ⲆⵠΔⲆ / 1000 : (2000 - this.ⲆⵠΔⲆ) / 1000;
                U = ᐃΔ[28][this.ΔᐃᐃᐃΔ][this.ⵠⲆᐃⲆᐃᐃⵠ];
                Vp(g, U, oo - U.width / 4 - 62 + b + u, 240, U.width / 2, U.height / 2);
                U = ᐃΔ[7][this.ⵠᐃⵠᐃ][this.ⵠⲆᐃⲆᐃᐃⵠ];
                Vp(g, U, oo - U.width / 4 - 54 + b + u, 272, U.width / 2, U.height / 2);
                Vp(g, U, oo - U.width / 4 + 54 - b + u, 272, U.width / 2, U.height / 2);
                U = ᐃΔ[255][this.ⵠᐃⵠᐃ][this.ⵠⲆᐃⲆᐃᐃⵠ];
                Vp(g, U, oo - U.width / 4 + u, 222, U.width / 2, U.height / 2);
                U = ᐃΔ[796][this.ᐃⵠᐃⲆΔ][this.ⵠⲆᐃⲆᐃᐃⵠ];
                Vp(g, U, oo - U.width / 4 + u, 222, U.width / 2, U.height / 2);
            }
            if ((this.ⵠΔᐃᐃΔ & m) === m) {
                U = ᐃΔ[250][this.ᐃⲆⲆⲆⲆ][this.ⵠⲆᐃⲆᐃᐃⵠ];
                Vp(g, U, oo - U.width / 4 - 61, 406 - U.height / 4, U.width / 2, U.height / 2);
                U = ᐃΔ[250][this.ᐃⵠⵠΔΔ][this.ⵠⲆᐃⲆᐃᐃⵠ];
                Vp(g, U, oo - U.width / 4 + 53, 406 - U.height / 4, U.width / 2, U.height / 2);
            }
            if ((this.ⵠΔᐃᐃΔ & E) === E) {
                U = ᐃΔ[250][this.ᐃⵠⵠΔΔ][this.ⵠⲆᐃⲆᐃᐃⵠ];
                Vp(g, U, oo - U.width / 4 - 200, 268 - U.height / 4, U.width / 2, U.height / 2);
            }
            if (L === (this.ⵠΔᐃᐃΔ & L)) {
                U = ᐃΔ[250][this.ᐃⲆⲆⲆⲆ][this.ⵠⲆᐃⲆᐃᐃⵠ];
                Vp(g, U, oo - U.width / 4 - 200, 268 - U.height / 4, U.width / 2, U.height / 2);
            }
            if ((this.ⵠΔᐃᐃΔ & (R | Q | D | S | E | L)) > 1) {
                for (f = 1; f < this.buttons.length; f++) {
                    if ((this.buttons[f].view & this.ⵠΔᐃᐃΔ) !== 0) {
                        var _ = this.buttons[f].info;
                        if (_.ΔΔΔⲆⲆΔⲆ >= 0) {
                            U = _.ⵠⵠⲆᐃΔᐃⵠⵠⲆ[_.ΔΔΔⲆⲆΔⲆ].Δⵠᐃ;
                            Vp(g, U, _.translate.x - U.width / 8 + 44.5, _.translate.y - U.height / 8 + 45.5, U.width / 4, U.height / 4);
                            if (_.ⲆⲆΔᐃⲆⲆΔ !== 1) {
                                U = ᐃⲆ.ΔΔΔⲆⵠⲆΔ;
                                Vp(g, U, _.translate.x - U.width / 4 + 44.5, _.translate.y - U.height / 4 + 44.5, U.width / 2, U.height / 2);
                            }
                        }
                    }
                }
                U = this.ᐃⵠΔᐃⲆⵠᐃ;
                Vp(g, U, oo - 312, 375, U.width / 2, U.height / 2);
                U = this.ᐃΔΔΔⲆⵠᐃ;
                Vp(g, U, oo - 312, 395, U.width / 2, U.height / 2);
            }
            if (this.ⲆΔΔⵠΔⲆⵠ !== this.ⵠⲆΔⲆⲆ) {
                this.ⲆΔΔⵠΔⲆⵠ = this.ⵠⲆΔⲆⲆ;
                this.ⵠⲆΔΔΔΔⵠ = Ef("" + this.ⵠⲆΔⲆⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
            }
            Vp(g, this.ⵠⲆΔΔΔΔⵠ, this.ⵠⲆⵠⵠ[0].translate.x + 350, 15, this.ⵠⲆΔΔΔΔⵠ.w2, this.ⵠⲆΔΔΔΔⵠ.ᐃᐃⵠⵠᐃ);
            if (this.ΔᐃⲆᐃᐃ !== this.ⲆᐃΔⵠΔⵠⲆ) {
                this.ⲆᐃΔⵠΔⵠⲆ = this.ΔᐃⲆᐃᐃ;
                this.ΔΔⵠⲆᐃⲆⲆ = Ef("LVL " + (this.ΔᐃⲆᐃᐃ + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, undefined, 30, 24, Mq, undefined, ks, Ol, "#3F3019", 20);
            }
            Vp(g, this.ΔΔⵠⲆᐃⲆⲆ, this.ⵠⲆⵠⵠ[0].translate.x + 94, 0, this.ΔΔⵠⲆᐃⲆⲆ.w2, this.ΔΔⵠⲆᐃⲆⲆ.ᐃᐃⵠⵠᐃ);
            if (Δⵠⵠⵠ.ᐃᐃⲆΔΔᐃⵠ === 0) {
                if ((aa = this.buttons[la].hint) > 0) {
                    U = ᐃⲆ.ᐃᐃⵠᐃᐃᐃᐃ;
                    Vp(g, U, oo - U.width / 4, -36 - ⵠΔⲆⵠ.ⵠΔⲆⵠⵠ(1 - aa) * U.height / 2, U.width / 2, U.height / 2);
                }
                if ((aa = this.buttons[ma].hint) > 0) {
                    U = ᐃⲆ.ᐃᐃΔⵠⵠⲆΔ;
                    Vp(g, U, oo - U.width / 4, -36 - ⵠΔⲆⵠ.ⵠΔⲆⵠⵠ(1 - aa) * U.height / 2, U.width / 2, U.height / 2);
                }
                if ((aa = this.buttons[oa].hint) > 0) {
                    U = ᐃⲆ.ⲆⲆⲆΔⵠᐃⲆ;
                    Vp(g, U, oo - U.width / 4, -36 - U.height * ⵠΔⲆⵠ.ⵠΔⲆⵠⵠ(1 - aa) / 2, U.width / 2, U.height / 2);
                }
                var aa = this.buttons[ra].hint;
                if (aa > 0) {
                    U = ᐃⲆ.ⵠᐃΔᐃᐃⲆⲆ;
                    Vp(g, U, oo - U.width / 4, -36 - U.height * ⵠΔⲆⵠ.ⵠΔⲆⵠⵠ(1 - aa) / 2, U.width / 2, U.height / 2);
                }
                aa = this.buttons[qa].hint;
                if (aa > 0) {
                    U = ᐃⲆ.ΔⲆⵠᐃᐃΔⲆ;
                    Vp(g, U, oo - U.width / 4, -36 - ⵠΔⲆⵠ.ⵠΔⲆⵠⵠ(1 - aa) * U.height / 2, U.width / 2, U.height / 2);
                }
                aa = this.buttons[pa].hint;
                if (aa > 0) {
                    U = ᐃⲆ.ΔⵠᐃΔⲆΔᐃ;
                    Vp(g, U, oo - U.width / 4, -36 - U.height * ⵠΔⲆⵠ.ⵠΔⲆⵠⵠ(1 - aa) / 2, U.width / 2, U.height / 2);
                }
            }
            if (this.ΔⵠᐃΔⲆ === 1 && Math.abs(Y - this.ΔⲆⲆΔΔⲆΔ) < 0.006) {
                g.globalAlpha = Math.min(1, this.ⵠⲆΔⵠᐃᐃΔ * 3);
                U = ᐃⲆ.ᐃᐃΔΔⲆⲆᐃ;
                g.save();
                g.translate(oo, 260);
                this.ⵠⲆΔⵠᐃᐃΔ += Lx;
                g.rotate(this.ⵠⲆΔⵠᐃᐃΔ);
                Vp(g, U, -U.width / 2, -U.height / 2, U.width, U.height);
                g.restore();
                b = 1.05 + Math.cos(this.ⵠⲆΔⵠᐃᐃΔ * 5) * 0.05;
                if (this.ᐃᐃΔⲆᐃᐃᐃ === 0) {
                    var ba = (U = ⲆᐃᐃΔ.ⵠⵠⲆᐃⲆ[this.ⲆΔΔᐃⲆⵠⲆ].Δⵠᐃ).width * b;
                    var ca = b * U.height;
                    Vp(g, U, oo - ba / 2, 260 - ca / 2, ba, ca);
                } else if (this.ᐃᐃΔⲆᐃᐃᐃ === 1) {
                    ba = (U = ⲆᐃᐃΔ.ⵠⵠⲆᐃⲆ[0].Δⵠᐃ).width * b;
                    ca = U.height * b;
                    Vp(g, U, oo - ba / 2, 260 - ca / 2, ba, ca);
                    ba = b * (U = ⲆᐃᐃΔ.ⵠᐃⲆⲆᐃ[this.ⲆΔΔᐃⲆⵠⲆ].Δⵠᐃ).width;
                    ca = U.height * b;
                    Vp(g, U, oo - ba / 2, 260 - ca / 2, ba, ca);
                } else if (this.ᐃᐃΔⲆᐃᐃᐃ === 2) {
                    ba = b * (U = ⲆᐃᐃΔ.ⲆΔⵠᐃ[this.ⲆΔΔᐃⲆⵠⲆ].Δⵠᐃ).width;
                    ca = U.height * b;
                    Vp(g, U, oo - ba / 2, 180 - ca / 2, ba, ca);
                    ba = b * (U = ⲆᐃᐃΔ.ⵠⵠⲆᐃⲆ[0].Δⵠᐃ).width;
                    ca = b * U.height;
                    Vp(g, U, oo - ba / 2, 260 - ca / 2, ba, ca);
                } else if (this.ᐃᐃΔⲆᐃᐃᐃ === 3) {
                    ba = (U = ⲆᐃᐃΔ.ⲆⵠⲆⲆⲆ[this.ⲆΔΔᐃⲆⵠⲆ].Δⵠᐃ).width * b;
                    ca = U.height * b;
                    g.save();
                    g.translate(oo, 260);
                    g.rotate(Math.PI);
                    Vp(g, U, -ba / 2, -ca / 2, ba, ca);
                    g.restore();
                } else if (this.ᐃᐃΔⲆᐃᐃᐃ === 4) {
                    ba = b * (U = ⲆᐃᐃΔ.ⲆⲆⲆⵠΔ[this.ⲆΔΔᐃⲆⵠⲆ].Δⵠᐃ).width;
                    ca = U.height * b;
                    Vp(g, U, oo - ba / 2, 260 - ca / 2, ba, ca);
                }
                U = this.ᐃⵠⵠⵠᐃⵠΔ;
                Vp(g, U, oo - U.width / 4, 340, U.width / 2, U.height / 2);
                U = this.ΔᐃΔⵠⲆⵠⵠ;
                Vp(g, U, oo - U.width / 4, 365, U.width / 2, U.height / 2);
                if (this.ⵠⲆΔⵠᐃᐃΔ > 6) {
                    this.ΔⵠᐃΔⲆ = 0;
                    K(p);
                }
                g.globalAlpha = 1;
            }
            Ex.alert.ⵠⲆⲆⵠ("#FFF", "#000");
            if (j.waiting) {
                this.ⲆΔⲆΔⵠⲆⲆ.ⵠⲆⲆⵠ();
            }
        };
        var b = 0;
        var F = Math.pow(2, b++);
        var v = Math.pow(2, b++);
        this.ⵠⵠⵠᐃⵠ = v;
        var c = Math.pow(2, b++);
        var m = Math.pow(2, b++);
        var p = Math.pow(2, b++);
        var C = Math.pow(2, b++);
        var I = Math.pow(2, b++);
        var f = Math.pow(2, b++);
        this.ᐃᐃⲆΔⲆ = f;
        var y = Math.pow(2, b++);
        var z = Math.pow(2, b++);
        var k = Math.pow(2, b++);
        var A = Math.pow(2, b++);
        var x = Math.pow(2, b++);
        var J = Math.pow(2, b++);
        var M = Math.pow(2, b++);
        var B = Math.pow(2, b++);
        var D = Math.pow(2, b++);
        var E = Math.pow(2, b++);
        var R = Math.pow(2, b++);
        var Q = Math.pow(2, b++);
        var S = Math.pow(2, b++);
        var L = Math.pow(2, b++);
        var G = Math.pow(2, b++);
        var T = Math.pow(2, b++);
        var O = Math.pow(2, b++);
        this.ⵠⲆΔⲆᐃ = O;
        var N = Math.pow(2, b++);
        this.ΔΔⵠⵠⲆ = N;
        var q = Math.pow(2, b++);
        this.ⲆⵠⵠᐃⲆ = q;
        var H = Math.pow(2, b++);
        function P(a, b, c) {
            for (var d = 0; d < j.ⵠⲆⵠⵠ.length; d++) {
                if (j.ⵠⲆⵠⵠ[d].view & a) {
                    j.ⵠⲆⵠⵠ[d].active = b;
                }
            }
            for (d = 0; j.buttons.length > d; d++) {
                if ((j.buttons[d].view & a) !== 0) {
                    j.buttons[d].info.active = b;
                }
            }
            for (d = 0; j.ᐃⵠΔⲆⲆ.length > d; d++) {
                if (j.ᐃⵠΔⲆⲆ[d].view & a) {
                    j.ᐃⵠΔⲆⲆ[d].style.display = c;
                }
            }
        }
        this.ⵠΔᐃᐃΔ = F;
        function K(a) {
            if (j.ⲆⲆⵠⵠΔᐃⲆ !== false) {
                P(y, fa, "none");
                P(z, fa, "none");
                U();
                if (j.ⵠΔᐃᐃΔ !== a && j.ΔⵠᐃΔⲆ < 1) {
                    j.ⵠᐃⵠⲆⲆ.style.display = F === a || a === p || a === v || I === a || m === a || C === a ? "inline-block" : "none";
                    P(j.ⵠΔᐃᐃΔ, fa, "none");
                    j.ⵠΔᐃᐃΔ = a;
                    P(j.ⵠΔᐃᐃΔ, ha, "inline-block");
                }
            }
        }
        function U() {
            var b = Number(ΔⲆⲆΔ.get("starve_crate"));
            var c = Number(ΔⲆⲆΔ.get("starve_dead"));
            var d = Number(ΔⲆⲆΔ.get("starve_book"));
            var e = Number(ΔⲆⲆΔ.get("starve_bag"));
            var f = Number(ΔⲆⲆΔ.get("starve_skin"));
            var g = Number(ΔⲆⲆΔ.get("starve_accessory"));
            if (Ax.unlock.ⵠᐃⵠᐃ[Ax.ⵠᐃⵠᐃ] <= 0) {
                Ax.ⵠᐃⵠᐃ = Ax.unlock.ⵠᐃⵠᐃ[f] > 0 ? f : 0;
            }
            if (Ax.unlock.ΔᐃᐃᐃΔ[Ax.ΔᐃᐃᐃΔ] <= 0) {
                Ax.ΔᐃᐃᐃΔ = Ax.unlock.ΔᐃᐃᐃΔ[d] > 0 ? d : 0;
            }
            if (Ax.unlock.ᐃⵠⵠΔΔ[Ax.ᐃⵠⵠΔΔ] <= 0) {
                Ax.ᐃⵠⵠΔΔ = Ax.unlock.ᐃⵠⵠΔΔ[c] > 0 ? c : 0;
            }
            if (Ax.unlock.ᐃⲆⲆⲆⲆ[Ax.ᐃⲆⲆⲆⲆ] <= 0) {
                Ax.ᐃⲆⲆⲆⲆ = Ax.unlock.ᐃⲆⲆⲆⲆ[b] > 0 ? b : 0;
            }
            if (Ax.unlock.ᐃⵠᐃⲆΔ[Ax.ᐃⵠᐃⲆΔ] <= 0) {
                Ax.ᐃⵠᐃⲆΔ = Ax.unlock.ᐃⵠᐃⲆΔ[g] > 0 ? g : 0;
            }
            if (Ax.unlock.ᐃᐃⵠᐃⲆ[Ax.ᐃᐃⵠᐃⲆ] <= 0) {
                Ax.ᐃᐃⵠᐃⲆ = Ax.unlock.ᐃᐃⵠᐃⲆ[e] > 0 ? e : 0;
            }
        }
        function V(a, b, c) {
            const d = new XMLHttpRequest();
            d.open("GET", a);
            d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            d.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    if (b !== ks) {
                        b(d.responseText);
                    }
                } else if (this.readyState == 4 && c !== undefined) {
                    c();
                }
            };
            d.send();
        }
        function W() {
            U();
            if (Px % 2) {
                console.log(undefined);
                Δⵠⵠⵠ.connect();
            } else {
                console.log(Io);
                if (Hf.Widget.isBlocked === 1) {
                    Hf.Widget.createAdPlayer(Δⵠⵠⵠ.connect.bind(Δⵠⵠⵠ), Δⵠⵠⵠ.connect.bind(Δⵠⵠⵠ));
                } else {
                    Hf.Widget.preroll();
                    Hf.Widget.play = Δⵠⵠⵠ.connect.bind(Δⵠⵠⵠ);
                }
            }
        }
        function X(a) {
            if (Qr !== Ex.ⵠᐃⵠᐃΔⵠΔ && Ex.ᐃⲆⲆⵠᐃⲆᐃ !== undefined && Ex.ΔⲆⲆⲆⲆᐃⲆ !== undefined) {
                a();
            }
        }
        this.ⲆᐃᐃᐃᐃⲆⲆ = 0;
        this.ᐃᐃᐃⲆ = K;
        this.ⲆⲆⵠⲆΔⵠΔ = function (b, a) {
            let c = 0;
            let d = "0";
            if ($x) {
                d = $x + "0";
            }
            if (Ex.ⵠᐃⵠᐃΔⵠΔ) {
                X(b);
            } else {
                V(`${Tx}token?id=${d}`, function (d) {
                    if (c === 1) {
                        return;
                    }
                    const e = d.split("_");
                    const f = e[0] + "_";
                    const g = Number(e[1]);
                    const a = Math.abs(function (a) {
                        return xk(a, 8260, 46947, 8004, 37330, 5330);
                    }(g));
                    Ex.ⵠᐃⵠᐃΔⵠΔ = f + a;
                    X(b);
                }, function () {
                    if (c !== 1) {
                        if (a === 1) {
                            c = 1;
                            b();
                            return;
                        } else {
                            j.waiting = tr;
                            return;
                        }
                    }
                });
            }
            V(`${Ux}get`, function (d) {
                if (c === 1) {
                    return;
                }
                const e = d.split("_");
                const f = e[0] + "_";
                const g = Number(e[1]);
                const a = Math.abs(lb(g));
                Ex.ᐃⲆⲆⵠᐃⲆᐃ = f + a;
                Ex.ⵠΔⲆΔⲆΔΔ = a;
                X(b);
            }, function () {
                if (c !== 1) {
                    if (a === 1) {
                        c = 1;
                        b();
                        return;
                    } else {
                        j.waiting = na;
                        return;
                    }
                }
            });
            V(`${Ux}set`, function (d) {
                if (c === 1) {
                    return;
                }
                const e = d.split("_");
                const f = e[0] + "_";
                const g = Number(e[1]);
                const a = Math.abs(function (a) {
                    return function (a, b) {
                        Fj(Db, a, b);
                        const c = Yq(Ib[0], Ib[1], Ib[0], Ib[1], Ib[0], Ib[1]);
                        mb(Ib[0], Ib[1], Ib[0], Ib[1], Ib[0]);
                        return ~(c & 1096) & 1096 | ~(c & 1096) & c;
                    }(a, 7342);
                }(g));
                Ex.ΔⲆⲆⲆⲆᐃⲆ = f + a;
                Ex.ΔΔΔⵠⵠⲆⵠᐃᐃ = a;
                X(b);
            }, function () {
                if (c !== 1) {
                    if (a === 1) {
                        c = 1;
                        b();
                        return;
                    } else {
                        j.waiting = false;
                        return;
                    }
                }
            });
        };
        this.ᐃⲆⵠΔⲆΔᐃ = function () {
            if (tr === j.waiting) {
                Ex.reconnect.enabled = false;
                j.waiting = dr;
                j.ⲆⲆⵠⲆΔⵠΔ(W);
            }
        };
        var Y = 1;
        var Z = 2;
        var _ = 4;
        var aa = 8;
        var ba = 16;
        var ca = 32;
        var da = 0;
        var ea = 1;
        var fa = 0;
        var ha = 1;
        if (Hf.innerWidth < 1300) {
            this.ⲆⲆⲆⲆΔ = {
                id: document.getElementById("nickname_block"),
                style: document.getElementById("nickname_block").style,
                input: document.getElementById("nickname_input"),
                active: ha,
                position: _ | Y,
                view: F,
                translate: {
                    x: 0,
                    y: 0,
                    ΔᐃⵠᐃⲆ: 184,
                    ᐃᐃᐃⲆΔ: 200
                }
            };
        } else {
            this.ⲆⲆⲆⲆΔ = {
                id: document.getElementById("nickname_block"),
                style: document.getElementById("nickname_block").style,
                input: document.getElementById("nickname_input"),
                active: ha,
                position: _ | ba,
                view: F,
                translate: {
                    x: 0,
                    ᐃᐃᐃⲆΔ: -180,
                    y: 0,
                    ΔᐃⵠᐃⲆ: 184
                }
            };
        }
        this.ⲆⲆⲆⲆΔ.id.addEventListener("keyup", function (a) {
            a.preventDefault();
            if (a.keyCode == 13 && !j.waiting && !j.ᐃⵠᐃᐃⲆᐃⵠᐃΔ) {
                j.ᐃⲆⵠΔⲆΔᐃ();
            }
        });
        this.ⲆⲆⲆⲆΔ.input.value = ΔⲆⲆΔ.get("starve_nickname") ? ΔⲆⲆΔ.get("starve_nickname") : "";
        this.ⲆᐃΔΔΔΔⵠᐃⵠ = {
            id: document.getElementById("account_nickname_block"),
            style: document.getElementById("account_nickname_block").style,
            input: document.getElementById("account_nickname_input"),
            active: fa,
            position: _ | ba,
            view: v,
            translate: {
                y: 0,
                x: 0,
                ΔᐃⵠᐃⲆ: 110,
                ᐃᐃᐃⲆΔ: -122
            }
        };
        if (Hf.innerWidth < 1300) {
            this.ᐃΔᐃⲆⵠ = {
                id: document.getElementById("servselect"),
                style: document.getElementById("servselect").style,
                active: ha,
                position: _ | Y,
                view: F,
                translate: {
                    ᐃᐃᐃⲆΔ: 208,
                    y: 0,
                    ΔᐃⵠᐃⲆ: 225,
                    x: 0
                }
            };
        } else {
            this.ᐃΔᐃⲆⵠ = {
                id: document.getElementById("servselect"),
                style: document.getElementById("servselect").style,
                active: ha,
                position: _ | ba,
                view: F,
                translate: {
                    y: 0,
                    ᐃᐃᐃⲆΔ: -180,
                    ΔᐃⵠᐃⲆ: 225,
                    x: 0
                }
            };
        }
        this.ΔⲆΔⲆΔ = {
            id: document.getElementById("leaderboard"),
            style: document.getElementById("leaderboard").style,
            active: fa,
            position: _ | ba,
            view: I,
            translate: {
                ᐃᐃᐃⲆΔ: -294.5,
                x: 0,
                y: 0,
                ΔᐃⵠᐃⲆ: 190
            }
        };
        this.ᐃᐃⵠΔⲆⲆⲆΔΔ = {
            id: document.getElementById("stats_box"),
            style: document.getElementById("stats_box").style,
            active: fa,
            position: _ | ba,
            view: v,
            translate: {
                ΔᐃⵠᐃⲆ: 187,
                ᐃᐃᐃⲆΔ: 125,
                x: 0,
                y: 0
            }
        };
        this.ⲆⵠⵠⵠⵠΔⲆᐃⲆ = {
            id: document.getElementById("serverAddressBlock"),
            style: document.getElementById("serverAddressBlock").style,
            input: document.getElementById("serverAddressInput"),
            active: fa,
            position: _ | ba,
            view: q,
            translate: {
                ᐃᐃᐃⲆΔ: -220,
                ΔᐃⵠᐃⲆ: 350,
                y: 0,
                x: 0
            }
        };
        b = 0;
        this.ᐃⵠΔⲆⲆ = [];
        this.ᐃⵠΔⲆⲆ[b++] = this.ⲆⲆⲆⲆΔ;
        this.ᐃⵠΔⲆⲆ[b++] = this.ᐃΔᐃⲆⵠ;
        this.ᐃⵠΔⲆⲆ[b++] = this.ΔⲆΔⲆΔ;
        this.ᐃⵠΔⲆⲆ[b++] = this.ⲆᐃΔΔΔΔⵠᐃⵠ;
        this.ᐃⵠΔⲆⲆ[b++] = this.ᐃᐃⵠΔⲆⲆⲆΔΔ;
        this.ᐃⵠΔⲆⲆ[b++] = this.ⲆⵠⵠⵠⵠΔⲆᐃⲆ;
        b = 0;
        this.ⵠⲆⵠⵠ = [];
        this.ⵠⲆⵠⵠ[b++] = If(ᐃⲆ.ⲆᐃⲆⵠᐃⲆⵠ, ha, 0, 0, Y);
        this.ⵠⲆⵠⵠ[b++] = If(ᐃⲆ.ⵠᐃᐃⲆⲆᐃⲆ, fa, 0, 0, Y);
        this.ⵠⲆⵠⵠ[b++] = If(ᐃⲆ.ⲆΔⲆⲆᐃΔΔ, fa, 0, 0, Y);
        this.ⵠⲆⵠⵠ[b++] = If(ᐃⲆ.ᐃⲆⲆᐃⵠᐃⵠ, fa, 0, 0, Y);
        this.ⵠⲆⵠⵠ[b++] = If(ᐃⲆ.ⵠΔᐃⲆⵠᐃⵠ, fa, 0, 0, Y);
        this.ⵠⲆⵠⵠ[b++] = If(ᐃⲆ.ᐃⵠⵠⲆⵠΔᐃ, fa, 0, 0, Y);
        this.ⵠⲆⵠⵠ[b++] = If(ᐃⲆ.ᐃⵠⵠⵠⲆΔⲆ, fa, 0, 0, Y);
        this.ⵠⲆⵠⵠ[b++] = If(ᐃⲆ.ᐃⵠⵠΔᐃᐃΔ, fa, 0, 0, Y);
        this.ⵠⲆⵠⵠ[b++] = If(ᐃⲆ.ⵠΔᐃⲆΔΔⵠ, fa, 0, 0, Y);
        this.ⵠⲆⵠⵠ[b++] = If(ᐃⲆ.ᐃⵠΔᐃΔⲆⲆ, fa, 0, 0, Y);
        this.ⵠⲆⵠⵠ[b++] = If(ᐃⲆ.ⵠᐃΔⵠⵠⵠⵠ, fa, 0, 0, Y);
        this.ⵠⲆⵠⵠ[b++] = If(ᐃⲆ.ΔᐃⵠⵠᐃΔΔ, fa, 0, 0, Y);
        this.ⵠⲆⵠⵠ[b++] = If(ᐃⲆ.ⵠⲆᐃΔΔⲆⲆ, fa, 0, 0, Y);
        this.ⵠⲆⵠⵠ[b++] = If(ᐃⲆ.ΔΔⵠⲆⲆΔΔ, fa, 0, 0, Y);
        this.ⵠⲆⵠⵠ[b++] = If(ᐃⲆ.ⲆΔᐃⵠᐃᐃΔ, fa, 0, 0, Y);
        this.ⵠⲆⵠⵠ[b++] = If(ᐃⲆ.ΔⵠᐃⲆⲆⵠᐃ, fa, 0, 0, Y);
        this.ⵠⲆⵠⵠ[b++] = If(ᐃⲆ.ⵠⵠⲆⲆⲆᐃΔ, fa, 0, 0, Y);
        this.ⵠⲆⵠⵠ[b++] = If(ᐃⲆ.ΔⵠᐃⲆⵠΔⵠ, fa, 0, 0, Y);
        this.ⵠⲆⵠⵠ[b++] = If(ᐃⲆ.ⵠⲆΔⵠΔⵠⲆ, fa, 0, 0, Y);
        if (Hf.innerWidth < 1300) {
            this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ᐃΔᐃⵠⲆⲆᐃ, ha, 200, 100, _ | Y);
        } else {
            this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ᐃΔᐃⵠⲆⲆᐃ, ha, -753 / 4, 100, _ | ba);
        }
        this.ⵠⲆⵠⵠ[b++].view = F;
        this.ⵠⲆⵠⵠ[b++] = If(ᐃⲆ.ᐃⵠⵠᐃᐃⲆΔ, ha, 403, -10, Z);
        if (Hf.innerWidth > 1300) {
            this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ⲆⲆⲆⲆⲆᐃΔ, ha, -885 / 4, -159.5, aa | ba);
            this.ⵠⲆⵠⵠ[b++].view = F;
        }
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ΔΔΔⵠᐃⲆᐃ, fa, -1293 / 4, 100, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = v;
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ᐃⲆⵠᐃⲆⵠⲆ, fa, -356.25, 100, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = m;
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ΔᐃΔⵠⲆⵠⲆ, fa, -905 / 4, 50, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = c;
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ᐃᐃⲆⵠΔᐃᐃ, fa, -402, 130, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = p;
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ᐃⵠΔᐃⲆⲆΔ, fa, -1117 / 4, 130, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = O;
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ⵠⲆᐃΔΔΔΔ, fa, -1222 / 4, 130, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = N;
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ⵠⵠⵠⲆⲆᐃΔ, fa, -305.5, 100, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = q;
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ᐃⵠᐃⵠΔⵠΔ, fa, -ᐃⲆ.ᐃⵠᐃⵠΔⵠΔ.width / 4 - 350, -15, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = H;
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ⵠᐃΔⲆⲆⲆⵠ, fa, -1497 / 4, 110, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = C;
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ΔⵠᐃΔⵠⵠⵠ, fa, -306.5, 100, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = I;
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ᐃⲆⵠⵠᐃⵠᐃ, fa, -345.25, 80, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = f;
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ⵠΔΔⲆᐃᐃΔ, fa, -385.5, 150, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = k;
        var ia = 360 / 100;
        var ja = this.ⵠⲆᐃⵠΔⲆⵠ([["#25c5d6", ia * 3], ["#e2cf27", ia * 10], ["#afac98", ia * 30], ["#d88e23", ia * 57]]);
        this.ⵠⲆⵠⵠ[b] = If(ja, fa, -ja.width / 4, 178, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = k;
        this.ⵠⲆⵠᐃΔⲆⲆᐃΔ = function (b, c, d) {
            var e;
            j.ΔⵠᐃΔⲆ = 1;
            j.ᐃⵠΔᐃⵠΔⲆ = 0;
            j.ⵠⲆΔⵠᐃᐃΔ = 0;
            j.ΔⲆⲆΔΔⲆΔ = b;
            j.ᐃᐃΔⲆᐃᐃᐃ = c;
            var f = 0;
            if (c === 0) {
                for (f = 0; ⲆᐃᐃΔ.ⵠⵠⲆᐃⲆ.length > f && d !== ⲆᐃᐃΔ.ⵠⵠⲆᐃⲆ[f].id; f++);
                e = ⲆᐃᐃΔ.ⵠⵠⲆᐃⲆ[f];
                j.unlock.ⵠᐃⵠᐃ[f] = 1;
            } else if (c === 1) {
                for (f = 0; ⲆᐃᐃΔ.ⵠᐃⲆⲆᐃ.length > f && ⲆᐃᐃΔ.ⵠᐃⲆⲆᐃ[f].id !== d; f++);
                e = ⲆᐃᐃΔ.ⵠᐃⲆⲆᐃ[f];
                j.unlock.ᐃⵠᐃⲆΔ[f] = 1;
            } else if (c === 2) {
                for (f = 0; f < ⲆᐃᐃΔ.ⲆΔⵠᐃ.length && d !== ⲆᐃᐃΔ.ⲆΔⵠᐃ[f].id; f++);
                e = ⲆᐃᐃΔ.ⲆΔⵠᐃ[f];
                j.unlock.ᐃᐃⵠᐃⲆ[f] = 1;
            } else if (c === 3) {
                for (f = 0; f < ⲆᐃᐃΔ.ⲆⵠⲆⲆⲆ.length && d !== ⲆᐃᐃΔ.ⲆⵠⲆⲆⲆ[f].id; f++);
                e = ⲆᐃᐃΔ.ⲆⵠⲆⲆⲆ[f];
                j.unlock.ΔᐃᐃᐃΔ[f] = 1;
            } else if (c === 4) {
                for (f = 0; ⲆᐃᐃΔ.ⲆⲆⲆⵠΔ.length > f && d !== ⲆᐃᐃΔ.ⲆⲆⲆⵠΔ[f].id; f++);
                e = ⲆᐃᐃΔ.ⲆⲆⲆⵠΔ[f];
                j.unlock.ᐃⲆⲆⲆⲆ[f] = 1;
                j.unlock.ᐃⵠⵠΔΔ[f] = 1;
            }
            j.ⲆΔΔᐃⲆⵠⲆ = f;
            j.ΔᐃΔⵠⲆⵠⵠ = Ef("by " + e.ⲆΔⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, undefined, 30, 24, undefined, undefined, undefined, Rh, "#000000", 24);
            j.ᐃⵠⵠⵠᐃⵠΔ = Ef(e.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, cn, 30, 24, undefined, undefined, undefined, ks, "#000000", 20);
        };
        this.ΔⵠᐃΔⲆ = 0;
        this.ᐃⵠΔᐃⵠΔⲆ = 0;
        this.ΔⲆⲆΔΔⲆΔ = 0;
        this.ᐃᐃΔⲆᐃᐃᐃ = 0;
        this.ⵠⲆΔⵠᐃᐃΔ = 0;
        this.ΔᐃΔⵠⲆⵠⵠ = Nh;
        this.ᐃⵠⵠⵠᐃⵠΔ = undefined;
        var ka = 197;
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ⵠⲆΔⲆⵠⲆⲆ, fa, -385.5, 150, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = M;
        ja = this.ⵠⲆᐃⵠΔⲆⵠ([["#d45ce5", ia * 3], ["#25c5d6", ia * 10], ["#e2cf27", ia * 30], ["#afac98", ia * 57]]);
        this.ⵠⲆⵠⵠ[b] = If(ja, fa, -ja.width / 4, 178, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = M;
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ⵠᐃΔⲆΔΔᐃ, fa, -1542 / 4, 150, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = x;
        ja = this.ⵠⲆᐃⵠΔⲆⵠ([["#d33a2a", ia * 3], ["#d45ce5", ia * 10], ["#25c5d6", ia * 30], ["#e2cf27", ia * 57]]);
        this.ⵠⲆⵠⵠ[b] = If(ja, fa, -ja.width / 4, 178, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = x;
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ΔᐃΔΔΔᐃΔ, fa, -1542 / 4, 150, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = J;
        ja = this.ⵠⲆᐃⵠΔⲆⵠ([["#25c5d6", ia * 3], ["#e2cf27", ia * 10], ["#afac98", ia * 30], ["#d88e23", ia * 57]]);
        this.ⵠⲆⵠⵠ[b] = If(ja, fa, -ja.width / 4, 178, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = J;
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ᐃᐃⲆΔⵠⵠⵠ, fa, -385.5, 150, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = A;
        ja = this.ⵠⲆᐃⵠΔⲆⵠ([["#d45ce5", ia * 3], ["#25c5d6", ia * 10], ["#e2cf27", ia * 30], ["#afac98", ia * 57]]);
        this.ⵠⲆⵠⵠ[b] = If(ja, fa, -ja.width / 4, 178, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = A;
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ΔΔⲆⵠΔⵠᐃ, fa, -1542 / 4, 150, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = B;
        ja = this.ⵠⲆᐃⵠΔⲆⵠ([["#d33a2a", ia * 3], ["#d45ce5", ia * 10], ["#25c5d6", ia * 30], ["#e2cf27", ia * 57]]);
        this.ⵠⲆⵠⵠ[b] = If(ja, fa, -ja.width / 4, 178, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = B;
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ⲆᐃᐃⵠⵠⲆΔ, fa, -1366 / 4, 100, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = D;
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ⲆⲆⲆⲆᐃⵠⵠ, fa, -1366 / 4, 100, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = S;
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.Ⲇᐃᐃⵠⵠⵠⵠ, fa, -1366 / 4, 100, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = R;
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ΔΔⲆⲆΔⲆΔ, fa, -341.5, 100, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = Q;
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ᐃΔⲆⵠΔⲆⵠ, fa, -1366 / 4, 100, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = E;
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ΔᐃᐃᐃⲆΔΔ, fa, -341.5, 100, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = L;
        ᐃᐃⵠⵠⵠᐃⲆ = b++;
        this.ⵠⲆⵠⵠ[ᐃᐃⵠⵠⵠᐃⲆ] = If(ᐃⲆ.ᐃᐃⵠⵠⵠᐃⲆ, fa, 484, 0, _);
        ΔⲆⲆⲆⲆⵠΔ = b++;
        this.ⵠⲆⵠⵠ[ΔⲆⲆⲆⲆⵠΔ] = If(ᐃⲆ.ΔⲆⲆⲆⲆⵠΔ, fa, 812.5, 0, _);
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ΔᐃΔΔΔΔᐃ, fa, -758 / 4, -5, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = z;
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ⵠΔᐃΔⵠⲆᐃ, fa, -189.5, -5, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = y;
        ⵠΔⵠⲆᐃⵠⲆ = b++;
        this.ⵠⲆⵠⵠ[ⵠΔⵠⲆᐃⵠⲆ] = If(ᐃⲆ.ⲆΔᐃΔⵠⲆᐃ, ha, 93, 30, _);
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ᐃΔΔᐃᐃⵠᐃ, fa, -173, 110, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = G;
        this.ⵠⲆⵠⵠ[b] = If(ᐃⲆ.ⵠⵠᐃᐃⵠⵠᐃ, fa, -173, 110, _ | ba);
        this.ⵠⲆⵠⵠ[b++].view = T;
        b = 0;
        this.buttons = [];
        this.buttons[b] = Df(50, 57, 0, [ᐃⲆ.ⲆΔΔⵠᐃⵠⵠ, ᐃⲆ.ᐃᐃⵠᐃⵠᐃᐃ, ᐃⲆ.ΔⲆⲆᐃᐃⵠⵠ], 1, da, function () {
            if (j.ⲆᐃⲆᐃΔ()) {
                K(f);
            } else {
                K(c);
            }
        }, 320, 0, Y, ha);
        b++;
        if (Hf.innerWidth < 1300) {
            this.buttons[b] = Df(202, 97, 0, [ᐃⲆ.ⵠⲆⵠᐃᐃⲆᐃ, ᐃⲆ.ⲆⲆⵠΔⵠᐃᐃ, ᐃⲆ.ⵠⵠΔΔᐃΔᐃ], 1, da, this.ᐃⲆⵠΔⲆΔᐃ, 462, 235, _ | Y, ha);
        } else {
            this.buttons[b] = Df(202, 97, 0, [ᐃⲆ.ⵠⲆⵠᐃᐃⲆᐃ, ᐃⲆ.ⲆⲆⵠΔⵠᐃᐃ, ᐃⲆ.ⵠⵠΔΔᐃΔᐃ], 1, da, this.ᐃⲆⵠΔⲆΔᐃ, 74, 235, _ | ba, ha);
        }
        this.buttons[b].view = F;
        b++;
        if (Hf.innerWidth > 1300) {
            this.buttons[b] = Df(355, 168, 0, [ᐃⲆ.ⲆⵠΔᐃⵠᐃⵠ, ᐃⲆ.ⲆⵠΔᐃⵠᐃⵠ, ᐃⲆ.ⲆⵠΔᐃⵠᐃⵠ], 1, da, function () {
                Hf.open("./changelog.html", "_blank");
            }, -195, -115, aa | ba, ha);
            this.buttons[b++].view = F;
            this.buttons[b] = Df(355, 168, 0, [ᐃⲆ.ⲆΔΔⲆⲆᐃⵠ, ᐃⲆ.ⲆΔΔⲆⲆᐃⵠ, ᐃⲆ.ⲆΔΔⲆⲆᐃⵠ], 1, da, function () {
                Hf.open("https://taming.io", "_blank");
            }, 20, -115, aa | ba, ha);
            this.buttons[b++].view = F;
        }
        this.buttons[b++] = Df(80, 80, 0, [ᐃⲆ.ΔⲆᐃⲆⲆᐃᐃ, ᐃⲆ.ᐃⵠⲆᐃⲆᐃᐃ, ᐃⲆ.ⲆⲆΔᐃⲆⵠⵠ], 1, da, function () {
            Hf.open("https://lapamauve.creator-spring.com/", "_blank");
        }, 380, 10, Z, ha);
        this.buttons[b++] = Df(80, 80, 0, [ᐃⲆ.ᐃᐃⲆⲆⵠΔᐃ, ᐃⲆ.ⲆⵠΔⲆⲆΔⵠ, ᐃⲆ.ΔⵠΔᐃᐃᐃⵠ], 1, da, function () {
            Hf.open("https://discord.gg/starveio", "_blank");
        }, 330, 10, Z, ha);
        this.buttons[b++] = Df(80, 80, 0, [ᐃⲆ.ᐃᐃᐃⵠΔΔΔ, ᐃⲆ.ⵠΔᐃᐃᐃⵠⲆ, ᐃⲆ.ΔᐃΔⲆⵠⲆⲆ], 1, da, function () {
            Hf.open("https://reddit.com/r/starveio", "_blank");
        }, 280, 10, Z, ha);
        this.buttons[b++] = Df(80, 80, 0, [ᐃⲆ.ⲆⲆᐃⵠΔᐃⲆ, ᐃⲆ.ΔᐃⵠᐃᐃΔⵠ, ᐃⲆ.ΔⵠᐃᐃⲆⵠⵠ], 1, da, function () {
            Hf.open("https://starveiopro.wikia.com/wiki/", "_blank");
        }, 230, 10, Z, ha);
        this.buttons[b++] = Df(80, 80, 0, [ᐃⲆ.ⵠⲆΔⲆⲆᐃᐃ, ᐃⲆ.ᐃⲆⲆⲆΔⲆΔ, ᐃⲆ.ⲆⵠΔᐃΔⵠⲆ], 1, da, function () {
            Hf.open("https://www.facebook.com/LapaMauve/", "_blank");
        }, 155, 10, Z, ha);
        this.buttons[b++] = Df(80, 80, 0, [ᐃⲆ.ΔᐃΔᐃⵠⲆⵠ, ᐃⲆ.ᐃⵠΔⵠⵠᐃⵠ, ᐃⲆ.ⲆⵠᐃᐃΔᐃⲆ], 1, da, function () {
            Hf.open("https://twitter.com/lapamauve", "_blank");
        }, 105, 10, Z, ha);
        this.buttons[b++] = Df(80, 80, 0, [ᐃⲆ.ΔⲆᐃⲆᐃⲆⲆ, ᐃⲆ.ⲆⲆΔⵠΔⲆⲆ, ᐃⲆ.ⵠΔⲆΔⵠⲆⲆ], 1, da, function () {
            Hf.open("https://www.youtube.com/@lapamauveofficial", "_blank");
        }, 55, 10, Z, ha);
        ᐃⵠᐃᐃᐃⲆⵠ = b++;
        this.buttons[ᐃⵠᐃᐃᐃⲆⵠ] = Df(232, 142, 0, [ᐃⲆ.ⲆΔⲆᐃΔΔΔ, ᐃⲆ.ΔⵠΔΔⵠⲆΔ, ᐃⲆ.ⵠᐃⲆⲆᐃᐃⲆ], 1, da, function () {
            K(I);
            uy(Ax.ΔⲆⲆΔᐃⵠΔ, Ax.ᐃⵠΔⲆⵠΔΔ, Ax.ΔΔΔᐃⲆᐃΔ, Ax.ⲆᐃⲆᐃⵠⵠⵠ);
        }, -5, 573, Y, ha);
        this.buttons[b++] = Df(236, 165, 0, [ᐃⲆ.ⲆⵠⵠⵠⵠⵠⲆ, ᐃⲆ.ⲆⵠⵠⵠⵠⵠⲆ, ᐃⲆ.ⲆⵠⵠⵠⵠⵠⲆ], 1, ea, function () {
            K(I);
        }, -5, 566, Y, ha);
        ᐃᐃᐃᐃⲆⵠᐃ = b++;
        this.buttons[ᐃᐃᐃᐃⲆⵠᐃ] = Df(236, 165, 0, [ᐃⲆ.ⲆᐃᐃΔⵠⵠΔ, ᐃⲆ.ⵠΔΔΔⵠⲆⲆ, ᐃⲆ.ⵠⲆⲆⲆⲆⲆᐃ], 1, da, function () {
            K(C);
        }, -5, 494, Y, ha);
        this.buttons[b++] = Df(236, 165, 0, [ᐃⲆ.ⵠᐃⵠΔᐃⵠᐃ, ᐃⲆ.ⵠᐃⵠΔᐃⵠᐃ, ᐃⲆ.ⵠᐃⵠΔᐃⵠᐃ], 1, ea, function () {
            K(C);
        }, -5, 494, Y, ha);
        ⵠΔⵠⵠⵠΔⵠ = b++;
        this.buttons[ⵠΔⵠⵠⵠΔⵠ] = Df(236, 165, 0, [ᐃⲆ.ⲆᐃᐃΔⵠⵠΔ, ᐃⲆ.ⵠΔΔΔⵠⲆⲆ, ᐃⲆ.ⵠⲆⲆⲆⲆⲆᐃ], 1, da, function () {
            if (j.ⲆᐃⲆᐃΔ()) {
                if (Ax.ⵠⵠΔΔΔΔⲆ - Date.now() > 0) {
                    K(q);
                } else {
                    K(O);
                }
            } else {
                K(c);
            }
        }, -5, 415, Y, ha);
        this.buttons[b++] = Df(236, 165, 0, [ᐃⲆ.ⵠⵠᐃΔⵠⲆᐃ, ᐃⲆ.ⵠⵠᐃΔⵠⲆᐃ, ᐃⲆ.ⵠⵠᐃΔⵠⲆᐃ], 1, ea, function () {
            if (j.ⲆᐃⲆᐃΔ()) {
                if (Ax.ⵠⵠΔΔΔΔⲆ - Date.now() > 0) {
                    K(q);
                } else {
                    K(O);
                }
            } else {
                K(c);
            }
        }, -5, 415, Y, ha);
        Ⲇᐃⵠᐃᐃᐃⵠ = b++;
        this.buttons[Ⲇᐃⵠᐃᐃᐃⵠ] = Df(236, 165, 0, [ᐃⲆ.ⲆᐃᐃΔⵠⵠΔ, ᐃⲆ.ⵠΔΔΔⵠⲆⲆ, ᐃⲆ.ⵠⲆⲆⲆⲆⲆᐃ], 1, da, function () {
            K(p);
        }, -5, 336, Y, ha);
        this.buttons[b++] = Df(236, 165, 0, [ᐃⲆ.ᐃᐃⵠᐃⵠᐃⲆ, ᐃⲆ.ᐃᐃⵠᐃⵠᐃⲆ, ᐃⲆ.ᐃᐃⵠᐃⵠᐃⲆ], 1, ea, function () {
            K(p);
        }, -5, 336, Y, ha);
        ᐃⵠⵠⲆΔΔΔ = b++;
        this.buttons[ᐃⵠⵠⲆΔΔΔ] = Df(236, 165, 0, [ᐃⲆ.ⲆᐃᐃΔⵠⵠΔ, ᐃⲆ.ⵠΔΔΔⵠⲆⲆ, ᐃⲆ.ⵠⲆⲆⲆⲆⲆᐃ], 1, da, function () {
            K(m);
        }, -5, 257, Y, ha);
        this.buttons[b++] = Df(236, 165, 0, [ᐃⲆ.ᐃⲆⲆⵠᐃΔⵠ, ᐃⲆ.ᐃⲆⲆⵠᐃΔⵠ, ᐃⲆ.ᐃⲆⲆⵠᐃΔⵠ], 1, ea, function () {
            K(m);
        }, -5, 257, Y, ha);
        ⲆΔⲆΔᐃᐃⵠ = b++;
        this.buttons[ⲆΔⲆΔᐃᐃⵠ] = Df(236, 165, 0, [ᐃⲆ.ⲆᐃᐃΔⵠⵠΔ, ᐃⲆ.ⵠΔΔΔⵠⲆⲆ, ᐃⲆ.ⵠⲆⲆⲆⲆⲆᐃ], 1, da, function () {
            K(F);
        }, -5, 178, Y, ha);
        this.buttons[b++] = Df(236, 165, 0, [ᐃⲆ.ᐃⵠᐃⲆⲆᐃⵠ, ᐃⲆ.ᐃⵠᐃⲆⲆᐃⵠ, ᐃⲆ.ᐃⵠᐃⲆⲆᐃⵠ], 1, ea, function () {
            K(F);
        }, -5, 178, Y, ha);
        ΔΔΔⲆⵠⵠᐃ = b++;
        this.ΔΔΔⲆⵠⵠᐃ = ΔΔΔⲆⵠⵠᐃ;
        this.buttons[ΔΔΔⲆⵠⵠᐃ] = Df(324, 222, 0, [ᐃⲆ.ⲆⵠⵠᐃᐃⲆⲆ, ᐃⲆ.ⲆᐃⵠⵠⲆΔΔ, ᐃⲆ.ⵠⵠᐃⲆⲆⵠⵠ], 1, da, function () {
            K(c);
        }, 0, 70, Y, ha);
        ΔᐃᐃⲆⵠᐃΔ = b++;
        ⲆΔⵠⵠⲆᐃΔ = b++;
        this.ΔᐃᐃⲆⵠᐃΔ = ΔᐃᐃⲆⵠᐃΔ;
        this.ⲆΔⵠⵠⲆᐃΔ = ⲆΔⵠⵠⲆᐃΔ;
        this.buttons[ΔᐃᐃⲆⵠᐃΔ] = Df(324, 222, 0, [ᐃⲆ.ΔᐃᐃⲆⲆⵠⵠ, ᐃⲆ.ΔᐃᐃΔⵠᐃΔ, ᐃⲆ.ⲆⲆᐃⲆⲆⲆΔ], 1, da, function () {
            K(v);
            sa(-1);
        }, 0, 70, Y, fa);
        this.buttons[ⲆΔⵠⵠⲆᐃΔ] = Df(324, 222, 0, [ᐃⲆ.ΔⲆᐃⲆⵠⲆⵠ, ᐃⲆ.ΔⲆᐃⲆⵠⲆⵠ, ᐃⲆ.ΔⲆᐃⲆⵠⲆⵠ], 1, ea, function () {
            K(v);
            sa(-1);
        }, 0, 70, Y, fa);
        if (Δⵠⵠⵠ.ᐃᐃⲆΔΔᐃⵠ === 0) {
            var la = b++;
            if (Hf.innerWidth < 1300) {
                this.buttons[la] = Df(266, 176, 0, [ᐃⲆ.ᐃⲆⵠⲆᐃΔⲆ, ᐃⲆ.ΔⲆⵠⵠⵠⲆⲆ, ᐃⲆ.ⲆΔᐃᐃⵠΔΔ], 1, da, function () {
                    Δⵠⵠⵠ.ⲆᐃΔⵠⵠ(0);
                }, 150, 300, Y | _, ha);
            } else {
                this.buttons[la] = Df(266, 176, 0, [ᐃⲆ.ᐃⲆⵠⲆᐃΔⲆ, ᐃⲆ.ΔⲆⵠⵠⵠⲆⲆ, ᐃⲆ.ⲆΔᐃᐃⵠΔΔ], 1, da, function () {
                    Δⵠⵠⵠ.ⲆᐃΔⵠⵠ(0);
                }, -340, 100, ba | _, ha);
            }
            this.buttons[la].view = F;
            this.buttons[la].hint = 0;
            var ma = b++;
            if (Hf.innerWidth < 1300) {
                this.buttons[ma] = Df(266, 176, 0, [ᐃⲆ.ⲆᐃⵠΔⲆⲆᐃ, ᐃⲆ.ⲆⲆΔⲆΔⵠⲆ, ᐃⲆ.ΔⲆⵠⲆΔⲆΔ], 1, da, function () {
                    Δⵠⵠⵠ.ⲆᐃΔⵠⵠ(4);
                }, 150, 400, Y | _, ha);
            } else {
                this.buttons[ma] = Df(266, 176, 0, [ᐃⲆ.ⲆᐃⵠΔⲆⲆᐃ, ᐃⲆ.ⲆⲆΔⲆΔⵠⲆ, ᐃⲆ.ΔⲆⵠⲆΔⲆΔ], 1, da, function () {
                    Δⵠⵠⵠ.ⲆᐃΔⵠⵠ(4);
                }, -340, 200, ba | _, ha);
            }
            this.buttons[ma].view = F;
            this.buttons[ma].hint = 0;
            var oa = b++;
            if (Hf.innerWidth < 1300) {
                this.buttons[oa] = Df(266, 176, 0, [ᐃⲆ.ⲆΔᐃᐃᐃΔᐃ, ᐃⲆ.ᐃᐃᐃΔⵠⲆΔ, ᐃⲆ.ⲆⵠⲆⵠΔΔⲆ], 1, da, function () {
                    Δⵠⵠⵠ.ⲆᐃΔⵠⵠ(6);
                }, 450, 300, Y | _, ha);
            } else {
                this.buttons[oa] = Df(266, 176, 0, [ᐃⲆ.ⲆΔᐃᐃᐃΔᐃ, ᐃⲆ.ᐃᐃᐃΔⵠⲆΔ, ᐃⲆ.ⲆⵠⲆⵠΔΔⲆ], 1, da, function () {
                    Δⵠⵠⵠ.ⲆᐃΔⵠⵠ(6);
                }, -340, 300, ba | _, ha);
            }
            this.buttons[oa].view = F;
            this.buttons[oa].hint = 0;
            var pa = b++;
            if (Hf.innerWidth < 1300) {
                this.buttons[pa] = Df(266, 176, 0, [ᐃⲆ.ⲆΔΔⲆᐃⲆⲆ, ᐃⲆ.ΔΔΔⲆⵠΔⲆ, ᐃⲆ.ⲆΔⵠⲆⲆᐃⲆ], 1, da, function () {
                    Δⵠⵠⵠ.ⲆᐃΔⵠⵠ(2);
                }, 300, 300, Y | _, ha);
            } else {
                this.buttons[pa] = Df(266, 176, 0, [ᐃⲆ.ⲆΔΔⲆᐃⲆⲆ, ᐃⲆ.ΔΔΔⲆⵠΔⲆ, ᐃⲆ.ⲆΔⵠⲆⲆᐃⲆ], 1, da, function () {
                    Δⵠⵠⵠ.ⲆᐃΔⵠⵠ(2);
                }, 204, 100, ba | _, ha);
            }
            this.buttons[pa].view = F;
            this.buttons[pa].hint = 0;
            var qa = b++;
            if (Hf.innerWidth < 1300) {
                this.buttons[qa] = Df(266, 176, 0, [ᐃⲆ.ᐃⵠⲆⲆΔᐃⵠ, ᐃⲆ.ᐃΔᐃᐃΔᐃᐃ, ᐃⲆ.ⲆᐃᐃΔΔᐃΔ], 1, da, function () {
                    Δⵠⵠⵠ.ⲆᐃΔⵠⵠ(3);
                }, 300, 400, Y | _, ha);
            } else {
                this.buttons[qa] = Df(266, 176, 0, [ᐃⲆ.ᐃⵠⲆⲆΔᐃⵠ, ᐃⲆ.ᐃΔᐃᐃΔᐃᐃ, ᐃⲆ.ⲆᐃᐃΔΔᐃΔ], 1, da, function () {
                    Δⵠⵠⵠ.ⲆᐃΔⵠⵠ(3);
                }, 204, 200, ba | _, ha);
            }
            this.buttons[qa].view = F;
            this.buttons[qa].hint = 0;
            var ra = b++;
            this.buttons[ra] = Df(266, 176, 0, [ᐃⲆ.ⲆΔᐃΔⵠᐃᐃ, ᐃⲆ.Ⲇⵠᐃⵠᐃᐃᐃ, ᐃⲆ.ⵠⵠΔⵠΔΔⵠ], 1, da, function () {
                Δⵠⵠⵠ.ⲆᐃΔⵠⵠ(7);
            }, Hf.innerWidth < 1300 ? 450 : 204, Hf.innerWidth < 1300 ? 400 : 300, (Hf.innerWidth < 1300 ? Y : ba) | _, ha);
            this.buttons[ra].view = F;
            this.buttons[ra].hint = 0;
        }
        function sa(b, c) {
            if (c !== undefined) {
                Ax.ᐃⲆΔⲆⲆⲆⲆ = c;
                var d = Ax.ᐃⵠⲆⲆⵠⵠⵠ[c];
                Ax.Ⲇⵠⵠⵠᐃ = d.score;
                Ax.ᐃⲆᐃᐃᐃ = d.kill;
                Ax.ⵠⲆΔⵠᐃⵠⲆ = d.death;
                Ax.time = d.time;
                Ax.ΔⵠΔΔⲆⲆⵠ = d.bestScore;
                Ax.ΔΔⲆⵠᐃᐃᐃ = d.bestKill;
                Ax.ᐃΔⵠΔᐃⲆⵠ = d.bestTime;
                Ax.ᐃΔⵠᐃⲆⵠΔ = d.scoreTotal;
            }
            if (b === Qr) {
                b = Ax.ⵠΔΔΔⵠⵠⲆ;
            }
            Ax.ⵠΔΔΔⵠⵠⲆ = b;
            if (b >= 0) {
                document.getElementById("stats_box_time").innerHTML = Ax.ᐃΔⵠΔᐃⲆⵠ[b];
                document.getElementById("stats_box_kill").innerHTML = Ax.ΔΔⲆⵠᐃᐃᐃ[b];
                document.getElementById("stats_box_score").innerHTML = Ax.ΔⵠΔΔⲆⲆⵠ[b];
            } else {
                var f = 0;
                for (var g = 0; Ax.ᐃⲆᐃᐃᐃ.length > g; g++) {
                    f += Ax.ᐃⲆᐃᐃᐃ[g];
                }
                var h = 0;
                for (g = 0; g < Ax.time.length; g++) {
                    h += Ax.time[g];
                }
                document.getElementById("stats_box_time").innerHTML = h;
                document.getElementById("stats_box_kill").innerHTML = f;
                document.getElementById("stats_box_score").innerHTML = Ax.Ⲇⵠⵠⵠᐃ;
            }
        }
        this.buttons[b] = Df(87, 78, 0, [ᐃⲆ.ⲆᐃᐃⵠⲆᐃⵠ, ᐃⲆ.ⲆⵠⵠⵠΔΔⵠ, ᐃⲆ.ΔⵠΔΔᐃⵠⵠ], 1, da, function () {
            Ax.ⲆᐃΔΔⵠᐃΔⲆΔ();
            if (Ax.ⵠΔⵠⲆΔⵠΔ === 0) {
                K(T);
            } else {
                K(G);
            }
        }, 127, 110, ba | _, fa);
        this.buttons[b++].view = v;
        this.buttons[b] = Df(87, 78, 0, [ᐃⲆ.ⵠⵠΔᐃΔⲆΔ, ᐃⲆ.ΔⲆⲆΔΔΔΔ, ᐃⲆ.ⵠⲆⲆⲆΔΔᐃ], 1, da, function () {
            const a = Hf.document.createElement("textarea");
            a.value = $x;
            Hf.document.body.appendChild(a);
            a.select();
            Hf.document.execCommand("copy");
            Hf.document.body.removeChild(a);
        }, 182, 110, ba | _, fa);
        this.buttons[b++].view = v;
        this.buttons[b] = Df(87, 78, 0, [ᐃⲆ.ⵠᐃⵠΔⵠⲆΔ, ᐃⲆ.ᐃⵠΔⲆΔⲆΔ, ᐃⲆ.ΔΔⵠⵠⲆⲆᐃ], 1, da, function () {
            (function () {
                if (Yx === Wx && Hf.FB && Hf.FB.getUserID()) {
                    Hf.FB.logout();
                }
                if (Vx === Yx && ey !== undefined) {
                    Hf.gapi.auth2.getAuthInstance().signOut();
                    ey = undefined;
                }
                $x = undefined;
                Zx = $e;
                Yx = ks;
                Ax.Δᐃᐃᐃⵠ = 0;
                Ax.ⵠⲆΔⲆⲆ = 0;
                Ax.Ⲇⵠⵠⵠᐃ = 0;
                Ax.ⵠⵠΔⲆⵠᐃⲆ();
                ᐃΔⲆⵠⵠᐃⵠᐃⵠ();
            })();
        }, 255, 110, ba | _, fa);
        this.buttons[b++].view = v;
        this.buttons[b] = Df(58, 64, 0, [ᐃⲆ.ᐃⲆⵠᐃⲆΔΔ, ᐃⲆ.ᐃᐃΔⲆᐃⲆⵠ, ᐃⲆ.ΔⲆⵠΔᐃⲆⵠ], 1, da, function () {
            K(F);
        }, 189, 118, ba | _, fa);
        this.buttons[b++].view = c;
        this.buttons[b] = Df(497, 72, 0, [ᐃⲆ.ΔⲆᐃΔΔΔⵠ, ᐃⲆ.ⲆᐃⵠⲆⵠⲆᐃ, ᐃⲆ.ΔⲆⲆⲆᐃⲆⵠ], 1, da, function () {
            (function () {
                if (Rf) {
                    Zx = ⵠΔⲆⵠ.ⲆⲆⵠⵠⵠⵠⵠ(40);
                    Yx = Xx;
                    $x = Rf.userId;
                    Hf.ⵠΔΔΔΔᐃⲆ();
                    return;
                }
                Hf.gapi.auth2.getAuthInstance().signIn();
            })();
        }, -130, 390, ba | _, fa);
        this.buttons[b++].view = c;
        this.buttons[b] = Df(497, 72, 0, [ᐃⲆ.ⲆⵠⲆⵠⵠⵠⵠ, ᐃⲆ.ΔⲆⵠᐃΔΔⲆ, ᐃⲆ.ᐃΔⲆⵠᐃΔⲆ], 1, da, function () {
            Hf.FB.login(function (a) {
                if (a.authResponse) {
                    Hf.FB.api("/me", function (a) {
                        Yx = Wx;
                        Zx = Hf.FB.getAuthResponse().accessToken;
                        xy();
                        Hf.ⵠΔΔΔΔᐃⲆ();
                    });
                }
            });
        }, -130, 430, ba | _, fa);
        this.buttons[b++].view = c;
        ⲆΔΔⲆΔᐃⵠ = 20000;
        this.ΔΔᐃⲆΔΔΔ = function (a) {
            var b = Ax.ᐃΔⲆΔⲆᐃΔ(a);
            var c = b * b * ⲆΔΔⲆΔᐃⵠ;
            return (a -= c) / ((b + 1) * (b + 1) * ⲆΔΔⲆΔᐃⵠ - c);
        };
        this.ᐃΔⲆΔⲆᐃΔ = function (a) {
            return Math.floor(Math.sqrt(a / ⲆΔΔⲆΔᐃⵠ));
        };
        this.ΔΔᐃⲆΔⵠᐃⵠⲆ = function (a) {
            Ax.ΔᐃⲆᐃᐃ = Ax.ᐃΔⲆΔⲆᐃΔ(a);
            Ax.ⲆᐃᐃⵠⲆⲆΔ = Ax.ΔΔᐃⲆΔΔΔ(a);
            Ax.ⵠⲆΔᐃⲆⵠⵠ = 0;
            Ax.Ⲇⵠⵠⵠᐃ = a;
        };
        this.ⵠᐃΔⵠⲆⲆⲆᐃΔ = function (a) {
            Ax.buttons[Ax.ΔΔΔⲆⵠⵠᐃ].info.active = 0;
            Ax.buttons[Ax.ΔᐃᐃⲆⵠᐃΔ].info.active = 1;
            Ax.buttons[Ax.ⲆΔⵠⵠⲆᐃΔ].info.active = 1;
            t();
            if (a.name.indexOf("Starver#") === -1) {
                document.getElementById("account_nickname_input").value = Hf.decodeURIComponent(Hf.escape(Hf.atob(a.name)));
            } else {
                document.getElementById("account_nickname_input").value = a.name;
            }
            Ax.ⵠⲆΔⲆⲆ = a.bread;
            var b = a.seasons;
            var c = b[b.length - 1];
            Ax.ᐃⵠⲆⲆⵠⵠⵠ = b;
            j.ΔΔᐃⲆΔⵠᐃⵠⲆ(c.score);
            Ax.Ⲇⵠⵠⵠᐃ = c.score;
            Ax.ᐃⲆᐃᐃᐃ = c.kill;
            Ax.ⵠⲆΔⵠᐃⵠⲆ = c.death;
            Ax.time = c.time;
            Ax.ΔⵠΔΔⲆⲆⵠ = c.bestScore;
            Ax.ΔΔⲆⵠᐃᐃᐃ = c.bestKill;
            Ax.ᐃΔⵠΔᐃⲆⵠ = c.bestTime;
            Ax.ᐃΔⵠᐃⲆⵠΔ = c.scoreTotal;
            Ax.ⵠΔⵠⲆΔⵠΔ = a.firstName;
            document.getElementById("serverAddressInput").value = a.privateServerRegion + " : " + a.privateServer;
            if (Ax.ⵠΔⵠⲆΔⵠΔ === undefined) {
                Ax.ⵠΔⵠⲆΔⵠΔ = 0;
            }
            Ax.ⵠⵠΔΔΔΔⲆ = Date.now() + a.privateServerTime;
            if (Number(a.privateServerTime) > 0) {
                Ax.ⵠⵠΔΔΔΔⲆ = Date.now() + Number(a.privateServerTime);
            }
            Ax.Δᐃᐃᐃⵠ = Date.now() + a.kit;
            if (Number(a.kit) > 0) {
                Ax.Δᐃᐃᐃⵠ = Date.now() + Number(a.kit);
            }
            var d = ⲆᐃᐃΔ.ⵠⵠⲆᐃⲆ;
            for (var e = 0; a.skins.length > e; e++) {
                var f = a.skins[e];
                if (f > 0) {
                    for (var g = 0; d.length > g; g++) {
                        if (d[g].id === e) {
                            j.unlock.ⵠᐃⵠᐃ[g] = 1;
                        }
                    }
                }
            }
            d = ⲆᐃᐃΔ.ⵠᐃⲆⲆᐃ;
            e = 0;
            for (; a.accessories.length > e; e++) {
                f = a.accessories[e];
                if (f > 0) {
                    for (g = 0; g < d.length; g++) {
                        if (e === d[g].id) {
                            j.unlock.ᐃⵠᐃⲆΔ[g] = 1;
                        }
                    }
                }
            }
            d = ⲆᐃᐃΔ.ⲆⵠⲆⲆⲆ;
            e = 0;
            for (; a.books.length > e; e++) {
                f = a.books[e];
                if (f > 0) {
                    for (g = 0; g < d.length; g++) {
                        if (e === d[g].id) {
                            j.unlock.ΔᐃᐃᐃΔ[g] = 1;
                        }
                    }
                }
            }
            d = ⲆᐃᐃΔ.ⲆΔⵠᐃ;
            e = 0;
            for (; e < a.bags.length; e++) {
                if ((f = a.bags[e]) > 0) {
                    for (g = 0; d.length > g; g++) {
                        if (e === d[g].id) {
                            j.unlock.ᐃᐃⵠᐃⲆ[g] = 1;
                        }
                    }
                }
            }
            d = ⲆᐃᐃΔ.ⲆⲆⲆⵠΔ;
            e = 0;
            for (; a.crates.length > e; e++) {
                if ((f = a.crates[e]) > 0) {
                    for (g = 0; g < d.length; g++) {
                        if (e === d[g].id) {
                            j.unlock.ᐃⲆⲆⲆⲆ[g] = 1;
                            j.unlock.ᐃⵠⵠΔΔ[g] = 1;
                        }
                    }
                }
            }
        };
        this.ΔⲆⵠᐃⵠᐃⲆⲆⲆ = function () {
            Hf.ⵠΔΔΔΔᐃⲆ = function () {
                K(F);
                (function (a) {
                    var b = new XMLHttpRequest();
                    b.open("GET", Tx + "login?token=" + Zx + "&type=" + Yx + (Rf ? "&userId=" + Rf.userId + "&userInfo=" + Rf.userInfo : ""));
                    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    b.onreadystatechange = function () {
                        if (this.readyState === 4 && this.status === 200 && b.responseText !== "0") {
                            a(JSON.parse(b.responseText));
                        }
                    };
                    b.send();
                })(j.ⵠᐃΔⵠⲆⲆⲆᐃΔ);
            };
            if (_x === 1) {
                Hf.ⵠΔΔΔΔᐃⲆ();
            }
        };
        Hf.ᐃΔⲆⵠⵠᐃⵠᐃⵠ = function () {
            Ax.buttons[Ax.ΔΔΔⲆⵠⵠᐃ].info.active = 1;
            Ax.buttons[Ax.ΔᐃᐃⲆⵠᐃΔ].info.active = 0;
            Ax.buttons[Ax.ⲆΔⵠⵠⲆᐃΔ].info.active = 0;
            K(F);
        };
        this.ⲆᐃⲆᐃΔ = function () {
            return Ax.buttons[Ax.ΔᐃᐃⲆⵠᐃΔ].info.active;
        };
        this.buttons[b] = Df(461, 105, 0, [ᐃⲆ.ⲆⵠⲆᐃⲆᐃΔ, ᐃⲆ.ⵠⵠⲆⲆᐃⵠⲆ, ᐃⲆ.ΔᐃΔᐃⲆⵠΔ], 1, da, function () {
            if (j.ⲆᐃⲆᐃΔ()) {
                K(f);
            } else {
                K(c);
            }
        }, -100, 80, ba | _, fa);
        this.buttons[b++].view = p;
        this.buttons[b] = Df(157, 158, 0, [ᐃⲆ.ⲆⵠᐃⲆⵠⲆᐃ, ᐃⲆ.ᐃΔᐃᐃⵠΔⵠ, ᐃⲆ.ⵠⵠⵠⵠΔᐃΔ], 1, da, function () {
            Hf.open("https://starveiopro.wikia.com/wiki/", "_blank");
        }, -35, 125, ba | _, fa);
        this.buttons[b++].view = C;
        this.buttons[b] = Df(66, 73, 0, [ᐃⲆ.ᐃᐃⵠᐃⲆᐃⵠ, ᐃⲆ.ⲆⵠᐃⲆΔΔⲆ, ᐃⲆ.ⲆⲆⲆᐃⲆⲆⲆ], 1, da, undefined, -68, 340, ba | _, fa);
        this.buttons[b++].view = C;
        this.buttons[b] = Df(66, 73, 0, [ᐃⲆ.ΔᐃΔⲆΔⵠⲆ, ᐃⲆ.ᐃᐃⲆΔⲆⲆᐃ, ᐃⲆ.ᐃΔⲆΔⵠⲆⵠ], 1, da, Zi, -30, 340, ba | _, fa);
        this.buttons[b++].view = C;
        this.ΔⵠⵠⲆᐃᐃᐃⲆⲆ = b;
        this.buttons[b] = Df(97, 66, 0, [ᐃⲆ.ΔᐃⵠⲆⲆⵠⵠ, ᐃⲆ.ⲆᐃⲆⲆⲆⵠⵠ, ᐃⲆ.ⵠᐃᐃⲆⵠᐃᐃ], 1, da, function () {
            uy(undefined, ks, Ax.ΔΔΔᐃⲆᐃΔ);
        }, -14, 151, ba | _, fa);
        this.buttons[b++].view = I;
        this.ⲆΔⲆⵠⲆΔⲆ = b;
        this.buttons[b] = Df(135, 66, 0, [ᐃⲆ.ⵠᐃⲆⲆⲆⲆⵠ, ᐃⲆ.ⲆᐃᐃΔΔⲆᐃ, ᐃⲆ.ⵠΔⲆΔⵠⵠᐃ], 1, da, function () {
            uy(undefined, undefined, Ax.ⲆΔⲆⵠⲆΔⲆ);
        }, 37.5, 151, ba | _, fa);
        this.buttons[b++].view = I;
        this.ⵠⵠⲆⲆΔⵠⲆ = b;
        this.buttons[b] = Df(160, 66, 0, [ᐃⲆ.ᐃΔᐃⵠⲆⵠⲆ, ᐃⲆ.ⵠᐃΔΔⵠⲆⲆ, ᐃⲆ.ΔΔⵠⵠΔΔΔ], 1, da, function () {
            uy(undefined, Fa, Ax.ⵠⵠⲆⲆΔⵠⲆ);
        }, 107.5, 151, ba | _, fa);
        this.buttons[b++].view = I;
        this.ΔΔΔᐃⲆᐃΔ = b;
        this.buttons[b] = Df(207, 66, 0, [ᐃⲆ.Δⵠᐃᐃᐃᐃᐃ, ᐃⲆ.ΔⲆⲆⵠᐃΔΔ, ᐃⲆ.ΔᐃᐃΔⵠΔⲆ], 1, da, function () {
            uy(Vq, undefined, Ax.ΔΔΔᐃⲆᐃΔ);
        }, 190.5, 151, ba | _, fa);
        this.buttons[b++].view = I;
        this.ⵠΔⵠᐃᐃⲆᐃ = b;
        this.buttons[b] = Df(144, 66, 0, [ᐃⲆ.ᐃᐃⵠⲆΔⲆⵠ, ᐃⲆ.ᐃⲆΔᐃΔΔᐃ, ᐃⲆ.ⲆΔⲆΔⲆᐃⵠ], 1, da, function () {
            uy(Ax.ⵠΔⵠᐃᐃⲆᐃ);
        }, 103.5, 110, ba | _, fa);
        this.buttons[b++].view = I;
        this.ⵠⵠΔᐃⲆⵠⵠ = b;
        this.buttons[b] = Df(124, 66, 0, [ᐃⲆ.ⵠΔⵠⵠΔΔⵠ, ᐃⲆ.ⲆⲆᐃⲆⲆᐃⲆ, ᐃⲆ.ⲆᐃᐃΔᐃⲆΔ], 1, da, function () {
            uy(Ax.ⵠⵠΔᐃⲆⵠⵠ);
        }, 177.5, 110, ba | _, fa);
        this.buttons[b++].view = I;
        this.ΔⲆⲆΔᐃⵠΔ = b;
        this.buttons[b] = Df(104, 66, 0, [ᐃⲆ.ⲆⲆᐃΔⲆⲆᐃ, ᐃⲆ.ⲆⲆΔⵠⲆᐃᐃ, ᐃⲆ.ΔⵠΔᐃᐃⲆⲆ], 1, da, function () {
            uy(Ax.ΔⲆⲆΔᐃⵠΔ);
        }, 242, 110, ba | _, fa);
        this.buttons[b++].view = I;
        this.ⲆΔⵠΔᐃᐃᐃ = b;
        this.buttons[b] = Df(46, 51, 0, [ᐃⲆ.ⵠᐃⵠⵠΔⵠᐃ, ᐃⲆ.ⲆᐃⵠⵠⵠΔⲆ, ᐃⲆ.ΔΔΔⵠᐃᐃⵠ], 1, da, function () {
            uy(Gr, sl, Io, Ax.ⲆΔⵠΔᐃᐃᐃ);
        }, -185, 528, ba | _, fa);
        this.buttons[b++].view = I;
        this.ⵠΔⵠΔⵠΔⵠ = b;
        this.buttons[b] = Df(46, 51, 0, [ᐃⲆ.ᐃᐃⲆⲆΔᐃΔ, ᐃⲆ.ΔⲆⲆⲆΔΔΔ, ᐃⲆ.ᐃⲆᐃΔⲆΔΔ], 1, da, function () {
            uy(undefined, Gr, hg, Ax.ⵠΔⵠΔⵠΔⵠ);
        }, -149, 528, ba | _, fa);
        this.buttons[b++].view = I;
        this.ΔΔᐃᐃΔⵠⵠ = b;
        this.buttons[b] = Df(46, 51, 0, [ᐃⲆ.ΔⲆΔⵠᐃᐃᐃ, ᐃⲆ.ΔⲆⵠⲆⲆΔᐃ, ᐃⲆ.ᐃⵠᐃⵠⲆᐃᐃ], 1, da, function () {
            uy(Gr, Ol, undefined, Ax.ΔΔᐃᐃΔⵠⵠ);
        }, -113, 528, ba | _, fa);
        this.buttons[b++].view = I;
        this.ΔᐃᐃⵠⵠⵠΔ = b;
        this.buttons[b] = Df(46, 51, 0, [ᐃⲆ.ⲆⵠⵠⵠⲆⵠΔ, ᐃⲆ.ᐃⲆᐃᐃⲆⵠⵠ, ᐃⲆ.ᐃᐃᐃⵠⵠⵠⲆ], 1, da, function () {
            uy(mr, sl, undefined, Ax.ΔᐃᐃⵠⵠⵠΔ);
        }, -77, 528, ba | _, fa);
        this.buttons[b++].view = I;
        this.ⵠⲆΔΔⵠⲆᐃ = b;
        this.buttons[b] = Df(46, 51, 0, [ᐃⲆ.ΔⵠΔΔⲆΔⵠ, ᐃⲆ.ⵠΔⵠⲆⵠⵠᐃ, ᐃⲆ.ⵠⵠⲆⲆⲆΔΔ], 1, da, function () {
            uy(sl, Io, undefined, Ax.ⵠⲆΔΔⵠⲆᐃ);
        }, -41, 528, ba | _, fa);
        this.buttons[b++].view = I;
        this.ⲆᐃⲆᐃⵠⵠⵠ = b;
        this.buttons[b] = Df(46, 51, 0, [ᐃⲆ.ΔⲆΔΔⵠⲆᐃ, ᐃⲆ.ᐃᐃⲆΔⲆⲆΔ, ᐃⲆ.ⵠΔⵠᐃᐃⵠⲆ], 1, da, function () {
            uy(lh, undefined, $e, Ax.ⲆᐃⲆᐃⵠⵠⵠ);
        }, -5, 528, ba | _, fa);
        this.buttons[b++].view = I;
        this.buttons[b] = Df(232, 352, 0, [ᐃⲆ.ΔᐃⵠⵠⲆᐃΔ, ᐃⲆ.ΔΔⲆⵠᐃⵠᐃ, ᐃⲆ.ΔⲆᐃⵠⲆᐃΔ], 1, da, function () {
            qy(300);
        }, -330, 135, ba | _, fa);
        this.buttons[b++].view = f;
        this.buttons[b] = Df(232, 352, 0, [ᐃⲆ.ⲆᐃᐃⲆⲆⵠΔ, ᐃⲆ.ⵠΔΔⲆⵠΔⲆ, ᐃⲆ.ΔΔΔΔⲆΔΔ], 1, da, function () {
            qy(600);
        }, -195, 135, ba | _, fa);
        this.buttons[b++].view = f;
        this.buttons[b] = Df(243, 374, 0, [ᐃⲆ.ⵠᐃⵠΔⲆⵠᐃ, ᐃⲆ.ΔⵠⵠⲆΔⲆⵠ, ᐃⲆ.ᐃᐃΔΔΔΔΔ], 1, da, function () {
            qy(2600);
        }, -60, 130, ba | _, fa);
        this.buttons[b++].view = f;
        this.buttons[b] = Df(232, 352, 0, [ᐃⲆ.ⲆΔᐃⵠᐃΔᐃ, ᐃⲆ.ⵠᐃᐃᐃΔΔⲆ, ᐃⲆ.ⲆᐃⲆΔᐃΔΔ], 1, da, function () {
            qy(7000);
        }, 78, 135, ba | _, fa);
        this.buttons[b++].view = f;
        this.buttons[b] = Df(243, 374, 0, [ᐃⲆ.ⵠⲆⲆⲆⵠⵠⵠ, ᐃⲆ.ᐃⲆᐃᐃᐃⲆⲆ, ᐃⲆ.ᐃⵠⲆⵠⲆΔᐃ], 1, da, function () {
            qy(20000);
        }, 213, 130, ba | _, fa);
        this.buttons[b++].view = f;
        this.buttons[b] = Df(58, 64, 0, [ᐃⲆ.ᐃⲆⵠᐃⲆΔΔ, ᐃⲆ.ᐃᐃΔⲆᐃⲆⵠ, ᐃⲆ.ΔⲆⵠΔᐃⲆⵠ], 1, da, function () {
            K(p);
        }, 300, 88, ba | _, fa);
        this.buttons[b++].view = f;
        this.buttons[b] = Df(323, 112, 0, [ᐃⲆ.ᐃΔΔᐃΔⲆΔ, ᐃⲆ.ᐃⲆⵠⵠΔΔⵠ, ᐃⲆ.ΔⲆᐃᐃⵠΔⲆ], 1, da, function () {
            K(D);
            Ea.ⵠⲆⲆΔⲆ();
        }, -315, 185, ba | _, fa);
        this.buttons[b++].view = m;
        this.buttons[b] = Df(323, 112, 0, [ᐃⲆ.ΔᐃⵠⲆⲆⲆⵠ, ᐃⲆ.ⲆᐃΔⲆΔⵠᐃ, ᐃⲆ.ΔΔΔᐃⲆᐃⲆ], 1, da, function () {
            K(S);
            Ka.ⵠⲆⲆΔⲆ();
        }, -315, 321, ba | _, fa);
        this.buttons[b++].view = m;
        this.buttons[b] = Df(323, 112, 0, [ᐃⲆ.ⲆⲆᐃΔΔᐃⵠ, ᐃⲆ.ΔᐃᐃΔΔⵠᐃ, ᐃⲆ.ᐃᐃⵠⲆⲆⲆⲆ], 1, da, function () {
            K(R);
            Ga.ⵠⲆⲆΔⲆ();
        }, 153, 185, ba | _, fa);
        this.buttons[b++].view = m;
        this.buttons[b] = Df(323, 112, 0, [ᐃⲆ.ᐃᐃⲆΔⵠᐃᐃ, ᐃⲆ.ΔΔⲆⵠΔⲆΔ, ᐃⲆ.ⲆⲆᐃⵠΔᐃΔ], 1, da, function () {
            K(Q);
            Ha.ⵠⲆⲆΔⲆ();
        }, 153, 321, ba | _, fa);
        this.buttons[b++].view = m;
        this.buttons[b] = Df(323, 112, 0, [ᐃⲆ.ⵠΔΔⵠΔⵠⲆ, ᐃⲆ.ᐃⵠΔⵠⵠΔⲆ, ᐃⲆ.ᐃⵠΔΔΔⲆᐃ], 1, da, function () {
            K(E);
            Ia.ⵠⲆⲆΔⲆ();
        }, 153, 463, ba | _, fa);
        this.buttons[b++].view = m;
        this.buttons[b] = Df(323, 112, 0, [ᐃⲆ.ΔⲆΔⲆⵠⲆΔ, ᐃⲆ.ᐃᐃⵠΔⲆᐃⲆ, ᐃⲆ.ⲆⲆᐃⲆᐃⵠΔ], 1, da, function () {
            K(L);
            Ja.ⵠⲆⲆΔⲆ();
        }, -315, 463, ba | _, fa);
        this.buttons[b++].view = m;
        this.buttons[b] = Df(327, 117, 0, [ᐃⲆ.ΔΔΔⵠⲆᐃᐃ, ᐃⲆ.ΔΔᐃⵠⲆⵠᐃ, ᐃⲆ.ΔᐃᐃⵠⲆⵠⵠ], 1, da, function () {
            K(H);
        }, 155, 70, Y, ha);
        this.buttons[b++].view = F;
        this.buttons[b] = Df(130, 129, 0, [ᐃⲆ.ⵠᐃᐃΔᐃᐃᐃ, ᐃⲆ.ΔᐃⵠⵠⵠⲆⲆ, ᐃⲆ.ᐃⲆΔΔᐃⵠΔ], 1, da, function () {
            P(y, fa, "none");
            K(p);
        }, 10, 40, ba | _, fa);
        this.buttons[b++].view = y;
        this.buttons[b] = Df(130, 129, 0, [ᐃⲆ.ⵠᐃᐃΔᐃᐃᐃ, ᐃⲆ.ΔᐃⵠⵠⵠⲆⲆ, ᐃⲆ.ᐃⲆΔΔᐃⵠΔ], 1, da, function () {
            P(z, fa, "none");
            K(p);
        }, 10, 40, ba | _, fa);
        this.buttons[b++].view = z;
        this.buttons[b] = Df(115, 73, 0, [ᐃⲆ.ⵠⵠᐃⵠⵠ, ᐃⲆ.ⲆΔΔΔᐃ, ᐃⲆ.ⲆⲆⲆⲆⲆ], 1, da, function () {
            K(p);
        }, 200, 140, ba | _, fa);
        this.buttons[b++].view = O;
        this.buttons[b] = Df(524, 110, 0, [ᐃⲆ.ⲆΔⲆΔⲆⵠΔ, ᐃⲆ.ⲆⲆΔΔⵠᐃⵠ, ᐃⲆ.ᐃᐃⲆⲆΔᐃⲆ], 1, da, function () {
            ry("Atlanta");
        }, -265, 300, ba | _, fa);
        this.buttons[b++].view = O;
        this.buttons[b] = Df(523, 110, 0, [ᐃⲆ.ΔⵠⵠᐃΔⲆⲆ, ᐃⲆ.ⵠⵠΔᐃΔⵠΔ, ᐃⲆ.ΔⲆⲆᐃᐃΔᐃ], 1, da, function () {
            ry("LosAngeles");
        }, 5, 300, ba | _, fa);
        this.buttons[b++].view = O;
        this.buttons[b] = Df(344, 110, 0, [ᐃⲆ.ⲆⲆⲆⵠⵠᐃᐃ, ᐃⲆ.ΔᐃΔᐃⵠΔⵠ, ᐃⲆ.ΔΔᐃΔⵠΔⵠ], 1, da, function () {
            ry("Frankfurt");
        }, -265, 365, ba | _, fa);
        this.buttons[b++].view = O;
        this.buttons[b] = Df(344, 110, 0, [ᐃⲆ.ΔⵠΔᐃⵠΔⵠ, ᐃⲆ.ΔⵠΔⲆᐃᐃΔ, ᐃⲆ.ΔⲆᐃⵠΔΔⵠ], 1, da, function () {
            ry("Osaka");
        }, 100, 365, ba | _, fa);
        this.buttons[b++].view = O;
        this.buttons[b] = Df(344, 110, 0, [ᐃⲆ.ⲆⵠΔⲆⵠⲆΔ, ᐃⲆ.ᐃΔⲆⲆᐃⵠⵠ, ᐃⲆ.ᐃΔᐃΔΔΔⵠ], 1, da, function () {
            ry("Sydney");
        }, -86, 365, ba | _, fa);
        this.buttons[b++].view = O;
        this.buttons[b] = Df(115, 73, 0, [ᐃⲆ.ⵠⵠᐃⵠⵠ, ᐃⲆ.ⲆΔΔΔᐃ, ᐃⲆ.ⲆⲆⲆⲆⲆ], 1, da, function () {
            K(O);
        }, 224, 140, ba | _, fa);
        this.buttons[b++].view = N;
        this.buttons[b] = Df(230, 352, 0, [ᐃⲆ.ΔⲆⲆⲆⵠⵠⵠ, ᐃⲆ.ⲆⲆⵠⵠᐃⵠΔ, ᐃⲆ.ᐃⲆᐃᐃⲆΔΔ], 1, da, function () {
            qy(350);
        }, -280, 240, ba | _, fa);
        this.buttons[b++].view = N;
        this.buttons[b] = Df(230, 352, 0, [ᐃⲆ.ⵠΔⵠᐃⲆᐃⵠ, ᐃⲆ.ⲆΔⵠΔᐃⲆⲆ, ᐃⲆ.ⲆⵠⲆΔΔⲆⵠ], 1, da, function () {
            qy(700);
        }, -130, 240, ba | _, fa);
        this.buttons[b++].view = N;
        this.buttons[b] = Df(230, 352, 0, [ᐃⲆ.ⲆᐃⵠᐃⲆⵠᐃ, ᐃⲆ.ⵠᐃⲆⲆⵠΔⵠ, ᐃⲆ.ᐃΔΔⵠⲆⲆⲆ], 1, da, function () {
            qy(1400);
        }, 20, 240, ba | _, fa);
        this.buttons[b++].view = N;
        this.buttons[b] = Df(230, 352, 0, [ᐃⲆ.ⵠᐃᐃⲆⲆΔΔ, ᐃⲆ.ΔΔⲆΔΔⵠΔ, ᐃⲆ.ΔⵠᐃΔⵠΔΔ], 1, da, function () {
            qy(3000);
        }, 170, 240, ba | _, fa);
        this.buttons[b++].view = N;
        this.buttons[b] = Df(105, 119, 0, [ᐃⲆ.ΔΔⵠΔΔⵠⵠ, ᐃⲆ.ᐃΔⲆⲆᐃⲆΔ, ᐃⲆ.ⲆⲆⵠΔⲆⲆⲆ], 1, da, function () {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            const b = Hf.document.createElement("textarea");
            b.value = Wf + "?server=" + a[1] + "&region=" + a[0];
            Hf.document.body.appendChild(b);
            b.select();
            Hf.document.execCommand("copy");
            Hf.document.body.removeChild(b);
        }, 170, 310, ba | _, fa);
        this.buttons[b++].view = q;
        this.buttons[b] = Df(105, 119, 0, [ᐃⲆ.ⵠΔⲆΔⲆⵠᐃ, ᐃⲆ.ΔᐃΔᐃΔⲆⲆ, ᐃⲆ.ⲆᐃΔⲆΔᐃΔ], 1, da, function () {
            (function () {
                var a = new XMLHttpRequest();
                a.open("GET", Tx + "rebootServer?token=" + Zx + "&userid=" + $x);
                a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                a.onreadystatechange = function () {
                    if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
                        const a = document.getElementById("serverAddressInput").value.split(" : ");
                        location.href = Wf + "?server=" + a[1] + "&region=" + a[0];
                    }
                };
                a.send();
            })();
        }, 235, 310, ba | _, fa);
        this.buttons[b++].view = q;
        this.buttons[b] = Df(204, 115, 0, [ᐃⲆ.ⲆⲆⵠΔⵠΔᐃ, ᐃⲆ.ΔⲆΔⲆⵠᐃΔ, ᐃⲆ.ΔⵠⵠᐃⵠΔⵠ], 1, da, function () {
            Hf.open("./commands.html", "_blank");
        }, -265, 490, ba | _, fa);
        this.buttons[b++].view = q;
        this.buttons[b] = Df(145, 69, 0, [ᐃⲆ.ΔⵠΔⵠⲆⲆΔ, ᐃⲆ.ᐃᐃⲆᐃᐃⲆⲆ, ᐃⲆ.ᐃΔΔⵠᐃⲆⲆ], 1, da, function () {
            K(k);
        }, -210, 170, ba | _, fa);
        this.buttons[b++].view = p;
        this.buttons[b] = Df(145, 69, 0, [ᐃⲆ.ⲆᐃΔⵠᐃᐃᐃ, ᐃⲆ.ᐃⲆⲆΔᐃΔᐃ, ᐃⲆ.ⵠΔΔΔⵠⵠΔ], 1, da, function () {
            K(J);
        }, 70, 170, ba | _, fa);
        this.buttons[b++].view = p;
        this.buttons[b] = Df(145, 69, 0, [ᐃⲆ.ⲆΔΔᐃᐃⵠᐃ, ᐃⲆ.ⲆⲆⵠΔᐃΔᐃ, ᐃⲆ.ⵠⵠⵠΔⲆⵠΔ], 1, da, function () {
            K(A);
        }, 70, 204, ba | _, fa);
        this.buttons[b++].view = p;
        this.buttons[b] = Df(145, 69, 0, [ᐃⲆ.ᐃⲆⵠⲆΔᐃⵠ, ᐃⲆ.ΔⵠᐃᐃᐃⵠⲆ, ᐃⲆ.ΔⲆΔⵠᐃⵠⵠ], 1, da, function () {
            K(M);
        }, -210, 204, ba | _, fa);
        this.buttons[b++].view = p;
        this.buttons[b] = Df(145, 69, 0, [ᐃⲆ.ᐃⲆⵠⲆΔᐃⵠ, ᐃⲆ.ΔⵠᐃᐃᐃⵠⲆ, ᐃⲆ.ΔⲆΔⵠᐃⵠⵠ], 1, da, function () {
            K(B);
        }, 70, 238, ba | _, fa);
        this.buttons[b++].view = p;
        this.buttons[b] = Df(145, 69, 0, [ᐃⲆ.ᐃⲆⵠⲆΔᐃⵠ, ᐃⲆ.ΔⵠᐃᐃᐃⵠⲆ, ᐃⲆ.ΔⲆΔⵠᐃⵠⵠ], 1, da, function () {
            if (j.ⲆᐃⲆᐃΔ()) {
                sy(0, 300);
            } else {
                K(c);
            }
        }, 307, 205, ba | _, fa);
        this.buttons[b++].view = p;
        this.buttons[b] = Df(145, 69, 0, [ᐃⲆ.ΔⲆΔΔΔΔⵠ, ᐃⲆ.ⲆⲆᐃⲆΔᐃⵠ, ᐃⲆ.ΔᐃⲆΔⵠΔⲆ], 1, da, function () {
            K(x);
        }, -210, 238, ba | _, fa);
        this.buttons[b++].view = p;
        this.buttons[b] = Df(145, 69, 0, [ᐃⲆ.ΔⲆΔΔΔΔⵠ, ᐃⲆ.ⲆⲆᐃⲆΔᐃⵠ, ᐃⲆ.ΔᐃⲆΔⵠΔⲆ], 1, da, function () {
            if (j.ⲆᐃⲆᐃΔ()) {
                sy(1, 600);
            } else {
                K(c);
            }
        }, 307, 239, ba | _, fa);
        this.buttons[b++].view = p;
        this.buttons[b] = Df(192, 101, 0, [ᐃⲆ.ⵠⲆⵠⵠⲆΔⲆ, ᐃⲆ.ⵠΔΔᐃⵠⲆᐃ, ᐃⲆ.ᐃΔⲆⵠⲆⲆᐃ], 1, da, function () {
            zy();
        }, -100, 250, ba | _, fa);
        this.buttons[b++].view = T;
        this.buttons[b] = Df(192, 104, 0, [ᐃⲆ.ⵠⵠⲆΔΔΔᐃ, ᐃⲆ.ᐃⵠⲆᐃᐃᐃΔ, ᐃⲆ.ⵠᐃᐃⲆΔⵠⵠ], 1, da, function () {
            zy();
        }, -100, 239, ba | _, fa);
        this.buttons[b++].view = G;
        this.buttons[b] = Df(192, 101, 0, [ᐃⲆ.ᐃΔⲆⵠᐃΔᐃ, ᐃⲆ.ⵠᐃΔᐃⵠⲆⵠ, ᐃⲆ.ᐃⲆΔⲆΔᐃⵠ], 1, da, function () {
            K(v);
        }, 10, 250, ba | _, fa);
        this.buttons[b++].view = T;
        this.buttons[b] = Df(192, 104, 0, [ᐃⲆ.ΔⲆΔⲆᐃⵠΔ, ᐃⲆ.ⵠⵠΔⲆΔⲆᐃ, ᐃⲆ.ⲆΔΔΔⵠᐃΔ], 1, da, function () {
            K(v);
        }, 10, 239, ba | _, fa);
        this.buttons[b++].view = G;
        ᐃⵠⲆⵠⲆ = [];
        ᐃⵠⲆⵠⲆ[ⲆⲆⵠ.ⵠΔⵠΔᐃ] = [ᐃⲆ.ᐃΔᐃⲆⲆΔᐃ, ᐃⲆ.ΔⵠΔᐃⵠΔⲆ, ᐃⲆ.ⵠⲆᐃᐃᐃΔᐃ];
        ᐃⵠⲆⵠⲆ[ⲆⲆⵠ.ⵠⵠⲆΔ] = [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ];
        ᐃⵠⲆⵠⲆ[ⲆⲆⵠ.ⲆᐃⲆΔ] = [ᐃⲆ.ΔᐃⲆⵠΔᐃΔ, ᐃⲆ.ⵠᐃⲆᐃⲆΔⲆ, ᐃⲆ.ⵠᐃⲆⲆⵠΔᐃ];
        ᐃⵠⲆⵠⲆ[ⲆⲆⵠ.ⵠⲆΔΔ] = [ᐃⲆ.ᐃⵠΔⲆᐃᐃΔ, ᐃⲆ.ΔΔᐃⲆⵠⲆΔ, ᐃⲆ.ⲆⲆᐃⲆΔΔΔ];
        ᐃⵠⲆⵠⲆ[ⲆⲆⵠ.ⵠⲆΔⵠ] = [ᐃⲆ.ⲆΔⲆⵠΔΔⲆ, ᐃⲆ.ⲆⵠⲆⵠⵠⵠᐃ, ᐃⲆ.ⵠᐃΔΔΔᐃⵠ];
        ᐃⵠⲆⵠⲆ[ⲆⲆⵠ.ⵠΔⲆⲆ] = [ᐃⲆ.ΔⵠΔⲆⲆΔᐃ, ᐃⲆ.ⵠᐃᐃⲆΔΔⲆ, ᐃⲆ.ⲆᐃⲆⲆⵠΔᐃ];
        ᐃⵠⲆⵠⲆ[ⲆⲆⵠ.ΔⲆⵠⵠ] = [ᐃⲆ.ᐃⲆΔⵠΔⵠⵠ, ᐃⲆ.ⵠΔΔΔΔᐃⵠ, ᐃⲆ.ⵠⲆⲆᐃⲆᐃⵠ];
        ᐃⵠⲆⵠⲆ[ⲆⲆⵠ.ᐃΔⲆᐃⲆ] = [ᐃⲆ.ᐃᐃᐃⲆⲆⲆΔ, ᐃⲆ.ΔᐃᐃᐃᐃΔⲆ, ᐃⲆ.ⲆⵠⲆⲆⵠⲆᐃ];
        ᐃⵠⲆⵠⲆ[ⲆⲆⵠ.ⵠΔΔⲆΔⲆⲆ] = [ᐃⲆ.ᐃᐃⲆᐃⲆΔⵠ, ᐃⲆ.ᐃⵠᐃᐃⲆΔⲆ, ᐃⲆ.ⵠΔΔΔⲆⵠⵠ];
        ⲆᐃΔⲆⵠΔⲆ = b;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, Zi, -29, 205, ba | _, fa);
        this.buttons[b++].view = D;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, -29, 300, ba | _, fa);
        this.buttons[b++].view = D;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, Rh, -29, 395, ba | _, fa);
        this.buttons[b++].view = D;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, Sk, 65, 205, ba | _, fa);
        this.buttons[b++].view = D;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, 65, 300, ba | _, fa);
        this.buttons[b++].view = D;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, Nh, 65, 395, ba | _, fa);
        this.buttons[b++].view = D;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, Ih, 159, 205, ba | _, fa);
        this.buttons[b++].view = D;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, Zi, 159, 300, ba | _, fa);
        this.buttons[b++].view = D;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, lh, 159, 395, ba | _, fa);
        this.buttons[b++].view = D;
        this.buttons[b] = Df(39, 122, 0, [ᐃⲆ.ᐃⲆᐃΔᐃᐃᐃ, ᐃⲆ.ᐃᐃΔⵠᐃΔΔ, ᐃⲆ.ΔⵠⲆⵠⲆᐃΔ], 1, da, undefined, -61, 315, ba | _, fa);
        this.buttons[b++].view = D;
        this.buttons[b] = Df(39, 122, 0, [ᐃⲆ.ᐃΔⵠΔΔΔΔ, ᐃⲆ.ⲆⵠΔᐃᐃⲆᐃ, ᐃⲆ.ΔⵠΔⵠⲆⲆᐃ], 1, da, sl, 260, 315, ba | _, fa);
        this.buttons[b++].view = D;
        this.buttons[b] = Df(115, 73, 0, [ᐃⲆ.ⵠⵠᐃⵠⵠ, ᐃⲆ.ⲆΔΔΔᐃ, ᐃⲆ.ⲆⲆⲆⲆⲆ], 1, da, function () {
            K(m);
        }, -320, 470, ba | _, fa);
        this.buttons[b++].view = D;
        ΔⵠΔΔⲆΔⲆⲆΔ = b;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, Ih, -29, 205, ba | _, fa);
        this.buttons[b++].view = S;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, -29, 300, ba | _, fa);
        this.buttons[b++].view = S;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, $e, -29, 395, ba | _, fa);
        this.buttons[b++].view = S;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, 65, 205, ba | _, fa);
        this.buttons[b++].view = S;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, hg, 65, 300, ba | _, fa);
        this.buttons[b++].view = S;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, Rh, 65, 395, ba | _, fa);
        this.buttons[b++].view = S;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, Vq, 159, 205, ba | _, fa);
        this.buttons[b++].view = S;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, mr, 159, 300, ba | _, fa);
        this.buttons[b++].view = S;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, 159, 395, ba | _, fa);
        this.buttons[b++].view = S;
        this.buttons[b] = Df(39, 122, 0, [ᐃⲆ.ᐃⲆᐃΔᐃᐃᐃ, ᐃⲆ.ᐃᐃΔⵠᐃΔΔ, ᐃⲆ.ΔⵠⲆⵠⲆᐃΔ], 1, da, lh, -61, 315, ba | _, fa);
        this.buttons[b++].view = S;
        this.buttons[b] = Df(39, 122, 0, [ᐃⲆ.ᐃΔⵠΔΔΔΔ, ᐃⲆ.ⲆⵠΔᐃᐃⲆᐃ, ᐃⲆ.ΔⵠΔⵠⲆⲆᐃ], 1, da, Ol, 260, 315, ba | _, fa);
        this.buttons[b++].view = S;
        this.buttons[b] = Df(115, 73, 0, [ᐃⲆ.ⵠⵠᐃⵠⵠ, ᐃⲆ.ⲆΔΔΔᐃ, ᐃⲆ.ⲆⲆⲆⲆⲆ], 1, da, function () {
            K(m);
        }, -320, 470, ba | _, fa);
        this.buttons[b++].view = S;
        ΔⲆⲆᐃⵠΔⵠⵠⵠ = b;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, -29, 205, ba | _, fa);
        this.buttons[b++].view = L;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, sl, -29, 300, ba | _, fa);
        this.buttons[b++].view = L;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, mr, -29, 395, ba | _, fa);
        this.buttons[b++].view = L;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, 65, 205, ba | _, fa);
        this.buttons[b++].view = L;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, Io, 65, 300, ba | _, fa);
        this.buttons[b++].view = L;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, 65, 395, ba | _, fa);
        this.buttons[b++].view = L;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, 159, 205, ba | _, fa);
        this.buttons[b++].view = L;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, 159, 300, ba | _, fa);
        this.buttons[b++].view = L;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, 159, 395, ba | _, fa);
        this.buttons[b++].view = L;
        this.buttons[b] = Df(39, 122, 0, [ᐃⲆ.ᐃⲆᐃΔᐃᐃᐃ, ᐃⲆ.ᐃᐃΔⵠᐃΔΔ, ᐃⲆ.ΔⵠⲆⵠⲆᐃΔ], 1, da, undefined, -61, 315, ba | _, fa);
        this.buttons[b++].view = L;
        this.buttons[b] = Df(39, 122, 0, [ᐃⲆ.ᐃΔⵠΔΔΔΔ, ᐃⲆ.ⲆⵠΔᐃᐃⲆᐃ, ᐃⲆ.ΔⵠΔⵠⲆⲆᐃ], 1, da, Zi, 260, 315, ba | _, fa);
        this.buttons[b++].view = L;
        this.buttons[b] = Df(115, 73, 0, [ᐃⲆ.ⵠⵠᐃⵠⵠ, ᐃⲆ.ⲆΔΔΔᐃ, ᐃⲆ.ⲆⲆⲆⲆⲆ], 1, da, function () {
            K(m);
        }, -320, 470, ba | _, fa);
        this.buttons[b++].view = L;
        ᐃⵠⵠⵠⲆⵠᐃΔΔ = b;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, Ol, -29, 205, ba | _, fa);
        this.buttons[b++].view = R;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, Gr, -29, 300, ba | _, fa);
        this.buttons[b++].view = R;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, Vq, -29, 395, ba | _, fa);
        this.buttons[b++].view = R;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, 65, 205, ba | _, fa);
        this.buttons[b++].view = R;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, 65, 300, ba | _, fa);
        this.buttons[b++].view = R;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, 65, 395, ba | _, fa);
        this.buttons[b++].view = R;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, 159, 205, ba | _, fa);
        this.buttons[b++].view = R;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, Ol, 159, 300, ba | _, fa);
        this.buttons[b++].view = R;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, Sk, 159, 395, ba | _, fa);
        this.buttons[b++].view = R;
        this.buttons[b] = Df(39, 122, 0, [ᐃⲆ.ᐃⲆᐃΔᐃᐃᐃ, ᐃⲆ.ᐃᐃΔⵠᐃΔΔ, ᐃⲆ.ΔⵠⲆⵠⲆᐃΔ], 1, da, Gr, -61, 315, ba | _, fa);
        this.buttons[b++].view = R;
        this.buttons[b] = Df(39, 122, 0, [ᐃⲆ.ᐃΔⵠΔΔΔΔ, ᐃⲆ.ⲆⵠΔᐃᐃⲆᐃ, ᐃⲆ.ΔⵠΔⵠⲆⲆᐃ], 1, da, Fa, 260, 315, ba | _, fa);
        this.buttons[b++].view = R;
        this.buttons[b] = Df(115, 73, 0, [ᐃⲆ.ⵠⵠᐃⵠⵠ, ᐃⲆ.ⲆΔΔΔᐃ, ᐃⲆ.ⲆⲆⲆⲆⲆ], 1, da, function () {
            K(m);
        }, -320, 470, ba | _, fa);
        this.buttons[b++].view = R;
        ΔⲆⲆⵠⲆᐃΔⲆᐃ = b;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, -29, 205, ba | _, fa);
        this.buttons[b++].view = Q;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, hg, -29, 300, ba | _, fa);
        this.buttons[b++].view = Q;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, Qr, -29, 395, ba | _, fa);
        this.buttons[b++].view = Q;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, Nh, 65, 205, ba | _, fa);
        this.buttons[b++].view = Q;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, 65, 300, ba | _, fa);
        this.buttons[b++].view = Q;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, 65, 395, ba | _, fa);
        this.buttons[b++].view = Q;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, 159, 205, ba | _, fa);
        this.buttons[b++].view = Q;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, Qr, 159, 300, ba | _, fa);
        this.buttons[b++].view = Q;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, 159, 395, ba | _, fa);
        this.buttons[b++].view = Q;
        this.buttons[b] = Df(39, 122, 0, [ᐃⲆ.ᐃⲆᐃΔᐃᐃᐃ, ᐃⲆ.ᐃᐃΔⵠᐃΔΔ, ᐃⲆ.ΔⵠⲆⵠⲆᐃΔ], 1, da, Vq, -61, 315, ba | _, fa);
        this.buttons[b++].view = Q;
        this.buttons[b] = Df(39, 122, 0, [ᐃⲆ.ᐃΔⵠΔΔΔΔ, ᐃⲆ.ⲆⵠΔᐃᐃⲆᐃ, ᐃⲆ.ΔⵠΔⵠⲆⲆᐃ], 1, da, Qr, 260, 315, ba | _, fa);
        this.buttons[b++].view = Q;
        this.buttons[b] = Df(115, 73, 0, [ᐃⲆ.ⵠⵠᐃⵠⵠ, ᐃⲆ.ⲆΔΔΔᐃ, ᐃⲆ.ⲆⲆⲆⲆⲆ], 1, da, function () {
            K(m);
        }, -320, 470, ba | _, fa);
        this.buttons[b++].view = Q;
        ⵠΔΔᐃᐃΔΔⵠⲆ = b;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, -29, 205, ba | _, fa);
        this.buttons[b++].view = E;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, -29, 300, ba | _, fa);
        this.buttons[b++].view = E;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, -29, 395, ba | _, fa);
        this.buttons[b++].view = E;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, 65, 205, ba | _, fa);
        this.buttons[b++].view = E;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, 65, 300, ba | _, fa);
        this.buttons[b++].view = E;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, hg, 65, 395, ba | _, fa);
        this.buttons[b++].view = E;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, undefined, 159, 205, ba | _, fa);
        this.buttons[b++].view = E;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, Qr, 159, 300, ba | _, fa);
        this.buttons[b++].view = E;
        this.buttons[b] = Df(178, 182, 0, [ᐃⲆ.ᐃᐃⲆΔ, ᐃⲆ.ᐃⲆΔⵠ, ᐃⲆ.ΔⲆᐃⲆ], 1, da, Rh, 159, 395, ba | _, fa);
        this.buttons[b++].view = E;
        this.buttons[b] = Df(39, 122, 0, [ᐃⲆ.ᐃⲆᐃΔᐃᐃᐃ, ᐃⲆ.ᐃᐃΔⵠᐃΔΔ, ᐃⲆ.ΔⵠⲆⵠⲆᐃΔ], 1, da, undefined, -61, 315, ba | _, fa);
        this.buttons[b++].view = E;
        this.buttons[b] = Df(39, 122, 0, [ᐃⲆ.ᐃΔⵠΔΔΔΔ, ᐃⲆ.ⲆⵠΔᐃᐃⲆᐃ, ᐃⲆ.ΔⵠΔⵠⲆⲆᐃ], 1, da, undefined, 260, 315, ba | _, fa);
        this.buttons[b++].view = E;
        this.buttons[b] = Df(115, 73, 0, [ᐃⲆ.ⵠⵠᐃⵠⵠ, ᐃⲆ.ⲆΔΔΔᐃ, ᐃⲆ.ⲆⲆⲆⲆⲆ], 1, da, function () {
            K(m);
        }, -320, 470, ba | _, fa);
        this.buttons[b++].view = E;
        this.buttons[b] = Df(260, 260, 0, [ᐃⲆ.ⲆⲆⵠⵠⵠΔΔ, ᐃⲆ.ᐃᐃⲆⲆᐃΔΔ, ᐃⲆ.ΔΔᐃᐃᐃᐃⵠ], 1, da, function () {
            if (j.ⲆᐃⲆᐃΔ()) {
                jy(3, 50);
            } else {
                K(c);
            }
        }, -65, 197, ba | _, fa);
        this.buttons[b++].view = J;
        this.buttons[b] = Df(115, 73, 0, [ᐃⲆ.ⵠⵠᐃⵠⵠ, ᐃⲆ.ⲆΔΔΔᐃ, ᐃⲆ.ⲆⲆⲆⲆⲆ], 1, da, function () {
            K(p);
        }, 309, 180, ba | _, fa);
        this.buttons[b++].view = J;
        this.buttons[b] = Df(260, 260, 0, [ᐃⲆ.ΔⵠᐃⵠᐃⵠΔ, ᐃⲆ.ᐃⲆⵠᐃᐃᐃΔ, ᐃⲆ.ΔᐃΔⲆΔⲆᐃ], 1, da, function () {
            if (j.ⲆᐃⲆᐃΔ()) {
                jy(0, 100);
            } else {
                K(c);
            }
        }, -65, 197, ba | _, fa);
        this.buttons[b++].view = k;
        this.buttons[b] = Df(115, 73, 0, [ᐃⲆ.ⵠⵠᐃⵠⵠ, ᐃⲆ.ⲆΔΔΔᐃ, ᐃⲆ.ⲆⲆⲆⲆⲆ], 1, da, function () {
            K(p);
        }, 309, 180, ba | _, fa);
        this.buttons[b++].view = k;
        this.buttons[b] = Df(260, 260, 0, [ᐃⲆ.ΔⲆⵠᐃⵠᐃⵠ, ᐃⲆ.ΔⵠⲆᐃⲆⲆΔ, ᐃⲆ.ΔⲆⵠᐃⵠΔⵠ], 1, da, function () {
            if (j.ⲆᐃⲆᐃΔ()) {
                jy(4, 150);
            } else {
                K(c);
            }
        }, -65, 197, ba | _, fa);
        this.buttons[b++].view = A;
        this.buttons[b] = Df(115, 73, 0, [ᐃⲆ.ⵠⵠᐃⵠⵠ, ᐃⲆ.ⲆΔΔΔᐃ, ᐃⲆ.ⲆⲆⲆⲆⲆ], 1, da, function () {
            K(p);
        }, 309, 180, ba | _, fa);
        this.buttons[b++].view = A;
        this.buttons[b] = Df(260, 260, 0, [ᐃⲆ.ᐃᐃⲆⵠᐃᐃΔ, ᐃⲆ.ΔᐃⵠΔⲆΔᐃ, ᐃⲆ.ΔᐃⲆⵠⲆⵠΔ], 1, da, function () {
            if (j.ⲆᐃⲆᐃΔ()) {
                jy(1, 300);
            } else {
                K(c);
            }
        }, -65, 197, ba | _, fa);
        this.buttons[b++].view = M;
        this.buttons[b] = Df(115, 73, 0, [ᐃⲆ.ⵠⵠᐃⵠⵠ, ᐃⲆ.ⲆΔΔΔᐃ, ᐃⲆ.ⲆⲆⲆⲆⲆ], 1, da, function () {
            K(p);
        }, 309, 180, ba | _, fa);
        this.buttons[b++].view = M;
        this.buttons[b] = Df(260, 260, 0, [ᐃⲆ.ⲆᐃⲆᐃΔⲆΔ, ᐃⲆ.ΔᐃΔⲆᐃΔⵠ, ᐃⲆ.ⵠⵠⵠⵠᐃᐃⵠ], 1, da, function () {
            if (j.ⲆᐃⲆᐃΔ()) {
                jy(2, 600);
            } else {
                K(c);
            }
        }, -65, 197, ba | _, fa);
        this.buttons[b++].view = x;
        this.buttons[b] = Df(115, 73, 0, [ᐃⲆ.ⵠⵠᐃⵠⵠ, ᐃⲆ.ⲆΔΔΔᐃ, ᐃⲆ.ⲆⲆⲆⲆⲆ], 1, da, function () {
            K(p);
        }, 309, 180, ba | _, fa);
        this.buttons[b++].view = x;
        this.buttons[b] = Df(260, 260, 0, [ᐃⲆ.ᐃᐃⲆⵠᐃᐃΔ, ᐃⲆ.ΔᐃⵠΔⲆΔᐃ, ᐃⲆ.ΔᐃⲆⵠⲆⵠΔ], 1, da, function () {
            if (j.ⲆᐃⲆᐃΔ()) {
                jy(5, 300);
            } else {
                K(c);
            }
        }, -65, 197, ba | _, fa);
        this.buttons[b++].view = B;
        this.buttons[b] = Df(115, 73, 0, [ᐃⲆ.ⵠⵠᐃⵠⵠ, ᐃⲆ.ⲆΔΔΔᐃ, ᐃⲆ.ⲆⲆⲆⲆⲆ], 1, da, function () {
            K(p);
        }, 309, 180, ba | _, fa);
        this.buttons[b++].view = B;
        var ta = b;
        this.buttons[b] = Df(46, 51, 0, [ᐃⲆ.ⲆᐃⵠⲆⲆⲆΔ, ᐃⲆ.ⵠⲆⵠΔᐃΔⵠ, ᐃⲆ.ΔᐃⵠⲆⵠⲆᐃ], 1, da, function () {
            sa(undefined, 0);
        }, -305, 132, ba | _, fa);
        this.buttons[b++].view = v;
        var ua = b;
        this.buttons[b] = Df(46, 51, 0, [ᐃⲆ.ΔⲆΔⵠⲆᐃⲆ, ᐃⲆ.ΔⵠᐃΔΔΔᐃ, ᐃⲆ.ⲆΔᐃΔΔᐃᐃ], 1, da, function () {
            sa(lh, 1);
        }, -273, 132, ba | _, fa);
        this.buttons[b++].view = v;
        var va = b;
        this.buttons[b] = Df(46, 51, 0, [ᐃⲆ.ⵠΔⲆᐃᐃᐃⲆ, ᐃⲆ.ΔᐃⲆⵠᐃⵠⲆ, ᐃⲆ.ᐃⵠΔⵠΔᐃΔ], 1, da, function () {
            sa(Qr, 2);
        }, -241, 132, ba | _, fa);
        this.buttons[b++].view = v;
        var wa = b;
        this.buttons[b] = Df(46, 51, 0, [ᐃⲆ.ᐃⵠⵠΔⵠⵠⵠ, ᐃⲆ.ᐃΔⵠᐃⵠⵠᐃ, ᐃⲆ.ΔⵠⵠΔⲆⲆⵠ], 1, da, function () {
            sa(undefined, 3);
        }, -305, 165, ba | _, fa);
        this.buttons[b++].view = v;
        var xa = b;
        this.buttons[b] = Df(46, 51, 0, [ᐃⲆ.ᐃⵠᐃΔⲆⵠⲆ, ᐃⲆ.ⵠΔΔⵠⵠⵠⲆ, ᐃⲆ.ⲆᐃⵠΔᐃᐃΔ], 1, da, function () {
            sa(lh, 4);
        }, -273, 165, ba | _, fa);
        this.buttons[b++].view = v;
        var ya = b;
        this.buttons[b] = Df(46, 51, 0, [ᐃⲆ.ⲆᐃᐃᐃᐃⲆᐃ, ᐃⲆ.ΔΔΔᐃᐃⲆⵠ, ᐃⲆ.ⲆΔᐃⵠᐃΔⵠ], 1, da, function () {
            sa(lh, 5);
        }, -241, 165, ba | _, fa);
        this.buttons[b++].view = v;
        var za = b;
        this.buttons[b] = Df(460, 73, 0, [ᐃⲆ.ⵠᐃᐃΔⲆᐃⵠ, ᐃⲆ.ⵠᐃΔⵠⵠΔⲆ, ᐃⲆ.ⲆⵠΔⲆⲆᐃᐃ], 1, da, function () {
            sa(-1);
        }, -180, 170, ba | _, fa);
        this.buttons[b++].view = v;
        var Aa = b;
        this.buttons[b] = Df(222, 68, 0, [ᐃⲆ.ⵠᐃⲆⵠⵠⲆΔ, ᐃⲆ.ⲆᐃⵠΔⲆᐃᐃ, ᐃⲆ.ΔⵠⵠΔᐃᐃΔ], 1, da, function () {
            sa(0);
        }, -180, 215, ba | _, fa);
        this.buttons[b++].view = v;
        var Ba = b;
        this.buttons[b] = Df(222, 68, 0, [ᐃⲆ.ⲆⲆᐃⵠⵠⲆⵠ, ᐃⲆ.ᐃⲆⲆⵠⲆᐃⲆ, ᐃⲆ.ⵠΔᐃΔⲆⵠᐃ], 1, da, function () {
            sa(4);
        }, -180, 260, ba | _, fa);
        this.buttons[b++].view = v;
        var Ca = b;
        this.buttons[b] = Df(222, 68, 0, [ᐃⲆ.ⵠΔᐃΔᐃⵠⲆ, ᐃⲆ.ⲆⵠⵠᐃΔΔⵠ, ᐃⲆ.ᐃᐃᐃᐃⲆⲆⵠ], 1, da, function () {
            sa(2);
        }, -60, 215, ba | _, fa);
        this.buttons[b++].view = v;
        var Da = b;
        this.buttons[b] = Df(222, 68, 0, [ᐃⲆ.ᐃⵠΔΔⵠΔⵠ, ᐃⲆ.ΔΔᐃΔⲆᐃᐃ, ᐃⲆ.ⲆᐃᐃΔᐃⵠᐃ], 1, da, function () {
            sa(3);
        }, -60, 260, ba | _, fa);
        this.buttons[b++].view = v;
        this.ᐃⵠΔⲆⵠΔΔ = b;
        this.buttons[b] = Df(143, 66, 0, [ᐃⲆ.ⵠᐃΔⲆᐃΔⲆ, ᐃⲆ.ᐃᐃᐃⵠᐃΔⵠ, ᐃⲆ.ⲆΔᐃⲆⲆⵠⲆ], 1, da, function () {
            uy(cn, Ax.ᐃⵠΔⲆⵠΔΔ);
        }, -298, 110, ba | _, fa);
        this.buttons[b++].view = I;
        this.ᐃⲆⵠΔⲆⲆⵠ = b;
        this.buttons[b] = Df(104, 66, 0, [ᐃⲆ.ᐃⵠⵠΔᐃΔΔ, ᐃⲆ.ᐃⵠᐃᐃⵠⲆⵠ, ᐃⲆ.ⲆⵠΔⵠⵠᐃΔ], 1, da, function () {
            uy(undefined, Ax.ᐃⲆⵠΔⲆⲆⵠ);
        }, -223, 110, ba | _, fa);
        this.buttons[b++].view = I;
        this.ⲆⲆⲆᐃΔⵠΔ = b;
        this.buttons[b] = Df(110, 66, 0, [ᐃⲆ.ΔⵠΔᐃⵠⵠᐃ, ᐃⲆ.ᐃⵠΔⵠⲆⲆⲆ, ᐃⲆ.ΔⲆⵠⵠᐃᐃᐃ], 1, da, function () {
            uy(undefined, Ax.ⲆⲆⲆᐃΔⵠΔ);
        }, -168, 110, ba | _, fa);
        this.buttons[b++].view = I;
        this.ΔⲆⲆᐃᐃⵠΔ = b;
        this.buttons[b] = Df(88, 66, 0, [ᐃⲆ.ⲆΔⵠⲆᐃᐃΔ, ᐃⲆ.ⲆⵠΔᐃΔᐃⵠ, ᐃⲆ.ⲆᐃⲆᐃⵠᐃⵠ], 1, da, function () {
            uy(hg, Ax.ΔⲆⲆᐃᐃⵠΔ);
        }, -110, 110, ba | _, fa);
        this.buttons[b++].view = I;
        this.ΔΔⲆᐃⲆΔᐃ = b;
        this.buttons[b] = Df(88, 66, 0, [ᐃⲆ.ΔⲆᐃⲆⲆΔΔ, ᐃⲆ.ᐃΔⲆⲆΔⵠΔ, ᐃⲆ.ⵠⲆⲆⵠᐃΔᐃ], 1, da, function () {
            uy(Vq, Ax.ΔΔⲆᐃⲆΔᐃ);
        }, -63, 110, ba | _, fa);
        this.buttons[b++].view = I;
        this.buttons[b] = Df(86, 44, 0, [ᐃⲆ.ⵠᐃⵠΔΔⵠᐃ, ᐃⲆ.ᐃⲆⲆΔⵠⲆΔ, ᐃⲆ.ⵠⵠⲆᐃᐃⲆΔ], 1, da, function () {
            Hf.open("./terms.html", "_blank");
        }, 349, 290, ba | _, fa);
        this.buttons[b++].view = p;
        var Ea = new e(ⲆᐃᐃΔ.ⵠⵠⲆᐃⲆ, ⲆᐃΔⲆⵠΔⲆ, function (a) {
            Ax.ⵠᐃⵠᐃ = a;
            if (Ax.unlock.ⵠᐃⵠᐃ[a] === 1) {
                ΔⲆⲆΔ.set("starve_skin", "" + a, {
                    expires: 30
                });
            }
        }, this.ⵠᐃⵠᐃ, this.unlock.ⵠᐃⵠᐃ);
        var Ga = new e(ⲆᐃᐃΔ.ⲆΔⵠᐃ, ᐃⵠⵠⵠⲆⵠᐃΔΔ, function (a) {
            Ax.ᐃᐃⵠᐃⲆ = a;
            if (Ax.unlock.ᐃᐃⵠᐃⲆ[a] === 1) {
                ΔⲆⲆΔ.set("starve_bag", "" + a, {
                    expires: 30
                });
            }
        }, this.ᐃᐃⵠᐃⲆ, this.unlock.ᐃᐃⵠᐃⲆ);
        var Ha = new e(ⲆᐃᐃΔ.ⲆⵠⲆⲆⲆ, ΔⲆⲆⵠⲆᐃΔⲆᐃ, function (a) {
            Ax.ΔᐃᐃᐃΔ = a;
            if (Ax.unlock.ΔᐃᐃᐃΔ[a] === 1) {
                ΔⲆⲆΔ.set("starve_book", "" + a, {
                    expires: 30
                });
            }
        }, this.ΔᐃᐃᐃΔ, this.unlock.ΔᐃᐃᐃΔ);
        var Ia = new e(ⲆᐃᐃΔ.ⲆⲆⲆⵠΔ, ⵠΔΔᐃᐃΔΔⵠⲆ, function (a) {
            Ax.ᐃⵠⵠΔΔ = a;
            if (Ax.unlock.ᐃⵠⵠΔΔ[a] === 1) {
                ΔⲆⲆΔ.set("starve_dead", "" + a, {
                    expires: 30
                });
            }
        }, this.ᐃⵠⵠΔΔ, this.unlock.ᐃⵠⵠΔΔ);
        var Ja = new e(ⲆᐃᐃΔ.ⲆⲆⲆⵠΔ, ΔⲆⲆᐃⵠΔⵠⵠⵠ, function (a) {
            Ax.ᐃⲆⲆⲆⲆ = a;
            if (Ax.unlock.ᐃⲆⲆⲆⲆ[a] === 1) {
                ΔⲆⲆΔ.set("starve_crate", "" + a, {
                    expires: 30
                });
            }
        }, this.ᐃⲆⲆⲆⲆ, this.unlock.ᐃⲆⲆⲆⲆ);
        var Ka = new e(ⲆᐃᐃΔ.ⵠᐃⲆⲆᐃ, ΔⵠΔΔⲆΔⲆⲆΔ, function (a) {
            Ax.ᐃⵠᐃⲆΔ = a;
            if (Ax.unlock.ᐃⵠᐃⲆΔ[a] === 1) {
                ΔⲆⲆΔ.set("starve_accessory", "" + a, {
                    expires: 30
                });
            }
        }, this.ᐃⵠᐃⲆΔ, this.unlock.ᐃⵠᐃⲆΔ);
        this.ᐃΔΔᐃᐃᐃΔ = function (a) {
            Jx.ⵠⵠⲆⲆ = Sf(j.ΔΔ, a);
            for (var b = 0; b < j.buttons.length; b++) {
                if (j.buttons[b].info.active === ha) {
                    j.buttons[b].ⵠⲆⵠᐃ(j.ΔΔ, Jx.ⵠⵠⲆⲆ, Af);
                }
            }
        };
        this.ⵠΔΔᐃⵠᐃⵠ = function (a) {
            Jx.ⵠⵠⲆⲆ = Sf(j.ΔΔ, a);
            for (var b = 0; j.buttons.length > b; b++) {
                var c = j.buttons[b];
                if (ha === c.info.active && c.ⵠⲆⵠᐃ(j.ΔΔ, Jx.ⵠⵠⲆⲆ, xf)) {
                    c.info.callback();
                    return;
                }
            }
        };
        this.ΔⵠⲆⲆᐃⲆΔ = false;
        this.ⵠΔⲆⵠⵠᐃΔ = function (b) {
            Jx.ⵠⵠⲆⲆ = Sf(j.ΔΔ, b);
            var c = yj;
            for (var d = 0; d < j.buttons.length; d++) {
                if (j.buttons[d].info.active === ha) {
                    c |= j.buttons[d].ⵠⲆⵠᐃ(j.ΔΔ, Jx.ⵠⵠⲆⲆ, Pf);
                }
            }
            if (c !== j.ΔⵠⲆⲆᐃⲆΔ) {
                j.ΔⵠⲆⲆᐃⲆΔ = c;
                a.style.cursor = c ? j.ᐃⵠΔⵠΔΔᐃ : j.ⲆᐃⲆᐃᐃΔⵠ;
            }
        };
        this.ⵠⲆⵠⲆⲆⲆⲆ = function () {
            Hf.addEventListener("mousedown", this.ᐃΔΔᐃᐃᐃΔ, false);
            Hf.addEventListener("mouseup", this.ⵠΔΔᐃⵠᐃⵠ, Ah);
            Hf.addEventListener("mousemove", this.ⵠΔⲆⵠⵠᐃΔ, bk);
        };
        this.ᐃᐃᐃⲆⵠⵠᐃ = function () {
            Hf.removeEventListener("mousedown", this.ᐃΔΔᐃᐃᐃΔ, false);
            Hf.removeEventListener("mouseup", this.ⵠΔΔᐃⵠᐃⵠ, Ag);
            Hf.removeEventListener("mousemove", this.ⵠΔⲆⵠⵠᐃΔ, false);
        };
    }
    function jx(a, b) {
        this.ΔΔ = a;
        this.Δ = b;
        var c = this;
        this.ΔᐃᐃΔΔΔⵠ = eo;
        this.ΔᐃⲆΔΔⲆΔ = {
            id: document.getElementById("scoreboard"),
            style: document.getElementById("scoreboard").style,
            height: 0,
            translate: {
                x: 0,
                y: 0
            },
            ⲆΔᐃ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = this.translate.y + "px";
            },
            ⵠᐃᐃΔΔ: function () {
                this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + Ex.ΔⲆⲆⵠⵠⵠⵠ.ⵠⵠᐃᐃΔⵠⲆ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + yb[335] + " : " + Ex.Δⵠᐃ + "</div><div class=\"stats\"> " + yb[334] + " : " + Ex.ΔⲆⲆⵠⵠⵠⵠ.ᐃⲆᐃᐃᐃ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + yb[333] + " : " + Ex.ΔⲆⲆⵠⵠⵠⵠ.Ⲇⵠⵠⵠᐃ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + Ex.ΔⲆⲆⵠⵠⵠⵠ.ΔⵠⵠΔᐃⵠⲆ + " " + yb[332] + "</div></div><div id=\"shop_points\">" + yb[331] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + yb[329] + "</div><div class=\"social\" id=\"fffacebook\">" + yb[330] + "</div></div><div id=\"bbback\">" + yb[328] + "</div>";
                this.style.display = "inline-block";
                document.getElementById("tttwitter").addEventListener("mouseup", gx, false);
                document.getElementById("bbback").addEventListener("mouseup", function () {
                    Fx.ⲆⲆⵠᐃᐃ(Ax.ᐃΔᐃⲆΔ);
                }, false);
                document.getElementById("fffacebook").addEventListener("mouseup", ax, bl);
                this.height = Math.floor(this.id.clientHeight / 2);
                (function () {
                    var a = new XMLHttpRequest();
                    a.open("GET", Tx + "getBreadAndScore?userid=" + $x);
                    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    a.onreadystatechange = function () {
                        if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
                            var b = JSON.parse(a.responseText);
                            var c = b.b - Ax.ⵠⲆΔⲆⲆ;
                            Ax.ⵠⲆΔⲆⲆ = b.b;
                            Ax.Ⲇⵠⵠⵠᐃ = b.s;
                            Ax.ΔᐃⲆᐃᐃ = Ax.ᐃΔⲆΔⲆᐃΔ(Ax.Ⲇⵠⵠⵠᐃ);
                            Ax.ⲆᐃᐃⵠⲆⲆΔ = Ax.ΔΔᐃⲆΔΔΔ(Ax.Ⲇⵠⵠⵠᐃ);
                            Ax.ⵠⲆΔᐃⲆⵠⵠ = 0;
                            document.getElementById("breadWonInner").innerHTML = "" + c;
                        }
                    };
                    a.send();
                })();
            }
        };
        var d;
        var f = 0;
        function e() {
            c.ⲆΔᐃ();
            if (++f != 30) {
                Hf.setTimeout(e, 33);
            } else {
                c.ⲆΔᐃ();
            }
        }
        this.ⲆⲆⵠᐃᐃ = function (a) {
            if (c.ΔᐃᐃΔΔΔⵠ === Pj) {
                c.ΔᐃᐃΔΔΔⵠ = yj;
                d = a;
                g = -1;
                i();
                Ox();
            }
        };
        var g = -1;
        function i() {
            c.ⲆΔᐃ();
            if (++g == 30) {
                c.stop();
                c.ΔᐃⲆΔΔⲆΔ.style.display = "none";
                d();
                return;
            }
            Hf.setTimeout(i, 33);
        }
        this.ΔΔΔᐃⵠ = false;
        this.stop = function () {
            this.ΔΔΔᐃⵠ = false;
        };
        this.ᐃΔᐃⲆΔ = function () {
            Qx();
            document.getElementById("game_body").style.backgroundColor = Hr.ᐃᐃΔⲆⲆ[Cx.time];
            c.ΔᐃⲆΔΔⲆΔ.ⵠᐃᐃΔΔ();
            Ax.ⵠᐃⵠⲆⲆ.style.display = "inline-block";
            c.ΔΔΔᐃⵠ = _r;
            c.ΔᐃᐃΔΔΔⵠ = Uh;
            g = -1;
            f = 0;
            e();
        };
        this.ⲆΔᐃ = function () {
            this.ΔᐃⲆΔΔⲆΔ.translate.x = Math.floor(oo - 275);
            this.ΔᐃⲆΔΔⲆΔ.translate.y = Math.floor(to - this.ΔᐃⲆΔΔⲆΔ.height - 28);
            Ax.ⵠᐃⵠⲆⲆ.translate.x = this.ΔᐃⲆΔΔⲆΔ.translate.x - 350;
            Ax.ⵠᐃⵠⲆⲆ.translate.y = this.ΔᐃⲆΔΔⲆΔ.translate.y + 0;
            Ax.ⵠᐃⵠⲆⲆ.ⲆΔᐃ();
            if (f != 30 || g != -1) {
                var a = 0;
                if (f != 30) {
                    a = 1500 / (f + 1) - 50;
                }
                if (g != -1) {
                    a = -(1750 / (30 - g + 1) - 48);
                }
                this.ΔᐃⲆΔΔⲆΔ.translate.y -= a;
            }
            this.ΔᐃⲆΔΔⲆΔ.ⲆΔᐃ();
        };
        this.ⵠⲆⲆⵠ = function () {
            Tp();
            Ex.alert.ⵠⲆⲆⵠ("#FFF", "#000");
        };
    }
    function kx(b, c) {
        const d = (b | 1016) & ~(b & 1016);
        const e = ((c + 5457) * 2147483629 + 2147483587) % 2147483647;
        const f = eb(d, e, d, e, d);
        const g = wt(e, d, e, d, e, d);
        return (16 << ((f ^ g) >> 8 & 255)) + (0 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) & 255)) + (8 << ((f ^ g) >> 16 & 255));
    }
    (function () {
        function a() {
            this.ⵠᐃᐃΔΔ();
        }
        a.prototype = {
            ⵠᐃᐃΔΔ: function () {
                var a = this || g;
                a.ᐃⵠᐃᐃⲆᐃΔ = 1000;
                a.ᐃⲆⲆᐃᐃᐃⲆ = {};
                a.ΔΔΔᐃⲆ = [];
                a.ⵠᐃΔΔⵠ = false;
                a.ΔΔⲆΔⲆ = 1;
                a.ΔᐃΔΔᐃⲆⲆ = "canplaythrough";
                a.ⲆᐃⵠⲆⵠ = typeof Hf != "undefined" && Hf.navigator ? Hf.navigator : null;
                a.ᐃⵠᐃΔᐃⵠΔ = null;
                a.ⲆΔΔⵠⵠΔΔ = false;
                a.ΔⵠᐃΔᐃ = true;
                a.ΔⵠⵠΔⵠⲆᐃ = true;
                a.Δ = null;
                a.ⵠΔⲆⲆΔⵠⵠ = true;
                a.ΔⵠᐃⲆⵠⵠᐃ();
                return a;
            },
            volume: function (b) {
                var c = this || g;
                b = parseFloat(b);
                if (!c.Δ) {
                    i();
                }
                if (b !== undefined && b >= 0 && b <= 1) {
                    c.ΔΔⲆΔⲆ = b;
                    if (c.ⵠᐃΔΔⵠ) {
                        return c;
                    }
                    if (c.ΔⵠᐃΔᐃ) {
                        c.ᐃⵠᐃΔᐃⵠΔ.gain.value = b;
                    }
                    for (var d = 0; d < c.ΔΔΔᐃⲆ.length; d++) {
                        if (!c.ΔΔΔᐃⲆ[d].ⲆⵠᐃⲆᐃ) {
                            for (var f = c.ΔΔΔᐃⲆ[d].ᐃⵠΔΔⲆ(), h = 0; h < f.length; h++) {
                                var j = c.ΔΔΔᐃⲆ[d].ⲆΔᐃᐃΔ(f[h]);
                                if (j && j.Δᐃᐃᐃ) {
                                    j.Δᐃᐃᐃ.volume = j.ΔΔⲆΔⲆ * b;
                                }
                            }
                        }
                    }
                    return c;
                }
                return c.ΔΔⲆΔⲆ;
            },
            ᐃΔᐃⵠⲆᐃΔ: function (b) {
                var c = this || g;
                if (!c.Δ) {
                    i();
                }
                c.ⵠᐃΔΔⵠ = b;
                if (c.ΔⵠᐃΔᐃ) {
                    c.ᐃⵠᐃΔᐃⵠΔ.gain.value = b ? 0 : c.ΔΔⲆΔⲆ;
                }
                for (var d = 0; d < c.ΔΔΔᐃⲆ.length; d++) {
                    if (!c.ΔΔΔᐃⲆ[d].ⲆⵠᐃⲆᐃ) {
                        for (var e = c.ΔΔΔᐃⲆ[d].ᐃⵠΔΔⲆ(), f = 0; f < e.length; f++) {
                            var h = c.ΔΔΔᐃⲆ[d].ⲆΔᐃᐃΔ(e[f]);
                            if (h && h.Δᐃᐃᐃ) {
                                h.Δᐃᐃᐃ.muted = !!b || h.ⵠᐃΔΔⵠ;
                            }
                        }
                    }
                }
                return c;
            },
            ΔⲆⲆΔⵠⲆᐃ: function () {
                var a = this || g;
                for (var b = a.ΔΔΔᐃⲆ.length - 1; b >= 0; b--) {
                    a.ΔΔΔᐃⲆ[b].ΔⲆⲆΔⵠⲆᐃ();
                }
                if (a.ΔⵠᐃΔᐃ && a.Δ && a.Δ.close !== undefined) {
                    a.Δ.close();
                    a.Δ = null;
                    i();
                }
                return a;
            },
            ⲆΔⵠⵠΔΔⲆⲆⲆ: function (a) {
                return (this || g).ᐃⲆⲆᐃᐃᐃⲆ[a.replace(/^x-/, "")];
            },
            ΔⵠᐃⲆⵠⵠᐃ: function () {
                var a = this || g;
                a.state = a.Δ && a.Δ.state || "running";
                a.ᐃⵠᐃⵠⲆᐃΔ();
                if (!a.ΔⵠᐃΔᐃ) {
                    if (typeof Audio != "undefined") {
                        try {
                            if (new Audio().oncanplaythrough === undefined) {
                                a.ΔᐃΔΔᐃⲆⲆ = "canplay";
                            }
                        } catch (b) {
                            a.ⲆΔΔⵠⵠΔΔ = true;
                        }
                    } else {
                        a.ⲆΔΔⵠⵠΔΔ = true;
                    }
                }
                try {
                    if (new Audio().muted) {
                        a.ⲆΔΔⵠⵠΔΔ = true;
                    }
                } catch (a) { }
                if (!a.ⲆΔΔⵠⵠΔΔ) {
                    a.ΔⵠΔᐃΔⵠⵠⲆᐃ();
                }
                return a;
            },
            ΔⵠΔᐃΔⵠⵠⲆᐃ: function () {
                var b = this || g;
                var c = null;
                try {
                    c = typeof Audio != "undefined" ? new Audio() : null;
                } catch (a) {
                    return b;
                }
                if (!c || typeof c.canPlayType != "function") {
                    return b;
                }
                var d = c.canPlayType("audio/mpeg;").replace(/^no$/, "");
                var e = b.ⲆᐃⵠⲆⵠ && b.ⲆᐃⵠⲆⵠ.userAgent.match(/OPR\/([0-6].)/g);
                var f = e && parseInt(e[0].split("/")[1], 10) < 33;
                b.ᐃⲆⲆᐃᐃᐃⲆ = {
                    ⵠⲆⲆⵠⲆᐃⵠⲆᐃ: !f && (!!d || !!c.canPlayType("audio/mp3;").replace(/^no$/, "")),
                    ⲆᐃⵠⵠΔⵠᐃⲆⵠ: !!d,
                    ⲆⵠΔᐃⲆⵠⵠⲆᐃ: !!c.canPlayType("audio/ogg; codecs=\"opus\"").replace(/^no$/, ""),
                    ΔΔⲆⲆᐃΔⲆⵠᐃ: !!c.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ΔⲆⵠΔⵠⵠᐃⵠᐃ: !!c.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ⵠᐃᐃⵠᐃⵠⲆΔⲆ: !!c.canPlayType("audio/wav; codecs=\"1\"").replace(/^no$/, ""),
                    ⲆᐃⵠΔΔⲆⲆⵠΔ: !!c.canPlayType("audio/aac;").replace(/^no$/, ""),
                    ᐃᐃΔⲆⵠⵠᐃΔΔ: !!c.canPlayType("audio/x-caf;").replace(/^no$/, ""),
                    ⵠᐃⲆᐃᐃⵠⲆΔⵠ: !!(c.canPlayType("audio/x-m4a;") || c.canPlayType("audio/m4a;") || c.canPlayType("audio/aac;")).replace(/^no$/, ""),
                    ⲆΔΔⵠⵠΔᐃⲆᐃ: !!(c.canPlayType("audio/x-mp4;") || c.canPlayType("audio/mp4;") || c.canPlayType("audio/aac;")).replace(/^no$/, ""),
                    ᐃΔΔⲆᐃⲆⲆΔⵠ: !!c.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ⵠⲆᐃⲆᐃΔⵠΔᐃ: !!c.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ᐃⲆᐃᐃΔⲆⲆⵠᐃ: !!c.canPlayType("audio/mp4; codecs=\"ec-3\"").replace(/^no$/, ""),
                    ⵠⲆΔΔⲆⲆⵠΔΔ: !!(c.canPlayType("audio/x-flac;") || c.canPlayType("audio/flac;")).replace(/^no$/, "")
                };
                return b;
            },
            ⲆⲆΔⲆΔⵠΔᐃᐃ: function () {
                var a = this || g;
                var b = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(a.ⲆᐃⵠⲆⵠ && a.ⲆᐃⵠⲆⵠ.userAgent);
                var c = !!("ontouchend" in Hf) || !!a.ⲆᐃⵠⲆⵠ && a.ⲆᐃⵠⲆⵠ.maxTouchPoints > 0 || !!a.ⲆᐃⵠⲆⵠ && a.ⲆᐃⵠⲆⵠ.ⵠᐃⵠⵠᐃⵠⲆΔⲆ > 0;
                if (!a.ΔⵠⲆΔⵠΔΔ && a.Δ && (b || c)) {
                    a.ΔⵠⲆΔⵠΔΔ = false;
                    if (!a.ΔΔᐃⵠⲆⵠΔΔᐃ && a.Δ.sampleRate !== 44100) {
                        a.ΔΔᐃⵠⲆⵠΔΔᐃ = true;
                        a.ΔⲆⲆΔⵠⲆᐃ();
                    }
                    a.ΔⲆΔⲆⲆⲆⵠ = a.Δ.createBuffer(1, 1, 22050);
                    function b() {
                        g.ΔᐃΔⲆⲆᐃᐃ();
                        var c = a.Δ.createBufferSource();
                        c.buffer = a.ΔⲆΔⲆⲆⲆⵠ;
                        c.connect(a.Δ.destination);
                        if (c.start === undefined) {
                            c.ΔⲆⵠⲆⲆᐃⲆΔΔ(0);
                        } else {
                            c.start(0);
                        }
                        if (typeof a.Δ.resume == "function") {
                            a.Δ.resume();
                        }
                        c.onended = function () {
                            c.disconnect(0);
                            a.ΔⵠⲆΔⵠΔΔ = true;
                            a.ⵠΔⲆⲆΔⵠⵠ = false;
                            document.removeEventListener("touchend", b, true);
                        };
                    }
                    document.addEventListener("touchend", b, true);
                    return a;
                }
            },
            ᐃⵠᐃⵠⲆᐃΔ: function () {
                var a = this;
                if (a.ΔⵠⵠΔⵠⲆᐃ && a.Δ && a.Δ.suspend !== undefined && g.ΔⵠᐃΔᐃ) {
                    for (var b = 0; b < a.ΔΔΔᐃⲆ.length; b++) {
                        if (a.ΔΔΔᐃⲆ[b].ⲆⵠᐃⲆᐃ) {
                            for (var c = 0; c < a.ΔΔΔᐃⲆ[b].ᐃΔⵠΔⵠ.length; c++) {
                                if (!a.ΔΔΔᐃⲆ[b].ᐃΔⵠΔⵠ[c].ΔΔΔⲆⵠ) {
                                    return a;
                                }
                            }
                        }
                    }
                    if (a.ⵠⵠⵠⵠᐃᐃᐃ) {
                        clearTimeout(a.ⵠⵠⵠⵠᐃᐃᐃ);
                    }
                    a.ⵠⵠⵠⵠᐃᐃᐃ = setTimeout(function () {
                        if (a.ΔⵠⵠΔⵠⲆᐃ) {
                            a.ⵠⵠⵠⵠᐃᐃᐃ = null;
                            a.state = "suspending";
                            a.Δ.suspend().then(function () {
                                a.state = "suspended";
                                if (a.ᐃΔᐃᐃΔᐃⲆ) {
                                    delete a.ᐃΔᐃᐃΔᐃⲆ;
                                    a.ΔᐃΔⲆⲆᐃᐃ();
                                }
                            });
                        }
                    }, 30000);
                    return a;
                }
            },
            ΔᐃΔⲆⲆᐃᐃ: function () {
                var a = this;
                if (a.Δ && a.Δ.resume !== undefined && g.ΔⵠᐃΔᐃ) {
                    if (a.state === "running" && a.ⵠⵠⵠⵠᐃᐃᐃ) {
                        clearTimeout(a.ⵠⵠⵠⵠᐃᐃᐃ);
                        a.ⵠⵠⵠⵠᐃᐃᐃ = null;
                    } else if (a.state === "suspended") {
                        a.Δ.resume().then(function () {
                            a.state = "running";
                            for (var b = 0; b < a.ΔΔΔᐃⲆ.length; b++) {
                                a.ΔΔΔᐃⲆ[b].ⵠⵠᐃᐃⲆ("resume");
                            }
                        });
                        if (a.ⵠⵠⵠⵠᐃᐃᐃ) {
                            clearTimeout(a.ⵠⵠⵠⵠᐃᐃᐃ);
                            a.ⵠⵠⵠⵠᐃᐃᐃ = null;
                        }
                    } else if (a.state === "suspending") {
                        a.ᐃΔᐃᐃΔᐃⲆ = true;
                    }
                    return a;
                }
            }
        };
        var g = new a();
        function b(a) {
            if (a.src && a.src.length !== 0) {
                this.ⵠᐃᐃΔΔ(a);
            } else {
                console.error(undefined);
            }
        }
        b.prototype = {
            ⵠᐃᐃΔΔ: function (a) {
                var b = this;
                if (!g.Δ) {
                    i();
                }
                b.ΔΔⵠⵠⵠᐃᐃΔᐃ = a.autoplay || false;
                b.ⵠⵠΔΔΔⵠᐃ = typeof a.ΔⵠⲆⲆΔΔᐃ != "string" ? a.ΔⵠⲆⲆΔΔᐃ : [a.ΔⵠⲆⲆΔΔᐃ];
                b.ᐃⲆΔᐃⲆΔⲆ = a.ΔⲆⵠΔΔⵠᐃᐃΔ || false;
                b.ⵠᐃΔΔⵠ = a.ᐃΔᐃⵠⲆᐃΔ || false;
                b.ⵠᐃᐃⲆΔ = a.loop || false;
                b.ⲆⵠⲆᐃᐃⲆᐃⲆᐃ = a.ᐃⵠᐃΔⵠⲆΔⲆⲆ || 5;
                b.ⵠⵠⲆⲆⵠⲆⲆⲆᐃ = typeof a.preload != "boolean" || a.preload;
                b.ⵠⵠⲆⵠⵠ = a.rate || 1;
                b.ⲆΔᐃⲆΔ = a.ᐃΔ || {};
                b.ⲆΔⲆⵠΔ = typeof a.src != "string" ? a.src : [a.src];
                b.ΔΔⲆΔⲆ = a.volume !== undefined ? a.volume : 1;
                b.ᐃΔⵠᐃⲆⵠⵠ = 0;
                b.ⲆᐃΔᐃⲆ = "unloaded";
                b.ᐃΔⵠΔⵠ = [];
                b.ⲆᐃⲆΔᐃⵠⵠ = {};
                b.ⵠⲆΔᐃⵠ = [];
                b.ⲆⲆᐃᐃⵠⲆᐃᐃⵠ = a.onend ? [{
                    ΔⲆΔⵠⲆ: a.onend
                }] : [];
                b.ⲆΔⲆⵠⵠΔΔΔⵠ = a.onfade ? [{
                    ΔⲆΔⵠⲆ: a.onfade
                }] : [];
                b.ΔᐃⵠΔⵠⲆⵠⲆⲆ = a.onload ? [{
                    ΔⲆΔⵠⲆ: a.onload
                }] : [];
                b.ⲆᐃᐃⲆΔΔⵠΔⲆ = a.ᐃⲆⲆⵠⵠΔΔⲆᐃ ? [{
                    ΔⲆΔⵠⲆ: a.ᐃⲆⲆⵠⵠΔΔⲆᐃ
                }] : [];
                b.ⵠⵠΔⵠⵠᐃⵠᐃᐃ = a.onpause ? [{
                    ΔⲆΔⵠⲆ: a.onpause
                }] : [];
                b.ΔⵠᐃⵠⵠΔⲆᐃΔ = a.onplay ? [{
                    ΔⲆΔⵠⲆ: a.onplay
                }] : [];
                b.ⲆᐃⵠⵠⵠᐃᐃⲆⲆ = a.onstop ? [{
                    ΔⲆΔⵠⲆ: a.onstop
                }] : [];
                b.ⲆᐃΔΔⵠᐃᐃΔⲆ = a.onmute ? [{
                    ΔⲆΔⵠⲆ: a.onmute
                }] : [];
                b.ⵠⲆⵠⵠᐃⵠⲆⲆⲆ = a.ⲆⲆⵠⲆᐃⲆⵠΔⵠ ? [{
                    ΔⲆΔⵠⲆ: a.ⲆⲆⵠⲆᐃⲆⵠΔⵠ
                }] : [];
                b.ᐃΔⵠⵠⲆⲆⵠⵠΔ = a.ⲆⵠΔΔⵠⲆΔⲆΔ ? [{
                    ΔⲆΔⵠⲆ: a.ⲆⵠΔΔⵠⲆΔⲆΔ
                }] : [];
                b.ΔΔΔⵠᐃⲆΔⵠΔ = a.ΔᐃᐃΔΔᐃΔⵠᐃ ? [{
                    ΔⲆΔⵠⲆ: a.ΔᐃᐃΔΔᐃΔⵠᐃ
                }] : [];
                b.ⲆⵠᐃⲆⲆⵠⲆᐃᐃ = [];
                b.ⲆⵠᐃⲆᐃ = g.ΔⵠᐃΔᐃ && !b.ᐃⲆΔᐃⲆΔⲆ;
                if (g.Δ !== undefined && g.Δ && g.ⵠΔⲆⲆΔⵠⵠ) {
                    g.ⲆⲆΔⲆΔⵠΔᐃᐃ();
                }
                g.ΔΔΔᐃⲆ.push(b);
                if (b.ΔΔⵠⵠⵠᐃᐃΔᐃ) {
                    b.ⵠⲆΔᐃⵠ.push({
                        event: "play",
                        action: function () {
                            b.play();
                        }
                    });
                }
                if (b.ⵠⵠⲆⲆⵠⲆⲆⲆᐃ) {
                    b.load();
                }
                return b;
            },
            load: function () {
                var a = this;
                var b = null;
                if (!g.ⲆΔΔⵠⵠΔΔ) {
                    if (typeof a.ⲆΔⲆⵠΔ == "string") {
                        a.ⲆΔⲆⵠΔ = [a.ⲆΔⲆⵠΔ];
                    }
                    for (var d = 0; d < a.ⲆΔⲆⵠΔ.length; d++) {
                        var e;
                        var i;
                        if (a.ⵠⵠΔΔΔⵠᐃ && a.ⵠⵠΔΔΔⵠᐃ[d]) {
                            e = a.ⵠⵠΔΔΔⵠᐃ[d];
                        } else {
                            if (typeof (i = a.ⲆΔⲆⵠΔ[d]) != "string") {
                                a.ⵠⵠᐃᐃⲆ("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                                continue;
                            }
                            if (!(e = /^data:audio\/([^;,]+);/i.exec(i))) {
                                e = /\.([^.]+)$/.exec(i.split("?", 1)[0]);
                            }
                            e &&= e[1].toLowerCase();
                        }
                        if (!e) {
                            console.warn("No file extension was found. Consider using the \"format\" property or specify an extension.");
                        }
                        if (e && g.ⲆΔⵠⵠΔΔⲆⲆⲆ(e)) {
                            b = a.ⲆΔⲆⵠΔ[d];
                            break;
                        }
                    }
                    if (b) {
                        a.ⲆΔⲆⵠΔ = b;
                        a.ⲆᐃΔᐃⲆ = "loading";
                        if (Hf.location.protocol === "https:" && b.slice(0, 5) === "http:") {
                            a.ᐃⲆΔᐃⲆΔⲆ = true;
                            a.ⲆⵠᐃⲆᐃ = false;
                        }
                        new c(a);
                        if (a.ⲆⵠᐃⲆᐃ) {
                            f(a);
                        }
                        return a;
                    } else {
                        a.ⵠⵠᐃᐃⲆ("loaderror", null, "No codec support for selected audio sources.");
                        return;
                    }
                }
                a.ⵠⵠᐃᐃⲆ("loaderror", null, "No audio support.");
            },
            play: function (a, c) {
                var i = this;
                var f = null;
                if (typeof a == "number") {
                    f = a;
                    a = null;
                } else {
                    if (typeof a == "string" && i.ⲆᐃΔᐃⲆ === "loaded" && !i.ⲆΔᐃⲆΔ[a]) {
                        return null;
                    }
                    if (a === undefined) {
                        a = "__default";
                        var j = 0;
                        for (var k = 0; k < i.ᐃΔⵠΔⵠ.length; k++) {
                            if (i.ᐃΔⵠΔⵠ[k].ΔΔΔⲆⵠ && !i.ᐃΔⵠΔⵠ[k].ᐃⵠᐃΔᐃ) {
                                j++;
                                f = i.ᐃΔⵠΔⵠ[k].ⲆΔⲆᐃ;
                            }
                        }
                        if (j === 1) {
                            a = null;
                        } else {
                            f = null;
                        }
                    }
                }
                var n = f ? i.ⲆΔᐃᐃΔ(f) : i.ᐃⵠᐃⵠⲆΔᐃⵠⲆ();
                if (!n) {
                    return null;
                }
                if (f && !a) {
                    a = n.ⲆΔᐃⲆΔ || "__default";
                }
                if (i.ⲆᐃΔᐃⲆ !== "loaded") {
                    n.ⲆΔᐃⲆΔ = a;
                    n.ᐃⵠᐃΔᐃ = false;
                    var h = n.ⲆΔⲆᐃ;
                    i.ⵠⲆΔᐃⵠ.push({
                        event: "play",
                        action: function () {
                            i.play(h);
                        }
                    });
                    return h;
                }
                if (f && !n.ΔΔΔⲆⵠ) {
                    if (!c) {
                        setTimeout(function () {
                            i.ⵠⵠᐃᐃⲆ("play", n.ⲆΔⲆᐃ);
                        }, 0);
                    }
                    return n.ⲆΔⲆᐃ;
                }
                if (i.ⲆⵠᐃⲆᐃ) {
                    g.ΔᐃΔⲆⲆᐃᐃ();
                }
                var l = Math.max(0, n.ΔΔⵠΔΔ > 0 ? n.ΔΔⵠΔΔ : i.ⲆΔᐃⲆΔ[a][0] / 1000);
                var q = Math.max(0, (i.ⲆΔᐃⲆΔ[a][0] + i.ⲆΔᐃⲆΔ[a][1]) / 1000 - l);
                var b = q * 1000 / Math.abs(n.ⵠⵠⲆⵠⵠ);
                n.ΔΔΔⲆⵠ = false;
                n.ᐃⵠᐃΔᐃ = false;
                n.ⲆΔᐃⲆΔ = a;
                n.ΔΔⵠΔΔ = l;
                n.ᐃᐃΔⲆΔ = i.ⲆΔᐃⲆΔ[a][0] / 1000;
                n.ΔᐃΔⲆᐃⲆᐃ = (i.ⲆΔᐃⲆΔ[a][0] + i.ⲆΔᐃⲆΔ[a][1]) / 1000;
                n.ⵠᐃᐃⲆΔ = !!n.ⵠᐃᐃⲆΔ || !!i.ⲆΔᐃⲆΔ[a][2];
                var d = n.Δᐃᐃᐃ;
                if (i.ⲆⵠᐃⲆᐃ) {
                    function a() {
                        i.ⲆⵠΔⵠⵠᐃᐃⵠⵠ(n);
                        var a = n.ⵠᐃΔΔⵠ || i.ⵠᐃΔΔⵠ ? 0 : n.ΔΔⲆΔⲆ;
                        d.gain.setValueAtTime(a, g.Δ.currentTime);
                        n.ⲆⵠΔⵠⲆᐃⵠ = g.Δ.currentTime;
                        if (d.ᐃᐃΔⵠᐃ.start === undefined) {
                            if (n.ⵠᐃᐃⲆΔ) {
                                d.ᐃᐃΔⵠᐃ.ᐃᐃᐃⵠⲆᐃᐃᐃΔ(0, l, 86400);
                            } else {
                                d.ᐃᐃΔⵠᐃ.ᐃᐃᐃⵠⲆᐃᐃᐃΔ(0, l, q);
                            }
                        } else if (n.ⵠᐃᐃⲆΔ) {
                            d.ᐃᐃΔⵠᐃ.start(0, l, 86400);
                        } else {
                            d.ᐃᐃΔⵠᐃ.start(0, l, q);
                        }
                        if (b !== Infinity) {
                            i.ⲆᐃⲆΔᐃⵠⵠ[n.ⲆΔⲆᐃ] = setTimeout(i.ᐃⵠᐃΔᐃ.bind(i, n), b);
                        }
                        if (!c) {
                            setTimeout(function () {
                                i.ⵠⵠᐃᐃⲆ("play", n.ⲆΔⲆᐃ);
                            }, 0);
                        }
                    }
                    var t = g.state === "running";
                    if (i.ⲆᐃΔᐃⲆ === "loaded" && t) {
                        a();
                    } else {
                        var m = t || i.ⲆᐃΔᐃⲆ !== "loaded" ? "load" : "resume";
                        i.once(m, a, t ? n.ⲆΔⲆᐃ : null);
                        i.ⵠⵠⵠΔⲆⲆΔ(n.ⲆΔⲆᐃ);
                    }
                } else {
                    function a() {
                        d.currentTime = l;
                        d.muted = n.ⵠᐃΔΔⵠ || i.ⵠᐃΔΔⵠ || g.ⵠᐃΔΔⵠ || d.muted;
                        d.volume = n.ΔΔⲆΔⲆ * g.volume();
                        d.playbackRate = n.ⵠⵠⲆⵠⵠ;
                        d.play();
                        if (b !== Infinity) {
                            i.ⲆᐃⲆΔᐃⵠⵠ[n.ⲆΔⲆᐃ] = setTimeout(i.ᐃⵠᐃΔᐃ.bind(i, n), b);
                        }
                        if (!c) {
                            i.ⵠⵠᐃᐃⲆ("play", n.ⲆΔⲆᐃ);
                        }
                    }
                    var p = i.ⲆᐃΔᐃⲆ === "loaded" && (Hf && Hf.ⲆᐃⲆⵠᐃⵠⲆⲆⵠ || !d.readyState && g.ⲆᐃⵠⲆⵠ.ⲆⲆⵠⵠΔΔᐃᐃⵠ);
                    if (d.readyState === 4 || p) {
                        a();
                    } else {
                        function b() {
                            a();
                            d.removeEventListener(g.ΔᐃΔΔᐃⲆⲆ, b, false);
                        }
                        d.addEventListener(g.ΔᐃΔΔᐃⲆⲆ, b, false);
                        i.ⵠⵠⵠΔⲆⲆΔ(n.ⲆΔⲆᐃ);
                    }
                }
                return n.ⲆΔⲆᐃ;
            },
            pause: function (a) {
                var b = this;
                if (b.ⲆᐃΔᐃⲆ !== "loaded") {
                    b.ⵠⲆΔᐃⵠ.push({
                        event: "pause",
                        action: function () {
                            b.pause(a);
                        }
                    });
                    return b;
                }
                for (var c = b.ᐃⵠΔΔⲆ(a), d = 0; d < c.length; d++) {
                    b.ⵠⵠⵠΔⲆⲆΔ(c[d]);
                    var e = b.ⲆΔᐃᐃΔ(c[d]);
                    if (e && !e.ΔΔΔⲆⵠ && (e.ΔΔⵠΔΔ = b.ⲆⲆⲆⲆᐃⲆⲆ(c[d]), e.ⲆΔⲆΔⲆⵠᐃ = 0, e.ΔΔΔⲆⵠ = true, b.ⲆⵠⲆΔⲆΔⵠ(c[d]), e.Δᐃᐃᐃ)) {
                        if (b.ⲆⵠᐃⲆᐃ) {
                            if (!e.Δᐃᐃᐃ.ᐃᐃΔⵠᐃ) {
                                continue;
                            }
                            if (e.Δᐃᐃᐃ.ᐃᐃΔⵠᐃ.stop === undefined) {
                                e.Δᐃᐃᐃ.ᐃᐃΔⵠᐃ.ᐃⵠⵠΔⵠⵠᐃΔΔ(0);
                            } else {
                                e.Δᐃᐃᐃ.ᐃᐃΔⵠᐃ.stop(0);
                            }
                            b.ᐃΔᐃⲆᐃⵠⲆ(e.Δᐃᐃᐃ);
                        } else if (!isNaN(e.Δᐃᐃᐃ.duration) || e.Δᐃᐃᐃ.duration === Infinity) {
                            e.Δᐃᐃᐃ.pause();
                        }
                    }
                    if (!arguments[1]) {
                        b.ⵠⵠᐃᐃⲆ("pause", e ? e.ⲆΔⲆᐃ : null);
                    }
                }
                return b;
            },
            stop: function (b, c) {
                var d = this;
                if (d.ⲆᐃΔᐃⲆ !== "loaded") {
                    d.ⵠⲆΔᐃⵠ.push({
                        event: "stop",
                        action: function () {
                            d.stop(b);
                        }
                    });
                    return d;
                }
                for (var e = d.ᐃⵠΔΔⲆ(b), f = 0; f < e.length; f++) {
                    d.ⵠⵠⵠΔⲆⲆΔ(e[f]);
                    var g = d.ⲆΔᐃᐃΔ(e[f]);
                    if (g) {
                        g.ΔΔⵠΔΔ = g.ᐃᐃΔⲆΔ || 0;
                        g.ⲆΔⲆΔⲆⵠᐃ = 0;
                        g.ΔΔΔⲆⵠ = true;
                        g.ᐃⵠᐃΔᐃ = true;
                        d.ⲆⵠⲆΔⲆΔⵠ(e[f]);
                        if (g.Δᐃᐃᐃ) {
                            if (d.ⲆⵠᐃⲆᐃ) {
                                if (g.Δᐃᐃᐃ.ᐃᐃΔⵠᐃ) {
                                    if (g.Δᐃᐃᐃ.ᐃᐃΔⵠᐃ.stop === undefined) {
                                        g.Δᐃᐃᐃ.ᐃᐃΔⵠᐃ.ᐃⵠⵠΔⵠⵠᐃΔΔ(0);
                                    } else {
                                        g.Δᐃᐃᐃ.ᐃᐃΔⵠᐃ.stop(0);
                                    }
                                    d.ᐃΔᐃⲆᐃⵠⲆ(g.Δᐃᐃᐃ);
                                }
                            } else if (!isNaN(g.Δᐃᐃᐃ.duration) || g.Δᐃᐃᐃ.duration === Infinity) {
                                g.Δᐃᐃᐃ.currentTime = g.ᐃᐃΔⲆΔ || 0;
                                g.Δᐃᐃᐃ.pause();
                            }
                        }
                        if (!c) {
                            d.ⵠⵠᐃᐃⲆ("stop", g.ⲆΔⲆᐃ);
                        }
                    }
                }
                return d;
            },
            ᐃΔᐃⵠⲆᐃΔ: function (b, c) {
                var d = this;
                if (d.ⲆᐃΔᐃⲆ !== "loaded") {
                    d.ⵠⲆΔᐃⵠ.push({
                        event: "mute",
                        action: function () {
                            d.ᐃΔᐃⵠⲆᐃΔ(b, c);
                        }
                    });
                    return d;
                }
                if (c === undefined) {
                    if (typeof b != "boolean") {
                        return d.ⵠᐃΔΔⵠ;
                    }
                    d.ⵠᐃΔΔⵠ = b;
                }
                for (var e = d.ᐃⵠΔΔⲆ(c), f = 0; f < e.length; f++) {
                    var h = d.ⲆΔᐃᐃΔ(e[f]);
                    if (h) {
                        h.ⵠᐃΔΔⵠ = b;
                        if (d.ⲆⵠᐃⲆᐃ && h.Δᐃᐃᐃ) {
                            h.Δᐃᐃᐃ.gain.setValueAtTime(b ? 0 : h.ΔΔⲆΔⲆ, g.Δ.currentTime);
                        } else if (h.Δᐃᐃᐃ) {
                            h.Δᐃᐃᐃ.muted = !!g.ⵠᐃΔΔⵠ || b;
                        }
                        d.ⵠⵠᐃᐃⲆ("mute", h.ⲆΔⲆᐃ);
                    }
                }
                return d;
            },
            volume: function () {
                var b;
                var c;
                var d;
                var f = this;
                var h = arguments;
                if (h.length === 0) {
                    return f.ΔΔⲆΔⲆ;
                }
                if (h.length === 1 || h.length === 2 && h[1] === undefined) {
                    if (f.ᐃⵠΔΔⲆ().indexOf(h[0]) >= 0) {
                        c = parseInt(h[0], 10);
                    } else {
                        b = parseFloat(h[0]);
                    }
                } else if (h.length >= 2) {
                    b = parseFloat(h[0]);
                    c = parseInt(h[1], 10);
                }
                if (b === undefined || b < 0 || b > 1) {
                    if (d = c ? f.ⲆΔᐃᐃΔ(c) : f.ᐃΔⵠΔⵠ[0]) {
                        return d.ΔΔⲆΔⲆ;
                    } else {
                        return 0;
                    }
                }
                if (f.ⲆᐃΔᐃⲆ !== "loaded") {
                    f.ⵠⲆΔᐃⵠ.push({
                        event: "volume",
                        action: function () {
                            f.volume.apply(f, h);
                        }
                    });
                    return f;
                }
                if (c === undefined) {
                    f.ΔΔⲆΔⲆ = b;
                }
                c = f.ᐃⵠΔΔⲆ(c);
                for (var a = 0; a < c.length; a++) {
                    if (d = f.ⲆΔᐃᐃΔ(c[a])) {
                        d.ΔΔⲆΔⲆ = b;
                        if (!h[2]) {
                            f.ⲆⵠⲆΔⲆΔⵠ(c[a]);
                        }
                        if (f.ⲆⵠᐃⲆᐃ && d.Δᐃᐃᐃ && !d.ⵠᐃΔΔⵠ) {
                            d.Δᐃᐃᐃ.gain.setValueAtTime(b, g.Δ.currentTime);
                        } else if (d.Δᐃᐃᐃ && !d.ⵠᐃΔΔⵠ) {
                            d.Δᐃᐃᐃ.volume = b * g.volume();
                        }
                        f.ⵠⵠᐃᐃⲆ("volume", d.ⲆΔⲆᐃ);
                    }
                }
                return f;
            },
            fade: function (f, e, i, j) {
                var k = this;
                var a = Math.abs(f - e);
                var n = f > e ? "out" : "in";
                var o = a / 0.01;
                var p = o > 0 ? i / o : i;
                if (p < 4) {
                    o = Math.ceil(o / (4 / p));
                    p = 4;
                }
                if (k.ⲆᐃΔᐃⲆ !== "loaded") {
                    k.ⵠⲆΔᐃⵠ.push({
                        event: "fade",
                        action: function () {
                            k.fade(f, e, i, j);
                        }
                    });
                    return k;
                }
                k.volume(f, j);
                for (var q = k.ᐃⵠΔΔⲆ(j), r = 0; r < q.length; r++) {
                    var s = k.ⲆΔᐃᐃΔ(q[r]);
                    if (s) {
                        if (!j) {
                            k.ⲆⵠⲆΔⲆΔⵠ(q[r]);
                        }
                        if (k.ⲆⵠᐃⲆᐃ && !s.ⵠᐃΔΔⵠ) {
                            var t = g.Δ.currentTime;
                            var u = t + i / 1000;
                            s.ΔΔⲆΔⲆ = f;
                            s.Δᐃᐃᐃ.gain.setValueAtTime(f, t);
                            s.Δᐃᐃᐃ.gain.linearRampToValueAtTime(e, u);
                        }
                        var w = f;
                        s.ⲆⵠⵠᐃⲆΔⵠ = setInterval(function (a, b) {
                            if (o > 0) {
                                w += n === "in" ? 0.01 : -0.01;
                            }
                            w = Math.max(0, w);
                            w = Math.min(1, w);
                            w = Math.round(w * 100) / 100;
                            if (k.ⲆⵠᐃⲆᐃ) {
                                if (j === undefined) {
                                    k.ΔΔⲆΔⲆ = w;
                                }
                                b.ΔΔⲆΔⲆ = w;
                            } else {
                                k.volume(w, a, true);
                            }
                            if (e < f && w <= e || e > f && w >= e) {
                                clearInterval(b.ⲆⵠⵠᐃⲆΔⵠ);
                                b.ⲆⵠⵠᐃⲆΔⵠ = null;
                                k.volume(e, a);
                                k.ⵠⵠᐃᐃⲆ("fade", a);
                            }
                        }.bind(k, q[r], s), p);
                    }
                }
                return k;
            },
            ⲆⵠⲆΔⲆΔⵠ: function (a) {
                var b = this;
                var c = b.ⲆΔᐃᐃΔ(a);
                if (c && c.ⲆⵠⵠᐃⲆΔⵠ) {
                    if (b.ⲆⵠᐃⲆᐃ) {
                        c.Δᐃᐃᐃ.gain.cancelScheduledValues(g.Δ.currentTime);
                    }
                    clearInterval(c.ⲆⵠⵠᐃⲆΔⵠ);
                    c.ⲆⵠⵠᐃⲆΔⵠ = null;
                    b.ⵠⵠᐃᐃⲆ("fade", a);
                }
                return b;
            },
            loop: function () {
                var b;
                var c;
                var d;
                var f = this;
                var g = arguments;
                if (g.length === 0) {
                    return f.ⵠᐃᐃⲆΔ;
                }
                if (g.length === 1) {
                    if (typeof g[0] != "boolean") {
                        return !!(d = f.ⲆΔᐃᐃΔ(parseInt(g[0], 10))) && d.ⵠᐃᐃⲆΔ;
                    }
                    b = g[0];
                    f.ⵠᐃᐃⲆΔ = b;
                } else if (g.length === 2) {
                    b = g[0];
                    c = parseInt(g[1], 10);
                }
                for (var h = f.ᐃⵠΔΔⲆ(c), a = 0; a < h.length; a++) {
                    if (d = f.ⲆΔᐃᐃΔ(h[a])) {
                        d.ⵠᐃᐃⲆΔ = b;
                        if (f.ⲆⵠᐃⲆᐃ && d.Δᐃᐃᐃ && d.Δᐃᐃᐃ.ᐃᐃΔⵠᐃ) {
                            d.Δᐃᐃᐃ.ᐃᐃΔⵠᐃ.loop = b;
                            if (b) {
                                d.Δᐃᐃᐃ.ᐃᐃΔⵠᐃ.loopStart = d.ᐃᐃΔⲆΔ || 0;
                                d.Δᐃᐃᐃ.ᐃᐃΔⵠᐃ.loopEnd = d.ΔᐃΔⲆᐃⲆᐃ;
                            }
                        }
                    }
                }
                return f;
            },
            rate: function () {
                var b;
                var c;
                var d;
                var f = this;
                var i = arguments;
                if (i.length === 0) {
                    c = f.ᐃΔⵠΔⵠ[0].ⲆΔⲆᐃ;
                } else if (i.length === 1) {
                    if (f.ᐃⵠΔΔⲆ().indexOf(i[0]) >= 0) {
                        c = parseInt(i[0], 10);
                    } else {
                        b = parseFloat(i[0]);
                    }
                } else if (i.length === 2) {
                    b = parseFloat(i[0]);
                    c = parseInt(i[1], 10);
                }
                if (typeof b != "number") {
                    if (d = f.ⲆΔᐃᐃΔ(c)) {
                        return d.ⵠⵠⲆⵠⵠ;
                    } else {
                        return f.ⵠⵠⲆⵠⵠ;
                    }
                }
                if (f.ⲆᐃΔᐃⲆ !== "loaded") {
                    f.ⵠⲆΔᐃⵠ.push({
                        event: "rate",
                        action: function () {
                            f.rate.apply(f, i);
                        }
                    });
                    return f;
                }
                if (c === undefined) {
                    f.ⵠⵠⲆⵠⵠ = b;
                }
                c = f.ᐃⵠΔΔⲆ(c);
                for (var a = 0; a < c.length; a++) {
                    if (d = f.ⲆΔᐃᐃΔ(c[a])) {
                        d.ⲆΔⲆΔⲆⵠᐃ = f.ⲆⲆⲆⲆᐃⲆⲆ(c[a]);
                        d.ⲆⵠΔⵠⲆᐃⵠ = f.ⲆⵠᐃⲆᐃ ? g.Δ.currentTime : d.ⲆⵠΔⵠⲆᐃⵠ;
                        d.ⵠⵠⲆⵠⵠ = b;
                        if (f.ⲆⵠᐃⲆᐃ && d.Δᐃᐃᐃ && d.Δᐃᐃᐃ.ᐃᐃΔⵠᐃ) {
                            d.Δᐃᐃᐃ.ᐃᐃΔⵠᐃ.playbackRate.value = b;
                        } else if (d.Δᐃᐃᐃ) {
                            d.Δᐃᐃᐃ.playbackRate = b;
                        }
                        var j = f.ⲆⲆⲆⲆᐃⲆⲆ(c[a]);
                        var k = ((f.ⲆΔᐃⲆΔ[d.ⲆΔᐃⲆΔ][0] + f.ⲆΔᐃⲆΔ[d.ⲆΔᐃⲆΔ][1]) / 1000 - j) * 1000 / Math.abs(d.ⵠⵠⲆⵠⵠ);
                        if (!!f.ⲆᐃⲆΔᐃⵠⵠ[c[a]] || !d.ΔΔΔⲆⵠ) {
                            f.ⵠⵠⵠΔⲆⲆΔ(c[a]);
                            f.ⲆᐃⲆΔᐃⵠⵠ[c[a]] = setTimeout(f.ᐃⵠᐃΔᐃ.bind(f, d), k);
                        }
                        f.ⵠⵠᐃᐃⲆ("rate", d.ⲆΔⲆᐃ);
                    }
                }
                return f;
            },
            ⲆⲆⲆⲆᐃⲆⲆ: function () {
                var b;
                var c;
                var d = this;
                var f = arguments;
                if (f.length === 0) {
                    c = d.ᐃΔⵠΔⵠ[0].ⲆΔⲆᐃ;
                } else if (f.length === 1) {
                    if (d.ᐃⵠΔΔⲆ().indexOf(f[0]) >= 0) {
                        c = parseInt(f[0], 10);
                    } else {
                        c = d.ᐃΔⵠΔⵠ[0].ⲆΔⲆᐃ;
                        b = parseFloat(f[0]);
                    }
                } else if (f.length === 2) {
                    b = parseFloat(f[0]);
                    c = parseInt(f[1], 10);
                }
                if (c === undefined) {
                    return d;
                }
                if (d.ⲆᐃΔᐃⲆ !== "loaded") {
                    d.ⵠⲆΔᐃⵠ.push({
                        event: "seek",
                        action: function () {
                            d.ⲆⲆⲆⲆᐃⲆⲆ.apply(d, f);
                        }
                    });
                    return d;
                }
                var i = d.ⲆΔᐃᐃΔ(c);
                if (i) {
                    if (typeof b != "number" || b < 0) {
                        if (d.ⲆⵠᐃⲆᐃ) {
                            var a = d.ⲆΔΔΔⵠΔΔ(c) ? g.Δ.currentTime - i.ⲆⵠΔⵠⲆᐃⵠ : 0;
                            var j = i.ⲆΔⲆΔⲆⵠᐃ ? i.ⲆΔⲆΔⲆⵠᐃ - i.ΔΔⵠΔΔ : 0;
                            return i.ΔΔⵠΔΔ + (j + a * Math.abs(i.ⵠⵠⲆⵠⵠ));
                        }
                        return i.Δᐃᐃᐃ.currentTime;
                    }
                    var k = d.ⲆΔΔΔⵠΔΔ(c);
                    if (k) {
                        d.pause(c, true);
                    }
                    i.ΔΔⵠΔΔ = b;
                    i.ᐃⵠᐃΔᐃ = false;
                    d.ⵠⵠⵠΔⲆⲆΔ(c);
                    if (k) {
                        d.play(c, true);
                    }
                    if (!d.ⲆⵠᐃⲆᐃ && i.Δᐃᐃᐃ) {
                        i.Δᐃᐃᐃ.currentTime = b;
                    }
                    d.ⵠⵠᐃᐃⲆ("seek", c);
                }
                return d;
            },
            ⲆΔΔΔⵠΔΔ: function (a) {
                var b = this;
                if (typeof a == "number") {
                    var c = b.ⲆΔᐃᐃΔ(a);
                    return !!c && !c.ΔΔΔⲆⵠ;
                }
                for (var d = 0; d < b.ᐃΔⵠΔⵠ.length; d++) {
                    if (!b.ᐃΔⵠΔⵠ[d].ΔΔΔⲆⵠ) {
                        return true;
                    }
                }
                return false;
            },
            duration: function (a) {
                var b = this;
                var c = b.ᐃΔⵠᐃⲆⵠⵠ;
                var d = b.ⲆΔᐃᐃΔ(a);
                if (d) {
                    c = b.ⲆΔᐃⲆΔ[d.ⲆΔᐃⲆΔ][1] / 1000;
                }
                return c;
            },
            state: function () {
                return this.ⲆᐃΔᐃⲆ;
            },
            ΔⲆⲆΔⵠⲆᐃ: function () {
                var b = this;
                for (var c = b.ᐃΔⵠΔⵠ, f = 0; f < c.length; f++) {
                    if (!c[f].ΔΔΔⲆⵠ) {
                        b.stop(c[f].ⲆΔⲆᐃ);
                    }
                    if (!b.ⲆⵠᐃⲆᐃ) {
                        if (!/MSIE |Trident\//.test(g.ⲆᐃⵠⲆⵠ && g.ⲆᐃⵠⲆⵠ.userAgent)) {
                            c[f].Δᐃᐃᐃ.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA";
                        }
                        c[f].Δᐃᐃᐃ.removeEventListener("error", c[f].ΔΔᐃᐃᐃⵠᐃ, false);
                        c[f].Δᐃᐃᐃ.removeEventListener(g.ΔᐃΔΔᐃⲆⲆ, c[f].ᐃΔΔⵠⲆⲆΔ, false);
                    }
                    delete c[f].Δᐃᐃᐃ;
                    b.ⵠⵠⵠΔⲆⲆΔ(c[f].ⲆΔⲆᐃ);
                    var h = g.ΔΔΔᐃⲆ.indexOf(b);
                    if (h >= 0) {
                        g.ΔΔΔᐃⲆ.splice(h, 1);
                    }
                }
                var i = true;
                for (f = 0; f < g.ΔΔΔᐃⲆ.length; f++) {
                    if (g.ΔΔΔᐃⲆ[f].ⲆΔⲆⵠΔ === b.ⲆΔⲆⵠΔ) {
                        i = false;
                        break;
                    }
                }
                if (d && i) {
                    delete d[b.ⲆΔⲆⵠΔ];
                }
                g.ⲆΔΔⵠⵠΔΔ = false;
                b.ⲆᐃΔᐃⲆ = "unloaded";
                b.ᐃΔⵠΔⵠ = [];
                b = null;
                return null;
            },
            on: function (a, b, c, d) {
                var e = this["_on" + a];
                if (typeof b == "function") {
                    e.push(d ? {
                        id: c,
                        ΔⲆΔⵠⲆ: b,
                        once: d
                    } : {
                        id: c,
                        ΔⲆΔⵠⲆ: b
                    });
                }
                return this;
            },
            ΔⲆΔⲆΔⵠΔⲆΔ: function (b, c, d) {
                var e = this;
                var f = e["_on" + b];
                var g = 0;
                if (typeof c == "number") {
                    d = c;
                    c = null;
                }
                if (c || d) {
                    for (g = 0; g < f.length; g++) {
                        var h = d === f[g].id;
                        if (c === f[g].ΔⲆΔⵠⲆ && h || !c && h) {
                            f.splice(g, 1);
                            break;
                        }
                    }
                } else if (b) {
                    e["_on" + b] = [];
                } else {
                    var j = Object.keys(e);
                    for (g = 0; g < j.length; g++) {
                        if (j[g].indexOf("_on") === 0 && Array.isArray(e[j[g]])) {
                            e[j[g]] = [];
                        }
                    }
                }
                return e;
            },
            once: function (a, b, c) {
                this.on(a, b, c, 1);
                return this;
            },
            ⵠⵠᐃᐃⲆ: function (b, c, d) {
                var e = this;
                var f = e["_on" + b];
                for (var g = f.length - 1; g >= 0; g--) {
                    if (!f[g].id || f[g].id === c || b === "load") {
                        setTimeout(function (a) {
                            a.call(this, c, d);
                        }.bind(e, f[g].ΔⲆΔⵠⲆ), 0);
                        if (f[g].once) {
                            e.ΔⲆΔⲆΔⵠΔⲆΔ(b, f[g].ΔⲆΔⵠⲆ, f[g].id);
                        }
                    }
                }
                return e;
            },
            ⲆⵠΔⲆᐃᐃΔ: function () {
                var a = this;
                if (a.ⵠⲆΔᐃⵠ.length > 0) {
                    var b = a.ⵠⲆΔᐃⵠ[0];
                    a.once(b.event, function () {
                        a.ⵠⲆΔᐃⵠ.shift();
                        a.ⲆⵠΔⲆᐃᐃΔ();
                    });
                    b.action();
                }
                return a;
            },
            ᐃⵠᐃΔᐃ: function (b) {
                var c = this;
                var d = b.ⲆΔᐃⲆΔ;
                if (!c.ⲆⵠᐃⲆᐃ && c.Δᐃᐃᐃ && !c.Δᐃᐃᐃ.ended) {
                    setTimeout(c.ᐃⵠᐃΔᐃ.bind(c, b), 100);
                    return c;
                }
                var e = !!b.ⵠᐃᐃⲆΔ || !!c.ⲆΔᐃⲆΔ[d][2];
                c.ⵠⵠᐃᐃⲆ("end", b.ⲆΔⲆᐃ);
                if (!c.ⲆⵠᐃⲆᐃ && e) {
                    c.stop(b.ⲆΔⲆᐃ, true).play(b.ⲆΔⲆᐃ);
                }
                if (c.ⲆⵠᐃⲆᐃ && e) {
                    c.ⵠⵠᐃᐃⲆ("play", b.ⲆΔⲆᐃ);
                    b.ΔΔⵠΔΔ = b.ᐃᐃΔⲆΔ || 0;
                    b.ⲆΔⲆΔⲆⵠᐃ = 0;
                    b.ⲆⵠΔⵠⲆᐃⵠ = g.Δ.currentTime;
                    var f = (b.ΔᐃΔⲆᐃⲆᐃ - b.ᐃᐃΔⲆΔ) * 1000 / Math.abs(b.ⵠⵠⲆⵠⵠ);
                    c.ⲆᐃⲆΔᐃⵠⵠ[b.ⲆΔⲆᐃ] = setTimeout(c.ᐃⵠᐃΔᐃ.bind(c, b), f);
                }
                if (c.ⲆⵠᐃⲆᐃ && !e) {
                    b.ΔΔΔⲆⵠ = true;
                    b.ᐃⵠᐃΔᐃ = true;
                    b.ΔΔⵠΔΔ = b.ᐃᐃΔⲆΔ || 0;
                    b.ⲆΔⲆΔⲆⵠᐃ = 0;
                    c.ⵠⵠⵠΔⲆⲆΔ(b.ⲆΔⲆᐃ);
                    c.ᐃΔᐃⲆᐃⵠⲆ(b.Δᐃᐃᐃ);
                    g.ᐃⵠᐃⵠⲆᐃΔ();
                }
                if (!c.ⲆⵠᐃⲆᐃ && !e) {
                    c.stop(b.ⲆΔⲆᐃ);
                }
                return c;
            },
            ⵠⵠⵠΔⲆⲆΔ: function (a) {
                var b = this;
                if (b.ⲆᐃⲆΔᐃⵠⵠ[a]) {
                    clearTimeout(b.ⲆᐃⲆΔᐃⵠⵠ[a]);
                    delete b.ⲆᐃⲆΔᐃⵠⵠ[a];
                }
                return b;
            },
            ⲆΔᐃᐃΔ: function (a) {
                for (var b = this, c = 0; c < b.ᐃΔⵠΔⵠ.length; c++) {
                    if (a === b.ᐃΔⵠΔⵠ[c].ⲆΔⲆᐃ) {
                        return b.ᐃΔⵠΔⵠ[c];
                    }
                }
                return null;
            },
            ᐃⵠᐃⵠⲆΔᐃⵠⲆ: function () {
                var a = this;
                a.ⵠᐃΔⲆᐃⲆⲆⵠⵠ();
                for (var b = 0; b < a.ᐃΔⵠΔⵠ.length; b++) {
                    if (a.ᐃΔⵠΔⵠ[b].ᐃⵠᐃΔᐃ) {
                        return a.ᐃΔⵠΔⵠ[b].reset();
                    }
                }
                return new c(a);
            },
            ⵠᐃΔⲆᐃⲆⲆⵠⵠ: function () {
                var a = this;
                var b = a.ⲆⵠⲆᐃᐃⲆᐃⲆᐃ;
                var c = 0;
                var d = 0;
                if (a.ᐃΔⵠΔⵠ.length >= b) {
                    for (d = 0; d < a.ᐃΔⵠΔⵠ.length; d++) {
                        if (a.ᐃΔⵠΔⵠ[d].ᐃⵠᐃΔᐃ) {
                            c++;
                        }
                    }
                    for (d = a.ᐃΔⵠΔⵠ.length - 1; d >= 0; d--) {
                        if (c <= b) {
                            return;
                        }
                        if (a.ᐃΔⵠΔⵠ[d].ᐃⵠᐃΔᐃ) {
                            if (a.ⲆⵠᐃⲆᐃ && a.ᐃΔⵠΔⵠ[d].Δᐃᐃᐃ) {
                                a.ᐃΔⵠΔⵠ[d].Δᐃᐃᐃ.disconnect(0);
                            }
                            a.ᐃΔⵠΔⵠ.splice(d, 1);
                            c--;
                        }
                    }
                }
            },
            ᐃⵠΔΔⲆ: function (a) {
                if (a === undefined) {
                    var b = [];
                    for (var c = 0; c < this.ᐃΔⵠΔⵠ.length; c++) {
                        b.push(this.ᐃΔⵠΔⵠ[c].ⲆΔⲆᐃ);
                    }
                    return b;
                }
                return [a];
            },
            ⲆⵠΔⵠⵠᐃᐃⵠⵠ: function (a) {
                a.Δᐃᐃᐃ.ᐃᐃΔⵠᐃ = g.Δ.createBufferSource();
                a.Δᐃᐃᐃ.ᐃᐃΔⵠᐃ.buffer = d[this.ⲆΔⲆⵠΔ];
                if (a.ⵠΔⲆⵠΔ) {
                    a.Δᐃᐃᐃ.ᐃᐃΔⵠᐃ.connect(a.ⵠΔⲆⵠΔ);
                } else {
                    a.Δᐃᐃᐃ.ᐃᐃΔⵠᐃ.connect(a.Δᐃᐃᐃ);
                }
                a.Δᐃᐃᐃ.ᐃᐃΔⵠᐃ.loop = a.ⵠᐃᐃⲆΔ;
                if (a.ⵠᐃᐃⲆΔ) {
                    a.Δᐃᐃᐃ.ᐃᐃΔⵠᐃ.loopStart = a.ᐃᐃΔⲆΔ || 0;
                    a.Δᐃᐃᐃ.ᐃᐃΔⵠᐃ.loopEnd = a.ΔᐃΔⲆᐃⲆᐃ;
                }
                a.Δᐃᐃᐃ.ᐃᐃΔⵠᐃ.playbackRate.value = a.ⵠⵠⲆⵠⵠ;
                return this;
            },
            ᐃΔᐃⲆᐃⵠⲆ: function (a) {
                var b = this;
                if (b.ΔⲆΔⲆⲆⲆⵠ) {
                    a.ᐃᐃΔⵠᐃ.onended = null;
                    a.ᐃᐃΔⵠᐃ.disconnect(0);
                    try {
                        a.ᐃᐃΔⵠᐃ.buffer = b.ΔⲆΔⲆⲆⲆⵠ;
                    } catch (a) { }
                }
                a.ᐃᐃΔⵠᐃ = null;
                return b;
            }
        };
        function c(a) {
            this.ΔΔⲆⵠⵠΔΔ = a;
            this.ⵠᐃᐃΔΔ();
        }
        c.prototype = {
            ⵠᐃᐃΔΔ: function () {
                var a = this;
                var b = a.ΔΔⲆⵠⵠΔΔ;
                a.ⵠᐃΔΔⵠ = b.ⵠᐃΔΔⵠ;
                a.ⵠᐃᐃⲆΔ = b.ⵠᐃᐃⲆΔ;
                a.ΔΔⲆΔⲆ = b.ΔΔⲆΔⲆ;
                a.ⵠⵠⲆⵠⵠ = b.ⵠⵠⲆⵠⵠ;
                a.ΔΔⵠΔΔ = 0;
                a.ΔΔΔⲆⵠ = true;
                a.ᐃⵠᐃΔᐃ = true;
                a.ⲆΔᐃⲆΔ = "__default";
                a.ⲆΔⲆᐃ = ++g.ᐃⵠᐃᐃⲆᐃΔ;
                b.ᐃΔⵠΔⵠ.push(a);
                a.create();
                return a;
            },
            create: function () {
                var a = this;
                var b = a.ΔΔⲆⵠⵠΔΔ;
                var c = g.ⵠᐃΔΔⵠ || a.ⵠᐃΔΔⵠ || a.ΔΔⲆⵠⵠΔΔ.ⵠᐃΔΔⵠ ? 0 : a.ΔΔⲆΔⲆ;
                if (b.ⲆⵠᐃⲆᐃ) {
                    a.Δᐃᐃᐃ = g.Δ.createGain === undefined ? g.Δ.ⵠⵠΔⵠᐃΔⲆᐃⲆ() : g.Δ.createGain();
                    a.Δᐃᐃᐃ.gain.setValueAtTime(c, g.Δ.currentTime);
                    a.Δᐃᐃᐃ.paused = true;
                    a.Δᐃᐃᐃ.connect(g.ᐃⵠᐃΔᐃⵠΔ);
                } else {
                    a.Δᐃᐃᐃ = new Audio();
                    a.ΔΔᐃᐃᐃⵠᐃ = a.ⵠⲆᐃⵠΔⵠⵠᐃΔ.bind(a);
                    a.Δᐃᐃᐃ.addEventListener("error", a.ΔΔᐃᐃᐃⵠᐃ, false);
                    a.ᐃΔΔⵠⲆⲆΔ = a.ⲆⵠⲆᐃΔⵠΔᐃΔ.bind(a);
                    a.Δᐃᐃᐃ.addEventListener(g.ΔᐃΔΔᐃⲆⲆ, a.ᐃΔΔⵠⲆⲆΔ, false);
                    a.Δᐃᐃᐃ.src = b.ⲆΔⲆⵠΔ;
                    a.Δᐃᐃᐃ.preload = "auto";
                    a.Δᐃᐃᐃ.volume = c * g.volume();
                    a.Δᐃᐃᐃ.load();
                }
                return a;
            },
            reset: function () {
                var a = this;
                var b = a.ΔΔⲆⵠⵠΔΔ;
                a.ⵠᐃΔΔⵠ = b.ⵠᐃΔΔⵠ;
                a.ⵠᐃᐃⲆΔ = b.ⵠᐃᐃⲆΔ;
                a.ΔΔⲆΔⲆ = b.ΔΔⲆΔⲆ;
                a.ⵠⵠⲆⵠⵠ = b.ⵠⵠⲆⵠⵠ;
                a.ΔΔⵠΔΔ = 0;
                a.ⲆΔⲆΔⲆⵠᐃ = 0;
                a.ΔΔΔⲆⵠ = true;
                a.ᐃⵠᐃΔᐃ = true;
                a.ⲆΔᐃⲆΔ = "__default";
                a.ⲆΔⲆᐃ = ++g.ᐃⵠᐃᐃⲆᐃΔ;
                return a;
            },
            ⵠⲆᐃⵠΔⵠⵠᐃΔ: function () {
                var a = this;
                a.ΔΔⲆⵠⵠΔΔ.ⵠⵠᐃᐃⲆ("loaderror", a.ⲆΔⲆᐃ, a.Δᐃᐃᐃ.error ? a.Δᐃᐃᐃ.error.code : 0);
                a.Δᐃᐃᐃ.removeEventListener("error", a.ΔΔᐃᐃᐃⵠᐃ, false);
            },
            ⲆⵠⲆᐃΔⵠΔᐃΔ: function () {
                var a = this;
                var b = a.ΔΔⲆⵠⵠΔΔ;
                b.ᐃΔⵠᐃⲆⵠⵠ = Math.ceil(a.Δᐃᐃᐃ.duration * 10) / 10;
                if (Object.keys(b.ⲆΔᐃⲆΔ).length === 0) {
                    b.ⲆΔᐃⲆΔ = {
                        ⵠⵠᐃⲆⵠⵠⲆᐃⲆ: [0, b.ᐃΔⵠᐃⲆⵠⵠ * 1000]
                    };
                }
                if (b.ⲆᐃΔᐃⲆ !== "loaded") {
                    b.ⲆᐃΔᐃⲆ = "loaded";
                    b.ⵠⵠᐃᐃⲆ("load");
                    b.ⲆⵠΔⲆᐃᐃΔ();
                }
                a.Δᐃᐃᐃ.removeEventListener(g.ΔᐃΔΔᐃⲆⲆ, a.ᐃΔΔⵠⲆⲆΔ, false);
            }
        };
        var d = {};
        function f(b) {
            var c = b.ⲆΔⲆⵠΔ;
            if (d[c]) {
                b.ᐃΔⵠᐃⲆⵠⵠ = d[c].duration;
                h(b);
                return;
            }
            if (/^data:[^;]+;base64,/.test(c)) {
                for (var e = atob(c.split(",")[1]), f = new Uint8Array(e.length), g = 0; g < e.length; ++g) {
                    f[g] = e.charCodeAt(g);
                }
                k(f.buffer, b);
            } else {
                var l = new XMLHttpRequest();
                l.open("GET", c, true);
                l.responseType = "arraybuffer";
                l.onload = function () {
                    var a = (l.status + "")[0];
                    if (a === "0" || a === "2" || a === "3") {
                        k(l.response, b);
                    } else {
                        b.ⵠⵠᐃᐃⲆ("loaderror", null, "Failed loading audio file with status: " + l.status + ".");
                    }
                };
                l.onerror = function () {
                    if (b.ⲆⵠᐃⲆᐃ) {
                        b.ᐃⲆΔᐃⲆΔⲆ = true;
                        b.ⲆⵠᐃⲆᐃ = false;
                        b.ᐃΔⵠΔⵠ = [];
                        delete d[c];
                        b.load();
                    }
                };
                j(l);
            }
        }
        function j(a) {
            try {
                a.send();
            } catch (b) {
                a.onerror();
            }
        }
        function k(a, b) {
            g.Δ.decodeAudioData(a, function (a) {
                if (a && b.ᐃΔⵠΔⵠ.length > 0) {
                    d[b.ⲆΔⲆⵠΔ] = a;
                    h(b, a);
                }
            }, function () {
                b.ⵠⵠᐃᐃⲆ("loaderror", null, "Decoding audio data failed.");
            });
        }
        function h(a, b) {
            if (b && !a.ᐃΔⵠᐃⲆⵠⵠ) {
                a.ᐃΔⵠᐃⲆⵠⵠ = b.duration;
            }
            if (Object.keys(a.ⲆΔᐃⲆΔ).length === 0) {
                a.ⲆΔᐃⲆΔ = {
                    ⵠⵠᐃⲆⵠⵠⲆᐃⲆ: [0, a.ᐃΔⵠᐃⲆⵠⵠ * 1000]
                };
            }
            if (a.ⲆᐃΔᐃⲆ !== "loaded") {
                a.ⲆᐃΔᐃⲆ = "loaded";
                a.ⵠⵠᐃᐃⲆ("load");
                a.ⲆⵠΔⲆᐃᐃΔ();
            }
        }
        function i() {
            try {
                if (typeof AudioContext != "undefined") {
                    g.Δ = new AudioContext();
                } else if (typeof ΔΔⲆⲆⵠⵠⲆΔΔ != "undefined") {
                    g.Δ = new ΔΔⲆⲆⵠⵠⲆΔΔ();
                } else {
                    g.ΔⵠᐃΔᐃ = false;
                }
            } catch (a) {
                g.ΔⵠᐃΔᐃ = false;
            }
            var a = /iP(hone|od|ad)/.test(g.ⲆᐃⵠⲆⵠ && g.ⲆᐃⵠⲆⵠ.platform);
            var b = g.ⲆᐃⵠⲆⵠ && g.ⲆᐃⵠⲆⵠ.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
            var c = b ? parseInt(b[1], 10) : null;
            if (a && c && c < 9) {
                var d = /safari/.test(g.ⲆᐃⵠⲆⵠ && g.ⲆᐃⵠⲆⵠ.userAgent.toLowerCase());
                if (g.ⲆᐃⵠⲆⵠ && g.ⲆᐃⵠⲆⵠ.ᐃⲆΔᐃⲆⲆⵠᐃⵠ && !d || g.ⲆᐃⵠⲆⵠ && !g.ⲆᐃⵠⲆⵠ.ᐃⲆΔᐃⲆⲆⵠᐃⵠ && !d) {
                    g.ΔⵠᐃΔᐃ = false;
                }
            }
            if (g.ΔⵠᐃΔᐃ) {
                g.ᐃⵠᐃΔᐃⵠΔ = g.Δ.createGain === undefined ? g.Δ.ⵠⵠΔⵠᐃΔⲆᐃⲆ() : g.Δ.createGain();
                g.ᐃⵠᐃΔᐃⵠΔ.gain.value = g.ⵠᐃΔΔⵠ ? 0 : 1;
                g.ᐃⵠᐃΔᐃⵠΔ.connect(g.Δ.destination);
            }
            g.ΔⵠᐃⲆⵠⵠᐃ();
        }
        if (typeof ⵠⵠⲆⵠⵠᐃⲆ == "function" && ⵠⵠⲆⵠⵠᐃⲆ.ⲆⲆⵠΔⵠⵠΔ) {
            ⵠⵠⲆⵠⵠᐃⲆ([], function () {
                return {
                    Howler: g,
                    Howl: b
                };
            });
        }
        if (typeof ΔⲆⲆⲆⵠΔΔ != "undefined") {
            ΔⲆⲆⲆⵠΔΔ.Howler = g;
            ΔⲆⲆⲆⵠΔΔ.Howl = b;
        }
        if (typeof Hf != "undefined") {
            Hf.ⵠᐃΔⵠΔⲆⲆ = a;
            Hf.Howler = g;
            Hf.Howl = b;
            Hf.ⲆⲆⵠⵠⵠᐃⲆ = c;
        } else if (typeof ⲆⵠΔΔⵠⲆⵠ != "undefined") {
            ⲆⵠΔΔⵠⲆⵠ.ⵠᐃΔⵠΔⲆⲆ = a;
            ⲆⵠΔΔⵠⲆⵠ.Howler = g;
            ⲆⵠΔΔⵠⲆⵠ.Howl = b;
            ⲆⵠΔΔⵠⲆⵠ.ⲆⲆⵠⵠⵠᐃⲆ = c;
        }
    })();
    (function () {
        ⵠᐃΔⵠΔⲆⲆ.prototype.ⵠⵠᐃⵠᐃ = [0, 0, 0];
        ⵠᐃΔⵠΔⲆⲆ.prototype.ⲆⵠⵠⵠΔ = [0, 0, -1, 0, 1, 0];
        ⵠᐃΔⵠΔⲆⲆ.prototype.ᐃΔΔΔᐃΔⲆ = function (a) {
            var b = this;
            if (!b.Δ || !b.Δ.listener) {
                return b;
            }
            for (var c = b.ΔΔΔᐃⲆ.length - 1; c >= 0; c--) {
                b.ΔΔΔᐃⲆ[c].ᐃΔΔΔᐃΔⲆ(a);
            }
            return b;
        };
        ⵠᐃΔⵠΔⲆⲆ.prototype.ⵠⵠⲆⲆ = function (a, b, c) {
            var d = this;
            if (d.Δ && d.Δ.listener) {
                b = typeof b != "number" ? d.ⵠⵠᐃⵠᐃ[1] : b;
                c = typeof c != "number" ? d.ⵠⵠᐃⵠᐃ[2] : c;
                if (typeof a != "number") {
                    return d.ⵠⵠᐃⵠᐃ;
                } else {
                    d.ⵠⵠᐃⵠᐃ = [a, b, c];
                    d.Δ.listener.setPosition(d.ⵠⵠᐃⵠᐃ[0], d.ⵠⵠᐃⵠᐃ[1], d.ⵠⵠᐃⵠᐃ[2]);
                    return d;
                }
            } else {
                return d;
            }
        };
        ⵠᐃΔⵠΔⲆⲆ.prototype.orientation = function (b, c, d, e, f, g) {
            var h = this;
            if (!h.Δ || !h.Δ.listener) {
                return h;
            }
            var j = h.ⲆⵠⵠⵠΔ;
            c = typeof c != "number" ? j[1] : c;
            d = typeof d != "number" ? j[2] : d;
            e = typeof e != "number" ? j[3] : e;
            f = typeof f != "number" ? j[4] : f;
            g = typeof g != "number" ? j[5] : g;
            if (typeof b != "number") {
                return j;
            } else {
                h.ⲆⵠⵠⵠΔ = [b, c, d, e, f, g];
                h.Δ.listener.setOrientation(b, c, d, e, f, g);
                return h;
            }
        };
        Howl.prototype.ⵠᐃᐃΔΔ = function (a) {
            return function (b) {
                var c = this;
                c.ⲆⵠⵠⵠΔ = b.orientation || [1, 0, 0];
                c.ⲆᐃⵠΔᐃⲆᐃ = b.ᐃΔΔΔᐃΔⲆ || null;
                c.ⵠⵠᐃⵠᐃ = b.ⵠⵠⲆⲆ || null;
                c.ⲆΔᐃᐃⵠ = {
                    coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : 360,
                    coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : 360,
                    coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : 0,
                    distanceModel: b.distanceModel !== undefined ? b.distanceModel : "inverse",
                    maxDistance: b.maxDistance !== undefined ? b.maxDistance : 10000,
                    panningModel: b.panningModel !== undefined ? b.panningModel : "HRTF",
                    refDistance: b.refDistance !== undefined ? b.refDistance : 1,
                    rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : 1
                };
                c.ΔⵠᐃΔⲆⵠⵠⵠᐃ = b.ⵠΔⲆⲆⲆᐃᐃⲆⵠ ? [{
                    ΔⲆΔⵠⲆ: b.ⵠΔⲆⲆⲆᐃᐃⲆⵠ
                }] : [];
                c.ᐃᐃⵠΔⲆΔᐃⵠⲆ = b.ⲆⲆⵠⵠᐃⵠΔΔᐃ ? [{
                    ΔⲆΔⵠⲆ: b.ⲆⲆⵠⵠᐃⵠΔΔᐃ
                }] : [];
                c.ⵠΔᐃᐃⵠᐃᐃⵠⵠ = b.ΔⵠⲆᐃΔΔⵠΔΔ ? [{
                    ΔⲆΔⵠⲆ: b.ΔⵠⲆᐃΔΔⵠΔΔ
                }] : [];
                return a.call(this, b);
            };
        }(Howl.prototype.ⵠᐃᐃΔΔ);
        Howl.prototype.ᐃΔΔΔᐃΔⲆ = function (c, d) {
            var e = this;
            if (!e.ⲆⵠᐃⲆᐃ) {
                return e;
            }
            if (e.ⲆᐃΔᐃⲆ !== "loaded") {
                e.ⵠⲆΔᐃⵠ.push({
                    event: "stereo",
                    action: function () {
                        e.ᐃΔΔΔᐃΔⲆ(c, d);
                    }
                });
                return e;
            }
            var f = Howler.Δ.createStereoPanner === undefined ? "spatial" : "stereo";
            if (d === undefined) {
                if (typeof c != "number") {
                    return e.ⲆᐃⵠΔᐃⲆᐃ;
                }
                e.ⲆᐃⵠΔᐃⲆᐃ = c;
                e.ⵠⵠᐃⵠᐃ = [c, 0, 0];
            }
            for (var g = e.ᐃⵠΔΔⲆ(d), a = 0; a < g.length; a++) {
                var h = e.ⲆΔᐃᐃΔ(g[a]);
                if (h) {
                    if (typeof c != "number") {
                        return h.ⲆᐃⵠΔᐃⲆᐃ;
                    }
                    h.ⲆᐃⵠΔᐃⲆᐃ = c;
                    h.ⵠⵠᐃⵠᐃ = [c, 0, 0];
                    if (h.Δᐃᐃᐃ) {
                        h.ⲆΔᐃᐃⵠ.panningModel = "equalpower";
                        if (!h.ⵠΔⲆⵠΔ || !h.ⵠΔⲆⵠΔ.pan) {
                            b(h, f);
                        }
                        if (f === "spatial") {
                            h.ⵠΔⲆⵠΔ.setPosition(c, 0, 0);
                        } else {
                            h.ⵠΔⲆⵠΔ.pan.value = c;
                        }
                    }
                    e.ⵠⵠᐃᐃⲆ("stereo", h.ⲆΔⲆᐃ);
                }
            }
            return e;
        };
        Howl.prototype.ⵠⵠⲆⲆ = function (c, d, e, f) {
            var g = this;
            if (!g.ⲆⵠᐃⲆᐃ) {
                return g;
            }
            if (g.ⲆᐃΔᐃⲆ !== "loaded") {
                g.ⵠⲆΔᐃⵠ.push({
                    event: "pos",
                    action: function () {
                        g.ⵠⵠⲆⲆ(c, d, e, f);
                    }
                });
                return g;
            }
            d = typeof d != "number" ? 0 : d;
            e = typeof e != "number" ? -0.5 : e;
            if (f === undefined) {
                if (typeof c != "number") {
                    return g.ⵠⵠᐃⵠᐃ;
                }
                g.ⵠⵠᐃⵠᐃ = [c, d, e];
            }
            for (var a = g.ᐃⵠΔΔⲆ(f), i = 0; i < a.length; i++) {
                var j = g.ⲆΔᐃᐃΔ(a[i]);
                if (j) {
                    if (typeof c != "number") {
                        return j.ⵠⵠᐃⵠᐃ;
                    }
                    j.ⵠⵠᐃⵠᐃ = [c, d, e];
                    if (j.Δᐃᐃᐃ) {
                        if (!j.ⵠΔⲆⵠΔ || !!j.ⵠΔⲆⵠΔ.pan) {
                            b(j, "spatial");
                        }
                        j.ⵠΔⲆⵠΔ.setPosition(c, d, e);
                    }
                    g.ⵠⵠᐃᐃⲆ("pos", j.ⲆΔⲆᐃ);
                }
            }
            return g;
        };
        Howl.prototype.orientation = function (c, d, e, f) {
            var g = this;
            if (!g.ⲆⵠᐃⲆᐃ) {
                return g;
            }
            if (g.ⲆᐃΔᐃⲆ !== "loaded") {
                g.ⵠⲆΔᐃⵠ.push({
                    event: "orientation",
                    action: function () {
                        g.orientation(c, d, e, f);
                    }
                });
                return g;
            }
            d = typeof d != "number" ? g.ⲆⵠⵠⵠΔ[1] : d;
            e = typeof e != "number" ? g.ⲆⵠⵠⵠΔ[2] : e;
            if (f === undefined) {
                if (typeof c != "number") {
                    return g.ⲆⵠⵠⵠΔ;
                }
                g.ⲆⵠⵠⵠΔ = [c, d, e];
            }
            for (var a = g.ᐃⵠΔΔⲆ(f), i = 0; i < a.length; i++) {
                var j = g.ⲆΔᐃᐃΔ(a[i]);
                if (j) {
                    if (typeof c != "number") {
                        return j.ⲆⵠⵠⵠΔ;
                    }
                    j.ⲆⵠⵠⵠΔ = [c, d, e];
                    if (j.Δᐃᐃᐃ) {
                        if (!j.ⵠΔⲆⵠΔ) {
                            j.ⵠⵠᐃⵠᐃ ||= g.ⵠⵠᐃⵠᐃ || [0, 0, -0.5];
                            b(j, "spatial");
                        }
                        j.ⵠΔⲆⵠΔ.setOrientation(c, d, e);
                    }
                    g.ⵠⵠᐃᐃⲆ("orientation", j.ⲆΔⲆᐃ);
                }
            }
            return g;
        };
        Howl.prototype.ⵠΔᐃⵠΔᐃⲆᐃᐃ = function () {
            var c;
            var d;
            var e;
            var f = this;
            var g = arguments;
            if (!f.ⲆⵠᐃⲆᐃ) {
                return f;
            }
            if (g.length === 0) {
                return f.ⲆΔᐃᐃⵠ;
            }
            if (g.length === 1) {
                if (typeof g[0] != "object") {
                    if (e = f.ⲆΔᐃᐃΔ(parseInt(g[0], 10))) {
                        return e.ⲆΔᐃᐃⵠ;
                    } else {
                        return f.ⲆΔᐃᐃⵠ;
                    }
                }
                c = g[0];
                if (d === undefined) {
                    f.ⲆΔᐃᐃⵠ = {
                        coneInnerAngle: c.coneInnerAngle !== undefined ? c.coneInnerAngle : f.ΔⲆⵠⵠⲆⲆᐃᐃⵠ,
                        coneOuterAngle: c.coneOuterAngle !== undefined ? c.coneOuterAngle : f.ⲆᐃⲆⵠⵠⲆΔᐃΔ,
                        coneOuterGain: c.coneOuterGain !== undefined ? c.coneOuterGain : f.ᐃⵠᐃᐃᐃⲆΔᐃⵠ,
                        distanceModel: c.distanceModel !== undefined ? c.distanceModel : f.ᐃⲆⲆⵠⲆΔⲆΔⵠ,
                        maxDistance: c.maxDistance !== undefined ? c.maxDistance : f.ⲆΔᐃⵠⵠΔᐃⲆⲆ,
                        panningModel: c.panningModel !== undefined ? c.panningModel : f.ΔⵠⵠᐃⵠΔⵠΔΔ,
                        refDistance: c.refDistance !== undefined ? c.refDistance : f.ΔⲆΔΔᐃΔⵠⵠⵠ,
                        rolloffFactor: c.rolloffFactor !== undefined ? c.rolloffFactor : f.ᐃⵠΔᐃⵠⲆᐃⵠⵠ
                    };
                }
            } else if (g.length === 2) {
                c = g[0];
                d = parseInt(g[1], 10);
            }
            for (var a = f.ᐃⵠΔΔⲆ(d), j = 0; j < a.length; j++) {
                if (e = f.ⲆΔᐃᐃΔ(a[j])) {
                    var k = e.ⲆΔᐃᐃⵠ;
                    k = {
                        coneInnerAngle: c.coneInnerAngle !== undefined ? c.coneInnerAngle : k.coneInnerAngle,
                        coneOuterAngle: c.coneOuterAngle !== undefined ? c.coneOuterAngle : k.coneOuterAngle,
                        coneOuterGain: c.coneOuterGain !== undefined ? c.coneOuterGain : k.coneOuterGain,
                        distanceModel: c.distanceModel !== undefined ? c.distanceModel : k.distanceModel,
                        maxDistance: c.maxDistance !== undefined ? c.maxDistance : k.maxDistance,
                        panningModel: c.panningModel !== undefined ? c.panningModel : k.panningModel,
                        refDistance: c.refDistance !== undefined ? c.refDistance : k.refDistance,
                        rolloffFactor: c.rolloffFactor !== undefined ? c.rolloffFactor : k.rolloffFactor
                    };
                    var m = e.ⵠΔⲆⵠΔ;
                    if (m) {
                        m.coneInnerAngle = k.coneInnerAngle;
                        m.coneOuterAngle = k.coneOuterAngle;
                        m.coneOuterGain = k.coneOuterGain;
                        m.distanceModel = k.distanceModel;
                        m.maxDistance = k.maxDistance;
                        m.panningModel = k.panningModel;
                        m.refDistance = k.refDistance;
                        m.rolloffFactor = k.rolloffFactor;
                    } else {
                        e.ⵠⵠᐃⵠᐃ ||= f.ⵠⵠᐃⵠᐃ || [0, 0, -0.5];
                        b(e, "spatial");
                    }
                }
            }
            return f;
        };
        ⲆⲆⵠⵠⵠᐃⲆ.prototype.ⵠᐃᐃΔΔ = function (a) {
            return function () {
                var b = this;
                var c = b.ΔΔⲆⵠⵠΔΔ;
                b.ⲆⵠⵠⵠΔ = c.ⲆⵠⵠⵠΔ;
                b.ⲆᐃⵠΔᐃⲆᐃ = c.ⲆᐃⵠΔᐃⲆᐃ;
                b.ⵠⵠᐃⵠᐃ = c.ⵠⵠᐃⵠᐃ;
                b.ⲆΔᐃᐃⵠ = c.ⲆΔᐃᐃⵠ;
                a.call(this);
                if (b.ⲆᐃⵠΔᐃⲆᐃ) {
                    c.ᐃΔΔΔᐃΔⲆ(b.ⲆᐃⵠΔᐃⲆᐃ);
                } else if (b.ⵠⵠᐃⵠᐃ) {
                    c.ⵠⵠⲆⲆ(b.ⵠⵠᐃⵠᐃ[0], b.ⵠⵠᐃⵠᐃ[1], b.ⵠⵠᐃⵠᐃ[2], b.ⲆΔⲆᐃ);
                }
            };
        }(ⲆⲆⵠⵠⵠᐃⲆ.prototype.ⵠᐃᐃΔΔ);
        ⲆⲆⵠⵠⵠᐃⲆ.prototype.reset = function (a) {
            return function () {
                var b = this;
                var c = b.ΔΔⲆⵠⵠΔΔ;
                b.ⲆⵠⵠⵠΔ = c.ⲆⵠⵠⵠΔ;
                b.ⵠⵠᐃⵠᐃ = c.ⵠⵠᐃⵠᐃ;
                b.ⲆΔᐃᐃⵠ = c.ⲆΔᐃᐃⵠ;
                return a.call(this);
            };
        }(ⲆⲆⵠⵠⵠᐃⲆ.prototype.reset);
        function b(a, b) {
            b = b || "spatial";
            if (b === "spatial") {
                a.ⵠΔⲆⵠΔ = Howler.Δ.createPanner();
                a.ⵠΔⲆⵠΔ.coneInnerAngle = a.ⲆΔᐃᐃⵠ.coneInnerAngle;
                a.ⵠΔⲆⵠΔ.coneOuterAngle = a.ⲆΔᐃᐃⵠ.coneOuterAngle;
                a.ⵠΔⲆⵠΔ.coneOuterGain = a.ⲆΔᐃᐃⵠ.coneOuterGain;
                a.ⵠΔⲆⵠΔ.distanceModel = a.ⲆΔᐃᐃⵠ.distanceModel;
                a.ⵠΔⲆⵠΔ.maxDistance = a.ⲆΔᐃᐃⵠ.maxDistance;
                a.ⵠΔⲆⵠΔ.panningModel = a.ⲆΔᐃᐃⵠ.panningModel;
                a.ⵠΔⲆⵠΔ.refDistance = a.ⲆΔᐃᐃⵠ.refDistance;
                a.ⵠΔⲆⵠΔ.rolloffFactor = a.ⲆΔᐃᐃⵠ.rolloffFactor;
                a.ⵠΔⲆⵠΔ.setPosition(a.ⵠⵠᐃⵠᐃ[0], a.ⵠⵠᐃⵠᐃ[1], a.ⵠⵠᐃⵠᐃ[2]);
                a.ⵠΔⲆⵠΔ.setOrientation(a.ⲆⵠⵠⵠΔ[0], a.ⲆⵠⵠⵠΔ[1], a.ⲆⵠⵠⵠΔ[2]);
            } else {
                a.ⵠΔⲆⵠΔ = Howler.Δ.createStereoPanner();
                a.ⵠΔⲆⵠΔ.pan.value = a.ⲆᐃⵠΔᐃⲆᐃ;
            }
            a.ⵠΔⲆⵠΔ.connect(a.Δᐃᐃᐃ);
            if (!a.ΔΔΔⲆⵠ) {
                a.ΔΔⲆⵠⵠΔΔ.pause(a.ⲆΔⲆᐃ, true).play(a.ⲆΔⲆᐃ);
            }
        }
    })();
    ;
    function lx(a, b) {
        Mj(Db, a, b);
        return ((134 + (lp(Ib[0], Ib[1], Ib[0]) ^ ur(Ib[1], Ib[0]))) * 16807 + 0) % 2147483647;
    }
    var mx = 1;
    var nx = 1;
    var ox = {
        ⲆΔⲆⲆᐃⵠᐃⵠⵠ: 12,
        ⲆΔᐃᐃⲆ: 2,
        ᐃᐃᐃ: 6,
        ⵠΔⵠᐃΔΔΔ: 12,
        ΔⲆⲆⵠᐃⲆΔᐃΔ: 12,
        ᐃⵠΔᐃΔᐃⲆᐃⲆ: 5000,
        ⲆⲆᐃΔΔⲆⲆⲆⵠ: 5000,
        ⲆᐃⲆⵠΔᐃΔ: 3000,
        ᐃΔΔΔⲆ: 1,
        ⵠΔⲆᐃΔ: 8,
        ⵠⲆⵠΔΔⵠⵠ: 460000,
        ⲆΔⲆΔᐃ: 3,
        ᐃⵠⵠⵠΔΔⵠⲆⲆ: 5000
    };
    var px = [];
    px[-1] = 1;
    px[28] = 1;
    px[49] = 1;
    px[Xr.ᐃⵠᐃⲆⲆⲆΔᐃⵠ] = 2;
    px[8] = 2;
    px[1] = 2;
    px[3] = 2;
    px[4] = 2;
    px[31] = 2;
    px[32] = 2;
    px[9] = 2;
    px[57] = 2;
    px[0] = 2;
    px[63] = 2;
    px[17] = 2;
    px[5] = 2;
    px[6] = 2;
    px[30] = 2;
    px[Xr.ⵠⲆⵠᐃΔΔⵠⵠᐃ] = 2;
    px[18] = 2;
    px[12] = 2;
    px[13] = 2;
    px[14] = 2;
    px[15] = 2;
    px[16] = 2;
    px[33] = 2;
    px[Xr.ⲆⵠⲆⵠᐃⵠⵠⲆΔ] = 2;
    px[35] = 2;
    px[36] = 2;
    px[37] = 2;
    px[38] = 2;
    px[39] = 2;
    px[45] = 2;
    px[62] = 2;
    px[54] = 2;
    px[53] = 2;
    px[46] = 3;
    px[50] = 3;
    px[51] = 3;
    px[52] = 3;
    ΔⲆᐃⵠ = [];
    ΔⲆᐃⵠ[0] = 0;
    ΔⲆᐃⵠ[1] = 1;
    ΔⲆᐃⵠ[2] = 1;
    ΔⲆᐃⵠ[3] = 1;
    ΔⲆᐃⵠ[4] = 0;
    ΔⲆᐃⵠ[5] = 0;
    ΔⲆᐃⵠ[6] = 0;
    const qx = 4276939;
    const rx = 4276939 .ⲆⲆᐃᐃⲆΔⲆⵠᐃ;
    const sx = `const ⵠⵠⵠᐃΔⵠⲆᐃΔ = (typeof ΔⲆΔⵠ === "${rx}") ? 1 : 0; return ⵠⵠⵠᐃΔⵠⲆᐃΔ;`;
    ΔⲆᐃⵠ[7] = 0;
    ΔⲆᐃⵠ[8] = 0;
    ΔⲆᐃⵠ[9] = 0;
    ΔⲆᐃⵠ[10] = 1;
    ΔⲆᐃⵠ[11] = 1;
    ΔⲆᐃⵠ[12] = 1;
    ΔⲆᐃⵠ[13] = 1;
    ΔⲆᐃⵠ[14] = 1;
    ΔⲆᐃⵠ[15] = 1;
    ΔⲆᐃⵠ[16] = 0;
    ΔⲆᐃⵠ[17] = 0;
    ΔⲆᐃⵠ[18] = 0;
    ΔⲆᐃⵠ[19] = 0;
    ΔⲆᐃⵠ[20] = 0;
    ΔⲆᐃⵠ[21] = 0;
    ΔⲆᐃⵠ[22] = 0;
    ΔⲆᐃⵠ[23] = 1;
    ΔⲆᐃⵠ[24] = 1;
    ΔⲆᐃⵠ[25] = 1;
    ΔⲆᐃⵠ[26] = 1;
    ΔⲆᐃⵠ[27] = 1;
    ΔⲆᐃⵠ[28] = 1;
    ΔⲆᐃⵠ[29] = 1;
    ΔⲆᐃⵠ[30] = 1;
    ΔⲆᐃⵠ[31] = 1;
    ΔⲆᐃⵠ[32] = 1;
    ΔⲆᐃⵠ[33] = 1;
    ΔⲆᐃⵠ[34] = 1;
    ΔⲆᐃⵠ[35] = 1;
    ΔⲆᐃⵠ[36] = 1;
    ΔⲆᐃⵠ[37] = 1;
    ΔⲆᐃⵠ[38] = 1;
    ΔⲆᐃⵠ[40] = 0;
    ΔⲆᐃⵠ[41] = 0;
    ΔⲆᐃⵠ[42] = 0;
    ΔⲆᐃⵠ[50] = 1;
    ΔⲆᐃⵠ[51] = 1;
    ΔⲆᐃⵠ[52] = 1;
    ΔⲆᐃⵠ[55] = 0;
    ΔⲆᐃⵠ[56] = 0;
    ΔⲆᐃⵠ[57] = 0;
    ΔⲆᐃⵠ[58] = 0;
    ᐃⵠᐃⲆⲆ = [];
    ᐃⵠᐃⲆⲆ[$f.ᐃⵠᐃⵠΔ] = 0;
    ᐃⵠᐃⲆⲆ[1] = 0;
    ᐃⵠᐃⲆⲆ[29] = 0;
    ᐃⵠᐃⲆⲆ[6] = 0;
    ᐃⵠᐃⲆⲆ[3] = -1;
    ᐃⵠᐃⲆⲆ[31] = -1;
    ᐃⵠᐃⲆⲆ[2] = 0;
    ᐃⵠᐃⲆⲆ[4] = 0;
    ᐃⵠᐃⲆⲆ[30] = 0;
    ᐃⵠᐃⲆⲆ[33] = 0;
    ᐃⵠᐃⲆⲆ[32] = 1;
    ᐃⵠᐃⲆⲆ[35] = 1;
    ᐃⵠᐃⲆⲆ[7] = 1;
    ᐃⵠᐃⲆⲆ[8] = 1;
    ᐃⵠᐃⲆⲆ[9] = 1;
    ᐃⵠᐃⲆⲆ[19] = 1;
    ᐃⵠᐃⲆⲆ[50] = 1;
    ᐃⵠᐃⲆⲆ[5] = 0;
    ᐃⵠᐃⲆⲆ[12] = 1;
    ᐃⵠᐃⲆⲆ[13] = 1;
    ᐃⵠᐃⲆⲆ[14] = 1;
    ᐃⵠᐃⲆⲆ[20] = 1;
    ᐃⵠᐃⲆⲆ[52] = 1;
    ᐃⵠᐃⲆⲆ[10] = 0;
    if (Hf.ᐃΔⲆⲆⵠⲆΔⵠⵠ) {
        var tx = Hf.Math.acos;
        Hf.Math.acos = Hf.Math.asin;
        Hf.Math.asin = tx;
        var ux = Hf.Math.acos;
        Hf.Math.acos = Hf.Math.asin;
        Hf.Math.asin = ux;
    }
    ᐃⵠᐃⲆⲆ[15] = 1;
    ᐃⵠᐃⲆⲆ[16] = 1;
    ᐃⵠᐃⲆⲆ[17] = 1;
    ᐃⵠᐃⲆⲆ[21] = 1;
    ᐃⵠᐃⲆⲆ[51] = 1;
    ᐃⵠᐃⲆⲆ[45] = 0;
    ᐃⵠᐃⲆⲆ[46] = 1;
    ᐃⵠᐃⲆⲆ[47] = 1;
    ᐃⵠᐃⲆⲆ[48] = 1;
    ᐃⵠᐃⲆⲆ[49] = 1;
    ᐃⵠᐃⲆⲆ[53] = 1;
    ᐃⵠᐃⲆⲆ[18] = 1;
    ᐃⵠᐃⲆⲆ[22] = 1;
    ᐃⵠᐃⲆⲆ[23] = 1;
    ᐃⵠᐃⲆⲆ[11] = 0;
    ᐃⵠᐃⲆⲆ[34] = 1;
    var vx = {
        ⲆⵠⲆⵠΔⲆᐃ: {
            ᐃᐃᐃⵠᐃ: null,
            path: ["audio/ambience.mp3"],
            ᐃΔ: {
                d0: [90086, 300, false],
                d2: [90684, 300, Sg],
                d1: [90391, 300, Sg]
            },
            sample: {
                d0: 8,
                d1: 8,
                d2: 8
            }
        },
        ⵠᐃᐃⵠΔΔᐃ: {
            ᐃᐃᐃⵠᐃ: null,
            path: ["audio/ambience.mp3"],
            ᐃΔ: {
                p2: [89815, 300, w],
                p1: [89549, 300, yj],
                p0: [89303, 300, Xb]
            },
            sample: {
                p0: 8,
                p1: 8,
                p2: 8
            }
        },
        ΔᐃⵠᐃⲆⲆᐃ: {
            ᐃᐃᐃⵠᐃ: null,
            path: ["audio/ambience.mp3"],
            ᐃΔ: {
                w3: [89025, 300, tr],
                w2: [88751, 300, false],
                w0: [88195, 300, Ah],
                w1: [88473, 300, false]
            },
            sample: {
                w0: 8,
                w1: 8,
                w2: 8,
                w3: 8
            }
        },
        ΔⵠⵠⲆΔᐃΔ: {
            ᐃᐃᐃⵠᐃ: null,
            path: ["audio/ambience.mp3"],
            ᐃΔ: {
                ΔⵠⲆΔⵠᐃΔ: [92249, 500, false],
                ΔΔᐃᐃⵠᐃΔ: [30562, 655, Mk],
                ᐃΔᐃⵠΔ: [91431, 400, Ad],
                ⲆⵠⵠⲆᐃΔᐃ: [31658, 813, true],
                ⵠΔⲆⵠⵠᐃⲆ: [32604, 21890, Un],
                ᐃⵠᐃΔᐃⵠⵠ: [66961, 21223, true],
                ⲆᐃⲆⵠᐃΔΔΔⲆ: [100, 2800, true],
                ΔⲆⲆⲆᐃ: [12356, 6965, _r],
                ⵠΔᐃⵠΔⲆⲆ: [91022, 400, false],
                ΔⵠⲆΔΔΔᐃ: [3100, 8800, kk],
                ΔΔᐃⲆⲆ: [28380, 1797, Pj],
                ᐃⲆⵠⲆΔⵠΔ: [66961, 21223, true],
                ᐃᐃᐃΔⵠᐃΔ: [66014, 925, ek],
                ⲆⲆΔⵠⲆⲆⲆ: [19882, 8301, dr],
                ⵠⵠᐃⲆⵠⵠⲆ: [54524, 11393, As]
            },
            sample: {
                ⲆᐃⲆⵠᐃΔΔΔⲆ: 1,
                ΔⵠⲆΔΔΔᐃ: 1,
                ⲆⲆΔⵠⲆⲆⲆ: 1,
                ⵠΔⲆⵠⵠᐃⲆ: 1,
                ⵠⵠᐃⲆⵠⵠⲆ: 1,
                ᐃⲆⵠⲆΔⵠΔ: 1,
                ᐃⵠᐃΔᐃⵠⵠ: 1,
                ΔⲆⲆⲆᐃ: 8,
                ΔΔᐃⲆⲆ: 8,
                ΔΔᐃᐃⵠᐃΔ: 8,
                ⲆⵠⵠⲆᐃΔᐃ: 8,
                ᐃᐃᐃΔⵠᐃΔ: 8,
                ⵠΔᐃⵠΔⲆⲆ: 6,
                ᐃΔᐃⵠΔ: 6,
                ΔⵠⲆΔⵠᐃΔ: 6
            }
        }
    };
    function wx(b, c, d, e, f, g, a, i, j, h, k) {
        this.r = 1;
        this.ⲆⲆᐃΔΔ = b;
        this.ΔⵠᐃᐃΔᐃΔ = b;
        this.ⵠΔⵠ = c;
        this.Δⵠᐃ = d;
        this.fade = e;
        this.ᐃⲆⲆⵠⵠⲆΔ = f;
        this.ⲆⲆⲆⵠⲆᐃᐃ = g;
        this.ΔⵠΔⲆ = a;
        this.ⲆΔΔⵠΔⵠⵠ = i;
        this.source = j;
        this.source.ᐃⲆⲆᐃΔⲆΔ = j.x + j.w;
        this.source.ΔⵠᐃⲆⵠ = j.y + j.ⵠⲆⵠ;
        this.ΔⲆⲆΔᐃⵠⲆⵠⵠ = h;
        this.ⵠⲆΔⵠΔⵠᐃ = k;
        this.ᐃⲆⵠⲆⲆⵠᐃ = 0;
        this.ⲆΔᐃᐃⵠΔⲆ = {
            d: 5,
            ⲆΔᐃᐃ: 5
        };
        this.ΔΔᐃⲆⵠ = function () {
            this.ⲆⲆᐃΔΔ -= Lx;
            if (this.ⲆⲆᐃΔΔ < 0) {
                this.ⲆⲆᐃΔΔ = this.ΔⵠᐃᐃΔᐃΔ;
                var a = vx.ΔⵠⵠⲆΔᐃΔ.ᐃᐃᐃⵠᐃ.playing(this.ⵠΔⵠ);
                var b = vx.ΔⵠⵠⲆΔᐃΔ.ᐃᐃᐃⵠᐃ.playing(this.Δⵠᐃ);
                if (a && !b) {
                    var c = nx * this.ΔⵠΔⲆ.volume(this.ⵠΔⵠ);
                    var d = nx * (this.ⲆⲆⲆⵠⲆᐃᐃ * Math.random() + this.ᐃⲆⲆⵠⵠⲆΔ);
                    this.ΔⵠΔⲆ.fade(c, d, this.fade, this.ⵠΔⵠ);
                } else if (!a && b) {
                    c = nx * this.ΔⵠΔⲆ.volume(this.Δⵠᐃ);
                    d = nx * (Math.random() * this.ⲆⲆⲆⵠⲆᐃᐃ + this.ᐃⲆⲆⵠⵠⲆΔ);
                    this.ΔⵠΔⲆ.fade(c, d, this.fade, this.Δⵠᐃ);
                }
            }
        };
        this.transition = function () {
            this.ⲆⲆᐃΔΔ = this.ΔⵠᐃᐃΔᐃΔ;
            this.ⲆΔᐃᐃⵠΔⲆ.d = this.ⲆΔᐃᐃⵠΔⲆ.ⲆΔᐃᐃ;
            if (Dx.time) {
                this.ΔⵠΔⲆ.fade(0, nx * this.ᐃⲆⲆⵠⵠⲆΔ, this.ⲆΔΔⵠΔⵠⵠ, this.ⵠΔⵠ);
                this.ΔⵠΔⲆ.play(this.ⵠΔⵠ);
                if (this.ΔⵠΔⲆ.playing(this.Δⵠᐃ)) {
                    var a = this.ΔⵠΔⲆ.volume(this.Δⵠᐃ) * nx;
                    this.ΔⵠΔⲆ.fade(a, 0, this.ⲆΔΔⵠΔⵠⵠ, this.Δⵠᐃ);
                }
            } else {
                this.ΔⵠΔⲆ.fade(0, this.ᐃⲆⲆⵠⵠⲆΔ * nx, this.ⲆΔΔⵠΔⵠⵠ, this.Δⵠᐃ);
                this.ΔⵠΔⲆ.play(this.Δⵠᐃ);
                if (this.ΔⵠΔⲆ.playing(this.ⵠΔⵠ)) {
                    a = this.ΔⵠΔⲆ.volume(this.ⵠΔⵠ) * nx;
                    this.ΔⵠΔⲆ.fade(a, 0, this.ⲆΔΔⵠΔⵠⵠ, this.ⵠΔⵠ);
                }
            }
        };
        this.check = function (a) {
            if (this.ᐃⲆⵠⲆⲆⵠᐃ) {
                if (ⵠΔⲆⵠ.ⵠⲆΔⵠΔⵠᐃ(a, this.ΔⲆⲆΔᐃⵠⲆⵠⵠ)) {
                    if (!Hx.transition && Dx.ⲆⲆⵠΔⵠ.now < 460000) {
                        if (Dx.time) {
                            if (!this.ΔⵠΔⲆ.playing(this.ⵠΔⵠ)) {
                                this.ⲆΔᐃᐃⵠΔⲆ.d -= Lx;
                                if (this.ⲆΔᐃᐃⵠΔⲆ.d < 0) {
                                    this.transition();
                                }
                            }
                        } else if (!this.ΔⵠΔⲆ.playing(this.Δⵠᐃ)) {
                            this.ⲆΔᐃᐃⵠΔⲆ.d -= Lx;
                            if (this.ⲆΔᐃᐃⵠΔⲆ.d < 0) {
                                this.transition();
                            }
                        }
                    }
                } else {
                    this.ᐃⲆⵠⲆⲆⵠᐃ = 0;
                    if (this.ΔⵠΔⲆ.playing(this.ⵠΔⵠ)) {
                        var b = nx * this.ΔⵠΔⲆ.volume(this.ⵠΔⵠ);
                        this.ΔⵠΔⲆ.fade(b, 0, this.ⲆΔΔⵠΔⵠⵠ, this.ⵠΔⵠ);
                    }
                    if (this.ΔⵠΔⲆ.playing(this.Δⵠᐃ)) {
                        b = nx * this.ΔⵠΔⲆ.volume(this.Δⵠᐃ);
                        this.ΔⵠΔⲆ.fade(b, 0, this.ⲆΔΔⵠΔⵠⵠ, this.Δⵠᐃ);
                    }
                }
            } else if (ⵠΔⲆⵠ.ⵠⲆΔⵠΔⵠᐃ(a, this.ⵠⲆΔⵠΔⵠᐃ)) {
                this.ᐃⲆⵠⲆⲆⵠᐃ = 1;
                if (!Hx.transition && Dx.ⲆⲆⵠΔⵠ.now < 460000) {
                    this.transition();
                }
            }
        };
        this.ⲆΔᐃ = function (a, b) {
            var c;
            var d;
            c = this.source.x > a.x ? Hx.ⵠⵠΔⵠⲆΔᐃ(this.source.x) : a.x > this.source.ᐃⲆⲆᐃΔⲆΔ ? Hx.ⵠⵠΔⵠⲆΔᐃ(this.source.ᐃⲆⲆᐃΔⲆΔ) : b.x;
            d = a.y < this.source.y ? Hx.ⲆᐃⲆⵠᐃⵠΔ(this.source.y) : this.source.ΔⵠᐃⲆⵠ < a.y ? Hx.ⲆᐃⲆⵠᐃⵠΔ(this.source.ΔⵠᐃⲆⵠ) : b.y;
            this.ΔⵠΔⲆ.pos(c, d, -0.5, this.ⵠΔⵠ);
            this.ΔⵠΔⲆ.pos(c, d, -0.5, this.Δⵠᐃ);
        };
    }
    function xx(b, c, d, e, f) {
        const g = (16 << (d & 255)) + (8 << (d >> 24 & 255)) + (0 << (d >> 8 & 255)) + (24 << (d >> 16 & 255));
        const a = (8 << (e >> 24 & 255)) + (16 << (e >> 8 & 255)) + (0 << (e & 255)) + (24 << (e >> 16 & 255));
        return (2531011 + (45419 + (kx((1 + (26686 + b) * 22695477) % 4294967296, ((c + 5501) * 2147483629 + 2147483587) % 2147483647) ^ kx(g, a))) * 214013) % 4294967296;
    }
    ⲆⲆΔⲆⵠ = {
        ⲆᐃⵠᐃᐃⵠΔΔⲆ: 0.4,
        ᐃⵠⲆΔⵠⵠᐃ: 0,
        ΔΔⲆⲆⵠⵠᐃ: 4,
        ΔⵠⲆⵠⲆΔΔ: 300,
        ᐃΔᐃⲆⲆⵠᐃ: 100,
        ΔᐃⵠⵠⲆⵠⵠᐃΔ: 0.2,
        ᐃⵠᐃᐃΔⵠⵠ: 2,
        ⲆⲆⵠⵠⵠⵠᐃ: 100,
        ⵠΔⲆⵠᐃΔᐃⵠⲆ: 0.2,
        ⲆⲆⲆⲆΔΔⲆ: 100,
        ᐃⲆᐃⲆⵠⵠΔΔΔ: 0.2,
        ⲆᐃⵠᐃΔ: 2,
        ⵠⵠΔⵠⲆⵠΔ: 3,
        ᐃⵠⵠⲆⲆΔΔ: 1
    };
    function yx(a, b, c) {
        this.ⲆⲆᐃⲆⲆⲆⵠ = a;
        this.c = 0;
        this.ΔⵠΔⲆ = b;
        this.ΔⲆⵠᐃⲆ = c;
        this.max = c.length;
        this.play = function () {
            this.c = (this.c + 1) % this.max;
            var a = this.ΔⲆⵠᐃⲆ[this.c];
            this.ⲆⲆᐃⲆⲆⲆⵠ.ΔᐃΔⵠⵠᐃᐃ(this.ΔⵠΔⲆ, a);
            this.ΔⵠΔⲆ.play(a);
        };
    }
    function zx(a) {
        this.ⵠⲆⵠΔⵠᐃΔ = 1;
        this.ᐃⵠᐃΔ = 0;
        this.mode = -1;
        this.ΔΔᐃⲆⲆ = Hx.sample.ΔΔᐃⲆⲆ[a];
        this.ΔΔᐃᐃⵠᐃΔ = Hx.sample.ΔΔᐃᐃⵠᐃΔ[a];
        this.ⲆⵠⵠⲆᐃΔᐃ = Hx.sample.ⲆⵠⵠⲆᐃΔᐃ[a];
        this.ᐃᐃᐃΔⵠᐃΔ = Hx.sample.ᐃᐃᐃΔⵠᐃΔ[a];
        this.ΔⵠΔΔⵠⵠᐃ = new yx(this, vx.ⵠᐃᐃⵠΔΔᐃ.ᐃᐃᐃⵠᐃ, Hx.ⲆⵠᐃΔⵠ.ΔⵠΔΔⵠⵠᐃ[a]);
        this.ⵠᐃΔΔΔ = new yx(this, vx.ΔᐃⵠᐃⲆⲆᐃ.ᐃᐃᐃⵠᐃ, Hx.ⲆⵠᐃΔⵠ.ⵠᐃΔΔΔ[a]);
        this.ⵠΔⵠΔⵠ = new yx(this, vx.ⲆⵠⲆⵠΔⲆᐃ.ᐃᐃᐃⵠᐃ, Hx.ⲆⵠᐃΔⵠ.ⵠΔⵠΔⵠ[a]);
        this.ΔⲆⲆΔⲆ = a;
        this.x = 0;
        this.y = 0;
        this.ⵠⵠⲆⲆᐃ = 0;
        this.ⲆⲆᐃΔΔ = ⲆⲆΔⲆⵠ.ᐃⲆᐃⵠⵠΔΔⵠΔ;
        this.ⵠⵠⲆⲆ = {
            y: 0,
            x: 0
        };
        this.ⲆⲆⵠⲆⵠ = vx.ΔⵠⵠⲆΔᐃΔ.ᐃᐃᐃⵠᐃ;
        this.ᐃᐃΔⵠⵠΔᐃⵠⲆ = function (a) {
            if (a === 1) {
                this.ΔⵠΔΔⵠⵠᐃ.play();
            } else if (a === 2) {
                this.ⵠᐃΔΔΔ.play();
            } else if (a === 3) {
                this.ⵠΔⵠΔⵠ.play();
            }
        };
        this.ΔᐃΔⵠΔΔⲆ = function (a) {
            if (a.ⲆᐃᐃⲆⵠⵠΔ > 0) {
                return ⲆⲆΔⲆⵠ.ⲆᐃⵠᐃΔ;
            } else if (a.ΔⲆᐃᐃⲆⵠᐃ > 0) {
                return ⲆⲆΔⲆⵠ.ᐃⵠⵠⲆⲆΔΔ;
            } else if (a.Ⲇⵠⵠⵠⵠ > 0 || a.ⵠⲆⲆΔΔ > 0) {
                return ⲆⲆΔⲆⵠ.ⵠⵠΔⵠⲆⵠΔ;
            } else {
                return ⲆⲆΔⲆⵠ.ᐃⵠⲆΔⵠⵠᐃ;
            }
        };
        this.ⵠᐃᐃΔΔ = function (a) {
            this.ⵠⲆⵠΔⵠᐃΔ = 0;
            this.ᐃⵠᐃΔ = a;
            var b = Dx.ⲆΔᐃΔΔ[a];
            b.ΔⲆⲆΔⲆ = this.ΔⲆⲆΔⲆ;
            this.mode = this.ΔᐃΔⵠΔΔⲆ(b);
            this.ⵠⵠⲆⲆ.x = b.x;
            this.ⵠⵠⲆⲆ.y = b.y;
        };
        this.ⵠΔᐃΔᐃΔⲆ = function () {
            this.ⵠⲆⵠΔⵠᐃΔ = 1;
            this.mode = -1;
            this.ⲆⲆⵠⲆⵠ.stop(this.ΔΔᐃⲆⲆ);
            this.ⲆⲆⵠⲆⵠ.stop(this.ΔΔᐃᐃⵠᐃΔ);
            this.ⲆⲆⵠⲆⵠ.stop(this.ⲆⵠⵠⲆᐃΔᐃ);
            this.ⲆⲆⵠⲆⵠ.stop(this.ᐃᐃᐃΔⵠᐃΔ);
        };
        this.fade = function (a, b) {
            var c = this.ⲆⲆⵠⲆⵠ.volume(a) * mx;
            this.ⲆⲆⵠⲆⵠ.fade(c, 0, b, a);
        };
        this.ΔᐃΔⵠⵠᐃᐃ = function (a, b) {
            if (this.ⵠⵠⲆⲆᐃ && this.ΔⲆⲆΔⲆ) {
                a.pos(this.x, this.y, -0.5, b);
            }
        };
        this.ΔΔᐃⲆⵠ = function (b, c, d, e, f, g, a) {
            this.ⲆⲆᐃΔΔ = g;
            if (e && this.mode === f) {
                var i = mx * this.ⲆⲆⵠⲆⵠ.volume(b);
                if (this.ⵠⵠⲆⲆᐃ) {
                    var j = (Math.random() * d + c) * mx;
                    this.ⲆⲆⵠⲆⵠ.fade(i, j, a, b);
                } else {
                    this.ⲆⲆⵠⲆⵠ.fade(i, 0, a, b);
                }
            } else if (f != this.mode && this.ⵠⵠⲆⲆᐃ) {
                this.ⲆⲆⵠⲆⵠ.fade(0, (c + d) * mx, a, b);
            } else if (this.ⵠⵠⲆⲆᐃ) {
                i = mx * this.ⲆⲆⵠⲆⵠ.volume(b);
                j = (Math.random() * d + c) * mx;
                this.ⲆⲆⵠⲆⵠ.fade(i, j, a, b);
            }
            this.ΔᐃΔⵠⵠᐃᐃ(this.ⲆⲆⵠⲆⵠ, b);
            this.ⲆⲆⵠⲆⵠ.play(b);
        };
        this.ⲆΔᐃ = function () {
            var a = Dx.ⲆΔᐃΔΔ[this.ᐃⵠᐃΔ];
            this.ⲆⲆᐃΔΔ -= Lx;
            if (this.ⲆⲆᐃΔΔ <= 0) {
                var b = 0;
                if (this.ⵠⵠⲆⲆ.x != a.x || a.y != this.ⵠⵠⲆⲆ.y) {
                    if (!this.ⵠⵠⲆⲆᐃ) {
                        b = 1;
                        this.ⵠⵠⲆⲆᐃ = 1;
                    }
                    this.x = Hx.ⲆⲆⵠᐃΔⵠᐃ(a.x, ⲆⲆΔⲆⵠ.ᐃⵠᐃᐃΔⵠⵠ);
                    this.y = Hx.ΔⵠΔᐃΔᐃⲆ(a.y, ⲆⲆΔⲆⵠ.ᐃⵠᐃᐃΔⵠⵠ);
                } else if (this.ⵠⵠⲆⲆᐃ) {
                    b = 1;
                    this.ⵠⵠⲆⲆᐃ = 0;
                }
                this.ⵠⵠⲆⲆ.x = a.x;
                this.ⵠⵠⲆⲆ.y = a.y;
                Δᐃⵠᐃ = this.ΔᐃΔⵠΔΔⲆ(a);
                if (this.mode != Δᐃⵠᐃ) {
                    if (ⲆⲆΔⲆⵠ.ᐃⵠⵠⲆⲆΔΔ === this.mode) {
                        this.fade(this.ΔΔᐃⲆⲆ, ⲆⲆΔⲆⵠ.ΔⵠⲆⵠⲆΔΔ);
                    } else if (ⲆⲆΔⲆⵠ.ⲆᐃⵠᐃΔ === this.mode) {
                        this.fade(this.ΔΔᐃᐃⵠᐃΔ, ⲆⲆΔⲆⵠ.ⲆⲆⲆⲆΔΔⲆ);
                    } else if (this.mode === ⲆⲆΔⲆⵠ.ᐃⵠⲆΔⵠⵠᐃ) {
                        this.fade(this.ⲆⵠⵠⲆᐃΔᐃ, ⲆⲆΔⲆⵠ.ⲆⲆⵠⵠⵠⵠᐃ);
                    } else if (this.mode === ⲆⲆΔⲆⵠ.ⵠⵠΔⵠⲆⵠΔ) {
                        this.fade(this.ᐃᐃᐃΔⵠᐃΔ, ⲆⲆΔⲆⵠ.ᐃΔᐃⲆⲆⵠᐃ);
                    }
                }
                if (ⲆⲆΔⲆⵠ.ᐃⵠⵠⲆⲆΔΔ === Δᐃⵠᐃ) {
                    this.ΔΔᐃⲆⵠ(this.ΔΔᐃⲆⲆ, 0.08, 0.3, b, Δᐃⵠᐃ, ⲆⲆΔⲆⵠ.ⲆᐃⵠᐃᐃⵠΔΔⲆ, ⲆⲆΔⲆⵠ.ΔⵠⲆⵠⲆΔΔ);
                } else if (Δᐃⵠᐃ === ⲆⲆΔⲆⵠ.ⲆᐃⵠᐃΔ) {
                    this.ΔΔᐃⲆⵠ(this.ΔΔᐃᐃⵠᐃΔ, 0.2, 0.3, b, Δᐃⵠᐃ, ⲆⲆΔⲆⵠ.ΔᐃⵠⵠⲆⵠⵠᐃΔ, ⲆⲆΔⲆⵠ.ⲆⲆⲆⲆΔΔⲆ);
                } else if (ⲆⲆΔⲆⵠ.ᐃⵠⲆΔⵠⵠᐃ === Δᐃⵠᐃ) {
                    this.ΔΔᐃⲆⵠ(this.ⲆⵠⵠⲆᐃΔᐃ, 0.3, 0.6, b, Δᐃⵠᐃ, ⲆⲆΔⲆⵠ.ᐃⲆᐃⲆⵠⵠΔΔΔ, ⲆⲆΔⲆⵠ.ⲆⲆⵠⵠⵠⵠᐃ);
                } else if (Δᐃⵠᐃ === ⲆⲆΔⲆⵠ.ⵠⵠΔⵠⲆⵠΔ) {
                    this.ΔΔᐃⲆⵠ(this.ᐃᐃᐃΔⵠᐃΔ, 0.1, 0.25, b, Δᐃⵠᐃ, ⲆⲆΔⲆⵠ.ⵠΔⲆⵠᐃΔᐃⵠⲆ, ⲆⲆΔⲆⵠ.ᐃΔᐃⲆⲆⵠᐃ);
                }
                this.mode = Δᐃⵠᐃ;
            }
        };
        this.check = function () {
            var a = Dx.ⲆΔᐃΔΔ[this.ᐃⵠᐃΔ];
            if (a) {
                return sg;
            } else {
                this.ⵠΔᐃΔᐃΔⲆ(a);
                return Xb;
            }
        };
    }
    ᐃΔΔⲆⲆⵠΔ = 0;
    document.getElementById("version").innerHTML = 52 + ".3";
    var Ax;
    var Bx = [];
    var Cx = {
        time: Math.floor(Math.random() * 2),
        items: []
    };
    document.getElementById("game_body").style.backgroundColor = Hr.ᐃᐃΔⲆⲆ[Cx.time];
    Cx.items.push(new Gw(1, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1));
    Cx.items.push(new Gw(100, 0, 0, 0, 0, 0, 0, 5));
    Cx.items.push(new Gw(2, 0, 0, 0, 0, Math.PI / 4, 0, 0));
    Cx.items.push(new Gw(100, 0, 0, 0, 0, 0, 0, 5));
    Δⵠⵠⵠ = new function () {
        var b = this;
        function a(a) {
            let b = a.name || a.a;
            if (a.auto) {
                return b;
            } else {
                return b + " [" + a.nu + " " + yb[324] + "]";
            }
        }
        this.ΔⵠΔⵠ = null;
        this.ΔᐃⵠⲆᐃ = 0;
        this.ᐃΔᐃⲆⵠ = [];
        this.ⲆⵠᐃᐃⲆᐃⵠ = {};
        this.ⵠᐃᐃⲆⵠⲆⲆ = {};
        this.ΔᐃⵠⲆΔ = [[], [], [], [], [], [], [], [], []];
        this.ⵠⲆⵠⲆⲆΔⵠ = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
        this.ⲆⵠⲆⵠΔ = 0;
        this.ᐃᐃⲆΔΔᐃⵠ = 0;
        this.ⲆⵠⵠⵠⲆΔⵠ = function (c) {
            if (Rf !== undefined) {
                b.ᐃΔᐃⲆⵠ.push({
                    a: Rf.name,
                    gm: Rf.mode,
                    idx: 0,
                    m: 100,
                    nu: 0,
                    id: 0
                });
                c();
                return;
            }
            fetch(Wf + "/list", {
                method: "GET"
            }).then(function (a) {
                if (a.ok) {
                    a.json().then(function (d) {
                        b.ᐃΔᐃⲆⵠ = [];
                        b.ⵠᐃᐃⲆⵠⲆⲆ = {};
                        for (let a in Vf.ⵠᐃᐃⵠⵠⵠᐃ) {
                            const c = Vf.ⵠᐃᐃⵠⵠⵠᐃ[a];
                            b.ᐃΔᐃⲆⵠ.push({
                                a: "Auto Select",
                                gm: c,
                                m: 100,
                                nu: 0,
                                auto: true
                            });
                        }
                        var f = 0;
                        var e = 1;
                        var g = 4;
                        for (let a = 0; d.length > a; a++) {
                            const c = d[a];
                            const j = c.n;
                            const k = c.l;
                            const h = c.p;
                            const l = [];
                            b.ⲆⵠᐃᐃⲆᐃⵠ[j] = l;
                            const m = [];
                            for (let a = 0; h.length > a; a++) {
                                const b = j + h[a][f];
                                m.push(b);
                                l.push(b);
                            }
                            for (let a = 0; a < k.length; a++) {
                                const c = k[a];
                                let d;
                                let h = Vf.ⵠᐃᐃⵠⵠⵠᐃ[c[2]];
                                let i = h + c[e];
                                d = h in b.ⵠᐃᐃⲆⵠⲆⲆ ? ++b.ⵠᐃᐃⲆⵠⲆⲆ[h] : b.ⵠᐃᐃⲆⵠⲆⲆ[h] = 1;
                                if (i in b.ⵠᐃᐃⲆⵠⲆⲆ) {
                                    ⲆᐃⵠᐃⵠⵠΔ = ++b.ⵠᐃᐃⲆⵠⲆⲆ[i];
                                } else {
                                    ⲆᐃⵠᐃⵠⵠΔ = b.ⵠᐃᐃⲆⵠⲆⲆ[i] = 1;
                                }
                                b.ᐃΔᐃⲆⵠ.push({
                                    name: c[g],
                                    a: Vf.ⲆⵠⵠᐃⵠⵠⵠΔᐃ[c[e]] + " " + ⲆᐃⵠᐃⵠⵠΔ,
                                    r: c[e],
                                    gm: Vf.ⵠᐃᐃⵠⵠⵠᐃ[c[2]],
                                    idx: d,
                                    m: 100,
                                    nu: c[3],
                                    id: c[e] + c[f],
                                    p: m
                                });
                            }
                        }
                        const a = [];
                        const i = [];
                        const j = [];
                        for (let c = 0; c < b.ᐃΔᐃⲆⵠ.length; c++) {
                            const d = b.ᐃΔᐃⲆⵠ[c];
                            if (!d.auto) {
                                if (Vf.ⵠᐃᐃⵠⵠⵠᐃ[6] === d.gm) {
                                    if (typeof d.name === "string" && (d.name.indexOf("Private Server") !== -1 || d.nu > 95)) {
                                        i.push(d);
                                    } else {
                                        j.push(d);
                                    }
                                    a.push(c);
                                }
                            }
                        }
                        const h = [];
                        h.push(...j.sort(function (a, b) {
                            return b.nu - a.nu;
                        }));
                        h.push(...i.sort(function (a, b) {
                            return (b.nu < 95 ? b.nu : 0) - (a.nu < 95 ? a.nu : 0);
                        }));
                        for (let c = 0; a.length > c; c++) {
                            const d = a[c];
                            const e = h[c];
                            e.idx = c + 1;
                            b.ᐃΔᐃⲆⵠ[d] = e;
                        }
                        c();
                    });
                } else {
                    Hf.setTimeout(function () {
                        b.ⲆⵠⵠⵠⲆΔⵠ(c);
                    }, 3000);
                }
            });
        };
        this.ⵠᐃⲆΔⵠΔⲆΔΔ = function (a) {
            var b = [];
            for (var c = 0; c < a.length; c++) {
                if (a[c].a.indexOf(rr) !== -1) {
                    b.push(c);
                }
            }
            if (b.length === 0) {
                return 0;
            } else {
                return b[Math.floor(Math.random() * b.length)];
            }
        };
        this.Ⲇⵠⵠᐃⵠᐃⵠ = function (b) {
            var c = 0;
            for (var d = 0; b.length > d; d++) {
                c += b[d].nu;
            }
            var e = document.getElementById("servselect");
            if (Δⵠⵠⵠ.ⵠⲆⵠⲆⲆΔⵠ[Δⵠⵠⵠ.ⲆⵠⲆⵠΔ] === -1) {
                Δⵠⵠⵠ.ⵠⲆⵠⲆⲆΔⵠ[Δⵠⵠⵠ.ⲆⵠⲆⵠΔ] = e.selectedIndex = Δⵠⵠⵠ.ⵠᐃⲆΔⵠΔⲆΔΔ(b);
            } else {
                e.selectedIndex = Δⵠⵠⵠ.ⵠⲆⵠⲆⲆΔⵠ[Δⵠⵠⵠ.ⲆⵠⲆⵠΔ];
            }
            var f = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + b[e.selectedIndex].a + (b[e.selectedIndex].nu > 0 ? " [" + b[e.selectedIndex].nu + " " + yb[324] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + yb[323] + " (" + this.ΔⵠΔⵠⵠⲆΔ + ") " + yb[325] + "</li>";
            for (d = 0; b.length > d; d++) {
                f += "<li role=\"option\">" + a(b[d]) + "</li>\n";
            }
            f += "<li role=\"option\" id=\"selectDisabled\">(" + c + ") " + yb[326] + "</li>";
            f += "</div>";
            e.innerHTML = f;
            $(".md-select").on("click", function () {
                $(this).toggleClass("active");
            });
            $(".md-select ul li").on("click", function () {
                var b = $(this).text();
                var c = -1;
                for (var d = Δⵠⵠⵠ.ΔᐃⵠⲆΔ[Δⵠⵠⵠ.ⲆⵠⲆⵠΔ], e = 0; e < d.length; e++) {
                    if (b === a(d[e])) {
                        c = e;
                        break;
                    }
                }
                if (c !== -1) {
                    document.getElementById("servselect").selectedIndex = c;
                    Δⵠⵠⵠ.ⵠⲆⵠⲆⲆΔⵠ[Δⵠⵠⵠ.ⲆⵠⲆⵠΔ] = c;
                    $(".md-select ul li").removeClass("active");
                    $(this).addClass("active");
                    $(".md-select label button").text(b);
                }
            });
        };
        this.ΔⵠΔⵠⵠⲆΔ = 0;
        this.ΔΔⲆᐃⵠⲆⵠΔᐃ = function () {
            this.ΔⵠΔⵠⵠⲆΔ = 0;
            for (var a = 0; a < Δⵠⵠⵠ.ᐃΔᐃⲆⵠ.length; a++) {
                if (this.ᐃΔᐃⲆⵠ[a].gm == "experimental") {
                    this.ΔᐃⵠⲆΔ[7].push(this.ᐃΔᐃⲆⵠ[a]);
                } else if (this.ᐃΔᐃⲆⵠ[a].gm == "zombies") {
                    this.ΔᐃⵠⲆΔ[2].push(this.ᐃΔᐃⲆⵠ[a]);
                } else if (this.ᐃΔᐃⲆⵠ[a].gm == "community") {
                    this.ΔᐃⵠⲆΔ[6].push(this.ᐃΔᐃⲆⵠ[a]);
                } else if (this.ᐃΔᐃⲆⵠ[a].gm == "forest") {
                    this.ΔᐃⵠⲆΔ[4].push(this.ᐃΔᐃⲆⵠ[a]);
                } else if (this.ᐃΔᐃⲆⵠ[a].gm == "battle-royale") {
                    this.ΔᐃⵠⲆΔ[5].push(this.ᐃΔᐃⲆⵠ[a]);
                } else if (this.ᐃΔᐃⲆⵠ[a].gm == "vampires") {
                    this.ΔᐃⵠⲆΔ[3].push(this.ᐃΔᐃⲆⵠ[a]);
                } else {
                    this.ΔᐃⵠⲆΔ[0].push(this.ᐃΔᐃⲆⵠ[a]);
                }
                this.ΔⵠΔⵠⵠⲆΔ += this.ᐃΔᐃⲆⵠ[a].nu;
            }
            for (a = 0; this.ΔᐃⵠⲆΔ.length > a; a++) {
                if (this.ΔᐃⵠⲆΔ[a].length === 0) {
                    this.ΔᐃⵠⲆΔ[a].push({
                        a: yb[327],
                        ᐃΔᐃᐃⲆⵠᐃⲆᐃ: 0,
                        ᐃᐃ: "127.0.0.1",
                        ᐃΔⵠ: 80
                    });
                }
            }
            this.Ⲇⵠⵠᐃⵠᐃⵠ(this.ΔᐃⵠⲆΔ[0]);
            this.ⲆᐃΔⵠⵠ = function (a) {
                Δⵠⵠⵠ.ⲆⵠⲆⵠΔ = a;
                Δⵠⵠⵠ.Ⲇⵠⵠᐃⵠᐃⵠ(Δⵠⵠⵠ.ΔᐃⵠⲆΔ[Δⵠⵠⵠ.ⲆⵠⲆⵠΔ]);
                Δⵠⵠⵠ.Ⲇⵠⵠᐃⵠᐃⵠ(Δⵠⵠⵠ.ΔᐃⵠⲆΔ[Δⵠⵠⵠ.ⲆⵠⲆⵠΔ]);
                document.getElementById("servselect").selectedIndex = Δⵠⵠⵠ.ⲆⵠⲆⵠΔ;
            };
        };
        this.ᐃⲆⲆΔΔⲆⵠ = 0;
        this.ΔΔᐃⵠⲆⵠⵠ = 0;
        this.ᐃΔᐃᐃⵠ = null;
        this.timeout = function () {
            b.ΔΔᐃⵠⲆⵠⵠ++;
            b.ΔⵠΔⵠ.close();
            if (b.ΔΔᐃⵠⲆⵠⵠ > 3) {
                Px = 1;
                Ax.ΔᐃⲆⲆΔᐃⲆᐃᐃ = Dw.ᐃⵠⲆᐃⲆⲆⵠⲆⵠ;
                b.ⲆⵠⲆⲆⵠ(yb[300]);
                Ax.waiting = Ag;
                if (Ex.reconnect.enabled) {
                    Gx.ⲆⲆⵠᐃᐃ(Ax.ᐃΔᐃⲆΔ);
                }
            } else if (Ex.ⵠᐃⵠᐃΔⵠΔ === undefined || Ex.ᐃⲆⲆⵠᐃⲆᐃ === undefined || Ex.ΔⲆⲆⲆⲆᐃⲆ === undefined) {
                Ax.ⲆⲆⵠⲆΔⵠΔ(function () {
                    b.ΔᐃΔⵠᐃΔⲆ();
                }, 1);
            } else {
                b.ΔᐃΔⵠᐃΔⲆ();
            }
        };
        this.ᐃᐃΔⵠⲆᐃᐃ = function (a) {
            if (this.ΔⵠΔⵠ.ΔᐃⵠⲆᐃ == this.ΔᐃⵠⲆᐃ) {
                this.ΔᐃⵠⲆᐃ++;
                this.ⲆⵠⲆⲆⵠ(yb[301] + a);
                Gx.ⲆⲆⵠᐃᐃ(Ax.ᐃΔᐃⲆΔ);
            }
        };
        this.ᐃΔᐃⵠⲆᐃΔ = function () {
            this.ⲆⵠⲆⲆⵠ("You speak too much");
        };
        this.ⲆⲆΔⲆᐃⵠᐃⲆⲆ = function () {
            clearTimeout(this.ᐃΔᐃᐃⵠ);
            this.ⲆⵠⲆⲆⵠ(yb[302]);
            Ax.waiting = false;
        };
        this.ⲆᐃΔᐃⲆᐃᐃᐃᐃ = function () {
            Ex.ⲆⲆΔᐃⲆ.open = false;
        };
        this.ᐃⵠᐃᐃΔΔΔⲆᐃ = function () {
            Gx.ᐃΔⵠΔΔΔᐃ = 0;
        };
        this.ⵠⲆⲆᐃⵠⲆᐃΔΔ = function () {
            Gx.ᐃⲆᐃⲆⵠⵠᐃ = 0;
        };
        this.ⵠΔⵠⵠᐃΔΔⲆⵠ = function (a) {
            Ex.ΔⲆⵠᐃΔ.ⵠⲆⲆΔᐃ = a;
            if (Dx.ΔⲆΔΔΔ > -300) {
                if (a === 0) {
                    this.ⲆⵠⲆⲆⵠ(yb[340]);
                } else {
                    this.ⲆⵠⲆⲆⵠ(yb[341]);
                }
            }
        };
        this.ΔⲆᐃᐃᐃ = function (a) {
            Ex.ΔⲆᐃᐃᐃ = a;
        };
        this.ᐃᐃⲆᐃᐃⵠΔⵠⲆ = function (a) {
            Ex.ⵠᐃⵠᐃΔⲆⲆ = a;
        };
        this.ⵠᐃⵠᐃΔⲆⲆ = function (a) {
            Ex.ⵠⵠⲆⵠⲆ.ⵠⲆⲆΔᐃ = a;
            if (Dx.Ⲇⵠⵠⵠⵠ > -300) {
                if (a === 0) {
                    this.ⲆⵠⲆⲆⵠ(yb[342]);
                } else {
                    this.ⲆⵠⲆⲆⵠ(yb[343]);
                }
            }
        };
        this.ⲆᐃΔᐃⲆⵠⲆΔⵠ = function (a) {
            if (a === 0) {
                document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
            } else if (a === 1) {
                document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
            } else if (a === 2) {
                document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
            } else if (a === 3) {
                document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
            }
        };
        this.ᐃⵠᐃᐃⲆᐃᐃᐃΔ = function () {
            Gx.ΔΔᐃΔⵠⲆΔ = 0;
        };
        this.ⵠⵠⵠⵠᐃⵠᐃᐃᐃ = function () {
            Gx.ⲆΔᐃⵠⲆΔΔ = 0;
        };
        this.ⵠΔⵠᐃΔᐃⲆⲆⵠ = function () {
            Ex.ⲆᐃΔⲆ.ⲆᐃⲆⵠΔ = [];
            Ex.ⲆᐃΔⲆ.ᐃᐃΔ = [];
            Ex.ⲆᐃΔⲆ.id = -1;
            Ex.ⲆᐃΔⲆ.ᐃⲆᐃⵠᐃⵠᐃ.stop();
            Ex.ᐃΔⵠΔ.ⲆⲆⵠⵠᐃ = [];
            Ex.ᐃΔⵠΔ.ⵠΔⵠᐃΔ = Ag;
            Ex.ᐃΔⵠΔ.ΔᐃΔⲆΔⲆᐃᐃᐃ = false;
            Ex.ᐃΔⵠΔ.Δᐃᐃⵠ = -1;
            Ex.ᐃΔⵠΔ.id = -1;
            Ex.ᐃΔⵠΔ.ⵠΔⵠⵠⲆ = hs;
            Ex.ᐃΔⵠΔ.ΔᐃⲆⲆⲆ = w;
            Ex.ᐃΔⵠΔ.ΔⲆⲆⲆᐃ = w;
            Ex.ᐃΔⵠΔ.ΔΔΔⵠⵠΔⲆ = eo;
            Ex.ᐃΔⵠΔ.timeout = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(yj, 0, 1, 0, 1, 1);
        };
        this.ΔᐃⵠᐃⲆⲆΔⲆⲆ = function () {
            clearTimeout(this.ᐃΔᐃᐃⵠ);
            this.ⲆⵠⲆⲆⵠ();
            Ax.waiting = false;
        };
        this.ᐃᐃⵠⲆⵠⲆⲆ = function (a) {
            for (var b = 0; a.length > b; b++) {
                if (typeof a[b] === "string") {
                    a[b] = ⵠΔⲆⵠ.ⲆⵠΔΔⲆᐃⲆ(a[b]);
                }
            }
            Ex.ᐃⵠⲆⲆΔ.ⵠⵠᐃⵠⲆ(a[1], a[2], a[3], a[4]);
        };
        this.message = function (a) {
            this.ⲆⵠⲆⲆⵠ(a);
        };
        this.ⵠΔΔⵠΔᐃⲆΔⵠ = function () {
            clearTimeout(this.ᐃΔᐃᐃⵠ);
            this.ⲆⵠⲆⲆⵠ(yb[339]);
            Ax.waiting = false;
        };
        this.ΔΔΔΔⵠΔΔⲆⲆ = function () {
            clearTimeout(this.ᐃΔᐃᐃⵠ);
            this.ⲆⵠⲆⲆⵠ(yb[338]);
            Ax.waiting = Ah;
        };
        this.ⲆΔⲆᐃΔⵠΔⵠᐃ = function () {
            clearTimeout(this.ᐃΔᐃᐃⵠ);
            this.ⲆⵠⲆⲆⵠ(yb[304]);
            Ax.waiting = false;
        };
        this.ⲆΔⵠⲆⵠⵠΔΔᐃ = function () {
            Ex.ⲆᐃΔⲆ.ⲆⵠⵠⵠⲆⲆⲆ(1, 0);
            Gx.ΔⲆⵠⵠⲆᐃΔ();
        };
        this.ΔᐃⵠⲆⲆⵠΔΔᐃ = function (a) {
            var b = a[1];
            var c = Dx.ⵠᐃⲆΔ[b];
            c.ⵠᐃⵠᐃ = a[2];
            c.ᐃⵠᐃⲆΔ = a[3];
            c.ⲆⵠᐃⵠⲆΔⲆ = a[4];
            c.ΔᐃᐃᐃΔ = a[5];
            c.ᐃⲆⲆⲆⲆ = a[6];
            c.ᐃⵠⵠΔΔ = a[7];
            c.level = a[8];
            var d = Dx.ⲆΔᐃΔΔ[b * Dx.ᐃⵠⲆⲆΔΔⵠ];
            if (d) {
                d.ⵠᐃⵠᐃ = a[2];
                d.ᐃⵠᐃⲆΔ = a[3];
                d.ⲆⵠᐃⵠⲆΔⲆ = a[4];
                d.ΔᐃᐃᐃΔ = a[5];
            }
        };
        this.ⲆΔⲆⲆⲆᐃΔᐃΔ = function (a) {
            if (a === 29) {
                Ex.ⲆᐃΔⲆ.ⲆⵠⵠⵠⲆⲆⲆ(1, 0);
                Gx.ΔⲆⵠⵠⲆᐃΔ();
            } else {
                this.ᐃⲆΔⵠⵠᐃⲆ([0, a, 1]);
            }
            Ex.ᐃΔⵠΔ.ⵠⲆᐃΔⲆⲆΔ();
        };
        this.ⵠᐃⲆⲆⲆⵠⵠΔⲆ = function (a) {
            Ex.ⵠⵠⲆΔⲆ.ⲆⲆᐃΔΔ = 0;
            Ex.ᐃΔⵠΔ.ⵠⲆΔᐃΔᐃⲆⲆᐃ(a);
        };
        this.ⵠⲆⵠⵠᐃⲆⲆᐃⵠ = function (a) {
            for (var b = tt[a].r, c = 0; b.length > c; c++) {
                if (Ex.ⲆᐃΔⲆ.max > Ex.ⲆᐃΔⲆ.ⲆᐃⲆⵠΔ.length || Ex.ⲆᐃΔⲆ.ᐃᐃΔ[b[c][0]] > 0) {
                    var d = Math.floor(b[c][1] * 0.8);
                    if (!d) {
                        continue;
                    }
                    this.ᐃⲆΔⵠⵠᐃⲆ([0, b[c][0], d]);
                }
            }
            Ex.ᐃΔⵠΔ.ⵠⲆᐃΔⲆⲆΔ();
        };
        this.ΔΔᐃΔⲆᐃΔᐃΔ = function (a) {
            Ex.ⵠⵠⲆΔⲆ.ⲆⲆᐃΔΔ = 0;
            Ex.ᐃΔⵠΔ.ⵠᐃΔⲆΔⲆⵠΔΔ(a);
        };
        this.ⲆⵠⲆⲆⵠ = function (a) {
            if (Ex.alert.text) {
                if (a !== Ex.alert.text && Ex.alert.list[Ex.alert.list.length - 1] !== a) {
                    Ex.alert.list.push(a);
                }
            } else {
                Ex.alert.text = a;
            }
        };
        this.ⵠΔᐃⵠΔᐃⵠⲆⵠ = function () {
            this.ⲆⵠⲆⲆⵠ(yb[305]);
        };
        this.ⵠΔⵠΔⲆΔΔⲆΔ = function () {
            var a;
            a = Ex.Δⵠᐃ == 0 ? yb[306] : yb[307] + (Ex.Δⵠᐃ + 1) + yb[308];
            this.ⲆⵠⲆⲆⵠ(a);
            Ex.Δⵠᐃ++;
        };
        this.ᐃⵠⵠⵠⵠⲆᐃΔⲆ = function () {
            clearTimeout(b.ᐃΔᐃᐃⵠ);
            Ex.reconnect.enabled = Ag;
            Ex.ⲆⵠⲆΔᐃ = na;
            this.ⲆⵠⲆⲆⵠ(yb[309]);
            Gx.ⲆⲆⵠᐃᐃ(Ax.ᐃΔᐃⲆΔ);
            this.ΔⵠΔⵠ.close();
        };
        this.ⵠΔⲆᐃᐃᐃⲆΔⲆ = function () {
            Px = 1;
            clearTimeout(this.ᐃΔᐃᐃⵠ);
            this.ⲆⵠⲆⲆⵠ(yb[310]);
            Ax.waiting = false;
        };
        this.ⲆᐃΔⵠΔⵠⲆⲆⵠ = function () {
            Px = 1;
            clearTimeout(this.ᐃΔᐃᐃⵠ);
            this.ⲆⵠⲆⲆⵠ(yb[311]);
            Ax.waiting = false;
        };
        this.ΔΔⲆⲆⲆᐃⵠᐃΔ = function (a) {
            var b = a[1];
            var c = Dx.ⵠᐃⲆΔ;
            c[b].ⲆⲆⲆⲆΔ = a[2];
            c[b].ⵠᐃⵠᐃ = a[3];
            c[b].ᐃⵠᐃⲆΔ = a[4];
            c[b].ⲆⵠᐃⵠⲆΔⲆ = a[5];
            c[b].ΔᐃᐃᐃΔ = a[6];
            c[b].ᐃⲆⲆⲆⲆ = a[7];
            c[b].ᐃⵠⵠΔΔ = a[8];
            c[b].level = a[9];
            c[b].Ⲇⵠⵠⵠᐃ = 0;
            c[b].ⵠᐃⵠΔⲆⵠⲆ = null;
            c[b].label = null;
            c[b].ΔⵠΔΔᐃⲆⲆ = null;
            c[b].ⲆⵠⲆΔᐃ = Yg;
            if (_f === 1) {
                c[b].ⲆⲆⲆⲆΔ += "|" + b;
            }
        };
        this.ᐃⲆᐃⲆᐃⲆⵠᐃᐃ = function () {
            this.ΔⵠΔⵠ[Qf](dq[Jo].stringify([29]));
        };
        this.ⲆΔⲆⵠᐃΔΔⲆⲆ = function () {
            this.ⲆⵠⲆⲆⵠ(yb[312]);
        };
        this.ⲆᐃⲆΔᐃⵠᐃ = function () {
            this.ⲆⵠⲆⲆⵠ(yb[313]);
        };
        this.ΔΔⲆᐃᐃⲆᐃΔΔ = function (a) {
            this.ΔⵠΔⵠ[Qf](Ko[mq].stringify([32, a]));
            Ex.ⲆⲆΔᐃⲆ.open = Xb;
        };
        this.ⵠⲆᐃᐃⵠᐃΔᐃⲆ = function (a) {
            for (var b = qf[a - 1].items, c = 0; b.length > c && Ex.ⲆᐃΔⲆ.ⲆᐃⲆⵠΔ.length < Ex.ⲆᐃΔⲆ.max; c++) {
                var d = b[c][1];
                var e = b[c][0];
                if (b[c][1] === 29) {
                    Ex.ⲆᐃΔⲆ.ⲆⵠⵠⵠⲆⲆⲆ(1, 0);
                } else {
                    this.ᐃⲆΔⵠⵠᐃⲆ([0, d, e]);
                }
            }
        };
        this.ᐃⲆΔⵠⵠᐃⲆ = function (b) {
            for (var c = b.length, d = Ex.ⲆᐃΔⲆ, e = 1; e < c; e += 2) {
                var f = b[e];
                var g = b[e + 1];
                for (var h = 0; h < d.ⲆᐃⲆⵠΔ.length; h++) {
                    if (f == d.ⲆᐃⲆⵠΔ[h].id) {
                        d.ᐃᐃΔ[f] += g;
                        break;
                    }
                }
                if (d.ⲆᐃⲆⵠΔ.length == h) {
                    d.ᐃᐃΔ[f] = g;
                    d.ⲆᐃⲆⵠΔ.push(Gx.ΔⲆⵠ[f]);
                    Gx.ΔⲆⵠⵠⲆᐃΔ();
                }
            }
            Ex.ᐃΔⵠΔ.ⲆΔᐃ();
        };
        this.ΔᐃⵠⲆ = function (b, c, d, e, f, g, a) {
            Ex.ΔᐃⵠⲆ.ΔⵠᐃⲆ = b / 100;
            Ex.ΔᐃⵠⲆ.ⵠⲆⵠ = c / 100;
            Ex.ΔᐃⵠⲆ.c = d / 100;
            Ex.ΔᐃⵠⲆ.Ⲇᐃⵠ = e / 100;
            Ex.ΔᐃⵠⲆ.ᐃⵠⵠ = f / 100;
            Ex.ΔᐃⵠⲆ.ⲆᐃᐃΔⲆᐃⵠ = g / 100;
            Ex.ΔⲆᐃᐃᐃ = a;
        };
        this.ⲆⵠⲆᐃⵠᐃⲆΔⲆ = function (a) {
            Gx.ᐃⲆⲆΔ.modify(a, 2);
        };
        this.ⵠⲆⲆΔΔᐃΔᐃⵠ = function (a) {
            Gx.ᐃⲆⲆΔ.modify(a, 0);
        };
        this.claimed = function (a) {
            Gx.ᐃⲆⲆΔ.modify(a, 3);
        };
        this.ⵠⲆⵠᐃⲆⵠⵠⲆΔ = function (a, b) {
            Ex.ΔᐃⵠⲆ.ΔⵠᐃⲆ = a / 100;
            Ex.ΔⲆᐃᐃᐃ = b;
        };
        this.ᐃᐃⲆⲆΔⲆⲆⲆᐃ = function (a) {
            Ex.ΔᐃⵠⲆ.Ⲇᐃⵠ = a / 100;
        };
        this.ⲆⲆⵠⵠⵠⲆⵠⵠᐃ = function (a) {
            Ex.ΔᐃⵠⲆ.ⵠⲆⵠ = a / 100;
        };
        this.ⵠᐃᐃⵠΔΔⲆⲆⵠ = function (a) {
            Ex.ΔᐃⵠⲆ.ⲆᐃᐃΔⲆᐃⵠ = a / 100;
        };
        this.ᐃⲆⵠⵠᐃΔⵠᐃⲆ = function (a) {
            Ex.ΔᐃⵠⲆ.c = a / 100;
        };
        this.ⲆⲆⵠΔᐃⵠⵠⵠⵠ = function (a) {
            Dx.time = a;
            Dx.transition = Pj;
            Hx.transition = 1;
        };
        this.ⲆᐃᐃᐃΔᐃⵠᐃⲆ = function () {
            document.getElementById("game_body").style.backgroundColor = Hr.ᐃᐃΔⲆⲆ[Dx.time];
        };
        this.ⵠΔⲆⵠⵠⲆⵠⵠⵠ = function (a) {
            if (Dx.mode == 1 && Dx.ⵠᐃⲆΔ[a].ⲆⲆⲆⲆΔ !== "spectator") {
                this.ⲆⵠⲆⲆⵠ(Dx.ⵠᐃⲆΔ[a].ⲆⲆⲆⲆΔ + yb[314]);
            }
            Dx.ⵠᐃⲆΔ[a].ⲆⵠⲆΔᐃ = bl;
        };
        this.ᐃⲆᐃⵠⲆᐃΔⲆᐃ = function (a) {
            var b = new Uint16Array(a);
            ΔⵠΔⲆ.ⵠⵠⵠ.ΔⲆᐃⲆΔ(b[1], b[2]);
        };
        this.ᐃⲆΔⲆⲆⵠᐃᐃΔ = function (a) {
            var b = new Uint16Array(a);
            Ex.ⵠⵠⵠ.ΔⲆᐃⲆΔ(b[1], b[2]);
        };
        this.ⵠⲆⲆⲆᐃΔⲆⲆᐃ = function (b, c) {
            var d = new Uint16Array(c);
            for (var e = (b.length - 2) / 4, f = 0; f < e; f++) {
                var g = d[1 + f * 2];
                var i = b[4 + f * 4];
                var j = Math.PI * ((b[5 + f * 4] >> 1) / 127) * 2;
                var k = Dx.ⲆΔᐃΔΔ[i * Dx.ᐃⵠⲆⲆΔΔⵠ + g];
                if (k && k.ΔⲆᐃ) {
                    if (Hx.loaded && Hx.ᐃΔᐃⲆΔ) {
                        Hx.ΔⲆᐃ(b[5 + f * 4] & 1, ᐃⵠᐃⲆⲆ[k.type], k.x, k.y);
                    }
                    k.ΔⲆᐃ.angle = j;
                    k.ΔⲆᐃ.ⲆΔᐃ = j;
                }
            }
        };
        this.ⵠᐃᐃⲆᐃⲆⲆᐃΔ = function (b) {
            var c = new Uint16Array(b);
            for (var d = (c.length - 1) / 4, e = 0; d > e; e++) {
                var f;
                var g = e * 4;
                var i = c[1 + g];
                var j = c[2 + g];
                var m = Math.PI * ((c[3 + g] >> 1) / 127) * 2;
                var p = c[4 + g];
                var q = Bx.ⲆⵠⲆΔ[j][i];
                switch (p) {
                    case 0:
                        (f = q.p[0][0]).angle = m;
                        f.ⲆΔᐃ = dr;
                        break;
                    case 1:
                        (f = q.s[0][0]).angle = m;
                        f.ⲆΔᐃ = true;
                        break;
                    case 2:
                        (f = q.s[1][0]).angle = m;
                        f.ⲆΔᐃ = eh;
                        break;
                    case 3:
                        (f = q.s[2][0]).angle = m;
                        f.ⲆΔᐃ = true;
                        break;
                    case 4:
                        (f = q.t[0][0]).angle = m;
                        f.ⲆΔᐃ = Mk;
                        break;
                    case 5:
                        (f = q.t[1][0]).angle = m;
                        f.ⲆΔᐃ = ek;
                        break;
                    case 6:
                        (f = q.t[2][0]).angle = m;
                        f.ⲆΔᐃ = _r;
                        break;
                    case 7:
                        (f = q.t[3][0]).angle = m;
                        f.ⲆΔᐃ = true;
                        break;
                    case 8:
                        (f = q.t[4][0]).angle = m;
                        f.ⲆΔᐃ = ek;
                        break;
                    case 9:
                        (f = q.t[5][0]).angle = m;
                        f.ⲆΔᐃ = true;
                        break;
                    case 10:
                        (f = q.g[0][0]).angle = m;
                        f.ⲆΔᐃ = true;
                        break;
                    case 11:
                        (f = q.g[1][0]).angle = m;
                        f.ⲆΔᐃ = O;
                        break;
                    case 12:
                        (f = q.g[2][0]).angle = m;
                        f.ⲆΔᐃ = dr;
                        break;
                    case 13:
                        (f = q.d[0][0]).angle = m;
                        f.ⲆΔᐃ = As;
                        break;
                    case 14:
                        (f = q.d[1][0]).angle = m;
                        f.ⲆΔᐃ = true;
                        break;
                    case 15:
                        (f = q.d[2][0]).angle = m;
                        f.ⲆΔᐃ = true;
                        break;
                    case 16:
                        (f = q.b[0][0]).angle = m;
                        f.ⲆΔᐃ = sg;
                        break;
                    case 17:
                        (f = q.b[1][0]).angle = m;
                        f.ⲆΔᐃ = eh;
                        break;
                    case 18:
                        (f = q.b[2][0]).angle = m;
                        f.ⲆΔᐃ = kk;
                        break;
                    case 19:
                        (f = q.b[3][0]).angle = m;
                        f.ⲆΔᐃ = true;
                        break;
                    case 20:
                        (f = q.f[0][0]).angle = m;
                        f.ⲆΔᐃ = Pj;
                        break;
                    case 21:
                        (f = q.f[1][0]).angle = m;
                        f.ⲆΔᐃ = Un;
                        break;
                    case 22:
                        (f = q.f[2][0]).angle = m;
                        f.ⲆΔᐃ = true;
                        break;
                    case 23:
                        (f = q.sw[0][0]).angle = m;
                        f.ⲆΔᐃ = true;
                        break;
                    case 24:
                        (f = q.sw[1][0]).angle = m;
                        f.ⲆΔᐃ = Ro;
                        break;
                    case 25:
                        (f = q.sw[2][0]).angle = m;
                        f.ⲆΔᐃ = true;
                        break;
                    case 26:
                        (f = q.gw[0][0]).angle = m;
                        f.ⲆΔᐃ = Uh;
                        break;
                    case 27:
                        (f = q.gw[1][0]).angle = m;
                        f.ⲆΔᐃ = true;
                        break;
                    case 28:
                        (f = q.gw[2][0]).angle = m;
                        f.ⲆΔᐃ = Re;
                        break;
                    case 29:
                        (f = q.dw[0][0]).angle = m;
                        f.ⲆΔᐃ = true;
                        break;
                    case 30:
                        (f = q.dw[1][0]).angle = m;
                        f.ⲆΔᐃ = ek;
                        break;
                    case 31:
                        (f = q.dw[2][0]).angle = m;
                        f.ⲆΔᐃ = k;
                        break;
                    case 32:
                        (f = q.a[0][0]).angle = m;
                        f.ⲆΔᐃ = As;
                        break;
                    case 33:
                        (f = q.a[1][0]).angle = m;
                        f.ⲆΔᐃ = ma;
                        break;
                    case 34:
                        (f = q.a[2][0]).angle = m;
                        f.ⲆΔᐃ = O;
                        break;
                    case 35:
                        (f = q.cs[0][0]).angle = m;
                        f.ⲆΔᐃ = Mk;
                        break;
                    case 36:
                        (f = q.cs[1][0]).angle = m;
                        f.ⲆΔᐃ = O;
                        break;
                    case 37:
                        (f = q.cs[2][0]).angle = m;
                        f.ⲆΔᐃ = true;
                        break;
                    case 38:
                        (f = q.cs[3][0]).angle = m;
                        f.ⲆΔᐃ = O;
                        break;
                    case 40:
                        (f = q.plm[0][0]).angle = m;
                        f.ⲆΔᐃ = _r;
                        break;
                    case 41:
                        (f = q.plm[1][0]).angle = m;
                        f.ⲆΔᐃ = eh;
                        break;
                    case 42:
                        (f = q.plm[2][0]).angle = m;
                        f.ⲆΔᐃ = Re;
                        break;
                    case 50:
                        (f = q.re[0][0]).angle = m;
                        f.ⲆΔᐃ = true;
                        break;
                    case 51:
                        (f = q.re[1][0]).angle = m;
                        f.ⲆΔᐃ = true;
                        break;
                    case 52:
                        (f = q.re[2][0]).angle = m;
                        f.ⲆΔᐃ = true;
                        break;
                    case 55:
                        (f = q.c[0][0]).angle = m;
                        f.ⲆΔᐃ = xq;
                        break;
                    case 56:
                        (f = q.m[0][0]).angle = m;
                        f.ⲆΔᐃ = true;
                        break;
                    case 57:
                        (f = q.m[1][0]).angle = m;
                        f.ⲆΔᐃ = true;
                        break;
                    case 58:
                        (f = q.m[2][0]).angle = m;
                        f.ⲆΔᐃ = true;
                }
                if (Hx.loaded && Hx.ᐃΔᐃⲆΔ && f) {
                    Hx.ΔⲆᐃ(c[3 + g] & 1, ΔⲆᐃⵠ[p], f.x, f.y);
                }
            }
        };
        this.ᐃΔⲆⵠⲆ = function () {
            this.ΔⵠΔⵠ[Qf](Eo[ko].stringify([33, Ex.ᐃΔⲆⵠⲆ.ⲆⲆᐃᐃ, Ex.ᐃΔⲆⵠⲆ.ᐃᐃⵠⵠⲆ]));
        };
        this.ⲆⲆΔⵠⵠⵠᐃᐃᐃ = function (a, b) {
            this.ΔⵠΔⵠ[Qf](Eo[Xo].stringify([14, b, a.ⲆⲆᐃᐃ, a.ᐃᐃⵠⵠⲆ]));
        };
        this.ⵠⲆᐃΔⵠΔΔ = function (a, b, c) {
            if (b) {
                this.ΔⵠΔⵠ[Qf](Eo[Xo].stringify([17, b, a.ⲆⲆᐃᐃ, a.ᐃᐃⵠⵠⲆ]));
            } else {
                this.ΔⵠΔⵠ[Qf](Eo[So].stringify([0, c, a.ⲆⲆᐃᐃ, a.ᐃᐃⵠⵠⲆ]));
            }
        };
        this.ⲆΔⲆⵠⵠⲆⲆᐃᐃ = function (a) {
            this.ΔⵠΔⵠ[Qf](ha[ba].stringify([12, a.ⲆⲆᐃᐃ, a.ᐃᐃⵠⵠⲆ]));
        };
        this.ⲆᐃⵠⵠᐃⲆⵠⵠⲆ = function (a) {
            this.ΔⵠΔⵠ[Qf](ha[Ja].stringify([30, a]));
        };
        this.ΔⵠⲆⲆᐃⵠΔᐃΔ = function (a) {
            this.ΔⵠΔⵠ[Qf](ia[ko].stringify([21, a.ⲆⲆᐃᐃ, a.ᐃᐃⵠⵠⲆ]));
        };
        this.ΔⲆⵠᐃⵠⵠⲆᐃᐃ = function (a, b) {
            this.ΔⵠΔⵠ[Qf](Ko[ba].stringify([9, b, a.ⲆⲆᐃᐃ, a.ᐃᐃⵠⵠⲆ, a.type]));
        };
        this.ᐃⵠΔΔⲆⵠᐃᐃⲆ = function (a, b) {
            this.ΔⵠΔⵠ[Qf](Ko[ba].stringify([34, b, a.ⲆⲆᐃᐃ, a.ᐃᐃⵠⵠⲆ]));
        };
        this.ⵠⵠⵠΔᐃⲆΔⵠΔ = function (a, b, c) {
            this.ΔⵠΔⵠ[Qf](ia[Xo].stringify([13, b, c, a.ⲆⲆᐃᐃ, a.ᐃᐃⵠⵠⲆ]));
        };
        this.ⲆᐃᐃΔⲆᐃⲆ = function (a) {
            this.ΔⵠΔⵠ[Qf](ha[ba].stringify([1, a.ⲆⲆᐃᐃ, a.ᐃᐃⵠⵠⲆ, a.type]));
        };
        this.ⲆΔⲆΔⲆⵠⲆΔᐃ = function (a) {
            this.ΔⵠΔⵠ[Qf](ha[ba].stringify([26, a.ⲆⲆᐃᐃ, a.ᐃᐃⵠⵠⲆ]));
        };
        this.ⲆⲆᐃⵠⵠⲆᐃΔΔ = function (a) {
            this.ΔⵠΔⵠ[Qf](ha[ba].stringify([27, a.ⲆⲆᐃᐃ, a.ᐃᐃⵠⵠⲆ]));
        };
        this.ΔⲆΔⵠⵠΔΔⵠᐃ = function (a) {
            this.ΔⵠΔⵠ[Qf](nq[Ta].stringify([23, a.ⲆⲆᐃᐃ, a.ᐃᐃⵠⵠⲆ]));
        };
        this.ᐃⲆΔᐃΔⲆᐃⲆΔ = function (a) {
            this.ΔⵠΔⵠ[Qf](oq[mq].stringify([5, a.ᐃᐃⵠⵠⲆ]));
        };
        this.ᐃⵠᐃⵠᐃΔⵠ = function (a) {
            b.ΔⵠΔⵠ[Qf](Ba[Ja].stringify([22, Ex.ⲆⲆⲆⲆⵠ.id, Ex.ⵠⲆⲆⵠΔ[a]]));
        };
        this.ΔⲆⲆⲆⲆⲆⲆⵠⵠ = function () {
            b.ΔⵠΔⵠ[Qf](_a[Sa].stringify([38, Ex.ⲆⲆⲆⲆⵠ.ⲆⲆᐃᐃ, Ex.ⲆⲆⲆⲆⵠ.id]));
        };
        this.ᐃⵠⲆΔⲆΔΔ = function () {
            b.ΔⵠΔⵠ[Qf](Ua[Ra].stringify([18]));
        };
        this.ⵠⵠⵠⲆⵠⲆΔⲆⵠ = function () {
            b.ΔⵠΔⵠ[Qf](Ua[Ja].stringify([4, Ex.ⲆⲆⲆⲆⵠ.id]));
            if (document.getElementById("lock_team").innerHTML == "LOCK") {
                Ex.ⲆⲆⲆⲆⵠ.lock = 1;
                document.getElementById("lock_team").innerHTML = "UNLOCK";
            } else {
                Ex.ⲆⲆⲆⲆⵠ.lock = 0;
                document.getElementById("lock_team").innerHTML = "LOCK";
            }
        };
        this.ⵠᐃΔ = function (j, e, i) {
            var k = new Uint16Array(j);
            if (i) {
                Dx.ᐃΔΔΔⵠΔⲆΔⵠ();
            }
            for (var n = (e.length - 2) / 18, o = 0; n > o; o++) {
                var q = 2 + o * 18;
                var t = 1 + o * 9;
                var w = e[q];
                var x = k[t + 1];
                var y = k[t + 5];
                var z = Dx.ᐃⵠⲆⲆΔΔⵠ * w + y;
                if (x & 1) {
                    Dx.ⵠᐃΔⵠⲆⵠⲆⲆⵠ(z);
                } else {
                    var A = k[t + 2];
                    var B = k[t + 3];
                    var D = k[t + 4];
                    var E = k[t + 6];
                    var F = k[t + 7];
                    var G = k[t + 8];
                    var H = e[q + 1] / 255 * Math.PI * 2;
                    if (Dx.ⲆΔᐃΔΔ[z]) {
                        var I = Dx.ⲆΔᐃΔΔ[z];
                        I.r.x = B;
                        I.r.y = D;
                        if (w != 0 && ⵠΔⲆⵠ.ᐃⲆᐃⲆ(I, I.r) > 200) {
                            I.x = B;
                            I.y = D;
                        }
                        if (I.id !== Ex.id || w === 0) {
                            I.ⲆⲆᐃⲆᐃΔⵠ = H;
                        }
                        I.action |= x;
                        I.info = E;
                        I.ΔⵠⲆⲆⲆ = F;
                        I.ΔΔⵠᐃⲆ = G;
                        if (I.ⲆΔᐃ) {
                            I.ⲆΔᐃ(x);
                        }
                    } else {
                        var J = new Gw(A, w, y, B, D, H, x, E, F, G);
                        Dx.ⲆΔᐃΔΔ[z] = J;
                        Dx.ⵠᐃΔ[A].push(J);
                    }
                }
            }
        };
        this.ΔⲆΔⲆΔ = function (a) {
            this.ᐃⲆⲆΔΔⲆⵠ = Kx;
            var b = new Uint16Array(a);
            Ex.ΔⲆΔᐃⲆ.ⵠᐃᐃΔΔ(b);
        };
        this.ᐃⵠΔⲆᐃᐃᐃΔΔ = function (a) {
            if (st !== undefined) {
                tt = st;
            }
            if (a.length > 0) {
                st = JSON.parse(JSON.stringify(tt));
                for (var b = 0; a.length > b; b++) {
                    var c = a[b];
                    var d = tt[c.item];
                    if (d !== undefined) {
                        d.r = c.recipe;
                        d.w = c.workbench;
                        d.f = c.fire;
                        d.ᐃⵠⵠ = c.water;
                        d.e = c.well;
                        d.time = 1 / c.time;
                    }
                }
            }
        };
        this.ΔⵠᐃᐃᐃᐃΔ = function (a) {
            if (a && a.length !== 0) {
                Ex.ΔⵠᐃᐃᐃᐃΔ.message = function (b) {
                    var c = document.createElement("canvas");
                    var d = c.getContext("2d");
                    for (d.lineJoin = "round"; b.indexOf("\\n") !== -1;) {
                        b = b.replace("\\n", "\n");
                    }
                    b = b.split("\n");
                    ⲆⲆ = [];
                    var f = b.length * 18 + 10;
                    var g = 0;
                    d.font = 14 + "px Baloo Paaji";
                    for (var h = 0; h < b.length; h++) {
                        if (b[h].charAt(0) === "#") {
                            ⲆⲆ[h] = b[h].substring(0, 7);
                            b[h] = b[h].substring(8);
                        } else {
                            ⲆⲆ[h] = "#FFFFFF";
                        }
                        g = Math.max(d.measureText(b[h]).width + 16, g);
                    }
                    c.height = f;
                    c.width = g;
                    h = 0;
                    for (; b.length > h; h++) {
                        var i = qu(1, b[h], 14, ⲆⲆ[h], null, null, null, null, null, "#000", 6);
                        d.drawImage(i, 8, h * 18 + 5);
                    }
                    return c;
                }(a);
            } else {
                Ex.ΔⵠᐃᐃᐃᐃΔ.message = lh;
            }
        };
        this.ⲆⵠᐃⲆΔ = function (a) {
            var b = Dx.ⲆΔᐃΔΔ[a[1] * Dx.ᐃⵠⲆⲆΔΔⵠ];
            if (b) {
                if (Dx.mode === 2 && b.ⵠᐃⵠᐃ === 0) {
                    if (Ex.ᐃΔΔⲆᐃ) {
                        if (Math.random() > 0.5) {
                            b.text.push(a[2] + " ..." + ⵠΔᐃⵠᐃ);
                        } else {
                            b.text.push(ⵠΔᐃⵠᐃ + "... " + a[2]);
                        }
                    } else {
                        b.text.push(ⲆⲆⵠΔΔΔⵠ[Math.floor(Math.random() * ⲆⲆⵠΔΔΔⵠ.length)]);
                    }
                } else {
                    b.text.push(a[2]);
                }
            }
        };
        this.ΔⵠᐃⲆⲆⲆΔΔΔ = function (a) {
            if (Ex.ⲆᐃΔⲆ.ⲆᐃⲆⵠΔ.length !== Ex.ⲆᐃΔⲆ.max || tt[a].ΔⵠⵠΔ === 29 || Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(tt[a].ΔⵠⵠΔ) != -1 || Ex.ⲆᐃΔⲆ.ᐃΔⵠᐃⲆⵠᐃΔⲆ(tt[a].r)) {
                this.ΔⵠΔⵠ[Qf](dq[Jo].stringify([2, a]));
                lastcrafted = a;
                return 1;
            } else {
                this.ⲆᐃⲆΔᐃⵠᐃ();
                return 0;
            }
        };
        this.ⵠΔⵠⵠⲆ = function (a) {
            Ex.ᐃΔⵠΔ.ΔⲆⵠⲆᐃᐃⲆⵠᐃ(a);
        };
        this.ΔᐃⲆⲆⲆ = function (a) {
            Ex.ᐃΔⵠΔ.ΔᐃⲆⲆⲆ = a;
            Ex.ᐃΔⵠΔ.ⲆΔᐃ();
        };
        this.ΔⲆⲆⲆᐃ = function (a) {
            Ex.ᐃΔⵠΔ.ΔⲆⲆⲆᐃ = a;
            Ex.ᐃΔⵠΔ.ⲆΔᐃ();
        };
        this.ΔΔΔⵠⵠΔⲆ = function (a) {
            Ex.ᐃΔⵠΔ.ΔΔΔⵠⵠΔⲆ = a;
            Ex.ᐃΔⵠΔ.ⲆΔᐃ();
        };
        this.ⲆⵠᐃⲆⲆⵠⲆᐃⵠ = function (a) {
            this.ⲆⵠⲆⲆⵠ(yb[315]);
        };
        this.ⲆⲆᐃⲆⲆⵠᐃⵠⵠ = function () {
            Ex.ᐃΔⵠΔ.ⵠⲆᐃΔⲆⲆΔ();
        };
        this.ⲆᐃΔΔᐃ = function (a) {
            Gx.ⲆᐃΔΔᐃ.ⵠᐃⲆΔ = [];
            var b = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ];
            var c = 0;
            for (var d = 1; a.length > d; d += 2) {
                var e = {
                    x: Math.floor(a[d] * Dx.w / 250),
                    y: Math.floor(a[d + 1] * Dx.ⵠⲆⵠ / 250)
                };
                if (b && !c && !Ex.ΔⵠⵠᐃⲆΔΔ && ⵠΔⲆⵠ.ᐃⲆᐃⲆ(e, b) < 250) {
                    c += 1;
                } else {
                    Gx.ⲆᐃΔΔᐃ.ⵠᐃⲆΔ.push(e);
                }
            }
        };
        this.ᐃΔΔᐃⲆⲆΔᐃⵠ = function () {
            Ex.ᐃΔⲆⵠⲆ.open = false;
            Ex.ᐃΔΔⲆⵠ.enabled = un;
            Ex.ᐃΔΔⲆⵠ.ⲆⲆᐃΔΔ = -1;
            Ex.ᐃΔΔⲆⵠ.label = null;
            Ex.ᐃΔΔⲆⵠ.ⵠⵠⲆⵠⲆⵠⲆ = null;
            Ex.ᐃΔΔⲆⵠ.now = -1;
        };
        this.ᐃΔΔⲆⵠ = function (a) {
            Vf.ⲆΔⲆᐃⵠΔᐃ = a;
            Ex.ᐃΔΔⲆⵠ.enabled = true;
            Ex.ᐃΔΔⲆⵠ.ⲆⲆᐃΔΔ = new Date().getTime();
            Ex.ᐃΔΔⲆⵠ.label = null;
            Ex.ᐃΔΔⲆⵠ.now = -1;
            for (var b = [45, 149, 57, 0, 5, 6, 30, 19, 62, 63, 9, 13, 12, 14, 15, 33, 34, 16, 17, 18, 94, 95, 96, 97, 98, 99, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 92, 93, 8, 1, 3, 4, 31, 32, 55, 53, 54], c = 0; c < b.length; c++) {
                var d = Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(b[c]);
                if (d != -1) {
                    Ex.ⲆᐃΔⲆ.ⲆⵠⵠΔΔⲆΔ(b.length[c], d);
                }
            }
            Ex.ᐃΔⵠΔ.ⵠⲆᐃΔⲆⲆΔ();
        };
        this.ᐃᐃⲆΔⲆⲆΔᐃᐃ = function (a, b, c) {
            this.ᐃⲆᐃΔᐃΔⵠ(a, b * 256 + c);
        };
        this.ᐃⲆᐃΔᐃΔⵠ = function (a, b) {
            Ex.ᐃΔⵠΔ.Δᐃᐃⵠ = -1;
            Ex.ⲆᐃΔⲆ.ⲆⲆᐃᐃΔⲆΔ(a, b, Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(a));
            Ex.ᐃΔⵠΔ.ⲆΔᐃ();
        };
        this.ⵠᐃᐃⲆⵠΔⵠΔΔ = function (a) {
            Ex.ᐃΔⵠΔ.Δᐃᐃⵠ = -1;
            Ex.ⲆΔⵠᐃⵠ.wait = Un;
            var b = Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(a);
            Ex.ⲆᐃΔⲆ.ⲆⲆᐃᐃΔⲆΔ(a, 1, b);
            if (b >= 0 && !Ex.ⲆᐃΔⲆ.ᐃᐃΔ[a]) {
                Ex.ᐃΔⵠΔ.ⲆΔᐃ();
            }
            if (a == 159) {
                Ex.ⵠⲆⲆⵠΔ = [Ex.id];
            }
        };
        this.ΔⵠⵠᐃⵠⵠᐃᐃΔ = function () {
            this.ΔⵠΔⵠ[Qf](Eo[ko].stringify([37]));
        };
        this.ᐃⵠⵠⵠⲆᐃⲆᐃΔ = function (a) {
            this.ΔⵠΔⵠ[Qf](Ko[So].stringify([28, a.ⵠΔⲆⲆⵠ, a.id]));
        };
        this.ⵠⲆᐃⵠⲆᐃⲆⵠⲆ = function (a, b) {
            this.ΔⵠΔⵠ[Qf](Ko[ba].stringify([7, a, b]));
        };
        this.ΔⲆⲆΔⵠΔⵠⲆⵠ = function () {
            var a = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ];
            if (a) {
                var b = Math.PI * 2;
                this.ΔⵠΔⵠ[Qf](Ko[So].stringify([15, Ex.ᐃΔⵠΔ.Δᐃᐃⵠ, Math.floor((a.angle + b) % b * 255 / b), Ex.ᐃΔⵠΔ.mode]));
            }
        };
        this.ᐃⵠⵠⵠⵠ = function (a, b) {
            switch (a) {
                case 195:
                case 110:
                case 116:
                case 117:
                case 145:
                case 127:
                case 133:
                case 136:
                case 142:
                case 143:
                case 189:
                case 207:
                case 233:
                case 205:
                case 209:
                case 211:
                case 192:
                case 137:
                case 138:
                case 196:
                case 197:
                case 200:
                case 199:
                    Ex.ᐃΔⵠΔ.Δᐃᐃⵠ = -1;
                    this.ΔⵠΔⵠ[Qf](ia[Xo].stringify([16, a]));
                    break;
                case 114:
                case 160:
                case 115:
                case 132:
                case 188:
                case 206:
                case 204:
                case 191:
                case 193:
                case 208:
                case 210:
                case 113:
                case 162:
                case 163:
                case 164:
                case 165:
                case 118:
                case 167:
                case 151:
                case 152:
                case 166:
                case 171:
                case 172:
                case 173:
                case 124:
                case 218:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 220:
                case 168:
                case 169:
                case 170:
                case 119:
                case 122:
                case 123:
                case 217:
                case 219:
                case 125:
                case 190:
                case 141:
                case 135:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 198:
                case 201:
                case 182:
                case 183:
                case 144:
                case 159:
                case 221:
                    if (!Ex.ᐃΔΔⲆᐃ) {
                        if (a === Ex.ᐃΔⵠΔ.Δᐃᐃⵠ) {
                            Ex.ᐃΔⵠΔ.Δᐃᐃⵠ = -1;
                        } else {
                            Ex.ᐃΔⵠΔ.Δᐃᐃⵠ = a;
                        }
                    }
                    break;
                case 0:
                case 57:
                case 5:
                case 6:
                case 30:
                case 19:
                case 9:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 92:
                case 93:
                case 12:
                case 13:
                case 14:
                case 15:
                case 33:
                case Xr.ⲆⵠⲆⵠᐃⵠⵠⲆΔ:
                case 16:
                case 17:
                case 34:
                case 18:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                    if (!Ex.ᐃΔΔⲆᐃ) {
                        Ex.ᐃΔⵠΔ.Δᐃᐃⵠ = -1;
                        if ((c = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ]) && a === c.right) {
                            this.ΔⵠΔⵠ[Qf](ha[ba].stringify([16, 7]));
                        } else {
                            Ex.ⵠᐃΔΔΔ.wait = k;
                            this.ΔⵠΔⵠ[Qf](nq[Ta].stringify([16, a]));
                        }
                    }
                    break;
                case 1:
                case 8:
                case 3:
                case 4:
                case 35:
                case 36:
                case 37:
                case 28:
                case 38:
                case 39:
                case 31:
                case 32:
                case 45:
                case 46:
                case 50:
                case 51:
                case 52:
                case 55:
                case 56:
                case 53:
                case 54:
                case 89:
                case 49:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                    if (!Ex.ᐃΔΔⲆᐃ) {
                        Ex.ᐃΔⵠΔ.Δᐃᐃⵠ = -1;
                        if ((c = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ]) && a === c.right) {
                            this.ΔⵠΔⵠ[Qf](oq[mq].stringify([16, 7]));
                        } else {
                            this.ΔⵠΔⵠ[Qf](Ba[Ja].stringify([16, a]));
                        }
                    }
                    break;
                case 223:
                case 224:
                case 225:
                case 239:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 91:
                    if (!Ex.ᐃΔΔⲆᐃ) {
                        Ex.ᐃΔⵠΔ.Δᐃᐃⵠ = -1;
                        var c = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ];
                        this.ΔⵠΔⵠ[Qf](Ba[Ja].stringify([16, a]));
                    }
                    break;
                case 77:
                case 78:
                case 79:
                case 58:
                case 25:
                case 26:
                case 27:
                case 43:
                case 44:
                case 20:
                case 21:
                case 22:
                case 59:
                case 60:
                case 90:
                case 61:
                case 47:
                    if ((c = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ]) && a !== c.ⵠⵠⲆⲆΔ) {
                        Ex.ΔⲆⵠΔΔ.wait = Jg;
                    }
                    this.ΔⵠΔⵠ[Qf](ia[ba].stringify([16, a]));
                    break;
                case 10:
                case 83:
                case 84:
                case 86:
                case 11:
                case 40:
                case 88:
                case 82:
                case 80:
                case 81:
                case 41:
                case 42:
                case 85:
                case 23:
                case 24:
                case 48:
                    this.ΔⵠΔⵠ[Qf](_a[Sa].stringify([16, a]));
            }
        };
        this.ᐃΔⲆΔΔⲆⵠΔⲆ = function (a) {
            this.ΔⵠΔⵠ[Qf](Ko[Jo].stringify([11, a]));
        };
        this.ΔⵠΔⲆⲆᐃⵠⵠΔ = function (a) {
            Ex.ⲆΔⵠᐃⵠ.wait = true;
            var b = Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(a);
            Ex.ⲆᐃΔⲆ.ⲆⵠⵠΔΔⲆΔ(a, b);
            Ex.ᐃΔⵠΔ.ⲆΔᐃ();
        };
        this.ⲆⵠⲆᐃⵠΔᐃⲆⵠ = function (a, b) {
            this.ΔⵠΔⵠ[Qf](dq[mq].stringify([20, a]));
            lastrecycled = a;
        };
        this.ⲆΔΔⲆᐃᐃⵠⲆΔ = function (a, b) {
            this.ΔⵠΔⵠ[Qf](Eo[ko].stringify([35, a]));
        };
        this.ᐃΔΔⵠᐃΔⵠⵠΔ = function (a) {
            Ex.ⲆΔⵠᐃⵠ.wait = Uh;
            var b = Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(a);
            Ex.ⲆᐃΔⲆ.ⲆⲆᐃᐃΔⲆΔ(a, 1, b);
            Ex.ᐃΔⵠΔ.ⲆΔᐃ();
        };
        this.ᐃⵠΔⲆΔᐃⵠΔΔ = function (a) {
            var b = a[1];
            var c = a[2];
            Ex.ⲆΔⵠᐃⵠ.wait = dr;
            var d = Ex.ⲆᐃΔⲆ.ⵠᐃⲆⵠⲆ(b);
            Ex.ⲆᐃΔⲆ.ⲆⲆᐃᐃΔⲆΔ(b, c, d);
            Ex.ᐃΔⵠΔ.ⲆΔᐃ();
        };
        this.ⲆΔⲆⵠⵠᐃᐃΔⵠ = function () {
            this.ΔⵠΔⵠ[Qf](Eo[ko].stringify([36]));
        };
        this.ΔΔΔᐃᐃⲆⵠⵠᐃ = function (a) {
            var b = Math.PI * 2;
            this.ΔⵠΔⵠ[Qf](Ko[So].stringify([24, Math.floor((a + b) % b * 255 / b)]));
        };
        this.ⵠⵠΔΔⲆⲆᐃⲆᐃ = function (a) {
            var b = Math.PI * 2;
            this.ΔⵠΔⵠ[Qf](Ko[So].stringify([19, Math.floor((a + b) % b * 255 / b)]));
        };
        this.ⲆΔⲆᐃⵠⵠⲆⵠΔ = function (a) {
            this.ΔⵠΔⵠ[Qf](ΔⲆⵠᐃⵠᐃᐃ[gq].stringify([3, a]));
        };
        this.ᐃΔⵠⵠⲆᐃⲆᐃⲆ = function (a) {
            this.ΔⵠΔⵠ[Qf](ha[ba].stringify([31, a]));
        };
        this.ΔᐃⲆⵠⵠΔⵠⵠΔ = function (a) {
            var b = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ];
            if (Ex.ᐃΔΔⲆᐃ) {
                if (Math.random() > 0.5) {
                    b.text.push(a.substring(0, 25) + " ..." + ⵠΔᐃⵠᐃ);
                } else {
                    b.text.push(ⵠΔᐃⵠᐃ + "... " + a.substring(0, 25));
                }
            } else {
                b.text.push(a);
            }
            this.ΔⵠΔⵠ[Qf](ha[ba].stringify([8, a]));
        };
        this.ΔᐃΔΔⵠ = function (a) {
            var b = ΔⵠΔⲆ.select.ⵠᐃΔ;
            if (b.length != 0) {
                var c = [3];
                var d = [];
                ⵠΔⲆⵠ.ⲆΔᐃΔⵠⵠⵠ(a, {
                    x: ΔⵠΔⲆ.ⵠⵠⵠ.rx,
                    y: ΔⵠΔⲆ.ⵠⵠⵠ.ry
                });
                c.push(a.x);
                c.push(a.y);
                for (var e = 0; e < b.length; e++) {
                    d.push(b[e].ᐃΔⲆⵠΔᐃⲆᐃᐃ);
                }
                c.push(d);
                this.ΔⵠΔⵠ[Qf](nq[Ta].stringify(c));
            }
        };
        this.ΔᐃⲆⲆⵠⲆᐃ = 0;
        this.ᐃⵠⵠⲆⲆᐃⵠ = {
            Ⲇⵠᐃⵠ: 0,
            ᐃᐃ: 0
        };
        this.ⲆⵠⵠᐃΔᐃⵠⲆᐃ = function () {
            if (Kx - this.ΔᐃⲆⲆⵠⲆᐃ > 50) {
                this.ΔᐃⲆⲆⵠⲆᐃ = Kx;
                var a = Ex.ⵠⵠⵠ;
                var b = Math.floor(a.x / 100);
                var c = Math.floor(a.y / 100);
                if (b != this.ᐃⵠⵠⲆⲆᐃⵠ.ᐃᐃ || c != this.ᐃⵠⵠⲆⲆᐃⵠ.Ⲇⵠᐃⵠ) {
                    this.ΔⵠΔⵠ[Qf](Ba[mq].stringify([10, Math.floor(-a.x), Math.floor(-a.y)]));
                    this.ᐃⵠⵠⲆⲆᐃⵠ.ᐃᐃ = b;
                    this.ᐃⵠⵠⲆⲆᐃⵠ.Ⲇⵠᐃⵠ = c;
                }
            }
        };
        this.ΔⲆᐃⲆᐃᐃⵠ = 0;
        this.ΔⵠⲆΔⵠΔⵠΔⲆ = function () {
            if (Kx - this.ΔⲆᐃⲆᐃᐃⵠ > 60000) {
                this.ΔⲆᐃⲆᐃᐃⵠ = Kx;
                this.ping();
            }
        };
        this.ᐃⲆΔⵠᐃΔΔΔΔ = function () {
            Ex.reconnect.enabled = Pj;
            if (this.ΔⵠΔⵠ.ΔᐃⵠⲆᐃ == this.ΔᐃⵠⲆᐃ) {
                this.ΔᐃⵠⲆᐃ++;
                this.ΔⵠΔⵠ.close();
                Δⵠⵠⵠ.connect();
            }
        };
        this.ⵠⵠⲆⲆᐃⵠⵠⲆᐃ = function (a) {
            this.ⲆⵠⲆⲆⵠ(yb[316]);
            for (var b = 1; a.length > b; b++) {
                Ex.ⵠⲆⲆⵠΔ.push(a[b]);
            }
        };
        this.ⲆⲆⵠⲆⵠⲆᐃᐃⵠ = function (a) {
            this.ⲆⵠⲆⲆⵠ(Dx.ⵠᐃⲆΔ[a].ⲆⲆⲆⲆΔ + yb[318]);
            Ex.ⵠⲆⲆⵠΔ.push(a);
            var b = document.getElementById("team_box");
            if (Gx.ⲆⲆⵠΔᐃ != -1 && b.style.display == "inline-block") {
                Gx.ⵠⵠⵠⲆⵠ[Gx.ⲆⲆⵠΔᐃ].action();
            }
        };
        this.ⲆᐃⵠΔᐃⵠⵠⵠᐃ = function () {
            this.ⲆⵠⲆⲆⵠ(yb[319]);
            Ex.ⲆⲆⲆⲆⵠ.wait = true;
            Ex.ⵠⲆⲆⵠΔ = [];
            document.getElementById("team_box").style.display = "none";
        };
        this.ᐃⵠᐃᐃⵠⲆⲆᐃⵠ = function (a) {
            if (Ex.id == a) {
                this.ⲆⵠⲆⲆⵠ(yb[320]);
                Ex.ⲆⲆⲆⲆⵠ.wait = true;
                Ex.ⵠⲆⲆⵠΔ = [];
                document.getElementById("team_box").style.display = "none";
            } else {
                this.ⲆⵠⲆⲆⵠ(Dx.ⵠᐃⲆΔ[a].ⲆⲆⲆⲆΔ + yb[321]);
                for (var b = 0; Ex.ⵠⲆⲆⵠΔ.length > b; b++) {
                    if (Ex.ⵠⲆⲆⵠΔ[b] == a) {
                        Ex.ⵠⲆⲆⵠΔ.splice(b, 1);
                        break;
                    }
                }
                var c = document.getElementById("team_box");
                if (Gx.ⲆⲆⵠΔᐃ != -1 && c.style.display == "inline-block") {
                    Gx.ⵠⵠⵠⲆⵠ[Gx.ⲆⲆⵠΔᐃ].action();
                }
            }
        };
        this.ⲆⵠᐃⵠⲆⵠΔⲆⲆ = function (a) {
            Ex.ⲆⵠⲆΔᐃ = eo;
            this.ⲆⵠⲆⲆⵠ(yb[322]);
            if (this.ΔⵠΔⵠ.ΔᐃⵠⲆᐃ == this.ΔᐃⵠⲆᐃ) {
                this.ΔᐃⵠⲆᐃ++;
                Gx.ⲆⲆⵠᐃᐃ(Ax.ᐃΔᐃⲆΔ);
                this.ΔⵠΔⵠ.close();
            }
        };
        this.ᐃᐃΔᐃⵠⲆⲆᐃⵠ = function (a, b) {
            Ex.ⲆⵠⲆΔᐃ = Bq;
            var c = new Uint16Array(b);
            var d = new Uint32Array(b);
            Ex.ΔⲆⲆⵠⵠⵠⵠ.ⵠⵠᐃᐃΔⵠⲆ = vt[a][Math.floor(Math.random() * vt[a].length)];
            Ex.ΔⲆⲆⵠⵠⵠⵠ.Ⲇⵠⵠⵠᐃ = ⵠΔⲆⵠ.ⲆⵠⲆⲆΔᐃᐃ(Dx.ⵠᐃⲆΔ[Ex.id].Ⲇⵠⵠⵠᐃ);
            Ex.ΔⲆⲆⵠⵠⵠⵠ.ΔⵠⵠΔᐃⵠⲆ = ⵠΔⲆⵠ.ⲆⵠⲆⲆΔᐃᐃ(d[1]);
            Ex.ΔⲆⲆⵠⵠⵠⵠ.ᐃⲆᐃᐃᐃ = c[1];
            this.ⲆⵠⲆⲆⵠ(yb[317]);
            if (this.ΔⵠΔⵠ.ΔᐃⵠⲆᐃ == this.ΔᐃⵠⲆᐃ) {
                this.ΔᐃⵠⲆᐃ++;
                Gx.ⲆⲆⵠᐃᐃ(Fx.ᐃΔᐃⲆΔ);
                this.ΔⵠΔⵠ.close();
                try {
                    Hf.Widget.adsRefresh();
                } catch (a) { }
            }
            Settings.AutoSpike.e = false;
        };
        this.ping = function () {
            this.ΔⵠΔⵠ[Qf](Dw.ΔⲆᐃⵠⵠᐃⵠᐃⵠ);
        };
        this.ᐃΔⵠⲆᐃⲆᐃᐃΔ = function () {
            if (this.ΔⵠΔⵠ.readyState == 3) {
                this.ᐃⲆⲆΔΔⲆⵠ -= 600000;
            }
        };
        this.ⲆⵠⵠᐃⵠᐃᐃⲆⲆ = function () {
            if (Lx > 5) {
                this.ᐃⲆⲆΔΔⲆⵠ = Kx;
            }
            if (Kx - this.ᐃⲆⲆΔΔⲆⵠ > 600000) {
                this.ᐃⲆⲆΔΔⲆⵠ = Kx;
                this.ᐃⲆΔⵠᐃΔΔΔΔ();
            }
        };
        this.ΔᐃΔΔⵠΔⵠⵠⲆ = function (c) {
            Px++;
            clearTimeout(this.ᐃΔᐃᐃⵠ);
            document.getElementById("commandMainBoxName").innerHTML = this.ΔᐃⵠⲆΔ[this.ⲆⵠⲆⵠΔ][this.ⵠⲆⵠⲆⲆΔⵠ[this.ⲆⵠⲆⵠΔ]].a;
            document.getElementById("exploreForest").src = "img/forest-leaf.png";
            document.getElementById("exploreWinter").src = "img/winter-flake.png";
            document.getElementById("exploreDesert").src = "img/desert-cactus.png";
            document.getElementById("exploreLava").src = "img/lava-volcano.png";
            this.ᐃⲆⲆΔΔⲆⵠ = Kx;
            Ex.ΔᐃⵠⲆ.ⵠΔᐃⵠⲆ.ⵠⵠⵠⵠⲆ = Ex.ΔᐃⵠⲆ.ⵠΔᐃⵠⲆ.ⵠⲆⲆⲆⲆ;
            Ex.ΔᐃⵠⲆ.ⵠⲆⲆⲆΔⵠⲆ.ⵠⵠⵠⵠⲆ = Ex.ΔᐃⵠⲆ.ⵠⲆⲆⲆΔⵠⲆ.ⵠⲆⲆⲆⲆ;
            Ex.ΔᐃⵠⲆ.ΔΔⵠᐃⵠΔⲆ.ⵠⵠⵠⵠⲆ = Ex.ΔᐃⵠⲆ.ΔΔⵠᐃⵠΔⲆ.ⵠⲆⲆⲆⲆ;
            Ex.ΔᐃⵠⲆ.ⲆⲆΔΔᐃᐃⵠ.ⵠⵠⵠⵠⲆ = Ex.ΔᐃⵠⲆ.ⲆⲆΔΔᐃᐃⵠ.ⵠⲆⲆⲆⲆ;
            Ex.ΔᐃⵠⲆ.ᐃⲆⵠᐃᐃ.ⵠⵠⵠⵠⲆ = Ex.ΔᐃⵠⲆ.ᐃⲆⵠᐃᐃ.ⵠⲆⲆⲆⲆ;
            Ex.ΔᐃⵠⲆ.ΔⵠᐃⲆ = 1;
            Ex.ΔᐃⵠⲆ.c = 1;
            Ex.ΔᐃⵠⲆ.ⵠⲆⵠ = 1;
            Ex.ΔᐃⵠⲆ.Ⲇᐃⵠ = 1;
            Ex.ΔᐃⵠⲆ.ᐃⵠⵠ = 1;
            Ex.ΔᐃⵠⲆ.ⲆᐃᐃΔⲆᐃⵠ = 1;
            Ex.ΔⵠᐃⵠⲆᐃᐃ = false;
            Gx.ᐃΔΔΔᐃ.display = 0;
            Ex.ⲆᐃΔⲆ.ⲆᐃⲆⵠΔ = [];
            Ex.ⲆᐃΔⲆ.ᐃᐃΔ = [];
            Ex.ⲆᐃΔⲆ.max = 10;
            Ex.ⲆᐃΔⲆ.ᐃⲆⵠᐃᐃᐃⲆ = 0;
            Ex.ⲆᐃΔⲆ.ᐃᐃⵠᐃⲆ = 0;
            Ex.ⲆᐃΔⲆ.id = -1;
            Gx.ᐃΔⵠΔΔΔᐃ = 1;
            Gx.ᐃⲆᐃⲆⵠⵠᐃ = 1;
            Gx.ⲆΔᐃⵠⲆΔΔ = 1;
            Gx.ΔΔᐃΔⵠⲆΔ = 1;
            Ex.ⲆⵠⲆΔᐃ = kk;
            Ex.ⲆᐃΔⲆ.ᐃⲆᐃⵠᐃⵠᐃ.stop();
            Ex.ᐃΔⵠΔ.ⲆⲆⵠⵠᐃ = [];
            Ex.ᐃΔⵠΔ.ⵠΔⵠᐃΔ = false;
            Ex.ᐃΔⵠΔ.ΔᐃΔⲆΔⲆᐃᐃᐃ = false;
            Ex.ᐃΔⵠΔ.Δᐃᐃⵠ = -1;
            Ex.ᐃΔⵠΔ.id = -1;
            Ex.ᐃΔⵠΔ.ⵠΔⵠⵠⲆ = tr;
            Ex.ᐃΔⵠΔ.ΔᐃⲆⲆⲆ = w;
            Ex.ᐃΔⵠΔ.ΔⲆⲆⲆᐃ = tr;
            Ex.ᐃΔⵠΔ.ΔΔΔⵠⵠΔⲆ = Dl;
            Ex.ᐃΔⵠΔ.timeout = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0, 1, 0, 1, 1);
            Ex.ⵠᐃΔΔΔ.timeout = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(bl, 0, 1, 0, 0.1, 1);
            Ex.ⵠᐃΔΔΔ.wait = false;
            Ex.ΔⲆⵠΔΔ.timeout = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0, 1, 0, 0.2, 1);
            Ex.ΔⲆⵠΔΔ.wait = false;
            Ex.ⲆΔⵠᐃⵠ.timeout = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0, 1, 0, 1, 1);
            Ex.ⲆΔⵠᐃⵠ.wait = na;
            Ex.ⲆⲆⲆⲆⵠ.id = -1;
            Ex.ⲆⲆⲆⲆⵠ.ⲆⲆᐃᐃ = -1;
            Ex.ⲆⲆⲆⲆⵠ.wait = eo;
            Ex.ⲆⲆⲆⲆⵠ.timeout = new ⵠΔⲆⵠ.ⲆⲆⵠΔ(false, 0, 1, 0, 1 / 30, 1);
            Gx.ⲆᐃΔΔᐃ.ⵠⲆᐃⵠΔ.x = -1;
            Gx.ⲆᐃΔΔᐃ.ⵠⲆᐃⵠΔ.y = -1;
            Gx.ΔΔΔΔ.open = un;
            Gx.ⲆᐃΔΔᐃ.ⵠᐃⲆΔ = [];
            Ex.ⲆⲆⵠⲆᐃ.enabled = Bq;
            Dx.mode = c[1];
            if (Ih !== c[20] && c[21] !== $e) {
                Dx.ⵠᐃΔΔⲆ = c[20];
                Dx.ᐃⵠᐃᐃⲆ = c[21];
                Dx.w = Dx.ⵠᐃΔΔⲆ * Dx.ⵠⵠᐃᐃⲆⵠᐃ;
                Dx.ⵠⲆⵠ = Dx.ᐃⵠᐃᐃⲆ * Dx.ᐃⵠⲆⲆᐃⲆᐃ;
            }
            Dx.ⵠᐃΔⲆⵠⲆⵠ = c[22];
            Dx.ΔⵠΔⵠⵠ = c[23];
            b.ΔⵠᐃᐃᐃᐃΔ(c[24]);
            b.ᐃⵠΔⲆᐃᐃᐃΔΔ(c[25]);
            Ex.ΔⲆⵠᐃΔ.ⵠⲆⲆΔᐃ = c[26];
            Ex.ⵠᐃⵠᐃΔⲆⲆ = 0;
            Ex.ⵠⵠⲆⵠⲆ.ⵠⲆⲆΔᐃ = c[27];
            Dx.ΔⵠⲆⲆΔᐃⵠᐃΔ(c[19]);
            Dx.time = c[5];
            Dx.ⲆⲆⵠΔⵠ.ᐃΔⲆⲆΔ = c[15];
            Dx.ⲆⲆⵠΔⵠ.ⵠᐃᐃΔΔ = new Date().getTime();
            Gx.ᐃⲆⲆΔ.ⲆᐃᐃⲆⵠⲆΔ = c[16];
            Dx.transition = false;
            Ex.Δⵠᐃ = c[2];
            Gx.ᐃⲆⲆΔ.reset();
            Ex.ⵠⲆⲆⵠΔ = c[8];
            Dx.ⵠᐃΔ[0] = [];
            Dx.ⵠᐃΔ[100] = [];
            Dx.ⵠᐃΔ[2] = [];
            Dx.ⵠᐃΔ[1] = [];
            Dx.ⵠᐃΔ[6] = [];
            Dx.ⵠᐃΔ[3] = [];
            Dx.ⵠᐃΔ[31] = [];
            Dx.ⵠᐃΔ[37] = [];
            Dx.ⵠᐃΔ[43] = [];
            Dx.ⵠᐃΔ[44] = [];
            Dx.ⵠᐃΔ[39] = [];
            Dx.ⵠᐃΔ[40] = [];
            Dx.ⵠᐃΔ[54] = [];
            Dx.ⵠᐃΔ[55] = [];
            Dx.ⵠᐃΔ[4] = [];
            Dx.ⵠᐃΔ[7] = [];
            Dx.ⵠᐃΔ[8] = [];
            Dx.ⵠᐃΔ[9] = [];
            Dx.ⵠᐃΔ[10] = [];
            Dx.ⵠᐃΔ[15] = [];
            Dx.ⵠᐃΔ[16] = [];
            Dx.ⵠᐃΔ[17] = [];
            Dx.ⵠᐃΔ[45] = [];
            Dx.ⵠᐃΔ[46] = [];
            Dx.ⵠᐃΔ[47] = [];
            Dx.ⵠᐃΔ[48] = [];
            Dx.ⵠᐃΔ[49] = [];
            Dx.ⵠᐃΔ[53] = [];
            Dx.ⵠᐃΔ[11] = [];
            Dx.ⵠᐃΔ[22] = [];
            Dx.ⵠᐃΔ[23] = [];
            Dx.ⵠᐃΔ[5] = [];
            Dx.ⵠᐃΔ[12] = [];
            Dx.ⵠᐃΔ[13] = [];
            Dx.ⵠᐃΔ[14] = [];
            Dx.ⵠᐃΔ[60] = [];
            Dx.ⵠᐃΔ[70] = [];
            Dx.ⵠᐃΔ[71] = [];
            Dx.ⵠᐃΔ[72] = [];
            Dx.ⵠᐃΔ[73] = [];
            Dx.ⵠᐃΔ[74] = [];
            Dx.ⵠᐃΔ[81] = [];
            Dx.ⵠᐃΔ[82] = [];
            Dx.ⵠᐃΔ[87] = [];
            Dx.ⵠᐃΔ[86] = [];
            Dx.ⵠᐃΔ[34] = [];
            Dx.ⵠᐃΔ[65] = [];
            Dx.ⵠᐃΔ[66] = [];
            Dx.ⵠᐃΔ[67] = [];
            Dx.ⵠᐃΔ[62] = [];
            Dx.ⵠᐃΔ[63] = [];
            Dx.ⵠᐃΔ[78] = [];
            Dx.ⵠᐃΔ[77] = [];
            Dx.ⵠᐃΔ[75] = [];
            Dx.ⵠᐃΔ[76] = [];
            Dx.ⵠᐃΔ[64] = [];
            Dx.ⵠᐃΔ[69] = [];
            Dx.ⵠᐃΔ[68] = [];
            Dx.ⵠᐃΔ[79] = [];
            Dx.ⵠᐃΔ[89] = [];
            Dx.ⵠᐃΔ[83] = [];
            Dx.ⵠᐃΔ[84] = [];
            Dx.ⵠᐃΔ[85] = [];
            Dx.ⵠᐃΔ[80] = [];
            Dx.ⵠᐃΔ[88] = [];
            Dx.ⵠᐃΔ[91] = [];
            Dx.ⵠᐃΔ[90] = [];
            Dx.ⵠᐃΔ[61] = [];
            Dx.ⵠᐃΔ[18] = [];
            Dx.ⵠᐃΔ[19] = [];
            Dx.ⵠᐃΔ[20] = [];
            Dx.ⵠᐃΔ[21] = [];
            Dx.ⵠᐃΔ[50] = [];
            Dx.ⵠᐃΔ[52] = [];
            Dx.ⵠᐃΔ[51] = [];
            Dx.ⵠᐃΔ[29] = [];
            Dx.ⵠᐃΔ[56] = [];
            Dx.ⵠᐃΔ[30] = [];
            Dx.ⵠᐃΔ[38] = [];
            Dx.ⵠᐃΔ[33] = [];
            Dx.ⵠᐃΔ[32] = [];
            Dx.ⵠᐃΔ[24] = [];
            Dx.ⵠᐃΔ[25] = [];
            Dx.ⵠᐃΔ[26] = [];
            Dx.ⵠᐃΔ[27] = [];
            Dx.ⵠᐃΔ[28] = [];
            Dx.ⵠᐃΔ[42] = [];
            Dx.ⵠᐃΔ[41] = [];
            Dx.ⵠᐃΔ[35] = [];
            Dx.ⵠᐃΔ[36] = [];
            Dx.ⲆΔᐃΔΔ = [];
            Dx.ᐃⵠⲆⲆΔΔⵠ = c[7];
            Ex.id = c[9];
            Ex.ᐃⵠᐃΔ = Ex.id * Dx.ᐃⵠⲆⲆΔΔⵠ;
            if (Hx.loaded) {
                Hx.ⵠᐃⲆΔ[0].ᐃⵠᐃΔ = Ex.ᐃⵠᐃΔ;
                Hx.ⵠᐃⲆΔ[0].ⵠⲆⵠΔⵠᐃΔ = 0;
            }
            Ix.ⵠᐃΔᐃΔΔⵠ();
            Ex.ⵠⵠⵠ.ΔⲆᐃⲆΔ(c[3], c[10]);
            Dx.ⵠᐃⲆΔ = [];
            var d = Dx.ⵠᐃⲆΔ;
            for (var e = 0; e < c[11]; e++) {
                d.push(new Iw());
            }
            e = 0;
            for (var f = c[4]; e < f.length; e++) {
                var g = d[f[e].i];
                g.ⲆⲆⲆⲆΔ = f[e].n;
                g.ⵠᐃⵠᐃ = f[e].s;
                g.ᐃⵠᐃⲆΔ = f[e].a;
                g.ᐃⲆⲆⲆⲆ = f[e].c;
                g.ΔᐃᐃᐃΔ = f[e].b;
                g.ᐃⵠⵠΔΔ = f[e].d;
                g.ⲆⵠᐃⵠⲆΔⲆ = f[e].g;
                g.level = f[e].l;
                g.Ⲇⵠⵠⵠᐃ = ⵠΔⲆⵠ.ⵠⲆΔᐃⲆⵠΔ(f[e].p);
                g.ⲆⵠⲆΔᐃ = Mk;
                if (_f === 1) {
                    g.ⲆⲆⲆⲆΔ += "|" + f[e].i;
                }
            }
            Ex.ΔⲆΔᐃⲆ.sort();
            if (Dx.mode === 1 && Dx.ⵠᐃⲆΔ[Ex.id].ⲆⲆⲆⲆΔ === "spectator") {
                Ex.ΔⵠⵠᐃⲆΔΔ = O;
            } else {
                Ex.ΔⵠⵠᐃⲆΔΔ = et;
            }
            if (Dx.mode === 2 && Dx.ⵠᐃⲆΔ[Ex.id].ⵠᐃⵠᐃ === 0) {
                Ex.ᐃΔΔⲆᐃ = true;
            } else {
                Ex.ᐃΔΔⲆᐃ = Ad;
            }
            if (Dx.mode === 3 && Dx.ⵠᐃⲆΔ[Ex.id].ⵠᐃⵠᐃ === 0) {
                Ex.ᐃΔⲆⲆΔᐃᐃ = Ro;
            } else {
                Ex.ᐃΔⲆⲆΔᐃᐃ = Xs;
            }
            ΔⲆⲆΔ.set("starve_token", Ex.ᐃΔⵠᐃᐃ);
            if (c[12] === 0) {
                Ex.ⲆⲆΔᐃⲆ.ⲆⲆᐃΔΔ = 0;
                Gx.ᐃⲆⲆΔ.restore(c[17]);
                var h = c[14];
                if (h[29]) {
                    Ex.ⲆᐃΔⲆ.ⲆⵠⵠⵠⲆⲆⲆ(1, 0);
                }
                for (e = 0; h.length > e; e++) {
                    if (h[e]) {
                        if (e == 29) {
                            continue;
                        }
                        if (e == 7) {
                            continue;
                        }
                        this.ᐃⲆΔⵠⵠᐃⲆ([0, e, h[e]]);
                    }
                }
                Ex.ⲆⲆΔᐃⲆ.open = Ad;
            } else {
                if (Dx.mode === 4) {
                    this.ᐃⲆΔⵠⵠᐃⲆ([0, 238, 1]);
                } else if (Dx.mode === 3) {
                    if (Ex.ᐃΔⲆⲆΔᐃᐃ) {
                        this.ᐃⲆΔⵠⵠᐃⲆ([0, 190, 4]);
                    } else {
                        this.ᐃⲆΔⵠⵠᐃⲆ([0, 191, 3]);
                    }
                }
                if (Dx.mode === 0 || Dx.mode === 3 || Dx.mode === 7 || Dx.mode === 4) {
                    Ex.ⲆⲆΔᐃⲆ.ⲆⲆᐃΔΔ = new Date().getTime();
                    Ex.ⲆⲆΔᐃⲆ.open = O;
                    Ex.ⲆⲆΔᐃⲆ.value = c[13];
                    Gx.ⲆⲆΔᐃⲆ.ⵠᐃᐃΔΔ();
                } else {
                    Ex.ⲆⲆΔᐃⲆ.ⲆⲆᐃΔΔ = 0;
                    Ex.ⲆⲆΔᐃⲆ.open = false;
                    Ex.ⲆⲆΔᐃⲆ.value = 0;
                }
                Ex.ᐃᐃⲆⵠⲆᐃᐃ = c[12].toString();
            }
            Ex.ᐃΔΔⲆⵠ.enabled = c[6];
            Ex.ᐃΔΔⲆⵠ.ⲆⲆᐃΔΔ = -1;
            Ex.ᐃΔΔⲆⵠ.label = null;
            Ex.ᐃΔΔⲆⵠ.now = -1;
            ΔⲆⲆΔ.set("starve_token_id", Ex.ᐃᐃⲆⵠⲆᐃᐃ);
            if (Ex.reconnect.enabled) {
                Ex.reconnect.rotate = 0;
                Ex.reconnect.enabled = false;
            } else {
                Ax.ⲆⲆⵠᐃᐃ(Gx.ᐃΔᐃⲆΔ);
                if (ga) {
                    ga("send", "event", "Game", "play", "S" + Ax.ⵠᐃⵠᐃ + "A" + Ax.ᐃⵠᐃⲆΔ);
                }
            }
        };
        this.connect = function () {
            b.ΔΔᐃⵠⲆⵠⵠ = 0;
            b.ΔᐃΔⵠᐃΔⲆ();
        };
        this.ⵠΔᐃⲆⵠΔⵠ = [];
        this.ⲆⵠΔⵠᐃⲆΔᐃᐃ = function (c) {
            const a = b.ᐃΔᐃⲆⵠ.filter(a => a.gm === c);
            const d = {};
            for (let b = 0; a.length > b; b++) {
                const c = a[b];
                const e = c.r;
                if (e !== undefined) {
                    if (Ih === d[e]) {
                        d[e] = [];
                    }
                    d[e].push(c);
                }
            }
            function f(e) {
                b.ⵠΔᐃⲆⵠΔⵠ[c] = e;
                const f = d[e];
                const g = f[Math.floor(Math.random() * f.length)];
                b.ᐃΔΔⲆΔⲆⵠ({
                    domain: Gf,
                    is_tls: 1,
                    id: g.id,
                    p: g.p
                });
            }
            if (b.ⵠΔᐃⲆⵠΔⵠ[c] !== Nh) {
                f(b.ⵠΔᐃⲆⵠΔⵠ[c]);
                return;
            }
            let g = 1;
            function h(a) {
                const b = new Hf.XMLHttpRequest();
                const c = a[0];
                const d = c.p;
                const e = c.r;
                const i = d[Math.floor(Math.random() * d.length)];
                b.open("GET", "https://" + i + "." + Gf + "/", true);
                b.onreadystatechange = function () {
                    if (b.readyState === 4) {
                        if (g === 0) {
                            return;
                        }
                        g = 0;
                        f(e);
                    }
                };
                b.send();
            }
            for (let a in d) {
                h(d[a]);
            }
            Hf.setTimeout(function () {
                if (g === 0) {
                    return;
                }
                g = 0;
                const a = Hf.Object.keys(d);
                f(a[Math.floor(Math.random() * a.length)]);
            }, 5000);
        };
        this.ᐃΔΔᐃΔⵠⵠⲆⵠ = function () {
            let a = Vf.ⵠᐃᐃⵠⵠⵠᐃ[b.ⲆⵠⲆⵠΔ];
            console.log(Rh, Qr, Lk);
            let c = b.ⵠⲆⵠⲆⲆΔⵠ[b.ⲆⵠⲆⵠΔ];
            let d = b.ᐃΔᐃⲆⵠ.find(b => b.gm == a && b.idx == c);
            if (d === undefined) {
                b.ⲆⵠΔⵠᐃⲆΔᐃᐃ(a);
            } else {
                b.ᐃΔΔⲆΔⲆⵠ({
                    domain: Gf,
                    is_tls: 1,
                    id: d.id,
                    p: d.p
                });
            }
        };
        this.ΔᐃΔⵠᐃΔⲆ = function () {
            console.log(Sk);
            if (Cw !== undefined && Mq !== Lf) {
                console.log(Nh, undefined, undefined);
                b.ᐃΔΔⲆΔⲆⵠ({
                    domain: Gf,
                    is_tls: 1,
                    id: Lf + Cw,
                    p: b.ⲆⵠᐃᐃⲆᐃⵠ[Lf]
                });
                return;
            }
            if (Rf === undefined) {
                b.ᐃΔΔᐃΔⵠⵠⲆⵠ();
            } else {
                b.ᐃΔΔⲆΔⲆⵠ({
                    domain: Rf.domain,
                    is_tls: Rf.ssl,
                    id: Rf.id,
                    p: [Rf.p]
                });
            }
        };
        this.ᐃΔΔⲆΔⲆⵠ = function (a) {
            let c = a.domain;
            let d = a.is_tls;
            let e = a.id;
            let f = a.p;
            let g = f[Math.floor(Math.random() * f.length)];
            let i = d ? "wss://" + g + "." + c + "/" + e : "ws://" + c;
            console.log(cn, $e);
            b.ΔⵠΔⵠ = new Hf.WebSocket(i);
            b.ΔⵠΔⵠ.binaryType = "arraybuffer";
            b.ΔⵠΔⵠ.ΔᐃⵠⲆᐃ = b.ΔᐃⵠⲆᐃ;
            b.ΔⵠΔⵠ.onmessage = function (a) {
                if (b.ΔᐃⵠⲆᐃ == b.ΔᐃⵠⲆᐃ) {
                    if (typeof a.data == "string") {
                        var c = JSON.parse(a.data);
                        switch (c[0]) {
                            case 0:
                                b.ⲆⵠᐃⲆΔ(c);
                                break;
                            case 1:
                                b.ᐃᐃΔⵠⲆᐃᐃ(c[1]);
                                break;
                            case 2:
                                b.ΔΔⲆⲆⲆᐃⵠᐃΔ(c);
                                break;
                            case 3:
                                b.ΔᐃΔΔⵠΔⵠⵠⲆ(c);
                                break;
                            case 4:
                                b.message(c[1]);
                                break;
                            case 5:
                                b.ᐃᐃⵠⲆⵠⲆⲆ(c);
                                break;
                            case 6:
                                b.ΔⵠᐃᐃᐃᐃΔ(c[1]);
                        }
                    } else {
                        var d = function (b, c, d) {
                            const f = new Uint8Array(b);
                            const e = f.length;
                            let g;
                            let h;
                            let i = Uf[e];
                            if (i === undefined) {
                                Yf += e * 2;
                                if (Yf < 65535) {
                                    g = te(ji(e));
                                } else {
                                    Yf = e;
                                    for (let a = 0; Uf.length > a; a++) {
                                        if (Uf[a] !== undefined) {
                                            const b = Uf[a][0];
                                            Uf[a] = undefined;
                                            ue(b);
                                        }
                                    }
                                    g = te(ji(e));
                                    dj();
                                }
                                h = ck(g);
                                Uf[e] = [g, h];
                            } else {
                                g = i[0];
                                h = i[1];
                            }
                            for (let a = 0; a < f.length; a++) {
                                h[a] = f[a];
                            }
                            Qi(g, c, d);
                            for (let a = 0; f.length > a; a++) {
                                f[a] = h[a];
                            }
                            return f;
                        }(a.data, Ex.ⵠΔⲆΔⲆΔΔ, Ex.ΔΔΔⵠⵠⲆⵠᐃᐃ);
                        var e = d.buffer;
                        switch (d[0]) {
                            case 0:
                                b.ⵠᐃΔ(e, d, false);
                                break;
                            case 1:
                                b.ⵠᐃΔ(e, d, As);
                                break;
                            case 2:
                                b.ⲆⲆᐃⲆⲆⵠᐃⵠⵠ();
                                break;
                            case 3:
                                b.ᐃⲆΔⵠⵠᐃⲆ(new Uint16Array(e));
                                break;
                            case 4:
                                b.ⲆΔⲆᐃΔⵠΔⵠᐃ();
                                break;
                            case 5:
                                b.ⲆᐃΔⵠΔⵠⲆⲆⵠ();
                                break;
                            case 6:
                                b.ⲆⵠᐃⲆⲆⵠⲆᐃⵠ();
                                break;
                            case 7:
                                b.ⵠᐃᐃⲆᐃⲆⲆᐃΔ(e);
                                break;
                            case 8:
                                b.ⲆΔⲆⲆⲆᐃΔᐃΔ(d[1]);
                                break;
                            case 9:
                                b.ΔΔᐃΔⲆᐃΔᐃΔ(d[1]);
                                break;
                            case 10:
                                b.ⲆᐃⲆΔᐃⵠᐃ();
                                break;
                            case 11:
                                b.ᐃⲆᐃΔᐃΔⵠ(d[1], d[2]);
                                break;
                            case 12:
                                b.ⵠΔⵠⵠⲆ(d[1]);
                                break;
                            case 13:
                                b.ⵠⲆⲆⲆᐃΔⲆⲆᐃ(d, e);
                                break;
                            case 14:
                                b.ᐃΔᐃⵠⲆᐃΔ();
                                break;
                            case 15:
                                b.ⵠΔⲆⵠⵠⲆⵠⵠⵠ(d[1]);
                                break;
                            case 16:
                                b.ΔᐃⵠⲆ(d[1], d[2], d[3], d[4], d[5], d[6], d[7]);
                                break;
                            case 17:
                                b.ᐃⲆΔⲆⲆⵠᐃᐃΔ(e);
                                break;
                            case 18:
                                b.ⲆΔⲆⵠᐃΔΔⲆⲆ();
                                break;
                            case 19:
                                b.ΔⲆⲆⲆᐃ(d[1]);
                                break;
                            case 20:
                                b.ⵠΔⵠΔⲆΔΔⲆΔ();
                                break;
                            case 21:
                                b.ΔⲆΔⲆΔ(e);
                                break;
                            case 22:
                                b.ⲆⲆⵠΔᐃⵠⵠⵠⵠ(d[1]);
                                break;
                            case 23:
                                b.ᐃⲆᐃⵠⲆᐃΔⲆᐃ(e);
                                break;
                            case 24:
                                b.ⵠᐃᐃⲆⵠΔⵠΔΔ(d[1]);
                                break;
                            case 25:
                                b.ᐃᐃΔᐃⵠⲆⲆᐃⵠ(d[1], e);
                                break;
                            case 26:
                                b.ⲆᐃΔΔᐃ(d);
                                break;
                            case 27:
                                b.ᐃⵠⵠⵠⵠⲆᐃΔⲆ();
                                break;
                            case 28:
                                b.ᐃΔΔⲆⵠ(d[1]);
                                break;
                            case 29:
                                b.ᐃΔΔᐃⲆⲆΔᐃⵠ();
                                break;
                            case 30:
                                b.ⲆⵠᐃⵠⲆⵠΔⲆⲆ();
                                break;
                            case 31:
                                b.ⵠⵠⲆⲆᐃⵠⵠⲆᐃ(d);
                                break;
                            case 32:
                                b.ᐃⵠᐃᐃⵠⲆⲆᐃⵠ(d[1]);
                                break;
                            case 33:
                                b.ⲆⲆⵠⲆⵠⲆᐃᐃⵠ(d[1]);
                                break;
                            case 34:
                                b.ⲆᐃⵠΔᐃⵠⵠⵠᐃ();
                                break;
                            case 35:
                                b.ⵠⲆᐃᐃⵠᐃΔᐃⲆ(d[1]);
                                break;
                            case 36:
                                b.ΔΔΔⵠⵠΔⲆ(d[1]);
                                break;
                            case 37:
                                b.ⵠⲆⵠᐃⲆⵠⵠⲆΔ(d[1], d[2]);
                                break;
                            case 38:
                                b.ⲆⲆⵠⵠⵠⲆⵠⵠᐃ(d[1]);
                                break;
                            case 39:
                                b.ᐃᐃⲆⲆΔⲆⲆⲆᐃ(d[1]);
                                break;
                            case 40:
                                b.ⲆΔⵠⲆⵠⵠΔΔᐃ();
                                break;
                            case 41:
                                b.ΔᐃⵠⲆⲆⵠΔΔᐃ(d);
                                break;
                            case 42:
                                b.ⲆⵠⲆᐃⵠᐃⲆΔⲆ(d[1]);
                                break;
                            case 43:
                                b.ⵠⲆⲆΔΔᐃΔᐃⵠ(d[1]);
                                break;
                            case 44:
                                b.claimed(d[1]);
                                break;
                            case 45:
                                b.ⵠᐃⲆⲆⲆⵠⵠΔⲆ(d[1]);
                                break;
                            case 46:
                                b.ⵠⲆⵠⵠᐃⲆⲆᐃⵠ(d[1]);
                                break;
                            case 47:
                                b.ΔᐃⲆⲆⲆ(d[1]);
                                break;
                            case 48:
                                b.ⵠΔᐃⵠΔᐃⵠⲆⵠ();
                                break;
                            case 50:
                                b.ᐃᐃⲆΔⲆⲆΔᐃᐃ(d[1], d[2], d[3]);
                                break;
                            case 51:
                                b.ⵠΔⲆᐃᐃᐃⲆΔⲆ();
                                break;
                            case 52:
                                b.ΔⵠΔⲆⲆᐃⵠⵠΔ(d[1]);
                                break;
                            case 53:
                                b.ᐃΔΔⵠᐃΔⵠⵠΔ(d[1]);
                                break;
                            case 54:
                                b.ΔΔᐃⲆᐃⲆΔΔᐃ();
                                break;
                            case 55:
                                b.ⵠᐃᐃⵠΔΔⲆⲆⵠ(d[1]);
                                break;
                            case 56:
                                b.ᐃⲆⵠⵠᐃΔⵠᐃⲆ(d[1]);
                                break;
                            case 57:
                                b.ΔΔΔΔⵠΔΔⲆⲆ();
                                break;
                            case 58:
                                b.ⵠΔΔⵠΔᐃⲆΔⵠ();
                                break;
                            case 59:
                                b.ⵠΔⵠᐃΔᐃⲆⲆⵠ();
                                break;
                            case 60:
                                b.ⲆᐃΔᐃⲆᐃᐃᐃᐃ();
                                break;
                            case 61:
                                Ex.ⵠⵠⵠ.ⵠⲆᐃΔⲆⵠⵠ = 0.2;
                                Ex.ⵠⵠⵠ.ⲆⲆᐃΔΔ = 3;
                                break;
                            case 62:
                                b.ᐃⵠΔⲆΔᐃⵠΔΔ(new Uint16Array(e));
                                break;
                            case 63:
                                b.ⵠⲆⲆᐃⵠⲆᐃΔΔ();
                                break;
                            case 64:
                                b.ᐃⵠᐃᐃΔΔΔⲆᐃ();
                                break;
                            case 65:
                                b.ⵠⵠⵠⵠᐃⵠᐃᐃᐃ();
                                break;
                            case 66:
                                b.ᐃⵠᐃᐃⲆᐃᐃᐃΔ();
                                break;
                            case 67:
                                b.ⲆᐃΔᐃⲆⵠⲆΔⵠ(d[1]);
                                break;
                            case 68:
                                b.ⵠΔⵠⵠᐃΔΔⲆⵠ(d[1]);
                                break;
                            case 69:
                                b.ⵠᐃⵠᐃΔⲆⲆ(d[1]);
                                break;
                            case 70:
                                b.ᐃᐃⲆᐃᐃⵠΔⵠⲆ(d[1]);
                                break;
                            case 71:
                                b.ΔⲆᐃᐃᐃ(d[1]);
                        }
                    }
                }
            };
            b.ΔⵠΔⵠ.onerror = function () {
                if (Ex.reconnect.enabled) {
                    Hf.setTimeout(b.timeout, 2500);
                }
            };
            this.ΔⵠΔⵠ.onopen = function () {
                clearTimeout(b.ᐃΔᐃᐃⵠ);
                Ex.ⵠᐃⵠᐃΔⵠΔ = Ex.ⵠᐃⵠᐃΔⵠΔ || ⵠΔⲆⵠ.ⵠΔⵠⵠΔⵠΔ("token");
                ⵠΔⲆⵠ.ΔΔᐃⲆⲆΔΔ().then(a => {
                    b.ΔⵠΔⵠ[Qf](Ua[Sa].stringify([Ax.ⲆⲆⲆⲆΔ.input.value, screen.width + 200, screen.height + 200, 52, Ex.ᐃΔⵠᐃᐃ, Ex.ᐃᐃⲆⵠⲆᐃᐃ, Ex.reconnect.enabled ? 1 : 0, Ax.ⵠᐃⵠᐃ, Ax.ᐃⵠᐃⲆΔ, Ax.ᐃᐃⵠᐃⲆ, Ax.ΔᐃᐃᐃΔ, Ax.ᐃⲆⲆⲆⲆ, Ax.ᐃⵠⵠΔΔ, $x === undefined ? 0 : $x, Zx === undefined ? 0 : Zx.substring(Zx.length - 50), Ff, Ex.ⵠᐃⵠᐃΔⵠΔ, a, Ex.ᐃⲆⲆⵠᐃⲆᐃ, Ex.ΔⲆⲆⲆⲆᐃⲆ]));
                    Ex.ⵠᐃⵠᐃΔⵠΔ = undefined;
                    Ex.ᐃⲆⲆⵠᐃⲆᐃ = Fa;
                    Ex.ΔⲆⲆⲆⲆᐃⲆ = Mq;
                    b.ᐃΔᐃᐃⵠ = setTimeout(b.timeout, 2000);
                });
            };
        };
    }();
    var Dx;
    var Ex;
    var Fx;
    var Gx = {
        ΔΔΔᐃⵠ: false
    };
    var Hx = new function () {
        this.ᐃΔᐃⲆΔ = 0;
        this.loaded = 0;
        this.transition = 0;
        this.ⵠⵠΔⵠⲆΔᐃ = function (a) {
            return a / Dx.w * 100;
        };
        this.ⲆᐃⲆⵠᐃⵠΔ = function (a) {
            return a / Dx.ⵠⲆⵠ * 100;
        };
        this.ⲆⲆⵠᐃΔⵠᐃ = function (a, b) {
            a = this.ⵠⵠΔⵠⲆΔᐃ(a) - this.ᐃᐃⵠΔⲆ.x;
            return this.ᐃᐃⵠΔⲆ.x + b * a;
        };
        this.ΔⵠΔᐃΔᐃⲆ = function (a, b) {
            a = Math.abs(this.ⲆᐃⲆⵠᐃⵠΔ(a) - this.ᐃᐃⵠΔⲆ.y);
            return this.ᐃᐃⵠΔⲆ.y + b * a;
        };
        this.sample = {};
        this.ⲆⵠᐃΔⵠ = {};
        this.ΔⵠΔⲆ = {};
        this.ΔⵠⲆΔΔⲆⲆ = function (b, c, d, e) {
            for (var f = 0; f < c.length; f++) {
                var g = c[f];
                if (!b.playing(g)) {
                    b.pos(d, e, -0.5, g);
                    b.play(g);
                    return As;
                }
            }
            return tr;
        };
        this.ΔⲆᐃ = function (a, b, c, d) {
            c = this.ⲆⲆⵠᐃΔⵠᐃ(c, ⲆⲆΔⲆⵠ.ΔΔⲆⲆⵠⵠᐃ);
            d = this.ΔⵠΔᐃΔᐃⲆ(d, ⲆⲆΔⲆⵠ.ΔΔⲆⲆⵠⵠᐃ);
            console.log("HIT", a, b, c, d, ⲆⲆΔⲆⵠ.ΔΔⲆⲆⵠⵠᐃ);
            if (a) {
                if (b === 1) {
                    this.ΔⵠⲆΔΔⲆⲆ(this.ΔⵠΔⲆ.ΔⵠⲆΔⵠᐃΔ, this.sample.ΔⵠⲆΔⵠᐃΔ, c, d);
                } else if (b === 0) {
                    this.ΔⵠⲆΔΔⲆⲆ(this.ΔⵠΔⲆ.ⵠΔᐃⵠΔⲆⲆ, this.sample.ⵠΔᐃⵠΔⲆⲆ, c, d);
                }
            } else {
                this.ΔⵠⲆΔΔⲆⲆ(this.ΔⵠΔⲆ.ᐃΔᐃⵠΔ, this.sample.ᐃΔᐃⵠΔ, c, d);
            }
        };
        this.ᐃᐃⵠΔⲆ = {
            y: 0,
            x: 0
        };
        this.ΔᐃᐃᐃΔΔⲆ = {
            y: 0,
            x: 0
        };
        this.ⵠᐃⲆⵠⵠ = {};
        this.ⵠᐃⲆΔ = [];
        this.ⲆⲆⵠⲆⵠ = function (a, b) {
            for (var c in this.ⵠᐃⲆⵠⵠ) {
                var d = this.ⵠᐃⲆⵠⵠ[c];
                d.check(a);
                if (d.ᐃⲆⵠⲆⲆⵠᐃ) {
                    if (Dx.ⲆⲆⵠΔⵠ.now < 460000) {
                        d.ΔΔᐃⲆⵠ();
                    }
                    if (b) {
                        d.ⲆΔᐃ(a, this.ᐃᐃⵠΔⲆ);
                    }
                    if (this.transition) {
                        d.transition();
                    }
                }
            }
            this.transition &&= 0;
        };
        this.ᐃᐃⲆΔⲆⵠΔⵠΔ = function () {
            var a = [];
            for (var b = 0; b < this.ⵠᐃⲆΔ.length; b++) {
                if ((e = this.ⵠᐃⲆΔ[b]).ⵠⲆⵠΔⵠᐃΔ) {
                    a.push(b);
                } else if (!e.ⵠⲆⵠΔⵠᐃΔ && !Dx.ⲆΔᐃΔΔ[e.ᐃⵠᐃΔ]) {
                    e.ⵠΔᐃΔᐃΔⲆ();
                    a.push(b);
                }
            }
            var c = Dx.ⵠᐃΔ[0];
            var d = 0;
            for (b = 0; b < c.length && d < a.length; b++) {
                var e = c[b];
                if ((Dx.mode != 1 || Dx.ⵠᐃⲆΔ[e.id].ⲆⲆⲆⲆΔ !== "spectator") && e.ΔⲆⲆΔⲆ === -1 && Ex.ᐃⵠᐃΔ !== e.ᐃⵠᐃΔ) {
                    this.ⵠᐃⲆΔ[a[d]].ⵠᐃᐃΔΔ(e.ᐃⵠᐃΔ);
                    d++;
                }
            }
        };
        this.ⲆⵠⲆΔΔᐃⲆΔᐃ = function () {
            this.ᐃᐃⲆΔⲆⵠΔⵠΔ();
            for (var a = 0; a < this.ⵠᐃⲆΔ.length; a++) {
                var b = this.ⵠᐃⲆΔ[a];
                if (!b.ⵠⲆⵠΔⵠᐃΔ && b.check()) {
                    b.ⲆΔᐃ();
                }
            }
        };
        this.ⲆⲆᐃΔΔⵠΔᐃᐃ = function (a) {
            if (this.ΔᐃᐃᐃΔΔⲆ.x === a.x && this.ΔᐃᐃᐃΔΔⲆ.y === a.y) {
                return 0;
            } else {
                this.ΔᐃᐃᐃΔΔⲆ.x = a.x;
                this.ΔᐃᐃᐃΔΔⲆ.y = a.y;
                this.ᐃᐃⵠΔⲆ.x = this.ⵠⵠΔⵠⲆΔᐃ(a.x);
                this.ᐃᐃⵠΔⲆ.y = this.ⲆᐃⲆⵠᐃⵠΔ(a.y);
                Howler.pos(this.ᐃᐃⵠΔⲆ.x, this.ᐃᐃⵠΔⲆ.y, 0);
                return 1;
            }
        };
        this.ᐃΔΔΔⵠΔᐃⵠⵠ = function () {
            if (this.ᐃΔᐃⲆΔ && this.loaded) {
                var a = Dx.ⲆΔᐃΔΔ[Ex.ᐃⵠᐃΔ];
                if (a) {
                    a.ΔⲆⲆΔⲆ = 0;
                    var b = this.ⲆⲆᐃΔΔⵠΔᐃᐃ(a);
                    if (Dx.mode !== 2 && Dx.mode !== 4 && Dx.mode !== 5) {
                        this.ⲆⲆⵠⲆⵠ(a, b);
                    }
                    this.ⲆⵠⲆΔΔᐃⲆΔᐃ();
                }
            }
        };
        this.ⵠᐃⲆΔΔᐃⲆⵠᐃ = function () {
            for (var b in vx) {
                var c = vx[b];
                if (typeof c === "object" && c.path) {
                    c.ᐃᐃᐃⵠᐃ = new Howl({
                        src: c.path,
                        volume: 0,
                        sprite: c.ᐃΔ
                    });
                }
                for (var d in c.sample) {
                    var f = c.sample[d];
                    var g = [];
                    console.log(Zi);
                    for (var h = 0; h < f; h++) {
                        var j = c.ᐃᐃᐃⵠᐃ.play(d);
                        c.ᐃᐃᐃⵠᐃ.stop(j);
                        c.ᐃᐃᐃⵠᐃ.on("fade", function (a) {
                            if (!this.volume(a)) {
                                console.log(hg, undefined);
                                this.stop(a);
                            }
                        }, j);
                        g.push(j);
                    }
                    if (g.length > 1) {
                        Hx.sample[d] = g;
                    } else {
                        Hx.sample[d] = g[0];
                    }
                    Hx.ΔⵠΔⲆ[d] = c.ᐃᐃᐃⵠᐃ;
                }
            }
        };
        this.ᐃⵠⲆⵠᐃᐃᐃ = function (a, b, c) {
            for (var d = 0; a.length > d; d++) {
                b.volume(c, a[d]);
            }
        };
        this.ⲆⵠⲆᐃⲆⲆⲆ = function (b, c, d, e, f, g) {
            var a = b;
            for (var i = 0; i < d; i++) {
                var j = a[i] = [];
                for (Ⲇⵠᐃⵠ = 0; e > Ⲇⵠᐃⵠ; Ⲇⵠᐃⵠ++) {
                    j[Ⲇⵠᐃⵠ] = Hx.sample[f + Ⲇⵠᐃⵠ][i];
                    c.ᐃᐃᐃⵠᐃ.volume(g, j[Ⲇⵠᐃⵠ]);
                }
            }
        };
        this.ⵠᐃᐃΔΔ = function () {
            Hx.ⵠᐃⲆΔΔᐃⲆⵠᐃ();
            Hx.ⲆⵠᐃΔⵠ.ΔⵠΔΔⵠⵠᐃ = [];
            Hx.ⲆⵠᐃΔⵠ.ⵠᐃΔΔΔ = [];
            Hx.ⲆⵠᐃΔⵠ.ⵠΔⵠΔⵠ = [];
            Hx.ⲆⵠⲆᐃⲆⲆⲆ(Hx.ⲆⵠᐃΔⵠ.ΔⵠΔΔⵠⵠᐃ, vx.ⵠᐃᐃⵠΔΔᐃ, 8, 3, "p", 0.15);
            Hx.ⲆⵠⲆᐃⲆⲆⲆ(Hx.ⲆⵠᐃΔⵠ.ⵠᐃΔΔΔ, vx.ΔᐃⵠᐃⲆⲆᐃ, 8, 4, "w", 0.15);
            Hx.ⲆⵠⲆᐃⲆⲆⲆ(Hx.ⲆⵠᐃΔⵠ.ⵠΔⵠΔⵠ, vx.ⲆⵠⲆⵠΔⲆᐃ, 8, 3, "d", 0.09);
            Hx.ᐃⵠⲆⵠᐃᐃᐃ(Hx.sample.ᐃΔᐃⵠΔ, Hx.ΔⵠΔⲆ.ᐃΔᐃⵠΔ, 0.15);
            Hx.ᐃⵠⲆⵠᐃᐃᐃ(Hx.sample.ⵠΔᐃⵠΔⲆⲆ, Hx.ΔⵠΔⲆ.ⵠΔᐃⵠΔⲆⲆ, 0.2);
            Hx.ᐃⵠⲆⵠᐃᐃᐃ(Hx.sample.ΔⵠⲆΔⵠᐃΔ, Hx.ΔⵠΔⲆ.ΔⵠⲆΔⵠᐃΔ, 1);
            Hx.ⵠᐃⲆⵠⵠ.ⲆⲆⵠΔⲆⲆⲆᐃⲆ = new wx(12, this.sample.ⲆⲆΔⵠⲆⲆⲆ, this.sample.ΔⵠⲆΔΔΔᐃ, 5000, 0.05, 0.4, vx.ΔⵠⵠⲆΔᐃΔ.ᐃᐃᐃⵠᐃ, 3000, {
                x: Hr.ᐃⲆⲆⵠⲆᐃᐃ,
                y: Hr.ᐃⵠⲆᐃⵠᐃᐃ,
                w: Dx.w,
                ⵠⲆⵠ: Dx.ⵠⲆⵠ
            }, {
                x: Hr.ᐃⲆⲆⵠⲆᐃᐃ - 2300,
                y: Hr.ᐃⵠⲆᐃⵠᐃᐃ - 4000,
                w: Dx.w,
                ⵠⲆⵠ: Dx.ⵠⲆⵠ
            }, {
                x: Hr.ᐃⲆⲆⵠⲆᐃᐃ - 1500,
                y: Hr.ᐃⵠⲆᐃⵠᐃᐃ - 2000,
                w: Dx.w,
                ⵠⲆⵠ: Dx.ⵠⲆⵠ
            });
            Hx.ⵠᐃⲆⵠⵠ.ⵠᐃᐃⵠᐃⲆΔᐃᐃ = new wx(12, this.sample.ⵠⵠᐃⲆⵠⵠⲆ, this.sample.ⵠΔⲆⵠⵠᐃⲆ, 5000, 0.03, 0.25, vx.ΔⵠⵠⲆΔᐃΔ.ᐃᐃᐃⵠᐃ, 3000, {
                x: 0,
                y: Hr.ᐃⵠⲆᐃⵠᐃᐃ + 800,
                w: Hr.ᐃⲆⲆⵠⲆᐃᐃ - 2300,
                ⵠⲆⵠ: Dx.ⵠⲆⵠ
            }, {
                x: -100,
                y: Hr.ᐃⵠⲆᐃⵠᐃᐃ - 300,
                w: Hr.ᐃⲆⲆⵠⲆᐃᐃ - 100,
                ⵠⲆⵠ: Dx.ⵠⲆⵠ
            }, {
                x: -100,
                y: Hr.ᐃⵠⲆᐃⵠᐃᐃ + 400,
                w: Hr.ᐃⲆⲆⵠⲆᐃᐃ - 1400,
                ⵠⲆⵠ: Dx.ⵠⲆⵠ
            });
            Hx.ⵠᐃⲆⵠⵠ.ᐃᐃᐃΔⵠᐃΔ = new wx(12, this.sample.ᐃⵠᐃΔᐃⵠⵠ, this.sample.ᐃⲆⵠⲆΔⵠΔ, 5000, 0.01, 0.22, vx.ΔⵠⵠⲆΔᐃΔ.ᐃᐃᐃⵠᐃ, 3000, {
                x: -100,
                y: -100,
                w: Dx.w + 200,
                ⵠⲆⵠ: Hr.ᐃⵠⲆᐃⵠᐃᐃ - 1000
            }, {
                x: -100,
                y: -100,
                w: Dx.w + 200,
                ⵠⲆⵠ: Hr.ᐃⵠⲆᐃⵠᐃᐃ + 600
            }, {
                x: -100,
                y: -100,
                w: Dx.w + 200,
                ⵠⲆⵠ: Hr.ᐃⵠⲆᐃⵠᐃᐃ + 100
            });
            for (var a = 0; a < 8; a++) {
                Hx.ⵠᐃⲆΔ[a] = new zx(a);
            }
            Hx.ⵠᐃⲆΔ[0].ⵠᐃᐃΔΔ(Ex.ᐃⵠᐃΔ);
            Hx.loaded = 1;
        };
        this.ⵠⲆΔⵠⵠⲆⵠⲆⵠ = function () {
            if (!this.transition && Dx.ⲆⲆⵠΔⵠ.now < 460000) {
                this.transition = 1;
            }
        };
        this.ⲆⲆⵠᐃᐃ = function () {
            if (this.ᐃΔᐃⲆΔ && this.loaded) {
                for (var a in Hx.sample) {
                    var b = Hx.sample[a];
                    if (typeof b === "object") {
                        for (var c = 0; c < b.length; c++) {
                            Hx.ΔⵠΔⲆ[a].stop(b[c]);
                        }
                    } else {
                        Hx.ΔⵠΔⲆ[a].stop(b);
                    }
                }
                for (c = 0; Hx.ⵠᐃⲆΔ.length > c; c++) {
                    Hx.ⵠᐃⲆΔ[c].ⵠΔᐃΔᐃΔⲆ();
                }
            }
        };
        this.select = function () {
            if (Hx.ᐃΔᐃⲆΔ) {
                Hx.ⲆⲆⵠᐃᐃ();
            } else {
                if (!Hx.loaded) {
                    Hx.ⵠᐃᐃΔΔ();
                }
                Hx.ⵠᐃⲆΔ[0].ᐃⵠᐃΔ = Ex.ᐃⵠᐃΔ;
                Hx.ⵠᐃⲆΔ[0].ⵠⲆⵠΔⵠᐃΔ = 0;
                Hx.ⵠⲆΔⵠⵠⲆⵠⲆⵠ();
            }
            Hx.ᐃΔᐃⲆΔ = !Hx.ᐃΔᐃⲆΔ;
        };
    }();
    var Ix = new function () {
        this.ⲆⵠⵠΔᐃⵠᐃ = function () {
            this.ⵠⲆⲆΔⵠ = 81;
            this.ΔⲆᐃᐃΔ = 68;
            this.ⵠⵠΔΔⵠ = 90;
            this.ΔⵠΔΔⲆᐃⵠ = 83;
        };
        this.ⵠⵠⲆᐃΔⲆΔ = function () {
            this.ⵠⲆⲆΔⵠ = 65;
            this.ΔⲆᐃᐃΔ = 68;
            this.ⵠⵠΔΔⵠ = 87;
            this.ⵠΔⵠⲆΔ = 83;
        };
        this.ᐃᐃΔΔⲆ = 0;
        this.ΔⵠΔΔⲆᐃⵠ = 1;
        this.ΔⲆᐃΔΔⲆⲆ = 49;
        this.ⲆᐃΔⲆⲆⵠΔ = 50;
        this.ⲆᐃⲆⵠⲆⵠⲆ = 51;
        this.ᐃⵠᐃⵠⲆΔᐃ = 52;
        this.ⵠᐃΔⵠΔⵠᐃⲆΔ = 53;
        this.ⵠⵠᐃᐃΔⲆᐃ = 17;
        this.ᐃΔⵠⵠΔᐃΔ = 37;
        this.ᐃΔⵠΔΔᐃⲆ = 39;
        this.ⵠⵠΔΔΔᐃⲆ = 38;
        this.ᐃⵠᐃΔᐃΔⲆ = 40;
        this.ᐃⵠⵠΔΔⵠⵠ = 32;
        this.ᐃⲆⵠⲆⵠΔⵠ = 82;
        this.ⲆⲆᐃⵠⲆⵠⲆ = 71;
        this.ᐃΔᐃⵠⵠΔⵠ = 86;
        this.ⲆᐃⵠᐃᐃΔⲆ = 66;
        this.ⵠⵠⲆᐃΔⲆΔ();
        this.keys = new Array(255);
        for (var a = 0; a < 255; a++) {
            this.keys[a] = this.ᐃᐃΔΔⲆ;
        }
        this.up = function (a) {
            var b = Math.min(a.charCode || a.keyCode, 255);
            this.keys[b] = this.ᐃᐃΔΔⲆ;
        };
        this.down = function (a) {
            var b = Math.min(a.charCode || a.keyCode, 255);
            if (this.ⵠⲆⲆΔⵠ == b || this.ᐃΔⵠⵠΔᐃΔ == b) {
                this.ⵠΔᐃⵠΔⵠⲆ();
            } else if (b == this.ⵠⵠΔΔⵠ || this.ⵠⵠΔΔΔᐃⲆ == b) {
                this.ⲆⲆᐃΔⵠᐃⵠ();
            } else if (b == this.ΔⵠΔΔⲆᐃⵠ || this.ⲆⲆⲆⵠᐃΔⵠᐃᐃ == b) {
                this.ⵠΔᐃⵠᐃⲆⲆ();
            } else if (this.ΔⲆᐃᐃΔ == b || b == this.ᐃΔⵠΔΔᐃⲆ) {
                this.ⵠⵠᐃⵠⵠΔΔ();
            }
            this.keys[b] = this.ΔⵠΔΔⲆᐃⵠ;
            return b;
        };
        this.ⵠΔᐃⵠΔⵠⲆ = function () {
            this.keys[this.ΔⲆᐃᐃΔ] = this.ᐃᐃΔΔⲆ;
            this.keys[this.ᐃΔⵠΔΔᐃⲆ] = this.ᐃᐃΔΔⲆ;
        };
        this.ⵠⵠᐃⵠⵠΔΔ = function () {
            this.keys[this.ⵠⲆⲆΔⵠ] = this.ᐃᐃΔΔⲆ;
            this.keys[this.ᐃΔⵠⵠΔᐃΔ] = this.ᐃᐃΔΔⲆ;
        };
        this.ⵠΔᐃⵠᐃⲆⲆ = function () {
            this.keys[this.ⵠⵠΔΔⵠ] = this.ᐃᐃΔΔⲆ;
            this.keys[this.ⵠⵠΔΔΔᐃⲆ] = this.ᐃᐃΔΔⲆ;
        };
        this.ⲆⲆᐃΔⵠᐃⵠ = function () {
            this.keys[this.ⵠΔⵠⲆΔ] = this.ᐃᐃΔΔⲆ;
            this.keys[this.ᐃⵠᐃΔᐃΔⲆ] = this.ᐃᐃΔΔⲆ;
        };
        this.ⵠᐃΔᐃΔΔⵠ = function () {
            this.keys[this.ΔⲆᐃᐃΔ] = this.ᐃᐃΔΔⲆ;
            this.keys[this.ᐃΔⵠΔΔᐃⲆ] = this.ᐃᐃΔΔⲆ;
            this.keys[this.ⵠⲆⲆΔⵠ] = this.ᐃᐃΔΔⲆ;
            this.keys[this.ᐃΔⵠⵠΔᐃΔ] = this.ᐃᐃΔΔⲆ;
            this.keys[this.ⵠⵠΔΔⵠ] = this.ᐃᐃΔΔⲆ;
            this.keys[this.ⵠⵠΔΔΔᐃⲆ] = this.ᐃᐃΔΔⲆ;
            this.keys[this.ⵠΔⵠⲆΔ] = this.ᐃᐃΔΔⲆ;
            this.keys[this.ᐃⵠᐃΔᐃΔⲆ] = this.ᐃᐃΔΔⲆ;
        };
        this.ΔⵠⲆᐃⵠΔᐃ = function () {
            return this.keys[this.ⵠⲆⲆΔⵠ] || this.keys[this.ᐃΔⵠⵠΔᐃΔ];
        };
        this.ⵠᐃⲆΔⲆᐃⵠ = function () {
            return this.keys[this.ΔⲆᐃᐃΔ] || this.keys[this.ᐃΔⵠΔΔᐃⲆ];
        };
        this.ᐃΔᐃⲆⲆⲆⲆ = function () {
            return this.keys[this.ⵠⵠΔΔⵠ] || this.keys[this.ⵠⵠΔΔΔᐃⲆ];
        };
        this.ⵠⵠΔⵠⲆᐃⵠ = function () {
            return this.keys[this.ⵠΔⵠⲆΔ] || this.keys[this.ᐃⵠᐃΔᐃΔⲆ];
        };
        this.ⲆⵠᐃΔΔᐃᐃᐃᐃ = function () {
            return this.keys[this.ⵠⵠᐃᐃΔⲆᐃ];
        };
        this.ΔΔΔᐃⵠⲆⲆᐃᐃ = function () {
            return this.keys[this.ΔⲆᐃΔΔⲆⲆ];
        };
        this.ⲆΔⵠⵠⲆᐃΔⵠⵠ = function () {
            return this.keys[this.ⲆᐃΔⲆⲆⵠΔ];
        };
        this.ᐃⲆⲆⲆΔⵠᐃᐃΔ = function () {
            return this.keys[this.ⲆᐃⲆⵠⲆⵠⲆ];
        };
        this.ⲆᐃΔⲆⲆᐃⵠΔΔ = function () {
            return this.keys[this.ᐃⵠᐃⵠⲆΔᐃ];
        };
        this.ΔΔⲆⵠΔΔᐃⲆⲆ = function () {
            return this.keys[this.ᐃⵠⵠΔΔⵠⵠ];
        };
        this.ⲆᐃᐃⲆᐃΔⲆⲆᐃ = function () {
            return this.keys[this.ᐃⲆⵠⲆⵠΔⵠ];
        };
        this.ΔⲆΔᐃⲆⵠᐃΔⲆ = function () {
            return this.keys[this.ⲆⲆᐃⵠⲆⵠⲆ];
        };
        this.ⲆⵠᐃⵠⵠᐃⵠΔΔ = function () {
            return this.keys[this.ᐃΔᐃⵠⵠΔⵠ];
        };
        this.ⵠⲆᐃⵠⵠΔⲆⲆⵠ = function () {
            return this.keys[this.ⲆᐃⵠᐃᐃΔⲆ];
        };
    }();
    var Jx = new function () {
        this.ΔⵠΔΔⲆᐃⵠ = 0;
        this.ᐃᐃΔΔⲆ = 1;
        this.IDLE = 2;
        this.ᐃΔᐃᐃᐃⵠᐃ = 0;
        this.ⵠᐃⲆⲆᐃⲆΔᐃΔ = 1;
        this.ⵠⵠⲆⲆ = {
            x: 0,
            y: 0
        };
        this.ΔᐃⲆⵠⵠⲆᐃ = 0;
        this.ᐃⲆᐃⵠΔⵠⵠ = 0;
        this.angle = 0;
        this.state = this.IDLE;
        this.ᐃⲆᐃⲆ = this.ᐃΔᐃᐃᐃⵠᐃ;
        this.down = function () {
            this.state = this.ΔⵠΔΔⲆᐃⵠ;
        };
        this.up = function () {
            this.state = this.ᐃᐃΔΔⲆ;
        };
        this.ⲆΔᐃ = function () {
            return (this.ΔᐃⲆⵠⵠⲆᐃ != this.ⵠⵠⲆⲆ.x || this.ⵠⵠⲆⲆ.y != this.ᐃⲆᐃⵠΔⵠⵠ) && (this.ΔᐃⲆⵠⵠⲆᐃ = this.ⵠⵠⲆⲆ.x, this.ᐃⲆᐃⵠΔⵠⵠ = this.ⵠⵠⲆⲆ.y, true);
        };
    }();
    var Kx = 0;
    var Lx = 0;
    var Mx = new function (a, e, f) {
        this.ΔΔ = a;
        this.Δ = e;
        this.ⲆⲆⵠⲆⵠΔΔ = {
            translate: {
                y: 0,
                x: 0
            },
            style: document.getElementById("loading").style,
            ⲆΔᐃ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        this.ⲆⲆⵠⲆⵠΔΔ.style.position = "absolute";
        this.ⲆⲆⵠⲆⵠΔΔ.style.display = "inline-block";
        this.ⲆⲆⵠⲆⵠΔΔ.ⲆΔᐃ();
        this.ΔΔΔᐃⵠ = true;
        this.stop = function () {
            this.ΔΔΔᐃⵠ = false;
        };
        this.ⲆΔⲆΔⵠⲆⲆ = {
            total: 1
        };
        var g = this;
        function i() { }
        var j = 0;
        function k(a) {
            if (a.indexOf("normal-mode") !== -1 || a.indexOf("player0") !== -1) {
                return 1;
            } else if (a.indexOf("day-bag") !== -1 || a.indexOf("night-bag") !== -1 || a.indexOf("day-book") !== -1 || a.indexOf("night-book") !== -1 || a.indexOf("day-player") !== -1 || a.indexOf("night-player") !== -1 || a.indexOf("day-accessory") !== -1 || a.indexOf("night-accessory") !== -1 || a.indexOf("day-crate") !== -1 || a.indexOf("night-crate") !== -1 || a.indexOf("day-skin") !== -1 || a.indexOf("night-skin") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-rock") !== -1 || a.indexOf("night-rock") !== -1 || a.indexOf("day-flower") !== -1 || a.indexOf("night-flower") !== -1 || a.indexOf("day-leaf") !== -1 || a.indexOf("night-leaf") !== -1 || a.indexOf("day-herb") !== -1 || a.indexOf("night-herb") !== -1 || a.indexOf("day-shell") !== -1 || a.indexOf("night-shell") !== -1 || a.indexOf("day-hand-skin") !== -1 || a.indexOf("night-hand-skin") !== -1 || a.indexOf("bignight") !== -1 || a.indexOf("bigday") !== -1 || a.indexOf("bigzday") !== -1 || a.indexOf("bigznight") !== -1 || a.indexOf("tutorial-box") !== -1 || a.indexOf("tuto-") !== -1 || a.indexOf("-leaderboard-") !== -1 || a.indexOf("-lead-") !== -1 || a.indexOf("day-lava-") !== -1 || a.indexOf("night-lava-") !== -1 || a.indexOf("-click.png") !== -1 || a.indexOf("-in.png") !== -1 || a.indexOf("-fog") !== -1 || a.indexOf("-lava") !== -1 || a.indexOf("pebblecompo") !== -1 || a.indexOf("avatar-player") !== -1) {
                return 0;
            } else {
                return 1;
            }
        }
        this.ⵠⵠᐃⲆⵠ = function () {
            g.ⲆΔᐃ();
            if (++j == 40) {
                g.stop();
                i();
                return;
            }
            Hf.setTimeout(g.ⵠⵠᐃⲆⵠ, 33);
        };
        this.ⲆⲆⵠᐃᐃ = function (a) {
            i = a;
            g.ⵠⵠᐃⲆⵠ();
        };
        new Date().getTime();
        Object.keys(ᐃⲆ).length;
        console.log(undefined, undefined);
        for (var n in ᐃⲆ) {
            if (k(ᐃⲆ[n]) === 0) {
                0;
            }
        }
        console.log(Rh, undefined);
        function p() {
            if (this.ΔᐃᐃᐃΔΔⵠ !== 0) {
                return this.ΔᐃᐃᐃΔΔⵠ;
            } else {
                this.ΔᐃᐃᐃΔΔⵠ = 2;
                this.src = this.ⲆΔⲆⵠΔ;
                return 0;
            }
        }
        function l(a) {
            this.ΔᐃᐃᐃΔΔⵠ = 1;
        }
        var q = 0;
        function s() {
            console.log(Nh);
            if (q !== 1) {
                q = 1;
                console.log(mr);
                if (Ab !== rb) {
                    rb();
                }
                Ab();
                var a = ⵠΔⲆⵠ.ⵠΔⵠⵠΔⵠΔ("server");
                if (a !== null) {
                    Δⵠⵠⵠ.ᐃᐃⲆΔΔᐃⵠ = 1;
                    Δⵠⵠⵠ.ᐃΔᐃⲆⵠ = [{
                        nu: 0,
                        m: 100,
                        i: "server" + a + ".starve.io",
                        p: 443,
                        a: a,
                        ssl: 1
                    }];
                }
                Δⵠⵠⵠ.ΔΔⲆᐃⵠⲆⵠΔᐃ();
                setTimeout(f, 100);
            }
        }
        function d() {
            let a = function () {
                Δⵠⵠⵠ.ⲆⵠⵠⵠⲆΔⵠ(s);
            };
            if (document.fonts && document.fonts.check) {
                if (document.fonts.check("1em Baloo Paaji")) {
                    setTimeout(a, 100);
                } else {
                    setTimeout(d, 100);
                }
            } else {
                setTimeout(a, 1000);
            }
        }
        function u() {
            this.ΔΔᐃᐃΔΔⲆ++;
            console.warn(`Image (${this.src}) failed to load, attempt ${this.ΔΔᐃᐃΔΔⲆ}`, this);
            if (this.ΔΔᐃᐃΔΔⲆ > 3) {
                console.warn("Failed to load image too many times");
            }
            var a = this.ΔΔᐃᐃΔΔⲆ;
            var b = this.src;
            var c = k(b) === 0 ? 10000 : 2000;
            setTimeout(function () {
                for (var c in ⲆᐃⲆⵠⵠⵠᐃ) {
                    if (b.indexOf(ⲆᐃⲆⵠⵠⵠᐃ[c]) !== -1) {
                        ᐃⲆ[c] = new Image();
                        ᐃⲆ[c].onload = l;
                        ᐃⲆ[c].onerror = u;
                        ᐃⲆ[c].ΔΔᐃᐃΔΔⲆ = a;
                        ᐃⲆ[c].src = b;
                        break;
                    }
                }
            }, c);
        }
        function c(a) {
            for (var b in ᐃⲆ) {
                var c = ᐃⲆ[b];
                if (typeof c === "string" && k(c) === a) {
                    ᐃⲆ[b] = new Image();
                    ᐃⲆ[b].ΔᐃᐃᐃΔΔⵠ = 0;
                    ᐃⲆ[b].ΔΔᐃᐃΔΔⲆ = 0;
                    ᐃⲆ[b].onload = l;
                    ᐃⲆ[b].onerror = u;
                    ᐃⲆ[b].ⵠΔⵠⵠⲆⵠΔ = p;
                    ᐃⲆ[b].ⲆΔⲆⵠΔ = c;
                }
            }
        }
        c(1);
        c(0);
        qu(1, "l", 20, "#000");
        d();
        gp();
        this.ⲆΔᐃ = function () {
            this.ⲆⲆⵠⲆⵠΔΔ.translate.x = (io - 500) / 2;
            this.ⲆⲆⵠⲆⵠΔΔ.translate.y = (no - 150) / 2;
            var a = 2500 / (40 - j + 1) - 48;
            this.ⲆⲆⵠⲆⵠΔΔ.translate.y -= a;
            this.ⲆⲆⵠⲆⵠΔΔ.ⲆΔᐃ();
        };
        this.ⲆⲆⵠⲆⵠΔΔ.ⲆΔᐃ();
        this.ⵠⲆⲆⵠ = function () {
            try {
                Tp();
            } catch (a) { }
            this.ⲆΔᐃ();
        };
    }(Wn, ao, function () {
        vp();
        Gx = new fx(Wn, ao);
        (Ax = new ix(Wn, ao)).ΔⲆⵠᐃⵠᐃⲆⲆⲆ();
        Fx = new jx(Wn, ao);
        Dx = new Hw();
        Ex = new Nw();
        Mx.ⲆⲆⵠᐃᐃ(function () {
            Mx.ⲆⲆⵠⲆⵠΔΔ.style.display = "none";
            Ax.ᐃΔᐃⲆΔ();
        });
    });
    function Nx(b, c, d) {
        const e = b ^ 14970;
        const f = (24 << (c >> 24 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c & 255)) + (0 << (c >> 8 & 255));
        const g = d ^ 21225;
        return (34897 + (Xw(e, f, g, e) ^ xr(f, g, e, f, g, e))) % 65441;
    }
    function Ox() {
        try {
            Hf.Widget.adsRefresh();
        } catch (a) { }
    }
    Hf.onbeforeunload = function () {
        if (Gx.ΔΔΔᐃⵠ) {
            return "Are you sure you want quit starve.io ;-; ?";
        }
    };
    Rq();
    (function b(a) {
        Hf.requestAnimationFrame(b);
        Lx = (a - Kx) / 1000;
        Kx = a;
        Lx = Lx > 1 ? 1 : Lx;
        if (Gx.ΔΔΔᐃⵠ) {
            Gx.ⵠⲆⲆⵠ();
        } else {
            ao.clearRect(0, 0, io, no);
            if (Mx.ΔΔΔᐃⵠ) {
                Mx.ⵠⲆⲆⵠ();
            } else if (Ax.ΔΔΔᐃⵠ) {
                Ax.ⵠⲆⲆⵠ();
            } else if (Fx.ΔΔΔᐃⵠ) {
                Fx.ⵠⲆⲆⵠ();
            }
        }
    })(0);
    var Px = 0;
    function Qx() {
        Rx.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", true);
        Rx.send();
    }
    var Rx = new XMLHttpRequest();
    function Sx(b, c, d, e, f) {
        const i = ~(b & 42364) & (b | 42364);
        const a = (2531011 + (c + 26448) * 214013) % 4294967296;
        const j = (d | 35196) & ~(d & 35196);
        const k = (e | 60294) & ~(e & 60294);
        const h = ~(f & 44366) & (f | 44366);
        const l = xx(i, a, j, k);
        wt(i, a, j, k, h, i);
        return l ^ 11721;
    }
    Rx.onreadystatechange = function () {
        if (this.readyState === 4) {
            this.status;
        }
    };
    var Tx = "https://token.starve.io/";
    var Ux = "https://token2.starve.io/";
    var Vx = 0;
    var Wx = 1;
    var Xx = 4;
    var Yx = hg;
    var Zx = undefined;
    var $x = undefined;
    var _x = 0;
    Hf.ⵠΔΔΔΔᐃⲆ = function () {
        _x = 1;
    };
    var ay = {
        ⵠⲆⵠΔΔⲆΔⲆⵠ: "ACCESS_TOKEN"
    };
    var by = document.createElement("script");
    by.type = "text/javascript";
    by.async = Yg;
    by.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
    by.addEventListener("load", function (a) {
        Hf.XPayStationWidget.init(ay);
        Hf.XPayStationWidget.on("status-done", vy);
    }, bk);
    document.getElementsByTagName("head")[0].appendChild(by);
    Hf.fbAsyncInit = function () {
        xy();
        console.log(Io);
    };
    (function (a, b, c) {
        var d;
        var e = a.getElementsByTagName(b)[0];
        if (!a.getElementById(c)) {
            (d = a.createElement(b)).id = c;
            d.src = "https://connect.facebook.net/en_US/sdk.js";
            e.parentNode.insertBefore(d, e);
        }
    })(document, "script", "facebook-jssdk");
    var cy = Zi;
    var ey = undefined;
    function fy() {
        Hf.gapi.auth2.init({
            client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
            scope: "https://www.googleapis.com/auth/userinfo.profile"
        }).then(a => {
            (cy = a).isSignedIn.listen(gy);
            cy.currentUser.listen(my);
            if (cy.isSignedIn.get()) {
                cy.signIn();
            }
            py();
        });
    }
    function gy(a) { }
    function my(a) {
        if (Zx === undefined && ey !== undefined && (Zx = ey.getAuthResponse().id_token, Ih !== Zx)) {
            Yx = Vx;
            $x = ey.getBasicProfile().getId();
            Hf.ⵠΔΔΔΔᐃⲆ();
            return;
        }
        if (a !== undefined && a.isSignedIn() === true) {
            $x = (ey = a).id;
            $x = ey.getBasicProfile().getId();
            Zx = ey.getAuthResponse().id_token;
            Yx = Vx;
            Hf.ⵠΔΔΔΔᐃⲆ();
        }
    }
    function py() {
        if (cy) {
            ey = cy.currentUser.get();
        }
    }
    function qy(a) {
        if ($x) {
            var b = new XMLHttpRequest();
            b.open("GET", Tx + "xsolla?userid=" + $x + "&item=" + a);
            b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            b.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
                    ay.access_token = b.responseText;
                    Hf.XPayStationWidget.init(ay);
                    Hf.XPayStationWidget.open();
                }
            };
            b.send();
        }
    }
    function ry(a) {
        var b = new XMLHttpRequest();
        b.open("GET", Tx + "setRegion?token=" + Zx + "&userid=" + $x + "&region=" + a);
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {
                if (b.responseText !== "0") {
                    Ax.ᐃᐃᐃⲆ(Ax.ΔΔⵠⵠⲆ);
                } else {
                    Ax.ᐃᐃᐃⲆ(Ax.ⵠᐃᐃΔᐃ);
                }
            }
        };
        b.send();
    }
    function sy(a, b) {
        if (Ax.ⵠⲆΔⲆⲆ < b) {
            Ax.ᐃᐃᐃⲆ(Ax.ᐃᐃⲆΔⲆ);
        } else {
            var c = new XMLHttpRequest();
            c.open("GET", Tx + "buyKit?token=" + Zx + "&userid=" + $x + "&kit=" + a);
            c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            c.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200 && c.responseText !== "0") {
                    var a = JSON.parse(c.responseText);
                    Ax.ⵠⲆΔⲆⲆ -= b;
                    Ax.Δᐃᐃᐃⵠ = Date.now() + Number(a);
                }
            };
            c.send();
        }
    }
    function uy(a, b, c, d) {
        a = a === undefined ? Ax.ᐃⵠΔⵠⵠᐃⲆ : a;
        b = b === undefined ? Ax.ᐃⲆⵠⵠᐃᐃⲆ : b;
        c = c === $e ? Ax.ⵠΔⵠΔΔᐃᐃ : c;
        d = d === undefined ? Ax.ΔⵠᐃᐃⵠⲆⵠ : d;
        if (Ax.ᐃⵠΔⵠⵠᐃⲆ !== a || b !== Ax.ᐃⲆⵠⵠᐃᐃⲆ || Ax.ⵠΔⵠΔΔᐃᐃ !== c || Ax.ΔⵠᐃᐃⵠⲆⵠ !== d) {
            Ax.ᐃⵠΔⵠⵠᐃⲆ = a;
            Ax.ᐃⲆⵠⵠᐃᐃⲆ = b;
            Ax.ⵠΔⵠΔΔᐃᐃ = c;
            Ax.ΔⵠᐃᐃⵠⲆⵠ = d;
            if (Ax.ⲆΔⵠΔᐃᐃᐃ === d) {
                d = "0";
            } else if (d === Ax.ⵠΔⵠΔⵠΔⵠ) {
                d = "1";
            } else if (Ax.ΔΔᐃᐃΔⵠⵠ === d) {
                d = "2";
            } else if (Ax.ΔᐃᐃⵠⵠⵠΔ === d) {
                d = "3";
            } else if (d === Ax.ⵠⲆΔΔⵠⲆᐃ) {
                d = "4";
            } else if (d === Ax.ⲆᐃⲆᐃⵠⵠⵠ) {
                d = "5";
            }
            if (b === Ax.ᐃⵠΔⲆⵠΔΔ) {
                b = "total";
            } else if (b === Ax.ᐃⲆⵠΔⲆⲆⵠ) {
                b = "normal";
            } else if (Ax.ΔⲆⲆᐃᐃⵠΔ === b) {
                b = "zombie";
            } else if (Ax.ΔΔⲆᐃⲆΔᐃ === b) {
                b = "vampire";
            } else if (Ax.ⲆⲆⲆᐃΔⵠΔ === b) {
                b = "forest";
            }
            if (a === Ax.ΔⲆⲆΔᐃⵠΔ) {
                a = "all";
            }
            if (Ax.ⵠⵠΔᐃⲆⵠⵠ === a) {
                a = "week";
            }
            if (a === Ax.ⵠΔⵠᐃᐃⲆᐃ) {
                a = "today";
            }
            if (c === Ax.ⲆΔⲆⵠⲆΔⲆ) {
                c = "kill";
            } else if (c === Ax.ΔΔΔᐃⲆᐃΔ) {
                c = "score";
            } else if (Ax.ⵠⵠⲆⲆΔⵠⲆ === c) {
                c = "time";
            }
            var f = new XMLHttpRequest();
            f.open("GET", Tx + "leaderboard?range=" + a + "&mode=" + b + "&sort=" + c + "&season=" + d);
            f.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            f.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200 && f.responseText !== "0") {
                    for (var a = JSON.parse(f.responseText), b = "", c = 0; a.length > c; c++) {
                        ΔⲆΔⵠⵠ = a[c];
                        var d = ΔⲆΔⵠⵠ[1];
                        try {
                            if (d.indexOf("Starver#") === -1) {
                                d = Hf.decodeURIComponent(Hf.escape(Hf.atob(d)));
                            }
                        } catch (a) { }
                        b += "<div class=\"lineLeaderboard\">";
                        b += "<div class=\"rank\">";
                        b += c + 1 + "";
                        b += "</div>";
                        b += "<div class=\"name\">";
                        b += d;
                        b += "</div>";
                        b += "<div class=\"lvl\">";
                        b += Ax.ᐃΔⲆΔⲆᐃΔ(ΔⲆΔⵠⵠ[6]) + 1 + "";
                        b += "</div>";
                        b += "<div class=\"kills\">";
                        b += ΔⲆΔⵠⵠ[5] + "";
                        b += "</div>";
                        b += "<div class=\"time\">";
                        b += ΔⲆΔⵠⵠ[4] + "";
                        b += "</div>";
                        b += "<div class=\"score\">";
                        b += ΔⲆΔⵠⵠ[3] + "";
                        b += "</div>";
                        b += "</div>";
                    }
                    document.getElementById("leaderboard").innerHTML = b;
                }
            };
            f.send();
        }
    }
    function vy() {
        var a = new XMLHttpRequest();
        a.open("GET", Tx + "claimBread?userid=" + $x);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
                var b = Number(a.responseText);
                if (!isNaN(b)) {
                    Ax.ⵠⲆΔⲆⲆ = b;
                }
            }
        };
        a.send();
    }
    function xy() {
        if (Hf.FB) {
            Hf.FB.init({
                appId: "642017356260407",
                xfbml: Jg,
                version: "v15.0",
                cookie: dr
            });
        }
        if (ks === $x) {
            (function () {
                try {
                    if (Hf.FB && Hf.FB.getUserID()) {
                        $x = Hf.FB.getUserID();
                        if (Zx === Nh) {
                            Hf.FB.getLoginStatus(function () {
                                Yx = Wx;
                                Zx = Hf.FB.getAuthResponse().accessToken;
                                Hf.ⵠΔΔΔΔᐃⲆ($x);
                            });
                        }
                    }
                } catch (a) { }
                try {
                    $x = ey.getBasicProfile().getId();
                } catch (a) { }
            })();
        }
    }
    function jy(a, b) {
        if (Ax.ΔⵠᐃΔⲆ <= 0) {
            if (Ax.ⵠⲆΔⲆⲆ < b) {
                Ax.ᐃᐃᐃⲆ(Ax.ᐃᐃⲆΔⲆ);
            } else {
                Ax.ΔⵠᐃΔⲆ = 2;
                Ax.ᐃⵠΔᐃⵠΔⲆ = 0;
                Ax.ΔⲆⲆΔΔⲆΔ = 100;
                var c = new XMLHttpRequest();
                c.open("GET", Tx + "buySpin?token=" + Zx + "&userid=" + $x + "&spin=" + a);
                c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                c.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        if (c.responseText !== "0") {
                            var a = JSON.parse(c.responseText);
                            Ax.ⵠⲆⵠᐃΔⲆⲆᐃΔ(Math.PI * a.rand * 2, a.type, a.id);
                            Ax.ⵠⲆΔⲆⲆ -= b;
                        } else {
                            Ax.ΔⵠᐃΔⲆ = 0;
                        }
                    }
                };
                c.send();
            }
        }
    }
    function zy() {
        if (Ax.ⵠⲆΔⲆⲆ >= 300 || Ax.ⵠΔⵠⲆΔⵠΔ <= 0) {
            var a = document.getElementById("account_nickname_input").value.trim();
            document.getElementById("account_nickname_input").value = a;
            if (a.length >= 1 && a.length <= 20) {
                var b = new XMLHttpRequest();
                b.open("GET", Tx + "changeNickname?token=" + Zx + "&userid=" + $x + "&nickname=" + encodeURIComponent(a));
                b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                b.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
                        var a = Number(b.responseText);
                        if (a > 0) {
                            Ax.ⵠⲆΔⲆⲆ -= a;
                        }
                        Ax.ⵠΔⵠⲆΔⵠΔ = 1;
                        Ax.ᐃᐃᐃⲆ(Ax.ⵠⵠⵠᐃⵠ);
                    }
                };
                b.send();
            }
        }
    }
})();
